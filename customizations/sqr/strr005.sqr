!-----------------------------------------------------------------------
! Report Name: STRR005.SQR - ISO Limit Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:55:35                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr:
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Emplid, From Date, Thru Date
! Options:       None
! Tables:        RUN_CNTL_ST
! Sorts:
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
Begin-Report
!-----------------------------------------------------------------------

  do Init-Report
  do Process-Main
  do Delete-Temp
  do Reset
  do Successful-EOJ

  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

end-report

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 5

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)

End-Heading

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ('STRR005')

  do Get_Field_Information ('STOCK', 'STOCK_ID',      $StockIdLbl,       #DW)
  do Get_Field_Information ('STOCK', 'NAME',          $NameLbl,          #DW)
  do Get_Field_Information ('STOCK', 'EMPLID',        $EmplidLbl,        #DW)
  do Get_Field_Information ('STOCK', 'GRANT',         $GrantLbl,         #DW)
  do Get_Field_Information ('STOCK', 'NUMBER',        $NumberLbl,        #DW)
  do Get_Field_Information ('STOCK', 'DATE',          $DateLbl,          #DW)

  do Get_Field_Information ('STRR005', 'STRR005',     $ReportTitle,      #DW)
  do Get_Field_Information ('STRR005', 'GRANT_FMV',   $GrantFMVLbl,      #DW)
  do Get_Field_Information ('STRR005', 'SHARE/VALUE', $ShareValueLbl,    #DW)
  do Get_Field_Information ('STRR005', 'TOT_VALUE',   $TotValueLbl,      #DW)
  do Get_Field_Information ('STRR005', 'TOT_SHARE',   $TotShareLbl,      #DW)
  do Get_Field_Information ('STRR005', 'AVAILABLE',   $AvailableLbl,     #DW)

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STRR005'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
  else
    let #Instance = to_number($prcs_process_instance)
    do Get-SQR-Parms
  end-if

  do Init-Variables
  let $CurrentTime = DateNow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId = rtrim($RC_STOCK_ID,' ')
  let #Year    = #RC_YEAR
  do Format-Dates

End-Procedure

!----------------------------------------------------------------------!
! Procedure:  Format-Dates                                             !
! Descr:      This is where all required data is selected              !
!----------------------------------------------------------------------!
Begin-Procedure Format-Dates

  let #Year1 = #Year
  let #Year2 = #Year + 1
  let #Year3 = #Year + 2
  let #Year4 = #Year + 3
  let #Year5 = #Year + 4
  let #Year6 = #Year + 5
  let #Year7 = #Year + 6
  let #Year8 = #Year + 7

  let $Year1 = to_char(#Year1)
  let $Year2 = to_char(#Year2)
  let $Year3 = to_char(#Year3)
  let $Year4 = to_char(#Year4)
  let $Year5 = to_char(#Year5)
  let $Year6 = to_char(#Year6)
  let $Year7 = to_char(#Year7)
  let $Year8 = to_char(#Year8)

  let $From4 = $Year4||'-01-01'
  let $Thru4 = $Year4||'-12-31'

  do Convert-From-DTU-Date($From4, $From4Dtu)
  do Convert-From-DTU-Date($Thru4, $Thru4Dtu)
  do Format-DateTime ($From4Dtu, $From4Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru4Dtu, $Thru4Cmp, {DEFCMP}, '', '')

  let $From1 = $Year1||'-01-01'
  let $Thru1 = $Year1||'-12-31'

  do Convert-From-DTU-Date($From1, $BeginDate)
  do Convert-From-DTU-Date($Thru1, $Thru1Dtu)
  do Format-DateTime ($BeginDate, $From1Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru1Dtu,  $Thru1Cmp, {DEFCMP}, '', '')

  let $From2 = $Year2||'-01-01'
  let $Thru2 = $Year2||'-12-31'

  do Convert-From-DTU-Date($From2, $From2Dtu)
  do Convert-From-DTU-Date($Thru2, $Thru2Dtu)
  do Format-DateTime ($From2Dtu, $From2Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru2Dtu, $Thru2Cmp, {DEFCMP}, '', '')

  let $From3 = $Year3||'-01-01'
  let $Thru3 = $Year3||'-12-31'

  do Convert-From-DTU-Date($From3, $From3Dtu)
  do Convert-From-DTU-Date($Thru3, $Thru3Dtu)
  do Format-DateTime ($From3Dtu, $From3Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru3Dtu, $Thru3Cmp, {DEFCMP}, '', '')

  let $From5 = $Year5||'-01-01'
  let $Thru5 = $Year5||'-12-31'

  do Convert-From-DTU-Date($From5, $From5Dtu)
  do Convert-From-DTU-Date($Thru5, $Thru5Dtu)
  do Format-DateTime ($From5Dtu, $From5Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru5Dtu, $Thru5Cmp, {DEFCMP}, '', '')

  let $From6 = $Year6||'-01-01'
  let $Thru6 = $Year6||'-12-31'

  do Convert-From-DTU-Date($From6, $From6Dtu)
  do Convert-From-DTU-Date($Thru6, $Thru6Dtu)
  do Format-DateTime ($From6Dtu, $From6Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru6Dtu, $Thru6Cmp, {DEFCMP}, '', '')

  let $From7 = $Year7||'-01-01'
  let $Thru7 = $Year7||'-12-31'

  do Convert-From-DTU-Date($From7, $From7Dtu)
  do Convert-From-DTU-Date($Thru7, $Thru7Dtu)
  do Format-DateTime ($From7Dtu, $From7Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($Thru7Dtu, $Thru7Cmp, {DEFCMP}, '', '')

  let $From8 = $Year8||'-01-01'
  let $Thru8 = $Year8||'-12-31'

  do Convert-From-DTU-Date($From8, $From8Dtu)
  do Convert-From-DTU-Date($Thru8, $EndDate)
  do Format-DateTime ($From8Dtu, $From8Cmp, {DEFCMP}, '', '')
  do Format-DateTime ($EndDate,  $Thru8Cmp, {DEFCMP}, '', '')

End-Procedure

!----------------------------------------------------------------------!
! Procedure:  Process-Main                                             !
! Descr:      This is where all required data is selected              !
!----------------------------------------------------------------------!
Begin-Procedure Process-Main

  do Select-Vesting1
  do Select-Vesting2
  do Select-Vesting3
  do Select-Vesting4
  do Select-Vesting5
  do Remove-Vesting
  do Get-100k-Limit
  do Select-Emplid

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting1
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting1

Begin-Select

A.EMPLID
A.GRANT_NBR
A.GRANT_DT
SUM(B.SHARES_VESTED) &sum_vest

  do Insert-Vesting1

from PS_ST_GRANT        A,
     PS_ST_GRNT_VST_DTL B
where A.EMPLID           = B.EMPLID
  and A.STOCK_ID         = $StockId
  and A.STOCK_ID         = B.STOCK_ID
  and A.GRANT_NBR        = B.GRANT_NBR
  and A.GRANT_STATUS     = 'A'
  and A.ST_OPTION_TYPE   = 'ISO'
  and B.VEST_EFFDT       = (select MAX(VEST_EFFDT)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B.EMPLID
                               and STOCK_ID    = B.STOCK_ID
                               and GRANT_NBR   = B.GRANT_NBR
                               and VEST_EFFDT <= $AsOfToday)
  and B.SEQ_NUM          = (select MAX(SEQ_NUM)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B.EMPLID
                               and STOCK_ID    = B.STOCK_ID
                               and GRANT_NBR   = B.GRANT_NBR
                               and VEST_EFFDT  = B.VEST_EFFDT )
  and A.EXER_BFR_VEST    = 'Y'
  and A.ST_CANCEL_DT     IS NULL
  and A.EXERCISE_HOLD_DT IS NULL
group by A.EMPLID, A.GRANT_NBR, A.GRANT_DT

End-Select

End-Procedure Select-Vesting1

!-----------------------------------------------------------------------
! Section: Insert-Vesting1
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting1

 let $Procedure = 'Insert-Vesting1'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STRR005_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED)

VALUES
($CurrentTime
,#Instance
,&A.EMPLID
,&A.GRANT_NBR
,&A.GRANT_DT
,&sum_vest)
end-sql

End-Procedure Insert-Vesting1

!-----------------------------------------------------------------------
! Section: Select-Vesting2
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting2

Begin-Select
A2.EMPLID
A2.GRANT_NBR
A2.EXERCISE_HOLD_DT
SUM(B2.SHARES_VESTED) &sum_vest2

 do Insert-Vesting2

from PS_ST_GRANT        A2,
     PS_ST_GRNT_VST_DTL B2
where A2.EMPLID           = B2.EMPLID
  and A2.STOCK_ID         = $StockId
  and A2.STOCK_ID         = B2.STOCK_ID
  and A2.GRANT_NBR        = B2.GRANT_NBR
  and A2.GRANT_STATUS     = 'A'
  and A2.ST_OPTION_TYPE   = 'ISO'
  and B2.VEST_EFFDT       = (select MAX(VEST_EFFDT)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B2.EMPLID
                               and STOCK_ID    = B2.STOCK_ID
                               and GRANT_NBR   = B2.GRANT_NBR
                               and VEST_EFFDT <= $AsOfToday)
  and B2.SEQ_NUM          = (select MAX(SEQ_NUM)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B2.EMPLID
                               and STOCK_ID    = B2.STOCK_ID
                               and GRANT_NBR   = B2.GRANT_NBR
                               and VEST_EFFDT  = B2.VEST_EFFDT )
  and A2.EXER_BFR_VEST    = 'Y'
  and A2.ST_CANCEL_DT     IS NULL
  and A2.EXERCISE_HOLD_DT IS NOT NULL
group by A2.EMPLID, A2.GRANT_NBR, A2.EXERCISE_HOLD_DT

End-Select

End-Procedure Select-Vesting2

!-----------------------------------------------------------------------
! Section: Insert-Vesting2
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting2

 let $Procedure = 'Insert-Vesting2'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STRR005_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED)

VALUES
($CurrentTime
,#Instance
,&A2.EMPLID
,&A2.GRANT_NBR
,&A2.EXERCISE_HOLD_DT
,&sum_vest2)

end-sql

End-Procedure Insert-Vesting2

!-----------------------------------------------------------------------
! Section: Select-Vesting3
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting3

Begin-Select
A3.EMPLID
A3.GRANT_NBR
B3.VEST_DT
SUM(B3.SHARES_VESTED) &sum_vest3

 do Insert-Vesting3

from PS_ST_GRANT        A3,
     PS_ST_GRNT_VST_DTL B3
where A3.EMPLID           = B3.EMPLID
  and A3.STOCK_ID         = $StockId
  and A3.STOCK_ID         = B3.STOCK_ID
  and A3.GRANT_NBR        = B3.GRANT_NBR
  and A3.GRANT_STATUS     = 'A'
  and A3.ST_OPTION_TYPE   = 'ISO'
  and B3.VEST_EFFDT       = (select MAX(VEST_EFFDT)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B3.EMPLID
                               and STOCK_ID    = B3.STOCK_ID
                               and GRANT_NBR   = B3.GRANT_NBR
                               and VEST_EFFDT <= $AsOfToday)
  and B3.SEQ_NUM          = (select MAX(SEQ_NUM)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B3.EMPLID
                               and STOCK_ID    = B3.STOCK_ID
                               and GRANT_NBR   = B3.GRANT_NBR
                               and VEST_EFFDT  = B3.VEST_EFFDT )
  and A3.EXER_BFR_VEST    = 'N'
  and A3.ST_CANCEL_DT     IS NULL
  and A3.EXERCISE_HOLD_DT IS NULL
group by A3.EMPLID, A3.GRANT_NBR , B3.VEST_DT
End-Select

End-Procedure Select-Vesting3

!-----------------------------------------------------------------------
! Section: Insert-Vesting3
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting3

 let $Procedure = 'Insert-Vesting3'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STRR005_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED)

VALUES
($CurrentTime
,#Instance
,&A3.EMPLID
,&A3.GRANT_NBR
,&B3.VEST_DT
,&sum_vest3)
end-sql

End-Procedure Insert-Vesting3

!-----------------------------------------------------------------------
! Section: Select-Vesting4
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting4

Begin-Select
A4.EMPLID
A4.GRANT_NBR
A4.EXERCISE_HOLD_DT
SUM(B4.SHARES_VESTED) &sum_vest4

 do Insert-Vesting4

from PS_ST_GRANT        A4,
     PS_ST_GRNT_VST_DTL B4
where A4.EMPLID           = B4.EMPLID
  and A4.STOCK_ID         = $StockId
  and A4.STOCK_ID         = B4.STOCK_ID
  and A4.GRANT_NBR        = B4.GRANT_NBR
  and A4.GRANT_STATUS     = 'A'
  and A4.ST_OPTION_TYPE   = 'ISO'
  and B4.VEST_EFFDT       = (select MAX(VEST_EFFDT)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B4.EMPLID
                               and STOCK_ID    = B4.STOCK_ID
                               and GRANT_NBR   = B4.GRANT_NBR
                               and VEST_EFFDT <= $AsOfToday)
  and B4.SEQ_NUM          = (select MAX(SEQ_NUM)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B4.EMPLID
                               and STOCK_ID    = B4.STOCK_ID
                               and GRANT_NBR   = B4.GRANT_NBR
                               and VEST_EFFDT  = B4.VEST_EFFDT )
  and A4.EXER_BFR_VEST    = 'N'
  and A4.ST_CANCEL_DT     IS NULL
  and A4.EXERCISE_HOLD_DT IS NOT NULL
  and A4.EXERCISE_HOLD_DT <= B4.VEST_DT
group by A4.EMPLID, A4.GRANT_NBR, A4.EXERCISE_HOLD_DT

End-Select

End-Procedure Select-Vesting4

!-----------------------------------------------------------------------
! Section: Insert-Vesting4
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting4

 let $Procedure = 'Insert-Vesting4'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STRR005_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED)

VALUES
($CurrentTime
,#Instance
,&A4.EMPLID
,&A4.GRANT_NBR
,&A4.EXERCISE_HOLD_DT
,&sum_vest4)
end-sql

End-Procedure Insert-Vesting4

!-----------------------------------------------------------------------
! Section: Select-Vesting5
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting5

Begin-Select
A5.EMPLID
A5.GRANT_NBR
B5.VEST_DT
SUM(B5.SHARES_VESTED) &sum_vest5

 do Insert-Vesting5

from PS_ST_GRANT        A5,
     PS_ST_GRNT_VST_DTL B5
where A5.EMPLID           = B5.EMPLID
  and A5.STOCK_ID         = $StockId
  and A5.STOCK_ID         = B5.STOCK_ID
  and A5.GRANT_NBR        = B5.GRANT_NBR
  and A5.GRANT_STATUS     = 'A'
  and A5.ST_OPTION_TYPE   = 'ISO'
  and B5.VEST_EFFDT       = (select MAX(VEST_EFFDT)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B5.EMPLID
                               and STOCK_ID    = B5.STOCK_ID
                               and GRANT_NBR   = B5.GRANT_NBR
                               and VEST_EFFDT <= $AsOfToday)
  and B5.SEQ_NUM          = (select MAX(SEQ_NUM)
                              from PS_ST_GRNT_VST_DTL
                             where EMPLID      = B5.EMPLID
                               and STOCK_ID    = B5.STOCK_ID
                               and GRANT_NBR   = B5.GRANT_NBR
                               and VEST_EFFDT  = B5.VEST_EFFDT )
  and A5.EXER_BFR_VEST    = 'N'
  and A5.ST_CANCEL_DT     IS NULL
  and A5.EXERCISE_HOLD_DT IS NOT NULL
  and A5.EXERCISE_HOLD_DT > B5.VEST_DT
group by A5.EMPLID, A5.GRANT_NBR, B5.VEST_DT

End-Select

End-Procedure Select-Vesting5

!-----------------------------------------------------------------------
! Section: Insert-Vesting5
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting5

 let $Procedure = 'Insert-Vesting5'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STRR005_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED)

VALUES
($CurrentTime
,#Instance
,&A5.EMPLID
,&A5.GRANT_NBR
,&B5.VEST_DT
,&sum_vest5)

end-sql

End-Procedure Insert-Vesting5

!-----------------------------------------------------------------------
! Section: Remove-Vesting
! Descr:
!
!-----------------------------------------------------------------------
Begin-Procedure Remove-Vesting

 let $Procedure = 'Remove-Vesting'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error

delete from PS_ST_STRR005_TAO
 where DATETIME_STAMP  = $CurrentTime
   and PROCESSINSTANCE = #Instance
   and VEST_DT         < $BeginDate
   and VEST_DT         > $EndDate

end-sql

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Get-100k-Limit                                           !
! Descr:      Selects distinct employees to process.                   !
!-----------------------------------------------------------------------
Begin-Procedure Get-100k-Limit

Begin-Select

E.ISO_ANNL_EXER_LIM

from PS_ST_GOVERN_BODY E
where E.ST_GOVERN_CD = 'IRS'
  and E.EFFDT        = (select MAX(EFFDT)
                          from PS_ST_GOVERN_BODY
                         where ST_GOVERN_CD = E.ST_GOVERN_CD
                           and EFFDT       <= $AsOfToday)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Select-Emplid                                           !
! Descr:      Selects distinct employees to process.                   !
!-----------------------------------------------------------------------
Begin-Procedure Select-Emplid

Begin-Select distinct

AA.EMPLID

 do Get-Name
 do Print-Header
 do Select-Grants
 do Print-Totals

from PS_ST_STRR005_TAO AA
where AA.DATETIME_STAMP  = $CurrentTime
  and AA.PROCESSINSTANCE = #Instance
order by 1
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Get-Name                                                 !
! Descr:      Selects distinct employees to process.                   !
!-----------------------------------------------------------------------
Begin-Procedure Get-Name

Begin-Select distinct

B.NAME   &b.name

from PS_ST_PERSON_NAME B
where B.EMPLID    = &aa.emplid

End-Select

End-Procedure Get-Name

!-----------------------------------------------------------------------
! Section: Print-Header
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Header

 print $EmplidLbl                                          (+1,001,006)
 print ':'                                                 (  ,+1,001)
 print &aa.emplid                                          (  ,+2,011)

 print $NameLbl                                            (+1,001,004)
 print ':'                                                 (  ,+1,001)
 print &b.name                                             (  ,+4,)

 print $GrantLbl                                           (+2,001,010)
 print $GrantLbl                                           (  ,012,005)
 print #Year1                                              (  ,048,004) edit 9999
 print #Year2                                              (  ,064,004) edit 9999
 print #Year3                                              (  ,080,004) edit 9999
 print #Year4                                              (  ,096,004) edit 9999
 print #Year5                                              (  ,112,004) edit 9999
 print #Year6                                              (  ,128,004) edit 9999
 print #Year7                                              (  ,144,004) edit 9999
 print #Year8                                              (  ,160,004) edit 9999
 print $NumberLbl                                          (+1,001,010) underline
 print $DateLbl                                            (  ,012,010) underline
 print $GrantFMVLbl                                        (  ,025,010) underline
 print $ShareValueLbl                                      (  ,040,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline
 print $ShareValueLbl                                      (  ,+2,014) underline

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Select-Grants                                            !
! Descr:      Selects all grants from the temp table.                  !
!-----------------------------------------------------------------------
Begin-Procedure Select-Grants

Begin-Select

C.GRANT_NBR           () on-break print=never procedure=Print-Details save=$OldGrant
C.VEST_DT
C.SHARES_VESTED

  let $GrantNbr = &c.grant_nbr
  do Format-DateTime (&c.vest_dt, $VestDtCmp, {DEFCMP}, '', '')

  if $VestDtCmp >= $From1Cmp and $VestDtCmp <= $Thru1Cmp
    add &c.shares_vested to #SharesVest1
  end-if

  if $VestDtCmp >= $From2Cmp and $VestDtCmp <= $Thru2Cmp
    add &c.shares_vested to #SharesVest2
  end-if

  if $VestDtCmp >= $From3Cmp and $VestDtCmp <= $Thru3Cmp
    add &c.shares_vested to #SharesVest3
  end-if

  if $VestDtCmp >= $From4Cmp and $VestDtCmp <= $Thru4Cmp
    add &c.shares_vested to #SharesVest4
  end-if

  if $VestDtCmp >= $From5Cmp and $VestDtCmp <= $Thru5Cmp
    add &c.shares_vested to #SharesVest5
  end-if

  if $VestDtCmp >= $From6Cmp and $VestDtCmp <= $Thru6Cmp
    add &c.shares_vested to #SharesVest6
  end-if

  if $VestDtCmp >= $From7Cmp and $VestDtCmp <= $Thru7Cmp
    add &c.shares_vested to #SharesVest7
  end-if

  if $VestDtCmp >= $From8Cmp and $VestDtCmp <= $Thru8Cmp
    add &c.shares_vested to #SharesVest8
  end-if

from  PS_ST_STRR005_TAO C
where C.EMPLID          = &aa.emplid
  and C.DATETIME_STAMP  = $CurrentTime
  and C.PROCESSINSTANCE = #Instance
order by 1

End-Select

  do Print-Details   ! Process last break

End-Procedure Select-Grants

!-----------------------------------------------------------------------
! Section: Print-Details
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Details

  do Get-Grant-Date-Price
  do Get-Plan-Rules
  do Get_FMV_Prices (&AX.GRANT_FMV_MTHD, $StockId, &D.GRANT_DT, &AX.FMV_HOLIDAY_RULE, &AX.FMV_WEEKEND_RULE, #GrantFmv)
  do Format-DateTime(&d.grant_dt,$Grant_Dt,{DEFDATE},'','')
  let #GrantFmvR = round(#GrantFmv,2)
  let #SharesVest1R = round(#SharesVest1,2)
  let #SharesVest2R = round(#SharesVest2,2)
  let #SharesVest3R = round(#SharesVest3,2)
  let #SharesVest4R = round(#SharesVest4,2)
  let #SharesVest5R = round(#SharesVest5,2)
  let #SharesVest6R = round(#SharesVest6,2)
  let #SharesVest7R = round(#SharesVest7,2)
  let #SharesVest8R = round(#SharesVest8,2)
  let #PriceVest1   = #SharesVest1 * #GrantFmv
  let #PriceVest2   = #SharesVest2 * #GrantFmv
  let #PriceVest3   = #SharesVest3 * #GrantFmv
  let #PriceVest4   = #SharesVest4 * #GrantFmv
  let #PriceVest5   = #SharesVest5 * #GrantFmv
  let #PriceVest6   = #SharesVest6 * #GrantFmv
  let #PriceVest7   = #SharesVest7 * #GrantFmv
  let #PriceVest8   = #SharesVest8 * #GrantFmv
  let #PriceVest1R  = round(#SharesVest1 * #GrantFmv,2)
  let #PriceVest2R  = round(#SharesVest2 * #GrantFmv,2)
  let #PriceVest3R  = round(#SharesVest3 * #GrantFmv,2)
  let #PriceVest4R  = round(#SharesVest4 * #GrantFmv,2)
  let #PriceVest5R  = round(#SharesVest5 * #GrantFmv,2)
  let #PriceVest6R  = round(#SharesVest6 * #GrantFmv,2)
  let #PriceVest7R  = round(#SharesVest7 * #GrantFmv,2)
  let #PriceVest8R  = round(#SharesVest8 * #GrantFmv,2)

  print $GrantNbr                                          (+1,001,010)
  print $Grant_Dt                                          (  ,012,010)
  print #GrantFmvR                                         (  ,024,010) edit $99,999.99
  print #SharesVest1R                                      (  ,038,014) edit 999,999,999.99
  print #SharesVest2R                                      (  ,054,014) edit 999,999,999.99
  print #SharesVest3R                                      (  ,070,014) edit 999,999,999.99
  print #SharesVest4R                                      (  ,086,014) edit 999,999,999.99
  print #SharesVest5R                                      (  ,102,014) edit 999,999,999.99
  print #SharesVest6R                                      (  ,118,014) edit 999,999,999.99
  print #SharesVest7R                                      (  ,134,014) edit 999,999,999.99
  print #SharesVest8R                                      (  ,150,014) edit 999,999,999.99
  print #PriceVest1R                                       (+1,038,014) edit $99,999,999.99
  print #PriceVest2R                                       (  ,054,014) edit $99,999,999.99
  print #PriceVest3R                                       (  ,070,014) edit $99,999,999.99
  print #PriceVest4R                                       (  ,086,014) edit $99,999,999.99
  print #PriceVest5R                                       (  ,102,014) edit $99,999,999.99
  print #PriceVest6R                                       (  ,118,014) edit $99,999,999.99
  print #PriceVest7R                                       (  ,134,014) edit $99,999,999.99
  print #PriceVest8R                                       (  ,150,014) edit $99,999,999.99

  do Store-Totals
  do Init-Shares

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Get-Grant-Date-Price                                     !
! Descr:      Selects distinct employees to process.                   !
!-----------------------------------------------------------------------
Begin-Procedure Get-Grant-Date-Price

Begin-Select
D.GRANT_DT
D.GRANT_PRICE
D.STOCK_PLAN

from PS_ST_GRANT D
where D.EMPLID    = &aa.emplid
  and D.STOCK_ID  = $StockId
  and D.GRANT_NBR = $OldGrant

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Get-Plan-Rules
! Descr:      Gets Plan Rules
!-----------------------------------------------------------------------
Begin-Procedure Get-Plan-Rules

Begin-Select
AX.GRANT_FMV_MTHD
AX.FMV_HOLIDAY_RULE
AX.FMV_WEEKEND_RULE

FROM PS_ST_OPTION_PLAN AX
WHERE AX.STOCK_ID        = $StockId
  AND AX.STOCK_PLAN_TYPE = 'O'
  AND AX.STOCK_PLAN      = &d.stock_plan
  AND AX.EFFDT           = (SELECT MAX(A_ED.EFFDT)
                            FROM PS_ST_OPTION_PLAN A_ED
                            WHERE AX.STOCK_ID         = A_ED.STOCK_ID
                              AND AX.STOCK_PLAN_TYPE  = A_ED.STOCK_PLAN_TYPE
                              AND AX.STOCK_PLAN       = A_ED.STOCK_PLAN
                              AND A_ED.EFFDT         <= &d.grant_dt)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Store-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Store-Totals

  add #SharesVest1 to #TotalSharesVest1
  add #SharesVest2 to #TotalSharesVest2
  add #SharesVest3 to #TotalSharesVest3
  add #SharesVest4 to #TotalSharesVest4
  add #SharesVest5 to #TotalSharesVest5
  add #SharesVest6 to #TotalSharesVest6
  add #SharesVest7 to #TotalSharesVest7
  add #SharesVest8 to #TotalSharesVest8

  add #PriceVest1 to #TotalPriceVest1
  add #PriceVest2 to #TotalPriceVest2
  add #PriceVest3 to #TotalPriceVest3
  add #PriceVest4 to #TotalPriceVest4
  add #PriceVest5 to #TotalPriceVest5
  add #PriceVest6 to #TotalPriceVest6
  add #PriceVest7 to #TotalPriceVest7
  add #PriceVest8 to #TotalPriceVest8

End-Procedure

!-----------------------------------------------------------------------
! Section: Init-Shares
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Init-Shares

  let #SharesVest1 = 0
  let #SharesVest2 = 0
  let #SharesVest3 = 0
  let #SharesVest4 = 0
  let #SharesVest5 = 0
  let #SharesVest6 = 0
  let #SharesVest7 = 0
  let #SharesVest8 = 0
  let #PriceVest1  = 0
  let #PriceVest2  = 0
  let #PriceVest3  = 0
  let #PriceVest4  = 0
  let #PriceVest5  = 0
  let #PriceVest6  = 0
  let #PriceVest7  = 0
  let #PriceVest8  = 0
  let #PriceVest1R = 0
  let #PriceVest2R = 0
  let #PriceVest3R = 0
  let #PriceVest4R = 0
  let #PriceVest5R = 0
  let #PriceVest6R = 0
  let #PriceVest7R = 0
  let #PriceVest8R = 0

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  let #Remaining1 = &e.iso_annl_exer_lim - #TotalPriceVest1
  let #Remaining2 = &e.iso_annl_exer_lim - #TotalPriceVest2
  let #Remaining3 = &e.iso_annl_exer_lim - #TotalPriceVest3
  let #Remaining4 = &e.iso_annl_exer_lim - #TotalPriceVest4
  let #Remaining5 = &e.iso_annl_exer_lim - #TotalPriceVest5
  let #Remaining6 = &e.iso_annl_exer_lim - #TotalPriceVest6
  let #Remaining7 = &e.iso_annl_exer_lim - #TotalPriceVest7
  let #Remaining8 = &e.iso_annl_exer_lim - #TotalPriceVest8

  print $TotShareLbl                                       (+2,001,012)
  print #TotalSharesVest1                                  (  ,038,014) edit 999,999,999.99
  print #TotalSharesVest2                                  (  ,054,014) edit 999,999,999.99
  print #TotalSharesVest3                                  (  ,070,014) edit 999,999,999.99
  print #TotalSharesVest4                                  (  ,086,014) edit 999,999,999.99
  print #TotalSharesVest5                                  (  ,102,014) edit 999,999,999.99
  print #TotalSharesVest6                                  (  ,118,014) edit 999,999,999.99
  print #TotalSharesVest7                                  (  ,134,014) edit 999,999,999.99
  print #TotalSharesVest8                                  (  ,150,014) edit 999,999,999.99
  print $TotValueLbl                                       (+1,001,011)
  print #TotalPriceVest1                                   (  ,038,014) edit $99,999,999.99
  print #TotalPriceVest2                                   (  ,054,014) edit $99,999,999.99
  print #TotalPriceVest3                                   (  ,070,014) edit $99,999,999.99
  print #TotalPriceVest4                                   (  ,086,014) edit $99,999,999.99
  print #TotalPriceVest5                                   (  ,102,014) edit $99,999,999.99
  print #TotalPriceVest6                                   (  ,118,014) edit $99,999,999.99
  print #TotalPriceVest7                                   (  ,134,014) edit $99,999,999.99
  print #TotalPriceVest8                                   (  ,150,014) edit $99,999,999.99
  print $AvailableLbl                                      (+1,001,015)
  print #Remaining1                                        (  ,038,014) edit $99,999,999.99
  print #Remaining2                                        (  ,054,014) edit $99,999,999.99
  print #Remaining3                                        (  ,070,014) edit $99,999,999.99
  print #Remaining4                                        (  ,086,014) edit $99,999,999.99
  print #Remaining5                                        (  ,102,014) edit $99,999,999.99
  print #Remaining6                                        (  ,118,014) edit $99,999,999.99
  print #Remaining7                                        (  ,134,014) edit $99,999,999.99
  print #Remaining8                                        (  ,150,014) edit $99,999,999.99
  print ' '                                                (+3,001,001)

  let #TotalSharesVest1 = 0
  let #TotalSharesVest2 = 0
  let #TotalSharesVest3 = 0
  let #TotalSharesVest4 = 0
  let #TotalSharesVest5 = 0
  let #TotalSharesVest6 = 0
  let #TotalSharesVest7 = 0
  let #TotalSharesVest8 = 0
  let #TotalPriceVest1  = 0
  let #TotalPriceVest2  = 0
  let #TotalPriceVest3  = 0
  let #TotalPriceVest4  = 0
  let #TotalPriceVest5  = 0
  let #TotalPriceVest6  = 0
  let #TotalPriceVest7  = 0
  let #TotalPriceVest8  = 0
  let #Remaining1       = 0
  let #Remaining2       = 0
  let #Remaining3       = 0
  let #Remaining4       = 0
  let #Remaining5       = 0
  let #Remaining6       = 0
  let #Remaining7       = 0
  let #Remaining8       = 0

End-Procedure

!-----------------------------------------------------------------------
! Section: Delete-Temp
!-----------------------------------------------------------------------
Begin-Procedure Delete-Temp

 let $Procedure = 'Delete-Temp'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error

delete from PS_ST_STRR005_TAO
 where DATETIME_STAMP  = $CurrentTime
   and PROCESSINSTANCE = #Instance

end-sql

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'    !Stock Admin's Run Control Record
#include 'sqlerr.sqc'      !SQL error processing
#include 'stdapi.sqc'
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'askftd.sqc'
#include 'stgetfmv.sqc'    !Retrieves FMV for a particular date
#include 'getrplng.sqc'    !Gets the report language
#include 'readxlat.sqc'    !
