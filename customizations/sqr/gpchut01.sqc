!***********************************************************************
!  GPCHUT01: String Manipulation                                       *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.       !
! All Rights Reserved.                                          !
!          $Date:  2013/01/18:03:28:08                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!This SQC contains procedures which handles to new strings logic.      *
!***********************************************************************
#define SQR_Strings_Array_Size 4000

Begin-procedure Gpce_Init_Report_Translation($ReportID, $language_cd)
#Debug show 'Gpce_Init_Report_Translation   -> '  'Program_id: ' $ReportID ' Report Lang: ' $language_cd  ' Base Lang: ' $_SQR_Default_Language

        if rtrim($language_cd,' ') = ''
            let $language_cd = $_SQR_Default_Language
        end-if

        do Check_If_All_Language_Exist($ReportID) ! To Check if all translations for ReportID's strings exists.

     clear-array name=Strings                     ! To clear Strings Array.

     evaluate $language_cd                        ! To populate the Strings Array with the right Report language
         when = 'ENG'
              do Get_English_Strings($ReportID)
              break
         when = 'GER'
              do Get_German_Strings($ReportID)
              break
         when = 'ITA'
              do Get_Italian_Strings($ReportID)
              break
         when = 'FRA'
              do Get_French_Strings($ReportID)
              break
         when-other
              break
     end-evaluate

    let #_Strings_Array_Size = #_str_cnt + 1

#Debug show 'Gpce_Init_Report_Translation   <- '  'String Array Count After ' $language_cd ' ' $ReportID '  : ' #_str_cnt
End-procedure Gpce_Init_Report_Translation
!****************************************************************************
Begin-procedure Gpce_Append_Report_Translation($ReportID, $language_cd)
#Debug show 'Gpce_Append_Report_Translation -> '  'Program_id: ' $ReportID ' Report Lang: ' $language_cd  ' Base Lang: ' $_SQR_Default_Language

        if rtrim($language_cd,' ') = ''
           let $language_cd = $_SQR_Default_Language
        end-if

        do Copy_To_Final_Set                        ! Copy the contents of Strings Array to Final_Set Array

        do Check_If_All_Language_Exist($ReportID)   ! To Check if all translations for ReportID's strings exists.

     clear-array name=Strings                       ! To clear Strings Array.

     evaluate $language_cd
         when = 'ENG'
              do Get_English_Strings($ReportID)
              break
         when = 'GER'
              do Get_German_Strings($ReportID)
              break
         when = 'ITA'
              do Get_Italian_Strings($ReportID)
              break
         when = 'FRA'
              do Get_French_Strings($ReportID)
              break
         when-other
              break
     end-evaluate

     do Copy_From_Final_Set                         ! Copy the contents of Final_Set Array to Strings Array.

     let #_Strings_Array_Size = #_str_cnt + 1

#Debug show 'Gpce_Append_Report_Translation <- '  'String Array Count After ' $language_cd ' ' $ReportID '  : ' #_str_cnt
End-procedure Gpce_Append_Report_Translation
!************************************************************************************
Begin-procedure Check_If_All_Language_Exist($ReportID)
#Debug show 'Check_If_All_Language_Exist -> '  'Report id ' $ReportID

        clear-array name=Strings                  ! clear the strings Array.
        let #_str_cnt = 0                         ! Initialize the String Array count

        do Get_English_Strings($ReportID)
           let #sm_cnt = #_str_cnt
        do Get_German_Strings($ReportID)
        do Get_Italian_Strings($ReportID)
        do Get_French_Strings($ReportID)

     !#debug show 'Outer Loop Count = ' #sm_cnt '  Inner Loop Count = ' #_str_cnt

     let   #chk_out = 0
     while #chk_out < #sm_cnt
           get $Check_Out From Strings(#chk_out)string_id
           let #chk_in = 0
           let #found  = 0

                      while #chk_in < #_str_cnt
                          get $Check_In From strings(#chk_in)string_id
                          if  $Check_In = $Check_Out
                              add 1 to #found
                          end-if
                              add 1 to #chk_in
                      end-while

            if #found < 4
                let $String_Log = 'Strings Translation missing for Program id ' || $ReportID || ' and String id ' || $Check_Out
                #Debug Show $String_Log
                stop
            end-if

            add 1 to #chk_out

      end-while

      let #t_sm_cnt = #sm_cnt * 4    ! If missing in the first set
      #debug show 'Outer Loop Count = ' #sm_cnt '  Inner Loop Count = ' #_str_cnt ' Outer Loop * 4 = ' #t_sm_cnt
      if #t_sm_cnt <> #_str_cnt
         let $String_Log = 'Strings Translation missing for Program id ' || $ReportID
         #Debug Show $String_Log
         stop
      end-if

      let $String_Log = 'String all okay for Program id ' || $ReportID
      #Debug Show $String_Log

      let #_Ins_cnt1 = #_str_cnt              ! Assign the String Array Count to variable
      let #_str_cnt = 0                       ! Initialize the String Array count

#Debug show 'Check_If_All_Language_Exist <- '
End-procedure Check_If_All_Language_Exist
!************************************************************************************
Begin-procedure Copy_To_Final_Set
#Debug show 'Copy_To_Final_Set -> '

     create-array name=Final_Set size={SQR_Strings_Array_Size}
              field=report_id:char
              field=string_id:char
              field=deflabel:number
              field=label_id:char
              field=text:char
              field=colwidth:number


     let #fi_cnt = 0
     while  #fi_cnt < #str_cnt

            let Final_Set.report_id(#fi_cnt) = strings.report_id(#fi_cnt)
            let Final_Set.string_id(#fi_cnt) = strings.string_id(#fi_cnt)
            let Final_Set.deflabel(#fi_cnt)  = strings.deflabel(#fi_cnt)
            let Final_Set.label_id(#fi_cnt)  = strings.label_id(#fi_cnt)
            let Final_Set.text(#fi_cnt)      = strings.text(#fi_cnt)
            let Final_Set.colwidth(#fi_cnt)  = strings.colwidth(#fi_cnt)

            add 1 to #fi_cnt

     end-while

     let #str_cnt = 0    ! Initialize the String Array count

#Debug show 'Copy_To_Final_Set <- '  'Total Array Rows copied to Final_Set ' #fi_cnt
End-procedure Copy_To_Final_Set
!************************************************************************************
Begin-procedure Copy_From_Final_Set
#Debug show 'Copy_From_Final_Set-> '  'Strings Array Count: ' #str_cnt   '  Copy from Final_Set: ' #fi_cnt

            let #fs_cnt = 0
     while  #fs_cnt < #fi_cnt

            let strings.report_id(#str_cnt) = Final_Set.report_id(#fs_cnt)
            let strings.string_id(#str_cnt) = Final_Set.string_id(#fs_cnt)
            let strings.deflabel(#str_cnt)  = Final_Set.deflabel(#fs_cnt)
            let strings.label_id(#str_cnt)  = Final_Set.label_id(#fs_cnt)
            let strings.text(#str_cnt)      = Final_Set.text(#fs_cnt)
            let strings.colwidth(#str_cnt)  = Final_Set.colwidth(#fs_cnt)

            add 1 to #fs_cnt
            add 1 to #str_cnt

     end-while

     clear-array name=Final_Set

#Debug show 'Copy_From_Final_Set<- '
End-procedure Copy_From_Final_Set
!************************************************************************************
begin-procedure Get_Message_Descr(#Mess_Set_Num,#Mess_Number,$language,:$Mess_Descr,:$Mess_Descr_Long)
#Debug show 'Get_Message_Descr -> '

    let $Mess_Descr      = ''
    let $Mess_Descr_Long = ''

Begin-Select
MC.MESSAGE_TEXT
MC.DESCRLONG

    let $Mess_Descr      = rtrim(ltrim(&MC.MESSAGE_TEXT,' '),' ')
    let $Mess_Descr_Long = rtrim(ltrim(&MC.DESCRLONG   ,' '),' ')

FROM {Record_MessageCatalog} MC
WHERE MC.MESSAGE_SET_NBR = #Mess_Set_Num
AND   MC.MESSAGE_NBR     = #Mess_Number
End-Select
!-------------------------------------------------------------
if $Mess_Descr = ''

Begin-Select
BL.LANGUAGE_CD

  let $BASE_LNG = rtrim(ltrim(&BL.LANGUAGE_CD,' '),' ')

FROM  PSOPTIONS BL
End-Select

let $Mess_Descr_Long = ''

Begin-Select
MCL.MESSAGE_TEXT
MCL.DESCRLONG

    let $Mess_Descr      = rtrim(ltrim(&MCL.MESSAGE_TEXT,' '),' ')
    let $Mess_Descr_Long = rtrim(ltrim(&MCL.DESCRLONG   ,' '),' ')

from {Record_MessageCatalogLang} MCL
WHERE MCL.MESSAGE_SET_NBR = #Mess_Set_Num
AND   MCL.MESSAGE_NBR     = #Mess_Number
AND   MCL.LANGUAGE_CD     = $BASE_LNG
End-Select

end-if

#Debug show 'Get_Message_Descr <- '
end-procedure Get_Message_Descr
!************************************************************************************
