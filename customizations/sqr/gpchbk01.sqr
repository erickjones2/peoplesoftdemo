!***********************************************************************
! GPCHBK01    Bank Order and Postal Payment Report                     *
!             BANKVERGÜTUNGSAUFTRAG and                                *
!             POSTAUSZAHLUNGSLISTE                                     *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  25857967                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

#define col0        10
#define col1        40
#define col01       40
#define col2        55
#define col3        85
#define col4        115

#define PAGE_SIZE A4

begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
  do Get-Log
end-PROGRAM

!************************************************************************

begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
    input $Ctl_Curr_Pay_End_Dt  'Current Pay End Date '
    input $Ctl_PayEntity 'Firma'
    input $Ctl_Paygroup 'Abrechnungskreis'
    input $Ctl_Homebank 'Hausbank'
  else
    do Get-Report-Parameters
  end-if
   
  move 'GPCHBK01' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation
  let $ReportTitle = $TITLE1_STR
  let $Title1      = $ReportTitle
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  if $Ctl_Curr_Pay_End_Dt <> ''
    do Get_Beg_Mnth($Ctl_Curr_Pay_End_Dt,$ReportBeginDate)
  end-if

  !The payentity  condition will be dynamically get selected from either the GPCH_RC_PAYROLL or GPCH_RC_PAYENT  
  if rtrim($Ctl_PayEntity,' ') <> ''
     let  $pay_entity_condition1 = 'AND PBD.PAY_ENTITY = ' || '''' || '' ||
     rtrim($Ctl_PayEntity,' ') || '' || ''''
  else
     let  $pay_entity_condition1 = $PayEntity_Criteria
  end-if 
    
    if $condition1 = ' '
    let $condition1 = $PayGroup_Crit
    end-if
     
end-procedure Init-Report

!****************************************************************************
begin-procedure Get_Beg_Mnth($Dte1,:$Dte2)
#Debug Show '-> Get_Beg_Mnth '

  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tpm1_dd)
  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1,$Dte2, {DEFCMP},'','native')

#Debug Show '<- Get_Beg_Mnth '
end-procedure

!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPCHBK01', 'REPORT_ID_STR',           $REPORT_ID_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'TITLE1_STR',           $TITLE1_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'TITLE2_STR',           $TITLE2_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'EMPL_ID_STR',               $EMPL_ID_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'PAGE_NO_STR',               $PAGE_NR_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'RUN_DATE_STR',             $RUN_DATE_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'SRC_BANK_STR',             $SRC_BANK_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'BANK_ID_STR',             $BANK_ID_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'BANK_NAME1_STR',             $BANK_NAME1_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'ACCOUNT1_STR',             $ACCOUNT1_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'BANK_ID2_STR',             $BANK_ID2_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'BANK2_NAME_STR',             $BANK2_NAME_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'CONTRACT_STR',             $CONTRACT_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'AMOUNT_STR',             $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'NAME_STR',             $NAME_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'ACCOUNT3_STR',             $ACCOUNT3_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'RECEIVER_STR',             $RECEIVER_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'COUNTRY_CD_STR',             $COUNTRY_CD_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'SUM_PAY_BK_STR',             $SUM_PAY_BK_STR,#CW)
  do Get_Field_Information ('GPCHBK01', 'IBAN_STR',                   $IBAN_ACCT,#CW)
  do Get_Field_Information ('GPCHBK01', 'SUM_PAY_TYPE_STR',             $SUM_PAY_TYPE_STR,#CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',    $PYENT, #CW)

  do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',       $HD_TODATE , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)

  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_PAYGROUP', $HD_PAYGROUP,#CW)

  do Strings_Pads($AMOUNT_STR, $AMOUNT_STR1, 13)

end-Procedure Report-Translation
!**********************************************************************************************
begin-procedure Strings_Pads($Str1, :$Str2, #Len1)
   let $Str1 = rtrim(ltrim($Str1, ' '), ' ')
   let $Str1 = rtrim(substr($Str1, 1, #Len1), ' ')
   let $Str2 = lpad($Str1, #Len1, ' ')
end-procedure
!**********************************************************************************************
begin-procedure Get_Hom_Bank_Crit
begin-select
SRC1.BANK_CD
SRC1.COUNTRY_CD
   let $Ctl_Bank_CD = &SRC1.BANK_CD
   let $Ctl_Country_CD = &SRC1.COUNTRY_CD
   if rtrim($Ctl_Bank_CD,' ') <> ''
      let $cond1 = ' AND PBD.GPCH_BK_TRNST_ISSR  = ''' || $Ctl_Bank_CD || ''''
   else
      let $cond1 = ' '
   end-if

   if rtrim($Ctl_Country_CD,' ') <> ''
      let $cond2 = ' AND PBD.GPCH_BK_CNTRY_ISSR  = ''' || $Ctl_Country_CD || ''''
   else
      let $cond2 = ' '
   end-if

   let $Ctl_HomeBnk-crit = $cond1 || $cond2
from PS_SRC_BANK SRC1
where SRC1.SRC_BANK_ID = $Ctl_Homebank
end-select
end-procedure
!****************************************************************************

begin-procedure Get-Values

  let $Ctl_Homebank_Crit    = ''
  let $language_cd       = $PRCS_LANGUAGE_CD
  let $Ctl_Homebank         = rtrim(&GPCH_RUN_CNTL.SRC_BANK_ID,' ')
  let $Src_Bank_id =            $Ctl_Homebank
  let $Ctl_HomeBnk-crit = ' '

  if $Ctl_Homebank <> ''
 do Get_Hom_Bank_Crit
  end-if

  let $Ctl_PayEntity          = rtrim(&GPCH_RUN_CNTL.PAY_ENTITY, ' ')
  
   
  let $Ctl_Paygroup = RTRIM(&GPCH_RUN_CNTL.GP_PAYGROUP, ' ')

  if rtrim($Ctl_Paygroup,' ') <> ''
   let $condition1 = 'AND PBD.GP_PAYGROUP = ' || '''' || '' ||
                      rtrim($Ctl_Paygroup,' ') || '' || ''''
  else
   let $condition1 = ' '
  end-if

end-procedure Get-Values
!*************************************************************************************
begin-procedure Process-Main
 let $Bedingung = ' AND PBD.PAYMENT_MTHD in (  ' || '''T''' || ',' || '''P''' || ' )'
 do Process-Main1
 let $ReportTitle = $TITLE2_STR
 let $Bedingung = ' AND PBD.PAYMENT_MTHD  = ' || '''A'''
 do Process-Main1
end-procedure
!*************************************************************************************
begin-procedure Process-Main1
#debug show '$Bedingung :' $Bedingung
#debug show '$sqr-report:' $sqr-report
let $string = ''
let $type0        = '''1'','
let $type1      = '''7'','
let $type2      = '''8'','
let $type3      = '''9'''

let $string = $string || $type0 || $type1 || $type2 || $type3
let $SQLSTMT = ' AND GPCH_AL_PAYMT_TYPE IN ( ' || $string || ' ) '
#debug show '$SQLSTMT :' $SQLSTMT

! Since each calendar group is attached with two pay entities we are ordering with pay entity first such that for different pay entities the report is generated on different pages
let $order  = 'ORDER BY PBD.PAY_ENTITY,PBD.GPCH_BK_TRNST_ISSR,PBD.GPCH_AL_PAYMT_TYPE,' ||
              'PBD.EMPLID,PBD.GPCH_BK_TRNST_RCVR'

let $Group_Criteri  = 'GROUP BY PBD.GPCH_BK_TRNST_ISSR,PBD.GPCH_AL_PAYMT_TYPE,' ||
      'PBD.GPCH_BK_TRNST_RCVR,PBD.GPCH_BK_ACCT_NM_RC,PBD.EMPLID,PBD.EMPL_RCD,' ||
      'PBD.CURRENCY_CD,PBD.GPCH_BK_CNTRY_RCVR,PBD.GPCH_BK_CNTRY_ISSR,' ||
      'PBD.GPCH_BK_ACCT_ISSR,PBD.GPCH_BK_ACCT_RCVR,' ||'PBD.GPCH_BK_IBAN1,'||
      'PBD.GPCH_BK_PUR_TRNFER,PBD.PAY_ENTITY,' ||
      'PBD.SEG_END_DT,PBD.GP_PMT_AMT,' ||'PBD.CAL_RUN_ID,PBD.CAL_ID'
      
      

!********************************************************************************************
let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT > 0 '
!do Initial_Vars
do Set_Terms
if $Exists_Data = 'Y'
new-page
end-if
do Initial_Vars
let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT <= 0 '
do Set_Terms
if $Exists_Data = 'Y'
new-page
end-if
end-procedure
!********************************************************************************************
begin-procedure Initial_Vars
let $Last_Page = 'N'
let #xfer_by_paymt_type  = 0
let #xfer_by_Hausbank_NB = 0
let #merk = 0
end-procedure

begin-procedure Set_Terms
let $Merk_N_Page = 'N'
let $FieldValue_Old = 'N'
let $TRNST_ISSR_Old = 'N'

do Select-Data

let $Last_Page = 'Y'
end-procedure

!****************************************************************************

begin-procedure Select-Data
  #DEBUG show 'Select-Data'
  #DEBUG SHOW $ReportBeginDate
  #DEBUG SHOW $ReportEndDate
  #DEBUG SHOW $Ctl_PayEntity
  #DEBUG SHOW '$pay_entity_condition1 ' $pay_entity_condition1
  #DEBUG SHOW '[$Bedingung] '  $Bedingung
  #DEBUG SHOW '[$Cal_Run_Id_Crit] ' $Cal_Run_Id_Crit
  #DEBUG SHOW '[$condition1] ' $condition1
  #DEBUG SHOW '[$SQLSTMT] '  $SQLSTMT
  #DEBUG SHOW '[$Amount_Sign_Term] ' $Amount_Sign_Term
  #DEBUG SHOW '[$Ctl_HomeBnk-crit] ' $Ctl_HomeBnk-crit
  #DEBUG SHOW '[$Group_Criteri] ' $Group_Criteri
  #DEBUG SHOW '[$order] ' $order
  
  
let $Pay_Type_Old      = ''
let $Pay_Type_New      = ''
let $Merke = 'N'
let $Normal_Break = 'Y'
let $Exists_Data = 'N'
begin-SELECT distinct
PBD.CURRENCY_CD
PBD.GPCH_BK_TRNST_ISSR
PBD.GPCH_BK_ACCT_ISSR
PBD.GPCH_AL_PAYMT_TYPE
PBD.GPCH_BK_ACCT_NM_RC
PBD.EMPLID
PBD.EMPL_RCD
PBD.GPCH_BK_CNTRY_RCVR
PBD.GPCH_BK_CNTRY_ISSR
PBD.GPCH_BK_TRNST_RCVR
PBD.GPCH_BK_ACCT_RCVR
PBD.GPCH_BK_IBAN1
PBD.GPCH_BK_PUR_TRNFER
PBD.GP_PMT_AMT
PBD.PAY_ENTITY
PBD.SEG_END_DT
PBD.CAL_RUN_ID
PBD.CAL_ID

   let $CURRENCY_CD   = &PBD.CURRENCY_CD
   let $TRNST_ISSR          = &PBD.GPCH_BK_TRNST_ISSR
   let $Home_Country_CD     = &PBD.GPCH_BK_CNTRY_ISSR
   let $Account_Iss    = &PBD.GPCH_BK_ACCT_ISSR
   let $FieldValue    = &PBD.GPCH_AL_PAYMT_TYPE
   let $GPCH_BK_ACCT_NM_RC  = &PBD.GPCH_BK_ACCT_NM_RC
   let $EMPLID     = rtrim(&PBD.EMPLID, ' ')
   let #Empl_RCD            = &PBD.EMPL_RCD
   let $Receiv_Country_CD    = &PBD.GPCH_BK_CNTRY_RCVR
   let $Bnk_BLZ    = &PBD.GPCH_BK_TRNST_RCVR
   let $GPCH_BK_ACCT_RCVR   = &PBD.GPCH_BK_ACCT_RCVR
   let $GPCH_BK_IBAN = &PBD.GPCH_BK_IBAN1
   let $VertNr     = rtrim(ltrim(&PBD.GPCH_BK_PUR_TRNFER,' '),' ')
   let #Amount_Transfer  = &PBD.GP_PMT_AMT
   let $Payentity        = &PBD.PAY_ENTITY

   let $Actual_TRANSIT_ACCEPTING = substr($TRNST_ISSR,1,8)

   do Get_Home_Bank_Adress

   let #merk = #merk + 1
   ! To get a new pay entity details on a different page 
   if $Payentity_Old <> $Payentity and $Payentity_Old <> '' and $Payentity <>''
     do new-page2
   end-if
   
   if $TRNST_ISSR_Old <> $TRNST_ISSR and $TRNST_ISSR_Old <> 'N'
      do new-page1
   end-if


   if $FieldValue_Old <> $FieldValue and $FieldValue_Old <> 'N'
    do new-page2
   end-if

   let #xfer_by_paymt_type  = #xfer_by_paymt_type + #Amount_Transfer
   let #xfer_by_Hausbank_NB = #xfer_by_Hausbank_NB + #Amount_Transfer


   let $FieldName = 'GPCH_AL_PAYMT_TYPE'
   do Read-Translate-Table
   let $Paym_Type_Name = rtrim(ltrim($XlatLongName,' '),' ')

   do Get-Bank-Name_Receiver

   let $TRNST_ISSR_Old = $TRNST_ISSR
   let $FieldValue_Old = $FieldValue
   let $Payentity_Old  = $Payentity 
   
   do Get-Company-Address(&PBD.PAY_ENTITY,$ReportEndDate,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                          $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
  
   do Print_Data
   let $Exists_Data = 'Y'

FROM PS_GPCH_BK_XFER_EE PBD

WHERE (PBD.SEG_END_DT between $ReportBeginDate and $ReportEndDate)
  !  AND (PBD.PAY_ENTITY    = $Ctl_PayEntity)
  [$pay_entity_condition1] 
  [$Bedingung]
  [$Cal_Run_Id_Crit]
  [$condition1]
  [$SQLSTMT]
  [$Amount_Sign_Term]
  [$Ctl_HomeBnk-crit]
  [$Group_Criteri]
  [$order]

end-SELECT

end-procedure
!*********************************************************************************************

begin-procedure Print_Data
#debug show '$EmplID_Rcd ' $EmplID_Rcd ' $Bnk_BLZ ' $Bnk_BLZ ' $GPCH_BK_ACCT_RCVR ' $GPCH_BK_ACCT_RCVR ' $Bank_Name_Receiver ' $Bank_Name_Receiver ' $GPCH_BK_IBAN ' $GPCH_BK_IBAN
#debug show '$GPCH_BK_ACCT_NM_RC ' $GPCH_BK_ACCT_NM_RC ' $VertNr ' $VertNr ' $GP_PMT_AMT ' $GP_PMT_AMT

   do Format-Number(#Amount_Transfer,$GP_PMT_AMT,'99,999,999.99')

   do Format-Number(#Empl_RCD,$EmplRcd,'888')
   let $EmplID_Rcd = $EMPLID || '-' || $EmplRcd
   print $EmplID_Rcd        (+1,{col0})
   print $Bnk_BLZ            (,{col1})
   print $GPCH_BK_ACCT_RCVR  (,{col2})
   print $GPCH_BK_IBAN      (,{col3})
   print $GPCH_BK_ACCT_NM_RC  (+1,{col0},28)
   !print $GPCH_BK_ACCT_RCVR         (,{col1})
   print $Bank_Name_Receiver  (,{col2},29)
   print $VertNr             (,{col3},29)
   print $GP_PMT_AMT    (,{col4})
   print ' '      (+1,1)
end-procedure

!************************************************
begin-procedure Get_Home_Bank_id
begin-select DISTINCT
SBK.SRC_BANK_ID
   let $Src_Bank_id = &SBK.SRC_BANK_ID
from PS_SRC_BANK SBK
WHERE SBK.BANK_CD = $TRNST_ISSR AND
      SBK.ACCOUNT_EC_ID = $Account_Iss AND
      SBK.COUNTRY_CD = $Home_Country_CD
end-select
end-procedure
!************************************************
begin-procedure Get_Home_Bank_Adress

if rtrim($Src_Bank_id,' ') = ''
    do Get_Home_Bank_id
end-if

begin-select
BTB1.BANK_NM
  let $Bank_Name = rtrim(&BTB1.BANK_NM,' ')
from PS_BANK_EC_TBL BTB1
where  BTB1.BANK_CD =  $TRNST_ISSR AND
       BTB1.COUNTRY_CD =  $Home_Country_CD
end-select
end-procedure

!*********************************************************************************************
begin-heading 13
   #Include 'gpchut08.sqc'

   !do Get-Company-Address($Ctl_PayEntity,$ReportEndDate,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
           !               $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

   print $SRC_BANK_STR     (+1,{col0})
   print ' '       ()
   print $Src_Bank_id      (,)
   print $PYENT            (,{col3})  bold
   print $Cpline1         (0, +2)

   print $COUNTRY_CD_STR   (+1,{col0})
   print $Home_Country_CD  ()
   print $Cpdescr  (,{col3})

   print $BANK_ID_STR      (+1,{col0})
   print $TRNST_ISSR       ()
   print $Cpline2         (,{col3})

   print $BANK_NAME1_STR   (+1,{col0})
   print $Bank_Name        (,)
   print $Cpline3         (,{col3})

   print $ACCOUNT1_STR     (+1,{col0})
   print $Account_Iss      ()
   print $Cpline31        (,{col3})

   print $Paym_Type_Name   (,{col01},18)

   print '_'       (+1,{col0},118) fill
   print $EMPL_ID_STR      (+1, {col0})
   print $BANK_ID2_STR     (, {col1})
   print $ACCOUNT3_STR     (, {col2})
   print $IBAN_ACCT        (, {col3})
      print $NAME_STR         (+1, {col0})
   print $BANK2_NAME_STR   (, {col2})
   print ' '               (,)
   print $RECEIVER_STR     (,)
   print $CONTRACT_STR     (, {col3})
   print $AMOUNT_STR1       (, {col4})
  
   print '_'       (+1,{col0},118) fill
end-heading

!*********************************************************************************************
begin-procedure  Get-Bank-Name_Receiver
   let $Bank_Name_Receiver =  ''
begin-select
TBL2.BANK_NM
  let $Bank_Name_Receiver = rtrim(&TBL2.BANK_NM,' ')
from PS_BANK_EC_TBL TBL2
where
TBL2.COUNTRY_CD = $Receiv_Country_CD AND
TBL2.BANK_CD = $Bnk_BLZ
end-select
end-procedure

!****************************************************************************

begin-procedure new-page1



  if ($TRNST_ISSR_Old <> $TRNST_ISSR) and ($TRNST_ISSR_Old <> '')
     let $Normal_Break = 'N'
     new-page
     let #merk = 0
  end-if
end-procedure

begin-procedure new-page2

if ($Payentity_Old <> $Payentity) and ($Payentity_Old <> '')
     let $Merk_N_Page = 'Y'
     let $Normal_Break = 'N'
     new-page
     let #merk = 0
  end-if

 if ($FieldValue_Old <> $FieldValue) and ($FieldValue_Old <> 'N')
    let $Merk_N_Page = 'Y'
 let $Normal_Break = 'N'
    new-page
    let #merk = 0
 end-if
end-procedure

begin-footing 7
   if  ($FieldValue_Old <> $FieldValue) or
       (($FieldValue_Old <> $FieldValue) and ($Normal_Break = 'Y')) or
    (($Last_Page = 'Y'))
       do Format-Number(#xfer_by_paymt_type, $Total_By_Paymt, '99,999,999,999.99')
       let $Bei_Zahlungsart =  $SUM_PAY_TYPE_STR || ' ' || $Paym_Type_Name || ': '
                              || $CURRENCY_CD || '  ' || $Total_By_Paymt
       print $Bei_Zahlungsart (+2,{col0})
       let #xfer_by_paymt_type = 0
   end-if

   if ($Last_Page = 'Y') or ($TRNST_ISSR_Old <> $TRNST_ISSR)

        do Format-Number(#xfer_by_Hausbank_NB, $Transfer_By_HB_NB, '99,999,999,999.99')
        let $Bei_Hausbank = $SUM_PAY_BK_STR || ' ' || $CURRENCY_CD || '  ' ||  $Transfer_By_HB_NB

        print $Bei_Hausbank (+2,{col0})

     let #xfer_by_paymt_type = 0
        let #xfer_by_Hausbank_NB = 0
   end-if

let $Normal_Break = 'Y'
end-footing
!************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHBK01'
               do Get_Eng_GPCHBK01
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHBK01
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHBK01'
               do Get_Ger_GPCHBK01
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHBK01
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHBK01'
               do Get_Ita_GPCHBK01
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHBK01
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHBK01'
               do Get_Fra_GPCHBK01
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHBK01
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!***************************************************************
#include 'gpchut01.sqc'
#include 'gpchut04.sqc'    !get company informations
#include 'gpchut06.sqc'    !get run control parameter values
#include 'gpchut07.sqc'    !Log Output Selection
#include 'readxlat.sqc'    !read-translate-table procedure
#include 'curdttim.sqc'    !get-current-datetime procedure
#include 'datetime.sqc'    !routines for date and time formatting
#include 'number.sqc'      !routines to format numbers
#include 'datemath.sqc'
#include 'stdapi.sqc'      !routines to update run status
#include 'sqrtrans.sqc'
#include 'validdt.sqc'     !validate date routine
#include 'gpchbk1s.sqc'    !Get Strings Values for GPCHBK01
#include 'gpchglbs.sqc'    !Get Strings Values for GPCHGLOB

