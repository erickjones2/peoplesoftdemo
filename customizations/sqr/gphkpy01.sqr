!***********************************************************************
! GPHKPY01.SQR     GLOBAL PAYROLL Hong Kong PAYSLIP PRINT PROGRAM       *
!                                                                      *
!  Description:                                                        *
!                  This program will take the results from the main GP *
!                  result tables and based on a payslp template ID     *
!                  attached to a paygroup, extract, format and print   *
!                  the Results.                                        *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  27143717                                            !
!                                                                      *
!693405000  14/06/2004  The SQR has been modified to so that that the  *
!                       ESS Payslip only all segments when segmentation*
!                       occurs.                                        *
!***********************************************************************

#include 'setenv.sqc'   !Set environment

Begin-Setup
#include 'setupdb.sqc'
  page-size 85 130

  declare printer
        type          = HPLASERJET
        orientation   = portrait
        top-margin    = .27
        left-margin   = 0.10
        font          = 3
        point-size    = 8
End-Setup

!List of constants for program
#define $payee_list     '10'
#define box_shade        10
#define colA 2
#define colB 8
#define colC 16
#define colD 54
#define colE 32
#define colF 40
#define colG 72
#define colH 56
!#define colI 72
#define colI 84
#define colII 84
!#define colI2 87
#define colI2 99
#define colI3 89
#define colI3 101
#define colJ 72
#define colK 90
#define colL 88
#define colL2 94
#define colM 96
#define colN 108
#define colO 112
#define colP 114

!Earnings and deductions column settings
#define ColED3  22
#define ColED5  33
#define ColED6  43
#define ColED7  49
#define ColED8  60
#define ColED9  72
#define ColED10 82
#define ColED11 92
#define ColED12 102
#define ColED13 112
#define ColED14 122

!Accumulators and its heading col settings
#define ColAC1  36
#define ColAC2  51
#define ColAC3  66
#define ColAC4  81
#define ColAC5  96
#define ColAC6  111

begin-report

  Let $End_Msg = '***** End of Payslip *****'

  do Init-DateTime
  Do Get-Current-DateTime
  do Init-Report

!ePay Implementation Changes begins here
  do GP-ePay-Control ! if ePay installed have a control row inserted.
!ePay Implementation Changes ends here

  Do Delete-RunControl

  do Stdapi-Term
end-report

begin-heading 17

   graphic (1,1,130) horz-line

  IF $ZHTFound = 'Y'
     Print $Header1  (8, {colI})
     Print ':'       (8, {colI2})
     Print $PayDates (8, {colI3})
  Else
     Print $Header1 (8, {colI})   Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header3 (9, {colI})
     Print ':'      (9, {colI2})
     Print $Pymt_Dt_Conv (9, {colI3})
  Else
     Print $Header3 (9, {colI})   Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header4a (12, {colI})
     Print ':'       (12, {colI2})
     Print $Emplid   (12, {colI3})
  Else
     Print $Header4a (12, {colI})  Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header5a (13,{colI})
     Print ':'       (13, {colI2})
     Print $PayEntityDescr (13,{colI3})
  Else
     Print $Header5a (13,{colI})   Bold
  End-if


  IF $ZHTFound = 'Y'
     Print $Header6a  (14,{colI})
     Print ':'        (14, {colI2})
     Print $Sort_Dept (14,{colI3})
  Else
     Print $Header6a (14,{colI})     Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header6b  (15, {colI})
     Print ':'        (15, {colI2})
     Print $Sort_Location (15,{colI3})
  Else
     Print $Header6b  (15, {colI})   Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header7a     (16,{colI})
     Print ':'           (16, {colI2})
     Print $Compensation (16, {colI3})
  Else
     Print $Header7a  (16,{colII})    Bold
  End-if

  IF $ZHTFound = 'Y'
     Print $Header8a  (17,{colI})
     Print ':'        (17, {colI2})
     Print $Jobtitle  (17, {colI3})
  Else
     Print $Header8a  (17,{colI})    Bold
  End-if

  if $Del_opt <> '20'
     Print $ADDLINE1 (12, 20)   Bold  !Replacing header 6
     Print $ADDLINE2 (13, 20)   Bold  !Replacing Header 7
     Print $ADDLINE3  (14, 20)  Bold  !Replacing header 8
     Print $ADDLINE31 (15, 20)  Bold  !Replacing header 9
     Print $ADDLINE4  (16, 20)  Bold  !REplacing Header 9A
     Print $ADDLINE5  (17, 20)  Bold  !REplacing Header 9A

  End-if

  if $Del_opt = '20' ! Department
     Print $EmployeeName (8, 10)   Bold  !Replacing header 6
  End-if
end-heading
!
begin-Footing 4
    graphic (0,1,130) horz-line
End-Footing
!
!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report
  do Stdapi-Init


#IFDEF DEBUGA
  Let $Prcs_OprID       = 'GPHKG'
  Let $Prcs_Run_Cntl_ID = 'RC'
#ENDIF
  do Select-Parameters
!ePay Implementation Changes begins here
  do GP-ePay-Init ! Initialize ePay variables
!ePay Implementation Changes ends here

  Let $Report_ID = 'GPHKPY01'
  let $Report_Language='ZHT'
  Do Init_Report_Translation ($Report_ID, $Report_Language)
  do Get_Field_Information ($Report_ID, 'DEPARTMENT'     , $Dept_Lbl,      #DW)
  do Get_Field_Information ($Report_ID, 'EMPLOYEE'       , $EE_Lbl,        #DW)
  do Get_Field_Information ($Report_ID, 'JOB_DESCRIPTION', $JobDescr_Lbl,  #DW)
  do Get_Field_Information ($Report_ID, 'LOCATION'       , $Location_Lbl,  #DW)
  do Get_Field_Information ($Report_ID, 'NAME'           , $Name_Lbl,      #DW)
  do Get_Field_Information ($Report_ID, 'PAYMENT_DATE'   , $PayDate_Lbl,   #DW)
  do Get_Field_Information ($Report_ID, 'PAY_ENTITY'     , $PayEntity_Lbl, #DW)
  do Get_Field_Information ($Report_ID, 'PAY_PERIOD'     , $PayPeriod_Lbl, #DW)
  do Get_Field_Information ($Report_ID, 'PAY_PERIOD_TO'  , $PayPrdTo_Lbl,  #DW)
  do Get_Field_Information ($Report_ID, 'PAY_RATE'       , $PayRate_Lbl,   #DW)

  do Test-ZHT-Characters

  do Define-Values
  do Process-Main
end-procedure
!
!**************************************************************************
! Procedure Test-ZHT-Characters
!**************************************************************************
Begin-procedure Test-ZHT-Characters
  Let $ZHTFound = 'N'
Begin-select
ZHT.PROGRAM_ID
  Let $ZHTFound = 'Y'
 FROM PS_STRINGS_LNG_TBL ZHT
    WHERE PROGRAM_ID = $Report_ID
      AND LANGUAGE_CD = 'ZHT'
End-select
End-Procedure
!
!**************************************************************************
!
! Procedure: Define-Values
!
! Description: Define general SQL Dynamic Query Variables.
!
!**************************************************************************
begin-procedure Define-Values


Let $EmplList = 'N'
Let $DeptList = 'N'
Let $LocnList = 'N'
Let $PyenList = 'N'
Let $PyGPList = 'N'
Let $No_List  = 'Y'

!Sort order
  If $sort_key1 <> '00'
     evaluate $sort_key1
          when = '10'
                let $Sort_Order1  = 'ORDER BY PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order1  = 'ORDER BY JOB.LOCATION '
          when = '30'
                let $Sort_Order1  = 'ORDER BY JOB.DEPTID '
          when = '40'
                let $Sort_Order1  = 'ORDER BY PERS.NAME '
          When = '50'
                let $Sort_Order1  = 'ORDER BY PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key2 <> '00'
     evaluate $sort_key2
            when = '10'
                let $Sort_Order2  = ', PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order2  = ', JOB.LOCATION '
          when = '30'
                let $Sort_Order2  = ', JOB.DEPTID '
          when = '40'
                let $Sort_Order2  = ', PERS.NAME '
          When = '50'
                let $Sort_Order2  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key3 <> '00'
     evaluate $sort_key3
            when = '10'
                let $Sort_Order3  = ', PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order3  = ', JOB.LOCATION '
          when = '30'
                let $Sort_Order3  = ', JOB.DEPTID '
          when = '40'
                let $Sort_Order3  = ', PERS.NAME '
          When = '50'
                let $Sort_Order3  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if

  String $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order

  if $Sort_Key1 = '00'
     let $Sort_order = 'ORDER BY PERS.NAME '
  End-If
  if ($Sort_Key1 = '20' or $Sort_Key1 = '30') or ($Sort_Key2 = '20' or $Sort_Key2 = '30') or ($Sort_Key3 = '20' or $Sort_Key3 = '30')
#define colI 72
#define colI2 87
#define colI3 89
  End-If

end-procedure
!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
begin-procedure Process-Main
SHOW ' Start processing payslips'
  Do Get-GP-Paygroup
  Do Process-Empl-List
  Do Process-Dept-List
  Do Process-Locn-List
  Do Process-Pay-Entity-List
  Do Process-PayGroup-List

  Let #J = 1

  If $No_List = 'Y'
     While #J <= #I
        Get $GP_Pygrp FROM Gp_Paygroups(#J)
        If #j = 1
           Let $WhereTemp = ' AND (PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
        Else
           if rtrim($GP_Pygrp,' ') <> ''
              Let $TempString = ' OR PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
              Let $WhereTemp = $WhereTemp || $TempString
           End-if
        End-If
        Let #J = #J + 1
     End-While
     if rtrim($WhereTemp,' ') <> ''
        Let $WhereTemp = $WhereTemp || ')'
        let $WhereClause = $WhereTemp
        Do Process-Payee
     End-if
  End-If
  !IF( $custEnabled = 'Y')
   ! DO update_stats
  !End-If
end-procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
begin-procedure Process-Payee
   Let $First_Empl = 'Y'
   let $singleOccurance_emplid = ''
   let $multiOccurance_emplid = ''
   let $segFlag='N'
   
begin-SELECT on-error=SQL-Error
PER.EMPLID
PER.EMPL_RCD
PERS.NAME
JOB.SETID_DEPT
JOB.DEPTID
JOB.SETID_LOCATION
JOB.LOCATION
JOB.COMPANY
PER.GP_PAYGROUP
JOB.COMP_FREQUENCY
JOB.COMPRATE
PER.PAY_ENTITY
PER.PYMT_DT
PER.SEG_BGN_DT
PER.SEG_END_DT
PER.CAL_RUN_ID
PER.CAL_ID
PER.RSLT_SEG_NUM
JOB.SETID_JOBCODE
JOB.JOBCODE

        let $Emplid         = &PER.EMPLID
        let $singleOccurance_emplid = $Emplid
        let $segFlag='N'
        let #Empl_Rcd       = &PER.EMPL_RCD
        let $EmployeeName   = &PERS.NAME

        let $Company        = &JOB.COMPANY
        let $Comp_Freq      = &JOB.COMP_FREQUENCY
        let #Comprate       = &JOB.COMPRATE
        let $GP_Paygroup    = &PER.GP_PAYGROUP

        let $Pay_Ent        = &PER.PAY_ENTITY
        let $Pymt_Dt        = &PER.PYMT_DT
        let $Pay_Pd_From_Dt = &PER.SEG_BGN_DT
        let $Pay_Pd_To_Dt   = &PER.SEG_END_DT
        let $Cal_ID         = &PER.CAL_ID
        let #Rslt_Seg_num   = &PER.RSLT_SEG_NUM

        Let $SetIDDept      = &JOB.SETID_DEPT
        let $Deptid         = &JOB.DEPTID
        Let $SetIDLocn      = &JOB.SETID_LOCATION
        let $Location       = &JOB.LOCATION

        Let $SetIDJobCode   = &JOB.SETID_JOBCODE
        let $JobCode        = &JOB.JOBCODE

!ePay Implementation Changes begins here
        Let $SegBgnDt      = &PER.SEG_BGN_DT
!ePay Implementation Changes ends here

!Check that the payee is not in an excluded location or dept

        let $locn_excl             = 'N'
        let $dept_excl             = 'N'

        do Get-JOB-JOBTitle-Details
        do Get_Payslip_ID

        do Check_Excl_Dept
        do Check_Excl_Loctn

        Let $AdrType = 'HOME'
        do Get_Address

        If $locn_excl = 'N' and $dept_excl = 'N'
           do Get_Payslip_Labels

           If $Del_opt = '50'
              let $Name = $EmployeeName
              do adformat
              Let $ADDLINE6 = ''
              do Compress-Address
           End-if

           do Get-PayEntity
           do Get_location
           do Get-Department-Details
           do Get_Frequency
           do Print_Empl_Details
           do Print_Summ_Lbls
           do Get_Payment_Summ
           Let $strEmplRcd = to_char(#Empl_Rcd)
           let $strEmplRcd  = rtrim($strEmplRcd,' ')
           let $strEmplRcd  = ltrim($strEmplRcd,' ')
           if $singleOccurance_emplid <> $multiOccurance_emplid
             let $multiOccurance_emplid = $singleOccurance_emplid
             let $segFlag='Y'
           end-if
           !Mobile Payslip - Insert Header Data
   ! IF( $custEnabled = 'Y')
        LET MPSLP_HDR.EMPLID(0) = $Emplid
        LET MPSLP_HDR.CAL_RUN_ID(0) = $Cal_Run_ID
        LET $Empl_Rcd   = TO_CHAR(#Empl_Rcd)
        LET MPSLP_HDR.EMPL_RCD(0) = #Empl_Rcd
        LET MPSLP_HDR.GP_PAYGROUP(0) = $GP_Paygroup
        LET MPSLP_HDR.CAL_ID(0) = $Cal_ID
        LET MPSLP_HDR.ORIG_CAL_RUN_ID(0) = $ORIG_CAL_ID
        LET $Rslt_Seg_num = TO_CHAR(#Rslt_Seg_num)
        LET MPSLP_HDR.RSLT_SEG_NUM(0) = #Rslt_Seg_num
        LET MPSLP_HDR.GP_PSLP_SRCPRODUCT(0) = 'GPHKG'
        IF($segFlag='Y')
            LET MPSLP_HDR.GP_PSLP_ID(0) = $Empl_Rcd || ' ' || $Pay_Dt_To_Conv
        ELSE
            LET MPSLP_HDR.GP_PSLP_ID(0) = $Pay_Dt_To_Conv || '_' || $GP_Paygroup || '_' || $strEmplRcd || '_' || to_char(#Rslt_Seg_num)
        END-IF
        LET MPSLP_HDR.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
        LET MPSLP_HDR.SEG_END_DT(0) = $Pay_Pd_To_Dt
        LET MPSLP_HDR.PRD_BGN_DT(0) = $PRD_BGN_DT
        LET MPSLP_HDR.PRD_END_DT(0) = $PRD_END_DT
        LET MPSLP_HDR.PYMT_DT(0) = $Pymt_Dt
        LET MPSLP_HDR.GP_MPSLP_GROSS(0) = #MP_GROSS
        LET MPSLP_HDR.GP_MPSLP_NET(0) = #MP_NET
        LET MPSLP_HDR.GP_COMPANY(0) = $Company
        LET MPSLP_HDR.RUN_TYPE(0) = $RUN_TYP
        DO insert_mpslp_hdr_row
   ! END-IF
    !Mobile Payslip - Insert Header Data
           do Print_Heading
           do Get_ED_Sections
           do Get_Leave
           do Get_Disburs_Banked
           do Get_Disburs_NonBanked
           do Get_Messages
           print $End_Msg (+2,10) BOLD Center
!ePay Implementation Changes begins here
          Let #EndPageNumber = #page-count
!ePay Implementation Changes ends here
!ePay Implementation Changes begins here
          do GP-ePay-Guide  ! if ePay installed write Guide data for each payslip
!ePay Implementation Changes ends here

           NEW-PAGE
        End-If

   FROM PS_GPHK_SS_PSLP_VW PER
      , PS_JOB JOB
      , PS_PERSON_NAME PERS

  WHERE PER.CAL_RUN_ID  = $Cal_Run_ID
    AND PER.EMPLID      = JOB.EMPLID
    AND PER.EMPL_RCD    = JOB.EMPL_RCD
    AND PER.EMPLID      = PERS.EMPLID
    AND JOB.EFFDT       = (SELECT MAX(J1.EFFDT)
                             FROM PS_JOB J1
                            WHERE J1.EMPLID   = JOB.EMPLID
                              AND J1.EMPL_RCD = JOB.EMPL_RCD
!                              AND J1.GP_PAYGROUP = JOB.GP_PAYGROUP
                              AND J1.EFFDT   <= PER.PYMT_DT)
    AND JOB.EFFSEQ      = (SELECT MAX(J2.EFFSEQ)
                             FROM PS_JOB J2
                            WHERE J2.EMPLID   = JOB.EMPLID
                              AND J2.EMPL_RCD = JOB.EMPL_RCD
                              AND J2.EFFDT    = JOB.EFFDT)

     [$whereClause]
     [$sort_order]
end-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get-Department-Details
! Description: Get Deptartment Details
!**************************************************************************
begin-procedure Get-Department-Details
 Let $Dept_Name = ''
Begin-SELECT
DEPT.DESCR
    Let $Dept_Name = &DEPT.DESCR
   FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SetIDDept
      AND DEPT.DEPTID = $Deptid
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID
                              AND DEPT1.EFFDT <= $Pymt_Dt
                       )
End-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Payslip_Labels
!
! Description: Get the payslip labels on delivery option for the payees
!              based on the paygroup
!
!**************************************************************************
begin-procedure Get_Payslip_Labels
begin-SELECT on-error=SQL-Error
PSLP.GPHK_DEL_OPT
PSLP.GPHK_LBL_ACUM1
PSLP.GPHK_LBL_ACUM2
PSLP.GPHK_LBL_ACUM3
PSLP.GPHK_LBL_ACUM4
PSLP.GPHK_LBL_ACUM5
PSLP.GPHK_LBL_ACUM6


!Check if an override for the delivery address exits
        let $Del_Opt               = &PSLP.GPHK_DEL_OPT

        do Check_Override_Add
!If the deleivery option is secondary get the details

        If $Del_opt = '60' !then get the secondary address
           let $Name = $EmployeeName
           Let $AdrType = 'MAIL'
           do Get_Address
           if $Adr2Found = 'N'
              let $Name = $EmployeeName
              do adformat
              Let $ADDLINE6 = ''
              do Compress-Address
           else
              Let $AdrType = 'MAIL'
              do Get_Address
              do adformat
              Let $ADDLINE6 = ''
              do Compress-Address
           End-if
        End-If

        let $Acum_Lbl1      = &PSLP.GPHK_LBL_ACUM1
        let $Acum_Lbl2      = &PSLP.GPHK_LBL_ACUM2
        let $Acum_Lbl3      = &PSLP.GPHK_LBL_ACUM3
        let $Acum_Lbl4      = &PSLP.GPHK_LBL_ACUM4
        let $Acum_Lbl5      = &PSLP.GPHK_LBL_ACUM5
        let $Acum_Lbl6      = &PSLP.GPHK_LBL_ACUM6

FROM PS_GPHK_PSLP PSLP,
     PS_GPHK_PYGRP_PSLP SGPAU
WHERE PSLP.EFFDT = (SELECT MAX(PSLP1.EFFDT)
                 FROM PS_GPHK_PSLP PSLP1
                 WHERE PSLP1.EFFDT <= PSLP.EFFDT)
AND PSLP.GPHK_PAYSLIP_ID = SGPAU.GPHK_PAYSLIP_ID
AND GP_PAYGROUP = $GP_Paygroup
end-SELECT

end-procedure
!**************************************************************************
!
! Procedure:  Print_Summ_Lbls
!
! Description: Print the summary headings/labels
!**************************************************************************
Begin-Procedure Print_Summ_Lbls

!ePay Implementation Changes begins here
   Let #BeginPageNumber = #page-count
!ePay Implementation Changes ends here

      print 'Pay Summary' (+8) Center Bold Underline

      Do Find-Start-Pos ($Acum_Lbl1, {colAC1},#ReturnCol)
      print $Acum_Lbl1 (+2, #ReturnCol) Bold

      Do Find-Start-Pos ($Acum_Lbl2, {colAC2},#ReturnCol)
      print $Acum_Lbl2 (0, #ReturnCol) Bold

      Do Find-Start-Pos ($Acum_Lbl3, {colAC3},#ReturnCol)
      print $Acum_Lbl3 (0, #ReturnCol) Bold

      Do Find-Start-Pos ($Acum_Lbl4, {colAC4},#ReturnCol)
      print $Acum_Lbl4 (0, #ReturnCol) Bold

      Do Find-Start-Pos ($Acum_Lbl5, {colAC5},#ReturnCol)
      print $Acum_Lbl5 (0, #ReturnCol) Bold

      Do Find-Start-Pos ($Acum_Lbl6, {colAC6},#ReturnCol)
      print $Acum_Lbl6 (0, #ReturnCol) Bold
End-Procedure
!
!**************************************************************************
! Procedure:  Find-Start-Pos
! Description: Control the positioning  print the headings
!**************************************************************************
Begin-procedure Find-Start-Pos($Acum_Lbl, #StartCol,:#ReturnCol)
     Let $Acum_lbl = rtrim($Acum_lbl,' ')
     Let #Len = length($Acum_lbl)
     Let #ReturnCol = (#StartCol +11) - #Len
     if #ReturnCol <= 0
        Let #ReturnCol = #StartCol
     End-if
End-procedure
!
!**************************************************************************
! Procedure:  Pad-String
! Description: Control the positioning  of the values
!**************************************************************************
Begin-procedure Pad-String($Label, $Value,:$ReturnVal)
     let #MaxLblLen = 17
     Let #Vallen  = length($Label)
     if #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
     else
        Let $PadVar = ''
     end-if
     Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-procedure
!
!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
begin-procedure Print_Empl_Details

  do Format-DateTime($Pay_Pd_From_Dt, $Pay_Dt_From_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pay_Pd_To_Dt, $Pay_Dt_To_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pymt_Dt, $Pymt_Dt_Conv, {DEFDATE}, '', '')


  let $Header1  = rtrim($PayPeriod_Lbl,' ')
  let $Header3  = rtrim($PayDate_Lbl,' ')
  let $Header4a = rtrim($EE_Lbl,' ')
  let $Header5a = rtrim($PayEntity_Lbl,' ')
  let $Header6a = rtrim($Dept_Lbl,' ')
  let $Header6b = rtrim($Location_Lbl,' ')
  let $Header7a = rtrim($PayRate_Lbl,' ')
  let $Header8a = rtrim($JobDescr_Lbl,' ')

  If $ZHTFound = 'N'
     Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv
     Do Pad-String ($Header1,$PayDates,$Header1)

     Do Pad-String ($Header3,$Pymt_Dt_Conv,$Header3)

     Do Pad-String ($Header4A,$Emplid,$Header4A)

     Do Pad-String ($Header5A,$PayEntityDescr,$Header5A)

     if $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
        Let $SortDeptid = rtrim($DeptID,' ')
        Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
     else
        Let $Sort_Dept = $Dept_Name
     end-if

     Do Pad-String ($Header6A,$Sort_Dept,$Header6A)


     if $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
        Let $SortLocation = rtrim($Location,' ')
        Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
     else
        Let $Sort_Location = $lctnDesc
     end-if

     Do Pad-String ($Header6b,$Sort_Location,$Header6b)

!     let #compensation = round(#Comprate,2)
!     Let $Compensation = to_char(#Compensation)
     Let $Comprate = to_char(#comprate)
     Let $Comprate = edit($Comprate, '999,999.99')
     Let $Compensation = ltrim($comprate,' ')

     Let $Compensation = $Compensation || ' (' || rtrim($freq_descr,' ') || ')'

     Do Pad-String ($Header7a,$Compensation,$Header7a)

     Do Pad-String ($Header8a,$Jobtitle,$Header8a)
  else
     Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv

     if $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
        Let $SortDeptid = rtrim($DeptID,' ')
        Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
     else
        Let $Sort_Dept = $Dept_Name
     end-if

     if $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
        Let $SortLocation = rtrim($Location,' ')
        Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
     else
        Let $Sort_Location = $lctnDesc
     end-if

     let #compensation = round(#Comprate,2)
     Let $Compensation = to_char(#Compensation)

     Let $Compensation = $Compensation || ' (' || rtrim($freq_descr,' ') || ')'
  End-if
end-procedure
!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
!
begin-procedure Print_Heading

        print 'Payment Details' (+2,) Center Bold Underline
        print '|' (+2,{ColA}) Bold
        graphic (0,3,25) horz-line
        graphic (0,44,27) horz-line
        print 'Current Values' (0,28) bold
        print '|Payback|'(0,71) Bold
        graphic (0,81,8) horz-line
        print 'Adjustments' (0,89) bold
        graphic (0,101,8) horz-line
        print '|' (0,109)
        graphic (0,110,4) horz-line
        print 'YTD Values' (0,114) bold
        graphic (0,125,4) horz-line
        print '|' (0,129)

end-procedure
!**************************************************************************
!
! Procedure: Get_ED_Sections
!
! Description:  Get the sections applicable based on the payslip id
!
!**************************************************************************
begin-procedure Get_ED_Sections

  let $sql-statement = ' Get_Section'
begin-SELECT on-error=SQL-Error
SECT.DESCR
SECT.SEQ_NUM
SECT.GPHK_MPF_SCTN_ID
SECT.EFFDT

  let $Sect_Hdg           = rtrim(&SECT.DESCR, ' ')
  let #Sect_Seq_Num       = &SECT.SEQ_NUM
  Let $SECT_Effdt         = &SECT.EFFDT
  Let $MPFSection         = &SECT.GPHK_MPF_SCTN_ID

  do Print_ED_Headings
  do Get-Section-Elements

  IF #total_curr_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 3
     print 'Total' (+2, {ColA}) Bold
     print #total_curr_amt (0, #ReturnCol)   edit '9999999.99'
  End-if

  IF #total_pybck_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     print #total_pybck_amt (0, #ReturnCol) edit '99999999.99'
  end-if

  IF #total_adj_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     print #total_adj_amt   (0, #ReturnCol)  edit '99999999.99'
  end-if

  IF #Acum_Rslt_Amt_TTL <> 0
     Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     !print #Acum_Rslt_Amt_TTL (0, #ReturnCol)  edit '99999999.99'
  end-if

  Let $New_Page_ED       = 'N'
  Let #total_curr_amt    = 0
  Let #total_adj_amt     = 0
  Let #total_pybck_amt   = 0
  Let #Acum_Rslt_Amt_TTL = 0

  if $MPFSection = 'Y'
     Do Print-MPF-Section
  End-if

FROM PS_GPHK_PSLP_SECT SECT
     WHERE SECT.GPHK_PAYSLIP_ID = $Payslip_ID
       AND SECT.EFFDT = (SELECT MAX(SECT1.EFFDT) FROM PS_GPHK_PSLP_SECT SECT1
                                WHERE SECT1.GPHK_PAYSLIP_ID = SECT.GPHK_PAYSLIP_ID
                                  AND SECT1.EFFDT <= $Pymt_Dt)
ORDER BY SECT.SEQ_NUM

end-select
end-procedure
!
!**************************************************************************
! Procedure   : Get-Section-Elements
! Description : Get details of Earnings / Deductions for each section line
!               definition
!**************************************************************************
begin-procedure Get-Section-Elements
    Let #LastPinNum = 0
begin-SELECT
GSE.SEQ_NUM5
PIN.PIN_NUM
GSE.DESCR
PIN.DESCR
PIN.PIN_NM
GSE.GPHK_DESC_TYPE
GSE.GPHK_YTD_AC_AMT
GSE.GPHK_YTD_AC_UNITS
GSE.GPHK_BSE_COMP_YN
GSE.GPHK_PCT_COMP_YN
GSE.GPHK_RTE_COMP_YN
GSE.GPHK_UNT_COMP_YN
GSE.GPHK_YTD_AC_AMT_YN
GSE.GPHK_YTD_AC_UNT_YN

        Let #ED_PinNum       = &PIN.PIN_NUM
        let $ED_Descr        = &GSE.DESCR
        let $Pin_Descr       = &PIN.DESCR
        let $Descr_Type      = &GSE.GPHK_DESC_TYPE
        let $Pin_Nm          = &PIN.PIN_NM
        let $Print_Base_YN   = &GSE.GPHK_BSE_COMP_YN
        let $Print_Pct_YN    = &GSE.GPHK_PCT_COMP_YN
        let $Print_Rte_YN    = &GSE.GPHK_RTE_COMP_YN
        let $Print_Unt_YN    = &GSE.GPHK_UNT_COMP_YN

        Let #AcumAmtPin      = &GSE.GPHK_YTD_AC_AMT
        Let #AcumUnitPin     = &GSE.GPHK_YTD_AC_UNITS


        if #ED_PinNum <> #LastPinNum
           Let #Acum_Rslt_Seg_Num = #Rslt_Seg_Num

           Let $Descr_Temp = $PIN_Descr

           evaluate $Descr_Type
               when = '10'
                     let $Descr_Temp = $PIN_Descr
               when = '20'
                     let $Descr_Temp = $ED_Descr
               when = '30'
                     let $Descr_Temp = $Pin_Nm
           end-evaluate

           let $Descr = substr($Descr_Temp,1 , 16)
           Do Get-Acum-Results
           Do Get_ErnDed_Results

        end-if

    if #AcumRsltFound
       if NOT #ErnDedRowFound
          do Print-Ern-Ded-Values
       end-if
    End-IF

    Let #LastPinNum  = #ED_PinNum

   FROM PS_GPHK_PSLP_ED GSE, PS_GP_PIN PIN
     WHERE GSE.GPHK_PAYSLIP_ID = $Payslip_ID
       AND GSE.EFFDT = $SECT_Effdt
       AND GSE.SEQ_NUM = #Sect_Seq_Num
       AND GSE.PIN_NUM = PIN.PIN_NUM
ORDER BY GSE.SEQ_NUM5
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure  : Print-Ern-Ded-Values
! Description: Print the values from the ern-ded or accumulator variables
!            : for the earning / deduction being processed
!**************************************************************************
Begin-Procedure Print-Ern-Ded-Values
      If #Current-line >  80
         NEW-PAGE
         do Print_Heading
         do Print_ED_Headings
      end-if

      print $Descr   (+1, {ColA}) BOLD

      If $Print_Base_YN = 'Y'
        if #Base_Rslt_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED3},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Base_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Pct_YN = 'Y'
         if #Pct_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED5},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Pct_Rslt_Val  (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Rte_YN = 'Y'
         IF #Rate_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED6},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Rate_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Unt_YN = 'Y'
         if #Unit_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED7},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Unit_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      if #EDCalc_Rslt_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #EDCalc_Rslt_Val (0, #ReturnCol)   edit '9999999.99'
      End-If
      If #Rslt_Paybk > 0
         Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Rslt_Paybk    (0, #ReturnCol)   edit '9999999.99'
      end-if
      if #Calc_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Calc_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #Base_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED11},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Base_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #Unit_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED12},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Unit_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #PinCounter = 0
         if #Acum_Rslt_Hrs <> 0
            Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Acum_Rslt_Hrs (0, #ReturnCol)  edit '9999999.99'
         end-if
         if #Acum_Rslt_Amt <> 0
            if #LastPinNum <> &PIN.PIN_NUM
               Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
               Let #ReturnCol = #ReturnCol - 3
               print #Acum_Rslt_Amt (0, #ReturnCol)  edit '9999999.99'
               Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt + #Acum_Rslt_Amt_TTL
            end-if
         end-if
      End-IF
End-Procedure
!
!**************************************************************************
!
! Procedure: Get_ErnDed_Results
!
! Description: Get and print the earnings and deduction details for the payee.
!
!**************************************************************************
begin-procedure Get_ErnDed_Results
    Let $TenCharVar       = '1234567890'
    Let #LastPinNum       = 0
    Let #ErnDedRowFound   = 0
    Let #PinCounter       = 0

    let #EDCalc_Rslt_Val  = 0
    let #Unit_Rslt_Val    = 0
    let #Rate_Rslt_Val    = 0
    let #Base_Rslt_Val    = 0
    let #Pct_Rslt_Val     = 0
    let #Rslt_Paybk       = 0
    let #Calc_Adj_Val     = 0
    let #Base_Adj_Val     = 0
    let #Unit_Adj_Val     = 0
    let #INSTANC          = 0
begin-SELECT on-error=SQL-Error
RSLT.CALC_RSLT_VAL
RSLT.UNIT_RSLT_VAL
RSLT.RATE_RSLT_VAL
RSLT.BASE_RSLT_VAL
RSLT.PCT_RSLT_VAL
RSLT.RSLT_PAYBK
RSLT.CALC_ADJ_VAL
RSLT.BASE_ADJ_VAL
RSLT.UNIT_ADJ_VAL
RSLT.INSTANCE
RSLT.SLICE_BGN_DT
RSLT.SLICE_END_DT

        Let #ErnDedRowFound   = 1

        let #EDCalc_Rslt_Val  = &RSLT.CALC_RSLT_VAL
        let #Unit_Rslt_Val    = &RSLT.UNIT_RSLT_VAL
        let #Rate_Rslt_Val    = &RSLT.RATE_RSLT_VAL
        let #Base_Rslt_Val    = &RSLT.BASE_RSLT_VAL
        let #Pct_Rslt_Val     = &RSLT.PCT_RSLT_VAL
        let #Rslt_Paybk       = &RSLT.RSLT_PAYBK
        let #Calc_Adj_Val     = &RSLT.CALC_ADJ_VAL
        let #Base_Adj_Val     = &RSLT.BASE_ADJ_VAL
        let #Unit_Adj_Val     = &RSLT.UNIT_ADJ_VAL
        let #INSTANC          = &RSLT.INSTANCE
        let $Slice_Bgn_Dt = &RSLT.SLICE_BGN_DT
        let $Slice_End_Dt   = &RSLT.SLICE_END_DT

        let #total_curr_amt   = #total_curr_amt  + #EDCalc_Rslt_Val
        let #total_pybck_amt  = #total_pybck_amt + #Rslt_Paybk
        let #total_adj_amt    = #total_adj_amt   + #Calc_Adj_Val

        do Print-Ern-Ded-Values

        Let #PinCounter = #PinCounter + 1 ! increment the counter after printing the values for the 1st time.
        !EARNNGS & DEDUCTIONS
      !  IF( $custEnabled = 'Y')
            do Get-Element-Group
            do Get-Section_Number

            LET MPSLP_ED.RSLT_SEG_NUM(0) = #Rslt_Seg_num
            LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) = 'GPHKG'
            LET MPSLP_ED.GP_PSLP_ID(0) = MPSLP_HDR.GP_PSLP_ID(0)
            LET MPSLP_ED.INSTANCE(0) = #INSTANC
            LET MPSLP_ED.PIN_NUM(0) = #ED_PinNum
            LET MPSLP_ED.SLICE_BGN_DT(0) = $Slice_Bgn_Dt
            LET MPSLP_ED.SLICE_END_DT(0) = $Slice_End_Dt
            LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
            LET MPSLP_ED.ED_ASSIGN_INSTANCE(0) = 0
            LET MPSLP_ED.PI_INSTANCE(0) = 0
            LET MPSLP_ED.PRD_BGN_DT(0) = $PRD_BGN_DT
            LET MPSLP_ED.PRD_END_DT(0) = $PRD_END_DT
            LET MPSLP_ED.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
            LET MPSLP_ED.SEG_END_DT(0) = $Pay_Pd_To_Dt
            LET MPSLP_ED.PYMT_DT(0) =  $Pymt_Dt
            LET MPSLP_ED.RUN_TYPE(0) = $RUN_TYP
            LET MPSLP_ED.CALC_RSLT_VAL(0) = #EDCalc_Rslt_Val
            !LET MPSLP_ED.CALC_ADJ_VAL(0) =    #Calc_Adj_Val         
            LET MPSLP_ED.CALC_DELTA_VAL(0) = #Calc_Adj_Val            
            LET MPSLP_ED.BASE_RSLT_VAL(0) =     #Base_Rslt_Val      
            LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val       
            LET MPSLP_ED.RATE_RSLT_VAL(0) =     #Rate_Rslt_Val        
            LET MPSLP_ED.UNIT_RSLT_VAL(0) =     #Unit_Rslt_Val       
            LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
            LET MPSLP_ED.PCT_RSLT_VAL(0) =    #Pct_Rslt_Val  

            LET MPSLP_ED.GP_MPSLP_SECTION(0) = $GP_section_nm
            LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = $Sect_Hdg 

            DO insert_mpslp_ernded_row
       ! END-IF

FROM PS_GP_RSLT_ERN_DED RSLT
, PS_GP_PYE_PRC_STAT PRC
WHERE PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLT.EMPLID        = PRC.EMPLID
  AND RSLT.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLT.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLT.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
  AND RSLT.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLT.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
  AND RSLT.RSLT_SEG_NUM  = #Rslt_Seg_num
  AND RSLT.PIN_NUM       = #ED_PinNum
end-select
end-procedure
!******************************************************************
!***    fetching element group
!******************************************************************
begin-procedure Get-Element-Group

begin-SELECT DISTINCT
A.PIN_NUM    &PIN_NM

    LET #PARENT_PIN = &PIN_NM

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #ED_PinNum
end-SELECT


begin-SELECT DISTINCT
A.PIN_NUM    &PIN_NM_Y

    LET #PARENT_PIN_Y = &PIN_NM_Y

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #PIN_NUM_YTD
end-SELECT

end-procedure
!******************************************************************
!***    Get section number
!******************************************************************
begin-procedure Get-Section_Number

begin-SELECT DISTINCT
A.PIN_TYPE  &PIN_TYP

    IF &PIN_TYP = 'ER'
        LET $GP_section_nm = '10'
    ELSE
    IF &PIN_TYP = 'DD'
        LET $GP_section_nm = '20'
    END-IF
        END-IF

FROM PS_GP_PIN A
WHERE   A.PIN_NUM = #ED_PinNum
end-SELECT

begin-SELECT DISTINCT
A.PIN_TYPE  &PIN_TYP_Y

    IF &PIN_TYP_Y = 'AC'
        LET $GP_section_nm_Y = '40'
    END-IF

FROM PS_GP_PIN A
WHERE   A.PIN_NUM = #PIN_NUM_YTD
end-SELECT

end-procedure Get-Section_Number
!
!**************************************************************************
! Procedure   : Get-Acum-Results
! Description : Get Acum Values for Earn/ Deductions.
!**************************************************************************
Begin-Procedure Get-Acum-Results
   let #AcumRsltFound = 0
   Let #Acum_Rslt_Hrs = 0
   Let #Acum_Rslt_Amt = 0
Begin-SELECT
ACUM.PIN_NUM
ACUM.CALC_RSLT_VAL
ACUM.RSLT_SEG_NUM
ACUM.EMPL_RCD_ACUM     &EmpRcdAc
ACUM.ACM_FROM_DT
ACUM.ACM_THRU_DT
ACUM.SEQ_NUM8


             
    Let #AcumRsltFound = 1
    Let #Calc_Rslt_Val = &ACUM.CALC_RSLT_VAL
    Let $Acum_From_Dt = &ACUM.ACM_FROM_DT
    Let $Acum_Thru_Dt = &ACUM.ACM_THRU_DT
    Let #Seq_Num8 = &ACUM.SEQ_NUM8

            
     if &GSE.GPHK_YTD_AC_UNT_YN = 'Y'
        if &ACUM.PIN_NUM = #AcumUnitPin
           let #Acum_Rslt_Hrs = #Calc_Rslt_Val
        end-if
     end-if

!Get the accumulated value of the amount, if entered at setup

             if &GSE.GPHK_YTD_AC_AMT_YN = 'Y'
        if &ACUM.PIN_NUM = #AcumAmtPin
           let #Acum_Rslt_Amt = #Calc_Rslt_Val
        end-if
     end-if
               
   ! IF( $custEnabled = 'Y')
        Let #PIN_NUM_YTD = &ACUM.PIN_NUM
        DO Get-Element-Group
        DO Get-Section_Number

        LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) = 'GPHKG'
        LET MPSLP_ACUM.GP_PSLP_ID(0) = MPSLP_HDR.GP_PSLP_ID(0)
        LET MPSLP_ACUM.RSLT_SEG_NUM(0) = #Rslt_Seg_num
        LET MPSLP_ACUM.PIN_NUM(0) = #PIN_NUM_YTD
        LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = &EmpRcdAc
        !LET MPSLP_ACUM.ACM_FROM_DT(0) = $Pay_Pd_From_Dt
        !LET MPSLP_ACUM.ACM_THRU_DT(0) = $Pay_Pd_To_Dt
        !LET MPSLP_ACUM.SEQ_NUM8(0) = #Rslt_Seg_num
        LET MPSLP_ACUM.ACM_FROM_DT(0) = $Acum_From_Dt
        LET MPSLP_ACUM.ACM_THRU_DT(0) = $Acum_Thru_Dt
        LET MPSLP_ACUM.SEQ_NUM8(0) = #Seq_Num8
        LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN_Y
        LET MPSLP_ACUM.SLICE_BGN_DT(0) = $Pay_Pd_From_Dt
        LET MPSLP_ACUM.SLICE_END_DT(0) = $Pay_Pd_To_Dt
        LET MPSLP_ACUM.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
        LET MPSLP_ACUM.SEG_END_DT(0) = $Pay_Pd_To_Dt
        LET MPSLP_ACUM.PRD_BGN_DT(0) = $PRD_BGN_DT
        LET MPSLP_ACUM.PRD_END_DT(0) = $PRD_END_DT
        LET MPSLP_ACUM.PYMT_DT(0) = $Pymt_Dt
        LET MPSLP_ACUM.RUN_TYPE(0) = $RUN_TYP
        LET MPSLP_ACUM.COUNTRY(0) = $Company
        LET MPSLP_ACUM.CALC_RSLT_VAL(0) = #Acum_Rslt_Amt
        LET MPSLP_ACUM.CALC_VAL(0) = #Acum_Rslt_Amt
        LET MPSLP_ACUM.GP_MPSLP_SECTION(0) = $GP_section_nm_Y
        LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) = $Sect_Hdg
        do insert_mpslp_acum_row
   ! END-IF
  FROM PS_GP_RSLT_ACUM ACUM
   WHERE (ACUM.PIN_NUM = #AcumUnitPin or ACUM.PIN_NUM = #AcumAmtPin)
     AND ACUM.EMPLID         = $Emplid
     AND ACUM.EMPL_RCD       = #Empl_Rcd
     AND ACUM.EMPL_RCD_ACUM  = ACUM.EMPL_RCD
     AND ACUM.CAL_RUN_ID     = $Cal_Run_ID
     AND ACUM.CAL_ID         = $Cal_ID
     AND ACUM.GP_PAYGROUP    = $GP_Paygroup
     AND ACUM.RSLT_SEG_NUM   = #Acum_Rslt_Seg_Num
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get_Leave
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get_Leave
        let $First_Abs = 'Y'
Begin-SELECT
ABTMPL.SEQ_NUM
ABTMPL.GPHK_ENTL_PIN_NUM
ABTMPL.PIN_NUM           &PIN1
ABTMPL.GPHK_DESC_TYPE
ABTMPL.DESCR
ABTMPL.GPHK_PIN_AC1_NUM  &PIN2
ABTMPL.GPHK_PIN_AC2_NUM  &PIN3
ABTMPL.GPHK_PIN_AC3_NUM  &PIN4

        Let #Pin1 = &PIN1  ! Entitlement
        Let #Pin2 = &PIN2  ! Balance
        Let #Pin3 = &PIN3  ! Adjustment
        Let #Pin4 = &PIN4  ! Take

        Let $AB_Descr   = &ABTMPL.DESCR
        let $Descr_Type = &ABTMPL.GPHK_DESC_TYPE

        Do Get-Leave-Data

        if #Pin1Val <> 0 or #Pin2Val <> 0 or #Pin3Val <> 0 or #Pin4Val <> 0
           If #Current-line >  80
              NEW-PAGE
              do Print_Heading
           End-if
           If $First_Abs = 'Y'
              do Print_Abs_headings
              let $First_Abs = 'N'
           end-if
           print $Descr        (+1, {ColA})

           if #Pin1Val <> 0
              print #Pin1Val  (0, {ColD})   edit '9999.999999'
           end-if
           if #Pin2Val <> 0
              print #Pin2Val  (0, {ColN})  edit '9999.999999'
           end-if
           if #Pin3Val <> 0
              print #Pin3Val  (0, {ColG})  edit '9999.999999'
           end-if
           if #Pin4Val <> 0
              print #Pin4Val  (0, {ColL})  edit '9999.999999'
           end-if
        end-if
   FROM PS_GPHK_PSLP_ABS ABTMPL
    WHERE ABTMPL.GPHK_PAYSLIP_ID = $Payslip_Id
     AND ABTMPL.EFFDT  = (SELECT MAX(ABTMPL1.EFFDT) FROM PS_GPHK_PSLP_ABS ABTMPL1
                            WHERE ABTMPL1.GPHK_PAYSLIP_ID = ABTMPL.GPHK_PAYSLIP_ID
                              AND ABTMPL1.EFFDT <= $Pymt_Dt)
ORDER BY ABTMPL.SEQ_NUM
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-Leave-Data
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get-Leave-Data
   Let #Pin1Val = 0
   Let #Pin2Val = 0
   Let #Pin3Val = 0
   Let #Pin4Val = 0

begin-SELECT on-error=SQL-Error
D.PIN_NUM
D.PIN_NM
ABS.CALC_RSLT_VAL
D.DESCR

        let $Pin_Descr = &D.DESCR
        let $Pin_Nm    = &D.PIN_NM

        Evaluate $Descr_Type
           when = '10'
                let $Descr = $Ab_Descr
           when = '20'
                let $Descr = $Pin_Descr
           when = '30'
                Let $Descr = $Pin_Nm
        end-evaluate

        if &D.PIN_NUM = #PIN1
           Let #Pin1Val = #Pin1Val + &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN2
           Let #Pin2Val = #Pin2Val + &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN3
           Let #Pin3Val = #Pin3Val + &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN4
           Let #Pin4Val = #Pin4Val + &ABS.CALC_RSLT_VAL
        end-if
FROM PS_GP_PYE_PRC_STAT A
   , PS_GP_PYE_SEG_STAT B
   , PS_GP_PIN D
   , PS_GP_RSLT_ACUM ABS
   , PS_GP_RUN_TYPE DR
   , PS_GP_CAL_PRD H
  WHERE A.CAL_RUN_ID         = B.CAL_RUN_ID
    AND A.EMPLID             = B.EMPLID
    AND A.EMPL_RCD           = B.EMPL_RCD
    AND A.GP_PAYGROUP        = B.GP_PAYGROUP
    AND A.CAL_ID             = B.CAL_ID
    AND DR.RUN_TYPE           = A.RUN_TYPE
    AND DR.CALC_TYPE          = 'A'
    AND A.CAL_PRD_ID         = H.CAL_PRD_ID
    AND A.PRD_BGN_DT         = H.PRD_BGN_DT
    AND A.PRD_END_DT         = H.PRD_END_DT
    AND B.EMPLID             = ABS.EMPLID
    AND B.CAL_RUN_ID         = ABS.CAL_RUN_ID
    AND B.EMPL_RCD           = ABS.EMPL_RCD
    AND ABS.EMPL_RCD         = ABS.EMPL_RCD_ACUM
    AND B.CAL_ID             = ABS.CAL_ID
    AND B.GP_PAYGROUP        = ABS.GP_PAYGROUP
    AND ABS.PIN_NUM          = D.PIN_NUM
    AND B.RSLT_SEG_NUM       = #Rslt_Seg_num
    AND B.RSLT_SEG_NUM       = ABS.RSLT_SEG_NUM
    AND (ABS.PIN_NUM = #PIN1 or ABS.PIN_NUM = #PIN2 or ABS.PIN_NUM = #PIN3 or ABS.PIN_NUM = #PIN4)
    AND (ABS.ACM_THRU_DT IS NULL
    OR
       ((ABS.ACM_THRU_DT IS NOT NULL) AND
    ABS.ACM_THRU_DT   = (SELECT MAX(ABS1.ACM_THRU_DT)
                                FROM PS_GP_RSLT_ACUM ABS1
                                WHERE ABS.EMPLID        = ABS1.EMPLID
                                AND ABS.CAL_RUN_ID      = ABS1.CAL_RUN_ID
                                AND ABS.EMPL_RCD        = ABS1.EMPL_RCD
                                AND ABS.GP_PAYGROUP     = ABS1.GP_PAYGROUP
                                AND ABS.CAL_ID          = ABS1.CAL_ID
                                AND ABS.ORIG_CAL_RUN_ID = ABS1.ORIG_CAL_RUN_ID
                                AND ABS.RSLT_SEG_NUM    = ABS1.RSLT_SEG_NUM
                                AND ABS.PIN_NUM         = ABS1.PIN_NUM
                                AND ABS.EMPL_RCD_ACUM   = ABS1.EMPL_RCD_ACUM
                          )
        )
    AND ABS.ACM_THRU_DT >= ABS.SLICE_END_DT)
    AND A.EMPLID             = $Emplid
    AND A.EMPL_RCD           = #Empl_Rcd
    AND A.CAL_RUN_ID         = $Cal_Run_Id
    AND A.GP_PAYGROUP        = $GP_Paygroup
    AND A.PRC_ORD_TS = (SELECT MAX(A21.PRC_ORD_TS) FROM PS_GP_PYE_PRC_STAT A21
                                       WHERE A21.EMPLID     = A.EMPLID
                                         AND A21.CAL_RUN_ID = A.CAL_RUN_ID
                                         AND A21.EMPL_RCD   = A.EMPL_RCD
                                         AND A21.CAL_ID     = A.CAL_ID
                               )
end-select
end-procedure

!**************************************************************************
!
! Procedure: Get_Disburs_Banked
!
! Description: Get and print the banking details for the payee.
!
!**************************************************************************
begin-procedure Get_Disburs_Banked

        let $First_Disb = 'Y'

begin-SELECT on-error=SQL-Error
B.GP_PMT_AMT
D.BRANCH_EC_CD
D.ACCOUNT_EC_ID
E.BANK_NM

    If #Current-line >  80
       NEW-PAGE
       do Print_Heading
    End-if

    If $First_Disb = 'Y'
       do Print_Disb_headings
       let $First_Disb = 'N'
    end-if

    let $Bank_Name = &E.BANK_NM
    let $BSB       = &D.BRANCH_EC_CD

    print $Bank_Name (+2, {ColA})

    print $BSB (0, {ColD})

    let $Acct_Nbr = &D.ACCOUNT_EC_ID
    print $Acct_Nbr (0, {ColG})

    let #Paymnt_Amt = &B.GP_PMT_AMT
    print #Paymnt_Amt (0, {ColN}) edit 999999999.99

FROM PS_GP_CALENDAR A
, PS_GP_PAYMENT B
, PS_GP_NET_DIST_DTL C
, PS_PYE_BANKACCT D
, PS_BANK_EC_TBL E
, PS_GP_PYE_PRC_STAT F
  WHERE B.CAL_ID      = A.CAL_ID
    AND B.GP_PAYGROUP = A.GP_PAYGROUP
    AND A.RUN_TYPE    = C.RUN_TYPE
    AND B.EMPLID      = C.EMPLID
    AND C.EMPLID      = D.EMPLID
    AND B.EMPL_RCD    = C.EMPL_RCD
    AND B.INSTANCE    = C.INSTANCE
    AND C.ACCOUNT_ID  = D.ACCOUNT_ID
    AND D.BANK_CD     = E.BANK_CD
    AND D.COUNTRY_CD  = E.COUNTRY_CD
    AND B.PMT_TYPE    = '01'
    AND B.PAYMENT_MTHD = 'T'
    AND F.EMPLID = B.EMPLID
    AND F.CAL_RUN_ID = B.CAL_RUN_ID
    AND F.EMPL_RCD = B.EMPL_RCD
    AND F.GP_PAYGROUP = B.GP_PAYGROUP
    AND F.CAL_ID = B.CAL_ID
    AND F.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
    AND C.EFFDT =(SELECT MAX(C1.EFFDT) FROM PS_GP_NET_DIST_DTL C1 WHERE C1.EMPLID = C.EMPLID
                      AND C1.EMPL_RCD = C.EMPL_RCD
                      AND C1.RUN_TYPE = C.RUN_TYPE
                      AND C1.INSTANCE = C.INSTANCE
              AND C1.EFFDT <= F.PRD_END_DT)
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID

end-select
end-procedure
!**************************************************************************
!
! Procedure: Get_Disburs_Nonbanked
!
! Description: Get and print the non banking disburment details for the payee.
!
!**************************************************************************
begin-procedure Get_Disburs_Nonbanked

begin-SELECT on-error=SQL-Error
PMNT.PAYMENT_MTHD    &PMNT_Mthd
SUM(PMNT.GP_PMT_AMT) &NetPayAmt

    If #Current-line >  75
       NEW-PAGE
       do Print_Heading
    End-if

    If $First_Disb = 'Y'
       do Print_Disb_headings
       let $First_Disb = 'N'
    end-if

    let #Paymnt_Amt = &NetPayAmt
    if #Paymnt_Amt <> 0
       Let $FieldName  = 'PAYMENT_MTHD'
       Let $FieldValue = &PMNT_Mthd

       Let $curr_language_cd = 'ENG'

       Do Read-Translate-Table
       Print $XlatLongName (+2,{ColA})
       print #Paymnt_Amt   (0, {ColN}) edit 999999999.99
    end-if

FROM PS_GP_PAYMENT PMNT
    WHERE PMNT.EMPLID      = $Emplid
      AND PMNT.EMPL_RCD    = #Empl_Rcd
      AND PMNT.CAL_RUN_ID  = $Cal_Run_ID
      AND PMNT.CAL_ID      = $Cal_ID
      AND PMNT.GP_PAYGROUP = $GP_Paygroup
      AND PMNT.PAYMENT_MTHD <> 'T'
      AND PMNT.PMT_TYPE    = '01'
GROUP BY PMNT.PAYMENT_MTHD
end-select
end-procedure

!**************************************************************************
!
! Procedure: Get_Messages
!
! Description: Get and print the messages for the payee.
!
!**************************************************************************
begin-procedure Get_Messages

        Let $First_Msg = 'Y'
        Let #Msg_Nbr = 0

begin-SELECT on-error=SQL-Error
B.GPHK_MSG_NBR
A.GPHK_MESSAGE

        If #Current-line > 75
           NEW-PAGE
           do Print_Heading
        End-if

        If $First_Msg = 'Y'
            print 'Messages' (+2) Bold CENTER
            Let #Mesg_StartLine = #Current-Line
            let $First_Msg = 'N'
        end-if

        let #Msg_Nbr = &B.GPHK_MSG_NBR
        let $Message = &A.GPHK_MESSAGE

        if #Msg_nbr <> 0
           print #Msg_Nbr (+1, {ColC}) EDIT '9999'
           print $Message (0, 25) Wrap {colK} 3
        end-if

FROM PS_GPHK_PSLP_MSG A
   , PS_GPHK_PSLP_RSLT B
WHERE A.CAL_RUN_ID = B.CAL_RUN_ID
    AND A.GPHK_MSG_NBR  = B.GPHK_MSG_NBR
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID
end-select
end-procedure

!**************************************************************************
!
! Procedure: Print_ED_Headings
!
! Description: Prints the section headings
!
!**************************************************************************
begin-procedure Print_ED_Headings

        print $Sect_Hdg (+3,) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold

        Do Find-Start-Pos ('Base', {colED3},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Percent', {colED5},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Percent' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Rate', {colED6},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Rate' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Units', {colED7},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Base', {colED11},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base ' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Unit', {colED12},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Unit' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Units', {colED13},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED14},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

end-procedure

!**************************************************************************
!
! Procedure: Print_Abs_headings
!
! Description: Print the absence data headings
!**************************************************************************

begin-procedure Print_Abs_headings

        print 'Leave Balances' (+3, {ColG}) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold
        print 'Entitlement' (0, {ColD}) Bold
        print 'Adjustment'  (0, {ColG}) Bold
        print 'Taken'       (0, {ColL2}) Bold
        print 'End Balance' (0, {ColN}) Bold

end-procedure
!
!**************************************************************************
!
! Procedure: Print_Disb_headings
!
! Description: Print the disbusment data headings
!**************************************************************************
begin-procedure Print_Disb_headings
        print 'Disbursment Details' (+3, {ColG}) Center Bold Underline

        print 'Bank' (+1, {ColA}) Bold
        print 'B.S.B' (0, {ColD}) Bold
        print 'Account #'  (0, {ColG}) Bold
        print 'Amount' (0, {ColN}) Bold

end-procedure
!
!**************************************************************************
! Procedure: Get_location
! Description: Get the location of the payee
!**************************************************************************
begin-procedure Get_location
begin-SELECT on-error=SQL-Error
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.STATE
A.POSTAL
A.COUNTY
A.COUNTRY

        if $Del_Opt = '30'

           let $Name     = $EmployeeName
           let $address1 = &A.ADDRESS1
           let $address2 = &A.ADDRESS2
           let $address3 = &A.ADDRESS3
           let $address4 = &A.ADDRESS4
           let $City     = rtrim(&A.CITY, ' ')
           let $State    = &A.STATE
           Let $County   = &A.COUNTY
           let $Country  = &A.COUNTRY
           let $Postal   = &A.POSTAL

           do adformat
           do Compress-Address
       end-if
       Let $LctnDesc = rtrim(&A.DESCR,' ')

FROM PS_LOCATION_TBL A
WHERE A.LOCATION = $Location
  AND A.SETID    = $SetIDLocn
  AND A.EFFDT    = (SELECT MAX(A1.EFFDT) FROM PS_LOCATION_TBL A1
                       WHERE A1.EFFDT <= $Pymt_Dt
                         AND A1.SETID = A.SETID
                         AND A1.LOCATION = A.LOCATION
                   )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get-PayEntity
! Description: Get the pay entity details
!**************************************************************************
begin-procedure Get-PayEntity
  Let $PayEntityDescr = ''
begin-SELECT on-error=SQL-Error
PYE.DESCR

  Let $PayEntityDescr = rtrim(&PYE.DESCR,' ')

FROM PS_GP_PYENT PYE
WHERE PYE.PAY_ENTITY = $Pay_Ent
END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Frequency
!
! Description: Get the frequency of the payee
!**************************************************************************
begin-procedure Get_Frequency

begin-SELECT on-error=SQL-Error
FREQ.DESCRSHORT

        let $freq_descr = &FREQ.DESCRSHORT
FROM PS_FREQUENCY_TBL FREQ
WHERE FREQUENCY_ID = $Comp_Freq
AND EFFDT = (SELECT MAX(EFFDT)
                FROM PS_FREQUENCY_TBL FREQ1
                WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID)
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure         : Check_Excl_Dept
! Description   : Check if the payee's department has been excluded
!**************************************************************************
begin-procedure Check_Excl_Dept
begin-SELECT on-error=SQL-Error
DEPT.SETID
DEPT.DEPTID
        let $dept_excl = 'Y'
   FROM PS_GPHK_PSLP_DEPT DEPT
   WHERE DEPTID = $Deptid
    AND  SETID  = $SetIDDept
    AND GPHK_PAYSLIP_ID = $Payslip_Id
    AND EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_GPHK_PSLP_DEPT DEPT1
                      WHERE DEPT1.DEPTID          = DEPT.DEPTID
                      AND DEPT1.SETID           = DEPT.SETID
                      AND DEPT1.GPHK_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure
!**************************************************************************
! Procedure         : Check_Excl_Loctn
! Description   : Check if the payee's location has been excluded
!**************************************************************************
begin-procedure Check_Excl_Loctn
begin-SELECT on-error=SQL-Error
LOCN.SETID
LOCN.LOCATION
        Let $locn_excl = 'Y'

   FROM PS_GPHK_PSLP_LOCTN LOCN
   WHERE LOCATION = $Location
     AND SETID = $SetIDLocn
     AND GPHK_PAYSLIP_ID = $Payslip_Id
     AND EFFDT = (SELECT MAX(LOCN1.EFFDT) FROM PS_GPHK_PSLP_LOCTN LOCN1
                      WHERE LOCN1.LOCATION     = LOCN.LOCATION
                      AND LOCN1.SETID        = LOCN.SETID
                      AND LOCN1.GPHK_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure


!**************************************************************************
! Procedure     : Get_Address
! Description   : Get the payee's address
!**************************************************************************
begin-procedure Get_Address
  Let $Adr2Found = 'N'
! Initialize the Address Line variables, to avoid wrong information being printed
  Let $ADDLINE1 = ''
  Let $ADDLINE2 = ''
  Let $ADDLINE3 = ''
  Let $ADDLINE31 = ''
  Let $ADDLINE4 = ''
  Let $ADDLINE5 = ''
  Let $ADDLINE6 = ''

  let $address1  = ''
  let $address2  = ''
  let $address3  = ''
  let $address4  = ''
  Let $County    = ''
  let $City      = ''
  let $StateCode = ''
  let $Country   = ''
  let $Postal    = ''

Begin-SELECT on-error=SQL-Error
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY
        Let $Adr2Found = 'Y'

        Let $Name     = $EmployeeName
        let $address1 = &ADR.ADDRESS1
        let $address2 = &ADR.ADDRESS2
        let $address3 = &ADR.ADDRESS3
        let $address4 = &ADR.ADDRESS4
        Let $County   = &ADR.COUNTY
        let $City     = rtrim(&ADR.CITY, ' ')
        let $State    = &ADR.STATE
        let $Country  = &ADR.COUNTRY
        let $Postal   = &ADR.POSTAL

        do adformat
        do Compress-Address

   FROM PS_ADDRESSES ADR
    WHERE ADR.EMPLID = $Emplid
      AND ADR.ADDRESS_TYPE = $AdrType
      AND ADR.EFFDT = (SELECT MAX(EFFDT) FROM PS_ADDRESSES ADR1
                          WHERE ADR1.EMPLID = ADR.EMPLID
                            AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE)
end-select
! If Address Entry wasn't found, populate $ADDLINE1 with EmployeeName.

   If $Adr2Found = 'N'
      Let $ADDLINE1 = $EmployeeName
   End-if

end-procedure
!**************************************************************************
! Procedure         : Check_Override_Add
! Description   : Check the existance of an override
!**************************************************************************
begin-procedure Check_Override_Add

Begin-SELECT on-error=SQL-Error
PAY.GPHK_DEL_OPT

        let $Del_Opt = &PAY.GPHK_DEL_OPT

FROM PS_GPHK_PAYEE_TBL PAY
WHERE EMPLID = $Emplid
AND EMPL_RCD = #Empl_Rcd
AND PAY.EFFDT = (SELECT MAX(PAY1.EFFDT)
                FROM PS_GPHK_PAYEE_TBL PAY1
                     WHERE PAY1.EMPLID = PAY.EMPLID
                       AND PAY1.EMPL_RCD = PAY.EMPL_RCD)
end-select
end-procedure
!
!**************************************************************************
! Procedure         : Get_Payslip_Id
! Description   : Get the payslip id based on the paygroup of payee
!**************************************************************************
begin-procedure Get_Payslip_Id

Begin-SELECT on-error=SQL-Error
ID.GPHK_PAYSLIP_ID

        let $Payslip_Id = &ID.GPHK_PAYSLIP_ID

  FROM PS_GPHK_PYGRP_PSLP ID

WHERE GP_PAYGROUP = $GP_Paygroup
  AND ID.EFFDT = (SELECT MAX(ID1.EFFDT)
                    FROM PS_GPHK_PYGRP_PSLP ID1
                      WHERE ID.GP_PAYGROUP = ID1.GP_PAYGROUP)
end-select
end-procedure
!**************************************************************************
! Procedure         : Get_Accum_Values
! Description   : Get the accumulated values for the payee
!**************************************************************************
begin-procedure Get_Accum_Values
Begin-SELECT on-error=SQL-Error
ACC.CALC_RSLT_VAL

        let #Calc_Rslt_Val = &ACC.CALC_RSLT_VAL

FROM PS_GP_RSLT_ACUM ACC
  WHERE ACC.EMPLID        = $Emplid
    AND ACC.EMPL_RCD      = #Empl_Rcd
    AND ACC.CAL_RUN_ID    = $Cal_Run_ID
    AND ACC.GP_PAYGROUP   = $GP_Paygroup
    AND ACC.CAL_ID        = $Cal_ID
    AND ACC.RSLT_SEG_NUM  = #Rslt_Seg_num
    AND ACC.PIN_NUM       = #Pin_Num
    AND ACC.EMPL_RCD_ACUM = ACC.EMPL_RCD
end-select
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Payment_Summ
!
! Description: Get and print the pay summary details for the payee.
!
!**************************************************************************
begin-procedure Get_Payment_Summ
begin-SELECT on-error=SQL-Error
C.GPHK_PIN_AC1_NUM                &GPHK_PIN_AC1_NUM
C.GPHK_PIN_AC2_NUM                &GPHK_PIN_AC2_NUM
C.GPHK_PIN_AC3_NUM                &GPHK_PIN_AC3_NUM
C.GPHK_PIN_AC4_NUM                &GPHK_PIN_AC4_NUM
C.GPHK_PIN_AC5_NUM                &GPHK_PIN_AC5_NUM
C.GPHK_PIN_AC6_NUM                &GPHK_PIN_AC6_NUM
C.DESCR                           &C.DESCR
C.SEQ_NUM
A.ORIG_CAL_RUN_ID                 &ORIG_CAL_ID
A.RUN_TYPE                        &RUN_TYP
A.PRD_BGN_DT                      &PRD_BGNDT
A.PRD_END_DT                      &PRD_ENDDT
        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC1_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val1 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC2_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val2 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC3_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val3 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC4_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val4 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC5_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val5 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPHK_PIN_AC6_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val6 = #Calc_Rslt_Val

        let $Pay_Summ_Desc  = &C.DESCR

        Let $ORIG_CAL_ID=&ORIG_CAL_ID
        Let $PRD_BGN_DT = &PRD_BGNDT
        Let $PRD_END_DT = &PRD_ENDDT
        if #Calc_Acum_Val1 <> 0 or
              #Calc_Acum_Val2 <> 0 or
              #Calc_Acum_Val3 <> 0 or
              #Calc_Acum_Val4 <> 0 or
              #Calc_Acum_Val5 <> 0 or
              #Calc_Acum_Val6 <> 0
           print $Pay_Summ_Desc (+1, {colA}) Bold
           if $Pay_Summ_Desc = 'Pay Period'
               Let #MP_GROSS = #Calc_Acum_Val1
               Let #MP_NET = #Calc_Acum_Val2
               Let $RUN_TYP = &RUN_TYP
           End-if
           if #Calc_Acum_Val1 <> 0
              print #Calc_Acum_Val1 (0, {colAC1})  edit '99999999.99'
           End-if
           if #Calc_Acum_Val2 <> 0
              print #Calc_Acum_Val2 (0, {colAC2})  edit '99999999.99'
           End-if
           if #Calc_Acum_Val3 <> 0
              print #Calc_Acum_Val3 (0, {colAC3})  edit '99999999.99'
           End-if
           if #Calc_Acum_Val4 <> 0
              print #Calc_Acum_Val4 (0, {colAC4})  edit '99999999.99'
           End-if
           if #Calc_Acum_Val5 <> 0
              print #Calc_Acum_Val5 (0, {colAC5})  edit '99999999.99'
           End-if
           if #Calc_Acum_Val6 <> 0
              print #Calc_Acum_Val6 (0, {colAC6})  edit '99999999.99'
           End-if
       End-if

FROM PS_GPHK_PSLP_ACUM C,
     PS_GPHK_PYGRP_PSLP D,
     PS_GP_PYE_SEG_STAT B,
     PS_GP_PYE_PRC_STAT A
WHERE C.GPHK_PAYSLIP_ID = D.GPHK_PAYSLIP_ID
  AND D.GP_PAYGROUP     = B.GP_PAYGROUP
  AND D.GPHK_PAYSLIP_ID = $payslip_id
  AND B.CAL_RUN_ID      = A.CAL_RUN_ID
  AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
  AND B.EMPLID          = A.EMPLID
  AND B.EMPL_RCD        = A.EMPL_RCD
  AND B.CAL_ID          = A.CAL_ID
  AND B.GP_PAYGROUP     = A.GP_PAYGROUP
  AND A.EMPLID          = $Emplid
  AND A.EMPL_RCD        = #Empl_Rcd
  AND A.CAL_RUN_ID      = $Cal_Run_ID
  AND A.CAL_ID          = $Cal_ID
  AND A.GP_PAYGROUP     = $GP_Paygroup
  AND B.RSLT_SEG_NUM    = #Rslt_Seg_num
  AND B.RSLT_REV_NUM = (SELECT MAX (SEG1.RSLT_REV_NUM)
                             FROM PS_GP_PYE_SEG_STAT SEG1
                              WHERE B.EMPLID       = SEG1.EMPLID
                                AND B.CAL_RUN_ID   = SEG1.CAL_RUN_ID
                                AND B.EMPL_RCD     = SEG1.EMPL_RCD
                                AND B.GP_PAYGROUP  = SEG1.GP_PAYGROUP
                                AND B.CAL_ID       = SEG1.CAL_ID
                                AND B.RSLT_SEG_NUM = SEG1.RSLT_SEG_NUM)
  AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_GPHK_PSLP_ACUM C1
                          WHERE C1.GPHK_PAYSLIP_ID = C.GPHK_PAYSLIP_ID
                            AND C1.EFFDT <=$Pymt_Dt)
ORDER BY C.SEQ_NUM
end-select

!  graphic (+2,{colAC1}, {colAC6}) Horz-line

end-procedure
!
!**************************************************************************
!
! Procedure: Delete-RunControl
!
! Description: Delete run control when report comes to successful end.
!
!**************************************************************************
begin-procedure Delete-RunControl
#ifdef debugy
        show 'Inside procedure Delete-RunControl'
#end-if
begin-SQL
DELETE FROM PS_GPHK_RNCTL_PSLP
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPHK_PSLP_DP_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPHK_PSLP_LC_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPHK_PSLP_PE_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPHK_PSLP_PG_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPHK_PSLP_PY_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
end-procedure
!
!**************************************************************************
! Procedure: Process-Empl-List
!            Process Employees selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Empl-List
Begin-SELECT
APY1.EMPLID    &Emplid
APY1.EMPL_RCD  &EmplRcd
   If rtrim(&Emplid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $EmplRcd = edit(&EmplRcd,'999')
     Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &Emplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd
     Show 'Processing Emplid : ' &Emplid

     Do Process-Payee
  End-If
  FROM PS_GPHK_PSLP_PY_RC APY1
    WHERE APY1.OPRID          = $Prcs_OprID
    AND   APY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Dept-List
!            Process Departments selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Dept-List
Begin-SELECT
BPY1.SETID   &Setid
BPY1.DEPTID  &Deptid
   If rtrim(&Deptid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND JOB.SETID_DEPT = ' || '''' || &Setid || '''' || ' AND JOB.DEPTID = ' || '''' || &Deptid || ''''
     Show 'Processing DEPTID : ' &Deptid
     Do Process-Payee
   End-If
    FROM PS_GPHK_PSLP_DP_RC BPY1

    WHERE BPY1.OPRID          = $Prcs_OprID
    AND   BPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Locn-List
!            Process Locations selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Locn-List
Begin-SELECT
CPY1.SETID    &SetId1
CPY1.LOCATION &Location
   If rtrim(&Location, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND JOB.SETID_LOCATION = ' || '''' || &Setid1 || '''' || ' AND JOB.LOCATION = ' || '''' || &Location || ''''
     Show 'Processing Location : ' &Location
     Do Process-Payee
   End-If
    FROM PS_GPHK_PSLP_LC_RC CPY1
    WHERE CPY1.OPRID          = $Prcs_OprID
    AND   CPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Pay Entity List
!            Process Pay Entity selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Pay-Entity-List

Begin-SELECT

DPY1.PAY_ENTITY &PayEntity
 display 'In Process-Pay-Entity-List SQL'

   Let $WhereClause = ''

   If rtrim(&PayEntity, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ' AND PER.PAY_ENTITY = ' || '''' || &PayEntity || ''''
     Do Process-Payee
   End-If
    FROM PS_GPHK_PSLP_PE_RC DPY1
    WHERE DPY1.OPRID          = $Prcs_OprID
    AND   DPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Paygroup List
!            Process Paygroup selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-PayGroup-List
Begin-SELECT
EPY1.GP_PAYGROUP &PayGrp

   If rtrim(&PayGrp, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND PER.GP_PAYGROUP = ' || '''' || &PayGrp || ''''
     Show 'Processing Paygroup : ' &PayGrp
     Do Process-Payee
    End-If
    FROM PS_GPHK_PSLP_PG_RC EPY1
    WHERE EPY1.OPRID          = $Prcs_OprID
    AND   EPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-GP-Paygroup
!            Get the GP Paygroup if none of the lists has been chosen.
!**************************************************************************
Begin-procedure Get-GP-Paygroup

 Create-Array Name=Gp_Paygroups Size=10
 Field=Gp_Paygroup:Char
 Let #I = 1

Begin-SELECT
DTL.GP_PAYGROUP
DTL.CAL_ID

  Let $GP_Pygrp = ''
  Let $Payroll_CalID = ''

  Let $Payroll_CalID = &DTL.CAL_ID
  Let $GP_Pygrp   = &DTL.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_DTL DTL
WHERE DTL.CAL_RUN_ID = $Cal_Run_ID
AND CALC_TYPE = 'P'
End-SELECT
Begin-SELECT
DTLA.GP_PAYGROUP
' '

  Let $GP_Pygrp   = &DTLA.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_OFF DTLA
WHERE DTLA.CAL_RUN_ID = $Cal_Run_ID
End-SELECT


End-procedure
!
!**************************************************************************
! Procedure: Select-Parameters
!            Select-Parameters
!**************************************************************************
Begin-procedure Select-Parameters
begin-select

RC.CAL_RUN_ID
RC.GPHK_SORT_KEY1
RC.GPHK_SORT_KEY2
RC.GPHK_SORT_KEY3

FROM  PS_GPHK_RNCTL_PSLP RC
WHERE RC.OPRID          = $Prcs_OprID
AND   RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

  ! do check-mob-custom-enabled
  let $Cal_Run_ID       = RTRIM(&RC.CAL_RUN_ID, ' ')
 ! if( $custEnabled = 'Y')  
      do  init-mpslp($Cal_Run_ID)
      LET $GPwhere_clause = ' '
      do clean_mpslp_records ($Cal_Run_ID, $GPwhere_clause)
 ! End-If
  
  let $sort_key1        = &RC.GPHK_SORT_KEY1
  let $sort_key2        = &RC.GPHK_SORT_KEY2
  let $sort_key3        = &RC.GPHK_SORT_KEY3

end-procedure
!
!**************************************************************************
! Procedure: check-mob-custom-enabled
!            check-mob-custom-enabled
!**************************************************************************
begin-procedure check-mob-custom-enabled

begin-select
GP_SS_MPSLP_DATA    &MbPslpOpt

FROM PS_GP_SS_PSLP_OPT
WHERE COUNTRY = 'HKG'
AND GP_PSLP_HDCPYOPTN = 'Y'
AND GP_SS_MPSLP_ENABLE = 'Y'
end-select

   if &MbPslpOpt = 'CUST'
     let $custEnabled = 'Y'
   else
     let $custEnabled = 'N'
   end-if

end-procedure !check-mob-custom-enabled

!
!**************************************************************************
! Procedure: Print-MPF-Section
!            Print-MPF-Section
!**************************************************************************
Begin-procedure Print-MPF-Section
! Since the Employer Mandatory contribution starts from day 1 of the employee, we will search for a row by referencing
! the appropriate pin code.
  if #Current-Line > 79
     new-page
  end-if
begin-SELECT
MPF1.EMPLID
MPF1.CAL_RUN_ID
MPF1.EMPL_RCD
MPF1.GP_PAYGROUP
MPF1.CAL_ID
MPF1.RSLT_SEG_NUM
MPF1.PIN_CODE
MPF1.GPHK_PERIOD_TYPE  &MPF_PeriodType
MPF1.START_DT
MPF1.END_DATE
MPF1.AMOUNT
MPF1.GPHK_BASE_AMOUNT
MPF1.GPHK_TRUSTEE_DATE

        Let $Latest1EndDate   = &MPF1.END_DATE
        Let $Latest1StartDate = &MPF1.START_DT
        Let $Latest1TrustDate= &MPF1.GPHK_TRUSTEE_DATE

        if rtrim($Latest1StartDate,' ') <> ''
           Do Format-DateTime($Latest1StartDate,$Prn_MPF1_StartDt, {DEFDATE},'','')
        end-if

        if rtrim($Latest1EndDate,' ') <> ''
           Do Format-DateTime($Latest1EndDate,$Prn_MPF1_EndDt, {DEFDATE},'','')
        end-if

        Let #MPF_PeriodType  = to_number(&MPF_PeriodType)

        Evaluate #MPF_PeriodType
           when < 100
                  ! When the Period Type < 100, we don't report the MPF details on the payslip, since this is
                  ! considered to be below 60 day period.
           when = 100
                  ! When the period type = 100, it is the 60 day period, we therefore have to find the earliest
                  ! period when the contribution was 1st made. That row will provide us the start date.
                  Do Get-MPF-Start-Period
           when > 100
                  ! when the period type > 100, it is regular contribution, we simply report the contribution made
                  ! in that period.
                  Do Get-EE-MPF-Section

                  print 'MPF Details'  (+2) Center Bold Underline
                  graphic (0, 7, 113) box 9 {box_shade}

                  print 'Begin Date'   (+1,60)
                  print 'End Date'     (0,75)
                  Print 'Base Amount'  (0,100)
                  Print 'Mandatory Contribution made by Employer ' (+2,8)


                  DO EMPLR_MPF_BASE_VAL



                  if rtrim($ER_MPFStartDt1,' ') <> ''
                     print $ER_MPFStartDt1  (0,60) !edit 'DD/MM/YYYY'
                  end-if

                  if rtrim($ER_MPFEndDt1,' ') <> ''
                     print $ER_MPFEndDt1  (0,75) !edit 'DD/MM/YYYY'
                  end-if
                  print #ER_Base_Rslt_Val (0,100) edit '$$$$$$$9.99'

                  Print 'Mandatory Contribution made by Employee ' (+2,8)


                  DO EMPL_MPF_BASE_VAL

                  if rtrim($EE_MPFStartDt1,' ') <> ''
                     Print $EE_MPFStartDt1 (0,60) !edit 'DD/MM/YYYY'
                  end-if
                  if rtrim($EE_MPFEndDt1,' ') <> ''
                     Print $EE_MPFEndDt1 (0,75) !edit 'DD/MM/YYYY'
                  end-if
                  print #EE_Base_Rslt_Val (0,100) edit '$$$$$$$9.99'

                  Print 'Date When Amount Paid to Trustee '        (+2,8)

                  if rtrim($Latest1TrustDate,' ') <> ''
                     print $Latest1TrustDate  (0,60) !edit 'DD/MM/YYYY'
                  end-if

        End-Evaluate
   FROM PS_GPHK_MPF_RSLT MPF1
    WHERE MPF1.EMPLID      = $Emplid
      AND MPF1.CAL_RUN_ID  = $Cal_Run_ID
      AND MPF1.EMPL_RCD    = #Empl_Rcd
      AND MPF1.GP_PAYGROUP = $GP_Paygroup
      AND MPF1.CAL_ID      = $Cal_ID
      AND MPF1.PIN_CODE    = 'ERMPFMN1 HKG'
      AND MPF1.RSLT_SEG_NUM = #Rslt_Seg_num
END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-MPF-Start-Period
!            Get-MPF-Start-Period
! This section is called when the period type for the processing calendar = 100
!**************************************************************************
Begin-procedure Get-MPF-Start-Period

BEGIN-SELECT
MPF2.CAL_RUN_ID
MPF2.GP_PAYGROUP
MPF2.CAL_ID
MPF2.START_DT
MPF2.END_DATE
MPF2.AMOUNT
MPF2.GPHK_BASE_AMOUNT
MPF2.GPHK_PERIOD_TYPE

     Let $Latest2EndDate   = &MPF2.END_DATE
     Let $Latest2StartDate = &MPF2.START_DT

     Let #ERBaseAmt = 0
     Let #EEBaseAmt = 0

     Do Get-EE-MPF-Start-Period
     Do Get-EE-MPF-Section

     Let #ERBaseAmt = &MPF2.GPHK_BASE_AMOUNT
     Let #EEBaseAmt = #EE_MPFBase

     if rtrim($Latest2StartDate,' ') <> ''
        Do Format-DateTime($Latest2StartDate,$Prn_MPF2_StartDt, {DEFDATE},'','')
     end-if

     if rtrim($Latest2EndDate,' ') <> ''
        Do Format-DateTime($Latest2EndDate,$Prn_MPF2_EndDt, {DEFDATE},'','')
     end-if


     if rtrim($EE_EarliestPeriod,' ') <> ''
        Do Get-Base-Amounts
     end-if

     print 'MPF Details'  (+2) Center Bold Underline
     graphic (0, 7, 113) box 9 {box_shade}

     print 'Begin Date'   (+1,60)
     print 'End Date'     (0,75)
     Print 'Base Amount'  (0,100)
     Print 'Mandatory Contribution made by Employer ' (+2,8)

     if rtrim($Prn_MPF2_StartDt,' ') <> ''
        print $Prn_MPF2_StartDt  (0,60) !edit 'DD/MM/YYYY'
     end-if
     if rtrim($Prn_MPF2_EndDt,' ') <> ''
        print $Prn_MPF2_EndDt  (0,75) !edit 'DD/MM/YYYY'
     end-if

     print #ERBaseAmt (0,100) edit '$$$$$$$9.99'

     Print 'Mandatory Contribution made by Employee ' (+2,8)
     ! if rtrim($EE_EarliestPeriod,' ') <> ''
     !   print $EE_EarliestPeriod      (0,60) !edit 'DD/MM/YYYY'
     ! End-if


     if rtrim($EE_MPFStartDt,' ') <> ''
        Print $EE_MPFStartDt (0,60) !edit 'DD/MM/YYYY'
     end-if

     if rtrim($EE_MPFEndDt,' ') <> ''
        Print $EE_MPFEndDt (0,75) !edit 'DD/MM/YYYY'
     End-if

     print #EEBaseAmt (0,100) edit '$$$$$$$9.99'

     Print 'Date When Amount Paid to Trustee '        (+2,8)

     if rtrim($Latest1TrustDate,' ') <> '' 
       print $Latest1TrustDate  (0,60) !edit 'DD/MM/YYYY'
     end-if
     
   FROM PS_GPHK_MPF_RSLT MPF2
    WHERE MPF2.EMPLID      = $Emplid
      AND MPF2.EMPL_RCD    = #Empl_Rcd
      AND MPF2.PIN_CODE    = 'ERMPFMN1 HKG'
      AND MPF2.GPHK_PERIOD_TYPE = (SELECT MAX(A1.GPHK_PERIOD_TYPE)
                                     FROM PS_GPHK_MPF_RSLT A1
                                     WHERE A1.PIN_CODE = MPF2.PIN_CODE
                                       AND A1.EMPLID   = MPF2.EMPLID
                                       AND A1.EMPL_RCD = MPF2.EMPL_RCD
                                       AND A1.GPHK_PERIOD_TYPE <= '100'
                             )
      AND MPF2.START_DT = (SELECT MIN(A2.START_DT)
                           FROM PS_GPHK_MPF_RSLT A2
                              WHERE A2.PIN_CODE = MPF2.PIN_CODE
                                AND A2.EMPLID   = MPF2.EMPLID
                                AND A2.EMPL_RCD = MPF2.EMPL_RCD
                                AND A2.GPHK_PERIOD_TYPE = MPF2.GPHK_PERIOD_TYPE
                       )
      AND MPF2.RSLT_SEG_NUM = #Rslt_Seg_num
END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-EE-MPF-Section
!            Get-EE-MPF-Section
!**************************************************************************
Begin-procedure Get-EE-MPF-Section
   Let $EE_MPFStartDt = ''
   Let $EE_MPFEndDt = ''
   Let #EE_MPFBase = 0
begin-SELECT
MPF3.GPHK_PERIOD_TYPE
MPF3.START_DT
MPF3.END_DATE
MPF3.AMOUNT
MPF3.GPHK_BASE_AMOUNT

   Let $EE_MPFStartDt = &MPF3.START_DT
   Let $EE_MPFEndDt   = &MPF3.END_DATE
   Let #EE_MPFBase    = &MPF3.GPHK_BASE_AMOUNT

   if rtrim($EE_MPFStartDt,' ') <> ''
      Do Format-DateTime($EE_MPFStartDt,$EE_MPFStartDt, {DEFDATE},'','')
   End-If

   if rtrim($EE_MPFEndDt,' ') <> ''
      Do Format-DateTime($EE_MPFEndDt,$EE_MPFEndDt, {DEFDATE},'','')
   End-If

   FROM PS_GPHK_MPF_RSLT MPF3
    WHERE MPF3.EMPLID      = $Emplid
      AND MPF3.CAL_RUN_ID  = $Cal_Run_ID
      AND MPF3.EMPL_RCD    = #Empl_Rcd
      AND MPF3.GP_PAYGROUP = $GP_Paygroup
      AND MPF3.CAL_ID      = $Cal_ID
      AND MPF3.PIN_CODE    = 'EEMPFMN1 HKG'
      AND MPF3.RSLT_SEG_NUM = #Rslt_Seg_num
END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-EE-MPF-Start-Period
!            Get-EE-MPF-Start-Period
!**************************************************************************
Begin-procedure Get-EE-MPF-Start-Period
   Let $EE_EarliestPeriod = ''
   Let $EE_EarliestEndPeriod = ''
   Let $EE_EarliestCalRunID = ''
   Let $EE_EarliestCalID = ''
   Let $EE_EarliestPayGroup = ''
BEGIN-SELECT
MPF5.CAL_RUN_ID
MPF5.GP_PAYGROUP
MPF5.CAL_ID
MPF5.START_DT
MPF5.END_DATE
MPF5.AMOUNT
MPF5.GPHK_BASE_AMOUNT

     Let $EE_EarliestPeriod   = &MPF5.START_DT
     Let $EE_EarliestCalRunID = &MPF5.CAL_RUN_ID
     Let $EE_EarliestCalID    = &MPF5.CAL_ID
     Let $EE_EarliestPayGroup = &MPF5.GP_PAYGROUP

     if rtrim($EE_EarliestPeriod,' ') <> ''
        Do Format-DateTime($EE_EarliestPeriod,$EE_EarliestPeriod, {DEFDATE},'','')
     End-if

   FROM PS_GPHK_MPF_RSLT MPF5
    WHERE MPF5.EMPLID      = $Emplid
      AND MPF5.EMPL_RCD    = #Empl_Rcd
      AND MPF5.PIN_CODE    = 'EEMPFMN1 HKG'
      AND MPF5.GPHK_PERIOD_TYPE = (SELECT MAX(A1.GPHK_PERIOD_TYPE)
                                     FROM PS_GPHK_MPF_RSLT A1
                                     WHERE A1.PIN_CODE = MPF5.PIN_CODE
                                       AND A1.EMPLID   = MPF5.EMPLID
                                       AND A1.EMPL_RCD = MPF5.EMPL_RCD
                                       AND A1.GPHK_PERIOD_TYPE < '100'
                             )
      AND MPF5.START_DT = (SELECT MIN(A2.START_DT)
                           FROM PS_GPHK_MPF_RSLT A2
                              WHERE A2.PIN_CODE = MPF5.PIN_CODE
                                AND A2.EMPLID   = MPF5.EMPLID
                                AND A2.EMPL_RCD = MPF5.EMPL_RCD
                                AND A2.GPHK_PERIOD_TYPE = MPF5.GPHK_PERIOD_TYPE
                       )
      AND MPF5.RSLT_SEG_NUM = #Rslt_Seg_num
END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-Base-Amounts
!            Get-Base-Amounts
!**************************************************************************
Begin-Procedure Get-Base-Amounts
  Let #ERBaseAmt = 0
  Let #EEBaseAmt = 0
Begin-SELECT DISTINCT
MPF4.EMPLID
MPF4.EMPL_RCD
MPF4.PIN_CODE
MPF4.GPHK_BASE_AMOUNT
MPF4.START_DT


      if rtrim(&MPF4.PIN_CODE,' ') = 'EEMPFMN1 HKG'
         Let #EEBaseAmt = #EEBaseAmt + &MPF4.GPHK_BASE_AMOUNT
      end-if

      if rtrim(&MPF4.PIN_CODE,' ') = 'ERMPFMN1 HKG'
         Let #ERBaseAmt = #ERBaseAmt + &MPF4.GPHK_BASE_AMOUNT
      end-if

 FROM PS_GPHK_MPF_RSLT MPF4
      WHERE MPF4.EMPLID   = $Emplid
        AND MPF4.EMPL_RCD = #EmplRcd
        AND MPF4.START_DT BETWEEN $EE_EarliestPeriod AND $LatestStartDate
        AND MPF4.RSLT_SEG_NUM = #Rslt_Seg_num
ORDER BY MPF4.EMPLID, MPF4.EMPL_RCD, MPF4.PIN_CODE, MPF4.GPHK_BASE_AMOUNT, MPF4.START_DT
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-JOB-JOBTitle-Details
!            Get the JOB Code title
!**************************************************************************
Begin-procedure Get-JOB-JOBTitle-Details
  Let $JobTitle = ''
Begin-SELECT
JDD3.DESCR

     Let $JobTitle = &JDD3.DESCR

  FROM PS_JOBCODE_TBL JDD3
    WHERE JDD3.SETID = $SetIDJobCode
      AND JDD3.JOBCODE = $JobCode
      AND JDD3.EFFDT = (SELECT MAX(JDD31.EFFDT) FROM PS_JOBCODE_TBL JDD31
                             WHERE JDD3.SETID = JDD31.SETID
                               AND JDD3.JOBCODE = JDD31.JOBCODE
                               AND JDD31.EFFDT <= $PYMT_DT)
End-SELECT
End-Procedure
!
!************************************************************************
!************************************************************************
! Routines and code below have been added to enable ePay Implementation *
!************************************************************************
!************************************************************************
!
begin-Procedure Get-NetAmountValue
   Let #NetPayAccumulatorValue = 0
Begin-SELECT !on-error=SQL-Error
SUM(ENP.PIN_NET_VAL) &NetPayVal

    Let #NetPayAccumulatorValue = &NetPayVal

  FROM PS_GP_PYE_SEG_STAT ENP
   WHERE ENP.EMPLID         = $Emplid
     AND ENP.EMPL_RCD       = #Empl_Rcd
     AND ENP.CAL_RUN_ID     = $Cal_Run_ID
     AND ENP.CAL_ID         = $Cal_ID
     AND ENP.GP_PAYGROUP    = $GP_Paygroup
End-SELECT
End-Procedure
!
!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init
   let $sql-statement = 'GPHKPY01.sqr, GP-ePay-Init '

  Do Check-ePay-installed ($ePay_Installed)

    If $ePay_Installed = 'Y'
     Move 'GPHKPY01' to $ReportID

      let #eV4 =  To_number($prcs_process_instance)

      !* have the Output Working Directory from the Process parameters table
      do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

      !* have the URL id from the Payslip option table
      do Get-ePay-URLid ('HKG', $eV18)

      !* Global ePay variable settings used in GP-ePay procedures in this SQR
      let $eV1 = $prcs_oprid
      let $eV2 = $prcs_run_cntl_id
      let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

      ! Open the file for writing epay control data
      ! Let $GP_PSLP_CTLFILE   = $eV3 || '.txt'
      ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
      ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GP_PSLP_CTLFILE)

      ! when we do not pass a control file
       Let $GP_PSLP_CTLFILE = ' '
       Let $FILELAYOUT = ' '

    End-If

end-procedure !GP-ePay-Init

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************

begin-procedure GP-ePay-Guide

   let $sql-statement = 'GPHKPY01.sqr,GP-ePay-Guide'

 If $ePay_Installed = 'Y'

   ! HKG Payslip does not exclude by run type. We can ignore this procedure

   !do Get-RUN-TYPE  ! not an ePay procedure

   let $eV5  = rtrim($Emplid, ' ')
   let $eV5  = ltrim($eV5, ' ')
   let $eV6  = rtrim($Cal_Run_ID,' ')
   let $eV6  = ltrim($eV6,' ')
   let $eV7  = 'GPHKG'
   let $eV8  = $strEmplRcd || ' ' || $Pay_Dt_To_Conv      ! gp epay payslip id
   !let $eV8  = rtrim($CAL_run_ID, ' ') || '_' || $eV5 || '_' || $strEmplRcd        ! gp epay payslip id
   let $eV9  = $pymt_dt
   let $eV10 = $Pay_Pd_To_Dt
   let $eV11 = $SegBgnDt
   ! Perform routine to retrieve the NetPay amount based on Net pay pin number
   Do Get-NetAmountValue
   let #eV12 = #NetPayAccumulatorValue ! net pay

   let $eV13 = $PayEntityDescr   ! HKG will populate the Pay Entity Name in the Description column.

   let $eV14 = rtrim($RUN_TYP, ' ')
   !let $eV14 = ' ' ! we are not populating the run type
   let $eV15 = 'ORIG' ! payslip status ORIGINAL
   let $eV16 = $eV5 || '_' || $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'       !sysfilename of the payslip pdf
   let $eV17 = $eV16                                                           !userfilename  - what the payee sees filename as
   let #eV19 = #BeginPageNumber                                                !begin page number of payslip in output report
   let #eV20 = #EndPageNumber                                                  !end page number of payslip in output report

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR
    !if $singleOccurance_emplid <> $multiOccurance_emplid
    !  let $multiOccurance_emplid = $singleOccurance_emplid
    !else
    if ($segFlag='N')
      let $ev8 = $Pay_Dt_To_Conv || '_' || $GP_Paygroup || '_' || $strEmplRcd || '_' || to_char(#Rslt_Seg_num)
    end-if


    do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

!   do Write-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If

end-procedure ! GP-ePay-Guide

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control

let $sql-statement = 'GPHKPY01.sqr,GP-ePay-Control '

 If $ePay_Installed = 'Y'
   Let $rptid = lower($ReportID)
   let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'
   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GP_PSLP_CTLFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')

 End-If

end-procedure !GP-ePay-Control


!
!***************************************************************
! employer MPF Base value
!***************************************************************

Begin-Procedure EMPLR_MPF_BASE_VAL
   Let #ER_Base_Rslt_Val = 0
   Let $ER_MPFStartDt1 = ' '
   Let $ER_MPFEndDt1   = ' '
begin-SELECT
RSLTER.BASE_RSLT_VAL
RSLTER.SLICE_BGN_DT
RSLTER.SLICE_END_DT

   Let #ER_Base_Rslt_Val = &RSLTER.BASE_RSLT_VAL
   Let $ER_MPFStartDt1 = &RSLTER.SLICE_BGN_DT
   Let $ER_MPFEndDt1   = &RSLTER.SLICE_END_DT

   if rtrim($ER_MPFStartDt1,' ') <> ''
      Do Format-DateTime($ER_MPFStartDt1,$ER_MPFStartDt1, {DEFDATE},'','')
   End-If

   if rtrim($ER_MPFEndDt1,' ') <> ''
      Do Format-DateTime($ER_MPFEndDt1,$ER_MPFEndDt1, {DEFDATE},'','')
   End-If


FROM PS_GP_RSLT_ERN_DED RSLTER
   ,PS_GP_PIN  PNC
   ,PS_GP_PYE_PRC_STAT PRC
WHERE PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLTER.EMPLID        = PRC.EMPLID
  AND RSLTER.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLTER.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLTER.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
  AND RSLTER.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLTER.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
  AND RSLTER.RSLT_SEG_NUM  = #Rslt_Seg_num
  AND RSLTER.PIN_NUM       = PNC.PIN_NUM
  AND PNC.PIN_CODE = 'ERMPFMN1 HKG'
end-select
end-procedure

!******************************************************************
! employee MPF Base value
!******************************************************************

Begin-Procedure EMPL_MPF_BASE_VAL
   Let #EE_Base_Rslt_Val = 0
   Let $EE_MPFStartDt1 = ' '
   Let $EE_MPFEndDt1   = ' '
begin-SELECT
RSLTEE.BASE_RSLT_VAL
RSLTEE.SLICE_BGN_DT
RSLTEE.SLICE_END_DT

   Let #EE_Base_Rslt_Val = &RSLTEE.BASE_RSLT_VAL
   Let $EE_MPFStartDt1 = &RSLTEE.SLICE_BGN_DT
   Let $EE_MPFEndDt1   = &RSLTEE.SLICE_END_DT

   if rtrim($EE_MPFStartDt1,' ') <> ''
      Do Format-DateTime($EE_MPFStartDt1,$EE_MPFStartDt1, {DEFDATE},'','')
   End-If

   if rtrim($EE_MPFEndDt1,' ') <> ''
      Do Format-DateTime($EE_MPFEndDt1,$EE_MPFEndDt1, {DEFDATE},'','')
   End-If



FROM PS_GP_RSLT_ERN_DED RSLTEE
     ,PS_GP_PIN  PNC
     ,PS_GP_PYE_PRC_STAT PRC
WHERE PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLTEE.EMPLID        = PRC.EMPLID
  AND RSLTEE.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLTEE.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLTEE.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
  AND RSLTEE.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLTEE.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
  AND RSLTEE.RSLT_SEG_NUM  = #Rslt_Seg_num
  AND RSLTEE.PIN_NUM       = PNC.PIN_NUM
  AND PNC.PIN_CODE = 'EEMPFMN1 HKG'
end-select
end-procedure

!*****************************************************************
!**************************************************************
!
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Routines to format address
#Include 'readxlat.sqc'  !Routines for Translate Table
#Include 'sqrtrans.sqc'  !Routines for Strings Table
!ePay Implementation Changes begins here
#Include 'gpsspslp.sqc'     ! ePay SQC with ePay procedures
!ePay Implementation Changes ends here
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
