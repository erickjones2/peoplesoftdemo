!-----------------------------------------------------------------------
! Report Name: STFS007.SQR - FAS 123 Option Expense Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:52:03                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!
!-----------------------------------------------------------------------
! Program Descr: This report prints the valuation detail created during
!                the grant valuation process.
! Adding functionalities around Retirement Eligibility
!-----------------------------------------------------------------------
! Options:       None
! Tables:        ST_STFS007_TAO
!                ST_GRANT
!                ST_GRANT_VALUE
!                ST_GRNT_VST_DTL
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Main-Process
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all procedures for
!          printing the optional heading
!-----------------------------------------------------------------------
Begin-Heading 09

  #Include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)
  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center

  print $GroupIdLbl                                        (+1,001,008)
  print ':'                                                (  ,   ,001)
  print $GroupId                                           (  , +3,010)
  print $ExpenseTypeXlat                                   (  ,   ,   ) center

  print $EstimateLbl                                       (+1,001,008)
  print $ForfeitRateLbl                                    (  ,0010,015)
  print ':'                                                (  ,   ,001)
  move #ForfeitureRate to $Rate 99.999
  let $XlatForfeiture = $ForfeitureTypeXlat || ' - ' || $Rate || '%'

  print $XlatForfeiture                                    (  , +2,   )
  print $AccountDistribXlat                                (  ,   ,   ) center

  print $CancelDtLbl                                       (+2,075,011)
  print $FutureLbl                                         (  ,143,006) bold
  print $CurrentLbl                                        (  ,163,007) bold

  print $GrantNbrLbl                                       (+1,001,012)
  print $ExpectedLbl                                       (  ,039,011)
  print $ValuationLbl                                      (  ,062,009)
  print $ReasonLbl                                         (  ,080,006)
  print $TotalNetLbl                                       (  ,119,009)
  print $UnamortizedLbl                                    (  ,138,011)
  print $PeriodLbl                                         (  ,164,006)

  print $GrantDtLbl                                        (+1,001,012)
  print $SharesLbl                                         (  ,025,006)
  print $VestLbl                                           (  ,046,004)
  print $RepriceGNbrLbl                                    (  ,075,011)
  print $ExpenseLbl                                        (  ,064,007)

  print $AdjustmentLbl                                     (  ,097,010)
  print $ExpenseLbl                                        (  ,121,007)
  print $ExpenseLbl                                        (  ,142,007)
  print $ExpenseLbl                                        (  ,163,014)

  print '-'                                                (+1,001,177) fill bold

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STFS007'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''

  else
    do Get-SQR-Parms
  end-if

  do Init-Variables

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',  'STOCK_ID',      $StockIdLbl,    #DW)
  do Get_Field_Information ('STOCK',  'GRANT',         $GrantLbl,      #DW)
  do Get_Field_Information ('STOCK',  'GRANT_NBR',     $GrantNbrLbl,   #DW)
  do Get_Field_Information ('STOCK',  'GRANT_DT',      $GrantDtLbl,    #DW)
  do Get_Field_Information ('STOCK',  'SHARES',        $SharesLbl,     #DW)
  do Get_Field_Information ('STOCK',  'FROM',          $FromLbl,       #DW)
  do Get_Field_Information ('STOCK',  'THRU',          $ThruLbl,       #DW)
  do Get_Field_Information ('STOCK',  'TOTAL',         $TotalLbl,      #DW)
  do Get_Field_Information ('STOCK',  'ESTIMATE',      $EstimateLbl,   #DW)
  do Get_Field_Information ('STFS007','REPORT_TITLE',  $ReportTitle,   #DW)
  do Get_Field_Information ('STFS007','VALUATION',     $ValuationLbl,  #DW)
  do Get_Field_Information ('STFS007','EXPENSE',       $ExpenseLbl,    #DW)
  do Get_Field_Information ('STFS007','ADJUSTMENT',    $AdjustmentLbl, #DW)
  do Get_Field_Information ('STFS007','CANCEL_DT',     $CancelDtLbl,   #DW)
  do Get_Field_Information ('STFS007','REASON',        $ReasonLbl,     #DW)
  do Get_Field_Information ('STFS007','TOTAL_NET',     $TotalNetLbl,   #DW)
  do Get_Field_Information ('STFS007','AMORTIZED',     $AmortizedLbl,  #DW)
  do Get_Field_Information ('STFS007','UNAMORTIZED',   $UnamortizedLbl,#DW)
  do Get_Field_Information ('STFS007','CURRENT',       $CurrentLbl,    #DW)
  do Get_Field_Information ('STFS007','PRIOR',         $PriorLbl,      #DW)
  do Get_Field_Information ('STFS007','FUTURE',        $FutureLbl,     #DW)
  do Get_Field_Information ('STFS007','PERIOD',        $PeriodLbl,     #DW)
  do Get_Field_Information ('STFS007','NQ_TAX',        $NqTaxLbl,      #DW)
  do Get_Field_Information ('STFS007','EXPENSE_TYPE',  $ExpenseTypeLbl,#DW)
  do Get_Field_Information ('STFS007','FORFEIT_RATE',  $ForfeitRateLbl,#DW)
  do Get_Field_Information ('STFS007','FORFEIT_TYPE',  $ForfeitTypeLbl,#DW)
  do Get_Field_Information ('STFS007','VALUE_METHOD',  $ValueMethodLbl,#DW)
  do Get_Field_Information ('STFS007','ACCOUNT_DIST',  $AccountDistLbl,#DW)
  do Get_Field_Information ('STFS007','GROUP_ID',      $GroupIdLbl,    #DW)
  do Get_Field_Information ('STFS007','ACTUAL',        $ActualLbl,     #DW)
  do Get_Field_Information ('STFS007','PROFORMA',      $ProformaLbl,   #DW)
  do Get_Field_Information ('STFS007','EXPECTED_TO',   $ExpectedLbl,   #DW)
  do Get_Field_Information ('STFS007','VEST',          $VestLbl,       #DW)
  do Get_Field_Information ('STFS007','REPRICE_GNBR',  $RepriceGNbrLbl,#DW)

End-Procedure Report-Translation

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables


  let $StockId            = rtrim($RC_STOCK_ID,' ')
  let $GroupId            = rtrim($RC_ST_GROUP_ID,' ')
  let $Valuation_Method   = rtrim($RC_ST_VALUE_METHOD,' ')
  let $RC_FromDate        = rtrim($RC_FromDate,' ')
  let $RC_ThruDate        = rtrim($RC_ThruDate,' ')
  let $ExpenseType        = rtrim($RC_ST_EXPENSE_TYPE,' ')
  let $AccountDistrib     = rtrim($RC_ST_ACCOUNT_DISTRIB,' ')
  let #ForfeitureRate     = #RC_ST_FORFEITURE_RATE  
  let #ForfeitureRate1    = #RC_ST_FORFEITURE_RATE
  let $SuppressDetails    = rtrim($RC_ST_SUPPR_DTLS,' ')
  let $SQLQuote           = ''''
  let #Count              = 0
  do Convert-To-DTU-Date($RC_FromDate,$FromDate)
  do Convert-To-DTU-Date($RC_ThruDate,$ThruDate)

  move $Valuation_Method to $FieldValue
  move 'ST_VALUE_METHOD' to $Fieldname
  do Read-Translate-Table
  let $ValueMethodXlat    = rtrim($Xlatlongname,' ')

  move $ExpenseType to $FieldValue
  move 'ST_EXPENSE_TYPE' to $Fieldname
  do Read-Translate-Table
  let $ExpenseTypeXlat    = rtrim($Xlatlongname,' ')

  move $AccountDistrib to $FieldValue
  move 'ST_ACCOUNT_DISTRIB' to $Fieldname
  do Read-Translate-Table
  let $AccountDistribXlat = rtrim($Xlatlongname,' ')

  move $ForfeitureType to $FieldValue
  move 'ST_FORFEITURE_TYPE' to $Fieldname
  do Read-Translate-Table
  let $ForfeitureTypeXlat = rtrim($Xlatlongname,' ')
  let $ExpenseTypeXlat    = $ExpenseTypeXlat || ' - ' || $ValueMethodXlat

  do Select-Account-Standard

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Account-Standard
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Account-Standard

Begin-Select

Z.ST_ACCOUNT_STD

  let $AccountStandard = rtrim(&z.st_account_std, ' ')

from  PS_STOCK_TBL Z
where Z.STOCK_ID = $StockId

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main process
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

Begin-Select

A.EMPLID
A.GRANT_NBR
AA.PER_ORG 
AA.POI_TYPE                                             () on-break print=never procedure=Print-Type

  let $EmplId    = rtrim(&a.emplid, ' ')
  let $GrantNbr  = rtrim(&a.grant_nbr, ' ')
  let $PerOrg    = rtrim(&aa.per_org, ' ')
  let $PoiType   = rtrim(&aa.poi_type, ' ')

  do Select-Grants

from  PS_ST_STFS007_TAO A,
      PS_PER_ORG_ASGN  AA
where A.STOCK_ID        = $StockId
  and A.EMPLID          = AA.EMPLID
order by AA.PER_ORG, AA.POI_TYPE, A.GRANT_NBR

End-Select

  do Print-Type
  do Print-Summary

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Grants
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Grants

Begin-Select

B.GRANT_DT
B.SHARES_GRANTED
B.STOCK_PLAN
B.ST_CANCEL_REASON
B.ST_CANCEL_DT
B.ST_OPTION_TYPE
B.REPRICE_GRANT_NBR
B.RET_ELIG
B.RET_ELIG_DT
C.ST_VALUE_PER_SHARE
C.ST_VALUE_EFFDT

  let $RetElig  = ' '
  let $RetApply = 'N'
  let #ForfeitureRate = #ForfeitureRate1
  
  do Init-Values
    
    if $RetElig = 'Y'
      do Get-Ret-Rules
    end-if

  let #RepriceAdjust = 0
  if $Valuation_Method = 'M'

    if $RepriceNbr <> ''
      let $GrantNbr      = $RepriceNbr

      do Reprice-Adjust-Multiple
      do Init-Values
      do Select-Vesting-End-Date
      let $EndDt         = rtrim(&z.vest_dt, ' ')
      do Convert-To-DTU-Date($EndDt ,$EndDt)
            
            if  $RetApply = 'Y'  and ($EndDt >= $RetEligDt)
                let $EndDt = $RetEligDt
      end-if

      if $CancelDt <> '' and $CancelDt <= $EndDt
        if $CancelReason = 'RPRC'
          do dtu-diff-days($GrantDt,$CancelDt,#Days)
        else
          do dtu-diff-days($GrantDt,$EndDt,#Days)
          let #Days          = #Days + 1
        end-if
      else
        do dtu-diff-days($GrantDt,$EndDt,#Days)
        let #Days          = #Days + 1
      end-if

      let #RepriceAdjust = #RepriceAdjust / #Days

      do Init-Values
    end-if
    do Select-Multiple-Value
    let #ValueExpense   = #TValueExpense
    let #Adjustment     = #TAdjustment
    let #NetExpense     = #TNetExpense
    let #CurrentExpense = #TCurrentExpense
    let #PriorExpense   = #TPriorExpense
    let #FutureExpense  = #TFutureExpense
    let #SharesGranted = #SharesGranted * (1 - (#ForfeitureRate / 100))

    if #Count > 1
      do Print-Multiple-Detail
    else
      do Update-Totals
      print ''                                             (+2,   ,   )
    end-if
  else
    if $AccountDistrib = 'S'
      do Select-Reprice-Credit
      do Calc-Single-Straight
    else
      if $RepriceNbr <> ''
        let $GrantNbr      = $RepriceNbr
        do Reprice-Adjust-Ratable
        do Init-Values
        do Select-Vesting-End-Date
          let $EndDt       = rtrim(&z.vest_dt, ' ')
          do Convert-To-DTU-Date($EndDt,$EndDt)
            if $RetApply = 'Y' and ($EndDt > $RetEligDt)
               let $EndDt = $RetEligDt
          end-if
        if $CancelDt <> ''
          if $CancelReason = 'RPRC'
             do dtu-diff-days($GrantDt, $CancelDt, #Days)
          else
             do dtu-diff-days($GrantDt, $EndDt   , #Days)
             let #Days = #Days + 1
          end-if
        else
          do dtu-diff-days($GrantDt, $EndDt   , #Days)
          let #Days        = #Days + 1
        end-if

       let #RepriceAdjust = #RepriceAdjust / #Days

       do Init-Values
       do Select-Reprice-Credit

      end-if
      do Select-Ratable-Vesting

      let #SharesGranted  = #SharesGranted * (1 - (#ForfeitureRate / 100))
      let #ValueExpense   = #TValueExpense
      let #Adjustment     = #TAdjustment
      let #NetExpense     = #TNetExpense
      let #CurrentExpense = #TCurrentExpense
      let #PriorExpense   = #TPriorExpense
      let #FutureExpense  = #TFutureExpense
    end-if
        !do Print-Detail
            if $RetApply = 'Y'
           if #CurrentDays > 0
    do Print-Detail
  end-if
              else
                do Print-Detail
      end-if
  end-if

from  PS_ST_GRANT       B,
      PS_ST_GRANT_VALUE C
where B.EMPLID          = $Emplid
  and B.STOCK_ID        = $StockId
  and B.GRANT_NBR       = $GrantNbr
  and B.EMPLID          = C.EMPLID
  and B.STOCK_ID        = C.STOCK_ID
  and B.GRANT_NBR       = C.GRANT_NBR
  and C.ST_VALUE_REASON = 'I'
  and ( B.GRANT_DT        < B.ST_CANCEL_DT 
  OR B.ST_CANCEL_DT IS NULL)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Ret-Rules
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Ret-Rules

Begin-Select

D1.VEST_IMMEDIATE

  let $VestImm      = &d1.vest_immediate

  if $VestImm = 'Y'
     let #ForfeitureRate = 0
     let $RetApply = 'Y'
  end-if

from  PS_ST_ACTN_RULE D1
where D1.STOCK_ID        = $StockId
  and D1.STOCK_PLAN_TYPE = 'O'
  and D1.STOCK_PLAN      = $StockPlan
  and D1.STOCK_ACTION    = 'RET'
  and D1.EFFDT           = (select max(D2.EFFDT)
                            from PS_ST_ACTN_RULE D2
                            where D2.STOCK_ID        = D1.STOCK_ID
                            and   D2.STOCK_PLAN_TYPE = 'O'
                            and   D2.STOCK_PLAN      = D1.STOCK_PLAN
                            and   D2.STOCK_ACTION    = D1.STOCK_ACTION
                            and   D2.EFFDT <= $GrantDtDTU)
                           
End-Select

End-Procedure


!-----------------------------------------------------------------------
! Section: Select-Multiple-Value
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Multiple-Value

Begin-Select

D.ST_VALUE_PER_SHARE
D.ST_VALUATION_DT
D.SHARES_VALUED

  let #ValuePerShare = &d.st_value_per_share
  let #SharesValued  = &d.shares_valued
  let #ShValued      = &d.shares_valued

  do Select-Reprice-Credit

  if $AccountDistrib = 'R'
    do Calc-Multiple-Ratable
  else
    do Calc-Multiple-Straight
  end-if

from  PS_ST_GRNT_VAL_DTL D
where D.EMPLID          = $Emplid
  and D.STOCK_ID        = $StockId
  and D.GRANT_NBR       = $GrantNbr
  and D.ST_VALUE_EFFDT  = $ValueEffDt

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Init-Values
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Init-Values

  let $EmplId          = rtrim(&a.emplid, ' ')
  let $GrantNbr        = rtrim(&a.grant_nbr, ' ')
  let $GrantDt         = rtrim(&b.grant_dt, ' ')
  let $GrantDtDTU      = rtrim(&b.grant_dt, ' ')
  let $StockPlan       = rtrim(&b.stock_plan, ' ')
  let $PerOrg          = rtrim(&aa.Per_org, ' ')
  let $PoiType         = rtrim(&aa.Poi_Type, ' ')
  let #SharesGranted   = &b.shares_granted
  let #ShGranted       = &b.shares_granted
  let $CancelReason    = rtrim(&b.st_cancel_reason, ' ')
  let $CancelDt        = rtrim(&b.st_cancel_dt, ' ')
  let $OptionType      = rtrim(&b.st_option_type, ' ')
  let $RepriceNbr      = rtrim(&b.reprice_grant_nbr, ' ')
  let #ValuePerShare   = &c.st_value_per_share
  let $ValueEffDt      = rtrim(&c.st_value_effdt, ' ')
  let $RetElig         = rtrim(&b.ret_elig, ' ')
  let $RetEligDt       = rtrim(&b.ret_elig_dt, ' ')
  do Convert-To-DTU-Date($CancelDt,$CancelDt)
  do Convert-To-DTU-Date($GrantDt ,$GrantDt)
  do Convert-To-DTU-Date($RetEligDt ,$RetEligDt)
  if $CancelDt > $ThruDate
    let $CancelDt      = ''
    let $CancelReason  = ''
  end-if

  let #RepriceCredit   = 0
  let #Adjustment      = 0
  let #AdjustPerDay    = 0
  let #CurrentDays     = 0
  let #PriorDays       = 0
  let #FutureDays      = 0
  let #SharesCancelled = 0
  let #ExpensePerDay   = 0
  let #ValueExpense    = 0
  let #Days            = 0
  let #PeriodDays      = 0
  let #NetExpense      = 0
  let #Count           = 0
  let $WhereVestFrom   = ''
  let $WhereVestThru   = ''
  let $BeginDt         = ''
  let $tCancelDt       = ''

  let #TValueExpense   = 0
  let #TAdjustment     = 0
  let #TNetExpense     = 0
  let #TCurrentExpense = 0
  let #TPriorExpense   = 0
  let #TFutureExpense  = 0
  let $Expensed        = 'N'

End-Procedure

!-----------------------------------------------------------------------
! Section: Calc-Multiple-Straight
! Descr:   Calculates for the Multiple Option Method using the Straight
!          Line approach
!-----------------------------------------------------------------------
Begin-Procedure Calc-Multiple-Straight

  let #Count = #Count + 1

  if $BeginDt = ''
    let $BeginDt     = $GrantDt
  else
    let $BeginDt     = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
  let $EndDt         = rtrim(&d.st_valuation_dt, ' ')
  do Convert-To-DTU-Date($EndDt,$EndDt)
       if ( $RetApply = 'Y') 
             if (($RetEligDt < $BeginDt) and ($GrantDt < $BeginDt))
                let $Expensed = 'Y'
             end-if
      
             if (($RetEligDt < $BeginDt) and ($GrantDt > $BeginDt))
                let $EndDt = $GrantDt
             end-if
      
             if (($RetEligDt > $BeginDt) and ($RetEligDt <= $EndDt))
                if ( $RetEligDt > $GrantDt)
                   let $EndDt = $RetEligDt
                else
                   let $EndDt = $GrantDt
                end-if
             end-if
           end-if
       
      
  if $Expensed = 'N'
  do dtu-diff-days($BeginDt, $EndDt, #PeriodDays)
  let #PeriodDays    = #PeriodDays + 1

  do dtu-diff-days($GrantDt, $EndDt, #Days)
  let #Days          = #Days + 1

   let #SharesValued = #SharesValued  * (1 - (#ForfeitureRate / 100))
   let #ValueExpense = #ValuePerShare * #SharesValued

   if $CancelDt <> ''
      let #Adjustment    = #RepriceAdjust * #PeriodDays
      let #NetExpense    = #ValueExpense + #Adjustment
      let #ExpensePerDay = #NetExpense / #Days

      if $CancelDt <= $EndDt
        if $CancelReason = 'RPRC'
          do dtu-diff-days($CancelDt, $EndDt, #Days)
          let #Days = #Days + 1
          let #Adjustment = #ExpensePerDay * #Days * -1
          let #NetExpense = #ValueExpense + #Adjustment
        else
          do Select-Shares-Cancelled
          let #NetExpense = #ValueExpense + #Adjustment
        end-if
      end-if
    else

     if $RepriceNbr <> ''
      let #Adjustment    = #RepriceAdjust * #PeriodDays

     end-if
      let #NetExpense    = #ValueExpense + #Adjustment
      let #ExpensePerDay = #NetExpense / #Days
    end-if

!-------
! In case of cancellation other than Reprice, for FAS123R we should expense
! as if nothing happended. So made cancel dt as blank to continue expensing
!-------
    
    if $CancelReason <> 'RPRC' and $CancelDt <> ''
      and $RetApply = 'N'
       let $tCancelDt = $CancelDt
       let $CancelDt = ''
             else
               if $RetApply = 'Y'
                 if ($CancelDt >= $RetEligDt)
                   let $tCancelDt = $CancelDt
                   let $CancelDt = $RetEligDt
                 end-if
        end-if
     end-if

  if $CancelDt <> '' and $CancelDt <= $EndDt

    if $FromDate > $GrantDt
      and $FromDate <= $CancelDt
      and $ThruDate >= $CancelDt
      do dtu-diff-days($FromDate , $CancelDt, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
    end-if

    if $FromDate > $GrantDt
      and $FromDate < $CancelDt
      and $ThruDate > $GrantDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $CancelDt, #FutureDays )
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $CancelDt
      do dtu-diff-days($GrantDt  , $CancelDt, #CurrentDays)
      let #CurrentDays = #CurrentDays
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $GrantDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($GrantDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $CancelDt, #FutureDays )
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $ThruDate < $GrantDt
      do dtu-diff-days($GrantDt  , $CancelDt, #FutureDays )
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $CancelReason <> 'RPRC'
      do dtu-diff-days($GrantDt , $FromDate   , #PriorDays )
      if #PriorDays < 0
        let #PriorDays = 0
      end-if
      let #FutureExpense  = 0
      let #PriorExpense   = #PriorDays   * #ExpensePerDay
      let #CurrentExpense = #PriorExpense * -1
    else
      let #CurrentExpense = #CurrentDays * #ExpensePerDay
      let #PriorExpense   = #PriorDays   * #ExpensePerDay
      let #FutureExpense  = #FutureDays  * #ExpensePerDay
    end-if
   else

    if $FromDate > $EndDt
      do dtu-diff-days($GrantDt  , $EndDt   , #PriorDays  )
      let #PriorDays   = #PriorDays + 1
    end-if

    if $FromDate > $GrantDt
      and $FromDate <= $EndDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($FromDate , $EndDt   , #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate > $GrantDt
      and $FromDate < $EndDt
      and $ThruDate > $GrantDt
      and $ThruDate < $EndDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($GrantDt , $EndDt   , #CurrentDays)
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $GrantDt
      and $ThruDate < $EndDt
      do dtu-diff-days($GrantDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $ThruDate < $GrantDt
      do dtu-diff-days($GrantDt , $EndDt   , #FutureDays )
      let #FutureDays  = #FutureDays + 1
    end-if

    let #CurrentExpense = #CurrentDays * #ExpensePerDay
    let #PriorExpense   = #PriorDays   * #ExpensePerDay
    let #FutureExpense  = #FutureDays  * #ExpensePerDay
  end-if

  let #ValueExpense   = round(#ValueExpense,2)
  let #Adjustment     = round(#Adjustment,2)
  let #NetExpense     = round(#NetExpense,2)
  let #CurrentExpense = round(#CurrentExpense,2)
  let #PriorExpense   = round(#PriorExpense,2)
  let #FutureExpense  = round(#FutureExpense ,2)
  if $CancelReason <> 'RPRC'
          if ($tCancelDt <> '')
    let $CancelDt = $tCancelDt
  end-if
    end-if

  if $SuppressDetails = 'N'
    if #Count = 1
      print $GrantNbr                                      (+1,001,010)
      if $CancelDt <> ''
        do Convert-From-DTU-Date ($CancelDt,$Date)
        do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
        print $Date                                          (  ,075,010)
      else
        if $RepriceNbr <> ''
           print $RepriceNbr                                 (  ,075,010)
        end-if
      end-if
      print #ShValued                                      (  ,014,017) edit 99,999,999.999999
      print #SharesValued                                  (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
      do Convert-From-DTU-Date ($GrantDt,$Date)
      do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
      print $Date                                          (+1,002,010)
      print $CancelReason                                  (  ,075,010)
    end-if
    if #Count = 2
      print #ShValued                                  (  ,014,017) edit 99,999,999.999999
      print #SharesValued                                     (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
    end-if
    if #Count > 2
      print #ShValued                                  (+1,014,017) edit 99,999,999.999999
      print #SharesValued                                     (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
    end-if
  end-if

  let #TValueExpense   = #TValueExpense   + #ValueExpense
  let #TAdjustment     = #TAdjustment     + #Adjustment
  let #TNetExpense     = #TNetExpense     + #NetExpense
  let #TCurrentExpense = #TCurrentExpense + #CurrentExpense
  let #TPriorExpense   = #TPriorExpense   + #PriorExpense
  let #TFutureExpense  = #TFutureExpense  + #FutureExpense
end-if

End-Procedure


!-----------------------------------------------------------------------
! Section: Calc-Single-Straight
! Descr:   Calculates for the Single Option Method using the Straight
!          Line approach
!-----------------------------------------------------------------------
Begin-Procedure Calc-Single-Straight

  let $BeginDt     = $GrantDt
  do Select-Vesting-End-Date
  let $EndDt       = rtrim(&z.vest_dt, ' ')

  do Convert-To-DTU-Date($EndDt,$EndDt)
    
      if $RetApply = 'Y'
        if ($EndDt >= $RetEligDt) 
           if ( $GrantDt > $RetEligDt) 
              if ($GrantDt >= $FromDate and $GrantDt <= $ThruDate)
                 let $EndDt = $GrantDt
              else
                 let $Expensed = 'Y'
              end-if
           else
             if ($RetEligDt >= $FromDate and $RetEligDt <= $ThruDate)
                 let $EndDt = $RetEligDt
              else
                 if ($RetEligDt < $FromDate)
                    let $Expensed = 'Y'
                  end-if
              end-if
           end-if
           
        end-if
      end-if
      
    if $Expensed = 'N'

  do dtu-diff-days($BeginDt, $EndDt, #Days)
  let #Days        = #Days + 1

   let #SharesGranted = #SharesGranted * (1 - (#ForfeitureRate / 100))
   let #ValueExpense  = #ValuePerShare * #SharesGranted

   if $RepriceNbr <> ''
      do Select-Reprice
      let $CurGrantNbr   = $GrantNbr
      let $GrantNbr      = $RepriceNbr
      
            if $RetApply = 'N'
      do Select-Vesting-End-Date
      let $REndDt        = rtrim(&z.vest_dt, ' ')
      do Convert-To-DTU-Date($REndDt ,$REndDt)
                  else
                    if ($REndDt > $RetEligDt) 
                      if ( $RBeginDt > $RetEligDt)
                        let $REndDt = $RGrantDt
                      else
                        let $REndDt  = $RetEligDt
                      end-if
                    end-if
            end-if
      
            let $GrantNbr      = $CurGrantNbr
         !   let $REndDt        = rtrim(&z.vest_dt, ' ')
   !   do Convert-To-DTU-Date($REndDt ,$REndDt)
      do dtu-diff-days($RBeginDt,$REndDt,#RDays)
      let #RDays = #RDays + 1

      let #AdjustExpense = #RValuePerShare * (#RSharesGranted * (1 - (#ForfeitureRate / 100)))
      let #AdjustPerDay  = #AdjustExpense / #RDays

      do dtu-diff-days($RCancelDt,$REndDt,#RDays)
      let #RDays = #RDays + 1
      let #Adjustment    = #AdjustPerDay * #RDays
    end-if
    if $CancelDt <> ''
      let #ExpensePerDay = #ValueExpense / #Days

      if $CancelReason = 'RPRC'
        do dtu-diff-days($CancelDt, $EndDt, #Days)
        let #Days = #Days + 1
        let #Adjustment = #Adjustment + (#ExpensePerDay * #Days * -1)
        let #NetExpense = #ValueExpense + #Adjustment
      else
        do Select-Shares-Cancelled
        let #NetExpense    = #ValueExpense + #Adjustment
        let #ExpensePerDay = #NetExpense / #Days
      end-if

    else
      let #NetExpense    = #ValueExpense + #Adjustment
      let #ExpensePerDay = #NetExpense / #Days
    end-if

!-------
! In case of cancellation other than Reprice, for FAS123R we should expense
! as if nothing happended. So not considering Cancel Dt for expenses
! But if retirement eligible flag is ON then expense thru Retirement Eligible Dt ONLY
!-------

  if $CancelDt = '' or $CancelReason <> 'RPRC'
    let #DaysToAdd   = 1
  else
    let #DaysToAdd   = 0
    let $EndDt       = $CancelDt
  end-if

  if $FromDate > $BeginDt
    and $FromDate <= $EndDt
    and $ThruDate >= $EndDt
    do dtu-diff-days($FromDate , $EndDt   , #CurrentDays)
    do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
    let #CurrentDays = #CurrentDays + #DaysToAdd
  end-if

  if $FromDate > $BeginDt
    and $FromDate < $EndDt
    and $ThruDate > $BeginDt
    and $ThruDate < $EndDt
    do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
    do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
    do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
    let #CurrentDays = #CurrentDays + #DaysToAdd
  end-if

  if $FromDate <= $BeginDt
    and $ThruDate >= $EndDt
    do dtu-diff-days($BeginDt  , $EndDt   , #CurrentDays)
    let #CurrentDays = #CurrentDays + #DaysToAdd
  end-if

  if $FromDate <= $BeginDt
    and $ThruDate >= $BeginDt
    and $ThruDate < $EndDt
    do dtu-diff-days($BeginDt  , $ThruDate, #CurrentDays)
    do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
    let #CurrentDays = #CurrentDays + #DaysToAdd

  end-if

  let #CurrentExpense = #CurrentDays * #ExpensePerDay
  let #PriorExpense   = #PriorDays   * #ExpensePerDay
  let #FutureExpense  = #FutureDays  * #ExpensePerDay
end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Calc-Multiple-Ratable
! Descr:   Calculates for the Multiple Option Method using the Ratable
!          Line approach
!-----------------------------------------------------------------------
Begin-Procedure Calc-Multiple-Ratable

  let #Count = #Count + 1

  if $BeginDt = ''
    let $BeginDt     = $GrantDt
  else
    let $BeginDt     = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
  let $EndDt         = rtrim(&d.st_valuation_dt, ' ')
  do Convert-To-DTU-Date($EndDt,$EndDt)
      if ( $RetApply = 'Y') 
         if (($RetEligDt < $BeginDt) and ($GrantDt < $BeginDt))
            let $Expensed = 'Y'
         end-if
         if (($RetEligDt < $BeginDt) and ($GrantDt > $BeginDt))
            let $EndDt = $GrantDt
         end-if
         if (($RetEligDt > $BeginDt) and ($RetEligDt <= $EndDt))
            if ( $RetEligDt > $GrantDt)
               let $EndDt = $RetEligDt
            else
               let $EndDt = $GrantDt
            end-if
         end-if
       end-if
       
       
  if $Expensed = 'N'
  do dtu-diff-days($BeginDt, $EndDt, #PeriodDays)
  let #PeriodDays    = #PeriodDays + 1
  do dtu-diff-days($GrantDt, $EndDt, #Days)
  let #Days          = #Days + 1

!-------
! In case of cancellation other than Reprice, for FAS123R we should expense
! as if nothing happended. So made cancel dt as blank to continue expensing
!-------

    if $CancelReason <> 'RPRC' and $CancelDt <> ''
      and $RetApply = 'N'
   let $tCancelDt = $CancelDt
   let $CancelDt = ''
         else
           if $RetApply = 'Y'
             if ($CancelDt >= $RetEligDt)
               let $tCancelDt = $CancelDt
               let $CancelDt = $RetEligDt
          end-if
               end-if
  end-if
  

  let #SharesValued  = #SharesValued * (1 - (#ForfeitureRate / 100))
  let #ValueExpense  = #ValuePerShare * #SharesValued

  if $CancelDt <> ''

    do dtu-diff-days($BeginDt , $CancelDt, #PeriodDays)
    let #Adjustment    = #RepriceAdjust * #PeriodDays
    let #NetExpense    = #ValueExpense + #Adjustment
    let #ExpensePerDay = #NetExpense / #Days

    if $CancelDt <= $EndDt

      if $CancelReason = 'RPRC'
        do dtu-diff-days($CancelDt, $EndDt, #Days)
        let #Days       = #Days + 1
        let #Adjustment = #Adjustment + (#ExpensePerDay * #Days * -1)
        let #NetExpense = #ValueExpense + #Adjustment
      else
        let #NetExpense = #ValueExpense + #Adjustment
      end-if
    end-if
  else
    if $RepriceNbr <> ''
       let #Adjustment    = #RepriceAdjust * #PeriodDays
    end-if
    let #NetExpense    = #ValueExpense + #Adjustment
    let #ExpensePerDay = #NetExpense / #Days
  end-if

  if $CancelDt <> '' and $CancelDt <= $EndDt
    if $FromDate > $GrantDt
      and $FromDate <= $CancelDt
      and $ThruDate >= $CancelDt
      do dtu-diff-days($FromDate , $CancelDt, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
    end-if

    if $FromDate > $GrantDt
      and $FromDate < $CancelDt
      and $ThruDate > $GrantDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $CancelDt, #FutureDays )
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $CancelDt
      do dtu-diff-days($GrantDt  , $CancelDt, #CurrentDays)
      let #CurrentDays = #CurrentDays
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $GrantDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($GrantDt  , $ThruDate, #CurrentDays)
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
     end-if

    if $ThruDate < $GrantDt
      do dtu-diff-days($GrantDt , $CancelDt, #FutureDays )
      let #FutureDays  = #FutureDays  - 1
    end-if

      let #CurrentExpense = #CurrentDays * #ExpensePerDay
      let #PriorExpense   = #PriorDays   * #ExpensePerDay
      let #FutureExpense  = #FutureDays  * #ExpensePerDay
  else
    if $FromDate > $EndDt
      do dtu-diff-days($GrantDt  , $EndDt   , #PriorDays  )
      let #PriorDays   = #PriorDays + 1
    end-if

    if $FromDate > $GrantDt
      and $FromDate <= $EndDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($FromDate , $EndDt   , #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate > $GrantDt
      and $FromDate < $EndDt
      and $ThruDate > $GrantDt
      and $ThruDate < $EndDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($GrantDt , $EndDt   , #CurrentDays)
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $GrantDt
      and $ThruDate < $EndDt
      do dtu-diff-days($GrantDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $ThruDate < $GrantDt
      do dtu-diff-days($GrantDt , $EndDt   , #FutureDays )
      let #FutureDays  = #FutureDays + 1
    end-if

    let #CurrentExpense = #CurrentDays * #ExpensePerDay
    let #PriorExpense   = #PriorDays   * #ExpensePerDay
    let #FutureExpense  = #FutureDays  * #ExpensePerDay
  end-if


  let #ValueExpense   = round(#ValueExpense,2)
  let #Adjustment     = round(#Adjustment,2)
  let #NetExpense     = round(#NetExpense,2)
  let #CurrentExpense = round(#CurrentExpense,2)
  let #PriorExpense   = round(#PriorExpense,2)
  let #FutureExpense  = round(#FutureExpense ,2)
  if $CancelReason <> 'RPRC'
      if ($tCancelDt <> '')
    let $CancelDt = $tCancelDt
  end-if
    end-if

  if $SuppressDetails = 'N'
    if #Count = 1
      print $GrantNbr                                      (+1,001,010)
      if $CancelDt <> ''
        do Convert-From-DTU-Date ($CancelDt,$Date)
        do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
        print $Date                                          (  ,075,010)
      else
        if $RepriceNbr <> ''
           print $RepriceNbr                                 (  ,075,010)
        end-if
      end-if
      print #ShValued                                      (  ,014,017) edit 99,999,999.999999
      print #SharesValued                                  (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
      do Convert-From-DTU-Date ($GrantDt,$Date)
      do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
      print $Date                                          (+1,002,010)
      print $CancelReason                                  (  ,075,010)
    end-if
    if #Count = 2
      print #ShValued                                  (  ,014,017) edit 99,999,999.999999
      print #SharesValued                                     (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
    end-if
    if #Count > 2
      print #ShValued                                  (+1,014,017) edit 99,999,999.999999
      print #SharesValued                                     (  ,033,017) edit 99,999,999.999999
      print #ValueExpense                                  (  ,054,019) edit $$$9,999,999,999.99
      print #Adjustment                                    (  ,088,019) edit $$$9,999,999,999.99
      print #NetExpense                                    (  ,109,019) edit $$$9,999,999,999.99
      print #FutureExpense                                 (  ,130,019) edit $$$9,999,999,999.99
      print #CurrentExpense                                (  ,151,019) edit $$$9,999,999,999.99
    end-if
  end-if

  let #TValueExpense   = #TValueExpense   + #ValueExpense
  let #TAdjustment     = #TAdjustment     + #Adjustment
  let #TNetExpense     = #TNetExpense     + #NetExpense
  let #TCurrentExpense = #TCurrentExpense + #CurrentExpense
  let #TPriorExpense   = #TPriorExpense   + #PriorExpense
  let #TFutureExpense  = #TFutureExpense  + #FutureExpense
 end-if
 
End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Ratable-Vesting
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Ratable-Vesting
  let $Expensed = 'N'
  
Begin-Select

Y.VEST_DT
Y.SHARES_VESTED

  let #SharesVested = &y.shares_vested
  let #ShVested     = &y.shares_vested
  let $VestDt       = rtrim(&y.vest_dt, ' ')
  do Convert-To-DTU-Date($VestDt,$VestDt)
  do Calc-Single-Ratable

from  PS_ST_GRNT_VST_DTL Y
where Y.EMPLID     = $EmplId
  and Y.STOCK_ID   = $StockId
  and Y.GRANT_NBR  = $GrantNbr
  and Y.VEST_EFFDT = (select max(YY.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL YY
                       where YY.EMPLID      = Y.EMPLID
                         and YY.STOCK_ID    = Y.STOCK_ID
                         and YY.GRANT_NBR   = Y.GRANT_NBR)
  and Y.SEQ_NUM    = (select max(YYY.SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL YYY
                       where YYY.EMPLID     = Y.EMPLID
                         and YYY.STOCK_ID   = Y.STOCK_ID
                         and YYY.GRANT_NBR  = Y.GRANT_NBR
                         and YYY.VEST_EFFDT = Y.VEST_EFFDT)
                         ORDER BY Y.VEST_DT ASC
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Calc-Single-Ratable
! Descr:   Calculates for the Single Option Method using the Ratable
!          Line approach
!-----------------------------------------------------------------------
Begin-Procedure Calc-Single-Ratable

  let #CurrentDays = 0
  let #PriorDays   = 0
  let #FutureDays  = 0
  let #Adjustment  = 0

  if $BeginDt = ''
    let $BeginDt = $GrantDt
  else
    let $BeginDt = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
  let $EndDt = $VestDt

    
    !----------------------
    !Checking if Retirement Eligibility Date is in range. Setting End date 
    !accordingly. Setting Expense flag to control Expense Processing
    !----------------------
    
        if ( $RetApply = 'Y') 
           if (($RetEligDt < $BeginDt) and ($GrantDt < $BeginDt))
              let $Expensed = 'Y'
           end-if
    
           if (($RetEligDt < $BeginDt) and ($GrantDt > $BeginDt))
              let $EndDt = $GrantDt
           end-if
    
           if (($RetEligDt > $BeginDt) and ($RetEligDt <= $EndDt))
              if ( $RetEligDt > $GrantDt)
                 let $EndDt = $RetEligDt
              else
                let $EndDt = $GrantDt
              end-if
           end-if
         end-if
       
      
            
  if $Expensed = 'N'
  do dtu-diff-days($BeginDt, $EndDt, #Days)
  let #Days  = #Days + 1

    let #SharesVested  = #SharesVested  * (1 - (#ForfeitureRate / 100))
    let #ValueExpense  = #ValuePerShare * #SharesVested

!-------
! In case of cancellation other than Reprice, for FAS123R we should expense
! as if nothing happended. So made cancel dt as blank to continue expensing
!-------

    if $CancelDt <> ''
    if $CancelReason <> 'RPRC'
                     and $RetApply = 'N'
      let $tCancelDt = $CancelDt
      let $CancelDt = ''
                    else
                      if $RetApply = 'Y'
                        if ($CancelDt > $RetEligDt) 
                          let $tCancelDt = $CancelDt
                          let $CancelDt  = $RetEligDt
                        end-if
                end-if
    end-if

      do dtu-diff-days($BeginDt , $CancelDt, #PeriodDays)
      let #Adjustment    = #RepriceAdjust * #PeriodDays
      let #NetExpense    = #ValueExpense + #Adjustment
      let #ExpensePerDay = #NetExpense / #Days

      if $EndDt >= $CancelDt
         if $CancelReason = 'RPRC'
           if $CancelDt > $BeginDt
             do dtu-diff-days($CancelDt, $EndDt, #Days)
           else
             do dtu-diff-days($BeginDt, $EndDt, #Days)
           end-if
           let #Days       = #Days + 1
           let #Adjustment = (#ExpensePerDay * #Days * -1)
           let #NetExpense = #ValueExpense + #Adjustment
        else
          do Convert-From-DTU-Date ($BeginDt, $Date1)
          !do Format-DateTime ($Date1,$Date1, {DEFDATE}, '', '')
          do Convert-From-DTU-Date ($EndDt, $Date2)
          !do Format-DateTime ($Date2,$Date2, {DEFDATE}, '', '')
          let $WhereVestFrom = 'AND H.VEST_DT >  ' || $SQLQuote || $Date1 || $SQLQuote
          let $WhereVestThru = 'AND H.VEST_DT <= ' || $SQLQuote || $Date2 || $SQLQuote
          do Select-Shares-Cancelled
          let #NetExpense = #ValueExpense + #Adjustment
        end-if
      else
        let #Adjustment    = #RepriceAdjust * #Days
        let #NetExpense    = #ValueExpense + #Adjustment
        let #ExpensePerDay = #NetExpense / #Days
      end-if
    else
      if $RepriceNbr <> ''
        let #Adjustment    = #RepriceAdjust * #Days
      end-if
      let #NetExpense    = #ValueExpense + #Adjustment
      let #ExpensePerDay = #NetExpense / #Days
    end-if

   if $CancelDt > $BeginDt
    and $CancelDt <= $EndDt
     if $FromDate > $BeginDt
       and $FromDate <= $CancelDt
       and $ThruDate >= $CancelDt
       do dtu-diff-days($FromDate , $CancelDt, #CurrentDays)
       do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
     end-if

    if $FromDate > $BeginDt
      and $FromDate < $CancelDt
      and $ThruDate > $BeginDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $CancelDt, #FutureDays )
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $FromDate <= $BeginDt
      and $ThruDate >= $CancelDt
      do dtu-diff-days($BeginDt  , $CancelDt, #CurrentDays)
      let #CurrentDays = #CurrentDays
    end-if

    if $FromDate <= $BeginDt
      and $ThruDate >= $BeginDt
      and $ThruDate < $CancelDt
      do dtu-diff-days($BeginDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $CancelDt, #FutureDays )
      let #CurrentDays = #CurrentDays + 1
      let #FutureDays  = #FutureDays  - 1
    end-if

    if $ThruDate < $BeginDt
       do dtu-diff-days($BeginDt , $CancelDt, #FutureDays )
       let #FutureDays  = #FutureDays  - 1
    end-if

  else

  if $CancelDt = ''
      or $CancelDt > $EndDt
      if $FromDate > $EndDt
        do dtu-diff-days($BeginDt  , $EndDt   , #PriorDays  )
        let #PriorDays   = #PriorDays + 1
      end-if

      if $FromDate > $BeginDt
        and $FromDate <= $EndDt
        and $ThruDate >= $EndDt
        do dtu-diff-days($FromDate , $EndDt   , #CurrentDays)
        do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
        let #CurrentDays = #CurrentDays + 1
      end-if

      if $FromDate > $BeginDt
        and $FromDate < $EndDt
        and $ThruDate > $BeginDt
        and $ThruDate < $EndDt
        do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
        do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
        do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
        let #CurrentDays = #CurrentDays + 1
      end-if

      if $FromDate <= $BeginDt
        and $ThruDate >= $EndDt
        do dtu-diff-days($BeginDt , $EndDt   , #CurrentDays)
        let #CurrentDays = #CurrentDays + 1
      end-if

      if $FromDate <= $BeginDt
        and $ThruDate >= $BeginDt
        and $ThruDate < $EndDt
        do dtu-diff-days($BeginDt  , $ThruDate, #CurrentDays)
        do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
        let #CurrentDays = #CurrentDays + 1
      end-if

      if $ThruDate < $BeginDt
        do dtu-diff-days($BeginDt , $EndDt   , #FutureDays )
        let #FutureDays  = #FutureDays + 1
      end-if

    end-if

  end-if

  let #CurrentExpense = #CurrentDays * #ExpensePerDay
  let #PriorExpense   = #PriorDays   * #ExpensePerDay
  let #FutureExpense  = #FutureDays  * #ExpensePerDay
  if $CancelReason <> 'RPRC'
     let $CancelDt       = $tCancelDt
  end-if

  let #TValueExpense   = #TValueExpense   + #ValueExpense
  let #TAdjustment     = #TAdjustment     + #Adjustment
  let #TNetExpense     = #TNetExpense     + #NetExpense
  let #TCurrentExpense = #TCurrentExpense + #CurrentExpense
  let #TPriorExpense   = #TPriorExpense   + #PriorExpense
  let #TFutureExpense  = #TFutureExpense  + #FutureExpense
  end-if
End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting-End-Date
! Descr:   Selects the last vesting date and determines the total
!          vesting days.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting-End-Date

Begin-Select

Z.VEST_DT

from  PS_ST_GRNT_VST_DTL Z
where Z.EMPLID     = $Emplid
  and Z.STOCK_ID   = $StockId
  and Z.GRANT_NBR  = $GrantNbr
  and Z.VEST_EFFDT = (select max(ZZ.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL ZZ
                       where ZZ.EMPLID       = Z.EMPLID
                         and ZZ.STOCK_ID     = Z.STOCK_ID
                         and ZZ.GRANT_NBR    = Z.GRANT_NBR)
  and Z.SEQ_NUM    = (select max(ZZZ.SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL ZZZ
                       where ZZZ.EMPLID      = Z.EMPLID
                         and ZZZ.STOCK_ID    = Z.STOCK_ID
                         and ZZZ.GRANT_NBR   = Z.GRANT_NBR
                         and ZZZ.VEST_EFFDT  = Z.VEST_EFFDT)
  and Z.VEST_DT    = (select max(ZZZZ.VEST_DT)
                        from PS_ST_GRNT_VST_DTL ZZZZ
                       where ZZZZ.EMPLID     = Z.EMPLID
                         and ZZZZ.STOCK_ID   = Z.STOCK_ID
                         and ZZZZ.GRANT_NBR  = Z.GRANT_NBR
                         and ZZZZ.VEST_EFFDT = Z.VEST_EFFDT
                         and ZZZZ.SEQ_NUM    = Z.SEQ_NUM)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Reprice-Credit
! Descr:   This procedure adjusts the value per share by subtracting the
!          reprice credit.
!-----------------------------------------------------------------------
Begin-Procedure Select-Reprice-Credit

Begin-Select

E.ST_VALUE_PER_SHARE

  let #ValuePerShare = #ValuePerShare - &e.st_value_per_share

from  PS_ST_GRANT_VALUE E
where E.EMPLID          = $Emplid
  and E.STOCK_ID        = $StockId
  and E.GRANT_NBR       = $RepriceNbr
  and E.ST_VALUE_REASON = 'R'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Reprice
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Reprice

Begin-Select

F.GRANT_DT
F.SHARES_GRANTED
F.ST_CANCEL_DT
G.ST_VALUE_PER_SHARE

  let $RBeginDt       = rtrim(&f.grant_dt, ' ')
  let #RSharesGranted = &f.shares_granted
  let $RCancelDt      = rtrim(&f.st_cancel_dt, ' ')
  let #RValuePerShare = &g.st_value_per_share
  do Convert-To-DTU-Date($RBeginDt ,$RBeginDt)
  do Convert-To-DTU-Date($RCancelDt,$RCancelDt)

from  PS_ST_GRANT       F,
      PS_ST_GRANT_VALUE G
where F.EMPLID          = $Emplid
  and F.STOCK_ID        = $StockId
  and F.GRANT_NBR       = $RepriceNbr
  and F.ST_CANCEL_DT   <= $RC_ThruDate
  and F.EMPLID          = G.EMPLID
  and F.STOCK_ID        = G.STOCK_ID
  and F.GRANT_NBR       = G.GRANT_NBR
  and G.ST_VALUE_REASON = 'I'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Shares-Cancelled
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Shares-Cancelled

  let #SharesCancelled = 0
  do Convert-From-DTU-Date ($CancelDt, $Date)

Begin-Select

SUM(H.SHARES_VESTED)     &h.shares_vested

  let #SharesCancelled = &h.shares_vested
from  PS_ST_GRNT_VST_DTL H
where H.EMPLID     = $Emplid
  and H.STOCK_ID   = $StockId
  and H.GRANT_NBR  = $GrantNbr
  and H.VEST_EFFDT = (select max(HH.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL HH
                       where HH.EMPLID    = H.EMPLID
                         and HH.STOCK_ID  = H.STOCK_ID
                         and HH.GRANT_NBR = H.GRANT_NBR)
  and H.SEQ_NUM    = (select max(HHH.SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL HHH
                       where HHH.EMPLID     = H.EMPLID
                         and HHH.STOCK_ID   = H.STOCK_ID
                         and HHH.GRANT_NBR  = H.GRANT_NBR
                         and HHH.VEST_EFFDT = H.VEST_EFFDT)
  and H.VEST_DT   >= $Date
[$WhereVestFrom]
[$WhereVestThru]

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Reprice-Adjust-Ratable
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Reprice-Adjust-Ratable

Begin-Select

I.GRANT_DT
I.SHARES_GRANTED
I.ST_CANCEL_DT
I.ST_CANCEL_REASON
I.REPRICE_GRANT_NBR
J.ST_VALUE_PER_SHARE

  let $GrantDt       = rtrim(&i.grant_dt, ' ')
  let #SharesGranted = &i.shares_granted
  let #ShGranted     = &i.shares_granted
  let $CancelDt      = rtrim(&i.st_cancel_dt, ' ')
  let #ValuePerShare = &j.st_value_per_share
  do Convert-To-DTU-Date($GrantDt ,$GrantDt)
  do Convert-To-DTU-Date($CancelDt,$CancelDt)
  let $BeginDt       = ''
  let $CancelReason  = rtrim(&i.st_cancel_reason, ' ')
  let $RepriceNbr    = rtrim(&i.reprice_grant_nbr, ' ')

  do Select-Reprice-Credit
  do Reprice-Ratable-Vesting

from  PS_ST_GRANT        I,
      PS_ST_GRANT_VALUE  J
where I.EMPLID          = $Emplid
  and I.STOCK_ID        = $StockId
  and I.GRANT_NBR       = $GrantNbr
  and I.ST_CANCEL_DT   <= $RC_ThruDate
  and I.EMPLID          = J.EMPLID
  and I.STOCK_ID        = J.STOCK_ID
  and I.GRANT_NBR       = J.GRANT_NBR
  and J.ST_VALUE_REASON = 'I'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Reprice-Ratable-Vesting
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Reprice-Ratable-Vesting

Begin-Select

N.VEST_DT
N.SHARES_VESTED

  let #SharesVested = &n.shares_vested
  let #ShVested     = &n.shares_vested
  let $VestDt       = rtrim(&n.vest_dt, ' ')
  do Convert-To-DTU-Date($VestDt,$VestDt)

  if $BeginDt = ''
    let $BeginDt   = $GrantDt
  else
    let $BeginDt   = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
    
    !------------------------------
    ! Retirement Eligibility Rules
    !------------------------------
      if $RetApply = 'Y' and ($EndDt > $RetEligDt)
        let $EndDt = $RetEligDt
    else
  let $EndDt = $VestDt
    end-if
    
    
  do dtu-diff-days($BeginDt, $EndDt, #Days)
  let #Days  = #Days + 1

  let #SharesVested  = #SharesVested  * (1 - (#ForfeitureRate / 100))
  let #ValueExpense  = #ValuePerShare * #SharesVested
  let #ExpensePerDay = #ValueExpense / #Days

  if $EndDt >= $CancelDt

    if $CancelDt > $BeginDt
      do dtu-diff-days($CancelDt, $EndDt, #Days)
    else
      do dtu-diff-days($BeginDt, $EndDt, #Days)
    end-if
    let #Days          = #Days + 1
    let #RepriceAdjust = #RepriceAdjust + (#ExpensePerDay * #Days)
  end-if

from  PS_ST_GRNT_VST_DTL N
where N.EMPLID     = $EmplId
  and N.STOCK_ID   = $StockId
  and N.GRANT_NBR  = $GrantNbr
  and N.VEST_EFFDT = (select max(NN.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL NN
                       where NN.EMPLID      = N.EMPLID
                         and NN.STOCK_ID    = N.STOCK_ID
                         and NN.GRANT_NBR   = N.GRANT_NBR)
  and N.SEQ_NUM    = (select max(NNN.SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL NNN
                       where NNN.EMPLID     = N.EMPLID
                         and NNN.STOCK_ID   = N.STOCK_ID
                         and NNN.GRANT_NBR  = N.GRANT_NBR
                         and NNN.VEST_EFFDT = N.VEST_EFFDT)
  ORDER BY N.VEST_DT ASC

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Reprice-Adjust-Multiple
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Reprice-Adjust-Multiple

Begin-Select

K.GRANT_DT
K.SHARES_GRANTED
K.ST_CANCEL_DT
K.ST_CANCEL_REASON
K.REPRICE_GRANT_NBR
M.ST_VALUE_PER_SHARE
M.ST_VALUATION_DT
M.SHARES_VALUED

  let $GrantDt       = rtrim(&k.grant_dt, ' ')
  let #SharesGranted = &k.shares_granted
  let #ShGranted     = &k.shares_granted
  let $CancelDt      = rtrim(&k.st_cancel_dt, ' ')
  let $RepriceNbr    = rtrim(&k.reprice_grant_nbr, ' ')
  do Convert-To-DTU-Date($GrantDt ,$GrantDt)
  do Convert-To-DTU-Date($CancelDt,$CancelDt)
  let $BeginDt       = ''
  let $CancelReason  = rtrim(&k.st_cancel_reason, ' ')
  let #ValuePerShare = &m.st_value_per_share
  let #SharesValued  = &m.shares_valued

  do Select-Reprice-Credit

  if $BeginDt = ''
    let $BeginDt     = $GrantDt
  else
    let $BeginDt     = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
  let $EndDt         = rtrim(&m.st_valuation_dt, ' ')
  do Convert-To-DTU-Date($EndDt,$EndDt)
    
    !------------------------------
    ! Retirement Eligibility Rules
    !------------------------------
      
      if $RetApply = 'Y' and ($EndDt > $RetEligDt)
        let $EndDt = $RetEligDt
    end-if
  
  do dtu-diff-days($BeginDt, $EndDt, #Days)
  let #PeriodDays    = #PeriodDays + 1
  do dtu-diff-days($GrantDt, $EndDt, #Days)
  let #Days          = #Days + 1

  let #SharesValued  = #SharesValued  * (1 - (#ForfeitureRate / 100))
  let #ValueExpense  = #ValuePerShare * #SharesValued
  do dtu-diff-days($BeginDt , $CancelDt, #PeriodDays)
  let #ExpensePerDay = #ValueExpense / #Days

  if $CancelDt <= $EndDt
    do dtu-diff-days($CancelDt, $EndDt   , #Days)
    let #Days       = #Days + 1
    let #RepriceAdjust = #RepriceAdjust + (#ExpensePerDay * #Days)
  end-if

from  PS_ST_GRANT        K,
      PS_ST_GRANT_VALUE  L,
      PS_ST_GRNT_VAL_DTL M
where K.EMPLID          = $Emplid
  and K.STOCK_ID        = $StockId
  and K.GRANT_NBR       = $GrantNbr
  and K.ST_CANCEL_DT   <= $RC_ThruDate
  and K.EMPLID          = L.EMPLID
  and K.STOCK_ID        = L.STOCK_ID
  and K.GRANT_NBR       = L.GRANT_NBR
  and K.EMPLID          = M.EMPLID
  and K.STOCK_ID        = M.STOCK_ID
  and K.GRANT_NBR       = M.GRANT_NBR
  and L.ST_VALUE_REASON = 'I'
  and M.ST_VALUE_EFFDT  = L.ST_VALUE_EFFDT

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail

  let #ValueExpense   = round(#ValueExpense,2)
  let #Adjustment     = round(#Adjustment,2)
  let #NetExpense     = round(#NetExpense,2)
  let #CurrentExpense = round(#CurrentExpense,2)
  let #PriorExpense   = round(#PriorExpense,2)
  let #FutureExpense  = round(#FutureExpense ,2)

  if $SuppressDetails = 'N'
    print $GrantNbr                                        (+1,001,010)
    print #ShGranted                                       (  ,014,017) edit 99,999,999.999999
    print #SharesGranted                                   (  ,033,017) edit 99,999,999.999999
    print #ValueExpense                                    (  ,054,019) edit $$$9,999,999,999.99
    print #Adjustment                                      (  ,088,019) edit $$$9,999,999,999.99
    if $CancelDt <> ''
      do Convert-From-DTU-Date ($CancelDt, $Date)
      do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
      print $Date                                          (  ,075,010)
    else
      if $RepriceNbr <> ''
        print $RepriceNbr                                  (  ,075,010)
      end-if
    end-if
    print #NetExpense                                      (  ,109,019) edit $$$9,999,999,999.99
    print #FutureExpense                                   (  ,130,019) edit $$$9,999,999,999.99
    print #CurrentExpense                                  (  ,151,019) edit $$$9,999,999,999.99
    do Convert-From-DTU-Date ($GrantDt, $Date)
    do Format-DateTime ($Date, $Date, {DEFDATE}, '', '')
    print $Date                                            (+1,002,010)
    print $CancelReason                                    (  ,075,010)
  end-if

  do Update-Totals

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Multiple-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Multiple-Detail

  let #ValueExpense   = round(#ValueExpense,2)
  let #Adjustment     = round(#Adjustment,2)
  let #NetExpense     = round(#NetExpense,2)
  let #CurrentExpense = round(#CurrentExpense,2)
  let #PriorExpense   = round(#PriorExpense,2)
  let #FutureExpense  = round(#FutureExpense ,2)

  if $SuppressDetails = 'N'
    print #ShGranted                                   (+1,014,017) edit 99,999,999.999999 bold
    print #SharesGranted                                       (  ,033,017) edit 99,999,999.999999 bold
    print #ValueExpense                                    (  ,054,019) edit $$$9,999,999,999.99 bold
    print #Adjustment                                      (  ,088,019) edit $$$9,999,999,999.99 bold
    print #NetExpense                                      (  ,109,019) edit $$$9,999,999,999.99 bold
!    print #PriorExpense                                    (  ,109,019) edit $$$9,999,999,999.99 bold
    print #FutureExpense                                   (  ,130,019) edit $$$9,999,999,999.99 bold
    print #CurrentExpense                                  (  ,151,019) edit $$$9,999,999,999.99 bold
    print ''                                               (+1,   ,   )
  end-if

  do Update-Totals

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Update-Totals

  let #TotalshGranted      = #TotalshGranted      + #ShGranted
  let #TotalGranted        = #TotalGranted        + #SharesGranted
  let #TotalValueExpense   = #TotalValueExpense   + #ValueExpense
  let #TotalAdjustment     = #TotalAdjustment     + #Adjustment
  let #TotalNetExpense     = #TotalNetExpense     + #NetExpense
  let #TotalCurrentExpense = #TotalCurrentExpense + #CurrentExpense
  let #TotalPriorExpense   = #TotalPriorExpense   + #PriorExpense
  let #TotalFutureExpense  = #TotalFutureExpense  + #FutureExpense

  let #TypeshGranted       = #TypeshGranted       + #ShGranted
  let #TypeGranted         = #TypeGranted         + #SharesGranted
  let #TypeValueExpense    = #TypeValueExpense    + #ValueExpense
  let #TypeAdjustment      = #TypeAdjustment      + #Adjustment
  let #TypeNetExpense      = #TypeNetExpense      + #NetExpense
  let #TypeCurrentExpense  = #TypeCurrentExpense  + #CurrentExpense
  let #TypePriorExpense    = #TypePriorExpense    + #PriorExpense
  let #TypeFutureExpense   = #TypeFutureExpense   + #FutureExpense

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Type
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Type

  if $AccountStandard = 'A'
    and $ExpenseType = 'B'

    
    if $PerOrg = 'EMP' OR 
      ($PerOrg = 'POI' AND $PoiType = '00004')
      let $TypeLbl = $ProformaLbl
    end-if
    if $PerOrg = 'CWR' OR 
      ($PerOrg = 'POI' AND $PoiType = '00003')
      let $TypeLbl = $ActualLbl
    end-if

    print $TypeLbl                                         (+1,001,008) bold
    print ':'                                              (  ,   ,   ) bold
    print #TypeshGranted                                   (  ,011,020) edit 9,999,999,999.999999 bold
    print #TypeGranted                                     (  ,033,017) edit 99,999,999.999999 bold
    print #TypeValueExpense                                (  ,054,019) edit $$$9,999,999,999.99 bold
    if (#TypeAdjustment >= -.01 AND #TypeAdjustment <= 0.01)
      let #TypeAdjustment = 0.0
    end-if
    print #TypeAdjustment                                  (  ,088,019) edit $$$9,999,999,999.99 bold
    print #TypeNetExpense                                  (  ,109,019) edit $$$9,999,999,999.99 bold
    print #TypeFutureExpense                               (  ,130,019) edit $$$9,999,999,999.99 bold
    print #TypeCurrentExpense                              (  ,151,019) edit $$$9,999,999,999.99 bold
    print ''                                               (+1,   ,   )

    let #TypeGranted        = 0
    let #TypeshGranted      = 0
    let #TypeValueExpense   = 0
    let #TypeAdjustment     = 0
    let #TypeNetExpense     = 0
    let #TypeCurrentExpense = 0
    let #TypePriorExpense   = 0
    let #TypeFutureExpense  = 0

  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Summary
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Summary

  print $TotalLbl                                        (+2,001,005) bold
  print ':'                                              (  ,   ,   ) bold
  print #TotalshGranted                                  (  ,011,020) edit 9,999,999,999.999999 bold
  print #TotalGranted                                    (  ,033,017) edit 99,999,999.999999 bold
  print #TotalValueExpense                               (  ,054,019) edit $$$9,999,999,999.99 bold
  if (#TotalAdjustment >= -.01 AND #TotalAdjustment <= 0.01)
      let #TotalAdjustment = 0.0
  end-if
  
  print #TotalAdjustment                                 (  ,088,019) edit $$$9,999,999,999.99 bold
  print #TotalNetExpense                                 (  ,109,019) edit $$$9,999,999,999.99 bold
  print #TotalFutureExpense                              (  ,130,019) edit $$$9,999,999,999.99 bold
  print #TotalCurrentExpense                             (  ,151,019) edit $$$9,999,999,999.99 bold

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   ! Gets the report language
