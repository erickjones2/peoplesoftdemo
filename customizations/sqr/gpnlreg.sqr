!**********************************************************************!
!  gpnlreg: Payroll Register Report (NLD)                            !
!**********************************************************************!
!**********************************************************************!
!                                                                      !
!                                                                      !
!                                                                      !
!                                                                      !
! This software and related documentation are provided under a         !
! license agreement containing restrictions on use and                 !
! disclosure and are protected by intellectual property                !
! laws. Except as expressly permitted in your license agreement        !
! or allowed by law, you may not use, copy, reproduce,                 !
! translate, broadcast, modify, license, transmit, distribute,         !
! exhibit, perform, publish or display any part, in any form or        !
! by any means. Reverse engineering, disassembly, or                   !
! decompilation of this software, unless required by law for           !
! interoperability, is prohibited.                                     !
! The information contained herein is subject to change without        !
! notice and is not warranted to be error-free. If you find any        !
! errors, please report them to us in writing.                         !
!                                                                      !
!                                                                      !
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              !
! All Rights Reserved.                                                 !
!**********************************************************************!
!                                                                      !
!          $Date:  2013/01/18:03:57:09                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      !
!**********************************************************************!

#include 'setenv.sqc' !Set environment

#define  COMPANY_TBL
#define  ESTAB_TBL

#define DataRows       45
#define iCol1          1
#define iCol2          10
#define iCol3          45
#define iCol4          55
#define iCol5          75
#define iCol6          95
#define iCol7          115
#define iCol8          135
#define iCol9          155
#define iCol10         175

Begin-Setup
#Include 'ptset02.sqc'   !Printer and page-size initialization
End-Setup

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Term
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report

begin-heading 2
  alter-printer font=4 point-size=12
  print $ReportTitle     (1,1) bold
end-heading

!***********************************************************************
!  Init-Report
!***********************************************************************
begin-procedure Init-Report
  move 'GPNLREG' to $ReportID

  alter-locale
   thousand-separator = '.'
   decimal-separator  = ','

  do Stdapi-Init
  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation($ReportID)
  do Get_Translat_Info
  if $prcs_process_instance = ''
     !No Prompt
  else
     let #prcs_process_instance = To_number($prcs_process_instance)
     Do Get-values
  end-if
end-procedure

!***********************************************************************
!  Get-Values
!***********************************************************************
begin-procedure Get-Values
  let $sql-statement = 'gpnlreg,Select,Get-Values (1)'
BEGIN-SELECT ON-ERROR = SQL-Error
GPNL_RPT_FILTER4
   let #Rpt-Filter = &GPNL_RPT_FILTER4
GP_ELN_SET
   let #Elem-Filter = &GP_ELN_SET
GPNL_RPT_ORDER
   let #Rpt-Order = &GPNL_RPT_ORDER
GPNL_PERCENT_RATE
   let #Percent = &GPNL_PERCENT_RATE
CAL_PRD_ID
GPNL_CAL_PRD_ID2
GPNL_Y_N
COMPANY &HCOMPANY
ESTABID &HESTABID
GB_GROUP_ID 
GB_EFFDT 
GB_REFINE_DATE
FROM PS_GPNL_RC_REG 
WHERE OPRID = $prcs_oprid
AND RUN_CNTL_ID = $prcs_run_cntl_id
END-SELECT

  let $sql-statement = 'gpnlreg,Select,Get-Values (2)'

BEGIN-SELECT ON-ERROR = SQL-Error
max(PRD_END_DT) &PRD_END_DT
   let $EffDt = &PRD_END_DT
FROM PS_GP_CAL_PRD 
WHERE CAL_PRD_ID = &CAL_PRD_ID or CAL_PRD_ID = &GPNL_CAL_PRD_ID2
GROUP BY CAL_PRD_ID
END-SELECT

end-procedure

!***********************************************************************
! Get_Translat_Info                                                    *
!***********************************************************************
begin-procedure Get_Translat_Info
   do Init_Report_Translation($ReportID, $language_cd)
   do Get_Field_Information($ReportID, 'REPORT_TITLE', $ReportTitle, #CW)
   do Get_Field_Information($ReportID, 'DELTAS', $Deltas, #CW)
   do Get_Field_Information($ReportID, 'PERCENTAGE', $Percentage, #CW)
   do Get_Field_Information($ReportID, 'PERIOD1', $Period1, #CW)
   do Get_Field_Information($ReportID, 'PERIOD2', $Period2, #CW)
   do Get_Field_Information($ReportID, 'PERIODS', $Periods, #CW)
   do Get_Field_Information($ReportID, 'PIN_NM', $Pin_nm, #CW)
   do Get_Field_Information($ReportID, 'PIN_TYPE', $Pin_type, #CW)
   do Get_Field_Information($ReportID, 'PREV_PERIOD', $Prev_period, #CW)
   do Get_Field_Information($ReportID, 'EMPLOYEE_TOTALS', $Empl_Totals, #CW)
   do Get_Field_Information($ReportID, 'COMPANY_TOTALS', $Comp_Totals, #CW)
   do Get_Field_Information($ReportID, 'ESTAB_TOTALS', $Estab_Totals, #CW)
   do Get_Field_Information($ReportID, 'REPORT_TOTALS', $Report_Totals, #CW)
   do Get_Field_Information($ReportID, 'GPNL_RPT_FILTER4', $HFilter4, #CW)
   do Get_Field_Information($ReportID, 'GPNL_RPT_FILTER5', $HFilter5, #CW)
   do Get_Field_Information($ReportID, 'GPNL_RPT_ORDER', $HOrder, #CW)
   do Get_Field_Information($ReportID, 'GPNL_Y_N', $HExclude, #CW)
   do Get_Field_Information($ReportID, 'GB_EFFDT', $HGroup_Date, #CW)
   do Get_Field_Information($ReportID, 'GB_REFINE_DATE', $HRefine_Date, #CW)
   do Get_Field_Information($ReportID, 'FILTER1', $Filter1, #CW)
   do Get_Field_Information($ReportID, 'FILTER2', $Filter2, #CW)
   do Get_Field_Information($ReportID, 'FILTER3', $Filter3, #CW)
   do Get_Field_Information($ReportID, 'FILTER4', $Filter4, #CW)
end-procedure

!***********************************************************************
!  Process-Main
!***********************************************************************
begin-procedure Process-Main
  let #TotCol1A = 0
  let #TotCol1B = 0
  let #TotPerc = 0
  let #TotCol2 = 0
  let #TotCol3 = 0
  let #row = 0

  let $sql-statement = 'gpnlreg,Select,Process-Main (1)'

BEGIN-SELECT ON-ERROR = SQL-Error
MAX(JOBINSTANCE) &INSTANCE
FROM PS_GPNL_REG1_TMP
END-SELECT

  let $sql-statement = 'gpnlreg,Select,Process-Main (2)'

  do Print-Header

BEGIN-SELECT ON-ERROR = SQL-Error
COMPANY  

  let $CompanyID = &COMPANY

  do Zero-Company

  do Print-Page

FROM PS_GPNL_REG1_TMP
WHERE JOBINSTANCE = &INSTANCE
GROUP BY COMPANY
ORDER BY COMPANY
END-SELECT

  do Print-Totals

  let $sql-statement = 'gpnlreg,Delete,Process-Main (3)'
BEGIN-SQL ON-ERROR=SQL-Error
DELETE FROM PS_GPNL_REG1_TMP
WHERE JOBINSTANCE = &INSTANCE
END-SQL

  let $sql-statement = 'gpnlreg,Delete,Process-Main (4)'
BEGIN-SQL ON-ERROR=SQL-Error
DELETE FROM PS_GPNL_REG_TMP
WHERE JOBINSTANCE = &INSTANCE
END-SQL

end-procedure

!***********************************************************************
!  Print-Header
!***********************************************************************
begin-procedure Print-Header
  alter-printer font=5 point-size=8

  print $Periods (-1,1)
  print &CAL_PRD_ID (,{iCol2})
  print ' & ' (,)
  print &GPNL_CAL_PRD_ID2 (,+1)
  Print $HFilter4 (+1,1)
  if #Rpt-Filter = 1
     print $Filter1 (,{iCol2})
  else
     if #Rpt-Filter = 2
        let $CompanyID = &HCOMPANY
        do Get-Company-Descr
        print $Filter2 (,{iCol2})
        print ' - ' (,)
        print $CompDescr (,)
     else
        if #Rpt-Filter = 3
           let $EstabID = &HESTABID
           Do Get-Estab-Descr
           print $Filter3 (,{iCol2})
           print ' - ' (,)
           print $EstabDescr  (,)
        else
           print $Filter4 (,{iCol2})
           print ' - ' (,)
           let $GB_Group_ID = &GB_GROUP_ID 
           let $AsOfDate = &GB_EFFDT
           Do Get-GB-Group-Descr
           print $Group_Descr (,)
           print $HGroup_Date (,+5)
           Do Format-DateTime(&GB_EFFDT, $GB_EFFDT, {DEFDMY},'','')
           print $GB_EFFDT  (,+1)
           print $HRefine_Date (,+5)
           Do Format-DateTime(&GB_REFINE_DATE, $GB_REFINE_DATE, {DEFDMY},'','')
           print $GB_REFINE_DATE  (,+1)
        end-if
     end-if
  end-if
  Print $HFilter5 (+1,1)
  Print $Elem-Filter (,{iCol2})

  if #Percent > 0
    Print $Percentage (+1,1)
    print #Percent (,)
  end-if
  if &GPNL_Y_N = 'Y'
    print $HExclude (+1,1)
  end-if
  print ' ' (+1,)
end-procedure

!***********************************************************************
!  Print-Col-Headings
!***********************************************************************
begin-procedure Print-Col-Headings
  do Next-Row(1)
  alter-printer font=5 point-size=8
  Print $Pin_nm (+1,{iCol2})     
  Print $Pin_type (,{iCol3})     
  print $Period1 (,{iCol5})      
  print $Period2 (,{iCol6})      
  print $Percentage (,{iCol7})   
  print $Deltas (,{iCol8})       
  print $Prev_period (,{iCol9})  
end-procedure

!***********************************************************************
!  Get-Totals - No employee details needed
!***********************************************************************
begin-procedure Get-Totals
  let $sql-statement = 'gpnlreg,Select,Get-Totals (1)'
  do Next-Row(2)
  alter-printer font=5 point-size=8
  Print $EstabID (+2,{iCol2}) bold

  do Print-Col-Headings

BEGIN-SELECT ON-ERROR = SQL-Error
sum(R.GPNL_COLUMN_1A) &GPNL_COLUMN_1A
sum(R.GPNL_COLUMN_1B) &GPNL_COLUMN_1B
sum(R.GPNL_PERCENT_RATE) &GPNL_PERCENT
sum(R.GPNL_COLUMN_2) &GPNL_COLUMN_2 
sum(R.GPNL_COLUMN_3) &GPNL_COLUMN_3
P.DESCR  &DESCR1       
T.DESCRSHORT  &DESCR2
P.PIN_NUM &Pin

    move &PIN to $Pin
    let $Descr1=$Pin || '-'|| &DESCR1 

    do Print-Details(1,5, 7,$Descr1,&DESCR2,&GPNL_COLUMN_1A,&GPNL_COLUMN_1B,&GPNL_PERCENT,&GPNL_COLUMN_2,&GPNL_COLUMN_3)

    let #EstCol1A = #EstCol1A + &GPNL_COLUMN_1A
    let #EstCol1B = #EstCol1B + &GPNL_COLUMN_1B 
    let #EstPerc = #EstPerc + &GPNL_PERCENT 
    let #EstCol2 = #EstCol2 + &GPNL_COLUMN_2
    let #EstCol3 = #EstCol3 + &GPNL_COLUMN_3

FROM PS_GPNL_REG_TMP R , PS_GP_PIN P, PS_GP_PINTYPE_VW T 
WHERE R.JOBINSTANCE = &INSTANCE
AND P.PIN_NUM = R.PIN_NUM
AND P.PIN_TYPE=T.PIN_TYPE 
AND R.COMPANY = $CompanyID
AND R.ESTABID = $EstabID
GROUP BY R.COMPANY, R.ESTABID, P.PIN_NUM, P.DESCR, T.DESCRSHORT
HAVING ABS(sum(R.GPNL_PERCENT_RATE)) >= #Percent
END-SELECT
end-procedure

!***********************************************************************
!  Get-Data - Employee details needed
!***********************************************************************
begin-procedure Get-Data
  let $sql-statement = 'gpnlreg,Select,Get-Data (1)'
  do Next-Row (2)
  alter-printer font=5 point-size=8
  Print $FullName (+2,{iCol2}) bold
  Print $EmplID (,{iCol4}) bold
  do Print-Col-Headings

BEGIN-SELECT ON-ERROR = SQL-Error
R.GPNL_COLUMN_1A 
R.GPNL_COLUMN_1B 
R.GPNL_PERCENT_RATE
R.GPNL_COLUMN_2  
R.GPNL_COLUMN_3   
R.PIN_NUM
P.DESCR         
T.DESCRSHORT     

    do Print-Details(1,5, 6, &P.DESCR, &T.DESCRSHORT, &R.GPNL_COLUMN_1A, &R.GPNL_COLUMN_1B, &R.GPNL_PERCENT_RATE,&R.GPNL_COLUMN_2, &R.GPNL_COLUMN_3)

    let #EmpCol1A = #EmpCol1A + &R.GPNL_COLUMN_1A
    let #EmpCol1B = #EmpCol1B + &R.GPNL_COLUMN_1B 
    let #EmpPerc = #EmpPerc + &R.GPNL_PERCENT_RATE 
    let #EmpCol2 = #EmpCol2 + &R.GPNL_COLUMN_2
    let #EmpCol3 = #EmpCol3 + &R.GPNL_COLUMN_3

FROM PS_GPNL_REG_TMP R , PS_GP_PIN P, PS_GP_PINTYPE_VW T 
WHERE R.JOBINSTANCE = &INSTANCE
AND R.COMPANY = $CompanyID
AND R.ESTABID = $EstabID
AND P.PIN_NUM = R.PIN_NUM
AND P.PIN_TYPE=T.PIN_TYPE 
AND ABS(R.GPNL_PERCENT_RATE) >= #Percent
AND R.EMPLID = $EmplID 
AND R.EMPL_RCD = #EmplRCD
ORDER BY R.PIN_NUM
END-SELECT

  do Print-Emp-Totals
end-procedure


!***********************************************************************
!  Print-Details
!***********************************************************************
begin-procedure Print-Details(#Lines,#Font, #Size,$Descr1,$Descr2,#Col1A,#Col1B,#Perc,#Col2,#Col3)

  if #Lines = 1 
    do Next-Row(#Lines)
    alter-printer font=#Font point-size=#Size
    Print $Descr1 (+#Lines,{iCol2})
    Print $Descr2 (,{iCol3})
    print #Col1A (,{iCol5}) edit B,999,999,999.99
    print #Col1B (,{iCol6}) edit B,999,999,999.99
    print #Perc  (,{iCol7}) edit B,999,999,999.99
    print #Col2  (,{iCol8}) edit B,999,999,999.99
    print #Col3  (,{iCol9}) edit B,999,999,999.99
  else
    alter-printer font=#Font point-size=#Size
    Print $Descr1 (+#Lines,{iCol2}) BOLD
    Print $Descr2 (,{iCol3}) BOLD
    print #Col1A (,{iCol5}) edit B,999,999,999.99 BOLD
    print #Col1B (,{iCol6}) edit B,999,999,999.99 BOLD
    print #Perc  (,{iCol7}) edit B,999,999,999.99 BOLD
    print #Col2  (,{iCol8}) edit B,999,999,999.99 BOLD
    print #Col3  (,{iCol9}) edit B,999,999,999.99 BOLD
    do Next-Row(#Lines)
  end-if

end-procedure

!***********************************************************************
!  Print-Emp-Totals
!***********************************************************************
begin-procedure Print-Emp-Totals
  do Print-Details(2,5, 6,$Empl_Totals,$FullName,#EmpCol1A,#EmpCol1B,#EmpPerc,#EmpCol2,#EmpCol3)

  let #EstCol1A = #EstCol1A + #EmpCol1A
  let #EstCol1B = #EstCol1B + #EmpCol1B
  let #EstPerc = #EstPerc + #EmpPerc
  let #EstCol2 = #EstCol2 + #EmpCol2
  let #EstCol3 = #EstCol3 + #EmpCol3

  do Zero-Employee
end-procedure

!***********************************************************************
!  Get-Estab-Descr
!***********************************************************************
begin-procedure Get-Estab-Descr
  let $sql-statement = 'gpnlreg,Select,Get-Estab-Descr (1)' 

BEGIN-SELECT ON-ERROR = SQL-Error
DESCR &EstabDescr
EFFDT &EstabEffdt
  do Get_Related_ESTAB_TBL(&EstabEffdt,$EstabID)
  let $EstabDescr = ' ' || rtrim($ESTAB_TBL-DESCR, ' ')
   if $EstabDescr = ' '
      let $EstabDescr = &EstabDescr
   end-if
FROM PS_ESTAB_TBL 
WHERE ESTABID=$EstabID
AND EFFDT = (SELECT MAX(EFFDT)
       FROM   PS_ESTAB_TBL
       WHERE  ESTABID=$EstabID
         AND  EFFDT  <= $EffDt)
END-SELECT
end-procedure

!***********************************************************************
!  Print-Estab-Totals
!***********************************************************************
begin-procedure Print-Estab-Totals
  do Get-Estab-Descr
  do Print-Details(2,5, 7,$Estab_Totals,$EstabDescr,#EstCol1A,#EstCol1B, #EstPerc, #EstCol2,#EstCol3)

  let #CompCol1A = #CompCol1A + #EstCol1A
  let #CompCol1B = #CompCol1B + #EstCol1B
  let #CompPerc = #CompPerc + #EstPerc
  let #CompCol2 = #CompCol2 + #EstCol2
  let #CompCol3 = #CompCol3 + #EstCol3

  do Zero-Estab
end-procedure

!***********************************************************************
!  Get-Company-Descr
!***********************************************************************
begin-procedure Get-Company-Descr
  let $sql-statement = 'gpnlreg,Select,Get-Company-Descr (1)'

BEGIN-SELECT ON-ERROR = SQL-Error
DESCR &CompDescr
EFFDT &CompEffdt
   do Get_Related_COMPANY_TBL(&COMPANY,&CompEffdt)
   let $CompDescr = ' ' || rtrim($COMPANY_TBL-DESCR, ' ')
   if $CompDescr = ' '
      let $CompDescr = &CompDescr
   end-if
FROM PS_COMPANY_TBL 
where COMPANY=$CompanyID
AND EFFDT =  (SELECT MAX(EFFDT)
       FROM   PS_COMPANY_TBL
       WHERE  COMPANY = $CompanyID
         AND  EFFDT  <= $EffDt)
END-SELECT
end-procedure


!***********************************************************************
!  Print-Comp-Totals
!***********************************************************************
begin-procedure Print-Comp-Totals
  alter-printer font=5 point-size=8

  do Get-Company-Descr
  do Print-Details(2,5, 8,$Comp_Totals,$CompDescr,#CompCol1A,#CompCol1B, #CompPerc,#CompCol2,#CompCol3)

  let #TotCol1A = #TotCol1A + #CompCol1A
  let #TotCol1B = #TotCol1B + #CompCol1B
  let #TotPerc = #TotPerc + #CompPerc
  let #TotCol2 = #TotCol2 + #CompCol2
  let #TotCol3 = #TotCol3 + #CompCol3

  do Zero-Company
end-procedure

!***********************************************************************
!  Print-Totals
!***********************************************************************
begin-procedure Print-Totals
  do Print-Details(2,5, 9,$Report_Totals,'',#TotCol1A,#TotCol1B,#TotPerc, #TotCol2,#TotCol3)
end-procedure

!***********************************************************************
!  Next-Row
!***********************************************************************
begin-procedure Next-Row (#Lines)
     add #Lines to #row
     if #row > {DataRows}
        let #row = 0
       NEW-PAGE
       do Print-Header
     end-if
end-procedure

!***********************************************************************
!  Print-Page
!***********************************************************************
begin-procedure Print-Page
  let $EmplID =''
  let #EmplRCD = 0
  let $EstabID = ''

  let #row = 0
  do Zero-Estab

  if #Rpt-Order = 1 
    do Zero-Employee

    let $sql-statement = 'gpnlreg,Select,Print-Page (1)'
BEGIN-SELECT ON-ERROR = SQL-Error
ESTABID
EMPLID
   let $EmplID = &EMPLID
EMPL_RCD
   let #EmplRCD = &EMPL_RCD
NAME_INITIALS
NAME_PREFIX
FIRST_NAME
LAST_NAME
NAME_ROYAL_PREFIX

    let $FullName = rtrim(&LAST_NAME, ' ') ||', '|| rtrim(&FIRST_NAME,' ')

    if &ESTABID <> $EstabID and $EstabID <>''
      do Get-Estab-Descr
      do Print-Estab-Totals
    end-if

    let $EstabID = &ESTABID

    do Get-Data

FROM PS_GPNL_REG1_TMP 
WHERE JOBINSTANCE = &INSTANCE
AND exists (select 1 from PS_GPNL_REG_TMP T 
WHERE T. JOBINSTANCE = PS_GPNL_REG1_TMP.JOBINSTANCE
AND T.COMPANY=PS_GPNL_REG1_TMP.COMPANY
AND T.ESTABID=PS_GPNL_REG1_TMP.ESTABID
AND T.EMPLID=PS_GPNL_REG1_TMP.EMPLID 
AND T.EMPL_RCD=PS_GPNL_REG1_TMP.EMPL_RCD
AND ABS(T.GPNL_PERCENT_RATE) >= #Percent)
AND COMPANY = $CompanyID
ORDER BY ESTABID, EMPLID,EMPL_RCD

END-SELECT

      do Get-Estab-Descr
      do Print-Estab-Totals

  else

    let $sql-statement = 'gpnlreg,Select,Print-Page (2)'

BEGIN-SELECT ON-ERROR = SQL-Error
TMP.ESTABID &ESTAB
 
    if &ESTAB <> $EstabID and $EstabID <>''
      do Print-Estab-Totals
    end-if

    let $EstabID = &ESTAB

    do Get-Totals

FROM PS_GPNL_REG1_TMP TMP
WHERE TMP.JOBINSTANCE = &INSTANCE
AND TMP.COMPANY = $CompanyID
GROUP BY ESTABID
END-SELECT

  end-if

  do Print-Estab-Totals

  do Print-Comp-Totals

end-procedure

!***********************************
! Zero column totals procedures
!***********************************
begin-procedure Zero-Employee
  let #EmpCol1A = 0
  let #EmpCol1B = 0
  let #EmpPerc = 0
  let #EmpCol2 = 0
  let #EmpCol3 = 0
end-procedure

begin-procedure Zero-Estab
  let #EstCol1A = 0
  let #EstCol1B = 0
  let #EstPerc = 0
  let #EstCol2 = 0
  let #EstCol3 = 0
end-procedure

begin-procedure Zero-Company
  let #CompCol1A = 0
  let #CompCol1B = 0
  let #CompPerc = 0
  let #CompCol2 = 0
  let #CompCol3 = 0
end-procedure

!************************************************************************
!End of the SQR statements                                              *
!************************************************************************
#include 'stdapi.sqc'    !Routines to update run status
#include 'readmsgc.sqc'  !Read the Message Catalog Table
#Include 'reset1.sqc'    !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'  !Printer
#Include 'sqrtrans.sqc'  !For translations
#Include 'datemath.sqc'
#include 'rellang.sqc'   ! Translations File
#include 'hrctlnld.sqc'  !Get run control parameter values (NLD)
#include 'getgbgrp.sqc'  !Get group build description
