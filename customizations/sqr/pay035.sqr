!****************************************************
!  PAY035: PAYSHEET RECORDS AUDIT PRIOR TO CALCPAY *
!****************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  30772369                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set Database Environment


begin-report
  do Stdapi-Init
  move 'PAY035' to $ReportID

  move 'PAY035' to $WC_ProgramSrc

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay035_ReportTitle to $ReportTitle
  display $ReportTitle
  display ''
  do Get-Run-ID
  do Process-WC-Parameters

  if $WC_Del_RunID = 'Y'
    do Delete-WC-RunID
  else
    do Init-DateTime
    do Get-Current-DateTime
    do Format-DateTime($AsOfToday, $out, {DEFMDY},'','')
    move $out to $ReportDate
    display 'Report Began: ' noline
    display $AsOfNow
    display ''
    do Check-Pay-Page
    do Check-Pay-Line
    do Check-Pay-Earnings
    do Check-Pay-Earnings-Emplid
    do Check-Pay-Earnings-SUT
    do Check-Pay-Earnings-State
    do Check-Pay-Earnings-Locality
    do Check-Pay-Earnings-Jurisdiction
    do Check-Pay-Earnings-Territory
    do Check-Pay-Oth-Earns
    do Check-Pay-One-Time
    do Check-Pay-Tax-Ovrd
    do Check-Pay-Ctx-Ovrd
    do Check-Pay-Garn-Ovrd
    do Check-Comp-Codes
    do Check-For-Active-Job
    do Check-Contract-Pay
    do Get-Current-DateTime
    display ''
    display 'Report Ended: ' noline
    display $AsOfNow
    display 'Error Records: ' noline
    display #Records 999,999
    print 'Error Records: '  (+2,10)
    print #Records           (0,25) edit 999,999
  end-if

  do Stdapi-Term
end-report

#include 'setup31.sqc'   !Printer and page-size initialization

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY035 program id
   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY035', 'REPORT_TITLE', $Pay035_ReportTitle, #dummy_width)
   do Get_Field_Information ('PAY035', 'PAYRUNID',     $Pay035_PayRunId,    #dummy_width)
   do Get_Field_Information ('PAY035', 'COMP',         $Pay035_Comp,        #dummy_width)
   do Get_Field_Information ('PAY035', 'PAYGRP',       $Pay035_PayGrp,      #dummy_width)
   do Get_Field_Information ('PAY035', 'PAYENDDT',     $Pay035_PayEndDt,    #dummy_width)
   do Get_Field_Information ('PAY035', 'OFFCYCLE',     $Pay035_OffCycle,    #dummy_width)
   do Get_Field_Information ('PAY035', 'PAGE',         $Pay035_Page,        #dummy_width)
   do Get_Field_Information ('PAY035', 'LINE',         $Pay035_Line,        #dummy_width)
   do Get_Field_Information ('PAY035', 'EMPID',        $Pay035_EmpId,       #dummy_width)
   do Get_Field_Information ('PAY035', 'OKTOPAY',      $Pay035_OkToPay,     #dummy_width)
   do Get_Field_Information ('PAY035', 'CONTRACT_ID',  $Pay035_ContID,      #dummy_width)
   do Get_Field_Information ('PAY035', 'MSG',          $Pay035_Msg,         #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG1',      $Pay035_ErrMsg1,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG2',      $Pay035_ErrMsg2,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG3',      $Pay035_ErrMsg3,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG4',      $Pay035_ErrMsg4,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG5',      $Pay035_ErrMsg5,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG6',      $Pay035_ErrMsg6,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG7',      $Pay035_ErrMsg7,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG8',      $Pay035_ErrMsg8,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG9',      $Pay035_ErrMsg9,     #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG10',     $Pay035_ErrMsg10,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG11',     $Pay035_ErrMsg11,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG12',     $Pay035_ErrMsg12,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG13',     $Pay035_ErrMsg13,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG14',     $Pay035_ErrMsg14,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG15',     $Pay035_ErrMsg15,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG16',     $Pay035_ErrMsg16,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG17',     $Pay035_ErrMsg17,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG18',     $Pay035_ErrMsg18,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG19',     $Pay035_ErrMsg19,    #dummy_width)
   do Get_Field_Information ('PAY035', 'ERRMSG20',     $Pay035_ErrMsg20,    #dummy_width)
   do Get_Field_Information ('PAY035', 'WCMSG18',      $Pay035_WCMsg18,     #dummy_width)
   do Get_Field_Information ('PAY035', 'WCMSG19',      $Pay035_WCMsg19,     #dummy_width)
end-procedure

begin-heading 7

  #include 'stdhdgtr.sqc'
  print $Pay035_PayRunId          (+1,1)
  print $RUNID                    (0,13)
  print $Pay035_Comp              (+2,1)
  print $Pay035_PayGrp            (0,9)
  print $Pay035_PayEndDt          (0,18)
  print $Pay035_OffCycle          (0,32)
  print $Pay035_Page              (0,43)
  print $Pay035_Line              (0,50)
  print $Pay035_EmpId             (0,57)
  print $Pay035_OkToPay           (0,70)
  print $Pay035_Msg               (0,81)
end-heading


begin-procedure Get-Run-ID
  if $Prcs_Process_Instance = ''
    do Process-Run-ID
  else
    do Select-Parameters
    move $RC_PAY.RUN_ID  to  $RUNID
    move $RC_PAY.WC_RUN_OPTION to $WCRunOption
  end-if
end-procedure


begin-procedure Process-Run-ID
  move 0 to #Found
  while #Found = 0
    input $RunID 'Enter Pay Run ID'
    uppercase $RunID
    display $RUNID
    if $RunID = ''
      stop
    else
      do Edit-Run-ID
      if #Found = 1
        break
      else
        display 'Error --  Run ID not valid for any Pay Calendar.'
        move '' to $RunID
      end-if
    end-if
  end-while
  move 'N' to $SetOKToPay
! input $SetOKToPay 'Set OK_To_Pay = "N" on error? (Y/N)' maxlen=1
! uppercase $SetOKToPay
end-procedure


begin-procedure Edit-Run-ID
begin-SELECT
'X'
  move 1 to #Found
FROM  PS_PAY_CALENDAR
WHERE RUN_ID = $RunID
end-SELECT
end-procedure


begin-procedure Check-Pay-Page
  display 'Checking Pay_Page . . . ' noline
  move $Pay035_ErrMsg1 to $Message
begin-SELECT
B0.COMPANY,
B0.PAYGROUP,
B0.PAY_END_DT,
B0.OFF_CYCLE,
B0.PAGE_NUM
  move &B0.Company    to $Company
  move &B0.Paygroup   to $Paygroup
  move &B0.Pay_End_Dt to $Pay_End_Dt
  move &B0.Off_Cycle  to $Off_Cycle
  move &B0.PAGE_NUM      to #PAGE_NUM
  move 0              to #LINE_NUM
  move ''             to $Emplid
  move ''             to $OK_To_Pay
  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_PAGE B0
WHERE NOT EXISTS
  (SELECT 'X'
   FROM  PS_PAY_CALENDAR
   WHERE COMPANY    = B0.COMPANY
     AND PAYGROUP   = B0.PAYGROUP
     AND PAY_END_DT = B0.PAY_END_DT)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Line
  display 'Checking Pay_Line . . . ' noline
  move $Pay035_ErrMsg2 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG2'       to $MSGID
  end-if

begin-SELECT
B1.COMPANY,
B1.PAYGROUP,
B1.PAY_END_DT,
B1.OFF_CYCLE,
B1.PAGE_NUM,
B1.LINE_NUM

  move &B1.Company    to $Company
  move &B1.Paygroup   to $Paygroup
  move &B1.Pay_End_Dt to $Pay_End_Dt
  move &B1.Off_Cycle  to $Off_Cycle
  move &B1.PAGE_NUM      to #PAGE_NUM
  move &B1.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A1, PS_PAY_LINE B1
WHERE A1.RUN_ID     = $RunID
  AND B1.COMPANY    = A1.COMPANY
  AND B1.PAYGROUP   = A1.PAYGROUP
  AND B1.PAY_END_DT = A1.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_PAGE
     WHERE COMPANY    = B1.COMPANY
       AND PAYGROUP   = B1.PAYGROUP
       AND PAY_END_DT = B1.PAY_END_DT
       AND OFF_CYCLE  = B1.OFF_CYCLE
       AND PAGE_NUM      = B1.PAGE_NUM)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings
  display 'Checking Pay_Earnings . . . ' noline
  move $Pay035_ErrMsg3 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG3'       to $MSGID
  end-if

begin-SELECT
B2.COMPANY,
B2.PAYGROUP,
B2.PAY_END_DT,
B2.OFF_CYCLE,
B2.PAGE_NUM,
B2.LINE_NUM,
B2.ADDL_NBR


  move &B2.Company    to $Company
  move &B2.Paygroup   to $Paygroup
  move &B2.Pay_End_Dt to $Pay_End_Dt
  move &B2.Off_Cycle  to $Off_Cycle
  move &B2.PAGE_NUM      to #PAGE_NUM
  move &B2.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B2.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A2, PS_PAY_EARNINGS B2
WHERE A2.RUN_ID     = $RunID
  AND B2.COMPANY    = A2.COMPANY
  AND B2.PAYGROUP   = A2.PAYGROUP
  AND B2.PAY_END_DT = A2.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_LINE
     WHERE COMPANY    = B2.COMPANY
       AND PAYGROUP   = B2.PAYGROUP
       AND PAY_END_DT = B2.PAY_END_DT
       AND OFF_CYCLE  = B2.OFF_CYCLE
       AND PAGE_NUM      = B2.PAGE_NUM
       AND LINE_NUM      = B2.LINE_NUM)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings-Emplid
  display 'Checking Pay_Earnings.Emplid . . . ' noline
  move $Pay035_ErrMsg4 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG4'      to $MSGID
  end-if

begin-SELECT
B3.COMPANY,
B3.PAYGROUP,
B3.PAY_END_DT,
B3.OFF_CYCLE,
B3.PAGE_NUM,
B3.LINE_NUM,
B3.ADDL_NBR


  move &B3.Company    to $Company
  move &B3.Paygroup   to $Paygroup
  move &B3.Pay_End_Dt to $Pay_End_Dt
  move &B3.Off_Cycle  to $Off_Cycle
  move &B3.PAGE_NUM      to #PAGE_NUM
  move &B3.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B3.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A3, PS_PAY_EARNINGS B3
WHERE A3.RUN_ID     = $RunID
  AND B3.COMPANY    = A3.COMPANY
  AND B3.PAYGROUP   = A3.PAYGROUP
  AND B3.PAY_END_DT = A3.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_LINE
     WHERE COMPANY    = B3.COMPANY
       AND PAYGROUP   = B3.PAYGROUP
       AND PAY_END_DT = B3.PAY_END_DT
       AND OFF_CYCLE  = B3.OFF_CYCLE
       AND PAGE_NUM      = B3.PAGE_NUM
       AND LINE_NUM      = B3.LINE_NUM
       AND EMPLID     = B3.EMPLID)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings-SUT
  display 'Checking State_Tax_Data UI .. ' noline
  move $Pay035_ErrMsg5 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG5'       to $MSGID
  end-if

begin-SELECT
B13.COMPANY,
B13.PAYGROUP,
B13.PAY_END_DT,
B13.OFF_CYCLE,
B13.PAGE_NUM,
B13.LINE_NUM,
B13.ADDL_NBR


  move &B13.Company    to $Company
  move &B13.Paygroup   to $Paygroup
  move &B13.Pay_End_Dt to $Pay_End_Dt
  move &B13.Off_Cycle  to $Off_Cycle
  move &B13.PAGE_NUM      to #PAGE_NUM
  move &B13.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B13.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAY_CALENDAR A13, PS_PAY_EARNINGS B13, PS_STATE_TAX_DATA C13
WHERE A13.RUN_ID     = $RunID
  AND B13.COMPANY    = A13.COMPANY
  AND B13.PAYGROUP   = A13.PAYGROUP
  AND B13.PAY_END_DT = A13.PAY_END_DT
  AND C13.COMPANY    = A13.COMPANY
  AND C13.EMPLID     = B13.EMPLID
  AND C13.UI_JURISDICTION = ' '


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings-State
  display 'Checking Pay_Earnings.State . . . ' noline
  move $Pay035_ErrMsg6 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG6'      to $MSGID
  end-if

begin-SELECT
B4.COMPANY,
B4.PAYGROUP,
B4.PAY_END_DT,
B4.OFF_CYCLE,
B4.PAGE_NUM,
B4.LINE_NUM,
B4.ADDL_NBR

  move &B4.Company    to $Company
  move &B4.Paygroup   to $Paygroup
  move &B4.Pay_End_Dt to $Pay_End_Dt
  move &B4.Off_Cycle  to $Off_Cycle
  move &B4.PAGE_NUM      to #PAGE_NUM
  move &B4.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B4.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAY_CALENDAR A4, PS_PAY_EARNINGS B4, PS_PAYGROUP_TBL C4
WHERE A4.RUN_ID     = $RunID
  AND B4.COMPANY    = A4.COMPANY
  AND B4.PAYGROUP   = A4.PAYGROUP
  AND B4.PAY_END_DT = A4.PAY_END_DT
  AND A4.PAYGROUP   = C4.PAYGROUP
  AND A4.COMPANY    = C4.COMPANY
  AND C4.EFFDT      =
    (SELECT MAX(EFFDT)
     FROM  PS_PAYGROUP_TBL
     WHERE COMPANY   = C4.COMPANY
     AND   PAYGROUP  = C4.PAYGROUP
     AND   EFFDT    <= A4.PAY_END_DT)
  AND C4.COUNTRY    <> 'CAN'
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_STATE_TAX_DATA
     WHERE EMPLID     = B4.EMPLID
       AND COMPANY    = B4.COMPANY
       AND EFFDT     <= B4.PAY_END_DT
       AND STATE      = B4.STATE)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings-Locality
  display 'Checking Pay_Earnings.Locality . . . ' noline
  move $Pay035_ErrMsg7 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG7'      to $MSGID
  end-if

begin-SELECT
B5.COMPANY,
B5.PAYGROUP,
B5.PAY_END_DT,
B5.OFF_CYCLE,
B5.PAGE_NUM,
B5.LINE_NUM,
B5.ADDL_NBR


  move &B5.Company    to $Company
  move &B5.Paygroup   to $Paygroup
  move &B5.Pay_End_Dt to $Pay_End_Dt
  move &B5.Off_Cycle  to $Off_Cycle
  move &B5.PAGE_NUM      to #PAGE_NUM
  move &B5.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B5.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records


FROM  PS_PAY_CALENDAR A5, PS_PAY_EARNINGS B5
WHERE A5.RUN_ID     = $RunID
  AND B5.COMPANY    = A5.COMPANY
  AND B5.PAYGROUP   = A5.PAYGROUP
  AND B5.PAY_END_DT = A5.PAY_END_DT
  AND B5.LOCALITY <> ' '
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_CO_LOCALTAX_TBL
     WHERE COMPANY    = B5.COMPANY
       AND STATE      = B5.STATE
       AND LOCALITY   = B5.LOCALITY
       AND EFFDT     <= B5.PAY_END_DT)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Earnings-Territory
  display 'Checking Pay_Earnings.Territory . . . ' noline
  move $Pay035_ErrMsg16 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG16'      to $MSGID
  end-if

begin-SELECT DISTINCT
B14.COMPANY,
B14.PAYGROUP,
B14.PAY_END_DT,
B14.OFF_CYCLE,
B14.PAGE_NUM,
B14.LINE_NUM,
B14.ADDL_NBR


  move &B14.Company    to $Company
  move &B14.Paygroup   to $Paygroup
  move &B14.Pay_End_Dt to $Pay_End_Dt
  move &B14.Off_Cycle  to $Off_Cycle
  move &B14.PAGE_NUM   to #PAGE_NUM
  move &B14.LINE_NUM   to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B14.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records

FROM  PS_PAY_CALENDAR A14, PS_PAY_EARNINGS B14, PS_PAYGROUP_TBL C14
WHERE A14.RUN_ID     = $RunID
  AND B14.COMPANY    = A14.COMPANY
  AND B14.PAYGROUP   = A14.PAYGROUP
  AND B14.PAY_END_DT = A14.PAY_END_DT
  AND A14.COMPANY    = C14.COMPANY
  AND A14.PAYGROUP   = C14.PAYGROUP
AND C14.EFFDT      =
    (SELECT MAX(EFFDT)
     FROM  PS_PAYGROUP_TBL PT1
     WHERE PT1.COMPANY   = C14.COMPANY
     AND   PT1.PAYGROUP  = C14.PAYGROUP
     AND   PT1.EFFDT    <= A14.PAY_END_DT)
  AND C14.COUNTRY <> 'CAN'
  AND B14.STATE IN ('VI','GU','AS','PR')
  AND EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS D14
     WHERE D14.EMPLID           = B14.EMPLID
       AND D14.COMPANY          = B14.COMPANY
       AND D14.PAY_END_DT       = B14.PAY_END_DT
       AND D14.OFF_CYCLE        = B14.OFF_CYCLE
       AND D14.SEPCHK           = B14.SEPCHK
       AND D14.PAGE_NUM         = B14.PAGE_NUM
       AND D14.LINE_NUM         = B14.LINE_NUM
       AND D14.PAYGROUP         = B14.PAYGROUP
       AND (D14.STATE <> B14.STATE))



end-SELECT
  display 'Done'

end-procedure

begin-procedure Check-Pay-Oth-Earns
  display 'Checking Pay_Oth_Earns . . . ' noline
  move $Pay035_ErrMsg8 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG8'       to $MSGID
  end-if

begin-SELECT DISTINCT
B6.COMPANY,
B6.PAYGROUP,
B6.PAY_END_DT,
B6.OFF_CYCLE,
B6.PAGE_NUM,
B6.LINE_NUM,
B6.ADDL_NBR


  move &B6.Company    to $Company
  move &B6.Paygroup   to $Paygroup
  move &B6.Pay_End_Dt to $Pay_End_Dt
  move &B6.Off_Cycle  to $Off_Cycle
  move &B6.PAGE_NUM      to #PAGE_NUM
  move &B6.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B6.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A6, PS_PAY_OTH_EARNS B6
WHERE A6.RUN_ID     = $RunID
  AND B6.COMPANY    = A6.COMPANY
  AND B6.PAYGROUP   = A6.PAYGROUP
  AND B6.PAY_END_DT = A6.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS
     WHERE COMPANY    = B6.COMPANY
       AND PAYGROUP   = B6.PAYGROUP
       AND PAY_END_DT = B6.PAY_END_DT
       AND OFF_CYCLE  = B6.OFF_CYCLE
       AND PAGE_NUM      = B6.PAGE_NUM
       AND LINE_NUM      = B6.LINE_NUM
       AND ADDL_NBR      = B6.ADDL_NBR
       AND SEPCHK     = B6.SEPCHK)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-One-Time
  display 'Checking Pay_One_Time . . . ' noline
  move $Pay035_ErrMsg9 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG9'       to $MSGID
  end-if

begin-SELECT DISTINCT
B7.COMPANY,
B7.PAYGROUP,
B7.PAY_END_DT,
B7.OFF_CYCLE,
B7.PAGE_NUM,
B7.LINE_NUM,
B7.ADDL_NBR


  move &B7.Company    to $Company
  move &B7.Paygroup   to $Paygroup
  move &B7.Pay_End_Dt to $Pay_End_Dt
  move &B7.Off_Cycle  to $Off_Cycle
  move &B7.PAGE_NUM      to #PAGE_NUM
  move &B7.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B7.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A7, PS_PAY_ONE_TIME B7
WHERE A7.RUN_ID     = $RunID
  AND B7.COMPANY    = A7.COMPANY
  AND B7.PAYGROUP   = A7.PAYGROUP
  AND B7.PAY_END_DT = A7.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS
     WHERE COMPANY    = B7.COMPANY
       AND PAYGROUP   = B7.PAYGROUP
       AND PAY_END_DT = B7.PAY_END_DT
       AND OFF_CYCLE  = B7.OFF_CYCLE
       AND PAGE_NUM      = B7.PAGE_NUM
       AND LINE_NUM      = B7.LINE_NUM
       AND ADDL_NBR      = B7.ADDL_NBR
       AND SEPCHK     = B7.SEPCHK)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Tax-Ovrd
  display 'Checking Pay_Tax_Ovrd . . . ' noline
  move $Pay035_ErrMsg10 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG10'     to $MSGID
  end-if

begin-SELECT DISTINCT
B8.COMPANY,
B8.PAYGROUP,
B8.PAY_END_DT,
B8.OFF_CYCLE,
B8.PAGE_NUM,
B8.LINE_NUM,
B8.ADDL_NBR

  move &B8.Company    to $Company
  move &B8.Paygroup   to $Paygroup
  move &B8.Pay_End_Dt to $Pay_End_Dt
  move &B8.Off_Cycle  to $Off_Cycle
  move &B8.PAGE_NUM      to #PAGE_NUM
  move &B8.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B8.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A8, PS_PAY_TAX_OVRD B8
WHERE A8.RUN_ID     = $RunID
  AND B8.COMPANY    = A8.COMPANY
  AND B8.PAYGROUP   = A8.PAYGROUP
  AND B8.PAY_END_DT = A8.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS
     WHERE COMPANY    = B8.COMPANY
       AND PAYGROUP   = B8.PAYGROUP
       AND PAY_END_DT = B8.PAY_END_DT
       AND OFF_CYCLE  = B8.OFF_CYCLE
       AND PAGE_NUM      = B8.PAGE_NUM
       AND LINE_NUM      = B8.LINE_NUM
       AND ADDL_NBR      = B8.ADDL_NBR
       AND SEPCHK     = B8.SEPCHK)


end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Ctx-Ovrd
  display 'Checking Pay_Ctx_Ovrd . . . ' noline
  move $Pay035_ErrMsg11 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG11'     to $MSGID
  end-if

begin-SELECT DISTINCT
B9.COMPANY,
B9.PAYGROUP,
B9.PAY_END_DT,
B9.OFF_CYCLE,
B9.PAGE_NUM,
B9.LINE_NUM,
B9.ADDL_NBR

  move &B9.Company    to $Company
  move &B9.Paygroup   to $Paygroup
  move &B9.Pay_End_Dt to $Pay_End_Dt
  move &B9.Off_Cycle  to $Off_Cycle
  move &B9.PAGE_NUM      to #PAGE_NUM
  move &B9.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B9.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A9, PS_PAY_CTX_OVRD B9
WHERE A9.RUN_ID     = $RunID
  AND B9.COMPANY    = A9.COMPANY
  AND B9.PAYGROUP   = A9.PAYGROUP
  AND B9.PAY_END_DT = A9.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS
     WHERE COMPANY    = B9.COMPANY
       AND PAYGROUP   = B9.PAYGROUP
       AND PAY_END_DT = B9.PAY_END_DT
       AND OFF_CYCLE  = B9.OFF_CYCLE
       AND PAGE_NUM      = B9.PAGE_NUM
       AND LINE_NUM      = B9.LINE_NUM
       AND ADDL_NBR      = B9.ADDL_NBR
       AND SEPCHK     = B9.SEPCHK)

end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Pay-Garn-Ovrd
  display 'Checking Pay_Garn_Ovrd . . . ' noline
  move $Pay035_ErrMsg12 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG12'       to $MSGID
  end-if

begin-SELECT DISTINCT
B10.COMPANY,
B10.PAYGROUP,
B10.PAY_END_DT,
B10.OFF_CYCLE,
B10.PAGE_NUM,
B10.LINE_NUM,
B10.ADDL_NBR


  move &B10.Company    to $Company
  move &B10.Paygroup   to $Paygroup
  move &B10.Pay_End_Dt to $Pay_End_Dt
  move &B10.Off_Cycle  to $Off_Cycle
  move &B10.PAGE_NUM      to #PAGE_NUM
  move &B10.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &B10.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
FROM  PS_PAY_CALENDAR A10, PS_PAY_GARN_OVRD B10
WHERE A10.RUN_ID     = $RunID
  AND B10.COMPANY    = A10.COMPANY
  AND B10.PAYGROUP   = A10.PAYGROUP
  AND B10.PAY_END_DT = A10.PAY_END_DT
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PAY_EARNINGS
     WHERE COMPANY    = B10.COMPANY
       AND PAYGROUP   = B10.PAYGROUP
       AND PAY_END_DT = B10.PAY_END_DT
       AND OFF_CYCLE  = B10.OFF_CYCLE
       AND PAGE_NUM      = B10.PAGE_NUM
       AND LINE_NUM      = B10.LINE_NUM
       AND ADDL_NBR      = B10.ADDL_NBR
       AND SEPCHK     = B10.SEPCHK)

end-SELECT
  display 'Done'
end-procedure


begin-procedure Check-Comp-Codes
  display 'Checking Compensation Rate Code Records . . . ' noline

!***********************************************************************
! Ensure Regular Rate Codes Used in Pay_Earnings is Defined in Comp Rate
! Code Table as North American Non-Base Component and is not Points type
!***********************************************************************
  move $Pay035_ErrMsg13 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG13'       to $MSGID
  end-if

begin-SELECT
A11.COMPANY
A11.PAYGROUP
A11.PAY_END_DT
A11.OFF_CYCLE
A11.PAGE_NUM
A11.LINE_NUM
A11.COMP_RATECD_REG
A11.ADDL_NBR


 If RTRIM(&A11.COMP_RATECD_REG,' ') <> ''
  move &A11.Company    to $Company
  move &A11.Paygroup   to $Paygroup
  move &A11.Pay_End_Dt to $Pay_End_Dt
  move &A11.Off_Cycle  to $Off_Cycle
  move &A11.PAGE_NUM      to #PAGE_NUM
  move &A11.LINE_NUM      to #LINE_NUM
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &A11.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
 End-If

FROM  PS_PAY_EARNINGS A11, PS_PAY_CALENDAR B11
WHERE B11.RUN_ID     = $RunID
  AND B11.COMPANY    = A11.COMPANY
  AND B11.PAYGROUP   = A11.PAYGROUP
  AND B11.PAY_END_DT = A11.PAY_END_DT
  AND NOT EXISTS ( SELECT 'X' FROM PS_COMP_RATECD_TBL A11A
                    WHERE A11A.COMP_RATECD = A11.COMP_RATECD_REG
                      AND A11A.COMP_RATE_TYPE <> 'PT'
                      AND A11A.COMP_BASE_PAY_SW = 'N')

end-SELECT


!************************************************************************
! Ensure Over Time Rate Codes Used in Pay_Earnings is Defined in Comp Rate
! Code Table as North American Non-Base Component and is not Points Type
!************************************************************************
  move $Pay035_ErrMsg14 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG14'       to $MSGID
  end-if

begin-SELECT
A12.COMPANY
A12.PAYGROUP
A12.PAY_END_DT
A12.OFF_CYCLE
A12.PAGE_NUM
A12.LINE_NUM
A12.COMP_RATECD_OT
A12.ADDL_NBR

 If RTRIM(&A12.COMP_RATECD_OT,' ') <> ''
  move &A12.Company    to $Company
  move &A12.Paygroup   to $Paygroup
  move &A12.Pay_End_Dt to $Pay_End_Dt
  move &A12.Off_Cycle  to $Off_Cycle
  move &A12.PAGE_NUM      to #PAGE_NUM
  move &A12.LINE_NUM      to #LINE_NUM
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &A12.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
 End-If

FROM  PS_PAY_EARNINGS A12, PS_PAY_CALENDAR B12
WHERE B12.RUN_ID     = $RunID
  AND B12.COMPANY    = A12.COMPANY
  AND B12.PAYGROUP   = A12.PAYGROUP
  AND B12.PAY_END_DT = A12.PAY_END_DT
  AND NOT EXISTS ( SELECT 'X' FROM PS_COMP_RATECD_TBL A12A
                    WHERE A12A.COMP_RATECD = A12.COMP_RATECD_OT
                      AND A12A.COMP_RATE_TYPE <> 'PT'
                      AND A12A.COMP_BASE_PAY_SW = 'N')

end-SELECT

!*************************************************************************
! Ensure Other Rate Codes Used in Pay_oth_Earnings is Defined in Comp Rate
! Code Table as North American Non-Base Component and is not Points Type
!*************************************************************************
  move $Pay035_ErrMsg15 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG15'       to $MSGID
  end-if

begin-SELECT DISTINCT
A13.COMPANY
A13.PAYGROUP
A13.PAY_END_DT
A13.OFF_CYCLE
A13.PAGE_NUM
A13.LINE_NUM
A13.ADDL_NBR
A13.COMP_RATECD


 If RTRIM(&A13.COMP_RATECD,' ') <> ''
  move &A13.Company    to $Company
  move &A13.Paygroup   to $Paygroup
  move &A13.Pay_End_Dt to $Pay_End_Dt
  move &A13.Off_Cycle  to $Off_Cycle
  move &A13.PAGE_NUM      to #PAGE_NUM
  move &A13.LINE_NUM      to #LINE_NUM
  do Get-Earnings-Data

  if $WC_Refresh  = 'Y'
    move &A13.ADDL_NBR     to #AddlNbr
    move &A13.COMP_RATECD  to $Comp_RateCd
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records
 End-If

FROM  PS_PAY_OTH_EARNS A13, PS_PAY_CALENDAR B13
WHERE B13.RUN_ID     = $RunID
  AND B13.COMPANY    = A13.COMPANY
  AND B13.PAYGROUP   = A13.PAYGROUP
  AND B13.PAY_END_DT = A13.PAY_END_DT
  AND NOT EXISTS ( SELECT 'X' FROM PS_COMP_RATECD_TBL A13A
                    WHERE A13A.COMP_RATECD = A13.COMP_RATECD
                      AND A13A.COMP_RATE_TYPE <> 'PT'
                      AND A13A.COMP_BASE_PAY_SW = 'N')

end-SELECT

  display 'Done'
end-procedure


begin-procedure Check-For-Active-Job
  display 'Checking For Active Job . . . ' noline
  move $Pay035_ErrMsg17 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG17'      to $MSGID
  end-if

  move ' '             to $Company
  move ' '             to $Paygroup
  move ' '             to $Pay_End_Dt_X
  move ' '             to $Off_Cycle
  move 0               to #PAGE_NUM
  move 0               to #LINE_NUM
  move ' '             to $Emplid

begin-SELECT
B15.COMPANY,
B15.PAYGROUP,
B15.PAY_END_DT,
B15.OFF_CYCLE,
B15.PAGE_NUM,
B15.LINE_NUM,
B15.EMPLID,
B15.OK_TO_PAY,
B15.ADDL_NBR

  if $Pay_End_Dt_X = ' '
    move &B15.Pay_End_Dt to $Pay_End_Dt_X
  end-if

  if &B15.Company      <> $Company
  or &B15.Paygroup     <> $Paygroup
  or &B15.Pay_End_Dt   <> $Pay_End_Dt_X
  or &B15.Off_Cycle    <> $Off_Cycle
  or &B15.PAGE_NUM     <> #PAGE_NUM
  or &B15.LINE_NUM     <> #LINE_NUM
  or &B15.Emplid       <> $Emplid

    move &B15.Pay_End_Dt to $Pay_End_Dt_X

    move &B15.Company    to $Company
    move &B15.Paygroup   to $Paygroup
    move &B15.Pay_End_Dt to $Pay_End_Dt
    move &B15.Off_Cycle  to $Off_Cycle
    move &B15.PAGE_NUM   to #PAGE_NUM
    move &B15.LINE_NUM   to #LINE_NUM
    move &B15.Emplid     to $Emplid
    move &B15.OK_To_Pay  to $OK_To_Pay

    if $SetOKToPay = 'Y'
      do Set-OK-To-Pay
    end-if

    if $WC_Refresh  = 'Y'
      move &B15.ADDL_NBR   to #AddlNbr
      do Generate-WC-Data
    end-if

    do Print-Error-Message
    add 1 to #Records

  end-if

FROM  PS_PAY_CALENDAR A15,
      PS_PAY_EARNINGS B15
WHERE A15.RUN_ID       = $RunID
  AND A15.COMPANY      = B15.COMPANY
  AND A15.PAYGROUP     = B15.PAYGROUP
  AND A15.PAY_END_DT   = B15.PAY_END_DT
  AND B15.OK_TO_PAY    = 'Y'
  AND B15.PAY_LINE_STATUS IN ('E','I','P','U')
  AND ((B15.REG_PAY <> 0)
      OR (B15.REG_PAY_HRS <> 0)
      OR (B15.OT_HRS <> 0))

  AND (EXISTS (SELECT 'X'
                 FROM  PS_JOB C15
                WHERE  C15.EMPLID      = B15.EMPLID
                  AND  C15.EMPL_RCD    = B15.EMPL_RCD
                  AND  C15.COMPANY     = B15.COMPANY
          AND ((C15.EFFDT =
               (SELECT MIN(EFFDT)
                  FROM PS_JOB
                 WHERE EMPLID          = C15.EMPLID
                   AND EMPL_RCD        = C15.EMPL_RCD
                   AND COMPANY         = C15.COMPANY
                   AND EMPL_STATUS IN('A','P','Q','U'))
               AND C15.EFFDT           > B15.EARNS_BEGIN_DT)

               OR  (C15.EFFDT =
                   (SELECT MAX(EFFDT)
                      FROM PS_JOB
                     WHERE EMPLID      = C15.EMPLID
                       AND EMPL_RCD    = C15.EMPL_RCD
                       AND COMPANY     = C15.COMPANY
                       AND EFFDT      <= B15.EARNS_END_DT)
                   AND C15.EMPL_STATUS NOT IN('A','P','Q','U')))

          AND C15.EFFSEQ=
                 (SELECT MAX(EFFSEQ)
                    FROM PS_JOB
                   WHERE EMPLID        = C15.EMPLID
                     AND EMPL_RCD      = C15.EMPL_RCD
                     AND EFFDT         = C15.EFFDT) )

       OR NOT EXISTS (SELECT 'X'
                        FROM PS_JOB
                       WHERE EMPLID    = B15.EMPLID
                         AND EMPL_RCD  = B15.EMPL_RCD
                         AND COMPANY   = B15.COMPANY) )

end-SELECT
  display 'Done'
end-procedure

begin-procedure Check-Contract-Pay
  display 'Checking Contract Pay . . . ' noline
begin-SELECT DISTINCT
B16.COMPANY,
B16.PAYGROUP,
B16.PAY_END_DT,
B16.OFF_CYCLE,
B16.PAGE_NUM,
B16.LINE_NUM,
B16.HP_CONTRACT_NUM,
C16.HP_CONTRACT_STATUS,
C16.HP_RECALC_CONTRACT,
B16.ADDL_NBR


  move &B16.Company         to $Company
  move &B16.Paygroup        to $PayGroup
  move &B16.Pay_End_Dt      to $Pay_End_Dt
  move &B16.Off_Cycle       to $Off_Cycle
  move &B16.PAGE_NUM        to #Page_Num
  move &B16.LINE_NUM        to #Line_Num
  move &B16.HP_CONTRACT_NUM to $Contract_Num 0999999
  do Get-Earnings-Data
  if $SetOKToPay = 'Y'
     do Set-OK-To-Pay
  end-if
  if &C16.HP_CONTRACT_STATUS <> 'A'
     let $Message = $Pay035_ContID || ' ' ||
                    $Contract_Num || ' ' || $Pay035_ErrMsg18


     if $WC_Refresh  = 'Y'
       move 'WCMSG18'       to $MSGID
       move &B16.ADDL_NBR   to #AddlNbr
       do Generate-WC-Data
     end-if

     do Print-Error-Message
     add 1 to #Records

     move &B16.Pay_End_Dt to $Pay_End_Dt
  end-if
  if &C16.HP_RECALC_CONTRACT = 'Y'
     let $Message = $Pay035_ErrMsg19 || ' ' ||
                    $Pay035_ContID || ' ' || $Contract_Num

     if $WC_Refresh  = 'Y'
       move 'WCMSG19'       to $MSGID
       move &B16.ADDL_NBR   to #AddlNbr
       do Generate-WC-Data
     end-if

     do Print-Error-Message
     add 1 to #Records

  end-if
FROM  PS_PAY_CALENDAR A16, PS_PAY_EARNINGS B16, PS_HP_CNTRACT_LIST C16
WHERE A16.RUN_ID               = $RunID
  AND A16.COMPANY              = B16.COMPANY
  AND A16.PAYGROUP             = B16.PAYGROUP
  AND A16.PAY_END_DT           = B16.PAY_END_DT
  AND B16.EMPLID               = C16.EMPLID
  AND B16.EMPL_RCD             = C16.EMPL_RCD
  AND B16.HP_CONTRACT_NUM      = C16.HP_CONTRACT_NUM
  AND B16.OK_TO_PAY            = 'Y'
  AND B16.PAY_LINE_STATUS IN ('E','I','P','U')
  AND (C16.HP_CONTRACT_STATUS <> 'A'
         OR C16.HP_RECALC_CONTRACT = 'Y')
end-SELECT
  display 'Done'
end-procedure

! **********************************************************************
begin-procedure Check-Pay-Earnings-Jurisdiction
  display 'Checking Pay_Earnings.Jurisdiction . . . ' noline
  move $Pay035_ErrMsg20 to $Message

  if $WC_Refresh  = 'Y'
    move 'ERRMSG20'      to $MSGID
  end-if

begin-SELECT
B17.COMPANY,
B17.PAYGROUP,
B17.PAY_END_DT,
B17.OFF_CYCLE,
B17.PAGE_NUM,
B17.LINE_NUM,
B17.ADDL_NBR


  move &B17.Company    to $Company
  move &B17.Paygroup   to $Paygroup
  move &B17.Pay_End_Dt to $Pay_End_Dt
  move &B17.Off_Cycle  to $Off_Cycle
  move &B17.PAGE_NUM      to #PAGE_NUM
  move &B17.LINE_NUM      to #LINE_NUM
  if $SetOKToPay = 'Y'
    do Set-OK-To-Pay
  end-if
  
  if $WC_Refresh  = 'Y'
    move &B17.ADDL_NBR   to #AddlNbr
    do Generate-WC-Data
  end-if

  do Print-Error-Message
  add 1 to #Records


FROM  PS_PAY_CALENDAR A17, PS_PAY_EARNINGS B17
WHERE A17.RUN_ID     = $RunID
  AND B17.COMPANY    = A17.COMPANY
  AND B17.PAYGROUP   = A17.PAYGROUP
  AND B17.PAY_END_DT = A17.PAY_END_DT
  AND B17.PY_JUR_CODE <> ' '
  AND NOT EXISTS
    (SELECT 'X'
     FROM  PS_PY_JUR_MW_TBL D17
     WHERE D17.STATE      = B17.STATE
       AND D17.PY_JUR_CODE   = B17.PY_JUR_CODE
       AND D17.EFF_STATUS  = 'A'
       AND D17.EFFDT = (SELECT MAX(D18.EFFDT)
       FROM PS_PY_JUR_MW_TBL D18
       WHERE D18.STATE = D17.STATE
       AND D18.PY_JUR_CODE = D17.PY_JUR_CODE
       AND D18.EFFDT     <= B17.PAY_END_DT))


end-SELECT
  display 'Done'
end-procedure





! ***********************************************************************

begin-procedure Set-OK-To-Pay
begin-SQL
UPDATE PS_PAY_EARNINGS
SET OK_TO_PAY = 'N'
WHERE COMPANY    = $Company
  AND PAYGROUP   = $Paygroup
  AND PAY_END_DT = $Pay_End_Dt
  AND OFF_CYCLE  = $Off_Cycle
  AND PAGE_NUM      = #PAGE_NUM
  AND LINE_NUM      = #LINE_NUM
end-SQL
end-procedure


begin-procedure Get-Earnings-Data
begin-SELECT
EMPLID, OK_TO_PAY
  move &Emplid    to $Emplid
  move &OK_To_Pay to $OK_To_Pay
  EXIT-SELECT
FROM  PS_PAY_EARNINGS
WHERE COMPANY    = $Company
  AND PAYGROUP   = $Paygroup
  AND PAY_END_DT = $Pay_End_Dt
  AND OFF_CYCLE  = $Off_Cycle
  AND PAGE_NUM      = #PAGE_NUM
  AND LINE_NUM      = #LINE_NUM
end-SELECT
end-procedure



begin-procedure Print-Error-Message
  do Format-DateTime($Pay_End_Dt, $Pay_End_Dt, {DEFDATE}, '', '')
  print $Company                (+1,1)
  print $Paygroup               (0,9) ! Changed from 10 to 9 to match with the hdg.
  print $Pay_End_Dt             (0,18,11) ! Changed from 20 to 18 to match with hdg
  print $Off_Cycle              (0,36)
  print #PAGE_NUM                  (0,43)  edit 99999
  print #LINE_NUM                  (0,50)  edit 99999
  print $Emplid                 (0,57)
  print $OK_To_Pay              (0,74)
  print $Message                (0,81)
end-procedure


begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
end-procedure

begin-procedure Get-Country

begin-SELECT
PG.COUNTRY
PG.INDUSTRY_SECTOR

  let $WC_Country           = rtrim(&PG.COUNTRY, ' ')
  let $WC_Industry_Sector   = rtrim(&PG.INDUSTRY_SECTOR, ' ')

FROM PS_PAYGROUP_TBL PG
WHERE PG.COMPANY    = $Company
  AND PG.PAYGROUP   = $Paygroup
  AND PG.EFFDT     = (SELECT MAX(PG1.EFFDT)
                      FROM  PS_PAYGROUP_TBL PG1
                      WHERE PG1.COMPANY  = PG.COMPANY
                        AND PG1.PAYGROUP = PG.PAYGROUP
                        AND PG1.EFFDT   <= $Pay_End_Dt)

end-SELECT
end-procedure


begin-procedure Generate-WC-Data

  do Initialize-WC-fields

  add 1                     to #WC_Audit_SeqNum

  move $Company             to $WC_Company
  move $Paygroup            to $WC_PayGroup
  move $Pay_End_Dt          to $WC_PayEndDt
  do Get-Country

  move #PAGE_NUM            to #WC_PageNum
  move #LINE_NUM            to #WC_LineNum
  move #AddlNbr             to #WC_AddlNbr
  move $Off_Cycle           to $WC_OffCycle

  if $Emplid <> ''
    move $Emplid            to $WC_EmplID
  end-if

  if $MSGID <> ''
    move $MSGID             to $WC_MessageID
  end-if

  if $Comp_RateCd <> ''
    move $Comp_RateCd       to $WC_Comp_RateCd
  end-if

  move 0                    to #WC_BalYear
  move 0                    to #WC_BalPeriod

  if $OK_To_Pay <> ''
    move $OK_To_Pay         to $WC_OKToPay
  end-if


  do Build-WC-Audit-Data

end-procedure


begin-procedure Initialize-WC-fields

  move ' '   to $WC_MessageID
  move ' '   to $WC_Company
  move ' '   to $WC_PayGroup
  move ' '   to $WC_PayEndDt
  move ' '   to $WC_OffCycle
  move 0     to #WC_PageNum
  move 0     to #WC_LineNum
  move 0     to #WC_AddlNbr
  move 0     to #WC_SepChk
  move ' '   to $WC_EmplID
  move 0     to #WC_EmplRcd
  move ' '   to $WC_EmplName
  move ' '   to $WC_DeptID
  move ' '   to $WC_BusUnit
  move ' '   to $WC_Country
  move ' '   to $WC_Industry_Sector
  move ' '   to $WC_MsgData1
  move ' '   to $WC_MsgData2
  move ' '   to $WC_MsgData3
  move ' '   to $WC_Comp_RateCd
  move ' '   to $WC_OKToPay

end-procedure


begin-procedure Build-WC-Audit-Data

begin-SQL ON-ERROR = SQL-Error

INSERT INTO PS_PY_AUDITS(
 PROGRAM_SRC
,COMPANY
,PAYGROUP
,PAY_END_DT
,MESSAGE_ID
,AUDIT_SEQNUM
,OFF_CYCLE
,PAGE_NUM
,LINE_NUM
,ADDL_NBR
,SEPCHK
,BALANCE_YEAR
,BALANCE_PERIOD
,MSGDATA1
,MSGDATA2
,MSGDATA3
,COMP_RATECD
,EMPLID
,EMPL_RCD
,EMPL_NAME
,DEPTID
,BUSINESS_UNIT
,OK_TO_PAY
,RUN_ID
,OPRID
,LASTUPDDTTM
,COUNTRY_CD
,INDUSTRY_SECTOR )
VALUES
($WC_ProgramSrc
,$WC_Company
,$WC_PayGroup
,$WC_PayEndDt
,$WC_MessageID
,#WC_Audit_SeqNum
,$WC_OffCycle
,#WC_PageNum
,#WC_LineNum
,#WC_AddlNbr
,#WC_SepChk
,#WC_BalYear
,#WC_BalPeriod
,$WC_MsgData1
,$WC_MsgData2
,$WC_MsgData3
,$WC_Comp_RateCd
,$WC_EmplID
,#WC_EmplRcd
,$WC_EmplName
,$WC_DeptID
,$WC_BusUnit
,$WC_OKToPay
,$WC_RunID
,$Prcs_OprID
,{DateTimeIn-Prefix}$SysDateTime{DateTimeIn-Suffix}
,$WC_Country
,$WC_Industry_Sector )

end-SQL

end-procedure


begin-procedure Process-WC-Parameters

  do Get-WC-Install-Flag

  let $WC_Del_RunID = 'N'
  let $WC_Refresh   = 'N'

  if $Use_WC_Audit_Except = 'Y'            !install flag on

    Evaluate $WCRunOption
    When = 'R'                             !report and WC data generated
      let $WC_Refresh   = 'Y'

      move $RunID  to $WC_RunID
      do Delete-WC-RunID
      do COMMIT-TRANSACTION
      move 0 to #WC_Audit_SeqNum
      break
    When = 'D'                             !delete WC data and no report
      let $WC_Del_RunID = 'Y'
      break
    When-Other
      break
    End-Evaluate

  else
    do Delete-All-WC-Pay035
    do COMMIT-TRANSACTION
  end-if

end-procedure


begin-procedure Get-WC-Install-Flag

begin-SELECT
PY.WC_AUDIT_EXCEPTION

  move &PY.WC_AUDIT_EXCEPTION to  $Use_WC_Audit_Except

FROM  PS_INSTALLATION_PY PY
end-SELECT
end-procedure


begin-procedure Delete-All-WC-Pay035

begin-SQL on-error=Ignore

  DELETE FROM PS_PY_AUDITS
  WHERE PROGRAM_SRC     = $WC_ProgramSrc

end-SQL

end-procedure


begin-procedure Delete-WC-RunID

begin-SQL on-error=Ignore

  DELETE FROM PS_PY_AUDITS
  WHERE PROGRAM_SRC     = $WC_ProgramSrc
  AND RUN_ID            = $RunID

end-SQL

end-procedure


#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'stdapi.sqc'    !Update Process API
#include 'payrctl2.sqc'  !Select Run Control Parameters
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
