!***********************************************************************
! GPDEAL05.SQC:  Fetching SQC for Report                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:34:44                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

begin-procedure Get-Data
  do Delete_Rp_AL05
  if rtrim($Ctl_PayEntity,' ') <> '' and rtrim($Cal_Id_Criteria,' ') <> ''
  do Initial_Convert_Currency
  do Get-Earn-Ded-Rslt
  do Get-Accum-Rslt
  do Get-Earn-Ded-Reversal
  do Get-Accum-Reversal
  else
    do Print_Info_User
  end-if
end-procedure  Get-Data

!**************************************************
begin-procedure Get-Earn-Ded-Rslt

  let #ER_count=0

begin-SELECT
SS.EMPLID       &SS.EMPLID
SS.CAL_RUN_ID   &SS.CAL_RUN_ID
SS.EMPL_RCD     &SS.EMPL_RCD
SS.GP_PAYGROUP  &SS.GP_PAYGROUP
SS.CAL_ID       &SS.CAL_ID
SS.RSLT_SEG_NUM &SS.RSLT_SEG_NUM
SS.INSTANCE     &SS.INSTANCE
SS.PIN_NUM      &SS.PIN_NUM
SS.SLICE_BGN_DT &SS.SLICE_BGN_DT
SS.SLICE_END_DT &SS.SLICE_END_DT
PS.PAY_ENTITY   &PS.PAY_ENTITY
PS.PRD_END_DT   &PS.PRD_END_DT
PS.GPDE_AL_CPAY_ENDDT  &PS.GPDE_AL_CPAY_ENDDT
P.PIN_TYPE      &P.PIN_TYPE
P.PIN_NM        &P.PIN_NM
P.DESCR         &P.DESCR
SUM(SS.CALC_RSLT_VAL) &CAL_AMT
SUM(SS.BASE_RSLT_VAL) &BASE_AMT
SUM(SS.RATE_RSLT_VAL) &RATE_AMT
SUM(SS.UNIT_RSLT_VAL) &UNIT_AMT
SUM(SS.PCT_RSLT_VAL ) &PCT_AMT
PS.CURRENCY_CD
PS.CUR_RT_TYPE
PS.GPDE_ASOF_DT_EX_RT

  let $PrdEndDT          = &PS.PRD_END_DT
  let $Current_Curr      = &PS.CURRENCY_CD
  let $Current_RT_Type   = &PS.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PS.GPDE_ASOF_DT_EX_RT

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&CAL_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#CAL_AMT,'F')
  do ConvertCurrency(&BASE_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#BASE_AMT,'F')
  do ConvertCurrency(&RATE_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#RATE_AMT,'F')
  do ConvertCurrency(&UNIT_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#UNIT_AMT,'F')
  do ConvertCurrency(&PCT_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#PCT_AMT,'F')
  else
     let #CAL_AMT         = &CAL_AMT
  let #BASE_AMT        = &BASE_AMT
  let #RATE_AMT        = &RATE_AMT
  let #UNIT_AMT        = &UNIT_AMT
  let #PCT_AMT         = &PCT_AMT
  end-if


     do Insert_GPDE_Bl(&SS.EMPLID,&SS.CAL_RUN_ID,&SS.EMPL_RCD,&SS.GP_PAYGROUP,&SS.CAL_ID,&SS.RSLT_SEG_NUM,
                       &SS.INSTANCE,&SS.PIN_NUM,&SS.SLICE_BGN_DT,&SS.SLICE_END_DT,&PS.PAY_ENTITY,
                       &PS.PRD_END_DT,&PS.GPDE_AL_CPAY_ENDDT,'E',&P.PIN_TYPE,&P.PIN_NM,&P.DESCR,#CAL_AMT,#BASE_AMT,#RATE_AMT,
                       #UNIT_AMT,#PCT_AMT)


     let #ER_count = #ER_count + 1

FROM   PS_GPDE_RP_0001 PS ,PS_GP_RSLT_ERN_DED SS, PS_GPDE_BL_PRINT D , PS_GP_PIN P
WHERE  PS.EMPLID = SS.EMPLID
AND    PS.CAL_RUN_ID=SS.CAL_RUN_ID
AND    PS.EMPL_RCD = SS.EMPL_RCD
AND    PS.GP_PAYGROUP = SS.GP_PAYGROUP
AND    PS.CAL_ID = SS.CAL_ID
AND    PS.RSLT_SEG_NUM = SS.RSLT_SEG_NUM
AND    SS.PIN_NUM = P.PIN_NUM
AND    SS.PIN_NUM = D.PIN_NUM
AND    D.GPDE_RC_REPORTNAME= $Ctl_Print
AND    D.EFF_STATUS = 'A'
[$Cal_Id_Criteria_PS]
![$Emplid_Crit_PS]
[$PayEntity_Crit_PS]
![$PayGroup_Crit_PS]
![$Location_Crit_PS]
![$Dept_Crit_PS]
GROUP BY SS.EMPLID,PS.CURRENCY_CD,SS.CAL_RUN_ID,SS.EMPL_RCD,SS.GP_PAYGROUP,SS.CAL_ID,SS.RSLT_SEG_NUM,
SS.INSTANCE,SS.PIN_NUM,SS.SLICE_BGN_DT,SS.SLICE_END_DT,PS.PAY_ENTITY,PS.PRD_END_DT,
PS.GPDE_AL_CPAY_ENDDT,P.PIN_TYPE,P.PIN_NM,P.DESCR,PS.CUR_RT_TYPE,PS.GPDE_ASOF_DT_EX_RT

end-SELECT

end-procedure Get-Earn-Ded-Rslt

!**************************************************
begin-procedure Get-Accum-Rslt

  let #AC_count=0

begin-SELECT

SSA.EMPLID       &SSA.EMPLID
SSA.CAL_RUN_ID   &SSA.CAL_RUN_ID
SSA.EMPL_RCD     &SSA.EMPL_RCD
SSA.GP_PAYGROUP  &SSA.GP_PAYGROUP
SSA.CAL_ID       &SSA.CAL_ID
SSA.RSLT_SEG_NUM &SSA.RSLT_SEG_NUM
SSA.PIN_NUM      &SSA.PIN_NUM
SSA.SLICE_BGN_DT &PSA.SLICE_BGN_DT
SSA.SLICE_END_DT &PSA.SLICE_END_DT
PSA.PAY_ENTITY   &PSA.PAY_ENTITY
PSA.PRD_END_DT   &PSA.PRD_END_DT
PSA.GPDE_AL_CPAY_ENDDT  &PSA.GPDE_AL_CPAY_ENDDT
SSA.ACM_PRD_OPTN &SSA.ACM_PRD_OPTN
PA.PIN_TYPE      &PA.PIN_TYPE
PA.PIN_NM        &PA.PIN_NM
PA.DESCR         &PA.DESCR
SUM(SSA.CALC_RSLT_VAL) &CAL_AMT_AC
PSA.CURRENCY_CD
PSA.CUR_RT_TYPE
PSA.GPDE_ASOF_DT_EX_RT

  let $PrdEndDT          = &PSA.PRD_END_DT
  let $Current_Curr      = &PSA.CURRENCY_CD
  let $Current_RT_Type   = &PSA.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PSA.GPDE_ASOF_DT_EX_RT

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&CAL_AMT_AC,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#CAL_AMT_AC,'F')
  else
     let #CAL_AMT_AC         = &CAL_AMT_AC
  end-if


          do Insert_GPDE_Bl(&SSA.EMPLID,&SSA.CAL_RUN_ID,&SSA.EMPL_RCD,&SSA.GP_PAYGROUP,&SSA.CAL_ID,
                           &SSA.RSLT_SEG_NUM,0,&SSA.PIN_NUM,&PSA.SLICE_BGN_DT,&PSA.SLICE_END_DT,&PSA.PAY_ENTITY,
                           &PSA.PRD_END_DT,&PSA.GPDE_AL_CPAY_ENDDT,&SSA.ACM_PRD_OPTN,&PA.PIN_TYPE,&PA.PIN_NM,&PA.DESCR,
                           #CAL_AMT_AC,0,0,0,0)

          let #AC_count = #AC_count + 1


FROM   PS_GPDE_RP_0001 PSA ,PS_GP_RSLT_ACUM SSA, PS_GPDE_BL_PRINT DA , PS_GP_PIN PA
WHERE  PSA.EMPLID = SSA.EMPLID
AND    PSA.CAL_RUN_ID=SSA.CAL_RUN_ID
AND    PSA.EMPL_RCD = SSA.EMPL_RCD
AND    PSA.GP_PAYGROUP = SSA.GP_PAYGROUP
AND    PSA.CAL_ID = SSA.CAL_ID
AND    PSA.RSLT_SEG_NUM = SSA.RSLT_SEG_NUM
AND    SSA.PIN_NUM = PA.PIN_NUM
AND    SSA.PIN_NUM = DA.PIN_NUM
AND    DA.GPDE_RC_REPORTNAME= $Ctl_Print
AND    DA.EFF_STATUS = 'A'
[$Cal_Id_Criteria_PSA]
[$Emplid_Crit_PSA]
[$PayEntity_Crit_PSA]
![$PayGroup_Crit_PSA]
![$Location_Crit_PSA]
![$Dept_Crit_PSA]
GROUP BY SSA.EMPLID,PSA.CURRENCY_CD,SSA.CAL_RUN_ID,SSA.EMPL_RCD,SSA.GP_PAYGROUP,SSA.CAL_ID,SSA.RSLT_SEG_NUM,
SSA.PIN_NUM,SSA.SLICE_BGN_DT,SSA.SLICE_END_DT,PSA.PAY_ENTITY,PSA.PRD_END_DT,
PSA.GPDE_AL_CPAY_ENDDT,SSA.ACM_PRD_OPTN,PA.PIN_TYPE,PA.PIN_NM,PA.DESCR,PSA.CUR_RT_TYPE,PSA.GPDE_ASOF_DT_EX_RT

end-SELECT

end-procedure Get-Accum-Rslt

!**************************************************
begin-procedure Get-Earn-Ded-Reversal
  let #ER_count_F = 0
  let $CNG_CAL_RUN_ID = ' '

begin-SELECT
FED.EMPLID              &FED.EMPLID
FED.CAL_RUN_ID          &FED.CAL_RUN_ID
FED.EMPL_RCD            &FED.EMPL_RCD
FED.GP_PAYGROUP         &FED.GP_PAYGROUP
FED.CAL_ID              &FED.CAL_ID
SSM.RSLT_SEG_NUM        &SSM.RSLT_SEG_NUM
SSF.INSTANCE            &SSF.INSTANCE
SSF.PIN_NUM             &SSF.PIN_NUM
SSF.SLICE_BGN_DT        &SSF.SLICE_BGN_DT
SSF.SLICE_END_DT        &SSF.SLICE_END_DT
FED.PAY_ENTITY          &FED.PAY_ENTITY
FED.PRD_END_DT          &FED.PRD_END_DT
PM.PIN_TYPE             &PM.PIN_TYPE
PM.PIN_NM               &PM.PIN_NM
PM.DESCR                &PM.DESCR
SUM(SSF.CALC_RSLT_VAL)  &CAL_AMT_SSM
SUM(SSF.BASE_RSLT_VAL)  &BASE_AMT_SSM
SUM(SSF.RATE_RSLT_VAL)  &RATE_AMT_SSM
SUM(SSF.UNIT_RSLT_VAL)  &UNIT_AMT_SSM
SUM(SSF.PCT_RSLT_VAL)   &PCT_AMT_SSM

     let $FED_CAL_RUN_ID = &FED.CAL_RUN_ID

     if  $FED_CAL_RUN_ID <> $CNG_CAL_RUN_ID
         do Get-Curr-Pay_Enddt($FED_CAL_RUN_ID,&FED.PAY_ENTITY,$FED_GPDE_AL_CPAY_ENDDT)
     end-if

     do Insert_GPDE_Bl(&FED.EMPLID,&FED.CAL_RUN_ID,&FED.EMPL_RCD,&FED.GP_PAYGROUP,&FED.CAL_ID,&SSM.RSLT_SEG_NUM,
                       99,&SSF.PIN_NUM,&SSF.SLICE_BGN_DT,&SSF.SLICE_END_DT,&FED.PAY_ENTITY,
                       &FED.PRD_END_DT,$FED_GPDE_AL_CPAY_ENDDT,'E',&PM.PIN_TYPE,&PM.PIN_NM,&PM.DESCR,
                       0,0,0,0,0)


     let $CNG_CAL_RUN_ID =  $FED_CAL_RUN_ID

     let #ER_count_F = #ER_count_F + 1

FROM PS_GP_PYE_PRC_STAT FED ,PS_GP_PYE_SEG_STAT SSM ,PS_GP_RSLT_ERN_DED SSF,
     PS_GPDE_BL_PRINT DM , PS_GP_PIN PM
WHERE  FED.EMPLID        = SSM.EMPLID
AND    FED.CAL_RUN_ID    = SSM.CAL_RUN_ID
AND    FED.EMPL_RCD      = SSM.EMPL_RCD
AND    FED.GP_PAYGROUP   = SSM.GP_PAYGROUP
AND    FED.CAL_ID        = SSM.CAL_ID
AND    SSM.EMPLID        = SSF.EMPLID
AND    SSM.EMPL_RCD      = SSF.EMPL_RCD
AND    SSM.GP_PAYGROUP   = SSF.GP_PAYGROUP
AND    SSM.CAL_ID        = SSF.CAL_ID
AND    SSM.RSLT_SEG_NUM  = SSF.RSLT_SEG_NUM
AND    SSF.PIN_NUM       = DM.PIN_NUM
AND    SSF.PIN_NUM       = PM.PIN_NUM
AND    DM.GPDE_RC_REPORTNAME = $Ctl_Print
AND    DM.EFF_STATUS = 'A'
AND    SSM.CALC_ACTION='V'
[$Cal_Id_Criteria_FED]
![$Emplid_Crit_FED]
[$PayEntity_Crit_FED]
![$PayGroup_Crit_FED]
GROUP BY FED.EMPLID,FED.CAL_RUN_ID,FED.EMPL_RCD,FED.GP_PAYGROUP,FED.CAL_ID,SSM.RSLT_SEG_NUM,
SSF.INSTANCE,SSF.PIN_NUM,SSF.SLICE_BGN_DT,SSF.SLICE_END_DT,FED.PAY_ENTITY,FED.PRD_END_DT,
PM.PIN_TYPE,PM.PIN_NM,PM.DESCR

end-SELECT
end-procedure Get-Earn-Ded-Reversal

!**************************************************
begin-procedure Get-Accum-Reversal
  let #AC_count_F = 0
  let $CNGA_CAL_RUN_ID = ' '

begin-SELECT

FA.EMPLID               &FA.EMPLID
FA.CAL_RUN_ID           &FA.CAL_RUN_ID
FA.EMPL_RCD             &FA.EMPL_RCD
FA.GP_PAYGROUP          &FA.GP_PAYGROUP
FA.CAL_ID               &FA.CAL_ID
STA.RSLT_SEG_NUM        &STA.RSLT_SEG_NUM
SFA.PIN_NUM             &SFA.PIN_NUM
SFA.SLICE_BGN_DT        &SFA.SLICE_BGN_DT
SFA.SLICE_END_DT        &SFA.SLICE_END_DT
FA.PAY_ENTITY           &FA.PAY_ENTITY
FA.PRD_END_DT           &FA.PRD_END_DT
SFA.ACM_PRD_OPTN        &SFA.ACM_PRD_OPTN
PMA.PIN_TYPE            &PMA.PIN_TYPE
PMA.PIN_NM              &PMA.PIN_NM
PMA.DESCR               &PMA.DESCR
SUM(SFA.CALC_RSLT_VAL) &CAL_AMT_AC_SFA

            let $FA_CAL_RUN_ID = &FA.CAL_RUN_ID

            if  $FA_CAL_RUN_ID <> $CNGA_CAL_RUN_ID
                do Get-Curr-Pay_Enddt($FA_CAL_RUN_ID,&FA.PAY_ENTITY,$FA_GPDE_AL_CPAY_ENDDT)
            end-if


            do Insert_GPDE_Bl(&FA.EMPLID,&FA.CAL_RUN_ID,&FA.EMPL_RCD,&FA.GP_PAYGROUP,&FA.CAL_ID,
                       &STA.RSLT_SEG_NUM,99,&SFA.PIN_NUM,&SFA.SLICE_BGN_DT,&SFA.SLICE_END_DT,&FA.PAY_ENTITY,
                       &FA.PRD_END_DT,$FA_GPDE_AL_CPAY_ENDDT,&SFA.ACM_PRD_OPTN,&PMA.PIN_TYPE,&PMA.PIN_NM,
                       &PMA.DESCR,0,0,0,0,0)

            let $CNGA_CAL_RUN_ID =  $FA_CAL_RUN_ID

            let #AC_count_F = #AC_count_F + 1



FROM PS_GP_PYE_PRC_STAT FA ,PS_GP_PYE_SEG_STAT STA ,PS_GP_RSLT_ACUM SFA,
     PS_GPDE_BL_PRINT DMA , PS_GP_PIN PMA
WHERE  FA.EMPLID        = STA.EMPLID
AND    FA.CAL_RUN_ID    = STA.CAL_RUN_ID
AND    FA.EMPL_RCD      = STA.EMPL_RCD
AND    FA.GP_PAYGROUP   = STA.GP_PAYGROUP
AND    FA.CAL_ID        = STA.CAL_ID

AND    STA.EMPLID        = SFA.EMPLID
AND    STA.EMPL_RCD      = SFA.EMPL_RCD
AND    STA.GP_PAYGROUP   = SFA.GP_PAYGROUP
AND    STA.CAL_ID        = SFA.CAL_ID
AND    STA.RSLT_SEG_NUM  = SFA.RSLT_SEG_NUM

AND    SFA.PIN_NUM      = DMA.PIN_NUM
AND    SFA.PIN_NUM      = PMA.PIN_NUM
AND    DMA.GPDE_RC_REPORTNAME = $Ctl_Print
AND    DMA.EFF_STATUS = 'A'
AND    STA.CALC_ACTION='V'
[$Cal_Id_Criteria_FA]
![$Emplid_Crit_FA]
[$PayEntity_Crit_FA]
![$PayGroup_Crit_FA]
GROUP BY FA.EMPLID,FA.CAL_RUN_ID,FA.EMPL_RCD,FA.GP_PAYGROUP,FA.CAL_ID,STA.RSLT_SEG_NUM,
SFA.PIN_NUM,SFA.SLICE_BGN_DT,SFA.SLICE_END_DT,FA.PAY_ENTITY,FA.PRD_END_DT,SFA.ACM_PRD_OPTN,
PMA.PIN_TYPE,PMA.PIN_NM,PMA.DESCR

end-SELECT

end-procedure Get-Accum-Reversal

!**************************************************

begin-procedure Get-Curr-Pay_Enddt($CC_CAL_RUN_ID,$CC_PAY_ENTITY,:$CC_GPDE_AL_CPAY_ENDDT)
begin-SELECT
MAX(CC.PRD_END_DT)  &CC_GPDE_AL_CPAY_ENDDT
   let $CC_GPDE_AL_CPAY_ENDDT =  &CC_GPDE_AL_CPAY_ENDDT
FROM  PS_GP_CAL_RUN_DTL CC ,PS_GP_CAL_RUN CCS
WHERE CC.CAL_RUN_ID  = CCS.CAL_RUN_ID
AND   CC.CAL_RUN_ID  = $CC_CAL_RUN_ID
AND   CC.PAY_ENTITY  = $CC_PAY_ENTITY
AND  (CCS.RUN_FINALIZED_IND='Y' OR CCS.RUN_OPEN_IND='Y')
end-SELECT

end-procedure Get-Curr-Pay_Enddt
!**************************************************

begin-procedure Insert_GPDE_Bl($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,#RSLT_SEG_NUM,
                               #INSTANCE,#PIN_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$PAY_ENTITY,$PRD_END_DT,
                               $GPDE_AL_CPAY_ENDDT,$ACM_PRD_OPTN,$PIN_TYPE,$PIN_NM,$DESCR,#CAL_AMT,#BASE_AMT,#RATE_AMT,
                               #UNIT_AMT,#PCT_AMT)

begin-sql

INSERT INTO PS_GPDE_RP_AL05 (EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,RSLT_SEG_NUM,
                             INSTANCE,PIN_NUM,SLICE_BGN_DT,SLICE_END_DT,PAY_ENTITY,PRD_END_DT,
                             GPDE_AL_CPAY_ENDDT,ACM_PRD_OPTN,PIN_TYPE,PIN_NM,DESCR,CALC_RSLT_VAL,BASE_RSLT_VAL,RATE_RSLT_VAL,
                             UNIT_RSLT_VAL,PCT_RSLT_VAL)
                     VALUES ($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,#RSLT_SEG_NUM,
                                   #INSTANCE,#PIN_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$PAY_ENTITY,$PRD_END_DT,
                                   $GPDE_AL_CPAY_ENDDT,$ACM_PRD_OPTN,$PIN_TYPE,$PIN_NM,$DESCR,#CAL_AMT,#BASE_AMT,#RATE_AMT,
                                   #UNIT_AMT,#PCT_AMT)

end-sql

end-procedure Insert_GPDE_Bl

!****************************************************************************************
begin-procedure Initial_Convert_Currency
do format-datetime($Ctl_End_Dt,$LastD,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $LastD >= $Stichtag
 let $ToCurrency = 'EUR'
else
 let $ToCurrency = 'DEM'
end-if
end-procedure
!****************************************************************************************
begin-procedure Print_Info_User
!Display, if Reqired input on Run Control failed
   display '-----------------------------------------------------'
   display 'No Output file for the folowing input:'
   display '   Pay Entity: ' noline
   display $Ctl_PayEntity
   display '   For Year: ' noline
   display $Ctl_Year
   display '   Print Class: ' noline
   display $Ctl_Print

   display '-----------------------------------------------------'
end-procedure
!**************************************************

begin-procedure Delete_Rp_AL05
Begin-Sql

  DELETE FROM PS_GPDE_RP_AL05

End-Sql
end-procedure Delete_Rp_AL05


!**************************************************
