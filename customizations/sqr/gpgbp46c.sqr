!***********************************************************************
!  GPGBP46C.SQR - P46 COMPANY CAR REPORT                               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:04:05:38                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!  Date         Modification
!  ----         ------------
!  04/2002      Initial Design
!  04/08/03     Change all references from PERSONAL_DT_FST to PERSON_NAME
!  02/03/04     Include validation for temporary national insurance number
!  12/07/04     Made changes as required by the splitup of GPGB_EE_STDTLS 
!               record into GPGB_EE_TAX, GPGB_EE_NI and GPGB_EE_TAX_NTS.
!
!*=================================================================

!*****************************************************************
!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables

#define SPACE                   ' '
#define Pos1A                   12
#define Pos1B                   25
#define Pos1C                   29
#define Pos1D                   56
#define Pos1E                   69
#define Pos1F                   75
#define Pos1H                   88
#define Pos1I                   89
#define Pos1M                  106



!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report

        !SHOW 'P46C'

        !----------------------------------------------------------
        !***    ! SHOW timedate of the beginning
        !----------------------------------------------------------
        let $Time_Begin = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        show 'Time Program Began = ' $Time_Begin

        !----------------------------------------------------------
        !***    Call the main procedures
        !----------------------------------------------------------
        do INIT-REPORT
        do MAIN-REPORT
        do Stdapi-Term

        !----------------------------------------------------------
        !***    SHOW informations
        !----------------------------------------------------------

        move #CountError to $CountError 99999
        SHOW 'CountError  ==> ' noline
        SHOW $CountError
        SHOW ' '

        !----------------------------------------------------------
        !***    SHOW timedate of the end
        !----------------------------------------------------------
        let $Time_Ended = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        show 'Time Program Ended = ' $Time_Ended

end-report


!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT

        !let $ProcedureName      = 'INIT-REPORT'
        !SHOW 'PROCEDURE->' $ProcedureName

        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES


        do STDAPI-INIT
        do GET-CURRENT-DATETIME

        if isnull($prcs_process_instance)
                SHOW 'Running P46C SQR'
                do ASK-VALUES !SQR not run through process scheduler
        else
                SHOW 'Running GPGBP46C.SQR in the Process Scheduler.................'
                do GET-VALUES !SQR run through process scheduler
        end-if

        let $ReportID    = 'GPGBP46c'
        let $ReportTitle = 'Company Car'
        SHOW  ' '
        show $ReportID  ' '      $ReportTitle
        SHOW ' '
        show    'Operator ID: ' $Prcs_OprID  ' ' $Prcs_Run_Cntl_ID
        SHOW ' '
        let $SQR-PROGRAM = 'GPGBP46C'
        show 'init rep sqr > ' $SQR-PROGRAM
        SHOW  ' '



end-procedure INIT-REPORT

!*=================================================================
! Procedure    :INIT-VARIABLES
! Comment      :Initializations of all varaibles used by the report
!*=================================================================
begin-procedure INIT-VARIABLES

        let $ProcedureName      = 'INIT-VARIABLES'

        LET #TRUE               = 1
        LET #FALSE              = 0

end-procedure INIT-VARIABLES


!*=================================================================
! Procedure   :ASK-VALUES
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure ASK-VALUES

        let $ProcedureName      = 'ASK-VALUES'

        !*---------------------------------------------------------
        !***    Enter the Pay Entity
        !*---------------------------------------------------------
        input $PNL_PAY_ENTITY 'Enter Pay Entity'

        !*---------------------------------------------------------
        !***    Enter the Quarter Start Date
        !*---------------------------------------------------------
        input $PNL_START_DATE 'Quarter Start Date'

        !*---------------------------------------------------------
        !***    Enter the Quarter End Date
        !*---------------------------------------------------------
        input $PNL_END_DATE 'Quarter End Date'

end-procedure ASK-VALUES


!*=================================================================
! Procedure     :GET-VALUES
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure GET-VALUES

        let $ProcedureName      = 'GET-VALUES'

begin-SELECT on-error=ERROR-SQL   !SELECTS THE DATA FROM THE PANEL
RUNDB.PAY_ENTITY
RUNDB.PERIOD_START_DATE
RUNDB.PERIOD_END_DATE

        LET $PNL_PAY_ENTITY         = RTRIM(&RUNDB.PAY_ENTITY,' ')
        LET $PNL_START_DATE         = &RUNDB.PERIOD_START_DATE
        LET $PNL_END_DATE           = &RUNDB.PERIOD_END_DATE

        let $pay_entity = 'Pay Entity = '||$PNL_PAY_ENTITY
        let $period = 'Period is between '||$PNL_START_DATE||' and '||$PNL_END_DATE
        display ' '
        display $pay_entity
        display $period


        FROM  PS_GPGB_RC_P46C RUNDB
        WHERE RUNDB.OPRID           = $Prcs_OprID
          AND RUNDB.RUN_CNTL_ID     = $Prcs_Run_Cntl_ID

end-SELECT

end-procedure GET-VALUES

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure MAIN-REPORT

        let $ProcedureName      = 'MAIN-REPORT'
        SHOW 'PROCEDURE->' $ProcedureName

        do EMPLOYER-DETAILS
        do EMPLOYEE-WITH-CAR

end-procedure MAIN-REPORT


!*=================================================================
! Procedure     : EMPLOYER DETAILS                                !
! Descr         : This procedure gets the employers details       !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYER-DETAILS

        let $ProcedureName      = 'EMPLOYER-DETAILS'
        SHOW 'PROCEDURE->' $ProcedureName

begin-SELECT on-error=ERROR-SQL   !SELECTS EMPLOYERS DETAIL
PYENT.GPGB_ER_NAME
PYENT.PHONE
PYENT.GPGB_ER_PAYE_REF

        LET $ER_NAME                   = RTRIM(&PYENT.GPGB_ER_NAME,' ')
        LET $ER_PHONE                  = &PYENT.PHONE
        LET $ER_REF                    = RTRIM(&PYENT.GPGB_ER_PAYE_REF,' ')


        FROM  PS_GPGB_PYENT PYENT
        WHERE PYENT.PAY_ENTITY         = $PNL_PAY_ENTITY

end-SELECT

end-procedure EMPLOYER-DETAILS



!*=================================================================
! Procedure     : EMPLOYEE WITH CAR                               !
! Descr         : This procedure gets employee's that has a       !
!                 company car within the period provided          !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-WITH-CAR

begin-SELECT on-error=ERROR-SQL   !SELECTS EMPLOYEE WITH CAR
EE.EMPLID
EE.EMPL_RCD

        LET $EE_EMPLID                 = RTRIM(&EE.EMPLID,' ')
        LET #EE_EMPL_RCD               = &EE.EMPL_RCD


        do EMPLOYEE-HR-DETAILS

         FROM    PS_CAR_ALLOC EE
        WHERE    START_DT <= $PNL_START_DATE
          AND    (END_DT IS NULL OR
                  END_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE OR
                  END_DT >= $PNL_END_DATE)
        GROUP BY EE.EMPLID,EE.EMPL_RCD

end-SELECT

end-procedure EMPLOYEE-WITH-CAR



!*=================================================================
! Procedure     : EMPLOYEE HR DETAILS                             !
! Descr         : This procedure gets employee's HR details       !
!                 within the pay entity                           !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-HR-DETAILS

         let $temp_NI = 'TN'
         do RESET-VARIABLES

begin-SELECT on-error=ERROR-SQL   !SELECTS EMPLOYEE HR DETAILS
PERSON.EMPLID
PERSON.NAME
PERS.NATIONAL_ID


        LET $PERSON_EMPLID                   = RTRIM(&PERSON.EMPLID, ' ')
        LET $PERSON_NAME                     = RTRIM(&PERSON.NAME,' ')
        LET $PERS_NI                         = RTRIM(&PERS.NATIONAL_ID,' ')
        LET $check_pers                      = SUBSTR($PERS_NI, 1, 2)
            if $check_pers                   = $temp_NI                       !set to empty if temporary NI
               LET $PERS_NI                  = {SPACE}
            else

               LET $PERS_NI_1                       = SUBSTR($PERS_NI, 1, 1)  !splited for printing into individual boxes
               LET $PERS_NI_2                       = SUBSTR($PERS_NI, 2, 1)
               LET $PERS_NI_3                       = SUBSTR($PERS_NI, 3, 1)
               LET $PERS_NI_4                       = SUBSTR($PERS_NI, 4, 1)
               LET $PERS_NI_5                       = SUBSTR($PERS_NI, 5, 1)
               LET $PERS_NI_6                       = SUBSTR($PERS_NI, 6, 1)
               LET $PERS_NI_7                       = SUBSTR($PERS_NI, 7, 1)
               LET $PERS_NI_8                       = SUBSTR($PERS_NI, 8, 1)
               LET $PERS_NI_9                       = SUBSTR($PERS_NI, 9, 1)
            end-if

        do EMPLOYEE-WITH-PRIMARY-CAR
        do REPLACEMENT-CAR
        do EMPLOYEE-WITH-SECOND-CAR
        do EMPLOYEE-WITH-WITHDRAWN-CAR
        do EMPLOYEE-COMPRATE

        do PRINT-REPORT
        NEW-PAGE

       FROM   PS_PERSON_NAME PERSON,
              PS_JOB JOB,
              PS_PERS_NID PERS
       WHERE  PERSON.EMPLID    = $EE_EMPLID
         AND  PERSON.EMPLID    = JOB.EMPLID
         AND  PERSON.EMPLID    = PERS.EMPLID
         AND  JOB.JOB_INDICATOR  = 'P'
         AND  PERS.PRIMARY_NID   = 'Y'
         AND  JOB.EFFDT          = (SELECT MAX(JOB2.EFFDT)
                                       FROM PS_JOB JOB2
                                       WHERE JOB.EMPLID    = JOB2.EMPLID
                                         AND JOB.EMPL_RCD  = JOB2.EMPL_RCD
                                         AND JOB.EFFSEQ    = (SELECT MAX(JOB3.EFFSEQ)
                                                                 FROM PS_JOB JOB3
                                                                 WHERE JOB.EMPLID    = JOB3.EMPLID
                                                                   AND JOB.EMPL_RCD  = JOB3.EMPL_RCD
                                                                   AND JOB.EFFDT     = JOB3.EFFDT ) )
        AND JOB.GP_PAYGROUP     IN (SELECT GP_PAYGROUP
                                       FROM PS_GP_PYGRP
                                       WHERE PAY_ENTITY = $PNL_PAY_ENTITY)


end-SELECT

end-procedure EMPLOYEE-HR-DETAILS


!*=================================================================
! Procedure     : EMPLOYEE WITH PRIMARY CAR                       !
! Descr         : This procedure gets employee's primary details  !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-WITH-PRIMARY-CAR

        let $check_year         = '1998-01-01'

begin-SELECT on-error=ERROR-SQL   !SELECTS EMPLOYEE WITH PRIMARY CAR
ALLOC.EMPLID
ALLOC.EMPL_RCD
ALLOC.CAR_ID
ALLOC.START_DT
ALLOC.FUEL_PROVIDED_SW
ALLOC.FUEL_REIMBURSED_SW
ALLOC.CAPITAL_CNTRB_AMT
DATA.MANUFACT_CD
DATA.MODEL_DESCR
DATA.REGISTRATION_DT
MODEL.ENGINE_SIZE
MODEL.LIST_COST
MODEL.ENGINE_TYPE_CD
MODEL.C02_EMISSIONS


        LET $PCA_EMPLID                     = RTRIM(&ALLOC.EMPLID,' ')
        LET #PCA_EMPL_RCD                   = &ALLOC.EMPL_RCD
        LET $PCA_CAR_ID                     = RTRIM(&ALLOC.CAR_ID,' ')
            if isblank ($PCA_CAR_ID)        = #FALSE
               let $primary_car             = 'X'
            end-if

        LET $PCA_START_DT                   = RTRIM(&ALLOC.START_DT,' ')
            do Format-DateTime($PCA_START_DT, $PCA_START_DMY, {DEFDMY}, '', '')

        LET $PCA_START_DMY_1                = SUBSTR($PCA_START_DMY, 1, 2)
        LET $PCA_START_DMY_2                = SUBSTR($PCA_START_DMY, 4, 2)
        LET $PCA_START_DMY_3                = SUBSTR($PCA_START_DMY, 7, 4)

        LET $PCA_FUEL_PROVIDED_SW           = RTRIM(&ALLOC.FUEL_PROVIDED_SW,' ')
        LET $PCA_FUEL_REIMBURSED_SW         = RTRIM(&ALLOC.FUEL_REIMBURSED_SW,' ')
        LET #PCA_CAPITAL_CNTRB_AMT          = &ALLOC.CAPITAL_CNTRB_AMT
        LET $PCA_CAPITAL_CNTRB_AMT          = EDIT(#PCA_CAPITAL_CNTRB_AMT, '8,888.88')

        LET $PCA_MANUFACT_CD                = RTRIM(&DATA.MANUFACT_CD,' ')
            let $FieldName                  = 'MANUFACT_CD'
            let $FieldValue                 = $PCA_MANUFACT_CD
                do Read-Translate-Table
            let $PCA_MANUFACT_CD            = RTRIM($XlatLongName,' ')

        LET $PCA_MODEL_DESCR                = RTRIM(&DATA.MODEL_DESCR,' ')
            let $make_and_model             = $PCA_MANUFACT_CD || ' ' || $PCA_MODEL_DESCR

        LET $PCA_REGISTRATION_DT            = RTRIM(&DATA.REGISTRATION_DT,' ')

        LET #PCA_ENGINE_SIZE                = &MODEL.ENGINE_SIZE
        LET $PCA_ENGINE_SIZE                = EDIT(#PCA_ENGINE_SIZE, '8888')
            evaluate  $PCA_ENGINE_SIZE
                when = ' '
                    let $size_check         = '0'
                    break
                when <= '1400'
                    let $size_check         = '1'
                    break
                when <= '2000'
                    let $size_check         = '2'
                    break
                when > '2000'
                    let $size_check         = '3'
                    break
            end-evaluate

        LET #PCA_LIST_COST                  = &MODEL.LIST_COST
        LET $PCA_LIST_COST                  = EDIT(#PCA_LIST_COST, '888,888.88')

        LET $PCA_ENGINE_TYPE_CD             = RTRIM(&MODEL.ENGINE_TYPE_CD,' ')
            evaluate  $PCA_ENGINE_TYPE_CD
                when = 'PET'
                    let $PCA_ENGINE_TYPE_CD = 'P'
                    break
                when = 'DIE'
                    let $PCA_ENGINE_TYPE_CD = 'D'
                    break
                when = 'EUD'
                    let $PCA_ENGINE_TYPE_CD = 'L'
                    break
                when = 'HPE'
                    let $PCA_ENGINE_TYPE_CD = 'H'
                    break
                when = 'ELE'
                    let $PCA_ENGINE_TYPE_CD = 'E'
                    break
                when = 'GAP'
                    let $PCA_ENGINE_TYPE_CD = 'B'
                    break
                when = 'RET'
                    let $PCA_ENGINE_TYPE_CD = 'C'
                    break
                when-other
                    let $PCA_ENGINE_TYPE_CD = {SPACE}          !unknown code
                    break
            end-evaluate


        LET #PCA_C02_EMISSIONS              = &MODEL.C02_EMISSIONS
        LET $PCA_C02_EMISSIONS              = EDIT(#PCA_C02_EMISSIONS, '888')
        !LET $emissions_check                = $PCA_C02_EMISSIONS

        if  isblank ($PCA_C02_EMISSIONS)    = #TRUE
            !LET $emissions_check            = {SPACE}
            if $PCA_REGISTRATION_DT < $check_year
               let $first_reg               = 'X'
               if $first_reg                = 'X'
                  let $check_first          = 'X'
               else
                  let $check_first          = {SPACE}
               end-if
            else
               let $later_reg               = 'X'
               if $later_reg                = 'X'
                  let $check_later          = 'X'
               else
                  let $check_later          = {SPACE}
               end-if
            end-if
        end-if
        do Format-DateTime($PCA_REGISTRATION_DT, $PCA_REGISTRATION_DMY, {DEFDMY}, '', '')

        LET $PCA_REGISTRATION_DMY_1         = SUBSTR($PCA_REGISTRATION_DMY, 1, 2)
        LET $PCA_REGISTRATION_DMY_2         = SUBSTR($PCA_REGISTRATION_DMY, 4, 2)
        LET $PCA_REGISTRATION_DMY_3         = SUBSTR($PCA_REGISTRATION_DMY, 7, 4)

        !for informational purpose in the trace file
        LET $emp_details = '           Employee '||$PCA_EMPLID||' car details being PROCESSED'
        display $emp_details

        do CAR-ACCESSORIES
        do CAR-PAYMENTS


        FROM  PS_CAR_ALLOC ALLOC,
              PS_CAR_DATA DATA,
              PS_CAR_MODEL MODEL
        WHERE ALLOC.EMPLID                  = $PERSON_EMPLID
          AND ALLOC.EFFDT                   = (SELECT  MAX(ALLOC2.EFFDT)
                                                 FROM  PS_CAR_ALLOC ALLOC2
                                                WHERE  ALLOC2.EMPLID      = ALLOC.EMPLID
                                                  AND  ALLOC2.EMPL_RCD    = ALLOC.EMPL_RCD
                                                  AND  ALLOC2.PLAN_TYPE   = ALLOC.PLAN_TYPE
                                                  AND  ALLOC2.BENEFIT_NBR = ALLOC.BENEFIT_NBR
                                                  AND  ALLOC2.CAR_ID      = ALLOC.CAR_ID)
          AND ALLOC.CAR_TYPE_CD             = 'P'
          AND ALLOC.START_DT <= $PNL_START_DATE
          AND (ALLOC.END_DT IS NULL OR
               ALLOC.END_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE OR
               ALLOC.END_DT  >= $PNL_END_DATE)
          AND ALLOC.CAR_ID                  = DATA.CAR_ID
          AND DATA.MANUFACT_CD              = MODEL.MANUFACT_CD
          AND DATA.MODEL_DESCR              = MODEL.MODEL_DESCR
          AND MODEL.EFFDT                   = (SELECT  MAX(MODEL1.EFFDT)
                                                 FROM  PS_CAR_MODEL MODEL1
                                                WHERE  MODEL1.MANUFACT_CD  = MODEL.MANUFACT_CD
                                                  AND  MODEL1.MODEL_DESCR  = MODEL.MODEL_DESCR)


end-SELECT

end-procedure EMPLOYEE-WITH-PRIMARY-CAR



!*=================================================================
! Procedure     : CAR ACCESSORIES                                 !
! Descr         : This procedure gets accessory details           !
!                                                                 !
!*=================================================================

begin-procedure CAR-ACCESSORIES

        let $ACSRY_EXTRA_COST = '0.00'
        let $ACSRY_CAR_ID = ' '

begin-SELECT on-error=ERROR-SQL
SUM(ACSRY.EXTRA_COST)                        &ACSRY.EXTRA_COST


        LET #ACSRY_EXTRA_COST                = &ACSRY.EXTRA_COST
        LET $ACSRY_EXTRA_COST                = EDIT(#ACSRY_EXTRA_COST, '888,888.88')


        FROM  PS_CAR_EXTRA ACSRY
        WHERE ACSRY.CAR_ID                   = $PCA_CAR_ID
          AND (ACSRY.INSTALL_DT              > $PCA_REGISTRATION_DT)
          AND (ACSRY.REMOVE_DT              IS NULL OR
               ACSRY.REMOVE_DT               > $PNL_END_DATE)


end-SELECT

end-procedure CAR-ACCESSORIES



!*=================================================================
! Procedure     : CAR PAYMENTS                                    !
! Descr         : This procedure gets payment details             !
!                                                                 !
!*=================================================================

begin-procedure CAR-PAYMENTS

        let $PAY_PAYMENT_AMT = '0.00'
        let #PAY_PAYMENT_AMTS = 0
        let $PAY_FREQUENCY_TYPE = ' '

begin-SELECT on-error=ERROR-SQL
SUM(PAY.PAYMENT_AMT)                        &PAY.PAYMENT_AMT
PAY.FREQUENCY_TYPE


        LET #PAY_PAYMENT_AMT                = &PAY.PAYMENT_AMT

        LET $PAY_FREQUENCY_TYPE             = &PAY.FREQUENCY_TYPE

            evaluate  $PAY_FREQUENCY_TYPE
                when = 'W'
                    let #PAY_PAYMENT_AMT = #PAY_PAYMENT_AMT * 52
                    break
                when = 'M'
                    let #PAY_PAYMENT_AMT = #PAY_PAYMENT_AMT * 12
                    break
                when = 'Q'
                    let #PAY_PAYMENT_AMT = #PAY_PAYMENT_AMT * 4
                    break
                when = 'Y'
                    let #PAY_PAYMENT_AMT = #PAY_PAYMENT_AMT * 1
                    break
                when-other
                    break
            end-evaluate

        let #PAY_PAYMENT_AMTS = #PAY_PAYMENT_AMTS + #PAY_PAYMENT_AMT

        LET $PAY_PAYMENT_AMT              = EDIT(#PAY_PAYMENT_AMTS, '8,888.88')
            if isblank($PAY_PAYMENT_AMT)  = #FALSE
               let $frequency             = 'X'
            end-if

        FROM  PS_CAR_PAYMENTS PAY,
              PS_CAR_ALLOC CAR
        WHERE PAY.EMPLID                  = $PCA_EMPLID
          AND PAY.EMPLID                  = CAR.EMPLID
          AND PAY.EMPL_RCD                = #PCA_EMPL_RCD
          AND PAY.EMPL_RCD                = CAR.EMPL_RCD
          AND PAY.PAYMENT_DT             >= $PCA_START_DT
          AND PAY.PLAN_TYPE               = CAR.PLAN_TYPE
          AND PAY.BENEFIT_NBR             = CAR.BENEFIT_NBR
          AND PAY.EFFDT                   = (SELECT  MAX(PAY2.EFFDT)
                                                FROM  PS_CAR_PAYMENTS PAY2
                                                WHERE  PAY2.EMPLID      = PAY.EMPLID
                                                  AND  PAY2.EMPL_RCD    = PAY.EMPL_RCD
                                                  AND  PAY2.PLAN_TYPE   = PAY.PLAN_TYPE
                                                  AND  PAY2.BENEFIT_NBR = PAY.BENEFIT_NBR
                                                  AND  PAY2.CAR_ID      = PAY.CAR_ID)

          AND PAY.CAR_ID                  = CAR.CAR_ID
          AND CAR.CAR_TYPE_CD             = 'P'
          GROUP BY PAY.FREQUENCY_TYPE

end-SELECT

        !for print alignment
        if $frequency <> 'X'
           LET $frequency = {SPACE}
        end-if

end-procedure CAR-PAYMENTS


!*=================================================================
! Procedure     : REPLACEMENT CAR                                 !
! Descr         : This procedure gets employee with a             !
!                 replacement primary car                         !
!                                                                 !
!*=================================================================

begin-procedure REPLACEMENT-CAR


begin-SELECT on-error=ERROR-SQL
B.MANUFACT_CD
B.MODEL_DESCR
C.ENGINE_SIZE

        LET $RPC_MANUFACT_CD              = RTRIM(&B.MANUFACT_CD, ' ')
        LET $RPC_MODEL_DESCR              = RTRIM(&B.MODEL_DESCR, ' ')
        LET #RPC_ENGINE_SIZE              = &C.ENGINE_SIZE
        LET $RPC_ENGINE_SIZE              = EDIT(#RPC_ENGINE_SIZE, '8888')


        if isblank ($RPC_MANUFACT_CD)     = #FALSE
           LET $rpc_car = 'X'
        end-if

        let $FieldName = 'MANUFACT_CD'
        let $FieldValue = $RPC_MANUFACT_CD
            do Read-Translate-Table
        let $RPC_MANUFACT_CD = RTRIM($XlatLongName,' ')


        FROM  PS_CAR_ALLOC A,
              PS_CAR_DATA B,
              PS_CAR_MODEL C
        WHERE A.EMPLID                  = $PERSON_EMPLID
          AND A.EFFDT                   = (SELECT MAX(A2.EFFDT)
                                             FROM PS_CAR_ALLOC A2
                                            WHERE A2.EMPLID      = A.EMPLID
                                              AND A2.EMPL_RCD    = A.EMPL_RCD
                                              AND A2.PLAN_TYPE   = A.PLAN_TYPE
                                              AND A2.BENEFIT_NBR = A.BENEFIT_NBR
                                              AND A2.CAR_ID      = A.CAR_ID)
          AND A.CAR_TYPE_CD             = 'R'
          AND A.START_DT                = (SELECT MAX(A1.START_DT)
                                             FROM PS_CAR_ALLOC A1
                                            WHERE A1.EMPLID       = A.EMPLID
                                              AND A1.CAR_TYPE_CD  = A.CAR_TYPE_CD
                                              AND A1.START_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE)


          AND (A.END_DT IS NULL OR
               A.END_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE OR
               A.END_DT  >= $PNL_END_DATE)

          AND A.CAR_ID                  = B.CAR_ID
          AND B.MANUFACT_CD             = C.MANUFACT_CD
          AND B.MODEL_DESCR             = C.MODEL_DESCR
          AND C.EFFDT                   = (SELECT MAX(C1.EFFDT)
                                             FROM PS_CAR_MODEL C1
                                            WHERE C1.MANUFACT_CD  = C.MANUFACT_CD
                                              AND C1.MODEL_DESCR  = C.MODEL_DESCR)

end-SELECT

        !for print alignment
        if $rpc_car <> 'X'
           LET $RPC_MANUFACT_CD  = {SPACE}
           LET $RPC_MODEL_DESCR  = {SPACE}
           LET $RPC_ENGINE_SIZE  = {SPACE}
        end-if

end-procedure REPLACEMENT-CAR


!*=================================================================
! Procedure     : EMPLOYEE WITH SECOND CAR                        !
! Descr         : This procedure gets employee's assigned a       !
!                 second car                                      !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-WITH-SECOND-CAR


begin-SELECT on-error=ERROR-SQL   !SELECTS EMPLOYEE WITH SECOND CAR
SCA.CAR_TYPE_CD


        LET $SCA_CAR_TYPE_CD            = RTRIM(&SCA.CAR_TYPE_CD,' ')


        if isblank ($SCA_CAR_TYPE_CD)   = #FALSE
           LET $second_car = 'X'
        end-if


        FROM  PS_CAR_ALLOC SCA
        WHERE SCA.EMPLID                = $PERSON_EMPLID
          AND SCA.EFFDT                 = (SELECT  MAX(SCA1.EFFDT)
                                             FROM  PS_CAR_ALLOC SCA1
                                            WHERE  SCA1.EMPLID      = SCA.EMPLID
                                              AND  SCA1.EMPL_RCD    = SCA.EMPL_RCD
                                              AND  SCA1.PLAN_TYPE   = SCA.PLAN_TYPE
                                              AND  SCA1.BENEFIT_NBR = SCA.BENEFIT_NBR
                                              AND  SCA1.CAR_ID      = SCA.CAR_ID)

          AND SCA.CAR_TYPE_CD           = 'S'
          AND SCA.START_DT  <= $PNL_START_DATE
          AND (SCA.END_DT IS NULL OR
               SCA.END_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE OR
               SCA.END_DT  >= $PNL_END_DATE)



end-SELECT

        !for print alignment
        if $second_car <> 'X'
           LET $second_car = {SPACE}
        end-if

end-procedure EMPLOYEE-WITH-SECOND-CAR



!*=================================================================
! Procedure     : EMPLOYEE WITH WITHDRAWN CAR                     !
! Descr         : This procedure gets employee's assigned a       !
!                 second car                                      !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-WITH-WITHDRAWN-CAR

begin-SELECT on-error=ERROR-SQL
D.CAR_ID
D.END_DT
E.MANUFACT_CD
E.MODEL_DESCR
F.ENGINE_SIZE

        LET $CWD_CAR_ID                   = &D.CAR_ID
        LET $CWD_END_DT                   = &D.END_DT
            do Format-DateTime($CWD_END_DT, $CWD_END_DMY, {DEFDMY}, '', '')
        LET $CWD_END_DMY_1                = SUBSTR($CWD_END_DMY, 1, 2)
        LET $CWD_END_DMY_2                = SUBSTR($CWD_END_DMY, 4, 2)
        LET $CWD_END_DMY_3                = SUBSTR($CWD_END_DMY, 7, 4)


        LET $CWD_MANUFACT_CD              = RTRIM(&E.MANUFACT_CD, ' ')
        LET $CWD_MODEL_DESCR              = RTRIM(&E.MODEL_DESCR, ' ')
        LET #CWD_ENGINE_SIZE              = &F.ENGINE_SIZE
        LET $CWD_ENGINE_SIZE              = EDIT(#CWD_ENGINE_SIZE, '8888')

        let $FieldName = 'MANUFACT_CD'
        let $FieldValue = $CWD_MANUFACT_CD
            do Read-Translate-Table
        let $CWD_MANUFACT_CD = RTRIM($XlatLongName,' ')

        if isblank ($CWD_MANUFACT_CD)     = #FALSE
              LET $cwd_car = 'X'
        end-if

        FROM  PS_CAR_ALLOC D,
              PS_CAR_DATA E,
              PS_CAR_MODEL F
        WHERE D.EMPLID                    = $PERSON_EMPLID
          AND D.EFFDT                     = (SELECT  MAX(D2.EFFDT)
                                                 FROM  PS_CAR_ALLOC D2
                                                WHERE  D2.EMPLID      = D.EMPLID
                                                  AND  D2.EMPL_RCD    = D.EMPL_RCD
                                                  AND  D2.PLAN_TYPE   = D.PLAN_TYPE
                                                  AND  D2.BENEFIT_NBR = D.BENEFIT_NBR
                                                  AND  D2.CAR_ID      = D.CAR_ID)

          AND D.CAR_TYPE_CD               = 'P'
          AND D.END_DT BETWEEN $PNL_START_DATE  AND $PNL_END_DATE
          AND D.CAR_ID                    = E.CAR_ID
          AND E.MANUFACT_CD               = F.MANUFACT_CD
          AND E.MODEL_DESCR               = F.MODEL_DESCR
          AND F.EFFDT                     = (SELECT MAX(F1.EFFDT)
                                               FROM PS_CAR_MODEL F1
                                              WHERE F1.MANUFACT_CD   = F.MANUFACT_CD
                                                AND F1.MODEL_DESCR   = F.MODEL_DESCR)


end-SELECT

end-procedure EMPLOYEE-WITH-WITHDRAWN-CAR


!*=================================================================
! Procedure     : EMPLOYEE COMPRATE                               !
! Descr         : This procedure gets employee's compensation(s)  !
!                                                                 !
!*=================================================================

begin-procedure EMPLOYEE-COMPRATE

begin-SELECT on-error=ERROR-SQL
SUM(G.ANNUAL_RT)                      &G.ANNUAL_RT


        LET #G_ANNUAL_RT              = &G.ANNUAL_RT
        LET $G_ANNUAL_RT              = EDIT(#G_ANNUAL_RT, '9,999,999.99')


        FROM PS_JOB G
        WHERE G.EMPLID               = $PERSON_EMPLID
          AND G.EFFDT                = (SELECT  MAX(G1.EFFDT)
                                          FROM  PS_JOB G1
                                         WHERE  G1.EMPLID   = G.EMPLID
                                           AND  G1.EMPL_RCD = G.EMPL_RCD
                                           AND  G1.EFFDT   <= $PNL_END_DATE)
          AND G.EFFSEQ               = (SELECT  MAX(G2.EFFSEQ)
                                          FROM  PS_JOB G2
                                         WHERE  G2.EMPLID   = G.EMPLID
                                           AND  G2.EMPL_RCD = G.EMPL_RCD
                                           AND  G2.EFFDT    = G.EFFDT)
end-SELECT

        if #G_ANNUAL_RT > 8500
           let $earn_rt = 'X'
        else
           do CHECK-DIRECTOR
        end-if


end-procedure EMPLOYEE-COMPRATE



!*=================================================================
! Procedure     : CHECK DIRECTOR                                  !
! Descr         : This procedure checks if employee is a director !
!                                                                 !
!*=================================================================

begin-procedure CHECK-DIRECTOR

begin-SELECT on-error=ERROR-SQL

DIR.GPGB_DIRECTOR_IND


        LET $DIR.GPGB_DIRECTOR_IND   = &DIR.GPGB_DIRECTOR_IND


        FROM PS_GPGB_EE_NI DIR
        WHERE DIR.EMPLID               = $PERSON_EMPLID
          AND DIR.EFFDT                = (SELECT MAX(DIR1.EFFDT)
                                          FROM PS_GPGB_EE_NI DIR1
                                         WHERE DIR.EMPLID   = DIR1.EMPLID
                                           AND DIR.EMPL_RCD = DIR1.EMPL_RCD)

end-SELECT

        if $DIR.GPGB_DIRECTOR_IND = 'Y'
           let $earn_rt = 'X'
        else
           let $earn_rt = {SPACE}
        end-if

end-procedure CHECK-DIRECTOR


!*=================================================================
! Procedure: RESET-VARIABLES                                      !
! Descr:     Reset variables used in printing                     !
!*=================================================================
begin-procedure RESET-VARIABLES


           LET $PERSON_NAME                  = {SPACE}
           LET $PERS_NI                      = {SPACE}
           LET $check_pers                   = {SPACE}

           LET $cwd_car                      = {SPACE}
           LET $primary_car                  = {SPACE}
           LET $CWD_END_DMY                  = {SPACE}
           LET $rpc_car                      = {SPACE}
           LET $CWD_MANUFACT_CD              = {SPACE}
           LET $CWD_MODEL_DESCR              = {SPACE}
           LET $CWD_ENGINE_SIZE              = {SPACE}
           LET $RPC_MANUFACT_CD              = {SPACE}
           LET $RPC_MODEL_DESCR              = {SPACE}
           LET $RPC_ENGINE_SIZE              = {SPACE}
           LET $second_car                   = {SPACE}
           LET $earn_rt                      = {SPACE}

           LET $make_and_model               = {SPACE}
           LET $PCA_ENGINE_SIZE              = {SPACE}
           LET $PCA_LIST_COST                = {SPACE}
           LET $ACSRY_EXTRA_COST             = {SPACE}

           LET $size_check                   = {SPACE}
           LET $PCA_START_DMY                = {SPACE}
           LET $PCA_REGISTRATION_DMY         = {SPACE}
           LET $PCA_CAPITAL_CNTRB_AMT        = {SPACE}
           LET $PAY_PAYMENT_AMT              = {SPACE}
           LET $frequency                    = {SPACE}

           LET $PCA_FUEL_PROVIDED_SW         = {SPACE}
           LET $PCA_ENGINE_TYPE_CD           = {SPACE}

           LET $PCA_FUEL_REIMBURSED_SW       = {SPACE}
           LET $PCA_C02_EMISSIONS            = {SPACE}
           LET $first_reg                    = {SPACE}
           LET $later_reg                    = {SPACE}
           LET $check_first                  = {SPACE}
           LET $check_later                  = {SPACE}


end-procedure RESET-VARIABLES


!*=================================================================
! Procedure: PRINT-REPORT                                         !
! Descr:     Prints P46 information                               !
!*=================================================================
begin-procedure PRINT-REPORT

        LET $ProcedureName = 'PRINT-REPORT'
        SHOW 'PROCEDURE->' $ProcedureName

        if isblank ($EE_EMPLID) = #FALSE

           PRINT $ER_NAME                      (+18,{Pos1A})
           PRINT $PERSON_NAME                  (   ,{Pos1E})
           PRINT $ER_PHONE                     ( +5,{Pos1A})
           PRINT $PERS_NI_1                    (   ,69)
           PRINT $PERS_NI_2                    (   ,73)
           PRINT $PERS_NI_3                    (   ,77)
           PRINT $PERS_NI_4                    (   ,81)
           PRINT $PERS_NI_5                    (   ,85)
           PRINT $PERS_NI_6                    (   ,89)
           PRINT $PERS_NI_7                    (   ,93)
           PRINT $PERS_NI_8                    (   ,97)
           PRINT $PERS_NI_9                    (   ,102)


           PRINT $ER_REF                       ( +5,{Pos1A})

           PRINT $cwd_car                      (+18,118)
           PRINT $primary_car                  ( +4,{Pos1D})

           PRINT $CWD_END_DMY_1                (   ,92)
           PRINT $CWD_END_DMY_2                (   ,101)
           PRINT $CWD_END_DMY_3                (   ,111)

           PRINT $rpc_car                      ( +6,{Pos1D})

           PRINT $CWD_MANUFACT_CD              (   ,{Pos1H})
           PRINT $CWD_MODEL_DESCR              ( +3,{Pos1H})
           PRINT $CWD_ENGINE_SIZE              ( +3,{Pos1I})

           PRINT $RPC_MANUFACT_CD              ( +3,{Pos1B})
           PRINT $RPC_MODEL_DESCR              ( +3,{Pos1B})
           PRINT $RPC_ENGINE_SIZE              ( +3,{Pos1C})
           PRINT $second_car                   ( +6,{Pos1D})
           PRINT $earn_rt                      ( +3,{Pos1D})

           NEW-PAGE

           !ignore parts 2,3,4 and 5 if box 5 on P46(Car) form is checked
           if $cwd_car <> 'X'

             PRINT $make_and_model             ( +3,{Pos1B})
             PRINT $PCA_ENGINE_SIZE            ( +3,{Pos1C})
             PRINT $PCA_LIST_COST              (   ,{Pos1M})
             PRINT $ACSRY_EXTRA_COST           ( +5,{Pos1M})

             evaluate $size_check
                when = '1'
                   PRINT 'X'                   ( +1,28)
                   PRINT ' '                   ( +4, 0)   ! skiplines
                   break
                when = '3'
                   PRINT 'X'                   ( +1,{Pos1D})
                   PRINT ' '                   ( +4, 0)   ! skiplines
                   break
                when = '2'
                   PRINT ' '                   ( +1, 0)   ! skiplines
                   PRINT 'X'                   ( +2,28)
                   PRINT ' '                   ( +2, 0)   ! skiplines
                   break
                when = '0'
                   PRINT ' '                   ( +1, 0)   ! skiplines
                   PRINT 'X'                   ( +2,{Pos1D})
                   PRINT ' '                   ( +2, 0)   ! skiplines
                   break
                when-other
                   break
             end-evaluate

             PRINT $PCA_START_DMY_1            ( +1,93)
             PRINT $PCA_START_DMY_2            (   ,103)
             PRINT $PCA_START_DMY_3            (   ,112)

             PRINT $PCA_REGISTRATION_DMY_1     ( +1,31)
             PRINT $PCA_REGISTRATION_DMY_2     (   ,41)
             PRINT $PCA_REGISTRATION_DMY_3     (   ,50)


             PRINT $PCA_CAPITAL_CNTRB_AMT      ( +5,{Pos1M})
             PRINT $PAY_PAYMENT_AMT            ( +6,{Pos1M})
             PRINT $frequency                  ( +5,108)

             evaluate $PCA_FUEL_PROVIDED_SW
                when = 'Y'
                   PRINT 'X'                   ( +13,{Pos1F})
                   break
                when-other
                   PRINT 'X'                   ( +13,{Pos1H})
                   break
             end-evaluate


             PRINT $PCA_ENGINE_TYPE_CD         ( +7,49)

             evaluate $PCA_FUEL_REIMBURSED_SW
                when = 'Y'
                   PRINT 'X'                   ( +1,{Pos1F})
                   break
                when-other
                   PRINT 'X'                   ( +1,{Pos1H})
                   break
             end-evaluate

             PRINT $PCA_C02_EMISSIONS          ( +16,14)
             PRINT $check_first                ( +7,{Pos1D})
             PRINT $check_later                ( +2,{Pos1D})

           end-if

        end-if

end-procedure PRINT-REPORT

!begin-footing 2

!end-footing


!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************

!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure ERROR-SQL

        add 1 to #CountError

        show 'SQL Error -> ' $ProcedureName
        show 'SQL Error -> ' $ErrorMessage
        show 'SQL Error -> ' $SQL-ERROR

        stop

end-procedure ERROR-SQL

!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'stdapi.sqc'    ! Routines to update run status
#include 'reset1.sqc'    ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declaration
#include 'readxlat.sqc'  ! Read Translate Table
!******************************* End Of Program *******************

