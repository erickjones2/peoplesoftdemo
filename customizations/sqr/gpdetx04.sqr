!***********************************************************************
!  GPDETX04:  Pay Journal - Lohnjournal                                *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:37:17                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc' !set environment
#include 'setup32.sqc'

#define colh0 1               !PersNr
#define colh1 14              !Name
#define colh2 29              !St-Kl
#define colh3 33              !Kfb
#define colh4 39              !SV
#define colh5 44              !PV
#define colh6 48              !KK
#define colh7 58              !StTg
#define colh8 62              !SVTg


#define col1 1
#define col2 14
#define col3 29
#define col4 44
#define col5 59
#define col6 74
#define col7 89
#define col8 104
#define col9 119
#define col10 134
#define col11 149
#define col12 164

begin-setup
! Array from heading Pin Name
create-array name = pinhead size = 12
  field = pinnm:char
  field = pinnumber:number

  ! Pin Num Information for every employee level

create-array name = pin size = 12
  field = pinnum:number
end-setup

!**********************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-PROGRAM
!**********************************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
end-procedure
!**********************************************************************
begin-footing 6
   do Print-Totalsum-FOOT
   let $VersBez = $Bezeichn || ' ' || $VersionsNr
   print $VersBez (+1,130)
end-footing

!****************************************************************************
begin-procedure Process-Main
  do Get_Type_Options
  do Get_VersionNr
  do Get-Element-Heading
  do Get-Payjournal-Data
end-procedure
!****************************************************************************
begin-procedure Init-Report

  do Stdapi-Init

   if $prcs_process_instance = ''
    do Ask-Report-Parameters                !in GPDEUT03.SQC
  else
    do Get-Report-Parameters                !in GPDEUT06.SQC
  end-if

  move 'GPDETX04' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE1
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle
  do Initial_Convert_Currency
end-procedure Init-Report
!****************************************************************************************
begin-procedure Initial_Convert_Currency
do format-datetime($Ctl_End_Dt,$LastD,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $LastD >= $Stichtag
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
 let $ToCurrency = 'EUR'
else
 let $ToCurrency = 'DEM'
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
end-if
end-procedure
!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPDEGLOB', 'EMPLID',        $HD_EMPLID, #CW)
  do Get_Field_Information ('GPDEGLOB', 'SUM',           $SUM,       #CW)
  do Get_Field_Information ('GPDEGLOB', 'PAGE_TOTAL',    $PAGE_TOTAL,#CW)
  do Get_Field_Information ('GPDEGLOB', 'TOTAL',         $TOTAL,     #CW)
  do Get_Field_Information ('GPDETX04', 'TITLE1',        $TITLE1,    #CW)
  do Get_Field_Information ('GPDETX04', 'DESCR',         $DESCR,     #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',  $AMOUNT_SPEC,#CW)
end-Procedure Report-Translation
!***********************************************************************
begin-procedure Strings_Pads ( $Str1 , :$Str2 , #Len1 )
   let $Str1 = rtrim(ltrim($Str1 , ' ' ) , ' ' )
   let $Str01 = rtrim(substr($Str1 , 1 , #Len1) ,' ' )
   let $Str2 = lpad($Str01 , #Len1 , ' ' )
end-procedure
!****************************************************************************
begin-procedure Assign-Heading-Variables

get $PIN_NM1 from pinhead(0) pinnm
get $PIN_NM2 from pinhead(1) pinnm
get $PIN_NM3 from pinhead(2) pinnm
get $PIN_NM4 from pinhead(3) pinnm
get $PIN_NM5 from pinhead(4) pinnm
get $PIN_NM6 from pinhead(5) pinnm
get $PIN_NM7 from pinhead(6) pinnm
get $PIN_NM8 from pinhead(7) pinnm
get $PIN_NM9 from pinhead(8) pinnm
get $PIN_NM10 from pinhead(9) pinnm
get $PIN_NM11 from pinhead(10) pinnm

do Strings_Pads ( $PIN_NM1 , $PIN_NM1_STR , 14 )
do Strings_Pads ( $PIN_NM2 , $PIN_NM2_STR , 14 )
do Strings_Pads ( $PIN_NM3 , $PIN_NM3_STR , 14 )
do Strings_Pads ( $PIN_NM4 , $PIN_NM4_STR , 14 )
do Strings_Pads ( $PIN_NM5 , $PIN_NM5_STR , 14 )
do Strings_Pads ( $PIN_NM6 , $PIN_NM6_STR , 14 )
do Strings_Pads ( $PIN_NM7 , $PIN_NM7_STR , 14 )
do Strings_Pads ( $PIN_NM8 , $PIN_NM8_STR , 14 )
do Strings_Pads ( $PIN_NM9 , $PIN_NM9_STR , 14 )
do Strings_Pads ( $PIN_NM10 , $PIN_NM10_STR , 14 )
do Strings_Pads ( $PIN_NM11 , $PIN_NM11_STR , 14 )
! Array for Sorting Pin Number
get #PIN1 from pinhead(0) pinnumber
get #PIN2 from pinhead(1) pinnumber
get #PIN3 from pinhead(2) pinnumber
get #PIN4 from pinhead(3) pinnumber
get #PIN5 from pinhead(4) pinnumber
get #PIN6 from pinhead(5) pinnumber
get #PIN7 from pinhead(6) pinnumber
get #PIN8 from pinhead(7) pinnumber
get #PIN9 from pinhead(8) pinnumber
get #PIN10 from pinhead(9) pinnumber
get #PIN11 from pinhead(10) pinnumber

End-procedure Assign-Heading-Variables

!************************************************

begin-procedure Assign-Pin-Variables

get #PIN_NUM1 from pin(0) pinnum
get #PIN_NUM2 from pin(1) pinnum
get #PIN_NUM3 from pin(2) pinnum
get #PIN_NUM4 from pin(3) pinnum
get #PIN_NUM5 from pin(4) pinnum
get #PIN_NUM6 from pin(5) pinnum
get #PIN_NUM7 from pin(6) pinnum
get #PIN_NUM8 from pin(7) pinnum
get #PIN_NUM9 from pin(8) pinnum
get #PIN_NUM10 from pin(9) pinnum
get #PIN_NUM11 from pin(10) pinnum

end-procedure Assign-Pin-Variables
!************************************************
Begin-procedure Get-values
  let $language_cd = $PRCS_LANGUAGE_CD
End-procedure Get-values

!************************************************
begin-heading  12
#include 'stdhdgtr.sqc'
let #page_nr = #page_nr + 1

do ConvertToComponents($CURR_PAY_END_DT ,$Pay_End_Year,$Pay_End_Month,$Pay_End_Day)

let $ReportDt =  $Pay_End_Year

  print $PyentDescr                     (0, {colh0})
  print $AMOUNT_SPEC1                   (0,1)  center
  print $PyentAddr                      (+1, {colh0})
  print $PyentCity                      (+1, {colh0})
  print $ReportDt                       (0 , 91)      bold
  print $PyentState                     (+1, {colh0})
  print $PyentZip                       (+1, {colh0})
  print '_'                             (+1,1,182) FILL   bold
  print $HD_EMPLID                      (+1,{colh0})      bold
  print 'Descr       '                  (+1,{col1})       bold
  print $PIN_NM1_STR                    (0,{col2})        bold
  print $PIN_NM2_STR                    (0,{col3})        bold
  print $PIN_NM3_STR                    (0,{col4})        bold
  print $PIN_NM4_STR                    (0,{col5})        bold
  print $PIN_NM5_STR                    (0,{col6})        bold
  print $PIN_NM6_STR                    (0,{col7})        bold
  print $PIN_NM7_STR                    (0,{col8})        bold
  print $PIN_NM8_STR                    (0,{col9})        bold
  print $PIN_NM9_STR                    (0,{col10})       bold
  print $PIN_NM10_STR                   (0,{col11})       bold
  print $PIN_NM11_STR                   (0,{col12})       bold
  print '_'                             (+1,1,182) FILL   bold

end-heading


!**************************************************
begin-procedure Get-Element-Heading


  let #cnthead=0
begin-SELECT
A.PIN_NUM           &A.PIN_NUM
A.GPDE_AL_OVERRIDE  &A.GPDE_AL_OVERRIDE
A.GPDE_RP_HEADING   &A.GPDE_RP_HEADING
A.GPDE_AL_SEQNUM    &A.GPDE_AL_SEQNUM
B.DESCR             &B.DESCR


         put &A.PIN_NUM INTO pinhead(#cnthead) pinnumber
         let $Override = &A.GPDE_AL_OVERRIDE

         if  $Override = 'Y'
             let $Override = rtrim(substr(&A.GPDE_RP_HEADING,1,11),' ')
             put $Override INTO pinhead(#cnthead) pinnm
         else
       do Get-Description-List(&A.PIN_NUM,$Language_cd,$Descr1,$Descr3)
             let $Descr1 = rtrim(substr($Descr1,1,11),' ')
             put $Descr1  INTO pinhead(#cnthead) pinnm
         end-if

         let #cnthead = #cnthead + 1
FROM PS_GPDE_RC_TX04 A, PS_GP_PIN B
WHERE A.PIN_NUM=B.PIN_NUM
AND   A.OPRID = $prcs_oprid
AND   A.RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY A.GPDE_AL_SEQNUM
end-SELECT
  if #cnthead > 0
     do Assign-Heading-Variables
  end-if
end-procedure Get-Element-Heading

!**************************************************
begin-procedure New-Pin_Num
 let $New_Pin_Num = 'Y'
end-procedure
!**************************************************
begin-procedure Get-Payjournal-Data
if rtrim($Cal_Run_Id_Criteria,' ') = ''
  goto nodata
end-if
let $New_Empl = 'N'
let $New_Pin_Num = 'N'
   do Reset-Totalsum-Variables
let #PinNr_Old = 0
let #PinNr     = 0
let #Counter   = 0
begin-SELECT
PBD.GPDE_AL_CPAY_ENDDT  &PBD.GPDE_AL_CPAY_ENDDT
PBD.PAY_ENTITY
PBD.EMPLID              &PBD.EMPLID             ()   on-break print=never procedure=New-Employee
PBD.EMPL_RCD            &PBD.EMPL_RCD
ACC.PIN_NUM             &PBD.PIN_NUM            ()   on-break print=never procedure=New-Pin_Num
SUM(ACC.CALC_RSLT_VAL)  &PIN_NUM1
PBD.CURRENCY_CD
PBD.CUR_RT_TYPE
PBD.GPDE_ASOF_DT_EX_RT
PBD.PRD_END_DT
  let $PrdEndDT          = &PBD.PRD_END_DT
  let $Current_Curr      = &PBD.CURRENCY_CD
  let $Current_RT_Type   = &PBD.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PBD.GPDE_ASOF_DT_EX_RT
  let #PinNr             = &PBD.PIN_NUM

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&PIN_NUM1,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#PIN_NM1,'F')
  else
     let #PIN_NM_1         = &PIN_NUM1
  end-if

  let $CURR_PAY_END_DT = &PBD.GPDE_AL_CPAY_ENDDT
  let $EmplId = &PBD.EMPLID
  do Format-Number (&PBD.EMPL_RCD, $Empl_Rcd_Num, '9')
  let $PayEntity = rtrim(&PBD.PAY_ENTITY,' ')

  let #PIN_NUM_1 = #PIN_NUM_1 + #PIN_NM_1

  evaluate &PBD.PIN_NUM

  when = #PIN1
     put #PIN_NUM_1  INTO pin(0) pinnum
     break
  when = #PIN2
     put #PIN_NUM_1  INTO pin(1) pinnum
     break
  when = #PIN3
     put #PIN_NUM_1  INTO pin(2) pinnum
     break
  when = #PIN4
     put #PIN_NUM_1  INTO pin(3) pinnum
     break
  when = #PIN5
     put #PIN_NUM_1  INTO pin(4) pinnum
     break
  when = #PIN6
     put #PIN_NUM_1  INTO pin(5) pinnum
     break
  when = #PIN7
     put #PIN_NUM_1  INTO pin(6) pinnum
     break
  when = #PIN8
     put #PIN_NUM_1  INTO pin(7) pinnum
     break
  when = #PIN9
     put #PIN_NUM_1  INTO pin(8) pinnum
     break
  when = #PIN10
     put #PIN_NUM_1  INTO pin(9) pinnum
     break
  when = #PIN11
     put #PIN_NUM_1  INTO pin(10) pinnum
     break
  when-other

     break

  end-evaluate

  if $New_Empl = 'Y'
    let $New_Empl = 'N'
 let #PIN_NUM_1 = 0
  end-if

  if $New_Pin_Num = 'Y'
     let $New_Pin_Num = 'N'
  let #PIN_NUM_1 = 0
  end-if

FROM PS_GPDE_RP_0001 PBD ,PS_GP_RSLT_ACUM ACC
WHERE  PBD.EMPLID = ACC.EMPLID
AND    PBD.CAL_RUN_ID=ACC.CAL_RUN_ID
AND    PBD.EMPL_RCD = ACC.EMPL_RCD
AND    PBD.GP_PAYGROUP = ACC.GP_PAYGROUP
AND    PBD.CAL_ID = ACC.CAL_ID
AND    PBD.RSLT_SEG_NUM = ACC.RSLT_SEG_NUM
AND    ACC.PIN_NUM IN (#PIN1,#PIN2,#PIN3,#PIN4,#PIN5,#PIN6,#PIN7,#PIN8,#PIN9,#PIN10,#PIN11)
AND    PBD.GPDE_AL_CPAY_ENDDT= (SELECT MAX(PS.GPDE_AL_CPAY_ENDDT) FROM PS_GPDE_RP_0001 PS
                                WHERE  PS.EMPLID       = PBD.EMPLID
                                AND    PS.EMPL_RCD     = PBD.EMPL_RCD
                                AND    PS.GP_PAYGROUP  = PBD.GP_PAYGROUP
                                AND    PS.CAL_ID       = PBD.CAL_ID
                                AND    PS.RSLT_SEG_NUM = PBD.RSLT_SEG_NUM
                               [$Cal_Run_Id_Criteria_PS] )
AND    PBD.GPDE_AL_CPAY_ENDDT = PBD.PRD_END_DT
[$Emplid_Crit]
[$PayEntity_Crit]
[$Paygroup_Crit]
[$Location_Crit]
[$Dept_Crit]

GROUP BY PBD.PAY_ENTITY,PBD.EMPLID,PBD.EMPL_RCD,ACC.PIN_NUM,PBD.CURRENCY_CD,PBD.GPDE_AL_CPAY_ENDDT
         ,PBD.CUR_RT_TYPE,PBD.GPDE_ASOF_DT_EX_RT,PBD.PRD_END_DT
ORDER BY PBD.PAY_ENTITY,PBD.EMPLID,PBD.EMPL_RCD,ACC.PIN_NUM,PBD.GPDE_AL_CPAY_ENDDT

end-SELECT

       let $New_Empl = 'Y'
       do New-Employee
nodata:
end-procedure Get-Payjournal-Data
!**************************************************

begin-procedure Get-Payjournal-Data-Future-Year
let $New_Pin_Num = 'N'

begin-SELECT
FED.PRD_END_DT            &FED.PRD_END_DT
FED.PAY_ENTITY
FED.EMPLID                &FED.EMPLID
FED.EMPL_RCD              &FED.EMPL_RCD
FAC.PIN_NUM               &FED.PIN_NUM    () on-break print=never procedure=New-Pin_Num
SUM(FAC.CALC_RSLT_VAL)    &PIN_VAL1
FED.CURRENCY_CD
FED.CUR_RT_TYPE
FED.GPDE_ASOF_DT_EX_RT

  let $PrdEndDT          = &FED.PRD_END_DT
  let $Current_Curr      = &FED.CURRENCY_CD
  let $Current_RT_Type   = &FED.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &FED.GPDE_ASOF_DT_EX_RT
  let #PinNr             = &FED.PIN_NUM

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&PIN_VAL1,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#PIN_VL1,'F')
  else
     let #PIN_VL1         = &PIN_VAL1
  end-if

    let #PIN_VAL_1 = #PIN_VAL_1 + #PIN_VL_1

  evaluate &FED.PIN_NUM

  when = #PIN1
     put #PIN_VAL_1  INTO pin(0) pinnum
     break
  when = #PIN2
     put #PIN_VAL_1  INTO pin(1) pinnum
     break
  when = #PIN3
     put #PIN_VAL_1  INTO pin(2) pinnum
     break
  when = #PIN4
     put #PIN_VAL_1  INTO pin(3) pinnum
     break
  when = #PIN5
     put #PIN_VAL_1  INTO pin(4) pinnum
     break
  when = #PIN6
     put #PIN_VAL_1  INTO pin(5) pinnum
     break
  when = #PIN7
     put #PIN_VAL_1  INTO pin(6) pinnum
     break
  when = #PIN8
     put #PIN_VAL_1  INTO pin(7) pinnum
     break
  when = #PIN9
     put #PIN_VAL_1  INTO pin(8) pinnum
     break
  when = #PIN10
     put #PIN_VAL_1  INTO pin(9) pinnum
     break
  when = #PIN11
     put #PIN_VAL_1  INTO pin(10) pinnum
     break
  when-other

     break

  end-evaluate

  if $New_Pin_Num = 'Y'
     let $New_Pin_Num = 'N'
  let #PIN_VAL_1 = 0
  end-if

FROM PS_GPDE_RP_0001 FED ,PS_GP_RSLT_ACUM FAC
WHERE  FED.EMPLID = FAC.EMPLID
AND    FED.CAL_RUN_ID=FAC.CAL_RUN_ID
AND    FED.EMPL_RCD = FAC.EMPL_RCD
AND    FED.GP_PAYGROUP = FAC.GP_PAYGROUP
AND    FED.CAL_ID = FAC.CAL_ID
AND    FED.RSLT_SEG_NUM = FAC.RSLT_SEG_NUM
AND    FED.EMPLID =  $EmplId
AND    FAC.PIN_NUM IN (#PIN1,#PIN2,#PIN3,#PIN4,#PIN5,#PIN6,#PIN7,#PIN8,#PIN9,#PIN10,#PIN11)
[$Cal_Run_Id_Criteria_FED]
AND    FED.PRD_END_DT = $CURR_PAY_END_DT

GROUP BY FED.PRD_END_DT,FED.PAY_ENTITY,FED.EMPLID,FED.EMPL_RCD,FAC.PIN_NUM,
         FED.CURRENCY_CD,FED.CUR_RT_TYPE,FED.GPDE_ASOF_DT_EX_RT
ORDER BY FED.PRD_END_DT,FED.PAY_ENTITY,FED.EMPLID,FED.EMPL_RCD,FAC.PIN_NUM

end-SELECT
end-procedure Get-Payjournal-Data-Future-Year
!**************************************************

Begin-procedure New-Employee
    let $New_Empl = 'Y'
    do Get-Payjournal-Data-Future-Year
    do Assign-Pin-Variables          !Assign Employee Pin values to Variables
    do Get-Employee-Data
    do Print-Employee-Data
    do Print-Payjournal-Data
    do Update-Totalsum-Variables
    clear-array name=pin
    do Reset-Employee-Variables
end-procedure New-Employee
!**************************************************
begin-procedure Get_Type_Options

let $Name_Type       = ''
let $Addr_Type       = ''
let $Phone_Type      = ''
let $Email_Type      = ''
let $BirthName_Type  = ''

begin-select distinct
INST.NAME_TYPE
INST.ADDRESS_TYPE
INST.PHONE_TYPE
INST.E_ADDR_TYPE
INST.GPDE_BIRTH_NM_TYPE

   let $Name_Type      = &INST.NAME_TYPE
   let $Addr_Type      = &INST.ADDRESS_TYPE
   let $Phone_Type     = &INST.PHONE_TYPE
   let $Email_Type     = &INST.E_ADDR_TYPE
   let $BirthName_Type = &INST.GPDE_BIRTH_NM_TYPE

from PS_GPDE_AL_INSTALL INST
end-select
end-procedure
!**************************************************
begin-procedure Get-Employee-Name1
  if $EmplID = ''  !if null, bypass the SELECT
    move '' to $Name
    goto GetEmpNmExit
  end-if
begin-SELECT
NM.NAME
FROM PS_NAMES NM
WHERE NM.EMPLID    = $EmplId
AND   NM.NAME_TYPE = $Name_Type
AND   NM.EFFDT     =(SELECT MAX(NM2.EFFDT) FROM PS_NAMES NM2 WHERE
                     NM2.EMPLID    = NM.EMPLID AND
                     NM2.NAME_TYPE = NM.NAME_TYPE AND !New change
                     NM2.EFFDT    <= NM.EFFDT)
end-SELECT
  let $Name = rtrim(&NM.NAME,' ')
GetEmpNmExit:
end-procedure
!**************************************************
begin-procedure Get-Employee-Data
   do Get-Employee-Name1                 ! in GETEMPNM.SQC
   do Get-PayEntity-Address             ! in GETCODTA.SQC
   do Get-Tax-Data
end-procedure Get-Employee-Data
!****************************************************************

begin-procedure Get-Tax-Data
  move '' to $Tax_Class
  move '' to $Num_Of_Children
  move '' to $SI_Provider
  move '' to $SV_Code
  move '' to $PV_Code
end-procedure Get-Tax-Data
!****************************************************************

begin-procedure Update-Totalsum-Variables
let #PIN_NUM_TOTAL1 = #PIN_NUM_TOTAL1 + #PIN_NUM1
let #PIN_NUM_TOTAL2 = #PIN_NUM_TOTAL2 + #PIN_NUM2
let #PIN_NUM_TOTAL3 = #PIN_NUM_TOTAL3 + #PIN_NUM3
let #PIN_NUM_TOTAL4 = #PIN_NUM_TOTAL4 + #PIN_NUM4
let #PIN_NUM_TOTAL5 = #PIN_NUM_TOTAL5 + #PIN_NUM5
let #PIN_NUM_TOTAL6 = #PIN_NUM_TOTAL6 + #PIN_NUM6
let #PIN_NUM_TOTAL7 = #PIN_NUM_TOTAL7 + #PIN_NUM7
let #PIN_NUM_TOTAL8 = #PIN_NUM_TOTAL8 + #PIN_NUM8
let #PIN_NUM_TOTAL9 = #PIN_NUM_TOTAL9 + #PIN_NUM9
let #PIN_NUM_TOTAL10 = #PIN_NUM_TOTAL10 + #PIN_NUM10
let #PIN_NUM_TOTAL11 = #PIN_NUM_TOTAL11 + #PIN_NUM11
end-procedure Update-Totalsum-Variables


!**************************************************
begin-procedure Reset-Employee-Variables

let $EmplCode = ''
let $Name = ''

let $Tax_Class = ''
let $Num_Of_Children = ''

let $SV_Code = ''
!let $PV_Code = ''
let $SI_Provider = ''

let $Steuertage = ' 0'
let $SV_Tage = ' 0'

let #PIN_NUM1 = 0
let #PIN_NUM2= 0
let #PIN_NUM3 = 0
let #PIN_NUM4 = 0
let #PIN_NUM5= 0
let #PIN_NUM6 = 0
let #PIN_NUM7 = 0
let #PIN_NUM8 = 0
let #PIN_NUM9 = 0
let #PIN_NUM10 = 0
let #PIN_NUM11 = 0
end-procedure Reset-Employee-Variables


!**************************************************
begin-procedure Reset-Totalsum-Variables
let #PIN_NUM_TOTAL1 = 0
let #PIN_NUM_TOTAL2 = 0
let #PIN_NUM_TOTAL3 = 0
let #PIN_NUM_TOTAL4 = 0
let #PIN_NUM_TOTAL5 = 0
let #PIN_NUM_TOTAL6 = 0
let #PIN_NUM_TOTAL7 = 0
let #PIN_NUM_TOTAL8 = 0
let #PIN_NUM_TOTAL9 = 0
let #PIN_NUM_TOTAL10 = 0
let #PIN_NUM_TOTAL11 = 0

end-procedure Reset-Totalsum-Variables


!**************************************************

begin-procedure Print-Employee-Data

let $EmplCode = rtrim ($Emplid, ' ')
concat '-' with $EmplCode
concat $Empl_Rcd_Num with $EmplCode

print $EmplCode                 (+1,{colh0}) bold    !PersNr
print $Name                     (0,{colh1})  bold    !Name

end-procedure Print-Employee-Data
!**************************************************
begin-procedure Print-Payjournal-Data
do Format-Number(#PIN_NUM1,$PIN_NUM1,'B99,999,999.99')
do Format-Number(#PIN_NUM2,$PIN_NUM2,'B99,999,999.99')
do Format-Number(#PIN_NUM3,$PIN_NUM3,'B99,999,999.99')
do Format-Number(#PIN_NUM4,$PIN_NUM4,'B99,999,999.99')
do Format-Number(#PIN_NUM5,$PIN_NUM5,'B99,999,999.99')
do Format-Number(#PIN_NUM6,$PIN_NUM6,'B99,999,999.99')
do Format-Number(#PIN_NUM7,$PIN_NUM7,'B99,999,999.99')
do Format-Number(#PIN_NUM8,$PIN_NUM8,'B99,999,999.99')
do Format-Number(#PIN_NUM9,$PIN_NUM9,'B99,999,999.99')
do Format-Number(#PIN_NUM10,$PIN_NUM10,'B99,999,999.99')
do Format-Number(#PIN_NUM11,$PIN_NUM11,'B99,999,999.99')

print $PIN_NUM1                    (+1,{col2})
print $PIN_NUM2                    (0,{col3})
print $PIN_NUM3                    (0,{col4})
print $PIN_NUM4                    (0,{col5})
print $PIN_NUM5                    (0,{col6})
print $PIN_NUM6                    (0,{col7})
print $PIN_NUM7                    (0,{col8})
print $PIN_NUM8                    (0,{col9})
print $PIN_NUM9                    (0,{col10})
print $PIN_NUM10                   (0,{col11})
print $PIN_NUM11                   (0,{col12})
end-procedure Print-Payjournal-Data
!**************************************************
begin-procedure Print-Totalsum
do Format-Number(#PIN_NUM_TOTAL1,$PIN_NUM_TOTAL1,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL2,$PIN_NUM_TOTAL2,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL3,$PIN_NUM_TOTAL3,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL4,$PIN_NUM_TOTAL4,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL5,$PIN_NUM_TOTAL5,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL6,$PIN_NUM_TOTAL6,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL7,$PIN_NUM_TOTAL7,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL8,$PIN_NUM_TOTAL8,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL9,$PIN_NUM_TOTAL9,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL10,$PIN_NUM_TOTAL10,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL11,$PIN_NUM_TOTAL11,'B99,999,999.99')

print '_'                                              (+1,1,182) FILL

print $SUM                                       (+1,{col1})
print $PIN_NUM_TOTAL1                            (0,{col2})
print $PIN_NUM_TOTAL2                            (0,{col3})
print $PIN_NUM_TOTAL3                            (0,{col4})
print $PIN_NUM_TOTAL4                            (0,{col5})
print $PIN_NUM_TOTAL5                            (0,{col6})
print $PIN_NUM_TOTAL6                            (0,{col7})
print $PIN_NUM_TOTAL7                            (0,{col8})
print $PIN_NUM_TOTAL8                            (0,{col9})
print $PIN_NUM_TOTAL9                            (0,{col10})
print $PIN_NUM_TOTAL10                           (0,{col11})
print $PIN_NUM_TOTAL11                           (0,{col12})
end-procedure Print-Totalsum

!****************************************************************
begin-procedure Print-Totalsum-FOOT

do Format-Number(#PIN_NUM_TOTAL1,$PIN_NUM_TOTAL1,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL2,$PIN_NUM_TOTAL2,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL3,$PIN_NUM_TOTAL3,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL4,$PIN_NUM_TOTAL4,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL5,$PIN_NUM_TOTAL5,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL6,$PIN_NUM_TOTAL6,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL7,$PIN_NUM_TOTAL7,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL8,$PIN_NUM_TOTAL8,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL9,$PIN_NUM_TOTAL9,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL10,$PIN_NUM_TOTAL10,'B99,999,999.99')
do Format-Number(#PIN_NUM_TOTAL11,$PIN_NUM_TOTAL11,'B99,999,999.99')

print '_'                                        (+1,1,182) FILL   bold

print $PAGE_TOTAL                                (+1,{col1})       bold
print $PIN_NUM_TOTAL1                            (0,{col2})
print $PIN_NUM_TOTAL2                            (0,{col3})
print $PIN_NUM_TOTAL3                            (0,{col4})
print $PIN_NUM_TOTAL4                            (0,{col5})
print $PIN_NUM_TOTAL5                            (0,{col6})
print $PIN_NUM_TOTAL6                            (0,{col7})
print $PIN_NUM_TOTAL7                            (0,{col8})
print $PIN_NUM_TOTAL8                            (0,{col9})
print $PIN_NUM_TOTAL9                            (0,{col10})
print $PIN_NUM_TOTAL10                           (0,{col11})
print $PIN_NUM_TOTAL11                           (0,{col12})

let #PIN_NUM_FOOTER1  = #PIN_NUM_FOOTER1  + #PIN_NUM_TOTAL1
let #PIN_NUM_FOOTER2  = #PIN_NUM_FOOTER2  + #PIN_NUM_TOTAL2
let #PIN_NUM_FOOTER3  = #PIN_NUM_FOOTER3  + #PIN_NUM_TOTAL3
let #PIN_NUM_FOOTER4  = #PIN_NUM_FOOTER4  + #PIN_NUM_TOTAL4
let #PIN_NUM_FOOTER5  = #PIN_NUM_FOOTER5  + #PIN_NUM_TOTAL5
let #PIN_NUM_FOOTER6  = #PIN_NUM_FOOTER6  + #PIN_NUM_TOTAL6
let #PIN_NUM_FOOTER7  = #PIN_NUM_FOOTER7  + #PIN_NUM_TOTAL7
let #PIN_NUM_FOOTER8  = #PIN_NUM_FOOTER8  + #PIN_NUM_TOTAL8
let #PIN_NUM_FOOTER9  = #PIN_NUM_FOOTER9  + #PIN_NUM_TOTAL9
let #PIN_NUM_FOOTER10 = #PIN_NUM_FOOTER10 + #PIN_NUM_TOTAL10
let #PIN_NUM_FOOTER11 = #PIN_NUM_FOOTER11 + #PIN_NUM_TOTAL11

do Format-Number(#PIN_NUM_FOOTER1,$PIN_NUM_FOOTER1,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER2,$PIN_NUM_FOOTER2,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER3,$PIN_NUM_FOOTER3,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER4,$PIN_NUM_FOOTER4,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER5,$PIN_NUM_FOOTER5,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER6,$PIN_NUM_FOOTER6,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER7,$PIN_NUM_FOOTER7,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER8,$PIN_NUM_FOOTER8,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER9,$PIN_NUM_FOOTER9,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER10,$PIN_NUM_FOOTER10,'B99,999,999.99')
do Format-Number(#PIN_NUM_FOOTER11,$PIN_NUM_FOOTER11,'B99,999,999.99')

print $TOTAL                                      (+1,{col1})  bold
print $PIN_NUM_FOOTER1                            (0,{col2})
print $PIN_NUM_FOOTER2                            (0,{col3})
print $PIN_NUM_FOOTER3                            (0,{col4})
print $PIN_NUM_FOOTER4                            (0,{col5})
print $PIN_NUM_FOOTER5                            (0,{col6})
print $PIN_NUM_FOOTER6                            (0,{col7})
print $PIN_NUM_FOOTER7                            (0,{col8})
print $PIN_NUM_FOOTER8                            (0,{col9})
print $PIN_NUM_FOOTER9                            (0,{col10})
print $PIN_NUM_FOOTER10                           (0,{col11})
print $PIN_NUM_FOOTER11                           (0,{col12})

  do Reset-Totalsum-Variables

end-procedure Print-Totalsum-FOOT

!****************************************************************
#include 'gpdeut02.sqc'   !Get Pin Description
#include 'gpdeut03.sqc'   !ask input parameters
#include 'gpdeut04.sqc'   !get pay entity data
#include 'gpdeut06.sqc'   !get run control parameter values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'datemath.sqc'  !routines for date functions
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures

