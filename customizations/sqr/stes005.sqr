!---------------------------------------------------------------------
! Report Name: STES005.SQR - Active Participants without Purchases
!---------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:50:10                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!--------------------------------------------------------------------
! Program Descr: Print active ESPP Participants who either have no
!                contributions or who have contributions but did not
!                purchase stock.
!--------------------------------------------------------------------
! Prompts:       Purchase ID, Process Group, Emplid
! Options:       Sort by Company & PayGroup
! Tables:        RUN_CNTL_ST, ST_STES005_TAO, ST_STES005_TBL
! Sorts:         By Process Group Company/PayGroup, and Name
!--------------------------------------------------------------------

#include 'setenv.sqc'

!--------------------------------------------------------------------
Begin-Setup
!--------------------------------------------------------------------

 #include 'ptpsl177.sqc'

End-Setup

!--------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!--------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Print-Report
  do Reset
  do Successful-EOJ

End-Program

!----------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all procedures for
!          printing the optional heading.
!----------------------------------------------------------
Begin-Heading 13

  #Include 'stdhdg01.sqc'

  print $StockId                                           (-1,001,009)
  print $PUR_StockId                                       (  ,017,010)
  print $PURCHASEID                                        (  ,080,011)
  print $RC_PURCHASE_ID                                    (  ,095,010)
  print $StockPlan                                         (+1,001,011)
  print $PUR_StPlan                                        (  ,017,010)
  print $OfferingId                                        (+1,001,012)
  print $PUR_Offering                                      (  ,017,010)
  print $PurchaseDt                                        (+1,001,014)
  do Format-DateTime ($PUR_PurchDt, $Dt, {DEFDATE}, '', '')
  print $Dt                                                (  ,017,010)
  print $ProcessGrp                                        (+2,001,014)
  print $ProcessGroup                                      (  ,017,010)

  if $RC_SORT = 'C'
    print $HCompany                                        (+1,001,008)
    print $Company                                         (  ,017,003)
    print $HPayGroup                                       (+1,001,009)
    print $PayGroup                                        (  ,017,003)
    print $EmplName                                        (12,001,030)
    print $NewContrib                                      (  ,099,007)
    print $Curr                                            (  ,108,008)
    print $Emplid                                          (13,001,011)
    print $GrantDt                                         (  ,032,010)
    print $GrantFMV                                        (  ,049,009)
    print $CarryFwd                                        (  ,069,013)
    print $ContribLbl                                      (  ,093,013)
    print $Code                                            (  ,108,004)
    print $Hold                                            (  ,114,011)
    print $Descr                                           (  ,127,030)
    print '-'                                              (+1,001,156) fill
  else
    print $EmplName                                        (12,001,030)
    print $NewContrib                                      (  ,118,007)
    print $Curr                                            (  ,127,008)
    print $Emplid                                          (13,001,011)
    print $HCompany                                        (  ,032,008)
    print $HPayGroup                                       (  ,041,009)
    print $GrantDt                                         (  ,051,010)
    print $GrantFMV                                        (  ,068,009)
    print $CarryFwd                                        (  ,088,013)
    print $ContribLbl                                      (  ,112,013)
    print $Code                                            (  ,127,004)
    print $Hold                                            (  ,133,011)
    print $Descr                                           (  ,146,030)
    print '-'                                              (+1,001,175) fill
  end-if

End-Heading

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ('STES005')

  do Get_Field_Information ('STOCK',   'PURCHASE_ID',     $PURCHASEID,  #DW)
  do Get_Field_Information ('STOCK'  , 'STOCK_ID',        $StockId,     #DW)
  do Get_Field_Information ('STOCK'  , 'STOCK_PLAN_DESC', $StockPlan,   #DW)
  do Get_Field_Information ('STOCK'  , 'OFFERING_ID',     $OfferingId,  #DW)
  do Get_Field_Information ('STOCK'  , 'PURCHASE_DT',     $PurchaseDt,  #DW)
  do Get_Field_Information ('STOCK'  , 'PROCESS_GRP',     $ProcessGrp,  #DW)
  do Get_Field_Information ('STOCK'  , 'COMPANY',         $HCompany,    #DW)
  do Get_Field_Information ('STOCK'  , 'PAYGROUP',        $HPaygroup,   #DW)
  do Get_Field_Information ('STOCK'  , 'NAME',            $EmplName,    #DW)
  do Get_Field_Information ('STOCK'  , 'EMPLID',          $Emplid,      #DW)
  do Get_Field_Information ('STOCK'  , 'GRANT_DT',        $GrantDt,     #DW)
  do Get_Field_Information ('STOCK'  , 'GRANT_FMV',       $GrantFMV,    #DW)
  do Get_Field_Information ('STOCK'  , 'CARRYFWD',        $CarryFwd,    #DW)
  do Get_Field_Information ('STOCK'  , 'NEW_CONTRIB',     $NewContrib,  #DW)
  do Get_Field_Information ('STOCK'  , 'DESCRIPTION',     $Descr,       #DW)
  do Get_Field_Information ('STOCK'  , 'CURRENCY_CD',     $Curr,        #DW)

  do Get_Field_Information ('STES005', 'REPORT_TITLE',    $ReportTitle, #DW)
  do Get_Field_Information ('STES005', 'CO_PAYGRP',       $HCoPayGrp,   #DW)
  do Get_Field_Information ('STES005', 'HOLD_REASON',     $Hold,        #DW)
  do Get_Field_Information ('STES005', 'AMT',             $Amt,         #DW)
  do Get_Field_Information ('STES005', 'CODE',            $Code,        #DW)
  do Get_Field_Information ('STES005', 'TOTALS',          $Totals,      #DW)
  do Get_Field_Information ('STES005', 'CONTRIBUTIONS',   $ContribLbl,  #DW)

End-Procedure

!--------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!--------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STES005'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

 if $prcs_process_instance = ''
    input $RC_PURCHASE_ID MAXLEN=10 'Purchase ID: ' Type=Char
    uppercase $RC_Purchase_ID
    input $RC_PrcsGrp MAXLEN=10 'Process Group: ' Type=Char
    uppercase $RC_PrcsGrp
 else
    do Get-SQR-Parms                            ! Get Run Control Values
 end-if

  do Get-Purchase-ID
  do Get-ESPP-Plan
  do Get-Offering-Pd
  do Build-Where-Clause
  let $AsofDate = $PUR_PurchDt
  do Expand-Process-Group

  if $RC_SORT = 'C'
    let $ReportID = 'STES005B'
  else
    let $ReportID = 'STES005A'
  end-if

End-Procedure

!----------------------------------------------------------
! Section: Print-Report
! Descr:   Main report
!----------------------------------------------------------
Begin-Procedure Print-Report

  let $WhereCurr1 = 'AND SCA.RATE_DIV <> 0 '
  let $WhereCurr2 = 'AND SCA.ESPP_CONTRIB_AMT <> 0 '
  do Populate-Contrib-Temp-Table
  do Build-Temp-Table

  if $RC_SORT = 'C'
    do Print-Co-PayGroup-Report
  else
    do Print-ProcessGroup-Report
  end-if

End-Procedure

!----------------------------------------------------------
! Section: Print-Co-PayGroup-Report
! Descr:
!----------------------------------------------------------
Begin-Procedure Print-Co-PayGroup-Report

Begin-Select
V2.COMPANY                                                 () on-break print=never Level=1 Save=$Company
V2.PAYGROUP                                                () on-break print=never Level=1 after=PayGroup-Totals
                                                           save=$PayGroup
V2.PROCESS_GROUP                                           &ProcessGroup
P3.CURRENCY_CD
N2.NAME
V2.EMPLID
V2.GRANT_DT
V2.GRANT_FMV
V2.ESPP_RESIDUAL_AMT
V2.ESPP_CONTRIB_AMT
V2.ESPP_HOLD_REASON
V2.DESCR

  let $ProcessGroup = rtrim(&ProcessGroup, ' ')
  let $PCurrCd      = rtrim(&p3.currency_cd, ' ')
  print &n2.NAME                                           (+1,001,030)
  do Format-DateTime (&v2.grant_dt, $Grant_Dt, {DEFDATE}, '', '')
  print $Grant_Dt                                          (  ,032,010)
  print &v2.grant_fmv                                      (  ,044,014) edit 999,999.999999
  print &v2.espp_residual_amt                              (  ,060,022) edit 999,999,999,999.999999
  print &v2.espp_contrib_amt                               (  ,084,022) edit 999,999,999,999.999999
  print $PCurrCd                                           (  ,108,004)
  print &v2.espp_hold_reason                               (  ,114,011)
  print &v2.descr                                          (  ,127,030)
  print &v2.emplid                                         (+1,001,011)
  print ''                                                 (+1,001,001)
  let #P1 = #P1 + &v2.espp_residual_amt
  let #P2 = #P2 + &v2.espp_contrib_amt
  let #T1 = #T1 + &v2.espp_residual_amt
  let #T2 = #T2 + &v2.espp_contrib_amt

FROM PS_ST_STES005_TBL V2,
     PS_ST_PERSON_NAME N2,
     PS_ST_PROCESS_GRP P3
WHERE V2.EMPLID        = N2.EMPLID
  AND P3.PROCESS_GROUP = V2.PROCESS_GROUP
  AND P3.EFFDT         = (SELECT MAX(P4.EFFDT)
                            FROM PS_ST_PROCESS_GRP P4
                           WHERE P4.PROCESS_GROUP = P3.PROCESS_GROUP
                             AND P4.EFFDT        <= $PUR_PurchDt)
 [$WherePrcsGrp]
ORDER BY V2.PROCESS_GROUP, V2.COMPANY, V2.PAYGROUP, N2.NAME
End-Select

End-Procedure

!----------------------------------------------------------
! Section: Print-ProcessGroup-Report
! Descr:
!----------------------------------------------------------
Begin-Procedure Print-ProcessGroup-Report

Begin-Select
V1.PROCESS_GROUP                                           () on-break print=never Level=1 after=Process-Group-Totals
                                                              save=$ProcessGroup
P1.CURRENCY_CD                                             () on-break print=never Level=1 save = $PCurrCd
N1.NAME
V1.EMPLID
V1.COMPANY
V1.PAYGROUP
V1.GRANT_DT
V1.GRANT_FMV
V1.ESPP_RESIDUAL_AMT
V1.ESPP_CONTRIB_AMT
V1.ESPP_HOLD_REASON
V1.DESCR

  print &n1.name                                           (+1,001,030)
  print &v1.company                                        (  ,032,003)
  print &v1.paygroup                                       (  ,041,003)
  do Format-DateTime (&v1.grant_dt, $Grant_Dt, {DEFDATE}, '', '')
  print $Grant_Dt                                          (  ,051,010)
  print &v1.grant_fmv                                      (  ,063,014) edit 999,999.999999
  print &v1.espp_residual_amt                              (  ,079,022) edit 999,999,999,999.999999
  print &v1.espp_contrib_amt                               (  ,103,022) edit 999,999,999,999.999999
  print &p1.currency_cd                                    (  ,127,004)
  print &v1.espp_hold_reason                               (  ,133,011)
  print &v1.descr                                          (  ,146,030)
  print &v1.emplid                                         (+1,001,011)
  print ''                                                 (+1,001,001)
  let #T1 = #T1 + &v1.espp_residual_amt
  let #T2 = #T2 + &v1.espp_contrib_amt

FROM PS_ST_STES005_TBL V1,
     PS_ST_PERSON_NAME N1,
     PS_ST_PROCESS_GRP P1
WHERE V1.EMPLID        = N1.EMPLID
  AND P1.PROCESS_GROUP = V1.PROCESS_GROUP
  AND P1.EFFDT         = (SELECT MAX(P2.EFFDT)
                            FROM PS_ST_PROCESS_GRP P2
                           WHERE P2.PROCESS_GROUP = P1.PROCESS_GROUP
                             AND P2.EFFDT        <= $PUR_PurchDt)
 [$WherePrcsGrp]
ORDER BY V1.PROCESS_GROUP, V1.COMPANY, V1.PAYGROUP, N1.NAME
End-Select

End-Procedure

!----------------------------------------------------------
! Section: Process-Group-Totals
! Descr:
!----------------------------------------------------------
Begin-Procedure Process-Group-Totals

  print '-'                                                (  ,001,175) fill
  let $TtlString  =  $ProcessGrp || ' ' || $ProcessGroup || ' ' || $Totals || ':'
  print $TtlString                                         (+1,001,035)
  print #T1                                                (  ,079,022) edit 999,999,999,999.999999
  print #T2                                                (  ,103,022) edit 999,999,999,999.999999
  print $PCurrCd                                           (  ,127,003)
  print '-'                                                (+1,001,175) fill
  let #T1 = 0
  let #T2 = 0
  new-page

End-Procedure

!----------------------------------------------------------
! Section: PayGroup-Totals
! Descr:
!----------------------------------------------------------
Begin-Procedure PayGroup-Totals

  print '-'                                                (  ,001,156) fill
  let $TtlString  =  $H2PayGroup || ' ' || $PayGroup || ' ' || $Totals || ':'
  print $TtlString                                         (+1,001,035)
  print #P1                                                (  ,060,022) edit 999,999,999,999.999999
  print #P2                                                (  ,084,022) edit 999,999,999,999.999999
  print $PCurrCd                                           (  ,108,003)
  print '-'                                                (+1,001,156) fill
  let #P1 = 0
  let #P2 = 0
  new-page

End-Procedure

!----------------------------------------------------------
! Section: Build-Temp-Table
! Descr:
!----------------------------------------------------------
Begin-Procedure Build-Temp-Table

  let $Procedure = 'Build-Temp-Table'
  let $SQL-Statement = 'Procedure: ' || $Procedure

  Begin-Sql     on-error = SQL-Error
    DELETE FROM PS_ST_STES005_TBL
  End-Sql
     
   !----------------------------------------------------------------------------------------------
   !  This SQL captures all active participants who do not have any contributions for the
   !  purchase period
   !----------------------------------------------------------------------------------------------

  let $Procedure = 'Insert1'
  let $SQL-Statement = 'Procedure: ' || $Procedure

  Begin-Sql     on-error = SQL-Error
     INSERT INTO PS_ST_STES005_TBL (PROCESS_GROUP, EMPLID, GRANT_DT, GRANT_FMV, COMPANY, PAYGROUP,
            ESPP_RESIDUAL_AMT, FROM_CUR, ESPP_CONTRIB_AMT, TO_CUR, ESPP_HOLD_REASON, DESCR)
     SELECT H.PROCESS_GROUP, E.EMPLID, E.GRANT_DT, P.GRANT_FMV, J.COMPANY, J.PAYGROUP, 0, ' ', 0,
            ' ', ' ', ' '
     FROM PS_ST_ESPP_PARTIC  E,
          PS_ST_PURCHASE_PRC P,
          PS_JOB             J,
          PS_R_PRCS_GRP_DTL  H
     WHERE E.STOCK_ID        = $PUR_StockId
       AND E.STOCK_PLAN_TYPE = $PUR_StPlanType
       AND E.STOCK_PLAN      = $PUR_StPlan
       AND E.OFFERING_ID     = $PUR_Offering
       AND J.EMPLID          = E.EMPLID
       AND J.EMPL_RCD        = E.EMPL_RCD
       AND J.EFFDT           = (SELECT MAX(J2.EFFDT)
                                  FROM PS_JOB J2
                                 WHERE J2.EMPLID = J.EMPLID
                                   AND J2.EMPL_RCD = J.EMPL_RCD
                                   AND J2.EFFDT <= $PUR_PurchDt)
       AND J.EFFSEQ          = (SELECT MAX(J3.EFFSEQ)
                                  FROM PS_JOB J3
                                 WHERE J3.EMPLID = J.EMPLID
                                   AND J3.EMPL_RCD = J.EMPL_RCD
                                   AND J3.EFFDT = J.EFFDT)
       AND P.STOCK_ID        = E.STOCK_ID
       AND P.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
       AND P.STOCK_PLAN      = E.STOCK_PLAN
       AND P.OFFERING_ID     = E.OFFERING_ID
       AND P.PERIOD_END_DT   = $PUR_PurchDt
       AND P.GRANT_DT        = E.GRANT_DT
       AND H.REPORT_ID       = 'STES005'
       AND H.COMPANY         = J.COMPANY
       AND H.PAYGROUP        = J.PAYGROUP
       AND NOT EXISTS (SELECT 'X' 
                         FROM PS_ST_PURCH_PARTIC P
                        WHERE P.EMPLID = E.EMPLID
                          AND P.STOCK_ID = E.STOCK_ID
                          AND P.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                          AND P.STOCK_PLAN = E.STOCK_PLAN
                          AND P.OFFERING_ID = E.OFFERING_ID
                          AND P.PERIOD_END_DT >= E.EFFDT)
       AND E.EFFDT = (SELECT MAX(E2.EFFDT)
                        FROM PS_ST_ESPP_PARTIC E2
                       WHERE E2.STOCK_ID = E.STOCK_ID
                         AND E2.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                         AND E2.STOCK_PLAN = E.STOCK_PLAN
                         AND E2.OFFERING_ID = E.OFFERING_ID
                         AND E2.EFFDT <= $PUR_PurchDt)
       AND NOT EXISTS (SELECT 'X'
                         FROM PS_SAVINGS_PLAN S
                        WHERE S.EMPLID = E.EMPLID
                          AND S.PLAN_TYPE = $PlanType
                          AND S.BENEFIT_PLAN = $BenPlan
                          AND S.COVERAGE_ELECT IN ('T','W')
                          AND S.COVERAGE_BEGIN_DT BETWEEN $OfferBegin AND $OfferEnd)
       End-Sql

   !-----------------------------------------------------------------------------------------------
   !  This SQL captures all active participants who have contributions for the purchase period
   !  but have a hold flag set (espp_hold_purchase = 'O' which requires a hold reason.   This applies
   !  to participants who  either do not have a purchase record (st_espp_purch) or have a purchase 
   !  record but did not purchase any shares.
   !----------------------------------------------------------------------------------------------

  let $Procedure = 'Insert2'
  let $SQL-Statement = 'Procedure: ' || $Procedure

  Begin-Sql     on-error = SQL-Error
      INSERT INTO PS_ST_STES005_TBL (PROCESS_GROUP, EMPLID, GRANT_DT, GRANT_FMV, COMPANY, PAYGROUP,
            ESPP_RESIDUAL_AMT, FROM_CUR, ESPP_CONTRIB_AMT, TO_CUR, ESPP_HOLD_REASON, DESCR)
      SELECT  E.PROCESS_GROUP, E.EMPLID, E.GRANT_DT, P.GRANT_FMV,T.COMPANY, T.PAYGROUP, SUM(T.CARRYOVER_AMT), T.FROM_CUR
             ,SUM(T.ESPP_CONTRIB_AMT), T.FROM_CUR, E.ESPP_HOLD_REASON, H.DESCR
      FROM PS_ST_PURCH_PARTIC E,
           PS_R_CONTRIB_PART  T,
           PS_ST_PURCHASE_PRC P,
           PS_ST_HOLD_RSN_TBL H
      WHERE E.STOCK_ID           = $PUR_StockId
        AND E.STOCK_PLAN_TYPE    = $PUR_StPlanType
        AND E.STOCK_PLAN         = $PUR_StPlan
        AND E.OFFERING_ID        = $PUR_Offering
        AND E.PERIOD_END_DT      = $PUR_PurchDt
        AND E.ESPP_HOLD_PURCHASE = 'O'
        AND T.REPORT_ID          = $ReportID
        AND T.EMPLID             = E.EMPLID
        AND T.STOCK_ID           = E.STOCK_ID
        AND T.STOCK_PLAN_TYPE    = E.STOCK_PLAN_TYPE
        AND T.OFFERING_ID        = E.OFFERING_ID
        AND T.PERIOD_END_DT      = E.PERIOD_END_DT
        AND T.PROCESS_GROUP      = E.PROCESS_GROUP
        AND P.STOCK_ID           = E.STOCK_ID
        AND P.STOCK_PLAN_TYPE    = E.STOCK_PLAN_TYPE
        AND P.STOCK_PLAN         = E.STOCK_PLAN
        AND P.OFFERING_ID        = E.OFFERING_ID
        AND P.PERIOD_END_DT      = E.PERIOD_END_DT
        AND P.GRANT_DT           = E.GRANT_DT
        AND H.ESPP_HOLD_REASON   = E.ESPP_HOLD_REASON
        AND H.EFFDT              = (SELECT MAX(H2.EFFDT)
                                      FROM PS_ST_HOLD_RSN_TBL H2
                                     WHERE H2.ESPP_HOLD_REASON = H.ESPP_HOLD_REASON
                                       AND H2.EFFDT <= $PUR_PurchDt)
        AND ((NOT EXISTS (SELECT 'X' FROM PS_ST_ESPP_PURCH P
                          WHERE P.EMPLID = E.EMPLID
                            AND P.STOCK_ID = E.STOCK_ID
                            AND P.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                            AND P.STOCK_PLAN = E.STOCK_PLAN
                            AND P.OFFERING_ID = E.OFFERING_ID
                            AND P.PERIOD_END_DT = E.PERIOD_END_DT
                            AND P.PROCESS_GROUP = E.PROCESS_GROUP) )
            OR (EXISTS (SELECT 'X' FROM PS_ST_ESPP_PURCH P2
                        WHERE P2.EMPLID = E.EMPLID
                          AND P2.STOCK_ID = E.STOCK_ID
                          AND P2.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                          AND P2.STOCK_PLAN = E.STOCK_PLAN
                          AND P2.OFFERING_ID = E.OFFERING_ID
                          AND P2.PERIOD_END_DT = E.PERIOD_END_DT
                          AND P2.PROCESS_GROUP = E.PROCESS_GROUP
                          AND P2.SHARES_PURCHASED = 0) ) )
         GROUP BY E.PROCESS_GROUP, E.EMPLID, E.GRANT_DT, P.GRANT_FMV, T.COMPANY, T.PAYGROUP, T.FROM_CUR, T.FROM_CUR, 
                  E.ESPP_HOLD_REASON, H.DESCR
   End-Sql

   !-----------------------------------------------------------------------------------------------
   !  This SQL captures all active participants who have contributions for the purchase period
   !  but have do not hold flag (espp_hold_purchase <> 'O'.   This applies to participants who
   !  either do not have a purchase record (st_espp_purch) or have a purchase record but did not
   !  purchase any shares.
   !----------------------------------------------------------------------------------------------

  let $Procedure = 'Insert3'
  let $SQL-Statement = 'Procedure: ' || $Procedure

  Begin-Sql     on-error = SQL-Error
      INSERT INTO PS_ST_STES005_TBL (PROCESS_GROUP, EMPLID, GRANT_DT, GRANT_FMV, COMPANY, PAYGROUP,
                  ESPP_RESIDUAL_AMT, FROM_CUR, ESPP_CONTRIB_AMT, TO_CUR, ESPP_HOLD_REASON, DESCR)
      SELECT E.PROCESS_GROUP, E.EMPLID, E.GRANT_DT, P.GRANT_FMV, T.COMPANY, T.PAYGROUP, SUM(T.CARRYOVER_AMT), T.FROM_CUR,
             SUM(T.ESPP_CONTRIB_AMT), T.FROM_CUR, E.ESPP_HOLD_REASON, ' '
      FROM PS_ST_PURCH_PARTIC E,
           PS_R_CONTRIB_PART  T,
           PS_ST_PURCHASE_PRC P
      WHERE E.STOCK_ID          = $PUR_StockId
        AND E.STOCK_PLAN_TYPE   = $PUR_StPlanType
        AND E.STOCK_PLAN        = $PUR_StPlan
        AND E.OFFERING_ID       = $PUR_Offering
        AND E.PERIOD_END_DT     = $PUR_PurchDt
        AND E.ESPP_HOLD_PURCHASE <> 'O'
        AND T.REPORT_ID         = $ReportID
        AND T.EMPLID            = E.EMPLID
        AND T.STOCK_ID          = E.STOCK_ID
        AND T.STOCK_PLAN_TYPE   = E.STOCK_PLAN_TYPE
        AND T.STOCK_PLAN        = E.STOCK_PLAN
        AND T.OFFERING_ID       = E.OFFERING_ID
        AND T.PERIOD_END_DT     = E.PERIOD_END_DT
        AND T.PROCESS_GROUP     = E.PROCESS_GROUP
        AND P.STOCK_ID          = E.STOCK_ID
        AND P.STOCK_PLAN_TYPE   = E.STOCK_PLAN_TYPE
        AND P.STOCK_PLAN        = E.STOCK_PLAN
        AND P.OFFERING_ID       = E.OFFERING_ID
        AND P.PERIOD_END_DT     = E.PERIOD_END_DT
        AND P.GRANT_DT          = E.GRANT_DT
        AND ((NOT EXISTS (SELECT 'X' FROM PS_ST_ESPP_PURCH P
                          WHERE P.EMPLID = E.EMPLID
                            AND P.STOCK_ID = E.STOCK_ID
                            AND P.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                            AND P.STOCK_PLAN = E.STOCK_PLAN
                            AND P.OFFERING_ID = E.OFFERING_ID
                            AND P.PERIOD_END_DT = E.PERIOD_END_DT
                            AND P.PROCESS_GROUP = E.PROCESS_GROUP) )
          OR (EXISTS (SELECT 'X' FROM PS_ST_ESPP_PURCH P2
                      WHERE P2.EMPLID = E.EMPLID
                        AND P2.STOCK_ID = E.STOCK_ID
                        AND P2.STOCK_PLAN_TYPE = E.STOCK_PLAN_TYPE
                        AND P2.STOCK_PLAN = E.STOCK_PLAN
                        AND P2.OFFERING_ID = E.OFFERING_ID
                        AND P2.PERIOD_END_DT = E.PERIOD_END_DT
                        AND P2.PROCESS_GROUP = E.PROCESS_GROUP
                        AND P2.SHARES_PURCHASED = 0) ) )
      GROUP BY E.PROCESS_GROUP, E.EMPLID, E.GRANT_DT, P.GRANT_FMV, T.COMPANY, T.PAYGROUP, T.FROM_CUR, T.FROM_CUR, 
                  E.ESPP_HOLD_REASON

   End-Sql

 End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'    !Stock Admin's Run Control Record
#include 'sqlerr.sqc'      !SQL error processing
#include 'stdapi.sqc'
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'askftd.sqc'      
#include 'stgetfmv.sqc'    !Retrieves FMV for a particular date
#include 'getrplng.sqc'    !Gets the report language
#include 'stescomn.sqc'   ! Procedures: Get-Purchase-ID
                          !             Build-Where-Clause
#include 'stprcgrp.sqc'   ! Procedures: Expand-Process-Group
