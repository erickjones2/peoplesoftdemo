!***********************************************************************
!  GPDEGL01.SQR: Reconciliation List                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:56                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! wdu06-881b10 added procedure to replace empty accounting line record
! wdu06-881b10 setid/business_unit fix
#define versionstamp '=== Functional Update Stamp 20060224-1700 wdu06-881b10 ==='

#include 'setenv.sqc' !set environment

#define col1        1
#define col2        12
#define col3        23
#define col4        34
#define col5        45
#define col6        56
#define col7        67
#define col8        78
#define col9        145
#define col10       162
#define col_11      89
#define col_12      106
#define col_13      131
#define col11       136
#define col12       158

!************************************************************************
begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Get-PayEntity-Address
! added by Oliver Morcher, 17.02.09
  do MakeAccountingLineData
  do Process-Main
  do Reset
  do Stdapi-Term
end-Program

!************************************************************************
#include 'setup32.sqc'
begin-heading 11

  #include 'stdhdgtr.sqc'
   print $P_PYENT             (+2,{col1})
   print $PyentDescr          (+1, {col1})
   print $AMOUNT_SPEC1        (0,1)         center
   print $BUSI_UNIT           (0,{col11})
   print $P_BUS_U             (0,{col12})
   print $PyentAddr           (+1, {col1})
   print $BUSI_UNIT_GL        (0,{col11})
   print $P_BUS_UGL           (0,{col12})
   print $PyentZip            (+1, {col1})
   print $PyentCity           (, +1)
   print $JOUR_TEMP           (0,{col11})
   print $P_APP_JR            (0,{col12})
   !print $PyentState          (+1, {col1})
   print '_'                  (+1,{col1},180) FILL
   print $name1            (+1,{col1},11)
   print $name2            (0, {col2},11)
   print $name3            (0, {col3},11)
   print $name4            (0, {col4},11)
   print $name5            (0, {col5},11)
   print $name6            (0, {col6},11)
   print $name7            (0, {col7},11)
   print $name8            (0, {col8},11)
   print $ACC_DATE         (0, {col_11},16)
   print $ACC_DESCR        (0, {col_12},24)
   print $ACCOUNT          (0, {col_13},14)
   print $DEBIT            (0, {col9},17)
   print $CREDIT           (0, {col10},17)
   print '_'               (+1,{col1},180) FILL

end-heading

!************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters                !in Gpdeut06.sqc
     do Get-Values
  end-if

  move 'GPDEGL01' to $ReportID
  move 'GPDEGL02' to $ReportID1
  do Init_Report_Translation ($ReportID1, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE2
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report

!************************************************************************
begin-procedure Ask-Input

input $Ctl_Account_dt     'Accounting Date     : '
input $Ctl_Payentity      'Pay Entity          : '
input $Ctl_App_Jrnl_Id    'Journal Template    : '
input $Ctl_Busi_Unit      'Business Unit       : '
input $Ctl_Busi_Unit_Gl   'General Ledger Unit : '

end-procedure Ask-Input

!****************************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPDEGL02','BUSI_UNIT',       $BUSI_UNIT, #CW)
  do Get_Field_Information ('GPDEGL02','BUSI_UNIT_GL',   $BUSI_UNIT_GL, #CW)
  do Get_Field_Information ('GPDEGL02','JOUR_TEMP',         $JOUR_TEMP, #CW)
  do Get_Field_Information ('GPDEGL02','TITLE2',              $TITLE2 , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_TYPE',          $ACC_TYPE , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_DATE',          $ACC_DATE , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_DESCR',        $ACC_DESCR , #CW)
  do Get_Field_Information ('GPDEGL02','ACCOUNT',            $ACCOUNT , #CW)
  do Get_Field_Information ('GPDEGL02','DEBIT',                $DEBIT , #CW)
  do Get_Field_Information ('GPDEGL02','CREDIT',              $CREDIT , #CW)
  do Get_Field_Information ('GPDEGLOB', 'SUM',                    $SUM, #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',    $AMOUNT_SPEC, #CW)

  let $DEBIT  = rtrim($DEBIT,' ')
  let $DEBIT  = lpad($DEBIT,17,' ')
  let $CREDIT = rtrim($CREDIT,' ')
  let $CREDIT = lpad($CREDIT,17,' ')

end-Procedure Report-Translation

!****************************************************************************
begin-procedure Process-Main
#DEBUG show '-> Process-Main  '
do format-datetime($Ctl_Account_dt,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
   let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
   let $ToCurrency = 'EUR'
   let $Eur = ' EUR '
else
   let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
   let $ToCurrency = 'DEM'
   let $Eur = ' DM '
end-if
  do Get-Chart-Fields
  do Get-Chart-Head

  ! create accounting line work-data
  do MakeAccountingLineData

BEGIN-Select
B.PAY_ENTITY           &P_PYENT   () on-break print=never  procedure=New-Date
A.BUSINESS_UNIT_GL     &P_BUS_UGL () on-break print=never  procedure=New-Date
A.BUSINESS_UNIT        &P_BUS_U   () on-break print=never  procedure=New-Date
A.APPL_JRNL_ID         &P_APP_JR  () on-break print=never  procedure=New-Date
[$Chart_fld1]          &pa1=char  () on-break print=never  level=1 after=Chart-Total1
[$Chart_fld2]          &pa2=char  () on-break print=never  level=2 after=Chart-Total2
[$Chart_fld3]          &pa3=char  () on-break print=never  level=3 after=Chart-Total3
[$Chart_fld4]          &pa4=char  () on-break print=never  level=4 after=Chart-Total4
[$Chart_fld5]          &pa5=char  () on-break print=never  level=5 after=Chart-Total5
[$Chart_fld6]          &pa6=char  () on-break print=never  level=6 after=Chart-Total6
[$Chart_fld7]          &pa7=char  () on-break print=never  level=7 after=Chart-Total7
[$Chart_fld8]          &pa8=char  () on-break print=never  level=8 after=Chart-Total8
B.REVERSE_SIGN         &B.REVERSE_SIGN=char
SUM(A.MONETARY_AMOUNT) &A.MONETARY_AMOUNT=number
C.ACCOUNT              &P_ACCT
C.DESCR                &P_DESCR
C.ACCOUNT_TYPE         &P_ACC_TYPE
B.GROUPING_CODE        &P_GROUPING_CODE
A.ACCOUNTING_DT     &P_ACCOUNTING_DT
A.RATE_MULT
A.RATE_DIV
A.CURRENCY_CD

  let $P_PYENT        =  rtrim(&P_PYENT    ,' ')
  let $P_BUS_UGL      =  rtrim(&P_BUS_UGL  ,' ')
  let $P_BUS_U        =  rtrim(&P_BUS_U    ,' ')
  let $P_APP_JR       =  rtrim(&P_APP_JR   ,' ')
  let $P_CF1          =  rtrim(&pa1,' ')
  let $P_CF2          =  rtrim(&pa2,' ')
  let $P_CF3          =  rtrim(&pa3,' ')
  let $P_CF4          =  rtrim(&pa4,' ')
  let $P_CF5          =  rtrim(&pa5,' ')
  let $P_CF6          =  rtrim(&pa6,' ')
  let $P_CF7          =  rtrim(&pa7,' ')
  let $P_CF8          =  rtrim(&pa8,' ')
  let $P_SIGN         =  &B.REVERSE_SIGN
  let #RateMult       =  &A.RATE_MULT
  let #RateDiv        =  &A.RATE_DIV
  let $Current_Curr    =  &A.CURRENCY_CD

  if $Current_Curr <> $ToCurrency
     if #RateMult <> 0 and #RateDiv <> 0
        let #P_MON_AMT = (&A.MONETARY_AMOUNT / #RateDiv) * #RateMult
        if #P_MON_AMT <> 0
          if not #_MultiCurr
         let #Out_ToAmt = round (#P_MON_AMT, 2)
          else
            do Format_Currency_Amt_Numeric(#P_MON_AMT,$ToCurrency,&P_ACCOUNTING_DT, #Out_ToAmt, 'I')
          end-if
          let #P_MON_AMT = #Out_ToAmt
        end-if
     else
        let #P_MON_AMT = &A.MONETARY_AMOUNT
     end-if
  else
     let #P_MON_AMT = &A.MONETARY_AMOUNT
  end-if
  if $P_SIGN = 'Y'
    let #P_MON_AMT = -1 * #P_MON_AMT
 end-if
  
  do Format-Number  (#P_MON_AMT,$P_MON_AMT,'99,999,999,999.99mi')
  print $P_CF1             (+1,{col1})
  print $P_CF2             (0,{col2})
  print $P_CF3             (0,{col3})
  print $P_CF4             (0,{col4})
  print $P_CF5             (0,{col5})
  print $P_CF6             (0,{col6})
  print $P_CF7             (0,{col7})
  print $P_CF8             (0,{col8})

  do Format-DateTime(&P_ACCOUNTING_DT, $P_ACCOUNTING_DT1, {DEFDATE},'','')
  print $P_ACCOUNTING_DT1  (0, {col_11})
  print &P_DESCR           (0, {col_12},24)
  print &P_ACCT            (0, {col_13})

  if  $P_SIGN = 'N'
      print $P_MON_AMT     (0,{col9})
      let #FldDR1 = #FldDR1 + #P_MON_AMT
      let #FldDR2 = #FldDR2 + #P_MON_AMT
      let #FldDR3 = #FldDR3 + #P_MON_AMT
      let #FldDR4 = #FldDR4 + #P_MON_AMT
      let #FldDR5 = #FldDR5 + #P_MON_AMT
      let #FldDR6 = #FldDR6 + #P_MON_AMT
      let #FldDR7 = #FldDR7 + #P_MON_AMT
      let #FldDR8 = #FldDR8 + #P_MON_AMT
  else
      print $P_MON_AMT          (0,{col10})
      let #FldCR1 = #FldCR1 + #P_MON_AMT
      let #FldCR2 = #FldCR2 + #P_MON_AMT
      let #FldCR3 = #FldCR3 + #P_MON_AMT
      let #FldCR4 = #FldCR4 + #P_MON_AMT
      let #FldCR5 = #FldCR5 + #P_MON_AMT
      let #FldCR6 = #FldCR6 + #P_MON_AMT
      let #FldCR7 = #FldCR7 + #P_MON_AMT
      let #FldCR8 = #FldCR8 + #P_MON_AMT
  end-if

FROM PS_GPDE_GL_ACC_LIN A, PS_GP_GL_MAP_DTL B , PS_GL_ACCOUNT_TBL C, PS_BUS_UNIT_TBL_HR D
WHERE A.BUSINESS_UNIT = B.BUSINESS_UNIT
AND   A.PROCESS_INSTANCE = #this_process_instance ! added by Oliver Morcher, 17.02.09 - need to select also the process instance
AND   A.BUSINESS_UNIT = D.BUSINESS_UNIT
AND   A.LINE_DESCR    = B.GROUPING_CODE
AND   A.ACCOUNT       = B.ACCOUNT
AND   A.ACCOUNT       = C.ACCOUNT
AND   C.SETID         = D.BUSINESS_UNIT         ! -- was: DEFAULT_SETID
AND   C.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL CA
                         WHERE CA.SETID   = C.SETID
                         AND   CA.ACCOUNT = C.ACCOUNT
                         AND   CA.EFFDT <= $Ctl_Account_dt)
AND   C.EFF_STATUS    = 'A'
AND   B.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GP_GL_MAP_DTL BA
                         WHERE BA.PAY_ENTITY=B.PAY_ENTITY
                         AND   BA.BUSINESS_UNIT = B.BUSINESS_UNIT
                         AND   BA.GROUPING_CODE = B.GROUPING_CODE
                         AND   BA.EFFDT <= $Ctl_Account_dt)
AND  (A.PIN_CHART1_VAL = B.PIN_CHART1_VAL or B.PIN_CHART1_VAL = ' ')
AND  (A.PIN_CHART2_VAL = B.PIN_CHART2_VAL or B.PIN_CHART2_VAL = ' ')
AND  (A.PIN_CHART3_VAL = B.PIN_CHART3_VAL or B.PIN_CHART3_VAL = ' ')
AND  (A.PIN_CHART4_VAL = B.PIN_CHART4_VAL or B.PIN_CHART4_VAL = ' ')
AND  (A.PIN_CHART5_VAL = B.PIN_CHART5_VAL or B.PIN_CHART5_VAL = ' ')
AND  (A.PIN_CHART6_VAL = B.PIN_CHART6_VAL or B.PIN_CHART6_VAL = ' ')
AND  (A.PIN_CHART7_VAL = B.PIN_CHART7_VAL or B.PIN_CHART7_VAL = ' ')
AND  (A.PIN_CHART8_VAL = B.PIN_CHART8_VAL or B.PIN_CHART8_VAL = ' ')
[$B_Payentity]
[$A_Busi_Unit]
[$A_Busi_Unit_Gl]
[$A_App_Jrnl_Id]
[$A_Account_dt]

GROUP BY B.PAY_ENTITY,A.BUSINESS_UNIT_GL,A.BUSINESS_UNIT,A.APPL_JRNL_ID,[$Chart_grp] A.ACCOUNTING_DT,
         C.ACCOUNT,C.DESCR,C.ACCOUNT_TYPE,B.GROUPING_CODE,B.REVERSE_SIGN,A.RATE_MULT,A.RATE_DIV,
         A.CURRENCY_CD

ORDER BY B.PAY_ENTITY,A.BUSINESS_UNIT_GL,A.BUSINESS_UNIT,A.APPL_JRNL_ID,[$Chart_grp] A.ACCOUNTING_DT,
         C.ACCOUNT,C.DESCR,C.ACCOUNT_TYPE,B.GROUPING_CODE,B.REVERSE_SIGN
END-Select

#DEBUG show '<- Process-Main  '
end-procedure Process-Main

!****************************************************************************
begin-procedure Get-Chart-Fields

Begin-Select
CF.PIN_CHART1_NUM  &P_N1
CF.PIN_CHART2_NUM  &P_N2
CF.PIN_CHART3_NUM  &P_N3
CF.PIN_CHART4_NUM  &P_N4
CF.PIN_CHART5_NUM  &P_N5
CF.PIN_CHART6_NUM  &P_N6
CF.PIN_CHART7_NUM  &P_N7
CF.PIN_CHART8_NUM  &P_N8

   let $P_N1 = rtrim(to_char(&P_N1), ' ')
   let $P_N2 = rtrim(to_char(&P_N2), ' ')
   let $P_N3 = rtrim(to_char(&P_N3), ' ')
   let $P_N4 = rtrim(to_char(&P_N4), ' ')
   let $P_N5 = rtrim(to_char(&P_N5), ' ')
   let $P_N6 = rtrim(to_char(&P_N6), ' ')
   let $P_N7 = rtrim(to_char(&P_N7), ' ')
   let $P_N8 = rtrim(to_char(&P_N8), ' ')

   let $P_NUM = '(' || $P_N1 || ' , ' || $P_N2 || ' , ' || $P_N3 || ' , ' || $P_N4 || ' , ' ||
                $P_N5 || ' , ' || $P_N6 || ' , ' || $P_N7 || ' , ' || $P_N8 || ' ) '
   if &P_N1 <> 0
      let $Chart_fld1   = 'A.PIN_CHART1_VAL'
      let $Chart_grp1   = 'A.PIN_CHART1_VAL,'
      let $find_end     = 'End1'
   end-if

   if &P_N2 <> 0
      let $Chart_fld2  = 'A.PIN_CHART2_VAL'
      let $Chart_grp2  = 'A.PIN_CHART2_VAL,'
      let $find_end     = 'End2'
   end-if

   if &P_N3 <> 0
      let $Chart_fld3  = 'A.PIN_CHART3_VAL'
      let $Chart_grp3  = 'A.PIN_CHART3_VAL,'
      let $find_end     = 'End3'
   end-if

   if &P_N4 <> 0
      let $Chart_fld4  = 'A.PIN_CHART4_VAL'
      let $Chart_grp4  = 'A.PIN_CHART4_VAL,'
      let $find_end     = 'End4'
   end-if

   if &P_N5 <> 0
      let $Chart_fld5  = 'A.PIN_CHART5_VAL'
      let $Chart_grp5  = 'A.PIN_CHART5_VAL,'
      let $find_end     = 'End5'
   end-if

   if &P_N6 <> 0
      let $Chart_fld6  = 'A.PIN_CHART6_VAL'
      let $Chart_grp6  = 'A.PIN_CHART6_VAL,'
      let $find_end     = 'End6'
   end-if

   if &P_N7 <> 0
      let $Chart_fld7  = 'A.PIN_CHART7_VAL'
      let $Chart_grp7  = 'A.PIN_CHART7_VAL,'
      let $find_end     = 'End7'
   end-if

   if &P_N8 <> 0
      let $Chart_fld8 = 'A.PIN_CHART8_VAL'
      let $Chart_grp8 = 'A.PIN_CHART8_VAL,'
      let $find_end     = 'End8'
   end-if

   let $Chart_grp = $Chart_grp1 ||  $Chart_grp2 ||  $Chart_grp3 ||
                    $Chart_grp4 ||  $Chart_grp5 ||  $Chart_grp6 ||
                    $Chart_grp7 ||  $Chart_grp8

FROM PS_GP_GL_CHARTFLD CF
WHERE CF.PAY_ENTITY     = $Ctl_Payentity
AND   CF.BUSINESS_UNIT  = $Ctl_Busi_Unit
AND   CF.EFFDT          = (SELECT MAX(EFFDT) FROM PS_GP_GL_CHARTFLD CFA
                           WHERE  CFA.PAY_ENTITY     = CF.PAY_ENTITY
                           AND    CFA.BUSINESS_UNIT  = CF.BUSINESS_UNIT
                           AND    CFA.EFFDT         <= $Ctl_Account_dt )
End-Select

end-procedure

!****************************************************************************
begin-procedure New-Date

  new-page

end-procedure

!****************************************************************************
begin-procedure Get-Chart-Head

let #cnt = 0
if rtrim($P_NUM,' ') <> ''
   let $Pin_crit = ' where CN.PIN_NUM IN ' || $P_NUM
else
   goto ex
end-if

Begin-Select
CN.PIN_NM

  let #cnt = #cnt + 1

  evaluate #cnt
  when = 1
       let $name1 = rtrim(&CN.PIN_NM,' ')
       break
  when = 2
       let $name2 = rtrim(&CN.PIN_NM,' ')
       break
  when = 3
       let $name3 = rtrim(&CN.PIN_NM,' ')
       break
  when = 4
       let $name4 = rtrim(&CN.PIN_NM,' ')
       break
  when = 5
       let $name5 = rtrim(&CN.PIN_NM,' ')
       break
  when = 6
       let $name6 = rtrim(&CN.PIN_NM,' ')
       break
  when = 7
       let $name7 = rtrim(&CN.PIN_NM,' ')
       break
  when = 8
       let $name8 = rtrim(&CN.PIN_NM,' ')
       break
  when = 1
       let $name1 = rtrim(&CN.PIN_NM,' ')
       break
  when-other
     break
  end-evaluate

FROM PS_GP_PIN_NM_VW CN
[$Pin_crit]
End-Select
ex:
#DEBUG show '<- Get-Chart-Head  '
end-procedure

!****************************************************************************
begin-procedure Chart-Total1

      if ($Chart_fld1 = '')
         goto chart_end1
      end-if

      do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
      do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name1                (0, +1)     bold
      print $P_CF1                (0, +1)     bold
      print $FldDR1               (0 ,{col9}) bold
      print $FldCR1               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR1  = 0
      let  #FldCR1  = 0
      chart_end1:

end-procedure Chart-Total1

!****************************************************************************
begin-procedure Chart-Total2

      if ($Chart_fld2 = '')
         goto chart_end2
      end-if

      do Format-Number  (#FldDR2,$FldDR2,'99,999,999,999.99mi')
      do Format-Number  (#FldCR2,$FldCR2,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name2                (0, +1)     bold
      print $P_CF2                (0, +1)     bold
      print $FldDR2               (0,{col9}) bold
      print $FldCR2               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR2  = 0
      let  #FldCR2  = 0

      chart_end2:

end-procedure Chart-Total2

!****************************************************************************
begin-procedure Chart-Total3

      if ($Chart_fld3 = '')
         goto chart_end3
      end-if

      do Format-Number  (#FldDR3,$FldDR3,'99,999,999,999.99mi')
      do Format-Number  (#FldCR3,$FldCR3,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name3                (0, +1)     bold
      print $P_CF3                (0, +1)     bold
      print $FldDR3               (0,{col9}) bold
      print $FldCR3               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR3  = 0
      let  #FldCR3  = 0
      chart_end3:

end-procedure Chart-Total3

!****************************************************************************
begin-procedure Chart-Total4

      if ($Chart_fld4 = '')
         goto chart_end4
      end-if

      do Format-Number  (#FldDR4,$FldDR4,'99,999,999,999.99mi')
      do Format-Number  (#FldCR4,$FldCR4,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name4                (0, +1)     bold
      print $P_CF4                (0, +1)     bold
      print $FldDR4               (0,{col9}) bold
      print $FldCR4               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR4  = 0
      let  #FldCR4  = 0
      chart_end4:

end-procedure Chart-Total4

!****************************************************************************
begin-procedure Chart-Total5

      if ($Chart_fld5 = '')
         goto chart_end5
      end-if

      do Format-Number  (#FldDR5,$FldDR5,'99,999,999,999.99mi')
      do Format-Number  (#FldCR5,$FldCR5,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name5                (0, +1)     bold
      print $P_CF5                (0, +1)     bold
      print $FldDR5               (0,{col9}) bold
      print $FldCR5               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR5  = 0
      let  #FldCR5  = 0
      chart_end5:


end-procedure Chart-Total5

!****************************************************************************
begin-procedure Chart-Total6

      if ($Chart_fld6 = '')
         goto chart_end6
      end-if

      do Format-Number  (#FldDR6,$FldDR6,'99,999,999,999.99mi')
      do Format-Number  (#FldCR6,$FldCR6,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name6                (0, +1)     bold
      print $P_CF6                (0, +1)     bold
      print $FldDR6               (0,{col9}) bold
      print $FldCR6               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR6  = 0
      let  #FldCR6  = 0
      chart_end6:

end-procedure Chart-Total6

!****************************************************************************
begin-procedure Chart-Total7

      if ($Chart_fld7 = '')
         goto chart_end7
      end-if

      do Format-Number  (#FldDR7,$FldDR7,'99,999,999,999.99mi')
      do Format-Number  (#FldCR7,$FldCR7,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name7                (0, +1)     bold
      print $P_CF7                (0, +1)     bold
      print $FldDR7               (0,{col9}) bold
      print $FldCR7               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR7  = 0
      let  #FldCR7  = 0
      chart_end7:

end-procedure Chart-Total7

!****************************************************************************
begin-procedure Chart-Total8

      if ($Chart_fld8 = '')
         goto chart_end8
      end-if

      do Format-Number  (#FldDR8,$FldDR8,'99,999,999,999.99mi')
      do Format-Number  (#FldCR8,$FldCR8,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name8                (0, +1)     bold
      print $P_CF8                (0, +1)     bold
      print $FldDR8               (0,{col9}) bold
      print $FldCR8               (0 ,{col10}) bold
      print ''                    (+1,0)

      let  #FldDR8  = 0
      let  #FldCR8  = 0
      chart_end8:

end-procedure Chart-Total8




! ------------  Common procedures for GPDEGL01 and GPDEGL02 -----------------------
!
! GPDEGL01 is master
!
begin-procedure Get-Values
! wdu06-881b10 added $GD values
    let $language_cd      = $PRCS_LANGUAGE_CD
    let $Ctl_Busi_Unit    = RTRIM(&GPDE_RUN_CNTL.BUSINESS_UNIT ,' ')
    let $Ctl_Busi_Unit_Gl = RTRIM(&GPDE_RUN_CNTL.BUSINESS_UNIT_GL,' ')
    let $Ctl_App_Jrnl_Id  = RTRIM(&GPDE_RUN_CNTL.APPL_JRNL_ID,' ')
    let $Ctl_Account_dt   = RTRIM(&GPDE_RUN_CNTL.ACCOUNTING_DT,' ')
    let $Ctl_Payentity    = RTRIM(&GPDE_RUN_CNTL.PAY_ENTITY,' ')

   if  $Ctl_Busi_Unit <> ''
       let $A_Busi_Unit     = ' AND A.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
       let $GD_Busi_Unit     = ' AND GD.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
   else
       let $A_Busi_Unit     = ' '
       let $GD_Busi_Unit     = ' '
   end-if

   if  $Ctl_Busi_Unit_Gl <> ''
       let $A_Busi_Unit_Gl  = ' AND A.BUSINESS_UNIT_GL = ''' || $Ctl_Busi_Unit_Gl ||  ''' '
   else
       let $A_Busi_Unit_Gl  = ' '
   end-if

   if  $Ctl_App_Jrnl_Id <> ''
       let $A_App_Jrnl_Id   = ' AND A.APPL_JRNL_ID     = ''' || $Ctl_App_Jrnl_Id  ||  ''' '
   else
       let $A_App_Jrnl_Id   = ' '
   end-if

   if  $Ctl_Account_dt <> ''
       let $A_Account_dt    = ' AND A.ACCOUNTING_DT    = ''' || $Ctl_Account_dt   ||  ''' '
       let $GD_Account_dt    = ' AND GD.POSTING_DATE    = ''' || $Ctl_Account_dt   ||  ''' '
   else
       let $A_Account_dt    = ' '
       let $GD_Account_dt    = ' '
   end-if

   if  $Ctl_Payentity <> ''
       let $B_Payentity     = ' AND B.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' '
                                  !|| ' AND A.PIN_CHART1_VAL   = ''' || $Ctl_Payentity    ||  ''' '
       let $GD_Payentity     = ' AND GD.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' '
   else
       let $B_Payentity     = ' '
       let $GD_Payentity     = ' '
   end-if
end-procedure






begin-procedure MakeAccountingLineData
! wdu06-881b10 added procedure to replace empty accounting line record
!
! we need to create our own accounting line
!
!
! depending on the report we need 2 distinct result sets.
show '(MakeAccountingLineData)'
if $ReportID = 'GPDEGL01'
    let #this_process_instance = 0
else
    let #this_process_instance = 1
end-if

! clear last result
begin-sql
DELETE FROM PS_GPDE_GL_ACC_LIN WHERE PROCESS_INSTANCE = #this_process_instance
end-sql

begin-sql
INSERT INTO PS_GPDE_GL_ACC_LIN(PROCESS_INSTANCE
    ,AUDIT_ACTN,ACCOUNT,ACCOUNTING_DT,ACCOUNTING_PERIOD,APPL_JRNL_ID,BUSINESS_UNIT,
    BUSINESS_UNIT_GL,FISCAL_YEAR,GL_DISTRIB_STATUS,JOURNAL_ID,JOURNAL_LINE,
    LEDGER,LEDGER_GROUP,LINE_DESCR,MONETARY_AMOUNT,CURRENCY_CD,FOREIGN_AMOUNT,
    FOREIGN_CURRENCY,RT_TYPE,RATE_MULT,RATE_DIV,PIN_CHART1_VAL,PIN_CHART2_VAL,
    PIN_CHART3_VAL,PIN_CHART4_VAL,PIN_CHART5_VAL,PIN_CHART6_VAL,PIN_CHART7_VAL,
    PIN_CHART8_VAL)
SELECT #this_process_instance
    ,'A',GD.ACCOUNT,$Ctl_Account_dt,0,MAP.APPL_JRNL_ID
    ,GD.BUSINESS_UNIT,BU.BUSINESS_UNIT_GL,0,'N',' ',0,' ',' ',GD.GROUPING_CODE,
    SUM(GD.CALC_RSLT_VAL),GD.CURRENCY_CD,SUM(GD.CALC_RSLT_VAL),GD.CURRENCY_CD,
    'OFFIC',1,1,GD.PIN_CHART1_VAL,GD.PIN_CHART2_VAL,GD.PIN_CHART3_VAL,GD.PIN_CHART4_VAL
    ,GD.PIN_CHART5_VAL,GD.PIN_CHART6_VAL,GD.PIN_CHART7_VAL,GD.PIN_CHART8_VAL
    FROM PS_GP_GL_MAP MAP,
    PS_BUS_UNIT_TBL_HR BU,
    PS_GP_GL_DATA GD
WHERE 0=0
! check runcontrol parameters
! -- GD.CAL_RUN_ID=%Bind(CAL_RUN_ID)
! -- AND GD.BUSINESS_UNIT=%Bind(BUSINESS_UNIT)
! -- AND GD.PAY_ENTITY=%Bind(PAY_ENTITY)
[$GD_Account_dt]
[$GD_Busi_Unit]
[$GD_Payentity]
!
AND GD.BUSINESS_UNIT=BU.BUSINESS_UNIT
AND GD.ACCOUNT<>' '
AND GD.PAY_ENTITY=MAP.PAY_ENTITY
AND GD.BUSINESS_UNIT=MAP.BUSINESS_UNIT
AND MAP.EFFDT=(
    SELECT MAX(SUBM.EFFDT)
    FROM PS_GP_GL_MAP SUBM
    WHERE SUBM.PAY_ENTITY=MAP.PAY_ENTITY
    AND SUBM.BUSINESS_UNIT=MAP.BUSINESS_UNIT
    AND SUBM.EFFDT< $Ctl_Account_dt )
GROUP BY GD.CAL_RUN_ID,GD.BUSINESS_UNIT,GD.CURRENCY_CD,GD.ACCOUNT,GD.GROUPING_CODE
,GD.PIN_CHART1_VAL,GD.PIN_CHART2_VAL,GD.PIN_CHART3_VAL,GD.PIN_CHART4_VAL,
GD.PIN_CHART5_VAL,GD.PIN_CHART6_VAL,GD.PIN_CHART7_VAL,GD.PIN_CHART8_VAL,
BU.BUSINESS_UNIT_GL,MAP.APPL_JRNL_ID
end-sql

end-procedure



!****************************************************************************

#include 'gpdeut01.sqc'    !get values mask routines
#include 'gpdeut04.sqc'    !get payentity address
#include 'gpdeut06.sqc'    !get values mask routines
#include 'readxlat.sqc'    !routine to get values from xlattbl
#include 'stdapi.sqc'      !routines to update run status
#include 'reset.sqc'       !reset printer procedure
#include 'curdttim.sqc'    !get-current-datetime procedure
#include 'datetime.sqc'    !routines for date and time formatting
#include 'datemath.sqc'    !function for date-calculation
#include 'validdt.sqc'     !validate date routine
#include 'number.sqc'      !routines to format numbers
#include 'sqrtrans.sqc'    !sqr strings table procedures

