!***************************************************************************
!  GPMXIM13: SUA - EMPLOYEES INTERFACE                                     *
!***************************************************************************
!***************************************************************************
!                                                                          *
!                                                                          *
!                                                                          *
!                                                                          *
! This software and related documentation are provided under a             *
! license agreement containing restrictions on use and                     *
! disclosure and are protected by intellectual property                    *
! laws. Except as expressly permitted in your license agreement            *
! or allowed by law, you may not use, copy, reproduce,                     *
! translate, broadcast, modify, license, transmit, distribute,             *
! exhibit, perform, publish or display any part, in any form or            *
! by any means. Reverse engineering, disassembly, or                       *
! decompilation of this software, unless required by law for               *
! interoperability, is prohibited.                                         *
! The information contained herein is subject to change without            *
! notice and is not warranted to be error-free. If you find any            *
! errors, please report them to us in writing.                             *
!                                                                          *
!                                                                          *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.                  *
! All Rights Reserved.                                                     *
!***************************************************************************
!                                                                          *
!       $Release:  HR92                                                *
!           $Bug:  31781263                                            *
!                                                                          *
!***************************************************************************

#Include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 11
#define c3 41
#define c4 55
#define c5 74
#define c6 88
#define c7 93
#define c8 97
#define c9 117
#define c9a 109
#define c10 124
#define c11 142
#define c12 154
#define c13 165
#define c14 170
#define c98 160
#define c99 169

begin-report
  do InitProcessing
  do init-report
  do Stdapi-Term
end-report


begin-procedure InitProcessing
  do Init-dateTime                  !In datetime.sqc
  do Init-Number                    !In number.sqc
  do Stdapi-Init
  do Get-Current-DateTime           !In prcsapi.sqc (curdttim.sqc)
  date-time () hh:mi:ss &timeBegan
  do Get-PsOptions-Language($Curr_language_Cd)
end-procedure InitProcessing



begin-procedure Init-Report
  let #regpro = 0
  let #reglei = 0
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL - DELEGACIÓN DEL IMSS'  to $ReportTitle1
  move   'INTERFACE RELACIÓN EMPLEADOS'                                to $ReportTitle2
  move   'GPMXIM13' to $ReportID
  display $ReportTitle1
  display $ReportTitle2
  display $ReportID
  Let $Ver = 'Ver.2020 PUM37.01'
  display $Ver
  do Select-Parameters
  display ''
  display 'TRABAJADORES IMPROCEDENTES - | DATOS INVÁLIDOS |'
  !do DF-Minimum-Wage
  Let $UMA_Effdt = $ENDDT
  Do Get-Max-UMA
  do Process-SUA
end-procedure Init-Report


begin-heading 12
  print 'PeopleSoft'            (1,)  center
  uppercase $ReportTitle1
  print     $ReportTitle1       (2,)  center
  uppercase $ReportTitle2
  print     $ReportTitle2       (3,)  center
  uppercase $ReportTitle3
  print     $ReportTitle3       (4,)  center
  print 'Página:'               (5,{c98})
  page-number                   (,{c99})
  print 'Hora:'                 (6,{c98})
  print $ReportTime             (,{c99})
  print 'Fecha:'                (7,{c98})
  print $ReportDate             (,{c99})
  print 'Reporte:'              (5,1)
  print $ReportID               (,11)
  print 'Compañía:'             (6,1)
  do to_upper($CompanyName)
  print $CompanyName            (,11)
  if $print_Estab = 'Y'
       print 'Registro Patronal:' (,+5)
       print $Estabid             (,+2) edit XXXXXXXXXX-X
       do to_upper($Estab_Name)
       print $Estab_Name          (,+2)
  end-if
  do Convert-To-DTU-Date($BegDt,$BegDtP)
  let $BegDtP = substr($BegDtP,9,2) || '-' || substr($BegDtP,6,2) || '-' || substr($BegDtP,1,4)
  do Convert-To-DTU-Date($EndDt,$EndDtP)
  let $EndDtP = substr($EndDtP,9,2) || '-' || substr($EndDtP,6,2) || '-' || substr($EndDtP,1,4)
  let $DateRange1 = 'al ' || $EndDtP
  let $DateRange2 = 'del ' || $BegDtP || ' al ' || $EndDtP
  let $DateRange3 = 'al ' || $EndDtP
  
  if $Initial_Load = '0020'
     print 'Periodo:'              (+1,1)
     print $DateRange1             (,11)
     print '*** Carga Inicial ***' (+1,1)
  end-if
  if $Initial_Load = '0010'
     print 'Periodo:'              (+1,1)
     print $DateRange2             (,11)
     print '*** Alta Nuevos Empleados ***' (+1,1)
  end-if
  if $Initial_Load = '0030'
     print 'Periodo:'              (+1,1)
     print $DateRange3             (,11)
     print '*** Recarga de Empleados ***' (+1,1)
  end-if
  
  if $Capped = 'Y'
     print '*** Con Tope ***'           (+1,1)
  else
     print '*** Sin Tope ***'           (+1,1)
  end-if
  print '='                             (+1,1,178)fill
  print 'Código de'                     (+1,{c1})
  print 'Nombre del Empleado'           (,{c2})
  print 'R.F.C.'                        (,{c3})
  print 'C.U.R.P.'                      (,{c4})
  print 'Afiliación'                    (,{c5})
  print 'Tipo'                          (,{c6})
  print 'JRN'                           (,{c7})
  print 'Fecha de'                      (,{c8})
  print 'S.D.I.'                        (,{c9})
  print 'Clave de'                      (,{c10})
  print 'Número de'                     (,{c11})
  print 'Inicio'                        (,{c12})
  print 'Tipo'                          (,{c13})
  print 'Monto'                         (,{c14})
  print 'Empleado'                      (+1,{c1})
  print 'I.M.S.S.'                      (,{c5})
  print 'Empl'                          (,{c6})
  print 'RED'                           (,{c7})
  print 'Movimiento'                    (,{c8})
  print 'Ubicación'                     (,{c10})
  print 'Crédito'                       (,{c11})
  print 'Descuento'                     (,{c12})
  print 'Desc'                          (,{c13})
  print 'Descuento'                     (,{c14})
  print '='                             (+1,1,178)fill
end-heading 12

!**************************************
!  Proc:        Report-jOB
!  Desc:        Selects detail data from PS_JOB and PS_PERSON_NAME for
!               all employees within the IMSS Employer No./Location.
begin-procedure Report-JOB
Let #Error = 0
Let #Total = 0
Let $Error = ''
begin-SELECT
J.COMPANY
J.EMPLID
J.EFFDT 
J.EMPL_RCD
T.EFFDT
  MOVE &J.EMPL_RCD  TO #Empl_rcd
  move &J.EMPLID to $Emplid
  let $PrintDate = &T.EFFDT
  do Convert-To-DTU-Date($PrintDate,$PrintDate1)
  let #DD = SUBSTR($PrintDate1,9,2)
  move #DD to $DD 09
  let #MM = SUBSTR($PrintDate1,6,2)
  move #MM to $MM 09
  let #YY = SUBSTR($PrintDate1,1,4)
  move #YY to $YY 9999
JR.LOCATED_CD_MEX
  move &JR.LOCATED_CD_MEX to $Locatedcd
JR.WORKER_TYPE_MEX
   move &JR.WORKER_TYPE_MEX to $Workertype
   LET #WORKERTYPE = TO_NUMBER($WORKERTYPE) / 10
   move #WORKERTYPE to $Workertypen 0
JR.REDUCED_WEEK_MEX
   move &JR.REDUCED_WEEK_MEX to $WeekReduced
   LET #WEKREDUCED = TO_NUMBER($WEEKREDUCED)/ 10
   move  #WEKREDUCED to $WeekReducedn 0
E.HIRE_DT
PE.NAME
   MOVE &PE.NAME TO $Empl_Name
PE.LAST_NAME
   MOVE &PE.LAST_NAME TO $Last_name
   Let  $Name_In = $Last_name
   do Check-Characters
   let $Last_namen = $Name
PE.SECOND_LAST_NAME
   MOVE &PE.SECOND_LAST_NAME  TO $Second_name
   Let  $Name_In = $Second_name
   do Check-Characters
   let $Second_namen = $Name
PE.FIRST_NAME
   MOVE &PE.FIRST_NAME  TO $First_Name
   Let  $Name_In = $First_Name
   do Check-Characters
   let $First_Namen = $Name
   
   if rtrim($Last_namen, ' ') = '' 
      let $Last_namen = $Second_namen
      let $Second_namen = ''
   end-if
   
   let $NameOut =  rtrim($Last_namen, ' ') || '$' || rtrim($Second_namen,' ') || '$' || rtrim($First_Namen,' ')
   let $NameOut =  SUBSTR($NameOut,1,50)
T.GPMX_SDI_TOT
T.SUA_REASON_MEX
J.LOCATION                               !ICE 643636001
J.SETID_LOCATION
J.ESTABID

  Let $Location = Rtrim(&J.LOCATION, ' ')
  Let $SetIDLoc = Rtrim(&J.SETID_LOCATION, ' ')
  
  If $Estab_Opt = 'L'
    Do Get-Location
  Else
    Let $Estabid = Rtrim(&J.ESTABID, ' ')
    Do Get-Estabid
  End-if
  
  move &T.SUA_REASON_MEX TO $Movment_Reason
  let #SDI = &T.GPMX_SDI_TOT
  
  if $Capped = 'Y'
     if #SDI > #SDIMax
        let #SDI = #SDIMax
     end-if
  end-if
  let #SDI100 = #SDI * 100
  move #SDI100 to $SDIOUT 0999999

  do Load-INFONAVIT-Loan
  evaluate $amortizetype
    when= '0010'
       move '1' to $amortizationType
       let #DescountVal = #AMORTIZE_PCT * 10000
       move #DescountVal  to $DescountVal 00999900
       if $InitDescDate < '1997-07-01'
          move '1997-06-30' to $InitDescDate
       end-if
    break
    when= '0020'
       move '2' to $amortizationType
       let #DescountVal = round(#AMORTIZE_AMOUNT,2) * 1000
       move #DescountVal  TO $DescountVal 09999990
       if $InitDescDate < '1997-07-01'
           move '1997-06-30' to $InitDescDate
       end-if
       break
    when = '0030'
       move '3' to $amortizationType
       let #DescountVal = #AMORTIZE_TMWZ * 10000
       move #DescountVal  TO $DescountVal 09999999
       if $InitDescDate < '1997-07-01'
          move '1997-06-30' to $InitDescDate
       end-if
       break
  end-evaluate
  
  let  #DDID = Substr($InitDescDate,9,2)
  move #DDID to $DDID 09
  let  #MMID = Substr($InitDescDate,6,2)
  move #MMID to $MMID 09
  let  #YYID = Substr($InitDescDate,1,4)
  move #YYID to $YYID 0999
  do Load-National-IDs
  
  If $Initial_Load = '0030' 
     Do Reload-Data
  Else
     Let $Consider = 'True'
  End-If

ADL.PENSION_TP_WRK_MEX   
   Let $PENSION_TP_WRK_MEX = ltrim(rtrim(&ADL.PENSION_TP_WRK_MEX, ' '), ' ')
   
   If $PENSION_TP_WRK_MEX = ' ' or $PENSION_TP_WRK_MEX = ''
    Let $PENSION_TP_WRK_MEX = '0'
   End-if 
     
  if $Insert = 'False'
     Let #Total = #Total + 1
     Let #Error = #Error + 1
  else
     if $Consider = 'True'
       Let #Total = #Total + 1
       ADD 1 to #ContReg
       do Write-Rcd
     end-if
  end-if
  
FROM  PS_GPMX_SDI_WA  T,
      PS_JOB          J LEFT OUTER JOIN  PS_ADDL_INFO_MEX ADL ON  J.EMPLID = ADL.EMPLID AND J.EMPL_RCD = ADL.EMPL_RCD AND ADL.EFFDT =
        (SELECT MAX(ADL_ED.EFFDT) FROM PS_ADDL_INFO_MEX ADL_ED
        WHERE ADL.EMPLID = ADL_ED.EMPLID
          AND ADL.EMPL_RCD = ADL_ED.EMPL_RCD
          AND ADL_ED.EFFDT <= $EndDt),
      PS_JOB_JR       JR,
      PS_PER_ORG_ASGN_VW E,
      PS_PERSON_NAME  PE
      
WHERE J.EMPLID       = T.EMPLID
AND   J.EMPLID       = JR.EMPLID
AND   J.COMPANY      = $Company
AND   J.EFFDT        = T.EFFDT
AND   JR.EFFDT       = J.EFFDT
AND   J.EFFSEQ       = (SELECT MAX(JJ.EFFSEQ) FROM PS_JOB JJ
                        WHERE JJ.EMPLID = J.EMPLID
                        AND   JJ.EFFDT  = J.EFFDT)
AND   JR.EMPL_RCD    = J.EMPL_RCD
AND   JR.EFFSEQ      = J.EFFSEQ
AND   E.EMPLID       = J.EMPLID
AND   E.EMPL_RCD     = J.EMPL_RCD
AND   PE.EMPLID      = J.EMPLID
AND   T.SEQNUM       = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                        WHERE T2.EMPLID      = T.EMPLID
                        AND   T2.EMPL_RCD    = T.EMPL_RCD
                        AND   T2.GP_PAYGROUP = T.GP_PAYGROUP
                        AND   T2.EFFDT       = T.EFFDT 
                        AND   T2.SUA_REASON_MEX = T.SUA_REASON_MEX)
[$Where_Location]                                         !ICE 643636001
AND T.SUA_REASON_MEX IN  ('0010','0040')
[$Where_Job]
ORDER BY  J.EMPLID, T.EFFDT DESC
END-SELECT
move #Error to $cError 9,999,999,999
move #Total to $cTotal 9,999,999,999
show '' $cError ' trabajadores improcedentes'
show '' $cTotal ' trabajadores procesados' $Note
end-procedure Report-JOB

Begin-Procedure Get-Location         !ICE 643636001
Begin-Select
L.ESTABID

 Let $Estabid = Rtrim(&L.ESTABID, ' ')
 Do Get-Estabid

FROM PS_LOCATION_TBL L 
WHERE L.SETID    = $SetIdLoc
AND   L.LOCATION = $Location
AND   L.EFFDT = (SELECT MAX(LOC.EFFDT) 
                 FROM PS_LOCATION_TBL LOC
                 WHERE  LOC.LOCATION = L.LOCATION 
                 AND    LOC.EFFDT   <= $EndDt)
AND   L.EFF_STATUS     = 'A'
End-Select
End-Procedure Get-Location

Begin-Procedure Load-INFONAVIT-Loan
  move 0  to #AMORTIZE_PCT
  move 0  to #AMORTIZE_AMOUNT
  move 0  to #AMORTIZE_TMWZ
  move '' to $Amortizetype
  move '' to $infonavitloan
Begin-Select
a.GPMX_LOAN_NUM
  move &a.GPMX_LOAN_NUM to $infonavitloan
  let $InfonavitCredit = substr($infonavitloan,1,10)
a.GPMX_DATE
  move &a.GPMX_DATE to $InitDescDate_O
  do Convert-To-DTU-Date($InitDescDate_O,$InitDescDate)
b.GPMX_INFONAVIT_PCT
  Move &b.GPMX_INFONAVIT_PCT TO #AMORTIZE_PCT
b.PAYMENT_AMOUNT
  Move &b.PAYMENT_AMOUNT TO #AMORTIZE_AMOUNT
b.GPMX_X_MIN_WAGES
  Move &b.GPMX_X_MIN_WAGES TO #AMORTIZE_TMWZ
a.GPMX_PAY_TYPE
  move &a.GPMX_PAY_TYPE TO $Amortizetype

FROM PS_GPMX_LOAN a, PS_GPMX_LOAN_PAY b
WHERE a.EMPLID = $Emplid
AND a.EMPL_RCD = #Empl_rcd
AND a.EMPLID = b.EMPLID
AND a.EMPL_RCD = b.EMPL_RCD
AND a.PIN_NUM = b.PIN_NUM
AND a.GPMX_LOAN_NUM = b.GPMX_LOAN_NUM
AND a.PIN_NUM IN (SELECT PIN_NUM FROM PS_GP_PIN WHERE PIN_CUSTOM1 = 'INFONAVIT' AND PIN_TYPE = 'DD')
end-select
end-procedure Load-INFONAVIT-Loan


begin-procedure Load-National-IDs
Let $Insert = 'True'
Let $Error = ''
Begin-Select
PPN.NATIONAL_ID_TYPE
PPN.NATIONAL_ID
    Let $IMSS-ID = rtrim(&PPN.NATIONAL_ID, ' ')
    
FROM PS_PERS_NID PPN
WHERE PPN.EMPLID = $Emplid
AND PPN.COUNTRY = 'MEX'
AND PPN.NATIONAL_ID_TYPE = 'IMSS'
end-select

Begin-Select
PPN1.NATIONAL_ID_TYPE
PPN1.NATIONAL_ID
      Let $National-id = rtrim(&PPN1.NATIONAL_ID, ' ')
FROM PS_PERS_NID PPN1
WHERE PPN1.EMPLID = $Emplid
AND PPN1.COUNTRY = 'MEX'
AND PPN1.NATIONAL_ID_TYPE = 'RFC'
end-select

Begin-Select
PPN2.NATIONAL_ID_TYPE
PPN2.NATIONAL_ID
  move &PPN2.NATIONAL_ID to $Curp-id
  let $Curp-id = rtrim($Curp-id,' ')

FROM PS_PERS_NID PPN2
WHERE PPN2.EMPLID = $Emplid
AND PPN2.COUNTRY = 'MEX'
AND PPN2.NATIONAL_ID_TYPE ='CURP'
end-select

If rtrim($IMSS-ID, ' ') = ''
   Let $Insert = 'False'
   Let $Error = $Error || ' | Afiliación IMSS' 
end-if

If rtrim($National-id, ' ')  = ''
   Let $Insert = 'False'
   Let $Error = $Error || ' | R.F.C.' 
end-if

If rtrim($Curp-id,' ')  = ''
   Let $Insert = 'False'
   Let $Error = $Error || ' | C.U.R.P.' 
end-if

if $Insert = 'False'
   Let $Error = rtrim($Emplid, ' ') || $Error
   show $Error
end-if

End-Procedure Load-National-IDs

begin-procedure Reload-Data
Let $Consider = 'True'
Let $Status = ''
BEGIN-SELECT
AJ.EMPL_STATUS
   Let $Status = ltrim(rtrim(&AJ.EMPL_STATUS, ' '), ' ')
   If $Status = 'T'
      Let $Consider = 'False'
   End-If
FROM PS_JOB AJ 
WHERE AJ.EMPLID = $Emplid
AND AJ.EMPL_RCD = #Empl_rcd
AND AJ.EFFDT = (SELECT MAX(AJ2.EFFDT) FROM
PS_JOB AJ2 WHERE AJ2.EMPLID = AJ.EMPLID
AND AJ2.EMPL_RCD = AJ.EMPL_RCD AND AJ2.EFFDT <= $EndDt)
AND AJ.EFFSEQ    = (SELECT MAX(AJ3.EFFSEQ) FROM PS_JOB AJ3
                        WHERE AJ3.EMPLID = AJ.EMPLID
                        AND   AJ3.EFFDT  = AJ.EFFDT)
END-SELECT
End-Procedure Reload-Data

begin-procedure Check-Characters
! Check for accented characters -> replace with nonaccent, and Ñ/ñ
! replace with &.  Then uppercase the string.
  let #Len = Length($Name_In)
  let #I  = 1

  while #I <= #Len
    let $Found = 'N'
    let $Test_Char = Substr($Name_In, #I, 1)
    let #Test_Code = ascii(Upper($Test_Char))
    if (#Test_Code > 64 and #Test_Code < 91)
      let $Name_Out = $Name_Out || Upper($Test_Char)
      let $Found = 'Y'
    end-if

    if ($Found = 'N')
    Let $Test_Char = lower($Test_Char)
      evaluate $Test_Char
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
        when = 'É'
          let $Test_Char = 'E'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
        when = 'Ä'
        when = 'Å'
          let $Test_Char = 'A'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'ï'
        when = 'î'
        when = 'ì'
        when = 'í'
          let $Test_Char = 'I'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'Ö'
        when = 'ó'
          let $Test_Char = 'O'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'Ü'
        when = 'ú'
          let $Test_Char = 'U'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'ñ'
        when = 'Ñ'
          let $Test_Char = '/'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = 'Ç'
          let $Test_Char = 'C'
          let $Name_Out  = $Name_Out || $Test_Char
          break
        when = ' '
        when = '-'
          let $Name_Out  = $Name_Out || $Test_Char
        when-other
          break
      end-evaluate
    end-if
    add 1 to #I
  end-while
  let $Name = upper ($Name_Out)
  let $name_out = ''
end-procedure Check-Characters


begin-procedure Write-rcd

  if rtrim($INFONAVITLOAN,' ') = ''
     let $InfonavitCredit  = '          '
     let $DDID             = '00'
     let $MMID             = '00'
     let $YYID             = '0000'
     let $amortizationType = '0'
     let $DescountVal      = '00000000'
  end-if

  Let $Id_County = substr($Estabid, 1,3)
  
if $Insert = 'True'
  Write 1 From $Estabid:11 -
               $IMSS-ID:11 -
               $NATIONAL-ID:13 -
               $CURP-ID:18 -
               $NAMEOUT:50 -
               $WORKERTYPEn:1 -
               $WEEKREDUCEDn:1 -
               $DD:2 -
               $MM:2 -
               $YY:4 -
               $SDIOUT:7-
               $LocatedCd:17 -
               $InfonavitCredit:10 -
               $DDID:2 -
               $MMID:2 -
               $YYID:4 -
               $amortizationType:1 -
               $DescountVal:8 -
               $PENSION_TP_WRK_MEX:1 -
               $Id_County:3
end-if

  if ( (rtrim($DDID,' ')='') and (rtrim($MMID,' ')='') and (rtrim($YYID,' ')='') or (rtrim($DDID,' ')='00') and (rtrim($MMID,' ')='00') and (rtrim($YYID,' ')='0000'))
     let $BegD = ''
  else
     let $BegD = $DDID||'/'||$MMID||'/'||$YYID
  end-if
  if (rtrim($DD,' ')='') and (rtrim($MM,' ')='') and (rtrim($YY,' ')='')
       let $HiD = ''
    else
       let $HiD = $DD||'/'||$MM||'/'||$YY
  end-if
  if $Imss-Id     = '00000000000'
       let $Imss-Id = ''
  end-if
  if $amortizationType     = '0'
     let $amortizationType = ''
  end-if
  if $DescountVal     = '00000000'
       let $DescountVal = ''
  end-if

  print $Emplid             (+1,{c1})
  do to_upper($Empl_Name)
  print $Empl_Name          (,{c2},29)
  print $National-Id        (,{c3})
  print $Curp-Id            (,{c4})
  print $Imss-Id            (,{c5}) edit XXXXXXXXXXbX
  print $Workertypen        (,{c6})
  print $Weekreducedn       (,{c7})
  print $HiD                (,{c8})
  print #SDI                (,{c9a}) edit 999,999,999.90
  print $LocatedCd          (,{c10},17)
  print $InfonavitCredit    (,{c11},10)
  print $BegD               (,{c12})
  print $amortizationType   (,{c13})
  print $DescountVal        (,{c14})
  
  move '' to $IMSS-ID
  move '' to $NATIONAL-ID
  move '' to $CURP-ID
  move '' to $NAMEOUT
  move '' to $WORKERTYPE
  move '' to $WEEKREDUCED
  move 0  to #DD
  move 0  to #MM
  move 0  to #YY
  move '' to $DD
  move '' to $MM
  move '' to $YY
  move '' to $SDIOUT
  move '' to $LocatedCd
  move '' to $InfonavitCredit
  move '' to $DDID
  move '' to $MMID
  move '' to $YYID
  move '' to $amortizationType
  move '' to $DescountVal
end-procedure Write-rcd


begin-procedure DF-Minimum-Wage
  let #Capped_IMSS = 0
begin-select
WM.GPMX_MINIMUM_WAGE
  move &WM.GPMX_MINIMUM_WAGE to #DF_Minimum_Wage
  let #Capped_IMSS = #DF_Minimum_Wage * 25

FROM PS_GPMX_MIN_WAGE WM
WHERE WM.WAGE_ZONE_MEX = '10'
 AND  WM.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GPMX_MIN_WAGE
                          WHERE WAGE_ZONE_MEX = WM.WAGE_ZONE_MEX
                            AND EFFDT <= $ENDDT)
end-select
end-procedure DF-Minimum-Wage

!**************************************
begin-procedure Select-Parameters
!show '* Select-Parameters *'
!**************************************
Let $Value = 'T'
begin-select
SUARNCTL.OPRID
SUARNCTL.RUN_CNTL_ID
SUARNCTL.GPMX_INITIAL_LOAD
SUARNCTL.BEGIN_DT
SUARNCTL.END_DT
SUARNCTL.ESTABID
SUARNCTL.COMPANY
SUARNCTL.GPMX_CAPPED
SUARNCTL.LOCATION
SUARNCTL.GPMX_ESTABID_OPTN

  let $BEGDT   = Rtrim(&SUARNCTL.BEGIN_DT, ' ')
  let $ENDDT   = Rtrim(&SUARNCTL.END_DT, ' ')
  let $COMPANY = Rtrim(&SUARNCTL.COMPANY, ' ')
  let $Estabid = rtrim(&SUARNCTL.ESTABID,' ')
  let $Capped  = rtrim(&SUARNCTL.GPMX_CAPPED,' ')
  let $Initial_Load = &SUARNCTL.GPMX_INITIAL_LOAD
  let $RCLocation   = Rtrim(&SUARNCTL.LOCATION, ' ')
  Let $Estab_Opt = &SUARNCTL.GPMX_ESTABID_OPTN
  
  if $Estabid <> ''                                 !ICE 643636001
     let $print_Estab = 'Y'
     If $Estab_Opt = 'L'
       Let $Where_Location = ' AND J.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
       Let $Where_Location = $Where_Location || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
       Let $Where_Location = $Where_Location || ' AND LOC.SETID = J.SETID_LOCATION AND LOC.LOCATION = J.LOCATION AND LOC.EFFDT = '
       Let $Where_Location = $Where_Location || ' (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L WHERE L.LOCATION = ' 
       Let $Where_Location = $Where_Location || ' LOC.LOCATION AND L.EFFDT <= ' || '''' || $EndDt || '''' || ' )) '
       Let $OrderEstablishment =  'J.LOCATION,'
     Else
       Let $Where_Location = ' AND J.ESTABID = ''' || $Estabid || ''' ' 
       Let $OrderEstablishment =  'C.ESTABID,'
     End-if
  else
     if $RCLocation <> ''
        let $Where_Location = ' AND J.LOCATION = ' || '''' ||$RCLocation || ''''
     else 
        let $Where_Location = ''
     end-if
  end-if
  
  if $Initial_Load  = '0010'
     let $Where_Job = 'AND T.EFFDT   BETWEEN ' || '''' || $BegDt || '''' ||  ' AND ' || '''' ||  $EndDt || ''''
  else
     if $Initial_Load  = '0020'
        Let $Where_Job = 'AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
        Let $Where_Job = $Where_Job || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
        Let $Where_Job = $Where_Job || ' AND T.SUA_REASON_MEX = TT.SUA_REASON_MEX'
        Let $Where_Job = $Where_Job || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ') '
     else
        if $Initial_Load = '0030'
           Let $Where_Job = 'AND T.EFFDT = (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
           Let $Where_Job = $Where_Job || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
           Let $Where_Job = $Where_Job || ' AND T.SUA_REASON_MEX = TT.SUA_REASON_MEX'
           Let $Where_Job = $Where_Job || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ') '
           do Convert-To-DTU-Date($EndDt,$EndDtP)
           Let $Note = ' activos al ' || $EndDtP
        end-if
     end-if
  end-if

FROM  PS_GPMX_RC_SUA001  SUARNCTL
WHERE SUARNCTL.OPRID = $Prcs_OprID
      AND SUARNCTL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select

  let $FileName = '{FILEPREFIX}' || 'aseg.txt' || '{FILESUFFIX}'
  show 'Filename: ' $FileName

  open $FileName as 1 for-writing record=168:fixed status=#filestat

  if #filestat < 0
    show 'Error opening output file. Program ending'
    stop quiet
  end-if
  do Get-Company-Data-Mex
end-procedure Select-Parameters

!**************************************
begin-procedure Process-SUA
!show '* Process-SUA *'
!**************************************
  do Report-Job
  do Imprime-Totales
  close 1
  
  #ifdef UNIX
    show ' '
    Do ConvertUnixToDOSWin($FileName)
    show ' '
  #endif
    
end-procedure Process-SUA

!**************************************
begin-procedure Get-Estabid           !ICE 643636001
!show '* Get-Estabid *'
!**************************************
begin-SELECT
ZZZ.ESTABID
ZZZ.DESCR
  
   Let $Estabid    = Rtrim(&ZZZ.ESTABID, ' ')   
   Let $Estab_Name = Rtrim(&ZZZ.DESCR,' ')
     
     do get_Estabid_Name        !Language Table
  
FROM  PS_ESTAB_TBL ZZZ
WHERE ZZZ.ESTABID= $Estabid
AND ZZZ.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL
                   WHERE ESTABID = ZZZ.ESTABID                                    
                   AND   EFFDT  <= $ENDDT)
AND ZZZ.EFF_STATUS = 'A'
end-SELECT
end-procedure Get-Estabid


begin-Procedure Imprime-Totales
print $cError (+2,{c1})
print ' trabajadores improcedentes.' (,)
print $cTotal (+1,{c1})
print ' trabajadores procesados.' (,)
end-procedure Imprime-Totales


begin-procedure get_Estabid_Name
begin-select
lc.DESCR
   move &lc.DESCR to $Estab_Name
from PS_ESTAB_TBL_LANG  lc
where lc.ESTABID     = $Estabid
AND   lc.EFFDT       = $Estab_Effdt
AND   lc.LANGUAGE_CD = $Curr_language_Cd
end-select
    let $Estab_Name = '(' || rtrim($Estab_Name,' ') || ')'
end-procedure get_Estabid_Name


begin-procedure TO_UPPER(:$in)
  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''
  while #c <= length($in)
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)        
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'
           let $let = 'O'
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           break
        when = 'ñ'
           let $let = 'N'
           break
        when-other
           let $let = upper($char)
           break
     end-evaluate
     let $cad = $cad || $let
     let #c = #c + 1
  end-while
  let $in = $cad
end-procedure TO_UPPER


#include 'datetime.sqc'
#include 'number.sqc'
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date
#include 'prcslng.sqc'   !Process Language
#include 'rotname1.sqc'  !Convert $Name from "Last,First,Prefix" to "First Prefix Last"
#include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
#include 'mxfile01.sqc'  !File Utilities
#include 'gpmxnotf.sqc'  !Get-Run-Control procedure
