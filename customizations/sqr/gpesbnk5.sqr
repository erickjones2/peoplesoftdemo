!----------------------------------------------------------------------!
! Report Name: GPESBNK5.SQR  Bank File Generator                       !
!----------------------------------------------------------------------!
!                                                                      !
!                                                                      !
!                                                                      !
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------!
!                                                                      !
!       $Release:  HR92                                                !
!           $Bug:  29467691                                            !
!                                                                      !
!----------------------------------------------------------------------!

#include 'setenv.sqc'    !Set environment

Begin-Setup
#include 'setupdb.sqc'               ! Database specific setup
!#Include 'ptset02.sqc'   !Printer and page-size initialization
End-Setup


begin-report

do Init-DateTime
do Init-Number
do Get-Current-DateTime
do Init-Report
do Process-Main
do Stdapi-Term

end-report


begin-heading 7
!#Include 'stdhdgtr.sqc'

end-heading


!************************************************************************
! Procedure Init-Report
!************************************************************************
begin-procedure Init-Report
#debug do Fin-Debug-Msg('Init-Report')

move 'GPESBNK5' to $ReportID
move 'EFT - File Generation' to $ReportTitle
display $ReportTitle

do Stdapi-Init
if $prcs_process_instance = ''
      !No Prompt
else
      Do Get-values
end-if

end-procedure ! Procedure Init-Report


!************************************************************************
! Procedure Get-Values
!************************************************************************
begin-procedure Get-Values

!No values

end-procedure ! Procedure Get-Values


!************************************************************************
! Procedure Process-Main
!************************************************************************
begin-procedure Process-Main
#debug do Fin-Debug-Msg('Process-Main')

do Get-Run-Control-Parameters
do Get-File-Details
do Prepare-Payment-Data
do EFT-File-Generation
do Delete-Temp-Data

end-procedure ! Procedure Process-Main


!************************************************************************
! Procedure Get-Run-Control-Parameters
!************************************************************************
begin-procedure Get-Run-Control-Parameters
#debug do Fin-Debug-Msg('Get-Run-Control-Parameters')

#debugd show 'Operator Id:    ' $prcs_oprid
#debugd show 'Run Control Id: ' $prcs_run_cntl_id

let $sql-statement = 'GPESNK5.SQR,Get-Run-Control-Parameters,Select,PS_GPES_RC_BNK'
begin-select on-error=SQL-Error
CAL_RUN_ID
PAY_ENTITY
GPES_PATH_NAME
GPES_FILENAME
GPES_FILE_ID
RERUN_IND
DEBIT_DT          &DEBIT_DT
PYMT_DT           &PYMT_DT
GPES_SRC_COMPANY  &GPES_SRC_COMPANY
SRC_BANK_ID       &SRC_BANK_ID

  let $fill           =  ' '
  let $CAL_RUN_ID     =  &CAL_RUN_ID
  let $PAY_ENTITY     =  &PAY_ENTITY
  let $GPES_FILENAME  =  &GPES_FILENAME
  let $GPES_PATH_NAME =  &GPES_PATH_NAME
  let $GPES_FILE_ID   =  &GPES_FILE_ID
  let $RERUN_IND      =  &RERUN_IND
  let $SOURCE_CMP     =  &GPES_SRC_COMPANY
  let $SOURCE_CD      =  &SRC_BANK_ID

FROM PS_GPES_RC_BNK

WHERE OPRID = $prcs_oprid
 AND  RUN_CNTL_ID = $prcs_run_cntl_id
end-select

#debugd show 'Rerun ind:  ' $RERUN_IND
#debugd show 'Cal Run:    ' &CAL_RUN_ID
#debugd show 'Pay Ent:    ' &PAY_ENTITY
#debugd show 'File:       ' &GPES_FILENAME
#debugd show 'Path:       ' &GPES_PATH_NAME
#debugd show 'Debit dt:   ' &DEBIT_DT
#debugd show 'Payment dt: ' &PYMT_DT
#debugd show 'Source bk:  ' $SOURCE_Cd

end-procedure ! Procedure Get-Run-Control-Parameters


!************************************************************************
! Procedure Get-File-Details
!************************************************************************
begin-procedure Get-File-Details
#debug do Fin-Debug-Msg('Get-File-Details')

#debugd show 'Operator Id:      ' $prcs_oprid
#debugd show 'Run Control Id:   ' $prcs_run_cntl_id
#debugd show 'Process instance: ' #prcs_process_instance

let $sql-statement = 'GPESNK5.SQR,Get-File-Details,Select,PS_GPES_BANK_FILE'
begin-select on-error=SQL-Error
GPES_MAX_AMOUNT
GPES_MAX_AMT_NAT
GPES_MAX_AMT_TRANS
GPES_ACTION_1
GPES_MAX_AMT_SP
GPES_ACTION_2
GPES_OPER_CODE
GPES_OPER_CODE_1
GPES_OPER_CODE_2
GPES_OPER_CODE_3
GPES_INCLUDE_SP
GPES_SUFFIX
GPES_GROUP_PAY
GPES_FILETYPE_ID
GPES_SEPA_VERSION

  let #GPES_MAX_AMOUNT    = &GPES_MAX_AMOUNT
  let #GPES_MAX_AMT_NAT   = &GPES_MAX_AMT_NAT
  let $GPES_ACTION_1      = &GPES_ACTION_1
  let #GPES_MAX_AMT_TRANS = &GPES_MAX_AMT_TRANS
  let $GPES_ACTION_2      = &GPES_ACTION_2
  let #GPES_MAX_AMT_SP    = &GPES_MAX_AMT_SP
  let $GPES_SUFFIX        = &GPES_SUFFIX
  let $GPES_OPER_CODE_H   = &GPES_OPER_CODE
  let $GPES_OPER_CODE_1   = &GPES_OPER_CODE_1
  let $GPES_OPER_CODE_2   = &GPES_OPER_CODE_2
  let $GPES_OPER_CODE_3   = &GPES_OPER_CODE_3
  let $GPES_INCLUDE_SP    = &GPES_INCLUDE_SP
  let $GPES_GROUP_PAY     = &GPES_GROUP_PAY
  let $GPES_FILETYPE_ID   = &GPES_FILETYPE_ID
  let $GPES_SEPA_VERSION  = &GPES_SEPA_VERSION
  !SEPA

  IF #GPES_MAX_AMOUNT = 0
    let #GPES_MAX_AMOUNT    = 999999999999.99
  END-IF

  let $GPES_SEPA_ENABLED = 'N'
  IF $GPES_FILETYPE_ID = 'C'
     let $GPES_SEPA_ENABLED = 'Y'
  END-IF

FROM PS_GPES_BANK_FILE

WHERE GPES_FILE_ID = $GPES_FILE_ID
end-select

#debugd show 'Max Amount:            ' #GPES_MAX_AMOUNT
#debugd show 'Max National:          ' #GPES_MAX_AMT_NAT
#debugd show 'National Action:       ' $GPES_ACTION_1
#debugd show 'Max Trans-National:    ' #GPES_MAX_AMT_TRANS
#debugd show 'Trans-National Action: ' $GPES_ACTION_2
#debugd show 'Max Special:           ' #GPES_MAX_AMT_SP
#debugd show 'Oper code Header:      ' $GPES_OPER_CODE_H
#debugd show 'Oper code Nat:         ' $GPES_OPER_CODE_1
#debugd show 'Oper code Trans:       ' $GPES_OPER_CODE_2
#debugd show 'Oper code Special:     ' $GPES_OPER_CODE_3
#debugd show 'Suffix:                ' $GPES_SUFFIX
#debugd show 'Include SP:            ' $GPES_INCLUDE_SP
#debugd show 'Grouping:              ' $GPES_GROUP_PAY

end-procedure ! Procedure Get-File-Details


!************************************************************************
! Procedure Prepare-Payment-Data
!************************************************************************
begin-procedure Prepare-Payment-Data
#debug do Fin-Debug-Msg('Prepare-Payment-Data')

if $RERUN_IND = 'N'
  Let $PMT_STATUS = 'F'    !'F'inalized / 'P'repared / 'T'ransferred
else
  Let $PMT_STATUS = 'T'    !'F'inalized / 'P'repared / 'T'ransferred
end-if

#Debugd show 'Cal Run ID:     '  $CAL_RUN_ID
#Debugd show 'Pay Entity:     '  $PAY_ENTITY
#Debugd show 'Source Bank:    '  $SOURCE_CD
#Debugd show 'Payment Status: '  $PMT_STATUS
#Debugd show 'Company Cd:     '  $COMPANY_Cd
#Debugd show 'Oprid:          '  $prcs_oprid



IF $GPES_GROUP_PAY = 'Y'

  !No net pay election changes are allowed after finalizing the payment process, and...
  !before finishing the transfer process for the month.

  
  !Preparing data to be able to sum amounts by run type for net redistribution.
  !Run type is blank ('          ' -intentionally 10 blanks-) when Defatult Ind = 'Y'
  !Later the run type is filled with the employee's net dist default run type
  !Run type has its original value when Default Ind = 'N'
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Insert,PS_GPES_BNK50_TMP'
  begin-sql on-error=SQL-Error
  INSERT INTO PS_GPES_BNK50_TMP (
    PROCESS_INSTANCE,
    EMPLID,
    EMPL_RCD,
    RUN_TYPE,
    DEFAULT_IND,
    GP_PMT_AMT,
    GP_P_PIN_NET_VAL)

  SELECT
    #prcs_process_instance,
    PMNT_WRK.EMPLID,
    PMNT_WRK.EMPL_RCD,
    CASE WHEN COALESCE(DTL.DEFAULT_IND, 'Y') = 'Y' THEN '          '
      ELSE PMNT_WRK.RUN_TYPE
      END,
    COALESCE(DTL.DEFAULT_IND, 'Y'),
    PMNT_WRK.GP_PMT_AMT,
    0      

  FROM PS_GP_PAYMENT PMNT_WRK LEFT OUTER JOIN PS_GP_SS_NPD_DTLVW DTL
                                ON PMNT_WRK.EMPLID = DTL.EMPLID
                                  AND PMNT_WRK.EMPL_RCD = DTL.EMPL_RCD 
                                  AND PMNT_WRK.RUN_TYPE = DTL.RUN_TYPE
                                  AND PMNT_WRK.ACCOUNT_ID = DTL.ACCOUNT_ID

  WHERE PMNT_WRK.CAL_RUN_ID = $CAL_RUN_ID
    AND PMNT_WRK.PAY_ENTITY = $PAY_ENTITY
    AND PMNT_WRK.SRC_BANK_ID = $SOURCE_CD
    AND PMNT_WRK.PMT_STATUS = $PMT_STATUS
    AND PMNT_WRK.PAYMENT_MTHD = 'T'
    AND PMNT_WRK.PMT_TYPE = '01'
  end-sql

  #Debugd show 'Insert into GPES_BNK50_TMP rows: ' #SQL-COUNT

  !Updating the Run type replacing the 10 blanks with the default Run type from employee's net dist
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Update,PS_GPES_BNK5_TMP-RUN_TYPE'
  begin-sql on-error=SQL-Error
  UPDATE PS_GPES_BNK50_TMP
    SET RUN_TYPE = (SELECT RUN_TYPE FROM PS_GP_NET_DIST ND
                      WHERE ND.EMPLID = PS_GPES_BNK50_TMP.EMPLID
                        AND ND.EMPL_RCD = PS_GPES_BNK50_TMP.EMPL_RCD
                        AND ND.DEFAULT_IND = 'Y')
  WHERE PROCESS_INSTANCE = #prcs_process_instance
    AND RUN_TYPE = '          '
    AND EXISTS (SELECT 'X' FROM PS_GP_NET_DIST ND
                 WHERE ND.EMPLID = PS_GPES_BNK50_TMP.EMPLID
                 AND ND.EMPL_RCD = PS_GPES_BNK50_TMP.EMPL_RCD
                 AND ND.DEFAULT_IND = 'Y')
  end-sql

  #Debugd show 'Update Run type in GPES_BNK5_TMP rows: ' #SQL-COUNT

  !Total net amount by Employee and Run type/Default Ind for net redistribution.
  !The total net amount has to be greater than zero.
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Insert,PS_GPES_BNK5_TMP'
  begin-sql on-error=SQL-Error
  INSERT INTO PS_GPES_BNK5_TMP (
    PROCESS_INSTANCE,
    EMPLID,
    EMPL_RCD,
    RUN_TYPE,
    DEFAULT_IND,
    GP_PMT_AMT,
    GP_P_PIN_NET_VAL)

  SELECT
    #prcs_process_instance,
    EMPLID,
    EMPL_RCD,
    RUN_TYPE,
    DEFAULT_IND,
    SUM(GP_PMT_AMT),
    0      

  FROM PS_GPES_BNK50_TMP

  WHERE PROCESS_INSTANCE = #prcs_process_instance

  GROUP BY EMPLID,EMPL_RCD, RUN_TYPE, DEFAULT_IND
  HAVING SUM(GP_PMT_AMT) > 0

  ORDER BY EMPLID, EMPL_RCD, RUN_TYPE, DEFAULT_IND
  end-sql

  #Debugd show 'Insert into GPES_BNK5_TMP rows: ' #SQL-COUNT


  COMMIT


  #ifdef ORACLE

    let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Analyze,PS_GPES_BNK5_TMP'
    begin-SQL on-error=SQL-Error
      ANALYZE TABLE PS_GPES_BNK5_TMP COMPUTE STATISTICS;
      ANALYZE INDEX PS_GPES_BNK5_TMP COMPUTE STATISTICS;
    end-SQL

    COMMIT

  #end-if


  Let $Emplid_Prev   = ''
  Let #Empl_Rcd_Prev = 0
  Let $Run_Type_Prev = '*'
  
let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Select,PS_GP_PAYMENT, PS_GP_NET_DIST_DTL'
begin-select DISTINCT on-error=SQL-Error
PMNT_WRK.CAL_RUN_ID
PMNT_WRK.EMPLID
PMNT_WRK.EMPL_RCD
PMNT_WRK.GP_PAYGROUP
PMNT_WRK.CAL_ID
PMNT_WRK.ORIG_CAL_RUN_ID
PMNT_WRK.RSLT_SEG_NUM
PMNT_WRK.PIN_NUM
PMNT_WRK.INSTANCE
PMNT_WRK.RECIPIENT_TAG
PMNT_WRK.RECIPIENT_ID
PMNT_WRK.RECIPIENT_NAME
PMNT_WRK.EFF_STATUS
PMNT_WRK.SEG_END_DT
PMNT_WRK.PYMT_KEY1
PMNT_WRK.PYMT_KEY2
PMNT_WRK.PYMT_KEY3
PMNT_WRK.PYMT_KEY4
PMNT_WRK.BUSINESS_UNIT
PMNT_WRK.RUN_TYPE
PMNT_WRK.ACCOUNT_ID
PMNT_WRK.PMT_TYPE
PMNT_WRK.GP_PMT_AMT
PMNT_WRK.CURRENCY_CD
PMNT_WRK.CURRENCY_CD2
PMNT_WRK.DEBIT_DT
PMNT_WRK.REVERSAL_IND
PMNT_WRK.SRC_BANK_ID
PMNT_WRK.CAL_PRD_ID
PMNT_WRK.PYMT_ID
PMNT_WRK.PYMT_NBR
COALESCE(TMP.RUN_TYPE,'')   &TMP.RUN_TYPE
TMP.GP_PMT_AMT

  let $EMPLID          = rtrim(&PMNT_WRK.EMPLID ,' ')
  let #EMPL_RCD        = &PMNT_WRK.EMPL_RCD
  let $GP_PAYGROUP     = rtrim(&PMNT_WRK.GP_PAYGROUP ,' ')
  let $CAL_ID          = rtrim(&PMNT_WRK.CAL_ID ,' ')
  let $ORIG_CAL_RUN_ID = rtrim(&PMNT_WRK.ORIG_CAL_RUN_ID   ,' ')
  let #RSLT_SEG_NUM    = &PMNT_WRK.RSLT_SEG_NUM
  let #PIN_NUM         = &PMNT_WRK.PIN_NUM
  let #INSTANCE        = &PMNT_WRK.INSTANCE
  let #RECIPIENT_TAG   = &PMNT_WRK.RECIPIENT_TAG
  let $recipient       = rtrim(&PMNT_WRK.RECIPIENT_ID ,' ')
  Let $RECIPIENT_NAME  = &PMNT_WRK.RECIPIENT_NAME
  Let $EFF_STATUS      = &PMNT_WRK.EFF_STATUS
  Let $Seg_End_Dt      = &PMNT_WRK.SEG_END_DT
  Let $PYMT_KEY1       = &PMNT_WRK.PYMT_KEY1
  Let $PYMT_KEY2       = &PMNT_WRK.PYMT_KEY2
  Let $PYMT_KEY3       = &PMNT_WRK.PYMT_KEY3
  Let $PYMT_KEY4       = &PMNT_WRK.PYMT_KEY4
  Let $BUSINESS_UNIT   = &PMNT_WRK.BUSINESS_UNIT
  Let $RUN_TYPE        = &PMNT_WRK.RUN_TYPE
  let #ACCOUNT_ID_NO   = &PMNT_WRK.ACCOUNT_ID
  let $PMT_TYPE        = rtrim(&PMNT_WRK.PMT_TYPE, ' ')
  let #EMP_AMOUNT      = &PMNT_WRK.GP_PMT_AMT
  let $CURRENCY_CD     = &PMNT_WRK.CURRENCY_CD
  let $CURRENCY_CD2    = &PMNT_WRK.CURRENCY_CD2
  let $PAYMENT_MTHD    = ' '    !&PMNT_WRK.PAYMENT_MTHD
  let $DEBIT_DT        = &PMNT_WRK.DEBIT_DT
  let #REVERSAL_IND    = &PMNT_WRK.REVERSAL_IND
  let $SRC_BANK_ID     = &PMNT_WRK.SRC_BANK_ID
  let $CAL_PRD_ID      = &PMNT_WRK.CAL_PRD_ID
  let $PYMT_ID         = &PMNT_WRK.PYMT_ID
  let #PYMT_NBR        = &PMNT_WRK.PYMT_NBR
  let $LASTUPDDTTM     = ' '    !&PMNT_WRK.LASTUPDDTTM
  let $LASTUPDOPRID    = ' '    !&PMNT_WRK.LASTUPDOPRID

  do Get-Calendar-Run-Type
  Let $company_cd      = rtrim($SOURCE_CMP, ' ')

  if $PMT_TYPE <> '01'

    do get-deduction-data
    do Insert-GPES-PAYMENT-WK

  else

    do get-payee-data
    Do Get-Beneficiary-Name

    IF $GPES_GROUP_PAY = 'Y'

      If $EMPLID <> $Emplid_Prev
          Or #EMPL_RCD <> #Empl_rcd_Prev
          Or &PMNT_WRK.RUN_TYPE <> $Run_Type_Prev

        Let #Remaining_GP_PMT_AMT = &TMP.GP_PMT_AMT

        Let $Emplid_Prev    = $EMPLID
        Let #Empl_Rcd_Prev  = #EMPL_RCD
        Let $Run_Type_Prev  = &PMNT_WRK.RUN_TYPE

        If &TMP.GP_PMT_AMT > 0
            And #Remaining_GP_PMT_AMT > 0
          do Net-Distribution
        End-If
      
      End-If

    End-If

  end-if
   
FROM PS_FAST_SQRFUT_SEC FAST_SEC,
     PS_GP_PAYMENT PMNT_WRK LEFT OUTER JOIN PS_GPES_BNK5_TMP TMP
       ON TMP.PROCESS_INSTANCE = #prcs_process_instance
         AND TMP.EMPLID = PMNT_WRK.EMPLID
         AND TMP.EMPL_RCD = PMNT_WRK.EMPL_RCD
         AND TMP.RUN_TYPE = PMNT_WRK.RUN_TYPE

WHERE PMNT_WRK.CAL_RUN_ID = $CAL_RUN_ID
  AND PMNT_WRK.PAY_ENTITY = $PAY_ENTITY
  AND PMNT_WRK.SRC_BANK_ID = $SOURCE_CD
  AND PMNT_WRK.PMT_STATUS = $PMT_STATUS
  AND PMNT_WRK.PAYMENT_MTHD = 'T'
  AND FAST_SEC.OPRID = $prcs_oprid
  AND FAST_SEC.EMPLID = PMNT_WRK.EMPLID
  AND FAST_SEC.EMPL_RCD = PMNT_WRK.EMPL_RCD

ORDER BY PMNT_WRK.EMPLID, PMNT_WRK.EMPL_RCD, PMNT_WRK.RUN_TYPE, PMNT_WRK.SEG_END_DT DESC
End-select


  COMMIT


  #ifdef ORACLE

    let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Analyze,PS_GPES_PAYMENT_WK'
    begin-SQL on-error=SQL-Error
      ANALYZE TABLE PS_GPES_PAYMENT_WK COMPUTE STATISTICS;
      ANALYZE INDEX PS_GPES_PAYMENT_WK COMPUTE STATISTICS;
    end-SQL

    COMMIT

  #end-if


  !Updating employee's total distributed amount
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Update,PS_GPES_BNK5_TMP-GP_P_PIN_NET_VAL'
  begin-sql on-error=SQL-Error
  UPDATE PS_GPES_BNK5_TMP
    SET GP_P_PIN_NET_VAL = (SELECT SUM(PMNT_WRK.GP_PMT_AMT)
                            FROM PS_GPES_PAYMENT_WK PMNT_WRK
                             WHERE PMNT_WRK.PROCESS_INSTANCE = #prcs_process_instance
                               AND PMNT_WRK.CAL_RUN_ID = $CAL_RUN_ID
                               AND PMNT_WRK.EMPLID = PS_GPES_BNK5_TMP.EMPLID
                               AND PMNT_WRK.EMPL_RCD = PS_GPES_BNK5_TMP.EMPL_RCD
                               AND PMNT_WRK.RUN_TYPE = PS_GPES_BNK5_TMP.RUN_TYPE
                               AND PMNT_WRK.PMT_TYPE = '01')

    WHERE PROCESS_INSTANCE = #prcs_process_instance
  end-sql

  #Debugd show 'Update employee''s total distributed amount GPES_BNK5_TMP rows: ' #SQL-COUNT

  !Adjusting employee's primary account with remaining not distributed net.
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Update,PS_GPES_PAYMENT_WK-GP_PMT_AMT'
  begin-sql on-error=SQL-Error
  UPDATE PS_GPES_PAYMENT_WK
    SET GP_PMT_AMT = GP_PMT_AMT + (SELECT TMP.GP_PMT_AMT - TMP.GP_P_PIN_NET_VAL
                                    FROM PS_GPES_BNK5_TMP TMP
                                    WHERE TMP.PROCESS_INSTANCE = #prcs_process_instance
                                      AND TMP.EMPLID = PS_GPES_PAYMENT_WK.EMPLID
                                      AND TMP.EMPL_RCD = PS_GPES_PAYMENT_WK.EMPL_RCD
                                      AND TMP.RUN_TYPE = PS_GPES_PAYMENT_WK.RUN_TYPE)
    WHERE PROCESS_INSTANCE = #prcs_process_instance
      AND ACCOUNT_ID = (SELECT DTL.ACCOUNT_ID
                         FROM PS_GP_NET_DIST_DTL DTL
                        WHERE DTL.EMPLID = PS_GPES_PAYMENT_WK.EMPLID
                          AND DTL.EMPL_RCD = PS_GPES_PAYMENT_WK.EMPL_RCD
                          AND DTL.RUN_TYPE = PS_GPES_PAYMENT_WK.RUN_TYPE
                          AND DTL.EFFDT = (SELECT MAX(DTL2.EFFDT)
                                             FROM PS_GP_NET_DIST_DTL DTL2
                                            WHERE DTL2.EMPLID = DTL.EMPLID
                                              AND DTL2.EMPL_RCD = DTL.EMPL_RCD
                                              AND DTL2.RUN_TYPE = DTL.RUN_TYPE
                                              AND DTL2.EFFDT <= $asoftoday)
                          AND PRIMARY_ACCT_IND = 'Y')
  end-sql

  #Debugd show 'Update employee''s primary account with remaining net GPES_PAYMENT_WK rows: ' #SQL-COUNT

  !Deleting from GP_PAYMENT all rows with net amount greater than zero
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Delete,PS_GP_PAYMENT-PMT1'
  begin-sql on-error=SQL-Error
  DELETE FROM PS_GP_PAYMENT
    WHERE CAL_RUN_ID = $CAL_RUN_ID
      AND PAY_ENTITY = $PAY_ENTITY
      AND SRC_BANK_ID = $SOURCE_CD
      AND PMT_STATUS = $PMT_STATUS
      AND PAYMENT_MTHD = 'T'
      AND PMT_TYPE = '01'
      AND EXISTS (SELECT 'X' FROM PS_GPES_BNK5_TMP A
                   WHERE PROCESS_INSTANCE = #prcs_process_instance
                     AND A.EMPLID =  PS_GP_PAYMENT.EMPLID 
                     AND A.EMPL_RCD = PS_GP_PAYMENT.EMPL_RCD
                     AND A.RUN_TYPE = PS_GP_PAYMENT.RUN_TYPE
                     AND A.GP_PMT_AMT > 0)
  end-sql

  #Debugd show 'Delete rows with net amount greater than zero GP_PAYMENT rows: ' #SQL-COUNT

  !Deleting from GP_PAYMENT all row with run_type not existing in net dist and a default run_type exists,
  ! and, net amount greater than zero
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Delete,PS_GP_PAYMENT-PMT2'
  begin-sql on-error=SQL-Error
  DELETE FROM PS_GP_PAYMENT
    WHERE CAL_RUN_ID = $CAL_RUN_ID
      AND PAY_ENTITY = $PAY_ENTITY
      AND SRC_BANK_ID = $SOURCE_CD
      AND PMT_STATUS = $PMT_STATUS
      AND PAYMENT_MTHD = 'T'
      AND PMT_TYPE = '01'
      AND NOT EXISTS (SELECT 'X' FROM PS_GP_NET_DIST A
                       WHERE A.EMPLID =  PS_GP_PAYMENT.EMPLID 
                         AND A.EMPL_RCD = PS_GP_PAYMENT.EMPL_RCD
                         AND A.RUN_TYPE = PS_GP_PAYMENT.RUN_TYPE)
      AND EXISTS (SELECT 'X' FROM PS_GP_NET_DIST A, PS_GPES_BNK5_TMP B
                   WHERE A.EMPLID =  PS_GP_PAYMENT.EMPLID 
                     AND A.EMPL_RCD = PS_GP_PAYMENT.EMPL_RCD
                     AND A.DEFAULT_IND = 'Y'
                     AND B.PROCESS_INSTANCE = #prcs_process_instance
                     AND B.EMPLID =  A.EMPLID 
                     AND B.EMPL_RCD = A.EMPL_RCD
                     AND B.RUN_TYPE = A.RUN_TYPE
                     AND B.GP_PMT_AMT > 0);
  end-sql

  #Debugd show 'Delete rows with no run_type and dflt. run_type exists GP_PAYMENT rows: ' #SQL-COUNT
  
  !Inserting into PS_GP_PAYMENT the new net distribution
  let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Insert,PS_GP_PAYMENT'
  begin-sql on-error=SQL-Error
  INSERT INTO PS_GP_PAYMENT (
    CAL_RUN_ID,
    EMPLID,
    EMPL_RCD,
    GP_PAYGROUP,
    CAL_ID,
    ORIG_CAL_RUN_ID,
    RSLT_SEG_NUM,
    PIN_NUM,
    INSTANCE,
    RECIPIENT_TAG,
    RECIPIENT_ID,
    RECIPIENT_NAME,
    EFF_STATUS,
    PAY_ENTITY,
    SEG_END_DT,
    PYMT_KEY1,
    PYMT_KEY2,
    PYMT_KEY3,
    PYMT_KEY4,
    BUSINESS_UNIT,
    RUN_TYPE,
    ACCOUNT_ID,
    PMT_TYPE,
    GP_PMT_AMT,
    CURRENCY_CD,
    CURRENCY_CD2,
    PAYMENT_MTHD,
    DEBIT_DT,
    REVERSAL_IND,
    SRC_BANK_ID,
    PMT_STATUS,
    CAL_PRD_ID,
    PYMT_ID,
    PYMT_NBR,
    LASTUPDDTTM,
    LASTUPDOPRID)

  SELECT
    CAL_RUN_ID,
    EMPLID,
    EMPL_RCD,
    GP_PAYGROUP,
    CAL_ID,
    ORIG_CAL_RUN_ID,
    RSLT_SEG_NUM,
    PIN_NUM,
    INSTANCE,
    RECIPIENT_TAG,
    RECIPIENT_ID,
    RECIPIENT_NAME,
    EFF_STATUS,
    PAY_ENTITY,
    SEG_END_DT,
    PYMT_KEY1,
    PYMT_KEY2,
    PYMT_KEY3,
    PYMT_KEY4,
    BUSINESS_UNIT,
    RUN_TYPE,
    ACCOUNT_ID,
    PMT_TYPE,
    GP_PMT_AMT,
    CURRENCY_CD,
    CURRENCY_CD2,
    PAYMENT_MTHD,
    DEBIT_DT,
    REVERSAL_IND,
    SRC_BANK_ID,
    PMT_STATUS,
    CAL_PRD_ID,
    PYMT_ID,
    PYMT_NBR,
    LASTUPDDTTM,
    LASTUPDOPRID

  FROM PS_GPES_PAYMENT_WK
  WHERE PROCESS_INSTANCE = #prcs_process_instance
    AND PMT_TYPE = '01'
  end-sql
  
  #Debugd show 'Rows inserted with new net distribution GP_PAYMENT rows: ' #SQL-COUNT


Else  !No group option


let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Select,PS_GPES_PAYMENT_WK'
begin-select DISTINCT on-error=SQL-Error
PMNT_WK.CAL_RUN_ID
PMNT_WK.EMPLID
PMNT_WK.EMPL_RCD
PMNT_WK.GP_PAYGROUP
PMNT_WK.CAL_ID
PMNT_WK.ORIG_CAL_RUN_ID
PMNT_WK.RSLT_SEG_NUM
PMNT_WK.PIN_NUM
PMNT_WK.INSTANCE
PMNT_WK.RECIPIENT_TAG
PMNT_WK.RECIPIENT_ID
PMNT_WK.RECIPIENT_NAME
PMNT_WK.EFF_STATUS
PMNT_WK.SEG_END_DT
PMNT_WK.PYMT_KEY1
PMNT_WK.PYMT_KEY2
PMNT_WK.PYMT_KEY3
PMNT_WK.PYMT_KEY4
PMNT_WK.BUSINESS_UNIT
PMNT_WK.RUN_TYPE
PMNT_WK.ACCOUNT_ID
PMNT_WK.PMT_TYPE
PMNT_WK.GP_PMT_AMT
PMNT_WK.CURRENCY_CD
PMNT_WK.CURRENCY_CD2
PMNT_WK.DEBIT_DT
PMNT_WK.REVERSAL_IND
PMNT_WK.SRC_BANK_ID
PMNT_WK.CAL_PRD_ID
PMNT_WK.PYMT_ID
PMNT_WK.PYMT_NBR

  let $EMPLID          = rtrim(&PMNT_WK.EMPLID ,' ')
  let #EMPL_RCD        = &PMNT_WK.EMPL_RCD
  let $GP_PAYGROUP     = rtrim(&PMNT_WK.GP_PAYGROUP ,' ')
  let $CAL_ID          = rtrim(&PMNT_WK.CAL_ID ,' ')
  let $ORIG_CAL_RUN_ID = rtrim(&PMNT_WK.ORIG_CAL_RUN_ID   ,' ')
  let #RSLT_SEG_NUM    = &PMNT_WK.RSLT_SEG_NUM
  let #PIN_NUM         = &PMNT_WK.PIN_NUM
  let #INSTANCE        = &PMNT_WK.INSTANCE
  let #RECIPIENT_TAG   = &PMNT_WK.RECIPIENT_TAG
  let $recipient       = rtrim(&PMNT_WK.RECIPIENT_ID ,' ')
  Let $RECIPIENT_NAME  = &PMNT_WK.RECIPIENT_NAME
  Let $EFF_STATUS      = &PMNT_WK.EFF_STATUS
  Let $Seg_End_Dt      = &PMNT_WK.SEG_END_DT
  Let $PYMT_KEY1       = &PMNT_WK.PYMT_KEY1
  Let $PYMT_KEY2       = &PMNT_WK.PYMT_KEY2
  Let $PYMT_KEY3       = &PMNT_WK.PYMT_KEY3
  Let $PYMT_KEY4       = &PMNT_WK.PYMT_KEY4
  Let $BUSINESS_UNIT   = &PMNT_WK.BUSINESS_UNIT
  Let $RUN_TYPE        = &PMNT_WK.RUN_TYPE
  let #ACCOUNT_ID_NO   = &PMNT_WK.ACCOUNT_ID
  let $PMT_TYPE        = rtrim(&PMNT_WK.PMT_TYPE, ' ')
  let #EMP_AMOUNT      = &PMNT_WK.GP_PMT_AMT
  let $CURRENCY_CD     = &PMNT_WK.CURRENCY_CD
  let $CURRENCY_CD2    = &PMNT_WK.CURRENCY_CD2
  let $PAYMENT_MTHD    = ' '    !&PMNT_WK.PAYMENT_MTHD
  let $DEBIT_DT        = &PMNT_WK.DEBIT_DT
  let #REVERSAL_IND    = &PMNT_WK.REVERSAL_IND
  let $SRC_BANK_ID     = &PMNT_WK.SRC_BANK_ID
  let $CAL_PRD_ID      = &PMNT_WK.CAL_PRD_ID
  let $PYMT_ID         = &PMNT_WK.PYMT_ID
  let #PYMT_NBR        = &PMNT_WK.PYMT_NBR
  let $LASTUPDDTTM     = ' '    !&PMNT_WK.LASTUPDDTTM
  let $LASTUPDOPRID    = ' '    !&PMNT_WK.LASTUPDOPRID

  do Get-Calendar-Run-Type
  Let $company_cd      = rtrim($SOURCE_CMP, ' ')

  if $PMT_TYPE <> '01'
    do get-deduction-data
  else
    Do Get-Bank-Account
    do get-payee-data
    Do Get-Beneficiary-Name
  end-if
   
  do Insert-GPES-PAYMENT-WK

FROM PS_GP_PAYMENT PMNT_WK
    ,PS_FAST_SQRFUT_SEC FAST_SEC

WHERE PMNT_WK.CAL_RUN_ID = $CAL_RUN_ID
  AND PMNT_WK.PAY_ENTITY = $PAY_ENTITY
  AND PMNT_WK.SRC_BANK_ID = $SOURCE_CD
  AND PMNT_WK.PMT_STATUS = $PMT_STATUS
  AND PMNT_WK.PAYMENT_MTHD = 'T'
  AND FAST_SEC.OPRID = $prcs_oprid
  AND FAST_SEC.EMPLID = PMNT_WK.EMPLID
  AND FAST_SEC.EMPL_RCD = PMNT_WK.EMPL_RCD
ORDER BY PMNT_WK.CAL_RUN_ID, PMNT_WK.EMPLID, PMNT_WK.EMPL_RCD, PMNT_WK.SEG_END_DT DESC
End-select


  COMMIT


  #ifdef ORACLE
    let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Analyze,PS_GPES_PAYMENT_WK'
    begin-SQL on-error=SQL-Error
      ANALYZE TABLE PS_GPES_PAYMENT_WK COMPUTE STATISTICS;
      ANALYZE INDEX PS_GPES_PAYMENT_WK COMPUTE STATISTICS;
    end-SQL

  COMMIT

  #end-if


End-If


end-procedure ! Procedure Prepare-Payment-Data


!************************************************************************
! Procedure Net-Distribution
!************************************************************************
begin-procedure Net-Distribution
#debug do Fin-Debug-Msg('Net-Distribution')

  Let $Dist_Run_Type = &TMP.RUN_TYPE

  If $Dist_Run_Type = ''

let $sql-statement = 'GPESNK5.SQR,Net-Distribution,Select,PS_GP_NET_DIST_DTL DIST'
begin-select DISTINCT on-error=SQL-Error
DIST.RUN_TYPE
  Let $Dist_Run_Type = &DIST.RUN_TYPE

FROM PS_GP_NET_DIST DIST
WHERE DIST.EMPLID = $EMPLID
  AND DIST.EMPL_RCD = #EMPL_RCD
  AND DIST.DEFAULT_IND = 'Y'
End-select

  End-if


  If $Dist_Run_Type <> ''

let $sql-statement = 'GPESNK5.SQR,Net-Distribution,Select,PS_GP_NET_DIST_DTL DTL'
begin-select DISTINCT on-error=SQL-Error
DTL.RUN_TYPE
DTL.INSTANCE
DTL.ACCOUNT_ID
DTL.PERCENT_RATE
DTL.DISTRIB_AMT
DTL.PRIMARY_ACCT_IND
DTL.PARTIAL_ALLOWED

  Let #ACCOUNT_AMT_WK = 0

  If &DTL.DISTRIB_AMT > 0 

    If #Remaining_GP_PMT_AMT >= &DTL.DISTRIB_AMT
      Let #ACCOUNT_AMT_WK = &DTL.DISTRIB_AMT
    Else
      If &DTL.PARTIAL_ALLOWED = 'Y'
        Let #ACCOUNT_AMT_WK = #Remaining_GP_PMT_AMT 
      End-If
    End-If

  Else
  
    If &DTL.PERCENT_RATE > 0 

      Let #ACCOUNT_AMT_WK = round(#Remaining_GP_PMT_AMT  * &DTL.PERCENT_RATE / 100, 2)

    Else

      !error... there is not neither fixed amount nor percentage to distribute

    End-If
    
  End-If
  
  If #ACCOUNT_AMT_WK > 0
    Let #EMP_AMOUNT = #ACCOUNT_AMT_WK
    Let #INSTANCE = &DTL.INSTANCE
    Let #ACCOUNT_ID_NO = &DTL.ACCOUNT_ID
    Do Get-Bank-Account
    do Insert-GPES-PAYMENT-WK
  End-if

  Let #Remaining_GP_PMT_AMT = #Remaining_GP_PMT_AMT - #ACCOUNT_AMT_WK
  
  #Debugd show 'Net Distribution: ' &DTL.DISTRIB_AMT '/' &DTL.PERCENT_RATE ' (Distr. Amt/Pct) ' &DTL.PARTIAL_ALLOWED ' (Partial allowed)'
  #Debugd show '                  ' #ACCOUNT_AMT_WK '/' #Remaining_GP_PMT_AMT ' (Acct Amt/Amt Pending)'

FROM PS_GP_NET_DIST_DTL DTL
WHERE DTL.EMPLID = $EMPLID
  AND DTL.EMPL_RCD = #EMPL_RCD
  AND DTL.RUN_TYPE = $Dist_Run_Type
  AND DTL.EFFDT = (SELECT MAX(DTL2.EFFDT)
                     FROM PS_GP_NET_DIST_DTL DTL2
                    WHERE DTL2.EMPLID = DTL.EMPLID
                      AND DTL2.EMPL_RCD = DTL.EMPL_RCD
                      AND DTL2.RUN_TYPE = DTL.RUN_TYPE
                      AND DTL2.EFFDT <= $asoftoday)

End-select

  end-if

end-procedure ! Procedure Net-Distribution



!************************************************************************
! Procedure Get-Calendar-Run-Type
!************************************************************************
begin-procedure Get-Calendar-Run-Type
#debug do Fin-Debug-Msg('Get-Calendar-Run-Type')

Let $Run_Type = ''

let $sql-statement = 'GPESNK5.SQR,Get-Calendar-Run-Type,Select,PS_GP_CALENDAR'
begin-select DISTINCT on-error=SQL-Error
CAL.RUN_TYPE

  Let $Run_Type = rtrim(&CAL.RUN_TYPE, ' ')

FROM PS_GP_CALENDAR CAL

WHERE CAL.GP_PAYGROUP = $GP_PAYGROUP
  AND CAL.CAL_ID = $CAL_ID
End-select

#Debugd show 'Run-Type:            ' $Run_Type


If $Run_Type = ''

let $sql-statement = 'GPESNK5.SQR,Get-Calendar-Run-Type,Select,PS_GP_CALENDAR'
begin-select DISTINCT on-error=SQL-Error
OFFPAY.RUN_TYPE

  Let $Run_Type = rtrim(&OFFPAY.RUN_TYPE, ' ')

FROM PS_GP_CAL_RUN_OFF OFFCYCL,
     PS_GP_OFFCYCL_C_VW OFFPAY

WHERE OFFCYCL.CAL_RUN_ID = $CAL_RUN_ID
  AND OFFCYCL.GP_PAYGROUP = $GP_PAYGROUP
  AND OFFPAY.GP_PAYGROUP = OFFCYCL.GP_PAYGROUP
  AND OFFPAY.CAL_PRD_ID = OFFCYCL.CAL_PRD_ID
  AND OFFPAY.OFF_CYCLE_ID = OFFCYCL.OFF_CYCLE_ID
  AND OFFPAY.EMPLID = $EMPLID
End-select

#Debugd show 'Run-Type (Offcycle): ' $Run_Type

End-If

end-procedure ! Procedure Get-Calendar-Run-Type


!************************************************************************
! Procedure EFT-File-Generation
!************************************************************************
begin-procedure EFT-File-Generation
#debug do Fin-Debug-Msg('EFT-File-Generation')

let $Payments = 'N'

let $sql-statement = 'GPESNK5.SQR,EFT-File-Generation,Select,PS_GPES_PAYMENT_WK'
begin-select DISTINCT on-error=SQL-Error
D.COMPANY
D.SRC_BANK_ID

  !let $COMPANY_Cd = RTRIM(&D.COMPANY, ' ')

  do GET-COMPANY-DATA
  do Get-Source-Bank-data

  !SEPA
  if $GPES_SEPA_ENABLED = 'N'
    do create-file
    do Write-CSB34-Batch-Header-Record
  else
    do create-file-SEPA
    do Write-SEPA-Batch-Header-Record
  End-if

  Let $Process-Order1 = 'PMNT.PROCESS_INSTANCE, PMNT.CAL_RUN_ID, '

  Let $Domestic-Transfer = 'Y'
  While $Domestic-Transfer <> ''
    Let $Block-Header-Flag = 'N'
    Let $Pmt-type-Where = '(''01'')'
    Let #Pmt-type-opt   = 01
    !Let $Process-Order  = $Process-Order1 || 'PMNT.EMPLID, PMNT.EMPL_RCD, PMNT.INSTANCE, '
    Let $Process-Order  = $Process-Order1 || 'PMNT.EMPLID, PMNT.EMPL_RCD, '
    Let $Process-Order  = $Process-Order  || 'PMNT.BANK_CD, PMNT.BRANCH_EC_CD, PMNT.ACCOUNT_EC_ID'
    do Process-Transfers
    Let $Pmt-type-Where = '(''02'',''03'')'
    Let #Pmt-type-opt   = 02
    Let $Process-Order  = $Process-Order1 || 'PMNT.RECIPIENT_ID, PMNT.RECIPIENT_TAG, '
    Let $Process-Order  = $Process-Order  || 'PMNT.BANK_CD, PMNT.BRANCH_EC_CD, PMNT.ACCOUNT_EC_ID'
    do Process-Transfers

    if $Block-Header-Flag = 'Y' AND $GPES_SEPA_ENABLED = 'N'
      do Write-CSB34-EFT-Block-Trailer-Record
    end-if
    if $Block-Header-Flag = 'Y' AND $GPES_SEPA_ENABLED = 'Y'
      do Write-SEPA-EFT-Block-Trailer-Record
    end-if

    If $Domestic-Transfer = 'Y'   !-Domestic Transfer
      Let $Domestic-Transfer = 'N'
    Else
      If $Domestic-Transfer = 'N'   !-International Transfer
        Let $Domestic-Transfer = 'S'
      Else
        If $Domestic-Transfer = 'S'   !-Special Transfer
          Let $Domestic-Transfer = ''
        end-if
      end-if
    End-If
  end-while
  If $GPES_SEPA_ENABLED = 'N'
    do Write-CSB34-Batch-Trailer-Record
    Close 100
  else
    do Write-SEPA-Batch-Trailer-Record
    Close 200
  End-if

FROM PS_GPES_PAYMENT_WK D

WHERE D.PROCESS_INSTANCE = #prcs_process_instance
end-select

if $Payments = 'N'
  let $EMPLID = 'ERROR'
  do Insert-LOG-Message(356)
end-if

#debugd show 'Pay Entity:        ' $PAY_ENTITY
#debugd show 'Calendar Group ID: ' $CAL_RUN_ID
#debugd show 'Status:            ' $PMT_STATUS
#debugd show 'User:              ' $prcs_oprid
#debugd show 'Company cd:        ' $COMPANY_Cd
#debugd show 'Source cd:         ' $SOURCE_Cd

end-procedure ! Procedure EFT-File-Generation


!************************************************************************
! Procedure GET-COMPANY-DATA
!************************************************************************
begin-procedure GET-COMPANY-DATA
#debug do Fin-Debug-Msg('GET-COMPANY-DATA')

let $sql-statement = 'GPESBNK5.SQR,GET-COMPANY-DATA,Select,PS_COMPANY_TBL'
begin-select on-error=SQL-Error
CT.COMPANY
CT.DESCR
CT.ADDRESS1
CT.ADDR_FIELD2
CT.CITY
CT.POSTAL
CT.FISCAL_ID_CD

  let $CompanyName   =  rtrim(&CT.Descr,' ')
  let $Compadd1      =  rtrim(&CT.Address1,' ')
  let $Compnum       =  rtrim(&CT.Addr_field2,' ')
  let $Compadd1      =  $Compadd1 || ',' || $Compnum
  let $CompanyCITY   =  rtrim(&CT.CITY,' ')
  let $CompanyPOSTAL =  rtrim(&CT.POSTAL,' ')
  let $CompanyFISCAL =  rtrim(&CT.FISCAL_ID_CD,' ')

FROM  PS_COMPANY_TBL CT

WHERE CT.COMPANY = $company_cd
  AND CT.EFFDT = (SELECT MAX(EFFDT) FROM PS_COMPANY_TBL
                   WHERE COMPANY = $company_cd
                     AND EFFDT <= $asoftoday)
end-select

#debugd show 'Company ID:   ' $company_cd
#debugd show 'As of Date:   ' $asoftoday
#debugd show 'Company Name: ' $CompanyName

end-procedure ! Procedure GET-COMPANY-DATA


!************************************************************************
! Procedure Get-Source-Bank-data
!************************************************************************
begin-procedure Get-Source-Bank-data
#debug do Fin-Debug-Msg('Get-Source-Bank-data')

Let $BANK_CD_SRC     =  ''
Let $BRANCH_CD_SRC   =  ''
Let $CHECK_DIGIT_SRC =  ''
Let $ACCOUNT_ID_SRC  =  ''
let $IBAN_SRC        =  ''
let $BANK_ACCT_SRC   =  ''
let $BANK_ACCT_TYPE_SRC  =  ''

let $sql-statement = 'GPESBNK5.SQR,Get-Source-Bank-Data,Select,PS_SRC_BANK'
begin-select on-error=SQL-Error
BB.BANK_CD
BB.BRANCH_EC_CD
BB.CHECK_DIGIT
BB.ACCOUNT_EC_ID
BB.INTL_BANK_ACCT_NBR

  let $BANK_CD_SRC     =  rtrim(&BB.BANK_CD ,' ')
  let $BRANCH_CD_SRC   =  rtrim(&BB.BRANCH_EC_CD ,' ')
  let $CHECK_DIGIT_SRC =  rtrim(&BB.CHECK_DIGIT ,' ')
  let $ACCOUNT_ID_SRC  =  rtrim(&BB.ACCOUNT_EC_ID ,' ')
  let $IBAN_SRC        =  rtrim(&BB.INTL_BANK_ACCT_NBR,' ')

FROM PS_SRC_BANK BB

WHERE BB.SRC_BANK_ID = $SOURCE_CD
end-select

let $BANK_ACCT_SRC = $IBAN_SRC
let $BANK_ACCT_TYPE_SRC = 'A'

if $IBAN_SRC = ''
   let $BANK_ACCT_SRC =  $BANK_CD_SRC || $BRANCH_CD_SRC || $CHECK_DIGIT_SRC || $ACCOUNT_ID_SRC
   let $BANK_ACCT_TYPE_SRC = 'B'
end-if

#debugd show 'Source Bank ID: ' $SOURCE_CD
#debugd show 'Bank:           ' $BANK_CD_SRC
#debugd show 'Branch:         ' $BRANCH_CD_SRC
#debugd show 'Check Digit:    ' $CHECK_DIGIT_SRC
#debugd show 'Account Nbr:    ' $ACCOUNT_ID_SRC

end-procedure ! Procedure Get-Source-Bank-data


!************************************************************************
! Procedure create-file
!************************************************************************
begin-procedure create-file
#debug do Fin-Debug-Msg('create-file')

#debugd show 'Company:            ' $company_cd
#debugd show 'As of Date:         ' $asoftoday
#debugd show 'Original File Name: ' $GPES_FILENAME
#debugd show 'Path:               ' $GPES_PATH_NAME


let $CSB34_FILE     = rtrim($GPES_FILENAME,' ')
let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')
Let $Literal        = Substr($GPES_PATH_NAME, Length($GPES_PATH_NAME), 1)
if $Literal = '/' or $Literal = '\'
  let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')
else
  let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')||'\'
End-if

#debugd show '$GPES_PATH_NAME: ' $GPES_PATH_NAME
!let $CSB34_FILE = rtrim($GPES_PATH_NAME,' ') ||Rtrim($GPES_FILENAME,' ') || $company_Cd || rtrim($SOURCE_Cd,' ') || '.TXT'
let $CSB34_FILE = rtrim($GPES_PATH_NAME,' ') ||Rtrim($GPES_FILENAME,' ') || rtrim($SOURCE_Cd,' ') || '.TXT'

#debugd show 'Changed File Name:  ' $CSB34_FILE

OPEN $CSB34_FILE AS 100 FOR-WRITING record=72:FIXED status=#filestat
if #filestat != 0
    display 'Error opening file: ' noline
    display $CSB34_FILE            noline
    display '   RC= '              noline
    display #filestat
end-if

end-procedure ! Procedure create-file

!************************************************************************
! Procedure create-file-SEPA
!************************************************************************
begin-procedure create-file-SEPA
#debug do Fin-Debug-Msg('create-file-SEPA')

#debugd show 'Company:            ' $company_cd
#debugd show 'As of Date:         ' $asoftoday
#debugd show 'Original File Name: ' $GPES_FILENAME
#debugd show 'Path:               ' $GPES_PATH_NAME


let $CSB34_FILE     = rtrim($GPES_FILENAME,' ')
let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')
Let $Literal        = Substr($GPES_PATH_NAME, Length($GPES_PATH_NAME), 1)
if $Literal = '/' or $Literal = '\'
  let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')
else
  let $GPES_PATH_NAME = rtrim($GPES_PATH_NAME,' ')||'\'
End-if

#debugd show '$GPES_PATH_NAME: ' $GPES_PATH_NAME
!let $CSB34_FILE = rtrim($GPES_PATH_NAME,' ') ||Rtrim($GPES_FILENAME,' ') || $company_Cd || rtrim($SOURCE_Cd,' ') || '.TXT'
let $CSB34_FILE = rtrim($GPES_PATH_NAME,' ') ||Rtrim($GPES_FILENAME,' ') || rtrim($SOURCE_Cd,' ') || '.TXT'

#debugd show 'Changed File Name:  ' $CSB34_FILE

OPEN $CSB34_FILE AS 200 FOR-WRITING record=600:FIXED status=#filestat
if #filestat != 0
    display 'Error opening file: ' noline
    display $CSB34_FILE            noline
    display '   RC= '              noline
    display #filestat
end-if

end-procedure ! Procedure create-file-SEPA

!************************************************************************
! Procedure Write-CSB34-EFT-Block-Header-Record
!************************************************************************
begin-procedure  Write-CSB34-EFT-Block-Header-Record
#debug do Fin-Debug-Msg('Write-CSB34-EFT-Block-Header-Record')

let $CSB34_reg_code = '04'
Evaluate $Domestic-Transfer
When = 'Y'
  let $CSB34_opr_code = $GPES_OPER_CODE_1
When = 'N'
  let $CSB34_opr_code = $GPES_OPER_CODE_2
When = 'S'
  let $CSB34_opr_code = $GPES_OPER_CODE_3
End-Evaluate

!-- Intialize trailing records counters
let #CSB34_block_rec_cnt   =  0
let #CSB34_block_payee_cnt =  0
let #CSB34_block_pay_amt   =  0

!-- Block Header Record
WRITE 100 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:2            !- Operation Code
  $CSB34_fiscal_cd:9           !- Company ID (CIF)
  $GPES_SUFFIX:3               !- Suffix
  $fill:12                     !- Free
  $fill:3                      !- Free
  $fill:41                     !- Free

let #csb34_Block_rec_cnt = #csb34_Block_rec_cnt + 1

End-Procedure ! Procedure Write-CSB34-EFT-Block-Header-Record

!************************************************************************
! Procedure Write-SEPA-EFT-Block-Header-Record
!************************************************************************
begin-procedure  Write-SEPA-EFT-Block-Header-Record
#debug do Fin-Debug-Msg('Write-CSB34-EFT-Block-Header-Record')

let $CSB34_reg_code = '02'
Evaluate $Domestic-Transfer
When = 'Y'
  let $CSB34_opr_code = $GPES_OPER_CODE_1
When = 'N'
  let $CSB34_opr_code = $GPES_OPER_CODE_2
When = 'S'
  let $CSB34_opr_code = $GPES_OPER_CODE_3
End-Evaluate

!-- Intialize trailing records counters
let #CSB34_block_rec_cnt   =  0
let #CSB34_block_payee_cnt =  0
let #CSB34_block_pay_amt   =  0

!-- Block Header Record
WRITE 200 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:3            !- Operation Code
  $GPES_SEPA_VERSION:5             !- Version Number
  $CSB34_fiscal_cd:9           !- Company ID (CIF)
  $GPES_SUFFIX:3               !- Suffix
  $fill:578                     !- Free


let #csb34_Block_rec_cnt = #csb34_Block_rec_cnt + 1

End-Procedure ! Procedure Write-SEPA-EFT-Block-Header-Record


!************************************************************************
! Procedure Process-Transfers
!************************************************************************
begin-procedure  Process-Transfers
#debug do Fin-Debug-Msg('Process-Transfers')

Let $Country-2Char      = ''

Let $Emplid_Prev        = ''
Let #Empl_Rcd_Prev      = 0
Let #Instance_Prev      = 0
Let $Pmt_Type_Prev      = ''
Let $recipient_Prev     = ''
Let #Recipient_Tag_Prev = 0
Let #ACCOUNT_ID_NO_Prev = 0

#debugd show 'Pmt Type Where:             ' $Pmt-type-Where
#debugd show 'Process Transfers Ordering: ' $Process-Order
#debugd show 'Transfer block flag:        ' $Domestic-Transfer

let $sql-statement = 'GPESNK5.SQR,Process-Transfers,Select,PS_GPES_PAYMENT_WK'
begin-select DISTINCT on-error=SQL-Error
PMNT.PROCESS_INSTANCE
PMNT.CAL_RUN_ID
PMNT.EMPLID
PMNT.EMPL_RCD
PMNT.GP_PAYGROUP
PMNT.CAL_ID
PMNT.ORIG_CAL_RUN_ID
PMNT.RSLT_SEG_NUM
PMNT.PIN_NUM
PMNT.INSTANCE
PMNT.ACCOUNT_ID
PMNT.RECIPIENT_TAG
PMNT.GP_PMT_AMT
PMNT.SEG_END_DT
PMNT.RECIPIENT_ID
PMNT.PMT_TYPE
PMNT.ADDR_FIELD1
PMNT.ADDRESS1
PMNT.ADDR_FIELD2
PMNT.CITY
PMNT.POSTAL
PMNT.STATE_DESCR1
PMNT.COUNTRY_CD
PMNT.BANK_CD
PMNT.BRANCH_EC_CD
PMNT.CHECK_DIGIT
PMNT.ACCOUNT_EC_ID
PMNT.BANK_ID_CODE
PMNT.INTL_BANK_ACCT_NBR
PMNT.ACCOUNT_NAME
PMNT.RUN_TYPE

  let $EMPLID          = rtrim(&PMNT.EMPLID ,' ')
  let #EMPL_RCD        = &PMNT.EMPL_RCD
  let $GP_PAYGROUP     = &PMNT.GP_PAYGROUP
  let $CAL_ID          = &PMNT.CAL_ID
  let $ORIG_CAL_RUN_ID = &PMNT.ORIG_CAL_RUN_ID
  let #RSLT_SEG_NUM    = &PMNT.RSLT_SEG_NUM
  let #PIN_NUM         = &PMNT.PIN_NUM
  let #INSTANCE        = &PMNT.INSTANCE
  let #ACCOUNT_ID_NO   = &PMNT.ACCOUNT_ID
  let $recipient       = rtrim(&PMNT.RECIPIENT_ID ,' ')
  let #RECIPIENT_TAG   = &PMNT.RECIPIENT_TAG
  let $PMT_TYPE        = rtrim(&PMNT.PMT_TYPE, ' ')
  let $addr1           = rtrim(&PMNT.ADDR_FIELD1,' ')
  let $addr2           = rtrim(&PMNT.ADDRESS1,' ')
  let $addr3           = rtrim(&PMNT.ADDR_FIELD2,' ')
  let $CITY            = rtrim(&PMNT.CITY,' ')
  let $postal          = rtrim(&PMNT.POSTAL,' ')
  let $state           = rtrim(&PMNT.STATE_DESCR1,' ')
  let $BANK_COUNTRY    = rtrim(&PMNT.COUNTRY_CD,' ')
  let $BANK_CD         = {PS-SUBSTR}(&PMNT.BANK_CD, 1, 4)
  let $BRANCH_CD       = {PS-SUBSTR}(&PMNT.BRANCH_EC_CD, 1, 4)
  let $CHECK_DIGIT     = {PS-SUBSTR}(&PMNT.CHECK_DIGIT, 1, 2)
  let $ACCOUNT_ID      = {PS-SUBSTR}(&PMNT.ACCOUNT_EC_ID, 1, 10)
  Let $Bank-SWIFT_BIC  = &PMNT.BANK_ID_CODE
  let $IBAN            =  rtrim(&PMNT.INTL_BANK_ACCT_NBR,' ')
  let $BENEFICIARY     = {PS-SUBSTR}(&PMNT.ACCOUNT_NAME, 1, 30)
  Let $Run_Type        = rtrim(&PMNT.RUN_TYPE, ' ')

  let $write-line      = 'Y'
  let $date            = datetostr(&PMNT.SEG_END_DT,{Native-DateMask})

  #debugd Show 'End Seg date: ' &PMNT.SEG_END_DT
  #debugd Show 'End Seg date: ' $date

  do Get-Residence
  DO Get-National-Id-Data

  ! Payment type = 01 is Net pay distribution. So only for this (with Grouping=ON) we get employee's total Net and compare it with each account's summed amount.
  ! Only if employee's total Net is > 0, we make any trasfers to the employee's accounts in EFFT file. 
  IF $PMT_TYPE = '01' 
    let #EMP_AMOUNT =  &PMNT.GP_PMT_AMT
  END-IF 
  
  ! Payment type <> 01 would be deduction recipients. So we don't include any additional logic of comparing  employee's total Net.
  IF $PMT_TYPE <> '01'
    DO GET-GROUP-PAY-AMOUNT    !Changes $Write-Line to 'N' if group amt > max amt
  end-if
  
  
  do Det-Transfer-Block        !Changes $Block to 'U' -Unknown- if country is blank

  let #CSB34_EMP_pymnt_amt        =  #EMP_AMOUNT
  let $CSB34_pymnt_id             =  {PS-SUBSTR}($nid, 1, 10)
  let $CSB34_EMP_bank_id          =  {PS-SUBSTR}($BANK_CD, 1, 4)
  let $CSB34_EMP_branch_id        =  {PS-SUBSTR}($BRANCH_CD, 1, 4)
  let $CSB34_EMP_bank_account_num =  {PS-SUBSTR}($ACCOUNT_ID, 1, 10)
  let $CSB34_EMP_check_digit      =  {PS-SUBSTR}($CHECK_DIGIT, 1, 2)
  let $CSB34_EMP_name             =  {PS-SUBSTR}($BENEFICIARY, 1, 30)
  let $address                    =  $addr1 || ' ' || $addr2 || ',' || $addr3
  let $CSB34_EMP_address1         =  {PS-SUBSTR}($address, 1, 35)
  let $CSB34_EMP_city             =  {PS-SUBSTR}($city, 1, 30)
  let $CSB34_EMP_postal           =  {PS-SUBSTR}($POSTAL,1,5)
  let $CSB34_EMP_STATE            =  {PS-SUBSTR}($STATE, 1, 30)

  If  $GPES_SEPA_ENABLED = 'Y'
    let $CSB34_reg_code = '06'
  else
    let $CSB34_reg_code = '03'
  end-if
  let $line-splited   = 'N'

  If $write-line = 'Y' and (($PMT_TYPE = '01' and $GPES_GROUP_PAY = 'N')
      or ($PMT_TYPE = '01' and $GPES_GROUP_PAY = 'Y'
          and ($EMPLID <> $Emplid_Prev or #EMPL_RCD <> #Empl_Rcd_Prev or #ACCOUNT_ID_NO <> #ACCOUNT_ID_NO_Prev))
      or ($PMT_TYPE <> '01'
          and ($recipient <> $recipient_Prev or #RECIPIENT_TAG <> #Recipient_Tag_Prev)))

    #debugd Show 'Write Line:              ' $write-line
    #debugd show 'Domestic Transfer/Block: ' $Domestic-Transfer '/' $Block

    if $Domestic-Transfer = 'Y' AND $Block = 'N'
      do evaluate-amount-nat
      if $write-line = 'Y'
        do Get-Country
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'N'
          do Write-CSB34-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'Y'
          do Write-SEPA-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if
        if $line-splited = 'N' and $GPES_SEPA_ENABLED = 'N'
          do Write-CSB34-Domestic-Payment-Record
        end-if
        if $line-splited = 'N' and $GPES_SEPA_ENABLED = 'Y'
          do Write-SEPA-Domestic-Payment-Record
        end-if

        IF $GPES_GROUP_PAY = 'N' and $PMT_TYPE = '01'
          DO UPDATE-GP-PAYMENT
        end-if
      end-if
    end-if

    if $Domestic-Transfer = 'N' AND $Block = 'T'
      do evaluate-amount-Trans
      if $write-line = 'Y'
        do Get-Country
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'N'
          do Write-CSB34-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if
        !Check
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'Y'
          do Write-SEPA-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if

        if $line-splited = 'N' and $GPES_SEPA_ENABLED = 'N'
          do Write-CSB34-International-Payment-Record
        end-if
        !Check
        if $line-splited = 'N' and $GPES_SEPA_ENABLED = 'Y'
          do Write-SEPA-International-Payment-Record
        end-if

        IF $GPES_GROUP_PAY = 'N' and $PMT_TYPE = '01'
          DO UPDATE-GP-PAYMENT
        end-if
      end-if
    end-if

    #Debugd show 'Include Special Block: ' $GPES_INCLUDE_SP
    if $Domestic-Transfer = 'S' AND $Block = 'S' and $GPES_INCLUDE_SP = 'I'
      If $write-line = 'Y'
        do Get-Country
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'N'
          do Write-CSB34-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if
       !Check
        if $Block-Header-Flag = 'N' and $GPES_SEPA_ENABLED = 'Y'
          do Write-SEPA-EFT-Block-Header-Record
          let $Block-Header-Flag = 'Y'
        end-if

        If $GPES_SEPA_ENABLED = 'N'
           do Write-CSB34-Special-Payment-Record
        End-If
        !Check
        If $GPES_SEPA_ENABLED = 'Y'
           do Write-SEPA-Special-Payment-Record
        End-If

        IF $GPES_GROUP_PAY = 'N' and $PMT_TYPE = '01'
          DO UPDATE-GP-PAYMENT
        end-if
      end-if
    end-if

    Let $Emplid_Prev = $EMPLID
    Let #Empl_Rcd_Prev = #EMPL_RCD
    Let #Instance_Prev = #INSTANCE
    Let $recipient_Prev = $recipient
    Let #Recipient_Tag_Prev = #RECIPIENT_TAG
    Let #ACCOUNT_ID_NO_Prev = #ACCOUNT_ID_NO

  end-if

FROM PS_GPES_PAYMENT_WK PMNT

WHERE PMNT.PROCESS_INSTANCE = #prcs_process_instance
  AND PMNT.SRC_BANK_ID = &D.SRC_BANK_ID
  AND PMNT.PMT_TYPE IN [$Pmt-type-Where]
ORDER BY [$Process-Order]

End-select

end-procedure !Process-Transfers


!************************************************************************
! Procedure Get-Bank-Account
!************************************************************************
begin-procedure Get-Bank-Account
#debug do Fin-Debug-Msg('Get-Bank-Account')

Let $Run_Type_DST =  ''
Let $BANK_COUNTRY =  ''
Let $BANK_CD      =  ''
Let $BRANCH_CD    =  ''
Let $CHECK_DIGIT  =  ''
Let $ACCOUNT_ID   =  ''
Let $IBAN         =  ''

let $sql-statement = 'GPESNK5.SQR,Get-Bank-Account,Select,PS_GP_NET_DIST'
begin-select on-error=SQL-Error
NDST.RUN_TYPE
NDST.DEFAULT_IND

   If &NDST.RUN_TYPE = $Run_Type
     Let $Run_Type_DST = $Run_Type
     EXIT-SELECT
   Else
     If &NDST.DEFAULT_IND = 'Y'
       Let $Run_Type_DST = &NDST.RUN_TYPE
     End-if
   End-if

FROM PS_GP_NET_DIST NDST

WHERE NDST.EMPLID = $EMPLID
  AND NDST.EMPL_RCD = #EMPL_RCD
end-select

#Debugd show 'Net Dist Run-Type: ' $Run_Type_DST
#Debugd show 'Payment Instance:  ' #INSTANCE

let $IBAN        =  ''

let $sql-statement = 'GPESNK5.SQR,Get-Bank-Account,Select,PS_PYE_BANKACCT'
begin-select on-error=SQL-Error
C.COUNTRY_CD
C.BANK_CD
C.BRANCH_EC_CD
C.CHECK_DIGIT
C.ACCOUNT_EC_ID
C.INTL_BANK_ACCT_NBR

   let $BANK_COUNTRY =  rtrim(&C.COUNTRY_CD, ' ')
   let $BANK_CD      =  rtrim(&C.BANK_CD ,' ')
   let $BRANCH_CD    =  rtrim(&C.BRANCH_EC_CD ,' ')
   let $CHECK_DIGIT  =  rtrim(&C.CHECK_DIGIT ,' ')
   let $ACCOUNT_ID   =  rtrim(&C.ACCOUNT_EC_ID ,' ')
   let $IBAN         =  rtrim(&C.INTL_BANK_ACCT_NBR,' ')

   If $Domestic-Transfer <> 'Y'
     do Get-Bank
   End-if

FROM PS_GP_NET_DIST_DTL B
    ,PS_PYE_BANKACCT C

WHERE B.EMPLID = $EMPLID
  AND B.EMPL_RCD = #EMPL_RCD
  AND B.RUN_TYPE = $Run_Type_DST
  AND B.EFFDT = ( SELECT MAX(EFFDT) FROM PS_GP_NET_DIST_DTL
                   WHERE EMPLID = B.EMPLID
                     AND EMPL_RCD = B.EMPL_RCD
                     AND RUN_TYPE = B.RUN_TYPE
                     AND EFFDT <= $asoftoday )
  AND B.INSTANCE = #INSTANCE
  AND C.EMPLID = B.EMPLID
  AND C.ACCOUNT_ID = B.ACCOUNT_ID
  AND C.EFF_STATUS ='A'
end-select

#debugd show 'Employee ID:            ' $EMPLID
#debugd show 'As of Date:             ' $asoftoday
#debugd show 'EE Bank Country:        ' $BANK_COUNTRY
#debugd show 'EE Bank Code:           ' $BANK_CD
#debugd show 'EE Bank Branch:         ' $BRANCH_CD
#debugd show 'EE Account Check Digit: ' $CHECK_DIGIT
#debugd show 'EE Account ID:          ' $ACCOUNT_ID
#debugd show 'EE IBAN:                ' $IBAN

end-procedure ! Procedure Get-Bank-Account


!************************************************************************
! Procedure Get-Residence
!************************************************************************
begin-procedure Get-Residence
#debug do Fin-Debug-Msg('Get-Residence')

let $sql-statement = 'GPESNK5.SQR,Get-Residence,Select,PS_GPES_PAYEE_DATA'
begin-select on-error=SQL-Error
A.GPES_TAX_CALC

  let $RESIDENCE  =  rtrim(&A.GPES_TAX_CALC ,' ')

FROM PS_GPES_PAYEE_DATA A

WHERE EMPLID = $EMPLID
  AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPES_PAYEE_DATA
                  WHERE EMPLID = $EMPLID
                    AND EFFDT <= $asoftoday)
end-select

#debugd Show 'Residence: ' $RESIDENCE
end-procedure !Get-Residence

!************************************************************************
! Procedure GET-NET-PAY-AMOUNT
!************************************************************************
begin-procedure GET-NET-PAY-AMOUNT
#debug do Fin-Debug-Msg('GET-NET-PAY-AMOUNT')

Let #EMP_NET_AMOUNT    = 0
Let #EMP_NETAMOUNT_WK = 0

let $sql-statement = 'GPESNK5.SQR,GET-NET-PAY-AMOUNT,Select,PS_GPES_PAYMENT_WK'
begin-select ON-ERROR=sql-error
NETPMNTS.GP_PMT_AMT    &NETPMNTS.GP_PMT_AMT
  let #EMP_NETAMOUNT_WK   = #EMP_NETAMOUNT_WK + &NETPMNTS.GP_PMT_AMT
  #Debugd show 'GP_PMT_AMT:      ' &NETPMNTS.GP_PMT_AMT
  #Debugd show 'Net Amt: ' #EMP_NETAMOUNT_WK

FROM PS_GPES_PAYMENT_WK NETPMNTS

WHERE NETPMNTS.PROCESS_INSTANCE = #prcs_process_instance
  AND NETPMNTS.CAL_RUN_ID = $CAL_RUN_ID
  AND (NETPMNTS.EMPLID = $EMPLID
   AND NETPMNTS.PMT_TYPE IN [$Pmt-type-Where] AND #Pmt-type-opt = 01)
end-select

Let #EMP_NET_AMOUNT = #EMP_NETAMOUNT_WK

#debugd Show 'Net Pay Amount: ' #EMP_NET_AMOUNT
#debugd Show 'Write-Line      : ' $write-line

end-procedure !GET-NET-PAY-AMOUNT


!************************************************************************
! Procedure GET-GROUP-PAY-AMOUNT
!************************************************************************
begin-procedure GET-GROUP-PAY-AMOUNT
#debug do Fin-Debug-Msg('GET-GROUP-PAY-AMOUNT')

Let #EMP_AMOUNT    = 0
Let #EMP_AMOUNT_WK = 0

#debugd show 'Cal run ID:    ' $CAL_RUN_ID
#debugd show 'Emplid:        ' $EMPLID
#debugd show 'Empl Rcd#:     ' #EMPL_RCD
#debugd show 'Instance:      ' #INSTANCE
#debugd show 'Recipient:     ' $recipient
#debugd show 'Recipient Tag: ' #RECIPIENT_TAG
#debugd show 'Bank Source:   ' $SOURCE_CD
#debugd show 'Pmnt Status:   ' $PMT_STATUS
#debugd show 'Pay entity:    ' $PAY_ENTITY
#debugd show 'Company:       ' $COMPANY_Cd
#debugd show 'Payment Type:  ' $PMT_TYPE
#debugd show 'Run Type:      ' $Run_Type


let $sql-statement = 'GPESNK5.SQR,GET-GROUP-PAY-AMOUNT,Select,PS_GPES_PAYMENT_WK'
begin-select ON-ERROR=sql-error
SUM(PMNTS.GP_PMT_AMT)    &PMNTS.GP_PMT_AMT
  let #EMP_AMOUNT_WK   = #EMP_AMOUNT_WK + &PMNTS.GP_PMT_AMT
  #Debugd show 'GP_PMT_AMT:      ' &PMNTS.GP_PMT_AMT
  #Debugd show 'Accumulated Amt: ' #EMP_AMOUNT_WK

FROM PS_GPES_PAYMENT_WK PMNTS

WHERE PMNTS.PROCESS_INSTANCE = #prcs_process_instance
  AND PMNTS.CAL_RUN_ID = $CAL_RUN_ID
  AND ((PMNTS.EMPLID = $EMPLID
   AND PMNTS.EMPL_RCD = #EMPL_RCD
   !AND PMNTS.INSTANCE = #INSTANCE
   AND PMNTS.ACCOUNT_ID = #ACCOUNT_ID_NO
   AND PMNTS.PMT_TYPE IN [$Pmt-type-Where] AND #Pmt-type-opt = 01)
    OR (PMNTS.RECIPIENT_ID = $recipient
   AND PMNTS.RECIPIENT_TAG = #RECIPIENT_TAG
   AND PMNTS.PMT_TYPE IN [$Pmt-type-Where] AND #Pmt-type-opt = 02))
end-select

#Debugd show 'FROM PS_GPES_PAYMENT_WK PMNTS'
#Debugd show 'WHERE PMNTS.PROCESS_INSTANCE = '  #prcs_process_instance
#Debugd show '  AND PMNTS.CAL_RUN_ID = '''  $CAL_RUN_ID  ''''
#Debugd show '  AND ((PMNTS.EMPLID = '''  $EMPLID  ''''
#Debugd show '   AND PMNTS.EMPL_RCD = '  #EMPL_RCD
#Debugd show '   AND PMNTS.INSTANCE = '  #INSTANCE
#Debugd show '   AND PMNTS.PMT_TYPE IN '  $Pmt-type-Where  ' AND '  #Pmt-type-opt  ' = 01)'
#Debugd show '    OR (PMNTS.RECIPIENT_ID = '''  $recipient  ''''
#Debugd show '   AND PMNTS.RECIPIENT_TAG = '  #RECIPIENT_TAG
#Debugd show '   AND PMNTS.PMT_TYPE IN '  $Pmt-type-Where  ' AND '  #Pmt-type-opt  ' = 02))'


If #EMP_AMOUNT_WK > 0 AND ((#EMP_AMOUNT_WK <= #EMP_NET_AMOUNT AND $PMT_TYPE = '01') OR $PMT_TYPE <> '01')
  let $sql-statement = 'GPESNK5.SQR,GET-GROUP-PAY-AMOUNT,Select,PS_GPES_PAYMENT_WK'
  begin-select ON-ERROR=sql-error
PMNT1.EMPLID
PMNT1.EMPL_RCD
PMNT1.GP_PAYGROUP
PMNT1.CAL_ID
PMNT1.ORIG_CAL_RUN_ID
PMNT1.RSLT_SEG_NUM
PMNT1.PIN_NUM
PMNT1.INSTANCE
PMNT1.ACCOUNT_ID
PMNT1.RECIPIENT_ID
PMNT1.RECIPIENT_TAG
PMNT1.PMT_TYPE
PMNT1.GP_PMT_AMT
  let $EMPLID          = rtrim(&PMNT1.EMPLID ,' ')
  let #EMPL_RCD        = &PMNT1.EMPL_RCD
  let $GP_PAYGROUP     = &PMNT1.GP_PAYGROUP
  let $CAL_ID          = &PMNT1.CAL_ID
  let $ORIG_CAL_RUN_ID = &PMNT1.ORIG_CAL_RUN_ID
  let #RSLT_SEG_NUM    = &PMNT1.RSLT_SEG_NUM
  let #PIN_NUM         = &PMNT1.PIN_NUM
  let #INSTANCE        = &PMNT1.INSTANCE
  let #ACCOUNT_ID_NO   = &PMNT1.ACCOUNT_ID
  let $recipient       = rtrim(&PMNT1.RECIPIENT_ID ,' ')
  let #RECIPIENT_TAG   = &PMNT1.RECIPIENT_TAG
  let $PMT_TYPE        = rtrim(&PMNT1.PMT_TYPE, ' ')
  let #EMP_AMOUNT      = &PMNT1.GP_PMT_AMT

  DO UPDATE-GP-PAYMENT

FROM PS_GPES_PAYMENT_WK PMNT1

WHERE PMNT1.PROCESS_INSTANCE = #prcs_process_instance
  AND PMNT1.CAL_RUN_ID = $CAL_RUN_ID
  AND ((PMNT1.EMPLID = $EMPLID
   AND PMNT1.EMPL_RCD = #EMPL_RCD
   !AND PMNT1.INSTANCE = #INSTANCE
   AND PMNT1.ACCOUNT_ID = #ACCOUNT_ID_NO
   AND PMNT1.PMT_TYPE IN [$Pmt-type-Where] AND #Pmt-type-opt = 01)
    OR (PMNT1.RECIPIENT_ID = $recipient
   AND PMNT1.RECIPIENT_TAG = #RECIPIENT_TAG
   AND PMNT1.PMT_TYPE IN [$Pmt-type-Where] AND #Pmt-type-opt = 02))
  end-select
end-if

Let #EMP_AMOUNT = #EMP_AMOUNT_WK

#debugd Show 'Group Pay Amount: ' #EMP_AMOUNT
#debugd Show 'Write-Line      : ' $write-line

end-procedure !GET-GROUP-PAY-AMOUNT


!************************************************************************
! Procedure Det-Transfer-Block
!************************************************************************
begin-procedure Det-Transfer-Block
#debug do Fin-Debug-Msg('Det-Transfer-Block')

if $GPES_SEPA_ENABLED = 'Y'

  if $BANK_COUNTRY = ''
    Let $Block = 'U'
    Let $write-line = 'N'
    do Insert-LOG-Message (352)
  else

    LET $CTRYSTATUS = ''
    LET $SEPAZONE = 'N'

BEGIN-SELECT
CTRY.STATUS
    LET $CTRYSTATUS = &CTRY.STATUS

FROM PS_GP_APP_PKG_DEFN CTRY
WHERE CTRY.COUNTRY = $BANK_COUNTRY
END-SELECT

    IF $CTRYSTATUS = 'A' OR $CTRYSTATUS = 'I'
      LET $SEPAZONE = 'Y'
    END-IF

    if $SEPAZONE = 'Y'
      Let $Block = 'N'
    Else
      Let $Block = 'T'
    end-if

    if #EMP_AMOUNT > #GPES_MAX_AMOUNT
      Let $write-line = 'N'
      do Insert-LOG-Message(351)
    else
      if #EMP_AMOUNT < 0
        #debugd show 'negative'
        Let $write-line = 'N'
        do Insert-LOG-Message(357)
      end-if
    end-if
  end-if
else
  if $BANK_COUNTRY = ''
    Let $Block = 'U'
    Let $write-line = 'N'
    do Insert-LOG-Message (352)
  else
    if $BANK_COUNTRY = 'ESP'
      Let $Block = 'N'
    Else
      Let $Block = 'T'
    end-if

    if #EMP_AMOUNT > #GPES_MAX_AMOUNT
      Let $write-line = 'N'
      do Insert-LOG-Message(351)
    else
      if #EMP_AMOUNT < 0
        #debugd show 'negative'
        Let $write-line = 'N'
        do Insert-LOG-Message(357)
      end-if
    end-if

    If ($BANK_COUNTRY <> 'ESP' and #EMP_AMOUNT >= #GPES_MAX_AMT_SP and #EMP_AMOUNT <= #GPES_MAX_AMOUNT) or
       ($BANK_COUNTRY = 'ESP' and $RESIDENCE = '2' and #EMP_AMOUNT >= #GPES_MAX_AMT_SP and #EMP_AMOUNT <= #GPES_MAX_AMOUNT)
      Let $Block = 'S'
      If $GPES_INCLUDE_SP = 'E'
        Let $write-line = 'N'
        do Insert-LOG-Message(353)
      Else
        Let $write-line = 'Y'
      End-if
    End-if
  end-if
end-if

#debugd Show 'Block '  $Block
end-procedure !Det-Transfer-Block


!************************************************************************
! Procedure Get-National-Id-Data
!************************************************************************
begin-procedure Get-National-Id-Data
#debug do Fin-Debug-Msg('Get-National-Id-Data')

Let $NID = ''

let $sql-statement = 'GPESNK5.SQR,Get-National-Id-Data,Select,PS_PERS_NID'
begin-select on-error=SQL-Error
B.NATIONAL_ID          &B.NATIONAL_ID
  let $NID = rtrim(&B.NATIONAL_ID, ' ')

FROM  PS_PERS_NID B

WHERE B.EMPLID = $EMPLID
  AND B.PRIMARY_NID = 'Y'
end-select

#debug show 'Employee ID:       ' $EMPLID
#debug show 'Primary NID Value: ' $NID

end-procedure ! Procedure Get-National-Id-Data


!************************************************************************
! Procedure Get-Beneficiary-Name
!************************************************************************
begin-procedure Get-Beneficiary-Name
#debug do Fin-Debug-Msg('Get-Beneficiary-Name')

Let $BENEFICIARY = ''

let $sql-statement = 'GPESNK5.SQR,Get-Beneficiary-Name,Select,PS_PERSON_NAME'
begin-select on-error=SQL-Error
NAME
  let $BENEFICIARY = RTRIM(&NAME,' ')

FROM PS_PERSON_NAME

WHERE  EMPLID = $EMPLID
end-select

#debug show 'Employee ID: ' $EMPLID
#debug show 'EE Name:     ' $BENEFICIARY

end-procedure ! Procedure Get-Beneficiary-Name


!************************************************************************
! Procedure get-payee-data
!************************************************************************
begin-procedure get-payee-data
#debug do Fin-Debug-Msg('get-payee-data')

let $sql-statement = 'GPESNK5.SQR,get-payee-data,Select,PS_PERSON_ADDRESS'
begin-select on-error=SQL-Error
A.ADDR_FIELD1
A.ADDRESS1
A.ADDR_FIELD2
A.CITY
A.POSTAL
B.DESCR
   let $addr1   =  rtrim(&A.Addr_field1,' ')
   let $addr2   =  rtrim(&a.Address1,' ')
   let $addr3   =  rtrim(&A.Addr_field2,' ')
   let $CITY    =  rtrim(&a.CITY,' ')
   let $postal  =  rtrim(&a.postal,' ')
   let $state   =  rtrim(&b.descr,' ')

FROM PS_PERSON_ADDRESS A
    ,PS_STATE_NAMES_TBL B

WHERE A.EMPLID = $EMPLID
  AND B.COUNTRY = A.COUNTRY
  AND B.STATE = A.STATE
  AND A.ADDRESS_TYPE = 'HOME'
end-select
end-procedure ! Procedure get-payee-data


!************************************************************************
! Procedure evaluate-amount-nat
!************************************************************************
begin-procedure evaluate-amount-nat
#debug do Fin-Debug-Msg('evaluate-amount-nat')

#debugd Show 'Amount:         ' #EMP_AMOUNT
#debugd Show 'Max Amount Dom: ' #GPES_MAX_AMT_NAT
#debugd Show 'Action:         ' $GPES_ACTION_1

!IF #EMP_AMOUNT < 0                          already done in procudeure det-transfer-block
!  #debugd show 'negative'
!  Let $write-line = 'N'
!  do Insert-LOG-Message(357)
!else
  !IF #EMP_AMOUNT > #GPES_MAX_AMOUNT              already done in procedure det-transfer-block
  !  #debugd show 'Amount over upper ceilling'
  !  Let $write-line = 'N'
  !  do Insert-LOG-Message(351)
  !else
    if #GPES_MAX_AMT_NAT > 0
      if #EMP_AMOUNT > #GPES_MAX_AMT_NAT AND #EMP_AMOUNT <= #GPES_MAX_AMOUNT
        evaluate $GPES_ACTION_1
        when = 'E'
          #DebugD show 'dom exclude'
          Let $write-line = 'N'
          do Insert-LOG-Message(354)
        when = 'S'
          do split-amount(#GPES_MAX_AMT_NAT)
        end-evaluate
      end-if
    end-if
  !end-if
!end-if

#debugd Show 'Write-Line: ' $write-line

end-procedure ! Procedure evaluate-amount-nat


!************************************************************************
! Procedure evaluate-amount-Trans
!************************************************************************
begin-procedure evaluate-amount-Trans
#debug do Fin-Debug-Msg('evaluate-amount-Trans')

#debugd Show 'Amount :    ' #EMP_AMOUNT
#debugd Show 'Max Amount: ' #GPES_MAX_AMT_TRANS
#debugd Show 'Action:     ' $GPES_ACTION_2

!IF #EMP_AMOUNT < 0
!  #debugd show 'negativa'
!  Let $write-line = 'N'
!  do Insert-LOG-Message(357)
!else
!  if #EMP_AMOUNT > #GPES_MAX_AMOUNT
!    #debugd show 'Mas del MAX'
!    Let $write-line = 'N'
!    do Insert-LOG-Message(351)
!  else
    if #GPES_MAX_AMT_TRANS > 0
      if #EMP_AMOUNT > #GPES_MAX_AMT_TRANS and #EMP_AMOUNT <= #GPES_MAX_AMOUNT
        EVALUATE $GPES_ACTION_2
        WHEN = 'E'
          Let $write-line = 'N'
          do Insert-LOG-Message(355)
        WHEN = 'S'
          do split-amount(#GPES_MAX_AMT_TRANS)
        end-evaluate
      end-if
    end-if
!  end-if
!end-if

end-procedure ! Procedure evaluate-amount-Trans


!************************************************************************
! Procedure split-amount
!************************************************************************
begin-procedure split-amount(#TOPE)
#debug do Fin-Debug-Msg('split-amount')


let #New-line = 'N'
let #EMP_TEMP = #_CSB34_EMP_pymnt_amt

#DebugD Show 'Emp Amount: ' #_EMP_AMOUNT
#DebugD Show 'Ceilling:   ' #TOPE
#DebugD Show 'file amt:   ' #CSB34_EMP_pymnt_amt

While #TOPE < #EMP_TEMP
  #debugd Show 'Loop '
  let #_CSB34_EMP_pymnt_amt = #TOPE
  let $_CSB34_EMP_pymnt_amt = edit(#_CSB34_EMP_pymnt_amt * 100,'000000000009')

  if $_Domestic-Transfer = 'Y' AND $_Block = 'N'
    !Check
    if $_Block-Header-Flag = 'N' and $_GPES_SEPA_ENABLED = 'N'
      do Write-CSB34-EFT-Block-Header-Record
      let $_Block-Header-Flag = 'Y'
    end-if
    if $_Block-Header-Flag = 'N' and $_GPES_SEPA_ENABLED = 'Y'
      do Write-SEPA-EFT-Block-Header-Record
      let $_Block-Header-Flag = 'Y'
    end-if
    If $_GPES_SEPA_ENABLED = 'N'
       do Write-CSB34-Domestic-Payment-Record
    End-if
    If $_GPES_SEPA_ENABLED = 'Y'
       do Write-SEPA-Domestic-Payment-Record
    End-if
  end-if

  if $_Domestic-Transfer = 'N' AND $_Block = 'T'
    if $_Block-Header-Flag = 'N' and $_GPES_SEPA_ENABLED = 'N'
      do Write-CSB34-EFT-Block-Header-Record
      let $_Block-Header-Flag = 'Y'
    end-if
    if $_Block-Header-Flag = 'N' and $_GPES_SEPA_ENABLED = 'Y'
      do Write-SEPA-EFT-Block-Header-Record
      let $_Block-Header-Flag = 'Y'
    end-if
    If $_GPES_SEPA_ENABLED = 'N'
      do Write-CSB34-International-Payment-Record
    End-if
    If $_GPES_SEPA_ENABLED = 'Y'
      do Write-SEPA-International-Payment-Record
    End-if
  end-if

  if $_Domestic-Transfer = 'S' AND $_Block = 'S' and $GPES_INCLUDE_SP = 'I' and $_GPES_SEPA_ENABLED = 'N'
    do Write-CSB34-Special-Payment-Record
  End-if
  if $_Domestic-Transfer = 'S' AND $_Block = 'S' and $GPES_INCLUDE_SP = 'I' and $_GPES_SEPA_ENABLED = 'Y'
    do Write-SEPA-Special-Payment-Record
  End-if
  let #EMP_TEMP = #EMP_TEMP - #TOPE
end-While

#debugd Show 'Last: '#EMP_TEMP

let #_CSB34_EMP_pymnt_amt = #EMP_TEMP

if $_Domestic-Transfer = 'Y' AND $_Block = 'N' and $_GPES_SEPA_ENABLED = 'N'
  do Write-CSB34-Domestic-Payment-Record
end-if
if $_Domestic-Transfer = 'N' AND $_Block = 'T' and $_GPES_SEPA_ENABLED = 'N'
  do Write-CSB34-International-Payment-Record
end-if
if $_Domestic-Transfer = 'S' AND $_Block = 'S' and $GPES_INCLUDE_SP = 'I' and $_GPES_SEPA_ENABLED = 'N'
  do Write-CSB34-Special-Payment-Record
end-if
!Check
if $_Domestic-Transfer = 'Y' AND $_Block = 'N' and $_GPES_SEPA_ENABLED = 'Y'
  do Write-SEPA-Domestic-Payment-Record
end-if
if $_Domestic-Transfer = 'N' AND $_Block = 'T' and $_GPES_SEPA_ENABLED = 'Y'
  do Write-SEPA-International-Payment-Record
end-if
if $_Domestic-Transfer = 'S' AND $_Block = 'S' and $GPES_INCLUDE_SP = 'I' and $_GPES_SEPA_ENABLED = 'Y'
  do Write-SEPA-Special-Payment-Record
end-if

Let $_line-splited = 'Y'
do Insert-LOG-Message (350)

#debugd Show 'Emp Amount: ' #_EMP_AMOUNT
#debugd Show 'Ceilling:   ' #TOPE
#debugd Show 'file amt:   ' #CSB34_EMP_pymnt_amt

end-procedure !split-amount


!************************************************************************
! Procedure Get-Country
!************************************************************************
begin-procedure Get-Country
#debug do Fin-Debug-Msg('Get-Country')

Let $Country-2Char = ''

let $sql-statement = 'GPESNK5.SQR,Get-Country,Select,PS_COUNTRY_TBL'
begin-select on-error=SQL-Error
COUNTRY_2CHAR
  Let $Country-2Char = &COUNTRY_2CHAR

FROM PS_COUNTRY_TBL

WHERE COUNTRY = $BANK_COUNTRY
end-select

#debugd show 'Bank code: ' $BANK_COUNTRY
#debugd show 'Bank country ISO: ' $Country-2Char

end-procedure ! Procedure Get-Country


!************************************************************************
! Procedure Get-Bank
!************************************************************************
begin-procedure Get-Bank
#debug do Fin-Debug-Msg('Get-Bank')

Let $Bank-SWIFT_BIC = ''

let $sql-statement = 'GPESNK5.SQR,Get-Bank,Select,PS_BANK_EC_TBL'
begin-select on-error=SQL-Error
BANK_ID_CODE
  Let $Bank-SWIFT_BIC = &BANK_ID_CODE

FROM PS_BANK_EC_TBL

WHERE COUNTRY = $BANK_COUNTRY
  AND BANK_CD = $BANK_CD
end-select

#debugd show 'Bank country:             ' $BANK_COUNTRY
#debugd show 'Bank code:                ' $BANK_CD
#debugd show 'Bank Identification Code: ' $Bank-SWIFT_BIC

end-procedure ! Procedure Get-Bank


!************************************************************************
! Procedure get-deduction-data
!************************************************************************
begin-procedure get-deduction-data
#debug do Fin-Debug-Msg('get-deduction-data')

let $BANK_COUNTRY       =  ''
let $BANK_CD            =  ''
let $BRANCH_CD          =  ''
let $CHECK_DIGIT        =  ''
let $ACCOUNT_ID         =  ''
let $IBAN               =  ''
let $BENEFICIARY        =  ''

let $sql-statement = 'GPESNK5.SQR,get-deduction-data,Select,PS_RECIPIENT'
begin-select on-error=SQL-Error
d.COUNTRY_CD
d.BANK_CD
d.BRANCH_EC_CD
d.CHECK_DIGIT
d.ACCOUNT_EC_ID
d.INTL_BANK_ACCT_NBR
d.ACCOUNT_NAME
   let $BANK_COUNTRY =  rtrim(&d.COUNTRY_CD, ' ')
   let $BANK_CD      =  rtrim(&d.BANK_CD ,' ')
   let $BRANCH_CD    =  rtrim(&d.BRANCH_EC_CD ,' ')
   let $CHECK_DIGIT  =  rtrim(&d.CHECK_DIGIT ,' ')
   let $ACCOUNT_ID   =  rtrim(&d.ACCOUNT_EC_ID ,' ')
   let $IBAN         =  rtrim(&d.INTL_BANK_ACCT_NBR,' ')
   let $BENEFICIARY  =  rtrim(&d.ACCOUNT_NAME,' ')

d.ADDR_FIELD1
d.ADDRESS1
d.ADDR_FIELD2
d.CITY
d.POSTAL
e.DESCR
   let $addr1   =  rtrim(&d.Addr_field1,' ')
   let $addr2   =  rtrim(&d.Address1,' ')
   let $addr3   =  rtrim(&d.Addr_field2,' ')
   let $CITY    =  rtrim(&d.CITY,' ')
   let $postal  =  rtrim(&d.postal,' ')
   let $state   =  rtrim(&e.descr,' ')

   If $Domestic-Transfer <> 'Y'
     do Get-Bank
   End-if

FROM PS_RECIPIENT d LEFT OUTER JOIN PS_STATE_NAMES_TBL e
           ON e.COUNTRY = d.COUNTRY
             AND e.STATE = d.STATE

WHERE d.EFF_STATUS = 'A'
  AND d.RECIPIENT_ID = $recipient
end-select

#debugd show 'Recipient ID: ' $recipient

#debugd show 'Recipient Bank Country:        ' $BANK_COUNTRY
#debugd show 'Recipient Bank Code:           ' $BANK_CD
#debugd show 'Recipient Bank Branch:         ' $BRANCH_CD
#debugd show 'Recipient Account Check Digit: ' $CHECK_DIGIT
#debugd show 'Recipient Account ID:          ' $ACCOUNT_ID
#debugd show 'Recipient IBAN:                ' $IBAN
#debugd show 'Account Name:                  ' $BENEFICIARY

#debugd show 'Address:     ' $addr1 ' ' $addr2 ' ' $addr3
#debugd show 'City:        ' $CITY
#debugd show 'Postal Code: ' $postal
#debugd show 'State:       ' $state

end-procedure ! Procedure get-deduction-data


!************************************************************************
! Procedure UPDATE-GP-PAYMENT
!************************************************************************
begin-procedure UPDATE-GP-PAYMENT
#debug do Fin-Debug-Msg('UPDATE-GP-PAYMENT')

Let $Payments = 'Y'


#Debugd show 'Cal Run Id    :  ' $CAL_RUN_ID
#Debugd show 'Emplid:          ' $EMPLID
#Debugd show 'Empl Rcd:        ' #EMPL_RCD
#Debugd show 'Pay Group:       ' $GP_PAYGROUP
#Debugd show 'Calendar:        ' $CAL_ID
#Debugd show 'Orig Cal Run Id: ' $ORIG_CAL_RUN_ID
#Debugd show 'Rslt Seg Num:    ' #RSLT_SEG_NUM
#Debugd show 'Pun Num:         ' #PIN_NUM
#Debugd show 'Instance:        ' #INSTANCE
#Debugd show 'Recipient Tag:   ' #RECIPIENT_TAG
#Debugd show 'Pay Entity:      ' $PAY_ENTITY
#Debugd show 'Source Bank:     ' $SOURCE_CD
#Debugd show 'Amount:          ' #EMP_AMOUNT

let $sql-statement = 'GPESNK5.SQR,UPDATE-GP-PAYMENT,Update,PS_GP_PAYMENT'
begin-SQL on-error=SQL-Error
UPDATE PS_GP_PAYMENT

SET PMT_STATUS = 'T'

WHERE CAL_RUN_ID = $CAL_RUN_ID
  AND EMPLID = $EMPLID
  AND EMPL_RCD = #EMPL_RCD
  AND GP_PAYGROUP = $GP_PAYGROUP
  AND CAL_ID = $CAL_ID
  AND ORIG_CAL_RUN_ID = $ORIG_CAL_RUN_ID
  AND RSLT_SEG_NUM = #RSLT_SEG_NUM
  AND PIN_NUM = #PIN_NUM
  AND INSTANCE = #INSTANCE
  AND RECIPIENT_TAG = #RECIPIENT_TAG
  AND PAY_ENTITY = $PAY_ENTITY
  AND SRC_BANK_ID = $SOURCE_CD
  AND PAYMENT_MTHD = 'T'
  AND PMT_STATUS = 'F'
  AND GP_PMT_AMT = #EMP_AMOUNT
end-SQL

end-procedure ! Procedure UPDATE-GP-PAYMENT


!************************************************************************
! Procedure Insert-GPES-PAYMENT-WK
!************************************************************************
begin-procedure  Insert-GPES-PAYMENT-WK
#debug do Fin-Debug-Msg('Insert-GPES-PAYMENT-WK')
Let $CAL_RUN_ID = nvl($CAL_RUN_ID, ' ')
Let $EMPLID = nvl($EMPLID, ' ')
Let $GP_PAYGROUP = nvl($GP_PAYGROUP, ' ')
Let $CAL_ID = nvl($CAL_ID, ' ')
Let $ORIG_CAL_RUN_ID = nvl($ORIG_CAL_RUN_ID, ' ')
Let $Recipient = nvl($Recipient, ' ')                           !RECIPIENT_ID
Let $RECIPIENT_NAME = nvl($RECIPIENT_NAME, ' ')
Let $EFF_STATUS = nvl($EFF_STATUS, ' ')
Let $PAY_ENTITY = nvl($PAY_ENTITY, ' ')
Let $Seg_End_Dt = nvl($Seg_End_Dt, ' ')
Let $PYMT_KEY1 = nvl($PYMT_KEY1, ' ')
Let $PYMT_KEY2 = nvl($PYMT_KEY2, ' ')
Let $PYMT_KEY3 = nvl($PYMT_KEY3, ' ')
Let $PYMT_KEY4 = nvl($PYMT_KEY4, ' ')
Let $BUSINESS_UNIT = nvl($BUSINESS_UNIT, ' ')
Let $RUN_TYPE = nvl($RUN_TYPE, ' ')
 !Let #ACCOUNT_ID_NO = nvl(&PMNT_WRK.ACCOUNT_ID, ' ')
Let $PMT_TYPE = nvl($PMT_TYPE, ' ')
Let $CURRENCY_CD = nvl($CURRENCY_CD, ' ')
Let $CURRENCY_CD2 = nvl($CURRENCY_CD2, ' ')
 !Let $PAYMENT_MTHD = nvl(&PMNT_WRK.PAYMENT_MTHD, ' ')
Let $DEBIT_DT = nvl($DEBIT_DT, ' ')
Let $SOURCE_CD = nvl($SOURCE_CD, ' ')                          !SOURCE_BNK_ID
 !Let $PMT_STATUS = nvl(&PMNT_WRK.PMT_STATUS, ' ')
let $CAL_PRD_ID = nvl($CAL_PRD_ID, ' ')
let $PYMT_ID = nvl($PYMT_ID, ' ')
 !Let $LASTUPDDTTM = nvl(&PMNT_WRK.LASTUPDDTTM, ' ')
 !Let $LASTUPDOPRID = nvl(&PMNT_WRK.LASTUPDOPRID, ' ')
Let $BANK_COUNTRY = nvl($BANK_COUNTRY, ' ')
Let $BANK_CD = nvl($BANK_CD, ' ')
Let $BRANCH_CD = nvl($BRANCH_CD, ' ')
Let $CHECK_DIGIT = nvl($CHECK_DIGIT, ' ')
Let $ACCOUNT_ID = nvl($ACCOUNT_ID, ' ')
Let $Bank-SWIFT_BIC = nvl($Bank-SWIFT_BIC, ' ')
Let $IBAN = nvl($IBAN, ' ')
Let $BENEFICIARY = nvl($BENEFICIARY, ' ')
Let $addr1 = nvl($addr1, ' ')
Let $addr2 = nvl($addr2, ' ')
Let $addr3 = nvl($addr3, ' ')
Let $CITY = nvl($CITY, ' ')
Let $postal = nvl($postal, ' ')
Let $state = nvl($state, ' ')
Let $Run_Type = nvl($Run_Type, ' ')
Let $company_cd = nvl($company_cd, ' ')

let $sql-statement = 'GPESNK5.SQR,Insert-GPES-PAYMENT-WK,Insert,PS_GPES_PAYMENT_WK'
begin-SQL on-error=SQL-Error
INSERT INTO PS_GPES_PAYMENT_WK (
PROCESS_INSTANCE,
CAL_RUN_ID,
EMPLID,
EMPL_RCD,
GP_PAYGROUP,
CAL_ID,
ORIG_CAL_RUN_ID,
RSLT_SEG_NUM,
PIN_NUM,
INSTANCE,
RECIPIENT_TAG,
RECIPIENT_ID,
RECIPIENT_NAME,
EFF_STATUS,
PAY_ENTITY,
SEG_END_DT,
PYMT_KEY1,
PYMT_KEY2,
PYMT_KEY3,
PYMT_KEY4,
BUSINESS_UNIT,
RUN_TYPE,
ACCOUNT_ID,
PMT_TYPE,
GP_PMT_AMT,
CURRENCY_CD,
CURRENCY_CD2,
PAYMENT_MTHD,
DEBIT_DT,
REVERSAL_IND,
SRC_BANK_ID,
PMT_STATUS,
CAL_PRD_ID,
PYMT_ID,
PYMT_NBR,
LASTUPDDTTM,
LASTUPDOPRID,
COUNTRY_CD,
BANK_CD,
BRANCH_EC_CD,
CHECK_DIGIT,
ACCOUNT_EC_ID,
BANK_ID_CODE,
INTL_BANK_ACCT_NBR,
ACCOUNT_NAME,
ADDR_FIELD1,
ADDRESS1,
ADDR_FIELD2,
CITY,
POSTAL,
STATE_DESCR1,
COMPANY)

VALUES (
#prcs_process_instance,
$CAL_RUN_ID,
$EMPLID,
#EMPL_RCD,
$GP_PAYGROUP,
$CAL_ID,
$ORIG_CAL_RUN_ID,
#RSLT_SEG_NUM,
#PIN_NUM,
#INSTANCE,
#RECIPIENT_TAG,
$recipient,
$RECIPIENT_NAME,
$EFF_STATUS,
$PAY_ENTITY,
$Seg_End_Dt,
$PYMT_KEY1,
$PYMT_KEY2,
$PYMT_KEY3,
$PYMT_KEY4,
$BUSINESS_UNIT,
$RUN_TYPE,
#ACCOUNT_ID_NO,
$PMT_TYPE,
#EMP_AMOUNT,
$CURRENCY_CD,
$CURRENCY_CD2,
'T',                  !$PAYMENT_MTHD
$DEBIT_DT,
#REVERSAL_IND,
$SOURCE_CD,
'T',                  !$PMT_STATUS
$CAL_PRD_ID,
$PYMT_ID,
#PYMT_NBR,
{DateTimeIn-Prefix}$SysDateTime{DateTimeIn-Suffix},      !$LASTUPDDTTM
$prcs_oprid,          !$LASTUPDOPRID
$BANK_COUNTRY,
$BANK_CD,
$BRANCH_CD,
$CHECK_DIGIT,
$ACCOUNT_ID,
$Bank-SWIFT_BIC,
$IBAN,
$BENEFICIARY,
$addr1,
$addr2,
$addr3,
$CITY,
$postal,
$state,
$company_cd)
end-SQL

end-procedure ! Procedure Insert-GPES-PAYMENT-WK


!************************************************************************
! Procedure Write-CSB34-Batch-Header-Record
!************************************************************************
begin-procedure  Write-CSB34-Batch-Header-Record
#debug do Fin-Debug-Msg('Write-CSB34-Batch-Header-Record')

!-- Intialize trailing records counters
 let #CSB34_tot_rec_cnt   =  0
 let #CSB34_tot_payee_cnt =  0
 let #CSB34_tot_pay_amt   =  0

!-- Set header variables......
 do Format-DateTime(&DEBIT_DT, $DEBIT_DT, {DEFCMP}, '', '')
 do Format-DateTime(&PYMT_DT, $PAY_DT, {DEFCMP}, '', '')
 let $CSB34_creation_dt      = {PS-SUBSTR}($DEBIT_DT,7,2)
                            || {PS-SUBSTR}($DEBIT_DT,5,2)
                            || {PS-SUBSTR}($DEBIT_DT,3,2)


 let $CSB34_pymnt_dt         = {PS-SUBSTR}($PAY_DT,7,2)
                            || {PS-SUBSTR}($PAY_DT,5,2)
                            || {PS-SUBSTR}($PAY_DT,3,2)

 let $CSB34_fiscal_cd        =  RPAD($CompanyFISCAL, 9, ' ')
 let $CSB34_bank_id          = {PS-SUBSTR}($BANK_CD_SRC, 1, 4)
 let $CSB34_branch_id        = {PS-SUBSTR}($BRANCH_CD_SRC, 1, 4)
 let $CSB34_bank_account_num = {PS-SUBSTR}($ACCOUNT_ID_SRC, 1, 10)
 let $CSB34_check_digit      = {PS-SUBSTR}($CHECK_DIGIT_SRC, 1, 2)
 let $CSB34_payer_name       = {PS-SUBSTR}($CompanyName, 1, 30)
 let $CSB34_payer_address1   = {PS-SUBSTR}($Compadd1, 1, 35)
 let $CSB34_payer_city       = {PS-SUBSTR}($Companycity, 1, 30)
 let $CSB34_payer_postal     = {PS-SUBSTR}($CompanyPOSTAL,1,5)

 let $CSB34_reg_code = '03'
 let $CSB34_opr_code = $GPES_OPER_CODE_H

!-- Batch Header Record: Payer Bank Details
 WRITE 100 from
   $CSB34_reg_code:2            !- Register Code
   $CSB34_opr_code:2            !- Operation Code
   $CSB34_fiscal_cd:9           !- Company ID (CIF)
   $GPES_SUFFIX:3               !- Suffix
   $fill:12                     !- Free
   '001'                        !- Data Code
   $CSB34_creation_dt:6         !- File creation date
   $CSB34_pymnt_dt:6            !- Payment Date
   $CSB34_bank_id:4             !- Bank Id Number (CISB)
   $CSB34_branch_id:4           !- Bank Office no         - Payers Bank
   $CSB34_check_digit:2         !- Bank Chenk Digit       - Payers Bank
   $CSB34_bank_account_num:10   !- Bank Acc/No            - Payers Bank
   '0'                          !- 0=EFT(no remittance),1=Cheque(Remittance)
   $fill:8                      !- Free
 let #csb34_tot_rec_cnt = #csb34_tot_rec_cnt + 1

!-- Batch Header Record: Payer Bank Name
 WRITE 100 from
   $CSB34_reg_code:2            !- Register Code
   $CSB34_opr_code:2            !- Operation Code
   $CSB34_fiscal_cd:9           !- Company ID (CIF)
   $GPES_SUFFIX:3               !- Suffix
   $fill:12                     !- Free
   '002'                        !- Data Code
   $CSB34_payer_name:36         !- Name
   $fill:5                      !- Free
 let #CSB34_tot_rec_cnt = #CSB34_tot_rec_cnt + 1

!-- Batch Header Record: Payer Bank Address Line 1
 WRITE 100 from
   $CSB34_reg_code:2            !- Register Code
   $CSB34_opr_code:2            !- Operation Code
   $CSB34_fiscal_cd:9           !- Company ID (CIF)
   $GPES_SUFFIX:3               !- Suffix
   $fill:12                     !- Free
   '003'                        !- Data Code
   $CSB34_payer_address1:36     !- Address Line 1
   $fill:5                      !- Free
 let #CSB34_tot_rec_cnt = #CSB34_tot_rec_cnt + 1

!-- Batch Header Record: Payer Bank Address City
 WRITE 100 from
   $CSB34_reg_code:2            !- Register Code
   $CSB34_opr_code:2            !- Operation Code
   $CSB34_fiscal_cd:9           !- Company ID (CIF)
   $GPES_SUFFIX:3               !- Suffix
   $fill:12                     !- Free
   '004'                        !- Data Code
   $CSB34_payer_postal:5        !- Postal
   $CSB34_payer_city:31         !- City
   $fill:5                      !- Free
let #csb34_tot_rec_cnt = #csb34_tot_rec_cnt + 1

End-Procedure ! Procedure Write-CSB34-Batch-Header-Record

!************************************************************************
! Procedure Write-SEPA-Batch-Header-Record
!************************************************************************
begin-procedure  Write-SEPA-Batch-Header-Record
#debug do Fin-Debug-Msg('Write-SEPA-Batch-Header-Record')

!-- Intialize trailing records counters
 let #CSB34_tot_rec_cnt   =  0
 let #CSB34_tot_payee_cnt =  0
 let #CSB34_tot_pay_amt   =  0

!-- Set header variables......
 do Format-DateTime(&DEBIT_DT, $DEBIT_DT, {DEFCMP}, '', '')
 do Format-DateTime(&PYMT_DT, $PAY_DT, {DEFCMP}, '', '')

 let $CSB34_creation_dt      = {PS-SUBSTR}($DEBIT_DT,1,4)
                            || {PS-SUBSTR}($DEBIT_DT,5,2)
                            || {PS-SUBSTR}($DEBIT_DT,7,2)


 let $CSB34_pymnt_dt         = {PS-SUBSTR}($PAY_DT,1,4)
                            || {PS-SUBSTR}($PAY_DT,5,2)
                            || {PS-SUBSTR}($PAY_DT,7,2)

 let $CSB34_fiscal_cd        =  RPAD($CompanyFISCAL, 9, ' ')
 let $CSB34_bank_id          = {PS-SUBSTR}($BANK_CD_SRC, 1, 4)
 let $CSB34_branch_id        = {PS-SUBSTR}($BRANCH_CD_SRC, 1, 4)
 let $CSB34_bank_account_num = {PS-SUBSTR}($ACCOUNT_ID_SRC, 1, 10)
 let $CSB34_check_digit      = {PS-SUBSTR}($CHECK_DIGIT_SRC, 1, 2)
 let $CSB34_payer_name       = {PS-SUBSTR}($CompanyName, 1, 30)
 let $CSB34_payer_address1   = {PS-SUBSTR}($Compadd1, 1, 35)
 let $CSB34_payer_city       = {PS-SUBSTR}($Companycity, 1, 30)
 let $CSB34_payer_postal     = {PS-SUBSTR}($CompanyPOSTAL,1,5)

 let $CSB34_reg_code = '01'
 let $CSB34_opr_code = $GPES_OPER_CODE_H

!-- Batch Header Record: Payer Bank Details
 WRITE 200 from
   $CSB34_reg_code:2            !- Register Code
   $CSB34_opr_code:3            !- Operation Code
   $GPES_SEPA_VERSION:5         !- Version Number
   '001'                        !- Data Code
   $CSB34_fiscal_cd:9           !- Company ID (CIF)
   $GPES_SUFFIX:3               !- Suffix
   $CSB34_creation_dt:8         !- File creation date
   $CSB34_pymnt_dt:8            !- Payment Date
   $BANK_ACCT_TYPE_SRC:1        !- A=IBAN, B=CCC
   $BANK_ACCT_SRC:34
   '0'                          !- 0=EFT(no remittance),1=Cheque(Remittance)
   $CSB34_payer_name:70         !- Name
   $fill:453                    !- Free
 let #csb34_tot_rec_cnt = #csb34_tot_rec_cnt + 1


End-Procedure ! Procedure Write-SEPA-Batch-Header-Record


!************************************************************************
! Procedure Write-CSB34-Domestic-Payment-Record
!************************************************************************
begin-procedure  Write-CSB34-Domestic-Payment-Record
#debug do Fin-Debug-Msg('Write-CSB34-Domestic-Payment-Record')

let $CSB34_reg_code = '06'
let $CSB34_opr_code = $GPES_OPER_CODE_1

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 100,'000000000009')

#debugd Show 'fICHERO0 '$CSB34_EMP_pymnt_amt

!-- Payees Bank info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '010'                           !- Data Code
  $CSB34_EMP_pymnt_amt:12         !- Amount
  $CSB34_EMP_bank_id:4            !- Bank Id Number (CISB)
  $CSB34_EMP_branch_id:4          !- Bank Office no         - Payees Bank
  $CSB34_EMP_check_digit:2        !- Bank Acc Control Digits- Payees Bank
  $CSB34_EMP_bank_account_num:10  !- Bank Acc/No            - Payees Bank
  '1'                             !- 1=Payer, 2=Payee
  '1'                             !- 1=Salary,8=Pension,9=Other
  '1'                             !- 1=Yes, 2=No
  $fill:6                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

#debugd show 'EmpleadoN:  ' #CSB34_EMP_pymnt_amt
#debugd show 'Empleado1N: ' $CSB34_EMP_pymnt_amt
#debugd Show 'bloqueN:    ' #CSB34_Block_pay_amt

!-- Payees Name info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '011'                           !- Data Code
  $CSB34_EMP_name:36              !- Payees name
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Address Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '012'                           !- Data Code
  $CSB34_emp_address1:36          !- Address Line 1
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Zip Code/City Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '014'                           !- Data Code
  $CSB34_emp_postal:5             !- Postal code (Zip Code)
  $CSB34_emp_city:31              !- City
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees state Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '015'                           !- Data Code
  $CSB34_emp_state:36             !- Postal code (Zip Code)
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

End-Procedure ! Procedure Write-CSB34-Domestic-Payment-Record

!************************************************************************
! Procedure Write-SEPA-Domestic-Payment-Record
!************************************************************************
begin-procedure  Write-SEPA-Domestic-Payment-Record
#debug do Fin-Debug-Msg('Write-SEPA-Domestic-Payment-Record')

let $CSB34_reg_code = '03'
let $CSB34_opr_code = $GPES_OPER_CODE_1

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 1000,'000000000009')
#debugd Show 'FICHERO  '$CSB34_EMP_pymnt_amt

let $BANK_ACCT = $IBAN
let $BANK_ACCT_TYPE = 'A'

if $IBAN = ''
   let $BANK_ACCT =  $BANK_CD || $BRANCH_CD || $CHECK_DIGIT || $ACCOUNT_ID
   let $BANK_ACCT_TYPE = 'B'
end-if

!-- Payees Bank info
WRITE 200 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:3               !- EFT Payment Type
  $GPES_SEPA_VERSION:5            !- Version Number
  !$CSB34_fiscal_cd:9              !- Company ID (CIF)
  '002'
  $GPES_SUFFIX:35                 !- Suffix
  $BANK_ACCT_TYPE:1               ! A=IBAN, B=CCC
  $BANK_ACCT:34
  $CSB34_EMP_pymnt_amt:11         !- Amount
  '3'                             !- Cost Code
  $Bank-SWIFT_BIC:11              !- BIC
  $CSB34_EMP_name:70              !- Name
  $fill:317
  'SALA':4
  $fill:103                       !- Free

let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

#debugd show 'EmpleadoN:  ' #CSB34_EMP_pymnt_amt
#debugd show 'Empleado1N: ' $CSB34_EMP_pymnt_amt
#debugd Show 'bloqueN:    ' #CSB34_Block_pay_amt


End-Procedure ! Procedure Write-SEPA-Domestic-Payment-Record


!************************************************************************
! Procedure Write-CSB34-International-Payment-Record
!************************************************************************
begin-procedure  Write-CSB34-International-Payment-Record
#debug do Fin-Debug-Msg('Write-CSB34-International-Payment-Record')

If rtrim($IBAN, ' ') = ''
  Let $IBAN = $Country-2Char || $ACCOUNT_ID
End-If

#Debugd show 'Int''l transfer. IBAN Acct is blank. IBAN Acct changed to bank acct: ' $IBAN


let $CSB34_reg_code = '06'
let $CSB34_opr_code = $GPES_OPER_CODE_2

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 100,'000000000009')

#debugd Show 'fICHERO0 '$CSB34_EMP_pymnt_amt

!-- Payees Bank info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '033'                           !- Data Code
  $IBAN:34                       !- IBAN
!  $CSB34_EMP_bank_id:4            !- Bank Id Number (CISB)
!  $CSB34_EMP_branch_id:4          !- Bank Office no         - Payees Bank
!  $CSB34_EMP_check_digit:2        !- Bank Acc Control Digits- Payees Bank
!  $CSB34_EMP_bank_account_num:10  !- Bank Acc/No            - Payees Bank
!  '1'                             !- 1=Salary,8=Pension,9=Other
  '2'                             !- 1=Yes, 2=No
  $fill:6                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1

!-- Payees Bank info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '034'                           !- Data Code
  $CSB34_EMP_pymnt_amt:12         !- Amount
  '1'                             !- Expenses code: 1=Expenses paid by Payer
                                  !-                2=Expenses paid by Payee
                                  !-                3=Expenses shared by both
  $Country-2Char:2                !- Payee Country ISO Code
  $fill:6                         !- Free
  $Bank-SWIFT_BIC:11              !- Target entity code
  $fill:9                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

#debugd show 'Empleado:  ' #CSB34_EMP_pymnt_amt
#debugd show 'Empleado1: ' $CSB34_EMP_pymnt_amt
#debugd Show 'bloqueI:   ' #CSB34_Block_pay_amt

!-- Payees Name info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '035'                           !- Data Code
  $CSB34_EMP_name:36              !- Payees name
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Address Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '036'                           !- Data Code
  $CSB34_emp_address1:36          !- Address Line 1
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Zip Code/City Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '038'                           !- Data Code
  $CSB34_emp_postal:5             !- Postal code (Zip Code)
  $CSB34_emp_city:31              !- City
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees state Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '039'                           !- Data Code
  $BANK_COUNTRY:36                !- Postal code (Zip Code)
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

End-Procedure ! Procedure Write-CSB34-International-Payment-Record

!************************************************************************
! Procedure Write-SEPA-International-Payment-Record
!************************************************************************
begin-procedure  Write-SEPA-International-Payment-Record
#debug do Fin-Debug-Msg('Write-SEPA-International-Payment-Record')

let $CSB34_reg_code = '03'
let $CSB34_opr_code = $GPES_OPER_CODE_2

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 1000,'000000000009')
#debugd Show 'fICHERO0 '$CSB34_EMP_pymnt_amt

let $BANK_ACCT = $IBAN
let $BANK_ACCT_TYPE = 'A'

if $IBAN = ''
   let $BANK_ACCT =  $BANK_CD || $BRANCH_CD || $CHECK_DIGIT || $ACCOUNT_ID
   let $BANK_ACCT_TYPE = 'B'
end-if

!-- Payees Bank info
!-- Payees Bank info
WRITE 200 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:3               !- EFT Payment Type
  $GPES_SEPA_VERSION:5            !- Version Number
  '006'
  !$CSB34_fiscal_cd:9              !- Company ID (CIF)
  !$GPES_SUFFIX:3                  !- Suffix
  $fill:35
  $BANK_ACCT_TYPE:1               ! A=IBAN, B=CCC
  $BANK_ACCT:34
  $CSB34_EMP_pymnt_amt:11         !- Amount
  '3'
  $Bank-SWIFT_BIC:11              !- Target entity code
  $CSB34_EMP_name:35              !- Payees name
  $fill:459                       !- Free

let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

End-Procedure ! Procedure Write-SEPA-International-Payment-Record


!************************************************************************
! Procedure Write-CSB34-Special-Payment-Record
!************************************************************************
begin-procedure  Write-CSB34-Special-Payment-Record
#debug do Fin-Debug-Msg('Write-CSB34-Special-Payment-Record')

If rtrim($IBAN, ' ') = ''
  Let $IBAN = $Country-2Char || $ACCOUNT_ID
End-If

#Debugd show 'Int''l transfer. IBAN Acct is blank. IBAN Acct changed to bank acct: ' $IBAN


let $CSB34_reg_code      = '06'
let $CSB34_opr_code      = $GPES_OPER_CODE_3

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 100,'000000000009')

!-- Payees Bank info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '043'                           !- Data Code
  $IBAN:34                        !- IBAN
!  $CSB34_EMP_bank_id:4            !- Bank Id Number (CISB)
!  $CSB34_EMP_branch_id:4          !- Bank Office no         - Payees Bank
!  $CSB34_EMP_check_digit:2        !- Bank Acc Control Digits- Payees Bank
!  $CSB34_EMP_bank_account_num:10  !- Bank Acc/No            - Payees Bank
!  '1'                             !- 1=Salary,8=Pension,9=Other
  '2'                             !- 1=Yes, 2=No
  $fill:6                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1

!-- Payees Bank info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '044'                           !- Data Code
  $CSB34_EMP_pymnt_amt:12         !- Amount
  '1'                             !- Expenses code: 1=Expenses paid by Payer
                                  !-                2=Expenses paid by Payee
                                  !-                3=Expenses shared by both
  $Country-2Char:2                !- Payee Country ISO Code
  $fill:6                         !- Free
  $Bank-SWIFT_BIC:11                 !- Target entity code
  $fill:9                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

!-- Payees Name info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '045'                           !- Data Code
  $CSB34_EMP_name:36              !- Payees name
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Address Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '046'                           !- Data Code
  $CSB34_emp_address1:36          !- Address Line 1
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees Zip Code/City Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '048'                           !- Data Code
  $CSB34_emp_postal:5             !- Postal code (Zip Code)
  $CSB34_emp_city:31              !- City
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payees state Info
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '049'                           !- Data Code
  $BANK_COUNTRY:36                !- Postal code (Zip Code)
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

!-- Payment description
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '053'                           !- Data Code
  'Pago de Nomina':36             !- Description International payment
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1



WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '054'                           !- Data Code
  '              ':36             !- Description International payment
  $fill:5                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1





!--
WRITE 100 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:2               !- EFT Payment Type
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $GPES_SUFFIX:3                  !- Suffix
  $CSB34_pymnt_id:12              !- Payment ID
  '055'                           !- Data Code
  '02':2                          !- Payment Type 01=Merchandise, 02=No-Merchandise
  $fill:6                         !- Payment Statistical code
  $Country-2Char:2                !- Payee Country ISO Code
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  $fill:8                         !- NOF
  $fill:12                        !- ISIN Code
  $fill:2                         !- Free
let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1

End-Procedure ! Procedure Write-CSB34-Special-Payment-Record

!************************************************************************
! Procedure Write-SEPA-Special-Payment-Record
!************************************************************************
begin-procedure  Write-SEPA-Special-Payment-Record
#debug do Fin-Debug-Msg('Write-SEPA-Special-Payment-Record')
let $CSB34_reg_code = '03'
let $CSB34_opr_code = $GPES_OPER_CODE_1

let $CSB34_EMP_pymnt_amt = edit(#CSB34_EMP_pymnt_amt * 1000,'000000000009')

#debugd Show 'FICHERO  '$CSB34_EMP_pymnt_amt

!-- Payees Bank info
WRITE 200 from
  $CSB34_reg_code:2               !- Registered Code
  $CSB34_opr_code:3               !- EFT Payment Type
  $GPES_SEPA_VERSION:5            !- Version Number
  $CSB34_fiscal_cd:9              !- Company ID (CIF)
  '002'
  $GPES_SUFFIX:35                 !- Suffix
  'A'                             !- A = IBAN
  $IBAN:34                        !- IBAN
  $CSB34_EMP_pymnt_amt:11         !- Amount
  '3'                             !- Cost Code
  $Bank-SWIFT_BIC:11              !- BIC
  $CSB34_EMP_name:70              !- Name
  $fill:415                       !- Free

let #CSB34_Block_rec_cnt   = #csb34_Block_rec_cnt + 1
let #CSB34_Block_payee_cnt = #csb34_Block_payee_cnt + 1
let #CSB34_Block_pay_amt   = #csb34_Block_pay_amt + #CSB34_EMP_pymnt_amt

#debugd show 'EmpleadoN:  ' #CSB34_EMP_pymnt_amt
#debugd show 'Empleado1N: ' $CSB34_EMP_pymnt_amt
#debugd Show 'bloqueN:    ' #CSB34_Block_pay_amt

End-Procedure ! Procedure Write-SEPA-Special-Payment-Record


!************************************************************************
! Procedure Write-CSB34-EFT-Block-Trailer-Record
!************************************************************************
begin-procedure Write-CSB34-EFT-Block-Trailer-Record
#debug do Fin-Debug-Msg('Write-CSB34-EFT-Block-Trailer-Record')

let $CSB34_reg_code = '08'
Evaluate $Domestic-Transfer
When = 'Y'
  let $CSB34_opr_code = $GPES_OPER_CODE_1
When = 'N'
  let $CSB34_opr_code = $GPES_OPER_CODE_2
When = 'S'
  let $CSB34_opr_code = $GPES_OPER_CODE_3
End-Evaluate

let $CSB34_Block_payees  =  edit(#CSB34_Block_payee_cnt,'00000009')
let #CSB34_Block_rec_cnt =  #CSB34_Block_rec_cnt + 1
let $CSB34_Block_records =  edit(#CSB34_Block_rec_cnt,'0000000009')
let $CSB34_Block_amt     =  edit(#CSB34_Block_pay_amt * 100,'000000000009')

#debugd Show 'Payment date YYYYMMDD '$PAY_DT
#debugd Show '$CSB34_Block_payees '$CSB34_Block_payees
#debugd Show '$CSB34_Block_records '$CSB34_Block_records
#debugd Show '$CSB34_Block_amt '$CSB34_Block_amt
#debugd show 'bloqueT '#CSB34_Block_pay_amt

let #CSB34_tot_pay_amt = #CSB34_tot_pay_amt + #CSB34_Block_pay_amt

WRITE 100 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:2            !- Operation Code
  $CSB34_fiscal_cd:9           !- Company ID (CIF)
  $GPES_SUFFIX:3               !- Suffix
  $fill:12                     !- Free
  $fill:3                      !- Free
  $CSB34_Block_amt:12          !- Total Amount
  $CSB34_Block_payees:8        !- Total Number of Payees
  $CSB34_Block_records:10      !- Total Number of transactions
  $fill:6                      !- Free
  $fill:5                      !- Free

let #CSB34_Tot_payee_cnt =  #CSB34_Tot_payee_cnt + #CSB34_Block_payee_cnt
let #CSB34_Tot_rec_cnt   =  #CSB34_Tot_rec_cnt + #CSB34_Block_rec_cnt
let #CSB34_block_pay_amt =  0

#debug Show 'total ' #CSB34_tot_pay_amt

End-Procedure ! Procedure Write-CSB34-EFT-Block-Trailer-Record

!************************************************************************
! Procedure Write-SEPA-EFT-Block-Trailer-Record
!************************************************************************
begin-procedure Write-SEPA-EFT-Block-Trailer-Record
#debug do Fin-Debug-Msg('Write-SEPA-EFT-Block-Trailer-Record')

let $CSB34_reg_code = '04'
Evaluate $Domestic-Transfer
When = 'Y'
  let $CSB34_opr_code = $GPES_OPER_CODE_1
When = 'N'
  let $CSB34_opr_code = $GPES_OPER_CODE_2
When = 'S'
  let $CSB34_opr_code = $GPES_OPER_CODE_3
End-Evaluate

let $CSB34_Block_payees  =  edit(#CSB34_Block_payee_cnt,'00000009')
let #CSB34_Block_rec_cnt =  #CSB34_Block_rec_cnt + 1
let $CSB34_Block_records =  edit(#CSB34_Block_rec_cnt,'0000000009')
let $CSB34_Block_amt     =  edit(#CSB34_Block_pay_amt * 100,'00000000000000009')

#debugd Show 'Payment date YYYYMMDD '$PAY_DT
#debugd Show '$CSB34_Block_payees '$CSB34_Block_payees
#debugd Show '$CSB34_Block_records '$CSB34_Block_records
#debugd Show '$CSB34_Block_amt '$CSB34_Block_amt
#debugd show 'bloqueT '#CSB34_Block_pay_amt

let #CSB34_tot_pay_amt = #CSB34_tot_pay_amt + #CSB34_Block_pay_amt

WRITE 200 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:3            !- Operation Code
  $CSB34_Block_amt:17          !- Total Amount
  $CSB34_Block_payees:8        !- Total Number of Payees
  $CSB34_Block_records:10      !- Total Number of transactions
  $fill:560                    !- Free


let #CSB34_Tot_payee_cnt =  #CSB34_Tot_payee_cnt + #CSB34_Block_payee_cnt
let #CSB34_Tot_rec_cnt   =  #CSB34_Tot_rec_cnt + #CSB34_Block_rec_cnt
let #CSB34_block_pay_amt =  0

#debug Show 'total ' #CSB34_tot_pay_amt

End-Procedure ! Procedure Write-SEPA-EFT-Block-Trailer-Record

!************************************************************************
! Procedure Write-CSB34-Batch-Trailer-Record
!************************************************************************
begin-procedure Write-CSB34-Batch-Trailer-Record
#debug do Fin-Debug-Msg('Write-CSB34-Batch-Trailer-Record')

let $CSB34_reg_code = '09'
let $CSB34_opr_code = $GPES_OPER_CODE_H

let $CSB34_tot_payees  =  edit(#CSB34_tot_payee_cnt,'00000009')
let #CSB34_tot_rec_cnt =  #CSB34_tot_rec_cnt + 1
let $CSB34_tot_records =  edit(#CSB34_tot_rec_cnt,'0000000009')
let $CSB34_tot_amt     =  edit(#CSB34_tot_pay_amt * 100,'000000000009')

#debug Show 'Payment date YYYYMMDD ' $PAY_DT
#debug Show '$CSB34_tot_payees     ' $CSB34_tot_payees
#debug Show '$CSB34_tot_records    ' $CSB34_tot_records
#debug Show '$CSB34_tot_amt        ' $CSB34_tot_amt
#debug Show '#CSB34_tot_amt        ' #CSB34_tot_pay_amt

WRITE 100 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:2            !- Operation Code
  $CSB34_fiscal_cd:9           !- Company ID (CIF)
  $GPES_SUFFIX:3               !- Suffix
  $fill:12                     !- Free
  $fill:3                      !- Free
  $CSB34_tot_amt:12            !- Total Amount
  $CSB34_tot_payees:8          !- Total Number of Payees
  $CSB34_tot_records:10        !- Total Number of transactions
  $fill:6                      !- Free
  $fill:5                      !- Free

End-Procedure ! Procedure Write-CSB34-Batch-Trailer-Record

!************************************************************************
! Procedure Write-SEPA-Batch-Trailer-Record
!************************************************************************
begin-procedure Write-SEPA-Batch-Trailer-Record
#debug do Fin-Debug-Msg('Write-SEPA-Batch-Trailer-Record')

let $CSB34_reg_code = '99'
let $CSB34_opr_code = $GPES_OPER_CODE_H

let $CSB34_tot_payees  =  edit(#CSB34_tot_payee_cnt,'00000009')
let #CSB34_tot_rec_cnt =  #CSB34_tot_rec_cnt + 1
let $CSB34_tot_records =  edit(#CSB34_tot_rec_cnt,'0000000009')
let $CSB34_tot_amt     =  edit(#CSB34_tot_pay_amt * 100,'00000000000000009')

#debug Show 'Payment date YYYYMMDD ' $PAY_DT
#debug Show '$CSB34_tot_payees     ' $CSB34_tot_payees
#debug Show '$CSB34_tot_records    ' $CSB34_tot_records
#debug Show '$CSB34_tot_amt        ' $CSB34_tot_amt
#debug Show '#CSB34_tot_amt        ' #CSB34_tot_pay_amt

WRITE 200 from
  $CSB34_reg_code:2            !- Register Code
  $CSB34_opr_code:3            !- Operation Code
  $CSB34_tot_amt:17            !- Total Amount
  $CSB34_tot_payees:8          !- Total Number of Payees
  $CSB34_tot_records:10        !- Total Number of transactions
  $fill:560                    !- Free


End-Procedure !Write-SEPA-Batch-Trailer-Record


!************************************************************************
! Procedure Delete-Temp-Data
!************************************************************************
begin-procedure Delete-Temp-Data
#debug do Fin-Debug-Msg('Delete-Temp-Data')

let $sql-statement = 'GPESNK5.SQR,Delete-Temp-Data,Delete,PS_GPES_PAYMENT_WK'
begin-sql ON-ERROR=sql-error
DELETE FROM PS_GPES_PAYMENT_WK
WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Delete,PS_GPES_BNK5_TMP'
begin-sql on-error=SQL-Error
DELETE FROM PS_GPES_BNK5_TMP
WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

let $sql-statement = 'GPESNK5.SQR,Prepare-Payment-Data,Delete,PS_GPES_BNK50_TMP'
begin-sql on-error=SQL-Error
DELETE FROM PS_GPES_BNK50_TMP
WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

End-Procedure ! Procedure Delete-Temp-Data


!************************************************************************
! Procedure Insert-LOG-Message
!************************************************************************
begin-procedure Insert-LOG-Message (#msg_number)
#debug do Fin-Debug-Msg('Insert-LOG-Message')
let #messege_seq = #messege_seq + 1

#debugd Show 'Run_CNTL '$_prcs_run_cntl_id
#debugd Show 'PI ' $_prcs_process_instance
#debugd Show 'Mess Seq ' #messege_seq
#debugd Show 'Empl_ID ' $_emplid
#debugd Show 'Empl RCD ' #_empl_rc
#debugd Show 'Report Time ' $_SysDateTime
#debugd Show 'MSG Number ' #msg_number
#debugd Show 'File ' $_GPES_FILENAME

let $sql-statement = 'Procedure Insert-LOG-Message'
begin-sql ON-ERROR=sql-error
  INSERT INTO PS_GPES_FILE_MSG
    (GPES_FILENAME,
    RUN_CNTL_ID,
    PROCESS_INSTANCE,
    MESSAGE_SEQ,
    EMPLID,
    EMPL_RCD,
    DATETIME_STAMP,
    MESSAGE_SET_NBR,
    MESSAGE_NBR)
    VALUES
   ($_GPES_FILENAME,
    $_prcs_run_cntl_id,
    #_prcs_process_instance,
    #messege_seq,
    $_emplid,
    #empl_rc,
    {DATETIMEIN-PREFIX}$_SysDateTime{DATETIMEIN-SUFFIX},
    17175,
    #msg_number)

end-sql

end-procedure !Insert-LOG-Message


!************************************************************************
! Procedure log-max-none
!************************************************************************
!begin-procedure log-max-none
!#debug do Fin-Debug-Msg('log-max')
!
!let $sql-statement = 'GPESNK5.SQR,log-max,Select,PS_GP_PAYMENT2'
!begin-select on-error=SQL-Error
!PM.EMPLID
!PM.EMPL_RCD
!PM.GP_PMT_AMT
!
!  let $EMPLID     = rtrim(&PM.EMPLID ,' ')
!  let #EMPL_RCD   = &PM.EMPL_RCD
!  let #GP_PMT_AMT = &PM.GP_PMT_AMT
!
!  if #GP_PMT_AMT < 0
!    do Insert-LOG-Message(357)
!  else
!    IF #GP_PMT_AMT > #GPES_MAX_AMOUNT
!      do Insert-LOG-Message(351)
!    end-if
!  end-if
!
!FROM !PS_JOB JO
!     PS_GP_PAYMENT PM
!   ! ,PS_GP_CALENDAR CA
!    ,PS_FAST_SQR_SEC_VW FAST
!
!WHERE !JO.EMPLID = PM.EMPLID
! ! AND JO.EMPL_RCD = PM.EMPL_RCD
! ! AND JO.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
! !                  WHERE EMPLID = JO.EMPLID
! !                    AND EMPL_RCD = JO.EMPL_RCD
! !                    AND EFFDT <= SEG_END_DT)
! ! AND JO.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
! !                   WHERE EMPLID = JO.EMPLID
! !                     AND EMPL_RCD = JO.EMPL_RCD
! !                     AND EFFDT = JO.EFFDT)
! ! AND JO.COMPANY = $COMPANY_Cd
!      PM.CAL_RUN_ID = $CAL_RUN_ID
!  AND PM.PAY_ENTITY = $PAY_ENTITY
!  AND PM.SRC_BANK_ID = $SOURCE_CD
!  AND PM.PMT_STATUS = $PMT_STATUS
!  AND PM.PAYMENT_MTHD = 'T'
!  !AND PM.GP_PMT_AMT > #GPES_MAX_AMOUNT
!  !AND CA.GP_PAYGROUP = PM.GP_PAYGROUP
!  !AND CA.CAL_ID = PM.CAL_ID
!  !AND PM.GP_PMT_AMT > 0
!  !AND PM.CURRENCY_CD = 'EUR'
!  AND FAST.OPRID = $prcs_oprid
!  AND FAST.EMPLID = PM.EMPLID
!  AND FAST.EMPL_RCD = PM.EMPL_RCD
!ORDER BY PM.EMPLID
!End-select
!
!if $Payments = 'N'
!  let $EMPLID = 'ERROR'
!  do Insert-LOG-Message(356)
!end-if
!
!End-Procedure
!
!
!************************************************************************
! Procedure Fin-Debug-Msg
!************************************************************************
begin-procedure Fin-Debug-Msg($procedure_name)
  display ' '
  display '----------------------------------'
  display $procedure_name
#debugt date-time () {Native-DateTime} &SysDateTime
#debugt move &SysDateTime to $SysDateTime
#debugt show 'TIMING, ' $procedure_name ', ' $SysDateTime
  display ' '
end-procedure ! Procedure Fin-Debug-Msg




#include 'stdapi.sqc'    !Routines to update run status
!#include 'hrrnctl1.sqc'  ! GET RUN CONTROL PARAMETER VALUES
!#include 'hrgetval.sqc'  ! GET VALUES MASK ROUTINES

#Include 'sqlerr.sqc'
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'
#Include 'datemath.sqc'
!#Include 'prcsapi.sqc'


