!***********************************************************************
! GPCHUT06.SQC:  Run Control Values and Sort Order Parameters          *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  27523104                                            !
!                                                                      *
!***********************************************************************

#include 'timemath.sqc'  !get-current-datetime procedure


begin-procedure Get-Report-Parameters
#debug show 'In Get-Report-Parameters'

#debug show 'Before GPCH_RC_PAYROLL $prcs_oprid = ' $prcs_oprid ' $prcs_run_cntl_id = ' $prcs_run_cntl_id

begin-SELECT on-error=give_warning

GPCH_RUN_CNTL.OPRID
GPCH_RUN_CNTL.RUN_CNTL_ID
GPCH_RUN_CNTL.LANGUAGE_CD
GPCH_RUN_CNTL.GPCH_CONTEXT_LANG
GPCH_RUN_CNTL.RUN_ID
GPCH_RUN_CNTL.SETID
GPCH_RUN_CNTL.EMPLID
GPCH_RUN_CNTL.EMPL_RCD
GPCH_RUN_CNTL.PAY_ENTITY
GPCH_RUN_CNTL.COMPANY
GPCH_RUN_CNTL.GP_PAYGROUP
GPCH_RUN_CNTL.LOCATION
GPCH_RUN_CNTL.DEPTID
GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT
GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR
GPCH_RUN_CNTL.GPCH_RC_FROM_DT
GPCH_RUN_CNTL.GPCH_RC_TO_DT
GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO
GPCH_RUN_CNTL.GPCH_RC_AL01_S1
GPCH_RUN_CNTL.GPCH_RC_AL01_S2
GPCH_RUN_CNTL.GPCH_RC_AL01_S3
GPCH_RUN_CNTL.CURRENCY_CD
GPCH_RUN_CNTL.NAME
GPCH_RUN_CNTL.DISKETTE_TYPE
GPCH_RUN_CNTL.GPCH_AL_RUN_DIR
GPCH_RUN_CNTL.BA_CD
GPCH_RUN_CNTL.GPCH_TX_NUMBER
GPCH_RUN_CNTL.SRC_BANK_ID
GPCH_RUN_CNTL.CAL_RUN_ID
GPCH_RUN_CNTL.GPCH_RC_REPORTNAME
GPCH_RUN_CNTL.GPCH_TX_TARIF
GPCH_RUN_CNTL.GPCH_ER_TRF_AREA
GPCH_RUN_CNTL.GPCH_RC_PRN_COMP
GPCH_RUN_CNTL.GPCH_BK_XFER_NBR
GPCH_RUN_CNTL.DEP_SCHED_ID
GPCH_RUN_CNTL.GPCH_TX_CANTON
GPCH_RUN_CNTL.GPCH_TX_CANTON_SRT
GPCH_RUN_CNTL.GPCH_RC_DESCR1
GPCH_RUN_CNTL.GPCH_RC_DESCR2
GPCH_RUN_CNTL.GPCH_RC_PRT_TYPE
GPCH_RUN_CNTL.APPL_JRNL_ID
GPCH_RUN_CNTL.BUSINESS_UNIT
GPCH_RUN_CNTL.BUSINESS_UNIT_GL
GPCH_RUN_CNTL.GPCH_RC_PRT_SIGN
GPCH_RUN_CNTL.ACCOUNTING_DT
GPCH_RUN_CNTL.GPCH_RC_SERIALNR
GPCH_RUN_CNTL.GPCH_RC_ADJUST_DT
GPCH_RUN_CNTL.GPCH_RC_LST_OPTION
GPCH_RUN_CNTL.GPCH_RC_AHV_AMNT
GPCH_RUN_CNTL.GPCH_RC_ALV1_AMNT
GPCH_RUN_CNTL.GPCH_RC_ALV2_AMNT
GPCH_RUN_CNTL.GPCH_TX_VILLAGE_CD
GPCH_RUN_CNTL.GPCH_TX_CROSS_TYPE
GPCH_RUN_CNTL.GPCH_RC_FINAL_PR
GPCH_RUN_CNTL.GPCH_RC_CLOSE_OPT
GPCH_RUN_CNTL.GPCH_RC_YEAR_OPT
GPCH_RUN_CNTL.PIN_CATEGORY
GPCH_RUN_CNTL.GPCH_BK_SENDER_ID
GPCH_RUN_CNTL.GPCH_BK_PAYER_ID
GPCH_RUN_CNTL.GPCH_RC_WKHOURS
GPCH_RUN_CNTL.GPCH_RC_COUNT_METH
GPCH_RUN_CNTL.GPCH_RC_TX6_PRT
GPCH_RUN_CNTL.GPCH_FK_QUARTER
GPCH_RUN_CNTL.GPCH_RC_SKILLED
GPCH_RUN_CNTL.GPCH_RC_TRAINED
GPCH_RUN_CNTL.GPCH_RC_UNSKILLED
GPCH_RUN_CNTL.GPCH_RC_FORECAST
GPCH_RUN_CNTL.GPCH_RC_VACANT
GPCH_RUN_CNTL.GPCH_RC_BRANCH
GPCH_RUN_CNTL.GPCH_AL_PROVIDER
GPCH_RUN_CNTL.GPCH_BK_GEN_DT
GPCH_RUN_CNTL.GPCH_RC_EO_SRT
GPCH_RUN_CNTL.GPCH_BK_PYMNT_TYPE
GPCH_RUN_CNTL.GPCH_BK_USE_IBAN
GPCH_RUN_CNTL.GPCH_BK_USE_BKIBAN
GPCH_RUN_CNTL.GPCH_BK_USE_IBIBAN
GPCH_RUN_CNTL.GPCH_BK_USE_IIBAN
GPCH_RUN_CNTL.GPCH_BK_INT_XFER
GPCH_RUN_CNTL.GPCH_BK_DOM_XFER
GPCH_RUN_CNTL.GPCH_RC_MULTI_PSLP
GPCH_RUN_CNTL.FILE_OUTPUT_DIR
GPCH_RUN_CNTL.GPCH_EG_YEP_FLG
GPCH_RUN_CNTL.GPCH_EG_DOMAINID
GPCH_RUN_CNTL.GPCH_TX_DOMAINID
GPCH_RUN_CNTL.GPCH_AL_PRINT_DTTM
   do Get-Values
   
#debug show 'Inside GPCH_RC_PAYROLL $prcs_oprid = ' $prcs_oprid ' $prcs_run_cntl_id = ' $prcs_run_cntl_id
    
 
FROM PS_GPCH_RC_PAYROLL GPCH_RUN_CNTL

WHERE GPCH_RUN_CNTL.OPRID       = $prcs_oprid
AND   GPCH_RUN_CNTL.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

    Let $GPCH_EG_YEP_FLG    = &GPCH_RUN_CNTL.GPCH_EG_YEP_FLG
   

  ! ST lET #GPCH_EG_TRNS_SEQ        = &GPCH_RUN_CNTL.GPCH_EG_TRNS_SEQ
  !Let $Finalize                = &GPCH_RUN_CNTL.GPCH_EG_FINALIZE
  let $Rc_Adjust_Date           = RTRIM(ltrim(&GPCH_RUN_CNTL.GPCH_RC_ADJUST_DT,' '),' ')
  #debug show 'rc adjust date ' $Rc_Adjust_Date
  let $Company_Name             = RTRIM(ltrim(&GPCH_RUN_CNTL.COMPANY,' '),' ')
  let #Domain_ID                = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID
  let $Ctl_Print                = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_REPORTNAME,' ')
  let $Ctl_Year                 = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
  let $ptot_company             = $Company_Name !sps assigning few variables used later
  let $ptot_year                = $Ctl_Year
  let #ptot_domainid            = #Domain_ID
  let $Rpt_Cur                  = RTRIM(&GPCH_RUN_CNTL.CURRENCY_CD,' ')
  let $Start_Date               = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_FROM_DT,' ')
  let $Last_Date                = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_TO_DT,' ')
  let $Ctl_Comp_Report          = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_PRN_COMP,' ')
  LET $MultiPayslip             = RTRIM(ltrim(&GPCH_RUN_CNTL.GPCH_RC_MULTI_PSLP,' '),' ')
!  let $ctl_print_dttm           = RTRIM(ltrim(&GPCH_RUN_CNTL.GPCH_AL_PRINT_DTTM,' '),' ')
  let $datet = DATEADD(&GPCH_RUN_CNTL.GPCH_RC_FROM_DT,'day', 1)
!*****************************************************************
  let $Rpt_To_Date              = RTRIM(&GPCH_RUN_CNTL.GPCH_BK_GEN_DT, ' ')
#debug show '$Start_Date: ' $Start_Date ' $Rpt_To_Date: ' $Rpt_To_Date
  let $Ctl_Emplid = RTRIM(&GPCH_RUN_CNTL.EMPLID, ' ')
  if $Ctl_Emplid <> ''
    let $Emplid_Crit     = ' AND PBD.EMPLID = ''' || $Ctl_Emplid ||  ''' '
    let $Emplid_Crit_PS  = ' AND PS.EMPLID  = ''' || $Ctl_Emplid ||  ''' '
    let $Emplid_Crit_PSA = ' AND PSA.EMPLID = ''' || $Ctl_Emplid ||  ''' '
    let $Emplid_Crit_FA  = ' AND FA.EMPLID  = ''' || $Ctl_Emplid ||  ''' '
    let $Emplid_Crit_FED = ' AND FED.EMPLID = ''' || $Ctl_Emplid ||  ''' '
  else
    let $Emplid_Crit     = ' '
    let $Emplid_Crit_PS  = ' '
    let $Emplid_Crit_PSA = ' '
    let $Emplid_Crit_FA  = ' '
    let $Emplid_Crit_FED = ' '
  end-if

  !---------------

  let $Ctl_PayEntity = RTRIM(&GPCH_RUN_CNTL.PAY_ENTITY, ' ')
  If $GPCH_EG_YEP_FLG = 'Y' !sqh
    
     let $Ctl_PayEntity = RTRIM(&GPCH_RUN_CNTL.COMPANY, ' ')
    
  End-If
  if $Ctl_PayEntity <> ''
    let $PayEntity_Crit_BK  = ' AND PAY_ENTITY      = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit     = ' AND PBD.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_PS  = ' AND PS.PAY_ENTITY   = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_PSA = ' AND PSA.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_FA  = ' AND FA.PAY_ENTITY   = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_FED = ' AND FED.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_CR  = ' AND CR.PAY_ENTITY   = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_CRM = ' AND CRM.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_CI  = ' AND CI.PAY_ENTITY   = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_CIM = ' AND CIM.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
    let $PayEntity_Crit_CPM = ' AND CPM.PAY_ENTITY  = ''' || $Ctl_PayEntity || ''' '
  else
    let $PayEntity_Crit_BK  = ' '
    let $PayEntity_Crit     = ' '
    let $PayEntity_Crit_PS  = ' '
    let $PayEntity_Crit_PSA = ' '
    let $PayEntity_Crit_FA  = ' '
    let $PayEntity_Crit_FED = ' '
    let $PayEntity_Crit_CR  = ' '
    let $PayEntity_Crit_CRM = ' '
    let $PayEntity_Crit_CI  = ' '
    let $PayEntity_Crit_CIM = ' '
    let $PayEntity_Crit_CPM = ' '

  end-if

  !---------------

  let $Ctl_Curr_Pay_End_Dt     = RTRIM(&GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT, ' ')

  if $Ctl_Curr_Pay_End_Dt <> ''
     do Get-Cal-Run-Id-Count-Month   ! to get the cal_run_id for each month.
     do Get-Cal-Id-Count-Month       ! to get the cal_id for each month.

     if $Cal_Run_Id_M_String      <> ''
        let $Cal_Run_Id_Crit_BK   = ' AND CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
        let $Cal_Run_Id_Crit      = ' AND PBD.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
        let $Cal_Run_Id_Crit_A    = ' AND A.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
        
        let $Cal_Run_Id_Crit_PS   = ' AND PS.CAL_RUN_ID IN  ( ' || $Cal_Run_Id_M_String || ')'
        let $Cal_Run_Id_Crit_PSA  = ' AND PSA.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
        let $Cal_Run_Id_Crit_FA   = ' AND FA.CAL_RUN_ID IN  ( ' || $Cal_Run_Id_M_String || ')'
        let $Cal_Id_Crit          = ' AND PBD.CAL_ID IN ( ' || $Cal_Id_M_String || ')'
        let $Cal_Id_Crit_PS       = ' AND PS.CAL_ID IN  ( ' || $Cal_Id_M_String || ')'
        let $Cal_Id_Crit_PSA      = ' AND PSA.CAL_ID IN ( ' || $Cal_Id_M_String || ')'
        let $Cal_Id_Crit_FA       = ' AND FA.CAL_ID IN  ( ' || $Cal_Id_M_String || ')'
             let $Cal_Run_Id_Criteria_A  = ' AND A.CAL_RUN_ID IN ( ' || $Cal_Run_Id_String || ')'
     else
        let $Cal_Run_Id_Crit_BK   = ' '
        let $Cal_Run_Id_Crit      = ' '
        let $Cal_Run_Id_Crit_PS   = ' '
        let $Cal_Run_Id_Crit_PSA  = ' '
        let $Cal_Run_Id_Crit_FA   = ' '
        let $Cal_Id_Crit          = ' '
        let $Cal_Id_Crit_PS       = ' '
        let $Cal_Id_Crit_PSA      = ' '
        let $Cal_Id_Crit_FA      = ' '
     end-if

  end-if
  
  #debug show ' $Cal_Run_Id_Crit_A = ' $Cal_Run_Id_Crit_A ' $Cal_Run_Id_M_String = ' $Cal_Run_Id_M_String

  !---------------

  let $Ctl_PayGroup = RTRIM(&GPCH_RUN_CNTL.GP_PAYGROUP, ' ')
  if $Ctl_PayGroup <> ''
    let $PayGroup_Crit     = ' AND PBD.GP_PAYGROUP  = ''' || $Ctl_PayGroup || ''' '
    let $PayGroup_Crit_PS  = ' AND PS.GP_PAYGROUP   = ''' || $Ctl_PayGroup || ''' '
    let $PayGroup_Crit_PSA = ' AND PSA.GP_PAYGROUP  = ''' || $Ctl_PayGroup || ''' '
    let $PayGroup_Crit_FA  = ' AND  FA.GP_PAYGROUP  = ''' || $Ctl_PayGroup || ''' '
    let $PayGroup_Crit_FED = ' AND FED.GP_PAYGROUP  = ''' || $Ctl_PayGroup || ''' '
  else
    let $PayGroup_Crit     = ' '
    let $PayGroup_Crit_PS  = ' '
    let $PayGroup_Crit_PSA = ' '
    let $PayGroup_Crit_FA  = ' '
    let $PayGroup_Crit_FED = ' '
  end-if

  !---------------

  let $Ctl_Location = RTRIM(&GPCH_RUN_CNTL.LOCATION, ' ')
  if $Ctl_Location <> ''
    let $Location_Crit     = ' AND PBD.LOCATION  = ''' || $Ctl_Location || ''' '
    let $Location_Crit_PS  = ' AND PS.LOCATION   = ''' || $Ctl_Location || ''' '
    let $Location_Crit_PSA = ' AND PSA.LOCATION  = ''' || $Ctl_Location || ''' '
    let $Location_Crit_FA  = ' AND FA.LOCATION   = ''' || $Ctl_Location || ''' '
    let $Location_Crit_FED = ' AND FED.LOCATION  = ''' || $Ctl_Location || ''' '
  else
    let $Location_Crit     = ' '
    let $Location_Crit_PS  = ' '
    let $Location_Crit_PSA = ' '
    let $Location_Crit_FA  = ' '
    let $Location_Crit_FED = ' '
  end-if

  !---------------

  let $Ctl_Deptid = RTRIM(&GPCH_RUN_CNTL.DEPTID,' ')
  if $Ctl_Deptid <> ''
    let $Dept_Crit     = ' AND PBD.DEPTID  = ''' || $Ctl_Deptid || ''' '
    let $Dept_Crit_PS  = ' AND PS.DEPTID   = ''' || $Ctl_Deptid || ''' '
    let $Dept_Crit_PSA = ' AND PSA.DEPTID  = ''' || $Ctl_Deptid || ''' '
    let $Dept_Crit_FA  = ' AND FA.DEPTID   = ''' || $Ctl_Deptid || ''' '
    let $Dept_Crit_FED = ' AND FED.DEPTID  = ''' || $Ctl_Deptid || ''' '
  else
    let $Dept_Crit     = ' '
    let $Dept_Crit_PS  = ' '
    let $Dept_Crit_PSA = ' '
    let $Dept_Crit_FA  = ' '
    let $Dept_Crit_FED = ' '
  end-if

!---------------

  let $Ctl_BusinessUnit = RTRIM(&GPCH_RUN_CNTL.BUSINESS_UNIT,' ')
  if $Ctl_BusinessUnit <> ''
    let $BusinessUnit_Crit     = ' AND PBD.BUSINESS_UNIT  = ''' || $Ctl_BusinessUnit || ''' '
    let $BusinessUnit_Crit_PS  = ' AND PS.BUSINESS_UNIT   = ''' || $Ctl_BusinessUnit || ''' '
    let $BusinessUnit_Crit_PSA = ' AND PSA.BUSINESS_UNIT  = ''' || $Ctl_BusinessUnit || ''' '
    let $BusinessUnit_Crit_FA  = ' AND FA.BUSINESS_UNIT   = ''' || $Ctl_BusinessUnit || ''' '
    let $BusinessUnit_Crit_FED = ' AND FED.BUSINESS_UNIT  = ''' || $Ctl_BusinessUnit || ''' '
  else
    let $BusinessUnit_Crit     = ' '
    let $BusinessUnit_Crit_PS  = ' '
    let $BusinessUnit_Crit_PSA = ' '
    let $BusinessUnit_Crit_FA  = ' '
    let $BusinessUnit_Crit_FED = ' '
  end-if

  
!--------------------------------------------------------------------For Selection Criteria more than 1
 if $Ctl_Year <> '0'
        do Get-Cal-Run-Id-Count-Year
        do Get-Cal-Id-Count-Year
 end-if

 if #count_cal <> 0
     let $Cal_Run_Id_Criteria      = ' AND PBD.CAL_RUN_ID IN ( ' || $Cal_Run_Id_String || ')'
     let $Cal_Run_Id_Criteria_PS   = ' AND PS.CAL_RUN_ID  IN ( ' || $Cal_Run_Id_String || ')'
     let $Cal_Run_Id_Criteria_PSA  = ' AND PSA.CAL_RUN_ID IN ( ' || $Cal_Run_Id_String || ')'
     let $Cal_Run_Id_Criteria_FA   = ' AND FA.CAL_RUN_ID  NOT IN ( ' || $Cal_Run_Id_String || ')'
     let $Cal_Run_Id_Criteria_FED  = ' AND FED.CAL_RUN_ID NOT IN ( ' || $Cal_Run_Id_String || ')'
  else
     let $Cal_Run_Id_Criteria      = ' '
     let $Cal_Run_Id_Criteria_PS   = ' '
     let $Cal_Run_Id_Criteria_PSA  = ' '
     let $Cal_Run_Id_Criteria_FA   = ' '
     let $Cal_Run_Id_Criteria_FED  = ' '
  end-if


  if #count_cal_id <> 0
     let $Cal_Id_Criteria      = ' AND PBD.CAL_ID IN ( ' || $Cal_Id_String || ')'
     let $Cal_Id_Criteria_PS   = ' AND PS.CAL_ID  IN ( ' || $Cal_Id_String || ')'
     let $Cal_Id_Criteria_PSA  = ' AND PSA.CAL_ID IN ( ' || $Cal_Id_String || ')'
     let $Cal_Id_Criteria_FA   = ' AND FA.CAL_ID  IN ( ' || $Cal_Id_String || ')'
     let $Cal_Id_Criteria_FED  = ' AND FED.CAL_ID IN ( ' || $Cal_Id_String || ')'
  else
     let $Cal_Id_Criteria      = ' '
     let $Cal_Id_Criteria_PS   = ' '
     let $Cal_Id_Criteria_PSA  = ' '
     let $Cal_Id_Criteria_FA   = ' '
     let $Cal_Id_Criteria_FED  = ' '
  end-if

  do Get-Emplid-Count
  if #count_Emplid <> 0
     let $Emplid_Criteria     = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria_PS  = ' AND PS.EMPLID  IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria_DL  = ' AND DL.EMPLID  IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria_PSA = ' AND PSA.EMPLID IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria_FA  = ' AND FA.EMPLID  IN ( ' || $Emplid-String || ')'

  else
     let $Emplid_Criteria     = ' '
     let $Emplid_Criteria_PS  = ' '
     let $Emplid_Criteria_DL  = ' '
     let $Emplid_Criteria_PSA = ' '
     let $Emplid_Criteria_FA  = ' '
  end-if

  do Get-Exclude-Zero-Pin
  if #count_Zero <> 0
     let $Zero_Pin_Criteria_SS  = ' AND SS.PIN_NUM  NOT IN ( ' || $Zero-String || ')'
     let $Zero_Pin_Criteria_PS  = ' AND PS.PIN_NUM  NOT IN ( ' || $Zero-String || ')'
     let $Zero_Pin_Criteria_PSA = ' AND PSA.PIN_NUM NOT IN ( ' || $Zero-String || ')'
     let $Zero_Pin_Criteria_FA  =  ' AND FA.PIN_NUM  NOT IN ( ' || $Zero-String || ')'
  else
     let $Zero_Pin_Criteria_SS  = ' '
     let $Zero_Pin_Criteria_PS  = ' '
     let $Zero_Pin_Criteria_PSA = ' '
     let $Zero_Pin_Criteria_FA  = ' '
  end-if


  do Get-Company-Count
  if #count_company <> 0
     let $Company_Criteria_BK    = ' AND COMPANY IN ( ' || $Company-String || ')'
     let $Company_Criteria       = ' AND PBD.COMPANY IN ( ' || $Company-String || ')'
     let $Company_Criteria_PS    = ' AND PS.COMPANY IN ( ' || $Company-String || ')'
     let $Company_Criteria_PBDA  = ' AND PBDA.GPCH_RP_DEPT2 IN ( ' || $Company-String || ')'
     let $Company_Criteria_PBD1  = ' AND PBD1.COMPANY IN ( ' || $Company-String || ')'
     let $Company_Criteria_PSA   = ' AND PSA.COMPANY IN ( ' || $Company-String || ')'
     let $Company_Criteria_B     = ' AND B.DATA_KEY1 IN ( ' || $Company-String || ')'
     let $Company_Criteria_DR    = ' AND DR.CHR_PIN_VAL IN ( ' || $Company-String || ')'
     let $Company_Criteria_DR1   = ' AND DR1.CHR_PIN_VAL IN ( ' || $Company-String || ')'
  else
     let $Company_Criteria_BK    = ' '
     let $Company_Criteria       = ' '
     let $Company_Criteria_PS    = ' '
     let $Company_Criteria_PBDA  = ' '
     let $Company_Criteria_PBD1  = ' '
     let $Company_Criteria_PSA   = ' '
     let $Company_Criteria_B     = ' '
     let $Company_Criteria_DR    = ' '
     let $Company_Criteria_DR1   = ' '
  end-if

  do Get-PayEntity-Count
  if #count_pyent <> 0
     let $PayEntity_Criteria     = ' AND PBD.PAY_ENTITY IN ( ' || $PayEntity-String || ')'
     let $PayEntity_Criteria_PS  = ' AND PS.PAY_ENTITY  IN ( ' || $PayEntity-String || ')'
     let $PayEntity_Criteria_PSA = ' AND PSA.PAY_ENTITY IN ( ' || $PayEntity-String || ')'
  else
     let $PayEntity_Criteria     = ' '
     let $PayEntity_Criteria_PS  = ' '
     let $PayEntity_Criteria_PSA = ' '
  end-if

  do Get-Location-Count
  if #countL <> 0
     let $Location_Criteria     =  ' AND PBD.LOCATION IN ( ' || $Location-String || ')'
     let $Location_Criteria_PS  =  ' AND PS.LOCATION  IN ( ' || $Location-String || ')'
     let $Location_Criteria_PSA =  ' AND PSA.LOCATION IN ( ' || $Location-String || ')'
  else
     let $Location_Criteria     = ' '
     let $Location_Criteria_PS  = ' '
     let $Location_Criteria_PSA = ' '
  end-if

  do Get-Department-Count
  if #countD <> 0
     let $Department_Criteria     = ' AND PBD.DEPTID IN ( ' || $Dept-String || ')'
     let $Department_Criteria_PS  = ' AND PS.DEPTID  IN ( ' || $Dept-String || ')'
     let $Department_Criteria_PSA = ' AND PSA.DEPTID IN ( ' || $Dept-String || ')'
  else
     let $Department_Criteria     = ' '
     let $Department_Criteria_PS  = ' '
     let $Department_Criteria_PSA = ' '
  end-if

  do Get-Paygroup-Count
  if #countP <> 0
     let $Paygroup_Criteria     = ' AND PBD.GP_PAYGROUP IN (' || $Paygroup-String || ')'
     let $Paygroup_Criteria_PS  = ' AND PS.GP_PAYGROUP  IN (' || $Paygroup-String || ')'
     let $Paygroup_Criteria_PSA = ' AND PSA.GP_PAYGROUP IN (' || $Paygroup-String || ')'
  else
     let $Paygroup_Criteria     = ' '
     let $Paygroup_Criteria_PS  = ' '
     let $Paygroup_Criteria_PSA = ' '
  end-if

 !*****************************************************************
 !**Set the Sort Order String


  evaluate &GPCH_RUN_CNTL.GPCH_RC_AL01_S1
  when = 'E'
    let $Sort1 = 'PBD.EMPLID'
    break
  when = 'C'
    let $Sort1 = 'PBD.COMPANY'
    break
  when = 'L'
    let $Sort1 = 'PBD.LOCATION'
    break
  when = 'N'
    let $Sort1 = 'PD.NAME'
    break
  when = 'D'
    let $Sort1 = 'PBD.DEPTID'
    break
  when = 'G'
    let $Sort1 = 'PBD.GP_PAYGROUP'
    break
  when-other
    let $Sort1 = ' '
    break
  end-evaluate

  evaluate &GPCH_RUN_CNTL.GPCH_RC_AL01_S2
  when = 'E'
    let $Sort2 = 'PBD.EMPLID'
    break
  when = 'C'
    let $Sort2 = 'PBD.COMPANY'
    break
  when = 'L'
    let $Sort2 = 'PBD.LOCATION'
    break
  when = 'N'
    let $Sort2 = 'PD.NAME'
    break
  when = 'D'
    let $Sort2 = 'PBD.DEPTID'
    break
  when = 'G'
    let $Sort2 = 'PBD.GP_PAYGROUP'
    break
  when-other
    let $Sort2 = ' '
    break
  end-evaluate

  evaluate &GPCH_RUN_CNTL.GPCH_RC_AL01_S3
  when = 'E'
    let $Sort3 = 'PBD.EMPLID'
    break
  when = 'C'
    let $Sort3 = 'PBD.COMPANY'
    break
  when = 'L'
    let $Sort3 = 'PBD.LOCATION'
    break
  when = 'N'
    let $Sort3 = 'PD.NAME'
    break
  when = 'D'
    let $Sort3 = 'PBD.DEPTID'
    break
  when = 'G'
    let $Sort3 = 'PBD.GP_PAYGROUP'
    break
  when-other
    let $Sort3 = ' '
    break
  end-evaluate

  !*************************************

  do Variable-Display
  
#debug show 'Out Get-Report-Parameters'
end-procedure

!*********************************************************************************************

begin-procedure Get-Emplid-Count

let #count_Emplid = 0
let $Emplid-String = ''

begin-SELECT on-error=give_warning

EE.EMPLID  &EMPLIDcount

   let $EMPLIDpcnt = rtrim(&EMPLIDcount,' ')

   if $EMPLIDpcnt <> ''
      let $temp-value = rtrim($EMPLIDpcnt,' ')
      let $Emplid-String = $Emplid-String || '''' || $temp-value || '''' || ','
      let #count_Emplid = #count_Emplid + 1
   end-if

FROM PS_GPCH_RC_EMPLID EE

WHERE EE.OPRID = $prcs_oprid
AND   EE.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT



begin-SELECT on-error=give_warning

GL.GROUP_LIST_ID

   let #GrpLst = #GrpLst + 1


FROM PS_GPCH_RC_GRP_LST GL

WHERE GL.OPRID = $prcs_oprid
AND   GL.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

show '#count_Emplid: ' #count_Emplid '  -  #GrpLst: ' #GrpLst
   if #count_Emplid > 10 or #GrpLst > 0
      let $Emplid-String = 'SELECT PER.EMPLID FROM PS_PERSON PER WHERE PER.EMPLID IN (SELECT EE.EMPLID FROM PS_GPCH_RC_EMPLID EE' 
          || ' WHERE EE.OPRID = ''' || $Prcs_Oprid || '''' || 'AND EE.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_Id || ''') OR '
          || ' PER.EMPLID IN (SELECT GLD.EMPLID FROM PS_GP_GRP_LIST_DTL GLD WHERE GLD.GROUP_LIST_ID IN ( SELECT GL.GROUP_LIST_ID FROM PS_GPCH_RC_GRP_LST GL ' 
          || ' WHERE GL.OPRID = ''' || $Prcs_Oprid || '''' || 'AND GL.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_Id || ''' ))'
   else
      let $Emplid-String = rtrim($Emplid-String,',')
   end-if


end-procedure

!*********************************************************************************************

begin-procedure Get-GroupListEmplid-Count

let #count_glEmplid = 0
let $glEmplid-String = ''

begin-SELECT on-error=give_warning

GEE.EMPLID  &EMPLIDcount2

   let $EMPLIDpcnt = rtrim(&EMPLIDcount2,' ')

   if $EMPLIDpcnt <> ''
      let $temp-value = rtrim($EMPLIDpcnt,' ')
      let $glEmplid-String = $glEmplid-String || '''' || $temp-value || '''' || ','
      let #count_glEmplid = #count_glEmplid + 1
   end-if

FROM PS_GPCH_RC_GRP_LST GL, PS_GP_GRP_LIST_DTL GEE 

WHERE GL.OPRID = $prcs_oprid
AND   GL.RUN_CNTL_ID = $prcs_run_cntl_id
AND   GEE.GROUP_LIST_ID  = GL.GROUP_LIST_ID


end-SELECT



   if #count_glEmplid > 10
      let $glEmplid-String = 'SELECT GEE.EMPLID FROM PS_GPCH_RC_GRP_LST GL, PS_GP_GRP_LIST_DTL EE WHERE GEE.OPRID = ''' 
                         || $Prcs_Oprid || ''''
                         || 'AND GEE.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_Id || ''''
                         || 'AND GEE.RUN_CNTL_ID = GL.RUN_CNTL_ID AND GEE.OPRID = GL.OPRID'
                         || 'AND GEE.GROUP_LIST_ID = GL.GROUP_LIST_ID'
   else
      let $glEmplid-String = rtrim($glEmplid-String,',')
   end-if

end-procedure


!*********************************************************************************************
begin-procedure Get-Exclude-Zero-Pin
#Debug Show '-> Get-Exclude-Zero-Pin '

let #count_Zero = 0
let $Zero-String = ''

Begin-Select on-error=give_warning
ZC.PIN_MBR_NUM

   let $Zero_Pin = rtrim(to_char(&ZC.PIN_MBR_NUM),' ')

   if $Zero_Pin <> ''
      let $temp-value  = $Zero_Pin
      let $Zero-String = $Zero-String ||  $temp-value || ','
      let #count_Zero  = #count_Zero + 1
   end-if

FROM PS_GP_ACM_MBR ZC,PS_GP_PIN ZCM
WHERE ZCM.PIN_NUM  =  ZC.PIN_NUM
AND   (ZCM.PIN_NM  = 'CH_RP_ZERO' OR ZCM.PIN_NM  = 'CH_RP_CZERO')
End-Select

   if #count_Zero > 10
      let $Zero-String = 'SELECT ZC.PIN_MBR_NUM FROM PS_GP_ACM_MBR ZC,PS_GP_PIN ZCM WHERE ZCM.PIN_NUM = ZC.PIN_NUM AND (ZCM.PIN_NM  = ''CH_RP_ZERO'' OR ZCM.PIN_NM  = ''CH_RP_CZERO'')'
   else
      let $Zero-String = rtrim($Zero-String,',')
   end-if

#Debug Show '<- Get-Exclude-Zero-Pin ' #count_Zero
end-procedure Get-Exclude-Zero-Pin

!*********************************************************************************************

begin-procedure Get-PayEntity-Count

let #count_pyent = 0
let $PayEntity-String = ''

begin-SELECT on-error=give_warning

CC.PAY_ENTITY  &PYENTcount

   let $PYENTpcnt = rtrim(&PYENTcount,' ')

   if $PYENTpcnt <> ''
      let $temp-value = rtrim($PYENTpcnt,' ')
      let $PayEntity-String = $PayEntity-String || '''' || $temp-value || '''' || ','
      let #count_pyent = #count_pyent + 1
   end-if

FROM PS_GPCH_RC_PYENT CC

WHERE CC.OPRID = $prcs_oprid
AND   CC.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

   let $PayEntity-String = rtrim($PayEntity-String,',')

end-procedure

!*********************************************************************************************
begin-procedure Get-Company-Count

let #count_company = 0
let $Company-String = ''

begin-SELECT on-error=give_warning

CCC.COMPANY  &Companycount

   let $Companycnt = rtrim(&Companycount,' ')

   if $Companycnt <> ''
      let $temp-value     = rtrim($Companycnt,' ')
      let $Company-String = $Company-String || '''' || $temp-value || '''' || ','
      let #count_company  = #count_company + 1
   end-if

FROM PS_GPCH_RC_COMPANY CCC

WHERE CCC.OPRID       = $prcs_oprid
AND   CCC.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

   let $Company-String = rtrim($Company-String,',')

end-procedure

!*********************************************************************************************
begin-procedure Get-Location-Count

let #countL = 0
let $Location-String = ''

begin-SELECT on-error=give_warning

LOCATION &lcount


   let $locount = rtrim(&lcount,' ')

   if $locount <> ''
      let $temp-value = rtrim($locount,' ')
      let $Location-String = $Location-String || '''' || $temp-value || '''' || ','
      let #countL = #countL + 1
   end-if

FROM PS_GPCH_RC_LOC LL

WHERE LL.OPRID = $prcs_oprid
AND LL.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

 let $Location-String = rtrim($Location-String,',')

end-procedure

!*********************************************************************************************
begin-procedure Get-Department-Count

let #countD = 0
let $Dept-String = ''

begin-SELECT on-error=give_warning

DEPTID &dcount

  let $deptcount = rtrim(&dcount,' ')

   if $deptcount <> ''
      let $temp-value = rtrim($deptcount,' ')
      let $Dept-String = $Dept-String || '''' || $temp-value || '''' || ','
      let #countD = #countD + 1
   end-if

FROM PS_GPCH_RC_DEPT DD

WHERE DD.OPRID = $prcs_oprid
AND   DD.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

   let $Dept-String = rtrim($Dept-String,',')

end-procedure

!*********************************************************************************************
begin-procedure Get-Paygroup-Count

let #countP = 0
let $Paygroup-String = ''

begin-SELECT on-error=give_warning

PP.GP_PAYGROUP &paycount

  let $Paycnt = rtrim(&paycount,' ')

  if $Paycnt <> ''
     let $temp-value = rtrim($Paycnt,' ')
     let $Paygroup-String = $Paygroup-String || '''' || $temp-value || '''' || ','
     let #countP = #countP + 1
  end-if

FROM PS_GPCH_RC_PAYGRP PP
WHERE PP.OPRID = $prcs_oprid
AND   PP.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

let $Paygroup-String = rtrim($Paygroup-String,',')

end-procedure
!*********************************************************************************************
begin-procedure Get-Cal-Run-Id-Count-Year
#debug show 'In Get-Cal-Run-Id-Count-Year'

  let $CMP_Start_Dt = $Ctl_Year || '01' || '01' || '0000'
  let $CMP_End_Dt   = $Ctl_Year || '12' || '31' || '0000'
  do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
  do Format-DateTime($CMP_end_Dt , $out2, {DEFCMP},'','native')
  let $Ctl_Start_Dt = rtrim($out, ' ')
  let $Ctl_End_Dt   = rtrim($out2, ' ')
  #debug show ' From Year : '   $Ctl_Start_Dt  ' To : '  $Ctl_End_Dt

  let #count_cal = 0
  let $Cal_Run_Id_String = ''

begin-SELECT DISTINCT on-error=give_warning

CR.CAL_RUN_ID  &CR.CAL_RUN_ID

   let $CAL_RUN_ID = rtrim(&CR.CAL_RUN_ID,' ')

   if $CAL_RUN_ID <> ''
      let $temp-value = rtrim($CAL_RUN_ID,' ')
      let $Cal_Run_Id_String = $Cal_Run_Id_String || '''' || $temp-value || '''' || ','
      let #count_cal = #count_cal + 1
   end-if

FROM PS_GP_CAL_RUN CP,PS_GP_CAL_RUN_DTL CR

WHERE CP.CAL_RUN_ID  = CR.CAL_RUN_ID
AND   CR.PRD_BGN_DT >= {DATEIN-PREFIX}$Ctl_Start_Dt{DATEIN-SUFFIX}
AND   CR.PRD_END_DT <= {DATEIN-PREFIX}$Ctl_End_Dt{DATEIN-SUFFIX}
AND   CR.CALC_TYPE   = 'P'
AND  (CP.RUN_FINALIZED_IND='Y' OR CP.RUN_OPEN_IND='Y')
[$PayEntity_Crit_CR]

end-SELECT

  let $Cal_Run_Id_String = rtrim($Cal_Run_Id_String,',')

#debug show 'Out Get-Cal-Run-Id-Count-Year'
End-procedure Get-Cal-Run-Id-Count-Year


!***********************************************************************************************

begin-procedure Get-Cal-Run-Id-Count-Month


     let $ReportEndDate = $Ctl_Curr_Pay_End_Dt

     #debug show ' From Month: '   $Ctl_Curr_Pay_End_Dt

  let #count_cal_m = 0
  let $Cal_Run_Id_M_String = ''

begin-SELECT DISTINCT on-error=give_warning

CRM.CAL_RUN_ID  &CRM.CAL_RUN_ID

   let $CAL_RUN_ID_M = rtrim(&CRM.CAL_RUN_ID,' ')

   if $CAL_RUN_ID_M <> ''
      let $temp-value = rtrim($CAL_RUN_ID_M,' ')
      let $Cal_Run_Id_M_String = $Cal_Run_Id_M_String || '''' || $temp-value || '''' || ','
      let #count_cal_m = #count_cal_m + 1
   end-if

FROM PS_GP_CAL_RUN CPM , PS_GP_CAL_RUN_DTL CRM
WHERE CPM.CAL_RUN_ID  = CRM.CAL_RUN_ID
AND   CRM.PRD_END_DT  = {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX}
AND   CRM.CALC_TYPE   = 'P'
AND  (CPM.RUN_FINALIZED_IND='Y' OR CPM.RUN_OPEN_IND='Y')
[$PayEntity_Crit_CRM]

end-SELECT

  let $Cal_Run_Id_M_String = rtrim($Cal_Run_Id_M_String,',')

  #debug show $Cal_Run_Id_M_String

End-procedure Get-Cal-Run-Id-Count-Month

!*********************************************************************************************
begin-procedure Get-Cal-Id-Count-Year

  let $CMP_Start_Dt = $Ctl_Year || '01' || '01' || '0000'
  let $CMP_End_Dt   = $Ctl_Year || '12' || '31' || '0000'
  do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
  do Format-DateTime($CMP_end_Dt , $out2, {DEFCMP},'','native')
  let $Ctl_Start_Dt = rtrim($out, ' ')
  let $Ctl_End_Dt   = rtrim($out2, ' ')
  #debug show ' From Year : '   $Ctl_Start_Dt  ' To : '  $Ctl_End_Dt

  let #count_cal_id = 0
  let $CAL_ID_String = ''

begin-SELECT DISTINCT on-error=give_warning

CI.CAL_ID  &CI.CAL_ID

   let $CAL_ID = rtrim(&CI.CAL_ID,' ')

   if $CAL_ID <> ''
      let $temp-value = rtrim($CAL_ID,' ')
      let $CAL_ID_String = $CAL_ID_String || '''' || $temp-value || '''' || ','
      let #count_cal_id = #count_cal_id + 1
   end-if

FROM PS_GP_CAL_RUN CPS,PS_GP_CAL_RUN_DTL CI

WHERE CPS.CAL_RUN_ID = CI.CAL_RUN_ID
AND   CI.PRD_BGN_DT >= {DATEIN-PREFIX}$Ctl_Start_Dt{DATEIN-SUFFIX}
AND   CI.PRD_END_DT <= {DATEIN-PREFIX}$Ctl_End_Dt{DATEIN-SUFFIX}
AND   CI.CALC_TYPE   = 'P'
AND  (CPS.RUN_FINALIZED_IND='Y' OR CPS.RUN_OPEN_IND='Y')
[$PayEntity_Crit_CI]

end-SELECT

  let $CAL_ID_String = rtrim($CAL_ID_String,',')

End-procedure Get-Cal-Id-Count-Year


!***********************************************************************************************

begin-procedure Get-Cal-Id-Count-Month

     let $ReportEndDate = $Ctl_Curr_Pay_End_Dt

     #debug show ' From Month: '  $Ctl_Curr_Pay_End_Dt ! $ReportBeginDate  ' To : '  $ReportEndDate


  let $CAL_ID_M_String = ''

begin-SELECT DISTINCT on-error=give_warning

CIM.CAL_ID  &CIM.CAL_ID

   let $CAL_ID_M = rtrim(&CIM.CAL_ID,' ')

   if $CAL_ID_M <> ''
      let $temp-value = rtrim($CAL_ID_M,' ')
      let $CAL_ID_M_String = $CAL_ID_M_String || '''' || $temp-value || '''' || ','
   end-if

FROM PS_GP_CAL_RUN CTM, PS_GP_CAL_RUN_DTL CIM
WHERE CTM.CAL_RUN_ID  = CIM.CAL_RUN_ID
AND   CIM.PRD_END_DT  = {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX}
AND   CIM.CALC_TYPE   = 'P'
AND  (CTM.RUN_FINALIZED_IND='Y' OR CTM.RUN_OPEN_IND='Y')
[$PayEntity_Crit_CIM]

end-SELECT

  let $CAL_ID_M_String = rtrim($CAL_ID_M_String,',')
  #debug show $CAL_ID_M_String
End-procedure Get-Cal-Id-Count-Month
!**************************************************
begin-procedure dtu-year-begin($dtu_date, :$dtu_date_out)
#Debug show '-> dtu-year-begin ' $dtu_date

  let $dtu_date_out1 = substr($dtu_date, 8, 1)
  let $dtu_date_out  = substr($dtu_date, 1, 5) || '01' || $dtu_date_out1 || '01'

#Debug show '<- dtu-year-begin ' $dtu_date_out
end-procedure
!**************************************************
begin-procedure dtu-year-end($dtu_date, :$dtu_date_out)
#Debug show '-> dtu-year-end' $dtu_date

  let $dtu_date_out1 = substr($dtu_date, 8, 1)
  let $dtu_date_out  = substr($dtu_date, 1, 5) || '12' || $dtu_date_out1 || '31'

#Debug show '<- dtu-year-end' $dtu_date_out
end-procedure

!*********************************************************************************************
begin-procedure Get-Output-Directory($Sqr_Name,:$Output_Directory,:$prcs_no)
#Debug Show  '-> Get-Output-Directory   ' #prcs_process_instance  ' , ' $_sqr-report

  let $prcs_no = to_char(#_prcs_process_instance)
  let $prcs_no = rtrim($prcs_no,' ')
  let $outputdir = $_sqr-report

  do OutputDirectory_WithoutPS($outputdir,$Output_Directory)

Begin-Select on-error=give_warning
RQ.RUNLOCATION
OD.PRCSOUTPUTDIR
OD.OUTDEST
RQ.OUTDESTFORMAT
RQ.OUTDESTTYPE

    let $OUTDESTFORMAT = rtrim(&RQ.OUTDESTFORMAT,' ')
    let $RUNLOCATION   = rtrim(&RQ.RUNLOCATION,' ')
    let $PRCSOUTPUTDIR = rtrim(&OD.PRCSOUTPUTDIR,' ')
    let $OUTDEST       = rtrim(&OD.OUTDEST,' ')
    let $OUTDESTTYPE   = rtrim(&RQ.OUTDESTTYPE,' ')

    #debug show '$OUTDESTFORMAT ' $OUTDESTFORMAT
    #debug show '$RUNLOCATION   ' $RUNLOCATION
    #debug show '$PRCSOUTPUTDIR ' $PRCSOUTPUTDIR
    #debug show '$OUTDEST       ' $OUTDEST
    #debug show '$OUTDESTTYPE   ' $OUTDESTTYPE


   !---------------------------------------
   !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

    if  $RUNLOCATION = '2'           ! Client(1)/Server(2)/Both(0)
        if $OUTDESTTYPE = '2'        ! File(2)

             do OutputDirectory_WithPS($OUTDEST,$Output_Directory)

        else  !To get output on Web

             find  '/'  in  $PRCSOUTPUTDIR  0  #unix_delimit
             find  '\'  in  $PRCSOUTPUTDIR  0  #win_delimit

             if #unix_delimit <> -1
                let $delimiter = '/'
             end-if

             if #win_delimit  <> -1
                let $delimiter = '\'
             end-if

             #debug show '$delimiter ' $delimiter

             let $Output_Directory = $PRCSOUTPUTDIR  || $delimiter

             #debug show ' $Output_Directory Of Web' $Output_Directory

        end-if

    else  ! To Run on the Client

        do OutputDirectory_WithPS($OUTDEST,$Output_Directory)

    end-if

FROM PSPRCSPARMS OD , PSPRCSRQST  RQ
WHERE OD.PRCSINSTANCE  = RQ.PRCSINSTANCE
AND   OD.PRCSINSTANCE  = #_prcs_process_instance
End-Select

  evaluate $OUTDESTFORMAT
  when = '0'    !Any
       let $FileExtension = '.lis'
       break
  when = '1'    !None
       let $FileExtension = '.lis'
       break
  when = '2'    !Acrobat
       let $FileExtension = '.pdf'
       break
  when = '3'    !Comma Delimited
       let $FileExtension = '.csv'
       break
  when = '4'    !HP Format lis
       let $FileExtension = '.lis'
       break
  when = '5'    !HTML Documents
       let $FileExtension = '.htm'
       break
  when = '6'    !Line Printer format
       let $FileExtension = '.lis'
       break
  when = '7'    !Lotus 1-2-3 Files
       let $FileExtension = '.wks'
       break
  when = '8'    !Microsoft Excel
       let $FileExtension = '.xls'
       break
  when = '9'    !Microsoft Word
       let $FileExtension = '.doc'
       break
  when = '10'   !Postscript
       let $FileExtension = '.lis'
       break
  when = '11'   !Crystal Reports
       let $FileExtension = '.rpt'
       break
  when = '12'   !Rich Text File
       let $FileExtension = '.rtf'
       break
  when = '13'   !Sqr Portable Format
       let $FileExtension = '.spf'
       break
  when = '14'    !Text Files
       let $FileExtension = '.txt'
       break
  when = '15'    !Other
       let $FileExtension = '.lis'
       break
  when = '16'    !Default
       let $FileExtension = '.lis'
       break
  when = '17'    !XML Format
       let $FileExtension = '.xml'
       break
  when = '18'    !Data Mover Data File
       let $FileExtension = '.dat'
       break
  when-other     !None
       let $FileExtension = '.pdf'
       break
  end-evaluate

  let $prcs_no     =  $prcs_no || $FileExtension

#Debug Show  '<- Get-Output-Directory   '  $Output_Directory ' , ' $prcs_no
end-Procedure Get-Output-Directory
!*************************************************************************************
Begin-Procedure OutputDirectory_WithoutPS($outputdir,:$Output_Directory)
#debug show 'OutputDirectory_WithoutPS -> '


  !--------------------------------------- To check if Unix or NT and select delimiter
  #Debug show '$outputdir ' $outputdir

  find  '/'  in  $outputdir  0  #unix_delimit
  find  '\'  in  $outputdir  0  #win_delimit


  if #unix_delimit <> -1
     let $delimiter = '/'
  end-if

  if #win_delimit  <> -1
     let $delimiter = '\'
  end-if

  #Debug show '$delimiter ' $delimiter

  !---------------------------------------
  !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

  find  '.'  in  $outputdir  0  #File_check

  if #File_check <> -1   !If Filename exists

      let #acc = 1
      while instr($outputdir,$delimiter,#acc ) <> 0
         let #acc = instr($outputdir,$delimiter,#acc ) + 1
         #Debug show 'Command line ' #acc
      end-while
      let $Output_Directory = substr($outputdir, 1, #acc - 1)
      #Debug Show ' $Output_Directory FNE ' $Output_Directory

  else  ! Only directory exist

      let $Delimiter_check = substr($outputdir,length($outputdir),1)

      if  $Delimiter_check = $delimiter
          let $Output_Directory = $outputdir
          #Debug Show ' $Output_Directory DE ' $Output_Directory
      else
          let $Output_Directory = rtrim($outputdir,' ') || $delimiter
          #Debug Show ' $Output_Directory DNE ' $Output_Directory
      end-if

  end-if

   #Debug show ' Without Process Scheduler $Output_Directory ' $Output_Directory

#debug show 'OutputDirectory_WithoutPS <- '
End-Procedure  OutputDirectory_WithoutPS

!*************************************************************************************
Begin-Procedure OutputDirectory_WithPS($OUTDEST,:$Output_Directory)
#debug show 'OutputDirectory_WithPS -> '

  !--------------------------------------- To check if Unix or NT and select delimiter
    #Debug show '$OUTDEST ' $OUTDEST

    find  '/'  in  $OUTDEST  0  #unix_delimit
    find  '\'  in  $OUTDEST  0  #win_delimit

    if #unix_delimit <> -1
       let $delimiter = '/'
    end-if

    if #win_delimit  <> -1
       let $delimiter = '\'
    end-if

    #Debug show '$delimiter ' $delimiter

  !---------------------------------------
  !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

    find  '.'  in  $OUTDEST  0  #File_check

    if #File_check <> -1   !If Filename exists

       let #acc = 1
       while instr($OUTDEST,$delimiter,#acc ) <> 0
             let #acc = instr($OUTDEST,$delimiter,#acc ) + 1
             #Debug show 'PSE' #acc
       end-while
       let $Output_Directory = substr($OUTDEST, 1, #acc - 1)
       #Debug show ' $Output_Directory FNE ' $Output_Directory

    else  ! Only directory exist

       let $Delimiter_check = substr($OUTDEST,length($OUTDEST),1)

       if  $Delimiter_check = $delimiter
           let $Output_Directory = $OUTDEST
           #Debug Show ' $Output_Directory DE ' $Output_Directory
       else
           let $Output_Directory = rtrim($OUTDEST,' ') || $delimiter
           #Debug Show ' $Output_Directory DNE ' $Output_Directory
       end-if

    end-if

   #Debug show ' With Process Scheduler $Output_Directory ' $Output_Directory

#debug show 'OutputDirectory_WithPS <- '
End-Procedure  OutputDirectory_WithPS
!*************************************************************************************
begin-procedure give_warning

   let $WasError = 'N'
   if (#sql-status = 100) OR (#sql-status = 0)
      #ifndef DB2ALL
       show 'Error in sql        :  ' $sql-error
       show 'Error message number:  ' #sql-status
       let $WasError = 'Y'
     #endif
   else
      show 'Error in sql        :  ' $sql-error
      show 'Error message number:  ' #sql-status
      let $WasError = 'Y'
   end-if

   if $WasError = 'Y'

       !Code fragment taken from sqlerr.sqc
       !Code fragment taken from sqlerr.sqc

       evaluate #sql-status

           #include 'sqlstat.sqc'

           if #prcs_process_instance > 0
               let #prcs_message_set_nbr = #prcs_msg_set_nbr
               let #prcs_message_nbr = #prcs_msg_nbr_sql_error
               let #prcs_run_status = #prcs_run_status_error
               let #prcs_rc = #sql-status
               let $prcs_message_parm1 = $give_warning
               let #prcs_continuejob = 0
               do Rollback-Transaction
               if $prcs_in_update_prcs_run_stat <> 'Y'
                   do Update-Prcs-Run-Status
                   do Commit-Transaction
               end-if
           end-if

           let #return-Status = 1

           stop

       !Code fragment taken from sqlerr.sqc
       !Code fragment taken from sqlerr.sqc

       end-evaluate

   end-if
   
end-procedure  give_warning
!*************************************************************************************
Begin-Procedure Variable-Display

    #debug show ' SORT 1 : '  &GPCH_RUN_CNTL.GPCH_RC_AL01_S1
    #debug show ' SORT 2 : '  &GPCH_RUN_CNTL.GPCH_RC_AL01_S2
    #debug show ' SORT 3 : '  &GPCH_RUN_CNTL.GPCH_RC_AL01_S3

    #Debug Show ' - > $Cal_Run_Id_Crit      ' $Cal_Run_Id_Crit
    #Debug Show ' - > $Cal_Run_Id_Crit_PS   ' $Cal_Run_Id_Crit_PS
    #Debug Show ' - > $Cal_Run_Id_Crit_PSA  ' $Cal_Run_Id_Crit_PSA
    #Debug Show ' - > $Cal_Run_Id_Crit_FA  ' $Cal_Run_Id_Crit_FA

    #Debug Show ' - > $Cal_Id_Crit      ' $Cal_Id_Crit
    #Debug Show ' - > $Cal_Id_Crit_PS   ' $Cal_Id_Crit_PS
    #Debug Show ' - > $Cal_Id_Crit_PSA  ' $Cal_Id_Crit_PSA
    #Debug Show ' - > $Cal_Id_Crit_FA   ' $Cal_Id_Crit_FA

    #Debug Show ' - >$Emplid_Crit     '  $Emplid_Crit
    #Debug Show ' - >$Emplid_Crit_PS  '  $Emplid_Crit_PS
    #Debug Show ' - >$Emplid_Crit_PSA '  $Emplid_Crit_PSA
    #Debug Show ' - >$Emplid_Crit_FA  '  $Emplid_Crit_FA
    #Debug Show ' - >$Emplid_Crit_FED '  $Emplid_Crit_FED


    #Debug Show ' - >$PayEntity_Crit     '   $PayEntity_Crit
    #Debug Show ' - >$PayEntity_Crit_PS  '   $PayEntity_Crit_PS
    #Debug Show ' - >$PayEntity_Crit_PSA '   $PayEntity_Crit_PSA
    #Debug Show ' - >$PayEntity_Crit_FA '    $PayEntity_Crit_FA
    #Debug Show ' - >$PayEntity_Crit_FED '   $PayEntity_Crit_FED
    #Debug Show ' - >$PayEntity_Crit_CR '    $PayEntity_Crit_CR
    #Debug Show ' - >$PayEntity_Crit_CRM '   $PayEntity_Crit_CRM
    #Debug Show ' - >$PayEntity_Crit_CI '    $PayEntity_Crit_CI
    #Debug Show ' - >$PayEntity_Crit_CIM '   $PayEntity_Crit_CIM
    #Debug Show ' - >$PayEntity_Crit_CPM '   $PayEntity_Crit_CPM


    #Debug Show ' - >$PayGroup_Crit     '    $PayGroup_Crit
    #Debug Show ' - >$PayGroup_Crit_PS  '    $PayGroup_Crit_PS
    #Debug Show ' - >$PayGroup_Crit_PSA '    $PayGroup_Crit_PSA
    #Debug Show ' - >$PayGroup_Crit_FA '     $PayGroup_Crit_FA
    #Debug Show ' - >$PayGroup_Crit_FED '    $PayGroup_Crit_FED

    #Debug Show ' - >$Location_Crit     '    $Location_Crit
    #Debug Show ' - >$Location_Crit_PS  '    $Location_Crit_PS
    #Debug Show ' - >$Location_Crit_PSA '    $Location_Crit_PSA
    #Debug Show ' - >$Location_Crit_FA  '    $Location_Crit_FA
    #Debug Show ' - >$Location_Crit_FED '    $Location_Crit_FED

    #Debug Show ' - >$Dept_Crit     '        $Dept_Crit
    #Debug Show ' - >$Dept_Crit_PS  '        $Dept_Crit_PS
    #Debug Show ' - >$Dept_Crit_PSA '        $Dept_Crit_PSA
    #Debug Show ' - >$Dept_Crit_FA  '        $Dept_Crit_FA
    #Debug Show ' - >$Dept_Crit_FED '        $Dept_Crit_FED

    #Debug Show ' -------------------------------------------------------------- ' BOLD

     #Debug Show ' - >$Cal_Run_Id_Criteria      '   $Cal_Run_Id_Criteria
     #Debug Show ' - >$Cal_Run_Id_Criteria_PS   '   $Cal_Run_Id_Criteria_PS
     #Debug Show ' - >$Cal_Run_Id_Criteria_PSA  '   $Cal_Run_Id_Criteria_PSA
     #Debug Show ' - >$Cal_Run_Id_Criteria_FA   '   $Cal_Run_Id_Criteria_FA
     #Debug Show ' - >$Cal_Run_Id_Criteria_FED  '   $Cal_Run_Id_Criteria_FED

     #Debug Show ' - >$Cal_Id_Criteria      '   $Cal_Id_Criteria
     #Debug Show ' - >$Cal_Id_Criteria_PS   '   $Cal_Id_Criteria_PS
     #Debug Show ' - >$Cal_Id_Criteria_PSA  '   $Cal_Id_Criteria_PSA
     #Debug Show ' - >$Cal_Id_Criteria_FA   '   $Cal_Id_Criteria_FA
     #Debug Show ' - >$Cal_Id_Criteria_FED  '   $Cal_Id_Criteria_FED

     #Debug Show ' - >$Emplid_Criteria     '        $Emplid_Criteria
     #Debug Show ' - >$Emplid_Criteria_PS  '        $Emplid_Criteria_PS
     #Debug Show ' - >$Emplid_Criteria_PSA '        $Emplid_Criteria_PSA
     #Debug Show ' - >$Emplid_Criteria_FA '         $Emplid_Criteria_FA

     #Debug Show ' - >$Zero_Pin_Criteria     '      $Zero_Pin_Criteria
     #Debug Show ' - >$Zero_Pin_Criteria_PS  '      $Zero_Pin_Criteria_PS
     #Debug Show ' - >$Zero_Pin_Criteria_PSA '      $Zero_Pin_Criteria_PSA
     #Debug Show ' - >$Zero_Pin_Criteria_FA '       $Zero_Pin_Criteria_FA

     #Debug Show ' - >$PayEntity_Criteria     '     $PayEntity_Criteria
     #Debug Show ' - >$PayEntity_Criteria_PS  '     $PayEntity_Criteria_PS
     #Debug Show ' - >$PayEntity_Criteria_PSA '     $PayEntity_Criteria_PSA

     #Debug Show ' - >$Location_Criteria     '      $Location_Criteria
     #Debug Show ' - >$Location_Criteria_PS  '      $Location_Criteria_PS
     #Debug Show ' - >$Location_Criteria_PSA '      $Location_Criteria_PSA

     #Debug Show ' - >$Department_Criteria     '    $Department_Criteria
     #Debug Show ' - >$Department_Criteria_PS  '    $Department_Criteria_PS
     #Debug Show ' - >$Department_Criteria_PSA '    $Department_Criteria_PSA

     #Debug Show ' - >$Paygroup_Criteria     '      $Paygroup_Criteria
     #Debug Show ' - >$Paygroup_Criteria_PS  '      $Paygroup_Criteria_PS
     #Debug Show ' - >$Paygroup_Criteria_PSA '      $Paygroup_Criteria_PSA
     
     #Debug Show ' - >$Company_Criteria   '         $Company_Criteria

 #Debug Show ' -------------------------------------------------------------- ' BOLD

End-Procedure
!***********************************************************************************************

Begin-Procedure Check_Run_Report(#ptot_domainid,$Year,$comp,$type,:$Run_Option,:$Cancel_option,:$Rpt_Type)
#debug show 'In Check_Run_Report #ptot_domainid '  #ptot_domainid ' $Year ' $Year ' $type '  $type ' $comp ' $comp
 

  ! ST Let $GPCH_EG_TRNS_SEQ = RTRIM(LTRIM($GPCH_EG_TRNS_SEQ,' '),' ')
  Let $Year = RTRIM(LTRIM($Year,' '),' ') 
!FMB 20090102
  Let #Year = $Year
  Let $comp = RTRIM(LTRIM($comp,' '),' ') 
!FMB 20090102
 !ST Let $Report_Name = RTRIM(LTRIM($Report_Name,' '),' ')


Begin-Select on-error=give_warning
A.GPCH_RUN_OPTIONS
A.GPCH_CANCEL_OPTION
A.GPCH_EG_RPT_TYPE
   
  
 Let $Run_Option =  RTRIM(LTRIM(&A.GPCH_RUN_OPTIONS,' '),' ')
 Let $Cancel_Option = RTRIM(LTRIM(&A.GPCH_CANCEL_OPTION,' '),' ')
 Let $Rpt_Type = RTRIM(LTRIM(&A.GPCH_EG_RPT_TYPE,' '),' ') ! For elec transfer
  
from PS_GPCH_EG_REPORTS A

where A.GPCH_EG_DOMAINID= #ptot_domainid !SYED
!FMB 20090102
! and A.GPCH_RC_PAY_YEAR = $Year
and A.GPCH_RC_PAY_YEAR = #Year
and A.COMPANY = $comp
and A.GPCH_SI_PROV_TYPE =$type
!FMB 20151111
and A.GPCH_AL_CPAY_ENDDT = ( select max(A1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_EG_REPORTS A1
where A.GPCH_EG_DOMAINID = A1.GPCH_EG_DOMAINID
and A.GPCH_RC_PAY_YEAR = A1.GPCH_RC_PAY_YEAR
and A.COMPANY = A1.COMPANY  
and A.GPCH_SI_PROV_TYPE = A1.GPCH_SI_PROV_TYPE )

End-Select
  If $Run_Option =''
      let $Run_Option ='N'
  end-if

#debug show 'Out Check_Run_Report $Rpt_Type ' $Rpt_Type ' $Cancel_Option ' $Cancel_Option ' $Run_Option ' $Run_Option
 
End-Procedure
!***********************************************************************************************

Begin-Procedure Read_FK_Mode($Company_Name ,#Domain_ID, $Rc_Adjust_Date, :$FK_Mode)
#debug show 'In Read_FK_Mode  $Company = ' $Company_Name  ' $DomainID ' #Domain_ID

Let $FK_Mode = '0'

Begin-Select on-error=give_warning
DSET.GPCH_FK_MODE

  Let $FK_Mode = RTRIM(LTRIM(&DSET.GPCH_FK_MODE,' '),' ')

From PS_GPCH_EG_DSETDTL DSET
Where DSET.COMPANY = $Company_Name
and DSET.GPCH_EG_DOMAINID = #Domain_ID
and DSET.GPCH_SI_PROV_TYPE = '5'
and DSET.EFFDT = (Select Max(DSET1.EFFDT) From PS_GPCH_EG_DSETDTL DSET1 where DSET1.COMPANY = DSET.COMPANY
and DSET.GPCH_EG_DOMAINID = DSET1.GPCH_EG_DOMAINID and DSET.GPCH_SI_PROV_TYPE = DSET1.GPCH_SI_PROV_TYPE and DSET1.EFFDT <= {DATEIN-PREFIX}$Rc_Adjust_Date{DATEIN-SUFFIX})
End-Select

#debug show 'Out Read_FK_Mode $FK_Mode = ' $FK_Mode ' $Rc_Adjust_Date ' $Rc_Adjust_Date
End-Procedure
!***********************************************************************************************

 Begin-Procedure Init_Statustbl
 let $ErrorString='0004'
 !FMB 20090103
  let #ptot_year = $ptot_year
begin-Select on-error=give_warning
M.GPCH_REPORT_STATUS

   let $rowexist='Y'
 
From PS_GPCH_EG_RSTATUS M
where    M.COMPANY = $ptot_company
!FMB 20090102
!   AND    M.GPCH_RC_PAY_YEAR =$ptot_year
   AND    M.GPCH_RC_PAY_YEAR = #ptot_year
   AND  M.GPCH_EG_DOMAINID=#ptot_domainid
   AND  M.GPCH_SI_PROV_TYPE=$ptot_provtype
end-select
if($rowexist=' ')

!FMB 20110427 Replaced $Ctl_Year by #Ctl_Year
let #Ctl_Year = $Ctl_Year

!FMB 20110427 use $_SysDateTime instead of $DateOfRun
#debug show '$SysDateTime = ' $SysDateTime  ' ' $DateOfRun
Begin-SQL on-error=give_warning

  Insert Into PS_GPCH_EG_RSTATUS(COMPANY,GPCH_RC_PAY_YEAR,GPCH_EG_DOMAINID,GPCH_SI_PROV_TYPE,GPCH_REPORT_STATUS,TIME_STAMP,GPCH_EG_ADD_DTA)
 Values ($Comp,#Ctl_Year,#ptot_domainid,$ptot_provtype ,$ErrorString,{DATETIMEIN-PREFIX}$SysDateTime{DATETIMEIN-SUFFIX},'N')


End-SQL

End-if
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif
if($rowexist='Y')
Begin-SQL on-error=give_warning
Update PS_GPCH_EG_RSTATUS set GPCH_REPORT_STATUS= $ErrorString
   where COMPANY = $comp
!FMB 20090102
!   AND  GPCH_RC_PAY_YEAR =$Ctl_Year
    AND  GPCH_RC_PAY_YEAR = #ptot_year
   AND  GPCH_EG_DOMAINID = #ptot_domainid
   AND  GPCH_SI_PROV_TYPE = $ptot_provtype

End-SQL
End-if


#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

End-Procedure
!***********************************************************************************************
Begin-Procedure Update_Status($Ctl_Year,#ptot_domainid,$Comp,$Type,$Run_Option,$DateOfRun,$Cancel_option)
#debug show 'Update_Status in'
#debug show ' $Ctl_Year = ' $Ctl_Year ' $ptot_year = ' $ptot_year  

!FMB 20110427 replaced in this procedure $Ctl_Year by #Ctl_Year / $ptot_year by #ptot_year
let #Ctl_Year = $Ctl_Year 
 
Evaluate $Run_Option
  When = 'Y'
    Let $status = '0001'
  break
  When = 'N'

!FMB 20090103
  #debug show ' $Ctl_Year = ' $Ctl_Year
   let #Ctl_Year = $Ctl_Year  

Begin-Select on-error=give_warning
A.GPCH_REPORT_STATUS
A.TIME_STAMP
  Let $status = &A.GPCH_REPORT_STATUS
  Let $TimeStamp = &A.TIME_STAMP
from PS_GPCH_EG_RSTATUS A
Where A.GPCH_RC_PAY_YEAR = #Ctl_Year
      AND A.GPCH_EG_DOMAINID =#ptot_domainid
      AND A.COMPANY = $Comp
      AND A.GPCH_SI_PROV_TYPE = $Type
End-Select

 if $status =''
    Let $status = '0008'
    Let $DateOfRun = ''
 Else
    Let $DateOfRun = $TimeStamp
 End-If
 Break
End-evaluate

if $Cancel_option='Y'
  Let $Status = '0008'
End-if

begin-SQL on-error=give_warning
  DELETE FROM PS_GPCH_EG_RSTATUS Where GPCH_RC_PAY_YEAR = #Ctl_Year AND GPCH_EG_DOMAINID =#ptot_domainid AND COMPANY = $comp AND GPCH_SI_PROV_TYPE= $Type
End-SQL
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif
  Do Convert-To-DTU-Date($DateOfRun, $DateOfRun_DTU)
  Do Convert-From-DTU-Date($DateOfRun_DTU,$DateOfRun)

!FMB 20110427 use $_SysDateTime instead of $DateOfRun
show '$_SysDateTime = ' $_SysDateTime  ' ' $DateOfRun

begin-SQL on-error=give_warning
 Insert Into PS_GPCH_EG_RSTATUS(COMPANY,GPCH_RC_PAY_YEAR,GPCH_EG_DOMAINID,GPCH_SI_PROV_TYPE,GPCH_REPORT_STATUS,TIME_STAMP,GPCH_EG_ADD_DTA)
 Values ($Comp,#Ctl_Year,#ptot_domainid,$Type, $Status,{DATETIMEIN-PREFIX}$_SysDateTime{DATETIMEIN-SUFFIX},'N')
End-SQL
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif
End-Procedure
!************************************************************************************************************
Begin-Procedure Cancle_YEA($ptot_requestid,$Ctl_Year,$comp,$Type,#ptot_domainid)
 
  
   let $ptot_requestid= rtrim(ltrim($ptot_requestid,' '),' ')
   let $Ctl_Year = rtrim(ltrim($Ctl_Year,' '),' ')
   let $comp = rtrim(ltrim($comp,' '),' ')
   let $Type = rtrim(ltrim($Type,' '),' ')
   let $ptot_providercd = rtrim(ltrim($ptot_providercd,' '),' ')
   
Begin-Sql on-error=give_warning

 delete from PS_GPCH_EG_PTOTALS Where GPCH_EG_REQUEST_ID=$ptot_requestid  AND
 GPCH_RC_PAY_YEAR = #Ctl_Year AND COMPANY = $comp AND GPCH_SI_PROV_TYPE = $Type 
End-Sql
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif
Begin-Sql on-error=give_warning

!FMB 20110427 replaced $Ctl_Year by #Ctl_Year / $ptot_year by #ptot_year
delete from  PS_GPCH_EG_PERSON WHERE GPCH_EG_DOMAINID=#ptot_domainid AND GPCH_RC_PAY_YEAR = #Ctl_Year AND COMPANY = $comp AND GPCH_SI_PROV_TYPE = $Type
End-Sql
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

End-Procedure

!************************************************************************************************************
Begin-Procedure Get-PTotals-Data($Provider_crit,$provtype,#Domainid,:$ptot_company,:$ptot_year,:#ptot_domainid,:$ptot_providercd,:$ptot_provtype,:$ptot_requestid,:$ptot_userkey) 

! GPCH_EG_TRNS_SEQ  does not exist now
#debug show 'In Get-PTotals-Data $ptot_company ' $ptot_company ' $ptot_year ' $ptot_year ' $provtype ' $provtype ' #Domainid ' #Domainid
let #ptot_year = $ptot_year
Begin-select on-error=give_warning
P.COMPANY
P.GPCH_RC_PAY_YEAR
P.GPCH_EG_DOMAINID
P.GPCH_SI_PROV_CD
P.GPCH_SI_PROV_TYPE
P.GPCH_EG_REQUEST_ID
P.GPCH_EG_USERKEY

    let $ptot_company    = &P.COMPANY
    let #ptot_year       = &P.GPCH_RC_PAY_YEAR
    let #ptot_domainid   = &P.GPCH_EG_DOMAINID
    let $ptot_providercd = RTRIM(ltrim(&P.GPCH_SI_PROV_CD,' '),' ')
    let $ptot_provtype   = &P.GPCH_SI_PROV_TYPE
    let $ptot_requestid  = &P.GPCH_EG_REQUEST_ID
    let $ptot_userkey    = RTRIM(ltrim(&P.GPCH_EG_USERKEY,' '),' ')
      
from PS_GPCH_EG_PTOTALS P
     where P.COMPANY = $ptot_company
           and P.GPCH_RC_PAY_YEAR  = #ptot_year
           and P.GPCH_SI_PROV_TYPE = $provtype
           and P.GPCH_EG_DOMAINID  = #Domainid
           [$Provider_crit]
end-select
    
    DO Format-Number(#ptot_year, $ptot_year, '8888')
#debug show 'Out Get-PTotals-Data $ptot_company ' $ptot_company ' #ptot_year ' #ptot_year ' #ptot_domainid ' #ptot_domainid ' $ptot_provtype ' $ptot_provtype ' $ptot_providercd ' $ptot_providercd
end-procedure

!************************************************************************************************************
 Begin-Procedure Get-Provider($providertype,$local_prcs_oprid,$local_prcs_run_cntl_id,:$prov_crit)
 #debug show 'In Get-Provider' 
Begin-select on-error=give_warning
PRO.GPCH_SI_PROV_CD
  let $prov_crit= RTRIM(ltrim(&PRO.GPCH_SI_PROV_CD,' '),' ')

from PS_GPCH_RC_PROVIDR PRO
where PRO.GPCH_SI_PROV_TYPE = $providertype
  AND PRO.OPRID = $local_prcs_oprid
  AND PRO.RUN_CNTL_ID = $local_prcs_run_cntl_id
End-Select
#debug show 'Out Get-Provider' 
End-Procedure
!************************************************************************************************************


Begin-Procedure Get-ResolnId($reportdir3,:$Reslnid)


   open $reportdir3 as 10 FOR-READING RECORD=2000:FIXED
   read  10  into  $Resid:2000 STATUS=#status_num_var
   find '$Resolution' in $Resid 0 #res_pos
   let $Reslnid=''
   let $Reslnid =substr($Resid,#res_pos+15,6)
    close 10
End-Procedure


!***********************************************************************
Begin-Procedure Bracket-COmpany-Data
  
  
Begin-Select on-error=give_warning
BR.DATA_KEY1
BR.DATA_VAL2

   let $Company_Br = rtrim(&BR.DATA_KEY1,' ')
         
     
   let $Companycnt = $Company_Br

   if $Companycnt <> ''
      let $temp-value        = rtrim($Companycnt,' ')
      let $Company-String-PY = $Company-String-PY || '''' || $temp-value || '''' || ','
      let #count_company     = #count_company + 1
   end-if

FROM PS_GP_BRACKET AR,PS_GP_BRACKET_DTL BR , PS_GP_PIN CR
WHERE AR.PIN_NUM   = BR.PIN_NUM
AND   CR.PIN_NUM   = AR.PIN_NUM
AND   AR.EFFDT     = BR.EFFDT
AND   AR.EFFDT     = (SELECT MAX(A1R.EFFDT) FROM PS_GP_BRACKET A1R
                     WHERE A1R.PIN_NUM = AR.PIN_NUM
                     AND   A1R.EFFDT   <= {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX})
AND   CR.PIN_NM    = 'CH_00_BLENTITY'
AND   BR.DATA_VAL2 = $ptot_company

End-Select

 let $Company-String-PY = rtrim($Company-String-PY,',')
 

 if #count_company <> 0 and $legalrep_flag ='Y'
     let $Company_Criteria_BR1   = ' PBD.COMPANY IN ( ' || $Company-String-PY || ')'
     let $Company_Criteria_BR2   = ' RP1.COMPANY IN ( ' || $Company-String-PY || ')'
 else
     let $Company_Criteria_BR1   = ' PBD.COMPANY = ''' || $ptot_company || ''' '
     let $Company_Criteria_BR2   = ' RP1.COMPANY = ''' || $ptot_company || ''' '
 end-if

#DEBUG show '<- Bracket-COmpany-Data '
End-Procedure

!*********************************************************************

begin-procedure Get-LegalEntity-Flag
 

begin-Select on-error=give_warning
K.LEGAL_REP
  
  let $legalrep_flag = RTRIM(ltrim(&K.LEGAL_REP,' '),' ')
           
from PS_GPCH_EG_DSET K
where K.COMPANY=$ptot_company
and K.GPCH_EG_DOMAINID=#ptot_domainid
and K.EFFDT=(select max(M.EFFDT) from PS_GPCH_EG_DSET M where M.COMPANY=$ptot_company and M.GPCH_EG_DOMAINID=#ptot_domainid and  M.EFFDT <= {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX})
end-select

End-Procedure

!*********************************************************************
! extract the needed data from GP_RSLT_ERN_DED to speed up the report
begin-procedure Extract_ERN_DED_YTD_CALC
#debug show '-> Extract_ERN_DED_YTD_CALC'

!***********************************************************************
! Provide earnings contributing (Accumulator resolution routines)

    
    !let $AccumlatorNames = '''CH_TX_GE39_YTD'',''CH_TX_GE31_YTD'',''CH_TX_GE34_YTD'',''CH_LW_30'',''CH_LW_15006'',''CH_LW_1311'',''CH_LW_1312'',''CH_LW_1321'',''CH_LW_1322'',''CH_LW_15001'',''CH_LW_120'''
    do GPCHUT00_CALC($AccumlatorNames,'CHE',$Ctl_Curr_Pay_End_Dt,'',#prcs_process_instance)
   
!***********************************************************************

!FMB 20121015 do Begin_Transaction

!FMB 20121015Begin-Sql on-error=give_warning
!FMB 20121015INSERT INTO PS_GPCHST023_TMP
!FMB 20121015(PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, INSTANCE,
!FMB 20121015PIN_NUM, SLICE_BGN_DT, SLICE_END_DT, CALC_RSLT_VAL, UNIT_RSLT_VAL,
!FMB 20121015BASE_RSLT_VAL, RATE_RSLT_VAL, PCT_RSLT_VAL, GPCH_TX_CANTON)
!FMB 20121015SELECT [$prcs_process_instance],ED.EMPLID, 'XXXX', ED.EMPL_RCD, 'XXXXX', 'XXXXXX',
!FMB 20121015       1, 1, T78.PIN_NUM, $Ctl_Curr_Pay_End_Dt,
!FMB 20121015       $Ctl_Curr_Pay_End_Dt, sum(ED.CALC_RSLT_VAL * T78.SIGNVALUE ), sum(ED.UNIT_RSLT_VAL* T78.SIGNVALUE ),
!FMB 20121015       0.00, 0.00, 0.00, T011.GPCH_TX_CANTON
!FMB 20121015FROM PS_GP_RSLT_ERN_DED ED, PS_GPCHTX011_TMP T011, PS_GPCHAL078_TMP T78
!FMB 20121015Where T011.PROCESS_INSTANCE = #prcs_process_instance
!FMB 20121015AND ED.EMPLID = T011.EMPLID
!FMB 20121015AND ED.CAL_RUN_ID = T011.CAL_RUN_ID
!FMB 20121015AND ED.EMPL_RCD = T011.EMPL_RCD
!FMB 20121015AND ED.GP_PAYGROUP = T011.GP_PAYGROUP
!FMB 20121015AND ED.CAL_ID = T011.CAL_ID
!FMB 20121015AND ED.RSLT_SEG_NUM = T011.RSLT_SEG_NUM
!FMB 20121015AND T78.PROCESS_INSTANCE = #prcs_process_instance
!FMB 20121015AND ED.PIN_NUM = T78.PIN_MBR_NUM
! FMB 20120530 AND T011.GPCH_TX_CANTON='GE'
!FMB 20121015Group by ED.EMPLID,ED.EMPL_RCD,T78.PIN_NUM, T011.GPCH_TX_CANTON

!FMB 20121015end-sql

!FMB 20121015do Commit_Transaction

!FMB 20121015#debug show 'Rows inserted Extract_ERN_DED_YTD: ' #sql-count

#debug show '<- Extract_ERN_DED_YTD_CALC'
end-procedure Extract_ERN_DED_YTD_CALC

!****************************************************************************
Begin-procedure Get_Accum_Value($AccumName,$Emplid,#Empl_Rcd,:#Pin_Value,$Canton,$RecBgn,$RecEnd, #prcs_process_instance)
#debug show '->Get_Accum_Value'
#debug show ' #prcs_process_instance = ' #prcs_process_instance ' $AccumName = ' $AccumName ' $Emplid = ' $Emplid ' #Empl_Rcd = ' #Empl_Rcd ' $Canton= ' $Canton  ' $RecBgn = ' $RecBgn ' $RecEnd = ' $RecEnd


Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHST023_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql


!FMB 20121015 BEGIN
 do Begin_Transaction
 
let $prcs_process_instance = edit(#prcs_process_instance, '9999999999')
let $Ctl_Curr_Pay_End_Dt_1 = '''' || $_Ctl_Curr_Pay_End_Dt || ''''
#debug show '$prcs_process_instance = ' $prcs_process_instance
#debug show ' $Ctl_Curr_Pay_End_Dt_1 = ' $Ctl_Curr_Pay_End_Dt_1

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHST023_TMP
(PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, INSTANCE,
PIN_NUM, SLICE_BGN_DT, SLICE_END_DT, CALC_RSLT_VAL, UNIT_RSLT_VAL,
BASE_RSLT_VAL, RATE_RSLT_VAL, PCT_RSLT_VAL, GPCH_TX_CANTON)
SELECT [$prcs_process_instance],ED.EMPLID, 'XXXX', ED.EMPL_RCD, 'XXXXX', 'XXXXXX',
       1, 1, T78.PIN_NUM, {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX},
        {DATEIN-PREFIX}$Ctl_Curr_Pay_End_Dt{DATEIN-SUFFIX}, sum(ED.CALC_RSLT_VAL * T78.SIGNVALUE ), sum(ED.UNIT_RSLT_VAL* T78.SIGNVALUE ),
       0.00, 0.00, 0.00, T011.GPCH_TX_CANTON
FROM PS_GP_RSLT_ERN_DED ED, PS_GPCHTX011_TMP T011, PS_GPCHAL078_TMP T78
Where T011.PROCESS_INSTANCE = #prcs_process_instance  
 AND  T011.EMPLID           = $Emplid
 AND  T011.EMPL_RCD         = #Empl_Rcd
 AND  T78.PIN_NUM           =(select P3.PIN_NUM from PS_GP_PIN P3
                               where P3.COUNTRY  = 'CHE'
                                 AND P3.PIN_TYPE = 'AC'
                                 AND P3.PIN_NM   = $AccumName) 
 AND ED.EMPLID              = T011.EMPLID
 AND ED.CAL_RUN_ID          = T011.CAL_RUN_ID
 AND ED.EMPL_RCD            = T011.EMPL_RCD
 AND ED.GP_PAYGROUP         = T011.GP_PAYGROUP
 AND ED.CAL_ID              = T011.CAL_ID
!FMB 20121015 this is the change besides the move into employee processing
 AND T011.SEG_END_DT       between {DATEIN-PREFIX}$RecBgn{DATEIN-SUFFIX} and {DATEIN-PREFIX}$RecEnd{DATEIN-SUFFIX}
 AND ED.RSLT_SEG_NUM        = T011.RSLT_SEG_NUM
 AND T78.PROCESS_INSTANCE   = #prcs_process_instance
 AND ED.PIN_NUM             = T78.PIN_MBR_NUM
! FMB 20120530 AND T011.GPCH_TX_CANTON='GE'
Group by ED.EMPLID,ED.EMPL_RCD,T78.PIN_NUM, T011.GPCH_TX_CANTON

end-sql

do Commit_Transaction

#debug show 'Rows inserted Extract_ERN_DED_YTD: ' #sql-count
!FMB 20121015 END


BEGIN-SELECT on-error=give_warning
TX023.CALC_RSLT_VAL

   let #Pin_Value = &TX023.CALC_RSLT_VAL
   
FROM PS_GPCHST023_TMP TX023
Where TX023.EMPLID         = $Emplid
  AND TX023.EMPL_RCD       = #Empl_Rcd
  AND TX023.GPCH_TX_CANTON = $Canton
!FMB 20120530
  AND TX023.PROCESS_INSTANCE = #prcs_process_instance
!  AND TX023.PIN_NUM        =(select P3.PIN_NUM from PS_GP_PIN P3
!                               where P3.COUNTRY  = 'CHE'
!                                 AND P3.PIN_TYPE = 'AC'
!                                 AND P3.PIN_NM   = $AccumName)
End-Select

#debug show '<- Get_Accum_Value'
end-procedure Get_Accum_Value

!****************************************************************************

!****************************************************************************
! GPCHUT00  - This calls GPCHUT01 for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT00_CALC($AccumNames,$Country,$Ctl_Curr_Pay_End_Dt,$Pin_Category,#prcs_process_instance)
#debug show '$AccumNames = ' $AccumNames

   if $AccumNames = ''
      let $Accum_Name_Clause = ''
   else
      let $Accum_Name_Clause ='AND P2.PIN_NM in ('||$AccumNames||')'
   end-if
   
   if $Pin_Category =''
      let $Pin_Category_Clause=''
   else
      let $Pin_Category_Clause='AND P2.PIN_CATEGORY = $Pin_Category'
   end-if
   
   if $Country =''
      let $Country ='CHE'
   end-if
  
! Step 01 to Step 04

#debug show 'GPCHUT00 <-- '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL078_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'Do Accu Dynamic Properties --> '

BEGIN-SELECT on-error=give_warning
P2.PIN_NUM
P2.PIN_NM
 let #PIN  = &P2.PIN_NUM

#debug show 'inside select #PIN = '  #PIN

  do GPCHUT01_CALC(#PIN,#prcs_process_instance, $Ctl_Curr_Pay_End_Dt)

from
PS_GP_PIN P2
  where P2.COUNTRY = $Country
  AND P2.PIN_TYPE = 'AC'
  [$Accum_Name_Clause]
  [$Pin_Category_Clause]
  AND not exists ( select 'X' from PS_GPCHAL078_TMP T1
  where T1.PIN_NUM = P2.PIN_NUM 
!FMB 20120530 
  and T1.PROCESS_INSTANCE = #prcs_process_instance 
)

 
END-SELECT  

#debug show 'GPCHUT00 --> '

End-procedure GPCHUT00


!****************************************************************************
! GPCHUT01  - This one is called for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT01_CALC(#PIN,#prcs_process_instance,$Ctl_Curr_Pay_End_Dt)
! Step 01 to Step 04

#debug show 'GPCHUT01_CALC <-- '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif


!*****************************************************************************
! Step 05 - insert initial row for this accumulator

#debug show 'Step05 <-- '

 let #GPCH_LOOP = 1
   
#debug show 'inside select #PIN = '  #PIN
 
Begin-Sql on-error=give_warning

  
   
INSERT INTO PS_GPCHAL076_TMP
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
!Values (#prcs_process_instance,0,#PIN,#PIN, $Ctl_From_Dt_Nrml, NULL,' ', 1,' ',0,0.00 )
Values (#prcs_process_instance,0,#PIN,#PIN, {DATEIN-PREFIX}$Ctl_From_Dt_Nrml{DATEIN-SUFFIX}, NULL,' ', 1,' ',0,0)


End-Sql
!****************************************************************************
! Step 06 - Do while

#debug show 'Step06 <-- '

 let #FMBCOUNT = 1
 let #FMBCNTRL = 0

 while #FMBCOUNT > 0 AND #FMBCNTRL < 100

#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP '#FMBCOUNT = ' #FMBCOUNT
! ====
 
! Call GPCHUT011

 do GPCHUT11_CALC(#PIN,$Ctl_Curr_Pay_End_Dt,#FMBCOUNT,#GPCH_LOOP,#prcs_process_instance,#FMBTempCOUNT,#GPCH_TMP_LOOP)
 let #FMBCNTRL = #FMBCNTRL + 1
 let #FMBCOUNT = #FMBTempCOUNT
 let #GPCH_LOOP = #GPCH_TMP_LOOP

! ====
 END-While

!****************************************************************************
! Step 06
 
#debug show 'Step07 <-- '
Begin-Sql on-error=give_warning

INSERT INTO PS_GPCHAL078_TMP
(PROCESS_INSTANCE , PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SUM (SIGNVALUE), ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM
  FROM PS_GPCHAL077_TMP, PS_GP_PIN GPPIND3
 WHERE PROCESS_INSTANCE = #prcs_process_instance and GPPIND3.PIN_NUM = #PIN and GPPIND3.COUNTRY = 'CHE'
  GROUP BY PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM,ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM

End-Sql

#debug show 'delete after GPCHAL078_TMP #PIN = '  #PIN ' #GPCH_LOOP = ' #GPCH_LOOP

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'GPCHUT01_CALC --> '

End-procedure GPCHUT01_CALC


!****************************************************************************
! GPCHUT011
!****************************************************************************
! Step 01
!****************************************************************************
Begin-procedure GPCHUT11_CALC(#PIN,$Ctl_Curr_Pay_End_Dt, #FMBCOUNT,#GPCH_LOOP,#prcs_process_instance,:#TempCount,:#TempLoop)

#debug show 'GPCHUT11_CALC <-- '
let $GPCH_LOOP = edit(#GPCH_LOOP, '999')

#debug show ' $Ctl_Start_Dt = ' $_Ctl_Start_Dt ' $Ctl_End_Dt = ' $_Ctl_End_Dt ' $Ctl_Curr_Pay_End_Dt = ' $Ctl_Curr_Pay_End_Dt
#debug show ' $Start_Date = ' $Start_Date ' $Rpt_To_Date = ' $Rpt_To_Date

Begin-SQL on-error=give_warning

INSERT INTO PS_GPCHAL077_TMP
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE ,
 #ifdef DB2ALL
    [$GPCH_LOOP]
 #else
    #GPCH_LOOP
 #endif
 , GPPIND4.PIN_NUM, A.PIN_MBR_NUM, A.BGN_DT, A.END_DT, A.ENTRY_TYPE_ELEM, CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE,
  A.ENTRY_TYPE_PCT, A.PCT_TO_ACM, A.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A,
       PS_GPCHAL076_TMP B,
       PS_GP_PIN GPPIND4
 WHERE A.ENTRY_TYPE_ELEM IN ('ER0', 'DD0')
   AND A.PIN_NUM = B.PIN_MBR_NUM
   AND GPPIND4.PIN_NUM = #PIN
   AND B.PROCESS_INSTANCE = #prcs_process_instance
   AND (A.BGN_DT <= {DATEIN-PREFIX}$_Ctl_Start_Dt{DATEIN-SUFFIX}
   AND (A.END_DT >= {DATEIN-PREFIX}$_Ctl_Start_Dt{DATEIN-SUFFIX} OR A.END_DT IS NULL))

END-SQL


!****************************************************************************
! Step 02
let $GPCH_LOOP = edit(#GPCH_LOOP, '999')
Begin-SQL on-error=give_warning

INSERT INTO PS_GPCHAL076_TMP
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE  ,
  #ifdef DB2ALL
    [$GPCH_LOOP]
 #else
    #GPCH_LOOP
 #endif
 
 , GPPIND2.PIN_NUM, A.PIN_MBR_NUM, B.BGN_DT, B.END_DT, B.ENTRY_TYPE_ELEM,
 CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE , B.ENTRY_TYPE_PCT, B.PCT_TO_ACM, B.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A
  , PS_GPCHAL076_TMP B ,
  PS_GP_PIN GPPIND2
 WHERE A.ENTRY_TYPE_ELEM = 'AC4'
   AND GPPIND2.PIN_NUM = #PIN
   AND A.PIN_NUM = B.PIN_MBR_NUM
   AND B.PROCESS_INSTANCE = #prcs_process_instance
   AND (A.BGN_DT <= {DATEIN-PREFIX}$_Ctl_Start_Dt{DATEIN-SUFFIX}
   AND (A.END_DT >= {DATEIN-PREFIX}$_Ctl_Start_Dt{DATEIN-SUFFIX} OR A.END_DT IS NULL))

END-SQL


!****************************************************************************
! Step 03

Begin-SQL on-error=give_warning

DELETE FROM PS_GPCHAL076_TMP  WHERE
      PROCESS_INSTANCE = #prcs_process_instance AND
      GPCH_LOOP < #GPCH_LOOP

END-SQL
 


!****************************************************************************
! Step 03

 let #FMBCOUNT = 0
 
BEGIN-SELECT on-error=give_warning
COUNT(*)        &elcount
#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP
! ====
 let #FMBCOUNT = &elcount

FROM PS_GPCHAL076_TMP A1

 WHERE A1.PROCESS_INSTANCE = #prcs_process_instance

! ====
END-SELECT

 If #FMBCOUNT > 0
 
 let #GPCH_LOOP = #GPCH_LOOP + 1
 
 End-if
  let #TempCount=#FMBCOUNT
  let #TempLoop =#GPCH_LOOP


End-procedure GPCHUT11_CALC

!******************************************************************************************
begin-procedure Delete-Rec-st023
#Debug show '<- Delete-Rec-st023'

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHST023_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug show '-> Delete-Rec-st023'
end-procedure Delete-Rec-st023

!*************************************************************************************
begin-procedure Delete-Rec-AL078
#Debug show '<- Delete-Rec-AL078'

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHAL078_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug show '-> Delete-Rec-AL078'
end-procedure Delete-Rec-AL078

!*************************************************************************************
begin-procedure Begin_Transaction
  #ifdef SYBASE
    Begin-Sql on-error=give_warning
      BEGIN TRANSACTION
    End-SQL
  #endif

end-procedure
!******************************************************************************************
begin-procedure Commit_Transaction
  #ifdef SYBASE
    Begin-Sql on-error=give_warning
      COMMIT TRANSACTION
    End-SQL
  #endif

  #ifdef ORACLE
      COMMIT
  #endif
end-procedure
!***********************************************************************

Begin-Procedure Get-provider-canton-SD($Ctl_PayEntity,#ptot_year,#ptot_domainid,$ptot_provtype,:$Canton_Criteria_Elm)
#debug show '-> Get-provider-canton-SD Company ' $Ctl_PayEntity ' year ' $ptot_year ' domain ' #ptot_domainid ' $ptot_provtype ' $ptot_provtype

 let #count_canton_Elm= 0
 let $Canton_String_Elm = ''

Begin-Select on-error=give_warning
TOT3.GPCH_EG_USERKEY

  let $Canton_Elm = rtrim(&TOT3.GPCH_EG_USERKEY,' ')
  
    if $Canton_Elm <> ''
       let $Canton_String_Elm = $Canton_String_Elm || '''' || $Canton_Elm || '''' || ','
       let #count_canton_Elm     = #count_canton_Elm + 1 
    End-If

FROM PS_GPCH_EG_PTOTALS TOT3 
where TOT3.COMPANY = $Ctl_PayEntity
      AND TOT3.GPCH_RC_PAY_YEAR = #ptot_year
      AND TOT3.GPCH_EG_DOMAINID = #ptot_domainid
      AND TOT3.GPCH_SI_PROV_TYPE = $ptot_provtype
      AND TOT3.GPCH_EG_USERKEY NOT IN ('99',' ')
End-Select

 let $Canton_String_Elm = rtrim($Canton_String_Elm,',')
 
 If #count_canton_Elm <> 0
     let $Canton_Criteria_Elm   = 'AND FK2.STATE IN ( ' || $Canton_String_Elm || ')'
   else 
    let $State_Dummy ='XX'
    let $Canton_Criteria_Elm   =  ' AND FK2.STATE = ''' || $State_Dummy || ''' '
                       
 End-If
 
#debug show '<- Get-provider-canton-SD $Canton_Criteria_Elm ' $Canton_Criteria_Elm
end-procedure
!****************************************************************************

Begin-Procedure Get-provider-canton-NEW
#debug show '-> Get-provider-canton-NEW Company ' $ptot_company ' provider code ' $ptot_providercd ' end date ' $ReportEndD 
  
 let #count_canton_Elm= 0
 let $Canton_String_Elm = ''

Begin-Select on-error=give_warning
 
FAK_STXML3.GPCH_TX_CANTON

  let $Canton_Elm = rtrim(&FAK_STXML3.GPCH_TX_CANTON,' ')
  
    if $Canton_Elm <> ''
       let $Canton_String_Elm = $Canton_String_Elm || '''' || $Canton_Elm || '''' || ','
       let #count_canton_Elm     = #count_canton_Elm + 1 
    End-If

 FROM PS_GPCH_TX_FAK_STX FAK_STXML3 

where FAK_STXML3.COMPANY= $ptot_company
AND FAK_STXML3.GPCH_SI_PROV_CD = $ptot_providercd
AND   FAK_STXML3.EFFDT = (SELECT max(FAK_STXML4.EFFDT) from PS_GPCH_TX_FAK_STX FAK_STXML4
                                 WHERE FAK_STXML4.EFFDT         <= {DATEIN-PREFIX}$ReportEndD{DATEIN-SUFFIX}
                                  AND     FAK_STXML4.COMPANY = $ptot_company
                                AND FAK_STXML4.GPCH_SI_PROV_CD = $ptot_providercd)
End-Select

 let $Canton_String_Elm = rtrim($Canton_String_Elm,',')
 
 If #count_canton_Elm <> 0
     let $Canton_Criteria_Elm   = 'AND CANT.STATE IN ( ' || $Canton_String_Elm || ')'
   else 
    let $State_Dummy ='XX'
    let $Canton_Criteria_Elm   =  ' AND CANT.STATE = ''' || $State_Dummy || ''' '
                       
 End-If
 
#debug show '<- Get-provider-canton-NEW'
end-procedure
!****************************************************************************

begin-procedure Get_EO_Employee_Xml_Generic
#debug show 'In Get_EO_Employee_Xml_Generic $Empl_ID ' $Empl_ID ' $ReportBeginDate ' $ReportBeginDate ' $ReportEndDate ' $ReportEndDate
#debug show 'sps $BeneficiaryPerson => ' $BeneficiaryPerson

!sps Employee National Id
Let $NID_xml = ''
Let $NID = ''
Begin-Select on-error=give_warning
NAT_ID.NATIONAL_ID

       Let $NID = LTRIM(RTRIM(&NAT_ID.NATIONAL_ID,' '),' ')
       
from PS_PERS_NID NAT_ID
where NAT_ID.EMPLID = $Empl_ID
AND NAT_ID.COUNTRY = 'CHE'
AND NAT_ID.NATIONAL_ID_TYPE = 'NNSS'
End-Select

if $NID <> ''
   let $NID_xml = '<SV-AS-Number>' ||
                  substr($NID,1,3)||'.'||
                  substr($NID,4,4)||'.'||
                  substr($NID,8,4)||'.'||
                  substr($NID,12,2) ||
                  '</SV-AS-Number>'
end-if

#debug show ' $NID_xml = ' $NID_xml

!sps Employee Name
Let $FirstName_xml = ''
Let $LastName_xml = ''
Begin-select on-error=give_warning
P_NAMES.FIRST_NAME
P_NAMES.LAST_NAME

  let $FirstName_xml = '<FirstName>' || &P_NAMES.FIRST_NAME || '</FirstName>'
  let $LastName_xml = '<LastName>' || &P_NAMES.LAST_NAME || '</LastName>'
   
FROM PS_NAMES P_NAMES
WHERE P_NAMES.EMPLID = $Empl_ID AND
      P_NAMES.NAME_TYPE = 'PRI' AND
      P_NAMES.EFFDT = ( select max(P_NAMES1.EFFDT) from PS_NAMES P_NAMES1
       where P_NAMES.EMPLID = P_NAMES1.EMPLID
       AND   P_NAMES.NAME_TYPE = P_NAMES1.NAME_TYPE
       AND   P_NAMES1.EFFDT <= {DATEIN-PREFIX}$ReportEndDate{DATEIN-SUFFIX} )
end-select

!sps Employee date of birth and death
Let $DateOfDeath = ' '
Let $DateOfDeath_xml = ' '
Let $DateOfBirth = ' '
Let $DateOfBirth_xml = ' '
Begin-select on-error=give_warning
PERSON.DT_OF_DEATH
PERSON.BIRTHDATE
 
  !sps Need to print date of death only if it falls in reporting period???
  If Not Isnull (&PERSON.DT_OF_DEATH)
     do Format-DateTime ( $ReportBeginDate , $period_start_Date , {DEFCMP} , '' , '' )
     do Format-DateTime ( $ReportEndDate , $period_end_Date , {DEFCMP} , '' , '' )
     do Format-DateTime ( &PERSON.DT_OF_DEATH , $death_Date , {DEFCMP} , '' , '' )
     !sps enable the if condition in case the date of death needs to be printed only if it falls in reporting preiod\
     !If $death_Date >= $period_start_Date and $death_Date <= $period_end_Date
        do ConvertToComponents(&PERSON.DT_OF_DEATH , $yy_Ctl , $mm_Ctl , $dd_Ctl)
        let $DateOfDeath = $yy_Ctl || '-' || $mm_Ctl || '-' || $dd_Ctl
        let $DateOfDeath_xml = '<DateOfDeath>' || $DateOfDeath ||'</DateOfDeath>'
     !End-If
  Else
       let $DateOfDeath_xml = '<DateOfDeath/>'
  End-If

  #debug show 'sps &PERSON.BIRTHDATE ' &PERSON.BIRTHDATE
  If Not Isnull (&PERSON.BIRTHDATE)
     do ConvertToComponents(&PERSON.BIRTHDATE , $yy_Ctl , $mm_Ctl , $dd_Ctl)
     let $DateOfBirth = $yy_Ctl || '-' || $mm_Ctl || '-' || $dd_Ctl
     let $DateOfBirth_xml = '<DateOfBirth>' || $DateOfBirth ||'</DateOfBirth>'
  Else
     let $DateOfBirth_xml = '<DateOfBirth/>'
  End-If

FROM PS_PERSON PERSON
WHERE PERSON.EMPLID = $Empl_ID
end-select

!sps Employee Sex
Let $Sex =''
Begin-select on-error=give_warning
PERSON_EFFDT.SEX

  let $Sex = &PERSON_EFFDT.SEX
  If $Sex = 'U' 
    let $Sex = 'M'
  End-If
   
FROM PS_PERS_DATA_EFFDT PERSON_EFFDT
WHERE PERSON_EFFDT.EMPLID = $Empl_ID AND
      PERSON_EFFDT.EFFDT = ( select max(PERSON_EFFDT1.EFFDT) from PS_PERS_DATA_EFFDT PERSON_EFFDT1
       where PERSON_EFFDT.EMPLID = PERSON_EFFDT1.EMPLID
       AND   PERSON_EFFDT1.EFFDT <= {DATEIN-PREFIX}$ReportEndDate{DATEIN-SUFFIX} )
end-select

If $Sex <> 'F' 
    let $Sex = 'M'
End-If

Let $Sex_xml = '<Sex>'||$Sex||'</Sex>'

do Get_Employee_Residence
do Get_EO_Empl_Nationality
If $Empl_Residence <> '100' !Nationality should be displayed only if it is not CHE i.e. 100
   Let $Residence = '<Nationality>' || $Empl_Residence || '</Nationality>'
Else
   Let $Residence = '<Nationality>' || ' ' || '</Nationality>'
   
End-If

!SPS Please look at the section 4.2.10 in the PDF EO xml 2 for further information
Let $ActivityBeforeService = '<ActivityBeforeService>' || '1' || '</ActivityBeforeService>'
Let $EmplID_XML = '<EmployeeNumber>' || $Empl_ID || '</EmployeeNumber>'

Let $BeneficiaryPerson = $BeneficiaryPerson || $NID_xml || $LastName_xml || $FirstName_xml || $DateOfBirth_xml || $DateOfDeath_xml  || $Sex_xml || $Residence ||$Residence_XML || $ActivityBeforeService

#debug   show 'sps $BeneficiaryPerson => ' $BeneficiaryPerson
#debug show 'Out Get_EO_Employee_Xml_Generic'
end-procedure

!*************************************************************************************
begin-procedure Get_Employee_Residence
#debug show 'In Get_Employee_Residence GPCH_RP_CHAR02 ' $CHAR02
!Population of Residence tag
!GPCH_RP_EO01.GPCH_RP_CHAR02 gives a 3 digit code. If this is between '001' and '050' then it's a canton and 2 character code is read from the bracket CH_EO_BCANTON 
!If it is > = '100' then it's a country and the digit Integer is printed as it is

Let $Residence_XML = '<Residence>'
Let $Residence_Canton = ''

   Let $Residence = RTRIM(ltrim($CHAR02,' '),' ')
   If $Residence >= '001' and $Residence <= '050'
      do Get_2Char_Canton_Code
      Let $Residence_XML = $Residence_XML || '<Canton>' || $Residence_Canton || '</Canton>' || '</Residence>'
   Else
      If $Residence >= '100'
         Let $Residence_XML = $Residence_XML || '<Country>' || $Residence || '</Country>' || '</Residence>'
      End-If
   End-If 
   
#debug show 'Out Get_Employee_Residence'
end-procedure

!*************************************************************************************
begin-procedure Get_2Char_Canton_Code
#debug show 'In Get_2Char_Canton_Code'

Begin-Select on-error=give_warning
CANTON2.DATA_KEY1 

   Let $Residence_Canton = RTRIM(ltrim(&CANTON2.DATA_KEY1 ,' '),' ')
 
FROM PS_GP_PIN CANTON1, PS_GP_BRACKET_DTL CANTON2
WHERE CANTON1.PIN_NUM = CANTON2.PIN_NUM AND
      CANTON1.PIN_NM = 'CH_EO_BCANTON' AND
      DATA_VAL2 = $Residence
End-Select

#debug show 'Out Get_2Char_Canton_Code'
End-Procedure

!*************************************************************************************
begin-procedure Get_EO_Empl_Nationality
#debug show 'In Get_EO_Empl_Nationality'

Let $Empl_Country = $Nationality
do Get_Char2_Country_Code

#debug show 'Out Get_EO_Empl_Nationality'
End-Procedure

!****************************delete Get_EO_Empl_Residence_Canton  *********************************************************
!begin-procedure Get_EO_Empl_Residence_Canton
!#debug show 'In Get_EO_Empl_Residence_Canton $Empl_ID ' $Empl_ID ' $ReportEndDate ' $ReportEndDate

!Begin-Select on-error=give_warning
!ABR.COUNTRY
!ABR.GPCH_TX_CANTON
!
    !Let $Empl_Country = RTRIM(ltrim(&ABR.COUNTRY,' '),' ')
    !Let $Empl_Canton = RTRIM(ltrim(&ABR.GPCH_TX_CANTON,' '),' ')

    !If Country = CHE the print Canton else print Numeric code for country from bracket CH_EO_BCOUNTRY
    !If $Empl_Country = 'CHE'
     !  Let $Empl_Residence = $Empl_Canton
    !Else
    !   do Get_Num_Country_Code
    !   Let $Empl_Residence = $Empl_Country_Cd
    !End-If
!
!From PS_GPCH_EO_ABR ABR
!WHERE ABR.EMPLID = $Empl_ID AND
!      ABR.EFFDT = (Select Max(ABR1.EFFDT) 
!                   From PS_GPCH_EO_ABR ABR1
!                   Where ABR1.EMPLID = ABR.EMPLID AND
!                         ABR1.EFFDT <= {DATEIN-PREFIX}$ReportEndDate{DATEIN-SUFFIX})
!      
!End-Select
!
!#debug show 'Out Get_EO_Empl_Residence_Canton $Empl_Residence ' $Empl_Residence
!end-procedure

!*************************************************************************************
begin-procedure Get_Char2_Country_Code
#debug show 'In Get_Char2_Country_Code $Empl_Country ' $Empl_Country

Begin-Select on-error=give_warning
A.DATA_VAL2 

  Let $Empl_Residence = RTRIM(ltrim(&A.DATA_VAL2,' '),' ')

FROM PS_GP_PIN B, PS_GP_BRACKET_DTL A
WHERE B.PIN_NUM = A.PIN_NUM
AND   B.PIN_NM = 'CH_EO_BCOUNTRY'
AND A.DATA_KEY1 = $Empl_Country
End-Select

#debug show 'Out Get_Char2_Country_Code $Empl_Residence ' $Empl_Residence
end-procedure
!*************************************************************************************
begin-procedure Get_EO_Child_Xml_Generic
#debug show 'In Get_EO_Child_Xml_Generic $Empl_ID ' $Empl_ID ' $ReportBeginDate ' $ReportBeginDate ' $ReportEndDate ' $ReportEndDate

!Dependent Name + other details
Begin-Select on-error=give_warning
BEN_NAME.DEPENDENT_BENEF
BEN_NAME.LAST_NAME
BEN_NAME.FIRST_NAME
      Let $BeneficiaryPerson = $BeneficiaryPerson || '<Child>'
      Let $Dependent = rtrim(&BEN_NAME.DEPENDENT_BENEF,' ')
      Let $Last_Name = '<LastName>' || rtrim(&BEN_NAME.LAST_NAME,' ') || '</LastName>'
      Let $First_Name = '<FirstName>' || rtrim(&BEN_NAME.FIRST_NAME,' ') || '</FirstName>'
      
      Do Get_EO_Child_Details
      Let $BeneficiaryPerson = $BeneficiaryPerson || '</Child>'      
From  PS_DEP_BEN_NAME BEN_NAME
Where BEN_NAME.EMPLID = $Empl_ID
      AND BEN_NAME.EFFDT = (Select max(BEN_NAME1.EFFDT) 
                            From  PS_DEP_BEN_NAME BEN_NAME1
                            Where BEN_NAME1.EMPLID = BEN_NAME.EMPLID
                                  AND BEN_NAME1.DEPENDENT_BENEF = BEN_NAME.DEPENDENT_BENEF
                                  AND BEN_NAME1.EFFDT <= {DATEIN-PREFIX}$ReportEndDate{DATEIN-SUFFIX})
End-Select

#debug show 'Out Get_EO_Child_Xml_Generic'
end-procedure

!*************************************************************************************
begin-procedure Get_EO_Child_Details
#debug show 'In Get_EO_Child_Details'
#debug show 'sps $Empl_ID = ' $Empl_ID ' $Dependent = ' $Dependent ' $ReportEndD ' $ReportEndD

!Dependent National Id
Let $Child_NNSS_Id = ''
Let $SV_AS_Childxml = '' 
Begin-Select on-error=give_warning
DEP_NID.NATIONAL_ID

  Let $Child_NNSS_Id =  rtrim(&DEP_NID.NATIONAL_ID,' ')
  If $Child_NNSS_Id <> ''
     let $Child_NNSS_Id = substr($Child_NNSS_Id,1,3)||'.'||
                          substr($Child_NNSS_Id,4,4)||'.'||
                          substr($Child_NNSS_Id,8,4)||'.'||
                          substr($Child_NNSS_Id,12,2)
  End-If         
  Let $SV_AS_Childxml= '<SV-AS-Number>'||$Child_NNSS_Id ||'</SV-AS-Number>'
  
from PS_DEP_BENEF_NID DEP_NID
 where DEP_NID.EMPLID= $Empl_ID
      AND DEP_NID.DEPENDENT_BENEF= $Dependent
End-Select

!Dependent date of birth and death
Let $Death_Date = ''
Let $Birth_Date = ''
Let $Death_Date_XML = ''
Let $Birth_Date_XML = ''
Begin-Select on-error=give_warning
DEP_BEN2.DT_OF_DEATH
DEP_BEN2.BIRTHDATE

      Let $Death_Date = rtrim(&DEP_BEN2.DT_OF_DEATH,' ')
      Let $Birth_Date = rtrim(&DEP_BEN2.BIRTHDATE,' ')
      
      If $Birth_Date <> ''
         Do ConvertToComponents( $Birth_Date,$yy_xml2,$mm_xml2,$dd_xml2)
         Let $Birth_Date_XML = '<DateOfBirth>' || $yy_xml2 || '-' || $mm_xml2 || '-' || $dd_xml2 || '</DateOfBirth>'
      Else
         let $Birth_Date_XML = '<DateOfBirth/>'
      End-If
      
      If $Death_Date <> ''
         Do ConvertToComponents( $Death_Date,$yy_xml3,$mm_xml3,$dd_xml3)
         Let $Death_Date_XML = '<DateOfDeath>' || $yy_xml3 || '-' ||$mm_xml3||'-'||$dd_xml3 || '</DateOfDeath>'
     Else
        let $Death_Date_XML = '<DateOfDeath/>'
     End-If 
            
From  PS_DEP_BEN DEP_BEN2
Where DEP_BEN2.EMPLID = $Empl_ID
      AND DEP_BEN2.DEPENDENT_BENEF= $Dependent
End-Select

!Dependent Sex
Let $Child_Sex = ''
Begin-Select on-error=give_warning
DEP_BEN_EFF.SEX

       Let $Child_Sex=rtrim(&DEP_BEN_EFF.SEX ,' ') 
       If $Child_Sex = 'U' 
          Let $Child_Sex = 'M'
       End-If
  
From  PS_DEP_BEN_EFF DEP_BEN_EFF
where DEP_BEN_EFF.EMPLID= $Empl_ID
      AND DEP_BEN_EFF.DEPENDENT_BENEF= $Dependent     
      AND DEP_BEN_EFF.EFFDT = (SELECT MAX(DEP_BEN_EFF1.EFFDT)
                           FROM   PS_DEP_BEN_EFF DEP_BEN_EFF1
                           WHERE  DEP_BEN_EFF1.EMPLID= DEP_BEN_EFF.EMPLID
                                  AND DEP_BEN_EFF1.DEPENDENT_BENEF= DEP_BEN_EFF.DEPENDENT_BENEF
                                  AND DEP_BEN_EFF1.EFFDT <= {DATEIN-PREFIX}$ReportEndD{DATEIN-SUFFIX})
End-Select

If $Child_Sex <> 'F' 
    let $Child_Sex = 'M'
End-If
Let $Child_Sex_XML = '<Sex>' || $Child_Sex || '</Sex>'
Let $BeneficiaryPerson = $BeneficiaryPerson 

!sps Nationality and Canton - Need to do


Let $BeneficiaryPerson = $BeneficiaryPerson || $SV_AS_Childxml || $Last_Name || $First_Name || $Birth_Date_XML || $Death_Date_XML || $Child_Sex_XML

!sps When it is decided to include Nationality tag it should be done this way
!Read country from ps_gpch_eo_abr and then print coutry (Numeric) code from bracket CH_EO_BCOUNTRY.
!sps on enabling child information (i.e.) this function The residence tag should be populated this way
!Read country and canton from from DEP_BEN_ADDR table. If the country is CHE then print the cantion else print the numeric code od country from CH_BO_COUNTRY bracket.


#debug show 'sps $SV_AS_Childxml => ' $SV_AS_Childxml
#debug show 'Out Get_EO_Child_Details'
end-procedure
