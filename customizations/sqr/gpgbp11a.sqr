!***********************************************************************
!  GPGBP11A.SQR - PART 1 DEDUCTIONS WORKING SHEET P11                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2013/01/18:04:04:49                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!----------------------------------------------------------------------
! Date          Modification                                           *
! ----          ------------                                           *
! 09/2006       -  Modified the whole SQR for NI-Retro Changes         *
!***********************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup32.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables
#define PageLength              177
#define PosNumPage              160

#define PosHead1A               22
#define PosHead1B               34
#define PosHead1C               46
#define PosHead1D               58
#define PosHead1E               72
#define PosHead1F               86
#define PosHead1G               98
#define PosHead1H               113
#define PosHead1I               128
#define PosHead1J               142


#define PosFreq/Period           1
#define PosFreq/TaxYear          5
#define PosForEmployerUse       11
#define Pos1A                   20
#define Pos1B                   32
#define Pos1C                   44
#define Pos1D                   56
#define Pos1E                   70
#define Pos1F                   86
#define Pos1G                   98
#define Pos1G1                  104
#define Pos1G2                  107
#define Pos1H                   113
#define Pos1I                   126
#define Pos1J                   140


!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 10 !This number must be changed to match the number
                 !of lines in the header (including column headings)
                 
                 
        let $ReportDateTime =  $ReportDate || ' ' ||  $ReportTime            

        print $ReportTitle              ()   bold center
        print 'Report ID:  '            (+1,1)
        print $ReportID                 (,{Pos1A})
        page-number                     ( ,{PosNumPage}) 'Page: '
        last-page                       () ' / '

        print 'Date: '                  (+1,1)
        print $ReportDateTime           (,{Pos1A})
        print 'Selected Tax Year begins in'    (,{Pos1E})  Bold
        print $PNL_TAX_YEAR             (,{Pos1G})         Bold

        print 'Employee Surname:'       (+2,1)
        print $SURNAME                  (,{Pos1A})
        print 'Tax Code / Basis:'       (,{Pos1E})
        print $TAXCODE                  (,{Pos1G})
        if $TAXCODE='NI'
        else
        print ' / '                     (,{Pos1G1})
        print #TAX_BASIS                (,{Pos1G2})        edit 9
        end-if
        print 'Employee ID:'            (,{Pos1H})
        print $EMPLID_RCD      (,{Pos1J})
        
        print 'Forename(s):'            (+1,1)
        print $FORENAMES                (,{Pos1A})
        print 'Date of Birth:'          (,{Pos1E})
        print $doB                      (,{Pos1G})
        print 'Date of Starting:'       (,{Pos1H})
        print $HIRE_DT                  (,{Pos1J})

        print 'Pay Entity:'             (+1,1)
        print $PYENT_DESCR             (,{Pos1A})
        print 'National Insurance No:'  (,{Pos1E})
        print $NI                       (,{Pos1G})
        print 'Date of Leaving:'        (,{Pos1H})
        print $TERM_DT                  (,{Pos1J})

!******************************************************************
!*** Heading section - Headers
!******************************************************************

        print 'For'                     (+2,{PosForEmployerUse})        Bold
        print 'LEL'                     (,{PosHead1A})                  Bold
        print 'LEL To'                  (,{PosHead1B})                  Bold
        print 'ET To'                   (,{PosHead1C})                  Bold
        print 'EES and ERS'             (,{PosHead1D})                  Bold
        print 'EES'                     (,{PosHead1E})                  Bold
        print 'Statutory'               (,{PosHead1F})                  Bold
        print 'Statutory'               (,{PosHead1G})                  Bold
        print 'Statutory'               (,{PosHead1H})                  Bold
        print 'Statutory'               (,{PosHead1I})                  Bold
        print 'Student Loan'            (,{PosHead1J})                  Bold
        print 'Period'                  (+1,{PosFreq/Period})           Bold
        print 'Employers'               (,{PosForEmployerUse})          Bold
        print 'Earnings'                (,{PosHead1A})                  Bold
        print 'ET'                      (,{PosHead1B})                  Bold
        print 'UEL'                     (,{PosHead1C})                  Bold
        print 'Contribution'            (,{PosHead1D})                  Bold
        print 'Contribution'            (,{PosHead1E})                  Bold
        print 'Sick Pay'                (,{PosHead1F})                  Bold
        print 'Maternity Pay'           (,{PosHead1G})                  Bold
        print 'Paternity Pay'           (,{PosHead1H})                  Bold
        print 'Adoption Pay'            (,{PosHead1I})                  Bold
        print 'Deductions'              (,{PosHead1J})                  Bold
        print 'Use'                     (+1,{PosForEmployerUse})        Bold
        print '1A'                      (,{PosHead1A})                  Bold
        print '1B'                      (,{PosHead1B})                  Bold
        print '1C'                      (,{PosHead1C})                  Bold
        print '1D'                      (,{PosHead1D})                  Bold
        print '1E'                      (,{PosHead1E})                  Bold
        print '1F'                      (,{PosHead1F})                  Bold
        print '1G'                      (,{PosHead1G})                  Bold
        print '1H'                      (,{PosHead1H})                  Bold
        print '1I'                      (,{PosHead1I})                  Bold
        print '1J'                      (,{PosHead1J})                  Bold

end-heading
!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report
       
        do Init-Report
        do Main-Report
        move #CountError to $CountError 99999
        do Append-Log ('WHERE_STATEMENT'  , $WHERE_STATEMENT)
        do Append-Log ('CountError '  , $CountError)
        do Append-Log('----------------------------- ' , '------------------------------' )
        do Get-log
        
end-report


!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure Init-Report

        #Debug Show 'Init-Report->' 

        do INIT-DATETIME
        do INIT-NUMBER
        do Init-Variables
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME

        if isnull($prcs_process_instance)
                #Debug Show 'Running P11 SQR'
                do Ask-Values !SQR not run through process scheduler
        else
                #Debug Show 'Running p11.SQR in the Process Scheduler'
                do Get-Values !SQR run through process scheduler
        end-if

        let $ReportID    = 'P11 - PART 1'
        let $ReportTitle = 'Deductions Working Sheet'
            
        #Debug Show 'Init-Report<-' 

end-procedure Init-Report

!*=================================================================
! Procedure    :INIT-VARIABLES
! Comment      :Initializations of all varaibles used by the report
!*=================================================================
begin-procedure Init-Variables

        #Debug Show 'Init-Variables->' 

        let $PRINTA             = 'N'        
        let $PRINTA_Y           = 'N'        
        let $PRINTA_T           = 'N'        

        let #TRUE               = 1
        let #FALSE              = 0
        let #CountError         = 0
        let #counter            = 0
        let #TotConPay          = 0
        let #Tot1A              = 0
        let #Tot1B              = 0
        let #Tot1C              = 0
        let #Tot1D              = 0
        let #Tot1E              = 0
        let #Tot1F              = 0
        let #Tot1G              = 0
        let #Tot1H              = 0

        let #VAL1A = 0
        let #VAL1B = 0
        let #VAL1C = 0
        let #NI_DD_ERS_PTD = 0
        let #VAL1D = 0
        let #VAL1E = 0
        let #VAL1F = 0
        let #VAL1FF = 0
        let #VAL1GG = 0
        let #VAL1G = 0
        let #VAL1H = 0
        let #VAL1HA = 0
        let #VAL1HB = 0
        let #VAL1I = 0
        let #VAL1J = 0

        let #VAL1AY = 0
        let #VAL1BY = 0
        let #VAL1CY = 0
        let #NI_DD_ERS_YTD = 0
        let #VAL1DY = 0
        let #VAL1EY = 0
        let #VAL1FFY = 0
        let #VAL1GGY = 0
        let #VAL1FY = 0
        let #VAL1GY = 0
        let #VAL1HY = 0
        let #VAL1HAY = 0
        let #VAL1HBY = 0
        let #VAL1IY = 0
        let #VAL1JY = 0
       
     #Debug Show 'Init-Variables<-'

end-procedure Init-Variables


!*=================================================================
! Procedure   :ASK-VALUES
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure Ask-Values

          #Debug Show 'Ask-Values->'

        !*---------------------------------------------------------
        !***    Enter the Calender Run ID
        !*---------------------------------------------------------
        !input $PNL_CAL_RUN_ID 'Enter Calender Run ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Entity
        !*---------------------------------------------------------
        !input $PNL_PAY_ENTITY 'Enter Pay Entity'

        !*---------------------------------------------------------
        !***    Enter the Deptid
        !*---------------------------------------------------------
        !input $PNL_DEPTID 'Enter Department ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Group
        !*---------------------------------------------------------
        !input $PNL_PAYGROUP 'Enter Pay Group '

        !*---------------------------------------------------------
        !***    Enter the Employee ID
        !*---------------------------------------------------------
        !input $PNL_EMPLID 'Enter Employee ID '

        !*---------------------------------------------------------
        !***    Enter the Tax Period
        !*---------------------------------------------------------
        !input $PNL_TAX_PERIOD 'Enter Tax Period'

        !*---------------------------------------------------------
        !***    Enter the Frequency ID
        !*---------------------------------------------------------
        !input $PNL_FREQUENCY_ID 'Enter Frequency ID'

        !*---------------------------------------------------------
        !***    Enter the Tax Year
        !*---------------------------------------------------------
        !input $PNL_TAX_YEAR 'Enter The Year the Tax Year begins In'

        #Debug Show 'Ask-Values<-'

end-procedure Ask-Values


!*=================================================================
! Procedure     :GET-VALUES
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure Get-Values

        #Debug Show 'Get-Values->'

begin-SELECT on-error=ERROR-SQL   !SELECTS THE DATA FROM THE PANEL
RUNDB.CAL_RUN_ID
RUNDB.DEPTID
RUNDB.PAY_ENTITY
RUNDB.GP_PAYGROUP
RUNDB.EMPLID
RUNDB.FREQUENCY_ID
RUNDB.GPGB_TAX_PERIOD
RUNDB.GPGB_TAX_BGN_YR

        let $PNL_CAL_RUN_ID         = RTRIM(&RUNDB.CAL_RUN_ID,' ')
        let $PNL_DEPTID             = RTRIM(&RUNDB.DEPTID,' ')
        let $PNL_PAY_ENTITY         = RTRIM(&RUNDB.PAY_ENTITY,' ')
        let $PNL_PAYGROUP           = RTRIM(&RUNDB.GP_PAYGROUP,' ')
        let $PNL_EMPLID             = RTRIM(&RUNDB.EMPLID,' ')
        let #PNL_TAX_PERIOD         = &RUNDB.GPGB_TAX_PERIOD
        let $PNL_FREQUENCY_ID       = RTRIM(&RUNDB.FREQUENCY_ID,' ')
        let $PNL_TAX_YEAR           = RTRIM(EDIT(&RUNDB.GPGB_TAX_BGN_YR, '9999'),' ')
        let #PNL_TAX_YEAR           = &RUNDB.GPGB_TAX_BGN_YR

        let $PNL_TAX_PERIOD         = EDIT(#PNL_TAX_PERIOD,'09')

        FROM  PS_GPGB_RUNCTL_SQR RUNDB
        where RUNDB.OPRID         = $Prcs_OprID
          AND RUNDB.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID

end-SELECT

       #Debug Show 'Get-Values<-'

end-procedure Get-Values

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure Main-Report

     #Debug Show 'Main-Report->'
       
        do Build-Where-Runctl

        do Select-Employees

        do UPDATE-PRCS-RUN-STATUS

     #Debug Show 'Main-Report<-'

end-procedure Main-Report

!*==================================================================
! Procedure     : SELECT EMPLOYEES                                 !
! Descr         : Retrieves employees for selected criteria chosen !
!               : from the run control panel                       !
!*==================================================================

begin-procedure Select-Employees

      #Debug Show 'Select-Employees->'

        let $W_Pay_entity = ' '
        let $W_Sel_EmplID = ' '
        let $PERIOD  = 'NEW'
        let $REFUND  = ' '
        let $PRINTB = 'N'

!**********************************
! Define Array for NI Categories         03/2001
  if #NI_Def <> 1
    do Define-NI-Category
    let #NI_Def = 1
  end-if
!**********************************

begin-SELECT

GER.EMPLID            &EMPLID () on-break print=never level=1 !NEW PAGE IS ONLY CALLED FROM LEVEL 2 AS LEVEL 1 CALLS LEVEL 2 ON EACH BREAK ANYWAY.
GER.EMPL_RCD          &EMPL_RCD () on-break print=never level=1 
GER.PAY_ENTITY        &PAY_ENTITY   () on-break print=never after=Start-New-Page level=2
GER.GPGB_TAX_PERIOD   &TAX_PERIOD
GER.CAL_RUN_ID
GER.GPGB_TAX_BGN_YR
GER.HIRE_DT           &LAST_HIRE_DT  () on-break print=never level=1
GER.LEAVE_DT          &LEAVE_DT
GER.GP_PAYGROUP       &PAYGROUP
GER.FREQUENCY_ID      &FREQUENCY_ID
GER.GPGB_NI_CATEGORY  &NI_CATEGORY
GER.TAX_CODE_UK       &TAX_CODE
GER.TAX_BASIS_UK      &TAX_BASIS_UK               ! 03/2001
GER.NATIONAL_ID       &NATIONAL_ID
GER.ADDRESS1          &ADDRESS1
GER.ADDRESS2          &ADDRESS2
GER.ADDRESS3          &ADDRESS3
GER.ADDRESS4          &ADDRESS4
GER.POSTAL            &POSTAL
GER.GPGB_LEL_PTD      &GER.GPGB_LEL_PTD
GER.GPGB_LELET_PTD    &GER.GPGB_LELET_PTD
GER.GPGB_ETUEL_PTD    &GER.GPGB_ETUEL_PTD 
GER.GPGB_ER_NIC_PTD   &GER.GPGB_ER_NIC_PTD 
GER.GPGB_EE_NIC_PTD   &GER.GPGB_EE_NIC_PTD 
GER.GPGB_ER_RBT_PTD   &GER.GPGB_ER_RBT_PTD 
GER.GPGB_EE_RBT_PTD   &GER.GPGB_EE_RBT_PTD 
GER.GPGB_SSP_PTD      &GER.GPGB_SSP_PTD
GER.GPGB_SMP_PTD      &GER.GPGB_SMP_PTD 
GER.GPGB_SPPA_PTD     &GER.GPGB_SPPA_PTD 
GER.GPGB_SPPB_PTD     &GER.GPGB_SPPB_PTD 
GER.GPGB_SAP_PTD      &GER.GPGB_SAP_PTD  
GER.GPGB_EE_SL_PTD    &GER.GPGB_EE_SL_PTD 
GER.GPGB_LEL_VALUE    &GER.GPGB_LEL_VALUE 
GER.GPGB_LELET_VALUE  &GER.GPGB_LELET_VALUE 
GER.GPGB_ETUEL_VALUE  &GER.GPGB_ETUEL_VALUE
GER.GPGB_ER_NIC_VALUE &GER.GPGB_ER_NIC_VALUE
GER.GPGB_EE_NIC_VALUE &GER.GPGB_EE_NIC_VALUE 
GER.GPGB_ER_RBT_VALUE &GER.GPGB_ER_RBT_VALUE
GER.GPGB_EE_RBT_VALUE &GER.GPGB_EE_RBT_VALUE
GER.GPGB_SSP          &GER.GPGB_SSP  
GER.GPGB_SMP          &GER.GPGB_SMP 
GER.GPGB_SPPA         &GER.GPGB_SPPA
GER.GPGB_SPPB         &GER.GPGB_SPPB
GER.GPGB_SAP          &GER.GPGB_SAP  
GER.GPGB_EE_SL        &GER.GPGB_EE_SL
GER.FIRST_NAME        &FIRSTNAME
GER.MIDDLE_NAME       &MIDDLENAME
GER.LAST_NAME         &LAST_NAME
GER.BIRTHDATE         &doB
GER.SEX               &SEX
GER.NAME_PREFIX       &NAME_PREFIX



                let $SELECTED_EMPLOYEE   = RTRIM(&EMPLID, ' ')
                let #SELECTED_TAX_PERIOD = &TAX_PERIOD
                let $SELECTED_FREQUENCY  = &FREQUENCY_ID
                let $MAIN_SEL_PAY_ENTITY = RTRIM(&PAY_ENTITY, ' ')

        if $W_Pay_entity <> $MAIN_SEL_PAY_ENTITY
            do GET-PAY-ENTITY($MAIN_SEL_PAY_ENTITY,$AsOfDate,$PYENT_Descr,$PYENT_Descr,$PYENT_DescrShort,
                              $PYENT_Addr1,$PYENT_Addr2,$PYENT_Addr3,$PYENT_Addr4,$PYENT_City,
                              $PYENT_County,$PYENT_PostCode,$PYENT_Country,$PYENT_NAME,#PYENT_TAXNUM,
                              $PYENT_TAX_DNAME,$PYENT_PAYE_REF,$PYENT_PERMIT_NUM)
            let $W_Pay_entity = $MAIN_SEL_PAY_ENTITY
        end-if


        !-------------------------------------------------------------------------

      
        let $EMPLID            =&EMPLID
        let $EMPL_RCD       =&EMPL_RCD
        let $EMPLID_RCD   =RTRIM(&EMPLID,' ')   || '  Empl Rcd#:  ' ||   RTRIM(EDIT(&EMPL_RCD, '999'),' ')
        let $FORENAME         = RTRIM(&FIRSTNAME , ' ')
        let $MIDDLENAME       = RTRIM(&MIDDLENAME, ' ')
        let $SURNAME          = &LAST_NAME
        let $FORENAMES        = $FORENAME || ' ' || $MIDDLENAME
        let $FULLNAME         = $FORENAME || ' ' || $SURNAME
        let $doB              = DATETOSTR(&doB, 'DD/MM/YYYY')
        let $doB_SP           = DATETOSTR(&doB, 'DD MM YYYY')             ! 10/2002
        let $SEX              = &SEX
        let $NAMEPREFIX       = &NAME_PREFIX

       ! Retrieved from Pay Entity
        let $DESCR            = $PYENT_Descr  
        let $DESCRSHORT       = $PYENT_DescrShort
        let $EADDRESS1        = $PYENT_Addr1
        let $EADDRESS2        = $PYENT_Addr2  
        let $EADDRESS3        = $PYENT_Addr3
        let $EADDRESS4        = $PYENT_Addr4
        let $ECOUNTY          = $PYENT_City 
        let $EPOSTAL          = $PYENT_County

       

   
        let $TAX_PERIOD       = EDIT(&TAX_PERIOD,'99')
        let $PAYGROUP          = &PAYGROUP
        let $PAY_ENTITY        = &PAY_ENTITY
        let $FREQUENCY_ID     = &FREQUENCY_ID                         ! 10/2002
        let $PERIOD            = $FREQUENCY_ID || $TAX_PERIOD
        let $NI_CATEGORY       = RTRIM(&NI_CATEGORY,' ')
        let $TAXCODE          = &TAX_CODE
        let #TAX_BASIS        = &TAX_BASIS_UK
        let $NI               = &NATIONAL_ID
        let $ADDRESS1         = &ADDRESS1
        let $ADDRESS2         = &ADDRESS2
        let $ADDRESS3         = &ADDRESS3
        let $ADDRESS4         = &ADDRESS4
        let $POSTAL           = &POSTAL

        let $PRINTA = 'Y'
        let $PRINTB_Y = 'Y'
        let $PRINTA_Y = 'Y'
        
        let #VAL1A =  &GER.GPGB_LEL_PTD
        let #VAL1AY = &GER.GPGB_LEL_VALUE
        let #VAL1B = &GER.GPGB_LELET_PTD
        let #VAL1BY = &GER.GPGB_LELET_VALUE
        let #VAL1C = &GER.GPGB_ETUEL_PTD
        let #VAL1CY = &GER.GPGB_ETUEL_VALUE
        let #VAL1D = &GER.GPGB_ER_NIC_PTD
        let #NI_DD_ERS_PTD = &GER.GPGB_ER_NIC_PTD
        let #VAL1DY = &GER.GPGB_ER_NIC_VALUE
        let #NI_DD_ERS_YTD = &GER.GPGB_ER_NIC_VALUE
        let #VAL1E = &GER.GPGB_EE_NIC_PTD
        let #NI_DD_EES_PTD = &GER.GPGB_EE_NIC_PTD
        let #VAL1EY = &GER.GPGB_EE_NIC_VALUE
        let #NI_DD_EES_YTD = &GER.GPGB_EE_NIC_VALUE
        let #VAL1FF = &GER.GPGB_EE_RBT_PTD
        let #NI_DD_EESRBT_PTD = &GER.GPGB_EE_RBT_PTD
        let #VAL1FFY = &GER.GPGB_EE_RBT_VALUE
        let #NI_DD_EESRBT_YTD = &GER.GPGB_EE_RBT_VALUE
        let #VAL1GG = &GER.GPGB_ER_RBT_PTD
        let #NI_DD_ERSRBT_PTD = &GER.GPGB_ER_RBT_PTD
        let #VAL1GGY = &GER.GPGB_ER_RBT_VALUE
        let #NI_DD_ERSRBT_YTD =&GER.GPGB_ER_RBT_VALUE
        let #VAL1F = &GER.GPGB_SSP_PTD
        let #VAL1FY = &GER.GPGB_SSP
        let #VAL1G = &GER.GPGB_SMP_PTD
        let #VAL1GY = &GER.GPGB_SMP
        let #VAL1HA = &GER.GPGB_SPPA_PTD
        let #SPPA_PTD = &GER.GPGB_SPPA_PTD
        let #VAL1HAY = &GER.GPGB_SPPA
        let #SPPA_YTD = &GER.GPGB_SPPA
        let #VAL1HB = &GER.GPGB_SPPB_PTD
        let #SPPB_PTD = &GER.GPGB_SPPB_PTD
        let #VAL1HBY = &GER.GPGB_SPPB
        let #SPPB_YTD = &GER.GPGB_SPPB
        let #VAL1I = &GER.GPGB_SAP_PTD
        let #VAL1IY = &GER.GPGB_SAP
        let #VAL1J = &GER.GPGB_EE_SL_PTD
        let #VAL1JY =  &GER.GPGB_EE_SL
  
        if #VAL1AY  > 0 AND #VAL1B  > 0 AND  #VAL1C = 0 
             let  $_TAXCODE = 'NI' 
        end-if    
       

        
        if $PERIOD <> 'NEW'                                                    
                do Load-NI-Category                   
        end-if
        do Print-Report


       !-------------------------------------------------------------------------

        let $HIRE_DT      = DATETOSTR(&LAST_HIRE_DT, 'DD/MM/YYYY')          
        let $TERM_DT      = DATETOSTR(&LEAVE_DT, 'DD/MM/YYYY')               

        let $HIRE_DT_SP   = DATETOSTR(&LAST_HIRE_DT, 'DD MM YYYY')          
        let $TERM_DT_SP   = DATETOSTR(&LEAVE_DT, 'DD MM YYYY')              

        do Convert-To-DTU-Date(&LAST_HIRE_DT,$_W_HIRE_DT)                    
        do Convert-To-DTU-Date(&LEAVE_DT,$_W_TERM_DT)                         


FROM PS_GPGB_EDI_RSLT GER
[$Where_statement]
AND GER.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GPGB_EDI_RSLT A
                      WHERE A.EMPLID = GER.EMPLID
                      AND A.CAL_RUN_ID = GER.CAL_RUN_ID
                      AND A.EMPL_RCD = GER.EMPL_RCD
                      AND A.GP_PAYGROUP = GER.GP_PAYGROUP
                      AND A.CAL_ID = GER.CAL_ID
                      AND A.ORIG_CAL_RUN_ID = GER.ORIG_CAL_RUN_ID
                      AND A.USER_KEY1 = GER.USER_KEY1
                      AND A.USER_KEY2 = GER.USER_KEY2)
ORDER BY GER.GPGB_TAX_BGN_YR, GER.EMPLID,GER.EMPL_RCD,GER.HIRE_DT, GER.FREQUENCY_ID, GER.GPGB_TAX_PERIOD,
GER.PAY_ENTITY

end-SELECT

 #Debug Show 'Select-Employees<-'

end-procedure Select-Employees

!*=================================================================
! Procedure     : DEFINE-NI-CATEGORY                              !
! Descr         : Define Array for NI Categories                  !
! Nota !!!!       The last column of the array (#19) contain the  !
!                 grand total of all occurences                   !
!*=================================================================
begin-procedure Define-NI-Category
   
     #Debug Show 'Define-NI-Category->'

        Create-Array name=NI_Category_ARR size=20
                field=NI_Code:char
                field=NI_Scon:char
                field=NI_Total:number:13
  
     #Debug Show 'Define-NI-Category<-'

end-procedure Define-NI-Category

!*=================================================================
! Procedure     : LOAD-NI-CATEGORY                                !
! Descr         : Load Array to totalize Ytd per NI Codes         !
!                 SSP, SMP and Student Loan are loaded in the     !
!                 Grand Total only (no split on NI code)          !
!                 Grand Total Calculation is stored in Column #19 !
!                 It is calculated when printing
!*=================================================================
begin-procedure Load-NI-Category

   #Debug Show 'Load-NI-Category->'

   let #i = 0
   WHILE #i<18         ! (19 columns available, the 20th contains the grand total)

   Get $W_NI_Code From NI_Category_ARR(#i) NI_Code

    if  $W_NI_Code = $NI_CATEGORY or $W_NI_Code <= ''
        Put $NI_CATEGORY Into NI_Category_ARR(#i) NI_Code
        Put #VAL1AY Into NI_Category_ARR(#i) NI_Total(0)
        Put #VAL1BY Into NI_Category_ARR(#i) NI_Total(1)
        Put #VAL1CY Into NI_Category_ARR(#i) NI_Total(2)
        Put #NI_DD_ERS_YTD Into NI_Category_ARR(#i) NI_Total(3)
        Put #VAL1EY Into NI_Category_ARR(#i) NI_Total(4)
        Put #NI_DD_EESRBT_YTD Into NI_Category_ARR(#i) NI_Total(5)
        Put #NI_DD_ERSRBT_YTD Into NI_Category_ARR(#i) NI_Total(6)
        Put #VAL1FY Into NI_Category_ARR(19) NI_Total(7)
        Put #VAL1GY Into NI_Category_ARR(19) NI_Total(8)
        Put #VAL1HAY Into NI_Category_ARR(19) NI_Total(9)
        Put #VAL1HBY Into NI_Category_ARR(19) NI_Total(10)
        Put #VAL1IY Into NI_Category_ARR(19) NI_Total(11)
        Put #VAL1JY Into NI_Category_ARR(19) NI_Total(12)
        BREAK
   end-if

   let #i = #i + 1
   end-WHILE
  
  #Debug Show 'Load-NI-Category<-'

end-procedure Load-NI-Category

!*=================================================================
! Procedure:  START-NEW-PAGE                                      !
! Descr:      New page each time the Emplid changes               !
!                                                                 !
!*=================================================================
begin-procedure Start-New-Page

     #Debug Show 'Start-New-Page->'

        #Debug Show 'SNP->' $PRINTA_T '<-'
        if $PRINTA_T = 'Y'

                do Print-Totals
                NEW-PAGE
        end-if

     #Debug Show 'Start-New-Page<-'

end-procedure Start-New-Page

!*=================================================================
! Procedure: PRINT-REPORT                                         !
! Descr:     Prints Employeee information                         !
!                                                                 !
!*=================================================================
begin-procedure Print-Report 

     #Debug Show 'Print-Report->'

        #Debug Show 'PR->' $PRINTA '<-'   ' PR Year ->' $PRINTA_Y '<-'
         
        if $PRINTA = 'Y'
                or   $PRINTA_Y = 'Y'

                let $PRINTA_T = 'Y'

                print $PERIOD            (+1,{PosFreq/Period})
                PRINT $NI_CATEGORY       (,{PosForEmployerUse})
                PRINT #VAL1A            (,{Pos1A})  edit 999,999.99
                PRINT #VAL1B            (,{Pos1B})  edit 999,999.99
                PRINT #VAL1C            (,{Pos1C})  edit 999,999.99

                let #VAL1D = (#NI_DD_ERS_PTD + #VAL1E)  - (#VAL1GG + #VAL1FF)
                let #VAL1E= #NI_DD_EES_PTD  - #VAL1FF


                PRINT #VAL1D            (,{Pos1D})  edit 9,999,999.99
                PRINT #VAL1E            (,{Pos1E})  edit 9,999,999.99
                PRINT #VAL1F            (,{Pos1F})  edit 999,999.99
                PRINT #VAL1G            (,{Pos1G})  edit 999,999.99
                                
                let #VAL1H = #VAL1HA + #VAL1HB
               
                PRINT #VAL1H            (,{Pos1H})  edit 999,999.99
                PRINT #VAL1I            (,{Pos1I})  edit 99,999,999.99
                PRINT #VAL1J            (,{Pos1J})  edit 9,999,999.99

        end-if

     #Debug Show 'Print-Report<-'

end-procedure Print-Report

!*=================================================================
! Procedure: PRINT TOTALS                                         !
! Descr:     Print Employeee's Totals                             !
!                                                                 !
!*=================================================================
begin-procedure Print-Totals

    #Debug Show 'Print-Totals->'

        graphic                 (+1,1,178) horz-line

     let #i = 0
    WHILE #i<13
    Get $W_NI_Code From NI_Category_ARR(#i) NI_Code

      if  $W_NI_Code <> ''

        Get #VAL1AY From NI_Category_ARR(#i) NI_Total(0)
        Get #VAL1BY From NI_Category_ARR(#i) NI_Total(1)
        Get #VAL1CY From NI_Category_ARR(#i) NI_Total(2)
        Get #NI_DD_ERS_YTD From NI_Category_ARR(#i) NI_Total(3)
        Get #VAL1EY From NI_Category_ARR(#i) NI_Total(4)
        Get #VAL1FFY From NI_Category_ARR(#i) NI_Total(5)
        Get #VAL1GGY From NI_Category_ARR(#i) NI_Total(6)

        let #VAL1DY = (#NI_DD_ERS_YTD + #VAL1EY) - (#VAL1FFY + #VAL1GGY)
        let #VAL1EY = (#VAL1EY - #VAL1FFY)


        print 'YtD'             (+2,{PosFreq/Period})
        print $PNL_TAX_YEAR     (,{PosFreq/TaxYear})
        PRINT $W_NI_Code        (,{PosForEmployerUse})
        PRINT #VAL1AY           (,{Pos1A}) edit 999,999.99
        PRINT #VAL1BY           (,{Pos1B}) edit 999,999.99
        PRINT #VAL1CY           (,{Pos1C}) edit 999,999.99
        PRINT #VAL1DY           (,{Pos1D}) edit 9,999,999.99
        PRINT #VAL1EY           (,{Pos1E}) edit 9,999,999.99
       
        ! Update Cumul for Grand Total (Stored in column #19 of the Array)
        ARRAY-ADD #VAL1AY To NI_Category_ARR(19) NI_Total(0)
        ARRAY-ADD #VAL1BY To NI_Category_ARR(19) NI_Total(1)
        ARRAY-ADD #VAL1CY To NI_Category_ARR(19) NI_Total(2)
        ARRAY-ADD #VAL1DY To NI_Category_ARR(19) NI_Total(3)
        ARRAY-ADD #VAL1EY To NI_Category_ARR(19) NI_Total(4)
        
     else
        Break
     end-if

     let #i = #i + 1
     end-WHILE

        graphic                 (+1,1,178) horz-line
        !----------------------
        ! Print Grand Total...
        !----------------------

        Get #VAL1AY From NI_Category_ARR(19) NI_Total(0)
        Get #VAL1BY From NI_Category_ARR(19) NI_Total(1)
        Get #VAL1CY From NI_Category_ARR(19) NI_Total(2)
        Get #VAL1DY From NI_Category_ARR(19) NI_Total(3)
        Get #VAL1EY From NI_Category_ARR(19) NI_Total(4)
        Get #VAL1FY From NI_Category_ARR(19) NI_Total(7)
        Get #VAL1GY From NI_Category_ARR(19) NI_Total(8)
        Get #VAL1HAY From NI_Category_ARR(19) NI_Total(9)
        Get #VAL1HBY From NI_Category_ARR(19) NI_Total(10)
        Get #VAL1IY From NI_Category_ARR(19) NI_Total(11)
        Get #VAL1JY From NI_Category_ARR(19) NI_Total(12)
      
        Let #VAL1HY = #VAL1HAY + #VAL1HBY

        print 'Year To Date'    (+2,{PosFreq/Period})
        PRINT #VAL1AY           (,{Pos1A}) edit 999,999.99
        PRINT #VAL1BY           (,{Pos1B}) edit 999,999.99
        PRINT #VAL1CY           (,{Pos1C}) edit 999,999.99
        PRINT #VAL1DY           (,{Pos1D}) edit 9,999,999.99
        PRINT #VAL1EY           (,{Pos1E}) edit 9,999,999.99
        PRINT #VAL1FY           (,{Pos1F}) edit 999,999.99
        PRINT #VAL1GY           (,{Pos1G}) edit 999,999.99
        PRINT #VAL1HY           (,{Pos1H}) edit 999,999.99
        PRINT #VAL1IY           (,{Pos1I}) edit 99,999,999.99
        PRINT #VAL1JY           (,{Pos1J}) edit 9,999,999.99
        graphic                 (+1,1,178) horz-line
     
        do Reset-Values
        do Reset-Values-Total

     #Debug Show 'Print-Totals<-'

end-procedure Print-Totals

!*=================================================================
! Procedure: RESET VALUES                                         !
! Descr:     Resets Calculated Period Values                      !
!                                                                 !
!*=================================================================
begin-procedure Reset-Values

     #Debug Show 'Reset-Values->'

        let $PRINTA ='N'

        let #VAL1A = 0
        let #VAL1B = 0
        let #VAL1C = 0
        let #NI_DD_ERS_PTD = 0
        let #NI_DD_EES_PTD = 0
        let #VAL1D = 0
        let #VAL1E = 0
        let #VAL1F = 0
        let #VAL1G = 0
        let #VAL1FF = 0
        let #VAL1GG = 0
        let #VAL1HA = 0
        let #VAL1HB = 0
        let #VAL1H = 0
        let #VAL1I = 0
        let #VAL1J = 0
        let #VAL1AY = 0
        let #VAL1BY = 0
        let #VAL1CY = 0
        let #NI_DD_ERS_YTD = 0
        let #NI_DD_EES_YTD = 0
        let #VAL1DY = 0
        let #VAL1EY = 0
        let #VAL1FY = 0
        let #VAL1GY = 0
        let #VAL1FFY = 0
        let #VAL1GGY = 0
        let #VAL1HAY = 0
        let #VAL1HBY = 0
        let #VAL1HY = 0
        let #VAL1IY = 0
        let #VAL1JY = 0

      
    #Debug Show 'Reset-Values<-'

end-procedure Reset-Values

!*=================================================================
! Procedure: RESET VALUES TOTAL                                   !
! Descr:     Resets Calculated Year-To-Date Values                !
!                                                                 !
!*=================================================================
begin-procedure Reset-Values-Total

    #Debug Show 'Reset-Values-Total->'

        let $PRINTA_Y ='N'
        let $PRINTA_T ='N'

        let #VAL1AY = 0
        let #VAL1BY = 0
        let #VAL1CY = 0
        let #NI_DD_ERS_YTD = 0
        let #NI_DD_EES_YTD = 0
        let #VAL1DY = 0
        let #VAL1EY = 0
        let #VAL1FY = 0
        let #VAL1FFY = 0
        let #VAL1GGY = 0
        let #VAL1HAY = 0
        let #VAL1HBY = 0
        let #VAL1GY = 0
        let #VAL1HY = 0
        let #VAL1IY = 0
        let #VAL1JY = 0

        CLEAR-ARRAY Name=NI_Category_ARR

    #Debug Show 'Reset-Values-Total<-'

end-procedure Reset-Values-Total

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************


!*==========================================================
! Procedure:  Build-Where-Runctl                                  !
! Descr:      Build Where Statement from Run Control Parameters
!                                                                 !
!*==========================================================

begin-procedure Build-Where-Runctl 

        #Debug Show 'Build-Where-Runctl -> ' 
        let $Q                  = ''''

        let $where_STATEMENT    = 'where GER.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR
        let $FREQ_where         = ' AND GER.FREQUENCY_ID = '''
                                  || $PNL_FREQUENCY_ID || $Q
        let $PERIOD_where       = ' AND GER.GPGB_TAX_PERIOD = '
                                  || $PNL_TAX_PERIOD
        let $CALendER_where     = ' AND GER.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q
        let $PAY_ENTITY_where   = ' AND GER.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q
        let $EMPLID_where       = ' AND GER.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        let $PAYGROUP_where     = ' AND GER.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q

        MOVE $PNL_TAX_PERIOD    TO   #TAX_PERIOD

        if  #TAX_PERIOD <> 00
                let $where_STATEMENT= $where_STATEMENT
                                      || $PERIOD_where
        end-if

        evaluate ''
        when <> $PNL_FREQUENCY_ID
                let $where_STATEMENT = $where_STATEMENT
                                       || $FREQ_where
        when <> $PNL_CAL_RUN_ID
                let $where_STATEMENT = $where_STATEMENT
                                       || $CALendER_where

        when <> $PNL_PAY_ENTITY
                let $where_STATEMENT = $where_STATEMENT
                                       || $PAY_ENTITY_where

        when <> $PNL_EMPLID
                let $where_STATEMENT = $where_STATEMENT
                                       || $EMPLID_where
                BREAK
        when <> $PNL_PAYGROUP
                let $where_STATEMENT = $where_STATEMENT
                                       || $PAYGROUP_where
                BREAK
        end-evaluate

       #Debug Show 'Build-where-runctl <- ' 

end-procedure Build-where-runctl

!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure Error-Sql

    #Debug Show 'Error-Sql->'

        add 1 to #CountError

        #Debug Show 'SQL Error -> ' $ProcedureName
        #Debug Show 'SQL Error -> ' $ErrorMessage
        #Debug Show 'SQL Error -> ' $SQL-ERROR

        stop

   #Debug Show 'Error-Sql<-'

end-procedure Error-Sql

!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'    ! Reset printer procedure
#include 'curdttim.sqc' ! Get-Current-DateTime procedure
#include 'datetime.sqc' ! Routines for date and time formatting
#include 'number.sqc'   ! Routines to format numbers
#include 'prcsapi.sqc'  ! Update Process Request API
#include 'prcsdef.sqc'  !Update Process Request variable declaration
#include 'readxlat.sqc' ! Read Translate Table
#include 'datemath.sqc'
#include 'gpgbut01.sqc'
#include 'gpgbut02.sqc'
!******************************* End Of Program *******************
