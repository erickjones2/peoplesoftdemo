!***********************************************************************
!*  GPGBAVE.SQC - Starters,leavers & payroll Validation and exception Report
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2015/04/28:05:24:04                                 *
!       $Release:  HR92                                                *
!      $Revision:  107                                                 *
!
!***********************************************************************
! Date        Modification
! ----        ------------
! 01/2005     New Starters/Leavers views integrated
!
!***********************************************************************
!* Constants definitions

#define PageLength              177
#define Pos5                    7
#define Pos1                    06 ! changed from 12
#define Pos2                    17 !changed from 26
#define Pos3                    27 ! changed from 35
#define Pos4                    80
#define Pos6                    60 ! changed from 73
#define Pos7                    62  !60
#DEFINE POS88                   88
#define Pos8                    0
#define Pos9                    0
#define Pos10                   0
#define Pos11                   0
#define Pos12                   0
#define Pos13                   0
#define Pos14                   0
#define Pos15                   0
#define Pos16                   0
#define Pos17                   0
#define Pos18                   0
#define Pos19                   0
#define Row1                    9
#define Row2                    10
#define Row3                    11
#define p7                      4
#define p15                     15
#define p17                     18
#define p35                     37
#define p23                     23
#define p24                     24
#define p41                     41
#define p60                     60
#define p80                     80
#define p77                     77
#define p105                    105
#define Header-Size             9
#define Debug_Indent_String  '    '   !* The Indent Amount for the Auto Debug.


!*****************************************************************************
    !* Building the Employee Selection Where Statements so that the employees
    !* can be limited to those employees in the Cal Run ID, and also
    !* determining the end date.  All Queries written must link into the
    !* GP_PYE_PRC_STAT table aliased as 'GRP' and include the $Where
    !* variable to limit the employees correctly.
!*****************************************************************************
Begin-Procedure Build-Dynamic-SQL($Cal_Run_ID, $Paygroup,
                :$Where, :$Where_B, :$Start_Dt,  :$End_Dt)

    let $Where = ''
    let $Start_Dt = ''
    let $End_Dt = ''

    if not isblank($Paygroup)
        let $Where   = ' AND GRP.GP_PAYGROUP = ''' || $Paygroup || ''''
        let $Where_B = ' AND B.GP_PAYGROUP = ''' || $Paygroup || ''''
    end-if

    if not isblank($Cal_Run_ID)
        let $Where   = $Where || ' AND GRP.CAL_RUN_ID = ''' || $Cal_Run_ID || ''''
        let $Where_B = $Where_B || ' AND B.CAL_RUN_ID = ''' || $Cal_Run_ID || ''''
        if not isblank($Paygroup)
            let $Paygroup_Where = ' AND A.GP_PAYGROUP = ''' || $Paygroup || ''''
        else
            let $Paygroup_Where = ''
        end-if

Begin-Select On-Error=SQL-Error
MIN(C.PRD_BGN_DT) &START_DATE
MAX(C.PRD_END_DT) &END_DATE

    let $Start_Dt = &START_DATE
    let $End_Dt = &END_DATE

FROM  PS_GP_CAL_RUN_DTL A,
      PS_GP_CALENDAR B,
      PS_GP_CAL_PRD C
WHERE A.CAL_RUN_ID = $Cal_Run_ID
[$Paygroup_Where]
AND   B.GP_PAYGROUP = A.GP_PAYGROUP
AND   B.CAL_ID = A.CAL_ID
AND   C.CAL_PRD_ID = B.CAL_PRD_ID
!AND   A.CAL_ID = A.CAL_RUN_ID
!AND   A.CAL_ID = $Cal_Run_ID
End-Select

    else
        let $Start_Dt = $_AsOfToday
        let $End_Dt = $_AsOfToday
    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Build-Dynamic-SQL


!***********************************************************************
!* Build Dynamic SQL for Starters
!* IMPORTANT: The Select Clause where this is used must contain a table
!*           with alias B and that contains the 2 fields B.EMPLID and B.EMPL_RCD
!*           for the Dynamic SQL to work
!***********************************************************************
Begin-Procedure Build-Starters-SQL($Start_Dt, $End_Dt, :$Where)

  let $Where = ''

        let $Where = $Where || ' EXISTS (SELECT ''X'' FROM PS_GPGB_STARTER_VW STA1'
        let $Where = $Where || ' WHERE STA1.EMPLID = B.EMPLID'
        let $Where = $Where || ' AND STA1.EMPL_RCD = B.EMPL_RCD'
        let $Where = $Where || ' AND STA1.EFFDT >= ''' || $Start_Dt || ''''
        let $Where = $Where || ' AND STA1.EFFDT <= ''' || $End_Dt || ''')'

        #debuga do Remove-Procedure-Indent
End-Procedure Build-Starters-SQL


!***********************************************************************
!* Build Dynamic SQL for Leavers
!* IMPORTANT: The Select Clause where this is used must contain a table
!*           with alias B and that contains the 2 fields B.EMPLID and B.EMPL_RCD
!*           for the Dynamic SQL to work
!***********************************************************************
Begin-Procedure Build-Leavers-SQL($Start_Dt, $End_Dt, :$Where)

  let $Where = ''

        let $Where = $Where || ' EXISTS (SELECT ''X'' FROM PS_GPGB_LEAVER_VW LEA1'
        let $Where = $Where || ' WHERE LEA1.EMPLID = B.EMPLID'
        let $Where = $Where || ' AND LEA1.EMPL_RCD = B.EMPL_RCD'
        let $Where = $Where || ' AND LEA1.EFFDT >= ''' || $Start_Dt || ''''
        let $Where = $Where || ' AND LEA1.EFFDT <= ''' || $End_Dt || ''')'

        #debuga do Remove-Procedure-Indent
End-Procedure Build-Leavers-SQL


!***********************************************************************************************
!* Procedure to get Statutory Tax and NI Employee Details
!***********************************************************************************************
Begin-Procedure Get-Tax-Details($EmplID, #Empl_Rcd,  $Thru_Date, :$NI_Cat,
                :$Tax_Code, :$Tax_Basis)

    let $NI_Cat = ''
    let $Tax_Code = ''
    let $Tax_Basis = ''

!**** Tax Details
Begin-Select On-Error=SQL-Error
A.TAXCODE_UK
A.TAX_BASIS_UK

    let $Tax_Code = &A.TAXCODE_UK
    let $Tax_Basis = &A.TAX_BASIS_UK

FROM  PS_GPGB_EE_TAX A
WHERE A.EMPLID   = $EmplID
AND   A.EMPL_RCD = #Empl_Rcd
AND   A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_GPGB_EE_TAX A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EMPL_RCD = A.EMPL_RCD
                 AND    A2.EFFDT <=  $Thru_Date)
AND   A.EFFSEQ = (SELECT MAX(A2.EFFSEQ) FROM PS_GPGB_EE_TAX A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EMPL_RCD = A.EMPL_RCD
                 AND    A2.EFFDT = A.EFFDT)

End-Select

!**** NI Details
Begin-Select On-Error=SQL-Error
A.GPGB_NI_CATEGORY

    let $NI_Cat = &A.GPGB_NI_CATEGORY

FROM  PS_GPGB_EE_NI A
WHERE A.EMPLID   = $EmplID
AND   A.EMPL_RCD = #Empl_Rcd
AND   A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_GPGB_EE_NI A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EMPL_RCD = A.EMPL_RCD
                 AND    A2.EFFDT <=  $Thru_Date)
End-Select

    #debuga do Remove-Procedure-Indent
End-Procedure Get-Tax-Details


!***********************************************************************
Begin-Procedure Get-Primary-NI($EmplID, :$Country, :$NID_Type, :$NI_Nbr)
    let $Country = ''
    let $NID_Type = ''
    let $NI_Nbr = ''

Begin-Select On-Error=Error-SQL
A.COUNTRY
A.NATIONAL_ID_TYPE
A.NATIONAL_ID

    let $Country = &A.COUNTRY
    let $NID_Type = &A.NATIONAL_ID_TYPE
    let $NI_Nbr = &A.NATIONAL_ID

FROM  PS_PERS_NID A
WHERE A.EMPLID = $EmplID
AND   A.PRIMARY_NID = 'Y'
End-Select
    #debuga do Remove-Procedure-Indent
End-Procedure Get-Primary-NI


!***********************************************************************
Begin-Procedure Get-Total-Employees($Employee_Selection, :#Total)
    let #Total = 0

Begin-Select On-Error=SQL-Error
COUNT(DISTINCT GRP.EMPLID) &TOTAL
    let #Total = &TOTAL

FROM  PS_GP_PYE_PRC_STAT GRP
WHERE 1 = 1
[$Employee_Selection]
End-Select
    #debuga do Remove-Procedure-Indent
End-Procedure Get-Total-Employees


!***********************************************************************************************
!* Procedure for Checking that the correct Bank Account and Net Distribution
!* information is entered for the employees.
!***********************************************************************************************
Begin-Procedure Check-Bank-Accounts($Employee_Selection,  $Thru_Date, $Where_Other)

    let $Description = 'Employees need to have a valid bank account listed as well as at least one net pay distribution.'
    do Report-Heading('Incorrect Employee Bank Account Details',$Description)
    let $hd= 'Bank Account Validations:'
       print  $hd (0,{Pos1})
let #Count = 0
Begin-Select On-Error=Error-SQL
A.EMPLID               &AEMPLID                          
AA.NAME_PSFORMAT         &aaname                                 
'Incorrect Bank/Account Code Length Details'              &MESSAGE1
B.COMPANY              &bcmpny                                  
B.EMPL_RCD             &bempl_rcd                                  
C.BANK_CD             &C.BANK_CD                                    
C.ACCOUNT_EC_ID       &C.ACCOUNT_EC_ID                            
C.ACCOUNT_ID          &C.ACCOUNT_ID  

 

 
  let $aemplid= &AEMPLID
  MOVE &bempl_rcd TO $bempl_rcd
  let $aaname = &aaname
  let $bcmpny = &bcmpny
  LET $BANK_CD = RTRIM(&C.BANK_CD,' ')
  LET $ACCOUNT_ID =RTRIM(&C.ACCOUNT_EC_ID,' ') 
  LET $ACCT=  RTRIM(TO_CHAR(&C.ACCOUNT_ID),' ')
  Let #Len = Length($BANK_CD)
  Let #Len1 = Length($ACCOUNT_ID)
    LET $AGEa= &MESSAGE1 
  let $AGE1 = $AGEa|| ', Bank Id: '||$BANK_CD||', Account Number: '||$ACCOUNT_ID||', Account Id: '||$ACCT
 
  If #Len <> 6  OR #Len1 <> 8
     print $aemplid        (+1, {Pos1}) 
     print $aaname          (0,  {Pos3})
     print $bcmpny          (0,  {Pos6})  
     print $bempl_rcd      (0,{Pos2})
      print $AGE1            (0, {Pos4})     
     
  add 1 to #Count
  END-IF

FROM  PS_PERS_DATA_EFFDT A,PS_PERSON_NAME AA,PS_PYE_BANKACCT C,
      PS_JOB B

WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <=  $Thru_Date)
AND   C.EMPLID = A.EMPLID
AND   A.EMPLID = B.EMPLID
AND   A.EMPLID = AA.EMPLID
AND   C.EMPLID = B.EMPLID
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <=  $Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                  WHERE  B3.EMPLID = B.EMPLID
                  AND    B3.EMPL_RCD = B.EMPL_RCD
                  AND    B3.EFFDT = B.EFFDT)
AND   C.EFF_STATUS = 'A'
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = A.EMPLID
              [$Employee_Selection])
 [$Where_Other]
ORDER BY   3, 2, 1
End-Select

    if not #Count
        print '*** None Found ***' (+1, {Pos1})
    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Check-Bank-Accounts

!BREAKUP OF PROCEDURE
!PROCEDURE for net pay distribution
Begin-Procedure Check-Bank-Accounts_NPD($Employee_Selection,  $Thru_Date, $Where_Other)
     
    let $hd = 'Net pay Distribution Validation:'
    print  $hd (+1, {Pos1})

let #Count = 0
let $CBANK_CD=''
Begin-Select On-Error=Error-SQL
A.EMPLID                                                  (+1, {Pos1})
AA.NAME                                                   (0,  {Pos3})
'Incorrect Bank/Distribution Details'                     &MESSAGE
B.COMPANY                                                 (0,  {Pos6})
B.EMPL_RCD                                                 (0,{Pos2})
D1.BANK_CD  &D1.BANK_CD                                    
D1.ACCOUNT_EC_ID &D1.ACCOUNT_EC_ID
D1.ACCOUNT_ID     &D1.ACCT                         

        add 1 to #Count
   
   LET $BANK_CD = RTRIM(&D1.BANK_CD,' ')
   LET $ACCOUNT_EC_ID =RTRIM(&D1.ACCOUNT_EC_ID,' ') 
   mOVE &D1.ACCT TO $ACCT

   LET $AGE = &MESSAGE ||', Bank Id: '||$BANK_CD||', Account Number: '||$ACCOUNT_EC_ID||', Account Id: '||$ACCT
      print $AGE (0, {Pos4})
FROM  PS_PERS_DATA_EFFDT A,PS_PERSON_NAME AA,PS_PYE_BANKACCT D1,PS_JOB B

WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <=  $Thru_Date)
AND   A.EMPLID= D1.EMPLID
AND   A.EMPLID = B.EMPLID
AND   A.EMPLID = AA.EMPLID
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <=  $Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                  WHERE  B3.EMPLID = B.EMPLID
                  AND    B3.EMPL_RCD = B.EMPL_RCD
                  AND    B3.EFFDT = B.EFFDT)
AND NOT EXISTS (SELECT 'X' FROM PS_GP_NET_DIST_DTL C, PS_PYE_BANKACCT D
                WHERE  C.EMPLID = A.EMPLID
                AND    C.EFFDT = (SELECT MAX(C2.EFFDT) FROM PS_GP_NET_DIST_DTL C2
                                  WHERE  C2.EMPLID = C.EMPLID
                                  AND    C2.EMPL_RCD = C.EMPL_RCD
                                  AND    C2.RUN_TYPE = C.RUN_TYPE
                                  AND    C2.EFFDT <=  $Thru_Date)
                AND    D.EMPLID = A.EMPLID
                AND    D.ACCOUNT_ID = C.ACCOUNT_ID
                AND    D.EFF_STATUS = 'A'
                AND    D.BANK_CD <> '000000')
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = A.EMPLID
              [$Employee_Selection])
 [$Where_Other]
End-Select
  if not #Count
              print '*** None Found***' (+1, {Pos1})
             end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Check-Bank-Accounts_NPD

!***********************************************************************
!Misssing NI or Temporray Ni Numbers                                   *
!***********************************************************************

Begin-Procedure NI-Check($Employee_Selection, $EffDt, $Where_Other)


    do Report-Heading('Missing or Temporary NI Numbers', 'All employees should have NI Number specified.  Temporary numbers can be used until a NI number is allocated to the employee.')
    let #Count = 0

Begin-Select On-Error=Error-SQL
A.EMPLID                                       (+1, {Pos1})
A.SEX
AA.NAME                                        (0,  {Pos3})
D.BIRTHDATE
B.EMPL_RCD                                     (0,  {Pos2})
B.COMPANY                                      (0,  {Pos6})

    do Get-Primary-NI(&A.EMPLID, $Country, $NID_Type, $NI_Nbr)

    if isblank($NID_Type) or isblank($NI_Nbr)
        let $Output = 'No Primary NI Number Listed.  Birthdate: ' || &D.BIRTHDATE || ',  Sex: ' || &A.SEX
    else
        let $Output = 'Country: ' || $Country || ',  NID Type: ' || $NID_Type || ',  NI Nbr: ' || $NI_Nbr
    end-if
    print $Output (0, {Pos4})

    add 1 to #Count

FROM  PS_PERS_DATA_EFFDT A,PS_PERSON_NAME AA,
      PS_PERSON D,
      PS_JOB B
WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <= $EffDt)
AND   D.EMPLID = A.EMPLID
AND   D.EMPLID = AA.EMPLID
AND   D.EMPLID = B.EMPLID
AND   AA.EMPLID =B.EMPLID
AND   A.EMPLID = B.EMPLID
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <= $EffDt)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                  WHERE  B3.EMPLID = B.EMPLID
                  AND    B3.EMPL_RCD = B.EMPL_RCD
                  AND    B3.EFFDT = B.EFFDT)
AND (NOT EXISTS (SELECT 'X' FROM PS_PERS_NID NID1
                WHERE  NID1.EMPLID = A.EMPLID
                AND    NID1.PRIMARY_NID = 'Y'
                AND    NID1.COUNTRY = 'GBR'
                AND    NID1.NATIONAL_ID_TYPE IN ('PR_9','PR','TEMP_9','TEMP')
                AND    NID1.NATIONAL_ID <> ' '
                AND    NID1.NATIONAL_ID <> 'TN%')
    or EXISTS (SELECT 'X' FROM PS_PERS_NID NID2
                WHERE  NID2.EMPLID = A.EMPLID
                AND    NID2.PRIMARY_NID = 'Y'
                AND    NID2.COUNTRY = 'GBR'
                AND    NID2.NATIONAL_ID_TYPE IN ('PR_9','PR','TEMP_9','TEMP')
                AND    (NID2.NATIONAL_ID LIKE 'TN%' OR NID2.NATIONAL_ID <= ' '))
                )
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = B.EMPLID
                AND GRP.EMPL_RCD =B.EMPL_RCD
              [$Employee_Selection])
 [$Where_Other]

End-Select

    if not #Count
        print '*** None Found ***'                         (+1, {Pos1})
    else
        do Get-Total-Employees($Employee_Selection, #Total)
        print 'Percentage of Total Employees in Pay Run: ' (+1, {Pos1})
        let $Total = edit(#Count/#Total * 100, '90.00')
        print $Total                                         (0, 0)
        print '%'                                           (0, 0)

    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure NI-Check


!***********************************************************************
!Procedure to check NID Prefix                                         *
!***********************************************************************

Begin-Procedure Nid-Prefix-GBR($Employee_Selection,$Thru_Date, $Where_Other)

   let $Detail = 'ALL employees should have valid permanent NI Number for end of year reporting.'
   do Report-Heading('NI Number Prefixes ', $Detail)
   let #Count = 0

Begin-Select On-Error=SQL-Error
A.EMPLID                       (+1,{Pos1})
B.EMPL_RCD                     ( 0,{Pos2})
B.COMPANY                      ( 0,{Pos6})
AA.NAME                        ( 0,{Pos3})
N.COUNTRY
N.NATIONAL_ID_TYPE             ( 0,{Pos4})
N.NATIONAL_ID                  ( 0,{Pos88})

   add 1 to #Count

FROM PS_PERS_DATA_EFFDT A,PS_JOB B,PS_PERSON_NAME AA,PS_PERS_NID N
WHERE
A.EMPLID = AA.EMPLID
AND A.EMPLID = N.EMPLID
AND   B.EMPLID = A.EMPLID
AND A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                WHERE  A2.EMPLID = A.EMPLID
                AND    A2.EFFDT <= $Thru_Date)
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                WHERE  B2.EMPLID = B.EMPLID
                AND    B2.EMPL_RCD = B.EMPL_RCD
                AND    B2.EFFDT <=$Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                 WHERE  B3.EMPLID = B.EMPLID
                 AND    B3.EMPL_RCD = B.EMPL_RCD
                 AND    B3.EFFDT <= B.EFFDT)
AND   N.NATIONAL_ID_TYPE IN('PR_9','PR')
AND   1=2                                               ! Replace line with NI Number prefixe Validation when in HR
AND   N.COUNTRY='GBR'
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = A.EMPLID
              AND    GRP.EMPL_RCD = B.EMPL_RCD
              [$Employee_Selection])
[$Where_Other]

ORDER BY A.EMPLID, B.EMPL_RCD

End-Select

   if not #Count
       print '*** None Found ***' (+1, {Pos1})
   end-if

   #debuga do Remove-Procedure-Indent
End-Procedure Nid-Prefix-GBR


!********************************************************************************************
!* Checking for Duplicate NI Numbers among different active employees in the current payroll*
!********************************************************************************************

Begin-Procedure Duplicate-NI($Employee_Selection,  $Thru_Date, $Where_Other)

    do Report-Heading('Duplicate NI Numbers','NI Numbers are unique ,therefore the same number should not be entered against multiple employee records')
    let #Count = 0


Begin-Select On-Error=SQL-Error
D.NATIONAL_ID
D.COUNTRY
D.NATIONAL_ID_TYPE
A.EMPLID                                       (+1, {Pos1})
AA.NAME                                        (0,  {Pos3})
B.EMPL_RCD                                     (0,  {Pos2})
B.COMPANY                                      (0,  {Pos6})

    do Get-NI-Employee-Details(&A.EMPLID, &D.COUNTRY, &D.NATIONAL_ID_TYPE, &D.NATIONAL_ID, $Others)
    let $Output = 'NI Number: '  || &D.NATIONAL_ID || '  Other Employee IDs: ' || $Others 
    let #depth = wrapdepth($Output,{Pos4},1,'<13>','')

    print $Output                              (0, {Pos4},100) wrap 100 #depth 
    position (+1) 
    add 1 to #Count

FROM PS_PERS_DATA_EFFDT A,
     PS_PERS_NID D, PS_PERSON_NAME AA,
     PS_JOB B
WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <=  $Thru_Date)
AND   D.EMPLID = A.EMPLID
AND   D.EMPLID = B.EMPLID
AND   A.EMPLID= AA.EMPLID
AND   A.EMPLID = B.EMPLID
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <=  $Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                  WHERE  B3.EMPLID = B.EMPLID
                  AND    B3.EMPL_RCD = B.EMPL_RCD
                  AND    B3.EFFDT = B.EFFDT)
AND   D.COUNTRY = 'GBR'
AND   D.NATIONAL_ID_TYPE IN('PR_9','PR','TEMP','TEMP_9')
AND   D.NATIONAL_ID <> ' '
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = B.EMPLID
                    AND GRP.EMPL_RCD =B.EMPL_RCD  
              [$Employee_Selection])
AND   EXISTS (SELECT 'X' FROM PS_PERS_NID NID1
              WHERE  NID1.COUNTRY = D.COUNTRY
              AND    NID1.NATIONAL_ID_TYPE = D.NATIONAL_ID_TYPE
              AND    NID1.NATIONAL_ID = D.NATIONAL_ID
              AND    NID1.EMPLID <> A.EMPLID)
[$Where_Other]
ORDER BY  B.COMPANY, D.NATIONAL_ID, A.EMPLID, AA.NAME
End-Select

    if not #Count
        print '*** None Found ***' (+1, {Pos1})
    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Duplicate-NI

!********************************************************************************************
!* Checking for NI category for employees nearing 21 years of age within the next calendar  *
!********************************************************************************************

Begin-Procedure Nearing-21-NI($Employee_Selection, $EffDt, $Where_Other)

   let #Count = 0
   do Report-Heading('Nearing 21 Years of age','Employee reaching or has reached 21 years of age, below NI categories will become invalid')
   do Convert-To-DTU-Date($EffDt, $EffDT_DTU)

Begin-Select On-Error=SQL-Error
A.EMPLID                &A_EMPLID
A.NAME                  &A_NAME
A.BIRTHDATE
D.GPGB_NI_CATEGORY
B.EMPL_RCD               &A_EMPL_RCD
B.COMPANY               &C_COMPANY
   
   do Convert-To-DTU-Date(&A.BIRTHDATE, $Birthdate_DTU)
   do DTU-Diff-Months($Birthdate_DTU, $EffDt_DTU, #Age_Months)
   let #AGEINMONTHS=  #Age_Months
  IF (#AGEINMONTHS >= 252)
   add 1 to #Count
   do dtu-add-years($Birthdate_DTU, 21, $dtu_date_out)
   do Convert-From-DTU-Date($dtu_date_out,$date_out)
   do Get-Tax-Details(&A_EMPLID, 0, $EffDt, $NI_Cat, $Unused, $Unused)
   let $Output = 'Date on which attaining 21 years of age : ' || $date_out || ',  NI Category: ' || $NI_Cat
   PRINT &A_EMPLID        (+1, {Pos1})
   PRINT &A_EMPL_RCD      (0,  {Pos2})
   PRINT &A_NAME          (0,  {Pos3})
   PRINT &C_COMPANY       (0,  {Pos6})
   print $Output          (0,  {Pos4})
 END-IF

FROM
 PS_PERSONAL_DATA A,
     PS_JOB B,
     PS_GPGB_EE_NI D,
     PS_GP_PYGRP E,
     PS_GP_PYENT F
WHERE D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GPGB_EE_NI D1
                 WHERE  D1.EMPLID   = D.EMPLID
                 AND    D1.EMPL_RCD = D.EMPL_RCD
                 AND    D1.EFFDT   <= $EffDt)
AND D.GPGB_NI_CATEGORY IN ('M','I','K','Z')
AND A.EMPLID = D.EMPLID
AND B.EMPLID = D.EMPLID
AND B.EMPL_RCD = D.EMPL_RCD
AND B.HR_STATUS = 'A'
AND (A.DT_OF_DEATH IS NULL OR A.DT_OF_DEATH >= $EffDt)
AND B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
               WHERE  B2.EMPLID = B.EMPLID
               AND    B2.EMPL_RCD = B.EMPL_RCD
               AND    B2.EFFDT <= $EffDt)
AND B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                WHERE  B3.EMPLID = B.EMPLID
                AND    B3.EMPL_RCD = B.EMPL_RCD
                AND    B3.EFFDT = B.EFFDT)
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
               WHERE  GRP.EMPLID = A.EMPLID
              [$Employee_Selection])
 [$Where_Other]
AND E.GP_PAYGROUP = B.GP_PAYGROUP
AND F.PAY_ENTITY = E.PAY_ENTITY
AND F.COUNTRY = 'GBR'
ORDER BY  B.COMPANY, A.EMPLID, A.NAME
End-Select

 if not #Count
    print '*** None Found ***' (+1, {Pos1})
 end-if

 #debuga do Remove-Procedure-Indent

End-Procedure Nearing-21-NI

!*****************************************************************************
!* Showing all employees that are missing either a Tax Code or a NI Category.*
!*****************************************************************************

Begin-Procedure Tax-Check($Employee_Selection,  $Thru_Date, $Where_Other)
    do Report-Heading('Missing Tax Code or NI Letter', 'All employees require both a Tax Code and a NI Letter listed for them to be able to be paid.')
    let #Count = 0

Begin-Select On-Error=Error-SQL
A.EMPLID                               (+1, {Pos1})
B.EMPL_RCD                             (0,  {Pos2})
AA.NAME                                (0,  {Pos3})
B.TAXCODE_UK
D.GPGB_NI_CATEGORY
C.COMPANY                              (0,  {Pos6})

    add 1 to #Count

    if isblank(&B.TAXCODE_UK)
        let $Missing = 'Tax Code'
    else
        let $Missing = ''
    end-if

    if isblank(&D.GPGB_NI_CATEGORY)
        if not isblank($Missing)
            let $Missing = $Missing || ' and NI Category'
        else
            let $Missing = 'NI Category'
        end-if
    end-if

    print $Missing                                  (0, {Pos4})

FROM  PS_PERS_DATA_EFFDT A,PS_PERSON_NAME AA,
      PS_GPGB_EE_TAX B,
      PS_JOB C,
      PS_GPGB_EE_NI D
WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <=  $Thru_Date)
AND   A.EMPLID = AA.EMPLID
AND   B.EMPLID = A.EMPLID
AND   B.EMPLID = C.EMPLID
AND   B.EMPL_RCD = C.EMPL_RCD
AND   B.EFFDT = C.EFFDT
AND   A.EMPLID = C.EMPLID
AND   C.EFFDT = (SELECT MAX(C2.EFFDT) FROM PS_JOB C2
                 WHERE  C2.EMPLID = C.EMPLID
                 AND    C2.EMPL_RCD = C.EMPL_RCD
                 AND    C2.EFFDT <=  $Thru_Date)
AND   C.EFFSEQ = (SELECT MAX(C3.EFFSEQ) FROM PS_JOB C3
                  WHERE  C3.EMPLID = C.EMPLID
                  AND    C3.EMPL_RCD = C.EMPL_RCD
                  AND    C3.EFFDT = C.EFFDT)
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_GPGB_EE_TAX B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <=  $Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_GPGB_EE_TAX B3
                 WHERE  B3.EMPLID = B.EMPLID
                 AND    B3.EMPL_RCD = B.EMPL_RCD
                 AND    B3.EFFDT =  B.EFFDT)
AND   D.EFFDT = (SELECT MAX(D2.EFFDT) FROM PS_GPGB_EE_NI D2
                 WHERE  D2.EMPLID = D.EMPLID
                 AND    D2.EMPL_RCD = D.EMPL_RCD
                 AND    D2.EFFDT <=  $Thru_Date)
AND   (B.TAXCODE_UK = ' ' OR D.GPGB_NI_CATEGORY = ' ')
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = A.EMPLID
              AND    GRP.EMPL_RCD = B.EMPL_RCD
              [$Employee_Selection])
 [$Where_Other]
UNION
Select
A.EMPLID
,0
,AA.NAME
,' '
,' '
,B.COMPANY
FROM  PS_PERS_DATA_EFFDT A,PS_PERSON_NAME AA,
      PS_JOB B

WHERE A.EFFDT = (SELECT MAX(A2.EFFDT) FROM PS_PERS_DATA_EFFDT A2
                 WHERE  A2.EMPLID = A.EMPLID
                 AND    A2.EFFDT <=  $Thru_Date)
AND   A.EMPLID = B.EMPLID
AND   A.EMPLID   = AA.EMPLID
AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
                 WHERE  B2.EMPLID = B.EMPLID
                 AND    B2.EMPL_RCD = B.EMPL_RCD
                 AND    B2.EFFDT <=  $Thru_Date)
AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                  WHERE  B3.EMPLID = B.EMPLID
                  AND    B3.EMPL_RCD = B.EMPL_RCD
                  AND    B3.EFFDT = B.EFFDT)
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
              WHERE  GRP.EMPLID = A.EMPLID
              [$Employee_Selection]
              AND NOT EXISTS (SELECT 'X' FROM PS_GPGB_EE_TAX B
                              WHERE B.EMPLID = A.EMPLID
                              AND   B.EMPL_RCD = GRP.EMPL_RCD
                              AND   B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_GPGB_EE_TAX B2
                                               WHERE  B2.EMPLID = B.EMPLID
                                               AND    B2.EMPL_RCD = B.EMPL_RCD
                                               AND    B2.EFFDT <=  $Thru_Date)
                              AND   B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_GPGB_EE_TAX B3
                                                WHERE  B3.EMPLID = B.EMPLID
                                                AND    B3.EMPL_RCD = B.EMPL_RCD
                                                AND    B3.EFFDT = B.EFFDT)
                             )
              )
 [$Where_Other]
!ORDER BY   6, 3, 1, 2
End-Select

    if not #Count
        print '*** None Found ***' (+1, {Pos1})
    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Tax-Check

!***********************************************************************
!* Shows employees that are approaching pensionable age and code 'C'   *
!***********************************************************************
Begin-Procedure Old-Person-NI($Employee_Selection, $EffDt, $Where_Other)

   do Report-Heading('Nearly Pensionable without NI Code of ''C''','Employees who are nearing or over pension age and do not have an NI Code ''C''.')

   let #Count = 0

   do Convert-To-DTU-Date($EffDt, $EffDT_DTU)
   do dtu-add-months($EffDT_DTU, #malemonths, $Males_DTU)
   do Convert-From-DTU-Date($Males_DTU, $Males)
   do dtu-add-months($EffDT_DTU, #femalemonths, $Females_DTU)
   do Convert-From-DTU-Date($Females_DTU, $Females)

Begin-Select On-Error=SQL-Error
A.EMPLID                &A_EMPLID
A.NAME                  &A_NAME
BB.BIRTHDATE
D.EFFDT
D.GPGB_NI_CATEGORY
B.EMPL_RCD              &A_EMPL_RCD
B.COMPANY               &C_COMPANY
G.SEX                   &G_SEX

   add 1 to #Count

   do Get-Tax-Details(&A_EMPLID, 0, $EffDt, $NI_Cat, $Unused, $Unused)
   do Convert-To-DTU-Date(&BB.BIRTHDATE, $Birthdate_DTU)
   do DTU-Diff-Months($Birthdate_DTU, $EffDt_DTU, #Age_Months)
   let #AGEINMONTHS=  #Age_Months
   let #Age = trunc(#Age_Months / 12, 0)
   let #Age_Months = #Age_Months - (#Age * 12)
   let $Age  = edit(#Age, '888')

   if #Age_Months <> 0
      if #Age_Months = 1
         let $Age  = $Age || ' and ' || edit(#Age_Months, '88') || ' month'
      else
         let $Age  = $Age || ' and ' || edit(#Age_Months, '88') || ' months'
      end-if
   end-if

    do Get-Pension-Age(&BB.BIRTHDATE, &G_SEX, $EffDt, $PensionAgeDate_DTU)
    do DTU-Diff-Months($Birthdate_DTU, $PensionAgeDate_DTU, #Pension_Age_Months)
    
    #debuga show ' &A_EMPLID : ' &A_EMPLID ' &BB.BIRTHDATE : ' &BB.BIRTHDATE ' &G_SEX : ' &G_SEX ' $PensionAgeDate_DTU : ' $PensionAgeDate_DTU ' #AGEINMONTHS : ' #AGEINMONTHS ' #Pension_Age_Months : ' #Pension_Age_Months
    
   IF #AGEINMONTHS >= #Pension_Age_Months
      let $Output = 'Birthdate: ' || &BB.BIRTHDATE || ',  Age: ' || $Age || ',  NI Code: ' || $NI_Cat

      PRINT &A_EMPLID        (+1, {Pos1})
      PRINT &A_EMPL_RCD      (0,  {Pos2})
      PRINT &A_NAME          (0,  {Pos3})
      PRINT &C_COMPANY       (0,  {Pos6})
      print $Output          (0,  {Pos4})
   END-IF

FROM
 PS_PERSON_NAME A,
     PS_PERSON BB,
     PS_JOB B,
     PS_GPGB_EE_NI D,
     PS_GP_PYGRP E,
     PS_GP_PYENT F,
     PS_PERS_DATA_EFFDT G
WHERE D.EFFDT = (SELECT MAX(D1.EFFDT)
                 FROM PS_GPGB_EE_NI D1
                 WHERE  D1.EMPLID   = D.EMPLID
                 AND    D1.EMPL_RCD = D.EMPL_RCD
                 AND    D1.EFFDT   <= $EffDt)
AND D.GPGB_NI_CATEGORY <> 'C'
AND A.EMPLID = D.EMPLID
AND BB.EMPLID = D.EMPLID
AND B.EMPLID = D.EMPLID
AND G.EMPLID = D.EMPLID
AND B.EMPL_RCD = D.EMPL_RCD
AND B.HR_STATUS = 'A'
AND (BB.DT_OF_DEATH IS NULL OR BB.DT_OF_DEATH >= $EffDt)
AND B.EFFDT = (SELECT MAX(B2.EFFDT) FROM PS_JOB B2
               WHERE  B2.EMPLID = B.EMPLID
               AND    B2.EMPL_RCD = B.EMPL_RCD
               AND    B2.EFFDT <= $EffDt)
AND B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) FROM PS_JOB B3
                WHERE  B3.EMPLID = B.EMPLID
                AND    B3.EMPL_RCD = B.EMPL_RCD
                AND    B3.EFFDT = B.EFFDT)
AND G.EFFDT=(SELECT MAX(G1.EFFDT) FROM PS_PERS_DATA_EFFDT G1
             WHERE G1.EMPLID=G.EMPLID
             AND G1.EFFDT <=$EffDt)
AND   EXISTS (SELECT 'X' FROM PS_GP_PYE_PRC_STAT GRP
               WHERE  GRP.EMPLID = A.EMPLID
              [$Employee_Selection])
 [$Where_Other]
AND E.GP_PAYGROUP = B.GP_PAYGROUP
AND F.PAY_ENTITY = E.PAY_ENTITY
AND F.COUNTRY = 'GBR'
ORDER BY  B.COMPANY, A.EMPLID, A.NAME
End-Select

    if not #Count
        print '*** None Found ***' (+1, {Pos1})
    end-if

    #debuga do Remove-Procedure-Indent
End-Procedure Old-Person-NI


!***********************************************************************
!* Returning the list of other employees that have the same National
!* insurance Number.
!***********************************************************************
Begin-Procedure Get-NI-Employee-Details($EmplID, $Country, $NI_Type, $NI_Nbr,
                :$Others)
     let $Others = ''

Begin-Select On-Error=SQL-Error
A.EMPLID

    if isblank($Others)
        let $Others = &A.EMPLID
    else
        let $Others = $Others || ', ' || &A.EMPLID
    end-if

FROM  PS_PERS_NID A
WHERE A.EMPLID <> $EmplID
AND   A.COUNTRY = $Country
AND   A.NATIONAL_ID_TYPE = $NI_Type
AND   A.NATIONAL_ID = $NI_Nbr
ORDER BY A.EMPLID
End-Select

    #debuga do Remove-Procedure-Indent
End-Procedure Get-NI-Employee-Details


!***********************************************************************
!* Returns the Date on which State Pension age is reached based on sliding scale
!***********************************************************************
Begin-Procedure Get-Pension-Age($BirthDt, $Gender, $EffDt, :$PensionAgeDate_DTU)

let $PensionAgeDate = ''
let #PensionAge = 0

Begin-Select On-Error=SQL-Error
B.DATA_VAL1_DT
B.DATA_VAL2_DEC

    let $PensionAgeDate = &B.DATA_VAL1_DT
    let #PensionAge = &B.DATA_VAL2_DEC

FROM PS_GP_BRACKET_DTL B WHERE B.PIN_NUM =(SELECT PIN_NUM FROM PS_GP_PIN WHERE PIN_CODE = 'GBR BR PNSN AGE GBR' AND PIN_TYPE='BR')
    AND B.EFFDT=(SELECT MAX(B1.EFFDT) FROM PS_GP_BRACKET_DTL B1 WHERE B1.PIN_NUM=B.PIN_NUM AND B1.EFFDT<= $EffDt)
    AND DATA_KEY2= $Gender
    AND B.DATA_KEY1_DT=(SELECT MAX(B2.DATA_KEY1_DT) FROM PS_GP_BRACKET_DTL B2 WHERE B2.PIN_NUM=B.PIN_NUM AND B2.EFFDT=B.EFFDT AND B2.DATA_KEY2=B.DATA_KEY2 AND B2.DATA_KEY1_DT<= $BirthDt)    
End-Select

    do Convert-To-DTU-Date($PensionAgeDate, $PensionAgeDate_DTU)
    
    if $PensionAgeDate =''
        do Convert-To-DTU-Date($BirthDt, $BirthDt_DTU)
        do dtu-add-years($BirthDt_DTU, #PensionAge, $PensionAgeDate_DTU)
    end-if
              
End-Procedure Get-Pension-Age