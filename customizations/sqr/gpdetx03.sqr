!***********************************************************************
!  GPDETX03:  Statement of Pay Account                                 *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2014/06/29:23:42:13                                 !
!       $Release:  HR92                                                !
!      $Revision:  111                                                 !
!                                                                      *
!***********************************************************************
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20100525-0507 adj10-90UpdE'
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20101217-0507 byar11-90UpdA'
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 24 06 2011 - sgo11-2011-E ==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20110427 byar11-91UpdD'
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20110704 byar11-90updE-12557729 ==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20111118 byar11-90POC-13385958 ==='
#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20140627 byar14-PUM8-19017798 ==='

! change history
! wdu 04b4      20040729
! wdu 04b5      retro-display
! wdu jw2005    filehandling from 89, pvchild etc.,VBEZ in detail-view
! wdu05b6       added AG-Vortrag, fixed prev-year-issue in header.
! wdu05-891b1   codeline merge 2005-05-12 14:20; EuroSign, trunc of MVS-Names.
! wdu05-881b8   MVS backports, Euro Sign
! wdu05-881b8   AG-Vortrag on page1, Heading-Box3 shifted right 1cm, added TariffGroup
! wdu05-881b8   BAEGV-Field (DEUEV-Status: employed family member etc.) added in header
! wdu05-881b8   get EURO char from global strings table
! wdu05-881b9  shortened AGS description and moved value-prints left 2 positions
! wdu05-881jw06 code changes for Versorgungsbezug/Abfindungen/Sterbegeld
! wdu06-881kug  added KUG implementation
! wdu06-881b11 rewrite of procedure Print_Meldungen.
! wdu06-881b11 added glidezone and StatusKz information in section Meldungen, ICE 1507437000
! wdu06-881b11 added glidezone for display in social insurance page, ICE 1500215000
! wdu06-881b11 added printing of multiple employments (other employers). ICE 1507434000
! wdu06-881b11 modified pagelet logic
! GUl07-890b10 modified preparation of SI data in case of provider change and March Clause
! adj08-890b14 added new section Par23c and Umlage in gpdetx03 report
! adj08-890b14 flexible work time date should be effdt 'Eintritt der Erwerbsminderung' not required.
! adj08-890b14 issue with retro pages for section Social Insurance
! adj08-890b15 added coloumn Entgelt während Einnahme to section Par23c
! adj08-890b15 added march clause condition for social insurance page.
! adj09-890b17 Several changes in GPDETX03
! adj09-890b19 Refund Insurance for March Clause
! did09-900uA  1913449000
! adj10-900uD  1960577000 Issue with section Umlage and Section AI
! adj10-900uE  1987006004 New Column for Section AI
! byar11-900uA 2039262000 German Tax Update 2011-Accident Insurance table
! byar11-910uD 1980109000 Issue with Paybalance report on DB2 Unix Env
! byar11-90updE-12557729  : QK 11: ISSUE FOR CASE OF REGION CHANGE ON GPDETX03 
! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2
! byar11-90updE-12557729  : QK 11: ISSUE FOR CASE OF REGION CHANGE ON GPDESI10 AND GPDETX03 
! byar11-POC-13385958 : Tax Update 2012. New Employee Category


#include 'setenv.sqc' !set environment
#Define ColR 157
#define colh0         1
#define colh1        16
#define colh2        30   !jan
#define colh3        41   !feb
#define colh4M       56
#define colh4        66
#define colh5        68
#define colh6        82
#define colh7        93
#define colh8       105
#define colh9       115
#define colh10      124
#define colh11      138
#define colh12      149
#define colh13      161   !Dec
#define colh14      170
#define colh15      188
#define col0         1
#define col1        16
#define col2        26
#define col3        38
#define col4        50
#define col5        62
#define col6        74
#define col7        86
#define col8        98
#define col9       110
#define col10      122
#define col11      134
#define col12      146
#define col13      158
#define col14      170    !177
#define col15      182



begin-setup
  #include 'setupdb.sqc'
  declare-layout report1
!    orientation  = LANDSCAPE
!    line-height  = 9.5
!    char-width   = 4.32
!    left-margin  = .05
!    right-margin =.05
    paper-size    = (19,11.69)
    orientation   = LANDSCAPE
    line-height   = 14
    max-columns   = 188
    left-margin   = .4
    bottom-margin = .15
    top-margin    = 0.4

  end-declare

  declare-layout report2
    paper-size    = (19,11.69)
    orientation   = LANDSCAPE
    line-height   = 14
    max-columns   = 188
    left-margin   = .4
    bottom-margin = .15
    top-margin    = 0.4
  end-declare
  declare-layout report3
     orientation = PORTRAIT
     line-height=10
     max-columns   = 130
     left-margin=.05
  end-declare
  declare-report report1
    layout = report1
  end-declare
  declare-report report2
    layout = report2
  end-declare
  declare-report report3
    layout = report3
  end-declare

end-setup






!*****************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-PROGRAM

!*****************************************************************************
begin-heading 15  FOR-REPORTS   =  (report1)
!
! heading for the detail report (Form=2)
!
if $Ctl_Comp_Report = '3'
! simple form of heading (no grid) for form=3 (Detail per Pay-Entity)
#include 'stdhdg01.sqc'
   print $PRINTCLASS  (+1,#RptCol)
   print $Ctl_Print       (0,+1)

   print $AMOUNT_SPEC1     (+1,1)  center
   let $PyentDetails = $PyentDescr ||',' ||' '|| $PyentAddr ||',' || ' ' || $PyentZip || ' ' || $PyentCity
   print $PyentDetails (+1, {col0})
end-if

! notice: 2x is never printed/ this is effectively commented out.
if $Ctl_Comp_Report = '2x'
!
! simple form of heading (no grid) for form=2 (Detail)
   let $RP1.EMPL_RCD  = #empl_rcd_nbr

   do HeadingInfos
   print $AMOUNT_SPEC1          (+1,1)  center
   print $PyentDescr            (+1, {col0},28)
   print $Emp_Name              (0, {colh2},50)
   print $HD_EMPLID             (0, {colh6}) bold
   print $emplid                (0, {colh8})
   print $LOCATN                (0, {colh11})   bold
   print &HOME_CD               (0, {colh13})
   print $PyentAddr             (+1, {col0},28)
   print $Address               (0, {colh2})
   print $HD_BIRTHDT            (0, {colh6}) bold
   print $Birthdt               (0, {colh8})
   print $TAXOFF                (0, {colh11}) bold
   print &FINANCE_CD            (0, {colh13})
   print $PyentZip             (+1, {col0})
   print $PyentCity            (0,+1)
   print $PLZ_Ort               (0, {colh2})
   print $HD_HIREDT             (0, {colh6}) bold
   print $Hiredt_HD             (0, {colh8})
   print $EMPLTYPE              (0, {colh11})   bold
   print &EMPL_TYPE             (0, {colh13})
   print $PyentState             (+1, {col0})
   print $HD_TERMDT             (0, {colh6})  bold
   print $Termdt_HD             (0, {colh8})
   print $NATIONAL              (0, {colh11})  bold
   print &NATIONALITY_CD        (0, {colh13})
   print $NATIONALITY           (0, +2)
   print $AHV_NUMBER            (+1, {colh6})  bold
   print &RVNR                  (0, {colh8})
   print $SICARD                (0, {colh11})  bold
   print $CARD_PRES             (0, {colh13})
end-if


!test for alternate version
if $Ctl_Comp_Report = '2'
          alter-printer
            font= 4
            point-size = 7.2

!   let $Emplid=$RP1.EMPLID
   let #RP1.EMPL_RCD = #empl_rcd_nbr

   do HeadingInfos

   do CX_StandardHeaderBox
  !switch font for month-headings
  alter-printer
       font=4
       point-size =13
end-if
!
!
! -- display 'Heading Seitennr'
! -- display $SeitenNr

if  $SeitenNr <> '5'
    ! we do not want this header for the DEUEV messages
        print '_' (+1,1,180) fill bold
        print $ELEM_DESCR    (+1, {colh0}  )  bold
        print $JAN           ( 0, {colh2}  )  bold
        print $FEB           ( 0, {colh3}  )  bold
        print $MAR           ( 0, {colh4M}  )  bold
        print $APR           ( 0, {colh5}  )  bold
        print $MAY           ( 0, {colh6}  )  bold
        print $JUN           ( 0, {colh7}  )  bold
        print $JUL           ( 0, {colh8}  )  bold
        print $AUG           ( 0, {colh9}  )  bold
        print $SEP           ( 0, {colh10} )  bold
        print $OCT           ( 0, {colh11} )  bold
        print $NOV           ( 0, {colh12} )  bold
        print $DEC           ( 0, {colh13} )  bold
        print $TOTAL         ( 0, {colh14} )  bold
        print '_' (+1,1,180) fill  bold
end-if
! switch back the font to body text.
  alter-printer
       font= 3
       point-size =13

end-heading

!**************************************************
begin-procedure GetDate_PlusDays($Date1,#Days,:$Date2)
    do ConvertToComponents($Date1,$tmp_y,$tmp_m,$tmp_d)
    let $Stch = $tmp_y  || $tmp_m ||  $tmp_d || '0000'
    do Format-DateTime($Stch, $End_DT_1, {DEFCMP},'','native')

    let $date_in =  $tmp_y  || '-' || $tmp_m || '-' ||  $tmp_d
    do dtu-add-days($date_in, #Days, $End_DT_1)

    let $YY = substr($End_DT_1,1,4)
    let $MM = substr($End_DT_1,6,2)
    let $DD = substr($End_DT_1,9,2)
    let $Stch = $YY  || $MM ||  $DD || '0000'

    do Format-DateTime($Stch, $Date2, {DEFCMP},'','native')
end-procedure
!---------------------- Flexi ----------------------------------!

!**********************************************************************************
begin-procedure PrepareData_Flexi
if $Ctl_Emplid <> ''
    let $Emplid_Crit_GND3     = ' AND GND3.EMPLID = ''' || $Ctl_Emplid ||  ''' '
else
    let $Emplid_Crit_GND3     = ' '
end-if
!
! clear temporary table
!
Begin-Sql
DELETE FROM PS_GPDE_RP_TX03_4
End-Sql
!
!
let $FirstR = 'Y'
!
begin-select distinct
GND3.EMPLID              &GND3.EMPLID
GND3.PRD_END_DT          &GND3.PRD_END_DT
GND3.GPDE_AL_CPAY_ENDDT &GND3.GPDE_AL_CPAY_ENDDT
       let $NewCpay = &GND3.GPDE_AL_CPAY_ENDDT
       let $NewPrd =  &GND3.PRD_END_DT
       let $NewEmpl = &GND3.EMPLID
       if $LastEmpl <> &GND3.EMPLID
          let $FirstR = 'Y'
       end-if
       if $FirstR <> 'Y' and $NewPrd = $LastPrd
         do Storno3
       end-if
       do DataNew3
       let $FirstR = 'N'
       let $LastCpay = &GND3.GPDE_AL_CPAY_ENDDT
       let $LastPrd =  &GND3.PRD_END_DT
       let $LastEmpl = &GND3.EMPLID
FROM PS_GPDE_RP_FL01_VW GND3 WHERE GND3.PAY_ENTITY = $Ctl_PayEntity
  [$Emplid_Crit_GND3]
 order by GND3.EMPLID,GND3.PRD_END_DT,GND3.GPDE_AL_CPAY_ENDDT
end-select
end-procedure


! adj08-890b14 added new section Par23c and Umlage in gpdetx03 report
begin-procedure par23c_datChk
Let $DataExist = 'N'
BEGIN-SELECT
RPTX03A.GPDE_RP_SK_SL_NET  &RPTX03A1.GPDE_RP_SK_SL_NET
RPTX03A.GPDE_RP_SK_NET     &RPTX03A1.GPDE_RP_SK_NET
RPTX03A.GPDE_RP_SK_SIEXEMP   &RPTX03A1.GPDE_RP_SK_SIEXEMP
RPTX03A.EMPLID         &RPTX03A1.EMPLID
RPTX03A.GPDE_RP_SK_GROSS   &RPTX03A1.GPDE_RP_SK_GROSS

  let #GPDE_RP_SK_SL_NET  = &RPTX03A1.GPDE_RP_SK_SL_NET
  let #GPDE_RP_SK_NET     = &RPTX03A1.GPDE_RP_SK_NET
  let #GPDE_RP_SK_SIEXEMP = &RPTX03A1.GPDE_RP_SK_SIEXEMP
  let #GPDE_RP_SK_GROSS   = &RPTX03A1.GPDE_RP_SK_GROSS

  if #GPDE_RP_SK_SL_NET <> 0 or #GPDE_RP_SK_NET <> 0 or #GPDE_RP_SK_SIEXEMP <> 0
    Let $DataExist = 'Y'
  end-if

FROM PS_GPDE_RP_TX03_1 RPTX03A
where RPTX03A.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03A.EMPLID = $Emplid
AND RPTX03A.EMPL_RCD = #Empl_Rcd_Nbr
[$march_crit_RPTX03A]
order by RPTX03A.PRD_END_DT,RPTX03A.GPDE_AL_CPAY_ENDDT
END-SELECT

 ! Call section Par23c only if employee do have calculation
  if $DataExist = 'Y'
   do par23c
  end-if
end-procedure

begin-procedure par23c

  let $SeitenNr = '9'
  let $PRD_END_DATE2_Old = ' '
     use-report report2
      alter-printer
    font= 4
    point-size =13
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurlEinAus = 1
let #PageLimitSmallStuff = 35

BEGIN-SELECT
RPTX03A.GPDE_RP_SK_SL_NET  &RPTX03A.GPDE_RP_SK_SL_NET
RPTX03A.GPDE_RP_SK_NET     &RPTX03A.GPDE_RP_SK_NET
RPTX03A.GPDE_RP_SK_SIEXEMP   &RPTX03A.GPDE_RP_SK_SIEXEMP
RPTX03A.GPDE_RC_PRT_SIGN     &RPTX03A.GPDE_RC_PRT_SIGN
RPTX03A.GPDE_AL_CPAY_ENDDT    &RPTX03A.GPDE_AL_CPAY_ENDDT
RPTX03A.PRD_END_DT            &RPTX03A.PRD_END_DT
RPTX03A.EMPLID         &RPTX03A.EMPLID
!select currency symbol
RP001.CURRENCY_CD            &RP001.CURRENCY_CD
RPTX03A.GPDE_RP_SK_GROSS   &RPTX03A.GPDE_RP_SK_GROSS
! print only when there are P23c calculations
  if &RPTX03A.GPDE_RP_SK_SL_NET = 0 and &RPTX03A.GPDE_RP_SK_NET = 0 and &RPTX03A.GPDE_RP_SK_SIEXEMP = 0
    goto noprint
  end-if

  let $RETROSTR2 = ''
  let $Actual_Currency_save = &RP001.CURRENCY_CD
  let $PRD_END_DATE2  = &RPTX03A.PRD_END_DT
  let $CPAY_ENDDT     = &RPTX03A.GPDE_AL_CPAY_ENDDT
  let #GPDE_RP_SK_SL_NET = &RPTX03A.GPDE_RP_SK_SL_NET
  let #GPDE_RP_SK_NET    = &RPTX03A.GPDE_RP_SK_NET
  let #GPDE_RP_SK_SIEXEMP= &RPTX03A.GPDE_RP_SK_SIEXEMP
  let $RETROSTR2      = &RPTX03A.GPDE_RC_PRT_SIGN
  let #GPDE_RP_SK_GROSS = &RPTX03A.GPDE_RP_SK_GROSS


  do ConvertToComponents($PRD_END_DATE2,$yyRpt2,$mmRpt2,$ddRpt2)
  do ConvertToComponents($CPAY_ENDDT,$yyCpay,$mmCpay,$ddCpay)

  let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
  let $RprtMon2 =  $mmRpt2
  let $CpayM  = $mmCpay
  let $CpayY  = $yyCpay
  let $RetDt = $mmCpay || '{PTDateDelim}' || $yyCpay

    evaluate &RPTX03A.GPDE_RC_PRT_SIGN
    when = 'N'
        let $NeuAltStr = 'Neu'
        break
    when = 'L'
        let $NeuAltStr = 'Alt'
        break
  when-other
        let $NeuAltStr = ''
        break
  end-evaluate

       if $PRD_END_DATE2_Old <> $PRD_END_DATE2
        add 1 to #CurlEinAus
       end-if

        if #CurlEinAus > #PageLimitSmallStuff
          new-page
          let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
        end-if
    use-report report2
      alter-printer
      font= 4
    if $FirstRowOnPage = 'Y'
         alter-printer
            font= 4
            point-size =13
         ! graphics for the box-header
          add 1 to #CurlEinAus
      let #AktVert = #CurlEinAus - 1
          graphic (#CurlEinAus,1,183) box 2 12
          graphic (#AktVert,23,2)  vert-line 1
          graphic (#AktVert,50,2)  vert-line 1
          graphic (#AktVert,89,2) vert-line 1
          graphic (#AktVert,125,2) vert-line 1
          graphic (#AktVert,150,2) vert-line 1
          graphic (#AktVert,184,2) vert-line 1

          print $RprtMon2         (#CurlEinAus,14) bold
          !Print retro sign
          print $NeuAltStr      (#CurlEinAus,30)
          add 1 to #CurlEinAus
      if $NeuAltStr = 'Neu' or $NeuAltStr = 'Alt'
            print  $RetDt     (#CurlEinAus,30)
        end-if

          print $RprtDate2          (#CurlEinAus,12)
          print #GPDE_RP_SK_SL_NET  (#CurlEinAus,78) edit  9,999,999.99
          print #GPDE_RP_SK_NET     (#CurlEinAus,114) edit 9,999,999.99
          print #GPDE_RP_SK_SIEXEMP (#CurlEinAus,139) edit 9,999,999.99
          print #GPDE_RP_SK_GROSS   (#CurlEinAus,173) edit 9,999,999.99
     end-if

    let $PRD_END_DATE2_Old = $PRD_END_DATE2
noprint:
FROM PS_GPDE_RP_TX03_1 RPTX03A,PS_GPDE_RP_0001_VW RP001
where RPTX03A.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03A.EMPLID = $Emplid
AND RPTX03A.EMPL_RCD = #Empl_Rcd_Nbr
!Join with RP001
AND RP001.EMPLID = RPTX03A.EMPLID
AND RP001.EMPL_RCD = #Empl_Rcd_Nbr
AND RP001.EMPL_RCD = RPTX03A.EMPL_RCD
AND RP001.CAL_RUN_ID = RPTX03A.CAL_RUN_ID
AND RP001.GP_PAYGROUP = RPTX03A.GP_PAYGROUP
AND RP001.CAL_ID = RPTX03A.CAL_ID
AND RP001.RSLT_SEG_NUM = RPTX03A.RSLT_SEG_NUM
AND RP001.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_RPTX03A]
order by RPTX03A.PRD_END_DT,RPTX03A.GPDE_AL_CPAY_ENDDT,RPTX03A.GPDE_RC_PRT_SIGN
END-SELECT
      alter-printer
        font= 4
        point-size =13
        new-page
end-procedure


begin-procedure Umlage_datChk
Let $DataExist = 'N'
begin-select
RPTX03.GPDE_RP_RIGRSS_AMT    &RPTX03B.GPDE_RP_RIGRSS_AMT
RPTX03.GPDE_RP_U1CNTB_AMT    &RPTX03B.GPDE_RP_U1CNTB_AMT
RPTX03.GPDE_RP_U2CNTB_AMT    &RPTX03B.GPDE_RP_U2CNTB_AMT

RPTX03.GPDE_RP_GRSSINSLFD    &RPTX03B.GPDE_RP_GRSSINSLFD
RPTX03.GPDE_RP_GRSSINSEGA    &RPTX03B.GPDE_RP_GRSSINSEGA
RPTX03.GPDE_RP_UML_INSOLV    &RPTX03B.GPDE_RP_UML_INSOLV
!adj09-890b19: RI MC insolvency
RPTX03.GPDE_RP_GRS_INS_MC   &RPTX03B.GPDE_RP_GRS_INS_MC
RPTX03.GPDE_RP_UML_INS_MC   &RPTX03B.GPDE_RP_UML_INS_MC
RPTX03.EMPLID                &RPTX03B.EMPLID

  let #GROSS_INS_AMT = &RPTX03B.GPDE_RP_RIGRSS_AMT
  let #U1CNTB_AMT    = &RPTX03B.GPDE_RP_U1CNTB_AMT
  let #U2CNTB_AMT    = &RPTX03B.GPDE_RP_U2CNTB_AMT

  let #INSOL_LFD  =  &RPTX03B.GPDE_RP_GRSSINSLFD
  let #INSOL_EGA  =  &RPTX03B.GPDE_RP_GRSSINSEGA
  let #UML_INSOL1 =  &RPTX03B.GPDE_RP_UML_INSOLV

  let #GRS_INS_MC = &RPTX03B.GPDE_RP_GRS_INS_MC
  let #UML_INS_MC = &RPTX03B.GPDE_RP_UML_INS_MC
    if #GROSS_INS_AMT <> 0 or #U1CNTB_AMT <> 0 or #U2CNTB_AMT <> 0 or #INSOL_LFD <> 0 or #INSOL_EGA <> 0 or #UML_INSOL1 <> 0  ! or #GRS_INS_MC <> 0 or #UML_INS_MC <> 0
      Let $DataExist = 'Y'
    end-if


FROM PS_GPDE_RP_TX03_1 RPTX03
where RPTX03.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03.EMPLID = $Emplid
AND RPTX03.EMPL_RCD = #Empl_Rcd_Nbr
[$march_crit_RPTX03]
order by RPTX03.PRD_END_DT,RPTX03.GPDE_AL_CPAY_ENDDT
end-select


 if $DataExist = 'Y'
    do Umlage
 end-if
end-procedure


begin-procedure Umlage

    let $SeitenNr = '10'
    use-report report2
      alter-printer
    font= 4
    point-size =13
    let $PRD_END_DATE2_Old = ' '
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurlEinAus = 1
let #PageLimitSmallStuff = 35
begin-select
RPTX03.GPDE_RP_RIGRSS_AMT    &RPTX03.GPDE_RP_RIGRSS_AMT
RPTX03.GPDE_RP_U1CNTB_AMT    &RPTX03.GPDE_RP_U1CNTB_AMT
RPTX03.GPDE_RP_U2CNTB_AMT    &RPTX03.GPDE_RP_U2CNTB_AMT
RPTX03.PRD_END_DT            &RPTX03.PRD_END_DT
RPTX03.GPDE_RC_PRT_SIGN    &RPTX03.GPDE_RC_PRT_SIGN
RPTX03.GPDE_AL_CPAY_ENDDT    &RPTX03.GPDE_AL_CPAY_ENDDT
RPTX03.EMPLID        &RPTX03.EMPLID
!select currency symbol
RP001.CURRENCY_CD            &RP001A.CURRENCY_CD
!adj09-890b17
RPTX03.GPDE_RP_GRSSINSLFD   &RPTX03.GPDE_RP_GRSSINSLFD
RPTX03.GPDE_RP_GRSSINSEGA   &RPTX03.GPDE_RP_GRSSINSEGA
RPTX03.GPDE_RP_UML_INSOLV   &RPTX03.GPDE_RP_UML_INSOLV

  let #INSOL_LFD  =  &RPTX03.GPDE_RP_GRSSINSLFD
  let #INSOL_EGA  =  &RPTX03.GPDE_RP_GRSSINSEGA
  let #UML_INSOL1 =  &RPTX03.GPDE_RP_UML_INSOLV

  let $RETROSTR = ''
  let $Actual_Currency_save = &RP001A.CURRENCY_CD
  let $PRD_END_DATE2  = &RPTX03.PRD_END_DT
  let $CPAY_ENDDT     = &RPTX03.GPDE_AL_CPAY_ENDDT
  let #GROSS_INS_AMT = &RPTX03.GPDE_RP_RIGRSS_AMT
  let #U1CNTB_AMT    = &RPTX03.GPDE_RP_U1CNTB_AMT
  let #U2CNTB_AMT    = &RPTX03.GPDE_RP_U2CNTB_AMT
  let $RETROSTR      = &RPTX03.GPDE_RC_PRT_SIGN

  do ConvertToComponents($PRD_END_DATE2,$yyRpt2,$mmRpt2,$ddRpt2)
  do ConvertToComponents($CPAY_ENDDT,$yyCpay,$mmCpay,$ddCpay)


  let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
  let $RprtMon2 =  $mmRpt2
  let $CpayM  = $mmCpay
  let $CpayY  = $yyCpay
  let $RetDt = $mmCpay || '{PTDateDelim}' || $yyCpay

  evaluate &RPTX03.GPDE_RC_PRT_SIGN
    when = 'N'
        let $NeuAltStr = 'Neu'
        break
    when = 'L'
        let $NeuAltStr = 'Alt'
        break
  when-other
        let $NeuAltStr = ''
        break
  end-evaluate

  let #GROSS_INS_AMT_SUM = #GROSS_INS_AMT_SUM + #GROSS_INS_AMT
  let #U1CNTB_AMT_SUM    = #U1CNTB_AMT_SUM    + #U1CNTB_AMT
  let #U2CNTB_AMT_SUM    = #U2CNTB_AMT_SUM    + #U2CNTB_AMT

  let #INSOL_LFD_SUM  =  #INSOL_LFD_SUM + #INSOL_LFD
  let #INSOL_EGA_SUM  =  #INSOL_EGA_SUM + #INSOL_EGA
  let #UML_INSOL1_SUM =  #UML_INSOL1_SUM + #UML_INSOL1

      if $PRD_END_DATE2_Old <> $PRD_END_DATE2 and $PRD_END_DATE2_Old <> ' '
         add 1 to #CurlEinAus
      end-if

        if #CurlEinAus > #PageLimitSmallStuff
          new-page
          let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
        end-if

      if $FirstRowOnPage = 'Y'
         alter-printer
            font= 4
            point-size =13
         ! graphics for the box-header
          add 1 to #CurlEinAus
      let #AktVert = #CurlEinAus - 1
          graphic (#CurlEinAus,1,183) box 2 12
          graphic (#AktVert,23,2)  vert-line 1
          graphic (#AktVert,44,2)  vert-line 1
          graphic (#AktVert,70,2) vert-line 1
          graphic (#AktVert,93,2) vert-line 1
          graphic (#AktVert,115,2) vert-line 1
          graphic (#AktVert,141,2) vert-line 1
          graphic (#AktVert,166,2) vert-line 1

          print $RprtMon2         (#CurlEinAus,14) bold
          !Print retro sign
          print $NeuAltStr      (#CurlEinAus,30)
          add 1 to #CurlEinAus
! date
      if $NeuAltStr = 'Neu' or $NeuAltStr = 'Alt'
            print  $RetDt     (#CurlEinAus,30)
        end-if
          print $RprtDate2        (#CurlEinAus,12)
          print #GROSS_INS_AMT    (#CurlEinAus,59) edit 9,999,999.99
          print #U1CNTB_AMT       (#CurlEinAus,82) edit 9,999,999.99
          print #U2CNTB_AMT       (#CurlEinAus,104) edit 9,999,999.99

          print #INSOL_LFD        (#CurlEinAus,130) edit 9,999,999.99
          print #INSOL_EGA        (#CurlEinAus,155) edit 9,999,999.99
          print #UML_INSOL1       (#CurlEinAus,173) edit 9,999,999.99

        if #CurlEinAus >= 34
          new-page
        end-if
      end-if
      let $PRD_END_DATE2_Old = $PRD_END_DATE2

FROM PS_GPDE_RP_TX03_1 RPTX03,PS_GPDE_RP_0001_VW RP001
where RPTX03.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03.EMPLID = $Emplid
AND RPTX03.EMPL_RCD = #Empl_Rcd_Nbr
!Join with RP001
AND RP001.EMPLID = RPTX03.EMPLID
AND RP001.EMPL_RCD = #Empl_Rcd_Nbr
AND RP001.EMPL_RCD = RPTX03.EMPL_RCD
AND RP001.CAL_RUN_ID = RPTX03.CAL_RUN_ID
AND RP001.GP_PAYGROUP = RPTX03.GP_PAYGROUP
AND RP001.CAL_ID = RPTX03.CAL_ID
AND RP001.RSLT_SEG_NUM = RPTX03.RSLT_SEG_NUM
AND RP001.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_RPTX03]
order by RPTX03.PRD_END_DT,RPTX03.GPDE_AL_CPAY_ENDDT,RPTX03.GPDE_RC_PRT_SIGN
end-select

  add 1 to #CurlEinAus
  let #tempbox = #CurlEinAus +  1
  graphic (#tempbox,1,183) box 2 1
  let #tempbox = #tempbox + 1
    graphic (#CurlEinAus,23,2)  vert-line 1
    graphic (#CurlEinAus,44,2)  vert-line 1
    graphic (#CurlEinAus,70,2)  vert-line 1
    graphic (#CurlEinAus,93,2)  vert-line 1
    graphic (#CurlEinAus,115,2)  vert-line 1
    graphic (#CurlEinAus,141,2)  vert-line 1
    graphic (#CurlEinAus,166,2)  vert-line 1

    let #CurlEinAus = #CurlEinAus + 1
    let #tempsum    = #CurlEinAus + 1
    print 'Summe'     (#tempsum,2) Bold
    print #GROSS_INS_AMT_SUM  (#CurlEinAus,59) edit 9,999,999.99
    print #U1CNTB_AMT_SUM       (#CurlEinAus,82) edit 9,999,999.99
    print #U2CNTB_AMT_SUM       (#CurlEinAus,104) edit 9,999,999.99

    print #INSOL_LFD_SUM       (#CurlEinAus,130) edit 9,999,999.99
    print #INSOL_EGA_SUM       (#CurlEinAus,155) edit 9,999,999.99
    print #UML_INSOL1_SUM      (#CurlEinAus,173) edit 9,999,999.99
    let #INSOL_LFD_SUM    = 0
    let #INSOL_EGA_SUM    = 0
    let #UML_INSOL1_SUM   = 0

    let #GROSS_INS_AMT_SUM = 0
    let #U1CNTB_AMT_SUM    = 0
    let #U2CNTB_AMT_SUM    = 0
      alter-printer
        font= 4
        point-size =13
        new-page
end-procedure


begin-procedure Umlage_datChkMC
Let $DataExist = 'N'
begin-select
RPTX03.GPDE_RP_RIGRSS_AMT    &RPTX03C.GPDE_RP_RIGRSS_AMT
RPTX03.GPDE_RP_U1CNTB_AMT    &RPTX03C.GPDE_RP_U1CNTB_AMT
RPTX03.GPDE_RP_U2CNTB_AMT    &RPTX03C.GPDE_RP_U2CNTB_AMT

RPTX03.GPDE_RP_GRSSINSLFD    &RPTX03C.GPDE_RP_GRSSINSLFD
RPTX03.GPDE_RP_GRSSINSEGA    &RPTX03C.GPDE_RP_GRSSINSEGA
RPTX03.GPDE_RP_UML_INSOLV    &RPTX03C.GPDE_RP_UML_INSOLV
!adj09-890b19: RI MC insolvency
RPTX03.GPDE_RP_GRS_INS_MC   &RPTX03C.GPDE_RP_GRS_INS_MC
RPTX03.GPDE_RP_UML_INS_MC   &RPTX03C.GPDE_RP_UML_INS_MC
RPTX03.EMPLID                &RPTX03C.EMPLID
SIC01.GPDE_RP_MAR_MON
SIC01.GPDE_RP_MARCH_CLS

  let #GROSS_INS_AMT = &RPTX03C.GPDE_RP_RIGRSS_AMT
  let #U1CNTB_AMT    = &RPTX03C.GPDE_RP_U1CNTB_AMT
  let #U2CNTB_AMT    = &RPTX03C.GPDE_RP_U2CNTB_AMT

  let #INSOL_LFD  =  &RPTX03C.GPDE_RP_GRSSINSLFD
  let #INSOL_EGA  =  &RPTX03C.GPDE_RP_GRSSINSEGA
  let #UML_INSOL1 =  &RPTX03C.GPDE_RP_UML_INSOLV

  let #GRS_INS_MC = &RPTX03C.GPDE_RP_GRS_INS_MC
  let #UML_INS_MC = &RPTX03C.GPDE_RP_UML_INS_MC

    if #GROSS_INS_AMT <> 0 or #INSOL_LFD <> 0 or #INSOL_EGA <> 0 or #GRS_INS_MC <> 0 or #UML_INS_MC <> 0
      Let $DataExist = 'Y'
    end-if

FROM PS_GPDE_RP_TX03_1 RPTX03, PS_GPDE_RP_SI01_VW SIC01
where RPTX03.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03.EMPLID = $Emplid
AND RPTX03.EMPL_RCD = #Empl_Rcd_Nbr
AND RPTX03.EMPLID = SIC01.EMPLID
AND RPTX03.CAL_RUN_ID = SIC01.CAL_RUN_ID
AND RPTX03.EMPL_RCD = SIC01.EMPL_RCD
AND RPTX03.GP_PAYGROUP = SIC01.GP_PAYGROUP
AND RPTX03.CAL_ID      = SIC01.CAL_ID
AND RPTX03.RSLT_SEG_NUM = SIC01.RSLT_SEG_NUM
[$march_crit_RPTX03]
order by RPTX03.PRD_END_DT,RPTX03.GPDE_AL_CPAY_ENDDT
end-select


 if $DataExist = 'Y'
    do UmlageMC
 end-if
end-procedure


begin-procedure UmlageMC
    let $SeitenNr = '10'
    use-report report2
      alter-printer
    font= 4
    point-size =13
    let $PRD_END_DATE2_Old = ' '
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurlEinAus = 1
let #PageLimitSmallStuff = 35
begin-select
RPTX03mc.GPDE_RP_RIGRSS_AMT    &RPTX03mc.GPDE_RP_RIGRSS_AMT
RPTX03mc.GPDE_RP_U1CNTB_AMT    &RPTX03mc.GPDE_RP_U1CNTB_AMT
RPTX03mc.GPDE_RP_U2CNTB_AMT    &RPTX03mc.GPDE_RP_U2CNTB_AMT
RPTX03mc.PRD_END_DT            &RPTX03mc.PRD_END_DT
RPTX03mc.GPDE_RC_PRT_SIGN      &RPTX03mc.GPDE_RC_PRT_SIGN
RPTX03mc.GPDE_AL_CPAY_ENDDT    &RPTX03mc.GPDE_AL_CPAY_ENDDT
RPTX03mc.EMPLID        &RPTX03mc.EMPLID
!select currency symbol
RP001mc.CURRENCY_CD            &RP001mc.CURRENCY_CD
!adj09-890b17
RPTX03mc.GPDE_RP_GRSSINSLFD   &RPTX03mc.GPDE_RP_GRSSINSLFD
RPTX03mc.GPDE_RP_GRSSINSEGA   &RPTX03mc.GPDE_RP_GRSSINSEGA
RPTX03mc.GPDE_RP_UML_INSOLV   &RPTX03mc.GPDE_RP_UML_INSOLV

RPTX03mc.GPDE_RP_GRS_INS_MC   &RPTX03mc.GPDE_RP_GRS_INS_MC
RPTX03mc.GPDE_RP_UML_INS_MC   &RPTX03mc.GPDE_RP_UML_INS_MC
SIC01mc.GPDE_RP_MAR_MON
SIC01mc.GPDE_RP_MARCH_CLS


  let #INSOL_LFD  =  &RPTX03mc.GPDE_RP_GRSSINSLFD
  let #INSOL_EGA  =  &RPTX03mc.GPDE_RP_GRSSINSEGA
  let #UML_INSOL1 =  &RPTX03mc.GPDE_RP_UML_INSOLV

  let #GRS_INS_MC = &RPTX03mc.GPDE_RP_GRS_INS_MC
  let #UML_INS_MC = &RPTX03mc.GPDE_RP_UML_INS_MC

  let $RETROSTR = ''
  let $Actual_Currency_save = &RP001mc.CURRENCY_CD
  let $PRD_END_DATE2  = &RPTX03mc.PRD_END_DT
  let $CPAY_ENDDT     = &RPTX03mc.GPDE_AL_CPAY_ENDDT
  let #GROSS_INS_AMT = &RPTX03mc.GPDE_RP_RIGRSS_AMT
  let #U1CNTB_AMT    = &RPTX03mc.GPDE_RP_U1CNTB_AMT
  let #U2CNTB_AMT    = &RPTX03mc.GPDE_RP_U2CNTB_AMT
  let $RETROSTR      = &RPTX03mc.GPDE_RC_PRT_SIGN

  do ConvertToComponents($PRD_END_DATE2,$yyRpt2,$mmRpt2,$ddRpt2)
  do ConvertToComponents($CPAY_ENDDT,$yyCpay,$mmCpay,$ddCpay)


  let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
  let $RprtMon2 =  $mmRpt2
  let $CpayM  = $mmCpay
  let $CpayY  = $yyCpay
  let $RetDt = $mmCpay || '{PTDateDelim}' || $yyCpay

  evaluate &RPTX03mc.GPDE_RC_PRT_SIGN
    when = 'N'
        let $NeuAltStr = 'Neu'
        break
    when = 'L'
        let $NeuAltStr = 'Alt'
        break
  when-other
        let $NeuAltStr = ''
        break
  end-evaluate

  if (&RPTX03mc.GPDE_RP_UML_INS_MC <> 0 or &RPTX03mc.GPDE_RP_GRS_INS_MC <> 0 )and (&SIC01mc.GPDE_RP_MARCH_CLS = 1)
      let $MarchCL = 'Y'
      do ConvertToComponents(&SIC01mc.GPDE_RP_MAR_MON,$yyRpt2,$mmRpt2,$ddRpt2)
      let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
      let $RprtMon2 =  $mmRpt2
      let #INSOL_LFD  =  0
      let #INSOL_EGA  =  0
      let #UML_INSOL1 =  0
      let #GROSS_INS_AMT = 0
      let #U1CNTB_AMT    = 0
      let #U2CNTB_AMT    = 0
  else
     let $MarchCL = 'N'
      let #UML_INS_MC = 0
      let #GRS_INS_MC = 0
  end-if


  let #GROSS_INS_AMT_SUM = #GROSS_INS_AMT_SUM + #GROSS_INS_AMT
  let #U1CNTB_AMT_SUM    = #U1CNTB_AMT_SUM    + #U1CNTB_AMT
  let #U2CNTB_AMT_SUM    = #U2CNTB_AMT_SUM    + #U2CNTB_AMT

  let #INSOL_LFD_SUM  =  #INSOL_LFD_SUM + #INSOL_LFD
  let #INSOL_EGA_SUM  =  #INSOL_EGA_SUM + #INSOL_EGA
  let #UML_INSOL1_SUM =  #UML_INSOL1_SUM + #UML_INSOL1

  let #GRS_INS_MC_SUM = #GRS_INS_MC_SUM + #GRS_INS_MC
  let #UML_INS_MC_SUM = #UML_INS_MC_SUM + #UML_INS_MC

      if $PRD_END_DATE2_Old <> $PRD_END_DATE2 and $PRD_END_DATE2_Old <> ' '
         add 1 to #CurlEinAus
      end-if

        if #CurlEinAus > #PageLimitSmallStuff
          new-page
          let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
        end-if

      if $FirstRowOnPage = 'Y'
         alter-printer
            font= 4
            point-size =13
         ! graphics for the box-header
          add 1 to #CurlEinAus
      let #AktVert = #CurlEinAus - 1
          graphic (#CurlEinAus,1,183) box 2 12
          graphic (#AktVert,23,2)  vert-line 1
          graphic (#AktVert,44,2)  vert-line 1
          graphic (#AktVert,70,2) vert-line 1
          graphic (#AktVert,93,2) vert-line 1
          graphic (#AktVert,115,2) vert-line 1
          graphic (#AktVert,141,2) vert-line 1
          graphic (#AktVert,166,2) vert-line 1

          print $RprtMon2         (#CurlEinAus,14) bold
          !Print retro sign
          print $NeuAltStr      (#CurlEinAus,30)
          add 1 to #CurlEinAus
! date
      if $NeuAltStr = 'Neu' or $NeuAltStr = 'Alt'
            print  $RetDt     (#CurlEinAus,30)
        end-if
          print $RprtDate2        (#CurlEinAus,12)
          print #GROSS_INS_AMT    (#CurlEinAus,59) edit 9,999,999.99

          print #U1CNTB_AMT       (#CurlEinAus,82) edit 9,999,999.99
          print #U2CNTB_AMT       (#CurlEinAus,104) edit 9,999,999.99
          print #INSOL_LFD        (#CurlEinAus,130) edit 9,999,999.99
          print #GRS_INS_MC        (#CurlEinAus,155) edit 9,999,999.99 ! for March  print in 7th column
         ! print #INSOL_EGA        (#CurlEinAus,155) edit 9,999,999.99
          print #UML_INS_MC       (#CurlEinAus,173) edit 9,999,999.99
        if #CurlEinAus >= 34
          new-page
        end-if
      end-if
      let $PRD_END_DATE2_Old = $PRD_END_DATE2

FROM PS_GPDE_RP_TX03_1 RPTX03mc,PS_GPDE_RP_0001_VW RP001mc, PS_GPDE_RP_SI01_VW SIC01mc
where RPTX03mc.PAY_ENTITY = $Ctl_PayEntity
AND RPTX03mc.EMPLID = $Emplid
AND RPTX03mc.EMPL_RCD = #Empl_Rcd_Nbr
!Join with RP001
AND RP001mc.EMPLID = RPTX03mc.EMPLID
AND RP001mc.EMPL_RCD = #Empl_Rcd_Nbr
AND RP001mc.EMPL_RCD = RPTX03mc.EMPL_RCD
AND RP001mc.CAL_RUN_ID = RPTX03mc.CAL_RUN_ID
AND RP001mc.GP_PAYGROUP = RPTX03mc.GP_PAYGROUP
AND RP001mc.CAL_ID = RPTX03mc.CAL_ID
AND RP001mc.RSLT_SEG_NUM = RPTX03mc.RSLT_SEG_NUM
AND RP001mc.PAY_ENTITY  =  $Ctl_PayEntity
!Join with SI
AND RP001mc.EMPLID = SIC01mc.EMPLID
AND RP001mc.CAL_RUN_ID = SIC01mc.CAL_RUN_ID
AND RP001mc.EMPL_RCD = SIC01mc.EMPL_RCD
AND RP001mc.GP_PAYGROUP = SIC01mc.GP_PAYGROUP
AND RP001mc.CAL_ID      = SIC01mc.CAL_ID
AND RP001mc.RSLT_SEG_NUM = SIC01mc.RSLT_SEG_NUM
AND RP001mc.SEG_END_DT = SIC01mc.SEG_END_DT
[$march_crit_RPTX03MC]
order by RPTX03mc.PRD_END_DT,RPTX03mc.GPDE_AL_CPAY_ENDDT,RPTX03mc.GPDE_RC_PRT_SIGN
end-select

  add 1 to #CurlEinAus
  let #tempbox = #CurlEinAus +  1
  graphic (#tempbox,1,183) box 2 1
  let #tempbox = #tempbox + 1
    graphic (#CurlEinAus,23,2)  vert-line 1
    graphic (#CurlEinAus,44,2)  vert-line 1
    graphic (#CurlEinAus,70,2)  vert-line 1
    graphic (#CurlEinAus,93,2)  vert-line 1
    graphic (#CurlEinAus,115,2)  vert-line 1
    graphic (#CurlEinAus,141,2)  vert-line 1
    graphic (#CurlEinAus,166,2)  vert-line 1

    let #CurlEinAus = #CurlEinAus + 1
    let #tempsum    = #CurlEinAus + 1
    print 'Summe'     (#tempsum,2) Bold
    print #GROSS_INS_AMT_SUM  (#CurlEinAus,59) edit 9,999,999.99
    print #U1CNTB_AMT_SUM       (#CurlEinAus,82) edit 9,999,999.99
    print #U2CNTB_AMT_SUM       (#CurlEinAus,104) edit 9,999,999.99

    print #INSOL_LFD_SUM       (#CurlEinAus,130) edit 9,999,999.99
 !   print #INSOL_EGA_SUM       (#CurlEinAus,155) edit 9,999,999.99
!adj09:sum for MC
    print #GRS_INS_MC_SUM       (#CurlEinAus,155) edit 9,999,999.99
    print #UML_INS_MC_SUM      (#CurlEinAus,173) edit 9,999,999.99

    let #INSOL_LFD_SUM    = 0
    let #INSOL_EGA_SUM    = 0
    let #UML_INSOL1_SUM   = 0
    let #UML_INS_MC_SUM   = 0
    let #GRS_INS_MC_SUM   = 0

    let #GROSS_INS_AMT_SUM = 0
    let #U1CNTB_AMT_SUM    = 0
    let #U2CNTB_AMT_SUM    = 0
      alter-printer
        font= 4
        point-size =13
        new-page
end-procedure




begin-procedure PensionFundChk

let $DataExist = 'N'
begin-select
TX03a1.GPDE_RP_SIGRUNLM_A
TX03a1.GPDE_RP_GRSSINSEGA !BONUS
TX03a1.PRD_END_DT
TX03a1.GPDE_RP_VW_RVAG_MC !Bonus sum when March Cls.
TX03a1.GPDE_RP_RVAG_MC
TX03a1.GPDE_RP_VW_RVBONAG
TX03a1.GPDE_RP_RVBON_AG
TX03a1.GPDE_RC_PRT_SIGN
BV1a.GPDE_RP_SIGRUNLM_A
BV1a.GPDE_RP_SIGRUNLM_B
BV1a.GPDE_RP_PICNTB_AMT

 let #PF_SIGRUNLM_B = &BV1a.GPDE_RP_SIGRUNLM_B
 let #PF_SIGRUNLM_A = &BV1a.GPDE_RP_SIGRUNLM_A
 let #PF_PICNTB     = &BV1a.GPDE_RP_PICNTB_AMT


 !No values to print.
 if #PF_SIGRUNLM_B <> 0 or #PF_SIGRUNLM_A <> 0 or #PF_PICNTB  <> 0
       let $DataExist = 'Y'
 end-if
FROM PS_GPDE_RP_TX03A TX03a1,PS_GPDE_RP_SI01_VW SI02a, PS_GPDE_RP_BV01 BV1a
WHERE TX03a1.PAY_ENTITY = $Ctl_PayEntity
AND TX03a1.EMPLID = $Emplid
AND TX03a1.EMPL_RCD = #Empl_Rcd_Nbr
AND SI02a.GPDE_RP_VW_ELIG = 1
AND SI02a.EMPLID = TX03a1.EMPLID
AND SI02a.CAL_RUN_ID = TX03a1.CAL_RUN_ID
AND SI02a.EMPL_RCD = TX03a1.EMPL_RCD
AND SI02a.GP_PAYGROUP = TX03a1.GP_PAYGROUP
AND SI02a.CAL_ID = TX03a1.CAL_ID
AND SI02a.RSLT_SEG_NUM = TX03a1.RSLT_SEG_NUM
AND SI02a.SLICE_END_DT = TX03a1.SLICE_END_DT
AND BV1a.EMPLID = TX03a1.EMPLID
AND BV1a.CAL_RUN_ID = TX03a1.CAL_RUN_ID
AND BV1a.EMPL_RCD = TX03a1.EMPL_RCD
AND BV1a.GP_PAYGROUP = TX03a1.GP_PAYGROUP
AND BV1a.CAL_ID = TX03a1.CAL_ID
AND BV1a.RSLT_SEG_NUM = TX03a1.RSLT_SEG_NUM
AND BV1a.SLICE_END_DT = TX03a1.SLICE_END_DT
AND TX03a1.CAL_SEQ_NUM = ( SELECT MIN(TX03b1.CAL_SEQ_NUM) FROM PS_GPDE_RP_TX03A TX03b1
                         WHERE TX03b1.EMPLID = TX03a1.EMPLID AND
                         TX03b1.CAL_RUN_ID = TX03a1.CAL_RUN_ID AND
                         TX03b1.EMPL_RCD = TX03a1.EMPL_RCD AND
                         TX03b1.GP_PAYGROUP = TX03a1.GP_PAYGROUP AND
                         TX03b1.CAL_ID = TX03a1.CAL_ID AND
                         TX03b1.RSLT_SEG_NUM = TX03a1.RSLT_SEG_NUM AND
                         TX03b1.SLICE_END_DT = TX03a1.SLICE_END_DT AND
                         TX03b1.GPDE_RC_PRT_SIGN = TX03a1.GPDE_RC_PRT_SIGN)
[$march_crit_TX03a1]
![$order1]
end-select
  if $DataExist = 'Y'
     do Pensionfund
  end-if
end-procedure

begin-procedure PensionFund
  use-report report2
let $PF_PRD_END_DT_Old = ' '
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurLine = 1
let #PageLimitSmallStuff = 33
begin-select
TX03.PRD_END_DT
TX03.GPDE_RP_SIDAYS
TX03.GPDE_RP_RVGRS_ANLZ
TX03.GPDE_RC_PRT_SIGN   &TX03.GPDE_RC_PRT_SIGN
TX03.GPDE_AL_CPAY_ENDDT
TX03.SLICE_END_DT
SI02.GPDE_SIP_REGION
SI02.GPDE_DV_SV_CODE_M
SI02.GPDE_RP_MAR_MON
SI02.GPDE_DV_SV_CODE
SI02.GPDE_DV_EMPL_CAT
BV1.GPDE_SI_PROV_RV
!new values
TX03.GPDE_RP_SIGRUNLM_A
TX03.GPDE_RP_SIGRUNLM_B
BV1.GPDE_RP_SIGRUNLM_A
BV1.GPDE_RP_SIGRUNLM_B
BV1.GPDE_RP_PICNTB_AMT
BV1.GPDE_SI_TAKE_DED

!     let #PF_SIGRUNLM_A = &BV1.GPDE_RP_SIGRUNLM_A
!     let #PF_SIGRUNLM_B = &BV1.GPDE_RP_SIGRUNLM_B
    if ( &BV1.GPDE_SI_TAKE_DED = 'Y' )
        let $BV1.GPDE_SI_TAKE_DED = 'N'
    else
        let $BV1.GPDE_SI_TAKE_DED = 'J'
    end-if
     let #PF_SIGRUNLM_A = &TX03.GPDE_RP_SIGRUNLM_A
     let #PF_SIGRUNLM_B = &TX03.GPDE_RP_SIGRUNLM_B
     let #PF_PICNTB     = &BV1.GPDE_RP_PICNTB_AMT
     let $PF_INS_PROV   = &BV1.GPDE_SI_PROV_RV
     if #PF_SIGRUNLM_A < 0 or #PF_SIGRUNLM_B < 0
        let #PF_PICNTB     = #PF_PICNTB * -1
     end-if

 let $PF_PRD_END_DT = &TX03.PRD_END_DT
 let $PF_CPAY_ENDDT = &TX03.GPDE_AL_CPAY_ENDDT
 let $PF_SLICE_ENDDT = &TX03.SLICE_END_DT ! Col 1 line 2
 let $PF_REGION = &SI02.GPDE_SIP_REGION
 let $PF_EMPL_CAT = &SI02.GPDE_DV_EMPL_CAT
 let $TX03.GPDE_RC_PRT_SIGN = &TX03.GPDE_RC_PRT_SIGN

  if $march = 'N'
     let $PF_SVCODE = &SI02.GPDE_DV_SV_CODE
     let $PF_PRD_END_DT = rtrim(&TX03.PRD_END_DT,' ')
  else
     let $PF_SVCODE = &SI02.GPDE_DV_SV_CODE_M
     let $PF_PRD_END_DT = rtrim(&SI02.GPDE_RP_MAR_MON,' ')
  end-if

 let #PF_SIDAYS = &TX03.GPDE_RP_SIDAYS

  do Format-Number(#PF_SIDAYS,$PF_SIDAYS,'999')
  do ConvertToComponents($PF_PRD_END_DT,$yyRpt2,$mmRpt2,$ddRpt2)
  do ConvertToComponents($PF_CPAY_ENDDT,$yyCpay,$mmCpay,$ddCpay)
!slice dates
  do ConvertToComponents($PF_SLICE_ENDDT,$yyRpt,$mmRpt,$ddRpt)
  let $SliceDt = $mmRpt || '{PTDateDelim}' || $ddRpt

  let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
  let $RprtMon2 =  $mmRpt2
  let $CpayM  = $mmCpay
  let $CpayY  = $yyCpay
  let $RetDt = $mmCpay || '{PTDateDelim}' || $yyCpay
  let $PrdDt = $mmRpt2 || '{PTDateDelim}' || $ddRpt2


    evaluate $TX03.GPDE_RC_PRT_SIGN
    when = 'N'
        let $NeuAltStr = 'neu'
        break
    when = 'L'
        let $NeuAltStr = 'alt'
        break
    when-other
        let $NeuAltStr = ''
        break
   end-evaluate

 if $PF_PRD_END_DT_Old <> $PF_PRD_END_DT and $PF_PRD_END_DT_Old <> ' '
    add 1 to #CurLine
 end-if

 if #CurLine > #PageLimitSmallStuff
!adj page break set to 1
    let #CurLine = 1
    new-page
    let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
 end-if

 if $FirstRowOnPage = 'Y'
! graphics for the box-header
    let #CurLineVert = #CurLine
    add 1 to #CurLine
    graphic (#CurLine,1,184) box 2 1
    graphic (#CurLineVert,9,2)   vert-line 1
    graphic (#CurLineVert,22,2)  vert-line 1
    graphic (#CurLineVert,41,2)  vert-line 1
    graphic (#CurLineVert,49,2)  vert-line 1
    graphic (#CurLineVert,59,2)  vert-line 1
    graphic (#CurLineVert,68,2)  vert-line 1
    graphic (#CurLineVert,98,2)  vert-line 1
    graphic (#CurLineVert,128,2) vert-line 1
    graphic (#CurLineVert,158,2) vert-line 1
   alter-printer
   font = 4
   point-size = 13
    print $RprtMon2         (#CurLine,3) bold
!Print retro sign
    print $NeuAltStr      (#CurLine,10)
    print $PF_INS_PROV    (#CurLine,23)  !Versorgungswerk
    print $PF_SVCODE      (#CurLine,43)  !BGR/PGR
    alter-printer
    font = 3
    point-size = 16
    print $PF_SIDAYS      (#CurLine,51)  edit B999   !Tg/Rv
    print $BV1.GPDE_SI_TAKE_DED      (#CurLine,62)    !Selbstzahler
    print #PF_SIGRUNLM_A  (#CurLine,80)  edit B9,999,999.99 !Ges.-Brutto lfd. Bezug
    print #PF_SIGRUNLM_B  (#CurLine,110) edit B9,999,999.99 !Ges.-Brutto EGA
    print #PF_PICNTB      (#CurLine,140) edit B9,999,999.99 !Gesamtbeitrag RV
    let #AG-ZuschussRV = #PF_PICNTB/2
    print #AG-ZuschussRV  (#CurLine,167) edit B9,999,999.99 ! AG-ZuschussRV

! second row
   alter-printer
   font = 4
   point-size = 13
    let #CurLine = #CurLine + 1
    if $NeuAltStr = 'neu' or $NeuAltStr = 'alt'
       print  $RetDt     (#CurLine,10)
    end-if
!   print $PrdDt  (#CurLine,2)
    print $SliceDt  (#CurLine,2)

   print $PF_EMPL_CAT (#CurLine,43) !BGR/PGR
    alter-printer
    font = 3
    point-size = 16
!generate totals
   let #PF_SIGRUNLM_A_SUM = #PF_SIGRUNLM_A_SUM + #PF_SIGRUNLM_A
   let #PF_SIGRUNLM_B_SUM = #PF_SIGRUNLM_B_SUM + #PF_SIGRUNLM_B
   let #PF_PICNTB_SUM     = #PF_PICNTB_SUM + #PF_PICNTB

  end-if ! end first if
  let $PF_PRD_END_DT_Old = $PF_PRD_END_DT

FROM PS_GPDE_RP_TX03A TX03,PS_GPDE_RP_SI01_VW SI02, PS_GPDE_RP_BV01 BV1
WHERE TX03.PAY_ENTITY = $Ctl_PayEntity
AND TX03.EMPLID = $Emplid
AND TX03.EMPL_RCD = #Empl_Rcd_Nbr
AND SI02.GPDE_RP_VW_ELIG = 1
AND SI02.EMPLID = TX03.EMPLID
AND SI02.CAL_RUN_ID = TX03.CAL_RUN_ID
AND SI02.EMPL_RCD = TX03.EMPL_RCD
AND SI02.GP_PAYGROUP = TX03.GP_PAYGROUP
AND SI02.CAL_ID = TX03.CAL_ID
AND SI02.RSLT_SEG_NUM = TX03.RSLT_SEG_NUM
AND SI02.SLICE_END_DT = TX03.SLICE_END_DT
AND BV1.EMPLID = TX03.EMPLID
AND BV1.CAL_RUN_ID = TX03.CAL_RUN_ID
AND BV1.EMPL_RCD = TX03.EMPL_RCD
AND BV1.GP_PAYGROUP = TX03.GP_PAYGROUP
AND BV1.CAL_ID = TX03.CAL_ID
AND BV1.RSLT_SEG_NUM = TX03.RSLT_SEG_NUM
AND BV1.SLICE_END_DT = TX03.SLICE_END_DT
AND TX03.CAL_SEQ_NUM =  (SELECT MIN(TX03C1.CAL_SEQ_NUM) FROM PS_GPDE_RP_TX03A TX03C1
                         WHERE TX03C1.EMPLID = TX03.EMPLID AND
                         TX03C1.CAL_RUN_ID = TX03.CAL_RUN_ID AND
                         TX03C1.EMPL_RCD = TX03.EMPL_RCD AND
                         TX03C1.GP_PAYGROUP = TX03.GP_PAYGROUP AND
                         TX03C1.CAL_ID = TX03.CAL_ID AND
                         TX03C1.RSLT_SEG_NUM = TX03.RSLT_SEG_NUM AND
                         TX03C1.SLICE_END_DT = TX03.SLICE_END_DT AND
                         TX03C1.GPDE_RC_PRT_SIGN = TX03.GPDE_RC_PRT_SIGN)
[$march_crit_TX03]
[$order1]
!order by TX03.PRD_END_DT,TX03.GPDE_AL_CPAY_ENDDT
end-select

    let #CurLineVert = #CurLine + 1
    add 2 to #CurLine
     alter-printer
     font = 3
     point-size = 16
    graphic (#CurLine,41,144) box 2 12
!    graphic (#CurLineVert,59,2)  vert-line 1
    graphic (#CurLineVert,68,2)  vert-line 1
    graphic (#CurLineVert,98,2)  vert-line 1
    graphic (#CurLineVert,128,2) vert-line 1
    graphic (#CurLineVert,158,2) vert-line 1
!2nd row
    let #CurLineVert = #CurLine + 1
    print 'Summe'     (#CurLineVert,42) Bold
    print #PF_SIGRUNLM_A_SUM  (#CurLineVert,81)  edit B9,99,999.99   Bold
    print #PF_SIGRUNLM_B_SUM  (#CurLineVert,110) edit B9,999,999.99  Bold
    print #PF_PICNTB_SUM      (#CurLineVert,140) edit B9,999,999.99  Bold
    let #AG-ZuschussRV_SUM    =  #PF_PICNTB_SUM/2
    print #AG-ZuschussRV_SUM      (#CurLineVert,167) edit B9,999,999.99  Bold

    let #PF_SIGRUNLM_A_SUM = 0
    let #PF_SIGRUNLM_B_SUM = 0
    let #PF_PICNTB_SUM    = 0
    let #AG-ZuschussRV_SUM = 0

    let #PF_SIGRUNLM_A   = 0
    let #PF_SIGRUNLM_B   = 0
    let #PF_PICNTB       = 0
    let $PF_INS_PROV     =   ' '

new-page
end-procedure


begin-procedure PensionFundChk_MC

let $DataExist = 'N'
begin-select
TX03a1MC.GPDE_RP_SIGRUNLM_A
TX03a1MC.GPDE_RP_GRSSINSEGA !BONUS
TX03a1MC.PRD_END_DT
TX03a1MC.GPDE_RC_PRT_SIGN
BV1aMC.GPDE_RP_SIGRUNLM_B
BV1aMC.GPDE_RP_PICTBM_AMT

 let #PF_SIGRUNLM_B = &BV1aMC.GPDE_RP_SIGRUNLM_B
 let #PF_PICNTB     = &BV1aMC.GPDE_RP_PICTBM_AMT

 !No values to print.
 if #PF_SIGRUNLM_B <> 0 or #PF_PICNTB  <> 0
       let $DataExist = 'Y'
 end-if
FROM PS_GPDE_RP_TX03A TX03a1MC,PS_GPDE_RP_SI01_VW SI02aMC, PS_GPDE_RP_BV01_MC BV1aMC
WHERE TX03a1MC.PAY_ENTITY = $Ctl_PayEntity
AND TX03a1MC.EMPLID = $Emplid
AND TX03a1MC.EMPL_RCD = #Empl_Rcd_Nbr
AND SI02aMC.GPDE_RP_VW_ELIG = 1
AND SI02aMC.EMPLID = TX03a1MC.EMPLID
AND SI02aMC.CAL_RUN_ID = TX03a1MC.CAL_RUN_ID
AND SI02aMC.EMPL_RCD = TX03a1MC.EMPL_RCD
AND SI02aMC.GP_PAYGROUP = TX03a1MC.GP_PAYGROUP
AND SI02aMC.CAL_ID = TX03a1MC.CAL_ID
AND SI02aMC.RSLT_SEG_NUM = TX03a1MC.RSLT_SEG_NUM
AND SI02aMC.SLICE_END_DT = TX03a1MC.SLICE_END_DT
AND BV1aMC.EMPLID = TX03a1MC.EMPLID
AND BV1aMC.CAL_RUN_ID = TX03a1MC.CAL_RUN_ID
AND BV1aMC.EMPL_RCD = TX03a1MC.EMPL_RCD
AND BV1aMC.GP_PAYGROUP = TX03a1MC.GP_PAYGROUP
AND BV1aMC.CAL_ID = TX03a1MC.CAL_ID
AND BV1aMC.RSLT_SEG_NUM = TX03a1MC.RSLT_SEG_NUM
AND BV1aMC.SLICE_END_DT = TX03a1MC.SLICE_END_DT
AND TX03a1MC.CAL_SEQ_NUM = ( SELECT MIN(TX03b1.CAL_SEQ_NUM) FROM PS_GPDE_RP_TX03A TX03b1
                         WHERE TX03b1.EMPLID = TX03a1MC.EMPLID AND
                         TX03b1.CAL_RUN_ID = TX03a1MC.CAL_RUN_ID AND
                         TX03b1.EMPL_RCD = TX03a1MC.EMPL_RCD AND
                         TX03b1.GP_PAYGROUP = TX03a1MC.GP_PAYGROUP AND
                         TX03b1.CAL_ID = TX03a1MC.CAL_ID AND
                         TX03b1.RSLT_SEG_NUM = TX03a1MC.RSLT_SEG_NUM AND
                         TX03b1.SLICE_END_DT = TX03a1MC.SLICE_END_DT AND
                         TX03b1.GPDE_RC_PRT_SIGN = TX03a1MC.GPDE_RC_PRT_SIGN)
[$march_crit_TX03MC]
end-select
  if $DataExist = 'Y'
     do Pensionfund_MC
  end-if
end-procedure


begin-procedure PensionFund_MC
  use-report report2
let $PF_PRD_END_DT_Old = ' '
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurLine = 1
let #PageLimitSmallStuff = 33
begin-select
TX03MC.PRD_END_DT
TX03MC.GPDE_RP_SIDAYS
TX03MC.GPDE_RP_RVGRS_ANLZ
TX03MC.GPDE_RC_PRT_SIGN   &TX03MC.GPDE_RC_PRT_SIGN
TX03MC.GPDE_AL_CPAY_ENDDT
SI02MC.GPDE_SIP_REGION
SI02MC.GPDE_DV_SV_CODE_M
SI02MC.GPDE_RP_MAR_MON
SI02MC.GPDE_DV_SV_CODE
SI02MC.GPDE_DV_EMPL_CAT
BVMC.GPDE_SI_PROV_RV_M
!new values
TX03MC.GPDE_RP_SIGRUNLM_A
TX03MC.GPDE_RP_SIGRUNLM_B
!BVMC.GPDE_RP_SIGRUNLM_A
BVMC.GPDE_RP_SIGRUNLM_B
BVMC.GPDE_RP_PICTBM_AMT
BVMC.GPDE_SI_TAKE_DED

!     let #PF_SIGRUNLM_A = &BVMC.GPDE_RP_SIGRUNLM_A
!     let #PF_SIGRUNLM_B = &BVMC.GPDE_RP_SIGRUNLM_B
     let #PF_SIGRUNLM_B = &TX03MC.GPDE_RP_SIGRUNLM_B
     let #PF_PICNTB     = &BVMC.GPDE_RP_PICTBM_AMT
     let $PF_INS_PROV   = &BVMC.GPDE_SI_PROV_RV_M
     if #PF_SIGRUNLM_B < 0
        let #PF_PICNTB  = #PF_PICNTB * -1
     end-if

    if ( &BVMC.GPDE_SI_TAKE_DED = 'Y' )
        let $BVMC.GPDE_SI_TAKE_DED = 'N'
    else
        let $BVMC.GPDE_SI_TAKE_DED = 'J'
    end-if

 let $PF_PRD_END_DT = &TX03MC.PRD_END_DT
 let $PF_CPAY_ENDDT = &TX03MC.GPDE_AL_CPAY_ENDDT
 let $PF_REGION = &SI02MC.GPDE_SIP_REGION
 let $PF_EMPL_CAT = &SI02MC.GPDE_DV_EMPL_CAT
 let $TX03MC.GPDE_RC_PRT_SIGN = &TX03MC.GPDE_RC_PRT_SIGN

  if $march = 'N'
     let $PF_SVCODE = &SI02MC.GPDE_DV_SV_CODE
     let $PF_PRD_END_DT = rtrim(&TX03MC.PRD_END_DT,' ')
  else
     let $PF_SVCODE = &SI02MC.GPDE_DV_SV_CODE_M
     let $PF_PRD_END_DT = rtrim(&SI02MC.GPDE_RP_MAR_MON,' ')
  end-if

 let #PF_SIDAYS = &TX03MC.GPDE_RP_SIDAYS

  do Format-Number(#PF_SIDAYS,$PF_SIDAYS,'999')
  do ConvertToComponents($PF_PRD_END_DT,$yyRpt2,$mmRpt2,$ddRpt2)
  do ConvertToComponents($PF_CPAY_ENDDT,$yyCpay,$mmCpay,$ddCpay)

  let $RprtDate2 = $mmRpt2 || '{PTDateDelim}' || $ddRpt2
  let $RprtMon2 =  $mmRpt2
  let $CpayM  = $mmCpay
  let $CpayY  = $yyCpay
  let $RetDt = $mmCpay || '{PTDateDelim}' || $yyCpay
  let $PrdDt = $mmRpt2 || '{PTDateDelim}' || $ddRpt2

    evaluate $TX03MC.GPDE_RC_PRT_SIGN
    when = 'N'
        let $NeuAltStr = 'neu'
        break
    when = 'L'
        let $NeuAltStr = 'alt'
        break
    when-other
        let $NeuAltStr = ''
        break
   end-evaluate

 if $PF_PRD_END_DT_Old <> $PF_PRD_END_DT and $PF_PRD_END_DT_Old <> ' '
    add 1 to #CurLine
 end-if

 if #CurLine > #PageLimitSmallStuff
    let #CurLine = 1
    new-page
    let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
 end-if

 if $FirstRowOnPage = 'Y'
! graphics for the box-header
    let #CurLineVert = #CurLine
    add 1 to #CurLine
    graphic (#CurLine,1,184) box 2 1
    graphic (#CurLineVert,9,2)   vert-line 1
    graphic (#CurLineVert,22,2)  vert-line 1
    graphic (#CurLineVert,41,2)  vert-line 1
    graphic (#CurLineVert,49,2)  vert-line 1
    graphic (#CurLineVert,59,2)  vert-line 1
    graphic (#CurLineVert,68,2)  vert-line 1
    graphic (#CurLineVert,98,2)  vert-line 1
    graphic (#CurLineVert,128,2) vert-line 1
    graphic (#CurLineVert,158,2) vert-line 1
   alter-printer
   font = 4
   point-size = 13
    print $RprtMon2         (#CurLine,3) bold
!Print retro sign
    print $NeuAltStr      (#CurLine,10)
    print $PF_INS_PROV    (#CurLine,23)  !Versorgungswerk
    print $PF_SVCODE      (#CurLine,43)  !BGR/PGR
    alter-printer
    font = 3
    point-size = 16
    print $PF_SIDAYS      (#CurLine,51)  edit B999   !Tg/Rv
    print $BVMC.GPDE_SI_TAKE_DED      (#CurLine,62)    !Selbstzahler

!    print #PF_SIGRUNLM_A  (#CurLine,72)  edit B9,999,999.99 !Ges.-Brutto lfd. Bezug
    print #PF_SIGRUNLM_B  (#CurLine,110) edit B9,999,999.99 !Ges.-Brutto EGA
    print #PF_PICNTB      (#CurLine,140) edit B9,999,999.99 !Gesamtbeitrag RV
    let #AG-ZuschussRV = #PF_PICNTB/2
    print #AG-ZuschussRV  (#CurLine,167) edit B9,999,999.99 ! AG-ZuschussRV

! second row
   alter-printer
   font = 4
   point-size = 13
    let #CurLine = #CurLine + 1
    if $NeuAltStr = 'neu' or $NeuAltStr = 'alt'
       print  $RetDt     (#CurLine,10)
    end-if
   print $PrdDt  (#CurLine,2)
   print $PF_EMPL_CAT (#CurLine,43) !BGR/PGR
    alter-printer
    font = 3
    point-size = 16
!generate totals
!   let #PF_SIGRUNLM_A_SUM = #PF_SIGRUNLM_A_SUM + #PF_SIGRUNLM_A
   let #PF_SIGRUNLM_B_SUM = #PF_SIGRUNLM_B_SUM + #PF_SIGRUNLM_B
   let #PF_PICNTB_SUM     = #PF_PICNTB_SUM + #PF_PICNTB

  end-if ! end first if
  let $PF_PRD_END_DT_Old = $PF_PRD_END_DT

FROM PS_GPDE_RP_TX03A TX03MC,PS_GPDE_RP_SI01_VW SI02MC, PS_GPDE_RP_BV01_MC BVMC
WHERE TX03MC.PAY_ENTITY = $Ctl_PayEntity
AND TX03MC.EMPLID = $Emplid
AND TX03MC.EMPL_RCD = #Empl_Rcd_Nbr
AND SI02MC.GPDE_RP_VW_ELIG = 1
AND SI02MC.EMPLID = TX03MC.EMPLID
AND SI02MC.CAL_RUN_ID = TX03MC.CAL_RUN_ID
AND SI02MC.EMPL_RCD = TX03MC.EMPL_RCD
AND SI02MC.GP_PAYGROUP = TX03MC.GP_PAYGROUP
AND SI02MC.CAL_ID = TX03MC.CAL_ID
AND SI02MC.RSLT_SEG_NUM = TX03MC.RSLT_SEG_NUM
AND SI02MC.SLICE_END_DT = TX03MC.SLICE_END_DT
AND BVMC.EMPLID = TX03MC.EMPLID
AND BVMC.CAL_RUN_ID = TX03MC.CAL_RUN_ID
AND BVMC.EMPL_RCD = TX03MC.EMPL_RCD
AND BVMC.GP_PAYGROUP = TX03MC.GP_PAYGROUP
AND BVMC.CAL_ID = TX03MC.CAL_ID
AND BVMC.RSLT_SEG_NUM = TX03MC.RSLT_SEG_NUM
AND BVMC.SLICE_END_DT = TX03MC.SLICE_END_DT
AND TX03MC.CAL_SEQ_NUM =  (SELECT MIN(TX03MC1.CAL_SEQ_NUM) FROM PS_GPDE_RP_TX03A TX03MC1
                         WHERE TX03MC1.EMPLID = TX03MC.EMPLID AND
                         TX03MC1.CAL_RUN_ID = TX03MC.CAL_RUN_ID AND
                         TX03MC1.EMPL_RCD = TX03MC.EMPL_RCD AND
                         TX03MC1.GP_PAYGROUP = TX03MC.GP_PAYGROUP AND
                         TX03MC1.CAL_ID = TX03MC.CAL_ID AND
                         TX03MC1.RSLT_SEG_NUM = TX03MC.RSLT_SEG_NUM AND
                         TX03MC1.SLICE_END_DT = TX03MC.SLICE_END_DT AND
                         TX03MC1.GPDE_RC_PRT_SIGN = TX03MC.GPDE_RC_PRT_SIGN)
[$march_crit_TX03]
[$order1]
!order by TX03MC.PRD_END_DT,TX03MC.GPDE_AL_CPAY_ENDDT
end-select

    let #CurLineVert = #CurLine + 1
    add 2 to #CurLine
     alter-printer
     font = 3
     point-size = 16
    graphic (#CurLine,41,144) box 2 12
    graphic (#CurLineVert,68,2)  vert-line 1
    graphic (#CurLineVert,98,2)  vert-line 1
    graphic (#CurLineVert,128,2) vert-line 1
    graphic (#CurLineVert,158,2) vert-line 1
!2nd row
    let #CurLineVert = #CurLine + 1
    print 'Summe'     (#CurLineVert,42) Bold
    print #PF_SIGRUNLM_B_SUM  (#CurLineVert,110) edit B9,999,999.99  Bold
    print #PF_PICNTB_SUM      (#CurLineVert,140) edit B9,999,999.99  Bold
    let #AG-ZuschussRV_SUM    =  #PF_PICNTB_SUM/2
    print #AG-ZuschussRV_SUM      (#CurLineVert,167) edit B9,999,999.99  Bold

!    let #PF_SIGRUNLM_A_SUM = 0
    let #PF_SIGRUNLM_B_SUM = 0
    let #PF_PICNTB_SUM    = 0
    let #AG-ZuschussRV_SUM = 0

    let #PF_SIGRUNLM_A   = 0
    let #PF_SIGRUNLM_B   = 0
    let #PF_PICNTB       = 0
    let $PF_INS_PROV     =   ' '

new-page
end-procedure


begin-procedure Accdt_Chk

 let #AIcntr = 0
 let #CurLine1 = 2
 let $AI_EVT_EFFDT_Old1 = ' '
 let $AIData = 'N'

begin-select
DBUV1.EMPLID
DBUV1.GPDE_DV_EVT_EFFDT
DBUV1.BEGIN_DT
DBUV1.END_DT
DBUV1.ACCIDENT_INS
DBUV1.SI_ACCIDENT_NUM

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2
 !DBUV1.GPDE_HAZARD1
 !DBUV1.GPDE_AI_GROSS1
 !DBUV1.GPDE_AI_HRS1
 !DBUV1.GPDE_HAZARD1
 !DBUV1.GPDE_AI_GROSS1
 !DBUV1.GPDE_AI_HRS1
 !DBUV1.GPDE_HAZARD2
 !DBUV1.GPDE_AI_GROSS2
 !DBUV1.GPDE_AI_HRS2
 !DBUV1.GPDE_HAZARD3
 !DBUV1.GPDE_AI_GROSS3
 !DBUV1.GPDE_AI_HRS3
 !DBUV1.GPDE_HAZARD4
 !DBUV1.GPDE_AI_GROSS4
 !DBUV1.GPDE_AI_HRS4

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
DBUV1.HAZARD
DBUV1.GPDE_AI_GROSS
DBUV1.GPDE_AI_HRS

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 !let #AI1_HAZARD1         = &DBUV1.GPDE_HAZARD1
 !let #AI1_GROSS1          = &DBUV1.GPDE_AI_GROSS1
 !let #AI1_HRS1            = &DBUV1.GPDE_AI_HRS1
 !let #AI1_HAZARD2         = &DBUV1.GPDE_HAZARD2
 !let #AI1_GROSS2          = &DBUV1.GPDE_AI_GROSS2
 !let #AI1_HRS2            = &DBUV1.GPDE_AI_HRS2
 !let #AI1_HAZARD3         = &DBUV1.GPDE_HAZARD3
 !let #AI1_GROSS3          = &DBUV1.GPDE_AI_GROSS3
 !let #AI1_HRS3            = &DBUV1.GPDE_AI_HRS3
 !let #AI1_HAZARD4         = &DBUV1.GPDE_HAZARD4
 !let #AI1_GROSS4          = &DBUV1.GPDE_AI_GROSS4
 !let #AI1_HRS4            = &DBUV1.GPDE_AI_HRS4
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 let #AI1_HAZARD         = &DBUV1.HAZARD
 let #AI1_GROSS          = &DBUV1.GPDE_AI_GROSS
 let #AI1_HRS            = &DBUV1.GPDE_AI_HRS

 let $AI_EVT_EFFDT1    = &DBUV1.GPDE_DV_EVT_EFFDT

  if $AI_EVT_EFFDT_Old1 <> $AI_EVT_EFFDT1 and $AI_EVT_EFFDT_Old1 <> ' '
    add 1 to #CurLine1
  end-if

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 ! if #AI1_HAZARD1 > 0 or #AI1_GROSS1 > 0 or #AI1_HRS1 > 0
 !      let #AIcntr = #AIcntr + 1
 ! end-if
 ! if #AI1_HAZARD2 > 0 or #AI1_GROSS2 > 0 or #AI1_HRS2 > 0
 !      let #AIcntr = #AIcntr + 1
 ! end-if
 ! if #AI1_HAZARD3 > 0 or #AI1_GROSS3 > 0 or #AI1_HRS3 > 0
 !      let #AIcntr = #AIcntr + 1
 ! end-if
 ! if #AI1_HAZARD4 > 0 or #AI1_GROSS4 > 0 or #AI1_HRS4 > 0
 !      let #AIcntr = #AIcntr + 1
 ! end-if
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
  if #AI1_HAZARD > 0 or #AI1_GROSS > 0 or #AI1_HRS > 0
       let #AIcntr = #AIcntr + 1
  end-if

  if #AIcntr > 0
     Let $AIData = 'Y'
  end-if
   let #AIcntr = 0
   let $AI_EVT_EFFDT_Old1 = $AI_EVT_EFFDT1

From PS_GPDE_DV_DBUV DBUV1,PS_GPDE_DV_DSME DSME1
where DBUV1.EMPLID = $Emplid
AND DBUV1.EMPL_RCD = #Empl_Rcd_Nbr
!adj10QK-1960577000 
!AND DBUV1.GPDE_DV_EVT_EFFDT >= $BegYearAct
!AND DBUV1.GPDE_DV_EVT_EFFDT <= $EndYearAct
AND DBUV1.BEGIN_DT >= $BegYearAct
AND DBUV1.END_DT <= $EndYearAct 
AND DBUV1.EMPLID = DSME1.EMPLID
AND DBUV1.EMPL_RCD = DSME1.EMPL_RCD
AND DBUV1.GPDE_DV_EVT_EFFDT = DSME1.GPDE_DV_EVT_EFFDT
AND DBUV1.GPDE_DV_REP_RSN   = DSME1.GPDE_DV_REP_RSN
AND DBUV1.GPDE_DV_RUN    = DSME1.GPDE_DV_RUN
AND DBUV1.GPDE_DV_CANCEL = DSME1.GPDE_DV_CANCEL
AND DSME1.GPDE_DV_REP_STATUS <> 'F'
AND DSME1.GPDE_DV_DBUV = 'Y'
order by DSME1.EMPLID,DSME1.GPDE_DV_RUN,DSME1.GPDE_DV_CANCEL desc,DSME1.GPDE_DV_EVT_EFFDT,
      DSME1.GPDE_DV_EVT_TYPE
end-select

  if $AIData = 'Y'
     do Accdt_Msg
  end-if

end-procedure


begin-procedure Accdt_Msg
  use-report report2
  alter-printer
  font= 4
  point-size =13

let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurLine = 1
let #PageLimitSmallStuff = 38
let $AI_EVT_EFFDT_Old = ' '
let #BoxCntr = 0
let #CurLineLast = 2
let $GDA = ''
let $AI_REP_DT_Old = ' '
let $AI_DV_CANCEL_Old  = ' '

begin-select
DBUV.EMPLID
DBUV.GPDE_DV_EVT_EFFDT
DBUV.BEGIN_DT   ! print only for the current year in range , add condition for begin_dt and end date with $beginyear
DBUV.END_DT
DBUV.ACCIDENT_INS
DBUV.SI_ACCIDENT_NUM
DBUV.HAZARD
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 !DBUV.GPDE_HAZARD1
 !DBUV.GPDE_AI_GROSS1
 !DBUV.GPDE_AI_HRS1
 !DBUV.GPDE_HAZARD2
 !DBUV.GPDE_AI_GROSS2
 !DBUV.GPDE_AI_HRS2
 !DBUV.GPDE_HAZARD3
 !DBUV.GPDE_AI_GROSS3
 !DBUV.GPDE_AI_HRS3
 !DBUV.GPDE_HAZARD4
 !DBUV.GPDE_AI_GROSS4
 !DBUV.GPDE_AI_HRS4

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
DBUV.GPDE_AI_GROSS
DBUV.GPDE_AI_HRS

DSME.GPDE_DV_REP_DATE
!ADJ10-QK
DSME.GPDE_DV_CANCEL
DSME.GPDE_DV_REP_RSN

 let $AI_REP_DT       = &DSME.GPDE_DV_REP_DATE
 let $AI_EVT_EFFDT    = &DBUV.GPDE_DV_EVT_EFFDT
 let $AI_BEGIN_DT     = &DBUV.BEGIN_DT
 let $AI_END_DT       = &DBUV.END_DT
 let $AI_DV_CANCEL    = &DSME.GPDE_DV_CANCEL
! let $AI_DV_REP_RSN   = &DSME.GPDE_DV_REP_RSN
 let $AI_ACCIDENT_INS = &DBUV.ACCIDENT_INS
 let $AI_SI_ACCIDENT_NUM = &DBUV.SI_ACCIDENT_NUM
 let $AI_HAZARD          = &DBUV.HAZARD

 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 !let #AI_HAZARD1         = &DBUV.GPDE_HAZARD1
 !let #AI_GROSS1          = &DBUV.GPDE_AI_GROSS1
 !let #AI_HRS1            = &DBUV.GPDE_AI_HRS1
 !let #AI_HAZARD2         = &DBUV.GPDE_HAZARD2
 !let #AI_GROSS2          = &DBUV.GPDE_AI_GROSS2
 !let #AI_HRS2            = &DBUV.GPDE_AI_HRS2
 !let #AI_HAZARD3         = &DBUV.GPDE_HAZARD3
 !let #AI_GROSS3          = &DBUV.GPDE_AI_GROSS3
 !let #AI_HRS3            = &DBUV.GPDE_AI_HRS3
 !let #AI_HAZARD4         = &DBUV.GPDE_HAZARD4
 !let #AI_GROSS4          = &DBUV.GPDE_AI_GROSS4
 !let #AI_HRS4            = &DBUV.GPDE_AI_HRS4

 !let $AI_HAZARD1         = &DBUV.GPDE_HAZARD1
 !let $AI_HAZARD2         = &DBUV.GPDE_HAZARD2
 !let $AI_HAZARD3         = &DBUV.GPDE_HAZARD3
 !let $AI_HAZARD4         = &DBUV.GPDE_HAZARD4
 !let #AI_GROSS1 =ROUND(#AI_GROSS1,00)
 !let #AI_GROSS2 =ROUND(#AI_GROSS2,00)
 !let #AI_GROSS3 =ROUND(#AI_GROSS3,00)
 !let #AI_GROSS4 =ROUND(#AI_GROSS4,00)
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 let #AI_GROSS          = &DBUV.GPDE_AI_GROSS
 let #AI_HRS            = &DBUV.GPDE_AI_HRS
 let #AI_GROSS =ROUND(#AI_GROSS,00)
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 

 do Format-DateTime($AI_REP_DT, $AI_REP_DT, {DEFDATE}, '', '')
 do Format-DateTime($AI_EVT_EFFDT, $AI_EVT_EFFDT, {DEFDATE}, '', '')
 do Format-DateTime($AI_BEGIN_DT, $AI_BEGIN_DT, {DEFDATE}, '', '')
 do Format-DateTime($AI_END_DT, $AI_END_DT, {DEFDATE}, '', '')

!  show '  $AI_EVT_EFFDT= '  $AI_EVT_EFFDT ' $AI_REP_DT = ' $AI_REP_DT ' &DSME.GPDE_DV_CANCEL = '&DSME.GPDE_DV_CANCEL
!   if  $AI_EVT_EFFDT_Old <> $AI_EVT_EFFDT AND $AI_EVT_EFFDT_Old <> ' '
!     let #CurLine = #CurLine + 1
!   end-if
!ADJ10-QK: Print in next line when change is detected.
   if ( ( ( $AI_REP_DT_Old <> $AI_REP_DT ) AND ( $AI_REP_DT_Old <> ' ' ) ) OR (($AI_EVT_EFFDT_Old <> $AI_EVT_EFFDT ) AND ($AI_EVT_EFFDT_Old <> ' ') ) 
            or (&DSME.GPDE_DV_CANCEL = 'Y') or (( $AI_DV_CANCEL_Old <> $AI_DV_CANCEL) and ( $AI_DV_CANCEL_Old  <> ' ') ) )
      let #CurLine = #CurLine + 1
    end-if

 if $FirstRowOnPage = 'Y'
      alter-printer
      font= 4
      point-size =13
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2  - replace #CurLine + 4 with #CurLine + 9
    let #CurLine1 = #CurLine + 9 ! check if 9 hazards can be accomodated on same page
   if #CurLine1 >= #PageLimitSmallStuff
      new-page
      let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
      let #CurLine = 1
      let #CurLine1 = 0
      let #BoxCntr = 0
      let #CurLineLast = 2
   end-if
    add 1 to #CurLine
    let #BoxCntr = #BoxCntr + 1
!print $AI_EVT_EFFDT     (#CurLine,4)
    print $AI_REP_DT        (#CurLine,4)
    print $AI_BEGIN_DT      (#CurLine,19)
    print $AI_END_DT        (#CurLine,35)
!adj10-QK print GDA    
     if &DSME.GPDE_DV_CANCEL = 'Y'
        let $GDA = 'Storno ' || &DSME.GPDE_DV_REP_RSN
     else
        let $GDA = &DSME.GPDE_DV_REP_RSN
     end-if  
     
       
    print $GDA              (#CurLine,50)         
    print $AI_ACCIDENT_INS  (#CurLine,72) !55      !edit 99999999999999
    print $AI_SI_ACCIDENT_NUM  (#CurLine,95)   !83     !edit 99999999999999
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
    !print $AI_HAZARD1          (#CurLine,120)!125
    !print #AI_GROSS1           (#CurLine,146)   edit B999,999.99
    !print #AI_HRS1             (#CurLine,177)   edit B999.99
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
    print $AI_HAZARD          (#CurLine,120)!125
    print #AI_GROSS           (#CurLine,146)   edit B999,999.99
    print #AI_HRS             (#CurLine,177)   edit B999.99
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 

    graphic (#CurLine,1,183) horz-line 10

! second row
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 !  if #AI_HAZARD2 > 0 or #AI_GROSS2 > 0 or #AI_HRS2 > 0
 !   let #CurLine = #CurLine + 1
 !   let #BoxCntr = #BoxCntr + 1
 !   graphic (#CurLine,1,183) horz-line 10
 !   print $AI_ACCIDENT_INS     (#CurLine,72)       !edit 99999999999999
 !   print $AI_SI_ACCIDENT_NUM  (#CurLine,95)       !edit 99999999999999
 !   print $AI_HAZARD2          (#CurLine,120) 
 !   print #AI_GROSS2           (#CurLine,146)   edit B999,999.99
 !   print #AI_HRS2             (#CurLine,177)   edit B999.99
 ! end-if

! third row
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 ! if #AI_HAZARD3 > 0 or #AI_GROSS3 > 0 or #AI_HRS3 > 0
 !   let #CurLine = #CurLine + 1
 !   let #BoxCntr = #BoxCntr + 1
 !   graphic (#CurLine,1,183) horz-line 10
 !   print $AI_ACCIDENT_INS  (#CurLine,72)       !edit 99999999999999
 !   print $AI_SI_ACCIDENT_NUM  (#CurLine,95)    !edit 99999999999999
 !   print $AI_HAZARD3          (#CurLine,120) 
 !   print #AI_GROSS3           (#CurLine,146)   edit B999,999.99
 !   print #AI_HRS3             (#CurLine,177)   edit B999.99
 ! end-if

! fourth row
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 
 ! if #AI_HAZARD4 > 0 or #AI_GROSS4 > 0 or #AI_HRS4 > 0
 !   let #CurLine = #CurLine + 1
 !   let #BoxCntr = #BoxCntr + 1
 !   graphic (#CurLine,1,183) horz-line 10
 !   print $AI_ACCIDENT_INS  (#CurLine,72)       !edit 99999999999999
 !   print $AI_SI_ACCIDENT_NUM  (#CurLine,95)       !edit 99999999999999
 !   print $AI_HAZARD4          (#CurLine,120) 
 !   print #AI_GROSS4           (#CurLine,146)   edit B999,999.99
 !   print #AI_HRS4             (#CurLine,177)   edit B999.99
 ! end-if
 end-if
 let #CurLineVert = #CurLineLast - 1
    graphic (#CurLineVert,16,#BoxCntr)   vert-line 1
    graphic (#CurLineVert,32,#BoxCntr)  vert-line 1
    graphic (#CurLineVert,48,#BoxCntr)  vert-line 1
    graphic (#CurLineVert,60,#BoxCntr)  vert-line 1
    graphic (#CurLineVert,87,#BoxCntr)  vert-line 1    
    graphic (#CurLineVert,114,#BoxCntr)  vert-line 1 ! 5 COL
    graphic (#CurLineVert,130,#BoxCntr) vert-line 1
    graphic (#CurLineVert,157,#BoxCntr) vert-line 1
!first box is drawn from row 2
 graphic (#CurLineLast,1,183) box #BoxCntr 1
!set location of next boxes
 let #CurLineLast = #CurLineLast + #BoxCntr + 1

  let #BoxCntr = 0
  let $AI_EVT_EFFDT_Old = $AI_EVT_EFFDT
  let $AI_REP_DT_Old = $AI_REP_DT
  let $AI_DV_CANCEL_Old = $AI_DV_CANCEL

from PS_GPDE_DV_DBUV DBUV,PS_GPDE_DV_DSME DSME
where DBUV.EMPLID = $Emplid
AND DBUV.EMPL_RCD = #Empl_Rcd_Nbr
!adj10QK-1960577000
!AND DBUV.GPDE_DV_EVT_EFFDT >= $BegYearAct
!AND DBUV.GPDE_DV_EVT_EFFDT <= $EndYearAct 
AND DBUV.BEGIN_DT >= $BegYearAct
AND DBUV.END_DT <= $EndYearAct 
AND DBUV.EMPLID = DSME.EMPLID
AND DBUV.EMPL_RCD = DSME.EMPL_RCD
AND DBUV.GPDE_DV_EVT_EFFDT = DSME.GPDE_DV_EVT_EFFDT
AND DBUV.GPDE_DV_REP_RSN   = DSME.GPDE_DV_REP_RSN
AND DBUV.GPDE_DV_RUN    = DSME.GPDE_DV_RUN
AND DBUV.GPDE_DV_CANCEL = DSME.GPDE_DV_CANCEL
AND DSME.GPDE_DV_REP_STATUS <> 'F'
AND DSME.GPDE_DV_DBUV = 'Y'
 ! sgo11-9GPUpdate2011E-Bug12421100  : 24 06 2011 - DBUV Version 2 - add order by DBUV.HAZARD
order by DSME.EMPLID,DSME.GPDE_DV_RUN,DSME.GPDE_DV_CANCEL desc,DSME.GPDE_DV_EVT_EFFDT,
      DSME.GPDE_DV_EVT_TYPE,DBUV.HAZARD
end-select

 new-page

end-procedure



!**********************************************************************************
begin-procedure Storno3
begin-select
GNS3.EMPLID
GNS3.CAL_RUN_ID
GNS3.EMPL_RCD
GNS3.GP_PAYGROUP
GNS3.CAL_ID
GNS3.ORIG_CAL_RUN_ID
GNS3.RSLT_SEG_NUM
GNS3.SEG_END_DT
GNS3.SLICE_END_DT
GNS3.PAY_ENTITY
GNS3.PRD_END_DT
GNS3.GPDE_AL_CPAY_ENDDT
GNS3.GPDE_DV_SV_CODE
GNS3.GPDE_FL_CGRP_KV_E
GNS3.GPDE_FL_CGRP_RV_E
GNS3.GPDE_FL_CGRP_AV_E
GNS3.GPDE_FL_CGRP_PV_E
GNS3.GPDE_FL_CGRP_KV_W
GNS3.GPDE_FL_CGRP_RV_W
GNS3.GPDE_FL_CGRP_AV_W
GNS3.GPDE_FL_CGRP_PV_W
GNS3.GPDE_FL_BTNR_EAST
GNS3.GPDE_FL_BTNR_WEST
GNS3.GPDE_FL_RP_1S1AG
GNS3.GPDE_FL_RP_1S1AN
GNS3.GPDE_FL_RP_1S1B
GNS3.GPDE_FL_RP_1S2AG
GNS3.GPDE_FL_RP_1S2AN
GNS3.GPDE_FL_RP_1S2B
GNS3.GPDE_FL_RP_1S3AG
GNS3.GPDE_FL_RP_1S3AN
GNS3.GPDE_FL_RP_1S3B
GNS3.GPDE_FL_RP_1S4AG
GNS3.GPDE_FL_RP_1S4AN
GNS3.GPDE_FL_RP_1S4B
GNS3.GPDE_FL_RP_2S1AG
GNS3.GPDE_FL_RP_2S1AN
GNS3.GPDE_FL_RP_2S1B
GNS3.GPDE_FL_RP_2S2AG
GNS3.GPDE_FL_RP_2S2AN
GNS3.GPDE_FL_RP_2S2B
GNS3.GPDE_FL_RP_2S3AG
GNS3.GPDE_FL_RP_2S3AN
GNS3.GPDE_FL_RP_2S3B
GNS3.GPDE_FL_RP_2S4AG
GNS3.GPDE_FL_RP_2S4AN
GNS3.GPDE_FL_RP_2S4B
GNS3.GPDE_FL_L001S1_MON
GNS3.GPDE_FL_L001S2_MON
GNS3.GPDE_FL_L001S3_MON
GNS3.GPDE_FL_L001S4_MON
GNS3.GPDE_FL_L001S1_YTD
GNS3.GPDE_FL_L001S2_YTD
GNS3.GPDE_FL_L001S3_YTD
GNS3.GPDE_FL_L001S4_YTD
GNS3.GPDE_FL_RP_L001S1
GNS3.GPDE_FL_RP_L001S2
GNS3.GPDE_FL_RP_L001S3
GNS3.GPDE_FL_RP_L001S4
GNS3.GPDE_FL_L002S1_MON
GNS3.GPDE_FL_L002S2_MON
GNS3.GPDE_FL_L002S3_MON
GNS3.GPDE_FL_L002S4_MON
GNS3.GPDE_FL_L002S1_YTD
GNS3.GPDE_FL_L002S2_YTD
GNS3.GPDE_FL_L002S3_YTD
GNS3.GPDE_FL_L002S4_YTD
GNS3.GPDE_FL_RP_L002S1
GNS3.GPDE_FL_RP_L002S2
GNS3.GPDE_FL_RP_L002S3
GNS3.GPDE_FL_RP_L002S4
GNS3.GPDE_FL_W001E0_MON
GNS3.GPDE_FL_W001E0_YTD
GNS3.GPDE_FL_RP_W001E0
GNS3.GPDE_FL_W002E0_MON
GNS3.GPDE_FL_W002E0_YTD
GNS3.GPDE_FL_RP_W002E0
GNS3.GPDE_FL_W011E0_MON
GNS3.GPDE_FL_W011E0_YTD
GNS3.GPDE_FL_RP_W011E0
GNS3.GPDE_FL_W012E0_MON
GNS3.GPDE_FL_W012E0_YTD
GNS3.GPDE_FL_RP_W012E0
GNS3.GPDE_FL_W020E0_MON
GNS3.GPDE_FL_W020E0_YTD
GNS3.GPDE_FL_RP_W020E0
GNS3.GPDE_FL_W001E0_TMP
GNS3.GPDE_FL_W002E0_TMP
GSS0.GPDE_SIP_REGION
! --GSS0.GPDE_SI_PV_CHILD
  let $GNSF.EMPLID = &GNS3.EMPLID
  let $GNSF.CAL_RUN_ID = &GNS3.CAL_RUN_ID
  let #GNSF.EMPL_RCD = &GNS3.EMPL_RCD
  let $GNSF.GP_PAYGROUP = &GNS3.GP_PAYGROUP
  let $GNSF.CAL_ID = &GNS3.CAL_ID
  let $GNSF.ORIG_CAL_RUN_ID = &GNS3.ORIG_CAL_RUN_ID
  let #GNSF.RSLT_SEG_NUM = &GNS3.RSLT_SEG_NUM
  let $GNSF.SEG_END_DT = &GNS3.SEG_END_DT
  let $GNSF.SLICE_END_DT = &GNS3.SLICE_END_DT
  let $GNSF.PAY_ENTITY = &GNS3.PAY_ENTITY
  let $GNSF.PRD_END_DT = &GNS3.PRD_END_DT
  let $GNSF.GPDE_AL_CPAY_ENDDT = $NewCpay
  let $GNSF.GPDE_DV_SV_CODE = &GNS3.GPDE_DV_SV_CODE
  let $GNSF.GPDE_FL_CGRP_KV_E = &GNS3.GPDE_FL_CGRP_KV_E
  let $GNSF.GPDE_FL_CGRP_RV_E = &GNS3.GPDE_FL_CGRP_RV_E
  let $GNSF.GPDE_FL_CGRP_AV_E = &GNS3.GPDE_FL_CGRP_AV_E
  let $GNSF.GPDE_FL_CGRP_PV_E = &GNS3.GPDE_FL_CGRP_PV_E
  let $GNSF.GPDE_FL_CGRP_KV_W = &GNS3.GPDE_FL_CGRP_KV_W
  let $GNSF.GPDE_FL_CGRP_RV_W = &GNS3.GPDE_FL_CGRP_RV_W
  let $GNSF.GPDE_FL_CGRP_AV_W = &GNS3.GPDE_FL_CGRP_AV_W
  let $GNSF.GPDE_FL_CGRP_PV_W = &GNS3.GPDE_FL_CGRP_PV_W
  let $GNSF.GPDE_FL_BTNR_EAST = &GNS3.GPDE_FL_BTNR_EAST
  let $GNSF.GPDE_FL_BTNR_WEST = &GNS3.GPDE_FL_BTNR_WEST
  if &GNS3.PRD_END_DT <> $NewCpay
     let $Pr_Sign = 'L'
  else
     let $Pr_Sign = 'A'
  end-if
  let #GNSF.GPDE_FL_RP_1S1AG    = -1 * &GNS3.GPDE_FL_RP_1S1AG
  let #GNSF.GPDE_FL_RP_1S1AN    = -1 * &GNS3.GPDE_FL_RP_1S1AN
  let #GNSF.GPDE_FL_RP_1S1B     = -1 * &GNS3.GPDE_FL_RP_1S1B
  let #GNSF.GPDE_FL_RP_1S2AG    = -1 * &GNS3.GPDE_FL_RP_1S2AG
  let #GNSF.GPDE_FL_RP_1S2AN    = -1 * &GNS3.GPDE_FL_RP_1S2AN
  let #GNSF.GPDE_FL_RP_1S2B     = -1 * &GNS3.GPDE_FL_RP_1S2B
  let #GNSF.GPDE_FL_RP_1S3AG    = -1 * &GNS3.GPDE_FL_RP_1S3AG
  let #GNSF.GPDE_FL_RP_1S3AN    = -1 * &GNS3.GPDE_FL_RP_1S3AN
  let #GNSF.GPDE_FL_RP_1S3B     = -1 * &GNS3.GPDE_FL_RP_1S3B
  let #GNSF.GPDE_FL_RP_1S4AG    = -1 * &GNS3.GPDE_FL_RP_1S4AG
  let #GNSF.GPDE_FL_RP_1S4AN    = -1 * &GNS3.GPDE_FL_RP_1S4AN
  let #GNSF.GPDE_FL_RP_1S4B     = -1 * &GNS3.GPDE_FL_RP_1S4B
  let #GNSF.GPDE_FL_RP_2S1AG    = -1 * &GNS3.GPDE_FL_RP_2S1AG
  let #GNSF.GPDE_FL_RP_2S1AN    = -1 * &GNS3.GPDE_FL_RP_2S1AN
  let #GNSF.GPDE_FL_RP_2S1B     = -1 * &GNS3.GPDE_FL_RP_2S1B
  let #GNSF.GPDE_FL_RP_2S2AG    = -1 * &GNS3.GPDE_FL_RP_2S2AG
  let #GNSF.GPDE_FL_RP_2S2AN    = -1 * &GNS3.GPDE_FL_RP_2S2AN
  let #GNSF.GPDE_FL_RP_2S2B     = -1 * &GNS3.GPDE_FL_RP_2S2B
  let #GNSF.GPDE_FL_RP_2S3AG    = -1 * &GNS3.GPDE_FL_RP_2S3AG
  let #GNSF.GPDE_FL_RP_2S3AN    = -1 * &GNS3.GPDE_FL_RP_2S3AN
  let #GNSF.GPDE_FL_RP_2S3B     = -1 * &GNS3.GPDE_FL_RP_2S3B
  let #GNSF.GPDE_FL_RP_2S4AG    = -1 * &GNS3.GPDE_FL_RP_2S4AG
  let #GNSF.GPDE_FL_RP_2S4AN    = -1 * &GNS3.GPDE_FL_RP_2S4AN
  let #GNSF.GPDE_FL_RP_2S4B     = -1 * &GNS3.GPDE_FL_RP_2S4B
  let #GNSF.GPDE_FL_L001S1_MON  = -1 * &GNS3.GPDE_FL_L001S1_MON
  let #GNSF.GPDE_FL_L001S2_MON  = -1 * &GNS3.GPDE_FL_L001S2_MON
  let #GNSF.GPDE_FL_L001S3_MON  = -1 * &GNS3.GPDE_FL_L001S3_MON
  let #GNSF.GPDE_FL_L001S4_MON  = -1 * &GNS3.GPDE_FL_L001S4_MON
  let #GNSF.GPDE_FL_L001S1_YTD  = &GNS3.GPDE_FL_L001S1_YTD
  let #GNSF.GPDE_FL_L001S2_YTD  = &GNS3.GPDE_FL_L001S2_YTD
  let #GNSF.GPDE_FL_L001S3_YTD  = &GNS3.GPDE_FL_L001S3_YTD
  let #GNSF.GPDE_FL_L001S4_YTD  = &GNS3.GPDE_FL_L001S4_YTD
  let #GNSF.GPDE_FL_RP_L001S1   = &GNS3.GPDE_FL_RP_L001S1
  let #GNSF.GPDE_FL_RP_L001S2   = &GNS3.GPDE_FL_RP_L001S2
  let #GNSF.GPDE_FL_RP_L001S3   = &GNS3.GPDE_FL_RP_L001S3
  let #GNSF.GPDE_FL_RP_L001S4   = &GNS3.GPDE_FL_RP_L001S4
  let #GNSF.GPDE_FL_L002S1_MON  = -1 * &GNS3.GPDE_FL_L002S1_MON
  let #GNSF.GPDE_FL_L002S2_MON  = -1 * &GNS3.GPDE_FL_L002S2_MON
  let #GNSF.GPDE_FL_L002S3_MON  = -1 * &GNS3.GPDE_FL_L002S3_MON
  let #GNSF.GPDE_FL_L002S4_MON  = -1 * &GNS3.GPDE_FL_L002S4_MON
  let #GNSF.GPDE_FL_L002S1_YTD  = &GNS3.GPDE_FL_L002S1_YTD
  let #GNSF.GPDE_FL_L002S2_YTD  = &GNS3.GPDE_FL_L002S2_YTD
  let #GNSF.GPDE_FL_L002S3_YTD  = &GNS3.GPDE_FL_L002S3_YTD
  let #GNSF.GPDE_FL_L002S4_YTD  = &GNS3.GPDE_FL_L002S4_YTD
  let #GNSF.GPDE_FL_RP_L002S1   = &GNS3.GPDE_FL_RP_L002S1
  let #GNSF.GPDE_FL_RP_L002S2   = &GNS3.GPDE_FL_RP_L002S2
  let #GNSF.GPDE_FL_RP_L002S3   = &GNS3.GPDE_FL_RP_L002S3
  let #GNSF.GPDE_FL_RP_L002S4   = &GNS3.GPDE_FL_RP_L002S4
  let #GNSF.GPDE_FL_W001E0_MON  = -1 * &GNS3.GPDE_FL_W001E0_MON
  let #GNSF.GPDE_FL_W001E0_YTD  = &GNS3.GPDE_FL_W001E0_YTD
  let #GNSF.GPDE_FL_RP_W001E0   = -1 * &GNS3.GPDE_FL_RP_W001E0
  let #GNSF.GPDE_FL_W002E0_MON  = -1 * &GNS3.GPDE_FL_W002E0_MON
  let #GNSF.GPDE_FL_W002E0_YTD  = &GNS3.GPDE_FL_W002E0_YTD
  let #GNSF.GPDE_FL_RP_W002E0   = -1 * &GNS3.GPDE_FL_RP_W002E0
  let #GNSF.GPDE_FL_W011E0_MON  = -1 * &GNS3.GPDE_FL_W011E0_MON
  let #GNSF.GPDE_FL_W011E0_YTD  = &GNS3.GPDE_FL_W011E0_YTD
  let #GNSF.GPDE_FL_RP_W011E0   = -1 * &GNS3.GPDE_FL_RP_W011E0
  let #GNSF.GPDE_FL_W012E0_MON  = -1 * &GNS3.GPDE_FL_W012E0_MON
  let #GNSF.GPDE_FL_W012E0_YTD  = &GNS3.GPDE_FL_W012E0_YTD
  let #GNSF.GPDE_FL_RP_W012E0   = -1 * &GNS3.GPDE_FL_RP_W012E0
  let #GNSF.GPDE_FL_W020E0_MON  = -1 * &GNS3.GPDE_FL_W020E0_MON
  let #GNSF.GPDE_FL_W020E0_YTD  = &GNS3.GPDE_FL_W020E0_YTD
  let #GNSF.GPDE_FL_RP_W020E0   = -1 * &GNS3.GPDE_FL_RP_W020E0
  let #GNSF.GPDE_FL_W001E0_TMP  = -1 * &GNS3.GPDE_FL_W001E0_TMP
  let #GNSF.GPDE_FL_W002E0_TMP  = -1 * &GNS3.GPDE_FL_W002E0_TMP
  let $GSS1.GPDE_SIP_REGION     = &GSS0.GPDE_SIP_REGION
  ! --let $GSS1.GPDE_SI_PV_CHILD     = &GSS0.GPDE_SI_PV_CHILD
  do Insert_Data_Lohnkonto3
FROM PS_GPDE_RP_FL01_VW GNS3, PS_GPDE_RP_SI01_VW GSS0 WHERE GNS3.PAY_ENTITY = $Ctl_PayEntity
  AND GNS3.GPDE_AL_CPAY_ENDDT = $LastCpay AND GNS3.PRD_END_DT = $NewPrd
  AND GNS3.EMPLID = $LastEmpl AND GNS3.EMPLID = GSS0.EMPLID AND GNS3.CAL_RUN_ID = GSS0.CAL_RUN_ID AND
  GNS3.EMPL_RCD = GSS0.EMPL_RCD AND GNS3.GP_PAYGROUP = GSS0.GP_PAYGROUP AND GNS3.CAL_ID = GSS0.CAL_ID
  AND GNS3.ORIG_CAL_RUN_ID = GSS0.ORIG_CAL_RUN_ID AND GNS3.RSLT_SEG_NUM = GSS0.RSLT_SEG_NUM AND
  GNS3.SEG_END_DT = GSS0.SEG_END_DT AND GNS3.SLICE_END_DT = GSS0.SLICE_END_DT
end-select
end-procedure

!**********************************************************************************
begin-procedure DataNew3
begin-select
GNS4.EMPLID
GNS4.CAL_RUN_ID
GNS4.EMPL_RCD
GNS4.GP_PAYGROUP
GNS4.CAL_ID
GNS4.ORIG_CAL_RUN_ID
GNS4.RSLT_SEG_NUM
GNS4.SEG_END_DT
GNS4.SLICE_END_DT
GNS4.PAY_ENTITY
GNS4.PRD_END_DT
GNS4.GPDE_AL_CPAY_ENDDT
GNS4.GPDE_DV_SV_CODE
GNS4.GPDE_FL_CGRP_KV_E
GNS4.GPDE_FL_CGRP_RV_E
GNS4.GPDE_FL_CGRP_AV_E
GNS4.GPDE_FL_CGRP_PV_E
GNS4.GPDE_FL_CGRP_KV_W
GNS4.GPDE_FL_CGRP_RV_W
GNS4.GPDE_FL_CGRP_AV_W
GNS4.GPDE_FL_CGRP_PV_W
GNS4.GPDE_FL_BTNR_EAST
GNS4.GPDE_FL_BTNR_WEST
GNS4.GPDE_FL_RP_1S1AG
GNS4.GPDE_FL_RP_1S1AN
GNS4.GPDE_FL_RP_1S1B
GNS4.GPDE_FL_RP_1S2AG
GNS4.GPDE_FL_RP_1S2AN
GNS4.GPDE_FL_RP_1S2B
GNS4.GPDE_FL_RP_1S3AG
GNS4.GPDE_FL_RP_1S3AN
GNS4.GPDE_FL_RP_1S3B
GNS4.GPDE_FL_RP_1S4AG
GNS4.GPDE_FL_RP_1S4AN
GNS4.GPDE_FL_RP_1S4B
GNS4.GPDE_FL_RP_2S1AG
GNS4.GPDE_FL_RP_2S1AN
GNS4.GPDE_FL_RP_2S1B
GNS4.GPDE_FL_RP_2S2AG
GNS4.GPDE_FL_RP_2S2AN
GNS4.GPDE_FL_RP_2S2B
GNS4.GPDE_FL_RP_2S3AG
GNS4.GPDE_FL_RP_2S3AN
GNS4.GPDE_FL_RP_2S3B
GNS4.GPDE_FL_RP_2S4AG
GNS4.GPDE_FL_RP_2S4AN
GNS4.GPDE_FL_RP_2S4B
GNS4.GPDE_FL_L001S1_MON
GNS4.GPDE_FL_L001S2_MON
GNS4.GPDE_FL_L001S3_MON
GNS4.GPDE_FL_L001S4_MON
GNS4.GPDE_FL_L001S1_YTD
GNS4.GPDE_FL_L001S2_YTD
GNS4.GPDE_FL_L001S3_YTD
GNS4.GPDE_FL_L001S4_YTD
GNS4.GPDE_FL_RP_L001S1
GNS4.GPDE_FL_RP_L001S2
GNS4.GPDE_FL_RP_L001S3
GNS4.GPDE_FL_RP_L001S4
GNS4.GPDE_FL_L002S1_MON
GNS4.GPDE_FL_L002S2_MON
GNS4.GPDE_FL_L002S3_MON
GNS4.GPDE_FL_L002S4_MON
GNS4.GPDE_FL_L002S1_YTD
GNS4.GPDE_FL_L002S2_YTD
GNS4.GPDE_FL_L002S3_YTD
GNS4.GPDE_FL_L002S4_YTD
GNS4.GPDE_FL_RP_L002S1
GNS4.GPDE_FL_RP_L002S2
GNS4.GPDE_FL_RP_L002S3
GNS4.GPDE_FL_RP_L002S4
GNS4.GPDE_FL_W001E0_MON
GNS4.GPDE_FL_W001E0_YTD
GNS4.GPDE_FL_RP_W001E0
GNS4.GPDE_FL_W002E0_MON
GNS4.GPDE_FL_W002E0_YTD
GNS4.GPDE_FL_RP_W002E0
GNS4.GPDE_FL_W011E0_MON
GNS4.GPDE_FL_W011E0_YTD
GNS4.GPDE_FL_RP_W011E0
GNS4.GPDE_FL_W012E0_MON
GNS4.GPDE_FL_W012E0_YTD
GNS4.GPDE_FL_RP_W012E0
GNS4.GPDE_FL_W020E0_MON
GNS4.GPDE_FL_W020E0_YTD
GNS4.GPDE_FL_RP_W020E0
GNS4.GPDE_FL_W001E0_TMP
GNS4.GPDE_FL_W002E0_TMP
GSS1.GPDE_SIP_REGION
! ---GSS1.GPDE_SI_PV_CHILD
  let $GNSF.EMPLID = &GNS4.EMPLID
  let $GNSF.CAL_RUN_ID = &GNS4.CAL_RUN_ID
  let #GNSF.EMPL_RCD = &GNS4.EMPL_RCD
  let $GNSF.GP_PAYGROUP = &GNS4.GP_PAYGROUP
  let $GNSF.CAL_ID = &GNS4.CAL_ID
  let $GNSF.ORIG_CAL_RUN_ID = &GNS4.ORIG_CAL_RUN_ID
  let #GNSF.RSLT_SEG_NUM = &GNS4.RSLT_SEG_NUM
  let $GNSF.SEG_END_DT = &GNS4.SEG_END_DT
  let $GNSF.SLICE_END_DT = &GNS4.SLICE_END_DT
  let $GNSF.PAY_ENTITY = &GNS4.PAY_ENTITY
  let $GNSF.PRD_END_DT = &GNS4.PRD_END_DT
  let $GNSF.GPDE_AL_CPAY_ENDDT = &GNS4.GPDE_AL_CPAY_ENDDT
  let $GNSF.GPDE_DV_SV_CODE = &GNS4.GPDE_DV_SV_CODE
  let $GNSF.GPDE_FL_CGRP_KV_E = &GNS4.GPDE_FL_CGRP_KV_E
  let $GNSF.GPDE_FL_CGRP_RV_E = &GNS4.GPDE_FL_CGRP_RV_E
  let $GNSF.GPDE_FL_CGRP_AV_E = &GNS4.GPDE_FL_CGRP_AV_E
  let $GNSF.GPDE_FL_CGRP_PV_E = &GNS4.GPDE_FL_CGRP_PV_E
  let $GNSF.GPDE_FL_CGRP_KV_W = &GNS4.GPDE_FL_CGRP_KV_W
  let $GNSF.GPDE_FL_CGRP_RV_W = &GNS4.GPDE_FL_CGRP_RV_W
  let $GNSF.GPDE_FL_CGRP_AV_W = &GNS4.GPDE_FL_CGRP_AV_W
  let $GNSF.GPDE_FL_CGRP_PV_W = &GNS4.GPDE_FL_CGRP_PV_W
  let $GNSF.GPDE_FL_BTNR_EAST = &GNS4.GPDE_FL_BTNR_EAST
  let $GNSF.GPDE_FL_BTNR_WEST = &GNS4.GPDE_FL_BTNR_WEST
  let #GNSF.GPDE_FL_RP_1S1AG    = &GNS4.GPDE_FL_RP_1S1AG
  let #GNSF.GPDE_FL_RP_1S1AN    = &GNS4.GPDE_FL_RP_1S1AN
  let #GNSF.GPDE_FL_RP_1S1B     = &GNS4.GPDE_FL_RP_1S1B
  let #GNSF.GPDE_FL_RP_1S2AG    = &GNS4.GPDE_FL_RP_1S2AG
  let #GNSF.GPDE_FL_RP_1S2AN    = &GNS4.GPDE_FL_RP_1S2AN
  let #GNSF.GPDE_FL_RP_1S2B     = &GNS4.GPDE_FL_RP_1S2B
  let #GNSF.GPDE_FL_RP_1S3AG    = &GNS4.GPDE_FL_RP_1S3AG
  let #GNSF.GPDE_FL_RP_1S3AN    = &GNS4.GPDE_FL_RP_1S3AN
  let #GNSF.GPDE_FL_RP_1S3B     = &GNS4.GPDE_FL_RP_1S3B
  let #GNSF.GPDE_FL_RP_1S4AG    = &GNS4.GPDE_FL_RP_1S4AG
  let #GNSF.GPDE_FL_RP_1S4AN    = &GNS4.GPDE_FL_RP_1S4AN
  let #GNSF.GPDE_FL_RP_1S4B     = &GNS4.GPDE_FL_RP_1S4B
  let #GNSF.GPDE_FL_RP_2S1AG    = &GNS4.GPDE_FL_RP_2S1AG
  let #GNSF.GPDE_FL_RP_2S1AN    = &GNS4.GPDE_FL_RP_2S1AN
  let #GNSF.GPDE_FL_RP_2S1B     = &GNS4.GPDE_FL_RP_2S1B
  let #GNSF.GPDE_FL_RP_2S2AG    = &GNS4.GPDE_FL_RP_2S2AG
  let #GNSF.GPDE_FL_RP_2S2AN    = &GNS4.GPDE_FL_RP_2S2AN
  let #GNSF.GPDE_FL_RP_2S2B     = &GNS4.GPDE_FL_RP_2S2B
  let #GNSF.GPDE_FL_RP_2S3AG    = &GNS4.GPDE_FL_RP_2S3AG
  let #GNSF.GPDE_FL_RP_2S3AN    = &GNS4.GPDE_FL_RP_2S3AN
  let #GNSF.GPDE_FL_RP_2S3B     = &GNS4.GPDE_FL_RP_2S3B
  let #GNSF.GPDE_FL_RP_2S4AG    = &GNS4.GPDE_FL_RP_2S4AG
  let #GNSF.GPDE_FL_RP_2S4AN    = &GNS4.GPDE_FL_RP_2S4AN
  let #GNSF.GPDE_FL_RP_2S4B     = &GNS4.GPDE_FL_RP_2S4B
  let #GNSF.GPDE_FL_L001S1_MON  = &GNS4.GPDE_FL_L001S1_MON
  let #GNSF.GPDE_FL_L001S2_MON  = &GNS4.GPDE_FL_L001S2_MON
  let #GNSF.GPDE_FL_L001S3_MON  = &GNS4.GPDE_FL_L001S3_MON
  let #GNSF.GPDE_FL_L001S4_MON  = &GNS4.GPDE_FL_L001S4_MON
  let #GNSF.GPDE_FL_L001S1_YTD  = &GNS4.GPDE_FL_L001S1_YTD
  let #GNSF.GPDE_FL_L001S2_YTD  = &GNS4.GPDE_FL_L001S2_YTD
  let #GNSF.GPDE_FL_L001S3_YTD  = &GNS4.GPDE_FL_L001S3_YTD
  let #GNSF.GPDE_FL_L001S4_YTD  = &GNS4.GPDE_FL_L001S4_YTD
  let #GNSF.GPDE_FL_RP_L001S1   = &GNS4.GPDE_FL_RP_L001S1
  let #GNSF.GPDE_FL_RP_L001S2   = &GNS4.GPDE_FL_RP_L001S2
  let #GNSF.GPDE_FL_RP_L001S3   = &GNS4.GPDE_FL_RP_L001S3
  let #GNSF.GPDE_FL_RP_L001S4   = &GNS4.GPDE_FL_RP_L001S4
  let #GNSF.GPDE_FL_L002S1_MON  = &GNS4.GPDE_FL_L002S1_MON
  let #GNSF.GPDE_FL_L002S2_MON  = &GNS4.GPDE_FL_L002S2_MON
  let #GNSF.GPDE_FL_L002S3_MON  = &GNS4.GPDE_FL_L002S3_MON
  let #GNSF.GPDE_FL_L002S4_MON  = &GNS4.GPDE_FL_L002S4_MON
  let #GNSF.GPDE_FL_L002S1_YTD  = &GNS4.GPDE_FL_L002S1_YTD
  let #GNSF.GPDE_FL_L002S2_YTD  = &GNS4.GPDE_FL_L002S2_YTD
  let #GNSF.GPDE_FL_L002S3_YTD  = &GNS4.GPDE_FL_L002S3_YTD
  let #GNSF.GPDE_FL_L002S4_YTD  = &GNS4.GPDE_FL_L002S4_YTD
  let #GNSF.GPDE_FL_RP_L002S1   = &GNS4.GPDE_FL_RP_L002S1
  let #GNSF.GPDE_FL_RP_L002S2   = &GNS4.GPDE_FL_RP_L002S2
  let #GNSF.GPDE_FL_RP_L002S3   = &GNS4.GPDE_FL_RP_L002S3
  let #GNSF.GPDE_FL_RP_L002S4   = &GNS4.GPDE_FL_RP_L002S4
  let #GNSF.GPDE_FL_W001E0_MON  = &GNS4.GPDE_FL_W001E0_MON
  let #GNSF.GPDE_FL_W001E0_YTD  = &GNS4.GPDE_FL_W001E0_YTD
  let #GNSF.GPDE_FL_RP_W001E0   = &GNS4.GPDE_FL_RP_W001E0
  let #GNSF.GPDE_FL_W002E0_MON  = &GNS4.GPDE_FL_W002E0_MON
  let #GNSF.GPDE_FL_W002E0_YTD  = &GNS4.GPDE_FL_W002E0_YTD
  let #GNSF.GPDE_FL_RP_W002E0   = &GNS4.GPDE_FL_RP_W002E0
  let #GNSF.GPDE_FL_W011E0_MON  = &GNS4.GPDE_FL_W011E0_MON
  let #GNSF.GPDE_FL_W011E0_YTD  = &GNS4.GPDE_FL_W011E0_YTD
  let #GNSF.GPDE_FL_RP_W011E0   = &GNS4.GPDE_FL_RP_W011E0
  let #GNSF.GPDE_FL_W012E0_MON  = &GNS4.GPDE_FL_W012E0_MON
  let #GNSF.GPDE_FL_W012E0_YTD  = &GNS4.GPDE_FL_W012E0_YTD
  let #GNSF.GPDE_FL_RP_W012E0   = &GNS4.GPDE_FL_RP_W012E0
  let #GNSF.GPDE_FL_W020E0_MON  = &GNS4.GPDE_FL_W020E0_MON
  let #GNSF.GPDE_FL_W020E0_YTD  = &GNS4.GPDE_FL_W020E0_YTD
  let #GNSF.GPDE_FL_RP_W020E0   = &GNS4.GPDE_FL_RP_W020E0
  let #GNSF.GPDE_FL_W001E0_TMP  = &GNS4.GPDE_FL_W001E0_TMP
  let #GNSF.GPDE_FL_W002E0_TMP  = &GNS4.GPDE_FL_W002E0_TMP
  let $GSS1.GPDE_SIP_REGION     = &GSS1.GPDE_SIP_REGION
  ! -- let $GSS1.GPDE_SI_PV_CHILD    = &GSS1.GPDE_SI_PV_CHILD
  if &GNS4.PRD_END_DT = &GNS4.GPDE_AL_CPAY_ENDDT
     let $Pr_Sign = 'K'
  else
     let $Pr_Sign = 'N'
  end-if
  do Insert_Data_Lohnkonto3
FROM PS_GPDE_RP_FL01_VW GNS4, PS_GPDE_RP_SI01_VW GSS1 where GNS4.PAY_ENTITY = $Ctl_PayEntity
  AND GNS4.GPDE_AL_CPAY_ENDDT = $NewCpay AND GNS4.PRD_END_DT = $NewPrd
  AND GNS4.EMPLID = $NewEmpl AND GNS4.EMPLID = GSS1.EMPLID AND GNS4.CAL_RUN_ID = GSS1.CAL_RUN_ID AND
  GNS4.EMPL_RCD = GSS1.EMPL_RCD AND GNS4.GP_PAYGROUP = GSS1.GP_PAYGROUP AND GNS4.CAL_ID = GSS1.CAL_ID
  AND GNS4.ORIG_CAL_RUN_ID = GSS1.ORIG_CAL_RUN_ID AND GNS4.RSLT_SEG_NUM = GSS1.RSLT_SEG_NUM AND
  GNS4.SEG_END_DT = GSS1.SEG_END_DT AND GNS4.SLICE_END_DT = GSS1.SLICE_END_DT
end-select
end-procedure
!*************************************************************************








begin-procedure Insert_Data_Lohnkonto3
begin-sql
INSERT INTO PS_GPDE_RP_TX03_4(EMPLID ,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,ORIG_CAL_RUN_ID
,RSLT_SEG_NUM,SEG_END_DT,SLICE_END_DT,GPDE_RC_PRT_SIGN,PAY_ENTITY,PRD_END_DT,GPDE_AL_CPAY_ENDDT
,GPDE_DV_SV_CODE,GPDE_FL_CGRP_KV_E,GPDE_FL_CGRP_RV_E,GPDE_FL_CGRP_AV_E,GPDE_FL_CGRP_PV_E
,GPDE_FL_CGRP_KV_W,GPDE_FL_CGRP_RV_W,GPDE_FL_CGRP_AV_W,GPDE_FL_CGRP_PV_W,GPDE_FL_BTNR_EAST
,GPDE_FL_BTNR_WEST,GPDE_FL_RP_1S1AG,GPDE_FL_RP_1S1AN,GPDE_FL_RP_1S1B,GPDE_FL_RP_1S2AG
,GPDE_FL_RP_1S2AN,GPDE_FL_RP_1S2B,GPDE_FL_RP_1S3AG,GPDE_FL_RP_1S3AN,GPDE_FL_RP_1S3B
,GPDE_FL_RP_1S4AG,GPDE_FL_RP_1S4AN,GPDE_FL_RP_1S4B,GPDE_FL_RP_2S1AG,GPDE_FL_RP_2S1AN
,GPDE_FL_RP_2S1B,GPDE_FL_RP_2S2AG,GPDE_FL_RP_2S2AN,GPDE_FL_RP_2S2B,GPDE_FL_RP_2S3AG
,GPDE_FL_RP_2S3AN,GPDE_FL_RP_2S3B,GPDE_FL_RP_2S4AG,GPDE_FL_RP_2S4AN,GPDE_FL_RP_2S4B
,GPDE_FL_L001S1_MON,GPDE_FL_L001S2_MON,GPDE_FL_L001S3_MON,GPDE_FL_L001S4_MON,GPDE_FL_L001S1_YTD
,GPDE_FL_L001S2_YTD,GPDE_FL_L001S3_YTD,GPDE_FL_L001S4_YTD,GPDE_FL_RP_L001S1,GPDE_FL_RP_L001S2
,GPDE_FL_RP_L001S3,GPDE_FL_RP_L001S4,GPDE_FL_L002S1_MON,GPDE_FL_L002S2_MON,GPDE_FL_L002S3_MON
,GPDE_FL_L002S4_MON,GPDE_FL_L002S1_YTD,GPDE_FL_L002S2_YTD,GPDE_FL_L002S3_YTD,GPDE_FL_L002S4_YTD
,GPDE_FL_RP_L002S1,GPDE_FL_RP_L002S2,GPDE_FL_RP_L002S3,GPDE_FL_RP_L002S4,GPDE_FL_W001E0_MON
,GPDE_FL_W001E0_YTD,GPDE_FL_RP_W001E0,GPDE_FL_W002E0_MON,GPDE_FL_W002E0_YTD,GPDE_FL_RP_W002E0
,GPDE_FL_W011E0_MON,GPDE_FL_W011E0_YTD,GPDE_FL_RP_W011E0,GPDE_FL_W012E0_MON,GPDE_FL_W012E0_YTD
,GPDE_FL_RP_W012E0,GPDE_FL_W020E0_MON,GPDE_FL_W020E0_YTD,GPDE_FL_RP_W020E0,GPDE_FL_W001E0_TMP
,GPDE_FL_W002E0_TMP,GPDE_SIP_REGION)
VALUES  ($GNSF.EMPLID,$GNSF.CAL_RUN_ID,#GNSF.EMPL_RCD,$GNSF.GP_PAYGROUP
,$GNSF.CAL_ID,$GNSF.ORIG_CAL_RUN_ID,#GNSF.RSLT_SEG_NUM,$GNSF.SEG_END_DT,$GNSF.SLICE_END_DT
,$Pr_Sign,$GNSF.PAY_ENTITY,$GNSF.PRD_END_DT,$GNSF.GPDE_AL_CPAY_ENDDT,$GNSF.GPDE_DV_SV_CODE
,$GNSF.GPDE_FL_CGRP_KV_E,$GNSF.GPDE_FL_CGRP_RV_E,$GNSF.GPDE_FL_CGRP_AV_E,$GNSF.GPDE_FL_CGRP_PV_E
,$GNSF.GPDE_FL_CGRP_KV_W,$GNSF.GPDE_FL_CGRP_RV_W,$GNSF.GPDE_FL_CGRP_AV_W,$GNSF.GPDE_FL_CGRP_PV_W
,$GNSF.GPDE_FL_BTNR_EAST,$GNSF.GPDE_FL_BTNR_WEST,#GNSF.GPDE_FL_RP_1S1AG,#GNSF.GPDE_FL_RP_1S1AN
,#GNSF.GPDE_FL_RP_1S1B,#GNSF.GPDE_FL_RP_1S2AG,#GNSF.GPDE_FL_RP_1S2AN,#GNSF.GPDE_FL_RP_1S2B
,#GNSF.GPDE_FL_RP_1S3AG,#GNSF.GPDE_FL_RP_1S3AN,#GNSF.GPDE_FL_RP_1S3B,#GNSF.GPDE_FL_RP_1S4AG
,#GNSF.GPDE_FL_RP_1S4AN,#GNSF.GPDE_FL_RP_1S4B,#GNSF.GPDE_FL_RP_2S1AG,#GNSF.GPDE_FL_RP_2S1AN
,#GNSF.GPDE_FL_RP_2S1B,#GNSF.GPDE_FL_RP_2S2AG,#GNSF.GPDE_FL_RP_2S2AN,#GNSF.GPDE_FL_RP_2S2B
,#GNSF.GPDE_FL_RP_2S3AG,#GNSF.GPDE_FL_RP_2S3AN,#GNSF.GPDE_FL_RP_2S3B,#GNSF.GPDE_FL_RP_2S4AG
,#GNSF.GPDE_FL_RP_2S4AN,#GNSF.GPDE_FL_RP_2S4B,#GNSF.GPDE_FL_L001S1_MON,#GNSF.GPDE_FL_L001S2_MON
,#GNSF.GPDE_FL_L001S3_MON,#GNSF.GPDE_FL_L001S4_MON,#GNSF.GPDE_FL_L001S1_YTD,#GNSF.GPDE_FL_L001S2_YTD
,#GNSF.GPDE_FL_L001S3_YTD,#GNSF.GPDE_FL_L001S4_YTD,#GNSF.GPDE_FL_RP_L001S1,#GNSF.GPDE_FL_RP_L001S2
,#GNSF.GPDE_FL_RP_L001S3,#GNSF.GPDE_FL_RP_L001S4,#GNSF.GPDE_FL_L002S1_MON,#GNSF.GPDE_FL_L002S2_MON
,#GNSF.GPDE_FL_L002S3_MON,#GNSF.GPDE_FL_L002S4_MON,#GNSF.GPDE_FL_L002S1_YTD,#GNSF.GPDE_FL_L002S2_YTD
,#GNSF.GPDE_FL_L002S3_YTD,#GNSF.GPDE_FL_L002S4_YTD,#GNSF.GPDE_FL_RP_L002S1,#GNSF.GPDE_FL_RP_L002S2
,#GNSF.GPDE_FL_RP_L002S3,#GNSF.GPDE_FL_RP_L002S4,#GNSF.GPDE_FL_W001E0_MON,#GNSF.GPDE_FL_W001E0_YTD
,#GNSF.GPDE_FL_RP_W001E0,#GNSF.GPDE_FL_W002E0_MON,#GNSF.GPDE_FL_W002E0_YTD,#GNSF.GPDE_FL_RP_W002E0
,#GNSF.GPDE_FL_W011E0_MON,#GNSF.GPDE_FL_W011E0_YTD,#GNSF.GPDE_FL_RP_W011E0,#GNSF.GPDE_FL_W012E0_MON
,#GNSF.GPDE_FL_W012E0_YTD,#GNSF.GPDE_FL_RP_W012E0,#GNSF.GPDE_FL_W020E0_MON,#GNSF.GPDE_FL_W020E0_YTD
,#GNSF.GPDE_FL_RP_W020E0,#GNSF.GPDE_FL_W001E0_TMP,#GNSF.GPDE_FL_W002E0_TMP,$GSS1.GPDE_SIP_REGION)
end-sql
end-procedure







!*****************************************************
begin-procedure Get_FlexiWorkTime
if $march = 'N'
   let $End_DateFl = $EndYearAct
else
   do GetDate_PlusDays($BegYearAct,-1,$End_DateFl)
end-if
let $BeginErwerbsmind      = ''
let $BeginErwerbsmind1     = ''
let $FLA.EFFDT             = ''
let #FLA.GPDE_FL_RP_W001E0 = 0
let #FLA.GPDE_FL_RP_W002E0 = 0
begin-select
FLA.EFFDT
FLA.GPDE_FL_RP_W001E0
FLA.GPDE_FL_RP_W002E0
FLA.GPDE_AL_BGN_DT
    let $FLA.EFFDT             = &FLA.EFFDT
    let $BeginErwerbsmind      = &FLA.GPDE_AL_BGN_DT
    let #FLA.GPDE_FL_RP_W001E0 = &FLA.GPDE_FL_RP_W001E0
    let #FLA.GPDE_FL_RP_W002E0 = &FLA.GPDE_FL_RP_W002E0
from PS_GPDE_FL_EE FLA where FLA.EMPLID = $RP1.EMPLID and FLA.EMPL_RCD = #RP1.EMPL_RCD and
      FLA.EFFDT = (select max(FLA1.EFFDT) from PS_GPDE_FL_EE FLA1 where FLA1.EMPLID = FLA.EMPLID and
      FLA1.EMPL_RCD = FLA.EMPL_RCD and  FLA1.EFFDT <= $End_DateFl)
end-select
if $BeginErwerbsmind <> ''
   do ConvertToComponents($BeginErwerbsmind,$y1a,$m1a,$d1a)
   let #Date_Type1 = {DateType}
   evaluate #Date_Type1
   when = 2
      let $BeginErwerbsmind1 = $y1a || '{PTDateDelim}' || $m1a
      break
   when-other
      let $BeginErwerbsmind1 = $m1a || '{PTDateDelim}' || $y1a
      break
   end-evaluate
end-if
end-procedure






!**********************************************************************************
begin-procedure GetVorjahreswerte
let $MaxCpayEndDT = ''
let #FL1.GPDE_FL_RP_L001S1_Jan      = 0
let #FL1.GPDE_FL_RP_L001S2_Jan      = 0
let #FL1.GPDE_FL_RP_L001S3_Jan      = 0
let #FL1.GPDE_FL_RP_L001S4_Jan      = 0
let #FL1.GPDE_FL_RP_L002S1_Jan      = 0
let #FL1.GPDE_FL_RP_L002S2_Jan      = 0
let #FL1.GPDE_FL_RP_L002S3_Jan      = 0
let #FL1.GPDE_FL_RP_L002S4_Jan      = 0
let #WG1.GPDE_FL_RP_W002E0_Jan      = 0
let #WG1.GPDE_FL_RP_W001E0_Jan      = 0
let #WG1.GPDE_FL_RP_W012E0_Jan      = 0
let #WG1.GPDE_FL_RP_W011E0_Jan      = 0
let #WG1.GPDE_FL_RP_W020E0_Jan      = 0
LET $TX03_4A.GPDE_SIP_REGION        = ''
begin-select
TX03_4A.GPDE_AL_CPAY_ENDDT
TX03_4A.GPDE_FL_RP_L001S1
TX03_4A.GPDE_FL_RP_L001S2
TX03_4A.GPDE_FL_RP_L001S3
TX03_4A.GPDE_FL_RP_L001S4
TX03_4A.GPDE_FL_RP_L002S1
TX03_4A.GPDE_FL_RP_L002S2
TX03_4A.GPDE_FL_RP_L002S3
TX03_4A.GPDE_FL_RP_L002S4
TX03_4A.GPDE_FL_RP_W002E0
TX03_4A.GPDE_FL_RP_W001E0
TX03_4A.GPDE_FL_RP_W012E0
TX03_4A.GPDE_FL_RP_W011E0
TX03_4A.GPDE_FL_RP_W020E0
TX03_4A.GPDE_SIP_REGION
     let #FL1.GPDE_FL_RP_L001S1_Jan      = &TX03_4A.GPDE_FL_RP_L001S1
     let #FL1.GPDE_FL_RP_L001S2_Jan      = &TX03_4A.GPDE_FL_RP_L001S2
     let #FL1.GPDE_FL_RP_L001S3_Jan      = &TX03_4A.GPDE_FL_RP_L001S3
     let #FL1.GPDE_FL_RP_L001S4_Jan      = &TX03_4A.GPDE_FL_RP_L001S4
     let #FL1.GPDE_FL_RP_L002S1_Jan      = &TX03_4A.GPDE_FL_RP_L002S1
     let #FL1.GPDE_FL_RP_L002S2_Jan      = &TX03_4A.GPDE_FL_RP_L002S2
     let #FL1.GPDE_FL_RP_L002S3_Jan      = &TX03_4A.GPDE_FL_RP_L002S3
     let #FL1.GPDE_FL_RP_L002S4_Jan      = &TX03_4A.GPDE_FL_RP_L002S4
     let $TX03_4A.GPDE_SIP_REGION        = &TX03_4A.GPDE_SIP_REGION

    do Format-DateTime($PrdEndJan, $PrdEndJanCmp, {DEFCMP}, '', '')
    let $StichtW = '2002'  || '01' ||  '01'
    do Format-DateTime($StichtW, $Sticht1W, {DEFCMP},'','native')
    do Format-DateTime($Sticht1W, $StichtagW, {DEFCMP},'','')
    if $PrdEndJanCmp < $StichtagW
       ! show '(GetVorjahreswerte) ConvertCurrency' $StichtagW
       ! show 'Dates ' $PrdEndJanCmp '/' $StichtagW
       ! override
       let $WG1.CURRENCY_CD = 'EUR'

       do ConvertCurrency(&TX03_4A.GPDE_FL_RP_W002E0,'DEM',$WG1.CURRENCY_CD,$Current_RT_Type,
                          $Current_DT_EX_RT,#WG1.GPDE_FL_RP_W002E0_Jan,'F')
       do ConvertCurrency(&TX03_4A.GPDE_FL_RP_W001E0,'DEM',$WG1.CURRENCY_CD,$Current_RT_Type,
                          $Current_DT_EX_RT,#WG1.GPDE_FL_RP_W001E0_Jan,'F')
       do ConvertCurrency(&TX03_4A.GPDE_FL_RP_W012E0,'DEM',$WG1.CURRENCY_CD,$Current_RT_Type,
                          $Current_DT_EX_RT,#WG1.GPDE_FL_RP_W012E0_Jan,'F')
       do ConvertCurrency(&TX03_4A.GPDE_FL_RP_W011E0,'DEM',$WG1.CURRENCY_CD,$Current_RT_Type,
                          $Current_DT_EX_RT,#WG1.GPDE_FL_RP_W011E0_Jan,'F')
       do ConvertCurrency(&TX03_4A.GPDE_FL_RP_W020E0,'DEM',$WG1.CURRENCY_CD,$Current_RT_Type,
                          $Current_DT_EX_RT,#WG1.GPDE_FL_RP_W020E0_Jan,'F')
    else
       let #WG1.GPDE_FL_RP_W002E0_Jan      = &TX03_4A.GPDE_FL_RP_W002E0
       let #WG1.GPDE_FL_RP_W001E0_Jan      = &TX03_4A.GPDE_FL_RP_W001E0
       let #WG1.GPDE_FL_RP_W012E0_Jan      = &TX03_4A.GPDE_FL_RP_W012E0
       let #WG1.GPDE_FL_RP_W011E0_Jan      = &TX03_4A.GPDE_FL_RP_W011E0
       let #WG1.GPDE_FL_RP_W020E0_Jan      = &TX03_4A.GPDE_FL_RP_W020E0
    end-if
from PS_GPDE_RP_TX03_4 TX03_4A
where TX03_4A.EMPLID = $RP1.EMPLID and
      TX03_4A.EMPL_RCD = #RP1.EMPL_RCD and
      TX03_4A.PRD_END_DT = $PrdEndJan and
     TX03_4A.GPDE_AL_CPAY_ENDDT = (select MAX(BX.GPDE_AL_CPAY_ENDDT) from PS_GPDE_RP_TX03_4 BX
    where BX.EMPLID = TX03_4A.EMPLID
      AND BX.EMPL_RCD = TX03_4A.EMPL_RCD
      AND BX.PRD_END_DT = TX03_4A.PRD_END_DT)
end-select
end-procedure
!*************************************************************************
begin-procedure Insert_Data_Lohnkonto2
begin-sql
INSERT INTO PS_GPDE_RP_TX03_3  (EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,RSLT_SEG_NUM,SEG_END_DT
,SLICE_END_DT,PAY_ENTITY,PRD_END_DT,GPDE_AL_CPAY_ENDDT,GPDE_AZ_RP_003_11,GPDE_AZ_RP_003_12,GPDE_AZ_RP_003_21
,GPDE_AZ_RP_003_22,GPDE_AZ_RP_003_31,GPDE_AZ_RP_003_32,GPDE_AZ_RP_003_36,GPDE_AZ_RP_001_63
,GPDE_AZ_RP_002_68,GPDE_AZ_RP_011_63,GPDE_AZ_RP_012_68,GPDE_AZ_RP_013_31,GPDE_AZ_RP_013_32
,GPDE_AZ_RP_013_36,GPDE_AZ_RP_021_63,GPDE_AZ_RP_022_68,GPDE_AZ_RP_023_31,GPDE_AZ_RP_023_32
,GPDE_AZ_RP_023_36,GPDE_RC_PRT_SIGN,BEGIN_DT,GPDE_AZ_RP_S03_31)  VALUES  ($GN.EMPLID,$GN.CAL_RUN_ID,#GN.EMPL_RCD
,$GN.GP_PAYGROUP,$GN.CAL_ID,#GN.RSLT_SEG_NUM,$GN.SEG_END_DT,$GN.SLICE_END_DT,$GN.PAY_ENTITY
,$GN.PRD_END_DT,$GN.GPDE_AL_CPAY_ENDDT,#GN.GPDE_AZ_RP_003_11,#GN.GPDE_AZ_RP_003_12
,#GN.GPDE_AZ_RP_003_21,#GN.GPDE_AZ_RP_003_22,#GN.GPDE_AZ_RP_003_31,#GN.GPDE_AZ_RP_003_32
,#GN.GPDE_AZ_RP_003_36,#GN.GPDE_AZ_RP_001_63,#GN.GPDE_AZ_RP_002_68,#GN.GPDE_AZ_RP_011_63
,#GN.GPDE_AZ_RP_012_68,#GN.GPDE_AZ_RP_013_31,#GN.GPDE_AZ_RP_013_32,#GN.GPDE_AZ_RP_013_36
,#GN.GPDE_AZ_RP_021_63,#GN.GPDE_AZ_RP_022_68,#GN.GPDE_AZ_RP_023_31,#GN.GPDE_AZ_RP_023_32
,#GN.GPDE_AZ_RP_023_36,$Pr_Sign,$GN.BEGIN_DT,#GN.GPDE_AZ_RP_S03_31)
end-sql
end-procedure
!*********************************
begin-procedure PrintFreistellPhase
let $Fisttime = 'Y'
if (ISBLANK($FLA.EFFDT))
   let $FLA.EFFDT = $AsOfToday
end-if

begin-select
FSP.GPDE_AL_BGN_DT
FSP.GPDE_AL_END_DT
   do Format-DateTime(&FSP.GPDE_AL_BGN_DT, $FSP.GPDE_AL_BGN_DT, {DEFDATE}, '', '')
   do Format-DateTime(&FSP.GPDE_AL_END_DT, $FSP.GPDE_AL_END_DT, {DEFDATE}, '', '')
   if $Fisttime = 'Y'
      let #mm = 2 + #current-line
      if #mm > 55
         new-page
      end-if
      let #currLineV = -17 + #current-line
      let #currLineN = -16 + #current-line
      if #currLineV <= 0
        let #currLineV = 1
        let #currLineN = 2
      end-if

      alter-printer
       font= 4
       point-size =20
      print 'Freistellungsphase:'    (#currLineV,1) bold
      alter-printer
        font= 4
        point-size =13
      graphic (#currLineN,1,80) box 1 1
      print 'Beginn:'           (#currLineN,2)
      print 'Ende:'             (#currLineN,55)
      print $FSP.GPDE_AL_BGN_DT (#currLineN,20)
      print $FSP.GPDE_AL_END_DT (#currLineN,66)
      position (+1,1)
   else
      let #mm = 2 + #current-line
      if #mm > 55
         new-page
      end-if
      let #currLineV = -18 + #current-line
      let #currLineN = -17 + #current-line
      if #currLineV <= 0
        let #currLineV = 1
        let #currLineN = 2
      end-if

      alter-printer
        font= 4
        point-size =13
      graphic (#currLineN,1,80) box 1 1
      print 'Beginn:'           (#currLineN,2)
      print 'Ende:'             (#currLineN,55)
      print $FSP.GPDE_AL_BGN_DT (#currLineN,20)
      print $FSP.GPDE_AL_END_DT (#currLineN,66)
      position (+1,1)
   end-if
   let $Fisttime = 'N'
from PS_GPDE_FL_EE_DTL FSP
where FSP.EMPLID = $RP1.EMPLID and FSP.EMPL_RCD = #RP1.EMPL_RCD and
      FSP.EFFDT = $FLA.EFFDT
end-select

if $Fisttime = 'N'
   position (+2,1)
end-if
end-procedure

!******************************************************************
begin-procedure Get-Data-Flexi
begin-select distinct
FLX.SLICE_END_DT
FLX.PRD_END_DT
FLX.GPDE_AL_CPAY_ENDDT
FLX.GPDE_DV_SV_CODE
FLX.GPDE_FL_RP_1S1AG   &FLX.GPDE_FL_RP_1S1AG      !Kv
FLX.GPDE_FL_RP_1S1AN   &FLX.GPDE_FL_RP_1S1AN
FLX.GPDE_FL_RP_1S1B    &FLX.GPDE_FL_RP_1S1B
FLX.GPDE_FL_RP_1S2AG   &FLX.GPDE_FL_RP_1S2AG      !Pv
FLX.GPDE_FL_RP_1S2AN   &FLX.GPDE_FL_RP_1S2AN
FLX.GPDE_FL_RP_1S2B    &FLX.GPDE_FL_RP_1S2B
FLX.GPDE_FL_RP_1S3AG   &FLX.GPDE_FL_RP_1S3AG      !Rv
FLX.GPDE_FL_RP_1S3AN   &FLX.GPDE_FL_RP_1S3AN
FLX.GPDE_FL_RP_1S3B    &FLX.GPDE_FL_RP_1S3B
FLX.GPDE_FL_RP_1S4AG   &FLX.GPDE_FL_RP_1S4AG      !Av
FLX.GPDE_FL_RP_1S4AN   &FLX.GPDE_FL_RP_1S4AN
FLX.GPDE_FL_RP_1S4B    &FLX.GPDE_FL_RP_1S4B
FLX.GPDE_FL_RP_2S1AG   &FLX.GPDE_FL_RP_2S1AG
FLX.GPDE_FL_RP_2S1AN   &FLX.GPDE_FL_RP_2S1AN
FLX.GPDE_FL_RP_2S1B    &FLX.GPDE_FL_RP_2S1B
FLX.GPDE_FL_RP_2S2AG   &FLX.GPDE_FL_RP_2S2AG
FLX.GPDE_FL_RP_2S2AN   &FLX.GPDE_FL_RP_2S2AN
FLX.GPDE_FL_RP_2S2B    &FLX.GPDE_FL_RP_2S2B
FLX.GPDE_FL_RP_2S3AG   &FLX.GPDE_FL_RP_2S3AG
FLX.GPDE_FL_RP_2S3AN   &FLX.GPDE_FL_RP_2S3AN
FLX.GPDE_FL_RP_2S3B    &FLX.GPDE_FL_RP_2S3B
FLX.GPDE_FL_RP_2S4AG   &FLX.GPDE_FL_RP_2S4AG
FLX.GPDE_FL_RP_2S4AN   &FLX.GPDE_FL_RP_2S4AN
FLX.GPDE_FL_RP_2S4B    &FLX.GPDE_FL_RP_2S4B
FLX.GPDE_FL_BTNR_EAST  &FLX.GPDE_FL_BTNR_EAST
FLX.GPDE_FL_BTNR_WEST  &FLX.GPDE_FL_BTNR_WEST
PBDF.CURRENCY_CD
PBDF.SEG_END_DT
SIF.GPDE_SI_PROV_MAND
SIF.BA_CD
SIF.GPDE_SI_POS_IN_JOB
SIF.GPDE_SI_EDUCATION
SIF.GPDE_BA_SCHL_DGR
SIF.GPDE_BA_PRF_DGR
SIF.GPDE_BA_EMPL_TMP
SIF.GPDE_BA_CNTRCT_WRK
SIF.GPDE_DV_EMPL_CAT
PBDF.STD_HOURS
PTCF.GPDE_RC_PRT_SIGN
FLX.GPDE_FL_CGRP_KV_E
FLX.GPDE_FL_CGRP_RV_E
FLX.GPDE_FL_CGRP_AV_E
FLX.GPDE_FL_CGRP_PV_E
FLX.GPDE_FL_CGRP_KV_W
FLX.GPDE_FL_CGRP_RV_W
FLX.GPDE_FL_CGRP_AV_W
FLX.GPDE_FL_CGRP_PV_W

     let $GPDE_SI_PROV_MAND_FL = &SIF.GPDE_SI_PROV_MAND
     let $PBDC.SEG_END_DT = &PBDF.SEG_END_DT
     let $SV_CodeF = &FLX.GPDE_DV_SV_CODE
     let $KV_CodeF = substr($SV_CodeF,1,1)
     let $AV_CodeF = substr($SV_CodeF,3,1)
     let $RV_CodeF = substr($SV_CodeF,2,1)
     let $PV_CodeF = substr($SV_CodeF,4,1)

     do Format-Number(&PBDF.STD_HOURS,$PBDC.STD_HOURS,'B99,999.99')

     if &SIF.GPDE_SI_POS_IN_JOB <> ' ' and &SIF.GPDE_SI_EDUCATION <> ' ' 
        let $TTSC = &SIF.BA_CD || &SIF.GPDE_SI_POS_IN_JOB || &SIF.GPDE_SI_EDUCATION
     else
        let $TTSC = &SIF.BA_CD || &SIF.GPDE_BA_SCHL_DGR || &SIF.GPDE_BA_PRF_DGR || &SIF.GPDE_BA_EMPL_TMP || &SIF.GPDE_BA_CNTRCT_WRK
     end-if

     let $GPDE_DV_EMPL_CAT = &SIF.GPDE_DV_EMPL_CAT

     let $FLX.GPDE_FL_BTNR_EAST = rtrim(&FLX.GPDE_FL_BTNR_EAST,' ')
     let $FLX.GPDE_FL_BTNR_WEST = rtrim(&FLX.GPDE_FL_BTNR_WEST,' ')

     do Format-DateTime(&FLX.PRD_END_DT, $PRD_END_DT_FLX, {DEFCMP},'','')
     do Format-DateTime(&FLX.GPDE_AL_CPAY_ENDDT, $FLX.GPDE_AL_CPAY_ENDDT, {DEFCMP},'','')
     let $FLX.GPDE_FL_CGRP_KV_E = &FLX.GPDE_FL_CGRP_KV_E
     let $FLX.GPDE_FL_CGRP_RV_E = &FLX.GPDE_FL_CGRP_RV_E
     let $FLX.GPDE_FL_CGRP_AV_E = &FLX.GPDE_FL_CGRP_AV_E
     let $FLX.GPDE_FL_CGRP_PV_E = &FLX.GPDE_FL_CGRP_PV_E
     let $FLX.GPDE_FL_CGRP_KV_W = &FLX.GPDE_FL_CGRP_KV_W
     let $FLX.GPDE_FL_CGRP_RV_W = &FLX.GPDE_FL_CGRP_RV_W
     let $FLX.GPDE_FL_CGRP_AV_W = &FLX.GPDE_FL_CGRP_AV_W
     let $FLX.GPDE_FL_CGRP_PV_W = &FLX.GPDE_FL_CGRP_PV_W

     if &PTCF.GPDE_RC_PRT_SIGN = 'L'
        let $RetroSign = 'R'
        if &FLX.GPDE_FL_RP_1S1AG <> 0 or &FLX.GPDE_FL_RP_1S1AN <> 0 or
           &FLX.GPDE_FL_RP_1S1B <> 0 or &FLX.GPDE_FL_RP_1S2AG <> 0 or
           &FLX.GPDE_FL_RP_1S2AN <> 0 or &FLX.GPDE_FL_RP_1S2B <> 0 or
           &FLX.GPDE_FL_RP_1S3AG <> 0 or &FLX.GPDE_FL_RP_1S3AN <> 0 or
           &FLX.GPDE_FL_RP_1S3B <> 0 or &FLX.GPDE_FL_RP_1S4AG <> 0 or
           &FLX.GPDE_FL_RP_1S4AN <> 0 or &FLX.GPDE_FL_RP_1S4B

           let $RegionAct = '1'
           let #FLX.GPDE_FL_RP_S1AG =  -1 * &FLX.GPDE_FL_RP_1S1AG
           let #FLX.GPDE_FL_RP_S1AN =  -1 * &FLX.GPDE_FL_RP_1S1AN
           let #FLX.GPDE_FL_RP_S1B  =  -1 * &FLX.GPDE_FL_RP_1S1B
           let #FLX.GPDE_FL_RP_S2AG =  -1 * &FLX.GPDE_FL_RP_1S2AG
           let #FLX.GPDE_FL_RP_S2AN =  -1 * &FLX.GPDE_FL_RP_1S2AN
           let #FLX.GPDE_FL_RP_S2B  =  -1 * &FLX.GPDE_FL_RP_1S2B
           let #FLX.GPDE_FL_RP_S3AG =  -1 * &FLX.GPDE_FL_RP_1S3AG
           let #FLX.GPDE_FL_RP_S3AN =  -1 * &FLX.GPDE_FL_RP_1S3AN
           let #FLX.GPDE_FL_RP_S3B  =  -1 * &FLX.GPDE_FL_RP_1S3B
           let #FLX.GPDE_FL_RP_S4AG =  -1 * &FLX.GPDE_FL_RP_1S4AG
           let #FLX.GPDE_FL_RP_S4AN =  -1 * &FLX.GPDE_FL_RP_1S4AN
           let #FLX.GPDE_FL_RP_S4B  =  -1 * &FLX.GPDE_FL_RP_1S4B
           do Print-EE-Data-Abr-Flexi
        end-if

        if &FLX.GPDE_FL_RP_2S1AG <> 0 or &FLX.GPDE_FL_RP_2S1AN <> 0 or
           &FLX.GPDE_FL_RP_2S1B <> 0 or &FLX.GPDE_FL_RP_2S2AG <> 0 or
           &FLX.GPDE_FL_RP_2S2AN <> 0 or &FLX.GPDE_FL_RP_2S2B <> 0 or
           &FLX.GPDE_FL_RP_2S3AG <> 0 or &FLX.GPDE_FL_RP_2S3AN <> 0 or
           &FLX.GPDE_FL_RP_2S3B <> 0 or &FLX.GPDE_FL_RP_2S4AG <> 0 or
           &FLX.GPDE_FL_RP_2S4AN <> 0 or &FLX.GPDE_FL_RP_2S4B

           let $RegionAct = '2'
           let #FLX.GPDE_FL_RP_S1AG =  -1 * &FLX.GPDE_FL_RP_2S1AG
           let #FLX.GPDE_FL_RP_S1AN =  -1 * &FLX.GPDE_FL_RP_2S1AN
           let #FLX.GPDE_FL_RP_S1B  =  -1 * &FLX.GPDE_FL_RP_2S1B
           let #FLX.GPDE_FL_RP_S2AG =  -1 * &FLX.GPDE_FL_RP_2S2AG
           let #FLX.GPDE_FL_RP_S2AN =  -1 * &FLX.GPDE_FL_RP_2S2AN
           let #FLX.GPDE_FL_RP_S2B  =  -1 * &FLX.GPDE_FL_RP_2S2B
           let #FLX.GPDE_FL_RP_S3AG =  -1 * &FLX.GPDE_FL_RP_2S3AG
           let #FLX.GPDE_FL_RP_S3AN =  -1 * &FLX.GPDE_FL_RP_2S3AN
           let #FLX.GPDE_FL_RP_S3B  =  -1 * &FLX.GPDE_FL_RP_2S3B
           let #FLX.GPDE_FL_RP_S4AG =  -1 * &FLX.GPDE_FL_RP_2S4AG
           let #FLX.GPDE_FL_RP_S4AN =  -1 * &FLX.GPDE_FL_RP_2S4AN
           let #FLX.GPDE_FL_RP_S4B  =  -1 * &FLX.GPDE_FL_RP_2S4B
           do Print-EE-Data-Abr-Flexi
        end-if

     else
        if &PTCF.GPDE_RC_PRT_SIGN = 'N'
           let $RetroSign = 'N'
        else
           let $RetroSign = 'A'
        end-if

        if &FLX.GPDE_FL_RP_1S1AG <> 0 or &FLX.GPDE_FL_RP_1S1AN <> 0 or
           &FLX.GPDE_FL_RP_1S1B <> 0 or &FLX.GPDE_FL_RP_1S2AG <> 0 or
           &FLX.GPDE_FL_RP_1S2AN <> 0 or &FLX.GPDE_FL_RP_1S2B <> 0 or
           &FLX.GPDE_FL_RP_1S3AG <> 0 or &FLX.GPDE_FL_RP_1S3AN <> 0 or
           &FLX.GPDE_FL_RP_1S3B <> 0 or &FLX.GPDE_FL_RP_1S4AG <> 0 or
           &FLX.GPDE_FL_RP_1S4AN <> 0 or &FLX.GPDE_FL_RP_1S4B

           let $RegionAct = '1'
           let #FLX.GPDE_FL_RP_S1AG =  &FLX.GPDE_FL_RP_1S1AG
           let #FLX.GPDE_FL_RP_S1AN =  &FLX.GPDE_FL_RP_1S1AN
           let #FLX.GPDE_FL_RP_S1B  =  &FLX.GPDE_FL_RP_1S1B
           let #FLX.GPDE_FL_RP_S2AG =  &FLX.GPDE_FL_RP_1S2AG
           let #FLX.GPDE_FL_RP_S2AN =  &FLX.GPDE_FL_RP_1S2AN
           let #FLX.GPDE_FL_RP_S2B  =  &FLX.GPDE_FL_RP_1S2B
           let #FLX.GPDE_FL_RP_S3AG =  &FLX.GPDE_FL_RP_1S3AG
           let #FLX.GPDE_FL_RP_S3AN =  &FLX.GPDE_FL_RP_1S3AN
           let #FLX.GPDE_FL_RP_S3B  =  &FLX.GPDE_FL_RP_1S3B
           let #FLX.GPDE_FL_RP_S4AG =  &FLX.GPDE_FL_RP_1S4AG
           let #FLX.GPDE_FL_RP_S4AN =  &FLX.GPDE_FL_RP_1S4AN
           let #FLX.GPDE_FL_RP_S4B  =  &FLX.GPDE_FL_RP_1S4B
           do Print-EE-Data-Abr-Flexi
        end-if

        if &FLX.GPDE_FL_RP_2S1AG <> 0 or &FLX.GPDE_FL_RP_2S1AN <> 0 or
           &FLX.GPDE_FL_RP_2S1B <> 0 or &FLX.GPDE_FL_RP_2S2AG <> 0 or
           &FLX.GPDE_FL_RP_2S2AN <> 0 or &FLX.GPDE_FL_RP_2S2B <> 0 or
           &FLX.GPDE_FL_RP_2S3AG <> 0 or &FLX.GPDE_FL_RP_2S3AN <> 0 or
           &FLX.GPDE_FL_RP_2S3B <> 0 or &FLX.GPDE_FL_RP_2S4AG <> 0 or
           &FLX.GPDE_FL_RP_2S4AN <> 0 or &FLX.GPDE_FL_RP_2S4B

           let $RegionAct = '2'
           let #FLX.GPDE_FL_RP_S1AG =  &FLX.GPDE_FL_RP_2S1AG
           let #FLX.GPDE_FL_RP_S1AN =  &FLX.GPDE_FL_RP_2S1AN
           let #FLX.GPDE_FL_RP_S1B  =  &FLX.GPDE_FL_RP_2S1B
           let #FLX.GPDE_FL_RP_S2AG =  &FLX.GPDE_FL_RP_2S2AG
           let #FLX.GPDE_FL_RP_S2AN =  &FLX.GPDE_FL_RP_2S2AN
           let #FLX.GPDE_FL_RP_S2B  =  &FLX.GPDE_FL_RP_2S2B
           let #FLX.GPDE_FL_RP_S3AG =  &FLX.GPDE_FL_RP_2S3AG
           let #FLX.GPDE_FL_RP_S3AN =  &FLX.GPDE_FL_RP_2S3AN
           let #FLX.GPDE_FL_RP_S3B  =  &FLX.GPDE_FL_RP_2S3B
           let #FLX.GPDE_FL_RP_S4AG =  &FLX.GPDE_FL_RP_2S4AG
           let #FLX.GPDE_FL_RP_S4AN =  &FLX.GPDE_FL_RP_2S4AN
           let #FLX.GPDE_FL_RP_S4B  =  &FLX.GPDE_FL_RP_2S4B
           do Print-EE-Data-Abr-Flexi
        end-if
     end-if
     #debug show 'debug: getting flexdata for ' $Emplid ' / ' $PTC.PRD_END_DT_Old ' / ' $ActCurr


from PS_GPDE_RP_FL01_VW FLX, PS_GPDE_RP_SI01_VW SIF,PS_GPDE_RP_0001_VW PBDF,
     PS_GPDE_RP_TX03A PTCF
WHERE FLX.EMPLID = SIF.EMPLID
AND   FLX.PAY_ENTITY  =  $Ctl_PayEntity
AND   FLX.EMPLID = $Emplid
AND   FLX.EMPL_RCD = #Empl_Rcd_Nbr
AND   FLX.CAL_RUN_ID = SIF.CAL_RUN_ID
AND   FLX.EMPL_RCD = SIF.EMPL_RCD
AND   FLX.GP_PAYGROUP = SIF.GP_PAYGROUP
AND   FLX.CAL_ID      = SIF.CAL_ID
AND   FLX.RSLT_SEG_NUM = SIF.RSLT_SEG_NUM
AND   FLX.SLICE_END_DT = SIF.SLICE_END_DT
and   PBDF.CURRENCY_CD = $ActCurr
AND   PBDF.EMPLID        = FLX.EMPLID
AND   PBDF.CAL_RUN_ID    = FLX.CAL_RUN_ID
AND   PBDF.EMPL_RCD      = FLX.EMPL_RCD
AND   PBDF.GP_PAYGROUP   = FLX.GP_PAYGROUP
AND   PBDF.CAL_ID        = FLX.CAL_ID
AND   PBDF.RSLT_SEG_NUM  = FLX.RSLT_SEG_NUM
AND   PTCF.SLICE_END_DT  = FLX.SLICE_END_DT
AND   PBDF.EMPLID        = PTCF.EMPLID
AND   PBDF.CAL_RUN_ID    = PTCF.CAL_RUN_ID
AND   PBDF.EMPL_RCD      = PTCF.EMPL_RCD
AND   PBDF.GP_PAYGROUP   = PTCF.GP_PAYGROUP
AND   PBDF.CAL_ID        = PTCF.CAL_ID
AND   PBDF.RSLT_SEG_NUM  = PTCF.RSLT_SEG_NUM
AND   FLX.PRD_END_DT     = $PTC.PRD_END_DT_Old
[$march_critF]
[$order1F]
end-select
end-procedure
!*************************************************
begin-procedure Print-EE-Data-Abr-Flexi


let #mm = 6 + #current-line

if #mm > 55
 new-page
end-if

alter-printer
   font = 4
   point-size = 14

if $PrintStorFall = 'Y'
print 'Stoerfall' (+1,1) bold
position (+1,1)
end-if

let #currLineV = -18 + #current-line
let #currLineN = -17 + #current-line

if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if


graphic (#currLineN,1,184) box 2 1

graphic (#currLineV,9,2) vert-line 1
graphic (#currLineV,17,2) vert-line 1
graphic (#currLineV,27,2) vert-line 1
graphic (#currLineV,34,2) vert-line 1
graphic (#currLineV,41,2) vert-line 1
graphic (#currLineV,48,2) vert-line 1

graphic (#currLineV,62,2) vert-line 1
graphic (#currLineV,76,2) vert-line 1
graphic (#currLineV,90,2) vert-line 1
graphic (#currLineV,104,2) vert-line 1
graphic (#currLineV,118,2) vert-line 1

graphic (#currLineV,132,2) vert-line 1
graphic (#currLineV,146,2) vert-line 1
graphic (#currLineV,160,2) vert-line 1
graphic (#currLineV,172,2) vert-line 1

do Format-Number(#FLX.GPDE_FL_RP_S1AG,$FLX.GPDE_FL_RP_S1AG,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S1AN,$FLX.GPDE_FL_RP_S1AN,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S1B,$FLX.GPDE_FL_RP_S1B,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S2AG,$FLX.GPDE_FL_RP_S2AG,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S2AN,$FLX.GPDE_FL_RP_S2AN,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S2B,$FLX.GPDE_FL_RP_S2B,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S3AG,$FLX.GPDE_FL_RP_S3AG,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S3AN,$FLX.GPDE_FL_RP_S3AN,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S3B,$FLX.GPDE_FL_RP_S3B,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S4AG,$FLX.GPDE_FL_RP_S4AG,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S4AN,$FLX.GPDE_FL_RP_S4AN,'B99,999.99')
do Format-Number(#FLX.GPDE_FL_RP_S4B,$FLX.GPDE_FL_RP_S4B,'B99,999.99')

let #MeldeSV = 0
if #FLX.GPDE_FL_RP_S3B <> 0
   do Format-Number(#FLX.GPDE_FL_RP_S3B,$PTC.GPDE_RP_SIGR_AMT,'B99,999.99')
   let #MeldeSV = #FLX.GPDE_FL_RP_S3B
   let #Melde_SV = #Melde_SV + #FLX.GPDE_FL_RP_S3B
else
   if #FLX.GPDE_FL_RP_S1B <> 0
      do Format-Number(#FLX.GPDE_FL_RP_S1B,$PTC.GPDE_RP_SIGR_AMT,'B99,999.99')
      let #MeldeSV = #FLX.GPDE_FL_RP_S1B
      let #Melde_SV = #Melde_SV + #FLX.GPDE_FL_RP_S1B
   else
      do Format-Number(#FLX.GPDE_FL_RP_S4B,$PTC.GPDE_RP_SIGR_AMT,'B99,999.99')
      let #MeldeSV = #FLX.GPDE_FL_RP_S4B
      let #Melde_SV = #Melde_SV + #FLX.GPDE_FL_RP_S4B
   end-if
end-if


let #TempCol = 1 + #currLineV

alter-printer
   font = 4
   point-size = 13

let #Date_Type1 = {DateType}
do ConvertToComponents(&FLX.PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)

do ConvertToComponents($PBDC.SEG_END_DT,$yyRpt,$mmRpt,$ddRpt)

evaluate #Date_Type1
  when = 1
    let $RprtDate = $ddRpt || '{PTDateDelim}' || $mmRpt
    break
  when-other
    let $RprtDate = $mmRpt || '{PTDateDelim}' || $ddRpt
    break
end-evaluate

print $mmPrd      (#TempCol,5) bold

if $RegionAct = '1'
   let $SIC.GPDE_SIP_REGION = 'Ost'
   let $GPDE_FL_BTNR = $GPDE_FL_BTNR_EAST
   let $SV_CodeF = $FLX.GPDE_FL_CGRP_KV_E || $FLX.GPDE_FL_CGRP_RV_E ||
       $FLX.GPDE_FL_CGRP_AV_E || $FLX.GPDE_FL_CGRP_PV_E
else
   let $SIC.GPDE_SIP_REGION = 'West'
   let $GPDE_FL_BTNR = $GPDE_FL_BTNR_WEST
   let $SV_CodeF = $FLX.GPDE_FL_CGRP_KV_W || $FLX.GPDE_FL_CGRP_RV_W ||
       $FLX.GPDE_FL_CGRP_AV_W || $FLX.GPDE_FL_CGRP_PV_W
end-if

print $SIC.GPDE_SIP_REGION    (#TempCol,173)


if $RetroSign = 'R'
   print 'alt'    (#TempCol,11)
end-if

if $RetroSign = 'N'
   print 'neu'    (#TempCol,11)
end-if

alter-printer
   font = 4
   point-size = 12

print $GPDE_SI_PROV_MAND_FL (#TempCol,18)
print 'Abw.Btnr'  (#TempCol,161)
alter-printer
   font = 3
   point-size = 16

print $SV_CodeF             (#TempCol,28)

print $FLX.GPDE_FL_RP_S1B  (#TempCol,62)
print $FLX.GPDE_FL_RP_S4B  (#TempCol,76)
print $FLX.GPDE_FL_RP_S1AG    (#TempCol,90)
print $FLX.GPDE_FL_RP_S3AG    (#TempCol,104)
print $FLX.GPDE_FL_RP_S4AG    (#TempCol,118)
print $FLX.GPDE_FL_RP_S2AG    (#TempCol,132)

!print $TTSC                   (#TempCol,165)

let #TempCol = 1 + #TempCol

alter-printer
   font = 4
   point-size = 13

print $RprtDate (#TempCol,3)


let #Date_Type1 = {DateType}
   do ConvertToComponents(&FLX.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      break
   end-evaluate

   let $RetroStr = $RetroDate

if $RetroSign = 'R'
   print $RetroStr (#TempCol,10)
end-if

if  $RetroSign = 'N'
   print $RetroStr (#TempCol,10)
end-if

alter-printer
   font = 3
   point-size = 16

print $GPDE_DV_EMPL_CAT       (#TempCol,29)


print $FLX.GPDE_FL_RP_S3B  (#TempCol,62)
print $FLX.GPDE_FL_RP_S2B  (#TempCol,76)
print $FLX.GPDE_FL_RP_S1AN    (#TempCol,90)
print $FLX.GPDE_FL_RP_S3AN    (#TempCol,104)
print $FLX.GPDE_FL_RP_S4AN    (#TempCol,118)
print $FLX.GPDE_FL_RP_S2AN    (#TempCol,132)


print $PTC.GPDE_RP_SIGR_AMT      (#TempCol,48)
print $GPDE_FL_BTNR  (#TempCol,161)
!print $PBDC.STD_HOURS         (#TempCol,158)

alter-printer
   font = 4
   point-size = 13

let #KV-Brutto_Sum = #KV-Brutto_Sum + #FLX.GPDE_FL_RP_S1B
let #AV-Brutto_Sum = #AV-Brutto_Sum + #FLX.GPDE_FL_RP_S4B
let #RV-Brutto_Sum = #RV-Brutto_Sum + #FLX.GPDE_FL_RP_S3B
let #PV-Brutto_Sum = #PV-Brutto_Sum + #FLX.GPDE_FL_RP_S2B
let #KV-AN_Sum = #KV-AN_Sum + #FLX.GPDE_FL_RP_S1AN
let #KV-AG_Sum = #KV-AG_Sum + #FLX.GPDE_FL_RP_S1AG
let #RV-AN_Sum = #RV-AN_Sum + #FLX.GPDE_FL_RP_S3AN
let #RV-AG_Sum = #RV-AG_Sum + #FLX.GPDE_FL_RP_S3AG
let #AV-AN_Sum = #AV-AN_Sum + #FLX.GPDE_FL_RP_S4AN
let #AV-AG_Sum = #AV-AG_Sum + #FLX.GPDE_FL_RP_S4AG
let #PV-AN_Sum = #PV-AN_Sum + #FLX.GPDE_FL_RP_S2AN
let #PV-AG_Sum = #PV-AG_Sum + #FLX.GPDE_FL_RP_S2AG

position (+1,1)
let $PrintStorFall = 'N'
end-procedure
!*************************************************************************
begin-procedure Insert_Data_Lohnkonto
begin-sql
INSERT INTO PS_GPDE_RP_TX03_1
 (EMPLID,  CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, SLICE_END_DT, PAY_ENTITY, PRD_END_DT,
  GPDE_AL_CPAY_ENDDT, GPDE_RP_SIGRSS_AMT, GPDE_RP_SIGRS_ANLZ, GPDE_RP_HICNTB_AMT, GPDE_RP_PICNTB_AMT,
  GPDE_RP_UICNTB_AMT, GPDE_RP_CICNTB_AMT, GPDE_RP_HIVOL_AMT, GPDE_RP_CIVOL_AMT, GPDE_RP_RIGRSS_AMT,
  GPDE_RP_U1CNTB_AMT, GPDE_RP_U2CNTB_AMT, GPDE_RI_PCT1, GPDE_RI_PCT2, GPDE_RP_RIGRSM_AMT, GPDE_RP_U1CTBM_AMT,
  GPDE_RP_U2CTBM_AMT, GPDE_RI_PCT1_MC, GPDE_RI_PCT2_MC, GPDE_RP_SIGRSM_AMT, GPDE_RP_HICTBM_AMT, GPDE_RP_PICTBM_AMT,
  GPDE_RP_UICTBM_AMT, GPDE_RP_CICTBM_AMT, GPDE_RP_OAPGRS_AMT, GPDE_RP_AZGRS_ANLZ, GPDE_RP_OAPPEN_AMT,
  GPDE_RP_OAPGRS_MC, GPDE_RP_OAPPEN_MC, GPDE_RP_SIDAYS, GPDE_RP_AVDAYS, GPDE_RP_KVDAYS, GPDE_RP_PVDAYS,
  GPDE_RP_AVDAYS_BON, GPDE_RP_KVDAYS_BON, GPDE_RP_PVDAYS_BON, GPDE_RP_RVDAYS_BON, GPDE_RP_AVGRS_ANLZ,
  GPDE_RP_AVGRS_BON, GPDE_RP_AVGRS_MC, GPDE_RP_KVGRS_ANLZ, GPDE_RP_KVGRS_BON, GPDE_RP_KVGRS_MC, GPDE_RP_PVGRS_ANLZ,
  GPDE_RP_PVGRS_BON, GPDE_RP_PVGRS_MC, GPDE_RP_RVGRS_ANLZ,GPDE_RP_RVGRS_BON,GPDE_RP_RVGRS_MC,GPDE_RP_AVLFD_AG,
  GPDE_RP_AVLFD_AN, GPDE_RP_KVLFD_AG, GPDE_RP_KVLFD_AN,GPDE_RP_PVLFD_AG,GPDE_RP_PVLFD_AN,GPDE_RP_RVLFD_AG,
  GPDE_RP_RVLFD_AN, GPDE_RP_KVBON_AG, GPDE_RP_KVBON_AN,GPDE_RP_AVBON_AG,GPDE_RP_AVBON_AN,GPDE_RP_PVBON_AG,
  GPDE_RP_PVBON_AN, GPDE_RP_RVBON_AG, GPDE_RP_RVBON_AN,GPDE_RP_AVAG_MC,GPDE_RP_AVAN_MC,GPDE_RP_KVAG_MC,
  GPDE_RP_KVAN_MC, GPDE_RP_PVAG_MC, GPDE_RP_PVAN_MC,GPDE_RP_RVAG_MC,GPDE_RP_RVAN_MC,GPDE_RP_SIGRUNLM_A,
  GPDE_RP_SIGRUNLM_B, GPDE_RP_CIVLER_AMT, GPDE_RP_HIVLER_AMT,GPDE_RC_PRT_SIGN,GPDE_SI_PROV_AV,
  GPDE_SI_PROV_KV, GPDE_SI_PROV_PV, GPDE_SI_PROV_RV,GPDE_SI_PROV_UM,GPDE_SI_PROV_AV_M,GPDE_SI_PROV_KV_M,
  GPDE_SI_PROV_PV_M, GPDE_SI_PROV_RV_M, GPDE_SI_PROV_UM_M,GPDE_RP_AZGRS_BON,GPDE_RP_OAPPEN_ANL,
  GPDE_RP_OAPPEN_BON, GPDE_SI_PROV_MAND, GPDE_RP_AVDAYS_MC,GPDE_RP_KVDAYS_MC,GPDE_RP_PVDAYS_MC,
  GPDE_RP_RVDAYS_MC,GPDE_AZ_RP_S03_31,GPDE_AZ_RP_S03_41
  ,GPDE_RP_KUG_KVCTB,GPDE_RP_KUG_KVGRS,GPDE_RP_KUG_PVCTB
  ,GPDE_RP_KUG_PVGRS,GPDE_RP_KUG_RVCTB,GPDE_RP_KUG_RVGRS
  ,GPDE_KU_KUGAMT, GPDE_KU_KUGKKAMT,GPDE_RP_SK_SL_NET,GPDE_RP_SK_NET,GPDE_RP_SK_SIEXEMP,GPDE_RP_SK_GROSS,GPDE_RP_UML_INSOLV
  ,GPDE_RP_GRSSINSEGA,GPDE_RP_GRSSINSLFD,GPDE_RP_VW_RVLFDAG,GPDE_RP_VW_RVBONAG,GPDE_RP_VW_RVAG_MC,GPDE_RP_GRS_INS_MC, GPDE_RP_UML_INS_MC
  )
  VALUES ($GN.EMPLID, $GN.CAL_RUN_ID,
#GN.EMPL_RCD,$GN.GP_PAYGROUP,$GN.CAL_ID
,#GN.RSLT_SEG_NUM, $GN.SLICE_END_DT,$GN.PAY_ENTITY,$GN.PRD_END_DT,$GN.GPDE_AL_CPAY_ENDDT
,#GN.GPDE_RP_SIGRSS_AMT, #GN.GPDE_RP_SIGRS_ANLZ,#GN.GPDE_RP_HICNTB_AMT,#GN.GPDE_RP_PICNTB_AMT
,#GN.GPDE_RP_UICNTB_AMT, #GN.GPDE_RP_CICNTB_AMT,#GN.GPDE_RP_HIVOL_AMT,#GN.GPDE_RP_CIVOL_AMT
,#GN.GPDE_RP_RIGRSS_AMT, #GN.GPDE_RP_U1CNTB_AMT,#GN.GPDE_RP_U2CNTB_AMT,#SI01.GPDE_RI_PCT1
,#SI01.GPDE_RI_PCT2, #GN.GPDE_RP_RIGRSM_AMT,#GN.GPDE_RP_U1CTBM_AMT,#GN.GPDE_RP_U2CTBM_AMT
,#SI01.GPDE_RI_PCT1_MC, #SI01.GPDE_RI_PCT2_MC,#GN.GPDE_RP_SIGRSM_AMT,#GN.GPDE_RP_HICTBM_AMT
,#GN.GPDE_RP_PICTBM_AMT, #GN.GPDE_RP_UICTBM_AMT,#GN.GPDE_RP_CICTBM_AMT,#GN.GPDE_RP_OAPGRS_AMT
,#GN.GPDE_RP_AZGRS_ANLZ, #GN.GPDE_RP_OAPPEN_AMT,#GN.GPDE_RP_OAPGRS_MC,#GN.GPDE_RP_OAPPEN_MC
,#GN.GPDE_RP_SIDAYS, #GN.GPDE_RP_AVDAYS,#GN.GPDE_RP_KVDAYS,#GN.GPDE_RP_PVDAYS,#GN.GPDE_RP_AVDAYS_BON
,#GN.GPDE_RP_KVDAYS_BON, #GN.GPDE_RP_PVDAYS_BON,#GN.GPDE_RP_RVDAYS_BON,#GN.GPDE_RP_AVGRS_ANLZ
,#GN.GPDE_RP_AVGRS_BON, #GN.GPDE_RP_AVGRS_MC,#GN.GPDE_RP_KVGRS_ANLZ,#GN.GPDE_RP_KVGRS_BON
,#GN.GPDE_RP_KVGRS_MC, #GN.GPDE_RP_PVGRS_ANLZ,#GN.GPDE_RP_PVGRS_BON,#GN.GPDE_RP_PVGRS_MC
,#GN.GPDE_RP_RVGRS_ANLZ, #GN.GPDE_RP_RVGRS_BON,#GN.GPDE_RP_RVGRS_MC,#GN.GPDE_RP_AVLFD_AG
,#GN.GPDE_RP_AVLFD_AN, #GN.GPDE_RP_KVLFD_AG,#GN.GPDE_RP_KVLFD_AN,#GN.GPDE_RP_PVLFD_AG
,#GN.GPDE_RP_PVLFD_AN, #GN.GPDE_RP_RVLFD_AG,#GN.GPDE_RP_RVLFD_AN,#GN.GPDE_RP_KVBON_AG
,#GN.GPDE_RP_KVBON_AN, #GN.GPDE_RP_AVBON_AG,#GN.GPDE_RP_AVBON_AN,#GN.GPDE_RP_PVBON_AG
,#GN.GPDE_RP_PVBON_AN, #GN.GPDE_RP_RVBON_AG,#GN.GPDE_RP_RVBON_AN,#GN.GPDE_RP_AVAG_MC
,#GN.GPDE_RP_AVAN_MC, #GN.GPDE_RP_KVAG_MC,#GN.GPDE_RP_KVAN_MC,#GN.GPDE_RP_PVAG_MC
,#GN.GPDE_RP_PVAN_MC, #GN.GPDE_RP_RVAG_MC,#GN.GPDE_RP_RVAN_MC,#GN.GPDE_RP_SIGRUNLM_A
,#GN.GPDE_RP_SIGRUNLM_B, #GN.GPDE_RP_CIVLER_AMT,#GN.GPDE_RP_HIVLER_AMT,$Pr_Sign
,$SI01.GPDE_SI_PROV_AV, $SI01.GPDE_SI_PROV_KV,$SI01.GPDE_SI_PROV_PV,$SI01.GPDE_SI_PROV_RV
,$SI01.GPDE_SI_PROV_UM, $SI01.GPDE_SI_PROV_AV_M,$SI01.GPDE_SI_PROV_KV_M,$SI01.GPDE_SI_PROV_PV_M
,$SI01.GPDE_SI_PROV_RV
,$SI01.GPDE_SI_PROV_UM_M
,#GN.GPDE_RP_AZGRS_BON,#GN.GPDE_RP_OAPPEN_ANL
,#GN.GPDE_RP_OAPPEN_BON, $SI01.GPDE_SI_PROV_MAND,#GN.GPDE_RP_AVDAYS_MC,#GN.GPDE_RP_KVDAYS_MC
,#GN.GPDE_RP_PVDAYS_MC, #GN.GPDE_RP_RVDAYS_MC,#GN.GPDE_AZ_RP_S03_31,#GN.GPDE_AZ_RP_S03_41
,#GN.GPDE_RP_KUG_KVCTB, #GN.GPDE_RP_KUG_KVGRS, #GN.GPDE_RP_KUG_PVCTB
,#GN.GPDE_RP_KUG_PVGRS, #GN.GPDE_RP_KUG_RVCTB, #GN.GPDE_RP_KUG_RVGRS
,#kugamt , #kugkkamt, #SK_SL_NET, #SK_NET, #SK_SIEXEMP,#SK_GROSS,#UML_INSOL,#GRS_INSOL_EGA,#GRS_INSOL_LFD
,#PF_LDF, #PF_BON , #PF_RvAg , #GRS_INS_MC , #UML_INS_MC
)
end-sql
!jjj added kugamt
!adj08-890b14 added SK_NET for par23c
!adj08-890b15 added SK_GORSS
!adj09-890b17 Pension Fund
end-procedure






!****************************************************************
begin-procedure MakeProviderList        !was: Prepare-Print-Data
!
! we need to print SI data on a per-provider basis, therefore
! we need to know the distinct providers
!

begin-sql
  delete from PS_GPDE_RP_TX03B
end-sql

let $TempField = 'SI10T.GPDE_SI_PROV_KV'
let $TempField1 = 'SI10T.GPDE_SI_PROV_KV'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_PV'
let $TempField1 = 'SI10T.GPDE_SI_PROV_PV'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_RV'
let $TempField1 = 'SI10T.GPDE_SI_PROV_RV'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_AV'
let $TempField1 = 'SI10T.GPDE_SI_PROV_AV'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_UM'
let $TempField1 = 'SI10T.GPDE_SI_PROV_UM'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_KV_M'
let $TempField1 = 'SI10T.GPDE_SI_PROV_KV_M'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_PV_M'
let $TempField1 = 'SI10T.GPDE_SI_PROV_PV_M'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_RV_M'
let $TempField1 = 'SI10T.GPDE_SI_PROV_RV_M'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_AV_M'
let $TempField1 = 'SI10T.GPDE_SI_PROV_AV_M'
do SearchForProvider
let $TempField = 'SI10T.GPDE_SI_PROV_UM_M'
let $TempField1 = 'SI10T.GPDE_SI_PROV_UM_M'
do SearchForProvider

end-procedure





!****************************************************************
begin-procedure DistributeSI_DataPerProvider        !was:Prepare_Fill_Result_Data
! as we print on a per provider basis, we need to blank out the values which
! belong to other providers.

!clear the table for the SI-Rows
begin-sql
  delete from PS_GPDE_RP_TX03A
end-sql

! we make a loop over all providers and create a row for each provider of the
! emplid. To avoid duplicate counting, the values belonging to the other providers
! need to be set to zero.
!
! wdu06-881kug -- a note on provider distribution code
! Note: we need this feature here because we need to print the correct provider
! especially when the provider changed retroactively!
!
let #Countr = 1
begin-select distinct
B2.GPDE_SI_PROV_MAND &B2.GPDE_SI_PROV_MAND=char
  if rtrim(&B2.GPDE_SI_PROV_MAND,' ') <> ''
   do DistributeSI_DataPerProvider_Detail
  end-if
from PS_GPDE_RP_TX03B B2
end-select
end-procedure



!****************************************************************
begin-procedure DistributeSI_DataPerProvider_Detail     !was:Fill_Result_Data
!
! comments see: DistributeSI_DataPerProvider
!
begin-select
B3.EMPLID
B3.CAL_RUN_ID
B3.EMPL_RCD
B3.GP_PAYGROUP
B3.CAL_ID
B3.RSLT_SEG_NUM
B3.SLICE_END_DT
B3.PAY_ENTITY
B3.PRD_END_DT
B3.GPDE_AL_CPAY_ENDDT
B3.GPDE_RP_SIGRSS_AMT
B3.GPDE_RP_SIGRS_ANLZ
B3.GPDE_RP_HICNTB_AMT
B3.GPDE_RP_PICNTB_AMT
B3.GPDE_RP_UICNTB_AMT
B3.GPDE_RP_CICNTB_AMT
B3.GPDE_RP_HIVOL_AMT
B3.GPDE_RP_CIVOL_AMT
B3.GPDE_RP_RIGRSS_AMT
B3.GPDE_RP_U1CNTB_AMT
B3.GPDE_RP_U2CNTB_AMT
B3.GPDE_RI_PCT1
B3.GPDE_RI_PCT2
B3.GPDE_RP_RIGRSM_AMT
B3.GPDE_RP_U1CTBM_AMT
B3.GPDE_RP_U2CTBM_AMT
B3.GPDE_RI_PCT1_MC
B3.GPDE_RI_PCT2_MC
B3.GPDE_RP_SIGRSM_AMT
B3.GPDE_RP_HICTBM_AMT
B3.GPDE_RP_PICTBM_AMT
B3.GPDE_RP_UICTBM_AMT
B3.GPDE_RP_CICTBM_AMT
B3.GPDE_RP_OAPGRS_AMT
B3.GPDE_RP_AZGRS_ANLZ
B3.GPDE_RP_OAPPEN_AMT
B3.GPDE_RP_OAPGRS_MC
B3.GPDE_RP_OAPPEN_MC
B3.GPDE_RP_SIDAYS
B3.GPDE_RP_AVDAYS
B3.GPDE_RP_KVDAYS
B3.GPDE_RP_PVDAYS
B3.GPDE_RP_AVDAYS_BON
B3.GPDE_RP_KVDAYS_BON
B3.GPDE_RP_PVDAYS_BON
B3.GPDE_RP_RVDAYS_BON
B3.GPDE_RP_AVGRS_ANLZ
B3.GPDE_RP_AVGRS_BON
B3.GPDE_RP_AVGRS_MC
B3.GPDE_RP_KVGRS_ANLZ
B3.GPDE_RP_KVGRS_BON
B3.GPDE_RP_KVGRS_MC
B3.GPDE_RP_PVGRS_ANLZ
B3.GPDE_RP_PVGRS_BON
B3.GPDE_RP_PVGRS_MC
B3.GPDE_RP_RVGRS_ANLZ
B3.GPDE_RP_RVGRS_BON
B3.GPDE_RP_RVGRS_MC
B3.GPDE_RP_AVLFD_AG
B3.GPDE_RP_AVLFD_AN
B3.GPDE_RP_KVLFD_AG
B3.GPDE_RP_KVLFD_AN
B3.GPDE_RP_PVLFD_AG
B3.GPDE_RP_PVLFD_AN
B3.GPDE_RP_RVLFD_AG
B3.GPDE_RP_RVLFD_AN
B3.GPDE_RP_KVBON_AG
B3.GPDE_RP_KVBON_AN
B3.GPDE_RP_AVBON_AG
B3.GPDE_RP_AVBON_AN
B3.GPDE_RP_PVBON_AG
B3.GPDE_RP_PVBON_AN
B3.GPDE_RP_RVBON_AG
B3.GPDE_RP_RVBON_AN
B3.GPDE_RP_AVAG_MC
B3.GPDE_RP_AVAN_MC
B3.GPDE_RP_KVAG_MC
B3.GPDE_RP_KVAN_MC
B3.GPDE_RP_PVAG_MC
B3.GPDE_RP_PVAN_MC
B3.GPDE_RP_RVAG_MC
B3.GPDE_RP_RVAN_MC
B3.GPDE_RP_SIGRUNLM_A
B3.GPDE_RP_SIGRUNLM_B
B3.GPDE_RP_CIVLER_AMT
B3.GPDE_RP_HIVLER_AMT
B3.GPDE_RC_PRT_SIGN
B3.GPDE_SI_PROV_AV
B3.GPDE_SI_PROV_KV
B3.GPDE_SI_PROV_PV
B3.GPDE_SI_PROV_RV
B3.GPDE_SI_PROV_UM
B3.GPDE_SI_PROV_AV_M
B3.GPDE_SI_PROV_KV_M
B3.GPDE_SI_PROV_PV_M
B3.GPDE_SI_PROV_RV_M
B3.GPDE_SI_PROV_UM_M
B3.GPDE_RP_AZGRS_BON
B3.GPDE_RP_OAPPEN_ANL
B3.GPDE_RP_OAPPEN_BON
B3.GPDE_SI_PROV_MAND
B3.GPDE_RP_AVDAYS_MC
B3.GPDE_RP_KVDAYS_MC
B3.GPDE_RP_PVDAYS_MC
B3.GPDE_RP_RVDAYS_MC
B3.GPDE_AZ_RP_S03_31
B3.GPDE_AZ_RP_S03_41

! wd06-881kug
B3.GPDE_RP_KUG_KVCTB
B3.GPDE_RP_KUG_KVGRS
B3.GPDE_RP_KUG_PVCTB
B3.GPDE_RP_KUG_PVGRS
B3.GPDE_RP_KUG_RVCTB
B3.GPDE_RP_KUG_RVGRS

! jjj
B3.GPDE_KU_KUGKKAMT
B3.GPDE_KU_KUGAMT
!adj08-890b14
B3.GPDE_RP_SK_SL_NET
B3.GPDE_RP_SK_NET
B3.GPDE_RP_SK_SIEXEMP
!adj08-890b15
B3.GPDE_RP_SK_GROSS
!adj09-890b17
B3.GPDE_RP_GRSSINSLFD
B3.GPDE_RP_GRSSINSEGA
B3.GPDE_RP_UML_INSOLV
!adj09-pension fund
B3.GPDE_RP_VW_RVLFDAG
B3.GPDE_RP_VW_RVBONAG
B3.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
B3.GPDE_RP_GRS_INS_MC
B3.GPDE_RP_UML_INS_MC

   let $ExistProv = 'N'
   let #B3.GPDE_RP_SIGRSS_AMT = &B3.GPDE_RP_SIGRSS_AMT
   let #B3.GPDE_RP_SIGRS_ANLZ = &B3.GPDE_RP_SIGRS_ANLZ
   let #B3.GPDE_RP_HICNTB_AMT = &B3.GPDE_RP_HICNTB_AMT
   let #B3.GPDE_RP_PICNTB_AMT = &B3.GPDE_RP_PICNTB_AMT
   let #B3.GPDE_RP_UICNTB_AMT = &B3.GPDE_RP_UICNTB_AMT
   let #B3.GPDE_RP_CICNTB_AMT = &B3.GPDE_RP_CICNTB_AMT
   let #B3.GPDE_RP_HIVOL_AMT  = &B3.GPDE_RP_HIVOL_AMT
   let #B3.GPDE_RP_CIVOL_AMT  = &B3.GPDE_RP_CIVOL_AMT
   let #B3.GPDE_RP_RIGRSS_AMT = &B3.GPDE_RP_RIGRSS_AMT
   let #B3.GPDE_RP_U1CNTB_AMT = &B3.GPDE_RP_U1CNTB_AMT
   let #B3.GPDE_RP_U2CNTB_AMT = &B3.GPDE_RP_U2CNTB_AMT
   let #B3.GPDE_RI_PCT1       = &B3.GPDE_RI_PCT1
   let #B3.GPDE_RI_PCT2       = &B3.GPDE_RI_PCT2
   let #B3.GPDE_RP_RIGRSM_AMT = &B3.GPDE_RP_RIGRSM_AMT
   let #B3.GPDE_RP_U1CTBM_AMT = &B3.GPDE_RP_U1CTBM_AMT
   let #B3.GPDE_RP_U2CTBM_AMT = &B3.GPDE_RP_U2CTBM_AMT
   let #B3.GPDE_RI_PCT1_MC    = &B3.GPDE_RI_PCT1_MC
   let #B3.GPDE_RI_PCT2_MC    = &B3.GPDE_RI_PCT2_MC
   let #B3.GPDE_RP_SIGRSM_AMT = &B3.GPDE_RP_SIGRSM_AMT
   let #B3.GPDE_RP_HICTBM_AMT = &B3.GPDE_RP_HICTBM_AMT
   let #B3.GPDE_RP_PICTBM_AMT = &B3.GPDE_RP_PICTBM_AMT
   let #B3.GPDE_RP_UICTBM_AMT = &B3.GPDE_RP_UICTBM_AMT
   let #B3.GPDE_RP_CICTBM_AMT = &B3.GPDE_RP_CICTBM_AMT
   let #B3.GPDE_RP_OAPGRS_AMT = &B3.GPDE_RP_OAPGRS_AMT
   let #B3.GPDE_RP_AZGRS_ANLZ = &B3.GPDE_RP_AZGRS_ANLZ
! +-   let #B3.GPDE_RP_OAPPEN_AMT = &B3.GPDE_RP_OAPPEN_AMT
   let #B3.GPDE_RP_OAPGRS_MC  = &B3.GPDE_RP_OAPGRS_MC
   let #B3.GPDE_RP_OAPPEN_MC  = &B3.GPDE_RP_OAPPEN_MC
   let #B3.GPDE_RP_SIDAYS     = &B3.GPDE_RP_SIDAYS
   let #B3.GPDE_RP_AVDAYS     = &B3.GPDE_RP_AVDAYS
   let #B3.GPDE_RP_KVDAYS     = &B3.GPDE_RP_KVDAYS
   let #B3.GPDE_RP_PVDAYS     = &B3.GPDE_RP_PVDAYS
   let #B3.GPDE_RP_AVDAYS_BON = &B3.GPDE_RP_AVDAYS_BON
   let #B3.GPDE_RP_KVDAYS_BON = &B3.GPDE_RP_KVDAYS_BON
   let #B3.GPDE_RP_PVDAYS_BON = &B3.GPDE_RP_PVDAYS_BON
   let #B3.GPDE_RP_RVDAYS_BON = &B3.GPDE_RP_RVDAYS_BON
   let #B3.GPDE_RP_AVGRS_ANLZ = &B3.GPDE_RP_AVGRS_ANLZ
   let #B3.GPDE_RP_AVGRS_BON  = &B3.GPDE_RP_AVGRS_BON
   let #B3.GPDE_RP_AVGRS_MC   = &B3.GPDE_RP_AVGRS_MC
   let #B3.GPDE_RP_KVGRS_ANLZ = &B3.GPDE_RP_KVGRS_ANLZ
   let #B3.GPDE_RP_KVGRS_BON  = &B3.GPDE_RP_KVGRS_BON
   let #B3.GPDE_RP_KVGRS_MC   = &B3.GPDE_RP_KVGRS_MC
   let #B3.GPDE_RP_PVGRS_ANLZ = &B3.GPDE_RP_PVGRS_ANLZ
   let #B3.GPDE_RP_PVGRS_BON  = &B3.GPDE_RP_PVGRS_BON
   let #B3.GPDE_RP_PVGRS_MC   = &B3.GPDE_RP_PVGRS_MC
   let #B3.GPDE_RP_RVGRS_ANLZ = &B3.GPDE_RP_RVGRS_ANLZ
   let #B3.GPDE_RP_RVGRS_BON  = &B3.GPDE_RP_RVGRS_BON
   let #B3.GPDE_RP_RVGRS_MC   = &B3.GPDE_RP_RVGRS_MC
   let #B3.GPDE_RP_AVLFD_AG   = &B3.GPDE_RP_AVLFD_AG
   let #B3.GPDE_RP_AVLFD_AN   = &B3.GPDE_RP_AVLFD_AN
   let #B3.GPDE_RP_KVLFD_AG   = &B3.GPDE_RP_KVLFD_AG
   let #B3.GPDE_RP_KVLFD_AN   = &B3.GPDE_RP_KVLFD_AN
   let #B3.GPDE_RP_PVLFD_AG   = &B3.GPDE_RP_PVLFD_AG
   let #B3.GPDE_RP_PVLFD_AN   = &B3.GPDE_RP_PVLFD_AN
   let #B3.GPDE_RP_RVLFD_AG   = &B3.GPDE_RP_RVLFD_AG
   let #B3.GPDE_RP_RVLFD_AN   = &B3.GPDE_RP_RVLFD_AN
   let #B3.GPDE_RP_KVBON_AG   = &B3.GPDE_RP_KVBON_AG
   let #B3.GPDE_RP_KVBON_AN   = &B3.GPDE_RP_KVBON_AN
   let #B3.GPDE_RP_AVBON_AG   = &B3.GPDE_RP_AVBON_AG
   let #B3.GPDE_RP_AVBON_AN   = &B3.GPDE_RP_AVBON_AN
   let #B3.GPDE_RP_PVBON_AG   = &B3.GPDE_RP_PVBON_AG
   let #B3.GPDE_RP_PVBON_AN   = &B3.GPDE_RP_PVBON_AN
   let #B3.GPDE_RP_RVBON_AG   = &B3.GPDE_RP_RVBON_AG
   let #B3.GPDE_RP_RVBON_AN   = &B3.GPDE_RP_RVBON_AN
   let #B3.GPDE_RP_AVAG_MC    = &B3.GPDE_RP_AVAG_MC
   let #B3.GPDE_RP_AVAN_MC    = &B3.GPDE_RP_AVAN_MC
   let #B3.GPDE_RP_KVAG_MC    = &B3.GPDE_RP_KVAG_MC
   let #B3.GPDE_RP_KVAN_MC    = &B3.GPDE_RP_KVAN_MC
   let #B3.GPDE_RP_PVAG_MC    = &B3.GPDE_RP_PVAG_MC
   let #B3.GPDE_RP_PVAN_MC    = &B3.GPDE_RP_PVAN_MC
   let #B3.GPDE_RP_RVAG_MC    = &B3.GPDE_RP_RVAG_MC
   let #B3.GPDE_RP_RVAN_MC    = &B3.GPDE_RP_RVAN_MC
   let #B3.GPDE_RP_SIGRUNLM_A = &B3.GPDE_RP_SIGRUNLM_A
   let #B3.GPDE_RP_SIGRUNLM_B = &B3.GPDE_RP_SIGRUNLM_B
   let #B3.GPDE_RP_CIVLER_AMT = &B3.GPDE_RP_CIVLER_AMT
   let #B3.GPDE_RP_HIVLER_AMT = &B3.GPDE_RP_HIVLER_AMT
   let #B3.GPDE_RP_AZGRS_BON = &B3.GPDE_RP_AZGRS_BON
   let #B3.GPDE_RP_OAPPEN_ANL = &B3.GPDE_RP_OAPPEN_ANL
   let #B3.GPDE_RP_OAPPEN_BON = &B3.GPDE_RP_OAPPEN_BON
   let #B3.GPDE_RP_AVDAYS_MC     = &B3.GPDE_RP_AVDAYS_MC
   let #B3.GPDE_RP_KVDAYS_MC     = &B3.GPDE_RP_KVDAYS_MC
   let #B3.GPDE_RP_PVDAYS_MC     = &B3.GPDE_RP_PVDAYS_MC
   let #B3.GPDE_RP_RVDAYS_MC     = &B3.GPDE_RP_RVDAYS_MC
   let #B3.GPDE_AZ_RP_S03_31     = &B3.GPDE_AZ_RP_S03_31
   let #B3.GPDE_AZ_RP_S03_41     = &B3.GPDE_AZ_RP_S03_41

   ! wd06-881kug
   let #B3.GPDE_RP_KUG_KVCTB     = &B3.GPDE_RP_KUG_KVCTB
   let #B3.GPDE_RP_KUG_KVGRS     = &B3.GPDE_RP_KUG_KVGRS
   let #B3.GPDE_RP_KUG_PVCTB     = &B3.GPDE_RP_KUG_PVCTB
   let #B3.GPDE_RP_KUG_PVGRS     = &B3.GPDE_RP_KUG_PVGRS
   let #B3.GPDE_RP_KUG_RVCTB     = &B3.GPDE_RP_KUG_RVCTB
   let #B3.GPDE_RP_KUG_RVGRS     = &B3.GPDE_RP_KUG_RVGRS

   ! jjj
  let #B3.GPDE_KU_KUGKKAMT = &B3.GPDE_KU_KUGKKAMT
  let #B3.GPDE_KU_KUGAMT = &B3.GPDE_KU_KUGAMT
   !adj08-890b14
  let #B3.GPDE_RP_SK_SL_NET = &B3.GPDE_RP_SK_SL_NET
  let #B3.GPDE_RP_SK_NET  = &B3.GPDE_RP_SK_NET
  let #B3.GPDE_RP_SK_SIEXEMP= &B3.GPDE_RP_SK_SIEXEMP
  !adj08-890b15
  let #B3.GPDE_RP_SK_GROSS = &B3.GPDE_RP_SK_GROSS
  !adj09-890b17
!  let #B3.GPDE_RP_GRSSINSLFD = &B3.GPDE_RP_GRSSINSLFD
!  let #B3.GPDE_RP_GRSSINSEGA = &B3.GPDE_RP_GRSSINSEGA
!  let #B3.GPDE_RP_UML_INSOLV  = &B3.GPDE_RP_UML_INSOLV

!  let #B3.GPDE_RP_VW_RVLFDAG = &B3.GPDE_RP_VW_RVLFDAG
!  let #B3.GPDE_RP_VW_RVBONAG = &B3.GPDE_RP_VW_RVBONAG
!  let #B3.GPDE_RP_VW_RVAG_MC = &B3.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
!  let #B3.GPDE_RP_GRS_INS_MC = &B3.GPDE_RP_GRS_INS_MC
!  let #B3.GPDE_RP_UML_INS_MC = &B3.GPDE_RP_UML_INS_MC


   ! GUl07-890b10  march print issue helper variables
   let $PrintForCurrent = 'N'
   let $PrintForMarch = 'N'
   !
   ! start of the blank-out section
   ! just keeping the data, which belong to the provider associated with this row
   !
   if &B3.GPDE_SI_PROV_KV = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForCurrent = 'Y'
   else
      let #B3.GPDE_RP_KVGRS_ANLZ = 0
      let #B3.GPDE_RP_KVGRS_BON = 0
      let #B3.GPDE_RP_KVBON_AG = 0
      let #B3.GPDE_RP_KVBON_AN = 0
      let #B3.GPDE_RP_KVLFD_AG = 0
      let #B3.GPDE_RP_KVLFD_AN = 0
      ! wd06-881kug
      let #B3.GPDE_RP_KUG_KVCTB = 0
      let #B3.GPDE_RP_KUG_KVGRS = 0
       ! jjj
      !let #B3.GPDE_KU_KUGKKAMT = 0
      !let #B3.GPDE_KU_KUGAMT = 0
      !GUl07-890b10
      let #B3.GPDE_RP_HIVLER_AMT = 0
      let #B3.GPDE_RP_KVDAYS = 0
      let #B3.GPDE_RP_KVDAYS_BON = 0
   end-if

   if &B3.GPDE_SI_PROV_AV = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForCurrent = 'Y'
   else
      let #B3.GPDE_RP_AVGRS_ANLZ = 0
      let #B3.GPDE_RP_AVGRS_BON = 0
      let #B3.GPDE_RP_AVBON_AG = 0
      let #B3.GPDE_RP_AVBON_AN = 0
      let #B3.GPDE_RP_AVLFD_AG = 0
      let #B3.GPDE_RP_AVLFD_AN = 0
      !GUl07-890b10
      let #B3.GPDE_RP_AVDAYS = 0
      let #B3.GPDE_RP_AVDAYS_BON = 0
   end-if

   if &B3.GPDE_SI_PROV_PV = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForCurrent = 'Y'
   else
      let #B3.GPDE_RP_PVGRS_ANLZ = 0
      let #B3.GPDE_RP_PVGRS_BON = 0
      let #B3.GPDE_RP_PVBON_AG = 0
      let #B3.GPDE_RP_PVBON_AN = 0
      let #B3.GPDE_RP_PVLFD_AG = 0
      let #B3.GPDE_RP_PVLFD_AN = 0
      ! wd06-881kug
      let #B3.GPDE_RP_KUG_PVCTB  = 0
      let #B3.GPDE_RP_KUG_PVGRS  = 0
       ! jjj
      !let #B3.GPDE_KU_KUGKKAMT = 0
      !let #B3.GPDE_KU_KUGAMT = 0
      !GUl07-890b10
      let #B3.GPDE_RP_CIVLER_AMT = 0
      let #B3.GPDE_RP_PVDAYS = 0
      let #B3.GPDE_RP_PVDAYS_BON = 0
   end-if

   if &B3.GPDE_SI_PROV_RV = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForCurrent = 'Y'
   else
      let #B3.GPDE_RP_RVGRS_ANLZ = 0
      let #B3.GPDE_RP_RVGRS_BON = 0
      let #B3.GPDE_RP_RVBON_AG = 0
      let #B3.GPDE_RP_RVBON_AN = 0
      let #B3.GPDE_RP_RVLFD_AG = 0
      let #B3.GPDE_RP_RVLFD_AN = 0
      let #B3.GPDE_RP_AZGRS_BON = 0
      let #B3.GPDE_RP_OAPPEN_ANL = 0
      let #B3.GPDE_RP_OAPPEN_BON = 0
      let #B3.GPDE_AZ_RP_S03_31     = 0
      let #B3.GPDE_AZ_RP_S03_41     = 0
      ! wd06-881kug
      let #B3.GPDE_RP_KUG_RVCTB  = 0
      let #B3.GPDE_RP_KUG_RVGRS  = 0
       ! jjj
      !let #B3.GPDE_KU_KUGKKAMT = 0
      !let #B3.GPDE_KU_KUGAMT = 0
      !GUl07-890b10
      let #B3.GPDE_RP_SIDAYS = 0
      let #B3.GPDE_RP_RVDAYS_BON = 0
   end-if

   !
   ! Marchclause distribution
   !
   if &B3.GPDE_SI_PROV_AV_M = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForMarch = 'Y'
   else
      let #B3.GPDE_RP_AVGRS_MC = 0
      let #B3.GPDE_RP_AVAG_MC = 0
      let #B3.GPDE_RP_AVAN_MC = 0
       !GUl07-890b10
      let #B3.GPDE_RP_AVDAYS_MC = 0
   end-if
   if &B3.GPDE_SI_PROV_KV_M = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForMarch = 'Y'
   else
      let #B3.GPDE_RP_KVGRS_MC = 0
      let #B3.GPDE_RP_KVAG_MC = 0
      let #B3.GPDE_RP_KVAN_MC = 0
       !GUl07-890b10
      let #B3.GPDE_RP_KVDAYS_MC = 0
   end-if
   if &B3.GPDE_SI_PROV_PV_M = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForMarch = 'Y'
   else
      let #B3.GPDE_RP_PVGRS_MC = 0
      let #B3.GPDE_RP_PVAG_MC = 0
      let #B3.GPDE_RP_PVAN_MC = 0
       !GUl07-890b10
      let #B3.GPDE_RP_PVDAYS_MC = 0
   end-if
   if &B3.GPDE_SI_PROV_RV_M = &B2.GPDE_SI_PROV_MAND
      let $ExistProv = 'Y'
      let $PrintForMarch = 'Y'
   else
      let #B3.GPDE_RP_RVGRS_MC = 0
      let #B3.GPDE_RP_RVAG_MC = 0
      let #B3.GPDE_RP_RVAN_MC = 0
       !GUl07-890b10
      let #B3.GPDE_RP_RVDAYS_MC = 0
   end-if
   !
   ! wdu06-881kug -- check for redundant code
   ! the following statements should only be required for branch-
   ! independent values because all zeroing statements have been executed.
   ! Branch dependent code could be moved further up to the branches.
   if $ExistProv = 'N'
      let #B3.GPDE_RP_SIGRSS_AMT = 0
      let #B3.GPDE_RP_SIGRS_ANLZ = 0

      let #B3.GPDE_RP_HICNTB_AMT = 0
      let #B3.GPDE_RP_PICNTB_AMT = 0
      let #B3.GPDE_RP_UICNTB_AMT = 0
      let #B3.GPDE_RP_CICNTB_AMT = 0
      let #B3.GPDE_RP_HIVOL_AMT  = 0
      let #B3.GPDE_RP_CIVOL_AMT  = 0
      let #B3.GPDE_RP_SIGRSM_AMT = 0
      let #B3.GPDE_RP_HICTBM_AMT = 0
      let #B3.GPDE_RP_PICTBM_AMT = 0
      let #B3.GPDE_RP_UICTBM_AMT = 0
      let #B3.GPDE_RP_CICTBM_AMT = 0
      let #B3.GPDE_RP_OAPGRS_AMT = 0
      let #B3.GPDE_RP_AZGRS_ANLZ = 0
! +-      let #B3.GPDE_RP_OAPPEN_AMT = 0
      let #B3.GPDE_RP_OAPGRS_MC  = 0
      let #B3.GPDE_RP_OAPPEN_MC  = 0
      let #B3.GPDE_RP_SIDAYS     = 0
      let #B3.GPDE_RP_AVDAYS     = 0
      let #B3.GPDE_RP_KVDAYS     = 0
      let #B3.GPDE_RP_PVDAYS     = 0
      let #B3.GPDE_RP_AVDAYS_BON = 0
      let #B3.GPDE_RP_KVDAYS_BON = 0
      let #B3.GPDE_RP_PVDAYS_BON = 0
      let #B3.GPDE_RP_RVDAYS_BON = 0
      let #B3.GPDE_RP_AVGRS_ANLZ = 0
      let #B3.GPDE_RP_AVGRS_BON  = 0
      let #B3.GPDE_RP_AVGRS_MC   = 0
      let #B3.GPDE_RP_KVGRS_ANLZ = 0
      let #B3.GPDE_RP_KVGRS_BON  = 0
      let #B3.GPDE_RP_KVGRS_MC   = 0
      let #B3.GPDE_RP_PVGRS_ANLZ = 0
      let #B3.GPDE_RP_PVGRS_BON  = 0
      let #B3.GPDE_RP_PVGRS_MC   = 0
      let #B3.GPDE_RP_RVGRS_ANLZ = 0
      let #B3.GPDE_RP_RVGRS_BON  = 0
      let #B3.GPDE_RP_RVGRS_MC   = 0
      let #B3.GPDE_RP_AVLFD_AG   = 0
      let #B3.GPDE_RP_AVLFD_AN   = 0
      let #B3.GPDE_RP_KVLFD_AG   = 0
      let #B3.GPDE_RP_KVLFD_AN   = 0
      let #B3.GPDE_RP_PVLFD_AG   = 0
      let #B3.GPDE_RP_PVLFD_AN   = 0
      let #B3.GPDE_RP_RVLFD_AG   = 0
      let #B3.GPDE_RP_RVLFD_AN   = 0
      let #B3.GPDE_RP_KVBON_AG   = 0
      let #B3.GPDE_RP_KVBON_AN   = 0
      let #B3.GPDE_RP_AVBON_AG   = 0
      let #B3.GPDE_RP_AVBON_AN   = 0
      let #B3.GPDE_RP_PVBON_AG   = 0
      let #B3.GPDE_RP_PVBON_AN   = 0
      let #B3.GPDE_RP_RVBON_AG   = 0
      let #B3.GPDE_RP_RVBON_AN   = 0
      let #B3.GPDE_RP_AVAG_MC    = 0
      let #B3.GPDE_RP_AVAN_MC    = 0
      let #B3.GPDE_RP_KVAG_MC    = 0
      let #B3.GPDE_RP_KVAN_MC    = 0
      let #B3.GPDE_RP_PVAG_MC    = 0
      let #B3.GPDE_RP_PVAN_MC    = 0
      let #B3.GPDE_RP_RVAG_MC    = 0
      let #B3.GPDE_RP_RVAN_MC    = 0
      let #B3.GPDE_RP_SIGRUNLM_A = 0
      let #B3.GPDE_RP_SIGRUNLM_B = 0
      let #B3.GPDE_RP_CIVLER_AMT = 0
      let #B3.GPDE_RP_HIVLER_AMT = 0
      let #B3.GPDE_RP_AZGRS_BON = 0
      let #B3.GPDE_RP_OAPPEN_ANL = 0
      let #B3.GPDE_RP_OAPPEN_BON = 0
      let #B3.GPDE_RP_AVDAYS_MC     = 0
      let #B3.GPDE_RP_KVDAYS_MC     = 0
      let #B3.GPDE_RP_PVDAYS_MC     = 0
      let #B3.GPDE_RP_RVDAYS_MC     = 0
      let #B3.GPDE_AZ_RP_S03_31     = 0
      let #B3.GPDE_AZ_RP_S03_41     = 0
      ! wd06-881kug
      let #B3.GPDE_RP_KUG_KVCTB = 0
      let #B3.GPDE_RP_KUG_KVGRS = 0
      let #B3.GPDE_RP_KUG_PVCTB  = 0
      let #B3.GPDE_RP_KUG_PVGRS  = 0
      let #B3.GPDE_RP_KUG_RVCTB  = 0
      let #B3.GPDE_RP_KUG_RVGRS  = 0

       ! jjj
      let #B3.GPDE_KU_KUGKKAMT = 0
      let #B3.GPDE_KU_KUGAMT = 0
!adj09
  let #B3.GPDE_RP_SK_SL_NET = 0
  let #B3.GPDE_RP_SK_NET  = 0
  let #B3.GPDE_RP_SK_SIEXEMP = 0
  let #B3.GPDE_RP_SK_GROSS = 0
  let #B3.GPDE_RP_GRSSINSLFD = 0
  let #B3.GPDE_RP_GRSSINSEGA = 0
  let #B3.GPDE_RP_UML_INSOLV  = 0
  let #B3.GPDE_RP_VW_RVLFDAG = 0
  let #B3.GPDE_RP_VW_RVBONAG = 0
  let #B3.GPDE_RP_VW_RVAG_MC = 0
!---
   end-if
   if &B3.GPDE_SI_PROV_UM = &B2.GPDE_SI_PROV_MAND
      let #B3.GPDE_RP_RIGRSS_AMT = &B3.GPDE_RP_RIGRSS_AMT
      let #B3.GPDE_RP_U1CNTB_AMT = &B3.GPDE_RP_U1CNTB_AMT
      let #B3.GPDE_RP_U2CNTB_AMT = &B3.GPDE_RP_U2CNTB_AMT
!adj09
      let #B3.GPDE_RP_GRSSINSLFD = &B3.GPDE_RP_GRSSINSLFD
      let #B3.GPDE_RP_GRSSINSEGA = &B3.GPDE_RP_GRSSINSEGA
      let #B3.GPDE_RP_UML_INSOLV  = &B3.GPDE_RP_UML_INSOLV
   else
      let #B3.GPDE_RP_RIGRSS_AMT = 0
      let #B3.GPDE_RP_U1CNTB_AMT = 0
      let #B3.GPDE_RP_U2CNTB_AMT = 0
!adj09
      let #B3.GPDE_RP_GRSSINSLFD  = 0
      let #B3.GPDE_RP_GRSSINSEGA  = 0
      let #B3.GPDE_RP_UML_INSOLV  = 0
   end-if
   if &B3.GPDE_SI_PROV_UM_M = &B2.GPDE_SI_PROV_MAND
      let #B3.GPDE_RP_RIGRSM_AMT = &B3.GPDE_RP_RIGRSM_AMT
      let #B3.GPDE_RP_U1CTBM_AMT = &B3.GPDE_RP_U1CTBM_AMT
      let #B3.GPDE_RP_U2CTBM_AMT = &B3.GPDE_RP_U2CTBM_AMT
!adj09
      let #B3.GPDE_RP_VW_RVAG_MC = &B3.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
      let #B3.GPDE_RP_GRS_INS_MC = &B3.GPDE_RP_GRS_INS_MC
      let #B3.GPDE_RP_UML_INS_MC = &B3.GPDE_RP_UML_INS_MC
   else
      let #B3.GPDE_RP_RIGRSM_AMT = 0
      let #B3.GPDE_RP_U1CTBM_AMT = 0
      let #B3.GPDE_RP_U2CTBM_AMT = 0
      let #B3.GPDE_RP_VW_RVAG_MC = 0 !adj09
      let #B3.GPDE_RP_GRS_INS_MC = 0
      let #B3.GPDE_RP_UML_INS_MC = 0
!adj09- when march...these values should get zeroed
      let #B3.GPDE_RP_GRSSINSEGA  = 0
      let #B3.GPDE_RP_UML_INSOLV  = 0
   end-if
   if $ExistProv = 'N'
      let $Sgn = 'N'
   else
      let $Sgn = 'Y'
   end-if

   ! GUl07-890b10  march print issue helper variables need to go in one field
   ! GPDE_RP_CHAR01: 1=current 2=march 3=both
   ! (recycled unused variable / Field GPDE_RP_CHAR01)
   let $char01 = '0'
   if $PrintForCurrent = 'Y' AND $PrintForMarch='N'
      let $char01 = '1'
   end-if
   if $PrintForCurrent = 'N' AND $PrintForMarch='Y'
      let $char01 = '2'
   end-if
   if $PrintForCurrent = 'Y' AND $PrintForMarch='Y'
      let $char01 = '3'
   end-if

   do InsertResultData
   let #Countr = #Countr + 1
from PS_GPDE_RP_TX03_1 B3
where B3.GPDE_SI_PROV_AV = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_KV = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_PV = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_RV = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_UM = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_AV_M = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_KV_M = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_PV_M = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_RV_M = &B2.GPDE_SI_PROV_MAND or
      B3.GPDE_SI_PROV_UM_M = &B2.GPDE_SI_PROV_MAND
end-select
end-procedure
!****************************************************************





begin-procedure InsertResultData
begin-sql
insert into PS_GPDE_RP_TX03A(EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,RSLT_SEG_NUM,SLICE_END_DT,
CAL_SEQ_NUM,PAY_ENTITY,PRD_END_DT,GPDE_AL_CPAY_ENDDT,GPDE_SI_PROV_MAND,GPDE_RP_SIGRSS_AMT,
GPDE_RP_SIGRS_ANLZ,GPDE_RP_HICNTB_AMT,GPDE_RP_PICNTB_AMT,GPDE_RP_UICNTB_AMT,GPDE_RP_CICNTB_AMT,
GPDE_RP_HIVOL_AMT,GPDE_RP_CIVOL_AMT,GPDE_RP_RIGRSS_AMT,GPDE_RP_U1CNTB_AMT,GPDE_RP_U2CNTB_AMT,
GPDE_RI_PCT1,GPDE_RI_PCT2,GPDE_RP_RIGRSM_AMT,GPDE_RP_U1CTBM_AMT,GPDE_RP_U2CTBM_AMT,
GPDE_RI_PCT1_MC,GPDE_RI_PCT2_MC,GPDE_RP_SIGRSM_AMT,GPDE_RP_HICTBM_AMT,GPDE_RP_PICTBM_AMT,
GPDE_RP_UICTBM_AMT,GPDE_RP_CICTBM_AMT,GPDE_RP_OAPGRS_AMT,GPDE_RP_AZGRS_ANLZ,GPDE_RP_OAPPEN_AMT,
GPDE_RP_OAPGRS_MC,GPDE_RP_OAPPEN_MC,GPDE_RP_SIDAYS,GPDE_RP_AVDAYS,GPDE_RP_KVDAYS,GPDE_RP_PVDAYS,
GPDE_RP_AVDAYS_BON,GPDE_RP_KVDAYS_BON,GPDE_RP_PVDAYS_BON,GPDE_RP_RVDAYS_BON,GPDE_RP_AVGRS_ANLZ,
GPDE_RP_AVGRS_BON,GPDE_RP_AVGRS_MC,GPDE_RP_KVGRS_ANLZ,GPDE_RP_KVGRS_BON,GPDE_RP_KVGRS_MC,
GPDE_RP_PVGRS_ANLZ,GPDE_RP_PVGRS_BON,GPDE_RP_PVGRS_MC,GPDE_RP_RVGRS_ANLZ,GPDE_RP_RVGRS_BON,
GPDE_RP_RVGRS_MC,GPDE_RP_AVLFD_AG,GPDE_RP_AVLFD_AN,GPDE_RP_KVLFD_AG,GPDE_RP_KVLFD_AN,
GPDE_RP_PVLFD_AG,GPDE_RP_PVLFD_AN,GPDE_RP_RVLFD_AG,GPDE_RP_RVLFD_AN,GPDE_RP_KVBON_AG,
GPDE_RP_KVBON_AN,GPDE_RP_AVBON_AG,GPDE_RP_AVBON_AN,GPDE_RP_PVBON_AG,GPDE_RP_PVBON_AN,
GPDE_RP_RVBON_AG,GPDE_RP_RVBON_AN,GPDE_RP_AVAG_MC,GPDE_RP_AVAN_MC,GPDE_RP_KVAG_MC,
GPDE_RP_KVAN_MC,GPDE_RP_PVAG_MC,GPDE_RP_PVAN_MC,GPDE_RP_RVAG_MC,GPDE_RP_RVAN_MC,
GPDE_RP_SIGRUNLM_A,GPDE_RP_SIGRUNLM_B,GPDE_RP_CIVLER_AMT,GPDE_RP_HIVLER_AMT,
GPDE_RC_PRT_SIGN,GPDE_RP_CHAR01,GPDE_RP_CHAR02,GPDE_RP_AZGRS_BON,GPDE_RP_OAPPEN_ANL,
GPDE_RP_OAPPEN_BON,GPDE_RP_AVDAYS_MC,GPDE_RP_KVDAYS_MC,GPDE_RP_PVDAYS_MC,GPDE_RP_RVDAYS_MC,
GPDE_AZ_RP_S03_31,GPDE_AZ_RP_S03_41
,GPDE_RP_KUG_KVCTB,GPDE_RP_KUG_KVGRS,GPDE_RP_KUG_PVCTB
,GPDE_RP_KUG_PVGRS,GPDE_RP_KUG_RVCTB,GPDE_RP_KUG_RVGRS
,GPDE_KU_KUGKKAMT, GPDE_KU_KUGAMT,GPDE_RP_UML_INSOLV,GPDE_RP_GRSSINSEGA,GPDE_RP_GRSSINSLFD
,GPDE_RP_VW_RVLFDAG,GPDE_RP_VW_RVBONAG,GPDE_RP_VW_RVAG_MC
 )
values (&B3.EMPLID,&B3.CAL_RUN_ID,&B3.EMPL_RCD,&B3.GP_PAYGROUP,&B3.CAL_ID,&B3.RSLT_SEG_NUM,
&B3.SLICE_END_DT,#Countr,&B3.PAY_ENTITY,&B3.PRD_END_DT,&B3.GPDE_AL_CPAY_ENDDT
,&B2.GPDE_SI_PROV_MAND,#B3.GPDE_RP_SIGRSS_AMT,#B3.GPDE_RP_SIGRS_ANLZ,#B3.GPDE_RP_HICNTB_AMT
,#B3.GPDE_RP_PICNTB_AMT,#B3.GPDE_RP_UICNTB_AMT,#B3.GPDE_RP_CICNTB_AMT,#B3.GPDE_RP_HIVOL_AMT
,#B3.GPDE_RP_CIVOL_AMT,#B3.GPDE_RP_RIGRSS_AMT,#B3.GPDE_RP_U1CNTB_AMT,#B3.GPDE_RP_U2CNTB_AMT
,#B3.GPDE_RI_PCT1,#B3.GPDE_RI_PCT2,#B3.GPDE_RP_RIGRSM_AMT,#B3.GPDE_RP_U1CTBM_AMT,
#B3.GPDE_RP_U2CTBM_AMT,#B3.GPDE_RI_PCT1_MC,#B3.GPDE_RI_PCT2_MC,#B3.GPDE_RP_SIGRSM_AMT
,#B3.GPDE_RP_HICTBM_AMT,#B3.GPDE_RP_PICTBM_AMT,#B3.GPDE_RP_UICTBM_AMT,#B3.GPDE_RP_CICTBM_AMT
,#B3.GPDE_RP_OAPGRS_AMT,#B3.GPDE_RP_AZGRS_ANLZ,#B3.GPDE_RP_OAPPEN_AMT,#B3.GPDE_RP_OAPGRS_MC
,#B3.GPDE_RP_OAPPEN_MC,#B3.GPDE_RP_SIDAYS,#B3.GPDE_RP_AVDAYS,#B3.GPDE_RP_KVDAYS
,#B3.GPDE_RP_PVDAYS,#B3.GPDE_RP_AVDAYS_BON,#B3.GPDE_RP_KVDAYS_BON,#B3.GPDE_RP_PVDAYS_BON
,#B3.GPDE_RP_RVDAYS_BON,#B3.GPDE_RP_AVGRS_ANLZ,#B3.GPDE_RP_AVGRS_BON,#B3.GPDE_RP_AVGRS_MC
,#B3.GPDE_RP_KVGRS_ANLZ,#B3.GPDE_RP_KVGRS_BON,#B3.GPDE_RP_KVGRS_MC,#B3.GPDE_RP_PVGRS_ANLZ
,#B3.GPDE_RP_PVGRS_BON,#B3.GPDE_RP_PVGRS_MC,#B3.GPDE_RP_RVGRS_ANLZ,#B3.GPDE_RP_RVGRS_BON
,#B3.GPDE_RP_RVGRS_MC,#B3.GPDE_RP_AVLFD_AG,#B3.GPDE_RP_AVLFD_AN,#B3.GPDE_RP_KVLFD_AG
,#B3.GPDE_RP_KVLFD_AN,#B3.GPDE_RP_PVLFD_AG,#B3.GPDE_RP_PVLFD_AN,#B3.GPDE_RP_RVLFD_AG
,#B3.GPDE_RP_RVLFD_AN,#B3.GPDE_RP_KVBON_AG,#B3.GPDE_RP_KVBON_AN,#B3.GPDE_RP_AVBON_AG
,#B3.GPDE_RP_AVBON_AN,#B3.GPDE_RP_PVBON_AG,#B3.GPDE_RP_PVBON_AN,#B3.GPDE_RP_RVBON_AG
,#B3.GPDE_RP_RVBON_AN,#B3.GPDE_RP_AVAG_MC,#B3.GPDE_RP_AVAN_MC,#B3.GPDE_RP_KVAG_MC
,#B3.GPDE_RP_KVAN_MC,#B3.GPDE_RP_PVAG_MC,#B3.GPDE_RP_PVAN_MC,#B3.GPDE_RP_RVAG_MC
,#B3.GPDE_RP_RVAN_MC,#B3.GPDE_RP_SIGRUNLM_A,#B3.GPDE_RP_SIGRUNLM_B
,#B3.GPDE_RP_CIVLER_AMT,#B3.GPDE_RP_HIVLER_AMT,&B3.GPDE_RC_PRT_SIGN,$char01,$Sgn,
#B3.GPDE_RP_AZGRS_BON,#B3.GPDE_RP_OAPPEN_ANL,#B3.GPDE_RP_OAPPEN_BON,#B3.GPDE_RP_AVDAYS_MC,
#B3.GPDE_RP_KVDAYS_MC,#B3.GPDE_RP_PVDAYS_MC,#B3.GPDE_RP_RVDAYS_MC
,#B3.GPDE_AZ_RP_S03_31,#B3.GPDE_AZ_RP_S03_41
,#B3.GPDE_RP_KUG_KVCTB, #B3.GPDE_RP_KUG_KVGRS, #B3.GPDE_RP_KUG_PVCTB
,#B3.GPDE_RP_KUG_PVGRS, #B3.GPDE_RP_KUG_RVCTB, #B3.GPDE_RP_KUG_RVGRS
,#B3.GPDE_KU_KUGKKAMT, #B3.GPDE_KU_KUGAMT,#B3.GPDE_RP_UML_INSOLV
,#B3.GPDE_RP_GRSSINSEGA,#B3.GPDE_RP_GRSSINSLFD,#B3.GPDE_RP_VW_RVLFDAG, #B3.GPDE_RP_VW_RVBONAG
,#B3.GPDE_RP_VW_RVAG_MC
)
end-sql
end-procedure
!**********************************************************************************




begin-procedure Print_comp_LohnKonto_ATZ
let $BegATZDate = ''
let #currLine = 0
let #VZ_Bru_RV_Lfd_sum = 0
let #TZ_Bru_RV_Lfd_sum = 0
let #Untersch_B_Lfd_sum = 0
let #VZ_Bru_RV_EGA_sum = 0
let #TZ_Bru_RV_EGA_sum = 0
let #Untersch_B_EGA_sum = 0
let #Untersch_B_EGA_VJ_sum = 0
let #Aufstockg_sum = 0
let #Aufstockg_Mind_sum = 0
let #Unterch_B_lfd_Frw_sum = 0
let #Untesch_B_EGA_Frw_sum = 0
let #Aufstock_Bru_Frw_sum = 0
let #Untersch_B_EGA_VJ_frw_sum = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #PBDAT.EMPL_RCD_Old           = 0
let $PBDAT.GP_PAYGROUP_Old        = ''
let $PBDAT.CAL_ID_Old             = ''
let $PBDAT.GPDE_AL_CPAY_ENDDT_Old = ''
let $PBDAT.CURRENCY_CD            = ''
let $PBDAT.CURRENCY_CD_Old        = ''
let #Untersch_B_KG_sum = 0
begin-select
PBDAT.EMPLID
PBDAT.CAL_RUN_ID
PBDAT.EMPL_RCD
PBDAT.GP_PAYGROUP
PBDAT.CAL_ID
PBDAT.RSLT_SEG_NUM
PBDAT.CURRENCY_CD
PTCAT.SEG_END_DT
PTCAT.PRD_END_DT
PTCAT.GPDE_AL_CPAY_ENDDT
PTCAT.GPDE_AZ_RP_003_21
PTCAT.GPDE_AZ_RP_003_11
PTCAT.GPDE_AZ_RP_003_31
PTCAT.GPDE_AZ_RP_003_22
PTCAT.GPDE_AZ_RP_003_12
PTCAT.GPDE_AZ_RP_003_32
PTCAT.GPDE_AZ_RP_003_36
PTCAT.GPDE_AZ_RP_001_63
PTCAT.GPDE_AZ_RP_002_68
PTCAT.GPDE_AZ_RP_013_31
PTCAT.GPDE_AZ_RP_023_31
PTCAT.GPDE_AZ_RP_013_32
PTCAT.GPDE_AZ_RP_023_32
PTCAT.GPDE_AZ_RP_011_63
PTCAT.GPDE_AZ_RP_012_68
PTCAT.GPDE_AZ_RP_021_63
PTCAT.GPDE_AZ_RP_022_68
PTCAT.GPDE_AZ_RP_013_36
PTCAT.GPDE_AZ_RP_023_36
PTCAT.BEGIN_DT
PTCAT.SLICE_END_DT
PTCAT.GPDE_RC_PRT_SIGN
PTCAT.GPDE_AZ_RP_S03_31
  let $NeuAltString = ''
  let $BegATZD = &PTCAT.BEGIN_DT
  do Format-DateTime($BegATZD, $BegATZDate, {DEFDATE}, '', '')

  let $PBDAT.SEG_END_DT = &PTCAT.SEG_END_DT
  let $PBDAT.CURRENCY_CD = &PBDAT.CURRENCY_CD
  if #zaehler > 0 and $PBDAT.CURRENCY_CD <> $PBDAT.CURRENCY_CD_Old
     do Print_Sums_Steuer-AT
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if
  let #VZ_Bru_RV_Lfd         = &PTCAT.GPDE_AZ_RP_003_21
  let #TZ_Bru_RV_Lfd         = &PTCAT.GPDE_AZ_RP_003_11
  let #Untersch_B_Lfd        = &PTCAT.GPDE_AZ_RP_003_31
  let #VZ_Bru_RV_EGA         = &PTCAT.GPDE_AZ_RP_003_22
  let #TZ_Bru_RV_EGA         = &PTCAT.GPDE_AZ_RP_003_12
  let #Untersch_B_EGA        = &PTCAT.GPDE_AZ_RP_003_32
  let #Untersch_B_EGA_VJ     = &PTCAT.GPDE_AZ_RP_003_36
  let #Aufstockg             = &PTCAT.GPDE_AZ_RP_001_63
  let #Aufstockg_Mind        = &PTCAT.GPDE_AZ_RP_002_68
  let #Unterch_B_lfd_Frw     = &PTCAT.GPDE_AZ_RP_013_31 + &PTCAT.GPDE_AZ_RP_023_31
  let #Untesch_B_EGA_Frw     = &PTCAT.GPDE_AZ_RP_013_32 + &PTCAT.GPDE_AZ_RP_023_32
  let #Aufstock_Bru_Frw      = &PTCAT.GPDE_AZ_RP_011_63 + &PTCAT.GPDE_AZ_RP_012_68 +
                               &PTCAT.GPDE_AZ_RP_021_63 + &PTCAT.GPDE_AZ_RP_022_68
  let #Untersch_B_EGA_VJ_frw = &PTCAT.GPDE_AZ_RP_013_36 + &PTCAT.GPDE_AZ_RP_023_36
  let #Untersch_B_KG = &PTCAT.GPDE_AZ_RP_S03_31
  evaluate &PTCAT.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $PRD_END_DT = &PTCAT.PRD_END_DT
  let $PTCAT.GPDE_AL_CPAY_ENDDT = &PTCAT.GPDE_AL_CPAY_ENDDT
  let $Actual_Currency_save = $PBDAT.CURRENCY_CD
  let $Slice_End_Dt = &PTCAT.SLICE_END_DT

  do Print-EE-Data-Abr-AT

   let $Actual_Currency_Old = $Actual_Currency_save
   let #PBDAT.EMPL_RCD_Old = &PBDAT.EMPL_RCD
   let $PBDAT.GP_PAYGROUP_Old = &PBDAT.GP_PAYGROUP
   let $PBDAT.CAL_ID_Old = &PBDAT.CAL_ID
   let $PBDAT.GPDE_AL_CPAY_ENDDT_Old = &PTCAT.GPDE_AL_CPAY_ENDDT
   let $PBDAT.CURRENCY_CD_Old = $PBDAT.CURRENCY_CD
   let #zaehler =  #zaehler + 1
FROM PS_GPDE_RP_0001_VW PBDAT,PS_GPDE_RP_TX03_3 PTCAT
where PBDAT.EMPLID = $RP1.EMPLID
AND PBDAT.EMPL_RCD = &RP1.EMPL_RCD
AND PBDAT.EMPLID = PTCAT.EMPLID
AND PBDAT.EMPL_RCD = PTCAT.EMPL_RCD
AND PBDAT.CAL_RUN_ID = PTCAT.CAL_RUN_ID
AND PBDAT.GP_PAYGROUP = PTCAT.GP_PAYGROUP
AND PBDAT.CAL_ID = PTCAT.CAL_ID
AND PBDAT.RSLT_SEG_NUM = PTCAT.RSLT_SEG_NUM
AND PBDAT.SEG_END_DT = PTCAT.SEG_END_DT
AND PBDAT.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_AT]
[$orderAT]
end-select
if #zaehler > 0
   do Print_Sums_Steuer-AT
end-if
end-procedure
!**********************************************************************************




begin-procedure Print-EE-Data-Abr-AT
    let #mm = 4 + #current-line
    if #mm > 55
     new-page
    end-if
    let #currLineV = -18 + #current-line
    let #currLineN = -17 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
    if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
        let #currLineV = 1 + #currLineV
        let #currLineN = 1 + #currLineN
    end-if

    ! paint the frames
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,14,2)   vert-line 1
    graphic (#currLineV,29,2)  vert-line 1
    graphic (#currLineV,41,2)  vert-line 1
    graphic (#currLineV,53,2)  vert-line 1
    graphic (#currLineV,65,2)  vert-line 1
    graphic (#currLineV,77,2)  vert-line 1
    graphic (#currLineV,89,2)  vert-line 1
    graphic (#currLineV,101,2)  vert-line 1
    graphic (#currLineV,113,2) vert-line 1
    graphic (#currLineV,125,2) vert-line 1
    graphic (#currLineV,137,2) vert-line 1
    graphic (#currLineV,149,2) vert-line 1
    graphic (#currLineV,161,2) vert-line 1
    graphic (#currLineV,173,2) vert-line 1

    ! formatting numbers
    do Format-Number(#VZ_Bru_RV_Lfd,$VZ_Bru_RV_Lfd,'B99,999.99')
    do Format-Number(#TZ_Bru_RV_Lfd,$TZ_Bru_RV_Lfd,'B99,999.99')
    do Format-Number(#Untersch_B_Lfd,$Untersch_B_Lfd,'B99,999.99')
    do Format-Number(#VZ_Bru_RV_EGA,$VZ_Bru_RV_EGA,'B99,999.99')
    do Format-Number(#TZ_Bru_RV_EGA,$TZ_Bru_RV_EGA,'B99,999.99')
    do Format-Number(#Untersch_B_EGA,$Untersch_B_EGA,'B99,999.99')
    do Format-Number(#Untersch_B_EGA_VJ,$Untersch_B_EGA_VJ,'B99,999.99')
    do Format-Number(#Aufstockg,$Aufstockg,'B99,999.99')
    do Format-Number(#Aufstockg_Mind,$Aufstockg_Mind,'B99,999.99')
    do Format-Number(#Unterch_B_lfd_Frw,$Unterch_B_lfd_Frw,'B99,999.99')
    do Format-Number(#Unterch_B_EGA_Frw,$Unterch_B_EGA_Frw,'B99,999.99')
    do Format-Number(#Aufstock_Bru_Frw,$Aufstock_Bru_Frw,'B99,999.99')
    do Format-Number(#Untersch_B_EGA_VJ_frw,$Untersch_B_EGA_VJ_frw,'B99,999.99')
    do Format-Number(#Untersch_B_KG,$Untersch_B_KG,'B99,999.99')
    do CheckMinusNull_AT_A

    let #TempCol = 1 + #currLineV
    alter-printer
       font = 4
       point-size = 13
    let #Date_Type1 = {DateType}
    do ConvertToComponents($PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
    do ConvertToComponents( $Slice_End_Dt,$yyRpt,$mmRpt,$ddRpt)
    evaluate #Date_Type1
      when = 1
        let $RprtDate = $ddRpt || '{PTDateDelim}' || $mmRpt
        break
      when-other
        let $RprtDate = $mmRpt || '{PTDateDelim}' || $ddRpt
        break
    end-evaluate

    ! start printing AZ data
    print $mmPrd         (#TempCol,10) bold
    print $NeuAltString  (#TempCol,22)
    alter-printer
       font = 3
       point-size = 14

    ! wdu05-881b8   new AZ does not print all values
    if ( $AZ2004 = 'Y' )
        !print $VZ_Bru_RV_Lfd (#TempCol,29)
        print $TZ_Bru_RV_Lfd (#TempCol,41)
        print $Untersch_B_Lfd (#TempCol,53)
        !print $VZ_Bru_RV_EGA (#TempCol,65)
        !print $TZ_Bru_RV_EGA (#TempCol,77)
        !print $Untersch_B_EGA (#TempCol,89)
        !print $Untersch_B_EGA_VJ (#TempCol,101)
        print $Aufstockg (#TempCol,113)
        !print $Aufstockg_Mind (#TempCol,125)
        print $Unterch_B_lfd_Frw (#TempCol,137)
        !print $Untesch_B_EGA_Frw (#TempCol,149)
        print $Aufstock_Bru_Frw (#TempCol,161)
        !print $Untersch_B_EGA_VJ_frw (#TempCol,173)
    else
        print $VZ_Bru_RV_Lfd (#TempCol,29)
        print $TZ_Bru_RV_Lfd (#TempCol,41)
        print $Untersch_B_Lfd (#TempCol,53)
        print $VZ_Bru_RV_EGA (#TempCol,65)
        print $TZ_Bru_RV_EGA (#TempCol,77)
        print $Untersch_B_EGA (#TempCol,89)
        print $Untersch_B_EGA_VJ (#TempCol,101)
        print $Aufstockg (#TempCol,113)
        print $Aufstockg_Mind (#TempCol,125)
        print $Unterch_B_lfd_Frw (#TempCol,137)
        print $Untesch_B_EGA_Frw (#TempCol,149)
        print $Aufstock_Bru_Frw (#TempCol,161)
        print $Untersch_B_EGA_VJ_frw (#TempCol,173)
    end-if

    ! UB sick pay in a separate line
    let #TempCol = 1 + #TempCol
    print $Untersch_B_KG (#TempCol,53)
    alter-printer
       font = 4
       point-size = 13
    print $RprtDate (#TempCol,5)
    alter-printer
       font = 4
       point-size = 13
    let #Date_Type1 = {DateType}
       do ConvertToComponents($PTCAT.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
       evaluate #Date_Type1
       when = 2
          let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
          break
       when-other
          let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
          break
       end-evaluate
       let $RetroStr = $RetroDate
    if $NeuAltString <> ''
       print $RetroStr (#TempCol,17)
    end-if
    position (+1,1)


    let $PRD_END_DT_Old = $PRD_END_DT
    let $RP1.EMPLID_Old = $RP1.EMPLID

    ! add up AZ amounts for sum-line
    ! wdu05-881b8   new AZ does not print all values, so do not sum all values
    if  ( $AZ2004 = 'Y' )
        !let #VZ_Bru_RV_Lfd_sum = #VZ_Bru_RV_Lfd_sum + #VZ_Bru_RV_Lfd
        let #TZ_Bru_RV_Lfd_sum = #TZ_Bru_RV_Lfd_sum + #TZ_Bru_RV_Lfd
        let #Untersch_B_Lfd_sum = #Untersch_B_Lfd_sum + #Untersch_B_Lfd
        !let #VZ_Bru_RV_EGA_sum = #VZ_Bru_RV_EGA_sum + #VZ_Bru_RV_EGA
        !let #TZ_Bru_RV_EGA_sum = #TZ_Bru_RV_EGA_sum + #TZ_Bru_RV_EGA
        !let #Untersch_B_EGA_sum = #Untersch_B_EGA_sum + #Untersch_B_EGA
        !let #Untersch_B_EGA_VJ_sum = #Untersch_B_EGA_VJ_sum + #Untersch_B_EGA_VJ
        let #Aufstockg_sum = #Aufstockg_sum + #Aufstockg
        let #Aufstockg_Mind_sum = #Aufstockg_Mind_sum + #Aufstockg_Mind
        let #Unterch_B_lfd_Frw_sum = #Unterch_B_lfd_Frw_sum + #Unterch_B_lfd_Frw
        !let #Untesch_B_EGA_Frw_sum = #Untesch_B_EGA_Frw_sum + #Untesch_B_EGA_Frw
        let #Aufstock_Bru_Frw_sum = #Aufstock_Bru_Frw_sum + #Aufstock_Bru_Frw
        !let #Untersch_B_EGA_VJ_frw_sum = #Untersch_B_EGA_VJ_frw_sum + #Untersch_B_EGA_VJ_frw
        let #Untersch_B_KG_sum = #Untersch_B_KG_sum + #Untersch_B_KG
    else
        let #VZ_Bru_RV_Lfd_sum = #VZ_Bru_RV_Lfd_sum + #VZ_Bru_RV_Lfd
        let #TZ_Bru_RV_Lfd_sum = #TZ_Bru_RV_Lfd_sum + #TZ_Bru_RV_Lfd
        let #Untersch_B_Lfd_sum = #Untersch_B_Lfd_sum + #Untersch_B_Lfd
        let #VZ_Bru_RV_EGA_sum = #VZ_Bru_RV_EGA_sum + #VZ_Bru_RV_EGA
        let #TZ_Bru_RV_EGA_sum = #TZ_Bru_RV_EGA_sum + #TZ_Bru_RV_EGA
        let #Untersch_B_EGA_sum = #Untersch_B_EGA_sum + #Untersch_B_EGA
        let #Untersch_B_EGA_VJ_sum = #Untersch_B_EGA_VJ_sum + #Untersch_B_EGA_VJ
        let #Aufstockg_sum = #Aufstockg_sum + #Aufstockg
        let #Aufstockg_Mind_sum = #Aufstockg_Mind_sum + #Aufstockg_Mind
        let #Unterch_B_lfd_Frw_sum = #Unterch_B_lfd_Frw_sum + #Unterch_B_lfd_Frw
        let #Untesch_B_EGA_Frw_sum = #Untesch_B_EGA_Frw_sum + #Untesch_B_EGA_Frw
        let #Aufstock_Bru_Frw_sum = #Aufstock_Bru_Frw_sum + #Aufstock_Bru_Frw
        let #Untersch_B_EGA_VJ_frw_sum = #Untersch_B_EGA_VJ_frw_sum + #Untersch_B_EGA_VJ_frw
        let #Untersch_B_KG_sum = #Untersch_B_KG_sum + #Untersch_B_KG
    end-if

end-procedure



!*************************************************************************
begin-procedure Print_Sums_Steuer-AT
let #mm = 4 + #current-line
if #mm > 55
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if
     let #currLineV = -17 + #current-line
     let #currLineN = -16 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
    graphic (#currLineN,1,184) box 2 1
          graphic (#currLineV,14,2)   vert-line 1
          graphic (#currLineV,29,2)  vert-line 1
          graphic (#currLineV,41,2)  vert-line 1
          graphic (#currLineV,53,2)  vert-line 1
          graphic (#currLineV,65,2)  vert-line 1
          graphic (#currLineV,77,2)  vert-line 1
          graphic (#currLineV,89,2)  vert-line 1
          graphic (#currLineV,101,2)  vert-line 1
          graphic (#currLineV,113,2) vert-line 1
          graphic (#currLineV,125,2) vert-line 1
          graphic (#currLineV,137,2) vert-line 1
          graphic (#currLineV,149,2) vert-line 1
          graphic (#currLineV,161,2) vert-line 1
          graphic (#currLineV,173,2) vert-line 1
do Format-Number(#VZ_Bru_RV_Lfd_sum,$VZ_Bru_RV_Lfd_sum,'B99,999.99')
do Format-Number(#TZ_Bru_RV_Lfd_sum,$TZ_Bru_RV_Lfd_sum,'B99,999.99')
do Format-Number(#Untersch_B_Lfd_sum,$Untersch_B_Lfd_sum,'B99,999.99')
do Format-Number(#VZ_Bru_RV_EGA_sum,$VZ_Bru_RV_EGA_sum,'B99,999.99')
do Format-Number(#TZ_Bru_RV_EGA_sum,$TZ_Bru_RV_EGA_sum,'B99,999.99')
do Format-Number(#Untersch_B_EGA_sum,$Untersch_B_EGA_sum,'B99,999.99')
do Format-Number(#Untersch_B_EGA_VJ_sum,$Untersch_B_EGA_VJ_sum,'B99,999.99')
do Format-Number(#Aufstockg_sum,$Aufstockg_sum,'B99,999.99')
do Format-Number(#Aufstockg_Mind_sum,$Aufstockg_Mind_sum,'B99,999.99')
do Format-Number(#Unterch_B_lfd_Frw_sum,$Unterch_B_lfd_Frw_sum,'B99,999.99')
do Format-Number(#Unterch_B_EGA_Frw_sum,$Unterch_B_EGA_Frw_sum,'B99,999.99')
do Format-Number(#Aufstock_Bru_Frw_sum,$Aufstock_Bru_Frw_sum,'B99,999.99')
do Format-Number(#Untersch_B_EGA_VJ_frw_sum,$Untersch_B_EGA_VJ_frw_sum,'B99,999.99')
do Format-Number(#Untersch_B_KG_sum,$Untersch_B_KG_sum,'B99,999.99')
do CheckMinusNull_AT_B
alter-printer
   font = 3
   point-size = 14
let #TempCol = 1 + #currLineV
print $VZ_Bru_RV_Lfd_sum (#TempCol,29) bold
print $TZ_Bru_RV_Lfd_sum (#TempCol,41)  bold
print $Untersch_B_Lfd_sum (#TempCol,53) bold
print $VZ_Bru_RV_EGA_sum (#TempCol,65)  bold
print $TZ_Bru_RV_EGA_sum (#TempCol,77)  bold
print $Untersch_B_EGA_sum (#TempCol,89) bold
print $Untersch_B_EGA_VJ_sum (#TempCol,101) bold
print $Aufstockg_sum (#TempCol,113)        bold
print $Aufstockg_Mind_sum (#TempCol,125)   bold
print $Unterch_B_lfd_Frw_sum (#TempCol,137)  bold
print $Untesch_B_EGA_Frw_sum (#TempCol,149)  bold
print $Aufstock_Bru_Frw_sum (#TempCol,161)   bold
print $Untersch_B_EGA_VJ_frw_sum (#TempCol,173)  bold
let #TempCol = 1 + #TempCol
print $Untersch_B_KG_sum (#TempCol,53) bold
alter-printer
   font = 4
   point-size = 13
print 'Summe'  (#TempCol,2)         bold
alter-printer
   font = 4
   point-size = 13
let #VZ_Bru_RV_Lfd_sum = 0
let #TZ_Bru_RV_Lfd_sum = 0
let #Untersch_B_Lfd_sum = 0
let #VZ_Bru_RV_EGA_sum = 0
let #TZ_Bru_RV_EGA_sum = 0
let #Untersch_B_EGA_sum = 0
let #Untersch_B_EGA_VJ_sum = 0
let #Aufstockg_sum = 0
let #Aufstockg_Mind_sum = 0
let #Unterch_B_lfd_Frw_sum = 0
let #Untesch_B_EGA_Frw_sum = 0
let #Aufstock_Bru_Frw_sum = 0
let #Untersch_B_EGA_VJ_frw_sum = 0
let #Untersch_B_KG_sum = 0
new-page
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_AT_A
   if rtrim(ltrim($VZ_Bru_RV_Lfd_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($VZ_Bru_RV_Lfd, ' '), ' ') = $PlusNull
      let $VZ_Bru_RV_Lfd = ' '
   end-if
   if rtrim(ltrim($TZ_Bru_RV_Lfd, ' '), ' ') = $MinusNull or
      rtrim(ltrim($TZ_Bru_RV_Lfd, ' '), ' ') = $PlusNull
      let $TZ_Bru_RV_Lfd = ' '
   end-if
   if rtrim(ltrim($Untersch_B_Lfd, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_Lfd, ' '), ' ') = $PlusNull
      let $Untersch_B_Lfd = ' '
   end-if
   if rtrim(ltrim($VZ_Bru_RV_EGA, ' '), ' ') = $MinusNull or
      rtrim(ltrim($VZ_Bru_RV_EGA, ' '), ' ') = $PlusNull
      let $VZ_Bru_RV_EGA = ' '
   end-if
   if rtrim(ltrim($TZ_Bru_RV_EGA, ' '), ' ') = $MinusNull or
      rtrim(ltrim($TZ_Bru_RV_EGA, ' '), ' ') = $PlusNull
      let $TZ_Bru_RV_EGA = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA_VJ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA_VJ, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA_VJ = ' '
   end-if
   if rtrim(ltrim($Aufstockg, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstockg, ' '), ' ') = $PlusNull
      let $Aufstockg = ' '
   end-if
   if rtrim(ltrim($Aufstockg_Mind, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstockg_Mind, ' '), ' ') = $PlusNull
      let $Aufstockg_Mind = ' '
   end-if
   if rtrim(ltrim($Unterch_B_lfd_Frw, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Unterch_B_lfd_Frw, ' '), ' ') = $PlusNull
      let $Unterch_B_lfd_Frw = ' '
   end-if
   if rtrim(ltrim($Untesch_B_EGA_Frw, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untesch_B_EGA_Frw, ' '), ' ') = $PlusNull
      let $Untesch_B_EGA_Frw = ' '
   end-if
   if rtrim(ltrim($Aufstock_Bru_Frw, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstock_Bru_Frw, ' '), ' ') = $PlusNull
      let $Aufstock_Bru_Frw = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA_VJ_frw, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA_VJ_frw, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA_VJ_frw = ' '
   end-if
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_AT_B
   if rtrim(ltrim($VZ_Bru_RV_Lfd_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($VZ_Bru_RV_Lfd_sum, ' '), ' ') = $PlusNull
      let $VZ_Bru_RV_Lfd_sum = ' '
   end-if
   if rtrim(ltrim($TZ_Bru_RV_Lfd_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($TZ_Bru_RV_Lfd_sum, ' '), ' ') = $PlusNull
      let $TZ_Bru_RV_Lfd_sum = ' '
   end-if
   if rtrim(ltrim($Untersch_B_Lfd_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_Lfd_sum, ' '), ' ') = $PlusNull
      let $Untersch_B_Lfd_sum = ' '
   end-if
   if rtrim(ltrim($VZ_Bru_RV_EGA_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($VZ_Bru_RV_EGA_sum, ' '), ' ') = $PlusNull
      let $VZ_Bru_RV_EGA_sum = ' '
   end-if
   if rtrim(ltrim($TZ_Bru_RV_EGA_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($TZ_Bru_RV_EGA_sum, ' '), ' ') = $PlusNull
      let $TZ_Bru_RV_EGA_sum = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA_sum, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA_sum = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA_VJ_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA_VJ_sum, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA_VJ_sum = ' '
   end-if
   if rtrim(ltrim($Aufstockg_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstockg_sum, ' '), ' ') = $PlusNull
      let $Aufstockg_sum = ' '
   end-if
   if rtrim(ltrim($Aufstockg_Mind_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstockg_Mind_sum, ' '), ' ') = $PlusNull
      let $Aufstockg_Mind_sum = ' '
   end-if
   if rtrim(ltrim($Unterch_B_lfd_Frw_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Unterch_B_lfd_Frw_sum, ' '), ' ') = $PlusNull
      let $Unterch_B_lfd_Frw_sum = ' '
   end-if
   if rtrim(ltrim($Untesch_B_EGA_Frw_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untesch_B_EGA_Frw_sum, ' '), ' ') = $PlusNull
      let $Untesch_B_EGA_Frw_sum = ' '
   end-if
   if rtrim(ltrim($Aufstock_Bru_Frw_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Aufstock_Bru_Frw_sum, ' '), ' ') = $PlusNull
      let $Aufstock_Bru_Frw_sum = ' '
   end-if
   if rtrim(ltrim($Untersch_B_EGA_VJ_frw_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Untersch_B_EGA_VJ_frw_sum, ' '), ' ') = $PlusNull
      let $Untersch_B_EGA_VJ_frw_sum = ' '
   end-if
end-procedure



!****************************************************************************
begin-procedure Get-Employee-Report
 let $first-one  = 'Y'
 let $LAST_Emplid = ' '
 let #Cnt1 = 0
begin-SELECT DISTINCT
PBD.EMPLID
PBD.EMPL_RCD
PBD.PAY_ENTITY
PBD.BIRTHDATE
! we get a new set of pages for each hire ==> wrong!
! that is why we remove hire-date here
! --PBD.HIRE_DT
    if $first-one = 'Y'
       let $first-one = 'N'
    else
       ! just does a new page when page is not the first page
       do New_Employee_Page
    end-if

! --    let $Hiredt   = &PBD.HIRE_DT
! --    let $Hiredt_t = &PBD.HIRE_DT
! --    let $Termdt   = $Ctl_End_Dt
    let $Emplid   = &PBD.EMPLID
    let #Empl_Rcd_Nbr = &PBD.EMPL_RCD
    let $Pay_Entity   = &PBD.PAY_ENTITY

    !
    ! get Betriebsnummer of employer by emplid
    !
    do GetEmployerNumberByEmplid($Emplid, #Empl_Rcd_Nbr, $Ctl_End_Dt, $GPDE_DO_BTNR)

    ! department data at year-end for the heading
    do GetYearendDepartmentDescr($Emplid, #Empl_Rcd_Nbr, $Ctl_End_Dt, $DeptId,$DeptDescr)

    !
    ! get values for name etc.
    !
    do Get-Names-Lohnkonto($Emplid,$Name_Type,$Emp_Name,$NAME_TITLE,$LastName,$FirstName,
                $NAME_PREFIX,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$BIRTHCOUNTRY,
                $BIRTHSTATE,$BIRTHPLACE)
    do Get-Names-Lohnkonto($Emplid,'MDN',$Emp_Name_mdn,$NAME_TITLE_mdn,$LastName_mdn,$FirstName_mdn,
                $NAME_PREFIX_mdn,$NAME_ROYAL_PREFIX_mdn,$NAME_ROYAL_SUFFIX_mdn,$BIRTHCOUNTRY_mdn,
                $BIRTHSTATE_mdn,$BIRTHPLACE_mdn)
    if $Emp_Name = ' '
        show 'Could not find a name to print for : ' $Emplid
    end-if
    do Get-Address ($Emplid,$Addr_Type,$Address,$Address2,
       $Postal,$City,$State,$Country,$EuroZipCity)
    let $PLZ_Ort = $Postal || cond(rtrim($Postal,' ') <> '', ' ', '') || $City
    if rtrim($Address,' ') = ''
       let $Address = $Address2
    end-if
    let $VorsZusTit = rtrim($NAME_ROYAL_PREFIX,' ') || cond(rtrim($NAME_ROYAL_PREFIX,' ') <> '', ' ', '') ||
          $NAME_ROYAL_SUFFIX || cond(rtrim($NAME_ROYAL_SUFFIX,' ') <> '', ' ', '') || $NAME_TITLE
    let $Emp_N = $FirstName || cond(rtrim($FirstName,' ') <> '', ' ', '') || $LastName
    let $Emp_Name = $VorsZusTit || cond(rtrim($NAME_ROYAL_SUFFIX,' ') <> '', ' ', '') || $Emp_N
    !end of name-stuff

    !
! --    if $EmplId = $LAST_Emplid
! --       let $Termdt = $BAK_Hiredt
! --       ! subtract one day from $Termdt and store again as $Termdt
! --      do MakeTermDtPreviousDay
! --    end-if
! --    let $LAST_Emplid = $Emplid
! --    let $BAK_Hiredt = $Hiredt
! --    do MakeHireTermDateCriteria

    !
    ! prepare value for Hiredate in status page: $Hiredt_HD
    !
! --    do Format-DateTime (&PBD.BIRTHDATE, $Birthdt, {DEFDATE},'','')
! --    do Format-DateTime (&PBD.HIRE_DT,$Hiredt_HD, {DEFDATE}, '', '')

    !
    ! get the termination date belonging to hire=$Hiredt_t, returns: $TERM_DT
    ! (note: the value may be null!)
! --    do GetMatchingTerminationDate
! --    if rtrim($TERM_DT,' ') <> ''
! --        do Format-DateTime ($TERM_DT,$Termdt_HD, {DEFDATE}, '', '')
! --    else
! --        let $TERM_DT = ''
! --    end-if
    !
    !
    if  $Ctl_PayEntity = ''
       let $Ctl_PayEntity = $Pay_Entity
       do Get-PayEntity-Address
    end-if

    ! logical page setting to control the headers
    ! '0': regular page,   '5':DEUEV-Messages (no month-print)
    let $SeitenNr = '0'
! -- display 'body-1 Seitennr'
! -- display $SeitenNr


    do Pay-Account-Page1
    do PrintVortrag
! -- display 'vor PIN-INFO'
    do Get-Pin-Info
! -- display 'nach PIN-INFO'

    ! we want the messages of the report type 1, no month headings
    ! war hier: let $SeitenNr = '5', jetzt in appendPrintMeldungen

    do AppendPrintMeldungen

    do init-sum
    do Init-Monthly-sum
FROM PS_GPDE_RP_0001_VW PBD,PS_GPDE_RP_TX03 PAC
WHERE PBD.EMPLID        = PAC.EMPLID  AND   PBD.CAL_RUN_ID    = PAC.CAL_RUN_ID
AND   PBD.EMPL_RCD      = PAC.EMPL_RCD AND   PBD.GP_PAYGROUP   = PAC.GP_PAYGROUP
AND   PBD.CAL_ID        = PAC.CAL_ID  AND   PBD.RSLT_SEG_NUM  = PAC.RSLT_SEG_NUM
ORDER BY PBD.EMPLID,PBD.EMPL_RCD,PBD.PAY_ENTITY
!,PBD.HIRE_DT DESC
end-SELECT
end-procedure




!**********************************************************************************
begin-procedure AppendPrintMeldungen
! create helper vars to use the procedures from report form 1
!
 if rtrim($Ctl_Year,' ') <> ''
    !
    let $BegMonthStr = $Ctl_Year || '0101000000'
    do Format-DateTime($BegMonthStr,$BegYearAct,{DEFCMP},'','native')
    do Format-DateTime($BegYearAct,$BegYearActCmp,{DEFCMP},'','')
    do Format-DateTime($Ctl_Curr_Pay_End_DT,$CtlPayEnd_DTCmp,{DEFCMP},'','')
    let $EndMonthStr = $Ctl_Year || '1231000000'
    do Format-DateTime($EndMonthStr,$EndYearAct,{DEFCMP},'','native')
    do Format-DateTime($EndYearAct,$EndYearActCmp,{DEFCMP},'','')
 else
    let $BegYearActCmp = ''
    let $CtlPayEnd_DTCmp = ''
 end-if

   ! various variables
   let $march = 'N'
   let $Korr = 'N'
   !let $SeitenNr = '5'
   let $PRD_END_DT_Old = ''
   ! wdu04b4: unused var: let $RprtDate_Old = ''
   let $ExistedDatMeld = 'N'


!    let $SeitenNr = '5'
!    display 'body-2/meldungen Seitennr=>auf 5'
!    display $SeitenNr

    ! we need new page, or the printed lines will be overprinted
    new-page
    ! reuse procedure
    do Print_comp_LohnKonto_Meldungen

end-procedure


!**********************************************
begin-procedure Get-Pin-Info
!
!we call the print routine in this select for each PIN_NUM that we have
!in GPDE_RP_TX03 and GPDE_BL_PRINT
!
Begin-Select distinct
A.PIN_NUM
B.GPDE_BL_PR_GROUP
B.GPDE_BL_PR_ORDER
B.GPDE_BL_PR_BASE               &B.GPDE_BL_PR_BASE
A.PIN_NM                        &A.PIN_NM
A.ACM_PRD_OPTN                  &A.ACM_PRD_OPTN
A.DESCR                         &J.DESCR
    let $GPDE_BL_PR_BASE = &B.GPDE_BL_PR_BASE
    let $PIN_NM = RTRIM(&A.PIN_NM, ' ')
    let $YTD_AMT_IND = &A.ACM_PRD_OPTN
    let  #Main_Pin=&A.PIN_NUM
    let $Descr = substr(&J.DESCR,1,25)
    do Get-Balance-Info
    if ($Norm-Bal = 'Y'  or  $Retro = 'Y')
      do Print-Blank-Line
    end-if
FROM PS_GPDE_RP_TX03 A , PS_GPDE_BL_PRINT B
WHERE A.PIN_NUM=B.PIN_NUM AND   B.GPDE_RC_REPORTNAME= $Ctl_Print
!
!2004Bundle3: we only want to see the employee's pins, when amount existent
AND A.EMPLID=$Emplid
AND A.EMPL_RCD=#Empl_Rcd_Nbr
!
AND ( A.CALC_RSLT_VAL<>0 or A.UNIT_RSLT_VAL <>0 )
ORDER BY B.GPDE_BL_PR_GROUP ,B.GPDE_BL_PR_ORDER,B.GPDE_BL_PR_BASE,A.PIN_NM,A.ACM_PRD_OPTN,A.DESCR
End-Select
end-procedure





begin-procedure Get-Balance-Info
!2004Bundle3: extracted the main select part of original: Get-Balance-Info
!to a different procedure because we need to call it for STORNO and ORIGINAL
! now this is a control-procedure which calls the renamed originals
!
!   let $DescrWasPrinted = 'N'

! print the original calculated period (no retro)
   !first print the original rows
   let $StornoId = 'OR'

   !Get-Curr-Balance-Info calls also print-sum which also resets the month-sums
   do Get-Curr-Balance-Info
   if $Norm-Bal = 'N'
       ! when payment originally came from retro, then we need to print descr
       ! on an extra line here
       position (+1,0)
       Print $Descr       (0,{col0}) !WRAP 25 1
       Print '(Nur aus Rueckrechnung)' (,+3)
   end-if

   !then print the STORNO rows
   let $StornoId = 'ST'
   let $Descr = 'Storno'
   do Get-Curr-Balance-Info


! now look at the retro rows
   do Get-Balance-Retro-Info

end-procedure







!****************************************
begin-procedure Get-Curr-Balance-Info
!2004Bundle3: extracted the main select part of original: Get-Balance-Info
!to a different procedure because we need to call it for STORNO and ORIGINAL
!
let $Retro = 'N'
let $Norm-Bal = 'N'

! for each PRD_END_DT we sum the CALC_RSLT_VAL to exactly one value
! the value is then summed in monthly variables
! when the select has finished, the monthly variables are printed in one line
!
! the print is done only for the current period, retro procedure is called at the end
begin-SELECT
SUM(J.CALC_RSLT_VAL)          &GPDE_BL_AMT = NUMBER
SUM(J.BASE_RSLT_VAL)          &GPDE_BASE_AMT = NUMBER
J.PRD_END_DT                  &PRD_END_DT2
K.GPDE_AL_SIGNVALUE           &K.GPDE_AL_SIGNVALUE
K.GPDE_BL_PR_SUM              &K.GPDE_BL_PR_SUM
  let $Print_Sum = &K.GPDE_BL_PR_SUM
  let $Norm-Bal = 'Y'
  if $GPDE_BL_PR_BASE = 'Y'
     let #Bal_Amount_T = &GPDE_BASE_AMT
  else
     let #Bal_Amount_T = &GPDE_BL_AMT * &K.GPDE_AL_SIGNVALUE
  end-if
  let $PRD_END_DT = &PRD_END_DT2
  do ConvertToComponents(&PRD_END_DT2,$yy,$mm,$dd)
  evaluate $mm
  when = '01'
     let #jan = #Bal_Amount_T
     let #jan-sam =  #Bal_Amount_T
     ! as we use this procedure also for storno we need to always add up the values (jan-sum)
     let #jan-sum = #jan-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '02'
     let #feb = #Bal_Amount_T
     let #feb-sam =  #Bal_Amount_T
     let #feb-sum =  #feb-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '03'
     let #mar = #Bal_Amount_T
     let #mar-sam =  #Bal_Amount_T
     let #mar-sum =  #mar-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '04'
     let #apr = #Bal_Amount_T
     let #apr-sam =  #Bal_Amount_T
     let #apr-sum = #apr-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '05'
     let #may = #Bal_Amount_T
     let #may-sam =  #Bal_Amount_T
     let #may-sum = #may-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '06'
     let #jun = #Bal_Amount_T
     let #jun-sam =  #Bal_Amount_T
     let #jun-sum =  #jun-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '07'
     let #jul = #Bal_Amount_T
     let #jul-sam = #Bal_Amount_T
     let #jul-sum = #jul-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '08'
     let #aug = #Bal_Amount_T
     let #aug-sam = #Bal_Amount_T
     let #aug-sum = #aug-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '09'
     let #sep = #Bal_Amount_T
     let #sep-sam = #Bal_Amount_T
     let #sep-sum = #sep-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '10'
     let #oct = #Bal_Amount_T
     let #oct-sam = #Bal_Amount_T
     let #oct-sum = #oct-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '11'
     let #nov = #Bal_Amount_T
     let #nov-sam = #Bal_Amount_T
     let #nov-sum = #nov-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '12'
     let #dec = #Bal_Amount_T
     let #dec-sam = #Bal_Amount_T
     let #dec-sum = #dec-sum + #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when-other
     break
  end-evaluate
  let #annual-month-sum = #annual-month-sum + #annual-sum
FROM PS_GPDE_RP_TX03 J, PS_GPDE_BL_PRINT K
WHERE J.PIN_NUM            = K.PIN_NUM
AND   J.EMPLID             = $Emplid
AND   J.EMPL_RCD           = #Empl_Rcd_Nbr
AND   J.PAY_ENTITY         = $Pay_Entity
! we look at current rows only here, retro comes later in: Get-Balance-Retro-Info
AND   J.PRD_END_DT         = J.GPDE_AL_CPAY_ENDDT
AND   J.PIN_NUM            = #Main_Pin
AND   K.GPDE_RC_REPORTNAME = $Ctl_Print
AND   K.EFF_STATUS         = 'A'
!we need to make a differenc between STORNO and ORIGINAL
AND   J.GPDE_AL_LINE_ID=$StornoId
[$Hire_Term_Crit]
GROUP BY J.PRD_END_DT , K.GPDE_AL_SIGNVALUE, K.GPDE_BL_PR_SUM
ORDER BY J.PRD_END_DT , K.GPDE_AL_SIGNVALUE
end-SELECT
   let $Same_Value = 'N'      ! To print Current Period Values
   !if  $Norm-Bal   = 'Y'      ! To Print only if Current Values Present
      do Print-Sum
      !print-sum also resets the month-sums
   !end-if

end-procedure




!***********************************************
begin-procedure Get-Balance-Retro-Info
let $Same_Value = 'N'
let $Retro = 'N'
let $LastStornoID = 'OR'
!
! select and print the retro rows similar to above
!
begin-SELECT
! period calculated IN
JR.GPDE_AL_CPAY_ENDDT          () on-break print=never procedure = Print-Balance-Retro-Info
JR.GPDE_AL_LINE_ID             () on-break print=never procedure = Print-Balance-Retro-Info
SUM(JR.CALC_RSLT_VAL)          &GPDE_BL_AMT3 = NUMBER
SUM(JR.BASE_RSLT_VAL)          &GPDE_BASE_AMT3 = NUMBER
! period calculated FOR
JR.PRD_END_DT                  &PRD_END_DT3
KR.GPDE_AL_SIGNVALUE           &KR.GPDE_AL_SIGNVALUE
KR.GPDE_BL_PR_SUM               &KR.GPDE_BL_PR_SUM
  ! we need this for the breaks
  let $LastStornoID = &JR.GPDE_AL_LINE_ID

  let $Print_Sum = &KR.GPDE_BL_PR_SUM
  let $Retro = 'Y'
  if $Norm-Bal = 'N'             !If no Current Values but Retro Values exist.
     do Print-Sum
     let $Norm-Bal ='Y'
  end-if
  if $GPDE_BL_PR_BASE = 'Y'
     let #Bal_Amount_T3 = &GPDE_BASE_AMT3
  else
     let #Bal_Amount_T3 = &GPDE_BL_AMT3 * &KR.GPDE_AL_SIGNVALUE
  end-if
  let $GPDE_AL_CPAY_ENDDT3 = &JR.GPDE_AL_CPAY_ENDDT
  let $PRD_END_DT3         = &PRD_END_DT3
  do ConvertToComponents(&PRD_END_DT3,$yy,$mm,$dd)
  evaluate $mm
  when = '01'
     let #jan   = #Bal_Amount_T3
     let #jan-sum = #jan-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '02'
     let #feb = #Bal_Amount_T3
     let #feb-sum = #feb-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '03'
     let #mar = #Bal_Amount_T3
     let #mar-sum = #mar-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '04'
     let #apr = #Bal_Amount_T3
     let #apr-sum = #apr-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '05'
     let #may = #Bal_Amount_T3
     let #may-sum =  #may-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '06'
     let #jun = #Bal_Amount_T3
     let #jun-sum = #jun-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '07'
     let #jul = #Bal_Amount_T3
     let #jul-sum = #jul-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '08'
     let #aug = #Bal_Amount_T3
     let #aug-sum = #aug-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '09'
     let #sep = #Bal_Amount_T3
     let #sep-sum = #sep-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '10'
     let #oct = #Bal_Amount_T3
     let #oct-sum = #oct-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '11'
     let #nov = #Bal_Amount_T3
     let #nov-sum =  #nov-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when = '12'
     let #dec = #Bal_Amount_T3
     let #dec-sum = #dec-sum + #Bal_Amount_T3
     let #annual-sum = #annual-sum + #Bal_Amount_T3
     let #YTDR-sum = #Bal_Amount_T3
     break
  when-other
     break
  end-evaluate
FROM PS_GPDE_RP_TX03 JR, PS_GPDE_BL_PRINT KR
WHERE JR.PIN_NUM = KR.PIN_NUM AND   JR.EMPLID = $Emplid
AND   JR.EMPL_RCD = #Empl_Rcd_Nbr
AND   JR.PAY_ENTITY =  $Pay_Entity
! only look at retro rows
AND   JR.PRD_END_DT <> JR.GPDE_AL_CPAY_ENDDT
AND   JR.PIN_NUM = #Main_Pin
AND   KR.GPDE_RC_REPORTNAME = $Ctl_Print AND   KR.EFF_STATUS = 'A'
[$Hire_Term_Crit_Retro]
!2004Bundle3: extended Group By and order with JR.GPDE_AL_LINE_ID
GROUP BY JR.GPDE_AL_CPAY_ENDDT,JR.GPDE_AL_LINE_ID,JR.PRD_END_DT,KR.GPDE_AL_SIGNVALUE, KR.GPDE_BL_PR_SUM
ORDER BY JR.GPDE_AL_CPAY_ENDDT,JR.GPDE_AL_LINE_ID,JR.PRD_END_DT,KR.GPDE_AL_SIGNVALUE
end-SELECT



! only print something when any retro rows were found
!
! if $Retro = 'Y'
   do Print-Balance-Retro-Info
   do Print-Monthly-Sum
   do Init-Monthly-sum
! end-if

! Versuch wg. leerem 'Monatsumme'
! let $Retro = 'N'

end-procedure
!***********************************************
begin-procedure Print-Balance-Retro-Info

   do ConvertToComponents($GPDE_AL_CPAY_ENDDT3,$yy,$mm,$dd)
   let $Descr = 'aus ' || $mm || '/' || $yy
   let #annual-month-sum = #annual-month-sum + #annual-sum


   ! 2004Bundle3: modify descr to storno
   !

   if $LastStornoId = 'ST'
          let $Descr = 'Storno von ' || $mm || '/' || $yy
   else
          let $Descr = 'aus ' || $mm || '/' || $yy
   end-if


   do Print-sum
end-procedure
!***********************************************
begin-procedure Print-Sum

  if #jan = 0 and #feb = 0 and #mar = 0 and #apr = 0 and #may = 0 and #jun = 0 and
       #jul = 0 and #aug = 0 and #sep = 0 and #oct = 0 and #nov = 0 and #dec = 0
       ! print '*Leerzeile*'     (0,{col0})
       let $Dummy = ' '
  else
    let $First-Line = 'B'
    let $Printed = 'Y'
    position (+1,0)

    Print $Descr       (0,{col0}) !WRAP 25 1

    do Format-Number(#jan,$number,'B9999999.99')
    print $number    (0,{col2})
    do Format-Number(#feb,$number,'B9999999.99')
    print $number    (0,{col3})
    do Format-Number(#mar,$number,'B9999999.99')
    print $number    (0,{col4})
    do Format-Number(#apr,$number,'B9999999.99')
    print $number    (0,{col5})
    do Format-Number(#may,$number,'B9999999.99')
    print $number    (0,{col6})
    do Format-Number(#jun,$number,'B9999999.99')
    print $number    (0,{col7})
    do Format-Number(#jul,$number,'B9999999.99')
    print $number    (0,{col8})
    do Format-Number(#aug,$number,'B9999999.99')
    print $number    (0,{col9})
    do Format-Number(#sep,$number,'B9999999.99')
    print $number    (0,{col10})
    do Format-Number(#oct,$number,'B9999999.99')
    print $number    (0,{col11})
    do Format-Number(#nov,$number,'B9999999.99')
    print $number    (0,{col12})
    do Format-Number(#dec,$number,'B9999999.99')
    print $number    (0,{col13})

    if  $Retro = 'N' and $Print_Sum = 'Y'
        if  $YTD_AMT_IND = '5'
          ! YTD_AMT_IND = '5'  ==> yeartodate accus
          if $Print_Sum = 'Y'
            do Format-Number(#YTD-sum,$number,'B9999999.99')
            let $number = $number  || '*'
            print $number   (0,{col14})
          end-if
        else
          if $Print_Sum = 'Y'
             do Format-Number(#annual-sum,$number,'B9999999.99')
             let $number = $number  || '*'
             print $number   (0,{col14})
          end-if
        end-if
    end-if
    do Init-Sum
    !Versuch
    let $Print_Sum = 'N'
  end-if
end-procedure
!**********************************************





begin-procedure Print-Monthly-Sum

  if #jan-sum = 0 and #feb-sum = 0 and #mar-sum = 0 and #apr-sum = 0 and #may-sum = 0 and #jun-sum = 0 and
       #jul-sum = 0 and #aug-sum = 0 and #sep-sum = 0 and #oct-sum = 0 and #nov-sum = 0 and #dec-sum = 0
       ! print '*Leerzeile*'     (0,{col0})
       let $Dummy = 'Monatssumme ist 0'
  else
       let $Dummy = 'Monatssumme'
  end-if


   let #Total_Sum =  #jan-sum + #feb-sum + #mar-sum + #apr-sum + #may-sum + #jun-sum +
       #jul-sum + #aug-sum + #sep-sum + #oct-sum + #nov-sum + #dec-sum
   position (+1,0)

   print $Dummy   (0,{col0})   bold
!   print 'Monatsumme'   (0,{col0})   bold

   do Format-Number(#jan-sum,$number,'B9999999.99')
   print $number           (0,{col2})
   do Format-Number(#feb-sum,$number,'B9999999.99')
   print $number           (0,{col3})
   do Format-Number(#mar-sum,$number,'B9999999.99')
   print $number           (0,{col4})
   do Format-Number(#apr-sum,$number,'B9999999.99')
   print $number           (0,{col5})
   do Format-Number(#may-sum,$number,'B9999999.99')
   print $number           (0,{col6})
   do Format-Number(#jun-sum,$number,'B9999999.99')
   print $number           (0,{col7})
   do Format-Number(#jul-sum,$number,'B9999999.99')
   print $number           (0,{col8})
   do Format-Number(#aug-sum,$number,'B9999999.99')
   print $number           (0,{col9})
   do Format-Number(#sep-sum,$number,'B9999999.99')
   print $number           (0,{col10})
   do Format-Number(#oct-sum,$number,'B9999999.99')
   print $number           (0,{col11})
   do Format-Number(#nov-sum,$number,'B9999999.99')
   print $number           (0,{col12})
   do Format-Number(#dec-sum,$number,'B9999999.99')
   print $number           (0,{col13})

    if  $YTD_AMT_IND = '4' OR $YTD_AMT_IND = '5' OR $YTD_AMT_IND = '6'
        ! do not print sum for yeartodate accumulator
        ! ! do Format-Number(#YTDR-sum,$number,'B9999999.99')
        ! ! print $number    (0,{col14})
        print ' '          (0,{col14})
    else
        do Format-Number(#Total_Sum,$number,'B9999999.99')
        print $number    (0,{col14})
    end-if
end-procedure
!**********************************************
begin-procedure Init-Monthly-sum
let #YTDR-sum = 0
let #Total_Sum = 0
let #jan-sum = 0
let #feb-sum = 0
let #mar-sum = 0
let #apr-sum = 0
let #may-sum = 0
let #jun-sum = 0
let #jul-sum = 0
let #aug-sum = 0
let #sep-sum = 0
let #oct-sum = 0
let #nov-sum = 0
let #dec-sum = 0
let $descr = ''
let #jan-sam = 0
let #feb-sam = 0
let #mar-sam = 0
let #apr-sam = 0
let #may-sam = 0
let #jun-sam = 0
let #jul-sam = 0
let #aug-sam = 0
let #sep-sam = 0
let #oct-sam = 0
let #nov-sam = 0
let #dec-sam = 0
end-procedure
!**********************************************
begin-procedure Print-Blank-Line
!print 'Print-Blank-Line'                                        (+1,0)
print ' '                                        (+1,0)
end-procedure
!****************************************
begin-procedure Check-Similar-Data
if ( #jan = #jan-sam
and #feb = #feb-sam
and #mar = #mar-sam
and #apr = #apr-sam
and #may = #may-sam
and #jun = #jun-sam
and #jul = #jul-sam
and #aug = #aug-sam
and #sep = #sep-sam
and #oct = #oct-sam
and #nov = #nov-sam
and #dec = #dec-sam  )
  let $Same_Value = 'Y'
end-if
end-procedure
!****************************************************************************************
!PAY ENTITY  REPORT
!****************************************************************************************
begin-procedure Get-Balance-Info-PayEntity
let $Retro = 'N'
let $Norm-Bal = 'N'
begin-SELECT
SUM(JP.CALC_RSLT_VAL)     &JP.GPDE_BL_AMT = NUMBER
SUM(JP.BASE_RSLT_VAL)     &JP.GPDE_BASE_AMT = NUMBER
JP.PRD_END_DT             &JP.PRD_END_DT2
KP.GPDE_AL_SIGNVALUE      &KP.GPDE_AL_SIGNVALUE
KP.GPDE_BL_PR_SUM          &KP.GPDE_BL_PR_SUM
  let $Print_Sum = &KP.GPDE_BL_PR_SUM
  let $Norm-Bal = 'Y'
  if $GPDE_BL_PR_BASE = 'Y'
     let #Bal_Amount_T = &JP.GPDE_BASE_AMT
  else
     let #Bal_Amount_T = &JP.GPDE_BL_AMT * &KP.GPDE_AL_SIGNVALUE
  end-if
  let $PRD_END_DT = &JP.PRD_END_DT2
  do ConvertToComponents(&JP.PRD_END_DT2,$yy,$mm,$dd)
  evaluate $mm
  when = '01'
     let #jan = #Bal_Amount_T
     let #jan-sam =  #Bal_Amount_T
     let #jan-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '02'
     let #feb = #Bal_Amount_T
     let #feb-sam =  #Bal_Amount_T
     let #feb-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '03'
     let #mar = #Bal_Amount_T
     let #mar-sam =  #Bal_Amount_T
     let #mar-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '04'
     let #apr = #Bal_Amount_T
     let #apr-sam =  #Bal_Amount_T
     let #apr-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '05'
     let #may = #Bal_Amount_T
     let #may-sam =  #Bal_Amount_T
     let #may-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '06'
     let #jun = #Bal_Amount_T
     let #jun-sam =  #Bal_Amount_T
     let #jun-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '07'
     let #jul = #Bal_Amount_T
     let #jul-sam = #Bal_Amount_T
     let #jul-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '08'
     let #aug = #Bal_Amount_T
     let #aug-sam = #Bal_Amount_T
     let #aug-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '09'
     let #sep = #Bal_Amount_T
     let #sep-sam = #Bal_Amount_T
     let #sep-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '10'
     let #oct = #Bal_Amount_T
     let #oct-sam = #Bal_Amount_T
     let #oct-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '11'
     let #nov = #Bal_Amount_T
     let #nov-sam = #Bal_Amount_T
     let #nov-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '12'
     let #dec = #Bal_Amount_T
     let #dec-sam = #Bal_Amount_T
     let #dec-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when-other
     break
  end-evaluate
  let #annual-month-sum = #annual-month-sum + #annual-sum
FROM PS_GPDE_RP_TX03 JP, PS_GPDE_BL_PRINT KP
WHERE JP.PIN_NUM            = KP.PIN_NUM AND JP.PAY_ENTITY         = $Pay_Entity
AND   JP.PIN_NUM            = #Main_Pin AND   KP.GPDE_RC_REPORTNAME = $Ctl_Print
AND   KP.EFF_STATUS         = 'A'  AND  JP.GPDE_AL_CPAY_ENDDT =
( SELECT MAX(JB.GPDE_AL_CPAY_ENDDT) FROM PS_GPDE_RP_TX03 JB
      WHERE JP.EMPLID=JB.EMPLID AND JP.PRD_END_DT=JB.PRD_END_DT AND JB.PIN_NUM=#Main_Pin)
GROUP BY JP.PRD_END_DT,KP.GPDE_AL_SIGNVALUE, KP.GPDE_BL_PR_SUM
ORDER BY JP.PRD_END_DT,KP.GPDE_AL_SIGNVALUE
end-SELECT
   let $Same_Value = 'N'
   if  $Norm-Bal   = 'Y'
      do Print-Sum
   end-if
end-procedure
!*********************************************************************************
begin-procedure Get-Pin-Info1
Begin-Select distinct
AP.PIN_NUM
BP.GPDE_BL_PR_GROUP
BP.GPDE_BL_PR_ORDER
BP.GPDE_BL_PR_BASE               &BP.GPDE_BL_PR_BASE
AP.PIN_NM                        &AP.PIN_NM
AP.ACM_PRD_OPTN                  &AP.ACM_PRD_OPTN
AP.DESCR                         &JP.DESCR
    let $GPDE_BL_PR_BASE = &BP.GPDE_BL_PR_BASE
    let $PIN_NM = RTRIM(&AP.PIN_NM, ' ')
    let $YTD_AMT_IND = &AP.ACM_PRD_OPTN
    let  #Main_Pin=&AP.PIN_NUM
    let $Descr = substr(&JP.DESCR,1,25)
    if  $Ctl_Comp_Report = '3'
        do Get-Balance-Info-PayEntity
    end-if
    if $Ctl_Comp_Report = '2'
        do Get-Balance-Info1
    end-if
    if ($Norm-Bal = 'Y'  or  $Retro = 'Y')
      do Print-Blank-Line
    end-if
FROM PS_GPDE_RP_TX03 AP , PS_GPDE_BL_PRINT BP
WHERE AP.PIN_NUM=BP.PIN_NUM AND   BP.GPDE_RC_REPORTNAME= $Ctl_Print
ORDER BY BP.GPDE_BL_PR_GROUP ,BP.GPDE_BL_PR_ORDER,BP.GPDE_BL_PR_BASE,
         AP.PIN_NM,AP.ACM_PRD_OPTN,AP.DESCR
End-Select
end-procedure
!*********************************************************************************
begin-procedure Get-Balance-Info1
let $Retro = 'N'
let $Norm-Bal = 'N'
begin-SELECT
SUM(JP1.CALC_RSLT_VAL)          &GPDE_BL_AMTP = NUMBER
SUM(JP1.BASE_RSLT_VAL)          &GPDE_BASE_AMTP = NUMBER
JP1.PRD_END_DT                  &PRD_END_DT2P
KP1.GPDE_AL_SIGNVALUE           &KP1.GPDE_AL_SIGNVALUE
KP1.GPDE_BL_PR_SUM              &KP1.GPDE_BL_PR_SUM
  let $Print_Sum = &KP1.GPDE_BL_PR_SUM
  let $Norm-Bal = 'Y'
  if $GPDE_BL_PR_BASE = 'Y'
     let #Bal_Amount_T = &GPDE_BASE_AMTP
  else
     let #Bal_Amount_T = &GPDE_BL_AMTP * &KP1.GPDE_AL_SIGNVALUE
  end-if
  let $PRD_END_DT = &PRD_END_DT2P
  do ConvertToComponents(&PRD_END_DT2P,$yy,$mm,$dd)
  evaluate $mm
  when = '01'
     let #jan = #Bal_Amount_T
     let #jan-sam =  #Bal_Amount_T
     let #jan-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '02'
     let #feb = #Bal_Amount_T
     let #feb-sam =  #Bal_Amount_T
     let #feb-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '03'
     let #mar = #Bal_Amount_T
     let #mar-sam =  #Bal_Amount_T
     let #mar-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '04'
     let #apr = #Bal_Amount_T
     let #apr-sam =  #Bal_Amount_T
     let #apr-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '05'
     let #may = #Bal_Amount_T
     let #may-sam =  #Bal_Amount_T
     let #may-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '06'
     let #jun = #Bal_Amount_T
     let #jun-sam =  #Bal_Amount_T
     let #jun-sum =  #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '07'
     let #jul = #Bal_Amount_T
     let #jul-sam = #Bal_Amount_T
     let #jul-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '08'
     let #aug = #Bal_Amount_T
     let #aug-sam = #Bal_Amount_T
     let #aug-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '09'
     let #sep = #Bal_Amount_T
     let #sep-sam = #Bal_Amount_T
     let #sep-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '10'
     let #oct = #Bal_Amount_T
     let #oct-sam = #Bal_Amount_T
     let #oct-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '11'
     let #nov = #Bal_Amount_T
     let #nov-sam = #Bal_Amount_T
     let #nov-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when = '12'
     let #dec = #Bal_Amount_T
     let #dec-sam = #Bal_Amount_T
     let #dec-sum = #Bal_Amount_T
     let #annual-sum = #annual-sum + #Bal_Amount_T
     let #YTD-sum = #Bal_Amount_T
     break
  when-other
     break
  end-evaluate
  let #annual-month-sum = #annual-month-sum + #annual-sum
FROM PS_GPDE_RP_TX03 JP1, PS_GPDE_BL_PRINT KP1
WHERE JP1.PIN_NUM            = KP1.PIN_NUM AND   JP1.EMPLID  = $Emplid
AND   JP1.EMPL_RCD           = #Empl_Rcd_Nbr AND   JP1.PAY_ENTITY  = $Pay_Entity
AND   JP1.PRD_END_DT         = JP1.GPDE_AL_CPAY_ENDDT AND JP1.PIN_NUM = #Main_Pin
AND   KP1.GPDE_RC_REPORTNAME = $Ctl_Print AND   KP1.EFF_STATUS = 'A'
[$Hire_Term_CritP1]
GROUP BY JP1.PRD_END_DT , KP1.GPDE_AL_SIGNVALUE, KP1.GPDE_BL_PR_SUM
ORDER BY JP1.PRD_END_DT , KP1.GPDE_AL_SIGNVALUE
end-SELECT
   let $Same_Value = 'N'      ! To print Current Period Values
   if  $Norm-Bal   = 'Y'      ! To Print only if Current Values Present
      do Print-Sum
   end-if
   do Get-Balance-Retro-Info
end-procedure
!*********************************************************************************





begin-procedure HeadingInfos
! -- display 'entry HeadingInfos'
! -- display $BegYearAct
! -- display $EndYearAct


Begin-Select distinct
T1.GPDE_AL_CPAY_ENDDT
T1.SEX
T1.GPDE_TX_AGS_ID           &AGS_ID
T1.GPDE_TX_HOME_CD          &HOME_CD
T1.GPDE_AL_FINANCE_CD       &FINANCE_CD
T1.NATIONALITY              &NATIONALITY
T1.NATIONALITY_CD           &NATIONALITY_CD
T1.BIRTHDATE
!wdu 04b4: added hire and termination dates
T1.HIRE_DT        &HDG_HIR_DT
   if rtrim(&HDG_HIR_DT,' ') <> ''
      do ConvertToComponents(&HDG_HIR_DT,$yy,$mm,$dd)
      let #temp_int = length($yy)
      if #temp_int > 2
        let $yy = substr($yy,#temp_int - 1,2)
      end-if
      let $HDG_HIR_DT = $dd || '.' || $mm || '.' || $yy
   else
         let $HDG_HIR_DT =' '
   end-if
T1.TERMINATION_DT        &HDG_TER_DT
   ! the last day of employment is required, not the EFFDT
   if rtrim(&HDG_TER_DT,' ') <> ''
      !subtract a day to get last day of employment
      do Convert-to-DTU-Date(&HDG_TER_DT,$DTU-TermEffdDt)
      do dtu-subtract-days($DTU-TermEffdDt,1,$DTU-TermEndDt)
      do Convert-from-DTU-Date($DTU-TermEndDt,$TermEndDt)
      !
      ! format for printing in short format
      do ConvertToComponents($TermEndDt,$yy,$mm,$dd)
      let #temp_int = length($yy)
      if #temp_int > 2
         let $yy = substr($yy,#temp_int - 1,2)
      end-if
      let $HDG_TER_DT = $dd || '.' || $mm || '.' || $yy
   else
      let $HDG_TER_DT =' '
   end-if
T1.GPDE_TX_SPCL_EXMPT
T1.GPDE_TX_INC_TX_CLS
T1.GPDE_TX_SCHEDULE         &T3
T1.GPDE_TX_EXEMPT_ANN       &T4
T1.GPDE_TX_EXEMPT_MON       &T5
T1.GPDE_TX_RELIGION
T1.GPDE_TX_SPOUSE_REL
T1.GPDE_TX_CHRCHSTATE
T1.GPDE_TX_RECALC_OVD       &T9
T1.GPDE_TX_METHOD_OVD       &T10
T1.GPDE_TX_CHRCH_OVRD       &T11
T1.MAR_STATUS               &T1.MAR_STATUS
SI01A.GPDE_DV_RVNR          &RVNR
SI01A.GPDE_SI_EMPL_TYPE     &EMPL_TYPE
SI01A.GPDE_SI_CARD_PRES     &CARD_PRES
SI01A.GPDE_SI_PENS_APPLI    &SI01A.GPDE_SI_PENS_APPLI
SI01A.GPDE_SI_EMPL_MULT     &SI01A.GPDE_SI_EMPL_MULT
T1.PRD_END_DT
T1.SEG_END_DT
T1.GPDE_TX_NUM_CHILD
T1.GPDE_TX_ADDGRS_MON
T1.GPDE_TX_ADDGRS_ANN
T1.DEPTID
        let $FieldName = 'GPDE_TX_SCHEDULE'
        let $FieldValue = rtrim(&T3,' ')
        do Read-Translate-Table
        let $SteuerTabelle = $XlatShortName
        let #KinderFrBetr = &T1.GPDE_TX_NUM_CHILD
        let $FieldName = 'GPDE_TX_SPCL_EXMPT'
        let $FieldValue = rtrim(&T1.GPDE_TX_SPCL_EXMPT,' ')
        do Read-Translate-Table
        let $Steuerstatus = $XlatShortName
        if rtrim($Steuerstatus,' ') = ''
           let $Steuerstatus = rtrim(&T1.GPDE_TX_SPCL_EXMPT,' ')
        end-if
        let $FieldName = 'GPDE_TX_RELIGION'
        let $FieldValue = rtrim(&T1.GPDE_TX_RELIGION,' ')
        do Read-Translate-Table
        let $Religion_AN = $XlatShortName
        let $FieldName = 'GPDE_TX_SPOUSE_REL'
        let $FieldValue = rtrim(&T1.GPDE_TX_SPOUSE_REL,' ')
        do Read-Translate-Table
        let $Religion_Eheg = $XlatShortName

        if rtrim($Religion_Eheg,' ') = ''
           let $Religion_Eheg = rtrim(&T1.GPDE_TX_SPOUSE_REL,' ')
        end-if
        let #FreibetrMon = &T5
        let #FreibetrJah = &T4
        let #HinzurechMon = &T1.GPDE_TX_ADDGRS_MON
        let #HinzurechJah = &T1.GPDE_TX_ADDGRS_ANN
        do Format-Number(#KinderFrBetr,$KinderFrBetr,'B8,888,888.00')
        do Format-Number(#FreibetrMon,$FreibetrMon,'B8,888,888.00')
        do Format-Number(#FreibetrJah,$FreibetrJah,'B8,888,888.00')
        do Format-Number(#HinzurechMon,$HinzurechMon,'B8,888,888.00')
        do Format-Number(#HinzurechJah,$HinzurechJah,'B8,888,888.00')
        do Format-DateTime(&T1.PRD_END_DT, $T1ST.PRD_END_DT, {DEFDATE},'','')
        let $FieldName = 'SEX'
        let $FieldValue = &T1.SEX
        do Read-Translate-Table
        let $T1.SEX = $XlatLongName
        let $FieldName = 'GPDE_TX_SPCL_EXMPT'
        let $FieldValue = &T1.GPDE_TX_SPCL_EXMPT
        do Read-Translate-Table
        let $T1 = substr($XlatShortName,1,12)
        let $FieldName = 'GPDE_TX_INC_TX_CLS'
        let $FieldValue = &T1.GPDE_TX_INC_TX_CLS
        do Read-Translate-Table
        let $T2 = substr($XlatShortName,1,12)
        let $Steuerklasse = $XlatShortName
        do Format-Number (&T4, $T4, '9,999,999.99mi')
        let $T4     = ltrim($T4,' ')
        do Format-Number (&T5, $T5, '9,999,999.99mi')
        let $T5     = ltrim($T5,' ')
        let $FieldName = 'GPDE_TX_RELIGION'
        let $FieldValue = &T1.GPDE_TX_RELIGION
        do Read-Translate-Table
        let $T6 = substr($XlatShortName,1,12)
        let $FieldName = 'GPDE_TX_SPOUSE_REL'
        let $FieldValue = &T1.GPDE_TX_SPOUSE_REL
        do Read-Translate-Table
        let $T7 = substr($XlatShortName,1,12)
        let $FieldName = 'GPDE_TX_CHRCHSTATE'
        let $FieldValue = &T1.GPDE_TX_CHRCHSTATE
        do Read-Translate-Table
        let $T8 = substr($XlatShortName,1,12)
        let $FieldName = 'MAR_STATUS'
        let $FieldValue = &T1.MAR_STATUS
        do Read-Translate-Table
        let $T12 = $XlatLongName
        do Format-DateTime(&CARD_PRES, $CARD_PRES, {DEFDATE},'','')
        do Get_Empl_Nationality
        let $FieldName = 'GPDE_SI_PENS_APPLI'
        let $FieldValue = &SI01A.GPDE_SI_PENS_APPLI
        do Read-Translate-Table
        let $T19a = $XlatLongName
        let $FieldName = 'GPDE_SI_EMPL_MULT'
        let $FieldValue = rtrim(&SI01A.GPDE_SI_EMPL_MULT,' ')
        do Read-Translate-Table
        let $T20a = $XlatLongName
        ! read descr with params
        do GetFinanceOfficeDescr
! -- display 'reading Headinginfo ...'
FROM PS_GPDE_RP_0001_VW T1,PS_GPDE_RP_SI01_VW SI01A
WHERE T1.PAY_ENTITY = $Ctl_PayEntity
AND T1.EMPLID = $Emplid
AND T1.EMPL_RCD = #RP1.EMPL_RCD
AND   T1.EMPLID = SI01A.EMPLID
AND T1.CAL_RUN_ID = SI01A.CAL_RUN_ID
AND T1.EMPL_RCD = SI01A.EMPL_RCD
AND   T1.GP_PAYGROUP = SI01A.GP_PAYGROUP
AND T1.CAL_ID = SI01A.CAL_ID
AND   T1.RSLT_SEG_NUM = SI01A.RSLT_SEG_NUM
AND T1.SEG_END_DT = SI01A.SEG_END_DT
! get the highest recalculation of the month in question
and T1.GPDE_AL_CPAY_ENDDT = (select max(T1M.GPDE_AL_CPAY_ENDDT) from
          PS_GPDE_RP_0001_VW T1M WHERE T1M.EMPLID = T1.EMPLID
          AND T1M.EMPL_RCD = #RP1.EMPL_RCD
          AND T1M.PAY_ENTITY = T1.PAY_ENTITY
          ! wdu 04b4: the heading data should be as of year-end, not as of max
          ! only periods of the year specified on the runcontrol are relevant

          ! wdu05b6: changed T1.PRD_END_DT to T1M.PRD_END_DT
          AND  T1M.PRD_END_DT BETWEEN $BegYearAct AND  $EndYearAct
          )
! wdu 04b4: distinct is not the ideal solution, but it does the job when
! SEG_END_DT is in the sort.
order by T1.GPDE_AL_CPAY_ENDDT,T1.SEG_END_DT
End-Select


!
! get AZ dates for the header box
!
let $AZ_BGN_DT = ' '
let $AZ_END_DT = ' '
begin-SELECT
AZ1.BGN_DT
   do ConvertToComponents(&AZ1.BGN_DT,$yy,$mm,$dd)
   let #temp_int = length($yy)
   if #temp_int > 2
        let $yy = substr($yy,#temp_int - 1,2)
   end-if
   let $AZ_BGN_DT = $dd || '.' || $mm || '.' || $yy
    ! wdu05-881b8   AZ-Labels depend on AZ Begin Date, created a variable to identify the new AZ
    ! this needs to run here otherwise we cannot see the labels in social insurance
    if ( &AZ1.BGN_DT >= $StichtagAZ )
        let $AZ2004 = 'Y'
        let $azlabel = 'ZBE'
        let $azlabelv = 'ZBE-V'
    else
        let $AZ2004 = 'N'
        let $azlabel = 'UB'
        let $azlabelv = 'UB-V'
    end-if

AZ1.END_DT
   do ConvertToComponents(&AZ1.END_DT,$yy,$mm,$dd)
   let #temp_int = length($yy)
   if #temp_int > 2
        let $yy = substr($yy,#temp_int - 1,2)
   end-if
   let $AZ_END_DT = $dd || '.' || $mm || '.' || $yy
FROM PS_GPDE_AZ_EE AZ1
WHERE AZ1.EMPLID = $Emplid
AND AZ1.EMPL_RCD= #Empl_Rcd_Nbr
ORDER BY AZ1.BGN_DT ASC
END-SELECT

do format-datetime(&T1.BIRTHDATE,$debug_date,{DEFDATE},'','')


!
! wdu05-881b8   BAEGV-Field (DEUEV-Status: employed family member etc.) added in header
!
let $BAEGV_Status = ' '
begin-SELECT
SIBAE1.GPDE_SI_BAEGV
    let $FieldName = 'GPDE_SI_BAEGV'
    let $FieldValue = rtrim(&SIBAE1.GPDE_SI_BAEGV,' ')
    ! default to regular employment
    if ( rtrim($FieldValue,' ') = '')
        let $FieldValue ='0'
    end-if
    do Read-Translate-Table
    let $BAEGV_Status= rtrim(ltrim($XlatlongName,' '),' ')
FROM PS_GPDE_SI_EE SIBAE1
WHERE SIBAE1.EMPLID = $Emplid
AND SIBAE1.EMPL_RCD= #Empl_Rcd_Nbr
AND SIBAE1.EFFDT = (SELECT MAX(SIBAE2.EFFDT) FROM PS_GPDE_SI_EE SIBAE2
WHERE SIBAE1.EMPLID=SIBAE2.EMPLID
AND SIBAE1.EMPL_RCD=SIBAE2.EMPL_RCD
AND SIBAE2.EFFDT <= $Ctl_end_dt )
END-SELECT


! -- display 'exit HeadingInfos'
End-Procedure



!***********************************************************************
begin-procedure GetFinanceOfficeDescr
let $FinanceDescr = ''
begin-select
FIN1.DESCR          &FINANCE_DESCR
   let $FinanceDescr = &FINANCE_DESCR
from PS_GPDE_TX_FINOFC FIN1
WHERE FIN1.GPDE_AL_FINANCE_CD = &FINANCE_CD
AND FIN1.EFFDT=(SELECT MAX(FIN2.EFFDT) FROM  PS_GPDE_TX_FINOFC FIN2
    WHERE FIN1.GPDE_AL_FINANCE_CD=FIN2.GPDE_AL_FINANCE_CD
    AND FIN2.EFFDT <= &T1.GPDE_AL_CPAY_ENDDT)
end-select
end-procedure






!***********************************************************************
begin-procedure Get_Empl_Nationality
let $NATIONALITY = ''
begin-select
DUEV.NATIONALITY
   let $NATIONALITY = &DUEV.NATIONALITY
from PS_NATIONS_DUEVO DUEV
where DUEV.NATION_CD = &NATIONALITY_CD
end-select

begin-select
DUEVLNG.NATIONALITY
   let $NATIONALITY = &DUEVLNG.NATIONALITY
from PS_NATIONS_DU_LNG DUEVLNG
where DUEVLNG.NATION_CD = &NATIONALITY_CD
and DUEVLNG.LANGUAGE_CD = 'GER'
end-select
end-procedure






!************************************************************************
begin-procedure Get-ReqParam
Begin-Select
RQ.PRCSINSTANCE
RQ.PRCSTYPE
RQ.PRCSNAME
RQ.RUNLOCATION
RQ.OPSYS
RQ.DBTYPE
RQ.DBNAME
RQ.OPRID
RQ.BEGINDTTM
RQ.ENDDTTM
RQ.RUNSTATUS
RQ.RUNCNTLID
RQ.OUTDESTTYPE
RQ.OUTDESTFORMAT
RQ.TIMEZONE
RQ.SERVERNAMERUN
! wdu jw2005--file handling
OD.PRCSOUTPUTDIR
OD.OUTDEST
FROM PSPRCSPARMS OD , PSPRCSRQST  RQ
WHERE OD.PRCSINSTANCE  = RQ.PRCSINSTANCE
AND   RQ.PRCSINSTANCE = #prcs_process_instance

End-Select
  let $OUTDEST       = rtrim(&OD.OUTDEST,' ')
  let $RQ.OUTDESTTYPE = rtrim(&RQ.OUTDESTTYPE,' ')
  let $RQ.OUTDESTFORMAT = rtrim(&RQ.OUTDESTFORMAT,' ')
  let $Process_Inst  = to_char(&RQ.PRCSINSTANCE)
! wdu jw2005--file handling
  move 'RUNLOCATION'  to $FieldName
  move &RQ.RUNLOCATION to $FieldValue
  do Read-Translate-Table
  let $RUNLOCATION = rtrim(ltrim($XlatlongName,' '),' ')

  move 'OUTDESTTYPE'  to $FieldName
  move &RQ.OUTDESTTYPE to $FieldValue
  do Read-Translate-Table
  let $OUTDESTTYPE = rtrim(ltrim($XlatlongName,' '),' ')
  move 'OUTDESTFORMAT'  to $FieldName
  move &RQ.OUTDESTFORMAT to $FieldValue
  do Read-Translate-Table
  let $OUTDESTFORMAT = rtrim(ltrim($XlatlongName,' '),' ')
  evaluate $RQ.OUTDESTFORMAT
  when = '1'
    let $OUTDESTFORM = 'PDF'
    break
  when = '2'
    let $OUTDESTFORM = 'PDF'
    break
  when = '3'
    let $OUTDESTFORM = 'CSV'
    break
  when = '4'
    let $OUTDESTFORM = 'HP'
    break
  when = '5'
    let $OUTDESTFORM = 'HTM'
    break
  when = '6'
    let $OUTDESTFORM = 'LP'
    break
  when = '7'
    let $OUTDESTFORM = 'WKS'
    break
  when = '8'
    let $OUTDESTFORM = 'XLS'
    break
  when = '9'
    let $OUTDESTFORM = 'DOC'
    break
  when = '10'
    let $OUTDESTFORM = 'PS'
    break
  when = '11'
    let $OUTDESTFORM = 'RPT'
    break
  when = '12'
    let $OUTDESTFORM = 'RTF'
    break
  when = '13'
    let $OUTDESTFORM = 'SPF'
    break
  when = '14'
    let $OUTDESTFORM = 'TXT'
    break
  when = '15'
    let $OUTDESTFORM = 'PDF'
    break
  when = '16'
    let $OUTDESTFORM = 'PDF'
    break
  when-other
    let $OUTDESTFORM = 'PDF'
    break
  end-evaluate
end-procedure





!**************************************************************************
begin-procedure Init-Report
  do Stdapi-Init
  do Get-ReqParam

  ! wdu jw2005 modified 890 file handling
  let $outputdir = $sqr-report

  do GetFileExtension($RQ.OUTDESTFORMAT, $FileExtension)
  do GetOutputDir($RUNLOCATION,$OUTDESTTYPE,$OUTDEST,$outputdir)

  #debug show 'outputdir: ' $outputdir
  #debug show 'fileextension: ' $FileExtension

  ! wdu-04b4 changed for customer process:
  ! begin runcontrol data
  ! If no oprid or runcontrol was passed on the commandline, then ask for it.
  ! After that, fetch functional data from the runcontrol.
  ! The input of functional values is no longer supported.
  if $prcs_process_instance = ''
          input $PRCS_OPRID 'OPRID '
          input $PRCS_RUN_CNTL_ID 'RUNCONTROL '
          ! wdu05b6: 'input $outputdir' requested by customer
          input $outputdir
          do Get-Report-Parameters
          do Get-Values
          ! always override language settings
          let $LANGUAGE_CD = 'GER'
          let $CURR_LANGUAGE_CD = 'GER'
   else
          do Get-Report-Parameters
          do Get-Values
   end-if
  ! end runcontrol data

! wdu:  deprecated code, to be removed at bundle 5
! -- if $prcs_process_instance = ''
! --   do Ask-Report-Parameters
! -- else
! --   do Get-Report-Parameters
! --   do Get-Values
! --  end-if

  move 'GPDETX03' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE1 || ' ' || rtrim($Ctl_Year,' ')
end-procedure
!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPDEGLOB', 'EMPLID',        $HD_EMPLID, #CW)
  do Get_Field_Information ('GPDEGLOB', 'BIRTHDATE',     $HD_BIRTHDT,#CW)
  do Get_Field_Information ('GPDEGLOB', 'HIRE_DT',       $HD_HIREDT, #CW)
  do Get_Field_Information ('GPDEGLOB', 'TERMINATION_DT',$HD_TERMDT, #CW)
  do Get_Field_Information ('GPDEGLOB', 'PRINTCLASS',    $PRINTCLASS,#CW)
  do Get_Field_Information ('GPDETX03', 'EMPLTYPE',      $EMPLTYPE, #CW)
  do Get_Field_Information ('GPDETX03', 'NATIONAL',      $NATIONAL, #CW)
  do Get_Field_Information ('GPDETX03', 'LOCATN',        $LOCATN,   #CW)
  do Get_Field_Information ('GPDETX03', 'SICARD',        $SICARD,   #CW)
  do Get_Field_Information ('GPDETX03', 'TAXOFF',        $TAXOFF,   #CW)
  do Get_Field_Information ('GPDETX03', 'AHV_NUMBER',    $AHV_NUMBER,#CW)
  do Get_Field_Information ('GPDETX03', 'TITLE1',        $TITLE1,    #CW)
  do Get_Field_Information ('GPDETX03', 'TOTAL ',        $TOTAL,     #CW)
  do Get_Field_Information ('GPDETX03', 'ELEM_DESCR',    $ELEM_DESCR,#CW)
  do Get_Field_Information ('GPDETX03', 'JAN',           $JAN,       #CW)
  do Get_Field_Information ('GPDETX03', 'FEB',           $FEB,       #CW)
  do Get_Field_Information ('GPDETX03', 'MAR',           $MAR,       #CW)
  do Get_Field_Information ('GPDETX03', 'APR',           $APR,       #CW)
  do Get_Field_Information ('GPDETX03', 'MAY',           $MAY,       #CW)
  do Get_Field_Information ('GPDETX03', 'JUN',           $JUN,       #CW)
  do Get_Field_Information ('GPDETX03', 'JUL',           $JUL,       #CW)
  do Get_Field_Information ('GPDETX03', 'AUG',           $AUG,       #CW)
  do Get_Field_Information ('GPDETX03', 'SEP',           $SEP,       #CW)
  do Get_Field_Information ('GPDETX03', 'OCT',           $OCT,       #CW)
  do Get_Field_Information ('GPDETX03', 'NOV',           $NOV,       #CW)
  do Get_Field_Information ('GPDETX03', 'DEC',           $DEC,       #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',         $AMOUNT_SPEC,#CW)
  ! wdu05-881b8:  get EURO char from global strings table
  do Get_Field_Information ('GPDEGLOB', 'EURO',        $EUROCHAR,     #CW)
  do Get_Field_Information ('GPDEGLOB', 'PARA',        $PARACHAR,     #CW)

end-Procedure
!****************************************************************************
begin-procedure Get-Values
! wdu 04b4: the language codes are overriden in Init-Report and should be removed here at bundle 5
   let $language_cd = $PRCS_LANGUAGE_CD
   let $curr_language_cd = $PRCS_LANGUAGE_CD

   let $Ctl_Print_Steuer = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_REPORTNAME,' ')
end-procedure






!****************************************************************************
begin-procedure Process-Main
  show {gpdeversionstamp}

  ! wdu05-881b8: backport of MVS changes from 891
  if $prcs_process_instance <> ''
        ! wdu89mp1: filename too long for mvs, removed process-instance in name for this
#ifdef MVS
        let $SqrName = 'GPDETX03'
#else
        let $SqrName = 'GPDETX03_' || $prcs_process_instance
#endif
    else
        let $SqrName = 'GPDETX03'
    end-if

   do Get_Type_Options

   ! wdu06-881kug -- $Stichtag normally only gets populated via get-data later,
   ! so we must do an explicit call now to set the two dates
   do Initial_Convert_Currency
   !
   ! show 'Stichtag=' $Stichtag
   !
   if $LastD >= $Stichtag
      let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' ' || $EUROCHAR
   else
      let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
   end-if

! ##########################################
!
! employee independent inits
!
! ##########################################

   do Get_VersionNr

   ! set BegYearActCmp, EndYearActCmp
   do MakeYearBeginEndDates

   ! wdu05-881b8   AZ-Labels depend on AZ Begin Date, create the reference day here
   let $StichtAZ = '2004'  || '07' ||  '01'
   do Format-DateTime($StichtAZ, $Sticht1AZ, {DEFCMP},'','native')
   let $StichtagAZ = $Sticht1AZ
   ! do Format-DateTime($Sticht1AZ, $StichtagAZ, {DEFCMP},'','')


! ##########################################
! GPDE_RC_PRN_COMP = 1 -> compressed Report
! GPDE_RC_PRN_COMP = 2 -> Details Report
! GPDE_RC_PRN_COMP = 3 -> Pay Entity Report
! ##########################################


   !has the new form of heading
   !#wdu: heading needs adaption
   if $Ctl_Comp_Report = '1'
      ! type=1 shows all information in boxes
      ! the detail level is that of grosses, not of earnings
      do CompressedFormReport
   end-if



   if $Ctl_Comp_Report = '2'
      ! type=2 shows ownly header information in boxes, data rows in typewriter
      ! the detail level is that of single earnings
      do Get-Data
      use-report report1
      Let $reportdir = $outputdir || $SqrName || $FileExtension || '{FILESUFFIX}'
      new-report $reportdir
      alter-printer
      font= 3
      point-size=13             !7.2
      use-report report1

      !do Get-PayEntity-Address

    if $Ctl_Curr_Pay_End_DT = ''
      let $year_new = ltrim(rtrim($Ctl_Year,''),'')  || '12' ||  '31'
      do Format-DateTime($year_new, $Ctl_Curr_Pay_End_DT, {DEFCMP},'','native')
    end-if


      do Get-Payentity-Data($Ctl_PayEntity, $Ctl_Curr_Pay_End_DT, $hdr_abr_Payentity_name,
      $hdr_abr_Payentity_street,$hdr_abr_Payentity_street2,$hdr_abr_Payentity_street3,
      $hdr_PoBox,$hdr_abr_Payentity_zip_city,$Nation,$Post,$Cit)

      do Get-Employee-Report
   end-if

   if $Ctl_Comp_Report = '3'
      ! type = 3 is called the pay-entity report
      do Get-Data
      use-report report1
      Let $reportdir = $outputdir || $SqrName || $FileExtension  || '{FILESUFFIX}'
      new-report $reportdir
      alter-printer
      font= 3
      point-size=13             !7.2
      use-report report1
      let $Pay_Entity = $Ctl_PayEntity
      do Get-PayEntity-Address
      do Get-Pin-Info1
   end-if
end-procedure



!****************************************************************************************
begin-procedure Get_Type_Options
let $Name_Type       = ''
let $Addr_Type       = ''
let $Phone_Type      = ''
let $Email_Type      = ''
let $BirthName_Type  = ''
begin-select distinct
INST.NAME_TYPE
INST.ADDRESS_TYPE
INST.PHONE_TYPE
INST.E_ADDR_TYPE
INST.GPDE_BIRTH_NM_TYPE
   let $Name_Type      = &INST.NAME_TYPE
   let $Addr_Type      = &INST.ADDRESS_TYPE
   let $Phone_Type     = &INST.PHONE_TYPE
   let $Email_Type     = &INST.E_ADDR_TYPE
   let $BirthName_Type = &INST.GPDE_BIRTH_NM_TYPE
from PS_GPDE_AL_INSTALL INST
end-select
end-procedure



!**************************************************************************************
begin-procedure MakeTermDtPreviousDay
   do Convert-To-DTU-Date($Termdt,$Termdt)
   do dtu-subtract-days($Termdt, 1, $Termdt)
   do Convert-From-DTU-Date($Termdt,$Termdt)
end-procedure





!**********************************************
begin-procedure GetMatchingTerminationDate
! get termination date for a row with a given hire date: $Hiredt_t.
! The latest Period is used, where this hire date applies, because earlier periods
! may not have the value.
BEGIN-SELECT
TR.PRD_END_DT
TR.TERMINATION_DT  &TERM_DT
  let $TERM_DT =  &TERM_DT
FROM PS_GPDE_RP_0001_VW TR
WHERE TR.EMPLID = $Emplid
AND   TR.HIRE_DT = $Hiredt_t
ORDER BY TR.PRD_END_DT
END-SELECT
end-procedure
!**********************************************
begin-procedure MakeHireTermDateCriteria
  do Format-DateTime($Hiredt,$cmp_Hiredt,{DEFCMP},'','')
  do Format-DateTime($Termdt,$cmp_Termdt,{DEFCMP},'','')
  do Format-DateTime($Ctl_Start_Dt,$Cmp_Start_Dt,{DEFCMP},'','')
  do Format-DateTime($Ctl_End_Dt,$Cmp_End_Dt,{DEFCMP},'','')
  if $cmp_Hiredt  <  $Cmp_Start_Dt          ! normal case
     let $Hiredt = $Ctl_Start_Dt
  end-if
  if  ($cmp_Hiredt  <  $Cmp_Start_Dt)  AND  ($cmp_Termdt = $Cmp_End_Dt )     ! Normal Case
      let $Hire_Term_Crit        = ' '
      let $Hire_Term_Crit_Retro  = ' '
  else
     if $cmp_Hiredt < $cmp_Termdt
        let $Hire_Term_Crit        = ' AND J.PRD_END_DT BETWEEN  ''' || $Hiredt ||
            ''' ' || ' AND  ''' || $Termdt ||''' '
        let $Hire_Term_Crit_Retro  = ' AND JR.PRD_END_DT BETWEEN ''' || $Hiredt ||
            ''' ' || ' AND  ''' || $Termdt ||''' '
        let $Hire_Term_CritP1  = ' AND JP1.PRD_END_DT BETWEEN  ''' || $Hiredt ||
            ''' ' || ' AND  ''' || $Termdt ||''' '
        let $Hire_Term_Crit_RetroP1  = ' AND JRP1.PRD_END_DT BETWEEN ''' || $Hiredt ||
            ''' ' || ' AND  ''' || $Termdt ||''' '
     else
        let $Hire_Term_Crit        = ' AND J.PRD_END_DT >=  ''' || $Hiredt ||''' '
        let $Hire_Term_Crit_Retro  = ' AND JR.PRD_END_DT >= ''' || $Hiredt ||''' '
        let $Hire_Term_CritP1        = ' AND JP1.PRD_END_DT >=  ''' || $Hiredt ||''' '
        let $Hire_Term_Crit_RetroP1  = ' AND JRP1.PRD_END_DT >= ''' || $Hiredt ||''' '
     end-if
  end-if
end-procedure




!**********************************************
! not useful for DEU
!begin-procedure Get-AHV-Number
!let $AHVNum      = ' '
!begin-SELECT
!AH.NATIONAL_ID
!     let $AHVNum      = &AH.NATIONAL_ID
!FROM  PS_PERS_NID AH
!WHERE AH.EMPLID = $Emplid
!AND   AH.PRIMARY_NID='Y'
!end-SELECT
!end-procedure Get-AHV-Number




!**********************************************
begin-procedure New_Employee_Page
  new-page
end-procedure
!**********************************************
begin-procedure init-sum
let #jan = 0
let #feb = 0
let #mar = 0
let #apr = 0
let #may = 0
let #jun = 0
let #jul = 0
let #aug = 0
let #sep = 0
let #oct = 0
let #nov = 0
let #dec = 0
let #annual-sum = 0
let #YTD-sum = 0
end-procedure






!***********************************************************************!
! Detail Report                                                         !
!***********************************************************************!
begin-procedure CompressedFormReport
   let $curr_language_cd = 'GER'
do InitTimeStamp
do TimeStamp('(CompressedFormReport)')

   use-report report3
   Let $reportdir1 = $outputdir || 'Hinweis' || $FileExtension || '{FILESUFFIX}'
   new-report $reportdir1


   use-report report2
   Let $reportdir = $outputdir || $SqrName || $FileExtension || '{FILESUFFIX}'
   new-report $reportdir

   !redundant?
   use-report report2
   alter-printer
     font= 4
     point-size =13
   let $ActEffDt = ''
   let $Korr = 'N'
   let $MinusNull = '-0' || $SDecimal || '00'
   let $PlusNull = '0' || $SDecimal || '00'

!
! for printing we need the positives and the stornos for all periods
do TimeStamp('MakeSI_DataAndStorno')
do MakeSI_DataAndStorno         !was:Get-Data-Detail

! make a list SI-Providers (into GPDE_RP_TX03B), because we want to
! print the SI-data on a per provider basis per period
do TimeStamp('MakeProviderList')
do MakeProviderList             !was: Prepare-Print-Data

!
! as we print on a per provider basis, we need to blank out the values which
! belong to other providers.
do TimeStamp('DistributeSI_DataPerProvider')
do DistributeSI_DataPerProvider         !Prepare_Fill_Result_Data

!
!
do Get-PayEntity-Address

!
! Preparation of data for printing
!
! Prepare GPDE_RP_0002 (tax and gross calculation)
!
do TimeStamp('PrepareData_Tax')
do PrepareData_Tax
!
! Prepare GPDE_RP_AZ01 (Old Age Parttime)
!
do TimeStamp('PrepareData_ATZ')
do PrepareData_ATZ
!
! Prepare GPDE_RP_FL01 (Flexible Worktime)
!
do TimeStamp('PrepareData_Flexi')
do PrepareData_Flexi

do TimeStamp('Print_Employees_Compressed')
do Print_Employees_Compressed

do TimeStamp('End')

!
! print the Hinweis-Page
!
use-report report3
alter-printer
       font= 4
       point-size =10
do Display_Hinweise

end-procedure





!**********************************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select
let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
end-procedure
!**********************************************************************
begin-procedure Get-Max-CpayEndDate
let $Ctl_Curr_Pay_End_DT = ''
begin-select
max(TX03A.GPDE_AL_CPAY_ENDDT) &TX03A.GPDE_AL_CPAY_ENDDT
   let $Ctl_Curr_Pay_End_DT = &TX03A.GPDE_AL_CPAY_ENDDT
from PS_GPDE_RP_TX03A TX03A
where TX03A.EMPLID = $RP1.EMPLID
!wdu 04b4: added rcd
AND TX03A.EMPL_RCD = #Empl_Rcd_Nbr
end-select
end-procedure






!*************************************************************************
begin-procedure Print_comp_Lohnkonto_SVDaten
let #currLine = 0
do Get-Payentity-Data($Ctl_PayEntity, $Ctl_Curr_Pay_End_DT, $hdr_abr_Payentity_name,
      $hdr_abr_Payentity_street,$hdr_abr_Payentity_street2,$hdr_abr_Payentity_street3,
      $hdr_PoBox,$hdr_abr_Payentity_zip_city,$Nation,$Post,$Cit)
let $condition_abr = ' AND (SIC.GPDE_SI_STATUS_KV <> ''5'') '
let #page-count = 1

let $NotPrinted = 'N'
let $GPDE_SI_PROV_MAND = ''
let $GPDE_SI_PROV_MAND_Old = ''

let #zaehler = 0            ! row counter in: Print_comp_Lohnkonto_SVDaten
let $ATZ = 'N'
let $PrintedLohk = 'N'
let $PrintStorFall = 'Y'

begin-select
PBDC.PAY_ENTITY
PBDC.SETID_DEPT
PBDC.LOCATION
PBDC.CURRENCY_CD
PBDC.EMPLID
PBDC.EMPL_RCD
PBDC.CUR_RT_TYPE
PBDC.GPDE_ASOF_DT_EX_RT
PERNC.NAME
SIC.GPDE_RP_MARCH_CLS
PTC.GPDE_SI_PROV_MAND
SIC.GPDE_DV_SV_CODE
SIC.GPDE_DV_SV_CODE_M
SIC.GPDE_SIC_REGION
SIC.GPDE_SI_MINER
SIC.GPDE_SI_STATUS_KV
SIC.GPDE_SI_STATUS_PV
PTC.SLICE_END_DT           &PTC.SLICE_END_DT
PTC.PRD_END_DT
PTC.GPDE_RP_SIGRSS_AMT     &PTC.GPDE_RP_SIGRSS_AMT
PTC.GPDE_RP_SIGRSM_AMT     &PTC.GPDE_RP_SIGRSM_AMT
PTC.GPDE_RP_HICNTB_AMT     &PTC.GPDE_RP_HICNTB_AMT
PTC.GPDE_RP_HICTBM_AMT     &PTC.GPDE_RP_HICTBM_AMT
PTC.GPDE_RP_CICNTB_AMT     &PTC.GPDE_RP_CICNTB_AMT
PTC.GPDE_RP_CICTBM_AMT     &PTC.GPDE_RP_CICTBM_AMT
PTC.GPDE_RP_PICNTB_AMT     &PTC.GPDE_RP_PICNTB_AMT
PTC.GPDE_RP_PICTBM_AMT     &PTC.GPDE_RP_PICTBM_AMT
PTC.GPDE_RP_UICNTB_AMT     &PTC.GPDE_RP_UICNTB_AMT
PTC.GPDE_RP_UICTBM_AMT     &PTC.GPDE_RP_UICTBM_AMT
PTC.GPDE_RP_OAPGRS_AMT     &PTC.GPDE_RP_OAPGRS_AMT
PTC.GPDE_RP_OAPPEN_AMT     &PTC.GPDE_RP_OAPPEN_AMT
PTC.GPDE_RP_OAPGRS_MC      &PTC.GPDE_RP_OAPGRS_MC
PTC.GPDE_RP_OAPPEN_MC      &PTC.GPDE_RP_OAPPEN_MC
PTC.GPDE_RP_RIGRSS_AMT     &PTC.GPDE_RP_RIGRSS_AMT
PTC.GPDE_RP_U1CNTB_AMT     &PTC.GPDE_RP_U1CNTB_AMT
PTC.GPDE_RP_U2CNTB_AMT     &PTC.GPDE_RP_U2CNTB_AMT
PTC.GPDE_RI_PCT1           &PTC.GPDE_RI_PCT1
PTC.GPDE_RI_PCT2           &PTC.GPDE_RI_PCT2
PTC.GPDE_RP_RIGRSM_AMT     &PTC.GPDE_RP_RIGRSM_AMT
PTC.GPDE_RP_U1CTBM_AMT     &PTC.GPDE_RP_U1CTBM_AMT
PTC.GPDE_RP_U2CTBM_AMT     &PTC.GPDE_RP_U2CTBM_AMT
PTC.GPDE_RI_PCT1_MC        &PTC.GPDE_RI_PCT1_MC
PTC.GPDE_RI_PCT2_MC        &PTC.GPDE_RI_PCT2_MC
PTC.GPDE_AL_CPAY_ENDDT     &PTC.GPDE_AL_CPAY_ENDDT
PTC.GPDE_RP_SIDAYS         &PTC.GPDE_RP_SIDAYS
PTC.GPDE_RP_AVDAYS         &PTC.GPDE_RP_AVDAYS
PTC.GPDE_RP_KVDAYS         &PTC.GPDE_RP_KVDAYS
PTC.GPDE_RP_PVDAYS         &PTC.GPDE_RP_PVDAYS
PTC.GPDE_RP_AVDAYS_BON     &PTC.GPDE_RP_AVDAYS_BON
PTC.GPDE_RP_KVDAYS_BON     &PTC.GPDE_RP_KVDAYS_BON
PTC.GPDE_RP_PVDAYS_BON     &PTC.GPDE_RP_PVDAYS_BON
PTC.GPDE_RP_RVDAYS_BON     &PTC.GPDE_RP_RVDAYS_BON
PTC.GPDE_RP_AVGRS_ANLZ     &PTC.GPDE_RP_AVGRS_ANLZ
PTC.GPDE_RP_AVGRS_BON      &PTC.GPDE_RP_AVGRS_BON
PTC.GPDE_RP_AVGRS_MC       &PTC.GPDE_RP_AVGRS_MC
PTC.GPDE_RP_KVGRS_ANLZ     &PTC.GPDE_RP_KVGRS_ANLZ
PTC.GPDE_RP_KVGRS_BON      &PTC.GPDE_RP_KVGRS_BON
PTC.GPDE_RP_KVGRS_MC       &PTC.GPDE_RP_KVGRS_MC
PTC.GPDE_RP_PVGRS_ANLZ     &PTC.GPDE_RP_PVGRS_ANLZ
PTC.GPDE_RP_PVGRS_BON      &PTC.GPDE_RP_PVGRS_BON
PTC.GPDE_RP_PVGRS_MC       &PTC.GPDE_RP_PVGRS_MC
PTC.GPDE_RP_RVGRS_ANLZ     &PTC.GPDE_RP_RVGRS_ANLZ
PTC.GPDE_RP_RVGRS_BON      &PTC.GPDE_RP_RVGRS_BON
PTC.GPDE_RP_RVGRS_MC       &PTC.GPDE_RP_RVGRS_MC
PTC.GPDE_RP_AVLFD_AG       &PTC.GPDE_RP_AVLFD_AG
PTC.GPDE_RP_AVLFD_AN       &PTC.GPDE_RP_AVLFD_AN
PTC.GPDE_RP_KVLFD_AG       &PTC.GPDE_RP_KVLFD_AG
PTC.GPDE_RP_KVLFD_AN       &PTC.GPDE_RP_KVLFD_AN
PTC.GPDE_RP_PVLFD_AG       &PTC.GPDE_RP_PVLFD_AG
PTC.GPDE_RP_PVLFD_AN       &PTC.GPDE_RP_PVLFD_AN
PTC.GPDE_RP_RVLFD_AG       &PTC.GPDE_RP_RVLFD_AG
PTC.GPDE_RP_RVLFD_AN       &PTC.GPDE_RP_RVLFD_AN
PTC.GPDE_RP_KVBON_AG       &PTC.GPDE_RP_KVBON_AG
PTC.GPDE_RP_KVBON_AN       &PTC.GPDE_RP_KVBON_AN
PTC.GPDE_RP_AVBON_AG       &PTC.GPDE_RP_AVBON_AG
PTC.GPDE_RP_AVBON_AN       &PTC.GPDE_RP_AVBON_AN
PTC.GPDE_RP_PVBON_AG       &PTC.GPDE_RP_PVBON_AG
PTC.GPDE_RP_PVBON_AN       &PTC.GPDE_RP_PVBON_AN
PTC.GPDE_RP_RVBON_AG       &PTC.GPDE_RP_RVBON_AG
PTC.GPDE_RP_RVBON_AN       &PTC.GPDE_RP_RVBON_AN
PTC.GPDE_RP_AVAG_MC        &PTC.GPDE_RP_AVAG_MC
PTC.GPDE_RP_AVAN_MC        &PTC.GPDE_RP_AVAN_MC
PTC.GPDE_RP_KVAG_MC        &PTC.GPDE_RP_KVAG_MC
PTC.GPDE_RP_KVAN_MC        &PTC.GPDE_RP_KVAN_MC
PTC.GPDE_RP_PVAG_MC        &PTC.GPDE_RP_PVAG_MC
PTC.GPDE_RP_PVAN_MC        &PTC.GPDE_RP_PVAN_MC
PTC.GPDE_RP_RVAG_MC        &PTC.GPDE_RP_RVAG_MC
PTC.GPDE_RP_RVAN_MC        &PTC.GPDE_RP_RVAN_MC
PTC.GPDE_RP_SIGRUNLM_A     &PTC.GPDE_RP_SIGRUNLM_A
PTC.GPDE_RP_SIGRUNLM_B     &PTC.GPDE_RP_SIGRUNLM_B
PTC.GPDE_RC_PRT_SIGN       &PTC.GPDE_RC_PRT_SIGN
PTC.GPDE_RP_CHAR01         &PTC.GPDE_RP_CHAR01
PTC.GPDE_RP_CHAR02         &PTC.GPDE_RP_CHAR02
SIC.GPDE_RP_MAR_MON        &SIC.GPDE_RP_MAR_MON
PTC.GPDE_RP_HIVOL_AMT      &PTC.GPDE_RP_HIVOL_AMT
PTC.GPDE_RP_CIVOL_AMT      &PTC.GPDE_RP_CIVOL_AMT
PTC.GPDE_RP_HIVLER_AMT     &PTC.GPDE_RP_HIVLER_AMT
PTC.GPDE_RP_CIVLER_AMT     &PTC.GPDE_RP_CIVLER_AMT
SIC.GPDE_DV_EMPL_CAT       &SIC.GPDE_DV_EMPL_CAT
PBDC.SEG_END_DT            &PBDC.SEG_END_DT
SIC.BA_CD                  &SIC.BA_CD
SIC.GPDE_SI_POS_IN_JOB     &SIC.GPDE_SI_POS_IN_JOB
SIC.GPDE_SI_EDUCATION      &SIC.GPDE_SI_EDUCATION
SIC.GPDE_BA_SCHL_DGR       &SIC.GPDE_BA_SCHL_DGR
SIC.GPDE_BA_PRF_DGR        &SIC.GPDE_BA_PRF_DGR
SIC.GPDE_BA_EMPL_TMP       &SIC.GPDE_BA_EMPL_TMP
SIC.GPDE_BA_CNTRCT_WRK     &SIC.GPDE_BA_CNTRCT_WRK
SIC.GPDE_SIP_REGION        &SIC.GPDE_SIP_REGION
SIC.GPDE_SI_PV_CHILD       &SIC.GPDE_SI_PV_CHILD
! wdu06-881b11 glidezone flag for display in social insurance page
SIC.GPDE_RP_RV_GZ_FLG      &SIC.GPDE_RP_RV_GZ_FLG
PBDC.STD_HOURS             &PBDC.STD_HOURS
PTC.GPDE_RP_AZGRS_BON      &PTC.GPDE_RP_AZGRS_BON
PTC.GPDE_RP_OAPPEN_ANL     &PTC.GPDE_RP_OAPPEN_ANL
PTC.GPDE_RP_OAPPEN_BON     &PTC.GPDE_RP_OAPPEN_BON
SIC.GPDE_SI_PROV_MAND      &SIC.GPDE_SI_PROV_MAND
PTC.GPDE_RP_AVDAYS_MC         &PTC.GPDE_RP_AVDAYS_MC
PTC.GPDE_RP_KVDAYS_MC         &PTC.GPDE_RP_KVDAYS_MC
PTC.GPDE_RP_PVDAYS_MC         &PTC.GPDE_RP_PVDAYS_MC
PTC.GPDE_RP_RVDAYS_MC         &PTC.GPDE_RP_RVDAYS_MC
PTC.GPDE_AZ_RP_S03_31     &PTC.GPDE_AZ_RP_S03_31
PTC.GPDE_AZ_RP_S03_41     &PTC.GPDE_AZ_RP_S03_41
! wdu06-881kug
PTC.GPDE_RP_KUG_KVCTB     &PTC.GPDE_RP_KUG_KVCTB
PTC.GPDE_RP_KUG_KVGRS     &PTC.GPDE_RP_KUG_KVGRS
PTC.GPDE_RP_KUG_PVCTB     &PTC.GPDE_RP_KUG_PVCTB
PTC.GPDE_RP_KUG_PVGRS     &PTC.GPDE_RP_KUG_PVGRS
PTC.GPDE_RP_KUG_RVCTB     &PTC.GPDE_RP_KUG_RVCTB
PTC.GPDE_RP_KUG_RVGRS     &PTC.GPDE_RP_KUG_RVGRS

!jjj
PTC.GPDE_KU_KUGKKAMT      &PTC.GPDE_KU_KUGKKAMT
PTC.GPDE_KU_KUGAMT        &PTC.GPDE_KU_KUGAMT

!adj09-Pension Fund
SIC.GPDE_RP_VW_ELIG

  let $PBDC.SEG_END_DT = &PTC.SLICE_END_DT
  let $GPDE_SI_PROV_MAND = &PTC.GPDE_SI_PROV_MAND
  let $SIC.GPDE_SI_PROV_MAND = &SIC.GPDE_SI_PROV_MAND
  let $ActualProv_Temp = &PTC.GPDE_SI_PROV_MAND

  do Format-DateTime(&PTC.PRD_END_DT,$PTC.PRD_END_DTCmp,{DEFCMP},'','')


  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else

      if (&PTC.GPDE_RP_KVGRS_MC <> 0 or &PTC.GPDE_RP_AVGRS_MC <> 0 or
          &PTC.GPDE_RP_RVGRS_MC <> 0 or &PTC.GPDE_RP_PVGRS_MC <> 0 or
          &PTC.GPDE_RP_KVAN_MC  <> 0 or &PTC.GPDE_RP_KVAG_MC  <> 0 or
          &PTC.GPDE_RP_RVAN_MC  <> 0 or &PTC.GPDE_RP_RVAG_MC  <> 0 or
          &PTC.GPDE_RP_AVAN_MC  <> 0 or &PTC.GPDE_RP_AVAG_MC  <> 0 or
          &PTC.GPDE_RP_PVAN_MC  <> 0 or &PTC.GPDE_RP_PVAG_MC  <> 0
          or &PTC.GPDE_RP_RIGRSM_AMT <> 0
          or &PTC.GPDE_RP_U1CTBM_AMT <> 0
          or &PTC.GPDE_RP_U2CTBM_AMT <> 0 or &PTC.GPDE_RP_OAPGRS_MC <> 0 or &PTC.GPDE_RP_OAPPEN_MC <> 0 or &PTC.GPDE_RP_SIGRUNLM_B <> 0)
          and (&SIC.GPDE_RP_MARCH_CLS = 1)
! adj08-890B15 added &PTC.GPDE_RP_SIGRUNLM_B
          let $Vorj = 'N'
          let $MarchCL = 'Y'
      else
          let $Vorj = 'Y'
          let $MarchCL = 'N'
      end-if
  end-if

  let $PTC.GPDE_AL_CPAY_ENDDT = &PTC.GPDE_AL_CPAY_ENDDT

  if $MarchCL = 'N'
     let $GPDE_DV_SV_CODE = &SIC.GPDE_DV_SV_CODE
     let $PRD_END_DT = rtrim(&PTC.PRD_END_DT,' ')
  else
     let $GPDE_DV_SV_CODE = &SIC.GPDE_DV_SV_CODE_M
     let $PRD_END_DT = rtrim(&SIC.GPDE_RP_MAR_MON,' ')
  end-if


    !
    ! get Betriebsnummer of employer by emplid
    !
    do GetEmployerNumberByEmplid($Emplid, #Empl_Rcd_Nbr, $Ctl_End_Dt, $GPDE_DO_BTNR)

    ! department data at year-end for the heading
    do GetYearendDepartmentDescr($Emplid, #Empl_Rcd_Nbr, $Ctl_End_Dt, $DeptId,$DeptDescr)


  !old:  do Get-GPDE_DO_BTNR-via-job($GPDE_SI_PROV_MAND, &PBDC.PAY_ENTITY, $PRD_END_DT, $GPDE_DO_BTNR)
  let $hdr_abr_si_provider  = $GPDE_SI_PROV_MAND
  let $hdr_abr_GPDE_DO_BTNR = $GPDE_DO_BTNR
  let $GPDE_SI_REGION = &SIC.GPDE_SIC_REGION
  ! +- let $GPDE_TX_MINER = &SIC.GPDE_SI_MINER
  ! +- let $GPDE_SI_REGION_save = $GPDE_SI_REGION
  ! +- let $GPDE_TX_MINER_save = $GPDE_TX_MINER
  ! +- let $GPDE_SI_PROV_MAND_save = $GPDE_SI_PROV_MAND
  let $ActualProv_save = $ActualProv_Temp
  let $NotPrinted = 'Y'
  if $MarchCL = 'Y' and $Vorj = 'N'
     ! remember last-year-currency
     let $Actual_Currency_Old = &PBDC.CURRENCY_CD
  end-if


  if ($Actual_Currency_Old  <> &PBDC.CURRENCY_CD or &PTC.PRD_END_DT <> $PTC.PRD_END_DT_Old) and
     (#zaehler <> 0)
     ! not executed for the first row when currecy stays the same
     let $ActCurr = $Actual_Currency_Old
     do TimeStamp('   calling Get-Data-Flexi')
     ! find and print flexi data
     ! parameters: $PTC.PRD_END_DT_Old
     do Get-Data-Flexi
     do TimeStamp('   returned from Get-Data-Flexi')
  end-if

  ! remember the period end date of row to detect period change in next row
  let $PTC.PRD_END_DT_Old = &PTC.PRD_END_DT
  if  ($Actual_Currency_Old  <> &PBDC.CURRENCY_CD) and (#zaehler <> 0)
     ! currency-change with this row ==> sums+new page
     use-report report2
     do Print-Sums-Abr

     !wdu 04b4: print ATZ KG only when amounts exist.
     if #RV-AG_Sum_UBKG <> 0 or #RV-Brutto_Sum_UBKG <> 0
         do Print-Sums-Abr-UBKG
     end-if


     ! +- let $GPDE_SI_REGION_save = $GPDE_SI_REGION_Old
     ! +- let $GPDE_TX_MINER_save = $GPDE_TX_MINER_Old
     ! +- let $GPDE_SI_PROV_MAND_save = $GPDE_SI_PROV_MAND_Old
     let $hdr_abr_si_provider  = $GPDE_SI_PROV_MAND_Old
    if $MarchCL = 'Y' and $Vorj = 'N'
       let $Actual_Currency_save = $Actual_Currency
       let $Actual_Currency_save_N = $Actual_Currency
    else
       let $Actual_Currency_save = $Actual_Currency_Old
       let $Actual_Currency_save_N = $Actual_Currency_Old
    end-if
     let $Actual_Currency_s  = $Actual_Currency_Old
     let $ActualProv_save = $ActualProv_Old
     let $SaveCurrency = $Actual_Currency_save
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
     let $ActualProv = $ActualProv_save
        use-report report2
        new-page
        let #page-count = 1
! +--     do InitialVar2
  end-if
  let $Current_RT_Type   = &PBDC.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PBDC.GPDE_ASOF_DT_EX_RT
  if rtrim($Current_DT_EX_RT, ' ') = ''
     let $Current_DT_EX_RT = $AsOfToday
  end-if
  if rtrim($Current_RT_Type, ' ') = ''
      let $Current_RT_Type = $BaseRtType
  end-if
  ! wdu06-881kug logically moved the addition further down
  ! -- let #PTC.GPDE_RP_SIGRSS_AMT  =     &PTC.GPDE_RP_SIGRSS_AMT + &PTC.GPDE_RP_OAPGRS_AMT
  ! -- let #PTC.GPDE_RP_SIGRSM_AMT  =     &PTC.GPDE_RP_SIGRSM_AMT + &PTC.GPDE_RP_OAPGRS_MC
  let #PTC.GPDE_RP_SIGRSS_AMT  =     &PTC.GPDE_RP_SIGRSS_AMT
  let #PTC.GPDE_RP_SIGRSM_AMT  =     &PTC.GPDE_RP_SIGRSM_AMT

  let #PTC.GPDE_RP_HICNTB_AMT  =     &PTC.GPDE_RP_HICNTB_AMT
  let #PTC.GPDE_RP_HICTBM_AMT  =     &PTC.GPDE_RP_HICTBM_AMT
  let #PTC.GPDE_RP_CICNTB_AMT  =     &PTC.GPDE_RP_CICNTB_AMT
  let #PTC.GPDE_RP_CICTBM_AMT  =     &PTC.GPDE_RP_CICTBM_AMT
  let #PTC.GPDE_RP_PICNTB_AMT  =     &PTC.GPDE_RP_PICNTB_AMT
  let #PTC.GPDE_RP_PICTBM_AMT  =     &PTC.GPDE_RP_PICTBM_AMT
  let #PTC.GPDE_RP_UICNTB_AMT  =     &PTC.GPDE_RP_UICNTB_AMT
  let #PTC.GPDE_RP_UICTBM_AMT  =     &PTC.GPDE_RP_UICTBM_AMT
  let #PTC.GPDE_RP_OAPGRS_AMT  =     &PTC.GPDE_RP_OAPGRS_AMT
! +-  let #PTC.GPDE_RP_OAPPEN_AMT  =     &PTC.GPDE_RP_OAPPEN_AMT
  let #PTC.GPDE_RP_OAPGRS_MC   =     &PTC.GPDE_RP_OAPGRS_MC
  let #PTC.GPDE_RP_OAPPEN_MC   =     &PTC.GPDE_RP_OAPPEN_MC
  let #PTC.GPDE_RP_RIGRSS_AMT  =   &PTC.GPDE_RP_RIGRSS_AMT
  let #PTC.GPDE_RP_U1CNTB_AMT  =   &PTC.GPDE_RP_U1CNTB_AMT
  let #PTC.GPDE_RP_U2CNTB_AMT  =   &PTC.GPDE_RP_U2CNTB_AMT
  let #PTC.GPDE_RI_PCT1        =   &PTC.GPDE_RI_PCT1
  let #PTC.GPDE_RI_PCT2        =   &PTC.GPDE_RI_PCT2
  let #PTC.GPDE_RP_RIGRSM_AMT  =   &PTC.GPDE_RP_RIGRSM_AMT
  let #PTC.GPDE_RP_U1CTBM_AMT  =   &PTC.GPDE_RP_U1CTBM_AMT
  let #PTC.GPDE_RP_U2CTBM_AMT  =   &PTC.GPDE_RP_U2CTBM_AMT
  let #PTC.GPDE_RI_PCT1_MC     =   &PTC.GPDE_RI_PCT1_MC
  let #PTC.GPDE_RI_PCT2_MC     =   &PTC.GPDE_RI_PCT2_MC
  let #PTC.GPDE_RP_AVGRS_ANLZ  =     &PTC.GPDE_RP_AVGRS_ANLZ
  let #PTC.GPDE_RP_AVGRS_BON   =      &PTC.GPDE_RP_AVGRS_BON
  let #PTC.GPDE_RP_AVGRS_MC    =       &PTC.GPDE_RP_AVGRS_MC
  let #PTC.GPDE_RP_KVGRS_ANLZ  =     &PTC.GPDE_RP_KVGRS_ANLZ
  let #PTC.GPDE_RP_KVGRS_BON   =     &PTC.GPDE_RP_KVGRS_BON
  let #PTC.GPDE_RP_KVGRS_MC    =       &PTC.GPDE_RP_KVGRS_MC
  let #PTC.GPDE_RP_PVGRS_ANLZ  =     &PTC.GPDE_RP_PVGRS_ANLZ
  let #PTC.GPDE_RP_PVGRS_BON     =   &PTC.GPDE_RP_PVGRS_BON
  let #PTC.GPDE_RP_PVGRS_MC     =    &PTC.GPDE_RP_PVGRS_MC
  let #PTC.GPDE_RP_RVGRS_ANLZ     =  &PTC.GPDE_RP_RVGRS_ANLZ
  let #PTC.GPDE_RP_RVGRS_BON      =  &PTC.GPDE_RP_RVGRS_BON
  let #PTC.GPDE_RP_RVGRS_MC       =  &PTC.GPDE_RP_RVGRS_MC
  let #PTC.GPDE_RP_AVLFD_AG      =   &PTC.GPDE_RP_AVLFD_AG
  let #PTC.GPDE_RP_AVLFD_AN       =  &PTC.GPDE_RP_AVLFD_AN
  let #PTC.GPDE_RP_KVLFD_AG       =  &PTC.GPDE_RP_KVLFD_AG
  let #PTC.GPDE_RP_KVLFD_AN       =  &PTC.GPDE_RP_KVLFD_AN
  let #PTC.GPDE_RP_PVLFD_AG       =  &PTC.GPDE_RP_PVLFD_AG
  let #PTC.GPDE_RP_PVLFD_AN       =  &PTC.GPDE_RP_PVLFD_AN
  let #PTC.GPDE_RP_RVLFD_AG        = &PTC.GPDE_RP_RVLFD_AG
  let #PTC.GPDE_RP_RVLFD_AN    =     &PTC.GPDE_RP_RVLFD_AN
  let #PTC.GPDE_RP_KVBON_AG       =  &PTC.GPDE_RP_KVBON_AG
  let #PTC.GPDE_RP_KVBON_AN       =  &PTC.GPDE_RP_KVBON_AN
  let #PTC.GPDE_RP_AVBON_AG        = &PTC.GPDE_RP_AVBON_AG
  let #PTC.GPDE_RP_AVBON_AN       =  &PTC.GPDE_RP_AVBON_AN
  let #PTC.GPDE_RP_PVBON_AG       =  &PTC.GPDE_RP_PVBON_AG
  let #PTC.GPDE_RP_PVBON_AN       =  &PTC.GPDE_RP_PVBON_AN
  let #PTC.GPDE_RP_RVBON_AG       =  &PTC.GPDE_RP_RVBON_AG
  let #PTC.GPDE_RP_RVBON_AN       =  &PTC.GPDE_RP_RVBON_AN
  let #PTC.GPDE_RP_AVAG_MC        =  &PTC.GPDE_RP_AVAG_MC
  let #PTC.GPDE_RP_AVAN_MC        =  &PTC.GPDE_RP_AVAN_MC
  let #PTC.GPDE_RP_KVAG_MC        =  &PTC.GPDE_RP_KVAG_MC
  let #PTC.GPDE_RP_KVAN_MC        =  &PTC.GPDE_RP_KVAN_MC
  let #PTC.GPDE_RP_PVAG_MC        =  &PTC.GPDE_RP_PVAG_MC
  let #PTC.GPDE_RP_PVAN_MC       =   &PTC.GPDE_RP_PVAN_MC
  let #PTC.GPDE_RP_RVAG_MC        =  &PTC.GPDE_RP_RVAG_MC
  let #PTC.GPDE_RP_RVAN_MC        =  &PTC.GPDE_RP_RVAN_MC
  let #PTC.GPDE_RP_SIGRUNLM_A     =  &PTC.GPDE_RP_SIGRUNLM_A
  let #PTC.GPDE_RP_SIGRUNLM_B     =  &PTC.GPDE_RP_SIGRUNLM_B
  let $RetroSign                 =  &PTC.GPDE_RC_PRT_SIGN
  let #PTC.GPDE_RP_HIVOL_AMT   =   &PTC.GPDE_RP_HIVOL_AMT
  let #PTC.GPDE_RP_CIVOL_AMT   =   &PTC.GPDE_RP_CIVOL_AMT
  let #PTC.GPDE_RP_HIVLER_AMT  =   &PTC.GPDE_RP_HIVLER_AMT
  let #PTC.GPDE_RP_CIVLER_AMT  =   &PTC.GPDE_RP_CIVLER_AMT
  let #PTC.GPDE_RP_AZGRS_BON   =   &PTC.GPDE_RP_AZGRS_BON
  let #PTC.GPDE_RP_OAPPEN_ANL  =   &PTC.GPDE_RP_OAPPEN_ANL
  let #PTC.GPDE_RP_OAPPEN_BON  =   &PTC.GPDE_RP_OAPPEN_BON
  let $Actual_Currency = &PBDC.CURRENCY_CD
  let #PTC.GPDE_AZ_RP_S03_31   = &PTC.GPDE_AZ_RP_S03_31
  let #PTC.GPDE_AZ_RP_S03_41   = &PTC.GPDE_AZ_RP_S03_41
  ! wdu06-881kug
  let #PTC.GPDE_RP_KUG_KVCTB   = &PTC.GPDE_RP_KUG_KVCTB
  let #PTC.GPDE_RP_KUG_KVGRS   = &PTC.GPDE_RP_KUG_KVGRS
  let #PTC.GPDE_RP_KUG_PVCTB   = &PTC.GPDE_RP_KUG_PVCTB
  let #PTC.GPDE_RP_KUG_PVGRS   = &PTC.GPDE_RP_KUG_PVGRS
  let #PTC.GPDE_RP_KUG_RVCTB   = &PTC.GPDE_RP_KUG_RVCTB
  let #PTC.GPDE_RP_KUG_RVGRS   = &PTC.GPDE_RP_KUG_RVGRS

  !jjj
  let #PTC.GPDE_KU_KUGKKAMT    = &PTC.GPDE_KU_KUGKKAMT
  let #PTC.GPDE_KU_KUGAMT      = &PTC.GPDE_KU_KUGAMT


  if $MarchCL = 'Y' and $Vorj = 'N'
        do Format-DateTime($last_year, $last_year_cmp, {DEFCMP}, '', '')
           let $Sticht = '2002'  || '01' ||  '01'
       do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
       do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')
       if $last_year_cmp < $Stichtag
            !show 'doing DEM conversion $$'
            ! Attention: rebuilds all #xxx elements from above
            do CX_CurrencyConvert01
       end-if
  end-if

  ! wdu06-881kug: adding up Melde-SV components here now
  ! moved this step from CX_CurrencyConvert01 to here, removed other addition from further up.
  ! Adding in the gross fo KUG as well (not in MC).
  !
  ! We need to build the sum for Melde_SV here because it is printed in the first box, before
  ! any AZ or KUG components are printed.
  let #PTC.GPDE_RP_SIGRSS_AMT = #PTC.GPDE_RP_SIGRSS_AMT + #PTC.GPDE_RP_OAPGRS_AMT + #PTC.GPDE_RP_KUG_RVGRS
  let #PTC.GPDE_RP_SIGRSM_AMT = #PTC.GPDE_RP_SIGRSM_AMT + #PTC.GPDE_RP_OAPGRS_MC
  ! --*+*

  let $Actual_Currency_save = $Actual_Currency
  let $Actual_Currency_save_N = $Actual_Currency
  let $Actual_Currency_s  = $Actual_Currency
  let $SaveCurrency = $Actual_Currency_save
  if $Actual_Currency_save = 'DEM'
     let $Actual_Currency_save = 'DM'
  end-if

  if $Actual_Currency_save = 'EUR'
     let $Actual_Currency_save = $EUROCHAR
  end-if
  if $GPDE_SI_PROV_MAND <> $SIC.GPDE_SI_PROV_MAND
     let #PTC.GPDE_RP_SIGRUNLM_A = 0
     let #PTC.GPDE_RP_SIGRUNLM_B = 0
     let #PTC.GPDE_RP_SIGRSM_AMT = 0
     let #PTC.GPDE_RP_SIGRSS_AMT = 0
  end-if
  let $Emplid                = &PBDC.EMPLID
  let #Empl_Rcd_Nbr               = &PBDC.EMPL_RCD
  let $EE_Name               = rtrim(&PERNC.NAME,' ')
  let $SI_Provider           = $GPDE_SI_PROV_MAND
  let $SV_Code               = $GPDE_DV_SV_CODE
  let #SIC.GPDE_RP_MARCH_CLS  = &SIC.GPDE_RP_MARCH_CLS
  let $Ctl_Pay_End_Dt        = $PRD_END_DT
  let $KV_Code               = substr($SV_Code,1,1)
  let $AV_Code               = substr($SV_Code,3,1)
  let $RV_Code               = substr($SV_Code,2,1)
  let $PV_Code               = substr($SV_Code,4,1)
  let $PTC.GPDE_RP_CHAR02     = &PTC.GPDE_RP_CHAR02
  !GUl07-890b10
  let $PTC.GPDE_RP_CHAR01     = &PTC.GPDE_RP_CHAR01
  let $GPDE_DV_EMPL_CAT      = rtrim(&SIC.GPDE_DV_EMPL_CAT,' ')
  let $SIC.BA_CD              =   &SIC.BA_CD
  let $SIC.GPDE_SI_POS_IN_JOB =   &SIC.GPDE_SI_POS_IN_JOB
  let $SIC.GPDE_SI_EDUCATION  =   &SIC.GPDE_SI_EDUCATION
  let $SIC.GPDE_BA_SCHL_DGR   =   &SIC.GPDE_BA_SCHL_DGR
  let $SIC.GPDE_BA_PRF_DGR    =   &SIC.GPDE_BA_PRF_DGR
  let $SIC.GPDE_BA_EMPL_TMP   =   &SIC.GPDE_BA_EMPL_TMP
  let $SIC.GPDE_BA_CNTRCT_WRK =   &SIC.GPDE_BA_CNTRCT_WRK
  let $SIC.GPDE_SIP_REGION    =   &SIC.GPDE_SIP_REGION
  let $SIC.GPDE_SI_PV_CHILD   =   &SIC.GPDE_SI_PV_CHILD
  let #PBDC.STD_HOURS         =   &PBDC.STD_HOURS
  let $FieldName = 'GPDE_SI_REGION'
  let $FieldValue = &SIC.GPDE_SIP_REGION
  
  !Function to get Appropriate Region name in case of MarchClause - byarUPDE
     if $MarchCL = 'Y'
        let $strGPDE_REGION = &SIC.GPDE_SIP_REGION
        do GetRegion_MC($PRD_END_DT,$Emplid,$SI_Provider,$strGPDE_REGION)
        let $FieldValue = $strGPDE_REGION
    end-if
  
  do Read-Translate-Table
  let $SIC.GPDE_SIP_REGION = substr($XlatShortName,1,12)
  do Format-Number(#PBDC.STD_HOURS,$PBDC.STD_HOURS,'B99,999.99')
  if &SIC.GPDE_SI_POS_IN_JOB <> ' ' and &SIC.GPDE_SI_EDUCATION <> ' ' 
     let $TTSC = $SIC.BA_CD || $SIC.GPDE_SI_POS_IN_JOB || $SIC.GPDE_SI_EDUCATION
  else
     let $TTSC = $SIC.BA_CD || $SIC.GPDE_BA_SCHL_DGR || $SIC.GPDE_BA_PRF_DGR || $SIC.GPDE_BA_EMPL_TMP || $SIC.GPDE_BA_CNTRCT_WRK
  end-if
  do Get-Names-Lohnkonto($Emplid,$Name_Type,$Emp_Name,$NAME_TITLE,$LastName,$FirstName,
                $NAME_PREFIX,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$BIRTHCOUNTRY,
                $BIRTHSTATE,$BIRTHPLACE)
  do Get-Names-Lohnkonto($Emplid,'MDN',$Emp_Name_mdn,$NAME_TITLE_mdn,$LastName_mdn,$FirstName_mdn,
                $NAME_PREFIX_mdn,$NAME_ROYAL_PREFIX_mdn,$NAME_ROYAL_SUFFIX_mdn,$BIRTHCOUNTRY_mdn,
                $BIRTHSTATE_mdn,$BIRTHPLACE_mdn)
  if $Emp_Name = ' '
    show 'Could not find a name to print for : ' $Emplid
  end-if
  do Get-Address ($Emplid,$Addr_Type,$Address,$Address2,
     $Postal,$City,$State,$Country,$EuroZipCity)
  let #SV_Days               = &PTC.GPDE_RP_SIDAYS
  let #SV_Gross              = #PTC.GPDE_RP_SIGRSS_AMT
  let #PTC.GPDE_RP_SIDAYS     =  &PTC.GPDE_RP_SIDAYS
  let #PTC.GPDE_RP_AVDAYS     =  &PTC.GPDE_RP_AVDAYS
  let #PTC.GPDE_RP_KVDAYS     =  &PTC.GPDE_RP_KVDAYS
  let #PTC.GPDE_RP_PVDAYS     =  &PTC.GPDE_RP_PVDAYS
  let #PTC.GPDE_RP_AVDAYS_MC     =  &PTC.GPDE_RP_AVDAYS_MC
  let #PTC.GPDE_RP_KVDAYS_MC     =  &PTC.GPDE_RP_KVDAYS_MC
  let #PTC.GPDE_RP_PVDAYS_MC     =  &PTC.GPDE_RP_PVDAYS_MC
  let #PTC.GPDE_RP_RVDAYS_MC     =  &PTC.GPDE_RP_RVDAYS_MC
  let #SI.GPDE_RP_MARCH_CLS  = &SIC.GPDE_RP_MARCH_CLS
  let #PTC.GPDE_RP_KVDAYS_BON = &PTC.GPDE_RP_KVDAYS_BON
  let #PTC.GPDE_RP_RVDAYS_BON = &PTC.GPDE_RP_RVDAYS_BON
  let #PTC.GPDE_RP_AVDAYS_BON = &PTC.GPDE_RP_AVDAYS_BON
  let #PTC.GPDE_RP_PVDAYS_BON = &PTC.GPDE_RP_PVDAYS_BON
  if $KV_Code = '0'
     let #PTC.GPDE_RP_KVDAYS = 0
     let #PTC.GPDE_RP_KVDAYS_MC = 0
     let #PTC.GPDE_RP_KVDAYS_BON = 0
  end-if
  if $AV_Code = '0'
     let #PTC.GPDE_RP_AVDAYS = 0
     let #PTC.GPDE_RP_AVDAYS_MC = 0
     let #PTC.GPDE_RP_AVDAYS_BON = 0
  end-if
  if $RV_Code = '0'
     let #PTC.GPDE_RP_SIDAYS = 0
     let #PTC.GPDE_RP_RVDAYS_MC = 0
     let #PTC.GPDE_RP_RVDAYS_BON = 0
     let #SV_Days = 0
  end-if
  if $PV_Code = '0'
     let #PTC.GPDE_RP_PVDAYS = 0
     let #PTC.GPDE_RP_PVDAYS_MC = 0
     let #PTC.GPDE_RP_PVDAYS_BON = 0
  end-if
  !
  ! wdu06-881kug -- the following l-values seem to be no longer used.
  if $MarchCL = 'Y' and $Vorj = 'N'
     let #AV-AG_Sum_Temp = #PTC.GPDE_RP_AVAG_MC + #PTC.GPDE_RP_AVBON_AG
     let #KV-AG_Sum_Temp = #PTC.GPDE_RP_KVAG_MC + #PTC.GPDE_RP_KVBON_AG
     let #PV-AG_Sum_Temp = #PTC.GPDE_RP_PVAG_MC + #PTC.GPDE_RP_PVBON_AG
     let #RV-AG_Sum_Temp = #PTC.GPDE_RP_RVAG_MC + #PTC.GPDE_RP_RVBON_AG
     let #AV-AN_Sum_Temp = #PTC.GPDE_RP_AVAN_MC + #PTC.GPDE_RP_AVBON_AN
     let #KV-AN_Sum_Temp = #PTC.GPDE_RP_KVAN_MC + #PTC.GPDE_RP_KVBON_AN
     let #PV-AN_Sum_Temp = #PTC.GPDE_RP_PVAN_MC + #PTC.GPDE_RP_PVBON_AN
     let #RV-AN_Sum_Temp = #PTC.GPDE_RP_RVAN_MC + #PTC.GPDE_RP_RVBON_AN
     ! +-- let #Brutto_Sum_TempKV = #PTC.GPDE_RP_KVGRS_MC + #PTC.GPDE_RP_KVGRS_BON
     ! +-- let #Brutto_Sum_TempAV = #PTC.GPDE_RP_AVGRS_MC + #PTC.GPDE_RP_AVGRS_BON
     ! +-- let #Brutto_Sum_TempPV = #PTC.GPDE_RP_PVGRS_MC + #PTC.GPDE_RP_PVGRS_BON
     ! +-- let #Brutto_Sum_TempRV = #PTC.GPDE_RP_RVGRS_MC + #PTC.GPDE_RP_RVGRS_BON
  else
     let #AV-AG_Sum_Temp    = #PTC.GPDE_RP_AVLFD_AG + #PTC.GPDE_RP_AVBON_AG
     let #KV-AG_Sum_Temp    = #PTC.GPDE_RP_KVLFD_AG + #PTC.GPDE_RP_KVBON_AG
     let #PV-AG_Sum_Temp    = #PTC.GPDE_RP_PVLFD_AG + #PTC.GPDE_RP_PVBON_AG
     let #RV-AG_Sum_Temp    = #PTC.GPDE_RP_RVLFD_AG + #PTC.GPDE_RP_RVBON_AG
     let #AV-AN_Sum_Temp    = #PTC.GPDE_RP_AVLFD_AN + #PTC.GPDE_RP_AVBON_AN
     let #KV-AN_Sum_Temp    = #PTC.GPDE_RP_KVLFD_AN + #PTC.GPDE_RP_KVBON_AN
     let #PV-AN_Sum_Temp    = #PTC.GPDE_RP_PVLFD_AN + #PTC.GPDE_RP_PVBON_AN
     let #RV-AN_Sum_Temp    = #PTC.GPDE_RP_RVLFD_AN + #PTC.GPDE_RP_RVBON_AN
     ! +-- let #Brutto_Sum_TempKV = #PTC.GPDE_RP_KVGRS_ANLZ + #PTC.GPDE_RP_KVGRS_BON
     ! +-- let #Brutto_Sum_TempAV = #PTC.GPDE_RP_AVGRS_ANLZ + #PTC.GPDE_RP_AVGRS_BON
     ! +-- let #Brutto_Sum_TempPV = #PTC.GPDE_RP_PVGRS_ANLZ + #PTC.GPDE_RP_PVGRS_BON
     ! +-- let #Brutto_Sum_TempRV = #PTC.GPDE_RP_RVGRS_ANLZ + #PTC.GPDE_RP_RVGRS_BON
  end-if


  ! wdu06-881kug -- obsolete SV code removal

   let #AtzContributionNonSick = 0
  let #OAPGRS_AMT = 0
  let $ATZ = 'N'
  if $march = 'Y' and $Vorj = 'N'
     if #PTC.GPDE_RP_OAPGRS_MC <> 0 or #PTC.GPDE_RP_OAPPEN_MC <> 0
        let $ATZ = 'Y'
        let #AtzContributionNonSick = #PTC.GPDE_RP_OAPPEN_MC
        let #OAPGRS_AMT = #PTC.GPDE_RP_OAPGRS_MC
     end-if
  else
! --     if #PTC.GPDE_RP_OAPGRS_AMT <> 0 or #PTC.GPDE_RP_OAPPEN_AMT <> 0
!wdu 04b4 replaced expression
     if #PTC.GPDE_RP_OAPGRS_AMT <> 0 or #PTC.GPDE_RP_OAPPEN_ANL <> 0  or #PTC.GPDE_RP_OAPPEN_BON <> 0
        let $ATZ = 'Y'
! +-        let #AtzContributionNonSick = #PTC.GPDE_RP_OAPPEN_AMT
! wdu 04b4: replaced expression to exclude the amounts for sick fill.
        let #AtzContributionNonSick = #PTC.GPDE_RP_OAPPEN_ANL + #PTC.GPDE_RP_OAPPEN_BON
        let #OAPGRS_AMT = #PTC.GPDE_RP_OAPGRS_AMT
     end-if
  end-if
  !
  ! ATZ sick fill amounts (31=grs, 41=contrib)
  let #S03_31 = #PTC.GPDE_AZ_RP_S03_31
  let #S03_41 = #PTC.GPDE_AZ_RP_S03_41


  !
  #debug show 'debug ----- ' $Emplid '  $PRD_END_DT=' $PRD_END_DT
  #debug show 'prd_end_dt=' &PTC.PRD_END_DT ' $MarchCL=' $MarchCL ' $Vorj=' $Vorj ' SIC.MAR_CLS=' &SIC.GPDE_RP_MARCH_CLS
  #debug show '$SI_Provider=' $SI_Provider ' $SV_Code=' $SV_Code ' $PTC.GPDE_RP_CHAR02=' $PTC.GPDE_RP_CHAR02
  #debug show '---------'

!adj08-890b14:issue with retro pages
! Retro pages should be printed when provider ID exists.
  if $PTC.GPDE_RP_CHAR02 <> 'N'
     use-report report2
     do Print-EE-Data-Abr
     let $PrintedLohk = 'Y'
  end-if
  ! GUl07-890b10  march print issue
  !$PTC.GPDE_RP_CHAR01: 1=current 2=march 3=both
!  let $RowPrintCond = 'N'
!  if ( $march = 'N' )
!     if ( $PTC.GPDE_RP_CHAR01 = '1'  or $PTC.GPDE_RP_CHAR01 = '3'  )
!         let $RowPrintCond = 'Y'
!     end-if
!  else
     ! march clause
!     if ( $PTC.GPDE_RP_CHAR01 <> '1' or $Korr = 'Y' )
!         let $RowPrintCond = 'Y'
!     end-if
!  end-if

  let $WasPrintedData = 'Y'
  let $GPDE_SI_PROV_MAND_Old = $GPDE_SI_PROV_MAND
  let $GPDE_DO_BTNR_Old = $GPDE_DO_BTNR
  ! +- let $GPDE_SI_REGION_Old = $GPDE_SI_REGION
  ! +- let $GPDE_TX_MINER_Old = $GPDE_TX_MINER
  let $ActualProv_Old = $ActualProv_Temp
  let $Actual_Currency_Old = $Actual_Currency
  let #zaehler = #zaehler + 1               ! row-counter mode: inc-after
FROM PS_NAMES PERNC,PS_GPDE_RP_TX03A PTC,PS_GPDE_RP_0001_VW PBDC,PS_GPDE_RP_SI01_VW SIC
WHERE PERNC.EMPLID       = $RP1.EMPLID
AND   PTC.EMPL_RCD =   &RP1.EMPL_RCD
AND   PERNC.EMPLID       = PTC.EMPLID
!AND SIC.GPDE_RP_VW_ELIG <> 1
!AND SIC.GPDE_SI_PROV_MAND = PTC.GPDE_SI_PROV_MAND
!
AND   PBDC.EMPLID        = PTC.EMPLID
AND   PBDC.CAL_RUN_ID    = PTC.CAL_RUN_ID
AND   PBDC.EMPL_RCD      = PTC.EMPL_RCD
AND   PBDC.GP_PAYGROUP   = PTC.GP_PAYGROUP
AND   PBDC.CAL_ID        = PTC.CAL_ID
AND   PBDC.RSLT_SEG_NUM  = PTC.RSLT_SEG_NUM
AND   PTC.SLICE_END_DT = SIC.SLICE_END_DT
!
AND   PBDC.EMPLID = SIC.EMPLID
AND   PBDC.CAL_RUN_ID = SIC.CAL_RUN_ID
AND   PBDC.EMPL_RCD = SIC.EMPL_RCD
AND   PBDC.GP_PAYGROUP = SIC.GP_PAYGROUP
AND   PBDC.CAL_ID      = SIC.CAL_ID
AND   PBDC.RSLT_SEG_NUM = SIC.RSLT_SEG_NUM
AND   PBDC.SEG_END_DT = SIC.SEG_END_DT
!
AND PERNC.NAME_TYPE = (select NMTVW.NAME_TYPE from PS_GPDE_NMTYPE1_VW NMTVW
                                             where NMTVW.EMPLID = PBDC.EMPLID AND NMTVW.EFFDT = (
                                                 select MAX(NMTVW2.EFFDT) from  PS_GPDE_NMTYPE1_VW NMTVW2
                                                     where NMTVW2.EMPLID = NMTVW.EMPLID
                                                     AND NMTVW2.EFFDT <= $Ctl_Curr_Pay_End_Dt) )
AND PERNC.EFFDT =(select max(PERN1.EFFDT)
                 from PS_NAMES PERN1
                 WHERE PERN1.EMPLID = PERNC.EMPLID
                 AND PERN1.NAME_TYPE = PERNC.NAME_TYPE ! jjj
                 AND PERN1.EFFDT <= $Ctl_Curr_Pay_End_Dt)
AND PBDC.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit]
[$condition_abr]
[$order1]
end-select


let $wsPr = 'N'
if $NotPrinted = 'Y'
  ! +- let $GPDE_SI_REGION_save = $GPDE_SI_REGION
  ! +- let $GPDE_TX_MINER_save = $GPDE_TX_MINER
  ! +- let $GPDE_SI_PROV_MAND_save = $GPDE_SI_PROV_MAND
  let $hdr_abr_si_provider  = $GPDE_SI_PROV_MAND

  let $ActCurr = $Actual_Currency_Old
  do TimeStamp('   calling Get-Data-Flexi(2)')
  ! find and print flexi data
  ! parameters: $PTC.PRD_END_DT_Old (!)
  do Get-Data-Flexi
  do TimeStamp('   returning from Get-Data-Flexi(2)')

     use-report report2
     do Print-Sums-Abr

     !wdu 04b4: print ATZ KG only when amounts exist.
     if #RV-AG_Sum_UBKG <> 0 or #RV-Brutto_Sum_UBKG <> 0
         do Print-Sums-Abr-UBKG
     end-if

 let $wsPr = 'Y'
 let $ActualProv = $ActualProv_Temp
     use-report report2
     new-page
! +-- do InitialVar2
end-if
end-procedure




!**********************************************************************
begin-procedure PrintPagesForOneEmployeeCompressed
do TimeStamp('(PrintPagesForOneEmployeeCompressed)')
!*** keine Maerz-Klausel
do Get-Max-CpayEndDate

! check the parameters specified on the runcontrol
!
if rtrim($Ctl_Curr_Pay_End_DT,' ') <> ''
   do Convert-to-DTU-Date($Ctl_Curr_Pay_End_DT,$DTU-Old)
   do dtu-add-months($DTU-Old,-12,$Dtu-New)
   do Convert-from-DTU-Date($Dtu-New,$Last_Year)
   do Format-DateTime($Last_Year,$Comp-Out,{DEFCMP},'','')
   let $yy = substr($Comp-Out,1,4)
   let $Date-In = $yy || '1231000000'
   do Format-DateTime($Date-In,$Last_Year,{DEFCMP},'','native')
   let $StichLastJahr = $yy
   let $StichJahr = '2002'
   do ConvertToComponents($Ctl_Curr_Pay_End_DT,$HD_yy,$HD_mm,$HD_dd)
end-if
 if rtrim($Ctl_Year,' ') <> ''
    let $BegMonthStr = $Ctl_Year || '0101000000'
    do Format-DateTime($BegMonthStr,$BegYearAct,{DEFCMP},'','native')
    do Format-DateTime($BegYearAct,$BegYearActCmp,{DEFCMP},'','')
    do Format-DateTime($Ctl_Curr_Pay_End_DT,$CtlPayEnd_DTCmp,{DEFCMP},'','')
    let $EndMonthStr = $Ctl_Year || '1231000000'
    do Format-DateTime($EndMonthStr,$EndYearAct,{DEFCMP},'','native')
    do Format-DateTime($EndYearAct,$EndYearActCmp,{DEFCMP},'','')
 else
    let $BegYearActCmp = ''
    let $CtlPayEnd_DTCmp = ''
 end-if

! ---------- NO Marchclause ---------
let $march = 'N'
let $sav_Currency = ' '
let $march_crit = ' and PTC.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTC.PRD_END_DT <= ' || '''' || $EndYearAct || ''''

let $march_critF = ' and FLX.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and FLX.PRD_END_DT <= ' || '''' || $EndYearAct || ''''

!adj09-print SIC.GPDE_RP_VW_ELIG = '1' on separate section
let $condition_prof = ' AND SIC.GPDE_RP_VW_ELIG <> 1 '

let $order1 = 'ORDER BY PBDC.CURRENCY_CD DESC,PBDC.EMPLID,'||
              'PTC.PRD_END_DT,PBDC.SEG_END_DT,PTC.SLICE_END_DT,PTC.GPDE_AL_CPAY_ENDDT,' ||
              'PTC.GPDE_RC_PRT_SIGN,PTC.GPDE_RP_CHAR01'
let $order1F = 'ORDER BY FLX.PRD_END_DT DESC,FLX.SLICE_END_DT,FLX.GPDE_AL_CPAY_ENDDT'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '1'
! -- display 'body-4 Seitennr'
! -- display $SeitenNr

do Print_comp_Lohnkonto_SVDaten
if $PrintedLohk = 'N'
   goto NoMeldungen
end-if

! ---------- WITH Marchclause ---------
let $march = 'Y'
let $Korr = 'Y'
!adj08-890b15 check march_cls
let $march_crit = ' and ((PTC.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')' ||
    ' or (PTC.GPDE_RP_KVGRS_MC <> 0 or PTC.GPDE_RP_AVGRS_MC <> 0 or ' ||
    'PTC.GPDE_RP_RVGRS_MC <> 0 or PTC.GPDE_RP_PVGRS_MC <> 0 or ' ||
    'PTC.GPDE_RP_KVAN_MC <> 0 or PTC.GPDE_RP_KVAG_MC <> 0 or ' ||
    'PTC.GPDE_RP_RVAN_MC <> 0 or PTC.GPDE_RP_RVAG_MC <> 0 or ' ||
    'PTC.GPDE_RP_AVAN_MC <> 0 or PTC.GPDE_RP_AVAG_MC <> 0 or ' ||
    'PTC.GPDE_RP_PVAN_MC <> 0 or PTC.GPDE_RP_PVAG_MC <> 0' ||
    ' or PTC.GPDE_RP_RIGRSM_AMT <> 0 or PTC.GPDE_RP_U1CTBM_AMT <> 0 ' ||
    ' or PTC.GPDE_RP_U2CTBM_AMT <> 0 or PTC.GPDE_RP_SIGRUNLM_B <> 0 ' || 'and SIC.GPDE_RP_MARCH_CLS = 1'||
    ') ) ' || ' and PTC.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''

let $march_critF = ' and (FLX.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')'
let $order1 = 'ORDER BY PBDC.EMPLID,'||
              'PTC.PRD_END_DT,PBDC.SEG_END_DT,PTC.SLICE_END_DT,PTC.GPDE_AL_CPAY_ENDDT,' ||
              'PTC.GPDE_RC_PRT_SIGN,PTC.GPDE_RP_CHAR01'
let $order1F = 'ORDER BY FLX.PRD_END_DT DESC,FLX.SLICE_END_DT,FLX.GPDE_AL_CPAY_ENDDT'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '1'
! -- display 'body-5 Seitennr'
! -- display $SeitenNr

do Print_comp_Lohnkonto_SVDaten

!-----Berufsständische Versorgungseinrichtungen------NO Marchclause
let $march = 'N'
let $Korr = 'N'
let $SeitenNr = '11'
let $march_crit_TX03 = ' and TX03.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and TX03.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
let $march_crit_TX03a1 = ' and TX03a1.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and TX03a1.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
let $order1 = 'ORDER BY TX03.EMPLID,'||
              'TX03.PRD_END_DT,TX03.SLICE_END_DT,TX03.GPDE_AL_CPAY_ENDDT,' ||
              'TX03.GPDE_RC_PRT_SIGN'
do PensionFundChk

! ---------- WITH Marchclause ---------
let $march = 'Y'
let $Korr = 'Y'
let $SeitenNr = '11'
let $march_crit_TX03MC = ' and ((TX03a1MC.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')' ||
    ' or (BV1aMC.GPDE_RP_SIGRUNLM_B <> 0 or BV1aMC.GPDE_RP_PICTBM_AMT <> 0 ' ||
    'and SI02aMC.GPDE_RP_MARCH_CLS = 1'|| ') ) ' ||  ' and TX03a1MC.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''


let $march_crit_TX03 = ' and ((TX03MC.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')' ||
    ' or (BVMC.GPDE_RP_SIGRUNLM_B <> 0 or BVMC.GPDE_RP_PICTBM_AMT <> 0 ' ||
    'and SI02MC.GPDE_RP_MARCH_CLS = 1'|| ') ) ' ||  ' and TX03MC.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''

let $order1 = 'ORDER BY TX03MC.EMPLID,'||
              'TX03MC.PRD_END_DT,TX03MC.SLICE_END_DT,TX03MC.GPDE_AL_CPAY_ENDDT,' ||
              'TX03MC.GPDE_RC_PRT_SIGN'

do PensionFundChk_MC


!--------------- Print Tax --------------
let $march = 'N'
let $Korr = 'N'
let $march_crit_S1 = ' and PTCS1.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTCS1.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderS1 = 'ORDER BY PBDS1.CURRENCY_CD DESC,PBDS1.EMPLID,PBDS1.EMPL_RCD,'||
              'PTCS1.PRD_END_DT,PTCS1.SEG_END_DT,PTCS1.GPDE_AL_CPAY_ENDDT,PTCS1.GPDE_RC_PRT_SIGN'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '2'
! -- display 'body-6 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Steuer


!--------------- Print Tax (correction previous year) --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_S1 = ' and PTCS1.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and PTCS1.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '2'
! -- display 'body-7 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Steuer


!--------------- ? --------------
let $march_crit_S2T = ' '
let $march = 'N'
let $Korr = 'N'
let $march_crit_S2 = ' and PTCBN.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTCBN.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderS2 = 'ORDER BY PBDBN.CURRENCY_CD DESC,PBDBN.EMPLID,PBDBN.EMPL_RCD,'||
              'PTCBN.PRD_END_DT,PTCBN.SEG_END_DT,PTCBN.GPDE_AL_CPAY_ENDDT,PTCBN.GPDE_RC_PRT_SIGN'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '3'
! -- display 'body-8 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_BruttoNetto


!--------------- ? --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_S2 = ' and PTCBN.PRD_END_DT < ' || '''' || $BegYearAct || ''''
let $march_crit_S2T = 'and PTCBN.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '3'
! -- display 'body-9 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_BruttoNetto


!--------------- ? --------------
let $march = 'N'
let $Korr = 'N'
let $march_crit_S3 = ' and PTCPZ.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTCPZ.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderS3 = 'ORDER BY PBDPZ.CURRENCY_CD DESC,PBDPZ.EMPLID,PBDPZ.EMPL_RCD,'||
              'PTCPZ.PRD_END_DT,PTCPZ.SEG_END_DT,PTCPZ.GPDE_AL_CPAY_ENDDT,PTCPZ.GPDE_RC_PRT_SIGN'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '4'
! -- display 'body-10 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Pauschal


!--------------- ? --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_S3 = ' and PTCPZ.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and PTCPZ.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '4'
! -- display 'body-11 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Pauschal


!--------------- ? --------------
let $march = 'N'
let $Korr = 'N'
let $SeitenNr = '5'
! -- display 'body-12 Seitennr'
! -- display $SeitenNr

let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $ExistedDatMeld = 'N'
do Print_comp_LohnKonto_Meldungen


!--------------- ATZ --------------
let $march = 'N'
let $Korr = 'N'
let $march_crit_AT = ' and PTCAT.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTCAT.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderAT = 'ORDER BY PBDAT.CURRENCY_CD DESC,PBDAT.EMPLID,PBDAT.EMPL_RCD,'||
              'PTCAT.PRD_END_DT,PTCAT.SEG_END_DT,PTCAT.SLICE_END_DT,PTCAT.GPDE_AL_CPAY_ENDDT'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '6'
! -- display 'body-13 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_ATZ


!--------------- ATZ with MK --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_AT = ' and PTCAT.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and PTCAT.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '6'
! -- display 'body-14 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_ATZ


!--------------- FLEXI --------------
let $march = 'N'
let $Korr = 'N'
let $march_crit_FL1 = ' and PTFL1.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTFL1.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderFL1 = 'ORDER BY PBDFL1.CURRENCY_CD DESC,PBDFL1.EMPLID,PBDFL1.EMPL_RCD,'||
              'PTFL1.PRD_END_DT,PTFL1.SEG_END_DT,PTFL1.GPDE_AL_CPAY_ENDDT,PTFL1.GPDE_RC_PRT_SIGN'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '7'
! -- display 'body-15 Seitennr'
! -- display $SeitenNr
do TimeStamp('(before Print_comp_LohnKonto_Flexi 1)')
do Print_comp_LohnKonto_Flexi
do TimeStamp('(after Print_comp_LohnKonto_Flexi 1)')

!--------------- FLEXI KORR --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_FL1 = ' and PTFL1.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and PTFL1.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '7'
! -- display 'body-16 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Flexi
do TimeStamp('(after Print_comp_LohnKonto_Flexi 2)')


!--------------- FLEXI WERTGUTHABEN --------------
let $march = 'N'
let $Korr = 'N'
let $march_crit_WG1 = ' and PTWG1.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and PTWG1.PRD_END_DT <= ' || '''' || $EndYearAct || ''''
!wdu-qk04: added emplrcd
let $orderWG1 = 'ORDER BY PBDWG1.CURRENCY_CD DESC,PBDWG1.EMPLID,PBDWG1.EMPL_RCD,'||
              'PTWG1.PRD_END_DT,PTWG1.SEG_END_DT,PTWG1.GPDE_AL_CPAY_ENDDT,PTWG1.GPDE_RC_PRT_SIGN'
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '8'
! -- display 'body-17 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Wertguthaben


!--------------- FLEXI WERTGUTHABEN KORR --------------
let $march = 'Y'
let $Korr = 'Y'
let $march_crit_WG1 = ' and PTWG1.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and PTWG1.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
let $PRD_END_DT_Old = ''
! wdu04b4: unused var: let $RprtDate_Old = ''
let $SeitenNr = '8'
! -- display 'body-18 Seitennr'
! -- display $SeitenNr

do Print_comp_LohnKonto_Wertguthaben

!-------------Meldungen Unfallversicherung--------
!Print events only from current year.
let $march = 'N'
let $Korr = 'N'
!let $march_crit_DBUV = ' and DBUV.GPDE_DV_EVT_EFFDT >= ' || '''' || $BegYearAct || '''' ||
!    ' and DBUV.GPDE_DV_EVT_EFFDT <= ' || '''' || $EndYearAct || ''''
let $SeitenNr = '12'
!adj- Accdt. Ins section should be reported from year 2009
 do ConvertToComponents($BegYearAct,$AIy,$AIm,$AId)

 if $AIy > '2008'
  do Accdt_Chk
 end-if

!----------------------

!adj08-890b14- to print new section for each employee
let $march = 'N'
let $Korr = 'N'

let $march_crit_RPTX03A = ' and RPTX03A.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and RPTX03A.PRD_END_DT <= ' || '''' || $EndYearAct || ''''

do par23c_datChk
!-------Par23c Previous year------
let $march = 'Y'
let $Korr = 'Y'

let $march_crit_RPTX03A = ' and RPTX03A.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
    ' and RPTX03A.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''
do par23c_datChk

!-----Section Umlage---------
let $march = 'N'
let $Korr = 'N'
!adj10- 1960577000
!let $march_crit_RPTX03 = ' and RPTX03.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
!    ' and RPTX03.PRD_END_DT <= ' || '''' || $EndYearAct || ''''

let $march_crit_RPTX03 = ' and RPTX03.PRD_END_DT >= ' || '''' || $BegYearAct || '''' ||
    ' and RPTX03.PRD_END_DT <= ' || '''' || $EndYearAct || ''' and RPTX03.GPDE_RP_GRS_INS_MC = 0 and  RPTX03.GPDE_RP_UML_INS_MC = 0'
do Umlage_datChk
!------Umlage Previous year-------
let $march = 'Y'
let $Korr = 'Y'
! let $march_crit_RPTX03 = ' and ( RPTX03.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
!    ' and RPTX03.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''' and SIC01.GPDE_RP_MARCH_CLS = 1 )'

!let $march_crit_RPTX03MC = ' and ( RPTX03mc.PRD_END_DT < ' || '''' || $BegYearAct || '''' ||
!    ' and RPTX03mc.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || '''  and  SIC01mc.GPDE_RP_MARCH_CLS = 1 )'

let $march_crit_RPTX03 =    ' and ((RPTX03.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')' ||
    ' or ( RPTX03.GPDE_RP_GRS_INS_MC <> 0 and  RPTX03.GPDE_RP_UML_INS_MC <> 0 ' || ' and SIC01.GPDE_RP_MARCH_CLS = 1'||
    ') )   ' || ' and RPTX03.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''

let $march_crit_RPTX03MC =    ' and ((RPTX03mc.PRD_END_DT < ' || '''' || $BegYearAct || '''' || ')' ||
    ' or ( RPTX03mc.GPDE_RP_GRS_INS_MC <> 0 and  RPTX03mc.GPDE_RP_UML_INS_MC <> 0 ' || ' and SIC01mc.GPDE_RP_MARCH_CLS = 1'||
    ') )  ' || ' and RPTX03mc.GPDE_AL_CPAY_ENDDT >= ' || '''' || $BegYearAct || ''''

do Umlage_datChkMC

!--------------- NO PRINT LABEL --------------
NoMeldungen:

end-procedure


!*************************************************************************
begin-procedure Insert_Employee
let $Employee_Insert = rtrim($Emplid,' ')
let $EmplName_Insert = $FirstName || ' ' || $LastName
begin-sql
insert into PS_GPDE_RP_SI10D(EMPLID,NAME) values ($Employee_Insert,$EmplName_Insert)
end-sql
end-procedure






!*************************************************************************
begin-procedure Print_Employees_Compressed

!
! clear temp
!
begin-sql
delete from PS_GPDE_RP_SI10D
end-sql

!
! condition when emplid was specified on the runcontrol
!
if $Ctl_Emplid <> ''
    let $Emplid_Crit_RP1     = ' AND RP1.EMPLID = ''' || $Ctl_Emplid ||  ''' '
else
    let $Emplid_Crit_RP1     = ' '
end-if


! some init
let $Employee_Old = ''
let $RP1.EMPLID_Old = ''
let $RP1.EMPLID = ''

!
!
!
begin-select distinct
RP1.EMPLID
RP1.EMPL_RCD &RP1.EMPL_RCD
   let $RP1.EMPLID = &RP1.EMPLID
   let $Emplid = $RP1.EMPLID
   let #RP1.EMPL_RCD = &RP1.EMPL_RCD
   !
   ! preferred vars now: $Emplid, #Empl_Rcd_Nbr
   let #Empl_Rcd_Nbr = &RP1.EMPL_RCD
   !
   ! get personal information which is required for the header.
   do HeadingInfos
   !
   do PrintPagesForOneEmployeeCompressed
from PS_GPDE_RP_0001_VW RP1
where RP1.PAY_ENTITY = $Ctl_PayEntity and RP1.PRD_END_DT <= $Ctl_End_Dt
      [$Emplid_Crit_RP1]
ORDER BY EMPLID,EMPL_RCD
end-select

end-procedure





!*************************************************************************
begin-procedure Display_Hinweise
let #ZaehlerTemp = 0
begin-select
SI10D.EMPLID
SI10D.NAME
   ! wdu06-881b11 added pagebreak
   if #ZaehlerTemp >= 60
      let #ZaehlerTemp = 0
      new-page
   end-if
   let $SI10D.EMPLID = rtrim(&SI10D.EMPLID,' ')
   let $SI10D.NAME = rtrim(&SI10D.NAME,' ')
   if #ZaehlerTemp = 0
      print 'Hinweis:' (+1,10) bold
      print 'Es wurden Einmalbezuege abgerechnet, die dem Vorjahr' (+1,10) bold
      print 'zugeordnet wurden (Maerzklausel).' (+1,10) bold
      print 'Bitte Jahrelohnkonto Vorjahr fuer folgende Mitarbeiter ausdrucken!!' (+1,10) bold
      print 'Pers.-Nr.'  (+2,10)
      print 'Name'       (,20)
      print  '_' (,10,60) fill
   end-if
   print $SI10D.EMPLID (+1,10)
   print $SI10D.NAME   (,20)
   let #ZaehlerTemp = #ZaehlerTemp + 1
from PS_GPDE_RP_SI10D SI10D
end-select
end-procedure
!**********************************************************************************





begin-footing  1 for-reports = (report2)

 alter-printer
    font= 4
    point-size =13
!adj08-890b14 par23c and umlage
  if $SeitenNr <> '9'
    if $SeitenNr <> '10'
       if $SeitenNr <> '11'
      print '** = KUG ausbezahlt'  (1,1)
       end-if
    end-if
  end-if

if $SeitenNr <> '5'
 alter-printer
    font= 4
    point-size =13
 print 'Alle Werte in'  (1,164)
 alter-printer
    font= 4
    point-size =28
 if $Actual_Currency_save = 'DEM'
     let $Actual_Currency_save = 'DM'
 end-if
 if $Actual_Currency_save = 'EUR'
     let $Actual_Currency_save = $EUROCHAR
 end-if
    print $Actual_Currency_save  (1,176)
    alter-printer
    font= 4
    point-size =13
 end-if
 let #CurlEinAus = 1
end-footing



!**********************************************************************************
begin-procedure Get_Job_Position
!
! directly from job
!
let $JobPosition = ''
!

begin-SELECT
BACV.DESCR    &JCODE_DESCR
 let $JobPosition = rtrim(&JCODE_DESCR,' ')
FROM PS_GPDE_BACODE_VW BACV
WHERE BACV.EMPLID=$Emplid
AND BACV.EMPL_RCD=#Empl_Rcd_Nbr
AND BACV.EFFDT = (SELECT MAX(BAC2.EFFDT)
   FROM PS_GPDE_BACODE_VW BAC2
   WHERE BAC2.EMPLID=BACV.EMPLID
   AND BAC2.EMPL_RCD=BACV.EMPL_RCD
   AND BAC2.EFFDT <= $Ctl_End_Dt
   )
end-select

end-procedure



!**********************************************************************************
begin-procedure Get-Names-Lohnkonto($IN_EMPLID,$IN_NAME_TYPE,:$Full_Name,:$NAME_TITLE,:$LastName,
:$FirstName,:$NAME_PREFIX,:$NAME_ROYAL_PREFIX,:$NAME_ROYAL_SUFFIX,:$BIRTHCOUNTRY,:$BIRTHSTATE,:$BIRTHPLACE)
Begin-Select
NMLK.NAME
NMLK.FIRST_NAME
NMLK.LAST_NAME
NMLK.NAME_PREFIX
NMLK.NAME_TITLE
NMLK.NAME_ROYAL_PREFIX
NMLK.NAME_ROYAL_SUFFIX
NM1LK.BIRTHCOUNTRY
NM1LK.BIRTHSTATE
NM1LK.BIRTHPLACE
FROM PS_NAMES NMLK , PS_PERSON NM1LK
WHERE NMLK.EMPLID    = $IN_EMPLID AND   NMLK.NAME_TYPE = $IN_NAME_TYPE
AND   NMLK.EMPLID    = NM1LK.EMPLID AND   NMLK.EFFDT     =
(SELECT MAX(NM2LK.EFFDT) FROM PS_NAMES NM2LK WHERE NM2LK.EMPLID    = NMLK.EMPLID AND
                     NM2LK.NAME_TYPE = NMLK.NAME_TYPE AND NM2LK.EFFDT    <= NMLK.EFFDT)
end-SELECT
  move '' to $Full_Name
  move '' to $Letter_Name
  let $Name              = rtrim(&NMLK.NAME,' ')
  let $NAME_PREFIX       = rtrim(&NMLK.NAME_PREFIX,' ')
  let $NAME_TITLE        = rtrim(&NMLK.NAME_TITLE, ' ')
  let $NAME_ROYAL_PREFIX = rtrim(&NMLK.NAME_ROYAL_PREFIX, ' ')
  let $NAME_ROYAL_SUFFIX = rtrim(&NMLK.NAME_ROYAL_SUFFIX, ' ')
  let $BIRTHCOUNTRY      = rtrim(&NM1LK.BIRTHCOUNTRY,' ')
  let $BIRTHSTATE        = rtrim(&NM1LK.BIRTHSTATE,' ')
  let $BIRTHPLACE        = rtrim(&NM1LK.BIRTHPLACE,' ')
  let $field = rtrim($Name,' ')
  find ',' in $Name 0 #locn
  extract $LastName from $Name 0 #locn
  add 2 to #locn
  let $Name = substr($Name,#locn,50 - #locn)
  find ',' in $Name 0 #locn
  if #locn <> -1
    extract $FirstName from $Name 0 #locn
    add 1 to #locn
    extract $PrefixName from $Name #locn 50
  else
    let $Firstname = $Name
    let $PrefixName = ''
  end-if
  let $Full_Name = rtrim ($FirstName, ' ')
  if rtrim ($NAME_ROYAL_SUFFIX, ' ') <> ''
    concat ' ' with $Full_Name
    concat $NAME_ROYAL_SUFFIX with $Full_Name
  end-if
  if rtrim ($NAME_ROYAL_PREFIX, ' ') <> ''
    concat ' ' with $Full_Name
    concat $NAME_ROYAL_PREFIX with $Full_Name
  end-if
  concat ' ' with $Full_Name
  concat $LastName with $Full_Name
  let $FirstName = rtrim(&NMLK.FIRST_NAME,' ')
  let $LastName  = rtrim(&NMLK.LAST_NAME,' ')
end-procedure
!**********************************************************************************





begin-procedure Print-EE-Data-Abr
#debug show 'debug (Print-EE-Data-Abr)'
let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
let #currLineV = -18 + #current-line
let #currLineN = -17 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
      let #currLineV = 1 + #currLineV
      let #currLineN = 1 + #currLineN
   end-if
graphic (#currLineN,1,184) box 2 1
graphic (#currLineV,9,2) vert-line 1
graphic (#currLineV,17,2) vert-line 1
graphic (#currLineV,27,2) vert-line 1
graphic (#currLineV,34,2) vert-line 1
graphic (#currLineV,41,2) vert-line 1
graphic (#currLineV,48,2) vert-line 1
graphic (#currLineV,62,2) vert-line 1
graphic (#currLineV,76,2) vert-line 1
graphic (#currLineV,90,2) vert-line 1
graphic (#currLineV,104,2) vert-line 1
graphic (#currLineV,118,2) vert-line 1
graphic (#currLineV,132,2) vert-line 1
graphic (#currLineV,146,2) vert-line 1
graphic (#currLineV,160,2) vert-line 1
graphic (#currLineV,172,2) vert-line 1
do Format-Number(#PTC.GPDE_RP_KVDAYS,$PTC.GPDE_RP_KVDAYS,'99999')
do Format-Number(#PTC.GPDE_RP_SIDAYS,$PTC.GPDE_RP_SIDAYS,'99999')
do Format-Number(#PTC.GPDE_RP_AVDAYS,$PTC.GPDE_RP_AVDAYS,'99999')
do Format-Number(#PTC.GPDE_RP_PVDAYS,$PTC.GPDE_RP_PVDAYS,'99999')
do Format-Number(#PTC.GPDE_RP_KVDAYS_MC,$PTC.GPDE_RP_KVDAYS_MC,'99999')
do Format-Number(#PTC.GPDE_RP_RVDAYS_MC,$PTC.GPDE_RP_RVDAYS_MC,'99999')
do Format-Number(#PTC.GPDE_RP_AVDAYS_MC,$PTC.GPDE_RP_AVDAYS_MC,'99999')
do Format-Number(#PTC.GPDE_RP_PVDAYS_MC,$PTC.GPDE_RP_PVDAYS_MC,'99999')
do Format-Number(#PTC.GPDE_RP_KVDAYS_BON,$PTC.GPDE_RP_KVDAYS_BON,'99999')
do Format-Number(#PTC.GPDE_RP_RVDAYS_BON,$PTC.GPDE_RP_RVDAYS_BON,'99999')
do Format-Number(#PTC.GPDE_RP_AVDAYS_BON,$PTC.GPDE_RP_AVDAYS_BON,'99999')
do Format-Number(#PTC.GPDE_RP_PVDAYS_BON,$PTC.GPDE_RP_PVDAYS_BON,'99999')
do Format-Number(#PTC.GPDE_RP_AVGRS_ANLZ,$PTC.GPDE_RP_AVGRS_ANLZ,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVGRS_BON,$PTC.GPDE_RP_AVGRS_BON,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVGRS_MC,$PTC.GPDE_RP_AVGRS_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVGRS_ANLZ,$PTC.GPDE_RP_KVGRS_ANLZ,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVGRS_BON,$PTC.GPDE_RP_KVGRS_BON,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVGRS_MC,$PTC.GPDE_RP_KVGRS_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVGRS_ANLZ,$PTC.GPDE_RP_PVGRS_ANLZ,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVGRS_BON,$PTC.GPDE_RP_PVGRS_BON,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVGRS_MC,$PTC.GPDE_RP_PVGRS_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVGRS_ANLZ,$PTC.GPDE_RP_RVGRS_ANLZ,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVGRS_BON,$PTC.GPDE_RP_RVGRS_BON,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVGRS_MC,$PTC.GPDE_RP_RVGRS_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVLFD_AG,$PTC.GPDE_RP_AVLFD_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVLFD_AN,$PTC.GPDE_RP_AVLFD_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVLFD_AG,$PTC.GPDE_RP_KVLFD_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVLFD_AN,$PTC.GPDE_RP_KVLFD_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVLFD_AG,$PTC.GPDE_RP_PVLFD_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVLFD_AN,$PTC.GPDE_RP_PVLFD_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVLFD_AG,$PTC.GPDE_RP_RVLFD_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVLFD_AN,$PTC.GPDE_RP_RVLFD_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVBON_AG,$PTC.GPDE_RP_KVBON_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVBON_AN,$PTC.GPDE_RP_KVBON_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVBON_AG,$PTC.GPDE_RP_AVBON_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVBON_AN,$PTC.GPDE_RP_AVBON_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVBON_AG,$PTC.GPDE_RP_PVBON_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVBON_AN,$PTC.GPDE_RP_PVBON_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVBON_AG,$PTC.GPDE_RP_RVBON_AG,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVBON_AN,$PTC.GPDE_RP_RVBON_AN,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVAG_MC,$PTC.GPDE_RP_AVAG_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_AVAN_MC,$PTC.GPDE_RP_AVAN_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVAG_MC,$PTC.GPDE_RP_KVAG_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVAN_MC,$PTC.GPDE_RP_KVAN_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_KVAN_MC,$PTC.GPDE_RP_KVAN_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVAG_MC,$PTC.GPDE_RP_PVAG_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_PVAN_MC,$PTC.GPDE_RP_PVAN_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVAG_MC,$PTC.GPDE_RP_RVAG_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_RVAN_MC,$PTC.GPDE_RP_RVAN_MC,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_SIGRUNLM_A,$PTC.GPDE_RP_SIGRUNLM_A,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_SIGRUNLM_B,$PTC.GPDE_RP_SIGRUNLM_B,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_HIVLER_AMT,$PTC.GPDE_RP_HIVLER_AMT,'B99,999.99')
do Format-Number(#PTC.GPDE_RP_CIVLER_AMT,$PTC.GPDE_RP_CIVLER_AMT,'B99,999.99')
if $march = 'N' or $Vorj = 'Y'
   do Format-Number(#PTC.GPDE_RP_SIGRSS_AMT,$PTC.GPDE_RP_SIGR_AMT,'B99,999.99')
   let #Melde_SV = #Melde_SV + #PTC.GPDE_RP_SIGRSS_AMT
else
   do Format-Number(#PTC.GPDE_RP_SIGRSM_AMT,$PTC.GPDE_RP_SIGR_AMT,'B99,999.99')
   let #Melde_SV = #Melde_SV + #PTC.GPDE_RP_SIGRSM_AMT
end-if
do CheckMinusNull_A

! ---------------- Line #1  --------------
let #TempCol = 1 + #currLineV
alter-printer
   font = 4
   point-size = 13

let #Date_Type1 = {DateType}
do ConvertToComponents($PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
do ConvertToComponents( $PBDC.SEG_END_DT,$yyRpt,$mmRpt,$ddRpt)
!
!$RprtDate is the report date in Line #2 column 1
!
evaluate #Date_Type1
  when = 1
    let $RprtDate = $ddRpt || '{PTDateDelim}' || $mmRpt
    break
  when-other
    let $RprtDate = $mmRpt || '{PTDateDelim}' || $ddRpt
    break
end-evaluate

print $mmPrd      (#TempCol,5) bold
print $SIC.GPDE_SIP_REGION    (#TempCol,173)
if $RetroSign = 'L'
   print 'alt'    (#TempCol,11)
end-if
if $RetroSign = 'N'
   print 'neu'    (#TempCol,11)
end-if
alter-printer
   font = 4
   point-size = 12
print $hdr_abr_si_provider (#TempCol,18)
alter-printer
   font = 3
   point-size = 16
print $SV_Code             (#TempCol,28)
if $march = 'N' or $Vorj = 'Y'
   print $PTC.GPDE_RP_KVDAYS    (#TempCol,34) edit 99999
   print $PTC.GPDE_RP_AVDAYS    (#TempCol,41) edit 99999
else
   print $PTC.GPDE_RP_KVDAYS_MC    (#TempCol,34) edit 99999
   print $PTC.GPDE_RP_AVDAYS_MC    (#TempCol,41) edit 99999
end-if
if $march = 'N' or $Vorj = 'Y'
  print $PTC.GPDE_RP_SIGRUNLM_A (#TempCol,48)
  let #GesBrutto = #GesBrutto + #PTC.GPDE_RP_SIGRUNLM_A
else
  print $PTC.GPDE_RP_SIGRUNLM_B (#TempCol,48)
  let #GesBrutto = #GesBrutto + #PTC.GPDE_RP_SIGRUNLM_B
end-if

if $march = 'N' or $Vorj = 'Y'
   print $PTC.GPDE_RP_KVGRS_ANLZ  (#TempCol,62)
   print $PTC.GPDE_RP_AVGRS_ANLZ  (#TempCol,76)
   print $PTC.GPDE_RP_KVLFD_AG    (#TempCol,90)
   print $PTC.GPDE_RP_RVLFD_AG    (#TempCol,104)
   print $PTC.GPDE_RP_AVLFD_AG    (#TempCol,118)
   print $PTC.GPDE_RP_PVLFD_AG    (#TempCol,132)
   print $PTC.GPDE_RP_HIVLER_AMT    (#TempCol,146)
else
   print $PTC.GPDE_RP_KVGRS_MC  (#TempCol,62)
   print $PTC.GPDE_RP_AVGRS_MC  (#TempCol,76)
   print $PTC.GPDE_RP_KVAG_MC    (#TempCol,90)
   print $PTC.GPDE_RP_RVAG_MC    (#TempCol,104)
   print $PTC.GPDE_RP_AVAG_MC    (#TempCol,118)
   print $PTC.GPDE_RP_PVAG_MC    (#TempCol,132)
end-if

print $TTSC                   (#TempCol,160 )

! ---------------- Line #2  --------------
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
     print $RprtDate (#TempCol,3)

! wdu04b4: unused var: let $RprtDate_Old = $RprtDate

let #Date_Type1 = {DateType}
   do ConvertToComponents($PTC.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      break
   end-evaluate
   let $RetroStr = $RetroDate
if $RetroSign = 'L'
   print $RetroStr (#TempCol,10)
end-if
if  $RetroSign = 'N'
   print $RetroStr (#TempCol,10)
end-if

alter-printer
   font = 3
   point-size = 16
print $GPDE_DV_EMPL_CAT       (#TempCol,29)
if $march = 'N' or $Vorj = 'Y'
   print $PTC.GPDE_RP_SIDAYS    (#TempCol,34)
   print $PTC.GPDE_RP_PVDAYS    (#TempCol,41)
else
   print $PTC.GPDE_RP_RVDAYS_MC    (#TempCol,34)
   print $PTC.GPDE_RP_PVDAYS_MC    (#TempCol,41)
end-if
if $march = 'N' or $Vorj = 'Y'
   print $PTC.GPDE_RP_RVGRS_ANLZ  (#TempCol,62)
   print $PTC.GPDE_RP_PVGRS_ANLZ  (#TempCol,76)
   print $PTC.GPDE_RP_KVLFD_AN    (#TempCol,90)
   print $PTC.GPDE_RP_RVLFD_AN    (#TempCol,104)
   print $PTC.GPDE_RP_AVLFD_AN    (#TempCol,118)
   print $PTC.GPDE_RP_PVLFD_AN    (#TempCol,132)
   print $PTC.GPDE_RP_CIVLER_AMT  (#TempCol,146)
else
   print $PTC.GPDE_RP_RVGRS_MC  (#TempCol,62)
   print $PTC.GPDE_RP_PVGRS_MC  (#TempCol,76)
   print $PTC.GPDE_RP_KVAN_MC    (#TempCol,90)
   print $PTC.GPDE_RP_RVAN_MC    (#TempCol,104)
   print $PTC.GPDE_RP_AVAN_MC    (#TempCol,118)
   print $PTC.GPDE_RP_PVAN_MC    (#TempCol,132)
end-if
print $PTC.GPDE_RP_SIGR_AMT      (#TempCol,48)
print $PBDC.STD_HOURS         (#TempCol,158)
! wdu jw2005
! wdu06-881b11 special coding for the glidezone setup  GPDE_RP_RV_GZ_FLG.
! Also need to merge $SIC.GPDE_SI_PV_CHILD and $SIC.GPDE_RP_RV_GZ_FLG in one field
    evaluate &SIC.GPDE_RP_RV_GZ_FLG
    when = '1'
        let $SIC.GPDE_RP_RV_GZ_FLG = 'GZ'
        break
    when = '2'
        let $SIC.GPDE_RP_RV_GZ_FLG = 'GZ-RV'
        break
    when-other
        let $SIC.GPDE_RP_RV_GZ_FLG = '-'
        break
    end-evaluate
    ! when fields are combined, then we need to always print a value.
    if rtrim($SIC.GPDE_SI_PV_CHILD,' ')=''
        let $SIC.GPDE_SI_PV_CHILD = 'J'
    end-if
    let $tempStr = $SIC.GPDE_SI_PV_CHILD || ' / ' ||  $SIC.GPDE_RP_RV_GZ_FLG
    print $tempStr    (#TempCol,173)
! --
alter-printer
   font = 4
   point-size = 13
if $march = 'N' or $Vorj = 'Y'
   let #KV-Brutto_Sum = #KV-Brutto_Sum + #PTC.GPDE_RP_KVGRS_ANLZ
   let #AV-Brutto_Sum = #AV-Brutto_Sum + #PTC.GPDE_RP_AVGRS_ANLZ
   let #RV-Brutto_Sum = #RV-Brutto_Sum + #PTC.GPDE_RP_RVGRS_ANLZ
   let #PV-Brutto_Sum = #PV-Brutto_Sum + #PTC.GPDE_RP_PVGRS_ANLZ
   let #KV-AN_Sum = #KV-AN_Sum + #PTC.GPDE_RP_KVLFD_AN
   let #KV-AG_Sum = #KV-AG_Sum + #PTC.GPDE_RP_KVLFD_AG
   let #RV-AN_Sum = #RV-AN_Sum + #PTC.GPDE_RP_RVLFD_AN
   let #RV-AG_Sum = #RV-AG_Sum + #PTC.GPDE_RP_RVLFD_AG
   let #AV-AN_Sum = #AV-AN_Sum + #PTC.GPDE_RP_AVLFD_AN
   let #AV-AG_Sum = #AV-AG_Sum + #PTC.GPDE_RP_AVLFD_AG
   let #PV-AN_Sum = #PV-AN_Sum + #PTC.GPDE_RP_PVLFD_AN
   let #PV-AG_Sum = #PV-AG_Sum + #PTC.GPDE_RP_PVLFD_AG
   let #CIVL_AMT = #CIVL_AMT + #PTC.GPDE_RP_CIVLER_AMT
   let #HIVL_AMT = #HIVL_AMT + #PTC.GPDE_RP_HIVLER_AMT
else
   let #KV-Brutto_Sum = #KV-Brutto_Sum + #PTC.GPDE_RP_KVGRS_MC
   let #AV-Brutto_Sum = #AV-Brutto_Sum + #PTC.GPDE_RP_AVGRS_MC
   let #RV-Brutto_Sum = #RV-Brutto_Sum + #PTC.GPDE_RP_RVGRS_MC
   let #PV-Brutto_Sum = #PV-Brutto_Sum + #PTC.GPDE_RP_PVGRS_MC
   let #KV-AN_Sum = #KV-AN_Sum + #PTC.GPDE_RP_KVAN_MC
   let #KV-AG_Sum = #KV-AG_Sum + #PTC.GPDE_RP_KVAG_MC
   let #RV-AN_Sum = #RV-AN_Sum + #PTC.GPDE_RP_RVAN_MC
   let #RV-AG_Sum = #RV-AG_Sum + #PTC.GPDE_RP_RVAG_MC
   let #AV-AN_Sum = #AV-AN_Sum + #PTC.GPDE_RP_AVAN_MC
   let #AV-AG_Sum = #AV-AG_Sum + #PTC.GPDE_RP_AVAG_MC
   let #PV-AN_Sum = #PV-AN_Sum + #PTC.GPDE_RP_PVAN_MC
   let #PV-AG_Sum = #PV-AG_Sum + #PTC.GPDE_RP_PVAG_MC
end-if
position (+1,1)
do Print_ATZ
do Print_ATZ_KG
do Print_KUG_line
do Print_EinmalBezuegeAbr
let $PRD_END_DT_Old = $PRD_END_DT
let $RP1.EMPLID_Old = $RP1.EMPLID
let $PrintStorFall = 'Y'
end-procedure
!*************************************************************************************





begin-procedure Print_EinmalBezuegeAbr

  if #PTC.GPDE_RP_AVGRS_BON  <> 0 or #PTC.GPDE_RP_KVGRS_BON  <> 0 or
     #PTC.GPDE_RP_PVGRS_BON  <> 0 or #PTC.GPDE_RP_RVGRS_BON  <> 0 or
     #PTC.GPDE_RP_KVBON_AG   <> 0 or #PTC.GPDE_RP_KVBON_AN   <> 0 or
     #PTC.GPDE_RP_AVBON_AG   <> 0 or #PTC.GPDE_RP_AVBON_AN   <> 0 or
     #PTC.GPDE_RP_PVBON_AG   <> 0 or #PTC.GPDE_RP_PVBON_AN   <> 0 or
     #PTC.GPDE_RP_RVBON_AG   <> 0 or #PTC.GPDE_RP_RVBON_AN   <> 0 OR    
     #PTC.GPDE_RP_SIGRUNLM_B <> 0 !adj10- ADDED SI Gross amount . 

!ADJ10:QK -  special case: when employee gets a bonus aafter termination.
     ! if any bonus contributions exist ...
     if  #SIC.GPDE_RP_MARCH_CLS <> 0 and
         #PTC.GPDE_RP_AVGRS_BON  = 0 and #PTC.GPDE_RP_KVGRS_BON  = 0 and
         #PTC.GPDE_RP_PVGRS_BON  = 0 and #PTC.GPDE_RP_RVGRS_BON  = 0 and
         #PTC.GPDE_RP_KVBON_AG   = 0 and #PTC.GPDE_RP_KVBON_AN   = 0 and
         #PTC.GPDE_RP_AVBON_AG   = 0 and #PTC.GPDE_RP_AVBON_AN   = 0 and
         #PTC.GPDE_RP_PVBON_AG   = 0 and #PTC.GPDE_RP_PVBON_AN   = 0 and
         #PTC.GPDE_RP_RVBON_AG   = 0 and #PTC.GPDE_RP_RVBON_AN   = 0
         ! if we have marchlause and there is no other bonus, then dont print
         goto NoPr
     end-iF
!-----------------------------------
     let #mm = 4 + #current-line
     if #mm > 55
        new-page
     end-if
     let #currLineV = -18 + #current-line
     let #currLineN = -17 + #current-line
     if #currLineV <= 0
        let #currLineV = 1
        let #currLineN = 2
     end-if
     graphic (#currLineN,1,184) box 2 1
     graphic (#currLineV,9,2) vert-line 1
     graphic (#currLineV,17,2) vert-line 1
     graphic (#currLineV,27,2) vert-line 1
     graphic (#currLineV,34,2) vert-line 1
     graphic (#currLineV,41,2) vert-line 1
     graphic (#currLineV,48,2) vert-line 1
     graphic (#currLineV,62,2) vert-line 1
     graphic (#currLineV,76,2) vert-line 1
     graphic (#currLineV,90,2) vert-line 1
     graphic (#currLineV,104,2) vert-line 1
     graphic (#currLineV,118,2) vert-line 1
     graphic (#currLineV,132,2) vert-line 1
     graphic (#currLineV,146,2) vert-line 1
     graphic (#currLineV,160,2) vert-line 1
     graphic (#currLineV,172,2) vert-line 1
     let #TempCol = 1 + #currLineV
     alter-printer
         font = 3
         point-size = 16
     print $PTC.GPDE_RP_KVDAYS_BON (#TempCol,34)  edit 99999
     print $PTC.GPDE_RP_AVDAYS_BON (#TempCol,41)  edit 99999
     if $march = 'N' or $Vorj = 'Y'
         if #SIC.GPDE_RP_MARCH_CLS = 0
            print $PTC.GPDE_RP_SIGRUNLM_B (#TempCol,48)
            let #GesBrutto = #GesBrutto + #PTC.GPDE_RP_SIGRUNLM_B
         end-if
     else
         print $PTC.GPDE_RP_SIGRUNLM_B (#TempCol,48)
         let #GesBrutto = #GesBrutto + #PTC.GPDE_RP_SIGRUNLM_B
     end-if
         print $PTC.GPDE_RP_KVGRS_BON (#TempCol,62)
         print $PTC.GPDE_RP_AVGRS_BON (#TempCol,76)
         print $PTC.GPDE_RP_KVBON_AG (#TempCol,90)
         print $PTC.GPDE_RP_RVBON_AG (#TempCol,104)
         print $PTC.GPDE_RP_AVBON_AG (#TempCol,118)
         print $PTC.GPDE_RP_PVBON_AG (#TempCol,132)

       alter-printer
       font = 4
       point-size = 13
       let #TempCol = 1 + #TempCol
         if $march = 'N' or $Vorj = 'Y'
            if $Vorj = 'Y'
               print 'EGA-V'   (#TempCol,2)
            else
               print 'EGA'   (#TempCol,2)
            end-if
         else
            print 'EGA-V'   (#TempCol,2)
         end-if
        if $RetroSign = 'L'
           print 'alt'    (#TempCol,11)
        end-if
        if $RetroSign = 'N'
           print 'neu'    (#TempCol,11)
        end-if
         alter-printer
       font = 3
       point-size = 16
         print $PTC.GPDE_RP_RVDAYS_BON (#TempCol,34)  edit 99999
         print $PTC.GPDE_RP_PVDAYS_BON (#TempCol,41)  edit 99999
         print $PTC.GPDE_RP_RVGRS_BON (#TempCol,62)
         print $PTC.GPDE_RP_PVGRS_BON (#TempCol,76)
         print $PTC.GPDE_RP_KVBON_AN (#TempCol,90)
         print $PTC.GPDE_RP_RVBON_AN (#TempCol,104)
         print $PTC.GPDE_RP_AVBON_AN (#TempCol,118)
         print $PTC.GPDE_RP_PVBON_AN (#TempCol,132)
     alter-printer
       font = 4
       point-size = 13
     if $MarchCL = 'Y' and $Vorj = 'N'
        let $MarzKlStr = 'Märzkl.'
     end-if
       let #KV-Brutto_Sum = #KV-Brutto_Sum + #PTC.GPDE_RP_KVGRS_BON
       let #AV-Brutto_Sum = #AV-Brutto_Sum + #PTC.GPDE_RP_AVGRS_BON
       let #RV-Brutto_Sum = #RV-Brutto_Sum + #PTC.GPDE_RP_RVGRS_BON
       let #PV-Brutto_Sum = #PV-Brutto_Sum + #PTC.GPDE_RP_PVGRS_BON
       let #KV-AN_Sum = #KV-AN_Sum + #PTC.GPDE_RP_KVBON_AN
       let #KV-AG_Sum = #KV-AG_Sum + #PTC.GPDE_RP_KVBON_AG
       let #RV-AN_Sum = #RV-AN_Sum + #PTC.GPDE_RP_RVBON_AN
       let #RV-AG_Sum = #RV-AG_Sum + #PTC.GPDE_RP_RVBON_AG
       let #AV-AN_Sum = #AV-AN_Sum + #PTC.GPDE_RP_AVBON_AN
       let #AV-AG_Sum = #AV-AG_Sum + #PTC.GPDE_RP_AVBON_AG
       let #PV-AN_Sum = #PV-AN_Sum + #PTC.GPDE_RP_PVBON_AN
       let #PV-AG_Sum = #PV-AG_Sum + #PTC.GPDE_RP_PVBON_AG
     position (+1,1)
  end-if
  NoPr:
end-procedure
!*************************************************************************************





begin-procedure Print_ATZ

 if $ATZ = 'Y'
     let #mm = 4 + #current-line
     if #mm > 55
        new-page
     end-if
     let #currLineV = -18 + #current-line
     let #currLineN = -17 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
     graphic (#currLineN,1,184) box 2 1
     graphic (#currLineV,9,2) vert-line 1
     graphic (#currLineV,17,2) vert-line 1
     graphic (#currLineV,27,2) vert-line 1
     graphic (#currLineV,34,2) vert-line 1
     graphic (#currLineV,41,2) vert-line 1
     graphic (#currLineV,48,2) vert-line 1
     graphic (#currLineV,62,2) vert-line 1
     graphic (#currLineV,76,2) vert-line 1
     graphic (#currLineV,90,2) vert-line 1
     graphic (#currLineV,104,2) vert-line 1
     graphic (#currLineV,118,2) vert-line 1
     graphic (#currLineV,132,2) vert-line 1
     graphic (#currLineV,146,2) vert-line 1
     graphic (#currLineV,160,2) vert-line 1
     graphic (#currLineV,172,2) vert-line 1
         let #TempCol = 1 + #currLineV
         alter-printer
       font = 3
       point-size = 16

! wdu 04b4: change of logic
! first the contribution of ATZ is printed, but without sick fill.
         do Format-Number(#AtzContributionNonSick,$number,'B99,999.99')
         print $number (#TempCol,104)

! then the pension insurance gross of ATZ is printed, but without sick fill.
         let #TempCol = 1 + #TempCol
         do Format-Number(#OAPGRS_AMT,$SV_Gross_ATZ,'B99,999.99')
         print $SV_Gross_ATZ                 (#TempCol,62)

       alter-printer
       font = 4
       point-size = 13
         if $march = 'N' or $Vorj = 'Y'
           if $Vorj = 'Y'
             print  $azlabelv   (#TempCol,2)
           else
             print $azlabel   (#TempCol,2)
           end-if
         else
             print $azlabel   (#TempCol,2)
         end-if
     alter-printer
       font = 4
       point-size = 13
     if $march = 'Y' and $Vorj = 'N'
        let $MarzKlStr = 'Märzklausel'
     end-if
!wdu 04b4: removed AN summation
! --       let #RV-AN_Sum = #RV-AN_Sum + #Amount1
       let #RV-AG_Sum = #RV-AG_Sum + #AtzContributionNonSick
       let #RV-Brutto_Sum = #RV-Brutto_Sum + #OAPGRS_AMT
    position (+1,1)
 end-if
 NoPr2:
end-procedure
!*************************************************************************************




begin-procedure Print_ATZ_KG

! -- let #PTC.GPDE_AZ_RP_S03_31 = #PTC.GPDE_AZ_RP_S03_31 + 12345


 if #PTC.GPDE_AZ_RP_S03_31 <> 0 or #PTC.GPDE_AZ_RP_S03_41 <> 0
     let #mm = 4 + #current-line
     if #mm > 55
        new-page
     end-if
     let #currLineV = -18 + #current-line
     let #currLineN = -17 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
     graphic (#currLineN,1,184) box 2 1
     graphic (#currLineV,9,2) vert-line 1
     graphic (#currLineV,17,2) vert-line 1
     graphic (#currLineV,27,2) vert-line 1
     graphic (#currLineV,34,2) vert-line 1
     graphic (#currLineV,41,2) vert-line 1
     graphic (#currLineV,48,2) vert-line 1
     graphic (#currLineV,62,2) vert-line 1
     graphic (#currLineV,76,2) vert-line 1
     graphic (#currLineV,90,2) vert-line 1
     graphic (#currLineV,104,2) vert-line 1
     graphic (#currLineV,118,2) vert-line 1
     graphic (#currLineV,132,2) vert-line 1
     graphic (#currLineV,146,2) vert-line 1
     graphic (#currLineV,160,2) vert-line 1
     graphic (#currLineV,172,2) vert-line 1

       ! print contribution into the first line
       let #TempCol = 1 + #currLineV
       alter-printer
       font = 3
       point-size = 16
       do Format-Number(#PTC.GPDE_AZ_RP_S03_41,$number,'B99,999.99')
       print $number (#TempCol,104)

       ! print grosses into the second line
       let #TempCol = 1 + #TempCol
       do Format-Number(#PTC.GPDE_AZ_RP_S03_31,$SV_Gross_ATZ,'B99,999.99')
       ! regular RV gross
       print $SV_Gross_ATZ                 (#TempCol,62)
       ! reporting RV gross for DEUEV
       print $SV_Gross_ATZ                 (#TempCol,48)

       alter-printer
       font = 4
       point-size = 13

       ! wdu05-881b8   AZ-Labels depend on AZ Begin Date
       let $azlabelkg = $azlabel || ' KG'
       let $azlabelvkg = $azlabelv || ' KG'

         if $march = 'N' or $Vorj = 'Y'
           if $Vorj = 'Y'
             print $azlabelvkg   (#TempCol,2)
           else
             print $azlabelkg   (#TempCol,2)
           end-if
         else
            print $azlabelkg   (#TempCol,2)
         end-if
     alter-printer
       font = 4
       point-size = 13
     if $march = 'Y' and $Vorj = 'N'
        let $MarzKlStr = 'Märzklausel'
     end-if

    let #RV-AG_Sum_UBKG  = #RV-AG_Sum_UBKG + #PTC.GPDE_AZ_RP_S03_41

    let #RV-Brutto_Sum_UBKG = #RV-Brutto_Sum_UBKG + #PTC.GPDE_AZ_RP_S03_31
    let #Melde_SV_UBKG  = #Melde_SV_UBKG + #PTC.GPDE_AZ_RP_S03_31
    position (+1,1)
 end-if
end-procedure
!*************************************************************************************






begin-procedure Print-Sums-Abr

let #mm = 4 + #current-line

if #mm > 55
  ! wdu: reached the end of the page, save values for next page.
  ! +- let $GPDE_SI_REGION_save = $GPDE_SI_REGION_Old
  ! +- let $GPDE_TX_MINER_save = $GPDE_TX_MINER_Old
  ! +- let $GPDE_SI_PROV_MAND_save = $GPDE_SI_PROV_MAND_Old
  let $hdr_abr_si_provider  = $GPDE_SI_PROV_MAND_Old
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
   new-page
end-if

let #currLineV = -17 + #current-line
let #currLineN = -16 + #current-line

if #currLineV <= 0
    let #currLineV = 1
    let #currLineN = 2
end-if

graphic (#currLineN,34,126) box 2 1
graphic (#currLineV,48,2) vert-line 1
graphic (#currLineV,62,2) vert-line 1
graphic (#currLineV,76,2) vert-line 1
graphic (#currLineV,90,2) vert-line 1
graphic (#currLineV,104,2) vert-line 1
graphic (#currLineV,118,2) vert-line 1
graphic (#currLineV,132,2) vert-line 1
graphic (#currLineV,146,2) vert-line 1
do Format-Number(#KV-Brutto_Sum,$KV-Brutto_Sum,'B99,999.99')
do Format-Number(#AV-Brutto_Sum,$AV-Brutto_Sum,'B99,999.99')
do Format-Number(#RV-Brutto_Sum,$RV-Brutto_Sum,'B99,999.99')
do Format-Number(#PV-Brutto_Sum,$PV-Brutto_Sum,'B99,999.99')
do Format-Number(#KV-AN_Sum,$KV-AN_Sum,'B99,999.99')
do Format-Number(#KV-AG_Sum,$KV-AG_Sum,'B99,999.99')
do Format-Number(#RV-AN_Sum,$RV-AN_Sum,'B99,999.99')
do Format-Number(#RV-AG_Sum,$RV-AG_Sum,'B99,999.99')
do Format-Number(#AV-AN_Sum,$AV-AN_Sum,'B99,999.99')
do Format-Number(#AV-AG_Sum,$AV-AG_Sum,'B99,999.99')
do Format-Number(#PV-AN_Sum,$PV-AN_Sum,'B99,999.99')
do Format-Number(#PV-AG_Sum,$PV-AG_Sum,'B99,999.99')
do Format-Number(#Melde_SV,$Melde_SV,'B99,999.99')
do Format-Number(#CIVL_AMT,$CIVL_AMT,'B99,999.99')
do Format-Number(#HIVL_AMT,$HIVL_AMT,'B99,999.99')
do Format-Number(#GesBrutto,$GesBrutto,'B99,999.99')
do CheckMinusNull_B
alter-printer
   font = 3
   point-size = 16
let #TempCol = 1 + #currLineV
print $GesBrutto    (#TempCol,48)  bold
print $KV-Brutto_Sum (#TempCol,62)   bold
print $AV-Brutto_Sum (#TempCol,76)  bold
print $KV-AG_Sum (#TempCol,90)      bold
print $RV-AG_Sum (#TempCol,104)      bold
print $AV-AG_Sum (#TempCol,118)      bold
print $PV-AG_Sum (#TempCol,132)      bold
print $HIVL_AMT (#TempCol,146) bold
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
print 'Summe'  (#TempCol,35)         bold
alter-printer
   font = 3
   point-size = 16
print $Melde_SV      (#TempCol,48)  bold
print $RV-Brutto_Sum (#TempCol,62)   bold
print $PV-Brutto_Sum (#TempCol,76)  bold
print $KV-AN_Sum (#TempCol,90)      bold
print $RV-AN_Sum (#TempCol,104)      bold
print $AV-AN_Sum (#TempCol,118)      bold
print $PV-AN_Sum (#TempCol,132)      bold
print $CIVL_AMT (#TempCol,146) bold
let #KV-Brutto_Sum = 0
let #AV-Brutto_Sum = 0
let #RV-Brutto_Sum = 0
let #PV-Brutto_Sum = 0
let #KV-AN_Sum = 0
let #KV-AG_Sum = 0
let #RV-AN_Sum = 0
let #RV-AG_Sum = 0
let #AV-AN_Sum = 0
let #AV-AG_Sum = 0
let #PV-AN_Sum = 0
let #PV-AG_Sum = 0
let #GesBrutto = 0
let #Melde_SV  = 0
let #CIVL_AMT = 0
let #HIVL_AMT = 0
alter-printer
   font = 4
   point-size = 13
end-procedure
!**********************************************************************************





begin-procedure Print-Sums-Abr-UBKG
!wdu 04b4: new print-box for ATZ sick pay

let #mm = 4 + #current-line

if #mm > 55
  ! wdu: reached the end of the page, save values for next page.
  let $hdr_abr_si_provider  = $GPDE_SI_PROV_MAND_Old
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
   new-page
end-if

let #currLineV = -17 + #current-line
let #currLineN = -16 + #current-line

if #currLineV <= 0
    let #currLineV = 1
    let #currLineN = 2
end-if

graphic (#currLineN,34,126) box 2 1
graphic (#currLineV,48,2) vert-line 1
graphic (#currLineV,62,2) vert-line 1
graphic (#currLineV,76,2) vert-line 1
graphic (#currLineV,90,2) vert-line 1
graphic (#currLineV,104,2) vert-line 1
graphic (#currLineV,118,2) vert-line 1
graphic (#currLineV,132,2) vert-line 1
graphic (#currLineV,146,2) vert-line 1

do Format-Number(#RV-Brutto_Sum_UBKG,$RV-Brutto_Sum_UBKG,'B99,999.99')
do Format-Number(#RV-AG_Sum_UBKG,$RV-AG_Sum_UBKG,'B99,999.99')
do Format-Number(#Melde_SV_UBKG,$Melde_SV_UBKG,'B99,999.99')
do CheckMinusNull_UBKG

alter-printer
   font = 3
   point-size = 16
let #TempCol = 1 + #currLineV

print $RV-AG_Sum_UBKG (#TempCol,104)      bold


let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
print 'Summe UB KG'  (#TempCol,35)         bold
alter-printer
   font = 3
   point-size = 16
print $Melde_SV_UBKG      (#TempCol,48)  bold
print $RV-Brutto_Sum_UBKG (#TempCol,62)   bold



let #RV-Brutto_Sum_UBKG = 0
let #RV-AG_Sum_UBKG  = 0
let #Melde_SV_UBKG  = 0
alter-printer
   font = 4
   point-size = 13
end-procedure
!**********************************************************************************








begin-procedure CheckMinusNull_A
   if rtrim(ltrim($PTC.GPDE_RP_AVGRS_ANLZ, ' '), ' ') = $MinusNull  or
      rtrim(ltrim($PTC.GPDE_RP_AVGRS_ANLZ, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVGRS_ANLZ = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVGRS_BON, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVGRS_BON, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVGRS_BON = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVGRS_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVGRS_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVGRS_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVGRS_ANLZ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVGRS_ANLZ, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVGRS_ANLZ = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVGRS_BON, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVGRS_BON, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVGRS_BON = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVGRS_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVGRS_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVGRS_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVGRS_ANLZ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVGRS_ANLZ, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVGRS_ANLZ = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVGRS_BON, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVGRS_BON, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVGRS_BON = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVGRS_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVGRS_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVGRS_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVGRS_ANLZ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVGRS_ANLZ, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVGRS_ANLZ = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVGRS_BON, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVGRS_BON, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVGRS_BON = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVGRS_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVGRS_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVGRS_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVLFD_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVLFD_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVLFD_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVLFD_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVLFD_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVLFD_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVLFD_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVLFD_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVLFD_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVLFD_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVLFD_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVLFD_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVLFD_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVLFD_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVLFD_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVLFD_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVLFD_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVLFD_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVLFD_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVLFD_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVLFD_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVLFD_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVLFD_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVLFD_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVBON_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVBON_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVBON_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVBON_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVBON_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVBON_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVBON_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVBON_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVBON_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVBON_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVBON_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVBON_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVBON_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVBON_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVBON_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVBON_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVBON_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVBON_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVBON_AG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVBON_AG, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVBON_AG = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVBON_AN, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVBON_AN, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVBON_AN = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVAG_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVAG_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVAG_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_AVAN_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_AVAN_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_AVAN_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVAG_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVAG_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVAG_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_KVAN_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_KVAN_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_KVAN_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVAG_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVAG_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVAG_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_PVAN_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_PVAN_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_PVAN_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVAG_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVAG_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVAG_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_RVAN_MC, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_RVAN_MC, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_RVAN_MC = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_SIGRUNLM_A, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_SIGRUNLM_A, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_SIGRUNLM_A = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_SIGRUNLM_B, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_SIGRUNLM_B, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_SIGRUNLM_B = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_HIVLER_AMT, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_HIVLER_AMT, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_HIVLER_AMT = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_CIVLER_AMT, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_CIVLER_AMT, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_CIVLER_AMT = ' '
   end-if
   if rtrim(ltrim($PTC.GPDE_RP_SIGR_AMT, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PTC.GPDE_RP_SIGR_AMT, ' '), ' ') = $PlusNull
      let $PTC.GPDE_RP_SIGR_AMT = ' '
   end-if
 end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_B
   if rtrim(ltrim($KV-Brutto_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KV-Brutto_Sum, ' '), ' ') = $PlusNull
      let $KV-Brutto_Sum = ' '
   end-if
   if rtrim(ltrim($AV-Brutto_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($AV-Brutto_Sum, ' '), ' ') = $PlusNull
      let $AV-Brutto_Sum = ' '
   end-if
   if rtrim(ltrim($RV-Brutto_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($RV-Brutto_Sum, ' '), ' ') = $PlusNull
      let $RV-Brutto_Sum = ' '
   end-if
   if rtrim(ltrim($PV-Brutto_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PV-Brutto_Sum, ' '), ' ') = $PlusNull
      let $PV-Brutto_Sum = ' '
   end-if
   if rtrim(ltrim($KV-AN_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KV-AN_Sum, ' '), ' ') = $PlusNull
      let $KV-AN_Sum = ' '
   end-if
   if rtrim(ltrim($KV-AG_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KV-AG_Sum, ' '), ' ') = $PlusNull
      let $KV-AG_Sum = ' '
   end-if
   if rtrim(ltrim($RV-AN_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($RV-AN_Sum, ' '), ' ') = $PlusNull
      let $RV-AN_Sum = ' '
   end-if
   if rtrim(ltrim($RV-AG_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($RV-AG_Sum, ' '), ' ') = $PlusNull
      let $RV-AG_Sum = ' '
   end-if
   if rtrim(ltrim($AV-AN_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($AV-AN_Sum, ' '), ' ') = $PlusNull
      let $AV-AN_Sum = ' '
   end-if
   if rtrim(ltrim($AV-AG_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($AV-AG_Sum, ' '), ' ') = $PlusNull
      let $AV-AG_Sum = ' '
   end-if
   if rtrim(ltrim($PV-AN_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PV-AN_Sum, ' '), ' ') = $PlusNull
      let $PV-AN_Sum = ' '
   end-if
   if rtrim(ltrim($PV-AG_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PV-AG_Sum, ' '), ' ') = $PlusNull
      let $PV-AG_Sum = ' '
   end-if
   if rtrim(ltrim($Melde_SV, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Melde_SV, ' '), ' ') = $PlusNull
      let $Melde_SV = ' '
   end-if
   if rtrim(ltrim($CIVL_AMT, ' '), ' ') = $MinusNull or
      rtrim(ltrim($CIVL_AMT, ' '), ' ') = $PlusNull
      let $CIVL_AMT = ' '
   end-if
   if rtrim(ltrim($HIVL_AMT, ' '), ' ') = $MinusNull or
      rtrim(ltrim($HIVL_AMT, ' '), ' ') = $PlusNull
      let $HIVL_AMT = ' '
   end-if
   if rtrim(ltrim($GesBrutto, ' '), ' ') = $MinusNull or
      rtrim(ltrim($GesBrutto, ' '), ' ') = $PlusNull
      let $GesBrutto = ' '
   end-if
 end-procedure






begin-procedure CheckMinusNull_UBKG
   if rtrim(ltrim($RV-Brutto_Sum_UBKG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($RV-Brutto_Sum_UBKG, ' '), ' ') = $PlusNull
      let $RV-Brutto_Sum_UBKG = ' '
   end-if
   if rtrim(ltrim($RV-AG_Sum_UBKG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($RV-AG_Sum_UBKG, ' '), ' ') = $PlusNull
      let $RV-AG_Sum_UBKG = ' '
   end-if
   if rtrim(ltrim($Melde_SV_UBKG, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Melde_SV_UBKG, ' '), ' ') = $PlusNull
      let $Melde_SV_UBKG = ' '
   end-if
end-procedure






!**********************************************************************************
begin-procedure MakeSI_DataAndStorno         !was:Get-Data-Detail

!
! SI-Data preparation with Storno-Logic
!
if $Ctl_Emplid <> ''
    let $Emplid_Crit_RP01aD     = ' AND RP01aD.EMPLID = ''' || $Ctl_Emplid ||  ''' '
else
    let $Emplid_Crit_RP01N     = ' '
end-if
!
! clear temp
!
Begin-Sql
DELETE FROM PS_GPDE_RP_TX03_1
End-Sql



let $FirstR = 'Y'
begin-select distinct
GND.EMPLID              &GND.EMPLID
GND.PRD_END_DT          &GND.PRD_END_DT
GND.GPDE_AL_CPAY_ENDDT &GND.GPDE_AL_CPAY_ENDDT
       let $NewCpay = &GND.GPDE_AL_CPAY_ENDDT
       let $NewPrd =  &GND.PRD_END_DT
       let $NewEmpl = &GND.EMPLID
       if $LastEmpl <> &GND.EMPLID
          let $FirstR = 'Y'
       end-if
       if $FirstR <> 'Y' and $NewPrd = $LastPrd
         do Storno
       end-if
       do DataNew
       let $FirstR = 'N'
       let $LastCpay = &GND.GPDE_AL_CPAY_ENDDT
       let $LastPrd =  &GND.PRD_END_DT
       let $LastEmpl = &GND.EMPLID
FROM PS_GPDE_RP_0001_VW RP01aD, PS_GPDE_RP_0003_VW GND,PS_GPDE_RP_SI01_VW SI01D
WHERE RP01aD.EMPLID = GND.EMPLID  and RP01aD.EMPL_RCD = GND.EMPL_RCD
  and RP01aD.GP_PAYGROUP = GND.GP_PAYGROUP and RP01aD.CAL_ID = GND.CAL_ID
  and RP01aD.CAL_RUN_ID = GND.CAL_RUN_ID and RP01aD.SEG_END_DT = GND.SEG_END_DT
  and RP01aD.RSLT_SEG_NUM = GND.RSLT_SEG_NUM and RP01aD.PAY_ENTITY = $Ctl_PayEntity
  AND SI01D.EMPLID = GND.EMPLID AND SI01D.CAL_RUN_ID = GND.CAL_RUN_ID
  AND SI01D.EMPL_RCD = GND.EMPL_RCD AND SI01D.GP_PAYGROUP = GND.GP_PAYGROUP
  AND SI01D.CAL_ID = GND.CAL_ID AND SI01D.RSLT_SEG_NUM = GND.RSLT_SEG_NUM
  AND SI01D.SEG_END_DT = GND.SEG_END_DT AND SI01D.SLICE_END_DT = GND.SLICE_END_DT
  [$Emplid_Crit_RP01aD]
 order by GND.EMPLID,GND.PRD_END_DT,GND.GPDE_AL_CPAY_ENDDT
end-select


end-procedure




!**********************************************************************************
! jjj - Get KUG data
begin-procedure GetKugData



let #kugkkamt = 0
let #kugamt = 0

begin-select
KU01.GPDE_KU_KUGAMT
KU01.GPDE_KU_KUGKKAMT

  let #kugkkamt = &KU01.GPDE_KU_KUGKKAMT
  let #kugamt = &KU01.GPDE_KU_KUGAMT

from PS_GPDE_RP_KU01 KU01
where
KU01.EMPLID = &GN.EMPLID AND
KU01.CAL_RUN_ID =  &GN.CAL_RUN_ID AND
KU01.EMPL_RCD =  &GN.EMPL_RCD AND
KU01.GP_PAYGROUP =  &GN.GP_PAYGROUP AND
KU01.CAL_ID =  &GN.CAL_ID AND
KU01.ORIG_CAL_RUN_ID = &RP01a.ORIG_CAL_RUN_ID AND
KU01.RSLT_SEG_NUM =  &GN.RSLT_SEG_NUM AND
KU01.SEG_END_DT =  &RP01a.SEG_END_DT AND
KU01.SLICE_END_DT = &GN.SLICE_END_DT
end-select



end-procedure


!**********************************************************************************
! jjj - Get KUG data for Storno
begin-procedure GetKugDataS

let #kugkkamt = 0
let #kugamt = 0


begin-select
KU01S.GPDE_KU_KUGAMT
KU01S.GPDE_KU_KUGKKAMT

  let #kugkkamt = &KU01S.GPDE_KU_KUGKKAMT
  let #kugamt = &KU01S.GPDE_KU_KUGAMT


from PS_GPDE_RP_KU01 KU01S
where
KU01S.EMPLID = &GNS.EMPLID AND
KU01S.CAL_RUN_ID =  &GNS.CAL_RUN_ID AND
KU01S.EMPL_RCD =  &GNS.EMPL_RCD AND
KU01S.GP_PAYGROUP =  &GNS.GP_PAYGROUP AND
KU01S.CAL_ID =  &GNS.CAL_ID AND
KU01S.ORIG_CAL_RUN_ID = &RP01aS.ORIG_CAL_RUN_ID AND
KU01S.RSLT_SEG_NUM =  &GNS.RSLT_SEG_NUM AND
KU01S.SEG_END_DT =  &RP01aS.SEG_END_DT AND
KU01S.SLICE_END_DT = &GNS.SLICE_END_DT
end-select
let #kugamt = #kugamt * -1
let #kugkkamt = #kugkkamt * -1



end-procedure



!**********************************************************************************
begin-procedure Storno


begin-select

  ! <-- jjj added for the KU01 Join
RP01aS.ORIG_CAL_RUN_ID
RP01aS.SEG_END_DT
  ! --> jjj added for the KU01 Join

GNS.EMPLID
GNS.CAL_RUN_ID
GNS.EMPL_RCD
GNS.GP_PAYGROUP
GNS.CAL_ID
GNS.RSLT_SEG_NUM
GNS.SLICE_END_DT
GNS.PAY_ENTITY
GNS.PRD_END_DT
GNS.GPDE_AL_CPAY_ENDDT
GNS.GPDE_RP_SIGRSS_AMT
GNS.GPDE_RP_SIGRS_ANLZ
GNS.GPDE_RP_HICNTB_AMT
GNS.GPDE_RP_PICNTB_AMT
GNS.GPDE_RP_UICNTB_AMT
GNS.GPDE_RP_CICNTB_AMT
GNS.GPDE_RP_HIVOL_AMT
GNS.GPDE_RP_CIVOL_AMT
GNS.GPDE_RP_RIGRSS_AMT
GNS.GPDE_RP_U1CNTB_AMT
GNS.GPDE_RP_U2CNTB_AMT
SI01S.GPDE_RI_PCT1
SI01S.GPDE_RI_PCT2
GNS.GPDE_RP_RIGRSM_AMT
GNS.GPDE_RP_U1CTBM_AMT
GNS.GPDE_RP_U2CTBM_AMT
SI01S.GPDE_RI_PCT1_MC
SI01S.GPDE_RI_PCT2_MC
GNS.GPDE_RP_SIGRSM_AMT
GNS.GPDE_RP_HICTBM_AMT
GNS.GPDE_RP_PICTBM_AMT
GNS.GPDE_RP_UICTBM_AMT
GNS.GPDE_RP_CICTBM_AMT
GNS.GPDE_RP_OAPGRS_AMT
GNS.GPDE_RP_AZGRS_ANLZ
GNS.GPDE_RP_OAPPEN_AMT
GNS.GPDE_RP_OAPGRS_MC
GNS.GPDE_RP_OAPPEN_MC
GNS.GPDE_RP_SIDAYS
GNS.GPDE_RP_AVDAYS
GNS.GPDE_RP_KVDAYS
GNS.GPDE_RP_PVDAYS
GNS.GPDE_RP_AVDAYS_BON
GNS.GPDE_RP_KVDAYS_BON
GNS.GPDE_RP_PVDAYS_BON
GNS.GPDE_RP_RVDAYS_BON
GNS.GPDE_RP_AVGRS_ANLZ
GNS.GPDE_RP_AVGRS_BON
GNS.GPDE_RP_AVGRS_MC
GNS.GPDE_RP_KVGRS_ANLZ
GNS.GPDE_RP_KVGRS_BON
GNS.GPDE_RP_KVGRS_MC
GNS.GPDE_RP_PVGRS_ANLZ
GNS.GPDE_RP_PVGRS_BON
GNS.GPDE_RP_PVGRS_MC
GNS.GPDE_RP_RVGRS_ANLZ
GNS.GPDE_RP_RVGRS_BON
GNS.GPDE_RP_RVGRS_MC
GNS.GPDE_RP_AVLFD_AG
GNS.GPDE_RP_AVLFD_AN
GNS.GPDE_RP_KVLFD_AG
GNS.GPDE_RP_KVLFD_AN
GNS.GPDE_RP_PVLFD_AG
GNS.GPDE_RP_PVLFD_AN
GNS.GPDE_RP_RVLFD_AG
GNS.GPDE_RP_RVLFD_AN
GNS.GPDE_RP_KVBON_AG
GNS.GPDE_RP_KVBON_AN
GNS.GPDE_RP_AVBON_AG
GNS.GPDE_RP_AVBON_AN
GNS.GPDE_RP_PVBON_AG
GNS.GPDE_RP_PVBON_AN
GNS.GPDE_RP_RVBON_AG
GNS.GPDE_RP_RVBON_AN
GNS.GPDE_RP_AVAG_MC
GNS.GPDE_RP_AVAN_MC
GNS.GPDE_RP_KVAG_MC
GNS.GPDE_RP_KVAN_MC
GNS.GPDE_RP_PVAG_MC
GNS.GPDE_RP_PVAN_MC
GNS.GPDE_RP_RVAG_MC
GNS.GPDE_RP_RVAN_MC
GNS.GPDE_RP_SIGRUNLM_A
GNS.GPDE_RP_SIGRUNLM_B
GNS.GPDE_RP_CIVLER_AMT
GNS.GPDE_RP_HIVLER_AMT
SI01S.GPDE_SI_PROV_AV
SI01S.GPDE_SI_PROV_KV
SI01S.GPDE_SI_PROV_PV
SI01S.GPDE_SI_PROV_RV
SI01S.GPDE_SI_PROV_UM
SI01S.GPDE_SI_PROV_AV_M
SI01S.GPDE_SI_PROV_KV_M
SI01S.GPDE_SI_PROV_PV_M
SI01S.GPDE_SI_PROV_RV_M
SI01S.GPDE_SI_PROV_UM_M
GNS.GPDE_RP_AZGRS_BON
GNS.GPDE_RP_OAPPEN_ANL
GNS.GPDE_RP_OAPPEN_BON
SI01S.GPDE_SI_PROV_MAND
GNS.GPDE_RP_AVDAYS_MC
GNS.GPDE_RP_KVDAYS_MC
GNS.GPDE_RP_PVDAYS_MC
GNS.GPDE_RP_RVDAYS_MC
GNS.GPDE_AZ_RP_S03_31
GNS.GPDE_AZ_RP_S03_41
! wd06-881kug
GNS.GPDE_RP_KUG_KVCTB
GNS.GPDE_RP_KUG_KVGRS
GNS.GPDE_RP_KUG_PVCTB
GNS.GPDE_RP_KUG_PVGRS
GNS.GPDE_RP_KUG_RVCTB
GNS.GPDE_RP_KUG_RVGRS
!adj08-890b14 par23c and umlage
GNS.GPDE_RP_SK_SL_NET
GNS.GPDE_RP_SK_NET
GNS.GPDE_RP_SK_SIEXEMP
!adj08-890b15
GNS.GPDE_RP_SK_GROSS
!adj09-890b17: umlage
GNS.GPDE_RP_GRSSINSLFD
GNS.GPDE_RP_GRSSINSEGA
GNS.GPDE_RP_UML_INSOLV
!Adj09-89b17: Pension fund
GNS.GPDE_RP_VW_RVLFDAG
GNS.GPDE_RP_VW_RVBONAG
GNS.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
GNS.GPDE_RP_GRS_INS_MC
GNS.GPDE_RP_UML_INS_MC

  ! <-- jjj
  do GetKugDataS
  ! --> jjj



  let $GN.EMPLID = &GNS.EMPLID
  let #GN.EMPL_RCD = &GNS.EMPL_RCD
  let $GN.GP_PAYGROUP = &GNS.GP_PAYGROUP
  let $GN.CAL_RUN_ID = &GNS.CAL_RUN_ID
  let $GN.CAL_ID = &GNS.CAL_ID
  let #GN.RSLT_SEG_NUM = &GNS.RSLT_SEG_NUM
  let $GN.SLICE_END_DT = &GNS.SLICE_END_DT
  let $GN.PAY_ENTITY = &GNS.PAY_ENTITY
  let $GN.PRD_END_DT = &GNS.PRD_END_DT
      if &GN.PRD_END_DT <> $NewCpay
        let $Pr_Sign = 'L'
      else
        let $Pr_Sign = 'A'
      end-if
        let $GN.GPDE_AL_CPAY_ENDDT = $NewCpay
        let #GN.GPDE_RP_SIGRSS_AMT = -1 * &GNS.GPDE_RP_SIGRSS_AMT
        let #GN.GPDE_RP_SIGRS_ANLZ = -1 * &GNS.GPDE_RP_SIGRS_ANLZ
  let #GN.GPDE_RP_HICNTB_AMT = -1 * &GNS.GPDE_RP_HICNTB_AMT
  let #GN.GPDE_RP_PICNTB_AMT = -1 * &GNS.GPDE_RP_PICNTB_AMT
  let #GN.GPDE_RP_UICNTB_AMT = -1 * &GNS.GPDE_RP_UICNTB_AMT
  let #GN.GPDE_RP_CICNTB_AMT = -1 * &GNS.GPDE_RP_CICNTB_AMT
  let #GN.GPDE_RP_HIVOL_AMT  = -1 * &GNS.GPDE_RP_HIVOL_AMT
  let #GN.GPDE_RP_CIVOL_AMT  = -1 * &GNS.GPDE_RP_CIVOL_AMT
  let #GN.GPDE_RP_RIGRSS_AMT = -1 * &GNS.GPDE_RP_RIGRSS_AMT
  let #GN.GPDE_RP_U1CNTB_AMT = -1 * &GNS.GPDE_RP_U1CNTB_AMT
  let #GN.GPDE_RP_U2CNTB_AMT = -1 * &GNS.GPDE_RP_U2CNTB_AMT
  let #SI01.GPDE_RI_PCT1     = &SI01S.GPDE_RI_PCT1
  let #SI01.GPDE_RI_PCT2     = &SI01S.GPDE_RI_PCT2
  let #GN.GPDE_RP_RIGRSM_AMT = -1 * &GNS.GPDE_RP_RIGRSM_AMT
  let #GN.GPDE_RP_U1CTBM_AMT = -1 * &GNS.GPDE_RP_U1CTBM_AMT
  let #GN.GPDE_RP_U2CTBM_AMT = -1 * &GNS.GPDE_RP_U2CTBM_AMT
  let #SI01.GPDE_RI_PCT1_MC  = &SI01S.GPDE_RI_PCT1_MC
  let #SI01.GPDE_RI_PCT2_MC  = &SI01S.GPDE_RI_PCT2_MC
  let #GN.GPDE_RP_SIGRSM_AMT = -1 * &GNS.GPDE_RP_SIGRSM_AMT
  let #GN.GPDE_RP_HICTBM_AMT = -1 * &GNS.GPDE_RP_HICTBM_AMT
  let #GN.GPDE_RP_PICTBM_AMT = -1 * &GNS.GPDE_RP_PICTBM_AMT
  let #GN.GPDE_RP_UICTBM_AMT = -1 * &GNS.GPDE_RP_UICTBM_AMT
  let #GN.GPDE_RP_CICTBM_AMT = -1 * &GNS.GPDE_RP_CICTBM_AMT
  let #GN.GPDE_RP_OAPGRS_AMT = -1 * &GNS.GPDE_RP_OAPGRS_AMT
  let #GN.GPDE_RP_AZGRS_ANLZ = -1 * &GNS.GPDE_RP_AZGRS_ANLZ
  let #GN.GPDE_RP_OAPPEN_AMT = -1 * &GNS.GPDE_RP_OAPPEN_AMT
  let #GN.GPDE_RP_OAPGRS_MC  = -1 * &GNS.GPDE_RP_OAPGRS_MC
  let #GN.GPDE_RP_OAPPEN_MC  = -1 * &GNS.GPDE_RP_OAPPEN_MC
  let #GN.GPDE_RP_SIDAYS     = -1 * &GNS.GPDE_RP_SIDAYS
  let #GN.GPDE_RP_AVDAYS     = -1 * &GNS.GPDE_RP_AVDAYS
  let #GN.GPDE_RP_KVDAYS             = -1 * &GNS.GPDE_RP_KVDAYS
  let #GN.GPDE_RP_PVDAYS     = -1 * &GNS.GPDE_RP_PVDAYS
  let #GN.GPDE_RP_AVDAYS_BON         = -1 * &GNS.GPDE_RP_AVDAYS_BON
  let #GN.GPDE_RP_KVDAYS_BON         = -1 * &GNS.GPDE_RP_KVDAYS_BON
  let #GN.GPDE_RP_PVDAYS_BON         = -1 * &GNS.GPDE_RP_PVDAYS_BON
  let #GN.GPDE_RP_RVDAYS_BON         = -1 * &GNS.GPDE_RP_RVDAYS_BON
  let #GN.GPDE_RP_AVGRS_ANLZ         = -1 * &GNS.GPDE_RP_AVGRS_ANLZ
  let #GN.GPDE_RP_AVGRS_BON          = -1 * &GNS.GPDE_RP_AVGRS_BON
  let #GN.GPDE_RP_AVGRS_MC           = -1 * &GNS.GPDE_RP_AVGRS_MC
  let #GN.GPDE_RP_KVGRS_ANLZ         = -1 * &GNS.GPDE_RP_KVGRS_ANLZ
  let #GN.GPDE_RP_KVGRS_BON          = -1 * &GNS.GPDE_RP_KVGRS_BON
  let #GN.GPDE_RP_KVGRS_MC           = -1 * &GNS.GPDE_RP_KVGRS_MC
  let #GN.GPDE_RP_PVGRS_ANLZ         = -1 * &GNS.GPDE_RP_PVGRS_ANLZ
  let #GN.GPDE_RP_PVGRS_BON          = -1 * &GNS.GPDE_RP_PVGRS_BON
  let #GN.GPDE_RP_PVGRS_MC           = -1 * &GNS.GPDE_RP_PVGRS_MC
  let #GN.GPDE_RP_RVGRS_ANLZ         = -1 * &GNS.GPDE_RP_RVGRS_ANLZ
  let #GN.GPDE_RP_RVGRS_BON          = -1 * &GNS.GPDE_RP_RVGRS_BON
  let #GN.GPDE_RP_RVGRS_MC           = -1 * &GNS.GPDE_RP_RVGRS_MC
  let #GN.GPDE_RP_AVLFD_AG           = -1 * &GNS.GPDE_RP_AVLFD_AG
  let #GN.GPDE_RP_AVLFD_AN           = -1 * &GNS.GPDE_RP_AVLFD_AN
  let #GN.GPDE_RP_KVLFD_AG           = -1 * &GNS.GPDE_RP_KVLFD_AG
  let #GN.GPDE_RP_KVLFD_AN           = -1 * &GNS.GPDE_RP_KVLFD_AN
  let #GN.GPDE_RP_PVLFD_AG           = -1 * &GNS.GPDE_RP_PVLFD_AG
  let #GN.GPDE_RP_PVLFD_AN           = -1 * &GNS.GPDE_RP_PVLFD_AN
  let #GN.GPDE_RP_RVLFD_AG           = -1 * &GNS.GPDE_RP_RVLFD_AG
  let #GN.GPDE_RP_RVLFD_AN           = -1 * &GNS.GPDE_RP_RVLFD_AN
  let #GN.GPDE_RP_KVBON_AG           = -1 * &GNS.GPDE_RP_KVBON_AG
  let #GN.GPDE_RP_KVBON_AN           = -1 * &GNS.GPDE_RP_KVBON_AN
  let #GN.GPDE_RP_AVBON_AG           = -1 * &GNS.GPDE_RP_AVBON_AG
  let #GN.GPDE_RP_AVBON_AN           = -1 * &GNS.GPDE_RP_AVBON_AN
  let #GN.GPDE_RP_PVBON_AG           = -1 * &GNS.GPDE_RP_PVBON_AG
  let #GN.GPDE_RP_PVBON_AN           = -1 * &GNS.GPDE_RP_PVBON_AN
  let #GN.GPDE_RP_RVBON_AG           = -1 * &GNS.GPDE_RP_RVBON_AG
  let #GN.GPDE_RP_RVBON_AN           = -1 * &GNS.GPDE_RP_RVBON_AN
  let #GN.GPDE_RP_AVAG_MC            = -1 * &GNS.GPDE_RP_AVAG_MC
  let #GN.GPDE_RP_AVAN_MC            = -1 * &GNS.GPDE_RP_AVAN_MC
  let #GN.GPDE_RP_KVAG_MC            = -1 * &GNS.GPDE_RP_KVAG_MC
  let #GN.GPDE_RP_KVAN_MC            = -1 * &GNS.GPDE_RP_KVAN_MC
  let #GN.GPDE_RP_PVAG_MC            = -1 * &GNS.GPDE_RP_PVAG_MC
  let #GN.GPDE_RP_PVAN_MC            = -1 * &GNS.GPDE_RP_PVAN_MC
  let #GN.GPDE_RP_RVAG_MC            = -1 * &GNS.GPDE_RP_RVAG_MC
  let #GN.GPDE_RP_RVAN_MC            = -1 * &GNS.GPDE_RP_RVAN_MC
  let #GN.GPDE_RP_SIGRUNLM_A         = -1 * &GNS.GPDE_RP_SIGRUNLM_A
  let #GN.GPDE_RP_SIGRUNLM_B         = -1 * &GNS.GPDE_RP_SIGRUNLM_B
  let #GN.GPDE_RP_CIVLER_AMT         = -1 * &GNS.GPDE_RP_CIVLER_AMT
  let #GN.GPDE_RP_HIVLER_AMT         = -1 * &GNS.GPDE_RP_HIVLER_AMT
  let $SI01.GPDE_SI_PROV_AV          = &SI01S.GPDE_SI_PROV_AV
  let $SI01.GPDE_SI_PROV_KV          = &SI01S.GPDE_SI_PROV_KV
  let $SI01.GPDE_SI_PROV_PV          = &SI01S.GPDE_SI_PROV_PV
  let $SI01.GPDE_SI_PROV_RV          = &SI01S.GPDE_SI_PROV_RV
  let $SI01.GPDE_SI_PROV_UM          = &SI01S.GPDE_SI_PROV_UM
  let $SI01.GPDE_SI_PROV_AV_M                = &SI01S.GPDE_SI_PROV_AV_M
  let $SI01.GPDE_SI_PROV_KV_M                = &SI01S.GPDE_SI_PROV_KV_M
  let $SI01.GPDE_SI_PROV_PV_M                = &SI01S.GPDE_SI_PROV_PV_M
  let $SI01.GPDE_SI_PROV_RV_M                = &SI01S.GPDE_SI_PROV_RV_M
  let $SI01.GPDE_SI_PROV_UM_M                = &SI01S.GPDE_SI_PROV_UM_M
  let #GN.GPDE_RP_AZGRS_BON          = -1 * &GNS.GPDE_RP_AZGRS_BON
  let #GN.GPDE_RP_OAPPEN_ANL         = -1 * &GNS.GPDE_RP_OAPPEN_ANL
  let #GN.GPDE_RP_OAPPEN_BON         = -1 * &GNS.GPDE_RP_OAPPEN_BON
  let $SI01.GPDE_SI_PROV_MAND  = &SI01S.GPDE_SI_PROV_MAND
  let #GN.GPDE_RP_AVDAYS_MC     = -1 * &GNS.GPDE_RP_AVDAYS_MC
  let #GN.GPDE_RP_KVDAYS_MC             = -1 * &GNS.GPDE_RP_KVDAYS_MC
  let #GN.GPDE_RP_PVDAYS_MC     = -1 * &GNS.GPDE_RP_PVDAYS_MC
  let #GN.GPDE_RP_RVDAYS_MC     = -1 * &GNS.GPDE_RP_RVDAYS_MC
  let #GN.GPDE_AZ_RP_S03_31     = -1 * &GNS.GPDE_AZ_RP_S03_31
  let #GN.GPDE_AZ_RP_S03_41     = -1 * &GNS.GPDE_AZ_RP_S03_41
  ! wd06-881kug
  let #GN.GPDE_RP_KUG_KVCTB     = -1 * &GNS.GPDE_RP_KUG_KVCTB
  let #GN.GPDE_RP_KUG_KVGRS     = -1 * &GNS.GPDE_RP_KUG_KVGRS
  let #GN.GPDE_RP_KUG_PVCTB     = -1 * &GNS.GPDE_RP_KUG_PVCTB
  let #GN.GPDE_RP_KUG_PVGRS     = -1 * &GNS.GPDE_RP_KUG_PVGRS
  let #GN.GPDE_RP_KUG_RVCTB     = -1 * &GNS.GPDE_RP_KUG_RVCTB
  let #GN.GPDE_RP_KUG_RVGRS     = -1 * &GNS.GPDE_RP_KUG_RVGRS
  !adj08-890b14 par23c and umlage
  let #SK_SL_NET  = -1 * &GNS.GPDE_RP_SK_SL_NET
  let #SK_NET   = -1 * &GNS.GPDE_RP_SK_NET
  let #SK_SIEXEMP = -1 * &GNS.GPDE_RP_SK_SIEXEMP
  !adj08-890b15
  let #SK_GROSS  = -1 * &GNS.GPDE_RP_SK_GROSS
!adj09-890b17
  let #GRS_INSOL_LFD =  -1 * &GNS.GPDE_RP_GRSSINSLFD
  let #GRS_INSOL_EGA =  -1 * &GNS.GPDE_RP_GRSSINSEGA
  let #UML_INSOL     =  -1 * &GNS.GPDE_RP_UML_INSOLV
!adj09- pension fund
  let #PF_LFD = -1 * &GNS.GPDE_RP_VW_RVLFDAG
  let #PF_BON = -1 * &GNS.GPDE_RP_VW_RVBONAG
  let #PF_RvAg = -1 * &GNS.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
  let #GRS_INS_MC = -1 * &GN.GPDE_RP_GRS_INS_MC
  let #UML_INS_MC = -1 * &GN.GPDE_RP_UML_INS_MC

     do Insert_Data_Lohnkonto
FROM PS_GPDE_RP_0001_VW RP01aS, PS_GPDE_RP_0003_VW GNS,PS_GPDE_RP_SI01_VW SI01S
WHERE RP01aS.EMPLID = GNS.EMPLID and RP01aS.EMPL_RCD = GNS.EMPL_RCD
  and RP01aS.GP_PAYGROUP = GNS.GP_PAYGROUP and RP01aS.CAL_ID = GNS.CAL_ID
  and RP01aS.CAL_RUN_ID = GNS.CAL_RUN_ID and RP01aS.SEG_END_DT = GNS.SEG_END_DT
  and RP01aS.RSLT_SEG_NUM = GNS.RSLT_SEG_NUM and RP01aS.PAY_ENTITY = $Ctl_PayEntity
  AND SI01S.EMPLID = GNS.EMPLID AND SI01S.CAL_RUN_ID = GNS.CAL_RUN_ID
  AND SI01S.EMPL_RCD = GNS.EMPL_RCD AND SI01S.GP_PAYGROUP = GNS.GP_PAYGROUP
  AND SI01S.CAL_ID = GNS.CAL_ID AND SI01S.RSLT_SEG_NUM = GNS.RSLT_SEG_NUM
  AND SI01S.SEG_END_DT = GNS.SEG_END_DT AND SI01S.SLICE_END_DT = GNS.SLICE_END_DT
  AND GNS.GPDE_AL_CPAY_ENDDT = $LastCpay AND GNS.PRD_END_DT = $NewPrd
  AND GNS.EMPLID = $LastEmpl
end-select


end-procedure
!**********************************************************************************
begin-procedure DataNew



begin-select

  ! <-- jjj added for the KU01 Join
RP01a.ORIG_CAL_RUN_ID
RP01a.SEG_END_DT
  ! --> jjj added for the KU01 Join
GN.EMPLID
GN.CAL_RUN_ID
GN.EMPL_RCD
GN.GP_PAYGROUP
GN.CAL_ID
GN.RSLT_SEG_NUM
GN.SLICE_END_DT
GN.PAY_ENTITY
GN.PRD_END_DT
GN.GPDE_AL_CPAY_ENDDT
GN.GPDE_RP_SIGRSS_AMT
GN.GPDE_RP_SIGRS_ANLZ
GN.GPDE_RP_HICNTB_AMT
GN.GPDE_RP_PICNTB_AMT
GN.GPDE_RP_UICNTB_AMT
GN.GPDE_RP_CICNTB_AMT
GN.GPDE_RP_HIVOL_AMT
GN.GPDE_RP_CIVOL_AMT
GN.GPDE_RP_RIGRSS_AMT
GN.GPDE_RP_U1CNTB_AMT
GN.GPDE_RP_U2CNTB_AMT
SI01.GPDE_RI_PCT1
SI01.GPDE_RI_PCT2
GN.GPDE_RP_RIGRSM_AMT
GN.GPDE_RP_U1CTBM_AMT
GN.GPDE_RP_U2CTBM_AMT
SI01.GPDE_RI_PCT1_MC
SI01.GPDE_RI_PCT2_MC
GN.GPDE_RP_SIGRSM_AMT
GN.GPDE_RP_HICTBM_AMT
GN.GPDE_RP_PICTBM_AMT
GN.GPDE_RP_UICTBM_AMT
GN.GPDE_RP_CICTBM_AMT
GN.GPDE_RP_OAPGRS_AMT
GN.GPDE_RP_AZGRS_ANLZ
GN.GPDE_RP_OAPPEN_AMT
GN.GPDE_RP_OAPGRS_MC
GN.GPDE_RP_OAPPEN_MC
GN.GPDE_RP_SIDAYS
GN.GPDE_RP_AVDAYS
GN.GPDE_RP_KVDAYS
GN.GPDE_RP_PVDAYS
GN.GPDE_RP_AVDAYS_BON
GN.GPDE_RP_KVDAYS_BON
GN.GPDE_RP_PVDAYS_BON
GN.GPDE_RP_RVDAYS_BON
GN.GPDE_RP_AVGRS_ANLZ
GN.GPDE_RP_AVGRS_BON
GN.GPDE_RP_AVGRS_MC
GN.GPDE_RP_KVGRS_ANLZ
GN.GPDE_RP_KVGRS_BON
GN.GPDE_RP_KVGRS_MC
GN.GPDE_RP_PVGRS_ANLZ
GN.GPDE_RP_PVGRS_BON
GN.GPDE_RP_PVGRS_MC
GN.GPDE_RP_RVGRS_ANLZ
GN.GPDE_RP_RVGRS_BON
GN.GPDE_RP_RVGRS_MC
GN.GPDE_RP_AVLFD_AG
GN.GPDE_RP_AVLFD_AN
GN.GPDE_RP_KVLFD_AG
GN.GPDE_RP_KVLFD_AN
GN.GPDE_RP_PVLFD_AG
GN.GPDE_RP_PVLFD_AN
GN.GPDE_RP_RVLFD_AG
GN.GPDE_RP_RVLFD_AN
GN.GPDE_RP_KVBON_AG
GN.GPDE_RP_KVBON_AN
GN.GPDE_RP_AVBON_AG
GN.GPDE_RP_AVBON_AN
GN.GPDE_RP_PVBON_AG
GN.GPDE_RP_PVBON_AN
GN.GPDE_RP_RVBON_AG
GN.GPDE_RP_RVBON_AN
GN.GPDE_RP_AVAG_MC
GN.GPDE_RP_AVAN_MC
GN.GPDE_RP_KVAG_MC
GN.GPDE_RP_KVAN_MC
GN.GPDE_RP_PVAG_MC
GN.GPDE_RP_PVAN_MC
GN.GPDE_RP_RVAG_MC
GN.GPDE_RP_RVAN_MC
GN.GPDE_RP_SIGRUNLM_A
GN.GPDE_RP_SIGRUNLM_B
GN.GPDE_RP_CIVLER_AMT
GN.GPDE_RP_HIVLER_AMT
SI01.GPDE_SI_PROV_AV
SI01.GPDE_SI_PROV_KV
SI01.GPDE_SI_PROV_PV
SI01.GPDE_SI_PROV_RV
SI01.GPDE_SI_PROV_UM
SI01.GPDE_SI_PROV_AV_M
SI01.GPDE_SI_PROV_KV_M
SI01.GPDE_SI_PROV_PV_M
SI01.GPDE_SI_PROV_RV_M
SI01.GPDE_SI_PROV_UM_M
GN.GPDE_RP_AZGRS_BON
GN.GPDE_RP_OAPPEN_ANL
GN.GPDE_RP_OAPPEN_BON
SI01.GPDE_SI_PROV_MAND
GN.GPDE_RP_AVDAYS_MC
GN.GPDE_RP_KVDAYS_MC
GN.GPDE_RP_PVDAYS_MC
GN.GPDE_RP_RVDAYS_MC
GN.GPDE_AZ_RP_S03_31
GN.GPDE_AZ_RP_S03_41
! wd06-881kug
GN.GPDE_RP_KUG_KVCTB
GN.GPDE_RP_KUG_KVGRS
GN.GPDE_RP_KUG_PVCTB
GN.GPDE_RP_KUG_PVGRS
GN.GPDE_RP_KUG_RVCTB
GN.GPDE_RP_KUG_RVGRS
!adj08-890b14 par23c and umlage
GN.GPDE_RP_SK_SL_NET
GN.GPDE_RP_SK_NET
GN.GPDE_RP_SK_SIEXEMP
!adj08-890b15
GN.GPDE_RP_SK_GROSS
!adj09-890b17
GN.GPDE_RP_GRSSINSLFD
GN.GPDE_RP_GRSSINSEGA
GN.GPDE_RP_UML_INSOLV
GN.GPDE_RP_VW_RVLFDAG
GN.GPDE_RP_VW_RVBONAG
GN.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
GN.GPDE_RP_GRS_INS_MC
GN.GPDE_RP_UML_INS_MC

  let $GN.EMPLID = &GN.EMPLID
  let #GN.EMPL_RCD = &GN.EMPL_RCD
  let $GN.GP_PAYGROUP = &GN.GP_PAYGROUP
  let $GN.CAL_RUN_ID = &GN.CAL_RUN_ID
  let $GN.CAL_ID = &GN.CAL_ID
  let #GN.RSLT_SEG_NUM = &GN.RSLT_SEG_NUM
  let $GN.SLICE_END_DT = &GN.SLICE_END_DT
  let $GN.PAY_ENTITY = &GN.PAY_ENTITY
  let $GN.PRD_END_DT = &GN.PRD_END_DT
  let $GN.GPDE_AL_CPAY_ENDDT = &GN.GPDE_AL_CPAY_ENDDT
        let #GN.GPDE_RP_SIGRSS_AMT = &GN.GPDE_RP_SIGRSS_AMT
        let #GN.GPDE_RP_SIGRS_ANLZ = &GN.GPDE_RP_SIGRS_ANLZ
  let #GN.GPDE_RP_HICNTB_AMT = &GN.GPDE_RP_HICNTB_AMT
  let #GN.GPDE_RP_PICNTB_AMT = &GN.GPDE_RP_PICNTB_AMT
  let #GN.GPDE_RP_UICNTB_AMT = &GN.GPDE_RP_UICNTB_AMT
  let #GN.GPDE_RP_CICNTB_AMT = &GN.GPDE_RP_CICNTB_AMT
  let #GN.GPDE_RP_HIVOL_AMT  = &GN.GPDE_RP_HIVOL_AMT
  let #GN.GPDE_RP_CIVOL_AMT  = &GN.GPDE_RP_CIVOL_AMT
  let #GN.GPDE_RP_RIGRSS_AMT = &GN.GPDE_RP_RIGRSS_AMT
  let #GN.GPDE_RP_U1CNTB_AMT = &GN.GPDE_RP_U1CNTB_AMT
  let #GN.GPDE_RP_U2CNTB_AMT = &GN.GPDE_RP_U2CNTB_AMT
  let #SI01.GPDE_RI_PCT1     = &SI01.GPDE_RI_PCT1
  let #SI01.GPDE_RI_PCT2     = &SI01.GPDE_RI_PCT2
  let #GN.GPDE_RP_RIGRSM_AMT = &GN.GPDE_RP_RIGRSM_AMT
  let #GN.GPDE_RP_U1CTBM_AMT = &GN.GPDE_RP_U1CTBM_AMT
  let #GN.GPDE_RP_U2CTBM_AMT = &GN.GPDE_RP_U2CTBM_AMT
  let #SI01.GPDE_RI_PCT1_MC  = &SI01.GPDE_RI_PCT1_MC
  let #SI01.GPDE_RI_PCT2_MC  = &SI01.GPDE_RI_PCT2_MC
  let #GN.GPDE_RP_SIGRSM_AMT = &GN.GPDE_RP_SIGRSM_AMT
  let #GN.GPDE_RP_HICTBM_AMT = &GN.GPDE_RP_HICTBM_AMT
  let #GN.GPDE_RP_PICTBM_AMT = &GN.GPDE_RP_PICTBM_AMT
  let #GN.GPDE_RP_UICTBM_AMT =  &GN.GPDE_RP_UICTBM_AMT
  let #GN.GPDE_RP_CICTBM_AMT = &GN.GPDE_RP_CICTBM_AMT
  let #GN.GPDE_RP_OAPGRS_AMT = &GN.GPDE_RP_OAPGRS_AMT
  let #GN.GPDE_RP_AZGRS_ANLZ = &GN.GPDE_RP_AZGRS_ANLZ
  let #GN.GPDE_RP_OAPPEN_AMT = &GN.GPDE_RP_OAPPEN_AMT
  let #GN.GPDE_RP_OAPGRS_MC  = &GN.GPDE_RP_OAPGRS_MC
  let #GN.GPDE_RP_OAPPEN_MC  = &GN.GPDE_RP_OAPPEN_MC
  let #GN.GPDE_RP_SIDAYS     = &GN.GPDE_RP_SIDAYS
  let #GN.GPDE_RP_AVDAYS     = &GN.GPDE_RP_AVDAYS
  let #GN.GPDE_RP_KVDAYS             = &GN.GPDE_RP_KVDAYS
  let #GN.GPDE_RP_PVDAYS     = &GN.GPDE_RP_PVDAYS
  let #GN.GPDE_RP_AVDAYS_BON         = &GN.GPDE_RP_AVDAYS_BON
  let #GN.GPDE_RP_KVDAYS_BON         = &GN.GPDE_RP_KVDAYS_BON
  let #GN.GPDE_RP_PVDAYS_BON         = &GN.GPDE_RP_PVDAYS_BON
  let #GN.GPDE_RP_RVDAYS_BON         = &GN.GPDE_RP_RVDAYS_BON
  let #GN.GPDE_RP_AVGRS_ANLZ         = &GN.GPDE_RP_AVGRS_ANLZ
  let #GN.GPDE_RP_AVGRS_BON          = &GN.GPDE_RP_AVGRS_BON
  let #GN.GPDE_RP_AVGRS_MC           = &GN.GPDE_RP_AVGRS_MC
  let #GN.GPDE_RP_KVGRS_ANLZ         = &GN.GPDE_RP_KVGRS_ANLZ
  let #GN.GPDE_RP_KVGRS_BON          = &GN.GPDE_RP_KVGRS_BON
  let #GN.GPDE_RP_KVGRS_MC           = &GN.GPDE_RP_KVGRS_MC
  let #GN.GPDE_RP_PVGRS_ANLZ         = &GN.GPDE_RP_PVGRS_ANLZ
  let #GN.GPDE_RP_PVGRS_BON          = &GN.GPDE_RP_PVGRS_BON
  let #GN.GPDE_RP_PVGRS_MC           = &GN.GPDE_RP_PVGRS_MC
  let #GN.GPDE_RP_RVGRS_ANLZ         = &GN.GPDE_RP_RVGRS_ANLZ
  let #GN.GPDE_RP_RVGRS_BON          = &GN.GPDE_RP_RVGRS_BON
  let #GN.GPDE_RP_RVGRS_MC           = &GN.GPDE_RP_RVGRS_MC
  let #GN.GPDE_RP_AVLFD_AG           = &GN.GPDE_RP_AVLFD_AG
  let #GN.GPDE_RP_AVLFD_AN           = &GN.GPDE_RP_AVLFD_AN
  let #GN.GPDE_RP_KVLFD_AG           = &GN.GPDE_RP_KVLFD_AG
  let #GN.GPDE_RP_KVLFD_AN           = &GN.GPDE_RP_KVLFD_AN
  let #GN.GPDE_RP_PVLFD_AG           = &GN.GPDE_RP_PVLFD_AG
  let #GN.GPDE_RP_PVLFD_AN           = &GN.GPDE_RP_PVLFD_AN
  let #GN.GPDE_RP_RVLFD_AG           = &GN.GPDE_RP_RVLFD_AG
  let #GN.GPDE_RP_RVLFD_AN           = &GN.GPDE_RP_RVLFD_AN
  let #GN.GPDE_RP_KVBON_AG           = &GN.GPDE_RP_KVBON_AG
  let #GN.GPDE_RP_KVBON_AN           = &GN.GPDE_RP_KVBON_AN
  let #GN.GPDE_RP_AVBON_AG           = &GN.GPDE_RP_AVBON_AG
  let #GN.GPDE_RP_AVBON_AN           = &GN.GPDE_RP_AVBON_AN
  let #GN.GPDE_RP_PVBON_AG           = &GN.GPDE_RP_PVBON_AG
  let #GN.GPDE_RP_PVBON_AN           = &GN.GPDE_RP_PVBON_AN
  let #GN.GPDE_RP_RVBON_AG           = &GN.GPDE_RP_RVBON_AG
  let #GN.GPDE_RP_RVBON_AN           = &GN.GPDE_RP_RVBON_AN
  let #GN.GPDE_RP_AVAG_MC            = &GN.GPDE_RP_AVAG_MC
  let #GN.GPDE_RP_AVAN_MC            = &GN.GPDE_RP_AVAN_MC
  let #GN.GPDE_RP_KVAG_MC            = &GN.GPDE_RP_KVAG_MC
  let #GN.GPDE_RP_KVAN_MC            = &GN.GPDE_RP_KVAN_MC
  let #GN.GPDE_RP_PVAG_MC            = &GN.GPDE_RP_PVAG_MC
  let #GN.GPDE_RP_PVAN_MC            = &GN.GPDE_RP_PVAN_MC
  let #GN.GPDE_RP_RVAG_MC            = &GN.GPDE_RP_RVAG_MC
  let #GN.GPDE_RP_RVAN_MC            = &GN.GPDE_RP_RVAN_MC
  let #GN.GPDE_RP_SIGRUNLM_A         = &GN.GPDE_RP_SIGRUNLM_A
  let #GN.GPDE_RP_SIGRUNLM_B         = &GN.GPDE_RP_SIGRUNLM_B
  let #GN.GPDE_RP_CIVLER_AMT         = &GN.GPDE_RP_CIVLER_AMT
  let #GN.GPDE_RP_HIVLER_AMT         = &GN.GPDE_RP_HIVLER_AMT
  let $SI01.GPDE_SI_PROV_AV          = &SI01.GPDE_SI_PROV_AV
  let $SI01.GPDE_SI_PROV_KV          = &SI01.GPDE_SI_PROV_KV
  let $SI01.GPDE_SI_PROV_PV          = &SI01.GPDE_SI_PROV_PV
  let $SI01.GPDE_SI_PROV_RV          = &SI01.GPDE_SI_PROV_RV
  let $SI01.GPDE_SI_PROV_UM          = &SI01.GPDE_SI_PROV_UM
  let $SI01.GPDE_SI_PROV_AV_M                = &SI01.GPDE_SI_PROV_AV_M
  let $SI01.GPDE_SI_PROV_KV_M                = &SI01.GPDE_SI_PROV_KV_M
  let $SI01.GPDE_SI_PROV_PV_M                = &SI01.GPDE_SI_PROV_PV_M
  let $SI01.GPDE_SI_PROV_RV_M                = &SI01.GPDE_SI_PROV_RV_M
  let $SI01.GPDE_SI_PROV_UM_M                = &SI01.GPDE_SI_PROV_UM_M
  let #GN.GPDE_RP_AZGRS_BON          = &GN.GPDE_RP_AZGRS_BON
  let #GN.GPDE_RP_OAPPEN_ANL         = &GN.GPDE_RP_OAPPEN_ANL
  let #GN.GPDE_RP_OAPPEN_BON         = &GN.GPDE_RP_OAPPEN_BON
  let $SI01.GPDE_SI_PROV_MAND  = &SI01.GPDE_SI_PROV_MAND
  let #GN.GPDE_RP_AVDAYS_MC     = &GN.GPDE_RP_AVDAYS_MC
  let #GN.GPDE_RP_KVDAYS_MC             = &GN.GPDE_RP_KVDAYS_MC
  let #GN.GPDE_RP_PVDAYS_MC     = &GN.GPDE_RP_PVDAYS_MC
  let #GN.GPDE_RP_RVDAYS_MC     = &GN.GPDE_RP_RVDAYS_MC
  let #GN.GPDE_AZ_RP_S03_31     = &GN.GPDE_AZ_RP_S03_31
  let #GN.GPDE_AZ_RP_S03_41     = &GN.GPDE_AZ_RP_S03_41
  ! wd06-881kug
  let #GN.GPDE_RP_KUG_KVCTB     = &GN.GPDE_RP_KUG_KVCTB
  let #GN.GPDE_RP_KUG_KVGRS     = &GN.GPDE_RP_KUG_KVGRS
  let #GN.GPDE_RP_KUG_PVCTB     = &GN.GPDE_RP_KUG_PVCTB
  let #GN.GPDE_RP_KUG_PVGRS     = &GN.GPDE_RP_KUG_PVGRS
  let #GN.GPDE_RP_KUG_RVCTB     = &GN.GPDE_RP_KUG_RVCTB
  let #GN.GPDE_RP_KUG_RVGRS     = &GN.GPDE_RP_KUG_RVGRS
  !adj08-890b14 par23c and umlage
  let #SK_SL_NET    = &GN.GPDE_RP_SK_SL_NET
  let #SK_NET   = &GN.GPDE_RP_SK_NET
  let #SK_SIEXEMP = &GN.GPDE_RP_SK_SIEXEMP
  !adj08-890b15
  let #SK_GROSS = &GN.GPDE_RP_SK_GROSS
!adj09-890b17
  let #GRS_INSOL_LFD =  &GN.GPDE_RP_GRSSINSLFD
  let #GRS_INSOL_EGA =  &GN.GPDE_RP_GRSSINSEGA
  let #UML_INSOL     =  &GN.GPDE_RP_UML_INSOLV
!adj09- Pension Fund
  let #PF_LFD = &GN.GPDE_RP_VW_RVLFDAG
  let #PF_BON = &GN.GPDE_RP_VW_RVBONAG
  let #PF_RvAg = &GN.GPDE_RP_VW_RVAG_MC
!adj09-890b19: RI MC insolvency
  let #GRS_INS_MC = &GN.GPDE_RP_GRS_INS_MC
  let #UML_INS_MC = &GN.GPDE_RP_UML_INS_MC

  ! <-- jjj
  do GetKugData
  ! --> jjj


  if &GN.PRD_END_DT = &GN.GPDE_AL_CPAY_ENDDT
     let $Pr_Sign = 'K'
  else
     let $Pr_Sign = 'N'
  end-if
  do Insert_Data_Lohnkonto

FROM PS_GPDE_RP_0001_VW RP01a, PS_GPDE_RP_0003_VW GN,PS_GPDE_RP_SI01_VW SI01
WHERE RP01a.EMPLID = GN.EMPLID and RP01a.EMPL_RCD = GN.EMPL_RCD
  and RP01a.GP_PAYGROUP = GN.GP_PAYGROUP and RP01a.CAL_ID = GN.CAL_ID
  and RP01a.CAL_RUN_ID = GN.CAL_RUN_ID and RP01a.SEG_END_DT = GN.SEG_END_DT
  and RP01a.RSLT_SEG_NUM = GN.RSLT_SEG_NUM and RP01a.PAY_ENTITY = $Ctl_PayEntity
  AND SI01.EMPLID = GN.EMPLID AND SI01.CAL_RUN_ID = GN.CAL_RUN_ID
  AND SI01.EMPL_RCD = GN.EMPL_RCD AND SI01.GP_PAYGROUP = GN.GP_PAYGROUP
  AND SI01.CAL_ID = GN.CAL_ID AND SI01.RSLT_SEG_NUM = GN.RSLT_SEG_NUM
  AND SI01.SEG_END_DT = GN.SEG_END_DT AND SI01.SLICE_END_DT = GN.SLICE_END_DT
  AND GN.GPDE_AL_CPAY_ENDDT = $NewCpay AND GN.PRD_END_DT = $NewPrd AND GN.EMPLID = $NewEmpl
end-select

end-procedure







!****************************************************************
begin-procedure SearchForProvider               !was:Select_data
!
! this procedure selects providers
! and stores the list in GPDE_RP_TX03B
!
! (GPDE_SI_PROV_MAND is a recycled field, nothing to do with Einzugsstelle!!)
begin-select distinct
[$TempField] &TempFld=char
   do AddToProviderList
from PS_GPDE_RP_TX03_1 SI10T
where [$TempField1] not in
      (select B1.GPDE_SI_PROV_MAND from PS_GPDE_RP_TX03B B1)
end-select
end-procedure


!****************************************************************
begin-procedure AddToProviderList               !was:InsetNewRow
begin-sql
insert into PS_GPDE_RP_TX03B(GPDE_SI_PROV_MAND)
values (&TempFld)
end-sql
end-procedure





!********************************************************************************************
begin-procedure Get_End_Mnth($Dte1,:$Dte2)
 if rtrim($Dte1,' ') <> ''
  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)
  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
        (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
   else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
   end-if
   let $MonthDays1 = to_char(#MonthDays1)
   let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
   do Format-DateTime($E_DT_tmp1,$Dte2, {DEFCMP},'','native')
 end-if
end-procedure
!*************************************************************************
begin-procedure Get_Beg_Mnth($Dte1,:$Dte2)
 if rtrim($Dte1,' ') <> ''
  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tpm1_dd)
  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1,$Dte2, {DEFCMP},'','native')
 end-if
end-procedure
!************************************************************************************
begin-procedure Get-PayEntity-Data($payentity, $curr_pay_end_dt, :$PayentityName,
                :$PayentityStreet,:$PayentityStreet2,:$PayentityStreet2,:$PoBox,
                :$PayentityZipCity,:$Nation,:$Post,:$Cit)
let $PayentityName    = ' '
let $PayentityStreet  = ' '
let $PayentityStreet2 = ' '
let $PayentityStreet3 = ' '
let $PoBox = ' '
let $PayentityZipCity = ' '
let $Nation = ' '
let $Post = ' '
let $Cit = ' '
begin-SELECT
CP.DESCR
CT.ADDRESS1
CT.ADDRESS2
CT.ADDRESS3
CT.ADDRESS4
CT.CITY
CT.POSTAL
CT.COUNTRY
  let $PayentityName = rtrim(&CP.DESCR,' ')
  let $PayentityStreet = rtrim(&CT.ADDRESS1,' ')
  let $PayentityStreet2 = rtrim(&CT.ADDRESS2,' ')
  let $PayentityStreet3 = rtrim(&CT.ADDRESS3,' ')
  let $PoBox = rtrim(&CT.ADDRESS4,' ')
  let $Nation = rtrim(&CT.COUNTRY,' ')
  let $Post = rtrim(&CT.POSTAL,' ')
  let $Cit = rtrim(&CT.CITY,' ')
  let $PayentityZipCity = rtrim(&CT.POSTAL,' ') || ' ' || rtrim(&CT.CITY,' ')
FROM  PS_GP_PYENT CP, PS_GP_PYENT_DTL CT
WHERE CP.PAY_ENTITY = CT.PAY_ENTITY
AND   CP.PAY_ENTITY = $payentity
AND   CT.EFFDT = (SELECT MAX(EFFDT) FROM   PS_GP_PYENT_DTL CT1
      WHERE  CT1.PAY_ENTITY = CT.PAY_ENTITY AND  CT1.EFFDT  <= $curr_pay_end_dt)
end-SELECT
end-procedure


!****************************************************************
! this BTNR may be wrong
!
!****************************************************************
begin-procedure Get-GPDE_DO_BTNR-via-job($si_provider, $payentity, $pay_end_dt, :$GPDE_DO_BTNR)
let $GPDE_DO_BTNR = ''
Begin-select
A.GPDE_SI_CUST_ACTV
        let $GPDE_DO_BTNR = &A.GPDE_SI_CUST_ACTV
FROM PS_GPDE_AL_PE_SID A
WHERE A.GPDE_SI_PROV = $si_provider AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPDE_AL_PE_SID A1
        WHERE A1.GPDE_SI_PROV = A.GPDE_SI_PROV AND A1.PAY_ENTITY = A.PAY_ENTITY
         AND A1.EFFDT <= $pay_end_dt) AND A.PAY_ENTITY = $payentity
End-select
if rtrim($GPDE_DO_BTNR, ' ') = ''
   let $GPDE_DO_BTNR = 'XXX'
end-if
end-procedure




!****************************************************************
! BTNR of the employer depends on employee settings (location)
! NEW
!****************************************************************
begin-procedure GetEmployerNumberByEmplid($Emplid, #Empl_Rcd_Nbr, $pay_end_dt, :$GPDE_DO_BTNR)
!
! returns the  $GPDE_DO_BTNR (Betriebsnummer Arbeitgeber)
let $GPDE_DO_BTNR = ''
Begin-select
CL.GPDE_SI_BTNR    &DO_BTRN
        let $GPDE_DO_BTNR = &DO_BTRN
FROM PS_JOB J,
    PS_GPDE_AL_PE_LOC CL
WHERE J.EMPLID = $Emplid
     AND J.EMPL_RCD = #Empl_Rcd_Nbr
AND J.EFFDT=(
    SELECT MAX(EFFDT)
    FROM PS_JOB J2
    WHERE J2.EMPLID=J.EMPLID
    AND J2.EMPL_RCD=J.EMPL_RCD
    AND J2.EFFDT<= $pay_end_dt)
AND J.EFFSEQ=(
    SELECT MAX(EFFSEQ)
    FROM PS_JOB J3
    WHERE J3.EMPLID=J.EMPLID
    AND J3.EMPL_RCD=J.EMPL_RCD
    AND J3.EFFDT=J.EFFDT)
AND CL.SETID=J.SETID_DEPT
AND CL.LOCATION=J.LOCATION
AND CL.PAY_ENTITY=J.COMPANY
AND CL.EFFDT=(
    SELECT MAX(EFFDT)
    FROM PS_GPDE_AL_PE_LOC CL1
    WHERE CL1.SETID=CL.SETID
    AND CL1.LOCATION=CL.LOCATION
    AND CL1.PAY_ENTITY=CL.PAY_ENTITY
    AND CL1.EFFDT<= $pay_end_dt)
End-select
if rtrim($GPDE_DO_BTNR, ' ') = ''
   let $GPDE_DO_BTNR = 'XXX'
end-if

end-procedure






begin-procedure GetYearendDepartmentDescr($Emplid, #Empl_Rcd_Nbr, $pay_end_dt, :$DeptId,:$DeptDescr)
!
! returns the deptid and description of the department at yearend ($DeptDescr)
!
let $DeptDescr = ''
let $DeptId = ''
let $_TariffGroup ='-'

Begin-select
JX1.DEPTID          &YREND_DEPTID
   let $DeptId =    &YREND_DEPTID
JX1.SETID_DEPT      &YREND_SETID_DEPT
DT1.DESCR           &YREND_DT1_DESCR
   let $DeptDescr = &YREND_DT1_DESCR
JX1.GRADE
   ! wdu05-881b8  added TariffGroup for header
   ! defaults to '-' meaning n/a, see above select. Notice: global variable.
   let $_TariffGroup =  &JX1.GRADE
   let $_TariffGroup = rtrim( $_TariffGroup,' ')

FROM PS_JOB JX1,
    PS_DEPT_TBL DT1
WHERE JX1.EMPLID = $Emplid
     AND JX1.EMPL_RCD = #Empl_Rcd_Nbr
AND JX1.EFFDT=(
    SELECT MAX(JX2.EFFDT)
    FROM PS_JOB JX2
    WHERE JX2.EMPLID=JX1.EMPLID
    AND JX2.EMPL_RCD=JX1.EMPL_RCD
    AND JX2.EFFDT<= $pay_end_dt)
AND JX1.EFFSEQ=(
    SELECT MAX(JX3.EFFSEQ)
    FROM PS_JOB JX3
    WHERE JX3.EMPLID=JX1.EMPLID
    AND JX3.EMPL_RCD=JX1.EMPL_RCD
    AND JX3.EFFDT=JX1.EFFDT)
AND DT1.SETID = JX1.SETID_DEPT
AND DT1.DEPTID = JX1.DEPTID
AND DT1.EFFDT=(SELECT MAX(DT2.EFFDT) FROM PS_DEPT_TBL DT2
  WHERE DT2.SETID=DT1.SETID
  AND DT2.DEPTID=DT1.DEPTID
  AND DT2.EFFDT <= $pay_end_dt)
End-select

end-procedure



!**********************************************************************************
begin-procedure PrepareData_Tax
if $Ctl_Emplid <> ''
    let $Emplid_Crit_GND1     = ' AND GND1.EMPLID = ''' || $Ctl_Emplid ||  ''' '
else
    let $Emplid_Crit_GND1     = ' '
end-if
Begin-Sql
DELETE FROM PS_GPDE_RP_TX03_2
End-Sql
let $FirstR = 'Y'
!wdu-qk04: expanded for EMPL_RCD
begin-select distinct
GND1.EMPLID              &GND1.EMPLID
GND1.EMPL_RCD              &GND1.EMPL_RCD
GND1.PRD_END_DT          &GND1.PRD_END_DT
GND1.GPDE_AL_CPAY_ENDDT &GND1.GPDE_AL_CPAY_ENDDT
       let $NewCpay = &GND1.GPDE_AL_CPAY_ENDDT
       let $NewPrd =  &GND1.PRD_END_DT
       let $NewEmpl = &GND1.EMPLID
       let #NewEmplRcd = &GND1.EMPL_RCD
       if $LastEmpl <> &GND1.EMPLID or #LastEmplRcd <> &GND1.EMPL_RCD
          let $FirstR = 'Y'
       end-if
       if $FirstR <> 'Y' and $NewPrd = $LastPrd
         do Storno1
       end-if
       do DataNew1
       let $FirstR = 'N'
       let $LastCpay = &GND1.GPDE_AL_CPAY_ENDDT
       let $LastPrd =  &GND1.PRD_END_DT
       let $LastEmpl = &GND1.EMPLID
       let #LastEmplRcd = &GND1.EMPL_RCD
FROM PS_GPDE_RP_0002_VW GND1 WHERE GND1.PAY_ENTITY = $Ctl_PayEntity
 [$Emplid_Crit_GND1]
 order by GND1.EMPLID,GND1.EMPL_RCD,GND1.PRD_END_DT,GND1.GPDE_AL_CPAY_ENDDT
end-select
end-procedure
!**********************************************************************************
begin-procedure Storno1

!wdu-qk04 expanded for EmplRcd
begin-select
GNS1.EMPLID
GNS1.CAL_RUN_ID
GNS1.EMPL_RCD
GNS1.GP_PAYGROUP
GNS1.CAL_ID
GNS1.RSLT_SEG_NUM
GNS1.SEG_END_DT
GNS1.PAY_ENTITY
GNS1.PRD_END_DT
GNS1.GPDE_AL_CPAY_ENDDT
GNS1.GPDE_RP_VACBAL
GNS1.GPDE_RP_VACENT
GNS1.GPDE_RP_VACTAKE
GNS1.GPDE_RP_VACPYR
GNS1.GPDE_RP_WRKDHRS
GNS1.GPDE_RP_OVRTMHRS
GNS1.GPDE_RP_TXDAYS
GNS1.GPDE_RP_TXGRS_TOT
GNS1.GPDE_RP_TXGRS_ANLZ
GNS1.GPDE_RP_TXGRS_BON
GNS1.GPDE_RP_TXGRS_PEN
GNS1.GPDE_RP_TXGRS_MYBN
GNS1.GPDE_RP_TXGRS_MYPN
GNS1.GPDE_RP_TAX
GNS1.GPDE_RP_CHRCH_TAX
GNS1.GPDE_RP_SLDRTY_TAX
GNS1.GPDE_RP_TAX_MY
GNS1.GPDE_RP_CRCH_TX_MY
GNS1.GPDE_RP_SLDY_TX_MY
GNS1.GPDE_RP_PENTXF
GNS1.GPDE_RP_NOI
GNS1.GPDE_RP_STATDD_SUM
GNS1.GPDE_RP_DED_SUM
GNS1.GPDE_RP_CHMBBR_AMT
GNS1.GPDE_RP_CHMBSA_AMT
GNS1.GPDE_RP_TOTGRSS
GNS1.GPDE_RP_LMP_DIRINS
GNS1.GPDE_RP_LMP_TRVLEX
GNS1.GPDE_RP_LMP_GRSS
GNS1.GPDE_RP_LMP_TXEE
GNS1.GPDE_RP_LMP_TXER
GNS1.GPDE_RP_LMP_CHTXEE
GNS1.GPDE_RP_LMP_CHTXER
GNS1.GPDE_RP_LMP_SLTXEE
GNS1.GPDE_RP_LMP_SLTXER

  let $GN.EMPLID = &GNS1.EMPLID
  let $GN.CAL_RUN_ID = &GNS1.CAL_RUN_ID
  let #GN.EMPL_RCD = &GNS1.EMPL_RCD
  let $GN.GP_PAYGROUP = &GNS1.GP_PAYGROUP
  let $GN.CAL_ID = &GNS1.CAL_ID
  let #GN.RSLT_SEG_NUM = &GNS1.RSLT_SEG_NUM
  let $GN.SEG_END_DT = &GNS1.SEG_END_DT
  let $GN.PAY_ENTITY = &GNS1.PAY_ENTITY
  let $GN.PRD_END_DT = &GNS1.PRD_END_DT
  let $GN.GPDE_AL_CPAY_ENDDT = $NewCpay
  if &GNS1.PRD_END_DT <> $NewCpay
     let $Pr_Sign = 'L'
  else
     let $Pr_Sign = 'A'
  end-if
  let #GN.GPDE_RP_VACBAL     = -1 * &GNS1.GPDE_RP_VACBAL
  let #GN.GPDE_RP_VACENT     = -1 * &GNS1.GPDE_RP_VACENT
  let #GN.GPDE_RP_VACTAKE    = -1 * &GNS1.GPDE_RP_VACTAKE
  let #GN.GPDE_RP_VACPYR     = -1 * &GNS1.GPDE_RP_VACPYR
  let #GN.GPDE_RP_WRKDHRS    = -1 * &GNS1.GPDE_RP_WRKDHRS
  let #GN.GPDE_RP_OVRTMHRS   = -1 * &GNS1.GPDE_RP_OVRTMHRS
  let #GN.GPDE_RP_TXDAYS     = -1 * &GNS1.GPDE_RP_TXDAYS
  let #GN.GPDE_RP_TXGRS_TOT  = -1 * &GNS1.GPDE_RP_TXGRS_TOT
  let #GN.GPDE_RP_TXGRS_ANLZ = -1 * &GNS1.GPDE_RP_TXGRS_ANLZ
  let #GN.GPDE_RP_TXGRS_BON  = -1 * &GNS1.GPDE_RP_TXGRS_BON
  let #GN.GPDE_RP_TXGRS_PEN  = -1 * &GNS1.GPDE_RP_TXGRS_PEN
  let #GN.GPDE_RP_TXGRS_MYBN = -1 * &GNS1.GPDE_RP_TXGRS_MYBN
  let #GN.GPDE_RP_TXGRS_MYPN = -1 * &GNS1.GPDE_RP_TXGRS_MYPN
  let #GN.GPDE_RP_TAX        = -1 * &GNS1.GPDE_RP_TAX
  let #GN.GPDE_RP_CHRCH_TAX  = -1 * &GNS1.GPDE_RP_CHRCH_TAX
  let #GN.GPDE_RP_SLDRTY_TAX = -1 * &GNS1.GPDE_RP_SLDRTY_TAX
  let #GN.GPDE_RP_TAX_MY     = -1 * &GNS1.GPDE_RP_TAX_MY
  let #GN.GPDE_RP_CRCH_TX_MY = -1 * &GNS1.GPDE_RP_CRCH_TX_MY
  let #GN.GPDE_RP_SLDY_TX_MY = -1 * &GNS1.GPDE_RP_SLDY_TX_MY
  let #GN.GPDE_RP_PENTXF     = -1 * &GNS1.GPDE_RP_PENTXF
  let #GN.GPDE_RP_NOI        = -1 * &GNS1.GPDE_RP_NOI
  let #GN.GPDE_RP_STATDD_SUM = -1 * &GNS1.GPDE_RP_STATDD_SUM
  let #GN.GPDE_RP_DED_SUM    = -1 * &GNS1.GPDE_RP_DED_SUM
  let #GN.GPDE_RP_CHMBBR_AMT = -1 * &GNS1.GPDE_RP_CHMBBR_AMT
  let #GN.GPDE_RP_CHMBSA_AMT = -1 * &GNS1.GPDE_RP_CHMBSA_AMT
  let #GN.GPDE_RP_TOTGRSS    = -1 * &GNS1.GPDE_RP_TOTGRSS
  let #GN.GPDE_RP_LMP_DIRINS = -1 * &GNS1.GPDE_RP_LMP_DIRINS
  let #GN.GPDE_RP_LMP_TRVLEX = -1 * &GNS1.GPDE_RP_LMP_TRVLEX
  let #GN.GPDE_RP_LMP_GRSS   = -1 * &GNS1.GPDE_RP_LMP_GRSS
  let #GN.GPDE_RP_LMP_TXEE   = -1 * &GNS1.GPDE_RP_LMP_TXEE
  let #GN.GPDE_RP_LMP_TXER   = -1 * &GNS1.GPDE_RP_LMP_TXER
  let #GN.GPDE_RP_LMP_CHTXEE = -1 * &GNS1.GPDE_RP_LMP_CHTXEE
  let #GN.GPDE_RP_LMP_CHTXER = -1 * &GNS1.GPDE_RP_LMP_CHTXER
  let #GN.GPDE_RP_LMP_SLTXEE = -1 * &GNS1.GPDE_RP_LMP_SLTXEE
  let #GN.GPDE_RP_LMP_SLTXER = -1 * &GNS1.GPDE_RP_LMP_SLTXER

     do Insert_Data_Lohnkonto1
FROM PS_GPDE_RP_0002_VW GNS1 WHERE GNS1.PAY_ENTITY = $Ctl_PayEntity
  AND GNS1.GPDE_AL_CPAY_ENDDT = $LastCpay AND GNS1.PRD_END_DT = $NewPrd
  AND GNS1.EMPLID = $LastEmpl
  AND GNS1.EMPL_RCD = #LastEmplRcd
end-select
end-procedure
!**********************************************************************************
begin-procedure DataNew1
! wdu-qk04 expanded for EmplRcd
begin-select
GN1.EMPLID
GN1.CAL_RUN_ID
GN1.EMPL_RCD
GN1.GP_PAYGROUP
GN1.CAL_ID
GN1.RSLT_SEG_NUM
GN1.SEG_END_DT
GN1.PAY_ENTITY
GN1.PRD_END_DT
GN1.GPDE_AL_CPAY_ENDDT
GN1.GPDE_RP_VACBAL
GN1.GPDE_RP_VACENT
GN1.GPDE_RP_VACTAKE
GN1.GPDE_RP_VACPYR
GN1.GPDE_RP_WRKDHRS
GN1.GPDE_RP_OVRTMHRS
GN1.GPDE_RP_TXDAYS
GN1.GPDE_RP_TXGRS_TOT
GN1.GPDE_RP_TXGRS_ANLZ
GN1.GPDE_RP_TXGRS_BON
GN1.GPDE_RP_TXGRS_PEN
GN1.GPDE_RP_TXGRS_MYBN
GN1.GPDE_RP_TXGRS_MYPN
GN1.GPDE_RP_TAX
GN1.GPDE_RP_CHRCH_TAX
GN1.GPDE_RP_SLDRTY_TAX
GN1.GPDE_RP_TAX_MY
GN1.GPDE_RP_CRCH_TX_MY
GN1.GPDE_RP_SLDY_TX_MY
GN1.GPDE_RP_PENTXF
GN1.GPDE_RP_NOI
GN1.GPDE_RP_STATDD_SUM
GN1.GPDE_RP_DED_SUM
GN1.GPDE_RP_CHMBBR_AMT
GN1.GPDE_RP_CHMBSA_AMT
GN1.GPDE_RP_TOTGRSS
GN1.GPDE_RP_LMP_DIRINS
GN1.GPDE_RP_LMP_TRVLEX
GN1.GPDE_RP_LMP_GRSS
GN1.GPDE_RP_LMP_TXEE
GN1.GPDE_RP_LMP_TXER
GN1.GPDE_RP_LMP_CHTXEE
GN1.GPDE_RP_LMP_CHTXER
GN1.GPDE_RP_LMP_SLTXEE
GN1.GPDE_RP_LMP_SLTXER
  let $GN.EMPLID = &GN1.EMPLID
  let $GN.CAL_RUN_ID = &GN1.CAL_RUN_ID
  let #GN.EMPL_RCD = &GN1.EMPL_RCD
  let $GN.GP_PAYGROUP = &GN1.GP_PAYGROUP
  let $GN.CAL_ID = &GN1.CAL_ID
  let #GN.RSLT_SEG_NUM = &GN1.RSLT_SEG_NUM
  let $GN.SEG_END_DT = &GN1.SEG_END_DT
  let $GN.PAY_ENTITY = &GN1.PAY_ENTITY
  let $GN.PRD_END_DT = &GN1.PRD_END_DT
  let $GN.GPDE_AL_CPAY_ENDDT = &GN1.GPDE_AL_CPAY_ENDDT
  let #GN.GPDE_RP_VACBAL     = &GN1.GPDE_RP_VACBAL
  let #GN.GPDE_RP_VACENT     = &GN1.GPDE_RP_VACENT
  let #GN.GPDE_RP_VACTAKE    = &GN1.GPDE_RP_VACTAKE
  let #GN.GPDE_RP_VACPYR     = &GN1.GPDE_RP_VACPYR
  let #GN.GPDE_RP_WRKDHRS    = &GN1.GPDE_RP_WRKDHRS
  let #GN.GPDE_RP_OVRTMHRS   = &GN1.GPDE_RP_OVRTMHRS
  let #GN.GPDE_RP_TXDAYS     = &GN1.GPDE_RP_TXDAYS
  let #GN.GPDE_RP_TXGRS_TOT  = &GN1.GPDE_RP_TXGRS_TOT
  let #GN.GPDE_RP_TXGRS_ANLZ = &GN1.GPDE_RP_TXGRS_ANLZ
  let #GN.GPDE_RP_TXGRS_BON  = &GN1.GPDE_RP_TXGRS_BON
  let #GN.GPDE_RP_TXGRS_PEN  = &GN1.GPDE_RP_TXGRS_PEN
  let #GN.GPDE_RP_TXGRS_MYBN = &GN1.GPDE_RP_TXGRS_MYBN
  let #GN.GPDE_RP_TXGRS_MYPN = &GN1.GPDE_RP_TXGRS_MYPN
  let #GN.GPDE_RP_TAX        = &GN1.GPDE_RP_TAX
  let #GN.GPDE_RP_CHRCH_TAX  = &GN1.GPDE_RP_CHRCH_TAX
  let #GN.GPDE_RP_SLDRTY_TAX = &GN1.GPDE_RP_SLDRTY_TAX
  let #GN.GPDE_RP_TAX_MY     = &GN1.GPDE_RP_TAX_MY
  let #GN.GPDE_RP_CRCH_TX_MY = &GN1.GPDE_RP_CRCH_TX_MY
  let #GN.GPDE_RP_SLDY_TX_MY = &GN1.GPDE_RP_SLDY_TX_MY
  let #GN.GPDE_RP_PENTXF     = &GN1.GPDE_RP_PENTXF
  let #GN.GPDE_RP_NOI        = &GN1.GPDE_RP_NOI
  let #GN.GPDE_RP_STATDD_SUM = &GN1.GPDE_RP_STATDD_SUM
  let #GN.GPDE_RP_DED_SUM    = &GN1.GPDE_RP_DED_SUM
  let #GN.GPDE_RP_CHMBBR_AMT = &GN1.GPDE_RP_CHMBBR_AMT
  let #GN.GPDE_RP_CHMBSA_AMT = &GN1.GPDE_RP_CHMBSA_AMT
  let #GN.GPDE_RP_TOTGRSS    = &GN1.GPDE_RP_TOTGRSS
  let #GN.GPDE_RP_LMP_DIRINS = &GN1.GPDE_RP_LMP_DIRINS
  let #GN.GPDE_RP_LMP_TRVLEX = &GN1.GPDE_RP_LMP_TRVLEX
  let #GN.GPDE_RP_LMP_GRSS   = &GN1.GPDE_RP_LMP_GRSS
  let #GN.GPDE_RP_LMP_TXEE   = &GN1.GPDE_RP_LMP_TXEE
  let #GN.GPDE_RP_LMP_TXER   = &GN1.GPDE_RP_LMP_TXER
  let #GN.GPDE_RP_LMP_CHTXEE = &GN1.GPDE_RP_LMP_CHTXEE
  let #GN.GPDE_RP_LMP_CHTXER = &GN1.GPDE_RP_LMP_CHTXER
  let #GN.GPDE_RP_LMP_SLTXEE = &GN1.GPDE_RP_LMP_SLTXEE
  let #GN.GPDE_RP_LMP_SLTXER = &GN1.GPDE_RP_LMP_SLTXER

  if &GN1.PRD_END_DT = &GN1.GPDE_AL_CPAY_ENDDT
     let $Pr_Sign = 'K'
  else
     let $Pr_Sign = 'N'
  end-if
  do Insert_Data_Lohnkonto1
FROM PS_GPDE_RP_0002_VW GN1 where GN1.PAY_ENTITY = $Ctl_PayEntity
  AND GN1.GPDE_AL_CPAY_ENDDT = $NewCpay AND GN1.PRD_END_DT = $NewPrd
  AND GN1.EMPLID = $NewEmpl
  AND GN1.EMPL_RCD = #NewEmplRcd
end-select
end-procedure
!*************************************************************************
begin-procedure Insert_Data_Lohnkonto1
begin-sql
INSERT INTO PS_GPDE_RP_TX03_2  (EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,RSLT_SEG_NUM
,SEG_END_DT, PAY_ENTITY,PRD_END_DT,GPDE_AL_CPAY_ENDDT,GPDE_RP_VACBAL,GPDE_RP_VACENT,GPDE_RP_VACTAKE
,GPDE_RP_VACPYR,GPDE_RP_WRKDHRS,GPDE_RP_OVRTMHRS,GPDE_RP_TXDAYS,GPDE_RP_TXGRS_TOT,GPDE_RP_TXGRS_ANLZ
,GPDE_RP_TXGRS_BON,GPDE_RP_TXGRS_PEN,GPDE_RP_TXGRS_MYBN,GPDE_RP_TXGRS_MYPN,GPDE_RP_TAX
,GPDE_RP_CHRCH_TAX,GPDE_RP_SLDRTY_TAX,GPDE_RP_TAX_MY,GPDE_RP_CRCH_TX_MY,GPDE_RP_SLDY_TX_MY
,GPDE_RP_PENTXF,GPDE_RP_NOI,GPDE_RP_STATDD_SUM,GPDE_RP_DED_SUM,GPDE_RP_CHMBBR_AMT,GPDE_RP_CHMBSA_AMT
,GPDE_RP_TOTGRSS,GPDE_RP_LMP_DIRINS,GPDE_RP_LMP_TRVLEX,GPDE_RP_LMP_GRSS,GPDE_RP_LMP_TXEE
,GPDE_RP_LMP_TXER,GPDE_RP_LMP_CHTXEE,GPDE_RP_LMP_CHTXER,GPDE_RP_LMP_SLTXEE,GPDE_RP_LMP_SLTXER
,GPDE_RC_PRT_SIGN
)
VALUES  ($GN.EMPLID,$GN.CAL_RUN_ID,#GN.EMPL_RCD,$GN.GP_PAYGROUP
,$GN.CAL_ID,#GN.RSLT_SEG_NUM,$GN.SEG_END_DT,$GN.PAY_ENTITY,$GN.PRD_END_DT,$GN.GPDE_AL_CPAY_ENDDT
,#GN.GPDE_RP_VACBAL,#GN.GPDE_RP_VACENT,#GN.GPDE_RP_VACTAKE,#GN.GPDE_RP_VACPYR,#GN.GPDE_RP_WRKDHRS
,#GN.GPDE_RP_OVRTMHRS,#GN.GPDE_RP_TXDAYS,#GN.GPDE_RP_TXGRS_TOT,#GN.GPDE_RP_TXGRS_ANLZ
,#GN.GPDE_RP_TXGRS_BON,#GN.GPDE_RP_TXGRS_PEN,#GN.GPDE_RP_TXGRS_MYBN,#GN.GPDE_RP_TXGRS_MYPN
,#GN.GPDE_RP_TAX,#GN.GPDE_RP_CHRCH_TAX,#GN.GPDE_RP_SLDRTY_TAX,#GN.GPDE_RP_TAX_MY
,#GN.GPDE_RP_CRCH_TX_MY,#GN.GPDE_RP_SLDY_TX_MY,#GN.GPDE_RP_PENTXF,#GN.GPDE_RP_NOI
,#GN.GPDE_RP_STATDD_SUM,#GN.GPDE_RP_DED_SUM,#GN.GPDE_RP_CHMBBR_AMT,#GN.GPDE_RP_CHMBSA_AMT
,#GN.GPDE_RP_TOTGRSS,#GN.GPDE_RP_LMP_DIRINS,#GN.GPDE_RP_LMP_TRVLEX,#GN.GPDE_RP_LMP_GRSS
,#GN.GPDE_RP_LMP_TXEE,#GN.GPDE_RP_LMP_TXER,#GN.GPDE_RP_LMP_CHTXEE,#GN.GPDE_RP_LMP_CHTXER
,#GN.GPDE_RP_LMP_SLTXEE,#GN.GPDE_RP_LMP_SLTXER,$Pr_Sign
)
end-sql
end-procedure







!***********************************************************************
begin-procedure Print_comp_LohnKonto_Steuer
! first tax page
!
let #currLine = 0
let #Ges_Brutto_sum = 0
let #Steuer_Brutto_sum = 0
let #Lfd_Bez_Sum = 0
let #Sonst_Bez_sum = 0
let #St_Freie_Bez_sum = 0
let #Vers_Bez_sum = 0
let #Mehrj_Bez_sum = 0
let #Mehrj_Vers_Bez_sum = 0
let #Lohn_Steuer_sum = 0
let #Lohn_SteuerMJ_sum = 0
let #KirchenSteuer_sum = 0
let #KirchenSteuerMJ_sum = 0
let #SolidZuschl_sum = 0
let #SolidZuschlMJ_sum = 0
let #SteuerFreiePens_sum = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #PBDS1.EMPL_RCD_Old = 0
let $PBDS1.GP_PAYGROUP_Old = ''
let $PBDS1.CAL_ID_Old = ''
let $PBDS1.GPDE_AL_CPAY_ENDDT_Old = ''
let $PBDS1.CURRENCY_CD = ''
let $PBDS1.CURRENCY_CD_Old = ''
begin-select
PBDS1.EMPLID
PBDS1.CAL_RUN_ID
PBDS1.EMPL_RCD
PBDS1.GP_PAYGROUP
PBDS1.CAL_ID
PBDS1.RSLT_SEG_NUM
PBDS1.CURRENCY_CD
PTCS1.SEG_END_DT
PTCS1.PAY_ENTITY
PTCS1.PRD_END_DT
PTCS1.GPDE_AL_CPAY_ENDDT
PTCS1.GPDE_RP_VACBAL
PTCS1.GPDE_RP_VACENT
PTCS1.GPDE_RP_VACTAKE
PTCS1.GPDE_RP_VACPYR
PTCS1.GPDE_RP_WRKDHRS
PTCS1.GPDE_RP_OVRTMHRS
PTCS1.GPDE_RP_TOTGRSS         ! GesamtBrutto
PTCS1.GPDE_RP_TXDAYS          ! St.Tage
PTCS1.GPDE_RP_TXGRS_TOT       !Steuer-Brutto gesamt
PTCS1.GPDE_RP_TXGRS_ANLZ      !Lfd. Bezüge
PTCS1.GPDE_RP_TXGRS_BON       !Sonst. Bezüge
PTCS1.GPDE_RP_TXGRS_PEN       !Vers.Bezüge
PTCS1.GPDE_RP_TXGRS_MYBN      !Mehrj Bezüge
PTCS1.GPDE_RP_TXGRS_MYPN
PTCS1.GPDE_RP_TAX
PTCS1.GPDE_RP_CHRCH_TAX
PTCS1.GPDE_RP_SLDRTY_TAX
PTCS1.GPDE_RP_TAX_MY
PTCS1.GPDE_RP_CRCH_TX_MY
PTCS1.GPDE_RP_SLDY_TX_MY
PTCS1.GPDE_RP_PENTXF
PTCS1.GPDE_RP_NOI
PTCS1.GPDE_RC_PRT_SIGN
!wdu jw2005 company pensions
PBDS1.GPDE_TX_VBEZM
PBDS1.GPDE_TX_VBEZS
PBDS1.GPDE_TX_VBEZB
PBDS1.GPDE_TX_VBEZ_DT
PBDS1.GPDE_TX_ZMVB
  ! values for the header
  let #PBDS1.GPDE_TX_VBEZM = &PBDS1.GPDE_TX_VBEZM
  let #PBDS1.GPDE_TX_VBEZS = &PBDS1.GPDE_TX_VBEZS
  let #PBDS1.GPDE_TX_VBEZB = &PBDS1.GPDE_TX_VBEZB
  let #PBDS1.GPDE_TX_ZMVB = &PBDS1.GPDE_TX_ZMVB
  let $PBDS1.GPDE_TX_VBEZ_DT = &PBDS1.GPDE_TX_VBEZ_DT

  let $NeuAltString = ''
  let $PBDS1.CURRENCY_CD = &PBDS1.CURRENCY_CD
  if #zaehler > 0 and $PBDS1.CURRENCY_CD <> $PBDS1.CURRENCY_CD_Old
     do Print_Sums_Steuer-S1
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if
  let #Steuertage = &PTCS1.GPDE_RP_TXDAYS
  let #Ges_Brutto = &PTCS1.GPDE_RP_TOTGRSS
  let #Steuer_Brutto = &PTCS1.GPDE_RP_TXGRS_TOT
  let #Lfd_Bez = &PTCS1.GPDE_RP_TXGRS_ANLZ
  let #Sonst_Bez = &PTCS1.GPDE_RP_TXGRS_BON
  let #Vers_Bez = &PTCS1.GPDE_RP_TXGRS_PEN
  let #Mehrj_Bez = &PTCS1.GPDE_RP_TXGRS_MYBN
  let #Mehrj_Vers_Bez = &PTCS1.GPDE_RP_TXGRS_MYPN
  let #Lohn_Steuer = &PTCS1.GPDE_RP_TAX
  let #Lohn_SteuerMJ = &PTCS1.GPDE_RP_TAX_MY
  let #KirchenSteuer = &PTCS1.GPDE_RP_CHRCH_TAX
  let #KirchenSteuerMJ = &PTCS1.GPDE_RP_CRCH_TX_MY
  let #SolidZuschl = &PTCS1.GPDE_RP_SLDRTY_TAX
  let #SolidZuschlMJ = &PTCS1.GPDE_RP_SLDY_TX_MY
  let #SteuerFreiePens = &PTCS1.GPDE_RP_PENTXF
  let #AnzahlU = &PTCS1.GPDE_RP_NOI
  evaluate &PTCS1.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $PRD_END_DT = &PTCS1.PRD_END_DT
  let $PTCS1.GPDE_AL_CPAY_ENDDT = &PTCS1.GPDE_AL_CPAY_ENDDT
  let $Actual_Currency_save = $PBDS1.CURRENCY_CD
         do Print-EE-Data-Abr-S1
   let $Actual_Currency_Old = $Actual_Currency_save
   let $PBDS1.CURRENCY_CD_Old = $PBDS1.CURRENCY_CD
   let #zaehler =  #zaehler + 1
FROM PS_GPDE_RP_0001_VW PBDS1,PS_GPDE_RP_TX03_2 PTCS1
where PBDS1.EMPLID = $RP1.EMPLID
AND PBDS1.EMPLID = PTCS1.EMPLID
AND PBDS1.EMPL_RCD = PTCS1.EMPL_RCD
!wdu-qk04: added emplrcd selection
AND PBDS1.EMPL_RCD = #Empl_Rcd_Nbr
AND PBDS1.CAL_RUN_ID = PTCS1.CAL_RUN_ID
AND PBDS1.GP_PAYGROUP = PTCS1.GP_PAYGROUP
AND PBDS1.CAL_ID = PTCS1.CAL_ID
AND PBDS1.RSLT_SEG_NUM = PTCS1.RSLT_SEG_NUM
AND PBDS1.SEG_END_DT = PTCS1.SEG_END_DT
AND PBDS1.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_S1]
[$orderS1]
end-select
if #zaehler > 0
   do Print_Sums_Steuer-S1
end-if
end-procedure




!**********************************************************************************
begin-procedure Get_Vortrag_Data
! -- display 'Enter: Get_Vortrag_Data'

let #Steuer_Brutto_3   = 0
let #Vers_Bez_8        = 0
let #Mehrj_Bez_10      = 0
let #Mehrj_Vers_Bez_9  = 0
let #Lohn_Steuer_4     = 0
let #KirchenSteuer_6_7 = 0
let #SolidZuschl_5     = 0
let #AnzahlU_2         = 0
begin-select
TXDATA.GPDE_TX_NOI_CO
TXDATA.GPDE_TX_GROSS_CO
TXDATA.GPDE_TX_GRSTX_CO
TXDATA.GPDE_TX_SOLZ_CO
TXDATA.GPDE_TX_CHEE_CO
TXDATA.GPDE_TX_CHSP_CO
TXDATA.GPDE_TX_PENS_CO
TXDATA.GPDE_TX_MYPENS_CO
TXDATA.GPDE_TX_MYTX_CO
! -- display 'beginsel: Get_Vortrag_Data'
! wdu05b6 Vortrag fields
TXDATA.GPDE_TX_KUG_CO      ! 15. Lohnersatzleistungen (KUG, ATZ etc.)
TXDATA.GPDE_TX_DBA_CO      ! 16. Steuerfreier Lohn nach DBA
TXDATA.GPDE_TX_ATE_CO      !  16. Steuerfreier Lohn nach ATE
   let #Steuer_Brutto_3   = &TXDATA.GPDE_TX_GROSS_CO
   let #Vers_Bez_8        = &TXDATA.GPDE_TX_PENS_CO
   let #Mehrj_Bez_10      = &TXDATA.GPDE_TX_MYTX_CO
   let #Mehrj_Vers_Bez_9  = &TXDATA.GPDE_TX_MYPENS_CO
   let #Lohn_Steuer_4     = &TXDATA.GPDE_TX_GRSTX_CO
   let #KirchenSteuer_6_7 = &TXDATA.GPDE_TX_CHEE_CO + &TXDATA.GPDE_TX_CHSP_CO
   let #SolidZuschl_5     = &TXDATA.GPDE_TX_SOLZ_CO
   let #AnzahlU_2         = &TXDATA.GPDE_TX_NOI_CO
   ! wdu05b6 addl Vortrag fields
   let #VortragKug = &TXDATA.GPDE_TX_KUG_CO      ! 15. Lohnersatzleistungen (KUG, ATZ etc.)
   let #VortragDba = &TXDATA.GPDE_TX_DBA_CO      ! 16. Steuerfreier Lohn nach DBA
   let #VortragAte = &TXDATA.GPDE_TX_ATE_CO      !  16. Steuerfreier Lohn nach ATE

! -- display $Emplid
! -- display 'Endsel: Get_Vortrag_Data'
from PS_GPDE_TX_DATA TXDATA
where TXDATA.EMPLID = $Emplid and
      TXDATA.EMPL_RCD = #Empl_Rcd_Nbr and
! wdu-05b6
! was:   TXDATA.EMPLID = &PBDS1.EMPLID and TXDATA.EMPL_RCD = &PBDS1.EMPL_RCD and
! changed to: use of variables to use in compressed and detail reports
! variables are populated by &PBD  earlier
!
      TXDATA.EFFDT >= $BegYearAct and TXDATA.EFFDT <= $EndYearAct and
      TXDATA.EFFDT = (select max(TXDATA1.EFFDT) FROM PS_GPDE_TX_DATA TXDATA1
      where TXDATA1.EMPLID = TXDATA.EMPLID and
      TXDATA1.EMPL_RCD = TXDATA.EMPL_RCD and
      TXDATA1.EFFDT >= $BegYearAct and TXDATA1.EFFDT <= $EndYearAct)
end-select

! wdu05-881b8: make a Vortrag Flag for printing decision of Vortrag on page 1
if (
( #Steuer_Brutto_3 <> 0 ) or
( #Vers_Bez_8 <> 0 ) or
( #Mehrj_Bez_10 <> 0 ) or
( #Mehrj_Vers_Bez_9 <> 0 ) or
( #Lohn_Steuer_4 <> 0 ) or
( #KirchenSteuer_6_7 <> 0 ) or
( #SolidZuschl_5 <> 0 ) or
( #VortragKug <> 0 ) or
( #VortragDba <> 0 ) or
( #VortragAte <> 0 ) or
( #AnzahlU_2 <> 0 ))
    let  $HaveVortrag = 'Y'
else
    let $HaveVortrag = 'N'
end-if
end-procedure
!**********************************************************************************
begin-procedure Print-EE-Data-Abr-S1
!
if #current-line = 18
    alter-printer
       font= 4
       point-size =20
    print 'Steuer(Abrechnungsdaten)'    (2,1) bold
    alter-printer
        font= 4
        point-size =13
    graphic (3,1,184) box 2 1 12
    graphic (2,9,2) vert-line 1
    graphic (2,20,2) vert-line 1
    graphic (2,27,2) vert-line 1
    graphic (2,45,2) vert-line 1
    graphic (2,63,2) vert-line 1
    graphic (2,81,2) vert-line 1
    graphic (2,100,2) vert-line 1
    graphic (2,118,2) vert-line 1
    graphic (2,136,2) vert-line 1
    graphic (2,154,2) vert-line 1
    graphic (2,172,2) vert-line 1
    print 'Monat'     (3,2)  bold
    print 'Korr.'     (3,10) bold
    print 'aus Mon.'  (4,10) bold
    print 'St.'       (3,21) bold
    print 'tage'      (4,21) bold
    print 'Gesamt-'   (3,28) bold
    print 'Brutto'    (4,28) bold
    print 'St.-Brutto. ges.'       (3,46) bold
    print 'Vers.bezüge'      (4,46) bold
    print 'Lfd. Bezüge'       (3,64) bold
    print 'Sonst. Bezüge'      (4,64) bold
    print 'Mehrj.Bezüge'       (3,82) bold
    print 'Mehrj.Vers.Bez.'      (4,82) bold
    print 'Lohn-St.'       (3,101) bold
    print 'Lohn-St.Mehrj.'      (4,101) bold
    print 'Kirchen-St.'       (3,119) bold
    print 'Kirchen-St.Mehrj'      (4,119) bold
    print 'Solz.'       (3,137) bold
    print 'Solz.Mehrj.'      (4,137) bold
    print 'St.frei Pensions-'       (3,155) bold
    print 'kassen/-fonds'      (4,155) bold
    print 'Anz.'       (3,173) bold
    print 'U'      (4,173) bold

    !-------------- Vortrag ---------------!
    if $march = 'Y'
      goto No_Vortrag
    end-if
    do Get_Vortrag_Data
    position (+1,1)
    let #currLineV = -18 + #current-line
    let #currLineN = -17 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
    if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
       let #currLineV = 1 + #currLineV
       let #currLineN = 1 + #currLineN
    end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,9,2) vert-line 1
    graphic (#currLineV,20,2) vert-line 1
    graphic (#currLineV,27,2) vert-line 1
    graphic (#currLineV,45,2) vert-line 1
    graphic (#currLineV,63,2) vert-line 1
    graphic (#currLineV,81,2) vert-line 1
    graphic (#currLineV,100,2) vert-line 1
    graphic (#currLineV,118,2) vert-line 1
    graphic (#currLineV,136,2) vert-line 1
    graphic (#currLineV,154,2) vert-line 1
    graphic (#currLineV,172,2) vert-line 1

    do Format-Number(#Steuer_Brutto_3,$Steuer_Brutto_3,'B9,999,999.99')
    do Format-Number(#Vers_Bez_8,$Vers_Bez_8,'B9,999,999.99')
    do Format-Number(#Mehrj_Bez_10,$Mehrj_Bez_10,'B9,999,999.99')
    do Format-Number(#Mehrj_Vers_Bez_9,$Mehrj_Vers_Bez_9,'B9,999,999.99')
    do Format-Number(#Lohn_Steuer_4,$Lohn_Steuer_4,'B9,999,999.99')
    do Format-Number(#KirchenSteuer_6_7,$KirchenSteuer_6_7,'B9,999,999.99')
    do Format-Number(#SolidZuschl_5,$SolidZuschl_5,'B9,999,999.99')
    do Format-Number(#AnzahlU_2,$AnzahlU_2,'B999')

    let #TempCol = 1 + #currLineV
    alter-printer
      font = 4
      point-size = 13
    print 'Vortrag'  (#TempCol,2)  bold
    alter-printer
      font = 3
      point-size = 16
    print $Steuer_Brutto_3    (#TempCol,45)
    print $Mehrj_Bez_10        (#TempCol,81)
    print $Lohn_Steuer_4      (#TempCol,100)
    print $KirchenSteuer_6_7    (#TempCol,118)
    print $SolidZuschl_5      (#TempCol,136)
    print $AnzahlU_2          (#TempCol,170)
    let #TempCol = 1 + #TempCol
    print $Vers_Bez_8           (#TempCol,45)
    print $Mehrj_Vers_Bez_9     (#TempCol,81)
    position (-1,1)
    No_Vortrag:
    !----------------------------------!
    position (+2,1)
end-if
let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
let #currLineV = -18 + #current-line
let #currLineN = -17 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
      let #currLineV = 1 + #currLineV
      let #currLineN = 1 + #currLineN
   end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,9,2) vert-line 1
    graphic (#currLineV,20,2) vert-line 1
    graphic (#currLineV,27,2) vert-line 1
    graphic (#currLineV,45,2) vert-line 1
    graphic (#currLineV,63,2) vert-line 1
    graphic (#currLineV,81,2) vert-line 1
    graphic (#currLineV,100,2) vert-line 1
    graphic (#currLineV,118,2) vert-line 1
    graphic (#currLineV,136,2) vert-line 1
    graphic (#currLineV,154,2) vert-line 1
    graphic (#currLineV,172,2) vert-line 1
do Format-Number(#Steuertage,$Steuertage,'99999')
do Format-Number(#Ges_Brutto,$Ges_Brutto,'B9,999,999.99')
do Format-Number(#Steuer_Brutto,$Steuer_Brutto,'B9,999,999.99')
do Format-Number(#Lfd_Bez,$Lfd_Bez,'B9,999,999.99')
do Format-Number(#Sonst_Bez,$Sonst_Bez,'B9,999,999.99')
do Format-Number(#Vers_Bez,$Vers_Bez,'B9,999,999.99')
do Format-Number(#Mehrj_Bez,$Mehrj_Bez,'B9,999,999.99')
do Format-Number(#Mehrj_Vers_Bez,$Mehrj_Vers_Bez,'B9,999,999.99')
do Format-Number(#Lohn_Steuer,$Lohn_Steuer,'B9,999,999.99')
do Format-Number(#Lohn_SteuerMJ,$Lohn_SteuerMJ,'B9,999,999.99')
do Format-Number(#KirchenSteuer,$KirchenSteuer,'B9,999,999.99')
do Format-Number(#KirchenSteuerMJ,$KirchenSteuerMJ,'B9,999,999.99')
do Format-Number(#SolidZuschl,$SolidZuschl,'B9,999,999.99')
do Format-Number(#SolidZuschlMJ,$SolidZuschlMJ,'B9,999,999.99')
do Format-Number(#SteuerFreiePens,$SteuerFreiePens,'B9,999,999.99')
do Format-Number(#AnzahlU,$AnzahlU,'B99,999.99')
do CheckMinusNull_S1_A
let #TempCol = 1 + #currLineV
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
do ConvertToComponents($PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
print $mmPrd         (#TempCol,5) bold
print $NeuAltString  (#TempCol,11)
alter-printer
   font = 3
   point-size = 16
print $Steuertage       (#TempCol,20)
print $Ges_Brutto       (#TempCol,27)
print $Steuer_Brutto    (#TempCol,45)
print $Lfd_Bez          (#TempCol,63)
print $Mehrj_Bez        (#TempCol,81)
print $Lohn_Steuer      (#TempCol,100)
print $KirchenSteuer    (#TempCol,118)
print $SolidZuschl      (#TempCol,136)
print $SteuerFreiePens  (#TempCol,154)
print $AnzahlU          (#TempCol,170)
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
   do ConvertToComponents($PTCS1.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      break
   end-evaluate
   let $RetroStr = $RetroDate
if $NeuAltString <> ''
   print $RetroStr (#TempCol,10)
end-if
alter-printer
   font = 3
   point-size = 16
print $Vers_Bez           (#TempCol,45)
print $Sonst_Bez          (#TempCol,63)
print $Mehrj_Vers_Bez     (#TempCol,81)
print $Lohn_SteuerMJ      (#TempCol,100)
print $KirchenSteuerMJ    (#TempCol,118)
print $SolidZuschlMJ      (#TempCol,136)
position (+1,1)
let $PRD_END_DT_Old = $PRD_END_DT
let $RP1.EMPLID_Old = $RP1.EMPLID
let #Ges_Brutto_sum = #Ges_Brutto_sum + #Ges_Brutto
let #Steuer_Brutto_sum = #Steuer_Brutto_sum + #Steuer_Brutto
let #Lfd_Bez_Sum = #Lfd_Bez_Sum + #Lfd_Bez
let #Sonst_Bez_sum = #Sonst_Bez_sum + #Sonst_Bez
let #Vers_Bez_sum = #Vers_Bez_sum + #Vers_Bez
let #Mehrj_Bez_sum = #Mehrj_Bez_sum + #Mehrj_Bez
let #Mehrj_Vers_Bez_sum = #Mehrj_Vers_Bez_sum + #Mehrj_Vers_Bez
let #Lohn_Steuer_sum = #Lohn_Steuer_sum + #Lohn_Steuer
let #Lohn_SteuerMJ_sum = #Lohn_SteuerMJ_sum + #Lohn_SteuerMJ
let #KirchenSteuer_sum = #KirchenSteuer_sum + #KirchenSteuer
let #KirchenSteuerMJ_sum = #KirchenSteuerMJ_sum + #KirchenSteuerMJ
let #SolidZuschl_sum = #SolidZuschl_sum + #SolidZuschl
let #SolidZuschlMJ_sum = #SolidZuschlMJ_sum + #SolidZuschlMJ
let #SteuerFreiePens_sum = #SteuerFreiePens_sum + #SteuerFreiePens
end-procedure
!*************************************************************************





begin-procedure Print_Sums_Steuer-S1
let #mm = 4 + #current-line
if #mm > 55
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if
     let #currLineV = -17 + #current-line
     let #currLineN = -16 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,9,2) vert-line 1
    graphic (#currLineV,20,2) vert-line 1
    graphic (#currLineV,27,2) vert-line 1
    graphic (#currLineV,45,2) vert-line 1
    graphic (#currLineV,63,2) vert-line 1
    graphic (#currLineV,81,2) vert-line 1
    graphic (#currLineV,100,2) vert-line 1
    graphic (#currLineV,118,2) vert-line 1
    graphic (#currLineV,136,2) vert-line 1
    graphic (#currLineV,154,2) vert-line 1
    graphic (#currLineV,172,2) vert-line 1
do Format-Number(#Ges_Brutto_sum,$Ges_Brutto_sum,'B9,999,999.99')
do Format-Number(#Steuer_Brutto_sum,$Steuer_Brutto_sum,'B9,999,999.99')
do Format-Number(#Lfd_Bez_sum,$Lfd_Bez_sum,'B9,999,999.99')
do Format-Number(#Sonst_Bez_sum,$Sonst_Bez_sum,'B9,999,999.99')
do Format-Number(#Vers_Bez_sum,$Vers_Bez_sum,'B9,999,999.99')
do Format-Number(#Mehrj_Bez_sum,$Mehrj_Bez_sum,'B9,999,999.99')
do Format-Number(#Mehrj_Vers_Bez_sum,$Mehrj_Vers_Bez_sum,'B9,999,999.99')
do Format-Number(#Lohn_Steuer_sum,$Lohn_Steuer_sum,'B9,999,999.99')
do Format-Number(#Lohn_SteuerMJ_sum,$Lohn_SteuerMJ_sum,'B9,999,999.99')
do Format-Number(#KirchenSteuer_sum,$KirchenSteuer_sum,'B9,999,999.99')
do Format-Number(#KirchenSteuerMJ_sum,$KirchenSteuerMJ_sum,'B9,999,999.99')
do Format-Number(#SolidZuschl_sum,$SolidZuschl_sum,'B9,999,999.99')
do Format-Number(#SolidZuschlMJ_sum,$SolidZuschlMJ_sum,'B9,999,999.99')
do Format-Number(#SteuerFreiePens_sum,$SteuerFreiePens_sum,'B9,999,999.99')
do CheckMinusNull_S1_B
alter-printer
   font = 3
   point-size = 16
let #TempCol = 1 + #currLineV
print $Ges_Brutto_sum       (#TempCol,27)  bold
print $Steuer_Brutto_sum    (#TempCol,45)  bold
print $Lfd_Bez_sum          (#TempCol,63)  bold
print $Mehrj_Bez_sum        (#TempCol,81)  bold
print $Lohn_Steuer_sum      (#TempCol,100) bold
print $KirchenSteuer_sum    (#TempCol,118) bold
print $SolidZuschl_sum      (#TempCol,136) bold
print $SteuerFreiePens_sum  (#TempCol,154) bold
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
print 'Summe'  (#TempCol,2)         bold
alter-printer
   font = 3
   point-size = 16
print $Vers_Bez_sum           (#TempCol,45)  bold
print $Sonst_Bez_sum          (#TempCol,63)  bold
print $Mehrj_Vers_Bez_sum     (#TempCol,81)  bold
print $Lohn_SteuerMJ_sum      (#TempCol,100) bold
print $KirchenSteuerMJ_sum    (#TempCol,118) bold
print $SolidZuschlMJ_sum      (#TempCol,136) bold
alter-printer
   font = 4
   point-size = 13
let #Ges_Brutto_sum = 0
let #Steuer_Brutto_sum = 0
let #Lfd_Bez_Sum = 0
let #Sonst_Bez_sum = 0
let #Vers_Bez_sum = 0
let #Mehrj_Bez_sum = 0
let #Mehrj_Vers_Bez_sum = 0
let #Lohn_Steuer_sum = 0
let #Lohn_SteuerMJ_sum = 0
let #KirchenSteuer_sum = 0
let #KirchenSteuerMJ_sum = 0
let #SolidZuschl_sum = 0
let #SolidZuschlMJ_sum = 0
let #SteuerFreiePens_sum = 0
new-page
end-procedure





!*************************************************************************
begin-procedure Print_comp_LohnKonto_BruttoNetto
let #currLine = 0
let #Gesamt_Brutto_sum   = 0
let #GesetzlAbz_sum      = 0
let #NettoVerd_sum       = 0
let #SonstBeAbz_sum      = 0
let #Auszahlung_sum      = 0
let #BeitrArbKamm_sum    = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #PBDBN.EMPL_RCD_Old           = 0
let $PBDBN.GP_PAYGROUP_Old        = ''
let $PBDBN.CAL_ID_Old             = ''
let $PBDBN.GPDE_AL_CPAY_ENDDT_Old = ''
let $PBDBN.CURRENCY_CD            = ''
let $PBDBN.CURRENCY_CD_Old        = ''
begin-select
PBDBN.EMPLID
PBDBN.CAL_RUN_ID
PBDBN.EMPL_RCD
PBDBN.GP_PAYGROUP
PBDBN.CAL_ID
PBDBN.RSLT_SEG_NUM
PBDBN.CURRENCY_CD
PTCBN.SEG_END_DT
PTCBN.PRD_END_DT
PTCBN.GPDE_AL_CPAY_ENDDT
PTCBN.GPDE_RP_STATDD_SUM
PTCBN.GPDE_RP_DED_SUM
PTCBN.GPDE_RP_CHMBBR_AMT
PTCBN.GPDE_RP_CHMBSA_AMT
PTCBN.GPDE_RP_TOTGRSS
PTCBN.GPDE_RC_PRT_SIGN
  let $NeuAltString = ''
  let $PBDBN.CURRENCY_CD = &PBDBN.CURRENCY_CD
  if #zaehler > 0 and $PBDBN.CURRENCY_CD <> $PBDBN.CURRENCY_CD_Old
     do Print_Sums_Steuer-S2
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if
  let #Gesamt_Brutto    = &PTCBN.GPDE_RP_TOTGRSS
  let #GesetzlAbz       = &PTCBN.GPDE_RP_STATDD_SUM
  let #NettoVerd        = #Gesamt_Brutto - #GesetzlAbz
  let #SonstBeAbz       = &PTCBN.GPDE_RP_DED_SUM
  let #Auszahlung       = #NettoVerd - #SonstBeAbz
  let #BeitrArbKamm     = &PTCBN.GPDE_RP_CHMBBR_AMT + &PTCBN.GPDE_RP_CHMBSA_AMT
  evaluate &PTCBN.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $PRD_END_DT = &PTCBN.PRD_END_DT
  let $PTCBN.GPDE_AL_CPAY_ENDDT = &PTCBN.GPDE_AL_CPAY_ENDDT
  let $Actual_Currency_save = $PBDBN.CURRENCY_CD
  do Print-EE-Data-Abr-S2
   let $Actual_Currency_Old = $Actual_Currency_save
   let #PBDBN.EMPL_RCD_Old = &PBDBN.EMPL_RCD
   let $PBDBN.GP_PAYGROUP_Old = &PBDBN.GP_PAYGROUP
   let $PBDBN.CAL_ID_Old = &PBDBN.CAL_ID
   let $PBDBN.GPDE_AL_CPAY_ENDDT_Old = &PTCBN.GPDE_AL_CPAY_ENDDT
   let $PBDBN.CURRENCY_CD_Old = $PBDBN.CURRENCY_CD
   let #zaehler =  #zaehler + 1
FROM PS_GPDE_RP_0001_VW PBDBN,PS_GPDE_RP_TX03_2 PTCBN
where PBDBN.EMPLID = $RP1.EMPLID
AND PBDBN.EMPLID = PTCBN.EMPLID
AND PBDBN.EMPL_RCD = PTCBN.EMPL_RCD
!wdu-qk04
AND PBDBN.EMPL_RCD = #Empl_Rcd_Nbr
AND PBDBN.CAL_RUN_ID = PTCBN.CAL_RUN_ID
AND PBDBN.GP_PAYGROUP = PTCBN.GP_PAYGROUP
AND PBDBN.CAL_ID = PTCBN.CAL_ID
AND PBDBN.RSLT_SEG_NUM = PTCBN.RSLT_SEG_NUM
AND PBDBN.SEG_END_DT = PTCBN.SEG_END_DT
AND PBDBN.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_S2]
[$march_crit_S2T]
[$orderS2]
end-select
if #zaehler > 0
   do Print_Sums_Steuer-S2
end-if
end-procedure





!**********************************************************************************
begin-procedure Print-EE-Data-Abr-S2
let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
let #currLineV = -18 + #current-line
let #currLineN = -17 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
      let #currLineV = 1 + #currLineV
      let #currLineN = 1 + #currLineN
   end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,23,2)  vert-line 1
    graphic (#currLineV,41,2)  vert-line 1
    graphic (#currLineV,65,2)  vert-line 1
    graphic (#currLineV,89,2)  vert-line 1
    graphic (#currLineV,113,2) vert-line 1
    graphic (#currLineV,137,2) vert-line 1
    graphic (#currLineV,161,2) vert-line 1
do Format-Number(#Gesamt_Brutto,$Gesamt_Brutto,'B9,999,999,999.99')
do Format-Number(#GesetzlAbz,$GesetzlAbz,'B9,999,999,999.99')
do Format-Number(#NettoVerd,$NettoVerd,'B9,999,999,999.99')
do Format-Number(#SonstBeAbz,$SonstBeAbz,'B9,999,999,999.99')
do Format-Number(#Auszahlung,$Auszahlung,'B9,999,999,999.99')
do Format-Number(#BeitrArbKamm,$BeitrArbKamm,'B9,999,999,999.99')
do CheckMinusNull_S2_A
let #TempCol = 1 + #currLineV
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
do ConvertToComponents($PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
print $mmPrd         (#TempCol,18) bold
print $NeuAltString  (#TempCol,35)
alter-printer
   font = 3
   point-size = 16
print $Gesamt_Brutto    (#TempCol,42)
print $GesetzlAbz       (#TempCol,66)
print $NettoVerd    (#TempCol,90)
print $SonstBeAbz          (#TempCol,114)
print $Auszahlung        (#TempCol,138)
print $BeitrArbKamm      (#TempCol,162)
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
   do ConvertToComponents($PTCBN.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      break
   end-evaluate
   let $RetroStr = $RetroDate
if $NeuAltString <> ''
   print $RetroStr (#TempCol,30)
   position (+1,1)
else
   position (+2,1)
end-if
let $PRD_END_DT_Old = $PRD_END_DT
let $RP1.EMPLID_Old = $RP1.EMPLID
let #Gesamt_Brutto_sum   = #Gesamt_Brutto_sum + #Gesamt_Brutto
let #GesetzlAbz_sum      = #GesetzlAbz_sum + #GesetzlAbz
let #NettoVerd_sum       = #NettoVerd_sum + #NettoVerd
let #SonstBeAbz_sum      = #SonstBeAbz_sum + #SonstBeAbz
let #Auszahlung_sum      = #Auszahlung_sum + #Auszahlung
let #BeitrArbKamm_sum    = #BeitrArbKamm_sum + #BeitrArbKamm
end-procedure





!*************************************************************************
begin-procedure Print_Sums_Steuer-S2
let #mm = 4 + #current-line
if #mm > 55
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if
     let #currLineV = -17 + #current-line
     let #currLineN = -16 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,23,2)  vert-line 1
    graphic (#currLineV,41,2)  vert-line 1
    graphic (#currLineV,65,2)  vert-line 1
    graphic (#currLineV,89,2)  vert-line 1
    graphic (#currLineV,113,2) vert-line 1
    graphic (#currLineV,137,2) vert-line 1
    graphic (#currLineV,161,2) vert-line 1
do Format-Number(#Gesamt_Brutto_sum,$Gesamt_Brutto_sum,'B9,999,999,999.99')
do Format-Number(#GesetzlAbz_sum,$GesetzlAbz_sum,'B9,999,999,999.99')
do Format-Number(#NettoVerd_sum,$NettoVerd_sum,'B9,999,999,999.99')
do Format-Number(#SonstBeAbz_sum,$SonstBeAbz_sum,'B9,999,999,999.99')
do Format-Number(#Auszahlung_sum,$Auszahlung_sum,'B9,999,999,999.99')
do Format-Number(#BeitrArbKamm_sum,$BeitrArbKamm_sum,'B9,999,999,999.99')
do CheckMinusNull_S2_B
alter-printer
   font = 3
   point-size = 16
let #TempCol = 1 + #currLineV
print $Gesamt_Brutto_sum    (#TempCol,42)  bold
print $GesetzlAbz_sum       (#TempCol,66)  bold
print $NettoVerd_sum    (#TempCol,90)      bold
print $SonstBeAbz_sum          (#TempCol,114) bold
print $Auszahlung_sum        (#TempCol,138) bold
print $BeitrArbKamm_sum      (#TempCol,162) bold
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
print 'Summe'  (#TempCol,2)         bold
alter-printer
   font = 4
   point-size = 13
let #Gesamt_Brutto_sum   = 0
let #GesetzlAbz_sum      = 0
let #NettoVerd_sum       = 0
let #SonstBeAbz_sum      = 0
let #Auszahlung_sum      = 0
let #BeitrArbKamm_sum    = 0
new-page
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_S2_A
   if rtrim(ltrim($Gesamt_Brutto, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Gesamt_Brutto, ' '), ' ') = $PlusNull
      let $Gesamt_Brutto = ' '
   end-if
   if rtrim(ltrim($GesetzlAbz, ' '), ' ') = $MinusNull or
      rtrim(ltrim($GesetzlAbz, ' '), ' ') = $PlusNull
      let $GesetzlAbz = ' '
   end-if
   if rtrim(ltrim($NettoVerd, ' '), ' ') = $MinusNull or
      rtrim(ltrim($NettoVerd, ' '), ' ') = $PlusNull
      let $NettoVerd = ' '
   end-if
   if rtrim(ltrim($SonstBeAbz, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SonstBeAbz, ' '), ' ') = $PlusNull
      let $SonstBeAbz = ' '
   end-if
   if rtrim(ltrim($Auszahlung, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Auszahlung, ' '), ' ') = $PlusNull
      let $Auszahlung = ' '
   end-if
   if rtrim(ltrim($BeitrArbKamm, ' '), ' ') = $MinusNull or
      rtrim(ltrim($BeitrArbKamm, ' '), ' ') = $PlusNull
      let $BeitrArbKamm = ' '
   end-if
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_S2_B
   if rtrim(ltrim($Gesamt_Brutto_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Gesamt_Brutto_sum, ' '), ' ') = $PlusNull
      let $Gesamt_Brutto_sum = ' '
   end-if
   if rtrim(ltrim($GesetzlAbz_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($GesetzlAbz_sum, ' '), ' ') = $PlusNull
      let $GesetzlAbz_sum = ' '
   end-if
   if rtrim(ltrim($NettoVerd_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($NettoVerd_sum, ' '), ' ') = $PlusNull
      let $NettoVerd_sum = ' '
   end-if
   if rtrim(ltrim($SonstBeAbz_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SonstBeAbz_sum, ' '), ' ') = $PlusNull
      let $SonstBeAbz_sum = ' '
   end-if
   if rtrim(ltrim($Auszahlung_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Auszahlung_sum, ' '), ' ') = $PlusNull
      let $Auszahlung_sum = ' '
   end-if
   if rtrim(ltrim($BeitrArbKamm_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($BeitrArbKamm_sum, ' '), ' ') = $PlusNull
      let $BeitrArbKamm_sum = ' '
   end-if
end-procedure
!*************************************************************************
begin-procedure Print_comp_LohnKonto_Pauschal
let #currLine = 0
let #ZukunfSich_sum   = 0
let #Fahrgeld_sum      = 0
let #SonstPausch_sum       = 0
let #PauschLohnst_sum      = 0
let #PauschKirchSt_sum      = 0
let #PauschSoZ_sum    = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #PBDPZ.EMPL_RCD_Old           = 0
let $PBDPZ.GP_PAYGROUP_Old        = ''
let $PBDPZ.CAL_ID_Old             = ''
let $PBDPZ.GPDE_AL_CPAY_ENDDT_Old = ''
let $PBDPZ.CURRENCY_CD            = ''
let $PBDPZ.CURRENCY_CD_Old        = ''
begin-select
PBDPZ.EMPLID
PBDPZ.CAL_RUN_ID
PBDPZ.EMPL_RCD
PBDPZ.GP_PAYGROUP
PBDPZ.CAL_ID
PBDPZ.RSLT_SEG_NUM
PBDPZ.CURRENCY_CD
PTCPZ.SEG_END_DT
PTCPZ.PRD_END_DT
PTCPZ.GPDE_AL_CPAY_ENDDT
PTCPZ.GPDE_RP_LMP_DIRINS
PTCPZ.GPDE_RP_LMP_TRVLEX
PTCPZ.GPDE_RP_LMP_GRSS
PTCPZ.GPDE_RP_LMP_TXEE
PTCPZ.GPDE_RP_LMP_TXER
PTCPZ.GPDE_RP_LMP_CHTXEE
PTCPZ.GPDE_RP_LMP_CHTXER
PTCPZ.GPDE_RP_LMP_SLTXEE
PTCPZ.GPDE_RP_LMP_SLTXER
PTCPZ.GPDE_RC_PRT_SIGN
  let $NeuAltString = ''
  let $PBDPZ.CURRENCY_CD = &PBDPZ.CURRENCY_CD
  if #zaehler > 0 and $PBDPZ.CURRENCY_CD <> $PBDPZ.CURRENCY_CD_Old
     do Print_Sums_Steuer-S3
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if
  let #ZukunfSich    = &PTCPZ.GPDE_RP_LMP_DIRINS
  let #Fahrgeld      = &PTCPZ.GPDE_RP_LMP_TRVLEX
  let #SonstPausch   = &PTCPZ.GPDE_RP_LMP_GRSS
  let #PauschLohnst  = &PTCPZ.GPDE_RP_LMP_TXEE + &PTCPZ.GPDE_RP_LMP_TXER
  let #PauschKirchSt = &PTCPZ.GPDE_RP_LMP_CHTXEE + &PTCPZ.GPDE_RP_LMP_CHTXER
  let #PauschSoZ     = &PTCPZ.GPDE_RP_LMP_SLTXEE + &PTCPZ.GPDE_RP_LMP_SLTXER
  evaluate &PTCPZ.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $PRD_END_DT = &PTCPZ.PRD_END_DT
  let $PTCPZ.GPDE_AL_CPAY_ENDDT = &PTCPZ.GPDE_AL_CPAY_ENDDT
  let $Actual_Currency_save = $PBDPZ.CURRENCY_CD
  if (#ZukunfSich <> 0) or (#Fahrgeld <> 0) or (#SonstPausch <> 0) or
     (#PauschLohnst <> 0) or (#PauschKirchSt <> 0) or (#PauschSoZ <> 0)
    do Print-EE-Data-Abr-S3
    let #zaehler =  #zaehler + 1
  end-if
   let $Actual_Currency_Old = $Actual_Currency_save
   let #PBDPZ.EMPL_RCD_Old = &PBDPZ.EMPL_RCD
   let $PBDPZ.GP_PAYGROUP_Old = &PBDPZ.GP_PAYGROUP
   let $PBDPZ.CAL_ID_Old = &PBDPZ.CAL_ID
   let $PBDPZ.GPDE_AL_CPAY_ENDDT_Old = &PTCPZ.GPDE_AL_CPAY_ENDDT
   let $PBDPZ.CURRENCY_CD_Old = $PBDPZ.CURRENCY_CD
FROM PS_GPDE_RP_0001_VW PBDPZ,PS_GPDE_RP_TX03_2 PTCPZ
where PBDPZ.EMPLID = $RP1.EMPLID
AND PBDPZ.EMPLID = PTCPZ.EMPLID
AND PBDPZ.EMPL_RCD = PTCPZ.EMPL_RCD
AND PBDPZ.EMPL_RCD = #Empl_Rcd_Nbr
AND PBDPZ.CAL_RUN_ID = PTCPZ.CAL_RUN_ID
AND PBDPZ.GP_PAYGROUP = PTCPZ.GP_PAYGROUP AND PBDPZ.CAL_ID = PTCPZ.CAL_ID
AND PBDPZ.RSLT_SEG_NUM = PTCPZ.RSLT_SEG_NUM AND PBDPZ.SEG_END_DT = PTCPZ.SEG_END_DT
AND PBDPZ.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_S3]
[$orderS3]
end-select
if #zaehler > 0
   do Print_Sums_Steuer-S3
end-if
end-procedure
!**********************************************************************************
begin-procedure Print-EE-Data-Abr-S3
let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
let #currLineV = -18 + #current-line
let #currLineN = -17 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   if $PRD_END_DT_Old <> $PRD_END_DT and #currLineV <> 1
      let #currLineV = 1 + #currLineV
      let #currLineN = 1 + #currLineN
   end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,23,2)  vert-line 1
    graphic (#currLineV,41,2)  vert-line 1
    graphic (#currLineV,65,2)  vert-line 1
    graphic (#currLineV,89,2)  vert-line 1
    graphic (#currLineV,113,2) vert-line 1
    graphic (#currLineV,137,2) vert-line 1
    graphic (#currLineV,161,2) vert-line 1
do Format-Number(#ZukunfSich,$ZukunfSich,'B9,999,999,999.99')
do Format-Number(#Fahrgeld,$Fahrgeld,'B9,999,999,999.99')
do Format-Number(#SonstPausch,$SonstPausch,'B9,999,999,999.99')
do Format-Number(#PauschLohnst,$PauschLohnst,'B9,999,999,999.99')
do Format-Number(#PauschKirchSt,$PauschKirchSt,'B9,999,999,999.99')
do Format-Number(#PauschSoZ,$PauschSoZ,'B9,999,999,999.99')
do CheckMinusNull_S3_A
let #TempCol = 1 + #currLineV
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
do ConvertToComponents($PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
print $mmPrd         (#TempCol,18) bold
print $NeuAltString  (#TempCol,35)
alter-printer
   font = 3
   point-size = 16
print $ZukunfSich    (#TempCol,42)
print $Fahrgeld       (#TempCol,66)
print $SonstPausch    (#TempCol,90)
print $PauschLohnst          (#TempCol,114)
print $PauschKirchSt        (#TempCol,138)
print $PauschSoZ      (#TempCol,162)
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
let #Date_Type1 = {DateType}
   do ConvertToComponents($PTCPZ.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      break
   end-evaluate
   let $RetroStr = $RetroDate
if $NeuAltString <> ''
   print $RetroStr (#TempCol,30)
   position (+1,1)
else
   position (+2,1)
end-if
let $PRD_END_DT_Old = $PRD_END_DT
let $RP1.EMPLID_Old = $RP1.EMPLID
let #ZukunfSich_sum   = #ZukunfSich_sum + #ZukunfSich
let #Fahrgeld_sum      = #Fahrgeld_sum + #Fahrgeld
let #SonstPausch_sum       = #SonstPausch_sum + #SonstPausch
let #PauschLohnst_sum      = #PauschLohnst_sum + #PauschLohnst
let #PauschKirchSt_sum      = #PauschKirchSt_sum + #PauschKirchSt
let #PauschSoZ_sum  = #PauschSoZ_sum + #PauschSoZ
end-procedure
!*************************************************************************
begin-procedure Print_Sums_Steuer-S3
let #mm = 4 + #current-line
if #mm > 55
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if
     let #currLineV = -17 + #current-line
     let #currLineN = -16 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
    graphic (#currLineN,1,184) box 2 1
    graphic (#currLineV,23,2)  vert-line 1
    graphic (#currLineV,41,2)  vert-line 1
    graphic (#currLineV,65,2)  vert-line 1
    graphic (#currLineV,89,2)  vert-line 1
    graphic (#currLineV,113,2) vert-line 1
    graphic (#currLineV,137,2) vert-line 1
    graphic (#currLineV,161,2) vert-line 1
do Format-Number(#ZukunfSich_sum,$ZukunfSich_sum,'B9,999,999,999.99')
do Format-Number(#Fahrgeld_sum,$Fahrgeld_sum,'B9,999,999,999.99')
do Format-Number(#SonstPausch_sum,$SonstPausch_sum,'B9,999,999,999.99')
do Format-Number(#PauschLohnst_sum,$PauschLohnst_sum,'B9,999,999,999.99')
do Format-Number(#PauschKirchSt_sum,$PauschKirchSt_sum,'B9,999,999,999.99')
do Format-Number(#PauschSoZ_sum,$PauschSoZ_sum,'B9,999,999,999.99')
do CheckMinusNull_S3_B
alter-printer
   font = 3
   point-size = 16
let #TempCol = 1 + #currLineV
print $ZukunfSich_sum    (#TempCol,42)
print $Fahrgeld_sum       (#TempCol,66)
print $SonstPausch_sum    (#TempCol,90)
print $PauschLohnst_sum          (#TempCol,114)
print $PauschKirchSt_sum        (#TempCol,138)
print $PauschSoZ_sum      (#TempCol,162)
let #TempCol = 1 + #TempCol
alter-printer
   font = 4
   point-size = 13
print 'Summe'  (#TempCol,2)         bold
alter-printer
   font = 4
   point-size = 13
let #ZukunfSich_sum   = 0
let #Fahrgeld_sum      = 0
let #SonstPausch_sum       = 0
let #PauschLohnst_sum      = 0
let #PauschKirchSt_sum      = 0
let #PauschSoZ_sum  = 0
new-page
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_S3_A
   if rtrim(ltrim($ZukunfSich, ' '), ' ') = $MinusNull or
      rtrim(ltrim($ZukunfSich, ' '), ' ') = $PlusNull
      let $ZukunfSich = ' '
   end-if
   if rtrim(ltrim($Fahrgeld, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Fahrgeld, ' '), ' ') = $PlusNull
      let $Fahrgeld = ' '
   end-if
   if rtrim(ltrim($SonstPausch, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SonstPausch, ' '), ' ') = $PlusNull
      let $SonstPausch = ' '
   end-if
   if rtrim(ltrim($PauschLohnst, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschLohnst, ' '), ' ') = $PlusNull
      let $PauschLohnst = ' '
   end-if
   if rtrim(ltrim($PauschKirchSt, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschKirchSt, ' '), ' ') = $PlusNull
      let $PauschKirchSt = ' '
   end-if
   if rtrim(ltrim($PauschSoZ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschSoZ, ' '), ' ') = $PlusNull
      let $PauschSoZ = ' '
   end-if
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_S3_B
   if rtrim(ltrim($ZukunfSich_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($ZukunfSich_sum, ' '), ' ') = $PlusNull
      let $ZukunfSich_sum = ' '
   end-if
   if rtrim(ltrim($Fahrgeld_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Fahrgeld_sum, ' '), ' ') = $PlusNull
      let $Fahrgeld_sum = ' '
   end-if
   if rtrim(ltrim($SonstPausch_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SonstPausch_sum, ' '), ' ') = $PlusNull
      let $SonstPausch_sum = ' '
   end-if
   if rtrim(ltrim($PauschLohnst_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschLohnst_sum, ' '), ' ') = $PlusNull
      let $PauschLohnst_sum = ' '
   end-if
   if rtrim(ltrim($PauschKirchSt_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschKirchSt_sum, ' '), ' ') = $PlusNull
      let $PauschKirchSt_sum = ' '
   end-if
   if rtrim(ltrim($PauschSoZ_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($PauschSoZ_sum, ' '), ' ') = $PlusNull
      let $PauschSoZ_sum = ' '
   end-if
end-procedure
!**********************************************************************************



begin-procedure Print_comp_LohnKonto_Meldungen
    ! wdu06-881b11 reformatted this procedure
    ! the code in here prints subpages, where not every block has its own physical page.
    !
    let #currLine = 0       ! this counter may be reset only when we really start a new page.
    let #PageLimitSmallStuff = 36
    do Print_BeschftigZeiten
        ! printing of the last heading is delayed until it is sure, that there is a next page.
        ! so if we set the number too early, then the heading of the previous page is printed
        ! with the new $SeitenNr although it is really a page with the old page
        let $SeitenNr = '5'
    ! -- display 'body-2x/meldungen Seitennr=>auf 5'
    ! -- display $SeitenNr

    ! wdu06-881b11 print payment data from other employers
    do Print_OtherEmployerData

    ! new-page
    do Print_Fehlzeiten
    do Print_Meldungen
    ! wdu05-881jw06 this codeblock was moved here from the end of Print_Meldungen
    do Print_Meldungen_Fehler

    do Print_Versorgungsbezug
    do Print_Sterbegeld

    if $ExistedDatMeld = 'Y' or $ExistedVbData = 'Y'
       if $Ctl_Comp_Report <> '2'
           ! for $Ctl_Comp_Report = 2 this is the last page
           new-page
       end-if
    end-if
    ! end codeblock

    ! wdu05-881jw06 code changes for Versorgungsbezug
    ! Versorgungsbezug similar in structure to Meldungen
    ! use only in the detailed Lohnkonto ($Ctl_Comp_Report = '2')
end-procedure
!**********************************************************************************




begin-procedure Print_BeschftigZeiten
! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #CurlEinAus = 1
begin-select
JOBBZ.EFFDT
JOBBZ.EFFSEQ
JOBBZ.ACTION
    ! wdu06-881b11 redundant code removal and reformatting
    ! wdu06-881b11 added EFFSEQ for sorting of TER/REH
    do Format-DateTime(&JOBBZ.EFFDT, $JOBBZ.EFFDT, {DEFDATE}, '', '')
    let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
    end-if

    ! print heading when this is the first row
    if $FirstRowOnPage = 'Y'
        alter-printer
            font= 4
            point-size =20
        print 'Beschäftigungszeiten:'    (#CurlEinAus,1) bold
        add 1 to #CurlEinAus
        graphic (#CurlEinAus,1,90) box 2 1 12
        alter-printer
            font= 4
            point-size =13
        add 1 to #CurlEinAus
        print 'Arbeitsrechtlich'       (#CurlEinAus,35) bold
    end-if

    ! normal font for body
    alter-printer
    font= 4
    point-size =13

    if rtrim(&JOBBZ.ACTION,' ') = 'HIR' or rtrim(&JOBBZ.ACTION,' ') = 'REH'
        let #CurlEinAus = #CurlEinAus + 1
        graphic (#CurlEinAus,1,90) box 1 1
        print 'Eintritt:' (#CurlEinAus,2)
        print $JOBBZ.EFFDT (#CurlEinAus,25)
    else
        if $FirstRowOnPage = 'Y'
            ! special case if termination is the first event in the list
            let #CurlEinAus = #CurlEinAus + 1
            graphic (#CurlEinAus,1,90) box 1 1
        end-if
        print 'Austritt:' (#CurlEinAus,45)
        do ConvertToComponents(&JOBBZ.EFFDT,$tmp_y2,$tmp_m2,$tmp_d2)
        let $Begin_DT2_Str1 =  $tmp_y2  || '-' || $tmp_m2 || '-' ||  $tmp_d2
        do dtu-add-days($Begin_DT2_Str1, -1, $Begin_DT2_Str2)

        let $YY3 = substr($Begin_DT2_Str2,1,4)
        let $MM3 = substr($Begin_DT2_Str2,6,2)
        let $DD3 = substr($Begin_DT2_Str2,9,2)
        let $Stch3 = $YY3  || $MM3 ||  $DD3 || '0000'

        do Format-DateTime($Stch3, $Begin_DT4, {DEFCMP},'','native')
        do Format-DateTime($Begin_DT4, $JOBBZ.EFFDT, {DEFDATE}, '', '')
        print $JOBBZ.EFFDT (#CurlEinAus,60)
    end-if

   let #currLine = #currLine + 1
   let $ExistedDatMeld = 'Y'
   let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_JOB JOBBZ
where JOBBZ.EMPLID = $Emplid
and JOBBZ.EMPL_RCD = #Empl_Rcd_Nbr
and JOBBZ.ACTION IN ('HIR','REH','TER')
and JOBBZ.COMPANY = $Ctl_PayEntity
! wdu06-881b11 added EFFSEQ for sorting of TER/REH
order by JOBBZ.EFFDT,JOBBZ.EFFSEQ
end-select
end-procedure
!**********************************************************************************



begin-procedure Print_OtherEmployerData
! wdu06-881b11 new procedure to print payment data from other employers.
! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
let #currLine = 0
! --no, still on the same page: let #CurlEinAus = 1
begin-select
EMU1.EFFDT
EMU1.GPDE_SI_EMPL_MULT
    ! advance to initial writing position (only if we have a row)
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if

    do Format-DateTime(&EMU1.EFFDT, $EMU1.EFFDT, {DEFDATE}, '', '')
    let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
    end-if

    ! print heading when this is the first row
    if $FirstRowOnPage = 'Y'
        alter-printer
            font= 4
            point-size =20
        print 'Entgelte aus Mehrfachbeschäftigung:'    (#CurlEinAus,1) bold

        add 1 to #CurlEinAus
        graphic (#CurlEinAus,1,110) box 2 1 12
        ! grid here: if we paint earlier, then the shaded area will overwrite
        let #tempZ2 = #CurlEinAus -1
        graphic (#tempZ2,14,2)  vert-line 2
        graphic (#tempZ2,40,2)  vert-line 2
        graphic (#tempZ2,50,2)  vert-line 2
        graphic (#tempZ2,66,2)  vert-line 2

        alter-printer
            font= 4
            point-size =13
        ! column labels line 1
        print 'AV-Berechnung'           (#CurlEinAus,51) bold
        let #CurlEinAus = #CurlEinAus + 1
        ! column labels line 2
        print 'Gültig ab'       (#CurlEinAus,2) bold
        print 'SV-Brutto'       (#CurlEinAus,15) bold
        print 'Währung'         (#CurlEinAus,41) bold
        print 'erzwingen'       (#CurlEinAus,51) bold
        print 'Bezeichnung / Arbeitgeber'     (#CurlEinAus,67) bold
    end-if

    ! normal font for body
    alter-printer
    font= 4
    point-size =13

    if ( &EMU1.GPDE_SI_EMPL_MULT = 'Y' )
        ! we have employments, look them up
        do Print_OtherEmployerDataDetail
    else
        ! we have a row without employments, all employments finished
        let #CurlEinAus = #CurlEinAus + 1
        graphic (#CurlEinAus,1,110) box 1 1
        print $EMU1.EFFDT (#CurlEinAus,2)
        print 'keine Mehrfachbeschäftigung' (#CurlEinAus,67)
    end-if

   let #currLine = #currLine + 1
   let $ExistedDatMeld = 'Y'
   let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_SI_MUL EMU1
where EMU1.EMPLID = $Emplid
and EMU1.EMPL_RCD = #Empl_Rcd_Nbr
! only list data which are relevant (effective) for this year
AND EMU1.EFFDT <= $EndYearAct
AND ( EMU1.EFFDT >= ( SELECT MAX(EMU11.EFFDT)
                    FROM PS_GPDE_SI_MUL EMU11
                    WHERE EMU11.EMPLID=EMU1.EMPLID
                    AND EMU11.EMPL_RCD=EMU1.EMPL_RCD
                    AND EMU11.EFFDT <= $BegYearAct)
      OR EMU1.EFFDT >= $BegYearAct)
order by EMU1.EFFDT
end-select
end-procedure




begin-procedure Print_OtherEmployerDataDetail
! we need to fetch rows in this procedure, because there may be parent rows
! without child rows which would disappear if we used a join.

! date is only printed once per EFFDT, so fill a temp date
let $EffDatePrint = $EMU1.EFFDT

begin-select
EMU2.EMPLID
EMU2.EMPL_RCD
EMU2.SEQ_NUM
EMU2.GPDE_SI_MULAMT
EMU2.CURRENCY_CD
EMU2.GPDE_SI_MUL_AV_FR
EMU2.DESCR
    let #EMU2.GPDE_SI_MULAMT = &EMU2.GPDE_SI_MULAMT
    do Format-Number(#EMU2.GPDE_SI_MULAMT,$EMU2.GPDE_SI_MULAMT,'B9,999,999,999.99')

    let $EMU2.GPDE_SI_MUL_AV_FR = '--'
    if ( &EMU2.GPDE_SI_MUL_AV_FR = 'Y' )
        let $EMU2.GPDE_SI_MUL_AV_FR = 'Ja'
    end-if

    graphic (#CurlEinAus,14,1)  vert-line 1
    graphic (#CurlEinAus,40,1)  vert-line 1
    graphic (#CurlEinAus,50,1)  vert-line 1
    graphic (#CurlEinAus,66,1)  vert-line 1
    let #CurlEinAus = #CurlEinAus + 1
    graphic (#CurlEinAus,1,110) box 1 1

    print $EffDatePrint            (#CurlEinAus,2)
    ! print amount in monospaced font
    alter-printer
        font = 3
        point-size = 16
    print $EMU2.GPDE_SI_MULAMT     (#CurlEinAus,16)
    ! return to regular font
    alter-printer
        font = 4
        point-size = 13

    print &EMU2.CURRENCY_CD        (#CurlEinAus,41)
    print $EMU2.GPDE_SI_MUL_AV_FR  (#CurlEinAus,51)
    print &EMU2.DESCR              (#CurlEinAus,67)

    ! clear effdt after first print
    let $EffDatePrint = ' '
FROM PS_GPDE_SI_MUL_DTL EMU2
WHERE EMU2.EMPLID = $Emplid
AND EMU2.EMPL_RCD = #Empl_Rcd_Nbr
AND EMU2.EFFDT = &EMU1.EFFDT
ORDER BY EMU2.SEQ_NUM
end-select
end-procedure


begin-procedure Print_OtherEmployerDataRowHeader
end-procedure
!**********************************************************************************





begin-procedure Print_Fehlzeiten
let $ABSEVT.BGN_DT = ''
let $ABSEVT.END_DT = ''
let #ABSEVT.PIN_TAKE_NUM = 0
let $Pin_Bezeichnung = ''
let #currLine = 0
if $march = 'N'
!   let $BegDateFehlzCl = ' AND ABSEVT.BGN_DT between ' || '''' || $BegYearAct ||
!                     '''' || ' and ' || '''' || $EndYearAct || ''''
! wdu06-881b11 show all absences which touch the displayed year
   let $BegDateFehlzCl = ' AND ABSEVT.BGN_DT <= ' || '''' || $EndYearAct ||
                     '''' || ' AND ABSEVT.END_DT >= ' || '''' || $BegYearAct || ''''
else
   let $BegDateFehlzCl = ' AND ABSEVT.BGN_DT < ' || '''' || $BegYearAct || ''''
end-if

! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row

begin-select
ABSEVT.BGN_DT
ABSEVT.END_DT
ABSEVT.PIN_TAKE_NUM
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if
     let $ABSEVT.BGN_DT = &ABSEVT.BGN_DT
     let $ABSEVT.END_DT = &ABSEVT.END_DT
     let #ABSEVT.PIN_TAKE_NUM = &ABSEVT.PIN_TAKE_NUM
     do Get-Description-List(#ABSEVT.PIN_TAKE_NUM,$curr_language_cd,$Pin_Bezeichnung,$PinName)
     do Format-DateTime(&ABSEVT.BGN_DT, $ABSEVT.BGN_DT, {DEFDATE}, '', '')
     do Format-DateTime(&ABSEVT.END_DT, $ABSEVT.END_DT, {DEFDATE}, '', '')
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let #currLine = 0       ! wdu06-881b11 trigger new headers
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
        let #CurlEinAus = 4
     end-if

     if $FirstRowOnPage = 'Y'
        alter-printer
          font= 4
          point-size =20
          print 'Fehlzeiten:'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,140) box 2 1 12
         graphic (#AktVert,100,2)  vert-line 1
         graphic (#AktVert,120,2)  vert-line 1
         add 1 to #CurlEinAus
         print 'Bezeichnung' (#CurlEinAus,20) bold
         print 'Beginn'       (#CurlEinAus,101) bold
         print 'Ende'       (#CurlEinAus,121) bold
         graphic (#CurlEinAus,100,1)  vert-line 1
         graphic (#CurlEinAus,120,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,140) box 1 1
         print $Pin_Bezeichnung (#CurlEinAus,20)
         print $ABSEVT.BGN_DT       (#CurlEinAus,101)
         print $ABSEVT.END_DT       (#CurlEinAus,121)
     else
         graphic (#CurlEinAus,100,1)  vert-line 1
         graphic (#CurlEinAus,120,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,140) box 1 1
         print $Pin_Bezeichnung (#CurlEinAus,20)
         print $ABSEVT.BGN_DT       (#CurlEinAus,101)
         print $ABSEVT.END_DT       (#CurlEinAus,121)
     end-if
     let $ExistedDatMeld = 'Y'
     let #currLine = #currLine + 1
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GP_ABS_EVENT ABSEVT
! --where ABSEVT.EMPLID = $RP1.EMPLID
! --and ABSEVT.EMPL_RCD = &RP1.EMPL_RCD
where ABSEVT.EMPLID = $Emplid
and ABSEVT.EMPL_RCD = #Empl_Rcd_Nbr
[$BegDateFehlzCl]
order by ABSEVT.BGN_DT
end-select
end-procedure
!**********************************************************************************





begin-procedure Print_Meldungen
!
! wdu06-881b11 rewrite of Print_Meldungen: header for the block for DEUEV-Meldungen
!
! Moved common logic for the block graphics and header lines to separate procedures.
! Simplified logic for the first row in the block to avoid duplicate code.
!
! wdu06-881b11 added glidezone information in section Meldungen
! wdu06-881b11 always start a new page for meldungen
let $GDA = ''
let $BGR = ''
let $PGR = ''
let #currLine = 0
! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row
begin-select
SM.EMPLID
SM.EMPL_RCD
SM.GPDE_DV_EVT_EFFDT
SM.GPDE_DV_RUN
SM.GPDE_DV_REP_RSN
SM.GPDE_DV_CANCEL
SM.GPDE_DV_EMPL_CAT
SM.GPDE_DV_REP_DATE
ED1.DESCR
SM.GPDE_SI_PROV_ID
SM.GPDE_SI_PROV
SM.GPDE_SI_BTNR
SM.GPDE_DV_EVT_TYPE
! wdu06-881b11 GPDE_SI_BAEGV now contains Statuskennzeichen
SM.GPDE_SI_BAEGV
    let $DvStatusKennz = &SM.GPDE_SI_BAEGV
    ! Only display numerics!
    if ( instr('0123456789',$GlideZoneKennz,1) = 0 )
        let $GlideZoneKennz = ' '
    end-if
! --
     let $BetrNrAg = &SM.GPDE_SI_BTNR
     DO Get-Provider-Data(&SM.GPDE_SI_PROV,$EndYearAct,$PRVD.DESCR,$PRVD.DESCRSHORT)
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if
     do Get_TaetSchl
     if &SM.GPDE_DV_CANCEL = 'Y'
        let $GDA = 'Storno ' || &SM.GPDE_DV_REP_RSN
     else
        let $GDA = &SM.GPDE_DV_REP_RSN
     end-if
     let $PGR = &SM.GPDE_DV_EMPL_CAT
     do Format-DateTime(&SM.GPDE_DV_REP_DATE, $ReportDT, {DEFDATE}, '', '')
     let $MeldArt = rtrim(&ED1.DESCR, ' ')
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if

     if $FirstRowOnPage = 'Y'
        ! print if this is the first row in Meldungen
         do CX_MeldungenBlockHeader
     end-if
     ! print for each row
     do CX_MeldungenRowHeader
     print $ReportDT (#CurlEinAus,2)
     print $BGR       (#CurlEinAus,66)
     print $PGR       (#CurlEinAus,73)
     ! wdu06-881b11 print DEUEV StatusKennz with Meldungen
     print $DvStatusKennz  (#CurlEinAus,86)
     print $GDA       (#CurlEinAus,93)

     print $MeldArt   (#CurlEinAus,103,29)
     print $PRVD.DESCR (#CurlEinAus,147,12)
     print $BetrNrAg   (#CurlEinAus,161)

     let #currLine = #currLine + 1
     let $ExistedDatMeld = 'Y'
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_DV_DSME SM,PS_GPDE_DV_EVTDFN ED1
! --WHERE SM.EMPLID = $RP1.EMPLID
! --AND SM.EMPL_RCD = &RP1.EMPL_RCD
where SM.EMPLID = $Emplid
and SM.EMPL_RCD = #Empl_Rcd_Nbr
    AND SM.GPDE_DV_REP_STATUS <>'F' AND SM.GPDE_DV_EVT_TYPE=ED1.GPDE_DV_EVT_TYPE
    AND NOT EXISTS (SELECT 'X' FROM PS_GPDE_DV_DBME DM
    WHERE SM.EMPLID=DM.EMPLID AND SM.EMPL_RCD=DM.EMPL_RCD
           AND SM.GPDE_DV_EVT_EFFDT = DM.GPDE_DV_EVT_EFFDT
           AND SM.GPDE_DV_REP_RSN = DM.GPDE_DV_REP_RSN
           AND SM.GPDE_DV_RUN = DM.GPDE_DV_RUN
           AND SM.GPDE_DV_CANCEL = DM.GPDE_DV_CANCEL
           AND SM.GPDE_DV_REP_STATUS <> 'F')
order by SM.EMPLID,SM.GPDE_DV_RUN,SM.GPDE_DV_CANCEL desc
        ,SM.GPDE_DV_EVT_EFFDT,SM.GPDE_DV_EVT_TYPE,SM.GPDE_DV_REP_RSN desc
end-select
if $march = 'N'
   let $BegDateClause = ' AND DM1.BEGIN_DT between ' || '''' || $BegYearAct ||
                     '''' || ' and ' || '''' || $EndYearAct || ''''
else
   let $BegDateClause = ' AND DM1.BEGIN_DT < ' || '''' || $BegYearAct || ''''
end-if

! -- do not initialize $FirstRowOnPage here!

begin-select
SM1.GPDE_DV_REP_RSN
SM1.GPDE_DV_CANCEL
SM1.GPDE_DV_REP_DATE
DM1.BEGIN_DT
DM1.END_DT
DM1.GPDE_BL_AMT
DM1.CURRENCY_CD
DM1.GPDE_DV_SV_CODE
SM1.GPDE_DV_EMPL_CAT
ED2.DESCR
DM1.GPDE_DV_BA_CD   !Angaben zur Tätigkeit
SM1.GPDE_SI_PROV
SM1.GPDE_SI_PROV_ID
SM1.GPDE_SI_BTNR
DM1.GPDE_SI_REGION  !Rechtkreis
SM1.GPDE_DV_EVT_TYPE
! wdu06-881b11 GPDE_DV_CTRL_RPT now contains Glidezone information!
DM1.GPDE_DV_CTRL_RPT
    let $GlideZoneKennz = &DM1.GPDE_DV_CTRL_RPT
    ! Only display numerics!
    if ( instr('0123456789',$GlideZoneKennz,1) = 0 )
        let $GlideZoneKennz = ' '
    end-if
! wdu06-881b11 GPDE_SI_BAEGV now contains Statuskennzeichen
SM1.GPDE_SI_BAEGV
    let $DvStatusKennz = &SM1.GPDE_SI_BAEGV
    ! Only display numerics!
    if ( instr('0123456789',$DvStatusKennz,1) = 0 )
        let $DvStatusKennz = ' '
    end-if
! --
     let $FieldName = 'GPDE_SI_REGION'
     let $FieldValue = &DM1.GPDE_SI_REGION
     do Read-Translate-Table
     let $RechtKr = substr($XlatShortName,1,12)
     let $BetrNrAg = &SM1.GPDE_SI_BTNR
     DO Get-Provider-Data(&SM1.GPDE_SI_PROV,$EndYearAct,$PRVD.DESCR,$PRVD.DESCRSHORT)
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if
     if &SM1.GPDE_DV_CANCEL = 'Y'
        let $GDA = 'Storno ' || &SM1.GPDE_DV_REP_RSN
     else
        let $GDA = &SM1.GPDE_DV_REP_RSN
     end-if
     let $BGR = &DM1.GPDE_DV_SV_CODE
     let $PGR = &SM1.GPDE_DV_EMPL_CAT
     do Format-DateTime(&SM1.GPDE_DV_REP_DATE, $ReportDT, {DEFDATE}, '', '')
     let $MeldArt = rtrim(&ED2.DESCR, ' ')
     do Format-DateTime(&DM1.BEGIN_DT, $BgDate, {DEFDATE}, '', '')
     do Format-DateTime(&DM1.END_DT, $EdDate, {DEFDATE}, '', '')
     do Format-Number(&DM1.GPDE_BL_AMT,$MelEngelt,'B,999,999.99')
     let $DM1.GPDE_DV_BA_CD = &DM1.GPDE_DV_BA_CD
     if &DM1.CURRENCY_CD = 'DEM'
        let $DM1.CURRENCY_CD = 'DM'
     end-if
     if &DM1.CURRENCY_CD = 'EUR'
        let $DM1.CURRENCY_CD = $EUROCHAR
     end-if
     if &DM1.GPDE_BL_AMT <> 0
        let $MelEngelt = $MelEngelt || ' ' || $DM1.CURRENCY_CD
     end-if
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if
     if $FirstRowOnPage = 'Y'
        ! print if this is the first row in Meldungen
        do CX_MeldungenBlockHeader
     end-if
     ! print for each row
     do CX_MeldungenRowHeader
     print $ReportDT (#CurlEinAus,2)
     print $BgDate   (#CurlEinAus,14)
     print $EdDate   (#CurlEinAus,28)
     alter-printer
     font = 3
     point-size = 16
     print $MelEngelt (#CurlEinAus,43)
     alter-printer
     font = 4
     point-size = 13
     print $BGR       (#CurlEinAus,66)
     print $PGR       (#CurlEinAus,73)

     ! wdu06-881b11 print DEUEV StatusKennz and Glidezone-ID with Meldungen
     print $GlideZoneKennz (#CurlEinAus,79)
     print $DvStatusKennz  (#CurlEinAus,86)
     !
     print $GDA       (#CurlEinAus,93)
     print $MeldArt   (#CurlEinAus,103)
     print $DM1.GPDE_DV_BA_CD (#CurlEinAus,133)
     print $PRVD.DESCR (#CurlEinAus,147,12)
     print $BetrNrAg   (#CurlEinAus,161)
     print $RechtKr    (#CurlEinAus,175)
     ! --
     let $ExistedDatMeld = 'Y'
     let #currLine = #currLine + 1
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_DV_DSME SM1,PS_GPDE_DV_DBME DM1,PS_GPDE_DV_EVTDFN ED2
WHERE SM1.EMPLID = $Emplid
AND SM1.EMPL_RCD = #Empl_Rcd_Nbr
! --WHERE SM1.EMPLID = $RP1.EMPLID
! --AND SM1.EMPL_RCD = &RP1.EMPL_RCD
AND SM1.EMPLID=DM1.EMPLID
AND SM1.EMPL_RCD=DM1.EMPL_RCD
AND SM1.GPDE_DV_EVT_EFFDT=DM1.GPDE_DV_EVT_EFFDT AND SM1.GPDE_DV_REP_RSN=DM1.GPDE_DV_REP_RSN
AND SM1.GPDE_DV_RUN=DM1.GPDE_DV_RUN AND SM1.GPDE_DV_CANCEL=DM1.GPDE_DV_CANCEL
AND SM1.GPDE_DV_REP_STATUS  <> 'F' AND SM1.GPDE_DV_EVT_TYPE=ED2.GPDE_DV_EVT_TYPE
[$BegDateClause]
order by SM1.EMPLID,SM1.GPDE_DV_RUN,SM1.GPDE_DV_CANCEL desc,SM1.GPDE_DV_EVT_EFFDT,
      SM1.GPDE_DV_EVT_TYPE,SM1.GPDE_DV_REP_RSN desc
end-select
end-procedure
!****************************************************************************************




begin-procedure CX_MeldungenBlockHeader
! wdu06-881b11 rewrite of Print_Meldungen: header for the block for DEUEV-Meldungen
        alter-printer
          font= 4
          point-size =20
          print 'Meldungen:'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 2 1 12
         graphic (#AktVert,13,2)  vert-line 1
         graphic (#AktVert,27,2)  vert-line 1
         graphic (#AktVert,42,2)  vert-line 1
         graphic (#AktVert,65,2)  vert-line 1
         graphic (#AktVert,72,2)  vert-line 1

         graphic (#AktVert,78,2)  vert-line 1
         graphic (#AktVert,85,2)  vert-line 1

         graphic (#AktVert,93,2)  vert-line 1
         graphic (#AktVert,101,2)  vert-line 1
         graphic (#AktVert,132,2)  vert-line 1
         graphic (#AktVert,146,2)  vert-line 1
         graphic (#AktVert,160,2)  vert-line 1
         graphic (#AktVert,174,2)  vert-line 1

         ! simplify 2 line labels
         let #CurlEinAus2 = #CurlEinAus +1


         print 'Erstellt am' (#CurlEinAus2,2) bold
         print 'Beginn'       (#CurlEinAus2,14) bold
         print 'Ende'       (#CurlEinAus2,28) bold
         print 'Entgelt'       (#CurlEinAus2,43) bold
         print 'BGR'       (#CurlEinAus2,66) bold
            print 'PGR'       (#CurlEinAus2,73) bold
            print 'Gleit-'       (#CurlEinAus,79) bold
            print 'zone'       (#CurlEinAus2,79) bold
         print 'Status-'       (#CurlEinAus,86) bold
         print 'kennz.'       (#CurlEinAus2,86) bold
         print 'GDA'       (#CurlEinAus2,94) bold
         print 'Art der Meldung' (#CurlEinAus2,103) bold
         print 'Tätigkeits-' (#CurlEinAus,133) bold
         print 'schlüssel'   (#CurlEinAus2,133) bold
         print 'Krankenkasse' (#CurlEinAus2,147) bold
         print 'Betriebs-Nr.' (#CurlEinAus,161) bold
         print 'Arbeitgeber' (#CurlEinAus2,161) bold
         print 'Rechtskreis' (#CurlEinAus2,175) bold

         add 1 to #CurlEinAus
end-procedure



begin-procedure CX_MeldungenRowHeader
! wdu06-881b11 rewrite of Print_Meldungen: header/graphics for each row in DEUEV-Meldungen
         graphic (#CurlEinAus,13,1)   vert-line 1
         graphic (#CurlEinAus,27,1)   vert-line 1
         graphic (#CurlEinAus,42,1)   vert-line 1
         graphic (#CurlEinAus,65,1)   vert-line 1
         graphic (#CurlEinAus,72,1)   vert-line 1
         graphic (#CurlEinAus,78,1)   vert-line 1
         graphic (#CurlEinAus,85,1)   vert-line 1
         graphic (#CurlEinAus,93,1)   vert-line 1
         graphic (#CurlEinAus,101,1)  vert-line 1
         graphic (#CurlEinAus,132,1)  vert-line 1
         graphic (#CurlEinAus,146,1)  vert-line 1
         graphic (#CurlEinAus,160,1)  vert-line 1
         graphic (#CurlEinAus,174,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 1 1
end-procedure
!**********************************************************************




begin-procedure Get_Err_Desc
let $DV_ErrCD_Descr = 'Datenbausteinfehler'
begin-select
CATF.MESSAGE_TEXT
  let $DV_ErrCD_Descr = rtrim(&CATF.MESSAGE_TEXT, ' ')
from PSMSGCATDEFN CATF where CATF.MESSAGE_SET_NBR = #MessSetNum and CATF.MESSAGE_NBR = #MessNum
end-select
end-procedure
!**********************************************************************




begin-procedure Print_Meldungen_Fehler
let #currLine = 0
let $GDA = ''
let $BGR = ''
let $PGR = ''

! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row

begin-select
SMF.EMPLID
SMF.EMPL_RCD
SMF.GPDE_DV_EVT_EFFDT
SMF.GPDE_DV_RUN
SMF.GPDE_DV_REP_RSN
SMF.GPDE_DV_CANCEL
SMF.GPDE_DV_EMPL_CAT
SMF.GPDE_DV_REP_DATE
ED1F.DESCR
SMF.MESSAGE_SET_NBR
SMF.MESSAGE_NBR
SMF.GPDE_DV_EVT_TYPE
     let #MessSetNum = &SMF.MESSAGE_SET_NBR
     let #MessNum = &SMF.MESSAGE_NBR
     do Get_Err_Desc
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if
     if &SMF.GPDE_DV_CANCEL = 'Y'
        let $GDA = 'Storno ' || &SMF.GPDE_DV_REP_RSN
     else
        let $GDA = &SMF.GPDE_DV_REP_RSN
     end-if
     let $PGR = &SMF.GPDE_DV_EMPL_CAT
     do Format-DateTime(&SMF.GPDE_DV_EVT_EFFDT, $ReportDT, {DEFDATE}, '', '')
     let $MeldArt = &SMF.GPDE_DV_REP_RSN || '- ' || rtrim(&ED1F.DESCR, ' ')
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if
     if $FirstRowOnPage = 'Y'
        alter-printer
          font= 4
          point-size =20
          print 'Fehlerhafte Meldungen:'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 2 1 12
         graphic (#AktVert,15,2)  vert-line 1
         graphic (#AktVert,80,2)  vert-line 1
         add 1 to #CurlEinAus
         print 'Datum' (#CurlEinAus,2) bold
         print 'Meldegrund'       (#CurlEinAus,45) bold
         print 'Fehlertext'       (#CurlEinAus,130) bold
         graphic (#CurlEinAus,15,1)  vert-line 1
         graphic (#CurlEinAus,80,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 1 1
         print $ReportDT (#CurlEinAus,2)
         print $MeldArt   (#CurlEinAus,16)
         print $DV_ErrCD_Descr   (#CurlEinAus,81)
     else
         graphic (#CurlEinAus,15,1)  vert-line 1
         graphic (#CurlEinAus,80,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 1 1
         print $ReportDT (#CurlEinAus,2)
         print $MeldArt   (#CurlEinAus,16)
         print $DV_ErrCD_Descr   (#CurlEinAus,81)
     end-if
     let #currLine = #currLine + 1
     let $ExistedDatMeld = 'Y'
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_DV_DSME SMF,PS_GPDE_DV_EVTDFN ED1F
! --WHERE SMF.EMPLID = $RP1.EMPLID
! --AND SMF.EMPL_RCD = &RP1.EMPL_RCD
WHERE SMF.EMPLID = $Emplid
AND SMF.EMPL_RCD = #Empl_Rcd_Nbr
    AND SMF.GPDE_DV_REP_STATUS = 'F' AND SMF.GPDE_DV_EVT_TYPE=ED1F.GPDE_DV_EVT_TYPE
    AND NOT EXISTS (SELECT 'X' FROM PS_GPDE_DV_DBME DMF
           WHERE SMF.EMPLID=DMF.EMPLID AND SMF.EMPL_RCD=DMF.EMPL_RCD
           AND SMF.GPDE_DV_EVT_EFFDT=DMF.GPDE_DV_EVT_EFFDT
           AND SMF.GPDE_DV_REP_RSN=DMF.GPDE_DV_REP_RSN
           AND SMF.GPDE_DV_RUN=DMF.GPDE_DV_RUN
           AND SMF.GPDE_DV_CANCEL=DMF.GPDE_DV_CANCEL
           AND SMF.GPDE_DV_REP_STATUS = 'F')
order by SMF.EMPLID,SMF.GPDE_DV_RUN,SMF.GPDE_DV_CANCEL desc
        ,SMF.GPDE_DV_EVT_EFFDT,SMF.GPDE_DV_EVT_TYPE,SMF.GPDE_DV_REP_RSN desc
end-select
if $march = 'N'
   let $BegDateClauseF = ' AND DM1F.BEGIN_DT between ' || '''' || $BegYearAct ||
                     '''' || ' and ' || '''' || $EndYearAct || ''''
else
   let $BegDateClauseF = ' AND DM1F.BEGIN_DT < ' || '''' || $BegYearAct || ''''
end-if

! -- do not initialize $FirstRowOnPage here!

begin-select
SM1F.GPDE_DV_REP_RSN
SM1F.GPDE_DV_CANCEL
SM1F.GPDE_DV_REP_DATE
SM1F.GPDE_DV_EVT_EFFDT
DM1F.BEGIN_DT
DM1F.END_DT
DM1F.GPDE_BL_AMT
DM1F.CURRENCY_CD
DM1F.GPDE_DV_SV_CODE
SM1F.GPDE_DV_EMPL_CAT
ED2F.DESCR
DM1F.GPDE_DV_BA_CD
SM1F.MESSAGE_SET_NBR
SM1F.MESSAGE_NBR
SM1F.GPDE_DV_EVT_TYPE
     let #MessSetNum = &SM1F.MESSAGE_SET_NBR
     let #MessNum = &SM1F.MESSAGE_NBR
     do Get_Err_Desc
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
        let #CurlEinAus = #CurlEinAus + 3
     end-if
     if &SM1F.GPDE_DV_CANCEL = 'Y'
        let $GDA = 'Storno ' || &SM1F.GPDE_DV_REP_RSN
     else
        let $GDA = &SM1F.GPDE_DV_REP_RSN
     end-if
     let $BGR = &DM1F.GPDE_DV_SV_CODE
     let $PGR = &SM1F.GPDE_DV_EMPL_CAT
     do Format-DateTime(&SM1F.GPDE_DV_EVT_EFFDT, $ReportDT, {DEFDATE}, '', '')
     let $MeldArt = &SM1F.GPDE_DV_REP_RSN || '- ' || rtrim(&ED2F.DESCR, ' ')
     do Format-DateTime(&DM1F.BEGIN_DT, $BgDate, {DEFDATE}, '', '')
     do Format-DateTime(&DM1F.END_DT, $EdDate, {DEFDATE}, '', '')
     do Format-Number(&DM1F.GPDE_BL_AMT,$MelEngelt,'B,999,999.99')
     let $DM1.GPDE_DV_BA_CD = &DM1F.GPDE_DV_BA_CD
     if &DM1F.CURRENCY_CD = 'DEM'
        let $DM1.CURRENCY_CD = 'DM'
     end-if
     if &DM1F.CURRENCY_CD = 'EUR'
        let $DM1.CURRENCY_CD = $EUROCHAR
     end-if
     if &DM1F.GPDE_BL_AMT <> 0
        let $MelEngelt = $MelEngelt || ' ' || $DM1.CURRENCY_CD
     end-if
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if
     if $FirstRowOnPage = 'Y'
        alter-printer
          font= 4
          point-size =20
          print 'Fehlerhafte Meldungen:'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 2 1 12
         graphic (#AktVert,15,2)  vert-line 1
         graphic (#AktVert,80,2)  vert-line 1
         add 1 to #CurlEinAus
         print 'Datum' (#CurlEinAus,2) bold
         print 'Meldegrund'       (#CurlEinAus,45) bold
         print 'Fehlertext'       (#CurlEinAus,130) bold
         graphic (#CurlEinAus,15,1)  vert-line 1
         graphic (#CurlEinAus,80,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 1 1
         print $ReportDT (#CurlEinAus,2)
         print $MeldArt   (#CurlEinAus,16)
         print $DV_ErrCD_Descr   (#CurlEinAus,81)
     else
         graphic (#CurlEinAus,15,1)  vert-line 1
         graphic (#CurlEinAus,80,1)  vert-line 1
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,185) box 1 1
         print $ReportDT (#CurlEinAus,2)
         print $MeldArt   (#CurlEinAus,16)
         print $DV_ErrCD_Descr   (#CurlEinAus,81)
     end-if
     let $ExistedDatMeld = 'Y'
     let #currLine = #currLine + 1
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_DV_DSME SM1F,PS_GPDE_DV_DBME DM1F,PS_GPDE_DV_EVTDFN ED2F
! --WHERE SM1F.EMPLID = $RP1.EMPLID
! --AND SM1F.EMPL_RCD = &RP1.EMPL_RCD
WHERE SM1F.EMPLID = $Emplid
AND SM1F.EMPL_RCD = #Empl_Rcd_Nbr
AND SM1F.EMPLID=DM1F.EMPLID
AND SM1F.EMPL_RCD=DM1F.EMPL_RCD
AND SM1F.GPDE_DV_EVT_EFFDT=DM1F.GPDE_DV_EVT_EFFDT
AND SM1F.GPDE_DV_REP_RSN=DM1F.GPDE_DV_REP_RSN
AND SM1F.GPDE_DV_RUN=DM1F.GPDE_DV_RUN
AND SM1F.GPDE_DV_CANCEL=DM1F.GPDE_DV_CANCEL
AND SM1F.GPDE_DV_REP_STATUS  = 'F'
AND SM1F.GPDE_DV_EVT_TYPE=ED2F.GPDE_DV_EVT_TYPE
[$BegDateClauseF]
order by SM1F.EMPLID,SM1F.GPDE_DV_RUN,SM1F.GPDE_DV_CANCEL desc,SM1F.GPDE_DV_EVT_EFFDT,
      SM1F.GPDE_DV_EVT_TYPE,SM1F.GPDE_DV_REP_RSN desc
end-select
end-procedure
!**********************************************************************************





begin-procedure Print_Versorgungsbezug
! wdu05-881jw06 new procedure for Versorgungsbezug/Abfindungen/Sterbegeld
! only the status of the latest period needs to be printed
!
    let #currLine = 0  ! new linecounter for the block only
    ! #CurlEinAus seems to be the number of lines for blocks already written on this page
    let $ExistedVbData='N'
! wdu06-881b11 separate pagelet headings from counter logic
let $FirstRowOnPage = 'Y'   ! request a heading before the first row

begin-select
VBZ1.PAY_ENTITY
VBZ1.EMPLID
VBZ1.EMPL_RCD
VBZ1.PRD_END_DT
VBZ1.SEG_END_DT
VBZ1.BEGIN_DT
VBZ1.GPDE_TX_BGN_MTH
VBZ1.GPDE_TX_END_MTH
VBZ1.GPDE_TX_VBEZB
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
     ! we have things already on the page, print a vertical spacer
        let #CurlEinAus = #CurlEinAus + 3
     end-if


     do Format-DateTime(&VBZ1.PRD_END_DT, $VBZ1.PRD_END_DT, {DEFDATE}, '', '')
     !
     let #VBZ1.GPDE_TX_VBEZB = &VBZ1.GPDE_TX_VBEZB
     do Format-Number(#VBZ1.GPDE_TX_VBEZB,$VBZ1.GPDE_TX_VBEZB,'B9,999,999.99')
     !
     let $VBZ1.BEGIN_DT = &VBZ1.BEGIN_DT
     do ConvertToComponents($VBZ1.BEGIN_DT,$tmp_year_vb,$tmp_m,$tmp_d)
     !
     let #VBZ1.GPDE_TX_BGN_MTH = &VBZ1.GPDE_TX_BGN_MTH
     do Format-Number(#VBZ1.GPDE_TX_BGN_MTH,$VBZ1.GPDE_TX_BGN_MTH,'08')
     !
     let #VBZ1.GPDE_TX_END_MTH = &VBZ1.GPDE_TX_END_MTH
     do Format-Number(#VBZ1.GPDE_TX_END_MTH,$VBZ1.GPDE_TX_END_MTH,'08')
     !

     ! let $MeldArt = rtrim(&ED1.DESCR, ' ')
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if
     if $FirstRowOnPage = 'Y'
        alter-printer
          font= 4
          point-size =20
          print 'Versorgungsbezug:'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         ! graphics for the box-header
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,90) box 2 1 12
         graphic (#AktVert,16,2)  vert-line 1
         graphic (#AktVert,42,2)  vert-line 1
         graphic (#AktVert,62,2)  vert-line 1

         print 'Abrechnungs-'                  (#CurlEinAus,2) bold
         print 'Maßgebliches Kalenderjahr'      (#CurlEinAus,17) bold
         print 'Monat von/bis'                 (#CurlEinAus,43) bold
         print 'Bemessungsgrundlage'           (#CurlEinAus,63) bold

         add 1 to #CurlEinAus
         print 'periode'                       (#CurlEinAus,2) bold
         print 'des Versorgungsfreibetrags'    (#CurlEinAus,17) bold
         print 'im Kalenderjahr'               (#CurlEinAus,43) bold
         print 'für den Versorgungsfreibetrag' (#CurlEinAus,63) bold
     end-if

     ! graphics for the box-rows
     graphic (#CurlEinAus,16,1)  vert-line 1
     graphic (#CurlEinAus,42,1)  vert-line 1
     graphic (#CurlEinAus,62,1)  vert-line 1
     add 1 to #CurlEinAus
     graphic (#CurlEinAus,1,90) box 1 1

     ! row data
     print $VBZ1.PRD_END_DT          (#CurlEinAus,2)
     print $tmp_year_vb              (#CurlEinAus,17)

     print $VBZ1.GPDE_TX_BGN_MTH     (#CurlEinAus,43)
     print '/'                       (#CurlEinAus,45)
     print $VBZ1.GPDE_TX_END_MTH     (#CurlEinAus,46)

     !to right-align amouns, we need to use a different font
         alter-printer
         font = 3
         point-size = 16
         print $VBZ1.GPDE_TX_VBEZB       (#CurlEinAus,73)       ! 59+
         alter-printer
         font = 4
         point-size = 13
     let #currLine = #currLine + 1
     let $ExistedVbData = 'Y'
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_RP_VBEZ_EE VBZ1
,PS_GP_PYE_SEG_STAT B
WHERE B.EMPLID=VBZ1.EMPLID
   AND B.CAL_RUN_ID=VBZ1.CAL_RUN_ID
   AND B.EMPL_RCD=VBZ1.EMPL_RCD
   AND B.GP_PAYGROUP=VBZ1.GP_PAYGROUP
   AND B.CAL_ID=VBZ1.CAL_ID
   AND B.ORIG_CAL_RUN_ID=VBZ1.ORIG_CAL_RUN_ID
   AND B.RSLT_SEG_NUM=VBZ1.RSLT_SEG_NUM
   AND B.RSLT_SEG_NUM=(
 SELECT MAX(S2.RSLT_SEG_NUM)
  FROM PS_GP_PYE_SEG_STAT S2
 WHERE S2.EMPLID=B.EMPLID
   AND S2.EMPL_RCD=B.EMPL_RCD
   AND S2.CAL_ID=B.CAL_ID
   AND S2.SEG_END_DT=B.SEG_END_DT)
   AND B.RSLT_VER_NUM=(
 SELECT MAX(S3.RSLT_VER_NUM)
  FROM PS_GP_PYE_SEG_STAT S3
 WHERE S3.EMPLID=B.EMPLID
   AND S3.EMPL_RCD=B.EMPL_RCD
   AND S3.CAL_ID=B.CAL_ID
   AND S3.RSLT_SEG_NUM=B.RSLT_SEG_NUM)
   !
   AND VBZ1.PRD_END_DT = (SELECT MAX(BS1.PRD_END_DT)
      FROM PS_GP_PYE_PRC_STAT BS1
      ,PS_GP_PYE_SEG_STAT BS2
      WHERE BS1.PRD_END_DT > $Ctl_Start_Dt
      AND BS1.PRD_END_DT <= $Ctl_End_Dt
      AND BS1.EMPLID=B.EMPLID
      AND BS1.GP_PAYGROUP=B.GP_PAYGROUP
      AND BS1.EMPL_RCD=B.EMPL_RCD
      ! full join SEG with PRC
      AND BS2.EMPLID=B.EMPLID
      AND BS2.CAL_RUN_ID=BS1.CAL_RUN_ID
      AND BS2.EMPL_RCD=BS1.EMPL_RCD
      AND BS2.GP_PAYGROUP=B.GP_PAYGROUP
      AND BS2.CAL_ID=BS1.CAL_ID
      AND BS2.ORIG_CAL_RUN_ID=BS1.ORIG_CAL_RUN_ID
      )
   AND VBZ1.EMPLID = $Emplid
   and VBZ1.EMPL_RCD = #Empl_Rcd_Nbr
   AND VBZ1.PRD_END_DT > $Ctl_Start_Dt
   AND VBZ1.PRD_END_DT <= $Ctl_End_Dt
order by VBZ1.EMPLID,VBZ1.EMPL_RCD,VBZ1.PRD_END_DT,VBZ1.BEGIN_DT
end-select

end-procedure
!****************************************************************************************







begin-procedure Print_Sterbegeld
! wdu05-881jw06 new procedure for Versorgungsbezug/Abfindungen/Sterbegeld
! amounts need to be printed for each period
    let #currLine = 0  ! new linecounter for the block only
    ! #CurlEinAus seems to be the number of lines for blocks already written on this page
    ! no:  let $ExistedVbData='N'

    ! wdu06-881b11 separate pagelet headings from counter logic
    let $FirstRowOnPage = 'Y'   ! request a heading before the first row

begin-select
VBS1.PAY_ENTITY
VBS1.EMPLID
VBS1.EMPL_RCD
VBS1.PRD_END_DT
VBS1.GPDE_YEAR
VBS1.GPDE_TX_DEATHBEN
VBS1.GPDE_TX_SEV_PAY
     if #CurlEinAus <> 1 and $FirstRowOnPage = 'Y'
     ! we have things already on the page, print a vertical spacer
        let #CurlEinAus = #CurlEinAus + 3
     end-if


     do Format-DateTime(&VBS1.PRD_END_DT, $VBS1.PRD_END_DT, {DEFDATE}, '', '')
     !
     let #VBS1.GPDE_YEAR = &VBS1.GPDE_YEAR
     do Format-Number(#VBS1.GPDE_YEAR,$VBS1.GPDE_YEAR,'8888')

     let #VBS1.GPDE_TX_DEATHBEN = &VBS1.GPDE_TX_DEATHBEN
     do Format-Number(#VBS1.GPDE_TX_DEATHBEN,$VBS1.GPDE_TX_DEATHBEN,'B9,999,999.99')
     !
     let #VBS1.GPDE_TX_SEV_PAY = &VBS1.GPDE_TX_SEV_PAY
     do Format-Number(#VBS1.GPDE_TX_SEV_PAY,$VBS1.GPDE_TX_SEV_PAY,'B9,999,999.99')
     !
     let #Maxl = 4 + #CurlEinAus
    if #CurlEinAus > #PageLimitSmallStuff
        new-page
        let $FirstRowOnPage = 'Y'   ! request a heading before the first row on the next page
     end-if
     if $FirstRowOnPage = 'Y'
        alter-printer
          font= 4
          point-size =20
          print 'Versorgungsbezug (Sterbegeld und/oder Abfindungen):'    (#CurlEinAus,1) bold
         alter-printer
            font= 4
            point-size =13
         ! graphics for the box-header
         let #AktVert = #CurlEinAus
         add 1 to #CurlEinAus
         graphic (#CurlEinAus,1,90) box 2 1 12
         graphic (#AktVert,16,2)  vert-line 1
         graphic (#AktVert,42,2)  vert-line 1
         graphic (#AktVert,62,2)  vert-line 1

         print 'Abrechnungs-'                  (#CurlEinAus,2) bold
         print 'Maßgebliches Kohortenjahr'     (#CurlEinAus,17) bold
         print 'Versorgungsbezug'              (#CurlEinAus,43) bold
         print 'Versorgungsbezug'              (#CurlEinAus,63) bold

         add 1 to #CurlEinAus
         print 'periode'                       (#CurlEinAus,2) bold
         print ' '                             (#CurlEinAus,17) bold
         print '(Sterbegeld)'                  (#CurlEinAus,43) bold
         print '(Abfindungen)'                 (#CurlEinAus,63) bold
     end-if

     ! graphics for the box-rows
     graphic (#CurlEinAus,16,1)  vert-line 1
     graphic (#CurlEinAus,42,1)  vert-line 1
     graphic (#CurlEinAus,62,1)  vert-line 1
     add 1 to #CurlEinAus
     graphic (#CurlEinAus,1,90) box 1 1

     ! row data
     print $VBS1.PRD_END_DT          (#CurlEinAus,2)
     print $VBS1.GPDE_YEAR           (#CurlEinAus,17)

     !to right-align amouns, we need to use a different font
         alter-printer
         font = 3
         point-size = 16

         print $VBS1.GPDE_TX_DEATHBEN    (#CurlEinAus,44)
         print $VBS1.GPDE_TX_SEV_PAY     (#CurlEinAus,73)
         alter-printer
         font = 4
         point-size = 13

     let #currLine = #currLine + 1
     let $ExistedVbData = 'Y'
     let $FirstRowOnPage = 'N'   ! processing over for first row
from PS_GPDE_RP_DTHB_EE VBS1
,PS_GP_PYE_SEG_STAT B
WHERE B.EMPLID=VBS1.EMPLID
   AND B.CAL_RUN_ID=VBS1.CAL_RUN_ID
   AND B.EMPL_RCD=VBS1.EMPL_RCD
   AND B.GP_PAYGROUP=VBS1.GP_PAYGROUP
   AND B.CAL_ID=VBS1.CAL_ID
   AND B.ORIG_CAL_RUN_ID=VBS1.ORIG_CAL_RUN_ID
   AND B.RSLT_SEG_NUM=VBS1.RSLT_SEG_NUM
   AND B.RSLT_SEG_NUM=(
 SELECT MAX(S2.RSLT_SEG_NUM)
  FROM PS_GP_PYE_SEG_STAT S2
 WHERE S2.EMPLID=B.EMPLID
   AND S2.EMPL_RCD=B.EMPL_RCD
   AND S2.CAL_ID=B.CAL_ID
   AND S2.SEG_END_DT=B.SEG_END_DT)
   AND B.RSLT_VER_NUM=(
 SELECT MAX(S3.RSLT_VER_NUM)
  FROM PS_GP_PYE_SEG_STAT S3
 WHERE S3.EMPLID=B.EMPLID
   AND S3.EMPL_RCD=B.EMPL_RCD
   AND S3.CAL_ID=B.CAL_ID
   AND S3.RSLT_SEG_NUM=B.RSLT_SEG_NUM)
 AND VBS1.EMPLID = $Emplid
 AND VBS1.EMPL_RCD = #Empl_Rcd_Nbr
 AND VBS1.PRD_END_DT > $Ctl_Start_Dt
 AND VBS1.PRD_END_DT <= $Ctl_End_Dt

order by VBS1.EMPLID,VBS1.EMPL_RCD,VBS1.PRD_END_DT,VBS1.GPDE_YEAR
end-select

end-procedure
!****************************************************************************************






begin-procedure Get-Provider-Data($SiProv,$Effdt,:$PRVD.DESCR,:$PRVD.DESCRSHORT)
let $PRVD.DESCR = ''
let $PRVD.DESCRSHORT = ''
begin-select
PRVD.DESCR
PRVD.DESCRSHORT
    let $PRVD.DESCR = rtrim(&PRVD.DESCR,' ')
    let $PRVD.DESCRSHORT = rtrim(&PRVD.DESCRSHORT,' ')
from PS_GPDE_SI_PROV PRVD
where PRVD.GPDE_SI_PROV = $SiProv AND
      PRVD.EFFDT = (select max(EFFDT) FROM PS_GPDE_SI_PROV PRVD1
      where PRVD1.GPDE_SI_PROV = PRVD.GPDE_SI_PROV and PRVD1.EFFDT <= $Effdt)
end-select
end-procedure
!**********************************************************************************




begin-procedure Get_TaetSchl
begin-select
TS.GPDE_DV_BA_CD
   let $DM1.GPDE_DV_BA_CD = &TS.GPDE_DV_BA_CD
from PS_GPDE_DV_DBME TS
WHERE TS.EMPLID = &SM.EMPLID and TS.EMPL_RCD = &SM.EMPL_RCD   and
TS.GPDE_DV_EVT_EFFDT = &SM.GPDE_DV_EVT_EFFDT and TS.GPDE_DV_RUN = &SM.GPDE_DV_RUN and
TS.GPDE_DV_REP_RSN = &SM.GPDE_DV_REP_RSN and TS.GPDE_DV_CANCEL = &SM.GPDE_DV_CANCEL
end-select
end-procedure
!**********************************************************************************





begin-procedure PrepareData_ATZ
if $Ctl_Emplid <> ''
    let $Emplid_Crit_GND2     = ' AND GND2.EMPLID = ''' || $Ctl_Emplid ||  ''' '
else
    let $Emplid_Crit_GND2     = ' '
end-if
Begin-Sql
DELETE FROM PS_GPDE_RP_TX03_3
End-Sql
let $FirstR = 'Y'
begin-select distinct
GND2.EMPLID              &GND2.EMPLID
GND2.PRD_END_DT          &GND2.PRD_END_DT
GND2.GPDE_AL_CPAY_ENDDT &GND2.GPDE_AL_CPAY_ENDDT
       let $NewCpay = &GND2.GPDE_AL_CPAY_ENDDT
       let $NewPrd =  &GND2.PRD_END_DT
       let $NewEmpl = &GND2.EMPLID
       if $LastEmpl <> &GND2.EMPLID
          let $FirstR = 'Y'
       end-if
       if $FirstR <> 'Y' and $NewPrd = $LastPrd
         do Storno2
       end-if
       do DataNew2
       let $FirstR = 'N'
       let $LastCpay = &GND2.GPDE_AL_CPAY_ENDDT
       let $LastPrd =  &GND2.PRD_END_DT
       let $LastEmpl = &GND2.EMPLID
FROM PS_GPDE_RP_AZ01_VW GND2
WHERE GND2.PAY_ENTITY = $Ctl_PayEntity
  [$Emplid_Crit_GND2]
 order by GND2.EMPLID,GND2.PRD_END_DT,GND2.GPDE_AL_CPAY_ENDDT
end-select
end-procedure
!**********************************************************************************
begin-procedure Storno2
begin-select
GNS2.EMPLID
GNS2.CAL_RUN_ID
GNS2.EMPL_RCD
GNS2.GP_PAYGROUP
GNS2.CAL_ID
GNS2.RSLT_SEG_NUM
GNS2.SEG_END_DT
GNS2.SLICE_END_DT
GNS2.PAY_ENTITY
GNS2.PRD_END_DT
GNS2.GPDE_AL_CPAY_ENDDT
GNS2.GPDE_AZ_RP_003_11
GNS2.GPDE_AZ_RP_003_12
GNS2.GPDE_AZ_RP_003_21
GNS2.GPDE_AZ_RP_003_22
GNS2.GPDE_AZ_RP_003_31
GNS2.GPDE_AZ_RP_003_32
GNS2.GPDE_AZ_RP_003_36
GNS2.GPDE_AZ_RP_001_63
GNS2.GPDE_AZ_RP_002_68
GNS2.GPDE_AZ_RP_011_63
GNS2.GPDE_AZ_RP_012_68
GNS2.GPDE_AZ_RP_013_31
GNS2.GPDE_AZ_RP_013_32
GNS2.GPDE_AZ_RP_013_36
GNS2.GPDE_AZ_RP_021_63
GNS2.GPDE_AZ_RP_022_68
GNS2.GPDE_AZ_RP_023_31
GNS2.GPDE_AZ_RP_023_32
GNS2.GPDE_AZ_RP_023_36
GNS2.BEGIN_DT
GNS2.GPDE_AZ_RP_S03_31
  let $GN.EMPLID = &GNS2.EMPLID
  let $GN.CAL_RUN_ID = &GNS2.CAL_RUN_ID
  let #GN.EMPL_RCD = &GNS2.EMPL_RCD
  let $GN.GP_PAYGROUP = &GNS2.GP_PAYGROUP
  let $GN.CAL_ID = &GNS2.CAL_ID
  let #GN.RSLT_SEG_NUM = &GNS2.RSLT_SEG_NUM
  let $GN.SEG_END_DT = &GNS2.SEG_END_DT
  let $GN.SLICE_END_DT = &GNS2.SLICE_END_DT
  let $GN.PAY_ENTITY = &GNS2.PAY_ENTITY
  let $GN.PRD_END_DT = &GNS2.PRD_END_DT
  let $GN.GPDE_AL_CPAY_ENDDT = $NewCpay
  if &GNS2.PRD_END_DT <> $NewCpay
     let $Pr_Sign = 'L'
  else
     let $Pr_Sign = 'A'
  end-if
  let #GN.GPDE_AZ_RP_003_11  = -1 * &GNS2.GPDE_AZ_RP_003_11
  let #GN.GPDE_AZ_RP_003_12  = -1 * &GNS2.GPDE_AZ_RP_003_12
  let #GN.GPDE_AZ_RP_003_21  = -1 * &GNS2.GPDE_AZ_RP_003_21
  let #GN.GPDE_AZ_RP_003_22  = -1 * &GNS2.GPDE_AZ_RP_003_22
  let #GN.GPDE_AZ_RP_003_31  = -1 * &GNS2.GPDE_AZ_RP_003_31
  let #GN.GPDE_AZ_RP_003_32  = -1 * &GNS2.GPDE_AZ_RP_003_32
  let #GN.GPDE_AZ_RP_003_36  = -1 * &GNS2.GPDE_AZ_RP_003_36
  let #GN.GPDE_AZ_RP_001_63  = -1 * &GNS2.GPDE_AZ_RP_001_63
  let #GN.GPDE_AZ_RP_002_68  = -1 * &GNS2.GPDE_AZ_RP_002_68
  let #GN.GPDE_AZ_RP_011_63  = -1 * &GNS2.GPDE_AZ_RP_011_63
  let #GN.GPDE_AZ_RP_012_68  = -1 * &GNS2.GPDE_AZ_RP_012_68
  let #GN.GPDE_AZ_RP_013_31  = -1 * &GNS2.GPDE_AZ_RP_013_31
  let #GN.GPDE_AZ_RP_013_32  = -1 * &GNS2.GPDE_AZ_RP_013_32
  let #GN.GPDE_AZ_RP_013_36  = -1 * &GNS2.GPDE_AZ_RP_013_36
  let #GN.GPDE_AZ_RP_021_63  = -1 * &GNS2.GPDE_AZ_RP_021_63
  let #GN.GPDE_AZ_RP_022_68  = -1 * &GNS2.GPDE_AZ_RP_022_68
  let #GN.GPDE_AZ_RP_023_31  = -1 * &GNS2.GPDE_AZ_RP_023_31
  let #GN.GPDE_AZ_RP_023_32  = -1 * &GNS2.GPDE_AZ_RP_023_32
  let #GN.GPDE_AZ_RP_023_36  = -1 * &GNS2.GPDE_AZ_RP_023_36
  let $GN.BEGIN_DT = &GNS2.BEGIN_DT
  let #GN.GPDE_AZ_RP_S03_31  = -1 * &GNS2.GPDE_AZ_RP_S03_31
     do Insert_Data_Lohnkonto2
FROM PS_GPDE_RP_AZ01_VW GNS2 WHERE GNS2.PAY_ENTITY = $Ctl_PayEntity
  AND GNS2.GPDE_AL_CPAY_ENDDT = $LastCpay AND GNS2.PRD_END_DT = $NewPrd
  AND GNS2.EMPLID = $LastEmpl
end-select
end-procedure
!**********************************************************************************
begin-procedure DataNew2
begin-select
GN2.EMPLID
GN2.CAL_RUN_ID
GN2.EMPL_RCD
GN2.GP_PAYGROUP
GN2.CAL_ID
GN2.RSLT_SEG_NUM
GN2.SEG_END_DT
GN2.SLICE_END_DT
GN2.PAY_ENTITY
GN2.PRD_END_DT
GN2.GPDE_AL_CPAY_ENDDT
GN2.GPDE_AZ_RP_003_11
GN2.GPDE_AZ_RP_003_12
GN2.GPDE_AZ_RP_003_21
GN2.GPDE_AZ_RP_003_22
GN2.GPDE_AZ_RP_003_31
GN2.GPDE_AZ_RP_003_32
GN2.GPDE_AZ_RP_003_36
GN2.GPDE_AZ_RP_001_63
GN2.GPDE_AZ_RP_002_68
GN2.GPDE_AZ_RP_011_63
GN2.GPDE_AZ_RP_012_68
GN2.GPDE_AZ_RP_013_31
GN2.GPDE_AZ_RP_013_32
GN2.GPDE_AZ_RP_013_36
GN2.GPDE_AZ_RP_021_63
GN2.GPDE_AZ_RP_022_68
GN2.GPDE_AZ_RP_023_31
GN2.GPDE_AZ_RP_023_32
GN2.GPDE_AZ_RP_023_36
GN2.BEGIN_DT
GN2.GPDE_AZ_RP_S03_31
  let $GN.EMPLID = &GN2.EMPLID
  let $GN.CAL_RUN_ID = &GN2.CAL_RUN_ID
  let #GN.EMPL_RCD = &GN2.EMPL_RCD
  let $GN.GP_PAYGROUP = &GN2.GP_PAYGROUP
  let $GN.CAL_ID = &GN2.CAL_ID
  let #GN.RSLT_SEG_NUM = &GN2.RSLT_SEG_NUM
  let $GN.SEG_END_DT = &GN2.SEG_END_DT
  let $GN.SLICE_END_DT = &GN2.SLICE_END_DT
  let $GN.PAY_ENTITY = &GN2.PAY_ENTITY
  let $GN.PRD_END_DT = &GN2.PRD_END_DT
  let $GN.GPDE_AL_CPAY_ENDDT = &GN2.GPDE_AL_CPAY_ENDDT
  let #GN.GPDE_AZ_RP_003_11  = &GN2.GPDE_AZ_RP_003_11
  let #GN.GPDE_AZ_RP_003_12  = &GN2.GPDE_AZ_RP_003_12
  let #GN.GPDE_AZ_RP_003_21  = &GN2.GPDE_AZ_RP_003_21
  let #GN.GPDE_AZ_RP_003_22  = &GN2.GPDE_AZ_RP_003_22
  let #GN.GPDE_AZ_RP_003_31  = &GN2.GPDE_AZ_RP_003_31
  let #GN.GPDE_AZ_RP_003_32  = &GN2.GPDE_AZ_RP_003_32
  let #GN.GPDE_AZ_RP_003_36  = &GN2.GPDE_AZ_RP_003_36
  let #GN.GPDE_AZ_RP_001_63  = &GN2.GPDE_AZ_RP_001_63
  let #GN.GPDE_AZ_RP_002_68  = &GN2.GPDE_AZ_RP_002_68
  let #GN.GPDE_AZ_RP_011_63  = &GN2.GPDE_AZ_RP_011_63
  let #GN.GPDE_AZ_RP_012_68  = &GN2.GPDE_AZ_RP_012_68
  let #GN.GPDE_AZ_RP_013_31  = &GN2.GPDE_AZ_RP_013_31
  let #GN.GPDE_AZ_RP_013_32  = &GN2.GPDE_AZ_RP_013_32
  let #GN.GPDE_AZ_RP_013_36  = &GN2.GPDE_AZ_RP_013_36
  let #GN.GPDE_AZ_RP_021_63  = &GN2.GPDE_AZ_RP_021_63
  let #GN.GPDE_AZ_RP_022_68  = &GN2.GPDE_AZ_RP_022_68
  let #GN.GPDE_AZ_RP_023_31  = &GN2.GPDE_AZ_RP_023_31
  let #GN.GPDE_AZ_RP_023_32  = &GN2.GPDE_AZ_RP_023_32
  let #GN.GPDE_AZ_RP_023_36  = &GN2.GPDE_AZ_RP_023_36
  let $GN.BEGIN_DT = &GN2.BEGIN_DT
  let #GN.GPDE_AZ_RP_S03_31 = &GN2.GPDE_AZ_RP_S03_31
  if &GN2.PRD_END_DT = &GN2.GPDE_AL_CPAY_ENDDT
     let $Pr_Sign = 'K'
  else
     let $Pr_Sign = 'N'
  end-if
  do Insert_Data_Lohnkonto2
FROM PS_GPDE_RP_AZ01_VW GN2 where GN2.PAY_ENTITY = $Ctl_PayEntity
  AND GN2.GPDE_AL_CPAY_ENDDT = $NewCpay AND GN2.PRD_END_DT = $NewPrd
  AND GN2.EMPLID = $NewEmpl
end-select
end-procedure





begin-procedure Print_comp_LohnKonto_Flexi
do Get_FlexiWorkTime

do PrintFreistellPhase
let $FirstTimePr2 = 'Y'
let #currLine = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #FL1.EMPL_RCD_Old = 0
let $FL1.GP_PAYGROUP_Old = ''
let $FL1.CAL_ID_Old = ''
let $FL1.GPDE_AL_CPAY_ENDDT_Old = ''
let $FL1.CURRENCY_CD = ''
let $FL1.CURRENCY_CD_Old = ''
let #FL1.GPDE_FL_RP_L001S1_Jan      = 0
let #FL1.GPDE_FL_RP_L001S2_Jan      = 0
let #FL1.GPDE_FL_RP_L001S3_Jan      = 0
let #FL1.GPDE_FL_RP_L001S4_Jan      = 0
let #FL1.GPDE_FL_RP_L002S1_Jan      = 0
let #FL1.GPDE_FL_RP_L002S2_Jan      = 0
let #FL1.GPDE_FL_RP_L002S3_Jan      = 0
let #FL1.GPDE_FL_RP_L002S4_Jan      = 0
let $FirstLinePrinted = 'Y'
let $MinPrdEndDate = ''
let $DecemberRowPrinted = 'N'
begin-select
PBDFL1.EMPLID
PBDFL1.CAL_RUN_ID
PBDFL1.EMPL_RCD
PBDFL1.GP_PAYGROUP
PBDFL1.CAL_ID
PBDFL1.RSLT_SEG_NUM
PBDFL1.CURRENCY_CD
PTFL1.SEG_END_DT
PTFL1.GPDE_RC_PRT_SIGN
PTFL1.SLICE_END_DT
PTFL1.PAY_ENTITY
PTFL1.PRD_END_DT
PTFL1.GPDE_AL_CPAY_ENDDT
PTFL1.GPDE_FL_L001S1_MON
PTFL1.GPDE_FL_L001S2_MON
PTFL1.GPDE_FL_L001S3_MON
PTFL1.GPDE_FL_L001S4_MON
PTFL1.GPDE_FL_L001S1_YTD
PTFL1.GPDE_FL_L001S2_YTD
PTFL1.GPDE_FL_L001S3_YTD
PTFL1.GPDE_FL_L001S4_YTD
PTFL1.GPDE_FL_RP_L001S1       !OST
PTFL1.GPDE_FL_RP_L001S2
PTFL1.GPDE_FL_RP_L001S3
PTFL1.GPDE_FL_RP_L001S4
PTFL1.GPDE_FL_L002S1_MON
PTFL1.GPDE_FL_L002S2_MON
PTFL1.GPDE_FL_L002S3_MON
PTFL1.GPDE_FL_L002S4_MON
PTFL1.GPDE_FL_L002S1_YTD
PTFL1.GPDE_FL_L002S2_YTD
PTFL1.GPDE_FL_L002S3_YTD
PTFL1.GPDE_FL_L002S4_YTD
PTFL1.GPDE_FL_RP_L002S1      !WEST
PTFL1.GPDE_FL_RP_L002S2
PTFL1.GPDE_FL_RP_L002S3
PTFL1.GPDE_FL_RP_L002S4
PTFL1.GPDE_SIP_REGION

  let $NeuAltString = ''
  let $FL1.CURRENCY_CD           = &PBDFL1.CURRENCY_CD
  let $FL1.SEG_END_DT            = &PTFL1.SEG_END_DT
  let $FL1.SLICE_END_DT          = &PTFL1.SLICE_END_DT
  let $FL1.PAY_ENTITY            = &PTFL1.PAY_ENTITY
  let $FL1.PRD_END_DT            = &PTFL1.PRD_END_DT
  let $FL1.GPDE_AL_CPAY_ENDDT    = &PTFL1.GPDE_AL_CPAY_ENDDT
  let $FL1.GPDE_RC_PRT_SIGN     =  &PTFL1.GPDE_RC_PRT_SIGN
  if #zaehler = 0

      do Flexi-Date
      let $MinPrdEndDate = $FlxiDt
  end-if
  if #zaehler > 0 and $FL1.CURRENCY_CD <> $FL1.CURRENCY_CD_Old
     do Print_Sums_Flexi-S1
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if
  do Format-DateTime($Last_Year,$Comp-Out,{DEFCMP},'','')

  do ConvertToComponents($FL1.PRD_END_DT,$yyPr,$mmPr,$ddPr)
  let $DateIn = $yyPr || '0131000000'
  do Format-DateTime($DateIn,$PrdEndJan,{DEFCMP},'','native')
  do Format-DateTime($PrdEndJan,$PrdEndJanCmp,{DEFCMP},'','')
  do Format-DateTime($FL1.PRD_END_DT,$FL1.PRD_END_DT_Cmp,{DEFCMP},'','')
  let #FL1.GPDE_FL_L001S1_MON     = &PTFL1.GPDE_FL_L001S1_MON
  let #FL1.GPDE_FL_L001S2_MON     = &PTFL1.GPDE_FL_L001S2_MON
  let #FL1.GPDE_FL_L001S3_MON     = &PTFL1.GPDE_FL_L001S3_MON
  let #FL1.GPDE_FL_L001S4_MON     = &PTFL1.GPDE_FL_L001S4_MON
  let #FL1.GPDE_FL_L001S1_YTD     = &PTFL1.GPDE_FL_L001S1_YTD
  let #FL1.GPDE_FL_L001S2_YTD     = &PTFL1.GPDE_FL_L001S2_YTD
  let #FL1.GPDE_FL_L001S3_YTD     = &PTFL1.GPDE_FL_L001S3_YTD
  let #FL1.GPDE_FL_L001S4_YTD     = &PTFL1.GPDE_FL_L001S4_YTD
  let #FL1.GPDE_FL_RP_L001S1      = &PTFL1.GPDE_FL_RP_L001S1
  let #FL1.GPDE_FL_RP_L001S2      = &PTFL1.GPDE_FL_RP_L001S2
  let #FL1.GPDE_FL_RP_L001S3      = &PTFL1.GPDE_FL_RP_L001S3
  let #FL1.GPDE_FL_RP_L001S4      = &PTFL1.GPDE_FL_RP_L001S4
  let #FL1.GPDE_FL_L002S1_MON     = &PTFL1.GPDE_FL_L002S1_MON
  let #FL1.GPDE_FL_L002S2_MON     = &PTFL1.GPDE_FL_L002S2_MON
  let #FL1.GPDE_FL_L002S3_MON     = &PTFL1.GPDE_FL_L002S3_MON
  let #FL1.GPDE_FL_L002S4_MON     = &PTFL1.GPDE_FL_L002S4_MON
  let #FL1.GPDE_FL_L002S1_YTD     = &PTFL1.GPDE_FL_L002S1_YTD
  let #FL1.GPDE_FL_L002S2_YTD     = &PTFL1.GPDE_FL_L002S2_YTD
  let #FL1.GPDE_FL_L002S3_YTD     = &PTFL1.GPDE_FL_L002S3_YTD
  let #FL1.GPDE_FL_L002S4_YTD     = &PTFL1.GPDE_FL_L002S4_YTD
  let #FL1.GPDE_FL_RP_L002S1      = &PTFL1.GPDE_FL_RP_L002S1
  let #FL1.GPDE_FL_RP_L002S2      = &PTFL1.GPDE_FL_RP_L002S2
  let #FL1.GPDE_FL_RP_L002S3      = &PTFL1.GPDE_FL_RP_L002S3
  let #FL1.GPDE_FL_RP_L002S4      = &PTFL1.GPDE_FL_RP_L002S4
  let $FL1.GPDE_SIP_REGION        = &PTFL1.GPDE_SIP_REGION
  evaluate $FL1.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $Actual_Currency_save = $FL1.CURRENCY_CD

  do ConvertToComponents($FL1.PRD_END_DT,$yyPr,$mmPr,$ddPr)
  let $DateIn = $yyPr || $mmPr || $ddPr || '000000'
  do Format-DateTime($DateIn,$PrdEndDec,{DEFCMP},'','native')
  let $DateIn = $yyPr || '1231000000'
  do Format-DateTime($DateIn,$PrdEndJn,{DEFCMP},'','native')

  if $PrdEndDec = $PrdEndJn
     let $DecemberRowPrinted = 'Y'
  end-if
  do Print-EE-Data-Flexi-S1
  let $Actual_Currency_Old = $Actual_Currency_save
  let $FL1.CURRENCY_CD_Old = $FL1.CURRENCY_CD
  let #zaehler =  #zaehler + 1
FROM PS_GPDE_RP_0001_VW PBDFL1,PS_GPDE_RP_TX03_4 PTFL1
where PBDFL1.EMPLID = $RP1.EMPLID
AND PBDFL1.EMPL_RCD = #RP1.EMPL_RCD and
PBDFL1.EMPLID = PTFL1.EMPLID AND PBDFL1.EMPL_RCD = PTFL1.EMPL_RCD AND
PBDFL1.CAL_RUN_ID = PTFL1.CAL_RUN_ID AND PBDFL1.GP_PAYGROUP = PTFL1.GP_PAYGROUP AND
PBDFL1.CAL_ID = PTFL1.CAL_ID AND PBDFL1.RSLT_SEG_NUM = PTFL1.RSLT_SEG_NUM AND
PBDFL1.SEG_END_DT = PTFL1.SEG_END_DT AND PBDFL1.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_FL1]
[$orderFL1]
end-select
if #zaehler > 0
   do Print_Sums_Flexi-S1
end-if
end-procedure

! adj08-890b14:Flexible worktime begin date
begin-procedure Flexi-Date
let $FlxiDt = ''
begin-select

FLXI.EFFDT  &FLXIA1.EFFDT
  let $FlxiDt = &FLXIA1.EFFDT
FROM PS_GPDE_FL_EE FLXI
WHERE  FLXI.EMPLID = $RP1.EMPLID
AND FLXI.EMPL_RCD  = #RP1.EMPL_RCD
AND FLXI.EFFDT = ( SELECT MAX(FLXI2.EFFDT) FROM PS_GPDE_FL_EE FLXI2 WHERE
FLXI2.EMPLID = FLXI.EMPLID AND FLXI2.EMPL_RCD=FLXI.EMPL_RCD AND FLXI2.EFFDT <=$EndYearAct )
end-select
end-procedure
!**********************************************************************************
begin-procedure Print-EE-Data-Flexi-S1
if $FirstTimePr2 = 'Y'
    do GetVorjahreswerte
    let #mm = 4 + #current-line
    if #mm > 55
       new-page
    end-if
    let #currLineV = -17 + #current-line
    let #currLineN = -16 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
    let #currLine3 = 1 + #currLineV
    let #currLine4 = 1 + #currLineN
    alter-printer
       font= 4
       point-size =20
    print 'SV-Luft:'    (#currLineV,1) bold
    alter-printer
        font= 4
        point-size =13
    graphic (#currLineN,1,184) box 2 1 12
    graphic (#currLineV,20,2) vert-line 1
    graphic (#currLineV,40,2) vert-line 1
    graphic (#currLineV,70,2) vert-line 1
    graphic (#currLineV,100,2) vert-line 1
    graphic (#currLineV,130,2) vert-line 1
    graphic (#currLineV,160,2) vert-line 1
    print 'Monat/'       (#currLine3,2)  bold
    print 'Seg.-Ende'    (#currLine4,2)  bold
    print 'Korrektur/'    (#currLine3,21) bold
    print 'aus Monat'    (#currLine4,21) bold
    print 'KV-Luft'      (#currLine3,51) bold
    print 'RV-Luft'      (#currLine3,81) bold
    print 'AV-Luft'      (#currLine3,111) bold
    print 'PV-Luft'      (#currLine3,141) bold
    print 'Rechtskreis'  (#currLine3,166) bold
    position (+2,1)
    do Format-Number(#FL1.GPDE_FL_RP_L002S1_Jan,$FL1.GPDE_FL_RP_L002S1_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L002S2_Jan,$FL1.GPDE_FL_RP_L002S2_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L002S3_Jan,$FL1.GPDE_FL_RP_L002S3_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L002S4_Jan,$FL1.GPDE_FL_RP_L002S4_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L001S1_Jan,$FL1.GPDE_FL_RP_L001S1_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L001S2_Jan,$FL1.GPDE_FL_RP_L001S2_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L001S3_Jan,$FL1.GPDE_FL_RP_L001S3_Jan,'B9,999,999.99')
    do Format-Number(#FL1.GPDE_FL_RP_L001S4_Jan,$FL1.GPDE_FL_RP_L001S4_Jan,'B9,999,999.99')
    let $ExistWest = 'N'
    if #FL1.GPDE_FL_RP_L002S1_Jan <> 0 or #FL1.GPDE_FL_RP_L002S2_Jan  <> 0 or
      #FL1.GPDE_FL_RP_L002S3_Jan  <> 0 or #FL1.GPDE_FL_RP_L002S4_Jan Or $TX03_4A.GPDE_SIP_REGION = '2'
      let #CurLine = -15 + #current-line
      let #CurLineMinus1 = -1 + #CurLine
      graphic (#CurLine,1,184) box 1 1
      graphic (#CurLineMinus1,40,1) vert-line 1
      graphic (#CurLineMinus1,70,1) vert-line 1
      graphic (#CurLineMinus1,100,1) vert-line 1
      graphic (#CurLineMinus1,130,1) vert-line 1
      graphic (#CurLineMinus1,160,1) vert-line 1
      print 'Vorjahreswerte' (#CurLine,2) bold
      print 'West'      (#CurLine,166)
      alter-printer
     font = 3
     point-size = 16
      print $FL1.GPDE_FL_RP_L002S1_Jan      (#CurLine,51)
      print $FL1.GPDE_FL_RP_L002S3_Jan      (#CurLine,81)
      print $FL1.GPDE_FL_RP_L002S4_Jan      (#CurLine,111)
      print $FL1.GPDE_FL_RP_L002S2_Jan      (#CurLine,141)

      position (+1,1)
      let $ExistWest = 'Y'

      let #FL1.GPDE_FL_RP_L002S1_Jan      = 0
      let #FL1.GPDE_FL_RP_L002S2_Jan      = 0
      let #FL1.GPDE_FL_RP_L002S3_Jan      = 0
      let #FL1.GPDE_FL_RP_L002S4_Jan      = 0
    end-if

    if #FL1.GPDE_FL_RP_L001S1_Jan <> 0 or #FL1.GPDE_FL_RP_L001S2_Jan  <> 0 or
      #FL1.GPDE_FL_RP_L001S3_Jan  <> 0 or #FL1.GPDE_FL_RP_L001S4_Jan Or $TX03_4A.GPDE_SIP_REGION = '1'
      if $ExistWest = 'Y'
         let #CurLine = -17 + #current-line
      else
         let #CurLine = -16 + #current-line
      end-if

      let #CurLineMinus1 = -1 + #CurLine
      graphic (#CurLine,1,184) box 1 1
      graphic (#CurLineMinus1,40,1) vert-line 1
      graphic (#CurLineMinus1,70,1) vert-line 1
      graphic (#CurLineMinus1,100,1) vert-line 1
      graphic (#CurLineMinus1,130,1) vert-line 1
      graphic (#CurLineMinus1,160,1) vert-line 1
      alter-printer
        font= 4
        point-size =13
      print 'Vorjahreswerte' (#CurLine,2) bold
      print 'Ost'      (#CurLine,166)
      alter-printer
     font = 3
     point-size = 16
      print $FL1.GPDE_FL_RP_L001S1_Jan      (#CurLine,51)
      print $FL1.GPDE_FL_RP_L001S3_Jan      (#CurLine,81)
      print $FL1.GPDE_FL_RP_L001S4_Jan      (#CurLine,111)
      print $FL1.GPDE_FL_RP_L001S2_Jan      (#CurLine,141)

      position (+1,1)
      let $ExistWest = 'Y'
      let #FL1.GPDE_FL_RP_L001S1_Jan      = 0
      let #FL1.GPDE_FL_RP_L001S2_Jan      = 0
      let #FL1.GPDE_FL_RP_L001S3_Jan      = 0
      let #FL1.GPDE_FL_RP_L001S4_Jan      = 0
      end-if
      let $FirstTimePr2 = 'N'
      position (+1,1)
end-if
let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
if #FL1.GPDE_FL_L002S1_MON <> 0 or #FL1.GPDE_FL_L002S2_MON <> 0 or
   #FL1.GPDE_FL_L002S3_MON <> 0 or #FL1.GPDE_FL_L002S4_MON <> 0  Or $FL1.GPDE_SIP_REGION = '2'
   let #currLineV = -17 + #current-line
   let #currLineN = -16 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   do Format-Number(#FL1.GPDE_FL_L002S1_MON,$FL1.GPDE_FL_L002S1_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S2_MON,$FL1.GPDE_FL_L002S2_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S3_MON,$FL1.GPDE_FL_L002S3_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S4_MON,$FL1.GPDE_FL_L002S4_MON,'B9,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,20,1) vert-line 1
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   let #Date_Type1 = {DateType}
   do ConvertToComponents($FL1.PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
   do ConvertToComponents($FL1.SEG_END_DT,$yySeg,$mmSeg,$ddSeg)
   do Format-DateTime($FL1.SEG_END_DT, $FL1.SEG_END_DT1, {DEFDATE}, '', '')
   do ConvertToComponents($FL1.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   let #Date_Type1 = {DateType}
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      let $SegDate = $yySeg || '{PTDateDelim}' || $mmSeg
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      let $SegDate = $mmSeg || '{PTDateDelim}' || $yySeg
      break
   end-evaluate

   if $NeuAltString <> ''
      let $RetroStr = $NeuAltString || '/ ' || $RetroDate
   else
      let $RetroStr = ''
   end-if
   let $SegStr = $SegDate

   let $Strdate = $mmPrd || '/ ' || $SegStr
   print $Strdate         (#TempCol,2) bold
   print $RetroStr  (#TempCol,21)
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_L002S1_MON  (#TempCol,51)
   print $FL1.GPDE_FL_L002S3_MON  (#TempCol,81)
   print $FL1.GPDE_FL_L002S4_MON  (#TempCol,111)
   print $FL1.GPDE_FL_L002S2_MON  (#TempCol,141)
end-if
if #FL1.GPDE_FL_L001S1_MON <> 0 or #FL1.GPDE_FL_L001S2_MON <> 0 or
   #FL1.GPDE_FL_L001S3_MON <> 0 or #FL1.GPDE_FL_L001S4_MON <> 0  Or $FL1.GPDE_SIP_REGION = '1'
   let #currLineV = -17 + #current-line
   let #currLineN = -16 + #current-line
if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   do Format-Number(#FL1.GPDE_FL_L001S1_MON,$FL1.GPDE_FL_L001S1_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S2_MON,$FL1.GPDE_FL_L001S2_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S3_MON,$FL1.GPDE_FL_L001S3_MON,'B9,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S4_MON,$FL1.GPDE_FL_L001S4_MON,'B9,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,20,1) vert-line 1
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   let #Date_Type1 = {DateType}
   do ConvertToComponents($FL1.PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
   do ConvertToComponents($FL1.SEG_END_DT,$yySeg,$mmSeg,$ddSeg)
   do Format-DateTime($FL1.SEG_END_DT, $FL1.SEG_END_DT1, {DEFDATE}, '', '')
   do ConvertToComponents($FL1.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   let #Date_Type1 = {DateType}
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      let $SegDate = $yySeg || '{PTDateDelim}' || $mmSeg
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      let $SegDate = $mmSeg || '{PTDateDelim}' || $yySeg
      break
   end-evaluate

   if $NeuAltString <> ''
      let $RetroStr = $NeuAltString || '/ ' || $RetroDate
   else
      let $RetroStr = ''
   end-if
   let $SegStr = $SegDate

   let $Strdate = $mmPrd || '/ ' || $SegStr
   print $Strdate         (#TempCol,2) bold
   print $RetroStr  (#TempCol,21)
   print 'Ost' (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_L001S1_MON  (#TempCol,51)
   print $FL1.GPDE_FL_L001S3_MON  (#TempCol,81)
   print $FL1.GPDE_FL_L001S4_MON  (#TempCol,111)
   print $FL1.GPDE_FL_L001S2_MON  (#TempCol,141)
end-if
end-procedure
!*************************************************************************
begin-procedure Print_Sums_Flexi-S1

let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if
if #FL1.GPDE_FL_L002S1_YTD <> 0 or #FL1.GPDE_FL_L002S2_YTD <> 0 or
   #FL1.GPDE_FL_L002S3_YTD <> 0 or #FL1.GPDE_FL_L002S4_YTD <> 0  Or $FL1.GPDE_SIP_REGION = '2'
       let #currLineV = -16 + #current-line
       let #currLineN = -15 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if

   do Format-Number(#FL1.GPDE_FL_L002S1_YTD,$FL1.GPDE_FL_L002S1_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S2_YTD,$FL1.GPDE_FL_L002S2_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S3_YTD,$FL1.GPDE_FL_L002S3_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L002S4_YTD,$FL1.GPDE_FL_L002S4_YTD,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,20,1) vert-line 1
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1

   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13

   print 'Summe'                  (#TempCol,2) bold
   print 'West'                   (#TempCol,166)

   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_L002S1_YTD  (#TempCol,51)
   print $FL1.GPDE_FL_L002S3_YTD  (#TempCol,81)
   print $FL1.GPDE_FL_L002S4_YTD  (#TempCol,111)
   print $FL1.GPDE_FL_L002S2_YTD  (#TempCol,141)

end-if

if #FL1.GPDE_FL_L001S1_YTD <> 0 or #FL1.GPDE_FL_L001S2_YTD <> 0 or
   #FL1.GPDE_FL_L001S3_YTD <> 0 or #FL1.GPDE_FL_L001S4_YTD <> 0  Or $FL1.GPDE_SIP_REGION = '1'
       let #currLineV = -16 + #current-line
       let #currLineN = -15 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if

   do Format-Number(#FL1.GPDE_FL_L001S1_YTD,$FL1.GPDE_FL_L001S1_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S2_YTD,$FL1.GPDE_FL_L001S2_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S3_YTD,$FL1.GPDE_FL_L001S3_YTD,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_L001S4_YTD,$FL1.GPDE_FL_L001S4_YTD,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,20,1) vert-line 1
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1

   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13

   print 'Summe'                  (#TempCol,2) bold
   print 'Ost'                   (#TempCol,166)

   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_L002S1_YTD  (#TempCol,51)
   print $FL1.GPDE_FL_L002S3_YTD  (#TempCol,81)
   print $FL1.GPDE_FL_L002S4_YTD  (#TempCol,111)
   print $FL1.GPDE_FL_L002S2_YTD  (#TempCol,141)


end-if

! Print Only, if December row printed
if $DecemberRowPrinted = 'Y'
let #mm = 4 + #current-line
if #mm > 55
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if
     let #currLineV = -16 + #current-line
     let #currLineN = -15 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
let $ExistWest1 = 'N'
if #FL1.GPDE_FL_RP_L002S1 <> 0 or #FL1.GPDE_FL_RP_L002S2 <> 0 or
   #FL1.GPDE_FL_RP_L002S3 <> 0 or #FL1.GPDE_FL_RP_L002S4 <> 0 Or $FL1.GPDE_SIP_REGION = '2'
   do Format-Number(#FL1.GPDE_FL_RP_L002S1,$FL1.GPDE_FL_RP_L002S1,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L002S2,$FL1.GPDE_FL_RP_L002S2,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L002S3,$FL1.GPDE_FL_RP_L002S3,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L002S4,$FL1.GPDE_FL_RP_L002S4,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1 12
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1

   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Gesamtsumme SV-Luft zum Jahresende'    (#TempCol,2) bold
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_RP_L002S1  (#TempCol,51)
   print $FL1.GPDE_FL_RP_L002S3  (#TempCol,81)
   print $FL1.GPDE_FL_RP_L002S4  (#TempCol,111)
   print $FL1.GPDE_FL_RP_L002S2  (#TempCol,141)
   let $ExistWest1 = 'Y'
end-if

if #FL1.GPDE_FL_RP_L001S1 <> 0 or #FL1.GPDE_FL_RP_L001S2 <> 0 or
   #FL1.GPDE_FL_RP_L001S3 <> 0 or #FL1.GPDE_FL_RP_L001S4 <> 0  Or $FL1.GPDE_SIP_REGION = '1'
   do Format-Number(#FL1.GPDE_FL_RP_L001S1,$FL1.GPDE_FL_RP_L001S1,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L001S2,$FL1.GPDE_FL_RP_L001S2,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L001S3,$FL1.GPDE_FL_RP_L001S3,'99,999,999.99')
   do Format-Number(#FL1.GPDE_FL_RP_L001S4,$FL1.GPDE_FL_RP_L001S4,'99,999,999.99')
   if $ExistWest1 = 'Y'
      let #currLineN = 1 + #currLineN
      let #currLineV = 1 + #currLineV
   end-if

   graphic (#currLineN,1,184) box 1 1 12
   graphic (#currLineV,40,1) vert-line 1
   graphic (#currLineV,70,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1

   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Gesamtsumme SV-Luft zum Jahresende'    (#TempCol,2) bold
   print 'Ost'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $FL1.GPDE_FL_RP_L001S1  (#TempCol,51)
   print $FL1.GPDE_FL_RP_L001S3  (#TempCol,81)
   print $FL1.GPDE_FL_RP_L001S4  (#TempCol,111)
   print $FL1.GPDE_FL_RP_L001S2  (#TempCol,141)
   let $ExistWest1 = 'Y'
end-if
end-if
!if $ExistWest1 = 'Y'
   new-page
!end-if
let $FirstTimePr2 = 'Y'
end-procedure
!***********************************************************************
begin-procedure Print_comp_LohnKonto_Wertguthaben
let $FirstTimePr1 = 'Y'
let #currLine = 0
let $NotPrinted = 'N'
let #zaehler = 0
let #FL1.EMPL_RCD_Old = 0
let $FL1.GP_PAYGROUP_Old = ''
let $FL1.CAL_ID_Old = ''
let $FL1.GPDE_AL_CPAY_ENDDT_Old = ''
let $FL1.CURRENCY_CD = ''
let $FL1.CURRENCY_CD_Old = ''
let #FL1.GPDE_FL_RP_L001S1_Jan      = 0
let #FL1.GPDE_FL_RP_L001S2_Jan      = 0
let #FL1.GPDE_FL_RP_L001S3_Jan      = 0
let #FL1.GPDE_FL_RP_L001S4_Jan      = 0
let #FL1.GPDE_FL_RP_L002S1_Jan      = 0
let #FL1.GPDE_FL_RP_L002S2_Jan      = 0
let #FL1.GPDE_FL_RP_L002S3_Jan      = 0
let #FL1.GPDE_FL_RP_L002S4_Jan      = 0
let $FirstLinePrinted = 'Y'
let $MinPrdEndDate = ''
let $DecemberRowPrintedW = 'N'
let $ExistWest ='N'
begin-select
PBDWG1.EMPLID
PBDWG1.CAL_RUN_ID
PBDWG1.EMPL_RCD
PBDWG1.GP_PAYGROUP
PBDWG1.CAL_ID
PBDWG1.RSLT_SEG_NUM
PBDWG1.CURRENCY_CD
PTWG1.SEG_END_DT
PTWG1.GPDE_RC_PRT_SIGN
PTWG1.SLICE_END_DT
PTWG1.PAY_ENTITY
PTWG1.PRD_END_DT
PTWG1.GPDE_AL_CPAY_ENDDT
PTWG1.GPDE_FL_W001E0_MON
PTWG1.GPDE_FL_W001E0_YTD
PTWG1.GPDE_FL_RP_W001E0
PTWG1.GPDE_FL_W002E0_MON
PTWG1.GPDE_FL_W002E0_YTD
PTWG1.GPDE_FL_RP_W002E0
PTWG1.GPDE_FL_W011E0_MON
PTWG1.GPDE_FL_W011E0_YTD
PTWG1.GPDE_FL_RP_W011E0
PTWG1.GPDE_FL_W012E0_MON
PTWG1.GPDE_FL_W012E0_YTD
PTWG1.GPDE_FL_RP_W012E0
PTWG1.GPDE_FL_W020E0_MON
PTWG1.GPDE_FL_W020E0_YTD
PTWG1.GPDE_FL_RP_W020E0
PTWG1.GPDE_FL_W001E0_TMP
PTWG1.GPDE_FL_W002E0_TMP
PTWG1.GPDE_SIP_REGION
  let $NeuAltString = ''
  let $WG1.CURRENCY_CD           = &PBDWG1.CURRENCY_CD
  let $WG1.SEG_END_DT            = &PTWG1.SEG_END_DT
  let $WG1.SLICE_END_DT          = &PTWG1.SLICE_END_DT
  let $WG1.PAY_ENTITY            = &PTWG1.PAY_ENTITY
  let $WG1.PRD_END_DT            = &PTWG1.PRD_END_DT
  let $WG1.GPDE_AL_CPAY_ENDDT    = &PTWG1.GPDE_AL_CPAY_ENDDT
  let $WG1.GPDE_RC_PRT_SIGN      = &PTWG1.GPDE_RC_PRT_SIGN

  if #zaehler = 0
     let $MinPrdEndDate = $WG1.PRD_END_DT
  end-if
  if #zaehler > 0 and $WG1.CURRENCY_CD <> $WG1.CURRENCY_CD_Old
     do Print_Sums_Wertguth-S1
  end-if
  if $March = 'N'
     let $Vorj = 'N'
     let $MarchCL = 'N'
  else
     let $Vorj = 'Y'
     let $MarchCL = 'N'
  end-if

  do GetDate_PlusDays($Ctl_Start_Dt,-1,$PrdEndJan)
  do Format-DateTime($PrdEndJan,$PrdEndJanCmp,{DEFCMP},'','')
  do Format-DateTime($WG1.PRD_END_DT,$WG1.PRD_END_DT_Cmp,{DEFCMP},'','')
  do GetVorjahreswerte

  let #WG1.GPDE_FL_W001E0_MON   = &PTWG1.GPDE_FL_W001E0_MON
  let #WG1.GPDE_FL_W001E0_YTD   = &PTWG1.GPDE_FL_W001E0_YTD
  let #WG1.GPDE_FL_RP_W001E0    = &PTWG1.GPDE_FL_RP_W001E0
  let #WG1.GPDE_FL_W002E0_MON   = &PTWG1.GPDE_FL_W002E0_MON
  let #WG1.GPDE_FL_W002E0_YTD   = &PTWG1.GPDE_FL_W002E0_YTD
  let #WG1.GPDE_FL_RP_W002E0    = &PTWG1.GPDE_FL_RP_W002E0
  let #WG1.GPDE_FL_W011E0_MON   = &PTWG1.GPDE_FL_W011E0_MON
  let #WG1.GPDE_FL_W011E0_YTD   = &PTWG1.GPDE_FL_W011E0_YTD
  let #WG1.GPDE_FL_RP_W011E0    = &PTWG1.GPDE_FL_RP_W011E0
  let #WG1.GPDE_FL_W012E0_MON   = &PTWG1.GPDE_FL_W012E0_MON
  let #WG1.GPDE_FL_W012E0_YTD   = &PTWG1.GPDE_FL_W012E0_YTD
  let #WG1.GPDE_FL_RP_W012E0    = &PTWG1.GPDE_FL_RP_W012E0
  let #WG1.GPDE_FL_W020E0_MON   = &PTWG1.GPDE_FL_W020E0_MON
  let #WG1.GPDE_FL_W020E0_YTD   = &PTWG1.GPDE_FL_W020E0_YTD
  let #WG1.GPDE_FL_RP_W020E0    = &PTWG1.GPDE_FL_RP_W020E0
  let #WG1.GPDE_FL_W001E0_TMP   = &PTWG1.GPDE_FL_W001E0_TMP
  let #WG1.GPDE_FL_W002E0_TMP   = &PTWG1.GPDE_FL_W002E0_TMP
  let $WG1.GPDE_SIP_REGION        = &PTWG1.GPDE_SIP_REGION
  evaluate $WG1.GPDE_RC_PRT_SIGN
  when = 'N'
      let $NeuAltString = 'Neu'
      break
  when = 'L'
      let $NeuAltString = 'Alt'
      break
  when-other
      let $NeuAltString = ''
      break
  end-evaluate
  let $Actual_Currency_save = $WG1.CURRENCY_CD

  do ConvertToComponents($WG1.PRD_END_DT,$yyPr,$mmPr,$ddPr)
  let $DateIn = $yyPr || $mmPr || $ddPr || '000000'
  do Format-DateTime($DateIn,$PrdEndDec,{DEFCMP},'','native')
  let $DateIn = $Ctl_Year || '1231000000'
  do Format-DateTime($DateIn,$PrdEndDc,{DEFCMP},'','native')

  if $PrdEndDec = $PrdEndDc
     let $DecemberRowPrintedW = 'Y'
  end-if

  do Print-EE-Data-Wertguth-S1
  let $Actual_Currency_Old = $Actual_Currency_save
  let $WG1.CURRENCY_CD_Old = $WG1.CURRENCY_CD
  let #zaehler =  #zaehler + 1
FROM PS_GPDE_RP_0001_VW PBDWG1,PS_GPDE_RP_TX03_4 PTWG1
where PBDWG1.EMPLID = $RP1.EMPLID AND PBDWG1.EMPLID = PTWG1.EMPLID  AND
PBDWG1.EMPL_RCD = #RP1.EMPL_RCD
AND PBDWG1.EMPL_RCD = PTWG1.EMPL_RCD AND
PBDWG1.CAL_RUN_ID = PTWG1.CAL_RUN_ID AND PBDWG1.GP_PAYGROUP = PTWG1.GP_PAYGROUP AND
PBDWG1.CAL_ID = PTWG1.CAL_ID AND PBDWG1.RSLT_SEG_NUM = PTWG1.RSLT_SEG_NUM AND
PBDWG1.SEG_END_DT = PTWG1.SEG_END_DT AND PBDWG1.PAY_ENTITY  =  $Ctl_PayEntity
[$march_crit_WG1]
[$orderWG1]
end-select
if #zaehler > 0
   do Print_Sums_Wertguth-S1
end-if
end-procedure
!**********************************************************************************
begin-procedure Print-EE-Data-Wertguth-S1
if $FirstTimePr1 = 'Y' or #current-line = 18
   do GetVorjahreswerte
    let #mm = 4 + #current-line
    if #mm > 55
       new-page
    end-if
    let #currLineV = -17 + #current-line
    let #currLineN = -16 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
    let #currLine3 = 1 + #currLineV
    let #currLine4 = 1 + #currLineN

    alter-printer
       font= 4
       point-size =20
    
    print 'Wertguthaben:'    (#currLineV,1) bold
    alter-printer
        font= 4
        point-size =13
    graphic (#currLineN,1,184) box 2 1 12
    graphic (#currLineV,30,2) vert-line 1    
    graphic (#currLineV,60,2) vert-line 1    
    graphic (#currLineV,100,2) vert-line 1
    graphic (#currLineV,130,2) vert-line 1
    graphic (#currLineV,160,2) vert-line 1
    
    
    print 'Monat/'       (#currLine3,2)  bold
    print 'Seg.-Ende'    (#currLine4,2)  bold
    print 'Korrektur/'    (#currLine3,31) bold
    print 'aus Monat'    (#currLine4,31) bold
    print 'Wertguthaben Wert'      (#currLine3,61) bold
    print 'SV-pflichtig'      (#currLine4,61) bold
    print 'Wertguthaben Wert'      (#currLine3,101) bold
    print 'SV-frei'      (#currLine4,101) bold
    print 'Wertguthaben Zeit'  (#currLine3,131) bold
    print 'Rechtskreis'  (#currLine3,166) bold

    position (+2,1)
    do Format-Number(#WG1.GPDE_FL_RP_W002E0_Jan,$WG1.GPDE_FL_RP_W002E0_Jan,'B9,999,999.99')
    do Format-Number(#WG1.GPDE_FL_RP_W001E0_Jan,$WG1.GPDE_FL_RP_W001E0_Jan,'B9,999,999.99')
    do Format-Number(#WG1.GPDE_FL_RP_W020E0_Jan,$WG1.GPDE_FL_RP_W020E0_Jan,'B9,999,999.99')
    do Format-Number(#WG1.GPDE_FL_RP_W012E0_Jan,$WG1.GPDE_FL_RP_W012E0_Jan,'B9,999,999.99')
    do Format-Number(#WG1.GPDE_FL_RP_W011E0_Jan,$WG1.GPDE_FL_RP_W011E0_Jan,'B9,999,999.99')
    let $ExistWest = 'N'
    if #WG1.GPDE_FL_RP_W002E0_Jan <> 0 or #WG1.GPDE_FL_RP_W020E0_Jan  <> 0 or
      #WG1.GPDE_FL_RP_W012E0_Jan Or $TX03_4A.GPDE_SIP_REGION = '2'
      let #CurLine = -16 + #current-line
      let #CurLineMinus1 = -1 + #CurLine
      graphic (#CurLine,1,184) box 1 1
      graphic (#CurLineMinus1,60,1) vert-line 1
      graphic (#CurLineMinus1,100,1) vert-line 1
      graphic (#CurLineMinus1,130,1) vert-line 1
      graphic (#CurLineMinus1,160,1) vert-line 1
      print 'Vorjahreswerte' (#CurLine,2) bold
      print 'West'      (#CurLine,166)
      alter-printer
     font = 3
     point-size = 16
      print $WG1.GPDE_FL_RP_W002E0_Jan      (#CurLine,71)
      print $WG1.GPDE_FL_RP_W020E0_Jan      (#CurLine,111)
      print $WG1.GPDE_FL_RP_W012E0_Jan      (#CurLine,141)
      position (+1,1)
      let $ExistWest = 'Y'
      let #WG1.GPDE_FL_RP_W002E0_Jan      = 0
      let #WG1.GPDE_FL_RP_W020E0_Jan      = 0
      let #WG1.GPDE_FL_RP_W012E0_Jan      = 0
    end-if
    if #WG1.GPDE_FL_RP_W001E0_Jan <> 0 or #WG1.GPDE_FL_RP_W011E0_Jan  <> 0 or
       $TX03_4A.GPDE_SIP_REGION = '1'
      if $ExistWest = 'Y'
         let #CurLine = -17 + #current-line
      else
         let #CurLine = -16 + #current-line
      end-if

      let #CurLineMinus1 = -1 + #CurLine
      graphic (#CurLine,1,184) box 1 1
      graphic (#CurLineMinus1,60,1) vert-line 1
      graphic (#CurLineMinus1,100,1) vert-line 1
      graphic (#CurLineMinus1,130,1) vert-line 1
      graphic (#CurLineMinus1,160,1) vert-line 1
      alter-printer
        font= 4
        point-size =13
      print 'Vorjahreswerte' (#CurLine,2) bold
      print 'Ost'      (#CurLine,166)
      alter-printer
     font = 3
     point-size = 16
      print $WG1.GPDE_FL_RP_W001E0_Jan      (#CurLine,71)
      print $WG1.GPDE_FL_RP_W011E0_Jan      (#CurLine,141)

      position (+1,1)
      let $ExistWest = 'N'
      let #FL1.GPDE_FL_RP_W001E0_Jan      = 0
      let #WG1.GPDE_FL_RP_W011E0_Jan      = 0
      end-if
   let $FirstTimePr1 = 'N'
   position (+1,1)
end-if

let #mm = 4 + #current-line
if #mm > 55
 new-page
end-if

if #WG1.GPDE_FL_W002E0_MON <> 0 or #WG1.GPDE_FL_W020E0_MON <> 0 or
   #WG1.GPDE_FL_W012E0_MON <> 0 Or $WG1.GPDE_SIP_REGION = '2'

   let #currLineV = -17 + #current-line
   let #currLineN = -16 + #current-line

if #currLineV <= 0
   let #currLineV = 1
   let #currLineN = 2
end-if
   do Format-Number(#WG1.GPDE_FL_W002E0_MON,$WG1.GPDE_FL_W002E0_MON,'B9,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W020E0_MON,$WG1.GPDE_FL_W020E0_MON,'B9,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W012E0_MON,$WG1.GPDE_FL_W012E0_MON,'B9,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   let #Date_Type1 = {DateType}
   do ConvertToComponents($WG1.PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
   do ConvertToComponents($WG1.SEG_END_DT,$yySeg,$mmSeg,$ddSeg)
   do Format-DateTime($WG1.SEG_END_DT, $WG1.SEG_END_DT1, {DEFDATE}, '', '')
   do ConvertToComponents($WG1.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   let #Date_Type1 = {DateType}
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      let $SegDate = $yySeg || '{PTDateDelim}' || $mmSeg
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      let $SegDate = $mmSeg || '{PTDateDelim}' || $yySeg
      break
   end-evaluate
   if $NeuAltString <> ''
      let $RetroStr = $NeuAltString || '/ ' || $RetroDate
   else
      let $RetroStr = ''
   end-if
   let $SegStr = $SegDate
   let $Strdate = $mmPrd || '/ ' || $SegStr
   print $Strdate         (#TempCol,2) bold
   print $RetroStr  (#TempCol,31)
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W002E0_MON  (#TempCol,71)
   print $WG1.GPDE_FL_W020E0_MON  (#TempCol,111)
   print $WG1.GPDE_FL_W012E0_MON  (#TempCol,141)
end-if
if #WG1.GPDE_FL_W001E0_MON <> 0 or #WG1.GPDE_FL_W011E0_MON <> 0  Or
   $WG1.GPDE_SIP_REGION = '1'
      let #currLineV = -17 + #current-line
      let #currLineN = -16 + #current-line
   if #currLineV <= 0
      let #currLineV = 1
      let #currLineN = 2
   end-if
   do Format-Number(#WG1.GPDE_FL_W001E0_MON,$WG1.GPDE_FL_W001E0_MON,'B9,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W011E0_MON,$WG1.GPDE_FL_W011E0_MON,'B9,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   let #Date_Type1 = {DateType}
   do ConvertToComponents($WG1.PRD_END_DT,$yyPrd,$mmPrd,$ddPrd)
   do ConvertToComponents($WG1.SEG_END_DT,$yySeg,$mmSeg,$ddSeg)
   do Format-DateTime($WG1.SEG_END_DT, $WG1.SEG_END_DT1, {DEFDATE}, '', '')
   do ConvertToComponents($WG1.GPDE_AL_CPAY_ENDDT,$yy1a,$mm1a,$dd1a)
   let #Date_Type1 = {DateType}
   evaluate #Date_Type1
   when = 2
      let $RetroDate = $yy1a || '{PTDateDelim}' || $mm1a
      let $SegDate = $yySeg || '{PTDateDelim}' || $mmSeg
      break
   when-other
      let $RetroDate = $mm1a || '{PTDateDelim}' || $yy1a
      let $SegDate = $mmSeg || '{PTDateDelim}' || $yySeg
      break
   end-evaluate

   if $NeuAltString <> ''
      let $RetroStr = $NeuAltString || '/ ' || $RetroDate
   else
      let $RetroStr = ''
   end-if
   let $SegStr = $SegDate

   let $Strdate = $mmPrd || '/ ' || $SegStr
   print $Strdate         (#TempCol,2) bold
   print $RetroStr  (#TempCol,31)
   print 'Ost' (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W001E0_MON  (#TempCol,71)
   print $WG1.GPDE_FL_W011E0_MON  (#TempCol,141)
end-if
end-procedure
!*************************************************************************
begin-procedure Print_Sums_Wertguth-S1
let #mm = 4 + #current-line
if #mm > 50
 new-page
end-if
let $ExistWest = 'N'
if #WG1.GPDE_FL_W002E0_YTD <> 0 or #WG1.GPDE_FL_W020E0_YTD <> 0 or
   #WG1.GPDE_FL_W012E0_YTD <> 0 Or $WG1.GPDE_SIP_REGION = '2'
       let #currLineV = -16 + #current-line
       let #currLineN = -15 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
   do Format-Number(#WG1.GPDE_FL_W002E0_YTD,$WG1.GPDE_FL_W002E0_YTD,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W020E0_YTD,$WG1.GPDE_FL_W020E0_YTD,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W012E0_YTD,$WG1.GPDE_FL_W012E0_YTD,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Summe'                  (#TempCol,2) bold
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W002E0_YTD  (#TempCol,71)
   print $WG1.GPDE_FL_W020E0_YTD  (#TempCol,111)
   print $WG1.GPDE_FL_W012E0_YTD  (#TempCol,141)
   let $ExistWest = 'Y'
end-if

if #WG1.GPDE_FL_W001E0_YTD <> 0 or #WG1.GPDE_FL_W011E0_YTD <> 0  Or
   $WG1.GPDE_SIP_REGION = '1'
       let #currLineV = -16 + #current-line
       let #currLineN = -15 + #current-line
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if

   do Format-Number(#WG1.GPDE_FL_W001E0_YTD,$WG1.GPDE_FL_W001E0_YTD,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W011E0_YTD,$WG1.GPDE_FL_W011E0_YTD,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1

   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13

   print 'Summe'                  (#TempCol,2) bold
   print 'Ost'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W001E0_YTD  (#TempCol,71)
   print $WG1.GPDE_FL_W011E0_YTD  (#TempCol,141)
end-if

 let $ExistWest = 'N'

if #WG1.GPDE_FL_RP_W002E0 <> 0 or #WG1.GPDE_FL_RP_W020E0 <> 0 or
   #WG1.GPDE_FL_RP_W012E0 <> 0  Or $WG1.GPDE_SIP_REGION = '2'

     let #currLineV = -16 + #current-line
     let #currLineN = -15 + #current-line

    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if

   do Format-Number(#WG1.GPDE_FL_RP_W002E0,$WG1.GPDE_FL_RP_W002E0,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_RP_W020E0,$WG1.GPDE_FL_RP_W020E0,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_RP_W012E0,$WG1.GPDE_FL_RP_W012E0,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1 12
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Gesamtsumme'    (#TempCol,2) bold
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_RP_W002E0  (#TempCol,71)
   print $WG1.GPDE_FL_RP_W020E0  (#TempCol,111)
   print $WG1.GPDE_FL_RP_W012E0  (#TempCol,141)

   let $ExistWest1 = 'Y'
end-if
if #WG1.GPDE_FL_RP_W001E0 <> 0 or #WG1.GPDE_FL_RP_W011E0 <> 0  Or $WG1.GPDE_SIP_REGION = '1'
   do Format-Number(#WG1.GPDE_FL_RP_W001E0,$WG1.GPDE_FL_RP_W001E0,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_RP_W011E0,$WG1.GPDE_FL_RP_W011E0,'99,999,999.99')
   if $ExistWest1 = 'Y'
      let #currLineN = 1 + #currLineN
      let #currLineV = 1 + #currLineV
   end-if
   graphic (#currLineN,1,184) box 1 1 12
   graphic (#currLineV,30,1) vert-line 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Gesamtsumme'    (#TempCol,2) bold
   print 'Ost'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_RP_W001E0  (#TempCol,71)
   print $WG1.GPDE_FL_RP_W011E0  (#TempCol,141)

   let $ExistWest1 = 'N'
end-if

let $ExistWest1 = 'N'
if $DecemberRowPrintedW = 'Y'
 if #WG1.GPDE_FL_W002E0_YTD <> 0 or #WG1.GPDE_FL_W001E0_TMP <> 0  Or $WG1.GPDE_SIP_REGION = '2'
   let #currLineV = -16 + #current-line
     let #currLineN = -15 + #current-line
     if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
     end-if
   do Format-Number(#WG1.GPDE_FL_W002E0_YTD,$WG1.GPDE_FL_W002E0_YTD,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W001E0_TMP,$WG1.GPDE_FL_W001E0_TMP,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Wertguthaben zur Abgrenzung der SV-Luft' (#TempCol,2) bold
   print 'West'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W002E0_YTD  (#TempCol,71)
   print $WG1.GPDE_FL_W001E0_TMP  (#TempCol,141)
   let $ExistWest = 'Y'
end-if
if #WG1.GPDE_FL_W001E0_YTD <> 0 or #WG1.GPDE_FL_W002E0_TMP <> 0  Or $WG1.GPDE_SIP_REGION = '1'
    if $ExistWest = 'Y'
       let #currLineV = -17 + #current-line
       let #currLineN = -16 + #current-line
    else
       let #currLineV = -16 + #current-line
       let #currLineN = -15 + #current-line
    end-if
    if #currLineV <= 0
       let #currLineV = 1
       let #currLineN = 2
    end-if
   do Format-Number(#WG1.GPDE_FL_W001E0_YTD,$WG1.GPDE_FL_W001E0_YTD,'99,999,999.99')
   do Format-Number(#WG1.GPDE_FL_W002E0_TMP,$WG1.GPDE_FL_W002E0_TMP,'99,999,999.99')
   graphic (#currLineN,1,184) box 1 1
   graphic (#currLineV,60,1) vert-line 1
   graphic (#currLineV,100,1) vert-line 1
   graphic (#currLineV,130,1) vert-line 1
   graphic (#currLineV,160,1) vert-line 1
   let #TempCol = 1 + #currLineV
   alter-printer
     font = 4
     point-size = 13
   print 'Wertguthaben zur Abgrenzung der SV-Luft' (#TempCol,2) bold
   print 'Ost'                   (#TempCol,166)
   alter-printer
     font = 3
     point-size = 16
   print $WG1.GPDE_FL_W001E0_YTD  (#TempCol,71)
   print $WG1.GPDE_FL_W002E0_TMP  (#TempCol,141)
end-if

end-if

let #mm = 4 + #current-line
if #mm > 50
  let $Actual_Currency_save = $Actual_Currency_Old
     if $Actual_Currency_save = 'DEM'
        let $Actual_Currency_save = 'DM'
     end-if
     if $Actual_Currency_save = 'EUR'
        let $Actual_Currency_save = $EUROCHAR
     end-if
 new-page
end-if

!if $ExistWest1 = 'Y'
   new-page
!end-if
end-procedure








!**********************************************************************************
! Heading for compressed report (Form=1)
!
!
begin-heading 17 for-reports = (report2)
  !
  ! print standard box
  !
  do CX_StandardHeaderBox
    alter-printer
       font= 4
       point-size =20

  !
  ! print different column headers depending on the content of the page
  !
  evaluate $SeitenNr
  when = '1'
          print 'Sozialversicherung:'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (15,1,184) box 3 1 12
          graphic (14,9,3) vert-line 1
          graphic (14,17,3) vert-line 1
          graphic (14,27,3) vert-line 1
          graphic (14,34,3) vert-line 1
          graphic (14,41,3) vert-line 1
          graphic (14,48,3) vert-line 1
          graphic (14,62,3) vert-line 1
          graphic (14,76,3) vert-line 1
          graphic (14,90,3) vert-line 1
          graphic (14,104,3) vert-line 1
          graphic (14,118,3) vert-line 1
          graphic (14,132,3) vert-line 1
          graphic (14,146,3) vert-line 1
          graphic (14,160,3) vert-line 1
          graphic (14,172,3) vert-line 1
          print 'Monat/'  (15,2)  bold
          print 'Seg.-'   (16,2)  bold
          print 'Ende'    (17,2)  bold
          print 'Korr.'           (15,10) bold
          print 'aus'           (16,10) bold
          print 'Monat'         (17,10) bold
          print 'Kranken-'           (15,18) bold
          print 'kasse'              (16,18) bold
          print 'BGR'                (15,28) bold
          print 'PGR'                (16,28) bold
          print 'Tg/KV'              (15,35) bold
          print 'Tg/RV'              (16,35) bold
          print 'Tg/AV'              (15,42) bold
          print 'Tg/PV'              (16,42) bold
          print 'Ges.-Brutto'        (15,49) bold
          print 'Melde-SV'           (16,49) bold
          print 'KV-Brutto'          (15,63) bold
          print 'RV-Brutto'          (16,63) bold
          print 'AV-Brutto'          (15,77) bold
          print 'PV-Brutto'          (16,77) bold
          print 'KV/AG'              (15,91) bold
          print 'KV/AN'              (16,91) bold
          print 'RV/AG'              (15,105) bold
          print 'RV/AN'              (16,105) bold
          print 'AV/AG'              (15,119) bold
          print 'AV/AN'              (16,119) bold
          print 'PV/AG'              (15,133) bold
          print 'PV/AN'              (16,133) bold
          print 'AG-Zusch. KV'       (15,147) bold
          print 'AG-Zusch. PV'       (16,147) bold
          print 'TTSC'               (15,161) bold
          print 'Wochen-AZ'          (16,161) bold
          print 'Rechtskreis'        (15,173) bold
          ! wdu jw2005
          print 'Kinder f. PV /'     (16,173) bold
          ! wdu06-881b11 show Glidezone status from setup page
          print 'Gleitz.Kennz.'      (17,173) bold
          break
  when = '2'
          print 'Steuer(allgemeine Daten)'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (15,1,184) box 2 1 12
          graphic (14,23,3) vert-line 1
          graphic (14,41,3) vert-line 1
          graphic (14,59,3) vert-line 1
          graphic (14,77,3) vert-line 1
          graphic (14,95,3) vert-line 1
          graphic (14,113,3) vert-line 1
          graphic (14,131,3) vert-line 1
          graphic (14,149,3) vert-line 1
          graphic (14,167,3) vert-line 1
          graphic (17,1,184) box 1 1
          print 'Datum'  (15,7)  bold
          print 'Steuer-'          (15,24) bold
          print 'klasse'           (16,24) bold
          print 'Steuer-'         (15,42) bold
          print 'tabelle'           (16,42) bold
          print 'Kinder-'          (15,60) bold
          print 'freibetrag'          (16,60) bold
          print 'Steuer-'          (15,78) bold
          print 'status'       (16,78) bold
          print 'Konfession AN /'          (15,96) bold
          print 'Konfession Eheg.'           (16,96) bold
          print 'Freibetrag'    (15,114) bold
          print 'Monat'          (16,114) bold
          print 'Freibetrag'       (15,132) bold
          print 'Jahr'            (16,132) bold
          print 'Hinzurechnungs-'  (15,150) bold
          print 'betrag Monat'     (16,150) bold
          print 'Hinzurechnungs-'   (15,168) bold
          print 'betrag Jahr'      (16,168) bold


!          print 'Versorgungsbezug'  (+1,7)  bold       ! falsch

          ! data tax
          print $T1ST.PRD_END_DT (+1,7)
          print $Steuerklasse (,24)
          print  $SteuerTabelle (,42)
          print $KinderFrBetr (,60)
          print $Steuerstatus (,78)
          let $Relig = $Religion_AN || ' / ' || $Religion_Eheg
          print $Relig (17,96)
          print $FreibetrMon (,114)
          print $FreibetrJah (,132)
          print $HinzurechMon (,150)
          print $HinzurechJah (,168)
          break
  when = '3'
          print 'Brutto-Netto-Werte:'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (15,1,184) box 2 1 12
          graphic (14,23,2)  vert-line 1
          graphic (14,41,2)  vert-line 1
          graphic (14,65,2)  vert-line 1
          graphic (14,89,2)  vert-line 1
          graphic (14,113,2) vert-line 1
          graphic (14,137,2) vert-line 1
          graphic (14,161,2) vert-line 1
          print 'Monat'           (15,2)    bold
          print 'Korrektur'       (15,24)   bold
          print 'aus Monat'       (16,24)   bold
          print 'Gesamt-Brutto'   (15,42)   bold
          print 'Gesetzliche'     (15,66)   bold
          print 'Abzüge'          (16,66)   bold
          print 'Nettoverdienst'  (15,90)   bold
          print 'Sonstige'        (15,114)  bold
          print 'Be-/Abzüge'      (16,114)  bold
          print 'Auszahlung'      (15,138)  bold
          print 'Beiträge'        (15,162)  bold
          print 'Arb.kammer'      (16,162)  bold
          break
  when = '4'
          print 'Pauschalversteuerung/Zukunftssicherung:'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (15,1,184) box 2 1 12
          graphic (14,23,2)  vert-line 1
          graphic (14,41,2)  vert-line 1
          graphic (14,65,2)  vert-line 1
          graphic (14,89,2)  vert-line 1
          graphic (14,113,2) vert-line 1
          graphic (14,137,2) vert-line 1
          graphic (14,161,2) vert-line 1
          print 'Monat'           (15,2)    bold
          print 'Korrektur'       (15,24)   bold
          print 'aus Monat'       (16,24)   bold
          print 'Zukunfts-'       (15,42)   bold
          print 'Sicherung'       (16,42)   bold
          print 'Fahrgeld'        (15,66)   bold
          print 'Sonst. pauschal' (15,90)   bold
          print 'Verst. Bezüge'   (16,90)  bold
          print 'Pauschale'       (15,114)  bold
          print 'Lohnsteuer'      (16,114)  bold
          print 'Pauschale'       (15,138)  bold
          print 'Kirchensteuer'   (16,138)  bold
          print 'Pauschaler'      (15,162)  bold
          print 'SolZ'            (16,162)  bold
          break
  when = '6'
          print 'Altersteilzeit:'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          let $BegATZ = 'Beginn der Altersteilzeit: ' || $BegATZDate
          print $BegATZ (14,40) bold
          graphic (15,1,184) box 1 1
          graphic (16,1,184) box 2 1 12
          graphic (15,14,2)   vert-line 1
          graphic (15,29,2)  vert-line 1
          graphic (15,41,2)  vert-line 1
          graphic (15,53,2)  vert-line 1
          graphic (15,65,2)  vert-line 1
          graphic (15,77,2)  vert-line 1
          graphic (15,89,2)  vert-line 1
          graphic (15,101,2)  vert-line 1
          graphic (15,113,2) vert-line 1
          graphic (15,125,2) vert-line 1
          graphic (14,137,3) vert-line 1
          graphic (15,149,2) vert-line 1
          graphic (15,161,2) vert-line 1
          graphic (15,173,2) vert-line 1
          ! wdu05-881b8   AZ-Labels depend on AZ Begin Date, created a variable to identify the new AZ
          if  ( $AZ2004 = 'Y' )
              !new AZ  model does not print a number of items
              print 'Gesetzlich'  (15,60) bold
              print 'Freiwillig'  (15,150) bold
              print 'Monat/'      (16,2)  bold
              print 'Seg.-Ende'   (17,2)  bold
              print 'Korrektur'   (16,15) bold
              print 'aus Monat'   (17,15) bold
              !print 'VZ-Brutto'   (16,30) bold
              !print 'RV lfd.'     (17,30) bold
              print 'RAE'         (16,42) bold
              !print 'RV lfd.'     (17,42) bold
              print 'ZBE'   (16,54) bold
              !print 'B. lfd.'     (17,54) bold
              !print 'VZ-Brutto'   (16,66) bold
              !print 'RV EGA'      (17,66) bold
              !print 'TZ-Brutto'   (16,78) bold
              !print 'RV EGA'      (17,78) bold
              !print 'Untersch.'   (16,90) bold
              !print 'B. EGA'      (17,90) bold
              !print 'Untersch.B.' (16,102) bold
              !print 'EGA-VJ'      (17,102) bold
              print 'Aufstockg'   (16,114) bold
              print '20%'         (17,114) bold
              !print 'Aufstockg'   (16,126) bold
              !print 'Mind.netto'  (17,126) bold
              print 'ZBE'  (16,138) bold
              !print 'lfd.'        (17,138) bold
              !print 'Untersch.B'  (16,150) bold
              !print 'EGA'         (17,150) bold
              print 'Aufstockg'   (16,162) bold
              print 'Brutto'      (17,162) bold
              !print 'Untersch.B'  (16,174) bold
              !print 'EGA-VJ'      (17,174) bold
          else
              !old AZ  model
              print 'Gesetzlich'  (15,60) bold
              print 'Freiwillig'  (15,150) bold
              print 'Monat/'      (16,2)  bold
              print 'Seg.-Ende'   (17,2)  bold
              print 'Korrektur'   (16,15) bold
              print 'aus Monat'   (17,15) bold
              print 'VZ-Brutto'   (16,30) bold
              print 'RV lfd.'     (17,30) bold
              print 'TZ-Brutto'   (16,42) bold
              print 'RV lfd.'     (17,42) bold
              print 'Untersch.'   (16,54) bold
              print 'B. lfd.'     (17,54) bold
              print 'VZ-Brutto'   (16,66) bold
              print 'RV EGA'      (17,66) bold
              print 'TZ-Brutto'   (16,78) bold
              print 'RV EGA'      (17,78) bold
              print 'Untersch.'   (16,90) bold
              print 'B. EGA'      (17,90) bold
              print 'Untersch.B.' (16,102) bold
              print 'EGA-VJ'      (17,102) bold
              print 'Aufstockg'   (16,114) bold
              print '20%'         (17,114) bold
              print 'Aufstockg'   (16,126) bold
              print 'Mind.netto'  (17,126) bold
              print 'Untersch.B'  (16,138) bold
              print 'lfd.'        (17,138) bold
              print 'Untersch.B'  (16,150) bold
              print 'EGA'         (17,150) bold
              print 'Aufstockg'   (16,162) bold
              print 'Brutto'      (17,162) bold
              print 'Untersch.B'  (16,174) bold
              print 'EGA-VJ'      (17,174) bold
          end-if
          break
  when = '7'
          if $MinPrdEndDate = ''
           else
                do ConvertToComponents($MinPrdEndDate,$yy1b,$mm1b,$dd1b)
           end-if
          let #Date_Type1 = {DateType}
          evaluate #Date_Type1
          when = 2
               let $StringDate = $yy1b || '{PTDateDelim}' || $mm1b
               break
          when-other
               let $StringDate = $mm1b || '{PTDateDelim}' || $yy1b
               break
          end-evaluate
          print 'Flexible Arbeitszeit:'    (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (15,1,60) box 1 1
!          graphic (16,1,60) box 1 1
          print 'Beginn der Wertguthabenbildung:'  (15,2)  bold
          print $StringDate                       (15,50)
! adj08-890b14:Flexible worktime begin date
          !print 'Eintritt der Erwerbsminderung:'  (16,2)  bold
      !print $BeginErwerbsmind1                (16,50)
          break
  when = '8'
          print 'Übernommenes Wertguthaben von Dritten:'     (14,1) bold
          alter-printer
            font= 4
            point-size =13
          graphic (16,1,80) box 1 1
          graphic (15,40,1) vert-line 1
          print 'West:'  (16,2)  bold
          print 'Ost:'  (16,41)  bold
          do Format-Number(#FLA.GPDE_FL_RP_W002E0,$FLA.GPDE_FL_RP_W002E0,'B9,999,999.99')
          do Format-Number(#FLA.GPDE_FL_RP_W001E0,$FLA.GPDE_FL_RP_W001E0,'B9,999,999.99')
          print $FLA.GPDE_FL_RP_W002E0  (16,10)
          print $FLA.GPDE_FL_RP_W001E0  (16,50)
          break
!adj08-890b14- print for Par23c
  when = '9'
       print '§ 23c SGB IV'    (14,1) bold
       alter-printer
       font= 4
       point-size =13
       graphic (15,1,183) box 2 1 12
       graphic (14,23,2)  vert-line 1
       graphic (14,50,2)  vert-line 1
       graphic (14,89,2) vert-line 1
       graphic (14,125,2) vert-line 1
       graphic (14,150,2) vert-line 1
       graphic (14,184,2) vert-line 1
       print 'Monat/Seg.-Ende'             (15,2)    bold
       print 'Korrektur aus Monat '              (15,24)   bold
       print 'Nettosozialleistung / Krankentagegeld' (15,51)   bold
       print 'Vergleichs-Nettoarbeitsentgelt'        (15,90)   bold
       print 'SV-Freibetrag'                   (15,126)   bold
       print 'Entgelt während Sozialleistung'  (15,151)   bold
       break

  when = '10'
       print 'Umlage'    (14,1) bold
       alter-printer
       font= 4
       point-size =13
       graphic (15,1,183) box 3 1 12
       graphic (14,23,3)  vert-line 1
       graphic (14,44,3)  vert-line 1
       graphic (14,70,3) vert-line 1
       graphic (14,93,3) vert-line 1
       graphic (14,115,3) vert-line 1
       graphic (14,141,3) vert-line 1
       graphic (14,166,3) vert-line 1
       print 'Monat/Seg.-Ende'                  (15,2)    bold
       print 'Korrektur aus Monat '             (15,24)   bold

       print 'Umlagepflichtiges '               (15,49)   bold
       print '  Arbeitsentgelt'                   (16,49)   bold

       print 'Umlagebeitrag'                    (15,75)   bold
       print '         U1'                       (16,75)   bold
       print 'Umlagebeitrag'                    (15,98)  bold
       print '         U2'                       (16,98)   bold

       print 'Insolvenzgeldumlage-'             (15,119)   bold
       print '        pflichtiges'                  (16,119)   bold
       print '  Arbeitsentgelt lfd.'              (17,119)   bold

       print 'Insolvenzgeldumlage-'             (15,144)   bold
       print '        pflichtiges'                  (16,144)   bold
       print '  Arbeitsentgelt EGA'               (17,144)   bold

       print 'Insolvenzgeld-'                   (15,169)   bold
       print '     beitrag'                      (16,169)   bold

       break
  when = '11'
       print 'Berufsständische Versorgungseinrichtungen:'  (14,1) bold
       alter-printer
       font= 4
       point-size =13
       graphic (15,1,184) box 3 1 12
       graphic (14,9,3) vert-line 1
       graphic (14,22,3) vert-line 1
       graphic (14,41,3) vert-line 1
       graphic (14,49,3) vert-line 1
       graphic (14,59,3) vert-line 1
       graphic (14,68,3) vert-line 1
       graphic (14,98,3) vert-line 1
       graphic (14,128,3) vert-line 1
       graphic (14,158,3) vert-line 1

       print 'Monat/'  (15,2)  bold
       print 'Seg.-'   (16,2)  bold
       print 'Ende'    (17,2)  bold
       print 'Korr.'   (15,10) bold
       print 'aus'     (16,10) bold
       print 'Monat'   (17,10) bold

       print 'Versorgungs-'       (15,25) bold
       print 'werk'               (16,25) bold
       print 'BGR'                (15,43) bold
       print 'PGR'                (16,43) bold
       print 'Tg/BV'              (15,51)  bold

       print 'Selbst-'            (15,60)  bold
       print 'zahler'             (16,60)  bold
       print 'Ges.-Brutto'        (15,78)  bold
       print 'lfd. Bezug'         (16,78)  bold
       print 'Ges. Brutto'        (15,108)  bold
       print '   EGA'             (16,108)  bold
       print 'Gesamtbeitrag BV'   (15,135)  bold
       print 'AG-Zuschuss BV'     (15,164)  bold

when = '12'
       print 'Meldungen Unfallversicherung:'  (14,1) bold
       alter-printer
       font= 4
       point-size =13
       graphic (15,1,183) box 3 1 12
       graphic (14,16,3)  vert-line 1
       graphic (14,32,3)  vert-line 1
       graphic (14,48,3)  vert-line 1 !gda
       graphic (14,60,3) vert-line 1
       graphic (14,87,3) vert-line 1
       graphic (14,114,3) vert-line 1
       graphic (14,130,3) vert-line 1
       graphic (14,157,3) vert-line 1

       print 'Erstellt am'            (15,3)    bold
       print 'Beginn '                (15,21)   bold
       print 'Ende '                  (15,38)   bold
       
       print 'GDA '                   (15,52)   bold

       print 'Unfallversicherungs-'   (15,65)   bold
       print '         träger'        (16,65)   bold
       print 'Mitgliedsnummer'        (15,93)  bold
       print 'Gefahren-'              (15,118)   bold
       print ' klasse'                (16,118)   bold

       print 'Unfallversicherungs-'   (15,134)   bold
       print '        brutto'         (16,134)   bold
       print 'Arbeits-'               (15,165)   bold
       print 'stunden'                (16,165)   bold

  when-other
          break
  end-evaluate
end-heading
!**********************************************************************************
begin-heading  4 for-reports = (report3)
  print 'PeopleSoft'      (1,40)
  print 'Seite: ' (0,70)
  page-number   (0,75)
  print 'Datum: '       (+1,70)
  print $ReportDate       (,75)
  print 'Zeit: '       (+1,70)
  print $ReportTime       (,75)
   alter-printer
       font= 4
       point-size =18
   let $HD_Tit = 'Jahreslohnkonto ' || $Ctl_Year
   print $HD_Tit (3,10)
end-heading
!**********************************************************************************
begin-procedure CheckMinusNull_S1_A
   if rtrim(ltrim($Ges_Brutto, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Ges_Brutto, ' '), ' ') = $PlusNull
      let $Ges_Brutto = ' '
   end-if
   if rtrim(ltrim($Steuer_Brutto, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Steuer_Brutto, ' '), ' ') = $PlusNull
      let $Steuer_Brutto = ' '
   end-if
   if rtrim(ltrim($Lfd_Bez, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lfd_Bez, ' '), ' ') = $PlusNull
      let $Lfd_Bez = ' '
   end-if
   if rtrim(ltrim($Sonst_Bez, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Sonst_Bez, ' '), ' ') = $PlusNull
      let $Sonst_Bez = ' '
   end-if
   if rtrim(ltrim($Vers_Bez, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Vers_Bez, ' '), ' ') = $PlusNull
      let $Sonst_Bez = ' '
   end-if
   if rtrim(ltrim($Mehrj_Bez, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Mehrj_Bez, ' '), ' ') = $PlusNull
      let $Sonst_Bez = ' '
   end-if
   if rtrim(ltrim($Mehrj_Vers_Bez, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Mehrj_Vers_Bez, ' '), ' ') = $PlusNull
      let $Mehrj_Vers_Bez = ' '
   end-if
   if rtrim(ltrim($Lohn_Steuer, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lohn_Steuer, ' '), ' ') = $PlusNull
      let $Lohn_Steuer = ' '
   end-if
   if rtrim(ltrim($Lohn_SteuerMJ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lohn_SteuerMJ, ' '), ' ') = $PlusNull
      let $Lohn_SteuerMJ = ' '
   end-if
   if rtrim(ltrim($KirchenSteuer, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KirchenSteuer, ' '), ' ') = $PlusNull
      let $KirchenSteuer = ' '
   end-if
   if rtrim(ltrim($KirchenSteuerMJ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KirchenSteuerMJ, ' '), ' ') = $PlusNull
      let $KirchenSteuerMJ = ' '
   end-if
   if rtrim(ltrim($SolidZuschl, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SolidZuschl, ' '), ' ') = $PlusNull
      let $SolidZuschl = ' '
   end-if
   if rtrim(ltrim($SolidZuschlMJ, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SolidZuschlMJ, ' '), ' ') = $PlusNull
      let $SolidZuschlMJ = ' '
   end-if
   if rtrim(ltrim($SteuerFreiePens, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SteuerFreiePens, ' '), ' ') = $PlusNull
      let $SteuerFreiePens = ' '
   end-if
end-procedure
!**********************************************************************************
begin-procedure CheckMinusNull_S1_B
   if rtrim(ltrim($Ges_Brutto_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Ges_Brutto_sum, ' '), ' ') = $PlusNull
      let $Ges_Brutto_sum = ' '
   end-if
   if rtrim(ltrim($Steuer_Brutto_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Steuer_Brutto_sum, ' '), ' ') = $PlusNull
      let $Steuer_Brutto_sum = ' '
   end-if
   if rtrim(ltrim($Lfd_Bez_Sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lfd_Bez_Sum, ' '), ' ') = $PlusNull
      let $Lfd_Bez_Sum = ' '
   end-if
   if rtrim(ltrim($Sonst_Bez_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Sonst_Bez_sum, ' '), ' ') = $PlusNull
      let $Sonst_Bez_sum = ' '
   end-if
   if rtrim(ltrim($Vers_Bez_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Vers_Bez_sum, ' '), ' ') = $PlusNull
      let $Sonst_Bez_sum = ' '
   end-if
   if rtrim(ltrim($Mehrj_Bez_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Mehrj_Bez_sum, ' '), ' ') = $PlusNull
      let $Sonst_Bez_sum = ' '
   end-if
   if rtrim(ltrim($Mehrj_Vers_Bez_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Mehrj_Vers_Bez_sum, ' '), ' ') = $PlusNull
      let $Mehrj_Vers_Bez_sum = ' '
   end-if
   if rtrim(ltrim($Lohn_Steuer_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lohn_Steuer_sum, ' '), ' ') = $PlusNull
      let $Lohn_Steuer_sum = ' '
   end-if
   if rtrim(ltrim($Lohn_SteuerMJ_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($Lohn_SteuerMJ_sum, ' '), ' ') = $PlusNull
      let $Lohn_SteuerMJ_sum = ' '
   end-if
   if rtrim(ltrim($KirchenSteuer_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KirchenSteuer_sum, ' '), ' ') = $PlusNull
      let $KirchenSteuer_sum = ' '
   end-if
   if rtrim(ltrim($KirchenSteuerMJ_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($KirchenSteuerMJ_sum, ' '), ' ') = $PlusNull
      let $KirchenSteuerMJ_sum = ' '
   end-if
   if rtrim(ltrim($SolidZuschl_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SolidZuschl_sum, ' '), ' ') = $PlusNull
      let $SolidZuschl_sum = ' '
   end-if
   if rtrim(ltrim($SolidZuschlMJ_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SolidZuschlMJ_sum, ' '), ' ') = $PlusNull
      let $SolidZuschlMJ_sum = ' '
   end-if
   if rtrim(ltrim($SteuerFreiePens_sum, ' '), ' ') = $MinusNull or
      rtrim(ltrim($SteuerFreiePens_sum, ' '), ' ') = $PlusNull
      let $SteuerFreiePens_sum = ' '
   end-if
end-procedure




! *****************************************************************
!
!  CX = Code extraction
!
!  these procedures were extracted from the original locations for
!  a better overview
! *****************************************************************

begin-procedure CX_StandardHeaderBox
!
!  Print a standard Header Box for the Report GPDETX03
!
! -- display 'CX_StandardHeaderBox Seitennr'
! -- display $SeitenNr

  let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' ' || $sav_CurrencyA
  do Get_Job_Position
  let $HD_Title1 = 'Jahreslohnkonto ' || $Ctl_Year
  let $HD_Title1K = ' '
        let $HD_Title1K = 'Korrekturen Vorjahre'
  let $HD_Title2 = 'Jahreslohnkonto ' || $Ctl_Year
   if $march = 'Y'
       alter-printer
       font= 4
       point-size =28
       print $HD_Title1              (1,1) bold
       graphic (3,1,184) horz-line 10
       if $SeitenNr <> '5'
       alter-printer
       font= 4
       point-size =20
       do ConvertToComponents(&PTC.PRD_END_DT,$yyP,$mmP,$ddP)
       if $Ctl_Year < $yyP
          let $HD_Title1K = 'Märzklausel'
       else
          if $Employee_Old <> rtrim($Emplid,' ')
             do Insert_Employee
             let $Employee_Old = rtrim($Emplid,' ')
          end-if
       end-if
       print $HD_Title1K            (5,1) bold
       end-if
    else
       alter-printer
       font= 4
       point-size =28
       print $HD_Title1        (1,1) bold
       graphic (3,1,184) horz-line 10
    end-if

    !(horizontal line was printed)
    !
    !
  alter-printer
     font= 4
     point-size =13
  print 'Seite :'               (1,132)
  print '['                     (1,140)
  if #page-count < 10
     print #page-count          (0,0) edit 9
  else
     print #page-count          (0,0) edit 99
  end-if
  print ']'                     (0,0)
  do Format-DateTime($AsOfToday, $hdr_abr_header_date, {DEFDATE}, '', '')
  print 'Datum :'               (2,132)
  print $hdr_abr_header_date    (2,140)
  !
  ! Version number
  let $Bemerk = $Bezeichn || ' ' || $VersionsNr
  print $Bemerk (3,132)

  ! Employer address-data
  !
  let $HD_Firma = $hdr_abr_Payentity_name
  let $HD_Strasse = $hdr_abr_Payentity_street
  let $HD_Ort = $hdr_abr_Payentity_zip_city
  let $HD_BetrNr =  $GPDE_DO_BTNR
  !
  ! employer address line below headline
  !
  let $temp_str = rtrim($HD_Firma,' ') || ',  ' ||rtrim($HD_Strasse,' ') || ',  ' ||rtrim($HD_Ort,' ')
  ! print bigger
  alter-printer
     font= 4
     point-size =16
  print $temp_str          (3,1) bold
  !switch back font
  alter-printer
     font= 4
     point-size =13


  ! (old) string init from BN
  let $HD_KrankenKasse = 'Krankenkasse : ' ||
      ltrim(rtrim($hdr_abr_si_provider, ' '),' ')  ||
      ' ' || ltrim(rtrim($hdr_abr_kk_name, ' '),' ')
  let $HD_KK_BetrNr = 'Kassenbetriebsnummer : ' || $hdr_abr_kk_nummer
  let $HD_BeirtKonto = 'Beitrags-Konto : ' || rtrim(ltrim($hdr_abr_beitragskonto,' '),' ')
  let $HD_Zahlstelle = 'Zahlstelle : ' || rtrim(ltrim($hdr_abr_zahlstellen_nr,' '),' ')
  !
  !
  ! Box 1:  employee address-data
  !
  print 'Pers.-Nr./Rec.-Nr'      (7,2)
  print 'Name:'                  (8,2)
  print 'Vorname:'               (9,2)
  print 'Vorsatz/Zusatz/Titel:'  (10,2)
  print 'Strasse:'               (11,2)
  print 'PLZ/Ort:'               (12,2)

  do Format-Number(#Empl_Rcd_Nbr,$EmplRcd,'8888')
  let $EmplidT = rtrim($Emplid,' ') || ' / ' || $EmplRcd

  let $PLZ_Ort = $Postal || cond(rtrim($Postal,' ') <> '', ' ', '') || $City
  if rtrim($Address,' ') = ''
     let $Address = $Address2
  end-if

  let $VorsZusTit = rtrim($NAME_ROYAL_PREFIX,' ') || cond(rtrim($NAME_ROYAL_PREFIX,' ') <> '', ' ', '') ||
          $NAME_ROYAL_SUFFIX || cond(rtrim($NAME_ROYAL_SUFFIX,' ') <> '', ' ', '') || $NAME_TITLE
  graphic (7,1,184) box 6 1
  graphic (6,44,6) vert-line 1
  print $EmplidT       (7,20)
! -  print $EmplRcd       (7,+1)
  print $LastName      (8,20)
  print $FirstName     (9,20)
  print $VorsZusTit    (10,20)
  print $Address       (11,20)
  print $PLZ_Ort       (12,20)


  !
  !
  ! Box 2:  employee detail-data
  !
  print 'Geburtsdatum:'          (7,45)
  print 'Geburtsname:'           (8,45)
  print 'Staatsangehörigkeit:'   (9,45)
  print 'Familienstand:'         (10,45)
  print 'Vers.-Nummer:'          (11,45)
  print 'Tätigkeit:'             (12,45)

  do format-datetime(&T1.BIRTHDATE,$T1.BIRTHDATE,{DEFDATE},'','')
  print $T1.BIRTHDATE    (7,63)
  print $LastName_mdn    (8,63)
  print $NATIONALITY     (9,63)
  print $T12             (10,63)
  print &RVNR            (11,63)
  print $JobPosition     (12,63)

  !
  !
  ! Box 3:
  !
  ! wdu05-881b8  left side of Heading-Box3 needs to be shifted right 1cm (8char) for a longer JobPosition
  ! original: graphic (6,85,6) vert-line 1      column for labels was 86, col for data was 100
  ! wdu05-881b9  shortened AGS description and moved value-prints left 2 positions
  graphic (6,93,6) vert-line 1
  print 'Finanzamt:'           (7,94)
  print 'AGS:'                 (8,94)
  print 'Eintritt:'            (9,94)
  print 'Austritt:'            (10,94)
  print 'Beginn ATZ:'          (11,94)
  print 'Ende ATZ:'            (12,94)

     let $temp_str =  rtrim(&FINANCE_CD,' ') || '-' ||  rtrim($FinanceDescr,' ')
  print $temp_str               (7,106)
     let $temp_str =  rtrim(&AGS_ID,' ') || '-' ||  rtrim(&HOME_CD,' ')
  print $temp_str               (8,106)
  !wdu 04b4: rearranged hire+ter+az dates
  print $HDG_HIR_DT             (9,106)
  print $HDG_TER_DT             (10,106)
  print $AZ_BGN_DT              (11,106)
  print $AZ_END_DT              (12,106)

  !
  !
  ! Box 4: Employer information
  !
  ! wdu05-881b8  added TariffGroup for header
  graphic (6,141,6) vert-line 1
  print 'Betriebsnummer:'       (7,142)
  print 'Abteilung:'            (8,142)
  print 'Tarifgruppe:'          (9,142)
  print 'DEÜV-Status:'          (10,142)
  print ' '                     (11,142)
  print ' '                     (12,142)

  print $HD_BetrNr              (7,158)
  print $DeptDescr              (8,158)
  print $TariffGroup            (9,158)
  print $BAEGV_Status           (10,158)
  print ' '                     (11,158)
  print ' '                     (12,158)

end-procedure








! ***********************************************************************
!
! get data for employee status page (and print)
!
!
Begin-Procedure Pay-Account-Page1
!
! wdu-05b6: need to load data for Vortrag here, because it will be printed
! during the following SELECT and needs to be fetched only once.
    do Get_Vortrag_Data

    do Format-Number(#Steuer_Brutto_3,$Steuer_Brutto_3,'B9,999,999.99')
    do Format-Number(#Vers_Bez_8,$Vers_Bez_8,'B9,999,999.99')
    do Format-Number(#Mehrj_Bez_10,$Mehrj_Bez_10,'B9,999,999.99')
    do Format-Number(#Mehrj_Vers_Bez_9,$Mehrj_Vers_Bez_9,'B9,999,999.99')
    do Format-Number(#Lohn_Steuer_4,$Lohn_Steuer_4,'B9,999,999.99')
    do Format-Number(#KirchenSteuer_6_7,$KirchenSteuer_6_7,'B9,999,999.99')
    do Format-Number(#SolidZuschl_5,$SolidZuschl_5,'B9,999,999.99')
    do Format-Number(#AnzahlU_2,$AnzahlU_2,'B99,999.99')
    do Format-Number(#VortragKug,$VortragKug,'B9,999,999.99')
    do Format-Number(#VortragDba,$VortragDba,'B9,999,999.99')
    do Format-Number(#VortragAte,$VortragAte,'B9,999,999.99')

! -- display 'beginsel: Pay-Account-Page1'

Begin-Select
T1A.EMPLID
T1A.PRD_END_DT               &XT1_Page1_CPAY_ENDDT
!   wd 20040513 removed: MAX(T1A.GPDE_AL_CPAY_ENDDT)
!   now we just select the MAX and remove the GROUP BY
T1A.GPDE_TX_SPCL_EXMPT       &XT1
        let $FieldName = 'GPDE_TX_SPCL_EXMPT'
        let $FieldValue = &XT1
        do Read-Translate-Table
        let $T1 = substr($XlatShortName,1,12)

T1A.GPDE_TX_INC_TX_CLS       &XT2
        let $FieldName = 'GPDE_TX_INC_TX_CLS'
        let $FieldValue = &XT2
        do Read-Translate-Table
        let $T2 = substr($XlatShortName,1,12)

T1A.GPDE_TX_SCHEDULE         &XT3
T1A.GPDE_TX_EXEMPT_ANN       &XT4
        do Format-Number (&XT4, $T4, '9,999,999.99mi')
        let $T4     = ltrim($T4,' ')
T1A.GPDE_TX_EXEMPT_MON       &XT5
        do Format-Number (&XT5, $T5, '9,999,999.99mi')
        let $T5     = ltrim($T5,' ')
T1A.GPDE_TX_RELIGION         &XT6
        let $FieldName = 'GPDE_TX_RELIGION'
        let $FieldValue = &XT6
        do Read-Translate-Table
        let $T6 = substr($XlatShortName,1,12)

T1A.GPDE_TX_SPOUSE_REL       &XT7
        let $FieldName = 'GPDE_TX_SPOUSE_REL'
        let $FieldValue = &XT7
        do Read-Translate-Table
        let $T7 = substr($XlatShortName,1,12)

T1A.GPDE_TX_CHRCHSTATE       &XT8
        let $FieldName = 'GPDE_TX_CHRCHSTATE'
        let $FieldValue = &XT8
        do Read-Translate-Table
        let $T8 = substr($XlatShortName,1,12)

T1A.GPDE_TX_RECALC_OVD       &XT9
T1A.GPDE_TX_METHOD_OVD       &XT10
T1A.GPDE_TX_CHRCH_OVRD       &XT11

T1A.MAR_STATUS               &XT12
        let $FieldName = 'MAR_STATUS'
        let $FieldValue = &XT12
        do Read-Translate-Table
        let $T12 = substr($XlatShortName,1,12)
!wdu04b4: added FTE to emplid page
T1A.FTE                      &XT12_A
        let #t12a_FTE = &XT12_A
        do Format-Number(#t12a_FTE,$t12a_FTE,'B9.9999')
        let $t12a_FTE = ltrim($t12a_FTE,' ')
SI1A.GPDE_DV_SV_CODE          &XT13
SI1A.GPDE_SI_PROV_MAND        &XT14
SI1A.GPDE_SI_PROV_PV          &XT15
SI1A.BA_CD                    &XT16

SI1A.GPDE_SI_POS_IN_JOB       &XT17
!no XLAT wanted
!        let $FieldName = 'GPDE_SI_POS_IN_JOB'
!        let $FieldValue = &XT17
!        do Read-Translate-Table
!        let $T17 = substr($XlatShortName,1,12)

SI1A.GPDE_SI_EDUCATION        &XT18
!no XLAT wanted
!        let $FieldName = 'GPDE_SI_EDUCATION'
!        let $FieldValue = &XT18
!        do Read-Translate-Table
!        let $T18 = substr($XlatShortName,1,12)

SI1A.GPDE_BA_SCHL_DGR         &BASCHL
SI1A.GPDE_BA_PRF_DGR          &BAPRF
SI1A.GPDE_BA_EMPL_TMP         &BAEMTMP
SI1A.GPDE_BA_CNTRCT_WRK       &BACNTRCT
SI1A.GPDE_SI_PENS_APPLI       &XT19
        let $FieldName = 'GPDE_SI_PENS_APPLI'
        let $FieldValue = &XT19
        do Read-Translate-Table
        let $T19 = substr($XlatShortName,1,12)

SI1A.GPDE_SI_EMPL_MULT        &XT20
        let $FieldName = 'GPDE_SI_EMPL_MULT'
        let $FieldValue = &XT20
        do Read-Translate-Table
        let $T20 = substr($XlatShortName,1,12)

SI1A.GPDE_SI_PV_CHILD        &XT20C
        let $T20C = &XT20C
        let $T20C = rtrim($T20C,' ')
        if $T20C = 'Y'
            let $T20C = 'J'
        end-if

T1A.GPDE_TX_PAY_EFFDT        &XT21
   !do Format-DateTime(&XT21, $T21, {DEFDATE},'','')
   do ConvertToComponents(&XT21,$yy,$mm,$dd)
   let #temp_int = length($yy)
   if #temp_int > 2
        let $yy = substr($yy,#temp_int - 1,2)
   end-if
   let $T21 = $dd || '.' || $mm || '.' || $yy

T1A.GPDE_TX_NUM_CHILD        &XT22
   do Format-Number (&XT22, $T22, 'B999.9')
   let $T22    = ltrim($T22,' ')


T1A.GPDE_TX_HOME_CD         &T1A_HOME_CD
T1A.GPDE_AL_FINANCE_CD      &T1A_FINANCE_CD
SI1A.GPDE_DV_RVNR            &T1A_RVNR
SI1A.GPDE_SI_EMPL_TYPE       &T1A_EMPL_TYPE
T1A.NATIONALITY             &T1A_NATIONALITY
T1A.NATIONALITY_CD          &T1A_NATIONALITY_CD
SI1A.GPDE_SI_CARD_PRES       &T1A_CARD_PRES
   do Format-DateTime(&T1A_CARD_PRES, $CARD_PRES, {DEFDATE},'','')

T1A.GPDE_TX_ADDGRS_ANN       &XT23
        do Format-Number (&XT23, $T23, '9,999,999.99mi')
        let $T23     = ltrim($T23,' ')
T1A.GPDE_TX_ADDGRS_MON       &XT24
        do Format-Number (&XT24, $T24, '9,999,999.99mi')
        let $T24     = ltrim($T24,' ')

T1A.HIRE_DT        &XT25
   if rtrim(&XT25,' ') <> ''
      do ConvertToComponents(&XT25,$yy,$mm,$dd)
      let #temp_int = length($yy)
      if #temp_int > 2
        let $yy = substr($yy,#temp_int - 1,2)
      end-if
      let $T25 = $dd || '.' || $mm || '.' || $yy
   else
         let $T25 =' '
   end-if

T1A.TERMINATION_DT        &XT26
   ! the last day of employment is required, not the EFFDT
   if rtrim(&XT26,' ') <> ''
      !subtract a day to get last day of employment
      do Convert-to-DTU-Date(&XT26,$DTU-TermEffdDt)
      do dtu-subtract-days($DTU-TermEffdDt,1,$DTU-TermEndDt)
      do Convert-from-DTU-Date($DTU-TermEndDt,$TermEndDt)
      !
      ! format for printing in short format
      do ConvertToComponents($TermEndDt,$yy,$mm,$dd)
      let #temp_int = length($yy)
      if #temp_int > 2
         let $yy = substr($yy,#temp_int - 1,2)
      end-if
      let $T26 = $dd || '.' || $mm || '.' || $yy
   else
      let $T26 =' '
   end-if

T1A.DEPTID                 &XT27_DEPTID
T1A.GPDE_TX_NOPRV_EMPL     &NOPRV_EMPL
SI1A.GPDE_SIP_REGION       &SIP_REGION
        ! manual xlat
        if &SIP_REGION = '1'
           let $SIP_REGION = 'Ost'
        else
           let $SIP_REGION = 'West'
        end-if
        !
!wdu jw2005 company pensions
T1A.GPDE_TX_VBEZM
T1A.GPDE_TX_VBEZS
T1A.GPDE_TX_VBEZB
T1A.GPDE_TX_VBEZ_DT
T1A.GPDE_TX_ZMVB
  ! values for the header
  let #T1A.GPDE_TX_VBEZM = &T1A.GPDE_TX_VBEZM
  do Format-Number(#T1A.GPDE_TX_VBEZM,$T1A.GPDE_TX_VBEZM,'B99,999.99')
  let #T1A.GPDE_TX_VBEZS = &T1A.GPDE_TX_VBEZS
  do Format-Number(#T1A.GPDE_TX_VBEZS,$T1A.GPDE_TX_VBEZS,'B99,999.99')
  let #T1A.GPDE_TX_VBEZB = &T1A.GPDE_TX_VBEZB
  do Format-Number(#T1A.GPDE_TX_VBEZB,$T1A.GPDE_TX_VBEZB,'B99,999.99')
  let #T1A.GPDE_TX_ZMVB = &T1A.GPDE_TX_ZMVB
  do Format-Number(#T1A.GPDE_TX_ZMVB,$T1A.GPDE_TX_ZMVB,'B99,999.99')
  let $T1A.GPDE_TX_VBEZ_DT = &T1A.GPDE_TX_VBEZ_DT
! -- display 'rowsel: Pay-Account-Page1'

!  print status values for the period
!
        do Pay-Account-Page1-Print

FROM PS_GPDE_RP_0001_VW T1A  , PS_GPDE_RP_SI01_VW SI1A
WHERE   T1A.EMPLID        =  $Emplid
AND     T1A.EMPL_RCD    =  #Empl_Rcd_Nbr
! only the year specified on the runcontrol
AND     T1A.PRD_END_DT BETWEEN $BegYearAct AND  $EndYearAct

! -- do not need RP_TX03
! --WHERE T1A.EMPLID        = T2A.EMPLID
! --AND   T1A.CAL_RUN_ID    = T2A.CAL_RUN_ID
! --AND   T1A.EMPL_RCD      = T2A.EMPL_RCD
! --AND   T1A.GP_PAYGROUP   = T2A.GP_PAYGROUP
! --AND   T1A.CAL_ID        = T2A.CAL_ID
! --AND   T1A.RSLT_SEG_NUM  = T2A.RSLT_SEG_NUM
! only ver 8.01: AND   T1A.SLICE_END_DT  = T2A.SLICE_END_DT

AND   T1A.EMPLID        = SI1A.EMPLID
AND   T1A.CAL_RUN_ID    = SI1A.CAL_RUN_ID
AND   T1A.EMPL_RCD      = SI1A.EMPL_RCD
AND   T1A.GP_PAYGROUP   = SI1A.GP_PAYGROUP
AND   T1A.CAL_ID        = SI1A.CAL_ID
AND   T1A.ORIG_CAL_RUN_ID    = SI1A.ORIG_CAL_RUN_ID
AND   T1A.RSLT_SEG_NUM  = SI1A.RSLT_SEG_NUM
AND   T1A.SEG_END_DT  = SI1A.SEG_END_DT
!
! issue: retro change of termination to mid period: multiple segment versions
! ==> use segment data from latest recalculation
!
! wdu 04b4: only the last slice is wanted here.
AND   SI1A.SLICE_END_DT = SI1A.SEG_END_DT

! wdu 04b4: old construct, remove for bundle 5
! -- AND   SI1A.SLICE_END_DT = (SELECT MAX(SI2A.SLICE_END_DT) FROM PS_GPDE_RP_SI01_VW SI2A
! -- WHERE   SI2A.EMPLID        = SI1A.EMPLID
! -- AND     SI2A.EMPL_RCD      = SI1A.EMPL_RCD
! -- AND     SI2A.GP_PAYGROUP   = SI1A.GP_PAYGROUP
! -- AND     SI2A.CAL_ID        = SI1A.CAL_ID
! not to be joined:
! -- AND     SI2A.SEG_END_DT  = SI1A.SEG_END_DT    do not join because of seg changes
! --AND     SI2A.CAL_RUN_ID    = SI1A.CAL_RUN_ID
! --AND     SI2A.ORIG_CAL_RUN_ID    = SI1A.ORIG_CAL_RUN_ID
! --AND     SI2A.RSLT_SEG_NUM  = SI1A.RSLT_SEG_NUM
! --)

! wd20040513
! replaced MAX(T1A.GPDE_AL_CPAY_ENDDT), DISTINCT and GROUP BY
! with  AND T1A.GPDE_AL_CPAY_ENDDT = (SELECT MAX(T2A.GPDE_AL_CPAY_ENDDT) ... )
! wdu: only the latest recalculation is relevant
AND T1A.GPDE_AL_CPAY_ENDDT = (SELECT MAX(T2B.GPDE_AL_CPAY_ENDDT)
FROM PS_GPDE_RP_0001_VW T2B
WHERE T1A.EMPLID=T2B.EMPLID
AND T1A.EMPL_RCD=T2B.EMPL_RCD
AND T1A.GP_PAYGROUP=T2B.GP_PAYGROUP
AND T1A.CAL_ID=T2B.CAL_ID
! -- not to be joined:
! -- AND T1A.SEG_END_DT=T2B.SEG_END_DT      do not join because of seg changes
! -- AND T1A.CAL_RUN_ID=T2B.CAL_RUN_ID
! --AND T1A.ORIG_CAL_RUN_ID=T2B.ORIG_CAL_RUN_ID
! --AND T1A.RSLT_SEG_NUM=T2B.RSLT_SEG_NUM
)
! wdu 04b4: only the last segment in the month should be taken (from the last recalc version)
AND T1A.SEG_END_DT = (SELECT MAX(T3B.SEG_END_DT)
FROM PS_GPDE_RP_0001_VW T3B
WHERE T1A.EMPLID=T3B.EMPLID
AND T1A.EMPL_RCD=T3B.EMPL_RCD
AND T1A.GP_PAYGROUP=T3B.GP_PAYGROUP
AND T1A.CAL_ID=T3B.CAL_ID
AND T1A.GPDE_AL_CPAY_ENDDT=T3B.GPDE_AL_CPAY_ENDDT
)

! wd20040513 removal of group by
! --GROUP BY T1A.EMPLID,T1A.PRD_END_DT,T1A.GPDE_TX_SPCL_EXMPT, T1A.GPDE_TX_INC_TX_CLS, T1A.GPDE_TX_SCHEDULE,
! --         T1A.GPDE_TX_EXEMPT_ANN, T1A.GPDE_TX_EXEMPT_MON, T1A.GPDE_TX_RELIGION,T1A.GPDE_TX_SPOUSE_REL,
! --         T1A.GPDE_TX_CHRCHSTATE,T1A.GPDE_TX_RECALC_OVD, T1A.GPDE_TX_METHOD_OVD,T1A.GPDE_TX_CHRCH_OVRD,
! --         T1A.MAR_STATUS, SI1A.GPDE_DV_SV_CODE,SI1A.GPDE_SI_PROV_MAND, SI1A.GPDE_SI_PROV_PV, SI1A.BA_CD,
! --         SI1A.GPDE_SI_POS_IN_JOB, SI1A.GPDE_SI_EDUCATION, SI1A.GPDE_SI_PENS_APPLI,SI1A.GPDE_SI_EMPL_MULT,
! --         T1A.GPDE_TX_PAY_EFFDT, T1A.GPDE_TX_NUM_CHILD,T1A.GPDE_TX_HOME_CD, T1A.GPDE_AL_FINANCE_CD,
! --         SI1A.GPDE_DV_RVNR,SI1A.GPDE_SI_EMPL_TYPE, T1A.NATIONALITY, T1A.NATIONALITY_CD,SI1A.GPDE_SI_CARD_PRES,
! --         T1A.GPDE_TX_ADDGRS_ANN,T1A.GPDE_TX_ADDGRS_MON,T1A.HIRE_DT,T1A.TERMINATION_DT,T1A.DEPTID,
! --         T1A.GPDE_TX_NOPRV_EMPL,SI1A.GPDE_SIP_REGION
End-Select
! -- display 'endsel: Pay-Account-Page1'

 new-page

End-Procedure Pay-Account-Page1





!***************************************************************************
!!
!
!  Statusinformation for the employee
!
Begin-Procedure Pay-Account-Page1-Print

do ConvertToComponents(&XT1_Page1_CPAY_ENDDT,$yy,$mm,$dd)

!wdu 04b4 all columns equalized to 12
  evaluate $mm
  when = '01'
     let #colp =   30
     break
  when = '02'
     let #colp =   42
     break
  when = '03'
     let #colp =   54
     break
  when = '04'
     let #colp =  66
     break
  when = '05'
     let #colp =   78
     break
  when = '06'
     let #colp =   90
     break
  when = '07'
     let #colp =   102
     break
  when = '08'
     let #colp =   114
     break
  when = '09'
     let #colp =   126
     break
  when = '10'
     let #colp =   138
     break
  when = '11'
     let #colp =   150
     break
  when = '12'
     let #colp =   162
     break
  when-other
     break
 end-evaluate
 #define cols   #colp

 print 'Eintritt'             (2,{col0})
 print 'Austritt'             (+1,{col0})
 print 'Abteilung'             (+1,{col0})
 print 'Tag der Lohnzahlung'             (+1,{col0})
 print 'Beschäftigungsanteil'            (+1,{col0})    !wdu 04b4 FTE

 print 'Steuerstatus'                    (+2,{col0})
 print 'Steuerklasse'                    (+1,{col0})
 print 'Kinderfreibetraege'              (+1,{col0})
 print 'Lohnsteuertabelle'               (+1,{col0})
 print 'Jährlicher Freibetrag'           (+1,{col0})
 print 'Monatlicher Freibetrag'          (+1,{col0})
 print 'Jhrl. Hinzurechnungsbetr.'       (+1,{col0})
 print 'Mtl. Hinzurechnungsbetr.'        (+1,{col0})

 ! wdu05-881b8: use Vortrag Flag $HaveVortrag determined earlier, print as required
 if ( $HaveVortrag = 'Y' )
    ! print Vortrag only when required
     print ' '       (+1,{col0})
 else
     print 'Keine Vorarbeitgeberwerte'       (+1,{col0})
 end-if

 print 'Religion'                        (+2,{col0})
 print 'Religion des Ehepartners'        (+1,{col0})
 print 'Kirchenbundesland'               (+1,{col0})
 print 'Lohnsteuerjahresausgleich'       (+1,{col0})
 print 'KSt-Jahresausgleich'             (+1,{col0})
 print 'Permanenter LSt-Ausgleich'       (+1,{col0})
 !print 'Familienstand'                   (+1,{col0})

 ! wdu05-881jw06 starting from 2006 there will be multiple rows on a separate page for VB
 if $Ctl_Year < '2006'
    print 'Beginn Versorgungsbezug'         (+2,{col0})
    print 'VB 1. voller Kalendermonat'      (+1,{col0})
    print 'VB Sonderzahlung'                (+1,{col0})
    print 'Grundlage VB-Freibetrag'  (+1,{col0})
    print 'Zahl der Monate mit VB'          (+1,{col0})
 end-if

  print 'BGR-Schlüssel'                   (+2,{col0})
 print 'Rechtskreis'                     (+1,{col0})
 print 'Pflicht Krankenkasse'            (+1,{col0})
 print 'Pflege Krankenkasse'             (+1,{col0})
 print 'Tätigkeitsschlüssel'             (+1,{col0})
! print 'Stellung in Beruf'               (+1,{col0})
! print 'Ausbildung'                      (+1,{col0})
 print 'Rentenbezug'                     (+1,{col0})
 print 'Mehrfachbeschäftigung'           (+1,{col0})
 print 'Kinder f. PV-Berechnung'         (+1,{col0})


 ! Ein/Austritt
 print $T25           (2,{cols})
 print $T26           (+1,{cols})
 print &XT27_DEPTID   (+1,{cols})
 print $T21           (+1,{cols})
 print $t12a_FTE      (+1,{cols})

 !Steuer
 print $T1           (+2,{cols})
 print $T2           (+1,{cols})
 print $T22          (+1,{cols})
 print &XT3           (+1,{cols})
 print $T4           (+1,{cols})
 print $T5           (+1,{cols})
 print $T23           (+1,{cols})
 print $T24           (+1,{cols})
 print &NOPRV_EMPL    (+1,{cols})

 !religion etc
 print $T6            (+2,{cols})
 print $T7            (+1,{cols})
 print $T8            (+1,{cols})
 print &XT9            (+1,{cols})
 print &XT11           (+1,{cols})
 print &XT10           (+1,{cols})
 !print $T12           (+1,{cols})

 ! wdu05-881jw06 starting from 2006 there will be multiple rows on a separate page for VB
 if $Ctl_Year < '2006'
     print $T1A.GPDE_TX_VBEZ_DT         (+2,{cols})
     print $T1A.GPDE_TX_VBEZM           (+1,{cols})
     print $T1A.GPDE_TX_VBEZS           (+1,{cols})
     print $T1A.GPDE_TX_VBEZB           (+1,{cols})
     print $T1A.GPDE_TX_ZMVB            (+1,{cols})
 end-if

 !SV
 print &XT13           (+2,{cols})
 print $SIP_REGION     (+1,{cols})
 print &XT14           (+1,{cols})
 print &XT15           (+1,{cols})
 ! print BA code and other fields 
 do Format-DateTime('20111201', $date1, {DEFCMP}, '','native') 
 let $bacd_activity = ' ' 
 if &XT1_Page1_CPAY_ENDDT < $date1   
   let $bacd_activity = &XT16 || &XT17 || &XT18
 else
   let $bacd_activity = &XT16 || &BASCHL || &BAPRF || &BAEMTMP || &BACNTRCT    
 end-if 
 print $bacd_activity   (+1,{cols}) 
 
 print $T19           (+1,{cols})
 print $T20           (+1,{cols})
! wdu jw2005 Kinder f PV
 print $T20C           (+1,{cols})
!

End-Procedure Pay-Account-Page1-Print



begin-procedure MakeYearBeginEndDates
!
! create yearbgin and end from the yearnumber on the runcontrol
! BegYearActCmp, EndYearActCmp
    let $BegMonthStr = $Ctl_Year || '0101000000'
    do Format-DateTime($BegMonthStr,$BegYearAct,{DEFCMP},'','native')
    do Format-DateTime($BegYearAct,$BegYearActCmp,{DEFCMP},'','')
    do Format-DateTime($Ctl_Curr_Pay_End_DT,$CtlPayEnd_DTCmp,{DEFCMP},'','')
    let $EndMonthStr = $Ctl_Year || '1231000000'
    do Format-DateTime($EndMonthStr,$EndYearAct,{DEFCMP},'','native')
    do Format-DateTime($EndYearAct,$EndYearActCmp,{DEFCMP},'','')
end-procedure




! ******************************************************************************* !
! CX = code extraction for formal reasons
! ******************************************************************************* !

begin-procedure CX_CurrencyConvert01
     ! show '(Entry CX_CurrencyConvert01)$$'
     if &PBDC.CURRENCY_CD <> 'DEM'
           ! show '(Exec in CX_CurrencyConvert01)$$'
           do ConvertCurrency(&PTC.GPDE_RP_SIGRSS_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_SIGRSS_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_SIGRSM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_SIGRSM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_HICNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_HICNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_HICTBM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_HICTBM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_CICNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_CICNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PICNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PICNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PICTBM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PICTBM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_UICNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_UICNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_UICTBM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_UICTBM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_OAPGRS_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_OAPGRS_AMT,'F')
! +-                   do ConvertCurrency(&PTC.GPDE_RP_OAPPEN_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
! +-                          $Current_DT_EX_RT,#PTC.GPDE_RP_OAPPEN_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_OAPGRS_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_OAPGRS_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_OAPPEN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_OAPPEN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RIGRSS_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RIGRSS_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_U1CNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_U1CNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_U2CNTB_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_U2CNTB_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RIGRSM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RIGRSM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_U1CTBM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_U1CTBM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_U2CTBM_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_U2CTBM_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVGRS_ANLZ,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVGRS_ANLZ,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVGRS_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVGRS_BON,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVGRS_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVGRS_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVGRS_ANLZ,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVGRS_ANLZ,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVGRS_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVGRS_BON,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVGRS_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVGRS_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVGRS_ANLZ,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVGRS_ANLZ,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVGRS_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVGRS_BON,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVGRS_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVGRS_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVGRS_ANLZ,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVGRS_ANLZ,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVGRS_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVGRS_BON,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVGRS_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVGRS_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVLFD_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVLFD_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVLFD_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVLFD_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVLFD_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVLFD_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVLFD_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVLFD_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVLFD_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVLFD_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVLFD_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVLFD_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVLFD_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVLFD_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVLFD_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVLFD_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVBON_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVBON_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVBON_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVBON_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVBON_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVBON_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVBON_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVBON_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVBON_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVBON_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVBON_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVBON_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVBON_AG,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVBON_AG,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVBON_AN,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVBON_AN,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVAG_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVAG_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AVAN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AVAN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVAG_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVAG_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_KVAN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_KVAN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVAG_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVAG_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_PVAN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_PVAN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVAG_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVAG_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVAN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVAN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_RVAN_MC,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_RVAN_MC,'F')
           do ConvertCurrency(&PTC.GPDE_RP_SIGRUNLM_A,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_SIGRUNLM_A,'F')
           do ConvertCurrency(&PTC.GPDE_RP_SIGRUNLM_B,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_SIGRUNLM_B,'F')
           do ConvertCurrency(&PTC.GPDE_RP_HIVOL_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_HIVOL_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_CIVOL_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_CIVOL_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_HIVLER_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_HIVLER_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_CIVLER_AMT,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_HIVLER_AMT,'F')
           do ConvertCurrency(&PTC.GPDE_RP_AZGRS_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_AZGRS_BON,'F')
           do ConvertCurrency(&PTC.GPDE_RP_OAPPEN_ANL,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_OAPPEN_ANL,'F')
           do ConvertCurrency(&PTC.GPDE_RP_OAPPEN_BON,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_RP_OAPPEN_BON,'F')
           do ConvertCurrency(&PTC.GPDE_AZ_RP_S03_31,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_AZ_RP_S03_31,'F')
           do ConvertCurrency(&PTC.GPDE_AZ_RP_S03_41,&PBDC.CURRENCY_CD,'DEM',$Current_RT_Type,
                  $Current_DT_EX_RT,#PTC.GPDE_AZ_RP_S03_41,'F')

           ! wdu06-881kug: looks strange but is okay, as component SIGRSS is recalced too
           ! moved to caller:
           ! -- let #PTC.GPDE_RP_SIGRSS_AMT  =     #PTC.GPDE_RP_SIGRSS_AMT + #PTC.GPDE_RP_OAPGRS_AMT
           ! -- let #PTC.GPDE_RP_SIGRSM_AMT  =     #PTC.GPDE_RP_SIGRSM_AMT + #PTC.GPDE_RP_OAPGRS_MC
           move 'DEM' to $Actual_Currency
       end-if
end-procedure








begin-procedure PrintVortrag
! wdu-05b6: add the printing for employer Vortraege here.
! the values need to be fetched into variables earlier.

! wdu05-881b8: use Vortrag Flag $HaveVortrag determined earlier instead of reevaluating values
if ( $HaveVortrag = 'Y' )
    ! print Vortrag only when required
    print 'Vorarbeitgeberwerte'   (2,{col0})

    print 'Steuerbrutto'        (+1,{col0})
    print 'Versorgungsbezug'    (,20)

    print 'Lohnsteuer'          (,40)
    print 'Kirchensteuer'       (,60)
    print 'Sol. Zuschlag'       (,80)

    print 'Mehrj. Bez.'         (,100)
    print 'Mehrj. Vers. Bez.'   (,120)
    print 'Anzahl U'            (,140)


    print $Steuer_Brutto_3      (+1,{col0})
    print $Vers_Bez_8           (,20)

    print $Lohn_Steuer_4        (,40)
    print $KirchenSteuer_6_7    (,60)
    print $SolidZuschl_5        (,80)

    print $Mehrj_Bez_10         (,100)
    print $Mehrj_Vers_Bez_9     (,120)
    print $AnzahlU_2            (,140)

    ! second set of data

    print 'Lohnersatzleistg.'    (+2,{col0})
    print 'Stfr. Lohn DBA'       (,20)
    print 'Stfr. Lohn ATE'       (,40)

    print $VortragKug            (+1,{col0})
    print $VortragDba            (,20)
    print $VortragAte            (,40)

    new-page
end-if
end-procedure
! ***********************************************************************





begin-procedure Print_KUG_line
    ! print KUG if we have KUG
    if #PTC.GPDE_RP_KUG_KVCTB = 0
       AND #PTC.GPDE_RP_KUG_KVGRS = 0
       AND #PTC.GPDE_RP_KUG_PVCTB = 0
       AND #PTC.GPDE_RP_KUG_PVGRS = 0
       AND #PTC.GPDE_RP_KUG_RVCTB = 0
       AND #PTC.GPDE_RP_KUG_RVGRS = 0
            Goto NoPr2Kug
    end-if
    if $march = 'N' or $Vorj = 'Y'
         let #mm = 4 + #current-line
         if #mm > 55
            new-page
         end-if
         let #currLineV = -18 + #current-line
         let #currLineN = -17 + #current-line
         if #currLineV <= 0
           let #currLineV = 1
           let #currLineN = 2
         end-if
         graphic (#currLineN,1,184) box 3 1
         graphic (#currLineV,9,3) vert-line 1
         graphic (#currLineV,17,3) vert-line 1
         graphic (#currLineV,27,3) vert-line 1
         graphic (#currLineV,34,3) vert-line 1
         graphic (#currLineV,41,3) vert-line 1
         graphic (#currLineV,48,3) vert-line 1
         graphic (#currLineV,62,3) vert-line 1
         graphic (#currLineV,76,3) vert-line 1
         graphic (#currLineV,90,3) vert-line 1
         graphic (#currLineV,104,3) vert-line 1
         graphic (#currLineV,118,3) vert-line 1
         graphic (#currLineV,132,3) vert-line 1
         graphic (#currLineV,146,3) vert-line 1
         graphic (#currLineV,160,3) vert-line 1
         graphic (#currLineV,172,3) vert-line 1

         do Format-Number(#PTC.GPDE_RP_KUG_KVCTB,$PTC.GPDE_RP_KUG_KVCTB,'B99,999.99')
         do Format-Number(#PTC.GPDE_RP_KUG_KVGRS,$PTC.GPDE_RP_KUG_KVGRS,'B99,999.99')
         do Format-Number(#PTC.GPDE_RP_KUG_PVCTB,$PTC.GPDE_RP_KUG_PVCTB,'B99,999.99')
         do Format-Number(#PTC.GPDE_RP_KUG_PVGRS,$PTC.GPDE_RP_KUG_PVGRS,'B99,999.99')
         do Format-Number(#PTC.GPDE_RP_KUG_RVCTB,$PTC.GPDE_RP_KUG_RVCTB,'B99,999.99')
         do Format-Number(#PTC.GPDE_RP_KUG_RVGRS,$PTC.GPDE_RP_KUG_RVGRS,'B99,999.99')

         let #TempCol = 1 + #currLineV
         alter-printer
            font = 3
            point-size = 16
         ! Line#1
         print $PTC.GPDE_RP_KUG_KVGRS  (#TempCol,62)
         print $PTC.GPDE_RP_KUG_KVCTB    (#TempCol,90)
         print $PTC.GPDE_RP_KUG_RVCTB    (#TempCol,104)
         print $PTC.GPDE_RP_KUG_PVCTB    (#TempCol,132)

         ! Line#2
         let #TempCol = 1 + #TempCol
           alter-printer
           font = 4
           point-size = 13
         ! labels
         if $march = 'N' or $Vorj = 'Y'
            if $Vorj = 'Y'
                print  'KUG VJ'   (#TempCol,2)
            else
                print 'KUG'   (#TempCol,2)
            end-if
         else
            print 'KUG'   (#TempCol,2)
         end-if
         ! data

         alter-printer
            font = 3
            point-size = 16
         print $PTC.GPDE_RP_KUG_RVGRS  (#TempCol,62)
         print $PTC.GPDE_RP_KUG_PVGRS  (#TempCol,76)

         ! Line#3 <-- jjj

         let #TempCol = 1 + #TempCol

         let #kugamt = &PTC.GPDE_KU_KUGAMT
         let #kugkkamt = &PTC.GPDE_KU_KUGKKAMT
         let #totkug = #kugamt + #kugkkamt

         if #kugamt + #kugkkamt <> 0
            do Format-Number(#totkug, $KUG_PRINT,'B99,999.99')
            let $KUG_PRINT = $KUG_PRINT || '**'
            print $KUG_PRINT  (#TempCol,46)
         end-if
         ! --> jjj

         let #KV-AG_Sum = #KV-AG_Sum + #PTC.GPDE_RP_KUG_KVCTB
         let #KV-Brutto_Sum = #KV-Brutto_Sum + #PTC.GPDE_RP_KUG_KVGRS
         let #PV-AG_Sum = #PV-AG_Sum + #PTC.GPDE_RP_KUG_PVCTB
         let #PV-Brutto_Sum = #PV-Brutto_Sum + #PTC.GPDE_RP_KUG_PVGRS
         let #RV-AG_Sum = #RV-AG_Sum + #PTC.GPDE_RP_KUG_RVCTB
         let #RV-Brutto_Sum = #RV-Brutto_Sum + #PTC.GPDE_RP_KUG_RVGRS

        position (+1,1)
    end-if
NoPr2Kug:
end-procedure
!*************************************************************************************

begin-procedure GetRegion_MC($PRD_END_DT1,$Emplid1,$SI_Provider1,:$strGPDE_REGION)

begin-select distinct 
SIC.GPDE_DV_SV_CODE
SIC.GPDE_DV_SV_CODE_M
SIC.GPDE_SIC_REGION    &SIC.GPDE_SIC_REGION
SIC.GPDE_SIH_REGION
SIC.GPDE_SIP_REGION
SIC.GPDE_SIU_REGION 
   
    let $strGPDE_REGION = &SIC.GPDE_SIC_REGION
    
FROM PS_GPDE_RP_SI01_VW SIC
WHERE SIC.EMPLID = $Emplid1
AND (SIC.GPDE_SI_PROV_AV = $SI_Provider1 
     or SIC.GPDE_SI_PROV_KV = $SI_Provider1
     or SIC.GPDE_SI_PROV_PV = $SI_Provider1
     or SIC.GPDE_SI_PROV_RV = $SI_Provider1) 
AND   SIC.SEG_END_DT = $PRD_END_DT1

end-select

end-procedure

!*************************************************************************************


begin-procedure InitTimeStamp
! we need global vars with valid date
    let $lasttime = datenow()
    let $debugtime = datenow()
    !let #diff = datediff($debugtime, $lasttime, 'second')
    #debug show '(InitTimeStamp)'
end-procedure


begin-procedure TimeStamp($msg)
    let $_lasttime = $_debugtime
    let $_debugtime = datenow()

    ! #let #diff = datediff($_debugtime, $_lasttime, 'second')
    #debug show 'debug-time:'  $_debugtime ' :'  $msg
    !':' #diff
end-procedure


!*************************************************************************
#include 'number.sqc'    !routines to format numbers
#include 'gpdetx03.sqc'  !get run control parameter values
!#include 'gpdeut01.sqc'  !sqr strings table procedures
#include 'gpdeut03.sqc'  !get ask report parameters
#include 'gpdeut02.sqc'  !get ask report parameters
#include 'gpdeut04.sqc'  !get pay entity data
#include 'gpdeut05.sqc'  !get employee address
#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut07.sqc'  !get run control parameter values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'timemath.sqc'