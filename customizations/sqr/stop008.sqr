!-----------------------------------------------------------------------
!  STOP008:  Shares Subject to Repurchase
!-----------------------------------------------------------------------
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:38                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup

 #include 'ptpsl177.sqc'
 
End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-where-Clause
  do Select-Vesting-Info
  do Get-Shares-Exercised
  do Get-Shares-Released
  do Process-Shares-Exercised
  do Create-Array
  do Process-Main
  do Reset
  do Successful-EOJ
  do Delete-Temp

 show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  set titles , variables.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID      = 'STOP008'
  let $StockPlanType = 'O'
  let $cur = $basecurr

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language

  if $prcs_process_instance = ''
    let #Instance = 0
    input $RC_Stock_ID      maxlen=10 'Enter Stock ID'          type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID   maxlen=10 'Stock ID is required'    type=Char
    end-while
    input $RC_Option_Type   maxlen=4  'Enter the OPTION TYPE or press enter for all' type=char 
    uppercase $RC_Stock_ID
    uppercase $RC_Option_Type
    do Ask-As-Of-Date
    let $AsOfDate = $AsOfDate
  else
    let #Instance = to_number($prcs_process_instance)
    do Get-SQR-Parms                   ! Get Run Control Values
 end-if

  let $StockId        = rtrim($RC_Stock_ID,' ')
  let $RC_Option_Type = rtrim($RC_Option_Type,' ')
  let $AsOfDate       = rtrim($RC_AsOfDate,' ')
  show 'Stock ID:      ' $StockId
  show 'As Of Date:    ' $AsOfDate
  show 'Option Type:   ' $RC_Option_Type

  let $CurrentTime = DateNow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 08

  #include 'stdhdg01.sqc'
  let #Advance = 0
  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  ,014,010)
  print $AsOfDtLbl                                         (  ,080,010)
  print ':'                                                (  ,   ,001)
  do Format-DateTime ($AsOfDate, $Date, {DEFDATE}, '', '')
  print $Date                                              (  , +1,010)
  print $OptTypeLbl                                        (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,014,004)

  print $GrantNbrLbl                                       (+3,045,012)
  print $UnvestSharesLbl                                   (  ,115,015)
  print $NameLbl                                           (+1,001,030)
  print $EmplLbl                                           (  ,032,011)
  print $GrantDtLbl                                        (  ,045,010)
  print $OptTypeLbl                                        (  ,059,011)
  print $PlanLbl                                           (  ,072,010)
  print $GrantPriceLbl                                     (  ,095,011)
  print $RepableLbl                                        (  ,117,013)
  print $RepCostLbl                                        (  ,139,016)
  print $RelableLbl                                        (  ,161,017)
  print '-'                                                (+1,001,177) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',   'ASOFDATE',        $AsOfDtLbl,      #DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',        $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN_DESC', $PlanLbl,        #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE',  $OptTypeLbl,     #DW)
  do Get_Field_Information ('STOCK',   'NAME',            $NameLbl,        #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',          $EmplLbl,        #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',       $GrantNbrLbl,    #DW)
  do Get_Field_Information ('STOCK',   'GRANT_DT',        $GrantDtLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',     $GrantPriceLbl,  #DW)
  do Get_Field_Information ('STOCK',   'TOTAL',           $TotLbl,         #DW)
  do Get_Field_Information ('STOCK',   'GRAND_TOTAL',     $GrndTotLbl,     #DW)
  do Get_Field_Information ('STOCK',   'HI',              $HiLbl,          #DW)
  do Get_Field_Information ('STOCK',   'LOW',             $LowLbl,         #DW)
  do Get_Field_Information ('STOCK',   'AVG',             $AvgLbl,         #DW)

  do Get_Field_Information ('STOP008', 'STOP008',         $ReportTitle,    #DW)
  do Get_Field_Information ('STOP008', 'REPURCHASE_COST', $RepCostLbl,     #DW)
  do Get_Field_Information ('STOP008', 'REPURCHASEABLE',  $RepableLbl,     #DW)
  do Get_Field_Information ('STOP008', 'RELEASEABLE',     $RelableLbl,     #DW)
  do Get_Field_Information ('STOP008', 'UNVESTED_SHARES', $UnvestSharesLbl,#DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-where-Clause

 if $RC_Option_Type <> ''
    let $OptionClause  = 'and A.ST_OPTION_TYPE    = '''||$RC_Option_Type||''''
 else
    let $OptionClause  = ''
 end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting-Info
! Descr:   Selects values to insert into ST_STOP008_TBL.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting-Info

Begin-Select
AXA.EMPLID
AXA.STOCK_ID
AXA.STOCK_PLAN
AXA.GRANT_NBR
AXB.VEST_DT
AXA.GRANT_PRICE
AXB.SHARES_VESTED
AXB.EXPIRATN_DT
AXB.TERM_EXPIRATN_DT
AXA.ST_CANCEL_REASON
AXA.ST_CANCEL_DT
AXA.VEST_SUSPEND_DT
AXA.EXERCISE_HOLD_DT

  let $MSCancelDt  = rtrim(&axa.st_cancel_dt,' ')
  let $MSTermExpDt = rtrim(&axb.term_expiratn_dt,' ')
  let $MSVestSusDt = rtrim(&axa.vest_suspend_dt,' ')
  let $MSExerHldDt = rtrim(&axa.exercise_hold_dt,' ')
  do Insert-Vesting-Info

from PS_ST_GRANT        AXA,
     PS_ST_GRNT_VST_DTL AXB
where AXA.GRANT_STATUS = 'A'
  and AXA.EMPLID       = AXB.EMPLID
  and AXA.STOCK_ID     = AXB.STOCK_ID
  and AXA.GRANT_NBR    = AXB.GRANT_NBR
  and AXB.VEST_EFFDT   = (SELECT MAX(VEST_EFFDT)
                          from PS_ST_GRNT_VST_DTL
                          where EMPLID      = AXB.EMPLID
                            and STOCK_ID    = AXB.STOCK_ID
                            and GRANT_NBR   = AXB.GRANT_NBR
                            and VEST_EFFDT <= $AsOfToday)
  and AXB.SEQ_NUM      = (SELECT MAX(SEQ_NUM)
                          from PS_ST_GRNT_VST_DTL
                          where EMPLID     = AXB.EMPLID
                            and STOCK_ID   = AXB.STOCK_ID
                            and GRANT_NBR  = AXB.GRANT_NBR
                            and VEST_EFFDT = AXB.VEST_EFFDT )
  and AXA.STOCK_ID     = $StockId
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Insert-Vesting-Info
! Descr:   Inserts vesting info into a temp table as the first step in creating
!          the vesting schedule.  CurrentTime and Instance are used to 
!          eliminate the chance of data being accessed by two different runs
!          of the report at the same time.
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting-Info

 let $Procedure = 'Insert-Vesting-Temp'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STOP008_TBL
  
(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,STOCK_ID
,STOCK_PLAN
,GRANT_NBR
,VEST_DT
,GRANT_PRICE
,SHARES_VESTED
,SHARES_EXERCISED
,EXPIRATN_DT
,TERM_EXPIRATN_DT
,VEST_SUSPEND_DT
,EXERCISE_HOLD_DT
,ST_CANCEL_REASON
,ST_CANCEL_DT)

VALUES
($CurrentTime
,#Instance
,&axa.emplid
,&axa.stock_id
,&axa.stock_plan
,&axa.grant_nbr
,&axb.vest_dt
,&axa.grant_price
,&axb.shares_vested
,0
,&axb.expiratn_dt,

! Workaround for TPRD T-MLEAN-Q54CT
#ifdef MICROSOFT
   $MSTermExpDt
  ,$MSVestSusDt
  ,$MSExerHldDt
  ,&axa.st_cancel_reason
  ,$MSCancelDt)
#else
   &axb.term_expiratn_dt
  ,&axa.vest_suspend_dt
  ,&axa.exercise_hold_dt
  ,&axa.st_cancel_reason
  ,&axa.st_cancel_dt)
#endif

end-sql

End-Procedure
    
!-----------------------------------------------------------------------
! Section: Get-Shares-Exercised
! Descr:   Sums all restricted exercises for a particular emplid, stock_id, 
!          grant_nbr and vest_dt. Report lumps the sum in a particular vesting 
!          date and then trickles the excess down to the next higher vesting 
!          date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Exercised
    
Begin-Select
AXC.EMPLID
AXC.STOCK_ID
AXC.GRANT_NBR
AXD.VEST_DT
SUM(AXC.SHARES_EXERCISED) &SumExer

 do Update-Shares-ExercisedA

from PS_ST_GRANT_EXER   AXC,
     PS_ST_STOP008_TBL  AXD
where AXC.EMPLID              = AXD.EMPLID
  and AXC.GRANT_NBR           = AXD.GRANT_NBR
  and AXC.STOCK_ID            = AXD.STOCK_ID
  and AXC.EXERCISE_STATUS     = 'A'
  and AXC.RESTRICTD_EXERCISE  = 'N'
  and AXC.EXERCISE_DT        <= $AsOfDate
  and AXC.STOCK_ID            = $StockId
  and AXD.DATETIME_STAMP      = $CurrentTime
  and AXD.PROCESSINSTANCE     = #Instance
  and AXD.VEST_DT             = (SELECT MIN(VEST_DT)
                                 from  PS_ST_STOP008_TBL
                                 where EMPLID              = AXC.EMPLID
                                   and GRANT_NBR           = AXC.GRANT_NBR
                                   and STOCK_ID            = AXC.STOCK_ID
                                   and STOCK_PLAN          = AXC.STOCK_PLAN
                                   and DATETIME_STAMP      = $CurrentTime
                                   and PROCESSINSTANCE     = #Instance
                                   and AXC.EXERCISE_DT     < EXPIRATN_DT
                                   and (AXC.EXERCISE_DT    < TERM_EXPIRATN_DT
                                    or TERM_EXPIRATN_DT   IS NULL))
GROUP BY AXC.EMPLID,
         AXC.STOCK_ID,
         AXC.GRANT_NBR,
         AXD.VEST_DT
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Shares-Released
! Descr:   Sums all exercises for a particular emplid, stock_id, grant_nbr
!          and vest_dt. Report lumps the sum in a particular vesting date and
!          then trickles the excess down to the next higher vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Released

Begin-Select
AZC.EMPLID
AZC.STOCK_ID
AZC.GRANT_NBR
AZD.VEST_DT
SUM(AZC.SHARES_RELEASED) &SumRel

 do Update-Shares-ReleasedA

from PS_ST_EXER_RELEASE  AZC,
     PS_ST_STOP008_TBL   AZD
where AZC.EMPLID           = AZD.EMPLID
  and AZC.GRANT_NBR        = AZD.GRANT_NBR
  and AZC.STOCK_ID         = AZD.STOCK_ID
  and AZC.RELEASE_STATUS   = 'A'
  and AZC.RELEASE_DT      <= $AsOfDate
  and AZC.STOCK_ID         = $StockId
  and AZD.DATETIME_STAMP   = $CurrentTime
  and AZD.PROCESSINSTANCE  = #Instance
  and AZD.VEST_DT          = (SELECT MIN(VEST_DT)
                              from  PS_ST_STOP008_TBL
                              where EMPLID              = AZC.EMPLID
                                and GRANT_NBR           = AZC.GRANT_NBR
                                and STOCK_ID            = AZC.STOCK_ID
                                and DATETIME_STAMP      = $CurrentTime
                                and PROCESSINSTANCE     = #Instance
                                and (AZC.RELEASE_DT     < EXPIRATN_DT
                                and (AZC.RELEASE_DT     < TERM_EXPIRATN_DT
                                or  TERM_EXPIRATN_DT   IS NULL)))
GROUP BY AZC.EMPLID,
         AZC.STOCK_ID,
         AZC.GRANT_NBR,
         AZD.VEST_DT
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedA
! Descr:   Updates the temp table with the sum of shares_exercised for a given
!          emplid, stock_id, grant_nbr, and vest_dt.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedA

 let $Procedure = 'Update-Shares-ExercisedA'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
update PS_ST_STOP008_TBL
  set SHARES_EXERCISED = &SumExer

where EMPLID          = &axc.emplid
  and STOCK_ID        = &axc.stock_id
  and GRANT_NBR       = &axc.grant_nbr
  and VEST_DT         = &axd.vest_dt
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ReleasedA
! Descr:   Updates the temp table with the sum of shares_released for a given
!          emplid, stock_id, grant_nbr, and vest_dt.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ReleasedA

 let $Procedure = 'Update-Shares-ReleasedA'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
update PS_ST_STOP008_TBL
  set SHARES_EXERCISED = (SHARES_EXERCISED + &SumRel)

where EMPLID          = &azc.emplid
  and STOCK_ID        = &azc.stock_id
  and GRANT_NBR       = &azc.grant_nbr
  and VEST_DT         = &azd.vest_dt
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Shares-Exercised
! Descr:   For each emplid and grant_nbr put info into array and call
!          Update-Shares-ExercisedB.
!-----------------------------------------------------------------------
Begin-Procedure Process-Shares-Exercised

 create-array name=Exer                -
                 size=50               -
                 field=VestDt:char     -
                 field=Vest:number     -
                 field=Exer:number
 let #x = 0

Begin-Select
AXE.EMPLID       () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldEmp
AXE.STOCK_ID     
AXE.STOCK_PLAN   
AXE.GRANT_NBR    () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldGrant
AXE.VEST_DT
AXE.SHARES_VESTED
AXE.SHARES_EXERCISED

  put &axe.vest_dt &axe.shares_vested &axe.shares_exercised into EXER(#x) VestDt Vest Exer
  add 1 to #x
  
from PS_ST_STOP008_TBL AXE
where AXE.STOCK_ID        = $StockId
  and AXE.DATETIME_STAMP  = $CurrentTime
  and AXE.PROCESSINSTANCE = #Instance
ORDER BY 1,4,5
End-Select

 do Update-Shares-ExercisedB    !to process last on-break

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedB
! Descr:   For each row in the array, check if shares exercised are greater
!          than shares vested for a particular vest date. If so, trickle down
!          the excess to the next vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedB

  let #TotalRow  = 0
  let #Remainder = 0
  
  while #totalRow <= #x   !to run thru all elements
    
    
    get $VestDtArray #ShrVestArray #ShrExerArray  -
         from EXER(#totalRow) VestDt Vest Exer

    let #ShareToExer = #ShrExerArray + #Remainder
    
    if #ShareToExer > #ShrVestArray
       let #UpdateExer  = #ShrVestArray
       let #Remainder   = #ShareToExer  - #ShrVestArray
       do  Update-Shares-ExercisedC
    else
       if #Remainder > #ShrExerArray
          let #UpdateExer = #Remainder
          do  Update-Shares-ExercisedC
          let #Remainder = 0
       end-if
    end-if

    add 1 to #totalRow
   
  end-while
  
  clear-array  name=EXER
  
  let #x = 0

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedC
! Descr:   Updates the temp table.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedC

 let $Procedure     = 'Update-Shares-ExercisedC'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
update PS_ST_STOP008_TBL
  set SHARES_EXERCISED = #UpdateExer

where EMPLID          = $OldEmp
  and STOCK_ID        = $StockId
  and GRANT_NBR       = $OldGrant
  and VEST_DT         = $VestDtArray
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan            -
               size  = 50                   -
               field = StockPlan:char       -
               field = Repurchable:number   -
               field = Cost:number          -
               field = Relable:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects grants and checks if any repurchaseable shares exist.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let $RowSelect = 'N'
  let #PlanCount = 1
  let $FirstPass = 'Y'
  let #AvgCount  = 0
  let #LowPrice  = 0
  let #MaxPrice  = 0
  let #TotalPrice  = 0

Begin-Select

A.ST_OPTION_TYPE                                           () on-break print=never procedure=Print-Type-Totals
A.EMPLID
A.GRANT_NBR
A.GRANT_DT
A.STOCK_PLAN
A.GRANT_PRICE
B.NAME

  let $Emplid     = rtrim(&a.emplid,' ')
  let $GrantNbr   = rtrim(&a.grant_nbr,' ')
  let $GrantDt    = rtrim(&a.grant_dt,' ')
  let $StockPlan  = rtrim(&a.stock_plan,' ')
  let #GrantPrice = &a.grant_price
  let $OptionType = rtrim(&a.st_option_type,' ')
  let $Name       = rtrim(&b.name,' ')

  do Get-Released
  do Get-Repurchased
  do Get-Repurchable
  do Get-Releaseable
  let #Relable2 = (#RestrictdExer - #Release - #Repurch)
  if #Relable1 < #Relable2
    let #Relable = #Relable1
  else
    let #Relable = #Relable2
  end-if
  if #Relable < 0 
    let #Relable = 0
  end-if

  let #Repurchable = (#RestrictdExer - #Release - #Repurch - #Relable)
  let #Cost        = (#Repurchable * #GrantPrice)

  if #Repurchable > 0
    do Print-Routine
    do Populate-Arrays
    let $RowSelect = 'Y'
    do Get-Min-Max-GrantPrice
  end-if

 from PS_ST_GRANT      A,
      PS_ST_PERSON_NAME   B
where A.STOCK_ID       = $StockId
  and A.GRANT_STATUS   = 'A'
  and A.GRANT_DT      <= $AsOfDate
  and A.EXER_BFR_VEST  = 'Y'
  and A.EMPLID         = B.EMPLID
  [$OptionClause]
order by A.ST_OPTION_TYPE,
         B.NAME,
         A.GRANT_NBR

End-Select

  if $RowSelect = 'Y'
    do Print-Type-Totals
    do Print-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Min-Max-GrantPrice
! Descr:   Determines the Minimum and Maximum Grant Price and keeps
!          track of how many rows are to be used for dividing by Average
!-----------------------------------------------------------------------
Begin-Procedure Get-Min-Max-GrantPrice

  if $FirstPass = 'Y'
      let #LowPrice   = &a.grant_price
      let #MaxPrice   = &a.grant_price
      let $FirstPass = 'N'
  end-if

  let #AvgCount  = #AvgCount + 1

  if #GrantPrice > #MaxPrice
      let #MaxPrice = #GrantPrice
  else
     if #GrantPrice < #LowPrice
         let #LowPrice = #GrantPrice
     end-if
  end-if

  let #TotalPrice = #TotalPrice + #GrantPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Released
! Descr:   Retrieves any releases for an employee, as of a given date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Released

  let #Release = 0

Begin-Select

SUM(J.SHARES_RELEASED) &rel

  let #Release = &rel

from PS_ST_EXER_RELEASE  J
where J.EMPLID          = $Emplid
  and J.STOCK_ID        = $StockId
  and J.RELEASE_DT     <= $AsOfDate
  and J.RELEASE_STATUS  = 'A'
  and J.GRANT_NBR       = $GrantNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Repurchased
! Descr:   Retrieves any repurchases for an employee, as of a given date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Repurchased

  let #Repurch = 0

Begin-Select

SUM(K.SHARES_REPURCHASED) &repurch

  let #Repurch = &repurch

from PS_ST_GRNT_REPURCH  K
where K.EMPLID             = $Emplid
  and K.STOCK_ID           = $StockId
  and K.REPURCHASE_DT     <= $AsOfDate
  and K.REPURCHASE_STATUS  = 'A'
  and K.GRANT_NBR          = $GrantNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Repurchable
! Descr:   Retrieves restricted exercises, which are used to compute 
!          repurchaseable shares.
!-----------------------------------------------------------------------
Begin-Procedure Get-Repurchable

  let #RestrictdExer = 0

Begin-Select

SUM(L.SHARES_EXERCISED) &restrictd

  let #RestrictdExer = &restrictd

 from PS_ST_GRANT_EXER L
where L.EMPLID              = $Emplid
  and L.STOCK_ID            = $StockId
  and L.EXERCISE_DT        <= $AsOfDate
  and L.EXERCISE_STATUS     = 'A'
  and L.RESTRICTD_EXERCISE  = 'Y'
  and L.GRANT_NBR           = $GrantNbr

End-Select

End-Procedure Get-Repurchable

!-----------------------------------------------------------------------
! Section: Get-Releaseable
! Descr:   Retrieves all shares exercised for a particular grant number.
!-----------------------------------------------------------------------
Begin-Procedure Get-Releaseable

  let #Relable1 = 0

Begin-Select

SUM(M.SHARES_VESTED - M.SHARES_EXERCISED) &relable

  let #Relable1 = &relable

 from PS_ST_STOP008_TBL M
where M.DATETIME_STAMP      = $CurrentTime
  and M.PROCESSINSTANCE     = #Instance
  and M.STOCK_ID            = $StockId
  and M.GRANT_NBR           = $GrantNbr
  and M.EMPLID              = $Emplid
  and M.VEST_DT            <= $AsOfDate
  and (M.VEST_DT            < M.VEST_SUSPEND_DT
   or M.VEST_SUSPEND_DT    is null)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan #Repurchable #Cost #Relable into StockPlan(1) StockPlan Repurchable Cost Relable
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #Repurchable #Cost #Relable to StockPlan(#Row) Repurchable Cost Relable
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #Repurchable #Cost #Relable into StockPlan(#PlanCount) StockPlan Repurchable Cost Relable
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Routine
!-----------------------------------------------------------------------

  print $Name                                              (+1,001,030)
  print $Emplid                                            (  ,032,011)
  do Format-DateTime ($GrantDt, $GrantDt, {DEFDATE}, '', '')
  print $GrantNbr                                          (  ,045,012)
  print $OptionType                                        (  ,059,011)
  print $StockPlan                                         (  ,072,010)
  print #GrantPrice                                        (  ,084,022) edit $$$,$$$,$99,999.999999
  print #Repurchable                                       (  ,108,022) edit 999,999,999,999.999999
  print #Cost                                              (  ,132,022) edit $$9,999,999,999.999999
  print #Relable                                           (  ,156,022) edit 999,999,999,999.999999
  print $GrantDt                                           (+1,045,010)

  let #TypeRepurchable  = #TypeRepurchable  + #Repurchable
  let #TypeCost         = #TypeCost         + #Cost
  let #TypeRelable      = #TypeRelable      + #Relable
  let #TotalRepurchable = #TotalRepurchable + #Repurchable
  let #TotalCost        = #TotalCost        + #Cost
  let #TotalRelable     = #TotalRelable     + #Relable

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Type-Totals
! Descr:   Prints option type totals
!-----------------------------------------------------------------------
Begin-Procedure Print-Type-Totals

  if #TypeRepurchable > 0
    let $OptionTotalLbl = $OptionType || ' ' || $TotLbl || ':'
    print '-'                                              (+1,108,070) fill
    print $OptionTotalLbl                                  (+1,094,012) bold
    print #TypeRepurchable                                 (  ,108,022) bold edit 999,999,999,999.999999
    print #TypeCost                                        (  ,132,022) bold edit $$9,999,999,999.999999
    print #TypeRelable                                     (  ,156,022) bold edit 999,999,999,999.999999
    print ''                                               (+1,   ,   )
  end-if

  let #TypeRepurchable = 0
  let #TypeCost        = 0
  let #TypeRelable     = 0

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints report totals
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  print '-'                                                (+1,108,070) fill
  print '-'                                                (+1,108,070) fill
  print $TotLbl                                            (+1,094,005) bold
  print ':'                                                (  ,   ,001) bold
  print #TotalRepurchable                                  (  ,108,022) bold edit 999,999,999,999.999999
  print #TotalCost                                         (  ,132,022) bold edit $$9,999,999,999.999999
  print #TotalRelable                                      (  ,156,022) bold edit 999,999,999,999.999999

  print $PlanLbl                                           (+2,094,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #Repurchable #Cost #Relable from StockPlan(#Row) StockPlan Repurchable Cost Relable
    print $StockPlan                                       (+1,094,010) bold
    print #Repurchable                                     (  ,108,022) bold edit 999,999,999,999.999999
    print #Cost                                            (  ,132,022) bold edit $$9,999,999,999.999999
    print #Relable                                         (  ,156,022) bold edit 999,999,999,999.999999
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  let #AvgGrantPrice  =  round((#TotalPrice / #AvgCount),6)

  print $GrantPriceLbl                                     (+2,094,011) bold underline
  print $HiLbl                                             (+1,098,002) bold
  print ':'                                                (  ,   ,001) bold
  print #MaxPrice                                          (  ,115,013) bold edit $9,999.999999
  print $AvgLbl                                            (+1,098,003) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgGrantPrice                                     (  ,115,013) bold edit $9,999.999999
  print $LowLbl                                            (+1,098,003) bold
  print ':'                                                (  ,   ,001) bold
  print #LowPrice                                          (  ,115,013) bold edit $9,999.999999

End-Procedure

!-----------------------------------------------------------------------
! Section: Delete-Temp
! Descr:   Delete all the info that we inserted into the temp table.
!-----------------------------------------------------------------------
Begin-Procedure Delete-Temp

  let $Procedure = 'Delete-Temp'
  let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
delete from PS_ST_STOP008_TBL
where DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'curdttim.sqc'                !Procedures: Get-Current-DateTime
#include 'eoj.sqc'                     !End of Report Format
#include 'number.sqc'                  !Procedures: Init-Number
#include 'datetime.sqc'                !Procedures: Init-Datetime
#include 'prcsapi.sqc'                 !Process Scheduler API
#include 'prcsdef.sqc'                 !update Process Open_Trans variable declaration
#include 'reset.sqc'                   !Reset printer procedure
#include 'strunctl.sqc'                !Stock Admin's Run Control Record
#include 'askaod.sqc'                  !Prompts for date range
#include 'getrplng.sqc'                !Gets the report language
#include 'sqrtrans.sqc'
#include 'datemath.sqc'
#include 'readxlat.sqc'
#include 'sqlerr.sqc'                  !SQL error processing
#include 'tranctrl.sqc'
