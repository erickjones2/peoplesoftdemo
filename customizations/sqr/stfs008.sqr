!-----------------------------------------------------------------------
! Report Name: STFS008.SQR - FAS 123 Purchase Expense Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:52:09                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!
!-----------------------------------------------------------------------
! Program Descr: This report prints the valuation detail created during
!                the grant valuation process.
!-----------------------------------------------------------------------
! Options:       None
! Tables:        ST_OFFER_EST
!                ST_OFFER_VALUE
!                ST_OFFERING_PD
!                ST_VALUE_TBL
!                ST_OFFR_VAL_DTL
!                ST_ESPP_PURCH
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Main-Process
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all procedures for
!          printing the optional heading
!-----------------------------------------------------------------------
Begin-Heading 08

  #Include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)
  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center
  print $ValueMethodXlat                                   (+1,   ,   ) center

  print $CurrentLbl                                        (+2,171,007)

  print $PotentialLbl                                      (+1,088,009)
  print $ValueLbl                                          (  ,105,005)
  print $EstimatedLbl                                      (  ,118,009)
  print $ActualLbl                                         (  ,138,006)
  print $NetLbl                                            (  ,158,003)
  print $PeriodLbl                                         (  ,172,006)

  print $OfferingLbl                                       (+1,001,012)
  print $GrantDtLbl                                        (  ,014,010)
  print $PurchasePdLbl                                     (  ,026,015)
  print $ContribLbl                                        (  ,051,013)
  print $GrantPriceLbl                                     (  ,066,011)
  print $SharesLbl                                         (  ,091,006)
  print $PerShareLbl                                       (  ,101,009)
  print $ValuationLbl                                      (  ,118,009)
  print $ValuationLbl                                      (  ,135,009)
  print $AdjustmentLbl                                     (  ,151,010)
  print $ExpenseLbl                                        (  ,171,007)
  print '-'                                                (+1,001,177) fill bold

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STFS008'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.
                           
  if $prcs_process_instance = ''

  else
    do Get-SQR-Parms
  end-if

  do Init-Variables

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STFS007')
  do Append_Report_Translation ('STFS008')

  do Get_Field_Information ('STOCK',  'STOCK_ID',      $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',  'FROM',          $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',  'THRU',          $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',  'OFFERING_ID',   $OfferingLbl,    #DW)
  do Get_Field_Information ('STOCK',  'TOTAL',         $TotalLbl,       #DW)
  do Get_Field_Information ('STOCK',  'GRANT_DT',      $GrantDtLbl,     #DW)
  do Get_Field_Information ('STOCK',  'GRANT_PRICE',   $GrantPriceLbl,  #DW)
  do Get_Field_Information ('STOCK',  'SHARES',        $SharesLbl,      #DW)
  do Get_Field_Information ('STOCK',  'VALUE',         $ValueLbl,       #DW)
  do Get_Field_Information ('STOCK',  'PER_SHARE',     $PerShareLbl,    #DW)
  do Get_Field_Information ('STFS007','VALUATION',     $ValuationLbl,   #DW)
  do Get_Field_Information ('STFS007','EXPENSE',       $ExpenseLbl,     #DW)
  do Get_Field_Information ('STFS007','ADJUSTMENT',    $AdjustmentLbl,  #DW)
  do Get_Field_Information ('STFS007','TOTAL_NET',     $TotalNetLbl,    #DW)
  do Get_Field_Information ('STFS007','CURRENT',       $CurrentLbl,     #DW)
  do Get_Field_Information ('STFS007','PRIOR',         $PriorLbl,       #DW)
  do Get_Field_Information ('STFS007','FUTURE',        $FutureLbl,      #DW)
  do Get_Field_Information ('STFS007','EXPENSE_TYPE',  $ExpenseTypeLbl, #DW)
  do Get_Field_Information ('STFS007','VALUE_METHOD',  $ValueMethodLbl, #DW)
  do Get_Field_Information ('STFS008','POTENTIAL',     $PotentialLbl,   #DW)
  do Get_Field_Information ('STFS008','PURCHASE_PD',   $PurchasePdLbl,  #DW)
  do Get_Field_Information ('STFS008','ESTIMATED',     $EstimatedLbl,   #DW)
  do Get_Field_Information ('STFS008','ACTUAL',        $ActualLbl,      #DW)
  do Get_Field_Information ('STFS008','NET',           $NetLbl,         #DW)
  do Get_Field_Information ('STFS008','PERIOD',        $PeriodLbl,      #DW)
  do Get_Field_Information ('STFS008','CONTRIBUTIONS', $ContribLbl,     #DW)
  do Get_Field_Information ('STFS008','SUMMARY_PURCH', $SummaryPurchLbl,#DW)
  do Get_Field_Information ('STFS008','REPORT_TITLE',  $ReportTitle,    #DW)

End-Procedure Report-Translation

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId            = rtrim($RC_STOCK_ID,' ')
  let $ValuationMethod   = rtrim($RC_ST_VALUE_METHOD,' ')
  let $RC_FromDate        = rtrim($RC_FromDate,' ')
  let $RC_ThruDate        = rtrim($RC_ThruDate,' ')
  let #OfferCount         = 0
  let $SQLQuote           = ''''
  do Convert-To-DTU-Date($RC_FromDate,$FromDate)
  do Convert-To-DTU-Date($RC_ThruDate,$ThruDate)

  move $ValuationMethod to $FieldValue
  move 'ST_VALUE_METHOD' to $Fieldname
  do Read-Translate-Table
  let $ValueMethodXlat    = rtrim($Xlatlongname,' ')

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main process
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

Begin-Select

A.OFFERING_ID                                              (  ,   ,   ) on-break print=never procedure=Print-Offering-Detail
A.GRANT_DT
A.PERIOD_END_DT
A.ST_EST_CONTRIB
B.STOCK_PLAN_TYPE
B.STOCK_PLAN
C.PERIOD_END_DT
E.PERIOD_BEGIN_DT

  let $OfferingID      = rtrim(&a.offering_id, ' ')
  let $BeginDt         = rtrim(&a.grant_dt, ' ')
  let $EndDt           = rtrim(&a.period_end_dt, ' ')
  let #EstContrib      = &a.st_est_contrib
  let $StockPlanType   = rtrim(&b.stock_plan_type, ' ')
  let $StockPlan       = rtrim(&b.stock_plan, ' ')
  let $PurchBeginDt    = rtrim(&e.period_begin_dt, ' ')
  let $OfferEndDt      = rtrim(&c.period_end_dt, ' ')
!  do Convert-To-DTU-Date($BeginDt     ,$BeginDtDtu)
  do Convert-To-DTU-Date($PurchBeginDt,$BeginDtDtu)
  do Convert-To-DTU-Date($EndDt       ,$EndDtDtu)
  do Convert-To-DTU-Date($PurchBeginDt,$PurchBeginDtDtu)
  do Convert-To-DTU-Date($OfferEndDt  ,$OfferEndDtDtu)
  do dtu-diff-days($BeginDtDtu, $EndDtDtu, #Days)

  let #Days            = #Days  + 1
  let #EstValue        = 0
  let #ActValue        = 0
  let #NetAdjust       = 0
  let #Contributions   = 0
  let #PotentialShares = 0
  let #CurrentDays     = 0
  let #PriorDays       = 0
  let #FutureDays      = 0
  let #CurrentExpense  = 0
  let #PriorExpense    = 0
  let #FutureExpense   = 0
  let #ExpensePerDay   = 0

  if $ValuationMethod = 'S'
    let $WhereBeginDt = 'AND G.PERIOD_BEGIN_DT =  ' || $SQLQuote || $BeginDt || $SQLQuote
    let $WhereEndDt   = 'AND G.PERIOD_END_DT = ' || $SQLQuote || $OfferEndDt || $SQLQuote
    do Select-Value-Per-Share
  else
    let $WhereBeginDt = 'AND G.PERIOD_BEGIN_DT =  ' || $SQLQuote || $BeginDt || $SQLQuote
    let $WhereEndDt   = 'AND G.PERIOD_END_DT = ' || $SQLQuote || $EndDt || $SQLQuote
    do Select-Value-Per-Share
  end-if

  if #EstContrib > 0
    if #GrantPrice > 0
      let #Contributions = #EstContrib
      let #EstValue      = (#EstContrib / #GrantPrice) * #ValuePerShare
      let #ExpensePerDay = #EstValue / #Days
    end-if
  end-if
  do Select-Actual-Contributions
  if #ActContrib > 0
    if #GrantPrice > 0
      let #Contributions = #ActContrib
      let #ActValue      = (#ActContrib / #GrantPrice) * #ValuePerShare
      let #ExpensePerDay = #ActValue / #Days
    end-if
  end-if
  if #EstValue > 0
    and #ActValue > 0
    let #NetAdjust       = #ActValue - #EstValue
  end-if

  let #PotentialShares = #Contributions / #GrantPrice

  if $FromDate > $EndDtDtu
    do dtu-diff-days($BeginDtDtu,$EndDtDtu,#PriorDays)
    let #PriorDays   = #PriorDays + 1
  end-if

  if $FromDate > $BeginDtDtu
    and $FromDate <= $EndDtDtu
    and $ThruDate >= $EndDtDtu
    do dtu-diff-days($FromDate,$EndDtDtu,#CurrentDays)
    do dtu-diff-days($BeginDtDtu,$FromDate,#PriorDays)
    let #CurrentDays = #CurrentDays + 1
  end-if

  if $FromDate > $BeginDtDtu
    and $FromDate < $EndDtDtu
    and $ThruDate > $BeginDtDtu
    and $ThruDate < $EndDtDtu
    do dtu-diff-days($FromDate,$ThruDate,#CurrentDays)
    do dtu-diff-days($BeginDtDtu,$FromDate,#PriorDays)
    do dtu-diff-days($ThruDate,$EndDtDtu,#FutureDays)
    let #CurrentDays = #CurrentDays + 1
  end-if

  if $FromDate <= $BeginDtDtu
    and $ThruDate >= $EndDtDtu
    do dtu-diff-days($BeginDtDtu,$EndDtDtu,#CurrentDays)
    let #CurrentDays = #CurrentDays + 1
  end-if

  if $FromDate <= $BeginDtDtu
    and $ThruDate >= $BeginDtDtu
    and $ThruDate < $EndDtDtu
    do dtu-diff-days($BeginDtDtu,$ThruDate,#CurrentDays)
    do dtu-diff-days($ThruDate,$EndDtDtu ,#FutureDays)
    let #CurrentDays = #CurrentDays + 1
  end-if

  if $ThruDate < $BeginDtDtu
    do dtu-diff-days($BeginDtDtu,$EndDtDtu,#FutureDays)
    let #FutureDays  = #FutureDays + 1
  end-if

  let #CurrentExpense = #CurrentDays * #ExpensePerDay
  let #PriorExpense   = #PriorDays   * #ExpensePerDay
  let #FutureExpense  = #FutureDays  * #ExpensePerDay

  do Print-Detail

from  PS_ST_OFFER_EST   A,
      PS_ST_OFFER_VALUE B,
      PS_ST_OFFERING_PD C,
      PS_ST_VALUE_TBL   D,
      PS_ST_PURCHASE_PD E,
      PS_ST_ESPP_PLAN   F
where A.STOCK_ID         = $StockId
  and A.STOCK_ID         = B.STOCK_ID
  and A.STOCK_PLAN_TYPE  = B.STOCK_PLAN_TYPE
  and A.STOCK_PLAN       = B.STOCK_PLAN
  and A.OFFERING_ID      = B.OFFERING_ID
  and A.STOCK_ID         = C.STOCK_ID
  and A.STOCK_PLAN_TYPE  = C.STOCK_PLAN_TYPE
  and A.STOCK_PLAN       = C.STOCK_PLAN
  and A.OFFERING_ID      = C.OFFERING_ID
  and C.OFFERING_STATUS  = 'A'
  and C.PERIOD_BEGIN_DT <= $RC_ThruDate
  and C.PERIOD_END_DT   >= $RC_FromDate
  and B.STOCK_ID         = D.STOCK_ID
  and B.ST_VALUATION_ID  = D.ST_VALUATION_ID
  and D.ST_VALUE_METHOD  = $ValuationMethod
  and A.STOCK_ID         = E.STOCK_ID
  and A.STOCK_PLAN_TYPE  = E.STOCK_PLAN_TYPE
  and A.STOCK_PLAN       = E.STOCK_PLAN
  and A.OFFERING_ID      = E.OFFERING_ID
  and A.PERIOD_END_DT    = E.PERIOD_END_DT
  and A.STOCK_ID         = F.STOCK_ID
  and A.STOCK_PLAN_TYPE  = F.STOCK_PLAN_TYPE
  and A.STOCK_PLAN       = F.STOCK_PLAN
  and F.EFFDT            = (select MAX(EFFDT)
                              from PS_ST_ESPP_PLAN
                             where STOCK_ID        = F.STOCK_ID
                               and STOCK_PLAN_TYPE = F.STOCK_PLAN_TYPE
                               and STOCK_PLAN      = F.STOCK_PLAN
                               and EFFDT          <= $RC_ThruDate )
  and F.ST_FAS_COMP_PLAN = 'Y'
order by A.OFFERING_ID,
         A.GRANT_DT,
         A.PERIOD_END_DT

End-Select

  if #OfferCount > 0
    do Print-Offering-Detail
  end-if
  do Print-Summary

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Value-Per-Share
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Select-Value-Per-Share

  let #ValuePerShare = 0
  let #GrantPrice    = 0

Begin-Select

G.ST_VALUE_PER_SHARE
G.GRANT_PRICE

  let #ValuePerShare = &g.st_value_per_share
  let #GrantPrice    = &g.grant_price

from  PS_ST_OFFR_VAL_DTL G
where G.STOCK_ID        = $StockId
  and G.STOCK_PLAN_TYPE = $StockPlanType
  and G.STOCK_PLAN      = $StockPlan
  and G.OFFERING_ID     = $OfferingID
[$WhereBeginDt]
[$WhereEndDt]

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Actual-Contributions
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Select-Actual-Contributions

  let #ActContrib      = 0

Begin-Select

SUM(H.ESPP_PURCHASE_AMT) &h.espp_purchase_amt

  let #ActContrib      = &h.espp_purchase_amt

from  PS_ST_ESPP_PURCH H
where H.STOCK_ID        = $StockId
  and H.STOCK_PLAN_TYPE = $StockPlanType
  and H.STOCK_PLAN      = $StockPlan
  and H.OFFERING_ID     = $OfferingID
  and H.PERIOD_END_DT   = $EndDt
  and H.GRANT_DT        = $BeginDt
  and H.CONFIRMED       = 'Y'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail

  print $OfferingID                                        (+1,001,010)
  do Format-DateTime ($BeginDt,$Date, {DEFDATE}, '', '')
  print $Date                                              (  ,014,010)
  do Format-DateTime ($PurchBeginDt,$Date1, {DEFDATE}, '', '')
  do Format-DateTime ($EndDt       ,$Date2, {DEFDATE}, '', '')
  let $Date = $Date1 || '-' || $Date2

  let #EstValue        = round(#EstValue,2)
  let #ActValue        = round(#ActValue,2)
  let #NetAdjust       = round(#NetAdjust,2)
  let #CurrentExpense  = round(#CurrentExpense,2)
  let #PriorExpense    = round(#PriorExpense,2)
  let #FutureExpense   = round(#FutureExpense,2)
  let #Contributions   = round(#Contributions,2)
  let #PotentialShares = round(#PotentialShares,6)

  print $Date                                              (  ,026,021)
  print #Contributions                                     (  ,049,015) edit $999,999,999.99
  print #GrantPrice                                        (  ,066,011) edit $999.999999
  print #PotentialShares                                   (  ,079,018) edit 999,999,999.999999
  print #ValuePerShare                                     (  ,099,011) edit $999.999999
  print #EstValue                                          (  ,112,015) edit $999,999,999.99
  print #ActValue                                          (  ,129,015) edit $999,999,999.99
  print #NetAdjust                                         (  ,146,015) edit $999,999,999.99
  print #CurrentExpense                                    (  ,163,015) edit $999,999,999.99

  let #OfferEstValue       = #OfferEstValue       + #EstValue
  let #OfferActValue       = #OfferActValue       + #ActValue
  let #OfferNetAdjust      = #OfferNetAdjust      + #NetAdjust
  let #OfferCurrentExpense = #OfferCurrentExpense + #CurrentExpense
  let #OfferContribution   = #OfferContribution   + #Contributions
  let #OfferPotential      = #OfferPotential      + #PotentialShares

  let #TotalEstValue       = #TotalEstValue       + #EstValue
  let #TotalActValue       = #TotalActValue       + #ActValue
  let #TotalNetAdjust      = #TotalNetAdjust      + #NetAdjust
  let #TotalCurrentExpense = #TotalCurrentExpense + #CurrentExpense
  let #TotalPriorExpense   = #TotalPriorExpense   + #PriorExpense
  let #TotalFutureExpense  = #TotalFutureExpense  + #FutureExpense
  let #TotalContribution   = #TotalContribution   + #Contributions
  let #TotalPotential      = #TotalPotential      + #PotentialShares

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Offering-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Offering-Detail

  print #OfferContribution                                 (+1,049,015) edit $999,999,999.99 bold
  print #OfferPotential                                    (  ,079,018) edit 999,999,999.999999 bold
  print #OfferEstValue                                     (  ,112,015) edit $999,999,999.99 bold
  print #OfferActValue                                     (  ,129,015) edit $999,999,999.99 bold
  print #OfferNetAdjust                                    (  ,146,015) edit $999,999,999.99 bold
  print #OfferCurrentExpense                               (  ,163,015) edit $999,999,999.99 bold
  print ''                                                 (+1,   ,   )

  let #OfferEstValue       = 0
  let #OfferActValue       = 0
  let #OfferNetAdjust      = 0
  let #OfferCurrentExpense = 0
  let #OfferContribution   = 0
  let #OfferPotential      = 0
  let #OfferCount          = #OfferCount + 1

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Summary
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Summary

  print $TotalLbl                                          (+2,037,005) bold
  print ':'                                                (  ,   ,   ) bold
  print #TotalContribution                                 (  ,049,015) edit $999,999,999.99 bold
  print #TotalPotential                                    (  ,079,018) edit 999,999,999.999999 bold
  print #TotalEstValue                                     (  ,112,015) edit $999,999,999.99 bold
  print #TotalActValue                                     (  ,129,015) edit $999,999,999.99 bold
  print #TotalNetAdjust                                    (  ,146,015) edit $999,999,999.99 bold
  print #TotalCurrentExpense                               (  ,163,015) edit $999,999,999.99 bold

  print $SummaryPurchLbl                                   (+2,037,027) bold underline
  print $PriorLbl                                          (+1,037,005) bold
  print ':'                                                (  ,   ,   ) bold
  print #TotalPriorExpense                                 (  ,049,015) edit $999,999,999.99 bold
  print $CurrentLbl                                        (+1,037,007) bold
  print ':'                                                (  ,   ,   ) bold
  print #TotalCurrentExpense                               (  ,049,015) edit $999,999,999.99 bold
  print $FutureLbl                                         (+1,037,006) bold
  print ':'                                                (  ,   ,   ) bold
  print #TotalFutureExpense                                (  ,049,015) edit $999,999,999.99 bold

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   ! Gets the report language
