!***************************************************************************
!  GPMXIM14:  SUA - EMPLOYEE TRANSACTIONS INTERFACE                        *
!                                                                          *
!***************************************************************************
!***************************************************************************
!                                                                          *
!                                                                          *
!                                                                          *
!                                                                          *
! This software and related documentation are provided under a             *
! license agreement containing restrictions on use and                     *
! disclosure and are protected by intellectual property                    *
! laws. Except as expressly permitted in your license agreement            *
! or allowed by law, you may not use, copy, reproduce,                     *
! translate, broadcast, modify, license, transmit, distribute,             *
! exhibit, perform, publish or display any part, in any form or            *
! by any means. Reverse engineering, disassembly, or                       *
! decompilation of this software, unless required by law for               *
! interoperability, is prohibited.                                         *
! The information contained herein is subject to change without            *
! notice and is not warranted to be error-free. If you find any            *
! errors, please report them to us in writing.                             *
!                                                                          *
!                                                                          *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.                  *
! All Rights Reserved.                                                     *
!***************************************************************************
!                                                                          *
!       $Release:  HR92                                                *
!           $Bug:  31781263                                            *
!                                                                          *
!***************************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !printer and page-size initialization

#define c1 1
#define c2 20
#define c3 70
#define c4 90
#define c5 110
#define c6 125
#define c7 140
#define c8 172
#define c9 165
#define c98 159
#define c99 168

begin-program
  do InitProcessing
  do init-report
  do Stdapi-Term
end-program

begin-procedure InitProcessing
  do Init-dateTime                  !In datetime.sqc
  do Init-Number                    !In number.sqc
  do Get-Current-DateTime           !In prcsapi.sqc (curdttim.sqc)
  do Define-Prcs-Vars               !In prcsapi.sqc (prcsdef.sqc)
  do Get-Run-Control-Parms          !In prcsapi.sqc
  date-time () hh:mi:ss &timeBegan
  do Get-PsOptions-Language($Curr_language_Cd)
end-procedure InitProcessing

begin-procedure Init-Report
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL - DELEGACIÓN DEL IMSS'  to $ReportTitle1
  move   'INTERFACE MOVIMIENTOS EMPLEADOS'                             to $ReportTitle2
  move   'GPMXIM14' to $ReportID
  display $ReportTitle1
  display $ReportTitle2
  display $ReportID
  Let $Ver = 'Ver.2020 PUM37.01'
  display $Ver
  do Delete-R-SUAMOV
  do Select-Parameters
  display ''
  display 'TRABAJADORES IMPROCEDENTES - | DATOS INVÁLIDOS |'
  do Process-SUA
end-procedure Init-Report

begin-heading 12
  print 'PeopleSoft'            (1,)  center
  uppercase $ReportTitle1
  print     $ReportTitle1       (2,)  center
  uppercase $ReportTitle2
  print     $ReportTitle2       (3,)  center
  print 'Página:'               (5,{c98})
  page-number                   (,{c99})
  print 'Hora:'                 (6,{c98})
  print $ReportTime             (,{c99})
  print 'Fecha:'                (7,{c98})
  print $ReportDate             (,{c99})
  print 'Reporte:'              (5,1)
  print $ReportID               (,20)
  print 'Compañía:'             (+1,1)
  do to_upper($CompanyName)
  print $CompanyName            (,20)
  if $print_Estab = 'Y'
     print 'Registro Patronal:' (+1,1)
     print $Estabid             (,20) edit XXXXXXXXXX-X
     do to_upper($Estab_Name)
     print $Estab_Name          (,+2)
  end-if  
  do Convert-To-DTU-Date($BegDt,$BegDtP)
  let $BegDtP = substr($BegDtP,9,2) || '-' || substr($BegDtP,6,2) || '-' || substr($BegDtP,1,4)
  do Convert-To-DTU-Date($EndDt,$EndDtP)
  let $EndDtP = substr($EndDtP,9,2) || '-' || substr($EndDtP,6,2) || '-' || substr($EndDtP,1,4)
  let $DateRange = 'del ' || $BegDtP || ' al ' || $EndDtP
  print 'Rango:'                (+1,1)
  print $DateRange              (,20)
  if $Capped = 'Y'
     print '*** Con Tope ***'   (+1,1)
  else
     print '*** Sin Tope ***'   (+1,1) 
  end-if
  print '='                     (+1,1,177)fill
  print 'Código de'             (+1,{c1})
  print 'Nombre del Empleado'   (,{c2})
  print 'Afiliación'            (,{c3})
  print 'Tipo de'               (,{c4})
  print 'Fecha de'              (,{c5})
  print 'Folio de'              (,{c6})
  print 'Días de'               (,{c7})
  print 'S.D.I.'                (,{c8})
  print 'Empleado'              (+1,{c1})
  print 'I.M.S.S'               (,{c3})
  print 'Movimiento'            (,{c4})
  print 'Movimiento'            (,{c5})
  print 'Incapacidad'           (,{c6})
  print 'Incidencia'            (,{c7})
  print '='                     (+1,1,177)fill
end-heading

begin-procedure Select-Parameters
!show 'v B1_0307'
  let $Where_Dt = ''
  let $Where_Estab = ''
  let $Where_Estab_A = ''
  let $Where_Estab_B = ''
  let $WhereClause = ''
  let $WhereClause_A = ''
  let $WhereClause_B = ''
begin-select
SUARNCTL.OPRID
SUARNCTL.RUN_CNTL_ID
SUARNCTL.BEGIN_DT
SUARNCTL.END_DT
SUARNCTL.ESTABID
SUARNCTL.COMPANY
SUARNCTL.GPMX_CAPPED
SUARNCTL.LOCATION
SUARNCTL.BUSINESS_UNIT
SUARNCTL.GPMX_ESTABID_OPTN

  let $BegDt   = &SUARNCTL.BEGIN_DT
  let $EndDt   = &SUARNCTL.END_DT
  let $COMPANY = &SUARNCTL.COMPANY
  let $Estabid = rtrim(&SUARNCTL.ESTABID,' ')
  let $Capped  = rtrim(&SUARNCTL.GPMX_CAPPED,' ')
  let $RCLocation   = Rtrim(&SUARNCTL.LOCATION, ' ')
  let $RCBusinessUnit = Rtrim(&SUARNCTL.BUSINESS_UNIT, ' ')
  Let $Estab_Opt = &SUARNCTL.GPMX_ESTABID_OPTN
  
  if $Estabid <> ''
     let $print_Estab   = 'Y'
     If $Estab_Opt = 'L'
       let $Where_Estab = $Where_Estab || ' AND J.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
       let $Where_Estab = $Where_Estab || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
       let $Where_Estab = $Where_Estab || ' AND LOC.SETID = J.SETID_LOCATION AND LOC.LOCATION = J.LOCATION'
       let $Where_Estab = $Where_Estab || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
       let $Where_Estab = $Where_Estab || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'
       let $Where_Estab_A = $Where_Estab_A || ' AND JO.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
       let $Where_Estab_A = $Where_Estab_A || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
       let $Where_Estab_A = $Where_Estab_A || ' AND LOC.SETID = JO.SETID_LOCATION AND LOC.LOCATION = JO.LOCATION'
       let $Where_Estab_A = $Where_Estab_A || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
       let $Where_Estab_A = $Where_Estab_A || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'     
       
       let $Where_Estab_B = $Where_Estab_B || ' AND JBS.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
       let $Where_Estab_B = $Where_Estab_B || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
       let $Where_Estab_B = $Where_Estab_B || ' AND LOC.SETID = JBS.SETID_LOCATION AND LOC.LOCATION = JBS.LOCATION'
       let $Where_Estab_B = $Where_Estab_B || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
       let $Where_Estab_B = $Where_Estab_B || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'    
     Else
       Let $Where_Estab   = ' AND J.ESTABID = ''' || $Estabid || ''' ' 
       Let $Where_Estab_A = ' AND JO.ESTABID = ''' || $Estabid || ''' ' 
       Let $Where_Estab_B = ' AND JBS.ESTABID = ''' || $Estabid || ''' ' 
     End-if
  end-if
  if rtrim($BegDt,' ') <> ''
       let $Where_Dt = ' AND T.EFFDT   BETWEEN ' || '''' || $BegDt || '''' ||  ' AND ' || '''' ||  $EndDt || ''''
  else
       Let $Where_Dt = ' AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
       Let $Where_Dt = $Where_Dt || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
       Let $Where_Dt = $Where_Dt || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ') '     
  end-if
  If Rtrim($RCLocation, ' ') <> ''
       let $WhereClause = $WhereClause || ' AND J.LOCATION = ' || '''' ||$RCLocation || ''''
       let $WhereClause_A = $WhereClause_A || ' AND JO.LOCATION = ' || '''' ||$RCLocation || ''''
       let $WhereClause_B = $WhereClause_B || ' AND JBS.LOCATION = ' || '''' ||$RCLocation || ''''

  end-if  
  If Rtrim($RCBusinessUnit, ' ') <> ''
       let $WhereClause = $WhereClause || ' AND J.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
       let $WhereClause_A = $WhereClause_A || ' AND JO.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
       let $WhereClause_B = $WhereClause_B || ' AND JBS.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
 end-if  
 
FROM  PS_GPMX_RC_SUA001  SUARNCTL
WHERE SUARNCTL.OPRID = $Prcs_OprID
AND SUARNCTL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
  do Get-Company-Data-Mex
  
#Debug show ' $WhereClause   ' $WhereClause
#Debug show ' $Where_Estab   ' $Where_Estab
#Debug show ' $Where_Dt      ' $Where_Dt
#Debug show ' $WhereClause_A ' $WhereClause_A
#Debug show ' $Where_Estab_A ' $Where_Estab_A
#Debug show ' $WhereClause_B ' $WhereClause_B
#Debug show ' $Where_Estab_B ' $Where_Estab_B

end-procedure Select-Parameters

begin-procedure Delete-R-SUAMOV
Begin-SQL
DELETE FROM PS_GPMX_IM14_TMP
End-SQL
end-procedure

!**************************************
!  Proc:        Report-JOB
!  Desc:        Selects detail data from PS_JOB and PS_PERSON_NAME for
!               all employees within the IMSS Employer No./Location.
begin-procedure Report-JOB
!**************************************
let #ContReg = 0
Let $ETerminated = 'N'
Let #Error = 0
Let #Total = 0
Let $Error = ''
begin-SELECT DISTINCT
J.EMPLID              () ON-BREAK AFTER=Clean Print = Never 
J.LOCATION
T.EFFDT
T.GPMX_SDI_TOT
T.SUA_REASON_MEX
T.SEQNUM 
T.ORIG_CAL_RUN_ID
T.GPMX_SDI_FACTOR
J.ESTABID

  move 'Y' to $Report
  Let $ConsiderRow = 'Y'
  
  Let $Emplid         = Rtrim(&J.EMPLID, ' ')
  Let $Location       = Rtrim(&J.LOCATION, ' ')
  Let $MovmentDate    = &T.EFFDT
  Let #SDI            = &T.GPMX_SDI_TOT
  Let $Movment_Reason = Rtrim(&T.SUA_REASON_MEX, ' ')
  Let #SeqNum         = &T.SEQNUM
  Let $OrigCal        = Rtrim(&T.ORIG_CAL_RUN_ID, ' ')
  Let #SdiFactor      = &T.GPMX_SDI_FACTOR
    
  #Debug show '$Emplid: ' $Emplid ' $MovmentDate : ' $MovmentDate ' #SDI: ' #SDI '$Estab_Opt ' $Estab_Opt
  
  do Convert-To-DTU-Date($MovmentDate,$PrintDate1)
  let #DD = SUBSTR($PrintDate1,9,2)
  move #DD to $DD 09
  let #MM = SUBSTR($PrintDate1,6,2)
  move #MM to $MM 09
  let #YY = SUBSTR($PrintDate1,1,4)
  move #YY to $YY 9999
  
  IF $Estab_Opt = 'L'
    Do Get-Establishment
  Else
   
    Let $Estabid = RTrim(&J.ESTABID, ' ')
    Let $Reg_Patronal = $Estabid
    
    Do ProcessIMSS_Location
    
    let $Estab_Name = $LocationName
    Let $Estab_Effdt = $LocationEffdt
    do get_Estabid_Name
  End-if
    
  !Do DF-Minimum-Wage
  Do Previous-Value
  
  if $Capped = 'Y'
   Let $UMA_Effdt = $MovmentDate
   Do Get-Max-UMA
      if #SDI > #SDIMax
         let #SDI = #SDIMax
      end-if
  end-if
  
  evaluate $Movment_Reason
    when = '0020'
      Let $MovmentType = '02'
      if #SdiFactor > 0
       Let $ETerminated = 'Y'
      end-if
    when = '0030'
      Let $MovmentType = '07'
    when = '0040'
      Let $MovmentType = '08'
      if #SdiFactor > 0
       Let $RehireFlag = 'N'     !Rehire on max seqnum
      end-if
  end-evaluate
     
  Let  #SDI100 = #SDI * 100
  move #SDI100 to $SDIOUT 0009999
  move #SDI to $SDIPrint 99,999.90
   
  MOVE '        ' to $IncapacityNumber
  MOVE '00'       to $IncidentDays

  do get-IMSS-ID
  
  let #contemp = #contemp + 1
  let #ContReg = #ContReg + 1
 
  if (#SeqNum > 1)
    do Before-Sequences
  end-if
  
  if $Capped = 'Y'
     if (#Pre_cap = #SDIMax or #Pre_sdi = #SDI)
       if ($MovmentType <> '02' and #SdiFactor > 0)
         if ($MovmentType <> '08' and #SdiFactor > 0)
           Let $ConsiderRow = 'N'
         end-if
       end-if
     end-if
    else
     if $Capped = 'N'
      if #Pre_sdi = #SDI
        if ($MovmentType <> '02' and #SdiFactor > 0)
         if ($MovmentType <> '08' and #SdiFactor > 0)
          Let $ConsiderRow = 'N'
         end-if
        end-if
      end-if
     end-if
  end-if
  
  if (($MovmentType = '02' and #SdiFactor <= 0) or ($MovmentType = '08' and #SdiFactor <= 0))
    Let $ConsiderRow = 'N'   
  end-if
  
  if $ConsiderRow = 'Y'
   
    do Write-Rcd
  end-if

FROM  PS_GPMX_SDI_WA T,
      PS_JOB J
WHERE J.EMPLID       = T.EMPLID
AND   J.COMPANY      = $Company
AND   T.SEQNUM       = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                        WHERE T2.EMPLID        = T.EMPLID
                        AND   T2.EMPL_RCD      = T.EMPL_RCD
                        AND   T2.GP_PAYGROUP = T.GP_PAYGROUP
                        AND   T2.EFFDT         = T.EFFDT
                        AND   T2.SUA_REASON_MEX = T.SUA_REASON_MEX) 
AND   J.EFFDT        = (SELECT MAX(J1.EFFDT) FROM PS_JOB J1
                        WHERE J1.EMPLID   = J.EMPLID
                        AND   J1.EMPL_RCD = J.EMPL_RCD
                        AND   J1.EFFDT    <= T.EFFDT)                 
!AND   T.EFFDT        = (SELECT MAX(T2.EFFDT) FROM PS_GPMX_SDI_WA T2
!                        WHERE T2.EMPLID = T.EMPLID
!                        AND T2.EMPL_RCD = T.EMPL_RCD
!                        AND T2.EFFDT <= $EndDt
!                        AND T2.SUA_REASON_MEX  = T.SUA_REASON_MEX)
AND   J.EFFSEQ       = (SELECT MAX(J2.EFFSEQ) FROM PS_JOB J2
                        WHERE J2.EMPLID   = T.EMPLID
                        AND   J2.EMPL_RCD = T.EMPL_RCD
                        AND   J2.EFFDT    = J.EFFDT)
[$WhereClause]
[$Where_Estab]
[$Where_Dt]
AND T.SUA_REASON_MEX IN  ('0020','0030','0040')
!AND J.EMPL_STATUS = 'A'
ORDER BY J.EMPLID, T.EFFDT, T.SUA_REASON_MEX
END-SELECT

end-procedure Report-JOB

!**************************************
Begin-Procedure get-IMSS-ID
Begin-Select
P.NATIONAL_ID
  let $IMSS-ID = rtrim(&P.NATIONAL_ID,' ')
FROM PS_PERS_NID P
WHERE EMPLID = $Emplid
AND COUNTRY = 'MEX'
AND NATIONAL_ID_TYPE = 'IMSS'
End-Select
End-Procedure get-IMSS-ID


!**************************************
BEGIN-PROCEDURE REPORT-ABSENCE
BEGIN-SELECT DISTINCT
HIST.EMPLID     ()   ON-BREAK PRINT=NEVER  AFTER=Init-Cont
JO.LOCATION
JO.EMPL_STATUS
HIST.EVT_CONFIG1
ATA.ABS_TYPE_OPTN      &ATA.ABS_TYPE_OPTN
HIST.BGN_DT &HIST.BGN_DT
HIST.END_DT &HIST.END_DT
HIST.DURATION_ABS
HIST.PRC_EVT_ACTN_OPTN 
TB.GPMX_SDI_TOT
TB.EFFDT
TB.SEQNUM 
JO.ESTABID

  move 'Y' to $Report  
  Let $Emplid        = Rtrim(&HIST.EMPLID, ' ')
  Let $ActnOptn      = Rtrim(&HIST.PRC_EVT_ACTN_OPTN, ' ')
  Let #SDI           = &TB.GPMX_SDI_TOT
  Let #IncidentDays  = &HIST.DURATION_ABS
  Let $MovmentDate   = &TB.EFFDT
  Let #SeqNum        = &TB.SEQNUM
  
  
  If $ActnOptn <> 'V'
    Let $Location         = Rtrim(&JO.LOCATION, ' ')
    Let $Absence_Optn     = Rtrim(&ATA.ABS_TYPE_OPTN, ' ')   
    Let $MovmentDate      = &HIST.BGN_DT
    Let $IncapacityNumber = &HIST.EVT_CONFIG1
    Let $ENDDTH           = &HIST.END_DT
    
    IF $Estab_Opt = 'L'
     
      Do Get-Establishment
       
    Else
      Let $Estabid = RTrim(&JO.ESTABID, ' ')
      Let $Reg_Patronal = $Estabid
      
      Do ProcessIMSS_Location
      
      let $Estab_Name = $LocationName
      Let $Estab_Effdt = $LocationEffdt
      do get_Estabid_Name
    End-if
  
    !Do DF-Minimum-Wage
    #Debug show 'ABS $Emplid: ' $Emplid  ' $MovmentDate ' $MovmentDate ' #SDI ' #SDI
    if $Capped = 'Y'
     Let $UMA_Effdt = $MovmentDate
     Do Get-Max-UMA
          if #SDI > #SDIMax
             let #SDI = #SDIMax
          end-if
    end-if
    
    Let #SDI100 = #SDI * 100
    move #SDI to $SDIPrint 99,999.90  
    move #SDI100 to $SDIOUT 0009999
    
        
    do Convert-To-DTU-Date($MovmentDate,$PrintDate1)
    Let #DD = SUBSTR($PrintDate1,9,2)
    move #DD TO $DD 09
    Let #MM = SUBSTR($PrintDate1,6,2)
    move #MM TO $MM 09
    Let #YY = SUBSTR($PrintDate1,1,4)
    move #YY TO $YY 9999
     
    if $Absence_Optn = 'ABS'
      let $MovmentType  = '11'
      let $IncapacityNumber = '        '
    else
      let $MovmentType = '12'
      let $IncapacityNumber =  SUBSTR($IncapacityNumber,1,8)
    end-if
      
    if $AbsenceType = 'ABS'
     if #Abs_Count > 14
       Let #IncidentDays = 0
     else
       Let #Auxcont = #Abs_Count + #IncidentDays
       if #Auxcont >= 14
         Let #IncidentDays = 14 - #Abs_Count
         Let #Abs_Count = #Auxcont
       else
         Let #Abs_Count = #Auxcont
       end-if
     end-if
    end-if
   
   move #IncidentDays TO $IncidentDays 09
   if #IncidentDays > 0
      do get-IMSS-ID
      do Write-Rcd
      let #contemp = #contemp + 1
      let #ContReg = #ContReg + 1
   end-if
  end-if

FROM PS_GP_ABS_EVENT HIST,
     PS_GP_ABS_TAKE  ATA,
     PS_JOB          JO,
     PS_GPMX_SDI_WA  TB
WHERE JO.EMPLID       = TB.EMPLID
AND   HIST.EMPLID     = JO.EMPLID
AND   JO.EMPL_RCD     = TB.EMPL_RCD
AND   JO.COMPANY      = $Company
AND   HIST.BGN_DT BETWEEN $BegDt AND $EndDt
AND   HIST.VOIDED_IND = 'N'
AND   HIST.PIN_TAKE_NUM = ATA.PIN_NUM
AND   ATA.EFFDT         = (SELECT MAX(AT1.EFFDT) FROM PS_GP_ABS_TAKE AT1
                           WHERE AT1.PIN_NUM = ATA.PIN_NUM
                           AND   AT1.EFFDT <= $EndDt
                           AND   AT1.EFF_STATUS    = 'A')
AND   ATA.ABS_TYPE_OPTN IN ('ABS','ENF','MAT','RSG','RST', 'LEN', 'ENT')
AND   JO.EFFDT          = (SELECT MAX(EFFDT) FROM PS_JOB J1
                           WHERE J1.EMPLID = JO.EMPLID
                           AND J1.EMPL_RCD = JO.EMPL_RCD
                           AND J1.EFFDT   <= TB.EFFDT)
AND   JO.EFFSEQ         = (SELECT MAX(JO1.EFFSEQ) FROM PS_JOB JO1
                           WHERE JO1.EMPLID = JO.EMPLID
                           AND JO1.EMPL_RCD = JO.EMPL_RCD
                           AND JO1.EFFDT = JO.EFFDT)
AND   TB.EFFDT           = (SELECT MAX(T3.EFFDT) FROM PS_GPMX_SDI_WA T3
                           WHERE T3.EMPLID        = TB.EMPLID
                           AND   T3.EMPL_RCD      = TB.EMPL_RCD
                           AND   T3.EFFDT         <= HIST.BGN_DT)
AND   TB.SEQNUM          = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                           WHERE T2.EMPLID        = TB.EMPLID
                           AND   T2.EMPL_RCD      = TB.EMPL_RCD
                           AND   T2.EFFDT         = TB.EFFDT)
[$WhereClause_A]
[$Where_Estab_A]
!AND JO.EMPL_STATUS = 'A'
ORDER BY HIST.EMPLID,HIST.EVT_CONFIG1,ATA.ABS_TYPE_OPTN
END-SELECT
END-PROCEDURE REPORT-ABSENCE

!**********************************
begin-procedure Process-SUA
!**********************************
  move 'N' to $Report
  do Report-Job
  do Report-Absence
  if ($Report = 'Y')
   do Print-Report
  end-if
 end-procedure Process-SUA
 
!**********************************
begin-procedure Get-Establishment
!**********************************
begin-SELECT
IMSS.ESTABID
IMSS.DESCR
IMSS.EFFDT
   move &IMSS.ESTABID to $Estabid
   move &IMSS.DESCR   to $Estab_Name
   Let $Estab_Effdt = &IMSS.EFFDT
   
   do get_Estabid_Name        !Language Table
FROM  PS_ESTAB_TBL IMSS,
      PS_LOCATION_TBL LOC
WHERE IMSS.ESTABID = LOC.ESTABID
  AND LOC.LOCATION = $Location
  AND LOC.EFFDT = (SELECT MAX(L.EFFDT)
                   FROM   PS_LOCATION_TBL L
                   WHERE  L.LOCATION = LOC.LOCATION)
  AND IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  ESTABID = IMSS.ESTABID)
end-SELECT
end-procedure Get-Establishment

!**********************************
begin-procedure get_Estabid_Name
!**********************************
begin-select
LC.DESCR
   move &lc.DESCR to $Estab_Name
FROM PS_ESTAB_TBL_LANG  LC
WHERE LC.ESTABID     = $Estabid
AND   LC.EFFDT       = $Estab_Effdt
AND   LC.LANGUAGE_CD = $Curr_language_Cd
end-select
    let $Estab_Name = '(' || rtrim($Estab_Name,' ') || ')'
end-procedure get_Estabid_Name

begin-procedure Init-Cont
  move 0 to #Abs_Count
  move 0 to #Auxcont
end-procedure Init-Cont


begin-procedure TO_UPPER(:$in)
  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''
  while #c <= length($in)
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)         
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'
           let $let = 'O'
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           break
        when = 'ñ'
           let $let = 'N'
           break
        when-other
           let $let = upper($char)
           break
     end-evaluate
     let $cad = $cad || $let
     let #c = #c + 1
  end-while
  let $in = $cad
end-procedure TO_UPPER


begin-procedure DF-Minimum-Wage
  let #Capped_IMSS = 0
begin-select
WM.GPMX_MINIMUM_WAGE
  move &WM.GPMX_MINIMUM_WAGE to #DF_Minimum_Wage
  let #Capped_IMSS = #DF_Minimum_Wage * 25
FROM PS_GPMX_MIN_WAGE WM
WHERE WM.WAGE_ZONE_MEX = '10'
 AND  WM.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GPMX_MIN_WAGE
                          WHERE WAGE_ZONE_MEX = WM.WAGE_ZONE_MEX
                            AND EFFDT <= $MovmentDate)
end-select
end-procedure DF-Minimum-Wage

!**************************************
begin-procedure Previous-Value
!**************************************
 let #Pre_sdi = 0
 let #Pre_cap = 0
 Let $ConsiderRow = 'Y'
BEGIN-SELECT DISTINCT
M.EFFDT
M.SEQNUM
M.GPMX_SDI_TOT
M.GPMX_MAX_EM

  Let #Pre_sdi = &M.GPMX_SDI_TOT
  Let #Pre_cap = &M.GPMX_MAX_EM
  
FROM  PS_GPMX_SDI_WA M
WHERE M.EMPLID   = $Emplid
  AND M.EMPL_RCD = #emplRcd
  AND M.EFFDT  = (SELECT MAX(M2.EFFDT) 
                  FROM PS_GPMX_SDI_WA M2
                  WHERE M2.EMPLID = M.EMPLID
                  AND M2.EMPL_RCD = M.EMPL_RCD
                  AND M2.EFFDT    < $MovmentDate) 
  AND  M.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
                   WHERE EMPLID  = M.EMPLID
                   AND EFFDT  = M.EFFDT)                          
end-select
end-procedure Previous-Value

!**************************************
begin-procedure Previous-ValuePrint
!**************************************
 Let $PrintRow = 'Y'
 Let #PrePrint_sdi = 0
begin-select  
IM.GPMX_SDI_FIX
   Let #PrePrint_sdi = &IM.GPMX_SDI_FIX
FROM PS_GPMX_IM14_TMP IM
WHERE IM.EMPLID = $PrintEmplid 
AND IM.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPMX_IM14_TMP IM2
         WHERE IM.EMPLID = IM2.EMPLID
         AND IM2.SUA_REASON_MEX IN ('07','08','02')
         AND IM2.EFFDT < $PrintDt)
end-select
end-procedure Previous-ValuePrint

!***************************************************
! Procedure Before-Sequences                       *
!***************************************************
begin-procedure Before-Sequences

Let $PrvEstab = $Estabid
Let $PrvIMSS-ID = $IMSS-ID
Let $PrvMovmentType = $MovmentType
Let $PrvMovmentDate = $MovmentDate
Let $PrvIncapNum = $IncapacityNumber
Let $PrvDays = $IncidentDays
Let $PrvSDIPrint = $SDIPrint
Let $PrvSDIOut = $SDIOut
Let $PrvRecordTXT = $RecordTXT
Let #PrvSDI = #SDI
Let #PrvDD = #DD
Let #PrvMM = #MM
Let #PrvYY = #YY
Let $PrvDD = $DD
Let $PrvMM = $MM
Let $PrvYY = $YY
Let #PrvSeqNum = #SeqNum
Let $PrvOrigCal = $OrigCal
Let #PrvSdiFactor = #SdiFactor 
   
begin-select DISTINCT
JBS.LOCATION
JBS.EMPLID
TBS.EFFDT
TBS.GPMX_SDI_TOT
TBS.SUA_REASON_MEX
TBS.SEQNUM
TBS.ORIG_CAL_RUN_ID
TBS.GPMX_SDI_FACTOR
JBS.ESTABID

  Let $Location       = Rtrim(&JBS.LOCATION, ' ')
  Let $MovmentDate    = &TBS.EFFDT
  Let #SDI            = &TBS.GPMX_SDI_TOT
  Let $Movment_Reason = rtrim(&TBS.SUA_REASON_MEX, ' ')
  Let #SeqNum         = &TBS.SEQNUM
  Let $OrigCal        = Rtrim(&TBS.ORIG_CAL_RUN_ID, ' ')
  Let #SdiFactor      = &TBS.GPMX_SDI_FACTOR
  
  if (($Movment_Reason = '0020' and #SdiFactor > 0) or 
     ($Movment_Reason = '0040' and $ETerminated = 'Y' and #SdiFactor > 0)) 
   
   Do Convert-To-DTU-Date($MovmentDate,$PrintDate1)
   Let #DD = SUBSTR($PrintDate1,9,2)
   move #DD to $DD 09
   let #MM = SUBSTR($PrintDate1,6,2)
   move #MM to $MM 09
   let #YY = SUBSTR($PrintDate1,1,4)
   move #YY to $YY 9999
   
   IF $Estab_Opt = 'L'
     Do Get-Establishment
   Else
      Let $Estabid = RTrim(&JBS.ESTABID, ' ')
      Let $Reg_Patronal = $Estabid
      
      Do ProcessIMSS_Location
      
      let $Estab_Name = $LocationName
      Let $Estab_Effdt = $LocationEffdt
      do get_Estabid_Name
    End-if
   !Do DF-Minimum-Wage

   if $Capped = 'Y'
    Let $UMA_Effdt = $MovmentDate
    Do Get-Max-UMA
    if #SDI > #SDIMax
      let #SDI = #SDIMax
    end-if
   end-if
    
   evaluate $Movment_Reason
    when = '0020'
     Let $MovmentType = '02'
     Let $ETerminated = 'Y'
    when = '0030'
      Let $MovmentType = '07'
    when = '0040'
      Let $MovmentType = '08'
      Let $ETerminated = 'N'
   end-evaluate
   
   if ($Movment_Reason = '0040' or $RehireFlag = 'Y') 
    Let $RehireFlag = 'Y'
    Let $ETerminated = 'N'
   end-if
    
   Let #SDI100 = #SDI * 100
   move #SDI100 to $SDIOUT 0009999
   move #SDI to $SDIPrint 99,999.90
     
   MOVE '        ' to $IncapacityNumber
   MOVE '00'       to $IncidentDays
  
   do get-IMSS-ID
   Let #contemp = #contemp + 1
   Let #ContReg = #ContReg + 1
   do Write-Rcd
  
  end-if
  
FROM  PS_GPMX_SDI_WA TBS,
      PS_JOB JBS
WHERE JBS.EMPLID       = TBS.EMPLID
AND   JBS.EMPLID       = $Emplid
AND   JBS.COMPANY      = $Company
AND   TBS.EFFDT        = $MovmentDate
AND   TBS.SEQNUM       < (SELECT MAX(T2BS.SEQNUM) FROM PS_GPMX_SDI_WA T2BS
                          WHERE T2BS.EMPLID        = TBS.EMPLID
                          AND   T2BS.EMPL_RCD      = TBS.EMPL_RCD
                          AND   T2BS.EFFDT         = TBS.EFFDT)
AND   JBS.EFFDT        = (SELECT MAX(J1BS.EFFDT) FROM PS_JOB J1BS
                          WHERE J1BS.EMPLID   =  JBS.EMPLID
                          AND   J1BS.EMPL_RCD =  JBS.EMPL_RCD
                          AND   J1BS.EFFDT    <= JBS.EFFDT)
AND   JBS.EFFSEQ       = (SELECT MAX(J2BS.EFFSEQ) FROM PS_JOB J2BS
                          WHERE J2BS.EMPLID   = JBS.EMPLID
                          AND   J2BS.EMPL_RCD = JBS.EMPL_RCD
                          AND   J2BS.EFFDT    = JBS.EFFDT)
[$WhereClause_B]
[$Where_Estab_B]
AND TBS.SUA_REASON_MEX IN  ('0020','0030','0040')
AND JBS.EMPL_STATUS = 'A'
ORDER BY JBS.EMPLID, TBS.EFFDT, TBS.SEQNUM
end-select

Let $Estabid = $PrvEstab
Let $IMSS-ID = $PrvIMSS-ID
Let $MovmentType = $PrvMovmentType
Let $MovmentDate = $PrvMovmentDate
Let $IncapacityNumber = $PrvIncapNum
Let $IncidentDays = $PrvDays 
Let $SDIPrint = $PrvSDIPrint
Let $SDIOut = $PrvSDIOut
Let $RecordTXT = $PrvRecordTXT
Let #SDI = #PrvSDI
Let #DD = #PrvDD
Let #MM = #PrvMM
Let #YY = #PrvYY
Let $DD = $PrvDD
Let $MM = $PrvMM
Let $YY = $PrvYY
Let #SeqNum = #PrvSeqNum
Let $OrigCal = $PrvOrigCal
Let #SdiFactor = #PrvSdiFactor
end-procedure Before-Sequences


!***************************************************
! Procedure Get-Name                               *
!***************************************************
begin-procedure Get-Name
begin-select
B.FIRST_NAME,
B.LAST_NAME,
B.SECOND_LAST_NAME

  Let $Name        = &B.FIRST_NAME
  Let $EmpPat      = &B.LAST_NAME
  Let $EmpMat      = &B.SECOND_LAST_NAME
  Let $Name = rtrim ($Name,' ') || ' ' || rtrim ($EmpPat,' ') || ' ' || rtrim ($EmpMat,' ')
  do to_upper($Name)
 
FROM PS_NAMES B
WHERE B.EMPLID    = $Emplid
AND   B.NAME_TYPE = 'PRI'
AND   B.EFFDT     = (SELECT MAX(EFFDT) FROM  PS_NAMES B2
                     WHERE B2.EMPLID = B.EMPLID
                     AND B2.NAME_TYPE = B.NAME_TYPE
                     AND B2.EFFDT <= $MovmentDate)
end-select
end-procedure Get-Name


!**************************************
begin-procedure Print-Report
let $FileName = '{FILEPREFIX}' || 'movt.txt' || '{FILESUFFIX}'
open $FileName as 1 for-writing record=49:fixed status=#filestat
  if #filestat < 0
    show 'Error opening output file. Program ending'
    stop quiet
  end-if
begin-select
PR.EMPLID  () ON-BREAK AFTER=Clean Print = Never                          
PR.NAME                           
PR.NATIONAL_ID                    
PR.SUA_REASON_MEX                 
PR.EFFDT
PR.REASON                         
PR.DURATION_DAYS
PR.GPMX_SDI_FIX
PR.DRILL_LAYOUT
PR.SEQNUM
   
   Let $PrintEmplid = rtrim(&PR.EMPLID, ' ')
   Let $PrintName = rtrim(&PR.NAME, ' ')
   Let $PrintNatID = rtrim(&PR.NATIONAL_ID, ' ')
   Let $PrintSuaReason = rtrim(&PR.SUA_REASON_MEX, ' ')
   Let $PrintDt = &PR.EFFDT
   Let $PrintReason = rtrim(&PR.REASON, ' ')
   move &PR.DURATION_DAYS to $PrintDurationDays 09
   move &PR.GPMX_SDI_FIX to #PrintIMSSSarSalary 
   move &PR.DRILL_LAYOUT to $RegDRILL_LAYOUT
   
   do Convert-to-DTU-Date($PrintDt,$PrintDt1)
   let $PrintDatei = substr($PrintDt1,9,2) || '-' || substr($PrintDt1,6,2) || '-' || substr($PrintDt1,1,4)
   
   do Previous-ValuePrint
         
   if ($PrintSuaReason = '08')
      Let $PrintETerminated = 'N'
   end-if
   
   if ((#PrintIMSSSarSalary = #PrePrint_sdi) and ($PrintSuaReason = '07'))
     Let $PrintRow = 'N' 
   end-if
   
   if $PrintETerminated = 'Y' and ($PrintSuaReason <> '08' and $PrintSuaReason <> '11')
      Let $PrintRow = 'N'
   end-if
    
   if $PrintRow = 'Y'
    print $PrintEmplid             (+1,{c1})
    print $PrintName               ( ,{c2},45)
    print $PrintNatID              ( ,{c3}) edit XXXXXXXXXXbX
    print $PrintSuaReason          ( ,{c4}) edit XX
    print $PrintDatei              ( ,{c5})
    print $PrintReason             ( ,{c6}) edit XXXXXXXX
    print $PrintDurationDays       ( ,{c7}) edit XX
    print #PrintIMSSSarSalary      ( ,{c9}) edit 9,999,999.90
    
    
   Let #Total = #Total + 1
   do Validate-Row
   if $Insert = 'False'
      Let #Error = #Error + 1
   else
       Write 1 From $RegDRILL_LAYOUT:49
   end-if
   
   end-if
   
   if ($PrintSuaReason = '02')
        Let $PrintETerminated = 'Y'
   end-if
   
FROM PS_GPMX_IM14_TMP PR
ORDER BY PR.EMPLID, PR.EFFDT, PR.SEQNUM
end-select
close 1

  #ifdef UNIX
    show ' '
    Do ConvertUnixToDOSWin($FileName)
    show ' '
  #endif
  
move #Error to $cError 9,999,999,999
move #Total to $cTotal 9,999,999,999
show '' $cError ' trabajadores improcedentes.'
show '' $cTotal ' trabajadores procesados.'
print $cError (+2,{c1})
print ' trabajadores improcedentes.' (,)
print $cTotal (+1,{c1})
print ' trabajadores procesados.' (,)
end-procedure Print-Report

!**************************************
begin-procedure Write-rcd
!**************************************

Let $RecordTXT = rpad(rtrim($Estabid,' '),11,' ') || rpad(rtrim($IMSS-Id,' '),11,' ')
Let $RecordTXT = $RecordTXT || lpad($MovmentType,2,'0') || $DD || $MM || $YY
Let $RecordTXT = $RecordTXT || rpad($IncapacityNumber,8,' ') || lpad($IncidentDays,2,'0')
Let $RecordTXT = $RecordTXT || lpad($SDIOut,7,'0')

unstring $SDIPrint by ',' into $SDI1 $SDI2
Let $SDIPrint = $SDI1 || $SDI2
Let #SDIPrint = to_number($SDIPrint)
Let #IncidentDays = to_number($IncidentDays)
 if $IMSS-ID = ''
    let $IMSS-ID = ' '
 end-if
Do Get-Name

Let $InsertCompany = substr(rtrim($Company,' '),1,3)
Let $InsertEstabid = substr(rtrim($Estabid,' '),1,12)
Let $InsertName = substr(rtrim($Name,' '),1,50)

Begin-SQL
INSERT INTO PS_GPMX_IM14_TMP (COMPANY,
                           ESTABID,
                           EMPLID,
                           NAME,
                           NATIONAL_ID,
                           SUA_REASON_MEX,
                           EFFDT,
                           SEQNUM,
                           REASON,
                           DURATION_DAYS,
                           GPMX_SDI_FIX,
                           DRILL_LAYOUT)
                   VALUES ($InsertCompany,
                           $InsertEstabid,
                           $Emplid,
                           $InsertName,
                           $IMSS-Id,
                           $MovmentType,
                           $MovmentDate,
                           #SeqNum,
                           $IncapacityNumber,
                           #IncidentDays,
                           #SDIPrint,
                           $RecordTXT)
end-SQL
move '' to $IMSS-ID
move '' to $MovmentType
move '' to $IncapacityNumber
move '' to $IncidentDays
move '' to $MovmentDate
move 0  to #DD
move 0  to #MM
move 0  to #YY
move '' to $DD
move '' to $MM
move '' to $YY
move '' to $SDIOUT
move '' to $dateprint
end-procedure Write-rcd

begin-procedure Validate-Row
Let $Error = ''
Let $Insert = 'True'
If rtrim($PrintNatID, ' ') = ''
   Let $Insert = 'False'
   Let $Error = $Error || ' | Afiliación IMSS' 
end-if
if $Insert = 'False'
   Let $Error = rtrim($PrintEmplid, ' ') || $Error
   show $Error
end-if
end-procedure

begin-procedure Clean
 Let $ETerminated = 'N'
 Let $ConsiderRow = 'Y'
 Let $PrintETerminated = 'N'
 Let $RehireFlag = 'N'
 Let $IMSS-Id = ''
end-procedure Clean
!***********************************************************************
#include 'datetime.sqc'
#include 'number.sqc'
#include 'reset.sqc'     !Reset printer procedure
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date
#include 'prcslng.sqc'   !Process Language
#include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
#include 'mxfile01.sqc'  !File Utilities
#include 'gpmxnotf.sqc'  !Get-Run-Control procedure
!***********************************************************************
