!***********************************************************************
! GPSGPY01.SQR    GLOBAL PAYROLL SINGAPORE PAYSLIP PRINT PROGRAM       *
!                                                                      *
!  Description:   This program will take the results from the main GP  *
!                 result tables and based on a payslp template ID      *
!                 attached to a paygroup, extract, format and print    *
!                 the results.                                         *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  25888478                                            !
!                                                                      *
!***********************************************************************
! Modification History                                                 *
! Dated      Author  ICE       Changes                                 *
! 23/12/03          672737000  SQR has been modify to show the change  *
!                              when there is department in mid-month   *
!                              and to print the payslip for previous   *
!                              pay group when there is a change in     *
!                              pay group in mid month.                 *
!                                                                      *
! 23/12/03          673387000  SQR has been modify to remove the       *
!                              previous year's YTD CPF Additional Wage *
!                              figure which is printed in the payslip  *
!                              of current year.                        *
!                                                                      *
! 23/01/04          684751000  SQR has been modify to print value of   *
!                              NET & GROSS accumulator when Department *
!                              or Paygroup change in mid-month.        *
!                                                                      *
! 12/10/07         1700284000  Modified the SQR such that names for    *
!                              employees whose address type is neither *
!                              HOME nor MAIL would print in the payslip*
!***********************************************************************


#include 'setenv.sqc'   !Set environment

Begin-Setup

#include 'setupdb.sqc'
  page-size 85 130

  declare printer
        type          = HPLASERJET
        orientation   = portrait
        top-margin    = .27
        left-margin   = 0.10
        font          = 3
        point-size    = 8

   ! Declare-Variable
   !  Integer #ED_PinNum
   ! End-Declare
End-Setup

!List of constants for program

#define $payee_list     '10'
#define box_shade        40
#define colA 2
#define colB 8
#define colC 16
#define colD 54
#define colE 32
#define colF 40
#define colG 72
#define colH 56
#define colI 72
#define colII 84
#define colI2 87
#define colI3 89
#define colJ 72
#define colK 90
#define colL 88
#define colM 96
#define colMM 101
#define colN 108
#define colO 112
#define colP 114

!Earnings and Deductions Heading Settings
#define ColHD3  26
#define ColHD5  33
#define ColHD6  46
#define ColHD7  55
#define ColHD8  64
#define ColHD9  74
#define ColHD10 84
#define ColHD11 96
#define ColHD12 105
#define ColHD13 115
#define ColHD14 124

!Earnings and deductions column settings
#define ColED3  22
#define ColED5  33
#define ColED6  41
#define ColED7  49
#define ColED8  59
#define ColED9  71
#define ColED10 81
#define ColED11 91
#define ColED12 101
#define ColED13 111
#define ColED14 121

!Accumulators and its heading col settings
#define ColAC1  36
#define ColAC2  51
#define ColAC3  66
#define ColAC4  81
#define ColAC5  96
#define ColAC6  111

!Itemized Details col settings
#define ColIT1  2
#define ColIT2  22
#define ColIT3  27
#define ColIT4  40
#define ColIT5  51
#define ColIT6  61
#define ColIT7  82
#define ColIT8  102
#define ColIT9  116
#define ColIT10  121

begin-report
   Do Init-DateTime
   Do Get-Current-DateTime
   Do Init-Report
   Do Process-Main
   Do Delete-RunControl

!ePay Implementation Changes begins here
  do GP-ePay-Control ! if ePay installed have a control row inserted.
!ePay Implementation Changes ends here
   Do Stdapi-Term

end-report

begin-heading 17


   graphic (0,1,130) horz-line
   Print $Header1 (8, {colII})   Bold
   Print $Header3 (9, {colII})   Bold
   Print $Header4a (12, {colII})  Bold

   Print $Header5a (13,{colII})   Bold

   Print $Header6a (14,{colII})     Bold
   Print $Header6b  (15, {colII})   Bold

   Print $Header7a  (16,{colII})    Bold
   Print $Header8a  (17,{colII})    Bold

   IF $Del_opt <> '20'
      Print $ADDLINE1 (15, 20)   Bold  !Replacing header 6
      Print $ADDLINE2 (16, 20)   Bold  !Replacing Header 7
      Print $ADDLINE3  (17, 20)  Bold  !Replacing header 8
      Print $ADDLINE31 (18, 20)  Bold  !Replacing header 9
      Print $ADDLINE4  (19, 20)  Bold  !REplacing Header 9A
   End-if

  IF $Del_opt = '20' ! Department
     Print $EmployeeName (15, 20)   Bold  !Replacing header 6
     Print $dept_name    (16, 20)
  End-if
end-heading

begin-footing 2
   graphic (1,1,130) horz-line
end-footing

!**************************************************************************
! Procedure: Init-Report
! Description: Initialise header and run control variables.
!**************************************************************************
begin-procedure Init-Report
  Do Stdapi-Init

  display $prcs_process_instance

  IF $prcs_process_instance = ''
    ! no SQRW prompt
  else
    Do Select-Parameters
  end-if
!ePay Implementation Changes begins here
  do GP-ePay-Init ! Initialize ePay variables
!ePay Implementation Changes ends here

  Do Define-Values

end-procedure
!
!**************************************************************************
! Procedure: Define-Values
! Description: Define general SQL Dynamic Query Variables.
!**************************************************************************
begin-procedure Define-Values

Let $EmplList = 'N'
Let $DeptList = 'N'
Let $LocnList = 'N'
Let $PyenList = 'N'
Let $PyGPList = 'N'
Let $No_List  = 'Y'

!Sort order
  If $sort_key1 <> '00'
     evaluate $sort_key1
          when = '10'
                Let $Sort_Order1  = 'ORDER BY PER.PAY_ENTITY '
          when = '20'
                Let $Sort_Order1  ='ORDER BY LOC.LOCATION '
          when = '30'
                Let $Sort_Order1  ='ORDER BY DPT.DEPTID '
          when = '40'
                Let $Sort_Order1  ='ORDER BY PERS.NAME '
          When = '50'
                Let $Sort_Order1  ='ORDER BY PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key2 <> '00'
     evaluate $sort_key2
          when = '10'
                Let $Sort_Order2  = ', PER.PAY_ENTITY '
          when = '20'
                Let $Sort_Order2  = ', LOC.LOCATION '
          when = '30'
                Let $Sort_Order2  = ', DPT.DEPTID '
          when = '40'
                Let $Sort_Order2  = ', PERS.NAME '
          When = '50'
                Let $Sort_Order2  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key3 <> '00'
     evaluate $sort_key3
          when = '10'
                Let $Sort_Order3  = ', PER.PAY_ENTITY '
          when = '20'
                Let $Sort_Order3  = ', LOC.LOCATION '
          when = '30'
                Let $Sort_Order3  = ', DPT.DEPTID '
          when = '40'
                Let $Sort_Order3  = ', PERS.NAME '
          When = '50'
                Let $Sort_Order3  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if

  string $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order

  IF $Sort_Key1 = '00'
     let $Sort_order = 'ORDER BY PERS.NAME, PER.RSLT_SEG_NUM  '
  End-if
  IF ($Sort_Key1 = '20' or $Sort_Key1 = '30') or
     ($Sort_Key2 = '20' or $Sort_Key2 = '30') or
     ($Sort_Key3 = '20' or $Sort_Key3 = '30')
#define colI 72
#define colI2 87
#define colI3 89
  End-if
end-procedure
!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
begin-procedure Process-Main

  !Mobile Payslip Change - Start
   !Let $custEnabled = 'N'
    !do check-mob-custom-enabled
    !if( $custEnabled = 'Y')
      do init-mpslp($Cal_Run_ID)
        
       LET $GPwhere_clause = ' '
            
      do clean_mpslp_records ($Cal_Run_ID, $GPwhere_clause)
    !End-If
        
  !Mobile Payslip -  End


  Do Get-GP-Paygroup
  Do Process-Empl-List
  Do Process-Dept-List
  Do Process-Locn-List
  Do Process-Pay-Entity-List
  Do Process-PayGroup-List

  Let #J = 1

  If $No_List = 'Y'

     While #J <= #I

        Get $GP_Pygrp FROM Gp_Paygroups(#J)
        If #j = 1
           Let $WhereTemp = ' AND (PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
        Else
           IF rtrim($GP_Pygrp,' ') <> ''
              Let $TempString = ' OR PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
              Let $WhereTemp = $WhereTemp || $TempString
           End-if
        End-if
        Let #J = #J + 1
     End-While
     IF rtrim($WhereTemp,' ') <> ''
        Let $WhereTemp = $WhereTemp || ')'
        Let $WhereClause = $WhereTemp
        Do Process-Payee
     End-if
  End-if

  ! IF( $custEnabled = 'Y')
    DO update_stats
  ! End-If

end-procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
begin-procedure Process-Payee
   Let $First_Empl = 'Y'

begin-SELECT on-error=SQL-Error
PER.EMPLID
PER.EMPL_RCD
PERS.NAME
JOB.SETID_DEPT
DPT.DEPTID
JOB.SETID_LOCATION
LOC.LOCATION
JOB.COMPANY
PER.GP_PAYGROUP
JOB.COMP_FREQUENCY
JOB.COMPRATE
PER.PAY_ENTITY
PER.PYMT_DT
PER.SEG_BGN_DT
PER.SEG_END_DT
PER.CAL_RUN_ID
PER.CAL_ID
PER.RSLT_SEG_NUM

        Let $Emplid         = &PER.EMPLID
        Let #Empl_Rcd       = &PER.EMPL_RCD
        Let $EmployeeName   = &PERS.NAME

        Let $Company        = &JOB.COMPANY
        Let $Comp_Freq      = &JOB.COMP_FREQUENCY
        Let #Comprate       = &JOB.COMPRATE
        Let $GP_Paygroup    = &PER.GP_PAYGROUP

        Let $Pay_Ent        = &PER.PAY_ENTITY
        Let $Pymt_Dt        = &PER.PYMT_DT
        Let $Pay_Pd_From_Dt = &PER.SEG_BGN_DT
        Let $Pay_Pd_To_Dt   = &PER.SEG_END_DT
        Let $Cal_ID         = &PER.CAL_ID
        Let #Rslt_Seg_num   = &PER.RSLT_SEG_NUM

        Let $SetIDDept      = &JOB.SETID_DEPT
        Let $Deptid         = &DPT.DEPTID
        Let $SetIDLocn      = &JOB.SETID_LOCATION
        Let $Location       = &LOC.LOCATION

!ePay Implementation Changes begins here
        Let $SegBgnDt      = &PER.SEG_BGN_DT
!ePay Implementation Changes ends here

!Check that the payee is not in an excluded location or dept

        Let $locn_excl             = 'N'
        Let $dept_excl             = 'N'

  Let #Find_Offcycle_Cal = Instr($Cal_ID, '###',1)
  Let #Find_Offcycle_Cal = Edit(#Find_Offcycle_Cal , '9999')

    If #Find_Offcycle_Cal > 0
        do Get-Calid-Offcyle
    Else  
     
       Let $Cal_ID_Job = $Cal_ID
        do Get-JOB-JOBTitle-Details
    End-if

        Do Get_Payslip_ID

        Do Check_Excl_Dept
        Do Check_Excl_Loctn

        If $locn_excl = 'N' and $dept_excl = 'N'

           Do Get_Payslip_Labels

           If $Del_opt = '50'
              Let $addr_Type = 'HOME'
              Let $Name = $EmployeeName
              Do Get_Address
              !Do Get-Country-Name
              !Do Adformat
              Let $ADDLINE6 = ''
              !Do Compress-Address
           End-if

           Do Get-PayEntity
           Do Get_dept
           Do Get_location
           Do Get_Frequency
           Do Print_Empl_Details
           Do Print_Summ_Lbls
           Do Get_Payment_Summ
           Do Print_Heading
           Do Get_ED_Sections
           Do Get-Itemized-Results
           Do Get_Leave
           Do Get_Disburs_Banked
           Do Get_Disburs_NonBanked
           Do Get_Messages

           Let $End_Msg = '***** End Of Payslip *****'
           print $End_msg (+2, 10)   Bold Center

!ePay Implementation Changes begins here
          Let #EndPageNumber = #page-count
!ePay Implementation Changes ends here

!ePay Implementation Changes begins here
          do GP-ePay-Guide  ! if ePay installed write Guide data for each payslip
!ePay Implementation Changes ends here

           NEW-PAGE
        End-if
FROM PS_GPSG_SS_PSLP_VW PER
   , PS_LOCATION_TBL LOC
   , PS_JOB  JOB
   , PS_DEPT_TBL  DPT
   , PS_PERSON_NAME PERS
  WHERE PER.CAL_RUN_ID  = $Cal_Run_ID
    AND PER.EMPLID      = JOB.EMPLID
    AND PER.EMPL_RCD    = JOB.EMPL_RCD
    AND PER.EMPLID      = PERS.EMPLID
    AND PER.GP_PAYGROUP = JOB.GP_PAYGROUP
    AND JOB.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
                  WHERE EMPLID = JOB.EMPLID
                  AND EMPL_RCD = JOB.EMPL_RCD
                  AND EFFDT <= PER.SEG_END_DT)
    AND JOB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
                    WHERE EMPLID = JOB.EMPLID
                    AND EMPL_RCD = JOB.EMPL_RCD
                    AND EFFDT = JOB.EFFDT )
    AND DPT.SETID = JOB.SETID_DEPT
    AND DPT.DEPTID = JOB.DEPTID
    AND DPT.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEPT_TBL
                  WHERE SETID = DPT.SETID
                  AND DEPTID = DPT.DEPTID
                  AND EFFDT <= PER.SEG_END_DT)
    AND LOC.SETID = JOB.SETID_LOCATION
    AND LOC.LOCATION = JOB.LOCATION
    AND LOC.EFFDT = (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL
                     WHERE SETID = LOC.SETID
                     AND LOCATION = LOC.LOCATION
                     AND EFFDT <= PER.SEG_END_DT)
      [$whereClause]
      [$sort_order]
end-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get_Payslip_Labels
! Description: Get the payslip labels on delivery option for the payees
!              based on the paygroup
!**************************************************************************
begin-procedure Get_Payslip_Labels

begin-SELECT on-error=SQL-Error
PSLP.GPSG_DEL_OPT
PSLP.GPSG_LBL_ACUM1
PSLP.GPSG_LBL_ACUM2
PSLP.GPSG_LBL_ACUM3
PSLP.GPSG_LBL_ACUM4
PSLP.GPSG_LBL_ACUM5
PSLP.GPSG_LBL_ACUM6

!Check IF an override for the delivery address exits
     Let $Del_Opt               = &PSLP.GPSG_DEL_OPT

     if rtrim($Del_Opt,' ') = ''
     Let $Del_Opt = '50'
     End-if

     Do Check_Override_Add
!If the deleivery option is secondary get the details

     If $Del_opt = '60' !then get the secondary address
        Let $addr_Type = 'MAIL'
        Let $Name = $EmployeeName
        Do Get_Address

        IF $Adr2Found = 'N'
           let $ADDLINE1 = $EmployeeName
           !Do Get-Country-Name
!           Do adformat
!           Do Compress-Address
        End-if
     End-if

     Let $Acum_Lbl1      = &PSLP.GPSG_LBL_ACUM1
     Let $Acum_Lbl2      = &PSLP.GPSG_LBL_ACUM2
     Let $Acum_Lbl3      = &PSLP.GPSG_LBL_ACUM3
     Let $Acum_Lbl4      = &PSLP.GPSG_LBL_ACUM4
     Let $Acum_Lbl5      = &PSLP.GPSG_LBL_ACUM5
     Let $Acum_Lbl6      = &PSLP.GPSG_LBL_ACUM6

FROM PS_GPSG_PSLP PSLP
       WHERE PSLP.GPSG_PAYSLIP_ID = $Payslip_Id
         AND PSLP.EFFDT = (SELECT MAX(PSLP1.EFFDT) FROM PS_GPSG_PSLP PSLP1
                              WHERE PSLP1.EFFDT          <= $Pymt_Dt
                                AND PSLP1.GPSG_PAYSLIP_ID = PSLP.GPSG_PAYSLIP_ID
                          )
end-SELECT
end-procedure
!
!**************************************************************************
! Procedure:  Print_Summ_Lbls
! Description: Print the summary headings/labels
!**************************************************************************
Begin-Procedure Print_Summ_Lbls

!ePay Implementation Changes begins here
   Let #BeginPageNumber = #page-count
!ePay Implementation Changes ends here

     print 'Pay Summary' (+8) Center Bold Underline

     Do Find-Start-Pos ($Acum_Lbl1, {colAC1},#ReturnCol)
     print $Acum_Lbl1 (+1, #ReturnCol) Bold

     Do Find-Start-Pos ($Acum_Lbl2, {colAC2},#ReturnCol)
     print $Acum_Lbl2 (0, #ReturnCol) Bold

     Do Find-Start-Pos ($Acum_Lbl3, {colAC3},#ReturnCol)
     print $Acum_Lbl3 (0, #ReturnCol) Bold

     Do Find-Start-Pos ($Acum_Lbl4, {colAC4},#ReturnCol)
     print $Acum_Lbl4 (0, #ReturnCol) Bold

     Do Find-Start-Pos ($Acum_Lbl5, {colAC5},#ReturnCol)
     print $Acum_Lbl5 (0, #ReturnCol) Bold

     Do Find-Start-Pos ($Acum_Lbl6, {colAC6},#ReturnCol)
     print $Acum_Lbl6 (0, #ReturnCol) Bold
End-Procedure
!
!**************************************************************************
! Procedure:  Find-Start-Pos
! Description: Control the positioning  print the headings
!**************************************************************************
Begin-procedure Find-Start-Pos($Acum_Lbl, #StartCol,:#ReturnCol)

     Let $Acum_lbl = rtrim($Acum_lbl,' ')
     Let #Len = length($Acum_lbl)
     Let #ReturnCol = (#StartCol + 10) - #Len

     IF #ReturnCol <= 0
        Let #ReturnCol = #StartCol
     End-if
End-procedure
!
!**************************************************************************
! Procedure:  Pad-String
! Description: Control the positioning  of the values
!**************************************************************************
Begin-procedure Pad-String($Label, $Value,:$ReturnVal)
     Let #MaxLblLen = 17
     Let #Vallen  = length($Label)
     IF #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
     else
        Let $PadVar = ''
     end-if
     Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-procedure
!
!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
begin-procedure Print_Empl_Details

  Do Format-DateTime($Pay_Pd_From_Dt, $Pay_Dt_From_Conv, {DEFDATE}, '', '')
  Do Format-DateTime($Pay_Pd_To_Dt, $Pay_Dt_To_Conv, {DEFDATE}, '', '')
  Do Format-DateTime($Pymt_Dt, $Pymt_Dt_Conv, {DEFDATE}, '', '')

  Let $Header1 = 'Pay Period'

  Let $Header2 = 'Pay Period To    ' || $Pay_Dt_To_Conv

  Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv

  Do Pad-String ($Header1,$PayDates,$Header1)

  Let $Header3 = 'Payment Date'
  Do Pad-String ($Header3,$Pymt_Dt_Conv,$Header3)

  Let $Header4a = 'Employee'

  Do Pad-String ($Header4A,$Emplid,$Header4A)

  Let $Header5 = 'Name:            ' || $Name

  Let $Header5a = 'Pay Entity'
  Do Pad-String ($Header5A,$PayEntityDescr,$Header5A)

  IF $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
     Let $SortDeptid = rtrim($DeptID,' ')
     Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
  else
     Let $Sort_Dept = $Dept_Name
  end-if

  Do Pad-String ($Header6A,$Sort_Dept,$Header6A)

  IF $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
     Let $SortLocation = rtrim($Location,' ')
     Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
  else
     Let $Sort_Location = $lctnDesc
  end-if

  Let $Header6a = 'Department'

  Do Pad-String ($Header6A,$dept_name,$Header6A)

  Let $Header6b = 'Location'

  Do Pad-String ($Header6b,$lctnDesc,$Header6b)

  Let $Comprate = to_char(#comprate)
  Let $Comprate = edit($Comprate, '999,999.99')
  Let $Compensation = ltrim($comprate,' ')

  Let $Compensation = $Compensation || ' (' || rtrim($freq_descr,' ') || ')'

  Let $Header7a = 'Pay Rate'
  Do Pad-String ($Header7a,$Compensation,$Header7a)

  Let $Header8a = 'Job Description'
  Do Pad-String ($Header8a,$Jobtitle,$Header8a)
end-procedure
!
!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
begin-procedure Print_Heading

   print 'Payment Details' (+2,) Center Bold Underline
   print '|' (+2,{ColA}) Bold
   graphic (0,3,25) horz-line
   graphic (0,44,27) horz-line
   print 'Current Values' (0,28) bold
   print '|Payback|'(0,71) Bold
   graphic (0,81,8) horz-line
   print 'Adjustments' (0,89) bold
   graphic (0,101,8) horz-line
   print '|' (0,109)
   graphic (0,110,4) horz-line
   print 'YTD Values' (0,114) bold
   graphic (0,125,4) horz-line
   print '|' (0,129)
end-procedure
!
!**************************************************************************
! Procedure: Get_ED_Sections
! Description:  Get the sections applicable based on the payslip id
!**************************************************************************
begin-procedure Get_ED_Sections
  Let $sql-statement = ' Get_Section'
begin-SELECT on-error=SQL-Error
SECT.DESCR
SECT.SEQ_NUM
SECT.EFFDT

  Let $Sect_Hdg           = rtrim(&SECT.DESCR, ' ')
  Let #Sect_Seq_Num       = &SECT.SEQ_NUM
  Let $SECT_Effdt         = &SECT.EFFDT

  Do Print_ED_Headings
  Do Get-Section-Elements

  IF #total_curr_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 3
     print 'Total' (+2, {ColA}) Bold
     print #total_curr_amt (0, #ReturnCol)   edit '9999999.99'
  ELSE
     IF #total_pybck_amt <> 0 or #total_adj_amt <> 0 or #Acum_Rslt_Amt_TTL <> 0
        print 'Total' (+2, {ColA}) Bold
     End-if
  End-if

  IF #total_pybck_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     print #total_pybck_amt (0, #ReturnCol) edit '99999999.99'
  end-if

  IF #total_adj_amt <> 0
     Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     print #total_adj_amt   (0, #ReturnCol)  edit '99999999.99'
  end-if

  IF #Acum_Rslt_Amt_TTL <> 0
     Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
     Let #ReturnCol = #ReturnCol - 4
     print #Acum_Rslt_Amt_TTL (0, #ReturnCol)  edit '99999999.99'
  end-if

  Let $New_Page_ED       = 'N'
  Let #total_curr_amt    = 0
  Let #total_adj_amt     = 0
  Let #total_pybck_amt   = 0
  Let #Acum_Rslt_Amt_TTL = 0

FROM PS_GPSG_PSLP_SECT SECT
WHERE SECT.GPSG_PAYSLIP_ID = $Payslip_ID
      AND SECT.EFFDT = (SELECT MAX(SECT1.EFFDT) FROM PS_GPSG_PSLP_SECT SECT1
                                WHERE SECT1.GPSG_PAYSLIP_ID = SECT.GPSG_PAYSLIP_ID
                                  AND SECT1.EFFDT <= $Pymt_Dt)
ORDER BY SECT.SEQ_NUM

end-select
end-procedure
!
!**************************************************************************
! Procedure   : Get-Section-Elements
! Description : Get details of Earnings / Deductions for each section line
!               definition
!**************************************************************************
begin-procedure Get-Section-Elements
    Let #LastPinNum = 0
    Let #LastEmplRcd = 0
begin-SELECT
GSE.SEQ_NUM5
PIN.PIN_NUM
GSE.DESCR
PIN.DESCR
PIN.PIN_NM
GSE.GPSG_DESC_TYPE
GSE.GPSG_YTD_AC_AMT
GSE.GPSG_YTD_AC_UNITS
GSE.GPSG_BSE_COMP_YN
GSE.GPSG_PCT_COMP_YN
GSE.GPSG_RTE_COMP_YN
GSE.GPSG_UNT_COMP_YN
GSE.GPSG_YTD_AC_AMT_YN
GSE.GPSG_YTD_AC_UNT_YN
PIN.PIN_TYPE

        Let #ED_PinNum       = &PIN.PIN_NUM
        
        let $ED_Descr        = &GSE.DESCR
        let $Pin_Descr       = &PIN.DESCR
        let $Descr_Type      = &GSE.GPSG_DESC_TYPE
        let $Pin_Nm          = &PIN.PIN_NM
        let $Print_Base_YN   = &GSE.GPSG_BSE_COMP_YN
        let $Print_Pct_YN    = &GSE.GPSG_PCT_COMP_YN
        let $Print_Rte_YN    = &GSE.GPSG_RTE_COMP_YN
        let $Print_Unt_YN    = &GSE.GPSG_UNT_COMP_YN

        Let #AcumAmtPin      = &GSE.GPSG_YTD_AC_AMT
        Let #AcumUnitPin     = &GSE.GPSG_YTD_AC_UNITS

        Let $PinType = &PIN.PIN_TYPE
        
        Let $PinSec = '00'
        evaluate $PinType 
            when = 'ER'
                Let $PinSec = '10'
            when = 'DD'
                Let $PinSec = '20'
            when = 'AC'
                Let $PinSec = '40'
        end-evaluate



        if #ED_PinNum <> #LastPinNum
           Let #Acum_Rslt_Seg_Num = #Rslt_Seg_Num

           Let $Descr_Temp = $PIN_Descr

           evaluate $Descr_Type
               when = '10'
                     let $Descr_Temp = $PIN_Descr
               when = '20'
                     let $Descr_Temp = $ED_Descr
               when = '30'
                     let $Descr_Temp = $Pin_Nm
           end-evaluate

           let $Descr = substr($Descr_Temp,1 , 16)

           Do Get-Acum-Results
           Do Get-ErnDed-Results

        end-if

        if #AcumRsltFound
           if NOT #ErnDedRowFound
              Do Print-Ern-Ded-Values
           end-if
        end-if

     Let #LastPinNum  = #ED_PinNum

   FROM PS_GPSG_PSLP_ED GSE, PS_GP_PIN PIN
     WHERE GSE.GPSG_PAYSLIP_ID = $Payslip_ID
       AND GSE.EFFDT = $SECT_Effdt
       AND GSE.SEQ_NUM = #Sect_Seq_Num
       AND GSE.PIN_NUM = PIN.PIN_NUM
ORDER BY GSE.SEQ_NUM5
End-SELECT
End-Procedure
!
!****************************************************************************************************
! This procedure is used to fetch the details that need to be captured in the Arrears Detail section 
! of the payslip*************************************************************************************
! Procedure : Get-Itemized-Results    ***************************************************************


begin-procedure Get-Itemized-Results

  Let $Heading = 'N'
  Let $Itm_Pin_Descr_Print = ''

BEGIN-SELECT DISTINCT
ITM.SLICE_BGN_DT    
ITM.SLICE_END_DT
ITM.CALC_RSLT_VAL
ITM.BASE_RSLT_VAL
ITM.UNIT_RSLT_VAL
ITM.RATE_RSLT_VAL
ITM.PCT_RSLT_VAL
PI1.PIN_NM
PI1.DESCR
PI2.GPSG_UNT_COMP_YN
PI2.GPSG_RTE_COMP_YN
PI2.GPSG_BSE_COMP_YN
PI2.GPSG_PCT_COMP_YN
PI2.GPSG_DATES_COMP_YN
PI2.GPSG_DESC_TYPE
PI2.SEQ_NUM
PI2.DESCR
B.CALC_DELTA_VAL
B.UNIT_DELTA_VAL
PRD.PRD_BGN_DT
PRD.PRD_END_DT


  Let $Itm_Slice_Begin =  &PRD.PRD_BGN_DT
  Let $Itm_Slice_end =  &PRD.PRD_END_DT 
  Let $Itm_Calc_rslt_val =  &B.CALC_DELTA_VAL
  Let #Base_Value =  &ITM.BASE_RSLT_VAL
  Let #Unit_Value = &B.UNIT_DELTA_VAL
  Let #Rate_Value = &ITM.RATE_RSLT_VAL
  Let #Percent_Value = &ITM.PCT_RSLT_VAL
  Let $Date_Value = $Itm_Slice_Begin

  Let $Itm_Pin_Name = &PI1.PIN_NM
  Let $Itm_Pin_Descr = &PI1.DESCR
  Let $Itm_Unit = &PI2.GPSG_UNT_COMP_YN
  Let $Itm_Rate = &PI2.GPSG_RTE_COMP_YN
  Let $Itm_Base = &PI2.GPSG_BSE_COMP_YN
  Let $Itm_Percent = &PI2.GPSG_PCT_COMP_YN
  Let $Itm_Dates =  &PI2.GPSG_DATES_COMP_YN
  Let $Itm_Descr_type = &PI2.GPSG_DESC_TYPE
  Let $Custom_Description =  &PI2.DESCR

  Let $Itm_Calc_rslt_val = edit($Itm_Calc_rslt_val, '999,999.99')

   Let $Itm_Pin_Descr_Print= $Itm_Pin_Descr

           evaluate $Itm_Descr_type
               when = '10'
                     let $Itm_Pin_Descr_Print= $Itm_Pin_Descr
               when = '20'
                     let $Itm_Pin_Descr_Print= $Custom_Description
               when = '30'
                     let $Itm_Pin_Descr_Print= $Itm_Pin_Name
           end-evaluate

       let $Itm_Pin_Descr_Print = substr($Itm_Pin_Descr_Print,1 , 16) 

  if $Heading <> 'Y'
  Do Print-Itemized-Header
  end-if
  Do Print-Itemized-Elements


FROM PS_GP_RSLT_ERN_DED ITM, PS_GP_RSLT_DELTA B, PS_GP_PYE_SEG_STAT S, PS_GP_PIN PI1, PS_GP_CAL_PRD PRD, PS_GP_CALENDAR CALEN, PS_GPSG_PSLP_ITMZD PI2

WHERE ITM.EMPLID =  $Emplid
AND ITM.EMPL_RCD = #Empl_Rcd
AND ITM.CAL_RUN_ID  = $Cal_Run_ID
AND ITM.SLICE_END_DT <= $Pymt_Dt
AND ITM.CAL_RUN_ID = B.FWD2_CAL_RUN_ID
AND ITM.EMPLID = B.EMPLID
AND ITM.EMPL_RCD = B.EMPL_RCD
AND ITM.GP_PAYGROUP = B.FWD2_PAYGROUP
AND ITM.CAL_ID = B.FWD2_CAL_ID
AND ITM.PIN_NUM = B.PIN_RTO_ADJ_NUM
AND ITM.USER_FLD1 = B.USER_FLD1
AND ITM.USER_FLD2 = B.USER_FLD2
AND ITM.USER_FLD3 = B.USER_FLD3
AND ITM.USER_FLD4 = B.USER_FLD4
AND ITM.USER_FLD5 = B.USER_FLD5
AND ITM.USER_FLD6 = B.USER_FLD6
AND ITM.EMPLID = S.EMPLID
AND ITM.EMPL_RCD = S.EMPL_RCD
AND ITM.GP_PAYGROUP = S.GP_PAYGROUP
AND ITM.CAL_ID = S.CAL_ID
AND ITM.CAL_RUN_ID = S.CAL_RUN_ID
AND ITM.ORIG_CAL_RUN_ID = S.ORIG_CAL_RUN_ID
AND ITM.RSLT_SEG_NUM = S.RSLT_SEG_NUM
AND S.PYMT_KEY1 = B.PYMT_KEY1
AND S.PYMT_KEY2 = B.PYMT_KEY2
AND S.PYMT_KEY3 = B.PYMT_KEY3
AND S.PYMT_KEY4 = B.PYMT_KEY4
AND B.PIN_NUM = PI1.PIN_NUM
AND B.CAL_ID = CALEN.CAL_ID
AND B.GP_PAYGROUP = CALEN.GP_PAYGROUP
AND B.ORIG_CAL_RUN_ID = PRD.CAL_PRD_ID
AND PI2.GPSG_PAYSLIP_ID = $Payslip_Id
AND PI2.EFFDT = ( SELECT MAX (PI22.EFFDT) FROM PS_GPSG_PSLP_ITMZD PI22 
WHERE PI2.GPSG_PAYSLIP_ID = PI22.GPSG_PAYSLIP_ID AND PI2.SEQ_NUM = PI22.SEQ_NUM 
AND PI22.EFFDT <= $Pymt_Dt)
AND  ITM.PIN_NUM = PI1.PIN_NUM AND PI2.PIN_NUM = PI1.PIN_NUM
AND ITM.PIN_NUM     IN (SELECT DISTINCT PS1.PIN_NUM FROM PS_GPSG_PSLP_ITMZD PS1 WHERE  
PS1.GPSG_PAYSLIP_ID = $Payslip_Id  AND PS1.EFFDT = (SELECT MAX(PS2.EFFDT) FROM PS_GPSG_PSLP_ITMZD PS2
                              WHERE PS2.EFFDT          <= $Pymt_Dt
                                AND PS2.GPSG_PAYSLIP_ID = PS1.GPSG_PAYSLIP_ID AND PS2.SEQ_NUM = PS1.SEQ_NUM
                          ))

ORDER BY PI2.SEQ_NUM
end-select


end-procedure

Begin-procedure Print-Itemized-Header

PRINT 'Arrears Details'  (+3, {ColG}) Center Bold Underline

 PRINT 'Description' (+1, {ColIT1}) Bold

        Do Find-Start-Pos ('Base', {ColIT3},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Percent', {ColIT4},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Percent' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Rate', {ColIT5},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Rate' (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Units', {ColIT6},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Period Begin Date', {ColIT7},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Period Begin Date' (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Period End Date', {ColIT8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Period End Date' (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Amount', {ColIT9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

  Let $Heading = 'Y'

End-procedure

Begin-procedure Print-Itemized-Elements

 PRINT $Itm_Pin_Descr_Print (+1,{ColIT1}) bold

 If $Itm_Base = 'Y'
  if #Base_Value  <> 0
      Do Find-Start-Pos ($TenCharVar, {ColIT3},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Base_Value (0, #ReturnCol) edit '9999999.99'
 End-if
 End-if

 If $Itm_Percent = 'Y'
  if #Percent_Value  <> 0
      Do Find-Start-Pos ($TenCharVar, {ColIT4},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Percent_Value (0, #ReturnCol) edit '9999999.99'
 End-if
 End-if

 If $Itm_Rate = 'Y'
  if #Rate_Value  <> 0
      Do Find-Start-Pos ($TenCharVar, {ColIT5},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Rate_Value (0, #ReturnCol) edit '9999999.99'
 End-if
 End-if

 If $Itm_Unit = 'Y'
  if #Unit_Value  <> 0
      Do Find-Start-Pos ($TenCharVar, {ColIT6},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Unit_Value (0, #ReturnCol) edit '9999999.99'
 End-if
 End-if

 If $Itm_Dates = 'Y'
  if $Date_Value <> ''

   Do Format-DateTime($Itm_Slice_Begin, $Itm_Slice_Begin_Conv, {DEFDATE}, '', '')
   Do Format-DateTime($Itm_Slice_end, $Itm_Slice_end_Conv, {DEFDATE}, '', '')

      Do Find-Start-Pos ($TenCharVar, {ColIT7},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 2
      print $Itm_Slice_Begin_Conv (0, #ReturnCol) !edit '9999999.99'

      Do Find-Start-Pos ($TenCharVar, {ColIT8},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 2
      print $Itm_Slice_end_Conv (0, #ReturnCol) !edit '9999999.99'
  End-if
 End-if

 ! if $Itm_Calc_rslt_val  <> 0
     Do Find-Start-Pos ($TenCharVar, {ColIT9},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print $Itm_Calc_rslt_val (0, #ReturnCol) edit '9999999.99'
 ! End-if


End-procedure


!**************************************************************************
! Procedure  : Print-Ern-Ded-Values
! Description: Print the values from the ern-ded or accumulator variables
!            : for the earning / deduction being processed
!**************************************************************************
Begin-Procedure Print-Ern-Ded-Values
        If #Current-line >  80
           NEW-PAGE
           do Print_Heading
           do Print_ED_Headings
        end-if
           print $Descr   (+1, {ColA}) BOLD

           If $Print_Base_YN = 'Y'
              if #Base_Rslt_Val <> 0
                 Do Find-Start-Pos ($TenCharVar, {colED3},#ReturnCol)
                 Let #ReturnCol = #ReturnCol - 3
                 print #Base_Rslt_Val (0, #ReturnCol) edit '9999999.99'
              end-if
           End-If
           If $Print_Pct_YN = 'Y'
              if #Pct_Rslt_Val <> 0
                 Do Find-Start-Pos ($TenCharVar, {colED5},#ReturnCol)
                 Let #ReturnCol = #ReturnCol - 3
                 print #Pct_Rslt_Val  (0, #ReturnCol) edit '9999999.99'
              end-if
           End-If
           If $Print_Rte_YN = 'Y'
              IF #Rate_Rslt_Val <> 0
                 Do Find-Start-Pos ($TenCharVar, {colED6},#ReturnCol)
                 Let #ReturnCol = #ReturnCol - 3
                 print #Rate_Rslt_Val (0, #ReturnCol) edit '9999999.99'
              end-if
           End-If
           If $Print_Unt_YN = 'Y'
              if #Unit_Rslt_Val <> 0
                 Do Find-Start-Pos ($TenCharVar, {colED7},#ReturnCol)
                 Let #ReturnCol = #ReturnCol - 3
                 print #Unit_Rslt_Val (0, #ReturnCol) edit '9999999.99'
              end-if
           End-If
           if #EDCalc_Rslt_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #EDCalc_Rslt_Val (0, #ReturnCol)   edit '9999999.99'
           else
              Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print '0' (0, #ReturnCol) edit '9999999.99'
           End-If
           If #Rslt_Paybk > 0
              Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Rslt_Paybk    (0, #ReturnCol)   edit '9999999.99'
           end-if
           if #Calc_Adj_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Calc_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
           end-if
           if #Base_Adj_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED11},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Base_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
           end-if
           if #Unit_Adj_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED12},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Unit_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
           end-if
           if #PinCounter = 0
              if #Acum_Rslt_Hrs <> 0
                 Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
                 Let #ReturnCol = #ReturnCol - 3
                 print #Acum_Rslt_Hrs (0, #ReturnCol)  edit '9999999.99'
              end-if
              if #Acum_Rslt_Amt <> 0
                 if #LastPinNum <> &PIN.PIN_NUM
                    Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
                    Let #ReturnCol = #ReturnCol - 3
                    print #Acum_Rslt_Amt (0, #ReturnCol)  edit '9999999.99'
                    Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt + #Acum_Rslt_Amt_TTL
                 end-if
              end-if
           End-IF

           !Mobile Payslip -  Start
    ! if( $custEnabled = 'Y')
        Do get-element-group

        LET MPSLP_ED.EMPLID(0) = $Emplid
        LET MPSLP_ED.CAL_RUN_ID(0) = $Cal_Run_ID
        LET MPSLP_ED.EMPL_RCD(0) =    #Empl_Rcd                
        LET MPSLP_ED.GP_PAYGROUP(0) =    $GP_Paygroup             
        LET MPSLP_ED.CAL_ID(0) =          $Cal_ID    
        LET MPSLP_ED.ORIG_CAL_RUN_ID(0) =  &ORIG_CALID
        LET MPSLP_ED.RSLT_SEG_NUM(0) =    #Rslt_Seg_num     
        LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) =   'GPSGP'         
        LET MPSLP_ED.GP_PSLP_ID(0) =    MPSLP_HDR.GP_PSLP_ID(0)   
        LET MPSLP_ED.INSTANCE(0) =     #Instance ! #PinCounter           
        LET MPSLP_ED.PIN_NUM(0) =        #ED_PinNum         
        LET MPSLP_ED.SLICE_BGN_DT(0) =    $Slice_Begin_date ! &SliceBgnDt   
        LET MPSLP_ED.SLICE_END_DT(0) =    $Slice_End_date ! &SliceEndDt  
        LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) =   #PARENT_PIN       
        
        LET MPSLP_ED.ED_ASSIGN_INSTANCE(0) = 0           
        LET MPSLP_ED.PI_INSTANCE(0) =   0
        LET MPSLP_ED.PRD_BGN_DT(0) =   &PRD_BGN_DT                 
        LET MPSLP_ED.PRD_END_DT(0) =  &PRD_END_DT
        LET MPSLP_ED.SEG_BGN_DT(0) =   &SEG_BGN_DT               
        LET MPSLP_ED.SEG_END_DT(0) =    &SEG_END_DT
        LET MPSLP_ED.PYMT_DT(0) =  $Pymt_Dt
        LET MPSLP_ED.RUN_TYPE(0) =    &RUN_TYPE                  
        LET MPSLP_ED.CALC_RSLT_VAL(0) =    #EDCalc_Rslt_Val              
        LET MPSLP_ED.CALC_ADJ_VAL(0) =    #Calc_Adj_Val         
        !LET MPSLP_ED.CALC_DELTA_VAL(0) =             
        LET MPSLP_ED.BASE_RSLT_VAL(0) =     #Base_Rslt_Val      
        LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val       
        LET MPSLP_ED.RATE_RSLT_VAL(0) =     #Rate_Rslt_Val        
        LET MPSLP_ED.UNIT_RSLT_VAL(0) =     #Unit_Rslt_Val       
        LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
        LET MPSLP_ED.PCT_RSLT_VAL(0) =    #Pct_Rslt_Val  
        
        LET #null = isnull($eeMemberID) 
        If (#null = 0)
            LET MPSLP_ED.RECIPIENT_ID(0) =      $eeMemberID
        else
            LET MPSLP_ED.RECIPIENT_ID(0) =      ' '
        End-If
        !$eeMemRecID     
        LET MPSLP_ED.RECIPIENT_TAG(0) =    #ED_RecipientTag         
        !LET MPSLP_ED.USER_FLD1(0) =            
        !LET MPSLP_ED.USER_FLD2(0) =                
        !ET MPSLP_ED.USER_FLD3(0) =                
        !LET MPSLP_ED.USER_FLD4(0) =                
        !LET MPSLP_ED.USER_FLD5(0) =                
        !LET MPSLP_ED.USER_FLD6(0) =                
        LET MPSLP_ED.GP_MPSLP_SECTION(0) =     $PinSec          
        LET MPSLP_ED.GP_MPSLP_SPRNT_ORD(0) =   $PinSec        
        LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
        LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) =    #SeqNum5
        LET MPSLP_ED.GP_MPSLP_PIN_DESCR(0) =   $Descr

        
        DO insert_mpslp_ernded_row  
            DO get_Accum_Data

       If (#ED_PinNum = #LastPinNum OR #LastEmplRcd <> #Empl_Rcd)           
                     
          Let #SeqNo8 = #SeqNo8 + 1
       End-If

            LET MPSLP_ACUM.EMPLID(0) = $Emplid
            LET MPSLP_ACUM.CAL_RUN_ID(0) = $Cal_Run_ID
            LET MPSLP_ACUM.EMPL_RCD(0) =    #Empl_Rcd                
            LET MPSLP_ACUM.GP_PAYGROUP(0) =    $GP_Paygroup             
            LET MPSLP_ACUM.CAL_ID(0) =          $Cal_ID    
            LET MPSLP_ACUM.ORIG_CAL_RUN_ID(0) =  &ORIG_CALID
            LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) =   'GPSGP'         
            LET MPSLP_ACUM.GP_PSLP_ID(0) =   MPSLP_HDR.GP_PSLP_ID(0)       
            LET MPSLP_ACUM.RSLT_SEG_NUM(0) =   #Rslt_Seg_num    
            LET MPSLP_ACUM.PIN_NUM(0) =        #AcumAmtPin         
            LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = &EmpRcdAc
            LET MPSLP_ACUM.ACM_FROM_DT(0) =  &AcmFromDt
            LET MPSLP_ACUM.ACM_THRU_DT(0) = &AcmToDt
            LET MPSLP_ACUM.SEQ_NUM8(0) =    #SeqNo8! &SeqNo8
            LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) =   #PARENT_PIN_Y 
            LET MPSLP_ACUM.SLICE_BGN_DT(0) =  $Slice_Begin_date ! &SliceBgnDt          
            
            LET MPSLP_ACUM.SLICE_END_DT(0) = $Slice_End_date ! &SliceEndDt 
            LET MPSLP_ACUM.SEG_BGN_DT(0) = &SEG_BGN_DT
            LET MPSLP_ACUM.SEG_END_DT(0) = &SEG_END_DT
            LET MPSLP_ACUM.PRD_BGN_DT(0) = &PRD_BGN_DT
            LET MPSLP_ACUM.PRD_END_DT(0) = &PRD_END_DT
            LET MPSLP_ACUM.PYMT_DT(0) = $Pymt_Dt
            LET MPSLP_ACUM.RUN_TYPE(0) = &RUN_TYPE 

             Let $User_key1 = &UsrKey1
             If ltrim(rtrim($User_key1,' '),' ') = ''   
                 Let $User_key1= ' '
              end-if

            Let $User_key2 = &UsrKey2
                     If ltrim(rtrim($User_key2,' '),' ') = ''   
                 Let $User_key2= ' ' 
             end-if

           Let $User_key3 = &UsrKey3
            If ltrim(rtrim($User_key3,' '),' ') = ''   
                 Let $User_key3= ' '
              end-if

            Let $User_key4 = &UsrKey4
                     If ltrim(rtrim($User_key4,' '),' ') = ''   
                 Let $User_key4= ' ' 
             end-if


             Let $User_key5 = &UsrKey5
             If ltrim(rtrim($User_key5,' '),' ') = ''   
                 Let $User_key5= ' '
              end-if

            Let $User_key6 = &UsrKey6
                     If ltrim(rtrim($User_key6,' '),' ') = ''   
                 Let $User_key6= ' ' 
             end-if

            
            LET MPSLP_ACUM.USER_KEY1(0) = $User_key1
            LET MPSLP_ACUM.USER_KEY2(0) = $User_key2
            LET MPSLP_ACUM.USER_KEY3(0) = $User_key3
            LET MPSLP_ACUM.USER_KEY4(0) = $User_key4
            LET MPSLP_ACUM.USER_KEY5(0) = $User_key5
            LET MPSLP_ACUM.USER_KEY6(0) = $User_key6
            LET MPSLP_ACUM.COUNTRY(0) = 'SGP'
            LET MPSLP_ACUM.CALC_RSLT_VAL(0) = &CalcResultVal
            LET MPSLP_ACUM.CALC_DELTA_VAL(0) = 0
            LET MPSLP_ACUM.CALC_VAL(0) = &CalcVal
            
            
            LET MPSLP_ACUM.GP_MPSLP_SECTION(0) =    '40'          
            LET MPSLP_ACUM.GP_MPSLP_SPRNT_ORD(0) =   '40'
            LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
            LET MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0) =    #SeqNum5
            LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =   $Descr
            Let $User_key1 = &UsrKey1

            do insert_mpslp_acum_row
      !  End-If

    Let #LastPinNum = #ED_PinNum
    Let #LastEmplRcd = #Empl_Rcd
    !Mobile Payslip -  End

End-Procedure
!
!**************************************************************************
! Procedure: Get-ErnDed-Results
! Description: Get and print the earnings and deduction details for the payee.
!**************************************************************************
begin-procedure Get-ErnDed-Results
    Let $TenCharVar = '1234567890'
    Let #ErnDedRowFound = 0
    Let #PinCounter = 0

    let #EDCalc_Rslt_Val   = 0
    let #Unit_Rslt_Val   = 0
    let #Rate_Rslt_Val   = 0
    let #Base_Rslt_Val   = 0
    let #Pct_Rslt_Val    = 0
    let #Rslt_Paybk      = 0
    let #Calc_Adj_Val    = 0
    let #Base_Adj_Val    = 0
    let #Unit_Adj_Val    = 0

begin-SELECT on-error=SQL-Error
RSLT.CALC_RSLT_VAL
RSLT.UNIT_RSLT_VAL
RSLT.RATE_RSLT_VAL
RSLT.BASE_RSLT_VAL
RSLT.PCT_RSLT_VAL
RSLT.RSLT_PAYBK
RSLT.CALC_ADJ_VAL
RSLT.BASE_ADJ_VAL
RSLT.UNIT_ADJ_VAL
RSLT.RSLT_SEG_NUM
RSLT.SLICE_BGN_DT
RSLT.SLICE_END_DT
RSLT.INSTANCE


!Get the accumulated value of the hours , if entered at setup

        Let #ErnDedRowFound = 1

        let #EDCalc_Rslt_Val = &RSLT.CALC_RSLT_VAL
        let #Unit_Rslt_Val   = &RSLT.UNIT_RSLT_VAL
        let #Rate_Rslt_Val   = &RSLT.RATE_RSLT_VAL
        let #Base_Rslt_Val   = &RSLT.BASE_RSLT_VAL
        let #Pct_Rslt_Val    = &RSLT.PCT_RSLT_VAL
        let #Rslt_Paybk      = &RSLT.RSLT_PAYBK
        let #Calc_Adj_Val    = &RSLT.CALC_ADJ_VAL
        let #Base_Adj_Val    = &RSLT.BASE_ADJ_VAL
        let #Unit_Adj_Val    = &RSLT.UNIT_ADJ_VAL

        let #total_curr_amt  = #total_curr_amt  + #EDCalc_Rslt_Val
        let #total_pybck_amt = #total_pybck_amt + #Rslt_Paybk
        let #total_adj_amt   = #total_adj_amt   + #Calc_Adj_Val
        Let $Slice_Begin_date =  &RSLT.SLICE_BGN_DT
        Let $Slice_End_date = &RSLT.SLICE_END_DT
        Let #Instance = &RSLT.INSTANCE

        do Print-Ern-Ded-Values

        Let #PinCounter = #PinCounter + 1 ! increment the counter after printing the values for the 1st time.

FROM PS_GP_RSLT_ERN_DED RSLT
   , PS_GP_PYE_PRC_STAT PRC
WHERE PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLT.EMPLID        = PRC.EMPLID
  AND RSLT.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLT.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLT.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
  AND RSLT.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLT.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
  AND RSLT.RSLT_SEG_NUM  = #Rslt_Seg_Num
  AND RSLT.PIN_NUM       = #ED_PinNum
end-select
end-procedure
!
!**************************************************************************
! Procedure   : Get-Acum-Results
! Description : Get Acum Values for Earn/ Deductions.
!**************************************************************************
Begin-Procedure Get-Acum-Results
   let #AcumRsltFound = 0
   Let #Acum_Rslt_Hrs = 0
   Let #Acum_Rslt_Amt = 0
Begin-SELECT
ACUM.PIN_NUM
ACUM.CALC_RSLT_VAL
ACUM.RSLT_SEG_NUM

    Let #AcumRsltFound = 1
    Let #Calc_Rslt_Val = &ACUM.CALC_RSLT_VAL

     if &GSE.GPSG_YTD_AC_UNT_YN = 'Y'
        if &ACUM.PIN_NUM = #AcumUnitPin
           let #Acum_Rslt_Hrs = #Calc_Rslt_Val
        end-if
     end-if

!Get the accumulated value of the amount, if entered at setup

     if &GSE.GPSG_YTD_AC_AMT_YN = 'Y'
        if &ACUM.PIN_NUM = #AcumAmtPin
           let #Acum_Rslt_Amt = #Calc_Rslt_Val
        end-if
     end-if
  FROM PS_GP_RSLT_ACUM ACUM
   WHERE (ACUM.PIN_NUM = #AcumUnitPin or ACUM.PIN_NUM = #AcumAmtPin)
     AND ACUM.EMPLID         = $Emplid
     AND ACUM.EMPL_RCD       = #Empl_Rcd
     AND ACUM.CAL_RUN_ID     = $Cal_Run_ID
     AND ACUM.CAL_ID         = $Cal_ID
     AND ACUM.GP_PAYGROUP    = $GP_Paygroup
     AND ACUM.RSLT_SEG_NUM   = #Acum_Rslt_Seg_Num
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get_Leave
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get_Leave
   Let $First_Abs = 'Y'

Begin-SELECT
ABTMPL.SEQ_NUM
ABTMPL.GPSG_ENTL_PIN_NUM
ABTMPL.GPSG_DESC_TYPE
ABTMPL.DESCR
ABTMPL.PIN_NUM           &PIN1
ABTMPL.GPSG_PIN_AC1_NUM  &PIN2
ABTMPL.GPSG_PIN_AC2_NUM  &PIN3
ABTMPL.GPSG_PIN_AC3_NUM  &PIN4

        Let #Pin1 = &PIN1  ! Entitlement
        Let #Pin2 = &PIN2  ! Balance
        Let #Pin3 = &PIN3  ! Adjustment
        Let #Pin4 = &PIN4  ! Take

        Let $AB_Descr = &ABTMPL.DESCR
        Let $Descr_Type = &ABTMPL.GPSG_DESC_TYPE

        Do Get-Leave-Data

       IF #Pin1Val <> 0 or #Pin2Val <> 0 or #Pin3Val <> 0 or #Pin4Val <> 0
          If #Current-line >  80
             NEW-PAGE
             Do Print_Heading
          End-if
             If $First_Abs = 'Y'
                Do Print_Abs_headings
                Let $First_Abs = 'N'
             end-if

             print $Descr        (+1, {ColA})

             IF #Pin1Val <> 0
                print #Pin1Val  (0, {ColD})   edit '9999.999999'
             end-if
             IF #Pin2Val <> 0
                print #Pin2Val  (0, {ColN})  edit '9999.999999'
             end-if
             IF #Pin3Val <> 0
                print #Pin3Val  (0, {ColG})  edit '9999.999999'
             end-if
             IF #Pin4Val <> 0
                print #Pin4Val  (0, {ColK})  edit '9999.999999'
             end-if
       end-if

   FROM PS_GPSG_PSLP_ABS ABTMPL
    WHERE ABTMPL.GPSG_PAYSLIP_ID = $Payslip_Id
     AND ABTMPL.EFFDT  = (SELECT MAX(ABTMPL1.EFFDT)
                             FROM PS_GPSG_PSLP_ABS ABTMPL1
                                WHERE ABTMPL1.GPSG_PAYSLIP_ID = ABTMPL.GPSG_PAYSLIP_ID
                                  AND ABTMPL1.EFFDT <= $Pymt_Dt
                         )
ORDER BY ABTMPL.SEQ_NUM
End-SELECT
   Let $New_Page_Abs = 'N'
End-Procedure
!
!**************************************************************************
! Procedure: Get-Leave-Data
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get-Leave-Data
   Let #Pin1Val = 0
   Let #Pin2Val = 0
   Let #Pin3Val = 0
   Let #Pin4Val = 0

begin-SELECT on-error=SQL-Error
D.PIN_NUM
D.PIN_NM
ABS.CALC_RSLT_VAL
D.DESCR

     Let $Pin_Descr   = &D.DESCR
     Let $Pin_Nm      = &D.PIN_NM

     evaluate $Descr_Type
        when = '10'
             Let $Descr = $Ab_Descr
        when = '20'
             Let $Descr = $Pin_Descr
        when = '30'
             Let $Descr = $Pin_Nm
     end-evaluate

     IF &D.PIN_NUM = #PIN1
        Let #Pin1Val = &ABS.CALC_RSLT_VAL
     end-if
     IF &D.PIN_NUM = #PIN2
        Let #Pin2Val = &ABS.CALC_RSLT_VAL
     end-if
     IF &D.PIN_NUM = #PIN3
        Let #Pin3Val = &ABS.CALC_RSLT_VAL
     end-if
     IF &D.PIN_NUM = #PIN4
        Let #Pin4Val = &ABS.CALC_RSLT_VAL
     end-if

FROM PS_GP_PYE_PRC_STAT A
   , PS_GP_PYE_SEG_STAT B
   , PS_GP_PIN D
   , PS_GP_RSLT_ACUM ABS
   , PS_GP_RUN_TYPE DR
   , PS_GP_CAL_PRD H
  WHERE A.CAL_RUN_ID         = B.CAL_RUN_ID
    AND A.EMPLID             = B.EMPLID
    AND A.EMPL_RCD           = B.EMPL_RCD
    AND A.GP_PAYGROUP        = B.GP_PAYGROUP
    AND A.CAL_ID             = B.CAL_ID
    AND DR.RUN_TYPE          = A.RUN_TYPE
    AND DR.CALC_TYPE         = 'A'
    AND A.CAL_PRD_ID         = H.CAL_PRD_ID
    AND A.PRD_BGN_DT         = H.PRD_BGN_DT
    AND A.PRD_END_DT         = H.PRD_END_DT
    AND B.EMPLID             = ABS.EMPLID
    AND B.CAL_RUN_ID         = ABS.CAL_RUN_ID
    AND B.EMPL_RCD           = ABS.EMPL_RCD
    AND ABS.EMPL_RCD         = ABS.EMPL_RCD_ACUM
    AND B.CAL_ID             = ABS.CAL_ID
    AND B.GP_PAYGROUP        = ABS.GP_PAYGROUP
    AND ABS.PIN_NUM          = D.PIN_NUM
    AND (ABS.PIN_NUM = #PIN1 or ABS.PIN_NUM = #PIN2 or ABS.PIN_NUM = #PIN3 or ABS.PIN_NUM = #PIN4)
    AND (ABS.ACM_THRU_DT IS NULL
    OR
       ((ABS.ACM_THRU_DT IS NOT NULL) AND
    ABS.ACM_THRU_DT   = (SELECT MAX(ABS1.ACM_THRU_DT)
                                FROM PS_GP_RSLT_ACUM ABS1
                                WHERE ABS.EMPLID        = ABS1.EMPLID
                                AND ABS.CAL_RUN_ID      = ABS1.CAL_RUN_ID
                                AND ABS.EMPL_RCD        = ABS1.EMPL_RCD
                                AND ABS.GP_PAYGROUP     = ABS1.GP_PAYGROUP
                                AND ABS.CAL_ID          = ABS1.CAL_ID
                                AND ABS.ORIG_CAL_RUN_ID = ABS1.ORIG_CAL_RUN_ID
                                AND ABS.RSLT_SEG_NUM    = ABS1.RSLT_SEG_NUM
                                AND ABS.PIN_NUM         = ABS1.PIN_NUM
                                AND ABS.EMPL_RCD_ACUM   = ABS1.EMPL_RCD_ACUM
                          )
        )AND ABS.ACM_THRU_DT >= ABS.SLICE_END_DT)
    AND A.EMPLID             = $Emplid
    AND A.EMPL_RCD           = #Empl_Rcd
    AND A.CAL_RUN_ID         = $Cal_Run_Id
    AND A.GP_PAYGROUP        = $GP_Paygroup
    AND A.PRC_ORD_TS = (SELECT MAX(A21.PRC_ORD_TS) FROM PS_GP_PYE_PRC_STAT A21
                                                      , PS_GP_CAL_PRD AG21
                                                      , PS_GP_RUN_TYPE DR1
                                       WHERE A21.EMPLID     = A.EMPLID
                                         AND A21.EMPL_RCD   = A.EMPL_RCD
                                         AND A21.CAL_RUN_ID = A.CAL_RUN_ID
                                         AND A21.CAL_ID     = A.CAL_ID
                                         AND A21.GP_PAYGROUP= A.GP_PAYGROUP
                                         AND A21.CAL_PRD_ID = AG21.CAL_PRD_ID
                                         AND A21.PRD_BGN_DT = AG21.PRD_BGN_DT
                                         AND A21.PRD_END_DT = AG21.PRD_END_DT
                                         AND DR1.RUN_TYPE   = A21.RUN_TYPE
                                         AND DR1.CALC_TYPE  = 'A'
                               )
end-select
end-procedure
!
!**************************************************************************
! Procedure: Get_Disburs_Banked
! Description: Get and print the banking details for the payee.
!**************************************************************************
begin-procedure Get_Disburs_Banked
   Let $First_Disb = 'Y'
begin-SELECT on-error=SQL-Error
B.GP_PMT_AMT
D.BRANCH_EC_CD
D.ACCOUNT_EC_ID
E.BANK_NM

    If #Current-line >  80
       NEW-PAGE
       Do Print_Heading
    End-if

    If $First_Disb = 'Y'
       Do Print_Disb_headings
       Let $First_Disb = 'N'
    end-if

    Let $Bank_Name = &E.BANK_NM
    print $Bank_Name (+1, {ColA})
!    Let $BSB_Char = edit(&D.BRANCH_EC_CD,'XXX-XXX')
    print $BSB_char (0, {ColD})

    Let #Acct_Nbr = &D.ACCOUNT_EC_ID
    print #Acct_Nbr (0, {ColG}) edit '999999999'

    Let #Paymnt_Amt = &B.GP_PMT_AMT
    print #Paymnt_Amt (0, {ColN}) edit '999999999.99'

FROM PS_GP_CALENDAR A
, PS_GP_PAYMENT B
, PS_GP_NET_DIST_DTL C
, PS_PYE_BANKACCT D
, PS_BANK_EC_TBL E
  WHERE B.CAL_ID      = A.CAL_ID
    AND B.GP_PAYGROUP = A.GP_PAYGROUP
    AND A. RUN_TYPE   = C.RUN_TYPE
    AND B.EMPLID      = C.EMPLID
    AND C.EMPLID      = D.EMPLID
    AND B.EMPL_RCD    = C.EMPL_RCD
    AND B.INSTANCE    = C.INSTANCE
    AND C.ACCOUNT_ID  = D.ACCOUNT_ID
    AND D.BANK_CD     = E.BANK_CD
    AND D.COUNTRY_CD  = E.COUNTRY_CD
    AND B.PMT_TYPE    = '01'
    AND C.EFFDT =(SELECT MAX(C1.EFFDT) FROM PS_GP_NET_DIST_DTL C1 WHERE C1.EMPLID = C.EMPLID
                      AND C1.EMPL_RCD = C.EMPL_RCD
                      AND C1.RUN_TYPE = C.RUN_TYPE
                      AND C1.INSTANCE = C.INSTANCE)
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID
end-select
end-procedure
!
!**************************************************************************
! Procedure: Get_Disburs_Nonbanked
! Description: Get and print the non banking disburment details for the payee.
!**************************************************************************
begin-procedure Get_Disburs_Nonbanked
begin-SELECT on-error=SQL-Error
PMNT.PAYMENT_MTHD    &PMNT_Mthd
SUM(PMNT.GP_PMT_AMT) &NetPayAmt

    If #Current-line >  80
       NEW-PAGE
       Do Print_Heading
    End-if

    If $First_Disb = 'Y'
       Do Print_Disb_headings
       Let $First_Disb = 'N'
    end-if

    Let #Paymnt_Amt = &NetPayAmt
    IF #Paymnt_Amt <> 0
       Let $FieldName  = 'PAYMENT_MTHD'
       Let $FieldValue = &PMNT_Mthd
       Let $curr_language_cd = 'ENG'

       Do Read-Translate-Table
       Print $XlatLongName (+1,{ColA})
       print #Paymnt_Amt (0, {ColN}) edit '999999999.99'
    end-if

FROM PS_GP_PAYMENT PMNT
    WHERE PMNT.EMPLID      = $Emplid
      AND PMNT.EMPL_RCD    = #Empl_Rcd
      AND PMNT.CAL_RUN_ID  = $Cal_Run_ID
      AND PMNT.CAL_ID      = $Cal_ID
      AND PMNT.GP_PAYGROUP = $GP_Paygroup
      AND PMNT.PAYMENT_MTHD <> 'T'
      AND PMNT.PMT_TYPE    = '01'
GROUP BY PMNT.PAYMENT_MTHD
end-select
   Let $New_Page_Dis = 'N'
end-procedure
!
!**************************************************************************
! Procedure: Get_Messages
! Description: Get and print the messages for the payee.
!**************************************************************************
begin-procedure Get_Messages
  Let $First_Msg = 'Y'
  Let #Msg_Nbr = 0
begin-SELECT on-error=SQL-Error
B.GPSG_MSG_NBR
A.GPSG_MESSAGE

        If $First_Msg = 'Y'
            print 'Messages' (+2, {ColB}) Bold Center
           Let $First_Msg = 'N'
        end-if

        Let #Msg_Nbr = &B.GPSG_MSG_NBR
        Let $Message = &A.GPSG_MESSAGE

        IF #Msg_nbr <> 0
           print #Msg_Nbr (+1, {ColC}) EDIT '9999'
           print $Message (0, 25) Wrap {colK} 3
        end-if

FROM PS_GPSG_PSLP_MSG A
, PS_GPSG_PSLP_RSLT B
WHERE A.CAL_RUN_ID = B.CAL_RUN_ID
    AND A.GPSG_MSG_NBR = B.GPSG_MSG_NBR
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID
end-select
end-procedure
!
!**************************************************************************
! Procedure: Print_ED_Headings
! Description: Prints the section headings
!**************************************************************************
begin-procedure Print_ED_Headings
        print $Sect_Hdg (+3,) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold

        Do Find-Start-Pos ('Base', {colED3},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Percent', {colED5},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Percent' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Rate', {colED6},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Rate' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Units', {colED7},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Base', {colED11},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base ' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Unit', {colED12},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Unit' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Units', {colED13},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED14},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Let $New_Page_ED = 'Y'

end-procedure
!
!**************************************************************************
! Procedure: Print_Abs_headings
! Description: Print the absence data headings
!**************************************************************************
begin-procedure Print_Abs_headings

        print 'Leave Balances' (+3, {ColG}) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold
        print 'Entitlement' (0, {ColD}) Bold
        print 'Adjustment'  (0, {ColG}) Bold
        print 'Taken'       (0, {ColM}) Bold
        print 'End Balance' (0, {ColN}) Bold

        Let $New_Page_Abs = 'Y'
end-procedure
!
!**************************************************************************
! Procedure: Print_Disb_headings
! Description: Print the disbusment data headings
!**************************************************************************
begin-procedure Print_Disb_headings
        print 'Disbursment Details' (+3, {ColG}) Center Bold Underline

        print 'Bank' (+1, {ColA}) Bold
        print 'B.S.B' (0, {ColD}) Bold
        print 'Account #'  (0, {ColG}) Bold

        Do Find-Start-Pos ('Amount', {colO},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Let $New_Page_Dis = 'Y'
end-procedure
!
!**************************************************************************
! Procedure: Get_dept
! Description: Get the dept name of the payee
!**************************************************************************
begin-procedure Get_dept
      Let $dept_name = ''
begin-SELECT on-error=SQL-Error
DEPT.DESCR

   Let $dept_name = rtrim(&DEPT.DESCR,' ')

   FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SetIDDept
      AND DEPT.DEPTID = $Deptid
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID
                              AND DEPT1.EFFDT <= $Pymt_Dt
                       )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get_location
! Description: Get the location of the payee
!**************************************************************************
begin-procedure Get_location
    let $CountryCodeBKUP = $CountryCode
begin-SELECT on-error=SQL-Error
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.STATE
A.POSTAL
A.COUNTY
A.COUNTRY

        IF $Del_Opt = '30'

           Let $Name     = $EmployeeName
           Let $address1 = &A.ADDRESS1
           Let $address2 = &A.ADDRESS2
           Let $address3 = &A.ADDRESS3
           Let $address4 = &A.ADDRESS4
           Let $City     = rtrim(&A.CITY, ' ')
           Let $State    = &A.STATE
           Let $Country  = &A.COUNTRY
           Let $Postal   = &A.POSTAL

           !Do Get-Country-Name
           Do adformat
           Do Compress-Address

       end-if

       Let $LctnDesc = rtrim(&A.DESCR,' ')

FROM PS_LOCATION_TBL A
WHERE A.LOCATION = $Location
  AND A.SETID    = $SetIDLocn
  AND A.EFFDT    = (SELECT MAX(A1.EFFDT) FROM PS_LOCATION_TBL A1
                       WHERE A1.EFFDT <= $Pymt_Dt
                         AND A1.SETID = A.SETID
                         AND A1.LOCATION = A.LOCATION
                   )
END-SELECT
    let $CountryCode = $CountryCodeBKUP
end-procedure
!
!**************************************************************************
! Procedure: Get-PayEntity
! Description: Get the pay entity details
!**************************************************************************
begin-procedure Get-PayEntity
  Let $PayEntityDescr = ''
begin-SELECT on-error=SQL-Error
PYE.DESCR

  Let $PayEntityDescr = rtrim(&PYE.DESCR,' ')

FROM PS_GP_PYENT PYE
WHERE PYE.PAY_ENTITY = $Pay_Ent
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get_Frequency
! Description: Get the frequency of the payee
!**************************************************************************
begin-procedure Get_Frequency
begin-SELECT on-error=SQL-Error
FREQ.DESCRSHORT

    Let $freq_descr = &FREQ.DESCRSHORT
FROM PS_FREQUENCY_TBL FREQ
WHERE FREQ.FREQUENCY_ID = $Comp_Freq
AND FREQ.EFFDT = (SELECT MAX(FREQ1.EFFDT)
                FROM PS_FREQUENCY_TBL FREQ1
                WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID)
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure     : Check_Excl_Dept
! Description   : Check if the payee's department has been excluded
!**************************************************************************
begin-procedure Check_Excl_Dept
begin-SELECT on-error=SQL-Error
DEPT.SETID
DEPT.DEPTID
        Let $dept_excl = 'Y'
   FROM PS_GPSG_PSLP_DEPT DEPT
   WHERE DEPT.DEPTID = $Deptid
    AND  DEPT.SETID  = $SetIDDept
    AND DEPT.GPSG_PAYSLIP_ID = $Payslip_Id
    AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_GPSG_PSLP_DEPT DEPT1
                      WHERE DEPT1.DEPTID        = DEPT.DEPTID
                      AND DEPT1.SETID           = DEPT.SETID
                      AND DEPT1.GPSG_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure         : Check_Excl_Loctn
! Description   : Check if the payee's location has been excluded
!**************************************************************************
begin-procedure Check_Excl_Loctn
begin-SELECT on-error=SQL-Error
LOCN.SETID
LOCN.LOCATION
        Let $locn_excl = 'Y'

   FROM PS_GPSG_PSLP_LOCTN LOCN
   WHERE LOCN.LOCATION = $Location
     AND LOCN.SETID = $SetIDLocn
     AND LOCN.GPSG_PAYSLIP_ID = $Payslip_Id
     AND LOCN.EFFDT = (SELECT MAX(LOCN1.EFFDT) FROM PS_GPSG_PSLP_LOCTN LOCN1
                      WHERE LOCN1.LOCATION      = LOCN.LOCATION
                      AND LOCN1.SETID           = LOCN.SETID
                      AND LOCN1.GPSG_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure     : Get_Address
! Description   : Get the payee's address details
!**************************************************************************
begin-procedure Get_Address
  Let $Adr2Found = 'N'
  let $CountryCodeBKUP = $CountryCode

  let $ADDLINE1 = ''
  let $ADDLINE2 = ''
  let $ADDLINE3 = ''
  let $ADDLINE31 = ''
  let $ADDLINE4 = ''
  let $ADDLINE5 = ''
  let $ADDLINE6 = ''

  Let $address1     = ''
  Let $address2     = ''
  Let $address3     = ''
  Let $address4     = ''
  Let $City         = ''
  Let $State        = ''
  Let $Country      = ''
  Let $Postal       = ''

Begin-SELECT on-error=SQL-Error
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY

        Let $Adr2Found = 'Y'
        Let $Name         = $EmployeeName
        Let $address1     = &ADR.ADDRESS1
        Let $address2     = &ADR.ADDRESS2
        Let $address3     = &ADR.ADDRESS3
        Let $address4     = &ADR.ADDRESS4
        Let $City         = rtrim(&ADR.CITY, ' ')
        Let $State        = &ADR.STATE
        Let $Country      = &ADR.COUNTRY
        Let $Postal       = &ADR.POSTAL


        !Do Get-Country-Name
        Do adformat
        Let $ADDLINE6 = ''
        Do Compress-Address

   FROM PS_ADDRESSES ADR
    WHERE ADR.EMPLID = $Emplid
      AND ADR.ADDRESS_TYPE = $Addr_Type
      AND ADR.EFFDT = (SELECT MAX(ADR1.EFFDT) FROM PS_ADDRESSES ADR1
                          WHERE ADR1.EMPLID = ADR.EMPLID
                            AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE
                            AND ADR1.EFFDT <=$PYMT_DT)
end-select
    let $CountryCode = $CountryCodeBKUP
    !   If Address Entry wasn't found, populate $ADDLINE1 with EmployeeName.

   If $Adr2Found = 'N'
      Let $ADDLINE1 = $EmployeeName
   End-if
end-procedure
!**************************************************************************
! Procedure     : Check_Override_Add
! Description   : Check the existance of an override
!**************************************************************************
begin-procedure Check_Override_Add
Begin-SELECT on-error=SQL-Error
PAY.GPSG_DEL_OPT

   Let $Del_Opt = &PAY.GPSG_DEL_OPT

FROM PS_GPSG_PAYEE_TBL PAY
WHERE PAY.EMPLID = $Emplid
AND PAY.EMPL_RCD = #Empl_Rcd
AND PAY.EFFDT = (SELECT MAX(PAY1.EFFDT)
                FROM PS_GPSG_PAYEE_TBL PAY1
                WHERE PAY1.EMPLID = PAY.EMPLID
                AND PAY1.EMPL_RCD = PAY.EMPL_RCD)
end-select
end-procedure
!
!**************************************************************************
! Procedure     : Get_Payslip_Id
! Description   : Get the payslip id based on the paygroup of payee
!**************************************************************************
begin-procedure Get_Payslip_Id
Begin-SELECT on-error=SQL-Error
ID.GPSG_PAYSLIP_ID

   Let $Payslip_Id = &ID.GPSG_PAYSLIP_ID
FROM PS_GP_PYGRP_SGPSG ID
WHERE ID.GP_PAYGROUP = $GP_Paygroup
end-select
end-procedure
!
!**************************************************************************
! Procedure     : Get_Accum_Values
! Description   : Get the accumulated values for the payee
!**************************************************************************
begin-procedure Get_Accum_Values
    Let #Calc_Rslt_Val = 0

Begin-SELECT on-error=SQL-Error
ACC.CALC_RSLT_VAL

   Let #Calc_Rslt_Val = &ACC.CALC_RSLT_VAL

FROM PS_GP_RSLT_ACUM ACC
  WHERE ACC.EMPLID        =  $Emplid
    AND ACC.EMPL_RCD      =  #Empl_Rcd
    AND ACC.CAL_RUN_ID    =  $Cal_Run_ID
    AND ACC.GP_PAYGROUP   =  $GP_Paygroup
    AND ACC.CAL_ID        =  $Cal_ID
    AND ACC.RSLT_SEG_NUM  =  #Rslt_Seg_num
    AND ACC.PIN_NUM       =  #Pin_Num
    AND ACC.EMPL_RCD_ACUM =  ACC.EMPL_RCD
    AND ACC.ACM_FROM_DT   <= $SEG_BGN_DT
    AND ACC.ACM_THRU_DT   >= $SEG_END_DT
end-select
end-procedure
!
!**************************************************************************
!
! Procedure   : Get_Payment_Summ
! Description : Get and print the pay summary details for the payee.
!
!**************************************************************************
begin-procedure Get_Payment_Summ
begin-SELECT on-error=SQL-Error
C.GPSG_PIN_AC1_NUM   &GPSG_PIN_AC1_NUM
C.GPSG_PIN_AC2_NUM   &GPSG_PIN_AC2_NUM
C.GPSG_PIN_AC3_NUM   &GPSG_PIN_AC3_NUM
C.GPSG_PIN_AC4_NUM   &GPSG_PIN_AC4_NUM
C.GPSG_PIN_AC5_NUM   &GPSG_PIN_AC5_NUM
C.GPSG_PIN_AC6_NUM   &GPSG_PIN_AC6_NUM
C.DESCR              &C.DESCR
C.SEQ_NUM
! Start - Mobile Payslip
A.ORIG_CAL_RUN_ID                 &ORIG_CALID
B.RSLT_SEG_NUM                    &RSLT_SEG_NUM
B.SEG_BGN_DT                      &SEG_BGN_DT
B.SEG_END_DT                      &SEG_END_DT
A.PRD_BGN_DT                      &PRD_BGN_DT
A.PRD_END_DT                      &PRD_END_DT
A.PAY_ENTITY                      &COMPANY
A.RUN_TYPE                        &RUN_TYPE
!End - Mobile Payslip
!B.SEG_BGN_DT
!B.SEG_END_DT

!    Let &SEG_BGN_DT  =  &B.SEG_BGN_DT
!    Let &SEG_END_DT  =  &B.SEG_END_DT

    Let $SEG_BGN_DT  =  &SEG_BGN_DT
    Let $SEG_END_DT  =  &SEG_END_DT


        Let #Calc_Rslt_Val = 0
        Let #Pin_Num = &GPSG_PIN_AC1_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val1 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

        Let #Pin_Num = &GPSG_PIN_AC2_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val2 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

        Let #Pin_Num = &GPSG_PIN_AC3_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val3 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

        Let #Pin_Num = &GPSG_PIN_AC4_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val4 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

        Let #Pin_Num = &GPSG_PIN_AC5_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val5 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

        Let #Pin_Num = &GPSG_PIN_AC6_NUM
        Do Get_Accum_Values
        Let #Calc_Acum_Val6 = #Calc_Rslt_Val

        Let $Pay_Summ_Desc  = &C.DESCR

        IF #Calc_Acum_Val1 <> 0 or
              #Calc_Acum_Val2 <> 0 or
              #Calc_Acum_Val3 <> 0 or
              #Calc_Acum_Val4 <> 0 or
              #Calc_Acum_Val5 <> 0 or
              #Calc_Acum_Val6 <> 0

           print $Pay_Summ_Desc (+1, {colA}) Bold

           IF #Calc_Acum_Val1 <> 0
               print #Calc_Acum_Val1 (0, {colAC1})  edit 9999999.99
           end-if

            IF #Calc_Acum_Val2 <> 0
              print #Calc_Acum_Val2 (0, {colAC2})      edit 9999999.99
           end-if

           IF #Calc_Acum_Val3 <> 0
              print #Calc_Acum_Val3 (0, {colAC3})  edit 9999999.99
           end-if

           IF #Calc_Acum_Val4 <> 0
              print #Calc_Acum_Val4 (0, {colAC4})  edit 9999999.99
           end-if

            IF #Calc_Acum_Val5 <> 0
              print #Calc_Acum_Val5 (0, {colAC5})  edit 9999999.99
           end-if

           IF #Calc_Acum_Val6 <> 0
              print #Calc_Acum_Val6 (0, {colAC6})  edit 9999999.99
           end-if
        end-if

            !Mobile Payslip -  Start : Insert Header Data
   !  if( $custEnabled = 'Y')
        !Let $Company = 'KAB'
        LET MPSLP_HDR.EMPLID(0) = $Emplid
        LET MPSLP_HDR.CAL_RUN_ID(0) = $Cal_Run_ID
        LET MPSLP_HDR.EMPL_RCD(0) = #Empl_Rcd
        LET MPSLP_HDR.GP_PAYGROUP(0) = $GP_Paygroup
        LET MPSLP_HDR.CAL_ID(0) = $Cal_ID
        LET MPSLP_HDR.ORIG_CAL_RUN_ID(0) = &ORIG_CALID
        LET MPSLP_HDR.RSLT_SEG_NUM(0) = #Rslt_Seg_num   
        LET MPSLP_HDR.GP_PSLP_SRCPRODUCT(0) = 'GPSGP'
        !LET MPSLP_HDR.GP_PSLP_ID(0) = $payslip_id
        
        LET $ERcd = TO_CHAR(#Empl_Rcd)
        LET $Pay_Seg_End_Dt   = &SEG_END_DT
        do Format-DateTime($Pay_Seg_End_Dt, $PslpId_Conv, {DEFDATE}, '', '')
         
        LET MPSLP_HDR.GP_PSLP_ID(0) = $ERcd || ' ' || $PslpId_Conv
        LET MPSLP_HDR.SEG_BGN_DT(0) = &SEG_BGN_DT
        LET MPSLP_HDR.SEG_END_DT(0) = &SEG_END_DT
        LET MPSLP_HDR.PRD_BGN_DT(0) = &PRD_BGN_DT
        LET MPSLP_HDR.PRD_END_DT(0) = &PRD_END_DT
        
        LET MPSLP_HDR.PYMT_DT(0) = $Pymt_Dt
        LET MPSLP_HDR.GP_MPSLP_GROSS(0) = #Calc_Acum_Val1
        LET MPSLP_HDR.GP_MPSLP_NET(0) = #Calc_Acum_Val2
        LET MPSLP_HDR.GP_COMPANY(0) = $Company
        LET MPSLP_HDR.RUN_TYPE(0) = &RUN_TYPE

        !LET MPSLP_HDR.GP_MPSLP_HDR1(0) = $Acum_Lbl1
        !LET MPSLP_HDR.GP_MPSLP_HDR2(0) = $Acum_Lbl2
        !LET MPSLP_HDR.GP_MPSLP_HDR3(0) = $Acum_Lbl3
        !LET MPSLP_HDR.GP_MPSLP_HDR4(0) = $Acum_Lbl4
        !LET MPSLP_HDR.GP_MPSLP_HDR5(0) = $Acum_Lbl5
        !LET MPSLP_HDR.GP_MPSLP_HDR6(0) = $Acum_Lbl6
        DO insert_mpslp_hdr_row
   ! End-If  
    !Mobile Payslip - End
    

FROM PS_GPSG_PSLP_ACUM C,
PS_GP_PYE_SEG_STAT B,
PS_GP_PYE_PRC_STAT A
WHERE C.GPSG_PAYSLIP_ID = $payslip_id
  AND B.CAL_RUN_ID      = A.CAL_RUN_ID
  AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
  AND B.EMPLID          = A.EMPLID
  AND B.EMPL_RCD        = A.EMPL_RCD
  AND B.CAL_ID          = A.CAL_ID
  AND B.GP_PAYGROUP     = A.GP_PAYGROUP
  AND A.PRD_TYPE     <> 'H'
  AND A.EMPLID       = $Emplid
  AND A.EMPL_RCD     = #Empl_Rcd
  AND A.CAL_RUN_ID   = $Cal_Run_ID
  AND A.CAL_ID       = $Cal_ID
  AND A.GP_PAYGROUP  = $GP_Paygroup
  AND B.RSLT_SEG_NUM = #Rslt_Seg_num
  AND B.RSLT_REV_NUM = (SELECT MIN (SEG1.RSLT_REV_NUM)
                             FROM PS_GP_PYE_SEG_STAT SEG1
                              WHERE B.EMPLID       = SEG1.EMPLID
                                AND B.CAL_RUN_ID   = SEG1.CAL_RUN_ID
                                AND B.EMPL_RCD     = SEG1.EMPL_RCD
                                AND B.GP_PAYGROUP  = SEG1.GP_PAYGROUP
                                AND B.CAL_ID       = SEG1.CAL_ID
                                AND B.RSLT_SEG_NUM = SEG1.RSLT_SEG_NUM)
  AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_GPSG_PSLP_ACUM C1
                          WHERE C1.GPSG_PAYSLIP_ID = C.GPSG_PAYSLIP_ID
                            AND C1.EFFDT <=$Pymt_Dt)
ORDER BY C.SEQ_NUM
end-select
   graphic (+2, 2, 126) Horz-line
end-procedure
!
!**************************************************************************
! Procedure: Delete-RunControl
! Description: Delete run control when report comes to successful end.
!**************************************************************************
begin-procedure Delete-RunControl
begin-SQL
DELETE FROM PS_GPSG_RNCTL_PSLP
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
begin-SQL
DELETE FROM PS_GPSG_PSLP_DP_RC
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
begin-SQL
DELETE FROM PS_GPSG_PSLP_LC_RC
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
begin-SQL
DELETE FROM PS_GPSG_PSLP_PE_RC
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
begin-SQL
DELETE FROM PS_GPSG_PSLP_PG_RC
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
begin-SQL
DELETE FROM PS_GPSG_RNCTL_PYE
    WHERE OPRID       = $PRCS_OPRID
      AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

      #ifdef ORACLE
         COMMIT;
      #endif
end-SQL
end-procedure
!
!**************************************************************************
! Procedure: Process-Empl-List
!            Process Employees selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Empl-List
Begin-SELECT
APY1.EMPLID    &Emplid
APY1.EMPL_RCD  &EmplRcd
   If rtrim(&Emplid, ' ') <> ''
      Let $No_List = 'N'
      Let $WhereClause = ''
      Let $EmplRcd = edit(&EmplRcd,'999')
      Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &Emplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd
      Show 'Processing Emplid : ' &Emplid
      Do Process-Payee
  End-if
  FROM PS_GPSG_RNCTL_PYE APY1
    WHERE APY1.OPRID       = $Prcs_OprID
      AND APY1.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Dept-List
!            Process Departments selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Dept-List
Begin-SELECT
BPY1.SETID   &Setid
BPY1.DEPTID  &Deptid
   If rtrim(&Deptid, ' ') <> ''
      Let $No_List = 'N'
      Let $WhereClause = ''
      Let $WhereClause = ' AND JOB.SETID_DEPT = ' || '''' || &Setid || '''' || ' AND DPT.DEPTID = ' || '''' || &Deptid || ''''
      Show 'Processing DEPTID : ' &Deptid
      Do Process-Payee
   End-if
   FROM PS_GPSG_PSLP_DP_RC BPY1
    WHERE BPY1.OPRID       = $Prcs_OprID
      AND BPY1.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Locn-List
!            Process Locations selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Locn-List
Begin-SELECT
CPY1.SETID    &SetId1
CPY1.LOCATION &Location
   If rtrim(&Location, ' ') <> ''
      Let $No_List = 'N'
      Let $WhereClause = ''
      Let $WhereClause = ' AND JOB.SETID_LOCATION = ' || '''' || &Setid1 || '''' || ' AND LOC.LOCATION = ' || '''' || &Location || ''''
      Show 'Processing Location : ' &Location
      Do Process-Payee
   End-if
   FROM PS_GPSG_PSLP_LC_RC CPY1
    WHERE CPY1.OPRID       = $Prcs_OprID
      AND CPY1.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Pay Entity List
!            Process Pay Entity selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Pay-Entity-List
Begin-SELECT
DPY1.PAY_ENTITY &PayEntity

   Let $WhereClause = ''

   If rtrim(&PayEntity, ' ') <> ''
      Let $No_List = 'N'
      Let $WhereClause = ' AND PER.PAY_ENTITY = ' || '''' || &PayEntity || ''''
      Show ' $WhereClause : ' $WhereClause
      Do Process-Payee
   End-if
   FROM PS_GPSG_PSLP_PE_RC DPY1
     WHERE DPY1.OPRID       = $Prcs_OprID
       AND DPY1.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Paygroup List
!            Process Paygroup selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-PayGroup-List
Begin-SELECT
EPY1.GP_PAYGROUP &PayGrp

   If rtrim(&PayGrp, ' ') <> ''
      Let $No_List = 'N'
      Let $WhereClause = ''
      Let $WhereClause = ' AND PER.GP_PAYGROUP = ' || '''' || &PayGrp || ''''
      Do Process-Payee
   End-if

   FROM PS_GPSG_PSLP_PG_RC EPY1
    WHERE EPY1.OPRID       = $Prcs_OprID
      AND EPY1.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-Country-Name
!            Get-Country Name
!**************************************************************************
Begin-procedure Get-Country-Name
  Let $Country = ''
Begin-SELECT
CTY.DESCR
    Let $Country = &CTY.DESCR
  FROM PS_COUNTRY_TBL CTY
 WHERE CTY.COUNTRY = $Countrycode
End-SELECT
End-procedure
!
!**************************************************************************
! Procedure: Get-GP-Paygroup
!            Get the GP Paygroup if none of the lists has been chosen.
!**************************************************************************
Begin-procedure Get-GP-Paygroup

 Create-Array Name=Gp_Paygroups Size=10
 Field=Gp_Paygroup:Char
 Let #I = 1

Begin-SELECT
DTL.GP_PAYGROUP
DTL.CAL_ID

  Let $GP_Pygrp = ''
  Let $Payroll_CalID = ''

  Let $Payroll_CalID = &DTL.CAL_ID
  Let $GP_Pygrp   = &DTL.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1

FROM PS_GP_CAL_RUN_DTL DTL
WHERE DTL.CAL_RUN_ID = $Cal_Run_ID
AND DTL.CALC_TYPE = 'P'
End-SELECT

Begin-SELECT
DTLA.GP_PAYGROUP

  Let $GP_Pygrp   = &DTLA.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1

FROM PS_GP_CAL_RUN_OFF DTLA
WHERE DTLA.CAL_RUN_ID = $Cal_Run_ID
End-SELECT

End-procedure
!
!**************************************************************************
! Procedure: Select-Parameters
!            Select-Parameters
!**************************************************************************
Begin-procedure Select-Parameters
begin-select
RC.CAL_RUN_ID
RC.GPSG_SORT_KEY1
RC.GPSG_SORT_KEY2
RC.GPSG_SORT_KEY3

FROM  PS_GPSG_RNCTL_PSLP RC
WHERE RC.OPRID       = $Prcs_OprID
  AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select

  Let $Cal_Run_ID = RTRIM(&RC.CAL_RUN_ID, ' ')
  Let $sort_key1  = &RC.GPSG_SORT_KEY1
  Let $sort_key2  = &RC.GPSG_SORT_KEY2
  Let $sort_key3  = &RC.GPSG_SORT_KEY3

end-procedure
!
!**************************************************************************
! Procedure: Get-JOB-JOBTitle-Details
!            Get the JOB Code title
!**************************************************************************
Begin-procedure Get-JOB-JOBTitle-Details
  Let $JobTitle = ''
Begin-SELECT
JDD3.GPSG_DESCR

     Let $JobTitle = &JDD3.GPSG_DESCR

  FROM PS_GPSG_JOB_JBC_VW JDD3
    WHERE JDD3.CAL_ID   = $Cal_ID_Job
      AND JDD3.EMPLID   = $Emplid
      AND JDD3.EMPL_RCD = #Empl_Rcd
End-SELECT
End-Procedure
!

!**************************************************************************
! Procedure: Get-Calid-Offcyle
!            Get-Calid-Offcyle
!**************************************************************************

begin-procedure Get-Calid-Offcyle

   Let $Cal_ID_Job = ''
begin-select
HH.SRC_CAL_ID 
   Let $Cal_ID_Job = &HH.SRC_CAL_ID 

   DO Get-JOB-JOBTitle-Details
   
FROM  PS_GP_PYE_CAL HH
WHERE HH.EMPLID = $Emplid
AND HH.EMPL_RCD = #Empl_Rcd
AND HH.CAL_ID = $Cal_ID
End-Select
   

end-procedure

!************************************************************************
!************************************************************************
! Routines and code below have been added to enable ePay Implementation *
!************************************************************************
!************************************************************************
!
begin-Procedure Get-NetAmountValue
   Let #NetPayAccumulatorValue = 0
Begin-SELECT !on-error=SQL-Error
!SUM(ENP.PIN_NET_VAL) &NetPayVal
DISTINCT ENP.PIN_NET_VAL &NetPayVal

    Let #NetPayAccumulatorValue = &NetPayVal

  FROM PS_GP_PYE_SEG_STAT ENP
   WHERE ENP.EMPLID         = $Emplid
     AND ENP.EMPL_RCD       = #Empl_Rcd
     AND ENP.CAL_RUN_ID     = $Cal_Run_ID
     AND ENP.CAL_ID         = $Cal_ID
     AND ENP.GP_PAYGROUP    = $GP_Paygroup
     AND ENP.SEG_BGN_DT     = $SegBgnDt
   !  AND ENP.PIN_NET_VAL    <> 0
End-SELECT
End-Procedure
!
!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init
   let $sql-statement = 'GPSGPY01.sqr, GP-ePay-Init '

  Do Check-ePay-installed ($ePay_Installed)

    If $ePay_Installed = 'Y'
     Move 'GPSGPY01' to $ReportID

      let #eV4 =  To_number($prcs_process_instance)

      !* have the Output Working Directory from the Process parameters table
      do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

      !* have the URL id from the Payslip option table
      do Get-ePay-URLid ('SGP', $eV18)

      !* Global ePay variable settings used in GP-ePay procedures in this SQR
      let $eV1 = $prcs_oprid
      let $eV2 = $prcs_run_cntl_id
      let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

      ! Open the file for writing epay control data
      ! Let $GP_PSLP_CTLFILE   = $eV3 || '.txt'
      ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
      ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GP_PSLP_CTLFILE)

      ! when we do not pass a control file
       Let $GP_PSLP_CTLFILE = ' '
       Let $FILELAYOUT = ' '

    End-If

end-procedure !GP-ePay-Init

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************

begin-procedure GP-ePay-Guide

   let $sql-statement = 'GPSGPY01.sqr,GP-ePay-Guide'

 If $ePay_Installed = 'Y'

   do Get-RUN-TYPE  ! not an ePay procedure

   Let $strEmplRcd = to_char(#Empl_Rcd)
   let $strEmplRcd  = rtrim($strEmplRcd,' ')
   let $strEmplRcd  = ltrim($strEmplRcd,' ')

   let $eV5  = rtrim($Emplid, ' ')
   let $eV5  = ltrim($eV5, ' ')
   let $eV6  = rtrim($Cal_Run_ID,' ')
   let $eV6  = ltrim($eV6,' ')
   let $eV7  = 'GPSGP'
   let $eV8  = $strEmplRcd || ' ' || $Pay_Dt_To_Conv ! gp epay payslip id
   !let $eV8  = rtrim($CAL_run_ID, ' ') || '_' || $eV5 || '_' || $strEmplRcd        ! gp epay payslip id
   let $eV9  = $pymt_dt
   let $eV10 = $Pay_Pd_To_Dt
   let $eV11 = $SegBgnDt
   ! Perform routine to retrieve the NetPay amount based on Net pay pin number
   Do Get-NetAmountValue
   let #eV12 = #NetPayAccumulatorValue ! net pay

   let $eV13 = $PayEntityDescr   ! SGP will populate the Pay Entity Name in the Description column.

   let $eV14 = rtrim($Run_Type, ' ')
   !let $eV14 = ' ' ! we are not populating the run type
   let $eV15 = 'ORIG' ! payslip status ORIGINAL
   let $eV16 = $eV5 || '_' || $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'       !sysfilename of the payslip pdf
   let $eV17 = $eV16                                                           !userfilename  - what the payee sees filename as
   let #eV19 = #BeginPageNumber                                                !begin page number of payslip in output report
   let #eV20 = #EndPageNumber                                                  !end page number of payslip in output report

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

    do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

!   do Write-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If

end-procedure ! GP-ePay-Guide

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control

let $sql-statement = 'GPSGPY01.sqr,GP-ePay-Control '

 If $ePay_Installed = 'Y'
   Let $rptid = lower($ReportID)
   let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'
   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GP_PSLP_CTLFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')

 End-If

end-procedure !GP-ePay-Control
!
!***********************************************************************
! Get-RUN-TYPE                                                         *
!***********************************************************************
begin-procedure Get-RUN-TYPE

let $RUN_TYPE           =  ''
let $sql-statement = 'GPSGPY01.sqr, Select, Get-RUN-TYPE'

!Check if CAL_RUN_ID is Off Cycle
BEGIN-SELECT ON-ERROR=SQL-Error
OFF_CYCLE

    Let $OffCycle = Rtrim(&OFF_CYCLE, ' ')

FROM PS_GP_CAL_RUN
WHERE CAL_RUN_ID = $CAL_RUN_ID
END-SELECT

If $OffCycle = 'Y'

BEGIN-SELECT ON-ERROR=SQL-Error
OFFCAL.RUN_TYPE
   let $RUN_TYPE = rtrim(&OFFCAL.RUN_TYPE, ' ')
FROM PS_GP_PYE_CAL OFFCAL
WHERE OFFCAL.EMPLID       = $Emplid
  AND OFFCAL.EMPL_RCD     = #Empl_Rcd
  AND OFFCAL.GP_PAYGROUP  = $GP_PAYGROUP
  AND OFFCAL.CAL_ID       = $CAL_ID
END-SELECT

Else

BEGIN-SELECT ON-ERROR=SQL-Error
A.RUN_TYPE
   let $RUN_TYPE = rtrim(&A.RUN_TYPE, ' ')
FROM   PS_GP_CALENDAR  A
WHERE   A.GP_PAYGROUP       = $GP_PAYGROUP
    AND A.CAL_ID            = $CAL_ID
END-SELECT

End-If

end-procedure


!Mobile Payslip - Start
!******************************************************************
!***    fetching element group
!******************************************************************
begin-procedure get-element-group

begin-SELECT DISTINCT
A.PIN_NUM   &PIN_NM

    LET #PARENT_PIN = &PIN_NM

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #ED_PinNum
end-SELECT

begin-SELECT DISTINCT
A.PIN_NUM   &PIN_NM_Y

    LET #PARENT_PIN_Y = &PIN_NM_Y

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #AcumAmtPin
end-SELECT

end-procedure


begin-Procedure get_Accum_Data
  Let #SeqNo8 = 0
begin-SELECT 
AC.EMPL_RCD_ACUM     &EmpRcdAc
AC.ACM_FROM_DT       &AcmFromDt
AC.ACM_THRU_DT       &AcmToDt
AC.SLICE_BGN_DT      &SliceBgnDt
AC.SLICE_END_DT      &SliceEndDt
AC.SEQ_NUM8          &SeqNo8
AC.USER_KEY1         &UsrKey1
AC.USER_KEY2         &UsrKey2
AC.USER_KEY3         &UsrKey3
AC.USER_KEY4         &UsrKey4
AC.USER_KEY5         &UsrKey5
AC.USER_KEY6         &UsrKey6
AC.CALC_RSLT_VAL     &CalcResultVal
AC.CALC_VAL          &CalcVal

  Let #SeqNo8 = &SeqNo8

FROM PS_GP_RSLT_ACUM AC

WHERE  AC.EMPLID = $Emplid
AND AC.CAL_RUN_ID = $Cal_Run_ID
and AC.EMPL_RCD = #Empl_Rcd
AND AC.GP_PAYGROUP = $GP_Paygroup
AND AC.CAL_ID =   $Cal_ID  
AND AC.ORIG_CAL_RUN_ID = &ORIG_CALID
!AND AC.RSLT_SEG_NUM = &RSLT_SEG_NUM
AND AC.PIN_NUM = #AcumAmtPin 
AND AC.SLICE_END_DT = &SEG_END_DT

end-SELECT

end-procedure  !get_Accum_Data

!**************************************************************************
! Procedure: check-mob-custom-enabled
!            check-mob-custom-enabled
!**************************************************************************

begin-procedure check-mob-custom-enabled

     let $custEnabled = 'N'

begin-select
GP_SS_MPSLP_DATA    &MbPslpOpt

     if &MbPslpOpt = 'CUST'
     let $custEnabled = 'Y'
   else
     let $custEnabled = 'N'
   end-if

FROM PS_GP_SS_PSLP_OPT
WHERE COUNTRY = 'SGP'
AND GP_PSLP_HDCPYOPTN = 'Y'
AND GP_SS_MPSLP_ENABLE = 'Y'
end-select

end-procedure !check-mob-custom-enabled
!Mobile Payslip - End

!
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Routines to format address
#Include 'readxlat.sqc'  !Routines to read Translate table
!ePay Implementation Changes begins here
#Include 'gpsspslp.sqc'     ! ePay SQC with ePay procedures
!ePay Implementation Changes ends here
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
