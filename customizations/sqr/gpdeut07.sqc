!***********************************************************************
! GPDEUT07 : Several utilities used in German/Swiss-Payroll SQRs       *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:38:01                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! wdu05-891b1: codeline merge 2005-05-12 - unch891
! wdu06-890b5: added GPDE Address Printing Utilities (according DIN 5008)
! wdu06-890b7 added handler for foreign addresses

! ===FUNCTIONAL UPDATE STAMP: 20061013-1040 wdu06-890b7===

begin-procedure Get-Nation-Duevo-By-Country($country, :$Nation_Descr, :$Nationality, :$Nationality_Cd)

let $Nation_Descr   = ''
let $Nationality    = ''
let $Nationality_Cd = ''

BEGIN-SELECT
DESCR                  &C_ND_DESCR
NATIONALITY            &C_NATIONALITY
NATIONALITY_CD         &C_NATIONALITY_CD

   let $Nation_Descr    = &C_ND_DESCR
   let $Nationality     = &C_NATIONALITY
   let $Nationality_Cd  = &C_NATIONALITY_CD

FROM PS_NATIONS_DUEVO

WHERE COUNTRY = $country

END-SELECT

if rtrim($Nation_Descr, ' ') = ''
   let $Nation_Descr = 'ohne Angaben'
end-if

if rtrim($Nationality, ' ') = ''
   let $Nationality = $Nation_Descr
end-if

end-procedure Get-Nation-Duevo-By-Country
!*****************************************************************************

begin-procedure GetFileExtension ($outformat, :$FileExtension)

    evaluate $outformat
    when = '0'    !Any
         let $FileExtension = '.lis'
         break
    when = '1'    !None
         let $FileExtension = '.lis'
         break
    when = '2'    !Acrobat
         let $FileExtension = '.pdf'
         break
    when = '3'    !Comma Delimited
         let $FileExtension = '.csv'
         break
    when = '4'    !HP Format lis
         let $FileExtension = '.lis'
         break
    when = '5'    !HTML Documents
         let $FileExtension = '.htm'
         break
    when = '6'    !Line Printer format
         let $FileExtension = '.lis'
         break
    when = '7'    !Lotus 1-2-3 Files
         let $FileExtension = '.wks'
         break
    when = '8'    !Microsoft Excel
         let $FileExtension = '.xls'
         break
    when = '9'    !Microsoft Word
         let $FileExtension = '.doc'
         break
    when = '10'   !Postscript
         let $FileExtension = '.lis'
         break
    when = '11'   !Crystal Reports
         let $FileExtension = '.rpt'
         break
    when = '12'   !Rich Text File
         let $FileExtension = '.rtf'
         break
    when = '13'   !Sqr Portable Format
         let $FileExtension = '.spf'
         break
    when = '14'    !Text Files
         let $FileExtension = '.txt'
         break
    when = '15'    !Other
         let $FileExtension = '.lis'
         break
    when = '16'    !Default
         let $FileExtension = '.lis'
         break
    when = '17'    !XML Format
         let $FileExtension = '.xml'
         break
    when = '18'    !Data Mover Data File
         let $FileExtension = '.dat'
         break
    when-other     !None
         let $FileExtension = '.pdf'
         break
  end-evaluate
end-procedure

begin-procedure GetOutputDir ($RUNLOCATION, $OUTDESTTYPE, $OUTDEST, :$outputdir)


   if  $RUNLOCATION = 'Server'           ! Client(1)/Server(2)/Both(0)
       if $OUTDESTTYPE = 'File'        ! File(2)

                   ! weak assumption (dot in full name indicates that file has been entered vs directory)
                   ! but better than nothing
                   find  '.'  in  $OUTDEST  0  #fileVSdir
                   if #fileVSdir <> -1

                           find  '/'  in  $OUTDEST  0  #unix_delimit
                           find  '\'  in  $OUTDEST  0  #win_delimit
                           if #unix_delimit <> -1
                                  let $delimiter = '/'
                           end-if
                           if #win_delimit  <> -1
                                  let $delimiter = '\'
                           end-if
                           let #acc = 1
                           while instr($OUTDEST,$delimiter,#acc ) <> 0
                                         let #acc = instr($OUTDEST,$delimiter,#acc ) + 1
                           end-while
                           let $outputdir = substr($OUTDEST, 1, #acc - 1)
                   else

                           let $outputdir = $OUTDEST || $delimiter
                   end-if

           else
                #debug display 'server = not file'
                let $outputdir = '{FILEPREFIX}'
           end-if
   else
        #debug display 'client'
        let $outputdir = '{FILEPREFIX}'
   end-if

end-procedure


! --------------------------------------------------------
!
!  GPDE Address Printing Utilities (according DIN 5008)
!  wdu06-890b5
! --------------------------------------------------------
!
! Sample for Usage: use one adapter per address label to minimize confusion
!
!  begin-procedure DinPrintAdapter01
!      ! all values must be assigned or blanked!
!      let $DinInputAnrede = 'Herrn'
!      let $DinInputFullName = &NM1.NAME
!      let $DinInputADDRESS1       = &A1.ADDRESS1
!      let $DinInputADDRESS2       = &A1.ADDRESS2
!      let $DinInputADDRESS3       = &A1.ADDRESS3
!      let $DinInputADDRESS4       = &A1.ADDRESS4
!      let $DinInputPOSTAL         = &A1.POSTAL
!      let $DinInputCITY           = &A1.CITY
!      let $DinInputCOUNTRY        = &A1.COUNTRY
!      !
!      ! #DinPrintRow = -1      ==> no printing
!      ! #DinPrintRow =  0      ==> print now (+1,#DinPrintCol)
!      ! #DinPrintRow = other   ==> print 6 lines at specified row/column
!      ! 
!      let #DinPrintRow = 0
!      let #DinPrintCol = 18
!      do DinProcessAddress
!  end-procedure


! --------------------------------------------------------
! DinProcessAddress
! --------------------------------------------------------
! input parameters
! 
! $DinInputAnrede       not modified, skipped if empty
! $DinInputFullName not modified
! $DinInputAddress1 skipped if empty
! $DinInputAddress2 skipped if empty
! $DinInputAddress3 skipped if empty
! $DinInputAddress4 skipped if empty
! $DinInputCity
! $DinInputPostal
! $DinInputCountry  look up long text when not DEU
! 
! positions for printing
! 
! #DinPrintRow      -1 to not print, 0 to print here
! #DinPrintCol
! --------------------------------------------------------


begin-procedure DinProcessAddress
! all local vars start with Din

! first do some preprocessing
! set default for postal and city
let $DinInputPostalCity = $DinInputPostal || ' ' || $DinInputCity
! check foreign address formats 
if $DinInputCOUNTRY <> 'DEU'
    do FixForeignAddress
end-if


! create is executed only once at compile time
create-array name=AddrLines size=10
field=zeile:CHAR:1=''

!clear the array to the defaults for each call
clear-array name=AddrLines


! index for the currently open line
let #DinLine=0
if rtrim( $DinInputAnrede   ,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputAnrede
end-if
! makes not much sense with name, but we do it anyway
if rtrim( $DinInputFullName,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputFullName
end-if
!
! secondary address fields, skip all empty fields
if rtrim( $DinInputAddress1,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputAddress1
end-if
if rtrim( $DinInputAddress2,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputAddress2
end-if
if rtrim( $DinInputAddress3,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputAddress3
end-if
if rtrim( $DinInputAddress4,' ') <> ''
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputAddress4
end-if

! wdu06-890b7 Postal+City override in FixForeignAddress
!
let #DinLine = #DinLine + 1
let AddrLines.zeile(#DinLine) = $DinInputPostalCity 


if rtrim($DinInputCountry,' ') <> 'DEU'
    ! call country name lookup, returns $DinInputCountryName
    do SQC_GetCountryLongName
    ! call uppercaser when international
    UPPERCASE $DinInputCountryName
    !
    let #DinLine = #DinLine + 1
    let AddrLines.zeile(#DinLine) = $DinInputCountryName
end-if

! -- done, now print from array

if  #DinPrintRow > 0
    let #DinPrintIndex = 0
    while #DinPrintIndex <  #DinLine
        let  #DinPrintIndex =  #DinPrintIndex + 1
        let $DinTempLine = AddrLines.zeile(#DinPrintIndex)
        print  $DinTempLine  (#DinPrintRow,#DinPrintCol)
        let #DinPrintRow = #DinPrintRow + 1
    end-while
end-if
if  #DinPrintRow = 0
    let #DinPrintIndex = 0
    while #DinPrintIndex <  #DinLine
        let  #DinPrintIndex =  #DinPrintIndex + 1
        let $DinTempLine = AddrLines.zeile(#DinPrintIndex)
        print  $DinTempLine  (+1,#DinPrintCol)
        let #DinPrintRow = #DinPrintRow + 1
    end-while
end-if
end-procedure


!
! get the long name for the country in $DinInputCountry
!
begin-procedure SQC_GetCountryLongName
begin-select
CTRY1.DESCR
    let $DinInputCountryName = &CTRY1.DESCR
from PS_COUNTRY_TBL CTRY1
WHERE COUNTRY = $DinInputCountry
end-select
end-procedure




begin-procedure SQC_GetStateLongName
! parm in:  $DinInputCountry, $DinInputSTATE
! parm out: $DinInputSTATE_desc
!
begin-select
U07STASRCH.DESCR
    let $DinInputSTATE_desc = &U07STASRCH.DESCR 
FROM PS_STATE_TBL U07STASRCH
WHERE U07STASRCH.STATE = $DinInputSTATE
AND U07STASRCH.COUNTRY = $DinInputCountry
END-SELECT
end-procedure



begin-procedure FixForeignAddress
! ------------------------------------------------------------
!
! preprocessor to apply address format specifics for foreign
! countries and DIN specific case handling.
!
! In general, ADDRESS1..ADDRESS4 are printed if not blank
! if a country has different rules, then here is the place to 
! correct it.
! ------------------------------------------------------------
! wdu06-890b7 added this handler for foreign addresses
    !
    ! city Case handling (uppercase when international)
    !
    if rtrim($DinInputCountry,' ') <> 'DEU'
        UPPERCASE $DinInputCity
    end-if

    ! set default for postal and city
    let $DinInputPostalCity = $DinInputPostal || ' ' || $DinInputCity
    
    ! we may need to restore the language code after xlats
    let $SavedLanguageCd = $CURR_LANGUAGE_CD

    if (( $DinInputCountry <> 'DEU' ) AND  ( $DinInputSTATE <> '' ))
        do SQC_GetStateLongName
        ! returns: $DinInputSTATE_desc
    end-if
    
    
    if $DinInputCOUNTRY = 'NLD'
        ! coding: A3=A3+N1+N2+HT
        let $T = $DinInputNUM1
        if $T <> '' 
            let $DinInputADDRESS3 = $DinInputADDRESS3 || ' ' || $T
        end-if
        let $T = $DinInputNUM2
        if $T <> '' 
            let $DinInputADDRESS3 = $DinInputADDRESS3 || ' ' || $T
        end-if
        let $T = $DinInputHOUSE_TYPE
        if $T <> '' 
            let $DinInputADDRESS3 = $DinInputADDRESS3 || ' ' || $T
        end-if
    end-if

    if $DinInputCOUNTRY = 'BRA'
        ! coding: a1=a1+n1 , cp=c+s+p
        let $T = $DinInputNUM1
        if $T <> '' 
            let $DinInputADDRESS1 = $DinInputADDRESS1 || ' ' || $T
        end-if
        let $DinInputPostalCity = $DinInputCity || ' ' ||  $DinInputSTATE_desc || ' ' || $DinInputPostal 
    end-if
    
    if $DinInputCOUNTRY  = 'ESP'
        ! coding: A1= AF1X+A1,+AF2.+AF3 +N1-+N2   , pc=p-c.s
        ! notice: the street-type xlat in ADDR_FIELD1 is ignored, because it would
        !         require the spanish translation of xlats loaded in the database
        !         The workaround is to provide the full street value in ADDRESS1
        
        let $T = $DinInputADDR_FIELD2
        if $T <> '' 
            let $DinInputADDRESS1 = $DinInputADDRESS1 || ' ' || $T || '.'
        end-if
        
        let $T = $DinInputADDR_FIELD3
        if $T <> '' 
            let $DinInputADDRESS1 = $DinInputADDRESS1 || ' ' || $T
        end-if
        
        let $T = $DinInputNUM1
        if $T <> '' 
            let $DinInputADDRESS1 = $DinInputADDRESS1 || ' ' || $T
        end-if

        let $T = $DinInputNUM2
        if $T <> '' 
            let $DinInputADDRESS1 = $DinInputADDRESS1 || '-' || $T
        end-if

        let $tmp = ''
        if ( $DinInputSTATE <> '' )
             let $tmp = '. ' || $DinInputSTATE_desc
        end-if
        let $DinInputPostalCity =  $DinInputPostal || '-' || $DinInputCity || $tmp

    end-if
    !
    if $DinInputCOUNTRY = 'BEL'
        ! coding: a1 = a2, a2=A3+N1+N2  , a3=''
        ! simpler: a3 = a3+N1+N2
        let $T = $DinInputNUM1
        if $T <> '' 
            let $DinInputADDRESS3 = $DinInputADDRESS3 || ' ' || $T
        end-if
        let $T = $DinInputNUM2
        if $T <> '' 
            let $DinInputADDRESS3 = $DinInputADDRESS3 || ' ' || $T
        end-if
    end-if

    if $DinInputCOUNTRY = 'FRA'
        ! coding: pc=P+C+A4 ,  a4 = ''
        let $DinInputPostalCity = $DinInputPostal || ' ' || $DinInputCity || ' ' || $DinInputADDRESS4
        let $DinInputADDRESS4=''
    end-if
    
    if $DinInputCOUNTRY = 'ITA'
        ! coding: pc=P+C+A4 ,  a4 = ''
        let $DinInputPostalCity = $DinInputPostal || ' ' || $DinInputCity || ' ' || $DinInputADDRESS4
        let $DinInputADDRESS4=''

        let $tmp = ''
        if ( $DinInputSTATE <> '' )
             let $tmp = ' (' || $DinInputSTATE_desc || ')'
        end-if
        let $DinInputPostalCity =  $DinInputPostal || ' ' || $DinInputCity || $tmp
    end-if
end-procedure


