!***********************************************************************
! GPAUPY01.SQR        GLOBAL PAYROLL AUST PAYSLIP PRINT PROGRAM        *
!                                                                      *
!  Description:                                                        *
!                  This program will take the results from the main GP *
!                  result tables and based on a payslp template ID     *
!                  attached to a paygroup, extract, format and print   *
!                  the results.                                        *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  30610450                                            !
!                                                                      *
!**********************************************************************!
!Incident : Description                                                !
! Dated      Author  ICE       Changes                                 *
! 10/02/03   KWH    546697000  Default to printing HOME Address if the *
!                              MAIL Address doesn't exist, and to Loc'n*
!                              Address if HOME Address doesn't exist.  *
! 24/02/03   KWH    564191000  Simplify SQL in Process_Payee procedure *
!                              it was too complex for DB2              *
! 07/04/03   KWH    123513     Changed to get leave entitlements from  *
!                              the last calendar & segment in the      *
!                              calendar group.                         *
! 15/05/03   SN     127339     Legislative requirement to display      *
!                              super membership number for deduction   *
! 29/05/03   SN     127806     Restrict 1 payslip per calendar         *
!                              Instead of payslip per segment          *
! 16/10/2003 HG     142580     Retrieve membership number from         *
!                              GPAU_RCPPYE_DTL rather than             *
!                              GPAU_RCPPYE                             *
! 19/11/2003 SN     142962     Leave balance retrieved from incorrect  *
!                              calendar                                *
! 07/01/2004 EC     680751002  Year to date amounts are incorrect when *
!                            employee is terminated and rehired        *
! 19/03/04          685859000  No details for  employees those were    *
!                              transferred to Paygroup in mid-month    *
! 21/06/04          671917000  Tuning for AUS payslips 8.8 - Unisys    *
! 20/08/04          1115048000 Tuning for AUS payslips 8.8 - Unisys    *
! 13/10/04                     Incorporate Off Cycle Payment Reportin  *
! 03/08/11   SG     869882     Fixes for YTD Not being printed in the  *
!                              payslip for all the elements processed  *
!**********************************************************************!
#include 'setenv.sqc'   !Set environment

Begin-Setup

#include 'setupdb.sqc'
  page-size 85 130

  declare printer
        type          = HPLASERJET
        orientation   = portrait
        top-margin    = .27
        left-margin   = 0.10
        font          = 3
        point-size    = 8

        Declare-Variable
        Integer #_coecount
        Integer #_Acum-Array-Total
        Integer #Empl_Rcd
        Integer #Rslt_Seg_Num
        Integer #Acum_Rslt_Seg_Num
        Integer #Pin_Num
        Integer #Sect_Seq_Num
        Integer #ED_PinNum
        Integer #AcumAmtPin
        Integer #AcumUnitPin
        Integer #LastPinNum
        Integer #Pin1
        Integer #Pin2
        Integer #Pin3
        Integer #Pin4
        Integer #Acct_Nbr
        Integer #Msg_Nbr
         End-Declare
End-Setup

!List of constants for program
#define $payee_list     '10'
#define box_shade        40
#define colA 2
#define colB 8
#define colC 16
#define colD 54
#define colE 32
#define colF 40
#define colG 72
#define colH 56
#define colI 72
#define colII 84
#define colI2 87
#define colI3 89
#define colJ 72
#define colK 90
#define colL 88
#define colM 96
#define colMM 101
#define colN 108
#define colO 112
#define colP 114

!Earnings and Deductions Heading Settings
#define ColHD3  26
#define ColHD5  33
#define ColHD6  46
#define ColHD7  55
#define ColHD8  64
#define ColHD9  74
#define ColHD10 84
#define ColHD11 96
#define ColHD12 105
#define ColHD13 115
#define ColHD14 124

!Earnings and deductions column settings
#define ColED3  22
#define ColED5  33
#define ColED6  41
#define ColED7  49
#define ColED8  59
#define ColED9  71
#define ColED10 81
#define ColED11 91
#define ColED12 101
#define ColED13 111
#define ColED14 121

!Accumulators and its heading col settings
#define ColAC1  36
#define ColAC2  51
#define ColAC3  66
#define ColAC4  81
#define ColAC5  96
#define ColAC6  111

begin-report

 do Create-Rslt-Acum-Array

  do Init-DateTime
  Do Get-Current-DateTime
  do Init-Report
  do Process-Main
!ePay Implementation Changes begins here
  do GP-ePay-Control ! if ePay installed have a control row inserted.
!ePay Implementation Changes ends here

  Do Delete-RunControl

  do Stdapi-Term
end-report
!
begin-heading 19


   graphic (0,1,130) horz-line
   Print $Header1 (8, {colII})   Bold
   Print $Header3 (9, {colII})   Bold
   If #PPL_dt_flag = 1
   Print $Header3a (10, {colII}) Bold
   Print $Header3b (11, {colII}) Bold   
   End-if
   Print $Header4a (12, {colII})  Bold

   Print $Header5a (13,{colII})   Bold

   Print $Header6a (14,{colII})     Bold
   Print $Header6b  (15, {colII})   Bold


   Print $Header7a  (16,{colII})    Bold

   Print $Header8a  (17,{colII})    Bold
   Print $Header9   (18,{colII})    Bold
   Print $Header10  (19,{colII})    Bold
  if $Del_opt <> '20'
      Print $ADDLINE1 (15, 20)   Bold  !Replacing header 6
      Print $ADDLINE2 (16, 20)   Bold  !Replacing Header 7
      Print $ADDLINE3  (17, 20)  Bold  !Replacing header 8
      Print $ADDLINE31 (18, 20)  Bold  !Replacing header 9
      Print $ADDLINE4  (19, 20)  Bold  !REplacing Header 9A
  End-if

  if $Del_opt = '20' ! Department
     Print $EmployeeName (8, 5)   Bold  !Replacing header 6
  End-if

end-heading
!
begin-footing 2
   graphic (1,1,130) horz-line
end-footing
!
!**************************************************************!
! Procedure: Create-Rslt-Acum-Array
! Description: Create array to store data from PS_GP_RSLT_ACUM
!**************************************************************!
begin-procedure Create-Rslt-Acum-Array
  Create-array name=RSLT_ACUM_ARRAY Size=400
   field=PIN_NUM:Integer
   field=CALC_RSLT_VAL:Number
   field=RSLT_SEG_NUM:Integer
   field=CHECK:Integer
end-procedure
!
!**************************************************************************
! Procedure: Init-Report
! Description: Initialise header and run control variables.
!**************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  display '$prcs_process_instance: ' noline
  display $prcs_process_instance

  if $prcs_process_instance = ''
    ! no SQRW prompt
  else
    do Select-Parameters
  end-if
!ePay Implementation Changes begins here
  do GP-ePay-Init ! Initialize ePay variables
!ePay Implementation Changes ends here

  do Define-Values

end-procedure
!
!**************************************************************************
! Procedure: Define-Values
! Description: Define general SQL Dynamic Query Variables.
!**************************************************************************
begin-procedure Define-Values

Let $EmplList = 'N'
Let $DeptList = 'N'
Let $LocnList = 'N'
Let $PyenList = 'N'
Let $PyGPList = 'N'
Let $No_List  = 'Y'

!Sort order
  If $sort_key1 <> '00'
     evaluate $sort_key1
            when = '10'
                let $Sort_Order1  ='ORDER BY PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order1  ='ORDER BY JOB.LOCATION '
          when = '30'
                let $Sort_Order1  ='ORDER BY JOB.DEPTID '
          when = '40'
                let $Sort_Order1  ='ORDER BY PERS.NAME '
          When = '50'
                let $Sort_Order1  ='ORDER BY PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key2 <> '00'
     evaluate $sort_key2
            when = '10'
                let $Sort_Order2  = ', PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order2  = ', JOB.LOCATION '
          when = '30'
                let $Sort_Order2  = ', JOB.DEPTID '
          when = '40'
                let $Sort_Order2  = ', PERS.NAME '
          When = '50'
                let $Sort_Order2  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key3 <> '00'
     evaluate $sort_key3
            when = '10'
                let $Sort_Order3  = ', PER.PAY_ENTITY '
          when = '20'
                let $Sort_Order3  = ', JOB.LOCATION '
          when = '30'
                let $Sort_Order3  = ', JOB.DEPTID '
          when = '40'
                let $Sort_Order3  = ', PERS.NAME '
          When = '50'
                let $Sort_Order3  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
     string $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order

  if $Sort_Key1 = '00'
     let $Sort_order = 'ORDER BY PERS.NAME, PER.RSLT_SEG_NUM '
  End-If
  if ($Sort_Key1 = '20' or $Sort_Key1 = '30') or
     ($Sort_Key2 = '20' or $Sort_Key2 = '30') or
     ($Sort_Key3 = '20' or $Sort_Key3 = '30')
#define colI 72
#define colI2 87
#define colI3 89
  End-If
end-procedure
!
!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
begin-procedure Process-Main

  !Mobile Payslip - Start
    do check-mob-custom-enabled
   !if( $custEnabled = 'Y')
      do init-mpslp($Cal_Run_ID)
        
      LET $GPwhere_clause = ' '
            
      do clean_mpslp_records ($Cal_Run_ID, $GPwhere_clause)
   !End-If
        
  !Mobile Payslip -  End
        
  Do Get-GP-Paygroup
  Do Process-Stream-List
  Do Process-Empl-List
  Do Process-Dept-List
  Do Process-Locn-List
  Do Process-Pay-Entity-List
  Do Process-PayGroup-List

  Let #J = 1

  If $No_List = 'Y'

     While #J <= #I

        Get $GP_Pygrp FROM Gp_Paygroups(#J)
        If #j = 1
           Let $WhereTemp = ' AND (PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
        Else
           if rtrim($GP_Pygrp,' ') <> ''
              Let $TempString = ' OR PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
              Let $WhereTemp = $WhereTemp || $TempString
           End-if
        End-If
        Let #J = #J + 1
     End-While
     if rtrim($WhereTemp,' ') <> ''
        Let $WhereTemp = $WhereTemp || ')'
        let $WhereClause = $WhereTemp
        Do Process-Payee
     End-if
  End-If

end-procedure
!
!
!**************************************************************************
! Procedure: Get_Payslip_Labels
! Description: Get the payslip labels on delivery option for the payees
!              based on the paygroup
!**************************************************************************
begin-procedure Get_Payslip_Labels
begin-SELECT on-error=SQL-Error
PSLP.GPAU_DEL_OPT
PSLP.GPAU_LBL_ACUM1
PSLP.GPAU_LBL_ACUM2
PSLP.GPAU_LBL_ACUM3
PSLP.GPAU_LBL_ACUM4
PSLP.GPAU_LBL_ACUM5
PSLP.GPAU_LBL_ACUM6


!Check if an override for the delivery address exits
        let $Del_Opt               = &PSLP.GPAU_DEL_OPT

        do Check_Override_Add
!If the deleivery option is secondary get the details

        If $Del_opt = '60' !then get the secondary address
              let $addr_Type = 'MAIL'
              let $Name = $EmployeeName
              do Get_Address
              If $Adr2Found = 'N'
                  Let $Del_opt = '50'
              end-if
        End-If

        let $Acum_Lbl1      = &PSLP.GPAU_LBL_ACUM1
        let $Acum_Lbl2      = &PSLP.GPAU_LBL_ACUM2
        let $Acum_Lbl3      = &PSLP.GPAU_LBL_ACUM3
        let $Acum_Lbl4      = &PSLP.GPAU_LBL_ACUM4
        let $Acum_Lbl5      = &PSLP.GPAU_LBL_ACUM5
        let $Acum_Lbl6      = &PSLP.GPAU_LBL_ACUM6

FROM PS_GPAU_PSLP PSLP,
PS_GP_PG_DTL_SGPAU SGPAU
WHERE PSLP.GPAU_PAYSLIP_ID = SGPAU.GPAU_PAYSLIP_ID
AND SGPAU.GP_PAYGROUP = $GP_Paygroup
AND PSLP.EFFDT = (SELECT MAX(PSLP1.EFFDT) FROM PS_GPAU_PSLP PSLP1
                       WHERE PSLP1.GPAU_PAYSLIP_ID = PSLP.GPAU_PAYSLIP_ID
                         AND PSLP1.EFFDT     <= $Pymt_Dt)
end-SELECT

end-procedure
!**************************************************************************
! Procedure:  Print_Summ_Lbls
! Description: Print the summary headings/labels
!**************************************************************************
Begin-Procedure Print_Summ_Lbls

!ePay Implementation Changes begins here
   Let #BeginPageNumber = #page-count
!ePay Implementation Changes ends here

        print 'Pay Summary' (+8) Center Bold Underline

        Do Find-Start-Pos ($Acum_Lbl1, {colAC1},#ReturnCol)
        print $Acum_Lbl1 (+1, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl2, {colAC2},#ReturnCol)
        print $Acum_Lbl2 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl3, {colAC3},#ReturnCol)
        print $Acum_Lbl3 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl4, {colAC4},#ReturnCol)
        print $Acum_Lbl4 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl5, {colAC5},#ReturnCol)
        print $Acum_Lbl5 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl6, {colAC6},#ReturnCol)
        print $Acum_Lbl6 (0, #ReturnCol) Bold

End-Procedure
!
!**************************************************************************
! Procedure:  Find-Start-Pos
! Description: Control the positioning  print the headings
!**************************************************************************
Begin-procedure Find-Start-Pos($Acum_Lbl, #StartCol,:#ReturnCol)
     Let $Acum_lbl = rtrim($Acum_lbl,' ')
     Let #Len = length($Acum_lbl)
     Let #ReturnCol = (#StartCol + 10) - #Len
     if #ReturnCol <= 0
        Let #ReturnCol = #StartCol
     End-if
End-procedure
!
!**************************************************************************
! Procedure:  Pad-String
! Description: Control the positioning  of the values
!**************************************************************************
Begin-procedure Pad-String($Label, $Value,:$ReturnVal)
     let #MaxLblLen = 17
     Let #Vallen  = length($Label)
     if #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
     else
        Let $PadVar = ''
     end-if
     Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-procedure
!
!
!**************************************************************************
! Procedure: Get_dept
! Description: Get the dept name of the payee
!**************************************************************************
begin-procedure Get_dept
      Let $dept_name = ''
begin-SELECT on-error=SQL-Error

DEPT.DESCR

      Let $dept_name = rtrim(&DEPT.DESCR,' ')

   FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SetIDDept
      AND DEPT.DEPTID = $Deptid
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID
                              AND DEPT1.EFFDT <= $PYMT_DT
                       )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get_location
! Description: Get the location of the payee
!**************************************************************************
begin-procedure Get_location
begin-SELECT on-error=SQL-Error
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.STATE
A.POSTAL
A.COUNTY
A.COUNTRY

        if $Del_Opt = '30'

           let $Name     = $EmployeeName
           let $address1 = &A.ADDRESS1
           let $address2 = &A.ADDRESS2
           let $address3 = &A.ADDRESS3
           let $address4 = &A.ADDRESS4
           let $City     = rtrim(&A.CITY, ' ')
           let $State    = &A.STATE
           let $Country  = &A.COUNTRY
           let $Postal   = &A.POSTAL

!514097000 do Get-Country-Name
           do adformat
           Let $ADDLINE6 = ''
           do Compress-Address
       end-if
       Let $LctnDesc = rtrim(&A.DESCR,' ')

FROM PS_LOCATION_TBL A
WHERE A.LOCATION = $Location
      AND A.SETID = $SetIDLocn
      AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_LOCATION_TBL A1
                            WHERE A1.SETID  = A.SETID
                              AND A1.LOCATION = A.LOCATION
                              AND A1.EFFDT <= $PYMT_DT
                       )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get-PayEntity
! Description: Get the pay entity details
!**************************************************************************
begin-procedure Get-PayEntity
  Let $PayEntityDescr = ''
begin-SELECT on-error=SQL-Error
PYE.DESCR

  Let $PayEntityDescr = rtrim(&PYE.DESCR,' ')

FROM PS_GP_PYENT PYE
WHERE PYE.PAY_ENTITY = $Pay_Ent
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get_Frequency
! Description: Get the frequency of the payee
!**************************************************************************
begin-procedure Get_Frequency

begin-SELECT on-error=SQL-Error
FREQ.DESCRSHORT

        let $freq_descr = &FREQ.DESCRSHORT
FROM
PS_FREQUENCY_TBL FREQ
WHERE FREQ.FREQUENCY_ID = $Comp_Freq
AND FREQ.EFFDT = (SELECT MAX(FREQ1.EFFDT)
                FROM PS_FREQUENCY_TBL FREQ1
                WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID
                  AND FREQ1.EFFDT <= $PYMT_DT)
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure         : Check_Excl_Dept
! Description   : Check if the payee's department has been excluded
!**************************************************************************
begin-procedure Check_Excl_Dept
begin-SELECT on-error=SQL-Error
DEPT.SETID
DEPT.DEPTID
        let $dept_excl = 'Y'
   FROM PS_GPAU_PSLP_DEPT DEPT
   WHERE DEPT.DEPTID = $Deptid
    AND  DEPT.SETID  = $SetIDDept
    AND DEPT.GPAU_PAYSLIP_ID = $Payslip_Id
    AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_GPAU_PSLP_DEPT DEPT1
                      WHERE DEPT1.DEPTID          = DEPT.DEPTID
                      AND DEPT1.SETID           = DEPT.SETID
                      AND DEPT1.GPAU_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure
!**************************************************************************
! Procedure         : Check_Excl_Loctn
! Description   : Check if the payee's location has been excluded
!**************************************************************************
begin-procedure Check_Excl_Loctn
begin-SELECT on-error=SQL-Error
LOCN.SETID
LOCN.LOCATION
        Let $locn_excl = 'Y'

   FROM PS_GPAU_PSLP_LOCTN LOCN
   WHERE LOCN.LOCATION = $Location
     AND LOCN.SETID = $SetIDLocn
     AND LOCN.GPAU_PAYSLIP_ID = $Payslip_Id
     AND LOCN.EFFDT = (SELECT MAX(LOCN1.EFFDT) FROM PS_GPAU_PSLP_LOCTN LOCN1
                      WHERE LOCN1.LOCATION     = LOCN.LOCATION
                      AND LOCN1.SETID        = LOCN.SETID
                      AND LOCN1.GPAU_PAYSLIP_ID = $Payslip_ID
                )
END-SELECT
end-procedure
!
!**************************************************************************
! Procedure     : Get_Payslip_Id
! Description   : Get the payslip id based on the paygroup of payee
!**************************************************************************
begin-procedure Get_Payslip_Id

Begin-SELECT on-error=SQL-Error
ID.GPAU_PAYSLIP_ID

        let $Payslip_Id = &ID.GPAU_PAYSLIP_ID

FROM PS_GP_PG_DTL_SGPAU ID
WHERE ID.GP_PAYGROUP = $GP_Paygroup
AND ID.EFFDT = (SELECT MAX(ID1.EFFDT)
                FROM PS_GP_PG_DTL_SGPAU ID1
                WHERE ID.GP_PAYGROUP = ID1.GP_PAYGROUP)

end-select
end-procedure
!
!**************************************************************************
! Procedure: Delete-RunControl
! Description: Delete run control when report comes to successful end.
!**************************************************************************
begin-procedure Delete-RunControl
#ifdef debugy
        show 'Inside procedure Delete-RunControl'
#end-if
begin-SQL
DELETE FROM PS_GPAU_RNCTL_PSLP
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPAU_PSLP_DP_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPAU_PSLP_LC_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPAU_PSLP_PE_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPAU_PSLP_PG_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPAU_RNCTL_PYE
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
end-procedure
!
!**************************************************************************
! Procedure: Process-Stream-List
!            Process Employees selected by Stream
!**************************************************************************
Begin-Procedure Process-Stream-List
Begin-SELECT
STRGBL.EMPLID  &strEmplid
STRGBL.EMPL_RCD   &strEmplRcd

   Let $EmplRcd = edit(&StrEmplRcd,'999')

   If rtrim(&strEmplid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''

#debugX  Show 'Processing Emplid : ' $Emplid

     Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &strEmplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd
     Do Process-Payee
  End-If
  FROM PS_GP_STRM STREAM, PS_GPAU_SS_PSLP_VW STRGBL
    WHERE STREAM.STRM_NUM = #streamNum
      AND STRGBL.EMPLID >= STREAM.EMPLID_FROM
      AND STRGBL.EMPLID <= STREAM.EMPLID_TO
      AND STRGBL.CAL_RUN_ID = $Cal_Run_Id
End-SELECT
End-Procedure

!**************************************************************************
! Procedure: Process-Empl-List
!            Process Employees selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Empl-List
Begin-SELECT
APY1.EMPLID    &Emplid
APY1.EMPL_RCD  &EmplRcd
   If rtrim(&Emplid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $EmplRcd = edit(&EmplRcd,'999')
     Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &Emplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd
     Show 'Processing Emplid : ' &Emplid

     Do Process-Payee
  End-If
  FROM PS_GPAU_RNCTL_PYE APY1
    WHERE APY1.OPRID          = $Prcs_OprID
    AND   APY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Dept-List
!            Process Departments selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Dept-List
Begin-SELECT
BPY1.SETID   &Setid
BPY1.DEPTID  &Deptid
   If rtrim(&Deptid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND JOB.SETID_DEPT = ' || '''' || &Setid || '''' || ' AND JOB.DEPTID = ' || '''' || &Deptid || ''''
     Show 'Processing DEPTID : ' &Deptid
     Do Process-Payee
   End-If
    FROM PS_GPAU_PSLP_DP_RC BPY1

    WHERE BPY1.OPRID          = $Prcs_OprID
    AND   BPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Locn-List
!            Process Locations selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Locn-List
Begin-SELECT
CPY1.SETID    &SetId1
CPY1.LOCATION &Location
   If rtrim(&Location, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND JOB.SETID_LOCATION = ' || '''' || &Setid1 || '''' || ' AND JOB.LOCATION = ' || '''' || &Location || ''''
     Show 'Processing Location : ' &Location
     Do Process-Payee
   End-If
    FROM PS_GPAU_PSLP_LC_RC CPY1
    WHERE CPY1.OPRID          = $Prcs_OprID
    AND   CPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Pay Entity List
!            Process Pay Entity selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Pay-Entity-List

Begin-SELECT

DPY1.PAY_ENTITY &PayEntity

   Let $WhereClause = ''

   If rtrim(&PayEntity, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ' AND PER.PAY_ENTITY = ' || '''' || &PayEntity || ''''
     Show ' $WhereClause : ' $WhereClause
     Do Process-Payee
   End-If
    FROM PS_GPAU_PSLP_PE_RC DPY1
    WHERE DPY1.OPRID          = $Prcs_OprID
    AND   DPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Paygroup List
!            Process Paygroup selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-PayGroup-List
Begin-SELECT
EPY1.GP_PAYGROUP &PayGrp

   If rtrim(&PayGrp, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND PER.GP_PAYGROUP = ' || '''' || &PayGrp || ''''
     Show 'Processing Paygroup : ' &PayGrp
     Do Process-Payee
    End-If
    FROM PS_GPAU_PSLP_PG_RC EPY1
    WHERE EPY1.OPRID          = $Prcs_OprID
    AND   EPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-Country-Name
!            Get-Country Name
!**************************************************************************
Begin-procedure Get-Country-Name
  Let $CountryName = ''
Begin-SELECT
CTY.DESCR
  Let $CountryName = &CTY.DESCR
  FROM PS_COUNTRY_TBL CTY
 WHERE CTY.COUNTRY = $Country
End-SELECT
End-procedure
!
!**************************************************************************
! Procedure: Get-GP-Paygroup
!            Get the GP Paygroup if none of the lists has been chosen.
!**************************************************************************
Begin-procedure Get-GP-Paygroup

 Create-Array Name=Gp_Paygroups Size=10
 Field=Gp_Paygroup:Char
 Let #I = 1

Begin-SELECT
DTL.GP_PAYGROUP
DTL.CAL_ID

  Let $GP_Pygrp = ''
  Let $Payroll_CalID = ''

  Let $Payroll_CalID = &DTL.CAL_ID
  Let $GP_Pygrp   = &DTL.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_DTL DTL
WHERE DTL.CAL_RUN_ID = $Cal_Run_ID
AND DTL.CALC_TYPE = 'P'
END-SELECT
BEGIN-SELECT
DTLA.GP_PAYGROUP
' '
  Let $GP_Pygrp   = &DTLA.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_OFF DTLA
WHERE DTLA.CAL_RUN_ID = $Cal_Run_ID
End-SELECT

End-procedure
!
!
!**************************************************************************
! Procedure: Get-Company-Descr
!            Get the Company description.
!**************************************************************************
Begin-procedure Get-Company-Descr

Begin-SELECT
CMPY.DESCR

  Let $Company_Descr = ''
  Let $Company_Descr = &CMPY.DESCR

FROM PS_COMPANY_TBL CMPY
WHERE CMPY.COMPANY = $Company
AND CMPY.EFFDT = (SELECT MAX (CMPY1.EFFDT)
                         FROM PS_COMPANY_TBL CMPY1
                         WHERE CMPY.COMPANY  = CMPY1.COMPANY)

End-SELECT
End-procedure
!
!**************************************************************************
! Procedure: Get-PayEntity-ABN
!            Get Pay Entity's ABN.
!**************************************************************************
Begin-procedure Get-PayEntity-ABN

Begin-SELECT
ABN.GPAU_ABN

  Let $ABN = ''
  Let $ABN = &ABN.GPAU_ABN

FROM PS_GP_PYENT_SGPAU ABN
WHERE ABN.PAY_ENTITY = $Pay_Ent
AND ABN.EFFDT = (SELECT MAX (ABN1.EFFDT)
                         FROM PS_GP_PYENT_SGPAU ABN1
                         WHERE ABN.PAY_ENTITY = ABN1.PAY_ENTITY)

End-SELECT
End-procedure
!
!**************************************************************************
! Procedure: Get-JOB-JOBTitle-Details
!            Get the JOB Code title
!**************************************************************************
Begin-procedure Get-JOB-JOBTitle-Details
  Let $JobTitle = ''
Begin-SELECT
JDD3.DESCR

     Let $JobTitle = &JDD3.DESCR

  FROM PS_JOBCODE_TBL JDD3
    WHERE JDD3.SETID = $SetIDJobCode
      AND JDD3.JOBCODE = $JobCode
      AND JDD3.EFFDT = (SELECT MAX(JDD31.EFFDT) FROM PS_JOBCODE_TBL JDD31
                             WHERE JDD3.SETID = JDD31.SETID
                               AND JDD3.JOBCODE = JDD31.JOBCODE
                               AND JDD31.EFFDT <= $PYMT_DT)
End-SELECT
End-Procedure
!
!
!**************************************************************************
! Procedure     : Get_Address
! Description   : Get the payee's address details
!**************************************************************************
begin-procedure Get_Address
  Let $Adr2Found = 'N'
Begin-SELECT on-error=SQL-Error
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY
        Let $Adr2Found = 'Y'

        Let $Name     = $EmployeeName
        let $address1 = &ADR.ADDRESS1
        let $address2 = &ADR.ADDRESS2
        let $address3 = &ADR.ADDRESS3
        let $address4 = &ADR.ADDRESS4
        let $City     = rtrim(&ADR.CITY, ' ')
        let $State    = &ADR.STATE
        let $Country  = &ADR.COUNTRY
        let $Postal   = &ADR.POSTAL

!514097000 do Get-Country-Name
        do adformat
        Let $ADDLINE6 = ''
        do Compress-Address

   FROM PS_ADDRESSES ADR
    WHERE ADR.EMPLID = $Emplid
      AND ADR.ADDRESS_TYPE = $Addr_Type
      AND ADR.EFFDT = (SELECT MAX(ADR1.EFFDT) FROM PS_ADDRESSES ADR1
                          WHERE ADR1.EMPLID = ADR.EMPLID
                            AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE
                            AND ADR1.EFFDT <= $Pay_Pd_End_Dt)
end-select
end-procedure
!
!**************************************************************************
! Procedure     : Check_Override_Add
! Description   : Check the existance of an override
!**************************************************************************
begin-procedure Check_Override_Add
Begin-SELECT on-error=SQL-Error

PAY.GPAU_DEL_OPT

        let $Del_Opt = &PAY.GPAU_DEL_OPT

FROM PS_GPAU_PAYEE_TBL PAY
WHERE PAY.EMPLID = $Emplid
AND PAY.EMPL_RCD = #Empl_Rcd
AND PAY.EFFDT = (SELECT MAX(PAY1.EFFDT)
                FROM PS_GPAU_PAYEE_TBL PAY1
                WHERE PAY1.EMPLID = PAY.EMPLID
                AND PAY1.EMPL_RCD = PAY.EMPL_RCD)
end-select
end-procedure
!
!**************************************************************************
! Procedure: Print_Disb_headings
! Description: Print the disbusment data headings
!**************************************************************************
begin-procedure Print_Disb_headings
        print 'Disbursment Details' (+3, {ColG}) Center Bold Underline

        print 'Bank' (+1, {ColA}) Bold
        print 'B.S.B' (0, {ColD}) Bold
        print 'Account #'  (0, {ColG}) Bold

        Do Find-Start-Pos ('Amount', {colO},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        let $New_Page_Dis = 'Y'

end-procedure
!
!
!**************************************************************************
! Procedure: Print_ED_Headings
! Description: Prints the section headings
!**************************************************************************
begin-procedure Print_ED_Headings
        print $Sect_Hdg (+3,) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold

        Do Find-Start-Pos ('Base', {colED3},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Percent', {colED5},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Percent' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Rate', {colED6},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Rate' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Units', {colED7},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Base', {colED11},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base ' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Unit', {colED12},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Unit' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Units', {colED13},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED14},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        let $New_Page_ED = 'Y'

end-procedure
!
!**************************************************************************
! Procedure: Print_Abs_headings
! Description: Print the absence data headings
!**************************************************************************
begin-procedure Print_Abs_headings

        print 'Leave Balances' (+3, {ColG}) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold
        print 'Entitlement' (0, {ColD}) Bold
        print 'Adjustment'  (0, {ColG}) Bold
        print 'Taken'       (0, {ColM}) Bold
        print 'End Balance' (0, {ColN}) Bold

        let $New_Page_Abs = 'Y'
end-procedure
!
!**************************************************************************
! Procedure: Get_Messages
! Description: Get and print the messages for the payee.
!**************************************************************************
begin-procedure Get_Messages

        Let $First_Msg = 'Y'
        Let #Msg_Nbr = 0

        ! ******************** Mobile Payslip Changes ********************
        DO get-country($cal_run_id,$payslp_Country)     
        
        LET MPSLP_MSG.EMPLID(0)            = $Emplid
        LET MPSLP_MSG.CAL_RUN_ID(0)        = $Cal_Run_ID
        LET MPSLP_MSG.EMPL_RCD(0)          = #Empl_Rcd
        LET MPSLP_MSG.GP_PAYGROUP(0)       = $GP_Paygroup
        LET MPSLP_MSG.CAL_ID(0)            = $Cal_ID 
        LET MPSLP_MSG.ORIG_CAL_RUN_ID(0)   = &ORIG_CALID 
        LET MPSLP_MSG.RSLT_SEG_NUM(0)      = 1 ! we are not using segmentation 
        LET MPSLP_MSG.GP_CNTRY_PSLP_MSG(0) = $payslp_Country
 
        ! Insert Core Payslip Messages.
        do insert_mpslp_msg_row('Y')
        ! ******************** Mobile Payslip Changes ********************


        ! ******************** Mobile Payslip Changes - Optional ********************
        ! To print the core payslip messages in the payslip - PDF.
        !let #Count = 0
        !while #Count <= 20

        !    If $First_Msg = 'Y'
        !       print 'Messages' (+2, {ColB}) Bold Center
        !       let $First_Msg = 'N'
        !    end-if
            
        !    GET #MV1 $MV2 #MV3 $MV4 FROM PSLP_MSG_TEXT(#Count)

        !   if #MV1 = 0
        !       break
        !   end-if
            
        !   print #MV1 (+1, {ColC}) EDIT '9999'
        !   print $MV4 (0, 25) Wrap {colK} 3
            
        !   let #Count = #Count + 1
        !end-while
        ! ******************** Mobile Payslip Changes - Optional ********************
        
begin-SELECT on-error=SQL-Error
B.GPAU_MSG_NBR
A.GPAU_MESSAGE

        If $First_Msg = 'Y'
            print 'Messages' (+2, {ColB}) Bold Center
           let $First_Msg = 'N'
        end-if

        let #Msg_Nbr = &B.GPAU_MSG_NBR
        let $Message = &A.GPAU_MESSAGE
        
        !let #Count = #Count + 1

        if #Msg_nbr <> 0
           print #Msg_Nbr (+1, {ColC}) EDIT '9999'
           print $Message (0, 25) Wrap {colK} 3
           
           !**********Populate Mobile Payslip CE Messages into staging tables**************
           !If ( $custEnabled = 'Y' )
              LET MPSLP_MSG.GP_PSLP_MSG_NBR(0)      = #Msg_Nbr
              LET MPSLP_MSG.GP_CNTRY_PSLP_MSG(0)    = $payslp_Country
              LET MPSLP_MSG.GP_PSLP_MSG_PRIORITY(0) = 999
              LET MPSLP_MSG.GP_PSLP_MSG_TEXT(0)     = $Message

              do insert_mpslp_msg_row('N')
           !end-if
           !**********Populate Mobile Payslip CE Messages into staging tables**************
        end-if

FROM PS_GPAU_PSLP_MSG A
, PS_GPAU_PSLP_RSLT B
WHERE A.CAL_RUN_ID = B.CAL_RUN_ID
    AND A.GPAU_MSG_NBR = B.GPAU_MSG_NBR
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID
    AND B.RSLT_SEG_NUM  = #Rslt_Seg_num   ! Added as part of Mobile Payslip Messages.
end-select
end-procedure
!
!**************************************************************************
! Procedure: Get_Disburs_Banked
! Description: Get and print the banking details for the payee.
!**************************************************************************
begin-procedure Get_Disburs_Banked

        let $First_Disb = 'Y'

begin-SELECT on-error=SQL-Error
B.GP_PMT_AMT
D.BRANCH_EC_CD
D.ACCOUNT_EC_ID
E.BANK_NM
    If #Current-line <=  80
      If $First_Disb = 'Y'
        do Print_Disb_headings
        let $First_Disb = 'N'
      end-if
    End-if

    If #Current-line >  80
        NEW-PAGE
        do Print_Heading
        do Print_Disb_headings
        let $First_Disb = 'N'
    End-If

        let $Bank_Name = &E.BANK_NM
        print $Bank_Name (+1, {ColA})
        let $BSB_Char = edit(&D.BRANCH_EC_CD,'XXX-XXX')
        print $BSB_char (0, {ColD})

        let #Acct_Nbr = &D.ACCOUNT_EC_ID
        print #Acct_Nbr (0, {ColG}) edit '999999999'

        let #Paymnt_Amt = &B.GP_PMT_AMT
        print #Paymnt_Amt (0, {ColN}) edit '999999999.99'



FROM PS_GP_CALENDAR A
, PS_GP_PAYMENT B
, PS_GP_NET_DIST_DTL C
, PS_PYE_BANKACCT D
, PS_BANK_EC_TBL E
, PS_GP_PYE_PRC_STAT F
WHERE   B.CAL_ID      = A.CAL_ID
    AND B.GP_PAYGROUP = A.GP_PAYGROUP
    AND A. RUN_TYPE   = C.RUN_TYPE
    AND B.EMPLID      = C.EMPLID
    AND C.EMPLID      = D.EMPLID
    AND B.EMPL_RCD    = C.EMPL_RCD
    AND B.INSTANCE    = C.INSTANCE
    AND C.ACCOUNT_ID  = D.ACCOUNT_ID
    AND D.BANK_CD     = E.BANK_CD
    AND D.COUNTRY_CD  = E.COUNTRY_CD
    AND B.PMT_TYPE    = '01'
    AND B.PAYMENT_MTHD = 'T'
    AND F.EMPLID = B.EMPLID
    AND F.CAL_RUN_ID = B.CAL_RUN_ID
    AND F.EMPL_RCD = B.EMPL_RCD
    AND F.GP_PAYGROUP = B.GP_PAYGROUP
    AND F.CAL_ID = B.CAL_ID
    AND F.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
    AND C.EFFDT =(SELECT MAX(C1.EFFDT) FROM PS_GP_NET_DIST_DTL C1 WHERE C1.EMPLID = C.EMPLID
                      AND C1.EMPL_RCD = C.EMPL_RCD
                      AND C1.RUN_TYPE = C.RUN_TYPE
                      AND C1.INSTANCE = C.INSTANCE
                      AND  C1.EFFDT <= F.PRD_END_DT)
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID

end-select

end-procedure
!**************************************************************************
! Procedure: Get_Disburs_Nonbanked
! Description: Get and print the non banking disburment details for the payee.
!**************************************************************************
begin-procedure Get_Disburs_Nonbanked
begin-SELECT on-error=SQL-Error
PMNT.PAYMENT_MTHD    &PMNT_Mthd
SUM(PMNT.GP_PMT_AMT) &NetPayAmt

    If #Current-line <=  80
     If $First_Disb = 'Y'
        do Print_Disb_headings
        let $First_Disb = 'N'
     End-if
    End-if

    If #Current-line >  80
        NEW-PAGE
        do Print_Heading
        do Print_Disb_headings
        let $First_Disb = 'N'
    End-If

    let #Paymnt_Amt = &NetPayAmt
    if  #Paymnt_Amt <> 0
       Let $FieldName  = 'PAYMENT_MTHD'
       Let $FieldValue = &PMNT_Mthd

       Let $curr_language_cd = 'ENG'

       Do Read-Translate-Table
       Print $XlatLongName (+1,{ColA})
       print #Paymnt_Amt (0, {ColN}) edit '999999999.99'
    end-if

FROM PS_GP_PAYMENT PMNT
    WHERE PMNT.EMPLID      = $Emplid
      AND PMNT.EMPL_RCD    = #Empl_Rcd
      AND PMNT.CAL_RUN_ID  = $Cal_Run_ID
      AND PMNT.CAL_ID      = $Cal_ID
      AND PMNT.GP_PAYGROUP = $GP_Paygroup
      AND PMNT.PAYMENT_MTHD <> 'T'
      AND PMNT.PMT_TYPE    = '01'
GROUP BY PMNT.PAYMENT_MTHD
end-select

        let $New_Page_Dis = 'N'

end-procedure
!
!**************************************************************************
! Procedure: Get_Disburs_Nonbanked
! Description: Off Cycle Payments not reported thru normal calendar.
!**************************************************************************
Begin-Procedure Get-OffCyclePayments
BEGIN-SELECT
BOF.GP_PMT_AMT
DOF.BRANCH_EC_CD
DOF.ACCOUNT_EC_ID
EOF.BANK_NM
    If #Current-line <=  80
       If $First_Disb = 'Y'
        do Print_Disb_headings
        let $First_Disb = 'N'
       End-if
    End-if

    If #Current-line >  80
        NEW-PAGE
        do Print_Heading
        do Print_Disb_headings
        let $First_Disb = 'N'
    End-If

        let $Bank_Name = &EOF.BANK_NM
        print $Bank_Name (+1, {ColA})
        let $BSB_Char = edit(&D.BRANCH_EC_CD,'XXX-XXX')
        print $BSB_char (0, {ColD})

        let #Acct_Nbr = &DOF.ACCOUNT_EC_ID
        print #Acct_Nbr (0, {ColG}) edit '999999999'

        let #Paymnt_Amt = &BOF.GP_PMT_AMT
        print #Paymnt_Amt (0, {ColN}) edit '999999999.99'

FROM PS_GP_PYE_CAL AOF
, PS_GP_PAYMENT BOF
, PS_GP_NET_DIST_DTL COF
, PS_PYE_BANKACCT DOF
, PS_BANK_EC_TBL EOF
, PS_GP_PYE_PRC_STAT FOF
WHERE   BOF.EMPLID        = $Emplid
    AND BOF.EMPL_RCD      = #Empl_Rcd
    AND BOF.CAL_RUN_ID    = $Cal_Run_ID
    AND BOF.GP_PAYGROUP   = $GP_Paygroup
    AND BOF.CAL_ID        = $Cal_ID
    AND BOF.CAL_ID      = AOF.CAL_ID
    AND BOF.GP_PAYGROUP = AOF.GP_PAYGROUP
    AND AOF.EMPLID      = BOF.EMPLID
    AND AOF.EMPL_RCD    = BOF.EMPL_RCD
    AND AOF.RUN_TYPE    = COF.RUN_TYPE
    AND BOF.EMPLID      = COF.EMPLID
    AND COF.EMPLID      = DOF.EMPLID
    AND BOF.EMPL_RCD    = COF.EMPL_RCD
    AND BOF.INSTANCE    = COF.INSTANCE
    AND COF.ACCOUNT_ID  = DOF.ACCOUNT_ID
    AND DOF.BANK_CD     = EOF.BANK_CD
    AND DOF.COUNTRY_CD  = EOF.COUNTRY_CD
    AND BOF.PMT_TYPE    = '01'
    AND FOF.EMPLID      = BOF.EMPLID
    AND FOF.CAL_RUN_ID  = BOF.CAL_RUN_ID
    AND FOF.EMPL_RCD    = BOF.EMPL_RCD
    AND FOF.GP_PAYGROUP = BOF.GP_PAYGROUP
    AND FOF.CAL_ID      = BOF.CAL_ID
    AND FOF.ORIG_CAL_RUN_ID = BOF.ORIG_CAL_RUN_ID
    AND COF.EFFDT =(SELECT MAX(COF1.EFFDT) FROM PS_GP_NET_DIST_DTL COF1
                    WHERE COF1.EMPLID   = COF.EMPLID
                      AND COF1.EMPL_RCD = COF.EMPL_RCD
                      AND COF1.RUN_TYPE = COF.RUN_TYPE
                      AND COF1.INSTANCE = COF.INSTANCE
                      AND COF1.EFFDT <= FOF.PRD_END_DT)
    AND AOF.PAYMENT_MTHD IN ('C','O')
    AND BOF.EMPL_RCD      = 0
    AND NOT EXISTS (SELECT 'X' FROM PS_GP_CALENDAR XNOTOF
                         WHERE XNOTOF.GP_PAYGROUP = AOF.GP_PAYGROUP
                           AND XNOTOF.CAL_ID = AOF.CAL_ID)
END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure   : Get-Acum-Array
! Description : Read some data into RSLT_ACUM_ARRAY
!**************************************************************************
Begin-Procedure Get-Acum-Array

   let #_Acum-Array-Total = 0
   Clear-Array Name=RSLT_ACUM_ARRAY

Begin-SELECT
ACUM1.PIN_NUM
ACUM1.CALC_RSLT_VAL
ACUM1.RSLT_SEG_NUM

  let #Check = 0

  PUT &ACUM1.PIN_NUM
      &ACUM1.CALC_RSLT_VAL
      &ACUM1.RSLT_SEG_NUM
      #Check
  INTO RSLT_ACUM_ARRAY(#_Acum-Array-Total)
       PIN_NUM
       CALC_RSLT_VAL
       RSLT_SEG_NUM
       CHECK

  add 1 to #_Acum-Array-Total

  FROM PS_GP_RSLT_ACUM ACUM1
  WHERE
     ACUM1.EMPLID             = $Emplid
     AND ACUM1.EMPL_RCD       = #Empl_Rcd
     AND ACUM1.CAL_RUN_ID     = $Cal_Run_ID
     AND ACUM1.CAL_ID         = $Cal_ID
     AND ACUM1.GP_PAYGROUP    = $GP_Paygroup
     !AND ACUM1.RSLT_SEG_NUM   = #Acum_Rslt_Seg_Num
End-SELECT

Begin-SELECT
GPE.GPAU_YTD_AC_AMT
GPE.GPAU_YTD_AC_UNITS
  
  Let #AcumAmtPinPslpEd = &GPE.GPAU_YTD_AC_AMT
  Let #AcumUnitPinPslpEd = &GPE.GPAU_YTD_AC_UNITS
  let #i = 0
  let #AcumRsltFoundPslpEd = 0
  WHILE #i < #_Acum-Array-Total

    GET #PIN_NUM FROM RSLT_ACUM_ARRAY(#i) PIN_NUM

    if #PIN_NUM = #AcumUnitPinPslpEd or #PIN_NUM = #AcumAmtPinPslpEd
        LET #check = 1
        PUT #check INTO RSLT_ACUM_ARRAY(#i) CHECK
    end-if

    add 1 to #i

  END-WHILE
FROM PS_GPAU_PSLP_ED GPE
WHERE GPE.GPAU_PAYSLIP_ID = $Payslip_ID
AND GPE.EFFDT = $SECT_Effdt
AND GPE.SEQ_NUM = #Sect_Seq_Num
End-SELECT

End-Procedure
!
!**************************************************************************
! Procedure   : Get-Section-Elements
! Description : Get details of Earnings / Deductions for each section line
!               definition
!**************************************************************************
begin-procedure Get-Section-Elements
    Let #LastPinNum = 0
begin-SELECT DISTINCT
GSE.SEQ_NUM5
PIN.PIN_NUM
GSE.DESCR
PIN.DESCR
PIN.PIN_NM
GSE.GPAU_DESC_TYPE
GSE.GPAU_YTD_AC_AMT
GSE.GPAU_YTD_AC_UNITS
GSE.GPAU_BSE_COMP_YN
GSE.GPAU_PCT_COMP_YN
GSE.GPAU_RTE_COMP_YN
GSE.GPAU_UNT_COMP_YN
GSE.GPAU_YTD_AC_AMT_YN
GSE.GPAU_YTD_AC_UNT_YN
GSE.GPAU_PSLP_SUPR_DTL
ERN.RECIPIENT_TAG
PIN.PIN_TYPE

        Let #SeqNum5         = &GSE.SEQ_NUM5
        Let #ED_PinNum       = &PIN.PIN_NUM
        let $ED_Descr        = &GSE.DESCR
        let $Pin_Descr       = &PIN.DESCR
        let $Descr_Type      = &GSE.GPAU_DESC_TYPE
        let $Pin_Nm          = &PIN.PIN_NM
        let $Print_Base_YN   = &GSE.GPAU_BSE_COMP_YN
        let $Print_Pct_YN    = &GSE.GPAU_PCT_COMP_YN
        let $Print_Rte_YN    = &GSE.GPAU_RTE_COMP_YN
        let $Print_Unt_YN    = &GSE.GPAU_UNT_COMP_YN

        Let #AcumAmtPin      = &GSE.GPAU_YTD_AC_AMT
        Let #AcumUnitPin     = &GSE.GPAU_YTD_AC_UNITS
        Let $showMemberID    = &GSE.GPAU_PSLP_SUPR_DTL
        Let #ED_RecipientTag = &ERN.RECIPIENT_TAG
        Let $MembershipPrinte= 'N'
        Let $PinType = &PIN.PIN_TYPE
        
        Let $PinSec = '00'
        evaluate $PinType 
            when = 'ER'
                Let $PinSec = '10'
            when = 'DD'
                Let $PinSec = '20'
            when = 'AC'
                Let $PinSec = '40'
        end-evaluate
           
           
        if #ED_PinNum <> #LastPinNum
           Let #Acum_Rslt_Seg_Num = #Rslt_Seg_Num

           Let $Descr_Temp = $PIN_Descr

           evaluate $Descr_Type
               when = '10'
                     let $Descr_Temp = $PIN_Descr
               when = '20'
                     let $Descr_Temp = $ED_Descr
               when = '30'
                     let $Descr_Temp = $Pin_Nm
               when = '40'
                     do getDedMemberID
                     !if rtrim($RecipientName,' ') = ''
                      !  let $Descr_Temp = $ED_Descr
                     !else
                        let $Descr_Temp = $RecipientName
                     !End-if

           end-evaluate

           let $Descr = substr($Descr_Temp,1 , 16)
           Do Get-Acum-Results
           Do Get-ErnDed-Results

        end-if

        If #AcumRsltFound
           If NOT #ErnDedRowFound
              do Print-Ern-Ded-Values
           end-if
        End-IF

        Let #LastPinNum  = #ED_PinNum

FROM PS_GPAU_PSLP_ED GSE, PS_GP_PIN PIN,
     PS_GP_RSLT_ERN_DED ERN, PS_GP_PYE_PRC_STAT PRC
     WHERE GSE.GPAU_PAYSLIP_ID = $Payslip_ID
       AND GSE.EFFDT           = $SECT_Effdt
       AND GSE.SEQ_NUM         = #Sect_Seq_Num
       AND GSE.PIN_NUM         = PIN.PIN_NUM
       AND PRC.CAL_RUN_ID     = $Cal_Run_ID
       AND PRC.CAL_ID         = $Cal_ID
       AND PRC.GP_PAYGROUP    = $GP_Paygroup
       AND ERN.EMPLID        = PRC.EMPLID
       AND ERN.EMPL_RCD      = PRC.EMPL_RCD
       AND ERN.CAL_RUN_ID    = PRC.CAL_RUN_ID
       AND ERN.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
       AND ERN.GP_PAYGROUP   = PRC.GP_PAYGROUP
       AND ERN.CAL_ID        = PRC.CAL_ID
       AND GSE.PIN_NUM = ERN.PIN_NUM
       AND PRC.EMPLID = $Emplid
       AND PRC.EMPL_RCD = #Empl_Rcd
ORDER BY GSE.SEQ_NUM5
End-SELECT
End-Procedure
!
!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
begin-procedure Print_Empl_Details

  do Format-DateTime($Pay_Pd_From_Dt, $Pay_Dt_From_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pay_Pd_To_Dt, $Pay_Dt_To_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pymt_Dt, $Pymt_Dt_Conv, {DEFDATE}, '', '')

  let $Header1 = 'Pay Period'

  let $Header2 = 'Pay Period To    ' || $Pay_Dt_To_Conv

  Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv

  Do Pad-String ($Header1,$PayDates,$Header1)

  let $Header3 = 'Payment Date'
  Do Pad-String ($Header3,$Pymt_Dt_Conv,$Header3)
  do Calc-PPL-dates
  let $Header3a = 'PPL Start Date   : ' || $PPLs_start_dt
  let $Header3b = 'PPL End Date     : ' || $PPL_end_dt  

  let $Header4a = 'Employee'

  Do Pad-String ($Header4A,$Emplid,$Header4A)

  let $Header5 = 'Name:            ' || $Name

  let $Header5a = 'Pay Entity'
  Do Pad-String ($Header5A,$PayEntityDescr,$Header5A)

  if $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
        Let $SortDeptid = rtrim($DeptID,' ')
        Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
  else
        Let $Sort_Dept = $Dept_Name
  end-if

  Do Pad-String ($Header6A,$Sort_Dept,$Header6A)


  if $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
        Let $SortLocation = rtrim($Location,' ')
        Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
  else
        Let $Sort_Location = $lctnDesc
  end-if

  let $Header6a = 'Department'

  Do Pad-String ($Header6A,$dept_name,$Header6A)

  let $Header6b = 'Location'

  Do Pad-String ($Header6b,$lctnDesc,$Header6b)

  Let $Comprate = to_char(#comprate)
  Let $Comprate = edit($Comprate, '999,999.99')
  Let $Compensation = ltrim($comprate,' ')

  Let $Compensation = $Compensation || ' (' || rtrim($freq_descr,' ') || ')'

  let $Header7a = 'Pay Rate'
  Do Pad-String ($Header7a,$Compensation,$Header7a)

  let $Header8a = 'Job Description'
  Do Pad-String ($Header8a,$Jobtitle,$Header8a)

  let $Header9 = 'Company'
  let $Company_Descr = rtrim($Company_Descr, ' ')
  Do Pad-String ($Header9,$Company_Descr,$Header9)

  let $Header10 = 'ABN'
  Do Pad-String ($Header10,$ABN,$Header10)
end-procedure
!
!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
begin-procedure Print_Heading

        print 'Payment Details' (+2,) Center Bold Underline
        print '|' (+2,{ColA}) Bold
        graphic (0,3,25) horz-line
        graphic (0,44,27) horz-line
        print 'Current Values' (0,28) bold
        print '|Payback|'(0,71) Bold
        graphic (0,81,8) horz-line
        print 'Adjustments' (0,89) bold
        graphic (0,101,8) horz-line
        print '|' (0,109)
        graphic (0,110,4) horz-line
        print 'YTD Values' (0,114) bold
        graphic (0,125,4) horz-line
        print '|' (0,129)

end-procedure
!
!**************************************************************************
! Procedure: Get_ED_Sections
! Description:  Get the sections applicable based on the payslip id
!**************************************************************************
begin-procedure Get_ED_Sections
  let $sql-statement = ' Get_Section'
begin-SELECT on-error=SQL-Error
SECT.DESCR
SECT.SEQ_NUM
SECT.EFFDT

     Let $Sect_Hdg       = rtrim(&SECT.DESCR, ' ')
     Let #Sect_Seq_Num   = &SECT.SEQ_NUM
     Let $SECT_Effdt     = &SECT.EFFDT
     show $Sect_Hdg
     Do Print_ED_Headings
     Do Get-Acum-Array
     Do Get-Section-Elements
     Do Print-YTD-Values

     if #total_curr_amt <> 0
        Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Total' (+2, {ColA}) Bold
        print #total_curr_amt (0, #ReturnCol)   edit '9999999.99'
     else
        if #total_pybck_amt <> 0 or #total_adj_amt <> 0 or #Acum_Rslt_Amt_TTL <> 0
           print 'Total' (+2, {ColA}) Bold
        End-If
     End-If

     if #total_pybck_amt <> 0
        Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 4
        print #total_pybck_amt (0, #ReturnCol) edit '99999999.99'
     end-if

     if #total_adj_amt <> 0
        Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 4
        print #total_adj_amt   (0, #ReturnCol)  edit '99999999.99'
     end-if

     if #Acum_Rslt_Amt_TTL <> 0
         Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 4
         print #Acum_Rslt_Amt_TTL (0, #ReturnCol)  edit '99999999.99'
     end-if

     let $New_Page_ED       = 'N'
     let #total_curr_amt    = 0
     let #total_adj_amt     = 0
     let #total_pybck_amt   = 0
     let #Acum_Rslt_Amt_TTL = 0

FROM PS_GPAU_PSLP_SECT SECT
WHERE SECT.GPAU_PAYSLIP_ID = $Payslip_ID
      AND SECT.EFFDT = (SELECT MAX(SECT1.EFFDT) FROM PS_GPAU_PSLP_SECT SECT1
                                WHERE SECT1.GPAU_PAYSLIP_ID = SECT.GPAU_PAYSLIP_ID
                                  AND SECT1.EFFDT <= $Pymt_Dt)
ORDER BY SECT.SEQ_NUM
end-select
end-procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
begin-procedure Process-Payee
   Let $First_Empl = 'Y'

begin-SELECT on-error=SQL-Error
PER.EMPLID
PER.EMPL_RCD
PERS.NAME
JOB.SETID_DEPT
JOB.DEPTID
JOB.SETID_LOCATION
JOB.LOCATION
JOB.COMPANY
PER.GP_PAYGROUP
JOB.COMP_FREQUENCY
JOB.COMPRATE
PER.PAY_ENTITY
PER.PYMT_DT
PER.SEG_BGN_DT
PER.SEG_END_DT
PER.CAL_RUN_ID
PER.CAL_ID
PER.RSLT_SEG_NUM
PER.PRD_BGN_DT
PER.PRD_END_DT
JOB.SETID_JOBCODE
JOB.JOBCODE

        let $Emplid         = &PER.EMPLID
        let #Empl_Rcd       = &PER.EMPL_RCD
        let $EmployeeName   = &PERS.NAME

        let $Company        = &JOB.COMPANY
        let $Comp_Freq      = &JOB.COMP_FREQUENCY
        let #Comprate       = &JOB.COMPRATE
        let $GP_Paygroup    = &PER.GP_PAYGROUP

        let $Pay_Ent        = &PER.PAY_ENTITY
        let $Pymt_Dt        = &PER.PYMT_DT
        !let $Pay_Pd_From_Dt = &PER.SEG_BGN_DT
        let $Pay_Pd_From_Dt = &PER.PRD_BGN_DT
        let $Pay_Pd_To_Dt   = &PER.SEG_END_DT
        let $Pay_Pd_End_Dt  = &PER.PRD_END_DT
        let $Cal_ID         = &PER.CAL_ID
        let #Rslt_Seg_num =   &PER.RSLT_SEG_NUM

        Let $SetIDDept      = &JOB.SETID_DEPT
        let $Deptid         = &JOB.DEPTID
        Let $SetIDLocn      = &JOB.SETID_LOCATION
        let $Location       = &JOB.LOCATION

        Let $SetIDJobCode   = &JOB.SETID_JOBCODE
        let $JobCode        = &JOB.JOBCODE

!ePay Implementation Changes begins here
        Let $SegBgnDt      = &PER.SEG_BGN_DT
!ePay Implementation Changes ends here

!Check that the payee is not in an excluded location or dept

        let $locn_excl             = 'N'
        let $dept_excl             = 'N'

        do Get-JOB-JOBTitle-Details
        do Get_Payslip_ID

        do Check_Excl_Dept
        do Check_Excl_Loctn

       If $locn_excl = 'N' and $dept_excl = 'N'

          do Get_Payslip_Labels

          If $Del_opt = '50'
             let $addr_Type = 'HOME'
             let $Name = $EmployeeName
             do Get_Address
             If $Adr2Found = 'N'
                 Let $Del_opt = '30'
             end-if
             Let $ADDLINE6 = ''
          End-if

          do Get-PayEntity
          do Get-PayEntity-ABN
          do Get-Company-Descr
          do Get_dept
          do Get_location
          do Get_Frequency
          do Print_Empl_Details
          do Print_Summ_Lbls
          do Get_Payment_Summ
          do Print_Heading
          do Get_ED_Sections
          do Get_Leave
          do Get_Disburs_Banked
          do Get_Disburs_NonBanked
          do Get-OffCyclePayments
          do Get_Messages
          let $End_Msg = '***** End Of Payslip *****'
          print $End_msg (+2, 10)   Bold Center
!ePay Implementation Changes begins here
          Let #EndPageNumber = #page-count
!ePay Implementation Changes ends here

!ePay Implementation Changes begins here
          do GP-ePay-Guide  ! if ePay installed write Guide data for each payslip
!ePay Implementation Changes ends here

          NEW-PAGE
       End-If

   FROM PS_GPAU_SS_PSLP_VW PER
      , PS_JOB JOB
      , PS_PERSON_NAME PERS

  WHERE PER.CAL_RUN_ID  = $Cal_Run_ID
    AND PER.EMPLID      = JOB.EMPLID
    AND PER.EMPL_RCD    = JOB.EMPL_RCD
!    AND PER.GP_PAYGROUP = JOB.GP_PAYGROUP
    AND PER.EMPLID      = PERS.EMPLID
    AND JOB.EFFDT       = (SELECT MAX(J1.EFFDT)
                             FROM PS_JOB J1
                            WHERE J1.EMPLID   = JOB.EMPLID
                              AND J1.EMPL_RCD = JOB.EMPL_RCD
!                             AND J1.GP_PAYGROUP = JOB.GP_PAYGROUP
                              AND J1.EFFDT   <= PER.PYMT_DT)
    AND JOB.EFFSEQ      = (SELECT MAX(J2.EFFSEQ)
                             FROM PS_JOB J2
                            WHERE J2.EMPLID   = JOB.EMPLID
                              AND J2.EMPL_RCD = JOB.EMPL_RCD
                              AND J2.EFFDT    = JOB.EFFDT)
    AND PER.RSLT_SEG_NUM= (SELECT MAX(PER1.RSLT_SEG_NUM) FROM PS_GPAU_SS_PSLP_VW PER1
                               WHERE PER1.CAL_RUN_ID  = PER.CAL_RUN_ID
                                 AND PER1.EMPLID      = PER.EMPLID
                                 AND PER1.EMPL_RCD    = JOB.EMPL_RCD
                                 AND PER1.GP_PAYGROUP = PER.GP_PAYGROUP
                                 AND PER1.CAL_ID      = PER.CAL_ID
                                 AND PER1.PYMT_DT     = PER.PYMT_DT
                          )
      [$whereClause]
      [$sort_order]
end-SELECT
end-procedure
!
!
!**************************************************************************
! Procedure: Get-ErnDed-Results
! Description: Get and print the earnings and deduction details for the payee.
!**************************************************************************
begin-procedure Get-ErnDed-Results

    Let $TenCharVar      = '1234567890'
    Let #ErnDedRowFound  = 0
    Let #PinCounter      = 0

    let #EDCalc_Rslt_Val = 0
    let #Unit_Rslt_Val   = 0
    let #Rate_Rslt_Val   = 0
    let #Base_Rslt_Val   = 0
    let #Pct_Rslt_Val    = 0
    let #Rslt_Paybk      = 0
    let #Calc_Adj_Val    = 0
    let #Base_Adj_Val    = 0
    let #Unit_Adj_Val    = 0
    Let #descrPrinted    = 1
    Let #ED_PinNo = #ED_PinNum
begin-SELECT on-error=SQL-Error
RSLT.BASE_RSLT_VAL
SUM(RSLT.BASE_RSLT_VAL)   &baseRsltVal ! Current Base
RSLT.PCT_RSLT_VAL         &pctRsltVal  ! Current PCT
RSLT.RATE_RSLT_VAL        &rateRsltVal ! Current Value
RSLT.RSLT_PAYBK           &rsltPaybk   ! Payback Amount
SUM(RSLT.CALC_RSLT_VAL)   &calcRsltVal ! Current Value Unit
SUM(RSLT.UNIT_RSLT_VAL)   &unitRsltVal ! Current Value Amount
SUM(RSLT.CALC_ADJ_VAL)    &calcAdjVal  ! Adjustment Amount
SUM(RSLT.BASE_ADJ_VAL)    &baseAdjVal  ! Adjustment Base
SUM(RSLT.UNIT_ADJ_VAL)    &unitAdjVal  ! Adjustment Unit

   Let #ErnDedRowFound = 1

   let #EDCalc_Rslt_Val = &calcRsltVal
   let #Unit_Rslt_Val   = &unitRsltVal
   let #Rate_Rslt_Val   = &rateRsltVal
   let #Base_Rslt_Val   = &baseRsltVal
   let #Pct_Rslt_Val    = &pctRsltVal
   let #Rslt_Paybk      = &rsltPaybk
   let #Calc_Adj_Val    = &calcAdjVal
   let #Base_Adj_Val    = &baseAdjVal
   let #Unit_Adj_Val    = &unitAdjVal

   let #total_curr_amt  = #total_curr_amt  + #EDCalc_Rslt_Val
   let #total_pybck_amt = #total_pybck_amt + #Rslt_Paybk
   let #total_adj_amt   = #total_adj_amt   + #Calc_Adj_Val

   do Print-Ern-Ded-Values

   Let #PinCounter = #PinCounter + 1 ! increment the counter after printing the values for the 1st time.

FROM PS_GP_RSLT_ERN_DED RSLT
   , PS_GP_PYE_PRC_STAT PRC
WHERE PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLT.EMPLID        = PRC.EMPLID
  AND RSLT.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLT.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLT.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
  AND RSLT.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLT.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
 ! AND RSLT.RSLT_SEG_NUM  = #Rslt_Seg_num   ! we are combining all segmentation into 1
  AND RSLT.PIN_NUM       = #ED_PinNo
  !AND RSLT.INSTANCE      = #ED_PinInstance ! we are combining all segmentation into 1
GROUP BY RSLT.BASE_RSLT_VAL, RSLT.PCT_RSLT_VAL, RSLT.RATE_RSLT_VAL, RSLT.RSLT_PAYBK
end-select
end-procedure
!
!**************************************************************************
! Procedure   : getDedMemberID
! Description : Get Membership deduction ID
!**************************************************************************
Begin-Procedure getDedMemberID
   Let $eeMemberID = ''
   let $eeMemRecID = ''
   let $AllSwitch  = ''
   let $EmplRowFound = 'N'
   Let #dedPinNUmFound = 0
   Let $RecipientName = ''

BEGIN-SELECT
GDMI.RECIPIENT_ID
         let $eeMemRecID = &GDMI.RECIPIENT_ID

         FROM PS_GP_ERN_DED GDMI
           WHERE GDMI.PIN_NUM = #ED_PinNum
             AND GDMI.EFFDT = (SELECT MAX(GDMI1.EFFDT)
                                   FROM PS_GP_ERN_DED GDMI1
                                       WHERE GDMI1.PIN_NUM = GDMI.PIN_NUM
                                         AND GDMI1.EFFDT <= $Pymt_Dt
                              )
END-SELECT

BEGIN-SELECT
GDMIA.RECIPIENT_ID

     let $eeMemRecID = &GDMIA.RECIPIENT_ID

         FROM PS_GP_RCP_PYE_DTL GDMIA
           WHERE GDMIA.PIN_NUM = #ED_PinNum
             AND GDMIA.EMPLID  = $Emplid
             AND GDMIA.EMPL_RCD = #Empl_Rcd
             AND GDMIA.EFFDT = (SELECT MAX(GDMIA1.EFFDT)
                                   FROM PS_GP_RCP_PYE_DTL GDMIA1
                                       WHERE GDMIA1.EMPLID = GDMIA.EMPLID
                                         AND GDMIA1.EMPL_RCD = GDMIA.EMPL_RCD
                                         AND GDMIA1.PIN_NUM = GDMIA.PIN_NUM
                                         AND GDMIA1.EFFDT <= $Pymt_Dt
                              )
END-SELECT

begin-SELECT
AURC.GPAU_MEMBER_ID
AURC1.DESCR

         let $EmplRowFound = 'Y'
         let $eeMemberID   = &AURC.GPAU_MEMBER_ID
         Let $RecipientName = &AURC1.DESCR

     FROM PS_GPAU_RCPPYE_DTL AURC, PS_GP_RCP_PYE_DTL RCP, PS_RECIPIENT AURC1
       WHERE AURC.EMPLID = $Emplid
         AND AURC.EMPL_RCD = #Empl_Rcd
         !AND AURC.RECIPIENT_ID = $eeMemRecID
         AND AURC.PIN_NUM = #ED_PinNum
         AND AURC.RECIPIENT_ID = AURC1.RECIPIENT_ID
     AND AURC.EMPLID = RCP.EMPLID
     AND AURC.EMPL_RCD = RCP.EMPL_RCD
     AND AURC.PIN_NUM = RCP.PIN_NUM
     AND AURC.RECIPIENT_ID = RCP.RECIPIENT_ID
     AND RCP.RECIPIENT_TAG = #ED_RecipientTag
     AND AURC.EFFDT = RCP.EFFDT
         AND AURC.EFFDT = (SELECT MAX(AURC1.EFFDT)
                               FROM PS_GPAU_RCPPYE AURC1
                                  WHERE AURC1.EMPLID = AURC.EMPLID
                                    AND AURC1.EMPL_RCD = AURC.EMPL_RCD
                                    !AND AURC1.RECIPIENT_ID = AU.RECIPIENT_ID
                                    AND AURC1.EFFDT <= $Pymt_Dt
                           )


end-SELECT


if rtrim($EmplRowFound,' ') <> 'Y'
begin-SELECT
AURC11.DESCR

        Let $RecipientName = &AURC11.DESCR

     FROM PS_GPAU_RCPPYE_DTL AURCC, PS_GP_RCP_PYE_DTL RCP, PS_RECIPIENT AURC11
        WHERE AURCC.EMPLID = $Emplid
          AND AURCC.EMPL_RCD = #Empl_Rcd
          !AND AURCC.RECIPIENT_ID = $eeMemRecID
          AND AURCC.PIN_NUM = #ED_PinNum
          AND AURCC.RECIPIENT_ID = AURC11.RECIPIENT_ID
      AND AURCC.EMPLID = RCP.EMPLID
      AND AURCC.EMPL_RCD = RCP.EMPL_RCD
      AND AURCC.PIN_NUM = RCP.PIN_NUM
      AND AURCC.RECIPIENT_ID = RCP.RECIPIENT_ID
      AND RCP.RECIPIENT_TAG = #ED_RecipientTag
      AND AURCC.EFFDT = RCP.EFFDT
          AND AURCC.EFFDT = (SELECT MAX(AURC2.EFFDT)
                                 FROM PS_GPAU_RCPPYE_DTL AURC2
                                    WHERE AURC2.EMPLID = AURCC.EMPLID
                                       AND AURC2.EMPL_RCD = AURCC.EMPL_RCD
                                       !AND AURC2.RECIPIENT_ID = AURCC.RECIPIENT_ID
                                       AND AURC2.EFFDT <= $Pymt_Dt )
end-SELECT

End-if
End-Procedure
!
!**************************************************************************
! Procedure  : Print-Ern-Ded-Values
! Description: Print the values from the ern-ded or accumulator variables
!            : for the earning / deduction being processed
!**************************************************************************
Begin-Procedure Print-Ern-Ded-Values
      If #Current-line >  80
         NEW-PAGE
         do Print_Heading
         do Print_ED_Headings
      end-if

      if #descrPrinted
         print $Descr   (+1, {ColA}) BOLD
         Let #descrPrinted = 0
      else
         print ' '   (+1, 1)
      End-if

      If $Print_Base_YN = 'Y'
        if #Base_Rslt_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED3},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Base_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Pct_YN = 'Y'
         if #Pct_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED5},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Pct_Rslt_Val  (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Rte_YN = 'Y'
         IF #Rate_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED6},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Rate_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      If $Print_Unt_YN = 'Y'
         if #Unit_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED7},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Unit_Rslt_Val (0, #ReturnCol) edit '9999999.99'
         end-if
      End-If
      if #EDCalc_Rslt_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #EDCalc_Rslt_Val (0, #ReturnCol)   edit '9999999.99'
         else
         Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print '0' (0, #ReturnCol) edit '9999999.99'
      End-If
     If #Rslt_Paybk > 0
         Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Rslt_Paybk    (0, #ReturnCol)   edit '9999999.99'
      end-if
      if #Calc_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Calc_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #Base_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED11},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Base_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #Unit_Adj_Val <> 0
         Do Find-Start-Pos ($TenCharVar, {colED12},#ReturnCol)
         Let #ReturnCol = #ReturnCol - 3
         print #Unit_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
      end-if
      if #PinCounter = 0
         if #Acum_Rslt_Hrs <> 0
            Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            print #Acum_Rslt_Hrs (0, #ReturnCol)  edit '9999999.99'
         end-if
         if #Acum_Rslt_Amt <> 0
            if #LastPinNum <> &PIN.PIN_NUM
               Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
               Let #ReturnCol = #ReturnCol - 3
               print #Acum_Rslt_Amt (0, #ReturnCol)  edit '9999999.99'
               Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt + #Acum_Rslt_Amt_TTL
            end-if
         end-if
      End-IF
!******************************************
! 127339 changes begin here
! if membership Id is to be displayed, we call a procedure to retrieve the member ID and print it

      if $showMemberID = 'Y'
         if $MembershipPrinte= 'N'
            do getDedMemberID
            print 'Member ID :'(+1, {ColA}) BOLD
            print $eeMemberID   (0, 15) BOLD
            Let $MembershipPrinte= 'Y'
         End-IF
      End-IF
      
    !Mobile Payslip -  Start
    !if( $custEnabled = 'Y')
        Do get-element-group
        LET MPSLP_ED.EMPLID(0) = $Emplid
        LET MPSLP_ED.CAL_RUN_ID(0) = $Cal_Run_ID
        LET MPSLP_ED.EMPL_RCD(0) =    #Empl_Rcd                
        LET MPSLP_ED.GP_PAYGROUP(0) =    $GP_Paygroup             
        LET MPSLP_ED.CAL_ID(0) =          $Cal_ID    
        LET MPSLP_ED.ORIG_CAL_RUN_ID(0) =  &ORIG_CALID
        LET MPSLP_ED.RSLT_SEG_NUM(0) =    1 ! we are not using segmentation      
        LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) =   'GPAUS'         
        LET MPSLP_ED.GP_PSLP_ID(0) =    MPSLP_HDR.GP_PSLP_ID(0)   
        LET MPSLP_ED.INSTANCE(0) =     #PinCounter           
        LET MPSLP_ED.PIN_NUM(0) =        #ED_PinNum         
        LET MPSLP_ED.SLICE_BGN_DT(0) =    &PRD_BGN_DT  
        LET MPSLP_ED.SLICE_END_DT(0) =  &PRD_END_DT    
        LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) =   #PARENT_PIN       
        
        LET MPSLP_ED.ED_ASSIGN_INSTANCE(0) = 0           
        LET MPSLP_ED.PI_INSTANCE(0) =   0
        LET MPSLP_ED.PRD_BGN_DT(0) =   &PRD_BGN_DT                 
        LET MPSLP_ED.PRD_END_DT(0) =  &PRD_END_DT
        LET MPSLP_ED.SEG_BGN_DT(0) =   &PRD_BGN_DT               
        LET MPSLP_ED.SEG_END_DT(0) =    &PRD_END_DT
        LET MPSLP_ED.PYMT_DT(0) =  $Pymt_Dt
        LET MPSLP_ED.RUN_TYPE(0) =    &RUN_TYPE                  
        LET MPSLP_ED.CALC_RSLT_VAL(0) =    #EDCalc_Rslt_Val              
        LET MPSLP_ED.CALC_ADJ_VAL(0) =    #Calc_Adj_Val         
        !LET MPSLP_ED.CALC_DELTA_VAL(0) =             
        LET MPSLP_ED.BASE_RSLT_VAL(0) =     #Base_Rslt_Val      
        LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val       
        LET MPSLP_ED.RATE_RSLT_VAL(0) =     #Rate_Rslt_Val        
        LET MPSLP_ED.UNIT_RSLT_VAL(0) =     #Unit_Rslt_Val       
        LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
        LET MPSLP_ED.PCT_RSLT_VAL(0) =    #Pct_Rslt_Val  
        
        LET #null = isnull($eeMemberID) 
        If (#null = 0)
            LET MPSLP_ED.RECIPIENT_ID(0) =      $eeMemberID
        else
            LET MPSLP_ED.RECIPIENT_ID(0) =      ' '
        End-If
        !$eeMemRecID     
        LET MPSLP_ED.RECIPIENT_TAG(0) =    #ED_RecipientTag         
        !LET MPSLP_ED.USER_FLD1(0) =            
        !LET MPSLP_ED.USER_FLD2(0) =                
        !ET MPSLP_ED.USER_FLD3(0) =                
        !LET MPSLP_ED.USER_FLD4(0) =                
        !LET MPSLP_ED.USER_FLD5(0) =                
        !LET MPSLP_ED.USER_FLD6(0) =                
        LET MPSLP_ED.GP_MPSLP_SECTION(0) =     $PinSec          
        LET MPSLP_ED.GP_MPSLP_SPRNT_ORD(0) =   $PinSec        
        LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
        LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) =    #SeqNum5
        LET MPSLP_ED.GP_MPSLP_PIN_DESCR(0) =   $Descr

        
        DO insert_mpslp_ernded_row  
        ! Insert the row only once - The pdf payslip is not splitting the payslip based on result segment number
        If (#PinCounter = 0)
            DO get_Accum_Data
            LET MPSLP_ACUM.EMPLID(0) = $Emplid
            LET MPSLP_ACUM.CAL_RUN_ID(0) = $Cal_Run_ID
            LET MPSLP_ACUM.EMPL_RCD(0) =    #Empl_Rcd                
            LET MPSLP_ACUM.GP_PAYGROUP(0) =    $GP_Paygroup             
            LET MPSLP_ACUM.CAL_ID(0) =          $Cal_ID    
            LET MPSLP_ACUM.ORIG_CAL_RUN_ID(0) =  &ORIG_CALID
            LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) =   'GPAUS'         
            LET MPSLP_ACUM.GP_PSLP_ID(0) =    MPSLP_HDR.GP_PSLP_ID(0)   
            LET MPSLP_ACUM.RSLT_SEG_NUM(0) =    1      
            LET MPSLP_ACUM.PIN_NUM(0) =        #AcumAmtPin         
            LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = &EmpRcdAc
            LET MPSLP_ACUM.ACM_FROM_DT(0) =  &AcmFromDt
            LET MPSLP_ACUM.ACM_THRU_DT(0) = &AcmToDt
            LET MPSLP_ACUM.SEQ_NUM8(0) = &SeqNo8
            LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN_Y
            LET MPSLP_ACUM.SLICE_BGN_DT(0) = &PRD_BGN_DT
            
            
            LET MPSLP_ACUM.SLICE_END_DT(0) = &PRD_END_DT
            LET MPSLP_ACUM.SEG_BGN_DT(0) = &PRD_BGN_DT
            LET MPSLP_ACUM.SEG_END_DT(0) = &PRD_END_DT
            LET MPSLP_ACUM.PRD_BGN_DT(0) = &PRD_BGN_DT
            LET MPSLP_ACUM.PRD_END_DT(0) = &PRD_END_DT
            LET MPSLP_ACUM.PYMT_DT(0) = $Pymt_Dt
            LET MPSLP_ACUM.RUN_TYPE(0) = &RUN_TYPE 
            
            LET MPSLP_ACUM.USER_KEY1(0) = &UsrKey1
            LET MPSLP_ACUM.USER_KEY2(0) = &UsrKey2
            LET MPSLP_ACUM.USER_KEY3(0) = &UsrKey3
            LET MPSLP_ACUM.USER_KEY4(0) = &UsrKey4
            LET MPSLP_ACUM.USER_KEY5(0) = &UsrKey5
            LET MPSLP_ACUM.USER_KEY6(0) = &UsrKey6
            LET MPSLP_ACUM.COUNTRY(0) = 'AUS'
            LET MPSLP_ACUM.CALC_RSLT_VAL(0) = &CalcResultVal
            LET MPSLP_ACUM.CALC_DELTA_VAL(0) = 0
            LET MPSLP_ACUM.CALC_VAL(0) = &CalcVal
            
            
            LET MPSLP_ACUM.GP_MPSLP_SECTION(0) =    '40'          
            LET MPSLP_ACUM.GP_MPSLP_SPRNT_ORD(0) =   '40'
            LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
            LET MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0) =    #SeqNum5
            LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =   $Descr

            do insert_mpslp_acum_row
        End-If   
    !End-If
    !Mobile Payslip -  End
    
End-Procedure
!
!
!**************************************************************************
! Procedure: Get_Leave
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get_Leave
        let $First_Abs = 'Y'

Begin-SELECT
ABTMPL.SEQ_NUM
ABTMPL.GPAU_ENTL_PIN_NUM
ABTMPL.PIN_NUM           &PIN1
ABTMPL.GPAU_DESC_TYPE
ABTMPL.DESCR
ABTMPL.GPAU_PIN_AC1_NUM  &PIN2
ABTMPL.GPAU_PIN_AC2_NUM  &PIN3
ABTMPL.GPAU_PIN_AC3_NUM  &PIN4

        Let #Pin1 = &PIN1  ! Entitlement
        Let #Pin2 = &PIN2  ! Balance
        Let #Pin3 = &PIN3  ! Adjustment
        Let #Pin4 = &PIN4  ! Take

        Let $AB_Descr = &ABTMPL.DESCR
        let $Descr_Type = &ABTMPL.GPAU_DESC_TYPE

        Do Get-Leave-Data

        if #Pin1Val <> 0 or #Pin2Val <> 0 or #Pin3Val <> 0 or #Pin4Val <> 0
         If #Current-line <= 80
           If $First_Abs = 'Y'
              do Print_Abs_headings
              let $First_Abs = 'N'
           end-if
        end-if

         If #Current-line >  80
             NEW-PAGE
             do Print_Heading
              do Print_Abs_headings
              let $First_Abs = 'N'
        End-If

           print $Descr        (+1, {ColA})

           if #Pin1Val <> 0
              print #Pin1Val  (0, {ColD})   edit '9999.999999'
           end-if
           if #Pin2Val <> 0
              print #Pin2Val  (0, {ColN})  edit '9999.999999'
           end-if
           if #Pin3Val <> 0
              print #Pin3Val  (0, {ColG})  edit '9999.999999'
           end-if
           if #Pin4Val <> 0
              print #Pin4Val  (0, {ColK})  edit '9999.999999'
           end-if
         end-if


   FROM PS_GPAU_PSLP_ABS ABTMPL
    WHERE ABTMPL.GPAU_PAYSLIP_ID = $Payslip_Id
     AND ABTMPL.EFFDT  = (SELECT MAX(ABTMPL1.EFFDT)
                             FROM PS_GPAU_PSLP_ABS ABTMPL1
                            WHERE ABTMPL1.GPAU_PAYSLIP_ID = ABTMPL.GPAU_PAYSLIP_ID
                              AND ABTMPL1.EFFDT <= $Pymt_Dt)
ORDER BY ABTMPL.SEQ_NUM
End-SELECT

          let $New_Page_Abs = 'N'

End-Procedure
!
!**************************************************************************
! Procedure: Get-Leave-Data
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get-Leave-Data
   Let #Pin1Val = 0
   Let #Pin2Val = 0
   Let #Pin3Val = 0
   Let #Pin4Val = 0
!142962. The entire SELECT statement must be modified because we need to join to gp_cal_run_dtl. Also
!We need to put the order by fields in the select statement.

begin-SELECT
SGPSA.CAL_ID
SGPSA.RSLT_SEG_NUM
SGPSA.GP_CALC_TS

       let $Last_Cal_Id = &SGPSA.CAL_ID
       let #Last_Seg    = &SGPSA.RSLT_SEG_NUM

 FROM PS_GP_PYE_SEG_STAT SGPSA, PS_GP_CAL_RUN_DTL SGCRD
  WHERE SGPSA.GP_PAYGROUP = SGCRD.GP_PAYGROUP
    AND SGPSA.CAL_RUN_ID = SGCRD.CAL_RUN_ID
    AND SGPSA.CAL_ID = SGCRD.CAL_ID
    AND SGCRD.CALC_TYPE = 'A'
    AND SGPSA.EMPLID = $Emplid
    AND SGPSA.EMPL_RCD = #Empl_Rcd
    AND SGPSA.CAL_RUN_ID = $Cal_Run_ID
    AND SGPSA.CAL_RUN_ID = SGPSA.ORIG_CAL_RUN_ID
    !AND SGCRD.CAL_SEQ_NUM = (SELECT MAX(B1.CAL_SEQ_NUM) FROM PS_GP_CAL_RUN_DTL B1
                       ! WHERE B1.CAL_RUN_ID = SGCRD.CAL_RUN_ID
                         ! AND B1.CALC_TYPE  = SGCRD.CALC_TYPE)
 ORDER BY SGPSA.GP_CALC_TS DESC, SGPSA.RSLT_SEG_NUM DESC
end-select

LET #Pin_no1 = #PIN1
LET #Pin_no2 = #PIN2
LET #Pin_no3 = #PIN3
LET #Pin_no4 = #PIN4

begin-SELECT on-error=SQL-Error
D.PIN_NUM
D.PIN_NM
ABS.CALC_RSLT_VAL
D.DESCR

        let $Pin_Descr             = &D.DESCR
        let $Pin_Nm                = &D.PIN_NM

! Resolution 127608 - When option is custom, the payslip was still printing the element description.

           evaluate $Descr_Type
           when = '10'
                let $Descr = $Pin_Descr
           when = '20'
                let $Descr = $Ab_Descr
           when = '30'
                Let $Descr = $Pin_Nm
        end-evaluate

        if &D.PIN_NUM = #PIN1
           Let #Pin1Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN2
           Let #Pin2Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN3
           Let #Pin3Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN4
           Let #Pin4Val = &ABS.CALC_RSLT_VAL
        end-if

FROM PS_GP_PIN D
   , PS_GP_RSLT_ACUM ABS

  WHERE ABS.EMPLID           = $Emplid
    AND ABS.EMPL_RCD         = #Empl_Rcd
    AND ABS.CAL_ID           = $Last_Cal_Id
!    AND ABS.RSLT_SEG_NUM     = #Last_Seg
    AND ABS.CAL_RUN_ID       = $Cal_Run_Id
    AND ABS.GP_PAYGROUP      = $GP_Paygroup
!    AND ABS.RSLT_SEG_NUM     = #Rslt_Seg_num
    AND ABS.EMPL_RCD         = ABS.EMPL_RCD_ACUM
    AND ABS.PIN_NUM          = D.PIN_NUM
    AND ABS.CAL_RUN_ID       = ABS.ORIG_CAL_RUN_ID
    AND (ABS.PIN_NUM = #Pin_no1 or ABS.PIN_NUM = #Pin_no2 or ABS.PIN_NUM = #Pin_no3 or ABS.PIN_NUM = #Pin_no4)
    AND (ABS.ACM_THRU_DT IS NULL
    OR
       ((ABS.ACM_THRU_DT IS NOT NULL) AND
    ABS.ACM_THRU_DT   = (SELECT MAX(ABS1.ACM_THRU_DT)
                                FROM PS_GP_RSLT_ACUM ABS1
                                WHERE ABS.EMPLID        = ABS1.EMPLID
                                AND ABS.CAL_RUN_ID      = ABS1.CAL_RUN_ID
                                AND ABS.EMPL_RCD        = ABS1.EMPL_RCD
                                AND ABS.GP_PAYGROUP     = ABS1.GP_PAYGROUP
                                AND ABS.CAL_ID          = ABS1.CAL_ID
                                AND ABS.ORIG_CAL_RUN_ID = ABS1.ORIG_CAL_RUN_ID
                                AND ABS.RSLT_SEG_NUM    = ABS1.RSLT_SEG_NUM
                                AND ABS.PIN_NUM         = ABS1.PIN_NUM
                                AND ABS.EMPL_RCD_ACUM   = ABS1.EMPL_RCD_ACUM))
    AND ABS.ACM_THRU_DT >= ABS.SLICE_END_DT)
    AND ABS.RSLT_SEG_NUM= (SELECT MAX(ABS2.RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM ABS2
                               WHERE ABS2.CAL_RUN_ID  = ABS.CAL_RUN_ID
                                 AND ABS2.EMPLID      = ABS.EMPLID
                                 AND ABS2.GP_PAYGROUP = ABS.GP_PAYGROUP
                                 AND ABS2.CAL_ID      = ABS.CAL_ID
                          )

end-select
end-procedure
!
!
!**************************************************************************
! Procedure: Get_Payment_Summ
! Description: Get and print the pay summary details for the payee.
!**************************************************************************
begin-procedure Get_Payment_Summ
begin-SELECT on-error=SQL-Error
C.GPAU_PIN_AC1_NUM                &GPAU_PIN_AC1_NUM
C.GPAU_PIN_AC2_NUM                &GPAU_PIN_AC2_NUM
C.GPAU_PIN_AC3_NUM                &GPAU_PIN_AC3_NUM
C.GPAU_PIN_AC4_NUM                &GPAU_PIN_AC4_NUM
C.GPAU_PIN_AC5_NUM                &GPAU_PIN_AC5_NUM
C.GPAU_PIN_AC6_NUM                &GPAU_PIN_AC6_NUM
C.DESCR                           &C.DESCR
C.SEQ_NUM
A.ORIG_CAL_RUN_ID                 &ORIG_CALID
B.RSLT_SEG_NUM                    &RSLT_SEG_NUM
B.SEG_BGN_DT                      &SEG_BGN_DT
B.SEG_END_DT                      &SEG_END_DT
A.PRD_BGN_DT                      &PRD_BGN_DT
A.PRD_END_DT                      &PRD_END_DT
A.PAY_ENTITY                      &COMPANY
A.RUN_TYPE                        &RUN_TYPE

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC1_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val1 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC2_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val2 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC3_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val3 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC4_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val4 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC5_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val5 = #Calc_Rslt_Val

        let #Calc_Rslt_Val = 0

        let #Pin_Num = &GPAU_PIN_AC6_NUM
        do Get_Accum_Values
        let #Calc_Acum_Val6 = #Calc_Rslt_Val

        let $Pay_Summ_Desc  = &C.DESCR

        if #Calc_Acum_Val1 <> 0 or
              #Calc_Acum_Val2 <> 0 or
              #Calc_Acum_Val3 <> 0 or
              #Calc_Acum_Val4 <> 0 or
              #Calc_Acum_Val5 <> 0 or
              #Calc_Acum_Val6 <> 0

          print $Pay_Summ_Desc (+1, {colA}) Bold

          if  #Calc_Acum_Val1 <> 0
            print #Calc_Acum_Val1 (0, {colAC1})  edit 9999999.99
          end-if

          if  #Calc_Acum_Val2 <> 0
            print #Calc_Acum_Val2 (0, {colAC2})      edit 9999999.99
          end-if

          if  #Calc_Acum_Val3 <> 0
            print #Calc_Acum_Val3 (0, {colAC3})  edit 9999999.99
          end-if

          if  #Calc_Acum_Val4 <> 0
            print #Calc_Acum_Val4 (0, {colAC4})  edit 9999999.99
          end-if

          if  #Calc_Acum_Val5 <> 0
            print #Calc_Acum_Val5 (0, {colAC5})  edit 9999999.99
          end-if

          if  #Calc_Acum_Val6 <> 0
            print #Calc_Acum_Val6 (0, {colAC6})  edit 9999999.99
          end-if
        end-if
        
    !Mobile Payslip -  Start : Insert Header Data
    !if( $custEnabled = 'Y')
        !Let $Company = 'KAB'
        LET MPSLP_HDR.EMPLID(0) = $Emplid
        LET MPSLP_HDR.CAL_RUN_ID(0) = $Cal_Run_ID
        LET MPSLP_HDR.EMPL_RCD(0) = #Empl_Rcd
        LET MPSLP_HDR.GP_PAYGROUP(0) = $GP_Paygroup
        LET MPSLP_HDR.CAL_ID(0) = $Cal_ID
        LET MPSLP_HDR.ORIG_CAL_RUN_ID(0) = &ORIG_CALID
        LET MPSLP_HDR.RSLT_SEG_NUM(0) = 1
        LET MPSLP_HDR.GP_PSLP_SRCPRODUCT(0) = 'GPAUS'
        !LET MPSLP_HDR.GP_PSLP_ID(0) = $payslip_id
        
        LET $ERcd = TO_CHAR(#Empl_Rcd)
        LET $Pay_Seg_End_Dt   = &SEG_END_DT
        do Format-DateTime($Pay_Seg_End_Dt, $PslpId_Conv, {DEFDATE}, '', '')
         
        LET MPSLP_HDR.GP_PSLP_ID(0) = $ERcd || ' ' || $PslpId_Conv
        LET MPSLP_HDR.SEG_BGN_DT(0) = &PRD_BGN_DT
        LET MPSLP_HDR.SEG_END_DT(0) = &PRD_END_DT
        LET MPSLP_HDR.PRD_BGN_DT(0) = &PRD_BGN_DT
        LET MPSLP_HDR.PRD_END_DT(0) = &PRD_END_DT
        
        LET MPSLP_HDR.PYMT_DT(0) = $Pymt_Dt
        LET MPSLP_HDR.GP_MPSLP_GROSS(0) = #Calc_Acum_Val1
        LET MPSLP_HDR.GP_MPSLP_NET(0) = #Calc_Acum_Val3
        LET MPSLP_HDR.GP_COMPANY(0) = $Company
        LET MPSLP_HDR.RUN_TYPE(0) = &RUN_TYPE

        !LET MPSLP_HDR.GP_MPSLP_HDR1(0) = $Acum_Lbl1
        !LET MPSLP_HDR.GP_MPSLP_HDR2(0) = $Acum_Lbl2
        !LET MPSLP_HDR.GP_MPSLP_HDR3(0) = $Acum_Lbl3
        !LET MPSLP_HDR.GP_MPSLP_HDR4(0) = $Acum_Lbl4
        !LET MPSLP_HDR.GP_MPSLP_HDR5(0) = $Acum_Lbl5
        !LET MPSLP_HDR.GP_MPSLP_HDR6(0) = $Acum_Lbl6
        DO insert_mpslp_hdr_row
    !End-If  
    !Mobile Payslip - End
    
    
        
        
FROM PS_GPAU_PSLP_ACUM C,
PS_GP_PG_DTL_SGPAU D,
PS_GP_PYE_SEG_STAT B,
PS_GP_PYE_PRC_STAT A
WHERE C.GPAU_PAYSLIP_ID = D.GPAU_PAYSLIP_ID
  AND D.GP_PAYGROUP = B.GP_PAYGROUP
  AND D.GPAU_PAYSLIP_ID = $payslip_id
  AND B.CAL_RUN_ID      = A.CAL_RUN_ID
  AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
  AND B.EMPLID          = A.EMPLID
  AND B.EMPL_RCD        = A.EMPL_RCD
  AND B.CAL_ID          = A.CAL_ID
  AND B.GP_PAYGROUP     = A.GP_PAYGROUP
  AND A.PRD_TYPE <> 'H'
  AND A.EMPLID = $Emplid
  AND A.EMPL_RCD = #Empl_Rcd
  AND A.CAL_RUN_ID     = $Cal_Run_ID
  AND A.CAL_ID         = $Cal_ID
  AND A.GP_PAYGROUP    = $GP_Paygroup
  AND B.RSLT_SEG_NUM = (SELECT MAX (SEG2.RSLT_SEG_NUM)
                             FROM PS_GP_PYE_SEG_STAT SEG2
                              WHERE B.EMPLID       = SEG2.EMPLID
                                AND B.CAL_RUN_ID   = SEG2.CAL_RUN_ID
                                AND B.EMPL_RCD     = SEG2.EMPL_RCD
                                AND B.GP_PAYGROUP  = SEG2.GP_PAYGROUP
                                AND B.CAL_ID       = SEG2.CAL_ID)
  AND B.RSLT_REV_NUM = (SELECT MIN (SEG1.RSLT_REV_NUM)
                             FROM PS_GP_PYE_SEG_STAT SEG1
                              WHERE B.EMPLID       = SEG1.EMPLID
                                AND B.CAL_RUN_ID   = SEG1.CAL_RUN_ID
                                AND B.EMPL_RCD     = SEG1.EMPL_RCD
                                AND B.GP_PAYGROUP  = SEG1.GP_PAYGROUP
                                AND B.CAL_ID       = SEG1.CAL_ID
                                AND B.RSLT_SEG_NUM = SEG1.RSLT_SEG_NUM)
  AND D.EFFDT = (SELECT MAX(D1.EFFDT) FROM PS_GP_PG_DTL_SGPAU D1
                            WHERE D1.GP_PAYGROUP = D.GP_PAYGROUP
                            AND D1.EFFDT <=$Pymt_Dt)
  AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_GPAU_PSLP_ACUM C1
                          WHERE C1.GPAU_PAYSLIP_ID = C.GPAU_PAYSLIP_ID
                            AND C1.EFFDT <=$Pymt_Dt)
ORDER BY C.SEQ_NUM
end-select

        graphic (+2, 2, 126) Horz-line

end-procedure
!
!**************************************************************************
! Procedure   : Get-Acum-Results
! Description : Get Acum Values for Earn/ Deductions.
!**************************************************************************
Begin-Procedure Get-Acum-Results
    let #i = 0
    let #AcumRsltFound = 0
    Let #Acum_Rslt_Hrs = 0
    Let #Acum_Rslt_Amt = 0

  WHILE #i < #_Acum-Array-Total

    GET #PIN_NUM
        #CALC_RSLT_VAL
    FROM RSLT_ACUM_ARRAY(#i)
       PIN_NUM
       CALC_RSLT_VAL

    if #PIN_NUM = #AcumUnitPin or #PIN_NUM = #AcumAmtPin
        Let #AcumRsltFound = 1
        Let #check1 = 2

        PUT #check1
        INTO  RSLT_ACUM_ARRAY(#i)
        CHECK
    end-if

     if &GSE.GPAU_YTD_AC_UNT_YN = 'Y'
        if #PIN_NUM = #AcumUnitPin
           let #Acum_Rslt_Hrs = #Calc_Rslt_Val

!  show 'get-acum-results: #Acum_Rslt_Hrs=' #Acum_Rslt_Hrs

        end-if
     end-if

!Get the accumulated value of the amount, if entered at setup

     if &GSE.GPAU_YTD_AC_AMT_YN = 'Y'
        if #PIN_NUM = #AcumAmtPin
           let #Acum_Rslt_Amt = #Calc_Rslt_Val

        end-if
     end-if

    add 1 to #i

  END-WHILE


End-Procedure
!
!**************************************************************************
! Procedure     : Get_Accum_Values
! Description   : Get the accumulated values for the payee
!**************************************************************************
begin-procedure Get_Accum_Values
LET #Pin_No = #Pin_Num
Begin-SELECT on-error=SQL-Error
SUM(ACC.CALC_RSLT_VAL) &ACC.CALC_RSLT_VAL

        let #Calc_Rslt_Val = &ACC.CALC_RSLT_VAL

FROM PS_GP_RSLT_ACUM ACC
  WHERE ACC.EMPLID        = $Emplid
    AND ACC.EMPL_RCD      = #Empl_Rcd
    AND ACC.CAL_RUN_ID    = $Cal_Run_ID
    AND ACC.GP_PAYGROUP   = $GP_Paygroup
    AND ACC.CAL_ID        = $Cal_ID
!    AND ACC.RSLT_SEG_NUM  = #Rslt_Seg_num
    AND ACC.PIN_NUM       = #Pin_No
    AND ACC.EMPL_RCD_ACUM = ACC.EMPL_RCD
end-select
end-procedure
!
!************************************************************************
!************************************************************************
! Routines and code below have been added to enable ePay Implementation *
!************************************************************************
!************************************************************************
!
begin-Procedure Get-NetAmountValue
   Let #NetPayAccumulatorValue = 0
Begin-SELECT !on-error=SQL-Error
SUM(ENP.PIN_NET_VAL) &NetPayVal

    Let #NetPayAccumulatorValue = &NetPayVal

  FROM PS_GP_PYE_SEG_STAT ENP
   WHERE ENP.EMPLID         = $Emplid
     AND ENP.EMPL_RCD       = #Empl_Rcd
     AND ENP.CAL_RUN_ID     = $Cal_Run_ID
     AND ENP.CAL_ID         = $Cal_ID
     AND ENP.GP_PAYGROUP    = $GP_Paygroup
End-SELECT
End-Procedure
!
!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init
   let $sql-statement = 'GPAUPY01.sqr, GP-ePay-Init '

  Do Check-ePay-installed ($ePay_Installed)

    If $ePay_Installed = 'Y'
     Move 'GPAUPY01' to $ReportID

      let #eV4 =  To_number($prcs_process_instance)

      !* have the Output Working Directory from the Process parameters table
      do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

      !* have the URL id from the Payslip option table
      do Get-ePay-URLid ('AUS', $eV18)

      !* Global ePay variable settings used in GP-ePay procedures in this SQR
      let $eV1 = $prcs_oprid
      let $eV2 = $prcs_run_cntl_id
      let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

      ! Open the file for writing epay control data
      ! Let $GP_PSLP_CTLFILE   = $eV3 || '.txt'
      ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
      ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GP_PSLP_CTLFILE)

      ! when we do not pass a control file
       Let $GP_PSLP_CTLFILE = ' '
       Let $FILELAYOUT = ' '

    End-If

end-procedure !GP-ePay-Init

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************

begin-procedure GP-ePay-Guide

   let $sql-statement = 'GPAUPY01.sqr,GP-ePay-Guide'

 If $ePay_Installed = 'Y'

   ! For NLD we do need to retrieve the runtype value other CE's may have it already
   ! AUS Payslip does not exclude by run type. We can ignore this procedure

   !do Get-RUN-TYPE  ! not an ePay procedure

   Let $strEmplRcd = to_char(#Empl_Rcd)
   let $strEmplRcd  = rtrim($strEmplRcd,' ')
   let $strEmplRcd  = ltrim($strEmplRcd,' ')

   let $eV5  = rtrim($Emplid, ' ')
   let $eV5  = ltrim($eV5, ' ')
   let $eV6  = rtrim($Cal_Run_ID,' ')
   let $eV6  = ltrim($eV6,' ')
   let $eV7  = 'GPAUS'
   let $eV8  = $strEmplRcd  || ' ' || $Pay_Dt_To_Conv  ! gp epay payslip id
   !let $eV8  = rtrim($CAL_run_ID, ' ') || '_' || $eV5 || '_' || $strEmplRcd   ! gp epay payslip id
   let $eV9  = $pymt_dt
   let $eV10 = $Pay_Pd_To_Dt
   let $eV11 = $Pay_Pd_From_Dt
   ! Perform routine to retrieve the NetPay amount based on Net pay pin number
   Do Get-NetAmountValue
   let #eV12 = #NetPayAccumulatorValue ! net pay

   let $eV13 = $PayEntityDescr ! AUS will populate the Pay Entity Name in the Description column.

   let $eV14 = rtrim(&RUN_TYPE, ' ')
   !let $eV14 = ' ' ! we are not populating the run type
   let $eV15 = 'ORIG'  ! payslip status ORIGINAL
   let $eV16 = $eV5 || '_' || $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'   ! sysfilename of the payslip pdf
   let $eV17 = $eV16                                                           !userfilename  - what the payee sees filename as
   let #eV19 = #BeginPageNumber                                                !begin page number of payslip in output report
   let #eV20 = #EndPageNumber                                                  !end page number of payslip in output report

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

    do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

!   do Write-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If

end-procedure ! GP-ePay-Guide

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control

let $sql-statement = 'GPAUPY01.sqr,GP-ePay-Control '

 If $ePay_Installed = 'Y'

   let $rptid = lower($ReportID)
   let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'

   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GP_PSLP_CTLFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')

 End-If

end-procedure !GP-ePay-Control

!***********************************************************************
! For PPL Purposes: Online Payslip                                     *
! Procedure : Calc-PPL-dates                                           *
! Calculates PPL Start and End Dates                                   *
!***********************************************************************

begin-procedure Calc-PPL-dates


!Code for start date

let $PPLs_start_dt = ' '
let $PPL_end_dt = ' '
Begin-select
RSLT.DATE_PIN_VAL

 let $PPLs_start_dt = &RSLT.DATE_PIN_VAL


From PS_GP_RSLT_PIN RSLT, PS_GP_PIN PIN
Where PIN.PIN_CODE = 'PPL VR START DT AUS' 
and RSLT.PIN_NUM = PIN.PIN_NUM 
and RSLT.EMPLID = $Emplid
and RSLT.CAL_RUN_ID = $Cal_Run_Id
and RSLT.EMPL_RCD = #Empl_Rcd
and RSLT.GP_PAYGROUP = $GP_Paygroup
and RSLT.CAL_ID = $Cal_ID
and RSLT.RSLT_SEG_NUM = #Rslt_Seg_num
End-select

Begin-select
RSLT1.DATE_PIN_VAL

 let $PPL_end_dt = &RSLT1.DATE_PIN_VAL
 

From PS_GP_RSLT_PIN RSLT1, PS_GP_PIN PIN1
Where PIN1.PIN_CODE = 'PPL VR END DT AUS' 
and RSLT1.PIN_NUM = PIN1.PIN_NUM 
and RSLT1.EMPLID = $Emplid
and RSLT1.CAL_RUN_ID = $Cal_Run_Id
and RSLT1.EMPL_RCD = #Empl_Rcd
and RSLT1.GP_PAYGROUP = $GP_Paygroup
and RSLT1.CAL_ID = $Cal_ID
and RSLT1.RSLT_SEG_NUM = #Rslt_Seg_num
End-select

If $PPL_start_dt <= $Pay_Pd_To_Dt and $PPL_end_dt >= $Pay_Seg_From_Dt
 let #PPL_dt_flag = 1
Else
 let #PPL_dt_flag = 0
End-If

end-procedure  !Calc-PPL-dates 

!*****************************************************************************
! Procedure : Print-YTD-Values                                               *
! Prints YTD values, if present, for earnings and deductions not in payroll  *
!*****************************************************************************
begin-procedure Print-YTD-Values

Let $TenCharVar = '1234567890'
Let #i = 0

While #i < #_Acum-Array-Total
  Let $Check1 = 0
  GET #PIN_NUM_ACC
    #CALC_RSLT_VAL_ACC
    #CHECK
  FROM RSLT_ACUM_ARRAY(#i)
    PIN_NUM
    CALC_RSLT_VAL
    CHECK

  if #CHECK = 1
    if #Current-line >  80
      NEW-PAGE
      do Print_Heading
      do Print_ED_Headings
    end-if

BEGIN-SELECT
PSLP.DESCR
PSLP.GPAU_YTD_AC_AMT
PSLP.GPAU_YTD_AC_UNITS
PSLP.GPAU_YTD_AC_AMT_YN
PSLP.GPAU_YTD_AC_UNT_YN

        Let $DescrElement = &PSLP.DESCR
        Let #Acum_Amt_Pin = &PSLP.GPAU_YTD_AC_AMT
        Let #Acum_Hrs_Pin = &PSLP.GPAU_YTD_AC_UNITS

FROM PS_GPAU_PSLP_ED PSLP
WHERE
PSLP.GPAU_PAYSLIP_ID = $Payslip_ID
AND PSLP.EFFDT = $SECT_Effdt
AND PSLP.SEQ_NUM = #Sect_Seq_Num
AND (PSLP.GPAU_YTD_AC_AMT = #PIN_NUM_ACC OR PSLP.GPAU_YTD_AC_UNITS = #PIN_NUM_ACC)
End-SELECT

    
    if &PSLP.GPAU_YTD_AC_UNT_YN = 'Y'
      if #PIN_NUM_ACC = #Acum_Hrs_Pin
        let #Acum_Rslt_Hrs_Pslp = #CALC_RSLT_VAL_ACC
      end-if
    end-if

    if &PSLP.GPAU_YTD_AC_AMT_YN = 'Y'
      if #PIN_NUM_ACC = #Acum_Amt_Pin
        let #Acum_Rslt_Amt_Pslp = #CALC_RSLT_VAL_ACC
      end-if
    end-if
    
    if #Acum_Rslt_Hrs_Pslp <> 0
      print $DescrElement   (+1, {ColA}) BOLD
      Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Acum_Rslt_Hrs_Pslp (0, #ReturnCol)  edit '9999999.99'
      Let $Check1 = 1
    end-if
    
    if #Acum_Rslt_Amt_Pslp <> 0
      print $DescrElement   (+1, {ColA}) BOLD
      Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
      Let #ReturnCol = #ReturnCol - 3
      print #Acum_Rslt_Amt_Pslp (0, #ReturnCol)  edit '9999999.99'
      Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt_Pslp + #Acum_Rslt_Amt_TTL
      Let $Check1 = 1
    end-if
    
  end-if
    

  add 1 to #i
End-While

end-procedure


!Mobile Payslip - Start
!******************************************************************
!***    fetching element group
!******************************************************************
begin-procedure get-element-group

begin-SELECT DISTINCT
A.PIN_NUM   &PIN_NM

    LET #PARENT_PIN = &PIN_NM

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          !AND A_ED.EFFDT <= SYSDATE) 
AND A_ED.EFFDT <= $AsOfToday )
and A.PIN_ELEM_NUM = #ED_PinNum
end-SELECT

begin-SELECT DISTINCT
A.PIN_NUM   &PIN_NM_Y

    LET #PARENT_PIN_Y = &PIN_NM_Y

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          !AND A_ED.EFFDT <= SYSDATE)
AND A_ED.EFFDT <= $AsOfToday )
and A.PIN_ELEM_NUM = #AcumAmtPin
end-SELECT

end-procedure


begin-Procedure get_Accum_Data

begin-SELECT 
AC.EMPL_RCD_ACUM     &EmpRcdAc
AC.ACM_FROM_DT       &AcmFromDt
AC.ACM_THRU_DT       &AcmToDt
AC.SLICE_BGN_DT      &SliceBgnDt
AC.SLICE_END_DT      &SliceEndDt
AC.SEQ_NUM8          &SeqNo8
AC.USER_KEY1         &UsrKey1
AC.USER_KEY2         &UsrKey2
AC.USER_KEY3         &UsrKey3
AC.USER_KEY4         &UsrKey4
AC.USER_KEY5         &UsrKey5
AC.USER_KEY6         &UsrKey6
AC.CALC_RSLT_VAL     &CalcResultVal
AC.CALC_VAL          &CalcVal

FROM PS_GP_RSLT_ACUM AC

WHERE  AC.EMPLID = $Emplid
AND AC.CAL_RUN_ID = $Cal_Run_ID
and AC.EMPL_RCD = #Empl_Rcd
AND AC.GP_PAYGROUP = $GP_Paygroup
AND AC.CAL_ID =   $Cal_ID  
AND AC.ORIG_CAL_RUN_ID = &ORIG_CALID
!AND AC.RSLT_SEG_NUM = &RSLT_SEG_NUM
AND AC.PIN_NUM = #AcumAmtPin 
AND AC.SLICE_END_DT = &SEG_END_DT

end-SELECT

end-procedure  !get_Accum_Data


begin-procedure check-mob-custom-enabled

begin-select
GP_SS_MPSLP_DATA    &MbPslpOpt

FROM PS_GP_SS_PSLP_OPT
WHERE COUNTRY = 'AUS'
AND GP_PSLP_HDCPYOPTN = 'Y'
AND GP_SS_MPSLP_ENABLE = 'Y'
end-select

   if &MbPslpOpt = 'CUST'
     let $custEnabled = 'Y'
     #debug6 show '** GPAUPY01 : Custom mode enabled for Mobile Payslip'
   else
     let $custEnabled = 'N'
   end-if

end-procedure !check-mob-custom-enabled
!Mobile Payslip - End

#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Routines to format address
#Include 'gpaurc01.sqc'  !Select GP Aus Runcontrol Parameters procedure
#Include 'readxlat.sqc'  !Routines to read Translate table
! Include ePay SQC if ePay is installed
!ePay Implementation Changes begins here
#Include 'gpsspslp.sqc'     ! ePay SQC with ePay procedures
!ePay Implementation Changes here
