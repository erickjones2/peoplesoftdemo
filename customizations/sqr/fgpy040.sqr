!***********************************************************************
!  FGPY040:  Create Treasury Interface Work Files                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      *
!          $Date:  2016/04/14:15:08:28                                 !
!       $Release:  HR92                                                !
!           $Bug:  20695467                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment
#Include 'setup31.sqc'   !Printer and page-size initialization

!**********
begin-setup
!**********

LOAD-LOOKUP
    NAME=LOAD_DED_TBL
    TABLE='PS_DEDUCTION_TBL LOADDED'
    ROWS=1000
    QUIET
#IFDEF MICROSOFT
    KEY='LOADDED.PLAN_TYPE+LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST+LOADDED.GVT_REPORTING_CD+LOADDED.SPCL_PROCESS'
#ELSE
#IFDEF SYBASE
    KEY='LOADDED.PLAN_TYPE+LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST+LOADDED.GVT_REPORTING_CD+LOADDED.SPCL_PROCESS'
#ELSE
    KEY='LOADDED.PLAN_TYPE||LOADDED.DEDCD'
    RETURN_VALUE='LOADDED.GVT_DIST_DEST||LOADDED.GVT_REPORTING_CD||LOADDED.SPCL_PROCESS'
#END-IF
#END-IF
#IFDEF SQLBASE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2UNIX
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF ORACLE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= SYSDATE)'
#END-IF
#IFDEF INFORMIX
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= TODAY)'
#END-IF
#IFDEF SYBASE
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= GETDATE())'
#END-IF
#IFDEF MICROSOFT
    'WHERE=LOADDED.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEDUCTION_TBL LOADDED1 WHERE LOADDED.PLAN_TYPE = LOADDED1.PLAN_TYPE AND LOADDED.DEDCD = LOADDED1.DEDCD AND LOADDED1.EFFDT <= GETDATE())'
#END-IF

LOAD-LOOKUP
    NAME=LOAD_GENL_TBL
    TABLE='PS_GENL_DED_TBL LOADGENL'
    KEY='LOADGENL.DEDCD'
    ROWS=1000
    QUIET
#IFDEF SYBASE
    RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG+LOADGENL.GVT_PYMNT_SUMM'
#ELSE
#IFDEF MICROSOFT
   RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG+LOADGENL.GVT_PYMNT_SUMM'
#ELSE
    RETURN_VALUE='LOADGENL.GVT_PYMNT_RTNG||LOADGENL.GVT_PYMNT_SUMM'
#END-IF
#END-IF
#IFDEF SQLBASE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF DB2UNIX
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= CURRENT DATE)'
#END-IF
#IFDEF ORACLE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= SYSDATE)'
#END-IF
#IFDEF INFORMIX
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= TODAY)'
#END-IF
#IFDEF SYBASE
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= GETDATE())'
#END-IF
#IFDEF MICROSOFT
    'WHERE=LOADGENL.EFFDT = (SELECT MAX(EFFDT) FROM PS_GENL_DED_TBL LOADGENL1 WHERE LOADGENL.DEDCD = LOADGENL1.DEDCD AND LOADGENL1.EFFDT <= GETDATE())'
#END-IF

end-setup

!***********
begin-report
!***********

  do HouseKeeping
  do MainLine
  do Stdapi-Term

end-report

!***************************
begin-procedure HouseKeeping
!***************************

  move 'FGPY040' to $ReportID
  move 'Create Treasury Interface Work Files' to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  if $Prcs_Process_Instance = ''
      do Prompt-Parameters
  else
      do Select-Parameters
  end-if

  display '   Process Parameters : '
  display '              Run ID             -  ' noline
  display $RunID
  display '              Schedule Prefix    -  ' noline
  display $SchedPrefix
  display '              Include Off Cycle  -  ' noline
  if $InclOffCycle = 'Y'
      display 'Yes'
  else
      display 'No'
  end-if
  display '              Process Option     -  ' noline
  evaluate $ProcOptn
      when = 'E'
          display 'Extract'
      when = 'R'
          display 'Restart Extract'
      when-other
          display 'Assign Schedule Sequence'
  end-evaluate

  do Create-Arrays

  let $MapString       = 'AJPDC'
  let #DefaultSeq      = 1
  let $ForeignAddr     = 'N'
  let #StartForeignSeq = 899
  let #MaxSequence     = 999

  do Get-Balance-ID

end-procedure

!***********************
begin-procedure MainLine
!***********************

  do Read-Schedule-Cntl

  evaluate $ProcOptn
      when = 'S'
          if $SchedStatus <> '1'
              display '*** Incorrect Schedule Status ***'
              stop
          end-if

          do Clear-Detail-Files
          do Assign-Payment-Sequence
          break
      when-other
          if $ProcOptn = 'R'
              evaluate $SchedStatus
                  when = '0'
                  when = '1'
                      break
                  when-other
                      display '*** Incorrect Schedule Status ***'
                      stop
              end-evaluate

              do Clear-Check-Reference
              do Clear-Work-Files
          else
              if $SchedStatus <> '0'
                  display '*** Incorrect Schedule Status ***'
                  stop
              end-if
          end-if

          do Build-Calendar-Array

          do Extract-PayCheck-Data

          do Update-Change-Indicator
  end-evaluate

end-procedure

!************************************
begin-procedure Extract-PayCheck-Data
!************************************

  let #C = 0

  while #C < #Cal

      Get $Company $PayGroup $PayEndDt $OffCycle #CheckRefNo
      from Calendars(#C)
          Company PayGroup Pay_End_Dt OffCycle CheckRefNo

      let $run_company      = $Company
      let $run_paygroup     = $PayGroup
      let $run_pay_end_dt   = $PayEndDt

      do Format-DateTime($PayEndDt, $DispPayEndDate, {DEFDATE}, '', '')

      let $Msg1 = '   Processing Company      '|| $Company
      let $Msg2 = '              Paygroup     '|| $Paygroup
      let $Msg3 = '              Pay End Date '|| $DispPayEndDate
      let $Msg4 = '              Off Cycle    '|| $OffCycle

      display ' '
      display $Msg1
      display $Msg2
      display $Msg3
      display $Msg4
      display ' '

      do Write-Schedule-Reference

      do Find-Pay-Period

      let #PayCheckCount     = 0
      let #SalaryCheckCount  = 0
      let #SalaryEFTCount    = 0
      let #VendorCheckCount  = 0
      let #VendorEFTCount    = 0

      do Distribute-Check

      move #PayCheckCount    to $DispPayChekCount  99999999
      move #SalaryCheckCount to $DispSalCheckCount 99999999
      move #SalaryEFTCount   to $DispSalEFTCount   99999999
      move #VendorCheckCount to $DispVenCheckCount 99999999
      move #VendorEFTCount   to $DispVenEFTCount   99999999
      display '              Number of Pay Checks Processed                = ' noline
      display $DispPayChekCount
      display '              Number of Salary Check records created        = ' noline
      display $DispSalCheckCount
      display '              Number of Salary EFT records created          = ' noline
      display $DispSalEFTCount
      display '              Number of Miscellaneous Check records created = ' noline
      display $DispVenCheckCount
      display '              Number of Miscellaneous EFT records created   = ' noline
      display $DispVenEFTCount

      do Commit-Transaction

      add 1 to #C
  end-while

  do Update-Proc-Status ($SchedPrefix, '1')
  do Commit-Transaction

end-procedure

!**************************************
begin-procedure Assign-Payment-Sequence
!**************************************

  let #SchIdx = 1
  while #SchIdx < 5

      do Empty-Distribution-Code-Array

      get $SchedCode $ProcInd #MaxTASBETC_per_Sched #MaxTASBETC_per_Pymnt #MaxTASBETCAmt
      from SchedArray(#SchIdx)
          SchedCode ProcInd SchedMaxTASBETC PaymntMaxTASBETC MaxTASBETCAmt

      if $ProcInd = 'Y'
          evaluate $SchedCode
              when = 'A'
              when = 'B'
                  do Process-Salary-File
                  break
              when = 'C'
              when = 'D'
                  do Process-Vendor-File
                  break
          end-evaluate
      end-if

      add 1 to #SchIdx
      do Commit-Transaction
  end-while

  do Prepare-Vendor-Extract-Summary
  do Create-Schedule-Control

  do Update-Proc-Status ($SchedPrefix, '2')
  do Clear-Work-Files
  do Delete-Run-Control
  do Commit-Transaction

end-procedure

!***********************************
begin-procedure Build-Calendar-Array
!***********************************

  let #LastCheckRefNo = 0
  let #Cal = 0

begin-select
CAL.COMPANY
CAL.PAYGROUP
CAL.PAY_END_DT

  if #Cal < #CalendarArraySize

      add 1 to #LastCheckRefNo

      put &CAL.COMPANY &CAL.PAYGROUP &CAL.PAY_END_DT 'N' #LastCheckRefNo
      into Calendars(#Cal)
          Company PayGroup Pay_End_Dt OffCycle CheckRefNo

      add 1 to #Cal

      if $InclOffCycle = 'Y'
          let $Company = &CAL.COMPANY
          let $PayGroup = &CAL.PAYGROUP
          let $PayEndDt = &CAL.PAY_END_DT

          do Build-Off-Cycle-Calendar-Array
      end-if
  else
      display '***Error*** Calendar Array limit exceeded'
      stop
  end-if

FROM  PS_PAY_CALENDAR CAL
WHERE CAL.RUN_ID = $RunID
  AND CAL.PAY_CONFIRM_RUN  = 'Y'
ORDER BY COMPANY,
         PAYGROUP,
         PAY_END_DT
end-select

end-procedure

!*********************************************
begin-procedure Build-Off-Cycle-Calendar-Array
!*********************************************

begin-select distinct
OC_CHECK.PAY_END_DT

  if #Cal < #CalendarArraySize

      add 1 to #LastCheckRefNo

      put $Company $PayGroup &OC_CHECK.PAY_END_DT 'Y' #LastCheckRefNo
      into Calendars(#Cal)
          Company PayGroup Pay_End_Dt OffCycle CheckRefNo

      add 1 to #Cal

  else
      display '***Error*** Calendar Array limit exceeded'
      stop
  end-if

FROM PS_PAY_CHECK OC_CHECK
WHERE OC_CHECK.COMPANY = $Company
AND   OC_CHECK.PAYGROUP = $PayGroup
AND   OC_CHECK.PAY_END_DT <= $PayEndDt
AND   OC_CHECK.OFF_CYCLE = 'Y'
AND   OC_CHECK.PAYCHECK_STATUS = 'F'
AND   OC_CHECK.PAYCHECK_OPTION IN ('&','A','C')
AND   OC_CHECK.PAYCHECK_ADJUST = 'N'
AND  (OC_CHECK.GVT_SCHEDULE_NO IS NULL
   OR OC_CHECK.GVT_SCHEDULE_NO = ' ')
end-select

end-procedure

!*******************************
begin-procedure Distribute-Check
!*******************************

begin-select on-error=SQL-error
PCHECK.PAGE_NUM
PCHECK.LINE_NUM
PCHECK.SEPCHK
PCHECK.EMPLID
PCHECK.EMPL_RCD
PCHECK.PAYCHECK_STATUS
PCHECK.PAYCHECK_OPTION
PCHECK.BUSINESS_UNIT
PCHECK.DEPTID
PCHECK.NET_PAY
PCHECK.COUNTRY
PJOB.JOBCODE
PJOB.POSITION_NBR

  add 1 to #PayCheckCount

  move &PCHECK.PAGE_NUM         to #PageNum
  move &PCHECK.LINE_NUM         to #LineNum
  move &PCHECK.SEPCHK           to #SepChk
  move &PCHECK.EMPLID           to $EmplID
  move &PCHECK.EMPL_RCD         to #EmplRcd
  move &PCHECK.PAYCHECK_STATUS  to $PayCheckStatus
  move &PCHECK.PAYCHECK_OPTION  to $PayCheckOption
  move &PCHECK.BUSINESS_UNIT    to $Business_Unit
  move &PCHECK.DEPTID           to $DeptID
  move &PCHECK.NET_PAY          to #NetPay
  move &PCHECK.COUNTRY          to $Country
  move &PJOB.JOBCODE            to $JobCode
  move &PJOB.POSITION_NBR       to $PositionNbr

  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  let $PayCheckDtl = '   Company: ' || $Company || ', Paygroup: ' || $PayGroup || ', Pay End Date: ' || $PayEndDt || ', Off Cycle: ' || $OffCycle ||
                     ', Page Num: ' || $PageNum || ', Line Num: ' || $LineNum  || ', SepChk: ' || $SepChk

  if rtrim($Country,' ') = 'USA'
      let $ForeignAddr = 'N'
  else
      let $ForeignAddr = 'Y'
  end-if

  do Get-Mapping-Level

  if substr($SchedProcString, 1, 1) = 'Y'
    or substr($SchedProcString, 2, 1) = 'Y'

      do Process-NetPay
  end-if

  if substr($SchedProcString, 3, 1) = 'Y'
    or substr($SchedProcString, 4, 1) = 'Y'

      do Process-Deductions
      do Process-Taxes
  end-if

FROM PS_PAY_CHECK  PCHECK
   , PS_JOB        PJOB
WHERE PCHECK.COMPANY        = $Company
AND   PCHECK.PAYGROUP       = $PayGroup
AND   PCHECK.PAY_END_DT     = $PayEndDt
AND   PCHECK.OFF_CYCLE      = $OffCycle
AND   PCHECK.PAYCHECK_STATUS = 'F'
AND   PCHECK.PAYCHECK_OPTION IN ('&','A','C')
AND   PCHECK.PAYCHECK_ADJUST = 'N'
AND  (PCHECK.GVT_SCHEDULE_NO IS NULL
   OR PCHECK.GVT_SCHEDULE_NO = ' ')
AND   PJOB.EMPLID           = PCHECK.EMPLID
AND   PJOB.EMPL_RCD         = PCHECK.EMPL_RCD
AND   PJOB.EFFDT            =
     (SELECT MAX(PJOB1.EFFDT) FROM PS_JOB PJOB1
      WHERE PJOB1.EMPLID    = PJOB.EMPLID
      AND   PJOB1.EMPL_RCD  = PJOB.EMPL_RCD
      AND   PJOB1.EFFDT    <= PCHECK.PAY_END_DT)
AND   PJOB.EFFSEQ           =
     (SELECT MAX(PJOB2.EFFSEQ) FROM PS_JOB PJOB2
      WHERE PJOB2.EMPLID    = PJOB.EMPLID
      AND   PJOB2.EMPL_RCD  = PJOB.EMPL_RCD
      AND   PJOB2.EFFDT     = PJOB.EFFDT)
end-select

end-procedure

!******************************
begin-procedure Find-Pay-Period
!******************************

begin-select
PAYPER.PAY_PERIOD

  let #PayPeriod = &PAYPER.PAY_PERIOD

FROM  PS_PAY_CALENDAR PAYPER
WHERE PAYPER.COMPANY      = $Company
AND   PAYPER.PAYGROUP     = $PayGroup
AND   PAYPER.PAY_END_DT   =
      (SELECT MAX(PAYPER1.PAY_END_DT) FROM PS_PAY_CALENDAR PAYPER1
       WHERE PAYPER.COMPANY       = PAYPER1.COMPANY
       AND   PAYPER.PAYGROUP      = PAYPER1.PAYGROUP
       AND   PAYPER1.PAY_END_DT  <= $PayEndDt)
end-select

end-procedure

!*****************************
begin-procedure Process-NetPay
!*****************************

  do Get-NetPay-TAS-BETC

  let #PayDistAmt = 0

  evaluate $PayCheckOption
      when = 'A'
          do Issue-From-Pay-Distribution
          break

      when = 'C'
          do Issue-From-Check
          break

      when = '&'
          do Issue-From-Pay-Distribution
          do Issue-From-Check
  end-evaluate

end-procedure

!*******************************
begin-procedure Issue-From-Check
!*******************************

  if substr($SchedProcString, 1, 1) = 'Y'

      let $SchedCode = 'A'
      let #Priority  = 1
      let #DistSeq   = 1
      let $BankCd    = ' '
      let $AcctNum   = ' '
      let $AcctType  = ' '
      let #RemitAmtCr = 0
      let #RemitAmtDr = #NetPay - #PayDistAmt

      if $CreditPaymnt = 'Y'
          let $DispMsg = $PayCheckDtl || ' Net Pay record bypassed - BETC code: ' || $BETC || ' is either Payment Adjustment or Collection.'
          display $DispMsg
      else
          if #RemitAmtDr >= 0
              do Write-Salary-Work
          else
              let $DispMsg = $PayCheckDtl || ' Net Pay record bypassed - amount is negative.'
              display $DispMsg
          end-if
      end-if
  end-if

end-procedure

!******************************************
begin-procedure Issue-From-Pay-Distribution
!******************************************

  if substr($SchedProcString, 2, 1) = 'Y'

      do Get-Pay-Distribution
  else
      do Skip-Pay-Distribution
  end-if

end-procedure

!***********************************
begin-procedure Get-Pay-Distribution
!***********************************

begin-select on-error=SQL-error
PDIST.PRIORITY
PDIST.ACCOUNT_TYPE
PDIST.ACCOUNT_NUM
PDIST.BANK_CD
PDIST.DEPOSIT_AMOUNT

  let $SchedCode = 'B'
  let #Priority  = &PDIST.PRIORITY
  let #DistSeq   = 1
  let $BankCd    = &PDIST.BANK_CD
  let $AcctNum   = &PDIST.ACCOUNT_NUM
  let $AcctType  = &PDIST.ACCOUNT_TYPE
  let #RemitAmtCr = 0
  let #RemitAmtDr = &PDIST.DEPOSIT_AMOUNT

  if $CreditPaymnt = 'Y'
      let $DispMsg = $PayCheckDtl || ' Pay Distribution record bypassed - BETC code: ' || $BETC || ' is either Payment Adjustment or Collection.'
      display $DispMsg
  else
      if #RemitAmtDr >= 0
          let #PayDistAmt = #PayDistAmt + #RemitAmtDr
          do Write-Salary-Work
      else
          let $DispMsg = $PayCheckDtl || ' Pay Distribution record bypassed - amount is negative.'
          display $DispMsg
      end-if
  end-if

FROM PS_PAY_DISTRIBUTN PDIST
WHERE PDIST.COMPANY       = $Company
AND   PDIST.PAYGROUP      = $Paygroup
AND   PDIST.PAY_END_DT    = $PayEndDt
AND   PDIST.OFF_CYCLE     = $OffCycle
AND   PDIST.PAGE_NUM      = #PageNum
AND   PDIST.LINE_NUM      = #LineNum
AND   PDIST.SEPCHK        = #SepChk
AND   PDIST.ACCOUNT_TYPE <> '$'
end-select

end-procedure

!************************************
begin-procedure Skip-Pay-Distribution
!************************************

begin-select on-error=SQL-error
PDISTx.DEPOSIT_AMOUNT

  let #PayDistAmt = #PayDistAmt + &PDISTx.DEPOSIT_AMOUNT

FROM PS_PAY_DISTRIBUTN PDISTx
WHERE PDISTx.COMPANY       = $Company
AND   PDISTx.PAYGROUP      = $Paygroup
AND   PDISTx.PAY_END_DT    = $PayEndDt
AND   PDISTx.OFF_CYCLE     = $OffCycle
AND   PDISTx.PAGE_NUM      = #PageNum
AND   PDISTx.LINE_NUM      = #LineNum
AND   PDISTx.SEPCHK        = #SepChk
AND   PDISTx.ACCOUNT_TYPE <> '$'
end-select

end-procedure

!****************************
begin-procedure Process-Taxes
!****************************

begin-select
PTAX.STATE
PTAX.LOCALITY
PTAX.TAX_CLASS
SUM(PTAX.TAX_CUR) &PTAX.TAX_CUR

    let $State        = &PTAX.STATE
    let $Locality     = &PTAX.LOCALITY
    let $TaxClass     = &PTAX.TAX_CLASS
    let #TaxAmount    = &PTAX.TAX_CUR
    let $ProcTaxClass = 'H'

    do Find-Tax-Routing

FROM PS_PAY_TAX PTAX
WHERE PTAX.COMPANY         = $Company
AND   PTAX.PAYGROUP        = $PayGroup
AND   PTAX.PAY_END_DT      = $PayEndDt
AND   PTAX.OFF_CYCLE       = $OffCycle
AND   PTAX.PAGE_NUM        = #PageNum
AND   PTAX.LINE_NUM        = #LineNum
AND   PTAX.SEPCHK          = #SepChk
AND   PTAX.TAX_CLASS       = 'H'
AND  (PTAX.GVT_SCHEDULE_NO IS NULL
   OR PTAX.GVT_SCHEDULE_NO = ' ')
GROUP BY PTAX.COMPANY, PTAX.PAYGROUP, PTAX.PAY_END_DT, PTAX.OFF_CYCLE, PTAX.PAGE_NUM, PTAX.LINE_NUM,
         PTAX.SEPCHK, PTAX.STATE, PTAX.LOCALITY, PTAX.TAX_CLASS
end-select

end-procedure

!*******************************
begin-procedure Find-Tax-Routing
!*******************************

begin-select
ROUTE_TAX.BANK_CD
ROUTE_TAX.ACCOUNT_NUM
ROUTE_TAX.ACCOUNT_TYPE
ROUTE_TAX.GVT_PYMNT_METHOD
ROUTE_TAX.GVT_PAYEE_ID_NO
ROUTE_TAX.GVT_PAYEE_NAME

  let $PymntMethod   = &ROUTE_TAX.GVT_PYMNT_METHOD

  if substr($SchedProcString, 3, 1) = 'Y'
    and $PymntMethod = 'C'

      do Prepare-Tax-Data
      let $SchedCode = 'C'
      let $BankCd    = ' '
      let $AcctNum   = ' '
      let $AcctType  = ' '

      do Write-Vendor-Work
  end-if

  if substr($SchedProcString, 4, 1) = 'Y'
    and $PymntMethod = 'E'

      do Prepare-Tax-Data
      let $SchedCode = 'D'
      let $BankCd    = &ROUTE_TAX.BANK_CD
      let $AcctNum   = &ROUTE_TAX.ACCOUNT_NUM
      let $AcctType  = &ROUTE_TAX.ACCOUNT_TYPE

      do Write-Vendor-Work
  end-if

FROM  PS_GVT_TAX_ROUTING ROUTE_TAX

WHERE ROUTE_TAX.COMPANY    = $Company
AND   ROUTE_TAX.STATE      = $State
AND   ROUTE_TAX.LOCALITY   = $Locality
AND   ROUTE_TAX.EFF_STATUS = 'A'
AND   ROUTE_TAX.EFFDT      = (SELECT MAX(ROUTE_TAX1.EFFDT)
                              FROM   PS_GVT_TAX_ROUTING ROUTE_TAX1
                              WHERE  ROUTE_TAX1.COMPANY    = ROUTE_TAX.COMPANY
                              AND    ROUTE_TAX1.STATE      = ROUTE_TAX.STATE
                              AND    ROUTE_TAX1.LOCALITY   = ROUTE_TAX.LOCALITY
                              AND    ROUTE_TAX1.EFFDT      <= $AsOfToday)

end-select

end-procedure

!*******************************
begin-procedure Prepare-Tax-Data
!*******************************

  do Get-Tax-TAS-BETC
  let $TaxCompany        = $Company
  let $SchedRecType      = 'T'
  let $PlanType          = ' '
  let $DedCd             = ' '
  let $GarnID            = ' '
  let $GarnType          = ' '
  let $DedDistCd         = ' '
  let $ReportingCd       = ' '
  let $PaymentRouting    = 'D'
  let $PaymentSummary    = 'D'
  let $RemitFreq         = ' '
  let $PayFreq           = ' '
  let #Amount            = #TaxAmount

  evaluate $CreditPaymnt
      when = 'Y'
          let $DispMsg = $PayCheckDtl || ' Tax record - State: ' || $State || ', Locality: ' || $Locality || ', Tax Class: ' || $TaxClass || ', BETC code: ' || $BETC ||
                         ' is either Payment Adjustment or Collection.'
          display $DispMsg

          if #TaxAmount > 0
              let #RemitAmtCr = #TaxAmount
              let #RemitAmtDr = 0
          else
              let #RemitAmtCr = 0
              let #RemitAmtDr = #TaxAmount * -1
          end-if
          break

      when-other
          if #TaxAmount > 0
              let #RemitAmtCr = 0
              let #RemitAmtDr = #TaxAmount
          else
              let #RemitAmtCr = #TaxAmount * -1
              let #RemitAmtDr = 0
          end-if
  end-evaluate

end-procedure

!*********************************
begin-procedure Process-Deductions
!*********************************

begin-select
PDED.PLAN_TYPE
PDED.DEDCD
SUM(PDED.DED_CUR) &PDED.DED_CUR

  let $PlanType    = &PDED.PLAN_TYPE
  let $DedCd       = &PDED.DEDCD
  let #DedAmount   = &PDED.DED_CUR

  let $LoadDedKey  = &PDED.PLAN_TYPE||&PDED.DEDCD

  LOOKUP LOAD_DED_TBL $LoadDedKey $LoadDedReturn

  let $DistDest    = substr($LoadDedReturn,1,1)
  let $ReportingCd = substr($LoadDedReturn,2,2)
  let $SpclProcess = substr($LoadDedReturn,4,1)

  if $SpclProcess = 'G'
      let $GarnProcess = 'Y'
  else
      let $GarnProcess = 'N'
  end-if

  if $DistDest = 'T'

      if $GarnProcess = 'N' and $PlanType = '00'
          do Process-General-Deduction
      end-if

      if $GarnProcess = 'Y'
          do Process-Garnishments
      end-if
  end-if

FROM PS_PAY_DEDUCTION PDED
WHERE PDED.COMPANY    = $Company
AND   PDED.PAYGROUP   = $PayGroup
AND   PDED.PAY_END_DT = $PayEndDt
AND   PDED.OFF_CYCLE  = $OffCycle
AND   PDED.PAGE_NUM   = #PageNum
AND   PDED.LINE_NUM   = #LineNum
AND   PDED.SEPCHK     = #SepChk
AND   PDED.DED_CLASS IN ('A','B')
AND  (PDED.GVT_SCHEDULE_NO IS NULL
   OR PDED.GVT_SCHEDULE_NO = ' ')
GROUP BY PDED.COMPANY, PDED.PAYGROUP, PDED.PAY_END_DT, PDED.OFF_CYCLE, PDED.PAGE_NUM, PDED.LINE_NUM,
         PDED.SEPCHK, PDED.PLAN_TYPE, PDED.DEDCD
end-select

end-procedure

!***********************************
begin-procedure Process-Garnishments
!***********************************

begin-select
GARN_SPEC.GARNID
GARN_SPEC.GVT_PYMNT_METHOD
GARN_SPEC.BANK_CD
GARN_SPEC.ACCOUNT_NUM
GARN_SPEC.ACCOUNT_TYPE
GARN_SPEC.GVT_PAYEE_ID_NO
GARN_SPEC.GVT_PAYEE_NAME
GARN_SPEC.GARN_TYPE
GARN_PAY.DEDUCT_AMT

  let $GarnID        = &GARN_SPEC.GARNID
  let $GarnType      = &GARN_SPEC.GARN_TYPE
  let #GarnDedAmount = &GARN_PAY.DEDUCT_AMT
  let $PymntMethod   = &GARN_SPEC.GVT_PYMNT_METHOD

  if substr($SchedProcString, 3, 1) = 'Y'
    and $PymntMethod = 'C'

      do Prepare-Garnishment-Data
      let $SchedCode = 'C'
      let $BankCd    = ' '
      let $AcctNum   = ' '
      let $AcctType  = ' '

      if $CreditPaymnt = 'Y'
          let $DispMsg = $PayCheckDtl || ' Garnishment record bypassed - Garn ID: ' || $GarnID || ', BETC code: ' || $BETC ||
                         ' is either Payment Adjustment or Collection.'
          display $DispMsg
      else
          if #RemitAmtDr >= 0
              do Write-Vendor-Work
          else
              let $DispMsg = $PayCheckDtl || ' Garnishment record bypassed - Garn ID: ' || $GarnID || ', amount is negative.'
              display $DispMsg
          end-if
      end-if
  end-if

  if substr($SchedProcString, 4, 1) = 'Y'
    and $PymntMethod = 'E'

      do Prepare-Garnishment-Data
      let $SchedCode = 'D'
      let $BankCd    = &GARN_SPEC.BANK_CD
      let $AcctNum   = &GARN_SPEC.ACCOUNT_NUM
      let $AcctType  = &GARN_SPEC.ACCOUNT_TYPE

      if $CreditPaymnt = 'Y'
          let $DispMsg = $PayCheckDtl || ' Garnishment record bypassed - Garn ID: ' || $GarnID || ', BETC code: ' || $BETC ||
                         ' is either Payment Adjustment or Collection.'
          display $DispMsg
      else
          if #RemitAmtDr >= 0
              do Write-Vendor-Work
          else
              let $DispMsg = $PayCheckDtl || ' Garnishment record bypassed - Garn ID: ' || $GarnID || ', amount is negative.'
              display $DispMsg
          end-if
      end-if
  end-if

FROM  PS_GVT_GARN_SPEC GARN_SPEC
    , PS_PAY_GARNISH GARN_PAY
WHERE GARN_PAY.COMPANY    = $Company
AND   GARN_PAY.PAYGROUP   = $PayGroup
AND   GARN_PAY.PAY_END_DT = $PayEndDt
AND   GARN_PAY.OFF_CYCLE  = $OffCycle
AND   GARN_PAY.PAGE_NUM   = #PageNum
AND   GARN_PAY.LINE_NUM   = #LineNum
AND   GARN_PAY.SEPCHK     = #SepChk
AND   GARN_SPEC.EMPLID    = $EmplID
AND   GARN_SPEC.COMPANY   = GARN_PAY.COMPANY
AND   GARN_SPEC.GARNID    = GARN_PAY.GARNID
end-select

end-procedure


!***************************************
begin-procedure Prepare-Garnishment-Data
!***************************************

  do Get-Ded-TAS-BETC
  let $TaxCompany        = ' '
  let $SchedRecType      = 'G'
  let $State             = ' '
  let $Locality          = ' '
  let $TaxClass          = ' '
  let $DedDistCd         = ' '
  let $PaymentRouting    = 'E'
  let $PaymentSummary    = 'E'
  let $RemitFreq         = ' '
  let $PayFreq           = ' '
  let #RemitAmtCr        = 0
  let #RemitAmtDr        = #GarnDedAmount
  let #Amount            = #GarnDedAmount

end-procedure

!****************************************
begin-procedure Process-General-Deduction
!****************************************

  LOOKUP LOAD_GENL_TBL $DedCd $LoadGenlDedReturn

  let $PaymentRouting = substr($LoadGenlDedReturn,1,1)
  let $PaymentSummary = substr($LoadGenlDedReturn,2,1)

  evaluate $PaymentRouting
      when = 'E'
          do Distribute-Payment-EE-Level
          break

      when = 'D'
          evaluate $PaymentSummary
              when = 'D'
              when = 'E'
                  do Read-EE-Distribution-Code
                  do Read-Gen-Ded-Routing-Data
          end-evaluate
  end-evaluate

end-procedure

!******************************************
begin-procedure Distribute-Payment-EE-Level
!******************************************

begin-select
GENL_DEDUCT.GVT_DED_DIST_CD
GENL_DEDUCT.GVT_PYMNT_METHOD
GENL_DEDUCT.BANK_CD
GENL_DEDUCT.ACCOUNT_NUM
GENL_DEDUCT.ACCOUNT_TYPE

  let $DedDistCd   = &GENL_DEDUCT.GVT_DED_DIST_CD
  let $PymntMethod = &GENL_DEDUCT.GVT_PYMNT_METHOD

  if substr($SchedProcString, 3, 1) = 'Y'
    and $PymntMethod = 'C'

      do Prepare-Deduction-Data
      let $SchedCode = 'C'
      let $BankCd    = ' '
      let $AcctNum   = ' '
      let $AcctType  = ' '

      if $CreditPaymnt = 'Y'
          let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', BETC code: ' || $BETC ||
                         ' is either Payment Adjustment or Collection.'
          display $DispMsg
      else
          if #RemitAmtDr >= 0
              do Write-Vendor-Work
          else
              let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', amount is negative.'
              display $DispMsg
          end-if
      end-if
  end-if

  if substr($SchedProcString, 4, 1) = 'Y'
    and $PymntMethod = 'E'

      do Prepare-Deduction-Data
      let $SchedCode = 'D'
      let $BankCd    = &GENL_DEDUCT.BANK_CD
      let $AcctNum   = &GENL_DEDUCT.ACCOUNT_NUM
      let $AcctType  = &GENL_DEDUCT.ACCOUNT_TYPE

      if $CreditPaymnt = 'Y'
          let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', BETC code: ' || $BETC ||
                         ' is either Payment Adjustment or Collection.'
          display $DispMsg
      else
          if #RemitAmtDr >= 0
              do Write-Vendor-Work
          else
              let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', amount is negative.'
              display $DispMsg
          end-if
      end-if
  end-if

FROM  PS_GENL_DEDUCTION GENL_DEDUCT
WHERE GENL_DEDUCT.EMPLID    = $EmplID
AND   GENL_DEDUCT.COMPANY   = $Company
AND   GENL_DEDUCT.DEDCD     = $DedCd
AND   GENL_DEDUCT.EFFDT     = (SELECT MAX(GENL_DEDUCT1.EFFDT)
                               FROM  PS_GENL_DEDUCTION GENL_DEDUCT1
                               WHERE GENL_DEDUCT1.EMPLID    = GENL_DEDUCT.EMPLID
                               AND   GENL_DEDUCT1.COMPANY   = GENL_DEDUCT.COMPANY
                               AND   GENL_DEDUCT1.DEDCD     = GENL_DEDUCT.DEDCD
                               AND   GENL_DEDUCT1.EFFDT    <= $AsOfToday)
end-select

end-procedure

!*************************************
begin-procedure Prepare-Deduction-Data
!*************************************

  do Get-Ded-TAS-BETC
  let $TaxCompany        = ' '
  let $SchedRecType      = 'D'
  let $State             = ' '
  let $Locality          = ' '
  let $TaxClass          = ' '
  let $GarnID            = ' '
  let $GarnType          = ' '
  let $RemitFreq         = ' '
  let $PayFreq           = ' '
  let #RemitAmtCr        = 0
  let #RemitAmtDr        = #DedAmount
  let #Amount            = #DedAmount

end-procedure

!****************************************
begin-procedure Read-EE-Distribution-Code
!****************************************

  let $EmpDistCd = ''

begin-select
EE_DEDUCT.GVT_DED_DIST_CD
EE_DEDUCT.GVT_PYMNT_METHOD

  let $EmpDistCd = &EE_DEDUCT.GVT_DED_DIST_CD

  if $EmpDistCd = ''
      let $EmpDistCd = &EE_DEDUCT.GVT_PYMNT_METHOD
  end-if

  let $DedDistCd = $EmpDistCd

FROM  PS_GENL_DEDUCTION EE_DEDUCT
WHERE EE_DEDUCT.EMPLID    = $EmplID
AND   EE_DEDUCT.COMPANY   = $Company
AND   EE_DEDUCT.DEDCD     = $DedCd
AND   EE_DEDUCT.EFFDT     =
      (SELECT MAX(EE_DEDUCT1.EFFDT) FROM  PS_GENL_DEDUCTION EE_DEDUCT1
       WHERE EE_DEDUCT1.EMPLID    = EE_DEDUCT.EMPLID
       AND   EE_DEDUCT1.COMPANY   = EE_DEDUCT.COMPANY
       AND   EE_DEDUCT1.DEDCD     = EE_DEDUCT.DEDCD
       AND   EE_DEDUCT1.EFFDT    <= $PayEndDt)
end-select

end-procedure

!****************************************
begin-procedure Read-Gen-Ded-Routing-Data
!****************************************

begin-select
DIST_SUMM.GVT_PYMNT_METHOD
DIST_SUMM.GVT_PAYEE_ID_NO
DIST_SUMM.GVT_PAYEE_NAME
DIST_SUMM.BANK_CD,
DIST_SUMM.ACCOUNT_NUM,
DIST_SUMM.ACCOUNT_TYPE,
DIST_SUMM.REMIT_FREQUENCY

  let $PymntMethod      = &DIST_SUMM.GVT_PYMNT_METHOD
  let $BankCd           = &DIST_SUMM.BANK_CD
  let $AcctNum          = &DIST_SUMM.ACCOUNT_NUM
  let $AcctType         = &DIST_SUMM.ACCOUNT_TYPE
  let $RemitFreq        = &DIST_SUMM.REMIT_FREQUENCY

  let #RemitAmtCr  = 0
  let #RemitAmtDr  = #DedAmount
  let #Amount      = #DedAmount
  do Find-Pay-Frequency

  if $RemitFreq = 'M'
      if $PayFreq = 'B'
          do Find-The-Pay-Period

          if #PayPeriod = 1
              let #RemitAmtDr  = #MTDAmount
          else
              let #RemitAmtDr  = 0
          end-if
      end-if
  end-if

  do Get-Ded-TAS-BETC
  let $SchedRecType      = 'D'
  let $TaxCompany        = ' '
  let $State             = ' '
  let $Locality          = ' '
  let $TaxClass          = ' '
  let $GarnID            = ' '
  let $GarnType          = ' '

  if substr($SchedProcString, 3, 1) = 'Y'
    and $PymntMethod = 'C'

      let $SchedCode = 'C'
      let $BankCd    = ' '
      let $AcctNum   = ' '
      let $AcctType  = ' '

      do Determine-Deduction-Option
  end-if

  if substr($SchedProcString, 4, 1) = 'Y'
    and $PymntMethod = 'E'

      let $SchedCode = 'D'
      do Determine-Deduction-Option
  end-if

FROM  PS_GVT_DED_DIST DIST_SUMM

WHERE DIST_SUMM.DEDCD           = $DedCd
AND   DIST_SUMM.GVT_DED_DIST_CD = $EmpDistCd
AND   DIST_SUMM.EFF_STATUS      = 'A'
AND   DIST_SUMM.EFFDT           =
      (SELECT MAX(DIST_SUMM1.EFFDT)
       FROM  PS_GVT_DED_DIST DIST_SUMM1
       WHERE DIST_SUMM1.DEDCD           = DIST_SUMM.DEDCD
       AND   DIST_SUMM1.GVT_DED_DIST_CD = DIST_SUMM.GVT_DED_DIST_CD
       AND   DIST_SUMM1.EFFDT          <= $AsOfToday)
end-select

end-procedure

!*****************************************
begin-procedure Determine-Deduction-Option
!*****************************************

  let #CurDedAmount = #RemitAmtDr

  evaluate $PaymentSummary
      when = 'D'
          evaluate $CreditPaymnt
              when = 'Y'
                  let $DispMsg = $PayCheckDtl || ' Deduction record - Deduction Code: ' || $DedCd || ', BETC code: ' || $BETC ||
                                 ' is either Payment Adjustment or Collection.'
                  display $DispMsg

                  if #CurDedAmount > 0
                      let #RemitAmtCr = #CurDedAmount
                      let #RemitAmtDr = 0
                  else
                      let #RemitAmtCr = 0
                      let #RemitAmtDr = #CurDedAmount * -1
                  end-if
                  break

              when-other
                  if #CurDedAmount > 0
                      let #RemitAmtCr = 0
                      let #RemitAmtDr = #CurDedAmount
                  else
                      let #RemitAmtCr = #CurDedAmount * -1
                      let #RemitAmtDr = 0
                  end-if
          end-evaluate

          do Write-Vendor-Work
          break

      when = 'E'
          if $CreditPaymnt = 'Y'
              let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', BETC code: ' || $BETC ||
                             ' is either Payment Adjustment or Collection.'
              display $DispMsg
          else
              if #RemitAmtDr >= 0
                  do Write-Vendor-Work
              else
                  let $DispMsg = $PayCheckDtl || ' Deduction record bypassed - Deduction Code: ' || $DedCd || ', amount is negative.'
                  display $DispMsg
              end-if
          end-if
          break

      when-other
          break
  end-evaluate

end-procedure

!*********************************
begin-procedure Find-Pay-Frequency
!*********************************

  let $PayFreq = 'B'

begin-select
FREQ.PAY_FREQUENCY

  let $PayFreq = &FREQ.PAY_FREQUENCY

FROM PS_GENL_DED_FREQ FREQ
WHERE FREQ.DEDCD   = $DedCd
AND   FREQ.EFFDT   =
      (SELECT MAX(FREQ1.EFFDT) FROM PS_GENL_DED_FREQ FREQ1
       WHERE FREQ.DEDCD      = FREQ1.DEDCD
       AND   FREQ1.EFFDT    <= $PayEndDt)
end-select

end-procedure

!**********************************
begin-procedure Find-The-Pay-Period
!**********************************

  if #PayPeriod = 1
      do Find-Prior-Period
  else
      let #MTDAmount = 0
  end-if

end-procedure

!********************************
begin-procedure Find-Prior-Period
!********************************

  let $NoPriorPeriod = 'Y'

begin-select
ABAL.BALANCE_YEAR
ABAL.BALANCE_PERIOD

      let $NoPriorPeriod   = 'N'
      let #BalanceYear     = &ABAL.BALANCE_YEAR
      let #BalancePeriod   = &ABAL.BALANCE_PERIOD

FROM PS_PAY_CAL_BAL_ID ABAL
WHERE ABAL.COMPANY    = $Company
AND   ABAL.PAYGROUP   = $PayGroup
AND   ABAL.BALANCE_ID = $BalanceID
AND   ABAL.PAY_END_DT =
     (SELECT MAX(BBAL.PAY_END_DT) FROM PS_PAY_CAL_BAL_ID BBAL
      WHERE ABAL.COMPANY     = BBAL.COMPANY
      AND   ABAL.PAYGROUP    = BBAL.PAYGROUP
      AND   BBAL.PAY_END_DT  < $PayEndDt)
end-select

  if $NoPriorPeriod = 'N'
      do Find-Remit-Bal-Amount
  else
      let #MTDAmount = 0
  end-if

end-procedure

!************************************
begin-procedure Find-Remit-Bal-Amount
!************************************

  let #MTDAmount = 0

begin-select
DBAL.DED_MTD

  let #MTDAmount = &DBAL.DED_MTD

FROM PS_DEDUCTION_BAL DBAL
WHERE DBAL.EMPLID            = $EmplID
AND   DBAL.COMPANY           = $Company
AND   DBAL.BALANCE_YEAR      = #BalanceYear
AND   DBAL.BALANCE_PERIOD    = #BalancePeriod
AND   DBAL.PLAN_TYPE         = $PlanType
AND   DBAL.DEDCD             = $DedCd
end-select

end-procedure

!****************************
begin-procedure Create-Arrays
!****************************

  let $SchedProcString = ''

  let #SchedArraySize = 5
  Create-array name=SchedArray  Size = 5
               field=SchedCode:Char
               field=ProcInd:Char
               field=SchedMaxTASBETC:Number
               field=PaymntMaxTASBETC:Number
               field=MaxTASBETCAmt:Number

  let #CalendarArraySize=200
  Create-array name=Calendars  Size = 200
               field=Company:Char
               field=PayGroup:Char
               field=Pay_End_Dt:Char
               field=OffCycle:Char
               field=CheckRefNo:Number

  let #DistributeSize=800
  Create-array name=DistCodeArray Size = 800
               field=GWAString:Char
               field=BETC:Char
               field=FundCd:Char
               field=DedDistCd:Char
               field=ReportingCd:Char
               field=RemitFreq:Char
               field=PayFreq:Char
               field=GarnType:Char
               field=BankCd:Char
               field=AcctNum:Char
               field=AcctType:Char
               field=RemitAmtCr:Number
               field=RemitAmtDr:Number
               field=Amount:Number
               field=PymntSeq:Number

  let #TASBETCSize=1000
  Create-array name=TASBETCArray Size = 1000
               field=GWAString:Char
               field=BETC:Char
               field=TotalAmt:Number

end-procedure

!*********************************
begin-procedure Read-Schedule-Cntl
!*********************************

  let $SchedProcString = ''

begin-select
SCHEDGRP.GVT_SCHED_CODE
SCHEDGRP.GVT_SCHED_PROC_IND
SCHEDCTL.GVT_SCHED_MAX_TB
SCHEDCTL.GVT_PYMNT_MAX_TB
SCHEDCTL.GVT_MAX_AMT_TB

  do Set-Sched-Index (&SCHEDGRP.GVT_SCHED_CODE, #SchIdx)

  put &SCHEDGRP.GVT_SCHED_CODE &SCHEDGRP.GVT_SCHED_PROC_IND &SCHEDCTL.GVT_SCHED_MAX_TB &SCHEDCTL.GVT_PYMNT_MAX_TB &SCHEDCTL.GVT_MAX_AMT_TB
  into SchedArray(#SchIdx)
      SchedCode ProcInd SchedMaxTASBETC PaymntMaxTASBETC MaxTASBETCAmt

  let $SchedProcString = $SchedProcString || &SCHEDGRP.GVT_SCHED_PROC_IND

FROM PS_GVT_SCHED_GROUP SCHEDGRP
   , PS_GVT_PAM_SYS_CTL SCHEDCTL
WHERE SCHEDGRP.GVT_SCHED_PREFIX = $SchedPrefix
AND   SCHEDGRP.GVT_SCHED_CODE = SCHEDCTL.GVT_SCHED_CODE
ORDER BY SCHEDGRP.GVT_SCHED_CODE
end-select

end-procedure

!*****************************************************
begin-procedure Set-Sched-Index ($SchedCode, :#SchIdx)
!*****************************************************

  evaluate $SchedCode
      when = 'A'
          let #SchIdx = 1
          break
      when = 'B'
          let #SchIdx = 2
          break
      when = 'C'
          let #SchIdx = 3
          break
      when = 'D'
          let #SchIdx = 4
  end-evaluate

end-procedure

!************************************
begin-procedure Clear-Check-Reference
!************************************

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Check-Reference'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_REF' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_SCHED_REF
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

end-procedure

!*******************************
begin-procedure Clear-Work-Files
!*******************************

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Work-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_SAL_WRK' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_PAM_SAL_WRK
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL


  let $err-statement1 = 'FGPY040, Delete Error - Clear-Work-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_WRK' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_PAM_VEN_WRK
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

end-procedure

!*********************************
begin-procedure Clear-Detail-Files
!*********************************

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_CNTRL' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_SCHED_CNTRL
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_SAL_DTL' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_PAM_SAL_DTL
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_DTL' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_PAM_VEN_DTL
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_SUM' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_PAM_VEN_SUM
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_EXSUM' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_SCHED_EXSUM
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Delete Error - Clear-Detail-Files'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_EXHST' ||
                        ', GVT_SCHED_PREFIX:' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_GVT_SCHED_EXHST
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-SQL

end-procedure

!********************************
begin-procedure Select-Parameters
!********************************

  let $RunID        = ' '
  let $SchedPrefix  = ' '
  let $InclOffCycle = 'Y'
  let $ProcOptn     = 'E'

begin-select
RC.RUN_ID
RC.GVT_SCHED_PREFIX
RC.GVT_INCL_OFF_CYCLE
RC.GVT_EXT_PROC_OPTN

 let $RunID           = rtrim(&RC.RUN_ID, ' ')
 let $SchedPrefix     = &RC.GVT_SCHED_PREFIX
 let $InclOffCycle    = &RC.GVT_INCL_OFF_CYCLE
 let $ProcOptn        = &RC.GVT_EXT_PROC_OPTN

 do Get-Schedule-Status

FROM  PS_RUNCTL_FGPY040 RC
WHERE RC.OPRID          = $Prcs_OprID
AND   RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
end-select

end-procedure

!********************************
begin-procedure Prompt-Parameters
!********************************

  input $RunID maxlen=10 'Enter Payroll Run ID' type=char
  uppercase $RunID

  do Get-Schedule-Prefix

  input $InclOffCycle maxlen=1 'Include Off Cycle (Y/N) ?' type=char
  uppercase $InclOffCycle

  if $InclOffCycle <> 'Y'
      let $InclOffCycle = 'N'
  end-if

  input $ProcOptn maxlen=1 'Process Option (E/R/S) ?' type=char
  uppercase $ProcOptn

  if $ProcOptn = 'E' or $ProcOptn = 'R' or $ProcOptn = 'S'
  else
      let $ProcOptn     = 'E'
  end-if

end-procedure

!**********************************
begin-procedure Get-Schedule-Prefix
!**********************************
begin-select
SCHDEF.GVT_SCHED_PREFIX
SCHDEF.GVT_SCHED_STATUS

  let $SchedPrefix = &SCHDEF.GVT_SCHED_PREFIX
  let $SchedStatus = &SCHDEF.GVT_SCHED_STATUS

FROM PS_GVT_SCHED_DEFN SCHDEF
WHERE SCHDEF.RUN_ID = $RunID
end-select

end-procedure

!**********************************
begin-procedure Get-Schedule-Status
!**********************************
begin-select
SCHDEFN.GVT_SCHED_STATUS

  let $SchedStatus = &SCHDEFN.GVT_SCHED_STATUS

FROM PS_GVT_SCHED_DEFN SCHDEFN
WHERE GVT_SCHED_PREFIX = $SchedPrefix
end-select

end-procedure

!*************************************************************
begin-procedure Update-Proc-Status ($SchedPrefix, $ProcStatus)
!*************************************************************

  let $err-statement1 = 'FGPY040, Update Error - Update-Proc-Status'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_DEFN' ||
                        ', GVT_SCHED_PREFIX: ' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_GVT_SCHED_DEFN
SET GVT_SCHED_STATUS = $ProcStatus
WHERE GVT_SCHED_PREFIX  = $SchedPrefix
end-SQL

end-procedure

!*********************************
begin-procedure Delete-Run-Control
!*********************************

  let $err-statement1 = 'FGPY040, Delete Error - Delete-Run-Control'
  let $err-statement2 = 'Key Values: TABLE: PS_RUNCTL_FGPY040' ||
                        ', OPRID: '       || $Prcs_OprID       ||
                        ', RUN_CNTL_ID: ' || $Prcs_Run_Cntl_ID

begin-SQL on-error=SQL-Statement-Error
DELETE FROM PS_RUNCTL_FGPY040
WHERE OPRID          = $Prcs_OprID
AND   RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
end-SQL

end-procedure

!***************************************
begin-procedure Write-Schedule-Reference
!***************************************

  move #CheckRefNo     to $ChecRefNo  9999

  let $err-statement1 = 'FGPY040, Insert Error - Write-Schedule-Reference'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_REF' ||
                         ', GVT_SCHED_PREFIX: ' ||$SchedPrefix     ||
                         ', GVT_CHECK_REF_NO: ' ||$ChecRefNo       ||
                         ', COMPANY: '          ||$Company         ||
                         ', PAYGROUP: '         ||$PayGroup        ||
                         ', PAY_END_DT: '       ||$PayEndDt        ||
                         ', OFF_CYCLE: '        ||$OffCycle

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_SCHED_REF (GVT_SCHED_PREFIX,
                              GVT_CHECK_REF_NO,
                              COMPANY,
                              PAYGROUP,
                              PAY_END_DT,
                              OFF_CYCLE)
                     VALUES  ($SchedPrefix,
                              #CheckRefNo,
                              $Company,
                              $PayGroup,
                              $PayEndDt,
                              $OffCycle)
end-SQL

end-procedure

!********************************
begin-procedure Write-Salary-Work
!********************************

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  move #Priority       to $Priority   999
  move #DistSeq        to $DistSeq    999
  move #RemitAmtCr     to $RemitAmtCr 99999999999.99
  move #RemitAmtDr     to $RemitAmtDr 99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Salary-Work'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_SAL_WRK' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', PRIORITY: '          ||$Priority        ||
                         ', GVT_DIST_SEQ: '      ||$DistSeq         ||
                         ', FUND_CODE: '         ||$FundCd          ||
                         ', GVT_TAS_GWA: '       ||$GWAString       ||
                         ', GVT_BETC_CD: '       ||$BETC            ||
                         ', BANK_CD: '           ||$BankCd          ||
                         ', ACCOUNT_NUM: '       ||$AcctNum         ||
                         ', ACCOUNT_TYPE: '      ||$AcctType        ||
                         ', GVT_CR_REMIT_AMT: '  ||$RemitAmtCr      ||
                         ', GVT_DR_REMIT_AMT: '  ||$RemitAmtDr      ||
                         ', GVT_FOREIGN_ADDR:'   ||$ForeignAddr     ||
                         ', GVT_SCHED_SEQ: '     ||'1'

  if $SchedCode = 'A'
      add 1 to #SalaryCheckCount
  else
      add 1 to #SalaryEFTCount
  end-if

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_PAM_SAL_WRK (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_CHECK_REF_NO,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                PRIORITY,
                                GVT_DIST_SEQ,
                                FUND_CODE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                BANK_CD,
                                ACCOUNT_NUM,
                                ACCOUNT_TYPE,
                                GVT_CR_REMIT_AMT,
                                GVT_DR_REMIT_AMT,
                                GVT_FOREIGN_ADDR,
                                GVT_SCHED_SEQ)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #CheckRefNo,
                                #PageNum,
                                #LineNum,
                                #SepChk,
                                #Priority,
                                #DistSeq,
                                $FundCd,
                                $GWAString,
                                $BETC,
                                $BankCd,
                                $AcctNum,
                                $AcctType,
                                #RemitAmtCr,
                                #RemitAmtDr,
                                $ForeignAddr,
                                #DefaultSeq)
end-SQL

end-procedure

!********************************
begin-procedure Write-Vendor-Work
!********************************

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  move #RemitAmtCr     to $RemitAmtCr 99999999999.99
  move #RemitAmtDr     to $RemitAmtDr 99999999999.99
  move #Amount         to $Amount     99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Vendor-Work'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_WRK' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', GVT_SCHED_REC_TYPE: '||$SchedRecType    ||
                         ', PLAN_TYPE: '         ||$PlanType        ||
                         ', DEDCD: '             ||$DedCd           ||
                         ', STATE: '             ||$State           ||
                         ', LOCALITY: '          ||$Locality        ||
                         ', TAX_CLASS: '         ||$TaxClass        ||
                         ', GARNID: '            ||$GarnID          ||
                         ', COMPANY: '           ||$TaxCompany      ||
                         ', GARN_TYPE: '         ||$GarnType        ||
                         ', GVT_DED_DIST_CD: '   ||$DedDistCd       ||
                         ', GVT_REPORTING_CD: '  ||$ReportingCd     ||
                         ', GVT_PYMNT_RTNG: '    ||$PaymentRouting  ||
                         ', GVT_PYMNT_SUMM: '    ||$PaymentSummary  ||
                         ', REMIT_FREQUENCY: '   ||$RemitFreq       ||
                         ', PAY_FREQUENCY: '     ||$PayFreq         ||
                         ', FUND_CODE: '         ||$FundCd          ||
                         ', GVT_TAS_GWA: '       ||$GWAString       ||
                         ', GVT_BETC_CD: '       ||$BETC            ||
                         ', BANK_CD: '           ||$BankCd          ||
                         ', ACCOUNT_NUM: '       ||$AcctNum         ||
                         ', ACCOUNT_TYPE: '      ||$AcctType        ||
                         ', EMPLID: '            ||$EmplID          ||
                         ', GVT_CR_REMIT_AMT: '  ||$RemitAmtCr      ||
                         ', GVT_DR_REMIT_AMT: '  ||$RemitAmtDr      ||
                         ', GVT_AMOUNT: '        ||$Amount          ||
                         ', GVT_SCHED_SEQ: '     ||'1'

  if $SchedCode = 'C'
      add 1 to #VendorCheckCount
  else
      add 1 to #VendorEFTCount
  end-if

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_PAM_VEN_WRK (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_CHECK_REF_NO,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                GVT_SCHED_REC_TYPE,
                                PLAN_TYPE,
                                DEDCD,
                                STATE,
                                LOCALITY,
                                TAX_CLASS,
                                GARNID,
                                COMPANY,
                                GARN_TYPE,
                                GVT_DED_DIST_CD,
                                GVT_REPORTING_CD,
                                GVT_PYMNT_RTNG,
                                GVT_PYMNT_SUMM,
                                REMIT_FREQUENCY,
                                PAY_FREQUENCY,
                                FUND_CODE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                BANK_CD,
                                ACCOUNT_NUM,
                                ACCOUNT_TYPE,
                                EMPLID,
                                GVT_CR_REMIT_AMT,
                                GVT_DR_REMIT_AMT,
                                GVT_AMT,
                                GVT_SCHED_SEQ)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #CheckRefNo,
                                #PageNum,
                                #LineNum,
                                #SepChk,
                                $SchedRecType,
                                $PlanType,
                                $DedCd,
                                $State,
                                $Locality,
                                $TaxClass,
                                $GarnID,
                                $TaxCompany,
                                $GarnType,
                                $DedDistCd,
                                $ReportingCd,
                                $PaymentRouting,
                                $PaymentSummary,
                                $RemitFreq,
                                $PayFreq,
                                $FundCd,
                                $GWAString,
                                $BETC,
                                $BankCd,
                                $AcctNum,
                                $AcctType,
                                $EmplID,
                                #RemitAmtCr,
                                #RemitAmtDr,
                                #Amount,
                                #DefaultSeq)
end-SQL

end-procedure

!**********************************
begin-procedure Write-Salary-Detail
!**********************************

  move #SchedSeq       to $SchedSeq   999
  move #PymntSeq       to $PymntSeq   999999
  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  move #Priority       to $Priority   999
  move #DistSeq        to $DistSeq    999
  move #RemitAmtCr     to $RemitAmtCr 99999999999.99
  move #RemitAmtDr     to $RemitAmtDr 99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Salary-Detail'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_SAL_DTL' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '     ||$SchedSeq        ||
                         ', GVT_PYMNT_SEQ: '     ||$PymntSeq        ||
                         ', GVT_TAS_GWA: '       ||$GWAString       ||
                         ', GVT_BETC_CD: '       ||$BETC            ||
                         ', FUND_CODE: '         ||$FundCd          ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', PRIORITY: '          ||$Priority        ||
                         ', GVT_DIST_SEQ: '      ||$DistSeq         ||
                         ', BANK_CD: '           ||$BankCd          ||
                         ', ACCOUNT_NUM: '       ||$AcctNum         ||
                         ', ACCOUNT_TYPE: '      ||$AcctType        ||
                         ', GVT_CR_REMIT_AMT: '  ||$RemitAmtCr      ||
                         ', GVT_DR_REMIT_AMT: '  ||$RemitAmtDr

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_PAM_SAL_DTL (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_PYMNT_SEQ,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                FUND_CODE,
                                GVT_CHECK_REF_NO,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                PRIORITY,
                                GVT_DIST_SEQ,
                                BANK_CD,
                                ACCOUNT_NUM,
                                ACCOUNT_TYPE,
                                GVT_CR_REMIT_AMT,
                                GVT_DR_REMIT_AMT)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                #PymntSeq,
                                $GWAString,
                                $BETC,
                                $FundCd,
                                #CheckRefNo,
                                #PageNum,
                                #LineNum,
                                #SepChk,
                                #Priority,
                                #DistSeq,
                                $BankCd,
                                $AcctNum,
                                $AcctType,
                                #RemitAmtCr,
                                #RemitAmtDr)
end-SQL

end-procedure

!**********************************
begin-procedure Write-Vendor-Detail
!**********************************

  move #SchedSeq       to $SchedSeq   999
  move #PymntSeq       to $PymntSeq   999999
  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  move #RemitAmtCr     to $RemitAmtCr 99999999999.99
  move #RemitAmtDr     to $RemitAmtDr 99999999999.99
  move #Amount         to $Amount     99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Vendor-Detail'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_DTL' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '     ||$SchedSeq        ||
                         ', GVT_PYMNT_SEQ: '     ||$PymntSeq        ||
                         ', GVT_SCHED_REC_TYPE: '||$SchedRecType    ||
                         ', GVT_TAS_GWA: '       ||$GWAString       ||
                         ', GVT_BETC_CD: '       ||$BETC            ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', GVT_CR_REMIT_AMT: '  ||$RemitAmtCr      ||
                         ', GVT_DR_REMIT_AMT: '  ||$RemitAmtDr      ||
                         ', GVT_AMOUNT: '        ||$Amount

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_PAM_VEN_DTL (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_PYMNT_SEQ,
                                GVT_SCHED_REC_TYPE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                GVT_CHECK_REF_NO,
                                PAGE_NUM,
                                LINE_NUM,
                                SEPCHK,
                                GVT_CR_REMIT_AMT,
                                GVT_DR_REMIT_AMT,
                                GVT_AMT)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                #PymntSeq,
                                $SchedRecType,
                                $GWAString,
                                $BETC,
                                #CheckRefNo,
                                #PageNum,
                                #LineNum,
                                #SepChk,
                                #RemitAmtCr,
                                #RemitAmtDr,
                                #Amount)
end-SQL

end-procedure

!***********************************
begin-procedure Write-Vendor-Summary
!***********************************

  move #SchedSeq       to $SchedSeq   999
  move #PymntSeq       to $PymntSeq   999999
  move #RemitAmtCr     to $RemitAmtCr 99999999999.99
  move #RemitAmtDr     to $RemitAmtDr 99999999999.99
  move #Amount         to $Amount     99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Vendor-Summary'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_SUM' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '     ||$SchedSeq        ||
                         ', GVT_PYMNT_SEQ: '     ||$PymntSeq        ||
                         ', GVT_SCHED_REC_TYPE: '||$SchedRecType    ||
                         ', GVT_TAS_GWA: '       ||$GWAString       ||
                         ', GVT_BETC_CD: '       ||$BETC            ||
                         ', FUND_CODE: '         ||$FundCd          ||
                         ', PLAN_TYPE: '         ||$PlanType        ||
                         ', DEDCD: '             ||$DedCd           ||
                         ', GVT_DED_DIST_CD: '   ||$DedDistCd       ||
                         ', GVT_REPORTING_CD: '  ||$ReportingCd     ||
                         ', GVT_PYMNT_RTNG: '    ||$PaymentRouting  ||
                         ', GVT_PYMNT_SUMM: '    ||$PaymentSummary  ||
                         ', REMIT_FREQUENCY: '   ||$RemitFreq       ||
                         ', PAY_FREQUENCY: '     ||$PayFreq         ||
                         ', GARNID: '            ||$GarnID          ||
                         ', GARN_TYPE: '         ||$GarnType        ||
                         ', STATE: '             ||$State           ||
                         ', LOCALITY: '          ||$Locality        ||
                         ', TAX_CLASS: '         ||$TaxClass        ||
                         ', BANK_CD: '           ||$BankCd          ||
                         ', ACCOUNT_NUM: '       ||$AcctNum         ||
                         ', ACCOUNT_TYPE: '      ||$AcctType        ||
                         ', GVT_CR_REMIT_AMT: '  ||$RemitAmtCr      ||
                         ', GVT_DR_REMIT_AMT: '  ||$RemitAmtDr      ||
                         ', GVT_AMOUNT: '        ||$Amount

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_PAM_VEN_SUM (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_PYMNT_SEQ,
                                GVT_SCHED_REC_TYPE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                FUND_CODE,
                                PLAN_TYPE,
                                DEDCD,
                                GVT_DED_DIST_CD,
                                GVT_REPORTING_CD,
                                GVT_PYMNT_RTNG,
                                GVT_PYMNT_SUMM,
                                REMIT_FREQUENCY,
                                PAY_FREQUENCY,
                                GARNID,
                                GARN_TYPE,
                                STATE,
                                LOCALITY,
                                TAX_CLASS,
                                BANK_CD,
                                ACCOUNT_NUM,
                                ACCOUNT_TYPE,
                                GVT_CR_REMIT_AMT,
                                GVT_DR_REMIT_AMT,
                                GVT_AMT)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                #PymntSeq,
                                $SchedRecType,
                                $GWAString,
                                $BETC,
                                $FundCd,
                                $PlanType,
                                $DedCd,
                                $DedDistCd,
                                $ReportingCd,
                                $PaymentRouting,
                                $PaymentSummary,
                                $RemitFreq,
                                $PayFreq,
                                $GarnID,
                                $GarnType,
                                $State,
                                $Locality,
                                $TaxClass,
                                $BankCd,
                                $AcctNum,
                                $AcctType,
                                #RemitAmtCr,
                                #RemitAmtDr,
                                #Amount)
end-SQL

end-procedure

!*************************************
begin-procedure Write-Schedule-Control
!*************************************

  let $err-statement1 = 'FGPY040, Insert Error - Write-Schedule-Control'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_CNTRL' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '     ||$SchedSeq        ||
                         ', GVT_SPS_CNTRL_NUM: ' ||' '              ||
                         ', GVT_ECS_REQ_PAY_DT: '||'NULL'           ||
                         ', GVT_ECS_GEN_DT : '   ||'NULL'           ||
                         ', GVT_TOTAL_COUNT : '  ||'0'              ||
                         ', GVT_TOTAL_AMT: '     ||'0'

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_SCHED_CNTRL (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_SPS_CNTRL_NUM,
                                GVT_ECS_REQ_PAY_DT,
                                GVT_ECS_GEN_DT,
                                GVT_TOTAL_COUNT,
                                GVT_TOTAL_AMT)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                ' ',
                                NULL,
                                NULL,
                                0,
                                0)
end-SQL

end-procedure

!*********************************************
begin-procedure Write-Schedule-Extract-Summary
!*********************************************

  move #SchedSeq       to $SchedSeq   999
  move #ExtTtlAmt      to $ExtTtlAmt  99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Schedule-Extract-Summary'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_EXSUM' ||
                         ', GVT_SCHED_PREFIX: '   ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '     ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '      ||$SchedSeq        ||
                         ', GVT_SCHED_REC_TYPE: ' ||$SchedRecType    ||
                         ', GVT_REPORTING_CD: '   ||$ReportingCd     ||
                         ', GARN_TYPE: '          ||$GarnType        ||
                         ', GVT_TAS_GWA: '        ||$GWAString       ||
                         ', GVT_BETC_CD: '        ||$BETC            ||
                         ', GVT_TOTAL_AMT: '      ||$ExtTtlAmt

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_SCHED_EXSUM (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_SCHED_REC_TYPE,
                                GVT_REPORTING_CD,
                                GARN_TYPE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                GVT_TOTAL_AMT)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                $SchedRecType,
                                $ReportingCd,
                                $GarnType,
                                $GWAString,
                                $BETC,
                                #ExtTtlAmt)
end-SQL

end-procedure

!*********************************************
begin-procedure Write-Schedule-Extract-History
!*********************************************

  move #SchedSeq       to $SchedSeq   999
  move #ExtTtlAmt      to $ExtTtlAmt  99999999999.99

  let $err-statement1 = 'FGPY040, Insert Error - Write-Schedule-Extract-History'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_EXHST' ||
                         ', GVT_SCHED_PREFIX: '    ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '      ||$SchedCode       ||
                         ', GVT_SCHED_SEQ: '       ||$SchedSeq        ||
                         ', GVT_SCHED_REC_TYPE: '  ||$SchedRecType    ||
                         ', GVT_REPORTING_CD: '    ||$ReportingCd     ||
                         ', GARN_TYPE: '           ||$GarnType        ||
                         ', GVT_TAS_GWA: '         ||$GWAString       ||
                         ', GVT_BETC_CD: '         ||$BETC            ||
                         ', GVT_TASBETC_ADJSEQ: '  ||'0'              ||
                         ', GVT_ADJ_TAS_GWA: '     ||$GWAString       ||
                         ', GVT_ADJ_BETC_CD: '     ||$BETC            ||
                         ', GVT_TOTAL_AMT: '       ||$ExtTtlAmt       ||
                         ', GVT_ADJ_NOTE: '        ||'System Generated'

begin-SQL on-error=SQL-Statement-Error
INSERT INTO PS_GVT_SCHED_EXHST (GVT_SCHED_PREFIX,
                                GVT_SCHED_CODE,
                                GVT_SCHED_SEQ,
                                GVT_SCHED_REC_TYPE,
                                GVT_REPORTING_CD,
                                GARN_TYPE,
                                GVT_TAS_GWA,
                                GVT_BETC_CD,
                                GVT_TASBETC_ADJSEQ,
                                GVT_ADJ_TAS_GWA,
                                GVT_ADJ_BETC_CD,
                                GVT_TOTAL_AMT,
                                GVT_ADJ_NOTE)
                       VALUES  ($SchedPrefix,
                                $SchedCode,
                                #SchedSeq,
                                $SchedRecType,
                                $ReportingCd,
                                $GarnType,
                                $GWAString,
                                $BETC,
                                0,
                                $GWAString,
                                $BETC,
                                #ExtTtlAmt,
                                'System Generated')
end-SQL

end-procedure

!********************************
begin-procedure Get-Mapping-Level
!********************************

  let $FoundMapLevel = ' '
  let $MapLevelEffdt = ' '
  let #MapLevelIdx   = 1

  while rtrim($FoundMapLevel,' ') = '' and #MapLevelIdx <= 5

      let $MapLevel = substr($MapString, #MapLevelIdx, 1)
      do Define-Search-Values ($MapLevel)
      if $SkipLevel = 'N'
          do Find-MapLevel ($Company, $Business_Unit, $MapLevel, $PayEndDt, $Srch_DeptID,
                            $Srch_JobCode, $Srch_Position_Nbr, $Srch_EmplID, #Srch_Empl_Rcd,
                            $FoundMapLevel, $MapLevelEffdt)
      end-if

      let #MapLevelIdx = #MapLevelIdx + 1
  end-while

  if rtrim($FoundMapLevel,' ') = ''
      move #EmplRcd to $DispEmplRcd 999
      let $ErrMsg = 'Map Level not found for - Company ' || $Company || ' Business Unit ' ||
                    $Business_Unit || ' Pay End Date ' || $PayEndDt || ' Dept ' || $DeptID|| ' JobCode ' ||
                    $JobCode || ' Position Nbr ' || $PositionNbr || ' EmplID ' || $EmplID  || ' Empl Rcd ' ||
                    $DispEmplRcd
      display $ErrMsg
      do Rollback-Transaction
      stop
  end-if

end-procedure

!***********************************************
begin-procedure Define-Search-Values ($MapLevel)
!***********************************************

  let $_Srch_DeptID       = ' '
  let $_Srch_JobCode      = ' '
  let $_Srch_Position_Nbr = ' '
  let $_Srch_EmplID       = ' '
  let #_Srch_Empl_Rcd     = 0
  let $_SkipLevel         = 'N'

  evaluate $MapLevel
      when = 'A'
          let $_Srch_EmplID       = $_EmplID
          let #_Srch_Empl_Rcd     = #_EmplRcd
          if rtrim($_EmplID,' ') = '' and #_EmplRcd  = 0
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'J'
          let $_Srch_JobCode      = $_JobCode
          if rtrim($_JobCode,' ') = ''
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'P'
          let $_Srch_Position_Nbr = $_PositionNbr
          if rtrim($_PositionNbr,' ') = ''
              let $_SkipLevel = 'Y'
          end-if
          break
      when = 'D'
          let $_Srch_DeptID       = $_DeptID
          break
      when = 'C'
          break
  end-evaluate
end-procedure

!************************************************************************************************
begin-procedure Find-MapLevel ($Company, $Business_Unit, $LevelInd, $PayEndDt, $DeptID, $JobCode,
                               $Position_Nbr, $EmplID, #Empl_Rcd, :$MapLevel, :$Effdt)
!************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_LVL1.GVT_TAS_MAP_INDC
TASMAP_LVL1.EFFDT

  let $MapLevel = &TASMAP_LVL1.GVT_TAS_MAP_INDC
  let $Effdt = &TASMAP_LVL1.EFFDT

FROM PS_GVT_TAS_MAP_LVL TASMAP_LVL1
WHERE TASMAP_LVL1.COMPANY            = $Company
AND   TASMAP_LVL1.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_LVL1.DEPTID             = $DeptID
AND   TASMAP_LVL1.JOBCODE            = $JobCode
AND   TASMAP_LVL1.POSITION_NBR       = $Position_Nbr
AND   TASMAP_LVL1.EMPLID             = $EmplID
AND   TASMAP_LVL1.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_LVL1.EFF_STATUS         = 'A'
AND   TASMAP_LVL1.EFFDT              =
              (SELECT MAX(TASMAP_LVL11.EFFDT) FROM PS_GVT_TAS_MAP_LVL TASMAP_LVL11
                WHERE TASMAP_LVL11.COMPANY            = TASMAP_LVL1.COMPANY
                  AND TASMAP_LVL11.BUSINESS_UNIT      = TASMAP_LVL1.BUSINESS_UNIT
                  AND TASMAP_LVL11.DEPTID             = TASMAP_LVL1.DEPTID
                  AND TASMAP_LVL11.JOBCODE            = TASMAP_LVL1.JOBCODE
                  AND TASMAP_LVL11.POSITION_NBR       = TASMAP_LVL1.POSITION_NBR
                  AND TASMAP_LVL11.EMPLID             = TASMAP_LVL1.EMPLID
                  AND TASMAP_LVL11.EMPL_RCD           = TASMAP_LVL1.EMPL_RCD
                  AND TASMAP_LVL11.EFFDT             <= $PayEndDt)
end-select

end-procedure

!**********************************
begin-procedure Get-NetPay-TAS-BETC
!**********************************

  do Define-Search-Values ($FoundMapLevel)

  do Find-NetPayLevel-FundCd ($Company, $Business_Unit, $Srch_DeptID, $Srch_JobCode, $Srch_Position_Nbr,
                              $Srch_EmplID, #Srch_Empl_Rcd, $MapLevelEffdt, $FundCd, $BETC)

  do Find-GWA-String ($Business_Unit, $FundCd, $GWAString)
  if rtrim($BETC, ' ') = 'DISB'
      let $CreditPaymnt = 'N'
  else
      do Determine-Credit-Payment ($GWAString, $BETC, $CreditPaymnt)
  end-if

end-procedure

!*******************************
begin-procedure Get-Ded-TAS-BETC
!*******************************

  do Define-Search-Values ($FoundMapLevel)

  let $DedFundCd = ' '
  let $DedBETC = ' '
  do Find-DedLevel-FundCd ($Company, $Business_Unit, $Srch_DeptID, $Srch_JobCode, $Srch_Position_Nbr,
                           $Srch_EmplID, #Srch_Empl_Rcd, $MapLevelEffdt, $PlanType, $DedCd, $DedFundCd, $DedBETC)

  if rtrim($DedFundCd,' ') = ''
      do Find-DedDefLevel-FundCd ($Company, $Business_Unit, $Srch_DeptID, $Srch_JobCode, $Srch_Position_Nbr,
                                  $Srch_EmplID, #Srch_Empl_Rcd, $MapLevelEffdt, $DedFundCd, $DedBETC)
  end-if

  let $FundCd = $DedFundCd
  let $BETC = $DedBETC
  do Find-GWA-String ($Business_Unit, $FundCd, $GWAString)
  if rtrim($BETC, ' ') = 'DISB'
      let $CreditPaymnt = 'N'
  else
      do Determine-Credit-Payment ($GWAString, $BETC, $CreditPaymnt)
  end-if

end-procedure

!*******************************
begin-procedure Get-Tax-TAS-BETC
!*******************************

  do Define-Search-Values ($FoundMapLevel)

  let $TaxFundCd = ' '
  let $TaxBETC = ' '
  let $ProcState = rtrim($State,' ')
  do Find-TaxLevel-FundCd ($Company, $Business_Unit, $Srch_DeptID, $Srch_JobCode, $Srch_Position_Nbr,
                           $Srch_EmplID, #Srch_Empl_Rcd, $MapLevelEffdt, $ProcState, $Locality, $ProcTaxClass,
                           $TaxFundCd, $TaxBETC)

  if rtrim($TaxFundCd,' ') = ''
      do Find-TaxDefLevel-FundCd ($Company, $Business_Unit, $Srch_DeptID, $Srch_JobCode, $Srch_Position_Nbr,
                                  $Srch_EmplID, #Srch_Empl_Rcd, $MapLevelEffdt, $TaxFundCd, $TaxBETC)
  end-if

  let $FundCd = $TaxFundCd
  let $BETC = $TaxBETC
  do Find-GWA-String ($Business_Unit, $FundCd, $GWAString)
  if rtrim($BETC, ' ') = 'DISB'
      let $CreditPaymnt = 'N'
  else
      do Determine-Credit-Payment ($GWAString, $BETC, $CreditPaymnt)
  end-if

end-procedure

!*********************************************************************
begin-procedure Find-GWA-String ($Business_Unit, $FundCd, :$GWAString)
!*********************************************************************

begin-select loops=1 on-error=SQL-error
TASFUND.GVT_TAS_GWA

  let $GWAString = &TASFUND.GVT_TAS_GWA

FROM PS_GVT_TAS_FUND_VW TASFUND
   , PS_SET_CNTRL_REC SETCTL
   , PS_BUS_UNIT_TBL_HR BUSUNIT
WHERE BUSUNIT.BUSINESS_UNIT = $Business_Unit
AND   BUSUNIT.BUSINESS_UNIT_GL = SETCTL.SETCNTRLVALUE
AND   SETCTL.REC_GROUP_ID = 'FS_22'
AND   SETCTL.RECNAME = 'VALID_COMBO_TBL'
AND   SETCTL.SETID = TASFUND.SETID
AND   TASFUND.FUND_CODE = $FundCd
end-select

  if rtrim($GWAString,' ') = ''
      display 'GWAString is blank'
      let $DispMsg = $_PayCheckDtl || ', Fund Code = ' || $FundCd
      display $DispMsg
  end-if

end-procedure

!***************************************************************************************************
begin-procedure Find-NetPayLevel-FundCd ($Company, $Business_Unit, $DeptID, $JobCode, $Position_Nbr,
                                         $EmplID, #Empl_Rcd, $Effdt, :$FundCd, :$BETC)
!***************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_NETPAY.FUND_CODE
TASMAP_NETPAY.GVT_BETC_CD

  let $FundCd = &TASMAP_NETPAY.FUND_CODE
  let $BETC   = &TASMAP_NETPAY.GVT_BETC_CD

FROM PS_GVT_TAS_MAP_NET TASMAP_NETPAY
WHERE TASMAP_NETPAY.COMPANY            = $Company
AND   TASMAP_NETPAY.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_NETPAY.DEPTID             = $DeptID
AND   TASMAP_NETPAY.JOBCODE            = $JobCode
AND   TASMAP_NETPAY.POSITION_NBR       = $Position_Nbr
AND   TASMAP_NETPAY.EMPLID             = $EmplID
AND   TASMAP_NETPAY.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_NETPAY.EFFDT              = $Effdt
end-select

end-procedure

!*****************************************************************************************************
begin-procedure Find-DedLevel-FundCd ($Company, $Business_Unit, $DeptID, $JobCode, $Position_Nbr,
                                      $EmplID, #Empl_Rcd, $Effdt, $PlanType, $DedCd, :$FundCd, :$BETC)
!*****************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_DED.FUND_CODE
TASMAP_DED.GVT_BETC_CD

  let $FundCd = &TASMAP_DED.FUND_CODE
  let $BETC   = &TASMAP_DED.GVT_BETC_CD

FROM PS_GVT_TAS_MAP_DED TASMAP_DED
WHERE TASMAP_DED.COMPANY            = $Company
AND   TASMAP_DED.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_DED.DEPTID             = $DeptID
AND   TASMAP_DED.JOBCODE            = $JobCode
AND   TASMAP_DED.POSITION_NBR       = $Position_Nbr
AND   TASMAP_DED.EMPLID             = $EmplID
AND   TASMAP_DED.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_DED.EFFDT              = $Effdt
AND ((TASMAP_DED.PLAN_TYPE = $PlanType AND TASMAP_DED.DEDCD = $DedCd)
    OR ((TASMAP_DED.PLAN_TYPE = $PlanType AND TASMAP_DED.DEDCD = ' ')
        AND NOT EXISTS
            (SELECT 'X' FROM PS_GVT_TAS_MAP_DED TASMAP_DED1
             WHERE TASMAP_DED1.COMPANY            = $Company
             AND   TASMAP_DED1.BUSINESS_UNIT      = $Business_Unit
             AND   TASMAP_DED1.DEPTID             = $DeptID
             AND   TASMAP_DED1.JOBCODE            = $JobCode
             AND   TASMAP_DED1.POSITION_NBR       = $Position_Nbr
             AND   TASMAP_DED1.EMPLID             = $EmplID
             AND   TASMAP_DED1.EMPL_RCD           = #Empl_Rcd
             AND   TASMAP_DED1.EFFDT              = $Effdt
             AND   TASMAP_DED1.PLAN_TYPE          = $PlanType
             AND   TASMAP_DED1.DEDCD              = $DedCd)))
end-select

end-procedure

!***************************************************************************************************
begin-procedure Find-DedDefLevel-FundCd ($Company, $Business_Unit, $DeptID, $JobCode, $Position_Nbr,
                                         $EmplID, #Empl_Rcd, $Effdt, :$FundCd, :$BETC)
!***************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_DEDDEF.FUND_CODE
TASMAP_DEDDEF.GVT_BETC_CD

  let $FundCd = &TASMAP_DEDDEF.FUND_CODE
  let $BETC   = &TASMAP_DEDDEF.GVT_BETC_CD

FROM PS_GVT_TAS_MAP_DED TASMAP_DEDDEF
WHERE TASMAP_DEDDEF.COMPANY            = $Company
AND   TASMAP_DEDDEF.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_DEDDEF.DEPTID             = $DeptID
AND   TASMAP_DEDDEF.JOBCODE            = $JobCode
AND   TASMAP_DEDDEF.POSITION_NBR       = $Position_Nbr
AND   TASMAP_DEDDEF.EMPLID             = $EmplID
AND   TASMAP_DEDDEF.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_DEDDEF.EFFDT              = $Effdt
AND   TASMAP_DEDDEF.GVT_DEFAULT_INDC   = 'Y'
end-select

end-procedure

!************************************************************************************************
begin-procedure Find-TaxLevel-FundCd ($Company, $Business_Unit, $DeptID, $JobCode, $Position_Nbr,
                                      $EmplID, #Empl_Rcd, $Effdt, $State, $Locality, $TaxClass,
                                      :$FundCd, :$BETC)
!************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_TAX.FUND_CODE
TASMAP_TAX.GVT_BETC_CD

  let $FundCd = &TASMAP_TAX.FUND_CODE
  let $BETC   = &TASMAP_TAX.GVT_BETC_CD

FROM PS_GVT_TAS_MAP_TAX TASMAP_TAX
WHERE TASMAP_TAX.COMPANY            = $Company
AND   TASMAP_TAX.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_TAX.DEPTID             = $DeptID
AND   TASMAP_TAX.JOBCODE            = $JobCode
AND   TASMAP_TAX.POSITION_NBR       = $Position_Nbr
AND   TASMAP_TAX.EMPLID             = $EmplID
AND   TASMAP_TAX.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_TAX.EFFDT              = $Effdt
AND ((TASMAP_TAX.STATE = $State AND TASMAP_TAX.LOCALITY = $Locality AND TASMAP_TAX.TAX_CLASS = $TaxClass)
    OR ((TASMAP_TAX.STATE = $State AND TASMAP_TAX.LOCALITY = ' ' AND TASMAP_TAX.TAX_CLASS = $TaxClass)
        AND NOT EXISTS
            (SELECT 'X' FROM PS_GVT_TAS_MAP_TAX TASMAP_TAX1
             WHERE TASMAP_TAX1.COMPANY            = $Company
             AND   TASMAP_TAX1.BUSINESS_UNIT      = $Business_Unit
             AND   TASMAP_TAX1.DEPTID             = $DeptID
             AND   TASMAP_TAX1.JOBCODE            = $JobCode
             AND   TASMAP_TAX1.POSITION_NBR       = $Position_Nbr
             AND   TASMAP_TAX1.EMPLID             = $EmplID
             AND   TASMAP_TAX1.EMPL_RCD           = #Empl_Rcd
             AND   TASMAP_TAX1.EFFDT              = $Effdt
             AND   TASMAP_TAX1.STATE              = $State
             AND   TASMAP_TAX1.LOCALITY           = $Locality
             AND   TASMAP_TAX1.TAX_CLASS          = $TaxClass)))
end-select

end-procedure

!***************************************************************************************************
begin-procedure Find-TaxDefLevel-FundCd ($Company, $Business_Unit, $DeptID, $JobCode, $Position_Nbr,
                                         $EmplID, #Empl_Rcd, $Effdt, :$FundCd, :$BETC)
!***************************************************************************************************

begin-select loops=1 on-error=SQL-error
TASMAP_TAXDEF.FUND_CODE
TASMAP_TAXDEF.GVT_BETC_CD

  let $FundCd = &TASMAP_TAXDEF.FUND_CODE
  let $BETC   = &TASMAP_TAXDEF.GVT_BETC_CD

FROM PS_GVT_TAS_MAP_TAX TASMAP_TAXDEF
WHERE TASMAP_TAXDEF.COMPANY            = $Company
AND   TASMAP_TAXDEF.BUSINESS_UNIT      = $Business_Unit
AND   TASMAP_TAXDEF.DEPTID             = $DeptID
AND   TASMAP_TAXDEF.JOBCODE            = $JobCode
AND   TASMAP_TAXDEF.POSITION_NBR       = $Position_Nbr
AND   TASMAP_TAXDEF.EMPLID             = $EmplID
AND   TASMAP_TAXDEF.EMPL_RCD           = #Empl_Rcd
AND   TASMAP_TAXDEF.EFFDT              = $Effdt
AND   TASMAP_TAXDEF.GVT_DEFAULT_INDC   = 'Y'
end-select

end-procedure

!**********************************
begin-procedure Process-Salary-File
!**********************************

  display ' '
  if $SchedCode = 'A'
      display '     Processing Salary Check work file ....'
  else
      display '     Processing Salary EFT work file ....'
  end-if

  let #ProcSchedSeq = 1
  let $ContProc     = 'Y'
  let $ProcForeign  = 'N'

  while $ContProc = 'Y'

      let $PrevGWA           = ''
      let $PrevBETC          = ''
      let $PrevForeignAddr   = ''
      let #PrevCheckRefNo    = 0
      let #Sched_TASBETC_Cnt = 0
      let #PymntSeq          = 0

      do Select-Salary-Work-File

      add 1 to #ProcSchedSeq

      if $ProcForeign = 'N'
          if #ProcSchedSeq > #StartForeignSeq
              display '   Schedule Sequence exceed maximum schedule sequence allowed.'
              do Rollback-Transaction
              stop
          end-if
      else
          if (#ProcSchedSeq + #StartForeignSeq) > #MaxSequence
              display '   Schedule Sequence exceed maximum schedule sequence allowed.'
              do Rollback-Transaction
              stop
          end-if
      end-if
  end-while

  display '     Process completed.'

end-procedure

!**************************************
begin-procedure Select-Salary-Work-File
!**************************************

  let $ContProc = 'N'
  let $SkipFlag = 'N'

begin-select
SALWRK.GVT_FOREIGN_ADDR
SALWRK.GVT_CHECK_REF_NO
SALWRK.PAGE_NUM
SALWRK.LINE_NUM
SALWRK.SEPCHK
SALWRK.PRIORITY
SALWRK.GVT_DIST_SEQ
SALWRK.FUND_CODE
SALWRK.GVT_TAS_GWA
SALWRK.GVT_BETC_CD
SALWRK.BANK_CD
SALWRK.ACCOUNT_NUM
SALWRK.ACCOUNT_TYPE
SALWRK.GVT_CR_REMIT_AMT
SALWRK.GVT_DR_REMIT_AMT

  let $ContProc   = 'Y'

  let $ForeignAddr        = &SALWRK.GVT_FOREIGN_ADDR
  let #CheckRefNo         = &SALWRK.GVT_CHECK_REF_NO
  let #PageNum            = &SALWRK.PAGE_NUM
  let #LineNum            = &SALWRK.LINE_NUM
  let #SepChk             = &SALWRK.SEPCHK
  let #Priority           = &SALWRK.PRIORITY
  let #DistSeq            = &SALWRK.GVT_DIST_SEQ
  let $BankCd             = &SALWRK.BANK_CD
  let $AcctNum            = &SALWRK.ACCOUNT_NUM
  let $AcctType           = &SALWRK.ACCOUNT_TYPE
  let #RemitAmtCr         = &SALWRK.GVT_CR_REMIT_AMT
  let #RemitAmtDr         = &SALWRK.GVT_DR_REMIT_AMT

  let $GWAString          = &SALWRK.GVT_TAS_GWA
  let $BETC               = &SALWRK.GVT_BETC_CD
  let $FundCd             = &SALWRK.FUND_CODE

  if $PrevForeignAddr <> $ForeignAddr

      if rtrim($PrevGWA,' ') <> '' or rtrim($PrevBETC,' ') <> ''
          do Create-Salary-Extract-Summary
      end-if

      if $ForeignAddr = 'Y'
          let #SchedSeq = #ProcSchedSeq + #StartForeignSeq
          let $ProcForeign  = 'Y'
      else
          let #SchedSeq = #ProcSchedSeq
      end-if

      let $PrevGWA           = ''
      let $PrevBETC          = ''
      let #PrevCheckRefNo    = 0
      let #Sched_TASBETC_Cnt = 0
      let #PymntSeq          = 0

      let $PrevForeignAddr   = $ForeignAddr
      let $SkipFlag          = 'N'
  end-if

  if #CheckRefNo <> #PrevCheckRefNo
      do Convert-Check-Ref
      let #PrevCheckRefNo = #CheckRefNo
  end-if

  if $SkipFlag = 'T'
      do Update-Salary-Schedule-Seq
  else
      if $GWAString <> $PrevGWA or $BETC <> $PrevBETC

          if rtrim($PrevGWA,' ') <> '' or rtrim($PrevBETC,' ') <> ''
              do Create-Salary-Extract-Summary
          end-if

          add 1 to #Sched_TASBETC_Cnt

          let $PrevGWA         = $GWAString
          let $PrevBETC        = $BETC
          let #Check_TTL_Amt   = 0
          if $SkipFlag = 'A'
              let $SkipFlag = 'N'
          end-if
      end-if

      if #Sched_TASBETC_Cnt > #MaxTASBETC_per_Sched
          let $SkipFlag = 'T'
          let $PrevGWA  = ''
          let $PrevBETC = ''
          do Update-Salary-Schedule-Seq
      else
          let #TestAmt = #RemitAmtDr - #RemitAmtCr
          if #TestAmt > #MaxTASBETCAmt
              display 'Single salary transaction amount is greater than maximum TAS BETC amount'
              stop
          end-if

          let #TestAmt = #Check_TTL_Amt + #RemitAmtDr - #RemitAmtCr

          if #TestAmt > #MaxTASBETCAmt
              let $SkipFlag = 'A'
               do Update-Salary-Schedule-Seq
          else
              let #Check_TTL_Amt = #Check_TTL_Amt + #RemitAmtDr - #RemitAmtCr
              add 1 to #PymntSeq
              do Write-Salary-Detail
              do Update-PayCheck-Schedule
          end-if
      end-if
  end-if

FROM PS_GVT_PAM_SAL_WRK SALWRK
WHERE SALWRK.GVT_SCHED_PREFIX = $SchedPrefix
AND   SALWRK.GVT_SCHED_CODE   = $SchedCode
AND   SALWRK.GVT_SCHED_SEQ    = #ProcSchedSeq
ORDER BY SALWRK.GVT_FOREIGN_ADDR, SALWRK.GVT_TAS_GWA, SALWRK.GVT_BETC_CD
end-select

  if rtrim($PrevGWA,' ') <> '' or rtrim($PrevBETC,' ') <> ''
      do Create-Salary-Extract-Summary
  end-if

end-procedure

!*****************************************
begin-procedure Update-Salary-Schedule-Seq
!*****************************************

  let #UpdateSchedSeq = #ProcSchedSeq + 1

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99
  move #Priority       to $Priority   999
  move #DistSeq        to $DistSeq    999

  let $err-statement1 = 'FGPY040, Update Error - Update-Salary-Schedule-Seq'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_SAL_WRK' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', PRIORITY: '          ||$Priority        ||
                         ', GVT_DIST_SEQ: '      ||$DistSeq

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_GVT_PAM_SAL_WRK
SET GVT_SCHED_SEQ    = #UpdateSchedSeq
WHERE GVT_SCHED_PREFIX  = $SchedPrefix
AND   GVT_SCHED_CODE    = $SchedCode
AND   GVT_CHECK_REF_NO  = #CheckRefNo
AND   PAGE_NUM          = #PageNum
AND   LINE_NUM          = #LineNum
AND   SEPCHK            = #SepChk
AND   PRIORITY          = #Priority
AND   GVT_DIST_SEQ      = #DistSeq
end-SQL

end-procedure

!********************************************
begin-procedure Create-Salary-Extract-Summary
!********************************************

  let $SaveGWAString = $GWAString
  let $SaveBETC      = $BETC

  let $SchedRecType  = 'E'
  let $ReportingCd   = ' '
  let $GarnType      = ' '
  let $GWAString     = $PrevGWA
  let $BETC          = $PrevBETC
  let #ExtTtlAmt     = #Check_TTL_Amt

  do Write-Schedule-Extract-Summary
  do Write-Schedule-Extract-History

  let $GWAString     = $SaveGWAString
  let $BETC          = $SaveBETC

end-procedure

!**********************************
begin-procedure Process-Vendor-File
!**********************************

  display ' '
  if $SchedCode = 'C'
      display '     Processing Miscellaneous Check work file ....'
  else
      display '     Processing Miscellaneous EFT work file ....'
  end-if

  let #ProcSchedSeq = 1
  let $ContProc     = 'Y'

  while $ContProc = 'Y'

      let $PrevGWA           = ''
      let $PrevBETC          = ''
      let #PrevCheckRefNo    = 0
      let #Sched_TASBETC_Cnt = 0
      let #Pymnt_TASBETC_Cnt = 0
      let #TTL_TASBETC_Amt   = 0

      let $PrevRecordType    = ''
      let $PrevPlanType      = ''
      let $PrevDedCd         = ''
      let $PrevTaxComp       = ''
      let $PrevState         = ''
      let $PrevLocality      = ''
      let $PrevTaxClass      = ''
      let $PrevGarnID        = ''
      let $PrevPymntRouting  = ''
      let $PrevPymntSummary  = ''
      let #SchedSeq          = #ProcSchedSeq
      let #PymntSeq          = 0

      do Select-Vendor-Work-File

      add 1 to #ProcSchedSeq

      if #ProcSchedSeq > #MaxSequence
          display '   Schedule Sequence exceed maximum schedule sequence allowed.'
          do Rollback-Transaction
          stop
      end-if
  end-while

  display '     Process completed.'

end-procedure

!**************************************
begin-procedure Select-Vendor-Work-File
!**************************************

  let $ContProc = 'N'
  let $SkipFlag = 'N'
  do Empty-TASBETC-Array

begin-select
VENWRK.GVT_CHECK_REF_NO
VENWRK.PAGE_NUM
VENWRK.LINE_NUM
VENWRK.SEPCHK
VENWRK.GVT_SCHED_REC_TYPE
VENWRK.PLAN_TYPE
VENWRK.DEDCD
VENWRK.STATE
VENWRK.LOCALITY
VENWRK.TAX_CLASS
VENWRK.GARNID
VENWRK.COMPANY
VENWRK.GARN_TYPE
VENWRK.GVT_DED_DIST_CD
VENWRK.GVT_REPORTING_CD
VENWRK.GVT_PYMNT_RTNG
VENWRK.GVT_PYMNT_SUMM
VENWRK.REMIT_FREQUENCY
VENWRK.PAY_FREQUENCY
VENWRK.FUND_CODE
VENWRK.GVT_TAS_GWA
VENWRK.GVT_BETC_CD
VENWRK.BANK_CD
VENWRK.ACCOUNT_NUM
VENWRK.ACCOUNT_TYPE
VENWRK.EMPLID
VENWRK.GVT_CR_REMIT_AMT
VENWRK.GVT_DR_REMIT_AMT
VENWRK.GVT_AMT

  let $ContProc = 'Y'

  let #CheckRefNo         = &VENWRK.GVT_CHECK_REF_NO
  let #PageNum            = &VENWRK.PAGE_NUM
  let #LineNum            = &VENWRK.LINE_NUM
  let #SepChk             = &VENWRK.SEPCHK
  let $SchedRecType       = &VENWRK.GVT_SCHED_REC_TYPE
  let $PlanType           = &VENWRK.PLAN_TYPE
  let $DedCd              = &VENWRK.DEDCD
  let $TaxCompany         = &VENWRK.COMPANY
  let $State              = &VENWRK.STATE
  let $Locality           = &VENWRK.LOCALITY
  let $TaxClass           = &VENWRK.TAX_CLASS
  let $GarnID             = &VENWRK.GARNID
  let $GarnType           = &VENWRK.GARN_TYPE
  let $DedDistCd          = &VENWRK.GVT_DED_DIST_CD
  let $ReportingCd        = &VENWRK.GVT_REPORTING_CD
  let $PaymentRouting     = &VENWRK.GVT_PYMNT_RTNG
  let $PaymentSummary     = &VENWRK.GVT_PYMNT_SUMM
  let $RemitFreq          = &VENWRK.REMIT_FREQUENCY
  let $PayFreq            = &VENWRK.PAY_FREQUENCY
  let $BankCd             = &VENWRK.BANK_CD
  let $AcctNum            = &VENWRK.ACCOUNT_NUM
  let $AcctType           = &VENWRK.ACCOUNT_TYPE
  let $EmplID             = &VENWRK.EMPLID
  let #RemitAmtCr         = &VENWRK.GVT_CR_REMIT_AMT
  let #RemitAmtDr         = &VENWRK.GVT_DR_REMIT_AMT
  let #Amount             = &VENWRK.GVT_AMT

  let $GWAString          = &VENWRK.GVT_TAS_GWA
  let $BETC               = &VENWRK.GVT_BETC_CD
  let $FundCd             = &VENWRK.FUND_CODE

  if #CheckRefNo <> #PrevCheckRefNo
      do Convert-Check-Ref
      let #PrevCheckRefNo = #CheckRefNo
  end-if

  do Check-For-TASBETC-Break

  if $SkipFlag = 'N'

      if $PrevRecordType      <> $SchedRecType
         or $PrevPlanType     <> $PlanType
         or $PrevDedCd        <> $DedCd
         or $PrevTaxComp      <> $TaxCompany
         or $PrevState        <> $State
         or $PrevLocality     <> $Locality
         or $PrevTaxClass     <> $TaxClass
         or $PrevGarnID       <> $GarnID
         or $PrevPymntRouting <> $PaymentRouting
         or $PrevPymntSummary <> $PaymentSummary

          let #Pymnt_TASBETC_Cnt   = 0
          let #DistCd_PymentSeq    = 1

          if $PrevPymntRouting = 'D' and $PrevPymntSummary = 'D'
               do Save-Current-Values
               do Process-Distribution-Code-Array
               do Restore-Current-Values
               do Empty-Distribution-Code-Array
          end-if

          let $PrevRecordType      = $SchedRecType
          let $PrevPlanType        = $PlanType
          let $PrevDedCd           = $DedCd
          let $PrevTaxComp         = $TaxCompany
          let $PrevState           = $State
          let $PrevLocality        = $Locality
          let $PrevTaxClass        = $TaxClass
          let $PrevGarnID          = $GarnID
          let $PrevPymntRouting    = $PaymentRouting
          let $PrevPymntSummary    = $PaymentSummary
          let #DistCd_PymentSeq    = 1

          let $PymntPrevGWA        = ' '
          let $PymntPrevBETC       = ' '
      end-if

      if $PaymentRouting = 'D' and $PaymentSummary = 'D'
          do Cumulate-to-Distribution-Code-Array
      else
          add 1 to #PymntSeq
          do Write-Vendor-Detail
          do Write-Vendor-Summary
          do Update-Vendor-Schedule
      end-if
  else
      if $SkipFlag = 'A'
          let $SkipFlag = 'N'
      end-if
  end-if

FROM PS_GVT_PAM_VEN_WRK VENWRK
WHERE VENWRK.GVT_SCHED_PREFIX = $SchedPrefix
AND   VENWRK.GVT_SCHED_CODE   = $SchedCode
AND   VENWRK.GVT_SCHED_SEQ    = #ProcSchedSeq
ORDER BY VENWRK.GVT_SCHED_REC_TYPE, VENWRK.PLAN_TYPE, VENWRK.DEDCD, VENWRK.COMPANY, VENWRK.STATE, VENWRK.LOCALITY, VENWRK.TAX_CLASS,
         VENWRK.GARNID, VENWRK.GVT_PYMNT_RTNG, VENWRK.GVT_PYMNT_SUMM, VENWRK.GVT_TAS_GWA, VENWRK.GVT_BETC_CD
end-select

  if $PrevPymntRouting = 'D' and $PrevPymntSummary = 'D'
       do Save-Current-Values
       do Process-Distribution-Code-Array
       do Restore-Current-Values
       do Empty-Distribution-Code-Array
  end-if

end-procedure

!*****************************************
begin-procedure Update-Vendor-Schedule-Seq
!*****************************************

  let #UpdateSchedSeq = #ProcSchedSeq + 1

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99

  let $err-statement1 = 'FGPY040, Update Error - Update-vendor-Schedule-Seq'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_PAM_VEN_WRK' ||
                         ', GVT_SCHED_PREFIX: '  ||$SchedPrefix     ||
                         ', GVT_SCHED_CODE: '    ||$SchedCode       ||
                         ', GVT_CHECK_REF_NO: '  ||$ChecRefNo       ||
                         ', PAGE_NUM: '          ||$PageNum         ||
                         ', LINE_NUM: '          ||$LineNum         ||
                         ', SEPCHK: '            ||$SepChk          ||
                         ', GVT_SCHED_REC_TYPE: '||$SchedRecType    ||
                         ', PLAN_TYPE: '         ||$PlanType        ||
                         ', DEDCD: '             ||$DedCd           ||
                         ', STATE: '             ||$State           ||
                         ', LOCALITY: '          ||$Locality        ||
                         ', TAX_CLASS: '         ||$TaxClass        ||
                         ', GARNID: '            ||$GarnID

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_GVT_PAM_VEN_WRK
SET GVT_SCHED_SEQ = #UpdateSchedSeq
WHERE GVT_SCHED_PREFIX   = $SchedPrefix
AND   GVT_SCHED_CODE     = $SchedCode
AND   GVT_CHECK_REF_NO   = #CheckRefNo
AND   PAGE_NUM           = #PageNum
AND   LINE_NUM           = #LineNum
AND   SEPCHK             = #SepChk
AND   GVT_SCHED_REC_TYPE = $SchedRecType
AND   PLAN_TYPE          = $PlanType
AND   DEDCD              = $DedCd
AND   STATE              = $State
AND   LOCALITY           = $Locality
AND   TAX_CLASS          = $TaxClass
AND   GARNID             = $GarnID
end-SQL

end-procedure

!********************************
begin-procedure Convert-Check-Ref
!********************************

begin-select
SCHREF.COMPANY
SCHREF.PAYGROUP
SCHREF.PAY_END_DT
SCHREF.OFF_CYCLE

  let $Company  = &SCHREF.COMPANY
  let $PayGroup = &SCHREF.PAYGROUP
  let $PayEndDt = &SCHREF.PAY_END_DT
  let $OffCycle = &SCHREF.OFF_CYCLE

FROM PS_GVT_SCHED_REF SCHREF
WHERE SCHREF.GVT_SCHED_PREFIX = $SchedPrefix
AND   SCHREF.GVT_CHECK_REF_NO = #CheckRefNo
end-select

end-procedure

!***************************************
begin-procedure Update-PayCheck-Schedule
!***************************************

  move #SchedSeq to $SchedSeq   009
  let $PayCheckSchedule = $SchedPrefix || $SchedCode || $SchedSeq

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99

  let $err-statement1 = 'FGPY040, Update Error - Update-PayCheck-Schedule'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_CHECK' ||
                        ', COMPANY: '          ||$Company        ||
                        ', PAYGROUP: '         ||$PayGroup       ||
                        ', PAY_END_DT: '       ||$PayEndDt       ||
                        ', OFF_CYCLE: '        ||$OffCycle       ||
                        ', PAGE_NUM: '         ||$PageNum        ||
                        ', LINE_NUM: '         ||$LineNum        ||
                        ', SEPCHK: '           ||$SepChk

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_PAY_CHECK
SET GVT_SCHEDULE_NO = $PayCheckSchedule
WHERE COMPANY         = $Company
AND   PAYGROUP        = $PayGroup
AND   PAY_END_DT      = $PayEndDt
AND   OFF_CYCLE       = $OffCycle
AND   PAGE_NUM        = #PageNum
AND   LINE_NUM        = #LineNum
AND   SEPCHK          = #SepChk
AND  (GVT_SCHEDULE_NO IS NULL
   OR GVT_SCHEDULE_NO = ' ')
end-SQL

end-procedure

!*************************************
begin-procedure Update-Vendor-Schedule
!*************************************

  if $PlanType = ' '
      do Update-Pay-Tax-Schedule
  else
      do Update-Pay-Deduction-Schedule
  end-if

end-procedure

!**************************************
begin-procedure Update-Pay-Tax-Schedule
!**************************************

  move #SchedSeq to $SchedSeq   009
  let $PayCheckSchedule = $SchedPrefix || $SchedCode || $SchedSeq

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99

  let $err-statement1 = 'FGPY040, Update Error - Update-Pay-Tax-Schedule'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_TAX' ||
                        ', COMPANY: '          ||$Company        ||
                        ', PAYGROUP: '         ||$PayGroup       ||
                        ', PAY_END_DT: '       ||$PayEndDt       ||
                        ', OFF_CYCLE: '        ||$OffCycle       ||
                        ', PAGE_NUM: '         ||$PageNum        ||
                        ', LINE_NUM: '         ||$LineNum        ||
                        ', SEPCHK: '           ||$SepChk         ||
                        ', STATE: '            ||$State          ||
                        ', LOCALITY: '         ||$Locality       ||
                        ', TAX_CLASS: '        ||$TaxClass

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_PAY_TAX
SET GVT_SCHEDULE_NO = $PayCheckSchedule
WHERE COMPANY         = $Company
AND   PAYGROUP        = $PayGroup
AND   PAY_END_DT      = $PayEndDt
AND   OFF_CYCLE       = $OffCycle
AND   PAGE_NUM        = #PageNum
AND   LINE_NUM        = #LineNum
AND   SEPCHK          = #SepChk
AND   STATE           = $State
AND   LOCALITY        = $Locality
AND   TAX_CLASS       = $TaxClass
AND  (GVT_SCHEDULE_NO IS NULL
   OR GVT_SCHEDULE_NO = ' ')
end-SQL

end-procedure

!********************************************
begin-procedure Update-Pay-Deduction-Schedule
!********************************************

  move #SchedSeq to $SchedSeq   009
  let $PayCheckSchedule = $SchedPrefix || $SchedCode || $SchedSeq

  move #CheckRefNo     to $ChecRefNo  9999
  move #PageNum        to $PageNum    9999
  move #LineNum        to $LineNum    9999
  move #SepChk         to $SepChk     99

  let $err-statement1 = 'FGPY040, Update Error - Update-Pay-Deduction-Schedule'
  let $err-statement2 = 'Key Values: TABLE: PS_PAY_DEDUCTION' ||
                        ', COMPANY: '          ||$Company        ||
                        ', PAYGROUP: '         ||$PayGroup       ||
                        ', PAY_END_DT: '       ||$PayEndDt       ||
                        ', OFF_CYCLE: '        ||$OffCycle       ||
                        ', PAGE_NUM: '         ||$PageNum        ||
                        ', LINE_NUM: '         ||$LineNum        ||
                        ', SEPCHK: '           ||$SepChk         ||
                        ', PLAN_TYPE: '        ||$PlanType       ||
                        ', DEDCD: '            ||$DedCd

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_PAY_DEDUCTION
SET GVT_SCHEDULE_NO = $PayCheckSchedule
WHERE COMPANY         = $Company
AND   PAYGROUP        = $PayGroup
AND   PAY_END_DT      = $PayEndDt
AND   OFF_CYCLE       = $OffCycle
AND   PAGE_NUM        = #PageNum
AND   LINE_NUM        = #LineNum
AND   SEPCHK          = #SepChk
AND   PLAN_TYPE       = $PlanType
AND   DEDCD           = $DedCd
AND   DED_CLASS IN ('A','B')
AND  (GVT_SCHEDULE_NO IS NULL
   OR GVT_SCHEDULE_NO = ' ')
end-SQL

end-procedure

!**********************************
begin-procedure Save-Current-Values
!**********************************

  let #SaveCheckRefNo         = #CheckRefNo
  let #SavePageNum            = #PageNum
  let #SaveLineNum            = #LineNum
  let #SaveSepChk             = #SepChk
  let $SaveSchedRecType       = $SchedRecType
  let $SavePlanType           = $PlanType
  let $SaveDedCd              = $DedCd
  let $SaveState              = $State
  let $SaveLocality           = $Locality
  let $SaveTaxClass           = $TaxClass
  let $SaveGarnID             = $GarnID
  let $SaveTaxCompany         = $TaxCompany
  let $SaveGarnType           = $GarnType
  let $SaveDedDistCd          = $DedDistCd
  let $SaveReportingCd        = $ReportingCd
  let $SavePaymentRouting     = $PaymentRouting
  let $SavePaymentSummary     = $PaymentSummary
  let $SaveRemitFreq          = $RemitFreq
  let $SavePayFreq            = $PayFreq
  let $SaveBankCd             = $BankCd
  let $SaveAcctNum            = $AcctNum
  let $SaveAcctType           = $AcctType
  let $SaveEmplID             = $EmplID
  let #SaveRemitAmtCr         = #RemitAmtCr
  let #SaveRemitAmtDr         = #RemitAmtDr
  let #SaveAmount             = #Amount
  let $SaveGWAString          = $GWAString
  let $SaveBETC               = $BETC
  let $SaveFundCd             = $FundCd

end-procedure

!*************************************
begin-procedure Restore-Current-Values
!*************************************

  let #CheckRefNo         = #SaveCheckRefNo
  let #PageNum            = #SavePageNum
  let #LineNum            = #SaveLineNum
  let #SepChk             = #SaveSepChk
  let $SchedRecType       = $SaveSchedRecType
  let $PlanType           = $SavePlanType
  let $DedCd              = $SaveDedCd
  let $State              = $SaveState
  let $Locality           = $SaveLocality
  let $TaxClass           = $SaveTaxClass
  let $GarnID             = $SaveGarnID
  let $TaxCompany         = $SaveTaxCompany
  let $GarnType           = $SaveGarnType
  let $DedDistCd          = $SaveDedDistCd
  let $ReportingCd        = $SaveReportingCd
  let $PaymentRouting     = $SavePaymentRouting
  let $PaymentSummary     = $SavePaymentSummary
  let $RemitFreq          = $SaveRemitFreq
  let $PayFreq            = $SavePayFreq
  let $BankCd             = $SaveBankCd
  let $AcctNum            = $SaveAcctNum
  let $AcctType           = $SaveAcctType
  let $EmplID             = $SaveEmplID
  let #RemitAmtCr         = #SaveRemitAmtCr
  let #RemitAmtDr         = #SaveRemitAmtDr
  let #Amount             = #SaveAmount
  let $GWAString          = $SaveGWAString
  let $BETC               = $SaveBETC
  let $FundCd             = $SaveFundCd

end-procedure

!********************************************
begin-procedure Empty-Distribution-Code-Array
!********************************************
  let #DistributeCnt  = 0

  Clear-Array name=DistCodeArray

end-procedure

!**********************************
begin-procedure Empty-TASBETC-Array
!**********************************
  let #TASBETCCnt  = 0

  Clear-Array name=TASBETCArray

end-procedure

!**************************************************
begin-procedure Cumulate-to-Distribution-Code-Array
!**************************************************

  if $GWAString <> $PymntPrevGWA or $BETC <> $PymntPrevBETC

      if #Pymnt_TASBETC_Cnt >= #MaxTASBETC_per_Pymnt
          add 1 to #DistCd_PymentSeq
          let #Pymnt_TASBETC_Cnt = 0
      end-if

      add 1 to #Pymnt_TASBETC_Cnt

      add 1 to #DistributeCnt

      if #DistributeCnt < #DistributeSize

          put $GWAString $BETC $FundCd $DedDistCd $ReportingCd $RemitFreq $PayFreq $GarnType
              $BankCd $AcctNum $AcctType #RemitAmtCr #RemitAmtDr #Amount #DistCd_PymentSeq
          into DistCodeArray(#DistributeCnt)
               GWAString BETC FundCd DedDistCd ReportingCd RemitFreq PayFreq GarnType
               BankCd AcctNum AcctType RemitAmtCr RemitAmtDr Amount PymntSeq
      else
          display '***Error*** Distribution Code Array limit exceeded'
          stop
      end-if

      let $PymntPrevGWA         = $GWAString
      let $PymntPrevBETC        = $BETC
  else
      array-add #RemitAmtCr #RemitAmtDr #Amount to DistCodeArray(#DistributeCnt) RemitAmtCr RemitAmtDr Amount
  end-if

end-procedure

!**********************************************
begin-procedure Process-Distribution-Code-Array
!**********************************************

  let $SchedRecType       = $PrevRecordType
  let $PlanType           = $PrevPlanType
  let $DedCd              = $PrevDedCd
  let $TaxCompany         = $PrevTaxComp
  let $State              = $PrevState
  let $Locality           = $PrevLocality
  let $TaxClass           = $PrevTaxClass
  let $GarnID             = $PrevGarnID
  let $PaymentRouting     = $PrevPymntRouting
  let $PaymentSummary     = $PrevPymntSummary
  let #LastPymntSeq       = #PymntSeq

  let #TotalRemitAmt      = 0
  let #idx = 1

  while #idx <= #DistributeCnt

      get #SumRemitAmtCr #SumRemitAmtDr from DistCodeArray(#idx) RemitAmtCr RemitAmtDr

      let #TotalRemitAmt = #TotalRemitAmt + #SumRemitAmtDr - #SumRemitAmtCr

      add 1 to #idx
  end-while

  if #TotalRemitAmt >= 0
      let #idx = 1

      while #idx <= #DistributeCnt

          get $DistCdGWAString $DistCdBETC $DistFundCd $DistDedDistCd $DistReportingCd $DistRemitFreq $DistPayFreq $DistGarnType
              $DistBankCd $DistAcctNum $DistAcctType #SumRemitAmtCr #SumRemitAmtDr #SumAmount #DistCd_PymentSeq
          from DistCodeArray(#idx)
               GWAString BETC FundCd DedDistCd ReportingCd RemitFreq PayFreq GarnType
               BankCd AcctNum AcctType RemitAmtCr RemitAmtDr Amount PymntSeq

          let $GWAString   = $DistCdGWAString
          let $BETC        = $DistCdBETC
          let $FundCd      = $DistFundCd
          let $DedDistCd   = $DistDedDistCd
          let $ReportingCd = $DistReportingCd
          let $RemitFreq   = $DistRemitFreq
          let $PayFreq     = $DistPayFreq
          let $GarnType    = $DistGarnType
          let $BankCd      = $DistBankCd
          let $AcctNum     = $DistAcctNum
          let $AcctType    = $DistAcctType

          do Process-DistCodeArray-Entry

          let #PymntSeq    = #LastPymntSeq + #DistCd_PymentSeq
          let #RemitAmtCr  = #SumRemitAmtCr
          let #RemitAmtDr  = #SumRemitAmtDr
          let #Amount      = #SumAmount

          do Write-Vendor-Summary

          add 1 to #idx
      end-while
  else
      evaluate $SchedRecType
          when = 'D'
              let $DispMsg = 'Plan Type: ' || $PlanType || ', Deduction Code: ' || $DedCd
              break
          when = 'G'
              let $DispMsg = 'Garnishment ID: ' || $GarnID
              break
          when-other
              let $DispMsg = 'Company: ' || $TaxCompany || ', State: ' || $State || ', Locality ' || $Locality || ', Tax Class: ' || $TaxClass
      end-evaluate

      let $DispMsg = $DispMsg || ' - record bypassed, total amount is negative.'
      display $DispMsg
  end-if

end-procedure

!******************************************
begin-procedure Process-DistCodeArray-Entry
!******************************************

  let #PrevCheckRefNo = 0
  let #TTL_RemitAmtDr = 0
  let #TTL_RemitAmtCr = 0
  let #TTL_Amt        = 0

begin-select
DSTWRK.GVT_CHECK_REF_NO
DSTWRK.PAGE_NUM
DSTWRK.LINE_NUM
DSTWRK.SEPCHK
DSTWRK.GARN_TYPE
DSTWRK.GVT_DED_DIST_CD
DSTWRK.GVT_REPORTING_CD
DSTWRK.REMIT_FREQUENCY
DSTWRK.PAY_FREQUENCY
DSTWRK.FUND_CODE
DSTWRK.BANK_CD
DSTWRK.ACCOUNT_NUM
DSTWRK.ACCOUNT_TYPE
DSTWRK.GVT_CR_REMIT_AMT
DSTWRK.GVT_DR_REMIT_AMT
DSTWRK.GVT_AMT

  let #CheckRefNo         = &DSTWRK.GVT_CHECK_REF_NO
  let #PageNum            = &DSTWRK.PAGE_NUM
  let #LineNum            = &DSTWRK.LINE_NUM
  let #SepChk             = &DSTWRK.SEPCHK
  let $GarnType           = &DSTWRK.GARN_TYPE
  let $DedDistCd          = &DSTWRK.GVT_DED_DIST_CD
  let $ReportingCd        = &DSTWRK.GVT_REPORTING_CD
  let $RemitFreq          = &DSTWRK.REMIT_FREQUENCY
  let $PayFreq            = &DSTWRK.PAY_FREQUENCY
  let $BankCd             = &DSTWRK.BANK_CD
  let $AcctNum            = &DSTWRK.ACCOUNT_NUM
  let $AcctType           = &DSTWRK.ACCOUNT_TYPE
  let #RemitAmtCr         = &DSTWRK.GVT_CR_REMIT_AMT
  let #RemitAmtDr         = &DSTWRK.GVT_DR_REMIT_AMT
  let #Amount             = &DSTWRK.GVT_AMT
  let $FundCd             = &DSTWRK.FUND_CODE

  if #CheckRefNo <> #PrevCheckRefNo
      do Convert-Check-Ref
      let #PrevCheckRefNo = #CheckRefNo
  end-if

  let #PymntSeq = #LastPymntSeq + #DistCd_PymentSeq
  do Write-Vendor-Detail
  do Update-Vendor-Schedule

FROM PS_GVT_PAM_VEN_WRK DSTWRK
WHERE DSTWRK.GVT_SCHED_PREFIX   = $SchedPrefix
AND   DSTWRK.GVT_SCHED_CODE     = $SchedCode
AND   DSTWRK.GVT_SCHED_SEQ      = #ProcSchedSeq
AND   DSTWRK.GVT_SCHED_REC_TYPE = $SchedRecType
AND   DSTWRK.PLAN_TYPE          = $PlanType
AND   DSTWRK.DEDCD              = $DedCd
AND   DSTWRK.STATE              = $State
AND   DSTWRK.LOCALITY           = $Locality
AND   DSTWRK.TAX_CLASS          = $TaxClass
AND   DSTWRK.GARNID             = $GarnID
AND   DSTWRK.GVT_PYMNT_RTNG     = $PrevPymntRouting
AND   DSTWRK.GVT_PYMNT_SUMM     = $PrevPymntSummary
AND   DSTWRK.GVT_TAS_GWA        = $DistCdGWAString
AND   DSTWRK.GVT_BETC_CD        = $DistCdBETC
end-select

end-procedure

!**************************************
begin-procedure Check-For-TASBETC-Break
!**************************************

  if $GWAString <> $PrevGWA or $BETC <> $PrevBETC

      let $SkipFlag   = 'N'
      do Locate-TASBETC-entry
      let $PrevGWA    = $GWAString
      let $PrevBETC   = $BETC
  else
      get #CumulateAmt from TASBETCArray(#CumIdx) TotalAmt
  end-if

  if $SkipFlag = 'N'
      let #TestAmt = #RemitAmtDr - #RemitAmtCr
      if #TestAmt > #MaxTASBETCAmt
          display 'Single deduction transaction amount is greater than maximum TAS BETC amount'
          stop
      end-if

      let #TestAmt = #CumulateAmt + #RemitAmtDr - #RemitAmtCr

      if #TestAmt > #MaxTASBETCAmt
          let $SkipFlag = 'A'
          do Update-Vendor-Schedule-Seq
      else
          put #TestAmt into TASBETCArray(#CumIdx) TotalAmt
      end-if
  else
      do Update-Vendor-Schedule-Seq
  end-if

end-procedure

!***********************************
begin-procedure Locate-TASBETC-entry
!***********************************

  let #tbidx       = 0
  let #CumIdx      = 0
  let #CumulateAmt = 0
  let $tbFound     = 'N'

  while #tbidx <= #TASBETCCnt and $tbFound = 'N'

      get $tbGWAString $tbCdBETC #tbAmount from TASBETCArray(#tbidx) GWAString BETC TotalAmt

      if $tbGWAString = $GWAString and $tbCdBETC = $BETC
          let $tbFound = 'Y'
          let #CumulateAmt = #tbAmount
          let #CumIdx      = #tbidx
      else
          add 1 to #tbidx
      end-if
  end-while

  if $tbFound = 'N'
      do Add-To-TASBETC-Array
  end-if

end-procedure


!***********************************
begin-procedure Add-To-TASBETC-Array
!***********************************

  add 1 to #TASBETCCnt
  if #TASBETCCnt >= #TASBETCSize
      let $SkipFlag = 'Y'
  else
      add 1 to #Sched_TASBETC_Cnt
      if #Sched_TASBETC_Cnt > #MaxTASBETC_per_Sched
          let $SkipFlag = 'Y'
      else
          let #tbidx       = #TASBETCCnt
          let #CumIdx      = #TASBETCCnt
          let #CumulateAmt = 0
          put $GWAString $BETC 0 into TASBETCArray(#tbidx) GWAString BETC TotalAmt
      end-if
  end-if

end-procedure

!***************************************************************************
begin-procedure Determine-Credit-Payment ($GWAString, $BETC, :$CreditPaymnt)
!***************************************************************************

  let $CreditPaymnt = 'N'

begin-select
BETCDEFN.GVT_PYMT_OR_CLLCTN
BETCDEFN.GVT_ADJUSTMENT

  let $PymtOrCollect = &BETCDEFN.GVT_PYMT_OR_CLLCTN
  let $Adjustment    = &BETCDEFN.GVT_ADJUSTMENT

  if $PymtOrCollect = 'P'
      if $Adjustment = 'Y'
          let $CreditPaymnt = 'Y'
      end-if
  else
      if $PymtOrCollect = 'C' and $Adjustment = 'N'
          let $CreditPaymnt = 'Y'
      end-if
  end-if

FROM PS_GVT_BETC_DEFN BETCDEFN
   , PS_GVT_TAS_DEFN  TASDEFN
WHERE TASDEFN.GVT_TAS_GWA   = $GWAString
AND   BETCDEFN.GVT_BETC_CD  = $BETC
AND   BETCDEFN.GVT_TAS_AID  = TASDEFN.GVT_TAS_AID
AND   BETCDEFN.GVT_TAS_MAIN = TASDEFN.GVT_TAS_MAIN
AND   BETCDEFN.GVT_TAS_SP   = TASDEFN.GVT_TAS_SP
AND   BETCDEFN.GVT_TAS_ATA  = TASDEFN.GVT_TAS_ATA
AND   BETCDEFN.GVT_TAS_BPOA = TASDEFN.GVT_TAS_BPOA
AND   BETCDEFN.GVT_TAS_EPOA = TASDEFN.GVT_TAS_EPOA
AND   BETCDEFN.GVT_TAS_A    = TASDEFN.GVT_TAS_A
AND   BETCDEFN.GVT_TAS_SUB  = TASDEFN.GVT_TAS_SUB
end-select

end-procedure

!**************************************
begin-procedure Update-Change-Indicator
!**************************************

  let $err-statement1 = 'FGPY040, Update Error - Update-Change-Indicator'
  let $err-statement2 = 'Key Values: TABLE: PS_GVT_SCHED_GROUP' ||
                        ', GVT_SCHED_PREFIX: ' || $SchedPrefix

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_GVT_SCHED_GROUP
SET GVT_SCHED_INDC_CHG = 'N'
WHERE GVT_SCHED_PREFIX  = $SchedPrefix
end-SQL

  let $err-statement1 = 'FGPY040, Update Error - Update-Change-Indicator'
  let $err-statement2 = 'Key Values: TABLE: PS_RUNCTL_FGPY040' ||
                        ', OPRID: '       || $Prcs_OprID       ||
                        ', RUN_CNTL_ID: ' || $Prcs_Run_Cntl_ID

begin-SQL on-error=SQL-Statement-Error
UPDATE PS_RUNCTL_FGPY040
SET GVT_OFF_CYCLE_CHG = 'N'
WHERE OPRID          = $Prcs_OprID
AND   RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
end-SQL

end-procedure

!*********************************************
begin-procedure Prepare-Vendor-Extract-Summary
!*********************************************

begin-select
VENSUM.GVT_SCHED_CODE
VENSUM.GVT_SCHED_SEQ
VENSUM.GVT_SCHED_REC_TYPE
VENSUM.GVT_REPORTING_CD
VENSUM.GARN_TYPE
VENSUM.GVT_TAS_GWA
VENSUM.GVT_BETC_CD
SUM(VENSUM.GVT_CR_REMIT_AMT) &VENSUM.GVT_CR_REMIT_AMT
SUM(VENSUM.GVT_DR_REMIT_AMT) &VENSUM.GVT_DR_REMIT_AMT

  let $SchedCode     = &VENSUM.GVT_SCHED_CODE
  let #SchedSeq      = &VENSUM.GVT_SCHED_SEQ
  let $SchedRecType  = &VENSUM.GVT_SCHED_REC_TYPE
  let $ReportingCd   = &VENSUM.GVT_REPORTING_CD
  let $GarnType      = &VENSUM.GARN_TYPE
  let $GWAString     = &VENSUM.GVT_TAS_GWA
  let $BETC          = &VENSUM.GVT_BETC_CD
  let #RemitAmtCr    = &VENSUM.GVT_CR_REMIT_AMT
  let #RemitAmtDr    = &VENSUM.GVT_DR_REMIT_AMT

  let #ExtTtlAmt     = #RemitAmtDr - #RemitAmtCr
  do Write-Schedule-Extract-Summary
  do Write-Schedule-Extract-History

FROM PS_GVT_PAM_VEN_SUM VENSUM
WHERE VENSUM.GVT_SCHED_PREFIX  = $SchedPrefix
GROUP BY VENSUM.GVT_SCHED_CODE, VENSUM.GVT_SCHED_SEQ, VENSUM.GVT_SCHED_REC_TYPE, VENSUM.GVT_REPORTING_CD,
         VENSUM.GARN_TYPE, VENSUM.GVT_TAS_GWA, VENSUM.GVT_BETC_CD
end-select

end-procedure

!**************************************
begin-procedure Create-Schedule-Control
!**************************************

begin-select distinct
EXSUM.GVT_SCHED_CODE
EXSUM.GVT_SCHED_SEQ

  let $SchedCode = &EXSUM.GVT_SCHED_CODE
  let  #SchedSeq = &EXSUM.GVT_SCHED_SEQ

  do Write-Schedule-Control


FROM PS_GVT_SCHED_EXSUM EXSUM
WHERE EXSUM.GVT_SCHED_PREFIX  = $SchedPrefix
end-select

end-procedure

!*****************************
begin-procedure Get-Balance-ID
!*****************************

  let $BalanceID = 'CY'

begin-select
BAL_ID_FOR_CAL_YR

  let $BalanceID = &BAL_ID_FOR_CAL_YR

FROM PS_INSTALLATION
end-select

end-procedure

!**********************************
begin-procedure SQL-Statement-Error
!**********************************

  if #SQL-Status <> 0
      display 'SQL-STATEMENT-ERROR '

      display $err-statement1
      display $err-statement2
      display ' Error : ' noline
      display $SQL-error
      display ' SQL Status : ' noline
      display #SQL-Status

      do Rollback-Transaction
      stop
  end-if

end-procedure

#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'curdttim.sqc'  !Routines to get current date/time
#Include 'stderror.sqc'  !Routine for error display
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'tranctrl.sqc'  !Commit-Transaction
