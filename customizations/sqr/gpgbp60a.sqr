!***********************************************************************
! GPGBP60A.SQR - END OF YEAR AMENDED P60 INFORMATION                   *
! This report prints the amended P60 information,                      *
! based on user's supplied parameters.                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------*
!                                                                      *
!       $Release:  HR92                                       *
!           $Bug:  23051849                                   *
!                                                                      *
!----------------------------------------------------------------------*

!***********************************************************************  
!*** Setting up the environment                                        *
!***********************************************************************

#include 'setenv.sqc'   ! Set environment

begin-setup

#DEFINE PAPER_SIZE_SAV {PAPER_SIZE}
#DEFINE PAPER_SIZE A4
#include 'setupdb.sqc'


 #Define ColR 157  !Column # referenced by Standard Headings

 declare-printer HP-P60A
  type=HP
  point-size=7.2
  pitch=18
 end-declare

 declare-layout P60A-LANDSCAPE
  paper-size=(11.69,8.27)
  orientation=LANDSCAPE
  line-height=9
  char-width=4.32
  bottom-margin=.05
  left-margin=.05
  right-margin=.05
 end-declare

 declare-report P60A
  layout=P60A-LANDSCAPE
  printer-type=HP
 end-declare

end-setup

!***********************************************************************   
!*** Constants definitions                                             *
!***********************************************************************

!Define Column Location Variables


#define PosHeadCol1             30
#define PosHeadCol2             55
#define PosHeadCol3            120
#define PosStart                 8
#define PosTaxDtls              55
#define PosAbsDtls              60
#define PosNIDtls              160 
#define PosLblDtlsCol1           5
#define PosLblDtlsCol2          90
#define PosDtDtls               65
#define PosTaxBasis1            65
#define PosTaxBasis2            62
#define PosWidowLife            60
#define PosWk53                 78
#define PosSV                   78
#define PosScon                167 
#define PosNICategory1         178 
#define PosNICategory2         180
 

!******************************************************************
!*** Heading section - Title
!******************************************************************

 begin-heading 17 !This number must be changed to match the number
                 !of lines in the header (including column headings)

        let $ReportDateTime =  $ReportDate || ' ' ||  $ReportTime
                         
        print $ReportTitle                      () Bold center POINT-SIZE = 13
        print 'Report ID: '                     (+2, {PosStart}) 
        print $ReportID                         (, +11)       
        print 'Date: '                          (, {PosHeadCol2})
        print $ReportDateTime                   (, +10) 
        print 'Pay Entity: '                    (+2, {PosStart})
        print $PNL_PAY_ENTITY                   (, {PosHeadCol1})
        print 'Tax Year Begins In: '            (, {PosHeadCol2})
        print #PNL_TAX_YEAR                     (, +20)     EDIT 9999    
        print 'Amended Return Version Number: ' (, {PosHeadCol3}) 
        print #MAIN_SEL_VERSION                 (, +20)     EDIT 9999999999             
        print 'Employee ID: '                   (+2, {PosStart})
        print $MAIN_SEL_EMPLID                  (, {PosHeadCol1})        
        print 'Employee Record Number: '        (, {PosHeadCol2})  
        print #MAIN_SEL_EMPL_RCD                (, +16)     EDIT 009 
        print 'Name: '                          (, {PosHeadCol3})
        print $EE_NAME                          (, +5)
        print 'Gender: '                        (+2, {PosStart})
        print $PERS_DT_SEX                      (, {PosHeadCol1})        
        print 'Date of Birth: '                 (, {PosHeadCol2}) 
        print $PERS_DT_birthdate                (, +25)        
        print 'NI Number: '                     (, {PosHeadCol3})
        print $NI_NUMBER                        (, +8)        
        print 'Address: '                       (+2, {PosStart})
        print $EE_ADDRESS1                      (, {PosHeadCol1})
        if $EE_ADDRESS2 <> '' 
           print $EE_ADDRESS2                      (+1, {PosHeadCol1})
        end-if        
        if $EE_ADDRESS3 <> ''         
           print $EE_ADDRESS3                      (+1, {PosHeadCol1})
        end-if         
        if $EE_ADDRESS4 <> ''         
           print $EE_ADDRESS4                      (+1, {PosHeadCol1})
        end-if
        print $EE_CITY                          (+1, {PosHeadCol1})
        
        let #PosColState = 30 + length($EE_CITY) * 2
               
        print $EE_STATE                         (, #PosColState)        
        print $EE_POSTAL                        (, +8)
        
        if $EE_COUNTY <> ''        
           print $EE_COUNTY                        (+1, {PosHeadCol1})
        end-if

        print 'Amendments from Original P60'    (17) bold center
end-heading

!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report
#Debug Show 'begin report -> '
        !----------------------------------------------------------
        !***    Call the main procedures
        !----------------------------------------------------------
        do INIT-REPORT
        do MAIN-REPORT
        move #CountError to $CountError 99999
        do Append-Log ('WHERE_STATEMENT'  , $WHERE_STATEMENT)
        do Append-Log ('CountError '  , $CountError)
        do Append-Log('----------------------------- ' , '------------------------------' )
        do Get-log
        
#Debug Show 'begin report <- '
end-report

!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :Init Report
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure Init-report
#Debug Show 'Init-report -> ' 

        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME
        
        #Debug SHOW 'Running Amended P60A SQR in the Process Scheduler'
        do GET-VALUES !SQR run through process scheduler
 
        let $ReportID    = 'P60AMEND'
        let $ReportTitle = 'Additional P60 Information'

#Debug Show 'Init-report <- ' 
end-procedure Init-report


!*=================================================================
! Procedure    :Init-Variables
! Comment      :Initializations of all variables used by the report
!*=================================================================
begin-procedure Init-variables
#Debug Show 'Init-variables -> '
       
        let #CountError         = 0
        let #counter            = 0
        let #LEL_VALUE          = 0
        let #LELET_VALUE        = 0
        let #ETUEL_VALUE        = 0
        let #VAL_NI_ERS_YTD     = 0
        let #VAL_NI_EES_YTD     = 0
        let #VAL_NI_ERSRBT_YTD  = 0
        let #VAL_NI_EESRBT_YTD  = 0
        let $SCON               = ' '
        let #VAL_SPPA_YTD       = 0
        let #VAL_SPPB_YTD       = 0
        let #SSP_PAID           = 0
        let #SMP_PAID           = 0
        let #SAP_PAID           = 0
        let #ASPP_PAID      = 0
        let #VAL_STUDENT_LOAN   = 0
        let #GROSS_PAY          = 0
        let #TOTAL_PAY          = 0
        let #CURRENT_TAX        = 0
        let #TOTAL_TAX          = 0
        let $VR_WK53            = ' '
        let #P45_PAY_TD         = 0
        let #P45_TAX_TD         = 0
        let $TAXCODE            = ' '
        let #VAL_WIDOW          = 0
        let #VAL_LIFE           = 0
#Debug Show 'Init-variables <- '   
end-procedure Init-variables


!*=================================================================
! Procedure     :Get-Values
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure Get-values
#Debug Show 'Get-values -> ' 

begin-SELECT on-error=SQL-ERROR   

C.PAY_ENTITY
C.VERSION
C.EMPLID
C.GPGB_TAX_BGN_YR
C.GPGB_EDI_RTI_IND

        let $PNL_PAY_ENTITY         = RTRIM(&C.PAY_ENTITY,' ')
        let #PNL_VERSION            = &C.VERSION
        let $PNL_VERSION            = EDIT(#PNL_VERSION,'9999999999')        
        let $PNL_EMPLID             = RTRIM(&C.EMPLID,' ')
        let $PNL_TAX_YEAR           = RTRIM(EDIT(&C.GPGB_TAX_BGN_YR, '9999'),' ')
        let #PNL_TAX_YEAR           = &C.GPGB_TAX_BGN_YR
        let $EDI_RTI_IND            = &C.GPGB_EDI_RTI_IND

FROM  PS_GPGB_RUNCTL_SQR C
WHERE C.OPRID         = $Prcs_OprID
AND C.RUN_CNTL_ID     = $Prcs_Run_Cntl_ID

end-SELECT

#Debug Show 'Get-values <- ' 
end-procedure Get-values


!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : Main Report                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure Main-report
#Debug Show 'Main-report -> ' 

        do BUILD-WHERE-RUNCTL
        
        if $EDI_RTI_IND = 'R' 
        do P60A-SELECT-EMPLOYEES_RTI     
        else
        do P60A-SELECT-EMPLOYEES
        end-if
        
        do UPDATE-PRCS-RUN-STATUS
         
        #DEFINE PAPER_SIZE {PAPER_SIZE_SAV}
               
#Debug Show 'Main-report <- '
end-procedure Main-report


!*=================================================================
! Procedure:  P60-Select-Employees                                !
! Descr:      Main Select                                         !
!                                                                 !
!*=================================================================

begin-procedure P60A-Select-employees
#Debug Show 'P60A-Select-employees -> ' 
  
begin-SELECT on-error=SQL-ERROR

DISTINCT A.EMPLID    &A.EMPLID       
A.EMPL_RCD           &A.EMPL_RCD     
A.VERSION            &A.VERSION 
A.GPGB_TAX_BGN_YR    &A.GPGB_TAX_BGN_YR
A.USER_KEY1          &A.USER_KEY1
A.HIRE_DT            &A.HIRE_DT     
A.PAY_ENTITY         &A.PAY_ENTITY        
A.TAX_CODE_UK        &A.TAX_CODE_UK
A.TAX_BASIS_UK       &A.TAX_BASIS_UK
A.NATIONAL_ID        &A.NATIONAL_ID
A.LEAVE_DT           &A.LEAVE_DT
A.GPGB_AD_P45_PAY_TD &A.GPGB_P45_PAY_TD
A.GPGB_AD_P45_TAX_TD &A.GPGB_P45_TAX_TD
A.GPGB_WK53_IND      &A.GPGB_WK53_IND
A.NAME               &A.NAME
A.BIRTHDATE          &A.BIRTHDATE
A.DT_OF_DEATH        &A.DT_OF_DEATH
A.SEX                &A.SEX
A.COUNTRY            &A.COUNTRY
A.ADDRESS1           &A.ADDRESS1
A.ADDRESS2           &A.ADDRESS2
A.ADDRESS3           &A.ADDRESS3
A.ADDRESS4           &A.ADDRESS4
A.COUNTY             &A.COUNTY
A.CITY               &A.CITY
A.STATE              &A.STATE
A.POSTAL             &A.POSTAL
A.GPGB_SMP           &A.GPGB_SMP
A.GPGB_SSP           &A.GPGB_SSP
A.GPGB_SPPA          &A.GPGB_SPPA
A.GPGB_SPPB          &A.GPGB_SPPB
A.GPGB_SAP           &A.GPGB_SAP
A.GPGB_ASPPA     &A.GPGB_ASPPA
A.GPGB_ASPPB     &A.GPGB_ASPPB
A.GPGB_EE_GROSS      &A.GPGB_EE_GROSS
A.GPGB_WIDOW         &A.GPGB_WIDOW 
A.GPGB_LIFE          &A.GPGB_LIFE
A.GPGB_EE_TAX        &A.GPGB_EE_TAX
A.GPGB_EE_SL         &A.GPGB_EE_SL


   let $EmployeeBreak = rtrim(&A.EMPLID,' ') 

   print $EmployeeBreak () on-break level = 1 procedure=START-NEW-PAGE Print=never
    
   let $EmployeeRcdBreak = rtrim(to_char(&A.EMPL_RCD),' ') 

   print $EmployeeRcdBreak () on-break level = 2 procedure=START-NEW-PAGE Print=never

   let $VersionBreak = rtrim(to_char(&A.VERSION),' ') 

   print $VersionBreak () on-break level = 3 procedure=START-NEW-PAGE Print=never
      
   let $HireDtBreak = rtrim(&A.HIRE_DT,' ') 

   print $HireDtBreak () on-break level = 4 procedure=START-NEW-PAGE Print=never          

   let $MAIN_SEL_EMPLID        = RTRIM(&A.EMPLID,' ')
   let #MAIN_SEL_EMPL_RCD      = &A.EMPL_RCD
   let #MAIN_SEL_VERSION       = &A.VERSION
   let $USER_KEY1              = &A.USER_KEY1
   let $MAIN_SEL_PAY_ENTITY    = RTRIM(&A.PAY_ENTITY,' ')
   LET $W_HIRE_DT              = DATETOSTR(&A.HIRE_DT, 'MM/DD/YYYY')
   let #TAX_BGN_YR             = &A.GPGB_TAX_BGN_YR
   let #TAX_BASIS              = &A.TAX_BASIS_UK
   let $TAXCODE                = &A.TAX_CODE_UK
   let $NI_NUMBER              = &A.NATIONAL_ID
   let $W_TERM_DT              = DATETOSTR(&A.LEAVE_DT, 'MM/DD/YYYY')
   let #P45_PAY_TD             = &A.GPGB_P45_PAY_TD
   let #P45_TAX_TD             = &A.GPGB_P45_TAX_TD
   let $EE_ADDRESS1            = RTRIM(&A.ADDRESS1, ' ')
   let $EE_ADDRESS2            = RTRIM(&A.ADDRESS2, ' ')
   let $EE_ADDRESS3            = RTRIM(&A.ADDRESS3, ' ')
   let $EE_ADDRESS4            = RTRIM(&A.ADDRESS4, ' ')   
   let $EE_CITY                = RTRIM(&A.CITY, ' ')
   let $EE_POSTAL              = RTRIM(&A.POSTAL, ' ')
   let $EE_STATE               = RTRIM(&A.STATE, ' ')
   let $EE_COUNTY              = RTRIM(&A.COUNTY, ' ')   
   let $EE_COUNTRY             = RTRIM(&A.COUNTRY, ' ')
   let $EE_NAME                = RTRIM(&A.NAME, ' ')
   let $PERS_DT_birthdate      = DATETOSTR(&A.BIRTHDATE, 'MM/DD/YYYY')
   let $PERS_DT_sex            = RTRIM(&A.SEX,' ')
   let #SSP_PAID               = &A.GPGB_SSP
   let #SMP_PAID               = &A.GPGB_SMP
   let #VAL_SPPA_YTD           = &A.GPGB_SPPA
   let #VAL_SPPB_YTD           = &A.GPGB_SPPB
   let #SAP_PAID               = &A.GPGB_SAP
   let #ASPP_PAID         =(&A.GPGB_ASPPA+&A.GPGB_ASPPB)
   let #VAL_STUDENT_LOAN       = &A.GPGB_EE_SL
   let #GROSS_PAY              = &A.GPGB_EE_GROSS 
   let #CURRENT_TAX            = &A.GPGB_EE_TAX
   let #VAL_LIFE               = &A.GPGB_LIFE
   let #VAL_WIDOW              = &A.GPGB_WIDOW
   let $VR_WK53                = RTRIM(&A.GPGB_WK53_IND,' ')
   
   DO Print-Report-Details              
   Do P60A-Select-NI   
       
FROM PS_GPGB_EDI_ADJ A
[$Where_statement]
ORDER BY A.EMPLID,
         A.EMPL_RCD,
         A.VERSION,
         A.HIRE_DT

END-SELECT

#Debug Show 'P60A-Select-employees <- ' 
end-procedure P60A-Select-employees

begin-procedure P60A-Select-NI
#Debug Show 'P60A-Select-NI -> ' 

let #NI_COUNT = 1

begin-SELECT on-error=SQL-ERROR

NI.GPGB_SCON          &NI.GPGB_SCON
NI.GPGB_NI_CATEGORY   &NI.GPGB_NI_CATEGORY
NI.GPGB_LEL_VALUE     &NI.GPGB_LEL_VALUE
NI.GPGB_LELET_VALUE   &NI.GPGB_LELET_VALUE
NI.GPGB_ETUEL_VALUE   &NI.GPGB_ETUEL_VALUE
NI.GPGB_ER_NIC_VALUE  &NI.GPGB_ER_NIC_VALUE
NI.GPGB_ER_RBT_VALUE  &NI.GPGB_ER_RBT_VALUE
NI.GPGB_EE_NIC_VALUE  &NI.GPGB_EE_NIC_VALUE
NI.GPGB_EE_RBT_VALUE  &NI.GPGB_EE_RBT_VALUE
NI.GPGB_ETUAP_VALUE   &NI.GPGB_ETUAP_VALUE
NI.GPGB_UAPUEL_VALUE  &NI.GPGB_UAPUEL_VALUE

   let $NICategory  = RTRIM(&NI.GPGB_NI_CATEGORY,' ')
   let #Remainder = mod(#NI_COUNT, 2)
   
   if #NI_COUNT > 1 
      if #Remainder <> 00
         Do START-NEW-PAGE
      end-if
   end-if
   
   let $SCON                   = RTRIM(&NI.GPGB_SCON,' ')
   let #LEL_VALUE              = &NI.GPGB_LEL_VALUE
   let #LELET_VALUE            = &NI.GPGB_LELET_VALUE
   let #ETUEL_VALUE            = &NI.GPGB_ETUEL_VALUE
   let #ETUAP_VALUE            = &NI.GPGB_ETUAP_VALUE
   let #UAPUEL_VALUE           = &NI.GPGB_UAPUEL_VALUE
   let #VAL_NI_ERS_YTD         = &NI.GPGB_ER_NIC_VALUE
   let #VAL_NI_EES_YTD         = &NI.GPGB_EE_NIC_VALUE
   let #VAL_NI_ERSRBT_YTD      = &NI.GPGB_ER_RBT_VALUE
   let #VAL_NI_EESRBT_YTD      = &NI.GPGB_EE_RBT_VALUE
      
   DO Print-NI-Details
   let #NI_COUNT = #NI_COUNT + 1
   
FROM PS_GPGB_EDI_ADJ_NI NI
WHERE NI.EMPLID = $MAIN_SEL_EMPLID
AND   NI.EMPL_RCD = #MAIN_SEL_EMPL_RCD
AND   NI.VERSION = #MAIN_SEL_VERSION
AND   NI.GPGB_TAX_BGN_YR = #TAX_BGN_YR
AND   NI.USER_KEY1 = $USER_KEY1

END-SELECT
         
#Debug Show 'P60A-Select-NI <- ' 
end-procedure P60A-Select-NI


!*=================================================================
! Procedure:  P60-Select-Employees_RTI                                !
! Descr:      Main Select                                         !
!                                                                 !
!*=================================================================

begin-procedure P60A-Select-employees_rti
#Debug Show 'P60A-Select-employees_rti -> ' 
  
begin-SELECT on-error=SQL-ERROR
DISTINCT A.EMPLID    &B.EMPLID       
A.EMPL_RCD           &B.EMPL_RCD     
A.VERSION            &B.VERSION 
A.GPGB_TAX_BGN_YR    &B.GPGB_TAX_BGN_YR
A.USER_KEY1          &B.USER_KEY1
A.HIRE_DT            &B.HIRE_DT  
A.PAY_ENTITY         &B.PAY_ENTITY 
B.NATIONAL_ID        &B.NATIONAL_ID       
A.DESCR                 &B.DESCR
A.LEAVE_DT           &B.LEAVE_DT
A.NAME               &B.NAME
A.BIRTHDATE          &B.BIRTHDATE
A.DT_OF_DEATH        &B.DT_OF_DEATH
A.SEX                &B.SEX
A.COUNTRY            &B.COUNTRY
A.ADDRESS1           &B.ADDRESS1
A.ADDRESS2           &B.ADDRESS2
A.ADDRESS3           &B.ADDRESS3
A.ADDRESS4           &B.ADDRESS4
A.COUNTY             &B.COUNTY
A.CITY               &B.CITY
A.STATE              &B.STATE
A.POSTAL             &B.POSTAL
A.GPGB_SMP_EYU       &B.GPGB_SMP
A.GPGB_SSP_EYU       &B.GPGB_SSP
A.GPGB_ORD_SPP       &B.GPGB_SPPA
A.GPGB_SAP_EYU       &B.GPGB_SAP
A.GPGB_ADD_SPP       &B.GPGB_ASPPA
A.GPGB_SHPP_EYU      &B.GPGB_SHPP_EYU
A.GPGB_TAXABLE_PAY   &B.GPGB_EE_GROSS
A.GPGB_EE_TAX_EYU    &B.GPGB_EE_TAX
A.GPGB_EE_SL_EYU     &B.GPGB_EE_SL   

   let $EmployeeBreak = rtrim(&B.EMPLID,' ') 

   print $EmployeeBreak () on-break level = 1 procedure=START-NEW-PAGE Print=never
    
   let $EmployeeRcdBreak = rtrim(to_char(&B.EMPL_RCD),' ') 

   print $EmployeeRcdBreak () on-break level = 2 procedure=START-NEW-PAGE Print=never

   let $VersionBreak = rtrim(to_char(&B.VERSION),' ') 

   print $VersionBreak () on-break level = 3 procedure=START-NEW-PAGE Print=never
      
   let $HireDtBreak = rtrim(&B.HIRE_DT,' ') 

   print $HireDtBreak () on-break level = 4 procedure=START-NEW-PAGE Print=never          

   let $MAIN_SEL_EMPLID        = RTRIM(&B.EMPLID,' ')
   let #MAIN_SEL_EMPL_RCD      = &B.EMPL_RCD
   let #MAIN_SEL_VERSION       = &B.VERSION
   let $USER_KEY1              = &B.USER_KEY1
   let $MAIN_SEL_PAY_ENTITY    = RTRIM(&B.PAY_ENTITY,' ')
   LET $W_HIRE_DT              = DATETOSTR(&B.HIRE_DT, 'MM/DD/YYYY')
   let #TAX_BGN_YR             = &B.GPGB_TAX_BGN_YR
   let $W_TERM_DT              = DATETOSTR(&B.LEAVE_DT, 'MM/DD/YYYY')
   let $NI_NUMBER              = &B.NATIONAL_ID
   let $EE_ADDRESS1            = RTRIM(&B.ADDRESS1, ' ')
   let $EE_ADDRESS2            = RTRIM(&B.ADDRESS2, ' ')
   let $EE_ADDRESS3            = RTRIM(&B.ADDRESS3, ' ')
   let $EE_ADDRESS4            = RTRIM(&B.ADDRESS4, ' ')   
   let $EE_CITY                = RTRIM(&B.CITY, ' ')
   let $EE_POSTAL              = RTRIM(&B.POSTAL, ' ')
   let $EE_STATE               = RTRIM(&B.STATE, ' ')
   !let $EE_COUNTY              = RTRIM(&B.COUNTY, ' ')   
   let $EE_COUNTRY             = RTRIM(&B.COUNTRY, ' ')
   let $EE_NAME                = RTRIM(&B.NAME, ' ')
   let $PERS_DT_birthdate      = DATETOSTR(&B.BIRTHDATE, 'MM/DD/YYYY')
   let $PERS_DT_sex            = RTRIM(&B.SEX,' ')
   let #SSP_PAID               = &B.GPGB_SSP
   let #SMP_PAID               = &B.GPGB_SMP
   let #VAL_SPPA_YTD           = &B.GPGB_SPPA
   let #SAP_PAID               = &B.GPGB_SAP
   let #ASPP_PAID              = &B.GPGB_ASPPA+&B.GPGB_SHPP_EYU
   let #VAL_STUDENT_LOAN       = &B.GPGB_EE_SL
   let #GROSS_PAY              = &B.GPGB_EE_GROSS 
   let #CURRENT_TAX            = &B.GPGB_EE_TAX
   
   Do Get-other-details-rti(#TAX_BGN_YR,$MAIN_SEL_PAY_ENTITY,$MAIN_SEL_EMPLID,#MAIN_SEL_EMPL_RCD,$USER_KEY1,#TAX_BASIS,$TAXCODE,$VR_WK53)
   DO Print-Report-Details              
   Do P60A-Select-NI-Rti   
       
FROM PS_GPGB_RTI_ADJ A
LEFT OUTER JOIN PS_PERS_NID B 
ON A.EMPLID=B.EMPLID AND B.NATIONAL_ID_TYPE='PR_9' 
AND B.COUNTRY='GBR' AND B.PRIMARY_NID='Y'
[$Where_statement]
ORDER BY A.EMPLID,
         A.EMPL_RCD,
         A.VERSION,
         A.HIRE_DT

end-select

#Debug Show 'P60A-Select-employees_rti <- '
end-procedure P60A-Select-employees_rti

begin-procedure P60A-Select-NI-rti
#Debug Show 'P60A-Select-NI-rti -> ' 

let #NI_COUNT = 1

begin-SELECT on-error=SQL-ERROR

NI1.GPGB_NI_CATEGORY   &NI1.GPGB_NI_CATEGORY
NI1.GPGB_AT_LEL_EYU     &NI1.GPGB_LEL_VALUE
NI1.GPGB_LEL_TO_PT_EYU   &NI1.GPGB_LELET_VALUE
NI1.GPGB_PT_TO_UAP_EYU   &NI1.GPGB_ETUAP_VALUE
NI1.GPGB_ER_NI_CNT_EYU &NI1.GPGB_ER_NIC_VALUE
NI1.GPGB_EE_NI_CNT_EYU  &NI1.GPGB_EE_NIC_VALUE
NI1.GPGB_UAP_TO_UEL_EY  &NI1.GPGB_UAPUEL_VALUE
NI1.GPGB_PT_TO_UEL_EYU  &NI1.GPGB_PTUEL_VALUE

   let $NICategory  = RTRIM(&NI1.GPGB_NI_CATEGORY,' ')
   let #Remainder = mod(#NI_COUNT, 2)
   
   if #NI_COUNT > 1 
      if #Remainder <> 00
         Do START-NEW-PAGE
      end-if
   end-if
  
   let #LEL_VALUE              = &NI1.GPGB_LEL_VALUE
   let #LELET_VALUE            = &NI1.GPGB_LELET_VALUE
   let #ETUAP_VALUE            = &NI1.GPGB_ETUAP_VALUE
   let #UAPUEL_VALUE           = &NI1.GPGB_UAPUEL_VALUE
   let #VAL_NI_ERS_YTD         = &NI1.GPGB_ER_NIC_VALUE
   let #VAL_NI_EES_YTD         = &NI1.GPGB_EE_NIC_VALUE
   let #ETUEL_VALUE            = &NI1.GPGB_PTUEL_VALUE
   DO Print-NI-Details
   let #NI_COUNT = #NI_COUNT + 1
   
FROM PS_GPGB_RTI_ADJ_NI NI1
WHERE NI1.EMPLID = $MAIN_SEL_EMPLID
AND   NI1.EMPL_RCD = #MAIN_SEL_EMPL_RCD
AND   NI1.VERSION = #MAIN_SEL_VERSION
AND   NI1.GPGB_TAX_BGN_YR = #TAX_BGN_YR
AND   NI1.USER_KEY1 = $USER_KEY1

END-SELECT
         
#Debug Show 'P60A-Select-NI-RTI <- ' 
end-procedure P60A-Select-NI-rti

!*=================================================================
! Procedure:  Get-other-details-rti                                     !
! Descr:      To get tax code,tax basis, week 53 indicator               !
!                                                                 !
!*=================================================================
begin-procedure Get-other-details-rti(#TAX_BGN_YR,$MAIN_SEL_PAY_ENTITY,$MAIN_SEL_EMPLID,#MAIN_SEL_EMPL_RCD,$USER_KEY1,:#TAX_BASIS,:$TAXCODE,:$VR_WK53)
begin-SELECT on-error=SQL-ERROR
A.TAX_CODE_UK            &C.TAX_CODE_UK
A.TAX_BASIS_UK            &C.TAX_BASIS_UK
A.GPGB_WK53_IND            &C.GPGB_WK53_IND

    let #TAX_BASIS              = &C.TAX_BASIS_UK
    let $TAXCODE                = &C.TAX_CODE_UK
    let $VR_WK53                = RTRIM(&C.GPGB_WK53_IND,' ')
    SHOW 'Week 53 ind:' $VR_WK53
    
FROM PS_GPGB_RTI_RSLT A 
WHERE A.GPGB_TAX_BGN_YR = #TAX_BGN_YR
   AND A.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND A.EMPLID = $MAIN_SEL_EMPLID
   AND A.EMPL_RCD = #MAIN_SEL_EMPL_RCD 
   AND A.USER_KEY1 = $USER_KEY1
   AND A.PRC_ORD_TS = (SELECT MAX(AA.PRC_ORD_TS) 
                       FROM PS_GPGB_RTI_RSLT AA
                                  WHERE AA.EMPLID = A.EMPLID 
                                 AND AA.EMPL_RCD = A.EMPL_RCD 
                                 AND AA.HIRE_DT = A.HIRE_DT  
                                 AND AA.PAY_ENTITY = A.PAY_ENTITY 
                                 AND AA.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR)
   AND A.RSLT_SEG_NUM = (SELECT MAX(AAA.RSLT_SEG_NUM) FROM PS_GPGB_RTI_RSLT  AAA 
                                 WHERE AAA.EMPLID = A.EMPLID
                                 AND AAA.EMPL_RCD = A.EMPL_RCD
                                 AND AAA.PRC_ORD_TS = A.PRC_ORD_TS 
                                 AND AAA.HIRE_DT    = A.HIRE_DT
                                 AND AAA.PAY_ENTITY = A.PAY_ENTITY 
                                 AND AAA.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR 
                                 AND AAA.CAL_ID = A.CAL_ID) 
end-select
end-procedure Get-other-details-rti

!*=================================================================
! Procedure:  Start-New-page                                      !
! Descr:      New page each time the Emplid changes               !
!                                                                 !
!*=================================================================
begin-procedure Start-new-page
#Debug Show 'Start-new-page -> ' 
           DO RESET-TOTALS
           NEW-PAGE
#Debug Show 'Start-new-page <- ' 
end-procedure Start-new-page

begin-procedure Print-NI-Details
#Debug Show 'Print-NI-Details -> '

   let #Remainder = mod(#NI_COUNT, 2)
   if #NI_COUNT > 1  
      if #Remainder <> 00
         print 'NI Category: ' (2, {PosLblDtlsCol2}) bold
      else
         print 'NI Category: ' (+3, {PosLblDtlsCol2}) bold
      end-if
   else
      print 'NI Category: ' (2, {PosLblDtlsCol2}) bold
   end-if
   
   if length($NICategory) = 2
      print $NICategory (, {PosNICategory1}) bold
   else
      print $NICategory (, {PosNICategory2}) bold
   end-if

   print 'Scheme Contracted Out Number: ' (+2, {PosLblDtlsCol2})
   print $SCON (, {PosScon})                
   print 'Earnings at the LEL: ' (+2, {PosLblDtlsCol2})
   print #LEL_VALUE (, {PosNIDtls}) edit 99,999,999.99
   print 'Earnings above the LEL and up to the PT: ' (+2, {PosLblDtlsCol2})
   print #LELET_VALUE (, {PosNIDtls}) edit 99,999,999.99
   if(#TAX_BGN_YR < 2009 OR #TAX_BGN_YR >= 2016)
   print 'Earnings above the PT and up to the UEL: ' (+2, {PosLblDtlsCol2})
   print #ETUEL_VALUE (, {PosNIDtls}) edit 99,999,999.99
   else
   print 'Earnings above the PT and up to the UAP: ' (+2, {PosLblDtlsCol2})
   print #ETUAP_VALUE (, {PosNIDtls}) edit 99,999,999.99
   print 'Earnings above the UAP and up to the UEL: ' (+2, {PosLblDtlsCol2})
   print #UAPUEL_VALUE (, {PosNIDtls}) edit 99,999,999.99
   
   end-if

   print 'Employee NI Contributions: ' (+2, {PosLblDtlsCol2})
   print #VAL_NI_EES_YTD (, {PosNIDtls}) edit 99,999,999.99
   print 'Employee NI Rebates: ' (+2, {PosLblDtlsCol2})
   print #VAL_NI_EESRBT_YTD (, {PosNIDtls}) edit 99,999,999.99
   print 'Employer NI Contributions: ' (+2, {PosLblDtlsCol2})
   print #VAL_NI_ERS_YTD (, {PosNIDtls}) edit 99,999,999.99
   print 'Employer NI Rebates: ' (+2, {PosLblDtlsCol2})
   print #VAL_NI_ERSRBT_YTD (, {PosNIDtls}) edit 99,999,999.99

#Debug Show 'Print-NI-Details <- '
end-procedure Print-NI-Details



begin-procedure Print-Report-Details
#Debug Show 'Print-Report-Details -> '

   let #TOTAL_TAX = #CURRENT_TAX + #P45_TAX_TD 
   let #TOTAL_PAY = #GROSS_PAY + #P45_PAY_TD
   let #VAL_SPP_PAID = #VAL_SPPA_YTD + #VAL_SPPB_YTD

   if #TAX_BASIS = 0
      let $TAXBASIS = 'Cumulative'
      print 'Hire Date: ' (+1, {PosLblDtlsCol1})
      print $W_HIRE_DT (, {PosTaxBasis1}) 
      print 'Leave Date: ' (+2, {PosLblDtlsCol1})
      print $W_TERM_DT ( , {PosTaxBasis1})
      print 'Tax Code: ' (+2, {PosLblDtlsCol1})
      print $TAXCODE (, {PosTaxBasis1})
      print 'Tax Basis: ' (+2, {PosLblDtlsCol1})      
      print $TAXBASIS (, {PosTaxBasis1}) 
   else
      if #TAX_BASIS = 1
         let $TAXBASIS = 'Week1/Month1'
         print 'Hire Date: ' (+1, {PosLblDtlsCol1})
         print $W_HIRE_DT (, {PosTaxBasis2}) 
         print 'Leave Date: ' (+2, {PosLblDtlsCol1})
         print $W_TERM_DT ( , {PosTaxBasis2})
         print 'Tax Code: ' (+2, {PosLblDtlsCol1})
         print $TAXCODE (, {PosTaxBasis2})
         print 'Tax Basis: ' (+2, {PosLblDtlsCol1})         
         print $TAXBASIS (, {PosTaxBasis2})
      else
         let $TAXBASIS = ' '
         print 'Hire Date: ' (+1, {PosLblDtlsCol1})
         print $W_HIRE_DT (, {PosDtDtls}) 
         print 'Leave Date: ' (+2, {PosLblDtlsCol1})
         print $W_TERM_DT ( , {PosDtDtls})
         print 'Tax Code: ' (+2, {PosLblDtlsCol1})
         let #PosTaxCD = 80 - length($TAXCODE)
         print $TAXCODE (, #PosTaxCD)
      end-if   
   end-if      
   
   print 'Pay in Previous Employment: ' (+2, {PosLblDtlsCol1})
   print #P45_PAY_TD (,{PosTaxDtls}) EDIT 9,999,999,999.99
   print 'Pay in Current Employment: ' (+2, {PosLblDtlsCol1})
   print #GROSS_PAY (,{PosTaxDtls}) EDIT 9,999,999,999.99
   print 'Tax in Previous Employment: ' (+2, {PosLblDtlsCol1})
   print #P45_TAX_TD (,{PosTaxDtls}) EDIT 9,999,999,999.99
   print 'Tax in Current Employment: ' (+2, {PosLblDtlsCol1})
   print #CURRENT_TAX (,{PosTaxDtls}) EDIT 9,999,999,999.99 
   print 'Total Pay for Year: ' (+2, {PosLblDtlsCol1})
   print #TOTAL_PAY (,{PosTaxDtls}) EDIT 9,999,999,999.99
   print 'Total Tax for Year: ' (+2, {PosLblDtlsCol1})
   print #TOTAL_TAX (,{PosTaxDtls})  EDIT 9,999,999,999.99     
   print 'SMP Paid: ' (+2, {PosLblDtlsCol1})
   print #SMP_PAID (,{PosAbsDtls}) EDIT 99,999,999.99
   print 'SSP Paid: ' (+2, {PosLblDtlsCol1})
   print #SSP_PAID (,{PosAbsDtls}) EDIT 99,999,999.99  
   

   
   print 'SPP Paid: ' (+2, {PosLblDtlsCol1}) 
   print #VAL_SPP_PAID (,{PosAbsDtls}) EDIT 99,999,999.99     
   print 'SAP Paid: ' (+2, {PosLblDtlsCol1})
   print #SAP_PAID (,{PosAbsDtls})   EDIT 99,999,999.99 
   if(#TAX_BGN_YR >= 2016)
   print 'SHPP Paid: ' (+2, {PosLblDtlsCol1})
   else
   print 'ASPP Paid: ' (+2, {PosLblDtlsCol1})
   end-if
   print #ASPP_PAID (,{PosAbsDtls})   EDIT 99,999,999.99      
   !print 'Widow''s contribution: ' (+2,{PosLblDtlsCol1})
   !print #VAL_WIDOW (, {PosWidowLife}) EDIT 99,999,999.99        
   print 'Life Insurance Contributions: ' (+2, {PosLblDtlsCol1})
   print #VAL_LIFE (,{PosAbsDtls}) EDIT 99,999,999.99        
   print 'Student Loan Deductions: ' (+2, {PosLblDtlsCol1})
   print #VAL_STUDENT_LOAN (, {PosTaxDtls}) EDIT 9,999,999,999.99                 
   print 'Week 53 Indicator: ' (+2, {PosLblDtlsCol1})
   print $VR_WK53 (, {PosWk53})  EDIT 99 


#Debug Show 'Print-Report-Details <- '
end-procedure Print-Report-Details

!*=================================================================
! Procedure: Reset Totals                                        !
! Descr:     Resets Calculated Values                             !
!                                                                 !
!*=================================================================
begin-procedure Reset-totals
#Debug Show 'Reset-totals -> ' 

        let #LEL_VALUE = 0
        let #LELET_VALUE = 0
        let #ETUEL_VALUE = 0
        let #VAL_NI_ERS_YTD    = 0
        let #VAL_NI_EES_YTD    = 0        
        let #VAL_NI_ERSRBT_YTD = 0
        let #VAL_NI_EESRBT_YTD = 0
        let $SCON   = ' '
        let #SSP_PAID = 0
        let #SMP_PAID = 0
        let #VAL_SPPA_YTD = 0
        let #VAL_SPPB_YTD = 0
        let #SAP_PAID = 0
        let #VAL_STUDENT_LOAN = 0
        let #GROSS_PAY   = 0
        let #TOTAL_PAY  = 0        
        let #CURRENT_TAX   = 0
        let #TOTAL_TAX  = 0
        let #VAL_WIDOW  = 0
        let #VAL_LIFE   = 0
        let $VR_WK53   = ' '
        let #P45_PAY_TD = 0
        let #P45_TAX_TD = 0

#Debug Show 'Reset-totals <- ' 
end-procedure Reset-totals

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************


!*=================================================================
! Procedure:  Build-Where-Runctl                                  !
! Descr:      Build Where Statement from Run Control Parameters
!                                                                 !
!*=================================================================
begin-procedure Build-where-runctl 
#Debug Show 'Build-where-runctl -> ' 

        let $Q                  = ''''

        let $WHERE_STATEMENT    = 'WHERE A.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR
        let $PAY_ENTITY_WHERE   = ' AND A.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q          
        let $VERSION_WHERE   = ' AND A.VERSION = ' || $PNL_VERSION
        
        let $EMPLID_WHERE       = ' AND A.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        evaluate ''

        when <> $PNL_PAY_ENTITY
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAY_ENTITY_WHERE
        when <> $PNL_EMPLID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $EMPLID_WHERE
                BREAK

        end-evaluate
        
        if  #PNL_VERSION <> 00
                let $WHERE_STATEMENT= $WHERE_STATEMENT
                                      || $VERSION_WHERE
        end-if
#Debug Show 'Build-where-runctl <- ' 
end-procedure Build-where-runctl
!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure Error-Sql
#Debug Show 'Error-Sql->'

        add 1 to #CountError

        #Debug Show 'SQL Error -> ' $ProcedureName
        #Debug Show 'SQL Error -> ' $ErrorMessage
        #Debug Show 'SQL Error -> ' $SQL-ERROR

        stop

#Debug Show 'Error-Sql<-'
end-procedure Error-Sql


!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'    ! Reset printer procedure
#include 'curdttim.sqc' ! Get-Current-DateTime procedure
#include 'datetime.sqc' ! Routines for date and time formatting
#include 'datemath.sqc' !
#include 'number.sqc'   ! Routines to format numbers
#include 'prcsapi.sqc'  ! Update Process Request API
#include 'prcsdef.sqc'  ! Update Process Request variable declaration
#include 'readxlat.sqc' ! Read Translate Table
#include 'gpgbut02.sqc' ! Log file
!******************************* End Of Program *******************

