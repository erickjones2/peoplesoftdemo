!***********************************************************************
!  GPGBEYTD.SQR - ELEMENT SUMMARY - YTD RECONCILIATION                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:04:24                                 *
!       $Release:  HR92                                                *
!      $Revision:  101                                                 *
!
!***********************************************************************
! Date        Modification
! ----        ------------
!
!***********************************************************************

!Define Column Location Variables
#DEFINE POS0          55
#DEFINE POS1          5
#DEFINE POS1+1        6
#DEFINE POS2          25
#DEFINE POS3          50
#DEFINE POS4          68
#DEFINE POS5          86
#DEFINE POS6          104
#DEFINE POS7          122
#DEFINE POS8          140
#DEFINE ROW0          3
#DEFINE ROW1          5
#DEFINE ROW2          6

!#define debug_x
!#define debug_y


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Begin Report Section                                    
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
begin-report

   DO INIT-REPORT
   DO CALCULATE-DATES
   DO MAIN-REPORT

end-report


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Selects data from Run Control Page                      
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE INIT-REPORT

   DO Define-Prcs-Vars
   DO Get-Run-Control-Parms

BEGIN-SELECT on-error=ERROR-SQL
E.PAY_ENTITY
E.GP_PAYGROUP
E.CAL_RUN_ID
E.GP_ELN_SET
E.GPGB_TAX_BGN_YR
   
   LET $PY_ENTITY      = RTRIM(&E.PAY_ENTITY,' ')
   LET $PNL_CAL_RUN_ID = RTRIM(&E.CAL_RUN_ID,' ')
   LET $PNL_PAYGROUP   = RTRIM(&E.GP_PAYGROUP,' ')
   LET #PNL_YEAR_START = &E.GPGB_TAX_BGN_YR
   LET $ELEMENT_SET    = RTRIM(&E.GP_ELN_SET,' ')

FROM  PS_GPGB_RNCTL_ES E
WHERE E.OPRID = $Prcs_OprID
AND E.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

   SHOW 'CALENDAR RUN ID: ' $PNL_CAL_RUN_ID

END-PROCEDURE INIT-REPORT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
begin-procedure CALCULATE-DATES

   let $ProcedureName = 'CALCULATE-DATES'
   #ifdef debug_x
      SHOW 'PROCEDURE->' $ProcedureName
   #end-if

   LET $Q = ''''

   LET $FISCAL_START_DT = TO_CHAR(#PNL_YEAR_START) || '-04-06'
   LET $FISCAL_START_DT = STRTODATE($FISCAL_START_DT, 'YYYY-MM-DD')
   DO Convert-To-DTU-Date($FISCAL_START_DT,$FISCAL_START_DT)
   DO Convert-FROM-DTU-Date($FISCAL_START_DT,$FISCAL_START_DT_NATIVE)

   LET $FISCAL_END_DT   = TO_CHAR(#PNL_YEAR_START + 1) || '-04-05'
   LET $FISCAL_END_DT   = STRTODATE($FISCAL_END_DT, 'YYYY-MM-DD')
   DO Convert-To-DTU-Date($FISCAL_END_DT,$FISCAL_END_DT)
   DO Convert-FROM-DTU-Date($FISCAL_END_DT,$FISCAL_END_DT_NATIVE)

   #ifdef debug_y
      SHOW 'FISCAL YEAR ->' $FISCAL_START_DT ' TO ' $FISCAL_END_DT
   #end-if

begin-SELECT on-error=ERROR-SQL
MAX(PRD_BGN_DT) &CAL_START_DT
MAX(PRD_END_DT) &CAL_END_DT

   LET $CAL_START_DT = DATETOSTR(&CAL_START_DT, 'YYYY-MM-DD')
   LET $CAL_END_DT   = DATETOSTR(&CAL_END_DT, 'YYYY-MM-DD')
                                           
FROM PS_GP_CAL_RUN_DTL
WHERE CAL_RUN_ID = $PNL_CAL_RUN_ID
END-SELECT

   #ifdef debug_y
      SHOW 'CALENDAR START DT->' $CAL_START_DT
      SHOW 'CALENDAR END DT->' $CAL_END_DT
   #end-if

end-procedure CALCULATE-DATES


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Print Column Headings                                   
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Begin-Heading 5

    PRINT $ELEMENT_SET                            ( 1, {POS1}) BOLD
    PRINT ': YTD RECONCILIATION'                  () BOLD
    print '          Date: '                      (  , {POS8}) bold

    Let $Curr_Date = edit(datenow(),'dd/mm/yyyy')
    print $Curr_Date                              ()

    print 'Calendar Run: '                        (+1, {POS1}) bold
    print $PNL_CAL_RUN_ID                         ()
    print '          Page: '                      (  , {POS8}) bold
    page-number                                   ()
    print ' of '                                  ()
    last-page                                     ()

    PRINT 'Element'              ({ROW1}, {POS1}) BOLD
    PRINT 'Element Description'  ({ROW1}, {POS2}) BOLD
    PRINT '         B/F YTD'     ({ROW1}, {POS3}) BOLD
    PRINT '  Adjustments to'     ({ROW1}, {POS4}) BOLD      !Adjustments to Prior Periods
    PRINT ' Revised B/F YTD'     ({ROW1}, {POS5}) BOLD
    PRINT '  Current Period'     ({ROW1}, {POS6}) BOLD
    PRINT '             YTD'     ({ROW1}, {POS7}) BOLD
    PRINT '      Difference'     ({ROW1}, {POS8}) BOLD

    PRINT '   Prior Periods'     (+1,     {POS4}) BOLD      !Adjustments to Prior Periods

End-Heading



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Main Procedure                                          
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE MAIN-REPORT

   DO FETCH-ELEMENT-SET

   DO FETCH-ELEMENT-GROUP

   DO UPDATE-PRCS-RUN-STATUS

END-PROCEDURE MAIN-REPORT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element Set:
! GP_ELN_SET_ATTR1   - Require grand total flag    - Y/N
! GP_ELN_SET_ATTR2   - Grand total label
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-SET

BEGIN-SELECT DISTINCT on-error=ERROR-SQL
A.PROCESS_INSTANCE                &A_PROCESS_INSTANCE
A.GP_ELN_SET_ATTR1                &A_GP_ELN_SET_ATTR1
A.GP_ELN_SET_ATTR2                &A_GP_ELN_SET_ATTR2

   Let $Grand_Total_Required   = Rtrim(&A_GP_ELN_SET_ATTR1,' ')
   Let $Grand_Total_Label      = Rtrim(&A_GP_ELN_SET_ATTR2,' ')

FROM
PS_GP_ELN_TMP A
WHERE
A.PROCESS_INSTANCE = 0 AND
A.COUNTRY = 'GBR' AND
A.GP_ELN_SET = $ELEMENT_SET  

END-SELECT

END-PROCEDURE FETCH-ELEMENT-GROUP


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element Group:
! GP_ELN_LST_ATTR1   - Report Section
! GP_ELN_LST_ATTR2   - Section Sequence            - number
! GP_ELN_LST_ATTR3   - Sub total required flag     - Y/N
! GP_ELN_LST_ATTR4   - Sub total label
! GP_ELN_LST_ATTR5   - Include in grand total flag - Y/N
! GP_ELN_LST_ATTR6   - Contribution to grand total - A/S/Blank
! GP_ELN_LST_ATTR7   - Show details flag           - Y/N
!
!This function prints the Element Group Headings         
!and calls the FETCH-ELEMENTS function to                
!do further processing                                   
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-GROUP

#ifdef debug_x
SHOW 'Fetch-Element-Group'
#end-if

Let #Report_Grand_Total1 = 0
Let #Report_Grand_Total2 = 0
Let #Report_Grand_Total3 = 0
Let #Report_Grand_Total4 = 0
Let #Report_Grand_Total5 = 0
Let #Report_Grand_Total6 = 0
Let #DoneFirstLine       = 0

BEGIN-SELECT DISTINCT on-error=ERROR-SQL
A.GP_ELN_LST_ATTR1                &A_GP_ELN_LST_ATTR1
A.GP_ELN_LST_ATTR2                
A.PIN_ELEM_GRP_NUM                &A_PIN_ELEM_GRP_NUM
A.GP_ELN_LST_ATTR3                &A_GP_ELN_LST_ATTR3
A.GP_ELN_LST_ATTR4                &A_GP_ELN_LST_ATTR4
A.GP_ELN_LST_ATTR5                &A_GP_ELN_LST_ATTR5
A.GP_ELN_LST_ATTR6                &A_GP_ELN_LST_ATTR6
A.GP_ELN_LST_ATTR7                &A_GP_ELN_LST_ATTR7

   Let $Report_Section         = Rtrim(&A_GP_ELN_LST_ATTR1,' ')
   Let $Sub_Total_Req          = Rtrim(&A_GP_ELN_LST_ATTR3,' ') 
   Let $Sub_Total_Label        = Rtrim(&A_GP_ELN_LST_ATTR4,' ')
   Let $Include_In_Grand_Total = Rtrim(&A_GP_ELN_LST_ATTR5,' ') 
   Let $Contribution_To_GT     = Rtrim(&A_GP_ELN_LST_ATTR6,' ') 
   Let $Show_Details           = Rtrim(&A_GP_ELN_LST_ATTR7,' ') 
   LET #Section_Sub_Total1     = 0
   LET #Section_Sub_Total2     = 0
   LET #Section_Sub_Total3     = 0
   LET #Section_Sub_Total4     = 0
   LET #Section_Sub_Total5     = 0
   LET #Section_Sub_Total6     = 0

   #ifdef debug_y
   SHOW 'SECTION >' $Report_Section
   #end-if

   IF $Report_Section <> ''
      If #DoneFirstLine = 0
         PRINT $Report_Section          (+1,{POS1}) BOLD
         Let #DoneFirstLine = 1
      Else
         PRINT $Report_Section          (+3,{POS1}) BOLD
      End-If
   END-IF

   DO FETCH-ELEMENTS

   #ifdef debug_y
   SHOW 'Section Sub Total >' #Section_Sub_Total
   #end-if

   If $Sub_Total_Req = 'Y'
      If $Show_Details = 'Y'
         PRINT $Sub_Total_Label      (+2,{POS1})
         PRINT #Section_Sub_Total1   ( 0,{POS3})  edit 9,999,999,999.99
         PRINT #Section_Sub_Total2   ( 0,{POS4})  edit 9,999,999,999.99
         PRINT #Section_Sub_Total3   ( 0,{POS5})  edit 9,999,999,999.99
         PRINT #Section_Sub_Total4   ( 0,{POS6})  edit 9,999,999,999.99
         PRINT #Section_Sub_Total5   ( 0,{POS7})  edit 9,999,999,999.99
         If #Section_Sub_Total6 <> 0 
            PRINT #Section_Sub_Total6   ( 0,{POS8})  edit 9,999,999,999.99
         End-If
      Else
         PRINT #Section_Sub_Total1   ( 0,{POS3})  edit 9,999,999,999.99  BOLD 
         PRINT #Section_Sub_Total2   ( 0,{POS4})  edit 9,999,999,999.99  BOLD 
         PRINT #Section_Sub_Total3   ( 0,{POS5})  edit 9,999,999,999.99  BOLD 
         PRINT #Section_Sub_Total4   ( 0,{POS6})  edit 9,999,999,999.99  BOLD 
         PRINT #Section_Sub_Total5   ( 0,{POS7})  edit 9,999,999,999.99  BOLD 
         If #Section_Sub_Total6 <> 0 
            PRINT #Section_Sub_Total6   ( 0,{POS8})  edit 9,999,999,999.99  BOLD 
         End-If
      End-If
   End-If   

   If $Include_In_Grand_Total = 'Y'
      If $Contribution_To_GT = 'A'
         LET #Report_Grand_Total1 = #Report_Grand_Total1 + #Section_Sub_Total1
         LET #Report_Grand_Total2 = #Report_Grand_Total2 + #Section_Sub_Total2
         LET #Report_Grand_Total3 = #Report_Grand_Total3 + #Section_Sub_Total3
         LET #Report_Grand_Total4 = #Report_Grand_Total4 + #Section_Sub_Total4
         LET #Report_Grand_Total5 = #Report_Grand_Total5 + #Section_Sub_Total5
         LET #Report_Grand_Total6 = #Report_Grand_Total6 + #Section_Sub_Total6
      End-If
      If $Contribution_To_GT = 'S'
         LET #Report_Grand_Total1 = #Report_Grand_Total1 - #Section_Sub_Total1
         LET #Report_Grand_Total2 = #Report_Grand_Total2 - #Section_Sub_Total2
         LET #Report_Grand_Total3 = #Report_Grand_Total3 - #Section_Sub_Total3
         LET #Report_Grand_Total4 = #Report_Grand_Total4 - #Section_Sub_Total4
         LET #Report_Grand_Total5 = #Report_Grand_Total5 - #Section_Sub_Total5
         LET #Report_Grand_Total6 = #Report_Grand_Total6 - #Section_Sub_Total6
      End-If
   End-If

FROM
PS_GP_ELN_TMP A
WHERE
A.PROCESS_INSTANCE = 0 AND
A.COUNTRY =          'GBR' AND
A.GP_ELN_SET =       $ELEMENT_SET 

ORDER BY A.GP_ELN_LST_ATTR2
END-SELECT

If $Grand_Total_Required = 'Y'

   PRINT $Grand_Total_Label         (+2,{POS1})
   PRINT #Report_Grand_Total1       ( 0,{POS3})  edit 9,999,999,999.99
   PRINT #Report_Grand_Total2       ( 0,{POS4})  edit 9,999,999,999.99
   PRINT #Report_Grand_Total3       ( 0,{POS5})  edit 9,999,999,999.99
   PRINT #Report_Grand_Total4       ( 0,{POS6})  edit 9,999,999,999.99
   PRINT #Report_Grand_Total5       ( 0,{POS7})  edit 9,999,999,999.99
   PRINT #Report_Grand_Total6       ( 0,{POS8})  edit 9,999,999,999.99

End-If

END-PROCEDURE FETCH-ELEMENT-GROUP


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element:                                                
! GP_ELN_PIN_ATTR1   - Element Description                
! GP_ELN_PIN_ATTR2   - Inlude in report flag     - Y/N
! GP_ELN_PIN_ATTR3   - Contribution to sub total - A/S/Blank       
! GP_ELN_PIN_ATTR4   - Suppress if no data flag  - Y/N       
!
!Fetches elements and prints values
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENTS

#ifdef debug_x
SHOW ' Fetch-Elements'
#end-if

Let #Max_Order       = 0
Let #PinElemGrpToUse = &A_PIN_ELEM_GRP_NUM
Let #ProcInstance    = &A_PROCESS_INSTANCE

BEGIN-SELECT on-error=ERROR-SQL
MAX(Z.GP_ORDER)          &Z_MAX_GP_ORDER

   Let #Max_Order    = &Z_MAX_GP_ORDER

   #ifdef debug_y
   SHOW '  #Max_Order > ' #Max_Order
   #end-if

FROM
PS_GP_ELN_TMP Z
WHERE
Z.PROCESS_INSTANCE = #ProcInstance AND
Z.COUNTRY          = 'GBR' AND
Z.GP_ELN_SET       = $ELEMENT_SET AND
Z.PIN_ELEM_GRP_NUM = #PinElemGrpToUse 

END-SELECT

If #Max_Order <> 0
   !Detail elements have been specified
   Let $OrderBy = 'ORDER BY A.GP_ORDER'
Else
   !A nested element group has been used
   Let $OrderBy = 'ORDER BY B.PIN_NM'
End-If

BEGIN-SELECT on-error=ERROR-SQL
A.GP_ELN_PIN_ATTR1               &A_GP_ELN_PIN_ATTR1
A.GP_ELN_PIN_ATTR2               &A_GP_ELN_PIN_ATTR2
A.GP_ELN_PIN_ATTR3               &A_GP_ELN_PIN_ATTR3
A.GP_ELN_PIN_ATTR4               &A_GP_ELN_PIN_ATTR4
A.GP_ORDER
B.PIN_NUM                        &B_PIN_NUM
B.PIN_NM                         &B_PIN_NM
B.PIN_TYPE                       &B_PIN_TYPE

   Let $Element_Description = Rtrim(&A_GP_ELN_PIN_ATTR1,' ')
   Let $Include             = Rtrim(&A_GP_ELN_PIN_ATTR2,' ')
   Let $Contribution_To_ST  = Rtrim(&A_GP_ELN_PIN_ATTR3,' ') 
   Let $Suppress_If_No_Data = Rtrim(&A_GP_ELN_PIN_ATTR4,' ') 

   If #Max_Order = 0
      If $Element_Description     = ''
         Let $Element_Description = Rtrim(&B_PIN_NM,' ')
      End-If
      If $Include                 = ''
         Let $Include             = 'Y'
      End-If
      If $Contribution_To_ST      = '' 
         Let $Contribution_To_ST  = 'A' 
      End-If
      If $Suppress_If_No_Data     = 'N' 
         Let $Suppress_If_No_Data = 'N' 
      End-If
   End-If

   Let #Calc_Rslt_Val1      = 0
   Let #Calc_Rslt_Val2      = 0
   Let #Calc_Rslt_Val3      = 0
   Let #Calc_Rslt_Val4      = 0
   Let #Calc_Rslt_Val5      = 0
   Let #Calc_Rslt_Val6      = 0
   Let $Got_Data            = 'N'
   Let $Got_Error           = 'N'

   Let #PIN_NUM  = &B_PIN_NUM
   LET $PIN_NM   = RTRIM(&B_PIN_NM,' ')
   LET $PIN_TYPE = RTRIM(&B_PIN_TYPE, ' ')

   #ifdef debug_y
   SHOW '  PIN NAME >' $PIN_NM    '<'
   SHOW '  PIN TYPE >' $PIN_TYPE  '<'
   SHOW '  PIN ELEM >' &B_PIN_NUM '<'
   #endif

   IF $Include = 'Y'
      
      EVALUATE $PIN_TYPE
         WHEN='DD'
            DO FETCH-ERNDED
            BREAK
         WHEN='ER'
            DO FETCH-ERNDED
            BREAK
         WHEN='AC'
            Let #PinToUse = &B_PIN_NUM
            DO CHECK-ACCUMULATOR
            BREAK
         WHEN-OTHER
            SHOW 'Unhandled type ' $PIN_TYPE ' for elem ' $PIN_NM ' in elemgrp used for section ' $Report_Section
            Let $Got_Error = 'Y'
            BREAK
      END-EVALUATE

      If $Got_Error = 'N'

         Let #Calc_Rslt_Val3 = #Calc_Rslt_Val1 + #Calc_Rslt_Val2
         Let #Calc_Rslt_Val6 = #Calc_Rslt_Val5 - (#Calc_Rslt_Val3 + #Calc_Rslt_Val4)

         If $Contribution_To_ST = 'A'
            LET #Section_Sub_Total1 = #Section_Sub_Total1 + #Calc_Rslt_Val1
            LET #Section_Sub_Total2 = #Section_Sub_Total2 + #Calc_Rslt_Val2
            LET #Section_Sub_Total3 = #Section_Sub_Total3 + #Calc_Rslt_Val3
            LET #Section_Sub_Total4 = #Section_Sub_Total4 + #Calc_Rslt_Val4
            LET #Section_Sub_Total5 = #Section_Sub_Total5 + #Calc_Rslt_Val5
            LET #Section_Sub_Total6 = #Section_Sub_Total6 + #Calc_Rslt_Val6
            LET $Contribution_Symbol = '+'
         End-If
         If $Contribution_To_ST = 'S'
            LET #Section_Sub_Total1 = #Section_Sub_Total1 - #Calc_Rslt_Val1
            LET #Section_Sub_Total2 = #Section_Sub_Total2 - #Calc_Rslt_Val2
            LET #Section_Sub_Total3 = #Section_Sub_Total3 - #Calc_Rslt_Val3
            LET #Section_Sub_Total4 = #Section_Sub_Total4 - #Calc_Rslt_Val4
            LET #Section_Sub_Total5 = #Section_Sub_Total5 - #Calc_Rslt_Val5
            LET #Section_Sub_Total6 = #Section_Sub_Total6 - #Calc_Rslt_Val6
            LET $Contribution_Symbol = '-'
         End-If


         If $Show_Details = 'Y' AND ($Suppress_If_No_Data = 'N' OR ($Suppress_If_No_Data = 'Y' AND $Got_Data = 'Y'))

            PRINT $Contribution_Symbol    (+1,{POS1})
            PRINT $PIN_NM                 ( 0,{POS1+1})
            PRINT $Element_Description    ( 0,{POS2})
            PRINT #Calc_Rslt_Val1         ( 0,{POS3})  edit 9,999,999,999.99
            PRINT #Calc_Rslt_Val2         ( 0,{POS4})  edit 9,999,999,999.99
            PRINT #Calc_Rslt_Val3         ( 0,{POS5})  edit 9,999,999,999.99
            PRINT #Calc_Rslt_Val4         ( 0,{POS6})  edit 9,999,999,999.99
            PRINT #Calc_Rslt_Val5         ( 0,{POS7})  edit 9,999,999,999.99
            If #Calc_Rslt_Val6 <> 0 
               PRINT #Calc_Rslt_Val6         ( 0,{POS8})  edit 9,999,999,999.99
            End-If

         End-If


      End-If

   END-IF

FROM
PS_GP_ELN_TMP A
, PS_GP_PIN B
WHERE
A.PROCESS_INSTANCE = #ProcInstance AND
A.COUNTRY          = 'GBR' AND
A.GP_ELN_SET       = $ELEMENT_SET AND
A.PIN_ELEM_GRP_NUM = #PinElemGrpToUse AND 
A.PIN_NUM          = B.PIN_NUM 

[$OrderBy]
END-SELECT

END-PROCEDURE FETCH-ELEMENTS


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE CHECK-ACCUMULATOR

#ifdef debug_x
SHOW '  CHECK-ACCUMULATOR>PIN USED ' #PIN_NUM
#end-if

Let #GotAccum = 0

!!!PTD
BEGIN-SELECT on-error=ERROR-SQL
AC1.PIN_NUM

   Let #TotalCal   = 0
   Let #TotalADj   = 0
   Let #GotAccum   = 1
   Let #PinToUse   = &AC1.PIN_NUM
   DO FETCH-TOTALS-CURR-PTD

   Let #Calc_Rslt_Val4 = #TotalCal
   #ifdef debug_y
      SHOW '                    Val4     ' #Calc_Rslt_Val4
   #endif

FROM
PS_GP_ACCUMULATOR AC1
WHERE
AC1.PIN_NUM = #PIN_NUM AND
AC1.ACM_PRD_OPTN = '2' !PTD Accumulator
END-SELECT

!!!YTD
BEGIN-SELECT on-error=ERROR-SQL
AC2.PIN_NUM

   Let #TotalCal   = 0
   Let #TotalADj   = 0
   Let #GotAccum   = 1
   Let #PinToUse   = &AC2.PIN_NUM
   Let $AcmDtToUse = $FISCAL_START_DT_NATIVE
   DO FETCH-TOTALS-PREV-YTD

   Let #Calc_Rslt_Val1 = #TotalCal
   Let #Calc_Rslt_Val2 = #TotalAdj
   #ifdef debug_y
      SHOW '                    Val1     ' #Calc_Rslt_Val1
      SHOW '                    Val2     ' #Calc_Rslt_Val2
   #endif

   Let #TotalCal = 0
   Let #TotalADj = 0

   DO FETCH-TOTALS-CURR-YTD
   Let #Calc_Rslt_Val5 = #TotalCal
   #ifdef debug_y
      SHOW '                    Val5     ' #Calc_Rslt_Val5
   #endif

FROM
PS_GP_ACCUMULATOR AC2
WHERE
AC2.PIN_NUM = #PIN_NUM AND
AC2.ACM_PRD_OPTN = '5' !YTD Accumulator
END-SELECT


If #GotAccum = 0
   SHOW 'Accum ' $PIN_NM ' in section ' $Report_Section ' is ignored (for this report) because it is not a PTD or YTD accumulator'
End-If

END-PROCEDURE CHECK-ACCUMULATOR


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ERNDED

#ifdef debug_x
SHOW '  Fetch-ErnDed>PIN USED ' #PIN_NUM
#end-if


!!!PTD
Let #GotAccum    = 0

BEGIN-SELECT on-error=ERROR-SQL
P1.PIN_NUM

   Let #TotalCal = 0
   Let #TotalADj = 0
   Let #GotAccum = 1
   Let #PinToUse = &P1.PIN_NUM

   DO FETCH-TOTALS-CURR-PTD
   Let #Calc_Rslt_Val4 = #TotalCal

FROM
PS_GP_ACCUMULATOR P1,
PS_GP_AGEN_ACM_VW V1
WHERE
V1.PIN_NUM = #PIN_NUM AND
P1.PIN_NUM = V1.PIN_MBR_NUM AND
P1.ACM_PRD_OPTN = '2' !PTD Accumulator
END-SELECT

If #GotAccum = 0
   SHOW 'No PTD accum defined for ' $PIN_NM ' in elemgrp used for ' $Report_Section ' - using element results'

   Let #TotalCal = 0
   Let #TotalADj = 0
   Let #PinToUse = #PIN_NUM

   DO FETCH-ELEMENT-TOTALS-CURR
   Let #Calc_Rslt_Val4 = #TotalCal

End-If


!!!YTD
Let #GotAccum    = 0

BEGIN-SELECT on-error=ERROR-SQL
P2.PIN_NUM

   Let #TotalCal   = 0
   Let #TotalADj   = 0
   Let #GotAccum   = 1
   Let #PinToUse   = &P2.PIN_NUM
   Let $AcmDtToUse = $FISCAL_START_DT_NATIVE
   DO FETCH-TOTALS-PREV-YTD
   Let #Calc_Rslt_Val1 = #TotalCal
   Let #Calc_Rslt_Val2 = #TotalAdj

   Let #TotalCal = 0
   Let #TotalADj = 0

   DO FETCH-TOTALS-CURR-YTD
   Let #Calc_Rslt_Val5 = #TotalCal

FROM
PS_GP_ACCUMULATOR P2,
PS_GP_AGEN_ACM_VW V2
WHERE
V2.PIN_NUM = #PIN_NUM AND
P2.PIN_NUM = V2.PIN_MBR_NUM AND
P2.ACM_PRD_OPTN = '5' !YTD Accumulator
END-SELECT

If #GotAccum = 0

   SHOW 'No YTD accum defined for ' $PIN_NM ' in elemgrp used for ' $Report_Section ' - trying custom period'
BEGIN-SELECT on-error=ERROR-SQL
P3.PIN_NUM
P3.BGN_DT

   Let #TotalCal   = 0
   Let #TotalADj   = 0
   Let #GotAccum   = 1
   Let #PinToUse   = &P3.PIN_NUM
!   Let $AcmDtToUse = &P3.BGN_DT
!   DO Convert-To-DTU-Date(&P3.BGN_DT,$AcmDtToUse)

   DO FETCH-TOTALS-PREV-YTD
   Let #Calc_Rslt_Val1 = #TotalCal
   Let #Calc_Rslt_Val2 = #TotalAdj

   Let #TotalCal = 0
   Let #TotalADj = 0

   DO FETCH-TOTALS-CURR-YTD
   Let #Calc_Rslt_Val5 = #TotalCal

FROM
PS_GP_ACCUMULATOR P3,
PS_GP_AGEN_ACM_VW V3
WHERE
V3.PIN_NUM = #PIN_NUM AND
P3.PIN_NUM = V3.PIN_MBR_NUM AND
P3.ACM_PRD_OPTN = '6' !custom Accumulator
END-SELECT

   If #GotAccum = 0

      SHOW 'No YTD/custom accum defined for ' $PIN_NM ' in elemgrp used for ' $Report_Section ' - trying single member accum'
BEGIN-SELECT on-error=ERROR-SQL
V4.PIN_NUM                      &V4_PIN_NUM
V4.BGN_DT                       &V4_BGN_DT
COUNT(DISTINCT V4.PIN_MBR_NUM)  &V4_PIN_MBR_NUM

      Let #TotalCal   = 0
      Let #TotalADj   = 0
      Let #GotAccum   = 1
      Let #PinToUse   = &V4_PIN_NUM
!      Let $AcmDtToUse = &V4_BGN_DT
!      Do Convert-To-DTU-Date(&V4_BGN_DT,$AcmDtToUse)

      DO FETCH-TOTALS-PREV-YTD
      Let #Calc_Rslt_Val1 = #TotalCal
      Let #Calc_Rslt_Val2 = #TotalAdj

      Let #TotalCal = 0
      Let #TotalADj = 0

      DO FETCH-TOTALS-CURR-YTD
      Let #Calc_Rslt_Val5 = #TotalCal

FROM
PS_GP_ACCUMULATOR P4,
PS_GP_ACM_MBR V4
WHERE
P4.PIN_NUM = V4.PIN_NUM AND
P4.ACM_PRD_OPTN = '5' AND  !YTD Accumulator
V4.PIN_NUM IN (SELECT V5.PIN_NUM FROM PS_GP_ACM_MBR V5 WHERE V5.PIN_MBR_NUM = #PIN_NUM)
GROUP BY V4.PIN_NUM, V4.BGN_DT
HAVING COUNT(DISTINCT V4.PIN_MBR_NUM) = 1
END-SELECT

      If #GotAccum = 0
         SHOW 'No YTD/custom/single member accum defined for ' $PIN_NM ' in elemgrp used for ' $Report_Section ' - No value will be printed'
      End-If

   End-If

End-If


END-PROCEDURE FETCH-ERNDED


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-TOTALS-PREV-YTD

#ifdef debug_y
SHOW '   Fetch-Totals-Prev-YTD>PIN USED  ' #PinToUse
SHOW '                         DATE USED ' &CAL_START_DT
SHOW '                     ACM DATE USED ' $AcmDtToUse
#endif

!If $AcmDtToUse <> ''
!   Let $AcmDtClause = 'AND C1.ACM_FROM_DT  = '' || $AcmDtToUse || '''
!Else
!   Let $AcmDtClause = ''
!End-If

BEGIN-SELECT on-error=ERROR-SQL
SUM(C1.CALC_RSLT_VAL)                 &C1_CALC_RSLT_VAL
SUM(C1.USER_ADJ_VAL)                  &C1_CALC_ADJ_VAL

   Let #TotalCal = &C1_CALC_RSLT_VAL
   Let #TotalADj = &C1_CALC_ADJ_VAL
   If #TotalCal+#TotalADj <> 0 
      Let $Got_Data = 'Y'
   End-If   
   #ifdef debug_y  
      SHOW '                         RSLT VAL  ' &C1_CALC_RSLT_VAL
      SHOW '                         ADJ VAL   ' &C1_CALC_ADJ_VAL
   #endif

FROM PS_GPGB_EE_RSLT A1,
     PS_GP_PYE_PRC_STAT B1,
     PS_GP_RSLT_ACUM C1
WHERE A1.GPGB_TAX_BGN_YR= #PNL_YEAR_START
AND A1.GP_PAYGROUP= $PNL_PAYGROUP 
AND A1.CAL_RUN_ID = $PNL_CAL_RUN_ID
AND A1.PAY_ENTITY= $PY_ENTITY 
AND B1.EMPLID      = A1.EMPLID
AND B1.CAL_RUN_ID  = A1.CAL_RUN_ID
AND B1.EMPL_RCD    = A1.EMPL_RCD
AND B1.GP_PAYGROUP = A1.GP_PAYGROUP
AND B1.CAL_ID      = A1.CAL_ID
AND B1.ORIG_CAL_RUN_ID = A1.ORIG_CAL_RUN_ID
AND B1.PAY_ENTITY= A1.PAY_ENTITY
AND B1.CALC_TYPE   = 'P'
AND B1.SEL_ACTION <> 'L'
AND B1.PRD_TYPE    = 'C'
AND B1.PRC_ORD_TS    = (SELECT MAX(X1.PRC_ORD_TS)
                         FROM PS_GP_PYE_PRC_STAT X1
                       WHERE X1.EMPLID        = B1.EMPLID
                        AND X1.EMPL_RCD        = B1.EMPL_RCD
                        AND X1.PAY_ENTITY      = B1.PAY_ENTITY
                        AND X1.CALC_TYPE       = B1.CALC_TYPE
                       AND X1.CAL_RUN_ID      = B1.CAL_RUN_ID
                        AND X1.CAL_ID          = B1.CAL_ID
                        AND X1.PRD_END_DT     <= &CAL_START_DT)
AND C1.EMPLID       = A1.EMPLID
AND C1.CAL_RUN_ID   = A1.CAL_RUN_ID
AND C1.EMPL_RCD     = A1.EMPL_RCD
AND C1.GP_PAYGROUP  = A1.GP_PAYGROUP
AND C1.CAL_ID       = A1.CAL_ID
AND C1.RSLT_SEG_NUM = A1.RSLT_SEG_NUM
AND C1.GP_PAYGROUP  = $PNL_PAYGROUP
AND C1.PIN_NUM      = #PinToUse
AND C1.ACM_FROM_DT  = $AcmDtToUse
![$AcmDtClause]
END-SELECT

END-PROCEDURE FETCH-TOTALS-PREV-YTD


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-TOTALS-CURR-PTD

#ifdef debug_y
SHOW '   Fetch-Totals-Curr-PTD>PIN USED  ' #PinToUse
#endif

BEGIN-SELECT on-error=ERROR-SQL
SUM(C2.CALC_RSLT_VAL)          &C2_CALC_RSLT_VAL
SUM(C2.USER_ADJ_VAL)           &C2_CALC_ADJ_VAL

   Let #TotalCal = &C2_CALC_RSLT_VAL
   Let #TotalADj = &C2_CALC_ADJ_VAL
   If #TotalCal+#TotalADj <> 0 
      Let $Got_Data = 'Y'
   End-If   
   #ifdef debug_y
      SHOW '                         RSLT VAL  ' &C2_CALC_RSLT_VAL
      SHOW '                         ADJ VAL   ' &C2_CALC_ADJ_VAL
   #endif

FROM
PS_GP_RSLT_ACUM C2
WHERE
C2.GP_PAYGROUP  = $PNL_PAYGROUP AND
C2.CAL_RUN_ID   = $PNL_CAL_RUN_ID AND
C2.PIN_NUM      = #PinToUse
END-SELECT

END-PROCEDURE FETCH-TOTALS-CURR-PTD


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-TOTALS-CURR-YTD

#ifdef debug_y
SHOW '   Fetch-Totals-Curr-YTD>PIN USED  ' #PinToUse
SHOW '                         DATE USED ' &CAL_END_DT
SHOW '                     ACM DATE USED ' $AcmDtToUse
#endif

!If $AcmDtToUse <> ''
!   Let $AcmDtClause = 'AND C3.ACM_FROM_DT  = ' || $AcmDtToUse
!Else
!   Let $AcmDtClause = ''
!End-If

BEGIN-SELECT on-error=ERROR-SQL
SUM(C3.CALC_RSLT_VAL)                 &C3_CALC_RSLT_VAL
SUM(C3.USER_ADJ_VAL)                  &C3_CALC_ADJ_VAL

   Let #TotalCal = &C3_CALC_RSLT_VAL
   Let #TotalADj = &C3_CALC_ADJ_VAL
   If #TotalCal+#TotalADj <> 0 
      Let $Got_Data = 'Y'
   End-If   
   #ifdef debug_y  
      SHOW '                         RSLT VAL  ' &C3_CALC_RSLT_VAL
      SHOW '                         ADJ VAL   ' &C3_CALC_ADJ_VAL
   #endif

FROM PS_GPGB_EE_RSLT A3,
     PS_GP_PYE_PRC_STAT B3,
     PS_GP_RSLT_ACUM C3
WHERE A3.GPGB_TAX_BGN_YR= #PNL_YEAR_START
AND A3.GP_PAYGROUP= $PNL_PAYGROUP 
AND A3.CAL_RUN_ID = $PNL_CAL_RUN_ID
AND A3.PAY_ENTITY= $PY_ENTITY 
AND B3.EMPLID      = A3.EMPLID
AND B3.CAL_RUN_ID  = A3.CAL_RUN_ID
AND B3.EMPL_RCD    = A3.EMPL_RCD
AND B3.GP_PAYGROUP = A3.GP_PAYGROUP
AND B3.CAL_ID      = A3.CAL_ID
AND B3.ORIG_CAL_RUN_ID = A3.ORIG_CAL_RUN_ID
AND B3.PAY_ENTITY= A3.PAY_ENTITY
AND B3.CALC_TYPE   = 'P'
AND B3.SEL_ACTION <> 'L'
AND B3.PRD_TYPE    = 'C'
AND B3.PRC_ORD_TS    = (SELECT MAX(X3.PRC_ORD_TS)
                        FROM PS_GP_PYE_PRC_STAT X3
                        WHERE X3.EMPLID        = B3.EMPLID
                        AND X3.EMPL_RCD        = B3.EMPL_RCD
                        AND X3.PAY_ENTITY      = B3.PAY_ENTITY
                        AND X3.CALC_TYPE       = B3.CALC_TYPE
                       AND X3.CAL_RUN_ID      = B3.CAL_RUN_ID
                        AND X3.CAL_ID          = B3.CAL_ID
                        AND X3.PRD_END_DT     <= &CAL_END_DT)
AND C3.EMPLID       = A3.EMPLID
AND C3.CAL_RUN_ID   = A3.CAL_RUN_ID
AND C3.EMPL_RCD     = A3.EMPL_RCD
AND C3.GP_PAYGROUP  = A3.GP_PAYGROUP
AND C3.CAL_ID       = A3.CAL_ID
AND C3.RSLT_SEG_NUM = A3.RSLT_SEG_NUM
AND C3.GP_PAYGROUP  = $PNL_PAYGROUP
AND C3.PIN_NUM      = #PinToUse
AND C3.ACM_FROM_DT  = $AcmDtToUse
![$AcmDtClause]
END-SELECT

END-PROCEDURE FETCH-TOTALS-CURR


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-TOTALS-CURR

#ifdef debug_y
SHOW '   Fetch-Element-Totals-Curr>PIN USED  ' #PinToUse
#endif

BEGIN-SELECT on-error=ERROR-SQL
SUM(D3.CALC_RSLT_VAL)          &D3_CALC_RSLT_VAL
SUM(D3.CALC_ADJ_VAL)           &D3_CALC_ADJ_VAL
 
   Let #TotalCal = &D3_CALC_RSLT_VAL
   Let #TotalADj = &D3_CALC_ADJ_VAL
   If #TotalCal+#TotalADj <> 0 
      Let $Got_Data = 'Y'
   End-If   
   #ifdef debug_y
      SHOW '                     RSLT VAL  ' &D3_CALC_RSLT_VAL
      SHOW '                     ADJ VAL   ' &D3_CALC_ADJ_VAL
   #endif

FROM
PS_GP_RSLT_ERN_DED D3
WHERE
D3.GP_PAYGROUP  = $PNL_PAYGROUP AND
D3.CAL_RUN_ID   = $PNL_CAL_RUN_ID AND
D3.PIN_NUM      = #PinToUse
END-SELECT

END-PROCEDURE FETCH-ELEMENT-TOTALS-CURR


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Error SQL                                               
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE ERROR-SQL
        add 1 to #CountError
        show 'SQL Error -> ' $ProcedureName
        show 'SQL Error -> ' $ErrorMessage
        show 'SQL Error -> ' $SQL-ERROR
        stop
END-PROCEDURE ERROR-SQL


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!SQCs                                                    
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include 'setenv.sqc'    ! Set environment
#include 'setup32.sqc'   ! Printer and page-size initialization
#include 'reset.sqc'     ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Update Process API
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declaration
#include 'readxlat.sqc'  ! read translate table

#include 'datemath.sqc'  ! Routines for date manipulation
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declaration



!!!!!!!!!!!!!!!!!End Of Program!!!!!!!!!!!!!!!!!!!!!!!!!!!
