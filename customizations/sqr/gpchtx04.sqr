!***********************************************************************
!  GPCHTX04:  Pay Journal - Lohnjournal                                *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  27807408                                            !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'


begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Get-Data
  do Get-Element-Heading
  do Get-Payjournal-Data
  do Delete-Record
  do Stdapi-Term
  do Get-Log
end-Program
!************************************************
begin-setup

declare-procedure
 after-report = Signature
end-declare

declare-variable
  integer #PIN1
  integer #PIN2
  integer #PIN3
  integer #PIN4
  integer #PIN5
  integer #PIN6
  integer #PIN7
  integer #PIN8
  
end-declare

end-setup

!************************************************
begin-procedure Signature
#debug show ' -> Signature '

   let $last_page = 'Y'
#debug show ' <- Signature '
end-procedure Signature
!************************************************

begin-footing 6
   do Print-Totalsum-FOOT
end-footing

!****************************************************************************
begin-procedure Init-Report
  let $last_page = 'N'
  do Stdapi-Init

   if $prcs_process_instance = ''
    do Ask-Report-Parameters                !in Gpchut03.sqc
  else
    do Get-Report-Parameters                !in Gpchut06.sqc
    do Get-Values
  end-if

  do Security-Param

  move 'GPCHTX04' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')
  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation
  let $ReportTitle = $TITLE1
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  if rtrim ($Sort1 || $Sort2 || $Sort3, ' ') <> ''

     let $Sort_Order = 'ORDER BY '

     if rtrim ($Sort1, ' ') <> ''
         concat $Sort1 with $Sort_Order
     end-if

     if (rtrim ($Sort2, ' ') <> '' and rtrim($Sort1, ' ') <>'')
        concat ',' with $Sort_Order
        concat $Sort2 with $Sort_Order
     else
        concat $Sort2 with $Sort_Order
     end-if

     if (rtrim ($Sort3, ' ') <> '' and (rtrim($Sort1, ' ') <>'' or rtrim($Sort2, ' ') <>''))
         concat ',' with $Sort_Order
         concat $Sort3 with $Sort_Order
     else
         concat $Sort3 with $Sort_Order
     end-if

     let $Sort_Order = $Sort_Order || ',PBD.HIRE_DT,ACC.PIN_NUM,PBD.GPCH_AL_CPAY_ENDDT'

  else

     let $Sort_Order = 'ORDER BY PBD.EMPLID,PBD.EMPL_RCD,PBD.HIRE_DT,ACC.PIN_NUM,PBD.GPCH_AL_CPAY_ENDDT'

  end-if

     #Debug Show 'Sort Order : ' $Sort_Order

end-procedure Init-Report
!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPCHGLOB', 'EMPLID',        $HD_EMPLID, #CW)
  do Get_Field_Information ('GPCHGLOB', 'SUM',           $SUM,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'PAGE_TOTAL',    $PAGE_TOTAL,#CW)
  do Get_Field_Information ('GPCHGLOB', 'SUB_TOTAL',     $SUB_TOTAL,#CW)
  do Get_Field_Information ('GPCHGLOB', 'TOTAL',         $TOTAL,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'HIRE_DT',       $HD_HIRE_DT,#CW)
  do Get_Field_Information ('GPCHGLOB', 'NAME',          $HD_NAME,#CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',         $PYENT      , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_PAYGROUP',   $HD_PAYGROUP, #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_DEPT',       $HD_DEPT, #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_LOCATION',   $HD_LOCATION, #CW)
  do Get_Field_Information ('GPCHGLOB', 'TITLE2',        $TITLE2,    #CW)
  do Get_Field_Information ('GPCHTX04', 'TITLE1',        $TITLE1,    #CW)

  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',     $LG_PINNM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CALIDCR',   $LG_CALIDCR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SECURITY',   $HD_SECURITY,   #CW)
  do Get_Field_Information     ('GPCHGLOB', 'RESLN', $RESLN_ID, #CW)
   do Get_Field_Information     ('GPCHGLOB', 'PROCS_INST', $PROCS_NO, #CW)


end-Procedure Report-Translation
!****************************************************************************
begin-procedure Assign-Heading-Variables
! Array from heading Pin Name
!create-array name=pinhead size=12
!  field=pinnm:char field=pinnumber:number

get $PIN_NM1 from pinhead(0) pinnm
get $PIN_NM2 from pinhead(1) pinnm
get $PIN_NM3 from pinhead(2) pinnm
get $PIN_NM4 from pinhead(3) pinnm
get $PIN_NM5 from pinhead(4) pinnm
get $PIN_NM6 from pinhead(5) pinnm
get $PIN_NM7 from pinhead(6) pinnm
get $PIN_NM8 from pinhead(7) pinnm


! Array for Sorting Pin Number
get #PIN1 from pinhead(0) pinnumber
get #PIN2 from pinhead(1) pinnumber
get #PIN3 from pinhead(2) pinnumber
get #PIN4 from pinhead(3) pinnumber
get #PIN5 from pinhead(4) pinnumber
get #PIN6 from pinhead(5) pinnumber
get #PIN7 from pinhead(6) pinnumber
get #PIN8 from pinhead(7) pinnumber


End-procedure Assign-Heading-Variables

!************************************************

begin-procedure Assign-Pin-Variables
! Pin Num Information for every employee level

create-array name=pin size=12
  field=pinnum:number

get #PIN_NUM1 from pin(0) pinnum
get #PIN_NUM2 from pin(1) pinnum
get #PIN_NUM3 from pin(2) pinnum
get #PIN_NUM4 from pin(3) pinnum
get #PIN_NUM5 from pin(4) pinnum
get #PIN_NUM6 from pin(5) pinnum
get #PIN_NUM7 from pin(6) pinnum
get #PIN_NUM8 from pin(7) pinnum

end-procedure Assign-Pin-Variables
!************************************************
Begin-procedure Get-values
  let $language_cd = $PRCS_LANGUAGE_CD
End-procedure Get-values
!************************************************
begin-procedure Init-Layout

!**columns for fixed header
   #define colh0 1               !PersNr
   #define colh1 14              !Name
   #define colh2 29              !St-Kl
   #define colh3 33              !Kfb
   #define colh4 39              !SV
   #define colh5 44              !PV
   #define colh6 48              !KK
   #define colh7 58              !StTg
   #define colh8 62              !SVTg


   #define colh21 18
   #define colh22 36
   #define colh23 55
   #define colh24 74
   #define colh25 93
   #define colh26 112
   #define colh27 131
   #define colh28 150
   #define colh29 160
   #define colh30 172
   #define colh31 174
   #define colh31 184

   #define col1 1
   #define col2 14
   #define col3 33
   #define col4 52
   #define col5 71
   #define col6 90
   #define col7 109
   #define col8 128
   #define col9 147
   #define col10 166
   #define col11 176
   #define col12 194


end-procedure Init-Layout


!************************************************
begin-heading  12
#include 'gpchut09.sqc'


     let #page_nr = #page_nr + 1


  do ConvertToComponents($CURR_PAY_END_DT ,$Pay_End_Year,$Pay_End_Month,$Pay_End_Day)
  do Get-Company-Address($Ctl_PayEntity,$CURR_PAY_END_DT,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

  let $ReportDt =  $Pay_End_Year

  do Get-ResolnId($sqr-program,$Reslnid)
   
    print $PROCS_NO (-1,1)
  print $prcs_process_instance (0, {ColM})    

   print $RESLN_ID (+1,1)
   If $Reslnid <> '******'
   print $Reslnid (0, {ColM}) 
   End-If
  print $TITLE2                        ()           center
 ! print $PYENT                         (0, {colh0}) bold !SYED
  print $PYENT                         (+1, {colh0}) bold !SYED
  print $Cpline1                       (0, +2)
  print $HD_SELECTION                  (0, {colh3}) bold
  if #count_company <> 0
           print $PYENT                (0,  {colh2})  bold
           print $Company-String       (0, +2)
  end-if


  print $Cpdescr                       (+1, {colh0})
  if $Ctl_PayGroup <> ''
           print $HD_PAYGROUP          (0,  {colh2})   bold
           print $Ctl_PayGroup         (0, +2)
  end-if
           print $HD_SECURITY          (0, {colh7})   bold
           print $Security_Type          (0, +2)

  print $Cpline2                       (+1, {colh0})
  if $Ctl_Deptid <> ''
           print $HD_DEPT              (0,  {colh2})   bold
           print $Ctl_Deptid           (0, +2)
  end-if

  print $Cpline3                       (+1, {colh0})
  print $ReportDt                      ()   center     bold
  if $Ctl_Location <> ''
           print $HD_LOCATION          (0,  {colh2})  bold
           print $Ctl_Location         (0, +2)
  end-if

  print $Cpline31                      (+1, {colh0})
  if #count_Emplid <> 0
           print $HD_EMPLID            (0,  {colh2})  bold
           print $Emplid-String        (0, +2)
  end-if
   print ' '                        (-1,) bold  !SYED


  print '_'                             (+1,1,186) FILL   bold

  print $HD_EMPLID                      (+1,{colh0})      bold
  print $HD_NAME                        (0,{col2})        bold
  print $HD_HIRE_DT                     (0,{col4})        bold

  print $PIN_NM1                        (+1,{colh21})       bold
  print $PIN_NM2                        (0,{colh22})        bold
  print $PIN_NM3                        (0,{colh23})        bold
  print $PIN_NM4                        (0,{colh24})        bold
  print $PIN_NM5                        (0,{colh25})        bold
  print $PIN_NM6                        (0,{colh26})        bold
  print $PIN_NM7                        (0,{colh27})        bold
  print $PIN_NM8                        (0,{colh28})        bold
 
  print '_'                             (+1,1,186) FILL   bold

end-heading


!**************************************************
begin-procedure Get-Max-Curr-Dt
#DEBUG show '-> Get-Max-Curr-Dt'

BEGIN-SELECT
#ifdef ORACLE
/*+ INDEX(PS PS_GPCH_RP_0001)*/
#endif
MAX(PS.GPCH_AL_CPAY_ENDDT)  &MAX_CURR_DT

 do Format-DateTime (&MAX_CURR_DT, $MAX_CURR_DT, {DEFDATE},'','')
 let $TITLE2 = $TITLE2 || ' ' || $MAX_CURR_DT

FROM PS_GPCH_RP_0001 PS
WHERE PS.PRD_END_DT BETWEEN $Ctl_Start_Dt AND $Ctl_End_Dt
[$Emplid_Criteria_PS]
[$PayEntity_Crit_PS]
[$Paygroup_Crit_PS]
[$Location_Crit_PS]
[$Dept_Crit_PS]

END-SELECT

#DEBUG show '<- Get-Max-Curr-Dt'
end-procedure Get-Max-Curr-Dt
!**************************************************
begin-procedure Get-Element-Heading

   do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)

   if $Security_Type = 'N'
      let $Record_Security    = ''
      let $Security_Where     = ''
      let $SecurityClause     = ''
   else
      let $Record_Security    = ', PS_GPCH_RP_FAST_VW SCRTY'
      let $Security_Where     = 'AND SCRTY.OPRID = ''' || $prcs_oprid || ''' AND PBD.EMPLID = SCRTY.EMPLID AND PBD.EMPL_RCD = SCRTY.EMPL_RCD  
                                 and SCRTY.EFFDT =(select max(SCRTY1.EFFDT) from PS_GPCH_RP_FAST_VW SCRTY1
                                                      where SCRTY.EMPLID = SCRTY1.EMPLID 
                                                      and SCRTY.EMPL_RCD = SCRTY1.EMPL_RCD
                                                      and SCRTY1.OPRID = ''' || $prcs_oprid || ''' 
                                                      and SCRTY1.EFFDT <= PBD.GPCH_AL_CPAY_ENDDT )'
      let $SecurityClause     =  $SecurityClause
   end-if

  #DEBUG SHOW $Record_Security
  #DEBUG SHOW $Security_Where
  #DEBUG SHOW $SecurityClause

  do Get-Max-Curr-Dt

create-array name=pinhead size=12
  field=pinnm:char field=pinnumber:integer

  let #cnthead=0
begin-SELECT
A.PIN_NUM           &A.PIN_NUM
A.GPCH_AL_OVERRIDE  &A.GPCH_AL_OVERRIDE
A.GPCH_RP_HEADING   &A.GPCH_RP_HEADING
A.GPCH_AL_SEQNUM    &A.GPCH_AL_SEQNUM
B.DESCR             &B.DESCR


         put &A.PIN_NUM INTO pinhead(#cnthead) pinnumber
         let $Override = &A.GPCH_AL_OVERRIDE

         if  $Override = 'Y'
             let $Override = rtrim(substr(&A.GPCH_RP_HEADING,1,11),' ')
             put $Override INTO pinhead(#cnthead) pinnm
         else
             let $Descr1 = rtrim(substr(&B.DESCR,1,11),' ')
             put $Descr1  INTO pinhead(#cnthead) pinnm
         end-if

         let #cnthead = #cnthead + 1
 #debug show &A.PIN_NUM ' DESCR ' &B.DESCR 'OVERRIDE  '  &A.GPCH_RP_HEADING  'Count  ' #cnthead
FROM PS_GPCH_RC_TX04 A, PS_GP_PIN B
WHERE A.PIN_NUM=B.PIN_NUM
AND   A.OPRID = $prcs_oprid
AND   A.RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY A.GPCH_AL_SEQNUM
end-SELECT

     do Assign-Heading-Variables
end-procedure Get-Element-Heading

!**************************************************

begin-procedure Get-Payjournal-Data
#DEBUG show ' -> Get-Payjournal-Data ' $Company_Criteria ',' #PIN1 ',' #PIN2 ',' #PIN3 ',' #PIN4 ',' #PIN5 ',' #PIN6 ',' #PIN7 ',' #PIN8 ',' #PIN9 ',' #PIN10 ',' #PIN11  ' ,  ' $Cal_Id_Criteria

 do Reset-Totalsum-Variables

 #debug show $Record_Security
 #debug show $Security_Where
 #debug show $SecurityClause

begin-SELECT
#ifdef ORACLE
/*+ INDEX(PBD PS_GPCH_RP_0001)*/
#endif
PBD.GPCH_AL_CPAY_ENDDT  &PBD.GPCH_AL_CPAY_ENDDT
PBD.COMPANY
PBD.LOCATION
PBD.DEPTID
PBD.GP_PAYGROUP
PD.NAME
PBD.EMPLID              &PBD.EMPLID             ()   on-break level=1 print=never procedure=New-Employee
PBD.EMPL_RCD            &PBD.EMPL_RCD           ()   on-break level=2 print=never procedure=New-Employee
PBD.HIRE_DT             &PBD.HIRE_DT            ()   on-break level=3 print=never procedure=New-Employee
ACC.PIN_NUM             &PBD.PIN_NUM
SUM(ACC.CALC_RSLT_VAL)  &PIN_NUM1
!ACC.CALC_RSLT_VAL       &PIN_NUM1

  let $CURR_PAY_END_DT = &PBD.GPCH_AL_CPAY_ENDDT
  let $EmplId = &PBD.EMPLID
  do Format-Number (&PBD.EMPL_RCD, $Empl_Rcd_Num, '999')
  let $Empl_Rcd_Num = ltrim($Empl_Rcd_Num,' ')

  do Format-DateTime(&PBD.HIRE_DT, $HIRE_DT, {DEFDATE},'','')
  do Get-Emp-Address($EmplId,$Curr_Pay_End_Dt,'HOME',$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,
                           $ADDLINE4,$ADDLINE5,$ADDLINE6,$Full_Name,$FirstName,$LastName,
                           $NAME_PREFIX,$NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$Phone,
                           $Email,$CITY,$STATE,$POSTAL)


  evaluate &PBD.PIN_NUM

  when = #PIN1
     put &PIN_NUM1  INTO pin(0) pinnum
     break
  when = #PIN2
     put &PIN_NUM1  INTO pin(1) pinnum
     break
  when = #PIN3
     put &PIN_NUM1  INTO pin(2) pinnum
     break
  when = #PIN4
     put &PIN_NUM1  INTO pin(3) pinnum
     break
  when = #PIN5
     put &PIN_NUM1  INTO pin(4) pinnum
     break
  when = #PIN6
     put &PIN_NUM1  INTO pin(5) pinnum
     break
  when = #PIN7
     put &PIN_NUM1  INTO pin(6) pinnum
     break
  when = #PIN8
     put &PIN_NUM1  INTO pin(7) pinnum
     break
  when-other

     break

  end-evaluate

FROM PS_GPCH_RP_0001 PBD
   , PS_GPCHTX041_TMP ACC
   , PS_GPCHTX011_TMP T
   , {Record_Person}   PD
     [$Record_Security]
WHERE  PBD.EMPLID          = PD.EMPLID
AND    PBD.EMPLID          = ACC.EMPLID
AND    PBD.CAL_RUN_ID      = ACC.CAL_RUN_ID
AND    PBD.EMPL_RCD        = ACC.EMPL_RCD
AND    PBD.GP_PAYGROUP     = ACC.GP_PAYGROUP
AND    PBD.CAL_ID          = ACC.CAL_ID
[$Security_Where]
AND    PBD.RSLT_SEG_NUM    = ACC.RSLT_SEG_NUM
AND    ACC.ACM_PRD_OPTN    = '5'
AND    ACC.PROCESS_INSTANCE = #prcs_process_instance
#ifdef ORACLE
AND    PBD.HIRE_DT         = TO_DATE(ACC.USER_KEY1,'YYYY-MM-DD')
#else
AND    PBD.HIRE_DT         = ACC.USER_KEY1
#end-if
AND    T.PROCESS_INSTANCE = #prcs_process_instance
AND    PBD.EMPLID          = T.EMPLID
AND    PBD.CAL_RUN_ID      = T.CAL_RUN_ID
AND    PBD.EMPL_RCD        = T.EMPL_RCD
AND    PBD.GP_PAYGROUP     = T.GP_PAYGROUP
AND    PBD.CAL_ID          = T.CAL_ID
AND    PBD.RSLT_SEG_NUM    = T.RSLT_SEG_NUM

! AND PBD.PRD_END_DT IN (SELECT MAX(PRD_END_DT) FROM PS_GPCH_RP_0001 
! WHERE PRD_END_DT BETWEEN $Ctl_Start_Dt AND $Ctl_End_Dt AND EMPLID = PBD.EMPLID GROUP BY TERMINATION_DT)

[$Emplid_Criteria]
[$PayEntity_Crit]
[$Company_Criteria]
[$Paygroup_Crit]
[$Location_Crit]
[$Dept_Crit]
[$SecurityClause]
GROUP BY PBD.COMPANY,PBD.LOCATION,PBD.DEPTID,PBD.GP_PAYGROUP,PD.NAME,PBD.EMPLID,PBD.EMPL_RCD,PBD.HIRE_DT,ACC.PIN_NUM,PBD.GPCH_AL_CPAY_ENDDT
ORDER BY PBD.EMPLID,PBD.EMPL_RCD,PBD.HIRE_DT,ACC.PIN_NUM
end-SELECT


! ,PBD.GPCH_AL_CPAY_ENDDT,ACC.CALC_RSLT_VAL, 

       do New-Employee


#debug show ' <-  Get-Payjournal-Data '
end-procedure Get-Payjournal-Data
!**************************************************

Begin-procedure New-Employee
#debug show ' -> New-Employee '

    do Assign-Pin-Variables          !Assign Employee Pin values to Variables
    do Get-Employee-Data
    do Print-Employee-Data
    do Print-Payjournal-Data
    do Update-Totalsum-Variables
    clear-array name=pin
    do Reset-Employee-Variables

#debug show ' <- New-Employee '
end-procedure New-Employee


!**************************************************

begin-procedure Get-Employee-Data
#debug show ' -> Get-Employee-Data '

   do Get-Tax-Data

#debug show ' <- Get-Employee-Data '
end-procedure Get-Employee-Data


!****************************************************************

begin-procedure Get-Tax-Data
#debug show ' -> Get-Tax-Data  '

  move '' to $Tax_Class
  move '' to $Num_Of_Children
  move '' to $SI_Provider
  move '' to $SV_Code
  move '' to $PV_Code

!**** determine Taxclass and Number-of-Children ****

!begin-SELECT

!PTD.GPCH_TX_INC_TX_CLS
!PTD.GPCH_TX_NUM_CHILD
!PTD.GPCH_SI_PROV_MAND
!PTD.GPCH_DV_SV_CODE
!PTD.GPCH_DO_SV_CODE
!PTD.GPCH_TX_PV_CD

!FROM PS_GPCH_RP_0001 PTD
!WHERE PTD.EMPLID =    $EmplId
!AND   PTD.EMPL_RCD = #Empl_Rcd
!AND   PTD.COMPANY = $Company
!AND   PTD.PRD_END_DT = $PRD_END_DT
!AND   PTD.GPCH_AL_CPAY_ENDDT = $Ctl_Curr_Pay_End_Dt


!end-SELECT

!  let $Tax_Class = rtrim(&PTD.GPCH_TX_INC_TX_CLS,' ')
!  do Format-Number (&PTD.GPCH_TX_NUM_CHILD, $Num_Of_Children, '99.9')
!  move &PTD.GPCH_SI_PROV_MAND to $SI_Provider
!  move &PTD.GPCH_DV_SV_CODE to $SV_Code

  !move &PTD.GPCH_DO_SV_CODE to $SV_Code
  !move &PTD.GPCH_TX_PV_CD to $PV_Code

#debug show ' <- Get-Tax-Data  '

end-procedure Get-Tax-Data


!****************************************************************

begin-procedure Update-Totalsum-Variables
#debug show ' -> Update-Totalsum-Variables '

let #PIN_NUM_TOTAL1 = #PIN_NUM_TOTAL1 + #PIN_NUM1
let #PIN_NUM_TOTAL2 = #PIN_NUM_TOTAL2 + #PIN_NUM2
let #PIN_NUM_TOTAL3 = #PIN_NUM_TOTAL3 + #PIN_NUM3
let #PIN_NUM_TOTAL4 = #PIN_NUM_TOTAL4 + #PIN_NUM4
let #PIN_NUM_TOTAL5 = #PIN_NUM_TOTAL5 + #PIN_NUM5
let #PIN_NUM_TOTAL6 = #PIN_NUM_TOTAL6 + #PIN_NUM6
let #PIN_NUM_TOTAL7 = #PIN_NUM_TOTAL7 + #PIN_NUM7
let #PIN_NUM_TOTAL8 = #PIN_NUM_TOTAL8 + #PIN_NUM8

#debug show ' <- Update-Totalsum-Variables '
end-procedure Update-Totalsum-Variables


!**************************************************
begin-procedure Reset-Employee-Variables
#debug show ' -> Reset-Employee-Variables '

let $EmplCode = ''
let $Name = ''

let $Tax_Class = ''
let $Num_Of_Children = ''

let $SV_Code = ''
!let $PV_Code = ''
let $SI_Provider = ''

let $Steuertage = ' 0'
let $SV_Tage = ' 0'

let #PIN_NUM1 = 0
let #PIN_NUM2 = 0
let #PIN_NUM3 = 0
let #PIN_NUM4 = 0
let #PIN_NUM5 = 0
let #PIN_NUM6 = 0
let #PIN_NUM7 = 0
let #PIN_NUM8 = 0

#debug show ' <- Reset-Employee-Variables '
end-procedure Reset-Employee-Variables


!**************************************************

begin-procedure Reset-Totalsum-Variables
#debug show ' -> Reset-Totalsum-Variables '

let #PIN_NUM_TOTAL1 = 0
let #PIN_NUM_TOTAL2 = 0
let #PIN_NUM_TOTAL3 = 0
let #PIN_NUM_TOTAL4 = 0
let #PIN_NUM_TOTAL5 = 0
let #PIN_NUM_TOTAL6 = 0
let #PIN_NUM_TOTAL7 = 0
let #PIN_NUM_TOTAL8 = 0

#debug show ' <- Reset-Totalsum-Variables '
end-procedure Reset-Totalsum-Variables


!**************************************************

begin-procedure Print-Employee-Data
#debug show '-> Print-Employee-Data '

let $EmplCode = rtrim ($Emplid, ' ')
concat '-' with $EmplCode
concat $Empl_Rcd_Num with $EmplCode

print $EmplCode                 (+1,{colh0}) bold    !PersNr
print $Full_Name                (0,{colh1})  bold    !Name
print $HIRE_DT                  (0,{col4})   bold

#debug show '<- Print-Employee-Data '
end-procedure Print-Employee-Data


!**************************************************
begin-procedure Print-Payjournal-Data
#debug show '-> Print-Payjournal-Data '

#debug show 'Before '  #PIN_NUM1

do Format-Number(#PIN_NUM1,$PIN_NUM1,'B9,999,999,999.99')
do Format-Number(#PIN_NUM2,$PIN_NUM2,'B9,999,999,999.99')
do Format-Number(#PIN_NUM3,$PIN_NUM3,'B9,999,999,999.99')
do Format-Number(#PIN_NUM4,$PIN_NUM4,'B9,999,999,999.99')
do Format-Number(#PIN_NUM5,$PIN_NUM5,'B9,999,999,999.99')
do Format-Number(#PIN_NUM6,$PIN_NUM6,'B9,999,999,999.99')
do Format-Number(#PIN_NUM7,$PIN_NUM7,'B9,999,999,999.99')
do Format-Number(#PIN_NUM8,$PIN_NUM8,'B9,999,999,999.99')

print $PIN_NUM1                    (+1,{col2})
print $PIN_NUM2                    (0,{col3})
print $PIN_NUM3                    (0,{col4})
print $PIN_NUM4                    (0,{col5})
print $PIN_NUM5                    (0,{col6})
print $PIN_NUM6                    (0,{col7})
print $PIN_NUM7                    (0,{col8})
print $PIN_NUM8                    (0,{col9})


#debug show '<- Print-Payjournal-Data '
end-procedure Print-Payjournal-Data
!**************************************************
begin-procedure Print-Totalsum
#debug show '-> Print-Totalsum '

do Format-Number(#PIN_NUM_TOTAL1,$PIN_NUM_TOTAL1,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL2,$PIN_NUM_TOTAL2,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL3,$PIN_NUM_TOTAL3,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL4,$PIN_NUM_TOTAL4,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL5,$PIN_NUM_TOTAL5,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL6,$PIN_NUM_TOTAL6,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL7,$PIN_NUM_TOTAL7,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL8,$PIN_NUM_TOTAL8,'B9,999,999,999.99')

print '_'                                        (+1,1,186) FILL

print $SUM                                       (+1,{col1})
print $PIN_NUM_TOTAL1                            (0,{col2})
print $PIN_NUM_TOTAL2                            (0,{col3})
print $PIN_NUM_TOTAL3                            (0,{col4})
print $PIN_NUM_TOTAL4                            (0,{col5})
print $PIN_NUM_TOTAL5                            (0,{col6})
print $PIN_NUM_TOTAL6                            (0,{col7})
print $PIN_NUM_TOTAL7                            (0,{col8})
print $PIN_NUM_TOTAL8                            (0,{col9})

#debug show '<- Print-Totalsum '
end-procedure Print-Totalsum

!****************************************************************
begin-procedure Print-Totalsum-FOOT
#debug show '-> Print-Totalsum-FOOT '

do Format-Number(#PIN_NUM_TOTAL1,$PIN_NUM_TOTAL1,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL2,$PIN_NUM_TOTAL2,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL3,$PIN_NUM_TOTAL3,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL4,$PIN_NUM_TOTAL4,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL5,$PIN_NUM_TOTAL5,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL6,$PIN_NUM_TOTAL6,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL7,$PIN_NUM_TOTAL7,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_TOTAL8,$PIN_NUM_TOTAL8,'B9,999,999,999.99')

print '_'                                        (+1,1,186) FILL   bold

print $PAGE_TOTAL                                (+1,{col1})       bold
print $PIN_NUM_TOTAL1                            (0,{col2})
print $PIN_NUM_TOTAL2                            (0,{col3})
print $PIN_NUM_TOTAL3                            (0,{col4})
print $PIN_NUM_TOTAL4                            (0,{col5})
print $PIN_NUM_TOTAL5                            (0,{col6})
print $PIN_NUM_TOTAL6                            (0,{col7})
print $PIN_NUM_TOTAL7                            (0,{col8})
print $PIN_NUM_TOTAL8                            (0,{col9})

let #PIN_NUM_FOOTER1  = #PIN_NUM_FOOTER1  + #PIN_NUM_TOTAL1
let #PIN_NUM_FOOTER2  = #PIN_NUM_FOOTER2  + #PIN_NUM_TOTAL2
let #PIN_NUM_FOOTER3  = #PIN_NUM_FOOTER3  + #PIN_NUM_TOTAL3
let #PIN_NUM_FOOTER4  = #PIN_NUM_FOOTER4  + #PIN_NUM_TOTAL4
let #PIN_NUM_FOOTER5  = #PIN_NUM_FOOTER5  + #PIN_NUM_TOTAL5
let #PIN_NUM_FOOTER6  = #PIN_NUM_FOOTER6  + #PIN_NUM_TOTAL6
let #PIN_NUM_FOOTER7  = #PIN_NUM_FOOTER7  + #PIN_NUM_TOTAL7
let #PIN_NUM_FOOTER8  = #PIN_NUM_FOOTER8  + #PIN_NUM_TOTAL8

do Format-Number(#PIN_NUM_FOOTER1,$PIN_NUM_FOOTER1,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER2,$PIN_NUM_FOOTER2,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER3,$PIN_NUM_FOOTER3,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER4,$PIN_NUM_FOOTER4,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER5,$PIN_NUM_FOOTER5,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER6,$PIN_NUM_FOOTER6,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER7,$PIN_NUM_FOOTER7,'B9,999,999,999.99')
do Format-Number(#PIN_NUM_FOOTER8,$PIN_NUM_FOOTER8,'B9,999,999,999.99')
                                                     

 if $last_page = 'Y'
  print $TOTAL                                      (+1,{col1},13)  bold
 else
  print $SUB_TOTAL                                  (+1,{col1})  wrap 13 2 keep-top bold
 end-if
  
print $PIN_NUM_FOOTER1                            (0,{col2})
print $PIN_NUM_FOOTER2                            (0,{col3})
print $PIN_NUM_FOOTER3                            (0,{col4})
print $PIN_NUM_FOOTER4                            (0,{col5})
print $PIN_NUM_FOOTER5                            (0,{col6})
print $PIN_NUM_FOOTER6                            (0,{col7})
print $PIN_NUM_FOOTER7                            (0,{col8})
print $PIN_NUM_FOOTER8                            (0,{col9})

  do Reset-Totalsum-Variables


#debug show '<- Print-Totalsum-FOOT '
end-procedure Print-Totalsum-FOOT

!****************************************************************
Begin-procedure Get-Data
#Debug show 'Get-Data -> ' #prcs_process_instance ' , ' $Ctl_Start_Dt ' , ' $Ctl_End_Dt

!********************************************************************************************** 
 show ' $PayEntity_Crit = ' $PayEntity_Crit
 show ' $Company_Criteria = ' $Company_Criteria
 show ' $Paygroup_Crit = ' $Paygroup_Crit
 show ' $Location_Crit = ' $Location_Crit
 show ' $Dept_Crit = ' $Dept_Crit
!**********************************************************************************************
Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHTX011_TMP(PROCESS_INSTANCE,GPCH_TX_CANTON,EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,
RSLT_SEG_NUM,GPCH_TX_VILLAGE_CD,GPCH_TX_TRF_TYPE,GPCH_TX_TRF_CD,PRD_END_DT,GPCH_AL_CPAY_ENDDT,SEG_BGN_DT,
SEG_END_DT,SLICE_END_DT,BEGIN_DT,END_DT,BIRTHDATE,HIRE_DT,TERMINATION_DT,PAY_ENTITY,COMPANY,CITY,POSTAL,
ACTION,MAR_STATUS,NATIONAL_ID,GPCH_TX_CHRCH,SEX,COUNTRY_FROM,SPOUSE_NAME,GPCH_TX_SPOUSE_WL,GPCH_RP_AMOUNT1,
GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT9,GPCH_RP_AMOUNT11,GPCH_RP_AMOUNT14,GPCH_RP_AMOUNT15,GPCH_RP_AMOUNT19,
GPCH_RP_AMOUNT20,GPCH_RP_AMOUNT21,GPCH_RP_AMOUNT22,GPCH_RP_AMOUNT26,GPCH_RP_AMOUNT27,GPCH_AH_NNSS,
VISA_PERMIT_TYPE,CONTRACT_TYPE,REG_TEMP,GPCH_RP_CHAR03,GPCH_RP_FROMDT1)
#ifdef ORACLE
SELECT /*+ INDEX(R PS_GPCH_RP_0001)*/
#else
SELECT
#endif
[$prcs_process_instance],R.GPCH_TX_CANTON,R.EMPLID,R.CAL_RUN_ID,R.EMPL_RCD,R.GP_PAYGROUP,R.CAL_ID
,R.RSLT_SEG_NUM,R.GPCH_TX_VILLAGE_CD,R.GPCH_TX_TRF_TYPE,R.GPCH_TX_TRF_CD,R.PRD_END_DT
,R.GPCH_AL_CPAY_ENDDT,R.SEG_BGN_DT,R.SEG_END_DT,R.SLICE_END_DT,R.BEGIN_DT,R.END_DT,R.BIRTHDATE
,R.HIRE_DT,R.TERMINATION_DT,R.PAY_ENTITY,R.COMPANY,R.CITY,R.POSTAL,R.ACTION,R.MAR_STATUS
,R.NATIONAL_ID,R.GPCH_TX_CHRCH,R.SEX,R.COUNTRY_FROM,R.SPOUSE_NAME,R.GPCH_TX_SPOUSE_WL
,R.GPCH_RP_AMOUNT1,R.GPCH_RP_AMOUNT2,R.GPCH_RP_AMOUNT3,R.GPCH_RP_AMOUNT9,R.GPCH_RP_AMOUNT11,R.GPCH_RP_AMOUNT14
,R.GPCH_RP_AMOUNT15,R.GPCH_RP_AMOUNT19,R.GPCH_RP_AMOUNT20,R.GPCH_RP_AMOUNT21,R.GPCH_RP_AMOUNT22
,R.GPCH_RP_AMOUNT26,R.GPCH_RP_AMOUNT27,R.GPCH_AH_NNSS,
R.VISA_PERMIT_TYPE,R.CONTRACT_TYPE,R.REG_TEMP,R.GPCH_RP_CHAR03,R.GPCH_RP_FROMDT1

FROM PS_GPCH_RP_0001 R
WHERE 
    R.PRD_END_DT between $ctl_start_dt and $ctl_end_dt                   
 and  R.SLICE_END_DT = (select max(R1.SLICE_END_DT) from PS_GPCH_RP_0001 R1
where R.EMPLID = R1.EMPLID and R.COMPANY = R1.COMPANY  and R1.SLICE_END_DT <= $ctl_end_dt and R.HIRE_DT = R1.HIRE_DT and GPCH_MC_LEGAL_RCD = R1.GPCH_MC_LEGAL_RCD )
and   R.GPCH_AL_CPAY_ENDDT = (select max(R2.GPCH_AL_CPAY_ENDDT) 
from PS_GPCH_RP_0001 R2 where R.EMPLID = R2.EMPLID and R.EMPL_RCD = R2.EMPL_RCD
 and R.GP_PAYGROUP = R2.GP_PAYGROUP and  R.CAL_ID = R2.CAL_ID  )and  R.EMPL_RCD = R.GPCH_MC_LEGAL_RCD
! and R1.RSLT_SEG_NUM = R2.RSLT_SEG_NUM 
end-sql
!********************************************************************************************** 

#Debug show 'Get-Data Ins GPCHTX041_TMP -> '

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHTX041_TMP(PROCESS_INSTANCE,EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,RSLT_SEG_NUM,
PIN_NUM,EMPL_RCD_ACUM,ACM_FROM_DT,ACM_THRU_DT,USER_KEY1,USER_KEY2,USER_KEY3,USER_KEY4,SLICE_BGN_DT,
SLICE_END_DT,COUNTRY,ACM_TYPE,ACM_PRD_OPTN,CALC_RSLT_VAL,CALC_VAL,USER_ADJ_VAL,PIN_PARENT_NUM,CORR_RTO_IND)
SELECT [$prcs_process_instance],TX4.EMPLID,TX4.CAL_RUN_ID,TX4.EMPL_RCD,TX4.GP_PAYGROUP,TX4.CAL_ID,
TX4.RSLT_SEG_NUM,TX4.PIN_NUM,TX4.EMPL_RCD_ACUM,TX4.ACM_FROM_DT,TX4.ACM_THRU_DT,TX4.USER_KEY1,TX4.USER_KEY2,
TX4.USER_KEY3,TX4.USER_KEY4,TX4.SLICE_BGN_DT,TX4.SLICE_END_DT,TX4.COUNTRY,TX4.ACM_TYPE,TX4.ACM_PRD_OPTN,
TX4.CALC_RSLT_VAL,TX4.CALC_VAL,TX4.USER_ADJ_VAL,TX4.PIN_PARENT_NUM,TX4.CORR_RTO_IND
FROM PS_GP_RSLT_ACUM TX4, PS_GPCHTX011_TMP T1
WHERE TX4.PIN_NUM IN (SELECT TX41.PIN_NUM FROM PS_GPCH_RC_TX04 TX41
                       WHERE TX41.OPRID       = $prcs_oprid
                       AND   TX41.RUN_CNTL_ID = $prcs_run_cntl_id )

AND    T1.PROCESS_INSTANCE = #prcs_process_instance
AND    TX4.EMPLID          = T1.EMPLID
AND    TX4.CAL_RUN_ID      = T1.CAL_RUN_ID
AND    TX4.EMPL_RCD        = T1.EMPL_RCD
AND    TX4.GP_PAYGROUP     = T1.GP_PAYGROUP
AND    TX4.CAL_ID          = T1.CAL_ID
AND    TX4.RSLT_SEG_NUM    = T1.RSLT_SEG_NUM
AND    TX4.EMPL_RCD_ACUM   = TX4.EMPL_RCD

AND   TX4.SLICE_END_DT BETWEEN $Ctl_Start_Dt and $Ctl_End_Dt
AND    NOT EXISTS (SELECT 'X' FROM PS_GP_PYE_SEG_STAT RAV
                  WHERE  RAV.EMPLID        = TX4.EMPLID
                  AND    RAV.CAL_RUN_ID    = TX4.CAL_RUN_ID
                  AND    RAV.EMPL_RCD      = TX4.EMPL_RCD
                  AND    RAV.GP_PAYGROUP   = TX4.GP_PAYGROUP
                  AND    RAV.CAL_ID        = TX4.CAL_ID
                  AND    RAV.RSLT_SEG_NUM  = TX4.RSLT_SEG_NUM
                  AND    RAV.CALC_ACTION='V' )
End-Sql

#Debug show 'Get-Datas <- '
end-procedure Get-Data
!****************************************************************
Begin-procedure Delete-Record
#Debug show 'Get-Data -> ' #prcs_process_instance

Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHTX041_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#Debug show 'Delete-Record  <- '
#Debug show '<- Delete-Rec-tx011'

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHTX011_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug show '-> Delete-Rec-tx011'
end-procedure Delete-Record
!****************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX04'
               do Get_Eng_GPCHTX04
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX04'
               do Get_Ger_GPCHTX04
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHTX04'
               do Get_Ita_GPCHTX04
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX04'
               do Get_Fra_GPCHTX04
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************

#include 'gpchut01.sqc'   !Get Strings Values
#include 'gpchut03.sqc'   !ask input parameters
#include 'gpchut04.sqc'   !get pay entity data
#include 'gpchut06.sqc'   !get run control parameter values
#include 'gpchut07.sqc'   !Log Output Selection
#include 'gpchtx4s.sqc'    !Get Strings Values for GPCHTX04
#include 'gpchglbs.sqc'    !Get Strings Values for GPCHGLOB

#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'datemath.sqc'  !routines for date functions
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
