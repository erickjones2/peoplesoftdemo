!***********************************************************************
!  TAX908CN:  Canada Employer Wage Subsidy Estimate Report             *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!                                                                      *
!   Copyright (C) 1988, 2020, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  32223773                                            !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'  !Set environment
#include 'setup32.sqc' !Printer and page-size initialization
#include 'canrpt.sqc'  !Get Canadian-specific variables

begin-report
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'TAX908CN' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $TAX908CN_Title_BC_Rem_Rpt to $ReportTitle

  let $Title =  $TAX908CN_Title_Rpt
  display $Title

  do Init-DateTime
  do Init-Number
  do Initialize

  do Select-Run-Parameters
  do Convert-Parameters


end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from TAX907CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('TAX908CN', 'TITLE_RPT'           , $TAX908CN_Title_Rpt       , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PERIOD'              , $TAX908CN_Period          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'MAX_SUBSIDY'         , $TAX908CN_Max_Subsidy     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'MAX_SUBSIDYX'        , $TAX908CN_Max_SubsidyX    , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CEWS_PERIOD1'        , $TAX908CN_CEWS_Period_1   , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CEWS_PERIOD2'        , $TAX908CN_CEWS_Period_2   , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CEWS_PERIOD3'        , $TAX908CN_CEWS_Period_3   , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'COMPANY'             , $TAX908CN_Company         , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'EMPLID'              , $TAX908CN_Emplid          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'NAME'                , $TAX908CN_Name            , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'NO_EE_FOUND'         , $TAX908CN_No_EE_Found     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'MANUAL_CALC'         , $TAX908CN_Manual_calc     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'MULTI_JOB'           , $TAX908CN_Multi_Job       , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'ESTIMATED'           , $TAX908CN_Estimated       , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'SUBSIDY'             , $TAX908CN_Subsidy         , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'MESSAGES'            , $TAX908CN_Messages        , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CURRENT'             , $TAX908CN_Current         , #dummy_width)
   do Get_Field_Information ('TAX908CN', '75_CURRENT'          , $TAX908CN_75_Current      , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'REMUNERATION'        , $TAX908CN_Remuneration    , #dummy_width)
   do Get_Field_Information ('TAX908CN', '75_OF'               , $TAX908CN_75_of           , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PRE_CRISIS'          , $TAX908CN_Pre_crisis      , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PRE_CRISIS_CAP'      , $TAX908CN_Pre_crisis_cap  , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'AVERAGE'             , $TAX908CN_Average         , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'COMP_TOT'            , $TAX908CN_Company_Ttl     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'SUB_TOTAL'           , $TAX908CN_Subtotal        , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'EMP_COUNT'           , $TAX908CN_Emp_Count       , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'HIRE'                , $TAX908CN_Hire            , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'WITHIN'              , $TAX908CN_Within          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PERIOD2'             , $TAX908CN_Period2         , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'TERMINATION'         , $TAX908CN_Termination     , #dummy_width)
   do Get_Field_Information ('TAX908CN', '7DAY'                , $TAX908CN_7_Day           , #dummy_width)
   do Get_Field_Information ('TAX908CN', '14DAY'               , $TAX908CN_14_Day          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'WKLY_WAGE'           , $TAX908CN_Wkly_Wage       , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'WAGES'               , $TAX908CN_Wages           , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'TTL_EMPS'            , $TAX908CN_Total_Emps      , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'TTL_REMUNERATION'    , $TAX908CN_Total_Remun     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'TTL_SUBSIDY'         , $TAX908CN_Total_Subsidy   , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'STTL_EMPS'           , $TAX908CN_STotal_Emps     , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'STTL_REMUNERATION'   , $TAX908CN_STotal_Remun    , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'STTL_SUBSIDY'        , $TAX908CN_STotal_Subsidy  , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'GAP_IN'              , $TAX908CN_Gap_in          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CLAIM_PERIOD'        , $TAX908CN_Claim_Period    , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'CLAIM_PERIOD_UP'     , $TAX908CN_Claim_Period_Up , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PRE_CRISISLC'        , $TAX908CN_Pre_CrisisLC    , #dummy_width)
   do Get_Field_Information ('TAX908CN', '75'                  , $TAX908CN_75              , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'WEEKLY'              , $TAX908CN_Weekly          , #dummy_width)
   do Get_Field_Information ('TAX908CN', 'PART_TIME'           , $TAX908CN_Part_Time       , #dummy_width)

end-procedure


begin-heading 8
  #Include 'stdhdgtr.sqc'

  if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

    let $MaxS = $TAX908CN_Max_Subsidy

    print $TAX908CN_Title_Rpt          (2,,)      center
    print $TAX908CN_Company            (3,1,)
    print $Rpt-Company                 (0,19,)
    print $Period_Heading              (3,,)      center
    print ' '                          (4,1,)
    print ' '                          (4,2,)
    print $MaxS                        (4,,)      center

    print ' '                          (6,1,)
    print $TAX908CN_Hire               (0,13,)
    print $TAX908CN_Termination        (0,27,)
    print $TAX908CN_Gap_in             (0,45,)
    print ' '                          (0,56,)
    print $TAX908CN_Gap_in             (0,71,)
    print $TAX908CN_Average            (0,84,)
    print $TAX908CN_75                 (0,104,)
    print $TAX908CN_Current            (0,115,)
    print $TAX908CN_75                 (0,132,)
    print $TAX908CN_Estimated          (0,137,)

    print ' '                          (7,1,)
    print $TAX908CN_Within             (0,13,)
    print $TAX908CN_Within             (0,27,)
    print $TAX908CN_Claim_Period       (0,41,)
    print $TAX908CN_Pre_crisis_cap     (0,55,)
    print $TAX908CN_Pre_CrisisLC       (0,67,)
    print $TAX908CN_Weekly             (0,85,)
    print $TAX908CN_Weekly             (0,101,)
    print $TAX908CN_Weekly             (0,116,)
    print $TAX908CN_Current            (0,128,)
    print $TAX908CN_Weekly             (0,140,)

    print $TAX908CN_Emplid             (8,1,11)
    print $TAX908CN_Period2            (0,13,)
    print $TAX908CN_Period2            (0,27,)
    print $TAX908CN_14_Day             (0,41,)
    print $TAX908CN_Remuneration       (0,53,)
    print $TAX908CN_7_Day              (0,68,)
    print $TAX908CN_Wages              (0,87,)
    print $TAX908CN_Pre_crisis         (0,103,)
    print $TAX908CN_Wages              (0,118,)
    print $TAX908CN_Wages              (0,131,)
    print $TAX908CN_Subsidy            (0,139,)
    print $TAX908CN_Messages           (0,147,)
  else
    let #testnum = #Head-Max
    do Format-Number(#testnum, $out,  '$,$$9.99')
    let $MaxS = $TAX908CN_Max_SubsidyX || $Out

    print $TAX908CN_Title_Rpt          (2,,)      center
    print $TAX908CN_Company            (3,1,)
    print $Rpt-Company                 (0,19,)
    print $Period_Heading              (3,,)      center
    print ' '                          (4,1,)
    print ' '                          (4,2,)
    print $MaxS                        (4,,)      center


    do Format-Number(#Head-Pct, $out,  '999.99')
    let $out = $out || '%'
    let $CSV-PCT = $out

    print ' '                          (6,1,)
    print $TAX908CN_Hire               (0,13,)
    print $TAX908CN_Termination        (0,27,)
    print ' '                          (0,45,)
    print ' '                          (0,56,)
    print $TAX908CN_Gap_in             (0,71,)
    print $TAX908CN_Average            (0,84,)
    print $out                         (0,100,)
    print $TAX908CN_Current            (0,115,)
    print $out                         (0,128,)
    print $TAX908CN_Estimated          (0,137,)

    print ' '                          (7,1,)
    print $TAX908CN_Within             (0,13,)
    print $TAX908CN_Within             (0,27,)
    print ' '                          (0,41,)
    print $TAX908CN_Pre_crisis_cap     (0,55,)
    print $TAX908CN_Pre_CrisisLC       (0,67,)
    print $TAX908CN_Weekly             (0,85,)
    print $TAX908CN_Weekly             (0,101,)
    print $TAX908CN_Weekly             (0,116,)
    print $TAX908CN_Current            (0,128,)
    print $TAX908CN_Weekly             (0,140,)

    print $TAX908CN_Emplid             (8,1,11)
    print $TAX908CN_Period2            (0,13,)
    print $TAX908CN_Period2            (0,27,)
    print ' '                          (0,41,)
    print $TAX908CN_Remuneration       (0,53,)
    print $TAX908CN_7_Day              (0,68,)
    print $TAX908CN_Wages              (0,87,)
    print $TAX908CN_Pre_crisis         (0,103,)
    print $TAX908CN_Wages              (0,118,)
    print $TAX908CN_Wages              (0,131,)
    print $TAX908CN_Subsidy            (0,139,)
    print $TAX908CN_Messages           (0,147,)
  end-if


end-heading


begin-procedure Initialize

  do Get-Current-DateTime

  move '1' to $MMLZero
  move '0' to $Year4         !YY
  do Format-DateTime($AsOfToday, $FootNote_Date, {DEFMDY},'','')
  let $CP1-begin = '20200315'
  let $CP1-end   = '20200411'
  let $CP2-begin = '20200412'
  let $CP2-end   = '20200509'
  let $CP3-begin = '20200510'
  let $CP3-end   = '20200606'
  let $CP4-begin = '20200607'
  let $CP4-end   = '20200704'
  let $CP5-begin = '20200705'
  let $CP5-end   = '20200801'
  let $CP6-begin = '20200802'
  let $CP6-end   = '20200829'
  let $RP1-begin = strtodate('20200101')
  let $RP1-end   = strtodate('20200314')
  let $File-Open-E = 'N'
  let $File-Open-R = 'N'
  do Format-DateTime($CP1-begin, $CP1-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP1-end,   $CP1-end,   {DEFCMP}, '', 'native')
  do Format-DateTime($CP2-begin, $CP2-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP2-end,   $CP2-end,   {DEFCMP}, '', 'native')
  do Format-DateTime($CP3-begin, $CP3-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP3-end,   $CP3-end,   {DEFCMP}, '', 'native')
  do Format-DateTime($CP4-begin, $CP4-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP4-end,   $CP4-end,   {DEFCMP}, '', 'native')
  do Format-DateTime($CP5-begin, $CP5-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP5-end,   $CP5-end,   {DEFCMP}, '', 'native')
  do Format-DateTime($CP6-begin, $CP6-begin, {DEFCMP}, '', 'native')
  do Format-DateTime($CP6-end,   $CP6-end,   {DEFCMP}, '', 'native')
 !do Format-DateTime($RP1-begin, $RP1-begin, {DEFCMP}, '', 'native')
 !do Format-DateTime($RP1-end,   $RP1-end,   {DEFCMP}, '', 'native')
  let #Total_RP_Wages    = 0
  let #Total_CP_Wages    = 0
  let #Total_CP_Subsidy  = 0
  let $Last-Company = 'N'
  let $Report-Start = 'Y'
  move 'N' to $RunEmployeeFound

end-procedure


begin-procedure Open-File-E
   move 0 to #RecordCount-E
   let $FileExtension = 'CSV'
   do Format-Number(#Head-Pct, $out,  '999.99')
   let $out = $out || '%'
   let $CSV-PCT = $out

#ifdef OS400
  let $FileID = 'T908CNE' || '(D' || $FileExtension || ')'
#else
  #ifdef MVS
    let $FileID = 'T908CNE'
  #else
    let $FileID = 'T908CNE' || '.' || $FileExtension
  #endif
#endif
  let $FileID = '{IMPORTPREFIX}' || $FileID
#ifdef MVS
  open $FileID as 10 for-writing record=325:fixed_nolf
#else
  open $FileID as 10 for-writing record=325:fixed
#endif

   move 1 to #FileExtension-E
   let $File-Open-E = 'Y'
   let $CSVLine = ''

   if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

     let $CSVLine =  'Company' || ',' ||
                     'Period' || ',' ||
                     'Emplid' || ',' ||
                     'Hire/Rehire within claim period' || ',' ||
                     'Termination Within Claim Period' || ',' ||
                     'Gap in claim period >= 14 Days' || ',' ||
                     'Pre-crisis Remuneration' || ',' ||
                     'Gap in pre-crisis >= 7 Days' || ',' ||
                     'Average pre-crisis weekly wage' || ',' ||
                     '75% pre-crisis weekly wage' || ',' ||
                     'Current period weekly wage' || ',' ||
                     '75% current weekly wage' || ',' ||
                     'Estimated weekly Subsidy' || ',' ||
                     'Messages'
   else

     let $CSVLine =  'Company' || ',' ||
                     'Period' || ',' ||
                     'Emplid' || ',' ||
                     'Hire/Rehire within claim period' || ',' ||
                     'Termination Within Claim Period' || ',' ||
                     'Gap in claim period >= 14 Days' || ',' ||
                     'Pre-crisis Remuneration' || ',' ||
                     'Gap in pre-crisis >= 7 Days' || ',' ||
                     'Average pre-crisis weekly wage' || ',' ||
                     $CSV-PCT || ' pre-crisis weekly wage' || ',' ||
                     'Current period weekly wage' || ',' ||
                     $CSV-PCT || ' current weekly wage' || ',' ||
                     'Estimated weekly Subsidy' || ',' ||
                     'Messages'
   end-if


   write 10 from  $CSVLine

end-procedure


begin-procedure Open-File-R
   move 0 to #RecordCount-R
   let $FileExtension = 'CSV'
   do Format-Number(#Head-Pct, $out,  '999.99')
   let $out = $out || '%'
   let $CSV-PCT = $out

#ifdef OS400
  let $FileID = 'T908CNR' || '(D' || $FileExtension || ')'
#else
  #ifdef MVS
    let $FileID = 'T908CNR'
  #else
    let $FileID = 'T908CNR' || '.' || $FileExtension
  #endif
#endif
  let $FileID = '{IMPORTPREFIX}' || $FileID
#ifdef MVS
  open $FileID as 20 for-writing record=325:fixed_nolf
#else
  open $FileID as 20 for-writing record=325:fixed
#endif

   move 1 to #FileExtension-R
   let $File-Open-R = 'Y'
   let $CSVLine = ''

   if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

     let $CSVLine =  'Company' || ',' ||
                     'Period' || ',' ||
                     'Emplid' || ',' ||
                     'Hire/Rehire within claim period' || ',' ||
                     'Termination Within Claim Period' || ',' ||
                     'Gap in claim period >= 14 Days' || ',' ||
                     'Pre-crisis Remuneration' || ',' ||
                     'Gap in pre-crisis >= 7 Days' || ',' ||
                     'Average pre-crisis weekly wage' || ',' ||
                     '75% pre-crisis weekly wage' || ',' ||
                     'Current period weekly wage' || ',' ||
                     '75% current weekly wage' || ',' ||
                     'Estimated weekly Subsidy' || ',' ||
                     'Messages'
   else

     let $CSVLine =  'Company' || ',' ||
                     'Period' || ',' ||
                     'Emplid' || ',' ||
                     'Hire/Rehire within claim period' || ',' ||
                     'Termination Within Claim Period' || ',' ||
                     'Gap in claim period >= 14 Days' || ',' ||
                     'Claim Period Remuneration' || ',' ||
                     'Gap in pre-crisis >= 7 Days' || ',' ||
                     'Average pre-crisis weekly wage' || ',' ||
                     $CSV-PCT || ' pre-crisis weekly wage' || ',' ||
                     'Current period weekly wage' || ',' ||
                     $CSV-PCT || ' current weekly wage' || ',' ||
                     'Estimated weekly Subsidy' || ',' ||
                     'Messages'
   end-if

   write 20 from  $CSVLine

end-procedure


begin-procedure Close-File-E
if #FileExtension-E > 0
   close 10
   move 0 to #FileExtension-E
end-if
end-procedure


begin-procedure Close-File-R
if #FileExtension-R > 0
   close 20
   move 0 to #FileExtension-R
end-if
end-procedure


begin-procedure Select-Run-Parameters

begin-SELECT
RC.PY_CEWS_START_DT
RC.PY_CEWS_END_DT
RC.PY_CEWS_CO_OPT
RC.PY_CEWS_FORMULA

  move &RC.PY_CEWS_CO_OPT  to $Process_Option
  move $TAX908CN_CEWS_Period_1 to $CEWS_Claim_Period
  move &RC.PY_CEWS_START_DT to $CP-begin
  move &RC.PY_CEWS_END_DT   to $CP-end

  let $Period_Heading = $TAX908CN_Period  || ' ' || $CP-begin || ' - ' || $CP-end

FROM  PS_RC_TAX908CN  RC
WHERE RC.OPRID              = $Prcs_OprID
  AND RC.RUN_CNTL_ID        = $Prcs_Run_Cntl_ID
end-SELECT

end-procedure


begin-procedure Get-Comp-Values

  let $Comp-Info-Found = 'N'

begin-SELECT
CV.PY_CEWS_SUB_PCT
CV.PY_CEWS_WKLY_AMT
CV.PY_CEWS_14_DAYS

  let $Comp-Info-Found = 'Y'

FROM  PS_PY_CEWS_CO_DEF CV
WHERE CV.PY_CEWS_START_DT   = &RC.PY_CEWS_START_DT
  AND CV.COMPANY            = &SELECTCO.COMPANY
end-SELECT

  if $Comp-Info-Found = 'N'
    display 'No set up information found for company ' noline
    display &SELECTCO.COMPANY
  end-if

end-procedure


begin-procedure Convert-Parameters

  move ' ' to $ANDEXISTS
  move ' ' to $CO.SELECTEDCOMPANIES
  move ' ' to $CO.AMENDCANCEL
  move ' ' to $CO.T4ACOMPANIES
  move ' ' to $CO.T4AAMENDCANCEL
  move ' ' to $CO.MULTIPROV
  move ' ' to $CO.T4AMULTIPROV


  if $Process_Option = 'S'

    let $ANDEXISTS = 'AND EXISTS (SELECT C.COMPANY FROM PS_PY_CEWS_CO C WHERE '
    let $ANDEXISTS = $ANDEXISTS  || ' C.OPRID = ''' || $Prcs_OprID ||'''  '
    let $ANDEXISTS = $ANDEXISTS  || ' AND C.RUN_CNTL_ID = ''' || $Prcs_Run_Cntl_ID ||'''  '
    let $ANDEXISTS = $ANDEXISTS  || ' AND C.COMPANY = S.COMPANY)'

    do Read-Companies

  end-if

end-procedure


begin-procedure Process-Main

  do Process-One-Or-More-Companies

  if $RunEmployeeFound = 'N'
    display ''
    display ''
    display '******************************'
    display   $TAX908CN_No_EE_Found
    display '******************************'

  end-if

end-procedure


begin-procedure Read-Companies

  move 'WHERE SELECTCO.COMPANY IN (''' to $CO.SELECTEDCOMPANIES
  move 'AND AE.COMPANY IN (''' to $CO.AMENDCANCEL
  move 'AND YEA.COMPANY IN (''' to $CO.T4ACOMPANIES
  move 'AND AEA.COMPANY IN (''' to $CO.T4AAMENDCANCEL
  move 'AND MS.COMPANY IN (''' to $CO.MULTIPROV
  move 'AND ACE.COMPANY IN (''' to $CO.T4AMULTIPROV

  move ' ' to $SelectedCompany

begin-SELECT
CO.COMPANY

  move &CO.COMPANY    to $SelectedCompany

  let $CO.SELECTEDCOMPANIES = $CO.SELECTEDCOMPANIES || $SelectedCompany || ''','''


  move 'Y' to $Company_Selected

FROM  PS_PY_CEWS_CO  CO
WHERE CO.OPRID         = $Prcs_OprID
  AND CO.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID
end-SELECT

  if $Company_Selected = 'Y'
      let $CO.SELECTEDCOMPANIES  = SUBSTR($CO.SELECTEDCOMPANIES,1,LENGTH($CO.SELECTEDCOMPANIES) - 2)

  else
      let $CO.SELECTEDCOMPANIES  = $CO.SELECTEDCOMPANIES || ''''

  end-if

  let $CO.SELECTEDCOMPANIES = $CO.SELECTEDCOMPANIES  || ')'

end-procedure


begin-procedure Process-One-Or-More-Companies

  let $Multi-company = 'N'

begin-SELECT DISTINCT
SELECTCO.COMPANY
  do Get-Comp-Values
  let $Rpt-Company = &SELECTCO.COMPANY
  let #Head-Max = &CV.PY_CEWS_WKLY_AMT
  let #Head-Pct = &CV.PY_CEWS_SUB_PCT

  if $Comp-Info-Found = 'Y'


    let #Empl-Comp-Count     = 0
    let #Total_CO_Wages      = 0
    let #Total_CO_CP_Wages   = 0
    let #Total_CO_CP_Subsidy = 0

    let $Process-Status = 'E'
    do Process-Company

    if #Empl-Comp-Count > 0

      new-page
    end-if

    let $Process-Status = 'R'
    do Process-Company

    if #Empl-Comp-Count > 0

      do Ttl-Company-Change
      let $Multi-company = 'Y'
      new-page
    end-if
  end-if

FROM PS_COMPANY_TBL SELECTCO
#ifdef MVS
  \$CO.SELECTEDCOMPANIES\
#else
  [$CO.SELECTEDCOMPANIES]
#endif
ORDER BY SELECTCO.COMPANY
end-SELECT

  if $File-Open-E = 'Y'

  do Close-File-E
  end-if

  if $File-Open-R = 'Y'

  do Close-File-E
  end-if



end-procedure


begin-procedure Process-Company

  move 'N' to $EmployeeFound
  let $First-Company = 'Y'
  let $First-EMPLID = 'Y'
  let $Prev-Emplid = ''
  let $Prev-Company = ''
  let #CP-Earnings = 0
  let #Empl-Sub-Cnt = 0
  let $New-Page-Req = 'Y'

begin-SELECT
CP1A.COMPANY
CP1A.PAYGROUP
CP1A.PAY_END_DT
CP1A.OFF_CYCLE
CP1A.PAGE_NUM
CP1A.LINE_NUM
CP1A.ADDL_NBR
CP1A.SEPCHK
CP1A.EMPLID
CP1A.EARNS_BEGIN_DT
CP1A.EARNS_END_DT
CP1A.REG_EARNS
CP1A.REG_HRLY_EARNS
CP1A.OT_HRLY_EARNS

  if $First-EMPLID = 'Y'

    let $Prev-Emplid = rtrim(&CP1A.EMPLID,' ')
    do Get-Empl-Name
    do Check-Exceptions
  end-if

  move 'Y' to $EmployeeFound
  move 'Y' to $RunEmployeeFound

  if (rtrim(&CP1A.EMPLID,' ') <>  $Prev-Emplid) and
     ($First-EMPLID = 'N')

    do Get-Empl-Name

    if ($Process-Status = 'E') and
       ($Exception = 'Y')
      do Emplid-Change
      let #Empl-Sub-Cnt = #Empl-Sub-Cnt
                        +1
    end-if

    if ($Process-Status = 'R') and
       ($Exception = 'N')
      do Emplid-Change
      let #Empl-Sub-Cnt = #Empl-Sub-Cnt
                        +1
    end-if

    do Check-Exceptions
  end-if

  if ($Process-Status = 'E') and
     ($Exception = 'Y')
    let $New-Page-Req = 'N'
    let $Report-Start = 'N'
    do Next-Earnings
    let $Multi-company = 'Y'
  end-if

  if ($Process-Status = 'R') and
     ($Exception = 'N')
    let $New-Page-Req = 'N'
    let $Report-Start = 'N'
    do Next-Earnings
    let $Multi-company = 'Y'
  end-if

  let $Prev-Emplid = rtrim(&CP1A.EMPLID,' ')
  let $Prev-Company = rtrim(&CP1A.COMPANY,' ')
  let $First-Company = 'N'
  let $First-Emplid = 'N'

FROM PS_PAY_EARNINGS CP1A,
     PS_PAYGROUP_TBL CP1B
WHERE CP1A.COMPANY = &SELECTCO.COMPANY
  AND ((CP1A.EARNS_END_DT   >= $CP-begin   AND CP1A.EARNS_END_DT   <= $CP-end) OR
       (CP1A.EARNS_BEGIN_DT >= $CP-begin   AND CP1A.EARNS_BEGIN_DT <= $CP-end) OR
       (CP1A.EARNS_BEGIN_DT  < $CP-begin    AND CP1A.EARNS_END_DT   > $CP-end))
 !  AND CP1A.EMPLID = 'KC0036'
  AND CP1A.PAY_LINE_STATUS = 'F'
  AND CP1B.COMPANY = CP1A.COMPANY
  AND CP1B.PAYGROUP = CP1A.PAYGROUP
  AND CP1B.EFFDT = (SELECT MAX (CP1B1.EFFDT)
                    FROM PS_PAYGROUP_TBL CP1B1
                    WHERE CP1B1.COMPANY = CP1B.COMPANY
                      AND CP1B1.PAYGROUP = CP1B.PAYGROUP
                      AND CP1B1.EFFDT <= $CP-end)
  AND CP1B.COUNTRY = 'CAN'
ORDER BY CP1A.COMPANY, CP1A.EMPLID
end-SELECT

  if $EmployeeFound = 'Y'

    let $Last-Company = 'Y'
    do Get-Empl-Name

    if ($Process-Status = 'E') and
       ($Exception = 'Y')
      do Emplid-Change
      let #Empl-Sub-Cnt = #Empl-Sub-Cnt
                        +1
    end-if

    if ($Process-Status = 'R') and
       ($Exception = 'N')
      do Emplid-Change
      let #Empl-Sub-Cnt = #Empl-Sub-Cnt
                        +1
    end-if

    if #Empl-Sub-Cnt > 0

      do Company-Change
    end-if
  end-if


end-procedure


begin-procedure Emplid-Change

  if ($Process-Status = 'E') and
     ($File-Open-E = 'N')

  do Open-File-E

  let $File-Open-E = 'Y'
  end-if

  if ($Process-Status = 'R') and
     ($File-Open-R = 'N')

  do Open-File-R

  let $File-Open-R = 'Y'
  end-if


  let #RP-Earnings = 0
  do Get-Reference-Period-Info

  print  $Prev-Emplid                      (+1,1,)
  let $CSVLine = ''
  let $CSVLine = $Prev-Company || ',' || $CP-begin || ' - ' || $CP-end
  let $CSVLine = $CSVLine || ',' || $Prev-Emplid

  if ($Hire-In-Period     = 'Y') and
     ($Exception = 'Y')

    print 'Y'                              (0,19)
    let $CSVLine = $CSVLine || ',Y'
    let $Hire-In-Period     = 'N'
  else
    print ' '                              (0,19)
    let $CSVLine = $CSVLine || ', '
  end-if

  if ($Term-In-Period     = 'Y') and
     ($Exception = 'Y')

    print 'Y'                              (0,33)
    let $CSVLine = $CSVLine || ',Y'
    let $Term-In-Period     = 'N'
  else
    print ' '                              (0,33)
    let $CSVLine = $CSVLine || ', '
  end-if

  if ($Fourteen-Day     = 'Y') and
     ($Exception = 'Y')

    print 'Y'                              (0,46)
    let $CSVLine = $CSVLine || ',Y'
    let $Fourteen-Day     = 'N'
  else
    print ' '                              (0,46)
    let $CSVLine = $CSVLine || ', '
  end-if

  let #testnum = #RP-Earnings

  let #Total_RP_Wages =  #Total_RP_Wages
                      +  #RP-Earnings
  do Format-Number(#testnum, $out,  '999,999.99')
  print $out                               (0,55)
  do Format-Number(#testnum, $out,  '999999.99')
  let $CSVLine = $CSVLine || ',' || $out

  if ($Seven-Day      = 'Y') and
     ($Exception = 'Y')

    print 'Y'                              (0,72)
    let $CSVLine = $CSVLine || ',Y'
    let $Seven-Day      = 'N'
  else
    print ' '                              (0,72)
    let $CSVLine = $CSVLine || ', '
  end-if

  let #testnum = #RP-Earnings
               / 10.57
  let #testnum = round(#testnum,2)
  do Format-Number(#testnum, $out,  '999,999.99')

  print $out                               (0,81,)

  do Format-Number(#testnum, $out,  '999999.99')

  let $CSVLine = $CSVLine || ',' || $out

  if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

    let #testnum = #testnum
                 * 0.75
    let #testnum = round(#testnum,2)
  else

    let #testnum = #testnum
                 * #Head-Pct
                 / 100
    let #testnum = round(#testnum,2)
  end-if
  let #Sub2 = #testnum
  do Format-Number(#testnum, $out,  '999,999.99')

  print $out                               (0,97,)

  do Format-Number(#testnum, $out,  '999999.99')

  let $CSVLine = $CSVLine || ',' || $out

  let #testnum = #CP-Earnings
               / 4

  let #testnum = round(#testnum,2)
  let #Total_CP_Wages =  #Total_CP_Wages
                      +  #testnum
  do Format-Number(#testnum, $out,  '999,999.99')
  print $out                               (0,112,)
  do Format-Number(#testnum, $out,  '999999.99')
  let $CSVLine = $CSVLine || ',' || $out

  if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

    let #testnum = #testnum
                 * 0.75
  else

    let #testnum = #testnum
                 * #Head-Pct
                 / 100
  end-if
  let #testnum = round(#testnum,2)
  let #Sub4 = #testnum
  do Format-Number(#testnum, $out,  '999,999.99')
  print $out                              (0,125,)
  do Format-Number(#testnum, $out,  '999999.99')
  let $CSVLine = $CSVLine || ',' || $out
  if #Sub2 > #Sub4
    let #Sub = #Sub2
  else
    let #Sub = #Sub4
  end-if

  if rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

    if #Sub > 847
      let #Sub = 847
    end-if
  else

    if  #Sub > #Head-Max

      let #Sub = #Head-Max
    end-if
    let #Sub = round(#Sub,2)
  end-if
  let #testnum = #Sub
  let #Total_CP_Subsidy = #Total_CP_Subsidy
                        + #testnum
  do Format-Number(#testnum, $out,  '999,999.99')
  print $out                               (0,136,)
  do Format-Number(#testnum, $out,  '999999.99')
  let $CSVLine = $CSVLine || ',' || $out

  if  $Exception = 'N' and
      $Multi-Job-Emp = 'Y'
    let $Prt-Mult-Job = $TAX908CN_Multi_Job || ' ' || $Jobs
    let $Prt-Mult-Job  = SUBSTR($Prt-Mult-Job,1,29)
    print  $Prt-Mult-Job                   (0,147,)
    let $Prt-Mult-Job = $TAX908CN_Multi_Job || ' ' || $JobsCSV
    let $Prt-Mult-Job  = SUBSTR($Prt-Mult-Job,1,29)
    let $CSVLine = $CSVLine || ',' || $Prt-Mult-Job
  end-if

  if  $Exception = 'N' and
      $Multi-Job-Emp = 'N' and
      $Part-Time-Emp = 'Y'
    print  $TAX908CN_Part_Time             (0,147,)
    let $CSVLine = $CSVLine || ',' || $TAX908CN_Part_Time
  end-if

  if  $Exception = 'Y'  and
      $Part-Time-Emp = 'N'
    print  $TAX908CN_Manual_calc           (0,147,)
    let $CSVLine = $CSVLine || ',' || $TAX908CN_Manual_calc
  end-if

  if  $Exception = 'Y'  and
      $Part-Time-Emp = 'Y'
    print  $TAX908CN_Part_Time             (0,147,)
    let $CSVLine = $CSVLine || ',' || $TAX908CN_Part_Time
  end-if

  let #CP-Earnings = 0

  if $Process-Status = 'E'

  write 10 from  $CSVLine
  else

  write 20 from  $CSVLine
  end-if

end-procedure


begin-procedure Company-Change

  next-listing need=5

  print  $TAX908CN_Subtotal                (+2,1,)

  print  $TAX908CN_Emp_Count               (0,20,)

  let $CSVLine = ''
  let $CSVLine = 'Company Totals' || ',' || $TAX908CN_Emp_Count

  let #testnum = #Empl-Sub-Cnt
  do Format-Number(#testnum, $out,  '999,999')
  print $out                               (0,35)
  do Format-Number(#testnum, $out,  '999999')
  let $CSVLine = $CSVLine || ',' || $out

  print ' '                                (0,50)


  let #testnum = #Total_RP_Wages
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,51)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,,,' || $out

  print ' '                                (0,105)
  print ' '                                (0,106)
  print ' '                                (0,107)


  let #testnum = #Total_CP_Wages
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,108)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,,,' || $out

  print ' '                                (0,131)

  let #testnum = #Total_CP_Subsidy
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,132,)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,' || $out

  print  $TAX908CN_STotal_Emps              (+2,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_STotal_Emps

  let #testnum = #Empl-Sub-Cnt
  do Format-Number(#testnum, $out,  '999,999')
  print $out                               (0,45)
  do Format-Number(#testnum, $out,  '999999')
  let $CSVLine = $CSVLine || ',,' || $out

  print  $TAX908CN_STotal_Remun             (+1,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_STotal_Remun
  let #testnum = #Total_CP_Wages
  let #testnum = #Testnum * 4
  let #testnum = round(#testnum,2)
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,38)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,' || $out

  print  $TAX908CN_STotal_Subsidy          (+1,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_STotal_Subsidy
  let #testnum = #Total_CP_Subsidy
  let #testnum = #Testnum * 4
  let #testnum = round(#testnum,2)
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,38)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,' || $out

  let #Empl-Comp-Count     = #Empl-Comp-Count
                           + #Empl-Sub-Cnt
  let #Total_CO_Wages      = #Total_CO_Wages
                           + #Total_RP_Wages
  let #Total_CO_CP_Wages   = #Total_CO_CP_Wages
                           + #Total_CP_Wages
  let #Total_CO_CP_Subsidy = #Total_CO_CP_Subsidy
                           + #Total_CP_Subsidy

  let #Total_RP_Wages   = 0
  let #Total_CP_Wages   = 0
  let #Total_CP_Subsidy = 0

end-procedure


begin-procedure Ttl-Company-Change

  next-listing need=5

  print  $TAX908CN_Company_Ttl             (+2,1,)

  print  $TAX908CN_Emp_Count               (0,20,)

  let $CSVLine = ''
  let $CSVLine = 'Overall Totals' || ',' || $TAX908CN_Emp_Count

  let #testnum = #Empl-Comp-Count
  do Format-Number(#testnum, $out,  '999,999')
  print $out                               (0,35)
  do Format-Number(#testnum, $out,  '999999')
  let $CSVLine = $CSVLine || ',,' || $out


  let #testnum = #Total_CO_Wages
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,51)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,,,' || $out


  let #testnum = #Total_CO_CP_Wages
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,108)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,,,' || $out

  let #testnum = #Total_CO_CP_Subsidy
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,132,)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,,,' || $out


  print  $TAX908CN_Total_Emps              (+2,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_Total_Emps

  let #testnum = #Empl-Comp-Count
  do Format-Number(#testnum, $out,  '999,999')
  print $out                               (0,45)
  do Format-Number(#testnum, $out,  '999999')
  let $CSVLine = $CSVLine || ',,' || $out

  print  $TAX908CN_Total_Remun             (+1,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_Total_Remun
  let #testnum = #Total_CO_CP_Wages
  let #testnum = #Testnum * 4
  let #testnum = round(#testnum,2)
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,38)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,' || $out

  print  $TAX908CN_Total_Subsidy          (+1,1,)

  let $CSVLine = ''
  let $CSVLine = $TAX908CN_Total_Subsidy
  let #testnum = #Total_CO_CP_Subsidy
  let #testnum = #Testnum * 4
  let #testnum = round(#testnum,2)
  do Format-Number(#testnum, $out,  '999,999,999.99')
  print $out                               (0,38)
  do Format-Number(#testnum, $out,  '999999999.99')
  let $CSVLine = $CSVLine || ',,' || $out

  let #Empl-Comp-Count     = 0
  let #Total_CO_Wages      = 0
  let #Total_CO_CP_Wages      = 0
  let #Total_CO_CP_Subsidy = 0

end-procedure


begin-procedure Next-Earnings

  if (&CP1A.EARNS_BEGIN_DT >= $CP-Begin) and
     (&CP1A.EARNS_END_DT   <= $CP-End)

    let #CP-Earnings = #CP-Earnings
                     + &CP1A.REG_EARNS
                     + &CP1A.REG_HRLY_EARNS
                     + &CP1A.OT_HRLY_EARNS
  end-if

  if (&CP1A.EARNS_BEGIN_DT < $CP-Begin) and
     (&CP1A.EARNS_END_DT   >= $CP-Begin) and
     (&CP1A.EARNS_END_DT   <= $CP-End)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&CP1A.EARNS_END_DT, $CP-Begin, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP1A.REG_EARNS
                         + &CP1A.REG_HRLY_EARNS
                         + &CP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if

  if (&CP1A.EARNS_END_DT     >  $CP-End) and
     (&CP1A.EARNS_BEGIN_DT   >= $CP-Begin) and
     (&CP1A.EARNS_BEGIN_DT   <= $CP-End)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, $CP-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP1A.REG_EARNS
                         + &CP1A.REG_HRLY_EARNS
                         + &CP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if

  if (&CP1A.EARNS_END_DT     >  $CP-End) and
     (&CP1A.EARNS_BEGIN_DT   <  $CP-Begin)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference($CP-Begin, $CP-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP1A.REG_EARNS
                         + &CP1A.REG_HRLY_EARNS
                         + &CP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if

  do Other-Earnings

end-procedure


begin-procedure Other-Earnings

begin-SELECT
CP3OB.ERNCD
CP3OB.OTH_EARNS

  if (&CP1A.EARNS_BEGIN_DT >= $CP-Begin) and
     (&CP1A.EARNS_END_DT   <= $CP-End)

    let #CP-Earnings = #CP-Earnings
                     + &CP3OB.OTH_EARNS
  end-if

  if (&CP1A.EARNS_BEGIN_DT < $CP-Begin) and
     (&CP1A.EARNS_END_DT   >= $CP-Begin) and
     (&CP1A.EARNS_END_DT   <= $CP-End)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&CP1A.EARNS_END_DT, $CP-Begin, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if

  if (&CP1A.EARNS_END_DT     >  $CP-End) and
     (&CP1A.EARNS_BEGIN_DT   >= $CP-Begin) and
     (&CP1A.EARNS_BEGIN_DT   <= $CP-End)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, $CP-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if

  if (&CP1A.EARNS_END_DT     >  $CP-End) and
     (&CP1A.EARNS_BEGIN_DT   <  $CP-Begin)
     do Date-Difference(&CP1A.EARNS_BEGIN_DT, &CP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference($CP-Begin, $CP-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &CP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #CP-Earnings = #CP-Earnings
                     + #Prorate-Earning
  end-if


FROM PS_PAY_OTH_EARNS CP3OB
WHERE CP3OB.COMPANY    = &CP1A.COMPANY
  AND CP3OB.PAYGROUP   = &CP1A.PAYGROUP
  AND CP3OB.PAY_END_DT = &CP1A.PAY_END_DT
  AND CP3OB.OFF_CYCLE  = &CP1A.OFF_CYCLE
  AND CP3OB.PAGE_NUM   = &CP1A.PAGE_NUM
  AND CP3OB.LINE_NUM   = &CP1A.LINE_NUM
  AND CP3OB.ADDL_NBR   = &CP1A.ADDL_NBR
  AND CP3OB.SEPCHK     = &CP1A.SEPCHK
  AND EXISTS (SELECT 'X'
              FROM PS_EARNINGS_TBL CP3OC1
              WHERE CP3OC1.ERNCD = CP3OB.ERNCD
                AND CP3OC1.EFFDT = (SELECT MAX (CP3OC2.EFFDT)
                                 FROM PS_EARNINGS_TBL CP3OC2
                                 WHERE CP3OC2.ERNCD = CP3OB.ERNCD
                                   AND CP3OC2.EFFDT <= $CP-End)
                AND CP3OC1.SUBJECT_CUI = 'Y')
end-SELECT


end-procedure


begin-procedure Get-Reference-Period-Info

begin-SELECT
RP1A.COMPANY
RP1A.PAYGROUP
RP1A.PAY_END_DT
RP1A.OFF_CYCLE
RP1A.PAGE_NUM
RP1A.LINE_NUM
RP1A.ADDL_NBR
RP1A.SEPCHK
RP1A.EMPLID
RP1A.EARNS_BEGIN_DT
RP1A.EARNS_END_DT
RP1A.REG_EARNS
RP1A.REG_HRLY_EARNS
RP1A.OT_HRLY_EARNS

  do Next-RP-Earnings

FROM PS_PAY_EARNINGS RP1A,
     PS_PAYGROUP_TBL RP1B
WHERE RP1A.COMPANY = $Prev-Company
  AND ((RP1A.EARNS_END_DT   >= $RP1-begin    AND RP1A.EARNS_END_DT   <= $RP1-end) OR
       (RP1A.EARNS_BEGIN_DT >= $RP1-begin    AND RP1A.EARNS_BEGIN_DT <= $RP1-end) OR
       (RP1A.EARNS_BEGIN_DT  < $RP1-begin    AND RP1A.EARNS_END_DT   > $RP1-end))
  AND RP1A.EMPLID = $Prev-Emplid
  AND RP1A.PAY_LINE_STATUS = 'F'
  AND RP1B.COMPANY = RP1A.COMPANY
  AND RP1B.PAYGROUP = RP1A.PAYGROUP
  AND RP1B.EFFDT = (SELECT MAX (RP1B1.EFFDT)
                    FROM PS_PAYGROUP_TBL RP1B1
                    WHERE RP1B1.COMPANY = RP1B.COMPANY
                      AND RP1B1.PAYGROUP = RP1B.PAYGROUP
                      AND RP1B1.EFFDT <= $RP1-end)
  AND RP1B.COUNTRY = 'CAN'
end-SELECT


end-procedure


begin-procedure Get-Empl-Name

  let $Empl-Name = ' '

begin-SELECT
EN.NAME_DISPLAY

  let $Empl-Name = rtrim(&EN.NAME_DISPLAY,' ')

FROM PS_PERSONAL_DATA EN
WHERE EN.EMPLID = $Prev-Emplid
end-SELECT


end-procedure


begin-procedure Check-Exceptions

  let $Exception     = 'N'
  let $First-Emp-Row = 'Y'
  let $Multi-Job-Emp = 'N'
  let $Jobs = ' '
  let $JobsCSV = ' '
  let $Part-Time-Emp = 'N'
  let $Empl-On-Leave = 'N'
  let $Seven-Day     = 'N'

begin-SELECT
EJB1.EMPLID
EJB1.EMPL_RCD
EJB1.EFFDT
EJB1.EFFSEQ
EJB1.EMPL_STATUS

  if $First-Emp-Row = 'Y'
    let #Empl-Rcd-Exemption = &EJB1.EMPL_RCD
  end-if

  if #Empl-Rcd-Exemption <> &EJB1.EMPL_RCD
     if  $Multi-Job-Emp = 'N'
       do Format-Number(#Empl-Rcd-Exemption, $out,  '99')
       let $Jobs = $out || ', '
       let $JobsCSV = $out || ' '
       do Format-Number(&EJB1.EMPL_RCD, $out,  '99')
       let $Jobs = $Jobs || $out
       let $JobsCSV = $JobsCSV || $out
     else
       do Format-Number(&EJB1.EMPL_RCD, $out,  '99')
       let $Jobs = $Jobs || ', ' || $out
       let $JobsCSV = $JobsCSV || ', ' || $out
     end-if
     let $Multi-Job-Emp = 'Y'
     let $Empl-On-Leave = 'N'
    let #Empl-Rcd-Exemption = &EJB1.EMPL_RCD
  end-if

  if ((&EJB1.EMPL_STATUS = 'D') or
      (&EJB1.EMPL_STATUS = 'L') or
      (&EJB1.EMPL_STATUS = 'R') or
      (&EJB1.EMPL_STATUS = 'S') or
      (&EJB1.EMPL_STATUS = 'T') or
      (&EJB1.EMPL_STATUS = 'W')) and
      $Empl-On-Leave = 'N'

    let $Empl-On-Leave = 'Y'
    let $Empl-Leave-Date = &EJB1.EFFDT
  end-if

  if (not((&EJB1.EMPL_STATUS = 'D') or
       (&EJB1.EMPL_STATUS = 'L') or
       (&EJB1.EMPL_STATUS = 'R') or
       (&EJB1.EMPL_STATUS = 'S') or
       (&EJB1.EMPL_STATUS = 'T') or
       (&EJB1.EMPL_STATUS = 'W'))) and
      $Empl-On-Leave = 'Y'

    let $Empl-On-Leave = 'N'
    let $Empl-Back-Date = &EJB1.EFFDT
    do Date-Difference($Empl-Leave-Date, $Empl-Back-Date, #Break-Days)
    add 1 to #Break-Days
    if  #Break-Days >= 7

      let $Exception     = 'Y'
      let $Seven-Day     = 'Y'
    end-if
  end-if

  let $First-Emp-Row = 'N'

FROM PS_JOB EJB1
WHERE EJB1.EMPLID = &CP1A.EMPLID
AND   EJB1.EFFDT <= $RP1-end
AND   EJB1.EFFDT >= (SELECT MAX (EJB2.EFFDT)
                     FROM  PS_JOB EJB2
                     WHERE EJB2.EMPLID    = EJB1.EMPLID
                     AND   EJB2.EMPL_RCD  = EJB1.EMPL_RCD
                     AND   EJB2.EFFDT    <= $RP1-begin
                     AND   EJB2.EFFSEQ    = EJB1.EFFSEQ)
ORDER BY EJB1.EMPLID, EJB1.EMPL_RCD, EJB1.EFFDT, EJB1.EFFSEQ
end-SELECT

  if  $Empl-On-Leave = 'Y'

    do Date-Difference(&EJB1.EFFDT , $RP1-end , #Break-Days)
    add 1 to #Break-Days
    if  #Break-Days >= 7

      let $Exception     = 'Y'
      let $Seven-Day     = 'Y'
    end-if
  end-if



  let $First-Emp-Row      = 'Y'
  let $Empl-On-Leave      = 'N'
  let $Fourteen-Day       = 'N'
  let $Hire-In-Period     = 'N'
  let $Term-In-Period     = 'N'
  let $Jobs2              = 'Y'

begin-SELECT
EJB3.EMPLID
EJB3.EMPL_RCD
EJB3.EFFDT
EJB3.EFFSEQ
EJB3.EMPL_STATUS
EJB3.ACTION
EJB3.FULL_PART_TIME

  if $First-Emp-Row = 'Y'
    let #Empl-Rcd-Exemption = &EJB3.EMPL_RCD
  end-if

  if rtrim(&EJB3.FULL_PART_TIME,' ') = 'P'
     let $Part-Time-Emp = 'Y'
  end-if

  if #Empl-Rcd-Exemption <> &EJB3.EMPL_RCD
     if $Jobs2 = 'Y'

       let $Jobs = ' '
       let $Jobs = ' '
       let $Jobs2 = 'N'
       let $Multi-Job-Emp = 'N'
     end-if

     if  $Multi-Job-Emp = 'N'
       do Format-Number(#Empl-Rcd-Exemption, $out,  '99')
       let $Jobs = $out || ', '
       let $JobsCSV = $out || ' '
       do Format-Number(&EJB3.EMPL_RCD, $out,  '99')
       let $Jobs = $Jobs || $out
       let $JobsCSV = $JobsCSV || $out
     else
       do Format-Number(&EJB3.EMPL_RCD, $out,  '99')
       let $Jobs = $Jobs || ', ' || $out
       let $JobsCSV = $JobsCSV || ' ' || $out
     end-if

     let $Multi-Job-Emp = 'Y'
     let $Empl-On-Leave = 'N'
     let #Empl-Rcd-Exemption = &EJB3.EMPL_RCD
  end-if

  if ((&EJB3.EMPL_STATUS = 'D') or
      (&EJB3.EMPL_STATUS = 'L') or
      (&EJB3.EMPL_STATUS = 'R') or
      (&EJB3.EMPL_STATUS = 'S') or
      (&EJB3.EMPL_STATUS = 'T') or
      (&EJB3.EMPL_STATUS = 'W')) and
      $Empl-On-Leave = 'N'

    let $Empl-On-Leave = 'Y'
    let $Empl-Leave-Date = &EJB3.EFFDT
  end-if

  if (not((&EJB3.EMPL_STATUS = 'D') or
       (&EJB3.EMPL_STATUS = 'L') or
       (&EJB3.EMPL_STATUS = 'R') or
       (&EJB3.EMPL_STATUS = 'S') or
       (&EJB3.EMPL_STATUS = 'T') or
       (&EJB3.EMPL_STATUS = 'W'))) and
      $Empl-On-Leave = 'Y'

    let $Empl-On-Leave = 'N'
    let $Empl-Back-Date = &EJB3.EFFDT
    do Date-Difference($Empl-Leave-Date, $Empl-Back-Date, #Break-Days)
    add 1 to #Break-Days
    if  #Break-Days >= 14  and
      rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'
      let $Exception     = 'Y'
      let $Fourteen-Day  = 'Y'
    end-if
  end-if

  if ((&EJB3.ACTION = 'HIR') or
      (&EJB3.ACTION = 'REH')) and
      &EJB3.EFFDT >=  $CP-begin

    let $Exception          = 'Y'
    let $Hire-In-Period     = 'Y'
  end-if

  if (&EJB3.ACTION = 'TER') and
      &EJB3.EFFDT >=  $CP-begin

    let $Exception          = 'Y'
    let $Term-In-Period     = 'Y'
  end-if

  let $First-Emp-Row = 'N'

FROM PS_JOB EJB3
WHERE EJB3.EMPLID = &CP1A.EMPLID
AND   EJB3.EFFDT <= $CP-end
AND   EJB3.EFFDT >= (SELECT MAX (EJB4.EFFDT)
                     FROM  PS_JOB EJB4
                     WHERE EJB4.EMPLID    = EJB3.EMPLID
                     AND   EJB4.EMPL_RCD  = EJB3.EMPL_RCD
                     AND   EJB4.EFFDT    <= $CP-begin
                     AND   EJB4.EFFSEQ    = EJB3.EFFSEQ)
ORDER BY EJB3.EMPLID, EJB3.EMPL_RCD, EJB3.EFFDT, EJB3.EFFSEQ
end-SELECT

  if  $Empl-On-Leave = 'Y'
    do Date-Difference(&EJB3.EFFDT , $CP1-end , #Break-Days)
    add 1 to #Break-Days
    if  #Break-Days >= 14   and
        rtrim(&RC.PY_CEWS_FORMULA,' ') = 'P'

      let $Exception     = 'Y'
      let $Fourteen-Day  = 'Y'
    end-if
  end-if


end-procedure


begin-procedure Next-RP-Earnings

  if (&RP1A.EARNS_BEGIN_DT >= $RP1-Begin) and
     (&RP1A.EARNS_END_DT   <= $RP1-End)

    let #RP-Earnings = #RP-Earnings
                     + &RP1A.REG_EARNS
                     + &RP1A.REG_HRLY_EARNS
                     + &RP1A.OT_HRLY_EARNS
  end-if

  if (&RP1A.EARNS_BEGIN_DT < $RP1-Begin) and
     (&RP1A.EARNS_END_DT   >= $RP1-Begin) and
     (&RP1A.EARNS_END_DT   <= $RP1-End)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&RP1A.EARNS_END_DT, $RP1-Begin, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP1A.REG_EARNS
                         + &RP1A.REG_HRLY_EARNS
                         + &RP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if

  if (&RP1A.EARNS_END_DT     >  $RP1-End) and
     (&RP1A.EARNS_BEGIN_DT   >= $RP1-Begin) and
     (&RP1A.EARNS_BEGIN_DT   <= $RP1-End)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, $RP1-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP1A.REG_EARNS
                         + &RP1A.REG_HRLY_EARNS
                         + &RP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if

  if (&RP1A.EARNS_END_DT     >  $RP1-End) and
     (&RP1A.EARNS_BEGIN_DT   <  $RP1-Begin)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference($RP1-Begin, $RP1-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP1A.REG_EARNS
                         + &RP1A.REG_HRLY_EARNS
                         + &RP1A.OT_HRLY_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if

  do Other-RP-Earnings

end-procedure


begin-procedure Other-RP-Earnings

begin-SELECT
RP3OB.ERNCD
RP3OB.OTH_EARNS

  if (&RP1A.EARNS_BEGIN_DT >= $RP1-Begin) and
     (&RP1A.EARNS_END_DT   <= $RP1-End)

    let #RP-Earnings = #RP-Earnings
                     + &RP3OB.OTH_EARNS
  end-if

  if (&RP1A.EARNS_BEGIN_DT < $RP1-Begin) and
     (&RP1A.EARNS_END_DT   >= $RP1-Begin) and
     (&RP1A.EARNS_END_DT   <= $RP1-End)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&RP1A.EARNS_END_DT, $RP1-Begin, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if

  if (&RP1A.EARNS_END_DT     >  $RP1-End) and
     (&RP1A.EARNS_BEGIN_DT   >= $RP1-Begin) and
     (&RP1A.EARNS_BEGIN_DT   <= $RP1-End)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, $RP1-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if

  if (&RP1A.EARNS_END_DT     >  $RP1-End) and
     (&RP1A.EARNS_BEGIN_DT   <  $RP1-Begin)
     do Date-Difference(&RP1A.EARNS_BEGIN_DT, &RP1A.EARNS_END_DT, #Earns-Days)
     add 1 to #Earns-Days
     do Date-Difference($RP1-Begin, $RP1-End, #Prorate-Days)
     add 1 to #Prorate-Days

    let #Prorate-Earning = &RP3OB.OTH_EARNS
    let #Prorate-Earning = #Prorate-Earning
                         * (#Prorate-Days
                         /  #Earns-Days)
    let #Prorate-Earning = round(#Prorate-Earning,2)

    let #RP-Earnings = #RP-Earnings
                     + #Prorate-Earning
  end-if


FROM PS_PAY_OTH_EARNS RP3OB
WHERE RP3OB.COMPANY    = &RP1A.COMPANY
  AND RP3OB.PAYGROUP   = &RP1A.PAYGROUP
  AND RP3OB.PAY_END_DT = &RP1A.PAY_END_DT
  AND RP3OB.OFF_CYCLE  = &RP1A.OFF_CYCLE
  AND RP3OB.PAGE_NUM   = &RP1A.PAGE_NUM
  AND RP3OB.LINE_NUM   = &RP1A.LINE_NUM
  AND RP3OB.ADDL_NBR   = &RP1A.ADDL_NBR
  AND RP3OB.SEPCHK     = &RP1A.SEPCHK
  AND EXISTS (SELECT 'X'
              FROM PS_EARNINGS_TBL RP3OC1
              WHERE RP3OC1.ERNCD = RP3OB.ERNCD
                AND RP3OC1.EFFDT = (SELECT MAX (RP3OC2.EFFDT)
                                 FROM PS_EARNINGS_TBL RP3OC2
                                 WHERE RP3OC2.ERNCD = RP3OB.ERNCD
                                   AND RP3OC2.EFFDT <= $RP1-End)
                AND RP3OC1.SUBJECT_CUI = 'Y')
end-SELECT


end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getdatcd.sqc'  !Get-Date-Codes procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'datewrk.sqc'
#Include 'datemath.sqc'
