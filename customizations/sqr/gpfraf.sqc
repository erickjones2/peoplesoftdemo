!***********************************************************************
!  GPFRAF: GP France - Application Framework File Generation (FRA)     *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2015/12/07:10:47:01                                 !
!       $Release:  HR92                                                !
!           $Bug:  22202062                                            !
!***********************************************************************

!***********************************************************************
!  Fetch-Output-Data
!***********************************************************************

begin-procedure Fetch-Output-Data

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Fetch-Output-Data ' || &time
   show 'Starting: ' $AuditDescr
#end-if



let $descp= 'N'
if $Output_flg = 'Y'
      OPEN $FileName AS 1 FOR-WRITING RECORD=255:vary
      OPEN $FileNamelog AS 2 FOR-WRITING RECORD=255:vary
      do Update-Record
end-if

   let $PreviousStruct = ''
   let $PreviousRecord = ''
   let $PreviousValue = ''
   let $PreviousValueRpt = ''
   let #PreviousValueNbr = 0
   let $PreviousMandatory = 'Y'
   let $PreviousNbrFlag = ''
   let $PreviousEdit = ''
   let $override = 0
   let #TotalRowNbr = 1
   let #S20RowNbr = 0
   let #S20_001RowNbr=0
   let #S30RowNbr = 0
   let #S70RowNbr = 0
   let #S80RowNbr = 0
   let #S41029RowNbr = 0
   let #S41035RowNbr = 0
   let #S70002RowNbr = 0
   let #S41063RowNbr = 0

   let $sql-statement = 'GPFRAF.sqr,Select,Sending-Reference'
begin-SELECT ON-ERROR = SQL-Error
LANGUAGE_CD
   let $base_language = upper(rtrim(&LANGUAGE_CD, ' '))
FROM PSOPTIONS
end-SELECT

   do Fetch-Data-Record

      !------- Print structure S90.G01.00 -------

      let $DA_STRUCT = 'S90.G01.00'
      let #nbr_valueT = #TotalRowNbr + 2

      let $str_out = to_char(#nbr_valueT)
      do PrintField('001', $DA_STRUCT, $str_out, $str_out, #nbr_valueT, '1', 'Y', 'Y', 'B99999999999', 'Rows Number', $hdrval)

      let #nbr_value = #S20RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S30RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S70RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S80RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S41029RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S41035RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S70002RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S41063RowNbr
      if #nbr_value <> 0
         let #nbr_valueT = #nbr_valueT + 1
      end-if

      let #nbr_value = #S20_001RowNbr
      if #nbr_value <> 0
        let $str_out = to_char(#nbr_value)
         do PrintField('002', $DA_STRUCT, $str_out, $str_out, #nbr_value, '1', 'Y', 'Y', 'B9999', 'ST20 Number', $hdrval)
      end-if

   do PrintField('END', 'END', 'END','END', 0, '1', 'Y', 'N', '', 'Dummy', $hdrval)
   if $Output = '1' or $Output = '3'
      CLOSE 1
      CLOSE 2
   end-if

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Fetch-Output-Data ' || &time
   show 'Exiting: ' $AuditDescr
#end-if


end-procedure Fetch-Output-Data


!***********************************************************************
!  Incr-Accu-Value
!***********************************************************************

Begin-Procedure Incr-Accu-Value
! accumulators for structure S90

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Incr-Accu-Value ' || &time
   show '   Starting: ' $AuditDescr
#end-if

   let $StructCode1 = substr(&A.GPFR_AF_NODE_NAME, 1, 3)

   if $StructCode1 = 'S20'
      let #S20RowNbr = #S20RowNbr + 1
   end-if
   if $StructCode1 = 'S30'
      let #S30RowNbr = #S30RowNbr + 1
   end-if
   if &A.GPFR_AF_NODE_NAME = 'S70.G01.01'
      let #S70RowNbr = #S70RowNbr + 1
   end-if
   if $StructCode1 = 'S80'
      let #S80RowNbr = #S80RowNbr + 1
   end-if
   if &A.GPFR_AF_NODE_NAME='S20.G01.00' AND &A.GPFR_AF_ATTR_NAME='001'
      let #S20_001RowNbr = #S20_001RowNbr + 1
   end-if

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Incr-Accu-Value ' || &time
   show '   Exiting: ' $AuditDescr
#end-if

end-procedure Incr-Accu-Value


!***********************************************************************
!  Get-Data-Record
!***********************************************************************

Begin-Procedure Get-Data-Record
   let $sql-statement = 'GPFRAF.sqr,Select,Get-Data-Record'

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Get-Data-Record ' || &time
   show '     Starting: ' $AuditDescr
#end-if

   let #KEY_NODE = 0
   let #KEY_ATTR = 0
begin-SELECT ON-ERROR = SQL-Error
BB.GPFR_AF_NODE_NAME
AA.GPFR_AF_ATTR_NAME
AA.GPFR_AF_MANDATORY
AA.GPFR_AF_ATTR_TYPE
AA.GPFR_AF_ATR_LBLSRC
AA.GPFR_AF_ATR_LENGTH
AA.GPFR_AF_ATR_DECIML
AA.GPFR_AF_CODE_ID
AA.GPFR_AF_PROMPT
AA.GPFR_AF_PR_KEY_FLD
AA.GPFR_AF_PR_LBL_FLD
AA.GPFR_AF_ATTR_FIELD
AA.DESCR60
BB.GPFR_AF_KEY_NODE
AA.GPFR_AF_KEY_ATTR

   move &AA.GPFR_AF_ATR_LENGTH to #DA_LENGTH
   move &AA.GPFR_AF_ATR_DECIML to #DA_DECIMAL
   move &BB.GPFR_AF_KEY_NODE to #KEY_NODE
   move &AA.GPFR_AF_KEY_ATTR to #KEY_ATTR

   let $DA_STRUCT = upper(rtrim(&BB.GPFR_AF_NODE_NAME, ' '))
   let $DA_RECORD = upper(rtrim(&AA.GPFR_AF_ATTR_NAME, ' '))
   let $DA_TYPE = upper(rtrim(&AA.GPFR_AF_ATTR_TYPE, ' '))
   let $DA_MANDATORY = upper(rtrim(&AA.GPFR_AF_MANDATORY, ' '))
   let $DA_LBLSRC = rtrim(&AA.GPFR_AF_ATR_LBLSRC, ' ')
   if $DA_LBLSRC = ''
      let $DA_LBLSRC = ' '
   end-if
   let $DA_DATTYP = upper(rtrim(&AA.GPFR_AF_CODE_ID, ' '))
   if $DA_DATTYP = ''
      let $DA_DATTYP = ' '
   end-if
   let $DA_PROMPT = upper(rtrim(&AA.GPFR_AF_PROMPT, ' '))
   if $DA_PROMPT = ''
      let $DA_PROMPT = ' '
   end-if
   let $DA_PR_KEY = upper(rtrim(&AA.GPFR_AF_PR_KEY_FLD, ' '))
   if $DA_PR_KEY = ''
      let $DA_PR_KEY = ' '
   end-if
   let $DA_PR_DESC = upper(rtrim(&AA.GPFR_AF_PR_LBL_FLD, ' '))
   if $DA_PR_DESC = ''
      let $DA_PR_DESC = ' '
   end-if
   let $DA_DA_FIELD = upper(rtrim(&AA.GPFR_AF_ATTR_FIELD, ' '))
   if $DA_DA_FIELD = ''
      let $DA_DA_FIELD = ' '
   end-if
   let $DA_DA_DESCR = upper(rtrim(&AA.DESCR60, ' '))
   if $DA_DA_DESCR = ''
      let $DA_DA_DESCR = ' '
   end-if

   do Insert-Data-Rec-Tmp

FROM PS_GPFR_AF_ATTR AA, PS_GPFR_AF_NODE BB WHERE AA.COUNTRY = BB.COUNTRY
AND AA.GPFR_AF_APPL = BB.GPFR_AF_APPL
AND AA.GPFR_AF_KEY_NODE = BB.GPFR_AF_KEY_NODE
AND AA.COUNTRY = (SELECT COUNTRY FROM PS_GPFR_AF_RUN_DFN WHERE GPFR_AF_EXTRACT_ID = $Extract_Id)
AND AA.GPFR_AF_APPL = (SELECT GPFR_AF_APPL FROM PS_GPFR_AF_RUN_DFN WHERE GPFR_AF_EXTRACT_ID = $Extract_Id)
AND AA.GPFR_AF_RPT_ONLY <> 'Y'
END-SELECT

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Get-Data-Record ' || &time
   show '     Exiting: ' $AuditDescr
#end-if

end-procedure Get-Data-Record

!***********************************************************************
!  Insert-Data-Rec-Tmp
!***********************************************************************

Begin-Procedure Insert-Data-Rec-Tmp
   let $sql-statement = 'GPFRAF.sqr,Insert,Insert-Data-Rec-Tmp'

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Insert-Data-Rec-Tmp ' || &time
   show '     Starting: ' $AuditDescr
#end-if

   let #prcs_process_instance = To_number($prcs_process_instance)

begin-SQL On-Error=SQL-Error
INSERT INTO PS_GPFR_AFNA_TAO
           (PROCESS_INSTANCE,
            GPFR_AF_NODE_NAME,
            GPFR_AF_ATTR_NAME,
            GPFR_AF_MANDATORY,
            GPFR_AF_ATTR_TYPE,
            GPFR_AF_ATR_LBLSRC,
            GPFR_AF_ATR_LENGTH,
            GPFR_AF_ATR_DECIML,
            GPFR_AF_CODE_ID,
            GPFR_AF_PROMPT,
            GPFR_AF_PR_KEY_FLD,
            GPFR_AF_PR_LBL_FLD,
            GPFR_AF_ATTR_FIELD,
            DESCR60,
            GPFR_AF_KEY_NODE,
            GPFR_AF_KEY_ATTR,
            GPFR_AF_NUM_VAL)
VALUES (#prcs_process_instance,
        $DA_STRUCT,
        $DA_RECORD,
        $DA_MANDATORY,
        $DA_TYPE,
        $DA_LBLSRC,
        #DA_LENGTH,
        #DA_DECIMAL,
        $DA_DATTYP,
        $DA_PROMPT,
        $DA_PR_KEY,
        $DA_PR_DESC,
        $DA_DA_FIELD,
        $DA_DA_DESCR,
        #KEY_NODE,
        #KEY_ATTR,
        0)
end-SQL

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Insert-Data-Rec-Tmp ' || &time
   show '     Exiting: ' $AuditDescr
#end-if

end-procedure Insert-Data-Rec-Tmp



!***********************************************************************
!  Delete-Data-Rec-Tmp
!***********************************************************************

begin-procedure Delete-Data-Rec-Tmp

   let $sql-statement = 'GPFRAF.sqr,Delete,Delete-Data-Rec-Tmp'

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Delete-Data-Rec-Tmp ' || &time
   show '     Starting: ' $AuditDescr
#end-if

  let #prcs_process_instance = To_number($prcs_process_instance)

begin-SQL on-Error=SQL-Error
DELETE FROM PS_GPFR_AFNA_TAO
WHERE PROCESS_INSTANCE = #prcs_process_instance
end-SQL

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Delete-Data-Rec-Tmp ' || &time
   show '     Exiting: ' $AuditDescr
#end-if

end-procedure Delete-Data-Rec-Tmp


!***********************************************************************
!  Fetch-Data-Record
!***********************************************************************

Begin-Procedure Fetch-Data-Record
   let $sql-statement = 'GPFRAF.sqr,Select,Data-Record'

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Fetch-Data-Record ' || &time
   show '     Starting: ' $AuditDescr
#end-if

Begin-Select ON-ERROR = SQL-Error
DFN.COUNTRY
DFN.GPFR_AF_APPL

     let $Gpfr_af_appl = &DFN.GPFR_AF_APPL
     let $Country      = &DFN.COUNTRY

FROM PS_GPFR_AF_RUN_DFN DFN
WHERE GPFR_AF_EXTRACT_ID = $Extract_Id

End-Select


! To update Num value for PS Don

begin-SQL on-Error=SQL-Error
UPDATE PS_GPFR_AFNA_TAO SET GPFR_AF_NUM_VAL = (SELECT A.GPFR_AF_NUM_VAL FROM PS_GPFR_AF_ATR_PRM A, PS_GPFR_AF_DON_PRM DN
                                                WHERE A.COUNTRY        = $Country
                                                AND A.GPFR_AF_APPL     = $Gpfr_af_appl
                                                AND A.GPFR_AF_KEY_NODE = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_NODE
                                                AND A.GPFR_AF_KEY_ATTR = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_ATTR
                                                AND A.GPFR_AF_FUNCT_NM ='ROUND'
                                                AND DN.COUNTRY = A.COUNTRY
                        AND DN.GPFR_AF_APPL =A.GPFR_AF_APPL
                        AND DN.GPFR_AF_DON=A.GPFR_AF_DON
                        AND DN.GPFR_AF_SQL_SEQ=A.GPFR_AF_SQL_SEQ
                        AND DN.GPFR_AF_PARM_SEQ=A.GPFR_AF_PARM_SEQ
                        AND DN.GPFR_AF_OWNER='P')
                                    
        WHERE PROCESS_INSTANCE = #prcs_process_instance AND EXISTS (SELECT 1 FROM PS_GPFR_AF_ATR_PRM B, PS_GPFR_AF_DON_PRM DN1
                                                WHERE  B.COUNTRY       = $Country
                                                AND B.GPFR_AF_APPL     = $Gpfr_af_appl
                                                AND B.GPFR_AF_KEY_NODE = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_NODE
                                                AND B.GPFR_AF_KEY_ATTR = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_ATTR
                                                AND B.GPFR_AF_NUM_VAL  <> 0
                                                AND B.GPFR_AF_FUNCT_NM ='ROUND'
                        AND DN1.COUNTRY=B.COUNTRY
                        AND DN1.GPFR_AF_APPL=B.GPFR_AF_APPL
                        AND DN1.GPFR_AF_DON=B.GPFR_AF_DON
                        AND DN1.GPFR_AF_SQL_SEQ=B.GPFR_AF_SQL_SEQ
                        AND DN1.GPFR_AF_PARM_SEQ=B.GPFR_AF_PARM_SEQ
                        AND DN1.GPFR_AF_OWNER='P')

                        

end-SQL


! To update Num value for Customer Don

begin-SQL on-Error=SQL-Error
UPDATE PS_GPFR_AFNA_TAO SET GPFR_AF_NUM_VAL = (SELECT A.GPFR_AF_NUM_VAL FROM PS_GPFR_AF_ATR_PRM A, PS_GPFR_AF_DON_PRM DN
                                                WHERE A.COUNTRY        = $Country
                                                AND A.GPFR_AF_APPL     = $Gpfr_af_appl
                                                AND A.GPFR_AF_KEY_NODE = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_NODE
                                                AND A.GPFR_AF_KEY_ATTR = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_ATTR
                                                AND A.GPFR_AF_FUNCT_NM ='ROUND' 
                        AND DN.COUNTRY=A.COUNTRY
                        AND DN.GPFR_AF_APPL=A.GPFR_AF_APPL
                        AND DN.GPFR_AF_DON=A.GPFR_AF_DON
                        AND DN.GPFR_AF_SQL_SEQ=A.GPFR_AF_SQL_SEQ
                        AND DN.GPFR_AF_PARM_SEQ=A.GPFR_AF_PARM_SEQ
                        AND DN.GPFR_AF_OWNER='C'
                        )
        WHERE PROCESS_INSTANCE = #prcs_process_instance AND EXISTS (SELECT 1 FROM PS_GPFR_AF_ATR_PRM B,PS_GPFR_AF_DON_PRM DN1
                                                WHERE  B.COUNTRY       = $Country
                                                AND B.GPFR_AF_APPL     = $Gpfr_af_appl
                                                AND B.GPFR_AF_KEY_NODE = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_NODE
                                                AND B.GPFR_AF_KEY_ATTR = PS_GPFR_AFNA_TAO.GPFR_AF_KEY_ATTR
                                                AND B.GPFR_AF_FUNCT_NM ='ROUND' 
                        AND DN1.COUNTRY=B.COUNTRY
                        AND DN1.GPFR_AF_APPL=B.GPFR_AF_APPL
                        AND DN1.GPFR_AF_DON=B.GPFR_AF_DON
                        AND DN1.GPFR_AF_SQL_SEQ=B.GPFR_AF_SQL_SEQ
                        AND DN1.GPFR_AF_PARM_SEQ=B.GPFR_AF_PARM_SEQ
                        AND DN1.GPFR_AF_OWNER='C')
end-SQL


#ifdef debugd
Begin-Select ON-ERROR = SQL-Error
COUNT(GPFR_AF_NUM_VAL) &Count
   Show '     Count of updated rows: ' &Count
FROM PS_GPFR_AFNA_TAO
WHERE PROCESS_INSTANCE = #prcs_process_instance
 AND GPFR_AF_NUM_VAL <> 0
End-Select
#end-if

let $hdrval = ' '
let #GPFR_AF_KEY_NODE = ' '
show $Extract_Id
begin-SELECT ON-ERROR = SQL-Error
A.GPFR_AF_APPL
A.GPFR_AF_NODE_NAME
A.GPFR_AF_KEY_NODE
A.GPFR_AF_ATTR_NAME
A.GPFR_AF_KEY_ATTR
A.GPFR_AF_CHAR_VAL
A.GPFR_AF_NUM_VAL
A.GPFR_AF_DATE_VAL
A.COMPANY
A.EMPLID
A.GPFR_AF_NODE_SET
B.GPFR_AF_MANDATORY
B.GPFR_AF_ATTR_TYPE
B.GPFR_AF_ATR_LBLSRC
B.GPFR_AF_ATR_LENGTH
B.GPFR_AF_ATR_DECIML
B.GPFR_AF_CODE_ID
B.GPFR_AF_PROMPT
B.GPFR_AF_PR_KEY_FLD
B.GPFR_AF_PR_LBL_FLD
B.GPFR_AF_ATTR_FIELD
B.DESCR60
A.GPFR_AF_LVL_1_VAL
A.ESTABID
A.GPFR_AF_KEY_EXTRCT
B.GPFR_AF_NUM_VAL

   if #GPFR_AF_KEY_NODE <> &A.GPFR_AF_KEY_NODE
      do Incr-Accu-Value
   end-if

   let $GPFR_AF_APPL = &A.GPFR_AF_APPL
   let #GPFR_AF_KEY_NODE = &A.GPFR_AF_KEY_NODE
   let #GPFR_AF_KEY_ATTR = &A.GPFR_AF_KEY_ATTR
   move &B.GPFR_AF_ATR_LENGTH to #DA_LENGTH
   move &B.GPFR_AF_ATR_DECIML to #DA_DECIMAL
   move &A.GPFR_AF_NUM_VAL to #DA_NUM_VALUE

   if $GPFR_AF_APPL = 'AEDEMAT'
      let #DA_NUM_VALUE = abs(#DA_NUM_VALUE)
   end-if

   let $DA_STRUCT = upper(rtrim(&A.GPFR_AF_NODE_NAME, ' '))
   let $DA_RECORD = upper(rtrim(&A.GPFR_AF_ATTR_NAME, ' '))
   let $DA_TYPE = upper(rtrim(&B.GPFR_AF_ATTR_TYPE, ' '))
   let $DA_MANDATORY = upper(rtrim(&B.GPFR_AF_MANDATORY, ' '))
   let $DA_LBLSRC = rtrim(&B.GPFR_AF_ATR_LBLSRC, ' ')
   let $DA_CHR_VALUE = ltrim(rtrim(&A.GPFR_AF_CHAR_VAL, ' '), ' ')
   let $DA_CODE = upper(rtrim(&A.GPFR_AF_CHAR_VAL, ' '))
   let $Declnat = upper(rtrim(&A.GPFR_AF_NODE_SET, ' '))

   let $DA_DATTYP = upper(rtrim(&B.GPFR_AF_CODE_ID, ' '))
   let $DA_PROMPT = upper(rtrim(&B.GPFR_AF_PROMPT, ' '))
   let $DA_PR_KEY = upper(rtrim(&B.GPFR_AF_PR_KEY_FLD, ' '))
   let $DA_PR_DESC = upper(rtrim(&B.GPFR_AF_PR_LBL_FLD, ' '))
   let $DA_DA_FIELD = upper(rtrim(&B.GPFR_AF_PR_LBL_FLD, ' '))
   let $DA_DA_DESCR = upper(rtrim(&B.DESCR60, ' '))

   let $DA_KEY_EXTRACT = upper(rtrim(&A.GPFR_AF_KEY_EXTRCT, ' '))
   move &B.GPFR_AF_NUM_VAL to #Round_Rule
   let $report_str_out = ''
   let $hdrval = 'Default'
   let $SubStruct = substr($DA_STRUCT, 1, 3)

   ! ------- Text and Fixed types -------
   if $DA_TYPE = 'T'

      if $DA_LBLSRC = 'CODE' or $DA_LBLSRC = 'RECD' or $DA_LBLSRC = 'XLAT'
         ! ------- 1 descr retreived from GPFR_DA_CODE & GPFR_DA_COD_LBG -------

         let $file_str_out = substr($DA_CODE, 1, #DA_LENGTH)

      else
         ! ------- get DA_CHR_VALUE -------
         let $file_str_out = substr($DA_CHR_VALUE, 1, #DA_LENGTH)
         let $report_str_out = substr($DA_CHR_VALUE, 1, #DA_LENGTH)

      end-if
      let $DA_ACTION = '1'
      if $file_str_out = '' and $report_str_out = ''
          let $file_str_out = ' '
          let $report_str_out = ' '
      end-if
      if $file_str_out = ' ' and $DA_MANDATORY = 'N'
         show 'Skip Printing ' $DA_STRUCT '.' $DA_RECORD ',' $file_str_out
      else
         do PrintField($DA_RECORD, $DA_STRUCT, $file_str_out,
                    $report_str_out, 0, $DA_ACTION,
                    $DA_MANDATORY, 'N', '',$DA_DA_DESCR, $hdrval)
      end-if
   end-if

   !------- Numeric and Monetery types -------
   if $DA_TYPE = 'N' or $DA_TYPE = 'M'
      let $int = ''
      let $int = rpad($int, #DA_LENGTH, '9')
      let $dec = ''
      let $dec = rpad($dec, #DA_DECIMAL, '9')
      if #DA_DECIMAL > 0
         let $edit = $int || '.' || $dec
      else
         let $edit = $int
      end-if

      IF #Round_Rule <> 0
       do RoundRule(#GPFR_AF_KEY_NODE, #GPFR_AF_KEY_ATTR, #DA_DECIMAL, $Extract_Id, #Round_Rule, #DA_NUM_VALUE)
      else
       let #DA_NUM_VALUE = Trunc(#DA_NUM_VALUE, #DA_DECIMAL)
      END-IF

      IF $GPFR_AF_APPL = 'AEDEMAT'
         let $file_str_out = translate(edit(#DA_NUM_VALUE, $edit), '.', '')
      ELSE
         let $file_str_out = #DA_NUM_VALUE
      END-IF

      let #CheckNbr = edit(#DA_NUM_VALUE, $edit)

      if #CheckNbr <> 0 or $DA_MANDATORY = 'Y'
         let $DA_ACTION = '1'
         do PrintField($DA_RECORD, $DA_STRUCT, $file_str_out,
                       $report_str_out, #DA_NUM_VALUE, $DA_ACTION,
                       $DA_MANDATORY, 'Y', $edit,$DA_DA_DESCR, $hdrval)
      end-if
   end-if

   !------- Date types -------
   if $DA_TYPE = 'D'

         let $DA_CHR_VALUE = datetostr(&A.GPFR_AF_DATE_VAL,'DDMMYYYY')
         let $file_str_out = $DA_CHR_VALUE
         let $report_str_out = $DA_CHR_VALUE
         let $DA_ACTION = '1'
         if $file_str_out = ' ' and $DA_MANDATORY = 'N'
             show 'Skip Printing ' $DA_STRUCT '.' $DA_RECORD ',' $file_str_out
         else

             do PrintField($DA_RECORD, $DA_STRUCT, $file_str_out,
                $report_str_out, 0, $DA_ACTION,
            $DA_MANDATORY, 'N', '',$DA_DA_DESCR, $hdrval)
         end-if
    end-if

FROM PS_GPFR_AF_EXTRACT A, PS_GPFR_AFNA_TAO B
WHERE A.GPFR_AF_EXTRACT_ID = $Extract_Id
AND A.GPFR_AF_NODE_NAME = B.GPFR_AF_NODE_NAME
AND A.GPFR_AF_ATTR_NAME = B.GPFR_AF_ATTR_NAME
AND B.PROCESS_INSTANCE = #prcs_process_instance
ORDER BY A.GPFR_AF_LVL_1_ORD,A.GPFR_AF_LVL_1_VAL,A.GPFR_AF_LVL_2_ORD,A.GPFR_AF_LVL_2_VAL,
A.GPFR_AF_LVL_3_ORD,A.GPFR_AF_LVL_3_VAL,A.GPFR_AF_LVL_4_ORD,A.GPFR_AF_LVL_4_VAL,
A.GPFR_AF_LVL_5_ORD,A.GPFR_AF_LVL_5_VAL,A.GPFR_AF_LVL_6_ORD,A.GPFR_AF_LVL_6_VAL,
A.GPFR_AF_LVL_7_ORD,A.GPFR_AF_LVL_7_VAL,A.GPFR_AF_LVL_8_ORD,A.GPFR_AF_LVL_8_VAL,
A.GPFR_AF_LVL_9_ORD,A.GPFR_AF_LVL_9_VAL,A.GPFR_AF_LVL_10_ORD,A.GPFR_AF_LVL_10_VAL,
A.GPFR_AF_KEY_EXTRCT,A.GPFR_AF_NODE_NAME,A.GPFR_AF_ATTR_NAME
end-select

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'Fetch-Data-Record ' || &time
   show '     Exiting: ' $AuditDescr
#end-if

end-procedure Fetch-Data-Record


!***********************************************************************
! PrintField                                                           *
!***********************************************************************
begin-procedure PrintField($Record, $Struct, $FileValue, $ReportValue, #Nbr, $Action, $Mandatory, $NbrFlag, $Edit,$DA_DA_DESCR,$hdrval)

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'PrintField(' || $Record || ',' ||
                     $Struct || ',' || $FileValue || ',' || $ReportValue || ',' || $Edit || ')'
   show ' Starting: ' $AuditDescr
#end-if
     
     
     let #Printed = 0
     if  ($Struct = $_PreviousStruct or isblank($_PreviousStruct))
     and ($Record = $_PreviousRecord or isblank($_PreviousRecord)) 
      and ($FileValue = $_PreviousValue or isblank($_PreviousValue)) 

        if $Action = '1'
           ! override
           let $_override = 1
           if $NbrFlag = 'Y'
              let #_PreviousValueNbr = #Nbr
           else
              let $_PreviousValue = $FileValue
              let $_PreviousValueRpt = $ReportValue
           end-if
        end-if
        if $Action = '2'
           ! concatenate
           if $NbrFlag = 'Y'
              let #_PreviousValueNbr = #Nbr + #_PreviousValueNbr
           else
              let $_PreviousValue = $_PreviousValue || $FileValue
              let $_PreviousValueRpt = $_PreviousValueRpt || $ReportValue
           end-if
        end-if
     else

        if $_PreviousNbrFlag = 'Y'
              IF $GPFR_AF_APPL = 'AEDEMAT'
                 let $_PreviousValue = translate(ltrim(edit(#_PreviousValueNbr, $PreviousEdit), ' '),'.','')
              ELSE
                 let $_PreviousValue = ltrim(edit(#_PreviousValueNbr, $PreviousEdit), ' ')
              END-IF
           let $_PreviousValueRpt = ltrim($_PreviousValue, ' ')
        end-if

        if not isblank($_PreviousStruct) and not isblank($_PreviousRecord)
           if $_PreviousMandatory = 'Y' or ($_PreviousMandatory <> 'Y' and (not isblank($_PreviousValue)))
              do convert-to-char($_PreviousValue, $RawValue)
              do convert-to-char($_PreviousValueRpt, $RawRpt)

              if $RawValue = ''
                 let $RawValue = ' '
              end-if
              If  $_PreviousStruct='S40.G10.05' and $_PreviousRecord='011.001'
                 Let $RawValue = $_PreviousValue
                 Let $RawRpt   = $_PreviousValueRpt
              End-If
              let $OutFile = $_PreviousStruct || '.' || $_PreviousRecord || ',''' || $RawValue || ''''

              if $_PreviousValueRpt <> $_PreviousValue and not isblank($_PreviousValueRpt)
                 let $OutRpt = $_PreviousStruct || '.' || $_PreviousRecord || ',''' || $_PreviousValue || ''',''' || $_PreviousValueRpt || ''''
              else
                 let $OutRpt = $_PreviousStruct || '.' || $_PreviousRecord || ',''' ||  $RawRpt || ''''
              end-if

              if $_Output_flg = 'Y'
                         write 1 from $OutFile
                         write 2 from $OutFile
                         let #Printed = 1
              end-if
           end-if
        end-if

        ! ------- Accumulators for structure S90 -------
        if #Printed = 1
           let #_TotalRowNbr = #_TotalRowNbr + 1

           let $StructCode = $_PreviousStruct || '.' || $_PreviousRecord
           let $StructCode1 = substr($StructCode, 1, 3)
           let $StructCode2 = substr($StructCode, 1, 14)
           if $StructCode1 = 'S41'
              if $StructCode2 = 'S41.G01.00.029'
                 let #_S41029RowNbr = #_S41029RowNbr + #_PreviousValueNbr
              end-if
              if $StructCode2 = 'S41.G01.00.035'
                 let #_S41035RowNbr = #_S41035RowNbr + #_PreviousValueNbr
              end-if
              if $StructCode2 = 'S41.G01.00.063'
                 let #_S41063RowNbr = #_S41063RowNbr + #_PreviousValueNbr
              end-if

           end-if
           if $StructCode1 = 'S70'
              if $StructCode2 = 'S70.G01.01.002'
                 let #_S70002RowNbr = #_S70002RowNbr + #_PreviousValueNbr
              end-if
              if $StructCode2 = 'S70.G01.01.013'
                 let #_S70002RowNbr = #_S70002RowNbr - #_PreviousValueNbr
              end-if
           end-if
        end-if

        let $_override = 0
        let #_PreviousValueNbr = #Nbr
        let $_PreviousValue = $FileValue
        let $_PreviousValueRpt = $ReportValue

     end-if

     let $_PreviousStruct = $Struct
     let $_PreviousRecord = $Record
     let $_PreviousMandatory = $Mandatory
     let $_PreviousNbrFlag = $NbrFlag
     let $PreviousEdit = $Edit
     let $PreDesrc = $DA_DA_DESCR

#ifdef debugd
   date-time () HH:MI:SS &time
   let $AuditDescr = 'PrintField(' || $Record || ',' ||
                     $Struct || ',' || $FileValue || ',' || $ReportValue || ')'
   show '     Exiting: ' $AuditDescr
#end-if

end-procedure PrintField


!************************************************************************
!   Update-Record
!************************************************************************

Begin-Procedure Update-Record

Begin-Select
GPFR_AF_SEND_NUM &sendnum

         move &sendnum to #sendnumb

FROM PS_GPFR_AF_INSTALL
end-select

if  #sendnumb = 0
   let #sendnumb  = 0
Begin-Sql
   insert into PS_GPFR_AF_INSTALL (GPFR_AF_SEND_NUM) values (#sendnumb)
end-sql

end-if

Begin-select
GPFR_AF_NUM_VAL  &yearval

from PS_GPFR_AF_EXTRACT
where GPFR_AF_EXTRACT_ID = $Extract_Id
AND GPFR_AF_NODE_NAME = 'S20.G01.00'
and GPFR_AF_ATTR_NAME = '003'

end-select
let #sendnumb  =  #sendnumb + 1
let $sendnumstr = lpad(to_char(#sendnumb),6,'0')

let $yearprint = to_char(&yearval) || $sendnumstr

Begin-Sql
        update PS_GPFR_AF_INSTALL set GPFR_AF_SEND_NUM = #sendnumb
end-sql
!end-if

End-Procedure Update-Record


!************************************************************************
!   RoundRule
!************************************************************************
Begin-Procedure RoundRule(#GPFR_AF_KEY_NODE, #GPFR_AF_KEY_ATTR, #DA_DECIMAL, $Extract_Id, #Round_Rule, :#DA_NUM_VALUE)

  Evaluate #Round_Rule
  when = 1
    let #DA_NUM_VALUE = Round(#DA_NUM_VALUE, #DA_DECIMAL)
    break
  when = 2
    let #DA_NUM_VALUE = Trunc(#DA_NUM_VALUE, 0)
    break
  when = 3
    let #DA_NUM_VALUE = Trunc(#DA_NUM_VALUE+0.5, 0)
    break
  when-other
    let #DA_NUM_VALUE = Trunc(#DA_NUM_VALUE, #DA_DECIMAL)
  End-Evaluate

End-Procedure RoundRule
