!***********************************************************************
!  GPUSVEIN.SQC : Validation logic for SWT EIN                         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:34:29                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure

begin-procedure StripToDash

  let #DashPosition = INSTR($StateEIN,'-',1)
  if #DashPosition <> 2 and #DashPosition <> 3
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
  else
    let $State_ID_Ltrim = ltrim ($StateEIN, ' ')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '0123456789')
    let $State_ID_Ltrim = ltrim ($State_ID_Ltrim, '-')
  end-if
  let $State_ID_Numeric  = $State_ID_Ltrim
  let #StateEIN = $State_ID_Numeric
  move  #StateEIN         to  $StateEIN    09999999999999999999

end-procedure


begin-procedure Validate-SWT-EIN
  
  let $Error-Message-Generated = 'N'

  if $State <> 'DE'
    let $StateEIN = rtrim($SWT_EIN, ' ')
    if $StateEIN = ''
      do Invalid-SWT-EIN
    end-if
  end-if

  Evaluate $State
    when = 'AL'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 6)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'AR'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       let $StateEIN = $SWT_ID_Numeric
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'DC'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),6)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),6)
         end-if
       end-while
       do  Is-String-Numeric ($StateEIN, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'DE'
       move '        '  to $StateEIN
       break
    when = 'ID'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 12)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'IN'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 13)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) <> 13
         do Invalid-SWT-EIN
       end-if
       break
    when = 'KY'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 6)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       if (length($SWT_ID_Numeric)) <> 6
         do Invalid-SWT-EIN
       end-if
       break
    when = 'MD'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),9)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),9)
         end-if
       end-while
       while INSTR($StateEIN,'.',1) <> 0
         let #Marks  = INSTR($StateEIN,'.',1)
         if #Marks  > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                           SUBSTR($StateEIN,(#Marks + 1),9)
         end-if
       end-while
       let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) <> 8
         do Invalid-SWT-EIN
       end-if
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'ME'
       if '' = rtrim($StateEIN,' ')
          do Invalid-SWT-EIN
       end-if
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'MS'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),11)
         end-if
       end-while
       let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) < 9
         do Invalid-SWT-EIN
       end-if
       if (length($SWT_ID_Test)) > 10
         do Invalid-SWT-EIN
       end-if
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'MT'
       break
    when = 'NC'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 9)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'NE'
       let $StateEIN = RTRIM($StateEIN, ' ')
       do StripToDash
       do  Is-String-Numeric ($State_ID_Numeric, #Return_Value)
       if #Return_Value = 0
          do Invalid-SWT-EIN
       end-if
       break
    when = 'NM'
       let $hyphen_removed = 'N'
       let $StateEIN = RTRIM($StateEIN, ' ')
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) || SUBSTR($StateEIN,(#Hyphen + 1),11)
           let $hyphen_removed = 'Y'
         end-if
       end-while
       if $hyphen_removed = 'Y'
          if SUBSTR($StateEIN,1,1) = '0'
             let $StateEIN = SUBSTR($StateEIN,2,11)
          else
             do Invalid-SWT-EIN
             break
          end-if
       end-if
       if $hyphen_removed = 'Y'
          let $SWT_ID_zeros = SUBSTR($StateEIN,8,2)
          if $SWT_ID_zeros <> '00'
             do Invalid-SWT-EIN
          end-if
          let $SWT_ID_Test  = rtrim ($StateEIN, ' ')
          do  Is-String-Numeric ($SWT_ID_Test, #Return_Value)
          if #Return_Value = 0
             do Invalid-SWT-EIN
             break
          else
             move $SWT_ID_Test to $StateAccountNumber  9999999999
          end-if
       else
          let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
          if (length($SWT_ID_Test)) <> 8 and
             (length($SWT_ID_Test)) <> 10
             do Invalid-SWT-EIN
             break
          end-if
          if (length($SWT_ID_Test)) = 8
              let $State_ID_Numeric  = substr ($StateEIN, 1, 8)
              do  Is-String-Numeric ($State_ID_Numeric, #Return_Value)
              if #Return_Value = 0
                do Invalid-SWT-EIN
                break
              end-if
          else
              let $SWT_ID_zeros = SUBSTR($StateEIN,8,2)
              if $SWT_ID_zeros <> '00'
                 do Invalid-SWT-EIN
              end-if
              let $State_ID_Numeric  = SUBSTR($StateEIN, 1, 10)
              do  Is-String-Numeric ($State_ID_Numeric, #Return_Value)
              if #Return_Value = 0
                do Invalid-SWT-EIN
              end-if
          end-if
       end-if
       break
    when = 'OH'
       let $SWT_ID_Test  = rtrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) < 8
         or (length ($SWT_ID_Test)) > 9
         do Invalid-SWT-EIN
       end-if
       if length($SWT_ID_Test) = 8
         let $SWT_ID_Test  = substr ($StateEIN,1,8)
       end-if
       if length($SWT_ID_Test) = 9
         let $SWT_ID_Test  = substr ($StateEIN,1,9)
       end-if
       do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'OR'
       let $SWT_ID_Ltrim   = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric = substr ($SWT_ID_Ltrim, 1, 20)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'PA'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim,1,8)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       break
    when = 'UT'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),14)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),14)
         end-if
       end-while

       let $SWT_ID_Ltrim = rtrim ($StateEIN, ' ')
       if (length($SWT_ID_Ltrim)) <> 6 and (length($SWT_ID_Ltrim)) <> 14
         do Invalid-SWT-EIN
       end-if
       let $First_Char   = substr ($SWT_ID_Ltrim, 1, 1)
       let $Second_Char   = substr ($SWT_ID_Ltrim, 1, 2)
       let $Last_Three_Char  = substr ($SWT_ID_Ltrim, 12, 3)

       uppercase $First_Char
       uppercase $Second_Char
       uppercase $Last_Three_Char

       if (length($SWT_ID_Ltrim)) = 6

          let #Alpha_Char   = range ($First_Char, 'A', 'Z')
          let #Alpha_Char2  = range ($Second_Char, 'A', 'Z')
          if #Alpha_Char = 0 and #Alpha_Char2 = 0
            do Invalid-SWT-EIN
          end-if
          let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 2, 5)
          let $SWT_ID_Numeric2  = substr ($SWT_ID_Ltrim, 3, 4)
          do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
          do  Is-String-Numeric ($SWT_ID_Numeric2, #Rtrn_Value2)
          if #Rtrn_Value = 0 and #Rtrn_Value2 = 0
            do Invalid-SWT-EIN
          end-if
          let $SWT_ID_Space  = substr ($SWT_ID_Ltrim, 7, 1)
          if  $SWT_ID_Space <> ''
            if  $SWT_ID_Space <> ' '
              do Invalid-SWT-EIN
            end-if
          end-if
          let  $StateEIN  =  substr ($SWT_ID_Ltrim, 1, 6)
       else
          if $Last_Three_Char <> 'WTH'
             do Invalid-SWT-EIN
          end-if
          let $SWT_ID_Numeric3  = substr ($SWT_ID_Ltrim, 1, 11)
          do  Is-String-Numeric ($SWT_ID_Numeric3, #Rtrn_Value3)
          if #Rtrn_Value3 = 0
             do Invalid-SWT-EIN
          end-if
       end-if
       break
    when = 'VA'
       break
    when = 'WI'
       while INSTR($StateEIN,'-',1) <> 0
         let #Hyphen = INSTR($StateEIN,'-',1)
         if #Hyphen > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                           SUBSTR($StateEIN,(#Hyphen + 1),16)
         end-if
       end-while
       while INSTR($StateEIN,' ',1) <> 0
         let #Spaces = INSTR($StateEIN,' ',1)
         if #Spaces > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                           SUBSTR($StateEIN,(#Spaces + 1),16)
         end-if
       end-while
       while INSTR($StateEIN,'.',1) <> 0
         let #Marks  = INSTR($StateEIN,'.',1)
         if #Marks  > 0
           let $StateEIN = SUBSTR($StateEIN,1,(#Marks - 1)) ||
                           SUBSTR($StateEIN,(#Marks + 1),16)
         end-if
       end-while
      let $SWT_ID_Test  = ltrim ($StateEIN, ' ')
       if (length($SWT_ID_Test)) <> 15
         do Invalid-SWT-EIN
       end-if
       if $SWT_ID_Test <> '036APPLIEDFOR01'
         do  Is-String-Numeric ($SWT_ID_Test, #Rtrn_Value)
      if #Rtrn_Value = 0
        do Invalid-SWT-EIN
        end-if
      end-if
      break
    when = 'WV'
       let $SWT_ID_Ltrim = ltrim ($StateEIN, ' ')
       let $SWT_ID_Numeric  = substr ($SWT_ID_Ltrim, 1, 12)
       do  Is-String-Numeric ($SWT_ID_Numeric, #Rtrn_Value)
       if #Rtrn_Value = 0
         do Invalid-SWT-EIN
       end-if
       if (length($SWT_ID_Numeric)) <> 12
         do Invalid-SWT-EIN
       end-if
       break
    when-other
       break
  end-evaluate
end-procedure

!  Unique editing requirements for StateEIN

begin-procedure Invalid-SWT-EIN

 if $Error-Message-Generated = 'N'

  if $Page-flag = 'Y'
    new-page
    move 'N' to $Page-flag
  end-if

  let $Message = 'Invalid State EIN number -> ' || '''' || $SWT_EIN || ''''

  Evaluate $State
    when = 'AL'
      let $Message = $Message || ', Alabama EIN should be entered as: 999999'
      break
    when = 'AR'
      let $Message = $Message || ', Arkansas EIN must be numeric and should be entered as: 999999999'
      break
    when = 'DC'
      let $Message = $Message || ', District of Columbia EIN must be numeric'
      break
    when = 'ID'
      let $Message = $Message || ', Idaho EIN should be entered as: 999999999999'
      break
    when = 'IN'
      let $Message = $Message || ', Indiana EIN must be entered as numeric, 13 digits'
      break
    when = 'KY'
      let $Message = $Message || ', Kentucky EIN should be entered as: 999999'
      break
    when = 'MD'
      let $Message = $Message || ', Maryland EIN should be entered as: 99999999 or 9999999-9'
      break
    when = 'MS'
      let $Message = $Message || ', Mississippi EIN should be entered as: 9999999999'
      break
    when = 'NC'
      let $Message = $Message || ', North Carolina EIN should be entered as: 999999999'
      break
    when = 'NM'
      let $Message = $Message || ', New Mexico EIN should be: 99999999, 9999999009 or 09-999999-009'
      break
    when = 'OH'
      let $Message = $Message || ', Ohio EIN should be entered as: 99999999 or 999999999'
      break
    when = 'OR'
      let $Message = $Message || ', Oregon EIN must be numeric'
      break
    when = 'PA'
      let $Message = $Message || ', Pennsylvania EIN should be entered as: 99999999'
      break
    when = 'UT'
      let $Message = $Message || ', Utah EIN should be: X99999, XX9999 or 99999999-999-XXX'
      break
    when = 'WI'
      let $Message = $Message || ', Wisconsin EIN should be numeric and 15 digits in length'
      break
    when = 'WV'
      let $Message = $Message || ', West Virginia EIN should be entered as: 999999999999'
      break
    when-other
      let $Message = $Message || ' for state ' || $State
      break
  end-evaluate
     
      if #current-line = 7
       do Print-CompanyHeading-State
      end-if

      if #current-line > 54
        new-page
        do Print-CompanyHeading-State
      end-if
      position (+1)
      print $Company               (+1,1)
      print &CT.Descr              (0,23) 
      print $Message               (0,66)

      move 'N' to $No-errors

  let $Error-Message-Generated = 'Y'
 end-if
end-procedure






