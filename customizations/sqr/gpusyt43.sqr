!**********************************************************************!
!  GPUSYT43:  Create W-2PR Print File (for Puerto Rico)                !
!**********************************************************************!
!                                                                      !
!                                                                      !
!                                                                      !
!                                                                      !
! This software and related documentation are provided under a         !
! license agreement containing restrictions on use and                 !
! disclosure and are protected by intellectual property                !
! laws. Except as expressly permitted in your license agreement        !
! or allowed by law, you may not use, copy, reproduce,                 !
! translate, broadcast, modify, license, transmit, distribute,         !
! exhibit, perform, publish or display any part, in any form or        !
! by any means. Reverse engineering, disassembly, or                   !
! decompilation of this software, unless required by law for           !
! interoperability, is prohibited.                                     !
! The information contained herein is subject to change without        !
! notice and is not warranted to be error-free. If you find any        !
! errors, please report them to us in writing.                         !
!                                                                      !
!                                                                      !
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              !
! All Rights Reserved.                                                 !
!**********************************************************************!
!                                                                      !
!       $Release:  HR92                                                !
!           $Bug:  28873564                                            !
!                                                                      !
!**********************************************************************!

#DEFINE WCOLUMN1 2    !Set up first print column of W2 form
#DEFINE WCOLUMN2 42   !Set up mid-point column of W2 form
#DEFINE SIZE_OF_FONT 8  !Used for Printing
#define PRINTER_TYPE LINEPRINTER
#include 'setenv.sqc' !Set environment

!
! Definitions of WCOLUMN1, WCOLUMN2, and SIZE_OF_FONT variables are
! listed above.  If you require larger print, the above #DEFINE
! SIZE_OF_FONT should be changed to 6.
!

Begin-Setup
   #if {SIZE_OF_FONT} = '6'
    #Include 'setup03i.sqc'  !printer and page-size init - impact
   #else
       declare-layout default
          paper-size=(8.5,11)
          orientation=PORTRAIT
          max-columns=80
          max-lines=66
          left-margin=0
          top-margin=0.15
          line-height=12
          char-width=7.2
        end-declare

#ifndef EBCDIC                       ! If not running on IBM MVS or AS/400

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER
  init-string=<27>E<27>(0N<27>&l8D<27>&l0E<27>&l88F
!                 |      |      |       |       |
!                 |      |      |       |       |
!                 |      |      |       |        --> 88 text lines
!                 |      |      |        --> top margin = 0 lines
!                 |      |       --> 8 lines per inch
!                 |       --> ISO 8859-1 symbol set
!                  --> Reset
end-declare
#endif

#else                                ! EBCDIC Ports

#if {PRINTER_TYPE} = 'LINEPRINTER'
declare-printer LP-definition
  type=LINEPRINTER

! If you intended to download the output file created by SQR to print it on a
! PCL-compatible printer attached to an ASCII-bases operating system, such as
! Windows or Unix, use the following escape codes.
!
! Note: These codes may not work as intended if the output is copied to a
!       printer defined as a directly-attached printer or a remote network
!       printer, even if the printer is PCL-compatible
!
! init-string=<39>E<39>(0N<39>&l8D<39>&l0E<39>&l88F
!             |    |       |       |       |
!             |    |       |       |        --> 88 text lines
!             |    |       |        --> top margin = 0 lines
!             |    |        --> 8 lines per inch
!             |     --> ISO 8859-1 symbol set
!              --> Reset
!
! If you intended to copy the output file created by SQR to a printer defined as
! a directly-attached printer or a remote network printer on EBCDIC-bases operating
! systems, such as MVS or OS/400, use this init-string
!
! THIS IS THE DEFAULT FOR EBCDIC SYSTEMS
!
  init-string=<241>
!             |
!              --> FCFC "1" for top of page

end-declare
#endif

#endif

#if {PRINTER_TYPE} = 'POSTSCRIPT'
declare-printer PS-definition
  type={PRINTER_TYPE}
  point-size=12
  font=3                                 ! Courier font

! add STARTUP-FILE=dir\filename to change the symbol set

end-declare
#endif

#if {PRINTER_TYPE} = 'HPLASERJET'
declare-printer HP-definition
  type={PRINTER_TYPE}
  symbol-set=0U                          ! ASCII symbol set
  point-size=12
  pitch=10
  font=3

end-declare
#endif


  #endif
End-Setup

Begin-Report
  do Init-Report
  do Stdapi-Term
End-Report

Begin-Procedure Init-Report
  display ''
  display 'Printing W-2 PR'

  let $t1 = DateToStr(DateNow(),'hh:mi:ss')  
  display $t1

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Initialization


  do Convert-Parameters

  let #PAGE = 0   

  if &TX.GPUS_YE_ALIGNCOUNT > 0
    do Print-Alignment-Forms
  end-if

  do Report-File-Create

  if &TX.GPUS_YE_ALIGNCOUNT > 0
    add #Align_Count to #T_Count
  end-if

  if $EmployeeFound = 'N'
    display ' '
    display '****** No Employee Records Selected ******'
    display ' '
    if &TX.GPUS_YE_ALIGNCOUNT > 0
        NEW-PAGE
    END-IF
    print '********************************'  (+3,1)
    print '  No Employee Records Selected  '  (+1,1)
    print '********************************'  (+1,1)
  else
    display ''
    display 'Upon successful conclusion of this program, one file will have'
    display 'been created:'
    display ''
    display '{IMPORTPREFIX}GPUSYT43.LIS contains print images for paper W-2s.'
    display ''
    do Print-Grand-Totals
  end-if

  let $t2 = DateToStr(DateNow(),'hh:mi:ss')  
  display $t2

End-Procedure

Begin-Procedure Initialization

  do Get-Current-DateTime
  move '1' to $MMLZero
  move '1' to $Year4
  do Format-DateTime($AsOfToday, $910Date, {DEFYMD},'','')

  move $910Date to $AsOfYear xxxx   !extract the current year
  move $AsOfYear  to #AsOfYear
  move #AsOfYear  to #saveAsOfYear
  subtract 1    from #AsOfYear

  let $TAXFORM_ID = '40'
  let $TAXFORM_ID = rtrim($TAXFORM_ID, ' ')

  do Get-Tax-Reporting-Run-Controls
  do stream-num

  if RTRIM(&TX.GPUS_PREPRTFORM,' ') = ''
    display '***************************************************************'
    display 'Form ID not specified on Print Year End Forms Page  '
    display 'Program stopped'
    display '***************************************************************'
    stop
  end-if

  let $Form_ID = RTRIM(&TX.GPUS_PREPRTFORM,' ')
  if $Form_ID <> '70'     !W-2PRL'
      display '*********************************************************'
      display '    W-2PRL not specified on Print Year End Forms Page    '
      display '    Program stopped                   '
      display '*********************************************************'
    stop
  end-if

  move &TX.CALENDAR_YEAR to $CalYear 9999

  let $Yr = SUBSTR($CalYear,4,1)

  let $AsOfDate = $CalYear || '1231'
  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')


  if &TX.CALENDAR_YEAR <> #AsOfYear and $Prcs_Process_Instance = ''
    display ''
    display 'Current Year is not one greater than Tax Reporting Year.'
    display 'Current Year is    ' noline
    display  #saveAsOfYear  9999
    display 'Tax Reporting Year ' noline
    display &TX.CALENDAR_YEAR
    input $Answer maxlen=1 'Do you want to continue? (Y/N)'
    uppercase $Answer
    if $Answer <> 'Y'
      stop
    end-if
  end-if

  do Load-W2-PRT

  move  0 to #Form#
  move &TX.GPUS_YE_EE_PERPAGE to #EmployeesPerPage

  if $Layout_Style = '30'          !4CORNER
    COLUMNS {WCOLUMN1} {WCOLUMN2}
    move 4 to #FormsPerPage
  end-if

  if $Layout_Style = '10'          !2VERTICAL'
    COLUMNS {WCOLUMN1}
    move 2 to #FormsPerPage
  end-if

  if $Layout_Style = '20'          !4VERTICAL'
    COLUMNS {WCOLUMN1}
    move 4 to #FormsPerPage
  end-if

  if #EmployeesPerPage  > #FormsPerPage
    display '*********************************************************'
    display 'Employees Per Page specifed on Print Year End            '
    display 'Forms Page is greater than the number of forms per page  '
    display 'for the Form ID selected.                                '
    display '*********************************************************'
    stop
  end-if

Begin-Select
TEMP_SSN_MASK
FROM PS_INSTALLATION
End-Select

End-Procedure


Begin-Procedure Report-File-Create
  move 'N' to $EmployeeFound

Begin-Select
Y.GPUS_CNTRL_NBR
Y.GPUS_E_CONFIRM_NBR

  move &Y.GPUS_E_CONFIRM_NBR to $Confirm_Number
  move &Y.GPUS_CNTRL_NBR to $Control_Num_PR
  let #Control_Num = to_number($Control_Num_PR) - 1

FROM PS_GPUS_YE_MMREFPA Y
End-Select

Begin-Select
A.GPUS_YE_RPT_CO
A.DESCR
A.GPUS_TAX_EIN
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.GPUS_BUS_TERM_DT

  move &A.GPUS_TAX_EIN     to $A.GPUS_TAX_EIN 099999999
  move &A.Descr           to $A.Descr
  move &A.Address1        to $A.Address1
  move &A.Address2        to $A.Address2
  move &A.Address3        to $A.Address3
  move &A.Country         to $A.Country
  let  $A.City            =  RTRIM(&A.City,' ')
  let $A.State = rtrim(&A.State, ' ')
  move &A.Postal          to $A.Zip
  move &A.GPUS_YE_RPT_CO to $A.W2_Reporting_Co
  move &TX.TELEPHONE_NBR to $TELEPHONE_NBR

  if isnull(&A.GPUS_BUS_TERM_DT)
     let $A.ClosingDate = ' '
  else
     do Format-DateTime(&A.GPUS_BUS_TERM_DT, $A.ClosingDate, {DEFMDY},'','')
     let $A.ClosingDate = Substr($A.ClosingDate, 4, 2) || '    ' || Substr($A.ClosingDate, 1, 2) || '    ' || Substr($A.ClosingDate, 9, 2)
  end-if

  UPPERCASE $A.Descr
  UPPERCASE $A.Address1
  UPPERCASE $A.Address2
  UPPERCASE $A.Address3
  UPPERCASE $A.Country
  UPPERCASE $A.City

  let $A.GPUS_TAX_EIN = substr($A.GPUS_TAX_EIN,1,#YE_ER_ID_Box_Size)
  let $A.Descr = substr($A.Descr,1,#YE_ER_Name_Box_Size)
  let $A.Address1 = substr($A.Address1,1,#YE_ER_Address1_Box_Size)
  let $A.Address2 = substr($A.Address2,1,#YE_ER_Address2_Box_Size)
  let $A.Address3 = substr($A.Address3,1,#YE_ER_Address2_Box_Size)

  move 0 to #I_Count

  evaluate $SortCode1
    when = '10'
    when = '50'
    when = '60'
           do Read-Employee-Data
           break
    when = '20'
    when = '30'
    when = '40'
        do W2-Sort
      break
  end-evaluate


FROM  PS_GPUS_YE_CO_TBL  A
WHERE A.EFFDT = ( SELECT MAX(B.EFFDT) FROM PS_GPUS_YE_CO_TBL B
                  WHERE B.GPUS_YE_RPT_CO = A.GPUS_YE_RPT_CO AND B.EFFDT <= $AsOfDate)
[$A.SelectedW2Co]
ORDER BY A.GPUS_YE_RPT_CO
End-Select

End-Procedure

Begin-Procedure Read-Employee-Data

Begin-Select
E.GPUS_TAX_EIN
E.GPUS_YE_RPT_CO
E.EMPLID           () on-break level=1 print=never before=Before-EmplID
E.GPUS_TAXFORM_ID
E.GPUS_SEQ_NBR
!E.GPUS_CONTROL_NBR
E.GPUS_YE_STATE
E.GPUS_SWT_EIN
E.SSN
E.GPUS_YE_FNAME
E.GPUS_YE_MNAME
E.GPUS_YE_LNAME
E.GPUS_YE_SUFFIX
E.ADDRESS1
E.ADDRESS2
E.ADDRESS3
E.CITY
E.STATE
E.POSTAL
E.COUNTRY
E.GPUS_SPOUSE_SSN
E.GPUS_MARITAL_STAT
E.GPUS_YE_STATUS
P.NAME
F.BIRTHDATE

  !If RTRIM(&E.GPUS_CONTROL_NBR,' ') <> ''
  !    move &E.GPUS_CONTROL_NBR to $Control_Num_End
  !Else
  !    move $Control_Num_PR to $Control_Num_End
  !End-If
  add 1 to #Control_Num
  let $Control_Num_End = to_char(#Control_Num)
  
  add 1 to #EE_Count
  move &E.GPUS_TAXFORM_ID      to $E.TaxForm_ID
  move &E.GPUS_SEQ_NBR to #E.Sequence_Number

  if RTRIM(&E.GPUS_SWT_EIN,' ') <> ''
    move &E.GPUS_SWT_EIN to $E.Employer_ID_SWT
    let $E.Employer_ID_SWT = substr($E.Employer_ID_SWT,1,#YE_State_ID_Box_Size)
  end-if

  if isnull(&F.BIRTHDATE)
     let $EE_Birthdate = ' '
  else
     do Format-DateTime(&F.BIRTHDATE, $EE_Birthdate, {DEFMDY},'','')
     let $EE_Birthdate = Substr($EE_Birthdate, 4, 2) || '    ' || Substr($EE_Birthdate, 1, 2) || '    ' || Substr($EE_Birthdate, 9, 2)
  end-if

 do Process-Main

 move 'Y' to $EmployeeFound

FROM PS_GPUS_YE_EE5_VW E,
PS_PERSON_NAME P,
PS_PERSON F
WHERE GPUS_TAX_EIN   =   &A.GPUS_TAX_EIN
AND E.GPUS_CAL_YEAR    =   &TX.CALENDAR_YEAR
AND E.GPUS_TAXFORM_ID  =   '40'
AND E.GPUS_YE_STATUS   <>  '20'
AND P.EMPLID           =   E.EMPLID
AND F.EMPLID           =   E.EMPLID
[$E.SelectedEEs]       !NULL string if SELECT EEs option not used
[$fromtoE]             !NULL string if STREAM NUMBER option not used
[$Sort2]               !Sorting

End-Select

    move 0 to #EE_Count
End-Procedure

Begin-Procedure Before-EmplID
  display 'processing ' noline
  display &E.GPUS_TAX_EIN  noline
  display ' '  noline
  display &E.STATE     noline
  display ' '  noline
  display &P.NAME     noline
  display ' '  noline
  display &E.EMPLID

  move &E.EMPLID   to $E.EmplID

  move &E.SSN to $S123 xxx
  if $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, ' ') = ''
    move 'Applied For' to $E.SSN
  else
    ! Applies a mask on the SSN if the option it's active
    if $YE_SSN_Masking = 'Y' 
      LET $E.SSN = 'XXX-XX-' || Substr(&E.SSN,6,4)
    else
      move &E.SSN to $E.SSN xxx-xx-xxxx
    end-if
  end-if


  move &E.GPUS_MARITAL_STAT to $E.Mar_Status

  move &E.GPUS_SPOUSE_SSN to $S123 xxx
     if $S123 = &Temp_SSN_Mask or RTRIM(&E.SSN, '0') = ''
       move '           ' to $E.Spouse_SSN
     else
       move &E.GPUS_SPOUSE_SSN to $E.Spouse_SSN xxx-xx-xxxx
     end-if

  move &E.GPUS_YE_FNAME to $E.Name
  move &E.GPUS_YE_FNAME to $FirstName
  move &E.GPUS_YE_MNAME to $E.MiddleName

  move &E.GPUS_YE_LNAME to $E.Lname
  move &E.GPUS_YE_LNAME to $LastName
  move &E.GPUS_YE_SUFFIX to $E.Suffix
  let $E.Name = rtrim($E.Name, ' ')  || ' '
  let $E.MiddleName = rtrim($E.MiddleName, ' ') || ' '
  let $E.Lname = rtrim($E.Lname, ' ')  || ' '
  let $E.Suffix =rtrim($E.Suffix, ' ')  || ' '
  if $E.MiddleName <> ' '
    let $E.YE_Name = $E.Name || $E.MiddleName || $E.Lname || $E.Suffix
  else
    let $E.YE_Name = $E.Name || $E.Lname || $E.Suffix
  end-if

  move $E.YE_Name to $YE_Name
  move $YE_Name to $E.YE_Name

  let $LastName = $E.Lname || $E.Suffix
  move &E.Address1        to $E.Address1
  move &E.Address2        to $E.Address2
  move &E.Address3        to $E.Address3
  move &E.Country         to $E.Country
  let  $E.City            =  RTRIM(&E.City,' ')
  let $E.State = rtrim(&E.State, ' ')
  move &E.Postal          to $E.Zip

  uppercase $E.Address1
  uppercase $E.Address2
  uppercase $E.Address3
  uppercase $E.Country
  uppercase $E.City

  let $E.Control_Number = substr($E.Control_Number,1,#YE_Control_Nbr_Box_Size)
  let $E.SSN = substr($E.SSN,1,#YE_EE_SSN_Box_Size)
  let $E.YE_Name = substr($E.YE_Name,1,#YE_EE_FullName_Box_Size)
  let $E.Address1 = substr($E.Address1,1,#YE_EE_Address1_Box_Size)
  let $E.Address2 = substr($E.Address2,1,#YE_EE_Address2_Box_Size)
  let $E.Address3 = substr($E.Address3,1,#YE_EE_Address2_Box_Size)

  let $E.YE_FName = substr($E.YE_Fname,1,#YE_EE_FName_Box_Size)
  let $E.YE_LName = substr($E.YE_LName,1,#YE_EE_LName_Box_Size)

  if #I_Count = 0
    move 0 to #Form#
  end-if

  move 0 to #FedWages
End-Procedure


Begin-Procedure Process-Main
  do Load-Amounts
  do Print-W2

  #ifdef TAXTEST
     if #I_Count = 15
        do Print-Intermediate-Total
     end-if
  #endif
  #ifndef TAXTEST
    if #I_Count = 41
      do Print-Intermediate-Total
    end-if
  #endif

End-Procedure

Begin-Procedure Print-W2
  move 1 to #j
  while #j <= #FormsPerPage/#EmployeesPerPage
    do Next-Form
    do Print-ER-Data
    do Print-EE-Data
    do Print-Fed-State-Amounts
    add 1 to #j
  end-while

  !move 0 to #Cost_Pension_Annuity
  move 0 to #YE_Cost_ER_Health
  move 0 to #YE_Charities
  move 0 to #Wages
  move 0 to #Commissions
  move 0 to #Allowance
  move 0 to #Tips
  move 0 to #Total_Comm_Allow_Tips
  move 0 to #Reimbursed_Expense
  move 0 to #Tax_Withheld
  move 0 to #Retire_Fund
  move 0 to #CODA_Plans
  move 0 to #Sal_324_2004
  move 0 to #OT_Police
  move 0 to #Medic_Stipends
  move 0 to #Researcher_Scientist
  move 0 to #Sal_Young_Empl
  move 0 to #Vac_Sick_Publ
  move 0 to #YE_Disaster_Pmts
  move 0 to #YE_Voluntary_Transition
  move 0 to #YE_Dismisal_Comp
  move 0 to #Exempt_Salaries
  move 0 to #Exempt_Salaries2
  move 0 to #Exempt_Salaries3
  move 0 to #YE_Save_Duplicate
  move 0 to #SS_Wages
  move 0 to #SS_Tax
  move 0 to #Med_Wages
  move 0 to #Med_Tax
  move 0 to #SS_Tips
  move 0 to #SS_Tax_Tips
  move 0 to #Med_Tax_Tips
  move 0 to #YE_Wages_Tips_HIRE_Act
  
  move 0 to #ExemptBoxes
  move '' to $ExAmtBoxes

End-Procedure

Begin-Procedure Print-ER-Data

if #H > #Align_Count
             Let $Name       = $A.Descr
             Let $address1   = $A.Address1
             Let $address2   = $A.Address2
             Let $address3   = $A.Address3
             Let $City       = $A.City
             Let $State      = $A.State
             Let $Postal     = $A.Zip
             Let $Country    = $A.Country

  do adformat
  do Compress-Address

        Let $COname         = $ADDLINE1
        Let $COADD1         = $ADDLINE2
        Let $COADD2         = $ADDLINE3
        Let $CSP            = $ADDLINE31

        if RTRIM($COADD2, ' ') = 'USA'
               Let $COADD2 = ''
        end-if
        if RTRIM($CSP, ' ') = 'USA'
               Let $CSP = ''
        end-if

       IF (instr ($COADD2,$A.City,0) > 0 AND LENGTH($COADD2) > #YE_EE_Country_Box_Size)
        OR (instr ($CSP,$A.City,0) > 0 AND LENGTH($CSP) > #YE_EE_Country_Box_Size)

           IF LENGTH($COADD2) > #YE_EE_Country_Box_Size
             let #newlength = length($A.City) + #YE_State_City_Zip_Box_Size - length($COADD2)
             let $A.City = substr($A.City,1,#newlength)
           ELSE
             let #newlength = length($A.City) + #YE_EE_Country_Box_Size - length($CSP)
             let $A.City = substr($A.City,1,#newlength)
           END-IF

             Let $Name       = $A.Descr
             Let $address1   = $A.Address1
             Let $address2   = $A.Address2
             Let $address3   = $A.Address3
             Let $City       = $A.City
             Let $State      = $A.State
             Let $Postal     = $A.Zip
             Let $Country    = $A.Country

          do adformat
          do Compress-Address

             Let $COname         = $ADDLINE1
             Let $COADD1         = $ADDLINE2
             Let $COADD2         = $ADDLINE3
             Let $CSP            = $ADDLINE31

              if RTRIM($COADD2, ' ') = 'USA'
               Let $COADD2 = ''
              end-if
              if RTRIM($CSP, ' ') = 'USA'
               Let $CSP = ''
              end-if

      END-IF
       let #gok1 = instr ($CSP,$A.City,0)
        let #gok = instr ($COADD2,$A.City,0)
        let #gok2 = LENGTH($COADD2)

        LET $ADDLINE1       = ''
  do Print-Value($A.GPUS_TAX_EIN,#L_04,#C_04,'Box 04')     
  do Print-Value($COname,#L_02A,#C_02A,'Box 2A')
  do Print-Value($COADD1,#L_02B,#C_02B,'Box 2B')

  if RTRIM($COADD2, ' ') <> ''
      do Print-Value($COADD2,#L_02C,#C_02C,'Box 2C')
      move 'N' to $LineShift
  else
      move 'Y' to $LineShift
  end-if
  if $LineShift = 'Y'
      let #PrintLine = #L_02C
  else
      let #PrintLine = #L_02D
  end-if
    do Print-Value($CSP,#PrintLine,#C_02D,'Box 2D')
    if RTRIM($Telephone_Nbr, ' ') <> ''
       do Print-Value($Telephone_Nbr,#L_02E,#C_02E,'Box 2E')
    end-if
    if RTRIM($A.ClosingDate, ' ') <> ''
       do Print-Value($A.ClosingDate,#L_02F,#C_02F,'Box 2F')
    end-if


  if RTRIM(&TX.GPUS_PREPRTFORM, ' ') = '70' ! W-2PRL
     !do Print-Value($Control_Num_End,#L_02G,#C_02G,'Box 2G')
     do Print-Value($Confirm_Number,#L_02G,#C_02G,'Box 2G')
     do Print-Value($Control_Num_End,#L_02H,#C_02H,'Box 2H')
  else
     let $Space = '                           '
     do Print-Value($Space,#L_02G,#C_02G,'Box 2G')
  end-if


 else
       add 1 to #H
       do Print-Value($A.GPUS_TAX_EIN,#L_04,#C_04,'Box 04')
       do Print-Value($A.Descr,#L_02A,#C_02A,'Box 2A')
       do Print-Value($A.Address1,#L_02B,#C_02B,'Box 2B')
   if RTRIM($A.Address2, ' ') <> ''
       do Print-Value($A.Address2,#L_02C,#C_02C,'Box 2C')
       move 'N' to $LineShift
   else
       move 'Y' to $LineShift
   end-if
   if #Align_Count = 0
    if $A.Country = 'USA'
      move $A.Zip            to $A.ZipExtsn ~~~~~~xxxx
      if instr($A.Zip,'-',6) = 0
      and $A.ZipExtsn <> '    '
        let $A.Zip = substr($A.Zip,1,5) || '-' || substr($A.Zip,6,4)
      end-if
      let $C4 = $A.City || ' ' || $A.State || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' || $A.Zip
      end-if
    else
      let $C4 = $A.City || ' ' || $A.State || ' ' ||
              $A.Country || ' ' || $A.Zip
      if length($C4) > #YE_State_City_Zip_Box_Size
          let #newlen = length($A.City) + #YE_State_City_Zip_Box_Size - length($C4)
          let $C4 = substr($A.City,1,#newlen) || ' ' || $A.State || ' ' ||
                  $A.Country || ' ' || $A.Zip
      end-if
    end-if
  end-if
  if $LineShift = 'Y'
    let #PrintLine = #L_02C
  else
    let #PrintLine = #L_02D
  end-if
  do Print-Value($C4,#PrintLine,#C_02D,'Box 2D')

 if RTRIM($Telephone_Nbr, ' ') <> ''
       do Print-Value($Telephone_Nbr,#L_02E,#C_02E,'Box 2E')
    end-if
    if RTRIM($A.ClosingDate, ' ') <> ''
       do Print-Value($A.ClosingDate,#L_02F,#C_02F,'Box 2F')
    end-if

  if RTRIM(&TX.GPUS_PREPRTFORM, ' ') = '70'! W-2PRL
       do Print-Value($Confirm_Number,#L_02G,#C_02G,'Box 2G')
       do Print-Value($Control_Num_End,#L_02H,#C_02H,'Box 2H')
  else
     let $Space = '                           '
     do Print-Value($Space,#L_02G,#C_02G,'Box 2G')
  end-if
 end-if

End-Procedure

begin-procedure Print-EE-Data
  if (#G > #Align_Count) OR #Align_Count = 0 
      add 1 to #T_Count


      do Print-Value($E.SSN,#L_03,#C_03,'Box 03')
      do Print-Value($FirstName,#L_01A,#C_01A,'Box 1A')
      do Print-Value($LastName,#L_01B,#C_01B,'Box 1B')

                   Let $Name       = ''
                   Let $address1   = $E.Address1
                   Let $address2   = $E.Address2
                   Let $address3   = $E.Address3
                   Let $City       = $E.City
                   Let $State      = $E.State
                   Let $Postal     = $E.Zip
                   Let $Country    = $E.Country
        
        do adformat
        do Compress-Address

                Let $EPADD1             = $ADDLINE1
                Let $EPADD2             = $ADDLINE2
                Let $EPCSP              = $ADDLINE3

            if RTRIM($EPADD2, ' ') = 'USA'
                   Let $COADD2 = ''
            end-if
            if RTRIM($EPCSP, ' ') = 'USA'
                   Let $EPCSP = ''
            end-if

      IF (instr ($EPADD2,$E.City,0) > 0 AND LENGTH($EPADD2) > #YE_EE_Country_Box_Size)
          OR (instr ($EPCSP,$E.City,0) > 0 AND LENGTH($EPCSP) > #YE_EE_Country_Box_Size)

           IF LENGTH($EPADD2) > #YE_EE_Country_Box_Size
             let #newlength = length($E.City) + #YE_EE_Country_Box_Size - length($EPADD2)
             let $E.City = substr($E.City,1,#newlength)
           ELSE
             let #newlength = length($E.City) + #YE_EE_Country_Box_Size - length($EPCSP)
             let $E.City = substr($E.City,1,#newlength)
           END-IF

                 Let $Name       = ''
                 Let $address1   = $E.Address1
                 Let $address2   = $E.Address2
                 Let $address3   = $E.Address3
                 Let $City       = $E.City
                 Let $State      = $E.State
                 Let $Postal     = $E.Zip
                 Let $Country    = $E.Country

          do adformat
          do Compress-Address

              Let $EPADD1             = $ADDLINE1
              Let $EPADD2             = $ADDLINE2
              Let $EPCSP              = $ADDLINE3

          if RTRIM($EPADD2, ' ') = 'USA'
                 Let $COADD2 = ''
          end-if
          if RTRIM($EPCSP, ' ') = 'USA'
                 Let $EPCSP = ''
          end-if

      END-IF

        let #gok1H = instr ($EPCSP,$E.City,0)
        let #gokH = instr ($EPADD2,$E.City,0)
        let #gok2H = LENGTH($EPADD2)

        do Print-Value($EPADD1,#L_01C,#C_01C,'Box 1C')
        if RTRIM($EPADD2, ' ') <> ''
           do Print-Value($EPADD2,#L_01D,#C_01D,'Box 1D')
           move 'N' to $LineShift
        else
           move 'Y' to $LineShift
        end-if
        if $LineShift = 'Y'
           let #PrintLine = #L_01D
         else
           let #PrintLine = #L_01E
        end-if
        do Print-Value($EPCSP,#PrintLine,#C_01E,'Box 1E')
        do Print-Value($EE_Birthdate,#L_01F,#C_01F,'Box 1F')

  ELSE

      add 1 to #T_Count
      add 1 to #G



      do Print-Value($E.SSN,#L_03,#C_03,'Box 03')
      do Print-Value($FirstName,#L_01A,#C_01A,'Box 1A')
      do Print-Value($LastName,#L_01B,#C_01B,'Box 1B')
      do Print-Value($E.Address1,#L_01C,#C_01C,'Box 1C')
      if RTRIM($E.Address2, ' ') <> ''
         do Print-Value($E.Address2,#L_01D,#C_01D,'Box 1D')
         move 'N' to $LineShift
      else
         move 'Y' to $LineShift
      end-if

      if #Align_Count = 0
         do Get-EE-Address-Line3
      end-if

       if $LineShift = 'Y'
          let #PrintLine = #L_01D
       else
          let #PrintLine = #L_01E
       end-if

       do Print-Value($01E,#PrintLine,#C_01E,'Box 1E')
       do Print-Value($EE_Birthdate,#L_01F,#C_01F,'Box 1F')

  END-IF

End-Procedure

begin-procedure Get-EE-Address-Line3
    if $E.Country = 'USA'
      move $E.Zip            to $E.ZipExtsn ~~~~~~xxxx
      if instr($E.Zip,'-',6) = 0
      and $E.ZipExtsn <> '    '
        let $E.Zip = substr($E.Zip,1,5) || '-' || substr($E.Zip,6,4)
      end-if
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' || $E.Zip
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' || $E.Zip
      end-if
    else
      do Get-Country-Code
      let $Country = SUBSTR(&CT.Descr,1,15)
      let $Country = rtrim($Country, ' ')
      uppercase $Country
      let $E.Zip = rtrim($E.Zip, ' ')
      let $F3 = $E.City || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      if length($F3) > #YE_EE_Country_Box_Size
          let #newlen = length($E.City) + #YE_EE_Country_Box_Size - length($F3)
          let $F3 = substr($E.City,1,#newlen) || ' ' || $E.State || ' ' ||
                $E.Zip  || ' '  || $Country
      end-if
    end-if
end-procedure

begin-procedure Get-Country-Code
begin-SELECT
CT.DESCR
FROM  PS_COUNTRY_TBL CT
WHERE CT.COUNTRY = $E.Country
end-SELECT
end-procedure

Begin-Procedure Load-Amounts

Begin-Select
D.GPUS_TAXFORM_BOX
#ifdef DB2ALL
DECIMAL(SUM(D.GPUS_YE_AMOUNT),15,3) &D.GPUS_YE_AMOUNT
#else
SUM(D.GPUS_YE_AMOUNT) &D.GPUS_YE_AMOUNT
#endif
  move &D.GPUS_YE_AMOUNT to #Amount
   let $D.Box = RTRIM(&D.GPUS_TAXFORM_BOX,' ')
   evaluate $D.Box
    !when = $YE_Cost_Pension_Annuity             !06 Pension/annuity
      !add  #Amount to #Cost_Pension_Annuity
      !break
    when = $YE_Cost_ER_Health                   ! 05 Cost of Employer sponsored
      add  #Amount to #YE_Cost_ER_Health        ! Health Coverage 
      break
    when = $YE_Charities                        !06 Charitable Contributions 
      add  #Amount to #YE_Charities
      break
    when = $YE_Wages                            !07 PR Wages
      add  #Amount to #Wages
      add  #Amount to #Total_Comm_Allow_Tips
      break
    when = $YE_Commissions                      !08 Commissions
      add  #Amount to #Commissions
      add  #Amount to #Total_Comm_Allow_Tips
      break
    when = $YE_Allowance                        !09 Allowances
      add  #Amount to #Allowance
      add  #Amount to #Total_Comm_Allow_Tips
      break
    when = $YE_Tips                             !10 Tips
      add  #Amount to #Tips
      add  #Amount to #Total_Comm_Allow_Tips
      break
    when = $YE_Reimbursed_Expense               !12 Reimbursed expenses
      add  #Amount to #Reimbursed_Expense
      break
    when = $YE_Tax_Withheld                     !13 PR tax withheld
      add  #Amount to #Tax_Withheld
      break
    when = $YE_Retire_Fund                      !14 Retirement fund
      add  #Amount to #Retire_Fund
      break
    when = $YE_CODA_Plans                       !15 CODA contributions
      add  #Amount to #CODA_Plans
      break
    when = $YE_Sal_324_2004                     !Exempt Salaries under Act 324 
      add  #Amount to #Sal_324_2004
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'A'
      end-if
      break
    !when = $YE_Exempt_Salaries                 !16 Exempt Salaries
      !add  #Amount to #Exempt_Salaries
      !break
    when = $YE_OT_Police                        !Police Overtime
      add  #Amount to #OT_Police
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'B'
      end-if
      break
    when = $YE_Medic_Stipends                   !Physician's Stipends during the internship period
      add  #Amount to #Medic_Stipends
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'C'
      end-if
      break
    when = $YE_Researcher_Scientist             !researcher or scientist under Section 1031.02(a)(26)
      add  #Amount to #Researcher_Scientist
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'D'
      end-if
      break
    when = $YE_Sal_Young_Empl                   !Salary not over $40,000 under Section 1031.02(a)(36) (ages 16-26)
      add  #Amount to #Sal_Young_Empl
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = 'E' || $ExAmtBoxes
      end-if
      break
    when = $YE_Vac_Sick_Publ                    !Vacation/sick leave liquidation Act 211-2014 PR Gov only
      add  #Amount to #Vac_Sick_Publ
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = 'F' || $ExAmtBoxes
      end-if
      break
    when = $YE_Disaster_Pmts                    !Disaster payments declared exempt
      add  #Amount to #YE_Disaster_Pmts
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'G'
      end-if
      break
    when = $YE_Voluntary_Transition             !Payments to public employees under the Voluntary Transition Program
      add  #Amount to #YE_Voluntary_Transition
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'H'
      end-if
      break
    when = $YE_Dismisal_Comp                    !Compensation or indemnification paid to an employee due to dismissal
      add  #Amount to #YE_Dismisal_Comp
      if #Amount > 0 
         add 1 to #ExemptBoxes
         let $ExAmtBoxes = $ExAmtBoxes || 'I'
      end-if
      break
  
    when = $YE_Save_Duplicate                   !16C Contributions to the Save and
      add  #Amount to #YE_Save_Duplicate        !Duplicate your Money Program
      break
    when = $YE_SS_Wages                         !17 Soc sec wages
      add  #Amount to #SS_Wages
      break
    when = $YE_SS_Tax                           !18 Soc sec tax withheld
      add  #Amount to #SS_Tax
      break
    when = $YE_Med_Wages                        !19 Medicare wages and tips
      add  #Amount to #Med_Wages
      break
    when = $YE_Med_Tax                          !20 Medicare tax withheld
      add  #Amount to #Med_Tax
      break
    when = $YE_SS_Tips                          !21 Soc sec tips
      add  #Amount to #SS_Tips
      break
    when = $YE_SS_Tax_Tips                      !22 Uncollected soc sec
      add  #Amount to #SS_Tax_Tips                       ! tax on tips
      break
    when = $YE_Med_Tax_Tips                     !23 Uncollected Medicare
      add  #Amount to #Med_Tax_Tips                       ! tax on tips
      break
    when = $YE_Wages_Tips_HIRE_Act              !24 Wages and Tips under
      add  #Amount to #YE_Wages_Tips_HIRE_Act   ! HIRE Act of 2010
      break
    
     when-other
         display 'UNKNOWN BOX IDENTIFIER:'
         display $D.Box
         display 'Processing Stopped'
         STOP
   end-evaluate
FROM  PS_GPUS_YE_EE1_VW D
WHERE D.GPUS_TAX_EIN = &E.GPUS_TAX_EIN
  AND D.GPUS_CAL_YEAR = &TX.CALENDAR_YEAR
  AND D.EMPLID = $E.Emplid
  AND D.GPUS_TAXFORM_ID  = '40'
  AND D.GPUS_SEQ_NBR = 1
  GROUP BY D.GPUS_TAXFORM_BOX
End-Select
End-Procedure

Begin-Procedure Print-Fed-State-Amounts

  if #T_Count > #Align_Count
    if #j = 1
      !add  #Cost_Pension_Annuity to #Cost_Pension_Annuity_I
      add  #Wages to #Wages_I
      add  #Total_Comm_Allow_Tips to #Total_Comm_Allow_Tips_I
      add  #Commissions to #Commissions_I
      add  #Allowance to #Allowance_I
      add  #Tips to #Tips_I
      add  #Reimbursed_Expense to #Reimbursed_Expense_I
      add  #Tax_Withheld to #Tax_Withheld_I
      add  #Retire_Fund to #Retire_Fund_I
      add  #CODA_Plans to #CODA_Plans_I
      !add  #Sal_324_2004 to #Sal_324_2004_I
      add  #SS_Wages to #SS_Wages_I
      add  #SS_Tax to #SS_Tax_I
      add  #Med_Wages to #Med_Wages_I
      add  #Med_Tax to #Med_Tax_I
      add  #SS_Tips to #SS_Tips_I
      add  #SS_Tax_Tips to #SS_Tax_Tips_I
      add  #Med_Tax_Tips to #Med_Tax_Tips_I
      !add  #Cost_Pension_Annuity to #Cost_Pension_Annuity_T
      add  #Wages to #Wages_T
      add  #Total_Comm_Allow_Tips to #Total_Comm_Allow_Tips_T
      add  #Commissions to #Commissions_T
      add  #Allowance to #Allowance_T
      add  #Tips to #Tips_T
      add  #Reimbursed_Expense to #Reimbursed_Expense_T
      add  #Tax_Withheld to #Tax_Withheld_T
      add  #Retire_Fund to #Retire_Fund_T
      add  #CODA_Plans to #CODA_Plans_T
      add  #Sal_324_2004 to #Sal_324_2004_T
      add  #SS_Wages to #SS_Wages_T
      add  #SS_Tax to #SS_Tax_T
      add  #Med_Wages to #Med_Wages_T
      add  #Med_Tax to #Med_Tax_T
      add  #SS_Tips to #SS_Tips_T
      add  #SS_Tax_Tips to #SS_Tax_Tips_T
      add  #Med_Tax_Tips to #Med_Tax_Tips_T
      ! 2010
      add  #YE_Wages_Tips_HIRE_Act to #YE_Wages_Tips_HIRE_Act_I
      add  #YE_Wages_Tips_HIRE_Act to #YE_Wages_Tips_HIRE_Act_T
      ! 2011
      add  #YE_Cost_ER_Health to #YE_Cost_ER_Health_I
      add  #YE_Charities to #YE_Charities_I
      add  #YE_Save_Duplicate to #YE_Save_Duplicate_I
      add  #YE_Cost_ER_Health to #YE_Cost_ER_Health_T
      add  #YE_Charities to #YE_Charities_T
      add  #YE_Save_Duplicate to #YE_Save_Duplicate_T
      !2014
      !add  #Exempt_Salaries to #Exempt_Salaries_I
      !add  #Exempt_Salaries to #Exempt_Salaries_T
      !2016 All the Exempt Salaries in one box
      let  #Exempt_Salaries_I = #Sal_324_2004 + #OT_Police + #Medic_Stipends + #Researcher_Scientist + #Sal_Young_Empl +  #Vac_Sick_Publ + #YE_Disaster_Pmts + #YE_Voluntary_Transition + #YE_Dismisal_Comp
      add  #OT_Police to #OT_Police_T
      add  #Medic_Stipends to #Medic_Stipends_T
      add  #Researcher_Scientist to #Researcher_Scientist_T
      add  #Sal_Young_Empl to #Sal_Young_Empl_T
      add  #Vac_Sick_Publ to #Vac_Sick_Publ_T
      add  #YE_Disaster_Pmts to #YE_Disaster_Pmts_T
      add  #YE_Voluntary_Transition to #YE_Voluntary_Transition_T
      add  #YE_Dismisal_Comp to #YE_Dismisal_Comp_T

    end-if
  end-if


  !do Format-Number(#Cost_Pension_Annuity, $out, $F06)              !Pension/Annuity
  !do Print-Value($out,#L_06,#C_06,'Box 06')

  do Format-Number(#YE_Cost_ER_Health, $out, $F05)  !Cost of ER Health Coverage 
  do Print-Value($out,#L_05,#C_05,'Box 05')

  do Format-Number(#YE_Charities, $out, $F06)       !Charitable Contributions 
  do Print-Value($out,#L_06,#C_06,'Box 06')

  do Format-Number(#Wages, $out, $F07)              !PR Wages
  do Print-Value($out,#L_07,#C_07,'Box 07')

  do Format-Number(#Commissions, $out, $F08)        !Commissions
  do Print-Value($out,#L_08,#C_08,'Box 08')

  do Format-Number(#Allowance, $out, $F09)          !Allowances
  do Print-Value($out,#L_09,#C_09,'Box 09')

  do Format-Number(#Tips, $out, $F10)               !Tips
  do Print-Value($out,#L_10,#C_10,'Box 10')

  do Format-Number(#Total_Comm_Allow_Tips, $out, $F11)   !Total wages/comm/
  do Print-Value($out,#L_11,#C_11,'Box 11')              ! allowances/tips

  do Format-Number(#Reimbursed_Expense, $out, $F12)      !Reimbursed exp
  do Print-Value($out,#L_12,#C_12,'Box 12')

  do Format-Number(#Tax_Withheld, $out, $F13)       !PR tax w/h
  do Print-Value($out,#L_13,#C_13,'Box 13')

  do Format-Number(#Retire_Fund, $out, $F14)        !Retirement fund
  do Print-Value($out,#L_14,#C_14,'Box 14')

  do Format-Number(#CODA_Plans, $out, $F15)         !CODA contrib
  do Print-Value($out,#L_15,#C_15,'Box 15')

  !do Format-Number(#Sal_324_2004, $out, $F16)       !Salaries 324 for 2004
  !do Print-Value($out,#L_16,#C_16,'Box 16')

  !do Format-Number(#Exempt_Salaries, $out, $F16)    !Exempt Salaries
  !do Print-Value($out,#L_16,#C_16,'Box 16')

  !if #Exempt_Salaries > 0
  !  do Print-Value('A', #L_16A,#C_16A,'Box 16A')    !Exempt Salaries Code
  !end-if
  
  !2016 Exempt Salaries Processing
  let $ExBox1 =''
  let $ExBox2 =''
  let $ExBox3 =''
  let #ExAmt1 = 0
  let #ExAmt2 = 0
  let #ExAmt3 = 0
  let #ExBoxValue = 0
  
  If #ExemptBoxes > 0
    let #LoopCount = #ExemptBoxes
    let #CountBox = 0
    let #ExBoxValue = 0
    while #LoopCount > 0
      add 1 to #CountBox
      let $ExBoxID = Substr($ExAmtBoxes, #CountBox, 1)
      Do GetExemptAmount
      Evaluate #CountBox
        when = 1
          let $ExBox1 = $ExBoxID
          let #ExAmt1 = #ExBoxValue
          break
        when = 2
          let $ExBox2 = $ExBoxID
          let #ExAmt2 = #ExBoxValue
          break
        when = 3
        when = 4
          let $ExBox3 = $ExBox3 || $ExBoxID 
          let #ExAmt3 = #ExAmt3 + #ExBoxValue
          break
        when-other
          !Do Nothing
      End-Evaluate
      let #LoopCount = #LoopCount - 1
      if #CountBox > 4
        break
      end-if
    end-while
    do Format-Number(#ExAmt1, $out, $F16)    !Exempt Salaries
    do Print-Value($out,#L_16,#C_16,'Box 16')
    do Print-Value($ExBox1, #L_16C1,#C_16C1,'Box 16C1')    !Exempt Salaries Code
    if #ExemptBoxes >= 2 and #ExAmt2 > 0
      do Format-Number(#ExAmt2, $out, $F16A)    !Exempt Salaries 2
      do Print-Value($out,#L_16A,#C_16A,'Box 16A')
      do Print-Value($ExBox2, #L_16C2,#C_16C2,'Box 16C2')    !Exempt Salaries Code 2
      if #ExemptBoxes >= 3 and #ExAmt3 > 0
        do Format-Number(#ExAmt3, $out, $F16B)    !Exempt Salaries 2
        do Print-Value($out,#L_16B,#C_16B,'Box 16B')
        do Print-Value($ExBox3, #L_16C3,#C_16C3,'Box 16C3')    !Exempt Salaries Code 2
      end-if
    end-if
  else
     ! Do Nothing
  end-if
 
  do Format-Number(#YE_Save_Duplicate, $out, $F16C)  !Save and Duplicate your money - 2011
  do Print-Value($out,#L_16C,#C_16C,'Box 16C')

  do Format-Number(#SS_Wages, $out, $F17)           !SS wages
  do Print-Value($out,#L_17,#C_17,'Box 17')

  do Format-Number(#SS_Tax, $out, $F18)             !SS taxes
  do Print-Value($out,#L_18,#C_18,'Box 18')

  do Format-Number(#Med_Wages, $out, $F19)          !Med wages
  do Print-Value($out,#L_19,#C_19,'Box 19')

  do Format-Number(#Med_Tax, $out, $F20)            !Med wages
  do Print-Value($out,#L_20,#C_20,'Box 20')

  do Format-Number(#SS_Tips, $out, $F21)            !Med wages
  do Print-Value($out,#L_21,#C_21,'Box 21')

  do Format-Number(#SS_Tax_Tips, $out, $F22)        !Med wages
  do Print-Value($out,#L_22,#C_22,'Box 22')

  do Format-Number(#Med_Tax_Tips, $out, $F23)       !Med wages
  do Print-Value($out,#L_23,#C_23,'Box 23')

  if $CalYear = '2010'
    do Format-Number(#YE_Wages_Tips_HIRE_Act, $out, $F24)  !Wages Tips for HIRE Act 2010
    do Print-Value($out,#L_24,#C_24,'Box 24')
  end-if

End-Procedure

Begin-Procedure Print-Intermediate-Total
  add 1 to #Intermediate_Total_Cnt
  move 1 to #j
  add 1 to #Control_Num_End
  while #j <= #FormsPerPage/#EmployeesPerPage  !loop for individual ee's
    do Next-Form
    add 1 to #T_Count
    do Print-ER-Data

    !do Format-Number(#Cost_Pension_Annuity_I, $out, $F06)          !Pension
    !do Print-Value($out,#L_06,#C_06,'Box 06')

    do Format-Number(#YE_Cost_ER_Health_I, $out, $F05)
    do Print-Value($out,#L_05,#C_05,'Box 05')

    do Format-Number(#YE_Charities_I, $out, $F06)
    do Print-Value($out,#L_06,#C_06,'Box 06')
    
    do Format-Number(#Wages_I, $out, $F07)          !PR wages
    do Print-Value($out,#L_07,#C_07,'Box 07')

    do Format-Number(#Commissions_I, $out, $F08)          !Commissions
    do Print-Value($out,#L_08,#C_08,'Box 08')

    do Format-Number(#Allowance_I, $out, $F09)          !Allowances
    do Print-Value($out,#L_09,#C_09,'Box 09')

    do Format-Number(#Tips_I, $out, $F10)          !Tips
    do Print-Value($out,#L_10,#C_10,'Box 10')

    do Format-Number(#Total_Comm_Allow_Tips_I, $out, $F11)          !Total wages/comm/
    do Print-Value($out,#L_11,#C_11,'Box 11')    !allow/tips

    do Format-Number(#Reimbursed_Expense_I, $out, $F12)          !Reimbursed exp
    do Print-Value($out,#L_12,#C_12,'Box 12')

    do Format-Number(#Tax_Withheld_I, $out, $F13)          !PR tax w/h
    do Print-Value($out,#L_13,#C_13,'Box 13')

    do Format-Number(#Retire_Fund_I, $out, $F14)          !Retirement
    do Print-Value($out,#L_14,#C_14,'Box 14')

    do Format-Number(#CODA_Plans_I, $out, $F15)          !CODA
    do Print-Value($out,#L_15,#C_15,'Box 15')

    !do Format-Number(#Sal_324_2004_I, $out, $F16)          !Salaries under 324
    !do Print-Value($out,#L_16,#C_16,'Box 16')

    do Format-Number(#Exempt_Salaries_I, $out, $F16)
    do Print-Value($out,#L_16,#C_16,'Box 16')

    do Format-Number(#YE_Save_Duplicate_I, $out, $F16B)
    do Print-Value($out,#L_16B,#C_16B,'Box 16B')

    do Format-Number(#SS_Wages_I, $out, $F17)
    do Print-Value($out,#L_17,#C_17,'Box 17')

    do Format-Number(#SS_Tax_I, $out, $F18)
    do Print-Value($out,#L_18,#C_18,'Box 18')

    do Format-Number(#Med_Wages_I, $out, $F19)
    do Print-Value($out,#L_19,#C_19,'Box 19')

    do Format-Number(#Med_Tax_I, $out, $F20)
    do Print-Value($out,#L_20,#C_20,'Box 20')

    do Format-Number(#SS_Tips_I, $out, $F21)
    do Print-Value($out,#L_21,#C_21,'Box 21')

    do Format-Number(#SS_Tax_Tips_I, $out, $F22)
    do Print-Value($out,#L_22,#C_22,'Box 22')

    do Format-Number(#Med_Tax_Tips_I, $out, $F23)
    do Print-Value($out,#L_23,#C_23,'Box 23')

    If $CalYear = '2010'
      do Format-Number(#YE_Wages_Tips_HIRE_Act_I, $out, $F24)
      do Print-Value($out,#L_24,#C_24,'Box 24')
    End-If
    
    !do Format-Number(#SubTotals, $out, $F17)
    !do Print-Value('X',#L_17,#C_17,'Box 17')  !Subtotal checkbox

    add 1 to #j

  end-while

  !move 0 to #Cost_Pension_Annuity_I
  move 0 to #YE_Cost_ER_Health_I
  move 0 to #YE_Charities_I
  move 0 to #Wages_I
  move 0 to #Commissions_I
  move 0 to #Allowance_I
  move 0 to #Tips_I
  move 0 to #Total_Comm_Allow_Tips_I
  move 0 to #Reimbursed_Expense_I
  move 0 to #Tax_Withheld_I
  move 0 to #Retire_Fund_I
  move 0 to #CODA_Plans_I
  !move 0 to #Sal_324_2004_I
  move 0 to #Exempt_Salaries_I
  move 0 to #YE_Save_Duplicate_I
  move 0 to #SS_Wages_I
  move 0 to #SS_Tax_I
  move 0 to #Med_Wages_I
  move 0 to #Med_Tax_I
  move 0 to #SS_Tips_I
  move 0 to #SS_Tax_Tips_I
  move 0 to #Med_Tax_Tips_I
  move 0 to #YE_Wages_Tips_HIRE_Act_I
  move 0 to #I_Count
End-Procedure

Begin-Procedure Print-Grand-Totals

!  if #Cost_Pension_Annuity_T > 0
!    do Format-Number(#Cost_Pension_Annuity_T, $out,'999,999,999,999.99')          !Pension/annuity
!    display 'Pension/annuity             ' noline
!    display $out
!  end-if

  if #YE_Cost_ER_Health_T > 0
    do Format-Number(#YE_Cost_ER_Health_T, $out,'999,999,999,999.99')   !Cost of Employer sponsored
    display 'Employer Sponsored Health Coverage                          ' noline               ! Health coverage - 2011
    display $out
  end-if

  if #YE_Charities_T > 0
    do Format-Number(#YE_Charities_T, $out,'999,999,999,999.99')  !Charitable Contributions - 2011
    display 'Charitable Contributions                                    ' noline
    display $out
  end-if

  if #Wages_T > 0
    do Format-Number(#Wages_T, $out,'999,999,999,999.99')          !PR Wages
    display 'PR Wages                                                    ' noline
    display $out
  end-if

  if #Commissions_T > 0
    do Format-Number(#Commissions_T, $out,'999,999,999,999.99')          !Commissions
    display 'Commissions                                                 ' noline
    display $out
  end-if

  if #Allowance_T > 0
    do Format-Number(#Allowance_T, $out,'999,999,999,999.99')          !Allowances
    display 'Allowances                                                  ' noline
    display $out
  end-if

  if #Tips_T > 0
    do Format-Number(#Tips_T, $out,'999,999,999,999.99')          !Tips
    display 'Tips                                                        ' noline
    display $out
  end-if

  if #Total_Comm_Allow_Tips_T > 0
    do Format-Number(#Total_Comm_Allow_Tips_T, $out,'999,999,999,999.99')     !Total wages/comm/
    display 'Total Wages/Comm/Allowances/Tips                            ' noline         ! allowances/tips
    display $out
  end-if

  if #Reimbursed_Expense_T > 0
    do Format-Number(#Reimbursed_Expense_T, $out,'999,999,999,999.99')          !Reimbursed expenses
    display 'Reimbursed expenses                                         ' noline
    display $out
  end-if

  if #Tax_Withheld_T > 0
    do Format-Number(#Tax_Withheld_T, $out,'999,999,999,999.99')          !PR tax withheld
    display 'PR tax withheld                                             ' noline
    display $out
  end-if

  if #Retire_Fund_T > 0
    do Format-Number(#Retire_Fund_T, $out,'999,999,999,999.99')          !Retirement fund
    display 'Retirement fund                                             ' noline
    display $out
  end-if

  if #CODA_Plans_T > 0
    do Format-Number(#CODA_Plans_T, $out,'999,999,999,999.99')          !CODA contributions
    display 'CODA contributions                                          ' noline
    display $out
  end-if

  if #Sal_324_2004_T > 0
    do Format-Number(#Sal_324_2004_T, $out,'999,999,999,999.99')          !Salaries under 324
    display 'Salary under Act324 for 2004                                ' noline
    display $out
  end-if

  if #OT_Police_T > 0
    do Format-Number(#OT_Police_T, $out,'999,999,999,999.99')          !Police Overtime
    display 'Overtime by Police member under Section 1031.02(a)(34)      ' noline
    display $out
  end-if

  if #Medic_Stipends_T > 0
    do Format-Number(#Medic_Stipends_T, $out,'999,999,999,999.99')          
    display 'Stipends by physicians during the internship period         ' noline
    display $out
  end-if

  if #Researcher_Scientist_T > 0
    do Format-Number(#Researcher_Scientist_T, $out,'999,999,999,999.99')          
    display 'Comp to a researcher or scientist Section 1031.02(a)(26)    ' noline
    display $out
  end-if

  if #Sal_Young_Empl_T > 0
    do Format-Number(#Sal_Young_Empl_T, $out,'999,999,999,999.99')
    display 'Salary <= $40,000 Section 1031.02(a)(36) (ages 16-26)       ' noline
    display $out
  end-if

  if #Vac_Sick_Publ_T > 0
    do Format-Number(#Vac_Sick_Publ_T, $out,'999,999,999,999.99')
    display 'Vacation and sick leave payment Act 211-2014                '  noline
    display $out
  end-if

  if #YE_Disaster_Pmts_T > 0
    do Format-Number(#YE_Disaster_Pmts_T, $out,'999,999,999,999.99')
    display 'Disaster payments declared exempt                           '  noline
    display $out
  end-if
  if #YE_Voluntary_Transition_T > 0
    do Format-Number(#YE_Voluntary_Transition_T, $out,'999,999,999,999.99')
    display 'Payments to public employees, Voluntary Transition Program  '  noline
    display $out
  end-if
  if #YE_Dismisal_Comp_T > 0
    do Format-Number(#YE_Dismisal_Comp_T, $out,'999,999,999,999.99')
    display 'Compensation paid to an employee due to dismissal           '  noline
    display $out
  end-if
 

  !if #Exempt_Salaries_T > 0
  !  do Format-Number(#Exempt_Salaries_T, $out,'999,999,999,999.99')     !Exempt Salaries
  !  display 'Exempt Salaries                    ' noline
  !  display $out
  !end-if

  if #YE_Save_Duplicate_T > 0
    do Format-Number(#YE_Save_Duplicate_T, $out,'999,999,999,999.99')   !Contributions to the Save
    display 'Contributions to the Save and Duplicate your Money Program  ' noline               !and Duplicate your money
    display $out                                                        !Program - 2011
  end-if
  
  if #SS_Wages_T > 0
    do Format-Number(#SS_Wages_T, $out,'999,999,999,999.99')          !Soc sec wages
    display 'Social Security Wages                                       ' noline
    display $out
  end-if

  if #SS_Tax_T > 0
    do Format-Number(#SS_Tax_T, $out,'999,999,999,999.99')          !Soc sec tax withheld
    display 'Social Security Tax Withheld                                ' noline
    display $out
  end-if

  if #Med_Wages_T > 0
    do Format-Number(#Med_Wages_T, $out,'999,999,999,999.99')          !Medicare wages and tips
    display 'Medicare wages and tips                                     ' noline
    display $out
  end-if

  if #Med_Tax_T > 0
    do Format-Number(#Med_Tax_T, $out,'999,999,999,999.99')          !Medicare tax withheld
    display 'Medicare tax withheld                                       ' noline
    display $out
  end-if

  if #SS_Tips_T > 0
    do Format-Number(#SS_Tips_T, $out,'999,999,999,999.99')          !Soc sec tips
    display 'Social Security Tips                                        ' noline
    display $out
  end-if

  if #SS_Tax_Tips_T > 0
    do Format-Number(#SS_Tax_Tips_T, $out,'999,999,999,999.99')          !Uncollected soc sec
    display 'Uncollected Social security tax on tips                     ' noline         ! tax on tips
    display $out
  end-if

  if #Med_Tax_Tips_T > 0
    do Format-Number(#Med_Tax_Tips_T, $out,'999,999,999,999.99')          !Uncollected Medicare
    display 'Uncollected Medicare tax on tips                            ' noline         ! tax on tips
    display $out
  end-if

  if $CalYear = '2010'
    if #YE_Wages_Tips_HIRE_Act_T > 0
      do Format-Number(#YE_Wages_Tips_HIRE_Act_T, $out,'999,999,999,999.99') !Wages and Tips under
      display 'Wages and Tips under HIRE Act                             ' noline                       ! HIRE Act of 2010
      display $out
    end-if
  end-if

  let #T_Count = #T_Count /2
  do Format-Number(#T_Count, $out,'999,999,999')
  display 'Total forms including alignment and subtotals'  noline
  display $out
End-Procedure

Begin-Procedure Next-Form
  evaluate $Layout_Style
    when = '30'                      !4CORNER'
      do Next-Form-FourCorner
      break
    when = '20'                      !4VERTICAL'
      do Next-Form-FourVertical
      break
    when = '10'                      !2VERTICAL'
      do Next-Form-TwoVertical
      break
  end-evaluate
End-Procedure

Begin-Procedure Next-Form-FourCorner
  if #Form# <> 4
    add  1 to #Form#
  else
    move 1 to #Form#
  end-if

  evaluate #Form#
    when = 1
      new-page
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-column
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
End-Procedure

Begin-Procedure Next-Form-FourVertical
  if #Form# <> 4
    add 1 to #Form#
  else
    move 1 to #form#
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
      new-page
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Top_Split,1,'Top Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 3
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 4
      next-listing
      do Print-Value(' ',#Bottom_Split,1,'Bottom Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
End-Procedure

Begin-Procedure Next-Form-TwoVertical

  if #Form# <> 2
    add 1 to #Form#
  else
    move 1 to #form# 
  end-if

  evaluate #Form#                 !use to position for next forms
    when = 1
    if #PAGE = 0
        ADD 1 TO #PAGE
    else
        new-page
    end-if
      next-column
      do Print-Value(' ',#Top_Margin,1,'Top Margin')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
      break
    when = 2
      next-listing
      do Print-Value(' ',#Center_Split,1,'Center Split')
      next-listing
      do Print-Value(' ',#Last_Print_Line,1,'Last Print Line')
  end-evaluate
End-Procedure

Begin-Procedure Load-W2-PRT
Begin-Select
F.GPUS_LAYOUT_FORMAT
F.GPUS_TOP_MARGIN
F.GPUS_TOP_SPLIT
F.GPUS_CENTER_SPLIT
F.GPUS_BOTTOM_SPLIT
F.GPUS_LAST_PRT_LINE
F.GPUS_TAXFORM_ID

  let $Layout_Style = RTRIM(&F.GPUS_LAYOUT_FORMAT,' ')
  move &F.GPUS_TOP_MARGIN     to  #Top_Margin
  move &F.GPUS_TOP_SPLIT      to  #Top_Split
  move &F.GPUS_CENTER_SPLIT   to  #Center_Split
  move &F.GPUS_BOTTOM_SPLIT   to  #Bottom_Split
  move &F.GPUS_LAST_PRT_LINE  to  #Last_Print_Line
  move &F.GPUS_TAXFORM_ID     to  $Taxform_Id

! encode '<27>E<27>(0N<27>&l6D<27>&l0E<27>&l66F' into $SetupString
! print $SetupString (1,1)
!            |    |       |       |       |
!            |    |       |       |        --> 66 text lines
!            |    |       |        --> top margin = 0 lines
!            |    |        --> 6 lines per inch
!            |     --> ISO 8859-1 symbol set
!             --> Reset

FROM  PS_GPUS_YE_PRT_FRM F
WHERE F.GPUS_PREPRTFORM = &TX.GPUS_PREPRTFORM
AND F.GPUS_TAXFORM_ID= '40'
  AND F.EFFDT   = (SELECT MAX(EFFDT) FROM PS_GPUS_YE_TXFRM WHERE
                   GPUS_TAXFORM_ID = F.GPUS_TAXFORM_ID AND  EFFDT  <= $AsOfDate)
End-Select

do assign-year-end-variables

Begin-Select
P.GPUS_TAXFORM_BOX
P.GPUS_PRINT_LINE
P.GPUS_PRINT_COLUMN
P.GPUS_PRINT_FORMAT
P.GPUS_PRINT_TEXT

  let $P.Box = RTRIM(&P.GPUS_TAXFORM_BOX,' ')
  evaluate $P.Box
    when = $YE_EE_FName                               !First name
      move &P.GPUS_PRINT_LINE   to #L_01A
      move &P.GPUS_PRINT_COLUMN    to #C_01A
      let $F1A = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_FName_Box_Size = TO_NUMBER(SUBSTR($F1A,3,INSTR($F1A,')',1)-2))
      break
    when = $YE_EE_LName                               !Surname
      move &P.GPUS_PRINT_LINE   to #L_01B
      move &P.GPUS_PRINT_COLUMN    to #C_01B
      let $F1B = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_LName_Box_Size = TO_NUMBER(SUBSTR($F1B,3,INSTR($F1B,')',1)-2))
      break
    when = $YE_EE_Address1                            !Employee address
      move &P.GPUS_PRINT_LINE   to #L_01C
      move &P.GPUS_PRINT_COLUMN    to #C_01C
      let $F1C = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_Address1_Box_Size = TO_NUMBER(SUBSTR($F1C,3,INSTR($F1C,')',1)-2))
      break
    when = $YE_EE_Address2                            !Employee address
      move &P.GPUS_PRINT_LINE   to #L_01D                  !
      move &P.GPUS_PRINT_COLUMN    to #C_01D
      let $F1D = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_Address2_Box_Size = TO_NUMBER(SUBSTR($F1D,3,INSTR($F1D,')',1)-2))
      break
    when = $YE_State_City_Zip                         !Employee address
      move &P.GPUS_PRINT_LINE   to #L_01E
      move &P.GPUS_PRINT_COLUMN    to #C_01E
      let $F1E = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_State_City_Zip = TO_NUMBER(SUBSTR($F1E,3,INSTR($F1E,')',1)-2))
      break
    when = $YE_EE_Birthdate                              !Birthdate
      move &P.GPUS_PRINT_LINE   to #L_01F
      move &P.GPUS_PRINT_COLUMN    to #C_01F
      let $F1F = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #EE_Birthdate_Box_Size = TO_NUMBER(SUBSTR($F1F,3,INSTR($F1F,')',1)-2))
      break

    when = $YE_ER_Name                                !Employer name
      move &P.GPUS_PRINT_LINE   to #L_02A
      move &P.GPUS_PRINT_COLUMN    to #C_02A
      let $F2A = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_ER_Name_Box_Size = TO_NUMBER(SUBSTR($F2A,3,INSTR($F2A,')',1)-2))
      break
    when = $YE_ER_Address1                            !Employer
      move &P.GPUS_PRINT_LINE   to #L_02B                  ! address 1
      move &P.GPUS_PRINT_COLUMN    to #C_02B
      let $F2B = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_ER_Address1_Box_Size = TO_NUMBER(SUBSTR($F2B,3,INSTR($F2B,')',1)-2))
      break
    when = $YE_ER_Address2                            !Employer
      move &P.GPUS_PRINT_LINE   to #L_02C                  ! address 2
      move &P.GPUS_PRINT_COLUMN    to #C_02C
      let $F2C = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_ER_Address2_Box_Size = TO_NUMBER(SUBSTR($F2C,3,INSTR($F2C,')',1)-2))
      break
    when = $YE_ER_State_City_Zip                      !Employer
      move &P.GPUS_PRINT_LINE   to #L_02D                  ! address 3
      move &P.GPUS_PRINT_COLUMN    to #C_02D
      let $F2D = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_State_City_Zip_Box_Size = TO_NUMBER(SUBSTR($F2D,3,INSTR($F2D,')',1)-2))
      break
    when = $YE_ER_Phone                               !Employer
      move &P.GPUS_PRINT_LINE   to #L_02E                  !phone nbr
      move &P.GPUS_PRINT_COLUMN    to #C_02E
      let $F2E = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_ER_Closing                             !Employer
      move &P.GPUS_PRINT_LINE   to #L_02F                  !Closing Date
      move &P.GPUS_PRINT_COLUMN    to #C_02F
      let $F2F = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_ER_Confirm_Number                      !e-Filing Confirmation Number
      move &P.GPUS_PRINT_LINE   to #L_02G
      move &P.GPUS_PRINT_COLUMN    to #C_02G
      let $F2G = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_ER_Control_Number                      !Control Number
      move &P.GPUS_PRINT_LINE   to #L_02H
      move &P.GPUS_PRINT_COLUMN    to #C_02H
      let $F2H = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_EE_SSN                                 !SSN
      move &P.GPUS_PRINT_LINE   to #L_03
      move &P.GPUS_PRINT_COLUMN    to #C_03
      let $F03 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_EE_SSN_Box_Size = TO_NUMBER(SUBSTR($F03,3,INSTR($F03,')',1)-2))
      break
    when = $YE_ER_ID                                  !EIN
      move &P.GPUS_PRINT_LINE to #L_04
      move &P.GPUS_PRINT_COLUMN    to #C_04
      let $F04 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      let #YE_ER_ID_Box_Size = TO_NUMBER(SUBSTR($F04,3,INSTR($F04,')',1)-2))
      break
    !when = $YE_Cost_Pension_Annuity                   !Pension
    !  move &P.GPUS_PRINT_LINE   to #L_06
    !  move &P.GPUS_PRINT_COLUMN    to #C_06
    !  let $F06 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
    !  break
    when = $YE_Cost_ER_Health
      move &P.GPUS_PRINT_LINE   to #L_05              !Cost of Employer
      move &P.GPUS_PRINT_COLUMN    to #C_05           !sponsored health coverage
      let $F05 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      Break
    when = $YE_Charities
      move &P.GPUS_PRINT_LINE   to #L_06              !Charitable
      move &P.GPUS_PRINT_COLUMN    to #C_06           !contributions
      let $F06 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      Break
    when = $YE_Wages                                  !PR wages
      move &P.GPUS_PRINT_LINE   to #L_07
      move &P.GPUS_PRINT_COLUMN    to #C_07
      let $F07 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Commissions                            !Commissions
      move &P.GPUS_PRINT_LINE   to #L_08
      move &P.GPUS_PRINT_COLUMN    to #C_08
      let $F08 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Allowance                              !Allowances
      move &P.GPUS_PRINT_LINE   to #L_09
      move &P.GPUS_PRINT_COLUMN    to #C_09
      let $F09 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Tips                                   !Tips
      move &P.GPUS_PRINT_LINE   to #L_10
      move &P.GPUS_PRINT_COLUMN    to #C_10
      let $F10 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Total8-11                              !Total wages/comm/
      move &P.GPUS_PRINT_LINE   to #L_11                   !allow/tips
      move &P.GPUS_PRINT_COLUMN    to #C_11
      let $F11 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Reimbursed_Expense                     !Reimbursed exp
      move &P.GPUS_PRINT_LINE   to #L_12
      move &P.GPUS_PRINT_COLUMN    to #C_12
      let $F12 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Tax_Withheld                           !PR taxes
      move &P.GPUS_PRINT_LINE   to #L_13
      move &P.GPUS_PRINT_COLUMN    to #C_13
      let $F13 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Retire_Fund                            !Retirement fund
      move &P.GPUS_PRINT_LINE   to #L_14
      move &P.GPUS_PRINT_COLUMN    to #C_14
      let $F14 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_CODA_Plans                             !CODA contributions
      move &P.GPUS_PRINT_LINE   to #L_15
      move &P.GPUS_PRINT_COLUMN    to #C_15
      let $F15 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   !when = $YE_Sal_324_2004                               !Salaries Under 324
   !   move &P.GPUS_PRINT_LINE   to #L_16
   !   move &P.GPUS_PRINT_COLUMN    to #C_16
   !   let $F16 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
   !   break
   when = $YE_Exempt_Salaries                          !Exempt Salaries (first box)
      move &P.GPUS_PRINT_LINE   to #L_16
      move &P.GPUS_PRINT_COLUMN    to #C_16
      let $F16 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Exempt_Salaries_Code                     !Exempt Salaries Code (first box)
      move &P.GPUS_PRINT_LINE   to #L_16C1
      move &P.GPUS_PRINT_COLUMN    to #C_16C1
      let $F16C1 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Exempt_Salaries2                          !Exempt Salaries (second box)
      move &P.GPUS_PRINT_LINE   to #L_16A
      move &P.GPUS_PRINT_COLUMN    to #C_16A
      let $F16A = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Exempt_Salaries_Code2                     !Exempt Salaries Code (second box)
      move &P.GPUS_PRINT_LINE   to #L_16C2
      move &P.GPUS_PRINT_COLUMN    to #C_16C2
      let $F16C2 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Exempt_Salaries3                          !Exempt Salaries (third box)
      move &P.GPUS_PRINT_LINE   to #L_16B
      move &P.GPUS_PRINT_COLUMN    to #C_16B
      let $F16B = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Exempt_Salaries_Code3                     !Exempt Salaries Code (third box)
      move &P.GPUS_PRINT_LINE   to #L_16C3
      move &P.GPUS_PRINT_COLUMN    to #C_16C3
      let $F16C3 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
   when = $YE_Save_Duplicate
      move &P.GPUS_PRINT_LINE   to #L_16C              !Contributions to the
      move &P.GPUS_PRINT_COLUMN    to #C_16C           !Save and Duplicate
      let $F16C = RTRIM(&P.GPUS_PRINT_FORMAT,' ')      !your money Program
      Break
  end-evaluate

  do Est-2003-Print

FROM  PS_GPUS_YE_PRT_BOX P
WHERE P.GPUS_PREPRTFORM = &TX.GPUS_PREPRTFORM
AND P.GPUS_TAXFORM_ID = '40'
AND P.EFFDT   = (SELECT MAX(EFFDT) FROM   PS_GPUS_YE_PRT_BOX
                   WHERE  GPUS_TAXFORM_ID = P.GPUS_TAXFORM_ID
                 AND  EFFDT  <= $AsOfDate)
ORDER BY P.GPUS_TAXFORM_BOX
End-Select
End-Procedure

Begin-Procedure Est-2003-Print
  evaluate $P.Box
    when = $YE_SS_Wages                               !SS wages
      move &P.GPUS_PRINT_LINE   to #L_17
      move &P.GPUS_PRINT_COLUMN    to #C_17
      let $F17 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_SS_Tax                                 !SS taxes
      move &P.GPUS_PRINT_LINE   to #L_18
      move &P.GPUS_PRINT_COLUMN    to #C_18
      let $F18 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Med_Wages                              !Medicare wages
      move &P.GPUS_PRINT_LINE   to #L_19
      move &P.GPUS_PRINT_COLUMN    to #C_19
      let $F19 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Med_Tax                                !Medicare taxes
      move &P.GPUS_PRINT_LINE   to #L_20
      move &P.GPUS_PRINT_COLUMN    to #C_20
      let $F20 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_SS_Tips                                !SS tips
      move &P.GPUS_PRINT_LINE   to #L_21
      move &P.GPUS_PRINT_COLUMN    to #C_21
      let $F21 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_SS_Tax_Tips                            !Uncollected
      move &P.GPUS_PRINT_LINE   to #L_22                   ! SS tax on tips
      move &P.GPUS_PRINT_COLUMN    to #C_22
      let $F22 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Med_Tax_Tips                           !Uncollected
      move &P.GPUS_PRINT_LINE   to #L_23                   ! Med tax on tips
      move &P.GPUS_PRINT_COLUMN    to #C_23
      let $F23 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
      break
    when = $YE_Wages_Tips_HIRE_Act
      move &P.GPUS_PRINT_LINE   to #L_24              !Wages and Tips under
      move &P.GPUS_PRINT_COLUMN    to #C_24           ! HIRE Act of 2010
     let $F24 = RTRIM(&P.GPUS_PRINT_FORMAT,' ')
    when = $YE_Year
      move &P.GPUS_PRINT_LINE   to #L_Y
      move &P.GPUS_PRINT_COLUMN    to #C_Y
      break
  end-evaluate
End-Procedure

Begin-Procedure Load-Test-Data
  let $FirstName =
         LPAD($x,TO_NUMBER(SUBSTR($F1A,3,INSTR($F1A,')',1)-2)),'X')

  let $LastName =
         LPAD($x,TO_NUMBER(SUBSTR($F1B,3,INSTR($F1B,')',1)-2)),'X')

  let $E.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($F1C,3,INSTR($F1C,')',1)-2)),'X')

  let $E.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($F1D,3,INSTR($F1D,')',1)-2)),'X')

  let $01E=
         LPAD($x,TO_NUMBER(SUBSTR($F1E,3,INSTR($F1E,')',1)-2)),'X')

  let $EE_Birthdate=
         LPAD($x,TO_NUMBER(SUBSTR($F1F,3,INSTR($F1F,')',1)-2)),'X')

  let $A.Descr =
         LPAD($x,TO_NUMBER(SUBSTR($F2A,3,INSTR($F2A,')',1)-2)),'X')

  let $A.Address1 =
         LPAD($x,TO_NUMBER(SUBSTR($F2B,3,INSTR($F2B,')',1)-2)),'X')

  let $A.Address2 =
         LPAD($x,TO_NUMBER(SUBSTR($F2C,3,INSTR($F2C,')',1)-2)),'X')

  let $02D =
         LPAD($x,TO_NUMBER(SUBSTR($F2D,3,INSTR($F2D,')',1)-2)),'X')

  let $Telephone_Nbr =
         LPAD($x,TO_NUMBER(SUBSTR($F2E,3,INSTR($F2E,')',1)-2)),'X')

  let $A.ClosingDate =
         LPAD($x,TO_NUMBER(SUBSTR($F2F,3,INSTR($F2F,')',1)-2)),'X')

  let $E.SSN =
         LPAD($x,TO_NUMBER(SUBSTR($F03,3,INSTR($F03,')',1)-2)),'X')

  let $A.GPUS_TAX_EIN =
         LPAD($x,TO_NUMBER(SUBSTR($F04,3,INSTR($F04,')',1)-2)),'X')

  let $E.Mar_Status = '10'

  move $F2G to $2G
  let $2G = TRANSLATE($2G,'Bb','99')              !Confirmation Number
  move $2G to #Confirm_Number

  move $F2H to $2H
  let $2H = TRANSLATE($2H,'Bb','99')              !Control Number
  move $2H to #Control_Num_End

  move $F05 to $05
  let $05 = TRANSLATE($05,'Bb','99')          !Cost of Employer
  move $05 to #YE_Cost_ER_Health              !Health Coverage
    
  move $F06 to $06
  let $06 = TRANSLATE($06,'Bb','99')          !Charitable Contributions
  move $06 to #YE_Charities

  move $F07 to $07
  let $07 = TRANSLATE($07,'Bb','99')              !Wages
  move $07 to #Wages

  move $F08 to $08
  let $08 = TRANSLATE($08,'Bb','99')              !Commissions
  move $08 to #Commissions

  move $F09 to $09
  let $09 = TRANSLATE($09,'Bb','99')              !Allowances
  move $09 to #Allowance

  move $F10 to $10
  let $10 = TRANSLATE($10,'Bb','99')              !Tips
  move $10 to #Tips

  move $F11 to $11
  let $11 = TRANSLATE($11,'Bb','99')              !Totals 8 - 12
  move $11 to #Total_Comm_Allow_Tips

  move $F12 to $12
  let $12 = TRANSLATE($12,'Bb','99')              !Reimbursed expenses
  move $12 to #Reimbursed_Expense

  move $F13 to $13
  let $13 = TRANSLATE($13,'Bb','99')              !PR tax w/h
  move $13 to #Tax_Withheld

  move $F14 to $14
  let $14 = TRANSLATE($14,'Bb','99')              !Retirement
  move $14 to #Retire_Fund

  move $F15 to $15
  let $15 = TRANSLATE($15,'Bb','99')              !PR tax w/h
  move $15 to #CODA_Plans

  !move $F16 to $16
  !let $16 = TRANSLATE($16,'Bb','99')              !Salaries under 324
  !move $16 to #Sal_324_2004

  move $F16 to $16
  let $16 = TRANSLATE($16,'Bb','99')              !Exempt Salaries
  move $16 to #ExAmt1

  let $ExBox1 ='X'
  let $ExBox2 ='Y'
  let $ExBox3 ='ZZ'
  let #ExAmt1 = 0
  let #ExAmt2 = 0
  let #ExAmt3 = 0

  move $F16A to $16A
  let $16A = TRANSLATE($16A,'Bb','99')              !Exempt Salaries2
  move $16A to #ExAmt2

  move $F16B to $16B
  let $16B = TRANSLATE($16B,'Bb','99')              !Exempt Salaries3
  move $16B to #ExAmt3

  move $F16C to $16C
  let $16C = TRANSLATE($16C,'Bb','99')          !Contributions to the Save and
  move $16C to #YE_Save_Duplicate               !Duplicate your money Program
  
  move $F17 to $17
  let $17 = TRANSLATE($17,'Bb','99')              !SS wages
  move $17 to #SS_Wages

  move $F18 to $18
  let $18 = TRANSLATE($18,'Bb','99')              !SS tax
  move $18 to #SS_Tax

  move $F19 to $19
  let $19 = TRANSLATE($19,'Bb','99')              !Medicare wages
  move $19 to #Med_Wages

  move $F20 to $20
  let $20 = TRANSLATE($20,'Bb','99')              !Medicare tax
  move $20 to #Med_Tax

  move $F21 to $21
  let $21 = TRANSLATE($21,'Bb','99')              !SS tips
  move $21 to #SS_Tips

  move $F22 to $22
  let $22 = TRANSLATE($22,'Bb','99')              !SS tax on tips
  move $22 to #SS_Tax_Tips

  move $F23 to $23
  let $23 = TRANSLATE($23,'Bb','99')              !Medicare tax
  move $23 to #Med_Tax_Tips                                 ! on tips

  If $CalYear = '2010'
    move $F24 to $24
    let $24 = TRANSLATE($24,'Bb','99')            !Wages and Tips under
    move $24 to #YE_Wages_Tips_HIRE_Act           !HIRE Act of 2010
  End-If

End-Procedure

Begin-Procedure Print-Alignment-Forms
  move &TX.GPUS_YE_ALIGNCOUNT to #Align_Count
  move 'Y' to $AlignForms
  move 1 to #j
  let #Align_Count = #Align_Count * #FormsPerPage
  move #EmployeesPerPage to #temp
  move #FormsPerPage to #EmployeesPerPage
  move 1 to #k

  while #k <= #Align_Count
    do Load-Test-Data
    do Print-W2
    add 1 to #k
  end-while
  move 0 to #Align_Count
  move #temp to #EmployeesPerPage
  move '' to $priorLocality
End-Procedure

Begin-Procedure Print-Value($String,#Line,#Col,$Identifier)
  if #Line > 0
    print $String (#Line,#Col)
  else
    display ''
    display '***************************************'
    display 'Print Line not defined for ' noline
    display $Identifier
    display 'in Tax Form Print Parameters Table.'
    display 'Program Stopped.'
    display '***************************************'
    display ''
    stop
  end-if
End-Procedure



begin-procedure Convert-Parameters
  move &TX.GPUS_YE_PRC_TYPE   to $SelectEEs
  move &TX.GPUS_YE_SORT1        to $SortCode1
  move &TX.GPUS_YE_SORT2        to $SortCode3
  if &TX.GPUS_YE_REPRNTDESC = '20'
    move 'CORRECTED'               to $ReprintDescr
    else
    if &TX.GPUS_YE_REPRNTDESC = '30'
      move 'REISSUED STATEMENT '     to $ReprintDescr
    else
      move '                   '     to $ReprintDescr
    end-if
  end-if

  if $SelectEEs = '20'
    do Select-Rpt-co
  else
    if $SelectEEs = '30'
      do Read-EEs
    end-if
  end-if

  do Create-Order-By
end-procedure
  !CREATING ORDER BY CLAUSE
begin-procedure Create-Order-By

  move 'ORDER BY E.EMPLID, E.GPUS_SEQ_NBR' to $Sort2
  move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
  move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4

  if $SortCode1 <> '10'

    evaluate $SortCode3
      when = '20'               !ID
        evaluate $SortCode1
          when = '50'
            move 'ORDER BY E.STATE, E.EMPLID, E.GPUS_SEQ_NBR' to $Sort2
          when = '40'
            move 'ORDER BY J.GP_PAYGROUP, S.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
          when = '20'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
          when = '60'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.GPUS_SEQ_NBR' to $Sort2
          when = '30'
            move 'ORDER BY K.GP_PSLP_MAIL_DROP, G.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
         end-evaluate

      when = '30'               !SSN
        evaluate $SortCode1
          when = '50'
            move 'ORDER BY E.STATE, E.SSN, E.GPUS_SEQ_NBR' to $Sort2
          when = '40'
            move 'ORDER BY J.GP_PAYGROUP, S.SSN' to $Sort1
            move 'ORDER BY T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
          when = '20'
            move 'ORDER BY J.DEPTID, S.SSN' to $Sort1
            move 'ORDER BY T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
          when = '60'
            move 'ORDER BY E.POSTAL, E.SSN, E.GPUS_SEQ_NBR' to $Sort2
          when = '30'
            move 'ORDER BY K.GP_PSLP_MAIL_DROP, G.SSN' to $Sort1
            move 'ORDER BY T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
        end-evaluate

      when = '10'               !Name
        evaluate $SortCode1
          when = '50'
            move 'ORDER BY E.STATE,E.GPUS_YE_LNAME, E.SSN, E.GPUS_SEQ_NBR' to $Sort2
          when = '40'
            move 'ORDER BY J.GP_PAYGROUP, S.GPUS_YE_LNAME, S.SSN' to $Sort1
            move 'ORDER BY T.GPUS_YE_LNAME, T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.GPUS_YE_LNAME, T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
          when = '20'
            move 'ORDER BY J.DEPTID, S.GPUS_YE_LNAME, S.SSN' to $Sort1
            move 'ORDER BY T.GPUS_YE_LNAME, T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.GPUS_YE_LNAME, T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
          when = '60'
            move 'ORDER BY E.POSTAL, E.GPUS_YE_LNAME, E.SSN, E.GPUS_SEQ_NBR' to $Sort2
          when = '30'
            move 'ORDER BY K.GP_PSLP_MAIL_DROP, G.GPUS_YE_LNAME, G.SSN' to $Sort1
            move 'ORDER BY T.GPUS_YE_LNAME, T.SSN, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.GPUS_YE_LNAME, T1.SSN, T1.GPUS_SEQ_NBR' to $Sort4
        end-evaluate

      when = ''               ! None  - default Emplid
        evaluate $SortCode1
          when = '50'
            move 'ORDER BY E.STATE, E.EMPLID, E.GPUS_SEQ_NBR' to $Sort2
          when = '40'
            move 'ORDER BY J.GP_PAYGROUP, S.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
          when = '20'
            move 'ORDER BY J.DEPTID, S.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
          when = '60'
            move 'ORDER BY E.POSTAL, E.EMPLID, E.GPUS_SEQ_NBR' to $Sort2
          when = '30'
            move 'ORDER BY K.GP_PSLP_MAIL_DROP, G.EMPLID' to $Sort1
            move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR' to $Sort3
            move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR' to $Sort4
          end-evaluate

    end-evaluate
  else
    evaluate $SortCode3
      when = '20'
        move 'ORDER BY E.EMPLID, E.GPUS_SEQ_NBR, E.GPUS_TAX_EIN' to $Sort2
        move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR, T.GPUS_TAX_EIN' to $Sort3
        move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR, T1.GPUS_TAX_EIN' to $Sort4
      when = '30'
        move 'ORDER BY E.SSN, E.GPUS_SEQ_NBR, E.GPUS_TAX_EIN'    to $Sort2
        move 'ORDER BY T.SSN, T.GPUS_SEQ_NBR, T.GPUS_TAX_EIN'    to $Sort3
        move 'ORDER BY T1.SSN, T1.GPUS_SEQ_NBR, T1.GPUS_TAX_EIN'    to $Sort4
      when = '10'
        move 'ORDER BY E.GPUS_YE_LNAME, E.SSN, E.GPUS_SEQ_NBR, E.GPUS_TAX_EIN' to $Sort2
        move 'ORDER BY T.GPUS_YE_LNAME, T.SSN, T.GPUS_SEQ_NBR, T.GPUS_TAX_EIN' to $Sort3
        move 'ORDER BY T1.GPUS_YE_LNAME, T1.SSN, T1.GPUS_SEQ_NBR, T1.GPUS_TAX_EIN' to $Sort4
      when = ''
        move 'ORDER BY E.EMPLID, E.GPUS_SEQ_NBR, E.GPUS_TAX_EIN' to $Sort2
        move 'ORDER BY T.EMPLID, T.GPUS_SEQ_NBR, T.GPUS_TAX_EIN' to $Sort3
        move 'ORDER BY T1.EMPLID, T1.GPUS_SEQ_NBR, T1.GPUS_TAX_EIN' to $Sort4
    end-evaluate
  end-if
end-procedure

 ! SELECTING EMPLOYEES
Begin-Procedure Read-EEs
move 'AND E.EMPLID IN (''' to $E.SelectedEEs
move 'AND S.EMPLID IN (''' to $S.SelectedEEs
move 'AND G.EMPLID IN (''' to $G.SelectedEEs
move 'AND T.EMPLID in (''' to $T.SelectedEmpl
move 'AND T1.EMPLID in (''' to $T1.SelectedEmpl
move ' ' to $SelectedEmplID

Begin-Select
R.EMPLID
  If &R.EMPLID <> ''
     move &R.EMPLID to $SelectedEmplID
     let $E.SelectedEEs = $E.SelectedEEs || $SelectedEmplID || ''','''
     let $S.SelectedEEs = $S.SelectedEEs || $SelectedEmplID || ''','''
     let $G.SelectedEEs = $G.SelectedEEs || $SelectedEmplID || ''','''
     let $T.SelectedEmpl = $T.SelectedEmpl || $SelectedEmplID || ''','''
     let $T1.SelectedEmpl = $T1.SelectedEmpl || $SelectedEmplID || ''','''
     move 'Y' to $EE_Selected
     
  End-If
FROM PS_GPUS_RC_YE4 R
WHERE R.OPRID = $Prcs_OprID
AND R.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-Select

let $E.SelectedEEs = SUBSTR($E.SelectedEEs,1,LENGTH($E.SelectedEEs) - 2)
let $E.SelectedEEs = $E.SelectedEEs ||')'

let $S.SelectedEEs = SUBSTR($S.SelectedEEs ,1,LENGTH($S.SelectedEEs) - 2)
let $S.SelectedEEs = $S.SelectedEEs  ||')'

let $G.SelectedEEs = SUBSTR($G.SelectedEEs ,1,LENGTH($G.SelectedEEs) - 2)
let $G.SelectedEEs = $G.SelectedEEs  ||')'

let $T.SelectedEmpl = SUBSTR($T.SelectedEmpl,1,LENGTH($T.SelectedEmpl) - 2)
let $T.SelectedEmpl = $T.SelectedEmpl || ')'

let $T1.SelectedEmpl = SUBSTR($T1.SelectedEmpl,1,LENGTH($T1.SelectedEmpl) - 2)
let $T1.SelectedEmpl = $T1.SelectedEmpl || ')'

End-Procedure




! SELECTING REPORTING COMPANY
Begin-Procedure Select-Rpt-co
move 'AND A.GPUS_YE_RPT_CO IN (''' to $A.SelectedW2Co
Begin-Select
B.GPUS_YE_RPT_CO
  If &B.GPUS_YE_RPT_CO <> ''
    move &B.GPUS_YE_RPT_CO to $SelectedW2Co
    let $A.SelectedW2Co = $A.SelectedW2Co || $SelectedW2Co || ''','''
  End-If
FROM PS_GPUS_RC_YE3 B
WHERE B.OPRID = $Prcs_OprID
AND B.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-Select
let $A.SelectedW2Co = SUBSTR($A.SelectedW2Co,1,LENGTH($A.SelectedW2Co) - 2)
let $A.SelectedW2Co = $A.SelectedW2Co ||')'
End-Procedure

!STREAM NUMBER
Begin-Procedure stream-num
Begin-Select
STR.EMPLID_FROM
STR.EMPLID_TO

  let $A = ''''
  if &STR.EMPLID_FROM <> ' ' AND &STR.EMPLID_TO <> ' '
     let $fromtoE = 'AND E.EMPLID BETWEEN '''|| &STR.EMPLID_FROM ||''' AND ''' || &STR.EMPLID_TO ||$A
     let $fromtoS  = 'AND S.EMPLID BETWEEN '''|| &STR.EMPLID_FROM ||''' AND ''' || &STR.EMPLID_TO ||$A
     let $fromtoG  = 'AND G.EMPLID BETWEEN '''||&STR.EMPLID_FROM||''' AND '''||&STR.EMPLID_TO||$A
     let $fromtoT  = 'AND T.EMPLID BETWEEN '''||&STR.EMPLID_FROM||''' AND '''||&STR.EMPLID_TO||$A
     let $fromtoT1  = 'AND T1.EMPLID BETWEEN '''||&STR.EMPLID_FROM||''' AND '''||&STR.EMPLID_TO||$A
  End-If
FROM PS_GP_STRM STR
WHERE STRM_NUM = &TX.STRM_NUM
End-Select
End-Procedure

Begin-Procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
End-Procedure

Begin-Procedure GetExemptAmount
Evaluate $ExBoxID
  when = 'A'
     move #Sal_324_2004 to #ExBoxValue
     break
  when = 'B'
     move #OT_Police to #ExBoxValue
     break
  when = 'C'
     move #Medic_Stipends to #ExBoxValue
     break
  when = 'D'
     move #Researcher_Scientist to #ExBoxValue
     break
  when = 'E'
     move #Sal_Young_Empl to #ExBoxValue
     break
  when = 'F'
     move #Vac_Sick_Publ to #ExBoxValue
     break
  when = 'G'
     move #YE_Disaster_Pmts to #ExBoxValue
     break
  when = 'H'
     move #YE_Voluntary_Transition to #ExBoxValue
     break
  when = 'I'
     move #YE_Dismisal_Comp to #ExBoxValue
     break
  when-other
     move 0 to #ExBoxValue  
End-Evaluate
end-Procedure

#Include 'gpusrntl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'gpusw2so.sqc'  !Routines to sorting W-2s
#Include 'stdapi.sqc'    !Update Process API
#Include 'adformat.sqc'  !Routines to format address
#Include 'gpusw2.sqc'    !Routine for W2 Year End Box variables
