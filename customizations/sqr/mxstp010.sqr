!***********************************************************************
! MXSTP010.SQR   STPS BATCH UPLOAD Generate files for STPS Batch       *
!                          Upload application.                               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2016/03/03:16:00:12                                 *
!       $Release:  HR92                                                *
!           $Bug:  20195847                                            *
!                                                                      *
!***********************************************************************

#define Sep_Char   '|'
#include 'setenv.sqc'    !Set environment



#include 'setup31.sqc'  ! 

begin-setup
#include 'setupdb.sqc'
end-setup





begin-program

  do Init-Report

  do Select-Parameters

  do Open-Files

!!  do Select-Values
  do Stdapi-Term
  do Insert-Employee-Tbl
  do Insert-NormCodes-Tbl
  do Insert-Courses-Tbl
  do Insert-Emp-Course-Tbl
  do Write-Employees
  do Write-Courses
  do Write-Emp-Course
  do Delete-Tmp-Tables


  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  display ' '

end-program




begin-procedure Init-Report
  move 'MXSTP010' to $ReportID
  move 'Archivos de carga STPS ' to $ReportTitle
  move 'Ver. 9.2.17.1' to $ReportVersion
  move '1' to $ReportDateType
  move '1' to $Reportyear4
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  display $ReportID
  display $ReportTitle
  display $ReportVersion
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  display ' '
end-procedure Init-Report





begin-procedure Select-Parameters
begin-select
RC.COMPANY
RC.ESTAB_CD_MEX
RC.PLAN_TYPE_MEX
RC.TRN_PROGRAM
RC.DC2_PLAN_FOLIO_MEX
RC.PLAN_YEAR_MEX

 
!  let $Company     = &RC.COMPANY
  let $EstabCd     = &RC.ESTAB_CD_MEX
  let $Plan_Type   = &RC.PLAN_TYPE_MEX
  let $Train_Prog  = &RC.TRN_PROGRAM
  let $DC2Folio    = &RC.DC2_PLAN_FOLIO_MEX
  let $PlanYear    = &RC.PLAN_YEAR_MEX


FROM PS_RUN_STPS_MEX RC
WHERE RC.OPRID       = $Prcs_OprID
  AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
end-procedure Select-Parameters

!**************************************
begin-procedure Open-Files
#debug show '* Insert-Employee-tbl'
!**************************************

  open '{FILEPREFIX}STPS_empleados.txt{FILESUFFIX}' as 1 for-writing record=1000:vary
  open '{FILEPREFIX}STPS_cursos.txt{FILESUFFIX}'    as 2 for-writing record=1000:vary
  open '{FILEPREFIX}STPS_relacion.txt{FILESUFFIX}'  as 3 for-writing record=1000:vary
  
end-procedure Open-Files



!**************************************
begin-procedure Insert-Employee-Tbl
#debug show '* Insert-Employee-tbl'
!**************************************



begin-sql   
insert into PS_STPS_EM_TMP_MEX
(PROCESS_INSTANCE
,EMPLID
,ESTAB_CD_MEX
,FIRST_NAME
,LAST_NAME
,SECOND_LAST_NAME
,REP_CURP_MEX
,IMSS_NUM_MEX
,DISABILITY_MEX
,MAR_STATUS
,DEPENDENTS_NUM_MEX
,STATE
,ADDRESS4
,STATE_LOCATION_MEX
,OCCUP_CD_MEX
,HIGH_EDU_LVL_MEX
,APPROV_DOC_MEX
,APP_DOC_DATE_MEX
,PUBL_PRIV_SCHO_MEX
,ACAD_CAREER_MEX)
select
#prcs_process_instance
,ADDL.EMPLID
,ADDL.ESTAB_CD_MEX
,NM.FIRST_NAME
,NM.LAST_NAME
,NM.SECOND_LAST_NAME
,CASE when PNI2.NATIONAL_ID IS NULL THEN '0' else PNI2.NATIONAL_ID END
,CASE when PNI.NATIONAL_ID IS NULL THEN '0' else PNI.NATIONAL_ID END
,ADDL.DISABILITY_MEX
,PDE.MAR_STATUS
,(select COUNT(*) from PS_DEPENDENT_BENEF DEP where DEP.EMPLID = ADDL.EMPLID and DEP.DEP_BENEF_TYPE in ('D', 'O') and DEP.RELATIONSHIP in ('AC', 'C', 'FC'))
,AD.STATE
,AD.ADDRESS4
,1
,ADDL.OCCUP_CD_MEX
,ADDL.HIGH_EDU_LVL_MEX
,ADDL.APPROV_DOC_MEX
,ADDL.APP_DOC_DATE_MEX
,ADDL.PUBL_PRIV_SCHO_MEX
,ADDL.ACAD_CAREER_MEX

from PS_ADDL_INFO_MEX ADDL
LEFT OUTER JOIN PS_PERS_NID PNI2 ON (ADDL.EMPLID = PNI2.EMPLID and PNI2.COUNTRY = 'MEX' and PNI2.NATIONAL_ID_TYPE = 'CURP')
LEFT OUTER JOIN PS_PERS_NID PNI ON (ADDL.EMPLID = PNI.EMPLID and PNI.COUNTRY = 'MEX' and PNI.NATIONAL_ID_TYPE = 'IMSS')
,PS_NAMES NM
,PS_PERS_DATA_EFFDT PDE
,PS_ADDRESSES AD


where ADDL.ESTAB_CD_MEX = $EstabCd
and ADDL.EFFDT = (select MAX(ADDL1.EFFDT) from PS_ADDL_INFO_MEX ADDL1
        where ADDL1.EMPLID = ADDL.EMPLID
         and ADDL1.EMPL_RCD = ADDL.EMPL_RCD
         and ADDL1.EFF_STATUS = 'A'
         and ADDL1.EFFDT <= $AsofToday)
and NM.EMPLID = ADDL.EMPLID
and NM.EFFDT = (select MAX(NM1.EFFDT) from PS_NAMES NM1
        where NM1.EMPLID = NM.EMPLID
        and NM1.EFF_STATUS = 'A'
        and NM1.EFFDT <= $AsofToday)
and PDE.EMPLID = ADDL.EMPLID
and PDE.EFFDT = (select MAX(PDE1.EFFDT) from PS_PERS_DATA_EFFDT PDE1
        where PDE1.EMPLID = PDE.EMPLID
        and PDE1.EFFDT <= $AsofToday)
and AD.EMPLID = ADDL.EMPLID
and AD.EFFDT = (select MAX(AD1.EFFDT) from PS_ADDRESSES AD1
        where AD1.EMPLID = AD.EMPLID
        and AD1.EFF_STATUS = 'A'
        and AD1.EFFDT <= $AsofToday)



end-sql

    do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_STPS_EM_TMP_MEX COMPUTE STATISTICS
        end-sql
    #endif


    
begin-select 
EM1.EMPLID 
EM1.ADDRESS4 


  let $EmplidUp  = &EM1.EMPLID 
  let $MunicUp   = UPPER(&EM1.ADDRESS4)
  let $MunicUp   = '''' || '%' || $MunicUp || '%' || ''''
  
  if &EM1.ADDRESS4 <> ' '  
    do Upd-Employee-Tbl
  end-if  
  
FROM PS_STPS_EM_TMP_MEX EM1
WHERE EM1.PROCESS_INSTANCE = #prcs_process_instance   

end-select

#debug show 'End Insert-Employee-Tbl'
end-procedure Insert-Employee-Tbl

!**************************************
begin-procedure Upd-Employee-Tbl
#debug show '* Upd-Employee-Tbl'
!**************************************


begin-sql
update PS_STPS_EM_TMP_MEX EM2
SET EM2.STATE_LOCATION_MEX = (SELECT ST.STATE_LOCATION_MEX
                              FROM PS_STA_LOC_TBL_MEX ST
                              WHERE EM2.STATE = ST.STATE
                              AND   ST.ADDRESS4 LIKE [$MunicUp]) 

WHERE EM2.PROCESS_INSTANCE = #prcs_process_instance
AND EM2.EMPLID      = $EmplidUp



end-sql



#debug show 'End Upd-Employee-Tbl'
end-procedure Upd-Employee-Tbl

!**************************************
begin-procedure Insert-NormCodes-Tbl
#debug show '* Insert-NormCodes-tbl'
!**************************************

begin-sql   
insert into PS_STPS_CN_TMP_MEX
(PROCESS_INSTANCE
,REP_CURP_MEX
,NORM_CD_MEX
,CERTIF_DATE_MEX)
select
#prcs_process_instance
,EM.REP_CURP_MEX
,CN.NORM_CD_MEX
,CN.CERTIF_DATE_MEX
from
PS_STPS_EM_TMP_MEX EM
,PS_ADDL_NORMCD_MEX CN
where
EM.EMPLID = CN.EMPLID
and CN.EFFDT = (select MAX(CN1.EFFDT) from PS_ADDL_NORMCD_MEX CN1
        where CN1.EMPLID = CN.EMPLID
        and CN1.EFFDT <= $AsofToday)

end-sql

    do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_STPS_CN_TMP_MEX COMPUTE STATISTICS
        end-sql
    #endif


#debug show 'End Insert-NormCodes-Tbl'
end-procedure Insert-NormCodes-Tbl

!**************************************
begin-procedure Insert-Courses-Tbl
#debug show '* Insert-Courses-tbl'
!**************************************

  let #Cons_nbr = 0
!  let $CourseCond = ' '
  let #TotalCourses = 0
  
begin-select
!CD.COURSE    
COUNT(*) &count2

  let #TotalCourses   = &count2

from PS_RUN_STPS2_MEX CD
WHERE CD.OPRID = $Prcs_OprID  
AND CD.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select

if #TotalCourses  > 0
    Let $CourseCond ='AND CT.COURSE IN (SELECT RC.COURSE FROM PS_RUN_STPS2_MEX RC WHERE RC.OPRID = ' || '''' || $Prcs_OprID || '''' || ' AND RC.RUN_CNTL_ID =' || '''' ||  $Prcs_Run_Cntl_ID || '''' || ')'

end-if


begin-sql 
insert into PS_STPS_CO_TMP_MEX
(PROCESS_INSTANCE
,CONSEC_NBR_MEX
,COURSE
,SESSION_NBR
,ESTAB_CD_MEX
,DESCR
,THEME_AREA_MEX
,DURATION_CONVERTED
,COURSE_START_DT
,COURSE_END_DT
,INTERNAL_EXTERNAL
,INSTRUCTOR_RFC_MEX
,TRAINING_TYPE_MEX
,TRAINING_OBJ_MEX)
select
#prcs_process_instance
,2
,CSE.COURSE
,CSE.SESSION_NBR
,CTM.ESTAB_CD_MEX
,CT.DESCR
,CTM.THEME_AREA_MEX
,CT.DURATION_CONVERTED
,CSE.COURSE_START_DT
,CSE.COURSE_END_DT
,CT.INTERNAL_EXTERNAL
,CASE when INS.INSTRUCTOR_RFC_MEX IS NULL THEN ' ' else INS.INSTRUCTOR_RFC_MEX END
,CTM.TRAINING_TYPE_MEX
,CTM.TRAINING_OBJ_MEX

FROM
PS_COURSE_TBL CT
,PS_COURSE_TBL_MEX CTM
,PS_CRSE_SESSN_TBL CSE
,PS_CRSE_SESS_INSTR CSI
LEFT OUTER JOIN PS_TRN_INSTRCT_TBL INS ON (CSI.INSTRUCTOR_ID = INS.INSTRUCTOR_ID)
WHERE
CT.COURSE = CTM.COURSE
AND CT.COURSE = CSE.COURSE
AND CSE.SESSION_STATUS = 'C'
AND CSI.COURSE=CSE.COURSE
AND CSI.SESSION_NBR=CSE.SESSION_NBR
[$CourseCond]


end-sql

    do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_STPS_CO_TMP_MEX COMPUTE STATISTICS
        end-sql
    #endif

  let #Consec = 0

begin-select 
CO1.COURSE 
CO1.SESSION_NBR 


  let #Consec   = #Consec + 1
  let $CourseUp = &CO1.COURSE
  let $SessUp   = &CO1.SESSION_NBR
    
  do Upd-Emp-Course-Tbl
  
FROM PS_STPS_CO_TMP_MEX CO1
WHERE CO1.PROCESS_INSTANCE = #prcs_process_instance


end-select


#debug show 'End Insert-Courses-Tbl'
end-procedure Insert-Courses-Tbl


!**************************************
begin-procedure Upd-Emp-Course-Tbl
#debug show '* Upd-Emp-Course-Tbl'
!**************************************

begin-sql
update PS_STPS_CO_TMP_MEX CO2
SET CO2.CONSEC_NBR_MEX = #Consec 

WHERE CO2.PROCESS_INSTANCE = #prcs_process_instance
AND CO2.COURSE      = $CourseUp
AND CO2.SESSION_NBR = $SessUp


end-sql

#debug show 'Upd-Emp-Course-Tbl'
end-procedure Upd-Emp-Course-Tbl

!**************************************
begin-procedure Insert-Emp-Course-Tbl
#debug show '* Insert-Emp-Course-tbl'
!**************************************

begin-sql 
insert into PS_STPS_EC_TMP_MEX
(PROCESS_INSTANCE
,CONSEC_NBR_MEX
,REP_CURP_MEX)
select
#prcs_process_instance
,CO.CONSEC_NBR_MEX
,EM.REP_CURP_MEX
FROM 
PS_STPS_EM_TMP_MEX EM
,PS_STPS_CO_TMP_MEX CO
,PS_TRAINING TR
WHERE EM.EMPLID = TR.EMPLID
AND CO.COURSE = TR.COURSE
AND CO.SESSION_NBR = TR.SESSION_NBR

end-sql

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_STPS_EC_TMP_MEX COMPUTE STATISTICS
        end-sql
    #endif

#debug show 'End Insert-Emp-Course-Tbl'
end-procedure Insert-Emp-Course-Tbl


!**************************************
begin-procedure Write-Employees
#debug show '* Write-Employees'
!**************************************
  let #count = 0
  
begin-select
EMP.EMPLID
EMP.ESTAB_CD_MEX
EMP.FIRST_NAME
EMP.LAST_NAME
EMP.SECOND_LAST_NAME
EMP.REP_CURP_MEX
EMP.IMSS_NUM_MEX
EMP.DISABILITY_MEX
EMP.MAR_STATUS
EMP.DEPENDENTS_NUM_MEX
EMP.STATE
EMP.STATE_LOCATION_MEX
EMP.OCCUP_CD_MEX
EMP.HIGH_EDU_LVL_MEX
EMP.APPROV_DOC_MEX
EMP.APP_DOC_DATE_MEX
EMP.PUBL_PRIV_SCHO_MEX
EMP.ACAD_CAREER_MEX

  let $EmplId                     = &EMP.EMPLID
  let $EstabCd                    = to_char(Round(&EMP.ESTAB_CD_MEX,0))
  let $FirstName                  = upper(&EMP.FIRST_NAME)
  let $LastName                   = upper(&EMP.LAST_NAME)
  let $LastScndName               = upper(&EMP.SECOND_LAST_NAME)
  let $Curp                       = &EMP.REP_CURP_MEX
  let $Imss                       = &EMP.IMSS_NUM_MEX
  let $Disab                      = &EMP.DISABILITY_MEX
  let $MaritStat                  = &EMP.MAR_STATUS
  let $DepNum                     = to_char(Round(&EMP.DEPENDENTS_NUM_MEX,0))
  let $State                      = &EMP.STATE
  let $Address                    = to_char(Round(&EMP.STATE_LOCATION_MEX,0))
  let $Occup                      = &EMP.OCCUP_CD_MEX
  let $EducLvl                    = &EMP.HIGH_EDU_LVL_MEX
  let $AppDoc                     = &EMP.APPROV_DOC_MEX
  let $AppDocDt                   = &EMP.APP_DOC_DATE_MEX
  let $SchoolType                 = &EMP.PUBL_PRIV_SCHO_MEX
  let $Career                     = &EMP.ACAD_CAREER_MEX


  Do Convert-To-Dtu-Date($AppDocDt, $AppDocDtDTU)
  let $AppDocDt                   = substr($AppDocDtDTU,1, 4)
 

  Evaluate $MaritStat
  when = 'M'
    Let $MaritStat = '1'
    Break
  when = 'S'
    Let $MaritStat = '2'
    Break
  when-other
    Let $MaritStat = '3'
    Break
  End-Evaluate
  
  Evaluate $State
  when = 'AGS'
    Let $State = '1'
    Break
  when = 'BCN'
    Let $State = '2'
    Break
  when = 'BCS'
    Let $State = '3'
    Break
  when = 'CAMP'
    Let $State = '4'
    Break
  when = 'CHIH'
    Let $State = '8'
    Break
  when = 'CHPS'
    Let $State = '7'
    Break
   when = 'COAH'
    Let $State = '5'
    Break
  when = 'COLI'
    Let $State = '6'
    Break
  when = 'DF'
    Let $State = '9'
    Break
   when = 'DGO'
    Let $State = '10'
    Break
  when = 'EMEX'
    Let $State = '15'
    Break
  when = 'GRO'
    Let $State = '12'
    Break
  when = 'GTO'
    Let $State = '11'
    Break
  when = 'HGO'
    Let $State = '13'
    Break
  when = 'JAL'
    Let $State = '14'
    Break
  when = 'MICH'
    Let $State = '16'
    Break
  when = 'MOR'
    Let $State = '17'
    Break
  when = 'NAY'
    Let $State = '18'
    Break
  when = 'NL'
    Let $State = '19'
    Break
  when = 'OAX'
    Let $State = '20'
    Break
  when = 'PUE'
    Let $State = '21'
    Break
  when = 'QRO'
    Let $State = '22'
    Break
  when = 'QROO'
    Let $State = '23'
    Break
  when = 'SIN'
    Let $State = '25'
    Break
  when = 'SLP'
    Let $State = '24'
    Break
  when = 'SON'
    Let $State = '26'
    Break
  when = 'TAB'
    Let $State = '27'
    Break
  when = 'TAMP'
    Let $State = '28'
    Break
  when = 'TLAX'
    Let $State = '29'
    Break
  when = 'VER'
    Let $State = '30'
    Break
  when = 'YUC'
    Let $State = '31'
    Break
  when = 'ZAC'
    Let $State = '32'
    Break
  End-Evaluate
  
  
  Evaluate $SchoolType
  when = 'P'
    Let $SchoolType = '1'
    Break
  when = 'V'
    Let $SchoolType = '2'
    Break
  End-Evaluate


  Let $Line = '1'        || {Sep_Char} || $EmplId       || {Sep_Char} || $EstabCd  || {Sep_Char} || $FirstName  || {Sep_Char} ||
              $LastName  || {Sep_Char} || $LastScndName || {Sep_Char} || $Curp     || {Sep_Char} || $Imss       || {Sep_Char} || $Disab     || {Sep_Char} ||
              $MaritStat || {Sep_Char} || $DepNum       || {Sep_Char} || $State    || {Sep_Char} || $Address    || {Sep_Char} || $Occup     || {Sep_Char} || 
              $EducLvl   || {Sep_Char} || $AppDoc       || {Sep_Char} || $AppDocDt || {Sep_Char} || $SchoolType || {Sep_Char} || $Career
  
  write 1 FROM $Line
  
  let #count      = #count + 1

from PS_STPS_EM_TMP_MEX EMP
where EMP.PROCESS_INSTANCE = #prcs_process_instance

end-select

  do Write-Employee-Competency
  
  let $count  = to_char(Round(#count,0)) 
  Let $Line3 = '3' || {Sep_Char} || $count
  
  write 1 FROM $Line3
  
  


#debug show 'Write-Employees'
end-procedure Write-Employees

!**************************************
begin-procedure Write-Employee-Competency
#debug show '* Write-Employee-Competency'
!**************************************

begin-select
CN.REP_CURP_MEX
CN.NORM_CD_MEX
CN.CERTIF_DATE_MEX

  let $Curp   = &CN.REP_CURP_MEX
  let $NormCd = &CN.NORM_CD_MEX
  let $CertDt = &CN.CERTIF_DATE_MEX
  
  Do Convert-To-Dtu-Date($CertDt, $CertDtDTU)
  let $YearAD  = substr($CertDtDTU,1, 4)
  let $MonthAD = substr($CertDtDTU,6, 2)
  let $DayAD   = substr($CertDtDTU,9, 2)
  let $CertDt  = $DayAD || '/' || $MonthAD || '/' || $YearAD
  
  
  Let $Line2 = '2' || {Sep_Char} || $Curp || {Sep_Char} || $NormCd || {Sep_Char} || $CertDt 
              
  write 1 FROM $Line2
  
  let #count  = #count + 1

from PS_STPS_CN_TMP_MEX CN
where CN.PROCESS_INSTANCE = #prcs_process_instance

end-select

#debug show 'Write-Employee-Competency'
end-procedure Write-Employee-Competency


!**************************************
begin-procedure Write-Courses
#debug show '* Write-Courses'
!**************************************
  let #count = 0
  
begin-select
COU.CONSEC_NBR_MEX
COU.ESTAB_CD_MEX
COU.DESCR
COU.THEME_AREA_MEX
COU.DURATION_CONVERTED
COU.COURSE_START_DT
COU.COURSE_END_DT
COU.INTERNAL_EXTERNAL
COU.INSTRUCTOR_RFC_MEX
COU.TRAINING_TYPE_MEX
COU.TRAINING_OBJ_MEX


  let $ConsecNbr = to_char(Round(&COU.CONSEC_NBR_MEX,0))
  let $EstabCd   = to_char(Round(&COU.ESTAB_CD_MEX,0))
  let $Descr     = upper(&COU.DESCR)
  let $ThemArea  = &COU.THEME_AREA_MEX
  let $Duration  = to_char(Round(&COU.DURATION_CONVERTED,0))
  let $CoStartDt = &COU.COURSE_START_DT
  let $CoEnddt   = &COU.COURSE_END_DT
  let $InstrType = &COU.INTERNAL_EXTERNAL
  let $InstrRFC  = &COU.INSTRUCTOR_RFC_MEX
  let $TrainType = &COU.TRAINING_TYPE_MEX
  let $Object    = &COU.TRAINING_OBJ_MEX
  
  Do Convert-To-Dtu-Date($CoEnddt, $CoEnddtDTU)
  let $YearAD    = substr($CoEnddtDTU,1, 4)
  let $MonthAD   = substr($CoEnddtDTU,6, 2)
  let $DayAD     = substr($CoEnddtDTU,9, 2)
  let $CoEnddt   = $DayAD || '/' || $MonthAD || '/' || $YearAD
  
  Do Convert-To-Dtu-Date($CoStartDt, $CoStartDtDTU)
  let $YearAD    = substr($CoStartDtDTU,1, 4)
  let $MonthAD   = substr($CoStartDtDTU,6, 2)
  let $DayAD     = substr($CoStartDtDTU,9, 2)
  let $CoStartDt  = $DayAD || '/' || $MonthAD || '/' || $YearAD
  
  Evaluate $InstrType
  when = 'I'
    Let $InstrType = '1'
    Break
  when = 'E'
    Let $InstrType = '2'
    Break
  when-other
    Let $InstrType = '0'
  End-Evaluate
  
  if $InstrRFC <> ' '
  let $InstrRFC  = $InstrRFC  || '000' || $InstrType
  end-if
  
  Let $Line = '1'        || {Sep_Char} || $ConsecNbr || {Sep_Char} || $DC2Folio  || {Sep_Char} || $PlanYear || {Sep_Char} || $EstabCd   || {Sep_Char} || $Descr    || {Sep_Char} ||
              $ThemArea  || {Sep_Char} || $Duration  || {Sep_Char} || $CoStartDt || {Sep_Char} || $CoEnddt  || {Sep_Char} || $InstrType || {Sep_Char} || $InstrRFC || {Sep_Char} || 
              $TrainType || {Sep_Char} || $Object 

  write 2 FROM $Line
  
  let #count      = #count + 1

from PS_STPS_CO_TMP_MEX COU
where COU.PROCESS_INSTANCE = #prcs_process_instance

end-select

  let $count  = to_char(Round(#count,0)) 
  Let $Line2 = '2' || {Sep_Char} || $count
  
  write 2 FROM $Line2

#debug show 'Write-Courses'
end-procedure Write-Courses



!**************************************
begin-procedure Write-Emp-Course
#debug show '* Write-Emp-Course'
!**************************************
  let #count = 0

begin-select
EC.CONSEC_NBR_MEX
EC.REP_CURP_MEX

  let $ConsecNbr  = to_char(Round(&EC.CONSEC_NBR_MEX,0))
  let $Curp       = &EC.REP_CURP_MEX
  
  Let $Line = '1' || {Sep_Char} || $ConsecNbr || {Sep_Char} || $Curp

  write 3 FROM $Line
  
  let #count      = #count + 1
  
from PS_STPS_EC_TMP_MEX EC
where EC.PROCESS_INSTANCE = #prcs_process_instance

end-select

  let $count  = to_char(Round(#count,0)) 
  Let $Line2 = '2' || {Sep_Char} || $count
  
  write 3 FROM $Line2
   

#debug show 'Write-Emp-Course'
end-procedure Write-Emp-Course

!**************************************
begin-procedure Delete-Tmp-Tables
#debug show '* Delete-Tmp-Tables'
!**************************************


begin-sql
delete from PS_STPS_EM_TMP_MEX 
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_STPS_CN_TMP_MEX 
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_STPS_CO_TMP_MEX 
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_STPS_EC_TMP_MEX 
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

#ifdef ORACLE
begin-sql 
   commit
end-sql       
#endif




#debug show 'Delete-Tmp-Tables'
end-procedure Delete-Tmp-Tables



!*****************************************************************
#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Date math routines
#include 'askcalyr.sqc'  !Ask-Calendar-Year
