!***********************************************************************
!  GPMXIM12:  IMSS Base Over Cap                                       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:51:35                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#define c1 1
#define c2 1
#define c3 12
#define c3a 19
#define c4 32
#define c5 40
#define c5a 47
#define c6 55
#define c6a 58
#define c7 70
#define c7a 74
#define c8 85
#define c8a 88
#define c9 100
#define c9a 104
#define c10 115
#define c10a 118
#define c11 130
#define c11a 134
#define c12 145
#define c12a 148
#define c13 160
#define c13a 164

#define h1 80
#define h2 95
#define t1 1
#define t2 12
#define YearFactor 365
#define Cap1 3

#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  !printer and page-size initialization

begin-report
    do Init-DateTime
    do Init-Number
    do Stdapi-Init
    do Get-Current-DateTime
    do Init-Report
    do Report-Translation
    do Select-Parameters
    let $AsOfDate = $EndDt
    do Get-Company-Data-Mex
    do Get-ceilings
    do Minimum-Wage
    do Process-Main
    do Stdapi-Term
    do Reset
    display 'Report Ended: ' noline
    display &timeBegan      
end-report

begin-procedure Init-Report
    move 'GPMXIM12' to $ReportID
    move 'IMSS / SAR / INFONAVIT' to $ReportTitle
    move 'Ver. 221007 1801' to $ReportVersion
    display $ReportID
    display $ReportTitle
    display $ReportVersion
    date-time () hh:mi:ss &timeBegan
    display 'Report Began: ' noline
    display &timeBegan
end-procedure

begin-heading 11
    uppercase $TTitle
    print $TTitle          (2,) center
    print 'PeopleSoft'     (1,) center
    print $TReport         (4,1)
    print $ReportID        (0,17)
    print $TCompany        (5,1)
    print $Company         (0,17)
    uppercase $CompanyName
    print $CompanyName     (,+2)
    print $TFrom           (6,1)
    print $BgnDtP          (0,17)
    print $TTo             (0,+2)
    print $EndDtP          (0,+2)
    if $EstabId <> ''
      print $TEstab        (7,1)
      print $EstabId       (0,17)
    end-if
    
    print $TWage_Sal       (3,{h1})
    print #Wage_SalP       (0,{h2}) edit 99,999,999.99
    print $TWage_Sal1      (4,{h1})
    print #Wage_Sal1P      (0,{h2}) edit 99,999,999.99
    print $TWage_Sal3      (5,{h1})
    print #Wage_Sal3P      (0,{h2}) edit 99,999,999.99
    print $Min_Sal_Txt2    (6,{h1})
    print #Wage_Sal16P     (0,{h2}) edit 99,999,999.99
    print $Min_Sal_Txt3    (7,{h1})
    print #Wage_Sal25P     (0,{h2}) edit 99,999,999.99

    print $TPage           (5,158)
    page-number            (0,166)
    print $THour           (6,158)
    print $ReportTime      (0,166)
    print $TDate           (7,158)
    print $ReportDate      (0,166)

    print '='                         (+1,1,175)fill
    print $TEmpl_Name                 (+1,{c1})
    print $TWork_Days1                (,{c4})
    print $TAmount                    (,{c5a})
    print $TWage_Salary               (,{c6a})
    print $TExceed                    (,{c7a})
    print $TWage_Salary               (,{c8a})
    print $TExceed                    (,{c9a})
    print $TWage_Salary               (,{c10a})
    print $TExceed                    (,{c11a})
    print $TWage_Salary               (,{c12a})
    print $TExceed                    (,{c13a})

    print $THire_Date1                (+1,{c2})
    print $TSDI                       (,{c3a})
    print $TWork_Days2                (,{c4})
    print $TWage_Sal1T                (,{c6a})
    print $TWage_Sal1T                (,{c7a})
    print $TWage_Sal3T                (,{c8a})
    print $TWage_Sal3T                (,{c9a})
    print $Ceil_Txt2                  (,{c10a})
    print $Ceil_Txt2                  (,{c11a})
    print $Ceil_Txt3                  (,{c12a})
    print $Ceil_Txt3                  (,{c13a})
    print '='                         (+1,1,175)fill
end-heading

!**************************************
begin-procedure Select-Parameters
#debug show '*** Select-Parameters ***'
!**************************************
let $WhereEstabId = ''
BEGIN-SELECT
RC.COMPANY
RC.ESTABID
RC.GPMX_PIN_DAYS_NUM
RC.GPMX_CAPPED
RC.GPMX_FREQ_TYPE
RC.GPMX_MONTH_FROM
RC.GPMX_MONTH_THRU
RC.GPMX_BIMONTH_CD
RC.GPMX_BALANCE_YEAR
RC.CAL_RUN_ID

   let $Company   = rtrim(&RC.COMPANY, ' ')
   let $EstabId   = rtrim(&RC.ESTABID, ' ')
   let #PinNum    = &RC.GPMX_PIN_DAYS_NUM
   if $EstabId <> '' 
      let $WhereEstabId = 'AND T.ESTABID = ''' || $EstabId || ''''
   end-if
   let $Capped    = rtrim(&RC.GPMX_CAPPED, ' ')
   let $FreqType  = rtrim(&RC.GPMX_FREQ_TYPE, ' ')
     
   Evaluate $FreqType
   when = 'B'                                                 !BIMONTHLY
     let #Bimonth   = &RC.GPMX_BIMONTH_CD
     let $Bimonth   = edit(#Bimonth,'09')
     let #Year      = &RC.GPMX_BALANCE_YEAR
     let $Year      = to_char(#Year)
     Evaluate $Bimonth 
     when = '01'
        Let $BgnDt = $Year || '-' || '01' || '-' || '01'
        Let $EndDt = $Year || '-' || '02' || '-' || '01'
     break
     when = '02'
        Let $BgnDt = $Year || '-' || '03' || '-' || '01'
        Let $EndDt = $Year || '-' || '04' || '-' || '01'
     break
     when = '03'
        Let $BgnDt = $Year || '-' || '05' || '-' || '01'
        Let $EndDt = $Year || '-' || '06' || '-' || '01'
     break
     when = '04'
        Let $BgnDt = $Year || '-' || '07' || '-' || '01'
        Let $EndDt = $Year || '-' || '08' || '-' || '01'
     break 
     when = '05'
        Let $BgnDt = $Year || '-' || '09' || '-' || '01'
        Let $EndDt = $Year || '-' || '10' || '-' || '01'
     break 
     when = '06'
        Let $BgnDt = $Year || '-' || '11' || '-' || '01'
        Let $EndDt = $Year || '-' || '12' || '-' || '01'
     break   
     end-evaluate
     do dtu-month-end($EndDt, $EndDt)
     do Convert-From-DTU-Date($BgnDt,$BgnDt)
     do Convert-From-DTU-Date($EndDt,$EndDt)
   break
   when = 'C'                                                 !CALENDAR RUN ID
        Let $CalRunId = rtrim(&RC.CAL_RUN_ID, ' ')
        Do Select-CalRun-Dates
   break
   when = 'M'                                                 !MONTHLY     
       let #Year      = &RC.GPMX_BALANCE_YEAR
       let $Year      = to_char(#Year)       
       let $MonthFrom  = rtrim(&RC.GPMX_MONTH_FROM, ' ')
       let $BgnDt      = $Year  || '-' || $MonthFrom || '-01'          
       let $MonthThru  = rtrim(&RC.GPMX_MONTH_THRU, ' ')
       let $BgnDtThru  = $Year  || '-' || $MonthThru || '-01'
       do  dtu-month-end($BgnDtThru, $EndDt)
       do Convert-From-DTU-Date($BgnDt,$BgnDt)
       do Convert-From-DTU-Date($EndDt,$EndDt)
   break
   when = 'Y'                                                 !YEARLY   
       let #Year      = &RC.GPMX_BALANCE_YEAR
       let $Year      = to_char(#Year)
       let $BgnDt     = $Year  || '-01' || '-01'
       let $EndDt     = $Year  || '-12' || '-31'
       do Convert-From-DTU-Date($BgnDt,$BgnDt)
       do Convert-From-DTU-Date($EndDt,$EndDt)
   break   
   End-Evaluate

   
FROM  PS_GPMX_RC_CAP_BSE RC
WHERE RC.OPRID          = $prcs_oprid
AND   RC.RUN_CNTL_ID    = $prcs_run_cntl_id
END-SELECT
do Format-DateTime($BgnDt, $BgnDtP, {DEFDMY}, '', '')
do Format-DateTime($EndDt, $EndDtP, {DEFDMY}, '', '')
end-procedure Select-Parameters

!**************************************
begin-procedure Select-CalRun-Dates
!**************************************
BEGIN-SELECT
MIN(CRD3.PRD_BGN_DT) &MinBgnDt


   Let $BgnDt = &MinBgnDt


FROM PS_GP_CAL_RUN CR3, 
PS_GP_CAL_RUN_DTL CRD3
WHERE CR3.CAL_RUN_ID        = $CalRunId
AND   CR3.RUN_FINALIZED_IND = 'Y'
AND   CRD3.CAL_RUN_ID       = CR3.CAL_RUN_ID
AND   CRD3.CALC_TYPE        = 'P'
END-SELECT
BEGIN-SELECT
MAX(CRD4.PRD_END_DT) &MaxEndDt

   Let $EndDt = &MaxEndDt

FROM PS_GP_CAL_RUN CR4, 
PS_GP_CAL_RUN_DTL CRD4
WHERE CR4.CAL_RUN_ID        = $CalRunId
AND   CR4.RUN_FINALIZED_IND = 'Y'
AND   CRD4.CAL_RUN_ID       = CR4.CAL_RUN_ID
AND   CRD4.CALC_TYPE        = 'P'
END-SELECT
end-procedure Select-CalRun-Dates

!**************************************
begin-procedure Get-ceilings
#debug show '*** Get-ceilings ***'
!**************************************
BEGIN-SELECT
AA.GPMX_CEIL_DAY

 LET #Cap2  =  &AA.GPMX_CEIL_DAY
 
FROM PS_GPMX_IMS_QUOTA AA
WHERE AA.GPMX_IMS_BRANCH  =  '0050'  !I Y V
AND AA.EFFDT              =  (SELECT MAX (AAA.EFFDT) FROM PS_GPMX_IMS_QUOTA AAA
                              WHERE AAA.GPMX_IMS_BRANCH = AA.GPMX_IMS_BRANCH
                              AND AAA.EFFDT <= $EndDt)
END-SELECT

BEGIN-SELECT
BB.GPMX_CEIL_DAY

 LET #Cap3  =  &BB.GPMX_CEIL_DAY

FROM PS_GPMX_IMS_QUOTA BB
WHERE BB.GPMX_IMS_BRANCH  =  '0010' 
AND BB.EFFDT              =  (SELECT MAX (BBB.EFFDT) FROM PS_GPMX_IMS_QUOTA BBB
                              WHERE BBB.GPMX_IMS_BRANCH = BB.GPMX_IMS_BRANCH
                              AND BBB.EFFDT <= $EndDt)
END-SELECT

move #Cap2 to $Cap2 99
move #Cap3 to $Cap3 99
let $Min_Sal_Txt2 = 'S.M.G.D.F. (' || $Cap2 || '):'
let $Min_Sal_Txt3 = 'S.M.G.D.F. (' || $Cap3 || '):'
let $Ceil_Txt2    = '(' || $Cap2 || ' ' || $TCap || ')'
let $Ceil_Txt3    = '(' || $Cap3 || ' ' || $TCap || ')'
end-procedure Get-ceilings

!**************************************
begin-procedure Minimum-Wage
#debug show '*** Minimum-Wage ***'
!**************************************
BEGIN-SELECT
W.GPMX_MINIMUM_WAGE

   let #Wage_SalP    = &W.GPMX_MINIMUM_WAGE
   let #Wage_Sal1P   = #Wage_SalP * {YearFactor}
   let #Wage_Sal3P   = #Wage_SalP * {YearFactor} * {Cap1}
   let #Wage_Sal16P  = #Wage_SalP * {YearFactor} * #CAP2
   let #Wage_Sal25P  = #Wage_SalP * {YearFactor} * #CAP3

FROM PS_GPMX_MIN_WAGE W
WHERE W.WAGE_ZONE_MEX = '10'
AND   W.EFFDT = (SELECT MAX(W1.EFFDT) FROM PS_GPMX_MIN_WAGE W1
                 WHERE W1.WAGE_ZONE_MEX = W.WAGE_ZONE_MEX
                 AND W1.EFFDT <= $EndDt)
END-SELECT
end-procedure Minimum-Wage

!**************************************
begin-procedure Process-Main
#debug show '*** Process-Main ***'
#debug show '$EndDt: ' $EndDt
#debug show '$Company: ' $Company
#debug show '$WhereEstabId: ' $WhereEstabId
#debug show '$EstablId_Old: ' $EstablId_Old
!**************************************
let #TotalComp  = 0
BEGIN-SELECT
T.ESTABID  ()  On-Break Print=Never After=Print-Establ-Total Save=$EstablId_Old
   let $EstablId = rtrim(&T.ESTABID, ' ')
   do Find-Emplid-Job
FROM PS_ESTAB_TBL T
WHERE T.EFFDT = (SELECT MAX(T1.EFFDT) FROM PS_ESTAB_TBL T1
                 WHERE T1.ESTABID = T.ESTABID
                 AND   T1.EFFDT <= $EndDt)
AND T.COMPANY = $Company
[$WhereEstabId]
END-SELECT
do Print-Company-Total
end-procedure Process-Main

!**************************************
begin-procedure Find-Emplid-Job
#debug show '*** Find-Emplid-Job ***'
!**************************************
let #TotalEstab  = 0
let #Amount_Estb      = 0
let #Wage_Sal1T_Estb  = 0
let #Exceed_1T_Estb   = 0
let #Wage_Sal3T_Estb  = 0
let #Exceed_3T_Estb   = 0
let #Wage_Sal16T_Estb = 0
let #Exceed_16T_Estb  = 0
let #Wage_Sal25T_Estb = 0
let #Exceed_25T_Estb  = 0

BEGIN-SELECT
J.EMPLID
J.EMPL_RCD
J.EMPL_STATUS
J.DEPTID
J.SETID_DEPT
J.LOCATION
J.SETID_LOCATION
LL.ESTABID
PA.NAME_PSFORMAT

   let $Emplid      = rtrim(&J.EMPLID,' ')
   let #EmplRcd     = &J.EMPL_RCD
   let $Empl_Name   = rtrim(&PA.NAME_PSFORMAT,' ')
   let $Empl_Status = rtrim(&J.EMPL_STATUS,' ')
   let $DeptId      = rtrim(&J.DEPTID,' ')
   let $SetId_Dept  = rtrim(&J.SETID_DEPT,' ')
   let $Location    = rtrim(&J.LOCATION,' ')
   let $SetId_Loc   = rtrim(&J.SETID_LOCATION,' ')
   do Select-WorkDays
   if (#WorkDays > 0)
      do Select-Emplid-Data
      do Select-SDI
      If (#SDI > 0)
        let #TotalEstab = #TotalEstab + 1
        let #TotalComp  = #TotalComp + 1      
        do Calculate-Data
        do Print-Data
      Else
        Let $MsgString = 'Empl: ' || $Emplid || ' Empl Rcd: ' || Edit(#EmplRcd,'99') || ' #SDI: ' || Edit(#SDI,'999999.90') 
        show $MsgString
      End-If
   end-if
   
FROM PS_JOB J, 
PS_LOCATION_TBL LL, 
PS_PERSON_NAME PA
WHERE J.COMPANY   = $Company
AND   J.EFFDT     = (SELECT MAX(J1.EFFDT) FROM PS_JOB J1
                     WHERE J1.EMPLID   = J.EMPLID
                     AND   J1.EMPL_RCD = J.EMPL_RCD
                     AND   J1.EFFDT   <= $EndDt)
AND   J.EFFSEQ    = (SELECT MAX(J2.EFFSEQ) FROM PS_JOB J2
                     WHERE J2.EMPLID   = J.EMPLID
                     AND   J2.EMPL_RCD = J.EMPL_RCD
                     AND   J2.EFFDT    = J.EFFDT)
AND   LL.LOCATION = J.LOCATION
AND   LL.SETID    = J.SETID_LOCATION
AND   LL.EFFDT    = (SELECT MAX(LL1.EFFDT) FROM PS_LOCATION_TBL LL1
                     WHERE LL1.LOCATION = LL.LOCATION
                     AND   LL1.SETID    = LL.SETID
                     AND   LL1.EFFDT   <= $EndDt)
AND   LL.ESTABID  = $EstablId
AND   PA.EMPLID   = J.EMPLID
ORDER BY PA.NAME_PSFORMAT
END-SELECT
end-procedure Find-Emplid-Job

!**************************************
begin-procedure Select-Emplid-Data
!**************************************
BEGIN-SELECT
E.HIRE_DT
E.TERMINATION_DT

  let $Hire_Date   = &E.HIRE_DT
  let $Term_Date   = &E.TERMINATION_DT
  
FROM PS_PER_ORG_ASGN_VW E
WHERE E.EMPLID = $Emplid
AND E.EMPL_RCD = #EmplRcd
END-SELECT
end-procedure Select-Emplid-Data

!**************************************
begin-procedure Select-WorkDays
#debug show 'Select-WorkDays'
#debug show '$EmplId  ' $EmplId
#debug show '#PinNum  ' #PinNum
#debug show '$BgnDt   ' $BgnDt
#debug show '$EndDt   ' $EndDt
#debug show '$Company ' $Company
!**************************************

Let #WorkDays = 0
Let $QryCondG1 = 'AND (P3.ACM_THRU_DT      <=      ' || '''' || $EndDt || ''' OR P3.ACM_THRU_DT IS NULL)'
Let $QryCondG2 = 'AND (AAA.ACM_THRU_DT = P3.ACM_THRU_DT OR AAA.ACM_THRU_DT IS NULL)'
Let $QryCondG3 = 'AND (CALVAL.ACM_THRU_DT = P3.ACM_THRU_DT OR CALVAL.ACM_THRU_DT IS NULL)'
Let $QryCondM1 = ''
Let $QryCondC1 = 'AND P3.ACM_FROM_DT      >=       ' || '''' || $BgnDt || ''''
Let $QryCondC2 = ''

Evaluate $FreqType
when = 'B'                                                 !BIMONTHLY
   Let $QryCondC1 = 'AND P3.ACM_FROM_DT      =       ' || '''' || $BgnDt || ''''
break
when = 'C'                                                 !CALENDAR RUN ID
   Let $QryCondG1 = ''
   Let $QryCondG2 = ''
   Let $QryCondG3 = ''
   Let $QryCondC1 = 'AND P3.ACM_FROM_DT IN (SELECT CRD1.PRD_BGN_DT FROM PS_GP_CAL_RUN CR1, PS_GP_CAL_RUN_DTL CRD1 WHERE CR1.CAL_RUN_ID        = '
   Let $QryCondC1 = $QryCondC1 || '''' || $CalRunId || ''''
   Let $QryCondC1 = $QryCondC1 || ' AND   CR1.RUN_FINALIZED_IND = ' || '''' || 'Y' || '''' || ' AND   CRD1.CAL_RUN_ID       = CR1.CAL_RUN_ID AND   CRD1.CALC_TYPE        = ' || '''' || 'P' || '''' || ')'

   Let $QryCondG1 = 'AND P3.ACM_THRU_DT IN (SELECT CRD2.PRD_END_DT FROM PS_GP_CAL_RUN CR2, PS_GP_CAL_RUN_DTL CRD2 WHERE CR2.CAL_RUN_ID        = '
   Let $QryCondG1 = $QryCondG1 || '''' || $CalRunId || ''''
   Let $QryCondG1 = $QryCondG1 || ' AND   CR2.RUN_FINALIZED_IND = ' || '''' || 'Y' || '''' || ' AND   CRD2.CAL_RUN_ID       = CR2.CAL_RUN_ID AND   CRD2.CALC_TYPE        = ' || '''' || 'P' || '''' || ')'
   
   Let $QryCondC2 = 'AND P3.USER_KEY1        IN      (SELECT X.RUN_TYPE FROM PS_GP_RUN_TYPE X WHERE X.CALC_TYPE = ' || '''' || 'P' || '''' || ')'
break
when = 'M'                                                 !MONTHLY     
break
when = 'Y'                                                 !YEARLY   
break   
End-Evaluate

Begin-Select
SUM(P3.CALC_RSLT_VAL) &P3CALCRSLTVAL

   Let #WorkDays = &P3CALCRSLTVAL

FROM PS_GP_PYE_PRC_STAT A3
, PS_GP_PYE_SEG_STAT B3
, PS_GP_CALENDAR C3
, PS_GP_RUN_TYPE D3
, PS_GP_RSLT_ACUM P3
WHERE B3.CAL_RUN_ID     =       A3.CAL_RUN_ID 
AND B3.EMPLID           =       A3.EMPLID 
AND B3.EMPL_RCD         =       A3.EMPL_RCD 
AND B3.GP_PAYGROUP      =       A3.GP_PAYGROUP 
AND B3.CAL_ID           =       A3.CAL_ID 
AND B3.ORIG_CAL_RUN_ID  =       A3.ORIG_CAL_RUN_ID 
AND B3.PYE_CALC_STAT    >=      '50' 
AND B3.CALC_ACTION      =       'C' 
AND C3.GP_PAYGROUP      =       A3.GP_PAYGROUP
AND C3.CAL_ID           =       A3.CAL_ID
AND D3.RUN_TYPE         =       C3.RUN_TYPE
!AND D3.RUN_TYPE         =       'KY NOMINA'
AND D3.CALC_TYPE        =       'P'
AND P3.CAL_RUN_ID       =       A3.CAL_RUN_ID 
AND P3.EMPLID           =       A3.EMPLID 
AND P3.EMPL_RCD         =       A3.EMPL_RCD 
AND P3.GP_PAYGROUP      =       A3.GP_PAYGROUP 
AND P3.CAL_ID           =       A3.CAL_ID 
AND P3.ORIG_CAL_RUN_ID  =       A3.ORIG_CAL_RUN_ID 
AND P3.RSLT_SEG_NUM     =       B3.RSLT_SEG_NUM
[$QryCondC1]
[$QryCondG1]
[$QryCondC2]
AND A3.RSLT_VER_NUM     =       1
AND A3.RSLT_REV_NUM     =       1
AND P3.EMPLID           =       $EmplId
AND P3.PIN_NUM          =       #PinNum
AND A3.CAL_RUN_ID = (SELECT AAS.CAL_RUN_ID 
                     FROM PS_GP_CAL_RUN AAS 
                     WHERE AAS.RUN_FINALIZED_TS = (SELECT MAX(AATS.RUN_FINALIZED_TS) 
                                                   FROM PS_GP_CAL_RUN AATS
                                                   WHERE AATS.CAL_RUN_ID IN (SELECT AAA.CAL_RUN_ID 
                                                                             FROM PS_GP_RSLT_ACUM  AAA
                                                                             WHERE AAA.ACM_FROM_DT = P3.ACM_FROM_DT
                                                                             [$QryCondG2]
                                                                             [$QryCondM1]
                                                                             AND AAA.EMPLID = P3.EMPLID
                                                                             AND AAA.PIN_NUM = P3.PIN_NUM)
                                                   )
                     )
AND (A3.CAL_ID = (SELECT AA3.CAL_ID 
                  FROM PS_GP_CAL_RUN_DTL AA3 
                  WHERE AA3.CAL_RUN_ID = P3.CAL_RUN_ID 
                  AND AA3.CAL_FINAL_TS = (SELECT MAX(CAL_FINAL_TS)
                                          FROM PS_GP_CAL_RUN_DTL
                                          WHERE CAL_RUN_ID = AA3.CAL_RUN_ID
                                          AND CAL_ID IN (SELECT CALVAL.CAL_ID 
                                                         FROM PS_GP_RSLT_ACUM CALVAL 
                                                         WHERE CALVAL.EMPLID = P3.EMPLID
                                                         AND CALVAL.EMPL_RCD = P3.EMPL_RCD 
                                                         AND CALVAL.PIN_NUM = P3.PIN_NUM 
                                                         AND CALVAL.ACM_FROM_DT = P3.ACM_FROM_DT 
                                                         [$QryCondG3])
                                          )
                  )                                          
     OR (A3.CAL_ID = (SELECT DISTINCT OF2.CAL_ID
                      FROM PS_GP_PYE_CAL OF2
                      WHERE OF2.EMPLID = A3.EMPLID
                      AND OF2.CAL_RUN_ID = A3.CAL_RUN_ID
                      AND OF2.EMPL_RCD = A3.EMPL_RCD
                      AND OF2.GP_PAYGROUP = A3.GP_PAYGROUP
                      AND PRD_BGN_DT >= P3.ACM_FROM_DT
                      AND PRD_END_DT <= P3.ACM_THRU_DT)
        AND A3.CAL_RUN_ID = (SELECT OF1.CAL_RUN_ID
                             FROM PS_GP_CAL_RUN OF1
                             WHERE OF1.CAL_RUN_ID = A3.CAL_RUN_ID
                             AND OFF_CYCLE = 'Y')
                       ))
End-Select  
End-procedure Select-WorkDays

!**************************************
begin-procedure Calculate-Data
#debug show '*** Calculate-Data ***'
#debug show '#SDI ' #SDI
!**************************************
   let #Amount = #SDI * #WorkDays
   let #Salary_Days = #WorkDays * #Wage_SalP

   if ((#Salary_Days) <= #Amount)
      let #Wage_Sal1T = #Salary_Days
   else
      let #Wage_Sal1T = #Amount
   end-if
   let #Exceed_1T = #Amount - #Wage_Sal1T
   if #Exceed_1T < 0
      let #Exceed_1T = 0
   end-if
   
   if ((#Salary_Days * {Cap1}) <= #Amount)
      let #Wage_Sal3T = #Salary_Days * {Cap1}
   else
      let #Wage_Sal3T = #Amount
   end-if
   let #Exceed_3T = #Amount - #Wage_Sal3T
   if #Exceed_3T < 0
      let #Exceed_3T = 0
   end-if

   if ((#Salary_Days * #CAP2) <= #Amount)
      let #Wage_Sal16T = #Salary_Days * #CAP2
   else
      let #Wage_Sal16T = #Amount
   end-if
   let #Exceed_16T = #Amount - #Wage_Sal16T
   if #Exceed_16T < 0
      let #Exceed_16T = 0
   end-if

   if ((#Salary_Days * #CAP3) <= #Amount)
      let #Wage_Sal25T = #Salary_Days * #CAP3
   else
      let #Wage_Sal25T = #Amount
   end-if
   let #Exceed_25T = #Amount - #Wage_Sal25T
   if #Exceed_25T < 0
      let #Exceed_25T = 0
   end-if
end-procedure Calculate-Data

!**************************************
begin-procedure Print-Data
#debug show '*** Print-Data ***'
#debug show '#SDI ' #SDI
!**************************************

do Format-DateTime($Hire_Date, $Hire_DateP, {DEFDMY}, '', '')

print $Empl_Name       (+1,{c1},30)
print #WorkDays        (0,{c4})  edit 999999
print #Amount          (0,{c5})  edit 99,999,999.99
print #Wage_Sal1T      (0,{c6})  edit 99,999,999.99
print #Exceed_1T       (0,{c7})  edit 99,999,999.99
print #Wage_Sal3T      (0,{c8})  edit 99,999,999.99
print #Exceed_3T       (0,{c9})  edit 99,999,999.99
print #Wage_Sal16T     (0,{c10}) edit 99,999,999.99
print #Exceed_16T      (0,{c11}) edit 99,999,999.99
print #Wage_Sal25T     (0,{c12}) edit 99,999,999.99
print #Exceed_25T      (0,{c13}) edit 99,999,999.99
print $Hire_DateP      (+1,{c2})
print #SDI             (0,{c3})  edit 99,999,999.99

let #Amount_Estb      = #Amount_Estb + #Amount
let #Wage_Sal1T_Estb  = #Wage_Sal1T_Estb + #Wage_Sal1T
let #Exceed_1T_Estb   = #Exceed_1T_Estb + #Exceed_1T
let #Wage_Sal3T_Estb  = #Wage_Sal3T_Estb + #Wage_Sal3T
let #Exceed_3T_Estb   = #Exceed_3T_Estb + #Exceed_3T
let #Wage_Sal16T_Estb = #Wage_Sal16T_Estb + #Wage_Sal16T
let #Exceed_16T_Estb  = #Exceed_16T_Estb + #Exceed_16T
let #Wage_Sal25T_Estb = #Wage_Sal25T_Estb + #Wage_Sal25T
let #Exceed_25T_Estb  = #Exceed_25T_Estb + #Exceed_25T
end-procedure Print-Data

!**************************************
begin-procedure Print-Establ-Total
!**************************************
if (#TotalEstab > 0)
   uppercase $TTotal1
   print $TTotal1                    (+2,{t1})
   print $EstablId                   (0,{c4})
   print $TTotal_Payees              (+1,{t1})
   print #TotalEstab                 (0,{c3}) edit 9,999,999

   print #Amount_Estb                (0,{c5})  edit 99,999,999.99
   print #Wage_Sal1T_Estb            (0,{c6})  edit 99,999,999.99
   print #Exceed_1T_Estb             (0,{c7})  edit 99,999,999.99
   print #Wage_Sal3T_Estb            (0,{c8})  edit 99,999,999.99
   print #Exceed_3T_Estb             (0,{c9})  edit 99,999,999.99
   print #Wage_Sal16T_Estb           (0,{c10})  edit 99,999,999.99
   print #Exceed_16T_Estb            (0,{c11})  edit 99,999,999.99
   print #Wage_Sal25T_Estb           (0,{c12}) edit 99,999,999.99
   print #Exceed_25T_Estb            (0,{c13}) edit 99,999,999.99
   print ' '                         (+2,{c1})
end-if

let #Empl_Count_Comp  = #Empl_Count_Comp + #TotalEstab
let #Amount_Comp      = #Amount_Comp + #Amount_Estb
let #Wage_Sal1T_Comp  = #Wage_Sal1T_Comp + #Wage_Sal1T_Estb
let #Exceed_1T_Comp   = #Exceed_1T_Comp + #Exceed_1T_Estb
let #Wage_Sal3T_Comp  = #Wage_Sal3T_Comp + #Wage_Sal3T_Estb
let #Exceed_3T_Comp   = #Exceed_3T_Comp + #Exceed_3T_Estb
let #Wage_Sal16T_Comp = #Wage_Sal16T_Comp + #Wage_Sal16T_Estb
let #Exceed_16T_Comp  = #Exceed_16T_Comp + #Exceed_16T_Estb
let #Wage_Sal25T_Comp = #Wage_Sal25T_Comp + #Wage_Sal25T_Estb
let #Exceed_25T_Comp  = #Exceed_25T_Comp + #Exceed_25T_Estb

let #TotalEstab  = 0
let #Amount_Estb      = 0
let #Wage_Sal1T_Estb  = 0
let #Exceed_1T_Estb   = 0
let #Wage_Sal3T_Estb  = 0
let #Exceed_3T_Estb   = 0
let #Wage_Sal16T_Estb = 0
let #Exceed_16T_Estb  = 0
let #Wage_Sal25T_Estb = 0
let #Exceed_25T_Estb  = 0
end-procedure Print-Establ-Total

!**************************************
begin-procedure Print-Company-Total
!**************************************
if (#TotalComp > 0)
   uppercase $TTotal2
   print $TTotal2                    (+2,{t1}) bold
   print $Company                    (0,{c4})  bold
   uppercase $CompanyName
   print $CompanyName                (0,+2)    bold
   print $TTotal_Payees              (+1,{t1})
   print #Empl_Count_Comp            (0,{c3})    edit 9,999,999
   
   print #Amount_Comp                (0,{c5})  edit 99,999,999.99
   print #Wage_Sal1T_Comp            (0,{c6})  edit 99,999,999.99
   print #Exceed_1T_Comp             (0,{c7})  edit 99,999,999.99
   print #Wage_Sal3T_Comp            (0,{c8})  edit 99,999,999.99
   print #Exceed_3T_Comp             (0,{c9})  edit 99,999,999.99
   print #Wage_Sal16T_Comp           (0,{c10})  edit 99,999,999.99
   print #Exceed_16T_Comp            (0,{c11})  edit 99,999,999.99
   print #Wage_Sal25T_Comp           (0,{c12}) edit 99,999,999.99
   print #Exceed_25T_Comp            (0,{c13}) edit 99,999,999.99
end-if 

let #Empl_Count_Comp  = 0
let #Amount_Comp      = 0
let #Wage_Sal1T_Comp  = 0
let #Exceed_1T_Comp   = 0
let #Wage_Sal3T_Comp  = 0
let #Exceed_3T_Comp   = 0
let #Wage_Sal16T_Comp = 0
let #Exceed_16T_Comp  = 0
let #Wage_Sal25T_Comp = 0
let #Exceed_25T_Comp  = 0
end-procedure Print-Company-Total

!**************************************
begin-procedure Select-SDI
#debug show '$Capped ' $Capped
!**************************************
let #SDI = 0
BEGIN-SELECT
S.GPMX_SDI_FIX
S.GPMX_SDI_VAR
S.GPMX_MAX_EM

  let #SDI_FIX=&S.GPMX_SDI_FIX
  let #SDI_VAR=&S.GPMX_SDI_VAR

  If $Capped = 'Y'
    let #SDI = &S.GPMX_MAX_EM
  Else  
    let #SDI = (#SDI_FIX + #SDI_VAR)
  End-If
  
FROM PS_GPMX_SDI_WA S
WHERE S.EMPLID = $Emplid
AND   S.EMPL_RCD = #EmplRcd
AND   S.EFFDT = (SELECT MAX(S1.EFFDT) FROM PS_GPMX_SDI_WA S1
                 WHERE S1.EMPLID = S.EMPLID
                 AND S1.EMPL_RCD = S.EMPL_RCD
                 AND S1.GPMX_SDI_FIX <> 0
                 AND S1.EFFDT <= $EndDt)
END-SELECT
end-procedure Select-SDI

!**************************************
begin-procedure Report-Translation
!**************************************
do Init_Report_Translation ('GPMXIM12', $prcs_language_cd)
do Append_Report_Translation ('GPMXIM12')
do Get_Field_Information ('GPMXIM12', 'AMOUNT',            $TAmount,            #DW)
do Get_Field_Information ('GPMXIM12', 'COMPANY',           $TCompany,           #DW)
do Get_Field_Information ('GPMXIM12', 'DATE',              $TDate,              #DW)
do Get_Field_Information ('GPMXIM12', 'EMPLID1',           $TEmplid1,           #DW)
do Get_Field_Information ('GPMXIM12', 'EMPLID2',           $TEmplid2,           #DW)
do Get_Field_Information ('GPMXIM12', 'EMPL_NAME',         $TEmpl_Name,         #DW)
do Get_Field_Information ('GPMXIM12', 'EXCEED',            $TExceed,            #DW)
do Get_Field_Information ('GPMXIM12', 'HIRE_DATE1',        $THire_Date1,        #DW)
do Get_Field_Information ('GPMXIM12', 'HOUR',              $THour,              #DW)
do Get_Field_Information ('GPMXIM12', 'PAGE',              $TPage,              #DW)
do Get_Field_Information ('GPMXIM12', 'SDI',               $TSDI,               #DW)
do Get_Field_Information ('GPMXIM12', 'REPORT',            $TReport,            #DW)
do Get_Field_Information ('GPMXIM12', 'TITLE',             $TTitle,             #DW)
do Get_Field_Information ('GPMXIM12', 'TOTAL1',            $TTotal1,            #DW)
do Get_Field_Information ('GPMXIM12', 'TOTAL2',            $TTotal2,            #DW)
do Get_Field_Information ('GPMXIM12', 'TOTAL_PAYEES',      $TTotal_Payees,      #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SAL',          $TWage_Sal,          #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SAL1',         $TWage_Sal1,         #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SAL1T',        $TWage_Sal1T,        #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SAL3',         $TWage_Sal3,         #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SAL3T',        $TWage_Sal3T,        #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_SALARY',       $TWage_Salary,       #DW)
do Get_Field_Information ('GPMXIM12', 'WORK_DAYS1',        $TWork_Days1,        #DW)
do Get_Field_Information ('GPMXIM12', 'WORK_DAYS2',        $TWork_Days2,        #DW)
do Get_Field_Information ('GPMXIM12', 'WAGE_CAP',          $TCap,               #DW)
do Get_Field_Information ('GPMXIM12', 'FROM',              $TFrom,              #DW)
do Get_Field_Information ('GPMXIM12', 'TO',                $TTo,                #DW)
do Get_Field_Information ('GPMXIM12', 'ESTABLISHMENT',     $TEstab,             #DW)
end-procedure Report-Translation


#Include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'sqrtrans.sqc'
