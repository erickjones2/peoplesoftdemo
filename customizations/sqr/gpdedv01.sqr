!***********************************************************************
!  GPDEDV01:  Create DEUEV-Report Files for Floppy Disk                *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2014/07/07:10:31:48                                 !
!       $Release:  HR92                                                !
!      $Revision:  106                                                 !
!                                                                      *
!***********************************************************************
! changed for DEUEV-QK 2004, wdu 20040608
! wdu05b6: added code for report distribution, including order by
! wdu05b6: changed ClerkName for Begleitzettel
! wdu05b7: changed back header formatting
! wdu05b7: added fixes for the multiple-employment issue
! wdu05-891b1: codeline merge 2005-05-12 - unch881
! wdu-881-05b8: cleanup for changes of status fields and BAEGV, added $X34 and $X35 for clearness
! wdu05-881b9 updated modid
! wdu05-881b9 -- replaced pde_sex with pde_name_prefix, so that the correct prefix is printed when sex is unknown
! wdu05-881b9 changed address logic for DSKO and Begleitzettel and address layout
! wdu05-881jw06 changed output filenames, fixed Umlaut-handling in DSKO
! wdu05-881jw06 new numbering method for external filenames only
! wdu06-881kug fixed incorrect modid
! wdu06-890b4 fixed Nations-Duevo issue for R9
! wdu06-881b11 removal of DEUEV license number (ICE 1496731000)
! wdu06-881b11 do not finalize disks without data (ICE 1518278000)
! wdu06-881b11 added more special char conversions
! wdu06-881b11 display a hint on the number of non finalized rows
! wdu05-881b11 updated modid
! wdu06-900b0 platform fix: COUNT(DSCx.EMPLID) into COUNT(*)
! wdu06-890b7 updated the address printing logic
! wdu06-890b7 fixed PDATAN1 and PDATAD1 join
! rh07-890b9 add new address functionality (BWNAC)
! rh07 890B09 - Print EMPLID and EMPL_RCD in PDF and DEUEV files
! rh07 890B09 - remove address join from main driver sql
! mak07 89B10- deuev-ice 1549960000 DV01 retrieving&Printing  $DSME_GPDE_SI_BAEGV1- vaues 1,2
! jjj07 89b10- DEUEV changes to print new MOD-ID for 07
! adj07-89B11-1680582000 : 06th Sep 07 Issues with report layout.
! jjj-89b13-1738246000 : New Data Record DEUEV DSKO Version 2
! adj08-89B14-1755388000 : 03th Apr 08 Pdf nnnnnnnn_bglxxx.pdf is not longer required.
! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock.
! adj09-89B17-1855449000 : 26 Mar 09 Tax Update 2009 - Report DSME 184 with "N"
! sgo09-89B17-1766736000 : 29 May 09 - Fixed DEÜV split file issues.
! sgo09-89B17-1890237000 : 17 Jun 09 - if Pension Receiver VERFAHRENSMERKMAL = AGBVD.
! sgo09-89B17-1893621000 : 19 Jun 09 - Detection of Pension Insurance Provider Change
! adj09-89b19-1847951000 : Enable Multiple SI receivers
! adj10-90updE-1974433000 : AGBVD was reported for normal receivers
! byar11-90updE-12434166 : INFORMATION FOR DSKO DIGIT 412 has to be CHANGED PARTIALLY
! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2
! byar11-90POC-13385958: Transfer of Employer Address Information
! byar11-90POC-13385958: new DBKV Block for Multiple Employment
! byar11-92Pum8-19013970: TAX Update 2013 AAG


! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20061020-1100 wdu06-881b11==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20061122-1600 rhe08-TaxUpdate2007==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20070227-0942 8.9 rhB09 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20070906-0942 8.9 adjB11 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20080305 8.9 jjjb13 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20080403-0942  adj08-89B14 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20081218 sgo08-89B17 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20090326 adj09-89B17 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20090528 sg09-89B17 1766736000 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20090617 sg09-89B17 1890237000 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20090619 sg09-89B17 1893621000 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20091021 adj09-89B19 1847951000 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20100528 adj10-90updE 1974433000 ==='
! #define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20110530 sgo11-2011-E ==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20111118 bya11-2011-POC ==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20120306 byarn-2012-B ==='
#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20140627 byarn-PUM 8==='


!
#include 'setenv.sqc' !Set environment
#define TEST


begin-REPORT
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main
  do Update_Deuev_Run_Status
   
  do GP-ePay-Control ! if self service requested
  do Stdapi-Term

end-REPORT

!wdu05b6: changed printer setup to gpdepo01.sqc for bigger left margin
! -- #include 'setup31.sqc' !Printer and page-size initialization  'setup01.sqc'
#include 'gpdepo01.sqc' !Printer and page-size initialization  'setup01.sqc' wide margin

!****************************************************************************************
begin-procedure Get_BegDT_EndDt
begin-select
DTL1.PRD_BGN_DT &Begin_Dt
DTL1.PRD_END_DT &End_Dt
from PS_GP_CAL_RUN_DTL DTL1
where DTL1.CAL_RUN_ID = $Run_Id
    and DTL1.CAL_SEQ_NUM = (select max(CAL_SEQ_NUM) from PS_GP_CAL_RUN_DTL DTL2
    where DTL2.CAL_RUN_ID = DTL1.CAL_RUN_ID)
end-select
end-procedure
!****************************************************************************************
begin-procedure InsertTo_PrcsSt
do Get_BegDT_EndDt
do ConvertToComponents($AsOfToday,$tmp_y,$tmp_m,$tmp_d)
let $Stch = $tmp_y  || $tmp_m ||  $tmp_d || '0000'
do Format-DateTime($Stch, $End_DT_1, {DEFCMP},'','native')

if rtrim(&Begin_Dt, ' ') = ''
   let $Beg_Dt = $End_DT_1
else
   let $Beg_Dt = &Begin_Dt
end-if

if rtrim(&End_Dt, ' ') = ''
   let $End_Dt = $End_DT_1
else
   let $End_Dt = &End_Dt
end-if


! added 14.10.2003 ice1412 02
begin-sql
DELETE FROM PS_GPDE_DV_PRCS_ST where PRCSINSTANCE=#prcs_process_instance
and GPDE_DV_RCVER_ID = $Prov_Type
end-sql

!adj09- Multi-SI
move #Datei_Nummer to $Datei_Nummer 099

!AAG
move #aag_file_Nbr to $aag_file_Nbr 099

begin-sql
insert into PS_GPDE_DV_PRCS_ST(PRCSINSTANCE,CAL_RUN_ID,FROM_DATE,TO_DATE,
            ASOFDATE,GPDE_DV_IMMED_IND,GPDE_DV_RUN,GPDE_DV_RCVER_ID,GPDE_DV_SENDER_ID,
                GPDE_RC_FILE_NBR,GPDE_RC_AAG_FILNBR,GPDE_RC_DUEVO_CLS )
 values (#prcs_process_instance,$Run_Id,$Beg_Dt,$End_Dt, $End_DT_1,' ',0,$Prov_Type,
        $Absender_Nbr,#Datei_Nummer,#aag_file_Nbr,$GPDE_RC_DUEVO_CLS)
end-sql

end-procedure
!****************************************************************************************
begin-procedure Init-Report
  show {gpdeversionstamp}

#define CURRENCY_DM 'DEM'
#define CURRENCY_EURO 'EUR'

! fuer VOSZ und NCSZ:
#define VERFAHRENSMERKMAL 'AGDEU'

! fuer DSME
#define DSME_VERFAHREN 'DEUEV'
! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2
#define DSME_VERSION '01'


#define DSME_FEHLER_KENNZ '0'
#define AKTENZEICHEN_KK '                    '
#define BBNR_ABRECHNUNGSSTELLE '               '
#define MM_KNV_SEE 'N'
#define MM_SVA 'N'
#define MM_VERGABE_RUECKMELDUNG 'N'
#define MM_RUECKMELDUNG_GERINGFUEGIG 'N'
#define RESERVE1 '  ' !Sozialversicherungsträger
#define RESERVE2 ' '   !Meldeverfahren
#define RESERVE3 '    ' !Rentenversicherung (4 chars)

! fuer DBME
#define ZAHL_TAGE '00'
! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - increase file length
!#define MAX_REC_LEN 826
!#define MAX_REC_LEN 1890
#define MAX_REC_LEN 2475
#define REC_LEN_VOSZ 105
#define REC_LEN_DSME 190
#define REC_LEN_DBME 46
#define REC_LEN_DBNA 125
#define REC_LEN_DBGB 117
#define REC_LEN_DBAN 133
#define REC_LEN_DBEU 27
#define REC_LEN_DBSO 15
#define REC_LEN_NCSZ 63
#define REC_LEN_DSKO 410

!AAG
#define DSER_VERFAHREN 'AAGER'
#define DSER_VERSION '02'
#define DSER_FEHLER_KENNZ '0'
!VOSZ und NCSZ:
#define VERFAHRENSMERKMAL_AAG 'AGAAG'
!AAG rec lengths
#define AAG_MAX_REC_LEN 2475
#define REC_LEN_DSER 223
#define REC_LEN_DBAU 93
#define REC_LEN_DBBT 63
#define REC_LEN_DBZU 83
#define REC_LEN_DBBV 174
#define REC_LEN_DBAA 321


! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Define DBUV datablock length
! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - increase datablock length=20 + ANUV * 71
!#define REC_LEN_DBUV 173
#define REC_LEN_DBUV 659
! byarn12 New Datablocks DSBD and DBKV
#define REC_LEN_DSBD 536 !tax upd 2013
! Changed length GU TXUPD2013
#define REC_LEN_DBKV 83

#define VERSION_VOR '01'
#define VERSION_NACH '01'
#define VERSION_VOR_AAG '02'
#define VERSION_NACH_AAG '02'
#define VERSION_DSKO '01'    ! jjj-89b13-1738246000
#define VERSION_DSKO_AAG '02' 
#define CONFIRM_ERR_FREE 'N' ! jjj-89b13-1738246000
#define CONFIRM_EMAIL 'J'    ! BYAR-90UPDE-12434166
#define CONFIRM_EMAIL_DASBV 'K'    ! BYAR-90UPDE-12434166

! --------------------------------------------
! Defines for columns and rows
! --------------------------------------------
!
!2004 Changed for Bundle2
#define mcol1 3
#define mcol2 82
#define mcol3 104
#define mcol4 36
#define mcol5 21

#define mcol_ee_data         3
#define mcol_sofortmeldung  65
#define mcol_namensaend     85
#define mcol_staatsang     106
#define mcol_end_dt        18
#define mcol_region_west   114
#define mcol_kv            9
#define mcol_rv            25
#define mcol_av            41
#define mcol_pv            57
#define mcol_rv_text       18
#define mcol_av_text       34
#define mcol_pv_text       50

#define mcol_cit_country_2  74
#define col1 3
#define col5  70        ! 87
#define col5b 100
#define b2 22
#define b3 52
#define b4 82
#define colDist 20

#define mcol_curr_dem 58
#define mcol_curr_eur 62
#define mcol_right_margin 113
#define mcol_rvnr_dbeu 45

!------------------------------------------------------------------------------

  move 'GPDEDV01' to $ReportID
  move 'Meldebescheinigung zur Sozialversicherung für den Arbeitnehmer gemäß §25 DEÜV' to $ReportTitle
  move ' ' to $ReportTitle2
  move 'WICHTIGES DOKUMENT - SORGFÄLTIG AUFBEWAHREN!!' to $FootLine


  display '-------------------------------------------------------------------'
  display ''
  display 'Erstellen einer Datensatz-Datei für DEÜV'
  display ''
  display 'Dieses Program erstellt bei erfolgreichem Durchlauf'
  display 'eine Datensatzdatei namens EDUA0nnn (abgeschlossene Echtdaten)'
  display 'oder eine Datensatzdatei namens EDUA0nnn_bbbbbbbb.txt (Testlauf).'
  display ' '
  display 'Versenden Sie bitte nur Echtdaten mit der Dakota Software.'
  display ''
  display '-------------------------------------------------------------------'

  do Stdapi-Init

  if $prcs_process_instance = ''
        !wdu-qk04 added for customer process
        input $PRCS_OPRID 'OPRID '
        input $PRCS_RUN_CNTL_ID 'RUNCONTROL '
        ! wdu05b6: 'input $outputdir' had to go to the end of the procedure
        !
        do Get-RunCntl-Data($PRCS_OPRID, $PRCS_RUN_CNTL_ID)
        let $LANGUAGE_CD = 'GER'
        let $CURR_LANGUAGE_CD = 'GER'
  else
     do Get-RunCntl-Data($prcs_oprid, $prcs_run_cntl_id)
  end-if

  ! wdu05-881jw06: new logic for external file numbers, like GPDESI10
  do GetCurrentDakotaFileNumber
  
  if #Datei_Nummer = 0
     let #Datei_Nummer = 1
  end-if

  move #Datei_Nummer to $Datei_Nummer 099
  move #DakotaNummer to $DakotaNummer 099

  let #RecordCounter = 0
  let #SpaceCounter = 0
  let #DSBD_FLAG = 0

  !AAG
  show '#aag_file_Nbr ' #aag_file_Nbr
  let #aag_file_Nbr = 1 !test
  if #aag_file_Nbr = 0
     let #aag_file_Nbr = 1
  end-if
  move #aag_file_Nbr to $aag_file_Nbr 099
  
  let #RecordCounter_AAG = 0
  let #SpaceCounter_AAG = 0
  let #AAG_FLAG = 0


  show $Clerk_EMPLID
  show $Clerk_NAME
  show $Clerk_PHONE
  show $Clerk_FAX
  show $Clerk_EMAIL

  !*********************


   move 0 to #Vol_Number
   !AAG
   move 0 to #Vol_Number_AAG

   ! wdu05-881jw06 Diskette and other media no longer supported, set available space to BIG
   let #MaxSpacePerDisk = 8000000000

   create-array name=begleit size = 100

      field = Band:number
      field = Date:char='1900-01-01'
      field = Nummer:number
      field = Summe:number

   let #row = 0

    let $FileDir = '{FILEPREFIX}'
   !display 'File Directory --->' noline
   !display $FileDir
  do Get-ReqParam
  let $FileExtension = '.' || $OUTDESTFORM

  ! show  'new proc'
  do GetFileExtension($RQ.OUTDESTFORMAT, $FileExtension)
  do GetOutputDir($RUNLOCATION,$OUTDESTTYPE,$OUTDEST,$outputdir)
  ! show 'Loc: ' $RUNLOCATION
  ! show 'Dest: ' $OUTDESTTYPE
  !  show 'Dest' $OUTDEST
  ! show 'Ext: ' $FileExtension
  ! show 'Dir1: ' $outputdir
  let $FileDir = $outputdir
  ! show 'Dir: ' $FileDir


  if $prcs_process_instance = ''
        ! wdu05b6: 'input $outputdir' had to go to the end of the procedure
        ! otherwise no override of GetOutputDir is possible
        input $outputdir
  end-if

   !rh 8.9 tax update 2007 -  SelfServiceslip
   do GP-ePay-Init

end-procedure Init-Report


!************************************************
begin-procedure Init-Layout

end-procedure
!************************************************
!2004 Changed for Bundle2
begin-heading  5
  ! wdu05b6: shifted title up 3 lines
  ! wdu05b7: reversed the shift, because customer logo is overwritten
  alter-printer
  point-size = 10

  print $ReportTitle                    (4,{mcol1}) bold
  print $ReportTitle2                   (5,{mcol1}) bold

  alter-printer
  point-size = 7.2

end-heading

!************************************************
begin-footing  2

  print $FootLine                       (1) center bold

end-footing





!****************************************************************************************
begin-procedure Get_Type_Options

let $Name_Type       = ''
let $Addr_Type       = ''
let $Phone_Type      = ''
let $Email_Type      = ''
let $BirthName_Type  = ''

begin-select distinct
INST.NAME_TYPE
INST.ADDRESS_TYPE
INST.PHONE_TYPE
INST.E_ADDR_TYPE
INST.GPDE_BIRTH_NM_TYPE

   let $Name_Type      = &INST.NAME_TYPE
   let $Addr_Type      = &INST.ADDRESS_TYPE
   let $Phone_Type     = &INST.PHONE_TYPE
   let $Email_Type     = &INST.E_ADDR_TYPE
   let $BirthName_Type = &INST.GPDE_BIRTH_NM_TYPE

from PS_GPDE_AL_INSTALL INST
end-select
end-procedure
!**********************************************************************************************




begin-procedure Get-ReqParam

Begin-Select
RQ.PRCSINSTANCE
RQ.PRCSTYPE
RQ.PRCSNAME
RQ.RUNLOCATION
RQ.OPSYS
RQ.DBTYPE
RQ.DBNAME
RQ.OPRID
RQ.BEGINDTTM
RQ.ENDDTTM
RQ.RUNSTATUS
RQ.RUNCNTLID
RQ.OUTDESTTYPE
RQ.OUTDESTFORMAT
RQ.TIMEZONE
RQ.SERVERNAMERUN
OD.PRCSOUTPUTDIR
OD.OUTDEST
FROM PSPRCSPARMS OD , PSPRCSRQST  RQ
WHERE OD.PRCSINSTANCE  = RQ.PRCSINSTANCE
AND RQ.PRCSINSTANCE = #prcs_process_instance
End-Select

  let $OUTDEST       = rtrim(&OD.OUTDEST,' ')

  move 'RUNLOCATION'  to $FieldName
  move &RQ.RUNLOCATION to $FieldValue
  do Read-Translate-Table
  let $RUNLOCATION = rtrim(ltrim($XlatlongName,' '),' ')

  let $RQ.OUTDESTTYPE = rtrim(&RQ.OUTDESTTYPE,' ')
  let $RQ.OUTDESTFORMAT = rtrim(&RQ.OUTDESTFORMAT,' ')
  let $Process_Inst  = to_char(&RQ.PRCSINSTANCE)

  move 'OUTDESTTYPE'  to $FieldName
  move &RQ.OUTDESTTYPE to $FieldValue
  do Read-Translate-Table
  let $OUTDESTTYPE = rtrim(ltrim($XlatlongName,' '),' ')

  move 'OUTDESTFORMAT'  to $FieldName
  move &RQ.OUTDESTFORMAT to $FieldValue
  do Read-Translate-Table
  let $OUTDESTFORMAT = rtrim(ltrim($XlatlongName,' '),' ')

  evaluate $RQ.OUTDESTFORMAT
  when = '1'
    let $OUTDESTFORM = 'PDF'
    break
  when = '2'
    let $OUTDESTFORM = 'PDF'
    break
  when = '3'
    let $OUTDESTFORM = 'CSV'
    break
  when = '4'
    let $OUTDESTFORM = 'HP'
    break
  when = '5'
    let $OUTDESTFORM = 'HTM'
    break
  when = '6'
    let $OUTDESTFORM = 'LP'
    break
  when = '7'
    let $OUTDESTFORM = 'WKS'
    break
  when = '8'
    let $OUTDESTFORM = 'XLS'
    break
  when = '9'
    let $OUTDESTFORM = 'DOC'
    break
  when = '10'
    let $OUTDESTFORM = 'PS'
    break
  when = '11'
    let $OUTDESTFORM = 'RPT'
    break
  when = '12'
    let $OUTDESTFORM = 'RTF'
    break
  when = '13'
    let $OUTDESTFORM = 'SPF'
    break
  when = '14'
    let $OUTDESTFORM = 'TXT'
    break
  when = '15'
    let $OUTDESTFORM = 'PDF'
    break
  when = '16'
    let $OUTDESTFORM = 'PDF'
    break
  when-other
    let $OUTDESTFORM = 'PDF'
    break
  end-evaluate
end-procedure
!************************************************

begin-procedure Close-and-Open-Next

!show 'XX-Close-and-Open Rcvr: ' $CHK_RCVER_ID ' ' $GPDE_RC_DUEVO_CLS

! The current DAKOTA file will be closed and a new opened
do Get-Provider-Address($Prov_Type, $Empf_Nbr, $Empfaenger, $Address1_Other,
                         $Postal_Other, $City_Other, $Krankenkasse)

do Get_Receiver_Name

! Open new DAKOTA-File - procedure Open-File closes also the current one
if rtrim($Prov_Type,' ') <> ''
   do Open-File
   do DEUV-Start-Record
   let #SpaceCounter = #SpaceCounter + {REC_LEN_VOSZ}
   do DEUV-Dsko
   let #SpaceCounter = #SpaceCounter + {REC_LEN_DSKO}
   
   if #DSBD_FLAG = 0 
     if &PROV_DV_RCVER_ID <> '17625773'
       !Create DSBD Block
       do DEUV-Start-Record-DSBD
       let #SpaceCounter = #SpaceCounter + {REC_LEN_DSBD}
       let #DSBD_FLAG = 1
     end-if
   end-if
   
end-if

end-procedure

begin-procedure Close-and-Open-Next-AAG

! The current DAKOTA file will be closed and a new opened
do Get-Provider-Address($Prov_Type, $Empf_Nbr, $Empfaenger, $Address1_Other,
                         $Postal_Other, $City_Other, $Krankenkasse)
do Get_Receiver_Name

! Open new DAKOTA-File - procedure Open-File closes also the current one
if rtrim($Prov_Type,' ') <> ''
   do Open-File-AAG
   do AAG-Start-Record
   let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_VOSZ}
   do AAG-Dsko
   let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_DSKO}  
end-if

end-procedure
!************************************************
begin-procedure Next-Provider
!adj09- Multi-SI: Triggered by the main loop in Process-Main1 when Receiver id changes
! The current DAKOTA file will be closed and a new opened
let $Prov_Type = &PROV_DV_RCVER_ID
let $Print = 'Y'

 #DEBUG SHOW ' Next-Provider:  &PROV_DV_RCVER_ID ' &PROV_DV_RCVER_ID
do GetInternalFileNumber($Prov_Type, $prcs_oprid, $prcs_run_cntl_id, #Datei_Nummer, $Datei_Nummer)

move #Cur_Receiver to $Cur_Receiver 99

let #wrong_1st_run = 0
if #Cur_Receiver = 1
   let #Cur_Receiver = #Cur_Receiver + 1
   if $CHK_RCVER_ID <> $Prov_Type
      let #wrong_1st_run = 1
! in this case close the already opened file and switch to the first active Receiver
      let $NCSZ_EmpfNr  = $Prov_Type
      let $CHK_RCVER_ID = $Prov_Type
      do Close-and-Open-Next
   else
      do Open-File
   end-if
else
! Next Receiver is processed
  do Get-Provider-Address($Prov_Type, $Empf_Nbr, $Empfaenger, $Address1_Other,
                          $Postal_Other, $City_Other, $Krankenkasse)
  let $NCSZ_EmpfNr  = $CHK_RCVER_ID
  let $CHK_RCVER_ID = $Prov_Type
  do Get_Receiver_Name

! Open new DAKOTA-File - procedure Open-File closes also the current one
  if rtrim($Prov_Type,' ') <> ''
     do Open-File
     do DEUV-Start-Record
     let #SpaceCounter = #SpaceCounter + {REC_LEN_VOSZ}
     do DEUV-Dsko
     let #SpaceCounter = #SpaceCounter + {REC_LEN_DSKO}
     
     if #DSBD_FLAG = 0 
      if &PROV_DV_RCVER_ID <> '17625773'
       !Create DSBD Block
       do DEUV-Start-Record-DSBD
       let #SpaceCounter = #SpaceCounter + {REC_LEN_DSBD}
       let #DSBD_FLAG = 1
      end-if
     end-if
  end-if

! add already for next run
let #Cur_Receiver = #Cur_Receiver + 1

end-if
end-procedure
!*************************************************
begin-procedure Next-Provider-AAG

!let $Prov_Type = &PROV_DV_RCVER_ID
let $Print = 'Y'

 #DEBUG SHOW ' Next-Provider:  &PROV_DV_RCVER_ID ' &PROV_DV_RCVER_ID
 
let $Prov_Type = &DSER_RCVER_ID
 
do GetInternalFileNumber_AAG($Prov_Type, $prcs_oprid, $prcs_run_cntl_id, #aag_file_Nbr, $aag_file_Nbr)
!show 'next provider-AAG- #aag_file_Nbr ' #aag_file_Nbr
move #Cur_Receiver to $Cur_Receiver 99
!show 'current recvr '$Cur_Receiver

let #wrong_1st_run = 0
if #Cur_Receiver = 1
   let #Cur_Receiver = #Cur_Receiver + 1
   if $CHK_RCVER_ID <> $Prov_Type
      let #wrong_1st_run = 1
! in this case close the already opened file and switch to the first active Receiver
      let $NCSZ_EmpfNr  = $Prov_Type
      let $CHK_RCVER_ID = $Prov_Type
      show 'close-and-open-next-AAG'
      do Close-and-Open-Next-AAG
   else
      do Open-File-AAG
   end-if
else
! Next Receiver is processed
  do Get-Provider-Address($Prov_Type, $Empf_Nbr, $Empfaenger, $Address1_Other,
                          $Postal_Other, $City_Other, $Krankenkasse)
  let $NCSZ_EmpfNr  = $CHK_RCVER_ID
  let $CHK_RCVER_ID = $Prov_Type
  do Get_Receiver_Name

! Procedure Open-File closes also the current one
  if rtrim($Prov_Type,' ') <> ''
     do Open-File-AAG
     do AAG-Start-Record
     let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_VOSZ}
     do AAG-Dsko
     let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_DSKO}     
  end-if

! add already for next run
let #Cur_Receiver = #Cur_Receiver + 1

end-if
end-procedure 

!************************************************
begin-procedure Process-Main

if $Exit_Report = 'Y'
  goto Exit1
end-if

do Get_Type_Options
! create arrays for data storage
do CX_CreateArrays
!do Get-Provider-Address(&RUN_GPDE_DO_PROV_ID, $Empf_Nbr, $Empfaenger, $Address1_Other,
do Get-Provider-Address($Prov_Type, $Empf_Nbr, $Empfaenger, $Address1_Other,
                        $Postal_Other, $City_Other, $Krankenkasse)


! set up filenames, because we need more than one file
let $FileDir = rtrim($FileDir,' ')
let $KKName = rtrim($KKName,' ')

!adj09- Multi-SI:add cal run id.
!let $Dateinummer1 = '_bgl' || rtrim($Datei_Nummer,' ') || $FileExtension  || '{FILESUFFIX}'
let $Dateinummer1 = '_' || rtrim($Run_Id,' ') || '_bgl' || rtrim($Datei_Nummer,' ') || $FileExtension  || '{FILESUFFIX}'
! let $Dateinummer2 = '_mld' || rtrim($Datei_Nummer,' ') || $FileExtension  || '{FILESUFFIX}'
let $Dateinummer2 = '_' || rtrim($Run_Id,' ') || '_mld' || rtrim($Datei_Nummer,' ') || $FileExtension  || '{FILESUFFIX}'
!AAG
let $Dateinummer3 = '_' || rtrim($Run_Id,' ') || '_AAG' || rtrim($aag_file_Nbr,' ') || $FileExtension  || '{FILESUFFIX}'


let $File-Begleit = $FileDir || $KKName || $Dateinummer1
let $File-Meldung = $FileDir || $KKName || $Dateinummer2
let $File-AAG = $FileDir || $KKName || $Dateinummer3


!if another DB-Type than ORACLE, MS-SQLSERVER or INFORMIX is used
!the following procedure has to be enhanced for the new platform
do CX_MakePlatformSqlForDsmeCreated


!********************************************************************
!
new-report $File-Meldung
let $Print = 'N'
do Open-File-New-Transfer
! display '$DSME_dttm_created:'
! display $DSME_dttm_created

!initialization for multiple receivers
let #Cur_Receiver = 1

!************************************************
! RH07 89b06 - remove join to PS_ADDRESSES the selected fields are not used anywhere anymore
begin-SELECT
PDATAN.NAME_PREFIX       &PDATA_NAME_PREFIX
!rh PDATAD.ADDRESS1          &PDATA_ADDRESS1
!rh PDATAD.ADDRESS2          &PDATA_ADDRESS2
!rh PDATAD.CITY              &PDATA_CITY
!rh PDATAD.POSTAL            &PDATA_POSTAL
PDATAP.BIRTHDATE         &PDATA_BIRTHDATE
PDATAN.NAME              &PDATA_NAME
PDATAN.FIRST_NAME        &PDATAN.FIRST_NAME
PDATAN.LAST_NAME         &PDATAN.LAST_NAME
PDATAN.NAME_TITLE        &PDEFF_NAME_TITLE
PDATAN.NAME_ROYAL_PREFIX &PDATA_NAME_ROYAL_PREFIX
PDATAN.NAME_ROYAL_SUFFIX &PDATA_NAME_ROYAL_SUFFIX

DSME.EMPLID              &DSME_EMPLID
DSME.EMPL_RCD            &DSME_EMPL_RCD_NBR = NUMBER
DSME.GPDE_DV_EVT_EFFDT   &DSME_GPDE_DV_EVT_EFFDT
DSME.GPDE_DV_REP_RSN     &DSME_GPDE_DV_REP_RSN
DSME.GPDE_DV_RUN         &DSME_GPDE_DV_RUN = NUMBER
DSME.GPDE_DV_CANCEL      &DSME_GPDE_DV_CANCEL
DSME.GPDE_DV_EVT_TYPE    &DSME_BUS_EVENT_TYPE
[$DSME_dttm_created]     &DSME_DTTM_CREATED   = CHAR
DSME.GPDE_DV_RVNR        &DSME_RVNR
DSME.GPDE_SI_BTNR        &DSME_GPDE_SI_BTNR
DSME.GPDE_SI_PROV        &DSME_SI_PROVIDER
DSME.GPDE_SI_PROV_ID     &DSME_PROVIDER_ID
DSME.GPDE_DV_EMPL_CAT    &DSME_DV_EMPL_CAT_DEU
DSME.NATION_CD           &DSME_NATION_CD
DSME.GPDE_DV_DBME        &DSME_DV_DBME_DEU
DSME.GPDE_DV_DBNA        &DSME_DV_DBNA_DEU
DSME.GPDE_DV_DBGB        &DSME_DV_DBGB_DEU
DSME.GPDE_DV_DBAN        &DSME_DV_DBAN_DEU
DSME.GPDE_DV_DBEU        &DSME_DV_DBEU_DEU
DSME.GPDE_DV_DBSO        &DSME_DV_DBSO_DEU
! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock.
DSME.GPDE_DV_DBUV        &DSME_DV_DBUV_DEU
! byarn12-90B-13395876 : 12 Mar 12 Tax Update 2012 - New DBKV Datablock.
DSME.GPDE_DV_DBKV        &DSME_DV_DBKV_DEU

DSME.GPDE_DV_REP         &DSME_DV_DUEVO_REP_DEU
DSME.GPDE_DV_REP_DATE    &DSME_DV_REP_DATE_DEU
DSME.GPDE_AL_FREQUENCY   &DSME_FREQUENCY
DSME.GPDE_DV_REP_TYPE    &DSME_DV_REP_TYPE_DEU
DSME.GPDE_DV_REP_STATUS  &DSME_DV_REP_STATUS_DEU
DSME.CAL_RUN_ID          &DSME_CAL_RUN_ID
PROV.DESCR               &PROV_DESCR
PROV.DESCRSHORT          &PROV_DESCRSHORT
! rh 8.9 tax update 2007 -  removed PROV.GPDE_SI_PROV_ID     &PROV_PROVIDER_ID
PROV.GPDE_DV_RCVER_ID    &PROV_DV_RCVER_ID () on-break level=1 print = never  before = Next-Provider
PROV.GPDE_SI_PROV_ID     &PROV_PROVIDER_ID
DSME.GPDE_SI_BAEGV          &DSME_GPDE_SI_BAEGV
    let $DSME_GPDE_SI_BAEGV = &DSME_GPDE_SI_BAEGV

! sg09-9B10 1890237000: select dumy membership nbr GPDE_VW_MNRBV
DSME.GPDE_VW_MNRBV          &DSME_GPDE_VW_MNRBV
DSV1.DESCR

! disabled as this needs to be set before
!   let $Print = 'Y'
    !makdeuev-ice 1549960000 QK 07-06: Registration Card DV01-89b10
    let $DSME_GPDE_SI_BAEGV1 = &DSME_GPDE_SI_BAEGV

   let $Emplid = &DSME_EMPLID
   let #EMPL_RCD_NBR = &DSME_EMPL_RCD_NBR

   ! wdu05b6: added code for report distribution
   !**************************
   ! report distribution
   !**************************
   let $DistributionText=rtrim(&DSV1.DESCR,' ')

   !**************************
   ! NAME related
   !**************************
   ! init global variables
   let $pdata_name_prefix        = &PDATA_NAME_PREFIX
   let $pdata_name               = &PDATA_NAME
   let $pdeff_name_title         = &PDEFF_NAME_TITLE
   let $pdata_name_royal_prefix  = &PDATA_NAME_ROYAL_PREFIX
   let $pdata_name_royal_suffix  = &PDATA_NAME_ROYAL_SUFFIX

   !--------------------------------------------------------------------------------
   let $PDATAN.NAME_TITLE   =  rtrim(ltrim(&PDEFF_NAME_TITLE,' '),' ')
   let $PDATAN.FIRST_NAME        =  rtrim(ltrim(&PDATAN.FIRST_NAME,' '),' ')
   let $PDATAN.NAME_ROYAL_SUFFIX =  rtrim(ltrim(&PDATA_NAME_ROYAL_SUFFIX,' '),' ')
   let $PDATAN.NAME_ROYAL_PREFIX =  rtrim(ltrim(&PDATA_NAME_ROYAL_PREFIX,' '),' ')
   let $PDATAN.LAST_NAME         =  rtrim(ltrim(&PDATAN.LAST_NAME,' '),' ')


   let $Employee_Full_Name = $PDATAN.NAME_TITLE || cond($PDATAN.FIRST_NAME <> '' and $PDATAN.NAME_TITLE <> '', ' ', '') ||
       $PDATAN.FIRST_NAME || cond($PDATAN.NAME_ROYAL_SUFFIX <> '', ' ', '') ||
           $PDATAN.NAME_ROYAL_SUFFIX || cond($PDATAN.NAME_ROYAL_PREFIX <> '', ' ', '') ||
           $PDATAN.NAME_ROYAL_PREFIX

   if $PDATAN.NAME_ROYAL_PREFIX <> ''
      let #Pos = length($PDATAN.NAME_ROYAL_PREFIX)
      let $LastChar = substr($PDATAN.NAME_ROYAL_PREFIX, #Pos,1)
          if $LastChar = ''''
             let $Employee_Full_Name = $Employee_Full_Name || $PDATAN.LAST_NAME
          else
             let $Employee_Full_Name = $Employee_Full_Name || ' ' || $PDATAN.LAST_NAME
          end-if
   else
      let $Employee_Full_Name = $Employee_Full_Name || ' ' || $PDATAN.LAST_NAME
   end-if

   !--------------------------------------------------------------------------------
   !* Get data out of DBME, DBNA, etc.
   !* Data is saved in &DBME., &DBNA., etc.
   !*
   !*
   
   if #SpaceCounter = 0
     ! *** create VOSZ here
     do DEUV-Start-Record
     let #SpaceCounter = #SpaceCounter + {REC_LEN_VOSZ}
     ! added 20040608
     do DEUV-Dsko
     let #SpaceCounter = #SpaceCounter + {REC_LEN_DSKO}
     if &PROV_DV_RCVER_ID <> '17625773'
      !Create DSBD Block
      do DEUV-Start-Record-DSBD
      let #SpaceCounter = #SpaceCounter + {REC_LEN_DSBD}
      let #DSBD_FLAG = 1
     end-if 
   end-if

   !* check the size of the data-elements which depend on the currently processed
   !* DSME and check, if the space on the device is enough.

! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add variable &DSME_DV_DBUV_DEU in procedure Add-Space-Counter parameters
! byarn12-90B-13395876 : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Add variable &DSME_DV_DBKV_DEU in procedure Add-Space-Counter parameters
    do Add-Space-Counter(&DSME_DV_DBME_DEU, &DSME_DV_DBNA_DEU, &DSME_DV_DBGB_DEU,
                        &DSME_DV_DBAN_DEU, &DSME_DV_DBEU_DEU, &DSME_DV_DBSO_DEU, &DSME_DV_DBUV_DEU,&DSME_DV_DBKV_DEU,
                        #SpaceCounter, #MaxSpacePerDisk, $Enough_Space)

   ! 20040608 wdu: rearranged close/reopen logic
   if $Enough_Space = 'N'
      ! if disk-file is full, then close and open new file
      ! In procedure Open-File: Write NCSZ, Close file, Init new file
      let #SpaceCounter = 0
      do Open-File
      do DEUV-Start-Record
      ! wdu: also make and count DSKO here
      let #SpaceCounter = #SpaceCounter + {REC_LEN_VOSZ}
      ! added 20040608
      do DEUV-Dsko
      let #SpaceCounter = #SpaceCounter + {REC_LEN_DSKO}
     if &PROV_DV_RCVER_ID <> '17625773' 
       !Create DSBD Block
       do DEUV-Start-Record-DSBD
       let #SpaceCounter = #SpaceCounter + {REC_LEN_DSBD}
       let #DSBD_FLAG = 1
      end-if
   end-if

!rh 8.9 tax update 2007 - change PROV_PROVIDER_ID to DSME_PROVIDER_ID in parameter list
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add &DSME_DV_DBUV_DEU
   ! byarn12-90B-13395876 : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Add &DSME_DV_DBKV_DEU
   do Process_DB_Data(&DSME_DV_DBME_DEU, &DSME_DV_DBNA_DEU, &DSME_DV_DBGB_DEU,
                  &DSME_DV_DBAN_DEU, &DSME_DV_DBEU_DEU, &DSME_DV_DBSO_DEU, &DSME_DV_DBUV_DEU,&DSME_DV_DBKV_DEU,
                  &DSME_EMPLID, &DSME_EMPL_RCD_NBR, &DSME_GPDE_DV_EVT_EFFDT, &DSME_GPDE_DV_REP_RSN,
                  &DSME_GPDE_DV_RUN, &DSME_GPDE_DV_CANCEL, &DSME_PROVIDER_ID)

   add 1 to #RecordCounter

   !************* Critical Step: Finalize ************
   ! When this is executed, then the data are finalized and will not be written to
   ! disk files in subsequent runs.
   if $GPDE_RC_DUEVO_CLS = 'Y'
      ! sgo09-9B10-1893621000 : update GPDE_DV_DSME.GPDE_DV_REP_DATE for the provider id procesed only.
 !    Add parameter &DSME_SI_PROVIDER
      do Update_DSME_REP_DT(&DSME_EMPLID, &DSME_EMPL_RCD_NBR, &DSME_GPDE_DV_EVT_EFFDT,
                            &DSME_GPDE_DV_REP_RSN, &DSME_GPDE_DV_RUN, &DSME_GPDE_DV_CANCEL, &DSME_SI_PROVIDER)
   end-if

   !rh 8.9 tax update 2007 -  SelfService
    add 1 to #PageCount
    if $last_emplid = $emplid and #last_empl_rcd_nbr = #EMPL_RCD_NBR

    else
       do count-EE
       do GP-ePay-Guide
    end-if
    let $last_emplid = $emplid
    let #last_empl_rcd_nbr = #empl_rcd_nbr
FROM PS_GPDE_DV_DSME DSME
    ,PS_PERSON PDATAP
    ,PS_GPDE_SI_PROV PROV
    ,PS_NAMES PDATAN
! RH07 89b06 - remove join to PS_ADDRESSES the selected fields are not used anywhere anymore
!    ,PS_ADDRESSES PDATAD
    ,PS_GPDE_RP_DIST_VW DSV1
WHERE DSME.GPDE_DV_REP_DATE IS NULL
AND DSME.GPDE_DV_REP_STATUS <> 'F'
AND   DSME.EMPLID = PDATAP.EMPLID
! RH07 89b06  AND   DSME.EMPLID = PDATAD.EMPLID
AND   DSME.EMPLID = PDATAN.EMPLID
! wdu06-890b7 fixed PDATAN1 and PDATAD1 join
AND   PDATAN.NAME_TYPE = $Name_Type
AND   PDATAN.EFFDT =(select max(PDATAN1.EFFDT) from PS_NAMES PDATAN1
                     where PDATAN1.EMPLID = PDATAN.EMPLID
                     AND PDATAN1.NAME_TYPE = $Name_Type
                     AND PDATAN1.EFFDT <= DSME.GPDE_DV_EVT_EFFDT)
! Berechtigung zur Annahme ?
!
! wdu05-881jw06: the line is un-commented again for 2006 because the disks need
! to be separate for each receiver again
! (to combine all providers in a single run, the next line needs to be commented out)
!adj09- Multi-SI: process receivers on run control
AND   (PROV.GPDE_DV_RCVER_ID in (select GPDE_DV_RCVER_ID from PS_GPDE_DV_RNDSK
                                  where OPRID = $prcs_oprid
                                    and RUN_CNTL_ID = $prcs_run_cntl_id )
       OR (     PROV.GPDE_SI_PROV_ID in (select GPDE_DV_RCVER_ID from PS_GPDE_DV_RNDSK
                                            where OPRID = $prcs_oprid
                                              and RUN_CNTL_ID = $prcs_run_cntl_id)
            AND PROV.GPDE_DV_RCVER_YN = 'Y'  )
       )
!
AND   PROV.GPDE_SI_PROV = DSME.GPDE_SI_PROV
AND   PROV.EFFDT =
         (SELECT MAX(EFFDT) FROM PS_GPDE_SI_PROV PROV2
          WHERE PROV2.GPDE_SI_PROV = PROV.GPDE_SI_PROV
          AND   PROV2.EFFDT <= DSME.GPDE_DV_EVT_EFFDT)
! wdu05b6: added code for report distribution, also all refs to DSV1
AND DSME.EMPLID=DSV1.EMPLID
AND DSME.EMPL_RCD=DSV1.EMPL_RCD
AND DSME.CAL_RUN_ID = $Run_id

! wdu05b6: added DSV1.DESCR as first sort crit because of report distribution/print order
!adj09- Multi-SI
ORDER BY PROV.GPDE_DV_RCVER_ID, DSV1.DESCR,PDATAN.NAME,DSME.EMPLID,DSME.EMPL_RCD,  DSME.GPDE_SI_PROV_ID, DSME.GPDE_DV_EVT_EFFDT

end-SELECT
!************************************************

!If $GPDE_RC_DUEVO_CLS = 'Y' Insert all not processed DSME rows (= with NULLS) into ERROR_table

if $GPDE_RC_DUEVO_CLS = 'Y'
   if rtrim($Run_Id, ' ') = ''
      do Ddisk_Error_Proc_01
   else
      do Ddisk_Error_Proc_02
   end-if
end-if

! finally close all files and do the tidy-up

if $File_Already_Open = 'Y'
  if $Print = 'Y'

    let $NCSZ_EmpfNr  = $CHK_RCVER_ID
     do DEUV-End-Record
     close 10
     ! wdu 20040607 update the file number only when rows were processed.
     ! otherwise the number should not change.
     if $GPDE_RC_DUEVO_CLS = 'Y'
        ! wdu05-881jw06: we now have 2 disk numbers
        ! transmission number counting:  based on sender/receiver combo
        do UpdateInternalFileNumber
        ! increment and update the filecounter in the database (new counting method)
        do IncUpdateDakotaFileNumber
     else
        let #DakotaNummer = #DakotaNummer + 1
     end-if
     move #DakotaNummer to $DakotaNummer 099
  else
     close 10
     display ' '
     display 'Keine Datensätze zu melden...'
     display 'Lösche Datei ' noline
     display $FileNm
     let #success = delete($FileNm)
         let #success1 = delete($FileNm1)
  end-if
end-if

! --- wdu06-881b11 do not finalize disks without data
!if $Print <> 'Y' and $GPDE_RC_DUEVO_CLS = 'Y'
    !let $GPDE_RC_DUEVO_CLS = 'X'
!end-if
! update the status table
do InsertTo_PrcsSt

!************AAG PROCESS*************************
LET #AAG_FLAG = 0
new-report $File-AAG
let $Print = 'N'
do Open-File-New-Transfer
!initialization for multiple receivers
let #Cur_Receiver = 1
!************************************************

begin-SELECT

DSER.EMPLID              &DSER_EMPLID
DSER.EMPL_RCD            &DSER_EMPL_RCD_NBR = NUMBER
DSER.GPDE_DV_EVT_EFFDT   &DSER_GPDE_DV_EVT_EFFDT
DSER.PRD_END_DT          &DSER_PRD_END_DT
DSER.GPDE_AAG_REP_RSN    &DSER_GPDE_AAG_REP_RSN
DSER.GPDE_DV_RUN         &DSER_GPDE_DV_RUN = NUMBER
DSER.GPDE_DV_CANCEL      &DSER_GPDE_DV_CANCEL
DSER.GPDE_AAG_DBAU       &DSER_AAG_DBAU_DEU
DSER.GPDE_AAG_DBBT       &DSER_AAG_DBBT_DEU
DSER.GPDE_AAG_DBZU       &DSER_AAG_DBZU_DEU
[$DSER_dttm_created]     &DSER_DTTM_CREATED   = CHAR
DSER.GPDE_SI_BTNR        &DSER_GPDE_SI_BTNR
DSER.GPDE_SI_PROV        &DSER_SI_PROVIDER
DSER.GPDE_SI_PROV_ID     &DSER_PROVIDER_ID
DSER.GPDE_DV_RCVER_ID    &DSER_RCVER_ID  () on-break level=1 print = never  before = Next-Provider-AAG
DSER.GPDE_DV_EMPL_CAT    &DSER_DV_EMPL_CAT_DEU
DSER.GPDE_AAG_DBBV       &DSER_AAG_DBBV_DEU
DSER.GPDE_DV_DBNA        &DSER_DV_DBNA_DEU
DSER.GPDE_DV_DBAN        &DSER_DV_DBAN_DEU
DSER.GPDE_DV_REP         &DSER_DV_DUEVO_REP_DEU
DSER.GPDE_DV_REP_DATE    &DSER_DV_REP_DATE_DEU
DSER.CAL_RUN_ID          &DSER_CAL_RUN_ID
DSER.GPDE_DV_REP_STATUS  &DSER_DV_REP_STATUS_DEU
DSER.SEX                 &DSER_SEX
DSER.BIRTHDATE           &DSER_BIRTHDATE
DSER.HIRE_DT             &DSER_HIRE_DT
DSER.GPDE_SI_COVERAGE    &DSER_GPDE_SI_COVERAGE
DSER.GPDE_SI_STATUS      &DSER_GPDE_SI_STATUS
PER.NATIONAL_ID          &DSER_VSNR
PROV.DESCR               &DSER_PROV_DESCR
PROV.DESCRSHORT          &DSER_PROV_DESCRSHORT
!PROV.GPDE_DV_RCVER_ID    &DSER_PROV_DV_RCVER_ID () on-break level=1 print = never  before = Next-Provider-AAG
!PROV.GPDE_SI_PROV_ID     &DSER_PROV_PROVIDER_ID

   let $Emplid = &DSER_EMPLID
   let #EMPL_RCD_NBR = &DSER_EMPL_RCD_NBR   
   
   !code for report distribution
   !**************************
   let $DistributionText=rtrim(&DSV1.DESCR,' ')
  
   !--------------------------------------------------------------------------------
   !* Get data out of DBME, DBNA, etc.
   !* Data is saved in &DBME., &DBNA., etc.
   show '#SpaceCounter_AAG ' #SpaceCounter_AAG
   if #SpaceCounter_AAG = 0
     ! *** create VOSZ DSKO here
     do AAG-Start-Record
     let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_VOSZ}
     do AAG-Dsko
     let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_DSKO}
   end-if
  
   !* check the size of the data-elements which depend on the currently processed
   !* DSER and check, if the space on the device is enough.

    do Add-Space-Counter_AAG(&DSER_AAG_DBAU_DEU, &DSER_AAG_DBBT_DEU, &DSER_AAG_DBZU_DEU,
                             #SpaceCounter_AAG, #MaxSpacePerDisk, $Enough_Space)

   ! close/reopen logic
   if $Enough_Space = 'N'
      ! if disk-file is full, then close and open new file
      ! In procedure Open-File: Write NCSZ, Close file, Init new file
      let #SpaceCounter_AAG = 0
      do Open-File-AAG
      do AAG-Start-Record
      ! also make and count DSKO here
      let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_VOSZ}
      do AAG-Dsko
      let #SpaceCounter_AAG = #SpaceCounter_AAG + {REC_LEN_DSKO}     
   end-if

   show 'b4 process aagdb - payentity ' $Ctl_Pay_Entity
   show 'clerk gender '$Clerk_GENDER
   show 'clerk phone '$Clerk_PHONE
   show 'Clerk_FAX '$Clerk_FAX
   show 'payentity name '$Absender
   do Process_AAGDB_Data($Ctl_Pay_Entity,$Clerk_GENDER, $Clerk_NAME,$Clerk_PHONE, $Clerk_FAX, $Clerk_EMAIL, $Absender, $Postal_abs, $City_Abs,  $Address1,
                  &DSER_AAG_DBAU_DEU, &DSER_AAG_DBBT_DEU, &DSER_AAG_DBZU_DEU,                       
                  &DSER_EMPLID, &DSER_EMPL_RCD_NBR, &DSER_CAL_RUN_ID, &DSER_GPDE_DV_EVT_EFFDT, &DSER_PRD_END_DT,&DSER_GPDE_AAG_REP_RSN,&DSER_GPDE_DV_RUN, &DSER_GPDE_DV_CANCEL, &DSER_PROVIDER_ID, 
                  &DSER_VSNR,&DSER_SEX,&DSER_BIRTHDATE,&DSER_HIRE_DT,&DSER_GPDE_SI_COVERAGE,&DSER_GPDE_SI_STATUS)

          
                  
   add 1 to #RecordCounter_AAG

   !************* Critical Step: Finalize ************
   ! When this is executed, then the data are finalized and will not be written to
   ! disk files in subsequent runs.
    SHOW 'CLOSE FLAG' $GPDE_RC_DUEVO_CLS
   if $GPDE_RC_DUEVO_CLS = 'Y'
    show 'Entering Deuev close REp date update'
      do Update_DSER_REP_DT(&DSER_EMPLID, &DSER_EMPL_RCD_NBR, &DSER_GPDE_DV_EVT_EFFDT,
                            &DSER_GPDE_AAG_REP_RSN, &DSER_GPDE_DV_RUN, &DSER_GPDE_DV_CANCEL, &DSER_SI_PROVIDER)
   end-if

   ! SelfService
    add 1 to #PageCount
    if $last_emplid = $emplid and #last_empl_rcd_nbr = #EMPL_RCD_NBR

    else
       do count-EE
       do GP-ePay-Guide
    end-if
    
    let $last_emplid = $emplid
    let #last_empl_rcd_nbr = #empl_rcd_nbr
    LET #AAG_FLAG = 1
    
FROM PS_GPDE_AAG_DSER DSER    
    ,PS_GPDE_SI_PROV PROV
    ,PS_GPDE_AAGPERD_VW PER

WHERE DSER.GPDE_DV_REP_DATE IS NULL
AND DSER.EMPLID = PER.EMPLID
AND DSER.GPDE_DV_REP_STATUS <> 'F'
AND   PROV.GPDE_SI_PROV = DSER.GPDE_SI_PROV
AND   PROV.EFFDT =
         (SELECT MAX(EFFDT) FROM PS_GPDE_SI_PROV PROV2
          WHERE PROV2.GPDE_SI_PROV = PROV.GPDE_SI_PROV
          AND   PROV2.EFFDT <= DSER.GPDE_DV_EVT_EFFDT)
          
AND (DSER.GPDE_DV_RCVER_ID in (select GPDE_DV_RCVER_ID from PS_GPDE_DV_RNDSK
                                  where OPRID = $prcs_oprid
                                    and RUN_CNTL_ID = $prcs_run_cntl_id )
       OR (DSER.GPDE_SI_PROV_ID in (select GPDE_DV_RCVER_ID from PS_GPDE_DV_RNDSK
                                            where OPRID = $prcs_oprid
                                              and RUN_CNTL_ID = $prcs_run_cntl_id)
          AND PROV.GPDE_DV_RCVER_YN = 'Y'  )
       )    
AND DSER.CAL_RUN_ID = $Run_id
ORDER BY PROV.GPDE_DV_RCVER_ID, DSER.EMPLID,DSER.EMPL_RCD,  DSER.GPDE_SI_PROV_ID, DSER.GPDE_DV_EVT_EFFDT

end-SELECT

if #AAG_FLAG = 1
if $GPDE_RC_DUEVO_CLS = 'Y'
   if rtrim($Run_Id, ' ') = ''
      do Ddisk_Error_Proc_01
   else
      do Ddisk_Error_Proc_02
   end-if
end-if

! finally close all files and do the tidy-up

if $File_Already_Open = 'Y'
  if $Print = 'Y'
    let $NCSZ_EmpfNr  = $CHK_RCVER_ID
     do AAG-End-Record
     close 10
     ! wdu 20040607 update the file number only when rows were processed.
     ! otherwise the number should not change.
     if $GPDE_RC_DUEVO_CLS = 'Y'
        ! wdu05-881jw06: we now have 2 disk numbers
        ! transmission number counting:  based on sender/receiver combo
        do UpdateInternalFileNumber            
     end-if     
  else
     close 10
     display ' '
     display 'Keine Datensätze zu melden...'
     display 'Lösche Datei ' noline
     display $FileNm
     let #success = delete($FileNm)
         let #success1 = delete($FileNm1)
  end-if
end-if

! --- wdu06-881b11 do not finalize disks without data
if $Print <> 'Y' and $GPDE_RC_DUEVO_CLS = 'Y'
    let $GPDE_RC_DUEVO_CLS = 'X'
end-if
! update the status table
do InsertTo_PrcsSt
END-IF

!*********************END OF AAG PROCESS***************************
if $Print = 'Y'
!adj08-89B14- Pdf nnnnnnnn_bglxxx.pdf is not longer required.
!   do Print-Begleitzettel
end-if
Exit1:

! wdu06-881b11 display a hint on the number of non finalized rows
do NonFinalizedCount

end-procedure PROCESS-MAIN

!************************************************
begin-procedure DEUV-Start-Record-DSBD

let $X1 = 'DSBD' !4
let $X2 = 'BTRAG' !5
let $X3 = $Absender_Nbr !15
let $X4 = $Empf_Nbr     !15
let $X5 = '01'          !40-41 02

let $X7 = '0'           !62-62 01         
let $X8 = '0'           !63-63 01

let $X10 = ' '          !79-89 11
let $X11 = ' '          !90-104 15
let $X12 = '12'         !105-106 02
let $X13 = ' '          !107-111 5 
let $X14 = &RUN_DESCR   !company name 112 - 141 30
let $X15 = ' '          !142-171 30
let $X16 =  ' '         !172-201 30

let $X21 =  ' '         !288 - 297 10
let $X22 =  ' '         !298 - 307 10 
let $X23 = 'A'          !308 - 308 01
   
let $X24 = $Absender_Nbr          !309 - 323 15 
let $X25 = $Clerk_GENDER          ! Gender jjj-89b13-1738246000 324 - 324
let $X26 = $Clerk_Name            !NAME ANSPRECHPARTNER         325 - 354 30
let $X27 = $Clerk_PHONE           !TEL                          355 - 374 20
let $X28 = $Clerk_FAX             !FAX                          375 - 394 20
let $X29 = $Clerk_EMAIL           !EMAIL                        395 - 464 70

let $X30 = ' '          !465 - 484 20 
let $X31 = ' '          !485 - 504 20 
let $X32 = ' '          !505 - 519 15
let $X33 = ' '          !520 - 534 15
let $X34 = 'N' !1
let $X35 = 'N' !1

BEGIN-SELECT 
GPDE_SI_BTNR
LOCATION 
POSTAL
CITY
ADDRESS1

    let $address1 = &ADDRESS1
    !Logic to Extract street and House number from Address1 field value
    let #adr_Length = length($address1)
    let $rev_address = edit($address1, 'R')
    find ' ' in $rev_address 0 #hsnum_len
    let #street_Len = #adr_Length - #hsnum_len
    Extract $street From $address1 0 #street_Len
    let $street = Rtrim($street, ' ')
    let #start_loc = #street_Len
    Extract $housenum From $address1 #start_loc #hsnum_len
    !---------------------------------------------------------
    do Format-DateTime($sysdatetime,$DATUM, {DEFCMP},'time','')    
    let $DATUM = $DATUM || '000000'
    let $X6 = $DATUM !42-61 20  
    
    let $X9 = &GPDE_SI_BTNR    
    let $X17 = &POSTAL  !202 - 211 10
    let $X18 = &CITY    !212 - 245 34
    let $X19 = $street  !246 - 278 33
    let $X20 = $housenum  !279 - 287 09
    
    do Chg-Char($X1,$X1)
    do Chg-Char($X2,$X2)
    do Chg-Char($X3,$X3)
    do Chg-Char($X4,$X4)
    do Chg-Char($X5,$X5)
    do Chg-Char($X6,$X6)
    do Chg-Char($X7,$X7)
    do Chg-Char($X8,$X8)
    do Chg-Char($X9,$X9)
    do Chg-Char($X10,$X10)
    do Chg-Char($X11,$X11)
    do Chg-Char($X12,$X12)
    do Chg-Char($X13,$X13)
    do Chg-Char($X14,$X14)
    do Chg-Char($X15,$X15)
    do Chg-Char($X16,$X16)
    do Chg-Char($X17,$X17)
    do Chg-Char($X18,$X18)
    do Chg-Char($X19,$X19)
    do Chg-Char($X20,$X20)
    do Chg-Char($X21,$X21)
    do Chg-Char($X22,$X22)
    do Chg-Char($X23,$X23)
    do Chg-Char($X24,$X24)
    do Chg-Char($X25,$X25)
    do Chg-Char($X26,$X26)
    do Chg-Char($X27,$X27)
    do Chg-Char($X28,$X28)
    do Chg-Char($X29,$X29)
    do Chg-Char($X30,$X30)
    do Chg-Char($X31,$X31)
    do Chg-Char($X32,$X32)
    do Chg-Char($X33,$X33)
    do Chg-Char($X34,$X34)
    do Chg-Char($X35,$X35)

    write 10 from $X1:4 $X2:5 $X3:15 $X4:15 $X5:2 $X6:20 $X7:1 $X8:1 $X9:15 $X10:11
          $X11:15 $X12:2 $X13:5 $X14:30 $X15:30 $X16:30 $X17:10 $X18:34 $X19:33 $X20:9
          $X21:10 $X22:10 $X23:1 $X24:15 $X25:1 $X26:30 $X27:20 $X28:20 $X29:70 $X30:20
          $X31:20 $X32:15 $X33:15 $X34:1 $X35:1
    
    add 1 to #RecordCounter
     
FROM PS_GPDE_DV_DSBD
WHERE PAY_ENTITY = $Ctl_Pay_Entity AND GPDE_DV_DSBD_FLG = 'Y'
END-SELECT

end-procedure

!**************************************************************
!
! VOSZ (Vorlaufsatz)
!
!**************************************************************
begin-procedure DEUV-Start-Record

let $X1 = 'VOSZ'
let $X2 = {VERFAHRENSMERKMAL}

! sg09-9B10 1890237000: if pension receiver, VERFAHRENSMERKMAL = AGBVD.
!     Add do Get-Verfahrensmerkmal
 do Get-Verfahrensmerkmal($Empf_Nbr, $X2, $X2)
let $X3 = $Absender_Nbr
let $X4 = $Empf_Nbr
do Convert-To-DTU-Date($AsOfToday, $DTU_AsOfToday)
do dtu-parse-date($DTU_AsOfToday, #yr, #mo, #da)
let $yy = edit(#yr, '0000')
let $mm = edit(#mo, '00')
let $dd = edit(#da, '00')
let $VOSZ_Datum_Erstellung = rtrim($yy,' ') || rtrim($mm,' ') || rtrim($dd,' ')
let $X5 = $VOSZ_Datum_Erstellung

let $VOSZ_LFD_DATEI_NR = edit(#Datei_Nummer, '000000')
let $X6 = $VOSZ_LFD_DATEI_NR
let $X7 = &RUN_DESCR
let $X8 = {VERSION_VOR}
do Chg-Char($X1,$X1)
do Chg-Char($X2,$X2)
do Chg-Char($X3,$X3)
do Chg-Char($X4,$X4)
do Chg-Char($X5,$X5)
do Chg-Char($X6,$X6)
do Chg-Char($X7,$X7)
do Chg-Char($X8,$X8)
write 10 from $X1:4 $X2:5 $X3:15 $X4:15 $X5:8 $X6:6 $X7:50 $X8:2

end-procedure

!**************************************************************
! AAG - VOSZ (Vorlaufsatz)
!**************************************************************
begin-procedure AAG-Start-Record

let $X1 = 'VOSZ' !1-4
let $X2 = {VERFAHRENSMERKMAL_AAG} !5-9

! 2013 if pension receiver, VERFAHRENSMERKMAL = AGBVD.
do Get-Verfahrensmerkmal($Empf_Nbr, $X2, $X2)
let $X3 = $Absender_Nbr !10-24
let $X4 = $Empf_Nbr     !25-39
do Convert-To-DTU-Date($AsOfToday, $DTU_AsOfToday)
do dtu-parse-date($DTU_AsOfToday, #yr, #mo, #da)
let $yy = edit(#yr, '0000')
let $mm = edit(#mo, '00')
let $dd = edit(#da, '00')
let $VOSZ_Datum_Erstellung = rtrim($yy,' ') || rtrim($mm,' ') || rtrim($dd,' ')
let $X5 = $VOSZ_Datum_Erstellung !40-47
show 'AAG start records - #aag_file_Nbr ' #aag_file_Nbr
let $VOSZ_LFD_DATEI_NR = edit(#aag_file_Nbr, '000000')
let $X6 = $VOSZ_LFD_DATEI_NR !48-53
let $X7 = &RUN_DESCR !54-103
let $X8 = {VERSION_VOR_AAG} !104-105
do Chg-Char($X1,$X1)
do Chg-Char($X2,$X2)
do Chg-Char($X3,$X3)
do Chg-Char($X4,$X4)
do Chg-Char($X5,$X5)
do Chg-Char($X6,$X6)
do Chg-Char($X7,$X7)
do Chg-Char($X8,$X8)
write 10 from $X1:4 $X2:5 $X3:15 $X4:15 $X5:8 $X6:6 $X7:50 $X8:2

end-procedure DEUV-Start-AAG-Record

!****************************************************
begin-procedure DEUV-End-Record

let $X1 = 'NCSZ'
let $X2 = {VERFAHRENSMERKMAL}

! sg09-9B10 1890237000: if pension receiver, VERFAHRENSMERKMAL = AGBVD.
!   Add do Get-Verfahrensmerkmal
 do Get-Verfahrensmerkmal($Empf_Nbr, $X2, $X2)
!Betriebsnummer des Absenders
let $X3 = rpad($Absender_Nbr, 15, ' ')
!Betriebsnummer des Empfaenger
!let $X4 = rpad($Empf_Nbr, 15, ' ')
let $X4 = rpad($NCSZ_EmpfNr, 15, ' ')
!adj10: for provider type 8 always print AGBVD.
do getProviderType($provider_type, $NCSZ_EmpfNr)
 let $provider_type = ltrim(rtrim($provider_type, ' '), ' ')
 if $provider_type = '08'
    let $X2 = 'AGBVD'
 else
    let $X2 = 'AGDEU'
 end-if
!Datum Erstellung
let $X5 = $VOSZ_Datum_Erstellung
let $X6 = $VOSZ_LFD_DATEI_NR
let $X7 = edit(#RecordCounter, '00000000')
let $X8 = {VERSION_NACH}
do Chg-Char($X1,$X1)
do Chg-Char($X2,$X2)
do Chg-Char($X3,$X3)
do Chg-Char($X4,$X4)
do Chg-Char($X5,$X5)
do Chg-Char($X6,$X6)
do Chg-Char($X7,$X7)
do Chg-Char($X8,$X8)
write 10 from $X1:4 $X2:5 $X3:15 $X4:15 $X5:8 $X6:6 $X7:8 $X8:2
put #Vol_Number $AsOfToday #Datei_Nummer #RecordCounter into begleit(#row)

let #row = #row+1

end-procedure
!****************************************************
begin-procedure AAG-End-Record

let $X1 = 'NCSZ'
let $X2 = {VERFAHRENSMERKMAL_AAG}

 do Get-Verfahrensmerkmal($Empf_Nbr, $X2, $X2)
!Betriebsnummer des Absenders
let $X3 = rpad($Absender_Nbr, 15, ' ')
!Betriebsnummer des Empfaenger
!let $X4 = rpad($Empf_Nbr, 15, ' ')
let $X4 = rpad($NCSZ_EmpfNr, 15, ' ')
!adj10: for provider type 8 always print AGBVD.
do getProviderType($provider_type, $NCSZ_EmpfNr)
 let $provider_type = ltrim(rtrim($provider_type, ' '), ' ')
 if $provider_type = '08'
    let $X2 = 'AGBVD'
 else
    let $X2 = 'AGAAG'
 end-if
!Datum Erstellung
let $X5 = $VOSZ_Datum_Erstellung
let $X6 = $VOSZ_LFD_DATEI_NR
let $X7 = edit(#RecordCounter_AAG, '00000000')
let $X8 = {VERSION_NACH_AAG}
do Chg-Char($X1,$X1)
do Chg-Char($X2,$X2)
do Chg-Char($X3,$X3)
do Chg-Char($X4,$X4)
do Chg-Char($X5,$X5)
do Chg-Char($X6,$X6)
do Chg-Char($X7,$X7)
do Chg-Char($X8,$X8)
write 10 from $X1:4 $X2:5 $X3:15 $X4:15 $X5:8 $X6:6 $X7:8 $X8:2
put #Vol_Number_AAG $AsOfToday #aag_file_Nbr #RecordCounter_AAG into begleit(#row)

let #row = #row+1
end-procedure AAG-End-Record

!**************************************************************
! DSKO (Datensatz Kommunikation)
! derived from VOSZ
!**************************************************************
begin-procedure DEUV-Dsko

let $XK1 = 'DSKO'
let $XK2 = {DSME_VERFAHREN}
let $XK3 = $Absender_Nbr
let $XK4 = $Empf_Nbr
let $XK5 = {VERSION_DSKO}
let $XK23 = {CONFIRM_ERR_FREE}    !jjj-89b10
if $Empf_Nbr = '17625773'
   let $XK24 = {CONFIRM_EMAIL_DASBV} !byarn-90b12
else
   let $XK24 = {CONFIRM_EMAIL}       !jjj-89b10
end-if



!-- ------------------------------------------------------------------
!* date of creation logic taken from VOSZ ($X5), but we need time too
!--do Convert-To-DTU-Date($AsOfToday, $DTU_AsOfToday)
!--!do Convert-To-DTU-Date($SysDateTime, $DTU_AsOfToday)
!--do dtu-parse-date($DTU_AsOfToday, #yr, #mo, #da)
!--
!--let $yy = edit(#yr, '0000')
!--let $mm = edit(#mo, '00')
!--let $dd = edit(#da, '00')
!--let $VOSZ_Datum_Erstellung = rtrim($yy,' ') || rtrim($mm,' ') || rtrim($dd,' ')
!--let $XK6 = $VOSZ_Datum_Erstellung || '000000' || '000000'
!-- ------------------------------------------------------------------

! wdu2004: new version:  we use the date and time from $SysDateTime
do Format-DateTime($sysdatetime,$VOSZ_Datum_Erstellung, {DEFCMP},'time','')
let $XK6 = $VOSZ_Datum_Erstellung  || '000000'

let $XK7 = '00'                          !FEKZ+FEAN
let $XK8 = $Absender_Nbr                 !BBNRVU = $XK3
! wdu05-881b11 updated modid

! jjj-89B11-1674660000: 20th Jul 07 Changes for MODID.
do Get_VersionNr

let $XK9 = $PRODID                       !PROD-ID (7)
let $XK10 = $MODID                       !MOD-ID  (8)

! -----------------------------------------------
! wdu05-881b9 changed address logic for DSKO and Begleitzettel
!
! ADDRESS1 is defined to be the street and number now
! ADDRESS2..4 ignored because content unknown
!
! general field population
let $XA1 = $Absender            ! NAME1-ABSENDER
let $XA2 = ' '                  ! NAME2-ABSENDER
let $XA3 = ' '                  ! NAME3-ABSENDER
let $XA4 = ' '                  ! NAME4-ABSENDER

! -----------------------------------------------
!
! Assignments to DSKO fields
!
let $XK11 = $XA1                   !NAME1 (30)
let $XK12 = ' '                    !NAME2 (30)
let $XK13=  ' '                    !NAME3 (30)
let $XK14= $Postal_abs             !PLZ-BETRIEB (10)
let $XK15= $City_Abs               !ORT-BETRIEB (34)

let $XK16= $Address1               !STRASSE-BETRIEB       = by definition ADDRESS1
let $XK17= ' '                     !HAUSNR-BETRIEB        not available separately


! RH07 89b06 - modify logic how clerk information is imported to SQR
let $XK19 = $Clerk_Name            !NAME ANSPRECHPARTNER
let $XK20 = $Clerk_PHONE           !TEL
let $XK21 = $Clerk_FAX             !FAX
let $XK22 = $Clerk_EMAIL           !EMAIL
let $XK18 = $Clerk_GENDER          ! Gender jjj-89b13-1738246000
let $XK25 = '   '                  ! padding jjj-89b13-1738246000.
! Chg-Char replaces special chars in names and addresses
! wdu05-881jw06 fixed Umlaut-handling in DSKO
do Chg-Char($XK11,$XK11)
do Chg-Char($XK12,$XK12)
do Chg-Char($XK13,$XK13)
do Chg-Char($XK15,$XK15)
do Chg-Char($XK16,$XK16)
do Chg-Char($XK17,$XK17)
do Chg-Char($XK18,$XK18)
do Chg-Char($XK19,$XK19)


write 10 from $XK1:4 $XK2:5 $XK3:15 $XK4:15 $XK5:2 $XK6:20 $XK7:2 $XK8:15 $XK9:7 $XK10:8
 $XK11:30 $XK12:30 $XK13:30 $XK14:10 $XK15:34 $XK16:33 $XK17:9 $XK18:1 $XK19:30 $XK20:20
 $XK21:20 $XK22:70
 $XK23:1 $XK24:1 $XK25:3   !jjj-89b10

    add 1 to #RecordCounter

end-procedure

!**************************************************************
!
! AAG DSKO (Datensatz Kommunikation)
!
! derived from AAG VOSZ
!**************************************************************
begin-procedure AAG-DSKO

let $XK1 = 'DSKO'
let $XK2 = {DSER_VERFAHREN}
let $XK3 = $Absender_Nbr
let $XK4 = $Empf_Nbr
let $XK5 = {VERSION_DSKO_AAG}
let $XK23 = {CONFIRM_ERR_FREE}    !411-411
let $XK24 = 'K' !412-412
do Format-DateTime($sysdatetime,$VOSZ_Datum_Erstellung, {DEFCMP},'time','')
let $XK6 = $VOSZ_Datum_Erstellung  || '000000' !42-61

let $XK7 = '00'                          !FEKZ+FEAN
let $XK8 = $Absender_Nbr                 !64-78

do Get_VersionNr

let $XK9 = $PRODID                       !PROD-ID (7) 79-85
let $XK10 = $MODID                       !MOD-ID  (8) 86-93

! general field population
let $XA1 = $Absender            ! NAME1-ABSENDER 94 -123
let $XA2 = ' '                  ! NAME2-ABSENDER 124-153
let $XA3 = ' '                  ! NAME3-ABSENDER 154-183
let $XA4 = ' '                  ! NAME4-ABSENDER 184-193
! -----------------------------------------------
! Assignments to DSKO fields
let $XK11 = $XA1                   !NAME1 (30)
let $XK12 = ' '                    !NAME2 (30)
let $XK13=  ' '                    !NAME3 (30)
let $XK14= $Postal_abs             !PLZ-BETRIEB (10)
let $XK15= $City_Abs               !ORT-BETRIEB (34) 194-227

let $XK16= $Address1               !STRASSE-BETRIEB       = by definition ADDRESS1 228 - 260
let $XK17= ' '                     !HAUSNR-BETRIEB        not available separately 261-269

let $XK19 = $Clerk_Name            !NAME ANSPRECHPARTNER 271-300
let $XK20 = $Clerk_PHONE           !TEL 301-320
let $XK21 = $Clerk_FAX             !FAX 321-340
let $XK22 = $Clerk_EMAIL           !EMAIL 341-410
let $XK18 = $Clerk_GENDER          ! Gender 270 -270
let $XK25 = '   '                  ! padding 413-415
! Chg-Char replaces special chars in names and addresses
do Chg-Char($XK11,$XK11)
do Chg-Char($XK12,$XK12)
do Chg-Char($XK13,$XK13)
do Chg-Char($XK15,$XK15)
do Chg-Char($XK16,$XK16)
do Chg-Char($XK17,$XK17)
do Chg-Char($XK18,$XK18)
do Chg-Char($XK19,$XK19)

write 10 from $XK1:4 $XK2:5 $XK3:15 $XK4:15 $XK5:2 $XK6:20 $XK7:2 $XK8:15 $XK9:7 $XK10:8
 $XK11:30 $XK12:30 $XK13:30 $XK14:10 $XK15:34 $XK16:33 $XK17:9 $XK18:1 $XK19:30 $XK20:20
 $XK21:20 $XK22:70 $XK23:1 $XK24:1 $XK25:3

 add 1 to #RecordCounter_AAG

end-procedure AAG-DSKO
!***********************************************
begin-procedure Open-File-New-Transfer

let $Reset_Vol_Number = 'Y'
!adj09- Multi-SI: this should be triggered at a later stage
!do Open-File

end-procedure

!**************************************************************************
! Finalize and close the datafile, if it is open and reopen it.
! The filename needs to be generated because DEUEV requests a volume number
! in the filename extension.
!
! NCSZ (Nachlaufsatz) is created here as needed.
!**************************************************************************
begin-procedure Open-File
! wdu05-881jw06 number handling changed for the disks
! what is ...
!    #Vol_Number        --  running number of the disk (?)
!    #RecordCounter     --  rownumber in current disk
!    #Datei_Nummer      --  the disk number that was handled on the runcontrol
!                           updated only when a disk was finalized and had data.
!                           maintained per sender/receiver combination
!
!
!
  
  let $File_Already_Open = 'Y'

  ! to close a file, first the NCSZ needs to be written.
  if #Vol_Number <> 0
    do DEUV-End-Record
    close 10
    if #wrong_1st_run = 1
         let #success = delete($FileNm)
         let #success1 = delete($FileNm1)
     end-if

    if $GPDE_RC_DUEVO_CLS = 'Y'
        ! wdu05-881jw06: we now have 2 disk numbers
        ! transmission number counting:  based on sender/receiver combo
        do UpdateInternalFileNumber
        ! increment and update the filecounter in the database (new counting method)
        do IncUpdateDakotaFileNumber
    else
        let #DakotaNummer = #DakotaNummer + 1
    end-if
    move #DakotaNummer to $DakotaNummer 099
  end-if

!store temporary run_ctl_value
let $TMP_RC_DUEVO_CLS = $GPDE_RC_DUEVO_CLS

! --- wdu06-881b11 do not finalize disks without data
if $Print <> 'Y' and $GPDE_RC_DUEVO_CLS = 'Y'
    let $GPDE_RC_DUEVO_CLS = 'X'
end-if
! update the status table
do InsertTo_PrcsSt

!restore temporary run_ctl_value
let $GPDE_RC_DUEVO_CLS = $TMP_RC_DUEVO_CLS

!adj09- Multi-SI
move #Datei_Nummer to $Datei_Nummer 099
! show 'xx Open-File - DateiNr: ' $Datei_Nummer

  if $Reset_Vol_Number = 'Y'
    move 0 to #Vol_Number
    let $Reset_Vol_Number = 'N'
  end-if

  add 1 to #Vol_Number
  let #RecordCounter = 0

  move #Vol_Number to $Vol_Number 099
  ! create the filename with a volume number as extension like requested by DEUEV
  !

  ! wdu05-881jw06: filename logic changed, volume no longer needed, counter systemwide (inc-after)
  ! > let $FileNm = rtrim($FileDir,' ') || rtrim($KKName,' ') || rtrim($Datei_Nummer,' ') ||
  ! >              '.' || rtrim($Vol_Number,' ') || '{FILESUFFIX}'
  ! the new version of the name is pretty simplified for DAKOTA

  ! an issue is testing of multiple receivers, because the filenumber will be the same for
  ! each receiver as long as the file is not final. for this purpose we have an additional
  ! test extension to make the names unique
  if $GPDE_RC_DUEVO_CLS = 'Y'
    let $TestExtension = ''
    let $StatusInfo = '(geschlossen)'
  else
!adj09- Multi-SI: add cal run id.
!    let $TestExtension = '_' || rtrim($KKName,' ') || '.txt'
    let $TestExtension = '_' || rtrim($KKName,' ') || '_' || rtrim($Run_Id,' ') ||  '.txt'
    let $StatusInfo = '(nicht geschlossen)'
  end-if

  let $FileNm = rtrim($FileDir,' ') || 'EDUA0' || rtrim($DakotaNummer,' ') || $TestExtension || '{FILESUFFIX}'

  ! rtrim($KKName,' ')

  ! *******************************************************************************
  ! as we cannot open the created files directly from the report repository because
  ! of their name extensions, we create a little helper document which has links to
  ! the real output files.
  !
  ! wdu: This creates one htm per datafile, should be optimized.
  ! *******************************************************************************
  Let $FileNm1 = rtrim($FileDir,' ') || 'EDUA0' || rtrim($DakotaNummer,' ') || $TestExtension || '.htm' || '{FILESUFFIX}'
  open $FileNm1 as 11 for-writing record=512:FIXED_NOLF

  let $Dateiname1 = 'EDUA0'  || rtrim($DakotaNummer,' ') || $TestExtension

  let $XY = '<HTML><HEAD><TITLE>DEUEV DATA</TITLE></HEAD><BODY>' ||
             ' <A HREF=' || $Dateiname1 ||
                                '> DEUEV Datei: ' || $Dateiname1 || ' ' || $StatusInfo  || '</A>' || ' </BODY></HTML>'
  write 11 from $XY
  CLOSE 11
  ! end htm generation

  ! reopen datafile
  open $FileNm as 10 for-writing record={MAX_REC_LEN}
end-procedure Open-File
!**************************************************************************
begin-procedure Open-File-AAG
!    #Vol_Number        --  running number of the disk (?)
!    #RecordCounter     --  rownumber in current disk
!    #aag_file_Nbr      --  the disk number that was handled on the runcontrol
!                           updated only when a disk was finalized and had data.
!                           maintained per sender/receiver combination

  show 'open-file-aag'
  let $File_Already_Open = 'Y'

  ! to close a file, first the NCSZ needs to be written.
  if #Vol_Number_AAG <> 0
    do AAG-End-Record
    close 10
    if #wrong_1st_run = 1
         let #success = delete($FileNm)
         let #success1 = delete($FileNm1)
     end-if

    if $GPDE_RC_DUEVO_CLS = 'Y'
        ! wdu05-881jw06: we now have 2 disk numbers
        ! transmission number counting:  based on sender/receiver combo
        do UpdateInternalFileNumber
        ! increment and update the filecounter in the database (new counting method)
        do IncUpdateDakotaFileNumber
    else
        let #DakotaNummer = #DakotaNummer + 1
    end-if
    move #DakotaNummer to $DakotaNummer 099
    
  end-if

!store temporary run_ctl_value
let $TMP_RC_DUEVO_CLS = $GPDE_RC_DUEVO_CLS

! do not finalize disks without data
if $Print <> 'Y' and $GPDE_RC_DUEVO_CLS = 'Y'
    let $GPDE_RC_DUEVO_CLS = 'X'
end-if
! update the status table
do InsertTo_PrcsSt

!restore temporary run_ctl_value
let $GPDE_RC_DUEVO_CLS = $TMP_RC_DUEVO_CLS

move #aag_file_Nbr to $aag_file_Nbr 099
! show 'xx Open-File - DateiNr: ' $Datei_Nummer

  if $Reset_Vol_Number = 'Y'
    move 0 to #Vol_Number_AAG
    let $Reset_Vol_Number = 'N'
  end-if

  add 1 to #Vol_Number_AAG
  let #RecordCounter_AAG = 0

  move #Vol_Number_AAG to $Vol_Number_AAG 099
  ! create the filename with a volume number as extension like requested by DEUEV
  
  ! an issue is testing of multiple receivers, because the filenumber will be the same for
  ! each receiver as long as the file is not final. for this purpose we have an additional
  ! test extension to make the names unique
  if $GPDE_RC_DUEVO_CLS = 'Y'
    let $TestExtension = ''
    let $StatusInfo = '(geschlossen)'
  else
    let $TestExtension = '_' || rtrim($KKName,' ') || '_' || rtrim($Run_Id,' ') ||  '.txt'
    let $StatusInfo = '(nicht geschlossen)'
  end-if
  !AAG
  let $FileNm_AAG = rtrim($FileDir,' ') || 'EAAG0' || rtrim($DakotaNummer,' ') || $TestExtension || '{FILESUFFIX}'
  SHOW 'FileNm_AAG '$FileNm_AAG
  !AAG NUM - 
  ! rtrim($KKName,' ')

  ! *******************************************************************************
  ! as we cannot open the created files directly from the report repository because
  ! of their name extensions, we create a little helper document which has links to
  ! the real output files.
  !
  ! wdu: This creates one htm per datafile, should be optimized.
  ! *******************************************************************************
  Let $FileNm1 = rtrim($FileDir,' ') || 'EAAG0' || rtrim($DakotaNummer,' ') || $TestExtension || '.htm' || '{FILESUFFIX}'
  open $FileNm1 as 11 for-writing record=512:FIXED_NOLF

  let $Dateiname2 = 'EAAG0'  || rtrim($DakotaNummer,' ') || $TestExtension

  let $XY = '<HTML><HEAD><TITLE>DEUEV DATA</TITLE></HEAD><BODY>' ||
             ' <A HREF=' || $Dateiname2 ||
                                '> DEUEV Datei: ' || $Dateiname2 || ' ' || $StatusInfo  || '</A>' || ' </BODY></HTML>'
  write 11 from $XY
  CLOSE 11
  ! end htm generation

  ! reopen datafile
  open $FileNm_AAG as 10 for-writing record={MAX_REC_LEN}
end-procedure Open-File-AAG
!**********************************************************
begin-procedure UpdateInternalFileNumber

let $sql-statement = 'GPDEDV01.SQR,Update-File-Nbr,Update'

! wdu06-881b11 counting issue
! the #RecordCounter also counts DSKO, so an empty disk counts as well
! and will increase the counter
if #RecordCounter > 1
  if #Datei_Nummer = 999
   begin-SQL

    UPDATE PS_GPDE_DV_RUN_DSK
     SET GPDE_RC_FILE_NBR = 1
     WHERE OPRID = $Prcs_Oprid
     AND   RUN_CNTL_ID = $Prcs_Run_Cntl_Id

   end-SQL
  else
    ! ---- wdu06-881b11 counting issue
    ! there is no point in updating the filenumber in the runcontrol as this is
    ! done by the online peoplecode in the page.
    ! let #Datei_Nummer = #Datei_Nummer + 1
    ! ---- begin-SQL
    ! ----  UPDATE PS_GPDE_DV_RUN_DSK
    ! ----  SET GPDE_RC_FILE_NBR = #Datei_Nummer
    ! ----  WHERE OPRID = $Prcs_Oprid
    ! ----  AND   RUN_CNTL_ID = $Prcs_Run_Cntl_Id
    ! ---- end-SQL
    ! ----
    end-if
end-if
!AAG
if #RecordCounter_AAG > 1
  if #aag_file_Nbr = 999
   begin-SQL
    UPDATE PS_GPDE_DV_RUN_DSK
     SET GPDE_RC_AAG_FILNBR = 1
     WHERE OPRID = $Prcs_Oprid
     AND   RUN_CNTL_ID = $Prcs_Run_Cntl_Id
   end-SQL  
  end-if
end-if

end-procedure UpdateInternalFileNumber


!**********************************************************
!adj09- Multi-SI: new procedure to get the internal filenumber
begin-procedure GetInternalFileNumber($Provider_ID, $xx_oprid, $xx_run_ctl, :#Datei_Nbr, :$Datei_Nbr )
begin-select
RB1.GPDE_RC_FILE_NBR
   let #Datei_Nbr       = &RB1.GPDE_RC_FILE_NBR
FROM PS_GPDE_DV_RNDSK RB1
WHERE RB1.OPRID = $xx_oprid
AND   RB1.RUN_CNTL_ID = $xx_run_ctl
AND   RB1.GPDE_DV_RCVER_ID = $Provider_ID
end-select

if #Datei_Nbr = 0
   let #Datei_Nbr = 1
end-if
move #Datei_Nbr to $Datei_Nbr 099
end-procedure GetInternalFileNumber

begin-procedure GetInternalFileNumber_AAG($Provider_ID, $xx_oprid, $xx_run_ctl, :#aag_file_Nbr, :$aag_file_Nbr )
begin-select
RB1.GPDE_RC_AAG_FILNBR
   let #aag_file_Nbr       = &RB1.GPDE_RC_AAG_FILNBR
FROM PS_GPDE_DV_RNDSK RB1
WHERE RB1.OPRID = $xx_oprid
AND   RB1.RUN_CNTL_ID = $xx_run_ctl
AND   RB1.GPDE_DV_RCVER_ID = $Provider_ID
end-select

if #aag_file_Nbr = 0
   let #aag_file_Nbr = 1
end-if
move #aag_file_Nbr to $aag_file_Nbr 099
end-procedure GetInternalFileNumber_AAG


begin-procedure GetCurrentDakotaFileNumber
! wdu05-881jw06: the external filenumber is systemwide now
! the filenumber is now managed thru a dummy system company and provider
    let #DakotaNummer = 0
    let $DakotaNummerExists='N'
begin-select
FN.PAY_ENTITY
FN.GPDE_DV_RCVER_ID
FN.GPDE_RC_FILE_NBR
FN.GPDE_SI_IS_KVDR
       let #DakotaNummer = &FN.GPDE_RC_FILE_NBR
       let $DakotaNummerExists='Y'
from PS_GPDE_RC_SI10_1 FN
where FN.PAY_ENTITY = 'SYSDV'
  and FN.GPDE_DV_RCVER_ID = 'SYSDV'
  AND FN.GPDE_SI_IS_KVDR='N'
end-select
    if $ResetFileNumber = 'Y'
       let #DakotaNummer = 1
    end-if

    ! this is a workaround when the row initially does not exist
    if #DakotaNummer = 0
       let #DakotaNummer = 1
    end-if

    ! restart when number range overflows
    if #DakotaNummer > 999
       let #DakotaNummer = 1
    end-if
end-procedure
!*************************************************





begin-procedure IncUpdateDakotaFileNumber
! wdu05-881jw06: the filenumber is systemwide now
! the filenumber is now managed thru a dummy system company and provider

! increment and update, but only change the number if we really had data

! wdu06-881b11 counting issue
! the #RecordCounter also counts DSKO, so an empty disk counts as well
! and will increase the counter
if #RecordCounter > 1
    let #DakotaNummer = #DakotaNummer + 1
    ! restart when number range overflows
    if #DakotaNummer > 999
       let #DakotaNummer = 1
    end-if

if $DakotaNummerExists = 'Y'
begin-sql
update PS_GPDE_RC_SI10_1
set GPDE_RC_FILE_NBR = #DakotaNummer
where PAY_ENTITY = 'SYSDV'
  and GPDE_DV_RCVER_ID = 'SYSDV'
  AND GPDE_SI_IS_KVDR='N'
end-sql
else
begin-sql
insert into PS_GPDE_RC_SI10_1(PAY_ENTITY,GPDE_DV_RCVER_ID,GPDE_SI_IS_KVDR,GPDE_RC_FILE_NBR )
values ('SYSDV','SYSDV','N',#DakotaNummer)
end-sql
end-if
end-if
end-procedure
!*************************************************



!**********************************************************************
begin-procedure Get_VersionNr

begin-select
VERS.GPDE_VERSION_NR
VERS.NAME

! jjj-89B11-1674660000: 20th Jul 07 Changes for MODID.
VERS.GPDE_DV_PRODID
VERS.GPDE_DV_MODID


from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')

let $PRODID = &VERS.GPDE_DV_PRODID
let $MODID = &VERS.GPDE_DV_MODID

end-procedure


!*********************************************************
begin-procedure Get_PayEntity
begin-select
PESND.PAY_ENTITY
from PS_GPDE_DV_SNDR_VW PESND
where PESND.CAL_RUN_ID = $Run_Id and
      PESND.GPDE_DV_SENDER_ID = $Absender_Nbr
end-select

let $Ctl_Pay_Entity = rtrim(&PESND.PAY_ENTITY,' ')

end-procedure


!*********************************************************
begin-procedure Get_Beg_End_Period


begin-SELECT DISTINCT
CRM1.PRD_BGN_DT
CRM1.PRD_END_DT

FROM PS_GP_CAL_RUN CPM1 , PS_GP_CAL_RUN_DTL CRM1
WHERE CPM1.CAL_RUN_ID  = $Run_Id AND
CPM1.CAL_RUN_ID  = CRM1.CAL_RUN_ID AND
(CPM1.RUN_FINALIZED_IND='Y' OR CPM1.RUN_OPEN_IND='Y') AND
CRM1.PAY_ENTITY = $Ctl_Pay_Entity

end-SELECT

  let $Ctl_Beg_Dt = &CRM1.PRD_BGN_DT
  let $Ctl_End_Dt = &CRM1.PRD_END_DT

if rtrim($Ctl_End_Dt,' ') = ''
   let $Ctl_End_Dt = $AsOfToday
end-if
End-procedure




!*********************************************************
begin-procedure Print-Begleitzettel
! wdu05b6: changes to sender and receiver address layout (absolute positions)
! wdu05-881b9 major layout rework and cleanout

! wdu06-881b11 Begleitzettel is deprecated
! This part of the report is basically no longer required when
! electronic transmission with dakotaag is used.


new-report $File-Begleit
let $ReportTitle = 'Datenträgerbegleitschreiben'
let $ReportTitle2 = ''
let $FootLine = ''

do Get_VersionNr

! regular forn print
alter-printer
point-size = 10

    print 'Auszufüllen von der Annahmestelle:'      (1,{col5})
    print 'Eingang: '                               (+2,{col5})
    print 'Verarbeitung: '                          (+1,{col5})
    print 'Betriebsnummer: '                        (+1,{col5})
    print $Absender_Nbr                             (0,{col5b})
    print 'Datum: '                                 (+1,{col5})
    do Format-DateTime($AsOfToday,$out,{DEFDATE},'','')
    print $out                                      (0,{col5b})



! restart of positioning!
    print 'Betriebsnummer:   '      (13,{col5})
    print $Empf_Nbr                 (0,{col5b})
    !wdu 18.6.2002 add of license number
    ! ------ wdu06-881b11 removal of DEUEV license number (ICE 1496731000)
    ! -- print 'Zulassungsnummer: '      (+1,{col5})
    ! -- print $License_Nbr              (0,{col5b})
    ! ------
!
! create the actually printed address fields for Sender
!
let $AdrSenderName   = rtrim($Absender,' ')
let $AdrSenderStreet = rtrim(ltrim($Address1, ' '), ' ')
let $AdrSenderPostalCity   = rtrim(ltrim($Postal_abs,' '), ' ') || ' ' ||  rtrim(ltrim($City_abs, ' '), ' ')

! sender name -- there is no room for regular sender block--only use envelope window line
! from:
print $AdrSenderName                (1,{col1})          !new absolute position
print $AdrSenderStreet              (+1,{col1})
print $AdrSenderPostalCity                (+1,{col1})


! envelope window line in smaller print
alter-printer
point-size = 7.2
print $AdrSenderName                (11,{col1})
print ' - '                         (,)
print $AdrSenderStreet              (,)
print ' - '                         (,)
print $AdrSenderPostalCity          (,)

! -------------------------------------------------------------

! receiver in regular print, minimum 10 pt
alter-printer
point-size = 10

!    print 'Empfänger: '             (13,{col1})
    print $Empfaenger               (+3,{col1})

    print $Address1_Other           (+1,{col1})

    let $out = rtrim($Postal_Other,' ') || ' ' || $City_Other
    print $out                      (+1,{col1})
    !print ' '                       (0,0)
    !print $City_Other               (0,0)

    !2004changedforBundle2:Printsize adress

print '-' (25,120)   !foldmark right
print 'Datenübermittlung nach DEÜV'                                               (26,{col1}) bold
print 'Wir senden Ihnen nachfolgend aufgeführte(n)Datenträger zu, mit der Bitte ' (+2,{col1})
print 'um Übernahme und Weiterleitung der Meldedaten.' (+1,{col1})

! table content in fineprint
alter-printer
point-size = 7.2

print '_'                       (+2,{col1},{mcol_right_margin})FILL
print 'Datenträger: '           (+1,{col1})

if $Ctl_Diskette_Type = '1' or $Ctl_Diskette_Type = '2'
   print 'Diskette'             (0,0)
else
   print 'Magnetband'           (0,0)
end-if

print '_'                       (+1,{col1},{mcol_right_margin})FILL

print 'Bandkennzeichen'         (+2,{col1})
print 'Erstelldatum '           (0,{b2})
print 'Dateinummer '            (0,{b3})
print 'Anzahl Datensätze '      (0,{b4})

let #row_count = 0

while #row_count < #row
  get #x1 $X2   #x3  #x4 from begleit(#row_count)

  print #x1                     (+1,{col1}) edit 999
  do Format-DateTime($x2,$out,{DEFDATE},'','')
  print $out                    (0,{b2})
  print #x3                     (0,{b3})  edit 099
  print #x4                     (0,{b4})  edit 999999

  let #row_count = #row_count + 1

end-while

print '_'                       (+2,{col1},{mcol_right_margin})FILL

! regular font again
alter-printer
point-size = 10

! wdu 18.6.2002
! Moh 21.06.2002

let $Bemerk = 'Erstellt mit Programmversion: ' || $Bezeichn || ' ' || $VersionsNr
print $Bemerk (+2,{col1})


!RH07 89b06 modify logic as to how clerk information is imported into SQR
!if rtrim($Clerk_PHONE,' ') <> ''
   let $ClerkPhone = rtrim($Clerk_PHONE,' ')
!end-if
!if rtrim($Clerk_FAX,' ') <> ''
   let $ClerkFAX = rtrim($Clerk_FAX,' ')
!end-if

!if rtrim($Clerk_EMAIL,' ') <> ''
   let $ClerkEMAIL = rtrim($Clerk_EMAIL,' ')
!end-if

!if rtrim($Clerk_DEPTNAME,' ') <> ''
   let $Dept_ID_Descr =  rtrim($Clerk_DEPTNAME,' ')
!end-if

! wdu05b6 changed clerk name, because it does not show up
!--   let $OPRDF.OPRDEFNDESC = rtrim($Clerk_GPDE_CLERK,' ')
! RH07 89b06 - modify logic clerk informtaion is passed into SQR
        let $ClerkNm_prn = rtrim($Clerk_NAME,' ')

        let $zeile = 'Sachbearbeiter: ' || $ClerkNm_prn
        print $zeile                    (+3,{col1})
        let $zeile = 'Telefon:        ' || $ClerkPhone
        print $zeile                    (+1,{col1})
        let $zeile = 'eMail:          ' || $ClerkEMAIL
        print $zeile                    (+1,{col1})

print '_____________________'   (+5,{col1})
print '    Unterschrift'         (+1,{col1})




end-procedure


!*********************************************************
begin-procedure Get-Provider-Address($Prov_Type, :$Empf_Nbr, :$Empfaenger, :$Address1_Other,
                :$Postal_Other, :$City_Other, :$Krankenkasse)

begin-SELECT


DP1.DESCR
DP1.ADDRESS1
DP1.POSTAL
DP1.CITY
DP1.GPDE_SI_PROV_ID

   let $Empf_Nbr = &DP1.GPDE_SI_PROV_ID
   let $Empfaenger = &DP1.DESCR
   let $Address1_Other = &DP1.ADDRESS1
   let $Postal_Other  = &DP1.POSTAL
   let $City_Other     = &DP1.CITY

FROM PS_GPDE_DV_RCVR_VW DP1
WHERE DP1.GPDE_SI_PROV_ID = $Prov_Type
AND   DP1.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_GPDE_DV_RCVR_VW DP3
                   WHERE DP3.GPDE_SI_PROV_ID = DP1.GPDE_SI_PROV_ID
                   AND DP3.EFFDT <= $_AsOfToday)
end-SELECT

end-procedure Get-Provider-Address
!*********************************************************




begin-procedure Ddisk_Error_Proc_01

begin-SQL ON-ERROR=SQL-Error

INSERT INTO PS_GPDE_DV_DISK_E
(
EMPLID,
EMPL_RCD,
GPDE_DV_EVT_EFFDT,
GPDE_DV_REP_RSN,
GPDE_DV_RUN,
GPDE_DV_CANCEL,
GPDE_DV_EVT_TYPE,
DTTM_CREATED,
GPDE_DV_RVNR,
GPDE_SI_BTNR,
GPDE_SI_PROV,
GPDE_SI_PROV_ID,
GPDE_DV_EMPL_CAT,
NATION_CD,
GPDE_DV_DBME,
GPDE_DV_DBNA,
GPDE_DV_DBGB,
GPDE_DV_DBAN,
GPDE_DV_DBEU,
GPDE_DV_DBSO,
GPDE_DV_REP_DATE,
GPDE_AL_FREQUENCY,
GPDE_DV_REP_TYPE,
GPDE_DV_REP_STATUS,
CAL_RUN_ID,
GPDE_DV_WORKED,
GPDE_DV_REP

)
select distinct
DSME.EMPLID,
DSME.EMPL_RCD,
DSME.GPDE_DV_EVT_EFFDT,
DSME.GPDE_DV_REP_RSN,
DSME.GPDE_DV_RUN,
DSME.GPDE_DV_CANCEL,
DSME.GPDE_DV_EVT_TYPE,
DSME.DTTM_CREATED,
DSME.GPDE_DV_RVNR,
DSME.GPDE_SI_BTNR,
DSME.GPDE_SI_PROV,
DSME.GPDE_SI_PROV_ID,
DSME.GPDE_DV_EMPL_CAT,
DSME.NATION_CD,
DSME.GPDE_DV_DBME,
DSME.GPDE_DV_DBNA,
DSME.GPDE_DV_DBGB,
DSME.GPDE_DV_DBAN,
DSME.GPDE_DV_DBEU,
DSME.GPDE_DV_DBSO,
DSME.GPDE_DV_REP_DATE,
DSME.GPDE_AL_FREQUENCY,
DSME.GPDE_DV_REP_TYPE,
DSME.GPDE_DV_REP_STATUS,
DSME.CAL_RUN_ID,
DSME.GPDE_DV_WORKED,
DSME.GPDE_DV_REP


from PS_GPDE_DV_DSME DSME
, PS_GPDE_SI_PROV PTD
where (DSME.GPDE_DV_REP_DATE is NULL)
AND   DSME.GPDE_DV_REP_STATUS <> 'F'
AND   DSME.GPDE_SI_PROV_ID = PTD.GPDE_SI_PROV_ID
AND   PTD.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_GPDE_SI_PROV PTD2
                   WHERE PTD2.GPDE_SI_PROV = PTD.GPDE_SI_PROV
                   AND   PTD2.EFFDT <= DSME.GPDE_DV_EVT_EFFDT
                  )
!Adj09:Mul Recv
!AND   PTD.GPDE_DV_RCVER_ID = &RUN_GPDE_DO_PROV_ID
AND   PTD.GPDE_DV_RCVER_ID = $Prov_Type
AND   NOT EXISTS
      (SELECT 'X' FROM PS_GPDE_DV_DISK_E ERR2
       WHERE ERR2.EMPLID          = DSME.EMPLID
         AND ERR2.EMPL_RCD       = DSME.EMPL_RCD
         AND ERR2.GPDE_DV_EVT_EFFDT = DSME.GPDE_DV_EVT_EFFDT
         AND ERR2.GPDE_DV_REP_RSN  = DSME.GPDE_DV_REP_RSN
         AND ERR2.GPDE_DV_RUN      = DSME.GPDE_DV_RUN
         AND ERR2.GPDE_DV_CANCEL   = DSME.GPDE_DV_CANCEL)

end-SQL

end-procedure Ddisk_Error_Proc_01
!*********************************************************
begin-procedure Ddisk_Error_Proc_02

begin-SQL ON-ERROR=SQL-Error

INSERT INTO PS_GPDE_DV_DISK_E
(
EMPLID,
EMPL_RCD,
GPDE_DV_EVT_EFFDT,
GPDE_DV_REP_RSN,
GPDE_DV_RUN,
GPDE_DV_CANCEL,
GPDE_DV_EVT_TYPE,
DTTM_CREATED,
GPDE_DV_RVNR,
GPDE_SI_BTNR,
GPDE_SI_PROV,
GPDE_SI_PROV_ID,
GPDE_DV_EMPL_CAT,
NATION_CD,
GPDE_DV_DBME,
GPDE_DV_DBNA,
GPDE_DV_DBGB,
GPDE_DV_DBAN,
GPDE_DV_DBEU,
GPDE_DV_DBSO,
GPDE_DV_REP_DATE,
GPDE_AL_FREQUENCY,
GPDE_DV_REP_TYPE,
GPDE_DV_REP_STATUS,
CAL_RUN_ID,
GPDE_DV_WORKED,
GPDE_DV_REP
)
select distinct
DSME.EMPLID,
DSME.EMPL_RCD,
DSME.GPDE_DV_EVT_EFFDT,

DSME.GPDE_DV_REP_RSN,
DSME.GPDE_DV_RUN,
DSME.GPDE_DV_CANCEL,
DSME.GPDE_DV_EVT_TYPE,
DSME.DTTM_CREATED,
DSME.GPDE_DV_RVNR,
DSME.GPDE_SI_BTNR,
DSME.GPDE_SI_PROV,
DSME.GPDE_SI_PROV_ID,
DSME.GPDE_DV_EMPL_CAT,
DSME.NATION_CD,
DSME.GPDE_DV_DBME,
DSME.GPDE_DV_DBNA,
DSME.GPDE_DV_DBGB,
DSME.GPDE_DV_DBAN,
DSME.GPDE_DV_DBEU,
DSME.GPDE_DV_DBSO,
DSME.GPDE_DV_REP_DATE,
DSME.GPDE_AL_FREQUENCY,
DSME.GPDE_DV_REP_TYPE,
DSME.GPDE_DV_REP_STATUS,
DSME.CAL_RUN_ID,
DSME.GPDE_DV_WORKED,
DSME.GPDE_DV_REP

FROM
PS_GPDE_DV_DSME DSME
, PS_GPDE_SI_PROV PTD

where (DSME.GPDE_DV_REP_DATE is NULL)
AND   DSME.GPDE_SI_PROV_ID = PTD.GPDE_SI_PROV_ID
AND   PTD.EFFDT = (
                   SELECT MAX(EFFDT)
                   FROM PS_GPDE_SI_PROV PTD2
                   WHERE PTD2.GPDE_SI_PROV = PTD.GPDE_SI_PROV
                   AND   PTD2.EFFDT <= DSME.GPDE_DV_EVT_EFFDT
                  )
!Adj09:Mul Recv
!AND   PTD.GPDE_DV_RCVER_ID = &RUN_GPDE_DO_PROV_ID
AND   PTD.GPDE_DV_RCVER_ID = $Prov_Type
AND   DSME.CAL_RUN_ID = $Run_Id
AND   DSME.GPDE_DV_REP_STATUS <> 'F'
AND   NOT EXISTS
      (SELECT 'X' FROM PS_GPDE_DV_DISK_E ERR2
       WHERE ERR2.EMPLID          = DSME.EMPLID
         AND ERR2.EMPL_RCD       = DSME.EMPL_RCD
         AND ERR2.GPDE_DV_EVT_EFFDT = DSME.GPDE_DV_EVT_EFFDT
         AND ERR2.GPDE_DV_REP_RSN  = DSME.GPDE_DV_REP_RSN
         AND ERR2.GPDE_DV_RUN      = DSME.GPDE_DV_RUN
         AND ERR2.GPDE_DV_CANCEL   = DSME.GPDE_DV_CANCEL)

end-SQL


end-procedure Ddisk_Error_Proc_02


!***
begin-procedure Get-RunCntl-Data($prcs_oprid, $prcs_run_cntl_id)

BEGIN-SELECT

GPDE_DV_SENDER_ID          &_RUN_GPDE_DV_SENDER_ID
ADDRESS1                   &_RUN_ADDRESS1
ADDRESS2                   &_RUN_ADDRESS2
ADDRESS3                   &_RUN_ADDRESS3
ADDRESS4                   &_RUN_ADDRESS4
POSTAL                     &_RUN_POSTAL
CITY                       &_RUN_CITY
DESCR                      &_RUN_DESCR
GPDE_RC_DISK_TYPE          &_RUN_GPDE_RC_DISK_TYPE
GPDE_RC_FILE_NBR           &_RUN_GPDE_RC_FILE_NBR
GPDE_RC_AAG_FILNBR         &_RUN_GPDE_RC_AAG_FILNBR
GPDE_RC_DUEVO_CLS          &_RUN_GPDE_RC_DUEVO_CLS
GPDE_DV_RCVER_ID           &_RUN_GPDE_DO_PROV_ID
CAL_RUN_ID                 &_RUN_RUN_ID

! RH07 89b06 - change Clerk information retreival logic. All relevant
! information is handed in into the SQR
GPDE_AL_OPRNAME            &_Clerk_EMPLID
GPDE_AL_CONTACT_NM         &_Clerk_NAME
GPDE_AL_PHONE              &_Clerk_PHONE
GPDE_AL_FAX                &_Clerk_FAX
GPDE_AL_EMAIL              &_Clerk_EMAIL
GPDE_AL_GENDER              &_Clerk_GENDER      !jjj-89b13-1738246000
!PHONE                      &_Clerk_PHONE
!DEPTNAME                   &_Clerk_DEPTNAME
!GPDE_CLERK                 &_Clerk_GPDE_CLERK

    let $_Absender           = &_RUN_DESCR
    let $_Absender_Nbr       = &_RUN_GPDE_DV_SENDER_ID
    let $_Address1           = &_RUN_ADDRESS1
        let $_Address2           = &_RUN_ADDRESS2
        let $_Address3           = &_RUN_ADDRESS3
        let $_Address4           = &_RUN_ADDRESS4
    let $_Postal             = &_RUN_POSTAL
    let $_Postal_abs         = &_RUN_POSTAL
    let $_City               = &_RUN_CITY
    let $_City_abs           = &_RUN_CITY
    let $_Ctl_Diskette_Type  = &_RUN_GPDE_RC_DISK_TYPE
    ! wdu05-881jw06: the disk number is taken from an other place now.
    let #_Datei_Nummer       = &_RUN_GPDE_RC_FILE_NBR
    !let #_aag_file_Nbr       = &_RUN_GPDE_RC_AAG_FILNBR
     
! RH - 2007B09 - change Clerk information retreival logic. All relevant
! information is handed in into the SQR
    let $_Clerk_GPDE_CLERK = &_Clerk_EMPLID
    let $_Clerk_GENDER = &_Clerk_GENDER
    let $_Clerk_NAME = &_Clerk_NAME
    let $_Clerk_PHONE = &_Clerk_PHONE
    let $_Clerk_FAX = &_Clerk_FAX
    let $_Clerk_EMAIL = &_Clerk_EMAIL
!    let $_Clerk_DEPTNAME =  &_Clerk_DEPTNAME



    let $_GPDE_RC_DUEVO_CLS        = &_RUN_GPDE_RC_DUEVO_CLS
    let $_Prov_Type          = rtrim(&_RUN_GPDE_DO_PROV_ID, ' ')
    let $_Run_Id             = &_RUN_RUN_ID
    if rtrim ($_Run_Id, ' ') <> ''
       let $_Runid_Criteria = ' AND DSME.CAL_RUN_ID = '
       let $_Runid_Criteria = $_Runid_Criteria || ''''
       let $_Runid_Criteria = $_Runid_Criteria || $_Run_Id
       let $_Runid_Criteria = $_Runid_Criteria || ''''



    end-if
FROM PS_GPDE_DV_RUN_DSK

WHERE OPRID = $prcs_oprid
AND   RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

!Adj09:Mul Recv
do Get_First_Receiver

do Get_Receiver_Name
! -- wdu06-881b11 removal of DEUEV license number (ICE 1496731000)
! -- do Get_Pay_Entity_License
do Get_PayEntity
do Get_Beg_End_Period

end-procedure Get-RunCntl-Data

!************************************************************************
!Adj09:Mul Recv
begin-procedure Get_First_Receiver
! Retrieve the first Receiver from the Run Control Record (Level 1)

let $Prov_Type = ''
let #RecRowCount = 0

begin-select
LOOP1.GPDE_DV_RCVER_ID
  let #RecRowCount = #RecRowCount + 1
  if #RecRowCount = 1
    let $Prov_Type =  &LOOP1.GPDE_DV_RCVER_ID
    let $CHK_RCVER_ID =  $Prov_Type
  end-if
FROM PS_GPDE_DV_RNDSK LOOP1
WHERE LOOP1.OPRID = $prcs_oprid and
      LOOP1.RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY LOOP1.GPDE_DV_RCVER_ID
end-select

end-procedure



!********************************************************************************
begin-procedure Get_Receiver_Name
let $KKName = ' '
let $Exit_Report = 'N'
begin-select DISTINCT
AP.GPDE_SI_PROV
  let $KKName = rtrim(&AP.GPDE_SI_PROV, ' ')

FROM PS_GPDE_SI_PROV AP
WHERE AP.GPDE_SI_PROV_ID = $Prov_Type
AND AP.EFFDT = (select max(EFFDT) from PS_GPDE_SI_PROV AP1
    where AP1.GPDE_SI_PROV = AP.GPDE_SI_PROV and
              AP1.EFFDT <= $AsOfToday)
AND AP.GPDE_DV_RCVER_YN = 'Y'
end-select

if rtrim($KKName, ' ') = ''
  let $Exit_Report = 'Y'
end-if
end-procedure



!********************************************************************************
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add $DBUV_YES_NO
   ! byarn12-90B-13395876 : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Add $DBKV_YES_NO
begin-procedure Process_DB_Data($DBME_YES_NO, $DBNA_YES_NO, $DBGB_YES_NO,
                            $DBAN_YES_NO, $DBEU_YES_NO, $DBSO_YES_NO, $DBUV_YES_NO,$DBKV_YES_NO,
                            $EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                            #GPDE_DV_RUN, $GPDE_DV_CANCEL, $PROVIDER_ID)


   ! Init result strings
   let $WRITE_DSME_TO_FILE = ''
   let $WRITE_DBME_TO_FILE = ''
   let $WRITE_DBNA_TO_FILE = ''
   let $WRITE_DBGB_TO_FILE = ''
   let $WRITE_DBAN_TO_FILE = ''
   let $WRITE_DBEU_TO_FILE = ''
   let $WRITE_DBSO_TO_FILE = ''
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add $WRITE_DBUV_TO_FILE
   let $WRITE_DBUV_TO_FILE = ''

   ! byarn12-90- : 12 Mar 2012 Tax Update 2012 - New DBKV Datablock. Add $WRITE_DBKsV_TO_FILE
   let $WRITE_DBKV_TO_FILE = ''

    
   ! Build '$WRITE_DSME_TO_FILE'
   do Build-WRITE_DSME_TO_FILE($WRITE_DSME_TO_FILE, $PROVIDER_ID)

   
   let $_GleitZone = ' '
   if $DBME_YES_NO = 'Y'
      do Get_DBME_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DBME_GPDE_DV_CTRL_RPT, $DBME_begin_dt,
        $DBME_end_dt,#DBME_GPDE_DV_NBR_OF_DYS, $DBME_currency_cd, #DBME_GPDE_BL_AMT,
        $DBME_GPDE_DV_SV_CODE,$DBME_GPDE_DV_BA_CD, $DBME_GPDE_SI_REGION,
        $DBME_GPDE_SI_EMPL_MULT)
      let $_GleitZone = $DBME_GPDE_DV_CTRL_RPT

      do Process_DBME_Data($GPDE_DV_CANCEL, $DBME_GPDE_DV_CTRL_RPT, $DBME_begin_dt, $DBME_end_dt,
                        #DBME_GPDE_DV_NBR_OF_DYS,$DBME_currency_cd, #DBME_GPDE_BL_AMT,
         $DBME_GPDE_DV_SV_CODE,$DBME_GPDE_DV_BA_CD, $DBME_GPDE_SI_REGION,
         $DBME_GPDE_SI_EMPL_MULT, $WRITE_DBME_TO_FILE)
   end-if
   
  ! byarn12-90B-13395876 : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Add $DBKV Processing
  if $DBKV_YES_NO = 'Y'       
      do Get_DBKV_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DBKV_GPDE_DV_CTRL_RPT, $DBKV_begin_dt,
                       $DBKV_end_dt,#DBKV_GPDE_RP_SIGRS_ANLZ, #DBKV_GPDE_DV_ONETIME_PAY,#DBKV_GPDE_RP_SIDAYS, 
                       #DBKV_GPDE_RP_KUG_RVGRS,$DBKV_GPDE_MJ_GZ_CALC,$DBKV_GPDE_SI_EMPL_MULT,#DBKV_GPDE_DV_KV_RSN,#DBKV_GPDE_DV_RJEG,#DBKV_GPDE_DV_BBGRUATG,$DBKV_GPDE_DV_SV_CODE,$DBKV_GPDE_SI_REGION)
      let $_GleitZone = $DBKV_GPDE_DV_CTRL_RPT

      do Process_DBKV_Data($GPDE_DV_CANCEL, $DBKV_GPDE_DV_CTRL_RPT, $DBKV_begin_dt, $DBKV_end_dt, 
                          #DBKV_GPDE_RP_SIGRS_ANLZ, #DBKV_GPDE_DV_ONETIME_PAY,#DBKV_GPDE_RP_SIDAYS,
                          #DBKV_GPDE_RP_KUG_RVGRS,$DBKV_GPDE_MJ_GZ_CALC,$DBKV_GPDE_SI_EMPL_MULT,
                          #DBKE_GPDE_DV_KV_RSN,#DBKV_GPDE_DV_RJEG,#DBKV_GPDE_DV_BBGRUATG,$DBKV_GPDE_DV_SV_CODE,$DBKV_GPDE_SI_REGION,$WRITE_DBKV_TO_FILE)         
         
   end-if
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add DBUV processing
   if $DBUV_YES_NO = 'Y'
      ! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - remove DBUV fields and add $WRITE_DBUV_TO_FILE
      do Get_DBUV_Data($emplid,#EMPL_RCD_NBR,$GPDE_DV_EVT_EFFDT,$GPDE_DV_REP_RSN,#GPDE_DV_RUN,$GPDE_DV_CANCEL, $WRITE_DBUV_TO_FILE)

       ! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - function will be called from Get_DBUV_Data
      ! do Process_DBUV_Data($DBUV_ACCIDENT_INS, $DBUV_SI_ACCIDENT_NUM , $DBUV_GPDE_HAZARD1 , #DBUV_GPDE_AI_GROSS1 , #DBUV_GPDE_AI_HRS1 ,
      !                                                                 $DBUV_GPDE_HAZARD2 , #DBUV_GPDE_AI_GROSS2 , #DBUV_GPDE_AI_HRS2 ,$DBUV_GPDE_HAZARD3 , #DBUV_GPDE_AI_GROSS3 , #DBUV_GPDE_AI_HRS3 ,
      !                                                                 $DBUV_GPDE_HAZARD4 , #DBUV_GPDE_AI_GROSS4 , #DBUV_GPDE_AI_HRS4, #DBUV_HAZAR_TOTAL, $WRITE_DBUV_TO_FILE)
   end-if

   if $DBNA_YES_NO = 'Y'
      do Get_DBNA_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DBNA_GPDE_DV_LAST_NAME,
        $DBNA_GPDE_DV_FIRST_NAME,$DBNA_name_royal_prefix, $DBNA_name_royal_suffix,
        $DBNA_name_title, $DBNA_GPDE_DV_CHANGE_REP)

      do Process_DBNA_Data($DBNA_GPDE_DV_LAST_NAME, $DBNA_GPDE_DV_FIRST_NAME, $DBNA_name_royal_prefix,
                           $DBNA_name_royal_suffix, $DBNA_name_title, $DBNA_GPDE_DV_CHANGE_REP,
         $WRITE_DBNA_TO_FILE)
   end-if

   if $DBGB_YES_NO = 'Y'
      do Get_DBGB_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN, #GPDE_DV_RUN,
                       $GPDE_DV_CANCEL, $DBGB_GPDE_DV_BIRTHNAME, $DBGB_GPDE_DV_BIRTHNAME,
        $DBGB_name_royal_prefix,$DBGB_name_royal_suffix, $DBGB_birthdate,
        $DBGB_sex, $DBGB_birthplace)

      do Process_DBGB_Data($DBGB_GPDE_DV_BIRTHNAME, $DBGB_name_royal_prefix, $DBGB_name_royal_suffix,
      $DBGB_birthdate, $DBGB_sex, $DBGB_birthplace, $WRITE_DBGB_TO_FILE)

      do Print-Data-DBGB($EMPLID, #EMPL_RCD_NBR, &_DSME_RVNR, $DBGB_birthdate, $DBGB_sex,
   $DBGB_name_royal_prefix,$DBGB_GPDE_DV_BIRTHNAME, $DBGB_name_royal_suffix, $DBGB_birthplace)

   end-if

   if $DBAN_YES_NO = 'Y'
      do Get_DBAN_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DBAN_nationality_cd,
                       $DBAN_postal, $DBAN_city, $DBAN_address1, $DBAN_address2)

      do Process_DBAN_Data($DBAN_nationality_cd, $DBAN_postal, $DBAN_city,
                           $DBAN_address1, $DBAN_address2, $WRITE_DBAN_TO_FILE)
   end-if

   if $DBEU_YES_NO = 'Y'
      do Get_DBEU_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL,
                       $DBEU_birthcountry, $DBEU_GPDE_DV_EU_SSN)

      do Process_DBEU_Data($DBEU_birthcountry, $DBEU_GPDE_DV_EU_SSN, $WRITE_DBEU_TO_FILE)

      do Print-Data-DBEU($EMPLID, #EMPL_RCD_NBR, $DBEU_birthcountry, $DBEU_GPDE_DV_EU_SSN)
   end-if

   if $DBSO_YES_NO = 'Y'
      do Get_DBSO_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                       #GPDE_DV_RUN, $GPDE_DV_CANCEL,
                       $DBSO_begin_dt, $DBSO_GPDE_SI_EMPL_MULT, $DBSO_GPDE_DV_CTRL_RPT,
                       $DBSO_GPDE_SI_EMPL_INSIG)

      do Process_DBSO_Data($DBSO_begin_dt, $DBSO_GPDE_SI_EMPL_MULT, $DBSO_GPDE_DV_CTRL_RPT,
                           $DBSO_GPDE_SI_EMPL_INSIG, $WRITE_DBSO_TO_FILE)
   end-if

   let $W1 = $WRITE_DSME_TO_FILE
   let $W2 = $WRITE_DBME_TO_FILE
   let $W3 = $WRITE_DBNA_TO_FILE
   let $W4 = $WRITE_DBGB_TO_FILE
   let $W5 = $WRITE_DBAN_TO_FILE
   let $W6 = $WRITE_DBEU_TO_FILE
   let $W7 = $WRITE_DBSO_TO_FILE
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Process DBUV
   let $W8 = $WRITE_DBUV_TO_FILE   
   ! byarn12-90- : 12 Mar12 Tax Update 2012 - New DBKV Datablock. Process DBKV
   let $W9 = $WRITE_DBKV_TO_FILE   
   
   do Chg-Char($W1,$W1)
   do Chg-Char($W2,$W2)
   do Chg-Char($W3,$W3)
   do Chg-Char($W4,$W4)
   do Chg-Char($W5,$W5)
   do Chg-Char($W6,$W6)
   do Chg-Char($W7,$W7)
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Process DBUV
   do Chg-Char($W8,$W8)
   ! byarn12-90- : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Process DBKV
   do Chg-Char($W9,$W9)
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add $W8
   ! byarn12-90- : 12 Mar 12 Tax Update 2012 - New DBKV Datablock.Add $W9
   ! write 10 from $W1:190 $W2:46 $W3:125 $W4:117 $W5:133 $W6:27 $W7:15 $W8:659 $W9:50
   write 10 from $W1 $W2 $W3 $W4 $W5 $W6 $W7 $W8 $W9

   do Print-Data-A
   do Print-Data-B($GPDE_DV_CANCEL, $EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN, #LastLine)
   let #actLine = #LastLine + 1
   print '_'                       (#actLine,{col1},{mcol_right_margin})FILL
   if $FIRST = 'Y'
      let $FIRST = 'N'
   else
      new-page
   end-if

end-procedure Process_DB_Data

!***
begin-procedure Get_DBME_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL, :$DBME_GPDE_DV_CTRL_RPT, :$DBME_begin_dt,
         :$DBME_end_dt,:#DBME_GPDE_DV_NBR_OF_DYS, :$DBME_currency_cd,
         :#DBME_GPDE_BL_AMT, :$DBME_GPDE_DV_SV_CODE, :$DBME_GPDE_DV_BA_CD,
                              :$DBME_GPDE_SI_REGION, :$DBME_GPDE_SI_EMPL_MULT)

BEGIN-SELECT

GPDE_DV_CTRL_RPT  &_DBME_GPDE_DV_CTRL_RPT
BEGIN_DT        &_DBME_BEGIN_DT
END_DT          &_DBME_END_DT
GPDE_DV_NBR_OF_DYS     &_DBME_GPDE_DV_NBR_OF_DYS
CURRENCY_CD     &_DBME_CURRENCY_CD
GPDE_BL_AMT     &_DBME_GPDE_BL_AMT
GPDE_DV_SV_CODE  &_DBME_GPDE_DV_SV_CODE
GPDE_DV_BA_CD    &_DBME_GPDE_DV_BA_CD
GPDE_SI_REGION      &_DBME_GPDE_SI_REGION
GPDE_SI_EMPL_MULT      &_DBME_GPDE_SI_EMPL_MULT

   let $DBME_GPDE_DV_CTRL_RPT = &_DBME_GPDE_DV_CTRL_RPT
   let $DBME_begin_dt       = &_DBME_BEGIN_DT
   let $DBME_end_dt         = &_DBME_END_DT
   let #DBME_GPDE_DV_NBR_OF_DYS    = &_DBME_GPDE_DV_NBR_OF_DYS
   let $DBME_currency_cd    = &_DBME_CURRENCY_CD
   let #DBME_GPDE_BL_AMT    = &_DBME_GPDE_BL_AMT
   let $DBME_GPDE_DV_SV_CODE = &_DBME_GPDE_DV_SV_CODE
   let $DBME_GPDE_DV_BA_CD   = &_DBME_GPDE_DV_BA_CD
   let $DBME_GPDE_SI_REGION     = &_DBME_GPDE_SI_REGION
   let $DBME_GPDE_SI_EMPL_MULT     = &_DBME_GPDE_SI_EMPL_MULT
FROM PS_GPDE_DV_DBME

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBME_Data

begin-procedure Get_DBKV_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL, :$DBKV_GPDE_DV_CTRL_RPT, :$DBKV_begin_dt,
         :$DBKV_end_dt,:#DBKV_GPDE_RP_SIGRS_ANLZ, :#DBKV_GPDE_DV_ONETIME_PAY, :#DBKV_GPDE_RP_SIDAYS, 
         :#DBKV_GPDE_RP_KUG_RVGRS,:$DBKV_GPDE_MJ_GZ_CALC,:$DBKV_GPDE_SI_EMPL_MULT,:#DBKV_GPDE_DV_KV_RSN,
         :#DBKV_GPDE_DV_RJEG,:#DBKV_GPDE_DV_BBGRUATG,:$DBKV_GPDE_DV_SV_CODE,:$DBKV_GPDE_SI_REGION )

BEGIN-SELECT

GPDE_DV_CTRL_RPT       &_DBKV_GPDE_DV_CTRL_RPT
BEGIN_DT               &_DBKV_BEGIN_DT
END_DT                 &_DBKV_END_DT
GPDE_RP_SIGRS_ANLZ     &_DBKV_GPDE_RP_SIGRS_ANLZ
GPDE_DV_ONETME_PAY     &_DBKV_GPDE_DV_ONETIME_PAY
GPDE_RP_SIDAYS         &_DBKV_GPDE_RP_SIDAYS
GPDE_RP_KUG_RVGRS      &_DBKV_GPDE_RP_KUG_RVGRS
GPDE_MJ_GZ_CALC        &_DBKV_GPDE_MJ_GZ_CALC
GPDE_SI_EMPL_MULT      &_DBKV_GPDE_SI_EMPL_MULT
GPDE_DV_KV_RSN         &_DBKV_GPDE_DV_KV_RSN
GPDE_DV_RJEG           &_DBKV_GPDE_DV_RJEG
GPDE_DV_BBGRUATG       &_DBKV_GPDE_DV_BBGRUATG
GPDE_DV_SV_CODE        &_DBKV_GPDE_DV_SV_CODE 
GPDE_SI_REGION         &_DBKV_GPDE_SI_REGION

   let $DBKV_GPDE_DV_CTRL_RPT    = &_DBKV_GPDE_DV_CTRL_RPT
   let $DBKV_begin_dt            = &_DBKV_BEGIN_DT
   let $DBKV_end_dt              = &_DBKV_END_DT
   let #DBKV_GPDE_RP_SIGRS_ANLZ  = &_DBKV_GPDE_RP_SIGRS_ANLZ
   let #DBKV_GPDE_DV_ONETIME_PAY = &_DBKV_GPDE_DV_ONETIME_PAY
   let #DBKV_GPDE_RP_SIDAYS      = &_DBKV_GPDE_RP_SIDAYS
   let #DBKV_GPDE_RP_KUG_RVGRS  = &_DBKV_GPDE_RP_KUG_RVGRS
   let $DBKV_GPDE_MJ_GZ_CALC     = &_DBKV_GPDE_MJ_GZ_CALC   
   let $DBKV_GPDE_SI_EMPL_MULT   = &_DBKV_GPDE_SI_EMPL_MULT
   let #DBKV_GPDE_DV_KV_RSN      = &_DBKV_GPDE_DV_KV_RSN
   let #DBKV_GPDE_DV_RJEG        = &_DBKV_GPDE_DV_RJEG
   let #DBKV_GPDE_DV_BBGRUATG    = &_DBKV_GPDE_DV_BBGRUATG
   let $DBKV_GPDE_DV_SV_CODE     = &_DBKV_GPDE_DV_SV_CODE 
   let $DBKV_GPDE_SI_REGION      = &_DBKV_GPDE_SI_REGION
FROM PS_GPDE_DV_DBKV

WHERE EMPLID            = $emplid
  AND EMPL_RCD          = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN   = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN       = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL    = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBKV_Data
!***

begin-procedure Process_DBME_Data($GPDE_DV_CANCEL, $DBME_GPDE_DV_CTRL_RPT, $DBME_begin_dt,
                $DBME_end_dt, #DBME_GPDE_DV_NBR_OF_DYS,$DBME_currency_cd, #DBME_GPDE_BL_AMT,
    $DBME_GPDE_DV_SV_CODE,$DBME_GPDE_DV_BA_CD, $DBME_GPDE_SI_REGION,
    $DBME_GPDE_SI_EMPL_MULT, :$DBME_VAR)

   let $DBME_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBME'
   !005-005 KENNZ-STORNO
   if $GPDE_DV_CANCEL = 'Y'
      let $X2 = 'J'
   else
      let $X2 = 'N'
   end-if


   !--!006-006 KENNZ-ANM-KONTROLL
   !--if $DBME_GPDE_DV_CTRL_RPT = 'Y'
   !--   let $X3 = 'J'
   !--else
   !--   let $X3 = 'N'
   !--end-if

   !wdu-qk04:  006-006 KENNZ-ANM-KONTROLL meaning changed to Glidezone indicator
   let $X3 = $DBME_GPDE_DV_CTRL_RPT

   !007-014 ZEITRAUM-BEGINN
   do Format-DateTime($DBME_begin_dt, $begin_out, {DEFCMP},'','')
   let $X4 = rpad($begin_out,8,'0')

   !015-022 ZEITRAUM-ENDE
   do Format-DateTime($DBME_end_dt, $end_out, {DEFCMP},'','')
   let $X5 = rpad($end_out, 8, '0')
   !023-024 ZAHL-TAGE immer '00'
   let $X6 = {ZAHL_TAGE}
   !025-025 WAEHRUNGS-KENNZ
   if rtrim($DBME_currency_cd, ' ') = {CURRENCY_EURO}
      let $X7 = 'E'
   else
      if rtrim($DBME_currency_cd, ' ') = {CURRENCY_DM}
         let $X7 = 'D'
      else
         let $X7 = ' '
      end-if
   end-if
   !026-031 ENTGELT
   let $X8 = edit(#DBME_GPDE_BL_AMT, '099999')

   !032-035 BEITRAGSGRUPPE
   let $X9 = edit($DBME_GPDE_DV_SV_CODE,'0000')

   !036-044 TAETIGKEITSSCHLUESSEL
   let $X10 = rpad($DBME_GPDE_DV_BA_CD,9, ' ')

   !045-045 KENNZ-RECHTSKREIS
   if $DBME_GPDE_SI_REGION = '1'
      let $X11 = 'O'
   else
      if $DBME_GPDE_SI_REGION = '2'
         let $X11 = 'W'
      else
        if $DBME_GPDE_SI_REGION = '9'
           let $X11 = '9'
        else
           let $X11 = ' '
        end-if
      end-if
   end-if
   !046-046 KENNZ-MEHRFACH
   ! wdu05b7: keep this logic (0==NO, other=YES) to eventually fix hist stornos
   if $DBME_GPDE_SI_EMPL_MULT = '0' or rtrim($DBME_GPDE_SI_EMPL_MULT,' ') = ''
      let $X12 = 'N'
   else
      let $X12 = 'J'
   end-if
   let $DBME_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 || $X12
   let #rval = length($DBME_VAR)
end-procedure Process_DBME_Data

!***
begin-procedure Process_DBKV_Data($GPDE_DV_CANCEL, $DBKV_GPDE_DV_CTRL_RPT, $DBKV_begin_dt, $DBKV_end_dt, #DBKV_GPDE_RP_SIGRS_ANLZ, 
                            #DBKV_GPDE_DV_ONETIME_PAY,#DBKV_GPDE_RP_SIDAYS,#DBMKV_GPDE_RP_KUG_RVGRS,$DBKV_GPDE_MJ_GZ_CALC,
                            $DBME_GPDE_SI_EMPL_MULT,#DBME_GPDE_DV_KV_RSN,#DBKV_GPDE_DV_RJEG,#DBKV_GPDE_DV_BBGRUATG,$DBKV_GPDE_DV_SV_CODE,$DBKV_GPDE_SI_REGION,:$DBKV_VAR)

   
   let $DBKV_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBKV'
   !005-005 KENNZ-STORNO
   if $GPDE_DV_CANCEL = 'Y'
      let $X2 = 'J'
   else
      let $X2 = 'N'
   end-if

   !--!006-007 KV-GRUND      
   let $X3 = edit(#DBME_GPDE_DV_KV_RSN, '09')
   
   !008-009 SV-TAGE   
   let $X4 = edit(#DBKV_GPDE_RP_SIDAYS, '09')
      
   !010-017 ZEITRAUM-BEGINN   
   do ConvertToComponents($DBKV_begin_dt,$YE,$ME,$DE)   
   let $X5 = $YE || $ME || $DE            !8   
   
   !018-025 ZEITRAUM-ENDE   
   do ConvertToComponents($DBKV_end_dt,$YE,$ME,$DE)
   let $X6 = $YE || $ME || $DE            !8   
   
   !026-033 LAUFENDES-ENTGELT 
   
   let $X7 = translate(edit(#DBKV_GPDE_RP_SIGRS_ANLZ, '099999.99'), '.', '')   
   
   !034-041 EINMALIGES-ENTGELT   
   
   let $X8 = translate(edit(#DBKV_GPDE_DV_ONETIME_PAY, '099999.99'), '.', '')   
   
   !042-049 BEITRAGS   
   
   let $X9 = translate(edit(#DBMKV_GPDE_RP_KUG_RVGRS, '099999.99'), '.', '')  
   
   !050-050 KENNZ-GLEITZONE
   let $X10 = $DBKV_GPDE_MJ_GZ_CALC
   if isblank($X10)
     let $X10 = '0'
   end-if
   ! GU TXUPD2013
   let $X11 = '  ' !Reserve Part of DBKV record
   let $X12 = translate(edit(#DBKV_GPDE_DV_RJEG, '099999.99'), '.', '') 
   let $X13 = translate(edit(#DBKV_GPDE_DV_BBGRUATG, '099999.99'), '.', '')
   let $X14 = $DBKV_GPDE_DV_SV_CODE
   evaluate $DBKV_GPDE_SI_REGION
   when = '1'
   let $X15 = 'E'
   BREAK
   WHEN = '2'
   let $X15 = 'W'
   break
   when-other
   let $X15 = ' '
   break
   end-evaluate
   let $X16 = '         ' !Reserve Part of DBKV record 9 positions
   !Necessary for New length for DBKV GU TXUPD2013
   
   let $DBKV_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 || $X12 || $X13 || $X14 || $X15 || $X16
   let #rval = length($DBKV_VAR)

end-procedure Process_DBKV_Data

!***
begin-procedure Get_DBNA_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL, :$DBNA_GPDE_DV_LAST_NAME,
         :$DBNA_GPDE_DV_FIRST_NAME,:$DBNA_name_royal_prefix,
         :$DBNA_name_royal_suffix, :$DBNA_name_title,
                              :$DBNA_GPDE_DV_CHANGE_REP)

BEGIN-SELECT

EMPLID            &DBNA_EMPLID
EMPL_RCD          &DBNA_EMPL_RCD
GPDE_DV_EVT_EFFDT   &DBNA_GPDE_DV_EVT_EFFDT
GPDE_DV_REP_RSN    &DBNA_GPDE_DV_REP_RSN
GPDE_DV_RUN        &DBNA_GPDE_DV_RUN
GPDE_DV_CANCEL     &DBNA_GPDE_DV_CANCEL
GPDE_DV_LAST_NAME  &DBNA_GPDE_DV_LAST_NAME
GPDE_DV_FIRST_NAME &DBNA_GPDE_DV_FIRST_NAME
NAME_ROYAL_PREFIX &DBNA_NAME_ROYAL_PREFIX
NAME_ROYAL_SUFFIX &DBNA_NAME_ROYAL_SUFFIX
NAME_TITLE        &DBNA_NAME_TITLE
GPDE_DV_CHANGE_REP &DBNA_GPDE_DV_CHANGE_REP

   let $DBNA_GPDE_DV_LAST_NAME  = &DBNA_GPDE_DV_LAST_NAME
   let $DBNA_GPDE_DV_FIRST_NAME = &DBNA_GPDE_DV_FIRST_NAME
   let $DBNA_name_royal_prefix      = &DBNA_NAME_ROYAL_PREFIX
   let $DBNA_name_royal_suffix       = &DBNA_NAME_ROYAL_SUFFIX
   let $DBNA_name_title         = &DBNA_NAME_TITLE
   let $DBNA_GPDE_DV_CHANGE_REP = &DBNA_GPDE_DV_CHANGE_REP

FROM PS_GPDE_DV_DBNA

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBNA_Data

!***
begin-procedure Process_DBNA_Data($DBNA_GPDE_DV_LAST_NAME, $DBNA_GPDE_DV_FIRST_NAME,
                $DBNA_name_royal_prefix,$DBNA_name_royal_suffix, $DBNA_name_title,
    $DBNA_GPDE_DV_CHANGE_REP, :$DBNA_VAR)

   let $DBNA_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBNA'
   !005-034 FAMILIENNAME
   !let $X2 = rpad($DBNA_GPDE_DV_LAST_NAME,30,' ')
   !do Format-Name($_pdata_name_prefix, $_pdata_name, $_pdeff_name_title, $_pdata_name_royal_prefix,
    !              $_pdata_name_royal_suffix, $Full_Name, $FirstName, $LastName)

   let $X2 = rpad($_PDATAN.LAST_NAME,30,' ')

   !035-064 VORNAME
   !let $X3 = rpad($DBNA_GPDE_DV_FIRST_NAME,30, ' ')
   let $X3 = rpad($_PDATAN.FIRST_NAME,30,' ')
   !065-084 VORSATZWORT
   !let $X4 = rpad($DBNA_name_royal_prefix,20,' ')
   let $X4 = rpad($_pdata_name_royal_prefix,20,' ')

   !085-104 NAMENSZUSATZ
   !let $X5 = rpad($DBNA_name_royal_suffix,20,' ')
   let $X5 = rpad($_pdata_name_royal_suffix,20,' ')

   !105-124 TITEL
   !let $X6 = substr($DBNA_name_title,1,20)
   let $X6 = substr($_pdeff_name_title,1,20)
   let $X6 = rpad($X6, 20, ' ')
   !125-125 KENNZ_AEN_BER
   if $DBNA_GPDE_DV_CHANGE_REP = 'Y'
      let $X7 = 'A'
   else
      let $X7 = ' '
   end-if
   let $DBNA_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7
   let #rval = length($DBNA_VAR)

end-procedure Process_DBNA_Data

!***
begin-procedure Get_DBGB_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL,:$DBGB_GPDE_DV_BIRTHNAME,
         :$DBGB_GPDE_DV_BIRTHNAME, :$DBGB_name_royal_prefix,
                              :$DBGB_name_royal_suffix, :$DBGB_birthdate, :$DBGB_sex,
         :$DBGB_birthplace)


BEGIN-SELECT

EMPLID           &DBGB_EMPLID
EMPL_RCD         &DBGB_EMPL_RCD
GPDE_DV_EVT_EFFDT  &DBGB_GPDE_DV_EVT_EFFDT
GPDE_DV_REP_RSN   &DBGB_GPDE_DV_REP_RSN
GPDE_DV_RUN       &DBGB_GPDE_DV_RUN
GPDE_DV_CANCEL    &DBGB_GPDE_DV_CANCEL
GPDE_DV_BIRTHNAME &DBGB_GPDE_DV_BIRTHNAME
NAME_ROYAL_PREFIX     &DBGB_NAME_ROYAL_PREFIX
NAME_ROYAL_SUFFIX      &DBGB_NAME_ROYAL_SUFFIX
BIRTHDATE        &DBGB_BIRTHDATE
SEX              &DBGB_SEX
BIRTHPLACE       &DBGB_BIRTHPLACE

   let $DBGB_GPDE_DV_BIRTHNAME = &DBGB_GPDE_DV_BIRTHNAME

   let $DBGB_name_royal_prefix     = &DBGB_NAME_ROYAL_PREFIX
   let $DBGB_name_royal_suffix      = &DBGB_NAME_ROYAL_SUFFIX
   let $DBGB_birthdate        = &DBGB_BIRTHDATE
   let $DBGB_sex              = &DBGB_SEX
   let $DBGB_birthplace       = &DBGB_BIRTHPLACE

FROM PS_GPDE_DV_DBGB

WHERE EMPLID          = $emplid
  AND EMPL_RCD        = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBGB_Data

!***
begin-procedure Process_DBGB_Data($DBGB_GPDE_DV_BIRTHNAME, $DBGB_name_royal_prefix,
                              $DBGB_name_royal_suffix, $DBGB_birthdate, $DBGB_sex,
         $DBGB_birthplace, :$DBGB_VAR)

   let $DBGB_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBGB'

   !005-034 GB_NAME
   let $X2 = rpad($DBGB_GPDE_DV_BIRTHNAME,30, ' ')

   !035-054 GB_VORSATZ
   let $X3 = rpad($DBGB_name_royal_prefix,20,' ')

   !055-074 GB_ZUSATZ
   let $X4 = rpad($DBGB_name_royal_suffix,20,' ')

   !075-082 GEBURTSDATUM
   do Format-DateTime($DBGB_birthdate,$out_bdt,{DEFCMP},'','')
   let $X5 = $out_bdt

   !083-083 GESCHLECHT
   if $DBGB_sex = 'M'
      let $X6 = 'M'
   else
      let $X6 = 'W'
   end-if

   !084-117 GB_ORT
   let $X7 = rpad($DBGB_birthplace,34,' ')
   let $DBGB_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7
   let #rval = length($DBGB_VAR)

end-procedure Process_DBGB_Data

!***
begin-procedure Get_DBAN_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL, :$DBAN_nationality_cd,
                              :$DBAN_postal, :$DBAN_city, :$DBAN_address1, :$DBAN_address2)

BEGIN-SELECT

EMPLID          &DBAN_EMPLID
EMPL_RCD        &DBAN_EMPL_RCD
GPDE_DV_EVT_EFFDT &DBAN_GPDE_DV_EVT_EFFDT
GPDE_DV_REP_RSN  &DBAN_GPDE_DV_REP_RSN
GPDE_DV_RUN      &DBAN_GPDE_DV_RUN
GPDE_DV_CANCEL   &DBAN_GPDE_DV_CANCEL
NATIONALITY_CD  &DBAN_NATIONALITY_CD
POSTAL          &DBAN_POSTAL
CITY            &DBAN_CITY
ADDRESS1        &DBAN_ADDRESS1
ADDRESS2        &DBAN_ADDRESS2

   let $DBAN_nationality_cd    = &DBAN_NATIONALITY_CD
   let $DBAN_postal         = &DBAN_POSTAL
   let $DBAN_city            = &DBAN_CITY
   let $DBAN_address1        = &DBAN_ADDRESS1
   let $DBAN_address2        = &DBAN_ADDRESS2

FROM PS_GPDE_DV_DBAN

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBAN_Data

!***
begin-procedure Process_DBAN_Data($DBAN_nationality_cd, $DBAN_postal, $DBAN_city,
                                  $DBAN_address1, $DBAN_address2, :$DBAN_VAR)

   let $DBAN_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBAN'

   !005-007 LAENDER_KENNZ
   if rtrim($DBAN_nationality_cd, ' ') <> 'D'
      let $X2 = rpad($DBAN_nationality_cd,3,' ')
   else
      let $X2 = '   '
   end-if

   !008-017 PLZ
   let $X3 = substr(rpad($DBAN_postal,10,' '),1,10)

   !018-051 WOHNORT
   let $X4 = substr(rpad($DBAN_city,34,' '),1,34)

   !052-084 STRASSE
   let $X5 = substr($DBAN_address1,1,33)
   let $X5 = rpad($X5,33,' ')

   !085-093 HAUS_NR
   let $X6 = '         '

   !094-133 ADR_ZUSATZ
   let $X7 = substr(rpad($DBAN_address2,40,' '),1,40)

   let $DBAN_VAR = $X1 ||  $X2 ||  $X3 ||  $X4 ||  $X5  || $X6  || $X7
   let #rval = length($DBAN_VAR)

end-procedure Get_DBAN_Data

!***
begin-procedure Get_DBEU_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL,
                              :$DBEU_birthcountry, :$DBEU_GPDE_DV_EU_SSN)


BEGIN-SELECT

EMPLID          &DBEU_EMPLID
EMPL_RCD       &DBEU_EMPL_RCD
GPDE_DV_EVT_EFFDT &DBEU_GPDE_DV_EVT_EFFDT
GPDE_DV_REP_RSN  &DBEU_GPDE_DV_REP_RSN
GPDE_DV_RUN      &DBEU_GPDE_DV_RUN
GPDE_DV_CANCEL   &DBEU_GPDE_DV_CANCEL
BIRTHCOUNTRY    &DBEU_BIRTHCOUNTRY
GPDE_DV_EU_SSN   &DBEU_GPDE_DV_EU_SSN

   let $DBEU_birthcountry = &DBEU_BIRTHCOUNTRY
   let $DBEU_GPDE_DV_EU_SSN   = &DBEU_GPDE_DV_EU_SSN

FROM PS_GPDE_DV_DBEU

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBEU_Data

!***
begin-procedure Process_DBEU_Data($DBEU_birthcountry, $DBEU_GPDE_DV_EU_SSN, :$DBEU_VAR)

   let $DBEU_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBEU'
   !005-007 GB_LAND
   let $X2 = substr($DBEU_birthcountry,1,3)
   !008-027 EURVNR
   let $X3 = $DBEU_GPDE_DV_EU_SSN
   let $DBEU_VAR = $X1 || $X2 || $X3
   let #rval = length($DBEU_VAR)

end-procedure Process_DBEU_Data

!***
begin-procedure Get_DBSO_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                              #GPDE_DV_RUN, $GPDE_DV_CANCEL,
                              :$DBSO_begin_dt, :$DBSO_GPDE_SI_EMPL_MULT, :$DBSO_GPDE_DV_CTRL_RPT,
                              :$DBSO_GPDE_SI_EMPL_INSIG)

BEGIN-SELECT

EMPLID             &DBSO_EMPLID
EMPL_RCD          &DBSO_EMPL_RCD
GPDE_DV_EVT_EFFDT    &DBSO_GPDE_DV_EVT_EFFDT
GPDE_DV_REP_RSN     &DBSO_GPDE_DV_REP_RSN
GPDE_DV_RUN         &DBSO_GPDE_DV_RUN
GPDE_DV_CANCEL      &DBSO_GPDE_DV_CANCEL
BEGIN_DT           &DBSO_BEGIN_DT
GPDE_SI_EMPL_MULT         &DBSO_GPDE_SI_EMPL_MULT
GPDE_DV_CTRL_RPT     &DBSO_GPDE_DV_CTRL_RPT
GPDE_SI_EMPL_INSIG &DBSO_GPDE_SI_EMPL_INSIG

   let $DBSO_begin_dt           = &DBSO_BEGIN_DT
   let $DBSO_GPDE_SI_EMPL_MULT         = &DBSO_GPDE_SI_EMPL_MULT
   let $DBSO_GPDE_DV_CTRL_RPT     = &DBSO_GPDE_DV_CTRL_RPT
   let $DBSO_GPDE_SI_EMPL_INSIG = &DBSO_GPDE_SI_EMPL_INSIG

FROM PS_GPDE_DV_DBSO

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN  = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBSO_Data

!***
begin-procedure Process_DBSO_Data($DBSO_begin_dt, $DBSO_GPDE_SI_EMPL_MULT, $DBSO_GPDE_DV_CTRL_RPT,
                                  $DBSO_GPDE_SI_EMPL_INSIG, :$DBSO_VAR)

   let $DBSO_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBSO'
   !005-012 ZEITRAUM_BEGINN
   do Format-DateTime($DBSO_begin_dt, $out_begin_dt, {DEFCMP}, '', '')
   let $X2 = $DBEU_birthcountry

   !013-013 KENNZ_MEHRFACH
   ! wdu05b7: keep this logic (0==NO, other=YES) to eventually fix hist stornos
   if $DBSO_GPDE_SI_EMPL_MULT = '0'
      let $X3 = 'N'
   else
      let $X3 = 'J'
   end-if
   !014-014 KENNZ_KONTROLL
   if $DBSO_GPDE_DV_CTRL_RPT = 'Y'
      let $X4 = 'J'
   else
      let $X4 = 'N'
   end-if
   !014-014 KENNZ_KONTROLL
   if $DBSO_GPDE_SI_EMPL_INSIG = '0'
      let $X5 = 'N'
   else
      let $X5 = 'J'
   end-if
   let $DBAN_VAR = $X1 || $X2 || $X3 || $X4 || $X5
   let #rval = length($DBSO_VAR)

end-procedure Process_DBSO_Data

!***
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. New procedure Get_DBUV_Data
 ! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - remove DBUV fields and add $DBUV_VAR
begin-procedure Get_DBUV_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN, #GPDE_DV_RUN, $GPDE_DV_CANCEL, :$DBUV_VAR)

   ! Number of Hazards
   let #DBUV_HAZAR_TOTAL = 0
   ! Variable Part 
   let $DBUV_Var_Hazard = ''
   
BEGIN-SELECT

ACCIDENT_INS &_DBUV_ACCIDENT_INS
SI_ACCIDENT_NUM &_DBUV_SI_ACCIDENT_NUM
HAZARD &_DBUV_HAZARD
GPDE_AI_GROSS &_DBUV_GPDE_AI_GROSS
GPDE_AI_HRS &_DBUV_GPDE_AI_HRS
GPDE_AI_DBUV_RSN &_DBUV_GPDE_AI_RSN !TAX UPD 2013

   let $DBUV_ACCIDENT_INS = &_DBUV_ACCIDENT_INS
   let $DBUV_SI_ACCIDENT_NUM = &_DBUV_SI_ACCIDENT_NUM
   let $DBUV_HAZARD = &_DBUV_HAZARD
   
   !GU TXUPD2013
   let $DBUV_REAS = ''
   !GU TXUPD2013
   let #DBUV_GPDE_AI_GROSS = &_DBUV_GPDE_AI_GROSS
   let #DBUV_GPDE_AI_HRS = &_DBUV_GPDE_AI_HRS
   let $DBUV_REAS = &_DBUV_GPDE_AI_RSN    
     
   ! Number of Hazards
   let #DBUV_HAZAR_TOTAL = #DBUV_HAZAR_TOTAL + 1
   
 ! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - Variable part fields
   if #DBUV_HAZAR_TOTAL <= 9
      let #ANUV = #DBUV_HAZAR_TOTAL
      !001-003 UV-GRUND-n GU TXUPD2013
       let $X4 = rpad($DBUV_REAS,3,' ')
      !let $X4 = '   ' GU TXUPD2013
      !004-018 BBNR-UV-n
          let $X5 = rpad($DBUV_ACCIDENT_INS,15,' ')
      !019-038 MITGLIEDSNR-n
          let $X6 = rpad($DBUV_SI_ACCIDENT_NUM,20,' ')
      !039-053 BBNR-GTS-n
       let $X7 = rpad($DBUV_ACCIDENT_INS,15,' ')
      !054-061 GT-STELLE-nn
          let $X8 = rpad($DBUV_HAZARD,8,' ')
      !062-067 UV-EG-nn
          let $X9 = edit(#DBUV_GPDE_AI_GROSS, '099999')
      !068-071 ARBSTD-nn
          let $X10 = edit(#DBUV_GPDE_AI_HRS, '0999')
       
       let $DBUV_Var_Hazard = $DBUV_Var_Hazard || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10       
   end-if
   
FROM PS_GPDE_DV_DBUV

WHERE EMPLID            = $emplid
  AND EMPL_RCD          = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT
  AND GPDE_DV_REP_RSN   = $GPDE_DV_REP_RSN
  AND GPDE_DV_RUN       = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL    = $GPDE_DV_CANCEL

END-SELECT

 ! sgo11-9GPUpdate2011E-Bug12421100  : 30 05 2011 - DBUV Version 2 - Concat Final DBUV block
   let $DBUV_VAR = ''
   if #ANUV > 0
     !001-004 IDENTIFIER - KENNUNG
         let $X1 = 'DBUV'
     !005-005 NUMBER OF HAZARD - ANZAHL-UV
         let $X2 = edit(#ANUV, '9')
     !006-020 RESERVE
         let $X3 = rpad(' ',15,' ')
     ! Variable part      
         let $DBUV_VAR = $X1 || $X2 || $X3 || $DBUV_Var_Hazard
   end-if

end-procedure Get_DBUV_Data


!***
begin-procedure Add-Space-Counter($DBME, $DBNA, $DBGB, $DBAN, $DBEU, $DBSO, $DBUV, $DBKV
                                  :#SpCnt, #Max, :$EnoughSpace)
 ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add $DBUV variable in parameters

   let #SpCnt = #SpCnt + {REC_LEN_DSME}

   if $DBME = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBME}
   end-if

   if $DBNA = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBNA}
   end-if

   if $DBGB = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBGB}
   end-if

   if $DBAN = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBAN}
   end-if

   if $DBEU = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBEU}
   end-if

   if $DBSO = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBSO}
   end-if

   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Add DBUV processing
   if $DBUV = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBUV}
   end-if
   
   ! byarn12-90- : 12 Mar 12 Tax Update 2012 - New DBKV Datablock. Add DBKV processing
   if $DBKV = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBKV}
   end-if
   
   !check if enough space is left
   if (#SpCnt + {REC_LEN_NCSZ}) < #Max
      let $EnoughSpace = 'Y'
   else
      let $EnoughSpace = 'N'
   end-if

end-procedure Add-Space-Counter
!***
begin-procedure Add-Space-Counter_AAG($DBAU, $DBBT, $DBZU, :#SpCnt, #Max, :$EnoughSpace)
 
   let #SpCnt = #SpCnt + {REC_LEN_DSER}

   if $DBAU = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBAU}
   end-if
   if $DBBT = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBBT}
   end-if
   if $DBZU = 'Y'
      let #SpCnt = #SpCnt + {REC_LEN_DBZU}
   end-if
   
   let #SpCnt = #SpCnt + {REC_LEN_DBBV}
   let #SpCnt = #SpCnt + {REC_LEN_DBNA}
   let #SpCnt = #SpCnt + {REC_LEN_DBAA}   
   
   !check if enough space is left
   if (#SpCnt + {REC_LEN_NCSZ}) < #Max
      let $EnoughSpace = 'Y'
   else
      let $EnoughSpace = 'N'
   end-if

end-procedure Add-Space-Counter_AAG
!***
begin-procedure Build-WRITE_DSME_TO_FILE(:$DSME_VAR, $provider_id)

   let $WRITE_DSME_TO_FILE = ''

   let $X1 = 'DSME'
   let $X2 = {DSME_VERFAHREN}
   let $X3 = $_Absender_Nbr || '       '
   ! Hier muss die ID der Krankenkasse des MA hin
   let $X4 = rpad($provider_id, 15, ' ')
   !let $X4 = $_Empf_Nbr || '       '
   let $X5 = {DSME_VERSION}
   let $X6 = rpad(&_DSME_DTTM_CREATED,20,'0')
   let $X7 =  {DSME_FEHLER_KENNZ}
   let $X8 =  {DSME_FEHLER_KENNZ}
   let $X9 =  rpad(&_DSME_RVNR, 12, ' ')
   let $X10 = '  '
   let $X11 = rpad(&_DSME_GPDE_SI_BTNR, 15, ' ')

   ! rh07 890B09 - display EMPLID and EMPL_RCD in file
   let $EmplIDEmplRcd =  rpad(rtrim(&_DSME_EMPLID, ' ') || '/' || rtrim(to_char(&_DSME_EMPL_RCD_NBR),' '),20,' ')
   let $X12 = $EmplIDEmplRcd
   !let $X12 = rpad(&_DSME_EMPLID,20, ' ')

   ! rh 8.9 tax update 2007 - make sure, value of field 4 is identical with field 13
   let $X13 = rpad($provider_id, 15, ' ')
   let $X14 = {AKTENZEICHEN_KK}

 ! sg09-9B10 1890237000 Dummy Membership nbr - pos 128-147 (20 char)
   if &_DSME_GPDE_VW_MNRBV <> ' '
      let $X14 = rpad(&_DSME_GPDE_VW_MNRBV ,20, ' ')
   end-if

   let $X15 = {BBNR_ABRECHNUNGSSTELLE}
   let $X16 = &_DSME_DV_EMPL_CAT_DEU
   let $X17 = substr(&_DSME_GPDE_DV_REP_RSN, 1, 2)
   let $X18 = rpad(&_DSME_NATION_CD,3,' ')          ! pos 186-170
   if &_DSME_DV_DBME_DEU = 'Y'
      let $X19 = 'J'                                ! pos 171
   else
      let $X19 = 'N'
   end-if
   if &_DSME_DV_DBNA_DEU = 'Y'
      let $X20 = 'J'
   else
      let $X20 = 'N'
   end-if
   if &_DSME_DV_DBGB_DEU = 'Y'
      let $X21 = 'J'
   else
      let $X21 = 'N'
   end-if
   if &_DSME_DV_DBAN_DEU = 'Y'
      let $X22 = 'J'
   else
      let $X22 = 'N'
   end-if
   if &_DSME_DV_DBEU_DEU = 'Y'
      let $X23 = 'J'
   else
      let $X23 = 'N'
   end-if
   ! sgo08-89B17-1824941000 : 18 Dec 08 Tax Update 2009 - New DBUV Datablock. Inca se DBUV is reported, pos 176 = J, else N
 !   if &_DSME_DV_DBSO_DEU = 'Y'                      ! pos 176
 !     let $X24 = 'J'
 !  else
 !     let $X24 = 'N'
 !  end-if
    if &_DSME_DV_DBUV_DEU = 'Y'                      ! pos 176
      let $X24 = 'J'
   else
      let $X24 = 'N'
   end-if


   let $X25 = {MM_KNV_SEE}                      ! 177
   let $X26 = {MM_SVA}                          ! 178
   let $X27 = {MM_VERGABE_RUECKMELDUNG}         ! 179
   let $X28 = {MM_RUECKMELDUNG_GERINGFUEGIG}    ! 180
   !Noch klaeren:
   if &_DSME_DV_DUEVO_REP_DEU = 'Y'
      let $Kennz_Uebergang = 'A'
   else
      let $Kennz_Uebergang = ' '
   end-if
   let $X29 = $Kennz_Uebergang      ! Pos 181
   let $X30 = ' '                   ! Pos 182 MM-UEBERMITTLIUNG

   ! wdu-881-05b8: cleanup for changes of status fields and BAEGV, added $X34 and $X35 for clearness
   let $X31 = ' '                   ! Pos 183 reserved KENNZUP

   ! $X32 184 was: Beamtenähnliche Gesamtversorgung: J/N (retired field, now should be blank or J/N)
!adj09-1855449000
   let $X32 = 'N'                   ! Pos 184 RESERVE

   ! wdu-881-05b8: we reused the field DSME_GPDE_SI_BAEGV (pos 184) for the KENNZSTA (Status-Kennzeichen) (Pos 185)
   ! this is why we may come across old values out of the history of the emplid.
   !GU_Change Status Sign
   let $X33 = $_DSME_GPDE_SI_BAEGV1  ! Pos 185 KENNZSTA
   !GU_Change Status Sign
   ! show 'X33.=/' $X33 '/'
   if ( $X33 = 'Y' or $X33 = 'J' or $X33 = 'N' )
       ! blank out old values
       let $X33 = ' '
   end-if

   ! show 'X33..=/' $X33 '/'
   let $X34 = ' '                   ! pos 186 MMUE
   let $X35 = '  '                ! pos 187, 4chars, was: RESERVE3
   
   if &_DSME_DV_DBKV_DEU = 'Y'     ! pos 189
      let $X36 = 'J '
   else
      let $X36 = 'N '
   end-if
   
   let $DSME_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 ||
                   $X12 || $X13 || $X14 || $X15 || $X16 || $X17 || $X18 || $X19 || $X20 || $X21 ||
                   $X22 || $X23 || $X24 || $X25 || $X26 || $X27 || $X28 || $X29 || $X30 || $X31 ||
                   $X32 || $X33 || $X34 || $X35 || $X36
   ! /wdu-881-05b8
   let #rval = length($DSME_VAR)

end-procedure Build-WRITE_DSME_TO_FILE

!********************************************************************************
!                       AAG
!********************************************************************************   
begin-procedure Process_AAGDB_Data($PAYENTITY,$Clerk_GENDER, $Clerk_NAME,$Clerk_PHONE, $Clerk_FAX, $Clerk_EMAIL, $Absender, $Postal_abs, $City_Abs,  $Address1,
                            $DBAU_YES_NO, $DBBT_YES_NO,
                            $DBZU_YES_NO, $EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT,$DSER_PRD_END_DT,$DSER_AAG_REP_RSN, #GPDE_DV_RUN, $GPDE_DV_CANCEL, $PROVIDER_ID,
                            $DSER_VSNR,$DSER_SEX, $DSER_BIRTHDATE,$HIREDATE, $HICovTyp,$HIContGrp )

   ! Init result strings
   let $WRITE_DSER_TO_FILE = ''
   !let $WRITE_DBME_TO_FILE = ''   
   let $WRITE_DBAU_TO_FILE = ''   
   let $WRITE_DBBT_TO_FILE = ''
   let $WRITE_DBZU_TO_FILE = ''   
   let $WRITE_DBBV_TO_FILE = ''
   let $WRITE_DBNA_AAG_TO_FILE = ''
   let $WRITE_DBAA_AAG_TO_FILE = ''
    
   ! Build '$WRITE_DSER_TO_FILE'
    show 'process AAGDB - prd end dt = ' $DSER_PRD_END_DT
   SHOW 'HIREDATE - ' $HIREDATE
   do Build-WRITE_DSER_TO_FILE($PROVIDER_ID, $PAYENTITY,$DBAU_YES_NO, $DBBT_YES_NO,
                            $DBZU_YES_NO, $DSER_AAG_REP_RSN,$DSER_SEX, $DSER_VSNR, $HIREDATE, $HICovTyp,$HIContGrp,$WRITE_DSER_TO_FILE)
  
   if $DBAU_YES_NO = 'Y'
      do Get_DBAU_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, $GPDE_DV_CANCEL,$DSER_PRD_END_DT, 
        $DBAU_GPDE_AAG_BEGINABS, $DBAU_GPDE_AAG_ENDABS,$DBAU_GPDE_RP_AAG_TYPCLC, #DBAU_GPDE_RP_AAG_GRSS, $DBAU_GPDE_RP_AAG_TYPGRS, 
        $DBAU_GPDE_RP_AAG_TYPACT,#DBAU_GPDE_RP_AAG_RFDTME,$DBAU_GPDE_RP_AAG_TYPTME,#DBAU_STD_HOURS, #DBAU_GPDE_RP_AAG_SCKPY,
        #DBAU_GPDE_RP_AAG_ERCTB,#DBAU_GPDE_RP_AAG_RFDPCT,#DBAU_GPDE_RP_AAG_RFDGRS, $DBAU_GPDE_RP_AAG_TYPAU, $DBAU_GPDE_RP_AAG_TYPDY1,
        $DBAU_GPDE_RP_AAG_HRDY1, $DBAU_GPDE_AAG_WRKDYLST, #DBAU_GPDE_RP_AAG_AZDYL)    
    show 'AZDYL Value' #DBAU_GPDE_RP_AAG_AZDYL 
      do Process_DBAU_Data($GPDE_DV_CANCEL, $DBAU_GPDE_AAG_BEGINABS, $DBAU_GPDE_AAG_ENDABS,$DBAU_GPDE_RP_AAG_TYPCLC, 
        #DBAU_GPDE_RP_AAG_GRSS, $DBAU_GPDE_RP_AAG_TYPGRS, $DBAU_GPDE_RP_AAG_TYPACT,#DBAU_GPDE_RP_AAG_RFDTME,
        $DBAU_GPDE_RP_AAG_TYPTME,#DBAU_STD_HOURS, #DBAU_GPDE_RP_AAG_SCKPY,#DBAU_GPDE_RP_AAG_ERCTB,#DBAU_GPDE_RP_AAG_RFDPCT,
        #DBAU_GPDE_RP_AAG_RFDGRS, $DBAU_GPDE_RP_AAG_TYPAU, $DBAU_GPDE_RP_AAG_TYPDY1,#DBAU_GPDE_RP_AAG_HRDY1, $DBAU_GPDE_AAG_WRKDYLST,#DBAU_GPDE_RP_AAG_AZDYL, $WRITE_DBAU_TO_FILE)
   end-if
   
  if $DBBT_YES_NO = 'Y'       
      do Get_DBBT_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, 
        #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DSER_PRD_END_DT, $DBBT_GPDE_AAG_BEGINABS, $DBBT_GPDE_AAG_ENDABS,$DBBT_GPDE_RP_AAG_TYPCLC, 
        $DBBT_GPDE_AAG_WRKDYLST, #DBBT_GPDE_RP_AAG_SCKPY,#DBBT_GPDE_RP_AAG_ERCTB,#DBBT_GPDE_RP_AAG_RFDPCT,
        #DBBT_GPDE_RP_AAG_RFDGRS,$DBBT_GPDE_RP_AAG_TYPEBN )
      
      do Process_DBBT_Data($GPDE_DV_CANCEL, $DBBT_GPDE_AAG_BEGINABS, $DBBT_GPDE_AAG_ENDABS,$DBBT_GPDE_RP_AAG_TYPCLC, 
        $DBBT_GPDE_AAG_WRKDYLST, #DBBT_GPDE_RP_AAG_SCKPY,#DBBT_GPDE_RP_AAG_ERCTB,#DBBT_GPDE_RP_AAG_RFDPCT,
        #DBBT_GPDE_RP_AAG_RFDGRS,$DBBT_GPDE_RP_AAG_TYPEBN, $WRITE_DBBT_TO_FILE)         
         
   end-if
  if $DBZU_YES_NO = 'Y'       
      do Get_DBZU_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, 
        #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DSER_PRD_END_DT, $DBZU_GPDE_AAG_BEGINABS, $DBZU_GPDE_AAG_ENDABS,$DBZU_GPDE_RP_AAG_TYPCLC, 
        $DBZU_GPDE_AAG_BEGINMAT, $DBZU_GPDE_AAG_ENDMAT,#DBZU_GPDE_RP_AAG_GRSS,#DBZU_GPDE_RP_AAG_NTDYL,
        #DBZU_GPDE_RP_AAG_NTMTHL,#DBZU_GPDE_RP_AAG_MATPYM )
      
      do Process_DBZU_Data($GPDE_DV_CANCEL, $DBZU_GPDE_AAG_BEGINABS, $DBZU_GPDE_AAG_ENDABS,$DBZU_GPDE_RP_AAG_TYPCLC, 
        $DBZU_GPDE_AAG_BEGINMAT, $DBZU_GPDE_AAG_ENDMAT,#DBZU_GPDE_RP_AAG_GRSS,#DBZU_GPDE_RP_AAG_NTDYL,
        #DBZU_GPDE_RP_AAG_NTMTHL,#DBZU_GPDE_RP_AAG_MATPYM, $WRITE_DBZU_TO_FILE)   
         
   end-if
   
      
   !do Get_AAG_DBAN_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT,#GPDE_DV_RUN, $DBAN_nationality_cd,$DBAN_postal, $DBAN_city, $DBAN_address1, $DBAN_address2)
   !do Process_AAG_DBAN_Data($DBAN_nationality_cd, $DBAN_postal, $DBAN_city,$DBAN_address1, $DBAN_address2, $WRITE_DBAN_AAG_TO_FILE)
   
   show 'payentity - '$PAYENTITY
   
   do Get_SRC_BANKID($PAYENTITY, $SRC_BANK_ID)
   show 'src bank id '$SRC_BANK_ID
   do Get_DBBV_Data($PAYENTITY, $EMPLID, $SRC_BANK_ID, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, $DBBV_BANK_CD, $DBBV_BRANCH_EC_CD,
                    $DBBV_ACCOUNT_EC_ID, $DBBV_INTL_BANK_ACCT_NBR, $DBBV_EMPLID)

   do Process_DBBV_Data($DBBV_BANK_CD, $DBBV_BRANCH_EC_CD,
   $DBBV_ACCOUNT_EC_ID, $DBBV_INTL_BANK_ACCT_NBR, $Absender, $DBBV_EMPLID, $WRITE_DBBV_TO_FILE)

   do Get_AAG_DBNA_Data($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, $DBNA_GPDE_DV_LAST_NAME,$DBNA_GPDE_DV_FIRST_NAME,$DBNA_name_royal_prefix,
                         $DBNA_name_royal_suffix, $DBNA_name_title)

   do Process_AAG_DBNA_Data($DBNA_GPDE_DV_LAST_NAME, $DBNA_GPDE_DV_FIRST_NAME, $DBNA_name_royal_prefix,
                          $DBNA_name_royal_suffix, $DBNA_name_title, $WRITE_DBNA_AAG_TO_FILE)
   
   do AAG-DBAA($Clerk_GENDER, $Clerk_NAME,$Clerk_PHONE, $Clerk_FAX, $Clerk_EMAIL, $Absender, $Postal_abs, $City_Abs,  $Address1,$WRITE_DBAA_AAG_TO_FILE)   
   
   let $W1 = $WRITE_DSER_TO_FILE
   let $W2 = $WRITE_DBAU_TO_FILE 
   SHOW 'DBAU string result'  $W2  
   let $W3 = $WRITE_DBBT_TO_FILE   
   let $W4 = $WRITE_DBZU_TO_FILE
   let $W5 = $WRITE_DBBV_TO_FILE   
   let $W6 = $WRITE_DBNA_AAG_TO_FILE
   let $W7 = $WRITE_DBAA_AAG_TO_FILE
   
   do Chg-Char($W1,$W1)
   do Chg-Char($W2,$W2)
   do Chg-Char($W3,$W3)
   do Chg-Char($W4,$W4)
   do Chg-Char($W5,$W5)
   do Chg-Char($W6,$W6)
   do Chg-Char($W7,$W7)
      
   write 10 from $W1 $W2 $W3 $W4 $W5 $W6 $W7
   !show 'print-data-A'
   !do Print-Data-A
   !do Print-Data-B($GPDE_DV_CANCEL, $EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN, #LastLine)
   !let #actLine = #LastLine + 1
   !print '_'                       (#actLine,{col1},{mcol_right_margin})FILL
   !if $FIRST = 'Y'
    !  let $FIRST = 'N'
   !else
    !  new-page
   !end-if

end-procedure Process_AAGDB_Data
!****************************AAG - DSER****************************************
begin-procedure Build-WRITE_DSER_TO_FILE( $AAG_provider_id,$PAYENTITY,$DBAU_YES_NO, $DBBT_YES_NO,
                            $DBZU_YES_NO, $DSER_AAG_REP_RSN,$DSER_SEX,$DSER_VSNR,$HIREDATE, $HICovTyp,$HIContGrp,:$DSER_VAR)

   let $DSER_VAR = ''

   let $X1 = 'DSER' !1-4
   let $X2 = {DSER_VERFAHREN}  !5-9
   let $X3 = $_Absender_Nbr || '       ' !10-24 - 015
   ! Hier muss die ID der Krankenkasse des MA hin
   let $X4 = rpad($aag_provider_id, 15, ' ')  !25-39 - 15
   
   let $X5 = {DSER_VERSION} !40-41
   let $X6 = rpad(&_DSER_DTTM_CREATED,20,'0') !42-61
   let $X7 =  {DSER_FEHLER_KENNZ}
   let $X8 =  {DSER_FEHLER_KENNZ}   
   let $X9 =  $DSER_VSNR  !64-75 - 12
   SHOW 'EMPLOYEE SI NUM '$DSER_VSNR
   SHOW 'DSER BIRTHDATE '&_DSER_BIRTHDATE
   do ConvertToComponents(&_DSER_BIRTHDATE,$YE,$ME,$DE)
   let $X10 = $YE || $ME || $DE   !76 - 83 - 8 yyyymmdd
   SHOW 'BIRTHDATE '$X10
   let $X11 = $_Absender_Nbr || '       '   !84-98
   SHOW '84-98 - ' $X11
   
   ! rh07 890B09 - display EMPLID and EMPL_RCD in file
   let $EmplIDEmplRcd =  rpad(rtrim(&_DSER_EMPLID, ' ') || '/' || rtrim(to_char(&_DSER_EMPL_RCD_NBR),' '),20,' ')
   let $X12 = $EmplIDEmplRcd !99-118
   
   ! rh 8.9 tax update 2007 - make sure, value of field 4 is identical with field 13
   !let $X13 = $PAYENTITY  !119-138 20
   let $X13 = rpad($PAYENTITY, 20, ' ')
   SHOW 'DSER PAYENTITY '$X13
   let $X14 = rpad($AAG_provider_id, 15, ' ') !MANDATORY PROVIDER NOT VALID FOR 32023311,35382142,37912580,47056789,15451439.  139-153 - 15
   !let $X14 = $AAG_provider_id

   let $X15 = {AKTENZEICHEN_KK} !154 - 173
   let $X16 = {BBNR_ABRECHNUNGSSTELLE} !174-188
   let $X17 = ''
   SHOW '$_DBAU_YES_NO '$DBAU_YES_NO
   if $DBAU_YES_NO = 'Y'
      let $X17 = '01' !189-190
   end-if
   SHOW '$DBBT_YES_NO '$DBBT_YES_NO
   if $DBBT_YES_NO = 'Y'
     let $X17 = '02' !189-190
   end-if
   SHOW '$DBZU_YES_NO '$DBZU_YES_NO
   if $DBZU_YES_NO = 'Y'
     let $X17 = '03' !189-190
   end-if
   SHOW 'REASON ' $X17
   
   SHOW 'DSER HIREDATE '$HIREDATE
   do ConvertToComponents($HIREDATE,$YE,$ME,$DE)
   let $X18 = $YE || $ME || $DE   !191-198 - yyymmdd
   SHOW 'HIRE DATE '$X18
   SHOW 'HI Coverage type ='$HICovTyp
   SHOW 'HI contribution group = '$HIContGrp
   if $HICovTyp = '0' 
     let $X19 = '0' !199 - 199
   end-if
   if $HICovTyp = '1' 
       EVALUATE $HIContGrp
       WHEN = '4'       
       WHEN = '5' 
         let  $X19 = '2'   
         BREAK 
      WHEN = '0'       
      WHEN = '1' 
      WHEN = '2'       
      WHEN = '3'
         let  $X19 = '0'   
         BREAK 
      WHEN = '6'        
         let  $X19 = '3'   
         BREAK       
      WHEN-OTHER 
        let  $X19 = '1'   
        BREAK             
      END-EVALUATE 
   END-IF
   SHOW 'X19 ' $X19
   show 'sex ='$DSER_SEX
   let $X20 = $DSER_SEX !200 - 200
   if $X20 = 'F'
      let $X20 = 'W'
   end-if
   let $X21 = '1' !201 - 201
   let $X22 = '                ' !202-217
   show 'rep rsn = '$DSER_AAG_REP_RSN 
   if $DSER_AAG_REP_RSN = '01'
      let $X23 = 'J' !218-218
    else
      let $X23 = 'N' !218-218
   end-if
   
   if $DSER_AAG_REP_RSN = '02'
      let $X24 = 'J' !219-219
    else
      let $X24 = 'N' !219-219
   end-if
   
   if $DSER_AAG_REP_RSN = '03'
      let $X25 = 'J' !220-220
    else
      let $X25 = 'N' !220-220
   end-if
   let $X26 = 'J' !221-221 DBBV   
   let $X27 = 'J' !222-222 DBNA
   let $X28 = 'J' !223-223 DBAA  
   
   let $DSER_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 ||
                   $X12 || $X13 || $X14 || $X15 || $X16 || $X17 || $X18 || $X19 || $X20 || $X21 ||
                   $X22 || $X23 || $X24 || $X25 || $X26 || $X27 || $X28
   
  ! let #rval_aag = length($DSER_VAR)

end-procedure Build-WRITE_DSER_TO_FILE
!********************GET DBAU DATA****************************
begin-procedure Get_DBAU_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DSER_PRD_END_DT, 
        :$DBAU_GPDE_AAG_BEGINABS, :$DBAU_GPDE_AAG_ENDABS,:$DBAU_GPDE_RP_AAG_TYPCLC, :#DBAU_GPDE_RP_AAG_GRSS, :$DBAU_GPDE_RP_AAG_TYPGRS, 
        :$DBAU_GPDE_RP_AAG_TYPACT,:#DBAU_GPDE_RP_AAG_RFDTME,:$DBAU_GPDE_RP_AAG_TYPTME,:#DBAU_STD_HOURS, :#DBAU_GPDE_RP_AAG_SCKPY,
        :#DBAU_GPDE_RP_AAG_ERCTB,:#DBAU_GPDE_RP_AAG_RFDPCT,:#DBAU_GPDE_RP_AAG_RFDGRS, :$DBAU_GPDE_RP_AAG_TYPAU, :$DBAU_GPDE_RP_AAG_TYPDY1,
        :$DBAU_GPDE_RP_AAG_HRDY1,:$DBAU_GPDE_AAG_WRKDYLST,:#DBAU_GPDE_RP_AAG_AZDYL )

   show 'Entering Get_DBAU_Data '
   show 'EMPLID = '$emplid    
   show 'Cal run id  = '$cal_run_id
   SHOW 'PRD END DT = '$DSER_PRD_END_DT
   show 'GPDE_DV_EVT_EFFDT = '$GPDE_DV_EVT_EFFDT
   show 'GPDE_DV_RUN = '#GPDE_DV_RUN
   show 'GPDE_DV_CANCEL = '$GPDE_DV_CANCEL
BEGIN-SELECT

GPDE_AAG_BEGINABS  &_DBAU_GPDE_AAG_BEGINABS
GPDE_AAG_ENDABS    &_DBAU_GPDE_AAG_ENDABS
GPDE_RP_AAG_GRSS   &_DBAU_GPDE_RP_AAG_GRSS
GPDE_RP_AAG_SCKPY  &_DBAU_GPDE_RP_AAG_SCKPY
GPDE_RP_AAG_ERCTB  &_DBAU_GPDE_RP_AAG_ERCTB
GPDE_RP_AAG_RFDPCT &_DBAU_GPDE_RP_AAG_RFDPCT
GPDE_RP_AAG_RFDGRS &_DBAU_GPDE_RP_AAG_RFDGRS
GPDE_RP_AAG_RFDTME &_DBAU_GPDE_RP_AAG_RFDTME
GPDE_RP_AAG_HRDY1  &_DBAU_GPDE_RP_AAG_HRDY1
STD_HOURS          &_DBAU_STD_HOURS
GPDE_RP_AAG_TYPAU  &_DBAU_GPDE_RP_AAG_TYPAU
GPDE_RP_AAG_TYPCLC &_DBAU_GPDE_RP_AAG_TYPCLC
GPDE_RP_AAG_TYPDY1 &_DBAU_GPDE_RP_AAG_TYPDY1
GPDE_RP_AAG_TYPGRS &_DBAU_GPDE_RP_AAG_TYPGRS
GPDE_RP_AAG_TYPTME &_DBAU_GPDE_RP_AAG_TYPTME
GPDE_RP_AAG_TYPACT &_DBAU_GPDE_RP_AAG_TYPACT
GPDE_AAG_WRKDYLST  &_DBAU_GPDE_AAG_WRKDYLST
GPDE_RP_AAG_AZDYL  &_DBAU_GPDE_RP_AAG_AZDYL
    
   let $DBAU_GPDE_AAG_BEGINABS = &_DBAU_GPDE_AAG_BEGINABS
   let $DBAU_GPDE_AAG_ENDABS   = &_DBAU_GPDE_AAG_ENDABS
   let #DBAU_GPDE_RP_AAG_GRSS  = &_DBAU_GPDE_RP_AAG_GRSS
   let #DBAU_GPDE_RP_AAG_SCKPY = &_DBAU_GPDE_RP_AAG_SCKPY
   let #DBAU_GPDE_RP_AAG_ERCTB = &_DBAU_GPDE_RP_AAG_ERCTB
   let #DBAU_GPDE_RP_AAG_RFDPCT = &_DBAU_GPDE_RP_AAG_RFDPCT
   let #DBAU_GPDE_RP_AAG_RFDGRS = &_DBAU_GPDE_RP_AAG_RFDGRS
   let #DBAU_GPDE_RP_AAG_RFDTME = &_DBAU_GPDE_RP_AAG_RFDTME
   let #DBAU_STD_HOURS = &_DBAU_STD_HOURS
   let $DBAU_GPDE_RP_AAG_TYPAU =  &_DBAU_GPDE_RP_AAG_TYPAU
   let $DBAU_GPDE_RP_AAG_TYPCLC = &_DBAU_GPDE_RP_AAG_TYPCLC
   let $DBAU_GPDE_RP_AAG_TYPDY1 = &_DBAU_GPDE_RP_AAG_TYPDY1
   let $DBAU_GPDE_RP_AAG_TYPGRS = &_DBAU_GPDE_RP_AAG_TYPGRS
   let $DBAU_GPDE_RP_AAG_TYPTME = &_DBAU_GPDE_RP_AAG_TYPTME
   let $DBAU_GPDE_RP_AAG_TYPACT = &_DBAU_GPDE_RP_AAG_TYPACT
   let $DBAU_GPDE_AAG_WRKDYLST = &_DBAU_GPDE_AAG_WRKDYLST
   let #DBAU_GPDE_RP_AAG_AZDYL = &_DBAU_GPDE_RP_AAG_AZDYL
   
FROM PS_GPDE_AAG_DBAU_R
    
WHERE EMPLID          = $emplid
  AND EMPL_RCD        = #EMPL_RCD_NBR
  AND CAL_RUN_ID      = $CAL_RUN_ID
  AND PRD_END_DT      = $DSER_PRD_END_DT
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT  
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

 
end-procedure Get_DBAU_Data
!************************************************
begin-procedure Process_DBAU_Data($GPDE_DV_CANCEL, $DBAU_GPDE_AAG_BEGINABS, $DBAU_GPDE_AAG_ENDABS,$DBAU_GPDE_RP_AAG_TYPCLC, 
        #DBAU_GPDE_RP_AAG_GRSS, $DBAU_GPDE_RP_AAG_TYPGRS, $DBAU_GPDE_RP_AAG_TYPACT,#DBAU_GPDE_RP_AAG_RFDTME,
        $DBAU_GPDE_RP_AAG_TYPTME,#DBAU_STD_HOURS, #DBAU_GPDE_RP_AAG_SCKPY,#DBAU_GPDE_RP_AAG_ERCTB,#DBAU_GPDE_RP_AAG_RFDPCT,
        #DBAU_GPDE_RP_AAG_RFDGRS, $DBAU_GPDE_RP_AAG_TYPAU, $DBAU_GPDE_RP_AAG_TYPDY1,#DBAU_GPDE_RP_AAG_HRDY1, 
        $DBAU_GPDE_AAG_WRKDYLST, #DBAU_GPDE_RP_AAG_AZDYL, :$DBAU_VAR)

        SHOW 'ENTERING PROCESS_DBAU_DATA'
LET $DBAU_VAR = ''
let $X1 = 'DBAU' !1-4

if $GPDE_DV_CANCEL = 'Y'
 let $X2 = '1' !5-5 
else
 let $X2 = '0' 
end-if  

do ConvertToComponents($DBAU_GPDE_AAG_BEGINABS,$YE,$ME,$DE)
let $X3 = $YE || $ME || $DE     !6-13 yyyymmdd
show 'gpde aag begin abs = '$X3
do ConvertToComponents($DBAU_GPDE_AAG_ENDABS,$YE,$ME,$DE)
let $X4 = $YE || $ME || $DE   !14-21 yyyymmdd
show 'gpde aag end abs = '$X4
let $X5 = $DBAU_GPDE_RP_AAG_TYPCLC !22-22
let $X6 = translate(edit(#DBAU_GPDE_RP_AAG_GRSS, '0999999.99'), '.', '')   !23-31
let $X7 = $DBAU_GPDE_RP_AAG_TYPGRS !32-32
let $X8 = $DBAU_GPDE_RP_AAG_TYPACT !33-33
show '#DBAU_GPDE_RP_AAG_RFDDYS '#DBAU_GPDE_RP_AAG_RFDDYS
let $X9 = translate(edit(#DBAU_GPDE_RP_AAG_RFDTME, '099.99'), '.', '')  !34-38
let $X10 = $DBAU_GPDE_RP_AAG_TYPTME !39-39 HR - 3
let $X11 = translate(edit(#DBAU_STD_HOURS, '09.99'), '.', '')  !40-43
let $X12 = translate(edit(#DBAU_GPDE_RP_AAG_AZDYL, '09.99'), '.', '')   !44-47
let $X13 = translate(edit(#DBAU_GPDE_RP_AAG_SCKPY, '0999999.99'), '.', '')  !48-56
let $X14 = translate(edit(#DBAU_GPDE_RP_AAG_ERCTB, '0999999.99'), '.', '')  !57-65
let $X15 = translate(edit(#DBAU_GPDE_RP_AAG_RFDPCT, '099.99'), '.', '') !66-70
let $X16 = translate(edit(#DBAU_GPDE_RP_AAG_RFDGRS, '0999999.99'), '.', '') !71-79
let $X17 = $DBAU_GPDE_RP_AAG_TYPAU !80-80
let $X18 = $DBAU_GPDE_RP_AAG_TYPDY1 !81-81
let $X19 = '    ' !82-85

do ConvertToComponents($DBAU_GPDE_AAG_WRKDYLST,$YE,$ME,$DE)
let $X20 = $YE || $ME || $DE   !86-93 yyyymmdd

let $DBAU_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 || $X12 || $X13 || $X14 || $X15 || $X16 || $X17 || $X18 || $X19 || $X20
 !let #rval_AAG = length($DBAU_VAR)
   show 'DBAU result'  $DBAU_VAR      
end-procedure Process_DBAU_Data
!************************************************
begin-procedure Get_DBBT_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, 
        #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DSER_PRD_END_DT, :$DBBT_GPDE_AAG_BEGINABS, :$DBBT_GPDE_AAG_ENDABS,:$DBBT_GPDE_RP_AAG_TYPCLC, 
        :$DBBT_GPDE_AAG_WRKDYLST, :#DBBT_GPDE_RP_AAG_SCKPY,:#DBBT_GPDE_RP_AAG_ERCTB,:#DBBT_GPDE_RP_AAG_RFDPCT,
        :#DBBT_GPDE_RP_AAG_RFDGRS,:$DBBT_GPDE_RP_AAG_TYPEBN )
        
BEGIN-SELECT

GPDE_AAG_BEGINABS  &_DBBT_GPDE_AAG_BEGINABS
GPDE_AAG_ENDABS    &_DBBT_GPDE_AAG_ENDABS
GPDE_RP_AAG_SCKPY  &_DBBT_GPDE_RP_AAG_SCKPY
GPDE_RP_AAG_ERCTB  &_DBBT_GPDE_RP_AAG_ERCTB
GPDE_RP_AAG_RFDPCT &_DBBT_GPDE_RP_AAG_RFDPCT
GPDE_RP_AAG_RFDGRS &_DBBT_GPDE_RP_AAG_RFDGRS
GPDE_RP_AAG_TYPEBN &_DBBT_GPDE_RP_AAG_TYPEBN
GPDE_RP_AAG_TYPCLC &_DBBT_GPDE_RP_AAG_TYPCLC
GPDE_AAG_WRKDYLST  &_DBBT_GPDE_AAG_WRKDYLST

   let $DBBT_GPDE_AAG_BEGINABS = &_DBBT_GPDE_AAG_BEGINABS
   let $DBBT_GPDE_AAG_ENDABS   = &_DBBT_GPDE_AAG_ENDABS   
   let #DBBT_GPDE_RP_AAG_SCKPY = &_DBBT_GPDE_RP_AAG_SCKPY
   let #DBBT_GPDE_RP_AAG_ERCTB = &_DBBT_GPDE_RP_AAG_ERCTB
   let #DBBT_GPDE_RP_AAG_RFDPCT = &_DBBT_GPDE_RP_AAG_RFDPCT
   let #DBBT_GPDE_RP_AAG_RFDGRS = &_DBBT_GPDE_RP_AAG_RFDGRS      
   let $DBBT_GPDE_RP_AAG_TYPEBN = &_DBBT_GPDE_RP_AAG_TYPEBN
   let $DBBT_GPDE_RP_AAG_TYPCLC = &_DBBT_GPDE_RP_AAG_TYPCLC
   let $DBBT_GPDE_AAG_WRKDYLST = &_DBBT_GPDE_AAG_WRKDYLST

FROM PS_GPDE_AAG_DBBT_R

WHERE EMPLID          = $emplid
  AND EMPL_RCD        = #EMPL_RCD_NBR
  AND CAL_RUN_ID      = $CAL_RUN_ID
  AND PRD_END_DT      = $DSER_PRD_END_DT
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT  
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT

end-procedure Get_DBBT_Data

begin-procedure Process_DBBT_Data($GPDE_DV_CANCEL, $DBBT_GPDE_AAG_BEGINABS, $DBBT_GPDE_AAG_ENDABS,$DBBT_GPDE_RP_AAG_TYPCLC, 
        $DBBT_GPDE_AAG_WRKDYLST, #DBBT_GPDE_RP_AAG_SCKPY,#DBBT_GPDE_RP_AAG_ERCTB,#DBBT_GPDE_RP_AAG_RFDPCT,
        #DBBT_GPDE_RP_AAG_RFDGRS,$DBBT_GPDE_RP_AAG_TYPEBN, :$DBBT_VAR)

LET $DBBT_VAR = ''
let $X1 = 'DBBT' !1-4

if $GPDE_DV_CANCEL = 'Y'
 let $X2 = '1' !5-5 - put inside the select query
else
  let $X2 = '0' 
end-if  

do ConvertToComponents($DBBT_GPDE_AAG_BEGINABS,$YE,$ME,$DE)
let $X3 = $YE || $ME || $DE   !6-13 yyyymmdd
do ConvertToComponents($DBBT_GPDE_AAG_ENDABS,$YE,$ME,$DE)
let $X4 =  $YE || $ME || $DE !14-21 yyyymmdd
let $X5 = $DBBT_GPDE_RP_AAG_TYPCLC !22-22
!do ConvertToComponents($DBBT_GPDE_AAG_WRKDYLST,$YE,$ME,$DE)
let $X6 =  $YE || $ME || $DE  !23-30
let $X6 = rpad($X6, 8, ' ')
let $X7 = translate(edit(#DBBT_GPDE_RP_AAG_SCKPY, '0999999.99'), '.', '') !31-39
let $X8 = translate(edit(#DBBT_GPDE_RP_AAG_ERCTB, '0999999.99'), '.', '') !40-48
let $X9 = translate(edit(#DBBT_GPDE_RP_AAG_RFDPCT, '099.99'), '.', '') !49-53
let $X10 = translate(edit(#DBBT_GPDE_RP_AAG_RFDGRS, '0999999.99'), '.', '') !54-62
let $X11 = $DBBT_GPDE_RP_AAG_TYPEBN !63-63
let $X12 = '00000000' !64-71

let $DBBT_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 || $X12
SHOW 
let #rval_AAG = length($DBBT_VAR)

end-procedure Process_DBBT_Data
!************************************************
begin-procedure Get_DBZU_Data($EMPLID, #EMPL_RCD_NBR, $CAL_RUN_ID, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, $GPDE_DV_CANCEL, $DSER_PRD_END_DT, 
        :$DBZU_GPDE_AAG_BEGINABS, :$DBZU_GPDE_AAG_ENDABS,:$DBZU_GPDE_RP_AAG_TYPCLC, :$DBZU_GPDE_AAG_BEGINMAT, :$DBZU_GPDE_AAG_ENDMAT,:#DBZU_GPDE_RP_AAG_GRSS,:#DBZU_GPDE_RP_AAG_NTDYL,
        :#DBZU_GPDE_RP_AAG_NTMTHL,:#DBZU_GPDE_RP_AAG_MATPYM )

BEGIN-SELECT

GPDE_AAG_BEGINABS  &_DBZU_GPDE_AAG_BEGINABS
GPDE_AAG_ENDABS    &_DBZU_GPDE_AAG_ENDABS
GPDE_AAG_BEGINMAT  &_DBZU_GPDE_AAG_BEGINMAT
GPDE_AAG_ENDMAT  &_DBZU_GPDE_AAG_ENDMAT
GPDE_RP_AAG_GRSS &_DBZU_GPDE_RP_AAG_GRSS
GPDE_RP_AAG_NTDYL &_DBZU_GPDE_RP_AAG_NTDYL
GPDE_RP_AAG_NTMTHL &_DBZU_GPDE_RP_AAG_NTMTHL
GPDE_RP_AAG_TYPCLC &_DBZU_GPDE_RP_AAG_TYPCLC
GPDE_RP_AAG_MATPYM  &_DBZU_GPDE_AAG_MATPYM

   let $DBZU_GPDE_AAG_BEGINABS = &_DBZU_GPDE_AAG_BEGINABS
   let $DBZU_GPDE_AAG_ENDABS   = &_DBZU_GPDE_AAG_ENDABS   
   let $DBZU_GPDE_AAG_BEGINMAT = &_DBZU_GPDE_AAG_BEGINMAT
   let $DBZU_GPDE_AAG_ENDMAT  = &_DBZU_GPDE_AAG_ENDMAT
   let #DBZU_GPDE_RP_AAG_GRSS = &_DBZU_GPDE_RP_AAG_GRSS
   let #DBZU_GPDE_RP_AAG_NTDYL = &_DBZU_GPDE_RP_AAG_NTDYL
   let #DBZU_GPDE_RP_AAG_NTMTHL = &_DBZU_GPDE_RP_AAG_NTMTHL
   let $DBZU_GPDE_RP_AAG_TYPCLC = &_DBZU_GPDE_RP_AAG_TYPCLC
   let #DBZU_GPDE_RP_AAG_MATPYM =  &_DBZU_GPDE_AAG_MATPYM

FROM PS_GPDE_AAG_DBZU_R

WHERE EMPLID          = $emplid
  AND EMPL_RCD        = #EMPL_RCD_NBR
  AND CAL_RUN_ID      = $CAL_RUN_ID
  AND PRD_END_DT      = $DSER_PRD_END_DT
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT  
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND GPDE_DV_CANCEL   = $GPDE_DV_CANCEL

END-SELECT
end-procedure Get_DBZU_Data

begin-procedure Process_DBZU_Data($GPDE_DV_CANCEL, $DBZU_GPDE_AAG_BEGINABS, $DBZU_GPDE_AAG_ENDABS,$DBZU_GPDE_RP_AAG_TYPCLC, 
        $DBZU_GPDE_AAG_BEGINMAT, $DBZU_GPDE_AAG_ENDMAT,#DBZU_GPDE_RP_AAG_GRSS,#DBZU_GPDE_RP_AAG_NTDYL,
        #DBZU_GPDE_RP_AAG_NTMTHL,#DBZU_GPDE_RP_AAG_MATPYM, :$DBZU_VAR) 

LET $DBZU_VAR = ''
let $X1 = 'DBZU' !1-4

if $GPDE_DV_CANCEL = 'Y'
 let $X2 = '1' !5-5 - put inside the select query
else
  let $X2 = '0' 
end-if  
let $YE = ''
let $ME = ''
let $DE = ''
show '$DBZU_GPDE_AAG_BEGINABS =' $DBZU_GPDE_AAG_BEGINABS
do ConvertToComponents($DBZU_GPDE_AAG_BEGINABS,$YE,$ME,$DE)
let $X3 =  $YE || $ME || $DE  !6-13 yyyymmdd
do ConvertToComponents($DBZU_GPDE_AAG_ENDABS,$YE,$ME,$DE)
let $X4 =  $YE || $ME || $DE  !14-21 yyyymmdd
let $X5 = $DBZU_GPDE_RP_AAG_TYPCLC !22-22
SHOW '$DBZU_GPDE_AAG_BEGINMAT = '$DBZU_GPDE_AAG_BEGINMAT
do ConvertToComponents($DBZU_GPDE_AAG_BEGINMAT,$YE,$ME,$DE)
let $X6 =  $YE || $ME || $DE !23-30
do ConvertToComponents($DBZU_GPDE_AAG_endMAT,$YE,$ME,$DE)
let $X7 =  $YE || $ME || $DE !31-38

let $X8 = translate(edit(#DBZU_GPDE_RP_AAG_GRSS, '0999999.99'), '.', '') !39-47
let $X9 = translate(edit(#DBZU_GPDE_RP_AAG_NTDYL, '0999999.99'), '.', '') !48-56
let $X10 = translate(edit(#DBZU_GPDE_RP_AAG_NTMTHL, '0999999.99'), '.', '') !57-65
let $X11 = translate(edit(#DBZU_GPDE_RP_AAG_MATPYM, '0999999.99'), '.', '') !66-74
let $X12 = '000000000' !75-83
let $X13 = '00000000' !84-91 - expected date of birth . not supoorted now

let $DBZU_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10 || $X11 || $X12 || $X13
!let #rval_AAG = length($DBZU_VAR)     

end-procedure Process_DBZU_Data
!************************************************
BEGIN-PROCEDURE Get_SRC_BANKID($Ctl_Pay_Entity, :$SRC_BANK_ID)
BEGIN-SELECT 

SBNK.SRC_BANK_ID 

   let $SRC_BANK_ID = &SBNK.SRC_BANK_ID
   
FROM PS_GP_PE_SBANK_DTL SBNK 
WHERE SBNK.PAY_ENTITY = $Ctl_Pay_Entity
 AND EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_PE_SBANK_DTL SBNK1 WHERE 
              SBNK1.PAY_ENTITY = SBNK.PAY_ENTITY)
END-SELECT              
END-PROCEDURE
!************************************************
BEGIN-PROCEDURE Get_DBBV_Data($PAYENTITY,$EMPLID, $SRC_BANK_ID, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN, :$DBBV_BANK_CD, :$DBBV_BRANCH_EC_CD,
   :$DBBV_ACCOUNT_EC_ID, :$DBBV_INTL_BANK_ACCT_NBR, :$DBBV_EMPLID)
   
show 'get dbbv data - payentity ' $payentity
SHOW 'SRC BANK ID = ' $SRC_BANK_ID 
SHOW '$GPDE_DV_EVT_EFFDT  = '$GPDE_DV_EVT_EFFDT 
SHOW 'DV RUN '#GPDE_DV_RUN


BEGIN-SELECT

BANK_CD &_DBBV_BANK_CD
BRANCH_EC_CD &_DBBV_BRANCH_EC_CD
ACCOUNT_EC_ID &_DBBV_ACCOUNT_EC_ID
INTL_BANK_ACCT_NBR &_DBBV_INTL_BANK_ACCT_NBR
EMPLID &_DBBV_EMPLID

   let $DBBV_BANK_CD = &_DBBV_BANK_CD
    let $DBBV_BRANCH_EC_CD = &_DBBV_BRANCH_EC_CD
    let $DBBV_ACCOUNT_EC_ID = &_DBBV_ACCOUNT_EC_ID
    let $DBBV_INTL_BANK_ACCT_NBR = &_DBBV_INTL_BANK_ACCT_NBR
    let $DBBV_EMPLID = &_DBBV_EMPLID

FROM PS_GPDE_AAG_DBBV

WHERE PAY_ENTITY          = $PAYENTITY
  !AND SRC_BANK_ID = $SRC_BANK_ID  
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT  
  AND GPDE_DV_RUN      = #GPDE_DV_RUN
  AND EMPLID = $EMPLID
  
END-SELECT

end-procedure Get_DBBV_Data
   
begin-procedure Process_DBBV_Data($DBBV_BANK_CD, $DBBV_BRANCH_EC_CD,
   $DBBV_ACCOUNT_EC_ID, $DBBV_INTL_BANK_ACCT_NBR, $Absender, $DBBV_EMPLID, :$DBBV_VAR)

let $DBBV_VAR = ''
let $X1 = 'DBBV' !1-4
let $X2 = '0'  !5-5
let $X3 = '000000' !6-11
let $X4 = LPAD($DBBV_ACCOUNT_EC_ID,10, '0' ) !12-21 
let $X5 = $DBBV_BANK_CD !22-29 

let $X6 = rpad($DBBV_INTL_BANK_ACCT_NBR, 34, ' ') !30-63
let $X7 = rpad($DBBV_BRANCH_EC_CD, 11, ' ')!64-74
SHOW 'PAY ENTITY NAME = '$Absender
let $X8 = rpad($Absender, 50, ' ') !75-124 50
let $X9 = 'Erstattung fuer ' !125 -140 
let $X10 = rpad($DBBV_EMPLID, 34, ' ') !141-174 50

let $DBBV_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7 || $X8 || $X9 || $X10
!let #rval_AAG = length($DBBV_VAR)     

end-procedure AAG-Start-Record-DBBV

!***
begin-procedure Get_AAG_DBNA_Data($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, #GPDE_DV_RUN,
                :$DBNA_GPDE_DV_LAST_NAME, :$DBNA_GPDE_DV_FIRST_NAME,:$DBNA_name_royal_prefix,:$DBNA_name_royal_suffix, :$DBNA_name_title )

BEGIN-SELECT

EMPLID             &DBNA_EMPLID
EMPL_RCD           &DBNA_EMPL_RCD
GPDE_DV_EVT_EFFDT  &DBNA_GPDE_DV_EVT_EFFDT
GPDE_DV_RUN        &DBNA_GPDE_DV_RUN
GPDE_DV_LAST_NAME  &DBNA_GPDE_DV_LAST_NAME
GPDE_DV_FIRST_NAME &DBNA_GPDE_DV_FIRST_NAME
NAME_ROYAL_PREFIX  &DBNA_NAME_ROYAL_PREFIX
NAME_ROYAL_SUFFIX  &DBNA_NAME_ROYAL_SUFFIX
NAME_TITLE         &DBNA_NAME_TITLE

   let $DBNA_GPDE_DV_LAST_NAME  = &DBNA_GPDE_DV_LAST_NAME
   let $DBNA_GPDE_DV_FIRST_NAME = &DBNA_GPDE_DV_FIRST_NAME
   let $DBNA_name_royal_prefix  = &DBNA_NAME_ROYAL_PREFIX
   let $DBNA_name_royal_suffix  = &DBNA_NAME_ROYAL_SUFFIX
   let $DBNA_name_title         = &DBNA_NAME_TITLE   

FROM PS_GPDE_AAG_DBNA

WHERE EMPLID          = $emplid
  AND EMPL_RCD       = #EMPL_RCD_NBR
  AND GPDE_DV_EVT_EFFDT = $GPDE_DV_EVT_EFFDT  
  AND GPDE_DV_RUN      = #GPDE_DV_RUN 

END-SELECT

end-procedure Get_AAG_DBNA_Data

!***
begin-procedure Process_AAG_DBNA_Data($DBNA_GPDE_DV_LAST_NAME, $DBNA_GPDE_DV_FIRST_NAME,
                $DBNA_name_royal_prefix,$DBNA_name_royal_suffix, $DBNA_name_title, :$DBNA_AAG_VAR)

      
   let $DBNA_AAG_VAR = ''

   !001-004 KENNUNG
   let $X1 = 'DBNA'
   !005-034 FAMILIENNAME   
   let $X2 = rpad($DBNA_GPDE_DV_LAST_NAME,30,' ')

   !035-064 VORNAME
   let $X3 = rpad($DBNA_GPDE_DV_FIRST_NAME,30, ' ')
   
   !065-084 VORSATZWORT
   let $X4 = rpad($DBNA_name_royal_prefix,20,' ')
   
   !085-104 NAMENSZUSATZ
   let $X5 = rpad($DBNA_name_royal_suffix,20,' ')
   
   !105-124 TITLE
   let $X6 = substr($DBNA_name_title,1,20)   
   let $X6 = rpad($X6, 20, ' ')
   
   !125-125 reserve 1 space
   let $X7 = ' '
   
   let $DBNA_AAG_VAR = $X1 || $X2 || $X3 || $X4 || $X5 || $X6 || $X7
   
end-procedure Process_AAG_DBNA_Data

!***********************************************
begin-procedure AAG-DBAA($Clerk_GENDER, $Clerk_NAME, $Clerk_PHONE, $Clerk_FAX, $Clerk_EMAIL, $Absender, $Postal_abs, $City_Abs,  $Address1,:$DBAA_VAR)

let $XK1 = 'DBAA' !01 - 4
!let $XK2 = {DSER_VERFAHREN} 
let $XK2 = $Clerk_GENDER          ! Gender 5-5
let $XK3 = rpad($Clerk_Name, 30, ' ')           !NAME ANSPRECHPARTNER 6-35
let $XK4 = rpad($Clerk_PHONE, 20, ' ')           !TEL 36-55
let $XK5 = rpad($Clerk_FAX,20, ' ')             !FAX 56-75
let $XK6 = rpad($Clerk_EMAIL, 70, ' ')           !EMAIL 76-145
! general field population
let $XK7 = rpad($Absender, 30, ' ' )           ! NAME1-ABSENDER 146-175
let $XK8 = rpad($XK8, 30, ' ')                  ! NAME2-ABSENDER 176-205
let $XK9 = rpad($XK9, 30, ' ')                   ! NAME3-ABSENDER 206-235
let $XK10= rpad($Postal_abs, 10, ' ')             !PLZ-BETRIEB (10) 236-245 
let $XK11= rpad($City_Abs, 34, ' ')               !ORT-BETRIEB (34) 246-279
let $XK12= rpad($Address1, 33, ' ')               !STRASSE-BETRIEB       = by definition ADDRESS1 280-312
let $XK13= rpad($XK13, 9, ' ')                      !HAUSNR-BETRIEB        not available separately 313-321

! Chg-Char replaces special chars in names and addresses
do Chg-Char($XK7,$XK7)
do Chg-Char($XK8,$XK8)
do Chg-Char($XK9,$XK9)
do Chg-Char($XK10,$XK10)
do Chg-Char($XK11,$XK11)
do Chg-Char($XK12,$XK12)
do Chg-Char($XK13,$XK13)

let $DBAA_VAR = $XK1 || $XK2 || $XK3 || $XK4 || $XK5 || $XK6 || $XK7 || $XK8 || $XK9 || $XK10 || $XK11 || $XK12 || $XK13

end-procedure AAG-DBAA
!******************************************************************************
begin-procedure Print-Data-A
   ! mit &DSME_DV_REP_TYPE_DEU ..
   do Get-CompanyData(&DSME_EMPLID, &DSME_EMPL_RCD_NBR, &DSME_GPDE_DV_EVT_EFFDT,
      &DSME_GPDE_DV_REP_RSN, &DSME_DV_REP_TYPE_DEU, $CompName, $CompStreet, $CompZip, $CompCity)

! employer data
! wdu05-881b9 removed blank line from company address, changed Font

! regular print
alter-printer
point-size = 9

   print $CompName              (1,{mcol1})
   print $CompStreet            (+1,{mcol1})
   print $CompZip               (+1,{mcol1})
   print ' '                    (0,+1)
   print $CompCity              (0,0)

! fine print envelope window (and body text)
alter-printer
point-size = 7.2

   let $AText = $CompName || ' - ' || $CompStreet || ' - ' || $CompZip || ' ' || $CompCity
   print $AText              (11,{mcol1})



   print 'AG-Betriebsnummer:'   (7,{mcol2})
   print &DSME_GPDE_SI_BTNR (0,{mcol3})

! Tagesdatum
   print 'Datum:' (8,{mcol2})
   do Convert-To-DTU-Date($AsOfToday, $dt)
   let $dt = substr($dt,9,2) || '.' || substr($dt,6,2) || '.' || substr($dt,1,4)
   print $dt      (0,{mcol3})


! employee data, get personal data as of today
!26-10-2001
!wdu 20040722--changed from:    do Get-Pers-Data-Effdt(&DSME_EMPLID, &DSME_GPDE_DV_EVT_EFFDT,

! wdu06-890b7 changed address lookup from parameter-based to plain globals
! was:  do Get-Pers-Data-Effdt(&DSME_EMPLID, $AsOfToday,
! implicit param-In: &DSME_EMPLID, $AsOfToday
   do Get-Pers-Data-Effdt

   ! rh07 890B09 - Print EMPLID and EMPL_RCD in PDF files
   print 'Personalnummer:'        (3,{mcol2})
   let $EmplIDEmplRcd =  rpad(rtrim(&DSME_EMPLID, ' ') || '/' || rtrim(to_char(&DSME_EMPL_RCD_NBR),' '),20,' ')
   print $EmplIDEmplRcd           (0,{mcol3})
   !print &DSME_EMPLID             (0,{mcol3})
   print 'Versicherungsnummer:'   (+1,{mcol2})
   print &DSME_RVNR               (0,{mcol3})

   print 'Geburtsdatum:' (+1,{mcol2})
   do Convert-To-DTU-Date(&PDATA_BIRTHDATE, $birthdt)
   let $birthdt = substr($birthdt,9,2) || '.' || substr($birthdt,6,2) || '.' || substr($birthdt,1,4)
   print $birthdt                 (0,{mcol3})


   alter-printer
   point-size = 9

   ! ------ wdu05b6: added code for report distribution
   let #DistPos = 50 - length($DistributionText) + {mcol_ee_data}
   print $DistributionText         (13,#DistPos)
   ! ------ end

! wdu05-881b9 -- replaced pde_sex with pde_name_prefix, so that the correct prefix is printed when sex is unknown
!   if $pde_name_prefix = 'F'
!      print 'Frau' (12,{mcol_ee_data})
!   else
!      print 'Herr' (12,{mcol_ee_data})
!   end-if

   ! wdu06-890b7 use common address printing feature
   print ' ' (13,{mcol_ee_data})        ! position cursor first
   do DinPrintAdapterPersonal



! --
! --    print $Employee_Full_Name               (+1,{mcol_ee_data})
! --
! --    let $today_address1 = ltrim($today_address1,' ')

! --    let $today_address2 = ltrim($today_address2,' ')
! --    print $today_address1        (+1,{mcol_ee_data})
! --    print $today_address2        (+1,{mcol_ee_data})
! --
! --    ! get nationality_cd with PS_PERS_DATA_EFFDT.COUNTRY
! --    do Get-Nation-Duevo-By-Country_DV1($today_country, $Nation_Descr, $Nationality, $nationality_cd)
! --
! --    let $nationality_cd = rtrim($nationality_cd, ' ')
! --
! --
! --
! --    let $today_p1 = ''
! --
! -- !ChangedFor2004Bundle2: removed 'D-' on postal for Germany
! -- !!old:   if $postal = '' or $postal = 'D'
! --
! --    if $nationality_cd = '' or $nationality_cd = 'D'
! --
! --       let $today_p1 = ltrim(rtrim($today_postal,' '),' ') || ' ' || rtrim($today_city, ' ')
! --       print $today_p1        (+1,{mcol_ee_data})
! --
! --    else
! --       let $today_p1 = $nationality_cd || '-' || rtrim($today_postal,' ') || ' ' || rtrim($today_city, ' ')
! --       print $today_p1               (+1,{mcol_ee_data})
! --    end-if
! --
! --
! --    !ChangedFor2004Bundle2: change font back
! -- !       alter-printer
! -- !       font= 4
! -- !       point-size =8
! --
! --    !2004changedforBundle2:Printsize adress

   alter-printer
   point-size = 7.2

end-procedure Print-Data-A
!*****************************************************************
begin-procedure Print-Data-B($Cancel, $EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $GPDE_DV_REP_RSN,
                             :#LastLine)
   let #Start_Line = 26
   print '_'                      (#Start_Line,{col1},{mcol_right_margin})FILL

   if $Cancel = 'Y'
      print 'Stornierung einer bereits abgegebenen Meldung' (+2,{mcol1}) bold
      !print ' ' (+1,0)
      let #Start_Line = #Start_Line + 2
   end-if

   let $_FieldName  = 'GPDE_DV_EMPL_CAT'
   let $_FieldValue = &_DSME_DV_EMPL_CAT_DEU
   do Read-Translate-Table
   let $PrDescr = $_XlatLongName

! wdu 04b4: correction of line counting and output to prevent overtyping
   print 'Grund der Abgabe'             (+2,{mcol1})
!   print 'Abgabe    '             (+1,{mcol1})

   print $GPDE_DV_REP_RSN          (+1,{mcol1})
   print ' = '                    (0,0)

   let $_FieldName  = 'GPDE_DV_REP_RSN'
   let $_FieldValue = $GPDE_DV_REP_RSN
   do Read-Translate-Table
   print $_XlatLongName           (0,0)


   let #line = #Start_Line + 5
   let #line01 = #Start_Line + 5 + 1
   print 'Beschäftigungszeit'     (#line,{mcol1})
   print 'von            bis'     (+1,{mcol1})

   print 'Bruttoarbeitsentgelt'   (#line,{mcol4})
   print '(volle DM/Euro)       DM  Euro'  (+1,{mcol4})

   print 'Mehrfach-'              (#line,{mcol2})
   print 'beschäftigung'          (+1,{mcol2})

   print 'Betriebsstätte'         (#line,{mcol3})
   print 'Ost       West'         (#line01,{mcol3})

   let #line = #Start_Line + 10
   print 'Staatsangehörigkeit'    (#line,{mcol2})

   let #line = #Start_Line + 10
   print 'Angaben zur Tätigkeit'  (#line,{mcol1})
   print 'Personengruppe'         (#line,{mcol4})

   let #line = #Start_Line + 14
   print 'Beitragsgruppen'        (#line,{mcol1})
   print '      KV              RV              AV              PV' (+1,{mcol1})

   !Krankenkasse
   let #line = #Start_Line + 14

   !print 'Krankenkasse'           (#line,{mcol2})
    print 'Einzugsstelle'           (#line,{mcol2})

!  rh 8.9 tax update 2007 - replace print &_PROV_PROVIDER_ID  (+1,{mcol2})
   print &_DSME_PROVIDER_ID       (+1,{mcol2})

   print ' '                      (0,0)
   print &_PROV_DESCR             (0,0)

   If &_RUN_GPDE_DO_PROV_ID = '17625773'
    Add 3 to #line
    print 'Mitgliedsnummer'    (#line,{mcol2})
   Add 1 to #line
   print &_DSME_GPDE_VW_MNRBV  (#line,{mcol2})
  End-if

! von, bis
   if &_DSME_DV_DBME_DEU = 'Y'
      if rtrim(&_DBME_BEGIN_DT, ' ') <> ''
         do Convert-To-DTU-Date(&_DBME_BEGIN_DT, $dt)
         let $dt = substr($dt,9,2) || '.' || substr($dt,6,2) || '.' || substr($dt,1,4)
         let #line = #Start_Line + 7
         print $dt                      (#line,{mcol1})
      end-if
      if rtrim(&_DBME_END_DT, ' ') <> ''
         do Convert-To-DTU-Date(&_DBME_END_DT, $dt)
         let $dt = substr($dt,9,2) || '.' || substr($dt,6,2) || '.' || substr($dt,1,4)
         let #line = #Start_Line + 7
         print $dt                      (#line,{mcol_end_dt})
      end-if
   end-if


! Personengruppenschluessel
   let #line = #Start_Line + 11
   print &_DSME_DV_EMPL_CAT_DEU    (#line,{mcol4})
   if rtrim($PrDescr, ' ') <> ''
      print ' = '                     (0,0)
      print $PrDescr            (0,0)
   end-if

! Mehrfachbeschaeftigte
! wdu-qk04 fixed values from 0/1 to N/Y
!
! wdu05b7: reversed the change to fix the multi-employment issue
! 0 is YES, other values is NO
! This is to eventually send correct Storno for existing reports (see ICE)
   let #line = #Start_Line + 7
   if &_DSME_DV_DBME_DEU = 'Y'
      if &_DBME_GPDE_SI_EMPL_MULT = '0'
         print 'Nein'                (#line,{mcol2})
      else
         print 'Ja'               (#line,{mcol2})
      end-if
   end-if

! Betriebsstaette Ost/West
   let #line = #Start_Line + 7
   if &_DSME_DV_DBME_DEU = 'Y'
      if &_DBME_GPDE_SI_REGION = '1'
         print 'X'                   (#line,{mcol3})
      else
         if &_DBME_GPDE_SI_REGION = '2'
            print 'X'                (#line,{mcol_region_west})
         end-if
      end-if
   end-if

! Beitragsgruppen, Angaben zur Taetigkeit, Staatsangeh.

   if &_DSME_DV_DBME_DEU = 'Y'
      do Get-Beitragsgruppen(&_DBME_GPDE_DV_SV_CODE, $KV, $RV, $AV, $PV, #Ok)
      if #Ok > 0

         let #line = #Start_Line + 16
         print $KV (#line,{mcol_kv})
         print $RV (#line,{mcol_rv})
         print $AV (#line,{mcol_av})
         print $PV (#line,{mcol_pv})

         ! BGR Text
         let #line = #Start_Line + 17
         do Print-BGR-Text('01', $KV, #line, {mcol1})
         do Print-BGR-Text('03', $RV, #line, {mcol_rv_text})
         do Print-BGR-Text('04', $AV, #line, {mcol_av_text})
         do Print-BGR-Text('02', $PV, #line, {mcol_pv_text})

      end-if
      let #line = #Start_Line + 11
      print &_DBME_GPDE_DV_BA_CD (#line,{mcol1})
   end-if


   let #line = #Start_Line + 11
   if rtrim(&_DSME_NATION_CD, ' ') <> ''
      print &_DSME_NATION_CD (#line,{mcol2})
      do Get-Nation-Duevo(&_DSME_NATION_CD, $Nation_Descr, $Nationality, $nationality_cd)
      print ' = '                 (0,0)
      print $Nationality          (0,0)
   end-if

   ! Entgelt
   !2004 Changed for Bundle2

   if &_DSME_DV_DBME_DEU = 'Y'
      if &_DBME_CURRENCY_CD = {CURRENCY_DM}
         let #line = #Start_Line + 7
         print 'X'     (#line,{mcol_curr_dem})  !56
      else
         if &_DBME_CURRENCY_CD = {CURRENCY_EURO}
            let #line = #Start_Line + 7
            print 'X' (#line,{mcol_curr_eur}) !60
         end-if
      end-if

      let $GPDE_BL_AMT = edit(&_DBME_GPDE_BL_AMT, '000000')
      let #line = #Start_Line + 7
      print $GPDE_BL_AMT (#line,{mcol4})

   end-if


   !Namensaenderung
   let #LastLine = #Start_Line + 18
   let #line = #Start_Line + 18



   if rtrim($GPDE_DV_REP_RSN, ' ') = '60'
      print '_'                       (#line,{col1},{mcol_right_margin})FILL
      print 'Namensänderung'    (+2,{mcol1})
      print 'Bisheriger Name:'  (+1,{mcol1})
      do Get-Old-Name($EMPLID, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, $Name)
      print $Name               (0,{mcol4})

      let #LastLine = #LastLine + 3
   end-if

   !Staatsangehoerigkeit
   if rtrim($GPDE_DV_REP_RSN, ' ') = '63'
      print '_'                       (#LastLine,{col1},{mcol_right_margin})FILL
      print 'Änderung der Staatsangehörigkeit             Neue'  (+2,{mcol1})
      print &_DSME_NATION_CD (0,{mcol_cit_country_2})
      print ' = '                 (0,0)
      do Get-Nation-Duevo(&_DSME_NATION_CD, $Nation_Descr, $Nationality, $nationality_cd)
      print $Nationality         (0,0)
      print '                                             Staatsangehörigkeit'  (+1,{mcol1})
      let #LastLine = #LastLine + 4
   end-if


   !Gleitzone
   !wdu-qk04 inserted
   !-- let $Gleitzone = rtrim($DBME_GPDE_DV_CTRL_RPT, ' ')
   ! $_Gleitzone (global)
   if $_Gleitzone = '1' or  $_Gleitzone = '2'
      let #LastLine = #LastLine + 1             !add empty line before dash
      print '_'                       (#LastLine,{col1},{mcol_right_margin})FILL
      let #LastLine = #LastLine + 2             !dash+empty line
      print 'Kennzeichen Gleitzone'                       (#LastLine,{col1})
      let #LastLine = #LastLine + 1             !Heading
      if $_Gleitzone = '1'
          print '1 = Arbeitsentgelt durchgehend innerhalb der Gleitzone'  (#LastLine,{mcol1})
      else
          print '2 = Arbeitsentgelt sowohl innerhalb als auch außerhalb der Gleitzone'   (+1,{mcol1})
      end-if
!      let #line = #lastline
   end-if


    ! Statuskennzeichen

    let #LastLine = #LastLine + 1             !add empty line before dash


    let #LastLine = #LastLine + 1              !Heading


     ! mak07 89B10- deuev-ice 1549960000 DV01  start

    if $_DSME_GPDE_SI_BAEGV1 = '1'
    print '_'                       (#LastLine,{col1},{mcol_right_margin})FILL
    let #LastLine = #LastLine + 2             !dash+empty line

       print 'Statuskennzeichen'                    (#LastLine,{col1})
       let #LastLine = #LastLine + 1
       print '1 - Mitarbeitendes Familienmitglied'  (#LastLine,{mcol1}
    end-if

    if $_DSME_GPDE_SI_BAEGV1  = '2'
        print '_'                       (#LastLine,{col1},{mcol_right_margin})FILL
    let #LastLine = #LastLine + 2             !dash+empty line
       print 'Statuskennzeichen'                    (#LastLine,{col1})
       let #LastLine = #LastLine + 1
       print '2 - Geschäftsführender Gesellschafter' (#LastLine,{mcol1}
    end-if

   ! mak07 89B10- deuev-ice 1549960000 DV01 ended


end-procedure Print-Data-B

!***
begin-procedure Print-Data-DBGB($EMPLID, #EMPL_RCD_NBR, $rvnr, $DBGB_birthdate, $DBGB_sex,
                $name_royal_prefix, $GPDE_DV_BIRTHNAME, $name_royal_suffix, $birthplace)

   if &_DSME_DV_DBGB_DEU = 'Y'
      print 'Wenn keine Versicherungs-Nr. angegeben werden kann:'    (57,{mcol1})
      print 'Geburtsname:'                                           (+1,{mcol1})

      let $pname  = ''
      if rtrim($name_royal_prefix,' ') <> ''
         let $pname  = rtrim($name_royal_prefix,' ') || ' '
      end-if

      if rtrim($GPDE_DV_BIRTHNAME, ' ') <> ''
         let $pname  = $pname || rtrim($GPDE_DV_BIRTHNAME, ' ') || ' '
      end-if

if rtrim($name_royal_suffix, ' ') <> ''
         let $pname  = $pname || rtrim($name_royal_suffix, ' ')
      end-if

      print $pname                                                   (0,{mcol5})
      print 'Geburtsort:'                                            (+1,{mcol1})
      print $birthplace                                              (0, {mcol5})

      print 'Geschlecht (m/w):'        (+1,{mcol1})
      if $DBGB_sex = 'M'
         print 'm'                     (0,{mcol5})
      else
         if $DBGB_sex = 'F'
            print 'w'                  (0,{mcol5})
         else
            print 'unbekannt'          (0,{mcol5})
         end-if
      end-if

   end-if
end-procedure Print-Data-DBGB

!***
begin-procedure Print-Data-DBEU($EMPLID, #EMPL_RCD_NBR, $birth_country, $rvnr)
 print 'Nur bei erstmaliger Aufnahme einer Beschäftigung von nichtdeutschen Bürgern ' (64,{mcol1})
 print 'des Europäischen Wirtschaftsraumes:' (,)
 print 'Geburtsland (Schlüssel der Staatsangehörigkeit)    Europäische Versicherungsnummer' (+1,{mcol1})

 do Get-Nation-Duevo($birth_country, $Nation_Descr, $Nationality, $nationality_cd)
 let $pctry = rtrim($birth_country,' ') || ' = '  || rtrim($Nation_Descr, ' ')
 print $pctry         (+1,{mcol1})
 print $rvnr          (0,{mcol_rvnr_dbeu})
end-procedure Print-Data-DBEU

!***
begin-procedure Get-Beitragsgruppen($SV_Code, :$KV_Code, :$RV_Code, :$AV_Code, :$PV_Code, :#ReturnCd)
   let #ReturnCd = 1

   if rtrim($SV_Code, ' ') = ''
      let #ReturnCd = 0
   else
      let $KV_Code = substr($SV_Code,1,1)
      let $RV_Code = substr($SV_Code,2,1)
      let $AV_Code = substr($SV_Code,3,1)
      let $PV_Code = substr($SV_Code,4,1)
   end-if

end-procedure Get-Beitragsgruppen

!***
begin-procedure Get-Nation-Duevo($Nation_Cd, :$Nation_Descr, :$Nationality, :$Nationality_Cd)
let $Nation_Descr   = ''
let $Nationality    = ''
let $Nationality_Cd = ''

BEGIN-SELECT
DESCR                  &ND_DESCR
NATIONALITY            &NATIONALITY
NATIONALITY_CD         &NATIONALITY_CD

   let $Nation_Descr    = &ND_DESCR
   let $Nationality     = &NATIONALITY
   let $Nationality_Cd  = &NATIONALITY_CD

FROM PS_NATIONS_DUEVO

WHERE NATION_CD = $Nation_Cd

END-SELECT

begin-select
DUEVLNG.NATIONALITY
DUEVLNG.DESCR
   let $Nation_Descr    = &DUEVLNG.DESCR
   let $Nationality     = &DUEVLNG.NATIONALITY
from PS_NATIONS_DU_LNG DUEVLNG
where DUEVLNG.NATION_CD = $Nation_Cd
and DUEVLNG.LANGUAGE_CD = 'GER'
end-select

if rtrim($Nation_Descr, ' ') = ''
   let $Nation_Descr = 'ohne Angaben'
end-if

if rtrim($Nationality, ' ') = ''
   let $Nationality = $Nation_Descr
end-if

end-procedure Get-Nation-Duevo
!***



begin-procedure Get-Nation-Duevo-By-Country_DV1($country, :$Nation_Descr, :$Nationality, :$Nationality_Cd)
let $Nation_Descr   = ''
let $Nationality    = ''
let $Nationality_Cd = ''
! wdu06-890b4 nations_duevo fix for R9
let $Nation_Cd = ''

BEGIN-SELECT
DESCR                  &C_ND_DESCR
NATIONALITY            &C_NATIONALITY
NATIONALITY_CD         &C_NATIONALITY_CD
NATION_CD              &C_NATION_CD

   let $Nation_Descr    = &C_ND_DESCR
   let $Nationality     = &C_NATIONALITY
   let $Nationality_Cd  = &C_NATIONALITY_CD
   let $Nation_Cd       = &C_NATION_CD

FROM PS_NATIONS_DUEVO

WHERE COUNTRY = $country

END-SELECT


begin-select
DUEVLNG1.NATIONALITY
DUEVLNG1.DESCR
   let $Nation_Descr    = &DUEVLNG1.DESCR
   let $Nationality     = &DUEVLNG1.NATIONALITY
from PS_NATIONS_DU_LNG DUEVLNG1
! wdu06-890b4 nations_duevo fix for R9 -- select by nation_cd now
where DUEVLNG1.NATION_CD = $Nation_Cd
and DUEVLNG1.LANGUAGE_CD = 'GER'
end-select

if rtrim($Nation_Descr, ' ') = ''
   let $Nation_Descr = 'ohne Angaben'
end-if

if rtrim($Nationality, ' ') = ''
   let $Nationality = $Nation_Descr
end-if

end-procedure Get-Nation-Duevo-By-Country_DV1





!***
begin-procedure Get-Old-Name($emplid, #EMPL_RCD_NBR, $GPDE_DV_EVT_EFFDT, :$Prev_Name)
let $Prev_Name = ''

BEGIN-SELECT
NAME_TITLE         &NAME_NAME_TITLE
GPDE_DV_FIRST_NAME  &NAME_GPDE_DV_FIRST_NAME
NAME_ROYAL_PREFIX  &NAME_NAME_ROYAL_PREFIX
GPDE_DV_LAST_NAME   &NAME_GPDE_DV_LAST_NAME
NAME_ROYAL_SUFFIX  &NAME_NAME_ROYAL_SUFFIX


   if rtrim(&NAME_NAME_TITLE, ' ') <> ''
      let $Prev_Name = rtrim(&NAME_NAME_TITLE,' ') || ' '
   end-if

   if rtrim(&NAME_GPDE_DV_FIRST_NAME, ' ') <> ''
      let $Prev_Name = $Prev_Name || rtrim(&NAME_GPDE_DV_FIRST_NAME, ' ') || ' '
   end-if

   if rtrim(&NAME_NAME_ROYAL_PREFIX, ' ') <> ''
      let $Prev_Name = $Prev_Name || rtrim(&NAME_NAME_ROYAL_PREFIX, ' ') || ' '
   end-if

   if rtrim(&NAME_GPDE_DV_LAST_NAME, ' ') <> ''
      let $Prev_Name = $Prev_Name || rtrim(&NAME_GPDE_DV_LAST_NAME, ' ') || ' '
   end-if

   if rtrim(&NAME_NAME_ROYAL_SUFFIX, ' ') <> ''
      let $Prev_Name = $Prev_Name || rtrim(&NAME_NAME_ROYAL_SUFFIX, ' ')
   end-if

FROM PS_GPDE_DV_DBNA a

WHERE EMPLID          = $emplid
AND EMPL_RCD       = #EMPL_RCD_NBR
AND   GPDE_DV_CANCEL   = 'N'
AND   GPDE_DV_EVT_EFFDT = (
                         SELECT max(GPDE_DV_EVT_EFFDT)
                         FROM PS_GPDE_DV_DBNA b
                         WHERE a.EMPLID = b.EMPLID
                         AND a.EMPL_RCD = b.EMPL_RCD
                         AND b.GPDE_DV_CANCEL = 'N'
                         AND b.GPDE_DV_EVT_EFFDT < $GPDE_DV_EVT_EFFDT
                        )

END-SELECT

end-procedure Get-Old-Name

!***
begin-procedure Print-BGR-Text($SI_Type, $Code, #Line, #Col)
let #Line_1 = #Line + 1
evaluate $SI_Type

   when = '01' !KV
      evaluate $Code
         when = '0'
            print 'kein Beitrag'      (#Line,#Col)
         break
         when = '1'
            print 'allgemeiner'       (#Line,#Col)
            print 'Beitrag'           (#Line_1,#Col)
         break

         when = '2'
            print 'erhöhter'          (#Line,#Col)
            print 'Beitrag'           (#Line_1,#Col)
         break

         when = '3'
            print 'ermäßigter'        (#Line,#Col)
            print 'Beitrag'           (#Line_1,#Col)
         break
         when = '4'
            print 'Beitrag zur'       (#Line,#Col)
            print 'landw. KV'         (#Line_1,#Col)
         break

         when = '5'
            print 'AG-Beitr. zur'     (#Line,#Col)
            print 'landw. KV'         (#Line_1,#Col)
         break

         when = '6'
            print 'Beitrag gerfg.'     (#Line,#Col)
            print 'Beschäftigte'         (#Line_1,#Col)
         break

         when = '9'
            print 'Firmenzahler'      (#Line,#Col)
         break
      end-evaluate
      break

   when = '02' !PV
      evaluate $Code
         when = '0'
            print 'kein Beitrag'      (#Line,#Col)
         break
         when = '1'
            print 'voller Beitrag'    (#Line,#Col)
         break

         when = '2'
            print 'halber Beitrag'    (#Line,#Col)
         break
      end-evaluate
      break
! adj07-89B11-1680582000 : 06th Sep 07 Issues with report layout.
! removed "Ang." and "Arb."
   when = '03' !RV
      evaluate $Code
         when = '0'
            print 'kein Beitrag'      (#Line,#Col)
         break
         when = '1'
            print 'voller Beitrag'    (#Line,#Col)
            print 'zur RV'           (#Line_1,#Col)
         break

         when = '2'
            print 'voller Beitrag'    (#Line,#Col)
            print 'zur RV'           (#Line_1,#Col)
         break

         when = '3'
            print 'halber Beitrag'    (#Line,#Col)
            print 'zur RV'           (#Line_1,#Col)
         break
         when = '4'
            print 'halber Beitrag'    (#Line,#Col)
            print 'zur RV'           (#Line_1,#Col)
         break

         when = '5'
            print 'Beitrag gerfg.'     (#Line,#Col)
            print 'Besch. RV'         (#Line_1,#Col)
         break

         when = '6'
            print 'Beitrag gerfg.'     (#Line,#Col)
            print 'Besch. RV'         (#Line_1,#Col)
         break

         end-evaluate
      break

   when = '04' !AV
      evaluate $Code
         when = '0'
            print 'kein Beitrag'      (#Line,#Col)
         break
         when = '1'
            print 'voller Beitrag'    (#Line,#Col)
         break
         when = '2'
            print 'halber Beitrag'    (#Line,#Col)
         break
      end-evaluate
      break

   when-other
      break

end-evaluate !SI_Type
end-procedure Print-BGR-Text




!**********************************************
! sgo09-9B10-1893621000 : update GPDE_DV_DSME.GPDE_DV_REP_DATE for the provider id procesed only:
! Add parameter $Upd_GPDE_SI_PROV
begin-procedure Update_DSME_REP_DT($Upd_Emplid, #Upd_Empl_Rcd_Nbr, $Upd_GPDE_DV_EVT_EFFDT,
                $Upd_GPDE_DV_REP_RSN, #Upd_GPDE_DV_RUN, $Upd_GPDE_DV_CANCEL, $Upd_GPDE_SI_PROV)

let $sql-statement = 'GPDEDV01.SQR,Update-Transfer-Flag,Update'
begin-SQL On-Error=SQL-Error

UPDATE PS_GPDE_DV_DSME

SET GPDE_DV_REP_DATE      = $_AsOfToday

WHERE EMPLID            = $Upd_Emplid
AND   EMPL_RCD          = #Upd_Empl_Rcd_Nbr
AND   GPDE_DV_EVT_EFFDT = $Upd_GPDE_DV_EVT_EFFDT
AND   GPDE_DV_REP_RSN   = $Upd_GPDE_DV_REP_RSN
AND   GPDE_DV_RUN       = #Upd_GPDE_DV_RUN
AND   GPDE_DV_CANCEL    = $Upd_GPDE_DV_CANCEL
! sgo09-89B17-1893621000 : update GPDE_DV_DSME.GPDE_DV_REP_DATE for the provider id procesed only: Add GPDE_SI_PROV in the where clause
AND   GPDE_SI_PROV      = $Upd_GPDE_SI_PROV

end-SQL

end-procedure Update_DSME_REP_DT

begin-procedure Update_DSER_REP_DT($Upd_Emplid, #Upd_Empl_Rcd_Nbr, $Upd_GPDE_DV_EVT_EFFDT,
                $Upd_GPDE_AAG_REP_RSN, #Upd_GPDE_DV_RUN, $Upd_GPDE_DV_CANCEL, $Upd_GPDE_SI_PROV)

let $sql-statement = 'GPDEDV01.SQR,Update-Transfer-Flag,Update'
begin-SQL On-Error=SQL-Error

UPDATE PS_GPDE_AAG_DSER

SET GPDE_DV_REP_DATE      = $_AsOfToday

WHERE EMPLID            = $Upd_Emplid
AND   EMPL_RCD          = #Upd_Empl_Rcd_Nbr
AND   GPDE_DV_EVT_EFFDT = $Upd_GPDE_DV_EVT_EFFDT
!AND   GPDE_AAG_REP_RSN   = $Upd_GPDE_DV_REP_RSN
AND   GPDE_DV_RUN       = #Upd_GPDE_DV_RUN
AND   GPDE_DV_CANCEL    = $Upd_GPDE_DV_CANCEL
AND   GPDE_SI_PROV      = $Upd_GPDE_SI_PROV


end-SQL
 show 'rep_date parameters' $Upd_Emplid ' ' #Upd_Empl_Rcd_Nbr ' ' $Upd_GPDE_DV_EVT_EFFDT ' ' $Upd_GPDE_DV_REP_RSN ' ' #Upd_GPDE_DV_RUN ' '  $Upd_GPDE_DV_CANCEL ' ' $Upd_GPDE_SI_PROV
end-procedure Update_DSME_REP_DT
!**********************************************
begin-procedure Get-CompanyData($Dit_Emplid, #Dit_Empl_Rcd_Nbr, $Dit_Begin_Dt, $dsme_GPDE_DV_REP_RSN,
                $dsme_dv_rep_type_deu, :$CompName, :$CompStreet, :$CompZip, :$CompCity)

let $CompName   = ''
let $CompStreet = ''
let $CompZip    = ''
let $CompCity   = ''


evaluate $dsme_dv_rep_type_deu
when = 'ABM'
when = 'JAH'
when = 'UNT'
   let $condition = '<'
   break
when-other
   let $condition = '<='
   break
end-evaluate

begin-SELECT

CT.DESCR
CT.ADDRESS1
CT.POSTAL
CT.CITY

   let $CompName   = rtrim(&CT.DESCR, ' ')
   let $CompStreet = rtrim(&CT.ADDRESS1, ' ')
   let $CompZip    = rtrim(&CT.POSTAL, ' ')
   let $CompCity   = rtrim(&CT.CITY, ' ')

FROM PS_COMPANY_TBL CT, PS_JOB JOB
WHERE CT.COMPANY    = JOB.COMPANY
AND   JOB.EMPLID    = $Dit_Emplid
AND   JOB.EMPL_RCD = #Dit_Empl_Rcd_Nbr
AND   JOB.EFFDT = (
                   SELECT MAX(EFFDT) FROM PS_JOB JJ
                   WHERE JJ.EMPLID = JOB.EMPLID
                   AND   JJ.EMPL_RCD = JOB.EMPL_RCD
                   AND   JJ.EFFDT [$condition] $Dit_Begin_Dt
                  )
AND   JOB.EFFSEQ = (
                    SELECT MAX(EFFSEQ) FROM PS_JOB JOB2
                    WHERE JOB2.EMPLID = JOB.EMPLID
                    AND   JOB2.EMPL_RCD = JOB.EMPL_RCD
                    AND   JOB2.EFFDT = JOB.EFFDT
                    )
AND   CT.EFFDT = (
                   SELECT MAX(C2.EFFDT)
                   FROM PS_COMPANY_TBL C2
                   WHERE C2.COMPANY = CT.COMPANY
                  )
end-SELECT
end-procedure Get-CompanyData

!********************************
begin-procedure Format-Name($name_prefix, $pd_name, $name_title, $name_roy_prefix, $name_roy_suffix,
                            :$Full_Name, :$FirstName, :$LastName)
  let $Full_Name = ''
  let $FirstName = ''
  let $LastName  = ''

  !**build DÜVO-formatted name string in $Full_Name

  let $Anrede  = rtrim($name_prefix,' ')
  let $Name    = rtrim($pd_name,' ')
  let $Titel   = rtrim($name_title, ' ')
  let $Vorsatz = rtrim($name_roy_prefix, ' ')
  let $Zusatz  = rtrim($name_roy_suffix, ' ')

  !find last name
  find ',' in $Name 0 #locn
  extract $LastName from $Name 0 #locn

  !find first name
  add 2 to #locn
  let $Name = substr($Name,#locn,50 - #locn)
  find ',' in $Name 0 #locn
  if #locn <> -1
    extract $FirstName from $Name 0 #locn
    add 1 to #locn
    extract $PrefixName from $Name #locn 50
  else
    let $FirstName = $Name
    let $PrefixName = ''
  end-if

  let $Full_Name = rtrim ($FirstName, ' ')

  if rtrim ($Zusatz, ' ') <> ''
    concat ' ' with $Full_Name
    concat $Zusatz with $Full_Name
  end-if

  if rtrim ($Vorsatz, ' ') <> ''
    concat ' ' with $Full_Name
    concat $Vorsatz with $Full_Name
  end-if

  concat ' ' with $Full_Name
  concat $LastName with $Full_Name

  if rtrim($Titel, ' ') <> ''
     let $Titel_und_Name = $Titel
     concat ' ' with $Titel_und_Name
     concat $Full_Name with $Titel_und_Name
     let $Full_Name = $Titel_und_Name
  end-if
end-procedure Format-Name

!**********************************************************



begin-procedure Chg-Char($in, :$out)
! wdu06-881b11 added more special char conversions
move '' to $out
move 1 to #pos

while #pos <= length($in)
 let $x = substr($in,#pos,1)
 evaluate $x
  when = 'Ä'
    let $x = '['
    break
  when = 'ä'
    let $x = '{'
    break
  when = 'Ö'
    let $x = '\'
    break
  when = 'ö'
    let $x = '|'
    break
  when = 'Ü'
    let $x = ']'
    break
  when = 'ü'
    let $x = '}'
    break
  when = 'ß'
    let $x = '~'
    break
  when = 'è'
    let $x = 'e'
    break
  when = 'é'
    let $x = 'e'
    break
  when = 'ê'
    let $x = 'e'
    break
  when = 'ë'
    let $x = 'e'
    break
  when = 'É'
    let $x = 'E'
    break
  when = 'à'
    let $x = 'a'
    break
  when = 'â'
    let $x = 'a'
    break
  when = 'å'
    let $x = 'a'
    break
  when = 'Å'
    let $x = 'A'
    break
  when = 'ï'
    let $x ='i'
    break
  when = 'î'
    let $x = 'i'
    break
  when = 'ì'
    let $x = 'i'
    break
  when = 'í'
    let $x = 'i'
    break
  when = 'ô'
    let $x = 'o'
    break
  when = 'ò'
    let $x = 'o'
    break
  when = 'ó'
    let $x = 'o'
    break
  when = 'õ'
    let $x = 'o'
    break
  when = 'û'
    let $x = 'u'
    break
  when = 'ú'
    let $x = 'u'
    break
  when = 'ù'
    let $x = 'u'
    break
  when = 'ñ'
    let $x = 'n'
    break
  when = 'Ñ'
    let $x = 'N'
    break
  when = 'Ç'
    let $x = 'C'
    break
  when-other
    let $x = substr($in,#pos,1)
    break
 end-evaluate
 let $out = $out || $x
 add 1 to #pos
end-while

end-procedure ! Switch-Character-Set



! this procedures fills the data (primarily) for the address printing
! based on current Emplid and Date
!
! wdu06-890b7 changed address lookup from parameter-based to plain globals
! implicit param-In: &DSME_EMPLID, $AsOfToday
!
begin-procedure Get-Pers-Data-Effdt
let $pdx_name_title        = ''
let $pdx_name_royal_prefix = ''
let $pdx_name_royal_suffix = ''
let $pdx_mar_status        = ''
let $pdx_country           = ''
let $pdx_address1          = ''
let $pdx_address2          = ''
let $pdx_address3          = ''
let $pdx_address4          = ''
let $pdx_postal            = ''
let $pdx_city              = ''
let $pdx_state             = ''
let $pdx_name_prefix       = ''
let $pdx_NUM1              = ''
let $pdx_NUM2              = ''
let $pdx_HOUSE_TYPE        = ''
let $pdx_ADDR_FIELD1       = ''
let $pdx_ADDR_FIELD2       = ''
let $pdx_ADDR_FIELD3       = ''

let #noAddress = 0

begin-select
PDEN.NAME_TITLE
PDEN.NAME_ROYAL_PREFIX
PDEN.NAME_ROYAL_SUFFIX
!
PDE.MAR_STATUS
PDE.SEX
!
PDED.COUNTRY
PDED.ADDRESS1
PDED.ADDRESS2
PDED.ADDRESS3
PDED.ADDRESS4
PDED.POSTAL
PDED.CITY
PDED.STATE
!
PDED.NUM1
PDED.NUM2
PDED.HOUSE_TYPE
PDED.ADDR_FIELD1
PDED.ADDR_FIELD2
PDED.ADDR_FIELD3
!
! wdu05-881b9 added NAME_PREFIX as replacement for SEX
PDEN.NAME_PREFIX
   let $pdx_name_title        = &PDEN.NAME_TITLE
   let $pdx_name_royal_prefix = &PDEN.NAME_ROYAL_PREFIX
   let $pdx_name_royal_suffix = &PDEN.NAME_ROYAL_SUFFIX
   let $pdx_mar_status        = &PDE.MAR_STATUS
   let $pdx_country           = &PDED.COUNTRY
   let $pdx_address1          = &PDED.ADDRESS1
   let $pdx_address2          = &PDED.ADDRESS2
   let $pdx_address3          = &PDED.ADDRESS3
   let $pdx_address4          = &PDED.ADDRESS4
   let $pdx_postal            = &PDED.POSTAL
   let $pdx_city              = &PDED.CITY
   let $pdx_state             = &PDED.STATE

   let $pdx_NUM1             = &PDED.NUM1
   let $pdx_NUM2             = &PDED.NUM2
   let $pdx_HOUSE_TYPE             = &PDED.HOUSE_TYPE
   let $pdx_ADDR_FIELD1             = &PDED.ADDR_FIELD1
   let $pdx_ADDR_FIELD2             = &PDED.ADDR_FIELD2
   let $pdx_ADDR_FIELD3             = &PDED.ADDR_FIELD3

   let $pdx_name_prefix               = &PDEN.NAME_PREFIX
   let #noAddress = 1

! RH07 89b09 adding missing clause to sub-selects (i.E. PDED1.ADDRESS_TYPE - $Addr_Ttype)
FROM PS_PERS_DATA_EFFDT PDE,PS_NAMES PDEN,PS_ADDRESSES PDED
WHERE PDE.EMPLID = $emplid
AND   PDE.EMPLID = PDEN.EMPLID
AND   PDE.EMPLID = PDED.EMPLID
AND (PDEN.NAME_TYPE = $Name_Type)
AND (PDEN.EFFDT =(select max(PDEN1.EFFDT) from PS_NAMES PDEN1 where
                     PDEN1.EMPLID = PDEN.EMPLID and
       PDEN1.NAME_TYPE = $Name_Type and
                     PDEN1.EFFDT <= $AsOfToday))
AND (PDED.ADDRESS_TYPE = $Addr_Type)
AND (PDED.EFFDT =(select max(PDED1.EFFDT) from PS_ADDRESSES PDED1 where
                     PDED1.EMPLID = PDED.EMPLID and
       PDED1.ADDRESS_TYPE = $Addr_Type and
                     PDED1.EFFDT <= $AsOfToday))
AND   PDE.EFFDT  = (
                      SELECT MAX(EFFDT) FROM PS_PERS_DATA_EFFDT PDE2
                      WHERE PDE2.EMPLID  = $emplid
                      AND   PDE2.EFFDT  <= $AsOfToday
                     )
end-select
! RH07 89b09 if no address was found print message (could be no valid name as well, no?)
 if #noAddress = 0
    LET $MESSAG_TEXT  = 'Keine gueltige Adresse fuer: ' || $emplid
    show $MESSAG_TEXT
 end-if

end-procedure Get-Pers-Data-Effdt
!**********************************************************************************************






begin-procedure Update_Deuev_Run_Status
if $GPDE_RC_DUEVO_CLS = 'N'
  goto ende
end-if

BEGIN-SQL
UPDATE PS_GPDE_DV_RID_ST
SET GPDE_RC_DUEVO_CLS  = 'Y'
WHERE CAL_RUN_ID = $Run_Id
END-SQL

ende:
end-procedure






!********************************************************************************
! wdu: 18.6.2002
! we need pay-entity for the license-number, available only for VDAK
!
! wdu06-881b11 removal of DEUEV license number (ICE 1496731000)
! ---------------------
! -- begin-procedure Get_Pay_Entity_License
! -- let $Pay_Entity = ' '
! -- let $License_Nbr = ' '
! --
! -- begin-select
! -- PEL1.PAY_ENTITY
! -- LI1.GPDE_DV_LIC_NBR
! --   let $Pay_Entity = rtrim(&PEL1.PAY_ENTITY, ' ')
! --   let $License_Nbr = rtrim(&LI1.GPDE_DV_LIC_NBR, ' ')
! -- from PS_GPDE_AL_PE_LOC PEL1, PS_GPDE_DV_PE_LIC LI1
! -- WHERE PEL1.GPDE_SI_BTNR=$Absender_Nbr
! -- AND PEL1.EFFDT= ( SELECT MAX(PEL2.EFFDT)
! -- from PS_GPDE_AL_PE_LOC PEL2
! -- WHERE PEL2.PAY_ENTITY=PEL1.PAY_ENTITY
! -- AND PEL2.SETID=PEL1.SETID
! -- AND PEL2.LOCATION=PEL1.LOCATION
! -- )
! -- AND LI1.PAY_ENTITY=PEL1.PAY_ENTITY
! -- AND LI1.GPDE_SI_PROV=$Prov_Type
! -- end-select
! -- end-procedure
! ---------------------




!*************************************************************
begin-procedure Get-Phone ($IN_EMPLID,$IN_PHO_TYPE,:$Phone)

 move '' to $Phone

Begin-Select
PN.PHONE
FROM PS_PERSONAL_PHONE PN , PS_PERSON PN1
WHERE PN.EMPLID     = $IN_EMPLID
AND   PN.PHONE_TYPE = $IN_PHO_TYPE
AND   PN.EMPLID     = PN1.EMPLID
end-SELECT

  let $Phone = rtrim(&PN.PHONE,' ')

end-procedure



begin-procedure NonFinalizedCount
!
! wdu06-881b11 display a hint on the number of non finalized rows
!
! wdu06-900b0 platform fix: COUNT(DSCx.EMPLID) into COUNT(*)
display ' '
display '================================================================================='
let $TempStr = 'Hinweis: Anzahl der nicht finalisierten Datensätze nach Kalendergruppe: '
display $TempStr
display '================================================================================='
let $TempStr = ''
begin-select
DSC1.CAL_RUN_ID
DSC1.GPDE_SI_BTNR
PR1.GPDE_DV_RCVER_ID
COUNT(*) &DSC1.NUMBER
    do Format-Number (&DSC1.NUMBER, $DSC1.NUMBER, 'B9999999')
    let $TempStr =  &DSC1.CAL_RUN_ID || ' ' || &DSC1.GPDE_SI_BTNR || '  ' || &PR1.GPDE_DV_RCVER_ID
    let $TempStr = $TempStr || '  ' || $DSC1.NUMBER
    display $TempStr
FROM PS_GPDE_DV_DSME DSC1,PS_GPDE_SI_PROV PR1
WHERE DSC1.GPDE_SI_BTNR = $Absender_Nbr
AND DSC1.GPDE_DV_REP_DATE IS NULL
AND DSC1.GPDE_DV_REP_STATUS<>'F'
AND DSC1.GPDE_SI_PROV=PR1.GPDE_SI_PROV
AND PR1.GPDE_DV_RCVER_YN='N'
AND PR1.EFFDT=(SELECT MAX(PR2.EFFDT) FROM PS_GPDE_SI_PROV PR2 WHERE PR2.GPDE_SI_PROV=PR1.GPDE_SI_PROV)
GROUP BY DSC1.CAL_RUN_ID,DSC1.GPDE_SI_BTNR,PR1.GPDE_DV_RCVER_ID
ORDER BY DSC1.CAL_RUN_ID,DSC1.GPDE_SI_BTNR,PR1.GPDE_DV_RCVER_ID
end-select

! receivers (BUK)
begin-select
DSC2.CAL_RUN_ID
DSC2.GPDE_SI_BTNR
DSC2.GPDE_SI_PROV_ID
COUNT(*) &DSC2.NUMBER
    do Format-Number (&DSC2.NUMBER, $DSC2.NUMBER, 'B9999999')
    let $TempStr =  &DSC2.CAL_RUN_ID || ' ' || &DSC2.GPDE_SI_BTNR || '  ' || &DSC2.GPDE_SI_PROV_ID
    let $TempStr = $TempStr || '  ' || $DSC2.NUMBER
    display $TempStr
FROM PS_GPDE_DV_DSME DSC2,PS_GPDE_SI_PROV PR1A
WHERE DSC2.GPDE_SI_BTNR = $Absender_Nbr
AND DSC2.GPDE_DV_REP_DATE IS NULL
AND DSC2.GPDE_DV_REP_STATUS<>'F'
AND DSC2.GPDE_SI_PROV=PR1A.GPDE_SI_PROV
AND PR1A.GPDE_DV_RCVER_YN='Y'
AND PR1A.EFFDT=(SELECT MAX(PR2A.EFFDT) FROM PS_GPDE_SI_PROV PR2A WHERE PR2A.GPDE_SI_PROV=PR1A.GPDE_SI_PROV)
GROUP BY DSC2.CAL_RUN_ID,DSC2.GPDE_SI_BTNR,DSC2.GPDE_SI_PROV_ID
ORDER BY DSC2.CAL_RUN_ID,DSC2.GPDE_SI_BTNR,DSC2.GPDE_SI_PROV_ID
end-select

if $TempStr = ''
    let $TempStr =  'keine offenen Datensätze für ' || $Run_Id
    display $TempStr
end-if

display '================================================================================='

end-procedure



! *************************************************************
! *************** Component Extraction (CX) *******************

! code extracted for more clarity from other procedures
!
!
!
! *************************************************************
begin-procedure CX_CreateArrays
create-array
   name=pers-data-effdt
   size=1
   field=emplid:char
   field=effdt:char
   field=update_pers_data:char
   field=country:char
   field=address1:char
   field=address2:char
   field=address3:char
   field=address4:char
   field=city:char
   field=num1:char
   field=num2:char
   field=house_type:char
   field=county:char
   field=state:char
   field=postal:char
   field=geo_code:char
   field=in_city_limit:char
   field=address1_ac:char
   field=address2_ac:char
   field=address3_ac:char
   field=city_ac:char
   field=country_other:char
   field=address1_other:char
   field=address2_other:char
   field=address3_other:char
   field=address4_other:char
   field=city_other:char
   field=county_other:char
   field=state_other:char
   field=postal_other:char
   field=num1_other:char
   field=num2_other:char
   field=house_type_other:char
   field=in_city_lmt_other:char
   field=geo_code_other:char
   field=mar_status:char
   field=smoker:char
   field=reg_region:char
   field=name:char
   field=name_initials:char
   field=name_prefix:char
   field=name_suffix:char
   field=name_royal_prefix:char
   field=name_royal_suffix:char
   field=name_title:char
   field=last_name_srch:char
   field=first_name_srch:char
   field=last_name:char
   field=first_name:char
   field=middle_name:char
   field=preferred_name:char
   field=name_ac:char
end-procedure



begin-procedure CX_MakePlatformSqlForDsmeCreated
! to retrieve timestamps it is required to have platform specific SQL strings
!
!********************************************************************
!if another DB-Type than ORACLE, MS-SQLSERVER or INFORMIX is used
!the following statement has to be enhanced for the new platform
!
#ifdef MICROSOFT
let $DSME_dttm_created = 'CONVERT(char(8),DTTM_CREATED, 112) + ' ||
                         'SUBSTRING(CONVERT(char,DTTM_CREATED, 114), 1, 2) + ' ||
                         'SUBSTRING(CONVERT(char,DTTM_CREATED, 114), 4, 2) + ' ||
                         'SUBSTRING(CONVERT(char,DTTM_CREATED, 114), 7, 2) + ' ||
                         'SUBSTRING(CONVERT(char,DTTM_CREATED, 114), 10, 3)'
#end-if

#ifdef ORACLE
let $DSME_dttm_created = 'TO_CHAR(DTTM_CREATED,' || '''YYYYMMDDHH24MISS''' || ')'
let $DSER_dttm_created = 'TO_CHAR(DTTM_CREATED,' || '''YYYYMMDDHH24MISS''' || ')'
#end-if

#ifdef INFORMIX
let $DSME_dttm_created = 'TO_CHAR(DTTM_CREATED,' || '''YYYYMMDDHH24MMSSSSS''' || ')'
#end-if


! DB2ALL added 9 Oct 2003 for ICE 647652000
#ifdef DB2ALL
let $DSME_dttm_created = 'CONCAT(CONCAT(SUBSTR(CHAR(DTTM_CREATED), 1, 4)  ' ||
                         ',CONCAT(SUBSTR(CHAR(DTTM_CREATED), 6, 2)' ||
                         ',SUBSTR(CHAR(DTTM_CREATED), 9, 2)))' ||
                         ',CONCAT(CONCAT(SUBSTR(CHAR(DTTM_CREATED), 12, 2)' ||
                         ',SUBSTR(CHAR(DTTM_CREATED), 15, 2))' ||
                         ',CONCAT(SUBSTR(CHAR(DTTM_CREATED), 18, 2)' ||
                         ',SUBSTR(CHAR(DTTM_CREATED), 21, 6))))'
#end-if
end-procedure







begin-procedure DinPrintAdapterPersonal
    ! print the employee address according to DIN rules
    !
    ! all values must be assigned or blanked!

    !
    ! this sections depends on data from procedure Get-Personal-Data(!)
    !
    ! wdu06-890b7 address decision logic is now in the print-adapters
        let $DinInputAnrede         = $pdx_name_prefix
        let $DinInputFullName       = $Employee_Full_Name
        let $DinInputADDRESS1       = rtrim($pdx_address1,' ')
        let $DinInputADDRESS2       = rtrim($pdx_address2,' ')
        let $DinInputADDRESS3       = rtrim($pdx_address3,' ')
        let $DinInputADDRESS4       = rtrim($pdx_address4,' ')

        let $DinInputPOSTAL         = rtrim($pdx_postal,' ')
        let $DinInputCITY           = rtrim($pdx_city,' ')
        let $DinInputCOUNTRY        = rtrim($pdx_country,' ')

        ! wdu06-890b7 fields not printed directly, but added to address lines
        let $DinInputNUM1          = rtrim($pdx_NUM1,' ')
        let $DinInputNUM2          = rtrim($pdx_NUM2,' ')
        let $DinInputHOUSE_TYPE    = rtrim($pdx_HOUSE_TYPE,' ')
        let $DinInputADDR_FIELD1   = rtrim($pdx_ADDR_FIELD1,' ')
        let $DinInputADDR_FIELD2   = rtrim($pdx_ADDR_FIELD2,' ')
        let $DinInputADDR_FIELD3   = rtrim($pdx_ADDR_FIELD3,' ')
        let $DinInputSTATE         = rtrim($pdx_STATE,' ')
        let $DinInputCOUNTY        = rtrim($pdx_COUNTY,' ')

    !
    ! #DinPrintRow = -1      ==> no printing
    ! #DinPrintRow =  0      ==> print now (+1,#DinPrintCol)
    ! #DinPrintRow = other   ==> print 6 lines at specified row/column
    !
    let #DinPrintRow = 0        ! print here
    let #DinPrintCol = {mcol_ee_data}      ! use provided column
    do DinProcessAddress
end-procedure


!**********************************************************************

! For SelfService Purposes: Online DEUV STatement split

! Procedure : GP-ePay-Init
! Initialize variables usee for SelfService processing

!**********************************************************************

begin-procedure GP-ePay-Init

! sg09-9B10 1766736000: replace TX1 with DV1
! check process was running from within PSJob GPDE_DV1.  Otherwise SelfService
! tables should not be written

  let #last_empl_rcd_nbr = -1

  let $ePay_Installed = 'Y'
  let $RunsInEpayJob = 'Y'

  do JobCheck

  if $RunsInEpayJob='Y'
     let $sql-statement = 'GPDEDV01.sqr, GP-ePay-Init '

!    get urlid from setup table GPDE_AL_VAL_PRS
     let $ePay_Installed = 'N'
     do Get-SelfService-URLid ($eV18)
     display '$eV18 '
     display $eV18

     If $ePay_Installed = 'Y'
        show 'gp-ePay-init'
        let #eV4 =  To_number($prcs_process_instance)

       !* have the Output Working Directory from the Process parameters table
 !sg09-9B10 1766736000: do procedure uncommented out
  do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

       let $eV1 = $prcs_oprid
       let $eV2 = $prcs_run_cntl_id
       let $eV3 = $ReportID
       let #page-total = 1

    End-If
 end-if

end-procedure !GP-ePay-Init


!**********************************************************************
! For SelfService Purposes: Online Payslip
! Procedure : GP-ePay-Guide
! Insert one row per payslip into the temporary guide table for SelfService
!**********************************************************************

begin-procedure GP-ePay-Guide

 let $sql-statement = 'GPDEDV01.sqr,GP-ePay-Guide'
 If $ePay_Installed = 'Y' and  $RunsInEpayJob='Y'

   let $eV5  = rtrim($Emplid, ' ')
   let $eV5  = ltrim($eV5, ' ')

   let $eV6 = rtrim($Run_Id,' ')
   let $eV6 = ltrim($eV6,' ')

   let $eV7  = 'GPDEU'
   do Get-CalID

 !sg09-89B17 1766736000: field GP_PSLP_ID ($eV8) is 40 char length. In some test the field can be more than 40.
                        !Solution: remove the report id
  !let $eV8  = $ReportID || '_' || $CAL_ID || '_' || $Pygrp || '_' || $eV5
   let $eV8  = $CAL_ID || '_' || $Pygrp || '_' || $eV5
   Let $eV8 = replace($eV8,'-','_')
   let $eV8 = $eV8 || '-' || to_char(#EMPL_RCD_NBR)

 !sg09-89B17 1766736000: field GP_PSLP_ID is 40 char length. If $eV8>40 substr the last 40 char
 let #length = length($eV8)
 if #length > 40
    let $eV8x = $eV8
    let #From = #length - 39
    let $eV8 = substr($eV8x, #From,40)
 end-if


   do Format-DateTime($AsOfToday,$out,{DEFDATE},'','')
   let $eV9  =  $AsOfToday
   let $eV10  = $AsOfToday
   let $eV11 = $AsOfToday

   let #eV12 = 0
   let $eV13 = 'Meldebescheinigung'
!   let $eV13 = 'Meldebescheinigung vom: ' || rtrim($out,' ')

   let $eV14 = 'KDGPAYRUN'
   let $eV15 = 'ORIG'

   !sysfilename of the payslip pdf since
   let $eV16 = $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'

   !userfilename  - what the payee sees
   let $eV17 = $eV16

   !begin/end page number of payslip in output report
   let #eV19 = #PageCount
   let #eV20 = (#PageCount + #NrPages) - 1
   let #page-total = #page-total + #PageCount

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

  !sg09-9B10 1766736000: uncomment do Insert-ePay-Guide-Data
   do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If


end-procedure ! GP-ePay-Guide


!**********************************************************************
! For SelfService Purposes: Online Payslip
! Procedure : GP-ePay-Control
! Insert one row per report into the epay run control table
!**********************************************************************
begin-procedure GP-ePay-Control

  let $sql-statement = 'GPDEDV01.sqr,GP-ePay-Control '
  If $ePay_Installed = 'Y'  and  $RunsInEpayJob='Y'

   !Do Copy-Report-For-SelfService
   let $rptid = lower($ReportID)
   let $eCV7  = $rptid|| '_' || $prcs_process_instance || '.PDF'
   let $eCV7 = $KKName || $Dateinummer2

   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

 !sg09-9B10 1766736000: uncomment do Insert-ePay-RunControl
  do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', ' ', $eCV7,$eCV8,' ',' ',#eV4,$eV18,'N')

 End-If

end-procedure !GP-ePay-Control


!**********************************************************************

! WhoAmI - is process run as part of epay prep or standalone?
!**********************************************************************

begin-procedure JobCheck

let $RunsInEpayJob = 'N'
let #prcs_inst = To_number($prcs_process_instance)

BEGIN-SELECT
JOBINSTANCE  &INST
  let #inst = &INST
  if  #inst  > 0
        let $RunsInEpayJob='Y'
  end-if

FROM PSPRCSRQST WHERE JOBINSTANCE =
(SELECT JOBINSTANCE FROM PSPRCSRQST WHERE PRCSINSTANCE = #prcs_inst )
AND PRCSNAME = 'GPDE_DV1'
END-SELECT

#debug show 'result: '  $RunsInEpayJob
#debug show 'instance: '  #prcs_inst

end-procedure


!**********************************************************************
! get cal-id and paygroup
!**********************************************************************

begin-procedure Get-CalID

BEGIN-SELECT
CAL_ID &PRCSTAT_CAL_ID
GP_PAYGROUP  &PRCSTAT_GP_PAYGROUP
    let $CAL_ID = rtrim(&PRCSTAT_CAL_ID,' ')
    let $Pygrp = rtrim(&PRCSTAT_GP_PAYGROUP,' ')
from PS_GP_PYE_PRC_STAT where CAL_RUN_ID = $Run_id
and EMPLID = $Emplid
and EMPL_RCD = #EMPL_RCD_NBR
and RSLT_VER_NUM = 1 and RSLT_REV_NUM = 1
and CALC_TYPE = 'P'

END-SELECT


end-procedure

!***********************************************************************************
! For SelfService Purposes: Online - the URL id for SelfService from GPDE_AL_VAL_PRS*
!***********************************************************************************

begin-procedure Get-SelfService-URLid (:$XFILEURLID)

let $_ePay_Installed = 'N'

!sg09-89B17 1766736000: content of this procedure UNcommented out.
!* get the URL id from the Payslip option table

BEGIN-SELECT
FM.URL_ID  &URLID

  let $XFILEURLID = rtrim(&URLID,' ')

FROM PS_GPDE_FM_FORM FM WHERE FM.GPDE_FM_FORM_ID = 'GPDEDV01'
AND FM.EFFDT =
  (SELECT MAX(DEF.EFFDT) from PS_GPDE_FM_DEF DEF WHERE
DEF.GPDE_FM_FORM_ID = 'GPDEDV01')
END-SELECT

  if  $XFILEURLID  > ' '
        let $_ePay_Installed = 'Y'
  else
      display 'Form-ID does not seem to be defined.  Pls check the setup. PDF Splitt will be skipped.'
  end-if

end-procedure !Get-SelfService-URLid


!**************************************************************
begin-procedure Count-EE

let #NrPages = 0

BEGIN-SELECT
countdsme.EMPLID
countdsme.EMPL_RCD

    add 1 to #NrPages

FROM PS_GPDE_DV_DSME countdsme
    ,PS_GPDE_SI_PROV countprov

WHERE countdsme.GPDE_DV_REP_DATE IS NULL
AND  countdsme.GPDE_DV_REP_STATUS <> 'F'
AND  (countprov.GPDE_DV_RCVER_ID = $Prov_Type
OR  (countprov.GPDE_SI_PROV_ID = $Prov_Type AND countprov.GPDE_DV_RCVER_YN = 'Y' ))
AND   countprov.GPDE_SI_PROV = countdsme.GPDE_SI_PROV
AND   countprov.EFFDT =
         (SELECT MAX(sub1.EFFDT) FROM PS_GPDE_SI_PROV sub1
          WHERE sub1.GPDE_SI_PROV = countprov.GPDE_SI_PROV
          AND   sub1.EFFDT <= countdsme.GPDE_DV_EVT_EFFDT)
AND   countdsme.CAL_RUN_ID = $Run_id
AND   countdsme.EMPLID = $EMPLID
AND   countdsme.EMPL_RCD = #EMPL_RCD_NBR
END-SELECT

end-procedure !count-EE


!**************************************************************
! sg09-9B10 1890237000: for VOSZ and NCSZ. If the provider id is a pension fund provider id,
! VERFAHRENSMERKMAL should be AGBVD otherwise it's AGAAG
begin-procedure Get-Verfahrensmerkmal($Receiver, $inX2, :$outX2)

 let #PFProviderID = 0

BEGIN-SELECT
COUNT(*) &PFfound
 let #PFProviderID = &PFfound
FROM PS_GPDE_PF_PROV_ID A
WHERE A.GPDE_SI_PROV_ID=$Receiver
AND A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_GPDE_PF_PROV_ID A1
WHERE A.GPDE_SI_PROV_ID = A1.GPDE_SI_PROV_ID)
END-SELECT

IF #PFProviderID > 0
 let $outX2 = 'AGBVD'
ELSE
 let $outX2 = $inX2
END-IF

end-procedure !Get-Verfahrensmerkmal

begin-procedure getProviderType(:$provider_type, $provider)
let $provider_type = 'invalid'
begin-select
PROV.GPDE_AL_PROV_TYPE

    let $provider_type = &PROV.GPDE_AL_PROV_TYPE

from PS_GPDE_SI_PROV PROV
where PROV.GPDE_SI_PROV_ID = $provider
end-select
end-procedure
!**************************************************************



!*********************************************************
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
! #Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'tranctrl.sqc'  !Commits the update transactions
#Include 'datemath.sqc'  !Converts date
#include 'validdt.sqc'   !validate date routine
#include 'gpdeut07.sqc'  !utilities
!rh 8.9 tax update 2007 -  PDF splitt
!sg09-9B10 1766736000: uncommnent #Include 'gpsspslp.sqc'
#Include 'gpsspslp.sqc'  ! On-line PDF splitting stuff
