!***********************************************************************
!  GPBRFE01:  Vacation Notice and Recibe                                *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/06/30:21:38:39                                 !
!       $Release:  HR92                                                !
!      $Revision:  106                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'

begin-setup
#include 'setupdb.sqc'
 declare-printer   THIS_REPORT
  type=hplaserjet
  font=5
  point-size=12
  pitch=17
  symbol-set=0U     ! ASCII symbol set
 end-declare

 declare-layout THIS_REPORT
  orientation=Portrait
  top-margin= .4
  left-margin=.60
  max-lines=82
  max-columns=130
  char-width=4.3    ! 7.2
  line-height=9     ! 72/printer_point-size
 end-declare

 declare-report THIS_REPORT
  printer-type=hplaserjet
  layout=THIS_REPORT
 end-declare

end-setup


begin-report
 do Init-report
 do Process-Main
 do Stdapi-Term
end-report

begin-procedure Init-Report
 move 'GPBRFE01'                       to $ReportID
 move 'Aviso & Recibo de Férias'       to $ReportTitle
 move '2013-Bp'                        to $ReportVersion
 display $ReportID
 display $ReportTitle
 display $ReportVersion
 move '2' to $ReportDateType   ! Set for date to format as DMY
 move '1' to $ReportYear4      ! Set for year to be formatted YYYY
 do Init-DateTime
 do Init-Number
 do Stdapi-Init
 do Get-Current-DateTime
 date-time () hh:mi:ss &timeBegan
 display 'Report Began: ' noline
 display &timeBegan
 alter-locale MONEY-SIGN = 'R$'

 let #StdFont    = 5                 !Times Roman proportional
 let #SmlPntSize = 6
 let #StdPntSize = 8
 let #BigPntSize = 10

end-procedure Init-Report

!**************************************
begin-procedure Process-Main
#debug show '** Process-Main **'
!**************************************
 let #notice  = 1
 do Get-Parameters

 let $SecurityClauseWithERN = ''
 let $_TableAlias = 'B'
 do Security-Param

 let $RText02  = 'Obs.: O Recibo de Férias deverá ser quitado pelo empregador, pelo menos '
 let $RText02a = ' dias antes do Período de Gozo de Férias.'
 let $NText01 = 'Nos termos das disposições legais vigentes, suas férias serão concedidas'
 let $NText01 = $NText01 || ' conforme demonstrativo abaixo: '

 let $NText02 = ''
 let $NText02 = $NText02 || 'Art. 135 - A concessão das férias será participada, por escrito, ao empregado, com '
 let $NText02 = $NText02 || 'antecedência de no mínimo 30 (trinta) dias. Dessa participação o interessado dará '
 let $NText02 = $NText02 || 'recibo. '

 let $NText03 = ''
 let $NText03 = $NText03 || '1º – O empregado não poderá entrar no gozo das férias sem que apresente ao '
 let $NText03 = $NText03 || 'empregador sua Carteira de Trabalho e Previdência Social, para que nela seja anotada a '
 let $NText03 = $NText03 || 'respectiva concessão.'

 let $NText04 = ''
 let $NText04 = $NText04 || '2º – A concessão das férias será, igualmente, anotada no livro ou nas fichas de registro '
 let $NText04 = $NText04 || 'dos empregados.'

 #debug show '$Report: '  $Report
 if $Report <> ''
    if $Report <> '30'
       let #notice  = 1
       do Get-Format
       do Def-Arrays
       do Process-Receipt
    end-if
    if $Report = '30'
       let $WhereEmplid = ''
       do Process-Notice
    end-if
 end-if

 date-time () hh:mi:ss &timeEnded
 display ''
 display 'Report Ended: ' noline
 display &timeEnded
 display ''

end-procedure Process-Main

!**************************************
begin-procedure Get-Parameters
#debug show '** Get-Parameters **'
!**************************************
let $Report = ''
let #CompRate = 0
begin-select
RC.GPBR_REPORT_OPTION
RC.GPBR_LIST_OPTION
RC.COMPANY
RC.BEGIN_DT
RC.END_DATE
RC.GPBR_EXCLUDE_FLG1
RC.GPBR_FORMAT_ID
RC.RUN_TYPE
RC.GPBR_PIN_ACCUM_NUM
RC.GPBR_TOT_AMT
RC.GPBR_NOTICE_DATE

 let $Report                           = rtrim(&RC.GPBR_REPORT_OPTION, ' ')
 let $ListOption                       = rtrim(&RC.GPBR_LIST_OPTION, ' ')
 let $Company                          = rtrim(&RC.COMPANY, ' ')
 let $BeginDt                          = rtrim(&RC.BEGIN_DT, ' ')
 let $EndDt                            = rtrim(&RC.END_DATE, ' ')
 let $ExcludeFlg                       = rtrim(&RC.GPBR_EXCLUDE_FLG1, ' ')
 let $FormatID                         = rtrim(&RC.GPBR_FORMAT_ID, ' ')
 let $RunType                          = rtrim(&RC.RUN_TYPE, ' ')
 let #PinOthPay                        = &RC.GPBR_PIN_ACCUM_NUM
 let $NoticeDate                       = rtrim(&RC.GPBR_NOTICE_DATE, ' ')
 let $WhereRunC = 'WHERE OP.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND OP.RUN_CNTL_ID = '
 let $WhereRunC = $WhereRunC  || '''' || $prcs_run_cntl_id || '''' || ')'

 do convert-to-dtu-date ($BeginDt, $BeginDt2)
 do dtu-month-begin($BeginDt2,$StartDate)
 do Convert-From-DTU-Date ($StartDate, $StartDate)


 if $ExcludeFlg = 'Y'
    let $WhereExclude = 'NOT IN '
 else
    let $WhereExclude = 'IN '
 end-if

 evaluate $ListOption
  when = '2'
   let $TableOption = 'PS_GPBR_RC_VAC_EST'
   do Select-Exist-Option
   if $Exist <> ''
      let $WhereOption = ' AND B.ESTABID ' || $WhereExclude
      let $WhereOption = $WhereOption   || ' (SELECT OP.ESTABID FROM PS_GPBR_RC_VAC_EST OP '
      let $WhereOption = $WhereOption   || $WhereRunC
   end-if

   when = '3'
    let #CompRate    = &RC.GPBR_TOT_AMT
    let $TableOption = 'PS_GPBR_RC_VAC_EMP'
    do Select-Exist-Option
    if $Exist <> ''
       let $WhereOption = ' AND B.EMPLID ' || $WhereExclude
       let $WhereOption = $WhereOption   || ' (SELECT OP.EMPLID FROM PS_GPBR_RC_VAC_EMP OP '
       let $WhereOption = $WhereOption   || $WhereRunC

       let $WhereER = 'AND B.EMPL_RCD IN (SELECT OPR.EMPL_RCD FROM PS_GPBR_RC_VAC_EMP OPR '
       let $WhereER = $WhereER || ' WHERE OPR.OPRID = ' || '''' || $prcs_oprid || ''''
       let $WhereER = $WhereER || ' AND OPR.RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' || ' AND OPR.EMPLID = B.EMPLID)'
    end-if

   when = '7'
    let $TableOption = 'PS_GPBR_RC_VAC_DEP'
    do Select-Exist-Option
    if $Exist <> ''
       let $WhereOption = ' AND B.DEPTID ' || $WhereExclude
       let $WhereOption = $WhereOption   || ' (SELECT OP.DEPTID FROM PS_GPBR_RC_VAC_DEP OP '
       let $WhereOption = $WhereOption   || $WhereRunC
    end-if

 end-evaluate

from PS_GPBR_RC_VAC_REC RC
where RC.OPRID = $prcs_oprid
and   RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure  Get-Parameters

!**************************************
begin-procedure Select-Exist-Option
#debug show '** Select-Exist-Option **'
!**************************************
let $Exist = ''
begin-select distinct

RCOP.RUN_CNTL_ID

 let $Exist = rtrim(&RCOP.RUN_CNTL_ID, ' ')

from [$TableOption] RCOP
where RCOP.OPRID = $prcs_oprid
and RCOP.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure Select-Exist-Option

!**************************************
begin-procedure Process-Notice
#debug show '** Process-Notice **'
#debug show '   $BeginDt               : ' $BeginDt
#debug show '   $EndDt                 : ' $EndDt
#debug show '   $WhereEmplid           : ' $WhereEmplid
#debug show '   $WhereOption           : ' $WhereOption
#debug show '   $SecurityClausewithERN : ' $SecurityClausewithERN
!**************************************

        if $Report = '10'
           let $BgnTemp = $BeginDt
           let $EndTemp = $EndDt

           let $BeginDt  = $AcqBeginDt
           let $EndDt    = $AcqEndDt
        end-if
begin-select
A.EMPLID
!C.NAME_DISPLAY
A.BEGIN_DT
A.END_DATE
A.ABS_BGN_DT
A.ABS_END_DT
B.DEPTID
B.SETID_DEPT
B.EFFDT
B.GP_PAYGROUP
B.EMPL_RCD
B.ESTABID

 let $Emplid = rtrim(&A.EMPLID, ' ')
 !Let $Name                             = Rtrim(&C.NAME_DISPLAY, ' ')
 let $AcqBeginDt                       = rtrim(&A.BEGIN_DT, ' ')
 let $AcqEndDt                         = rtrim(&A.END_DATE, ' ')
 let $AbsBeginDt                       = rtrim(&A.ABS_BGN_DT, ' ')
 let $AbsEndDt                         = rtrim(&A.ABS_END_DT, ' ')
 let $Deptid                           = rtrim(&B.DEPTID, ' ')
 let $SetIDDeptid                      = rtrim(&B.SETID_DEPT, ' ')
 let $Effdt                            = &B.EFFDT
 let $GPPaygroup                       = rtrim(&B.GP_PAYGROUP,' ')
 let #EmplRcd                          = &B.EMPL_RCD

 do Get-HireDate
 do Get-National-Id
 do Select-Person-Data
 do Get-Dept-Descr
 do GetEmployeeName($Emplid, $BeginDt, $Name)


 if rtrim($AbsEndDt, ' ')  <> ''
    do Get-Return-Day
 end-if
 do Create-Notice-Format


        if $Report = '10'
           let $BeginDt  = $BgnTemp
           let $EndDt    = $EndTemp
        end-if

from PS_GPBR_LEAVE_PROG A
    ,PS_JOB B
!    ,PS_NAMES C
where A.EMPLID = B.EMPLID
and A.EMPL_RCD = B.EMPL_RCD
!AND   A.EMPLID = C.EMPLID
and   B.EFFDT = (select MAX(JOB.EFFDT)
                 from PS_JOB JOB
                 where JOB.EMPLID   = B.EMPLID
                 and   JOB.EMPL_RCD = B.EMPL_RCD
                 and   JOB.EFFDT   <= $EndDt)
and   B.EFFSEQ = (select MAX(JOB1.EFFSEQ)
                 from PS_JOB JOB1
                 where JOB1.EMPLID = B.EMPLID
                 and JOB1.EFFDT    = B.EFFDT
                 and JOB1.EMPL_RCD = B.EMPL_RCD)
!AND   C.EFFDT = (SELECT MAX(CC.EFFDT)
!                 FROM PS_NAMES CC
!                 WHERE CC.EMPLID   = C.EMPLID
!                 AND   CC.EFFDT   <= $EndDt)
!AND   C.NAME_TYPE = 'PRI'
and   A.ABS_BGN_DT >= $BeginDt
and   A.ABS_BGN_DT <= $EndDt
and   B.COMPANY = $Company
[$WhereEmplid]
[$WhereOption]
![$SecurityClausewithERN]


end-select
end-procedure  Process-Notice

!**************************************
begin-procedure Process-Receipt
#debug show '** Process-Receipt **'
#debug show '   $BeginDt               : ' $BeginDt
#debug show '   $EndDt                 : ' $EndDt
#debug show '   $WhereOption           : ' $WhereOption
#debug show '   $WhereER               : ' $WhereER
#debug show '   $RunType               : ' $RunType
#debug show '   $Company               : ' $Company
#debug show '   $SecurityClausewithERN : ' $SecurityClausewithERN
!**************************************

begin-select distinct
BB.CAL_RUN_ID
BB.EMPLID       &BB.EMPLID
BB.EMPL_RCD     &BB.EMPL_RCD
BB.PRD_BGN_DT
!D.NAME_DISPLAY
BB.GP_PAYGROUP
B.DEPTID       &DEPTID
B.SETID_DEPT   &SETID_DEPT
B.EFFDT        &EFFDT
B.EMPL_RCD     &EMPL_RCD
B.ESTABID      &ESTABID
B.EFFSEQ
B.MONTHLY_RT



 let $Emplid                           = rtrim(&BB.EMPLID, ' ')
 let #EmplRcd                          = &BB.EMPL_RCD
! Let $Name                             = Rtrim(&D.NAME_DISPLAY, ' ')
 let $Deptid                           = rtrim(&DEPTID, ' ')
 let $SetIDDeptid                      = rtrim(&SETID_DEPT, ' ')
 let $Effdt                            = rtrim(&EFFDT, ' ')
 let $GPPaygroup                       = rtrim(&BB.GP_PAYGROUP,' ')
 let #EmplRcd                          = &EMPL_RCD
 let $CalRunID                         = rtrim(&BB.CAL_RUN_ID, ' ')
 let #CompRate                         = &B.MONTHLY_RT
 let $Seg_Prd_Bgn_DT                   = rtrim(&BB.PRD_BGN_DT,' ')


    #debug show '    $Emplid         :' $Emplid
    #debug show '    #EmplRcd.       :' #EmplRcd
    #debug show '    $Name           :' $Name
    #debug show '    $SetIDDeptid    :' $SetIDDeptid
    #debug show '    $Effdt          :' $Effdt
    #debug show '    $GPPaygroup     :' $GPPaygroup
    #debug show '    $CalRunID       :' $CalRunID
    #debug show '    $Seg_Prd_Bgn_DT :' $Seg_Prd_Bgn_DT
    #debug show '    $StartDate      :' $StartDate
    #debug show '    $EndDt          :' $EndDt


 do validateOffCycle

 do GetEmployeeName($Emplid, $BeginDt, $Name)

 do Acq-Period

 if $FoundAdqPrd = 'Y'
     do Get-Max-Rslt-Seg-Vac

     if $EarnInclude = '10'
         do Get-Erns-Amt-Inc
     else
         do Get-Erns-Amt-Exc
     end-if

      if $DedInclude  = '10'
         do Get-Ded-Amt-Inc
      else
         do Get-Ded-Amt-Exc
      end-if

      if #PinErnTot <> 0
         let #PinTotal = #PinErnTot
         do Get-Accum-Amt
         let #AmtErnTot = #AmtVal
      end-if

      if #PinDedTot <> 0
         let #PinTotal = #PinDedTot
         do Get-Accum-Amt
         let #AmtDedTot = #AmtVal
      end-if

      if #PinNetPay <> 0
         let #PinTotal = #PinNetPay
         do Get-Accum-Amt
         let #AmtNetTot = #AmtVal
      end-if

      if #PinOthPay <> 0
         let #AmtVal = 0
         let #PinTotal = #PinOthPay
         do Get-Accum-Amt-Rem
         let #AmtOthPay = #AmtVal
      end-if

     if #ContErn > 0 or
        #ContDed > 0
        do Get-Absences
        do Get-Company-Descr
        do Get-HireDate
        if #CompRate = 0
           let #EffSeq = &B.EFFSEQ
           do Get-Compensation
        end-if

        do Get-Acq-Period
        do Get-National-Id
        do Select-Person-Data
        do Get-Dept-Descr
        do Get-Employee-Union
        do Create-Receipt-Format
        do Print-Receipt-Dtl
        if $Report = '10'
           let $WhereEmplid = ' AND A.EMPLID = ' || '''' ||  $Emplid || ''''
           move #EmplRcd to $empl_rcd_txt '999'
           let $WhereEmplid = $WhereEmplid || ' AND A.EMPL_RCD = ' || $empl_rcd_txt
           do Process-Notice
        end-if
        add 1 to #EmplProcess
     end-if
 end-if
from  PS_JOB B
!     ,PS_NAMES  D
     ,PS_GP_RSLT_SEG_VW BB
where BB.GP_PAYGROUP = B.GP_PAYGROUP
and   B.EMPLID = BB.EMPLID
and   B.EMPL_RCD = BB.EMPL_RCD
!AND   BB.EMPLID = D.EMPLID
and   BB.RUN_TYPE = $RunType
and   B.EFFDT = (select MAX(JOB.EFFDT)
                 from PS_JOB JOB
                 where JOB.EMPLID   = B.EMPLID
                 and   JOB.EMPL_RCD = B.EMPL_RCD
                 and   JOB.EFFDT   <= $EndDt)
and   B.EFFSEQ = (select MAX(EFFSEQ)
                 from PS_JOB
                 where EMPLID = B.EMPLID
                 and EFFDT = B.EFFDT
                 and EMPL_RCD = B.EMPL_RCD)
and   B.COMPANY = $Company
and   BB.SEG_BGN_DT >= $StartDate
and   BB.SEG_BGN_DT <= $EndDt
and   BB.SEG_BGN_DT = (select MIN(BB2.SEG_BGN_DT)
                       from PS_GP_RSLT_SEG_VW BB2
                       where BB2.EMPLID = BB.EMPLID
                       and BB2.EMPL_RCD = BB.EMPL_RCD
                       and BB2.CAL_RUN_ID = BB.CAL_RUN_ID
                       and BB2.GP_PAYGROUP = BB.GP_PAYGROUP
                       and BB2.ORIG_CAL_RUN_ID = BB.ORIG_CAL_RUN_ID
                       and BB2.RSLT_SEG_NUM = BB.RSLT_SEG_NUM
                       and BB2.RUN_TYPE = BB.RUN_TYPE)

!AND   BB.PYMT_DT >= $BeginDt
!AND   BB.PYMT_DT <= $EndDt
!AND   D.EFFDT = (SELECT MAX(CC.EFFDT)
!                 FROM PS_NAMES CC
!                 WHERE CC.EMPLID   = D.EMPLID
!                 AND   CC.EFFDT   <= $EndDt)
!AND   D.NAME_TYPE = 'PRI'
[$WhereOption]
[$WhereER]
![$SecurityClausewithERN]
end-select
end-procedure  Process-Receipt

!######################################
begin-procedure validateOffCycle
#debug show 'validateOffCycle'
#debug show '    $offCycle  :' $offCycle


begin-select
OFF_CYCLE

     if &OFF_CYCLE  = 'Y'
        let $offCycle        = 'Y'
     end-if

from  PS_GP_CAL_RUN
where CAL_RUN_ID = $calRunID
end-select
#debug show '    $offCycle  :' $offCycle
end-procedure validateOffCycle

begin-procedure GetEmployeeName($id, $dt, :$nm)
#debug show 'Procedure: GetEmployeeName'
#debug show '    $id :' $id
#debug show '    $dt :' $dt



let $nm = ''
let $l_nm = ''
let $p_nm = ''
!Look for Legal OR Primary Name

begin-select
NM1.NAME_DISPLAY
NM1.NAME_TYPE

    if &NM1.NAME_TYPE = 'LEG'
        let $l_nm = rtrim(&NM1.NAME_DISPLAY, ' ')
    else
        let $p_nm = rtrim(&NM1.NAME_DISPLAY, ' ')
    end-if

from PS_NAMES NM1
where NM1.EMPLID          = $id
and NM1.NAME_TYPE        in ('LEG','PRI')
and NM1.EFF_STATUS        = 'A'
and NM1.COUNTRY_NM_FORMAT = 'BRA'
and NM1.EFFDT             =
    (select MAX(NM.EFFDT)
    from PS_NAMES NM
    where NM.EMPLID          = NM1.EMPLID
    and NM.NAME_TYPE         = NM1.NAME_TYPE
    and NM.EFF_STATUS        = NM1.EFF_STATUS
    and NM.COUNTRY_NM_FORMAT = NM1.COUNTRY_NM_FORMAT
    and NM.EFFDT <= $dt
    )
end-select

if $l_nm <> ''
    let $nm = $l_nm
else
    let $nm = $p_nm
end-if

#debug show '    $nm :' $nm

end-procedure GetEmployeeName

!**************************************
begin-procedure Where-CalID
#debug show '* Where-CalID'
!**************************************
let $whereCalID = ''

if $offCycle        = 'Y'
    let $whereCalID  = ' AND ' || $calIDAlias || '.CAL_ID IN (SELECT OFF6.CAL_ID FROM  PS_GP_OFFCYCLE OFF1, PS_GP_CAL_PRD OFF2, PS_GP_CAL_RUN_OFF OFF3 '
    !Let $whereCalID  = $whereCalID || ' ,PS_GP_PYE_CAL  OFF4, PS_GP_RUN_TYPE OFF5 ,PS_GP_PYE_RUN_DTL OFF6 WHERE OFF1.CAL_RUN_ID = ' || $calIDAlias || '.CAL_RUN_ID '
     let $whereCalID  = $whereCalID || ' ,PS_GP_PYE_CAL  OFF4, PS_GP_RUN_TYPE OFF5 ,PS_GP_PYE_PRC_STAT OFF6 WHERE OFF1.CAL_RUN_ID = ' || $calIDAlias || '.CAL_RUN_ID '
 !       Let $whereCalID  = $whereCalID || ' AND OFF1.CAL_RUN_ID = OFF4.CAL_RUN_ID AND   OFF1.CAL_PRD_ID = OFF2.CAL_PRD_ID '
    let $whereCalID  = $whereCalID || ' AND   OFF1.CAL_PRD_ID = OFF2.CAL_PRD_ID '
    let $whereCalID  = $whereCalID || ' AND OFF1.CAL_PRD_ID = OFF4.CAL_PRD_ID AND   OFF1.GP_PAYGROUP = OFF3.GP_PAYGROUP '
    let $whereCalID  = $whereCalID || ' AND   OFF1.GP_PAYGROUP = OFF4.GP_PAYGROUP AND   OFF1.GP_PAYGROUP = OFF6.GP_PAYGROUP AND   OFF4.EMPLID = ' || $calIDAlias || '.EMPLID AND '
    let $whereCalID  = $whereCalID || ' OFF4.EMPL_RCD = ' || $calIDAlias || '.EMPL_RCD AND      OFF4.EMPLID = OFF6.EMPLID AND  OFF4.EMPL_RCD = OFF6.EMPL_RCD AND OFF4.RUN_TYPE = OFF5.RUN_TYPE '
    !Let $whereCalID  = $whereCalID || ' AND   OFF4.SRC_CAL_RUN_ID = OFF6.CAL_RUN_ID AND   OFF4.RUN_TYPE  = ' || '''' || $RunType || '''' || ') '
     let $whereCalID  = $whereCalID || ' AND OFF4.RUN_TYPE  = ' || '''' || $RunType || '''' || ') '
else
    let $whereCalID  = ' AND ' || $calIDAlias || '.CAL_ID IN (SELECT B.CAL_ID FROM  PS_GP_PYE_RUN A ,PS_GP_PYE_RUN_DTL B '
    let $whereCalID  = $whereCalID || ' ,PS_GP_CALENDAR C WHERE A.CAL_RUN_ID = ' || $calIDAlias || '.CAL_RUN_ID AND A.CAL_RUN_ID = B.CAL_RUN_ID '
    let $whereCalID  = $whereCalID || ' AND   B.GP_PAYGROUP  = C.GP_PAYGROUP AND   B.CAL_ID = C.CAL_ID AND   A.EMPLID = ' || $calIDAlias || '.EMPLID '
    let $whereCalID  = $whereCalID || ' AND   A.EMPL_RCD = ' || $calIDAlias || '.EMPL_RCD  AND   C.RUN_TYPE = ' || '''' || $RunType || '''' || ') '
end-if

#debug show '$whereCalID: ' $whereCalID

end-procedure Where-CalID


!**************************************
begin-procedure Acq-Period
#debug show '** Acq-Period **'
#debug show '   $Emplid  :' $Emplid
#debug show '   #EmplRcd :' #EmplRcd
#debug show '   $BeginDt :' $BeginDt
#debug show '   $EndDt   :' $EndDt
!**************************************

let $FoundAdqPrd = ''
begin-select
AC.BEGIN_DT &AC.BEGIN_DT
AC.END_DATE &AC.END_DATE
AC.ABS_BGN_DT
AC.ABS_END_DT
AC.DAYS

 let $AbsBeginDt         = rtrim(&AC.BEGIN_DT,   ' ')
 let $AbsEndDt           = rtrim(&AC.END_DATE,   ' ')
 let $AcqBeginDt         = rtrim(&AC.ABS_BGN_DT,   ' ')
 let $AcqEndDt           = rtrim(&AC.ABS_END_DT,   ' ')
 let $Days               = edit(&AC.DAYS, '999')

 let $FoundAdqPrd = 'Y'
#debug show '   $AbsBeginDt  :' $AbsBeginDt
#debug show '   $AbsEndDt    :' $AbsEndDt

#debug show '   $AcqBeginDt  :' $AcqBeginDt
#debug show '   $AcqEndDt    :' $AcqEndDt

    show  '$Emplid ' $Emplid

from PS_GPBR_LEAVE_PROG AC
where AC.EMPLID = $Emplid
and   AC.EMPL_RCD = #EmplRcd
and   AC.ABS_BGN_DT >= $BeginDt
and   AC.ABS_BGN_DT <= $EndDt
end-select
end-procedure  Acq-Period

!**************************************
begin-procedure Get-HireDate
#debug show '* Get-HireDate *'

begin-select
E.HIRE_DT

 let $HireDt = rtrim(&E.HIRE_DT, ' ')


from  PS_EMPLOYMENT E
where E.EMPLID   = $Emplid
and   E.EMPL_RCD = #emplRcd
end-select
#debug show 'end Get-HireDate *'
end-procedure Get-HireDate

!**************************************
begin-procedure Get-Compensation
#debug show '* Get-Compensation'
!**************************************
let #Comprate = 0
begin-select
C.COMPRATE

 let #Comprate = &C.COMPRATE

from  PS_COMPENSATION C
where C.EMPLID   = $Emplid
and   C.EMPL_RCD = #EmplRcd
and   C.EFFDT    = (select MAX(COMP.EFFDT)
                    from PS_COMPENSATION COMP
                    where COMP.EMPLID   = C.EMPLID
                    and   COMP.EMPL_RCD = C.EMPL_RCD
                    and   COMP.EFFDT   <= $Effdt)
and   C.EFFSEQ = #EffSeq
end-select
end-procedure Get-Compensation

!**************************************
begin-procedure Get-National-Id
#debug show '** Get-National-Id **'
!**************************************
let $CTPS = ''

begin-select
A.NATIONAL_ID
A.NATIONAL_ID_TYPE

   let $NationalId = rtrim(&A.NATIONAL_ID_TYPE, ' ')

   evaluate $NationalId
   when = 'CTPS'
     let $CTPS     = rtrim(&A.NATIONAL_ID,' ')
   end-evaluate

from PS_PERS_NID A
where A.EMPLID = $Emplid
and A.COUNTRY = 'BRA'
end-select
end-procedure Get-National-Id

!**************************************
begin-procedure Select-Person-Data
#debug show '** Select-Person-Data **'
!**************************************
begin-select
G.CTPS_SERIES_BRA

  let $CTPSSerie    = rtrim(&G.CTPS_SERIES_BRA, ' ')

from PS_PERSON_BRA G
where G.EMPLID = $Emplid
end-select
end-procedure Select-Person-Data

!**************************************
begin-procedure Get-Dept-Descr
#debug show '* Get-Dept-Descr *'
!**************************************
let $DeptIDDescr = ''

begin-select
DD.DESCR

  let $DeptIDDescr = rtrim(&DD.DESCR, ' ')

from PS_DEPT_TBL DD
where DD.SETID   = $SetIDDeptid
and   DD.DEPTID  = $Deptid
and   DD.EFFDT   =  (select MAX(EFFDT) from PS_DEPT_TBL
                   where SETID    = DD.SETID
                   and   DEPTID   = DD.DEPTID
                   and   EFFDT <= $Effdt)
and   DD.EFF_STATUS = 'A'
end-select

begin-select
DL.DESCR

  let $DeptIDDescr = rtrim(&DL.DESCR,' ')

from PS_DEPT_TBL_LANG DL
where DL.DEPTID = $DeptId
and   DL.SETID  = $SetIDDeptID
and   DL.LANGUAGE_CD = $Curr_language_Cd
and   DL.EFFDT = (select MAX(EFFDT) from PS_DEPT_TBL_LANG
                  where DEPTID = DL.DEPTID
                  and   SETID  = DL.SETID
                  and   LANGUAGE_CD = DL.LANGUAGE_CD
                  and   EFFDT <= $Effdt)
end-select
end-procedure Get-Dept-Descr

!**************************************
begin-procedure Get-Return-Day
#debug show '** Get-Return-Day **'
!**************************************
 let $ReturnDt = ''
 do convert-to-dtu-date($AbsEndDt,$DateOut2)

 while $ReturnDt = ''
   do dtu-add-days($DateOut2, 1, $DateOut2)

   do convert-from-dtu-date($DateOut2,$DateOut)

   do Get-Sch-Mang
   if $WorkDay = ''
      do Get-Sch-Assign
      if $Schedule = ''
         do Get-GP_PyGrp
         if $Schedule = ''
             show 'Não existe horário do trabalho para empregado: ' $Emplid ' - ' $GPPaygroup
             let $ReturnDt = $DateOut2
         else
            do Get-Sch-Clnd
            if $WrkdayID <> ''
               if $WrkdayID <> 'OFF'
                  do Get-Holiday-Sch
                  if $Holiday <> ''
                     let $ReturnDt = ' '
                  else
                     let $ReturnDt = $DateOut2
                  end-if
               else
                   let $ReturnDt = $DateOut2
               end-if
            else
                 let $ReturnDt = $DateOut2
               show 'Não existe Calendário: ' $Schedule ' - ' $GPPaygroup
            end-if
         end-if
      else
         let $ReturnDt = $DateOut2
      end-if
   else
       let $ReturnDt = $DateOut2
   end-if
 end-while

 let $ReturnDt = rtrim($ReturnDt, ' ')
 if $ReturnDt <> ''
   do convert-from-dtu-date($ReturnDt,$ReturnDt)
 end-if
#debug  show '$ReturnDt '  $ReturnDt
end-procedure Get-Return-Day

!**************************************
begin-procedure Get-Sch-Mang
#debug show '** Get-Sch-Mang **'
!**************************************
let $WorkDay = ''
begin-select
A.WRKDAY_ID

 let $WorkDay = rtrim(&A.WRKDAY_ID, ' ' )

from PS_SCH_MNG_SCH_TBL A
where A.EMPLID = $Emplid
and   A.EMPL_RCD = #EmplRcd
and   A.DUR = $DateOut
end-select
end-procedure Get-Sch-Mang

!**************************************
begin-procedure Get-Sch-Assign
#debug show '** Get-Sch-Assign **'
!**************************************
let $Schedule = ''
begin-select
A.SCHEDULE_ID

 let $Schedule = rtrim(&A.SCHEDULE_ID, ' ' )

from PS_SCH_ASSIGN A
where A.EMPLID = $Emplid
and   A.EMPL_RCD = #EmplRcd
and A.EFFDT = (select MAX(B.EFFDT)
               from PS_SCH_ASSIGN B
               where A.EMPLID = B.EMPLID
               and A.EMPL_RCD = B.EMPL_RCD
               and EFFDT <= $Effdt)
end-select
end-procedure Get-Sch-Assign

!**************************************
begin-procedure Get-GP_PyGrp
#debug show '** Get-GP_PyGrp **'
!**************************************
let $Schedule = ''
begin-select
AA.SCHEDULE_ID
AA.HOLIDAY_SCHEDULE

 let $Schedule = rtrim(&AA.SCHEDULE_ID, ' ' )
 let $HolidaySch = rtrim(&AA.HOLIDAY_SCHEDULE, ' ' )

! show '   $Schedule:   ' $Schedule
! show '   $HolidaySch: ' $HolidaySch

from PS_GP_PYGRP_DTL AA
where AA.GP_PAYGROUP = $GPPaygroup
and   AA.EFFDT = (select MAX(B.EFFDT)
                 from PS_GP_PYGRP_DTL B
                 where AA.GP_PAYGROUP = B.GP_PAYGROUP
                 and   B.EFFDT <= $Effdt)

end-select
end-procedure Get-GP_PyGrp

!!**************************************
begin-procedure Get-Sch-Clnd
#debug show '** Get-Sch-Clnd **'
#debug show '   $DateOut: '  $DateOut
!**************************************
!let $dateshow = {DatetimeIn-Prefix}$DateOut{DatetimeIn-Suffix}
#debug show '$dateshow: '  $dateshow
let $WrkdayID = ''
begin-select
WRKDAY_ID

    let $WrkdayID = &WRKDAY_ID

from PS_SCH_CLND_WRK
where SCHEDULE_ID = $Schedule
and DUR = $DateOut
!AND DUR_OUT_DTTM  >= {DATETIMEIN-PREFIX}$DateOut{DATETIMEIN-SUFFIX}
end-select
end-procedure Get-Sch-Clnd

!**************************************
begin-procedure Get-Holiday-Sch
#debug show '** Get-Holiday-Sch **'
#debug show '   $DateOut '  $DateOut
!**************************************
let $Holiday = ''
begin-select
HOLIDAY

 let $Holiday = rtrim(&HOLIDAY, ' ')
! show '   $Holiday: ' $Holiday

from PS_HOLIDAY_DATE
where HOLIDAY_SCHEDULE = $HOlidaySch
and HOLIDAY = $DateOut
end-select
end-procedure Get-Holiday-Sch


!**************************************
begin-procedure Get-Format
#debug show '** Get-Format **'
!**************************************

begin-select
FO.GPBR_PIN_PSLP1_NUM
FO.GPBR_PIN_PSLP2_NUM
FO.GPBR_PIN_PSLP3_NUM
FO.GPBR_EARN_IE
FO.GPBR_DED_IE
FO.EFFDT

 let #PinErnTot     = &FO.GPBR_PIN_PSLP1_NUM
 let #PinDedTot     = &FO.GPBR_PIN_PSLP2_NUM
 let #PinNetPay     = &FO.GPBR_PIN_PSLP3_NUM
 let $EarnInclude   = rtrim(&FO.GPBR_EARN_IE, ' ')
 let $DedInclude    = rtrim(&FO.GPBR_DED_IE, ' ')
 let $FormatEffdt   = rtrim(&FO.EFFDT, ' ')

 let #PinNum = #PinNetPay
 do Get-Pin-Descr
 let $PinNetDes = $PinDescr
 let $PinNetNam = $PinName

from PS_GPBR_PAYSL_FORM FO
where FO.GPBR_FORMAT_ID = $FormatID
and   FO.EFF_STATUS = 'A'
and   FO.EFFDT = (select MAX(FO1.EFFDT) from PS_GPBR_PAYSL_FORM FO1
                  where FO1.GPBR_FORMAT_ID  =  FO.GPBR_FORMAT_ID
                  and   FO1.EFF_STATUS      =  FO.EFF_STATUS
                  and   FO1.EFFDT           <= $EndDt)
end-select
end-procedure Get-Format

!**************************************
begin-procedure Get-Max-Rslt-Seg-Vac
#debug show '** Get-Max-Rslt-Seg-Vac **'
#debug show '   $Emplid:   ' $Emplid
#debug show '   #EmplRcd:  ' #EmplRcd
#debug show '   $CALRUNID: ' $CalRunID
#debug show '   $PayGroup: ' $GPPayGroup
#debug show '   $CALID:    ' $CalID
!**************************************
let #RsltSegNum = 0
let $calIDAlias  = 'SEG'
do where-calID

begin-select
MAX(SEG.RSLT_SEG_NUM) &SEG.RSLT_SEG_NUMV

   let #RsltSegNum = &SEG.RSLT_SEG_NUMV

from PS_GP_RSLT_ACUM_VW SEG
where SEG.EMPLID      = $Emplid
and   SEG.EMPL_RCD    = #EmplRcd
and   SEG.CAL_RUN_ID  = $CalRunID
and   SEG.GP_PAYGROUP = $GPPayGroup
[$whereCalID]
end-select
end-procedure Get-Max-Rslt-Seg-Vac

!**************************************
begin-procedure Get-Acq-Period
#debug show '** Get-Acq-Period **'
#debug show '   $Emplid:   ' $Emplid
#debug show '   $CalRunId: ' $CalRunID
#debug show '   $CalId:    ' $CalID
!**************************************
begin-select distinct
A.CALC_RSLT_VAL

  let $DateAcum = &A.CALC_RSLT_VAL
  let $DateAcum = rtrim($DateAcum, ' ')
  let $DateAcumYear  = substr( $DateAcum, 1,4)
  let $DateAcumMonth = substr( $DateAcum, 5,2)
  let $DateAcumDay   = substr( $DateAcum, 7,2)

  let $AdqDate = $DateAcumYear || '-' || $DateAcumMonth || '-' || $DateAcumDay
  do Convert-from-DTU-Date($AdqDate,$AdqDate)
  do Get-Period-Vac-Dates


from PS_GP_RSLT_ACUM A,
     PS_GP_PIN B
where A.PIN_NUM = B.PIN_NUM
and B.PIN_NM = 'DATA INI AUS'
and A.EMPLID = $Emplid
and A.CAL_RUN_ID = $CalRunId

!and A.CAL_ID in (select distinct BB.CAL_ID
!from  PS_GP_PYE_RUN AA
!     ,PS_GP_PYE_RUN_DTL BB
!     ,PS_GP_CALENDAR CC
!where AA.CAL_RUN_ID = $CalRunId
!and   AA.CAL_RUN_ID = BB.CAL_RUN_ID
!and   BB.GP_PAYGROUP  = CC.GP_PAYGROUP
!and   BB.CAL_ID = CC.CAL_ID
!and   AA.EMPLID = $Emplid
!and   AA.EMPLID = BB.EMPLID
!and   CC.RUN_TYPE =  $RunType)
end-select
end-procedure Get-Period-VacIni

!**************************************
begin-procedure Get-Period-Vac-Dates
#debug show '** Get-Period-Vac-Dates **'
!**************************************
begin-select
A1.ABS_BGN_DT
A1.ABS_END_DT
A1.BEGIN_DT
A1.END_DATE
A1.DAYS

  let $AdqBeginDt = &A1.BEGIN_DT
  let $AdqEndDt   = &A1.END_DATE
  let $BeginDtVac = &A1.ABS_BGN_DT
  let $EndDtVac   = &A1.ABS_END_DT
  let $AcqBeginDt = $BeginDtVac
  let $AcqEndDt   = $EndDtVac
  let $Days       = edit(&A1.DAYS, '999')

from PS_GPBR_LEAVE_PROG A1
where A1.EMPLID = $Emplid
and A1.ABS_BGN_DT = $AdqDate
end-select
end-procedure Get-Period-Vac-Dates

!**************************************
begin-procedure Def-Arrays
#debug show '** Def-Arrays **'
!**************************************
create-array name = ArrayErns size = 100
 field = Ecode:number
 field = Eamt:number
 field = Eunit:number

create-array name = ArrayDed size = 100
 field = Dcode:number
 field = Damt:number
 field = Dunit:number

create-array name=NumberLits size=91 field=NumLit:char
 put 'Um'        into NumberLits(01)
 put 'Dois'      into NumberLits(02)
 put 'Três'      into NumberLits(03)
 put 'Quatro'    into NumberLits(04)
 put 'Cinco'     into NumberLits(05)
 put 'Seis'      into NumberLits(06)
 put 'Sete'      into NumberLits(07)
 put 'Oito'      into NumberLits(08)
 put 'Nove'      into NumberLits(09)
 put 'Dez'       into NumberLits(10)
 put 'Onze'      into NumberLits(11)
 put 'Doze'      into NumberLits(12)
 put 'Treze'     into NumberLits(13)
 put 'Quatorze'  into NumberLits(14)
 put 'Quinze'    into NumberLits(15)
 put 'Dezasseis' into NumberLits(16)
 put 'Dezessete' into NumberLits(17)
 put 'Dezoito'   into NumberLits(18)
 put 'Dezenove'  into NumberLits(19)
 put 'Vinte'     into NumberLits(20)
 put 'Trinta'    into NumberLits(30)
 put 'Quarenta'  into NumberLits(40)
 put 'Cinquenta' into NumberLits(50)
 put 'Sessenta'  into NumberLits(60)
 put 'Setenta'   into NumberLits(70)
 put 'Oitenta'   into NumberLits(80)
 put 'Noventa'   into NumberLits(90)
end-procedure Def-Arrays

!**************************************
begin-procedure Get-Erns-Amt-Inc
#debug show '* Get-Erns-Amt-Inc'
#debug show '  $Emplid:   ' $Emplid
#debug show '  #EmplRcd:  ' #EmplRcd
#debug show '  $CalRunID: ' $CalRunID
#debug show '  $FormatID: ' $FormatID
#debug show '  $FormatEffdt: ' $FormatEffdt
#debug show '  $GPPayGroup: '  $GPPayGroup
#debug show '  $RunType:    ' $RunType
#debug show '  #RsltSegNum: ' #RsltSegNum
#debug show '  $CalId:      ' $CalID
!**************************************
clear-array name = ArrayErns
let #ContErn = 0
let #AmtVal  = 0
let $calIDAlias = 'V1'
do Where-CalID

begin-select
VBB.SEQNUM
V1.PIN_NM
V1.PIN_NUM
SUM(V1.CALC_RSLT_VAL) &V1.CALC_RSLT_VAL
SUM(V1.CALC_ADJ_VAL)  &V1.CALC_ADJ_VAL
SUM(V1.UNIT_RSLT_VAL) &V1.UNIT_RSLT_VAL
SUM(V1.UNIT_ADJ_VAL)  &V1.UNIT_ADJ_VAL

  let #PinNum     = &V1.PIN_NUM
  let #AmtVal     = &V1.CALC_RSLT_VAL
  let #AmtAdj     = &V1.CALC_ADJ_VAL
  let #UnitVal    = &V1.UNIT_RSLT_VAL
  let #UnitAdj    = &V1.UNIT_ADJ_VAL

  let #AmtVal     = #AmtVal + #AmtAdj
  let #UnitVal    = #UnitVal   + #UnitAdj

  if #AmtVal <> 0
     add 1 to #ContErn
     put #PinNum #UnitVal #AmtVal into ArrayErns(#ContErn) Ecode Eunit Eamt
     let #AmtVal  = 0
     let #UnitVal   = 0
     let #AmtAdj    = 0
     let #UnitAdj   = 0
  end-if

from PS_GP_RSLT_ED_VW V1,
     PS_GPBR_PAYSL_F_ER VBB
where VBB.GPBR_FORMAT_ID = $FormatID
and   VBB.EFFDT          = $FormatEffdt
and   VBB.EFF_STATUS     = 'A'
and   VBB.PIN_ERN_NUM    = V1.PIN_NUM
and   V1.PIN_TYPE       = 'ER'
and   V1.EMPLID         = $Emplid
and   V1.EMPL_RCD       = #EmplRcd
and   V1.CAL_RUN_ID     = $CalRunID
and   V1.GP_PAYGROUP    = $GPPayGroup
[$whereCalID]
and  V1.RSLT_SEG_NUM   = #RsltSegNum
group by VBB.SEQNUM, V1.PIN_NM ,V1.PIN_NUM
order by VBB.SEQNUM, V1.PIN_NM ,V1.PIN_NUM
end-select
end-procedure Get-Erns-Amt-Inc

!**************************************
begin-procedure Get-Erns-Amt-Exc
#debug show '** Get-Erns-Amt-Exc **'
!**************************************
clear-array name = ArrayErns
let #ContErn      = 0
let $calIDAlias = 'V2'
do Where-CalID

begin-select
V2.PIN_NM
V2.PIN_NUM
SUM(V2.CALC_RSLT_VAL) &V2.CALC_RSLT_VAL
SUM(V2.CALC_ADJ_VAL)  &V2.CALC_ADJ_VAL
SUM(V2.UNIT_ADJ_VAL)  &V2.UNIT_ADJ_VAL
SUM(V2.UNIT_RSLT_VAL) &V2.UNIT_RSLT_VAL

 let #PinNum      = &V2.PIN_NUM
 let #AmtVal   = &V2.CALC_RSLT_VAL
 let #AmtAdj      = &V2.CALC_ADJ_VAL
 let #UnitVal     = &V2.UNIT_RSLT_VAL
 let #UnitAdj     = &V2.UNIT_ADJ_VAL

 let #AmtVal   = #AmtVal + #AmtAdj
 let #UnitVal     = #UnitVal   + #UnitAdj

  if #AmtVal <> 0
     add 1 to #ContErn
     put #PinNum #UnitVal #AmtVal into ArrayErns(#ContErn) Ecode Eunit Eamt
     let #UnitVal     = 0
     let #AmtVal  = 0
  end-if


from PS_GP_RSLT_ED_VW V2
where V2.PIN_TYPE = 'ER'
and   V2.PIN_NUM   not in (select BB11.PIN_ERN_NUM from PS_GPBR_PAYSL_F_ER BB11
                          where BB11.GPBR_FORMAT_ID = $FormatId
                          and   BB11.EFFDT          = $FormatEffdt
                          and   BB11.EFF_STATUS     = 'A' )
and   V2.EMPLID        = $Emplid
and   V2.EMPL_RCD      = #EmplRcd
and   V2.CAL_RUN_ID    = $CalRunId
and   V2.GP_PAYGROUP   = $GPPayGroup
[$whereCalID]
and   V2.RSLT_SEG_NUM  = #RsltSegNum
group by V2.PIN_NM, V2.PIN_NUM
order by V2.PIN_NM, V2.PIN_NUM
end-select
end-procedure Get-Erns-Amt-Exc

!**************************************
begin-procedure Get-Ded-Amt-Inc
#debug show '** Get-Ded-Amt-Inc **'
!**************************************
clear-array name = ArrayDed
let #ContDed = 0
let $calIDAlias = 'V3'
do Where-CalID

begin-select
VDD.SEQNUM
V3.PIN_NM
V3.PIN_NUM
SUM(V3.CALC_RSLT_VAL) &V3.CALC_RSLT_VAL
SUM(V3.CALC_ADJ_VAL)  &V3.CALC_ADJ_VAL
SUM(V3.UNIT_RSLT_VAL) &V3.UNIT_RSLT_VAL
SUM(V3.UNIT_ADJ_VAL)  &V3.UNIT_ADJ_VAL

  let #PinNum     = &V3.PIN_NUM
  let #AmtVal     = &V3.CALC_RSLT_VAL
  let #AmtAdj     = &V3.CALC_ADJ_VAL
  let #UnitVal    = &V3.UNIT_RSLT_VAL
  let #UnitAdj    = &V3.UNIT_ADJ_VAL

  let #AmtVal     = #AmtVal + #AmtAdj
  let #UnitVal    = #UnitVal   + #UnitAdj

 if #AmtVal <> 0
    add 1 to #ContDed
     put #PinNum #unit_val #AmtVal into ArrayDed(#ContDed) Dcode Dunit Damt
     let #AmtVal  = 0
     let #AmtAdj  = 0
     let #UnitVal = 0
     let #UnitAdj = 0
 end-if

from PS_GP_RSLT_ED_VW V3,
     PS_GPBR_PAYSL_F_DE VDD
where VDD.GPBR_FORMAT_ID = $FormatID
and   VDD.EFFDT          = $FormatEffdt
and   VDD.EFF_STATUS     = 'A'
and   VDD.PIN_DED_NUM    = V3.PIN_NUM
and   V3.PIN_TYPE        = 'DD'
and   V3.EMPLID          = $Emplid
and   V3.EMPL_RCD        = #EmplRcd
and   V3.CAL_RUN_ID      = $CalRunId
and   V3.GP_PAYGROUP     = $GPPayGroup
[$whereCalID]
and   V3.RSLT_SEG_NUM   = #RsltSegNum
group by VDD.SEQNUM, V3.PIN_NM, V3.PIN_NUM
order by VDD.SEQNUM, V3.PIN_NM, V3.PIN_NUM
end-select
end-procedure Get-Ded-Amt-Inc

!**************************************
begin-procedure Get-Ded-Amt-Exc
#debug show '** Get-Ded-Amt-Exc **'
!**************************************
clear-array name = ArrayDed
let #ContDed = 0
let $calIDAlias  = 'V4'
do where-calID

begin-select
V4.PIN_NM
V4.PIN_NUM
SUM(V4.CALC_RSLT_VAL) &V4.CALC_RSLT_VAL
SUM(V4.CALC_ADJ_VAL)  &V4.CALC_ADJ_VAL
SUM(V4.UNIT_RSLT_VAL) &V4.UNIT_RSLT_VAL
SUM(V4.UNIT_ADJ_VAL)  &V4.UNIT_ADJ_VAL

  let #PinNum      = &V4.PIN_NUM
  let #AmtVal      = &V4.CALC_RSLT_VAL
  let #AmtAdj      = &V4.CALC_ADJ_VAL
  let #UnitVal     = &V4.UNIT_RSLT_VAL
  let #UnitAdj     = &V4.UNIT_ADJ_VAL

  let #AmtVal      = #AmtVal  + #AmtAdj
  let #UnitVal     = #UnitVal    + #UnitAdj

  if #AmtVal <> 0
     add 1 to #ContDed
     put #PinNum #unit_val #AmtVal into ArrayDed(#ContDed) Dcode Dunit Damt
     let #AmtVal  = 0
     let #Unitval = 0
     let #AmtAdj  = 0
     let #UnitVal = 0
  end-if

from PS_GP_RSLT_ED_VW V4
where V4.PIN_TYPE = 'DD'
and   V4.PIN_NUM   not in (select CC1.PIN_DED_NUM from PS_GPBR_PAYSL_F_DE CC1
                          where CC1.GPBR_FORMAT_ID = $FormatID
                          and   CC1.EFFDT          = $FormatEffdt
                          and   CC1.EFF_STATUS     = 'A' )
and   V4.EMPLID        = $Emplid
and   V4.EMPL_RCD      = #EmplRcd
and   V4.CAL_RUN_ID    = $CalRunId
and   V4.GP_PAYGROUP   = $PayGroup
[$whereCalID]
and   V4.RSLT_SEG_NUM  = #RsltSegNum
group by V4.PIN_NM, V4.PIN_NUM
order by V4.PIN_NM, V4.PIN_NUM
end-select
end-procedure Get-Ded-Amt-Exc

!**************************************
begin-procedure Get-Accum-Amt
#debug show '* Get-Accum-Amt'
#debug show '  #PinTotal: ' #PinTotal
!**************************************
let #AmtVal = 0
let $calIDAlias  = 'V5'
do where-calID

begin-select
V5.PIN_NM
V5.PIN_NUM
SUM(V5.CALC_RSLT_VAL) &V5.CALC_RSLT_VAL

 let #AmtVal = &V5.CALC_RSLT_VAL


from PS_GP_RSLT_ACUM_VW V5
where V5.PIN_NUM          = #PinTotal
and   V5.EMPLID           = $Emplid
and   V5.EMPL_RCD         = #EmplRcd
and   V5.CAL_RUN_ID       = $CalRunID
and   V5.GP_PAYGROUP      = $GPPayGroup
[$whereCalID]
and   V5.RSLT_SEG_NUM     = #RsltSegNum
group by V5.PIN_NM, V5.PIN_NUM
order by V5.PIN_NM, V5.PIN_NUM
end-select
end-procedure Get-Accum-Amt

!**************************************
begin-procedure Get-Accum-Amt-Rem
#debug show 'Get-Accum-Amt-Rem'
#debug show '#PinTotal: ' #PinTotal
!**************************************
let #AmtVal = 0
let $calIDAlias  = 'VR'
do where-calID

begin-select
VR.PIN_NM
VR.PIN_NUM
SUM(VR.CALC_RSLT_VAL) &VR.CALC_RSLT_VAL

 let #AmtVal = &VR.CALC_RSLT_VAL

from PS_GP_RSLT_ACUM_VW VR
where VR.PIN_NUM          = #PinTotal
and   VR.EMPLID           = $Emplid
and   VR.EMPL_RCD         = #EmplRcd
and   VR.CAL_RUN_ID       = $CalRunID
and   VR.GP_PAYGROUP      = $GPPayGroup
[$whereCalID]
and   VR.RSLT_SEG_NUM     = #RsltSegNum
group by VR.PIN_NM, VR.PIN_NUM
order by VR.PIN_NM, VR.PIN_NUM
end-select
end-procedure Get-Accum-Amt-Rem

!**************************************
begin-procedure  Get-Pin-Descr
#debug show '** Get-Pin-Descr **'
!**************************************
let $PinDescr = ''
let $PinName = ''
  let $pin_code = ''

begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  let $PinName  = rtrim(&PD.PIN_NM, ' ')
  let $PinDescr = rtrim(&PD.DESCR, ' ')
  move &PD.PIN_CODE to $pin_code
  let $pin_code = rtrim($pin_code,' ')
  do Get-Pin-Descr-Lang
from PS_GP_PIN PD
where PD.PIN_NUM = #PinNum
end-select
end-procedure   Get-Pin-Descr

!***************************************
begin-procedure  Get-Pin-Descr-Lang

begin-select
PDL.DESCR
  move &PDL.DESCR to $PinDescr
from PS_GP_PIN_LANG PDL
where PDL.PIN_NUM = #PinNum
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure   Get-Pin-Descr-Lang

!**************************************
begin-procedure  Get-Absences
#debug show '** Get-Absences **'
#debug show '$AbsBeginDt: '  $AbsBeginDt
#debug show '$AbsEndDt: '  $AbsEndDt
!**************************************
let #CountAbs = 0

begin-select
COUNT(*) &countAbs

 let #CountAbs = &countAbs



from PS_GP_ABS_EVENT AA
    ,PS_GP_ABS_TAKE C
where AA.EMPLID = $Emplid
and C.PIN_NUM = AA.PIN_TAKE_NUM
and C.ABS_TYPE_OPTN = 'FTI'
and C.EFFDT = (select MAX(CC.EFFDT)
               from PS_GP_ABS_TAKE CC
               where C.PIN_NUM = CC.PIN_NUM
               and CC.EFFDT <= $AbsEndDt)
and AA.BGN_DT >= $AbsBeginDt
and AA.END_DT <= $AbsEndDt
end-select
end-procedure   Get-Absences

!**************************************
begin-procedure  Get-Company-Descr
#debug show '** Get-Company-Descr **'
#debug show '  $Effdt: ' $Effdt
!**************************************
let $CompanyNm = ''

begin-select
CO.DESCR

  let $CompanyNm  = rtrim(&CO.DESCR, ' ')

from PS_COMPANY_TBL CO
where CO.COMPANY = $Company
and   CO.EFFDT = (select MAX(C.EFFDT)
                  from PS_COMPANY_TBL C
                  where C.COMPANY = CO.COMPANY
                  and C.EFFDT <= $Effdt)
end-select

begin-select
cl.DESCR

  let $CompanyNm   = rtrim(&cl.DESCR, ' ')

from PS_COMPNY_TBL_LANG cl
where cl.COMPANY = $Company
and cl.LANGUAGE_CD = $Curr_language_Cd
and cl.EFFDT = (select MAX(EFFDT)
               from PS_COMPNY_TBL_LANG
               where COMPANY = cl.COMPANY
               and   LANGUAGE_CD = cl.LANGUAGE_CD
               and   EFFDT <=  $Effdt)
end-select
end-procedure   Get-Company-Descr

!**************************************
begin-procedure Create-Notice-Format
#debug show '** Create-Notice-Format **'
!**************************************

 let #ren  = #notice
 do rows

 graphic (#ren, 1,120) box 2 10 5
 alter-printer point-size = #BigPntSize font-type = Proportional font = #StdFont
 print 'Aviso de Férias'               (+1, 50) bold

 graphic (#r16, 1,120) box 11
 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont

 print 'Sr.(a)'                        (+1  , 05)
 print 'Data do Aviso:'                (    , 70)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont
 print $Name                           (    ,15) bold
 if $NoticeDate <> ''
    do Format-DateTime($NoticeDate, $DateOut ,{DEFDMY}, '','')
    print $DateOut                     (    , 85)
 else
    #debug show 'Calculate 30 days after Absence Begin Date'
    #debug show '    $AbsBeginDt :' $AbsBeginDt

    do Convert-To-DTU-Date($AbsBeginDt, $tmpDate)
    do dtu-subtract-days($tmpDate, 30, $tmpDate)
    do dtu-dayofweek#($tmpDate, #WeekDay)
    #debug show '    $tmpDate: ' $tmpDate '    WeekDay : ' #WeekDay

    if #WeekDay = 7
        !saturday substract 1 more day
        do dtu-subtract-days($tmpDate, 1, $tmpDate)
        do dtu-dayofweek#($tmpDate, #WeekDay)
        #debug show '    $tmpDate: ' $tmpDate '    WeekDay : ' #WeekDay
    end-if

    if #WeekDay = 1
        !Sunday substract 2 more days
        do dtu-subtract-days($tmpDate, 2, $tmpDate)
        do dtu-dayofweek#($tmpDate, #WeekDay)
        #debug show '    $tmpDate: ' $tmpDate '    WeekDay : ' #WeekDay
    end-if

    do Convert-From-DTU-Date($tmpDate, $tmpDate)
    do Format-DateTime($tmpDate, $DateOut ,{DEFDMY}, '','')
    print $DateOut                     (    , 85)

 end-if


 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
 print 'CTPS No./Série:/'              (+2  , 05)
 print 'Depto./Seção: - '              (    , 70)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont
 print $CTPS                           (    , 20) bold
 print '/'                             (    , +1) bold
 print $CTPSSerie                      (    , +1) bold
 print $Deptid                         (    , 85) bold
 print $DeptIDDescr                    (    , +2) bold wrap 25 2

 print $NText01                         (#r17a, 05)   wrap 110 4

 graphic (#r17,  5, 20) box 3
 graphic (    , 28, 32) box 3
 graphic (    , 62, 32) box 3
 graphic (    , 97, 20) box 3

 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont

 print 'Referência'                    (#r17, 06)
 print 'Período aquisitivo'            (    , 29)
 print 'Período de gozo'               (    , 63)
 print 'Retorno ao trabalho'           (    , 98)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont


 move #EmplRcd to $Print_EmplRcd '888'
 let $Print_Emplid = $Emplid || ' / ' || $Print_EmplRcd

 print $Print_Emplid                         (+2, 06) bold

 if $AcqBeginDt <> ''
    do Format-DateTime($AcqBeginDt, $DateOut ,{DEFDMY}, '','')
    print $DateOut                        (   , 31) bold
    print 'a'                             (    , +2)
 end-if

 do Format-DateTime($AcqEndDt, $DateOut,{DEFDMY}, '','')
 print $DateOut             (    , +2) bold

 do Format-DateTime($AbsBeginDt, $DateOut,{DEFDMY}, '','')
 print $DateOut                        (    , 65) bold
 print 'a'                             (    , +2)

 do Format-DateTime($AbsEndDt, $DateOut,{DEFDMY}, '','')
 print $DateOut                        (    , +2) bold

 do Format-DateTime($ReturnDt, $DateOut,{DEFDMY}, '','')
 print $DateOut                        (    , 102) bold


 graphic (#r18, 1, 58) box 6
 graphic (#r18,62, 59) box 6

 graphic (+3,10 ,40)  horz-line
 graphic (  ,70 ,40)  horz-line

 print 'Empregador'                    (+1, 25)
 print 'Empregado'                     (, 87)

 graphic (+3, 1,120) box 7

 print $Ntext02                         (+1, 03)   wrap 130 2
 print $NText03                         (+1, 03)   wrap 130 3
 print $NText04                         (+1, 03)   wrap 130 3


 new-page


end-procedure Create-Notice-Format

!**************************************
begin-procedure Get-Employee-Union
#debug show '** Get-Employee-Union **'
#debug show '   $Emplid        : ' $Emplid
#debug show '   &AC.ABS_BGN_DT : ' &AC.ABS_BGN_DT
!**************************************
begin-select
UJ.EMPLID,
UJ.EMPL_RCD
UJ.EFFDT
UJ.EFFSEQ
UJ.UNION_CD

    let $union_cd = rtrim(&UJ.UNION_CD, ' ')

from PS_JOB UJ
where UJ.EMPLID = $Emplid
and UJ.EFFDT = (select MAX(EFFDT)
                from PS_JOB
                where EMPLID = UJ.EMPLID
                and EMPL_RCD = UJ.EMPL_RCD
                and EFFDT <= &AC.ABS_BGN_DT)
and UJ.EFFSEQ = (select MAX(EFFSEQ)
                 from PS_JOB
                 where EMPLID = UJ.EMPLID
                 and EMPL_RCD = UJ.EMPL_RCD
                 and EFFDT = UJ.EFFDT)
end-select

#debug show '   $union_cd        : ' $union_cd


begin-select
UD.UNION_CD
UD.EFFDT
UD.GPBR_DAYS_BEFORE

    if &UD.GPBR_DAYS_BEFORE <= 0
        let #Days_before = 2
    else
        let #Days_before = &UD.GPBR_DAYS_BEFORE
    end-if

from PS_GPBR_UNION_PARM UD
where UD.UNION_CD = $union_cd
and UD.EFFDT = (select MAX(EFFDT)
                from PS_GPBR_UNION_PARM
                where UNION_CD = UD.UNION_CD
                and EFFDT <= &AC.ABS_BGN_DT)
end-select

#debug show '   #Days_before     : ' #Days_before

end-procedure Get-Employee-Union

!**************************************
begin-procedure Create-Receipt-Format
#debug show '** Create-Receipt-Format **'
!**************************************
 do rows

 let #NetPay = #AmtNetTot
 let $AmtNetTot  = edit(#AmtNetTot, '9,999,999.99')

 do Net-Pay-In-Words

 let $AmtNetTot  = edit(#AmtNetTot, '9,999,999.99')

 let $BeginField = rtrim($AmtNetTot,' ')
 do Format-Numbers

 let $CompanyNmU = upper($CompanyNm)
 let $RText01 = 'Recebi de ' || $CompanyNmU || ' a importância líquida de R$' || $EndField || ' ('
 let $RText01 = $RText01 || $NetInWords || '). Conforme demonstrativo acima, referente a '
 let $RText01 = $RText01 || $Days || ' dias de férias.'

!Header
 graphic (#r01, 1,120) box 2 10 5
 alter-printer point-size = #BigPntSize font-type = Proportional font = #StdFont
 print 'Recibo de Férias'              (+1   , 50) bold

!Name
 graphic (#r02b , 1,120) box 4
 graphic (     , 1,120) box 2
 graphic (     , 1, 80) box 4
 graphic (+2   , 1, 40) box 2

 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
 print 'Nome Empregado'                (#r02b, 02)
 print 'ID'                            (    ,82)
 print 'CTPS No./Série'                (+2  , 02)
 print 'Departamento./Seção'           (    , 42)
 print 'Cod. Seção'                    (    , 82)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont

 print $Name                           (#r03, 02) bold

 move #EmplRcd to $Print_EmplRcd '888'
 let $Print_Emplid = $Emplid || ' / ' || $Print_EmplRcd

 print $Print_Emplid                   (    ,82) bold
 print $CTPS                           (+2  , 02) bold
 print '/'                             (    , +1) bold
 print $CTPSSerie                      (    , +1) bold
 print $Deptid                         (    , 82) bold
 print $DeptIDDescr                    (    , 42) bold


 graphic (#r05 , 1,120) box 5
 graphic (     , 1, 40) box 2
 graphic (     , 1, 80) box 2
 graphic (+2   , 1,120) box 1
 graphic (+1   , 1,120) box 2
 graphic (     , 1, 40) box 2
 graphic (     , 1, 80) box 2

 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
 print 'Data Admissão'                 (#r05, 02)
 print 'Período Aquisitivo'            (    , 42)
 print 'Período de Gozo'               (    , 82)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont
 if $HireDt <> ''
     do Format-DateTime($HireDt, $DateOut,{DEFDMY}, '','')
     print $DateOut                     (#r06, 02) bold
 end-if
 if $AbsBeginDt <> ''

       do Format-DateTime($AbsBeginDt, $DateOut,{DEFDMY}, '','')
       print $DateOut                     (#r06, 42) bold
       print 'a'                          (    , +2)
       do Format-DateTime($AbsEndDt, $DateOut,{DEFDMY}, '','')
       print $DateOut                     (    , +2) bold
 end-if

 if $AcqBeginDt <> ''
     do Format-DateTime($AcqBeginDt, $DateOut ,{DEFDMY}, '','')
     print $DateOut                     (#r06, 82) bold
     print 'a'                          (    , +2)
     do Format-DateTime($AcqEndDt, $DateOut,{DEFDMY}, '','')
     print $DateOut                     (    , +2) bold
 end-if


 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
 print 'CÁLCULO DA REMUNERAÇÃO PARA PAGAMENTO DE FÉRIAS' (#r07, 40) bold
 print 'Faltas não justif. no Período Aquisitivo'        (+1, 02)
 print 'Salário'                       ( , 42)
 print 'Remuneração'                   ( , 82)

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont
 print #CountAbs                       (+1, 02) edit 99 bold
 print #Comprate                       (  , 42) edit '$999,999,999.99c' bold
 print #AmtOthPay                      (  , 82) edit '$999,999,999.99c' bold
 let #Comprate = 0

 graphic (#r08, 1,120) box 24

 alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
 print 'DEMONSTRATIVO'                  (  , 50) bold
 print 'Código'                        (+1, 05)
 print 'Verba'                         (  , 22)
 print 'Qtde.'                         (  , 60)
 print 'Proventos'                     (  , 72)
 print 'Descontos'                     (  , 92)

 graphic (  ,03,112)  horz-line


 graphic (#r14, 1,120)  box 8

 alter-printer point-size = #StdPntSize font-type = Proportional font = #StdFont
 print $RText01                         ( +1, 05) wrap 110 3

 graphic (+3 ,60,40)  horz-line
 print '____________,____ '         (  ,  05) bold
 print 'de'                    ()
 print '____________ '         () bold
 print 'de'                    ()
 print '_______ '                 () bold
 print 'Empregado'                     (+1,  75)
 do Format-DateTime($AsOfToday, $DateOut ,{DEFDMY}, '','')

 graphic (#r15, 1,120)  box 2


 move #Days_before to $Days_before '99'

 do DaysToWords

 let $RText02b = $RText02 || $Days_before || ' (' || $DayInWords || ') ' || $RText02a
 print $RText02b                         ( , 05)


 let #notice = #r15 + 6
end-procedure Create-Receipt-Format

!**************************************
begin-procedure Print-Receipt-Dtl
!**************************************
  let #ItemE = 1
  let #ItemD = 1
  let #print_itema = 1
  let #Lines = 1
  let #Limit = 20
  let #ren  = #r06 + #r02 + 3


  while #ItemE <= #ContErn

    get #PinErn #AmtErn #UnitErn from ArrayErns(#ItemE) Ecode Eamt Eunit

    if #Lines > #Limit
       new-page
       let #Lines = 1
       do Create-Receipt-Format
       let #ren  = #r06 + #r02 + 3
    end-if

    let #PinNum = #PinErn
    do Get-Pin-Descr
    let $PinErn = $PinName

    alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
    print $PinErn               (#ren,4,18)
    print $PinDescr             (   ,22,30)
    print #UnitErn              (   ,58)  edit 'b999,99'
    print #AmtErn               (   ,72)  edit '$999,999,999.99c'

    add 1 to #ren
    add 1 to #ItemE
    add 1 to #Lines
  end-while

  while #ItemD <= #ContDed

    get #PinDed #AmtDed #UnitDed from ArrayDed (#ItemD) Dcode Damt Dunit

    if #Lines > #Limit
       new-page
       let #Lines = 1
       do Create-Receipt-Format
       let #ren  = #r06 + #r02 + 3
    end-if

    let #PinNum = #PinDed
    do Get-Pin-Descr
    let $PinDed = $PinName

    alter-printer point-size = #SmlPntSize font-type = Proportional font = #StdFont
    print $PinDed               (#ren,4,18)
    print $PinDescr             (   ,22,30)
    print #UnitDed              (   ,58)  edit 'b999,99'
    print #AmtDed               (   ,92)  edit '$999,999,999.99c'

    add 1 to #ren
    add 1 to #ItemD
    add 1 to #Lines

  end-while

  graphic (#ren,50 ,65)  horz-line
  add 1 to #ren

  let $AmtErnTot = edit(#AmtErnTot, '999,999,999.99c')
  let $AmtErnTot = 'R$'|| $AmtErnTot
  let $AmtDedTot = edit(#AmtDedTot, '999,999,999.99c')
  let $AmtDedTot = 'R$'|| $AmtDedTot
  let $AmtNetTot = edit(#AmtNetTot, '999,999,999.99c')
  let $AmtNetTot = 'R$'|| $AmtNetTot

  print $AmtErnTot              (#ren ,72)  bold
  print $AmtDedTot              (     ,92)  bold
  add 1 to #ren
  print $PinNetNam              (#ren ,04)  bold
  print $PinNetDes              (     ,22)  bold
  print $AmtNetTot              (     ,106) bold

  if $Report = '20'
     new-page
  end-if

end-procedure Print-Receipt-Dtl

!**************************************
begin-procedure rows
!**************************************

 let #r01  = 1
 let #r02  = #r01 * 3
 let #r02b  = #r02 + 1
 let #r03  = #r02 + 2
 let #r05  = #r03 + 4
 let #r06  = #r05 + 1
 let #r07  = #r06 + 1
 let #r08  = #r06 + 4
 let #r09  = #r08 + #r02 + 1
 let #r10  = #r09 + #r02 - 1
 let #r11  = #r10 + #r02
 let #r12  = #r11 + #r02 - 1
 let #r13  = #r12 + #r02
 let #r14  = #r13 + #r02 + #r02  + 4
 let #r15  = #r14 + #r02 + #r02  + 3

 let #r16  = #ren + 3
 let #r17  = #r16 + 7
 let #r17a = #r17 - 2
 let #r18  = #r17 + 5
end-procedure rows


!**************************************
begin-procedure DaysToWords
#debug  show '** DaysToWords **'
#debug  show '   #Days_before  : ' #Days_before
!**************************************

if #Days_before <= 20
    get $NumLit from NumberLits(#Days_before)
end-if



let $DayInWords = $NumLit

#debug  show '   $DayInWords   : ' $DayInWords
end-procedure DaysToWords

!**************************************
begin-procedure Net-Pay-In-Words
#debug  show '** Net-Pay-In-Words **'
#debug  show '   #NetPay  : ' #NetPay
!**************************************
  move #NetPay to $NetPay 099999999.99

  if #NetPay < 1.00
    move 'No' to $NetInWords
  else
    move '' to $NetInWords
    move $NetPay to $Input xxx        !isolate Millions
    if $Input <> '000'
      do Convert-Input
      !LDC Oracle - Begin
      concat ' Milhão(ões) ' with $NetInWords
      !concat ' Milhaes ' with $NetInWords
      !LDC Oracle - End
    end-if
    move $NetPay to $Input ~~~xxx     !isolate Thousands
    move $NetPay to $Input_milhar ~~~xxx
    if $Input <> '000'
      do Convert-Input
      concat ' Mil ' with $NetInWords
    end-if

    !LDC Oracle - Begin
    move $NetPay to $Input_centena1 ~~~~~~x
    move $NetPay to $Input_centena2 ~~~~~~~x
    move $NetPay to $Input_centena3 ~~~~~~~~x

    if $Input_milhar <> '000' and $Input_centena1 <> '0' and $Input_centena2 = '0' and $Input_centena3 = '0'
      concat ' e '        with $NetInWords
    end-if
    !LDC Oracle - End

    move $NetPay to $Input ~~~~~~xxx  !isolate Hundreds
    do Convert-Input-Hundreds

    concat ' Reais' with $NetInWords
    !concat ' e '        with $NetInWords
    move $NetPay to $Input ~~~~~~~~~~xx  !Cents portion
    move $NetPay to $Input_cent ~~~~~~~~~~xx  !Cents portion

    !LDC Oracle - Begin
    if $Input <> '00'
      concat ' e '        with $NetInWords
    end-if
    !LDC Oracle - End

    let  #Input = to_number($Input)
    move #Input to $Input 999

    do Convert-Input-Cent

    !LDC Oracle - Begin
    if $Input_cent <> '00'
    concat ' Centavos' with $NetInWords
  end-if
    !LDC Oracle - End

  end-if
end-procedure Net-Pay-In-Words

begin-procedure Convert-Input
  move $Input to $Index x  !isolate the "hundreds" position
  if $Index <> '0'
      do Append-Literal
      concat 'centos ' with $NetInWords
  end-if
  move $Input to $Index ~xx  !isolate the "tens" and "units"
  do Append-Literal
end-procedure

begin-procedure Convert-Input-Hundreds
  move $Input to $Index x  !isolate the "hundreds" position
  move $Input to $Index1 x
  if $Index <> '0'
      evaluate $Index
        when = '1'
            concat 'Cento ' with $NetInWords
            break
        when = '2'
            concat 'Duzentos ' with $NetInWords
            break
        when = '3'
            concat 'Trezentos ' with $NetInWords
            break
        when = '4'
            concat 'Quatrocentos ' with $NetInWords
            break
        when = '5'
            concat 'Quinhentos ' with $NetInWords
            break
        when = '6'
            concat 'Seiscentos ' with $NetInWords
            break
        when = '7'
            concat 'Setecentos ' with $NetInWords
            break
        when = '8'
            concat 'Oitocentos ' with $NetInWords
            break
        when = '9'
            concat 'Novecentos ' with $NetInWords
            break
      end-evaluate
  end-if
  move $Input to $Index ~xx  !isolate the "tens" and "units"
  !LDC Oracle - Begin
  if $Index1 <> '0' and $Index <> '00'
    concat ' e '        with $NetInWords
  end-if
  !LDC Oracle - End
   do Append-Literal
end-procedure

begin-procedure Convert-Input-Cent
  move $Input to $Index x  !isolate the "hundreds" position
  if $Index <> '0'
      do Append-Literal
  end-if
  move $Input to $Index ~xx  !isolate the "tens" and "units"
  do Append-Literal
end-procedure Convert-Input-Cent

begin-procedure Append-Literal
  move $Index to #Index

  if #Index < 20
    get $NumLit from NumberLits(#Index)
    concat $NumLit with $NetInWords
  else
    move $Index to $Index x  !isolate the "tens" position
    move $Index to #Index2
    multiply 10 times #Index2
    get $NumLit from NumberLits(#Index2)
    concat $NumLit with $NetInWords
    if #Index > #Index2
      subtract #Index2 from #Index
      get $NumLit from NumberLits(#Index)
      concat ' e ' with $NetInWords
      concat $NumLit with $NetInWords
    end-if
  end-if
end-procedure

!**************************************
begin-procedure Format-Numbers
#debug show '** Format-Numbers **'
!**************************************
    let $EndField   = ''
    let $BeginField = rtrim($BeginField,' ')
    let $BeginField = ltrim($BeginField,' ')
    let #LenField   = length($BeginField)
    let #SPACES     = #Long - #LenField
    let #Conter = 1

    while #Conter <= #LenField
        let $Number =  substr($BeginField, #Conter,1)
        if $Number = '.'
           let $EndField = $EndField || ','
        end-if
        if $Number = ','
        let $EndField = $EndField || '.'
        end-if
        if $Number <> ',' and
           $Number <> '.'
        let $EndField = $EndField || $Number
        end-if
        add 1 to #Conter
    end-while

end-procedure Format-Numbers


!***********************************************************************
#include 'datetime.sqc'
#include 'number.sqc'
#include 'readmsgc.sqc'  !Read the Message Catalog Table
#include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'prcsapi.sqc'   !Process API
#include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
!#Include 'getrplng.sqc'  !Get the report language
#include 'datemath.sqc'  !Routines for date
#include 'prcslng.sqc'   !Process Language
#include 'getcombr.sqc'  !Get selected fields from Company Table and Brazil Fields
!#include 'netinwds.sqc'  !Net-Pay-In-Words procedure
#include 'hrsecty.sqc'   !Get SQR Security parameters
!***********************************************************************

