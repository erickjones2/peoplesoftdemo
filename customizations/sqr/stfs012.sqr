!-----------------------------------------------------------------------
! Report Name: STFS012.SQR - Stock Purchase Valuation Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:52:29                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!
!------------------------------------------------------------------------
! Program Descr: The Stock Purchase Valuation Report that will list grant,
! valuation estimates, estimated contributions, and total valuation for 
! Single and Multiple Valuation methods for all Offerings within a 
! specified Purchase Begin and Purchase End Date for a unique Stock ID
! and Stock Plan.  Weighted averages are also totaled and provided at
! the end of the report.
!------------------------------------------------------------------------
! Options:       None
! Tables:        ST_OFFER
!                ST_OFFER_EST
!                ST_OFFR_VAL_DTL
!                ST_VALUE_TBL
!                ST_ESPP_PURCH
!                ST_OFFERING_PD
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptset02.sqc'   !Printer and page-size initialization

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Main-Process
  do Reset
  do Successful-EOJ

  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 7

  #Include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)

  do Format-DateTime ($RC_FromDate, $Date, {DEFDATE}, '', '')
  print $FromLbl                                           (  ,075,004)
  print ':'                                                (  ,   ,001)
  print $Date                                              (  , +1,010)

  do Format-DateTime ($RC_ThruDate, $Date, {DEFDATE}, '', '')
  print $ThruLbl                                           (  ,093,004)
  print ':'                                                (  ,   ,001)
  print $Date                                              (  , +1,010)

  print $Xlatlongname                                      (+1,   ,015) center

  print $ExpectedLbl                                       (+2,040,008)
  print $ValueLbl                                          (  ,093,009)
  print $TotalLbl                                          (  ,114,005)
  print $TotalLbl                                          (  ,135,005)

  print $OfferIDLbl                                        (+1,001,011)
  print $BeginDtLbl                                        (  ,014,010)
  print $EndDtLbl                                          (  ,028,008)
  print $LifeLbl                                           (  ,044,004)
  print $VolatilityLbl                                     (  ,050,010)
  print $InterestLbl                                       (  ,063,008)
  print $DividendLbl                                       (  ,074,008)
  print $PerShareLbl                                       (  ,089,009)
  print $ContributionLbl                                   (  ,106,013)
  print $ValuationLbl                                      (  ,131,009)
  print '-'                                                (+1,001,177) fill Bold

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms

  let $ReportId = 'STFS012'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
    Input $RC_STOCK_ID          Maxlen=10  'Enter Stock ID '  Type=Char
    uppercase $RC_STOCK_ID

    let $RC_STOCK_ID  = rtrim($RC_STOCK_ID ,' ')
    
    while $RC_STOCK_ID  = ''
       input $RC_STOCK_ID       Maxlen=10 'Stock ID is required'  Type=Char
    end-while

    display ''
    display 'Valuation Methods are as follows:'
    display ''
    display '   S = Single Valuation Method'
    display '   M = Multiple Valuation Method'
    display ''
    Input $RC_ST_VALUE_METHOD Maxlen=1   'Enter Valuation Method '  Type=Char
    uppercase $RC_ST_VALUE_METHOD

    let $RC_ST_VALUE_METHOD  = rtrim($RC_ST_VALUE_METHOD ,' ')
    
    while $RC_ST_VALUE_METHOD  = ''
       input $RC_ST_VALUE_METHOD      Maxlen=1 'Valuation Method is required'  Type=Char
    end-while

    display ''
    display 'Report Type is as follows:'
    display ''
    display '   Y = Print Details and Summary'
    display '   N = Print Summary Only'
    display ''
    Input $RC_ST_SUPPR_DTLS     Maxlen=1   'Enter Report Type '  type=char
    uppercase $RC_ST_SUPPR_DTLS

    do Ask-From-Thru-Date
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables

  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',  'STOCK_ID',         $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',  'GRANT',            $GrantLbl,       #DW)
  do Get_Field_Information ('STOCK',  'DATE',             $DateLbl,        #DW)
  do Get_Field_Information ('STOCK',  'PURCHASE',         $PurchaseLbl,    #DW)
  do Get_Field_Information ('STOCK',  'FROM',             $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',  'THRU',             $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',  'EXPECTED',         $ExpectedLbl,    #DW)
  do Get_Field_Information ('STOCK',  'LIFE',             $LifeLbl,        #DW)
  do Get_Field_Information ('STOCK',  'INTEREST',         $InterestLbl,    #DW)
  do Get_Field_Information ('STOCK',  'VOLATILITY',       $VolatilityLbl,  #DW)
  do Get_Field_Information ('STOCK',  'DIVIDEND',         $DividendLbl,    #DW)
  do Get_Field_Information ('STOCK',  'PER_SHARE',        $PerShareLbl,    #DW)
  do Get_Field_Information ('STOCK',  'TOTAL',            $TotalLbl,       #DW)
  do Get_Field_Information ('STOCK',  'WEIGHTED_AVERAGE', $TWghtAvgLbl,    #DW)
  do Get_Field_Information ('STOCK',  'ESTIMATE',         $EstimateLbl,    #DW)
  do Get_Field_Information ('STOCK',  'ESTIMATED',        $EstimatedLbl,   #DW)
  do Get_Field_Information ('STOCK',  'GRANT_DT',         $GrantDtLbl,     #DW)
  do Get_Field_Information ('STOCK',  'VALUE',            $ValueLbl,       #DW)
  do Get_Field_Information ('STOCK',  'VALUATION',        $ValuationLbl,   #DW)
  do Get_Field_Information ('STFS012','REPORT_TITLE1',    $ReportTitle1,   #DW)
  do Get_Field_Information ('STFS012','REPORT_TITLE2',    $ReportTitle2,   #DW)
  do Get_Field_Information ('STFS012','OFFERING_ID',      $OfferIDLbl,     #DW)
  do Get_Field_Information ('STFS012','CONTRIBUTIONS',    $ContributionLbl,#DW)
  do Get_Field_Information ('STFS012','BEGIN',            $BeginDtLbl,     #DW)
  do Get_Field_Information ('STFS012','END',              $EndDtLbl,       #DW)
  do Get_Field_Information ('STFS012','DATA_ERROR_MSG',   $DataErrorMsg,   #DW)

End-Procedure Report-Translation

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let #TotalCount       = 0
  let $StockId          = rtrim($RC_STOCK_ID,' ')
  let $ValuationMethod  = rtrim($RC_ST_VALUE_METHOD,' ')
  let $ReportType       = rtrim($RC_ST_SUPPR_DTLS, ' ')
  let $RC_FromDate      = rtrim($RC_FromDate,' ')
  let $RC_ThruDate      = rtrim($RC_ThruDate,' ')

  move $ValuationMethod to $FieldValue
  move 'ST_VALUE_METHOD' to $Fieldname
  do Read-Translate-Table
  let $Xlatlongname = rtrim($Xlatlongname,' ')

  if $ReportType = 'Y'  !Meaning Print Details
    move $ReportTitle1  to  $ReportTitle
  else
    move $ReportTitle2  to  $ReportTitle
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main process used to select the data, print details and totals
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

  do Select-Offer-Valuation

  if #TotalCount > 0 or $ReportType = 'N'
    do Print-Totals
  end-if

  if #TotalCount = 0
    print $DataErrorMsg                                    (+5,085,040)
  end-if

End-Procedure  Main-Process

!-----------------------------------------------------------------------
! Section: Select-Offer-Valuation
! Descr:   This procedure does the main offer selection for valuation and
!          determines what gets printed based on either the single or
!          multiple method option indicated.  Selects only those whose
!          Asset Price is greater than zero since those that are maybe
!          in the future and would not have an Asset Price.
!-----------------------------------------------------------------------
Begin-Procedure Select-Offer-Valuation

Begin-Select

B.STOCK_ID
B.STOCK_PLAN
B.OFFERING_ID
B.STOCK_PLAN_TYPE
B.PERIOD_BEGIN_DT
B.PERIOD_END_DT
B.ST_VALUE_PER_SHARE
B.GRANT_PRICE
B.ST_EXPECTED_LIFE
B.ST_INTEREST_RATE
B.ST_VOLATILITY
B.ST_DIVIDEND_RATE
C.ST_VALUE_METHOD

  let $OfferingID        = rtrim(&b.offering_id, ' ')
  let $BeginDate         = rtrim(&b.period_begin_dt, ' ')
  let $EndDate           = rtrim(&b.period_end_dt, ' ')
  let $ValueMethod       = rtrim(&c.st_value_method, ' ')
  let #Contributions     = 0

  if $ValuationMethod = 'S'
    do Select-Single-Contributions
  else
    do Select-Multiple-Contributions 
  end-if 

  let #TotalCount        = #TotalCount + 1

  let #ExpectLife        = &b.st_expected_life
  let #Volatility        = &b.st_volatility
  let #InterestRate      = &b.st_interest_rate
  let #DividendRate      = &b.st_dividend_rate
  let #ValuePerShare     = &b.st_value_per_share
  let #PotentialPrice    = &b.grant_price

  if  #Contributions > 0 
    let #PotentialShares   = #Contributions / #PotentialPrice  
    let #TotalValuation    = round(#PotentialShares * #ValuePerShare,2)
  else
    let #PotentialShares   = 0
    let #TotalValuation    = 0
  end-if

  let #Contributions     = round(#Contributions,2)
  let #TotalShares       = #TotalShares + #PotentialShares
  let #ExpectedLifeAW    = #PotentialShares * #ExpectLife
  let #InterestAW        = #PotentialShares * #InterestRate
  let #VolatilityAW      = #PotentialShares * #Volatility
  let #DividendAW        = #PotentialShares * #DivendendRate
  let #ValPerShareAW     = #PotentialShares * #ValuePerShare

  let #TotExpectedLifeAW = #TotExpectedLifeAW + #ExpectedLifeAW
  let #TotInterestAW     = #TotInterestAW     + #InterestAW
  let #TotVolatilityAW   = #TotVolatilityAW   + #VolatilityAW
  let #TotDividendAW     = #TotDividendAW     + #DividendAW
  let #TotValPerShareAW  = #TotValPerShareAW  + #ValPerShareAW
  let #TotalContrib      = #TotalContrib      + #Contributions

  if $ReportType = 'Y'   !Meaning print details
    do Print-Single-Detail
  end-if

from  PS_ST_OFFER_VALUE   A,
      PS_ST_OFFR_VAL_DTL  B,
      PS_ST_VALUE_TBL     C,
      PS_ST_OFFERING_PD   D
where A.STOCK_ID          = $StockId
  and A.STOCK_PLAN_TYPE   = 'E'
  and A.STOCK_ID          = B.STOCK_ID
  and A.STOCK_PLAN        = B.STOCK_PLAN
  and A.STOCK_PLAN_TYPE   = B.STOCK_PLAN_TYPE
  and A.OFFERING_ID       = B.OFFERING_ID
  and A.STOCK_ID          = C.STOCK_ID
  and A.ST_VALUATION_ID   = C.ST_VALUATION_ID
  and A.STOCK_ID          = D.STOCK_ID
  and A.STOCK_PLAN_TYPE   = D.STOCK_PLAN_TYPE
  and A.STOCK_PLAN        = D.STOCK_PLAN
  and A.OFFERING_ID       = D.OFFERING_ID
  and D.OFFERING_STATUS   = 'A'
  and (B.PERIOD_BEGIN_DT >= $RC_Fromdate AND B.PERIOD_BEGIN_DT <= $RC_Thrudate)
  and C.ST_VALUE_METHOD   = $ValuationMethod
  and B.GRANT_PRICE       > 0
order by B.STOCK_ID, B.STOCK_PLAN, B.OFFERING_ID, B.PERIOD_BEGIN_DT, B.PERIOD_END_DT

End-Select

End-Procedure Select-Offer-Valuation

!-----------------------------------------------------------------------
! Section: Select-Single-Contributions
! Descr:   If the Valuation Method is Single then it sums all of the
!          ST_EST_CONTRIB rows and uses that as its total for the 
!          Estimated Contributions amount field.
!-----------------------------------------------------------------------
Begin-Procedure Select-Single-Contributions

  let #EstimateAmt = 0

Begin-Select

F.ST_EST_CONTRIB
F.GRANT_DT
F.PERIOD_END_DT

  let #ActualAmt = 0

  let $SQLQuote        = ''''
  let $WhereDate = ' AND (H.GRANT_DT = ' || $SQLQuote || &f.grant_dt || $SQLQuote ||
                   ' AND H.PERIOD_END_DT = ' || $SQLQuote || &f.period_end_dt || $SQLQuote ||
                   ')'

  if #ActualAmt = 0
    do Select-ESPP-Actual-Amount
    if #ActualAmt = 0
      let #EstimateAmt   = &f.st_est_contrib
      let #Contributions = #Contributions + #EstimateAmt
    else
      let #Contributions = #Contributions + #ActualAmt
    end-if
  end-if

from  PS_ST_OFFER_EST F
where F.STOCK_ID          = &b.stock_id
  and F.STOCK_PLAN_TYPE   = &b.stock_plan_type
  and F.STOCK_PLAN        = &b.stock_plan
  and F.OFFERING_ID       = &b.offering_id
  and F.GRANT_DT          = &b.period_begin_dt

End-Select

End-Procedure Select-Single-Contributions

!-----------------------------------------------------------------------
! Section: Select-Multiple-Contributions
! Descr:   If the Valuation Method is Multiple then it selects just the
!          ST_EST_CONTRIB row for that specific Period Begin and Period 
!          End Date and uses that as its total for the Estimated 
!          Contributions amount field.
!-----------------------------------------------------------------------
Begin-Procedure Select-Multiple-Contributions

  let #EstimateAmt = 0

Begin-Select

G.ST_EST_CONTRIB
G.GRANT_DT
G.PERIOD_END_DT

  let #ActualAmt = 0

  let $SQLQuote        = ''''
  let $WhereDate = ' AND (H.GRANT_DT = ' || $SQLQuote || &g.grant_dt || $SQLQuote ||
                   ' AND H.PERIOD_END_DT = ' || $SQLQuote || &g.period_end_dt || $SQLQuote ||
                   ')'

  if #ActualAmt = 0
    do Select-ESPP-Actual-Amount
    if #ActualAmt = 0
      let #EstimateAmt = &g.st_est_contrib
      let #Contributions = #Contributions + #EstimateAmt
    else
      let #Contributions = #Contributions + #ActualAmt
    end-if
  end-if

from  PS_ST_OFFER_EST G
where G.STOCK_ID        = &b.stock_id
  and G.STOCK_PLAN_TYPE = &b.stock_plan_type
  and G.STOCK_PLAN      = &b.stock_plan
  and G.OFFERING_ID     = &b.offering_id
  and (G.GRANT_DT = &b.period_begin_dt and G.PERIOD_END_DT = &b.period_end_dt)

End-Select

End-Procedure Select-Multiple-Contributions

!-----------------------------------------------------------------------
! Section: Select-ESPP-Actual-Amount
! Descr:   If the Valuation Method is Single then it sums all of the
!          ESPP_PURCHASE_AMT rows, Actual Purchase Amounts,  and uses 
!          that as its total for the Estimated Contributions field.
!-----------------------------------------------------------------------
Begin-Procedure Select-ESPP-Actual-Amount

Begin-Select

SUM(H.ESPP_PURCHASE_AMT) &ActualAmt

  let #ActualAmt        = &ActualAmt

from  PS_ST_ESPP_PURCH H
where H.STOCK_ID        = &b.stock_id
  and H.STOCK_PLAN_TYPE = &b.stock_plan_type
  and H.STOCK_PLAN      = &b.stock_plan
  and H.OFFERING_ID     = &b.offering_id
  and H.CONFIRMED       = 'Y'
  [$WhereDate]

End-Select

End-Procedure Select-ESPP-Actual-Amount

!-----------------------------------------------------------------------
! Section: Print-Single-Detail
! Descr:   Prints the detail line for the Single/Multiple Valuation
!          Method.
!-----------------------------------------------------------------------
Begin-Procedure Print-Single-Detail

  do Format-DateTime ($BeginDate, $BeginDate, {DEFDATE}, '', '')
  do Format-DateTime ($EndDate, $EndDate, {DEFDATE}, '', '')

  print $OfferingID                                        (+1,001,010)
  print $BeginDate                                         (  ,014,010)
  print $EndDate                                           (  ,027,010)
  print #ExpectLife                                        (  ,039,009) edit 99.999999
  print #Volatility                                        (  ,052,008) edit 9.999999
  print #InterestRate                                      (  ,062,009) edit 99.999999
  print #DividendRate                                      (  ,073,009) edit 99.999999
  print #ValuePerShare                                     (  ,084,014) edit $99,999.999999
  print #Contributions                                     (  ,100,019) edit $$$9,999,999.999999
  print #TotalValuation                                    (  ,121,019) edit $$$9,999,999.999999

End-Procedure Print-Single-Detail

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints the final totals for the report. Is used by both the
!          Single and Multiple Valuation Option methods.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  let #AvgExpectLife  = 0
  let #AvgVolatility  = 0
  let #AvgInterest    = 0
  let #AvgDividend    = 0
  let #AvgValPerShare = 0

  if #TotExpectedLifeAW > 0
    let #AvgExpectLife  = #TotExpectedLifeAW / #TotalShares
  end-if

  if #TotInterestAW > 0
    let #AvgInterest    = #TotInterestAW / #TotalShares
  end-if

  if #TotVolatilityAW > 0
    let #AvgVolatility  = #TotVolatilityAW / #TotalShares
  end-if

  if #TotDividendAW > 0
    let #AvgDividend    = #TotDividendAW / #TotalShares
  end-if

  if #TotValPerShareAW > 0
    let #AvgValPerShare = #TotValPerShareAW / #TotalShares
  end-if

  print $TWghtAvgLbl                                       (+2,010,024) bold
  print ':'                                                (  ,   ,001) bold

  print #AvgExpectLife                                     (  ,039,009) bold edit 99.999999
  print #AvgVolatility                                     (  ,052,008) bold edit 9.999999
  print #AvgInterest                                       (  ,062,009) bold edit 99.999999
  print #AvgDividend                                       (  ,073,009) bold edit 99.999999
  print #AvgValPerShare                                    (  ,084,014) bold edit $99,999.999999
  print #TotalContrib                                      (  ,100,019) bold edit $$$9,999,999.999999
  print #TotValPerShareAW                                  (  ,121,019) bold edit $$$9,999,999.999999

End-Procedure Print-Totals

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   ! Gets the report language
