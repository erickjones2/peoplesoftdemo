!*********************************************
!  GPFRSPSL:  Simplified Pay-slip report (FRA)           *
!*********************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                
!           $Bug:  30644433                                            
!                                                                      *
!***********************************************************************

!***********************************************************************
!      Staging tables for Simplified Payslip FRA           *
!      PS_GPFR_SMPL_HDR:   Payslip header details for simplified payslip                                        *
!      PS_GPFR_SMPL_PSLPT: Payslip earnings, deductions of simplified groups                                               *
!      PS_GPFR_SMPL_PSLP:  Payslip earnings, deductions of simplified groups summed for legislation
!         PS_GPFR_SMPL_FTR:   Payslip footer details for simplified payslip                                            *
!***********************************************************************

!#include 'setupdb.sqc'               ! Database specific setup

!***********************************************************************
! Simplified Payslip  - Header                                                        *
!***********************************************************************
begin-procedure simp_payslip_hdr (#TMPJOBINSTANCE,
$PAYSLIPID,
$simp_save_pysl_b_a,
$EMPLID, 
#EMPL_RCD, 
$calrunid, 
$CAL_ID,
#RSLT_SEG_NUM,
$seg_beg_date, 
$seg_end_date,
$contract_begin_dt,
$contract_end_dt,
$company,
$estabid,
$LABOR_AGREEMENT,
$PYE_CALC_STAT,
$BROUILLON,
$SETID_DEPT,
$DEPTID,
$SETID_JOBCODE,
$JOBCODE,
#hours_edt, 
$EMPL_CTG,  
$GP_PAYGROUP,
$SCHEDULE_ID , 
$ROTATION_ID, 
$DESCR1_FRA   ,
$VALUE_1_FRA  ,
$DESCR2_FRA   ,
$VALUE_2_FRA  ,
$DESCR3_FRA   ,
$VALUE_3_FRA  ,
$DESCR4_FRA   ,
$VALUE_4_FRA  ,
$DESCR5_FRA   ,
$VALUE_5_FRA ,
$NATIONAL_ID_FRA,
$DEPT_NAME, 
$JOBCODE_NAME ,
$company_addr, 
$Estab_addr,
$EE_addr,
:$burst_fld)
#debug do Fin-Debug-Msg('simp_payslip_hdr')


let #JOB_INSTANCE = #TMPJOBINSTANCE

#debugd show ' *************Insert Header data  ' #JOB_INSTANCE

let $EMPL_RCD =  to_char(#EMPL_RCD)
let $RSLT_SEG_NUM = to_char(#RSLT_SEG_NUM)
let $job_instance = to_char(#JOB_INSTANCE )

!let $burst_fld = $EMPLID ||'_'||  $EMPL_RCD ||'_'|| $calrunid ||'_'|| $CAL_ID ||'_'||  $GP_PAYGROUP ||'_'||  $RSLT_SEG_NUM
let $burst_fld = $EMPLID ||'_'||  $EMPL_RCD ||'_'||   $job_instance  ||'_'|| $CAL_ID ||'_'||  $GP_PAYGROUP ||'_'||  $RSLT_SEG_NUM

let $burst_fld = replace($burst_fld,' ','_')

if $company = ''
 let $company = ' '
end-if
 
if $estabid = ''
 let $estabid = ' '
end-if

if $LABOR_AGREEMENT = ''
 let $LABOR_AGREEMENT = ' '
end-if

if $SETID_DEPT = ''
 let $SETID_DEPT = ' '
end-if

if $DEPTID = ''
 let $DEPTID = ' '
end-if


if $SETID_JOBCODE = ''
 let $SETID_JOBCODE = ' '
end-if
 
if $JOBCODE = ''
 let $JOBCODE = ' '
end-if

if $EMPL_CTG = ''
 let $EMPL_CTG = ' '
end-if

if $SCHEDULE_ID = ''
 let $SCHEDULE_ID = ' '
end-if

if $ROTATION_ID = ''
 let $ROTATION_ID = ' '
end-if

if $NATIONAL_ID_FRA = ''
 let $NATIONAL_ID_FRA = ' '
end-if

if $DEPT_NAME = ''
 let $DEPT_NAME = ' '
end-if

if $JOBCODE_NAME = ''
 let $JOBCODE_NAME = ' '
end-if

if $DESCR1_FRA  = ''
 let $DESCR1_FRA = ' '
End-If

if $DESCR2_FRA  = ''
 let $DESCR2_FRA = ' '
End-If
if $DESCR3_FRA  = ''
 let $DESCR3_FRA = ' '
End-If
if $DESCR4_FRA  = ''
 let $DESCR4_FRA = ' '
End-If

if $DESCR5_FRA  = ''
 let $DESCR5_FRA = ' '
End-If

if $VALUE_1_FRA  = ''
 let $VALUE_1_FRA = ' '
End-If

if $VALUE_2_FRA  = ''
 let $VALUE_2_FRA = ' '
End-If
if $VALUE_3_FRA  = ''
 let $VALUE_3_FRA = ' '
End-If
if $VALUE_4_FRA  = ''
 let $VALUE_4_FRA = ' '
End-If
if $VALUE_5_FRA  = ''
 let $VALUE_5_FRA = ' '
End-If

let $sql-statement  = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_HDR'
begin-sql on-error=SQL-Error

INSERT INTO PS_GPFR_SMPL_HDR 
 (JOBINSTANCE, 
  GPFR_PAY_SLIP_ID, 
   GPFR_PYSL_B_A       ,
   EMPLID       ,            
   EMPL_RCD ,            
   CAL_RUN_ID      ,
   CAL_ID,
   RSLT_SEG_NUM,   
   SEG_BGN_DT ,            
   SEG_END_DT ,            
   CONTRACT_BEGIN_DT ,
   CONTRACT_END_DT       ,
   COMPANY             ,
   ESTABID,   
   LABOR_AGREEMENT,
   PYE_CALC_STAT ,      
   GPFR_DESCR1,
   SETID_DEPT       ,      
   DEPTID       ,            
   SETID_JOBCODE ,      
   JOBCODE             ,      
   GPFR_71_WORK_HOURS,
   EMPL_CTG       ,      
   GP_PAYGROUP,
   SCHEDULE_ID,
   ROTATION_ID,
   DESCRLONG,
   GPFR_PAYMENT_INFO,
      GPFR_BANK_INFO ,
      GPFR_NET_INFO,
      GPFR_OBSERV_INFO,
   DESCR1_FRA       ,      
   VALUE_1_FRA ,
   DESCR2_FRA ,            
   VALUE_2_FRA       ,      
   DESCR3_FRA ,            
   VALUE_3_FRA ,            
   DESCR4_FRA ,            
   VALUE_4_FRA ,            
   DESCR5_FRA ,            
   VALUE_5_FRA,
   NATIONAL_ID,
   DESCR254,
   DESCR254A,
   DESCR254B        ,
   DESCR254C        ,
   GPFR_EE_MISC1 ,
   GPFR_EE_MISC2 ,
   GPFR_EE_MISC3 ,
   GPFR_EE_MISC4 ,
   GPFR_EE_MISC5 ,
   GPFR_ADDRESS1 ,
   GPFR_ADDRESS2 ,
   GPFR_ADDRESS3 ,
   GPFR_ADDRESS4 ,
   GPFR_ADDRESS5 ,
   GPFR_ADDRESS6 ,
   GPFR_ADDRESS7 ,
   GPFR_ADDRESS8 ,
   GPFR_ADDRESS9 ,            
   GPFR_ADDRESS10  ,
   GPFR_ADDRESS11  ,
   GPFR_ADDRESS12  ,
   GPFR_ADDRESS13  ,
   GPFR_ADDRESS14  ,
   GPFR_ADDRESS15  ,
   GPFR_ADDL_DTLS  ,
   GPFR_ADDL_DTLS1 ,
   GPFR_ADDL_DTLS2 ,
   GPFR_ADDL_DTLS3 ,
   GPFR_ADDL_DTLS4 ,
   GPFR_ADDL_DTLS5 ,
   GPFR_ADDL_DTLS6 ,
   GPFR_ADDL_DTLS7 ,
   GPFR_ADDL_DTLS8 ,
   GPFR_ADDL_DTLS9 ,
   GPFR_BURSTING_FLD
  )   
 VALUES 
(#TMPJOBINSTANCE,
$PAYSLIPID,
$simp_save_pysl_b_a,
$EMPLID, 
#EMPL_RCD, 
$calrunid, 
$CAL_ID,
#RSLT_SEG_NUM,
$seg_beg_date, 
$seg_end_date,
$contract_begin_dt,
$contract_end_dt,
$company,
$estabid,
$LABOR_AGREEMENT,
$PYE_CALC_STAT,
$BROUILLON,
$SETID_DEPT,
$DEPTID,
$SETID_JOBCODE,
$JOBCODE,
#hours_edt,
$EMPL_CTG,
$GP_PAYGROUP,
$SCHEDULE_ID , 
$ROTATION_ID,
' ',
' ',
' ' ,
0,
' ',
$DESCR1_FRA   ,
$VALUE_1_FRA  ,
$DESCR2_FRA   ,
$VALUE_2_FRA  ,
$DESCR3_FRA   ,
$VALUE_3_FRA  ,
$DESCR4_FRA   ,
$VALUE_4_FRA  ,
$DESCR5_FRA   ,
$VALUE_5_FRA ,
$NATIONAL_ID_FRA,
$DEPT_NAME,
$JOBCODE_NAME ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
$company_addr,
$Estab_addr,
$EE_addr,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,            
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
' ' ,
$burst_fld 
);

END-SQL 



#debugd show 'Mobile Payslip -   Header Data , $_fra_mob_pslp ' $_fra_mob_pslp ' $fra_mob_pslp  ' $fra_mob_pslp  ' $GPinit_mob_payslp '$GPinit_mob_payslp ' $_GPinit_mob_payslp ' $_GPinit_mob_payslp

IF $_fra_mob_pslp = 'Y' or $fra_mob_pslp = 'Y'   !if mobile payslip is enabled 
        
    #debugd show 'Mobile Payslip -  Insert Header Data ' $EMPLID ' Company '$company ' PSLP_ID ' $CAL_ID  '_'  $GP_PAYGROUP  '_'  $EMPL_RCD  '_' $RSLT_SEG_NUM '_'$EMPLID 
    let $sql-statement = 'GPFRPSL.sqc, Mobile Payslip -  Insert Header Data '
    
    LET MPSLP_HDR.EMPLID(0) = $EMPLID
    LET MPSLP_HDR.CAL_RUN_ID(0) = $calrunid
    LET MPSLP_HDR.EMPL_RCD(0) = #EMPL_RCD
    LET MPSLP_HDR.GP_PAYGROUP(0) = $GP_PAYGROUP
    LET MPSLP_HDR.CAL_ID(0) = $CAL_ID
    LET MPSLP_HDR.ORIG_CAL_RUN_ID(0) = $calrunid
    LET MPSLP_HDR.RSLT_SEG_NUM(0) = #RSLT_SEG_NUM
    LET MPSLP_HDR.GP_PSLP_SRCPRODUCT(0) = 'GPFRA'
    
    String $CAL_ID $GP_PAYGROUP #EMPL_RCD #RSLT_SEG_NUM by '_' into $mpayslip_id
      
    LET MPSLP_HDR.GP_PSLP_ID(0) = rtrim($mpayslip_id, ' ')
    !$CAL_ID || '_' || $GP_PAYGROUP || '_' || $EMPL_RCD || '_' || $RSLT_SEG_NUM !|| '_'|| $EMPLID 
    LET MPSLP_HDR.SEG_BGN_DT(0) = $seg_beg_date
    LET MPSLP_HDR.SEG_END_DT(0) = $seg_end_date
    LET MPSLP_HDR.PRD_BGN_DT(0) = $seg_beg_date
    LET MPSLP_HDR.PRD_END_DT(0) = $seg_end_date
    LET MPSLP_HDR.PYMT_DT(0) = $_PYMT_DT
    LET MPSLP_HDR.GP_MPSLP_GROSS(0) = 0
    LET MPSLP_HDR.GP_MPSLP_NET(0) = #NET_INFO
    LET MPSLP_HDR.GP_COMPANY(0) = $company
    do Get-RUN-TYPE 
    #debugd show '$_RUN_TYPE ' $_eRUN_TYPE 
    LET MPSLP_HDR.RUN_TYPE(0) = $_eRUN_TYPE 

    
DO insert_mpslp_hdr_row

END-IF



end-procedure
!***********************************************************************
! Update Simplified Payslip Header                                                        *
!***********************************************************************
begin-procedure update_smpl_pslp_hdr(#TMPJOBINSTANCE,$CALRUNID,$EMPLID,#EMPL_RCD,$GP_PAYGROUP,#RSLT_SEG_NUM,$SCHEDULE_ID,$ROTATION_ID,$WORK_SCHED,$PAYMENT_INFO,$BANK_INFO,#NET_INFO,$OBSERVATION_INFO)
#debug do Fin-Debug-Msg('update_smpl_pslp_hdr')

let $sql-statement = 'GPFRPSL.sqc, Update SIMPLIFIED PSLP Header '

#debugd show ' ***********Emplid ' $EMPLID ' Schedule ' $SCHEDULE_ID ' Rotation ' $ROTATION_ID 

BEGIN-SQL on-error=SQL-Error

UPDATE PS_GPFR_SMPL_HDR
SET SCHEDULE_ID = $SCHEDULE_ID,
      ROTATION_ID = $ROTATION_ID,
      DESCRLONG = $WORK_SCHED,
      GPFR_PAYMENT_INFO = $PAYMENT_INFO,
      GPFR_BANK_INFO = $BANK_INFO,
      GPFR_NET_INFO = #NET_INFO,
      GPFR_OBSERV_INFO = $OBSERVATION_INFO
      WHERE  JOBINSTANCE = #TMPJOBINSTANCE
          AND CAL_RUN_ID            = $CALRUNID
        AND EMPLID            = $EMPLID
        AND EMPL_RCD          = #EMPL_RCD
        AND GP_PAYGROUP       = $GP_PAYGROUP
        AND RSLT_SEG_NUM      = #RSLT_SEG_NUM;
      
END-SQL



end-procedure



!***********************************************************************
! Simplified Payslip Body                                                        *
!***********************************************************************
begin-procedure simp_payslip(#TMPJOBINSTANCE,
$SIMP_SAVE_PYSL_B_A,
$EMPLID, 
#EMPL_RCD, 
$CALRUNID, 
$GP_PAYGROUP,
#RSLT_SEG_NUM,
#PIN_EE, 
#PIN_ER, 
$SEG_BEG_DATE, 
$SEG_END_DATE, 
#ELEMENT_ORDER,
$DESCR, 
#BASE,
#RATE,
#EE_PER,
#DED_EE,
#EARN_EE,
#ER_PER, 
#DED_ER,
$descr_retro)
#debug do Fin-Debug-Msg('simp_payslip')

#debugd show '**************Insert PS_GPFR_SMPL_PSLPT Temp data before grouping for simplified payslip'
let $sql-statement = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_PSLPT Temp data before grouping for simplified payslip '
#debugd show 'GP_PAYGROUP: ' $GP_PAYGROUP ', EMPLID: ' $EMPLID
begin-sql on-error=SQL-Error

INSERT INTO PS_GPFR_SMPL_PSLPT 
(   JOBINSTANCE,
    GPFR_PYSL_B_A,
    EMPLID,
    EMPL_RCD,
    CAL_RUN_ID,
    GP_PAYGROUP,
    RSLT_SEG_NUM,
    GPFR_PIN_NUM_EE,
    GPFR_PIN_NUM_ER,
    SLICE_BGN_DT,
    SLICE_END_DT,
      GPFR_ELEMENT_ORDER,
      DESCRLONG,
    BASE_RSLT_VAL,
    UNIT_RSLT_VAL,
    GPFR_PERC_EE,
    GPFR_DED_EE,
    GPFR_ERN_EE,
    GPFR_PERC_ER,
    GPFR_AMT_ER,
      DESCR25
) VALUES 
(#TMPJOBINSTANCE,
$SIMP_SAVE_PYSL_B_A,
$EMPLID, 
#EMPL_RCD, 
$CALRUNID, 
$GP_PAYGROUP,
#RSLT_SEG_NUM,
#PIN_EE, 
#PIN_ER, 
$SEG_BEG_DATE, 
$SEG_END_DATE, 
#ELEMENT_ORDER,
$DESCR, 
#BASE,
#RATE,
#EE_PER,
#DED_EE,
#EARN_EE,
#ER_PER, 
#DED_ER,
$descr_retro
);

END-SQL 



end-procedure



!***********************************************************************
! Simplified Payslip_grouped                                                         *
!***********************************************************************
begin-procedure simp_payslip_grouped(#JOB_INSTANCE, $PAYSLIPID, $seg_beg_date, $seg_end_date)
#debug do Fin-Debug-Msg('simp_payslip_grouped')

#debugd show '***************** Insert PS_GPFR_SMPL_PSLP Grouped data points ' 
let $sql-statement = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_PSLP Grouped data points '
begin-sql on-error=SQL-Error

INSERT INTO PS_GPFR_SMPL_PSLP
(   JOBINSTANCE,
    GPFR_PYSL_B_A,
    EMPLID,
    EMPL_RCD,
    CAL_RUN_ID,
    GP_PAYGROUP,
    SLICE_BGN_DT,
    SLICE_END_DT,
      GP_ELN_SET,
      PIN_ELEM_GRP_NUM,
      DESCRLONG,
      GPFR_NEW_GROUP,
      DESCR25,
    BASE_RSLT_VAL,
    UNIT_RSLT_VAL,
    GPFR_PERC_EE,
    GPFR_DED_EE,
    GPFR_ERN_EE,
    GPFR_PERC_ER,
    GPFR_AMT_ER      
)
(
SELECT  TED.JOBINSTANCE,TED.GPFR_PYSL_B_A, TED.EMPLID, TED.EMPL_RCD, TED.CAL_RUN_ID, TED.GP_PAYGROUP, TED.SLICE_BGN_DT, TED.SLICE_END_DT, TED.GP_ELN_SET, TED.SPSLP_PRINT_ORDER,' ', 'N',' ',
TED.BASE_RSLT_VAL, SUM(TED.UNIT_RSLT_VAL),SUM(TED.GPFR_PERC_EE), SUM(TED.GPFR_DED_EE),SUM(TED.GPFR_ERN_EE), SUM(TED.GPFR_PERC_ER), SUM(TED.GPFR_AMT_ER)
 FROM 
 ( 
SELECT  DISTINCT ED.JOBINSTANCE,ED.GPFR_PYSL_B_A, ED.EMPLID, ED.EMPL_RCD, ED.CAL_RUN_ID, ED.GP_PAYGROUP, ED.SLICE_BGN_DT, ED.SLICE_END_DT, 
'SIMPL_PSLP' GP_ELN_SET, EL.GPFR_ELEMENT_ORDER SPSLP_PRINT_ORDER,  
ED.BASE_RSLT_VAL, ED.UNIT_RSLT_VAL,ED.GPFR_PERC_EE, ED.GPFR_DED_EE,ED.GPFR_ERN_EE, ED.GPFR_PERC_ER, ED.GPFR_AMT_ER,
A.GPFR_ELEMENT_ORDER, A.DESCR ,A.GPFR_PIN_NUM_EE, A.GPFR_PIN_NUM_ER 
FROM PS_GPFR_PAY_SLIP_1 A,  
PS_GPFR_SMPL_PSLPT ED, 
PS_GPFR_SPSLP_ED EL
WHERE  ED.JOBINSTANCE = #JOB_INSTANCE
     AND A.GPFR_PIN_NUM_EE = ED.GPFR_PIN_NUM_EE 
     AND  A.GPFR_PIN_NUM_ER = ED.GPFR_PIN_NUM_ER  
     AND (EL.PIN_NUM = ED.GPFR_PIN_NUM_EE
      OR EL.PIN_NUM = ED.GPFR_PIN_NUM_ER)
   AND EL.GPFR_PAY_SLIP_ID = $PAYSLIPID 
   AND  A.GPFR_PAY_SLIP_ID = EL.GPFR_PAY_SLIP_ID 
   !ORDER BY A.GPFR_ELEMENT_ORDER
   ) TED,  PS_GPFR_SPSLP_GRP EG 
      WHERE EG.GPFR_PAY_SLIP_ID  = $PAYSLIPID
      AND EG.GPFR_ELEMENT_ORDER =  TED.SPSLP_PRINT_ORDER
    GROUP BY TED.JOBINSTANCE, TED.GPFR_PYSL_B_A,TED.EMPLID, TED.EMPL_RCD, TED.CAL_RUN_ID, TED.GP_PAYGROUP, TED.SLICE_BGN_DT, TED.SLICE_END_DT, TED.GP_ELN_SET, TED.SPSLP_PRINT_ORDER,
    TED.BASE_RSLT_VAL
);
END-SQL 




#debugd show '******************** Insert separate rows into PS_GPFR_SMPL_PSLP  group labels (group title) '
let $sql-statement = 'GPFRPSL.sqc, Insert separate rows into  PS_GPFR_SMPL_PSLP  group labels (group title) '
BEGIN-SQL   on-error=SQL-Error
INSERT INTO PS_GPFR_SMPL_PSLP
(   JOBINSTANCE,
    GPFR_PYSL_B_A,
    EMPLID,
    EMPL_RCD,
    CAL_RUN_ID,
    GP_PAYGROUP,
    SLICE_BGN_DT,
    SLICE_END_DT,
      GP_ELN_SET,
      PIN_ELEM_GRP_NUM,
      DESCRLONG,
    BASE_RSLT_VAL,
    UNIT_RSLT_VAL,
    GPFR_PERC_EE,
    GPFR_DED_EE,
    GPFR_ERN_EE,
    GPFR_PERC_ER,
    GPFR_AMT_ER,
      GPFR_NEW_GROUP,
    DESCR25
)
(SELECT DISTINCT A.JOBINSTANCE, 
 A.GPFR_PYSL_B_A, 
 A.EMPLID, 
 A.EMPL_RCD, 
 A.CAL_RUN_ID,
 A.GP_PAYGROUP,
 CAST(($seg_beg_date) AS CHAR(10)),  !A.SLICE_BGN_DT, 
 CAST(($seg_end_date) AS CHAR(10)),  !A.SLICE_END_DT, 
 'SIMPL_PSLP', 
 B.GPFR_ELEMENT_ORDER ,  
 ' ', !B.DESCRLONG,
 0,
 0,
 0,
 0,
 0,
 0,
 0 ,
 'Y',
 ' '
 FROM PS_GPFR_SPSLP_GRP B,
 (SELECT DISTINCT JOBINSTANCE, GPFR_PYSL_B_A, EMPLID, EMPL_RCD, CAL_RUN_ID, GP_PAYGROUP,
         !SLICE_BGN_DT, SLICE_END_DT, 
             GP_ELN_SET, PIN_ELEM_GRP_NUM 
    FROM PS_GPFR_SMPL_PSLP) A
WHERE A.JOBINSTANCE = #JOB_INSTANCE
  AND A.GP_ELN_SET = 'SIMPL_PSLP'
  AND A.GP_PAYGROUP = $GP_PAYGROUP
  AND B.GPFR_PAY_SLIP_ID = $PAYSLIPID
  AND B.GPFR_ELEMENT_ORDER = (SELECT MAX(B1.GPFR_ELEMENT_ORDER) FROM PS_GPFR_SPSLP_GRP B1
                              WHERE B1.GPFR_ELEMENT_ORDER < A.PIN_ELEM_GRP_NUM
                              AND  B1.GPFR_PAY_SLIP_ID =  B.GPFR_PAY_SLIP_ID
                              !AND B1.GROUP_ID = B.GROUP_ID 
                              AND B1.GPFR_NEW_GROUP = 'Y' )
  );
  END-SQL
  
#debugd show ' Update Simplified Group descrlong ' 
let $sql-statement = 'GPFRPSL.sqc, Update PS_GPFR_SMPL_PSLP   - descrlong '
BEGIN-SQL
UPDATE PS_GPFR_SMPL_PSLP 
SET DESCRLONG = (SELECT A.DESCRLONG FROM PS_GPFR_SPSLP_GRP A WHERE A.GPFR_ELEMENT_ORDER = PIN_ELEM_GRP_NUM 
                     AND A.GPFR_PAY_SLIP_ID = $PAYSLIPID)
WHERE JOBINSTANCE = #JOB_INSTANCE;
END-SQL


#debugd show '**********************Insert PS_GPFR_SMPL_PSLP Ungrouped data points '
let $sql-statement = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_PSLP Ungrouped data points '
BEGIN-SQL   on-error=SQL-Error
INSERT INTO PS_GPFR_SMPL_PSLP
(   JOBINSTANCE,
    GPFR_PYSL_B_A,
    EMPLID,
    EMPL_RCD,
    CAL_RUN_ID,
    GP_PAYGROUP,
    SLICE_BGN_DT,
    SLICE_END_DT,
      GP_ELN_SET,
      PIN_ELEM_GRP_NUM,
      DESCRLONG,
    BASE_RSLT_VAL,
    UNIT_RSLT_VAL,
    GPFR_PERC_EE,
    GPFR_DED_EE,
    GPFR_ERN_EE,
    GPFR_PERC_ER,
    GPFR_AMT_ER,
      GPFR_NEW_GROUP,
      DESCR25
)
(
     SELECT  ED.JOBINSTANCE,ED.GPFR_PYSL_B_A, ED.EMPLID, ED.EMPL_RCD, ED.CAL_RUN_ID, ED.GP_PAYGROUP, ED.SLICE_BGN_DT, ED.SLICE_END_DT,' ', ED.GPFR_ELEMENT_ORDER, ED.DESCRLONG, 
ED.BASE_RSLT_VAL, ED.UNIT_RSLT_VAL,ED.GPFR_PERC_EE, ED.GPFR_DED_EE,ED.GPFR_ERN_EE, ED.GPFR_PERC_ER, ED.GPFR_AMT_ER, 'N', ED.DESCR25
 FROM  PS_GPFR_PAY_SLIP_1 A,  
PS_GPFR_SMPL_PSLPT ED
WHERE  ED.JOBINSTANCE = #JOB_INSTANCE
       AND  A.GPFR_PAY_SLIP_ID  = $PAYSLIPID 
      AND A.GPFR_PIN_NUM_EE = ED.GPFR_PIN_NUM_EE 
     AND  A.GPFR_PIN_NUM_ER = ED.GPFR_PIN_NUM_ER 
     AND NOT EXISTS ( SELECT 1 FROM PS_GPFR_SPSLP_ED EL 
                      WHERE (EL.PIN_NUM = ED.GPFR_PIN_NUM_EE
                              OR
                              EL.PIN_NUM = ED.GPFR_PIN_NUM_ER ) 
                      AND EL.GPFR_PAY_SLIP_ID  =  $PAYSLIPID
                        )    
);
END-SQL 

IF $_fra_mob_pslp = 'Y'   or $fra_mob_pslp = 'Y'

#debugd show ' Inside ED $_fra_mob_pslp ' $_fra_mob_pslp  ' $fra_mob_pslp ' $fra_mob_pslp
!Mobile Payslip Earnings and DEDUCTIONS


   do mobile_payslip_ern_ded
END-IF

end-procedure


!***********************************************************************
! Simplified Payslip Footer                                                        *
!***********************************************************************
begin-procedure simp_payslip_footer(#TMPJOBINSTANCE,
$EMPLID, 
#EMPL_RCD, 
$CALRUNID, 
$CAL_ID,
$GP_PAYGROUP,
#RSLT_SEG_NUM,
$SEG_BEG_DATE, 
$SEG_END_DATE, 
#COLUMN_NO,
$DESCR2 ,
#PIN_NUM_CUR,
#AMOUNT_CUR ,
#PIN_NUM_YTD,
#AMOUNT_YTD,
$CURRENCY_CD2)
#debug do Fin-Debug-Msg('simp_payslip_footer')

#debugd show '*******************insert footer data** ' $EMPLID
let $sql-statement = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_FTR '

begin-sql on-error=SQL-Error

INSERT INTO PS_GPFR_SMPL_FTR 
(     JOBINSTANCE,
        EMPLID,                   
      EMPL_RCD,             
      CAL_RUN_ID ,            
      CAL_ID ,      
      GP_PAYGROUP ,
        RSLT_SEG_NUM,
      SEG_BGN_DT ,            
      SEG_END_DT ,              
      GPFR_COLUMN_NO,       
      DESCR1_FRA ,            
      PIN_NUM ,                  
      CALC_RSLT_VAL,       
      GPFR_PIN_NUM ,      
        CALC_RSLT_VAL1 ,        
      CURRENCY_CD         
) VALUES 
(#TMPJOBINSTANCE,
$EMPLID, 
#EMPL_RCD, 
$CALRUNID, 
$CAL_ID,
$GP_PAYGROUP,
#RSLT_SEG_NUM,
$SEG_BEG_DATE, 
$SEG_END_DATE, 
#COLUMN_NO,
$DESCR2 ,
#PIN_NUM_CUR,
#AMOUNT_CUR ,
#PIN_NUM_YTD,
#AMOUNT_YTD,
$CURRENCY_CD2
);

END-SQL 
end-procedure








!**********************************************************************
! store_pay_slip
!
!**********************************************************************

begin-procedure store_pay_slip
#debug do Fin-Debug-Msg('store_pay_slip')

  let #PRows = 0
  let #save_line_after = 0
  let #save_element_order = 0
  
  
  #debugd show 'Store Body data'
   

  while #PRows <  #No_of_Rows + 1
    if bodylines.GPFR_ELEMENT_ORDER(#PRows) = 0
       let #PRows = #PRows + 1
       goto NOSTORE
    end-if
      
      
      LET #pin_ee = bodylines.GPFR_PIN_NUM_EE(#PRows)
      LET #pin_er = bodylines.GPFR_PIN_NUM_ER(#PRows)
      
    let $DESCR        = bodylines.DESCR(#PRows)
    let #Pyl_Instance = bodylines.INSTANCE(#PRows)
    let $Pyl_Instance = edit(#Pyl_Instance,'99')
    if #Pyl_Instance <> 0
      let $DESCR      =  $DESCR || ' - ' ||   $Pyl_Instance
    end-if
    let #BASE         = bodylines.BASE(#PRows) + bodylines.UNIT(#PRows)
    let #RATE         = bodylines.RATE(#PRows)
    let #EE_PER       = bodylines.EE_PER(#PRows)
    let #EARN_EE      = bodylines.EARN_EE(#PRows) - bodylines.DED_EE(#PRows)
    let #DED_EE       = 0
    if  #EARN_EE      < 0
       let #DED_EE    = - #EARN_EE
       let #EARN_EE   = 0
    end-if
    let #ER_PER       = bodylines.ER_PER(#PRows)
    let #DED_ER       = bodylines.DED_ER(#PRows)
    let $CURRENCY_CD2 = bodylines.CURRENCY_CD2(#PRows)
    if (#BASE = 0 AND #DED_EE = 0  AND #EARN_EE = 0 AND #DED_ER = 0 )
        add 1 to #PRows
        goto NOSTORE
    end-if
    if bodylines.RETRO(#PRows) = 1
       let $ADJUST_IND = bodylines.ADJUST(#PRows)
       let $SLICE_DT   = bodylines.SLICE_END_DT(#PRows)   !saman
    else
       let $ADJUST_IND = ' '
       let $SLICE_DT   = ' '
    end-if

    !let #line_before = bodylines.GPFR_LINES_BEFORE(#PRows) + 1
    !let #line_after  = bodylines.GPFR_LINES_AFTER(#PRows)

!  Addition of a condition for the blank lines
        let #element_order = bodylines.GPFR_ELEMENT_ORDER(#PRows)
        !if #element_order = #save_element_order
        !   let #line_before = 1
        !   let #save_line_after = 0
        !end-if

        !let #save_element_order = #element_order

     if bodylines.GPFR_PYSL_B_A(#PRows) <> $SAVE_PYSL_B_A
            and #PRows < #No_of_Rows + 1
       if $SAVE_PYSL_B_A <> $null
                do  store_footing_desc
                do  get_footing
                do store_accums
               ! new-page
                let $SAVE_PYSL_B_A = bodylines.GPFR_PYSL_B_A(#PRows)
                do store_body_heading
                do get_schedule
               ! let #body_line = {bodyline}
               ! alter-printer  font=3 point-size=7
       end-if
       let $SAVE_PYSL_B_A = bodylines.GPFR_PYSL_B_A(#PRows)
     end-if

        !let #body_line = #body_line + #line_before + #save_line_after

        if $CURRENCY_CD2 <> ' '
           let $DESCR = substr($DESCR,1,28)
        end-if

        !print $DESCR               (#body_line, 2)
        !print $CURRENCY_CD2        (, 30)
            
            let $descr_retro = ' '
            
        if $SLICE_DT <> ' '
                   if $ADJUST_IND = 'Y'
                !PRINT 'Rétro'       (, 34)
                        let $descr_retro = 'Retro' 
                   else
                !PRINT $SLICE_DT     (, 34)   edit mm/yyyy
                        
                        let $descr_retro = edit($SLICE_DT ,'mm/yyyy')
                        #debugd show $descr_retro
                   end-if
         end-if

        !print #BASE                (, 42)   edit B,999,999.99
        !print #RATE                (, 55)   edit B,999,999.99

        if #EE_PER  < 100
          do PS_SQR_Trunc (#EE_PER, 2, #EE_PER_trunc)
          if #EE_PER < 10 and #EE_PER <> #EE_PER_trunc
              !print #EE_PER        (, 67)   edit 9.999
          else
             ! print #EE_PER        (, 67)   edit B9.99
          end-if
        else
          !print #EE_PER            (, 68)   edit 999
        end-if

       ! print #DED_EE              (, 72)   edit B,999,999.99
        !print #EARN_EE             (, 85)   edit B,999,999.99

        if #ER_PER  < 100
          do PS_SQR_Trunc (#ER_PER, 2, #ER_PER_trunc)
          if #ER_PER < 10 and #ER_PER <> #ER_PER_trunc
             ! print #ER_PER        (, 97)   edit 9.999
          else
             ! print #ER_PER        (, 97)   edit B9.99
          end-if
        else
          !print #ER_PER            (, 98)   edit 999
        end-if

       ! print #DED_ER              (,103)   edit B,999,999.99
         
       let $slicebgndt = bodylines.SLICE_BGNDT(#PRows)
         let $sliceenddt = bodylines.SLICE_ENDDT(#PRows)
        
         
#debugd show '---------------------' $EMPLID '----' #PIN_NUM  
#debugd show $DESCR '    ' #BASE  '    '  #RATE  '    '   #EE_PER  '    '  #DED_EE  '    '  #EARN_EE  '    ' #ER_PER  '    ' #DED_ER  '   '$slicebgndt  '   '$sliceenddt  

do simp_payslip(#TMPJOBINSTANCE,
$simp_save_pysl_b_a,
$EMPLID, 
#EMPL_RCD, 
$calrunid, 
$GP_PAYGROUP,
#RSLT_SEG_NUM,
#pin_ee, 
#pin_er, 
 $slicebgndt,  !$seg_beg_date, 
$sliceenddt,  ! $seg_end_date, 
#element_order,
$DESCR, 
#BASE,
#RATE,
#EE_PER,
#DED_EE,
#EARN_EE,
#ER_PER, 
#DED_ER,
$descr_retro)







        !let #save_line_after = #line_after
            
        add 1 to #PRows

        !if #body_line > {maxbodyline}
         ! and #PRows < #No_of_Rows + 1
          !      print 'Page suivante...'  (88, 122)
          !      new-page
          !      do print_body_heading
          !      let #body_line = {bodyline}
          !      alter-printer  font=3 point-size=7
        !end-if

  NOSTORE:
  


  end-while

  


end-procedure





!***************************************************************
begin-procedure  store_footing_desc
#debug do Fin-Debug-Msg('store_footing_desc')

!print accumulators' heading

        !alter-printer  font=3 point-size=6
       ! graphic (80,1,128) box 3
       ! print 'Cumuls'   (80,2) bold
        !print 'Mensuel'  (+1,2) bold
        !print 'Annuel'   (+1,2) bold


!print bank info

     if $save_pysl_b_a = 'B' or $save_pysl_b_a = $null
        !alter-printer  font=3 point-size=10
        !graphic (77,1,98) box 2
        let $edit_line = $pymt_dt_out ! Mode de règlement : Le 
        if isblank($PAYMENT_MTHD_NM) = 0
           let $edit_line = $edit_line || ' par ' || $PAYMENT_MTHD_NM
        end-if
        !print $edit_line                  (77,  2)
            
            let $payment_info = $edit_line
            
        if $BANK_CD       <> ''
        or $BRANCH_EC_CD  <> ''
        or $ACCOUNT_EC_ID <> ''
        or $CHECK_DIGIT   <> ''
           let $edit_line = 'Compte ' || $BANK_CD ||' '|| $BRANCH_EC_CD ||' '|| $ACCOUNT_EC_ID ||' '|| $CHECK_DIGIT
           !print $edit_line               (+1,  2)
               let $bank_info = $edit_line
        end-if
        
                        
!print net pay

       !graphic (77,104,25) box 2
       !print 'NET A PAYER'               (77,105) bold
       !print #sum_net_val                (+1, 106) edit $9,999,999.99 bold
         
         let #net_info = #sum_net_val 

!print observation

       !alter-printer  font=3 point-size=6
       !graphic (84,1,63)  box 4
       if isblank($observ_id1) = 0
          if isblank($GPFR_OBSERVATION1_B) = 0
             !print   $GPFR_OBSERVATION1_B         (84, 2)
                   let $observation = $GPFR_OBSERVATION1_B
          end-if
          if isblank($GPFR_OBSERVATION2_B) = 0
             !print   $GPFR_OBSERVATION2_B         (+1, 2)
                  let $observation = $observation||';'||$GPFR_OBSERVATION2_B 
          end-if
          if isblank($GPFR_OBSERVATION3_B) = 0
             !print   $GPFR_OBSERVATION3_B         (+1, 2)
                   let $observation = $observation||';'||$GPFR_OBSERVATION3_B 
          end-if
          if isblank($GPFR_OBSERVATION4_B) = 0
             !print   $GPFR_OBSERVATION4_B         (+1, 2)
                   let $observation = $observation||';'||$GPFR_OBSERVATION4_B 
          end-if
       end-if
    else
       !alter-printer  font=3 point-size=6
       !graphic (84,1,63)  box 4
       if isblank($observ_id2) = 0
          if isblank($GPFR_OBSERVATION1_A) = 0
             !print   $GPFR_OBSERVATION1_A         (84, 2)
                   let $observation = $GPFR_OBSERVATION1_A
          end-if
          if isblank($GPFR_OBSERVATION2_A) = 0
             !print   $GPFR_OBSERVATION2_A         (+1, 2)
                   let $observation = $observation||';'||$GPFR_OBSERVATION2_A
          end-if
          if isblank($GPFR_OBSERVATION3_A) = 0
             !print   $GPFR_OBSERVATION3_A         (+1, 2)
                   let $observation = $observation||';'||$GPFR_OBSERVATION3_A
          end-if
          if isblank($GPFR_OBSERVATION4_A) = 0
             !print   $GPFR_OBSERVATION4_A         (+1, 2)
                   let $observation = $observation||';'||$GPFR_OBSERVATION4_A
          end-if
       end-if
    end-if

      let $observation_info = $observation
      
!print accum 11/14

       !graphic (84,68,61) box 4

       !print 'Exercice en cours'   (+1, 69)
       !print 'Exercice précédent'  (+1, 69)

       !graphic (+1,68,61) box 1
       !print 'Repos compensateur exerçable' (,69)



!constant

      !alter-printer  font=4 point-size=8
      !print 'Document à conserver sans limitation de durée'  (88, ) center
        
        
        do update_smpl_pslp_hdr(#TMPJOBINSTANCE,$calrunid,$EMPLID,#EMPL_RCD,$GP_PAYGROUP,#RSLT_SEG_NUM,$SCHEDULE_ID,$ROTATION_ID,$work_sched,$payment_info,$bank_info,#net_info,$observation_info) !update header

end-procedure




begin-procedure  store_accums
#debug do Fin-Debug-Msg('store_accums')
    
    LET #PRINTORD = 0 !Print order for mobile payslip PTD
    LET #PRINTORD_YTD = 100 !Print order for mobile payslip YTD
    
    !alter-printer  font=3 point-size=6
    let #i = 1
        while #i < {MaxRowsAcu}
           let #column_no  = #i
           let $descr2      = ACCUMTITLE.DESCR1_FRA(#i)
       if isblank($descr2) = 0
           let #amount_cur = ACCUMLINES.AMOUNT_CUR(#i)
           let #amount_ytd = ACCUMLINES.AMOUNT_YTD(#i)
               let #pin_num_cur  = ACCUMTITLE.PIN_NUM_CUR(#i)
               let #pin_num_ytd  = ACCUMTITLE.PIN_NUM_YTD(#i)
              
do simp_payslip_footer(#TMPJOBINSTANCE,
$EMPLID, 
#EMPL_RCD, 
$calrunid, 
$CAL_ID,
$GP_PAYGROUP,
#RSLT_SEG_NUM,
$seg_beg_date, 
$seg_end_date, 
#column_no,
$descr2 ,
#pin_num_cur,
#amount_cur ,
#pin_num_ytd,
#amount_ytd,
$CURRENCY_CD2) ! sqc footer
               


!Mobile Payslip Accumulator

IF $_fra_mob_pslp  = 'Y'   or $fra_mob_pslp = 'Y'

   #debugd show ' Inside Accumulators $_fra_mob_pslp ' $_fra_mob_pslp  ' $fra_mob_pslp ' $fra_mob_pslp
   
   LET #ED_PinNum = #pin_num_cur
   do Get-Element-Group
   do Get-Section_Number
   do Get_ACM_DATE

    LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) = 'GPFRA'
    LET MPSLP_ACUM.GP_PSLP_ID(0) = MPSLP_HDR.GP_PSLP_ID(0)
    LET MPSLP_ACUM.RSLT_SEG_NUM(0) = #RSLT_SEG_NUM
    LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = #EMPL_RCD
    LET MPSLP_ACUM.ACM_FROM_DT(0) = $ACM_FROM_DT
    LET MPSLP_ACUM.ACM_THRU_DT(0) = $ACM_THRU_DT
    LET MPSLP_ACUM.SEQ_NUM8(0) = #RSLT_SEG_NUM
    LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
    LET MPSLP_ACUM.SLICE_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.SLICE_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.SEG_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.SEG_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.PRD_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.PRD_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.PYMT_DT(0) = $PYMT_DT
    LET MPSLP_ACUM.RUN_TYPE(0) =MPSLP_HDR.RUN_TYPE(0)
    LET MPSLP_ACUM.GP_MPSLP_SECTION(0) = $GP_section_nm
    
    LET MPSLP_ACUM.COUNTRY(0) = 'FRA'
    IF $descr2 = 'Simplified'
      LET $descrft = 'Total verse parl'||' '' '||'employeur'
      LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) = SUBSTR($descrft ,1,30) 
    ELSE
      LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =  $descr2
    END-IF
    #debugd show 'Accumulator STG #pin_num_cur ' #pin_num_cur ' #pin_num_ytd ' #pin_num_ytd ' $descr2 '$descr2
    
    if #pin_num_cur <> 0
    LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) = 'Mensuel'
    LET #PRINTORD = #PRINTORD + 1
    LET MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0) = #PRINTORD
    LET MPSLP_ACUM.PIN_NUM(0) = #pin_num_cur
    LET MPSLP_ACUM.CALC_RSLT_VAL(0) = #amount_cur
    LET MPSLP_ACUM.CALC_VAL(0) = #amount_cur
    do insert_mpslp_acum_row
    end-if
    
    if #pin_num_ytd <> 0
    
    LET #ED_PinNum = #pin_num_ytd
    do Get-Element-Group
    do Get-Section_Number
    do Get_ACM_DATE
        
    LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) =   'Annuel'  
    LET #PRINTORD_YTD = #PRINTORD_YTD + 1
    LET MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0) = #PRINTORD_YTD
    
    LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) = 'GPFRA'
    LET MPSLP_ACUM.GP_PSLP_ID(0) = MPSLP_HDR.GP_PSLP_ID(0)
    LET MPSLP_ACUM.RSLT_SEG_NUM(0) = #RSLT_SEG_NUM
    LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = #EMPL_RCD
    LET MPSLP_ACUM.ACM_FROM_DT(0) = $ACM_FROM_DT
    LET MPSLP_ACUM.ACM_THRU_DT(0) = $ACM_THRU_DT
    LET MPSLP_ACUM.SEQ_NUM8(0) = #RSLT_SEG_NUM
    LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
    LET MPSLP_ACUM.SLICE_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.SLICE_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.SEG_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.SEG_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.PRD_BGN_DT(0) = $seg_beg_date
    LET MPSLP_ACUM.PRD_END_DT(0) = $seg_end_date
    LET MPSLP_ACUM.PYMT_DT(0) = $PYMT_DT
    LET MPSLP_ACUM.RUN_TYPE(0) =MPSLP_HDR.RUN_TYPE(0)
    LET MPSLP_ACUM.GP_MPSLP_SECTION(0) = $GP_section_nm
    LET MPSLP_ACUM.COUNTRY(0) = 'FRA'
    
    IF $descr2 = 'Simplified'
      LET $descrft= 'Allegement de Cotisation'
      LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) = SUBSTR($descrft ,1,30) 
      LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) = 'Mensuel' !Change the subsection name when it is Allegement de Cotisation
    ELSE
      
      if $descr2 = 'Entitlemt' or $descr2 = 'Taken' or $descr2 = 'Balance'
       LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =  $descr2||' precedent'
      else  
       LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =  $descr2||' YTD'
      end-if
    END-IF
    
    #debugd show 'Accumulator STG #pin_num_cur ' #pin_num_cur ' #pin_num_ytd ' #pin_num_ytd ' $descr2 '$descr2

    LET MPSLP_ACUM.PIN_NUM(0) = #pin_num_ytd
    LET MPSLP_ACUM.CALC_RSLT_VAL(0) = #amount_ytd
    LET MPSLP_ACUM.CALC_VAL(0) = #amount_ytd
    do insert_mpslp_acum_row
    end-if
    
END-IF
               
           end-if
           add 1 to #i
        end-while
          let $descr2 = ''
          
          
          
          
!Update mobile payslip header data 
IF $fra_mob_pslp = 'Y' or $_fra_mob_pslp = 'Y' 

do Get_GROSS_AMT
#debugd show '#_Gross is  ' #_Gross ' #Gross is ' #Gross
LET $PAYSLIP_ID = MPSLP_HDR.GP_PSLP_ID(0)
    BEGIN-SQL on-error=SQL-Error
    
    UPDATE PS_GP_MPSLP_STGHDR
    SET GP_MPSLP_NET = #NET_INFO,
        GP_MPSLP_GROSS = #Gross
    WHERE EMPLID            = $EMPLID
        AND EMPL_RCD          = #EMPL_RCD
        AND CAL_RUN_ID        = $CALRUNID
        AND GP_PAYGROUP       = $GP_PAYGROUP
        AND RSLT_SEG_NUM      = #RSLT_SEG_NUM
        AND GP_PSLP_ID = $PAYSLIP_ID;
    
    END-SQL
end-if



end-procedure

!***********************************************************************


!********************************************************************
begin-procedure store_body_heading
#debug do Fin-Debug-Msg('store_body_heading')

            
            #debugd show 'Store Header data' 
       ! print-image company_logo (1,1)

        !alter-printer  font=3 point-size=10

!company

let $company_addr = ' '
let $Estab_addr = ' '
let $EE_addr = ' '

        !print $descr_C            ( 2, 35) bold
               let $company_addr = $descr_C
        if isblank($address1)      = 0
           !print   $address1      (+1, 35)
               let $company_addr = $company_addr ||';'||$address1
        end-if
        if isblank($address2)      = 0
           !print   $address2      (+1, 35)
               let $company_addr = $company_addr ||';'||$address2
        end-if
        if isblank($address3)      = 0
           !print   $address3      (+1, 35)
               let $company_addr = $company_addr ||';'||$address3
        end-if
        if isblank($address4)      = 0
           !print   $address4      (+1, 35)
               let $company_addr = $company_addr ||';'||$address4
        end-if
        if isblank($city_postal_c) = 0
           !print   $city_postal_c (+1, 35)
               let $company_addr = $company_addr ||';'||$city_postal_c
        end-if
            
!period info

       ! print $BROUILLON          (2, 109)
       ! graphic (3,104,26) box 5

        if $save_pysl_b_a = 'B' or $SAVE_PYSL_B_A = $null
               let $simp_save_pysl_b_a = 'B'
          !print 'Bulletin de paie' (4 ,105)   bold
        else
          !print 'Annexe'           (4 ,105)   bold
              let $simp_save_pysl_b_a = 'A'
        end-if

! Dates must be formatted for Informix
        do Format-DateTime($seg_beg_date, $seg_beg_date_out, {DEFDMY}, '', '')
        do Format-DateTime($seg_end_date, $seg_end_date_out, {DEFDMY}, '', '')

        !print 'Paie du'           (+1,105)
        !print  $seg_beg_date_out  (  ,116)
        !print  'au'               (+1,112)
        !print  $seg_end_date_out  (  ,116)

!establishment

        !print 'Siret'             (9,35)
        !print $siret              ( ,43)
        !print $nic_code           ( ,56)
        
            
            let $Estab_addr = 'Siret'||' '||$siret||' '||$nic_code||' '||'Ape'||' '||$ape ||';'||'Organisme S.S.' ||' '||$URSSAF_CD||' '||'/'||' '||$URSSAF_NM ||' '||'/'||' '||$URSSAF_S_DESCR||';'||$LABOR_DESCR 
            

!employee misc.

        !print 'No. S.S.'           (14,5)
        !print $NATIONAL_ID_FRA     (,20)
        !print 'Matricule'          (+1, 5)
        

!employee address

        !graphic (14,64,61) box 10
        !print      $empl_name      (16, 65)
            let $EE_addr = $empl_name||' '
        let $empl_name=''
            
        if isblank($empl_addr1)  = 0
           !print   $empl_addr1     (+1, 65)
               let $EE_addr = $EE_addr ||';'||$empl_addr1
           let $empl_addr1=''
        end-if

        if isblank($empl_addr2)  = 0
          !print    $empl_addr2     (+1, 65)
              let $EE_addr = $EE_addr ||';'||$empl_addr2
          let $empl_addr2=''
        end-if

        if isblank($empl_addr3)  = 0
          !print    $empl_addr3     (+1, 65)
              let $EE_addr = $EE_addr ||';'||$empl_addr3
          let $empl_addr3=''
        end-if

        if isblank($empl_addr4)  = 0
          !print    $empl_addr4     (+1 ,65)
              let $EE_addr = $EE_addr ||';'||$empl_addr4
          let $empl_addr4=''
        end-if

        if isblank($city_postal) = 0
           !print   $city_postal    (+1, 65)
               let $EE_addr = $EE_addr ||';'||$city_postal
           let $city_postal=''
        end-if
     #Debugd show 'emplid: ' $EMPLID 
     #Debugd Show 'Company ' $company_addr ' Establishment ' $Estab_addr ' Employee Id ' $EMPLID ' Employee Addr ' $EE_addr


!body heading
    
            
            
            do simp_payslip_hdr(#TMPJOBINSTANCE,
$PAYSLIPID,
$simp_save_pysl_b_a,
$EMPLID, 
#EMPL_RCD, 
$calrunid, 
$CAL_ID,
#RSLT_SEG_NUM,
$seg_beg_date, 
$seg_end_date,
$contract_begin_dt,
$contract_end_dt,
$company,
$estabid,
&LABOR_AGREEMENT,
$PYE_CALC_STAT,
$BROUILLON,
&SETID_DEPT,
&DEPTID,
&SETID_JOBCODE,
&JOBCODE,
#hours_edt,
$EMPL_CTG,
$GP_PAYGROUP,
$SCHEDULE_ID , 
$ROTATION_ID,
$DESCR1_FRA   ,
$VALUE_1_FRA  ,
$DESCR2_FRA   ,
$VALUE_2_FRA  ,
$DESCR3_FRA   ,
$VALUE_3_FRA  ,
$DESCR4_FRA   ,
$VALUE_4_FRA  ,
$DESCR5_FRA   ,
$VALUE_5_FRA ,
$NATIONAL_ID_FRA,
$DEPT_NAME,
$JOBCODE_NAME ,
$company_addr,
$Estab_addr,
$EE_addr,
$file_name_burst_fld) ! sqc header



end-procedure
!**********************************************************


!********************************************************************
begin-procedure chk_mobile_payslip($calrunid, #TMPJOBINSTANCE)
#debug do Fin-Debug-Msg('chk_mobile_payslip')

do init-mpslp($calrunid)
show 'Self Service  - Mobile payslip initiated  -  ' $_GPinit_mob_payslp
#debugd show  ' $GPinit_mob_payslp ' $GPinit_mob_payslp ' $_GPinit_mob_payslp ' $_GPinit_mob_payslp

do clean_mpslp_records ($calrunid, $GPwhere_clause)

IF $GPinit_mob_payslp = 'Y'   OR $_GPinit_mob_payslp = 'Y'   
 Let $_fra_mob_pslp = 'Y'!Assign 'Y' to a global variable from a local procedure
 !LET $fra_mob_pslp = 'Y'
end-if
            
end-procedure
!**********************************************************
!******************************************************************
begin-procedure Get-Element-Group
#debug do Fin-Debug-Msg('Get-Element-Group')

LET #PARENT_PIN = 0

let $sql-statement = 'GPFRPSL.sqr,Select Get-Element-Group'
begin-SELECT DISTINCT ON-ERROR=SQL-Error
A.PIN_NUM    &PIN_NM

    LET #PARENT_PIN = &PIN_NM

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfDate)
and A.PIN_ELEM_NUM = #ED_PinNum
end-SELECT

end-procedure


!******************************************************************
!***    Get section number
!******************************************************************
begin-procedure Get-Section_Number
#debug do Fin-Debug-Msg('Get-Section_Number')

let $GP_section_nm  = ' '
let $sql-statement = 'GPFRPSL.sqr,Select Get-Section_Number'
begin-SELECT DISTINCT ON-ERROR=SQL-Error
A.PIN_TYPE  &PIN_TYP

    IF &PIN_TYP = 'ER'
        LET $GP_section_nm = '10'
    END-IF
    IF &PIN_TYP = 'DD'
        LET $GP_section_nm = '20'
    END-IF
    IF &PIN_TYP = 'AC'
        LET $GP_section_nm = '40'
    END-IF
       

FROM PS_GP_PIN A
WHERE   A.PIN_NUM = #ED_PinNum
end-SELECT


end-procedure Get-Section_Number



!******************************************************************
!***    Get_SP_pin_num
!******************************************************************
begin-procedure Get_SP_pin_num
#debug do Fin-Debug-Msg('Get-Get_SP_pin_num')

let #SP_PIN_NUM = 0
let $sql-statement = 'GPFRPSL.sqr,Select Get-Get_SP_pin_num'
begin-SELECT ON-ERROR=SQL-Error LOOPS = 1
A.PIN_NUM

 LET #SP_PIN_NUM = &A.PIN_NUM


FROM PS_GPFR_SPSLP_ED A
end-SELECT


end-procedure Get_SP_pin_num
!******************************************************************

!******************************************************************
!***    Get_GROSS_AMT
!******************************************************************
begin-procedure Get_GROSS_AMT
#debug do Fin-Debug-Msg('Get_GROSS_AMT')

#debugd show 'Get Gross from runtype' $eRUN_TYPE

  let $sql-statement = 'GPFRPSL.sqr,Select Get_GROSS_AMT'
begin-SELECT ON-ERROR=SQL-Error
A.PIN_PRC_NUM
 LET #PIN_PRC_NUM = &A.PIN_PRC_NUM
  #debugd show ' #PIN_PRC_NUM '#PIN_PRC_NUM

from PS_GP_RUN_TYPE_DTL A
WHERE A.RUN_TYPE = $eRUN_TYPE
end-SELECT

  let $sql-statement = 'GPFRPSL.sqr,Select,PS_GP_PROCESS, Get_GROSS_AMT'
begin-SELECT ON-ERROR=SQL-Error
A.PIN_GROSS_NUM  &GROSS_PIN
 
  LET #GROSS_PIN = &GROSS_PIN
  #debugd show ' #GROSS_PIN  ' #GROSS_PIN 
from PS_GP_PROCESS A 
WHERE A.PIN_NUM = #PIN_PRC_NUM
AND  A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_GP_PROCESS B
                  WHERE B.PIN_NUM = A.PIN_NUM
                   AND B.EFFDT <=$seg_end_date)
END-SELECT
 
  #debugd show ' #TMPJOBINSTANCE ' #TMPJOBINSTANCE ' $EMPLID ' $EMPLID ' #EMPL_RCD ' #EMPL_RCD ' $calrunid ' $calrunid ' $CAL_ID ' $CAL_ID ' #RSLT_SEG_NUM ' #RSLT_SEG_NUM !' #GROSS_PIN ' #GROSS_PIN
  let $sql-statement = 'GPFRPSL.sqr,Select,PS_GPFR_SMPL_FTR, Get_GROSS_AMT'
begin-SELECT ON-ERROR=SQL-Error
F.CALC_RSLT_VAL &CALC_RSLT_VAL

 LET #Gross  = &CALC_RSLT_VAL
 #debugd show ' #Gross is '#Gross 

FROM PS_GPFR_SMPL_FTR F 
WHERE F.JOBINSTANCE = #TMPJOBINSTANCE
  AND F.EMPLID = $EMPLID
  AND F.EMPL_RCD = #EMPL_RCD
  AND F.CAL_RUN_ID = $calrunid
  AND F.CAL_ID = $CAL_ID
  !AND F.GP_PAYGROUP      = $GP_PAYGROUP
  AND F.RSLT_SEG_NUM = #RSLT_SEG_NUM
  AND F.PIN_NUM = #GROSS_PIN!20029
end-SELECT

end-procedure Get_GROSS_AMT
!******************************************************************


!******************************************************************
!***    Get_ACM_DATE
!******************************************************************
begin-procedure Get_ACM_DATE
#debug do Fin-Debug-Msg('Get_ACM_DATE')

LET $ACM_FROM_DT = $seg_beg_date
LET $ACM_THRU_DT = $seg_end_date
 
#debugd show 'Get ACm Dates'
  let $sql-statement = 'GPFRPSL.sqr,Select Get_ACM_DATE'
begin-SELECT ON-ERROR=SQL-Error
A.ACM_FROM_DT
A.ACM_THRU_DT

 LET $ACM_FROM_DT = &A.ACM_FROM_DT
 LET $ACM_THRU_DT = &A.ACM_THRU_DT
 #debugd show ' Acum Pin num ' #ED_PinNum ' Acum from dt ' $ACM_FROM_DT ' Acum thru dt ' $ACM_THRU_DT

FROM PS_GP_RSLT_ACUM A
WHERE A.EMPLID = $EMPLID
AND A.CAL_RUN_ID =$calrunid
AND A.EMPL_RCD = #EMPL_RCD
AND A.CAL_ID = $CAL_ID
AND A.GP_PAYGROUP = $GP_PAYGROUP
AND A.RSLT_SEG_NUM = #RSLT_SEG_NUM
AND A.PIN_NUM = #ED_PinNum
AND A.ACM_FROM_DT <=$seg_beg_date
AND A.ACM_THRU_DT >=$seg_end_date
end-SELECT


end-procedure Get_ACM_DATE



!************************************************************
!******************get_simplified_group_name    ******************************
!************************************************************
begin-procedure get_simplified_group_name   
#debug do Fin-Debug-Msg('get_simplified_group_name')

#debugd show ' get_simplified_group_name ' 
  let $sql-statement = 'GPFRPSL.sqr,Select get_simplified_group_name'
begin-SELECT ON-ERROR=SQL-Error
A.DESCRLONG  &DESCRL

 LET $DESCRL = SUBSTR(&DESCRL,1,30)
 #debugd show 'Simplified Group name is ' $DESCRL


FROM PS_GPFR_SPSLP_GRP A
WHERE A.GPFR_ELEMENT_ORDER = (SELECT MAX(A1.GPFR_ELEMENT_ORDER)
                                FROM PS_GPFR_SPSLP_GRP A1
                               WHERE A1.GPFR_PAY_SLIP_ID = A.GPFR_PAY_SLIP_ID
                                 AND A1.GPFR_NEW_GROUP = 'Y'
                                 AND A1.GPFR_ELEMENT_ORDER < #SP_PIN_ELEM_GRP_NUM  )
                                 END-SELECT

end-procedure get_simplified_group_name 
!************************************************************
 
!************************************************************
!******************get_retro_dates  ******************************
!************************************************************
begin-procedure get_retro_dates 
#debug do Fin-Debug-Msg('get_retro_dates')

#debugd show ' get_retro_dates ' 

  let $sql-statement = 'GPFRPSL.sqr,Select get_retro_dates'
begin-SELECT ON-ERROR=SQL-Error
PT.SLICE_BGN_DT  
PT.SLICE_END_DT

 LET  $Retro_bgn_dt = &PT.SLICE_BGN_DT
 LET  $Retro_end_dt = &PT.SLICE_END_DT
 #debugd show 'Retro begin dt ' $Retro_bgn_dt 'Retro end date ' $Retro_end_dt

FROM PS_GPFR_SMPL_PSLPT PT 
WHERE PT.JOBINSTANCE = &jobinst
AND PT.GPFR_PYSL_B_A = &gpfr_b_a
AND PT.EMPLID = $SP_EMPLID
AND PT.EMPL_RCD = $SP_EMPL_RCD
AND PT.CAL_RUN_ID  = $SP_CAL_RUN_ID
AND PT.RSLT_SEG_NUM = #SH_RSLT_SEG_NUM 
AND PT.GPFR_ELEMENT_ORDER = #SP_PIN_ELEM_GRP_NUM
AND PT.DESCR25 = $DESCR25
AND GPFR_ERN_EE = #SP_GPFR_ERN_EE
AND GPFR_DED_EE = #SP_GPFR_DED_EE
AND GPFR_AMT_ER = #SP_GPFR_AMT_ER
END-SELECT

end-procedure get_retro_dates   
!************************************************************

!******************************************************************
!***    mobile_payslip_ern_ded
!******************************************************************
begin-procedure mobile_payslip_ern_ded
#debug do Fin-Debug-Msg('mobile_payslip_ern_ded')

LET $PREV_EMPLID = ' '
LET #PRINT_ORDER = 0


let $sql-statement = 'GPFRPSL.sqc, Insert PS_GPFR_SMPL_PSLP SP 1'
BEGIN-SELECT   on-error=SQL-Error
SP.JOBINSTANCE    &jobinst
SP.GPFR_PYSL_B_A  &gpfr_b_a
SP.EMPLID     
SP.EMPL_RCD   
SP.CAL_RUN_ID
SP.SLICE_BGN_DT
SP.SLICE_END_DT
SP.DESCRLONG
SP.BASE_RSLT_VAL
SP.UNIT_RSLT_VAL
SP.GPFR_PERC_EE
SP.GPFR_DED_EE
SP.GPFR_ERN_EE
SP.GPFR_PERC_ER
SP.GPFR_AMT_ER
SP.GP_ELN_SET
SP.PIN_ELEM_GRP_NUM
SP.DESCR25
SH.GP_PAYGROUP
SH.CAL_ID
SH.SEG_BGN_DT
SH.SEG_END_DT
SH.RSLT_SEG_NUM
MH.PYMT_DT
MH.RUN_TYPE
MH.ORIG_CAL_RUN_ID
MH.GP_PSLP_ID
    
   LET  $SP_EMPLID   = &SP.EMPLID     
   #debugd show ' ---Mobile Payslip Ern_ded for employee ' $SP_EMPLID
   LET  $SP_EMPL_RCD  = &SP.EMPL_RCD   
   LET $SP_CAL_RUN_ID = &SP.CAL_RUN_ID
   LET $SP_SLICE_BGN_DT = &SP.SLICE_BGN_DT
   LET $SP_SLICE_END_DT = &SP.SLICE_END_DT
   
   LET $SP_DESCRLONG = &SP.DESCRLONG
   LET #SP_PIN_ELEM_GRP_NUM = &SP.PIN_ELEM_GRP_NUM
   LET #SP_BASE_RSLT_VAL = &SP.BASE_RSLT_VAL
   LET #SP_UNIT_RSLT_VAL = &SP.UNIT_RSLT_VAL
   LET #SP_GPFR_PERC_EE = &SP.GPFR_PERC_EE
   LET #SP_GPFR_DED_EE = &SP.GPFR_DED_EE
   LET #SP_GPFR_ERN_EE = &SP.GPFR_ERN_EE
   LET #SP_GPFR_PERC_ER = &SP.GPFR_PERC_ER
   LET #SP_GPFR_AMT_ER = &SP.GPFR_AMT_ER
   LET $SP_GP_ELN_SET = &SP.GP_ELN_SET
   LET $DESCR25 = &SP.DESCR25
   
   LET $SH_GP_PAYGROUP = &SH.GP_PAYGROUP   
   LET $SH_CAL_ID = &SH.CAL_ID
   LET $SH_SEG_BGN_DT = &SH.SEG_BGN_DT
   LET $SH_SEG_END_DT = &SH.SEG_END_DT
   LET #SH_RSLT_SEG_NUM = &SH.RSLT_SEG_NUM
   LET $MH_PYMT_DT = &MH.PYMT_DT
   LET $MH_RUN_TYPE = &MH.RUN_TYPE
   LET $MH_ORIG_CAL_RUN_ID = &MH.ORIG_CAL_RUN_ID
   LET $MH_GP_PSLP_ID = &MH.GP_PSLP_ID
    
   



!Mobile payslip Ern and Ded 

        
        
        IF $PREV_EMPLID =  $SP_EMPLID 
               LET MPSLP_ED.INSTANCE(0) =   #PREV_INSTANCE + 1  
           
        ELSE
               LET MPSLP_ED.INSTANCE(0) = 0
               LET #PRINT_ORDER = 0
        END-IF
                 

                 
    do Get_SP_pin_num            

  Let #pin_ee = #SP_PIN_NUM !Since simplified group is a summation of multiple pins, assigning the PIN_ELEM_GRP_NUM instead of pin_num
  Let #pin_er = #SP_PIN_NUM 
  LET #ED_PinNum = 0!#pin_ee
  do Get-Element-Group
  do Get-Section_Number

  LET #INST = MPSLP_ED.INSTANCE(0)
  
  #debugd show ' #pin_ee ' #pin_ee ' #EARN_EE  ' #SP_GPFR_ERN_EE ' #DED_EE  ' #SP_GPFR_DED_EE ' ---#pin_er ' #pin_er   ' #SP_GPFR_AMT_ER    ' #SP_GPFR_AMT_ER
  !' --------- BASE ' #SP_BASE_RSLT_VAL  ' MPSLP_ED_INSTANCE ' #INST

  !EARNNGS & DEDUCTIONS
  
    !EE data
    #debugd show 'Ern_ded $SP_EMPLID ' $SP_EMPLID
        LET MPSLP_ED.EMPLID(0) = $SP_EMPLID
        LET MPSLP_ED.CAL_RUN_ID(0) = $SP_CAL_RUN_ID
        LET MPSLP_ED.EMPL_RCD(0) = $SP_EMPL_RCD
        LET MPSLP_ED.GP_PAYGROUP(0) = $SH_GP_PAYGROUP
        LET MPSLP_ED.CAL_ID(0) = $SH_CAL_ID
        LET MPSLP_ED.ORIG_CAL_RUN_ID(0) = $MH_ORIG_CAL_RUN_ID
        
    LET MPSLP_ED.RSLT_SEG_NUM(0) = #SH_RSLT_SEG_NUM
    LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) = 'GPFRA'
    LET MPSLP_ED.GP_PSLP_ID(0) = $MH_GP_PSLP_ID
  
    LET MPSLP_ED.PIN_NUM(0) = #pin_ee
    LET MPSLP_ED.SLICE_BGN_DT(0) =  $SP_SLICE_BGN_DT
    LET MPSLP_ED.SLICE_END_DT(0) = $SP_SLICE_END_DT
    LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
    !LET MPSLP_ED.INSTANCE(0) = 0
    LET MPSLP_ED.PI_INSTANCE(0) = 0
    LET MPSLP_ED.PRD_BGN_DT(0) = $SH_SEG_BGN_DT
    LET MPSLP_ED.PRD_END_DT(0) = $SH_SEG_END_DT
    LET MPSLP_ED.SEG_BGN_DT(0) =  $SH_SEG_BGN_DT
    LET MPSLP_ED.SEG_END_DT(0) = $SH_SEG_END_DT
    LET MPSLP_ED.PYMT_DT(0) =  $MH_PYMT_DT 
    LET MPSLP_ED.RUN_TYPE(0) = $MH_RUN_TYPE


     ! IF $DESCR25 <> ' '!Retro Earnings, Update correct retro slice begin and end date
     !     LET MPSLP_ED.SLICE_BGN_DT(0) =  $SH_SEG_BGN_DT
     !     LET MPSLP_ED.SLICE_END_DT(0) = $SH_SEG_END_DT
     !   do get_retro_dates       
     ! 
     ! end-if
     
     
    
    !if $descr_retro <> ' ' 
     !LET MPSLP_ED.CALC_ADJ_VAL(0) =    #Calc_Adj_Val
     !LET MPSLP_ED.CALC_DELTA_VAL(0) = #Calc_Adj_Val 
     !LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val
     !LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
    !end-if
       
  LET MPSLP_ED.BASE_RSLT_VAL(0) =   #SP_BASE_RSLT_VAL     
  LET MPSLP_ED.RATE_RSLT_VAL(0) =     0   
  LET MPSLP_ED.UNIT_RSLT_VAL(0) =   #SP_UNIT_RSLT_VAL  
  LET MPSLP_ED.PCT_RSLT_VAL(0) =    #SP_GPFR_PERC_EE
  Let $MPdescr = $SP_DESCRLONG

    IF $DESCR25 <> ' '!Retro element , prefix an asterisk (*) to the descr
       LET $MPdescr =  '*'||substr($MPdescr,1,29)            
     end-if
   
   if #SP_GPFR_ERN_EE <> 0 !Employee Earning
     LET MPSLP_ED.CALC_RSLT_VAL(0) = #SP_GPFR_ERN_EE
     LET MPSLP_ED.GP_MPSLP_SECTION(0) =  '10'
     !LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = 'Earnings'
     LET MPSLP_ED.GP_MPSLP_PIN_DESCR (0) =  substr($MPdescr,1,30)
     #debugd show '#PRINT_ORDER ' #PRINT_ORDER
     LET #PRINT_ORDER = #PRINT_ORDER +1
     LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) = #PRINT_ORDER
    
     #debugd show ' Insert EE ERN details'
     DO insert_mpslp_ernded_row 
    
   else !Employee Deduction
    if #SP_GPFR_DED_EE <> 0
     LET MPSLP_ED.CALC_RSLT_VAL(0) = #SP_GPFR_DED_EE
     LET MPSLP_ED.GP_MPSLP_SECTION(0) =  '20'
     !LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = 'A déduire'
     LET MPSLP_ED.GP_MPSLP_PIN_DESCR (0) =  substr($MPdescr,1,28)||' S'!Salarie
     
     #debugd show ' Find the Simplified Group Descr from #SP_PIN_ELEM_GRP_NUM  ' #SP_PIN_ELEM_GRP_NUM ' $SP_GP_ELN_SET '  $SP_GP_ELN_SET
     
     if $SP_GP_ELN_SET  = 'SIMPL_PSLP'   
      do get_simplified_group_name
      LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = $DESCRL
     end-if
     
     #debugd show ' Insert EE DED details'
     #debugd show '#PRINT_ORDER ' #PRINT_ORDER
     LET #PRINT_ORDER = #PRINT_ORDER +1
     LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) = #PRINT_ORDER 
     DO insert_mpslp_ernded_row 
    end-if
   end-if
   
   
  
   
     
     
  if #SP_GPFR_AMT_ER     <> 0 !Employer Deduction

        LET MPSLP_ED.EMPLID(0) = $SP_EMPLID
        LET MPSLP_ED.CAL_RUN_ID(0) = $SP_CAL_RUN_ID
        LET MPSLP_ED.EMPL_RCD(0) = $SP_EMPL_RCD
        LET MPSLP_ED.GP_PAYGROUP(0) = $SH_GP_PAYGROUP
        LET MPSLP_ED.CAL_ID(0) = $SH_CAL_ID
        LET MPSLP_ED.ORIG_CAL_RUN_ID(0) = $MH_ORIG_CAL_RUN_ID
        
        LET MPSLP_ED.RSLT_SEG_NUM(0) = #SH_RSLT_SEG_NUM
        LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) = 'GPFRA'
        LET MPSLP_ED.GP_PSLP_ID(0) = $MH_GP_PSLP_ID
  
        LET MPSLP_ED.PIN_NUM(0) = #pin_er
        LET MPSLP_ED.SLICE_BGN_DT(0) =  $SH_SEG_BGN_DT
        LET MPSLP_ED.SLICE_END_DT(0) = $SH_SEG_END_DT
        LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
        LET MPSLP_ED.INSTANCE(0) = #INST + 1
        LET MPSLP_ED.PI_INSTANCE(0) = 0
        LET MPSLP_ED.PRD_BGN_DT(0) = $SH_SEG_BGN_DT
        LET MPSLP_ED.PRD_END_DT(0) = $SH_SEG_END_DT
        LET MPSLP_ED.SEG_BGN_DT(0) =  $SH_SEG_BGN_DT
        LET MPSLP_ED.SEG_END_DT(0) = $SH_SEG_END_DT
        LET MPSLP_ED.PYMT_DT(0) =  $MH_PYMT_DT 
        LET MPSLP_ED.RUN_TYPE(0) = $MH_RUN_TYPE

    !if $descr_retro <> ' ' 
     !LET MPSLP_ED.CALC_ADJ_VAL(0) =    #Calc_Adj_Val
     !LET MPSLP_ED.CALC_DELTA_VAL(0) = #Calc_Adj_Val 
     !LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val
     !LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
    !end-if
       
       
       LET #ED_PinNum = 0!#pin_er
       do Get-Element-Group
       do Get-Section_Number
       LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
       LET MPSLP_ED.GP_MPSLP_SECTION(0) =  '20'
       !LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = 'Charges patronales'
       
    
    LET MPSLP_ED.BASE_RSLT_VAL(0) =     #SP_BASE_RSLT_VAL   
    LET MPSLP_ED.RATE_RSLT_VAL(0) =     0  
    LET MPSLP_ED.UNIT_RSLT_VAL(0) =     #SP_UNIT_RSLT_VAL  
    LET MPSLP_ED.PCT_RSLT_VAL(0) =    #SP_GPFR_PERC_ER
    LET MPSLP_ED.CALC_RSLT_VAL(0) = #SP_GPFR_AMT_ER 
    
    #debugd show ' Find the Simplified Group Descr from #SP_PIN_ELEM_GRP_NUM  ' #SP_PIN_ELEM_GRP_NUM ' $SP_GP_ELN_SET '  $SP_GP_ELN_SET
    if $SP_GP_ELN_SET  = 'SIMPL_PSLP'
     do get_simplified_group_name
     LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) = $DESCRL
    END-IF

        
     LET MPSLP_ED.GP_MPSLP_PIN_DESCR (0) =  substr($MPdescr,1,28)||' E' !Employeur
     #debugd show '#PRINT_ORDER ' #PRINT_ORDER
     LET #PRINT_ORDER = #PRINT_ORDER +1
     LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) = #PRINT_ORDER
     #debugd show ' Insert ER details'
     DO insert_mpslp_ernded_row 

  end-if 

  
    LET $PREV_EMPLID =  $SP_EMPLID 
    LET #PREV_INSTANCE = MPSLP_ED.INSTANCE(0)
    
FROM PS_GPFR_SMPL_PSLP SP, 
PS_GPFR_SMPL_HDR SH, 
PS_GP_MPSLP_STGHDR MH 
WHERE SP.JOBINSTANCE = #TMPJOBINSTANCE
AND SP.GPFR_NEW_GROUP = 'N' !Do not pick the Group names, it will be retrieved by
AND SP.JOBINSTANCE = SH.JOBINSTANCE
AND SP.EMPLID = SH.EMPLID
AND SP.EMPL_RCD = SH.EMPL_RCD
AND SP.CAL_RUN_ID = SH.CAL_RUN_ID
AND SP.GPFR_PYSL_B_A = SH.GPFR_PYSL_B_A
AND SH.EMPLID = MH.EMPLID
AND SH.EMPL_RCD = MH.EMPL_RCD
AND SH.CAL_RUN_ID = MH.CAL_RUN_ID
AND SH.CAL_ID = MH.CAL_ID
AND SH.GP_PAYGROUP = MH.GP_PAYGROUP
AND SH.RSLT_SEG_NUM = MH.RSLT_SEG_NUM
order by SP.EMPLID, SP.EMPL_RCD, SP.CAL_RUN_ID, SH.CAL_ID, SH.RSLT_SEG_NUM, SP.GP_ELN_SET, SP.PIN_ELEM_GRP_NUM, SP.SLICE_BGN_DT DESC
END-SELECT
!End of Mobile payslip Ern and Ded





end-procedure mobile_payslip_ern_ded

!************************************************************
