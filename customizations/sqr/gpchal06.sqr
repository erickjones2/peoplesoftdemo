!***********************************************************************
!  GPCHAL06:  Overpayment List (Ueberzahlungsliste)                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:23:46                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'


#define col1 10                           !P-Nr
#define col2 28             !Name/Vorname
#define col3 74             !Beschaeftigungszeit von
#define col4 104
#define col5 109
!****************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
  do Get-Log
end-PROGRAM
!****************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do Ask-Input
  else
     do Get-Report-Parameters
  end-if

  move 'GPCHAL06' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation
  let $ReportTitle = $TITLE_STR
  LET $title1      = $ReportTitle
  show #debug  ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure
!****************************************************************************
begin-procedure Ask-Input
input $Ctl_PayEntity 'Pay Entity'     type=char
input $Ctl_Curr_Pay_End_Dt  'Current Pay End Date'  type = date
input $language_cd 'Language'   type=char      maxlen=3
uppercase $Ctl_PayEntity
if $Ctl_PayEntity <> ''
    let $crit.company = ' AND PBD.PAY_ENTITY = ' || '''' || $Ctl_PayEntity || ''''
end-if

end-procedure
!****************************************************************************
begin-procedure Get-Values
let $language_cd = $PRCS_LANGUAGE_CD
end-procedure
!****************************************************************************
begin-procedure Report-Translation
  do Get_Field_Information ('GPCHAL06', 'TITLE_STR',                 $TITLE_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'REPORT_ID_STR',                 $REPORT_ID_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'PAGE_NO_STR',                 $PAGE_NO_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'RUN_DATE_STR',                 $RUN_DATE_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'RUN_TIME_STR',                 $RUN_TIME_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'ASOFDATE_STR',                 $ASOFDATE_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'EMPLID_STR',                 $EMPLID_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'NAME_STR',                 $NAME_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'MONTH_STR',                 $MONTH_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'AMOUNT_STR',                 $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'SUM_TOTAL_STR',                 $SUM_TOTAL_STR,#CW)
  do Get_Field_Information ('GPCHAL06', 'PAGE_TOTAL_STR',                 $PAGE_TOTAL_STR,#CW)
  do Get_Field_Information ('GPCHGLOB', 'PRINTCLASS',    $PRINTCLASS, #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',    $PYENT, #CW)

  do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',       $HD_TODATE , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)

end-procedure
!****************************************************************************
begin-procedure Process-Main

do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

let #Page_Total = 0
let #Summme_Total = 0
let #Date_Type= {DateType}

begin-select distinct
#ifdef ORACLE
/*+ INDEX(RP0003 PS_GPCH_RP_0001)*/
#endif
PBD1.EMPLID
PBD1.EMPL_RCD
PBD1.GPCH_AL_CPAY_ENDDT
PBD1.GPCH_RP_AMOUNT15
PBD1.SLICE_END_DT
PBD1.CAL_RUN_ID

   let $Empl_ID2       = &PBD1.EMPLID
   let #Empl_RCD       = &PBD1.EMPL_RCD

   do Get-Emp-Address($Empl_ID2,$Ctl_Curr_Pay_End_Dt,'HOME',$EMP_ADDLINE1,$EMP_ADDLINE2,$EMP_ADDLINE3,$EMP_$ADDLINE31,
                      $EMP_ADDLINE4,$EMP_ADDLINE5,$EMP_ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX,
                      $NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$EMP_Phone,$EMP_Email,$EMP_CITY,
                      $EMP_STATE,$EMP_POSTAL)

   let $Emlp_Name      =  rtrim($Full_Name,' ')
   let $Mnth           = &PBD1.GPCH_AL_CPAY_ENDDT

   let #Amount         = &PBD1.GPCH_RP_AMOUNT15
   let #Summme_Total   = #Summme_Total + #Amount
   let #Page_Total     = #Page_Total + #Amount

   do Print_Data

from PS_GPCH_RP_0002 PBD1,PS_GPCH_RP_0001 RP0003
where RP0003.PAY_ENTITY    = $Ctl_PayEntity and
PBD1.EMPLID          = RP0003.EMPLID and
PBD1.CAL_RUN_ID      = RP0003.CAL_RUN_ID and
PBD1.EMPL_RCD        = RP0003.EMPL_RCD and
PBD1.GP_PAYGROUP     = RP0003.GP_PAYGROUP and
PBD1.CAL_ID          = RP0003.CAL_ID and
PBD1.RSLT_SEG_NUM    = RP0003.RSLT_SEG_NUM and
PBD1.GPCH_RP_AMOUNT15 < 0 and
PBD1.PRD_END_DT      <= $Ctl_Curr_Pay_End_Dt and
PBD1.GPCH_AL_CPAY_ENDDT = (select max(b.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0002 b
                           where PBD1.EMPLID          = b.EMPLID and
                                 PBD1.EMPL_RCD        = b.EMPL_RCD and
                                 PBD1.GP_PAYGROUP     = b.GP_PAYGROUP and
                                 PBD1.CAL_ID          = b.CAL_ID)
order by PBD1.EMPLID,PBD1.EMPL_RCD,PBD1.GPCH_AL_CPAY_ENDDT

end-select

end-procedure
!****************************************************************************
begin-procedure Print_Data
         DO Format-Number(#Amount,$Amount,'999,999,999.00')

   do Format-Number(#Empl_RCD,$EmplRcd,'888')
   let $EmplID_Rcd = $Empl_ID2 || '-' || $EmplRcd

   print $EmplID_Rcd     (+1,{col1})
         print $Emlp_Name   (,{col2})
   do ConvertToComponents($Mnth,$yy1,$mm1,$dd1)
      evaluate #Date_Type
     when = 2
          let $Mnth1 = $yy1 || '{PTDateDelim}' || $mm1
             break
      when-other
             let $Mnth1 = $mm1 || '{PTDateDelim}' || $yy1
             break
         end-evaluate

         print $Mnth1        (,{col3})
         print $Amount      (,{col4})
         let #LineCount = #LineCount + 1
end-procedure
!****************************************************************************
begin-heading 12
#Include 'gpchut08.sqc'
print $PYENT                          (0, {col1}) bold
print $Cpline1                       (0, +2)
print $Cpdescr                (+1, {col1})

print $ASOFDATE_STR                   (0,#RptCol)
do Format-DateTime($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt1, {DEFDATE}, '', '')
print $Ctl_Curr_Pay_End_Dt1           (0,+2)

print $Cpline2                       (+1, {col1})
print $Cpline3                       (+1, {col1})
print $Cpline31                      (+1, {col1})


print '_' (+2,10,117) fill  bold
print $EMPLID_STR           (+1,{col1})
print $NAME_STR             (,{col2})
print $MONTH_STR            (,{col3})
print $AMOUNT_STR           (,{col5})
print '_' (+1,10,117) fill  bold
end-heading
!****************************************************************************

begin-footing 8
 do Format-Number(#Page_Total,$Page_Total,'999,999,999.00')
 do Format-Number(#Summme_Total,$Summme_Total,'999,999,999.00')
 print '_' (+1,10,117) fill bold
 print $PAGE_TOTAL_STR    (+2,{col3})
 print $Page_Total        (0,{col4})
 print $SUM_TOTAL_STR     (+1,{col3})
 print $Summme_Total      (0,{col4})
 print '_'                (+2,10,117) fill bold
 let #Page_Total = 0

end-footing
!*************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL06'
               do Get_Eng_GPCHAL06
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHAL06
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL06'
               do Get_Ger_GPCHAL06
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHAL06
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHAL06'
               do Get_Ita_GPCHAL06
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHAL06
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL06'
               do Get_Fra_GPCHAL06
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHAL06
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut04.sqc'  ! get pay entity data
#include 'gpchut06.sqc'  ! get values mask routines
#include 'gpchut07.sqc'  ! Log Output Selection
#include 'number.sqc'    ! routines for formatting numbers.
#include 'datetime.sqc'  ! routines for formatting dates and times.
#include 'stdapi.sqc'    ! routines for process scheduler manipulation.
#include 'sqrtrans.sqc'  ! routines for language translation.
#include 'readxlat.sqc'  ! routines for xlattable translation.
#include 'curdttim.sqc'  ! get-current-datetime procedure
#include 'validdt.sqc'   ! validate date routine
#include 'datemath.sqc'  ! function for date-calculation
#include 'gpchal6s.sqc'  ! Get Strings Values for GPCHAL06
#include 'gpchglbs.sqc'  ! Get Strings Values for GPCHGLOB


