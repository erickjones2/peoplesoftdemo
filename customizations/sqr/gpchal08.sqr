!***********************************************************************
!  GPCHAL08:  Pay Element Summary Per Month                            *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:23:56                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'

#define SQR_Strings_Array_Size 1000

#define colh0       1
#define colh1       10
#define colh6       50


#define col1        39
#define colh2       91
#define colh3       119
#define colh4       138
#define colh5       161

#define col2        85
#define col21       90
#define col3        109
#define col4        132
#define col5        155


begin-REPORT
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Delete-Temp-Record
  do Stdapi-Term
  do Get-Log
end-REPORT

!****************************************************************************
begin-heading 14
#include 'gpchut08.sqc'


  do Get-ResolnId($sqr-program,$Reslnid)
   
    print $PROCS_NO (-1,10)
  print $prcs_process_instance (0, {ColM})    

   print $RESLN_ID (+1,10)
   If $Reslnid <> '******'
      print $Reslnid (0, {ColM})
   End-If

   print $PRINTCLASS  (+1,#RptCol)
   print $Ctl_Print   (0,+1)

   let $TITLE2= ''
   let $TITLE2 = $Month_Name || ' ' || $yy11

   print $PYENT                 (+2,{colh1})  bold
   print $Cpline1               (0, +2)
   print $HD_SELECTION          (0, {colh6})  bold
   print $HD_ADDRESS1           (0, 127)

   print $Cpdescr               (+1, {colh1})
   if $Ctl_Deptid <> ''
           print $HD_DEPT       (0,  {colh6})  bold
           print $Ctl_Deptid    (0, +2)
   end-if
   print $TITLE2                ()             center
   print $HD_ADDRESS2           (0, 127)


   print $Cpline2               (+1, {colh1})
   if #count_company <> 0
        print $PYENT            (0,  {colh6})  bold
        print $Company-String   (0, +5)
   end-if
   print $HD_ADDRESS3           (0, 127)

   print $Cpline3               (+1, {colh1})


print '_' (+1,1,188) fill

   print $ELEMENT            (+1, {colh1}  )  bold
   print $DESCR11            ( 0, {col1}   )  bold
   print $HD_RETRO           ( 0, {colh2}  )  bold
   print $HD_ACTUAL          ( 0, {colh3}  )  bold
   print $HD_MONATSUM        ( 0, {colh4}  )  bold
   print $CUMULATIVE         ( 0, {colh5}  )  bold

print '_' (+1,1,188) fill


end-heading
!****************************************************************************
begin-procedure Get-Translate-Value

  move 'MONTHCD' to $FieldName

  move $mm11 to $FieldValue

  do Read-Translate-Table
  let $Month_Name = rtrim(ltrim($XlatlongName,' '),' ')
  show 'Month Name = ' $Month_Name

end-procedure Get-Translate-Value

!****************************************************************************
begin-procedure Init-Report

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-Report-Parameters                !in Gpchut03.sqc
  else
    do Get-Report-Parameters                !in Gpchut06.sqc
    do Process-Get-Values
  end-if

  move 'GPCHAL08' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')
  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation

  if $HD_DESCR = ''
   let $ReportTitle = $TITLE1
  else
   let $ReportTitle = $HD_DESCR
  end-if
  
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  let $Ctl_End_Dt = $Ctl_Curr_Pay_End_Dt
  do ConvertToComponents($Ctl_End_Dt,$yy11,$mm11,$dd11)
  do Get-Translate-Value
  do Get_Pin_Description

end-procedure Init-Report
!****************************************************************************

Begin-Procedure Report-Translation

  do Get_Field_Information ('GPCHAL08', 'TITLE1',        $TITLE1,     #CW)
  do Get_Field_Information ('GPCHAL08', 'ELEMENT',       $ELEMENT,    #CW)
  do Get_Field_Information ('GPCHAL08', 'DESCR1',        $DESCR11,    #CW)
  do Get_Field_Information ('GPCHAL08', 'CUMULATIVE',    $CUMULATIVE, #CW)
  do Get_Field_Information ('GPCHAL08', 'AMT',           $AMT,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'PRINTCLASS',    $PRINTCLASS, #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',         $PYENT     , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_RETRO',      $HD_RETRO  , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MONATSUM',   $HD_MONATSUM,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_ACTUAL',     $HD_ACTUAL , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_DEPT'    ,   $HD_DEPT   , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SELECTION',  $HD_SELECTION,#CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',     $LG_PINNM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FROM',     $HD_FROM,     #CW) 
  do Get_Field_Information ('GPCHGLOB', 'TOTAL',     $TOTAL,     #CW) 
  do Get_Field_Information     ('GPCHGLOB', 'RESLN', $RESLN_ID, #CW)
   do Get_Field_Information     ('GPCHGLOB', 'PROCS_INST', $PROCS_NO, #CW)



end-Procedure Report-Translation

!****************************************************************************
begin-procedure Get-Values
        let $language_cd         = $PRCS_LANGUAGE_CD
        let $Ctl_Curr_Pay_End_Dt = rtrim(&GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT, ' ')
        let $PR_Pay_Entity       = rtrim(&GPCH_RUN_CNTL.PAY_ENTITY,' ')
        let $Print-Detail-Report = rtrim(&GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO,' ')
end-procedure Get-Values
!****************************************************************************
begin-procedure Process-Get-Values


       ! To get the Begin Date of the Year for Monthly Report
       do Convert-to-DTU-DATE($Ctl_Curr_Pay_End_Dt,$DTU_end_dt)
       do Dtu-year-Begin($DTU_end_dt,$DTU_monthbegin)
       do Convert-From-DTU-DATE($DTU_monthbegin,$Rpt_Start_Dt)  !Start Date of the Year
       let $Rpt_End_Dt   =  $Ctl_Curr_Pay_End_Dt           !Date for Monthly Report
       do Convert-to-DTU-DATE($Ctl_Curr_Pay_End_Dt,$DTU_end_dt)
       do Dtu-year-End($DTU_end_dt,$DTU_monthend)
       do Convert-From-DTU-DATE($DTU_monthend,$Rpt_Rto_Dt) !Date for Delta Calculation Year End Date
       #Debug show 'Monthly Report Start date : ' $Rpt_Start_Dt ' , Report End Date :'  $Rpt_End_Dt ' , Retro Date : ' $Rpt_Rto_Dt

       let $Company_Crit_PS     = ' AND PS.COMPANY   = ''' || $Ctl_PayEntity || ''' '

Begin-Select
AB.DESCR
AB.ADDRESS1
AB.ADDRESS2
AB.ADDRESS3
FROM PS_GPCH_RC_AL08 AB
WHERE AB.OPRID       = $prcs_oprid
AND   AB.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select

  let $HD_DESCR    =  rtrim(&AB.DESCR,' ')

  if  $HD_DESCR <> ''
      let $ReportTitle = $HD_DESCR
  else
      let $ReportTitle = $TITLE1
  end-if

  let $HD_ADDRESS1 =  rtrim(&AB.ADDRESS1,' ')
  let $HD_ADDRESS2 =  rtrim(&AB.ADDRESS2,' ')
  let $HD_ADDRESS3 =  rtrim(&AB.ADDRESS3,' ')

end-procedure Process-Get-Values
!****************************************************************************
begin-procedure Ask-Input

input $Ctl_Print      'Print Order       : ' type=char      maxlen=8
input $Ctl_Cal_Run_Id 'Calendar Group Id : ' type=char      maxlen=18
input $Ctl_PayEntity  'Pay Entity        : ' type=char      maxlen=10

end-procedure Ask-Input

!*************************************************************************
begin-procedure Process-Main
      let $Pay_Entity=$Ctl_PayEntity
Begin-Select
DF.PIN_NUM
FROM PS_GP_PIN DF
WHERE DF.PIN_NM = 'CH_AL_COMPANY'
End-Select

   let #Company_Pin =  &DF.PIN_NUM

Begin-Select
DP.PIN_NUM
FROM PS_GP_PIN DP
WHERE DP.PIN_NM = 'CH_AL_DEPTID'
End-Select

  let #Dept_Pin   = &DP.PIN_NUM
  let $Dept_Pin_str = rtrim(to_char(#Dept_Pin),' ')
  #debug show 'Company Pin '  #Company_Pin
  #debug show 'Department Pin '  #Dept_Pin
  
  !Logic for Department Id Selection on Run control Page 
  if $Ctl_Deptid <> ''
     let $Dept_DS_And_Clause = ' AND DS.EMPLID = DR.EMPLID AND DS.CAL_RUN_ID = DR.CAL_RUN_ID AND  DS.EMPL_RCD = DR.EMPL_RCD AND DS.GP_PAYGROUP = DR.GP_PAYGROUP AND DS.CAL_ID = DR.CAL_ID'
                                ||' AND DS.ORIG_CAL_RUN_ID   = DR.ORIG_CAL_RUN_ID AND DS.RSLT_SEG_NUM = DR.RSLT_SEG_NUM AND    DS.SLICE_BGN_DT= DR.SLICE_BGN_DT AND    DS.SLICE_END_DT = DR.SLICE_END_DT'
                                ||' AND DS.PIN_NUM  = '||$Dept_Pin_str 
                                     
      let $Record_Rslt_Pin_DS =',PS_GP_RSLT_PIN DS'
      let $Record_Rslt_Pin_C =',PS_GP_RSLT_PIN C'
      let $Record_Rslt_Pin_DR2 =',PS_GP_RSLT_PIN DR2'
      let $Record_Gpchal_08_DR2 = ',PS_GPCHAL088_TMP DR2'
      let $Dept_Criteria_DS =' AND DS.CHR_PIN_VAL IN ('  || $Ctl_Deptid || ')'
      let $Dept_Or_Condition = ' or P.PIN_NUM         =  ' ||$Dept_Pin_str
      
      let $Dept_C_And_Clause =' AND C.EMPLID = A.EMPLID AND C.CAL_RUN_ID = A.CAL_RUN_ID AND C.EMPL_RCD=A.EMPL_RCD AND C.GP_PAYGROUP=A.GP_PAYGROUP AND C.CAL_ID=A.CAL_ID AND C.ORIG_CAL_RUN_ID=A.ORIG_CAL_RUN_ID'
                                ||' AND C.RSLT_SEG_NUM= A.RSLT_SEG_NUM AND C.PIN_NUM = '||$Dept_Pin_str
      
      let $Record_Dept_Tmp8 =',PS_GPCHAL088_TMP DR2'          
      let $Dept_Criteria_DR2 = ' AND   DR2.EMPLID = DR1.EMPLID AND   DR2.CAL_RUN_ID = DR1.CAL_RUN_ID AND   DR2.EMPL_RCD= DR1.EMPL_RCD AND DR2.GP_PAYGROUP = DR1.GP_PAYGROUP AND DR2.GP_PAYGROUP = DR1.GP_PAYGROUP'
                               ||' AND   DR2.CAL_ID = DR1.CAL_ID AND   DR2.ORIG_CAL_RUN_ID   = DR1.ORIG_CAL_RUN_ID AND   DR2.RSLT_SEG_NUM      = DR1.RSLT_SEG_NUM AND   DR2.PIN_NUM =' ||$Dept_Pin_str
      let $Dept_ID_Criteria_DR2 =' AND DR2.CHR_PIN_VAL IN ('  || $Ctl_Deptid || ')'
      
      let $Dept_Criteria_DR2_Ext = ' AND   DR2.EMPLID = DR1.EMPLID AND   DR2.CAL_RUN_ID = DR1.CAL_RUN_ID AND   DR2.EMPL_RCD= DR1.EMPL_RCD AND DR2.GP_PAYGROUP = DR1.GP_PAYGROUP'
                                   ||' AND   DR2.CAL_ID = DR1.CAL_ID AND   DR2.RSLT_SEG_NUM      = DR1.RSLT_SEG_NUM AND   DR2.PIN_NUM = '||$Dept_Pin_str
      
  else
      let $Dept_DS_And_Clause = ''
      let $Record_Rslt_Pin_DS =''
      let $Record_Rslt_Pin_C =''
      let $Record_Rslt_Pin_DR2 =''
      let $Record_Gpchal_08_DR2 =''
      let $Dept_Criteria_DS =''
      let $Dept_Or_Condition =''
      let $Dept_C_And_Clause =''
      let $Record_Dept_Tmp8 =''          
      let $Dept_Criteria_DR2 = ''
      let $Dept_ID_Criteria_DR2 =''
      let $Dept_Criteria_DR2_Ext = ''
   
  end-if
  
       
      do ConvertToComponents($Ctl_Curr_Pay_End_Dt,$yyyy,$mmmm,$dddd)

      do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                             $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
      do Get-Normal-Data
      do Get-Retro-Data
      do Get-Retro-Data-Detail
      do Get-Pin-Info
      
end-procedure Process-Main
!*************************************************************************
begin-procedure init-sum
let  #curr_mon_val_sum = 0
let  #curr_mon_val     = 0
let  #curr_mon_val_r   = 0
let  #annual-sum-cum   = 0
let  #annual-sum       = 0
let  #annual-sum-r     = 0

end-procedure init-sum
!**********************************************

begin-procedure Get-Pin-Info
#Debug Show '-> Get-Pin-Info '
    
    let $GPCH_BL_PR_CALC    = 'N'
    let $GPCH_BL_PR_BASE1   = 'N'
    let $GPCH_BL_PR_UNIT1   = 'N'

   clear-array name=MainDescr
   create-array name=MainDescr size={SQR_Strings_Array_Size}
      field=PIN_NUM:number
      field=PIN_PARENT:number
      field=SIGN:number
      field=CALC_FLG:char
      field=BASE_FLG:char
      field=UNIT_FLG:char
      field=PIN_NM:char
      field=PIN_DESCR:char
      field=GROUP:number
      
      let #desi = 0
      
Begin-Select
   
B.PIN_NUM                &B.PIN_NUM
    
C.PIN_PARENT_NUM         &C.PIN_PARENT_NUM
    
B.GPCH_BL_PR_GROUP       ()   on-break print=never procedure=Print-Blank-Line
    
B.GPCH_BL_PR_ORDER
   
B.GPCH_AL_SIGNVALUE      &B.GPCH_AL_SIGNVALUE
   
B.GPCH_BL_PR_CALC        &B.GPCH_BL_PR_CALC
   
B.GPCH_BL_PR_BASE        &B.GPCH_BL_PR_BASE
   
B.GPCH_BL_PR_UNITS       &B.GPCH_BL_PR_UNIT


   
        
       let #Main_Pin           = &B.PIN_NUM
       let #Main_Pin_Parent    = &C.PIN_PARENT_NUM     
       let #Signvalue          = &B.GPCH_AL_SIGNVALUE
       let $GPCH_BL_PR_CALC1    = &B.GPCH_BL_PR_CALC
       let $GPCH_BL_PR_BASE1    = &B.GPCH_BL_PR_BASE
       let $GPCH_BL_PR_UNIT1    = &B.GPCH_BL_PR_UNIT
       let #GPCH_BL_PR_GROUP   = &B.GPCH_BL_PR_GROUP
        
       Lookup Get_Base_Pin_Descr #Main_Pin $Return_Val
       if Not Isnull ($Return_Val)
          Unstring $Return_Val by ';' into $Pin_Nm $PinDescr
          let $PinDescr           =  rtrim($PinDescr,' ')
          let $Pin_Nm             =  rtrim($Pin_Nm,' ')
       end-if


       if $BASE_LANG <> $language_cd
          Lookup Get_Trans_Pin_Descr #Main_Pin $Return_Val
          if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              Unstring $Return_Val by ';' into $Pin_Nm $PinDescr
              let $PinDescr           =  rtrim($PinDescr,' ')
              let $Pin_Nm             =  rtrim($Pin_Nm,' ')
           end-if
       end-if


       put #Main_Pin            INTO MainDescr(#desi) PIN_NUM
       put #Main_Pin_Parent     INTO MainDescr(#desi) PIN_PARENT
       put #Signvalue           INTO MainDescr(#desi) SIGN
       put $GPCH_BL_PR_CALC1     INTO MainDescr(#desi) CALC_FLG
       put $GPCH_BL_PR_BASE1     INTO MainDescr(#desi) BASE_FLG
       put $GPCH_BL_PR_UNIT1     INTO MainDescr(#desi) UNIT_FLG
       put $Pin_Nm              INTO MainDescr(#desi) PIN_NM
       put $PinDescr            INTO MainDescr(#desi) PIN_DESCR
       put #GPCH_BL_PR_GROUP    INTO MainDescr(#desi) GROUP
        
        
       let #desi = #desi + 1

FROM PS_GPCH_BL_PRINT B , PS_GP_PIN C
WHERE B.PIN_NUM            = C.PIN_NUM
AND   B.GPCH_RC_REPORTNAME = $Ctl_Print 
AND   B.EFF_STATUS         = 'A'
AND  (B.GPCH_BL_PR_RATE    = 'N' AND B.GPCH_BL_PR_PERCENT = 'N')
ORDER BY B.GPCH_BL_PR_GROUP ,B.GPCH_BL_PR_ORDER
End-Select

      position (1,0)
      let #mi = 0

   While #mi < #desi

       #debug show 'ALL Pins : ' #desi ' , ' #Main_Pin ' , ' #Main_Pin_Parent  ' , ' #Signvalue ' , ' $GPCH_BL_PR_CALC ' , ' $GPCH_BL_PR_BASE ' , ' $GPCH_BL_PR_UNIT ' , ' $Pin_Nm ' , ' $PinDescr
       get #Main_Pin            FROM MainDescr(#mi) PIN_NUM
       get #Main_Pin_Parent     FROM MainDescr(#mi) PIN_PARENT
       get #Signvalue           FROM MainDescr(#mi) SIGN
       get $GPCH_BL_PR_CALC     FROM MainDescr(#mi) CALC_FLG
       get $GPCH_BL_PR_BASE     FROM MainDescr(#mi) BASE_FLG
       get $GPCH_BL_PR_UNIT     FROM MainDescr(#mi) UNIT_FLG
       get $Pin_Nm              FROM MainDescr(#mi) PIN_NM
       get $PinDescr            FROM MainDescr(#mi) PIN_DESCR
       get #GPCH_BL_PR_GROUP    FROM MainDescr(#mi) GROUP

       if  #GPCH_BL_PR_GROUP  <> #GPCH_BL_PR_GROUP_OLD
           position (+1,0)
       end-if

      do Get-Data-Info
      let #GPCH_BL_PR_GROUP_OLD = #GPCH_BL_PR_GROUP

      let #mi =  #mi + 1

   End-While

#Debug Show '<- Get-Pin-Info '
end-procedure Get-Pin-Info
!***************************************************************************************
begin-procedure Get-Data-Info
#DEBUG show '-> Get-Data-Info  '

 
    if $GPCH_BL_PR_CALC      = 'Y'  
        do Check-Normal-Data
        do Check-Retro-Data
        do Print-Data
        if $Print-Detail-Report ='Y'
         do Check-Retro-Data-det
        do Print-Data-Total
        end-if
    end-if  
        do Check_Base_Components(#Main_Pin,$GPCH_BL_PR_BASE,$PIN_NM_Base,$PinDescr_Base)
    if $GPCH_BL_PR_BASE       = 'Y'
        let $GPCH_BL_PR_CALC  = 'N' 
        let $GPCH_BL_PR_UNIT  = 'N'
        do Check-Normal-Data
        do Check-Retro-Data
        do Print-Data
        if $Print-Detail-Report ='Y'
         do Check-Retro-Data-det
         do Print-Data-Total
        end-if 
    end-if
        do Check_Unit_Components(#Main_Pin,$GPCH_BL_PR_UNIT,$PIN_NM_Unit ,$PinDescr_Unit )
    if $GPCH_BL_PR_UNIT       = 'Y'
        let $GPCH_BL_PR_CALC  = 'N' 
        let $GPCH_BL_PR_BASE  = 'N'
        do Check-Normal-Data
        do Check-Retro-Data
        do Print-Data
        if $Print-Detail-Report ='Y'
         do Check-Retro-Data-det
        do Print-Data-Total
        end-if 
    end-if
        
#DEBUG show '<- Get-Data-Info  '  #NR_AMT_MT ' , ' #NR_AMT_CU
end-procedure Get-Data-Info

!***************************************************************************************
begin-procedure Check-Normal-Data
#DEBUG show '-> Check-Normal-Data  '

     let #i = 0
   While #i < #NR_Cnt

       let #NR_PINNUM     = NormalData.NR_PINNUM(#i)

       if  #NR_PINNUM = #Main_Pin

           if $GPCH_BL_PR_CALC    = 'Y'
              let #NR_AMT_MT_CALC      = NormalData.NR_CALC_MT(#i) * #Signvalue
              let #NR_AMT_CU_CALC      = NormalData.NR_CALC_CU(#i) * #Signvalue
           end-if

           !do Check_Base_Components(#Main_Pin,$GPCH_BL_PR_BASE,$PIN_NM_Base,$PinDescr_Base)
           if $GPCH_BL_PR_BASE    = 'Y'
              let #NR_AMT_MT_BASE      = NormalData.NR_BASE_MT(#i) * #Signvalue
              let #NR_AMT_CU_BASE      = NormalData.NR_BASE_CU(#i) * #Signvalue
           end-if

           !do Check_Unit_Components(#Main_Pin,$GPCH_BL_PR_UNIT,$PIN_NM_Unit ,$PinDescr_Unit )
           if $GPCH_BL_PR_UNIT    = 'Y'
              let #NR_AMT_MT_UNIT      = NormalData.NR_UNIT_MT(#i) * #Signvalue
              let #NR_AMT_CU_UNIT      = NormalData.NR_UNIT_CU(#i) * #Signvalue
           end-if

       end-if

       let #i = #i + 1

   End-While

#DEBUG show '<- Check-Normal-Data  '  #NR_AMT_MT ' , ' #NR_AMT_CU
end-procedure Check-Normal-Data
!****************************************
begin-procedure Check_Base_Components(#Main_Pin1,:$GPCH_BL_PR_BASE,:$PIN_NM_Base,:$PinDescr_Base)
#DEBUG show '-> Check_Base_Components  '

    let #bi = 0
    let $PIN_NM_Base     = ' '
    let $PinDescr_Base   = ' '
    let $GPCH_BL_PR_CALC = 'N' 
    let $GPCH_BL_PR_BASE = 'N'
    let $GPCH_BL_PR_UNIT = 'N'

   While #bi < #_desi

       get #Main_Pin            FROM MainDescr(#bi) PIN_NUM
       get #Main_Pin_Parent    FROM MainDescr(#bi) PIN_PARENT
       get $Pin_Nm              FROM MainDescr(#bi) PIN_NM
       get $PinDescr            FROM MainDescr(#bi) PIN_DESCR
       get $PR_BASE             FROM MainDescr(#bi) BASE_FLG
       get $PR_UNIT             FROM MainDescr(#bi) UNIT_FLG

       if $PR_BASE = 'Y' and #Main_Pin1 = #Main_Pin_Parent
          let $PIN_NM_Base     = $Pin_Nm
          let $PinDescr_Base   = $PinDescr
          let $GPCH_BL_PR_BASE = 'Y'
       end-if

       let #bi = #bi + 1

    End-While

#DEBUG show '<- Check_Base_Components  ' $GPCH_BL_PR_BASE ' , ' $PIN_NM_Base ' , ' $PinDescr_Base
end-procedure Check_Base_Components
!****************************************
begin-procedure Check_Unit_Components(#Main_Pin1,:$GPCH_BL_PR_UNIT,:$PIN_NM_Unit,:$PinDescr_Unit)
#DEBUG show '-> Check_Unit_Components  '

    let #ui = 0
    let $PIN_NM_Unit     = ' '
    let $PinDescr_Unit   = ' '
    let $GPCH_BL_PR_CALC = 'N' 
    let $GPCH_BL_PR_BASE = 'N'
    let $GPCH_BL_PR_UNIT = 'N'

   While #ui < #_desi

       get #Main_Pin            FROM MainDescr(#ui) PIN_NUM
       get #Main_Pin_Parent    FROM MainDescr(#ui) PIN_PARENT
       get $Pin_Nm              FROM MainDescr(#ui) PIN_NM
       get $PinDescr            FROM MainDescr(#ui) PIN_DESCR
       get $PR_BASE             FROM MainDescr(#ui) BASE_FLG
       get $PR_UNIT             FROM MainDescr(#ui) UNIT_FLG

       if $PR_UNIT = 'Y' and #Main_Pin1 = #Main_Pin_Parent
          let $PIN_NM_Unit     = $Pin_Nm
          let $PinDescr_Unit   = $PinDescr
          let $GPCH_BL_PR_UNIT = 'Y'
       end-if

       let #ui = #ui + 1

    End-While

#DEBUG show '<- Check_Unit_Components  ' $GPCH_BL_PR_BASE ' , ' $PIN_NM_Base ' , ' $PinDescr_Base
end-procedure Check_Unit_Components
!****************************************

begin-procedure Check-Retro-Data
#DEBUG show '-> Check-Retro-Data  ' #RT_Cnt


     let #i = 0
   While #i < #RT_Cnt


     let #RT_PINNUM     = RetroData.RT_PINNUM(#i)
                          
     let #RT_FORWARD     = RetroData.RT_FORWARD(#i)  !syed 
      
    

       if  #RT_PINNUM = #Main_Pin

           if $GPCH_BL_PR_CALC         = 'Y'
              let #RT_AMT_MT_CALC      = RetroData.RT_CALC_MT(#i) * #Signvalue
              let #RT_AMT_CU_CALC      = RetroData.RT_CALC_CU(#i) * #Signvalue
              
                If #RT_FORWARD=1.000000        !syed
              let  #NR_AMT_MT_CALC  = #NR_AMT_MT_CALC  - #RT_AMT_MT_CALC
              let  #NR_AMT_CU_CALC  = #NR_AMT_CU_CALC  - #RT_AMT_CU_CALC
              
                 End-If        

           end-if

           if $GPCH_BL_PR_BASE         = 'Y'
              let #RT_AMT_MT_BASE      = RetroData.RT_BASE_MT(#i) * #Signvalue
              let #RT_AMT_CU_BASE      = RetroData.RT_BASE_CU(#i) * #Signvalue
              If #RT_FORWARD=1.000000        !syed
              let  #NR_AMT_MT_BASE  = #NR_AMT_MT_BASE  - #RT_AMT_MT_BASE  
                let  #NR_AMT_CU_BASE  = #NR_AMT_CU_BASE  - #RT_AMT_CU_BASE   
                 End-If
           end-if

           if $GPCH_BL_PR_UNIT         = 'Y'
              let #RT_AMT_MT_UNIT      = RetroData.RT_UNIT_MT(#i) * #Signvalue
              let #RT_AMT_CU_UNIT      = RetroData.RT_UNIT_CU(#i) * #Signvalue
                If #RT_FORWARD=1.000000        !syed
              let  #NR_AMT_MT_UNIT  = #NR_AMT_MT_UNIT  - #RT_AMT_MT_UNIT
                 let  #NR_AMT_CU_UNIT  = #NR_AMT_CU_UNIT  - #RT_AMT_CU_UNIT   
                 End-If
           end-if

       end-if

       let #i = #i + 1



   End-While


#DEBUG show '<- Check-Retro-Data  ' #Main_Pin ' , ' #RT_AMT_MT_CALC ' , ' #RT_AMT_CU_CALC
end-procedure Check-Retro-Data
!****************************************************************************************

begin-procedure Check-Retro-Data-det
#DEBUG show '-> Check-Retro-Data-det  ' #DT_RT_Cnt

Begin-Select
GPCH_PIN_NUM,
GPCH_RP_FROMDT1,
GPCH_RP_AMOUNT1,
GPCH_RP_AMOUNT2,
GPCH_RP_AMOUNT3
             
            do ConvertToComponents(&GPCH_RP_FROMDT1,$RT_YY,$RT_MM,$RT_DD) 
            let $From_dat = $HD_FROM||' '|| $RT_MM ||'-'||$RT_YY
            let $DT_RT_DT  = $From_dat
            


               if $GPCH_BL_PR_CALC        = 'Y'
                let #DT_RT_AMT_MT_CALC      =  &GPCH_RP_AMOUNT1 * #Signvalue
               
              end-if
   
              if $GPCH_BL_PR_BASE         = 'Y'
                 let #DT_RT_AMT_MT_BASE      = &GPCH_RP_AMOUNT2 * #Signvalue
                
               end-if
   
              if $GPCH_BL_PR_UNIT         = 'Y'
                 let #DT_RT_AMT_MT_UNIT      = &GPCH_RP_AMOUNT3 * #Signvalue
                
               end-if
                
           do Print-Detail-Report  
   



   
FROM PS_GPCHAL081_TMP DF
WHERE PROCESS_INSTANCE = #prcs_process_instance 
AND DF.GPCH_PIN_NUM = #Main_Pin
End-Select

#DEBUG show '<- Check-Retro-Data-det  ' #Main_Pin ' , ' #RT_AMT_MT_CALC ' , ' #RT_AMT_CU_CALC
end-procedure Check-Retro-Data-det

!*****************************************************************************************
begin-procedure Print-Data
#DEBUG show '-> Print-Data   '

       let  #Monthly_Sum_CALC    = #RT_AMT_MT_CALC + #NR_AMT_MT_CALC
       let  #Monthly_Sum_BASE    = #RT_AMT_MT_BASE + #NR_AMT_MT_BASE
       let  #Monthly_Sum_UNIT    = #RT_AMT_MT_UNIT + #NR_AMT_MT_UNIT

      

       let  #Cumulative_Sum_CALC = #NR_AMT_CU_CALC + #RT_AMT_CU_CALC
       let  #Cumulative_Sum_BASE = #NR_AMT_CU_BASE + #RT_AMT_CU_BASE
       let  #Cumulative_Sum_UNIT = #NR_AMT_CU_UNIT + #RT_AMT_CU_UNIT

       do Format-Number(#RT_AMT_MT_CALC     ,$Retro_MT_Amt_CALC  ,'B9,999,999,999.99mi')
       do Format-Number(#RT_AMT_MT_BASE     ,$Retro_MT_Amt_BASE  ,'B9,999,999,999.99mi')
       do Format-Number(#RT_AMT_MT_UNIT     ,$Retro_MT_Amt_UNIT  ,'B9,999,999,999.99mi')

       do Format-Number(#NR_AMT_MT_CALC     ,$Normal_MT_Amt_CALC ,'B9,999,999,999.99mi')
       do Format-Number(#NR_AMT_MT_BASE     ,$Normal_MT_Amt_BASE ,'B9,999,999,999.99mi')
       do Format-Number(#NR_AMT_MT_UNIT     ,$Normal_MT_Amt_UNIT ,'B9,999,999,999.99mi')

       do Format-Number(#Monthly_Sum_CALC   ,$Monthly_Sum_CALC   ,'B9,999,999,999.99mi')
       do Format-Number(#Monthly_Sum_BASE   ,$Monthly_Sum_BASE   ,'B9,999,999,999.99mi')
       do Format-Number(#Monthly_Sum_UNIT   ,$Monthly_Sum_UNIT   ,'B9,999,999,999.99mi')

       do Format-Number(#Cumulative_Sum_CALC,$Cumulative_Sum_CALC,'B9,999,999,999.99mi')
       do Format-Number(#Cumulative_Sum_BASE,$Cumulative_Sum_BASE,'B9,999,999,999.99mi')
       do Format-Number(#Cumulative_Sum_UNIT,$Cumulative_Sum_UNIT,'B9,999,999,999.99mi')

      ! #DEBUG SHOW $PIN_NM ' , ' $PinDescr ' , ' #RT_AMT_MT ' , ' #NR_AMT_MT ' , ' #Cumulative_Sum
       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_CALC         = 'Y'

       if #RT_AMT_MT_CALC = 0 and #NR_AMT_MT_CALC = 0 and #Cumulative_Sum_CALC = 0
          goto PrintEnd_CALC
       end-if

       Print $PIN_NM              (0,{colh1}) !WRAP 25 1
       Print $PinDescr            (0,{col1})
       
       if $Print-Detail-Report = 'Y' and #RT_AMT_CU_CALC <> 0
        position (+1,0)
        goto PrintEnd_CALC 
        
       end-if

       Print $Retro_MT_Amt_CALC        (0,{col2})
       Print $Normal_MT_Amt_CALC       (0,{col3})
       Print $Monthly_Sum_CALC         (0,{col4})
       Print $Cumulative_Sum_CALC      (0,{col5})

       position (+1,0)

       PrintEnd_CALC:

       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_BASE         = 'Y'

       if #RT_AMT_MT_BASE = 0 and #NR_AMT_MT_BASE = 0 and #Cumulative_Sum_BASE = 0
          goto PrintEnd_BASE
       end-if

       Print $PIN_NM_Base              (0,{colh1}) !WRAP 25 1
       Print $PinDescr_Base            (0,{col1})

       if $Print-Detail-Report = 'Y' and #RT_AMT_CU_BASE <> 0
        position (+1,0)
        goto PrintEnd_BASE
        
       end-if
       
       Print $Retro_MT_Amt_BASE        (0,{col2})
       Print $Normal_MT_Amt_BASE       (0,{col3})
       Print $Monthly_Sum_BASE         (0,{col4})
       Print $Cumulative_Sum_BASE      (0,{col5})

       position (+1,0)

       PrintEnd_BASE:

       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_UNIT         = 'Y'

       if #RT_AMT_MT_UNIT = 0 and #NR_AMT_MT_UNIT = 0 and #Cumulative_Sum_UNIT = 0
          goto PrintEnd_UNIT
       end-if

       Print $PIN_NM_Unit              (0,{colh1}) !WRAP 25 1
       Print $PinDescr_Unit            (0,{col1})

       if $Print-Detail-Report = 'Y' and #RT_AMT_CU_UNIT <> 0 
         position (+1,0)
         goto PrintEnd_UNIT
      end-if

       Print $Retro_MT_Amt_UNIT        (0,{col2})
       Print $Normal_MT_Amt_UNIT       (0,{col3})
       Print $Monthly_Sum_UNIT         (0,{col4})
       Print $Cumulative_Sum_UNIT      (0,{col5})

       position (+1,0)

       PrintEnd_UNIT:

       end-if

       !------------------------------------------------------------------------------

     if $Print-Detail-Report <> 'Y'
       let #NR_AMT_MT_CALC      = 0
       let #NR_AMT_MT_BASE      = 0
       let #NR_AMT_MT_UNIT      = 0

       let #NR_AMT_CU_CALC      = 0
       let #NR_AMT_CU_BASE      = 0
       let #NR_AMT_CU_UNIT      = 0

       let #RT_AMT_MT_CALC      = 0
       let #RT_AMT_MT_BASE      = 0
       let #RT_AMT_MT_UNIT      = 0

       let #RT_AMT_CU_CALC      = 0
       let #RT_AMT_CU_BASE      = 0
       let #RT_AMT_CU_UNIT      = 0

       let #Cumulative_Sum_CALC = 0
       let #Cumulative_Sum_BASE = 0
       let #Cumulative_Sum_UNIT = 0
     end-if

#DEBUG show '<- Print-Data   '
end-procedure Print-Data
!****************************************
begin-procedure Print-Detail-Report
#DEBUG show '-> Print-Detail-Report   '

       
       

       do Format-Number(#DT_RT_AMT_MT_CALC   ,$DT_RT_AMT_MT_CALC   ,'B9,999,999,999.99mi')
       do Format-Number(#DT_RT_AMT_MT_BASE   ,$DT_RT_AMT_MT_BASE   ,'B9,999,999,999.99mi')
       do Format-Number(#DT_RT_AMT_MT_UNIT   ,$DT_RT_AMT_MT_UNIT   ,'B9,999,999,999.99mi')

       

      ! #DEBUG SHOW $PIN_NM ' , ' $PinDescr ' , ' #RT_AMT_MT ' , ' #NR_AMT_MT ' , ' #Cumulative_Sum
       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_CALC         = 'Y'

       if #RT_AMT_MT_CALC = 0 and #DT_RT_AMT_MT_CALC = 0 
          goto PrintEnd_CALC1
       end-if
       
       Print $DT_RT_DT                (0,{colh1}) 
       Print $DT_RT_AMT_MT_CALC       (0,{col2})
       
       position (+1,0)

       PrintEnd_CALC1:

       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_BASE         = 'Y'

       if #RT_AMT_MT_BASE = 0 and #DT_RT_AMT_MT_BASE = 0 
          goto PrintEnd_BASE1
       end-if

       print $DT_RT_DT                 (0,{colh1})       
       Print $DT_RT_AMT_MT_BASE       (0,{col2})
      
       position (+1,0)

       PrintEnd_BASE1:

       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_UNIT         = 'Y'

       if #RT_AMT_MT_UNIT = 0 and #DT_RT_AMT_MT_UNIT = 0 
          goto PrintEnd_UNIT1
       end-if

       print $DT_RT_DT                 (0,{colh1})  
       Print $DT_RT_AMT_MT_UNIT        (0,{col2})
       

       position (+1,0)

       PrintEnd_UNIT1:

       end-if

       !------------------------------------------------------------------------------


      

#DEBUG show '<- Print-Detail-Report   '
end-procedure Print-Detail-Report
!*****************************************************************************************
begin-procedure Print-Data-Total
#DEBUG show '-> Print-Data-Total   '

              let  #Monthly_Sum_CALC    = #RT_AMT_MT_CALC + #NR_AMT_MT_CALC
              let  #Monthly_Sum_BASE    = #RT_AMT_MT_BASE + #NR_AMT_MT_BASE
              let  #Monthly_Sum_UNIT    = #RT_AMT_MT_UNIT + #NR_AMT_MT_UNIT
               
              let  #Cumulative_Sum_CALC = #NR_AMT_CU_CALC + #RT_AMT_CU_CALC
              let  #Cumulative_Sum_BASE = #NR_AMT_CU_BASE + #RT_AMT_CU_BASE
              let  #Cumulative_Sum_UNIT = #NR_AMT_CU_UNIT + #RT_AMT_CU_UNIT
       
              do Format-Number(#RT_AMT_MT_CALC     ,$Retro_MT_Amt_CALC  ,'B9,999,999,999.99mi')
              do Format-Number(#RT_AMT_MT_BASE     ,$Retro_MT_Amt_BASE  ,'B9,999,999,999.99mi')
              do Format-Number(#RT_AMT_MT_UNIT     ,$Retro_MT_Amt_UNIT  ,'B9,999,999,999.99mi')
       
              do Format-Number(#NR_AMT_MT_CALC     ,$Normal_MT_Amt_CALC ,'B9,999,999,999.99mi')
              do Format-Number(#NR_AMT_MT_BASE     ,$Normal_MT_Amt_BASE ,'B9,999,999,999.99mi')
              do Format-Number(#NR_AMT_MT_UNIT     ,$Normal_MT_Amt_UNIT ,'B9,999,999,999.99mi')
       
              do Format-Number(#Monthly_Sum_CALC   ,$Monthly_Sum_CALC   ,'B9,999,999,999.99mi')
              do Format-Number(#Monthly_Sum_BASE   ,$Monthly_Sum_BASE   ,'B9,999,999,999.99mi')
              do Format-Number(#Monthly_Sum_UNIT   ,$Monthly_Sum_UNIT   ,'B9,999,999,999.99mi')
       
              do Format-Number(#Cumulative_Sum_CALC,$Cumulative_Sum_CALC,'B9,999,999,999.99mi')
              do Format-Number(#Cumulative_Sum_BASE,$Cumulative_Sum_BASE,'B9,999,999,999.99mi')
              do Format-Number(#Cumulative_Sum_UNIT,$Cumulative_Sum_UNIT,'B9,999,999,999.99mi')
              
              

      ! #DEBUG SHOW $PIN_NM ' , ' $PinDescr ' , ' #RT_AMT_MT ' , ' #NR_AMT_MT ' , ' #Cumulative_Sum
       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_CALC         = 'Y'
       

       if #RT_AMT_CU_CALC <> 0 and( #NR_AMT_MT_CALC <> 0 OR #Cumulative_Sum_CALC <> 0 )
       
       
       Print $TOTAL                    (0,{colh1})
       Print $Retro_MT_Amt_CALC        (0,{col2})
       Print $Normal_MT_Amt_CALC       (0,{col3})
       Print $Monthly_Sum_CALC         (0,{col4})
       Print $Cumulative_Sum_CALC      (0,{col5})

       position (+2,0)

       end-if
       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_BASE         = 'Y'

       if #RT_AMT_CU_BASE <> 0 and (#NR_AMT_MT_BASE <> 0 OR #Cumulative_Sum_BASE <> 0 )
       
       Print $TOTAL                    (0,{colh1})           
       Print $Retro_MT_Amt_BASE        (0,{col2})
       Print $Normal_MT_Amt_BASE       (0,{col3})
       Print $Monthly_Sum_BASE         (0,{col4})
       Print $Cumulative_Sum_BASE      (0,{col5})

       position (+2,0)
       end-if
       end-if

       !------------------------------------------------------------------------------
       if $GPCH_BL_PR_UNIT         = 'Y'

       if #RT_AMT_CU_UNIT <> 0 and( #NR_AMT_MT_UNIT <> 0 OR #Cumulative_Sum_UNIT <> 0 )
       
       Print $TOTAL                    (0,{colh1})
       Print $Retro_MT_Amt_UNIT        (0,{col2})
       Print $Normal_MT_Amt_UNIT       (0,{col3})
       Print $Monthly_Sum_UNIT         (0,{col4})
       Print $Cumulative_Sum_UNIT      (0,{col5})

       position (+2,0)
       end-if

       end-if

       !------------------------------------------------------------------------------


       let #NR_AMT_MT_CALC      = 0
       let #NR_AMT_MT_BASE      = 0
       let #NR_AMT_MT_UNIT      = 0

       let #NR_AMT_CU_CALC      = 0
       let #NR_AMT_CU_BASE      = 0
       let #NR_AMT_CU_UNIT      = 0

       let #RT_AMT_MT_CALC      = 0
       let #RT_AMT_MT_BASE      = 0
       let #RT_AMT_MT_UNIT      = 0

       let #RT_AMT_CU_CALC      = 0
       let #RT_AMT_CU_BASE      = 0
       let #RT_AMT_CU_UNIT      = 0

       let #Cumulative_Sum_CALC = 0
       let #Cumulative_Sum_BASE = 0
       let #Cumulative_Sum_UNIT = 0

#DEBUG show '<- Print-Data-Total   '
end-procedure Print-Data-Total 

!****************************************************************************


begin-procedure Print-Blank-Line

print ''                                        (+1,0)

end-procedure

!****************************************************************************
begin-procedure Get-Normal-Data
#DEBUG show '-> Get-Normal-Data  '


   clear-array name=NormalData
   create-array name=NormalData size={SQR_Strings_Array_Size}
      field=NR_PINNUM:number
      field=NR_CALC_MT:number
      field=NR_BASE_MT:number
      field=NR_UNIT_MT:number
      field=NR_CALC_CU:number
      field=NR_BASE_CU:number
      field=NR_UNIT_CU:number

   let #NR_PIN_NUM_OLD = 0
   let #NR_Cnt         = 0

Begin-Select
SS.PIN_NUM              &SS.PIN_NUM
PR.PRD_END_DT           &PR.PRD_END_DT
SUM(SS.CALC_RSLT_VAL)   &NR_CALC
SUM(SS.BASE_RSLT_VAL)   &NR_BASE
SUM(SS.UNIT_RSLT_VAL)   &NR_UNIT

   let #NR_PIN_NUM    = &SS.PIN_NUM
       
   if (#NR_PIN_NUM <> #NR_PIN_NUM_OLD) AND (#NR_PIN_NUM_OLD <> 0)

       do Put-Normal-Data  ! Adding data to Array

   end-if

   let $NR_DATE       = &PR.PRD_END_DT
        
   let #NR_CALC_CU    = #NR_CALC_CU + &NR_CALC
   let #NR_BASE_CU    = #NR_BASE_CU + &NR_BASE
   let #NR_UNIT_CU    = #NR_UNIT_CU + &NR_UNIT

    
   do ConvertToComponents($NR_DATE,$NR_YY,$NR_MM,$NR_DD)


   if $NR_MM = $mmmm   ! To get Current Month's "Actual Amount"
      let #NR_CALC_MT    = &NR_CALC
      let #NR_BASE_MT    = &NR_BASE
      let #NR_UNIT_MT    = &NR_UNIT
    
   end-if

   let #NR_PIN_NUM_OLD   = #NR_PIN_NUM

FROM  PS_GP_CAL_RUN PRS, PS_GP_CAL_RUN_DTL PR, PS_GP_RSLT_ERN_DED SS, PS_GPCH_BL_PRINT D , PS_GP_RSLT_PIN DR [$Record_Rslt_Pin_DS]
WHERE PRS.CAL_RUN_ID        = PR.CAL_RUN_ID
AND   SS.CAL_RUN_ID         = PR.CAL_RUN_ID
AND   SS.CAL_ID             = PR.CAL_ID
AND    SS.EMPLID            = DR.EMPLID
AND    SS.CAL_RUN_ID        = DR.CAL_RUN_ID
AND    SS.EMPL_RCD          = DR.EMPL_RCD
AND    SS.GP_PAYGROUP       = DR.GP_PAYGROUP
AND    SS.CAL_ID            = DR.CAL_ID
{Where_Orig_Cal_Id_AL081}
AND    SS.RSLT_SEG_NUM      = DR.RSLT_SEG_NUM
AND    SS.SLICE_BGN_DT      = DR.SLICE_BGN_DT
AND    SS.SLICE_END_DT      = DR.SLICE_END_DT
AND    DR.PIN_NUM           = #Company_Pin
AND   D.PIN_NUM             = SS.PIN_NUM
[$Dept_DS_And_Clause]
AND   D.GPCH_RC_REPORTNAME  =  $Ctl_Print
AND   D.EFF_STATUS          = 'A'
AND   PR.PRD_BGN_DT        >= $Rpt_Start_Dt
AND   PR.PRD_END_DT        <= $Rpt_End_Dt
AND  (PRS.RUN_FINALIZED_IND ='Y' OR PRS.RUN_OPEN_IND='Y')
AND   PR.CALC_TYPE          = 'P'
AND   PR.PAY_ENTITY         = $Ctl_PayEntity
AND   DR.EMPLID IN (SELECT DISTINCT EMPLID FROM PS_GP_RSLT_PIN WHERE PIN_NUM = #Company_Pin )
[$Company_Criteria_DR]
[$Dept_Criteria_DS]
GROUP BY SS.PIN_NUM,PR.PRD_END_DT
ORDER BY SS.PIN_NUM,PR.PRD_END_DT
End-Select
     
       do Put-Normal-Data

#Debug show '<- Get-Normal-Data  '
End-procedure Get-Normal-Data
!****************************************************************************
begin-procedure Put-Normal-Data
#DEBUG show '-> Put-Normal-Data  ' #NR_PIN_NUM_OLD  ' , ' #NR_CALC_MT ' , ' #NR_BASE_MT ' , '  #NR_UNIT_MT

       put #NR_PIN_NUM_OLD INTO NormalData(#NR_Cnt) NR_PINNUM
       put #NR_CALC_MT     INTO NormalData(#NR_Cnt) NR_CALC_MT
       put #NR_BASE_MT     INTO NormalData(#NR_Cnt) NR_BASE_MT
       put #NR_UNIT_MT     INTO NormalData(#NR_Cnt) NR_UNIT_MT

       put #NR_CALC_CU     INTO NormalData(#NR_Cnt) NR_CALC_CU
       put #NR_BASE_CU     INTO NormalData(#NR_Cnt) NR_BASE_CU
       put #NR_UNIT_CU     INTO NormalData(#NR_Cnt) NR_UNIT_CU

       let #NR_Cnt = #NR_Cnt + 1

       let #NR_CALC_MT    = 0
       let #NR_BASE_MT    = 0
       let #NR_UNIT_MT    = 0

       let #NR_CALC_CU    = 0
       let #NR_BASE_CU    = 0
       let #NR_UNIT_CU    = 0

#Debug show '<- Put-Normal-Data  '
End-procedure Put-Normal-Data
!****************************************************************************
begin-procedure Fill-Temp-Table
#DEBUG show '-> Fill-Temp-Table  '

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHAL088_TMP(PROCESS_INSTANCE,EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,ORIG_CAL_RUN_ID,
RSLT_SEG_NUM,INSTANCE,PIN_NUM,SLICE_BGN_DT,SLICE_END_DT,CALC_RSLT_VAL,CHR_PIN_VAL,DATE_PIN_VAL,PIN_VAL_NUM)

#ifdef ORACLE
SELECT /*+ INDEX(R PS_GP_RSLT_PIN)*/
#else
SELECT
#endif

[$prcs_process_instance],P.EMPLID,P.CAL_RUN_ID,P.EMPL_RCD,P.GP_PAYGROUP,P.CAL_ID,P.ORIG_CAL_RUN_ID,
P.RSLT_SEG_NUM,P.INSTANCE,P.PIN_NUM,P.SLICE_BGN_DT,P.SLICE_END_DT,P.CALC_RSLT_VAL,P.CHR_PIN_VAL,P.DATE_PIN_VAL,P.PIN_VAL_NUM FROM PS_GP_RSLT_PIN P
                 WHERE P.PIN_NUM         = #Company_Pin [$Dept_Or_Condition]


end-sql


Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHAL088_TMP(PROCESS_INSTANCE,EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,ORIG_CAL_RUN_ID,
RSLT_SEG_NUM,INSTANCE,PIN_NUM,SLICE_BGN_DT,SLICE_END_DT,CALC_RSLT_VAL,CHR_PIN_VAL,DATE_PIN_VAL,PIN_VAL_NUM)

#ifdef ORACLE
SELECT /*+ INDEX(R PS_GP_RSLT_PIN)*/
#else
SELECT
#endif

[$prcs_process_instance],A.EMPLID,B.CAL_RUN_ID,A.EMPL_RCD,A.GP_PAYGROUP,A.CAL_ID,
A.ORIG_CAL_RUN_ID,A.RSLT_SEG_NUM,A.INSTANCE,A.PIN_NUM,A.SLICE_BGN_DT,A.SLICE_END_DT,A.CALC_RSLT_VAL,
A.CHR_PIN_VAL,A.DATE_PIN_VAL,A.PIN_VAL_NUM FROM PS_GP_RSLT_PIN A,PS_GP_PYE_SEG_STAT B, PS_GP_PYE_SEG_STAT B1 [$Record_Rslt_Pin_C]
                     where B.CALC_ACTION = 'V'
                    ! link B and B1 by RSLT_VER_NUM - 1 (otherwise by using GP_PYE_PRC_STAT and PRIOR_REV_NUM )
                       AND B.EMPLID = B1.EMPLID
                     ! AND B.CAL_RUN_ID = A.CAL_RUN_ID
                       AND B.EMPL_RCD = B1.EMPL_RCD
                       AND B.GP_PAYGROUP = B1.GP_PAYGROUP
                       AND B.CAL_ID = B1.CAL_ID
                       AND B.ORIG_CAL_RUN_ID = B1.ORIG_CAL_RUN_ID
                       AND B.RSLT_SEG_NUM = B1.RSLT_SEG_NUM
                       AND B.RSLT_VER_NUM - 1 = B1.RSLT_VER_NUM
                       AND B1.EMPLID = A.EMPLID
                       AND B1.CAL_RUN_ID = A.CAL_RUN_ID
                       AND B1.EMPL_RCD=A.EMPL_RCD
                       AND B1.GP_PAYGROUP=A.GP_PAYGROUP
                       AND B1.CAL_ID=A.CAL_ID
                       AND B1.ORIG_CAL_RUN_ID=A.ORIG_CAL_RUN_ID
                       AND B1.RSLT_SEG_NUM= A.RSLT_SEG_NUM
                       AND A.PIN_NUM = #Company_Pin
                       [$Dept_C_And_Clause]



end-sql

#Debug show '<- Fill-Temp-Table  '
End-procedure Fill-Temp-Table

!****************************************************************************
begin-procedure Get-Retro-Data
#DEBUG show '-> Get-Retro-Data  '


    do Fill-Temp-Table !procedure to fill temp table GPCHAL088_TMP

   clear-array name=RetroData
   create-array name=RetroData size={SQR_Strings_Array_Size}
      field=RT_PINNUM:number
      field=RT_CALC_MT:number
      field=RT_BASE_MT:number
      field=RT_UNIT_MT:number
      field=RT_CALC_CU:number
      field=RT_BASE_CU:number
      field=RT_UNIT_CU:number
      field=RT_FORWARD:number !syed for 89b15 
     

   let #RT_PIN_NUM_OLD = 0
   let #RT_Cnt         = 0
   let #RT_FORWARD     = 0 !syed
 
Begin-Select
SD.PIN_NUM               &SD.PIN_NUM
PR1.PRD_END_DT           &PR1.PRD_END_DT
SD.FORWARD_IND           &SD.FORWARD_IND !syed
SUM(SD.CALC_DELTA_VAL)   &RT_CALC
SUM(SD.BASE_DELTA_VAL)   &RT_BASE
SUM(SD.UNIT_DELTA_VAL)   &RT_UNIT

   let #RT_PIN_NUM    = &SD.PIN_NUM

   if (#RT_PIN_NUM <> #RT_PIN_NUM_OLD) AND (#RT_PIN_NUM_OLD <> 0)

       do Put-Retro-Data  ! Adding data to Array

   end-if
 
   let $RT_DATE       = &PR1.PRD_END_DT

   let #RT_CALC_CU    = #RT_CALC_CU + &RT_CALC
   let #RT_BASE_CU    = #RT_BASE_CU + &RT_BASE
   let #RT_UNIT_CU    = #RT_UNIT_CU + &RT_UNIT
   !***********************Syed******************************    
    let  $forward_chk= rtrim(ltrim(&SD.FORWARD_IND,' '),' ')
    
      If $forward_chk='Y'
     let #RT_FORWARD=1
          else
        let #RT_FORWARD=0
       End-If
   !******************************************************
       

   do ConvertToComponents($RT_DATE,$RT_YY,$RT_MM,$RT_DD)


   if $RT_MM = $mmmm   ! To get Current Month's "Actual Amount"
      let #RT_CALC_MT    = &RT_CALC
      let #RT_BASE_MT    = &RT_BASE
      let #RT_UNIT_MT    = &RT_UNIT
      
   end-if

   let #RT_PIN_NUM_OLD   = #RT_PIN_NUM

FROM  PS_GP_CAL_RUN PRS1,PS_GP_CAL_RUN_DTL PR1,PS_GP_RSLT_DELTA SD,PS_GPCH_BL_PRINT D,PS_GP_PYE_SEG_STAT SD1 , PS_GPCHAL088_TMP DR1 [$Record_Gpchal_08_DR2]
WHERE DR1.PROCESS_INSTANCE  = #prcs_process_instance
AND   PRS1.CAL_RUN_ID       = PR1.CAL_RUN_ID
AND   SD.CAL_RUN_ID         = PR1.CAL_RUN_ID
AND   SD.EMPLID             = SD1.EMPLID
AND   SD.CAL_RUN_ID         = SD1.CAL_RUN_ID
AND   SD.EMPL_RCD           = SD1.EMPL_RCD
AND   SD.GP_PAYGROUP        = SD1.GP_PAYGROUP
AND   SD.CAL_ID             = SD1.CAL_ID
AND   SD.RSLT_SEG_NUM       = SD1.RSLT_SEG_NUM
AND   SD.EMPLID            = DR1.EMPLID
AND   SD.CAL_RUN_ID        = DR1.CAL_RUN_ID
AND   SD.EMPL_RCD          = DR1.EMPL_RCD
AND   SD.GP_PAYGROUP       = DR1.GP_PAYGROUP
AND   PR1.GP_PAYGROUP = DR1.GP_PAYGROUP
AND   SD.CAL_ID            = DR1.CAL_ID
{Where_Orig_Cal_Id_AL082} 
AND    SD.RSLT_SEG_NUM      = DR1.RSLT_SEG_NUM
AND    DR1.PIN_NUM          = #Company_Pin
[$Dept_Criteria_DR2]
AND   D.PIN_NUM             = SD.PIN_NUM
AND   D.GPCH_RC_REPORTNAME  =  $Ctl_Print
AND   D.EFF_STATUS          = 'A'
AND  (PRS1.RUN_FINALIZED_IND ='Y' OR PRS1.RUN_OPEN_IND='Y')
AND   PR1.PRD_BGN_DT        >= $Rpt_Start_Dt
AND   PR1.PRD_END_DT        <= $Rpt_End_Dt
AND   PR1.PAY_ENTITY         = $Ctl_PayEntity
AND   SD.PAY_ENTITY          = $Ctl_PayEntity
AND   PR1.CALC_TYPE          = 'P'
AND   DR1.EMPLID IN (SELECT DISTINCT EMPLID FROM PS_GP_RSLT_PIN WHERE PIN_NUM = #Company_Pin )
[$Company_Criteria_DR1]
[$Dept_ID_Criteria_DR2]
GROUP BY SD.PIN_NUM,PR1.PRD_END_DT,SD.FORWARD_IND
ORDER BY SD.PIN_NUM,PR1.PRD_END_DT
End-Select
    

       do Put-Retro-Data

#Debug show '<- Get-Retro-Data  '
End-procedure Get-Retro-Data
!*************************************************************************************************

begin-procedure Get-Retro-Data-Detail
#DEBUG show '-> Get-Retro-Data-Detail  '


Begin-Select
SD2.PIN_NUM,               
SD1.SEG_BGN_DT, 
      
SUM(SD2.CALC_DELTA_VAL)  &DT_RT_CALC  
SUM(SD2.BASE_DELTA_VAL)  &DT_RT_BASE 
SUM(SD2.UNIT_DELTA_VAL)   &DT_RT_UNIT
    
    
   do ConvertToComponents(&SD1.SEG_BGN_DT,$RT_YY,$RT_MM,$RT_DD)   
   
   do Put-Retro-Data-Detail  ! Adding data to tmp table

FROM  PS_GP_CAL_RUN PRS1,PS_GP_CAL_RUN_DTL PR2,PS_GP_RSLT_DELTA SD2,PS_GPCH_BL_PRINT D,PS_GP_PYE_SEG_STAT SD1 , PS_GP_RSLT_PIN DR1 [$Record_Rslt_Pin_DR2]
WHERE PRS1.CAL_RUN_ID       = PR2.CAL_RUN_ID
AND   SD2.CAL_RUN_ID         = PR2.CAL_RUN_ID
AND   SD2.EMPLID             = SD1.EMPLID
AND   SD2.ORIG_CAL_RUN_ID    = SD1.CAL_RUN_ID
AND   SD2.EMPL_RCD           = SD1.EMPL_RCD
AND   SD2.GP_PAYGROUP        = SD1.GP_PAYGROUP
AND   SD2.CAL_ID             = SD1.CAL_ID
AND   SD2.RSLT_SEG_NUM       = SD1.RSLT_SEG_NUM
AND    SD2.EMPLID            = DR1.EMPLID
AND    SD2.CAL_RUN_ID        = DR1.CAL_RUN_ID
AND    SD2.EMPL_RCD          = DR1.EMPL_RCD
AND    SD2.GP_PAYGROUP       = DR1.GP_PAYGROUP
AND    SD2.CAL_ID            = DR1.CAL_ID
AND    SD2.RSLT_SEG_NUM      = DR1.RSLT_SEG_NUM
AND    DR1.PIN_NUM           = #Company_Pin
[$Dept_Criteria_DR2_Ext]
AND   D.PIN_NUM             = SD2.PIN_NUM
AND   D.GPCH_RC_REPORTNAME  =  $Ctl_Print
AND   D.EFF_STATUS          = 'A'
AND  (PRS1.RUN_FINALIZED_IND ='Y' OR PRS1.RUN_OPEN_IND='Y')
AND   PR2.PRD_BGN_DT        >= $Rpt_Start_Dt
AND   PR2.PRD_END_DT        <= $Rpt_End_Dt
AND   PR2.PAY_ENTITY         = $Ctl_PayEntity
AND   SD2.PAY_ENTITY         = $Ctl_PayEntity
AND   PR2.CALC_TYPE          = 'P'
AND   DR1.EMPLID IN (SELECT DISTINCT EMPLID FROM PS_GP_RSLT_PIN WHERE PIN_NUM = #Company_Pin )
GROUP BY SD2.PIN_NUM,SD1.SEG_BGN_DT
ORDER BY SD2.PIN_NUM,SD1.SEG_BGN_DT
End-Select
do Commit_Trans


#Debug show '<- Get-Retro-Data-Detail  '
End-procedure Get-Retro-Data-Detail
!****************************************************************************

begin-procedure Put-Retro-Data-Detail
#DEBUG show '-> Put-Retro-Data-Detail  ' #RT_PIN_NUM_OLD ' , ' #RT_CALC_MT ' , '  #RT_BASE_MT ' , ' #RT_UNIT_MT ' , ' #RT_CALC_CU ' , ' #RT_BASE_CU ' , ' #RT_UNIT_CU

Begin-Sql on-error=give_warning
 INSERT INTO PS_GPCHAL081_TMP(PROCESS_INSTANCE,GPCH_PIN_NUM, GPCH_RP_FROMDT1,GPCH_RP_AMOUNT1,GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3)VALUES(#prcs_process_instance,&SD2.PIN_NUM,&SD1.SEG_BGN_DT,&DT_RT_CALC,&DT_RT_BASE,&DT_RT_UNIT) 
End-Sql


#Debug show '<- Put-Retro-Data-Detail  '
End-procedure Put-Retro-Data-Detail
!****************************************************************************
begin-procedure Put-Retro-Data
#DEBUG show '-> Put-Retro-Data  ' #RT_PIN_NUM_OLD ' , ' #RT_CALC_MT ' , '  #RT_BASE_MT ' , ' #RT_UNIT_MT ' , ' #RT_CALC_CU ' , ' #RT_BASE_CU ' , ' #RT_UNIT_CU

       put #RT_PIN_NUM_OLD INTO RetroData(#RT_Cnt) RT_PINNUM
       put #RT_CALC_MT     INTO RetroData(#RT_Cnt) RT_CALC_MT
       put #RT_BASE_MT     INTO RetroData(#RT_Cnt) RT_BASE_MT
       put #RT_UNIT_MT     INTO RetroData(#RT_Cnt) RT_UNIT_MT

       put #RT_CALC_CU     INTO RetroData(#RT_Cnt) RT_CALC_CU
       put #RT_BASE_CU     INTO RetroData(#RT_Cnt) RT_BASE_CU
       put #RT_UNIT_CU     INTO RetroData(#RT_Cnt) RT_UNIT_CU
       put #RT_FORWARD     INTO RetroData(#RT_Cnt) RT_FORWARD !syed 

       let #RT_Cnt = #RT_Cnt + 1

       let #RT_CALC_MT    = 0
       let #RT_BASE_MT    = 0
       let #RT_UNIT_MT    = 0

       let #RT_CALC_CU    = 0
       let #RT_BASE_CU    = 0
       let #RT_UNIT_CU    = 0

#Debug show '<- Put-Retro-Data  '
End-procedure Put-Retro-Data
!***************************************************************************
Begin-Procedure Delete-Temp-Record
#Debug Show 'Delete-Temp-Record -> '


Begin-Sql on-error=give_warning
    delete from PS_GPCHAL081_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql


Begin-Sql on-error=give_warning
    delete from PS_GPCHAL088_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql


do Commit_Trans

#Debug Show 'Delete-Temp-Record <- '
End-Procedure Delete-Temp-Record
!***************************************************************************
begin-procedure Commit_Trans
  #ifdef SYBASE
    Begin-Sql on-error=give_warning
      COMMIT TRANSACTION
    End-SQL
  #endif

  #ifdef MICROSOFT
   !    Begin-Sql on-error=give_warning
   !     COMMIT TRANSACTION
   !  End-SQL
  #endif

  #ifdef INFORMIX
     Begin-Sql on-error=give_warning
       COMMIT WORK
     End-SQL
  #endif

  #ifdef ORACLE
      COMMIT
  #endif
end-procedure Commit_Trans
!****************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL08'
               do Get_Eng_GPCHAL08
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL08'
               do Get_Ger_GPCHAL08
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHAL08'
               do Get_Ita_GPCHAL08
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL08'
               do Get_Fra_GPCHAL08
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************


#include 'gpchut01.sqc'    !Get Strings Values
#include 'gpchut02.sqc'    !Get Pin Name and Pin Description
#include 'gpchut03.sqc'    !Get Ask Input Parameters
#include 'gpchut04.sqc'    !Get Various Addresses
#include 'gpchut06.sqc'    !Get Run Control Values and Sort Order Parameters
#include 'gpchut07.sqc'    !Get Log Output Selection
#include 'gpchal8s.sqc'    !Get Strings Values for GPCHAL08
#include 'gpchglbs.sqc'    !Get Strings Values for GPCHGLOB

#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures





