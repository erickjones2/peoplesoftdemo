!***********************************************************************
!  GPDEBK02.SQR: Bankliste                                             *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:31                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************
! he 01/13/04 - sum/detail for diff payment types
! he 01/14/04 - recipient id for sum payment types printed
!             - sum per payment type (correction)
! he 01/15/04 - negativ-Liste nur bei Sum <0, nicht bei Einzelbetrag
! wdu-89mp1   - removed commented having-clause
! wdu-89MP1 os390 requires ORDER BY and HAVING outside of the variable clause in GROUP BY context
!-----------------------------------------------------------------------
#include 'setenv.sqc'   ! set environment

#define col0        10
#define col1        40
#define col01       40
#define col2        55
#define col3        85
#define col4        115

#define PAGE_SIZE A4

begin-REPORT
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-REPORT

#include 'setup31.sqc'  ! set printer and page-size initialisation





!************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
    input $Ctl_Curr_Pay_End_Dt  'Current Pay End Date'
    input $Ctl_PayEntity 'Firma'
    input $Ctl_Paygroup 'Abrechnungskreis'
    input $Ctl_Homebank 'Hausbank'
  else
    do Get-Report-Parameters
  end-if

  move 'GPDEBK02' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE1_STR
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report




!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPDEBK02', 'REPORT_ID_STR',           $REPORT_ID_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'TITLE1_STR',                 $TITLE1_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'EMPL_ID_STR',               $EMPL_ID_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'PAGE_NR_STR',               $PAGE_NR_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'RUN_DATE_STR',             $RUN_DATE_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'SRC_BANK_STR',             $SRC_BANK_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'BANK_ID_STR',               $BANK_ID_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'BANK_NAME1_STR',         $BANK_NAME1_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'ACCOUNT1_STR',             $ACCOUNT1_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'BANK_ID2_STR',             $BANK_ID2_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'BANK_NAME2_STR',         $BANK2_NAME_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'CONTRACT_STR',             $CONTRACT_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'AMOUNT_STR',                 $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'NAME_STR',                     $NAME_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'ACCOUNT3_STR',             $ACCOUNT3_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'RECEIVER_STR',             $RECEIVER_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'COUNTRY_CD_STR',         $COUNTRY_CD_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'SUM_PAY_BK_STR',         $SUM_PAY_BK_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'SUM_PAY_TYPE_STR',     $SUM_PAY_TYPE_STR,#CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',               $AMOUNT_IN_STR,#CW)
  do Get_Field_Information ('GPDEGLOB', 'ASOFDATE',                 $ASOFDATE_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'CASH_STR',                     $CASH_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'CHECK_STR',                   $CHECK_STR,#CW)
  do Get_Field_Information ('GPDEBK02', 'POST_STR',                     $POST_STR,#CW)
  do Strings_Pads($AMOUNT_STR, $AMOUNT_STR1, 13)
end-Procedure Report-Translation




!**********************************************************************************************
begin-procedure Strings_Pads($Str1, :$Str2, #Len1)
   let $Str1 = rtrim(ltrim($Str1, ' '), ' ')
   let $Str1 = rtrim(substr($Str1, 1, #Len1), ' ')
   let $Str2 = lpad($Str1, #Len1, ' ')
end-procedure
!**********************************************************************************************



! ****************************************************************************
begin-procedure Get_Hom_Bank_Crit
begin-select
SRC1.BANK_CD
SRC1.COUNTRY_CD
   let $Ctl_Bank_CD = &SRC1.BANK_CD
   let $Ctl_Country_CD = &SRC1.COUNTRY_CD
   if rtrim($Ctl_Bank_CD,' ') <> ''
      let $cond1b = ' AND PBD1.GPDE_BK_TRNST_ISSR  = ''' || $Ctl_Bank_CD || ''''
      let $cond1 = ' AND PBD.GPDE_BK_TRNST_ISSR  = ''' || $Ctl_Bank_CD || ''''
      let $cond1a = ' AND P2D.GPDE_BK_TRNST_ISSR  = ''' || $Ctl_Bank_CD || ''''
   else
      let $cond1b = ' '
      let $cond1 = ' '
      let $cond1a = ' '
   end-if

   if rtrim($Ctl_Country_CD,' ') <> ''
      let $cond2b = ' AND PBD1.GPDE_BK_CNTRY_ISSR  = ''' || $Ctl_Country_CD || ''''
      let $cond2 = ' AND PBD.GPDE_BK_CNTRY_ISSR  = ''' || $Ctl_Country_CD || ''''
      let $cond2a = ' AND P2D.GPDE_BK_CNTRY_ISSR  = ''' || $Ctl_Country_CD || ''''
   else
      let $cond2b = ' '
      let $cond2 = ' '
      let $cond2a = ' '
   end-if
   let $Ctl_HomeBnk-crit-b = $cond1b || $cond2b
   let $Ctl_HomeBnk-crit = $cond1 || $cond2
   let $Ctl_HomeBnk-crit-a = $cond1a || $cond2a
from PS_SRC_BANK SRC1
where SRC1.SRC_BANK_ID = $Ctl_Homebank
end-select
end-procedure




!****************************************************************************
! not referenced in this file
begin-procedure Get-Values

  let $Ctl_Homebank_Crit    = ''
  let $language_cd       = $PRCS_LANGUAGE_CD
  let $Ctl_Homebank         = rtrim(&GPDE_RUN_CNTL.SRC_BANK_ID,' ')
  let $Src_Bank_id =            $Ctl_Homebank
  let $Ctl_HomeBnk-crit = ' '

  if $Ctl_Homebank <> ''
 do Get_Hom_Bank_Crit
  end-if

  let $Ctl_PayEntity          = rtrim(&GPDE_RUN_CNTL.PAY_ENTITY, ' ')
  let $Ctl_Paygroup = RTRIM(&GPDE_RUN_CNTL.GP_PAYGROUP, ' ')

  if rtrim($Ctl_Paygroup,' ') <> ''
   let $condition0 = 'AND PBD1.GP_PAYGROUP = ' || '''' || '' ||
                      rtrim($Ctl_Paygroup,' ') || '' || ''''
   let $condition1 = 'AND PBD.GP_PAYGROUP = ' || '''' || '' ||
                      rtrim($Ctl_Paygroup,' ') || '' || ''''
   let $condition1a = 'AND P2D.GP_PAYGROUP = ' || '''' || '' ||
                      rtrim($Ctl_Paygroup,' ') || '' || ''''
  else
   let $condition1 = ' '
   let $condition1a = ' '
  end-if

end-procedure Get-Values





!*****************************************************************************
begin-procedure Process-Main
do Get_VersionNr
do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt1,{DEFDATE},'','')
do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
   let $EuroString = $AMOUNT_IN_STR || ' EURO'
   let $Eur = 'EUR'
else
   let $EuroString = $AMOUNT_IN_STR || ' DM'
   let $Eur = 'DEM'
end-if

!old logic: let $PaymentMethodStr = ' AND PBD.PAYMENT_MTHD  =  ' || '''T'''

let $PaymentMethodStr = 'T'
do Process-Main1
let $ReportTitle =  $CASH_STR
let $PaymentMethodStr = 'A'
do Process-Main1
let $ReportTitle =  $CHECK_STR
let $PaymentMethodStr = 'C'
do Process-Main1
let $ReportTitle =  $POST_STR
let $PaymentMethodStr = 'P'
do Process-Main1
end-procedure






! ****************************************************************************
begin-procedure Process-Main1
let $string     = ''
let $string1    = ''
let $type0      = '''1'','
let $type1      = '''3'','
let $type2      = '''4'',''L'',''M'','
let $type3      = '''6'','
let $type4      = '''7'','
let $type5      = '''8'','
let $type6      = '''9'','
let $type7      = '''V'','
let $type8      = '''B'''
let $typex      = ''' '''

!he 071603
!let $string = $string || $type0 || $type1 || $type2 || $type3 || $type4 || $type5 ||
!              $type6 || $type7 || $type8

let $string = $string || $type0 || $type3 || $type4 || $type5 ||
              $type6 || $type7 || $typex
let $string1 = $string1 || $type3 || $type4 || $type5 ||
              $type6 || $type7 || $typex
let $Intermediate_Sum = 'N'

let $PaymentTypeList = $string
Let $PaymentTypeList1 = $String1
! #debug show '$PaymentTypeList :' $PaymentTypeList

!he 112603
!let $order  = 'ORDER BY PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,' ||
!              'PBD.EMPLID,PBD.PAY_ENTITY,PBD.GPDE_BK_TRNST_RCVR'
! --- now sorting by receiver name instead of emplid

! wdu-89MP1 os390 requires ORDER BY and HAVING outside of the variable clause in GROUP BY context

    let $order  = 'PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,' ||
              'PBD.GPDE_BK_ACCT_NM_RC, PBD.PAY_ENTITY,PBD.GPDE_BK_TRNST_RCVR'

!wd20040507: old grouping
!let $Group_Citeri  = 'GROUP BY PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,' ||
!                     'PBD.GPDE_BK_TRNST_RCVR,PBD.GPDE_BK_ACCT_NM_RC,PBD.EMPLID,' ||
!      'PBD.CURRENCY_CD,PBD.GPDE_BK_CNTRY_RCVR,PBD.GPDE_BK_CNTRY_ISSR,' ||
!      'PBD.GPDE_BK_ACCT_ISSR,PBD.GPDE_BK_ACCT_RCVR,' ||
!      'PBD.GPDE_BK_PUR_TRNFER,PBD.PAY_ENTITY,' ||
!      'PBD.SEG_END_DT,PBD.GP_PMT_AMT,PBD.RECIPIENT_ID'
!
!wd20040507: new grouping
! for the select we need to remove the DISTINCT , for he group we need to remove
! the field PBD.GP_PMT_AMT and do a sum on it.
! Otherwise identical rows would be lost

! WARNING:
!  seems like we need to hardcode the group by when we have aggregate functions in the
!  select list. So this variable has no real use.
!  removed: let $Group_Citeri  = 'GROUP BY ...'

!wd 20040511: grouping for social insurance only, set to blank for now
let $HavingClause = ' '

!wd 20040511: do not count payments with invalid receiver
let $ReceiverIdCrit = ' AND PBD.GPDE_BK_TRNST_RCVR<>'' '' AND PBD.GPDE_BK_ACCT_RCVR <> '' '' '
let $ReceiverIdCrit1 = ' AND PBD1.GPDE_BK_TRNST_RCVR<>'' '' AND PBD1.GPDE_BK_ACCT_RCVR <> '' '' '



!
!#debug show $Group_Citeri

! HE 011304 - employee details and sum selection
let $DetailTypes = '16789V'      !payment types with details per employee

!********************************************************************************************
! +++++++++++++++++++++++++++++++++++
! positive payments
! +++++++++++++++++++++++++++++++++++
!
let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT > 0 '
Let $Amount_Sign_Term1 = ' AND PBD1.GP_PMT_AMT > 0 '
!do Initial_Vars
do Set_Terms
if $Exists_Data = 'Y'
new-page
end-if

! +++++++++++++++++++++++++++++++++++
! negative payments to separate page
! +++++++++++++++++++++++++++++++++++
!
! set #xfer sums to 0
do Initial_Vars
let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT <= 0 '
let $Amount_Sign_Term1 = ' AND PBD1.GP_PMT_AMT <= 0 '
do Set_Terms
if $Exists_Data = 'Y'
new-page
end-if



! ########################################
! separate sequence for provider transfers
! ########################################
let $string =   $type1 || $type2 || $type8
let $PaymentTypeList =  $string
#debug show '$PaymentTypeList1 :' $PaymentTypeList

!old order
!let $order  = 'ORDER BY PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,PBD.GPDE_BK_ACCT_NM_RC,' ||
!              'PBD.GPDE_BK_ACCT_RCVR, PBD.GPDE_BK_TRNST_RCVR,PBD.EMPLID,PBD.PAY_ENTITY'

!
!new order, similar to the si-contribution list:
! PBD.RECIPIENT_ID  highly important key
! PBD.GPDE_BK_PUR_TRNFER sortkey after receiver account number (contribution account number)

! wdu-89MP1 os390 requires ORDER BY and HAVING outside of the variable clause in GROUP BY context

    let $order  = 'PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,PBD.RECIPIENT_ID, PBD.GPDE_BK_ACCT_NM_RC,' ||
              'PBD.GPDE_BK_ACCT_RCVR,PBD.GPDE_BK_PUR_TRNFER, PBD.GPDE_BK_TRNST_RCVR,PBD.EMPLID,PBD.PAY_ENTITY'

!wd 20040511
! instead of one list, we need:
! list1 with positive sums per provider
! list2 with negative sums (overpayment) per provider
!
! this is done with a new dynamic clause containing the HAVING condition
!
!check this variables for alias PBD, because we duplicated set_terms to set_terms2:
!  [$ReceiverIdCrit]
let $ReceiverIdCrit = ' AND P2D.GPDE_BK_TRNST_RCVR<>'' '' AND P2D.GPDE_BK_ACCT_RCVR <> '' '' '
!  [$Cal_Run_Id_Crit]
!  [$condition1]
  if rtrim($$condition1,' ') <> ''
   let $condition1 = 'AND P2D.GP_PAYGROUP = ' || '''' || '' ||
                      rtrim($Ctl_Paygroup,' ') || '' || ''''
  end-if
!  [$PaymentTypeList] ==> now explicitly set as list
!  [$Amount_Sign_Term] ==> explicitly set
!  [$Ctl_HomeBnk-crit] ==> use [$Ctl_HomeBnk-crit-a]


! ++++++++++++++++++++++++
! List 1 -- positive sums
! ++++++++++++++++++++++++
!GU20040513 - Amt auch von Table P2D
!
! wdu-89MP1 os390 requires ORDER BY and HAVING outside of the variable clause in GROUP BY context
let $HavingClause = 'SUM(P2D.GP_PMT_AMT) > 0'

let $Intermediate_Sum = 'Y'

!!! he 011404
do Initial_Vars
!!
! he 011604
!let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT > 0 '
let $Amount_Sign_Term = ' '
do Set_Terms2
if $Exists_Data = 'Y'
new-page
end-if
! he the negative total sum should be displayed in the standard list
!do Initial_Vars
!let $Amount_Sign_Term = ' AND PBD.GP_PMT_AMT <= 0 '
!do Set_Terms
!if $Exists_Data = 'Y'
!new-page
!end-if


! ++++++++++++++++++++++++
! List 2 -- negative sums
! ++++++++++++++++++++++++
!GU20040513 - Amt auch von Table P2D
!
! wdu-89MP1 os390 requires ORDER BY and HAVING outside of the variable clause in GROUP BY context
let $HavingClause = 'SUM(P2D.GP_PMT_AMT) <= 0'

let $Intermediate_Sum = 'Y'
do Initial_Vars
let $Amount_Sign_Term = ' '
do Set_Terms2
if $Exists_Data = 'Y'
new-page
end-if

!
! List 3 -- invalid receivers   -- will be solved by the payroll
!
!let $ReceiverIdCrit = ' AND (PBD.GPDE_BK_TRNST_RCVR='' '' OR PBD.GPDE_BK_ACCT_RCVR = '' '') '

end-procedure





!*********************************************************************************************
begin-procedure Initial_Vars
let $Last_Page = 'N'
let #xfer_by_paymt_type  = 0
let #xfer_by_Hausbank_NB = 0
let #xfer_by_Provider = 0
let #merk = 0
end-procedure




! ****************************************************************************
begin-procedure Set_Terms
let $Merk_N_Page = 'N'
let $FieldValue_Old = 'N'
let $TRNST_ISSR_Old = 'N'
let $TargetProvider_Old = 'N'
do Select-Data

let $Last_Page = 'Y'
end-procedure


! ****************************************************************************
begin-procedure Set_Terms2
let $Merk_N_Page = 'N'
let $FieldValue_Old = 'N'
let $TRNST_ISSR_Old = 'N'
let $TargetProvider_Old = 'N'
do Select-Data2

let $Last_Page = 'Y'
end-procedure




!****************************************************************************

begin-procedure Select-Data

let $Pay_Type_Old      = ''
let $Pay_Type_New      = ''
let $Merke = 'N'
let $Normal_Break = 'Y'
let $Exists_Data = 'N'
!
! 20040507: changed grouping , now we sum over PBD.GP_PMT_AMT
! removed DISTINCT
!

begin-SELECT
PBD1.CURRENCY_CD
PBD1.GPDE_BK_TRNST_ISSR
PBD1.GPDE_BK_ACCT_ISSR
PBD1.GPDE_AL_PAYMT_TYPE
PBD1.GPDE_BK_ACCT_NM_RC
PBD1.EMPLID
PBD1.GPDE_BK_CNTRY_RCVR
PBD1.GPDE_BK_CNTRY_ISSR
PBD1.GPDE_BK_TRNST_RCVR
PBD1.GPDE_BK_ACCT_RCVR
PBD1.GPDE_BK_PUR_TRNFER
PBD1.PAY_ENTITY
PBD1.SEG_END_DT
PBD1.RECIPIENT_ID
NM.FIRST_NAME
NM.LAST_NAME
SUM(PBD1.GP_PMT_AMT)       &SUM1_PBD_GP_PMT_AMT

   let $CURRENCY_CD   = &PBD1.CURRENCY_CD
   let $TRNST_ISSR          = &PBD1.GPDE_BK_TRNST_ISSR
   let $Home_Country_CD     = &PBD1.GPDE_BK_CNTRY_ISSR
   let $Account_Iss    = &PBD1.GPDE_BK_ACCT_ISSR
   let $FieldValue    = &PBD1.GPDE_AL_PAYMT_TYPE
   let $GPDE_BK_ACCT_NM_RC  = &PBD1.GPDE_BK_ACCT_NM_RC
   let $EMPLID     = rtrim(&PBD1.EMPLID, ' ')
   let $Country_CD    = &PBD1.GPDE_BK_CNTRY_RCVR
   let $Bnk_BLZ    = &PBD1.GPDE_BK_TRNST_RCVR
   let $GPDE_BK_ACCT_RCVR   = &PBD1.GPDE_BK_ACCT_RCVR

   let $VertNr     = rtrim(ltrim(&PBD1.GPDE_BK_PUR_TRNFER,' '),' ')
! wd20040507
! changed to comply with group change and SUM()
!
! old:   let #Amount_Transfer  = &PBD.GP_PMT_AMT
   let #Amount_Transfer  = &SUM1_PBD_GP_PMT_AMT
   let $Recipient_ID = &PBD1.RECIPIENT_ID


   let $Actual_TRANSIT_ACCEPTING = substr($TRNST_ISSR,1,8)

   do Get_Home_Bank_Adress

   if $Intermediate_Sum = 'Y'
          ! added  $VertNr (contribution account number) as a criterium for intermediate sums
          !old:let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR
          !
          let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR || $VertNr
          if $TargetProvider <> $TargetProvider_Old and $TargetProvider_Old <> 'N'
         !do zsum
                 let #xfer_by_Provider = 0
          end-if
          let #xfer_by_Provider = #xfer_by_Provider + #Amount_Transfer
   end-if

   let #merk = #merk + 1
   if $TRNST_ISSR_Old <> $TRNST_ISSR and $TRNST_ISSR_Old <> 'N'
      do new-page1
   end-if

   if $FieldValue_Old <> $FieldValue and $FieldValue_Old <> 'N'
    do new-page2
   end-if

   let #xfer_by_paymt_type  = #xfer_by_paymt_type + #Amount_Transfer
   let #xfer_by_Hausbank_NB = #xfer_by_Hausbank_NB + #Amount_Transfer

   let $FieldName = 'GPDE_AL_PAYMT_TYPE'
   do Read-Translate-Table
   let $Paym_Type_Name = rtrim(ltrim($XlatLongName,' '),' ')

   do Get-Bank-Name_Receiver

   let $TRNST_ISSR_Old = $TRNST_ISSR
   let $FieldValue_Old = $FieldValue
   let $TargetProvider_Old = $TargetProvider
   let $zsum_Provider_Old = $GPDE_BK_ACCT_NM_RC

   let $Bnk_BLZ_Old = $Bnk_BLZ
   let $GPDE_BK_ACCT_RCVR_Old  = $GPDE_BK_ACCT_RCVR
   let $Bank_Name_Receiver_Old  = $Bank_Name_Receiver
   let $VertNr_Old  = $VertNr
   let $Recipient_ID_Old = $Recipient_ID

!   he 011304
!   do Print_Data
   find $FieldValue in $DetailTypes 0 #tloc
   if #tloc >= 0
      do Print_Data
   end-if
!!!
   let $Exists_Data = 'Y'
FROM PS_GPDE_BK_XFER_EE PBD1, PS_NAMES NM
WHERE PBD1.SEG_END_DT between $ReportBeginDate AND $ReportEndDate
AND PBD1.PAY_ENTITY    = $Ctl_PayEntity
AND PBD1.PAYMENT_MTHD  =  $PaymentMethodStr
[$ReceiverIdCrit1]
[$Cal_Run_Id_Crit1]
[$condition0]
AND PBD1.GPDE_AL_PAYMT_TYPE = '1'
AND NM.EMPLID = PBD1.EMPLID
AND NM.NAME_TYPE = 'PRI'
AND NM.EFF_STATUS = 'A'
AND NM.EFFDT = (select MAX(EFFDT) from PS_NAMES NM1 where NM.EMPLID = NM1.EMPLID )
[$Amount_Sign_Term1]
[$Ctl_HomeBnk-crit-b]
GROUP BY PBD1.GPDE_BK_TRNST_ISSR,PBD1.GPDE_AL_PAYMT_TYPE,PBD1.GPDE_BK_TRNST_RCVR,PBD1.GPDE_BK_ACCT_NM_RC, NM.FIRST_NAME, NM.LAST_NAME, PBD1.EMPLID,
PBD1.CURRENCY_CD,PBD1.GPDE_BK_CNTRY_RCVR,PBD1.GPDE_BK_CNTRY_ISSR,PBD1.GPDE_BK_ACCT_ISSR,PBD1.GPDE_BK_ACCT_RCVR,
PBD1.GPDE_BK_PUR_TRNFER,PBD1.PAY_ENTITY,PBD1.SEG_END_DT,PBD1.RECIPIENT_ID
ORDER BY PBD1.GPDE_BK_TRNST_ISSR,PBD1.GPDE_AL_PAYMT_TYPE,PBD1.RECIPIENT_ID, NM.LAST_NAME, NM.FIRST_NAME,PBD1.GPDE_BK_ACCT_RCVR,PBD1.GPDE_BK_PUR_TRNFER, PBD1.GPDE_BK_TRNST_RCVR,PBD1.EMPLID,PBD1.PAY_ENTITY
end-SELECT


begin-SELECT
PBD.CURRENCY_CD
PBD.GPDE_BK_TRNST_ISSR
PBD.GPDE_BK_ACCT_ISSR
PBD.GPDE_AL_PAYMT_TYPE
PBD.GPDE_BK_ACCT_NM_RC
PBD.EMPLID
PBD.GPDE_BK_CNTRY_RCVR
PBD.GPDE_BK_CNTRY_ISSR
PBD.GPDE_BK_TRNST_RCVR
PBD.GPDE_BK_ACCT_RCVR
PBD.GPDE_BK_PUR_TRNFER
PBD.PAY_ENTITY
PBD.SEG_END_DT
PBD.RECIPIENT_ID
SUM(PBD.GP_PMT_AMT)       &SUM_PBD_GP_PMT_AMT

   let $CURRENCY_CD   = &PBD.CURRENCY_CD
   let $TRNST_ISSR          = &PBD.GPDE_BK_TRNST_ISSR
   let $Home_Country_CD     = &PBD.GPDE_BK_CNTRY_ISSR
   let $Account_Iss    = &PBD.GPDE_BK_ACCT_ISSR
   let $FieldValue    = &PBD.GPDE_AL_PAYMT_TYPE
   let $GPDE_BK_ACCT_NM_RC  = &PBD.GPDE_BK_ACCT_NM_RC
   let $EMPLID     = rtrim(&PBD.EMPLID, ' ')
   let $Country_CD    = &PBD.GPDE_BK_CNTRY_RCVR
   let $Bnk_BLZ    = &PBD.GPDE_BK_TRNST_RCVR
   let $GPDE_BK_ACCT_RCVR   = &PBD.GPDE_BK_ACCT_RCVR
   let $VertNr     = rtrim(ltrim(&PBD.GPDE_BK_PUR_TRNFER,' '),' ')
! wd20040507
! changed to comply with group change and SUM()
!
! old:   let #Amount_Transfer  = &PBD.GP_PMT_AMT
   let #Amount_Transfer  = &SUM_PBD_GP_PMT_AMT
   let $Recipient_ID = &PBD.RECIPIENT_ID


   let $Actual_TRANSIT_ACCEPTING = substr($TRNST_ISSR,1,8)

   do Get_Home_Bank_Adress

   if $Intermediate_Sum = 'Y'
          ! added  $VertNr (contribution account number) as a criterium for intermediate sums
          !old:let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR
          !
          let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR || $VertNr
          if $TargetProvider <> $TargetProvider_Old and $TargetProvider_Old <> 'N'
         do zsum
                 let #xfer_by_Provider = 0
          end-if
          let #xfer_by_Provider = #xfer_by_Provider + #Amount_Transfer
   end-if

   let #merk = #merk + 1
   if $TRNST_ISSR_Old <> $TRNST_ISSR and $TRNST_ISSR_Old <> 'N'
      do new-page1
   end-if

   if $FieldValue_Old <> $FieldValue and $FieldValue_Old <> 'N'
    do new-page2
   end-if

   let #xfer_by_paymt_type  = #xfer_by_paymt_type + #Amount_Transfer
   let #xfer_by_Hausbank_NB = #xfer_by_Hausbank_NB + #Amount_Transfer

   let $FieldName = 'GPDE_AL_PAYMT_TYPE'
   do Read-Translate-Table
   let $Paym_Type_Name = rtrim(ltrim($XlatLongName,' '),' ')

   do Get-Bank-Name_Receiver

   let $TRNST_ISSR_Old = $TRNST_ISSR
   let $FieldValue_Old = $FieldValue
   let $TargetProvider_Old = $TargetProvider
   let $zsum_Provider_Old = $GPDE_BK_ACCT_NM_RC

   let $Bnk_BLZ_Old = $Bnk_BLZ
   let $GPDE_BK_ACCT_RCVR_Old  = $GPDE_BK_ACCT_RCVR
   let $Bank_Name_Receiver_Old  = $Bank_Name_Receiver
   let $VertNr_Old  = $VertNr
   let $Recipient_ID_Old = $Recipient_ID

!   he 011304
!   do Print_Data
   find $FieldValue in $DetailTypes 0 #tloc
   if #tloc >= 0
      do Print_Data
   end-if
!!!
   let $Exists_Data = 'Y'
FROM PS_GPDE_BK_XFER_EE PBD
WHERE PBD.SEG_END_DT between $ReportBeginDate AND $ReportEndDate
AND PBD.PAY_ENTITY    = $Ctl_PayEntity
AND PBD.PAYMENT_MTHD  =  $PaymentMethodStr
[$ReceiverIdCrit]
[$Cal_Run_Id_Crit]
[$condition1]
AND PBD.GPDE_AL_PAYMT_TYPE IN ( [$PaymentTypeList1] )
[$Amount_Sign_Term]
[$Ctl_HomeBnk-crit]
GROUP BY PBD.GPDE_BK_TRNST_ISSR,PBD.GPDE_AL_PAYMT_TYPE,PBD.GPDE_BK_TRNST_RCVR,PBD.GPDE_BK_ACCT_NM_RC, PBD.EMPLID,
PBD.CURRENCY_CD,PBD.GPDE_BK_CNTRY_RCVR,PBD.GPDE_BK_CNTRY_ISSR,PBD.GPDE_BK_ACCT_ISSR,PBD.GPDE_BK_ACCT_RCVR,
PBD.GPDE_BK_PUR_TRNFER,PBD.PAY_ENTITY,PBD.SEG_END_DT,PBD.RECIPIENT_ID
ORDER BY [$order]
end-SELECT

if $Exists_Data = 'Y' and $Intermediate_Sum = 'Y'
   do zsum
end-if

end-procedure






!****************************************************************************
! wd20040514
! select-data converted for SI providers, because here we need the amounts
! evened out across emplids and show only provider totals

begin-procedure Select-Data2

let $Pay_Type_Old      = ''
let $Pay_Type_New      = ''
let $Merke = 'N'
let $Normal_Break = 'Y'
let $Exists_Data = 'N'
!
! 20040507: changed grouping , now we sum over P2D.GP_PMT_AMT
! removed DISTINCT
!
begin-SELECT
P2D.CURRENCY_CD
P2D.GPDE_BK_TRNST_ISSR
P2D.GPDE_BK_ACCT_ISSR
P2D.GPDE_AL_PAYMT_TYPE
P2D.GPDE_BK_ACCT_NM_RC
P2D.GPDE_BK_CNTRY_RCVR
P2D.GPDE_BK_CNTRY_ISSR
P2D.GPDE_BK_TRNST_RCVR
P2D.GPDE_BK_ACCT_RCVR
P2D.GPDE_BK_PUR_TRNFER
P2D.PAY_ENTITY
P2D.SEG_END_DT
P2D.RECIPIENT_ID
SUM(P2D.GP_PMT_AMT)       &SUM_P2D_GP_PMT_AMT

   let $CURRENCY_CD   = &P2D.CURRENCY_CD
   let $TRNST_ISSR          = &P2D.GPDE_BK_TRNST_ISSR
   let $Home_Country_CD     = &P2D.GPDE_BK_CNTRY_ISSR
   let $Account_Iss    = &P2D.GPDE_BK_ACCT_ISSR
   let $FieldValue    = &P2D.GPDE_AL_PAYMT_TYPE
   let $GPDE_BK_ACCT_NM_RC  = &P2D.GPDE_BK_ACCT_NM_RC

!   let $EMPLID     = rtrim(&P2D.EMPLID, ' ')
   let $Country_CD    = &P2D.GPDE_BK_CNTRY_RCVR
   let $Bnk_BLZ    = &P2D.GPDE_BK_TRNST_RCVR
   let $GPDE_BK_ACCT_RCVR   = &P2D.GPDE_BK_ACCT_RCVR
   let $VertNr     = rtrim(ltrim(&P2D.GPDE_BK_PUR_TRNFER,' '),' ')
! wd20040507
! changed to comply with group change and SUM()
!
! old:   let #Amount_Transfer  = &P2D.GP_PMT_AMT
   let #Amount_Transfer  = &SUM_P2D_GP_PMT_AMT
   let $Recipient_ID = &P2D.RECIPIENT_ID


   let $Actual_TRANSIT_ACCEPTING = substr($TRNST_ISSR,1,8)

   do Get_Home_Bank_Adress

   if $Intermediate_Sum = 'Y'
          ! added  $VertNr (contribution account number) as a criterium for intermediate sums
          !old:let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR
          !
          let $TargetProvider = $GPDE_BK_ACCT_NM_RC || $Bnk_BLZ || $GPDE_BK_ACCT_RCVR || $VertNr
          if $TargetProvider <> $TargetProvider_Old and $TargetProvider_Old <> 'N'
         do zsum
                 let #xfer_by_Provider = 0
          end-if
          let #xfer_by_Provider = #xfer_by_Provider + #Amount_Transfer
   end-if

   let #merk = #merk + 1
   if $TRNST_ISSR_Old <> $TRNST_ISSR and $TRNST_ISSR_Old <> 'N'
      do new-page1
   end-if

   if $FieldValue_Old <> $FieldValue and $FieldValue_Old <> 'N'
    do new-page2
   end-if

   let #xfer_by_paymt_type  = #xfer_by_paymt_type + #Amount_Transfer
   let #xfer_by_Hausbank_NB = #xfer_by_Hausbank_NB + #Amount_Transfer

   let $FieldName = 'GPDE_AL_PAYMT_TYPE'
   do Read-Translate-Table
   let $Paym_Type_Name = rtrim(ltrim($XlatLongName,' '),' ')

   do Get-Bank-Name_Receiver

   let $TRNST_ISSR_Old = $TRNST_ISSR
   let $FieldValue_Old = $FieldValue
   let $TargetProvider_Old = $TargetProvider
   let $zsum_Provider_Old = $GPDE_BK_ACCT_NM_RC

   let $Bnk_BLZ_Old = $Bnk_BLZ
   let $GPDE_BK_ACCT_RCVR_Old  = $GPDE_BK_ACCT_RCVR
   let $Bank_Name_Receiver_Old  = $Bank_Name_Receiver
   let $VertNr_Old  = $VertNr
   let $Recipient_ID_Old = $Recipient_ID

!   he 011304
!   do Print_Data
   find $FieldValue in $DetailTypes 0 #tloc
   if #tloc >= 0
      do Print_Data
   end-if
!!!
   let $Exists_Data = 'Y'

FROM PS_GPDE_BK_XFER_EE P2D

WHERE (P2D.SEG_END_DT between $ReportBeginDate and $ReportEndDate)
  AND (P2D.PAY_ENTITY    = $Ctl_PayEntity)
   AND P2D.PAYMENT_MTHD  =  $PaymentMethodStr
  [$ReceiverIdCrit]
  [$Cal_Run_Id_Crit_P2D]
  [$condition1a]
   AND P2D.GPDE_AL_PAYMT_TYPE IN ( [$PaymentTypeList] )
  [$Amount_Sign_Term]
  [$Ctl_HomeBnk-crit-a]

!  [$Group_Citeri]
!  seems like we need to hardcode the group by when we have aggregate functions in the
!  select list.
GROUP BY P2D.GPDE_BK_TRNST_ISSR,P2D.GPDE_AL_PAYMT_TYPE,
P2D.GPDE_BK_TRNST_RCVR,P2D.GPDE_BK_ACCT_NM_RC,
P2D.CURRENCY_CD,P2D.GPDE_BK_CNTRY_RCVR,P2D.GPDE_BK_CNTRY_ISSR,
P2D.GPDE_BK_ACCT_ISSR,P2D.GPDE_BK_ACCT_RCVR,
P2D.GPDE_BK_PUR_TRNFER,P2D.PAY_ENTITY,
P2D.SEG_END_DT,P2D.RECIPIENT_ID
HAVING [$HavingClause]
!
!GU20040513 - Order clause replaced by order by and changed to P2D from PBD
!
!  [$order]
ORDER BY P2D.GPDE_BK_TRNST_ISSR,P2D.GPDE_AL_PAYMT_TYPE,P2D.RECIPIENT_ID, P2D.GPDE_BK_ACCT_NM_RC,P2D.GPDE_BK_ACCT_RCVR,P2D.GPDE_BK_PUR_TRNFER, P2D.GPDE_BK_TRNST_RCVR,P2D.PAY_ENTITY

end-SELECT

if $Exists_Data = 'Y' and $Intermediate_Sum = 'Y'
   do zsum
end-if

end-procedure






!*********************************************************************************************

begin-procedure Print_Data
   do Format-Number(#Amount_Transfer,$GP_PMT_AMT,'99,999,999.99')
   print $EMPLID        (+1,{col0})
   print $Bnk_BLZ            (,{col1})
   Let $Last_Name = ltrim(rtrim(&NM.LAST_NAME,' '),' ')
   Let $First_Name = ltrim(rtrim(&NM.FIRST_NAME,' '),' ')
   Let $Name = $Last_Name || ' '||$First_Name
   If($FieldValue = '1')
      Print $Name                 (+1,{col0}, 28)
   Else
      print $GPDE_BK_ACCT_NM_RC  (+1,{col0},28)
   End-If
   print $GPDE_BK_ACCT_RCVR         (,{col1})
   print $Bank_Name_Receiver  (,{col2},29)
   print $VertNr             (,{col3},29)
   print $GP_PMT_AMT    (,{col4})
   print ' '      (+1,1)
end-procedure




!************************************************
begin-procedure Get_Home_Bank_id
begin-select DISTINCT
SBK.SRC_BANK_ID
   let $Src_Bank_id = &SBK.SRC_BANK_ID
from PS_SRC_BANK SBK
WHERE SBK.BANK_CD = $TRNST_ISSR AND
      SBK.ACCOUNT_EC_ID = $Account_Iss AND
      SBK.COUNTRY_CD = $Home_Country_CD
end-select
end-procedure




!************************************************
begin-procedure Get_Home_Bank_Adress

if rtrim($Src_Bank_id,' ') = ''
    do Get_Home_Bank_id
end-if

begin-select
BTB1.BANK_NM
  let $Bank_Name = rtrim(&BTB1.BANK_NM,' ')
from PS_BANK_EC_TBL BTB1
where  BTB1.BANK_CD =  $TRNST_ISSR AND
       BTB1.COUNTRY_CD =  $Home_Country_CD
end-select
end-procedure




!*********************************************************************************************
begin-heading 13
   uppercase $ReportTitle
   #include 'stdhdgtr.sqc'

   do Get-PayEntity-Address
   print $ASOFDATE_STR    (,{col0})
   print $Ctl_Curr_Pay_End_Dt1 (,+1)
   print $EuroString (,{col0})   center
   print $SRC_BANK_STR     (+1,{col0})
   print ' '       ()
   print $Src_Bank_id     (,)
   print $COUNTRY_CD_STR   (+1,{col0})
   print $Home_Country_CD   ()
   print $BANK_ID_STR      (+1,{col0})
   print $TRNST_ISSR     ()
   print $PyentDescr       (,{col3})

   let $ZipCity = $PyentZip || ' ' || $PyentCity

   print $BANK_NAME1_STR   (+1,{col0})
   print $Bank_Name        (,)
   print $PyentAddr        (,{col3})
   print $ACCOUNT1_STR     (+1,{col0})
   print $Account_Iss     ()
   print $ZipCity          (,{col3})
   print $Paym_Type_Name   (,{col01},18)
   print '_'       (+1,{col0},120) fill

   find $FieldValue in $DetailTypes 0 #tloc
   if #tloc >= 0
      print $EMPL_ID_STR      (+1, {col0})
      print $BANK_ID2_STR     (, {col1})
      print $BANK2_NAME_STR   (, {col2})
      print $NAME_STR         (+1, {col0})
      print $ACCOUNT3_STR     (, {col1})
      print $RECEIVER_STR     (, {col2})
      print $CONTRACT_STR     (, {col3})
      print $AMOUNT_STR1       (, {col4})
      print '_'       (+1,{col0},120) fill
   else
      print $NAME_STR         (+1, {col0})
      print $BANK_ID2_STR     (  , {col1})
      print 'ID'              (+1, {col0})
      print $ACCOUNT3_STR     (, {col1})
      print $RECEIVER_STR     (, {col2})
      print $CONTRACT_STR     (, {col3})
      print $AMOUNT_STR1       (, {col4})
      print '_'       (+1,{col0},120) fill
   end-if
end-heading





!*********************************************************************************************
begin-procedure  Get-Bank-Name_Receiver
begin-select
TBL2.BANK_NM
  let $Bank_Name_Receiver = rtrim(&TBL2.BANK_NM,' ')
from PS_BANK_EC_TBL TBL2
where
TBL2.COUNTRY_CD = $Country_CD AND
TBL2.BANK_CD = $Bnk_BLZ
end-select
end-procedure





!****************************************************************************
begin-procedure new-page1

  if ($TRNST_ISSR_Old <> $TRNST_ISSR) and ($TRNST_ISSR_Old <> '')
     let $Normal_Break = 'N'
     new-page
     let #merk = 0
  end-if
end-procedure




! ****************************************************************************
begin-procedure new-page2
if ($FieldValue_Old <> $FieldValue) and ($FieldValue_Old <> 'N')
    let $Merk_N_Page = 'Y'
    let $Normal_Break = 'N'
    new-page
    let #merk = 0
 end-if
end-procedure



! ****************************************************************************
begin-procedure zsum
   !
   ! Print intermediate sum
   !
   do Format-Number(#xfer_by_Provider, $xfer_by_Provider, '99,999,999.99')
!   print   '.' (+1,{col0},120) fill
   print $zsum_Provider_old   (+1,{col0})
   print $Bnk_BLZ_Old             ( ,{col1})
   print $Recipient_ID_Old        (+1,{col0})
   print $GPDE_BK_ACCT_RCVR_Old   (,{col1})
   print $Bank_Name_Receiver_Old  (,{col2},28)
   print $VertNr_Old              (,{col3},29)
   print $xfer_by_Provider    (,{col4})
   print ' '      (+1,1)
end-procedure



! ****************************************************************************
begin-footing 7
   if  ($FieldValue_Old <> $FieldValue) or
       (($FieldValue_Old <> $FieldValue) and ($Normal_Break = 'Y')) or
      ($Last_Page = 'Y')
       do Format-Number(#xfer_by_paymt_type, $Total_By_Paymt, '99,999,999,999.99')
       let $Bei_Zahlungsart =  $SUM_PAY_TYPE_STR || ' ' || $Paym_Type_Name || ': '
                              || $Eur || '  ' || $Total_By_Paymt
       print $Bei_Zahlungsart (+2,{col0})
       let #xfer_by_paymt_type = 0
   end-if

   if ($Last_Page = 'Y') or ($TRNST_ISSR_Old <> $TRNST_ISSR)

        do Format-Number(#xfer_by_Hausbank_NB, $Transfer_By_HB_NB, '99,999,999,999.99')
        let $Bei_Hausbank = $SUM_PAY_BK_STR || ' : ' || $Eur || '  ' ||  $Transfer_By_HB_NB

        print $Bei_Hausbank (+2,{col0})

     let #xfer_by_paymt_type = 0
        let #xfer_by_Hausbank_NB = 0
   end-if

   let $VersBez = $Bezeichn || ' ' || $VersionsNr
   print $VersBez (+1,90)
let $Normal_Break = 'Y'
end-footing





!**********************************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
end-procedure



!**************************************************************
#include 'gpdeut06.sqc'    !get run control parameter values
#include 'gpdeut04.sqc'    !get company informations
#include 'readxlat.sqc' !read-translate-table procedure
#include 'curdttim.sqc' !get-current-datetime procedure
#include 'datetime.sqc' !routines for date and time formatting
#include 'number.sqc'   !routines to format numbers
#include 'datemath.sqc'
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'
#include 'validdt.sqc'   !validate date routine

