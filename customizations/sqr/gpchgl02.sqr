!***********************************************************************
!  GPCHGL02.SQR: Reconciliation List                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:25:53                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

#define col1        10  ! Account Type
#define col2        18  ! Accounting Period
#define col3        31  ! Descr
#define col4        63  ! Account
#define col5        75  ! Debit
#define col5a       92  !
#define col6        86  ! Credit
#define col7        119 ! Bus. Unit
#define col8        100 ! Debit
#define col9        114 ! Credit
#define col_str1    80
#define col_str2    106
!************************************************************************

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Get-Company-Address($Ctl_PayEntity,$Ctl_Account_dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
  do Process-Main
  do Reset
  do Stdapi-Term
  do Get-Log
end-Program

!************************************************************************
begin-heading 13

  #include 'gpchut08.sqc'
   print $PYENT                           (+2,{col1})
   print $Cpline1                        (0,+2)

   print $Cpdescr                (+1, {col1})
   print $BUSI_UNIT                      (0,{col5a})
   print $P_BUS_U                        (0,{col7})


   print $Cpline2                       (+1, {col1})
   print $BUSI_UNIT_GL                   (0,{col5a})
   print $P_BUS_UGL                      (0,{col7})

   print $Cpline3                       (+1, {col1})
   print $JOUR_TEMP                      (0,{col5a})
   print $P_APP_JR                       (0,{col7})

   print $Cpline31                      (+1, {col1})

   print '_'                                      (+1,{col1},119) FILL
   print $ACC_DATE      (12, {col2})     wrap 14 2
   print $ACC_TYPE      (12,{col1})     wrap 8  2
   print $ACC_DESCR     (12, {col3})
   print $ACCOUNT       (12, {col4})

   print $PAY_CURRENCY      (12,{col_str1})
   print &A.FOREIGN_CURRENCY  (12,+1)
   print $GL_CURRENCY      (12,{col_str2})
   print &A.CURRENCY_CD  (12,+1)

   print $DEBIT         (13, {col5})
   print $CREDIT        (13, {col6})
   print $DEBIT         (13, {col8})
   print $CREDIT        (13, {col9})
   print '_'                                      (13,{col1},119) FILL
end-heading

!************************************************************************

begin-procedure Init-Report


  do Stdapi-Init

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters                !in Gpchut06.sqc
     do Get-Values
  end-if

  move 'GPCHGL02' to $ReportID
  do Init_Report_Translation   ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation   ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation
  let $ReportTitle = $TITLE1

end-procedure Init-Report

!************************************************************************
begin-procedure Ask-Input

input $Start_Date     'Begin Date       : '
input $Last_Date      'End Date         : '
input $Ctl_Company    'Company          : ' type=char      maxlen=3

end-procedure Ask-Input

!*************************************************************************
begin-procedure Get-Values

    let $language_cd      = $PRCS_LANGUAGE_CD
    let $Ctl_Busi_Unit    = RTRIM(&GPCH_RUN_CNTL.BUSINESS_UNIT ,' ')
    let $Ctl_Busi_Unit_Gl = RTRIM(&GPCH_RUN_CNTL.BUSINESS_UNIT_GL,' ')
    let $Ctl_App_Jrnl_Id  = RTRIM(&GPCH_RUN_CNTL.APPL_JRNL_ID,' ')
    let $Ctl_Account_dt   = RTRIM(&GPCH_RUN_CNTL.ACCOUNTING_DT,' ')
    let $Ctl_Payentity    = RTRIM(&GPCH_RUN_CNTL.PAY_ENTITY,' ')

    let $A_Busi_Unit     = ' AND A.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
    let $A_Busi_Unit_Gl  = ' AND A.BUSINESS_UNIT_GL = ''' || $Ctl_Busi_Unit_Gl ||  ''' '
    let $A_App_Jrnl_Id   = ' AND A.APPL_JRNL_ID     = ''' || $Ctl_App_Jrnl_Id  ||  ''' '

   if  $Ctl_Account_dt <> ''
       let $A_Account_dt    = ' AND A.ACCOUNTING_DT    = ''' || $Ctl_Account_dt   ||  ''' '
   else
       let $A_Account_dt    = ''
   end-if

   if  $Ctl_Payentity <> ''
       let $B_Payentity     = ' AND B.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' ' ||
                           ' AND A.PIN_CHART1_VAL   = ''' || $Ctl_Payentity    ||  ''' '
   else
       let $B_Payentity     = ' '
   end-if

end-procedure Get-Values
!****************************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPCHGL02','BUSI_UNIT',      $BUSI_UNIT,    #CW)
  do Get_Field_Information ('GPCHGL02','BUSI_UNIT_GL',   $BUSI_UNIT_GL, #CW)
  do Get_Field_Information ('GPCHGL02','JOUR_TEMP',      $JOUR_TEMP,    #CW)
  do Get_Field_Information ('GPCHGL02','TITLE1',         $TITLE1 ,      #CW)

  do Get_Field_Information ('GPCHGL02','ACC_TYPE',   $ACC_TYPE ,  #CW)
  do Get_Field_Information ('GPCHGL02','ACC_DATE',   $ACC_DATE ,  #CW)
  do Get_Field_Information ('GPCHGL02','ACC_DESCR',  $ACC_DESCR , #CW)
  do Get_Field_Information ('GPCHGL02','ACCOUNT',    $ACCOUNT ,   #CW)
  do Get_Field_Information ('GPCHGL02','DEBIT',      $DEBIT ,     #CW)
  do Get_Field_Information ('GPCHGL02','CREDIT',     $CREDIT ,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',     $PYENT     , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',  $LG_PAYENT     , #CW)

  do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',       $HD_TODATE , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHSI06', 'MU_FUND',         $MU_FUND   ,      #CW)
  do Get_Field_Information ('GPCHSI06', 'BASE_AHV_WAGE',   $BASE_AHV_WAGE  , #CW)
  do Get_Field_Information ('GPCHGL02', 'PAY_CURRENCY',   $PAY_CURRENCY  , #CW)
  do Get_Field_Information ('GPCHGL02', 'GL_CURRENCY',   $GL_CURRENCY  , #CW)
  let $DEBIT = rtrim($DEBIT,' ')
  let $DEBIT = lpad($DEBIT,14,' ')

  let $CREDIT = rtrim($CREDIT,' ')
  let $CREDIT = lpad($CREDIT,14,' ')
end-Procedure Report-Translation

!****************************************************************************
begin-procedure Process-Main
let  #soll  = 0
let  #haben = 0

let  #sollF  = 0
let  #habenF = 0
let $DataPrinted = 'N'
BEGIN-Select
B.PAY_ENTITY           &P_PYENT    () on-break print=never procedure=New-Date
A.BUSINESS_UNIT_GL     &P_BUS_UGL  () on-break print=never procedure=New-Date
A.BUSINESS_UNIT        &P_BUS_U    () on-break print=never procedure=New-Date
A.APPL_JRNL_ID         &P_APP_JR   () on-break print=never procedure=New-Date
A.ACCOUNTING_DT        &P_ACC_DT   () on-break print=never procedure=Date-Total
C.ACCOUNT              &P_ACCT
C.DESCR                &P_DESCR
C.ACCOUNT_TYPE         &P_ACC_TYPE
B.REVERSE_SIGN         &P_SIGN
A.MONETARY_AMOUNT      &P_MON_AMT
A.CURRENCY_CD          &A.CURRENCY_CD
A.FOREIGN_CURRENCY     &A.FOREIGN_CURRENCY
A.FOREIGN_AMOUNT       &A.FOREIGN_AMOUNT

  let $P_PYENT    =  rtrim(&P_PYENT    ,' ')
  let $P_BUS_UGL  =  rtrim(&P_BUS_UGL  ,' ')
  let $P_BUS_U    =  rtrim(&P_BUS_U    ,' ')
  let $P_APP_JR   =  rtrim(&P_APP_JR   ,' ')
  let $P_ACCT     =  rtrim(&P_ACCT     ,' ')
  let $P_DESCR    =  rtrim(&P_DESCR    ,' ')
  let $P_ACC_TYPE =  rtrim(&P_ACC_TYPE ,' ')
  let $P_SIGN     =  rtrim(&P_SIGN     ,' ')
  let #P_MON_AMT  =  &P_MON_AMT
  let #P_FOREIGN_AMT  =  &A.FOREIGN_AMOUNT

  do Format-Number  (#P_FOREIGN_AMT,$P_FOREIGN_AMT,'999,999,999.99mi')
  do Format-DateTime(&P_ACC_DT, $P_ACC_DT, {DEFDATE},'','')
  do Format-Number  (#P_MON_AMT,$P_MON_AMT,'999,999,999.99mi')

  print $P_ACC_TYPE             (+1,{col1})
  print $P_ACC_DT               (0,{col2})
  print $P_DESCR                (0,{col3})
  print $P_ACCT                 (0,{col4})

  if  $P_SIGN = 'N'
      print $P_FOREIGN_AMT          (0,{col5})
          let #sollF = #sollF +  #P_FOREIGN_AMT
      print $P_MON_AMT          (0,{col8})
      let #soll = #soll +  #P_MON_AMT
  else
      print $P_FOREIGN_AMT          (0,{col6})
          let #habenF = #habenF +  #P_FOREIGN_AMT
      print $P_MON_AMT          (0,{col9})
      let #haben = #haben + #P_MON_AMT
  end-if
  let $DataPrinted = 'Y'
FROM PS_GP_ACC_LINE_STG A, PS_GP_GL_MAP_DTL B , PS_GL_ACCOUNT_TBL C
WHERE A.BUSINESS_UNIT    = B.BUSINESS_UNIT
AND   A.LINE_DESCR       = B.GROUPING_CODE
AND   A.ACCOUNT          = B.ACCOUNT
AND   A.ACCOUNT          = C.ACCOUNT
AND   C.SETID            = (SELECT CD.SETID FROM PS_SET_CNTRL_REC CD
                            WHERE  CD.SETCNTRLVALUE = A.BUSINESS_UNIT_GL
                            AND    CD.RECNAME = 'GL_ACCOUNT_TBL')
AND   C.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL CA
                            WHERE CA.SETID   = C.SETID
                            AND   CA.ACCOUNT = C.ACCOUNT
                            AND   CA.EFFDT <= $Ctl_Account_dt)
AND   C.EFF_STATUS       = 'A'
AND   B.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GP_GL_MAP_DTL BA
                            WHERE BA.PAY_ENTITY=B.PAY_ENTITY
                            AND   BA.BUSINESS_UNIT = B.BUSINESS_UNIT
                            AND   BA.GROUPING_CODE = B.GROUPING_CODE
                            AND   BA.EFFDT <= $Ctl_Account_dt)
[$B_Payentity]
[$A_Busi_Unit]
[$A_Busi_Unit_Gl]
[$A_App_Jrnl_Id]
[$A_Account_dt]

ORDER BY B.PAY_ENTITY,A.BUSINESS_UNIT_GL,A.BUSINESS_UNIT,A.APPL_JRNL_ID,A.ACCOUNTING_DT

END-Select

if $DataPrinted = 'Y'
  do Date-Total
end-if

end-procedure Process-Main
!****************************************************************************
begin-procedure New-Date

  new-page

end-procedure

!****************************************************************************
begin-procedure Date-Total

      do Format-Number  (#soll,$soll,'999,999,999.99mi')
      do Format-Number  (#haben,$haben,'999,999,999.99mi')
          do Format-Number  (#sollF,$sollF,'999,999,999.99mi')
      do Format-Number  (#habenF,$habenF,'999,999,999.99mi')

          print $sollF               (+2,{col5}) bold
      print $habenF              (0 ,{col6}) bold
      print $soll               (0,{col8}) bold
      print $haben              (0 ,{col9}) bold

      let  #soll  = 0
      let  #haben = 0
          let  #sollF  = 0
      let  #habenF = 0


end-procedure
!****************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Eng_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHGL02
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Ger_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHGL02
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Ita_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHGL02
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Fra_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHGL02
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!**********************************************************************************
#include 'gpchut01.sqc'  !get values mask routines
#include 'gpchut04.sqc'  !get payentity address
#include 'gpchut06.sqc'  !get values mask routines
#include 'gpchut07.sqc'  !Log Output Selection
#include 'readxlat.sqc'    !routine to get values from xlattbl
#include 'stdapi.sqc'      !routines to update run status
#include 'reset.sqc'       !reset printer procedure
#include 'curdttim.sqc'    !get-current-datetime procedure
#include 'datetime.sqc'    !routines for date and time formatting
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'     !validate date routine
#include 'number.sqc'      !routines to format numbers
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'gpchgl2s.sqc'    ! Get Strings Values for GPCHGL02
#include 'gpchglbs.sqc'    ! Get Strings Values for GPCHGLOB
