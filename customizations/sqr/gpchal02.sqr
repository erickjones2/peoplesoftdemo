!**********************************************
!  GPCHAL02:  Calc Reconciliation Report      *
!**********************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:23:30                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! THIS SQR PRINT THE CALC RECONCILIATION REPORT BY RETRIEVING THE DATA
! FROM THE TABLES PREPARED BY THE APPLICATION ENGINE GPCH_RP_AL02
!
!where OPRID = $prcs_oprid
!  and RUN_CNTL_ID = $prcs_run_cntl_id
!***********************************************************************
!
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.


!UPON FMB Override setenv and Customer override

Begin-setup
!#Include 'ptpsp125.sqc'   !Printer and page-size initialization


  #define PAPER_SIZE   A4

  #Include 'setupdb.sqc'

  #define PRINTER_TYPE HPLASERJET

  declare-report CUD_DEFAULT
    layout=CUD_default
    printer-type=HPLASERJET
  end-declare


  Declare-Printer HP-definition
      Type=HPLASERJET
      Font=3
      Point-Size=9
      Pitch=17
      Symbol-Set=0U     ! ASCII symbol set
  End-Declare

  Declare-Layout CUD_default
    paper-size= (A4)
    orientation=Landscape
    line-height=1 mm              ! 72/printer_point-size
    char-width=4.34                ! points, to handle max cols
    bottom-margin=.1 cm
    Top-Margin= .1 cm
    Left-Margin=.1
  End-Declare
!      Max-Lines=63
!      Max-Columns=130

!#define heading 1
!#define footing 1
End-setup

!***********************************************************************
!**begin-report
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
begin-report
  do Init-Report
  do Process-Main
  do Reset
  do Stdapi-Term
end-report
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
!**end-report
!***********************************************************************


!***********************************************************************
!Procedure Init-Report
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

begin-procedure Init-Report

  move 'GPCH_CR' to $ReportID
  display ' '
  display $REPORTTITLE
  display ' '

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init

  if $prcs_oprid=''
     display ''
     display 'REPORT CAN NOT BE EXECUTED OUTSIDE OF PEOPLESOFT, PLEASE USE PROCESS SCHEDULER.'
     display ''
    goto last1
  end-if

  do Security-Param

  if $prcs_process_instance = ''
    !No Prompt
  else
     display 'Process Instance '  $prcs_process_instance
     display 'OPRID            '  $prcs_oprid
     display 'RUN_CNTL_ID      '  $prcs_run_cntl_id
!    do Select-Parameters
  end-if

  do Get-Rep-Lng
  do Get-Base-Lng
!  show 'report_language_cd'
!  show $report_language_cd
!  show 'base_language_cd'
!  show $base_language_cd

  do Init_Printer
  do Init_Report_Translation ($ReportID, $report_language_cd)
  do Append_Report_Translation ('GPCHAL02')
last1:

!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
end-procedure   Init-Report
!***********************************************************************


!***********************************************************************
!**begin-heading
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
begin-heading 35

  do Append_Report_Translation ('GPCHGLOB')
  do Get_Field_Information     ('GPCHGLOB', 'COMPANY_NM', $stdhdg_co_nm,   #dummy_width)
  do Get_Field_Information     ('GPCHGLOB', 'REPORT_ID',  $stdhdg_rep_id,  #dummy_width)
  do Get_Field_Information     ('GPCHGLOB', 'PAGE_NO',    $stdhdg_page_no, #dummy_width)
  do Get_Field_Information     ('GPCHGLOB', 'RUN_DATE',   $stdhdg_run_dt,  #dummy_width)
  do Get_Field_Information     ('GPCHGLOB', 'RUN_TIME',   $stdhdg_run_tm,  #dummy_width)
  do Get_Field_Information     ('GPCHGLOB', 'END_REPORT', $stdhdg_end_rep, #dummy_width)

  print '            '    (6,1)
  print $stdhdg_co_nm     ()          center
  print $stdhdg_rep_id    (+6,#colh1)
  print $ReportID         (  ,+8)
!***********************************************************************
! not to uppercase due to languages other than English                 *
!***********************************************************************
! uppercase $ReportTitle                                               *

  print $ReportTitle      ()          center
  let #RptCol = #col8
  print $stdhdg_page_no   ( ,#RptCol)
  print #page-count       (0,+4)      edit 88888888
  print $stdhdg_run_dt    (+5,#RptCol)
!----- print $ReportDate       (0,+10)
  do Format-DateTime($AsOfToday, $out, {DEFDATE}, '', '')
  print $out              (0,+10)

  print $stdhdg_run_tm    (+4,#RptCol)
  print $ReportTime       (0,+10)

  if     $R.RUN_PARAM     = 'C'
         let $Par_Descr   = $CAL_RUN_ID
         let $Par_Value   = $R.CAL_RUN_ID
  else
         let $Par_Descr   = $PAY_ENTITY
         let $Par_Value   = $R.PAY_ENTITY
  end-if

  print $PERIOD_END_DT    (+4,#colh1)
  do Format-DateTime($R.ENDDT, $out, {DEFDATE}, '', '')
  print $out              (  ,#colh2)
  print $Par_Descr        (+4,#colh1)
  print $Par_Value        (  ,#colh2)

end-heading

!**Process Main**********************
begin-procedure Process-Main

  do Get-Strings

  show ' '
  show $REPORTTITLE
  show ' '
  show 'Process Instance '  $prcs_process_instance
  show 'OPRID            '  $prcs_oprid
  show 'RUN_CNTL_ID      '  $prcs_run_cntl_id

  do Get-Values
  do Set-Cols

  do Group0
  new-page

  do Group1
  new-page

  do Group2
  new-page

  do Group3

end-procedure


!**Get Values************************
begin-procedure Get-Values

  let $language_cd = $PRCS_LANGUAGE_CD

begin-SELECT

R.GPCH_RC_CR_RUNCL
  let $R.RUN_PARAM          = &R.GPCH_RC_CR_RUNCL
R.PAY_ENTITY
  let $R.PAY_ENTITY         = &R.PAY_ENTITY
R.CAL_RUN_ID
  let $R.CAL_RUN_ID         = &R.CAL_RUN_ID
R.GPCH_AL_CPAY_ENDDT
  let $R.ENDDT              = &R.GPCH_AL_CPAY_ENDDT

 from PS_GPCH_RC_AL02 R

 where R.OPRID = $prcs_oprid
 and   R.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

end-procedure   Get-RCTL-Values


!**Set-Cols*********************
begin-procedure Set-Cols

! set box width
  let #len1 = 120

! set columns for headings
  let #colh1 =   4
  let #colh2 =  30
  let #colh3 =  100

! set columns for data Group: 0-1-2
  let #col0  =           2
  let #col1  = #col0  +  2
  let #col2  = #col1  +  6
  let #col3  = #col2  +  6
  let #col4  = #col3  + 54
  let #col5  = #col4  + 25
  let #col5_0= #col5  + 10
  let #col6  = #col5  + 25
  let #col6_0= #col6  + 17
  let #col7  = #col6  + 20
  let #col8  = #col7  + 20
  let #col9  = #col8  + 20
! set more columns for data Group: 3
  let #colp1 = #col3  + 25
  let #colp2 = #colp1 + 25
  let #colp3 = #colp2 + 25
  let #colp4 = #colp3 + 25

!masks for numbers
  let $mask_empl = 'B,BBB,BB9'
  let $mask_amnt = 'BBB,BBB,BBB,BB9.99'


! reset variables
  let #None        = 0
  let $None_BK    = 'N'
  let #PageCounter = 0
  let $line        = ' '
  let #m_set       = 0
  let #m_nbr       = 0
  let #test        = 0

! recover strings for table title
! done in procedure Init-Report

end-procedure   Set-Cols


!***********************************************************************
! Procedure Get-Strings
! Get the field strings for the report
!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

begin-procedure Get-Strings

  do Get_Field_Information ('GPCHAL02', 'ACTION',         $ACTION,         #DW)
  do Get_Field_Information ('GPCHAL02', 'AF',             $AF,             #DW)
  do Get_Field_Information ('GPCHAL02', 'AFT',            $AFT,            #DW)
  do Get_Field_Information ('GPCHAL02', 'AMOUNT',         $AMOUNT,         #DW)
  do Get_Field_Information ('GPCHAL02', 'ASOFDATE',       $ASOFDATE,       #DW)
  do Get_Field_Information ('GPCHAL02', 'C1',             $C1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'C2',             $C2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'C3',             $C3,             #DW)
  do Get_Field_Information ('GPCHAL02', 'C4',             $C4,             #DW)
  do Get_Field_Information ('GPCHAL02', 'CAL_ID',         $CAL_ID,         #DW)
  do Get_Field_Information ('GPCHAL02', 'CAL_RUN_ID',     $CAL_RUN_ID,     #DW)
  do Get_Field_Information ('GPCHAL02', 'DESCR',          $DESCR,          #DW)
  do Get_Field_Information ('GPCHAL02', 'E1',             $E1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'E2',             $E2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'E3',             $E3,             #DW)
  do Get_Field_Information ('GPCHAL02', 'EMPL_RCDN_FLAG', $EMPL_NUM,       #DW)
  do Get_Field_Information ('GPCHAL02', 'EMPL_RCD',       $EMPL_RCD,       #DW)
  do Get_Field_Information ('GPCHAL02', 'EMPLID',         $EMPLID,         #DW)
  do Get_Field_Information ('GPCHAL02', 'ERRNUM',         $ERROR,          #DW)
  do Get_Field_Information ('GPCHAL02', 'G0',             $G0,             #DW)
  do Get_Field_Information ('GPCHAL02', 'G1',             $G1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'G1_TITLE',       $G1_TITLE,       #DW)
  do Get_Field_Information ('GPCHAL02', 'G2',             $G2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'G2_TITLE',       $G2_TITLE,       #DW)
  do Get_Field_Information ('GPCHAL02', 'G3',             $G3,             #DW)
  do Get_Field_Information ('GPCHAL02', 'G3_TITLE',       $G3_TITLE,       #DW)
  do Get_Field_Information ('GPCHAL02', 'GL',             $GL,             #DW)
  do Get_Field_Information ('GPCHAL02', 'GP_PAYGROUP',    $PAYGROUP,       #DW)
  do Get_Field_Information ('GPCHAL02', 'J0',             $J0,             #DW)
  do Get_Field_Information ('GPCHAL02', 'MESS_NBR',       $MESS_NBR,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGDATA1T',      $MSGDATA1,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGDATA2T',      $MSGDATA2,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGDATA3T',      $MSGDATA3,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGDATA4T',      $MSGDATA4,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGDATA5T',      $MSGDATA5,       #DW)
  do Get_Field_Information ('GPCHAL02', 'MSGNAME',        $MSG,            #DW)
  do Get_Field_Information ('GPCHAL02', 'N1',             $N1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'N2',             $N2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'NO_BANKING',     $NO_BANKING,     #DW)
  do Get_Field_Information ('GPCHAL02', 'NO_GL',          $NO_GL,          #DW)
  do Get_Field_Information ('GPCHAL02', 'NONE',           $NONE,           #DW)
  do Get_Field_Information ('GPCHAL02', 'NT',             $NT,             #DW)
  do Get_Field_Information ('GPCHAL02', 'P1',             $P1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'P2',             $P2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'P3',             $P3,             #DW)
  do Get_Field_Information ('GPCHAL02', 'PAY_ENTITY',     $PAY_ENTITY,     #DW)
  do Get_Field_Information ('GPCHAL02', 'PE',             $PE,             #DW)
  do Get_Field_Information ('GPCHAL02', 'PERIOD_END_DT',  $PERIOD_END_DT,  #DW)
  do Get_Field_Information ('GPCHAL02', 'PT',             $PT,             #DW)
  do Get_Field_Information ('GPCHAL02', 'PW',             $PW,             #DW)
  do Get_Field_Information ('GPCHAL02', 'SUM',            $SUM,            #DW)
  do Get_Field_Information ('GPCHAL02', 'REPORT_TITLE',   $REPORTTITLE,    #DW)
  do Get_Field_Information ('GPCHAL02', 'RSLT_SEG_NUM',   $SEG_NUM ,       #DW)
  do Get_Field_Information ('GPCHAL02', 'T1',             $T1,             #DW)
  do Get_Field_Information ('GPCHAL02', 'T2',             $T2,             #DW)
  do Get_Field_Information ('GPCHAL02', 'T3',             $T3,             #DW)
  do Get_Field_Information ('GPCHAL02', 'T4',             $T4,             #DW)
  do Get_Field_Information ('GPCHAL02', 'T5',             $T5,             #DW)
  do Get_Field_Information ('GPCHAL02', 'TS',             $TS,             #DW)
  do Get_Field_Information ('GPCHAL02', 'TABLE_NAME',     $TABLE_NAME,     #DW)
  do Get_Field_Information ('GPCHAL02', 'TOTAL_AMOUNT',   $TOTAL_AMOUNT,   #DW)

!* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
end-procedure Get-Strings
!***********************************************************************


!**Group0************************
begin-procedure Group0

  let    $Country_C       = ' '
  let    $Country_P       = ' '
  let    $Country         = ' '
  do Country_C
  do Country_P

  do CleanPrintVar

  print $G0 ( +1,#col0)  BOLD
  print ' ' ( +3,#col0)

  let $print_col0 = ' '
  let $print_col1 = 'line'

! N1
  let $print_col2 = 'N1'
  let $print_col3 = $N1
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA'
  do PrintStringCol
! N2
  let $print_col2 = 'N2'
  let $print_col3 = $N2
  let $print_col4 = $AFT
  let $print_col5 = 'GP_PYE_SEG_STAT'
  do PrintStringCol
! NT
  let $print_col2 = 'NT'
  let $print_col3 = $NT
  let $print_col4 = $AF
  let $print_col5 = $SUM
  do PrintStringCol

! J0
  let $print_col2 = 'J0'
  let $print_col3 = $J0
  let $print_col4 = $AFT
  let $print_col5 = 'JOB'
  do PrintStringCol

! P1
  let $print_col2 = 'P1'
  let $print_col3 = $P1
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT'
  do PrintStringCol
! P2
  let $print_col2 = 'P2'
  let $print_col3 = $P2
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GP_PYE_PRC_STAT'
  do PrintStringCol
! P3
  let $print_col2 = 'P3'
  let $print_col3 = $P3
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GP_PYE_PRC_STAT'
  do PrintStringCol
! PT
  let $print_col2 = 'PT'
  let $print_col3 = $PT
  let $print_col4 = $AF
  let $print_col5 = $SUM
  do PrintStringCol

! T1
  let $print_col2 = 'T1'
  let $print_col3 = $T1
  let $print_col4 = $AFT
  if  $Country        <> 'CHE'
      let $print_col5 = 'GP_PAYMENTS'
  else
      let $print_col5 = 'GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol
! T2
  let $print_col2 = 'T2'
  let $print_col3 = $T2
  let $print_col4 = $AFT
  if  $Country        <> 'CHE'
      let $print_col5 = 'GP_PAYMENTS'
  else
      let $print_col5 = 'GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol
! TS
  let $print_col2 = 'TS'
  let $print_col3 = $TS
  let $print_col4 = $AF
  let $print_col5 = $SUM
  do PrintStringCol
! T3
  let $print_col2 = 'T3'
  let $print_col3 = $T3
  let $print_col4 = $AFT
  if  $Country        <> 'CHE'
      let $print_col5 = 'GP_PAYMENTS'
  else
      let $print_col5 = 'GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol
! T4
  let $print_col2 = 'T4'
  let $print_col3 = $T4
  let $print_col4 = $AFT
  if  $Country        <> 'CHE'
      let $print_col5 = 'GP_PAYMENTS'
  else
      let $print_col5 = 'GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol
! T5
  let $print_col2 = 'T5'
  let $print_col3 = $T5
  let $print_col4 = $AFT
      let $print_col5 = 'GP_PAYMENTS'
  if  $Country        <> 'CHE'
  else
      let $print_col5 = 'GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol

! GL
  let $print_col2 = 'GL'
  let $print_col3 = $GL
  let $print_col4 = $AFT
  let $print_col5 = 'GP_GL_DATA'
  do PrintStringCol

! C1
  let $print_col2 = 'C1'
  let $print_col3 = $C1
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GP_GL_DATA, GP_STRM'
  do PrintStringCol
! C2
  let $print_col2 = 'C2'
  let $print_col3 = $C2
  let $print_col4 = $AFT
  if  $Country        <> 'CHE'
      let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GP_PAYMENTS'
  else
      let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GPCH_BK_XFER_EE'
  end-if
  do PrintStringCol
! C3
  let $print_col2 = 'C3'
  let $print_col3 = $C3
  let $print_col4 = $AF
  let $print_col5 = $SUM
  do PrintStringCol
! C4
  let $print_col2 = 'C4'
  let $print_col3 = $C4
  let $print_col4 = $AF
  let $print_col5 = $SUM
  do PrintStringCol

! E1
  let $print_col2 = 'E1'
  let $print_col3 = $E1
  let $print_col4 = $AFT
  let $print_col5 = 'GP_RSLT_DELTA, GP_PYE_SEG_STAT, GP_GL_DATA, GP_STRM'
  do PrintStringCol
! E2
  let $print_col2 = 'E2'
  let $print_col3 = $E2
  let $print_col4 = $AFT
  let $print_col5 = 'GP_PYE_SEG_STAT, JOB'
  do PrintStringCol
! E3
  let $print_col2 = 'E3'
  let $print_col3 = $E3
  let $print_col4 = $AFT
  let $print_col5 = 'GP_PYE_SEG_STAT, JOB'
  do PrintStringCol

! PE
  let $print_col2 = 'PE'
  let $print_col3 = $PE
  let $print_col4 = $AFT
  let $print_col5 = 'GP_MESSAGES'
  do PrintStringCol
! PW
  let $print_col2 = 'PW'
  let $print_col3 = $PW
  let $print_col4 = $AFT
  let $print_col5 = 'GP_MESSAGES'
  do PrintStringCol

end-procedure   Group0

!**Group1************************
begin-procedure Group1

  do CleanPrintVar

  print $G1       (+1,#col0)  BOLD
  print $G1_TITLE (  ,#col3)  BOLD
  print ' '       ( +3,#col0)

  let $print_col3 = $DESCR
  let $print_col4 = $PERIOD_END_DT
  let $print_col5 = $EMPL_NUM
  let $print_col6 = $TOTAL_AMOUNT
  do PrintColBold
  do CleanPrintVar

!N
  let $print_col2 = 'N1'
  do TMP1-dateY-amountY
  if $print_col5 = ' '
     do  TMP1-dateN-amountN
  end-if
  let $print_col2 = 'N2'
  do TMP1-dateY-amountY
  if $print_col5 = ' '
     do  TMP1-dateN-amountN
  end-if
  let $print_col2 = 'NT'
  do TMP1-dateN-amountY-emplN
!J
  print ' ' ( +3,#col0)
  let $print_col2 = 'J0'
  do TMP1-dateY-amountN-emplY
!P
  print ' ' ( +3,#col0)
  let $print_col2 = 'P1'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'P2'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'P3'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'PT'
  do TMP1-dateN-emplY-amountY
!T
  print ' ' ( +3,#col0)
  let $print_col2 = 'T1'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'T2'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'TS'
  do TMP1-dateN-amountY-emplN
  let $print_col2 = 'T3'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'T4'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'T5'
  do TMP1-dateN-emplY-amountY
!GL
  print ' ' ( +3,#col0)
  let $print_col2 = 'GL'
  do TMP1-dateN-emplY-amountY
!C
  print ' ' ( +3,#col0)
  let $print_col2 = 'C1'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'C2'
  do TMP1-dateN-emplY-amountY
  let $print_col2 = 'C3'
  do TMP1-dateN-amountY-emplN
  let $print_col2 = 'C4'
  do TMP1-dateN-amountY-emplN

end-procedure   Group1



!**Group2************************
begin-procedure Group2

  do CleanPrintVar

  print $G2       (+1,#col0)  BOLD
  print $G2_TITLE (  ,#col3)  BOLD
  print ' '       ( +3,#col0)

  let $print_col2 = 'E1'
  let $print_col3 = $E1
  let #None       = 0
  do PrintStringCol
  do CleanPrintVar

  let #test = 0

  do TMP2-E1
  if $None_BK     = 'N'
     if #None       = 0
        print $None ( +5,#col3)
     end-if
  else
     print $NO_BANKING ( +5,#col3)
  end-if
  do CleanPrintVar
  let #test = 0

  print ' ' ( +3,#col0)

  let $line       = 'E2'
  let $print_col2 = 'E2'
  let $print_col3 = $E2
  let #None       = 0
  do PrintStringCol
  do CleanPrintVar

  let #test = 0
  do TMP3
  if #None       = 0
     print $None ( +5,#col3)
  end-if
  do CleanPrintVar
  let #test = 0


  print ' ' ( +3,#col0)

  let $line       = 'E3'
  let $print_col2 = 'E3'
  let $print_col3 = $E3
  let #None       = 0
  do PrintStringCol
  do CleanPrintVar

  let #test = 0
  do TMP3
  if #None       = 0
     print $None ( +5,#col3)
  end-if
  do CleanPrintVar
  let #test = 0

end-procedure   Group2


!**Group3************************
begin-procedure Group3

  do CleanPrintVar

  print $G3       (+1,#col0)  BOLD
  print $G3_TITLE (  ,#col3)  BOLD
  print ' '       ( +3,#col0)

  let $print_col2 = 'PE'
  let $print_col3 = $PE
  do PrintStringCol
  let #None       = 0
  do CleanPrintVar

  if '{Record_MessageCatalog}' = '{Record_MessageCatalogLang}'
     do MCA_ReportLang
     SHOW 'Pre  Release 8.8 db'
  else
     SHOW 'Post Release 8.8 db'
     if $report_language_cd = $base_language_cd'
        SHOW 'Report has been run in Base Language'
        do MCA_BaseLang
     else
        SHOW 'Report has been run in Non-Base Language'
        do MCA_ReportLang
     end-if
  end-if

  if #None       = 0
     print $None ( +5,#col3)
  end-if
  print ' ' ( +3,#col0)

  let $print_col2 = 'PW'
  let $print_col3 = $PW
  do PrintStringCol
  let #None       = 0
  do CleanPrintVar

  let #test = 0
  do TMPW
  if #None       = 0
     print $None ( +5,#col3)
  end-if
  let #test = 0

end-procedure   Group3


!**CleanPrintVar************************
begin-procedure CleanPrintVar

do CleanPrintVarExcept2
let $print_col2 = ' '

end-procedure   CleanPrintVar

!**CleanPrintVarExcept2************************
begin-procedure CleanPrintVarExcept2

  let $print_col0  = ' '
  let $print_col1  = ' '
  let $print_col3  = ' '
  let $print_col4  = ' '
  let $print_col5  = ' '
  let $print_col6  = ' '
  let $print_col7  = ' '
  let $print_col8  = ' '
  let $print_col9  = ' '
  let $print_colp1 = ' '
  let $print_colp2 = ' '
  let $print_colp3 = ' '
  let $print_colp4 = ' '
  let #print_col4  = 0
  let #print_col5  = 0
  let #print_col6  = 0
  let #print_col7  = 0
  let #print_colp2 = 0

end-procedure   CleanPrintVarExcept2

!**PrintCol****************
begin-procedure PrintCol

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print $print_col4 (  ,#col4)
  print $print_col5 (  ,#col5)
  print $print_col6 (  ,#col6)
  print $print_col7 (  ,#col7)

end-procedure   PrintCol

!**PrintColBold****************
begin-procedure PrintColBold

  print $print_col0 (+5,#col0) bold
  print $print_col1 (  ,#col1) bold
  print $print_col2 (  ,#col2) bold
  print $print_col3 (  ,#col3) bold
  print $print_col4 (  ,#col4) bold
  print $print_col5 (  ,#col5) bold
  print $print_col6 (  ,#col6) bold
  print $print_col7 (  ,#col7) bold
  print ' '         (+1,#col0)

end-procedure   PrintColBold

!**PrintStringCol****************
begin-procedure PrintStringCol

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print $print_col4 (  ,#col4)
  print $print_col5 (  ,#col5)
  print $print_col6 (  ,#col6)
  print $print_col7 (  ,#col7)

end-procedure   PrintStringCol


!**PrintCol-eYaY****************
begin-procedure PrintCol-eYaY

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print $print_col4 (  ,#col4)
if #print_col5 <> 0
  print #print_col5 (  ,#col5) edit 'B,BBB,BB9'
else
  print '0' (  ,#col5_0)
end-if
if #print_col6 <> 0
  print #print_col6 (  ,#col6) edit 'BBB,BBB,BBB,BB9.99'
else
  print '0.00' (  ,#col6_0)
end-if

end-procedure   PrintCol-eYaY



!**PrintCol-eNaY****************
begin-procedure PrintCol-eNaY

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print $print_col4 (  ,#col4)
  print $print_col5 (  ,#col5)
if #print_col6 <> 0
  print #print_col6 (  ,#col6) edit 'BBB,BBB,BBB,BB9.99'
else
  print '0.00' (  ,#col6_0)
end-if

end-procedure   PrintCol-eNaY

!**PrintCol-eYaN****************
begin-procedure PrintCol-eYaN

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print $print_col4 (  ,#col4)
if #print_col5 <> 0
  print #print_col5 (  ,#col5) edit 'B,BBB,BB9'
else
  print '0' (  ,#col5_0)
end-if
  print $print_col6 (  ,#col6)

end-procedure   PrintCol-eYaN

!**PrintCol-E****************
begin-procedure PrintCol-E

  print $print_col0 (+5,#col0)
  print $print_col1 (  ,#col1)
  print $print_col2 (  ,#col2)
  print $print_col3 (  ,#col3)
  print #print_col4 (  ,#col4) edit 888
  print $print_col5 (  ,#col5)
  print $print_col6 (  ,#col6)

end-procedure   PrintCol-E

!**PrintCol-Errors****************
begin-procedure PrintCol-Errors

  print $print_col3  (+5,#colp1)
  print $print_colp1 (  ,#colp2)
  print $print_colp2 (  ,#colp3)
  print #print_colp3 (  ,#colp4) edit 8888

end-procedure   PrintCol-Errors

!**PrintCol-Warnings********
begin-procedure PrintCol-Warnings

  print $print_col3  (+5,#col3)
  print $print_colp1 (  ,#colp1)
  print #print_colp2 (  ,#colp2) edit 'B,BBB,BB9'

end-procedure   PrintCol-Warnings


!**PrintColMsgData****************
begin-procedure PrintColMsgData

alter-printer
  font=30

  print $print_colp1 (+5,#colp2) bold
  print $print_colp2 (  ,#colp3)

alter-printer
  font = 3

end-procedure   PrintColMsgData

!**PrintColP****************
begin-procedure PrintColP

  print $print_col0  (+5,#col0 )
  print $print_col1  (  ,#col1 )
  print $print_col2  (  ,#col2 )
  print $print_col3  (  ,#col3 )
  print $print_colp1 (  ,#colp1)
  print $print_colp2 (  ,#colp2)
  print $print_colp3 (  ,#colp3)
  print $print_colp4 (  ,#colp4)

end-procedure   PrintColP

!**PrintColPBold****************
begin-procedure PrintColPBold

  print $print_col0  (+5,#col0 ) bold
  print $print_col1  (  ,#col1 ) bold
  print $print_col2  (  ,#col2 ) bold
  print $print_col3  (  ,#col3 ) bold
  print $print_colp1 (  ,#colp1) bold
  print $print_colp2 (  ,#colp2) bold
  print $print_colp3 (  ,#colp3) bold
  print $print_colp4 (  ,#colp4) bold
  print ' '           (+1,#col0)

end-procedure   PrintColBoldP


!**PrintColPBold2****************
begin-procedure PrintColPBold2

  print $print_col3  (+5,#colp1) bold
  print $print_colp1 (  ,#colp2) bold
  print $print_colp2 (  ,#colp3) bold
  print $print_colp3 (  ,#colp4) bold
  print ' '           (+1,#col0)

end-procedure   PrintColBoldP2


!**TMP1-dateY-amountY****************
begin-procedure TMP1-dateY-amountY

begin-SELECT DISTINCT

TMP1b.DESCR50
TMP1b.PERIOD_END_DT
TMP1b.GPCH_AL_NBR01_07
TMP1b.GPCH_RP_AMNT01_12
  do  CleanPrintVarExcept2
  let $print_col3 = &TMP1b.DESCR50
  let $print_col4 = &TMP1b.PERIOD_END_DT
  do Format-DateTime($print_col4, $out, {DEFMDY}, '', '')
  let $print_col4 = $out
  let #print_col5 = &TMP1b.GPCH_AL_NBR01_07
  let #print_col6 = &TMP1b.GPCH_RP_AMNT01_12
  do  PrintCol-eYaY

FROM  PS_GPCH_RP_AL021 TMP1b
WHERE TMP1b.OPRID       = $prcs_oprid
  AND TMP1b.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP1b.GPCH_RP_CR_LINE = $print_col2
  AND TMP1b.GPCH_RP_AMNT01_12 <> 0
end-SELECT

end-procedure  TMP1-dateY-amountY


!**TMP1-dateN-amountN****************
begin-procedure TMP1-dateN-amountN

begin-SELECT DISTINCT

TMP1c.DESCR50
TMP1c.GPCH_AL_NBR01_07
TMP1c.GPCH_RP_AMNT01_12
  do  CleanPrintVarExcept2
  let $print_col3 = &TMP1c.DESCR50
  let #print_col5 = &TMP1c.GPCH_AL_NBR01_07
  let #print_col6 = &TMP1c.GPCH_RP_AMNT01_12
  do  PrintCol-eYaY

FROM  PS_GPCH_RP_AL021 TMP1c
WHERE TMP1c.OPRID       = $prcs_oprid
  AND TMP1c.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP1c.GPCH_RP_CR_LINE = $print_col2
  AND TMP1c.GPCH_RP_AMNT01_12 = 0
end-SELECT

end-procedure  TMP1-dateN-amountN

!**TMP1-dateN-amountY-emplN****************
begin-procedure TMP1-dateN-amountY-emplN

begin-SELECT DISTINCT

TMP1d.DESCR50
TMP1d.GPCH_RP_AMNT01_12
  do  CleanPrintVarExcept2
  let $print_col3 = &TMP1d.DESCR50
  if  $NO_BANKING = rtrim($print_col3, ' ')
      let $None_BK    = 'Y'
      do  PrintCol
  else
      let #print_col6 = &TMP1d.GPCH_RP_AMNT01_12
      do  PrintCol-eNaY
  end-if

FROM  PS_GPCH_RP_AL021 TMP1d
WHERE TMP1d.OPRID       = $prcs_oprid
  AND TMP1d.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP1d.GPCH_RP_CR_LINE = $print_col2
end-SELECT

end-procedure  TMP1-dateN-amountY-emplN

!**TMP1-dateY-amountN-emplY****************
begin-procedure TMP1-dateY-amountN-emplY

begin-SELECT DISTINCT

TMP1e.DESCR50
TMP1e.PERIOD_END_DT
TMP1e.GPCH_AL_NBR01_07
  do  CleanPrintVarExcept2
  let $print_col3 = &TMP1e.DESCR50
  let $print_col4 = &TMP1e.PERIOD_END_DT
  do Format-DateTime($print_col4, $out, {DEFMDY}, '', '')
  let $print_col4 = $out
  let #print_col5 = &TMP1e.GPCH_AL_NBR01_07
  do  PrintCol-eYaN

FROM  PS_GPCH_RP_AL021 TMP1e
WHERE TMP1e.OPRID       = $prcs_oprid
  AND TMP1e.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP1e.GPCH_RP_CR_LINE = $print_col2
end-SELECT

end-procedure  TMP1-dateY-amountN-emplY

!**TMP1-dateN-emplY-amountY****************
begin-procedure TMP1-dateN-emplY-amountY

begin-SELECT DISTINCT

TMP1g.DESCR50
TMP1g.GPCH_AL_NBR01_07
TMP1g.GPCH_RP_AMNT01_12
  do  CleanPrintVarExcept2
  let $print_col3     = &TMP1g.DESCR50
  if  $NO_GL          = rtrim($print_col3, ' ')
   or $NO_BANKING     = rtrim($print_col3, ' ')
      do  PrintCol
  else
      let #print_col5 = &TMP1g.GPCH_AL_NBR01_07
      let #print_col6 = &TMP1g.GPCH_RP_AMNT01_12
      do  PrintCol-eYaY
  end-if
FROM  PS_GPCH_RP_AL021 TMP1g
WHERE TMP1g.OPRID       = $prcs_oprid
  AND TMP1g.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP1g.GPCH_RP_CR_LINE = $print_col2

end-SELECT

end-procedure  TMP1-dateN-emplY-amountY


!**TMP2-E1****************
begin-procedure TMP2-E1

begin-SELECT DISTINCT

TMP2.EMPLID
TMP2.EMPL_RCD
TMP2.GP_PAYGROUP
TMP2.CAL_ID
TMP2.GPCH_RP_AMNT01_12
  if  #test = 0
     let $print_col3 = $EMPLID
     let $print_col4 = $EMPL_RCD
     let $print_col5 = $PAYGROUP
     let $print_col6 = $CAL_ID
     let $print_col7 = $AMOUNT
     let #test = #test+1
     do PrintColBold
     do CleanPrintVar
  end-if

  let #None       = 1
  let $print_col3 = &TMP2.EMPLID
  let #print_col4 = &TMP2.EMPL_RCD
  let $print_col5 = &TMP2.GP_PAYGROUP
  let $print_col6 = &TMP2.CAL_ID
  let #print_col7 = &TMP2.GPCH_RP_AMNT01_12
  do  PrintCol-E
  print #print_col7 (  ,#col7) edit 'BBB,BBB,BBB,BB9.99'

FROM  PS_GPCH_RP_AL022 TMP2
WHERE TMP2.OPRID       = $prcs_oprid
  AND TMP2.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP2.GPCH_RP_CR_LINE = 'E1'

end-SELECT

end-procedure  TMP2-E1

!**TMP3****************
begin-procedure TMP3

begin-SELECT DISTINCT

TMP3.EMPLID
TMP3.EMPL_RCD
TMP3.GP_PAYGROUP
TMP3.EFFDT
TMP3.XLATLONGNAME

  if  #test = 0
     let $print_col3 = $EMPLID
     let $print_col4 = $EMPL_RCD
     let $print_col5 = $PAYGROUP
     let $print_col6 = $ASOFDATE
     let $print_col7 = $ACTION
     let #test = #test+1
     do PrintColBold
     do CleanPrintVar
  end-if

  let #None       = 1
  let $print_col3 = &TMP3.EMPLID
  let #print_col4 = &TMP3.EMPL_RCD
  let $print_col5 = &TMP3.GP_PAYGROUP
  let $print_col6 = &TMP3.EFFDT
  do Format-DateTime($print_col6, $out, {DEFMDY}, '', '')
  let $print_col6 = $out
  let $print_col7 = &TMP3.XLATLONGNAME
  do  PrintCol-E
  print $print_col7 (  ,#col7)


FROM  PS_GPCH_RP_AL023 TMP3
WHERE TMP3.OPRID       = $prcs_oprid
  AND TMP3.RUN_CNTL_ID = $prcs_run_cntl_id
  AND TMP3.GPCH_RP_CR_LINE = $line

end-SELECT

end-procedure  TMP3

!**TMPE****************
begin-procedure TMPE

begin-SELECT DISTINCT

TMPE.EMPLID
TMPE.EMPL_RCD
TMPE.GP_PAYGROUP
TMPE.CAL_ID
TMPE.RSLT_SEG_NUM
TMPE.MSGDATA1
TMPE.MSGDATA2
TMPE.MSGDATA3
TMPE.MSGDATA4
TMPE.MSGDATA5
  let #None        = 1
  let $print_col3  = &TMPE.EMPLID
  let $print_colp1 = &TMPE.GP_PAYGROUP
  let $print_colp2 = &TMPE.CAL_ID
  let #print_colp3 = &TMPE.RSLT_SEG_NUM
  do  PrintCol-Errors
  do  CleanPrintVarExcept2
  let $print_colp2 = &TMPE.MSGDATA1
  let $TMPE.MSGDATA1 = rtrim($print_colp2,' ')
  if  $TMPE.MSGDATA1 <> ''
      let $print_colp1 = $MSGDATA1
      do PrintColMsgData
  end-if
  let $print_colp2 = &TMPE.MSGDATA2
  let $TMPE.MSGDATA2 = rtrim($print_colp2,' ')
  if  $TMPE.MSGDATA2 <> ''
      let $print_colp1 = $MSGDATA2
      do PrintColMsgData
  end-if
  let $print_colp2 = &TMPE.MSGDATA3
  let $TMPE.MSGDATA3 = rtrim($print_colp2,' ')
  if  $TMPE.MSGDATA3 <> ''
      let $print_colp1 = $MSGDATA3
      do PrintColMsgData
  end-if
  let $print_colp2 = &TMPE.MSGDATA4
  let $TMPE.MSGDATA4 = rtrim($print_colp2,' ')
  if  $TMPE.MSGDATA4 <> ''
      let $print_colp1 = $MSGDATA4
      do PrintColMsgData
  end-if
  let $print_colp2 = &TMPE.MSGDATA5
  let $TMPE.MSGDATA5 = rtrim($print_colp2,' ')
  if  $TMPE.MSGDATA5 <> ''
      let $print_colp1 = $MSGDATA5
      do PrintColMsgData
  end-if

FROM  PS_GPCH_RP_AL024 TMPE
WHERE TMPE.OPRID           = $prcs_oprid
  AND TMPE.RUN_CNTL_ID     = $prcs_run_cntl_id
  AND TMPE.MESSAGE_SET_NBR = #m_set
  AND TMPE.MESSAGE_NBR     = #m_nbr

end-SELECT

end-procedure  TMPE

!**TMPW****************
begin-procedure TMPW

begin-SELECT DISTINCT

TMPW.GP_PAYGROUP
TMPW.CAL_ID
TMPW.GPCH_AL_NBR01_07

  if  #test = 0
     let $print_col3 = $PAYGROUP
     let $print_colp1 = $CAL_ID
     let $print_colp2 = $MESS_NBR
     let #test = #test+1
     do PrintColPBold
     do CleanPrintVar
  end-if

  let #None       = 1
  let $print_col3  = &TMPW.GP_PAYGROUP
  let $print_colp1 = &TMPW.CAL_ID
  let #print_colp2 = &TMPW.GPCH_AL_NBR01_07
  do  PrintCol-Warnings

FROM  PS_GPCH_RP_AL025 TMPW
WHERE TMPW.OPRID       = $prcs_oprid
  AND TMPW.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

end-procedure  TMPW

!**Country_C****************
begin-procedure Country_C
begin-SELECT
CC.COUNTRY
   let $Country             = rtrim(&CC.COUNTRY, ' ')
FROM   PS_GP_CAL_RUN   CC
     , PS_GPCH_RC_AL02 RC
WHERE  RC.GPCH_RC_CR_RUNCL  = 'C'
AND    CC.CAL_RUN_ID        = RC.CAL_RUN_ID
AND    RC.OPRID             = $prcs_oprid
AND    RC.RUN_CNTL_ID       = $prcs_run_cntl_id
end-SELECT
end-procedure  Country_C

!**Country_P****************
begin-procedure Country_P
begin-SELECT
CP.COUNTRY
   let $Country         = rtrim(&CP.COUNTRY, ' ')
FROM   PS_GP_PYENT   CP
     , PS_GPCH_RC_AL02 RP
WHERE  RP.GPCH_RC_CR_RUNCL  = 'P'
AND    CP.PAY_ENTITY        = RP.PAY_ENTITY
AND    RP.OPRID             = $prcs_oprid
AND    RP.RUN_CNTL_ID       = $prcs_run_cntl_id
end-SELECT
end-procedure  Country_P

!**Get-Rep-Lng****************
begin-procedure Get-Rep-Lng
begin-SELECT
A.LANGUAGE_CD
   let $report_language_cd    = &A.LANGUAGE_CD
FROM   PS_PRCSRUNCNTL A
WHERE  A.OPRID               = $prcs_oprid
AND    A.RUN_CNTL_ID         = $prcs_run_cntl_id
end-SELECT
end-procedure   Get-Rep-Lng

!**Get-Base-Lng****************
begin-procedure Get-Base-Lng
begin-SELECT
B.LANGUAGE_CD
  let $base_language_cd      = rpad(&B.LANGUAGE_CD, 3, ' ')
FROM   PSOPTIONS B
end-SELECT
end-procedure   Get-Base-Lng

!**MCA_BaseLang****************
begin-procedure MCA_BaseLang

begin-SELECT DISTINCT

TMPEm1.MESSAGE_SET_NBR
TMPEm1.MESSAGE_NBR
MCA1.MESSAGE_TEXT
  let $print_col3 = $MSG
  do PrintColBold
  do CleanPrintVar
  let #m_set = &TMPEm1.MESSAGE_SET_NBR
  let #m_nbr = &TMPEm1.MESSAGE_NBR

  move #m_set to #value
  move #value to $m_set (99999
  move #m_nbr to #value
  move #value to $m_nbr 99999)
  string $m_set $m_nbr by ',' into $print_col3

  let $print_colp1 = &MCA1.MESSAGE_TEXT
  do PrintColP
  graphic (+1,#col3,#col8) horz-line
  do CleanPrintVar

  let $print_col3  = $EMPLID
  let $print_colp1 = $PAYGROUP
  let $print_colp2 = $CAL_ID
  let $print_colp3 = $SEG_NUM
  do PrintColPBold2
  do CleanPrintVar

  do TMPE
  do CleanPrintVar
  print ' ' ( +3,#col0)

FROM  PS_GPCH_RP_AL024 TMPEm1 , {Record_MessageCatalog} MCA1
WHERE TMPEm1.OPRID           = $prcs_oprid
  AND TMPEm1.RUN_CNTL_ID     = $prcs_run_cntl_id
  AND TMPEm1.MESSAGE_SET_NBR = MCA1.MESSAGE_SET_NBR
  AND TMPEm1.MESSAGE_NBR     = MCA1.MESSAGE_NBR

end-SELECT

end-procedure  MCA_BaseLang

!**MCA_ReportLang****************
begin-procedure MCA_ReportLang

begin-SELECT DISTINCT

TMPEm2.MESSAGE_SET_NBR
TMPEm2.MESSAGE_NBR
MCA2.MESSAGE_TEXT
  let $print_col3 = $MSG
  do PrintColBold
  do CleanPrintVar
  let #m_set = &TMPEm2.MESSAGE_SET_NBR
  let #m_nbr = &TMPEm2.MESSAGE_NBR

  move #m_set to #value
  move #value to $m_set (99999
  move #m_nbr to #value
  move #value to $m_nbr 99999)
  string $m_set $m_nbr by ',' into $print_col3

  let $print_colp1 = &MCA2.MESSAGE_TEXT
  do PrintColP
  graphic (+1,#col3,#col8) horz-line
  do CleanPrintVar

  let $print_col3  = $EMPLID
  let $print_colp1 = $PAYGROUP
  let $print_colp2 = $CAL_ID
  let $print_colp3 = $SEG_NUM
  do PrintColPBold2
  do CleanPrintVar

  do TMPE
  do CleanPrintVar
  print ' ' ( +3,#col0)

FROM  PS_GPCH_RP_AL024 TMPEm2 , {Record_MessageCatalogLang} MCA2
WHERE TMPEm2.OPRID           = $prcs_oprid
  AND TMPEm2.RUN_CNTL_ID     = $prcs_run_cntl_id
  AND TMPEm2.MESSAGE_SET_NBR = MCA2.MESSAGE_SET_NBR
  AND TMPEm2.MESSAGE_NBR     = MCA2.MESSAGE_NBR
  AND $Report_Language_Cd    = MCA2.LANGUAGE_CD

end-SELECT

end-procedure  MCA_ReportLang


!**include***************************
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure

#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers

#Include 'reset.sqc'     !Reset printer procedure
#Include 'stdapi.sqc'    !Routines to Update Run Status

#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'


#include 'hrrnctl1.sqc'  !Get run control parameter values
#include 'hrgetval.sqc'  !Get values mask routines
#include 'askaod.sqc'    !Ask As Of Date input
#include 'asksrvyr.sqc'  !Years Of Service input
#Include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'getjobtl.sqc'  !Get-Job-Title procedure

