!***********************************************************************
! GPCHTX02a.SQR  : Source Tax Month -Quellensteuer Monat-               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------!
!
!          $Date:  2013/01/18:03:27:48                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

begin-setup

!Array for All Cantons
create-array name = RekapData size = 50
field = Rekap1:char
field = Rekap2:char
field = Rekap3:number
field = Rekap4:number
field = Rekap5:number
field = Rekap6:number

create-array name = RekapDataTotal size = 150
field = Rekap1:char
field = Rekap2:char
field = Rekap3:number
field = Rekap4:number
field = Rekap5:number
field = Rekap6:number

!Array for each Canton
create-array name = CRekapData size = 1000
field = CRekap0:char
field = CRekap1:char
field = CRekap2:char
field = CRekap3:char
field = CRekap4:number
field = CRekap5:number
field = CRekap6:number
field = CRekap7:number
field = CRekap8:number

create-array name = CRekapDataTotal size = 1000
field = CRekap0:char
field = CRekap1:char
field = CRekap2:char
field = CRekap3:char
field = CRekap4:number

end-setup



!***********************************************************************
#define col1CR    1  
#define col1      3       !Versichertennummer
#define col3      55      !Mutationsdaten 47
#define col4      63       !Bruttolohn  69
#define col5      80      !Zulagen/Nebenleistungen 86
#define col6      97      !Steuertarif 99
#define col6_RD   97      !Steuertarif 99
#define col71P    106    !Percent Canton
#define col7      112     !Steuerbeitrag  117
#define col7R1    110
#define col2C     40

#define col2C     40
#define col3CN    65      !Correction
#define col3CT    35      !Correction

#define col11     2      !Kantonkürzung
#define col31     20      !Steuerbetrag
#define col41     40      !Bezugsprovision 60
#define col41_RD  40      !Bezugsprovision 60
#define col51     70      !Entschädigung 91
#define col61     90     !Ablieferung 105
#define col61_RD  85     !Ablieferung 105


#define cl2       40      !Commune for Genf

!***********************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  If $GPCH_EG_YEP_FLG = 'Y'
   If $Run_Option = 'Y' and $Rpt_Type <> 'Y'
  do Process-Main
   if $Ctl_Quarter_Opt = 'Y'
  do Get_Data_quarter
  End-if
    do Delete-RecTX025
  do Stdapi-Term
  do Get-Log
    Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,$SysDateTime,$Cancel_option) 
   Else
     If $Cancel_Option = 'Y'
     do Cancle_YEA($ptot_requestid,$Ctl_Year,$comp,$providertype,#ptot_domainid)
     Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option) 
      End-if
      do Stdapi-Term
      do Get-Log
    End-If
    
 else
   do Process-Main
  If #Domainid <> 0.000000    
  do Read-RPTX03 !Syed
    End-If
  
  do Delete-Rec
  do Delete-RecTX025
  do Stdapi-Term
  do Get-Log
  End-If
end-PROGRAM
!***********************************************************************
begin-procedure Get_Data_quarter   ! Select Historial data of employee within a canton and village.
#Debug Show '-> Get_Report_Data '  $Actual_Vill  ' , ' $Error_List
 
   let $Merk_Header    = 'CAN'
   let $IT_Exist_Data  = 'N'
   let $Canton_Old     = ' '
   let  $Empl_ID_Old =' '
Begin-Select
PBD11.PROCESS_INSTANCE
PBD11.GPCH_TX_CANTON          
PBD11.GPCH_TX_VILLAGE_CD
PBD11.GPCH_TX_TRF_TYPE
PBD11.EMPLID
PBD11.EMPL_RCD
PBD11.SEG_BGN_DT !Syed for 89b14
PBD11.SEG_END_DT
PBD11.RSLT_SEG_NUM
PBD11.SEX
PDA.NAME
PBD11.COMPANY
PBD11.PRD_END_DT
PBD11.BEGIN_DT
PBD11.END_DT
PBD11.BIRTHDATE
PBD11.GPCH_TX_TRF_CD
PBD11.NATIONAL_ID
PBD11.GPCH_AH_NNSS
PBD11.ACTION
PBD11.POSTAL
PBD11.GPCH_RP_CHAR03
PBD11.GPCH_RP_FROMDT1
PBD11.TERMINATION_DT
PBD11.GPCH_RP_AMOUNT11       &PBD11.GPCH_RP_AMOUNT11
SUM(PBD11.GPCH_RP_AMOUNT1)   &PBD11.GPCH_RP_AMOUNT1
SUM(PBD11.GPCH_RP_AMOUNT2)   &PBD11.GPCH_RP_AMOUNT2
SUM(PBD11.GPCH_RP_AMOUNT3)   &PBD11.GPCH_RP_AMOUNT3
SUM(PBD11.GPCH_RP_AMOUNT14)  &PBD11.GPCH_RP_AMOUNT14
SUM(PBD11.GPCH_RP_AMOUNT19)  &PBD11.GPCH_RP_AMOUNT19
PBD11.VISA_PERMIT_TYPE
PBD11.CONTRACT_TYPE
PBD11.REG_TEMP


  
 

  let $Empl_ID               =  &PBD11.EMPLID
  let #Empl_RCD              =  &PBD11.EMPL_RCD
  let #Rslt_Seg_Nr           =  &PBD11.RSLT_SEG_NUM
  let $Company               =  &PBD11.COMPANY
  let $PRD_E_DTR             =  &PBD11.PRD_END_DT
  let $Canton                =  rtrim(&PBD11.GPCH_TX_CANTON,' ')
  let $Actual_Can            =  &PBD11.GPCH_TX_CANTON
  let $Village               =  rtrim(&PBD11.GPCH_TX_VILLAGE_CD,' ')
  let $CantonR               =  $Canton
  let $Village_CDR           =  &PBD11.GPCH_TX_VILLAGE_CD
  let $Actual_Vill           =  &PBD11.GPCH_TX_VILLAGE_CD
  let $PostalR               =  &PBD11.POSTAL
  let $ActionR               =  &PBD11.ACTION
  let $TaxTerm               =  rtrim(&PBD11.GPCH_RP_CHAR03,' ')
  let $TaxTermDt             =  &PBD11.GPCH_RP_FROMDT1 
  let $Tax_Tariff_TypeR      =  rtrim(&PBD11.GPCH_TX_TRF_TYPE,' ')
  let $Tax_Tariff_CodeR      =  rtrim(&PBD11.GPCH_TX_TRF_CD,' ')
  let $B_DTR                 =  &PBD11.BEGIN_DT
  let $E_DTR                 =  &PBD11.END_DT
  let $N_IdR                 =  rtrim(ltrim(&PBD11.NATIONAL_ID,' '),' ')
  let $NNSS_IdR              =  rtrim(ltrim(&PBD11.GPCH_AH_NNSS,' '),' ')

  let $Empl_sex              =  rtrim(&PBD11.SEX,' ')  !SYED 
  let $Empl_NameR            =  rtrim(&PDA.NAME,' ')
  let #Amount1R              =  &PBD11.GPCH_RP_AMOUNT1
  let #Amount2R              =  &PBD11.GPCH_RP_AMOUNT2
  let #Amount3R              =  &PBD11.GPCH_RP_AMOUNT3
  let #Amount11R             =  &PBD11.GPCH_RP_AMOUNT11
  let #Amount14R             =  &PBD11.GPCH_RP_AMOUNT14
  let #Amount19R             =  &PBD11.GPCH_RP_AMOUNT19
  let $Birth_date            =  &PBD11.BIRTHDATE 
  let $Visa_per              = rtrim(&PBD11.VISA_PERMIT_TYPE,' ')
  let $Cont_type             = rtrim(&PBD11.CONTRACT_TYPE,' ')

  let $Termination_DT        =  &PBD11.TERMINATION_DT
  let $Type_employee         = rtrim(&PBD11.REG_TEMP,' ')
  let $SegEnddt              = &PBD11.SEG_END_DT
  let $SegBegdt               = &PBD11.SEG_BGN_DT  
  let #Amount3R_XML          =  #Amount3R + #Amount14R + #Amount19R 
  
  let #Amt_tot = #Amount1R +#Amount2R
  do ConvertToComponents($Birth_date,$tmp_y,$tmp_m,$tmp_d)
    let $Birth_DT1 = $tmp_y ||'-' || $tmp_m ||'-' || $tmp_d 

   If $Type_employee='T'
    let  $Type_emp_xml='A'
   End-If
   If $Type_employee='R'
    let  $Type_emp_xml='P'
   End-If
      
    if $N_IdR <> ''
       let $N_IdT_xml      = $N_IdR
        End-If
      ! do ConvertToComponents($Termination_DT,$yy3_TDT,$mm3_TDT,$dd3_TDT)
       do ConvertToComponents($E_DTR,$yy3_TDT,$mm3_TDT,$dd3_TDT)
       !if $Termination_DT<> ''
       if $E_DTR <> '' and ($E_DTR >= $SegBegdt and $E_DTR <= $SegEnddt) !SYED for b14
    let   $Term_DT_xml = $yy3_TDT||'-'||$mm3_TDT||'-'||$dd3_TDT
      else
     let $Term_DT_xml = ''
   End-if

    let $Tax_Tariff_Code_xml=substr($Tax_Tariff_CodeR,0,1)
    If $Tax_Tariff_Code_xml='B' or $Tax_Tariff_Code_xml='C'
        let $Tax_Tariff_Code_xml= substr($Tax_Tariff_CodeR,0,2)
      End-If
    
        If $Cont_type =''
        let $Cont_type ='P'
      End-If
       If $Visa_per='PC'
        let $Visa_per='C'
           End-If
 !********************For B14************
 evaluate $lang_item
  when = 'GER'
     let $EStr = 'E: '
     let $AStr = 'A: '
     let $TStr = 'TW: '
     break
  when = 'FRA'
     let $EStr = 'E: '
     let $AStr = 'S: '
     let $TStr = 'CT: '
     break
  when = 'ITA'
     let $EStr = 'E: '
     let $AStr = 'U: '
     let $TStr = 'MT: '
     break
  when-other
     let $EStr = 'E: '
     let $AStr = 'T: '
     let $TStr = 'TC: '
     break
  end-evaluate

  if $ActionR = 'HIR'
    let $String_Before_E = $EStr
  end-if

  if $ActionR = 'TWE'
    let $String_Before_E = $TStr
  end-if

  !if $ActionR = 'TER'
  if $Taxterm = 'TER'  
    let $String_Before_T = $AStr
  end-if

  
  !------------------------------------------------------------------- Print Positions
  


       let #coln1 = 73
       let #coln2 = 98
       let #coln3 = 121
       let #coln4 = 146
       let #coln5 = 156
       let #coln6 = 163
   

  !------------------------------------------------------------------- Check for Still Hire and Zero Rows

  let $StillHired0 = 'Y'

  do Get_Beg_Mnth($PRD_E_DTR, $BgDt0 )
 

  do Format-DateTime($BgDt0        ,$BgDtCmp0         , {DEFCMP}, '', '')
  do Format-DateTime($E_DTR        ,$E_DTR0           , {DEFCMP}, '', '')
  do Format-DateTime($PRD_E_DTR    ,$PRD_E_DTR_CMP    , {DEFCMP}, '', '')
  do Format-DateTime($ReportEndDate,$ReportEndDate_CMP, {DEFCMP}, '', '')
   do Format-DateTime($SegEnddt,$SegEnddt_CMP, {DEFCMP}, '', '')
   
  if ($E_DTR0 < $BgDtCmp0) and  ($E_DTR0 <> '')
     let $StillHired0 = 'N'
   
  end-if

   
   if $PRD_E_DTR_CMP <= $ReportEndDate_CMP !SYED = chnagd to <
     
          if ($StillHired0 = 'Y' or (#Amount1R <> 0 or #Amount2R <> 0 or #Amount3R <> 0 or
                                     #Amount14R <> 0 or #Amount19R <> 0))
  
              do Print_Current_Data  ! Accumulates and prints Current Data
          end-if
  else
          if (#Amount1R <> 0 or #Amount2R <> 0 or #Amount3R <> 0 or
              #Amount14R <> 0 or #Amount19R <> 0)
              do Print_Retro_Data    ! Accumulates and prints Retro Data
          end-if
  end-if
  !--------------------------------------------------------------------


 !***************************************
    do First-last-Name
    do Get-Sex
   do begin-end-date

   
   do ConvertToComponents($SegBegdt,$yy2_BDT,$mm2_BDT,$dd2_BDT)
    let  $B_DT_xml = $yy2_BDT||'-'||$mm2_BDT||'-'||$dd2_BDT
    

       do ConvertToComponents($SegEnddt,$yy1_EDT,$mm1_EDT,$dd1_EDT)
      let   $E_DT_xml = $yy1_EDT||'-'||$mm1_EDT||'-'||$dd1_EDT

   let #Acclamt1=#Amount1R
    do Get_Village_Name
  
      do create-xml
      let #Acclamt1=''
     let $Empl_ID_Old = $Empl_ID

FROM PS_GPCHTX025_TMP PBD11
, {Record_Person} PDA
WHERE PBD11.EMPLID         = PDA.EMPLID
AND PBD11.PROCESS_INSTANCE = #prcs_process_instance
AND PBD11.GPCH_TX_CANTON ='VD'
![$Error_List]  ! Canton with Blanks to be treated separately
GROUP BY PBD11.PROCESS_INSTANCE,PBD11.EMPLID,PBD11.GPCH_TX_CANTON,PBD11.GPCH_TX_VILLAGE_CD,PBD11.GPCH_TX_TRF_TYPE,
PBD11.EMPL_RCD,PBD11.SEG_BGN_DT,PBD11.SEG_END_DT,PBD11.RSLT_SEG_NUM,PBD11.SEX,PDA.NAME,PBD11.COMPANY,PBD11.PRD_END_DT,PBD11.BEGIN_DT,
PBD11.END_DT,PBD11.BIRTHDATE,PBD11.GPCH_TX_TRF_CD,PBD11.NATIONAL_ID,PBD11.GPCH_AH_NNSS,PBD11.ACTION,PBD11.POSTAL,PBD11.GPCH_RP_CHAR03,
PBD11.GPCH_RP_FROMDT1,PBD11.TERMINATION_DT,PBD11.GPCH_RP_AMOUNT11,PBD11.VISA_PERMIT_TYPE,
PBD11.CONTRACT_TYPE,PBD11.REG_TEMP
Order BY PBD11.EMPLID
![$Sort_Order]
End-select
End-Procedure


!***********************************************************************
Begin-procedure begin-end-date

evaluate $Quarter
     when = '1'
          move '0101' to $Quar_mth1
          move '0331' to $Quar_mth2
         
          break
     when = '2'
          move '0401' to $Quar_mth1
          move '0631' to $Quar_mth2
          
          break
     when = '3'
          move '0701' to $Quar_mth1
          move '0930' to $Quar_mth2
          break
     when = '4'
          move '1001' to $Quar_mth1
          move '1231' to $Quar_mth2
          break
     end-evaluate
     
    !------------------------------------------------------------------ QuarterMonth1
    let $QuarterMonth1 = $Ctl_Year  || $Quar_mth1  || '0000'
    let $QuarterMonth2 = $Ctl_Year  || $Quar_mth2  || '0000' 
    do Format-DateTime($QuarterMonth1,$Ctl_Start_Dt, {DEFCMP},'','native')
    do Format-DateTime($QuarterMonth2,$Ctl_End_Dt, {DEFCMP},'','native')

    

End-Procedure



!***********************************************
begin-procedure Init-Report
  
  do Stdapi-Init
  let $Tax_Tariff_Type_PBD = ''
  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
     do Get-Base-Language
  end-if
        let $providertype ='A'
    if $GPCH_EG_YEP_FLG = 'Y'
            do Get-Provider($providertype,$prcs_oprid,$prcs_run_cntl_id,$prov_crit)
            
         If rtrim($prov_crit,' ') <>''
        let $Provider_crit = ' AND P.GPCH_SI_PROV_CD   = ''' || $prov_crit || ''' '
            else
            let $Provider_crit = ' '
         End-If
         

    do Get-PTotals-Data($Provider_crit,$providertype,#Domainid_tx,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey) 
    do Check_Run_Report(#ptot_domainid,$Ctl_Year,$comp,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)
     Let $Ctl_PayEntity = $comp    
    
   end-if 
     move 'GPCHTX02' to $ReportID

  if $language_cd <> ''
     do Get-Language ($ReportID, $language_cd)
  else
     let $Blank_lang = 'Y'
  end-if

     let $ReportTitle = $TITLE1_STR
     let $TITLE1      = $TITLE1_STR
     #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  if #count_Emplid <> 0
     let $Emplid_Criteria1          = ' AND PBD.EMPLID IN  ( ' || $Emplid-String || ')'
     let $Emplid_Criteria2          = ' AND CAN.EMPLID IN  ( ' || $Emplid-String || ')'
     let $Emplid_Criteria3          = ' AND VIL.EMPLID IN  ( ' || $Emplid-String || ')'

  else
     let $Emplid_Criteria1          = ' '
     let $Emplid_Criteria2          = ' '
     let $Emplid_Criteria3          = ' '

  end-if

end-procedure
!***********************************************************************
begin-procedure Get-Values

    let $language_cd                 = RTRIM($PRCS_LANGUAGE_CD,' ')
    let $lang_item                   = $language_cd
     Let $GPCH_EG_YEP_FLG = &GPCH_RUN_CNTL.GPCH_EG_YEP_FLG
    let $Ctl_Canton                  = RTRIM(&GPCH_RUN_CNTL.GPCH_TX_CANTON,' ')
    let $Ctl_Print_Vill_Total        = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_FINAL_PR,' ')
    let $Ctl_Quarter_Opt             = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_YEAR_OPT,' ')
    let $Quarter                     = RTRIM(&GPCH_RUN_CNTL.GPCH_FK_QUARTER,' ')
    let $Ctl_Year                    = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
    let #Domainid                    = &GPCH_RUN_CNTL.GPCH_TX_DOMAINID  !domainid for IASC
    let  #Domainid_tx                 = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID !regular domainid for dashboard
    let $IASC_PrintXML               = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_PRN_COMP,' ')
     Let $comp                  = rtrim(&GPCH_RUN_CNTL.COMPANY,' ') !Only for use in status tbl     

    if $Ctl_Canton <> ''
       let $Ctl_Canton_Crit1         = ' AND PBD.GPCH_TX_CANTON    = ''' || $Ctl_Canton || ''' '
       let $Ctl_Canton_Crit2         = ' AND CAN.GPCH_TX_CANTON    = ''' || $Ctl_Canton || ''' '
       let $Ctl_Canton_Crit3         = ' AND VIL.GPCH_TX_CANTON    = ''' || $Ctl_Canton || ''' '
    else
       let $Ctl_Canton_Crit1         = ' '
       let $Ctl_Canton_Crit2         = ' '
       let $Ctl_Canton_Crit3         = ' '
    end-if
  If $GPCH_EG_YEP_FLG ='Y'
     let $VDCrit_String ='VD'
    let $Ctl_Canton_CritVD         = 'AND PBD1.GPCH_TX_CANTON    = ''' || $VDCrit_String|| ''' '
  
    else
   let $Ctl_Canton_CritVD = ' '
  
    End-If

end-procedure
!***********************************************************************
Begin-Procedure Get_Date_Values
#Debug Show 'Get_Date_Values -> '  $Ctl_Curr_Pay_End_Dt ' , ' $ReportEndDate

  let #Date_Type= {DateType}

  if $Final_Date = 'N'

      if $Ctl_Curr_Pay_End_Dt <> ''
         do Get_Beg_Mnth($Ctl_Curr_Pay_End_Dt,$ReportBeginDate)
         do Get_End_Mnth($Ctl_Curr_Pay_End_Dt,$ReportEndDate)
      end-if

  end-if


  if $ReportEndDate <> ''

      do ConvertToComponents($ReportEndDate  ,$yy11,$mm11,$dd11)
      do ConvertToComponents($ReportBeginDate,$yy10,$mm10,$dd10)
      do Format-DateTime($ReportBeginDate,$Ctl_B_Date,{DEFCMP},'','')
      do Format-DateTime($ReportEndDate  ,$Ctl_E_Date,{DEFCMP},'','')

      let $CMP_Start_Dt = $yy11 || '01' || '01' || '0000'
      do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
      let $YearBeginDate = rtrim($out, ' ')

      #Debug Show 'YearBeginDate ' $YearBeginDate

      Evaluate #Date_Type
      when = 1
             let $from_to_format = $dd10 || '{PTDateDelim}' ||
             $mm10 || '{PTDateDelim}' || ' - ' || $dd11 ||
             '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $yy11
      break
      when = 2
             let $from_to_format = $mm10 || '{PTDateDelim}'
             || $dd10 || '{PTDateDelim}' || ' - ' || $yy11
             || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $dd11
      break
      when-other
            let $from_to_format = $mm10 || '{PTDateDelim}'
            || $dd10 || '{PTDateDelim}' || ' - ' || $mm11
            || '{PTDateDelim}' || $dd11 || '{PTDateDelim}' || $yy11
      break
      End-Evaluate

  end-if

#Debug Show 'Get_Date_Values <- '
End-Procedure Get_Date_Values
!***********************************************************************
Begin-Procedure Get-Language($ReportID, $language_cd)

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHTX01')
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHTX01', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation

end-procedure
!***********************************************************************
begin-procedure Get-Base-Language

begin-select
LANGUAGE_CD
  move &Language_Cd to $Base_Language
FROM PSOPTIONS
end-select

end-procedure
!************************************************
begin-procedure Report-Translation

  do Get_Field_Information ('GPCHTX02', 'TITLE1_STR',             $TITLE1_STR,        #CW)
  do Get_Field_Information ('GPCHTX02', 'ZIP_CODE_STR',           $ZIP_CODE_STR,      #CW)
  do Get_Field_Information ('GPCHTX02', 'RECAPITULATION_STR',     $RECAPITULATION_STR,#CW)
  do Get_Field_Information ('GPCHTX02', 'COMM_DOMICILE_STR',      $COMM_DOMICILE_STR, #CW)
  do Get_Field_Information ('GPCHTX02', 'TOTAL_CANTON_STR',       $TOTAL_CANTON_STR,  #CW)
  do Get_Field_Information ('GPCHTX02', 'PERCENT1_STR',           $PERCENT1_STR,      #CW)
  do Get_Field_Information ('GPCHTX02', 'PERCENT2_STR',           $PERCENT2_STR,      #CW)
  do Get_Field_Information ('GPCHTX02', 'CANTON_NAME_STR',        $CANTON_NAME_STR,   #CW)
  do Get_Field_Information ('GPCHTX02', 'PROVISION_REF_STR',      $PROVISION_REF_STR, #CW)
  do Get_Field_Information ('GPCHTX02', 'RESTITUTION_STR',        $RESTITUTION_STR,   #CW)
  do Get_Field_Information ('GPCHTX02', 'DELIVERY_STR',           $DELIVERY_STR,      #CW)
  do Get_Field_Information ('GPCHTX02', 'FROM_STR',               $FROM_STR,          #CW)
  do Get_Field_Information ('GPCHTX02', 'EMPLOYER_STR',           $EMPLOYER_STR,      #CW)
  do Get_Field_Information ('GPCHTX02', 'TAX_AMOUNT_STR',         $TAX_AMOUNT_STR,    #CW)
  do Get_Field_Information ('GPCHTX02', 'TOTAL_COMMUNE_STR',      $TOTAL_COMMUNE_STR, #CW)
  do Get_Field_Information ('GPCHTX02', 'TAX_CANTON_STR',         $TAX_CANTON_STR,    #CW)
  do Get_Field_Information ('GPCHTX02', 'COMM_WORK_STR',          $COMM_WORK_STR,     #CW)
  do Get_Field_Information ('GPCHTX02', 'BORDER_CR_STR',          $BORDER_CR_STR,     #CW)
  do Get_Field_Information ('GPCHTX02', 'CORRECTION_STR',         $CORRECTION_STR,    #CW)
  do Get_Field_Information ('GPCHTX02', 'CORR_OPTIM_STR',         $CORR_OPTIM_STR,    #CW)
  do Get_Field_Information ('GPCHTX02', 'WITHOUT_STR',            $WITHOUT_STR,       #CW)
  do Get_Field_Information ('GPCHTX02', 'OPTIM_STR',              $OPTIM_STR,         #CW)
  do Get_Field_Information ('GPCHTX02', 'CORRECTION2_STR',        $CORRECTION2_STR,   #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_AHV_NUMBER',          $HD_AHV_NUMBER,     #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_NNSS_NUMBER',         $HD_NNSS_NUMBER,    #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_NAME',                $HD_NAME,           #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_MUTATION',            $HD_MUTATION,       #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_ENTRYEXIT',           $HD_ENTRYEXIT,      #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_ENTRYEXIT1',          $HD_ENTRYEXIT1,     #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_TARIFFCHG',           $HD_TARIFFCHG,      #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_GROSSWAGE',           $HD_GROSSWAGE,      #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_COMMUNE',             $HD_COMMUNE,        #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_TAXAMT',              $HD_TAXAMT,         #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_TAXAMT1',             $HD_TAXAMT1,        #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_TXTARIFF',            $HD_TXTARIFF,       #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_BNSBEN1',             $HD_BNSBEN1,        #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_BNSBEN2',             $HD_BNSBEN2,        #CW)
  do Get_Field_Information ('GPCHTX02', 'HD_BNSBEN3',             $HD_BNSBEN3,        #CW)
    

  do Get_Field_Information ('GPCHTX01', 'NOT_ASS_SOURCE_TAX',     $NOT_ASS_SOURCE_TAX,#CW)
  do Get_Field_Information ('GPCHTX01', 'COUNTRY_AUSTRIA',        $COUNTRY_AUSTRIA,   #CW)
  do Get_Field_Information ('GPCHTX01', 'COUNTRY_GERMANY',        $COUNTRY_GERMANY,   #CW)
  do Get_Field_Information ('GPCHTX01', 'COUNTRY_ITALY',          $COUNTRY_ITALY,     #CW)
  do Get_Field_Information ('GPCHTX01', 'COUNTRY_FRANCE',         $COUNTRY_FRANCE,    #CW)
  do Get_Field_Information ('GPCHTX01', 'COUNTRY_SWISS',          $COUNTRY_SWISS,     #CW)

  do Get_Field_Information ('GPCHGLOB', 'TOTAL' ,          $TOTAL_SUM_STR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',     $LG_RUNCTLPA,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',        $LG_VALUE,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',       $LG_REPLOG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',      $LG_LOGITEM,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',        $LG_PINNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CALIDCR',      $LG_CALIDCR,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'EMPLID',          $HD_EMPLID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'CANTON_PAGE',     $HD_CANTON_PAGE,  #CW)
  
  let $DELIVERY_STR_CAN = ltrim($DELIVERY_STR,' ')
  
end-procedure
!***********************************************************************
begin-heading 13
  #Define ColR 104
  #Define ColM 116
 
  
  do Append_Report_Translation ('GPCHGLOB')
  do Get_Field_Information ('GPCHGLOB', 'COMPANY_NM', $stdhdg_co_nm  , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'REPORT_ID' , $stdhdg_rep_id , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'PAGE_NO'   , $stdhdg_page_no, #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_DATE'  , $stdhdg_run_dt , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_TIME'  , $stdhdg_run_tm , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'END_REPORT', $stdhdg_end_rep, #dummy_width)

 
   print '            '    (1,1)
   print $stdhdg_co_nm     ()          center
 
   print $stdhdg_rep_id    (+1,2)
   print $ReportID         (0,15)
   print $ReportTitle      ()          center
   let #RptCol = {ColR} - 8
   print $stdhdg_page_no   (0,#RptCol)
   print #page-count       (0,{ColM})      edit 88888888
 
   print $stdhdg_run_dt    (+1,#RptCol)
   print $ReportDate       (0,{ColM})
 
   print $stdhdg_run_tm    (+1,#RptCol)
   print $ReportTime       (0,{ColM})


  position (-1,1)
  let $empl_str = $EMPLOYER_STR || ': ' || $Employer_StaxNr
  let $fr_str   = $FROM_STR     || ' '  || $from_to_format

  if ($Ctl_Canton <> '') or ($Merk_Header <> 'TOT')
     print $empl_str            ()     center
  end-if

  print $fr_str                 (+1,)  center

  if ($Merk_Header <> 'TOT')
     let #PageCounter = #PageCounter + 1
     print $HD_CANTON_PAGE      (5,#RptCol)
     print #PageCounter         (,+5) edit 88888888
  end-if

  print $Cpdescr (4,2)

  if $Canton = '' and $last_header <> 'Y'
     print $NOT_ASS_SOURCE_TAX  (+1,)  center
     goto aftervillage
  end-if

  if rtrim ($Village_CDR,' ') = '' and $last_header <> 'Y'
     print $NOT_ASS_SOURCE_TAX  (+1,)  center
  end-if
  aftervillage:
  
     

  evaluate $Merk_Header
  when = 'CAN'
         let #col=50
                     
          
           print $Canton_NameR      (+1,2)
           print $Village_CDR       (+1,2)
           print $Village_NameR     (+1,2)
           print '_'                (+1,2,129)  fill
           print $HD_AHV_NUMBER     (+1,2)
           print $HD_NAME           (,17)
           if $Ctl_Canton = 'GE' or rtrim($Actual_Can,' ') = 'GE'
            !print $HD_COMMUNE        (,35)
            print $COMM_DOMICILE_STR  (,40) wrap 8 3 
                 if length($COMM_DOMICILE_STR) > 16
                print ''                 (-2,40)
             Else
                print ''                 (-1,40)
                 end-if
 
           end-if
           print $HD_MUTATION       ( ,#col)
           
           
           If $LANGUAGE_CD = 'FRA'
             if $Ctl_Canton = 'GE' or rtrim($Actual_Can,' ') = 'GE'
                let $HD_GROSSWAGE = 'Prestations'
             Else
                let $HD_GROSSWAGE = 'Salaire brut'

             end-if
           End-if
           print $HD_GROSSWAGE      (,67)
           print $HD_BNSBEN1       (,80)
           print $HD_TXTARIFF      (,95)
           print ' %'             (,108,3)
           print $HD_TAXAMT        (,114)
    
           print $HD_ENTRYEXIT    (+1,#col)
           
           If $LANGUAGE_CD = 'FRA'
              let $AMOUNT1_STR = 'soumis'
              if $Ctl_Canton = 'GE' or rtrim($Actual_Can,' ') = 'GE'
                 let $AMOUNT1_STR = 'soumises'
             print $AMOUNT1_STR      (,70)
              ELSE           
                 let $AMOUNT1_STR = 'soumis'
                 print $AMOUNT1_STR      (,70)
              end-if
           End-if
           print $HD_BNSBEN2       (,80)
           if $LANGUAGE_CD = 'ITA'
           print $HD_TAXAMT1        (,110)
           end-if
           print $HD_TARIFFCHG    (+1,#col)
           print $HD_BNSBEN3       (,80)
           print $HD_ENTRYEXIT1    (+1,#col)
           print '_'              (+1,2,129)    fill          
     
     if ($Tax_Tariff_TypeR <> 'S')
        evaluate $Tax_Tariff_TypeR
        when = 'A'
           let $BC_STR = $BORDER_CR_STR || '   ' || $COUNTRY_AUSTRIA
           print  $BC_STR  (8,3)
           break
        when = 'D'
           let $BC_STR = $BORDER_CR_STR || '   ' || $COUNTRY_GERMANY
           print  $BC_STR  (8,3)
           break
        when = 'O'
           let $BC_STR = $BORDER_CR_STR || '   ' || $WITHOUT_STR
           print  $BC_STR  (8,3)
           break
        when = 'I'
           let $BC_STR = $BORDER_CR_STR || '   ' || $COUNTRY_ITALY
           print  $BC_STR  (8,3)
           break
        when-other
           let $BC_STR = ''
           break
        end-evaluate
     end-if
           
    
     break
  when = 'COM'
     print $Canton_NameR         (+1,3)
     print $RECAPITULATION_STR   (+1,3)
     print '_'                   (+4,2,129)    fill
     print $ZIP_CODE_STR         (+1,{col1})
     if $Ctl_Canton = 'GE' or rtrim($Actual_Can,' ') = 'GE'
        print $COMM_WORK_STR     (,{col2C})
     else
        print $COMM_DOMICILE_STR (,{col2C})
     end-if
     print $TAX_AMOUNT_STR       (,{col6_RD})
     print '_'                   (+1,2,129)    fill
     break
  when = 'TOT'
     if ($Ctl_Canton <> '')
        let #PageCounter = #PageCounter + 1
        print $stdhdg_page_no    (5,{ColR})
        print #PageCounter       (,{ColM}) edit 88888888
     end-if

     if $Ctl_Canton <> ''
        print $Canton_NameR      (,3)
     end-if

     print $COUNTRY_SWISS        (+1,2)
     print $RECAPITULATION_STR   (+1,2)
     print '_'                   (+3,2,129)    fill
     print $CANTON_NAME_STR      (+1,{col11})
     print $TAX_AMOUNT_STR       (,{col31})
     print $PROVISION_REF_STR    (,{col41_RD})
     print $RESTITUTION_STR      (,{col51})
     print $DELIVERY_STR         (,{col61_RD}) !wrap 11 2 keep-top
     print '_'                   (+1,2,129)    fill
     break
  when-other
     break
  end-evaluate

end-heading
!***********************************************************************
begin-procedure Ask-Input
  let $Emplid-String            = ''
  let $temp-value               = ''
  let #count_Emplid             = 0
  let $Emplid_Criteria1         = ''


  input $Ctl_Curr_Pay_End_Dt    'Current Pay End Date ' type=date
  input $Ctl_PayEntity          'Pay Entity '           type=char
  more:
  input $Ask_Emplid             'EMPLID, you can select mmore again Yes(Y) No(N)'

  if $Ask_Emplid = 'Y'
         input $Ctl_Emplid  'EMPLID '
         if $Ctl_Emplid <> ''
         let $temp-value                = rtrim($Ctl_Emplid,' ')
         let $Emplid-String             = $Emplid-String || '''' || $temp-value || '''' || ','
         let #count_Emplid              = #count_Emplid + 1
         end-if
         goto more
  end-if

  if #count_Emplid <> 0

         let $Emplid-String               = rtrim($Emplid-String,',')
         let $Emplid_Criteria1            = ' AND PBD.EMPLID  IN ( ' || $Emplid-String || ')'

  end-if

  input $Ctl_Canton 'Canton '

end-procedure Ask-Input
!***********************************************************************
begin-procedure Process-Main
#Debug Show '-> Process-Main ' $ReportEndDate ' , ' $Ctl_End_Dt

  if $Ctl_Quarter_Opt = 'Y'
     let $ReportEndDate = $Ctl_End_Dt
  end-if
  
  let $Ctl_Company         = $Ctl_PayEntity
  let $Ctl_Curr_Pay_End_Dt = $ReportEndDate
  do Get-PayEntity-Company        
  do Get_Village_Description
  do Get_Canton_Description

  do Get-Company-Address($Ctl_PayEntity,$ReportEndDate,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                          $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
  do Load_Company_Description                          

  let #PageCounter     = 0

  let $Sort_Order      = 'ORDER BY PBD1.GPCH_TX_CANTON ,PBD1.GPCH_TX_VILLAGE_CD,' ||
                         'PBD1.GPCH_TX_TRF_TYPE,PBD1.NATIONAL_ID,PBD1.GPCH_AH_NNSS,PD.NAME,PBD1.EMPLID,' ||
                         'PBD1.BIRTHDATE,PBD1.PRD_END_DT DESC'


  !------------------------------------------------------------------------------

  if $Ctl_Quarter_Opt = 'Y'

    let #ComCountT = 0
    do InitialCommRekapTotal       ! Initialize Array


    let #CantonCountT = 0
    do InitRekapDataTotal          ! Initialize Array

    evaluate $Quarter
     when = '1'
          move '0131' to $Quar_mth1
          move '0201' to $Quar_mth2
          move '0331' to $Quar_mth3
          break
     when = '2'
          move '0430' to $Quar_mth1
          move '0531' to $Quar_mth2
          move '0630' to $Quar_mth3
          break
     when = '3'
          move '0731' to $Quar_mth1
          move '0831' to $Quar_mth2
          move '0930' to $Quar_mth3
          break
     when = '4'
          move '1031' to $Quar_mth1
          move '1130' to $Quar_mth2
          move '1231' to $Quar_mth3
          break
     end-evaluate
          let $seqnum='1'
    let $Final_Date         = 'N'
    let $Canton_Quarter_flg = 'N'
    !------------------------------------------------------------------ QuarterMonth1
    let $QuarterMonth1 = $Ctl_Year  || $Quar_mth1  || '0000'
    do Format-DateTime($QuarterMonth1,$Ctl_Curr_Pay_End_Dt, {DEFCMP},'','native')
    do Get_Date_Values
    do Get-Cal-Run-Id-Count-Month

    if $Cal_Run_Id_M_String      <> ''
       let $Cal_Run_Id_Crit_A        = ' AND A.CAL_RUN_ID      IN ( ' || $Cal_Run_Id_M_String || ')'
       let $Cal_Run_Id_Crit_PBD      = ' AND PBD.CAL_RUN_ID    IN ( ' || $Cal_Run_Id_M_String || ')'
    else
       let $Cal_Run_Id_Crit_A        = ' '
       let $Cal_Run_Id_Crit_PBD      = ' '
    end-if


    do Prepare_Print_Data
        let $seqnum='2'
    !------------------------------------------------------------------ QuarterMonth2
    if $Quar_mth2 = '0201'

       let $QuarterMonth2 = $Ctl_Year  || $Quar_mth2  || '0000'
       do Format-DateTime($QuarterMonth2,$Ctl_Curr_Pay_End_Dt, {DEFCMP},'','native')

       do Get_End_Mnth($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt)

    else

       let $QuarterMonth2 = $Ctl_Year  || $Quar_mth2  || '0000'
       do Format-DateTime($QuarterMonth2,$Ctl_Curr_Pay_End_Dt, {DEFCMP},'','native')

    end-if

    do Get_Date_Values
    do Get-Cal-Run-Id-Count-Month

    if $Cal_Run_Id_M_String      <> ''
       let $Cal_Run_Id_Crit_A        = ' AND A.CAL_RUN_ID      IN ( ' || $Cal_Run_Id_M_String || ')'
       let $Cal_Run_Id_Crit_PBD      = ' AND PBD.CAL_RUN_ID    IN ( ' || $Cal_Run_Id_M_String || ')'
    else
       let $Cal_Run_Id_Crit_A        = ' '
       let $Cal_Run_Id_Crit_PBD      = ' '
    end-if

    if $Cal_Run_Id_Crit_PBD     <> ' '
        do Prepare_Print_Data
    end-if
     let $seqnum='3'
    !------------------------------------------------------------------ QuarterMonth3
    let $QuarterMonth3 = $Ctl_Year  || $Quar_mth3  || '0000'
    do Format-DateTime($QuarterMonth3,$Ctl_Curr_Pay_End_Dt, {DEFCMP},'','native')
    do Get_Date_Values
    do Get-Cal-Run-Id-Count-Month

    if $Cal_Run_Id_M_String      <> ''
       let $Cal_Run_Id_Crit_A        = ' AND A.CAL_RUN_ID      IN ( ' || $Cal_Run_Id_M_String || ')'
       let $Cal_Run_Id_Crit_PBD      = ' AND PBD.CAL_RUN_ID    IN ( ' || $Cal_Run_Id_M_String || ')'
    else
       let $Cal_Run_Id_Crit_A        = ' '
       let $Cal_Run_Id_Crit_PBD      = ' '
    end-if

    if $Cal_Run_Id_Crit_PBD     <> ' '
            do Prepare_Print_Data
    end-if
    
   !------------------------------------------------------------------
   ! To Print Total of All Cantons of the Quarter.
    let $Final_Date = 'Y'
    do Format-DateTime($QuarterMonth1,$ReportBeginDate, {DEFCMP},'','native')
    do Format-DateTime($QuarterMonth3,$ReportEndDate,   {DEFCMP},'','native')
    do Get_Beg_Mnth($ReportBeginDate,$ReportBeginDate)

    do Get_Date_Values


    let #CantonCount = 0
    do InitRekapData          ! Initialize Array
    do Select_Quarter_Canton
    do Print_Final_Canton_Total
!------------------------------------------------------------------
  else
      let $seqnum='0'
    let $Final_Date         = 'N'
    let $Canton_Quarter_flg = 'N'
    do Get_Date_Values

    if $Cal_Run_Id_M_String      <> ''
       let $Cal_Run_Id_Crit_A        = ' AND A.CAL_RUN_ID      IN ( ' || $Cal_Run_Id_M_String || ')'
       let $Cal_Run_Id_Crit_PBD      = ' AND PBD.CAL_RUN_ID    IN ( ' || $Cal_Run_Id_M_String || ')'
    else
       let $Cal_Run_Id_Crit_A        = ' '
       let $Cal_Run_Id_Crit_PBD      = ' '
    end-if

    if $Cal_Run_Id_Crit_PBD     <> ' '
        do Prepare_Print_Data
    end-if
  end-if


#Debug Show '<- Process-Main '
end-procedure
!***************************************************************************************
Begin-Procedure Select_Quarter_Canton
#Debug Show '-> Select_Quarter_Canton '


Begin-Select distinct
#ifdef ORACLE
/*+ INDEX(CAN PS_GPCH_RP_0001)*/
#endif
CAN.GPCH_TX_CANTON

   let $Quarter_Canton  = rtrim(&CAN.GPCH_TX_CANTON,' ')
   let $Canton          = rtrim(&CAN.GPCH_TX_CANTON,' ')

   let #i = 0

   let $Exist = 'N'

   let #RP_amnt3P_T     =  0
   let #RP_stxP_T       =  0
   let #RP_amnt4P_T     =  0
   let #RP_amnt5P_T     =  0

  while #i < #CantonCountT

     get $CantonP         from RekapDataTotal(#i) Rekap1
     get $Canton_NameP    from RekapDataTotal(#i) Rekap2
     get #RP_amnt3P       from RekapDataTotal(#i) Rekap3
     get #RP_stxP         from RekapDataTotal(#i) Rekap4
     get #RP_amnt4P       from RekapDataTotal(#i) Rekap5
     get #RP_amnt5P       from RekapDataTotal(#i) Rekap6


     if  $CantonP =  $Quarter_Canton

         let $Exist = 'Y'

         let $CantonP_T       =  $CantonP
         let $Canton_NameP_T  =  $Canton_NameP
         let #RP_amnt3P_T     =  #RP_amnt3P_T    + #RP_amnt3P
         let #RP_stxP_T       =  #RP_stxP
         let #RP_amnt4P_T     =  #RP_amnt4P_T    + #RP_amnt4P
         let #RP_amnt5P_T     =  #RP_amnt5P_T    + #RP_amnt5P

     end-if

         let #i = #i + 1

  end-While

   if $Exist = 'Y'

      put $CantonP_T         into RekapData(#CantonCount) Rekap1
      put $Canton_NameP_T    into RekapData(#CantonCount) Rekap2
      put #RP_amnt3P_T       into RekapData(#CantonCount) Rekap3
      put #RP_stxP_T         into RekapData(#CantonCount) Rekap4
      put #RP_amnt4P_T       into RekapData(#CantonCount) Rekap5
      put #RP_amnt5P_T       into RekapData(#CantonCount) Rekap6

      let #CantonCount  = #CantonCount + 1

      !------------------------------------------------------------------
      ! To Print Total of All Village/Cantons of the Quarter.

      let #ComCount = 0
      do InitialCommRekap          ! Initialize Array
      do Select_Quarter_Village
      let $Canton_Quarter_flg = 'Y'
      do New_Canton

    end-if

from PS_GPCH_RP_0001 CAN
where CAN.PAY_ENTITY          = $Ctl_PayEntity
and   CAN.GPCH_AL_CPAY_ENDDT <= $ReportEndDate
[$Ctl_Canton_Crit2]         ! Canton of the Run Control
[$Emplid_Criteria2]       ! Get Emplid List from Run Control
order by CAN.GPCH_TX_CANTON
End-Select

#Debug Show '<- Select_Quarter_Canton ' $Ctl_PayEntity ' , ' $ReportEndDate ' , '  $Emplid_Criteria2
End-Procedure  Select_Quarter_Canton
!***************************************************************************************
Begin-Procedure Select_Quarter_Village
#Debug Show '-> Select_Quarter_Village '

      ! For Blank Canton
      if $Quarter_Canton = ''
         let $Quarter_Canton = ' '
         let $VIL_Canton = ' AND VIL.GPCH_TX_CANTON = ''' || $Quarter_Canton ||  ''' '
      else
         let $VIL_Canton = ' AND VIL.GPCH_TX_CANTON = ''' || $Quarter_Canton ||  ''' '
      end-if


Begin-Select distinct
#ifdef ORACLE
/*+ INDEX(VIL PS_GPCH_RP_0001)*/
#endif
VIL.GPCH_TX_VILLAGE_CD

   let $Quarter_Village  = &VIL.GPCH_TX_VILLAGE_CD
   let #i = 0
   let $Exist = 'N'
   let #Total_Comm_Tax_AmountK_T   =  0


  while #i < #ComCountT

      get $Canton_Vill            from CRekapDataTotal(#i) CRekap0
      get $Tax_Tariff_TypeK       from CRekapDataTotal(#i) CRekap1
      get $Village_CDK            from CRekapDataTotal(#i) CRekap2
      get $Village_NameK          from CRekapDataTotal(#i) CRekap3
      get #Total_Comm_Tax_AmountK from CRekapDataTotal(#i) CRekap4

      if $Canton_Vill = ''
         let $Canton_Vill = ' '
      end-if

      if  ($Village_CDK =  $Quarter_Village ) AND ($Canton_Vill = $Quarter_Canton)

          let $Exist = 'Y'

          let $Tax_Tariff_TypeK_T         =  $Tax_Tariff_TypeK
          let $Village_CDK_T              =  $Village_CDK
          let $Village_NameK_T            =  $Village_NameK
          let #Total_Comm_Tax_AmountK_T   =  #Total_Comm_Tax_AmountK_T  + #Total_Comm_Tax_AmountK

      end-if

           let #i = #i + 1

  end-While

   if $Exist = 'Y'
       #debug show  'put village ' $Canton_NameP_T ', ' $Village_CDK_T ' , ' $Village_NameK_T ' , ' #RP_stxP_T ' , '  #RP_amnt3P_T ' , ' #RP_amnt4P_T ' , '  #RP_amnt5P_T
       put $Quarter_Canton              into CRekapData(#ComCount) CRekap0
       put $Canton_NameP_T              into CRekapData(#ComCount) CRekap1
       put $Village_CDK_T               into CRekapData(#ComCount) CRekap2
       put $Village_NameK_T             into CRekapData(#ComCount) CRekap3
       put #Total_Comm_Tax_AmountK_T    into CRekapData(#ComCount) CRekap4
       put #RP_stxP_T                   into CRekapData(#ComCount) CRekap5
       put #RP_amnt3P_T                 into CRekapData(#ComCount) CRekap6
       put #RP_amnt4P_T                 into CRekapData(#ComCount) CRekap7
       put #RP_amnt5P_T                 into CRekapData(#ComCount) CRekap8
       let #ComCount  = #ComCount + 1
   end-if


from PS_GPCH_RP_0001 VIL
where VIL.PAY_ENTITY          = $Ctl_PayEntity
[$VIL_Canton]
and   VIL.GPCH_AL_CPAY_ENDDT <= $ReportEndDate
[$Ctl_Canton_Crit3]         ! Canton of the Run Control
[$Emplid_Criteria3]         ! Get Emplid List from Run Control
order by GPCH_TX_VILLAGE_CD
End-Select

#Debug Show '<- Select_Quarter_Village '
End-Procedure  Select_Quarter_Village
!***************************************************************************************
Begin-Procedure Accumulate_Print_Village_Total   ! Prints Village Total and accumulates Village total for Canton Summary
#Debug Show '-> Accumulate_Print_Village_Total '

     let $Merk_Header = 'CAN'

         do Format-Number(#Total_Gross_Wage   ,$Total_Gross_Wage_1     ,'9,999,999,999.99')
         do Format-Number(#Total_Bonus_Amt    ,$Total_Bonus_Amt_1      ,'9,999,999.99')
         do Format-Number(#Total_Comm_Tax_Amnt,$Total_Comm_Tax_Amount_1,'9,999,999,999.99')

     print '_'                      (+2,2,129) fill
     print $TOTAL_COMMUNE_STR       (+1,{col1})
     print '   '                    (,+1)
     print $Village_NameR           (,+2)
     print $Total_Gross_Wage_1      (,{col4})
     print $Total_Bonus_Amt_1       (,{col5})
     print $Total_Comm_Tax_Amount_1 (,{col7R1})


     !-------------------------------------------------------------!
    if $Ctl_Print_Vill_Total = 'Y'    ! Incase on Canton Sort V print village percent too.

       let #Total_Comm_Tax_Amnt5_0 = #Total_Comm_Tax_Amnt
       let #Total_Comm_Tax_Amnt5_1 = (#Staxb_PCTR  * #Total_Comm_Tax_Amnt5_0) / 100
       let #Total_Comm_Tax_Amnt5_1 = round(#Total_Comm_Tax_Amnt5_1,2)
       let #Total_Comm_Tax_Amnt5_1 = #Total_Comm_Tax_Amnt5_1 * 20
       let #Total_Comm_Tax_Amnt5_1 = round(#Total_Comm_Tax_Amnt5_1,0)
       let #Total_Comm_Tax_Amnt5_1 = #Total_Comm_Tax_Amnt5_1 / 20

       let #Total_Comm_Tax_Amnt6_1 = #Total_Comm_Tax_Amnt - #Total_Comm_Tax_Amnt5_1
       let #Total_Comm_Tax_Amnt6_1 = round(#Total_Comm_Tax_Amnt6_1,2)
       let #Total_Comm_Tax_Amnt6_1 = #Total_Comm_Tax_Amnt6_1 * 20
       let #Total_Comm_Tax_Amnt6_1 = round(#Total_Comm_Tax_Amnt6_1,0)
       let #Total_Comm_Tax_Amnt6_1 = #Total_Comm_Tax_Amnt6_1 / 20

       do Format-Number(#Staxb_PCTR,$Staxb_PCTR_1,'888.00')
       do Format-Number(#Total_Comm_Tax_Amnt5_1,$Total_Comm_Tax_Amnt4_1,'9,999,999,999.99')
       do Format-Number(#Total_Comm_Tax_Amnt6_1,$Total_Comm_Tax_Amnt5_1,'9,999,999,999.99')



       print $PERCENT1_STR           (+2,{col1})
       print ' '                     (,+1)
       print $Staxb_PCTR_1           (,+1)
       print ' '                     (,)
       print '%'                     (,)
       print ' '                     (,)
       print $PERCENT2_STR           (,)
       print $Total_Comm_Tax_Amnt4_1 (,{col7R1})
       print $DELIVERY_STR_CAN       (+2,{col1})
       print $Total_Comm_Tax_Amnt5_1 (,{col7R1})

    end-if
    !-------------------------------------------------------------! Array Accumulate Village total
     let $Actual_CanK             = $Actual_Can
     let $Tax_Tariff_TypeK        = $Tax_Tariff_TypeR
     let $Village_CDK             = $Village_CDR
     let $Village_NameK           = $Village_NameR
     let #Total_Comm_Tax_AmountK  = #Total_Comm_Tax_Amnt

     do Insert_Canton_Data       ! Accumulates village amounts for Canton total
     do Insert_Canton_Data_Total
    !-------------------------------------------------------------! Initialize Variables
     let #Total_Comm_Tax_Amnt          = 0
     let #Total_Gross_Wage             = 0
     let #Total_Bonus_Amt              = 0

     new-page

#Debug Show '-> Accumulate_Print_Village_Total '
end-procedure
!***********************************************************************
begin-procedure Insert_Canton_Data

put $Actual_CanK            into CRekapData(#ComCount) CRekap0
put $Tax_Tariff_TypeK       into CRekapData(#ComCount) CRekap1
put $Village_CDK            into CRekapData(#ComCount) CRekap2
put $Village_NameK          into CRekapData(#ComCount) CRekap3
put #Total_Comm_Tax_AmountK into CRekapData(#ComCount) CRekap4

let #ComCount = #ComCount + 1

end-procedure
!***********************************************************************
begin-procedure Insert_Canton_Data_Total

put $Actual_CanK            into CRekapDataTotal(#ComCountT) CRekap0
put $Tax_Tariff_TypeK       into CRekapDataTotal(#ComCountT) CRekap1
put $Village_CDK            into CRekapDataTotal(#ComCountT) CRekap2
put $Village_NameK          into CRekapDataTotal(#ComCountT) CRekap3
put #Total_Comm_Tax_AmountK into CRekapDataTotal(#ComCountT) CRekap4

let #ComCountT = #ComCountT + 1

end-procedure
!***********************************************************************
begin-procedure New_Canton
#Debug Show '-> New_Canton '


   let $Was_Printed_Data  = 'Y'

   let $Merk_Header = 'COM'

   do Print_Canton_Total


   if $Final_Date = 'N'

      let #Total_Cant_Amount5_0 = #Total_Cant_Tax_Amount
      let #Total_Cant_Amount5_1 = (#Staxb_PCTR  * #Total_Cant_Amount5_0) / 100
      let #Total_Cant_Amount5_1 = round(#Total_Cant_Amount5_1,2)
      let #Total_Cant_Amount5_1 = #Total_Cant_Amount5_1 * 20
      let #Total_Cant_Amount5_1 = round(#Total_Cant_Amount5_1,0)
      let #Total_Cant_Amount5_1 = #Total_Cant_Amount5_1 / 20


      let #Total_Cant_Amount6_1 = #Total_Cant_Tax_Amount - #Total_Cant_Amount5_1
      let #Total_Cant_Amount6_1 = round(#Total_Cant_Amount6_1,2)
      let #Total_Cant_Amount6_1 = #Total_Cant_Amount6_1 * 20
      let #Total_Cant_Amount6_1 = round(#Total_Cant_Amount6_1,0)
      let #Total_Cant_Amount6_1 = #Total_Cant_Amount6_1 / 20
   end-if

   let $CantonT                = $CantonR
   let $Canton_NameT           = $Canton_NameR
   let #Total_Cant_Tax_AmountT = #Total_Cant_Tax_Amount
   let #Staxb_PCTRT            = #Staxb_PCTR
   let #Total_Cant_Amount5_1T  = #Total_Cant_Amount5_1
   let #Total_Cant_Amount6_1T  = #Total_Cant_Amount6_1


   if $Canton_Quarter_flg = 'N'
      do Insert_Total_Data
      do Insert_Total_Data_Quarter
   end-if

   do Format-Number(#Total_Cant_Tax_Amount,$Total_Cant_Tax_Amount_1,'9,999,999,999.99')
   do Format-Number(#Staxb_PCTR,$Staxb_PCTR_1,'888.00')
   do Format-Number(#Total_Cant_Amount5_1,$Total_Cant_Amount4_1,'9,999,999,999.99')
   do Format-Number(#Total_Cant_Amount6_1,$Total_Cant_Amount5_1,'9,999,999,999.99')

   print '_'                       (+2,2,129) fill
   print $TOTAL_CANTON_STR         (+1,{col1})
   print '   '                     (,+1)
   print $Canton_NameR             (,+2)
   print $Total_Cant_Tax_Amount_1  (,{col6})
   print $PERCENT1_STR             (+2,{col1})
   print ' '                       (,+1)
   print $Staxb_PCTR_1             (,+1)
   print ' '                       (,)
   print '%'                       (,)
   print ' '                       (,)
   print $PERCENT2_STR             (,)
   print $Total_Cant_Amount4_1     (,{col6})
   print $DELIVERY_STR_CAN         (+2,{col1})
   print $Total_Cant_Amount5_1     (,{col6})

   let #Total_Cant_Tax_Amount = 0

   new-page

   let $Merk_Header  = 'CAN'

#Debug Show '<- New_Canton '
end-procedure

!***********************************************************************
begin-procedure Print_Canton_Total
#Debug Show '->  Print_Canton_Total '

let $Post_Rek = '1'
let #CountRekData = 0

while #CountRekData < #ComCount

  get $Post_Rek       from CRekapData(#CountRekData) CRekap1
  get $Tx_CD_rek      from CRekapData(#CountRekData) CRekap2
  get $Descr_Rek      from CRekapData(#CountRekData) CRekap3
  get #Tax_Amn3       from CRekapData(#CountRekData) CRekap4

  if $Final_Date = 'Y'
  get $Canton_NameR          from CRekapData(#CountRekData) CRekap1
  get #Staxb_PCTR            from CRekapData(#CountRekData) CRekap5
  get #Total_Cant_Tax_Amount from CRekapData(#CountRekData) CRekap6
  get #Total_Cant_Amount5_1  from CRekapData(#CountRekData) CRekap7
  get #Total_Cant_Amount6_1  from CRekapData(#CountRekData) CRekap8
  else
    let #Total_Cant_Tax_Amount = #Total_Cant_Tax_Amount + #Tax_Amn3

  end-if

  
  do Format-Number(#Tax_Amn3,$Tax_Amn3_1,'9,999,999,999.99')
  print $Tax_Amn3_1 (+1,{col6})

  if ($Tx_CD_rek <> 'CORR') and ($Tx_CD_rek <> 'OPTM')

     if ($Post_Rek <> 'S')
         evaluate $Post_Rek
         when = 'A'
            let $BC_STR = $BORDER_CR_STR || '   (' || $COUNTRY_AUSTRIA || ')'
            break
         when = 'D'
            let $BC_STR = $BORDER_CR_STR || '   (' || $COUNTRY_GERMANY|| ')'
            break
         when = 'O'
            let $BC_STR = $BORDER_CR_STR || '   ' || $WITHOUT_STR
            break
         when = 'I'
            let $BC_STR = $BORDER_CR_STR || '   (' || $COUNTRY_ITALY|| ')'
            break
         when-other
            let $BC_STR = ''
            break
         end-evaluate
     else
            let $BC_STR = ''
     end-if

     let $BC_STR = $Descr_Rek || '   ' || $BC_STR

     print $Tx_CD_rek (,{col1})
     print $BC_STR    (,{col2C})
  end-if

  if $Tx_CD_rek = 'CORR'
       print $CORRECTION_STR  (,8)
       print $CORRECTION2_STR (,{col3CN})
  end-if

  if $Tx_CD_rek = 'OPTM'
     print $CORR_OPTIM_STR (,8)
     print $OPTIM_STR      (,{col3CN})
  end-if

   let $Post_Rek = '1'
   let #CountRekData = #CountRekData + 1
end-while
let #ComCount = 0

#Debug Show '<-  Print_Canton_Total '
end-procedure Print_Canton_Total
!***********************************************************************
begin-procedure Insert_Total_Data
put $CantonT                into RekapData(#CantonCount) Rekap1
put $Canton_NameT           into RekapData(#CantonCount) Rekap2
put #Total_Cant_Tax_AmountT into RekapData(#CantonCount) Rekap3
put #Staxb_PCTRT            into RekapData(#CantonCount) Rekap4
put #Total_Cant_Amount5_1T  into RekapData(#CantonCount) Rekap5
put #Total_Cant_Amount6_1T  into RekapData(#CantonCount) Rekap6
let #CantonCount = #CantonCount + 1
end-procedure
!***********************************************************************
begin-procedure Insert_Total_Data_Quarter
put $CantonT                into RekapDataTotal(#CantonCountT) Rekap1
put $Canton_NameT           into RekapDataTotal(#CantonCountT) Rekap2
put #Total_Cant_Tax_AmountT into RekapDataTotal(#CantonCountT) Rekap3
put #Staxb_PCTRT            into RekapDataTotal(#CantonCountT) Rekap4
put #Total_Cant_Amount5_1T  into RekapDataTotal(#CantonCountT) Rekap5
put #Total_Cant_Amount6_1T  into RekapDataTotal(#CantonCountT) Rekap6
let #CantonCountT = #CantonCountT + 1
end-procedure
!***********************************************************************
Begin-procedure Print_Final_Canton_Total
#Debug Show '-> Print_Final_Canton_Total '

   let $Merk_Header = 'TOT'

   let #Sum_Delivery_Total  = 0
   let #Sum_village         = 0
   let #Sum_canton          = 0
   let #CountRekData        = 0
   let #Sum_Tax_Amount      = 0
   let #Sum_Restitution_Amt = 0
   let #Sum_Delivery_Total  = 0

While #CountRekData < #CantonCount

   get $CantonP         from RekapData(#CountRekData) Rekap1
   get $Canton_NameP    from RekapData(#CountRekData) Rekap2
   get #RP_amnt3P       from RekapData(#CountRekData) Rekap3
   get #RP_stxP         from RekapData(#CountRekData) Rekap4
   get #RP_amnt4P       from RekapData(#CountRekData) Rekap5
   get #RP_amnt5P       from RekapData(#CountRekData) Rekap6

   do Format-Number(#RP_amnt3P,$RP_amnt3_1,'9,999,999,999.99')
   do Format-Number(#RP_stxP  ,$RP_stx_1  ,'9,999,999,999.99')
   do Format-Number(#RP_amnt4P,$RP_amnt4_1,'9,999,999,999.99')
   do Format-Number(#RP_amnt5P,$RP_amnt5_1,'9,999,999,999.99')

   print $RP_amnt3_1  (+1,{col31})

   if (rtrim($Canton_NameP,' ') <> 'CORR') and (rtrim($Canton_NameP,' ') <> 'OPTM')
      print $Canton_NameP      (,{col11})
      print $RP_stx_1          (,{col41})
      print $RP_amnt4_1        (,{col51})
      print $RP_amnt5_1        (,{col61})

      let #Sum_Tax_Amount      =  #Sum_Tax_Amount      + #RP_amnt3P
      let #Sum_Restitution_Amt =  #Sum_Restitution_Amt + #RP_amnt4P
      let #Sum_Delivery_Total  =  #Sum_Delivery_Total  + #RP_amnt5P
   end-if

   if (rtrim($Canton_NameP,' ') = 'CORR')
      print $CORRECTION_STR      (,8)
      print $CORRECTION2_STR     (,{col3CT})
   end-if

   if (rtrim($Canton_NameP,' ') = 'OPTM')
      print $CORR_OPTIM_STR      (,8)
      print $OPTIM_STR           (,{col3CT})
   end-if
 if $GPCH_EG_YEP_FLG = 'Y' and  rtrim($CantonP,' ') = 'VD' !SYed for B14
    
  do Insert-Ptotals
   End-IF
   let #CountRekData = #CountRekData + 1

End-while

   print '_'                     (+2,2,129)  fill
   print $TOTAL_SUM_STR          (+2,{col11})

   do Format-Number(#Sum_Tax_Amount     ,$Sum_Tax_Amount_1     ,'9,999,999,999.99')
   do Format-Number(#Sum_Restitution_Amt,$Sum_Restitution_Amt_1,'9,999,999,999.99')
   do Format-Number(#Sum_Delivery_Total ,$Sum_Delivery_Total_1 ,'9,999,999,999.99')

   print $Sum_Tax_Amount_1       (,{col31})
   print $Sum_Restitution_Amt_1  (,{col51})
   print $Sum_Delivery_Total_1   (,{col61})
    
#Debug Show '<- Print_Final_Canton_Total '
End-procedure Print_Final_Canton_Total
!***********************************************************************
Begin-Procedure Insert-Ptotals

  do Format-Number(#RP_amnt3P ,$Sum_Tax_Amount_xml     ,'9999999999.99')
   do Format-Number(#RP_amnt4P,$Sum_Restitution_Amt_xml,'9999999999.99')
   do Format-Number(#RP_amnt5P ,$Sum_Delivery_Total_xml ,'9999999999.99')
  let   $Sum_Tax_Amount_xml= rtrim(ltrim($Sum_Tax_Amount_xml,' '),' ')
 let $Sum_Restitution_Amt_xml= rtrim(ltrim($Sum_Restitution_Amt_xml,' '),' ')
 let $Sum_Delivery_Total_xml= rtrim(ltrim($Sum_Delivery_Total_xml,' '),' ')

 
 let $TotalBrut='<TotalBrutImpotDu>'||$Sum_Tax_Amount_xml||'</TotalBrutImpotDu>' 
 let $Comper='<CommissionPerception>' ||$Sum_Restitution_Amt_xml||'</CommissionPerception>'
 let $TotalNetD='<TotalNetDu>'||$Sum_Delivery_Total_xml||'</TotalNetDu>'
 
 let $xml_ptotals= $TotalBrut ||$Comper||$TotalNetD
 
 



Begin-Sql on-error=give_warning

DELETE FROM PS_GPCH_EG_PTOTALS WHERE GPCH_SI_PROV_TYPE = 'A' AND GPCH_SI_PROV_CD=$ptot_providercd  AND GPCH_RC_PAY_YEAR = $ptot_year AND COMPANY = $ptot_company  
AND GPCH_EG_REQUEST_ID=$ptot_requestid AND GPCH_EG_DOMAINID = #ptot_domainid

End-SQL




Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PTOTALS (COMPANY,GPCH_RC_PAY_YEAR,GPCH_EG_DOMAINID,GPCH_EG_REQUEST_ID,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,GPCH_EG_USERKEY,GPCH_EG_CMP_XML) 
 values ($ptot_company,$ptot_year,#ptot_domainid,$ptot_requestid,'A',$ptot_providercd,'X',$xml_ptotals)

End-SQL


End-Procedure
!***********************************************
begin-procedure Get_End_Mnth($Dte1,:$Dte2)
 if rtrim($Dte1,' ') <> ''
  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)

  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
        (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
   else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
   end-if

   let $MonthDays1 = to_char(#MonthDays1)
   let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
   do Format-DateTime($E_DT_tmp1,$Dte2, {DEFCMP},'','native')
 end-if
end-procedure

!********************************************************************************************
begin-procedure Get_Beg_Mnth($Dte1,:$Dte2)
 if rtrim($Dte1,' ') <> ''
  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tpm1_dd)

  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1,$Dte2, {DEFCMP},'','native')
 end-if
end-procedure

!*************************************************************************************
begin-procedure GetCantonCondition
#debug Show '-> GetCantonCondition '

   let $CantCrit   = ' '
   let $CantStr    = ' '

begin-select
STX_TBL.GPCH_TX_CANTON
STX_TBL.GPCH_TX_MONTH
STX_TBL.GPCH_TX_QUARTER

  let $CantonStx      = rtrim(&STX_TBL.GPCH_TX_CANTON, ' ')
  let $FK_MONTH_FLG   = &STX_TBL.GPCH_TX_MONTH
  let $FK_QUARTER_FLG = &STX_TBL.GPCH_TX_QUARTER

  if $Ctl_Quarter_Opt = 'N'

     if $FK_MONTH_FLG = 'Y'
        let $CantStr = $CantStr || '''' || $CantonStx || '''' || ','
     end-if

  else

     if $FK_QUARTER_FLG = 'Y'
        let $CantStr = $CantStr || '''' || $CantonStx || '''' || ','
     end-if

  end-if

from PS_GPCH_TX_FAK_STX STX_TBL
where (STX_TBL.COMPANY = $Ctl_PayEntity)
AND   (STX_TBL.EFFDT = (select max(STX_TBL1.EFFDT) from PS_GPCH_TX_FAK_STX STX_TBL1
                        where (STX_TBL1.COMPANY        = $Ctl_PayEntity)
                        AND   (STX_TBL1.GPCH_TX_CANTON = STX_TBL.GPCH_TX_CANTON)
                        AND   (STX_TBL1.EFFDT         <= $ReportEndDate)))
end-select

   if rtrim($CantStr,' ') <> ''
      let $CantStr  = $CantStr || ''' ''' || ','
      let $CantStr  = rtrim($CantStr,',')
      let $CantCrit =  ' and PBD.GPCH_TX_CANTON IN ( ' || $CantStr || ')'
   else
      let $CantCrit =  ' '
   end-if

#debug Show '<- GetCantonCondition '
end-procedure
!*************************************************************************************
Begin-Procedure Prepare_Print_Data
#Debug Show '-> Prepare_Print_Data '

  let $last_header = 'N'

  do GetCantonCondition     ! Select list of Valid Cantons to build Canton Crit: $CantCrit
  do Get_Data


     let #CantonCount = 0
  do InitRekapData          ! Initialize Array
     let #ComCount    = 0
  do InitialCommRekap       ! Initialize Array


     let $Error_List = 'AND   (PBD1.GPCH_TX_CANTON <> '' ''' || ' AND  PBD1.GPCH_TX_VILLAGE_CD <> '' '')'
  do Get_Report_Data


     let $Error_List = 'AND   (PBD1.GPCH_TX_CANTON  = '' ''' || ' OR  PBD1.GPCH_TX_VILLAGE_CD = '' '')'
  do Get_Report_Data


  if $Was_Printed_Data = 'Y'
        if $Blank_lang = 'Y'
            do Get-Language($ReportID, $Base_Language)
            let $ReportTitle = $TITLE1_STR
            let $TITLE1      = $TITLE1_STR
        end-if
        let $last_header = 'Y'
        if $Ctl_Quarter_Opt <> 'Y'   
           do Print_Final_Canton_Total
        end-if
  end-if

#Debug Show '<- Prepare_Print_Data '
End-Procedure
!*************************************************************************************
begin-procedure Canton_Change
#Debug Show '-> Canton_Change'  $Actual_Can

   if $Existed_Dat = 'Y'
       do New_Canton              ! If Village Current or Retro Village data is printed.
   end-if

   if ($Ctl_Canton = '')
     let #PageCounter = 0
   end-if

   let $Existed_Dat = 'N'

#Debug Show '<- Canton_Change '
End-Procedure Canton_Change
!*************************************************************************************
begin-procedure Print_CrossBdr_Villages  ! Select each village and prepares where condition
#Debug Show '-> Print_CrossBdr_Villages ' $Actual_Can ' , ' $Actual_Vill ' , ' $Tax_Tariff_TypeR ' , ' $IT_Exist_Data
      
      if $IT_Exist_Data   = 'Y'
         do Accumulate_Print_Village_Total
      end-if
   
      let $IT_Exist_Data  = 'N'

#Debug Show '<- Print_CrossBdr_Villages ' $Ctl_PayEntity ' , ' $Actual_Can ' , ' $ReportEndDate
end-procedure Print_CrossBdr_Villages
!*****************************************************************************************
begin-procedure Get_Report_Data   ! Select Historial data of employee within a canton and village.
#Debug Show '-> Get_Report_Data '  $Actual_Vill  ' , ' $Error_List 

   let $Merk_Header    = 'CAN'
   let $IT_Exist_Data  = 'N'
   let $Canton_Old     = ' '

Begin-Select
PBD1.PROCESS_INSTANCE
PBD1.GPCH_TX_CANTON          () On-Break level = 1 After=Canton_Change Print=Never
PBD1.GPCH_TX_VILLAGE_CD
PBD1.GPCH_TX_TRF_TYPE
PBD1.EMPLID
PBD1.EMPL_RCD
PBD1.SEG_BGN_DT
PBD1.SEG_END_DT
PBD1.RSLT_SEG_NUM
PBD1.SEX
PD.NAME
PBD1.COMPANY
PBD1.PRD_END_DT
PBD1.BEGIN_DT
PBD1.END_DT
PBD1.BIRTHDATE
PBD1.GPCH_TX_TRF_CD
PBD1.NATIONAL_ID
PBD1.GPCH_AH_NNSS
PBD1.ACTION
PBD1.POSTAL
PBD1.GPCH_RP_CHAR03
PBD1.GPCH_RP_FROMDT1
PBD1.VISA_PERMIT_TYPE
PBD1.CONTRACT_TYPE
PBD1.TERMINATION_DT
PBD1.GPCH_RP_AMOUNT11       &PBD1.GPCH_RP_AMOUNT11
SUM(PBD1.GPCH_RP_AMOUNT1)   &PBD1.GPCH_RP_AMOUNT1
SUM(PBD1.GPCH_RP_AMOUNT2)   &PBD1.GPCH_RP_AMOUNT2
SUM(PBD1.GPCH_RP_AMOUNT3)   &PBD1.GPCH_RP_AMOUNT3
SUM(PBD1.GPCH_RP_AMOUNT14)  &PBD1.GPCH_RP_AMOUNT14
SUM(PBD1.GPCH_RP_AMOUNT19)  &PBD1.GPCH_RP_AMOUNT19
PBD1.GPCH_RP_AMOUNT20   &PBD1.GPCH_RP_AMOUNT20
PBD1.REG_TEMP


  let $VillageCross = rtrim(&PBD1.GPCH_TX_CANTON,' ') || rtrim(&PBD1.GPCH_TX_VILLAGE_CD,' ') || rtrim(&PBD1.GPCH_TX_TRF_TYPE,' ')
  
  print $VillageCross () on-break level = 2 After=Print_CrossBdr_Villages Print=Never

  let $Empl_ID               =  &PBD1.EMPLID
  let #Empl_RCD              =  &PBD1.EMPL_RCD
  let #Rslt_Seg_Nr           =  &PBD1.RSLT_SEG_NUM
  let $Company               =  &PBD1.COMPANY
  let $PRD_E_DTR             =  &PBD1.PRD_END_DT
  let $Canton                =  rtrim(&PBD1.GPCH_TX_CANTON,' ')
  let $Actual_Can            =  &PBD1.GPCH_TX_CANTON
  let $Village               =  rtrim(&PBD1.GPCH_TX_VILLAGE_CD,' ')
  let $CantonR               =  $Canton
  let $Village_CDR           =  &PBD1.GPCH_TX_VILLAGE_CD
  let $Actual_Vill           =  &PBD1.GPCH_TX_VILLAGE_CD
  let $PostalR               =  &PBD1.POSTAL
  let $ActionR               =  &PBD1.ACTION
  let $TaxTerm               =  rtrim(&PBD1.GPCH_RP_CHAR03,' ')
  let $TaxTermDt             =  &PBD1.GPCH_RP_FROMDT1 
  let $Tax_Tariff_TypeR      =  rtrim(&PBD1.GPCH_TX_TRF_TYPE,' ')
  let $Tax_Tariff_CodeR      =  rtrim(&PBD1.GPCH_TX_TRF_CD,' ')
  let $B_DTR                 =  &PBD1.BEGIN_DT
  let $E_DTR                 =  &PBD1.END_DT
  let $N_IdR                 =  rtrim(ltrim(&PBD1.NATIONAL_ID,' '),' ')
  let $NNSS_IdR              =  rtrim(ltrim(&PBD1.GPCH_AH_NNSS,' '),' ')
  let $Birth_date            =  &PBD1.BIRTHDATE
  let $Empl_sex              =  rtrim(&PBD1.SEX,' ') 

  let $Empl_NameR            =  rtrim(ltrim(&PD.NAME,' '),' ')
  let #Amount1R              =  &PBD1.GPCH_RP_AMOUNT1
  let #Amount2R              =  &PBD1.GPCH_RP_AMOUNT2
  let #Amount3R              =  &PBD1.GPCH_RP_AMOUNT3
  let #Amount11R             =  &PBD1.GPCH_RP_AMOUNT11
  let #Amount14R             =  &PBD1.GPCH_RP_AMOUNT14
  let #Amount19R             =  &PBD1.GPCH_RP_AMOUNT19
  let $Visa_per              = rtrim(&PBD1.VISA_PERMIT_TYPE,' ')
  let $Cont_type             = rtrim(&PBD1.CONTRACT_TYPE,' ')
  let $Termination_DT        =  &PBD1.TERMINATION_DT
   let $Type_employee         = rtrim(&PBD1.REG_TEMP,' ')
  !---------------------------------------------------------------------------
  let $SegEnddt              = &PBD1.SEG_END_DT
  let $SegBegdt               = &PBD1.SEG_BGN_DT  
  let #Amount3R_XML          =  #Amount3R + #Amount14R + #Amount19R 
  !-----------------------------------------------------------------------------
     let $Term_DT_xml = ''
      do ConvertToComponents($E_DTR,$yy3_TDT,$mm3_TDT,$dd3_TDT)
      ! if $Termination_DT<> ''
    
  !let   $Term_DT_xml = $yy3_TDT||'-'||$mm3_TDT||'-'||$dd3_TDT
   !   else
    ! let $Term_DT_xml = ''
   ! End-if
   
   if $E_DTR <> '' and ($E_DTR >= $SegBegdt and $E_DTR <= $SegEnddt) !SYED for b14
    let   $Term_DT_xml = $yy3_TDT||'-'||$mm3_TDT||'-'||$dd3_TDT
      else
     let $Term_DT_xml = ''
   End-if
     
     
       If $Type_employee='T'
    let  $Type_emp_xml='A'
   End-If
   If $Type_employee='R'
    let  $Type_emp_xml='P'
   End-If

    do ConvertToComponents($Birth_date,$tmp_y,$tmp_m,$tmp_d)
    let $Birth_DT1 = $tmp_y ||'-' || $tmp_m ||'-' || $tmp_d 
     
     let $Tax_Tariff_Code_xml=substr($Tax_Tariff_CodeR,0,1)
             If $Tax_Tariff_Code_xml='B' or $Tax_Tariff_Code_xml='C'
        let $Tax_Tariff_Code_xml= substr($Tax_Tariff_CodeR,0,2)
      End-If
             
     If $Visa_per='PC'
        let $Visa_per='C'
           End-If
   do Get-Sex
  !********************
   do First-last-Name
  !********************
   let #Amt_tot = #Amount1R +#Amount2R
  
  if $Canton_Old <> $Canton
     do Get_Fak_Tax_Data($Actual_Can,$Ctl_PayEntity,$ReportEndDate,
                         $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                         $Tax_Language,$Employer_StaxNr,#Staxb_PCTR,
                         #Employer_SI_Pct,$SI_AHV_MBR_ID,$SI_AHV_PROVCD,
                         $SI_KTG_MBR_ID,#SI_AHV_ADM_PC,#SI_TOT_AHV_PC,
                         #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

     if $language_cd = ''
        let $language_cd = $Tax_Language
        do Get-Language($ReportID, $Tax_Language)
        let $lang_item = $Tax_Language
        let $ReportTitle = $TITLE1_STR
        let $TITLE1      = $TITLE1_STR
        let $language_cd = ''
     end-if
     do Get_Company_Name
     do Get_Canton_Name
  end-if
  
  if $Village_Old <> $Village
     do Get_Village_Name
  end-if


  #debug show '-> PRD ' $VillageCross ' , ' $Tax_Tariff_TypeR ' , ' $Empl_ID ' , ' $Cal_RunID ' , ' $Cal_ID ' , ' #Amount1  ' , '  #Amount14  ' , ' $PRD_E_DTR ' , ' $Cpay_E_DT ' , ' $Village_CDR ' , ' $Canton

  evaluate $lang_item
  when = 'GER'
     let $EStr = 'E: '
     let $AStr = 'A: '
     let $TStr = 'TW: '
     break
  when = 'FRA'
     let $EStr = 'E: '
     let $AStr = 'S: '
     let $TStr = 'CT: '
     break
  when = 'ITA'
     let $EStr = 'E: '
     let $AStr = 'U: '
     let $TStr = 'MT: '
     break
  when-other
     let $EStr = 'E: '
     let $AStr = 'T: '
     let $TStr = 'TC: '
     break
  end-evaluate

  if $ActionR = 'HIR'
    let $String_Before_E = $EStr
  end-if

  if $ActionR = 'TWE'
    let $String_Before_E = $TStr
  end-if

  !if $ActionR = 'TER'
  if $Taxterm = 'TER'  
    let $String_Before_T = $AStr
  end-if

  
  !------------------------------------------------------------------- Print Positions
  
       let #coln1 = 50
       let #coln2 = 63
       let #coln3 = 80
       let #coln4 = 97
       let #coln5 = 106
       let #coln6 = 111

   

  !------------------------------------------------------------------- Check for Still Hire and Zero Rows

  let $StillHired0 = 'Y'

  do Get_Beg_Mnth($PRD_E_DTR, $BgDt0 )

  do Format-DateTime($BgDt0        ,$BgDtCmp0         , {DEFCMP}, '', '')
  do Format-DateTime($E_DTR        ,$E_DTR0           , {DEFCMP}, '', '')
  do Format-DateTime($PRD_E_DTR    ,$PRD_E_DTR_CMP    , {DEFCMP}, '', '')
  do Format-DateTime($ReportEndDate,$ReportEndDate_CMP, {DEFCMP}, '', '')

  if ($E_DTR0 < $BgDtCmp0) and  ($E_DTR0 <> '')
     let $StillHired0 = 'N'
  end-if


  if $PRD_E_DTR_CMP = $ReportEndDate_CMP
          if ($StillHired0 = 'Y' or (#Amount1R <> 0 or #Amount2R <> 0 or #Amount3R <> 0 or
                                     #Amount14R <> 0 or #Amount19R <> 0))
              do Print_Current_Data  ! Accumulates and prints Current Data
          end-if
  else
          if (#Amount1R <> 0 or #Amount2R <> 0 or #Amount3R <> 0 or
              #Amount14R <> 0 or #Amount19R <> 0)
              do Print_Retro_Data    ! Accumulates and prints Retro Data
          end-if
  end-if
  !--------------------------------------------------------------------


 if $Ctl_Quarter_Opt <> 'Y' and   $GPCH_EG_YEP_FLG = 'Y'
              let $Ctl_Start_Dt=   $Ctl_B_Date
            let $Ctl_End_Dt = $Ctl_E_Date
         do Format-DateTime($Ctl_Start_Dt,$Ctl_Start_Dt, {DEFCMP},'','native')
    do Format-DateTime($Ctl_End_Dt,$Ctl_End_Dt, {DEFCMP},'','native')
      
    
     do ConvertToComponents($SegBegdt,$yy2_BDT,$mm2_BDT,$dd2_BDT)
    let  $B_DT_xml = $yy2_BDT||'-'||$mm2_BDT||'-'||$dd2_BDT
   
        do ConvertToComponents($SegEnddt,$yy1_EDT,$mm1_EDT,$dd1_EDT)
      let   $E_DT_xml = $yy1_EDT||'-'||$mm1_EDT||'-'||$dd1_EDT


   


      do create-xml  

                  
    End-if
   let $Empl_ID_Old       = $Empl_ID
  let $Canton_Old        = $Canton
  let $Village_Old       = $Village
                            

                             
FROM PS_GPCHTX021_TMP PBD1
, {Record_Person} PD
WHERE PBD1.EMPLID         = PD.EMPLID
AND PBD1.PROCESS_INSTANCE = #prcs_process_instance
[$Ctl_Canton_CritVD]
[$Error_List]  ! Canton with Blanks to be treated separately
GROUP BY PBD1.PROCESS_INSTANCE,PBD1.GPCH_TX_CANTON,PBD1.GPCH_TX_VILLAGE_CD,PBD1.GPCH_TX_TRF_TYPE,PBD1.EMPLID,PBD1.EMPL_RCD,PBD1.SEG_BGN_DT,PBD1.SEG_END_DT,
PBD1.RSLT_SEG_NUM,PBD1.SEX,PD.NAME,PBD1.COMPANY,PBD1.PRD_END_DT,PBD1.BEGIN_DT,
PBD1.END_DT,PBD1.BIRTHDATE,PBD1.GPCH_TX_TRF_CD,PBD1.NATIONAL_ID,PBD1.GPCH_AH_NNSS,PBD1.ACTION,PBD1.POSTAL,PBD1.GPCH_RP_CHAR03,
PBD1.GPCH_RP_FROMDT1,PBD1.VISA_PERMIT_TYPE,PBD1.CONTRACT_TYPE,PBD1.TERMINATION_DT,PBD1.GPCH_RP_AMOUNT11,PBD1.GPCH_RP_AMOUNT20,PBD1.REG_TEMP
ORDER BY PBD1.GPCH_TX_CANTON ,PBD1.GPCH_TX_VILLAGE_CD,PBD1.GPCH_TX_TRF_TYPE,PBD1.NATIONAL_ID,PBD1.GPCH_AH_NNSS,PD.NAME,PBD1.EMPLID,PBD1.BIRTHDATE,PBD1.PRD_END_DT DESC
![$Sort_Order]
End-select
#Debug Show '<- Get_Report_Data ' $Actual_Can ' , ' $YearBeginDate ' , ' $Actual_Vill ' , ' $ReportEndDate
end-procedure Get_Report_Data
!***********************************************************************
Begin-Procedure First-last-Name

   let #lenname= length($Empl_NameR)
    let #pos  = instr($Empl_NameR,',',0)
      let #pos  = #pos - 1
      let $lname = substr($Empl_NameR,0,#pos)
       let #pos  = #pos +2
    let $fname = substr($Empl_NameR,#pos,#lenname)


 End-Procedure
!*************************************************************************
 Begin-Procedure Get-Sex
  if $Empl_sex='M'      !SYED
   let $sex_empl='0'
      end-if
     if $Empl_sex='F'
   let $sex_empl='1'
   end-if
End-Procedure
!**********************************************************************
begin-procedure create-xml
   
   if $Ctl_Quarter_Opt = 'Y'  
   do Format-Number(#Acclamt1,$Amount1R_1,'9999999999.99')
   End-if
    do Format-Number(#Amount20,$Amount20_1,',99')
     do Format-Number(#Amt_tot,$Amt_tot_1,',999999999999.99')
     do Format-Number(#Amount3R_XML,$Amount3_1,',999999999999.99')

     let $Amount1R_1= rtrim(ltrim($Amount1R_1,' '),' ')
  let $Amount20_1= rtrim(ltrim($Amount20_1,' '),' ')
  let $Amt_tot_1= rtrim(ltrim($Amt_tot_1,' '),' ')
   let $Amount2R_1= rtrim(ltrim($Amount2R_1,' '),' ')
  let $Amount3_1= rtrim(ltrim($Amount3_1,' '),' ')
  let $Empl_ID= rtrim(ltrim($Empl_ID,' '),' ') 

   !let $NumSour_xml= '<NumSourcier>' ||'1111'|| '</NumSourcier>'
 let $NumSour_xml= '<NvlSourcier>' ||'o'|| '</NvlSourcier>'
 let $empl_xml='<NumSalarie>' ||$Empl_ID|| '</NumSalarie>'
  let $fname_xml='<Nom>'||$lname||'</Nom>'
 let $lname_xml='<Prenom>'||$fname||'</Prenom>'
 let $bdt_xml='<DatNai>'||$Birth_DT1||'</DatNai>'
 let $sex_xml='<CodSexe>'||$sex_empl||'</CodSexe>'
  If $N_IdT_xml <> ''
 let $Ntnl_xml='<NumAVS>'||$N_IdT_xml||'</NumAVS>'
  End-If
  If $NNSS_IdR <> ''
 let $Newntnl_xml= '<NvlNumAVS>'||$NNSS_IdR||'</NvlNumAVS>'
  End-If
 let $tariff_xml='<SituationFamille>'||$Tax_Tariff_Code_xml||'</SituationFamille>'
 let $infant_xml='<NbrEnfants>'||$Amount20_1 ||'</NbrEnfants>'
   If $Village_NameR <> ''
 let $loc_xml= '<LocLieuLbl>'||$Village_NameR||'</LocLieuLbl>'
   End-If
   If $Visa_per <> ''
 let $permit_xml='<PermisTravail>'||$Visa_per||'</PermisTravail>'
   End-If
 let $ident_xml1= $NumSour_xml||$empl_xml || $fname_xml || $lname_xml || $bdt_xml || $sex_xml
 let $ident_xml2= $Ntnl_xml || $Newntnl_xml || $tariff_xml || $infant_xml || $loc_xml || $permit_xml
 let $Identify_xml = '<Instance>'||'<Identification>' || $ident_xml1 || $ident_xml2 || '</Identification>'

 let $Amt1_xml='<SalaireVerse>'||$Amount1R_1||'</SalaireVerse>' 
 let $Act_xml='<TypActivite>'||$Type_emp_xml||'</TypActivite>'
 let $Amt2_xml='<AutresPrestations>'||$Amount2R_1||'</AutresPrestations>'
 let $Amttot_xml='<MontantTotal>'||$Amt_tot_1||'</MontantTotal>'
 let $begdate_xml= '<DatDebPeriodeSalaire>'||$B_DT_xml||'</DatDebPeriodeSalaire>'
 let $enddate_xml='<DatFinPeriodeSalaire>'||$E_DT_xml||'</DatFinPeriodeSalaire>'
 let $tax_xml='<ImpotRetenu>'||$Amount3_1||'</ImpotRetenu>'
   If $Mutation <> ''
 let $mutn_xml= '<CommentaireEmployeur>'||$Mutation||'</CommentaireEmployeur>'
   End-If
   If $Term_DT_xml <> ''
 let $taxtermn_xml='<DatFinActivite>'||$Term_DT_xml||'</DatFinActivite>'
  End-If
 let $sal_xml1= $Amt1_xml || $Act_xml || $Amt2_xml ||$Amttot_xml
 let $Sal_xml2= $begdate_xml || $enddate_xml|| $tax_xml || $mutn_xml 
 let $Salary_xml='<InfActivite>' || $sal_xml1 || $sal_xml2 || '</InfActivite>'|| $taxtermn_xml||'</Instance>'

    
     If $Empl_ID <>  $Empl_ID_old
  Let $final_xml = ''
      End-If

    let $final_xml=$final_xml||$Identify_xml||$Salary_xml
           
  do Insert_Employee_Data_TX
  let $taxtermn_xml=''
   let $Ntnl_xml= ''
   let $Newntnl_xml= ''
   let $loc_xml= ''
   let $permit_xml= ''
    let $mutn_xml= ''

End-procedure

!*************************************************************************
Begin-Procedure Insert_Employee_Data_TX
 
 
Begin-Sql on-error=give_warning

 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_SI_PROV_CD=$ptot_providercd 
 AND GPCH_RC_PAY_YEAR = $ptot_year AND COMPANY = $ptot_company  AND  EMPLID = $Empl_ID AND EMPL_RCD = #Empl_RCD 
 AND GPCH_SI_PROV_TYPE='A' and BEGIN_DT= $Ctl_Start_Dt and END_DT= $Ctl_End_Dt
End-SQL


Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,
 GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,$ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$Empl_ID,#Empl_RCD,
 $Ctl_Start_Dt,$Ctl_End_Dt,1,$final_xml)

End-SQL

End-procedure
!***************************************************
begin-procedure Print_Current_Data  ! Accumulates Values for Printing Village data.
#Debug Show '-> Print_Current_Data ' $Empl_Name ' , ' $PRD_E_DTR  ' , ' $Cpay_E_DT

   let $MerkKorr         = 'N'
   let $MerkOpt          = 'N'

   let $Existed_Dat      = 'Y'
   let $IT_Exist_Data    = 'Y'
   let $Was_Printed_Data = 'Y'

   let #Total_Gross_Wage = #Total_Gross_Wage + #Amount1R
   let #Total_Bonus_Amt  = #Total_Bonus_Amt  + #Amount2R


  !------------------------------------------------------------------------


           do Print_Current_Village_Data

        if #Amount14R <> 0
           let $MerkKorr = 'Y'
           do Print_Current_Village_Data
           let $MerkKorr = 'N'
        end-if

        if #Amount19R <> 0
           let $MerkOpt = 'Y'
           do Print_Current_Village_Data
        end-if


#Debug Show '<- Print_Current_Data '
end-procedure Print_Current_Data
!***************************************************************************************
begin-procedure Print_Current_Village_Data  !Print Actual Period data
#Debug Show '-> Print_Current_Village_Data '

   do Get_End_Mnth($PRD_E_DTR,$Ctl_E_Dat)
   do Get_Beg_Mnth($PRD_E_DTR,$Ctl_B_Dat)
   do Format-DateTime($Ctl_B_Dat,$Ctl_B_Dat1,{DEFCMP},'','')
   do Format-DateTime($Ctl_E_Dat,$Ctl_E_Dat1,{DEFCMP},'','')
   do Format-DateTime($B_DTR    , $B_Date   ,{DEFCMP},'','')
   do Format-DateTime($E_DTR    , $E_Date   ,{DEFCMP},'','')
   do Format-DateTime($Birth_DTR, $Birth_DTR1,{DEFDATE},'','')

   do Get_Formatted_Date

   !-------------------------------------------------------------

   if $N_IdR <> ''
       let $N_IdT_xml= $N_IdR
      let $N_IdT      = edit($N_IdR,'XXX.XX.XXX.XXX')
      print $N_IdT            (+1,{col1})  

   else
      do Format-Number(#Empl_RCD,$EmplRcd,'888')
   
  let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
   
    print $EmplID_Rcd       (+1,{col1})   

   end-if
    if $NNSS_IdR <> ''

      let $NNSS_IdT      = edit($NNSS_IdR,'XXX.XXXX.XXXX.XX')
       if ($Ctl_Canton <> 'GE') AND rtrim($Actual_Can,' ') <> 'GE' AND $Canton <>'GE'

             print $NNSS_IdT            (,50)  bold

        end-if

  ! else

  !    do Format-Number(#Empl_RCD,$EmplRcd,'888')
  !    let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
  !    print $EmplID_Rcd       (+1,{col1})   bold

   end-if
    print $Empl_NameR          (,18,29)  

   !----------------------------------------------------------------

   if ($MerkKorr <> 'Y') and ($MerkOpt <> 'Y')


           if ($Ctl_Canton = 'GE') or rtrim($Actual_Can,' ') = 'GE'
               print $PostalR                   (,{cl2},5)   
           end-if

         let $Mutation =''
           Evaluate $ActionR
           when = 'HIR'

               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                   print $String_Before_E     (,50)   !  bold
                   print $B_DTR1              (,)    ! bold
                  let $Mutation = $String_Before_E ||$B_DTR1
               end-if
               if $Taxterm = 'TER'  
               
!               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                   print '  '  (,)  
                   print $String_Before_T     (,)  bold
                   print $E_DTR1              (,)    bold
                  let $Mutation = $Mutation||';'||$String_Before_T  ||$E_DTR1
!               end-if
             
               end-if
           break
           when = 'TWE'

               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                   print $String_Before_E     (,50)   ! bold
                   print $B_DTR1              (,)    ! bold
                      let $Mutation = $String_Before_E  ||$B_DTR1
               end-if
               if $Taxterm = 'TER'  
               
!               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                   print '  '  (,)  
                   print $String_Before_T     (,)  bold
                   print $E_DTR1              (,)    bold
                     let $Mutation = $Mutation||';'||$String_Before_T  ||$E_DTR1
!               end-if
             
               end-if

           break
           !    when = 'TER'

           !        if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
           !            print $String_Before_T     (,#coln1)  bold
           !            print $E_DTR1              (,)    bold
           !        end-if

           !    break
           when-other
             if $Taxterm = 'TER' 
!              if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                  print $String_Before_T     (,#coln1)  bold
                  print $E_DTR1              (,)    bold
                     let $Mutation = $String_Before_T  ||$E_DTR1 
!              end-if
             end-if 
           break
           End-Evaluate

           do Format-Number(#Amount1R,$Amount1R_1,'9,999,999,999.99')
           do Format-Number(#Amount2R,$Amount2R_1,'9,999,999.99')
           do Format-Number(#Amount3R,$Amount3R_1,'9,999,999,999.99')
           do Format-Number(#Amount11R,$Amount11R_1,'B99.99')
                             
         
           print $Amount1R_1             (,{col4})           
           print $Amount2R_1             (,{col5})           !  bold
           print $Tax_Tariff_CodeR       (,{col6})           !  bold
           print $Amount11R_1            (,{col71P},6)       !  bold
           print $Amount3R_1             (,{col7})           !  bold

           let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount3R
            do Format-Number(#Amount1R,$Amount1R_1,'999999999.99') ! for xml
   end-if
   !----------------------------------------------------------------
   

   if $MerkKorr = 'Y'

           do Format-Number(#Amount14R,$Amount14R_1,'9,999,999,999.99')

           print $CORRECTION_STR  (,{col1CR},2) ! bold
           print $CORRECTION2_STR (,{col3CN})  ! bold
           print $Amount14R_1     (,#coln6)    ! bold

           let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount14R
   end-if
   !----------------------------------------------------------------
   if $MerkOpt = 'Y'

           do Format-Number(#Amount19R,$Amount19R_1,'9,999,999,999.99')

           if $MerkKorr = 'Y'
              print $CORR_OPTIM_STR (+1,{col1CR},2) ! bold
              print $Amount19R_1    (,#coln6)      ! bold
              print $OPTIM_STR      (,{col3CN})    ! bold
           else
              print $CORR_OPTIM_STR (,{col1CR},2)   ! bold
              print $Amount19R_1    (,#coln6)      ! bold
              print $OPTIM_STR      (,{col3CN})    ! bold
           end-if

           let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount19R
   end-if

#Debug Show '<- Print_Current_Village_Data ' #Total_Gross_Wage
end-procedure
!***********************************************************************
Begin-procedure Print_Retro_Data
#Debug Show '-> Print_Retro_Data ' $Empl_ID ' , ' $Actual_Can ' , ' $Actual_Vill ' , ' $Tax_Tariff_TypeR

   let $Print_Corr       = 'N'
   let $Print_Opt        = 'N'

   let $Existed_Dat      = 'Y'
   let $IT_Exist_Data    = 'Y'
   let $Was_Printed_Data = 'Y'
   let #Total_Gross_Wage = #Total_Gross_Wage + #Amount1R
   let #Total_Bonus_Amt  = #Total_Bonus_Amt  + #Amount2R
   !-------------------------------------------------------------------------

      if (#Amount1R  <> 0 or #Amount2R  <> 0 or #Amount3R  <> 0)
         do Print_Retro_Village_Data
      end-if

      if #Amount14R  <> 0
         let $Print_Corr = 'Y'
         do Print_Retro_Village_Data
         let $Print_Corr = 'N'
      end-if

      if #Amount19R  <> 0
         let $Print_Opt = 'Y'
         do Print_Retro_Village_Data
      end-if

#Debug Show '<- Print_Retro_Data '
end-procedure
!*************************************************************************************
begin-procedure Print_Retro_Village_Data   !Prints Retro values
#Debug Show '-> Print_Retro_Village_Data '

   do Get_End_Mnth($PRD_E_DTR,$Ctl_E_Dat)
   do Get_Beg_Mnth($PRD_E_DTR,$Ctl_B_Dat)
   do Format-DateTime($Ctl_B_Dat,$Ctl_B_Dat1 ,{DEFCMP},'','')
   do Format-DateTime($Ctl_E_Dat,$Ctl_E_Dat1 ,{DEFCMP},'','')
   do Format-DateTime($B_DTR,$B_Date         ,{DEFCMP},'','')
   do Format-DateTime($E_DTR,$E_Date         ,{DEFCMP},'','')
   do Format-DateTime($Birth_DTR, $Birth_DTR1,{DEFDATE},'','')

   do Get_Formatted_Date
   !-------------------------------------------------------------
   print $FROM_STR    (+1,{col1})
   print ' '          (,+1)
   print $PRD_E_DTR1  (,+1)

   if $N_IdR <> ''
        let $N_IdT      = edit($N_IdR,'XXX.XX.XXX.XXX')
        print $N_IdT            (+1,{col1})  ! bold
   else
        do Format-Number(#Empl_RCD,$EmplRcd,'888')
        let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
        print $EmplID_Rcd       (+1,{col1})  ! bold
   end-if
   if $NNSS_IdR <> ''
        let $NNSS_IdT      = edit($NNSS_IdR,'XXX.XXXX.XXXX.XX')
       if ($Ctl_Canton <> 'GE') AND rtrim($Actual_Can,' ') <> 'GE' AND $Canton <>'GE'
           print $NNSS_IdT            (,50)  bold
        end-if
  ! else
  !      do Format-Number(#Empl_RCD,$EmplRcd,'888')
  !      let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
  !      print $EmplID_Rcd       (+1,{col1})  bold
   end-if

   print $Empl_NameR   (,18,29)

    !-------------------------------------------------------------------------------- Normal
   if ($Print_Corr <> 'Y') and ($Print_Opt <> 'Y')

       if ($Ctl_Canton = 'GE') or rtrim($Actual_Can,' ') = 'GE'
               print $PostalR              (,{cl2},5)   ! bold
       end-if

       Evaluate $ActionR
       when = 'HIR'
            if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                print $String_Before_E     (,#coln1)
                print $B_DTR1              (,)
              let $Mutation = $String_Before_E ||$B_DTR1
            end-if
            if $Taxterm = 'TER'
!               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                print '  '  (,)
                print $String_Before_T     (,)
                print $E_DTR1              (,)
               let $Mutation = $Mutation||';'||$String_Before_T  ||$E_DTR1
!              end-if
            end-if 
       break
       when = 'TWE'
            if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                print $String_Before_E     (,#coln1)
                print $B_DTR1              (,)
                let $Mutation = $String_Before_E  ||$B_DTR1
            end-if
            
            if $Taxterm = 'TER'
!               if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                print '  '  (,)
                print $String_Before_T     (,)
                print $E_DTR1              (,)
                 let $Mutation = $Mutation||';'||$String_Before_T  ||$E_DTR1
!              end-if
            end-if  
       break
     !  when = 'TER'
     !       if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
     !           print $String_Before_T     (,#coln1)
     !           print $E_DTR1              (,)
     !       end-if
     !  break
       when-other
       if $Taxterm = 'TER' 
!            if ($B_Date >= $Ctl_B_Dat1) and ($B_Date <= $Ctl_E_Dat1)
                print $String_Before_T     (,#coln1)
                print $E_DTR1              (,)
              let $Mutation = $String_Before_T  ||$E_DTR1 
!            end-if
       end-if
       break
       End-Evaluate

       do Format-Number(#Amount1R,$Amount1R_1,'9,999,999,999.99')
       do Format-Number(#Amount2R,$Amount2R_1,'9,999,999.99')
       do Format-Number(#Amount3R,$Amount3R_1,'9,999,999,999.99')
       do Format-Number(#Amount11R,$Amount11R_1,'B99.99')
       
       print $Amount1R_1             (,#coln2)
       print $Amount2R_1             (,#coln3)
       print $Tax_Tariff_CodeR       (,#coln4)
       print $Amount11R_1            (,#coln5,6)
       print $Amount3R_1             (,#coln6)

       let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount3R
       do Format-Number(#Amount1R,$Amount1R_1,'999999999.99') ! for xml syed 

   end-if

   

   !-------------------------------------------------------------------------------- Correction
   if $Print_Corr = 'Y'

       do Format-Number(#Amount14R,$Amount14R_1,'9,999,999,999.99')

       print $CORRECTION_STR   (,{col1CR},2)
       print $CORRECTION2_STR  (,{col3CN})
       print $Amount14R_1      (,#coln6)

       let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount14R


   end-if
   !-------------------------------------------------------------------------------- Optimise
   if $Print_Opt = 'Y'

       do Format-Number(#Amount19R,$Amount19R_1,'9,999,999,999.99')

       if $Print_Korr = 'Y'
          print $CORR_OPTIM_STR  (+1,{col1CR},2)
          print $Amount19R_1     (,#coln6)
          print $OPTIM_STR       (,72)    !{col3CN})
       else
          print $CORR_OPTIM_STR  (,{col1CR},2)
          print $Amount19R_1     (,#coln6)
          print $OPTIM_STR       (,72)    !{col3CN})
       end-if

       let #Total_Comm_Tax_Amnt = #Total_Comm_Tax_Amnt + #Amount19R

   end-if

#Debug Show '<- Print_Retro_Village_Data '  #Total_Gross_Wage
end-procedure
!***********************************************************************
Begin-Procedure Get_Canton_Name  !Get Canton name
#Debug Show '-> Get_Canton_Name '

  
    #ifdef ORACLE
             let $Actual_Can1 =  $Actual_Can
      #else
         #ifdef DB2ALL
                let $Actual_Can1 =  $Actual_Can
         #else
            let $Actual_Can1 =  $Actual_Can || '    '
         #end-if
    #end-if
  
  
        let $Key_Canton = $Actual_Can1 || $Tax_Language
  
        Lookup Get_Base_Canton_Descr $Actual_Can1 $Return_Val
        if Not Isnull ($Return_Val)
           let $Canton_NameR = rtrim($Return_Val,' ')
        end-if
  
  
        if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
           Lookup Get_Trans_Canton_Descr $Actual_Can1 $Return_Val
           if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              let $Canton_NameR = rtrim($Return_Val,' ')
           end-if
        end-if
  
        if ($BASE_LANG <> $language_cd) and ($language_cd = '')
           Lookup Get_Trans_Canton_Descr_ALL $Key_Canton $Return_Val
           if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              let $Canton_NameR = rtrim($Return_Val,' ')
           end-if
        end-if


#Debug Show '<- Get_Canton_Name '
End-Procedure Get_Canton_Name
!***********************************************************************
Begin-Procedure Get_Village_Name  !Get Canton name
#Debug Show '-> Get_Village_Name '
   
    let #lenvillcd= length($Village_CDR)
    If  #lenvillcd= 3
      let $Village_CDR = $Village_CDR || ' '
    End-If
    
    If  #lenvillcd= 2
      let $Village_CDR = $Village_CDR || '  '
    End-If
    
    If  #lenvillcd= 1
      let $Village_CDR = $Village_CDR || '   '
    End-If

    Lookup Get_Village_Descr $Village_CDR $Return_Val
    let $Village_NameR = rtrim($Return_Val,' ')
    
    #DEBUG SHOW 'Village_Descr : '  $Village_CDR  ' , ' $Village_NameR

#Debug Show '<- Get_Village_Name '
End-Procedure Get_Village_Name
!***********************************************************************
begin-procedure Get_Company_Name
#DEBUG show '-> Get_Company_Name   ' $Ctl_Company ' , ' $BASE_LANG ' , ' $language_cd  ' , ' $Tax_Language

      let $Key_Company  = $Ctl_Company || $Tax_Language

      Lookup Base_Company_Descr $Ctl_Company $Return_Val
      if Not Isnull ($Return_Val)
                     let $Cpdescr = rtrim($Return_Val,' ')
      end-if


      if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
          Lookup Trans_Company_Descr $Ctl_Company $Return_Val
          if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
             let $Cpdescr = rtrim($Return_Val,' ')
          end-if
      end-if

      if ($BASE_LANG <> $language_cd) and ($language_cd = '')
          Lookup Trans_Company_Descr_ALL $Key_Company $Return_Val
          if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Cpdescr = rtrim($Return_Val,' ')
          end-if
      end-if
      
      


#DEBUG show '<- Get_Company_Name   ' $Cpdescr
end-procedure Get_Company_Name
!*************************************************************************************
begin-procedure Get_Formatted_Date
#Debug Show '-> Get_Formatted_Date '



   do ConvertToComponents($B_DTR,$yy_BDTR,$mm_BDTR,$dd_BDTR)
   !do ConvertToComponents($E_DTR,$yy_EDTR,$mm_EDTR,$dd_EDTR)
   do ConvertToComponents($TaxTermDt,$yy_EDTR,$mm_EDTR,$dd_EDTR)
   do ConvertToComponents($PRD_E_DTR,$yy_DTR,$mm_DTR,$dd_DTR)

   let $B_DTR1     = ''
   let $E_DTR1     = ''
   let $PRD_E_DTR1 = ''

   if rtrim($B_DTR,' ') <> ''

      Evaluate #Date_Type
      when = 1
           let $B_DTR1 = $dd_BDTR || '{PTDateDelim}' || $mm_BDTR || '{PTDateDelim}'
      break
      when-other
           let $B_DTR1 = $mm_BDTR || '{PTDateDelim}' || $dd_BDTR || '{PTDateDelim}'
      break
     End-Evaluate

   end-if

    !if rtrim($E_DTR,' ') <> ''
    if rtrim($TaxTermDt,' ') <> '' 

      Evaluate #Date_Type
      when = 1
           let $E_DTR1 = $dd_EDTR || '{PTDateDelim}' || $mm_EDTR || '{PTDateDelim}'
      break
      when-other
           let $E_DTR1 = $mm_EDTR || '{PTDateDelim}' || $dd_EDTR || '{PTDateDelim}'
      break
      End-Evaluate

   end-if

   if rtrim($PRD_E_DTR,' ') <> ''

      Evaluate #Date_Type
      when = 2
        let $PRD_E_DTR1 = $yy_DTR || '{PTDateDelim}' || $mm_DTR
      break
      when-other
        let $PRD_E_DTR1 = $mm_DTR || '{PTDateDelim}' || $yy_DTR
      break
      End-Evaluate

   end-if


#Debug Show '<- Get_Formatted_Date '
end-procedure Get_Formatted_Date
!******************************************************************************
begin-procedure InitRekapData
let #b1 = 0
while #b1 < 50
put ''            into RekapData(#b1) Rekap1
put ''            into RekapData(#b1) Rekap2
put 0             into RekapData(#b1) Rekap3
put 0             into RekapData(#b1) Rekap4
put 0             into RekapData(#b1) Rekap5
put 0             into RekapData(#b1) Rekap6
let #b1 = #b1 + 1
end-while
end-procedure
!******************************************************************************
begin-procedure InitRekapDataTotal
let #b1 = 0
while #b1 < 150
put ''            into RekapDataTotal(#b1) Rekap1
put ''            into RekapDataTotal(#b1) Rekap2
put 0             into RekapDataTotal(#b1) Rekap3
put 0             into RekapDataTotal(#b1) Rekap4
put 0             into RekapDataTotal(#b1) Rekap5
put 0             into RekapDataTotal(#b1) Rekap6
let #b1 = #b1 + 1
end-while
end-procedure
!******************************************************************************
begin-procedure InitialCommRekap
let #b2 = 0
while #b2 < 1000
put ''            into CRekapData(#b2) CRekap0
put ''            into CRekapData(#b2) CRekap1
put ''            into CRekapData(#b2) CRekap2
put ''            into CRekapData(#b2) CRekap3
put 0             into CRekapData(#b2) CRekap4
put 0             into CRekapData(#b2) CRekap5
put 0             into CRekapData(#b2) CRekap6
put 0             into CRekapData(#b2) CRekap7
put 0             into CRekapData(#b2) CRekap8
let #b2 = #b2 + 1
end-while
end-procedure

!************************************************************************************
begin-procedure InitialCommRekapTotal
let #b2 = 0
while #b2 < 1000
put ''            into CRekapDataTotal(#b2) CRekap0
put ''            into CRekapDataTotal(#b2) CRekap1
put ''            into CRekapDataTotal(#b2) CRekap2
put ''            into CRekapDataTotal(#b2) CRekap3
put 0             into CRekapDataTotal(#b2) CRekap4
let #b2 = #b2 + 1
end-while
end-procedure
!**** FMB Begin ***
!*************************************************************************************
Begin-Procedure Get_Positive_TX03
#Debug Show '-> Get_Positive_TX03 '

#debug show $Cross_Border_Cond
#debug show $Ctl_Canton_Crit1
#debug show $Emplid_Criteria1
#debug show $CantCrit

#debug show $Ctl_PayEntity
#debug show $Ctl_Curr_Pay_End_Dt
#debug show $ReportEndDate 
       

Begin-Sql on-error=give_warning
insert into PS_GPCHTX023_TMP(PROCESS_INSTANCE,EMPLID, EMPL_RCD, GP_PAYGROUP, PRD_END_DT, CAL_ID, GPCH_AL_CPAY_ENDDT, 
SLICE_BGN_DT, RSLT_SEG_NUM, PAY_ENTITY, COMPANY, GPCH_TX_CANTON, GPCH_TX_VILLAGE_CD, BEGIN_DT, END_DT, 
GPCH_RP_AMOUNT1, GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4,GPCH_RP_AMOUNT5,GPCH_TX_STAXB_PCT, GPCH_RP_AMOUNT6 )


SELECT


[$prcs_process_instance],IA1.EMPLID, IA1.EMPL_RCD, IA1.GP_PAYGROUP, IA1.PRD_END_DT, IA1.CAL_ID, IA1.GPCH_AL_CPAY_ENDDT, 
IA1.SLICE_BGN_DT, IA1.RSLT_SEG_NUM, IA1.PAY_ENTITY, IA1.COMPANY, IA1.GPCH_TX_CANTON, IA1.GPCH_TX_VILLAGE_CD, 
IA1.BEGIN_DT, IA1.END_DT, IA1.GPCH_RP_AMOUNT1, IA1.GPCH_RP_AMOUNT2,IA1.GPCH_RP_AMOUNT3,IA1.GPCH_RP_AMOUNT4,
IA1.GPCH_RP_AMOUNT5,IA1.GPCH_TX_STAXB_PCT, IA1.GPCH_RP_AMOUNT6

FROM PS_GPCH_RP_TX03 IA1 , PS_GPCH_RP_0001 RP
WHERE IA1.PAY_ENTITY        = $Ctl_PayEntity
!and IA1.GPCH_AL_CPAY_ENDDT  = $Ctl_Curr_Pay_End_Dt
and IA1.GPCH_AL_CPAY_ENDDT  between $ReportBeginDate and $ReportEndDate
and IA1.EMPLID              = RP.EMPLID
 and IA1.CAL_RUN_ID          = RP.CAL_RUN_ID
 AND   IA1.EMPL_RCD          = RP.EMPL_RCD
 AND   IA1.CAL_ID            = RP.CAL_ID
 AND   IA1.GP_PAYGROUP       = RP.GP_PAYGROUP

 AND   IA1.GPCH_AL_CPAY_ENDDT = (SELECT max(RP1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 RP1
                                WHERE RP.EMPLID              = RP1.EMPLID
                                AND   RP.EMPL_RCD            = RP1.EMPL_RCD
                                AND   RP.CAL_ID              = RP1.CAL_ID
                                AND   RP.GP_PAYGROUP         = RP1.GP_PAYGROUP
                                AND   RP1.GPCH_AL_CPAY_ENDDT <= $ReportEndDate)


End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug Show '<- Get_Positive_TX03 '
End-Procedure Get_Positive_TX03
!*************************************************************************************
Begin-Procedure Get_Negative_TX03
#Debug Show '-> Get_Negative_TX03 '


#debug show $Cal_Run_Id_Crit_A
#debug show $Ctl_Canton_Crit1
#debug show $Emplid_Criteria1
#debug show $CantCrit

#debug show $Ctl_PayEntity
#debug show $Ctl_Curr_Pay_End_Dt
#debug show $ReportEndDate

Begin-Sql on-error=give_warning
insert into PS_GPCHTX023_TMP(PROCESS_INSTANCE,EMPLID, EMPL_RCD, GP_PAYGROUP, PRD_END_DT, CAL_ID, GPCH_AL_CPAY_ENDDT, 
SLICE_BGN_DT, RSLT_SEG_NUM, PAY_ENTITY, COMPANY, GPCH_TX_CANTON, GPCH_TX_VILLAGE_CD, BEGIN_DT, END_DT, 
GPCH_RP_AMOUNT1, GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4,GPCH_RP_AMOUNT5,GPCH_TX_STAXB_PCT, GPCH_RP_AMOUNT6 )

SELECT

[$prcs_process_instance],IA1.EMPLID,IA1.EMPL_RCD, IA1.GP_PAYGROUP, IA1.PRD_END_DT, IA1.CAL_ID, IA1.GPCH_AL_CPAY_ENDDT, 
IA1.SLICE_BGN_DT, IA1.RSLT_SEG_NUM, IA1.PAY_ENTITY, IA1.COMPANY, IA1.GPCH_TX_CANTON, IA1.GPCH_TX_VILLAGE_CD, 
IA1.BEGIN_DT, IA1.END_DT, IA1.GPCH_RP_AMOUNT1 * -1 , IA1.GPCH_RP_AMOUNT2 * -1 ,IA1.GPCH_RP_AMOUNT3 * -1 ,IA1.GPCH_RP_AMOUNT4 * -1 ,
IA1.GPCH_RP_AMOUNT5,IA1.GPCH_TX_STAXB_PCT, IA1.GPCH_RP_AMOUNT6 * -1 
FROM PS_GPCH_RP_TX03 IA1, PS_GPCH_RP_0001 RP
WHERE IA1.PAY_ENTITY       = $Ctl_PayEntity
 and IA1.EMPLID            = RP.EMPLID
 and IA1.SLICE_BGN_DT      = RP.SLICE_BGN_DT
 AND IA1.EMPL_RCD          = RP.EMPL_RCD
 AND IA1.CAL_ID            = RP.CAL_ID
 AND IA1.GP_PAYGROUP       = RP.GP_PAYGROUP

 AND IA1.GPCH_AL_CPAY_ENDDT = (SELECT max(IA11.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_TX03 IA11
                                WHERE IA1.EMPLID              = IA11.EMPLID
                                AND   IA1.EMPL_RCD            = IA11.EMPL_RCD
                                AND   IA1.CAL_ID              = IA11.CAL_ID
                                AND   IA1.GP_PAYGROUP         = IA11.GP_PAYGROUP
                                AND   IA11.GPCH_AL_CPAY_ENDDT < $ReportBeginDate) 

 and RP.GPCH_AL_CPAY_ENDDT  between $ReportBeginDate and $ReportEndDate




 AND   IA1.GPCH_AL_CPAY_ENDDT = (SELECT max(RP1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 RP1
                                WHERE RP.EMPLID              = RP1.EMPLID
                                AND   RP.EMPL_RCD            = RP1.EMPL_RCD
                                AND   RP.CAL_ID              = RP1.CAL_ID
                                AND   RP.GP_PAYGROUP         = RP1.GP_PAYGROUP
                                AND   RP1.GPCH_AL_CPAY_ENDDT < $ReportBeginDate) 

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug Show '<- Get_Negative_TX03 '
End-Procedure Get_Negative_TX03
!*************************************************************************************
Begin-Procedure Get_Totals_TX03
#Debug Show '-> Get_Totals_TX03 '

#debug show $Cross_Border_Cond
#debug show $Ctl_Canton_Crit1
#debug show $Emplid_Criteria1
#debug show $CantCrit

Begin-Sql on-error=give_warning
insert into PS_GPCHTX024_TMP(PROCESS_INSTANCE,EMPLID, EMPL_RCD, GP_PAYGROUP, PRD_END_DT, CAL_ID, GPCH_AL_CPAY_ENDDT, 
SLICE_BGN_DT, RSLT_SEG_NUM, PAY_ENTITY, COMPANY, GPCH_TX_CANTON, GPCH_TX_VILLAGE_CD, BEGIN_DT, END_DT, 
GPCH_RP_AMOUNT1, GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4,GPCH_RP_AMOUNT5,GPCH_TX_STAXB_PCT, GPCH_RP_AMOUNT6 )
SELECT
[$prcs_process_instance],IA2.EMPLID, IA2.EMPL_RCD, IA2.GP_PAYGROUP, IA2.PRD_END_DT, IA2.CAL_ID, IA2.GPCH_AL_CPAY_ENDDT, 
IA2.SLICE_BGN_DT, IA2.RSLT_SEG_NUM, IA2.PAY_ENTITY, IA2.COMPANY, IA2.GPCH_TX_CANTON, IA2.GPCH_TX_VILLAGE_CD, 
IA2.BEGIN_DT, IA2.END_DT, sum(IA2.GPCH_RP_AMOUNT1), sum(IA2.GPCH_RP_AMOUNT2),sum(IA2.GPCH_RP_AMOUNT3),
sum(IA2.GPCH_RP_AMOUNT4),IA2.GPCH_RP_AMOUNT5,IA2.GPCH_TX_STAXB_PCT, sum(IA2.GPCH_RP_AMOUNT6)

FROM PS_GPCHTX023_TMP IA2
WHERE IA2.PROCESS_INSTANCE        = #prcs_process_instance
Group by IA2.EMPLID, IA2.EMPL_RCD, IA2.GP_PAYGROUP, IA2.PRD_END_DT, IA2.CAL_ID, IA2.GPCH_AL_CPAY_ENDDT, 
IA2.SLICE_BGN_DT, IA2.RSLT_SEG_NUM, IA2.PAY_ENTITY, IA2.COMPANY, IA2.GPCH_TX_CANTON, IA2.GPCH_TX_VILLAGE_CD, 
IA2.BEGIN_DT, IA2.END_DT, IA2.GPCH_RP_AMOUNT5,IA2.GPCH_TX_STAXB_PCT
having sum(IA2.GPCH_RP_AMOUNT6) <> 0.00

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug Show '<- Get_Totals_TX03 '
End-Procedure Get_Totals_TX03

!*************************************************************************************
begin-procedure Delete-GPCHTX023_TMP
#Debug show '<- Delete-GPCHTX023_TMP'

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHTX023_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug show '-> Delete-GPCHTX023_TMP'
end-procedure Delete-GPCHTX023_TMP

!*************************************************************************************
begin-procedure Delete-GPCHTX024_TMP
#Debug show '<- Delete-GPCHTX024_TMP'

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHTX024_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance

End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

#Debug show '-> Delete-GPCHTX024_TMP'
end-procedure Delete-GPCHTX024_TMP

!*************************************************************************************

!**** FMB End

!************************************************************************************
begin-procedure Read-RPTX03

 do Get-Output-Directory('GPCHTX02',$Output_Directory,$prcs_no)
  !-----------------------------------------------------------------------
           let #position1     = instr($prcs_no,'.',0)
           let #position1     = #position1 - 1
           let $prcs_no2 = substr($prcs_no,1,#position1)  
   
       
   let $reportdir4 = $Output_Directory || 'GPCHTX02_' || $prcs_no2||'.xml'  ! oracle / Mss
   
   open $reportdir4 as 20 FOR-WRITING RECORD=4000:VARY 

   do  Get-IASC-Date
 do Get-IASC-Condition

Begin-Select
GPCH_EG_HDR_XML

 let  $header_xml = &GPCH_EG_HDR_XML

From PS_GPCH_EG_FHEADER
where GPCH_EG_DOMAINID= #domainid
 !AND GPCH_RC_PAY_YEAR= $Ctl_Year
 
End-Select
  let $header_xml1 ='<?xml version="1.0" encoding="UTF-8" ?>' || $header_xml
   let #IASC_position1= instr($header_xml1,'<GeneralSalaryDeclarationDescription>',0)
   let #IASC_position2 = #IASC_position1
   let #IASC_position1=  #IASC_position1 - 1
    let #IASC_position3= instr($header_xml1,'</DeclareSalary>',0)
  
     let $xml1 = substr($header_xml1,1,#IASC_position1)  
    let $xml2 = substr($header_xml1,#IASC_position2,#IASC_position3)  
  write 20 from $xml1


 let  $IASC_Emplid_old=''



!FMB 20070922 Begin

 

 do Get_Positive_TX03
 do Get_Negative_TX03
 do Get_Totals_TX03

!FMB 20070922 End


 
Begin-Select
A.EMPLID                &A.EMPLID
!FMB  A.CAL_RUN_ID            &A.CAL_RUN_ID  
A.EMPL_RCD              &A.EMPL_RCD
A.GPCH_TX_STAXB_PCT     &A.GPCH_TX_STAXB_PCT 
A.GPCH_TX_VILLAGE_CD    &A.GPCH_TX_VILLAGE_CD 
A.GPCH_TX_CANTON        &A.GPCH_TX_CANTON
A.GPCH_RP_AMOUNT1       &A.GPCH_RP_AMOUNT1
A.GPCH_RP_AMOUNT2       &A.GPCH_RP_AMOUNT2
A.GPCH_RP_AMOUNT3       &A.GPCH_RP_AMOUNT3
A.GPCH_RP_AMOUNT4       &A.GPCH_RP_AMOUNT4 
A.GPCH_RP_AMOUNT5       &A.GPCH_RP_AMOUNT5
A.GPCH_RP_AMOUNT6       &A.GPCH_RP_AMOUNT6
A.BEGIN_DT              &A.BEGIN_DT
A.END_DT                &A.END_DT
A.COMPANY               &A.COMPANY 

  let $IASC_Emplid= &A.EMPLID
!FMB  let $IASC_Calrunid = &A.CAL_RUN_ID
  let #IASC_Emplrcd = &A.EMPL_RCD
  let #IASC_Amount1= &A.GPCH_RP_AMOUNT1
  let #IASC_Amount2= &A.GPCH_RP_AMOUNT2
  let #IASC_Amount3= &A.GPCH_RP_AMOUNT3
  let #IASC_Amount4= &A.GPCH_RP_AMOUNT4
  let #IASC_Amount5= &A.GPCH_RP_AMOUNT5
  let #IASC_Amount6= &A.GPCH_RP_AMOUNT6
  let $IASC_Canton= &A.GPCH_TX_CANTON
  let #IASC_Staxbpct= &A.GPCH_TX_STAXB_PCT
  let $IASC_Villagecd= &A.GPCH_TX_VILLAGE_CD
  let $IASC_Comp     = &A.COMPANY  
  let $IASC_fromdt1  = &A.BEGIN_DT 
  let $IASC_todt1   = &A.END_DT    

   do ConvertToComponents($IASC_fromdt1,$yy1_IASC,$mm1_IASC,$dd1_IASC)
      
       let $IASC_fromdt_xml = $yy1_IASC||'-'||$mm1_IASC||'-' ||$dd1_IASC
   do ConvertToComponents($IASC_todt1,$yy2_IASC,$mm2_IASC,$dd2_IASC)
       
       let $IASC_todt_xml = $yy2_IASC||'-'||$mm2_IASC ||'-'||$dd2_IASC
      
     
      
          If $IASC_PrintXML <> 'Y'  
    If $IASC_Emplid <>  $IASC_Emplid_old

      do xml-writefile
      End-if
     do  Employee_Data_XML
    
       else 
     If $IASC_Emplid <>  $IASC_Emplid_old
     do xml-writefile
      Let  $IASC_Emplid_old = $IASC_Emplid
    End-If
      End-if

  
From PS_GPCHTX024_TMP A
 where A.PROCESS_INSTANCE = #prcs_process_instance
!FMB [$date_Criteria1]
!FMB [$date_Criteria2]


End-Select

    If $IASC_PrintXML <> 'Y'
    do xml-writefile
  End-if

  let $writeheader_xml=''

Begin-Select
FILE_DATA_CHAR
   let $insurance_xml = &FILE_DATA_CHAR
  
  let #IASC_pos1= instr( $insurance_xml,'<Insurances>',0)
  
   
    let #IASC_pos2= instr($insurance_xml,'</Insurances>',0)
     let $egheader_xml = substr($insurance_xml,#IASC_pos1,#IASC_pos2)  
    let $writeheader_xml= $writeheader_xml||$egheader_xml

from PS_GPCH_EG_PHEADER
where GPCH_SI_PROV_TYPE ='A'
AND COMPANY= $ptot_company
AND GPCH_RC_PAY_YEAR= #ptot_year
End-Select
    do Delete-GPCHTX023_TMP
    do Delete-GPCHTX024_TMP
  write 20 from $writeheader_xml
  write 20 from $xml2
 close 20
end-procedure

!************************************************************************************
begin-procedure Employee_Data_XML
 DO Format-Number(#IASC_Amount1, $IASC_Amount1, '888888888888.00')
   DO Format-Number(#IASC_Amount2, $IASC_Amount2, '888888888888.00')
 DO Format-Number(#IASC_Amount3, $IASC_Amount3, '888888888888.00')
   DO Format-Number(#IASC_Amount4, $IASC_Amount4, '888888888888.00')
 DO Format-Number(#IASC_Amount5, $IASC_Amount5, '888888888888.00')
   DO Format-Number(#IASC_Amount6, $IASC_Amount6, '888888888888.00')
DO Format-Number(#IASC_Staxbpct, $IASC_Staxbpct, '888888888888.00')
 

let $AccountingTime_Tag = '<AccountingTime>' || '<from>' || $IASC_fromdt_xml || '</from>' || '<until>' || $IASC_todt_xml || '</until>' || '</AccountingTime>'
let $IASC_Commune ='<Commune>'||$IASC_Villagecd||'</Commune>'
let $IASC_Cant ='<Canton>'||$IASC_Canton||'</Canton>'
let $IASC_Tours='<Tours>'||$IASC_Amount1||'</Tours>'
let $IASC_Brut='<Brut>'||$IASC_Amount2||'</Brut>'
let $IASC_Frais='<Frais>'||$IASC_Amount3||'</Frais>'
let $IASC_Net='<Net>'||$IASC_Amount4||'</Net>'
let $IASC_Moyen ='<Moyen>'||$IASC_Amount5||'</Moyen>'
let $IASC_Taux='<Taux>'||$IASC_Staxbpct||'</Taux>'
let $IASC_Impot='<Impot>'||$IASC_Amount6||'</Impot>'
let $IASC_XML1=$IASC_Commune || $IASC_Cant || $IASC_Tours || $IASC_Brut || $IASC_Frais
let $IASC_XML2= $IASC_Net || $IASC_Moyen || $IASC_Taux || $IASC_Impot

 If $IASC_Emplid <>  $IASC_Emplid_old
  Let $IASC_Salary_Tag = ''
 End-If
   
   Let $IASC_Salary_Tag = $IASC_Salary_Tag ||'<IASC-Salary institutionIDRef='||'"'||'#KSISC'||'">'||$AccountingTime_Tag
            || $IASC_XML1 ||$IASC_XML2 ||'</IASC-Salary>'
        
Let $IASC-Salaries_Tag = '<IASC-Salaries>' || $IASC_Salary_Tag || '</IASC-Salaries>'

 
 
   do Get-PTotals-Data_IASC

  Let  $IASC_Emplid_old = $IASC_Emplid

end-procedure
!***********************************************************************************

Begin-Procedure Get-PTotals-Data_IASC
    


let $provtype='A'

Begin-select
P.COMPANY
P.GPCH_RC_PAY_YEAR
P.GPCH_EG_DOMAINID
P.GPCH_SI_PROV_CD
P.GPCH_SI_PROV_TYPE
P.GPCH_EG_REQUEST_ID
P.GPCH_EG_USERKEY

    let $ptot_company= &P.COMPANY
    let #ptot_year =&P.GPCH_RC_PAY_YEAR
    let #ptot_domainid= &P.GPCH_EG_DOMAINID
    let $ptot_providercd= RTRIM(ltrim(&P.GPCH_SI_PROV_CD,' '),' ')
    let $ptot_provtype =&P.GPCH_SI_PROV_TYPE
    let $ptot_requestid =&P.GPCH_EG_REQUEST_ID
    let $ptot_userkey =  RTRIM(ltrim(&P.GPCH_EG_USERKEY,' '),' ')
      
         DO Format-Number(#ptot_year, $ptot_year, '8888')
     Do Insert_Employee_Data_XML      
          
from PS_GPCH_EG_PTOTALS P
     where P.GPCH_SI_PROV_TYPE = $provtype
           and P.GPCH_EG_DOMAINID =#Domainid
end-select
    
   
end-procedure



!*************************************************************************************

Begin-Procedure Insert_Employee_Data_XML

#debug show ' $ptot_userkey = ' $ptot_userkey ' $IASC_Canton = ' $IASC_Canton

!FMB let $ptot_userkey = '99'
 
  If $ptot_userkey='99' or $ptot_userkey= $IASC_Canton

Begin-Sql on-error=give_warning

 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_SI_PROV_CD=$ptot_providercd 
 AND GPCH_RC_PAY_YEAR = $ptot_year AND BEGIN_DT=$IASC_begdt AND END_DT=$IASC_enddt AND COMPANY = $ptot_company AND  EMPLID = $IASC_Emplid AND EMPL_RCD = #IASC_Emplrcd AND GPCH_SI_PROV_TYPE='A'

End-SQL

Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,$ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$IASC_Emplid,#IASC_Emplrcd,$IASC_begdt,$IASC_enddt,1,$IASC-Salaries_Tag)

End-SQL
 do Createrow-EG01
End-if

End-procedure
!****************************************************
begin-Procedure Get-IASC-Date

let $IASC_Year  = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
let $IASC_Currenddt   =RTRIM(&GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT, ' ')

If $Ctl_Quarter_Opt ='Y'
If $Quarter='1'

let $IASC_begdt1= $IASC_Year || '01' || '01'
let $IASC_enddt1= $IASC_Year || '03' || '31'
End-if

If $Quarter='2'

let $IASC_begdt1= $IASC_Year || '04' || '01'
let $IASC_enddt1= $IASC_Year || '06' || '30'
End-if


If $Quarter='3'

let $IASC_begdt1= $IASC_Year || '07' || '01'
let $IASC_enddt1= $IASC_Year || '09' || '30'
End-if

If $Quarter='4'

let $IASC_begdt1= $IASC_Year || '10' || '01'
let $IASC_enddt1= $IASC_Year || '12' || '31'
End-if

End-if

If $Ctl_Quarter_Opt <>'Y'

 

 do ConvertToComponents($IASC_Currenddt,$yy_IASC,$mm_IASC,$dd_IASC)
 
 let $IASC_Year = $yy_IASC 
 let $IASC_begdt1 = $yy_IASC || $mm_IASC ||'01'
 let $IASC_enddt1=  $yy_IASC || $mm_IASC ||$dd_IASC

End-If

     do Format-DateTime($IASC_begdt1, $IASC_begdt, {DEFCMP}, '', 'native')
      do Format-DateTime($IASC_enddt1, $IASC_enddt, {DEFCMP}, '', 'native')



End-Procedure
!*************************************************************************************
begin-Procedure Get-IASC-Condition
 let   $date_Criteria1 =''
  let   $date_Criteria2 =''

 If $Ctl_Quarter_Opt <>'Y'
 let $date_Criteria1          = 'WHERE A.BEGIN_DT ='''||$IASC_begdt||''''||'AND A.END_DT='''||$IASC_enddt||''' '
  End-if
    
  If $Ctl_Quarter_Opt ='Y'
   let $date_Criteria2= 'WHERE A.BEGIN_DT >='''||$IASC_begdt||''''||'AND A.END_DT<='''||$IASC_enddt||''' '
  End-if




End-Procedure
!************************************************************************************

begin-Procedure Createrow-EG01

   let $NameSpace=''
  
begin-SELECT  
RP.EMPLID
RP.EMPL_RCD
RP.NATIONAL_ID
NM.LAST_NAME
NM.FIRST_NAME
RP.SEX
RP.BIRTHDATE   &RP.BIRTHDATE
RP.COUNTRY_FROM   ! TX07.COUNTRY_FROM
RP.MAR_STATUS    ! TX07.MAR_STATUS
RP.STATE
RP.FTE
RP.GPCH_TX_FAK_CANTON


  

                Let $National_Id =  RTRIM(&RP.NATIONAL_ID,' ')
                If $National_Id <> ''
                 let $National_Id = edit($National_Id,'XXX.XX.XXX.XXX')
                Else
                 Let $National_Id = ''
                End-IF
                Let $Emplid = RTRIM(LTRIM(&RP.EMPLID,' '),' ')
                Let #Empl_Rcd = &RP.EMPL_RCD
                Let $Last_Name =  RTRIM(LTRIM(&NM.LAST_NAME,' '),' ')
                Let $First_Name = RTRIM(LTRIM(&NM.FIRST_NAME,' '),' ')
                Let $Sex = &RP.SEX
                Let $B_Day = &RP.BIRTHDATE
                Let $Country = LTRIM(RTRIM(&RP.COUNTRY_FROM,' '),' ')
                Let $Country=substr($Country,1,2)
                let $country=$Country
                  if $Country=''
                   let $Country='CH'
                 end-if
                Let $Mar_Status = &RP.MAR_STATUS
                Let $State = LTRIM(RTRIM(&RP.STATE,' '),' ')
                Let #FTE = &RP.FTE
                Let $Canton_Work = LTRIM(RTRIM(&RP.GPCH_TX_FAK_CANTON,' '),' ')

                Let #FTE= Round(#FTE* 100,0)
                DO Format-Number(#FTE,$FTE,'999')
                let $FTE= LTRIM(RTRIM($FTE,' '),' ')
               if $FTE='0'
            let $FTE='1'
             end-if


 Evaluate $Mar_Status
  When = 'C'
    Let $Mar_Status = 'unknown'
    Break

  When = 'D'
    Let $Mar_Status = 'divorced'
    Break

  When = 'E'
    Let $Mar_Status = 'separated'
    Break

  When = 'H'
     Let $Mar_Status = 'unknown' 
     Break

  When = 'M'
     Let $Mar_Status = 'married'
     Break

  When = 'P'
     Let $Mar_Status = 'unknown'
     Break

  When = 'S'
      Let $Mar_Status = 'single'
      Break

  When = 'U'
      Let $Mar_Status = 'unknown'     
      Break

  When = 'W'
      Let $Mar_Status = 'widowed'
      Break

  When-Other
       Let $Mar_Status = 'unknown'  
       Break
       
 End-Evaluate

 

 


        
  let $B_Day1 = DATETOSTR(&RP.BIRTHDATE,'YYYY-MM-DD')
 
  

          Let $Social-InsuranceIdentification1 =  '<' || $NameSpace || 'Social-InsuranceIdentification>' ||  '<' || $NameSpace || 'AHV-AVS-Number>' 
          Let $Social-InsuranceIdentification2 =  $National_Id || '</' || $NameSpace || 'AHV-AVS-Number>' || '</' || $NameSpace || 'Social-InsuranceIdentification>'
            
          if $National_Id <>''
                
          Let $Social-InsuranceIdentification = $Social-InsuranceIdentification1 || $Social-InsuranceIdentification2
           else 
            Let $Social-InsuranceIdentification='<' || $NameSpace || 'Social-InsuranceIdentification>'                                                  ||'<unknown/>'||'</Social-InsuranceIdentification>'

           end-if
                 
             if $Canton_Work<>'AG'and $Canton_Work<>'AI' and $Canton_Work<>'AR' and $Canton_Work<>'BE' and $Canton_Work<>'BL' and $Canton_Work<>'BS' and $Canton_Work<>'FR' and $Canton_Work<>'GE'
       and $Canton_Work<>'GL' and $Canton_Work<>'GR' and $Canton_Work<>'JU' and $Canton_Work<>'LU' and $Canton_Work<>'NE' and $Canton_Work<>'NW' and $Canton_Work<>'OW' and $Canton_Work<>'SG' and $Canton_Work<>'SH'
       and $Canton_Work<>'SO' and $Canton_Work<>'SZ' and $Canton_Work<>'TG' and $Canton_Work<>'TI' and $Canton_Work<>'UR' and $Canton_Work<>'VD' and $Canton_Work<>'VS' and $Canton_Work<>'ZG' and $Canton_Work<>'ZH'
       let $Canton_Work='EX'
      end-if
                
                  if  $State<>'AG'and $State<>'AI' and $State<>'AR' and $State<>'BE' and $State<>'BL' and $State<>'BS' and $State<>'FR' and $State<>'GE'
       and $State<>'GL' and $State<>'GR' and $State<>'JU' and $State<>'LU' and $State<>'NE' and $State<>'NW' and $State<>'OW' and $State<>'SG' and $State<>'SH'
       and $State<>'SO' and $State<>'SZ' and $State<>'TG' and $State<>'TI' and $State<>'UR' and $State<>'VD' and $State<>'VS' and $State<>'ZG' and $State<>'ZH'
       let $State='EX'
      end-if                   

           Let $EmployeeNumber = '<' || $NameSpace || 'EmployeeNumber>' || $Emplid || '</' || $NameSpace || 'EmployeeNumber>'
           Let $Lastname = '<' || $NameSpace || 'Lastname>' ||  $Last_Name  ||  '</' || $NameSpace || 'Lastname>'
           Let $Firstname = '<' || $NameSpace || 'Firstname>' || $First_Name  || '</' || $NameSpace || 'Firstname>'
           Let $Sex = '<' || $NameSpace || 'Sex>' || $Sex || '</' || $NameSpace || 'Sex>'
           Let $DOB = '<' || $NameSpace || 'DateOfBirth>' || $B_Day1  || '</' || $NameSpace || 'DateOfBirth>'
           Let $Nationality = '<' || $NameSpace || 'Nationality>' || $Country || '</' || $NameSpace || 'Nationality>'
           Let $cilvilStatus = '<' || $NameSpace || 'CivilStatus>' || $Mar_Status || '</' || $NameSpace || 'CivilStatus>'                     

           Let $ResidenceCanton = '<' || $NameSpace || 'ResidenceCanton>' || $State || '</' || $NameSpace || 'ResidenceCanton>'
           

          Let $ActivityRate = '<' || $NameSpace || 'ActivityRate>' || $FTE || '</' || $NameSpace || 'ActivityRate>'
            
           Let $WorkplaceCanton = '<' || $NameSpace || 'WorkplaceCanton>' || $Canton_Work  ||  '</' || $NameSpace || 'WorkplaceCanton>'


         
            

                DO GET_ADDRESS

                 
                Let $Address = '<' || $NameSpace || 'Address>' || $Street || $Postbox || $ZIP-Code || $City || '</' || $NameSpace || 'Address>'|| $ResidenceCanton 




                 Let $Particular_XML1 =  '<' || $NameSpace || 'Particulars>' || $Social-InsuranceIdentification || $EmployeeNumber || $Lastname  || $Firstname
                 Let $Particular_XML2 = $Sex ||  $DOB || $Nationality || $cilvilStatus || $Address || '</' || $NameSpace || 'Particulars>'
                 Let $Particular_XML = $Particular_XML1 || $Particular_XML2

           Let $Work_XML =  '<' || $NameSpace || 'Work>' || $ActivityRate || $WorkplaceCanton || '</' || $NameSpace || 'Work>'

                 Let $Identifier_XML =   $Particular_XML ||  $Work_XML

  
               Do Insert_Identifier
       
       
FROM PS_GPCH_RP_0001 RP,PS_NAMES NM  ! PS_GPCH_RP_TX07 TX07
Where RP.COMPANY = $ptot_company
AND RP.PRD_END_DT BETWEEN $IASC_begdt AND $IASC_enddt
AND RP.EMPLID = NM.EMPLID
AND RP.EMPLID = $IASC_Emplid  
AND RP.GPCH_AL_CPAY_ENDDT = (Select MAX(A.PRD_END_DT) from PS_GPCH_RP_0001 A 
    where A.COMPANY =  $ptot_company
     and A.GPCH_RP_YEAR Between  $IASC_begdt and $IASC_enddt
                             and A.EMPLID = RP.EMPLID
                             and A.EMPL_RCD = RP.EMPL_RCD)
! AND RP.COMPANY = TX07.COMPANY
!AND RP.PRD_END_DT = TX07.PRD_END_DT
!AND RP.EMPLID = TX07.EMPLID
  
End-select



 



end-procedure
!**********************************************************************************************
Begin-Procedure GET_ADDRESS

 Let $ADD_TYPE = ' '
 Let $Address1 = ' ' 
      Let $Street   = ' '
      Let $Postbox  = ' '
  Let $ZIP-Code = ' '
    Let $City     = ' '

  


Begin-Select
A.ADDRESS_TYPE 

 Let $ADD_TYPE = &A.ADDRESS_TYPE

from PS_GPCH_TX_LAW_DTA A
Where A.EMPLID = $Emplid
AND A.EFFDT=(select max(B.EFFDT) from PS_GPCH_TX_LAW_DTA B where B.EFFDT <= $Ctl_End_Dt and B.EMPLID = A.EMPLID and A.COMPANY = B.COMPANY)
AND A.COMPANY = $ptot_company
End-Select

 If $ADD_TYPE = ' '

Begin-Select
ADDRESS_TYPE  

 Let $ADD_TYPE = &ADDRESS_TYPE


from PS_GPCH_SI_COMPANY 
where COMPANY = $IASC_Comp 
AND EFFDT = (Select MAX(A.EFFDT) from PS_GPCH_SI_COMPANY A 
Where A.COMPANY =$ptot_company 
  AND A.EFFDT <= $IASC_enddt)
End-Select

  
 Else
 End-If



  
    
Begin-Select 
ADDRESS1
ADDRESS2
POSTAL
CITY
STATE 

     Let $Address1 = &ADDRESS1
     Let $Address2 = &ADDRESS2
     Let $Postal      = LTRIM(RTRIM(&Postal,' '),' ') 
     Let $City         = &CITY
     Let $State        = LTRIM(RTRIM(&STATE,' '),' ')
      if  $State<>'AG'and $State<>'AI' and $State<>'AR' and $State<>'BE' and $State<>'BL' and $State<>'BS' and $State<>'FR' and $State<>'GE'
       and $State<>'GL' and $State<>'GR' and $State<>'JU' and $State<>'LU' and $State<>'NE' and $State<>'NW' and $State<>'OW' and $State<>'SG' and $State<>'SH'
       and $State<>'SO' and $State<>'SZ' and $State<>'TG' and $State<>'TI' and $State<>'VR' and $State<>'VD' and $State<>'VS' and $State<>'ZG' and $State<>'ZH'
       let $State='EX'
      end-if
      
    
    Let $Street   = '<' || $NameSpace || 'Street>' ||  LTRIM(RTRIM($Address1,' '),' ') || '</' || $NameSpace || 'Street>'
    Let $Postbox  = '<' || $NameSpace || 'Postbox>' ||  '</' || $NameSpace || 'Postbox>'
    Let $ZIP-Code = '<' || $NameSpace || 'ZIP-Code>' || LTRIM(RTRIM($Postal,' '),' ')  || '</' || $NameSpace || 'ZIP-Code>'
    Let $City     = '<' || $NameSpace || 'City>' || LTRIM(RTRIM($City,' '),' ') || '</' || $NameSpace || 'City>'
       if $Address1=''
        let  $Street=''
       end-if
     
 



from PS_ADDRESSES
where EMPLID = $Emplid
AND ADDRESS_TYPE = $ADD_TYPE
AND EFFDT = (Select MAX(EFFDT) from PS_ADDRESSES
                                  WHERE EMPLID = $Emplid
                                    AND ADDRESS_TYPE = $ADD_TYPE
                                    AND EFFDT <= $IASC_enddt )
End-Select

End-Procedure
!***************************************************************************************************
Begin-Procedure Insert_Identifier


Begin-Sql on-error=give_warning



DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_SI_PROV_CD=$ptot_providercd 
 AND GPCH_RC_PAY_YEAR = $ptot_year AND BEGIN_DT=$IASC_begdt AND END_DT=$IASC_enddt AND COMPANY = $ptot_company AND  EMPLID = $IASC_Emplid AND EMPL_RCD = #IASC_Emplrcd AND GPCH_SI_PROV_TYPE='0'

End-SQL

Begin-SQL

 
 


 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,$ptot_year,$ptot_company,'0',$ptot_providercd,$IASC_Emplid,#IASC_Emplrcd,$IASC_begdt,$IASC_enddt,1,$Identifier_XML)

End-SQL 

  

End-procedure



!**************************************************************************************

Begin-procedure xml-writefile
 show 'in write'
 
   If $IASC_PrintXML <> 'Y'
 let $IASC_crit1= ' AND IDNT.EMPLID = ''' || $IASC_Emplid_old || ''' '
 let $IASC_crit2= ' AND PER.EMPLID = ''' || $IASC_Emplid_old || ''' '
  End-if
  If $IASC_PrintXML = 'Y'
 let $IASC_crit1= ' AND IDNT.EMPLID = ''' || $IASC_Emplid || ''' '
 let $IASC_crit2= ' AND PER.EMPLID = ''' || $IASC_Emplid || ''' '
  End-if

 let $IASC_XML_Write=''




Begin-Select 

IDNT.GPCH_EG_PRSN_XML


  let $IASC_Identify_XML= &IDNT.GPCH_EG_PRSN_XML
 
  
   
from PS_GPCH_EG_PERSON IDNT
Where  IDNT.BEGIN_DT= $IASC_begdt
AND IDNT.END_DT= $IASC_enddt
AND IDNT.GPCH_SI_PROV_TYPE = '0'
[$IASC_crit1]

End-Select

Begin-Select 

PER.GPCH_EG_PRSN_XML


  let $IASC_Salary_XML= &PER.GPCH_EG_PRSN_XML
 
  
   
from PS_GPCH_EG_PERSON PER
Where  PER.BEGIN_DT= $IASC_begdt
AND PER.END_DT= $IASC_enddt
AND PER.GPCH_SI_PROV_TYPE = 'A'
[$IASC_crit2]

End-Select



let  $IASC_Employee_XML=$IASC_Identify_XML||$IASC_Salary_XML
  Write 20 from $IASC_Employee_XML

End-Procedure

!****************************************
!************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX01'
               do Get_Eng_GPCHTX01
               break
          when = 'GPCHTX02'
               do Get_Eng_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHTX01
               do Get_Eng_GPCHTX02
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX01'
               do Get_Ger_GPCHTX01
               break
          when = 'GPCHTX02'
               do Get_Ger_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHTX01
               do Get_Ger_GPCHTX02
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHTX01'
               do Get_Ita_GPCHTX01
               break
          when = 'GPCHTX02'
               do Get_Ita_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHTX01
               do Get_Ita_GPCHTX02
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX01'
               do Get_Fra_GPCHTX01
               break
          when = 'GPCHTX02'
               do Get_Fra_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHTX01
               do Get_Fra_GPCHTX02
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!***********************************************************************
#include 'gpchut01.sqc'
#include 'gpchut02.sqc'
#include 'gpchut04.sqc'  !get company informations
#include 'gpchut06.sqc'  !get run control parameter values
#include 'gpchut07.sqc'  !get Log
#include 'gpchut11.sqc'  !get Tax and Fak Values
#include 'gpchtx02.sqc'  !get Report Data
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'datemath.sqc'  !function for date-calculation
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'gpchtx1s.sqc'    ! Get Strings Values for GPCHTX01
#include 'gpchtx2s.sqc'    ! Get Strings Values for GPCHTX02
#include 'gpchglbs.sqc'    ! Get Strings Values for GPCHGLOB
