!***********************************************************************
!  GPMXIM19:  Instituto Mexicano Del Seguro Social,                    *
!             ARCHIVO DE IMPORTACION DE DATOS AFILIATORIOS             *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  31781263                                            *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 11
#define c3 41
#define c4 56
#define c5 71
#define c6 78
#define c7 89
#define c8 119
#define c9 126
#define c10 152
#define c11 157
#define c12 170
#define c98 158
#define c99 167

begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL - DELEGACIÓN DEL IMSS'  to $ReportTitle1
  move   'DATOS AFILIATORIOS'                                     to $ReportTitle2
  move   'GPMXIM19' to $ReportID
  display $ReportTitle1
  display $ReportTitle2
  display $ReportID
  show 'Ver.2020 PUM37.01'
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Select-Parameters
  do Get-Company-Data-Mex
  do OPEN-FILE
  display ''
  display 'TRABAJADORES IMPROCEDENTES - | DATOS INVÁLIDOS |'
  Do Report
  close 1
end-procedure

!********************************************************
begin-procedure Select-Parameters
begin-select
SUARNCTL.OPRID
SUARNCTL.RUN_CNTL_ID
SUARNCTL.GPMX_INITIAL_LOAD
SUARNCTL.BEGIN_DT
SUARNCTL.END_DT
SUARNCTL.ESTABID
SUARNCTL.COMPANY
SUARNCTL.GPMX_CAPPED
SUARNCTL.LOCATION
SUARNCTL.BUSINESS_UNIT
SUARNCTL.GPMX_ESTABID_OPTN

  let $BegDt   = Rtrim(&SUARNCTL.BEGIN_DT, ' ')
  let $EndDt   = Rtrim(&SUARNCTL.END_DT, ' ')
  let $Company = Rtrim(&SUARNCTL.COMPANY, ' ')
  let $Estabid = rtrim(&SUARNCTL.ESTABID,' ')
  let $Capped  = rtrim(&SUARNCTL.GPMX_CAPPED,' ')
  let $Initial_Load = &SUARNCTL.GPMX_INITIAL_LOAD
  let $RCLocation   = Rtrim(&SUARNCTL.LOCATION, ' ')
  let $RCBusinessUnit = Rtrim(&SUARNCTL.BUSINESS_UNIT, ' ')
  Let $Estab_Opt      = &SUARNCTL.GPMX_ESTABID_OPTN

FROM  PS_GPMX_RC_SUA001  SUARNCTL
WHERE SUARNCTL.OPRID = $Prcs_OprID
      AND SUARNCTL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
Do CreateWhereClause
end-procedure

!********************************************************
begin-heading 10
  print     'PeopleSoft'        (1,1)  center
  uppercase $ReportTitle1
  print     $ReportTitle1       (2,1)  center
  uppercase $ReportTitle2
  print     $ReportTitle2       (3,1)  center
  
  print 'Reporte:'              (4,1)
  print $ReportID               (,25)
  print 'Página:'               (,{c98})
  page-number                   (,{c99})
  
  print 'Compañía:'             (5,1)
  Let $CompanyName = upper($CompanyName)
  print $CompanyName            (,25)
  print 'Fecha:'                 (,{c98})
  print $ReportDate              (,{c99})
  
  if $print_Estab = 'Y'
    print 'Registro Patronal:'   (6,1)
    print $Estabid               (,25) edit XXXXXXXXXX-X
    Let $Estab_Name = upper($Estab_Name)
    print $Estab_Name            (,+2)
  else
    print ''                     (6,1)
  end-if  
  print 'Hora:'                 (,{c98})
  print $ReportTime             (,{c99})

  
  print '=' (+1,1,176) fill
  print 'Código'                 (+1,{c1})
  print 'Nombre del Empleado'    (,{c2})
  print 'Registro'               (,{c3})
  print 'No. Seguridad'          (,{c4})
  print 'Código'                 (,{c5})
  print 'Fecha'                  (,{c6})
  print 'Lugar/Clave'            (,{c7})
  print 'U.M.F.'                 (,{c8})
  print 'Ocupación'              (,{c9})
  print 'Sexo'                   (,{c10})
  Print 'Tipo'                   (,{c11})
  print 'Hora(s)'                (,{c12})
  print 'Empleado'               (+1,{c1})
  print 'Patronal IMSS'          (,{c3})
  print 'Social'                 (,{c4})
  print 'Postal'                 (,{c5})
  print 'Nacimiento'             (,{c6})
  print 'Nacimiento'             (,{c7})
  print 'Salario'                (,{c11})
  print '=' (+1,1,176) fill
end-heading

!********************************************************
begin-procedure Report
Let #Error = 0
Let #Total = 0
Let $Error = ''
#Debug show '$WhereClause: ' $WhereClause
 
begin-SELECT DISTINCT
A.EMPLID
   MOVE &A.EMPLID TO $Emplid
   print $Emplid (+1,{c1})   
NAM.LAST_NAME
  Move &NAM.LAST_NAME   to $EmpPat
NAM.SECOND_LAST_NAME
  Move &NAM.SECOND_LAST_NAME   to $EmpMat
NAM.FIRST_NAME
  Move &NAM.FIRST_NAME   to $EmpName
NAM.MIDDLE_NAME
  Move &NAM.MIDDLE_NAME   to $EmpMName
  
  Let $Empl_name = RTRIM($EmpPat,' ') || ' ' || RTRIM($EmpMat, ' ') || ' ' || RTRIM($EmpName,' ') || ' ' || RTRIM($EmpMName,' ')
  Let $Empl_name = upper($Empl_name)
  print $Empl_Name (,{c2},29)

A.ESTABID  
A.LOCATION
   Let $Location = Rtrim(&A.LOCATION, ' ')
   
   If $Estab_Opt = 'L'
     do  Process-IMSSData
   Else
     Let $IMSSESTABID = Rtrim(&A.ESTABID, ' ')
     do Check-Characters($IMSSESTABID,$IMSSESTABID)
   End-if
     
   do Get-EmpData
   do GetMedicalUnit
   do Get-ImssID
   
   print $IMSSESTABID    (,{c3}) edit XXXXXXXXXX-X
   
   LET #Length = 11
   LET $FieldIn = $IMSS_ID
   DO FILL_LEADING
   LET $IMSS_ID = $FieldOut 
   print $IMSS_ID        (,{c4})
   
   LET #Length = 5
   LET $FieldIn = $POSTAL
   DO FILL_LEADING
   LET $POSTAL = $FieldOut
   print $POSTAL         (,{c5},5)
   
   do Convert-To-DTU-Date($BIRTHDATE,$BIRTHDATEP)
   Do dtu-parse-date ($BIRTHDATEP,#dtu-yr,#dtu-mo,#dtu-da)
   move  #dtu-yr to $dtu-yr 9999
   move  #dtu-da to $dtu-da 09
   move  #dtu-mo to $dtu-mo 09
   Let   $BIRTHDATEP = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
   Let   $BIRTHDATEPF = $dtu-da || $dtu-mo ||$dtu-yr

   print $BIRTHDATEP     (,{c6})
   print $STATE          (,{c7})
   print '/'             (,)
   print $BIRTHSTATE     (,,29)
   
   LET #Length = 3
   LET $FieldIn = $MEDICALUNIT
   DO FILL_LEADING
   LET $MEDICALUNIT = $FieldOut
   print $MEDICALUNIT    (,{c8},3)

J.DESCR
J.SETID
J.JOBCODE
J.EFFDT
   Let $JOBDESCR = RTRIM(&J.DESCR, ' ')
   Let $JOBSETID = &J.SETID
   Let $JOBCODE = &J.JOBCODE
   Let $JEFFDT = &J.EFFDT
   Do Get-JobDescrLang
   print $JOBDESCR       (,{c9},24)
   print $SEX            (,{c10})
  
JBJR.SALARY_TYPE_MEX
    Let $SalaryType = &JBJR.SALARY_TYPE_MEX
    move '0' to $SalaryTypeF
    evaluate $SalaryType
      when = '0010'
        move '0' to $SalaryTypeF
        Let #HOURS = 0
        break
      when = '0030'
        move '1' to $SalaryTypeF
        Let #HOURS = 0
        break
      when = '0020'
        move '2' to $SalaryTypeF
        break
    end-evaluate
    Do GetSalaryDescr
    print $SalaryDescr     (,{c11},12)
    
A.STD_HOURS
   Let $HOURS = '0'
   Move &A.STD_HOURS To $HOURS
   print $HOURS           (,{c12})
   
   Let #Total = #Total + 1
   do Validate-Line
   if $Insert = 'False'
      Let #Error = #Error + 1
   else
      do write-rcd
   end-if

FROM    PS_JOB             A,
        PS_NAMES         NAM,
        PS_GPMX_SDI_WA     T,
        PS_JOBCODE_TBL     J,
        PS_JOB_JR       JBJR

WHERE   A.EMPLID    = JBJR.EMPLID
AND     A.EFFDT     = JBJR.EFFDT
AND     A.EMPL_STATUS  = 'A'
AND     JBJR.EMPL_RCD  = A.EMPL_RCD 
AND     JBJR.EFFSEQ    = A.EFFSEQ
AND     NAM.EMPLID    = A.EMPLID
AND     NAM.NAME_TYPE = 'PRI'
AND     NAM.EFFDT   = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                        WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                          AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                          AND NAM_ED.EFFDT <= $EndDt)
AND     A.EMPLID    = T.EMPLID
AND     A.COMPANY   = $Company
AND     J.JOBCODE   = A.JOBCODE
AND     J.SETID     = A.SETID_JOBCODE
AND     A.EFFSEQ    = (SELECT MAX(AA.EFFSEQ) FROM PS_JOB AA
                        WHERE AA.EMPLID = A.EMPLID
                        AND   AA.EFFDT  = A.EFFDT
                        AND   AA.EMPL_RCD = A.EMPL_RCD)
AND     T.SEQNUM    = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                       WHERE T2.EMPLID      = T.EMPLID
                       AND   T2.EMPL_RCD    = T.EMPL_RCD
                       AND   T2.GP_PAYGROUP = T.GP_PAYGROUP
                       AND   T2.EFFDT       = T.EFFDT
                       AND   T2.SUA_REASON_MEX = T.SUA_REASON_MEX)
AND     T.SUA_REASON_MEX IN ('0010','0040')
AND     J.EFFDT = (SELECT MAX(J2.EFFDT) FROM PS_JOBCODE_TBL J2
                   WHERE J2.JOBCODE  = J.JOBCODE
                   AND   J2.SETID = J.SETID
[$WhereClause]
end-SELECT
move #Error to $cError 9,999,999,999
move #Total to $cTotal 9,999,999,999
show '' $cError ' trabajadores improcedentes.'
show '' $cTotal ' trabajadores procesados.'
print $cError (+2,{c1})
print ' trabajadores improcedentes.' (,)
print $cTotal (+1,{c1})
print ' trabajadores procesados.' (,)

end-procedure

!********************************************************
BEGIN-PROCEDURE OPEN-FILE
  LET $FILE_NAME =  '{FILEPREFIX}' || 'afil.txt' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  OPEN $FILE_NAME AS 1 FOR-WRITING RECORD=80:FIXED STATUS=#FILESTAT
END-PROCEDURE OPEN-FILE


!****************************************************************************
Begin-Procedure CreateWhereClause
 let $WhereClause = ''
 let $WhereClause = $WhereClause || ' AND J2.EFFDT <= '''|| $EndDt || ''')'
 let $WhereClause = $WhereClause || ' AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = A.EMPLID AND EMPL_RCD = A.EMPL_RCD'
 let $WhereClause = $WhereClause || ' AND EFFDT <= '''|| $EndDt || ''') AND A.ACTION_REASON IN (SELECT AC1.ACTION_REASON'
 let $WhereClause = $WhereClause || ' FROM PS_ACT_RSN_TBL_MEX AC1, PS_ACTN_REASON_TBL AC2 WHERE AC1.IMS_PRN_FORM_MEX IN (''0010'',''0040'')'
 let $WhereClause = $WhereClause || ' AND AC1.ACTION = AC2.ACTION AND AC1.ACTION_REASON = AC2.ACTION_REASON'
 let $WhereClause = $WhereClause || ' AND AC2.EFF_STATUS = ''A'' AND AC2.EFFDT = (SELECT MAX(AC3.EFFDT)'
 let $WhereClause = $WhereClause || ' FROM PS_ACTN_REASON_TBL AC3 WHERE AC3.ACTION = AC2.ACTION'
 let $WhereClause = $WhereClause || ' AND AC3.ACTION_REASON = AC2.ACTION_REASON' 
 let $WhereClause = $WhereClause || ' AND AC3.EFFDT <= '''|| $EndDt ||'''))'
 
 If rtrim($EndDt,' ') <> '' AND  rtrim($BegDt,' ') <> '' AND rtrim($Initial_Load,' ') = '0010'
     let $WhereClause = $WhereClause || ' AND T.EFFDT   BETWEEN ' || '''' || $BegDt || '''' ||  ' AND ' || '''' ||  $EndDt || ''''
 Else
     If rtrim($Initial_Load, ' ') = '0020'
        let $WhereClause = $WhereClause || ' AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
        let $WhereClause = $WhereClause || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
        let $WhereClause = $WhereClause || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ')'     
     End-if
 End-If
 If Rtrim($Estabid, ' ') <> ''
  If $Estab_Opt = 'L'
    let $WhereClause = $WhereClause || ' AND A.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
    let $WhereClause = $WhereClause || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
    let $WhereClause = $WhereClause || ' AND LOC.SETID = A.SETID_LOCATION AND LOC.LOCATION = A.LOCATION'
    let $WhereClause = $WhereClause || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
    let $WhereClause = $WhereClause || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'
  Else
    let $WhereClause = $WhereClause || ' AND A.ESTABID = ''' || $Estabid || ''' ' 
  End-if  
 end-if
  
 If Rtrim($RCLocation, ' ') <> ''
  let $WhereClause = $WhereClause || ' AND A.LOCATION = ' || '''' ||$RCLocation || ''''
 end-if  

 If Rtrim($RCBusinessUnit, ' ') <> ''
    let $WhereClause = $WhereClause || ' AND A.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
 end-if  
end-procedure

!********************************************************
begin-procedure Get-EmpData
Let $POSTAL = ''
Let $BIRTHDATE = ''
Let $BIRTHSTATE = ''
Let $SEX = ''
begin-SELECT 
AD.POSTAL
PE.BIRTHDATE
PE.BIRTHSTATE
PD.SEX
  Let $POSTAL = Rtrim(&AD.POSTAL, ' ')
  Let $BIRTHDATE = &PE.BIRTHDATE
  Let $BIRTHSTATE = Rtrim(&PE.BIRTHSTATE, ' ')
  Do Get-StateName
  Do Get-StateNum
  Let $SEX = Rtrim(&PD.SEX, ' ')
FROM PS_ADDRESSES AD, PS_PERSON PE,
PS_PERS_DATA_EFFDT PD
WHERE AD.EMPLID = $Emplid
AND AD.EMPLID = PE.EMPLID
AND AD.EMPLID = PD.EMPLID
AND AD.EFFDT <= (SELECT MAX(EFFDT) FROM PS_ADDRESSES
WHERE AD.EMPLID = EMPLID
AND AD.ADDRESS_TYPE = ADDRESS_TYPE
AND EFFDT <= $EndDt)
AND PD.EFFDT = (SELECT MAX(EFFDT) FROM PS_PERS_DATA_EFFDT
                WHERE PD.EMPLID = EMPLID
                AND EFFDT <= $EndDt)
end-select
end-procedure

!********************************************************
begin-procedure Process-IMSSData
begin-SELECT
IMSS.ESTABID,
  Let $IMSSESTABID = Rtrim(&IMSS.ESTABID, ' ')
FROM  PS_ESTAB_TBL IMSS,
      PS_LOCATION_TBL LOC
WHERE IMSS.ESTABID = LOC.ESTABID
  AND LOC.LOCATION = $Location
  AND LOC.EFFDT = (SELECT MAX(L.EFFDT)
                   FROM   PS_LOCATION_TBL L
                   WHERE  L.LOCATION = LOC.LOCATION)
  AND IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  ESTABID = IMSS.ESTABID)
end-SELECT
do Check-Characters($IMSSESTABID,$IMSSESTABID)
end-procedure

!********************************************************
begin-procedure Get-StateName
Let $STATE = ''
begin-Select
ST.DESCR
  Let $STATE = Rtrim(&ST.DESCR, ' ') 
FROM PS_STATE_NAMES_TBL  ST
WHERE ST.COUNTRY = 'MEX'
AND   ST.STATE   = $BIRTHSTATE
end-select
do Check-Characters($STATE,$STATE)
end-Procedure

!********************************************************
begin-procedure Get-StateNum
Let $BIRTHSTATENUM = ''
begin-Select
ST2.NUMERIC_CD
  Let $BIRTHSTATENUM = Rtrim(&ST2.NUMERIC_CD, ' ') 
FROM PS_STATE_NAMES_TBL  ST2
WHERE ST2.COUNTRY = 'MEX'
AND   ST2.STATE   = $BIRTHSTATE
end-select
end-Procedure

!**********************************************************
begin-procedure GetMedicalUnit
Let $MEDICALUNIT = '000'
begin-select
UMF.MED_REC_CD_MEX
    Let $MEDICALUNIT = Rtrim(&UMF.MED_REC_CD_MEX, ' ')
FROM PS_PERS_DATA_MEX UMF 
WHERE UMF.EMPLID = $Emplid
AND UMF.EFFDT = (SELECT MAX(EFFDT) FROM PS_PERS_DATA_MEX
                WHERE EMPLID = UMF.EMPLID 
                AND EFFDT <= $EndDt)
end-select
end-procedure

!**********************************************************
begin-procedure Get-ImssID
Let $IMSS_ID = '00000000000'
begin-select
IM.NATIONAL_ID
    let $IMSS_ID = &IM.NATIONAL_ID
FROM PS_PERS_NID IM WHERE IM.NATIONAL_ID_TYPE='IMSS' AND IM.EMPLID=$Emplid AND IM.COUNTRY='MEX'
end-select
end-procedure

!**********************************************************
begin-procedure Get-JobDescrLang
Let $JOBDESCR = ''
begin-select
JL1.DESCR
    Let $JOBDESCR = RTRIM(&JL1.DESCR, ' ')
FROM PS_JOBCODE_TBL JL1
WHERE JL1.SETID = $JOBSETID
AND JL1.JOBCODE = $JOBCODE
AND JL1.EFFDT = $JEFFDT
end-select
begin-select
JL.DESCR
    Let $JOBDESCR = RTRIM(&JL.DESCR, ' ')
FROM PS_JOBCODE_LANG JL
WHERE JL.SETID = $JOBSETID
AND JL.JOBCODE = $JOBCODE
AND JL.EFFDT = $JEFFDT
AND LANGUAGE_CD = $curr_language_cd
end-select
do Check-Characters($JOBDESCR,$JOBDESCR)
end-procedure

!**********************************************************
begin-procedure GetSalaryDescr
Let $SalaryDescr = ''
begin-select
XL.XLATSHORTNAME
   Let $SalaryDescr = Rtrim(&XL.XLATSHORTNAME,' ')
FROM PSXLATITEM XL 
WHERE XL.FIELDNAME = 'SALARY_TYPE_MEX'
AND XL.FIELDVALUE = $SalaryType
AND XL.EFF_STATUS = 'A'
AND XL.EFFDT <= (SELECT MAX(XL2.EFFDT) FROM PSXLATITEM XL2 WHERE
XL.FIELDNAME = XL2.FIELDNAME
AND XL.FIELDVALUE = XL2.FIELDVALUE
AND XL2.EFFDT <= $EndDt)
end-select
begin-select
XLL.XLATSHORTNAME
   Let $SalaryDescr = Rtrim(&XLL.XLATSHORTNAME,' ')
FROM PSXLATITEMLANG XLL 
WHERE XLL.FIELDNAME = 'SALARY_TYPE_MEX'
AND XLL.FIELDVALUE = $SalaryType
AND XLL.EFFDT <= (SELECT MAX(XLL2.EFFDT) FROM PSXLATITEM XLL2 WHERE
XLL.FIELDNAME = XLL2.FIELDNAME
AND XLL.FIELDVALUE = XLL2.FIELDVALUE
AND XLL2.EFFDT <= $EndDt)
AND LANGUAGE_CD = $curr_language_cd
end-select
end-procedure

!**********************************************************
Begin-Procedure FILL_LEADING
  LET $FieldIn  = RTRIM($FieldIn,' ')
  LET $FieldIn  = LTRIM($FieldIn,' ')
  LET $FieldOut = ''
  LET #FieldLength = LENGTH($FieldIn) 
  LET #SPACES = #Length - #FieldLength
  LET #CONT = 1
  WHILE #CONT <= #SPACES
      LET $FieldOut = LTRIM($FieldOut,' ') || '0'
      ADD 1 TO #CONT
  END-WHILE
  LET $FieldOut = $FieldOut || $FieldIn
  Let $FieldIn = ''
End-Procedure FILL_LEADING

!**********************************************************
begin-procedure Validate-Line
Let $Insert = 'True'
Let $Error = ''
if rtrim($IMSSESTABID , ' ') = ''
   Let $Error = $Error || ' | Registro Patronal' 
   Let $Insert = 'False'
end-if
if rtrim($IMSS_ID , ' ') = '00000000000'
   Let $Error = $Error || ' | No. Segurdidad Social' 
   Let $Insert = 'False'
end-if
if rtrim($POSTAL , ' ') = ''
   Let $Error = $Error || ' | Código Postal'
   Let $Insert = 'False'
end-if
if rtrim($BIRTHDATEPF , ' ') = ''
   Let $Error = $Error || ' | Fecha de Nacimiento'
   Let $Insert = 'False'
end-if
if rtrim($STATE , ' ') = ''
   Let $Error = $Error || ' | Lugar de Nacimiento'
   Let $Insert = 'False'
end-if
if rtrim($MEDICALUNIT , ' ') = ''
   Let $Error = $Error || ' | U.M.F.' 
   Let $Insert = 'False'
end-if
if rtrim($JOBDESCR , ' ') = ''
   Let $Error = $Error || ' | Ocupación'
   Let $Insert = 'False'
end-if
if rtrim($SEX , ' ') = '' or rtrim($SEX, ' ') = 'U'
   Let $Error = $Error || ' | Sexo'
   Let $Insert = 'False'
end-if
if rtrim($SalaryType, ' ') = '0020' and #HOURS > 0 and #HOURS < 8
   Let $Error = $Error || ' | Hora(s)'
   Let $Insert = 'False'
end-if
 
if $Insert = 'False'
   Let $Error = rtrim($Emplid, ' ') || $Error
   show $Error
end-if
end-procedure Validate-Line

!**********************************************************
begin-procedure Write-Rcd
WRITE 1 FROM $IMSSESTABID:11     -
             $IMSS_ID:11         -
             $POSTAL:5           -
             $BIRTHDATEPF:8      -
             $STATE:25           -
             $BIRTHSTATENUM:2    -
             $MEDICALUNIT:3      -
             $JOBDESCR:12        -
             $SEX:1              -
             $SalaryTypeF:1      -
             $HOURS:1
end-procedure Write-Rcd

!**********************************************************
begin-procedure Check-Characters($Check, :$Check)
 Let $Check = translate($Check,'''',' ')
 Let $Check = translate($Check,'"',' ')
 Let $Check = translate($Check,'#',' ')
 Let $Check = translate($Check,'$',' ')
 Let $Check = translate($Check,'%',' ')
 Let $Check = translate($Check,'&',' ')
 Let $Check = translate($Check,'/',' ')
 Let $Check = translate($Check,'(',' ')
 Let $Check = translate($Check,')',' ')
 Let $Check = translate($Check,'*',' ')
 Let $Check = translate($Check,'+',' ')
 Let $Check = translate($Check,',',' ')
 Let $Check = translate($Check,';',' ')
 Let $Check = translate($Check,':',' ')
 Let $Check = translate($Check,'-',' ')
 Let $Check = translate($Check,'_',' ')
 Let $Check = translate($Check,'?',' ')
 Let $Check = translate($Check,'@',' ')
 Do convert-to-char($Check,$Check)
 uppercase $Check
end-procedure Check-Characters

#include 'reset.sqc'       !Reset printer procedure
#include 'curdttim.sqc'    !Get-Current-DateTime procedure
#include 'datetime.sqc'    !Routines for date and time formatting
#include 'number.sqc'      !Routines to format numbers
#include 'stdapi.sqc'      !Update Process API
#Include 'datemath.sqc'    !Routines for date math
#include 'getcomex.sqc'    !Get-Company-data-Mex
#include 'ctxrnctl.sqc'
