!***********************************************************************
!  GP00PK02:  Generate GP Non-Rule Compare Report                    *
!***********************************************************************
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!          $Date:  2014/05/29:10:53:53                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!***********************************************************************
! Program Description                                                  *
! -------------------                                                  *
!                                                                      *
! This report generates the compare report for non-rules package for   *
! a particular country                                                 *
!                                                                      *
!***********************************************************************
!  Modification History:                                               *
!                                                                      *
!  Date         Incident                                               *
! ----------    -----------                                            *
! DD/MM/YYYY                                                           *

!***********************************************************************

#include 'setenv.sqc'    !Set environment
!#include 'setup32.sqc'
#include 'rellang.sqc'

begin-setup
  #include 'setupdb.sqc'
  
  declare-layout report2_layout
    paper-size    = (19,11.69)
    orientation   = LANDSCAPE
    line-height   = 14
    max-columns   = 188
    left-margin   = .4
    bottom-margin = .15
    top-margin    = 0.4
  end-declare
  
  declare-report report2
    layout = report2_layout
  end-declare
end-setup

begin-report
   do Init-Report
   do Process-Main
   do stdapi-term
end-report

!***********************************************************************
!  Procedure: Init Report                                              *
!***********************************************************************
begin-procedure Init-Report

   move 'GP00PK02' to $ReportID
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Init
   do Get-Language-Codes
   
   let $Lang_CD=''
   do Get-PSOptions-Language($Lang_CD)
   if $curr_language_cd = ''
       let $curr_language_cd=$Lang_CD
   end-if
   
   do Get_Translat_Info
   do Init_Val
   do Init-Variables
end-procedure !Init-Report


!***********************************************************************
! Procedure:    Init_Val                                               *
!***********************************************************************
begin-procedure   Init_Val
   let #Heading_Font      = 4
   let #HeadingPntSize    = 13
   let #StdPntSize        = 9
   let #dataPntSize       = 9
end-procedure !Init_Val

!************************************************************************
!  Procedure: Init-Variables                                              *
!************************************************************************
Begin-Procedure Init-Variables

  let $Country_Like = ''

BEGIN-SELECT
CTY.COUNTRY_2CHAR 

     MOVE &CTY.COUNTRY_2CHAR TO $Country_Like
    
FROM PS_COUNTRY_TBL CTY
WHERE CTY.COUNTRY = $prcs_run_cntl_id
END-SELECT

End-Procedure !Init-Variables


!************************************************************************
!  Procedure: Process-Main                                              *
!************************************************************************
Begin-Procedure Process-Main

   let $RecWhereClause = ' AND REC1.GP_PKG_ID LIKE '''|| $Country_Like ||'%'''
   let $ElmWhereClause = ' ELM.GP_PKG_ID LIKE '''|| $Country_Like ||'%'''
   do Print-Report-Header
   do Print-NonRule-Compare-Rpt
End-Procedure !Process-Main

!************************************************************************
!  Procedure: Print-Report-Header                                       *
!************************************************************************
Begin-Procedure Print-Report-Header

   use-report report2   
   alter-printer font = #Heading_Font point-size = #HeadingPntSize
   print $Report_Title   (1,80) bold
   print $Report_Title1  (+1,75) bold
End-Procedure !Print-Report-Header


!************************************************************************
!  Procedure: Print-NonRule-Compare-Rpt                                 *
!************************************************************************
Begin-Procedure Print-NonRule-Compare-Rpt
   print $Rec_detail_lbl (+2,80) bold underline
   let #pageno = 1
   do Print-Record-Header
   do Print-Record-Detail

   new-page
   
   use-report report2 
   alter-printer font = #Heading_Font point-size = #HeadingPntSize
   print $Ele_detail_lbl  (+2,80) bold underline
   
   do Print-Element-Header
   do Print-Element-Detail
End-Procedure !Print-NonRule-Compare-Rpt


!************************************************************************
!  Procedure: Print-Record-Header                                       *
!************************************************************************
Begin-Procedure Print-Record-Header

   !print $Rec_detail_lbl (+2,80) bold underline
   use-report report2
   alter-printer font = #Heading_Font point-size = #StdPntSize

   let #depth1    = 1
   graphic (+2,7,172) box #depth1

   graphic (-1, 23, #depth1)  vert-line 1
   graphic (, 52, #depth1)  vert-line 1
   graphic (, 140, #depth1)  vert-line 1
   graphic (, 160, #depth1)  vert-line 1
   
   print $Pkd_id_lbl         (+1,9) bold
   print $Rec_name_lbl       (,24) bold
   print $Whr_clause_lbl     (,53) bold
   print $Whr_clsopt_lbl     (,141) bold
   print $Rec_exists_lbl     (,161) bold

End-Procedure !Print-Record-Header

!************************************************************************
!  Procedure: Print-Record-Detail                                       *
!************************************************************************
Begin-Procedure Print-Record-Detail

let $Package_id=''
let #spanpage = 0

BEGIN-SELECT
REC.GP_PKG_ID
REC.RECNAME
REC.WHERE_CLAUSE_OPTN
REC.GRP_WHERE_CLS
REC1.PKG_CREATE_DTTM 

   move &REC.GP_PKG_ID to $Package_id
   do Print-Record-Data

FROM PS_GP_NRPKG_AD_REC REC, PS_GP_NRPKG_AD_DFN REC1 
WHERE REC.GP_PKG_ID = REC1.GP_PKG_ID 
[$RecWhereClause]

END-SELECT


   if ltrim(rtrim($Package_id,' '),' ') = ''
       do Print-Dummy-Record-Data
   end-if

End-Procedure !Print-Record-Detail


!************************************************************************
!  Procedure: Print-Record-Data                                       *
!************************************************************************
Begin-Procedure Print-Record-Data

   let $WhereClauseOptS = ''
   let $WhereClauseOptL = ''
   let $recName = ''
   let $RecExists = ''
   let $Fldname = 'WHERE_CLAUSE_OPTN'

   if $curr_language_cd <> $Lang_CD
      do Get-XLATLANG-Desc ($FldName, &REC.WHERE_CLAUSE_OPTN, $curr_language_cd,$WhereClauseOptS, $WhereClauseOptL)
   else
      do Get-XLAT-Desc ($FldName, &REC.WHERE_CLAUSE_OPTN, $WhereClauseOptS, $WhereClauseOptL)
   end-if

BEGIN-SELECT
R1.RECNAME
   move &R1.RECNAME to $recName

FROM PSRECDEFN R1
WHERE R1.RECNAME = &REC.RECNAME
END-SELECT

   if ltrim(rtrim($recName,' '),' ') = ''
        if $curr_language_cd <> $Lang_CD
            do Get-Msg-CatalogLang(124, 4,$curr_language_cd, $RecExists)
        else
            do Get-Msg-Catalog(124, 4, $RecExists)
        end-if
   else
        if $curr_language_cd <> $Lang_CD
            do Get-Msg-CatalogLang(124, 3, $curr_Language_Cd,$RecExists)
        else
            do Get-Msg-Catalog(124, 3, $RecExists)
        end-if
    end-if
   
    let #depth = 0
    let #curline = 0
    let #tempdepth = wrapdepth(&REC.GRP_WHERE_CLS,100,1,'','')
    let $sPkgid = &REC.GP_PKG_ID
    let $sRecname = &REC.RECNAME

    if  #current-line  >= 50
       new-page
       do Print-Record-Header
       let #pageno = #pageno + 1
    end-if

   if (50 - #current-line) >= #tempdepth 
      let #depth = #tempdepth 
   else
      let #depth = 50 - #current-line
   end-if

   let #tempdepth = #tempdepth - #depth

   if #spanpage > 0 
      graphic (+2,7,172) box #depth
   else
      graphic (+1,7,172) box #depth
   end-if

   graphic (-1, 23, #depth)  vert-line 1
   graphic (, 52, #depth)  vert-line 1
   graphic (, 140, #depth)  vert-line 1
   graphic (, 160, #depth)  vert-line 1

   use-report report2
   alter-printer font = #Heading_Font point-size = #dataPntSize
   let #noofChars = (#depth) * 100
    
   let $SQLWhere = substr(&REC.GRP_WHERE_CLS,1,#noofChars)
   print $sPkgid                (+1,9) 
   print $sRecname              (,24) 
   print $RecExists             (,161) 
   print $WhereClauseOptL       (,141) wrap 100 #depth
   print $SQLWhere              (,53) wrap 100 #depth
   let #spanpage = 0
 
   while #tempdepth > 0 
       if #tempdepth >= 41
           let #depth = 41
           let #tempdepth = #tempdepth - 41
       else
           let #depth = #tempdepth
           let  #tempdepth = 0
       end-if

       new-page
       do Print-Record-Header
       let #pageno = #pageno + 1
       let #curline = #current-line + #depth
       let #startpos = #noofChars + 1
       graphic (+1,7,172) box #depth

       graphic (-1, 23, #depth)  vert-line 1
       graphic (, 52, #depth)  vert-line 1
       graphic (, 140, #depth)  vert-line 1
       graphic (, 160, #depth)  vert-line 1

       use-report report2
       alter-printer font = #Heading_Font point-size = #dataPntSize
       let #noofChars = (#depth) * 100
       let $SQLWhere = substr(&REC.GRP_WHERE_CLS,#startpos,#noofChars)

       print ''                     (+1,9) 
       print ''                     (,24) 
       print ''                     (,161) 
       print ''                     (,141) wrap 100 #depth
       print $SQLWhere              (,53) wrap 100 #depth

       if #depth > 1
          let #spanpage = 1
       end-if

     end-while

End-Procedure !Print-Record-Data


!************************************************************************
!  Procedure: Print-Dummy-Record-Data                                   *
!************************************************************************
Begin-Procedure Print-Dummy-Record-Data

   let #depth    = 2

   graphic (+1,7,172) box #depth

   graphic (-1, 23, #depth)  vert-line 1
   graphic (, 52, #depth)  vert-line 1
   graphic (, 140, #depth)  vert-line 1
   graphic (, 160, #depth)  vert-line 1

   print ' '     (,9) bold
   print ' '     (,24) bold
   print ' '     (,53) bold
   print ' '     (,141) bold
   print ' '     (,161) bold

End-Procedure !Print-Dummy-Record-Data

!************************************************************************
!  Procedure: Get-Msg-CatalogLang                                       *
!************************************************************************
Begin-Procedure Get-Msg-CatalogLang(#MsgSet, #MsgNo,$Language, :$MsgText)

BEGIN-SELECT
MSGL.MESSAGE_TEXT 

   move &MSGL.MESSAGE_TEXT to $MsgText

FROM PSMSGCATLANG MSGL
WHERE MSGL.LANGUAGE_CD=$Language
AND MSGL.MESSAGE_SET_NBR = #MsgSet 
AND MSGL.MESSAGE_NBR = #MsgNo

END-SELECT

End-Procedure !Get-Msg-CatalogLang

!************************************************************************
!  Procedure: Get-Msg-Catalog                                           *
!************************************************************************
Begin-Procedure Get-Msg-Catalog(#MsgSet, #MsgNo, :$MsgText)

BEGIN-SELECT
MSG.MESSAGE_TEXT 

   move &MSG.MESSAGE_TEXT to $MsgText

FROM PSMSGCATDEFN MSG
WHERE MSG.MESSAGE_SET_NBR = #MsgSet 
AND MSG.MESSAGE_NBR = #MsgNo

END-SELECT

End-Procedure !Get-Msg-Catalog

!************************************************************************
!  Procedure: Print-Element-Header                                      *
!************************************************************************
Begin-Procedure Print-Element-Header

   use-report report2
   alter-printer font = #Heading_Font point-size = #StdPntSize

   let #depth    = 2

   graphic (+2, 7,172) box #depth

   graphic (-1, 18, #depth)  vert-line 1
   graphic (, 29, #depth)  vert-line 1
   graphic (, 50, #depth)  vert-line 1
   graphic (, 71, #depth)  vert-line 1
   graphic (, 92, #depth)  vert-line 1
   graphic (, 113, #depth)  vert-line 1
   graphic (, 134, #depth)  vert-line 1
   graphic (, 161, #depth)  vert-line 1

   print $Pkd_id1_lbl        (+1,8) bold
   print $PIN_lbl            (,19) bold
   print $PIN_lbl            (,30) bold
   print $PIN_lbl            (,51) bold
   print $PIN_lbl            (,72) bold
   print $PIN_lbl            (,93) bold
   print $Upg_Action_lbl     (,114) bold
   print $Comments_lbl       (,135) bold
   print $Target_PIN_lbl     (,162) bold 

   print $Pkd_id2_lbl        (+1,8) bold
   print $PIN_Num_lbl        (,19) bold
   print $PIN_Code_lbl       (,30) bold
   print $PIN_name_lbl       (,51) bold
   print $PIN_Type_lbl       (,72) bold
   print $PIN_Owner_lbl      (,93) bold
   print $Upg_Action1_lbl    (,114) bold
   print $Target_PIN1_lbl    (,162) bold 
   
End-Procedure !Print-Element-Header


!************************************************************************
!  Procedure: Print-Element-Detail                                      *
!************************************************************************
Begin-Procedure Print-Element-Detail 

let #line_before = 0
let $Package_id=''

BEGIN-SELECT
ELM.GP_PKG_ID
ELM.PIN_NUM
ELM.PIN_CODE
ELM.PIN_NM
ELM.PIN_TYPE
ELM.PIN_OWNER
ELM.GP_PKG_UPG_ACTION
ELM.GP_PKG_FAIL_REASON
ELM.PIN_NUM_TGT

      move &ELM.GP_PKG_ID to $Package_id
      do Get-Pin-Detail
      if $curr_language_cd <> $Lang_CD
          do Get-Pin-TypeLng-Detail
      else
          do Get-Pin-Type-Detail
      end-if

      do Get-Other-Element-Detail
      do Print-Element-Data

FROM PS_GP_NRPKG_AD_ELM ELM 
WHERE [$ElmWhereClause]

END-SELECT

   if ltrim(rtrim($Package_id,' '),' ') = ''
       do Print-Element-Dummy-Data
   end-if
End-Procedure !Print-Element-Detail 

!************************************************************************
!  Procedure: Get-Pin-Detail                                            *
!************************************************************************
Begin-Procedure Get-Pin-Detail 
    let $PinCode = ''
    let $FldName = 'GP_PKG_FAIL_REASON'
    let $FldValue = 'X'
    let $ShortVal = ''
    let $LongVal = ''
    let $targetpin='0'
 
BEGIN-SELECT
PIN.PIN_CODE
PIN.PIN_NUM
PIN.PIN_TYPE 
   
   move &PIN.PIN_CODE to $PinCode
   let $targetpin = to_char(&PIN.PIN_NUM)

   if ltrim(rtrim($PinCode,' '),' ') <> ''
       if &PIN.PIN_TYPE <> &ELM.PIN_TYPE
             let $FldValue = 'T'
             if $curr_language_cd <> $Lang_CD
                do Get-XLATLANG-Desc ($FldName, $FldValue, $curr_language_cd,$ShortVal, $LongVal)
             else
                do Get-XLAT-Desc ($FldName, $FldValue, $ShortVal, $LongVal)
             end-if
      end-if
   end-if

FROM PS_GP_PIN PIN
WHERE PIN.PIN_CODE = &ELM.PIN_CODE

END-SELECT

   if ltrim(rtrim($PinCode,' '),' ') = ''
      if $curr_language_cd <> $Lang_CD
           do Get-XLATLANG-Desc ($FldName, $FldValue, $curr_language_cd,$ShortVal, $LongVal)
      else
           do Get-XLAT-Desc ($FldName, $FldValue, $ShortVal, $LongVal)
      end-if
      
   end-if

End-Procedure !Get-Pin-Detail 


!************************************************************************
!  Procedure: Get-Pin-TypeLng-Detail                                    *
!************************************************************************
Begin-Procedure Get-Pin-TypeLng-Detail 
    let $PinType = ''
 
BEGIN-SELECT
TYP.DESCR 

   Move &TYP.DESCR to $PinType

FROM PS_GP_PIN_TYP_LANG TYP
WHERE TYP.PIN_TYPE = &ELM.PIN_TYPE 
AND TYP.LANGUAGE_CD = $curr_language_cd

END-SELECT

End-Procedure !Get-Pin-TypeLng-Detail 


!************************************************************************
!  Procedure: Get-Pin-Type-Detail                                       *
!************************************************************************
Begin-Procedure Get-Pin-Type-Detail 
 
BEGIN-SELECT
TYP1.DESCR 

   Move &TYP1.DESCR to $PinType

FROM PS_GP_PIN_TYPE TYP1
WHERE TYP1.PIN_TYPE = &ELM.PIN_TYPE 

END-SELECT

End-Procedure !Get-Pin-Type-Detail 



!************************************************************************
!  Procedure: Get-Other-Element-Detail                                  *
!************************************************************************
Begin-Procedure Get-Other-Element-Detail 
    let $FldName = 'PIN_OWNER'
    let $PinOwnerS = ''
    let $PinOwnerL = ''
    let $UpgradeActionS =''
    let $UpgradeActionL =''
    if $curr_language_cd <> $Lang_CD
        do Get-XLATLANG-Desc ($FldName, &ELM.PIN_OWNER, $curr_language_cd,$PinOwnerS, $PinOwnerL)
    else
        do Get-XLAT-Desc ($FldName, &ELM.PIN_OWNER, $PinOwnerS, $PinOwnerL)
    end-if

    let $FldName = 'GP_PKG_UPG_ACTION'
    if $curr_language_cd <> $Lang_CD
        do Get-XLATLANG-Desc ($FldName, &ELM.GP_PKG_UPG_ACTION, $curr_language_cd,$UpgradeActionS, $UpgradeActionL)
    else
        do Get-XLAT-Desc ($FldName, &ELM.GP_PKG_UPG_ACTION, $UpgradeActionS, $UpgradeActionL)
    end-if

End-Procedure !Get-Other-Element-Detail  


!************************************************************************
!  Procedure: Print-Element-Dummy-Data                                  *
!************************************************************************
Begin-Procedure Print-Element-Dummy-Data


   let #depth    = 2

   graphic (+1, 7,172) box #depth

   graphic (-1, 18, #depth)  vert-line 1
   graphic (, 29, #depth)  vert-line 1
   graphic (, 50, #depth)  vert-line 1
   graphic (, 71, #depth)  vert-line 1
   graphic (, 92, #depth)  vert-line 1
   graphic (, 113, #depth)  vert-line 1
   graphic (, 134, #depth)  vert-line 1
   graphic (, 161, #depth)  vert-line 1

   print ' '         (+1,9) 
   print ' '         (,20) 
   print ' '         (,31) 
   print ' '         (,52) 
   print ' '         (,73) 
   print ' '         (,94) 
   print ' '         (,115)
   print ' '         (,137) 
   print ' '         (,163) 
   
End-Procedure !Print-Element-Dummy-Data


!************************************************************************
!  Procedure: Print-Element-Data                                        *
!************************************************************************
Begin-Procedure Print-Element-Data

   if length(&ELM.PIN_CODE) > length($PinOwnerL) 
      let $temp = &ELM.PIN_CODE
   else 
      let $temp = $PinOwnerL
   end-if

   if length($temp) < length($UpgradeActionL) 
      let $temp = $UpgradeActionL
   end-if

   if length($temp) < length($LongVal) 
      let $temp = $LongVal
   end-if
  
   let #depth = 0

   let #depth = wrapdepth($temp,15,1,'','')

   if  (#current-line >= 50) or (#current-line + #depth >=50)
       new-page
       let #line_before = 0
       do Print-Element-Header
   end-if

   if #line_before = 0
      let #line_before = #current-line + 1
   else
      let #line_before = #line_before + #depth
   end-if
   
   graphic (#line_before, 7,172) box #depth
   graphic (-1, 18, #depth)  vert-line 1
   graphic (, 29, #depth)  vert-line 1
   graphic (, 50, #depth)  vert-line 1
   graphic (, 71, #depth)  vert-line 1
   graphic (, 92, #depth)  vert-line 1
   graphic (, 113, #depth)  vert-line 1
   graphic (, 134, #depth)  vert-line 1
   graphic (, 161, #depth)  vert-line 1

   use-report report2   
   alter-printer font = #Heading_Font point-size = #dataPntSize
   
   print &ELM.GP_PKG_ID         (#line_before,8) 
   print &ELM.PIN_NUM           (#line_before,19) 
   print &ELM.PIN_CODE          (#line_before,30) wrap 15 #depth
   print &ELM.PIN_NM            (#line_before,51) wrap 15 #depth
   print $PinType               (#line_before,72) wrap 15 #depth
   print $PinOwnerL             (#line_before,93) wrap 15 #depth
   print $UpgradeActionL        (#line_before,114) wrap 15 #depth
   print $LongVal               (#line_before,135) wrap 15 #depth
   print $targetpin             (#line_before,162)
   
End-Procedure !Print-Element-Data

!***********************************************************************
!  Procedure: Get-XLAT-Desc                                            *
!***********************************************************************

begin-procedure Get-XLAT-Desc ($FldName, $FldVal,:$ShortName, :$LongName)
BEGIN-SELECT
XLATSHORTNAME
XLATLONGNAME
  move &XlatShortName to $ShortName
  move &XlatLongName  to $LongName
    FROM  PSXLATITEM
    WHERE FIELDNAME   = $FldName
      AND FIELDVALUE  = $FldVal
      AND EFF_STATUS  = 'A'
END-SELECT 
End-Procedure !Get-XLAT-Desc

!***********************************************************************
!  Procedure: Get-XLATLANG-Desc                                        *
!***********************************************************************

begin-procedure Get-XLATLANG-Desc ($FldName, $FldVal,$Lcl_Language_Cd,:$ShortName, :$LongName)
BEGIN-SELECT
XLATSHORTNAME
XLATLONGNAME
  move &XlatShortName to $ShortName
  move &XlatLongName  to $LongName
    FROM  PSXLATITEMLANG
    WHERE FIELDNAME   = $FldName
      AND FIELDVALUE  = $FldVal
      AND LANGUAGE_CD = $Lcl_Language_Cd

END-SELECT 
End-Procedure !Get-XLATLANG-Desc


!***********************************************************************
!  Procedure: Get_Translat_Info                                        *
!***********************************************************************
Begin-Procedure Get_Translat_Info
   do Init_Report_Translation ($ReportID,$curr_language_cd)
   do Append_Report_Translation ($ReportID)
   do Get_Field_Information ($ReportID,'REPORT_TITLE',  $Report_Title,  #DW)
   do Get_Field_Information ($ReportID,'REPORT_TITLE1', $Report_Title1, #DW)
   do Get_Field_Information ($ReportID,'REC_DETAIL',    $Rec_detail_lbl,#DW)
   do Get_Field_Information ($ReportID,'ELE_DETAIL',    $Ele_detail_lbl,#DW)
   do Get_Field_Information ($ReportID,'PKG_ID',        $Pkd_id_lbl,    #DW)
   do Get_Field_Information ($ReportID,'PKG_ID1',       $Pkd_id1_lbl,   #DW)
   do Get_Field_Information ($ReportID,'PKG_ID2',       $Pkd_id2_lbl,   #DW)
   do Get_Field_Information ($ReportID,'REC_NAME',      $Rec_name_lbl,  #DW)
   do Get_Field_Information ($ReportID,'WHR_CLAUSE',    $Whr_clause_lbl,#DW)
   do Get_Field_Information ($ReportID,'WHR_CLS_OPT',   $Whr_clsopt_lbl,#DW)
   do Get_Field_Information ($ReportID,'REC_EXISTS',    $Rec_exists_lbl,#DW)
   do Get_Field_Information ($ReportID,'PIN',           $PIN_lbl,       #DW)
   do Get_Field_Information ($ReportID,'PIN_NUM',       $PIN_Num_lbl,   #DW)
   do Get_Field_Information ($ReportID,'PIN_CODE',      $PIN_Code_lbl,  #DW)
   do Get_Field_Information ($ReportID,'PIN_NAME',      $PIN_name_lbl,  #DW)
   do Get_Field_Information ($ReportID,'PIN_TYPE',      $PIN_Type_lbl,  #DW)
   do Get_Field_Information ($ReportID,'PIN_OWNER',     $PIN_Owner_lbl, #DW)
   do Get_Field_Information ($ReportID,'UPG_ACTION',    $Upg_Action_lbl,#DW)
   do Get_Field_Information ($ReportID,'UPG_ACTION1',   $Upg_Action1_lbl,#DW)
   do Get_Field_Information ($ReportID,'COMMENTS',      $Comments_lbl,  #DW)
   do Get_Field_Information ($ReportID,'TARGET_PIN',    $Target_PIN_lbl,#DW)
   do Get_Field_Information ($ReportID,'TARGET_PIN1',   $Target_PIN1_lbl,#DW)
End-Procedure ! Get_Translat_Info

#Include 'reset.sqc'        !Reset printer procedure
#Include 'curdttim.sqc'     !Get-Current-DateTime procedure
#include 'datetime.sqc'     !Routines for date and time formatting
#include 'datemath.sqc'     !Date conversion procedures
#include 'sqrtrans.sqc'     !Translate SQR strings to given language
#include 'prcsapi.sqc'      !Replaces stdapi.sqc
#include 'stdapi.sqc'
#include 'prcslng.sqc'      !Replaces getrplng.sqc#include 'number.sqc'    
#Include 'useprntr.sqc'
#include 'number.sqc'       !Routines to format numbers





