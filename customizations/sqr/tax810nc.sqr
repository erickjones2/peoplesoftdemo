!***********************************************************************
!  TAX810NC:  Qtrly Wage List -  NORTH CAROLINA                        *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2018, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  27548242                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'
  MOVE ' ' TO $MidInitial
  MOVE 'N' TO $SeasonInd

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
    display ''
    display 'Upon successful conclusion of this program, the file'
    display '{IMPORTPREFIX}TAX810NC{IMPORTSUFFIX} has been created.'
    display ''
    display 'The file contains 275-character records in the ICESA format ' NOLINE
    DISPLAY 'required for the reporting of quarterly wages to the North Carolina Division of Employment Security'
    display ''
    display 'Follow the instructions from the department for preparing'
    display 'and submitting the file electronically.'
    display ''
  else
    do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization
  move 'TAX810NC' to $ReportID

  move 'North Carolina Quarterly UI Wage Report ' to $ReportTitle
  display ''
  display 'Creating Electronic File for NC UI Wage Reporting'

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA' to $State
#else
  move 'NC' to $State
#endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  do Select-Parameters
  do Convert-Parameters
  do Open-File
end-procedure

begin-procedure Open-File
   move 0 to #RecordCount
   if #FileExtension <> 0
      close 10
   end-if
#ifdef OS400
   add 1 to #FileExtension
   move #FileExtension to $FileExtension 099
   let $FileExtension = '(D' || $FileExtension || ')'
   let $FileID = '{IMPORTPREFIX}' || 'TAX810NC' || $FileExtension
   open $FileID as 10 for-writing record=275:fixed
#else
     open '{IMPORTPREFIX}TAX810NC{IMPORTSUFFIX}' as 10 for-writing record=275:fixed
#endif
end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

begin-SELECT
A.COMPANY
A.DESCR
A.ADDRESS1
A.CITY
A.POSTAL
A.STATE
A.FEDERAL_EIN

  move &A.Company to $Company

  move ''         to $priorEmplID
  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Print-Summary-Data('FileTotal')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                     AFTER=AFTER-COMPANY
C.EMPLID
C.TXGRS_QTD
C.NLGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME


  if &C.NLGRS_QTD < 0 or
     &C.TXGRS_QTD < 0 or
     &C.NLGRS_QTD < &C.TXGRS_QTD

    add 1 to #Count_E
    do Print-Summary-Data('NegWage')

  else

    move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
    if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
      move '000000000'   to $NATIONAL_ID
    else
      move &D1.NATIONAL_ID        to $NATIONAL_ID
    end-if

    MOVE &D.LAST_NAME   TO  $LastName
    MOVE &D.FIRST_NAME  TO  $FirstName
    UPPERCASE $LastName
    UPPERCASE $FirstName

    move &C.TxGrs_QTD to #TxGrs_QTD
    add #TxGrs_QTD to #Co_TxGrs_QTD
    multiply 100 times #TxGrs_QTD

    move &C.NlGrs_QTD to #NlGrs_QTD
    add #NlGrs_QTD to #Co_NlGrs_QTD
    multiply 100 times #NlGrs_QTD
    do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
    Do Write-S-Record

  end-if

FROM  PS_TAX_BALANCE C, PS_NAMES D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'NC'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(C3.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C3
       WHERE  C3.EMPLID        = C.EMPLID
         AND  C3.COMPANY       = C.COMPANY
         AND  C3.BALANCE_ID    = C.BALANCE_ID
         AND  C3.BALANCE_YEAR  = C.BALANCE_YEAR
         AND  C3.BALANCE_QTR   = C.BALANCE_QTR
         AND  C3.STATE         = C.STATE
         AND  C3.LOCALITY      = C.LOCALITY
         AND  C3.TAX_CLASS     = C.TAX_CLASS)
  AND (C.NLGRS_QTD <> 0 OR C.TXGRS_QTD <> 0)
  AND D.EMPLID            = D1.EMPLID
  AND D.NAME_TYPE = 'PRI'
  AND D.EFFDT =
      (SELECT MAX(DX.EFFDT)
       FROM   PS_NAMES DX
       WHERE  DX.EMPLID    = D.EMPLID
         AND  DX.NAME_TYPE = D.NAME_TYPE
         AND  DX.EFFDT    <= $AsOfDate)
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display 'Company'
    display $Company
  end-if
   
  let $StateEIN = RTRIM(&Employer_ID_SUT,' ')
  while INSTR($StateEIN,'-',1) <> 0
    let #Hyphen = INSTR($StateEIN,'-',1)
    if #Hyphen > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Hyphen - 1)) ||
                      SUBSTR($StateEIN,(#Hyphen + 1),10)
    end-if
  end-while
  while INSTR($StateEIN,' ',1) <> 0
    let #Spaces = INSTR($StateEIN,' ',1)
    if #Spaces > 0
      let $StateEIN = SUBSTR($StateEIN,1,(#Spaces - 1)) ||
                      SUBSTR($StateEIN,(#Spaces + 1),10)
    end-if
  end-while
  
  
  MOVE $StateEIN TO $StateEIN_Aux
  LET $StateEIN_Aux = RTRIM($StateEIN_Aux,' ')
  LET $Valid_Chars = '0123456789'
  LET $Invalid_Chars = Translate($StateEIN_Aux, $Valid_Chars, '')
  LET #Invalid = length($Invalid_Chars)
  
  IF #Invalid
    DISPLAY ' '
    DISPLAY ' '
    DISPLAY '*** Warning:' NOLINE
    DISPLAY ' State Unemployment ID must be numeric only.' 
    DISPLAY 'Update the value ' NOLINE
    DISPLAY  $StateEIN NOLINE
    DISPLAY ' for the company ' NOLINE
    DISPLAY $Company NOLINE
    DISPLAY ' in the Company State Tax Table before submitting the file.'
    DISPLAY ' '
    MOVE 0   TO #Invalid
  END-IF



  do Company-Run-Control

  move 0 to #Co_Sum_NlGrs_QTD
  move 0 to #Co_Sum_TxGrs_QTD
  do Get-N-Record-amounts
  if #Co_Sum_NlGrs_QTD > 0
    do Write-N-Record
    Do Write-E-Record
  end-if

end-procedure

begin-procedure Get-N-Record-amounts

begin-SELECT
C1.COMPANY
#ifdef DB2ALL
DECIMAL(SUM(C1.NLGRS_QTD),15,3) &C1.NlGrs_QTD
DECIMAL(SUM(C1.TXGRS_QTD),15,3) &C1.TxGrs_QTD
#else
SUM(C1.NLGRS_QTD) &C1.NlGrs_QTD
SUM(C1.TXGRS_QTD) &C1.TxGrs_QTD
#endif

  move &C1.NlGrs_QTD to #Co_Sum_NlGrs_QTD
  move &C1.TxGrs_QTD to #Co_Sum_TxGrs_QTD

FROM  PS_TAX_BALANCE C1, PS_NAMES D1, PS_PERS_NID D2
WHERE C1.COMPANY       = &A.Company
  AND D1.EMPLID        = C1.EMPLID
  AND C1.TAX_CLASS     = 'U'
  AND C1.BALANCE_ID    = $Calendar_Year_Id
  AND C1.BALANCE_YEAR  = &TX.Balance_Year
  AND C1.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C1.STATE         = 'CA'
#else
  AND C1.STATE         = 'NC'
#endif
  AND C1.LOCALITY      = ' '
  AND C1.BALANCE_PERIOD  =
      (SELECT MAX(C2.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE C2
       WHERE  C2.EMPLID        = C1.EMPLID
         AND  C2.COMPANY       = C1.COMPANY
         AND  C2.BALANCE_ID    = C1.BALANCE_ID
         AND  C2.BALANCE_YEAR  = C1.BALANCE_YEAR
         AND  C2.BALANCE_QTR   = C1.BALANCE_QTR
         AND  C2.STATE         = C1.STATE
         AND  C2.LOCALITY      = C1.LOCALITY
         AND  C2.TAX_CLASS     = C1.TAX_CLASS)
  AND C1.NLGRS_QTD >  0
  AND C1.TXGRS_QTD >= 0
  AND C1.NLGRS_QTD >= C1.TXGRS_QTD
  AND D1.EMPLID            = D2.EMPLID
  AND D1.NAME_TYPE = 'PRI'
  AND D1.EFFDT =
      (SELECT MAX(DX1.EFFDT)
       FROM   PS_NAMES DX1
       WHERE  DX1.EMPLID    = D1.EMPLID
         AND  DX1.NAME_TYPE = D1.NAME_TYPE
         AND  DX1.EFFDT    <= $AsOfDate)
  AND D2.COUNTRY = {NID_Country}
  AND D2.NATIONAL_ID_TYPE = $Payroll_NID_Type
GROUP BY C1.COMPANY
ORDER BY C1.COMPANY
end-SELECT

end-procedure

begin-procedure After-Company
  if #Count_S > 0 or #Count_E > 0
    do Print-Summary-Data('CoTotal')

    add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
    add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
    add #Co_ExGrs_QTD to #Tot_ExGrs_QTD

    add #Count_S to #Count_F
    add #Count_R to #Count_R_Total

    move 0 to #Co_NlGrs_QTD
    move 0 to #Co_TxGrs_QTD
    move 0 to #Co_ExGrs_QTD
    move 0 to #Count_E
    move 0 to #Count_S
    move 0 to #Count_R
    new-page
  end-if
end-procedure

begin-procedure Write-S-Record
  add 1 to #Count_S
 
  write 10 from 'S':1      !Col 1
       $NATIONAL_ID:9      !Col 2   - 10
          $LastName:20     !Col 11  - 30
         $FirstName:12     !Col 31  - 42
        $MidInitial:1      !Col 43
               '37':2      !Col 44  - 45
                $Sp:18     !Col 46  - 63
         $NlGrs_QTD:14     !Col 64  - 77
                $Sp:65     !Col 78  - 142
             'UTAX':4      !Col 143 - 146
          $StateEIN:7      !Col 147 - 153
                $Sp:51     !Col 154 - 204
         $SeasonInd:2      !Col 205 - 206
                $Sp:8      !Col 207 - 214
       $QtrEndMonth:2      !Col 215 - 216
           $RptYear:4      !Col 217 - 220
                $Sp:55     !Col 221 - 275

  add 1 to #Count_R
  add 1 to #RecordCount
  move '' to $NlGrs_QTD
  move 0  to #NlGrs_QTD
  move 'Y' to $RecordWritten
  


end-procedure


begin-procedure Write-N-Record
  move #Co_Sum_NlGrs_QTD  to #TEMP1
  multiply 100 times #TEMP1
  do Format-Number (#TEMP1,  $T_NlGrs,    '09999999999')

  move #Co_Sum_TxGrs_QTD to #TEMP2
  multiply 100 times #TEMP2
  do Format-Number (#TEMP2,  $T_TxGrs,    '09999999999')

  let #T_ExGrs =  #TEMP1 - #TEMP2
  do Format-Number (#T_ExGrs,  $T_ExGrs,  '09999999999')

  let #Co_ExGrs_QTD = #T_ExGrs / 100

  move &TX.Balance_Qtr    to $TX.Balance_Qtr 9
  
  write 10 from   'N':1          !  1
            $StateEIN:7          !  2 -  8
      $TX.Balance_Qtr:1          !  9
             $RptYear:4          ! 10 - 13
              $Month1:5          ! 14 - 18
              $Month2:5          ! 19 - 23
              $Month3:5          ! 24 - 28
             $T_NlGrs:11         ! 29 - 39
             $T_ExGrs:11         ! 40 - 50
             $T_TxGrs:11         ! 51 - 61
      $RemitterNumber:6          ! 62 - 67
                  'I':1          ! 68
                  $Sp:207        ! 69 - 275

  add 1 to #Count_R
  add 1 to #RecordCount

end-procedure


begin-procedure Write-E-Record
  move &A.FEDERAL_EIN  to $FedEIN 099999999
  move &A.DESCR        to $ErName
  move &A.ADDRESS1     to $ErAddress
  move &A.CITY         to $ErCity
  let $ErState = rtrim(&A.STATE ' ')
  move &A.POSTAL       to $Zip
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  write 10 from 'E':1     !  1 -   1
                $Sp:4     !  2 -   5
            $FedEIN:9     !  6 -  14
                $Sp:9     ! 15 -  23
            $ErName:50    ! 24 -  73
         $ErAddress:40    ! 74 - 113
            $ErCity:25    !114 - 138
           $ErState:2     !139 - 140
                $Sp:8     !141 - 148
          $ZipExtsn:5     !149 - 153
               $Zip:5     !154 - 158
                $Sp:8     !159 - 166
             'UTAX':4     !167 - 170
               $Sp:26     !171 - 196
    $RemitterNumber:6     !197 - 202
                $Sp:73    !203 - 275


  move 'Y' to $RecordWritten
  add 1 to #Count_E
  add 1 to #Count_R
  add 1 to #RecordCount
end-procedure


begin-procedure Convert-Parameters

  move 'X' to $FileType
  move '0' to $DisketteType
  move #RC_QTR_UI.Remitter_Number to $RemitterNumber 099999
end-procedure



begin-procedure Company-Run-Control
begin-select
NC.MONTH1_COUNT
NC.MONTH2_COUNT
NC.MONTH3_COUNT
FROM PS_RC_TAX810NC NC
WHERE NC.OPRID       = $Prcs_OprID
  AND NC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND NC.COMPANY     = &C.Company
end-SELECT

  move &NC.Month1_Count  to #Month1Count
  move &NC.Month2_Count  to #Month2Count
  move &NC.Month3_Count  to #Month3Count

  move #Month1Count      to $Month1     09999
  move #Month2Count      to $Month2     09999
  move #Month3Count      to $Month3     09999
end-procedure


#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'getfrmat.sqc'  !Get-Diskette-Format procedure
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'txovrflw.sqc'  !Split-S-Record
