!*************************************************************!
!       $Release:  HR92                                       !
!           $Bug:  30396616                                   !
!*************************************************************!
!*************************************************************!
!           $Bug:                                             !
!*************************************************************!
!***********************************************************************
!  BRCGED01:  CAGED File/Report                                        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
#define c2   20
#define c3   30
#define c5   48
#define c6   60
#define c7   70
#define c9   90
#define c10  100
#define c10a 102
#define c11  110
#define c11b 113

#include 'setenv.sqc'   ! set enviroment
#include 'setup31.sqc'  ! 

begin-setup
#include 'setupdb.sqc'
end-setup

!**************************************
!   Begin Report: First Rutine
!**************************************
begin-report

  move '1' to $ReportDateType   ! Set for date to format as DMY
  move '1' to $ReportYear4      ! Set for year to be formatted YYYY
  do Init-Report
  do Select-Parameters
  if $DeleteCaged='Y'   
     do delete_caged_optn    
  else
   if $FinalizeCaged='Y'    
     do finalize_caged_optn  
   else  
     if $ReloadCaged='Y'
         do delete_caged_optn    
     end-if      
     do Process-Main 
   ! do Delete-CAGED               ! Delete CAGED table < #Year
     do Delete-Temp-Caged
  end-if  
  end-if  
  do Stdapi-Term
  do Reset
end-report

!**************************************
begin-procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime

  let $ReportDate      = $AsOfToday          ! Printed in header
  let $RptDtUnformated = $ReportDate
  do Format-DateTime($RptDtUnformated, $RptDtFormated, {DEFDATE}, '', '')
  let $ReportDate = $RptDtFormated
  
  move 'BRCGED01' to $ReportID
  move 'ACI - APLICATIVO DO CAGED INFORMATIZADO' to $ReportTitle
  move 'V.2019-02' to $ReportVersion
  display $ReportID
  display $ReportTitle
  display $ReportVersion
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
end-procedure Init-Report

!**************************************
begin-heading 15
  uppercase $TTitle1
  print 'PeopleSoft'                   ( 1,)      center 
  print 'Relatório:'                   (+1,  3)
  print $ReportID                      (0 , 15)
  print 'MINISTÉRIO DO TRABALHO E EMPREGO/SPES/CGETIP' (+1,  3)   
  print 'Emissão:'                     (  ,{c10a})
  print $ReportDate                    ( 0,{c11b})
  print 'ACI - APLICATIVO DO CAGED INFORMATIZADO'      (+1,  3)      
  print 'Página:'                      (0,{c10a}
  page-number                          (0,{c11b})
   
  if $ACERTO = 'N'
     print 'ARQUIVO CAGED'             (+1,  3)  
  else
     print 'ARQUIVO ACERTO'            (+1,  3)  
  end-if
    
  print 'RELAÇÃO DE MOVIMENTAÇÃO MENSAL' (+1,)      center
  print 'CADASTRO GERAL DE EMPREGADOS E DESEMPREGADOS - CAGED - LEI 4923/65' (+1,)      center
  print 'Referência:'                  (+1,{c5})
  print $Reference                     (,{c6})  
  
  if $UnemInsuBen = 'Y' 
     print 'Com Seguro Desemprego'     (,{c10a})
  end-if
  print '='                            (+1,  2,130)fill    
  print 'Razão Social:'                (+1,  5) 

  if $ACERTO = 'N'
     print $DescrB       (,{c2})  
  else
     print $Descr        (,{c2})
  end-if

  print 'CNPJ:'                        (+1,  5)
  !Print $NoIdent                       (,{c2})  edit 'XX.XXX.XXX/XXX-XX'
  print $NoIdent                       (,{c2})  edit 'XX.XXX.XXX/XXXX-XX'
  print 'CNAE:'                        (+1,  5)

  if $ACERTO = 'N'
      print $CNAE                      (,{c2})
  else
      print $CNAEA                     (,{c2})
  end-if
    
  print 'CEP:'                         (+1,  5)

  if $ACERTO = 'N'
     print $Postal                     (,{c2})  edit 'XXXXX-XXX'
  else
     print $PostalA                    (,{c2})  edit 'XXXXX-XXX'
  end-if
        
  print '='              (+1,  2,130)fill        
  print 'Tp Movimento'   (+1,  2)
  if $ACERTO = 'Y'
    print 'Ação'  (,{c2})
  end-if
  print 'PIS/PASEP'      (  ,35)
  print 'ID Func'                      (  ,48)
  print 'Nome do Empregado'            (  ,61)
  print 'Admissão'                     (  ,93)
  print 'Rescisão'                     (  ,105)
  print 'Transferência'                (  ,117)   
  print '='                            (+1,  2,130)fill        
    
end-heading

!**************************************
begin-procedure Select-Parameters
let $FileName = ''

begin-select
RC.ESTABID
RC.BALANCE_YEAR
RC.MONTHCD
RC.DAYOFMONTH
RC.MEDIA_TYPE_BRA
RC.ACERTO_IND_BRA
RC.FIRST_CAGED_BRA
RC.FREQUENCY_ID
RC.DATA_ERR_LOG_BRA
RC.INC_MSAL_BRA
RC.UNEM_INSU_BEN_BRA
RC.PERIOD_OPTN_BRA
RC.DATE_FROM
RC.DATE_TO
RC.FILE_NAME_BRA
RC.DELETE_CAGED_BRA
RC.RELOAD_CAGED_BRA
RC.FINALIZE_CAGED_BRA
RC.CAGED_REASON10_BRA
RC.CAGED_REASON20_BRA
RC.CAGED_REASON25_BRA
RC.CAGED_REASON31_BRA
RC.CAGED_REASON32_BRA
RC.CAGED_REASON35_BRA
RC.CAGED_REASON40_BRA
RC.CAGED_REASON43_BRA
RC.CAGED_REASON45_BRA
RC.CAGED_REASON50_BRA
RC.CAGED_REASON60_BRA
RC.CAGED_REASON70_BRA
RC.CAGED_REASON80_BRA
RC.CAGED_REASON90_BRA

  let $estabIDrunCtrl  = rtrim(&RC.ESTABID, ' ')
  let #Year          = &RC.BALANCE_YEAR
  let $Year          = rtrim(to_char(&RC.BALANCE_YEAR), ' ')
  let $Month         = rtrim(&RC.MONTHCD, ' ')
  let #Month         = to_number($Month)  
  let #Day           = &RC.DAYOFMONTH
  let $Day           = edit(#Day, '00')
  let $ACERTO        = rtrim(&RC.ACERTO_IND_BRA, ' ')
  let $FirstCAGED    = rtrim(&RC.FIRST_CAGED_BRA, ' ')
  let $FreqHrsTar    = rtrim(&RC.FREQUENCY_ID, ' ')
  let $DataErrLog    = rtrim(&RC.DATA_ERR_LOG_BRA, ' ')
  let $IncMSalary    = rtrim(&RC.INC_MSAL_BRA, ' ')
  let $UnemInsuBen   = rtrim(&RC.UNEM_INSU_BEN_BRA, ' ')
  let $PeriodOptn    = rtrim(&RC.PERIOD_OPTN_BRA, ' ')
  let $DateFrom      = &RC.DATE_FROM
  let $DateTo        = &RC.DATE_TO
  let $FileName      = rtrim(&RC.FILE_NAME_BRA, ' ')
  let $DeleteCaged   = rtrim(&RC.DELETE_CAGED_BRA, ' ')
  let $ReloadCaged   = rtrim(&RC.RELOAD_CAGED_BRA, ' ')
  let $FinalizeCaged = rtrim(&RC.FINALIZE_CAGED_BRA, ' ')
  let $CagedReason10 = rtrim(&RC.CAGED_REASON10_BRA, ' ')
  let $CagedReason20 = rtrim(&RC.CAGED_REASON20_BRA, ' ')
  let $CagedReason25 = rtrim(&RC.CAGED_REASON25_BRA, ' ')
  let $CagedReason31 = rtrim(&RC.CAGED_REASON31_BRA, ' ')
  let $CagedReason32 = rtrim(&RC.CAGED_REASON32_BRA, ' ')
  let $CagedReason35 = rtrim(&RC.CAGED_REASON35_BRA, ' ')
  let $CagedReason40 = rtrim(&RC.CAGED_REASOn40_BRA, ' ')
  let $CagedReason43 = rtrim(&RC.CAGED_REASON43_BRA, ' ')
  let $CagedReason45 = rtrim(&RC.CAGED_REASON45_BRA, ' ')
  let $CagedReason50 = rtrim(&RC.CAGED_REASON50_BRA, ' ')
  let $CagedReason60 = rtrim(&RC.CAGED_REASON60_BRA, ' ')
  let $CagedReason70 = rtrim(&RC.CAGED_REASON70_BRA, ' ')
  let $CagedReason80 = rtrim(&RC.CAGED_REASON80_BRA, ' ')
  let $CagedReason90 = rtrim(&RC.CAGED_REASON90_BRA, ' ')
  
  if rtrim($DateFrom, ' ') <> ''
        do convert-to-dtu-date($DateFrom,$DateFrom)
  end-if
  
  if rtrim($DateTo, ' ') <> ''
        do convert-to-dtu-date($DateTo,$DateTo)
  end-if
  
    show 'Parameters'
    show 'Establishment ID        ' $estabIDrunCtrl
    show 'Year                    ' $Year          
    show 'Month                   ' $Month
    show 'Date From               ' $DateFrom
    show 'Date To                 ' $DateTo            
    show 'ACERTO File             ' $ACERTO        
    show 'First Declaration       ' $FirstCAGED    
    show 'Include Monthly Salary  ' $IncMSalary
    show 'Data Error Log          ' $DataErrLog  
    show 'Unemployment Insurance  ' $UnemInsuBen 
    show 'Delete                  ' $DeleteCaged
    show 'Reload                  ' $ReloadCaged 
    show 'Finalize                ' $FinalizeCaged 
    show 'File Name               ' $FileName      
    show 'Additional Compensation Elements:'  
  if $PeriodOptn = '1'
   if $Month <> ''
      if $ACERTO = 'Y'
        let $BeginDt  = $Year  || '-' ||  $Month || '-01'    
         
        do dtu-month-begin($DateFrom, $CountBeginDt)
        do dtu-month-end($DateTo, $CountEndDt)

        if $day <> '' and $day <> '0' and  $day <> '00'
           let $EndDt    = $Year  || '-' ||  $Month || '-' || $Day
        else
           do dtu-month-end($BeginDt, $EndDT)
      
        end-if
        
        if $FileName = ''
           let $FileName = 'A' ||  $Day || $Year || '.M' || $Month 
        end-if
        
        let $Alteration  = '1'
        let $AlterationB = '1'
        
        do dtu-add-days($EndDT, 1, $EndDt2) 
        do dtu-add-days($CountEndDt, 1, $CountEndDt2) 

        do DTU-Subtract-Days($BeginDt, 1, $BeginDtTer) 
        do DTU-Subtract-Days($CountBeginDt, 1, $CountBeginDtTer) 
        
        do convert-from-dtu-date($BeginDtTer ,$BeginDtTer)
        do convert-from-dtu-date($EndDt2, $EndDt2)
        do convert-from-dtu-date($BeginDt ,$BeginDt)
        do convert-from-dtu-date($EndDT,$EndDT)
        do convert-from-dtu-date($CountBeginDt,$CountBeginDt)
        do convert-from-dtu-date($CountBeginDtTer,$CountBeginDtTer)        
        do convert-from-dtu-date($CountEndDt,$CountEndDt)
        do convert-from-dtu-date($CountEndDt2,$CountEndDt2)
      else
        let $BeginDt  =  $Year  || '-' ||  $Month || '-01'
        do dtu-month-end($BeginDt, $EndDT)
        
        do dtu-month-begin($DateFrom, $CountBeginDt)
        do dtu-month-end($DateTo, $CountEndDt)

        let $CountEndDt = $EndDT
        
        if $FileName = ''
         if $UnemInsuBen = 'N'
           let $FileName = 'CGED' ||  $Year || '.M' || $Month 
         else 
           let $FileName = 'I' ||  $Day || $Year || '.M' || $Month 
         end-if
        end-if 
        let $Alteration  = '1'
        let $AlterationB = '1'
        
        do dtu-add-days($EndDT, 1, $EndDt2)
        do dtu-add-days($CountEndDt, 1, $CountEndDt2) 

        do DTU-Subtract-Days($BeginDt, 1, $BeginDtTer) 
        do DTU-Subtract-Days($CountBeginDt, 1, $CountBeginDtTer) 
        
        do convert-from-dtu-date($BeginDtTer ,$BeginDtTer)
        do convert-from-dtu-date($EndDt,$EndDt)                     
        do convert-from-dtu-date($BeginDt ,$BeginDt)
        do convert-from-dtu-date($EndDt2 ,$EndDt2)
        do convert-from-dtu-date($CountBeginDt,$CountBeginDt)
        do convert-from-dtu-date($CountBeginDtTer,$CountBeginDtTer)        
        do convert-from-dtu-date($CountEndDt,$CountEndDt)
        do convert-from-dtu-date($CountEndDt2,$CountEndDt2)        
      end-if
   end-if
  else
      if $ACERTO = 'Y'
        let $BeginDt  = $DateFrom
        let $EndDt    = $DateTo   

        do dtu-month-begin($BeginDt, $CountBeginDt)
        let $CountEndDt = $EndDt

        let $Year  = substr($DateTo,1, 4) 
        !let $Month = substr($DateTo,6, 2)
        !let $Day   = substr($DateTo,9, 2)
        
        if $FileName = ''
           let $FileName = 'A' ||  $Day || $Year || '.M' || $Month 
        end-if
        
        let $Alteration  = '1'
        let $AlterationB = '1'
        
        do dtu-add-days($EndDT, 1, $EndDt2) 
        do dtu-add-days($CountEndDt, 1, $CountEndDt2) 
        
        do DTU-Subtract-Days($BeginDt, 1, $BeginDtTer) 
        do DTU-Subtract-Days($CountBeginDt, 1, $CountBeginDtTer) 
        
        do convert-from-dtu-date($BeginDtTer ,$BeginDtTer)
        do convert-from-dtu-date($EndDt2, $EndDt2)
        do convert-from-dtu-date($BeginDt ,$BeginDt)
        do convert-from-dtu-date($EndDT,$EndDT)
        do convert-from-dtu-date($CountBeginDt,$CountBeginDt)
        do convert-from-dtu-date($CountBeginDtTer,$CountBeginDtTer)        
        do convert-from-dtu-date($CountEndDt,$CountEndDt)
        do convert-from-dtu-date($CountEndDt2,$CountEndDt2)        
      else
        let $BeginDt  = $DateFrom
        let $EndDt    = $DateTo   

        do dtu-month-begin($BeginDt, $CountBeginDt)
        let $CountEndDt = $EndDt

        !let $Year  = substr($DateTo,1, 4) 
        !let $Month = substr($DateTo,6, 2)
        let $Day   = substr($DateTo,9, 2) 
        
        if $FileName = ''
         if $UnemInsuBen = 'N'
           let $FileName = 'CGED' ||  $Year || '.M' || $Month 
         else 
           let $FileName = 'I' ||  $Day || $Year || '.M' || $Month 
         end-if
        end-if 
          
        let $Alteration  = '1'
        let $AlterationB = '1'
        
        do dtu-add-days($EndDT, 1, $EndDt2)
        do dtu-add-days($CountEndDt, 1, $CountEndDt2) 
        
        do DTU-Subtract-Days($BeginDt, 1, $BeginDtTer) 
        do DTU-Subtract-Days($CountBeginDt, 1, $CountBeginDtTer) 
        
        do convert-from-dtu-date($BeginDtTer ,$BeginDtTer)
        do convert-from-dtu-date($EndDt,$EndDt)                     
        do convert-from-dtu-date($BeginDt ,$BeginDt)
        do convert-from-dtu-date($EndDt2 ,$EndDt2)
        do convert-from-dtu-date($CountBeginDt,$CountBeginDt)
        do convert-from-dtu-date($CountBeginDtTer,$CountBeginDtTer)
        do convert-from-dtu-date($CountEndDt,$CountEndDt)
        do convert-from-dtu-date($CountEndDt2,$CountEndDt2)        
      end-if
  end-if

  let $YearB         = substr($DateFrom,1, 4)
  let $MonthB        = substr($DateFrom,6, 2)
  let $DayB          = substr($DateFrom,9, 2)
  let $YearE         = substr($DateTo,1, 4)
  let $MonthE        = substr($DateTo,6, 2)
  let $DayE          = substr($DateTo,9, 2)

  let $Reference = $DayB || '/' || $MonthB || '/' || $YearB || ' a ' || $DayE || '/' || $MonthE || '/' || $YearE
 
  if $FirstCAGED          = 'Y'
     let $FirstTime     = '1'
  else
     let $FirstTime     = '2'
  end-if
  
  do Select-Installation

from  PS_CAGED_RC_BRA RC
where RC.OPRID = $prcs_oprid
and   RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure Select-Parameters

!**************************************
begin-procedure Select-Installation

let $GPBrazil = 'N'
begin-select
A.INSTALLED_GP_BRA

  let $GPBrazil = rtrim(&A.INSTALLED_GP_BRA, ' ')
 
from  PS_INSTALLATION A
end-select
end-procedure Select-Installation

!**************************************
begin-procedure Process-Main
!**************************************

  let #TotalRegA     = 0
  let #Count         = 0
  let $estabIDResp   = ''
  Let $AllCgdReasSel = 'Y' 

  if $FileName <> ''
!new    Let $mediaType = rtrim(&RC.MEDIA_TYPE_BRA, ' ')     
     let $mediaType = '0'
     
     evaluate  $mediaType
       when = '10'
         let $mediaType = '2'
       when = '20'
         let $mediaType = '3'
       when = '30'
         let $mediaType = '4'
     end-evaluate  
     
     let $MonthYear    = $Month || $Year
   
     do Create-Arrays

     if $UnemInsuBen = 'Y' 
       let $UnempCond =  ' AND EXISTS  (SELECT ' || '''' || 'X' || '''' 
       let $UnempCond =  $UnempCond || ' FROM PS_ADDL_INFO_BRA AD'
       let $UnempCond =  $UnempCond || ' WHERE D.EMPLID = AD.EMPLID'
       let $UnempCond =  $UnempCond || ' AND D.EMPL_RCD = AD.EMPL_RCD'
       let $UnempCond =  $UnempCond || ' AND AD.UNEM_INSU_BEN_BRA = ' || '''' || 'Y' || ''''
       let $UnempCond =  $UnempCond || ' AND AD.EFFDT ='
       let $UnempCond =  $UnempCond || ' (SELECT MAX (AD1.EFFDT) FROM PS_ADDL_INFO_BRA AD1'
       let $UnempCond =  $UnempCond || ' WHERE AD.EMPLID = AD1.EMPLID'
       let $UnempCond =  $UnempCond || ' AND AD.EMPL_RCD = AD1.EMPL_RCD'
       let $UnempCond =  $UnempCond || ' AND AD1.EFFDT <= ' || '''' || $EndDT || '''' || ' ))'    
       
       let $UnempCondACT = '  AND CC.CAGED_REASON_BRA IN (''10'' , ''20'' , ''25'' , ''35'')'
       
     else
       let $UnempCondACT = ' '
       let $UnempReason = '''  '''

       if $PeriodOptn = '2'
         
         if $CagedReason10 = 'Y'
           let $UnempReason = '''10'''
         else
            Let $AllCgdReasSel = 'N'    
         end-if
           
         if $CagedReason20 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''20'''
             else
               let $UnempReason = $UnempReason || ',''20'' '
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
           
         if $CagedReason25 = 'Y'
           if $UnempReason = ' '
              let $UnempReason = '''25'''
             else
               let $UnempReason = $UnempReason || ' ,''25'' '  
           end-if  
         else
            Let $AllCgdReasSel = 'N' 
         end-if
           
         if $CagedReason31 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''31'''
             else
               let $UnempReason = $UnempReason || ' ,''31'' '   
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
           
         if $CagedReason32 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''32'''
             else
             let $UnempReason = $UnempReason || ' ,''32'' '  
           end-if 
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason35 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''35'''
             else
               let $UnempReason = $UnempReason || ' ,''35'' '  
           end-if  
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason40 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''40'''
             else
               let $UnempReason = $UnempReason || ' ,''40'' '   
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason43 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''43'''
             else
             let $UnempReason = $UnempReason || ' ,''43'' '  
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason45 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''45'''
             else
               let $UnempReason = $UnempReason || ' ,''45'' '   
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
           
         if $CagedReason50 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''50'''
             else
             let $UnempReason = $UnempReason || ' ,''50'' '  
           end-if 
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason60 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''60'''
             else
               let $UnempReason = $UnempReason || ' ,''60'' '  
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason70 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''70'''
             else
               let $UnempReason = $UnempReason || ' ,''70'' '   
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason80 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''80'''
             else
             let $UnempReason = $UnempReason || ' ,''80'' '  
           end-if
         else
            Let $AllCgdReasSel = 'N' 
         end-if
         
         if $CagedReason90 = 'Y'
           if $UnempReason = ' '
               let $UnempReason = '''90'''
             else
             let $UnempReason = $UnempReason || ' ,''90'' '  
           end-if
         else
            let $AllCgdReasSel = 'N' 
         end-if
           
         let $UnempCondACT = '  AND CC.CAGED_REASON_BRA IN (' || $UnempReason || ' )'   
          
       end-if

     end-if 

     show 'UnempCondACT ' $UnempCondACT 
      
     do Get-Estab-To-Process     
        
        do Delete-CAGED-Init 
        do Insert-CAGED-Tbl
        if  $ACERTO = 'Y'
           do Select-Employee-ACERTO2
        end-if
        do Insert-CAGED-Compl
        
        do Select-Employee-Data
        do Process-Establishments
        
        do Print-Array     

  end-if     
end-procedure Process-Main

!**************************************
begin-procedure Create-Arrays

  create-array name=RegA size=20000 -
  field=RegType:char
  field=Estabid:char
  field=MediaType:char
  field=Autorization:char
  field=YearMonth:char
  field=Alteration:char
  field=IdentType:char
  field=NoIdent:char
  field=Descr:char
  field=Address:char
  field=Postal:char
  field=CNAE:char
  field=State:char
  field=DDD:char
  field=Phone:char
  field=Ext:char
  field=TotalRegB:number:5
  field=TotalRegC:number:5
   
  create-array name=RegB size=20000 -
  field=RegType:char
  field=EstabidRes:char
  field=Estabid:char
  field=IdentType:char
  field=NoIdent:char
  field=Declaration:char
  field=Alteration:char
  field=Postal:char
  field=CNAE:char
  field=CNAEclass:char
  field=Descr:char
  field=Address:char
  field=Barrio:char
  field=State:char
  field=EstabidType:char
  field=DDD:char
  field=Phone:char
  field=Email:char
  field=TotalEmpl:number:5
  field=TotalEmplBeg:number:5
  field=TotalEmplEnd:number:5  
  
  create-array name=RegC size=50000 -
  field=RegType:char
  field=EstabidRes:char
  field=Estabid:char  
  field=Emplid:char
  field=IdentType:char
  field=NoIdent:char
  field=PIS:char
  field=Sex:char
  field=BirthDt:char
  field=EducationLvl:char
  field=CBO:char
  field=Salary:char
  field=HrsWork:char
  field=HireDT:char
  field=Action:char
  field=ActionNm:char
  field=TerminationDy:char
  field=name:char
  field=CTPS:char
  field=CTPSSerie:char
  field=State:char
  field=AcertoStatus:char
  field=YearMonth:char
  field=Race:char
  field=Disability:char
  field=TerminationDt:char
  field=disabilityType:char
  field=apprentice:char
  field=realHireDate:char  
  field=CPF:char
  field=CEP:char
  field=ExamNbr:char
  field=ExamDt:char
  field=LabCNPJ:char
  field=PhysUF:char
  field=PhysCRM:char
  field=partial_time:char
  field=JOR_BRA:char
  field=Intermittent:char
  
  create-array name=CountBeg size=10000 -
  field=Estabid:char
  field=TotalBeg:number:5
   
  create-array name=CountEnd size=10000 -
  field=Estabid:char
  field=TotalTer:number:5
  
  create-array name=CountRow size=10000 -
  field=Estabid:char
  field=TotalRow:number:5
    
end-procedure Create-Arrays

!**************************************
begin-procedure Open-File
#debug show 'Open-File procedure'
#debug show '    ' $FILEPREFIX
!**************************************
  
!  #ifdef MVS
!    let $FileName = 'BRCGED01' || '.TXT'
!    show 'MVS:  ' $FileName 
!  #else
    show $FileName  
!  #endif

  let $FILE_NAME =  '{FILEPREFIX}' || ltrim(rtrim($FileName,' '),' ') || '{FILESUFFIX}'
  
  show $FILE_NAME

  open $FILE_NAME as 1 for-writing record=250  

end-procedure Open-File

!**************************************
begin-procedure Process-Establishments
#debug show '*Process-Establishments'
!**************************************

let $record = ''
let #TotalRegB  = 0
let #TotalRegC2 = 0

do Get-Centr-Estabid
do Count-Job-Rows
do Count-Employees
!  do Delete-CAGED-Resp

begin-select 
  
MIN(CT2.ESTABID) &CT2.ESTABID
CT2.ESTAB_ID_BRA   &CT2.ESTAB_ID_BRA
CT2.ESTAB_ID2_BRA  &CT2.ESTAB_ID2_BRA  
 
  let $record    = 'B'
  let $estabIDBra               = rtrim(&CT2.ESTAB_ID_BRA, ' ')  
  let $estabID                  = rtrim(&CT2.ESTABID, ' ')  
  
  #debug show '** $estabID: '  $estabID ' - $estabIDBra ' $estabIDBra
 
       let #TotalEmpl             = 0
       let #TotalRegC             = 0

  do Load-Array-Count-Rows 

  if #TotalRows > 0
  
        let #TotalRegC = #TotalRows
        let #TotalEmpl = #TotalRows
        
     if $FirstCAGED <> 'Y'
        do Load-Array-Count-Beg
     end-if
     
     do Load-Array-Count-End  
     
     do Select-Estab-Phone  
     
     do Check-Strings ( $DescrB , $DescrB)
     do Check-Strings ( $Address , $Address)
     do Check-Strings ( $Barrio , $Barrio)
     do Check-Strings ( $State , $State)
     
     do Create-Array-B          
  
     let $terminationDtInsert = ' '  
  
     let #TotalRegC2             = #TotalRegC2 + #TotalRegC
          
     array-add 1 #TotalRegC to RegA(#count) TotalRegB TotalRegC 
     
   end-if

FROM PS_CAGED_TMP2_BRA CT2 ,
     PS_CAGED_ESTMA_BRA CGE 
    
WHERE CT2.PROCESS_INSTANCE = #prcs_process_instance 
  and CGE.PROCESS_INSTANCE = #prcs_process_instance  
  and CGE.ESTABID          = CT2.ESTABID
   GROUP BY CT2.ESTAB_ID_BRA, CT2.ESTAB_ID2_BRA,  CGE.ESTAB_ASOC_BRA 
   ORDER BY CT2.ESTAB_ID2_BRA, CGE.ESTAB_ASOC_BRA
    
end-select

do Load-Array

#debug show 'END Process-Establishments'

if $estabIDResp = ''
    show 'Erro...estabelecimento responsável ' $estabID
end-if
end-procedure Process-Establishments

!**************************************
begin-procedure Get-Centr-Estabid
#debug show '*Get-Centr-Estabid'  
!**************************************

begin-select DISTINCT
A.CAGED_ESTAB_ID_BRA  &A.CENTR_ESTABID_BRA

     let $record    = 'A'
     let $estabIDResp  = rtrim(&A.CENTR_ESTABID_BRA, ' ')
     let $estabID      = rtrim(&A.CENTR_ESTABID_BRA, ' ')
  
     #debug show ' $estabIDResp: '   $estabIDResp 
    
     do Get-establishment-data
     
     do Check-Strings ( $Descr , $Descr)
     do Check-Strings ( $Address , $Address)
     do Check-Strings ( $State , $State)
     
     do Create-Array-A

FROM PS_CAGED_ESTB1_BRA A
WHERE A.PROCESS_INSTANCE = #prcs_process_instance
end-select
end-procedure Get-Centr-Estabid

!**************************************
begin-procedure Get-establishment-data
#debug show '*Get-establishment-data'
#debug show ' $estabID: ' $estabID
!**************************************
let $ResponsibleID = ''

begin-select 
C.EFFDT
B.ESTABID              
B.DESCR
B.ADDRESS1
B.ADDRESS2
B.ADDRESS3
B.ADDRESS4
B.NUM1
B.POSTAL
B.STATE
B.COMPANY
B.EFF_STATUS
C.COMP_INS_TYPE_BRA 
B.COUNTRY
C.COUNTY_CD_BRA
B.COUNTY
C.ESTAB_TYPE_CD_BRA
C.CAGED_RESP_ID_BRA
C.LEGAL_ENT_TYPE_BRA

  let $LegType = rtrim(&C.LEGAL_ENT_TYPE_BRA, ' ')
  let $Exist = 'Y'
  let $IdentType    = rtrim(&C.COMP_INS_TYPE_BRA, ' ')
  let $State        = rtrim(&B.STATE, ' ')
  let $Company      = rtrim(&B.COMPANY, ' ')
  let $ResponsibleID = rtrim(&C.CAGED_RESP_ID_BRA, ' ')
  
  let $Status       = rtrim(&B.EFF_STATUS, ' ')
  let $effdt        = &C.EFFDT
  let $EstabType    = &C.ESTAB_TYPE_CD_BRA
  
  if $EstabType = '3'
     let $EstabType       = '2'
  end-if 

  if  $ACERTO = 'Y'  
!     do Delete-CAGED-Tbl
  end-if 
  
  do convert-to-dtu-date(&C.EFFDT,$EffEst)
  do convert-to-dtu-date($BeginDt, $BeginDtEst)
  do convert-to-dtu-date($EndDt, $EndDtEst)
  
  if $record    = 'A'
     if $EffEst >= $BeginDtEst and
        $EffEst <= $EndDtEst
        let $Alteration = '2'
     end-if  
  else       
     if $EffEst  >= $BeginDtEst and
        $EffdtEst <= $EndDtEst
        let $AlterationB = '2'
     end-if
        
     if $Status <> 'A'
        let $AlterationB= '3'
     end-if
  end-if  
        
  let $Descr       = upper(&B.DESCR)
  
  if $LegType = 'COM'
     do Select-Company-Name
  end-if   
  
  let $Descr       = replace($Descr, '-',  '')
  let $Descr       = replace($Descr, '/',  '')
  let $Descr       = replace($Descr, '.',  '')
  
  let $BeginField  = $Descr
  if $record       = 'A'
     let #Long     = 35
  else
     let #Long     = 40 
  end-if
  do Fill-Leading
  let $Descr       = $EndField
  let $DescrB      = $EndField
  

!ADDRESS:
  let $Address     = upper(ltrim(rtrim(&B.ADDRESS1, ' '), ' '))
  let $Address2    = upper(ltrim(rtrim(&B.ADDRESS2, ' '), ' '))
  let $Address3    = upper(ltrim(rtrim(&B.ADDRESS3, ' '), ' '))
  let $Address4    = upper(rtrim(&B.ADDRESS4, ' '))
   
  let $Num         = ltrim(rtrim(&B.NUM1, ' '), ' ')
  
  if $Address2 <> ''
     let $Address2 = $Address2 || ' '
  end-if
  
  if $Address3 <> ''
       let $Address3 = $Address3 || ' '
  end-if
  
  let $Address     = $Address || ' ' || $Address2 || $Address3  || $Num
  let $Address     = replace($Address, '-',  '')
  let $Address     = replace($Address, ',',  '')
  let $Address     = replace($Address, '.',  '')
  let $Address     = replace($Address, '/',  '')
  
  let $BeginField  = $Address
  let #LenField   = length($BeginField)
  
  if  #LenField > 40
      show '<*> ENDEREÇO > 40               '$estabID  ' - ' $BeginField
  end-if
  
  
  let #Long        = 40
  do Fill-Leading
  let $Address     = $EndField  
  
  let $Barrio             = upper(rtrim(&B.ADDRESS4, ' '))
  let $BeginField         = $Barrio
  let #Long               = 20
  do Fill-Leading
  let $Barrio             = $EndField

!POSTAL
  let $Postal      = ltrim(rtrim(&B.POSTAL, ' '), ' ')
  if  $Postal = ''
      show '<*> Não existe CEP. Estabelecimento ' $estabID '  Registro ' $record
  end-if
   
  let $Postal      = replace($Postal, '-',  '')
    
  let #Counter     = 1
  let #LenField    = length($Postal)   
  let $PostalEnd   = ''
  while #Counter  <= #LenField
        let $Char    = substr($Postal,#Counter, 1)  
        if $Char <> '-'
           let $PostalEnd = $PostalEnd || $Char
        end-if
        add 1 to #Counter
  end-while
    
  let $Postal      = substr(rtrim($PostalEnd, ' '),1,8)
  let #Postal      = $Postal
  let $Postal      = edit(#Postal, '00000000') !revisar
  let $PostalA     = edit(#Postal, '00000000') !revisar 
  
  let $Country = rtrim(&B.COUNTRY, ' ')  
  
  do Select-Estab-Id
  
  if $ResponsibleID <> ''
     do Select-Responsible-Phone
     do Select-Responsible-email
  else
     do Select-Estab-Phone
  end-if

 
from PS_ESTAB_TBL      B
    ,PS_ESTAB_TBL_BRA  C
where B.ESTABID = $estabID
and   B.ESTABID = C.ESTABID
and   B.EFFDT = (select MAX(BB.EFFDT) 
                 from PS_ESTAB_TBL BB
                 where BB.ESTABID = B.ESTABID
                 and BB.EFFDT <= $EndDT )
and   C.EFFDT = B.EFFDT  
end-select
end-procedure Get-establishment-data

!**************************************
begin-procedure Select-Company-Name 
#debug show '** Select-Company-Name **'
!**************************************
begin-select
D.DESCR  

  let $Descr     = upper(rtrim(&D.DESCR, ' '))  


from PS_COMPANY_TBL D
where D.COMPANY = $Company
 and  D.EFFDT   = (select MAX(DD.EFFDT)          
                  from PS_COMPANY_TBL DD                 
                  where DD.COMPANY   = D.COMPANY   
                  and   DD.EFFDT    <= $EndDt)
end-select
end-procedure Select-Company-Name



!**************************************
begin-procedure Select-Employee-Data
#debug show '*Select-Employee-Data'
#debug show ' Estabid: ' $estabID
!**************************************
let $record  = 'C'

if $CNPJ_V3 <> $CNPJ
 let #TransTerCount = 0
 let $CNPJ_V3 = $CNPJ
end-if
let $EffdtTer = ''

begin-select     
CG.CAGED_ESTAB_ID_BRA
CG.ESTABID
CG.EMPLID
CG.EFFDT
CG.EFFSEQ
CG.EMPL_RCD
CG.LAST_HIRE_DT
CG.ACTION
CG.ACTION_REASON
CG.GP_PAYGROUP
CG.CAGED_REASON_BRA
CG.BALANCE_YEAR
CG.MONTHCD
CG.ACERTO_IND_BRA
CG.MONTHLY_RT
CG.HIRE_DT
CG.TERMINATION_DT
CG.DISABLED_BRA
CG.DISABLED_TYPE_BRA
CG.EMPL_CLASS
CG.CBO_CD_BRA
CG.NID_PIS_BRA
CG.NID_CTPS_BRA
CG.NID_CPF_BRA
CG.EDUCATION_LVL_BRA
CG.ETHNIC_GRP_CD
CG.CTPS_SERIES_BRA
CG.CTPS_STATE_BRA
CG.SEX
CG.BIRTHDATE
CG.REHIRE_DT
CG.SERVICE_DT
CG.CMPNY_SENIORITY_DT
CG.NAME_DISPLAY
CG.POSTAL
CG.CALC_RSLT_VAL
CGE.COUNTRY
CGE.ESTAB_ID_TYPE_BRA
CGE.ESTAB_ID_BRA
CGE.COMP_INS_TYPE_BRA
CG.EXAM_REQD_BRA
CG.EXAM_NBR_BRA
CG.EXAM_DT
CG.LAB_CNPJ_BRA
CG.ORG_STAT_BRA
CG.STATE
CG.MED_CRM_BRA
CG.FULL_PART_TIME
CG.REG_JORN_BRA


  let $estabIDResp                     = &CG.CAGED_ESTAB_ID_BRA
  let $estabID                         = &CGE.ESTAB_ID_BRA
  let $terminationDtInsert             = rtrim(&CG.TERMINATION_DT, ' ')
  let $TerminationDt                   = rtrim(&CG.TERMINATION_DT, ' ')
  let $emplID                          = rtrim(&CG.EMPLID, ' ')  
  let $action                          = rtrim(&CG.ACTION, ' ')
  let $actionReason                    = rtrim(&CG.ACTION_REASON, ' ')      
  let $actionCAGED                     = rtrim(&CG.CAGED_REASON_BRA, ' ')
  let $XlatValue                       = rtrim(&CG.CAGED_REASON_BRA, ' ')
  let #EmplRcd                         = &CG.EMPL_RCD
  let $Effdt                           = &CG.EFFDT
  let $emplClass                       = &CG.EMPL_CLASS
  let $lastHireDt                      = &CG.LAST_HIRE_DT  
  let $GPPaygroup                      = &CG.GP_PAYGROUP
  let #effSeq                          = &CG.EFFSEQ
  let $XlatField                       = 'CAGED_REASON_BRA'
  let $apprentice                      = '2' 
  let $TerminationDy                   = '  ' 
  let $realHireDate                    = ' '
  let $Country                         = rtrim(&CGE.COUNTRY, ' ') 
  let $estabIDType                     = rtrim(&CGE.ESTAB_ID_TYPE_BRA, ' ')
  let #estabID                         = &CGE.ESTAB_ID_BRA
  let $IdentType                       = rtrim(&CGE.COMP_INS_TYPE_BRA, ' ')
  let $serviceDt                       = &CG.SERVICE_DT
  let $hireDtInsert                    = &CG.HIRE_DT
  let $AcertoRead                      = rtrim(&CG.ACERTO_IND_BRA, ' ')
  let $FULL_PART_TIME                  = rtrim(&CG.FULL_PART_TIME, ' ')
  let $REG_JORN_BRA                    = rtrim(&CG.REG_JORN_BRA, ' ')
  let $Intermittent='2'
  
  evaluate $AcertoRead
  When = 'N'
     let $AcertoStatus = '0'
  When = 'Y'
     let $AcertoStatus = '2'
  When = '1'
     let $AcertoStatus = '1'
  End-evaluate
  
  evaluate $estabIDType
  when = 'CEI'
       let #CEI  = #estabID
       let $NoIdent = edit(#CEI,'00000000000000')
  when = 'CNPJ'
       let #CNPJ = #estabID
       let $NoIdent = edit(#CNPJ,'00000000000000')
  end-evaluate  

  if ($emplClass = '55' or $emplClass = '10' or $emplClass = '15' or $emplClass = '60' or $emplClass = '65' or $emplClass = '90' or $emplClass = '20' or $emplClass = '25' or $emplClass = '70' or $emplClass = '75') 

      if $ACERTO = 'N'
         do Get-Xlat  
         let $actionNm = $XlatDescr
      else
         let $actionNm = $XlatValue
      end-if
  
      If $emplClass = '55'
         let $apprentice = '1'
      end-if

     
      let $ProcessInd = 'Y' 
   
      ! DEBUG *******************************  
        #debug show '<*>Emplid:        ' $emplID
        #debug show '   #EmplRcd:      ' #EmplRcd
        #debug show '   Action:        ' $action  
        #debug show '   Action Reason: ' $actionReason
        #debug show '   Action CAGED:  ' $actionCAGED
        #debug show '   Effdt:         ' $Effdt
        #debug show '   TerminationDT: ' $TerminationDT
        #debug show '   LastHireDt:    ' $lastHireDt
        #debug show '   EmplClass:     ' $emplClass  
        #debug show '   Apprentice:    ' $apprentice
        #debug show '   FULL_PART_TIME ' $FULL_PART_TIME
        #debug show '   REG_JORN_BRA   ' $REG_JORN_BRA   
      ! **********************************

      !  Select-Pers-Data

      let $Sex      = rtrim(&CG.SEX, ' ')
  
      if $Sex = 'F'
         let $Sex = '2'
      else
         let $Sex = '1'
      end-if
   
      ! HIRE DATE  
     
      if rtrim(&CG.HIRE_DT, ' ') <> ''
         do convert-to-dtu-date(&CG.HIRE_DT,$HireDt)
      end-if
      if rtrim($serviceDt, ' ') <> ''
         do convert-to-dtu-date($serviceDt,$serviceDt)
      end-if
      if rtrim(&CG.REHIRE_DT, ' ') <> '' 
         do convert-to-dtu-date(&CG.REHIRE_DT,$rehireDt)
      end-if
     
      do convert-to-dtu-date($effdt,$effdt1)
      if rtrim($lastHireDt, ' ') <> ''
         do convert-to-dtu-date($lastHireDt,$lastHireDt)
      end-if
     
      if $actionCAGED = '35'
         if $TerminationDt <> ''
            let $HireDt = $HireDt
         else   
            if $serviceDt > $HireDt
               let $HireDt = $serviceDt
            end-if
  
            if $rehireDt = $effdt1
               let $HireDt = $rehireDt
            else
               if $lastHireDt = $effdt1
                  let $HireDt = $lastHireDt
               end-if    
            end-if 
         end-if 
      end-if   
  
      if ($effdt1 > $HireDt) and ($actionCAGED = '70')
         let $realHireDate = $HireDt
         let #LenField   = length($realHireDate)
         let #Counter    = 1
         let $FieldEnd   = ''
         while #Counter <= #LenField
             let $Char = substr($realHireDate,#Counter, 1)  
             if $Char <> '-'
                 let $FieldEnd = $FieldEnd || $Char
             end-if
             add 1 to #Counter
         end-while
         let $HireYear  = substr($FieldEnd,1, 4)
         let $HireMonth = substr($FieldEnd,5, 2)  
         let $HireDay   = substr($FieldEnd,7, 2)  
         let $realHireDate    = $HireDay|| $HireMonth  || $HireYear 
         let $HireDt = $effdt1
      end-if
!     end-if
       
      let #LenField   = length($HireDt)
      let #Counter    = 1
      let $FieldEnd   = ''
      while #Counter <= #LenField
         let $Char = substr($HireDT,#Counter, 1)  
         if $Char <> '-'
            let $FieldEnd = $FieldEnd || $Char
         end-if
         add 1 to #Counter
      end-while
              
      let $HireYear  = substr($FieldEnd,1, 4)
      let $HireMonth = substr($FieldEnd,5, 2)  
      let $HireDay   = substr($FieldEnd,7, 2)  
      let $HireDt    = $HireDay|| $HireMonth  || $HireYear 
  
      let $Name     = upper(rtrim(&CG.NAME_DISPLAY, ' '))
      let $Name     = replace($Name, '-', '')
      let $Name     = replace($Name, '.', '')
      let $Name     = replace($Name, '/', '')
 
      do convert-to-dtu-date(&CG.BIRTHDATE,$BirthDt)
  
      let #LenField   = length($BirthDt)
      let #Counter    = 1
      let $FieldEnd   = ''
      while #Counter <= #LenField
        let $Char = substr($BirthDT,#Counter, 1)  
        if $Char <> '-'
           let $FieldEnd = $FieldEnd || $Char
        end-if
        add 1 to #Counter
      end-while
         
      let $BirthYear  = substr($FieldEnd,1, 4)
      let $BirthMonth = substr($FieldEnd,5, 2)
      let $BirthDay   = substr($FieldEnd,7, 2)
      let $BirthDt    = $BirthDay|| $BirthMonth  || $BirthYear 
 
      if $action = 'TER'
         
         let $TerminationDy = '  '
     
         if $TerminationDt <> ''
            do convert-to-dtu-date(&CG.TERMINATION_DT,$TerminationDt)
            do convert-to-dtu-date($BeginDT, $BeginDT2) 
        
            if $TerminationDt < $BeginDT2
               let $ProcessInd = 'N' 
               let $TerminationDt = ''
            else
               if $serviceDt <= $TerminationDt                                 
                  let $TerminationDy = substr($TerminationDt,9,2)
                  let #LenField   = length($TerminationDt)
                  let #Counter    = 1
                  let $FieldEnd   = ''
                  while #Counter <= #LenField
                     let $Char = substr($TerminationDT,#Counter, 1)  
                     if $Char <> '-'
                        let $FieldEnd = $FieldEnd || $Char
                     end-if
                     add 1 to #Counter
                  end-while
                   
                  let $TerYear  = substr($FieldEnd,1, 4)
                  let $TerMonth = substr($FieldEnd,5, 2)
                  let $TerDay   = substr($FieldEnd,7, 2)
                  let $TerminationDt    = $TerDay|| $TerMonth  || $TerYear
               else
                  let $TerminationDt = ''
               end-if 
            end-if
         end-if
      else
         if $actionCAGED = '80'
           
            do convert-to-dtu-date(&CG.EFFDT,$EffdtTer)
            do convert-to-dtu-date(&CG.EFFDT,$TerminationDt)
            let $TerminationDy = substr($TerminationDt,9,2)
            let #LenField   = length($TerminationDt)
            let #Counter    = 1
            let $FieldEnd   = ''
            while #Counter <= #LenField
               let $Char = substr($TerminationDT,#Counter, 1)  
               if $Char <> '-'
                  let $FieldEnd = $FieldEnd || $Char
               end-if
               add 1 to #Counter
            end-while
                       
            let $TerYear  = substr($FieldEnd,1, 4)
            let $TerMonth = substr($FieldEnd,5, 2)
            let $TerDay   = substr($FieldEnd,7, 2)
            let $TerminationDt    = $TerDay|| $TerMonth  || $TerYear
        
            if $EffdtTer = $endDt and 
              ($terminationDtInsert = '')
          
               let #TransTerCount = #TransTerCount + 1
           
            end-if
         end-if
      end-if
   
      if  $actionCAGED <> '00' and $actionCAGED <> '' and $ProcessInd = 'Y'

          let $CBOInsert                   = rtrim(&CG.CBO_CD_BRA, ' ')
          let $CBO                         = rtrim(&CG.CBO_CD_BRA, ' ')
          let #LenField   = length($CBO)
          let #Counter    = 1
          let $FieldEnd   = ''
          while #Counter <= #LenField
             let $Char = substr($CBO,#Counter, 1)  
             if $Char <> '-' and $Char <> ' '
                 let $FieldEnd = $FieldEnd || $Char
             end-if
             add 1 to #Counter
          end-while
          let $CBO                         = $FieldEnd
  
          if $IncMSalary = 'Y'
             let #monthlySalary            = &CG.MONTHLY_RT
          else
             let #monthlySalary            = 0
          end-if
        
          if $GPBrazil = 'Y'
             !  Get-Other-Ernings
         
             let #otherErns     = &CG.CALC_RSLT_VAL
             let #monthlySalary = #monthlySalary + #otherErns 

             do Select-Payee-Parm
          else
             do Get-Compensation
          end-if
  
          let #monthlySalaryInt            = trunc(#monthlySalary,00)
          if  #monthlySalaryInt > 999999  
              show '<*> SALÁRIO MENSAL não é válido: ' $emplid ' ' #monthlySalary
              let $Salary                      = '00000000'
          else
              let #monthlySalaryDec       = #monthlySalary - #monthlySalaryInt
              let $SalaryInt              = edit(#monthlySalaryInt, '000000')      
              let $SalaryDec              = edit(#monthlySalaryDec, '0.00')
              let $SalaryDec              = substr($SalaryDec, 3,2)
              let $Salary                 = $SalaryInt || $SalaryDec
          end-if      
      
          !   Select-National-Id

          let $PIS   = rtrim(&CG.NID_PIS_BRA,' ')
          let #PIS = $PIS
          let $PIS = edit(#PIS, '00000000000')
          let $CTPS  = edit(ltrim(rtrim(&CG.NID_CTPS_BRA,' '), ' '), '00000000')
          let $CPF   = edit(ltrim(rtrim(&CG.NID_CPF_BRA,' '), ' '), '00000000000')

          if $PIS  = '00000000000'
             show '<*> Não existe PIS - Empregado ' $emplID  
          end-if
          if $CTPS = '00000000'
             show '<*> Não existe CTPS - Empregado ' $emplID  
          end-if
          if $CPF  = '00000000000'
             show '<*> Não existe CPF - Empregado ' $emplID  
          end-if

          !     Select-Pers-BRA

          let $EducationLvl = ltrim(&CG.EDUCATION_LVL_BRA, '0')
          let #EducationLvl = &CG.EDUCATION_LVL_BRA
      
          if #EducationLvl < 10 and #EducationLvl > 0
            let $EducationLvl = '0' || $EducationLvl
          end-if
  
          #debug show 'org $EducationLvl : '  $EducationLvl 
  
          if $EducationLvl = '10' or $EducationLvl = '11' or $EducationLvl = '12'
             let $EducationLvl = '09'
             let #EducationLvl = 09
          end-if
  
          if #EducationLvl = 13 or #EducationLvl = 14
             let $EducationLvl = '10'
             let #EducationLvl = 10
          end-if
    
          if #EducationLvl > 11
             let $EducationLvl = '11'
          end-if
  
          let $EducationLvl = substr($EducationLvl, 1, 2)

          if $EducationLvl = '0'
             let $EducationLvl = '00'
          end-if   
     
          #debug show 'end $EducationLvl : '  $EducationLvl 
     
          let $Race     = substr(rtrim(&CG.ETHNIC_GRP_CD, ' '),2,1)
          let $CTPSSerie = ltrim(rtrim(&CG.CTPS_SERIES_BRA, ' '), ' ')   
  
          let $CTPSSerie = substr($CTPSSerie, 2,5) 
          let $BeginField = $CTPSSerie
          let #Long = 4
          do Format-Numbers
          let $CTPSSerie = $EndField  
          let $State    = rtrim(&CG.CTPS_STATE_BRA, ' ')

          if $CTPSSerie = '0000'
            show '<*> Não existe SÉRIE DA CARTEIRA DE TRABALHO - Empregado ' $emplID  
          end-if

          if $State = ''
            show '<*> Não existe UF DA CARTEIRA DE TRABALHO - Empregado ' $emplID     
          end-if  
  
          !     Select-Disability

          let $Disability = &CG.DISABLED_BRA
          let $disabilityType = &CG.DISABLED_TYPE_BRA
          let $disabilityTypeIns = &CG.DISABLED_TYPE_BRA

          !CEP
          let $Postal      = replace(&CG.POSTAL, '-',  '')
          let $Postal      = substr(rtrim($Postal, ' '),1,8)
  
          if  $Postal = '00000000'
            show '<*> Não existe CEP - Empregado ' $Emplid
          else
            if  $Postal = ''
              show '<*> Não existe CEP - Empregado ' $Emplid
            end-if
          end-if

          let $NullStr           = ''
          ! Drug exam required in CBO setup
          let $ExamReqd = replace(&CG.EXAM_REQD_BRA, ' ', '')
          if $ExamReqd = 'Y'
             if rtrim(&CG.EXAM_NBR_BRA, ' ') <> ''
                let $ExamNbr     = &CG.EXAM_NBR_BRA
             else
                let $ExamNbr     = rpad($NullStr, 17, ' ')
                show '<*> Número do Exame Toxicológico não Encontrado - Empregado ' $Emplid
             end-if
             
             if rtrim(&CG.EXAM_DT, ' ') <> ''
                do convert-to-dtu-date(&CG.EXAM_DT,$ExamDt)
                
                let #LenField    = length($ExamDt)
                let #Counter     = 1
                let $FieldEnd    = ''
                while #Counter <= #LenField
                   let $Char = substr($ExamDt,#Counter, 1)
                   if $Char <> '-'
                      let $FieldEnd = $FieldEnd || $Char
                   end-if
                   add 1 to #Counter
                end-while
               
                let $ExamYear    = substr($FieldEnd,1, 4)
                let $ExamMonth   = substr($FieldEnd,5, 2)
                let $ExamDay     = substr($FieldEnd,7, 2)
                let $ExamDt      = $ExamDay || $ExamMonth || $ExamYear
             else
                let $ExamDt      = rpad($NullStr, 8, ' ')
                show '<*> Data do Exame Toxicológico não Encontrada - Empregado ' $Emplid
             end-if

             if rtrim(&CG.LAB_CNPJ_BRA, ' ') <> ''
                let $LabCNPJ     = &CG.LAB_CNPJ_BRA
             else
                let $LabCNPJ     = rpad($NullStr, 14, ' ')
                show '<*> CNPJ do Laboratório do Exame Toxicológico não Encontrado - Empregado ' $Emplid
             end-if

             if rtrim(&CG.ORG_STAT_BRA, ' ') <> ''
                let $PhysOrgStat = &CG.ORG_STAT_BRA
                if $PhysOrgStat <> '1'
                   show '<*> CRM do Médico do Exame Toxicológico não Encontrado - Empregado ' $Emplid
                end-if
             else
                show '<*> CRM do Médico do Exame Toxicológico não Encontrado - Empregado ' $Emplid
             end-if
             
             if rtrim(&CG.STATE, ' ') <> ''
                let $PhysUF      = rtrim(&CG.STATE, ' ')
             else
                let $PhysUF      = rpad($NullStr, 2, ' ')
                show '<*> UF do Médico do Exame Toxicológico não Encontrada - Empregado ' $Emplid
             end-if
             
             if rtrim(&CG.MED_CRM_BRA, ' ') <> ''
                if $PhysOrgStat = '1'
                   let $PhysCRM  = rtrim(ltrim(&CG.MED_CRM_BRA, ' '), ' ')
                   let $PhysCRM  = rpad($PhysCRM, 10, ' ')
                else
                   let $PhysCRM  = rpad($NullStr, 10, ' ')
                   show '<*> Número do CRM do Médico do Exame Toxicológico não Encontrado - Empregado ' $Emplid
                end-if
             else
                let $PhysCRM     = rpad($NullStr, 10, ' ')
                show '<*> Número do CRM do Médico do Exame Toxicológico não Encontrado - Empregado ' $Emplid
             end-if
          else
             ! Print blanks
             let $ExamNbr        = rpad($NullStr, 17, ' ')
             let $ExamDt         = rpad($NullStr, 8, ' ')
             let $LabCNPJ        = rpad($NullStr, 14, ' ')
             let $PhysUF         = rpad($NullStr, 2, ' ')
             let $PhysCRM        = rpad($NullStr, 10, ' ')
          end-if

          do Check-Strings ( $Name , $Name)
          do Check-Strings ( $State , $State)

          if $FULL_PART_TIME = 'F'
            let $PARTIAL_TIME='2'
          else
           if $FULL_PART_TIME = 'P'
              let $PARTIAL_TIME='1'
           else
           let $PARTIAL_TIME=' '
              show '<*> Não existe Partial Time para  - Empregado ' $emplID '  ' $action  '\' $actionReason ' Data: ' $Effdt
            end-if  
          end-if
          
          if $REG_JORN_BRA = '4'
            let $JOR_BRA='1'
          else
           if $REG_JORN_BRA  = '0' or $REG_JORN_BRA  = '1' or $REG_JORN_BRA  = '2' or $REG_JORN_BRA  = '3'
              let $JOR_BRA='2'
           else
            let $JOR_BRA=' '
              show '<*> Não existe Working Time Type para  - Empregado ' $emplID '  ' $action  '\' $actionReason ' Data: ' $Effdt
            end-if  
           end-if
                  
          do Create-Array-C

      else

          do convert-to-dtu-date($BeginDT, $BeginDT2)
          do convert-to-dtu-date(&CG.TERMINATION_DT,$TerminationDt)     
          #debug show '$TerminationDt < $BeginDT2: ' $TerminationDt ' '  $BeginDT2
          if $action = 'TER' and ($TerminationDt < $BeginDT2)
             show '<*> Ação não é válido - Empregado ' $emplID '  ' $action  '\' $actionReason ' Data: ' $Effdt ' Termination: ' $TerminationDt
          else        
             show '<*> Ação não é CAGED - Empregado ' $emplID '  ' $action  '\' $actionReason ' Data: ' $Effdt
          end-if
      end-if
  
  else
  
      if $DataErrLog = 'Y'
    
         if ($emplClass <> '55' and $emplClass <> '10' and $emplClass <> '15' and $emplClass <> '60' and $emplClass <> '65' 
              and $emplClass <> '90' and $emplClass <> '20' and $emplClass <> '25' and $emplClass <> '70' and $emplClass <> '75')   
 
         if $ACERTO = 'N'
            do Get-Xlat  
            let $actionNm = $XlatDescr
         else
            let $actionNm = $XlatValue
         end-if

            do Get-EmplClass
            let $EmplRcd                         = edit(#EmplRcd, '0') 
   
            ! *******************************  
              show '<*> Erro de dados - Empregado     ' $emplID '/' $EmplRcd '  Data:' $Effdt
              show '                    Ação:         ' $action '/' $actionReason ' ' $actionCAGED
              show '                    Classe:       ' $emplClass '-' $emplClassDescr 
            ! **********************************
         end-if
      end-if
  end-if
  
from PS_CAGED_BRA CG, 
     PS_CAGED_ESTMP_BRA CGE,
     PS_CAGED_TMP2_BRA CT2
     
where CG.PROCESS_INSTANCE    = #prcs_process_instance
  and CGE.PROCESS_INSTANCE   = #prcs_process_instance
  and CGE.CAGED_ESTAB_ID_BRA = CG.CAGED_ESTAB_ID_BRA
  and CGE.ESTABID            = CGE.ESTABID
  and CGE.EMPLID             = CG.EMPLID
  and CGE.EMPL_RCD           = CG.EMPL_RCD
  and CGE.EFFDT              = CG.EFFDT
  and CGE.EFFSEQ             = CG.EFFSEQ
  and CGE.ACERTO_EXCL_BRA    = CG.ACERTO_EXCL_BRA
  and CT2.PROCESS_INSTANCE   = #prcs_process_instance
  and CT2.ESTABID            = CGE.ESTABID
order by CT2.ESTAB_ID2_BRA, CGE.ESTAB_ASOC_BRA, CG.EMPLID
end-select

#debug show 'END Select-Employee-Data'
end-procedure Select-Employee-Data

!**************************************
begin-procedure Select-Employee-ACERTO2
#debug show 'Select-Employee-ACERTO2'
!**************************************
let $record  = 'X'

begin-sql
insert into PS_CAGED_BRA
(PROCESS_INSTANCE
,CAGED_ESTAB_ID_BRA
,ESTABID
,EMPLID
,EFFDT
,EFFSEQ
,EMPL_RCD
,LAST_HIRE_DT
,ACTION
,ACTION_REASON
,ACERTO_EXCL_BRA
,GP_PAYGROUP
,CAGED_REASON_BRA
,BALANCE_YEAR
,MONTHCD
,ACERTO_IND_BRA
,MONTHLY_RT
,HIRE_DT
,TERMINATION_DT
,DISABLED_BRA
,DISABLED_TYPE_BRA
,EMPL_CLASS
,CBO_CD_BRA
,NID_PIS_BRA
,NID_CTPS_BRA
,NID_CPF_BRA
,EDUCATION_LVL_BRA
,ETHNIC_GRP_CD
,CTPS_SERIES_BRA
,CTPS_STATE_BRA
,SEX
,BIRTHDATE
,REHIRE_DT
,SERVICE_DT
,CMPNY_SENIORITY_DT
,NAME_DISPLAY
,POSTAL
,CALC_RSLT_VAL
,CAGED_STATUS_BRA
,RUN_CNTL_ID
,UNEM_INSU_BEN_BRA
,PERIOD_OPTN_BRA
,DATE_FROM
,DATE_TO)
select
CEB.PROCESS_INSTANCE
,CA.CAGED_ESTAB_ID_BRA
,CA.ESTABID
,CA.EMPLID
,CA.EFFDT
,CA.EFFSEQ
,CA.EMPL_RCD
,CA.LAST_HIRE_DT
,CA.ACTION
,CA.ACTION_REASON
,CA.ACERTO_EXCL_BRA+1
,CA.GP_PAYGROUP
,CA.CAGED_REASON_BRA
,CA.BALANCE_YEAR
,CA.MONTHCD
,'Y'
,CA.MONTHLY_RT
,CA.HIRE_DT
,CA.TERMINATION_DT
,CA.DISABLED_BRA
,CA.DISABLED_TYPE_BRA
,CA.EMPL_CLASS
,CA.CBO_CD_BRA
,CA.NID_PIS_BRA
,CA.NID_CTPS_BRA
,CA.NID_CPF_BRA
,CA.EDUCATION_LVL_BRA
,CA.ETHNIC_GRP_CD
,CA.CTPS_SERIES_BRA
,CA.CTPS_STATE_BRA
,CA.SEX
,CA.BIRTHDATE
,CA.REHIRE_DT
,CA.SERVICE_DT
,CA.CMPNY_SENIORITY_DT
,CA.NAME_DISPLAY
,CA.POSTAL
,CA.CALC_RSLT_VAL
,'O'
,$prcs_run_cntl_id
,$UnemInsuBen
,$PeriodOptn
,$CountBeginDt
,$CountEndDt

from PS_CAGED_BRA CA,
     PS_CAGED_ESTAB_BRA CEB
where CEB.PROCESS_INSTANCE = #prcs_process_instance
and CA.EFFDT BETWEEN $BeginDT and $EndDT
and CA.ESTABID =  CEB.ESTABID
and CA.BALANCE_YEAR      = #Year
and CA.MONTHCD           = $Month
and CAGED_STATUS_BRA     = 'F'
and ACERTO_EXCL_BRA      = 0
and not exists (select 'X' from PS_JOB C
                where C.ESTABID = CA.ESTABID
                and   C.EMPLID = CA.EMPLID
                and   C.EMPL_RCD = CA.EMPL_RCD
                and   C.EFFDT = CA.EFFDT
                and   C.ACTION = CA.ACTION
                and   C.ACTION_REASON = CA.ACTION_REASON)
and not exists (select 'X' from PS_CAGED_BRA CA2
                where CA2.CAGED_ESTAB_ID_BRA = CA.CAGED_ESTAB_ID_BRA
                and   CA2.ESTABID = CA.ESTABID
                and   CA2.EMPLID = CA.EMPLID
                and   CA2.EMPL_RCD = CA.EMPL_RCD
                and   CA2.EFFDT = CA.EFFDT
                and   CA2.EFFSEQ = CA.EFFSEQ
                and   CA2.ACERTO_EXCL_BRA <> 0)                
               
order by CA.EMPLID

end-sql

end-procedure Select-Employee-ACERTO2 

!**************************************
begin-procedure Select-Address
#debug show '* Select-Address'
!**************************************
let $Postal = '00000000'

begin-select     
A.POSTAL

  !CEP
  let $Postal      = replace(&A.POSTAL, '-',  '')
  let $Postal      = substr(rtrim($Postal, ' '),1,8)
 
from PS_ADDRESSES A
where A.EMPLID     = $Emplid
and A.ADDRESS_TYPE = 'HOME'
and A.EFF_STATUS   = 'A'
and A.COUNTRY      = 'BRA'
and A.EFFDT        = (select MAX(AA.EFFDT) 
                      from PS_ADDRESSES AA 
                      where AA.EMPLID = A.EMPLID
                      and AA.EFFDT <= $EndDT)
end-select

if  $Postal = '00000000'
    show '<*> Não existe CEP - Empregado ' $Emplid
else
if  $Postal = ''
    show '<*> Não existe CEP - Empregado ' $Emplid
end-if
end-if
 
end-procedure Select-Address


!**************************************
begin-procedure Count-Employees
#debug show '* Count-Employees **'
!**************************************
 if $CNPJ_V4 <> $CNPJ
 let #TotalEmplTer   = 0
 let #TotalEmplTer2  = 0
  let #TotalEmpBeg     = 0
  let $CNPJ_V4 = $CNPJ
 end-if

begin-select 
TM2.ESTAB_ID_BRA &estabIDB   
COUNT(*) &ccount2

  let #TotalEmplEnd1   = &ccount2 
  let $estabIDEnd   = &estabIDB
 
  do Create-Array-Count-End  
  
from PS_JOB A,
PS_CAGED_TMP2_BRA TM2
where TM2.PROCESS_INSTANCE = #prcs_process_instance
AND A.ESTABID = TM2.ESTABID
and   A.EFFDT    = (select MAX(AA.EFFDT) 
                    from PS_JOB AA 
                    where A.EMPLID = AA.EMPLID
                    and   AA.EMPL_RCD = A.EMPL_RCD  
                    and   AA.ACTION  <> 'PSF'
                    and   AA.EFFDT <= $CountEndDt)                      
and   A.EFFSEQ   =  (select MAX(AA.EFFSEQ) 
                    from PS_JOB AA 
                    where A.EMPLID = AA.EMPLID
                    and AA.EMPL_RCD = A.EMPL_RCD
                    and AA.EFFDT = A.EFFDT)                   
and A.EMPL_CLASS in ('55', '10', '15', '60', '65', '90', '20', '25', '70', '75')           
and A.EMPL_STATUS in ('A', 'P', 'L')
and not exists (select C.EMPLID   
                     from PS_JOB C
                     where C.ESTABID = A.ESTABID
                     and   C.COMPANY = A.COMPANY
                     and   C.EMPLID  = A.EMPLID
                     and   C.EMPL_RCD = A.EMPL_RCD
                     and   C.EFFDT = (select MAX(AA1.EFFDT) 
                                      from PS_JOB AA1 
                                      where C.EMPLID = AA1.EMPLID
                                      and   AA1.EMPL_RCD = C.EMPL_RCD  
                                      and   AA1.ACTION  <> 'PSF'
                                      and   AA1.EFFDT <= $CountEndDt2)   
                     and   C.TERMINATION_DT = $CountEndDt)
                     and not exists (select 'X' from PS_ACTN_REASON_BRA AR
                     where AR.ACTION = A.ACTION 
                       and AR.ACTION_REASON = A.ACTION_REASON
                       and AR.EFFDT = (select MAX(AR1.EFFDT) 
                                         from PS_ACTN_REASON_BRA AR1
                                         where AR1.ACTION = AR.ACTION
                                           and AR1.ACTION_REASON = AR.ACTION_REASON
                                           and AR1.EFFDT <= $CountEndDt) 
                       and AR.CAGED_REASON_BRA in ('31', '32', '40', '43', '45', '50', '60', '80') )                  

group by TM2.ESTAB_ID_BRA                  
                     

end-select

  
if $FirstCAGED <> 'Y'

begin-select
TM2.ESTAB_ID_BRA &estabIDE
COUNT(*) &count

  let #TotalEmplBeg1   = &count
  let $estabIDBeg   = &estabIDE

  do Create-Array-Count-Beg
 
from PS_JOB A,
PS_CAGED_TMP2_BRA TM2
where TM2.PROCESS_INSTANCE = #prcs_process_instance
AND A.ESTABID = TM2.ESTABID

and   A.EFFDT    = (select MAX(AA.EFFDT) 
                    from PS_JOB AA 
                    where A.EMPLID = AA.EMPLID
                    and   AA.EMPL_RCD = A.EMPL_RCD
                    and   AA.ACTION  <> 'PSF' 
                    and   AA.EFFDT < $CountBeginDt)  
and   A.EMPL_STATUS in ('A', 'P', 'L')
and   A.EFFSEQ   =  (select MAX(AA.EFFSEQ) 
                    from PS_JOB AA 
                    where A.EMPLID = AA.EMPLID
                    and AA.EMPL_RCD = A.EMPL_RCD
                    and AA.EFFDT = A.EFFDT)
and A.EMPL_CLASS in ('55', '10', '15', '60', '65', '90', '20', '25', '70', '75') 
and not exists (select  C.EMPLID 
                     from PS_JOB C
                     where C.EMPLID = A.EMPLID
                     and   C.EMPL_RCD = A.EMPL_RCD
                     and   C.EFFDT <=  $CountBeginDt   
                     and   C.TERMINATION_DT =  $CountBeginDtTer                    
                     and   C.EMPL_CLASS = A.EMPL_CLASS)
                     and not exists (select 'X' from PS_ACTN_REASON_BRA AR
                         where AR.ACTION = A.ACTION 
                            and AR.ACTION_REASON = A.ACTION_REASON
                            and AR.EFFDT = (select MAX(AR1.EFFDT)
                                   from PS_ACTN_REASON_BRA AR1
                                      where AR1.ACTION = AR.ACTION
                                          and AR1.ACTION_REASON = AR.ACTION_REASON
                                          and AR1.EFFDT <= $CountBeginDtTer) 
                            and AR.CAGED_REASON_BRA in ('31', '32', '40', '43', '45', '50', '60', '80') )
group by TM2.ESTAB_ID_BRA
                     
end-select

end-if

if  #TotalEmplEnd < 0
    let #TotalEmplEnd = 0    
end-if
 
end-procedure Count-Employees

!**************************************
begin-procedure Count-Job-Rows
#debug show '* Count-Job-Rows **'
!**************************************

if $CNPJ_V <> $CNPJ
 let #TotalRows = 0
 let $CNPJ_V = $CNPJ
end-if

begin-select
CGE.ESTAB_ASOC_BRA
CGE.ESTAB_ID_BRA    &estabIDC
CGE.ESTAB_ID2_BRA
COUNT(*) &ccount3

  let #TotalRows1   = &ccount3 
  let $estabIDRows = &estabIDC
  
     do Create-Array-Count-Rows  
  
from PS_CAGED_BRA CG,
PS_CAGED_ESTMA_BRA CGE
where CG.PROCESS_INSTANCE    = #prcs_process_instance  
 and CGE.PROCESS_INSTANCE   = #prcs_process_instance
  and CGE.CAGED_ESTAB_ID_BRA = CG.CAGED_ESTAB_ID_BRA
  and CGE.ESTABID            = CGE.ESTABID
  and CGE.EMPLID             = CG.EMPLID
  and CGE.EMPL_RCD           = CG.EMPL_RCD
  and CGE.EFFDT              = CG.EFFDT
  and CGE.EFFSEQ             = CG.EFFSEQ
  and CGE.ACERTO_EXCL_BRA    = CG.ACERTO_EXCL_BRA
group by CGE.ESTAB_ASOC_BRA, CGE.ESTAB_ID_BRA, CGE.ESTAB_ID2_BRA
order by CGE.ESTAB_ID2_BRA, CGE.ESTAB_ASOC_BRA
                                
end-select

begin-select   
CGE.ESTAB_ID_BRA  &EstabIdBraTmpBra
CGE.ESTAB_ID2_BRA &EstabId2BraTmpBra
COUNT(*) &nbrCountTmpBra

   let $EstabIdBraTmpBra = &EstabIdBraTmpBra
   let $EstabId2BraTmpBra = &EstabId2BraTmpBra
   let $strCountTmpBra = rtrim(to_char(&nbrCountTmpBra), ' ')
   do Insert-Caged-Tmp-Bra

from PS_CAGED_BRA CG,
PS_CAGED_ESTMA_BRA CGE
where CG.PROCESS_INSTANCE    = #prcs_process_instance  
and CGE.PROCESS_INSTANCE   = CG.PROCESS_INSTANCE
and CGE.CAGED_ESTAB_ID_BRA = CG.CAGED_ESTAB_ID_BRA
and CGE.ESTABID            = CG.ESTABID
and CGE.EMPLID             = CG.EMPLID
and CGE.EMPL_RCD           = CG.EMPL_RCD
and CGE.EFFDT              = CG.EFFDT
and CGE.EFFSEQ             = CG.EFFSEQ
and CGE.ACERTO_EXCL_BRA    = CG.ACERTO_EXCL_BRA
group by CGE.ESTAB_ASOC_BRA, CGE.ESTAB_ID_BRA, CGE.ESTAB_ID2_BRA
order by CGE.ESTAB_ID2_BRA, CGE.ESTAB_ASOC_BRA

end-select
   
    do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_CAGED_TMP_BRA COMPUTE STATISTICS
        end-sql
    #endif

end-procedure Count-Job-Rows


!**************************************
begin-procedure Insert-Caged-Tmp-Bra
#debug show '* Insert-Caged-Tmp-Bra **'

begin-sql
INSERT INTO PS_CAGED_TMP_BRA
(PROCESS_INSTANCE, ESTAB_ID_BRA, ESTAB_ID2_BRA, COUNT_ROWS_BRA)
VALUES
(#prcs_process_instance, $EstabIdBraTmpBra, $EstabId2BraTmpBra, $strCountTmpBra)
end-sql

end-procedure

!**************************************
begin-procedure Select-Pers-Data
#debug show '*Select-Pers-Data'
let $hireDtInsert = ' '

let $BirthDt = '000000'
let $Name     = ' '

begin-select     
A1.SEX
A1.EFFDT
C.BIRTHDATE
D.HIRE_DT
D.REHIRE_DT
D.SERVICE_DT
D.CMPNY_SENIORITY_DT
E.NAME_DISPLAY

  let $Sex      = rtrim(&A1.SEX, ' ')
  
  if $Sex = 'F'
     let $Sex = '2'
  else
     let $Sex = '1'
  end-if
   
           
     let $serviceDt = &D.SERVICE_DT
 
     ! HIRE DATE  
     let $hireDtInsert = &D.HIRE_DT
     
     if rtrim(&D.HIRE_DT, ' ') <> ''
        do convert-to-dtu-date(&D.HIRE_DT,$HireDt)
     end-if
     if rtrim($serviceDt, ' ') <> ''
        do convert-to-dtu-date($serviceDt,$serviceDt)
     end-if
     if rtrim(&D.REHIRE_DT, ' ') <> '' 
        do convert-to-dtu-date(&D.REHIRE_DT,$rehireDt)
     end-if
    
     do convert-to-dtu-date($effdt,$effdt1)
     if rtrim($lastHireDt, ' ') <> ''
        do convert-to-dtu-date($lastHireDt,$lastHireDt)
     end-if
     
     if $actionCAGED = '35'
       if $TerminationDt <> ''
        let $HireDt = $HireDt
       else   
        if $serviceDt > $HireDt
         let $HireDt = $serviceDt
        end-if
  
       if $rehireDt = $effdt1
        let $HireDt = $rehireDt
       else
        if $lastHireDt = $effdt1
           let $HireDt = $lastHireDt
        end-if    
       end-if 
      end-if 
     end-if   
    
     if ($effdt1 > $HireDt) and ($actionCAGED = '70')
        let $realHireDate = $HireDt
        let #LenField   = length($realHireDate)
          let #Counter    = 1
          let $FieldEnd   = ''
          while #Counter <= #LenField
             let $Char = substr($realHireDate,#Counter, 1)  
             if $Char <> '-'
                 let $FieldEnd = $FieldEnd || $Char
             end-if
             add 1 to #Counter
        end-while
        let $HireYear  = substr($FieldEnd,1, 4)
        let $HireMonth = substr($FieldEnd,5, 2)  
        let $HireDay   = substr($FieldEnd,7, 2)  
        let $realHireDate    = $HireDay|| $HireMonth  || $HireYear 
        let $HireDt = $effdt1
     end-if
!     end-if
       
  #debug show '  $HireDt: '  $HireDt
    
  let #LenField   = length($HireDt)
  let #Counter    = 1
  let $FieldEnd   = ''
  while #Counter <= #LenField
     let $Char = substr($HireDT,#Counter, 1)  
     if $Char <> '-'
         let $FieldEnd = $FieldEnd || $Char
     end-if
     add 1 to #Counter
  end-while
              
  let $HireYear  = substr($FieldEnd,1, 4)
  let $HireMonth = substr($FieldEnd,5, 2)  
  let $HireDay   = substr($FieldEnd,7, 2)  
  let $HireDt    = $HireDay|| $HireMonth  || $HireYear 
  
  let $Name     = upper(rtrim(&E.NAME_DISPLAY, ' '))
  let $Name     = replace($Name, '-', '')
  let $Name     = replace($Name, '.', '')
  let $Name     = replace($Name, '/', '')
 
  do convert-to-dtu-date(&C.BIRTHDATE,$BirthDt)
  
  
  let #LenField   = length($BirthDt)
  let #Counter    = 1
  let $FieldEnd   = ''
  while #Counter <= #LenField
    let $Char = substr($BirthDT,#Counter, 1)  
    if $Char <> '-'
       let $FieldEnd = $FieldEnd || $Char
    end-if
    add 1 to #Counter
  end-while
         
  let $BirthYear  = substr($FieldEnd,1, 4)
  let $BirthMonth = substr($FieldEnd,5, 2)
  let $BirthDay   = substr($FieldEnd,7, 2)
  let $BirthDt    = $BirthDay|| $BirthMonth  || $BirthYear 
 
  
from PS_PERS_DATA_EFFDT A1
    ,PS_PERSON C
    ,PS_EMPLOYMENT D
    ,PS_PERSON_NAME E
where A1.EMPLID = $emplID
and D.EMPL_RCD = #emplRcd
and A1.EMPLID = C.EMPLID
and A1.EMPLID = D.EMPLID
and A1.EMPLID = E.EMPLID
and A1.EFFDT  = (select MAX(AA.EFFDT) 
                 from PS_PERS_DATA_EFFDT AA where AA.EMPLID = A1.EMPLID
and AA.EFFDT <= $Effdt)
end-select

#debug show 'End Select-Pers-Data'
end-procedure Select-Pers-Data

!**************************************
begin-procedure Select-Pers-BRA
!#debug show 'Select-Pers-BRA'
!**************************************
let $CTPSSerie = '0000'
let $State = ''
begin-select     
B.EDUCATION_LVL_BRA
B.ETHNIC_GRP_CD
F.CTPS_SERIES_BRA
F.CTPS_STATE_BRA 

  let $EducationLvl = ltrim(&B.EDUCATION_LVL_BRA, '0')
  let #EducationLvl = &B.EDUCATION_LVL_BRA 
  
  if #EducationLvl < 10 and #EducationLvl > 0
     let $EducationLvl = '0' || $EducationLvl
  end-if
  
  #debug show 'org $EducationLvl : '  $EducationLvl 
  
  if $EducationLvl = '10' or $EducationLvl = '11' or $EducationLvl = '12'
     let $EducationLvl = '09'
     let #EducationLvl = 09
  end-if
  
  if #EducationLvl = 13 or #EducationLvl = 14
      let $EducationLvl = '10'
      let #EducationLvl = 10
  end-if
    
  if #EducationLvl > 11
     let $EducationLvl = '11'
  end-if
  
  let $EducationLvl = substr($EducationLvl, 1, 2)

  if $EducationLvl = '0'
     let $EducationLvl = '00'
  end-if   

  #debug show 'end $EducationLvl : '  $EducationLvl 
     
  let $Race     = substr(rtrim(&B.ETHNIC_GRP_CD, ' '),2,1)
  let $CTPSSerie = ltrim(rtrim(&F.CTPS_SERIES_BRA, ' '), ' ')   
  
  let $CTPSSerie = substr($CTPSSerie, 2,5) 
  let $BeginField = $CTPSSerie
  let #Long = 4
  do Format-Numbers
  let $CTPSSerie = $EndField  
  let $State    = rtrim(&F.CTPS_STATE_BRA, ' ')
  
from PS_PERS_DATA_BRA B
    ,PS_PERSON_BRA F
where B.EMPLID = $emplID
and B.EMPLID = F.EMPLID
and B.EFFDT  = (select MAX(BB.EFFDT)
                from PS_PERS_DATA_BRA BB
                where BB.EMPLID = B.EMPLID
                and BB.EFFDT <= $effdt) 
end-select

if $CTPSSerie = '0000'
   show '<*> Não existe SÉRIE DA CARTEIRA DE TRABALHO - Empregado ' $emplID  
end-if

if $State = ''
   show '<*> Não existe UF DA CARTEIRA DE TRABALHO - Empregado ' $emplID     
end-if

end-procedure Select-Pers-BRA

!**************************************
begin-procedure Select-Estab-Id
!#debug show '*Select-Estab-Id'
!#debug show ' $estabID: '  $estabID
!**************************************
!let $CAGEDautorization = '0000000'
let $CNAE = '0000000'

begin-select
A.ESTAB_ID_TYPE_BRA
A.ESTAB_ID_BRA

  let $estabIDType = rtrim(&A.ESTAB_ID_TYPE_BRA, ' ')
  let #estabID     = &A.ESTAB_ID_BRA
 
  evaluate $estabIDType
  when = 'CEI'
       let #CEI  = #estabID
       let $NoIdent = edit(#CEI,'00000000000000')
  when = 'CNPJ'
       let #CNPJ = #estabID
       let $NoIdent = edit(#CNPJ,'00000000000000')
    if $CNPJ <> &A.ESTAB_ID_BRA
       let $CNPJ = &A.ESTAB_ID_BRA
    end-if
  when = 'CNAE'
       let #CNAE = #estabID 
       let $CNAE = edit(#CNAE, '0000000')
       let $CNAEClass = substr($CNAE,1,2)
       let $CNAE = substr($CNAE,1,7)    
  end-evaluate
  
from  PS_ESTAB_ID_BRA A
     ,PS_ESTAB_TBL_BRA A2
where A.ESTABID = $estabID 
and   A.ESTABID = A2.ESTABID
and   A.COUNTRY = $Country
and   A.COUNTY_CD_BRA  = A2.COUNTY_CD_BRA
and   A.EFFDT = A2.EFFDT
and   A2.EFFDT = (select MAX(AA.EFFDT) 
                 from PS_ESTAB_TBL_BRA AA
                 where AA.ESTABID = A.ESTABID
                 and AA.EFFDT <= $EndDT )
and  ( ( A2.COMP_INS_TYPE_BRA = '10' 
 and A.ESTAB_ID_TYPE_BRA = 'CNPJ')
 or  ( A2.COMP_INS_TYPE_BRA = '20' 
and A.ESTAB_ID_TYPE_BRA = 'CEI') 
 or A.ESTAB_ID_TYPE_BRA = 'CNAE' )

end-select
end-procedure Select-Estab-Id
!**************************************
begin-procedure Select-Estab-Id-RegC
!#debug show '*Select-Estab-Id-RegC'
!#debug show ' $estabID: '  $estabID
!**************************************

begin-select
E.ESTAB_ID_TYPE_BRA
E.ESTAB_ID_BRA
E2.COMP_INS_TYPE_BRA


  let $estabIDType = rtrim(&E.ESTAB_ID_TYPE_BRA, ' ')
  let #estabID     = &E.ESTAB_ID_BRA
  let $IdentType   = rtrim(&E2.COMP_INS_TYPE_BRA, ' ')
   
  evaluate $estabIDType
  when = 'CEI'
       let #CEI  = #estabID
       let $NoIdent = edit(#CEI,'00000000000000')
  when = 'CNPJ'
       let #CNPJ = #estabID
       let $NoIdent = edit(#CNPJ,'00000000000000')
  end-evaluate
  
from  PS_ESTAB_ID_BRA E
     ,PS_ESTAB_TBL_BRA E2
where E.ESTABID = $estabID 
and   E.ESTABID = E2.ESTABID
and   E.COUNTRY = $Country
and   E.COUNTY_CD_BRA  = E2.COUNTY_CD_BRA
and   E.EFFDT = E2.EFFDT
and   E2.EFFDT = (select MAX(EE.EFFDT) 
                 from PS_ESTAB_TBL_BRA EE
                 where EE.ESTABID = E.ESTABID
                 and EE.EFFDT <= $EndDT )
and   ( ( E2.COMP_INS_TYPE_BRA = '10' 
and E.ESTAB_ID_TYPE_BRA = 'CNPJ')
or  ( E2.COMP_INS_TYPE_BRA = '20' 
and E.ESTAB_ID_TYPE_BRA = 'CEI') )                 
                     

end-select
end-procedure Select-Estab-Id-RegC

!**************************************
begin-procedure Select-Responsible-Phone
#debug show '*Select-Responsible-Phone'
let $phone = '00000000'
let $Ext   = '00000'
let $DDD   = '0000'
begin-select
P.PHONE
P.EXTENSION
 
  let $BeginField = substr(rtrim(&P.EXTENSION, ' '), 1,5)
  let #Long = 5
  do Format-Numbers
  let $ext  = $EndField 
  
  let $FullPhone = rtrim(&P.PHONE, ' ')
    
  do GetPhoneBRA ($FullPhone, $PhoneDDI, $PhoneDDD, $Phone, $PhoneRamal)  
  
  move $PhoneDDD to $DDD   '0000'
    
  #debug show '  $FullPhone  [' $FullPhone ']'
  #debug show '  $PhoneDDI   [' $PhoneDDI ']'
  #debug show '  $PhoneDDD   [' $PhoneDDD ']'
  #debug show '  $Phone      [' $Phone ']'
  #debug show '  $PhoneRamal [' $PhoneRamal ']'
      
from PS_PERSONAL_PHONE P
where P.EMPLID = $ResponsibleID
and P.PHONE_TYPE = 'BUSN'
end-select

if $phone = '00000000'
   do Select-Estab-Phone   
end-if

end-procedure Select-Responsible-Phone

!******************************************************************************
begin-procedure GetPhoneBRA ($FullPhone, :$PhoneDDI, :$PhoneDDD, :$Phone, :$PhoneRamal)
#debug show 'Procedure: GetPhoneBRA'
!******************************************************************************
  let $PhoneDDI      = '0'
  let $PhoneDDD      = '0000'
  let $Phone         = '0'
  let $PhoneRamal    = '0'
  let #i             = 1
  let #DotNumber     = 0
  let #SizeFullPhone = length($FullPhone)
  let $CleanPhone    = ''
  let #PosDot1       = 0
  let #PosDot2       = 0
  let #PosDot3       = 0
  !Clean Phone
  while #i <= #SizeFullPhone
    let $Test = substr($FullPhone,#i,1)
    if $Test >= '0' and $Test <= '9' or $Test = '.'
          let $CleanPhone = $CleanPhone || $Test
    end-if
    add 1 to #i
  end-while
  
  let #SizeCleanPhone = length($CleanPhone)
  let #i = 1
  
  !Find dots positions
  while #i <= #SizeCleanPhone
    let $Test = substr($CleanPhone,#i,1)
    if $Test = '.'
      if #PosDot1 > 0 and #PosDot2 > 0
        let #PosDot3 = #i
      end-if
      if #PosDot1 > 0 and #PosDot3 = 0
              let #PosDot2 = #i
      end-if
      if #PosDot2 = 0 and #PosDot3 = 0
              let #PosDot1 = #i
      end-if
      add 1 to #DotNumber
    end-if
    add 1 to #i
  end-while
  
  evaluate #DotNumber
    when = 0
      !Only phone
      let $Phone = $CleanPhone
      break
    when = 1
      !Maybe DDD.phone or phone.Ramal
      if #PosDot1 <= 4
        !DDD.Phone
        let $PhoneDDD   = substr($CleanPhone,1           , #PosDot1 - 1)
        let $Phone      = substr($CleanPhone,#PosDot1 + 1, #SizeCleanPhone)
      else
        !Phone.Ramal
        let $Phone      = substr($CleanPhone,1           , #PosDot1 - 1)
        let $PhoneRamal = substr($CleanPhone,#PosDot1 + 1, #SizeCleanPhone)
      end-if
      break
    when = 2
      !Maybe DDD.Phone.Ramal or DDI.DDD.Phone 
      if (#PosDot2 - #PosDot1) > 5
        !DDD.Phone.Ramal
        let $PhoneDDD   = substr($CleanPhone, 1           , #PosDot1 - 1)
        let $Phone      = substr($CleanPhone, #PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
        let $PhoneRamal = substr($CleanPhone,#PosDot2 + 1, #SizeCleanPhone)
      else
        !DDI.DDD.Phone
        let $PhoneDDI   = substr($CleanPhone,1           , #PosDot1 - 1)
        let $PhoneDDD   = substr($CleanPhone,#PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
        let $Phone      = substr($CleanPhone,#PosDot2 + 1, #SizeCleanPhone)
      end-if
      
      break
    when = 3
      !Must be DDI.DDD.Phone.Ramal
      let $PhoneDDI   = substr($CleanPhone, 1           , #PosDot1 - 1)
      let $PhoneDDD   = substr($CleanPhone, #PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
      let $Phone      = substr($CleanPhone, #PosDot2 + 1, (#PosDot3 - #PosDot2) - 1)
      let $PhoneRamal = substr($CleanPhone, #PosDot3 + 1, #SizeCleanPhone)
      break
  end-evaluate
  let #X = length($Phone)
  let #Y = length($PhoneDDD)
  
  if substr($PhoneDDD,1,1) = '0'
      let $PhoneDDD = substr($PhoneDDD,2,#Y)
      let #Y = length($PhoneDDD)
  end-if
  
  if #X > 8
    let $Phone = substr($Phone, 1,8)
  end-if
  
  if #Y > 2
    let $PhoneDDD = substr($PhoneDDD, 1,2)
  end-if
end-procedure GetPhoneBRA
  
!**************************************
begin-procedure Select-Responsible-email
#debug show '*Select-Responsible-email'
let $email = ' '

begin-select
EA.EMAIL_ADDR
   

   let $email = substr(rtrim(lower(&EA.EMAIL_ADDR), ' '), 1, 50)

from  PS_EMAIL_ADDRESSES EA
where EA.EMPLID = $ResponsibleID
and EA.E_ADDR_TYPE = 'BUSN'
end-select

if $email = ' '
   
   ! *******************************  
     show '<*>  Não existe E-MAIL para contato: ' $ResponsibleID 
   ! ********
end-if

#debug show ' $email: '  $email

end-procedure Select-Responsible-email

!**************************************
begin-procedure Select-Estab-Phone
#debug show '* Select-Estab-Phone'

let $phone = '00000000'
let $Ext   = '00000'
let $DDD   = '0000'

begin-select
A.PHONE

  let $FullPhone = ltrim(rtrim(&A.PHONE, ' '),  ' ')
      
  do GetPhoneBRA ($FullPhone, $PhoneDDI, $PhoneDDD, $Phone, $PhoneRamal)  
    
  move $PhoneDDD   to $DDD   '0000'
  move $PhoneRamal to $Ext   '00000'
      
  #debug show '  $FullPhone  [' $FullPhone ']'
  #debug show '  $PhoneDDI   [' $PhoneDDI ']'
  #debug show '  $PhoneDDD   [' $PhoneDDD ']'
  #debug show '  $Phone      [' $Phone ']'
  #debug show '  $PhoneRamal [' $PhoneRamal ']'
        
from  PS_ESTAB_PHONE A
where A.ESTABID = $estabID 
and   A.EFFDT = (select MAX(AA.EFFDT) 
                 from PS_ESTAB_PHONE AA
                 where AA.ESTABID = A.ESTABID)
and   A.PHONE_TYPE = 'BUSN'                             
end-select

#debug show '$DDD: ' $DDD
#debug show '$phone: '  $phone

if $phone = '00000000'   
   ! *******************************  
     show '<*>  Não existe TELEFONE para estabelecimento:    ' $estabID 
   ! ********
end-if

end-procedure Select-Estab-Phone

!**************************************
begin-procedure Select-CAGED-Tbl
show '** Select-CAGED-tbl **'
!**************************************
let $FirstTime = '1'
let #TotalFJob     = 0
let #TotalRein     = 0
let #TotalTemp     = 0
let #TotalJust     = 0
let #TotalUnJu     = 0 
let #TotalRehi     = 0
let #TotalVolu     = 0
let #TotalEndT     = 0
let #TotalEndC     = 0
let #TotalReta     = 0
let #TotalDeat     = 0
let #TotalTran     = 0
let #TotalTraO     = 0

begin-select

CGX.CAGED_REASON_BRA,
COUNT(*) &ccounttp

  let $actionCAGED = rtrim(&CGX.CAGED_REASON_BRA, ' ')

  evaluate $actionCAGED
    when = '10'
      let #TotalFJob = #TotalFJob + &ccounttp
    when = '20'
      let #TotalRein = #TotalRein + &ccounttp
    when = '25'
      let #TotalTemp = #TotalTemp + &ccounttp
    when = '31'
      let #TotalUnJu = #TotalUnJu + &ccounttp
    when = '32'
      let #TotalJust = #TotalJust + &ccounttp
    when = '35'
      let #TotalRehi = #TotalRehi + &ccounttp
    when = '40'
      let #TotalVolu = #TotalVolu + &ccounttp
    when = '43'
      let #TotalEndT = #TotalEndT + &ccounttp
    when = '45'
      let #TotalEndC = #TotalEndC + &ccounttp
    when = '50'
      let #TotalReta = #TotalReta + &ccounttp
    when = '60'
      let #TotalDeat = #TotalDeat + &ccounttp
    when = '70'
      let #TotalTran = #TotalTran + &ccounttp
    when = '80'
      let #TotalTraO = #TotalTraO + &ccounttp
    when = '90'
      let #TotalAgree = #TotalAgree + &ccounttp
  end-evaluate
    
  let $FirstTime = '2'

from PS_CAGED_BRA CGX,
     PS_CAGED_TMP2_BRA TM2
where CGX.PROCESS_INSTANCE = #prcs_process_instance
  and TM2.PROCESS_INSTANCE = #prcs_process_instance
  and TM2.ESTABID = CGX.ESTABID
  and TM2.ESTAB_ID_BRA = $estabID  
group by CGX.CAGED_REASON_BRA
end-select
end-procedure Select-CAGED-Tbl

!**************************************
begin-procedure Select-National-Id
!#debug show '* Select-National-Id **'
!**************************************
let $PIS  = '00000000000'
let $CTPS = '00000000'
let $CPF  = '00000000000'

begin-select
A.NATIONAL_ID
A.NATIONAL_ID_TYPE

   let $NationalId = rtrim(&A.NATIONAL_ID_TYPE, ' ')
  
   evaluate $NationalId 
   when = 'PIS'
     let $PIS   = rtrim(&A.NATIONAL_ID,' ')
     let #PIS = $PIS
     let $PIS = edit(#PIS, '00000000000')
   when = 'CTPS'
     let $CTPS  = edit(ltrim(rtrim(&A.NATIONAL_ID,' '), ' '), '00000000')
   when = 'CPF'
     let $CPF   = edit(ltrim(rtrim(&A.NATIONAL_ID,' '), ' '), '00000000000')
   end-evaluate
   
from PS_PERS_NID A
where A.NATIONAL_ID_TYPE in  ('PIS', 'CTPS', 'CPF')
and A.EMPLID = $emplID
and A.COUNTRY = 'BRA' 
end-select

if $PIS  = '00000000000'
   show '<*> Não existe PIS - Empregado ' $emplID  
end-if
if $CTPS = '00000000'
   show '<*> Não existe CTPS - Empregado ' $emplID  
end-if
if $CPF  = '00000000000'
   show '<*> Não existe CPF - Empregado ' $emplID  
end-if

end-procedure Select-National-Id

!**************************************
begin-procedure Select-Disability
!show '** Select-Disability **'
!**************************************
let $Disability  = '2'
let $disabilityType = ''
let $disabilityTypeIns = '0'

begin-select
'X'
   let $Disability = '1'
   do Select-Disability-BRA
   
from PS_DISABILITY A
where A.EMPLID = $emplID
and A.DISABLED = 'Y'
end-select
end-procedure Select-Disability

!**************************************
begin-procedure Select-Disability-BRA
!show '** Select-Disability-BRA **'
!show '$EndDt: '  $EndDt
!**************************************
begin-select
A.DISABLED_TYPE_BRA

   let $disabilityType = &A.DISABLED_TYPE_BRA
   let $disabilityTypeIns = &A.DISABLED_TYPE_BRA
   
from PS_DISABILITY_BRA A
where A.EMPLID = $emplID
and A.EFFDT = (select MAX(D.EFFDT)
               from PS_DISABILITY_BRA D
               where D.EMPLID = A.EMPLID
               and   D.EFFDT <= $EndDt )
and A.DISABLED_TYPE_BRA <> '0'               
end-select
end-procedure Select-Disability-BRA


!**************************************
begin-procedure Get-Other-Ernings
!show '** Get-Other-Ernings **'
!**************************************
let #otherErns = 0
begin-select
SUM(A.CALC_RSLT_VAL) &CALC_RSLT_VAL

  let #otherErns = &CALC_RSLT_VAL

from PS_GP_RSLT_ED_VW A
    ,PS_GP_PYE_PRC_STAT T
    ,PS_GP_SEG_GUIDE_WA S
where A.EMPLID = $emplID 
and   A.EMPL_RCD = #EmplRcd
and   A.GP_PAYGROUP = $GPPaygroup
and   A.EMPLID = T.EMPLID
and   A.EMPL_RCD = T.EMPL_RCD
and   A.CAL_RUN_ID = T.CAL_RUN_ID
and   A.CAL_ID = T.CAL_ID
and   A.GP_PAYGROUP = T.GP_PAYGROUP
and   S.EMPLID = A.EMPLID
and   S.CAL_RUN_ID = A.CAL_RUN_ID
and   S.EMPL_RCD = A.EMPL_RCD
and   S.GP_PAYGROUP = A.GP_PAYGROUP
and   S.CAL_ID = A.CAL_ID
and   S.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
and   S.RSLT_SEG_NUM = A.RSLT_SEG_NUM
and   S.ESTABID = $estabID
and   T.RSLT_VER_NUM = (select MAX(T1.RSLT_VER_NUM)
                        from PS_GP_PYE_PRC_STAT T1
                        where T1.EMPLID = T.EMPLID
                        and   T1.EMPL_RCD = T.EMPL_RCD
                        and   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        and   T1.CAL_ID = T.CAL_ID
                        and   T1.GP_PAYGROUP = T.GP_PAYGROUP)
and   T.RSLT_REV_NUM = (select MAX(T1.RSLT_REV_NUM)
                        from PS_GP_PYE_PRC_STAT T1
                        where T1.EMPLID = T.EMPLID
                        and   T1.EMPL_RCD = T.EMPL_RCD
                        and   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        and   T1.CAL_ID = T.CAL_ID
                        and   T1.GP_PAYGROUP = T.GP_PAYGROUP)
and   A.SLICE_END_DT  = (select MAX(A1.SLICE_END_DT) 
                         from PS_GP_RSLT_ERN_DED A1
                         where A1.EMPLID = A.EMPLID
                         and   A1.EMPL_RCD = A.EMPL_RCD 
                         and   A1.RSLT_SEG_NUM = A.RSLT_SEG_NUM
                         and   A1.GP_PAYGROUP = A.GP_PAYGROUP
                         and   A1.SLICE_END_DT  <= $EndDt)
and   A.CAL_RUN_ID    =  (select A1.ORIG_CAL_RUN_ID 
                          from PS_GP_RSLT_ERN_DED A1
                         where A1.EMPLID = A.EMPLID
                         and   A1.EMPL_RCD = A.EMPL_RCD 
                         and   A1.RSLT_SEG_NUM = A.RSLT_SEG_NUM
                         and   A1.GP_PAYGROUP = A.GP_PAYGROUP
                         and   A1.CAL_RUN_ID = A.CAL_RUN_ID
                         and   A1.CAL_ID = A.CAL_ID
                         and   A1.INSTANCE = A.INSTANCE
                         and   A1.PIN_NUM = A.PIN_NUM)                         
and   A.PIN_NUM in      (select B.GPBR_PIN_ERN_NUM 
                         from PS_GPBR_RC_CAGED B 
                         where B.OPRID = $prcs_oprid
                         and   B.RUN_CNTL_ID = $prcs_run_cntl_id)                       
end-select

let #monthlySalary = #monthlySalary + #otherErns  

end-procedure Get-Other-Ernings


begin-procedure Update-Amounts
!show '** Update-Amounts **'
!**************************************


begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.CALC_RSLT_VAL = (select CASE WHEN SUM(A.CALC_RSLT_VAL) IS NULL THEN 0 ELSE SUM(A.CALC_RSLT_VAL) END
from PS_GP_RSLT_ED_VW A
    ,PS_GP_PYE_PRC_STAT T
    ,PS_GP_SEG_GUIDE_WA S
    
where A.EMPLID = PS_CAGED_BRA.EMPLID 
and   A.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
and   A.GP_PAYGROUP = PS_CAGED_BRA.GP_PAYGROUP
and   A.EMPLID = T.EMPLID
and   A.EMPL_RCD = T.EMPL_RCD
and   A.CAL_RUN_ID = T.CAL_RUN_ID
and   A.CAL_ID = T.CAL_ID
and   A.GP_PAYGROUP = T.GP_PAYGROUP
and   S.EMPLID = A.EMPLID
and   S.CAL_RUN_ID = A.CAL_RUN_ID
and   S.EMPL_RCD = A.EMPL_RCD
and   S.GP_PAYGROUP = A.GP_PAYGROUP
and   S.CAL_ID = A.CAL_ID
and   S.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
and   S.RSLT_SEG_NUM = A.RSLT_SEG_NUM
and   S.ESTABID = PS_CAGED_BRA.ESTABID
and   T.RSLT_VER_NUM = (select MAX(T1.RSLT_VER_NUM)
                        from PS_GP_PYE_PRC_STAT T1
                        where T1.EMPLID = T.EMPLID
                        and   T1.EMPL_RCD = T.EMPL_RCD
                        and   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        and   T1.CAL_ID = T.CAL_ID
                        and   T1.GP_PAYGROUP = T.GP_PAYGROUP)
and   T.RSLT_REV_NUM = (select MAX(T1.RSLT_REV_NUM)
                        from PS_GP_PYE_PRC_STAT T1
                        where T1.EMPLID = T.EMPLID
                        and   T1.EMPL_RCD = T.EMPL_RCD
                        and   T1.CAL_RUN_ID = T.CAL_RUN_ID
                        and   T1.CAL_ID = T.CAL_ID
                        and   T1.GP_PAYGROUP = T.GP_PAYGROUP)
and   A.SLICE_END_DT  = (select MAX(A1.SLICE_END_DT) 
                         from PS_GP_RSLT_ERN_DED A1
                         where A1.EMPLID = A.EMPLID
                         and   A1.EMPL_RCD = A.EMPL_RCD 
                         and   A1.RSLT_SEG_NUM = A.RSLT_SEG_NUM
                         and   A1.GP_PAYGROUP = A.GP_PAYGROUP
                         and   A1.SLICE_END_DT  <= $EndDt)
and   A.CAL_RUN_ID    =  (select A1.ORIG_CAL_RUN_ID 
                          from PS_GP_RSLT_ERN_DED A1
                         where A1.EMPLID = A.EMPLID
                         and   A1.EMPL_RCD = A.EMPL_RCD 
                         and   A1.RSLT_SEG_NUM = A.RSLT_SEG_NUM
                         and   A1.GP_PAYGROUP = A.GP_PAYGROUP
                         and   A1.CAL_RUN_ID = A.CAL_RUN_ID
                         and   A1.CAL_ID = A.CAL_ID
                         and   A1.INSTANCE = A.INSTANCE
                         and   A1.PIN_NUM = A.PIN_NUM)                         
and   A.PIN_NUM in      (select B.GPBR_PIN_ERN_NUM 
                         from PS_GPBR_RC_CAGED B 
                         where B.OPRID = $prcs_oprid
                         and   B.RUN_CNTL_ID = $prcs_run_cntl_id)) 
where PS_CAGED_BRA.PROCESS_INSTANCE  = #prcs_process_instance
                     
end-sql



end-procedure Update-Amounts

!**************************************
begin-procedure Get-Compensation
!show '* Get-Other-Ernings'
!**************************************
let #otherErns = 0
let $FreqTarget = 'M'
begin-select
CMP.COMPRATE
CMP.COMP_FREQUENCY

   let #Quantity = &CMP.COMPRATE
   let $FreqOrig = &CMP.COMP_FREQUENCY
   do Convert-Frequency-Qty
   let #otherErns = #otherErns + #Quantity
   
from PS_COMPENSATION CMP
where CMP.EMPLID = $emplID 
and CMP.EMPL_RCD = #EmplRcd
and CMP.COMP_RATECD in (select CRB.COMP_RATECD 
                        from PS_CAGED_RATCD_BRA CRB
                        where CRB.OPRID = $prcs_oprid
                        and   CRB.RUN_CNTL_ID = $prcs_run_cntl_id)
and CMP.EFFDT = (select MAX(JBA.EFFDT) 
                 from PS_COMPENSATION JBA
                 where JBA.EMPLID = CMP.EMPLID
                 and JBA.EMPL_RCD = CMP.EMPL_RCD
                 and JBA.EFFDT <= $effdt)
and CMP.EFFSEQ = (select MAX(JBA.EFFSEQ) 
                 from PS_COMPENSATION JBA
                 where JBA.EMPLID = CMP.EMPLID
                 and JBA.EMPL_RCD = CMP.EMPL_RCD
                 and JBA.EFFDT = CMP.EFFDT)
end-select

let #monthlySalary = #monthlySalary + #otherErns  

end-procedure Get-Compensation

!**************************************
begin-procedure Convert-Frequency-Qty
!VHOR OCT-21-2004 A function to convert a quentity from a frequency to another
!**************************************
let #FreqFactor = 0
let $FreqFound = 'N'

if $FreqOrig <> $FreqTarget
!Anualizar
begin-select
FR.FREQ_ANNUAL_FACTOR
   let #FreqFactor = &FR.FREQ_ANNUAL_FACTOR   
   let $FreqFound = 'Y'
from PS_FREQUENCY_TBL FR
where FR.EFFDT = (select MAX(FRQ.EFFDT) from PS_FREQUENCY_TBL FRQ
                  where FRQ.FREQUENCY_ID = $FreqOrig)
and FR.EFF_STATUS = 'A'
and FR.FREQUENCY_ID = $FreqOrig             
end-select

   if $FreqFound = 'Y' and #FreqFactor <> 0
      let #Quantity = #Quantity * #FreqFactor
   else
      show 'Warning...Convert-Frequency-Qty - Missing Frequency Origin: ' $FreqOrig ' for conversion'   
      let #Quantity = 0
   end-if

if $FreqFound = 'Y'
   let $FreqFound = 'N'
!DeAnualizar
begin-select
AFR.FREQ_ANNUAL_FACTOR
   let #FreqFactor = &AFR.FREQ_ANNUAL_FACTOR
   let $FreqFound = 'Y'
from PS_FREQUENCY_TBL AFR
where AFR.EFFDT = (select MAX(FRQ.EFFDT) from PS_FREQUENCY_TBL FRQ
                  where FRQ.FREQUENCY_ID = $FreqTarget)
and AFR.EFF_STATUS = 'A'
and AFR.FREQUENCY_ID = $FreqTarget
end-select
end-if

  if $FreqFound = 'Y' and #FreqFactor <> 0
     let #Quantity = #Quantity / #FreqFactor
  else
     show 'Warning...Convert-Frequency-Qty - Missing Frequency Target: ' $FreqTarget ' for conversion'   
     let #Quantity = 0
  end-if

end-if
end-procedure Convert-Frequency-Qty

!**************************************
begin-procedure Create-Array-A
!#debug show '* Create-Array-A'
!**************************************

  let #count      = #count + 1
  let #TotalRegA  = #TotalRegA + 1

  put 'A' $estabIDResp $mediaType $CAGEDautorization $MonthYear $Alteration $IdentType $NoIdent $Descr $Address -
      $Postal $CNAE $State $DDD $phone $Ext 0 0 
  into RegA(#count) RegType Estabid MediaType Autorization YearMonth Alteration IdentType NoIdent Descr - 
                    Address Postal CNAE State DDD Phone Ext TotalRegB TotalRegC 
                    
  let $phone = '00000000'
  let $Ext   = '00000'
  let $DDD   = '0000'
end-procedure Create-Array-A

!**************************************
begin-procedure Create-Array-B
#debug show '* Create-Array-B'
!**************************************

  let #countB    = #countB + 1
  let #TotalRegB = #TotalRegB + 1  

  put 'B' $estabIDResp $estabID $IdentType $NoIdent $FirstTime $AlterationB $Postal $CNAE  -
          $DescrB $Address $Barrio $State $EstabType $DDD $Phone $email #TotalEmpl #TotalEmplBeg #TotalEmplEnd $CNAEclass 
  into RegB(#countB) RegType EstabidRes Estabid IdentType NoIdent Declaration Alteration Postal CNAE -
                     Descr Address Barrio State EstabidType DDD Phone Email TotalEmpl TotalEmplBeg TotalEmplEnd CNAEclass
  
  let $Postal      = ''
  let $CNAE        = ''
  let $Descr       = ''
  let $Address     = ''     
  let $phone = '00000000'
  let $Ext   = '00000'
  let $DDD   = '0000'
                       
                                                      
end-procedure Create-Array-B


begin-procedure Create-Array-C
!#debug show '* Create-Array-C'
!**************************************
  let #countC    = #countC + 1
  let #TotalRegC = #TotalRegC + 1
  
  let #TotalEmpl = #TotalEmpl + 1

  if  $ACERTO = 'Y'
      do Select-Address
  end-if

  if $ACERTO = 'N'
     put 'C' $estabIDResp $estabID $emplID $IdentType $NoIdent $PIS $Sex $BirthDt $EducationLvl  -
          $CBO $Salary $HrsWork $HireDt $actionCAGED $actionNm $TerminationDy $Name $CTPS $CTPSSerie -           
          $State $AcertoStatus $MonthYear $Race $Disability $TerminationDt $disabilityType $apprentice $realHireDate -
          $CPF $Postal $ExamNbr $ExamDt $LabCNPJ $PhysUF $PhysCRM $PARTIAL_TIME $JOR_BRA $Intermittent
     into RegC(#countC) RegType  EstabidRes Estabid Emplid IdentType NoIdent PIS Sex BirthDt EducationLvl -
                        CBO Salary HrsWork HireDT Action ActionNm TerminationDy name CTPS CTPSSerie State  -
                        AcertoStatus YearMonth Race Disability TerminationDt disabilityType apprentice realHireDate -
                        CPF CEP ExamNbr ExamDt LabCNPJ PhysUF PhysCRM PARTIAL_TIME JOR_BRA Intermittent 
  else
!      Let $CTPSSerie = Edit($CTPSSerie, '000')
     put 'X' $estabIDResp  $estabID $emplID $IdentType $NoIdent $PIS $Sex $BirthDt $EducationLvl  -
          $CBO $Salary $HrsWork $HireDt $actionCAGED $actionNm $TerminationDy $Name $CTPS $CTPSSerie - 
          $State $AcertoStatus $MonthYear $Race $Disability $TerminationDt $apprentice $realHireDate -
          $CPF $Postal $ExamNbr $ExamDt $LabCNPJ $PhysUF $PhysCRM $PARTIAL_TIME $JOR_BRA $Intermittent
     into RegC(#countC) RegType EstabidRes  Estabid Emplid IdentType NoIdent PIS Sex BirthDt EducationLvl -
                        CBO Salary HrsWork HireDT Action ActionNm TerminationDy name CTPS CTPSSerie State  -
                        AcertoStatus YearMonth Race Disability TerminationDt apprentice realHireDate CPF CEP -
                        ExamNbr ExamDt LabCNPJ PhysUF PhysCRM PARTIAL_TIME JOR_BRA Intermittent
  end-if
end-procedure Create-Array-C
!**************************************
begin-procedure Create-Array-Count-Beg
!#debug show '* Create-Array-Count-Beg'
!**************************************

  let #countD      = #countD + 1
  let #TotalCBeg  = #TotalCBeg + 1
   
  put $estabIDBeg #TotalEmplBeg1
  into CountBeg(#countD) Estabid TotalBeg

end-procedure Create-Array-Count-Beg

!**************************************
begin-procedure Create-Array-Count-End
!#debug show '* Create-Array-Count-End'
!**************************************

  let #countE      = #countE + 1
  let #TotalCEnd  = #TotalCEnd + 1

  put $estabIDEnd #TotalEmplEnd1
  into CountEnd(#countE) Estabid TotalTer

end-procedure Create-Array-Count-End

!**************************************
begin-procedure Create-Array-Count-Rows
!#debug show '* Create-Array-Count-Rows'
!**************************************

  let #countF      = #countF + 1
  let #TotalCRow  = #TotalCRow + 1
    
  put $estabIDRows #TotalRows1
  into CountRow(#countF) Estabid TotalRow

end-procedure Create-Array-Count-Rows


!**************************************
begin-procedure Load-Array
#debug show '* Load-Array'
!**************************************

if #TotalRegC2 > 0
   do Open-File
   
   show 'Total Reg A: ' #TotalRegA
   show 'Total Reg B: ' #TotalRegB
   show 'Total Reg C: ' #TotalRegC2

   let #ind  = 1
   let #indB  = 1
   let #indC  = 1
   let #Sequence   = 0

   while #ind <= #TotalRegA
     get $RegType $estabID $mediaType $CAGEDautorization $MonthYear $Alteration $IdentType $NoIdent -
         $Descr $Address $Postal $CNAEA $State $DDD $phone $Ext #TotalRegB #TotalRegC from RegA(#ind)
     
         if #TotalRegC > 0         
!   and $CNPJ_V5 <> $CNPJ
            do Create-A-Register  
            do Load-Array-B          
            let $CNPJ_V5 = $CNPJ
         end-if 
       
         add 1 to #ind
    end-while
     
    do Close-CAGED
    
else
  show 'Total Reg C: ' #TotalRegC2
end-if

end-procedure Load-Array

!**************************************
begin-procedure Load-Array-B
!#debug show '* Load-Array-B'
!**************************************
let #contB = 1 

while #contB <= #TotalRegB
  get  $RegType $estabIDResp $estabID $IdentType $NoIdent $FirstTime $AlterationB $Postal -
       $CNAE $CNAEclass $DescrB $Address $Barrio $State $EstabType $DDD $Phone $email #TotalEmpl #TotalEmplBeg #TotalEmplEnd from RegB(#indB)               
       
       if #TotalEmpl > 0
          do Create-B-Register                
          do Load-Array-C
       else
          show '<*> There are not records C for establishment: ' $estabID
       end-if
       
  add 1 to #indB
  add 1 to #contB   
end-while
end-procedure Load-Array-B

!**************************************
begin-procedure Load-Array-C
!show '** Load-Array-C **'
!**************************************
let #ContC = 1 
  
while #contC <= #TotalEmpl
  
    get  $RegType $estabIDResp $estabID $emplID $IdentType $NoIdent $PIS $Sex $BirthDt $EducationLvl  -
         $CBO $Salary $HrsWork $HireDT $actionCAGED $actionNm $TerminationDy $Name $CTPS $CTPSSerie -
         $State $AcertoStatus $MonthYear $Race $Disability $TerminationDt $disabilityType $apprentice $realHireDate $CPF $Postal -
         $ExamNbr $ExamDt $LabCNPJ $PhysUF $PhysCRM $PARTIAL_TIME $JOR_BRA $Intermittent from RegC(#indC)

    do Create-C-Register 
    
    add 1 to #indC
    add 1 to #contC
end-while
   
end-procedure Load-Array-C

!**************************************
begin-procedure Load-Array-Count-Beg
!#debug show '* Load-Array-Count-Beg'
!**************************************
let #contD = 1 
let #foundEstab = 0

while #contD <= #TotalCBeg

  get  $estabIDBeg #TotalEmplBeg1 from CountBeg(#contD)               

        if $estabIDBeg = $estabIDBra
          
          let #TotalEmplBeg = #TotalEmplBeg1
          let #foundEstab = 1
          
          break
       end-if
       
  add 1 to #contD     
end-while

If #foundEstab = 0
    let #TotalEmplBeg = 0
end-if

end-procedure Load-Array-Count-Beg

!**************************************
begin-procedure Load-Array-Count-End
!#debug show '* Load-Array-Count-End'
!**************************************
let #contE = 1 
let #foundEstab = 0
while #contE <= #TotalCEnd
 
  get  $estabIDEnd #TotalEmplEnd1 from CountEnd(#contE)              
 
       if $estabIDEnd = $estabIDBra
       
          let #TotalEmplEnd = #TotalEmplEnd1
          let #foundEstab = 1
          
          break
       end-if 
       
  add 1 to #contE   
end-while

If #foundEstab = 0
    let #TotalEmplEnd = 0
end-if

end-procedure Load-Array-Count-End

!**************************************
begin-procedure Load-Array-Count-Rows
!#debug show '* Load-Array-Count-Rows'
!**************************************
let #TotalRows = 0
let #contF = 1
let #foundEstab = 0

while #contF <= #TotalCRow
   
  get   $estabIDRows #TotalRows1 from CountRow(#contF)       
        
       if $estabIDRows = $estabIDBra
          let #TotalRows = #TotalRows1
          let #foundEstab = 1
  
          do Get-establishment-data          

          break
       end-if
       
  add 1 to #contF   
end-while

If #foundEstab = 0
    let #TotalRows = 0
end-if


end-procedure Load-Array-Count-Rows

!**************************************
begin-procedure Print-Array
#debug show '* Print-Array'
!**************************************
let #ind  = 1
let #indB  = 1
let #indC  = 1


while #ind <= #TotalRegA
      get $RegType $estabID $mediaType $CAGEDautorization $MonthYear $Alteration $IdentType $NoIdent -
          $Descr $Address $Postal $CNAEA $State $DDD $phone $Ext #TotalRegB #TotalRegC from RegA(#ind)         
     
      add 1 to #ind    
      
      if #TotalRegC > 0
         if #TotalRegB > 0
            do Print-Array-B 
         end-if

!         if $ACERTO = 'Y'
!
!            do Select-CAGED-Tbl
!            print ' '             (+2,{c2})  
!            do Print-Total
!            new-page
!         end-if

      end-if
end-while

if #TotalRegA = 0
   print '>> Nenhum dado foi encontrado...'         (+2,{c2})  
   show  '>> Nenhum dado foi encontrado...'          
end-if

end-procedure Print-Array

!**************************************
begin-procedure Print-Array-B
!#debug show '* Print-Array-B'
!**************************************

let #contB = 1

let #estabcount = 0

while #contB <= #TotalRegB
  get  $RegType $EstabRes $estabID $IdentType $NoIdent $FirstTime $AlterationB $Postal -
       $CNAE $CNAEclass $DescrB $Address $Barrio $State $EstabType $DDD $Phone $email #TotalEmpl #TotalEmplBeg  -
       #TotalEmplEnd from RegB(#indB) 

       if #TotalEmpl > 0                   
          do Print-Array-C
          let #estabcount = #estabcount + 1
          
    show 'RegB'
    show '$estabID ' $estabID 
    show '#estabcount ' #estabcount   
          
        ! if $ACERTO = 'N'
          
             do Select-CAGED-Tbl 

             if $FirstCAGED <> 'Y'  
                print 'Total de Empregados existentes no primeiro dia do mes:' (+2, 10)     
                print #TotalEmplBeg         (,{c7})       edit '99999'
             else
                print ''  (+2)    
             end-if

             do Print-Total
   
             if $UnemInsuBen = 'N' and $AllCgdReasSel = 'Y'
                If $PeriodOptn = '1'
                   if $ACERTO = 'N'
                      print 'Total de Empregados existentes no ultimo dia do mes:' (+1, 10)
                      print #TotalEmplEnd         ( 0,{c7})     edit '99999'
                   else
                      print 'Total de Acertos:' (+1, 10)
                      print #TotalMovim         ( 0,40)     edit '99999'
                   end-if
                else
                   if $ACERTO = 'N'
                      print 'Total de Empregados existentes no final do periodo:' (+1, 10)
                      print #TotalEmplEnd         ( 0,{c7})     edit '99999'
                   else
                      print 'Total de Acertos:' (+1, 10)
                      print #TotalMovim         ( 0,40)     edit '99999'
                   end-if
                end-if                   
             end-if
             
             new-page
          end-if
     !   end-if
   add 1 to #indB
   add 1 to #contB
end-while
   
end-procedure Print-Array-B

!**************************************
begin-procedure Print-Total
!show '** Print-Total **'
!**************************************
       
  if $ACERTO = 'N'
        
     print 'Primeiro Emprego:'            (+1, 10)                     !10
     print #TotalFjob                     (  ,40)     edit '99999'
     print 'Dispensa sem Justa Causa:'    (  ,{c7})                     !31
     print #TotalUnJu                     (  ,100)    edit '99999'
     print 'Reemprego:'                   (+1,10)                       !20
     print #TotalRein                     (  ,40)     edit '99999'
     print 'Dispensa Justa Causa:'        (  ,{c7})                     !32
     print #TotalJust                     (  ,100)    edit '99999'
     print 'Contrato Prazo Determinado:'  (+1, 10)
     print #TotalTemp                     (  ,40)     edit '99999'
     print 'A Pedido:'                    (  ,{c7}) 
     print #TotalVolu                     (  ,100)    edit '99999'
     print 'Reintegração:'                (+1, 10)
     print #TotalRehi                     (  ,40)     edit '99999'
     print 'Termino Prazo Determinado:'   (  ,{c7}) 
     print #TotalEndT                     (  ,100)    edit '99999'
     print 'Transferência de Entrada:'    (+1, 10)
     print #TotalTran                     (  ,40)     edit '99999'
     print 'Termino Contrato:'            (  ,{c7}) 
     print #TotalEndC                     (  ,100)    edit '99999'
     print 'Aposentado:'                  (+1,{c7})
     print #TotalReta                     (  ,100)    edit '99999'
     print 'Morte:'                       (+1,{c7}) 
     print #TotalDeat                     (  ,100)    edit '99999'
     print 'Transferência de Saída:'     (+1 ,{c7}) 
     print #TotalTraO                     (  ,100)    edit '99999'
     print 'Termino Comum Acordo:'     (+1 ,{c7}) 
     print #TotalAgree                     (  ,100)    edit '99999'

   else
     print ' ' (+1, 1)
   end-if

  let #TotalMovim = #TotalFjob + #TotalUnJu + #TotalRein + #TotalJust + #TotalTemp + #TotalVolu 
  let #TotalMovim = #TotalMovim + #TotalRehi + #TotalEndT + #TotalTran + #TotalEndC + #TotalReta + #TotalDeat + #TotalTraO + #TotalAgree
  
end-procedure Print-Total

!**************************************
begin-procedure Print-Array-C
!show '** Print-Array-C **'
!**************************************
let #contC = 1

while #contC <= #TotalEmpl
       get  $RegType $estabIDResp $estabID $emplID $IdentType $NoIdent $PIS $Sex $BirthDt $EducationLvl  -
            $CBO $Salary $HrsWork $HireDT $actionCAGED $actionNm $TerminationDy $Name $CTPS $CTPSSerie $State -
            $AcertoStatus $MonthYear $Race $Disability $TerminationDt $disabilityType $apprentice $realHireDate from RegC(#indC)
      
            let $HireDt = rtrim($HireDt, ' ')
            let $realHireDate = rtrim($realHireDate, ' ')
               
            print $actionNm    (+1,2)
            
            if $ACERTO = 'Y'
               if $AcertoStatus = '1'
                  print 'Exclusão'     (,18)  
               else
                  print 'Inclusão'     (,18)  
               end-if
            end-if

            print $PIS         (  ,32)     edit 'XXX.XXX.XX.XX-X'
            print $emplID      (  ,48) 
            print $Name        (  ,61,30)
            if $HireDt <> ''
               if $actionCAGED = '70'
!                  Print $realHireDate   (  ,93)     Edit 'XX/XX/XXXX'
                  print $HireDt         (  ,117)   edit 'XX/XX/XXXX'
               else
                  print $HireDt   (  ,93)     edit 'XX/XX/XXXX'
               end-if
            end-if
            if $TerminationDt <> ''
               if $actionCAGED = '80'
                  print $TerminationDt   (  ,117)   edit 'XX/XX/XXXX'
               else
                  print $TerminationDt   (  ,105)   edit 'XX/XX/XXXX'
               end-if
            end-if
            add 1 to #indC
            add 1 to #contC
end-while 
       
end-procedure Print-Array-C

!**************************************
begin-procedure Create-A-Register

let $Spaces = '  '
if  $ACERTO = 'Y'
  let $TotalRegB = '     '
end-if

let $TotalRegB  = edit(#TotalRegB, '00000')
let $TotalRegC  = edit(#TotalRegC, '00000')
let #Sequence   = #Sequence + 1
let $Sequence   = edit(#Sequence,'00000')

!**************************************
#debug show ' '
#debug show '* Create-A-Register'
#debug show '                           ($estabIDResp):    ' $estabIDResp
#debug show 'A'
#debug show 'TIPO LAYOUT (5)                                L2009'
#debug show $mediaType
#debug show 'FILLER (2)'
#debug show 'COMPETÊNCIA (6) Mês e ano  ($MonthYear):      ' $MonthYear
#debug show 'ALTERAÇÃO 1-Nada 2-Alterar ($Alteration):     ' $Alteration
#debug show 'SEQUÊNCIA (5)              ($Sequence):       ' $Sequence
#debug show 'TIPO IDENTIFIC 1-CNPJ 2-CEI($IdentType):      ' $IdentType
#debug show '#IDENTIF DO AUTORIZADO (14)($NoIdent):        ' $NoIdent
#debug show 'NOME/RAZÃO SOCIAL (35)     ($Descr):          ' $Descr
#debug show 'ENDEREÇO (40)              ($Address):        ' $Address
#debug show 'CEP (8)                    ($Postal):         ' $Postal
#debug show 'UF (2)                     ($State):          ' $State
#debug show 'DDD (4)                    ($DDD):            ' $DDD
#debug show 'TELEFONE (8)               ($phone):          ' $phone
#debug show 'RAMAL (5)                  ($ext):            ' $ext
#debug show 'TOTAL ESTABELECIM(B)(5)    ($TotalRegB):      ' $TotalRegB
#debug show 'TOTAL MOVIMENTAÇÕES(C)(5)  ($TotalRegC):      ' $TotalRegC
#debug show 'FILLER 92' 
!**************************************

write 1 from 'A':1 'L2009':5 $Spaces:2 $mediaType:1 $MonthYear:6 $Alteration:1 $Sequence:5 $IdentType:1 -
                   $NoIdent:14 $Descr:35 $Address:40 $Postal:8 $State:2 $DDD:4 $phone:8 $Ext:5 $TotalRegB:5 -
                   $TotalRegC:5 $Spaces:92                                           
end-procedure Create-A-Register

!**************************************
begin-procedure Create-B-Register

let $Spaces = '                           '
let $TotalEmplBeg  = edit(#TotalEmplBeg, '00000')
let #Sequence   = #Sequence + 1
let $Sequence   = edit(#Sequence,'00000')

!**************************************
#debug show ' '
#debug show '* Create-B-Register'
!NEW: $CNAEClass
#debug show '                           ($estabID):        ' $estabID 
#debug show 'B'
#debug show 'TIPO IDENTIFI 1-CNPJ 2-CEI ($IdentType):      ' $IdentType
#debug show 'NÚMERO IDENTIFICADOR  (14) ($NoIdent):        ' $NoIdent
#debug show 'SEQÜÊNCIA (5)              ($Sequence):       ' $Sequence
#debug show 'PRIMEIRA DECLARAÇÃO        ($FirstTime):      ' $FirstTime
#debug show '  1-primeira '
#debug show '  2-já informou ao CAGED anteriormente ' 
#debug show 'ALTERAÇÃO                  ($AlterationB):    ' $AlterationB
#debug show '  1-Nada a atualizar   '
#debug show '  2-Alterar dados cadastrais do estabelecimento'
#debug show '  3-Encerramento de Atividades'
#debug show 'CEP (8)  Código Postal     ($Postal):         ' $Postal
#debug show 'FILLER (5)'
#debug show 'NOME/RAZÃO SOCIAL  (40)    ($DescrB):         ' $DescrB
#debug show 'ENDEREÇO (40)              ($Address):        ' $Address
#debug show 'BAIRRO (20)                ($Barrio):         ' $Barrio
#debug show 'UF (2)                     ($State):          ' $State
#debug show 'TOTAL EMPREGADOS NO 1 DIA(5)(#TotalEmplBeg):  ' $TotalEmplBeg
#debug show 'PORTE DO ESTABELECIMENTO   ($EstabType):      ' $EstabType
#debug show '  1-Microempresa'
#debug show '  2-Empresa de Pequeno Porte'
#debug show '  3-Empresa/Órgão não classificados'
#debug show '  4-Microempreendedor Individual'
#debug show 'CNAE 2.0 COM SUBCLASSE (7) ($CNAE):           ' $CNAE
#debug show 'DDD (4)                    ($DDD):            ' $DDD
#debug show 'TELEFONE (8)               ($phone):          ' $phone
#debug show 'E-MAIL (50)                ($email):          ' $email
#debug show 'FILLER 27'
!**************************************

  
write 1 from 'B':1  $IdentType:1 $NoIdent:14 $Sequence:5 $FirstTime:1 $AlterationB:1 $Postal:8 '     ':5 -
                   $DescrB:40 $Address:40 $Barrio:20 $State:2 $TotalEmplBeg:5 $EstabType:1 $CNAE:7 -
                   $DDD:4 $phone:8 $email:50 $Spaces:27
                                    
end-procedure Create-B-Register

!**************************************
begin-procedure Create-C-Register

let $Spaces = '  '
let #Sequence   = #Sequence + 1
let $Sequence   = edit(#Sequence,'00000')
let $Intermittent='2' 


#debug show ' '
#debug show '* Create-C-Register'
! New: PRIMEIRA DECLARAÇÃO.numeric, 1
#debug show '                           ($emplID):         ' $emplID
#debug show 'C/X'
#debug show 'TIPO IDENTIFI 1-CNPJ 2-CEI ($IdentType):      ' $IdentType
#debug show 'NÚMERO IDENTIFICADOR  (14) ($NoIdent):        ' $NoIdent
#debug show 'SEQÜÊNCIA (5)              ($Sequence):       ' $Sequence
#debug show 'PIS/PASEP (11)             ($PIS):            ' $PIS
#debug show 'SEXO 1-Masc 2-Feminino     ($Sex):            ' $Sex
#debug show 'NASCIMENTO (8)             ($BirthDt):        ' $BirthDt
#debug show 'GRAU DE INSTRUÇÃO (2)      ($EducationLvl):   ' $EducationLvl
#debug show '  1-Analfabeto                  2-Até o 5º ano incompleto  '
#debug show '  3-5º ano completo             4-Do 6º ao 9º ano '
#debug show '  5-Ensino Fundamental completo 6-Ensino Médio incompleto  '
#debug show '  7-Ensino Médio completo       8-Educação Superior incompleta' 
#debug show '  9-Educação Superior completa. 10-Mestrado           11-Doutorado'
#debug show 'FILLER (4)' 
#debug show 'SALÁRIO MENSAL (8)         ($Salary):         ' $Salary
!#debug show '  Informar com centavos sem pontos e sem vírgulas'
#debug show 'HORAS TRABALHADAS (2)      ($HrsWork):        ' $HrsWork
!#debug show '  Por semana (de 1 até 44 horas)'
#debug show 'ADMISSÃO (8)               ($HireDT):         ' $HireDT
#debug show 'TIPO DE MOVIMENTO (8)      ($actionCAGED:     ' $actionCAGED
#debug show 'DIA DE DESLIGAMENTO (2)    ($TerminationDy):  ' $TerminationDy
#debug show 'NOME DO EMPREGADO (40)     ($Name):           ' $Name
#debug show '# DA CARTEIRA DE TRABALHO (8)($CTPS):         ' $CTPS
#debug show 'SÉRIE CARTEIRA DE TRABALHO (4)($CTPSSerie):   ' $CTPSSerie
#debug show 'X-ATUALIZAÇÃO 1-Exclusão 2-Inclusão ($AcertoStatus):' $AcertoStatus
#debug show 'X-COMPETÊNCIA(6) Mês e ano de referência ($MonthYear):' $MonthYear
#debug show 'C-FILLER (7)'
#debug show 'RAÇA/COR                   ($Race):           ' $Race
#debug show 'PORT DO DEFICIÊNCIA 1-SIM 2-NÃO($Disability): '  $Disability
#debug show 'CBO2000 (6)                ($CBO):            ' $CBO
#debug show 'APRENDIZ  1-SIM 2-NÃO      ($apprentice):     ' $apprentice      
#debug show 'UF DA CARTEIRA DE TRABALHO (2)($State):       ' $State
#debug show 'TIPO DEFICIÊNCIA           ($disabilityType): ' $disabilityType 
#debug show 'CPF (11)                   ($CPF):            ' $CPF
#debug show 'CEP RESIDÊNCIA TRABALHADOR (8) ($Postal):     ' $Postal
! #debug show 'FILLER (81)'
#debug show 'EXAME TOXICOLÓGICO REQUERIDO ($ExamReqd):     ' $ExamReqd
#debug show 'NRO EXAME TOXICOLÓGICO (17)($ExamNbr):        ' $ExamNbr
#debug show 'DATA EXAME TOXICOLÓGICO (8)($ExamDt):         ' $ExamDt
#debug show 'CNPJ DO LABORATÓRIO (14)   ($LabCNPJ):        ' $LabCNPJ
#debug show 'UF DO MÉDICO (2)           ($PhysUF):         ' $PhysUF
#debug show 'CRM DO MÉDICO (10)         ($PhysCRM):        ' $PhysCRM
#debug show 'Partial Work (1)      ($PARTIAL_TIME):        ' $PARTIAL_TIME
#debug show 'Telecommuting (1)          ($JOR_BRA):        ' $JOR_BRA
#debug show 'FILLER (30)'

!**************************************

if $ACERTO = 'N' 
    write 1 from $RegType:1 $IdentType:1 $NoIdent:14 $Sequence:5 $PIS:11 $Sex:1 $BirthDt:8 $EducationLvl:2  -
             $Spaces:4 -
             $Salary:8 $HrsWork:2 $HireDT:8 $actionCAGED:2 $TerminationDy:2 $Name:40 $CTPS:8 -
             $CTPSSerie:4 -
             $Spaces:7 - 
             $Race:1 $Disability:1 $CBO:6 $apprentice:1  -
             $State:2 $disabilityType:1 -
             $CPF:11 $Postal:8 -
             $ExamNbr:17 $ExamDt:8 $LabCNPJ:14 $PhysUF:2 $PhysCRM:10 -
             $PARTIAL_TIME:1 $JOR_BRA:1 $Intermittent:1 -
             $Spaces:27
else
    write 1 from $RegType:1 $IdentType:1 $NoIdent:14 $Sequence:5 $PIS:11 $Sex:1 $BirthDt:8 -
             $EducationLvl:2  -
             $Spaces:4 -
             $Salary:8 $HrsWork:2 $HireDT:8 $actionCAGED:2 $TerminationDy:2 $Name:40 $CTPS:8 -
             $CTPSSerie:4 $AcertoStatus:1 $MonthYear:6 $Race:1 $Disability:1 $CBO:6 -
!              $apprentice:1 $State:2 $disabilityType:1 $CPF:11 $Postal:8 $Spaces:41 $Spaces:40
             $apprentice:1 $State:2 $disabilityType:1 $CPF:11 $Postal:8 -
             $ExamNbr:17 $ExamDt:8 $LabCNPJ:14 $PhysUF:2 $PhysCRM:10 -
             $PARTIAL_TIME:1 $JOR_BRA:1 $Intermittent:1 -
             $Spaces:27
end-if
end-procedure Create-C-Register

!**************************************
begin-procedure Delete-CAGED-Tbl
#debug show 'Procedure: Delete-CAGED-tbl'
#debug show '    $estabIDResp: ' $estabIDResp
#debug show '    $estabID    : ' $estabID
#debug show '    $Year       : ' $Year
#debug show '    $Month      : ' $Month
!**************************************
!#debug show $estabIDResp ' ' $estabID ' ' $emplID ' ' $Effdt ' ' $action ' ' $actionReason ' ' $actionCAGED ' ' $Year ' ' $Month
 
 if $ACERTO = 'Y'
    let $whereACERTO = 'AND   ACERTO_IND_BRA = ' || '''' || 'Y' || ''''
    let $whereACERTO = $whereACERTO || ' AND CAGED_STATUS_BRA <>  ' || '''' || 'F' || ''''
 else
    let $whereACERTO = ''
 end-if

begin-sql
delete from PS_CAGED_BRA 
where CAGED_ESTAB_ID_BRA = $estabIDResp   ! Responsable Establishment: Record A
and   ESTABID = $estabID                  ! Establishment: Record B
and   BALANCE_YEAR = #Year
and   MONTHCD = $Month
[$whereACERTO]
end-sql

#ifdef ORACLE
begin-sql 
   commit
end-sql       
#endif

end-procedure Delete-CAGED-Tbl

!**************************************
begin-procedure Delete-CAGED-Resp
#debug show 'Procedure: Delete-CAGED-Resp'
#debug show '    $estabIDResp: ' $estabIDResp
#debug show '    $Year       : ' $Year
#debug show '    $Month      : ' $Month
!**************************************

 If $ACERTO = 'Y'
    let $whereACERTO = 'AND   ACERTO_IND_BRA = ' || '''' || 'Y' || ''''
    let $whereACERTO = $whereACERTO || ' AND CAGED_STATUS_BRA <>  ' || '''' || 'F' || ''''
 else
    let $whereACERTO = ''
 end-if

begin-sql
delete from PS_CAGED_BRA 
where CAGED_ESTAB_ID_BRA = $estabIDResp   ! Responsable Establishment: Record A
and   BALANCE_YEAR = #Year
and   MONTHCD = $Month
[$whereACERTO]
end-sql

#ifdef ORACLE
begin-sql 
   commit
end-sql       
#endif
end-procedure Delete-CAGED-Resp

begin-procedure Delete-CAGED-Init
#debug show 'Procedure: Delete-CAGED-Init'
#debug show '    $estabIDResp: ' $estabIDResp
#debug show '    $Year       : ' $Year
#debug show '    $Month      : ' $Month
!**************************************

 If $ACERTO = 'Y'
    let $whereACERTO = 'AND   ACERTO_IND_BRA = ' || '''' || 'Y' || ''''
    let $whereACERTO = $whereACERTO || ' AND CAGED_STATUS_BRA <>  ' || '''' || 'F' || ''''
 else
    let $whereACERTO = ''
 end-if

begin-sql
delete from PS_CAGED_BRA 
where CAGED_ESTAB_ID_BRA = $estabIDrunCtrl  
and   BALANCE_YEAR = #Year
and   MONTHCD = $Month
and   CAGED_STATUS_BRA = 'O'
[$whereACERTO]
end-sql

#ifdef ORACLE
begin-sql 
   commit
end-sql       
#endif

end-procedure Delete-CAGED-Init

!**************************************
begin-procedure Delete-CAGED
!**************************************
if #Month >= 4
   #debug show 'Procedure: Delete-CAGED'
   #debug show '    $Year       : ' $Year
begin-sql
delete from PS_CAGED_BRA 
where BALANCE_YEAR < #Year
end-sql
end-if

end-procedure Delete-CAGED


!*****************************
!*** Change non ascii characters to its ascii equivalent.
begin-procedure Check-Strings( $StringIn , :$StringOut )
#debug show '** Check-Strings **'
!*****************************
let $StringIn  = ltrim(rtrim($StringIn, ' '),' ')
let #I = 1
let $StringOut = ''
let #Len = length($StringIn)
let $Test_Char1 = ''
let $Test_Char2 = ''
let $Test_Char3 = ''

while #I  <= #Len
   let $Test_Char    = substr($StringIn,#I, 1)
   let $Test_Char3   = $Test_Char2
   let $Test_Char2   = $Test_Char1
   let $Test_Char1   = $Test_Char
   if ($Test_Char3 = $Test_Char2 and $Test_Char2 = $Test_Char1) or ($Test_Char2 = $Test_Char1 and $Test_Char1 = ' ')
      let $Test_Char  = ''
   end-if
   let $Found = 'N'
   let #Test_Code = ascii(upper($Test_Char))
   if (#Test_Code > 64 and #Test_Code < 91) or (#Test_Code > 47 and #Test_Code < 58)
      let $StringOut = $StringOut || upper($Test_Char)
      let $Found = 'Y'
   end-if

   if ($Found = 'N')
      evaluate $Test_Char
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
        when = 'É'
        when = 'Ê'
        when = 'Ë'
        when = 'È'
          let $Test_Char = 'E'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
        when = 'ã'
        when = 'Á'
        when = 'Â'
        when = 'Ä'
        when = 'À'
        when = 'Å'
        when = 'Ã'
          let $Test_Char = 'A'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ï'
        when = 'î'
        when = 'ì'
        when = 'í'
        when = 'Ï'
        when = 'Î'
        when = 'Ì'
        when = 'Í'
          let $Test_Char = 'I'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'Ö'
        when = 'ó'
        when = 'Ô'
        when = 'Ö'
        when = 'Ò'
        when = 'Ö'
        when = 'Ó'
          let $Test_Char = 'O'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
        when = 'Ü'
        when = 'Û'
        when = 'Ù'
        when = 'Ú'
          let $Test_Char = 'U'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ñ'
        when = 'Ñ'
          let $Test_Char = 'N'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'Ç'
        when = 'ç'
          let $Test_Char = 'C'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = ' '
        when = '-'
          let $Test_Char = ' '
          let $StringOut  = $StringOut || $Test_Char
        when-other
          break
      end-evaluate
    end-if
    add 1 to #I
end-while
let $StringIn  = ''
end-procedure Check-Strings

!**************************************
begin-procedure Insert-CAGED-Tbl
#debug show '* Insert-CAGED-tbl'
!**************************************

if $estabIDResp = ''
 let $estabIDResp = $estabIDrunCtrl
end-if  

let $DisabilityTypeIns = '0'

begin-sql   
insert into PS_CAGED_BRA
(PROCESS_INSTANCE
,CAGED_ESTAB_ID_BRA
,ESTABID
,EMPLID
,EFFDT
,EFFSEQ
,EMPL_RCD
,LAST_HIRE_DT
,ACTION
,ACTION_REASON
,ACERTO_EXCL_BRA
,GP_PAYGROUP
,CAGED_REASON_BRA
,BALANCE_YEAR
,MONTHCD
,ACERTO_IND_BRA
,MONTHLY_RT
,HIRE_DT
,TERMINATION_DT
,DISABLED_BRA
,DISABLED_TYPE_BRA
,EMPL_CLASS
,CBO_CD_BRA
,NID_PIS_BRA
,NID_CTPS_BRA
,NID_CPF_BRA
,EDUCATION_LVL_BRA
,ETHNIC_GRP_CD
,CTPS_SERIES_BRA
,CTPS_STATE_BRA
,SEX
,BIRTHDATE
,REHIRE_DT
,SERVICE_DT
,CMPNY_SENIORITY_DT
,NAME_DISPLAY
,POSTAL
,CALC_RSLT_VAL
,CAGED_STATUS_BRA
,RUN_CNTL_ID
,UNEM_INSU_BEN_BRA
,PERIOD_OPTN_BRA
,DATE_FROM
,DATE_TO
,EXAM_REQD_BRA
,EXAM_NBR_BRA
,EXAM_DT
,LAB_CNPJ_BRA
,ORG_STAT_BRA
,STATE
,MED_CRM_BRA
,FULL_PART_TIME
,REG_JORN_BRA)
select
#prcs_process_instance
,$estabIDResp
,D.ESTABID
,D.EMPLID
,D.EFFDT
,D.EFFSEQ
,D.EMPL_RCD
,D.LAST_HIRE_DT
,D.ACTION
,D.ACTION_REASON
,0
,D.GP_PAYGROUP
,C.CAGED_REASON_BRA
,#Year
,$Month
,$ACERTO
,D.MONTHLY_RT
,E.HIRE_DT
,D.TERMINATION_DT
,CASE when DS.DISABLED IS NULL THEN 2 else 1 END
,' '
,D.EMPL_CLASS
,B.CBO_CD_BRA
,CASE when PNI.NATIONAL_ID IS NULL THEN '0' else PNI.NATIONAL_ID END
,CASE when PNI2.NATIONAL_ID IS NULL THEN '0' else PNI2.NATIONAL_ID END
,CASE when PNI3.NATIONAL_ID IS NULL THEN '0' else PNI3.NATIONAL_ID END
,' '
,' '
,CASE when PNI2.CTPS_SERIES_BRA IS NULL THEN ' ' else PNI2.CTPS_SERIES_BRA END
,CASE when PNI2.CTPS_STATE_BRA IS NULL THEN ' ' else PNI2.CTPS_STATE_BRA END
,A1.SEX
,F.BIRTHDATE
,E.REHIRE_DT
,E.SERVICE_DT
,E.CMPNY_SENIORITY_DT
,G.NAME_DISPLAY
,' '
,0
,'O'
,$prcs_run_cntl_id
,$UnemInsuBen
,$PeriodOptn
,$CountBeginDt
,$CountEndDt
,' '
,' '
,NULL
,' '
,' '
,' '
,' '
,CASE when D.FULL_PART_TIME is null then ' ' else D.FULL_PART_TIME END
,CASE when J.REG_JORN_BRA is null then ' ' else J.REG_JORN_BRA END
from PS_JOB D
    LEFT OUTER JOIN PS_PERS_NID PNI ON (D.EMPLID = PNI.EMPLID and PNI.COUNTRY = 'BRA' and PNI.NATIONAL_ID_TYPE = 'PIS')
    LEFT OUTER JOIN PS_PERS_NID_BRA_VW PNI2 ON (D.EMPLID = PNI2.EMPLID and D.EMPL_RCD = PNI2.EMPL_RCD and PNI2.COUNTRY = 'BRA' and (PNI2.NATIONAL_ID_TYPE = 'CTPS' or PNI2.NATIONAL_ID_TYPE = 'CPF'))
    LEFT OUTER JOIN PS_PERS_NID PNI3 ON (D.EMPLID = PNI3.EMPLID and PNI3.COUNTRY = 'BRA' and PNI3.NATIONAL_ID_TYPE = 'CPF')
    LEFT OUTER JOIN PS_DISABILITY DS ON (D.EMPLID = DS.EMPLID)
    ,PS_JOB_JR B
    LEFT OUTER JOIN PS_ADDL_INFO_BRA J ON J.EMPLID=B.EMPLID and J.EMPL_RCD=B.EMPL_RCD and J.EFFDT <= B.EFFDT
    ,PS_ACTN_REASON_BRA C
    ,PS_EMPLOYMENT E
    ,PS_PERS_DATA_EFFDT A1
    ,PS_PERSON F
    ,PS_PERSON_NAME G
    ,PS_CAGED_ESTAB_BRA CEB
where D.EMPLID                 = B.EMPLID
and (D.EFFDT                 BETWEEN $BeginDT and $EndDT 
or D.TERMINATION_DT             BETWEEN $BeginDT and $EndDT )
and D.EFFDT                  = B.EFFDT                  
and D.EMPL_RCD               = B.EMPL_RCD               
and D.EFFSEQ                 = B.EFFSEQ
and D.EMPL_CLASS in ('55', '10', '15', '60', '65', '90', '20', '25', '70', '75')
and D.ESTABID                = CEB.ESTABID
and CEB.PROCESS_INSTANCE     = #prcs_process_instance
and D.ACTION                 = C.ACTION
and D.ACTION_REASON          = C.ACTION_REASON

and (J.EFFDT IS NULL or J.EFFDT = (select MAX(BB.EFFDT) 
                                   from PS_ADDL_INFO_BRA BB 
                                   where BB.EMPLID=D.EMPLID 
                                   and BB.EMPL_RCD=D.EMPL_RCD 
                                   and BB.EFFDT <=$EndDT))
                    
and C.EFFDT                  = (select MAX(CC.EFFDT) 
                                from PS_ACTN_REASON_BRA CC
                                where CC.ACTION = C.ACTION
                                and   CC.ACTION_REASON = C.ACTION_REASON
                                and   CC.EFFDT <= D.EFFDT
                                [$UnempCondACT])
                                
and C.CAGED_REASON_BRA       <> '00'                                
and E.EMPLID                 = B.EMPLID
and E.EMPL_RCD               = B.EMPL_RCD
and A1.EMPLID                = B.EMPLID
and A1.EMPLID                = F.EMPLID
and A1.EMPLID                = G.EMPLID
and A1.EFFDT                 = (select MAX(AA.EFFDT) 
                                from PS_PERS_DATA_EFFDT AA where AA.EMPLID = A1.EMPLID
                                and AA.EFFDT <= $EndDT)
AND NOT EXISTS (SELECT 'X' FROM PS_CAGED_BRA ICG 
   WHERE ICG.ESTABID = D.ESTABID 
    AND ICG.EMPLID = D.EMPLID
    AND ICG.EMPL_RCD = D.EMPL_RCD
    AND ICG.EFFDT = D.EFFDT
    AND ICG.ACTION = D.ACTION
    AND ICG.ACTION_REASON = D.ACTION_REASON
    AND ICG.BALANCE_YEAR  = #Year
    AND ICG.MONTHCD  = $Month
    and ICG.CAGED_STATUS_BRA = 'F')   
[$UnempCond]
  
end-sql

begin-sql
   DELETE from PS_CAGED_BRA 
      where PROCESS_INSTANCE = #prcs_process_instance 
        AND TERMINATION_DT < $BeginDt
end-sql   

    do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_CAGED_BRA COMPUTE STATISTICS
        end-sql
    #endif

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.EDUCATION_LVL_BRA = (select PR.EDUCATION_LVL_BRA
                                      from PS_PERS_DATA_BRA PR
                                      where PR.EMPLID = PS_CAGED_BRA.EMPLID
                                      and PR.EFFDT = (select MAX(PR1.EFFDT)
                                                      from PS_PERS_DATA_BRA PR1
                                                      where PR1.EMPLID = PR.EMPLID
                                                      and PR1.EFFDT <= $EndDT))
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and exists (select 'X'
                                from PS_PERS_DATA_BRA PR
                                where PR.EMPLID = PS_CAGED_BRA.EMPLID
                                and PR.EFFDT  = (select MAX(PR1.EFFDT)
                                                 from PS_PERS_DATA_BRA PR1
                                                 where PR1.EMPLID = PR.EMPLID
                                                 and PR1.EFFDT <= $EndDT))                                                
end-sql                                                 
                                                 
begin-sql
update PS_CAGED_BRA                                                  
SET PS_CAGED_BRA.ETHNIC_GRP_CD = (select PR.ETHNIC_GRP_CD
                                  from PS_PERS_DATA_BRA PR
                                  where PR.EMPLID = PS_CAGED_BRA.EMPLID
                                  and PR.EFFDT  = (select MAX(PR1.EFFDT)
                                                   from PS_PERS_DATA_BRA PR1
                                                   where PR1.EMPLID = PR.EMPLID
                                                   and PR1.EFFDT <= $EndDT))
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and exists (select 'X' from PS_PERS_DATA_BRA PR
                                where PR.EMPLID = PS_CAGED_BRA.EMPLID
                                and PR.EFFDT  = (select MAX(PR1.EFFDT)
                                                 from PS_PERS_DATA_BRA PR1
                                                 where PR1.EMPLID = PR.EMPLID
                                                 and PR1.EFFDT <= $EndDT))                                                                                              

end-sql

begin-sql
update PS_CAGED_BRA                                                  
SET PS_CAGED_BRA.POSTAL = (select A.POSTAL from PS_ADDRESSES A
                          where A.EMPLID     = PS_CAGED_BRA.EMPLID 
                          and A.ADDRESS_TYPE = 'HOME'
                          and A.EFF_STATUS   = 'A'
                          and A.COUNTRY      = 'BRA'
                          and A.EFFDT        = (select MAX(AA.EFFDT) 
                          from PS_ADDRESSES AA 
                          where AA.EMPLID = A.EMPLID
                          and AA.EFFDT <= $EndDT))
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and exists  (select A.POSTAL from PS_ADDRESSES A
                          where A.EMPLID     = PS_CAGED_BRA.EMPLID 
                          and A.ADDRESS_TYPE = 'HOME'
                          and A.EFF_STATUS   = 'A'
                          and A.COUNTRY      = 'BRA'
                          and A.EFFDT        = (select MAX(AA.EFFDT) 
                          from PS_ADDRESSES AA 
                          where AA.EMPLID = A.EMPLID
                          and AA.EFFDT <= $EndDT))                                                                                              
end-sql

begin-sql
update PS_CAGED_BRA  
SET PS_CAGED_BRA.DISABLED_TYPE_BRA = (select A.DISABLED_TYPE_BRA
from PS_DISABILITY_BRA A, PS_DISABILITY B
where A.EMPLID = PS_CAGED_BRA.EMPLID
and B.DISABLED = 'Y'
and A.EMPLID=B.EMPLID
and A.EFFDT = (select MAX(D.EFFDT)
               from PS_DISABILITY_BRA D
               where D.EMPLID = A.EMPLID
               and   D.EFFDT <= $EndDt ))
where PS_CAGED_BRA.PROCESS_INSTANCE    = #prcs_process_instance
and exists  (select 'X'
             from PS_DISABILITY_BRA A1, PS_DISABILITY B1
             where A1.EMPLID = PS_CAGED_BRA.EMPLID
             and B1.DISABLED = 'Y'
             and A1.EMPLID=B1.EMPLID
             and A1.EFFDT = (select MAX(D1.EFFDT)
                            from PS_DISABILITY_BRA D1
                            where D1.EMPLID = A1.EMPLID
                            and   D1.EFFDT <= $EndDt ))
           
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.EXAM_REQD_BRA = (select CBO.EXAM_REQD_BRA
                                  from PS_CBO_CD_TBL_BRA CBO 
                                  where CBO.CBO_CD_BRA = PS_CAGED_BRA.CBO_CD_BRA 
                                  and CBO.EFFDT      = (select max(CBO1.EFFDT)
                                                     from PS_CBO_CD_TBL_BRA CBO1
                                                     where CBO1.CBO_CD_BRA = CBO.CBO_CD_BRA
                                                       and CBO1.EFFDT     <= PS_CAGED_BRA.EFFDT)
                                 and CBO.EFF_STATUS = 'A')
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and exists (select 'X'
            from PS_CBO_CD_TBL_BRA CBO2 
            where CBO2.CBO_CD_BRA = PS_CAGED_BRA.CBO_CD_BRA 
              and CBO2.EFFDT      = (select max(CBO3.EFFDT)
                                     from PS_CBO_CD_TBL_BRA CBO3
                                     where CBO3.CBO_CD_BRA = CBO2.CBO_CD_BRA
                                       and CBO3.EFFDT     <= PS_CAGED_BRA.EFFDT)
              and CBO2.EFF_STATUS = 'A')
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.EXAM_NBR_BRA = (select DRUG.EXAM_NBR_BRA
                                 from PS_EMP_DRUG_TS_BRA DRUG 
                                 where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                                 and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                                 and DRUG.EXAM_DT = (select max(DRUG1.EXAM_DT)
                                                   from PS_EMP_DRUG_TS_BRA DRUG1
                                                   where DRUG1.EMPLID   = DRUG.EMPLID
                                                     and DRUG1.EMPL_RCD = DRUG.EMPL_RCD
                                                     and DRUG1.EXAM_DT <= $EndDT))
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_EMP_DRUG_TS_BRA DRUG2 
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = (select max(DRUG3.EXAM_DT)
                                   from PS_EMP_DRUG_TS_BRA DRUG3
                                   where DRUG3.EMPLID   = DRUG2.EMPLID
                                     and DRUG3.EMPL_RCD = DRUG2.EMPL_RCD
                                     and DRUG3.EXAM_DT <= $EndDT))
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.EXAM_DT  = (select DRUG.EXAM_DT
                             from PS_EMP_DRUG_TS_BRA DRUG 
                             where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                               and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                               and DRUG.EXAM_DT = (select max(DRUG1.EXAM_DT)
                                                   from PS_EMP_DRUG_TS_BRA DRUG1
                                                   where DRUG1.EMPLID   = DRUG.EMPLID
                                                     and DRUG1.EMPL_RCD = DRUG.EMPL_RCD
                                                     and DRUG1.EXAM_DT <= $EndDT))
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_EMP_DRUG_TS_BRA DRUG2 
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = (select max(DRUG3.EXAM_DT)
                                   from PS_EMP_DRUG_TS_BRA DRUG3
                                   where DRUG3.EMPLID   = DRUG2.EMPLID
                                     and DRUG3.EMPL_RCD = DRUG2.EMPL_RCD
                                     and DRUG3.EXAM_DT <= $EndDT))
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.LAB_CNPJ_BRA = (select LAB.LAB_CNPJ_BRA
                             from PS_LAB_PROVID_BRA LAB 
                                , PS_EMP_DRUG_TS_BRA DRUG 
                             where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                               and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                               and DRUG.EXAM_DT = PS_CAGED_BRA.EXAM_DT
                               and LAB.LAB_ID_BRA = DRUG.LAB_ID_BRA
                               and LAB.EFFDT = (select max(LAB1.EFFDT)
                                                from PS_LAB_PROVID_BRA LAB1
                                                where LAB1.LAB_ID_BRA = LAB.LAB_ID_BRA
                                                  and LAB1.EFFDT <= $EndDT)
                               and LAB.EFF_STATUS = 'A')
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_LAB_PROVID_BRA LAB2 
               , PS_EMP_DRUG_TS_BRA DRUG2
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = PS_CAGED_BRA.EXAM_DT
              and LAB2.LAB_ID_BRA = DRUG2.LAB_ID_BRA
              and LAB2.EFFDT = (select max(LAB3.EFFDT)
                                from PS_LAB_PROVID_BRA LAB3
                                where LAB3.LAB_ID_BRA = LAB2.LAB_ID_BRA
                                  and LAB3.EFFDT <= $EndDT)
              and LAB2.EFF_STATUS = 'A')
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.ORG_STAT_BRA = (select PHY.ORG_STAT_BRA
                             from PS_PHYSICIAN_BRA PHY 
                                , PS_EMP_DRUG_TS_BRA DRUG 
                             where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                               and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                               and DRUG.EXAM_DT = PS_CAGED_BRA.EXAM_DT
                               and PHY.NON_EMPLOYEE_ID = DRUG.NON_EMPLOYEE_ID)
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_PHYSICIAN_BRA PHY1
               , PS_EMP_DRUG_TS_BRA DRUG2
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = PS_CAGED_BRA.EXAM_DT
              and PHY1.NON_EMPLOYEE_ID = DRUG2.NON_EMPLOYEE_ID)
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.STATE    = (select PHY.STATE
                             from PS_PHYSICIAN_BRA PHY 
                                , PS_EMP_DRUG_TS_BRA DRUG 
                             where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                               and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                               and DRUG.EXAM_DT = PS_CAGED_BRA.EXAM_DT
                               and PHY.NON_EMPLOYEE_ID = DRUG.NON_EMPLOYEE_ID)
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_PHYSICIAN_BRA PHY1
               , PS_EMP_DRUG_TS_BRA DRUG2
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = PS_CAGED_BRA.EXAM_DT
              and PHY1.NON_EMPLOYEE_ID = DRUG2.NON_EMPLOYEE_ID)
end-sql

begin-sql
update PS_CAGED_BRA 
SET PS_CAGED_BRA.MED_CRM_BRA = (select PHY.MED_CRM_BRA
                             from PS_PHYSICIAN_BRA PHY 
                                , PS_EMP_DRUG_TS_BRA DRUG 
                             where DRUG.EMPLID  = PS_CAGED_BRA.EMPLID
                               and DRUG.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
                               and DRUG.EXAM_DT = PS_CAGED_BRA.EXAM_DT
                               and PHY.NON_EMPLOYEE_ID = DRUG.NON_EMPLOYEE_ID)
where PS_CAGED_BRA.PROCESS_INSTANCE = #prcs_process_instance
and PS_CAGED_BRA.EXAM_REQD_BRA      = 'Y'
and exists (select 'X'
            from PS_PHYSICIAN_BRA PHY1
               , PS_EMP_DRUG_TS_BRA DRUG2
            where DRUG2.EMPLID  = PS_CAGED_BRA.EMPLID
              and DRUG2.EMPL_RCD = PS_CAGED_BRA.EMPL_RCD
              and DRUG2.EXAM_DT = PS_CAGED_BRA.EXAM_DT
              and PHY1.NON_EMPLOYEE_ID = DRUG2.NON_EMPLOYEE_ID)
end-sql

do Update-Amounts

#debug show 'End Insert-CAGED-tbl'
end-procedure Insert-CAGED-tbl

!*************************************
begin-procedure Insert-CAGED-Compl
#debug show '* Insert-CAGED-Compl'
!*************************************

begin-sql
  Insert into PS_CAGED_ESTMP_BRA
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID
     ,EMPLID
     ,EMPL_RCD
     ,EFFDT
     ,EFFSEQ
     ,ACERTO_EXCL_BRA
     ,ESTAB_ID_TYPE_BRA
     ,ESTAB_ID_BRA
     ,COMP_INS_TYPE_BRA
     ,COUNTRY
     ,ESTAB_ASOC_BRA)
  SELECT CAG.PROCESS_INSTANCE, 
         CAG.CAGED_ESTAB_ID_BRA, 
         CAG.ESTABID, 
         CAG.EMPLID, 
         CAG.EMPL_RCD, 
         CAG.EFFDT, 
         CAG.EFFSEQ, 
         CAG.ACERTO_EXCL_BRA,
         EID.ESTAB_ID_TYPE_BRA,
         EID.ESTAB_ID_BRA,
         ETB.COMP_INS_TYPE_BRA,
         EST.COUNTRY,
         ETB.ESTAB_ASOC_BRA
  FROM PS_CAGED_BRA CAG ,
       PS_ESTAB_TBL EST , 
       PS_ESTAB_TBL_BRA ETB ,
       PS_ESTAB_ID_BRA EID
  WHERE CAG.PROCESS_INSTANCE = #prcs_process_instance
       AND EST.ESTABID = CAG.ESTABID 
       AND EST.EFFDT = ( SELECT MAX(E2.EFFDT) 
                           FROM PS_ESTAB_TBL E2
                           WHERE E2.ESTABID = EST.ESTABID
                             AND E2.EFFDT <= $EndDt )
       AND ETB.ESTABID = CAG.ESTABID
       AND ETB.EFFDT = ( SELECT MAX(E3.EFFDT) 
                           FROM PS_ESTAB_TBL_BRA E3
                           WHERE E3.ESTABID = ETB.ESTABID
                             AND E3.EFFDT <= $EndDt )
      AND ( ( ETB.COMP_INS_TYPE_BRA = '10'
           AND EID.ESTAB_ID_TYPE_BRA = 'CNPJ' )
             OR
            ( ETB.COMP_INS_TYPE_BRA = '20'
           AND EID.ESTAB_ID_TYPE_BRA = 'CEI' ) )
      AND EID.ESTABID = CAG.ESTABID
      AND EID.COUNTRY = EST.COUNTRY
      AND EID.COUNTY_CD_BRA = ETB.COUNTY_CD_BRA
      AND EID.EFFDT = EST.EFFDT
    
end-sql

begin-sql
   INSERT INTO PS_CAGED_ESTMA_BRA 
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID
     ,EMPLID
     ,EMPL_RCD
     ,EFFDT
     ,EFFSEQ
     ,ACERTO_EXCL_BRA
     ,ESTAB_ID_TYPE_BRA
     ,ESTAB_ID_BRA
     ,COMP_INS_TYPE_BRA
     ,COUNTRY
     ,ESTAB_ASOC_BRA
     ,ESTAB_ID2_BRA)
  SELECT 
       TMP.PROCESS_INSTANCE,
       TMP.CAGED_ESTAB_ID_BRA,
       TMP.ESTABID,
       TMP.EMPLID,
       TMP.EMPL_RCD,
       TMP.EFFDT,
       TMP.EFFSEQ,
       TMP.ACERTO_EXCL_BRA,
       TMP.ESTAB_ID_TYPE_BRA,
       TMP.ESTAB_ID_BRA,
       TMP.COMP_INS_TYPE_BRA,
       TMP.COUNTRY,
       TMP.ESTAB_ASOC_BRA,
       EID.ESTAB_ID_BRA
    FROM PS_CAGED_ESTMP_BRA TMP,
         PS_ESTAB_ID_BRA EID
    WHERE TMP.PROCESS_INSTANCE = #prcs_process_instance
      AND EID.ESTABID = TMP.ESTAB_ASOC_BRA
      AND EID.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_ID_BRA EID2
                             WHERE EID2.ESTABID = EID.ESTABID
                               AND EID2.EFFDT <= $EndDt )
      AND EID.ESTAB_ID_TYPE_BRA = 'CNPJ'
end-sql

begin-sql
   INSERT INTO PS_CAGED_ESTMA_BRA 
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID
     ,EMPLID
     ,EMPL_RCD
     ,EFFDT
     ,EFFSEQ
     ,ACERTO_EXCL_BRA
     ,ESTAB_ID_TYPE_BRA
     ,ESTAB_ID_BRA
     ,COMP_INS_TYPE_BRA
     ,COUNTRY
     ,ESTAB_ASOC_BRA
     ,ESTAB_ID2_BRA)
   SELECT 
       TMP.PROCESS_INSTANCE,
       TMP.CAGED_ESTAB_ID_BRA,
       TMP.ESTABID,
       TMP.EMPLID,
       TMP.EMPL_RCD,
       TMP.EFFDT,
       TMP.EFFSEQ,
       TMP.ACERTO_EXCL_BRA,
       TMP.ESTAB_ID_TYPE_BRA,
       TMP.ESTAB_ID_BRA,
       TMP.COMP_INS_TYPE_BRA,
       TMP.COUNTRY,
       TMP.ESTAB_ASOC_BRA,
       TMP.ESTAB_ID_BRA
     FROM PS_CAGED_ESTMP_BRA TMP
     WHERE TMP.PROCESS_INSTANCE = #prcs_process_instance
       AND TMP.ESTAB_ASOC_BRA= ' ' 
end-sql

begin-sql 
  insert into PS_CAGED_TMP2_BRA
     (PROCESS_INSTANCE
     ,ESTABID
     ,ESTAB_ID_BRA
     ,ESTAB_ID2_BRA)
  select DISTINCT CG.PROCESS_INSTANCE
    , CG.ESTABID
    , CGE.ESTAB_ID_BRA 
    , CGE.ESTAB_ID2_BRA
 from PS_CAGED_BRA CG,
      PS_CAGED_ESTMA_BRA CGE
 where CG.PROCESS_INSTANCE    = #prcs_process_instance  
  and CGE.PROCESS_INSTANCE   = CG.PROCESS_INSTANCE
   and CGE.CAGED_ESTAB_ID_BRA = CG.CAGED_ESTAB_ID_BRA
   and CGE.ESTABID            = CGE.ESTABID
   and CGE.EMPLID             = CG.EMPLID
   and CGE.EMPL_RCD           = CG.EMPL_RCD
   and CGE.EFFDT              = CG.EFFDT
   and CGE.EFFSEQ             = CG.EFFSEQ
   and CGE.ACERTO_EXCL_BRA    = CG.ACERTO_EXCL_BRA

   
end-sql

begin-sql
   INSERT INTO PS_CAGED_ESTB1_BRA 
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID)
   SELECT DISTINCT 
       PROCESS_INSTANCE,
       CAGED_ESTAB_ID_BRA, 
       ESTABID 
     FROM PS_CAGED_BRA 
     WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

   do Commit-Transaction

    #ifdef ORACLE
        begin-sql
            ANALYZE table PS_CAGED_ESTMA_BRA COMPUTE STATISTICS
        end-sql
    #endif

#debug show 'End Insert-CAGED-Compl'
end-procedure Insert-CAGED-Compl

!**************************************
begin-procedure Select-Payee-Parm
!#debug show '** Select-Payee-Parm **'
!**************************************
let $HrsWork = '00'
let #Hours = 0
begin-select  
NN.GPBR_WEEKLY_HOURS
    
  let #Hours  =  &NN.GPBR_WEEKLY_HOURS
    
  if #Hours > 0
     if #Hours > 44        
        let $HrsWork  =  edit(#Hours, '000.00')
        show '<*> HORAS TRABALHADAS> ' $HrsWork ' Por semana (de 1 até 44 horas) - Empregado '  $emplID          
        let $HrsWork  =  substr($HrsWork,2,2) 
        if #Hours > 99
           let $HrsWork = '00'
           let #Hours = 0
        end-if    
     else  
        let $HrsWork  =  edit(#Hours, '000.00') 
        let $HrsWork  =  substr($HrsWork,2,2)
     end-if
  end-if
  
from PS_GPBR_PAYEE_PARM NN
where NN.EMPLID   = $emplID
and   NN.EMPL_RCD = #emplRcd
and   NN.BGN_DT   = (select MAX(N.BGN_DT) 
                     from PS_GPBR_PAYEE_PARM N
                     where N.EMPLID   = NN.EMPLID
                     and   N.EMPL_RCD = NN.EMPL_RCD
                     and   N.BGN_DT  <=  $Effdt)
end-select

#debug show '$HrsWork: ' $HrsWork

if #Hours = 0
   show '<*> Não existe HORAS TRABALHADAS - Empregado '  $emplID 
end-if

end-procedure Select-Payee-Parm

!**************************************
begin-procedure Fill-Leading
!show '*** Fill-Leading ***'
!**************************************
    let $BeginField = rtrim($BeginField,' ')
    let $BeginField = ltrim($BeginField,' ')
    let #LenField   = length($BeginField)
    let #SPACES     = #Long - #LenField
    let #Conter     = 1
    let $EndField   = ''
    
    while #Conter <= #SPACES
        let $EndField = $EndField || ' '
        add 1 to #Conter
    end-while

    let $EndField = $BeginField || $EndField
    
end-procedure Fill-Leading

!**************************************
begin-procedure Format-Numbers
!show '** Format-Numbers **'
!**************************************
    let $EndField   = ''
    let $BeginField = rtrim($BeginField,' ')
    let $BeginField = ltrim($BeginField,' ')
    let #LenField   = length($BeginField)
    let #SPACES     = #Long - #LenField
    let #Conter = 1
    
    while #Conter <= #SPACES
        let $EndField = $EndField || '0'
        add 1 to #Conter
    end-while

    let $EndField =  $EndField || $BeginField 
    
end-procedure Format-Numbers

!**************************************
begin-procedure Get-Xlat
!#debug show '* Get-Xlat'

let $XlatDescr = ''

begin-select     
XX.XLATLONGNAME

  let $XlatDescr = substr(rtrim(&XX.XLATLONGNAME,' '),1,29)
  
from XLATTABLE_VW XX
where XX.FIELDNAME  = $XlatField
and   XX.FIELDVALUE = $XlatValue
end-select

begin-select     
XL.XLATLONGNAME 

  let $XlatDescr = substr(rtrim(&XL.XLATLONGNAME,' '),1,29)  
  
from PSXLATITEMLANG XL
where XL.FIELDNAME = $XlatField
and XL.FIELDVALUE  = $XlatValue
and XL.LANGUAGE_CD = $Curr_language_Cd 
end-select
end-procedure Get-Xlat

!**************************************
begin-procedure Get-EmplClass
!#debug show '* Get-EmplClass'

let $XlatDescr = ''

begin-select     
EC.DESCR

  let $EmplClassDescr = substr(rtrim(&EC.DESCR,' '),1,29)
  
from PS_EMPL_CLASS_TBL EC
where EC.SETID  = 'BRA'
and   EC.EMPL_CLASS = $EmplClass
end-select

begin-select     
ECL.DESCR

  let $EmplClassDescr = substr(rtrim(&EC.DESCR,' '),1,29) 
  
from PS_EMPL_CL_TBL_LNG ECL
where ECL.SETID  = 'BRA'
and   ECL.EMPL_CLASS = $EmplClass
and   ECL.LANGUAGE_CD = $Curr_language_Cd 
end-select
end-procedure Get-EmpClass

!**************************************
begin-procedure Delete-Temp-Caged
!show '** Delete-Temp-Caged **'
!**************************************

begin-sql
delete from PS_CAGED_ESTAB_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_CAGED_ESTB1_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_CAGED_ESTMA_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_CAGED_ESTMP_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_CAGED_TMP_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-sql
delete from PS_CAGED_TMP2_BRA
where PROCESS_INSTANCE = #prcs_process_instance
end-sql

end-procedure Delete-Temp-Caged

!**************************************
begin-procedure Close-CAGED
!show '** Close-CAGED **'
!**************************************

close 1


    #ifdef UNIX
      do ConvertUnixToDOSWin($FILE_NAME)
    #endif
    
  do Get-Current-DateTime
  date-time () hh:mi:ss &timeEnds
  display 'Report Ended: ' noline
  display &timeEnds

end-procedure Close-CAGED

begin-procedure delete_caged_optn
begin-sql
delete from PS_CAGED_BRA 
where RUN_CNTL_ID=$prcs_run_cntl_id 
and CAGED_STATUS_BRA='O'
and CAGED_ESTAB_ID_BRA=$estabIDrunCtrl 
end-sql

begin-sql
UPDATE PS_CAGED_RC_BRA 
SET PS_CAGED_RC_BRA.DELETE_CAGED_BRA='N'
where PS_CAGED_RC_BRA.RUN_CNTL_ID=$prcs_run_cntl_id 
and PS_CAGED_RC_BRA.ESTABID=$estabIDrunCtrl 
end-sql
end-procedure delete_caged_optn

begin-procedure finalize_caged_optn
begin-sql
update PS_CAGED_BRA  
SET Caged_status_bra='F'
where RUN_CNTL_ID=$prcs_run_cntl_id 
and CAGED_STATUS_BRA='O'
and CAGED_ESTAB_ID_BRA=$estabIDrunCtrl                    
end-sql

begin-sql
UPDATE PS_CAGED_RC_BRA 
SET Finalize_CAGED_BRA='N'
where RUN_CNTL_ID=$prcs_run_cntl_id 
and ESTABID=$estabIDrunCtrl 
end-sql

!begin-sql
!delete from PS_CAGED_TMP_BRA 
!where PROCESS_INSTANCE = #prcs_process_instance
!end-sql

end-procedure finalize_caged_optn

begin-procedure Get-Estab-To-Process
#debug show '* Get-Estab-To-Process'

begin-sql
  INSERT INTO PS_CAGED_ESTAB_BRA
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID)
  SELECT [$prcs_process_instance],
         CENTR.CENTR_ESTABID_BRA, 
         CENTR.ESTABID
  FROM PS_CENTR_DTL_BRA CENTR
  WHERE CENTR.CENTR_ESTABID_BRA = $estabIDrunCtrl 
    AND CENTR.PROCESS_TYPE_BRA = '20' 
    AND CENTR.EFFDT            = (select MAX(A_ED.EFFDT) 
                  from PS_CENTR_DTL_BRA A_ED 
                  Where A_ED.ESTABID = CENTR.ESTABID
                    AND A_ED.PROCESS_TYPE_BRA = '20'
                  AND A_ED.EFFDT <= $EndDt )
end-sql
         
begin-sql       
  INSERT INTO PS_CAGED_ESTAB_BRA
     (PROCESS_INSTANCE
     ,CAGED_ESTAB_ID_BRA
     ,ESTABID)  
  SELECT [$prcs_process_instance],
         EST.ESTABID, 
         EST.ESTABID 
  FROM PS_ESTAB_TBL EST
  WHERE EST.ESTABID = $estabIDrunCtrl
    AND EST.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL EST2 
                        WHERE EST2.ESTABID = EST.ESTABID
                          AND EST2.EFFDT <= $EndDt ) 
    AND NOT EXISTS (SELECT 'X' FROM PS_CAGED_ESTAB_BRA CBR
                          WHERE CBR.PROCESS_INSTANCE = #prcs_process_instance
                            AND CBR.ESTABID = EST.ESTABID)
end-sql
                  
end-procedure Get-Estab-To-Process

!**************************************
#include 'reset.sqc'     !Reset Printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'
#include 'brfile01.sqc'  !File Utilities
