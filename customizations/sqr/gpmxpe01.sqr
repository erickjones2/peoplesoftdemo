!***********************************************************************
! GPMXPE01.- Payroll Result Register.                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  29773812                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment

Begin-Setup
#include 'ptset01.sqc'
End-Setup

begin-report
  do Init-Datetime
  do Init-Number
  do Stdapi-Init
  move '1' to $ReportDateType   ! Set for date to format as DMY
  move '1' to $ReportYear4      ! Set for year to be formatted YYYY
  do Init-Processing
  do Select-Parameters
  do Get-PR-Status
  do Def-Arrays
  do Process-Main
  do Stdapi-Term
  do Reset                        ! called from reset1.sqc
end-report


begin-procedure Init-Processing
   do Get-Current-Datetime
  do Init-Report
  do Get-Language-Codes
  display $ReportID
  display $ReportTitle
  display $Version
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
end-procedure  Init-Processing


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc              *
!               Get_Field_Information                                  *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report
  let #StdFont     = 5                  !Times Roman proportional
  let #StmtPntSize = 8                  !statement point-size
  let #DescrSize   = 6                  !Pin Name Size Print

  Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont
    let $ReportID  = 'GPMXPE01'          ! Printed in header
    do Init_Report_Translation ($ReportID, $curr_language_cd)
    do Append_Report_Translation ('GPMXPE01')
    do Get_Field_Information ('GPMXPE01', 'GPMXPE01_TITLE', $GPMXPE01_Title,     #DW)
    do Get_Field_Information ('GPMXPE01', 'CAL_RUN_ID',     $Cal_Group_ID,       #DW)
    do Get_Field_Information ('GPMXPE01', 'FREQUENCY',      $Frequency_lbl,      #DW)
    do Get_Field_Information ('GPMXPE01', 'AMOUNT',         $Amount,             #DW)
    do Get_Field_Information ('GPMXPE01', 'UNIT',           $Unit,               #DW)
    do Get_Field_Information ('GPMXPE01', 'ELEMENT_DESCR',  $Description,        #DW)
    do Get_Field_Information ('GPMXPE01', 'ELEMENT_NAME',   $Element_Name,       #DW)
    do Get_Field_Information ('GPMXPE01', 'EMPLID_TOTAL',   $Emplid_Tot,         #DW)
    do Get_Field_Information ('GPMXPE01', 'PAY_GRP',        $Gp_paygroup_lbl,    #DW)
    do Get_Field_Information ('GPMXPE01', 'PAY_PRD_BEG_DT', $Cal_Prd_Bg_lbl,     #DW)
    do Get_Field_Information ('GPMXPE01', 'PAY_PRD_END_DT', $Cal_Prd_Ed_lbl,     #DW)
    do Get_Field_Information ('GPMXPE01', 'COMPANY',        $Company_lbl,        #DW)
    do Get_Field_Information ('GPMXPE01', 'PYMT_DT',        $Cal_Prd_Py_lbl,     #DW)
    do Get_Field_Information ('GPMXPE01', 'EMPLID',         $Emplid_lbl,         #DW)
    do Get_Field_Information ('GPMXPE01', 'COMPANY_RFC',    $Company_Rfc_lbl,    #DW)
    do Get_Field_Information ('GPMXPE01', 'CURP',           $CURP_lbl,           #DW)
    do Get_Field_Information ('GPMXPE01', 'DAILY_RT',       $Daily_Rt_lbl,       #DW)
    do Get_Field_Information ('GPMXPE01', 'DEPTID',         $Deptid_lbl,         #DW)
    do Get_Field_Information ('GPMXPE01', 'EMPLID_RFC',     $Emplid_RFC_lbl,     #DW)
    do Get_Field_Information ('GPMXPE01', 'EMP_NM',         $Emplid_Name_lbl,    #DW)
    do Get_Field_Information ('GPMXPE01', 'ESTABID',        $Estabid_lbl,        #DW)
    do Get_Field_Information ('GPMXPE01', 'FORMATID',       $Format_lbl,         #DW)
    do Get_Field_Information ('GPMXPE01', 'IMSS',           $IMSS_lbl,           #DW)
    do Get_Field_Information ('GPMXPE01', 'SDI',            $SDI_lbl,            #DW)
    do Get_Field_Information ('GPMXPE01', 'SERVICE_DT',     $Hire_lbl,           #DW)
    do Get_Field_Information ('GPMXPE01', 'TERMINATION_DT', $Termination_lbl,    #DW)
    do Get_Field_Information ('GPMXPE01', 'STD_HRS',        $Std_Hrs_lbl,        #DW)
    do Get_Field_Information ('GPMXPE01', 'SALARY_TYPE',    $Salary_Type_lbl,    #DW)
    do Get_Field_Information ('GPMXPE01', 'PR_STAT_FINAL',  $Calc_Stat_Final,    #DW)
    do Get_Field_Information ('GPMXPE01', 'PR_STAT_OPEN',   $Calc_Stat_Open,     #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_CO_NM',   $stdhdg_co_nm,       #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_REP_ID',  $stdhdg_rep_id,      #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_PAGE_NO', $stdhdg_page_no,     #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_RUN_DT',  $stdhdg_run_dt,      #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_RUN_TM',  $stdhdg_run_tm,      #DW)
    do Get_Field_Information ('GPMXPE01', 'STDHDG_END_RPT', $stdhdg_end_rep,     #DW)
    do Get_Field_Information ('GPMXPE01', 'RESUME_COMPANY', $Resume_Company,     #DW)
    do Get_Field_Information ('GPMXPE01', 'RESUME_EMPLOYEE', $Processed_Empl,    #DW)


!***********************************************************************
!                                                                      *
! Report variables.                                                    *
!                                                                      *
!***********************************************************************

    let $ReportTitle           = $GPMXPE01_Title     ! Printed in header
    let $ReportDate            = $AsOfToday          ! Printed in header
  !  let $ReportTime            = $AsOfNow            ! Printed in header
    let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    let #Maxlines              = 79                  ! # rows on a page, used for page breaking
    let $Rpt_Hdr_FirstTimeThru  = 'True'
    let $Version = '2019 PUM31.02'
    do get-code-dayspay

end-procedure Init-Report

!***************************
Begin-heading 13
!***************************
    Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
    graphic (, 1, 125) box 4
    print '            '    (1,1)
    print $stdhdg_co_nm     ()          center
    print $stdhdg_rep_id    (+1,2)
    print $ReportID         (0,+2)
    print $ReportTitle      ()          center

    let #RptCol = {ColR} - 10

    print $stdhdg_page_no   (0,#RptCol)
    print #page-count       (0,+5)      edit 88888888
    print $Calc_Stat        (+1,)       center
    print $stdhdg_run_dt    (0,#RptCol)

 !   if $Rpt_Hdr_FirstTimeThru  = 'True'
 !      let $RptDtUnformated = $ReportDate
 !      do Format-DateTime($RptDtUnformated, $RptDtFormated, {DEFDMY}, '', '')
 !      let $ReportDate = $RptDtFormated
 !   end-if

    let $Rpt_Hdr_FirstTimeThru = 'False'

    print $ReportDate       (0,+5)
    print $stdhdg_run_tm    (+1,#RptCol)
    print $ReportTime       (0,+5)

    #define Col_Hc1    3
    #define Col_Hc2    27
    #define Col_Hc3    72
    #define Col_Hc4    94

    #define Col_Ec1    3
    #define Col_Ec2    15
    #define Col_Ec3    42
    #define Col_Ec4    61
    #define Col_Ec5    76
    #define Col_Ec6    98
    #define Col_Ec7   118

    #define Col_Ed1    3
    #define Col_Ed2    20
    #define Col_Ed3    43
    #define Col_Ed4    53
    #define Col_Ed5    66
    #define Col_Ed6    81
    #define Col_Ed7    103
    #define Col_Ed8    115
        #define Col_Ed9    118
!    #define Col_Ed9    100

      do Get-Company-Data-Mex
      do Get-Format
      do Get-Paygroup-Rel-Lang

    graphic (+2, 1, 125) box 4

    print $Company_lbl                (,{Col_Hc1})
    print $Company                    (,{Col_Hc2})
    print $CompanyName                (,+2)
    print $Cal_Prd_Bg_lbl             (,{Col_Hc3})
    print $Period_Begin_Date          (,{Col_Hc4})
    print $Company_Rfc_lbl            (+1,{Col_Hc1})
    print $Company_Rfc                (,{Col_Hc2})
    print $Cal_Prd_Ed_lbl             (,{Col_Hc3})
    print $Period_End_Date            (,{Col_Hc4})
    print $Gp_paygroup_lbl            (+1,{Col_Hc1})
    print $Paygroup                   (,{Col_Hc2})
    print $Paygroup_Descr             (,+3,22)
    print $Cal_Prd_Py_lbl             (,{Col_Hc3})
    print $Payment_Date               (,{Col_Hc4})
    print $Cal_Group_ID               (+1,{Col_Hc1})
    print $Cal_Run_ID                 (,{Col_Hc2})
    print $Frequency_lbl              (,{Col_Hc3})
    print $Frequency                  (,{Col_Hc4})


    graphic (+2, 1, 125) box 2
    Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont
    print $Emplid_lbl                 (,{Col_Ec1})
    print $Emplid_Name_lbl            (,{Col_Ec2})
    print $Daily_Rt_lbl               (,{Col_Ec3})
    print $Emplid_RFC_lbl             (,{Col_Ec4})
    print $Estabid_lbl                (,{Col_Ec5})
    print $Termination_lbl            (,{Col_Ec6})
    print $Std_Hrs_lbl                (,{Col_Ec7})

    print $Deptid_lbl                 (+1,{Col_Ec1})
    print $CURP_lbl                   (,{Col_Ec2})
    print $SDI_lbl                    (,{Col_Ec3})
    print $IMSS_lbl                   (,{Col_Ec4})
    print $Hire_lbl                   (,{Col_Ec5})
    print $Format_lbl                 (,{Col_Ec6})
    print $Salary_Type_lbl            (,{Col_Ec7})

    graphic (+1, 1, 125) box 2
    print $Pin_ErnTot                 (,{Col_Ed4})
    print $Pin_DedTot                 (,{Col_Ed6})
    print $Pin_NetPay                 (,{Col_Ed9},10)

    print $Element_Name     (+1,{Col_Ed1})
    print $Description      (,{Col_Ed2})
    print $Unit             (,{Col_Ed3})
    print $Amount           (,{Col_Ed4})
    print $Element_Name     (,{Col_Ed5})
    print $Description      (,{Col_Ed6})
    print $Unit             (,{Col_Ed7})
    print $Amount           (,{Col_Ed9})

end-heading


!***********************************************************************
! Get-PR-Status                                                        *
! Called By:    begin-report                                           *
! Calls:        none                                                   *
! Description:  Retrieves calc status to print in report header.       *
!***********************************************************************

begin-procedure Get-PR-Status
BEGIN-SELECT
CALRUN.RUN_FINALIZED_IND    &CALRUN.RUN_FINALIZED_IND
  let $Finalized_Ind      = &CALRUN.RUN_FINALIZED_IND
  if $Finalized_Ind  = 'Y'
     let $Calc_Stat = $Calc_Stat_Final
  else
     let $Calc_Stat = $Calc_Stat_Open
  end-if

FROM PS_GP_CAL_RUN CALRUN
WHERE CALRUN.CAL_RUN_ID = $Cal_Run_ID
END-SELECT
end-procedure Get-PR-Status


!***********************************************************************
! Get-Paygroup-Rel-Lang                                                *
! Calls:        none                                                   *
! Description:  Retrieve paygroup related language entry.              *
!***********************************************************************

begin-procedure Get-Paygroup-Rel-Lang
BEGIN-SELECT
PYGRP.DESCR     &PYGRP.DESCR
    let $Paygroup_Descr = &PYGRP.DESCR
FROM PS_GP_PYGRP PYGRP
WHERE GP_PAYGROUP = $Paygroup
END-SELECT

BEGIN-SELECT
PYGRPLANG.DESCR     &PYGRPLANG.DESCR
    let $Paygroup_Descr = &PYGRPLANG.DESCR

FROM PS_GP_PYGRP_LANG PYGRPLANG
WHERE PYGRPLANG.GP_PAYGROUP = $Paygroup
AND   PYGRPLANG.LANGUAGE_CD = $curr_language_cd
END-SELECT
end-procedure  Get-Paygroup-Rel-Lang


!***********************************************************************
! Process-Main                                                         *
! Called By:    Process-Main                                           *
! Calls:        Format-DateTime                                        *
! Description:  Retrieves segment information to be printed in page    *
!               header.  Manages segment-level page breaking.  Manages *
!               which report sections to run based on run control.     *
!***********************************************************************

begin-procedure Process-Main
#debug show 'Process-Main'

#ifdef debugy
    show 'Inside procedure Process-Main'
#end-if

    if $EE_Lvl_Sort = '10'
        let $Order_By_Clause1 = 'ORDER BY PRCSTAT.CAL_RUN_ID, JO.COMPANY, PRCSTAT.GP_PAYGROUP, PRCSTAT.CAL_ID,'
        let $Order_By_Clause2 =         ' SEGSTAT.EMPLID, SEGSTAT.EMPL_RCD'
        let $Order_By_Clause  = $Order_By_Clause1 || $Order_By_Clause2
    else
        let $Order_By_Clause1 = 'ORDER BY PRCSTAT.CAL_RUN_ID, JO.COMPANY, PRCSTAT.GP_PAYGROUP, PRCSTAT.CAL_ID,'
        let $Order_By_Clause2 =         ' NM.NAME, SEGSTAT.EMPL_RCD'
        let $Order_By_Clause  = $Order_By_Clause1 || $Order_By_Clause2
    end-if

   let #regpro = 0
   let #reglei = 0
   let $Company = ''

#debug show '    $Cal_Run_ID             : ' $Cal_Run_ID
#debug show '    $Paygroup_Select_Clause : ' $Paygroup_Select_Clause
#debug show '    $EE_Select_Clause       : ' $EE_Select_Clause
#debug show '    $Order_By_Clause        : ' $Order_By_Clause

BEGIN-SELECT
JO.COMPANY                    () On-Break Print=Never Before = ot-page After=Get-Company-Data-Mex  Level=1
PRCSTAT.PRD_END_DT            () On-Break Print=Never Before = ot-page After=Get-Format            Level=2
PRCSTAT.GP_PAYGROUP           () On-Break Print=Never Before = ot-page After=Get-Paygroup-Rel-Lang Level=2
JO.DEPTID
PRCSTAT.CAL_RUN_ID
PRCSTAT.CAL_ID
PRCSTAT.PRD_BGN_DT
PRCSTAT.PYMT_DT
PRCSTAT.CALC_TYPE
SEGSTAT.EMPLID
SEGSTAT.EMPL_RCD
SEGSTAT.RSLT_SEG_NUM
PRCSTAT.RSLT_VER_NUM
JO.EMPL_STATUS
JO.SETID_LOCATION
JO.SETID_DEPT
JO.LOCATION
JO.DAILY_RT
JO.STD_HOURS
JO.COMP_FREQUENCY
NM.NAME
SEGSTAT.SEG_END_DT

    let $Date1 = &PRCSTAT.PRD_BGN_DT
    do Format-DateTime($Date1, $out1, {DEFDMY}, '', '')

    Do convert-to-dtu-date(&PRCSTAT.PRD_END_DT,$End_Dt)
    Do convert-from-dtu-date($End_Dt,$End_Dt)

    do Format-DateTime(&PRCSTAT.PRD_END_DT, $out2, {DEFDMY}, '', '')

    let $Date3 = &PRCSTAT.PYMT_DT
    do Format-DateTime($Date3, $out3, {DEFDMY}, '', '')



    let $Company            = &JO.COMPANY
    let $Cal_Run_ID         = &PRCSTAT.CAL_RUN_ID
    let $Cal_ID             = &PRCSTAT.CAL_ID
    let $Paygroup           = &PRCSTAT.GP_PAYGROUP
    let $Emplid             = &SEGSTAT.EMPLID
    let #Empl_Rcd           = &SEGSTAT.EMPL_RCD
    let #Rslt_ver_num       = &PRCSTAT.RSLT_VER_NUM
    let $Period_Begin_Date  = $out1
    let $Period_End_Date    = $out2
    let $Payment_Date       = $out3

    let $Deptid             = &JO.DEPTID
    let $Empl_Status        = &JO.EMPL_STATUS
    let $Setid_Location     = &JO.SETID_LOCATION
    let $Setid_Dept         = &JO.SETID_DEPT
    let $Location           = &JO.LOCATION
    let $Name               = &NM.NAME
    let #Daily_Rt           = &JO.DAILY_RT
    let #Rslt_seg_num       = &SEGSTAT.RSLT_SEG_NUM
    let #Std_Hours          = &JO.STD_HOURS
    let $Comp_Frequency     = substr(&JO.COMP_FREQUENCY,1,1)
    let $SegEndDt           = &SEGSTAT.SEG_END_DT

#ifdef debug
    show '    SEGMENT EMPL INFO'
    show '        $Emplid    : ' $Emplid
    show '        #Empl_Rcd  : ' #Empl_Rec
    show '        #Ver_Num   : ' #Rslt_ver_num
#end-if
    do Get-day-duration
#debug show '$Frequency   :        ' $Frequency
    do Get-Salary-Type
#debug show 'SALARY TYPE  :        ' $Salary_Type

   if #regpro = 0
     do Get-Format
   end-if

   clear-array name = arr_erns
   let #cont_e = 0

   if $EARN_IE = '10'
      DO Get-Erns-Amt10
     else

      DO Get-Erns-Amt20
   end-if
   clear-array name = arr_ded
   let #cont_d = 0

   if $DED_IE  = '10'
      DO Get-Ded-Amt10
     else

      DO Get-Ded-Amt20
   end-if
   if #cont_e > #cont_d
     let #count_t = #cont_e
    else
     let #count_t = #cont_d
   end-if

      if #count_t > 0
      do get-curp-rfc
      do Get-SDI
      do Get-Location-Descr
      do Get-Dept-Descr
      do get-date-emplid

      do Format-Payslip-DT
      ADD 1 TO #regpro
    end-if

    ADD 1 TO #reglei


FROM PS_GP_PYE_PRC_STAT     PRCSTAT,
     PS_GP_PYE_SEG_STAT     SEGSTAT,
     PS_JOB                 JO,
     PS_NAMES               NM

WHERE PRCSTAT.CAL_RUN_ID      = $Cal_Run_ID
AND   SEGSTAT.CAL_RUN_ID      = PRCSTAT.CAL_RUN_ID
AND   SEGSTAT.EMPLID          = PRCSTAT.EMPLID
AND   SEGSTAT.EMPL_RCD        = PRCSTAT.EMPL_RCD
AND   SEGSTAT.GP_PAYGROUP     = PRCSTAT.GP_PAYGROUP
AND   SEGSTAT.CAL_ID          = PRCSTAT.CAL_ID
AND   SEGSTAT.ORIG_CAL_RUN_ID = PRCSTAT.ORIG_CAL_RUN_ID
AND   PRCSTAT.RSLT_VER_NUM    = (SELECT MAX(RSLT_VER_NUM) FROM PS_GP_PYE_PRC_STAT
                                 WHERE EMPLID    = PRCSTAT.EMPLID
                                 AND CAL_RUN_ID  = PRCSTAT.CAL_RUN_ID
                                 AND EMPL_RCD    = PRCSTAT.EMPL_RCD
                                 AND GP_PAYGROUP = PRCSTAT.GP_PAYGROUP
                                 AND CAL_ID      = PRCSTAT.CAL_ID)
!AND   SEGSTAT.RSLT_SEG_NUM      = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_PYE_SEG_STAT
!                                 WHERE EMPLID          = SEGSTAT.EMPLID
!                                 AND   CAL_RUN_ID      = SEGSTAT.CAL_RUN_ID
!                                 AND   EMPL_RCD        = SEGSTAT.EMPL_RCD
!                                 AND   GP_PAYGROUP     = SEGSTAT.GP_PAYGROUP
!                                 AND   CAL_ID          = SEGSTAT.CAL_ID
!                                 AND   ORIG_CAL_RUN_ID = SEGSTAT.ORIG_CAL_RUN_ID)
AND SEGSTAT.CALC_ACTION       = 'C'
AND SEGSTAT.PYE_CALC_STAT     IN ('50','55', '70', '75')
AND PRCSTAT.RSLT_REV_NUM      = 1
AND PRCSTAT.PYE_PRC_IND       = 'N'
AND PRCSTAT.SEL_STAT          IN ('A', 'I')
AND PRCSTAT.SEL_ACTION        = 'C'
AND PRCSTAT.CALC_TYPE         = 'P'
AND JO.GP_PAYGROUP            =  PRCSTAT.GP_PAYGROUP
AND JO.EMPL_RCD               =  PRCSTAT.EMPL_RCD
AND JO.EMPLID                 =  PRCSTAT.EMPLID
AND JO.EFFDT                  =  (SELECT MAX(EFFDT) FROM PS_JOB
                                  WHERE EMPLID    = JO.EMPLID
                                  AND   EMPL_RCD  = JO.EMPL_RCD
                                  AND   EFFDT    <= SEGSTAT.SEG_END_DT)
AND JO.EFFSEQ                 =  (SELECT MAX(EFFSEQ) FROM PS_JOB
                                  WHERE EMPLID   = JO.EMPLID
                                  AND   EMPL_RCD = JO.EMPL_RCD
                                  AND   EFFDT    = JO.EFFDT)
AND NM.EMPLID                 = PRCSTAT.EMPLID
AND NM.NAME_TYPE              = 'PRI'
AND NM.EFFDT                  = (SELECT MAX(EFFDT) FROM PS_NAMES
                                 WHERE EMPLID = NM.EMPLID
                                 AND   NAME_TYPE = NM.NAME_TYPE
                                 AND   EFFDT <= SEGSTAT.SEG_END_DT)
[$Paygroup_Select_Clause]
[$EE_Select_Clause]
[$Order_By_Clause]

END-SELECT
  !print Resume last Company
  Do CompanyResume
   show 'Records Read      : ' #Reglei
   show 'Records Processed : ' #Regpro
   if #regpro = 0
!      let $noDataMsg = '>>> No Data Found, Calendar Group ID: ' || $Cal_Run_ID
      !print $noDataMsg   (+5,10)
      show  $noDataMsg
   end-if
end-procedure Process-Main

!**************************************
begin-procedure ot-page  !mtm
#debug show '** Ot-Page **'
!**************************************

  if $Company <> $CompanyAnt
     #Debug Show 'Company change: ' $Company ' <> ' $CompanyAnt
     Let $CompanyAnt = $Company
     Let $PaygroupAnt = $Paygroup
     Let $PeriodEndDtAnt = $Period_End_Date
     Do CompanyResume
     new-page
  end-if

  if $Paygroup <> $PaygroupAnt
     Let $PaygroupAnt = $Paygroup
     Let $PeriodEndDtAnt = $Period_End_Date
     new-page
  end-if

  if $Period_End_Date <> $PeriodEndDtAnt
     Let $PeriodEndDtAnt = $Period_End_Date
  end-if

end-procedure ot-page

!**************************************
begin-procedure CompanyResume
#debug show '** CompanyResume **'
!**************************************
    new-page
    graphic (+3,1,125) horz-line 5
    print $Resume_Company                    (+1,1)  !STRING
    print $Processed_Empl   (+2,1)  !STRING
    print #EmployeeNumber (,+1) edit '888,888'

    graphic (+1,1,125) horz-line 5
    Let #tot_ern = 0
    Let #tot_ded = 0
    Let #tot_net = 0
    let #print_item = 1
    let #lines_total = 1
    print ' ' (+2,2)

    while #print_item <= arr_ded_tot.d_Rows(0) OR #print_item <= arr_ern_tot.e_Rows(0)
        if  arr_ern_tot.e_Rows(0) >= #print_item
            get #piner #amount_er #unit_er from arr_ern_tot(#print_item) e_pin e_amount e_unit
            let #pin_nmp = #piner
            do Get-Pin-Descr
            let $piner = $pin_nm
            Print $piner               (,{Col_ed1},12)
            Print $pin_descr           (,{Col_ed2},19) ! 19 Maximo
            Print #unit_er             (,{Col_ed3})  edit 'b999.99'
            Print #amount_er           (,{Col_ed4})  edit '999,999,999.99'
            Add #amount_er To #tot_ern
        end-if
        if  arr_ded_tot.d_Rows(0) >= #print_item
            get #pinde #amount_de #unit_de from arr_ded_tot (#print_item) d_pin d_amount d_unit
            let #pin_nmp = #pinde
            do Get-Pin-Descr
            let $pinde = $pin_nm
            Print $pinde               (,{Col_ed5},12)
            Print $pin_descr           (,{Col_ed6},19)   ! 19 Maximo
            Print #unit_de             (,{Col_ed7}) edit 'b999.99'
            Print #amount_de           (,{Col_ed8}) edit '999,999,999.99'
            Add #amount_de To #tot_ded
         end-if
         print '' (+1,2)
         Add 1 to #ren
         Add 1 to #print_item
         Add 1 to #lines_total
    end-while

    print $emplid_tot (+1,{Col_ed1})
    Print #tot_ern  (,{Col_ed4})  edit '999,999,999.99'
    Print #tot_ded  (,{Col_ed6})  edit '999,999,999.99'
    Let #tot_net = #tot_ern - #tot_ded
    Print #tot_net (,{Col_ed8})  edit '$$$,$$$,$$9.99'
    graphic (+1,1,125) horz-line 5

    !Clean Arrays and Counters
    Clear-Array name = arr_ern_tot
    Clear-Array name = arr_ded_tot
    Let #EmployeeNumber = 0
end-procedure CompanyResume

!**************************************
begin-procedure AcummErn(#pin, #amt, #unt)
#debug show '** AcummErn **'
!**************************************
#Debug Show 'Pin:' #pin ' Amount:' #amt ' Units:' #unt
Let $Found      = 'N'
Let #Counter    = 1
Let #tmp_Amount = 0
While 1 !Loop forever
    !#Debug Show 'Loop:' #Counter
    Get #e_pin #e_amount #e_unit $e_Empty From arr_ern_tot(#Counter)
    If #e_pin = #pin
        !If already exist Pin Number in Array add Amount
        Add #amt To #e_amount
        Add #unt To #e_unit
        Put #e_amount #e_unit Into arr_ern_tot(#Counter) e_amount e_unit
        Let $Found = 'Y'
    End-If

    If $e_Empty = 'Y'
        ! If Reach end of elements in Array
        ! Exit While Loop
        Break
    End-If

    Add 1 to #Counter
End-While

If $Found = 'N'
    !Pin not found in array
    !Add to last position and set Empty = 'N'
    Put #pin #amt #unt 'N' into arr_ern_tot(#Counter) e_pin e_amount e_unit e_Empty
End-If

If arr_ern_tot.e_Rows(0) < #Counter
    !Store in position 0 the number of elements in array
    Let arr_ern_tot.e_Rows(0) = #Counter
End-If
end-procedure AcummErn

!**************************************
begin-procedure AcummDed(#pin, #amt, #unt)
#debug show '** AcummDed **'
!**************************************
#Debug Show 'Pin:' #pin ' Amount:' #amt ' Units:' #unt
Let $Found      = 'N'
Let #Counter    = 1
Let #tmp_Amount = 0
While 1 !Loop forever
    !#Debug Show 'Loop:' #Counter
    Get #d_pin #d_amount #d_unit $d_Empty From arr_ded_tot(#Counter)
    If #d_pin = #pin
        !If already exist Pin Number in Array add Amount
        Add #amt To #d_amount
        Add #unt To #d_unit
        Put #d_amount #d_unit Into arr_ded_tot(#Counter) d_amount d_unit
        Let $Found = 'Y'
    End-If

    If $d_Empty = 'Y'
        ! If Reach end of elements in Array
        ! Exit While Loop
        Break
    End-If
    Add 1 to #Counter
End-While

If $Found = 'N'
    !Pin not found in array
    !Add to last position and set Empty = 'N'
    Put #pin #amt #unt 'N' into arr_ded_tot(#Counter) d_pin d_amount d_unit d_Empty
End-If
If arr_ded_tot.d_Rows(0) < #Counter
    !Store in position 0 the number of elements in array
    Let arr_ded_tot.d_Rows(0) = #Counter
End-If
end-procedure AcummDed

begin-procedure Get-Erns-Amt10
begin-select
BB.SEQNUM
AA.RSLT_SEG_NUM
AA.PIN_NUM
AA.CALC_RSLT_VAL
AA.UNIT_RSLT_VAL
AA.UNIT_ADJ_VAL
AA.CALC_ADJ_VAL
AA.PIN_NM

!ICE 738663002
    MOVE &AA.PIN_NUM        TO  #pin_num
    MOVE &AA.CALC_RSLT_VAL  TO  #rslt_val
    MOVE &AA.UNIT_RSLT_VAL  TO  #rslt_unit
    MOVE &AA.CALC_ADJ_VAL   TO  #adj_val
    MOVE &AA.UNIT_ADJ_VAL   TO  #adj_unit

    LET #amount_val = #rslt_val + #adj_val
    LET #unit_val = #rslt_unit + #adj_unit

    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
    end-if

FROM PS_GP_RSLT_ED_VW AA, PS_GPMX_PAYSL_F_ER BB
where BB.GPMX_FORMAT_ID = $GPMX_FORMAT
and   BB.EFFDT          = $FO_EFF_DT
and   BB.EFF_STATUS     = 'A'
and   BB.PIN_ERN_NUM    = AA.PIN_NUM
and   AA.PIN_TYPE       = 'ER'
and   AA.EMPLID         = $Emplid
and   AA.EMPL_RCD       = #Empl_Rcd
and   AA.CAL_RUN_ID     = $Cal_Run_ID
and   AA.CAL_ID         = $Cal_ID
and   AA.RSLT_SEG_NUM   = #Rslt_seg_num
order by BB.SEQNUM
end-select
end-procedure Get-Erns-Amt10

!**************************************
begin-procedure Get-Erns-Amt20
show '*** Get-Erns-Amt20 ***'
show '$FO_EFF_DT: ' $FO_EFF_DT
!**************************************
begin-select
AAA.RSLT_SEG_NUM
AAA.PIN_NUM
AAA.CALC_RSLT_VAL
AAA.UNIT_RSLT_VAL
AAA.CALC_ADJ_VAL
AAA.UNIT_ADJ_VAL
AAA.PIN_NM

!ICE 738663001
    MOVE &AAA.PIN_NUM        TO  #pin_num
    MOVE &AAA.CALC_RSLT_VAL  TO  #rslt_val
    MOVE &AAA.UNIT_RSLT_VAL  TO  #rslt_unit
    MOVE &AAA.CALC_ADJ_VAL   To  #adj_val
    MOVE &AAA.UNIT_ADJ_VAL   TO  #adj_unit

    LET #amount_val = #rslt_val + #adj_val
    LET #unit_val = #rslt_unit + #adj_unit
    IF #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
    end-if

FROM PS_GP_RSLT_ED_VW AAA
where AAA.PIN_TYPE = 'ER'
and   AAA.PIN_NM   LIKE 'SUELDO%'
and   AAA.PIN_NUM   NOT IN (SELECT BB1.PIN_ERN_NUM FROM PS_GPMX_PAYSL_F_ER BB1
                          where BB1.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   BB1.EFFDT          = $FO_EFF_DT
                          and   BB1.EFF_STATUS     = 'A'
                          and   AAA.PIN_NM = AAA.PIN_NM)
and   AAA.EMPLID       = $Emplid
and   AAA.EMPL_RCD     = #Empl_Rcd
and   AAA.CAL_RUN_ID   = $CAL_RUN_ID
and   AAA.CAL_ID       = $Cal_ID
and   AAA.RSLT_SEG_NUM = #Rslt_seg_num
order by AAA.PIN_NM
end-select


begin-select
AAA1.RSLT_SEG_NUM
AAA1.PIN_NUM
AAA1.CALC_RSLT_VAL
AAA1.UNIT_RSLT_VAL
AAA1.CALC_ADJ_VAL
AAA1.UNIT_ADJ_VAL
AAA1.PIN_NM

    MOVE &AAA1.PIN_NUM        TO  #pin_num
    MOVE &AAA1.CALC_RSLT_VAL  TO  #rslt_val
    MOVE &AAA1.UNIT_RSLT_VAL  TO  #rslt_unit
    MOVE &AAA1.CALC_ADJ_VAL   TO  #adj_val
    MOVE &AAA1.UNIT_ADJ_VAL   TO  #adj_unit

    LET #amount_val = #rslt_val + #adj_val
    LET #unit_val = #rslt_unit + #adj_unit

    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
    end-if

FROM PS_GP_RSLT_ED_VW AAA1
where AAA1.PIN_TYPE = 'ER'
and   AAA1.PIN_NM  NOT LIKE 'SUELDO%'
and   AAA1.PIN_NUM   NOT IN (SELECT BB11.PIN_ERN_NUM FROM PS_GPMX_PAYSL_F_ER BB11
                          where BB11.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   BB11.EFFDT          = $FO_EFF_DT
                          and   BB11.EFF_STATUS     = 'A'
                          and   AAA1.PIN_NM = AAA1.PIN_NM)
and   AAA1.EMPLID       = $Emplid
and   AAA1.EMPL_RCD     = #Empl_Rcd
and   AAA1.CAL_RUN_ID   = $CAL_RUN_ID
and   AAA1.CAL_ID       = $Cal_ID
and   AAA1.RSLT_SEG_NUM = #Rslt_seg_num
order by AAA1.PIN_NM
end-select
end-procedure Get-Erns-Amt20


begin-procedure Get-Ded-Amt10
begin-select
DD.SEQNUM
CC.RSLT_SEG_NUM
CC.PIN_NUM
CC.CALC_RSLT_VAL
CC.UNIT_RSLT_VAL
CC.CALC_ADJ_VAL
CC.PIN_NM
CC.UNIT_ADJ_VAL

!ICE 738663002
    MOVE &CC.PIN_NUM        TO  #pin_num
    MOVE &CC.CALC_RSLT_VAL  TO  #rslt_val
    MOVE &CC.UNIT_RSLT_VAL  TO  #rslt_unit
    MOVE &CC.CALC_ADJ_VAL   TO  #adj_val
    MOVE &CC.UNIT_ADJ_VAL   TO  #adj_unit

    LET #amount_val = #rslt_val + #adj_val
    LET #unit_val = #rslt_unit + #adj_unit

    if #amount_val <> 0
      ADD 1 TO #cont_d
      put #pin_num #unit_val #amount_val into arr_ded(#cont_d) d_code d_unit d_amount
    end-if

FROM PS_GP_RSLT_ED_VW CC, PS_GPMX_PAYSL_F_DE DD

where DD.GPMX_FORMAT_ID = $GPMX_FORMAT
and   DD.EFFDT          = $FO_EFF_DT
and   DD.EFF_STATUS     = 'A'
and   DD.PIN_DED_NUM    = CC.PIN_NUM
and   CC.PIN_TYPE       = 'DD'
and   CC.EMPLID         = $Emplid
and   CC.EMPL_RCD       = #Empl_Rcd
and   CC.CAL_RUN_ID     = $CAL_RUN_ID
and   CC.CAL_ID         = $Cal_ID
and   CC.RSLT_SEG_NUM   = #Rslt_seg_num
order by DD.SEQNUM
end-select
end-procedure Get-Ded-Amt10


begin-procedure Get-Ded-Amt20
begin-select
CCC.RSLT_SEG_NUM
CCC.PIN_NUM
CCC.CALC_RSLT_VAL
CCC.UNIT_RSLT_VAL
CCC.CALC_ADJ_VAL
CCC.PIN_NM
CCC.UNIT_ADJ_VAL

!ICE 738663002
    MOVE &CCC.PIN_NUM        TO  #pin_num
    MOVE &CCC.CALC_RSLT_VAL  TO  #rslt_val
    MOVE &CCC.UNIT_RSLT_VAL  TO  #rslt_unit
    MOVE &CCC.CALC_ADJ_VAL   TO  #adj_val
    MOVE &CCC.UNIT_ADJ_VAL   TO  #adj_unit

    LET #import_val = #rslt_val + #adj_val
    LET #unit_val = #rslt_unit + #adj_unit

    if #amount_val <> 0
      ADD 1 TO #cont_d
      put #pin_num #unit_val #amount_val into arr_ded(#cont_d) d_code d_unit d_amount
    end-if

FROM PS_GP_RSLT_ED_VW CCC
where CCC.PIN_TYPE = 'DD'
and   CCC.PIN_NUM   NOT IN (SELECT CC1.PIN_DED_NUM FROM PS_GPMX_PAYSL_F_DE CC1
                          where CC1.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   CC1.EFFDT          = $FO_EFF_DT
                          and   CC1.EFF_STATUS     = 'A'
                          and   CCC.PIN_TYPE = CCC.PIN_TYPE)
and   CCC.EMPLID      = $Emplid
and   CCC.EMPL_RCD    = #Empl_Rcd
and   CCC.CAL_RUN_ID  = $CAL_RUN_ID
and   CCC.CAL_ID      = $Cal_ID
and   CCC.RSLT_SEG_NUM  = #Rslt_seg_num
order by CCC.PIN_NM
end-select
end-procedure Get-Ded-Amt20


begin-procedure get-code-dayspay
begin-select
DP.PIN_NUM
  MOVE &DP.PIN_NUM TO #pin_units

from PS_GP_PIN DP
WHERE DP.PIN_CODE = 'PE VR DIAS PAG PER MEX'
end-select
end-procedure get-code-dayspay


begin-procedure Get-Accum-Unit
  let #amount_acc = 0
begin-select
EEE1.RSLT_SEG_NUM
EEE1.CALC_RSLT_VAL

    MOVE &EEE1.CALC_RSLT_VAL  TO  #amount_acc
    #debug show #ac_pinnm '---' #amount_acc ' Emplid' $Emplid

FROM PS_GP_RSLT_PIN EEE1
where EEE1.PIN_NUM      = #ac_pinnm
and   EEE1.EMPLID       = $Emplid
and   EEE1.EMPL_RCD     = #Empl_Rcd
and   EEE1.CAL_RUN_ID   = $CAL_RUN_ID
and   EEE1.CAL_ID       = $Cal_ID
and   EEE1.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = EEE1.EMPLID
                          AND   EMPL_RCD    = EEE1.EMPL_RCD
                          AND   CAL_RUN_ID  = EEE1.CAL_RUN_ID
                          AND   GP_PAYGROUP = EEE1.GP_PAYGROUP
                          AND   CAL_ID      = EEE1.CAL_ID)
end-select
end-procedure Get-Accum-Unit


begin-procedure  Get-Pin-Descr
  let $pin_descr = ''
  let $pin_nm = ''
  let $pin_code = ''
begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  MOVE &PD.PIN_NM TO $pin_nm
  MOVE &PD.DESCR  TO $pin_descr
  MOVE &PD.PIN_CODE TO $pin_code
  LET $pin_code = RTRIM($pin_code,' ')

  DO Get-Pin-Descr-Lang
from PS_GP_PIN PD
WHERE PD.PIN_NUM = #pin_nmp
end-select
end-procedure   Get-Pin-Descr


begin-procedure  Get-Pin-Descr-Lang
begin-select
PDL.DESCR
  MOVE &PDL.DESCR TO $pin_descr
from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #pin_nmp
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure   Get-Pin-Descr-Lang

!***********************************************************************
! Select-Parameters                                                    *
! Calls:        Select-Paygroups                                       *
!               Select-Employees                                       *
! Description:  Selects level zero information off of run control.     *
!               Calls the appropriate sub-procedure, if necessary,     *
!***********************************************************************

begin-procedure Select-Parameters
#ifdef debugy
    show 'IN PROCEDURE SELECT-PARAMETERS'
#end-if
    let $Quote                  = ''''
    let $Multiple_Calendars     = 'N'
    let $CalendarID             = ' '
    let $EE_Select_Clause       = ' '
    let $Employee_List          = ' '
    let $Paygroup_Select_Clause = ' '

begin-SELECT
#ifdef debugy
    show 'BEGINNING RUNCONTROL SELECT'
#end-if
LVL0.OPRID                    &LVL0.OPRID
LVL0.RUN_CNTL_ID              &LVL0.RUN_CNTL_ID
LVL0.CAL_RUN_ID               &LVL0.CAL_RUN_ID
LVL0.GPMX_FORMAT_ID           &LVL0.GPMX_FORMAT_ID
LVL0.EE_LVL_SORT_OPTION       &LVL0.EE_LVL_SORT_OPTION
LVL0.PYGRP_LIST_OPTION        &LVL0.PYGRP_LIST_OPTION
LVL0.GPMX_CAPPED


    let $Oprid                = &LVL0.OPRID
    let $Run_Cntl_ID          = &LVL0.RUN_CNTL_ID
    let $Cal_Run_ID           = &LVL0.CAL_RUN_ID
    let $GPMX_FORMAT          = &LVL0.GPMX_FORMAT_ID
    let #EE_Lvl_Sort          = &LVL0.EE_LVL_SORT_OPTION
    let #Population           = &LVL0.PYGRP_LIST_OPTION
    let $SDI_Capped           = &LVL0.GPMX_CAPPED

#ifdef debug
    show '#Population:   ' noline
    show #Population
#end-if

    let $EE_Lvl_Sort          = edit(#EE_Lvl_Sort, '88')
    let $Population           = edit(#Population, '8')

#ifdef debug
    show 'Run Control Select Oprid:           ' noline
    show $Oprid
    show 'Run Control Select Run_Cntl_ID:     ' noline
    show $Run_Cntl_ID
    show 'Run Control Select Cal_Run_ID:      ' noline
    show $Cal_Run_ID
    show 'Run Control Select Population:      ' noline
    show $Population
    show 'Run Control Select EE_Lvl_Sort:     ' noline
    show $EE_Lvl_Sort
    show 'Run Control Select SDI Capped:     ' noline
    show $SDI_Capped
#end-if

    if $Population = '2'
        do Select-Paygroups
    end-if

    if $Population = '3'
        do Select-Employees
    end-if

    FROM PS_GPMX_RC_PAYRSL LVL0

    WHERE LVL0.OPRID        = $PRCS_OPRID
      AND LVL0.RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID

END-SELECT

end-procedure ! Select-Parameters


!***********************************************************************
! Select-Paygroups                                                     *
! Calls:        none                                                   *
! Description:  Selects paygroups off run control.  Strings them into  *
!                   a variable or use in the main select clause in     *
!                   the calling report.                                *
!***********************************************************************

begin-procedure Select-Paygroups
    let $Multiple = 'N'
begin-SELECT
LVL1A.GP_PAYGROUP     &LVL1A.GP_PAYGROUP

    let $PaygroupID = &LVL1A.GP_PAYGROUP
    if $Multiple = 'N'
        let $Paygroup_List            = $Quote || $PaygroupID || $Quote
        let $Paygroup_Select_Clause  = 'AND SEGSTAT.GP_PAYGROUP IN (' || $Paygroup_List || ')'
      else
        let $Paygroup_List      = $Paygroup_List || ', ' || $Quote || $PaygroupID || $Quote
        let $Paygroup_Select_Clause  = 'AND SEGSTAT.GP_PAYGROUP IN (' || $Paygroup_List || ')'
     end-if
     let $Multiple = 'Y'

FROM PS_GPMX_RC_PAYRSL1 LVL1A
WHERE OPRID        = $PRCS_OPRID
AND RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID
END-SELECT
end-procedure ! Select-Paygroups


!***********************************************************************
! Select-Employees                                                     *
! Calls:        none                                                   *
! Description:  Selects employees off run control.  Strings them into  *
!                   a variable for use in the main select clause in    *
!                   the calling report.                                *
!***********************************************************************
begin-procedure Select-Employees
    let $Multiple = 'N'     ! Controls the stringing format for the Select_Clause.
begin-SELECT
LVL1B.EMPLID                &LVL1B.EMPLID
    let $Runctl_Emplid = &LVL1B.EMPLID
    if $Multiple = 'N'
        let $Employee_List = $Quote||$Runctl_Emplid||$Quote
        let $EE_Select_Clause  = 'AND SEGSTAT.EMPLID IN ('||$Employee_List||')'
      else
        let $Employee_List = $Employee_List||', '||$Quote||$Runctl_Emplid||$Quote
        let $EE_Select_Clause  = 'AND SEGSTAT.EMPLID IN ('||$Employee_List||')'
    end-if
    let $Multiple = 'Y'

FROM PS_GPMX_RC_PAYRSL2       LVL1B
WHERE LVL1B.OPRID        = $PRCS_OPRID
AND   LVL1B.RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID
END-SELECT
end-procedure ! Select-Employees


begin-procedure Get-Format
 #debug show 'Get-Format'
begin-select
FO.GPMX_PIN_PSLP1_NUM
FO.GPMX_PIN_PSLP2_NUM
FO.GPMX_PIN_PSLP3_NUM
FO.GPMX_EARN_IE
FO.GPMX_DED_IE
FO.EFFDT

   MOVE &FO.GPMX_PIN_PSLP1_NUM  TO  #earn_tot
   MOVE &FO.GPMX_PIN_PSLP2_NUM  TO  #ded_tot
   MOVE &FO.GPMX_PIN_PSLP3_NUM  TO  #net_pay
   MOVE &FO.GPMX_EARN_IE        TO  $EARN_IE
   MOVE &FO.GPMX_DED_IE         TO  $DED_IE
   Let $FO_EFF_DT = Rtrim(&FO.EFFDT, ' ')

   if $FO_EFF_DT <> ''
      Do convert-to-dtu-date(&FO.EFFDT,$FO_EFF_DT)
      Do convert-from-dtu-date($FO_EFF_DT,$FO_EFF_DT)
   end-if

   let #pin_nmp = #EARN_TOT
   do Get-Pin-Descr
   let $pin_erntot = $pin_descr

   let #pin_nmp = #DED_TOT
   do Get-Pin-Descr
   let $pin_dedtot = $pin_descr

   let #pin_nmp = #NET_PAY
   do Get-Pin-Descr
   let $pin_netpay = $pin_descr

FROM PS_GPMX_PAYSL_FORM FO
WHERE FO.GPMX_FORMAT_ID = $GPMX_FORMAT
AND   FO.EFF_STATUS = 'A'
AND   FO.EFFDT = (SELECT MAX(FO1.EFFDT) FROM PS_GPMX_PAYSL_FORM FO1
                  where FO1.GPMX_FORMAT_ID  =  FO.GPMX_FORMAT_ID
                  and   FO1.EFF_STATUS      =  FO.EFF_STATUS
                  and   FO1.EFFDT           <= $End_Dt)
end-select
end-procedure Get-Format


begin-procedure Get-SDI
  let #sdi = 0
  #debug show ' $Emplid     ' $Emplid
  #debug show ' #Empl_Rcd   ' #Empl_Rcd
  #debug show ' $PayGroup   ' $PayGroup
  #debug show ' $End_Dt     ' $End_Dt
  #debug show ' $SDI_Capped ' $SDI_Capped

begin-select
SDI.GPMX_SDI_FIX
SDI.GPMX_SDI_VAR
SDI.GPMX_MAX_EM

  If $SDI_Capped = 'N'
    let   #sdi = &SDI.GPMX_SDI_FIX + &SDI.GPMX_SDI_VAR
  Else
    let   #sdi = &SDI.GPMX_MAX_EM  
  End-if  

FROM    PS_GPMX_SDI_WA  SDI
WHERE   SDI.EMPLID      =  $Emplid
and     SDI.EMPL_RCD    =  #Empl_Rcd
AND     SDI.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPMX_SDI_WA
                   WHERE EMPLID  = SDI.EMPLID
                   and EMPL_RCD    =  SDI.EMPL_RCD
                   AND EFFDT    <= $SegEndDt)
AND     SDI.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GPMX_SDI_WA
                          WHERE EMPLID   = SDI.EMPLID
                          and EMPL_RCD    =  SDI.EMPL_RCD
                          AND EFFDT       = SDI.EFFDT)
AND     SDI.SEQNUM =(SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
                     WHERE EMPLID   = SDI.EMPLID
                       AND EMPL_RCD =  SDI.EMPL_RCD 
                       AND EFFDT    = SDI.EFFDT)                           
end-SELECT
end-procedure GET-sdi


begin-procedure get-curp-rfc
begin-select
PB.NATIONAL_ID
   let $Empl_RFC  = rtrim(&PB.NATIONAL_ID,' ')
FROM PS_PERS_NID PB
WHERE PB.NATIONAL_ID_TYPE = 'RFC'
AND PB.EMPLID = $Emplid
end-select

begin-select
PC.NATIONAL_ID
  let $Emplid_CURP = rtrim(&PC.NATIONAL_ID,' ')

FROM PS_PERS_NID PC
WHERE PC.NATIONAL_ID_TYPE = 'CURP'
AND PC.EMPLID = $Emplid
end-select

begin-select
PE.NATIONAL_ID
  let $Empl_IMSS = rtrim(&PE.NATIONAL_ID,' ')

FROM PS_PERS_NID PE
WHERE PE.NATIONAL_ID_TYPE = 'IMSS'
AND PE.EMPLID = $Emplid
end-select
end-procedure get-curp-rfc


begin-procedure Get-Location-Descr
  let $Location_Descr = ''
begin-select
L.DESCR
L.ESTABID
  MOVE &L.DESCR    TO $Location_Descr
  MOVE &L.ESTABID  TO $Estabid

from PS_LOCATION_TBL L
where L.SETID     = $SetID_Location
and   L.LOCATION  = $Location
and   L.EFFDT =  (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL
                   WHERE SETID    = L.SETID
                   and   LOCATION = L.LOCATION
                   and   EFFDT <= $SegEndDt)
and   L.EFF_STATUS = 'A'
end-select
end-procedure Get-Location-Descr


begin-procedure Get-Dept-Descr
  let $Dept_Descr = ''
begin-select
DD.DESCR

  MOVE &DD.DESCR   TO $Dept_Descr

from PS_DEPT_TBL DD
where DD.SETID   = $SetID_Dept
and   DD.DEPTID  = $Deptid
and   DD.EFFDT   =  (SELECT MAX(EFFDT) FROM PS_DEPT_TBL
                   WHERE SETID    = DD.SETID
                   and   DEPTID   = DD.DEPTID
                   and   EFFDT <= $SegEndDt)
and   DD.EFF_STATUS = 'A'
end-select
end-procedure Get-Dept-Descr

!**************************************
begin-procedure Format-Payslip-DT
#debug show '*** Format-Payslip-DT ***'
#debug show '    $Termination_Dt : ' $Termination_Dt
#debug show '    $Service_Dt     : ' $Service_Dt
!**************************************

  Add 1 to #EmployeeNumber
  let #print_item = 1
  let #lines_total = 1
  print $Emplid           (+2,{Col_Ec1})
  print $Name             (,{Col_Ec2})
  print #Daily_Rt         (,{Col_Ec3}) edit 9,999.90
  print $Empl_RFC         (,{Col_Ec4})
  print $Estabid          (,{Col_Ec5})
  print $Termination_Dt   (,{Col_Ec6})
  print #Std_Hours        (,{Col_Ec7})
  print $Dept_Descr       (+1,{Col_Ec1},15)
  print $Emplid_CURP      (,{Col_Ec2})
  print #SDI              (,{Col_Ec3}) edit 9,999.90
  print $Empl_IMSS        (,{Col_Ec4})
  print $Service_Dt       (,{Col_Ec5})
  print $GPMX_FORMAT      (,{Col_Ec6})
  print $Salary_Type      (,{Col_Ec7})

  print ' ' (+2,2)

  while #print_item <= #count_t
     if  #cont_e >= #print_item
        get #piner #amount_er #unit_er from arr_erns(#print_item) e_code e_amount e_unit
        let #pin_nmp = #piner
        do Get-Pin-Descr
        let $piner = $pin_nm
        #debug Show '$pin_code :' $pin_code
        if $pin_code = 'SUELDO CAL MEX' or $pin_code = 'SUELDO FREC MEX'
          let #ac_pinnm = #pin_units
          DO Get-Accum-Unit
          let #unit_er = #amount_acc
        end-if
        Print $piner               (,{Col_ed1},12)
        Print $pin_descr           (,{Col_ed2},19) ! 19 Maximo
        Print #unit_er             (,{Col_ed3})  edit 'b999.99'
        Print #amount_er           (,{Col_ed4})  edit '999,999,999.99'

        Do AcummErn (#piner, #amount_er, #unit_er)
     end-if
     if  #cont_d >= #print_item
        get #pinde #amount_de #unit_de from arr_ded (#print_item) d_code d_amount d_unit
        let #pin_nmp = #pinde
        do Get-Pin-Descr
        let $pinde = $pin_nm
        #debug Show '$pin_code :' $pin_code
        Print $pinde               (,{Col_ed5},12)
        Print $pin_descr           (,{Col_ed6},19)   ! 19 Maximo
        Print #unit_de             (,{Col_ed7}) edit 'b999.99'
        Print #amount_de           (,{Col_ed8}) edit '999,999,999.99'

        Do AcummDed (#pinde, #amount_de, #unit_de)

     end-if
     print '' (+1,2)
     Add 1 to #ren
     Add 1 to #print_item
     Add 1 to #lines_total
  end-while

    print $emplid_tot (+1,{Col_ed1})
    let #ac_pinnm = #earn_tot
    DO Get-Accum
    let #amount_erntot = #amount_acc
    Print #amount_erntot  (,{Col_ed4})  edit '999,999,999.99'

    let #ac_pinnm = #ded_tot
    DO Get-Accum
    let #amount_dedtot = #amount_acc
    Print #amount_dedtot  (,{Col_ed6})  edit '999,999,999.99'

    let #ac_pinnm = #net_pay
    DO Get-Accum
    !let #amount_netpay = #amount_acc
    let #amount_netpay = #amount_erntot - #amount_dedtot
    Print #amount_netpay (,{Col_ed8})  edit '$$$,$$$,$$9.99'

    graphic (+1,1,125) horz-line 5
end-procedure Format-Payslip-DT


begin-procedure Get-Accum
  let #amount_acc = 0
begin-select
EEE.RSLT_SEG_NUM
EEE.CALC_RSLT_VAL

    MOVE &EEE.CALC_RSLT_VAL  TO  #amount_acc
!    show #ac_pinnm '---' #amount_acc ' Emplid' $Emplid &EEE.RSLT_SEG_NUM

FROM PS_GP_RSLT_ACUM_VW EEE
where EEE.PIN_NUM      = #ac_pinnm
and   EEE.EMPLID       = $Emplid
and   EEE.EMPL_RCD     = #Empl_Rcd
and   EEE.CAL_RUN_ID   = $Cal_Run_ID
and   EEE.CAL_ID       = $Cal_ID
and   EEE.RSLT_SEG_NUM = #Rslt_seg_num
end-select
end-procedure Get-Accum

!**************************************
begin-procedure get-date-emplid
#debug show '*** get-date-emplid ***'
!**************************************
begin-select
EM.TERMINATION_DT
EM.SERVICE_DT
  let $Termination_Dt    = Rtrim(&EM.TERMINATION_DT, ' ')
  let $Service_Dt        = Rtrim(&EM.SERVICE_DT, ' ')

  if $Service_Dt <> ''
     do Format-DateTime($Service_Dt, $Service_Dt, {DEFDMY}, '', '')
  end-if

  if $Termination_Dt <> ''
    do Format-DateTime($Termination_Dt, $Termination_Dt, {DEFDMY}, '', '')
  end-if
FROM PS_PER_ORG_ASGN_VW EM
WHERE EM.EMPLID = $Emplid
end-select
end-procedure get-date-emplid

!**************************************
begin-procedure Get-day-duration
#debug show '*GPA** get-day-duration ***'
!**************************************
Let $Copm_Frec = 'COMP_FREQUENCY'
begin-select
ED.XLATSHORTNAME

 let $Frequency    = Rtrim(&ED.XLATSHORTNAME, ' ')

FROM  XLATTABLE_VW ED
WHERE ED.FIELDNAME = $Copm_Frec
AND ED.FIELDVALUE = $Comp_Frequency
end-select
end-procedure Get-day-duration

!**************************************
begin-procedure Get-salary-Type
#debug show '*GPA** Get Salary Type ***'
!**************************************
begin-select
!SA.SALARY_TYPE_MEX
SB.XLATSHORTNAME
  let $Salary_Type = Rtrim(&SB.XLATSHORTNAME, ' ')

FROM PS_JOB_JR SA
       ,XLATTABLE_VW SB
WHERE SA.EMPLID LIKE $Emplid
AND SB.FIELDNAME='SALARY_TYPE_MEX'
AND SB.FIELDVALUE=SA.SALARY_TYPE_MEX

end-select
end-procedure Get-salary-Type

begin-procedure Def-Arrays
CREATE-ARRAY NAME = arr_erns SIZE = 100
     FIELD = e_code:number
     FIELD = e_amount:number
     FIELD = e_unit:number

CREATE-ARRAY NAME = arr_ded SIZE = 100
     FIELD = d_code:number
     FIELD = d_amount:number
     FIELD = d_unit:number

CREATE-ARRAY Name = arr_ern_tot SIZE = 100
     FIELD = e_pin:number
     FIELD = e_amount:number
     FIELD = e_unit:number
     FIELD = e_Empty:char='Y'
     FIELD = e_Rows:number

CREATE-ARRAY Name = arr_ded_tot SIZE = 100
     FIELD = d_pin:number
     FIELD = d_amount:number
     FIELD = d_unit:number
     FIELD = d_Empty:char='Y'
     FIELD = d_Rows:number

end-procedure Def-Arrays

!***********************************************************************
#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'reset.sqc'        ! Reset printer procedure
#include 'stdapi.sqc'       ! Update Process API
#include 'getcomex.sqc'     ! Get selected fields from Company Table and Mexico Fields
#include 'number.sqc'       ! Routines to format numbers
#include 'datetime.sqc'     ! Routines for date and time formatting
