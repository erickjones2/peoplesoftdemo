!***********************************************************************
!  GPDEGL02.SQR: Reconciliation List                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:36:01                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! wdu06-881b10 added procedure to replace empty accounting line record
! wdu06-881b10 setid/business_unit fix
!
#define versionstamp '=== Functional Update Stamp 20060330-1700 wdu06-890b5 ==='

#include 'setenv.sqc' !set environment

#define col1        10  ! Account Type
#define col2        29 ! Accounting Period
#define col3        47 ! Descr
#define col4        79 ! Account
#define col5        91 ! Debit
#define col6        108 ! Credit
#define col7        119 ! Credit


!************************************************************************

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Get-PayEntity-Address
! added by Oliver Morcher, 17.02.09

! The GL-Line Reporting Table was not populated with new data
  do MakeAccountingLineData
  do Process-Main
  do Reset
  do Stdapi-Term
end-Program

!************************************************************************
#include 'setup31.sqc'
begin-heading 11
   #include 'stdhdgtr.sqc'
   print $P_PYENT                        (+2,{col1})
   print $PyentDescr                     (+1, {col1})
   print $BUSI_UNIT                      (0,{col5})
   print $P_BUS_U                        (0,{col7})
   print $PyentAddr                      (+1, {col1})
   print $BUSI_UNIT_GL                   (0,{col5})
   print $P_BUS_UGL                      (0,{col7})
   print $PyentZip                       (+1, {col1})
   print $PyentCity                      (, +1)
   print $JOUR_TEMP                      (0,{col5})
   print $P_APP_JR                       (0,{col7})
   !print $PyentState                     (+1, {col1})
   print $AMOUNT_SPEC1                   (,1)           center
   print '_'                             (+1,{col1},116) FILL
   print $ACC_TYPE                       (+1,{col1})
   print $ACC_DATE                       (0, {col2})
   print $ACC_DESCR                      (0, {col3})
   print $ACCOUNT                        (0, {col4})
   print $DEBIT                          (0, {col5})
   print $CREDIT                         (0, {col6})
   print '_'                             (+1,{col1},116) FILL
end-heading

!************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters                !in GPDEut06.sqc
     do Get-Values
  end-if

  move 'GPDEGL02' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE1
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report

!************************************************************************
begin-procedure Ask-Input

input $Ctl_Account_dt     'Accounting Date     : '
input $Ctl_Payentity      'Pay Entity          : '
input $Ctl_App_Jrnl_Id    'Journal Template    : '
input $Ctl_Busi_Unit      'Business Unit       : '
input $Ctl_Busi_Unit_Gl   'General Ledger Unit : '

end-procedure Ask-Input



!****************************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPDEGL02','BUSI_UNIT',         $BUSI_UNIT, #CW)
  do Get_Field_Information ('GPDEGL02','BUSI_UNIT_GL',   $BUSI_UNIT_GL, #CW)
  do Get_Field_Information ('GPDEGL02','JOUR_TEMP',         $JOUR_TEMP, #CW)
  do Get_Field_Information ('GPDEGL02','TITLE1',              $TITLE1 , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_TYPE',          $ACC_TYPE , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_DATE',          $ACC_DATE , #CW)
  do Get_Field_Information ('GPDEGL02','ACC_DESCR',        $ACC_DESCR , #CW)
  do Get_Field_Information ('GPDEGL02','ACCOUNT',            $ACCOUNT , #CW)
  do Get_Field_Information ('GPDEGL02','DEBIT',                $DEBIT , #CW)
  do Get_Field_Information ('GPDEGL02','CREDIT',              $CREDIT , #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',    $AMOUNT_SPEC, #CW)

  let $DEBIT = rtrim($DEBIT,' ')
  let $DEBIT = lpad($DEBIT,17,' ')
  let $CREDIT = rtrim($CREDIT,' ')
  let $CREDIT = lpad($CREDIT,17,' ')
end-Procedure Report-Translation

!****************************************************************************

begin-procedure Process-Main
#DEBUG show '-> Process-Main  '
do format-datetime($Ctl_Account_dt,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
   let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
   let $ToCurrency = 'EUR'
   let $Eur = ' EUR '
else
   let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
   let $ToCurrency = 'DEM'
   let $Eur = ' DM '
end-if

let  #soll  = 0
let  #haben = 0

! wdu06-890b5 replaced DISTINCT by GROUP BY
BEGIN-Select
B.PAY_ENTITY           &P_PYENT    () on-break print=never procedure=New-Date
A.BUSINESS_UNIT_GL     &P_BUS_UGL  () on-break print=never procedure=New-Date
A.BUSINESS_UNIT        &P_BUS_U    () on-break print=never procedure=New-Date
A.APPL_JRNL_ID         &P_APP_JR   () on-break print=never procedure=New-Date
A.ACCOUNTING_DT        &P_ACC_DT   () on-break print=never procedure=Date-Total
C.ACCOUNT              &P_ACCT
C.DESCR                &P_DESCR
C.ACCOUNT_TYPE         &P_ACC_TYPE
B.REVERSE_SIGN         &P_SIGN
! wdu06-890b5 sum is required for group, we may sum only same currencies unless we convert on the fly
SUM(A.MONETARY_AMOUNT) &P_MON_AMT
A.CURRENCY_CD
A.RATE_MULT
A.RATE_DIV

  let $P_PYENT              =  rtrim(&P_PYENT    ,' ')
  let $P_BUS_UGL            =  rtrim(&P_BUS_UGL  ,' ')
  let $P_BUS_U              =  rtrim(&P_BUS_U    ,' ')
  let $P_APP_JR             =  rtrim(&P_APP_JR   ,' ')
  let $P_ACCT               =  rtrim(&P_ACCT     ,' ')
  let $P_DESCR              =  rtrim(&P_DESCR    ,' ')
  let $P_ACC_TYPE           =  rtrim(&P_ACC_TYPE ,' ')
  let $P_SIGN               =  rtrim(&P_SIGN     ,' ')
  let #RateMult      =  &A.RATE_MULT
  let #RateDiv       =  &A.RATE_DIV
  let $Current_Curr   =  &A.CURRENCY_CD

  if $Current_Curr <> $ToCurrency
       if #RateMult <> 0 and #RateDiv <> 0
            let #P_MON_AMT = (&P_MON_AMT / #RateDiv) * #RateMult
         if #P_MON_AMT <> 0
               if not #_MultiCurr
                  let #Out_ToAmt = round (#P_MON_AMT, 2)
               else
                  do Format_Currency_Amt_Numeric(#P_MON_AMT,$ToCurrency,&P_ACC_DT, #Out_ToAmt, 'I')
               end-if
               let #P_MON_AMT = #Out_ToAmt
            end-if
       else
            let #P_MON_AMT = &P_MON_AMT
       end-if
  else
       let #P_MON_AMT = &P_MON_AMT
 end-if

 ! added by Oliver Morcher, 11.02.09 - Change for Reverse-Sign
 if $P_SIGN = 'Y'
   let #P_MON_AMT = -1 * #P_MON_AMT
 end-if
 
  do Format-DateTime(&P_ACC_DT, $P_ACC_DT, {DEFDATE},'','')
  do Format-Number  (#P_MON_AMT,$P_MON_AMT,'99,999,999,999.99mi')


  print $P_ACC_TYPE             (+1,{col1})
  print $P_ACC_DT               (0,{col2})
  print $P_DESCR                (0,{col3})
  print $P_ACCT                 (0,{col4})

  if  $P_SIGN = 'N'
      print $P_MON_AMT          (0,{col5})
      let #soll = #soll +  #P_MON_AMT
  else
      print $P_MON_AMT          (0,{col6})
      let #haben = #haben + #P_MON_AMT
  end-if

FROM PS_GPDE_GL_ACC_LIN A, PS_GP_GL_MAP_DTL B , PS_GL_ACCOUNT_TBL C, PS_BUS_UNIT_TBL_HR D
WHERE A.BUSINESS_UNIT = B.BUSINESS_UNIT
AND   A.PROCESS_INSTANCE = #this_process_instance ! added by Oliver Morcher, 17.02.09 - need to select also the process instance
AND   A.BUSINESS_UNIT = D.BUSINESS_UNIT
AND   A.LINE_DESCR    = B.GROUPING_CODE
AND   A.ACCOUNT       = B.ACCOUNT
AND   A.ACCOUNT       = C.ACCOUNT
AND   C.SETID         = D.BUSINESS_UNIT         ! -- was:DEFAULT_SETID
AND   C.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL CA
                         WHERE CA.SETID   = C.SETID
                         AND   CA.ACCOUNT = C.ACCOUNT
                         AND   CA.EFFDT <= $Ctl_Account_dt)
AND   C.EFF_STATUS    = 'A'
AND   B.EFFDT         = (SELECT MAX(EFFDT) FROM PS_GP_GL_MAP_DTL BA
                         WHERE BA.PAY_ENTITY=B.PAY_ENTITY
                         AND   BA.BUSINESS_UNIT = B.BUSINESS_UNIT
                         AND   BA.GROUPING_CODE = B.GROUPING_CODE
                         AND   BA.EFFDT <= $Ctl_Account_dt)
AND  (A.PIN_CHART1_VAL = B.PIN_CHART1_VAL or B.PIN_CHART1_VAL = ' ')
AND  (A.PIN_CHART2_VAL = B.PIN_CHART2_VAL or B.PIN_CHART2_VAL = ' ')
AND  (A.PIN_CHART3_VAL = B.PIN_CHART3_VAL or B.PIN_CHART3_VAL = ' ')
AND  (A.PIN_CHART4_VAL = B.PIN_CHART4_VAL or B.PIN_CHART4_VAL = ' ')
AND  (A.PIN_CHART5_VAL = B.PIN_CHART5_VAL or B.PIN_CHART5_VAL = ' ')
AND  (A.PIN_CHART6_VAL = B.PIN_CHART6_VAL or B.PIN_CHART6_VAL = ' ')
AND  (A.PIN_CHART7_VAL = B.PIN_CHART7_VAL or B.PIN_CHART7_VAL = ' ')
AND  (A.PIN_CHART8_VAL = B.PIN_CHART8_VAL or B.PIN_CHART8_VAL = ' ')
[$B_Payentity]
[$A_Busi_Unit]
[$A_Busi_Unit_Gl]
[$A_App_Jrnl_Id]
[$A_Account_dt]
! wdu06-890b5 need to group by all but the amount sum(A.MONETARY_AMOUNT)
GROUP BY
B.PAY_ENTITY
,A.BUSINESS_UNIT_GL
,A.BUSINESS_UNIT
,A.APPL_JRNL_ID
,A.ACCOUNTING_DT
,C.ACCOUNT
,C.DESCR
,C.ACCOUNT_TYPE
,B.REVERSE_SIGN
,A.CURRENCY_CD
,A.RATE_MULT
,A.RATE_DIV
ORDER BY B.PAY_ENTITY,A.BUSINESS_UNIT_GL,A.BUSINESS_UNIT,A.APPL_JRNL_ID,A.ACCOUNTING_DT,A.CURRENCY_CD
END-Select

    do Date-Total

#DEBUG show '<- Process-Main  '
end-procedure Process-Main
!****************************************************************************
begin-procedure New-Date

  new-page

end-procedure

!****************************************************************************
begin-procedure Date-Total

      do Format-Number  (#soll,$soll,'99,999,999,999.99mi')
      do Format-Number  (#haben,$haben,'99,999,999,999.99mi')

      print $soll               (+2,{col5}) bold
      print $haben              (0 ,{col6}) bold
      print ''                  (+1,0)

      let  #soll  = 0
      let  #haben = 0

end-procedure


! ------------  Common procedures for GPDEGL01 and GPDEGL02 -----------------------
!
! GPDEGL01 is master
!
begin-procedure Get-Values
! wdu06-881b10 added $GD values
    let $language_cd      = $PRCS_LANGUAGE_CD
    let $Ctl_Busi_Unit    = RTRIM(&GPDE_RUN_CNTL.BUSINESS_UNIT ,' ')
    let $Ctl_Busi_Unit_Gl = RTRIM(&GPDE_RUN_CNTL.BUSINESS_UNIT_GL,' ')
    let $Ctl_App_Jrnl_Id  = RTRIM(&GPDE_RUN_CNTL.APPL_JRNL_ID,' ')
    let $Ctl_Account_dt   = RTRIM(&GPDE_RUN_CNTL.ACCOUNTING_DT,' ')
    let $Ctl_Payentity    = RTRIM(&GPDE_RUN_CNTL.PAY_ENTITY,' ')

   if  $Ctl_Busi_Unit <> ''
       let $A_Busi_Unit     = ' AND A.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
       let $GD_Busi_Unit     = ' AND GD.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
   else
       let $A_Busi_Unit     = ' '
       let $GD_Busi_Unit     = ' '
   end-if

   if  $Ctl_Busi_Unit_Gl <> ''
       let $A_Busi_Unit_Gl  = ' AND A.BUSINESS_UNIT_GL = ''' || $Ctl_Busi_Unit_Gl ||  ''' '
   else
       let $A_Busi_Unit_Gl  = ' '
   end-if

   if  $Ctl_App_Jrnl_Id <> ''
       let $A_App_Jrnl_Id   = ' AND A.APPL_JRNL_ID     = ''' || $Ctl_App_Jrnl_Id  ||  ''' '
   else
       let $A_App_Jrnl_Id   = ' '
   end-if

   if  $Ctl_Account_dt <> ''
       let $A_Account_dt    = ' AND A.ACCOUNTING_DT    = ''' || $Ctl_Account_dt   ||  ''' '
       let $GD_Account_dt    = ' AND GD.POSTING_DATE    = ''' || $Ctl_Account_dt   ||  ''' '
   else
       let $A_Account_dt    = ' '
       let $GD_Account_dt    = ' '
   end-if

   if  $Ctl_Payentity <> ''
       let $B_Payentity     = ' AND B.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' '
                                  !|| ' AND A.PIN_CHART1_VAL   = ''' || $Ctl_Payentity    ||  ''' '
       let $GD_Payentity     = ' AND GD.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' '
   else
       let $B_Payentity     = ' '
       let $GD_Payentity     = ' '
   end-if
end-procedure






begin-procedure MakeAccountingLineData
! wdu06-881b10 added procedure to replace empty accounting line record
!
! we need to create our own accounting line
!
!
! depending on the report we need 2 distinct result sets.
show '(MakeAccountingLineData)'
if $ReportID = 'GPDEGL01'
    let #this_process_instance = 0
else
    let #this_process_instance = 1
end-if

! clear last result
begin-sql
DELETE FROM PS_GPDE_GL_ACC_LIN WHERE PROCESS_INSTANCE = #this_process_instance
end-sql

begin-sql
INSERT INTO PS_GPDE_GL_ACC_LIN(PROCESS_INSTANCE
    ,AUDIT_ACTN,ACCOUNT,ACCOUNTING_DT,ACCOUNTING_PERIOD,APPL_JRNL_ID,BUSINESS_UNIT,
    BUSINESS_UNIT_GL,FISCAL_YEAR,GL_DISTRIB_STATUS,JOURNAL_ID,JOURNAL_LINE,
    LEDGER,LEDGER_GROUP,LINE_DESCR,MONETARY_AMOUNT,CURRENCY_CD,FOREIGN_AMOUNT,
    FOREIGN_CURRENCY,RT_TYPE,RATE_MULT,RATE_DIV,PIN_CHART1_VAL,PIN_CHART2_VAL,
    PIN_CHART3_VAL,PIN_CHART4_VAL,PIN_CHART5_VAL,PIN_CHART6_VAL,PIN_CHART7_VAL,
    PIN_CHART8_VAL)
SELECT #this_process_instance
    ,'A',GD.ACCOUNT,$Ctl_Account_dt,0,MAP.APPL_JRNL_ID
    ,GD.BUSINESS_UNIT,BU.BUSINESS_UNIT_GL,0,'N',' ',0,' ',' ',GD.GROUPING_CODE,
    SUM(GD.CALC_RSLT_VAL),GD.CURRENCY_CD,SUM(GD.CALC_RSLT_VAL),GD.CURRENCY_CD,
    'OFFIC',1,1,GD.PIN_CHART1_VAL,GD.PIN_CHART2_VAL,GD.PIN_CHART3_VAL,GD.PIN_CHART4_VAL
    ,GD.PIN_CHART5_VAL,GD.PIN_CHART6_VAL,GD.PIN_CHART7_VAL,GD.PIN_CHART8_VAL
    FROM PS_GP_GL_MAP MAP,
    PS_BUS_UNIT_TBL_HR BU,
    PS_GP_GL_DATA GD
WHERE 0=0
! check runcontrol parameters
! -- GD.CAL_RUN_ID=%Bind(CAL_RUN_ID)
! -- AND GD.BUSINESS_UNIT=%Bind(BUSINESS_UNIT)
! -- AND GD.PAY_ENTITY=%Bind(PAY_ENTITY)
[$GD_Account_dt]
[$GD_Busi_Unit]
[$GD_Payentity]
!
AND GD.BUSINESS_UNIT=BU.BUSINESS_UNIT
AND GD.ACCOUNT<>' '
AND GD.PAY_ENTITY=MAP.PAY_ENTITY
AND GD.BUSINESS_UNIT=MAP.BUSINESS_UNIT
AND MAP.EFFDT=(
    SELECT MAX(SUBM.EFFDT)
    FROM PS_GP_GL_MAP SUBM
    WHERE SUBM.PAY_ENTITY=MAP.PAY_ENTITY
    AND SUBM.BUSINESS_UNIT=MAP.BUSINESS_UNIT
    AND SUBM.EFFDT< $Ctl_Account_dt )
GROUP BY GD.CAL_RUN_ID,GD.BUSINESS_UNIT,GD.CURRENCY_CD,GD.ACCOUNT,GD.GROUPING_CODE
,GD.PIN_CHART1_VAL,GD.PIN_CHART2_VAL,GD.PIN_CHART3_VAL,GD.PIN_CHART4_VAL,
GD.PIN_CHART5_VAL,GD.PIN_CHART6_VAL,GD.PIN_CHART7_VAL,GD.PIN_CHART8_VAL,
BU.BUSINESS_UNIT_GL,MAP.APPL_JRNL_ID
end-sql


end-procedure





!****************************************************************************

#include 'gpdeut01.sqc'  !get values mask routines
#include 'gpdeut04.sqc'  !get payentity address
#include 'gpdeut06.sqc'  !get values mask routines
#include 'readxlat.sqc'    !routine to get values from xlattbl
#include 'stdapi.sqc'      !routines to update run status
#include 'reset.sqc'       !reset printer procedure
#include 'curdttim.sqc'    !get-current-datetime procedure
#include 'datetime.sqc'    !routines for date and time formatting
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'     !validate date routine
#include 'number.sqc'      !routines to format numbers
#include 'sqrtrans.sqc'  !sqr strings table procedures

