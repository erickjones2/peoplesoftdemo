!***********************************************************************
!  Detailed Calculation Worksheet General Testing Version
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
! CHANGE LOG                                                           *
!                                                                      *
!  2/19/2006  PY - Fix for Calculations with All Plans checked         *
!                                                                      *
! 11/29/2001  PY - LEGISLATIVE REQUIREMENT                             *
!                  CHANGES TO INTERNAL REVENUE CODE SECTION 415        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/17:15:00:10                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'usarpt.sqc' !Get USA variables

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do StdApi-Term
end-report

#Include 'setup31.sqc'  !printer and page-size initialization


!* The below section defines various column lengths and widths as    *!
!* variables.  This is intended to ease the formatting of data.      *!
#define colTitle 1
#define col1aa 1,60
#define col2aa 62,61
#define col1ba 1,100
#define col2ba 102,20
#define col1aaaa 1,30
#define col2aaaa 31,31
#define col3aaaa 62,31
#define col4aaaa 92,30
#define col1aaaa2 1,36
#define col2aaaa2 37,30
#define col1bccb 1,18
#define col2bccb 19,39
#define col3bccb 45,55
#define col4bccb 56,10
#define col5bccb 70,6
#define col6bccb 77,10
#define col7bccb 90,12
#define col8bccb 105,20
#define col1ddd 1,40
#define col1addd 12,30
#define col2ddd 41,41
#define col3ddd 82,41
#define col3dddb 82,21
#define col3adddb 68,30
#define col3dddb2 92,21
#define col4dddb 103,20
#define col1bbbbbb 1,20
#define col2bbbbbb 22,20
#define col3bbbbbb 43,20
#define col35bbbbbb 52,12
#define col4bbbbbb 64,20
#define col5bbbbbb 85,20
#define col6bbbbbb 106,18
#define col1a9     1,11
#define col2a9     13,11
#define col3a9     25,11
#define col4a9     37,6
#define col5a9     44,11
#define col6a9     56,11
#define col7a9     68,11
#define col8a9     80,11
#define col9a9     92,11
#define col10a9    104,11
#define col1a8     1,15
#define col2a8     17,15
#define col3a8     33,15
#define col4a8     49,15
#define col5a8     65,15
#define col6a8     81,15
#define col7a8     97,14
#define col8a8     112,13
#define col1a11     1,11
#define col2a11     13,11
#define col3a11     25,11
#define col4a11     37,11
#define col5a11     49,11
#define col6a11     61,9
#define col7a11     71,10
#define col8a11     82,9
#define col9a11     92,10
#define col10a11    103,10
#define col11a11    114,11
#define col1a18     1,18
#define col20a11    20,11
#define col32a11    32,11
#define col44a11    44,11
#define col56a11    56,11
#define col68a11     68,11

!*                                                                   *!
!*                                                                   *!


#define header-lines 10
begin-HEADING {header-lines}
  #Include 'stdhdg01.sqc'
  #Include 'pahdg01.sqc'
end-HEADING

!* The below sections determine if the report was started from within   *!
!* tools or from the SQRW icon.  If it was started from the icon,       *!
!* prompt the user to enter the calculation name and employee id        *!
!* (Ask-Values).  Otherwise get the values from the run control table   *!
!* with the run control id and oprid passed from the process scheduler. *!
!* (Get-Values).                                                        *!

begin-procedure Init-Report
  move 'PAT06B' to $ReportID
  move 'Calculation Worksheet' to $ReportTitle
  do StdApi-Init
  if $prcs_process_instance = ''
   do Ask-values
  else
   do Get-values-pa
  end-if
  do Get_CalcRun_DateTime
  let $squiggly-line = '~~~~~~~~~~~~~~~~~~~~~~~~'
end-procedure

begin-procedure Get-Values-pa
!No Prompt
  do Select-Parameters-PA
  let $calc_name = rtrim(&pa_run_cntl.calc_name,' ')
  let $emplid    = rtrim(&pa_run_cntl.emplid,' ')
end-procedure

begin-procedure Ask-Values
  input $calc_name_inpt  'Enter Calculation Name'
  input $emplid_inpt        'Enter Employee ID'
  let $calc_name = rtrim($calc_name_inpt,'')
  let $emplid = rtrim($emplid_inpt,'')
end-procedure


begin-procedure Get_CalcRun_DateTime
let $sql-statement = 'PAT06B-Calculation Date Time'
BEGIN-SELECT ON-ERROR=SQL-ERROR
ASOFDATE
  move '1' to $Year4
  do Format-DateTime(&asofdate,$asofdat, {DEFDATE}, '', '',)
{DateTimeOut-Prefix}CALC_TS{DateTimeOut-Suffix}  &CALC_TS
  move '1' to $Year4
  move '1' to $TLZero
  do Format-DateTime(&calc_ts, $calc_ts, {DEFDATE}, 'time', '',)
CALC_ALL_PLANS_CD
  let $calc_all_plans_cd = &calc_all_plans_cd
PROCESS_INSTANCE
PA_SVC_RESTORE
FROM PS_PA_CALCULATION
WHERE CALC_NAME = $calc_name
END-SELECT
let $calc_ts_date = substr($calc_ts,1,10)
let $calc_ts_time = ltrim(substr($calc_ts,12,10),'')
end-procedure

!*                                                                   *!
!*                                                                   *!
!* The below section is the main paragraph of the program.  From this*!
!* procedure the four major paragraphs are executed.                 *!
!* 1. Initialization                                                 *!
!* 2. Calculation level employee information                         *!
!* 3. Plan level information (most of the calculation results are    *!
!*    specific to a benefit plan.)                                   *!
!* 4. Summary information                                            *!
!*                                                                   *!
!* For every plan found in the ps_pa_clc_pln_inpt table with the     *!
!* calculation keys, a process-pln-lvl-info paragraph is executed    *!
!*                                                                   *!
!* Note : $plan_name_flag is used to allow benefit plan to be printed*!
!*        in the header only if processing at plan level information *!
begin-procedure Process-Main
do Initialize
do Process-clc-lvl-messages
do Process-clc-lvl-empl-info
let $plan_name_flag = 'N'
do Load-Header-Info
do page-break

let $sql-statement = 'PAT06B-Calculation Plan Input'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PA_PLAN.BENEFIT_PLAN
CLC_DATE.BEN_CMCMNT_AGE
CLC_DATE.LUMP_SUM_DT
CLC_INPT.EARN_ASSUMP_AMT
CLC_INPT.HRS_ASSMP_AMT
CLC_INPT.WAGE_BASE_ESCAL_RT
CLC_INPT.SALSC_ASMP_INC_PCT
CLC_INPT.CPI_ASMP_INC_PCT
CLC_PLN_INPT.CONT_ASMP_PCT
CLC_DATE.BEN_CMDT_DATE
CLC_PLN_INPT.PA_SS_ELIG_OVRD
CLC_PLN_INPT.PA_BENEF_DOB
  move '1' to $Year4
  do Format-DateTime(&CLC_PLN_INPT.PA_BENEF_DOB,$BNF-DOB-OVRD, {DEFDATE}, '', '',)
CLC_PLN_INPT.PA_BENEF_SEX
CLC_PLN_INPT.USE_OVERRIDE_SECT
CLC_PLN_INPT.USE_ADJUST_SECT
  let $plan_name_flag = 'Y'
  do load-header-info
  do Process-plan-lvl-info
FROM PS_PA_CLC_PLN_INPT    CLC_PLN_INPT, PS_PA_CALCULATION CLC_INPT,
     PS_PA_CLC_DATES CLC_DATE, PS_PA_PROC PA_PLAN
WHERE CLC_PLN_INPT.CALC_NAME    = $calc_name
  AND CLC_INPT.CALC_NAME        = $calc_name
  AND CLC_DATE.CALC_NAME        = $calc_name
  AND CLC_DATE.EMPLID           = $emplid
  AND CLC_DATE.BENEFIT_PLAN     = PA_PLAN.BENEFIT_PLAN
  AND ((CLC_PLN_INPT.BENEFIT_PLAN = PA_PLAN.BENEFIT_PLAN
  OR CLC_INPT.CALC_ALL_PLANS_CD = 'Y')  
  AND PA_PLAN.EFFDT = (SELECT MAX (B.EFFDT) FROM PS_PA_PROC B
  WHERE B.BENEFIT_PLAN = PA_PLAN.BENEFIT_PLAN
  AND B.EFFDT <= CLC_INPT.ASOFDATE))
END-SELECT

do limit-415
do process-summary-info
end-procedure
!*                                                                   *!
!*                                                                   *!

!* The below section is the initialization section                   *!
begin-procedure Initialize
move 0 to #lines_remaining
move 0 to #line_count
move 0 to #section_min
create-array name=function-result size=100
   field = functn-rslt:char
   field = functn-descr:char
   field = eacct-type:char

create-array name=message-parm size=100
   field = parm-seq:number
   field = message-parm:char
move 0 to #counter
end-procedure
!*                                                                   *!
!*                                                                   *!


!* The calculation level employee information has four sections.     *!
!* None of these sections contain plan specific information          *!                                                        *!
begin-procedure Process-clc-lvl-empl-info
do process-emp-info-section
do process-emp-history-section
end-procedure
!*                                                                   *!
!*                                                                   *!
begin-procedure  Process-clc-lvl-messages
let #section_min = 6
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
let #first_time=0

BEGIN-SELECT
CAT.MESSAGE_TEXT
  let $message_trimmed = rtrim(&cat.message_text,' ')

  if $PSOptions_language_cd <> $curr_language_cd
    let #MessageSetNbr = &CAT.MESSAGE_SET_NBR
    let #MessageNbr    = &CAT.MESSAGE_NBR
    let $MessageText = ''
    do Read-MsgCatalog-Table
    if not IsBlank($MessageText)
      let $message_trimmed = rtrim($MessageText,' ')
    end-if
  end-if

  if #first_time=0
    let #first_time=1
    print 'Calculation Messages'       (#sec-line1,{ColTitle}) center
    print $squiggly-line               (+1,51)
  end-if
CAT.MSG_SEVERITY
LOGA.PROCESS_INSTANCE
LOGA.MESSAGE_SET_NBR
LOGA.MESSAGE_NBR
LOGA.MESSAGE_SEQ
CAT.MESSAGE_SET_NBR
CAT.MESSAGE_NBR
  do retrieve-message-parameters
  if #parm_count > 0
   let #srch-pos = 1
   let #i=0
   while #i < #parm_count
    let #pos_var = instr($message_trimmed,'%',#srch-pos)
    let #len-of-phrase = #pos_var - #srch-pos
!*  **This is to ensure that we aren't at the end and there is no % sign**
    let $pct_exists = substr($message_trimmed, #pos_var, 1)
!*  **This is to set the position after the % sign**
    let #pos_var=#pos_var + 1
!*  **Retrieve the number portion of (%2) for example so we know what parm to retrieve**
    let $parm = substr($message_trimmed, #pos_var, 1)
!*  **Convert the number portion of (%2) to number so we can subtract from it.  We need**
!*  **to subtract from the #parm because the occurs begins on level 0 **

    if $pct_exists = '%'
     let #parm = to_number($parm)

      ! ***  Make sure that a number follows % sign in message
     if #parm > 0
       let #parm = #parm - 1
!*  **Retrieve the parm-seq which should match the occurs + 1 and the associated message-parm**
       get #get-parm-seq $get-message-parm from message-parm(#parm)
       let $get-parm-seq = to_char(#get-parm-seq)
       let $phrase = $phrase || substr($message_trimmed,#srch-pos, #len-of-phrase)  || $get-message-parm
       let #srch-pos = #pos_var + 1
       let $srch-pos=to_char(#srch-pos)

     else
       let $phrase = $phrase || substr($message_trimmed,#srch-pos, #len-of-phrase)
       let #srch-pos = #pos_var
     end-if

    end-if
     let #i=#i+1
    end-while
  print $phrase                      (+1,{ColTitle})
  let $phrase = ''
  else
  print $message_trimmed            (+1,{ColTitle})
  end-if

FROM PSMSGCATDEFN CAT, PS_MESSAGE_LOG LOGA
WHERE LOGA.PROCESS_INSTANCE =  &PROCESS_INSTANCE
AND LOGA.MESSAGE_SET_NBR = CAT.MESSAGE_SET_NBR
AND LOGA.MESSAGE_NBR=CAT.MESSAGE_NBR
AND CAT.MSG_SEVERITY <> 'W'
ORDER BY LOGA.MESSAGE_SEQ
END-SELECT
end-procedure



begin-procedure retrieve-message-parameters


LET #PARM_COUNT = 0

BEGIN-SELECT
LOGPARM.MESSAGE_SEQ
LOGPARM.PARM_SEQ
LOGPARM.MESSAGE_PARM
  LET $LOGPARM_MSG = rtrim(&LOGPARM.MESSAGE_PARM,' ')
  put &LOGPARM.PARM_SEQ $LOGPARM_MSG into message-parm(#parm_count)
  ADD 1 TO #PARM_COUNT
FROM PS_MESSAGE_LOGPARM LOGPARM
WHERE LOGPARM.PROCESS_INSTANCE= &PROCESS_INSTANCE
AND LOGPARM.MESSAGE_SEQ=&LOGA.MESSAGE_SEQ
ORDER BY LOGPARM.MESSAGE_SEQ,LOGPARM.PARM_SEQ
END-SELECT
end-procedure

!* For each plan, we need to report on all of the functions that     *!
!* were a part of the calculation.  A function such as Service, may  *!                                                        *!
!* have been a part of the calculation more than once.  The service  *!
!* module may have calculated results for three seperate service     *!
!* situations.  An example may be vesting service, participation     *!
!* service, and credited service.  We use function results to identify!
!* these different service situations.  Therefore, for every plan we *!
!* report on all of the functions and for every function we report   *!
!* on all of the function results.                                   *!
!* --  Plan ------                                                   *!
!*        Function ------                                            *!
!*              Function Result ------                               *!
!*              Function Result ------                               *!
!*        Function ------                                            *!
!*        Function ------                                            *!
!*        Function ------                                            *!
!*                                                                   *!
!***********************************************************************
!***********************************************************************
begin-procedure Process-plan-lvl-info


let $sql-statement = 'PAT06B-Calculation Plan BENEF'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_PLN_BENE.PA_SS_ELIG
CLC_PLN_BENE.PA_BENEF_DOB
  move '1' to $Year4
  do Format-DateTime(&CLC_PLN_BENE.PA_BENEF_DOB,$BENEF-DOB, {DEFDATE}, '', '',)
CLC_PLN_BENE.PA_BENEF_SEX
CLC_PLN_BENE.PA_BENEF_NAME
FROM PS_PA_CLC_PLN_BENE    CLC_PLN_BENE
WHERE CLC_PLN_BENE.CALC_NAME    = $calc_name
  AND CLC_PLN_BENE.EMPLID       = $emplid
END-SELECT

do plan-overrides
let $override_test = rtrim(&clc_pln_inpt.use_override_sect,' ')
if $override_test = 'Y'
   do plan-function-result-overrides
end-if
let $adjust_test = rtrim(&clc_pln_inpt.use_adjust_sect,' ')
if $adjust_test = 'Y'
   do plan-function-result-adjustments
end-if

do plan-dates

let $functn_name = 'OPTFORMS'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do optional-forms
 add 1 to #loop
end-while


let $functn_name = 'BENCALC'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do benefit-calc-info
 add 1 to #loop
end-while


let $functn_name = 'SERVICE'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do service
 add 1 to #loop
end-while



let $functn_name = 'FAE'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
   do average-earnings
 add 1 to #loop
end-while



let $functn_name = 'VESTING'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm from function-result(#loop)
  do vesting
 add 1 to #loop
end-while

let $functn_name = 'AGEADJUST'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do age-adj-factors
 add 1 to #loop
end-while

let $functn_name = 'DEATHCVRG'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do death-adj-factors
 add 1 to #loop
end-while
do page-break


let $functn_name = 'COVRDCOMP'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do covered-compensation
 add 1 to #loop
end-while


let $functn_name = 'SOCSEC'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do social-security
 add 1 to #loop
end-while

let $functn_name = 'CONTSBEN'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
   do contributory
 add 1 to #loop
end-while


let $functn_name = 'CASHBAL'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm  $functn_result_descr from function-result(#loop)
   do account-balances
 add 1 to #loop
end-while

let $functn_name = 'EMPLACCTS'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr $eacct-type from function-result(#loop)
   do employee-accounts
 add 1 to #loop
end-while

let $functn_name = 'PLANELIG'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do plan-eligibility
 add 1 to #loop
end-while

let $functn_name = 'PLANPARTIC'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do plan-participation
 add 1 to #loop
end-while


let $functn_name = 'BENELIG'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
 get $functn_result_nm $functn_result_descr from function-result(#loop)
  do benefit-eligibility
 add 1 to #loop
end-while
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Process-summary-info
end-procedure

!* The only data that is referenced in this report which is not      *!
!* captured and stored at the time of the calculation is employee    *!
!* address                                                           *!
begin-procedure Process-emp-info-section
let $sql-statement = 'PAT06B-PS Personal Data select'

BEGIN-SELECT ON-ERROR=SQL-ERROR
PN.NAME
  Do Get-Empl-Address ($Emplid,'HOME', $AddressFound)
          
 
   let $ADDRESS1 = $GETADDR_Address1
   let $ADDRESS2 = $GETADDR_Address2
 
   let $CITY = $GETADDR_CITY
   let $STATE =$GETADDR_STATE
   let $POSTAL = $GETADDR_POSTAL
   
   do Get-Phone-Data

FROM PS_PERSON_NAME PN
WHERE PN.EMPLID = $emplid
END-SELECT

let $sql-statement = 'PAT06B-Employee Data View'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_EMP_VW.EVENT_DT
  move '1' to $Year4
  do Format-DateTime(&clc_emp_vw.event_dt, $event_dt, {DEFDATE}, '', '',)
CLC_EMP_VW.CALC_REASON
CLC_EMP_VW.NAME
PERS_NID.NATIONAL_ID
CLC_EMP_VW.BIRTHDATE
  move '1' to $Year4
  do Format-DateTime(&clc_emp_vw.birthdate, $birthdate, {DEFDATE}, '', '',)
CLC_EMP_VW.MAR_STATUS
CLC_EMP_VW.SEX
CLC_EMP_VW.SPOUSE_NAME
CLC_EMP_VW.SPOUSE_BIRTHDATE
  move '1' to $Year4
  do Format-DateTime(&clc_emp_vw.spouse_birthdate, $spouse_birthdate, {DEFDATE}, '', '',)
  let $fieldname   = 'SEX'
  let $fieldvalue  = rtrim(&clc_emp_vw.sex,' ')

  do read-translate-table
  let $sex = rtrim($xlatlongname,' ')
  let $fieldname   = 'MAR_STATUS'
  let $fieldvalue  = rtrim(&clc_emp_vw.mar_status,' ')
  do read-translate-table
  let $mar_status  = rtrim($xlatlongname,' ')
  let $fieldname   = 'CALC_REASON'
  let $fieldvalue  = rtrim(&clc_emp_vw.calc_reason,' ')
  do read-translate-table
  let $event_reason = rtrim($xlatlongname,' ')
FROM PS_PA_CLC_EMP_VW   CLC_EMP_VW,
     PS_PERS_NID        PERS_NID
WHERE CLC_EMP_VW.CALC_NAME    = $calc_name
  AND CLC_EMP_VW.EMPLID       = $emplid
  AND CLC_EMP_VW.EMPLID       = PERS_NID.EMPLID
  AND PERS_NID.COUNTRY        = {NID_COUNTRY}
  AND PERS_NID.NATIONAL_ID_TYPE  = $PAYROLL_NID_TYPE
end-select

let #section_min = 10
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines})+ 6
print 'Employee Information'          (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
let $personal_data_name = rtrim(&PN.name,' ')
print $personal_data_name            (+2,{col1ddd})
print 'Employee ID'                     (,{col3dddb})
print $emplid                           (,{col4dddb})
let $personal_data_address1 = rtrim($address1,' ')
print $personal_data_address1        (+1,{col1ddd}
print $phone              (,{col2ddd}) edit (xxx)~bxxxxxxxx
print 'Sex'                             (,{col3dddb})
print $sex                              (,{col4dddb})
if rtrim($address2,' ') = ''
  let $addr_line = rtrim($city,' ') || ', '
                        || rtrim($state,' ')
                        || ' ' ||  rtrim($postal,' ')
  print $addr_line                    (+1,{col1ddd})
else
  let $personal_data_address2 = rtrim($address2,' ')
  print $personal_data_address2       (+1,{col1ddd})
end-if
print 'Birthdate'                       (,{col3dddb})
print $birthdate                        (,{col4dddb})
if rtrim($address2,' ') != ''
  let $addr_line = rtrim($city,' ') || ', '
                    || rtrim($state,' ')
                    || ' ' ||  rtrim($postal,' ')
  print $addr_line                    (+1,{col1ddd})
else
  print ' '                           (+1,{col1ddd})
end-if
print 'Marital Status'                (+1,{col3dddb})
print $mar_status                       (,{col4dddb})
print 'Spouse'                        (+1,{col3dddb})
let $clc_emp_vw_spouse_name= rtrim(&clc_emp_vw.spouse_name,' ')
print $clc_emp_vw_spouse_name          (,{col4dddb})
print 'Spouse Birthdate'              (+1,{col3dddb})
print $spouse_birthdate                 (,{col4dddb})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Process-emp-history-section
let #section_min = 6
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
print 'Employment History'            (#sec-line1,{ColTitle}) center
print $squiggly-line                       (+1,51)
print 'Action Reason Code History'         (+1,{Col1aa})
print 'Employee Type History'                (,{Col2aa})
print 'Eff Date'                           (+1,{Col1bccb})
print 'Action     Reason'                    (,{Col2bccb})
print 'Date'                                 (,{Col3aaaa})
print 'Employee Type'                        (,{Col4aaaa})
print '~~~~~~~~~~'                         (+1,{Col1bccb})
print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'  (,{Col2bccb})
print '~~~~~~~~~~'                           (,{Col3aaaa})
print '~~~~~~~~~~~~~'                        (,{Col4aaaa})

move '' to $empl_type_hold
let #nextline = (#current-line - {header-lines})
! There is a 10 line header specified.  This needs to be added to
! current line so that it represents the actual current line
add 1 to #nextline
let $sql-statement = 'PAT06B-Employee Job select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_EMP_JOB.EFFDT
  move '1' to $Year4
  do Format-DateTime(&clc_emp_job.effdt, $effdt, {DEFDATE}, '', '',)
CLC_EMP_JOB.ACTION
CLC_EMP_JOB.ACTION_REASON
CLC_EMP_JOB.EMPL_TYPE
  let $fieldname = 'ACTION'
  let $fieldvalue = rtrim(&clc_emp_job.action,' ')
  do read-translate-table
  let $action = rtrim($xlatlongname,' ')
  let $FieldName = 'EMPL_TYPE'
  let $FieldValue = rtrim(&clc_emp_job.empl_type,' ')
  do read-translate-table
  let $empl_type = rtrim($xlatlongname,' ')
  let $actn_rsn_descr = ' '
  do read-action-reason-table
  do print-action-reason
  let $job_empl_type = rtrim(&clc_emp_job.empl_type,' ')
  if $job_empl_type != $empl_type_hold
    let #line-hold = (#current-line - {header-lines})
    print $effdt                  (#nextline,{Col3aaaa})
    print $empl_type                       (,{Col4aaaa})
    add 1 to #nextline
    position (#line-hold,)
  end-if
  move $job_empl_type to $empl_type_hold
FROM PS_PA_CLC_EMP_JOB CLC_EMP_JOB
WHERE CLC_EMP_JOB.CALC_NAME    = $calc_name
  AND CLC_EMP_JOB.EMPLID       = $emplid
ORDER BY CLC_EMP_JOB.EFFDT
END-SELECT
end-procedure

begin-procedure read-action-reason-table
let $sql-statement = 'PAT06B-Action Reason select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
ACTN_RSN_TBL.DESCR
   let $actn_rsn_descr = rtrim(&actn_rsn_tbl.descr,' ')
FROM PS_ACTN_REASON_TBL ACTN_RSN_TBL
WHERE ACTN_RSN_TBL.ACTION_REASON = &clc_emp_job.action_reason
 AND  ACTN_RSN_TBL.ACTION        = &clc_emp_job.action
 AND  ACTN_RSN_TBL.EFFDT        <= &clc_emp_job.effdt
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure print-action-reason
print $effdt                                     (+1,{Col1bccb})
if rtrim($actn_rsn_descr,' ') != ''
  let $action_reason =  $action || ' (' ||
      rtrim($actn_rsn_descr,' ') || ')'
else
  let $action_reason =  $action
end-if
print $action_reason                               (,{Col2bccb})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure get-benefit-plan-descr
let $sql-statement = 'PAT06B-Benefit Plan Table'
BEGIN-SELECT ON-ERROR=SQL-ERROR
BENEF_PLAN_TBL.DESCR
FROM PS_BENEF_PLAN_TBL    BENEF_PLAN_TBL
WHERE BENEF_PLAN_TBL.BENEFIT_PLAN = &pa_plan.benefit_plan
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure plan-dates

let $sql-statement = 'PAT06B-PLAN_DT_TBL'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PLAN_DT.ERLY_RET_RED_DT
  move '1' to $Year4
  do Format-DateTime(&PLAN_DT.ERLY_RET_RED_DT,$ERD-DATE, {DEFDATE}, '', '',)
PLAN_DT.NORM_RET_DT
  move '1' to $Year4
  do Format-DateTime(&PLAN_DT.NORM_RET_DT,$NRD-DATE, {DEFDATE}, '', '',)
FROM PS_PA_PLAN_DT_TBL    PLAN_DT
WHERE PLAN_DT.BENEFIT_PLAN = &pa_plan.benefit_plan
AND PLAN_DT.EMPLID=$EMPLID
AND PLAN_DT.EFFDT <= &ASOFDATE
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************       !***********************************************************************
!***********************************************************************
begin-procedure plan-overrides
let #section_min = 11
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
print 'Plan Overrides'               (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
print 'Assumed Earnings Amt:'         (+1,{Col1aaaa})
print &clc_inpt.earn_assump_amt        (,{Col3bbbbbb})  edit $,$$$,$$$,$$9.99
print 'Assumed Hours Amt:'             (,{Col3aaaa})
print &clc_inpt.hrs_assmp_amt          (,{Col6bbbbbb})  edit 9.999999
print 'Wage Base Escalation Rate:'    (+1,{Col1aaaa})
print &clc_inpt.wage_base_escal_rt     (,{Col35bbbbbb}) edit 9.999999
print 'Assumed CPI Pct Inc'            (,{Col3aaaa})
print &clc_inpt.cpi_asmp_inc_pct       (,{Col6bbbbbb})  edit 9.999999
print 'Assumed Salary Scale Pct Incr:'    (+1,{Col1aaaa})
print &clc_inpt.salsc_asmp_inc_pct     (,{Col35bbbbbb}) edit 9.999999
print 'Assumed Contributions Pct:'     (,{Col3aaaa})
print &clc_pln_inpt.cont_asmp_pct      (,{Col6bbbbbb})  edit 9.999999
print 'Grant Full Service Credit:'     (+1,{Col1aaaa})
print &pa_svc_restore                  (,59,1)
print 'Spouse Eligibility Override:'  (,{Col3aaaa})
print &clc_pln_inpt.pa_ss_elig_ovrd    (,113,1)
print 'Benficiary DOB Override:'      (+1,{Col1aaaa})
print $bnf-dob-ovrd                    (,50,10)
print 'Beneficiary SEX Override:'      (,{Col3aaaa})
print &clc_pln_inpt.pa_benef_sex       (,113,1)


let #section_min = 10
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
print 'Beneficiary Information'        (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
print 'PLAN:           Spouse Eligibility:'    (+1,{Col1ddd})
print &clc_pln_bene.pa_ss_elig         (,59,1)
print 'CONTINGENT:     Beneficiary Name:'      (+1,{Col1ddd})
print &clc_pln_bene.pa_benef_name      (,50,40)
print '                Beneficiary DOB :'      (+1,{Col1ddd})
print $benef-dob                       (,50,10)
print '                Beneficiary SEX :'      (+1,{Col1ddd})
print &clc_pln_bene.pa_benef_sex       (,59,1)
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure plan-function-result-overrides
let #section_min = 10
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
print 'Function Result Overrides'    (#sec-line1,{ColTitle}) center
print $squiggly-line                 (+1,51)
let $sql-statement = 'PAT06B-Plan Override select'
BEGIN-SELECT
OVRD.BENEFIT_PLAN
OVRD.OVERRIDE_IND
OVRD.FUNCTN_NAME
FUNCTN.DESCR                          (+1,{Col1aaaa})
OVRD.PROC_NAME
FR.DESCR                            (,{Col2aaaa})
OVRD.FLD_NAME                      (,{Col3aaaa})
OVRD.FLD_TYPE
OVRD.FLD_TYPE_DEC
OVRD.FLD_TYPE_DATE
OVRD.FLD_TYPE_CHAR
   if rtrim(&ovrd.fld_type,' ') = 'N'
     let $ovrd-fld-type-dec = LTRIM(edit (&ovrd.fld_type_dec,'9,999,999,999.99'),' ')
     print $ovrd-fld-type-dec      (,{Col4aaaa})
   end-if
   if rtrim(&ovrd.fld_type,' ') = 'C'
     print &ovrd.fld_type_char     (,{Col4aaaa})
   end-if
   if rtrim(&ovrd.fld_type,' ') = 'D'
      move '1' to $Year4
  do Format-DateTime(&ovrd.fld_type_date, $ovrd.fld_type_date, {DEFDATE}, '', '',)
     print $ovrd.fld_type_date     (,{Col4aaaa})
   end-if
FROM PS_PA_CLC_PR_FLD_1 OVRD, PS_PA_FUNCTN FUNCTN, PS_PA_FNC_RSLT_TBL FR
WHERE OVRD.OVERRIDE_IND = 'Y'
AND OVRD.CALC_NAME      = $calc_name
AND OVRD.BENEFIT_PLAN   = &pa_plan.benefit_plan
AND OVRD.FUNCTN_NAME = FUNCTN.FUNCTN_NAME
AND OVRD.BENEFIT_PLAN= FR.BENEFIT_PLAN
AND OVRD.FUNCTN_NAME = FR.FUNCTN_NAME
AND OVRD.PROC_NAME=FR.FUNCTN_RESULT_NM
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure plan-function-result-adjustments
let #section_min = 10
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
print 'Function Result Adjustments'    (#sec-line1,{ColTitle}) center
print $squiggly-line                 (+1,51)
let $sql-statement = 'PAT06B-Plan Adjustments select'
BEGIN-SELECT
ADJ.BENEFIT_PLAN
ADJ.OVERRIDE_IND
ADJ.FUNCTN_NAME
FNCTN.DESCR                          (+1,{Col1aaaa})
ADJ.PROC_NAME
FRN.DESCR                            (,{Col2aaaa})
ADJ.FLD_NAME                      (,{Col3aaaa})
ADJ.FLD_TYPE
ADJ.FLD_TYPE_SDEC
     let $adj-fld-type-dec = LTRIM(edit (&adj.fld_type_sdec,'9,999,999,999.99'),' ')
     print $adj-fld-type-dec      (,{Col4aaaa})
FROM PS_PA_CLC_ADJUST ADJ, PS_PA_FUNCTN FNCTN, PS_PA_FNC_RSLT_TBL FRN
WHERE ADJ.OVERRIDE_IND = 'Y'
AND ADJ.CALC_NAME      = $calc_name
AND ADJ.BENEFIT_PLAN   = &pa_plan.benefit_plan
AND ADJ.FUNCTN_NAME    = FNCTN.FUNCTN_NAME
AND ADJ.BENEFIT_PLAN   = FRN.BENEFIT_PLAN
AND ADJ.FUNCTN_NAME    = FRN.FUNCTN_NAME
AND ADJ.PROC_NAME      = FRN.FUNCTN_RESULT_NM
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure benefit-calc-info
let #section_min = 7
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines}) + 7
if #loop = 0
    print 'Benefit Calculation'          (#sec-line1,{ColTitle}) center
    print $squiggly-line                  (+1,51)
    let $nrd-string = 'Normal Retirement Date: ' || $nrd-date
    let $erd-string = 'Early Retirement Date: ' || $erd-date
    print $nrd-string          (+2,{ColTitle}) center
    print $erd-string         (+1,{ColTitle}) center
end-if
let $fld_name = 'BEN_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $ben_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
else
 let $ben_amt = '$0.00'
end-if

let $fld_name = 'PYMT_FREQ'
do get-character-value
if $return_flag = 'Y'
  let $fieldvalue = rtrim($return_value,' ')
  let $fieldname = 'PYMT_FREQ'
  do read-translate-table
  let $pymnt_freq = rtrim($xlatlongname,' ')
end-if

let $fld_name = 'FORM_CODE'
do get-character-value
if $return_flag = 'Y'
  let $form_code = $return_value
  do get-form-descr
end-if

let $fld_name = 'AUTO_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $auto_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
else
 let $auto_amt = '$0.00'
end-if

print 'Benefit Amount'              (+2,{Col1aa})
let $functn_result_descr = rtrim($functn_result_descr,' ')
print $functn_result_descr          (+1,{Col1aa})
print $ben_amt                        (,{Col2aa})
print 'Automatic Spouse Benefit'    (+1,{Col1aa})
print $auto_amt                        (,{Col2aa})
let $pay_form = $pymnt_freq || ' ' || rtrim(&form_cd.descr,' ')
print $pay_form                     (+1,{Col1ba})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure get-form-descr
let $sql-statement = 'PAT06B-Form Definition select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
FORM_CD.DESCR
FROM PS_PA_DFN_FORM_CD  FORM_CD
WHERE FORM_CD.FORM_CODE = $form_code
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure contributory
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines})
if #loop = 0
print 'Employee Paid Benefit'         (+2,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if

let $fld_name = 'ACCT_BAL_EVENT'
do get-decimal-value
if $return_flag = 'Y'
 let $acct_bal_event =  LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if

let $fld_name = 'ACCT_BAL_DOD'
do get-decimal-value
if $return_flag = 'Y'
 let $acct_bal_dod =  LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if

let $fld_name = 'ACCT_BAL_NRD'
do get-decimal-value
if $return_flag = 'Y'
 let $acct_bal_nrd =  LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if

let $fld_name = 'EE_BEN_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $ee_ben_amt =  LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if

let $fld_name = 'INT_RT_1'
do get-decimal-value
if $return_flag = 'Y'
 let $int_rt_1 =  edit (#return_value,'9.999999')
end-if

let $fld_name = 'INT_RT_2'
do get-decimal-value
if $return_flag = 'Y'
 let $int_rt_2 =  edit (#return_value,'9.999999')
end-if

let $fld_name = 'FACTOR'
do get-decimal-value
if $return_flag = 'Y'
 let $factor =  edit (#return_value,'9.999999')
end-if

let $fld_name = 'DT_OF_DET'
do get-date-value
if $return_flag = 'Y'
 let $dt_of_det =  $return_value
end-if

print 'Employee Account Balance at Event Date'   (+2,{col1ba})
print $acct_bal_event                            (,{col2ba})
print 'Date of Determination'                    (+1,{col1ba})
print $dt_of_det                                 (,{col2ba})
print 'Annual Interest Rate used to project account balance from event date to Date of Determination'
      (+1,{col1ba})
print $int_rt_1                                  (,{col2ba})
print 'Employee Account Balance at Date of Determination' (+1,{col1ba})
print $acct_bal_dod                              (,{col2ba})
print 'Annual Interest Rate used to project account balance from Date of Determination to Normal Retirement Date'
      (+1,{col1ba})
print $int_rt_2                                  (,{col2ba})
print 'Employee Account Balance at Normal Retirement Date' (+1,{col1ba})
print $acct_bal_nrd                              (,{col2ba})
print 'Factor to convert Employee Account Balance to annuity' (+1,{col1ba})
print $factor                                    (,{col2ba})
print 'Employee Benefit'                                 (+1,{col1ba})
print $ee_ben_amt                                (,{col2ba})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure optional-forms
let #section_min = 12
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
   print 'Optional Forms'               (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $functn_result_descr = rtrim($functn_result_descr,' ')
print $functn_result_descr            (+2,{Col1aa})
print $squiggly-line                  (+1,{Col1aa})

let $sql-statement = 'PAT06B-Any Available Forms'
BEGIN-SELECT ON-ERROR=SQL-ERROR
COUNT(DISTINCT FORM_AVAILABLE)        &forms_exist
FROM PS_PA_CLC_OAY_VW
WHERE CALC_NAME        = $calc_name
  AND EMPLID           = $emplid
  AND BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND FUNCTN_RESULT_NM = $functn_result_nm
  AND FORM_AVAILABLE   = 'Y'
END-SELECT
if &forms_exist > 0
  let $qjsa_ind_found = 'N'
  do optional-forms-2
else
  print '* There are no available forms.' (+2,{ColTitle})
  print ' '                               (+1,{ColTitle})
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure optional-forms-2

  let $limits_found = 'N'
  let $sql-statement = 'PAT06B-Optional Forms select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
OFRM_AY.FORM_CODE
 let $limit-header-printed = 'N'

OFRM_AY.FORM_LONG_NAME
OFRM_AY.GUARANTEED_PAYMENT
OFRM_AY.PCT_CONTINUED

OFRM_AY.FORM_FACTOR
  let $fieldname    = 'FORM_CODE'
  let $fieldvalue   = rtrim(&OFRM_AY.FORM_CODE,' ')
      do read-translate-table
  let $form_long_name  = rtrim($xlatlongname,' ')

  let $guaranteed_payment = LPAD( edit (&ofrm_ay.guaranteed_payment, '999.99'),10,' ')
  let $pct_continued      = LPAD( edit (&ofrm_ay.pct_continued, '999.99'),10,' ')
  let $form_factor        = LPAD( edit (&ofrm_ay.form_factor, '999.999999'),10,' ')

  let $form_stmt = 'Form: ' || $form_long_name
  let $guar_stmt = 'Guaranteed Payment: ' || $guaranteed_payment
  let $prct_stmt = 'Percent Continued: '  || $pct_continued
  let $fact_stmt = 'Factor: '             || $form_factor

  if $limits_found = 'Y'
    print $form_stmt     (+2,{Col1aaaa2})
    let $limits_found = 'N'
  else
    print $form_stmt     (+1,{Col1aaaa2})
  end-if
  print $guar_stmt       (,{Col2aaaa2})
  print $prct_stmt       (,{Col3adddb})
  print $fact_stmt       (,{Col4dddb})

OFRM_AY.MDIB_VIOLATION
  let $fieldname    = 'MDIB_VIOLATION'
  let $fieldvalue   = rtrim(&OFRM_AY.MDIB_VIOLATION,' ')
      do read-translate-table
  let $mdib-text     = rtrim($xlatlongname,' ')
  if &ofrm_ay.mdib_violation = 'Y'
     print $mdib-text    (+1, {col3adddb})
  end-if
OFRM_AY.PA_PMT_TYP1
OFRM_AY.PA_PMT_AMT1
OFRM_AY.PA_PMT_AMT1_NOTAX
OFRM_AY.L415_PMT_AMT1
OFRM_AY.L415_PMT_AMT1_NOTX

  if &ofrm_ay.pa_pmt_amt1 > 0
   do limit-header
   let $fieldname    = 'PA_PMT_TYP1'
   let $fieldvalue   = rtrim(&ofrm_ay.pa_pmt_typ1,' ')
   do read-translate-table
   let $pa_pmt_typ1  = rtrim($xlatlongname,' ')

   print $pa_pmt_typ1              (+1,{Col1addd})
   print &ofrm_ay.pa_pmt_amt1        (,{Col3bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.pa_pmt_amt1_notax  (,{Col4bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt1      (,{Col5bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt1_notx (,{Col8bccb})   edit $$$,$$$,$$9.99
  end-if

OFRM_AY.PA_PMT_TYP2
OFRM_AY.PA_PMT_AMT2
OFRM_AY.PA_PMT_AMT2_NOTAX
OFRM_AY.L415_PMT_AMT2
OFRM_AY.L415_PMT_AMT2_NOTX

  if &ofrm_ay.pa_pmt_amt2 > 0
   do limit-header
   let $fieldname    = 'PA_PMT_TYP2'
   let $fieldvalue   = rtrim(&ofrm_ay.pa_pmt_typ2,' ')
   do read-translate-table
   let $pa_pmt_typ2  = rtrim($xlatlongname,' ')

   print $pa_pmt_typ2              (+1,{Col1addd})
   print &ofrm_ay.pa_pmt_amt2        (,{Col3bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.pa_pmt_amt2_notax  (,{Col4bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt2      (,{Col5bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt2_notx (,{Col8bccb})   edit $$$,$$$,$$9.99
  end-if

OFRM_AY.PA_PMT_TYP3
OFRM_AY.PA_PMT_AMT3
OFRM_AY.PA_PMT_AMT3_NOTAX
OFRM_AY.L415_PMT_AMT3
OFRM_AY.L415_PMT_AMT3_NOTX

  if &ofrm_ay.pa_pmt_amt3 > 0
   do limit-header
   let $fieldname    = 'PA_PMT_TYP3'
   let $fieldvalue   = rtrim(&ofrm_ay.pa_pmt_typ3,' ')
   do read-translate-table
   let $pa_pmt_typ3  = rtrim($xlatlongname,' ')

   print $pa_pmt_typ3              (+1,{Col1addd})
   print &ofrm_ay.pa_pmt_amt3        (,{Col3bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.pa_pmt_amt3_notax  (,{Col4bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt3      (,{Col5bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt3_notx (,{Col8bccb})   edit $$$,$$$,$$9.99
  end-if

OFRM_AY.PA_PMT_TYP4
OFRM_AY.PA_PMT_AMT4
OFRM_AY.PA_PMT_AMT4_NOTAX
OFRM_AY.L415_PMT_AMT4
OFRM_AY.L415_PMT_AMT4_NOTX

  if &ofrm_ay.pa_pmt_amt4 > 0
   do limit-header
   let $fieldname    = 'PA_PMT_TYP4'
   let $fieldvalue   = rtrim(&ofrm_ay.pa_pmt_typ4,' ')
   do read-translate-table
   let $pa_pmt_typ4  = rtrim($xlatlongname,' ')

   print $pa_pmt_typ4              (+1,{Col1addd})
   print &ofrm_ay.pa_pmt_amt4        (,{Col3bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.pa_pmt_amt4_notax  (,{Col4bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt4      (,{Col5bbbbbb}) edit $$$,$$$,$$9.99
   print &ofrm_ay.l415_pmt_amt4_notx (,{Col8bccb})   edit $$$,$$$,$$9.99
  end-if

OFRM_AY.QJSA_IND
  if rtrim(&ofrm_ay.qjsa_ind,' ') = 'Y'
   let $qjsa_ind_found = 'Y'
   print '*'    (,125)
  end-if

FROM PS_PA_CLC_OAY_VW   OFRM_AY
WHERE OFRM_AY.CALC_NAME        = $calc_name
  AND OFRM_AY.EMPLID           = $emplid
  AND OFRM_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND OFRM_AY.FUNCTN_RESULT_NM = $functn_result_nm
  AND OFRM_AY.FORM_AVAILABLE   = 'Y'
ORDER BY OFRM_AY.FORM_CODE,
         OFRM_AY.PCT_CONTINUED,
         OFRM_AY.GUARANTEED_PAYMENT
END-SELECT
if $qjsa_ind_found = 'Y'
  print '* Denotes the qualified joint and survivor optional form.' (+2,{ColTitle})
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure limit-header

if $limit-header-printed = 'N'
  let $limits_found = 'Y'
   print 'Type'                               (+2,{Col1addd})
   print 'Total (Unlimited)'                    (,{Col3bbbbbb})
   print 'NonTax (Unlimited)'                   (,{Col4bbbbbb})
   print 'Total (Limited)'                      (,{Col5bbbbbb})
   print 'NonTax (Limited)'                     (,{Col8bccb})
   PRINT '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'     (+1,{Col1addd})
   print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'  (,43)
   let $limit-header-printed = 'Y'
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure limit-415
let #section_min = 11
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines}) + 6
let #loop=0

BEGIN-SELECT
LIMIT_AY.L415_DEFINITION
  if #loop = 0
   print 'Limit 415'                     (#sec-line1,{ColTitle}) center
   print $squiggly-line                  (+1,51)
   let #loop=1
  end-if
  let $print_string =  '415 Limit Definition: '  ||  &LIMIT_AY.L415_DEFINITION
  print $print_string                     (+1, {col1aaaa})
LIMIT_AY.FAE_LIMIT
LIMIT_AY.FAE_ADJ
  print 'FAE Limit/Adjusted: '            (+2, {col1aaaa})
  LET  $PRNT_FAE_LIMIT =  RTRIM(edit (&LIMIT_AY.FAE_LIMIT,'$$$,$$$,$$9.99'),' ')
  LET  $PRNT_FAE_ADJ   =  RTRIM(edit (&LIMIT_AY.FAE_ADJ,'$$$,$$$,$$9.99'),' ')
  LET  $PRNT_FAE_ADJ   =  LTRIM($PRNT_FAE_ADJ,' ')
  let $prnt_stmt = $PRNT_FAE_LIMIT  || '  ' || $PRNT_FAE_ADJ
  print $prnt_stmt                (, {col2aaaa})
LIMIT_AY.MAX_LIMIT
LIMIT_AY.MAX_ADJ
  print 'Maximum 415(b) Limit/Adjusted: ' (+1, {col1aaaa})
  LET  $PRNT_MAX_LIMIT =  RTRIM(edit (&LIMIT_AY.MAX_LIMIT,'$$$,$$$,$$9.99'),' ')
  LET  $PRNT_MAX_ADJ   =  RTRIM(edit (&LIMIT_AY.MAX_ADJ,'$$$,$$$,$$9.99'),' ')
  LET  $PRNT_MAX_ADJ   =  LTRIM($PRNT_MAX_ADJ,' ')
  let $prnt_stmt = $PRNT_MAX_LIMIT || '  ' || $PRNT_MAX_ADJ
  print $prnt_stmt                (, {col2aaaa})
LIMIT_AY.DC_FRACTION
  print 'Historical DC Fraction: '                   (, {col3adddb})
  print &LIMIT_AY.DC_FRACTION              (, {col3dddb2})    edit 999.999999
LIMIT_AY.DB_415E_LIMIT
  print 'Historical 415(e) Limit: '                  (+1, {col1aaaa})
  print &LIMIT_AY.DB_415E_LIMIT             (, {col2aaaa})  edit 999,999,999.99
LIMIT_AY.DB_FRACTION
  print 'Historical DB Fraction: '                  (, {col3adddb})
  print &LIMIT_AY.DB_FRACTION                (, {col3dddb2})     edit 999.999999
LIMIT_AY.SLA_AMOUNT
LIMIT_AY.USED_415_LIMIT
LIMIT_AY.REDUCTION_AMT
  print 'Total SLA Benefit: '            (+1, {col1aaaa})
  print &LIMIT_AY.SLA_AMOUNT              (, {col2aaaa})  edit 999,999,999.99
  print 'Limit Used: '                    (+1, {col1aaaa})
  print &LIMIT_AY.USED_415_LIMIT          (, {col2aaaa})   edit 999,999,999.99
  print 'Reduction: '                    (+1, {col1aaaa})
  print &LIMIT_AY.REDUCTION_AMT            (, {col2aaaa})  edit 999,999,999.99
  do 415-limit-level2
FROM PS_PA_CLC_415_AY LIMIT_AY
WHERE LIMIT_AY.CALC_NAME        = $calc_name
  AND LIMIT_AY.EMPLID           = $emplid
END-SELECT
end-procedure

begin-procedure 415-limit-level2
let #first_time = 0
BEGIN-SELECT
LIMIT_AY2.PRECEDENCE_ORDER
  if #first_time = 0
     print 'Order'                    (+3, {col1a8})
     print 'Benefit Plan'                     (, {col2a8})
     print 'Function result'                 (, {col3a8})
     print 'Pmt amt1'                      (, {col4a8})
     print 'L415 Pmt amt1'                    (, {col5a8})
     print 'For 415 Only'                     (, {col6a8})
     print 'User Reduction'                   (, {col7a8})
     print 'Proration Pct'                    (, {col8a8})
     print $squiggly-line                     (+1, {col1a8})
     print $squiggly-line                     (, {col2a8})
     print $squiggly-line                     (, {col3a8})
     print $squiggly-line                     (, {col4a8})
     print $squiggly-line                     (, {col5a8})
     print $squiggly-line                     (, {col6a8})
     print $squiggly-line                     (, {col7a8})
     print $squiggly-line                     (, {col8a8})
     let #first_time = 1
  end-if
  print &LIMIT_AY2.PRECEDENCE_ORDER           (+1, {col1a8})
LIMIT_AY2.BENEFIT_PLAN                     (, {col2a8})
LIMIT_AY2.FUNCTN_RESULT_NM                 (, {col3a8})
LIMIT_AY2.PA_PMT_AMT1                      (, {col4a8})    edit 999,999,999.99
LIMIT_AY2.L415_PMT_AMT1                    (, {col5a8})   edit 999,999,999.99
LIMIT_AY2.FOR_415_ONLY                     (, {col6a8})
LIMIT_AY2.USER_REDUCTION                   (, {col7a8})        edit 999,999,999.99
LIMIT_AY2.PRORATION_PCT                    (, {col8a8})      edit 999.999999
FROM PS_PA_CLC_4AY2_VW LIMIT_AY2
WHERE LIMIT_AY2.CALC_NAME        = $calc_name
  AND LIMIT_AY2.EMPLID           = $emplid
END-SELECT
end-procedure

begin-procedure plan-eligibility
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Plan Eligibility'             (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'ELIG_STATUS_PA'
do get-character-value
if $return_flag = 'Y'
 let $fieldvalue = rtrim($return_value,' ')
 let $fieldname = 'ELIG_STATUS_PA'
 do read-translate-table
 let $eligibility = rtrim($xlatlongname,' ')
 let $elig_statement = $eligibility || ' as of Event Date (' ||
                       $event_dt || ')'
 let $functn_result_descr = rtrim($functn_result_descr,' ')
 print $functn_result_descr           (+1,{ColTitle})
 print $elig_statement                  (,)   center
 do retrieve-plan-elig-history
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure retrieve-plan-elig-history
let $sql-statement = 'PAT06B-Plan Eligibility Hist'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PEL_AY.START_DT
  move '1' to $Year4
  do Format-DateTime(&pel_ay.start_dt, $pel_ay.start_dt, {DEFDATE}, '', '',)
PEL_AY.STOP_DT
  move '1' to $Year4
  do Format-DateTime(&pel_ay.stop_dt, $pel_ay.stop_dt, {DEFDATE}, '', '',)
PEL_AY.ELIG_STATUS_PA
  let $fieldvalue = rtrim(&pel_ay.elig_status_pa,' ')
  let $fieldname = 'ELIG_STATUS_PA'
  do read-translate-table
  let $eligibility = rtrim($xlatlongname,' ')
  print 'Begin Dt'                      (+1,{Col1ddd})
  print 'End Dt'                          (,{Col2ddd})
  print 'Status'                          (,{Col3ddd})
  print '~~~~~~~~~~'                    (+1,{Col1ddd})
  print '~~~~~~~~~~'                      (,{Col2ddd})
  print '~~~~~~~~~~~'                     (,{Col3ddd})
  print $pel_ay.start_dt                (+1,{Col1ddd})
  print $pel_ay.stop_dt                   (,{Col2ddd})
  print $eligibility                      (,{Col3ddd})
FROM PS_PA_CLC_PEL_AY  PEL_AY
WHERE PEL_AY.CALC_NAME        = $calc_name
  AND PEL_AY.EMPLID           = $emplid
  AND PEL_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND PEL_AY.FUNCTN_RESULT_NM = $functn_result_nm
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure plan-participation
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines})+ 6
if #loop = 0
  print 'Plan Participation'           (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'PARTICIPATION_TYPE'
do get-character-value
if $return_flag = 'Y'
 let $fieldvalue = rtrim($return_value,' ')
 let $fieldname = 'PARTICIPATION_TYPE'
 do read-translate-table
 let $participation = rtrim($xlatlongname,' ')
 do retrieve-participation-date
 let $part_statement =  $participation || ' as of Participation Date ('
                     || $part_date || ')'
 let $functn_result_descr = rtrim($functn_result_descr,' ')
 print $functn_result_descr       (+1,{ColTitle})
 print $part_statement              (,)  center
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure service
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
   print 'Service'                      (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $functn_result_nm_svc = $functn_result_nm
let $functn_result_descr = rtrim($functn_result_descr,' ')
print $functn_result_descr          (+3,{ColTitle}) center
do get-service
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure retrieve-participation-date
let $fld_name = 'PARTICIPATION_DATE'
do get-date-value
if $return_flag = 'Y'
 let $part_date =$return_value
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure vesting
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Vesting'          (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'VESTING_PERCENT'
do get-decimal-value
if $return_flag = 'Y'
 let #vesting_pct = #return_value * 100.00
 let $vesting_pct = to_char(#vesting_pct) || '%'
 let $vest_statement = $vesting_pct || ' vested as of Event Date ('
                                    || $event_dt || ')'
 print $vest_statement              (+1,{ColTitle}) center
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure benefit-eligibility
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines})+ 6
if #loop = 0
  print 'Benefit Eligibility'  (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $sql-statement = 'PAT06B-Benefit Eligibility'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_BEL_AY.FUNCTN_RESULT_NM
CLC_BEL_AY.DESCR
CLC_BEL_AY.BEN_ELIG_STATUS
   IF rtrim(&clc_bel_ay.ben_elig_status,' ') = 'Y'
   print 'Eligible'                     (+1,{Col1aaaa})
   let $print_stmt = rtrim(&clc_bel_ay.FUNCTN_RESULT_NM,' ')
   print $print_stmt                      (,{Col2aaaa})
   let $print_stmt = rtrim(&clc_bel_ay.descr,' ')
   print $print_stmt               (,{Col3aaaa})
   ELSE
   print 'Ineligible'                 (+1,{Col1aaaa})
   let $print_stmt = rtrim(&clc_bel_ay.FUNCTN_RESULT_NM,' ')
   print $print_stmt                      (,{Col2aaaa})
   let $print_stmt = rtrim(&clc_bel_ay.descr,' ')
   print $print_stmt               (,{Col3aaaa})
   END-IF
FROM PS_PA_CLC_BEL_VW CLC_BEL_AY
WHERE CLC_BEL_AY.CALC_NAME        = $calc_name
  AND CLC_BEL_AY.EMPLID           = $emplid
  AND CLC_BEL_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND CLC_BEL_AY.FUNCTN_RESULT_NM = $functn_result_nm
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure average-earnings
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print ' Final Average Earnings' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'FAE_AMOUNT'
do get-decimal-value
if $return_flag = 'Y'
 let $fae_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
 let $functn_result_descr = rtrim($functn_result_descr,' ')
 print $functn_result_descr   (+2,{ColTitle})
 print $fae_amt                 (,)  center
 do retrieve-average-earnings-array
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure print_fae_header
print 'Start Date'                            (+2,{col1a8})
print 'Stop Date'                               (,{col2a8})
print 'Last'                                    (,{col3a8})
print 'Projected Y/N'                           (,{col4a8})
print 'Actual'                                  (,{col5a8})
Print 'Generated'                               (,{col6a8})
print 'Adjusted'                                (,{col7a8})
print 'Portion of'                              (,{col8a8})

print 'Process Date'                          (+1,{col3a8})
print 'Earnings'                                (,{col5a8})
Print 'Earnings'                                (,{col6a8})
print 'Earnings'                                (,{col7a8})
print 'Earnings Used'                           (,{col8a8})

print '~~~~~~~~~~'                            (+1,{col1a8})
print '~~~~~~~~~~'                              (,{col2a8})
print '~~~~~~~~~~~~'                            (,{col3a8})
print '~~~~~~~~~~~~~'                           (,{col4a8})
print '~~~~~~~~~'                               (,{col5a8})
Print '~~~~~~~~~'                               (,{col6a8})
print '~~~~~~~~~'                               (,{col7a8})
print '~~~~~~~~~~~~'                            (,{col8a8})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure retrieve-average-earnings-array
move '0' to $header_printed

let $sql-statement = 'PAT06B-FAE Info select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_FAE_AY.START_DT
  if $header_printed = '0'
     do print_fae_header
     move '1' to $header_printed
  end-if
  move '1' to $Year4
  do Format-DateTime(&clc_fae_ay.start_dt, $clc_fae_ay.start_dt, {DEFDATE}, '', '',)
  print $clc_fae_ay.start_dt       (+1,{col1a8})
CLC_FAE_AY.END_DT
  move '1' to $Year4
  do Format-DateTime(&clc_fae_ay.end_dt, $clc_fae_ay.end_dt, {DEFDATE}, '', '',)
  print $clc_fae_ay.end_dt           (,{col2a8})
CLC_FAE_AY.LAST_PROC_DT
  move '1' to $Year4
  do Format-DateTime(&clc_fae_ay.last_proc_dt, $clc_fae_ay.last_proc_dt, {DEFDATE}, '', '',)
  print $clc_fae_ay.last_proc_dt     (,{col3a8})
CLC_FAE_AY.PROJECTED_FLAG            (,{col4a8})
CLC_FAE_AY.ERN_PRD_AMT               (,{col5a8}) edit 999999.99
CLC_FAE_AY.ERN_GEN_AMT               (,{col6a8}) edit 999999.99
CLC_FAE_AY.ERN_ADJ_AMT               (,{col7a8}) edit 999999.99
CLC_FAE_AY.DENOMINTR                 (,{col8a8})
FROM PS_PA_CLC_FAE_AY      CLC_FAE_AY
WHERE CLC_FAE_AY.CALC_NAME        = $calc_name
  AND CLC_FAE_AY.EMPLID           = $emplid
  AND CLC_FAE_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND CLC_FAE_AY.FUNCTN_RESULT_NM = $functn_result_nm
  ORDER BY CLC_FAE_AY.START_DT
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure account-balances
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Account Balances' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'ACCUM_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $accum_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
 let $accum_stmnt = $accum_amt || ' Accumulated as of Benefit Commencement Date'
 print $accum_stmnt (+1,{ColTitle}) center
 do retrieve-account-balances-array
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure retrieve-account-balances-array
print 'Start Date'                       (+2,{col1a11})
print 'End Date'                           (,{col2a11})
print 'Beginning'                          (,{col3a11})
print 'Earnings'                           (,{col4a11})
print 'Credit for'                         (,{col5a11})
print 'Contribu-'                          (,{col6a11})
print 'Interest'                           (,{col7a11})
print 'Interest'                           (,{col8a11})
print 'Adjustments'                        (,{col9a11})
print 'Interest'                           (,{col10a11})
print 'Ending'                             (,{col11a11})

print 'Balance'                          (+1,{col3a11})
print 'Period'                             (,{col5a11})
print 'tion Rate'                          (,{col6a11})
print 'for Period'                         (,{col7a11})
print 'Rate'                               (,{col8a11})
print 'for Period'                         (,{col9a11})
print 'for Period'                         (,{col10a11})
print 'Balance'                            (,{col11a11})

let $sql-statement = 'PAT06B-Account Balances Array'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_ACCT_ACM_AY.START_DT                 (+1,{col1a11})
CLC_ACCT_ACM_AY.END_DT                     (,{col2a11})
CLC_ACCT_ACM_AY.BEG_BALANCE                (,{col3a11})
CLC_ACCT_ACM_AY.EARNINGS                   (,{col4a11})
CLC_ACCT_ACM_AY.CREDIT_PRD                 (,{col5a11})
CLC_ACCT_ACM_AY.CONTRIBUTION_RATE          (,{col6a11})
CLC_ACCT_ACM_AY.BALANCE_INTEREST           (,{col7a11})
CLC_ACCT_ACM_AY.BALANCE_INT_RATE           (,{col8a11})
CLC_ACCT_ACM_AY.CREDIT_ADJ_PRD             (,{col9a11})
CLC_ACCT_ACM_AY.CREDIT_INT_ADJ             (,{col10a11})
CLC_ACCT_ACM_AY.END_BALANCE                (,{col11a11})
FROM PS_PA_CLC_ACCT_AY          CLC_ACCT_ACM_AY
WHERE CLC_ACCT_ACM_AY.CALC_NAME        = $calc_name
  AND CLC_ACCT_ACM_AY.EMPLID           = $emplid
  AND CLC_ACCT_ACM_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND CLC_ACCT_ACM_AY.FUNCTN_RESULT_NM = $functn_result_nm
ORDER BY CLC_ACCT_ACM_AY.START_DT
END-SELECT
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure employee-accounts
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if $eacct-type = '1'
   print 'Employee Account' (#sec-line1,{ColTitle}) center
end-if
if $eacct-type = '2'
   print 'Withdrawal Account' (#sec-line1,{ColTitle}) center
end-if
if $eacct-type = '3'
   print 'Purchase Account' (#sec-line1,{ColTitle}) center
end-if
print $squiggly-line                  (+1,51)
let $fld_name = 'ACCUM_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $accum_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
 if #return_value < 0
    let $accum_stmnt = $accum_amt || ' Owed as of Benefit Commencement Date'
 else
    let $accum_stmnt = $accum_amt || ' Accumulated as of Benefit Commencement Date'
 end-if
 print $accum_stmnt (+1,{ColTitle}) center
 do retrieve-employee-account-array
 if $eacct-type != '1'
    do retrieve-empl-acct-svc-activity
 end-if
end-if
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure retrieve-employee-account-array
print 'Start Date'                       (+2,{col1a11})
print 'End Date'                           (,{col2a11})
print 'Balance'                           (,{col3a11})
print 'Pre-tax'                            (,{col4a11})
print 'Pre-tax'                            (,{col5a11})
print 'Accum Pre-tax'                      (,{col6a11})
print 'Accum Pre-tax'                      (,{col7a11})
print 'Post-tax'                           (,{col8a11})
print 'Post-tax'                           (,{col9a11})
print 'Accum Post-tax'                     (,{col10a11})
print 'Accum Post-tax'                     (,{col11a11})

print 'Interest'                          (+1,{col3a11})
print 'Deduction'                           (,{col4a11})
print 'Interest'                            (,{col5a11})
print 'Interest'                            (,{col7a11})
print 'Deduction'                           (,{col8a11})
print 'Interest'                            (,{col9a11})
print 'Interest'                            (,{col11a11})

let $sql-statement = 'PAT06B-Empl Accounts Array'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_EACCT_ACM_AY.START_DT              (+1,{col1a11})
CLC_EACCT_ACM_AY.END_DT                  (,{col2a11})
CLC_EACCT_ACM_AY.BALANCE_INT_RATE        (,{col3a11})
CLC_EACCT_ACM_AY.PRE_TAX_DED_AMT         (,{col4a11})
CLC_EACCT_ACM_AY.PRE_TAX_DED_INT         (,{col5a11})
CLC_EACCT_ACM_AY.ACCUM_PRE_TAX           (,{col6a11})
CLC_EACCT_ACM_AY.ACCUM_PRE_TAX_INT       (,{col7a11})
CLC_EACCT_ACM_AY.POST_TAX_DED_AMT        (,{col8a11})
CLC_EACCT_ACM_AY.POST_TAX_DED_INT        (,{col9a11})
CLC_EACCT_ACM_AY.ACCUM_POST_TAX          (,{col10a11})
CLC_EACCT_ACM_AY.ACCUM_POST_TAX_INT      (,{col11a11})
FROM PS_PA_CLC_EACCT_AY          CLC_EACCT_ACM_AY
WHERE CLC_EACCT_ACM_AY.CALC_NAME        = $calc_name
  AND CLC_EACCT_ACM_AY.EMPLID           = $emplid
  AND CLC_EACCT_ACM_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND CLC_EACCT_ACM_AY.FUNCTN_RESULT_NM = $functn_result_nm
ORDER BY CLC_EACCT_ACM_AY.START_DT
END-SELECT
end-procedure


!***********************************************************************
!***********************************************************************
!***********************************************************************
begin-procedure retrieve-empl-acct-svc-activity

print 'Service Adjustment Activity' (+3,{ColTitle}) center
print $squiggly-line                  (+1,51)

print 'Service Function'                    (+2,{col1a18})
print 'Start Date'                         (,{col20a11})
print 'End Date'                           (,{col32a11})
print 'Purchasable'                        (,{col44a11})
print 'Purchased'                          (,{col56a11})
print 'Purchasable'                        (,{col68a11})

print 'Result'                                 (+1,{col1a18})
print 'Service'                             (,{col44a11})
print 'Service'                             (,{col56a11})
print 'Service Adj'                         (,{col68a11})

let $sql-statement = 'PAT06B-Empl Accounts Svc Adj Array'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_EACCT_SVC_AY.SERVICE_FR_NAME       (+1,{col1a18})
CLC_EACCT_SVC_AY.START_DT                (,{col20a11})
CLC_EACCT_SVC_AY.END_DT                  (,{col32a11})
CLC_EACCT_SVC_AY.PA_SVC_PRCHABLE         (,{col44a11})
CLC_EACCT_SVC_AY.PA_SVC_PURCHASED        (,{col56a11})
CLC_EACCT_SVC_AY.PA_SVC_PRCH_ADJ         (,{col68a11})
FROM PS_PA_CLC_EA_SP          CLC_EACCT_SVC_AY
WHERE CLC_EACCT_SVC_AY.CALC_NAME        = $calc_name
  AND CLC_EACCT_SVC_AY.EMPLID           = $emplid
  AND CLC_EACCT_SVC_AY.BENEFIT_PLAN     = &pa_plan.benefit_plan
  AND CLC_EACCT_SVC_AY.FUNCTN_RESULT_NM = $functn_result_nm
  AND CLC_EACCT_SVC_AY.PA_SVC_PRCHABLE  > 0
ORDER BY CLC_EACCT_SVC_AY.SERVICE_FR_NAME, CLC_EACCT_SVC_AY.START_DT
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
!***********************************************************************
begin-procedure covered-compensation
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Covered Compensation' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if
let $fld_name = 'COMP_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $comp_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
 print $comp_amt  (+1,{ColTitle}) center
end-if

let $fld_name = 'TABLE_USED'
do get-character-value
if $return_flag = 'Y'
    let $table_used = $return_value
    print 'Table Used'                   (+1,{Col1aa})
    print  $table_used                   (+1,{Col1aa})
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure social-security
let #section_min = 9
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if

let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Social Security' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if


let $functn_result_descr = rtrim($functn_result_descr,' ')
print $functn_result_descr           (+2,{Col1AA})
let $fld_name = 'SOC_SEC_AGE'
do get-decimal-value
if $return_flag = 'Y'
 let $ssraw = LTRIM(edit (#return_value,'9999'),' ')
 let $ssyrs = SUBSTR ($ssraw,1,2)
 let $ssmos = SUBSTR ($ssraw,3,2)
 if $ssyrs = '0'
    let $ssra = ' '
 else
    if $ssmos = '00'
        let $ssra = $ssyrs || ' yrs'
    else
        let $ssra = $ssyrs || ' yrs ' || $ssmos || ' mos'
    end-if
 end-if
end-if
let $fld_name = 'PIA_AMT'
do get-decimal-value
if $return_flag = 'Y'
 let $pia_amt = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if
let $fld_name = 'SOC_SEC_BCD'
do get-date-value
if $return_flag = 'Y'
 let $ssbcd = $return_value
end-if
let $fld_name = 'PIA_AMT_ADJ'
do get-decimal-value
if $return_flag = 'Y'
 let $pia_amt_adj = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
end-if

print 'Social Security Retirement Age'   (+2,{Col1ba})
print $ssra                                (,{col2ba})
print 'Estimated Social Security Amount at Social Security Retirement Age' (+1,{Col1ba})
print $pia_amt                             (,{col2ba})
print 'Social Security Benefit Commencement Date'  (+1,{Col1ba})
print $ssbcd                               (,{col2ba})
print 'Estimated Social Security Amount at Social Security Benefit Commencement Date'(+1,{Col1ba})
print $pia_amt_adj                         (,{col2ba})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure age-adj-factors
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Age Adjustment Factors' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if

let $fld_name = 'ADJ_FACTOR'
do get-decimal-value
if $return_flag = 'Y'
 let $age_adj_pct = LTRIM(edit (#return_value,'999.999999'),' ')
 let $age_statement =  'Adjustment Factor = ' || $age_adj_pct
 let $functn_result_descr = rtrim($functn_result_descr,' ')
 print $functn_result_descr         (+1,{ColTitle})
 print $age_statement                 (,)  center
end-if
!*
!* Commented out temporarily pending decision on accuracy of data source
!let $fld_name = 'PRD_OF_ADJ'
!do get-decimal-value
!if $return_flag = 'Y'
! let #prd_of_adj = #return_value
! let $prd_of_adj_stmnt = to_char(#prd_of_adj)
! print 'Period of Adjustment'    (+1,{Col1aa})
! print $prd_of_adj_stmnt           (,{Col2aa})
!end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure death-adj-factors
let #section_min = 8
let #lines_remaining = 75 - #current-line
if #section_min > #lines_remaining
 do page-break
end-if
let #sec-line1 = (#current-line - {header-lines}) + 6
if #loop = 0
  print 'Death Adjustment Factors' (#sec-line1,{ColTitle}) center
print $squiggly-line                  (+1,51)
end-if

let $fld_name = 'ADJ_FACTOR'
do get-decimal-value
if $return_flag = 'Y'
  let #death_adj =  LTRIM(edit (#return_value,'999.999999'),' ')
  let $death_adj_stmnt = to_char(#death_adj) || ' Death Adjustment Factor'
  let $functn_result_descr = rtrim($functn_result_descr,' ')
  print $functn_result_descr         (+2,{ColTitle})
  print $death_adj_stmnt              (,{ColTitle}) center
end-if
let $fld_name = 'NUM_PRD'
do get-decimal-value
if $return_flag = 'Y'
 let #num_prd =  LTRIM(edit (#return_value,'999.999999'),' ')
 let $num_prd_stmnt = to_char(#num_prd) || ' Months'
 print 'Period of Adjustment'   (+1,{Col1aa})
 print $num_prd_stmnt           (,{Col2aa})
end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Page-Break
do load-header-info
new-page
end-procedure

begin-procedure Load-Header-Info
  let $calc_name_hdg = $calc_name
  if $plan_name_flag = 'N'
    let $benefit_plan_hdg      = $asofdat
    let $bcd_label_hdg         = ' '
    let $ls_label_hdg          = ' '
    let $ben_cmdt_date_hdg     = ' '
    let $lump_sum_dt_hdg       = ' '
  else
    let $benefit_plan_hdg = rtrim(&pa_plan.benefit_plan,' ')
    do Get_Plan_Dates
    let $ben_label_hdg         = 'BCD Dt'
    let $ls_label_hdg          = 'LS  Dt'
    let $ben_cmdt_date_hdg     = $ben_cmdt_date
    let $lump_sum_dt_hdg       = $lump_sum_dt
  end-if
  let $name_hdg              = rtrim(&clc_emp_vw.name,' ')
  let $event_dt_hdg          = $event_dt
  let $category_hdg          = $action
  let $nid_hdg               = edit(&pers_nid.national_id,'xxx-xx-xxxx')
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Get_Plan_Dates
let $sql-statement = 'PAT06B-Plan dates select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_DATES.BEN_CMDT_DATE
  move '1' to $Year4
  do Format-DateTime(&CLC_DATES.ben_cmdt_date, $ben_cmdt_date, {DEFDATE}, '', '',)
CLC_DATES.LUMP_SUM_DT
  move '1' to $Year4
  do Format-DateTime(&CLC_DATES.lump_sum_dt, $lump_sum_dt, {DEFDATE}, '', '',)
FROM PS_PA_CLC_DATES  CLC_DATES
WHERE CALC_NAME    = $calc_name
AND   EMPLID       = $emplid
AND   BENEFIT_PLAN = &pa_plan.benefit_plan
END-SELECT
end-procedure


!***************************************!
begin-procedure Get-Phone-Data
!***************************************!

  if rtrim($Emplid,' ') = ''
    move '' to $Phone
    goto GetPhoneExit
  end-if

begin-SELECT
PP.PHONE
FROM  PS_PERSONAL_PHONE PP
WHERE PP.EMPLID = $Emplid
  AND PP.PHONE_TYPE = 'HOME'
end-SELECT

     let $Phone      = rtrim(&PP.Phone,' ')


GetPhoneExit:

end-procedure


#include 'stdapi.sqc'    !Update Process Request API
#include 'parnctl1.sqc'  !Get run control parameter values
#include 'pagetval.sqc'  !Get values mask routines
#include 'readxlat.sqc'  !read translate table
#include 'paresult.sqc'  !read results table
#include 'paservce.sqc'  !read service array
#include 'pafunctn.sqc'  !read function table
#Include 'reset1.sqc'    !Reset printer procedure
#include 'readmsgc.sqc'  !Read the Message Catalog Table
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'getaddr.sqc'   !Get address info
