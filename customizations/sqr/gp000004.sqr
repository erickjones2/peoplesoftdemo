!**********************************************************************!
!  gp000004: Print Payee Messages for a Particular Cal_RUN_ID          !
!**********************************************************************!
!                                                                      !
!                                                                      !
!                                                                      !
!                                                                      !
! This software and related documentation are provided under a         !
! license agreement containing restrictions on use and                 !
! disclosure and are protected by intellectual property                !
! laws. Except as expressly permitted in your license agreement        !
! or allowed by law, you may not use, copy, reproduce,                 !
! translate, broadcast, modify, license, transmit, distribute,         !
! exhibit, perform, publish or display any part, in any form or        !
! by any means. Reverse engineering, disassembly, or                   !
! decompilation of this software, unless required by law for           !
! interoperability, is prohibited.                                     !
! The information contained herein is subject to change without        !
! notice and is not warranted to be error-free. If you find any        !
! errors, please report them to us in writing.                         !
!                                                                      !
!                                                                      !
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              !
! All Rights Reserved.                                                 !
!**********************************************************************!
!                                                                      !
!          $Date:  2013/01/18:04:08:18                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      !
!**********************************************************************!


#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !page layout and printer definition
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting
#include 'prcsapi.sqc'  !Replaces stdapi.sqc


Begin-Setup
  declare-variable
      integer #Pinnum1
      text $CURNOTBASE
  end-declare
End-Setup


Begin-Report
  Do Init-Number
  Do Init-Datetime
  Do Init-Report
  Do Get-Rc-Parms
  Do Process-Main
  Do Reset
  Do Stdapi-Term

End-Report



Begin-Procedure Init-Report
    Move 'GP000004' to $ReportID
    #define Col_EmplId              2
    #define Col_Empl_Rcd            12
    #define Col_Lname               18
    #define Col_Calc_Stat           69
    #define Col_Seg_Num             101
    #define Col_Msg_Set             109
    #define Col_Msg_Nbr             117
    #define Col_Msg_Desc            126
    #define Col_Msg_Sev             163

    Do Init-DateTime
    Do Get-Current-DateTime
    Do Stdapi-Init

    Let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    Do Get-Language-Codes
End-Procedure


!***************************
Begin-Heading 10
!***************************
   #Include 'gphdg04.sqc'
End-Heading



!***********************************************************************!
!  Procedure Process-Main - (Main Procedure)                            !
!***********************************************************************!

Begin-Procedure Process-Main

move 'N' to $Msgfound

Do Get-PYE-Clause

Begin-Select

A.EMPLID            &A.EMPLID                           (+1 ,{Col_EmplId})
A.EMPL_RCD          &A.EMPL_RCD                         (,{Col_Empl_rcd})
A.CAL_RUN_ID        &A.CAL_RUN_ID
A.CAL_ID            &A.CAL_ID
A.GP_PAYGROUP       &A.GP_PAYGROUP
A.PYE_CALC_STAT     &A.PYE_CALC_STAT
A.RSLT_SEG_NUM      &A.RSLT_SEG_NUM                     (,{Col_Seg_Num})
A.MESSAGE_SET_NBR   &A.MESSAGE_SET_NBR                  (,{Col_Msg_Set})    Edit 99999
A.MESSAGE_NBR       &A.MESSAGE_NBR                      (,{Col_Msg_Nbr})    Edit 99999
A.MSGDATA1          &A.MSGDATA1
A.MSGDATA2          &A.MSGDATA2
A.MSGDATA3          &A.MSGDATA3
A.MSGDATA4          &A.MSGDATA4
A.MSGDATA5          &A.MSGDATA5
A.PIN_IND1          &A.PIN_IND1
A.PIN_IND2          &A.PIN_IND2
A.PIN_IND3          &A.PIN_IND3
A.PIN_IND4          &A.PIN_IND4
A.PIN_IND5          &A.PIN_IND5
A.GP_MSG_SEVERITY   &A.GP_MSG_SEVERITY
  If Ltrim(Rtrim(&A.EMPLID,' '),' ') <> ' '
     Do Get-Pye-Nm
  End-If


  Let $MSGSETNBR = &A.MESSAGE_SET_NBR
  Let $MSGNBR    = &A.MESSAGE_NBR
  Let #MSGSETNBR1 = &A.MESSAGE_SET_NBR
  Let #MSGNBR1    = &A.MESSAGE_NBR

  Let $MSGDT1    = &A.MSGDATA1
  Let $MSGDT2    = &A.MSGDATA2
  Let $MSGDT3    = &A.MSGDATA3
  Let $MSGDT4    = &A.MSGDATA4
  Let $MSGDT5    = &A.MSGDATA5
  Let $PININD1   = &A.PIN_IND1
  Let $PININD2   = &A.PIN_IND2
  Let $PININD3   = &A.PIN_IND3
  Let $PININD4   = &A.PIN_IND4
  Let $PININD5   = &A.PIN_IND5

  Let $Paygroup      = &A.GP_PAYGROUP
  Let $Cal_Run_Id    = &A.CAL_RUN_ID
  Let $Cal_Id        = &A.CAL_ID
  Let $Emplid        = &A.EMPLID
  Let #Empl_Rcd      = &A.EMPL_RCD
  Let $PName         = &NM.NAME


  Move &A.PYE_CALC_STAT to $PYST
  If Isnull($PYST) = 1
    Let $PYST = '11'
  End-If
  Move 'PYE_CALC_STAT'   to $FieldName
  Move $PYST  to $FieldValue
  Do Read-Translate-Table
  Print $Xlatlongname                                    ( ,{Col_Calc_Stat})
  Move 'GP_MSG_SEVERITY'   to $FieldName
  Move &A.GP_MSG_SEVERITY  to $FieldValue
  Do Read-Translate-Table
  Print $Xlatshortname                                    ( ,{Col_Msg_Sev})
  Do Get-Msg-Txt
  Do Get-Header-Descriptions
  Let $Last_Paygroup           = $Paygroup
  Let $Last_Cal_Run_Id         = $Cal_Run_Id
  Let $Last_Cal_Id             = $Cal_Id
  Let $Last_Emplid             = $Emplid
  Let $Last_Empl_Rcd           = $Empl_Rcd

  Let $Last_Period_Begin_Date  = $Period_Begin_Date
  Let $Last_Period_End_Date    = $Period_End_Date
  Let $Last_Orig_Cal_Run_Id    = $Orig_Cal_Run_Id


  Let #no_rows = 1

  move 'Y' to $Msgfound

From [$From_Clause]
Where [$Select_Clause]
      ORDER BY A.EMPLID,A.CAL_ID,A.GP_PAYGROUP
End-Select

if $Msgfound = 'N'
    display ' '
    display '****** No Data Found For the Selection criteria ******'
    display ' '
    print '*******************************************'  (+3,1)
    print '  No Data Found For the Selection criteria '  (+1,1)
    print '*******************************************'  (+1,1)
  end-if

End-Procedure

!******************************************************************!
! Procedure :  Get-Pye-Nm                                          !
!              Fetches The Payee Names                             !
!******************************************************************!
Begin-Procedure Get-Pye-Nm
Begin-Select
NM.NAME_PSFORMAT   &NM.NAME       (,{Col_Lname})
From  PS_PERSON_NAME  NM
Where NM.EMPLID = &A.EMPLID
End-Select

End-Procedure

!******************************************************************!
! Procedure :  Get-Rc-Parms                                        !
!              Fetches The Run Control Parameters                  !
!******************************************************************!

Begin-Procedure Get-Rc-Parms

Begin-Select

PYE.CAL_RUN_ID          &PYE.CAL_RUN_ID
PYE.COUNTRY             &PYE.COUNTRY
PYE.EMPLID_FROM         &PYE.EMPLID_FROM
PYE.EMPLID_TO           &PYE.EMPLID_TO
PYE.GP_PAYGROUP         &PYE.GP_PAYGROUP
PYE.CAL_ID              &PYE.CAL_ID
PYE.GROUP_LIST_ID       &PYE.GROUP_LIST_ID
PYE.PYE_CALC_STAT       &PYE.PYE_CALC_STAT
PYE.MESSAGE_SET_NBR     &PYE.MESSAGE_SET_NBR
PYE.MESSAGE_NBR         &PYE.MESSAGE_NBR
PYE.GP_MSG_SEVERITY     &PYE.GP_MSG_SEVERITY

    Let $Cal_Run_Id           = Rtrim(Ltrim(&PYE.CAL_RUN_ID, ' '), ' ')
    Let $Country              = Rtrim(Ltrim(&PYE.COUNTRY, ' '), ' ')
    Let $EMPLID_FROM          = Rtrim(Ltrim(&PYE.EMPLID_FROM, ' '), ' ')
    Let $EMPLID_TO            = Rtrim(Ltrim(&PYE.EMPLID_TO, ' '), ' ')
    Let $GP_PAYGROUP          = Rtrim(Ltrim(&PYE.GP_PAYGROUP, ' '), ' ')
    Let $CAL_ID               = Rtrim(Ltrim(&PYE.CAL_ID, ' '), ' ')
    Let $GROUP_LIST_ID        = Rtrim(Ltrim(&PYE.GROUP_LIST_ID, ' '), ' ')
    Let $PYE_CALC_STAT        = Rtrim(Ltrim(&PYE.PYE_CALC_STAT, ' '), ' ')
    Let $MSGSETNBR            = &PYE.MESSAGE_SET_NBR
    Let $MSGNBR               = &PYE.MESSAGE_NBR
    Let $MESSAGE_SEV          = &PYE.GP_MSG_SEVERITY

From PS_GP_RUNCTL_SQR04 PYE
 Where   PYE.OPRID       = $PRCS_OPRID
     AND PYE.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
End-Select

END-PROCEDURE
!******************************************************************!
! Fetches The Message                                              !
!******************************************************************!

Begin-Procedure Get-Msg-Txt

 LET $MSGTEXT = ''
 LET $CURNOTBASE = 'N'
If $curr_language_cd <> $Psoptions_Language_Cd
       LET $CURNOTBASE = 'Y'
       Do Get-Message-Rel-Lang
   If $MSGTEXT = ''
       Do Get-Message-Base-Lang
   End-if
else
       Do Get-Message-Base-Lang
End-if

End-Procedure

!******************************************************************!
! Procedure : Fillmsgtxt                                           !
!             Prints The Formatted Message Text                    !
!******************************************************************!

Begin-Procedure Fillmsgtxt($MSGTEXT,$MSGDT1,$MSGDT2,$MSGDT3,$MSGDT4,$MSGDT5,$PININD1,$PININD2,$PININD3,$PININD4,$PININD5,$curr_language_cd,$Psoptions_Language_Cd)
Let $Flag = 'Y'
Let $MsgTxt  = Rtrim(Ltrim($MSGTEXT,' '),' ')
Let $Strn1 = ''
Let $Show_Info1=$MsgTxt

Let $1Msgdt  = Rtrim(Ltrim($MSGDT1,' '), ' ')
Let $2Msgdt  = Rtrim(Ltrim($MSGDT2,' '), ' ')
Let $3Msgdt  = Rtrim(Ltrim($MSGDT3,' '), ' ')
Let $4Msgdt  = Rtrim(Ltrim($MSGDT4,' '), ' ')
Let $5Msgdt  = Rtrim(Ltrim($MSGDT5,' '), ' ')

Let $1PININD = Rtrim(Ltrim($PININD1,' '), ' ')
Let $2PININD = Rtrim(Ltrim($PININD2,' '), ' ')
Let $3PININD = Rtrim(Ltrim($PININD3,' '), ' ')
Let $4PININD = Rtrim(Ltrim($PININD4,' '), ' ')
Let $5PININD = Rtrim(Ltrim($PININD5,' '), ' ')

While $Flag = 'Y'
 Find  '%'  In  $Msgtxt  0   #Loc
 If #Loc < 0
   Let $Flag = 'N'
 Else
   Let $Chck= Substr($MsgTxt, #Loc, 1)
   Let #out= ascii($Chck)
   Let #Len=Length($Msgtxt)

   If not(range(#out,48,57))

   Let $Str1= Substr($MsgTxt, 0, #Loc)

   Let $Str2= Substr($MsgTxt, #Loc+3, #Len)

   Let $Rstr1=Substr($MsgTxt,#Loc+2,1)

   Let $Var_Str1 = Rtrim(Ltrim($Str1, ' '), ' ')

   Let $Var_Str2 = Rtrim(Ltrim($Str2, ' '), ' ')

   If Rtrim(Ltrim($Rstr1,' '),' ') = '1'
      If $1PININD = 'Y'
        Do GetPinNm($1Msgdt,$curr_language_cd,$Psoptions_Language_Cd,$aMsgdt)
      Else
          Let $aMsgdt = $1Msgdt
      End-If
   End-If

   If Rtrim(Ltrim($Rstr1,' '),' ') ='2'
      If $2PININD = 'Y'
        Do GetPinNm($2Msgdt,$curr_language_cd,$Psoptions_Language_Cd,$aMsgdt)
      Else
        Let $aMsgdt = $2Msgdt
      End-If
   End-If

   If Rtrim(Ltrim($Rstr1,' '),' ') ='3'
      If $3PININD = 'Y'
        Do GetPinNm($3Msgdt,$curr_language_cd,$Psoptions_Language_Cd,$aMsgdt)
      Else
         Let $aMsgdt = $3Msgdt
      End-If
   End-If

   If Rtrim(Ltrim($Rstr1,' '),' ') = '4'
      If $4PININD = 'Y'
         Do GetPinNm($4Msgdt,$curr_language_cd,$Psoptions_Language_Cd,$aMsgdt)
      Else
         Let $aMsgdt = $4Msgdt
      End-If
   End-If

   If Rtrim(Ltrim($Rstr1,' '),' ') = '5'
       If $5PININD = 'Y'
        Do GetPinNm($5Msgdt,$curr_language_cd,$Psoptions_Language_Cd,$aMsgdt)
       Else
         Let $aMsgdt = $5Msgdt
       End-If
   End-If

   Let $aMsgdt = Ltrim(Rtrim($aMsgdt,' '),' ')
   let $piece = substr($Var_Str2, 1, 1)

  if ($piece = ',' or $piece = ';' or $piece = ':' or $piece ='.' or $piece =')' )
   String  $Var_Str1 $aMsgdt By  ' '  Into  $Show_Info
   String  $Show_Info $Var_Str2   By  ''  Into  $Show_Info
  else
   String  $Var_Str1 $aMsgdt $Var_Str2   By  ' '  Into  $Show_Info
  end-if
  string $Strn1 $Show_Info By ' ' Into $Show_Info1
     Let $MsgTxt =$Show_Info
   Else 

    Let $Strn= Substr($MsgTxt, 0, #Loc+1)
    string $Strn1 $Strn By ' ' Into $Strn1
    Let $Msgtxt= Substr($MsgTxt, #Loc+2, #Len)
    String $Strn1 $Msgtxt By ' ' Into $Show_Info1

  End-If
 End-If
End-While
Let $Msgtxt = $Show_Info1
Let $MsgTxt  = Rtrim(Ltrim($Msgtxt,' '),' ')
Print  $MsgTxt    (,{Col_Msg_Desc})    Wrap  36  7
End-Procedure


!******************************************************************!
! Procedure : Get-PYE-Clause                                       !
!             Dynamically Creates the Select Clause                !
!******************************************************************!


Begin-Procedure Get-PYE-Clause

Let $Quote  = ''''
Let $From_Clause = 'PS_GP_PYE_MSG_VW A'
Let $Cal_Run_Id=Rtrim(Ltrim($Cal_Run_Id, ' '), ' ')
If $Cal_Run_Id <> ''
    Let $CAL_RUN_IDID  = $Quote || $Cal_Run_Id || $Quote
    Let $Select_Clause  = 'A.CAL_RUN_ID = (' || $CAL_RUN_IDID || ')'
End-If

If $Country <> ''
    Let $CountryID  = $Quote || $Country || $Quote
    Let $From_Clause = 'PS_GP_PYE_MSG_VW A,PS_GP_CAL_RUN C'
    Let $Select_Clause  =  $Select_Clause|| 'AND A.CAL_RUN_ID = C.CAL_RUN_ID AND C.COUNTRY IN (' || $CountryID || ')'
End-If


If $EMPLID_TO <> '' AND $EMPLID_FROM <> ''
      Let $EMPLID_TOID  = $Quote || $EMPLID_TO || $Quote
      Let $EMPLID_FROMID  = $Quote || $EMPLID_FROM || $Quote
      Let $Select_Clause  =  $Select_Clause || 'AND A.EMPLID <= (' || $EMPLID_TOID || ')' ||  'AND A.EMPLID >= (' || $EMPLID_FROMID || ')'
END-IF

If $EMPLID_TO <> '' AND $EMPLID_FROM = ''
    Let $EMPLID_TOID  = $Quote || $EMPLID_TO || $Quote
    Let $Select_Clause  =  $Select_Clause || 'AND A.EMPLID <= (' || $EMPLID_TOID || ')'
END-IF


If $EMPLID_TO = '' AND $EMPLID_FROM <> ''
   Let $EMPLID_FROMID  = $Quote || $EMPLID_FROM || $Quote
   Let $Select_Clause  =  $Select_Clause || 'AND A.EMPLID >= (' || $EMPLID_FROMID || ')'
END-IF

If $GP_PAYGROUP <>  ''
    Let $GP_PAYGROUPID  = $Quote || $GP_PAYGROUP || $Quote
    Let $Select_Clause  =  $Select_Clause || 'AND A.GP_PAYGROUP = (' || $GP_PAYGROUPID || ')'
End-If

If $CAL_ID <>  ''
    Let $CAL_IDID  = $Quote || $CAL_ID || $Quote
    Let $Select_Clause  =  $Select_Clause || 'AND A.CAL_ID = (' || $CAL_IDID || ')'
End-If

If $PYE_CALC_STAT <>  ''
    IF $PYE_CALC_STAT <> '11'

        Let $PYE_CALC_STATID  = $Quote || $PYE_CALC_STAT || $Quote
        Let $Select_Clause  =  $Select_Clause || '  AND A.PYE_CALC_STAT = (' || $PYE_CALC_STATID || ')'
      else
        Let $PYE_CALC_STATID  = $Quote || ' ' || $Quote
        Let $Select_Clause  =  $Select_Clause || '  AND A.PYE_CALC_STAT IS NULL '

    END-IF
End-If

Let $MSGSETNBR = Substr($MSGSETNBR,1,5)
If $MSGSETNBR <>  '' AND $MSGSETNBR <> '0.000'
    Let $MESSAGE_SET_NBRID  =  $MSGSETNBR
    Let $Select_Clause  =  $Select_Clause ||' AND A.MESSAGE_SET_NBR = '|| $MSGSETNBR
End-If
Let $MSGNBR = SUBSTR($MSGNBR,1,5)
If $MSGNBR <> '' AND $MSGNBR <> '0.000'
    Let $MESSAGE_NBRID  =   $MSGNBR
    Let $Select_Clause  =  $Select_Clause || '  AND A.MESSAGE_NBR ='|| $MSGNBR
End-If


If $GROUP_LIST_ID <> ''
    Let #len= length($GROUP_LIST_ID)
    Let $GROUP_LIST_IDID  = $Quote || $GROUP_LIST_ID || $Quote
    Let $From_Clause = 'PS_GP_PYE_MSG_VW A, PS_GP_GRP_LIST_DTL DT'
    Let $Select_Clause  =  $Select_Clause || ' AND  A.EMPLID = DT.EMPLID'
    Let $Select_Clause  =  $Select_Clause || ' AND DT.GROUP_LIST_ID = (' || $GROUP_LIST_IDID || ')'
End-If

If $MESSAGE_SEV = 'E' or $MESSAGE_SEV = 'W'
   Let   $MESSAGE_SEVID = $Quote ||  $MESSAGE_SEV || $Quote
   Let $Select_Clause  =  $Select_Clause || ' AND A.GP_MSG_SEVERITY = (' || $MESSAGE_SEVID || ')'
End-If
End-Procedure


!**********************************************************************!
!                                                                      !
! Get-Header-Descriptions                                              !
! Called By:    Process-Main                                           !
! Description:  Retrieves descriptions for information to print in     !
!               the report header.  If report language is different    !
!               from the installation base language, calls program to  !
!               retrieve the description translation from the          !
!               appropriate related language table.                    !
!                                                                      !
!**********************************************************************!

Begin-Procedure Get-Header-Descriptions


#Ifdef debugy
    Show 'Inside procedure Get-Header-Descriptions'
#End-If
!**********************************************************************!
! Retrieve Calendar Group description.
!**********************************************************************!

Do Get-Calendar-Group-Base-Lang



!**********************************************************************!
! Retrieve Paygroup description.  Retrieve related language entry if   !
! necessary.                                                           !
!**********************************************************************!


 If $curr_language_cd <> $Psoptions_Language_Cd
       Do Get-Paygroup-Rel-Lang
       if $Paygroup_Descr = ''
       DO Get-Paygroup-Base-Lang
        End-if
 else
       DO Get-Paygroup-Base-Lang
 End-if



!*****************************************************************************!
!  Gets The Period Begin Date And Period End Date   For A Particular          !
!  Cal_Run_Id And Calid                                                       !
!*****************************************************************************!

Begin-Select

PST.PRD_BGN_DT            &PST.PRD_BGN_DT
PST.PRD_END_DT            &PST.PRD_END_DT
PST.ORIG_CAL_RUN_ID       &PST.ORIG_CAL_RUN_ID

     Let $Period_Begin_Date   =  &PST.PRD_BGN_DT
     Let $Period_End_Date     =  &PST.PRD_END_DT
     Let $Orig_Cal_Run_Id     =  &PST.ORIG_CAL_RUN_ID


FROM  PS_GP_PYE_PRC_STAT    PST
WHERE PST.EMPLID     = $Emplid
  AND PST.EMPL_RCD   = #Empl_Rcd
  AND PST.CAL_RUN_ID = $Cal_Run_Id

End-Select

End-Procedure ! Get-Header-Descriptions


!*****************************************************************************!
! Procedure : GetPinNm                                                        !
!             Gets The Pin Name For A Particular Pin Num                      !
!*****************************************************************************!

Begin-Procedure GetPinNm($Pinnum,$curr_language_cd,$Psoptions_Language_Cd,:$aMsgdt)
LET #Pinnum1 = to_number($Pinnum)

If $curr_language_cd <> $Psoptions_Language_Cd
          Do exchange-pin-name(#Pinnum1,$curr_language_cd,$PIN_Name)
          IF $PIN_Name = ''
          Do base-pin-name(#Pinnum1,$PIN_Name)
          End-IF
else
          Do base-pin-name(#Pinnum1,$PIN_Name)
End-if

Let $aMsgdt = Ltrim(Rtrim($PIN_Name,' '),' ')

End-Procedure

!*****************************************************************************!
! Procedure : base-pin-name                                                   !
!             Retrieve PIN Name                                               !
!*****************************************************************************!

Begin-Procedure base-pin-name(#Pinnum1,:$PIN_Name)
Begin-Select

PIN.PIN_NM  &PIN.PIN_NM

   Let $PIN_Name = Rtrim(Ltrim(&PIN.PIN_NM,' '), ' ')

   If Length($PIN_Name) > 15
        Let $PIN_Name = Substr($PIN_Name,1,15)
    End-If

From PS_GP_PIN PIN
Where  PIN_NUM = #Pinnum1

End-Select

End-Procedure

!**********************************************************************!
!                                                                      !
! exchange-pin-name                                                    !
!                                                                      !
!                                                                      !
! Called By:    GetPinNm                                               !
!                                                                      !
! Calls:        none                                                   !
!                                                                      !
! Description:  Retrieve PIN Name related language entry.  Trim to fit !
!                   report.                                            !
!                                                                      !
!**********************************************************************!


Begin-Procedure exchange-pin-name(#Pinnum1,$curr_language_cd,:$PIN_Name)

#Ifdef debugy
    Show 'Inside procedure exchange-pin-name'
#End-If
Begin-Select

#Ifdef debugy
    Show 'Inside SELECT, procedure exchange-pin-name'
#End-If


PINLANG.PIN_NM  &PINLANG.PIN_NM

    Let $PIN_Name     = &PINLANG.PIN_NM

    If Length($PIN_Name) > 15
        Let $PIN_Name = Substr($PIN_Name,1,15)
    End-If

    FROM PS_GP_PIN_LANG PINLANG

    WHERE PINLANG.PIN_NUM     = #Pinnum1
      AND PINLANG.LANGUAGE_CD = $curr_language_cd

End-Select
End-Procedure ! exchange-pin-name

!**********************************************************************!
!                                                                      !
! Get-Paygroup-Rel-Lang                                                !
!                                                                      !
!                                                                      !
! Called By:    Get-Header-Descriptions                                !
!                                                                      !
! Calls:        none                                                   !
!                                                                      !
! Description:  Retrieve paygroup related language entry.              !
!                                                                      !
!**********************************************************************!


begin-procedure Get-Paygroup-Rel-Lang


#Ifdef debugy
    Show 'Inside procedure Get-Paygroup-Rel-Lang'
#End-If


Begin-Select

#Ifdef debugy
    Show 'Inside SELECT, procedure Get-Paygroup-Rel-Lang'
#End-If

PYGRPLANG.DESCR     &PYGRPLANG.DESCR

    Let $Paygroup_Descr = &PYGRPLANG.DESCR

    FROM PS_GP_PYGRP_LANG PYGRPLANG
    WHERE PYGRPLANG.GP_PAYGROUP = $Paygroup
      AND PYGRPLANG.LANGUAGE_CD = $curr_language_cd

End-Select

End-Procedure ! Get-Paygroup-Rel-Lang

begin-procedure Get-Paygroup-Base-Lang

Begin-Select

#ifdef debugy
    show 'Inside SELECT2, procedure Get-Header-Descriptions'
#end-if


PYGRP.DESCR     &PYGRP.DESCR


    Let $Paygroup_Descr = &PYGRP.DESCR


#Ifdef debugy
    Show '$Paygroup_Descr:    ' noline
    Show $Paygroup_Descr
#End-If

    FROM PS_GP_PYGRP PYGRP
    WHERE GP_PAYGROUP = $Paygroup

End-Select
End-Procedure !Get-Paygroup-Base-Lang


begin-procedure Get-Calendar-Group-Base-Lang

Begin-Select

#Ifdef debugy
    Show 'Inside SELECT2, procedure Get-Header-Descriptions'
#End-If

CALGRP.DESCR     &CALGRP.DESCR

    Let $Calendargroup_Descr = &CALGRP.DESCR

#Ifdef debugy
    Show '$Calendargroup_Descr:    ' noline
    Show $Calendargroup_Descr
#End-If

    FROM PS_GP_CAL_RUN  CALGRP
    WHERE CALGRP.CAL_RUN_ID = $Cal_Run_Id

End-Select

End-Procedure !Get-Calendar-Group-Base-Lang



begin-procedure Get-Message-Rel-Lang
Begin-Select
N.MESSAGE_TEXT  &MESSAGE_TEXT
  Move &MESSAGE_TEXT TO $MSGTEXT
  Let $Flag = 'Y'
  Do Fillmsgtxt($MSGTEXT,$MSGDT1,$MSGDT2,$MSGDT3,$MSGDT4,$MSGDT5,$PININD1,$PININD2,$PININD3,$PININD4,$PININD5,$curr_language_cd,$Psoptions_Language_Cd)
From PSMSGCATLANG  N
Where   N.MESSAGE_SET_NBR = &A.MESSAGE_SET_NBR
  AND   N.MESSAGE_NBR     = &A.MESSAGE_NBR
  AND   N.LANGUAGE_CD     = $curr_language_cd

End-Select
End-Procedure !Get-Message-Rel-Lang

begin-procedure Get-Message-Base-Lang
Begin-Select
M.MESSAGE_TEXT  &MESSAGE_TEXT1
  Move &MESSAGE_TEXT1 TO $MSGTEXT

  Let $Flag = 'Y'
  Do Fillmsgtxt($MSGTEXT,$MSGDT1,$MSGDT2,$MSGDT3,$MSGDT4,$MSGDT5,$PININD1,$PININD2,$PININD3,$PININD4,$PININD5,$curr_language_cd,$Psoptions_Language_Cd)

From PSMSGCATDEFN  M
Where   M.MESSAGE_SET_NBR = &A.MESSAGE_SET_NBR
  And   M.MESSAGE_NBR     = &A.MESSAGE_NBR

End-Select
End-Procedure !Get-Message-Base-Lang



#include 'prcslng.sqc'   ! Replaces getrplng.sqc
#Include 'readxlat.sqc'  ! get translates for fieldname, value
#Include 'reset.sqc'     ! Reset printer procedure
#Include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#Include 'datetime.sqc'  ! Routines for date and time formatting
#Include 'stdapi.sqc'    ! Update Process API
#include 'sqrtrans.sqc'  ! Translate SQR strings to given language
