!***********************************************************************
!  GP00PS31: Global Payroll Payslips - Common procedures for ALL Countries
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2013, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:09:07                                 *
!       $Release:  HR92                                                *
!      $Revision:  102                                                 *
!                                                                      *
!***********************************************************************
! Change History
! Incident ID    Dated     Comments
!
! 1262981000      5/05     Default to HOME address if a payee doesn't have an address 
!                          type defined that matches Delivery Address for a Check
!
! 1269701000      7/05     Redundant reads for some tables. Create arrays and read in data
!                          up front and access the array instead of the table for subsequent
!                          data retrieval
! 1372311000      11/05    Remove the function Evaluate_Balance_Suffix. This function places
!                          an unecessary restriction when used in validating whether to 
!                          print a balance accumulator


!**********************************************************************
!**********************************************************************
!       get_start_page_line_number
!**********************************************************************
!**********************************************************************

begin-procedure get_start_page_line_number(#current-line, #page-count, :#start-section-line-number, :#start-section-page-number)
If upper($_gbl_Dynamic_flag) = 'Y'
    let #start-section-line-number = #current-line + 1
Else
      !if #page-count > 1  ! After page 1 is written, ignore rest of the gbl start lines
      !    Move 1 to #_gbl_curr_Section_Start_Line
     ! end-if
        if #current-line < (#_gbl_curr_Section_Start_Line)
             let #start-section-line-number = #_gbl_curr_Section_Start_Line + 1
        else
             let #start-section-line-number = #current-line + 1
    end-if
      
End-If
let #start-section-page-number = #page-count
#debug1 show '** ALL Common Procedures:  Get_start_page_line_number() VARS  #start-section-line-number  = ' #start-section-line-number 
end-procedure


!**********************************************************************
!**********************************************************************
!       evaluate_bankdraft_collision
!**********************************************************************
!**********************************************************************

begin-procedure evaluate_bankdraft_collision(#start-section-line-number,:$check_collision)

let #temp_line_counter = #start-section-line-number + #_gbl_curr_Section_Nbr_Lines
If #temp_line_counter >= #_gbl_Paycheck_Start_Line
    let $check_collision = 'y'
Else
    let $check_collision = 'n'
End-If
end-procedure

!**********************************************************************
!**********************************************************************
!       evaluate_space
!**********************************************************************
!**********************************************************************

begin-procedure evaluate_space(#start-section-line-number,:$space_left)

let #temp_line_counter = #start-section-line-number + #_gbl_curr_Section_Nbr_Lines

If #temp_line_counter >= #_gbl_Page_lines
    let $space_left= 'n'
Else
    let $space_left= 'y'
End-If

end-procedure
!**********************************************************************
!**********************************************************************
!       evaluate_space_for_title
!**********************************************************************
!**********************************************************************

begin-procedure evaluate_space_for_title(#start-section-line-number,#title_total_lines, :$space_left)
let #temp_line_counter = #start-section-line-number + #title_total_lines

If #temp_line_counter >= #_gbl_Page_lines
    let $space_left= 'n'
Else
    let $space_left= 'y'
End-If
end-procedure
!**********************************************************************
!**********************************************************************
!      get_appropriate_pin_description
!**********************************************************************
!**********************************************************************
begin-procedure get_appropriate_description(#Pin_num, $Title_opt,$Title,$Pin_Category,$User_Key1, $User_Key2,:$Name)

EVALUATE $title_opt
WHEN = '10'
        do get_pin_name(#Pin_num, $Name)
        BREAK
WHEN = '20'
        do get_pin_nm(#Pin_num, $Name)
        BREAK
WHEN = '30'
        let $Name = $Title
        break
WHEN = '40'
        do special_routine(#Pin_num,$Pin_Category, $User_Key1, $User_Key2, $Name)
        break
WHEN-OTHER
    BREAK

END-EVALUATE

end-procedure
!**********************************************************************
!**********************************************************************
!      special_routine
!**********************************************************************
!**********************************************************************
begin-procedure special_routine(#Pin_num,$Pin_Category,$User_Key1, $User_Key2,:$Name)

#debug1 show '** ALL Common Procedures:      special_routine '

LET $STR1 = 'GRN'
LET $STR2 = 'TXS'
let $STR3 = 'LNS'
let $STR4 = 'BND'
let $Name = ' '
if rtrim(ltrim($Pin_Category,' '),' ') = $STR1
  let $FieldName = 'GPUS_GRN_TYPE'
  let $FieldValue = $User_Key2
  let $IdVaue  = rtrim(ltrim($User_Key1,' '),' ')

  do get_xlat_name($FieldName, $FieldValue, $ValName)
  let $TrimValName  = rtrim(ltrim($ValName,' '),' ')
  Let $Name =  $TrimValName 
  concat '-' with $Name
  concat $IdVaue with $Name
Else
   If rtrim(ltrim($Pin_Category,' '),' ')= $STR2 
      Let $Name = LTRIM(RTRIM($User_Key2,' '),' ') || ' '|| $User_Key1
      !$user_key1 IS 'wITHHOLDING lABEL'
   Else
    if rtrim(ltrim($Pin_Category,' '),' ') = $STR3
     do get_pin_name(#Pin_num, $PinName)
     LET $PinName = rtrim(ltrim($PinName,' '),' ')
     let $IdVaue  = rtrim(ltrim($User_Key1,' '),' ')
     Let $Name =  $PinName
     concat '-' with $Name
     concat $IdVaue with $Name
    Else
     if rtrim(ltrim($Pin_Category,' '),' ') = $STR4
      do get_pin_name(#Pin_num, $PinName)
      LET $PinName = rtrim(ltrim($PinName,' '),' ')
      let $IdVaue  = rtrim(ltrim($User_Key1,' '),' ')
      Let $Name =  $PinName
      concat '-' with $Name
      concat $IdVaue with $Name
     End-If
    End-if
  End-if
End-if
end-procedure

!**********************************************************************
!**********************************************************************
!      get_pin_name
!**********************************************************************
!**********************************************************************
begin-procedure get_pin_name(#Pin_num, :$Name)
let $found = 'n'
#debug1 show '** ALL Common Procedures:   Get_Pin_name: PIN = '#PIN_NUM 
if $_gbl_Pin_array_processing = 'Y'
  do get_pin_from_array(#Pin_num,'DESCR', $Name)
else
  do fetch_pin_name(#Pin_num, $Name)
end-if
end-procedure


!**********************************************************************
!**********************************************************************
!      fetch_pin_name
!**********************************************************************
!**********************************************************************
begin-procedure fetch_pin_name(#Pin_num, :$Name)

#debug1 show '** ALL Common Procedures:    Fetch_Pin_Name: PIN = '#PIN_NUM
BEGIN-SELECT ON-ERROR=SQL-ERROR
A.DESCR     &COMMON_DESCR    
  let $Common_Name = &COMMON_DESCR
    Move $Common_Name to $Name
   if $_gbl_tgt_lang_cd <> $_SQR_Default_Language
      do GetTranslatedPinName(#Pin_num,$LangName,$found)
      if $found = 'y'
         Move $LangName to $Name
      end-if
   end-if
FROM PS_GP_PIN A
WHERE A.PIN_NUM = #Pin_num
end-select

end-procedure

!**********************************************************************
!**********************************************************************
!      get_pin_nm
!**********************************************************************
!**********************************************************************
begin-procedure get_pin_nm(#Pin_num, :$Name)

#debug1 show '** ALL Common Procedures:   GET_PIN_NM: PIN = '#PIN_NUM

if $_gbl_Pin_array_processing = 'Y'
  do get_pin_from_array(#Pin_num, 'NAME', $Name)
  let $Descr = ''
else 
  do fetch_pin_nm(#Pin_num, $Name)
end-if
end-procedure

!**********************************************************************
!**********************************************************************
!      fetch_pin_nm
!**********************************************************************
!**********************************************************************
begin-procedure fetch_pin_nm(#Pin_num, :$Name)

#debug1 show '** ALL Common Procedures:   FETCH_PIN_NM: PIN = '#PIN_NUM

BEGIN-SELECT ON-ERROR=SQL-ERROR
PIN_NM         
    Move &PIN_NM to $Name
FROM PS_GP_PIN
WHERE PIN_NUM = #Pin_num
end-select

end-procedure


!**********************************************************************
!**********************************************************************
!      get_pin_from_array
!**********************************************************************
!**********************************************************************
begin-procedure get_pin_from_array(#Pin_num, $Type, :$Name)

let #mid = 0
let #start = 0
let #end = (#_gbl_pin_array_ctr - 1)
let $pin_found = 'N' 

while (#start <= #end) and $pin_found = 'N'
  let #mid = trunc((#start+#end)/2,0) 
  let #pin_array_pin = PIN.NUM(#mid)
  if #Pin_num = #pin_array_pin
     if $Type = 'NAME'
       let $Name = PIN.NAME(#mid)
     else
       let $Name = PIN.DESCR(#mid)
     end-if
     let $pin_found = 'Y'
  else 
     if #Pin_num < #pin_array_pin
       let #end = #mid - 1
     else
       if #Pin_num > #pin_array_pin
         let #start = #mid + 1
       end-if
     end-if
  end-if
end-while

end-procedure

!**********************************************************************
!**********************************************************************
!      get_xlat_name
!**********************************************************************
!**********************************************************************
begin-procedure get_xlat_name($FieldName, $FieldValue,:$Name)
let $TrimmedFieldValue = ltrim($FieldValue,'0')
BEGIN-SELECT ON-ERROR=SQL-ERROR
COMMON.XLATLONGNAME     
   Move &COMMON.XLATLONGNAME  to $Name
FROM PSXLATITEM COMMON
WHERE COMMON.FIELDNAME = $FieldName AND COMMON.FIELDVALUE = $TrimmedFieldValue
END-SELECT
end-procedure

!***********************************************************************
!                                                                      *
begin-procedure GetTranslatedPinName(#PinNum,:$PinName,:$found)
!                                                                      *
!***********************************************************************
Begin-SELECT on-error=SQL-Error
DESCR       &COMMON_DESCR_PIN_LNG

    let $PinName = &COMMON_DESCR_PIN_LNG
    let $found = 'y'
FROM PS_GP_PIN_LANG
WHERE PIN_NUM     = #PinNum
  AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT

end-procedure ! GetTranslatedDescr


!**********************************************************************
!**********************************************************************
!      Get_Company_Name
!**********************************************************************
!**********************************************************************
begin-procedure Get_Company_Name(:$COMPANY)

BEGIN-SELECT ON-ERROR=SQL-ERROR
COMPANY
    Move &COMPANY to $COMPANY
FROM PS_GP_PSLP_GDE_TMP
WHERE JOBINSTANCE = #_gbl_job_instance
    AND EMPLID = $_gbl_tgt_Emplid
    AND PMT_GRP_ID = #_gbl_tgt_Grp_ID

END-SELECT
end-procedure



!**********************************************************************
!**********************************************************************
!      Get_Company_Address
!**********************************************************************
!**********************************************************************
begin-procedure Get_Company_Address($COMPANY, :$DESCR, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3,
                         :$ADDRESS4, :$CITY, :$STATE, :$POSTAL, :$PHONE)


#debug1 show '** ALL Common Procedures:   GET_COMPANY_Address : COMPANY = '$COMPANY

if $_gbl_Company_array_processing = 'Y'
  do get_company_from_array($COMPANY, $DESCR, $ADDRESS1, $ADDRESS2, $ADDRESS3,
                           $ADDRESS4, $CITY, $STATE, $POSTAL, $PHONE)
else
  do Fetch_Company_Address($COMPANY, $DESCR, $ADDRESS1, $ADDRESS2, $ADDRESS3,
                           $ADDRESS4, $CITY, $STATE, $POSTAL, $PHONE)
end-if

end-procedure


!**********************************************************************
!**********************************************************************
!      Get_Company_Address_Check
!**********************************************************************
!**********************************************************************
begin-procedure Get_Company_Address_Check($COMPANY, :$DESCR, :$ADDRESS1, 
            :$ADDRESS2, :$ADDRESS3,:$ADDRESS4, :$CITY, :$STATE, :$POSTAL, :$PHONE)

#debug1 show '** ALL Common Procedures:       GET_COMPANY_Address_Check: COMPANY = '$COMPANY

!only go to the company array if using array processing and if the payee's language is the same as the
!report language because the array will have the base (non-related language) location name
!otherwise do a direct read from the base location table to get the location name since the array
!will have the related language company name (when payee language <> report language)0000000
if ($_gbl_company_array_processing = 'Y') and ($_gbl_tgt_lang_cd = $_SQR_Default_Language)
  do get_Company_from_array($COMPANY, $DESCR, $ADDRESS1, $ADDRESS2, $ADDRESS3,
                           $ADDRESS4, $CITY, $STATE, $POSTAL, $PHONE)
 
else
  do Fetch_Company_Address_Check($COMPANY, $DESCR, $ADDRESS1, 
            $ADDRESS2, $ADDRESS3, $ADDRESS4, $CITY, $STATE, $POSTAL, $PHONE)
end-if


end-procedure

!**********************************************************************
!**********************************************************************
!      get_company_from_array
!**********************************************************************
!**********************************************************************
begin-procedure get_company_from_array($COMPANY, :$DESCR, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3,
                         :$ADDRESS4, :$CITY, :$STATE, :$POSTAL, :$PHONE)

#debug1 show '** ALL Common Procedures:       GET_COMPANY_FROM_ARRAY: COMPANY = '$COMPANY

let #mid = 0
let #start = 0
let #end = (#_gbl_company_array_ctr - 1)
let $company_found = 'N' 

while (#start <= #end) and $company_found = 'N'
  let #mid = trunc((#start+#end)/2,0) 
  let $company_array_name = COMPANY.NAME(#mid)
  #debug3 show '**      start = ' #start ' mid = ' #mid ' end = ' #end ' company = '$company_array_name
  if $COMPANY = $company_array_name
     let $Descr = COMPANY.DESCR(#mid)
     let $ADDRESS1 = COMPANY.ADDRESS1(#mid)
     let $ADDRESS2 = COMPANY.ADDRESS2(#mid)
     let $ADDRESS3 = COMPANY.ADDRESS3(#mid)
     let $ADDRESS4 = COMPANY.ADDRESS4(#mid)
     let $CITY = COMPANY.CITY(#mid)
     let $STATE = COMPANY.STATE(#mid)
     let $POSTAL = COMPANY.POSTAL(#mid)
     let $PHONE = COMPANY.PHONE(#mid)
     let $company_found = 'Y'
     #debug3 show '**      COMPANY FOUND AT ELEMENT = '#MID
  else 
     if $COMPANY < $company_array_name
       let #end = #mid - 1
     else
       if $COMPANY > $company_array_name
         let #start = #mid + 1
       end-if
     end-if
  end-if
end-while

end-procedure


!**********************************************************************
!**********************************************************************
!      Fetch_Company_Address
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Company_Address($COMPANY, :$DESCR, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3,
                         :$ADDRESS4, :$CITY, :$STATE, :$POSTAL, :$PHONE)

#debug1 show '** ALL Common Procedures:   Fetch_Company_address: COMPANY = '$COMPANY

BEGIN-SELECT ON-ERROR=SQL-ERROR
A.DESCR,
A.ADDRESS1,
A.ADDRESS2,
A.ADDRESS3,
A.ADDRESS4,
A.CITY,
A.STATE,
A.POSTAL
    Move &A.DESCR to $DESCR
    if $_gbl_tgt_lang_cd <> $_SQR_Default_Language
      do GetTranslatedCompanyName($COMPANY,$LangName,$found)
      if $found = 'y'
         Move $LangName to $DESCR
      end-if
   end-if
    Move &A.ADDRESS1 to $ADDRESS1
    Move &A.ADDRESS2 to $ADDRESS2
    Move &A.ADDRESS3 to $ADDRESS3
    Move &A.ADDRESS4 to $ADDRESS4
    Move &A.CITY to $CITY
    Move &A.STATE to $STATE
    Move &A.POSTAL to $POSTAL    
FROM PS_COMPANY_TBL A
WHERE 
A.COMPANY = $COMPANY AND
A.EFFDT = (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE COMPANY = $COMPANY AND EFFDT <= $_AsOfToday)

end-select

BEGIN-SELECT ON-ERROR=SQL-ERROR
P.PHONE
  Move &P.PHONE to $PHONE
FROM PS_COMP_PHONE_TBL P
WHERE 
P.COMPANY = $COMPANY AND
P.EFFDT = (SELECT MAX(EFFDT)
     FROM PS_COMP_PHONE_TBL
     WHERE COMPANY = $COMPANY AND EFFDT <= $_AsOfToday AND PHONE_TYPE = 'BUSN')
AND PHONE_TYPE = 'BUSN'

end-select


end-procedure

     
!**********************************************************************
!**********************************************************************
!      Fetch_Company_Address_Check
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Company_Address_Check($COMPANY, :$DESCR, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3, 
                            :$ADDRESS4, :$CITY, :$STATE, :$POSTAL, :$PHONE)          

#debug1 show '** ALL Common Procedures:  Fetch_COMPANY_Address_Check : COMPANY = '$COMPANY

BEGIN-SELECT ON-ERROR=SQL-ERROR
A.DESCR,
A.ADDRESS1,
A.ADDRESS2,
A.ADDRESS3,
A.ADDRESS4,
A.CITY,
A.STATE,
A.POSTAL
    Move &A.DESCR to $DESCR
    Move &A.ADDRESS1 to $ADDRESS1
    Move &A.ADDRESS2 to $ADDRESS2
    Move &A.ADDRESS3 to $ADDRESS3
    Move &A.ADDRESS4 to $ADDRESS4
    Move &A.CITY to $CITY
    Move &A.STATE to $STATE
    Move &A.POSTAL to $POSTAL    
FROM PS_COMPANY_TBL A
WHERE 
A.COMPANY = $COMPANY AND
A.EFFDT = (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE COMPANY = $COMPANY AND EFFDT <= $_AsOfToday)

end-select

BEGIN-SELECT ON-ERROR=SQL-ERROR
P.PHONE
  Move &P.PHONE to $PHONE
FROM PS_COMP_PHONE_TBL P
WHERE 
P.COMPANY = $COMPANY AND
P.EFFDT = (SELECT MAX(EFFDT)
     FROM PS_COMP_PHONE_TBL
     WHERE COMPANY = $COMPANY AND EFFDT <= $_AsOfToday AND PHONE_TYPE = 'BUSN')
AND PHONE_TYPE = 'BUSN'

end-select


end-procedure
     
!**********************************************************************
!**********************************************************************
!      GetTranslatedCompanyName
!**********************************************************************
!**********************************************************************
begin-procedure GetTranslatedCompanyName($COMPANY, :$LangName,:$found)

#debug1 show '** ALL Common Procedures:   GetTranslatedCompanyName : COMPANY = '$COMPANY 

Begin-SELECT on-error=SQL-Error
DESCR       &COMMON_DESCR_COMPANY_LNG

    let $LangName = &COMMON_DESCR_COMPANY_LNG
    let $found = 'y'
FROM PS_COMPANY_VWLNG
WHERE COMPANY     = $COMPANY
  AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT

end-procedure ! GetTranslatedCompanyName

!**********************************************************************
!**********************************************************************
!      Get_Payee_Address
!**********************************************************************
!**********************************************************************
begin-procedure Get_Payee_Address($EMPLID, $Addr_Type, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3, 
                                     :$ADDRESS4, :$CITY, :$STATE, :$POSTAL)

Let $Adr2Found = 'N'
Begin-Select on-error=SQL-Error 
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY
        Let $Adr2Found = 'Y'

        Let $address1 = &ADR.ADDRESS1
        Let $address2 = &ADR.ADDRESS2
        Let $address3 = &ADR.ADDRESS3
        Let $address4 = &ADR.ADDRESS4
        Let $City     = rtrim(&ADR.CITY, ' ')
        Let $State    = &ADR.STATE
        Let $Postal   = &ADR.POSTAL
           do adformat
           do Compress-Address

    FROM PS_ADDRESSES ADR
    WHERE ADR.EMPLID = $Emplid
      AND ADR.ADDRESS_TYPE = $Addr_Type
      AND ADR.EFFDT = (SELECT MAX(ADR1.EFFDT) FROM PS_ADDRESSES ADR1
                          WHERE ADR1.EMPLID = ADR.EMPLID
                            AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE)
End-Select



!if address not found then default to HOME address
if  $Adr2Found = 'N'

Begin-Select on-error=SQL-Error 
ADR2.ADDRESS1
ADR2.ADDRESS2
ADR2.ADDRESS3
ADR2.ADDRESS4
ADR2.CITY
ADR2.STATE
ADR2.POSTAL
ADR2.COUNTY
ADR2.COUNTRY
        Let $Adr2Found = 'Y'

        Let $address1 = &ADR2.ADDRESS1
        Let $address2 = &ADR2.ADDRESS2
        Let $address3 = &ADR2.ADDRESS3
        Let $address4 = &ADR2.ADDRESS4
        Let $City     = rtrim(&ADR2.CITY, ' ')
        Let $State    = &ADR2.STATE
        Let $Postal   = &ADR2.POSTAL
           do adformat
           do Compress-Address

    FROM PS_ADDRESSES ADR2
    WHERE ADR2.EMPLID = $Emplid
      AND ADR2.ADDRESS_TYPE = 'HOME'
      AND ADR2.EFFDT = (SELECT MAX(ADR1.EFFDT) FROM PS_ADDRESSES ADR1
                          WHERE ADR1.EMPLID = ADR2.EMPLID
                            AND ADR1.ADDRESS_TYPE = ADR2.ADDRESS_TYPE)
End-Select


end-if

End-Procedure



!**********************************************************************
!**********************************************************************
!      Get_Dept_Name
!**********************************************************************
!**********************************************************************
begin-procedure Get_Dept_Name($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, :$Dept)

#debug1 show '** ALL Common Procedures:   GET_Dept_Name : Dept = '$SETID_DEPT_EEHEAD ' / '$DEPTID_EEHEAD

if $_gbl_Dept_array_processing = 'Y'
  do get_dept_from_array($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, $Dept)
else
  do Fetch_Dept_Name($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, $Dept)
end-if

end-procedure

!**********************************************************************
!**********************************************************************
!      Get_Dept_Name_Check
!**********************************************************************
!**********************************************************************
begin-procedure Get_Dept_Name_Check($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, :$Dept)

#debug1 show '** ALL Common Procedures:   GET_Dept_Name_Check  : Dept = '$SETID_DEPT_EEHEAD ' / '$DEPTID_EEHEAD

!only go to the department array if using array processing and if the payee's language is the same as the
!report language because the array will have the base (non-related) language department name
!otherwise do a direct read from the base location table to get the location name since the array
!will have the related language location name (when payee language <> report language)
if ($_gbl_Dept_array_processing = 'Y') and ($_gbl_tgt_lang_cd = $_SQR_Default_Language)
  do get_dept_from_array($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, $Dept)
else
  do Fetch_Dept_Name_Check($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, $Dept)
end-if

end-procedure

!**********************************************************************
!**********************************************************************
!      get_dept_from_array
!**********************************************************************
!**********************************************************************
begin-procedure get_dept_from_array($DEPTID,$SETID_DEPT, :$DESCR, )

#debug1 show '** ALL Common Procedures:   Get_Dept_from_array: Dept = '$SETID_DEPT ' / '$DEPTID

let #mid = 0
let #start = 0
let #end = (#_gbl_dept_array_ctr - 1)
let $dept_found = 'N' 

while (#start <= #end) and $dept_found = 'N'
  let #mid = trunc((#start+#end)/2,0) 
  let $dept_array_setid = DEPT.SETID(#mid)
  let $dept_array_name = DEPT.NAME(#mid)
  move $dept_array_setid to $array_dept
  concat $dept_array_name with $array_dept
  #debug3 show '**      start = ' #start ' mid = ' #mid ' end = ' #end ' dept = '$dept_array_name
  LET $SETID_dept = rtrim($SETID_DEPT, ' ')
  LET $DEPTID = rtrim($DEPTID, ' ')
  move $SETID_DEPT  to $parm_dept
  concat $DEPTID with $parm_dept
  if $parm_dept = $array_dept
     let $Descr = DEPT.DESCR(#mid)
     let $dept_found = 'Y'
     #debug3 show '**      DEPT FOUND AT ELEMENT = '#MID ' DESCR = ' $Descr
  else 
     if $parm_dept < $array_dept
       let #end = #mid - 1
     else
       if $parm_dept > $array_dept
         let #start = #mid + 1
       end-if
     end-if
  end-if
end-while

end-procedure


!**********************************************************************
!**********************************************************************
!      Fetch_Dept_Name_Check
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Dept_Name_Check($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, :$Dept)

#debug1 show '** ALL Common Procedures:   Fetch_Dept_Name_Check: Dept = '$SETID_DEPT_EEHEAD ' / '$DEPTID_EEHEAD

let $found = 'n'
Begin-Select on-error=SQL-Error 
DEPT.DESCR
    
      Let $Dept = rtrim(&DEPT.DESCR,' ')
    FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SETID_DEPT_EEHEAD  
      AND DEPT.DEPTID = $DEPTID_EEHEAD
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID)
End-Select
End-Procedure

!**********************************************************************
!**********************************************************************
!      Fetch_Dept_Name
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Dept_Name($DEPTID_EEHEAD, $SETID_DEPT_EEHEAD, :$Dept)

#debug1 show '** ALL Common Procedures:   Fetch_Dept_Name : Dept = '$SETID_DEPT_EEHEAD ' / '$DEPTID_EEHEAD

let $found = 'n'
Begin-Select on-error=SQL-Error 
DEPT.DESCR
    
      Let $Dept = rtrim(&DEPT.DESCR,' ')
 
  if $_gbl_tgt_lang_cd <> $_SQR_Default_Language
      do GetTranslatedDeptName($DEPTID_EEHEAD,$LangName,$found)
     if $found = 'y'
      Move $LangName to $Dept
     end-if
  end-if

   FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SETID_DEPT_EEHEAD  
      AND DEPT.DEPTID = $DEPTID_EEHEAD
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID)
End-Select
End-Procedure



!***********************************************************************
!                                                                      *
begin-procedure GetTranslatedDeptName($DEPTID_EEHEAD,:$DeptName,:$found)
!                                                                      *
!***********************************************************************

Begin-SELECT on-error=SQL-Error
DEPTLANG.DESCR       

    let $DeptName = &DEPTLANG.DESCR
    let $found = 'y'
FROM PS_DEPT_TBL_LANG DEPTLANG
WHERE DEPTLANG.SETID  = $_SETID_DEPT_EEHEAD  
      AND DEPTLANG.DEPTID = $DEPTID_EEHEAD
      AND DEPTLANG.EFFDT = (SELECT MAX(DEPTLANG1.EFFDT) FROM PS_DEPT_TBL_LANG DEPTLANG1
                            WHERE DEPTLANG1.SETID  = DEPTLANG.SETID
                              AND DEPTLANG1.DEPTID = DEPTLANG.DEPTID)
      AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT

end-procedure ! GetTranslatedDescr



!**********************************************************************
!**********************************************************************
!      Get_Location_Name
!**********************************************************************
!**********************************************************************
begin-procedure Get_Location_Name($LOCATIONID,$SETID_LOCATION, :$DESCR)

#debug1 show '** ALL Common Procedures:   Get_Location_Name : Location = '$SETID_LOCATION ' / '$LOCATIONID

if $_gbl_Location_array_processing = 'Y'
  do get_Location_from_array($LOCATIONID,$SETID_LOCATION, $DESCR, $ADDRESS1, $ADDRESS2, $ADDRESS3,
                           $ADDRESS4, $CITY, $STATE, $POSTAL)
else
  do Fetch_Location_Name($LOCATIONID,$SETID_LOCATION,$DESCR)
end-if

end-procedure

!**********************************************************************
!**********************************************************************
!      Get_Location_Name_Check
!**********************************************************************
!**********************************************************************
begin-procedure Get_Location_Name_Check($LOCATIONID,$SETID_LOCATION, :$LOCATION,:$ADDRESS1, 
            :$ADDRESS2, :$ADDRESS3,:$ADDRESS4, :$CITY, :$STATE, :$POSTAL)

#debug1 show '** ALL Common Procedures:   Get_Location_Name_Check : Location = '$SETID_LOCATION ' / '$LOCATIONID

!only go to the location array if using array processing and if the payee's language is the same as the
!report language because the array will have the base (non-related language) location name
!otherwise do a direct read from the base location table to get the location name since the array
!will have the related language location name (when payee language <> report language)0000000
if ($_gbl_Location_array_processing = 'Y') and ($_gbl_tgt_lang_cd = $_SQR_Default_Language)
  do get_Location_from_array($LOCATIONID,$SETID_LOCATION, $DESCR, $ADDRESS1, $ADDRESS2, $ADDRESS3,
                           $ADDRESS4, $CITY, $STATE, $POSTAL)
  do adformat
  do Compress-Address
else
  do Fetch_Location_Name_Check($LOCATIONID,$SETID_LOCATION, $LOCATION, $ADDRESS1, 
            $ADDRESS2, $ADDRESS3, $ADDRESS46, $CITY, $STATE, $POSTAL)
end-if

end-procedure


!**********************************************************************
!**********************************************************************
!      get_location_from_array
!**********************************************************************
!**********************************************************************
begin-procedure get_Location_from_array($LOCATIONID,$SETID_LOCATION, :$DESCR, :$ADDRESS1, :$ADDRESS2, :$ADDRESS3,
                         :$ADDRESS4, :$CITY, :$STATE, :$POSTAL)

#debug1 show '** ALL Common Procedures:    Get_Location_from_array: LOCATION = '$SETID_LOCATION ' / '$LOCATIONID

let #mid = 0
let #start = 0
let #end = (#_gbl_location_array_ctr - 1)
let $location_found = 'N' 

while (#start <= #end) and $location_found = 'N'
  let #mid = trunc((#start+#end)/2,0) 
  let $location_array_setid = LOCATION.SETID(#mid)
  let $location_array_name = LOCATION.NAME(#mid)
  move $location_array_setid to $array_location
  concat $location_array_name with $array_location
  #debug3 show '**      start = ' #start ' mid = ' #mid ' end = ' #end ' location = '$location_array_name
  LET $SETID_LOCATION = rtrim($SETID_LOCATION, ' ')
  LET $LOCATIONID = rtrim($LOCATIONID, ' ')
  move $SETID_LOCATION  to $parm_location
  concat $LOCATIONID with $parm_location
  if $parm_location = $array_location
     let $Descr = LOCATION.DESCR(#mid)
     let $ADDRESS1 = LOCATION.ADDRESS1(#mid)
     let $ADDRESS2 = LOCATION.ADDRESS2(#mid)
     let $ADDRESS3 = LOCATION.ADDRESS3(#mid)
     let $ADDRESS4 = LOCATION.ADDRESS4(#mid)
     let $CITY = LOCATION.CITY(#mid)
     let $STATE = LOCATION.STATE(#mid)
     let $POSTAL = LOCATION.POSTAL(#mid)
     let $location_found = 'Y'
     #debug3 show '**      LOCATION FOUND AT ELEMENT = '#MID
  else 
     if $parm_location < $array_location
       let #end = #mid - 1
     else
       if $parm_location > $array_location
         let #start = #mid + 1
       end-if
     end-if
  end-if
end-while

end-procedure


!**********************************************************************
!**********************************************************************
!      Fetch_Location_Name_Check
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Location_Name_Check($LOCATIONID,$SETID_LOCATION, :$LOCATION,:$ADDRESS1, 
            :$ADDRESS2, :$ADDRESS3,:$ADDRESS4, :$CITY, :$STATE, :$POSTAL)

#debug1 show '** ALL Common Procedures:   Fetch_Location_Name_Check: Location = '$SETID_LOCATION ' / '$LOCATIONID

Begin-Select on-error=SQL-Error 

LOC.DESCR
LOC.ADDRESS1
LOC.ADDRESS2
LOC.ADDRESS3
LOC.ADDRESS4
LOC.CITY
LOC.STATE
LOC.POSTAL
LOC.COUNTY
LOC.COUNTRY
      Let $LOCATION = rtrim(&LOC.DESCR,' ')
      Let $ADDRESS1 = &LOC.ADDRESS1
      Let $ADDRESS2 = &LOC.ADDRESS2
      Let $ADDRESS3 = &LOC.ADDRESS3
      Let $ADDRESS4 = &LOC.ADDRESS4
      Let $CITY     = rtrim(&LOC.CITY, ' ')
      Let $STATE    = &LOC.STATE
      Let $POSTAL   = &LOC.POSTAL
          do adformat
           do Compress-Address
      FROM PS_LOCATION_TBL LOC
    WHERE LOC.SETID  = $SETID_LOCATION 
      AND LOC.LOCATION = $LOCATIONID
      AND LOC.EFFDT = (SELECT MAX(LOC1.EFFDT) FROM PS_LOCATION_TBL LOC1
                            WHERE LOC1.SETID  = LOC.SETID
                              AND LOC1.LOCATION = LOC.LOCATION)
End-Select
End-Procedure

!**********************************************************************
!**********************************************************************
!      Fetch_Location_Name
!**********************************************************************
!**********************************************************************
begin-procedure Fetch_Location_Name($LOCATIONID,$SETID_LOCATION, :$LOCATION)

#debug1 show '** ALL Common Procedures:   Fetch_Location_Name : Location = '$SETID_LOCATION ' / '$LOCATIONID

let $found = 'n'
Begin-Select on-error=SQL-Error 

LOC.DESCR
        
      Let $LOCATION = rtrim(&LOC.DESCR,' ')
      if $_gbl_tgt_lang_cd <> $_SQR_Default_Language
         do GetTranslatedLocName($LOCATIONID,$SETID_LOCATION,$LangName,$found)
        if $found = 'y'
         Move $LangName to $LOCATION
        end-if
      end-if
   FROM PS_LOCATION_TBL LOC
    WHERE LOC.SETID  = $SETID_LOCATION 
      AND LOC.LOCATION = $LOCATIONID
      AND LOC.EFFDT = (SELECT MAX(LOC1.EFFDT) FROM PS_LOCATION_TBL LOC1
                            WHERE LOC1.SETID  = LOC.SETID
                              AND LOC1.LOCATION = LOC.LOCATION)
End-Select
End-Procedure


!***********************************************************************
!                                                                      *
begin-procedure GetTranslatedLocName($LOCATIONID,$SETID_LOCATION,:$LocName,:$found)
!                                                                      *
!***********************************************************************

Begin-SELECT on-error=SQL-Error
LOCLANG.DESCR       

    let $LocName = &LOCLANG.DESCR
    let $found = 'y'
FROM PS_LOCATION_LANG LOCLANG
WHERE LOCLANG.SETID  = $SETID_LOCATION  
      AND LOCLANG.LOCATION = $LOCATIONID
      AND LOCLANG.EFFDT = (SELECT MAX(LOCLANG1.EFFDT) FROM PS_LOCATION_LANG LOCLANG1
                            WHERE LOCLANG1.SETID  = LOCLANG.SETID
                              AND LOCLANG1.LOCATION = LOCLANG.LOCATION)
      AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT


end-procedure ! GetTranslatedDescr

!**********************************************************************
!**********************************************************************
!      Get_Job_Name
!**********************************************************************
!**********************************************************************
begin-procedure Get_Job_Name($JOBCODE_EEHEAD,$SETID_JOBCODE_EEHEAD, :$JobTitle)
let $found = 'n'
Begin-Select on-error=SQL-Error 

JOB.DESCR
        
      Let $JobTitle = rtrim(&Job.DESCR,' ')
      if $_gbl_tgt_lang_cd <> $_SQR_Default_Language
         do GetTranslatedJobName($JOBCODE_EEHEAD,$SETID_JOBCODE_EEHEAD,$LangName,$found)
        if $found = 'y'
         Move $LangName to $JobTitle
        end-if
      end-if
   FROM PS_JOBCODE_TBL JOB
    WHERE JOB.SETID  = $SETID_JOBCODE_EEHEAD
      AND JOB.JOBCODE = $JOBCODE_EEHEAD
      AND JOB.EFFDT = (SELECT MAX(JOB1.EFFDT) FROM PS_JOBCODE_TBL JOB1
                            WHERE JOB1.SETID  = JOB.SETID
                              AND JOB1.JOBCODE = JOB.JOBCODE)
End-Select
End-Procedure




!***********************************************************************
!                                                                      *
begin-procedure GetTranslatedJobName($JOBCODE_EEHEAD,$SETID_JOBCODE_EEHEAD,:$JobName,:$found)
!                                                                      *
!***********************************************************************

Begin-SELECT on-error=SQL-Error
JOBLANG.DESCR       

    let $JobName = &JOBLANG.DESCR
    let $found = 'y'
FROM PS_JOBCODE_LANG JOBLANG
WHERE JOBLANG.SETID  = $SETID_JOBCODE_EEHEAD 
      AND JOBLANG.JOBCODE = $JOBCODE_EEHEAD
      AND JOBLANG.EFFDT = (SELECT MAX(JOBLANG1.EFFDT) FROM PS_JOBCODE_LANG JOBLANG1
                            WHERE JOBLANG1.SETID  = JOBLANG.SETID
                              AND JOBLANG1.JOBCODE = JOBLANG.JOBCODE)
      AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT


end-procedure ! GetTranslatedDescr

!**********************************************************************
!**********************************************************************
!      get_salary_hours
!**********************************************************************
!**********************************************************************
begin-procedure get_salary_hours(#Sal_Pin_num, :#sal_hrs)
#debug do Pslp-Proc-Debug-Msg('** ALL Common Procedures: Procedure get_salary_hours')
!select from the extract table

BEGIN-SELECT ON-ERROR=SQL-ERROR

S2.CALC_RSLT_VAL    &S2.CALC_RSLT_VAL

    #debug2 show '** USA STATIC HRS EARN TAX section: SALARY HRS CALC_RSLT_VAL = ' &S2.CALC_RSLT_VAL

     let #sal_hrs = &S2.CALC_RSLT_VAL

FROM PS_GPUS_PSLP_RSLT S2
WHERE S2.JOBINSTANCE = #_gbl_job_instance AND
S2.CAL_RUN_ID        = $_gbl_rc_Calendar_Group AND
S2.EMPLID = $_gbl_tgt_Emplid AND
S2.PMT_GRP_ID = #_gbl_tgt_Grp_ID AND
S2.GP_CNTRY_PSLP_ELN = $_gbl_GP_CNTRY_PSLP_ELN AND
S2.GP_ELN_SET        = $_gbl_GP_ELN_SET AND
S2.GPUS_PSLP_ELN_CAT = '10' AND
S2.GPUS_PSLP_CURR_YTD = '10' AND 
S2.SEQ_NUM = 30   AND
S2.PIN_NUM = #Sal_Pin_num

END-SELECT

end-procedure


!**********************************************************************
!**********************************************************************
!      fetch_salary_hrs_pin_from_array
!**********************************************************************
!**********************************************************************
begin-procedure fetch_salary_hrs_pin_from_array(#salary_pin,:#sal_hrs_pin)
#debug do Pslp-Proc-Debug-Msg('** ALL Common Procedures: Procedure fetch_salary_hrs_pin_from_array')

let #mid = 0
let #start = 0
let #end = (#_gbl_pin_array_ctr - 1)
let $pin_found = 'N' 
    #debug2 show '** ALL Common Procedures: Procedure fetch_salary_hrs_pin:  salary_pin = ' #salary_pin
while (#start <= #end) and $pin_found = 'N'
  let #mid = trunc((#start+#end)/2,0) 
  let #pin_array_pin = PIN.NUM(#mid)
    #debug2 show '** ALL Common Procedures: Procedure fetch_salary_hrs_pin:  mid = ' #mid ' - salary_pin = ' #pin_array_pin
  if #salary_pin = #pin_array_pin
     let $Pin_Name = PIN.NAME(#mid)
     let $pin_found = 'Y'
  else 
     if #salary_pin < #pin_array_pin
       let #end = #mid - 1
     else
       if #salary_pin > #pin_array_pin
         let #start = #mid + 1
       end-if
     end-if
  end-if
end-while

let #mid = 0
let #start = 0
let #end = (#_gbl_pin_array_ctr - 1)
let $pin_found = 'N' 
let #sal_hrs_pin = 0

    #debug2 show '** ALL Common Procedures: Procedure fetch_salary_hrs_pin:  pin Name = ' $Pin_Name
while (#mid <= #end) and $pin_found = 'N'
  let $pin_array_custom1 = PIN.CUSTOM1(#mid)
      #debug2 show '** ALL Common Procedures: Procedure fetch_salary_hrs_pin:  #mid = ' #mid ' - custom1(mid) = '$pin_array_custom1
  if $Pin_Name = $pin_array_custom1
     let #sal_hrs_pin = PIN.NUM(#mid)
      #debug2 show '** ALL Common Procedures: Procedure fetch_salary_hrs_pin:  sal_hrs_pin = '#sal_hrs_pin
     let $pin_found = 'Y'
  else 
       let #mid = #mid + 1
  end-if
end-while

end-procedure