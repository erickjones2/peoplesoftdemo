!***********************************************************************
! GPSGIR05    :  Creation of IR21 Data                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *                                                                  *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  27039774                                            !
!***********************************************************************
! Modification History                                                 *
! Dated      Author  ICE       Changes                                 *
! 28/11/02   KWH    549704000  Include setubdb in setup section        *
!***********************************************************************
!

#Include 'setenv.sqc'  !Set environment

begin-setup

#Include 'setupdb.sqc'

end-setup

begin-report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Stdapi-Term

end-Report


!***********************************************************************
!  Procedure: Init-Report                                              *
!             The main driving procedure                               *
!***********************************************************************
begin-Procedure Init-Report

  do Stdapi-Init
  do Select-Parameters

  move 'Create IR21 Details' to $ReportTitle
  display $ReportTitle

  do Get-Company-Details
  Do Define-Common-Vars
  do Process-Main
end-procedure


!***********************************************************************
!  Procedure: Define-Common-Vars                                       *
!             Variables that are common and whose value dont change    *
!***********************************************************************
begin-procedure Define-Common-Vars

! Array for Child Details
  create-array name=ChildArray size=4 -
               field = Name:char -
               field = Sex:char -
               field = BirthDate:char -
               field = School:char


! Array for Appendix 1 Benefits
  create-array name=Apndx1Benef size=60 -
               field = BnftCode:char -
               field = ValType:char:2 -
               field = Unit_Val:Number:3

End-Procedure


!***********************************************************************
!  Procedure: Initialise-Variables                                     *
!             Initialise variables for use within the program.         *
!***********************************************************************
begin-procedure Initialise-Variables

! Current Year Salary Variables

     Let #CYDonation       = 0
     Let #CYEmplVolCPFDed  = 0
     Let #CYEmplMandCPFDed = 0
     Let #CYVolEmplrCPF    = 0
     Let #CYOsEmployerCPF  = 0
     Let #CYRetirement     = 0
     let #CYPension        = 0
     let #CYOfficeLoss     = 0
     Let #CYYearNotice     = 0
     Let #CYGratuity       = 0
     Let #CYMBF            = 0
     Let #CYAllowance      = 0
     Let #CYCommission     = 0
     Let #CYDirectorFee    = 0
     Let #CYCntrctlBonus    =0
     Let #CYNonCntrctlBonus =0
     Let #CYLeavePay       = 0
     Let #CYGrossSalary    = 0

     Let #CYBenefInKind    = 0
     Let #CYShareOpt       = 0

     Let $CYYearStart       = ''
     Let $CYYearEnd         = ''
     Let $CYMBMFPaid        = 'N'
     Let $CYCCHESTPaid      = 'N'
     Let $CYSINDAPaid       = 'N'
     Let $CYCDACPaid        = 'N'
     Let $CYECFPaid         = 'N'
     Let $CYYMFPaid         = 'N'
     Let $CYBonusDate       = ''
     Let $CYBonusFlag       = 'N'
     Let $CYDirFeeDate      = ''
     Let $CYOsEmplrFundName = ' '
     Let $CYEmplMandFundName= ' '
     Let $CYESOPApplic      = 'N'
     Let $CYRetireFundName  = ' '

     Let $CYGPSG_ARRIVAL_DT      = ''
     Let $CYCommence_Dt     = ''
     Let $CYCease_Dt        = ''
     Let $CYDepart_Dt       = ''
     Let $CYResign_Dt       = ''
     Let $Action_Reason_Descr = ' '

! Previous Year Salary Variables
     Let #P1Donation       = 0
     Let #P1EmplVolCPFDed  = 0
     Let #P1EmplMandCPFDed = 0
     Let #P1VolEmplrCPF    = 0
     Let #P1OsEmployerCPF  = 0
     Let #P1Retirement     = 0
     let #P1Pension        = 0
     let #P1OfficeLoss     = 0
     Let #P1YearNotice     = 0
     Let #P1Gratuity       = 0
     Let #P1MBF            = 0
     Let #P1Allowance      = 0
     Let #P1Commission     = 0
     Let #P1DirectorFee    = 0
     Let #P1CntrctlBonus    =0
     Let #P1NonCntrctlBonus =0
     Let #P1LeavePay       = 0
     Let #P1GrossSalary    = 0

     Let #P1BenefInKind    = 0
     Let #P1ShareOpt       = 0

     Let $P1YearStart       = ''
     Let $P1YearEnd         = ''
     Let $P1MBMFPaid        = 'N'
     Let $P1CCHESTPaid      = 'N'
     Let $P1SINDAPaid       = 'N'
     Let $P1CDACPaid        = 'N'
     Let $P1ECFPaid         = 'N'
     Let $P1MBFPaid         = 'N'
     Let $P1YMFPaid         = 'N'
     Let $P1BonusDate       = ''
     Let $P1DirFeeDate      = ''
     Let $P1OsEmplrFundName = ' '
     Let $P1EmplMandFundName= ' '
     Let $P1ESOPApplic      = 'N'
     Let $P1RetireFundName  = ' '

! Previous 2nd year Salary Variables
     Let #P2Donation       = 0
     Let #P2EmplVolCPFDed  = 0
     Let #P2EmplMandCPFDed = 0
     Let #P2VolEmplrCPF    = 0
     Let #P2OsEmployerCPF  = 0
     Let #P2Retirement     = 0
     let #P2Pension        = 0
     let #P2OfficeLoss     = 0
     Let #P2YearNotice     = 0
     Let #P2Gratuity       = 0
     Let #P2Allowance      = 0
     Let #P2Commission     = 0
     Let #P2DirectorFee    = 0
     Let #P2CntrctlBonus    =0
     Let #P2NonCntrctlBonus =0
     Let #P2LeavePay       = 0
     Let #P2GrossSalary    = 0

     Let #P2BenefInKind    = 0
     Let #P2ShareOpt       = 0

     Let $P2YearStart       = ''
     Let $P2YearEnd         = ''
     Let $P2MBMFPaid        = 'N'
     Let $P2CCHESTPaid      = 'N'
     Let $P2SINDAPaid       = 'N'
     Let $P2CDACPaid        = 'N'
     Let $P2ECFPaid         = 'N'
     Let $P2YMFPaid         = 'N'
     Let $P2BonusDate       = ''
     Let $P2DirFeeDate      = ''
     Let $P2OsEmplrFundName = ' '
     Let $P2EmplMandFundName= ' '
     Let $P2ESOPApplic      = 'N'
     Let $P2RetireFundName  = ''

! Employee Personal Details

  let $EmplAddr3         = ' '
  let $EmplNationality   = ' '

! Employee Spouse Details
  let $SpouseNationality = ' '
  let $SpouseName        = ' '
  let $SpouseID          = ' '
  let $SpouseBirthDate   = ''
  let $Marital_Dt        = ''
  Let $SpouseEmployer    = ' '

! Employee Job designation

  Let $JobCodeDescr      = ' '

! Employee Citizenship Country
  let $Cit_Country       = ' '

! Employee Last Salary Details
  let #Total_Gross       = 0
  let $SalaryPaid_Dt     = ''
  Let $PayPeriod         = ' '

! Employee Last Salary Deposited Bank Name
  let $PayBankName       = ' '

! IR21 Appendix 1 Variables
   Let $X1Adress1 = ' '
   Let $X1Adress2 = ' '
   Let $X1Adress3 = ' '
   Let #X1ResidValue = 0
   Let #X1ResidValue1 = 0
   Let #X1ResidValue2 = 0
   Let $X1OccupFm_Dt = ''
   Let $X1OccupFm_Dt1 = ''
   Let $X1OccupFm_Dt2 = ''

   Let $X1OccupTo_Dt = ''
   Let $X1OccupTo_Dt1 = ''
   Let $X1OccupTo_Dt2 = ''

   Let #X1EmplrPdRent = 0
   Let #X1EmplrPdRent1 = 0
   Let #X1EmplrPdRent2 = 0

   Let #X1EmployeePdRent = 0
   Let #X1EmployeePdRent1 = 0
   Let #X1EmployeePdRent2 = 0


   Let #X1ResidShare = 0
   Let #X1ResidShare1 = 0
   Let #X1ResidShare2 = 0

   Let #X1NosAbove20 = 0
   Let #X1NosAbove201 = 0
   Let #X1NosAbove202 = 0
   Let #X1DaysAbove20 = 0
   Let #X1DaysAbove201 = 0
   Let #X1DaysAbove202 = 0

   Let #X1Nos_8_20 = 0
   Let #X1Nos_8_201 = 0
   Let #X1Nos_8_202 = 0

   Let #X1Days_8_20 = 0
   Let #X1Days_8_201 = 0
   Let #X1Days_8_202 = 0

   Let #X1Nos_3_7 = 0
   Let #X1Nos_3_71 = 0
   Let #X1Nos_3_72 = 0

   Let #X1Days_3_7 = 0
   Let #X1Days_3_71 = 0
   Let #X1Days_3_72 = 0

   Let #X1Nos_Less_3 = 0
   Let #X1Nos_Less_31 = 0
   Let #X1Nos_Less_32 = 0
   Let #X1Days_Less_3 = 0
   Let #X1Days_Less_31 = 0
   Let #X1Days_Less_32 = 0

end-procedure

!
!***********************************************************************
! Procedure: Get-Company-Details                                       *
!            Gets the Company Details that are printed on the form.    *
!***********************************************************************
begin-procedure Get-Company-Details

begin-SELECT
CO.GPSG_REGISTERED_NM
CO.GPSG_CPY_DESCR
CO.GPSG_ADDRESS1
CO.GPSG_ADDRESS2
CO.GPSG_ADDRESS3
CO.POSTAL
CO.PHONE
CO.GPSG_TAX_CONT_ID

  FROM PS_GPSG_IRAS_CPY CO
 WHERE CO.GPSG_CPY_TAX_REF = $Co_Tax_Ref
   AND CO.EFFDT = (SELECT MAX(EFFDT)
                     FROM PS_GPSG_IRAS_CPY
                    WHERE GPSG_CPY_TAX_REF = CO.GPSG_CPY_TAX_REF
                      AND EFFDT <= $PrcsToDt)
end-SELECT

  let $Co_Phone          = &CO.PHONE
  let $Co_Tax_Contact_Id = &CO.GPSG_TAX_CONT_ID
  let $Co_Name           = &CO.GPSG_REGISTERED_NM

  if Ltrim(rtrim($Co_Name,' '),' ')= ''
     let $Co_Name = &CO.GPSG_CPY_DESCR
  else
     let $Co_Name = &CO.GPSG_REGISTERED_NM
  end-if
  uppercase $Co_Name

  let $Co_Address1 = &CO.GPSG_ADDRESS1
  let $Co_Address2 = &CO.GPSG_ADDRESS2
  let $Co_City_Zip = &CO.GPSG_ADDRESS3
  if Ltrim(rtrim(&CO.GPSG_ADDRESS3,' '),' ') = ''
     let $Co_City_Zip = Ltrim(rtrim(&CO.POSTAL,' '),' ') || ' '
  else
     let $Co_City_Zip = Ltrim(rtrim(&CO.GPSG_ADDRESS3,' '),' ') || ', ' || Ltrim(rtrim(&CO.POSTAL,' '),' ')
  end-if

  uppercase $Co_City_Zip

end-procedure
!
!***********************************************************************
!  Procedure: Process-Main                                             *
!             Begin Main Processing Routine                            *
!***********************************************************************
begin-procedure Process-Main
! If User has opted to Delete the rows, We will Delete all existing rows
! for the Transaction Year specified and Recreate them.

  If Ltrim(rtrim($Paygroup,' '),' ') <> ''
     let $PG_Where = 'AND JOB.GP_PAYGROUP = ''' || $Paygroup || ''''
     Do Paygroup-Processing
  else
     let $Emps = 'N'
     begin-SELECT Loops = 1
'Z'
        let $Emps = 'Y'

       FROM PS_GPSG_RC_IRASEMP IE
      WHERE IE.OPRID       = $Prcs_OprID
        AND IE.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
     end-SELECT

     if $Emps = 'Y'
        Do Employee-Processing
     else
        let $PG_Where = ''
        Do Paygroup-Processing
     end-if
  End-if

end-procedure

!
!***********************************************************************
!  Procedure: Paygroup-Processing
!             Retrieve employees from PS_JOB+PS_EMPLOCC_STENDDT where employee belongs to company specified and
!             Paygroup on latest row is the Paygroup specified. Also The latest row for the occurrence should be a
!             Terminated Row. The Latest Row is based on the Range of From Date and To Date Entered.
!***********************************************************************
Begin-Procedure Paygroup-Processing

begin-select
JOB.EMPLID
JJR.BALANCE_GRP_NUM
EMP.HIRE_DT
JOB.EFFDT
JOB.JOBCODE
JOB.SETID_JOBCODE
JOB.GP_PAYGROUP
JOB.COMP_FREQUENCY
JOB.EMPL_RCD
JOB.ACTION
JOB.ACTION_REASON

  Do Initialise-Variables
  Let $Emplid  = Ltrim(rtrim(&JOB.EMPLID, ' '),' ')
  Let $BalGrp = Ltrim(RTrim(&JJR.BALANCE_GRP_NUM, ' '),' ')
  if $BalGrp = ''
     let $BalGrp = ' '
  end-if
  Let #EmplRcd = &JOB.EMPL_RCD
  Let $Jobcode = &JOB.JOBCODE
  Let $SetID_JobCode = &JOB.SETID_JOBCODE

  let $Job_Paygroup = &JOB.GP_PAYGROUP

  Let $Action        = &JOB.ACTION
  Let $Action_Reason = &JOB.ACTION_REASON
  Do Get-Action-Reason
  if Ltrim(rtrim($Action_Reason_Descr,' '),' ') = ''
     Let $Action_Reason_Descr = ' '
  end-if

  if &JOB.COMP_FREQUENCY = 'D'
     Let $CompFreq     = &JOB.COMP_FREQUENCY
  else
     Let $CompFreq     = 'M'
  end-if

  Let $EmplStart_Dt = &EMP.HIRE_DT
  do Convert-To-DTU-Date(&JOB.EFFDT, $EmplEnd_Dt)
  do DTU-Subtract-Days($EmplEnd_Dt, 1, $EmplEnd_Dt)
  do Convert-From-DTU-Date($EmplEnd_Dt, $EmplEnd_Dt)

  Let $EmplJobCommc_Dt = $EmplStart_Dt
  Let $EmplJobCease_Dt = $EmplEnd_Dt

  Do Begin-IR21-Processing

  FROM PS_CITIZENSHIP CTZ
     , PS_JOB JOB
     , PS_JOB_JR JJR
     , PS_EMPLOYMENT EMP

! They must be foreign employees
 WHERE CTZ.DEPENDENT_ID = ' '
   AND CTZ.COUNTRY = 'SGP'
  AND CTZ.CITIZENSHIP_STATUS NOT IN ('1', '2', '5') 

! they must have terminated within the selected period
   AND JOB.EMPLID = CTZ.EMPLID
   AND JOB.ACTION IN ('TER', 'RET', 'LOF', 'TWB', 'TWP')
 !  AND JOB.EFFDT BETWEEN $PrcsFromDt AND $PrcsToDt
  AND JOB.TERMINATION_DT BETWEEN $PrcsFromDt AND $PrcsToDt   

! join to Job Junior to get Balance Group
   AND JJR.EMPLID = JOB.EMPLID
   AND JJR.EMPL_RCD = JOB.EMPL_RCD
   AND JJR.EFFDT = JOB.EFFDT
   AND JJR.EFFSEQ = JOB.EFFSEQ

!  They can't have another job that is still active for the same Balance Group/Tax Reference Num
   AND NOT EXISTS (SELECT 'X'
                     FROM PS_JOB J
                        , PS_JOB_JR JR
                    WHERE J.EMPLID       = JOB.EMPLID
                      AND J.EMPL_RCD    <> JOB.EMPL_RCD
                      AND J.GP_PAYGROUP IN (SELECT GP_PAYGROUP
                                              FROM PS_GP_PYGRP_SGPSG PGS
                                             WHERE PGS.GPSG_CPY_TAX_REF = $Co_Tax_Ref)
                      AND J.EFFDT        = (SELECT MAX(J1.EFFDT)
                                              FROM PS_JOB J1
                                             WHERE J1.EMPLID = J.EMPLID
                                               AND J1.EMPL_RCD = J.EMPL_RCD
                                               AND J1.EFFDT <= JOB.EFFDT)
                      AND J.EFFSEQ       = (SELECT MAX(J1.EFFSEQ)
                                              FROM PS_JOB J1
                                             WHERE J1.EMPLID = J.EMPLID
                                               AND J1.EMPL_RCD = J.EMPL_RCD
                                               AND J1.EFFDT = J.EFFDT)
                      AND J.EMPL_STATUS NOT IN ('D', 'Q', 'R', 'T', 'U', 'V')
                      AND JR.EMPLID      = J.EMPLID
                      AND JR.EMPL_RCD    = J.EMPL_RCD
                      AND JR.EFFDT       = J.EFFDT
                      AND JR.EFFSEQ      = J.EFFSEQ
                      AND JR.BALANCE_GRP_NUM = JJR.BALANCE_GRP_NUM)

! If they had more than one job terminated on that day, we'll use the lowest Empl Rcd
   AND JOB.EMPL_RCD = (SELECT MIN(J1.EMPL_RCD)
                         FROM PS_JOB J1
                        WHERE J1.EMPLID = JOB.EMPLID
                          AND J1.EFFDT  = JOB.EFFDT)

! And just the last Eff Sequence
   AND JOB.EFFSEQ = (SELECT MAX(J1.EFFSEQ)
                       FROM PS_JOB J1
                      WHERE J1.EMPLID = JOB.EMPLID
                        AND J1.EMPL_RCD = JOB.EMPL_RCD
                        AND J1.EFFDT = JOB.EFFDT
                        AND J1.EFFSEQ = JOB.EFFSEQ)

! join to Employment to get the Hire Date
   AND EMP.EMPLID = JOB.EMPLID
   AND EMP.EMPL_RCD = JOB.EMPL_RCD

   [$PG_Where]

ORDER BY JOB.EMPLID, JJR.BALANCE_GRP_NUM

end-select

End-Procedure

!
!***********************************************************************
!  Procedure: Employee-Processing
!***********************************************************************
Begin-Procedure Employee-Processing

begin-select distinct

JOB1.EMPLID
JJR1.BALANCE_GRP_NUM
EMP1.HIRE_DT
JOB1.EFFDT
JOB1.JOBCODE
JOB1.SETID_JOBCODE
JOB1.GP_PAYGROUP
JOB1.COMP_FREQUENCY
JOB1.EMPL_RCD
JOB1.ACTION
JOB1.ACTION_REASON

  Do Initialise-Variables
  Let $Emplid  = Ltrim(rtrim(&JOB1.EMPLID, ' '),' ')
  Let $BalGrp = Ltrim(RTrim(&JJR1.BALANCE_GRP_NUM, ' '),' ')
  if $BalGrp = ''
     let $BalGrp = ' '
  end-if
  Let #EmplRcd = &JOB1.EMPL_RCD
  Let $Jobcode = &JOB1.JOBCODE
  Let $SetID_JobCode = &JOB1.SETID_JOBCODE

  let $Job_Paygroup = &JOB1.GP_PAYGROUP

  Let $Action        = &JOB1.ACTION
  Let $Action_Reason = &JOB1.ACTION_REASON
  Do Get-Action-Reason
  if ltrim(rtrim($Action_Reason_Descr,' '),' ') = ''
     Let $Action_Reason_Descr = ' '
  end-if

  if &JOB1.COMP_FREQUENCY = 'D'
     Let $CompFreq = 'D'
  else
     Let $CompFreq = 'M'
  end-if

  Let $EmplStart_Dt = &EMP1.HIRE_DT
  do Convert-To-DTU-Date(&JOB1.EFFDT, $EmplEnd_Dt)
  do DTU-Subtract-Days($EmplEnd_Dt, 1, $EmplEnd_Dt)
  do Convert-From-DTU-Date($EmplEnd_Dt, $EmplEnd_Dt)

  Let $EmplJobCommc_Dt = $EmplStart_Dt
  Let $EmplJobCease_Dt = $EmplEnd_Dt

  Do Begin-IR21-Processing

  FROM PS_JOB JOB1
     , PS_JOB_JR JJR1
     , PS_GPSG_RC_IRASEMP ICH
     , PS_EMPLOYMENT EMP1

WHERE ICH.OPRID           = $Prcs_OprID
  AND ICH.RUN_CNTL_ID     = $Prcs_Run_Cntl_ID
  AND ICH.EMPLID          = JOB1.EMPLID
  AND ICH.BALANCE_GRP_NUM = JJR1.BALANCE_GRP_NUM
  AND (JOB1.ACTION IN ('TER', 'RET', 'LOF', 'TWB', 'TWP')
    OR NOT (JOB1.GP_PAYGROUP IN (SELECT PGS.GP_PAYGROUP
                                  FROM PS_GP_PYGRP_SGPSG PGS
                                 WHERE PGS.GPSG_CPY_TAX_REF = $Co_Tax_Ref)))
  AND JOB1.EFFDT      = (SELECT MAX(J1.EFFDT)
                           FROM PS_JOB J1
                          WHERE J1.EMPLID   = JOB1.EMPLID
                            AND J1.EMPL_RCD = JOB1.EMPL_RCD)

! join to Job Junior to get Balance Group
   AND JJR1.EMPLID   = JOB1.EMPLID
   AND JJR1.EMPL_RCD = JOB1.EMPL_RCD
   AND JJR1.EFFDT    = JOB1.EFFDT
   AND JJR1.EFFSEQ   = JOB1.EFFSEQ

!  They can't have another job that is still active for the same Balance Group/Tax Reference Num
   AND NOT EXISTS (SELECT 'X'
                     FROM PS_JOB J
                        , PS_JOB_JR JR
                    WHERE J.EMPLID       = JOB1.EMPLID
                      AND J.EMPL_RCD    <> JOB1.EMPL_RCD
                      AND J.GP_PAYGROUP IN (SELECT GP_PAYGROUP
                                              FROM PS_GP_PYGRP_SGPSG PGS
                                             WHERE PGS.GPSG_CPY_TAX_REF = $Co_Tax_Ref)
                      AND J.EFFDT = (SELECT MAX(J1.EFFDT)
                                       FROM PS_JOB J1
                                      WHERE J1.EMPLID = J.EMPLID
                                        AND J1.EMPL_RCD = J.EMPL_RCD
                                        AND J1.EFFDT <= JOB1.EFFDT)
                      AND J.EFFSEQ = (SELECT MAX(J1.EFFSEQ)
                                        FROM PS_JOB J1
                                       WHERE J1.EMPLID = J.EMPLID
                                         AND J1.EMPL_RCD = J.EMPL_RCD
                                         AND J1.EFFDT = J.EFFDT)
                      AND J.EMPL_STATUS NOT IN ('D', 'Q', 'R', 'T', 'U', 'V')
                      AND JR.EMPLID = J.EMPLID
                      AND JR.EMPL_RCD = J.EMPL_RCD
                      AND JR.EFFDT = J.EFFDT
                      AND JR.EFFSEQ = J.EFFSEQ
                      AND JR.BALANCE_GRP_NUM = JJR1.BALANCE_GRP_NUM)

! If they had more than one job terminated on that day, we'll use the lowest Empl Rcd
   AND JOB1.EMPL_RCD  = (SELECT MIN(J1.EMPL_RCD)
                           FROM PS_JOB J1
                          WHERE J1.EMPLID = JOB1.EMPLID
                            AND J1.EFFDT  = JOB1.EFFDT)

! And just the last Eff Sequence
   AND JOB1.EFFSEQ = (SELECT MAX(J1.EFFSEQ)
                        FROM PS_JOB J1
                       WHERE J1.EMPLID   = JOB1.EMPLID
                         AND J1.EMPL_RCD = JOB1.EMPL_RCD
                         AND J1.EFFDT    = JOB1.EFFDT
                         AND J1.EFFSEQ   = JOB1.EFFSEQ)

! join to Employment to get the Hire Date
   AND EMP1.EMPLID = JOB1.EMPLID
   AND EMP1.EMPL_RCD = JOB1.EMPL_RCD

ORDER BY JOB1.EMPLID, JJR1.BALANCE_GRP_NUM

End-SELECT

End-Procedure


!
!***********************************************************************
!  Procedure: Begin-IR21-Processing
!             Common Process for IR21 Processing
!***********************************************************************
begin-procedure Begin-IR21-Processing

   if $Recreate = 'Y'
! Delete rows from IR21 Header Table

      Begin-SQL
         DELETE FROM PS_GPSG_IR21_HDR
          WHERE GPSG_TAX_YEAR    = #TaxYear
            AND GPSG_CPY_TAX_REF = $Co_Tax_Ref
            AND EMPLID           = $Emplid
            AND BALANCE_GRP_NUM  = $BalGrp
      End-SQL

! Delete rows from IR21 Detail Table
      Begin-SQL
         DELETE FROM PS_GPSG_IR21_DTL
          WHERE GPSG_TAX_YEAR    = #TaxYear
            AND GPSG_CPY_TAX_REF = $Co_Tax_Ref
            AND EMPLID           = $Emplid
            AND BALANCE_GRP_NUM  = $BalGrp
      End-SQL

      If $PrcsApndx1 = 'Y'

! Delete rows from IR21 Appendix 1 table
         Begin-SQL
            DELETE FROM PS_GPSG_IR21_APP1
             WHERE GPSG_TAX_YEAR    = #TaxYear
               AND GPSG_CPY_TAX_REF = $Co_Tax_Ref
               AND EMPLID           = $Emplid
               AND BALANCE_GRP_NUM  = $BalGrp
         End-SQL
      End-if
  End-if

! Delete rows from IR21 Appendix Benefit Table
  Begin-SQL
     DELETE FROM PS_GPSG_IR21_BNF
      WHERE GPSG_TAX_YEAR    = #TaxYear
        AND GPSG_CPY_TAX_REF = $Co_Tax_Ref
        AND EMPLID           = $Emplid
        AND BALANCE_GRP_NUM  = $BalGrp
  End-SQL

! Delete rows from IR21 Child Details Table
  Begin-SQL
     DELETE FROM PS_GPSG_IR21_CHILD
      WHERE GPSG_TAX_YEAR    = #TaxYear
        AND GPSG_CPY_TAX_REF = $Co_Tax_Ref
        AND EMPLID           = $Emplid
        AND BALANCE_GRP_NUM  = $BalGrp
  End-SQL


  do Personal-Details

  clear-array name = Apndx1Benef

! We will check if IR8a has been created for Current Year. If yes, we will use the IR8A values, else we will search
! The Balances Table

! The Retrieval Check and retrieve Process will be done for Current and 2 prior Years. The Recreate option must be Yes
! to check on previous Years.

  Let #PrcsYear = 0   ! Variable to control Process for Current Year
  Let #WrkTaxYear = #TaxYear

  Do Check-Get-IR8A-Values

!    Process Current Balances from Balances Tables

  Let #Tax_Year = #TaxYear

  do Get-Tax-Year-Start-End

!    The #WrkTaxYear will change to the Tax year for which we want to get balances. Since the variables are the same,
!    we must assign the values to our necessary variables, before calling the routine again


  Let #PrcsYear = 1   ! Variable to control Process for Current Year

  Let #WrkTaxYear = #TaxYear - 1

  Do Check-Get-IR8A-Values

  Let #PrcsYear = 2   ! Variable to control Process for Current Year

  Let #WrkTaxYear = #TaxYear - 2

  Do Check-Get-IR8A-Values

  do Ins-Update-IR21

  if $PrcsApndx1 = 'Y'     ! If Flag is set to Yes, we need to process Appendix 1 data.
     Let #PrcsYear = 0     ! Variable to control Process for Current Year
     Let #WrkTaxYear = #TaxYear
     Let $CurrYrFound = 'N'
     Do Process-Appendix1

     Let #PrcsYear = 1     ! Variable to control Process for Current Year
     Let #WrkTaxYear = #TaxYear - 1
     Let $PrevYr1Found = 'N'
     Do Process-Appendix1

     Let #PrcsYear = 2     ! Variable to control Process for Current Year
     Let #WrkTaxYear = #TaxYear - 2
     Let $PrevYr2Found = 'N'
     Do Process-Appendix1

     do Ins-Update-Appendix1
  End-if                   ! If Recreate is Yes for Appendix 1

End-Procedure

!
!***********************************************************************
!  Procedure: Personal-Details
!***********************************************************************
begin-procedure Personal-Details

begin-select
PN.NAME
PN.NAME_PREFIX
PA.ADDRESS1
PA.ADDRESS2
PA.CITY
PA.POSTAL
PA.COUNTRY
PA.STATE
PI.NATIONAL_ID_TYPE
PI.NATIONAL_ID
PD.BIRTHDATE
PE.SEX
PE.MAR_STATUS
CN.DESCRSHORT

  let $EmplAddr1 = ltrim(Rtrim(Substr(&PA.ADDRESS1, 1, 30), ' '),' ')
  let $EmplAddr2 = Substr(Rtrim(Substr(&PA.ADDRESS2, 1, 20), ' ') || ' ' ||
                   Ltrim(RTrim(Substr(&PA.CITY, 1, 20), ' '),' ') || ' ' || &PA.STATE, 1 ,30)

  let $EmplAddr3 = Ltrim(rtrim(Substr(&CN.DESCRSHORT, 1, 10), ' '),' ') || ' ' || &PA.POSTAL

  uppercase $EmplAddr3

  do Get-Phone

  let $SP_Where = ' '
  let $Perm_Status_Dt = ''
  do Get-Citizenship-Details

  let $Nat_ID_Type = Ltrim(RTrim(&PI.NATIONAL_ID_TYPE, ' '),' ')
  evaluate $Nat_ID_Type

     when = 'IC'   ! Nat. Registration ID Card
         let $EmplNationality = 'Singapore Citizen '

     when = 'PR'   ! Permanent Residency Number
     when = 'MI'   ! Malaysian NRIC
         let $EmplNationality = 'Permanent Resident'

     when-other
         let $EmplNationality = $Cit_Country

  end-evaluate

  Do Get-JobCode-Descr
  do Get-Spouse-Details

  do Get-Child-Details
  do Salary-Details


  FROM PS_PERSON_NAME PN
     , PS_PERSON_ADDR_HOM PA
     , PS_PERS_NID PI
     , PS_PERSON PD
     , PS_PERS_DATA_EFFDT PE
     , PS_COUNTRY_TBL CN

 WHERE PN.EMPLID = $EmplId
   AND PA.EMPLID = $EmplId
   AND PI.EMPLID = $Emplid
   AND PI.COUNTRY = 'SGP'
   AND PI.PRIMARY_NID = 'Y'
   AND PD.EMPLID = $Emplid
   AND PE.EMPLID = $Emplid
   AND PE.EFFDT  = (SELECT MAX(EFFDT)
                      FROM PS_PERS_DATA_EFFDT
                     WHERE EMPLID = $Emplid
                       AND EFFDT <= $AsOfToday)
   AND CN.COUNTRY = PA.COUNTRY


end-select

end-procedure
!
!***********************************************************************
!  Procedure: Get-Child-Details
!***********************************************************************
begin-procedure Get-Child-Details

  let #ChildCount = 0
  clear-array name = ChildArray

begin-select loops=4
DBN.NAME
DBB.BIRTHDATE
DBE.SEX

  put &DBE.SEX  into ChildArray (#ChildCount) Sex
  put &DBN.NAME into ChildArray (#ChildCount) Name
  put &DBB.BIRTHDATE into ChildArray (#ChildCount) BirthDate

  Let $Emplr_School = ' '

  do Convert-To-DTU-Date(&DBB.BIRTHDATE, $dtu_date)
  do Convert-To-DTU-Date($AsOfToday, $Today)
  do dtu-diff-years($dtu_date, $Today, #dtu_years)
  if #dtu_years >= 16
     put $Emplr_School into ChildArray (#ChildCount) School
  end-if

  let #ChildCount = #ChildCount + 1

  FROM PS_DEP_BEN DBB, PS_DEP_BEN_NAME DBN, PS_DEP_BEN_EFF DBE
 WHERE DBB.EMPLID = $EmplId
   AND DBB.EMPLID = DBN.EMPLID
   AND DBB.EMPLID = DBE.EMPLID
   AND DBN.EMPLID = DBE.EMPLID
   AND DBB.DEPENDENT_BENEF = DBN.DEPENDENT_BENEF
   AND DBB.DEPENDENT_BENEF = DBE.DEPENDENT_BENEF
   AND DBN.DEPENDENT_BENEF = DBE.DEPENDENT_BENEF
   AND DBE.RELATIONSHIP = 'C'
   AND DBE.DEP_BENEF_TYPE IN ('D', 'O')
   AND DBN.EFFDT = (SELECT MAX(DBN1.EFFDT) FROM PS_DEP_BEN_NAME DBN1 WHERE
   DBN1.EMPLID = DBN.EMPLID AND DBN1.DEPENDENT_BENEF = DBN.DEPENDENT_BENEF
   AND DBN1.EFFDT <= $PrcsToDt)
   AND DBE.EFFDT = (SELECT MAX(DBE1.EFFDT) FROM PS_DEP_BEN_EFF DBE1 WHERE
   DBE1.EMPLID = DBE.EMPLID AND DBE1.DEPENDENT_BENEF = DBE.DEPENDENT_BENEF
   AND DBE1.EFFDT <= $PrcsToDt)
 ORDER BY DBB.BIRTHDATE ASC
end-select

end-procedure

!
!***********************************************************************
!  Procedure: Get-Spouse-Details
!***********************************************************************
begin-procedure Get-Spouse-Details

begin-select
DB.DEPENDENT_BENEF
DN.NAME
DB.BIRTHDATE
DE.MAR_STATUS_DT

  let $SP_Where = Ltrim(rtrim(&DB.DEPENDENT_BENEF, ' '),' ')
  do Get-Citizenship-Details

  let $SpouseNationality = $Cit_Country 
  let $SpouseName        = substr(&DN.NAME, 1, 30)
  do Get-Spouse-ID
  let $SpouseBirthDate   = &DB.BIRTHDATE
  let $Marital_Dt        = &DE.MAR_STATUS_DT

FROM PS_DEP_BEN DB, PS_DEP_BEN_NAME DN, PS_DEP_BEN_EFF DE
WHERE DB.EMPLID = $EmplId
AND DB.EMPLID = DN.EMPLID
AND DB.EMPLID = DE.EMPLID
AND DN.EMPLID = DE.EMPLID
AND DB.DEPENDENT_BENEF = DN.DEPENDENT_BENEF
AND DB.DEPENDENT_BENEF = DE.DEPENDENT_BENEF
AND DN.DEPENDENT_BENEF = DE.DEPENDENT_BENEF
AND DE.RELATIONSHIP = 'SP'
AND DN.EFFDT = (SELECT MAX(DN1.EFFDT) FROM PS_DEP_BEN_NAME DN1 WHERE
DN1.EMPLID = DN.EMPLID AND DN1.DEPENDENT_BENEF = DN.DEPENDENT_BENEF
AND DN1.EFFDT <= $PrcsToDt)
AND DE.EFFDT = (SELECT MAX(DE1.EFFDT) FROM PS_DEP_BEN_EFF DE1 WHERE
DE1.EMPLID = DE.EMPLID AND DE1.DEPENDENT_BENEF = DE.DEPENDENT_BENEF
AND DE1.EFFDT <= $PrcsToDt)
end-select

end-procedure
!
!***********************************************************************
!  Procedure: Get-Spouse-ID
!***********************************************************************
begin-procedure Get-Spouse-ID

  let $SpouseID = ' '
  Let $Cit_Country = ' '

begin-select
DBN.NATIONAL_ID
DBN.NATIONAL_ID_TYPE

     let $SpouseID = &DBN.NATIONAL_ID

     let $Nat_ID_Type = Ltrim(RTrim(&DBN.NATIONAL_ID_TYPE, ' '),' ')
      ! do Get-Citizenship-Details

     evaluate $Nat_ID_Type

        when = 'IC'   ! Nat. Registration ID Card
           let $SpouseNationality = 'Singapore Citizen '

        when = 'PR'   ! Permanent Residency Number
        when = 'MI'   ! Malaysian NRIC
            let $SpouseNationality = 'Permanent Resident'

        when-other
          do Get-Citizenship-Details

         let $SpouseNationality = $Cit_Country

     end-evaluate


  FROM PS_DEP_BENEF_NID DBN
 WHERE DBN.EMPLID = $Emplid
   AND DBN.DEPENDENT_BENEF = &DB.DEPENDENT_BENEF
   AND DBN.PRIMARY_NID = 'Y'

end-select

end-procedure

!
!***********************************************************************
!  Procedure: Get-Citizenship-Details
!             Get the Citizenship of the Employee / Spouse
!***********************************************************************
begin-procedure Get-Citizenship-Details

  let $Cit_Country = ' '

  begin-SELECT
CZN.CITIZENSHIP_STATUS
CZN.PERM_STATUS_DT_SGP
     if &CZN.CITIZENSHIP_STATUS = '1' or &CZN.CITIZENSHIP_STATUS = '2' or &CZN.CITIZENSHIP_STATUS = '5'
        let $Cit_Country = 'SGP'
     else
        let $Cit_Country = ' '
     end-if
     let $Perm_Status_Dt = &CZN.PERM_STATUS_DT_SGP

   FROM PS_CITIZENSHIP CZN
  WHERE CZN.EMPLID = $Emplid
    AND CZN.DEPENDENT_ID = $SP_where
    AND CZN.COUNTRY = 'SGP'
  end-SELECT

  if $Cit_Country = ' '
     begin-SELECT
CZP.DT_ISSUED
CZP.COUNTRY_PASSPORT
        let $Cit_Country = &CZP.COUNTRY_PASSPORT

  FROM PS_CITIZEN_PSSPRT CZP
 WHERE CZP.EMPLID = $Emplid
   AND CZP.DEPENDENT_ID = $SP_where
 ORDER BY CZP.DT_ISSUED
     end-SELECT
  end-if

  if $Cit_Country = ' '
     begin-SELECT
CZN1.COUNTRY
        let $Cit_Country = &CZN1.COUNTRY

      FROM PS_CITIZENSHIP CZN1
     WHERE CZN1.EMPLID       = $Emplid
       AND CZN1.DEPENDENT_ID = $SP_where
       AND CZN1.COUNTRY     <> 'SGP'
     end-SELECT
  end-if

  IF $Cit_Country <> ' '
     begin-SELECT
CTB.DESCR
        let $Cit_Country = &CTB.DESCR

      FROM PS_COUNTRY_TBL CTB
     WHERE CTB.COUNTRY = $Cit_Country
     end-SELECT
  end-if

end-procedure

!
!***********************************************************************
!  Procedure: Get-JobCode-Descr
!             Get Employee Job Designation
!***********************************************************************
begin-procedure Get-JobCode-Descr

begin-select
JC.DESCR
     let $JobCodeDescr = ltrim(rtrim(&JC.DESCR, ' '),' ')

  FROM PS_JOBCODE_TBL JC
 WHERE JC.JOBCODE = $JobCode
   AND JC.SETID   = $SetID_JobCode
   AND JC.EFFDT   = (SELECT MAX(JC1.EFFDT)
                       FROM PS_JOBCODE_TBL JC1
                      WHERE JC1.JOBCODE = JC.JOBCODE
                        AND JC1.SETID   = JC.SETID
                        AND JC1.EFFDT  <= $PrcsToDt)
end-select

end-procedure

!
!***********************************************************************
!  Procedure: Get-Phone
!             Get the Home Phone Number of the Employee
!***********************************************************************
begin-procedure Get-Phone

  let $PPhone = ' '

  begin-select
PP.PHONE
     let $PPhone = &PP.PHONE

  FROM PS_PERSON_PHONE PP

 WHERE PP.EMPLID   = $EmplId
  end-select

end-procedure

!
!***********************************************************************
!  Procedure: Salary-Details                                           *
!             Retrieve Salary Details to be reported on Form IR21      *
!***********************************************************************
begin-procedure Salary-Details

begin-select
MIN(PS.SEG_BGN_DT)    &From_Dt
MAX(PS.SEG_END_DT)    &End_Dt
MAX(PP.PYMT_DT)       &Payment_Dt
SUM(PS.PIN_GROSS_VAL) &Total_Gross
MIN(PP.RUN_TYPE)      &Pay_Run_Type

  let #Total_Gross     =  &Total_Gross
  let $SalaryPaid_Dt   =  &Payment_Dt
  do Format-DateTime (&From_Dt, $PayBegin_Dt, {DEFDMY}, '', '')
  do Format-DateTime (&End_Dt, $PayEnd_Dt, {DEFDMY}, '', '')

  Let $PayPeriod       = $PayBegin_Dt || ' - ' || $PayEnd_Dt

  FROM PS_GP_PYE_SEG_STAT PS
     , PS_GP_PYE_PRC_STAT PP

 WHERE PP.EMPLID          = $EmplId
   AND PP.CAL_RUN_ID      = (SELECT DISTINCT PP1.CAL_RUN_ID
                               FROM PS_GP_PYE_PRC_STAT PP1
                              WHERE PP1.EMPLID     = $EmplId
                                AND PP1.PRC_ORD_TS = (SELECT MAX(PP2.PRC_ORD_TS)
                                                        FROM PS_GP_PYE_PRC_STAT PP2
                                                       WHERE PP2.EMPLID     = $EmplId
                                                         AND PP2.CALC_TYPE  = 'P'))
   AND PP.GP_PAYGROUP    IN (SELECT PG.GP_PAYGROUP
                               FROM PS_GP_PYGRP_SGPSG PG
                              WHERE PG.GPSG_CPY_TAX_REF = $Co_Tax_Ref)
   AND PP.RSLT_VER_NUM    = 1
   AND PP.RSLT_REV_NUM    = 1
   AND PP.CALC_TYPE       = 'P'
   AND PP.SEL_ACTION      = 'C'
   AND PS.EMPLID          = PP.EMPLID
   AND PS.CAL_RUN_ID      = PP.CAL_RUN_ID
   AND PS.EMPL_RCD        = PP.EMPL_RCD
   AND PS.GP_PAYGROUP     = PP.GP_PAYGROUP
   AND PS.CAL_ID          = PP.CAL_ID
   AND PS.ORIG_CAL_RUN_ID = PP.ORIG_CAL_RUN_ID
   AND PS.PYE_CALC_STAT  >= '50'

end-select

  do Get-Bank-Details

end-procedure

!
!***********************************************************************
!  Procedure: Get-Bank-Details                                         *
!             Retrieve Bank Details where employee salary was posted   *
!***********************************************************************
begin-procedure Get-Bank-Details

begin-select loops=1
ND.EMPL_RCD
BT.BANK_NM

    let $PayBankName = ltrim(rtrim(substr(&BT.BANK_NM,1,30), ' '),' ')

  FROM PS_GP_NET_DIST_DTL ND
     , PS_PYE_BANKACCT PBA
     , PS_BANK_EC_TBL BT

 WHERE ND.EMPLID           = $EmplId
   AND ND.RUN_TYPE         = &Pay_Run_Type
   AND ND.EFFDT            = (SELECT MAX(ND1.EFFDT)
                                FROM PS_GP_NET_DIST_DTL ND1
                               WHERE ND1.EMPLID   = $EmplId
                                 AND ND1.EMPL_RCD = ND.EMPL_RCD
                                 AND ND1.RUN_TYPE = &Pay_Run_Type
                                 AND ND1.EFFDT   <= &Payment_Dt)
   AND ND.PRIMARY_ACCT_IND = 'Y'
   AND PBA.EMPLID          = $Emplid
   AND PBA.ACCOUNT_ID      = ND.ACCOUNT_ID
   AND BT.COUNTRY_CD       = PBA.COUNTRY_CD
   AND BT.BANK_CD          = PBA.BANK_CD

ORDER BY ND.EMPL_RCD ASC

end-select
end-procedure


!
!***********************************************************************
!  Procedure: Check-Get-IR8A-Values                                    *
!             Retrieve IR8A Values                                     *
!***********************************************************************
begin-procedure Check-Get-IR8A-Values


Begin-SELECT
I8A.EMPLID
I8A.BALANCE_GRP_NUM
I8A.GPSG_CPY_TAX_REF
I8A.GPSG_TAX_YEAR
I8A.HIRE_DT                  ! Start Date
I8A.TERMINATION_DT           ! End Date
I8A.GPSG_8A_GROSS            ! Gross Salary
I8A.GPSG_8A_NC_BONUS         ! Bonus Amount for Non-Contractual
I8A.GPSG_8A_CNT_BONUS        ! Bonus Amount for Contractual
I8A.GPSG_BONUS_DT            ! Bonus Declaration Date
I8A.GPSG_DIR_FEE_DT          ! Director's Fees
I8A.GPSG_8A_DIR_FEE          ! Director's Fees Approved Date
I8A.GPSG_8A_COMMSN           ! Gross Commission
I8A.GPSG_8A_ALLOW_TOT        ! Allowances
I8A.GPSG_8A_GRATUITY         ! Gratuity
I8A.GPSG_8A_EXGRATIA         ! Ex gratia
I8A.GPSG_8A_NOTICE           ! Payment-In-Lieu Of Notice
I8A.GPSG_8A_LOSS_OFFIC       ! Compensation for Loss of Office
I8A.GPSG_8A_RETIRE           ! Retirement Benefits
I8A.GPSG_RETIRE_FUND         ! Retirement Fund Name
I8A.GPSG_8A_OS_PENSION       ! Employer Contribution to Overseas Fund
I8A.GPSG_OS_PENS_FUND        ! Overseas Fund Name
I8A.GPSG_CPF_VOL_ER          ! Employer Voluntary Contribution to CPF
I8A.GPSG_8A_SHARE_GAIN       ! Gains & Profits from Share Options
I8A.GPSG_IR21_ESOP_IND       ! ESOP Applicable
I8A.GPSG_8A_BIK              ! Benefits in Kind
I8A.GPSG_CPF_COMP_EE         ! Employee's Compulsory Contribution
I8A.GPSG_PENS_FUND           ! Employee's Compulsory Contribution Fund Name
I8A.GPSG_CPF_VOL_EE          ! Employee's Voluntary Contribution
I8A.GPSG_8A_DONATIONS        ! Donation Amount
I8A.GPSG_8A_PENSION          ! Pension Amount
I8A.GPSG_8A_MBMF_IND         ! MBMF Contributed
I8A.GPSG_8A_CCHEST_IND       ! CCHEST Contributed
I8A.GPSG_8A_SINDA_IND        ! SINDA Contributed
I8A.GPSG_8A_CDAC_IND         ! CDAC Contributed
I8A.GPSG_8A_ECF_IND          ! ECF Contributed
I8A.GPSG_8A_YMF_IND          ! YMF Contributed
I8A.GPSG_8A_MBF_IND          ! MBF Contributed
I8A.GPSG_TOTAL_MBMF          ! MBF Amount


    If #PrcsYear = 0
       Let $CYYearStart        = &I8A.HIRE_DT
       Let $CYYearEnd          = &I8A.TERMINATION_DT
       Let $CYBonusDate        = &I8A.GPSG_BONUS_DT
       Let $CYDirFeeDate       = &I8A.GPSG_DIR_FEE_DT

       Let $CYMBMFPaid         = &I8A.GPSG_8A_MBMF_IND
       Let $CYCCHESTPaid       = &I8A.GPSG_8A_CCHEST_IND
       Let $CYSINDAPaid        = &I8A.GPSG_8A_SINDA_IND
       Let $CYCDACPaid         = &I8A.GPSG_8A_CDAC_IND
       Let $CYECFPaid          = &I8A.GPSG_8A_ECF_IND
       Let $CYYMFPaid          = &I8A.GPSG_8A_YMF_IND

       Let $CYEmplMandFundName = &I8A.GPSG_PENS_FUND
       Let $CYESOPApplic       = &I8A.GPSG_IR21_ESOP_IND
       Let $CYOsEmplrFundName  = &I8A.GPSG_OS_PENS_FUND

       Let #CYRetirement       = &I8A.GPSG_8A_RETIRE
       Let $CYRetireFundName   = &I8A.GPSG_RETIRE_FUND

       Let #CYPension          = &I8A.GPSG_8A_PENSION
       Let #CYOsEmployerCPF    = &I8A.GPSG_8A_OS_PENSION
       Let #CYVolEmplrCPF      = &I8A.GPSG_CPF_VOL_ER
       Let #CYShareOpt         = &I8A.GPSG_8A_SHARE_GAIN
       Let #CYBenefInKind      = &I8A.GPSG_8A_BIK

       Let #CYEmplMandCPFDed   = &I8A.GPSG_CPF_COMP_EE
       Let #CYEmplVolCPFDed    = 0
       Let #CYDonation         = &I8A.GPSG_8A_DONATIONS
       Let #CYMBF              = &I8A.GPSG_TOTAL_MBMF

       Let #CYCntrctlBonus    = &I8A.GPSG_8A_CNT_BONUS
       Let #CYNonCntrctlBonus = &I8A.GPSG_8A_NC_BONUS

       Let #CYGrossSalary     = &I8A.GPSG_8A_GROSS
       Let #CYCommission      = &I8A.GPSG_8A_COMMSN
       Let #CYOfficeLoss      = &I8A.GPSG_8A_LOSS_OFFIC
       Let #CYYearNotice      = &I8A.GPSG_8A_NOTICE
       Let #CYGratuity        = &I8A.GPSG_8A_GRATUITY + &I8A.GPSG_8A_EXGRATIA

       Let #CYDirectorFee     = &I8A.GPSG_8A_DIR_FEE
       Let #CYAllowance       = &I8A.GPSG_8A_ALLOW_TOT

       if Ltrim(rtrim($CYYearStart,' '),' ') = ''

          do Convert-To-DTU-Date ($EmplStart_Dt, $DTU_Start_Dt)
          do dtu-parse-date ($DTU_Start_Dt,#Diff_Yr, #Diff_Mth, #Diff_Day)

          if #WrkTaxYear <> #Diff_Yr

             Let $WrkTaxYear    = edit(#WrkTaxYear,'9999')
             Let $CurrYearStart = $WrkTaxYear || '0101'
             do Format-DateTime ($CurrYearStart, $CYYearStart, {DEFCMP}, '', 'native')

          else

             Let $CYYearStart  = $EmplStart_Dt

          End-if

       End-if

       if Ltrim(rtrim($CYYearEnd,' '),' ') = ''
          Let $CYYearEnd    = $EmplEnd_Dt
       End-if

    End-if

    If #PrcsYear = 1

       Let $P1YearStart        = &I8A.HIRE_DT
       Let $P1YearEnd          = &I8A.TERMINATION_DT
       Let $P1BonusDate        = &I8A.GPSG_BONUS_DT
       Let $P1DirFeeDate       = &I8A.GPSG_DIR_FEE_DT

       Let $P1MBMFPaid         = &I8A.GPSG_8A_MBMF_IND
       Let $P1CCHESTPaid       = &I8A.GPSG_8A_CCHEST_IND
       Let $P1SINDAPaid        = &I8A.GPSG_8A_SINDA_IND
       Let $P1CDACPaid         = &I8A.GPSG_8A_CDAC_IND
       Let $P1ECFPaid          = &I8A.GPSG_8A_ECF_IND
       Let $P1YMFPaid          = &I8A.GPSG_8A_YMF_IND
       Let $P1EmplMandFundName = &I8A.GPSG_PENS_FUND
       Let $P1ESOPApplic       = &I8A.GPSG_IR21_ESOP_IND
       Let $P1OsEmplrFundName  = &I8A.GPSG_OS_PENS_FUND

       Let #P1Retirement       = &I8A.GPSG_8A_RETIRE
       Let $P1RetireFundName   = &I8A.GPSG_RETIRE_FUND
       Let #P1Pension          = &I8A.GPSG_8A_PENSION
       Let #P1OsEmployerCPF    = &I8A.GPSG_8A_OS_PENSION
       Let #P1VolEmplrCPF      = &I8A.GPSG_CPF_VOL_ER
       Let #P1ShareOpt         = &I8A.GPSG_8A_SHARE_GAIN
       Let #P1BenefInKind      = &I8A.GPSG_8A_BIK

       Let #P1EmplMandCPFDed   = &I8A.GPSG_CPF_COMP_EE
       Let #P1EmplVolCPFDed    = 0
       Let #P1Donation         = &I8A.GPSG_8A_DONATIONS
       Let #P1MBF              = &I8A.GPSG_TOTAL_MBMF

       Let #P1CntrctlBonus    = &I8A.GPSG_8A_CNT_BONUS
       Let #P1NonCntrctlBonus = &I8A.GPSG_8A_NC_BONUS

       Let #P1GrossSalary     = &I8A.GPSG_8A_GROSS
       Let #P1Commission      = &I8A.GPSG_8A_COMMSN
       Let #P1OfficeLoss      = &I8A.GPSG_8A_LOSS_OFFIC
       Let #P1YearNotice      = &I8A.GPSG_8A_NOTICE
       Let #P1Gratuity        = &I8A.GPSG_8A_GRATUITY + &I8A.GPSG_8A_EXGRATIA

       Let #P1DirectorFee     = &I8A.GPSG_8A_DIR_FEE
       Let #P1Allowance       = &I8A.GPSG_8A_ALLOW_TOT

       if Ltrim(rtrim($P1YearStart,' '),' ') = ''

          do Convert-To-DTU-Date ($EmplStart_Dt, $DTU_Start_Dt)
          do dtu-parse-date ($DTU_Start_Dt,#Diff_Yr, #Diff_Mth, #Diff_Day)

          if #WrkTaxYear <> #Diff_Yr

             Let $WrkTaxYear    = edit(#WrkTaxYear,'9999')
             Let $P1YearStart = $WrkTaxYear || '0101'
             do Format-DateTime ($P1YearStart, $P1YearStart, {DEFCMP}, '', 'native')
          else
             Let $P1YearStart  = $EmplStart_Dt
             do Format-DateTime ($P1YearStart, $P1YearStart, {DEFCMP}, '', 'native')
          End-if
       End-if

       if Ltrim(rtrim($P1YearEnd,' '),' ') = ''
          Let $WrkTaxYear  = edit(#WrkTaxYear,'9999')
          Let $P1YearEnd   = $WrkTaxYear || '1231'
          do Format-DateTime ($P1YearEnd, $P1YearEnd, {DEFCMP}, '', 'native')

       End-if

    End-if

    If #PrcsYear = 2

       Let $P2YearStart        = &I8A.HIRE_DT
       Let $P2YearEnd          = &I8A.TERMINATION_DT
       Let $P2BonusDate        = &I8A.GPSG_BONUS_DT
       Let $P2DirFeeDate       = &I8A.GPSG_DIR_FEE_DT

       Let $P2MBMFPaid         = &I8A.GPSG_8A_MBMF_IND
       Let $P2CCHESTPaid       = &I8A.GPSG_8A_CCHEST_IND
       Let $P2SINDAPaid        = &I8A.GPSG_8A_SINDA_IND
       Let $P2CDACPaid         = &I8A.GPSG_8A_CDAC_IND
       Let $P2ECFPaid          = &I8A.GPSG_8A_ECF_IND
       Let $P2YMFPaid          = &I8A.GPSG_8A_YMF_IND
       Let $P2EmplMandFundName = &I8A.GPSG_PENS_FUND
       Let $P2ESOPApplic       = &I8A.GPSG_IR21_ESOP_IND
       Let $P2OsEmplrFundName  = &I8A.GPSG_OS_PENS_FUND

       Let #P2Retirement       = &I8A.GPSG_8A_RETIRE
       Let $P2RetireFundName   = &I8A.GPSG_RETIRE_FUND
       Let #P2Pension          = &I8A.GPSG_8A_PENSION
       Let #P2OsEmployerCPF    = &I8A.GPSG_8A_OS_PENSION
       Let #P2VolEmplrCPF      = &I8A.GPSG_CPF_VOL_ER
       Let #P2ShareOpt         = &I8A.GPSG_8A_SHARE_GAIN
       Let #P2BenefInKind      = &I8A.GPSG_8A_BIK

       Let #P2EmplMandCPFDed   = &I8A.GPSG_CPF_COMP_EE
       Let #P2EmplVolCPFDed    = &I8A.GPSG_CPF_VOL_EE
       Let #P2Donation         = &I8A.GPSG_8A_DONATIONS

       Let #P2CntrctlBonus    = &I8A.GPSG_8A_CNT_BONUS
       Let #P2NonCntrctlBonus = &I8A.GPSG_8A_NC_BONUS

       Let #P2GrossSalary     = &I8A.GPSG_8A_GROSS
       Let #P2Commission      = &I8A.GPSG_8A_COMMSN
       Let #P2OfficeLoss      = &I8A.GPSG_8A_LOSS_OFFIC
       Let #P2YearNotice      = &I8A.GPSG_8A_NOTICE
       Let #P2Gratuity        = &I8A.GPSG_8A_GRATUITY + &I8A.GPSG_8A_EXGRATIA

       Let #P2DirectorFee     = &I8A.GPSG_8A_DIR_FEE
       Let #P2Allowance       = &I8A.GPSG_8A_ALLOW_TOT

       if Ltrim(rtrim($P2YearStart,' '),' ') = ''

          do Convert-To-DTU-Date ($EmplStart_Dt, $DTU_Start_Dt)
          do dtu-parse-date ($DTU_Start_Dt,#Diff_Yr, #Diff_Mth, #Diff_Day)

          if #WrkTaxYear <> #Diff_Yr

             Let $WrkTaxYear    = edit(#WrkTaxYear,'9999')
             Let $P2YearStart = $WrkTaxYear || '0101'
             do Format-DateTime ($P2YearStart, $P2YearStart, {DEFCMP}, '', 'native')

          End-if
       End-if

       if Ltrim(rtrim($P2YearEnd,' '),' ') = ''

          Let $P2YearEnd = $WrkTaxYear || '1231'
          do Format-DateTime ($P2YearEnd, $P2YearEnd, {DEFCMP}, '', 'native')

       End-if

    End-if

  FROM PS_GPSG_IR8A_FORM I8A
    WHERE I8A.EMPLID           = $Emplid
     AND  I8A.BALANCE_GRP_NUM  = $BalGrp
     AND  I8A.GPSG_TAX_YEAR    = #WrkTaxYear
     AND  I8A.GPSG_CPY_TAX_REF = $Co_Tax_Ref
End-SELECT
End-Procedure
!
!***********************************************************************
!  Procedure: Ins-Update-Appendix1                                     *
!             Insert / Update Existing Appendix 1 Data                 *
!***********************************************************************
Begin-Procedure Ins-Update-Appendix1

  Let $AX1RowFound = 'N'

Begin-SELECT
'XX'
    Let $AX1RowFound = 'Y'

    FROM PS_GPSG_IR21_APP1 AX1CHK
   WHERE AX1CHK.EMPLID           = $Emplid
     AND AX1CHK.BALANCE_GRP_NUM  = $BalGrp
     AND AX1CHK.GPSG_TAX_YEAR    = #TaxYear
     AND AX1CHK.GPSG_CPY_TAX_REF = $Co_Tax_Ref
End-SELECT

   If $AX1RowFound = 'N' or $Recreate = 'Y'
      if $PrevYr2Found = 'Y' or $PrevYr1Found = 'Y' or $CurrYrFound = 'Y'
         do Insert-Appendix1-Row
      End-if
   End-if

   If $AX1RowFound = 'Y'
      do Update-Appendix1-Row
   End-if
End-Procedure
!
!***********************************************************************
!  Procedure: Update-Appendix1-Row                                     *
!             Update The Appendix1 Data                                *
!***********************************************************************
Begin-Procedure Update-Appendix1-Row

BEGIN-SQL
UPDATE PS_GPSG_IR21_APP1
SET GPSG_ADDRESS1      = $X1Adress1
  , GPSG_ADDRESS2      = $X1Adress2
  , GPSG_ADDRESS3      = $X1Adress3
  , GPSG_AP8A_RES_VAL  = #X1ResidValue
  , GPSG_AP8A_RES_FR   = $X1OccupFm_Dt
  , GPSG_AP8A_RES_TO   = $X1OccupTo_Dt
  , GPSG_AP8A_ER_RENT  = #X1EmplrPdRent
  , GPSG_AP8A_EE_RENT  = #X1EmployeePdRent
  , GPSG_AP8A_RES_SHR  = #X1ResidShare
  , GPSG_AP8A_HTL_SLFN = #X1NosAbove20
  , GPSG_AP8A_HTL_SLFD = #X1DaysAbove20
  , GPSG_AP8A_HTL_CH8N = #X1Nos_8_20
  , GPSG_AP8A_HTL_CH8D = #X1Days_8_20
  , GPSG_AP8A_HTL_CH3N = #X1Nos_3_7
  , GPSG_AP8A_HTL_CH3D = #X1Days_3_7
  , GPSG_AP8A_HTL_CH0N = #X1Nos_Less_3
  , GPSG_AP8A_HTL_CH0D = #X1Days_Less_3

WHERE GPSG_CPY_TAX_REF = $Co_Tax_Ref
  AND GPSG_TAX_YEAR    = #TaxYear
  AND EMPLID           = $Emplid
  AND BALANCE_GRP_NUM  = $BalGrp
END-SQL

  Let #Counter = 1
  While #Counter < 60
     get $BenefCode  $ValType  #UnitVar0 #UnitVar1 #UnitVar2 from Apndx1Benef(#Counter) BnftCode ValType Unit_Val(0) Unit_Val(1) Unit_Val(2)

     if #UnitVar0 <> 0 or #UnitVar1 <> 0 or #UnitVar2 <> 0
        if $Valtype = 'U'
           Let #AmountVar0 = 0
           Let #AmountVar1 = 0
           Let #AmountVar2 = 0
           Let #UVar0      = #UnitVar0
           Let #UVar1      = #UnitVar1
           Let #UVar2      = #UnitVar2
        else
           Let #AmountVar0 = #UnitVar0
           Let #AmountVar1 = #UnitVar1
           Let #AmountVar2 = #UnitVar2
           Let #UVar0   = 0
           Let #UVar1   = 0
           Let #UVar2   = 0
        End-if

        begin-SQL
           INSERT INTO PS_GPSG_IR21_BNF
                  (EMPLID
                  ,BALANCE_GRP_NUM
                  ,GPSG_CPY_TAX_REF
                  ,GPSG_TAX_YEAR
                  ,GPSG_BEN_TYPE
                  ,GPSG_BEN_UNIT_TYPE
                  ,GPSG_UNIT_CNT
                  ,GPSG_UNIT_CNT_1
                  ,GPSG_UNIT_CNT_2
                  ,GPSG_UNIT_VAL
                  ,GPSG_UNIT_VAL_1
                  ,GPSG_UNIT_VAL_2
                  )
           VALUES ($Emplid
                  ,$BalGrp
                  ,$Co_Tax_Ref
                  ,#TaxYear
                  ,$BenefCode
                  ,$ValType
                  ,#UVar0
                  ,#UVar1
                  ,#UVar2
                  ,#AmountVar0
                  ,#AmountVar1
                  ,#AmountVar2
                  )
        end-SQL
     End-if
     Add 1 to #Counter
  End-While

End-Procedure

!
!***********************************************************************
!  Procedure: Insert-Appendix1-Row                                     *
!             Insert Appendix 1 Row                                    *
!***********************************************************************
Begin-Procedure Insert-Appendix1-Row

begin-SQL
Insert into PS_GPSG_IR21_APP1
(EMPLID
,BALANCE_GRP_NUM
,GPSG_CPY_TAX_REF
,GPSG_TAX_YEAR
,GPSG_RES_TYPE
,GPSG_ADDRESS1
,GPSG_ADDRESS2
,GPSG_ADDRESS3
,GPSG_AP8A_RES_VAL
,GPSG_AP8A_RES_VL_1
,GPSG_AP8A_RES_VL_2
,GPSG_AP8A_RES_FR
,GPSG_AP8A_RES_FR_1
,GPSG_AP8A_RES_FR_2
,GPSG_AP8A_RES_TO
,GPSG_AP8A_RES_TO_1
,GPSG_AP8A_RES_TO_2
,GPSG_AP8A_ER_RENT
,GPSG_AP8A_ER_RNT_1
,GPSG_AP8A_ER_RNT_2
,GPSG_AP8A_EE_RENT
,GPSG_AP8A_EE_RNT_1
,GPSG_AP8A_EE_RNT_2
,GPSG_AP8A_RES_SHR
,GPSG_AP8A_RES_SH_1
,GPSG_AP8A_RES_SH_2
,GPSG_AP8A_HTL_SLFN
,GPSG_AP8A_HTSLFN_1
,GPSG_AP8A_HTSLFN_2
,GPSG_AP8A_HTL_SLFD
,GPSG_AP8A_HTSLFD_1
,GPSG_AP8A_HTSLFD_2
,GPSG_AP8A_HTL_WIFN
,GPSG_AP8A_HTLWIFN1
,GPSG_AP8A_HTLWIFN2
,GPSG_AP8A_HTL_WIFD
,GPSG_AP8A_HTLWIFD1
,GPSG_AP8A_HTLWIFD2
,GPSG_AP8A_HTL_CH8N
,GPSG_AP8A_HTCH8N_1
,GPSG_AP8A_HTCH8N_2
,GPSG_AP8A_HTL_CH8D
,GPSG_AP8A_HTCH8D_1
,GPSG_AP8A_HTCH8D_2
,GPSG_AP8A_HTL_CH3N
,GPSG_AP8A_HTCH3N_1
,GPSG_AP8A_HTCH3N_2
,GPSG_AP8A_HTL_CH3D
,GPSG_AP8A_HTCH3D_1
,GPSG_AP8A_HTCH3D_2
,GPSG_AP8A_HTL_CH0N
,GPSG_AP8A_HTL_CH0D
,GPSG_AP8A_HTCH0N_1
,GPSG_AP8A_HTCH0N_2
,GPSG_AP8A_HTCH0D_1
,GPSG_AP8A_HTCH0D_2
,GPSG_FURNISHED
,GPSG_AP8A_EE_HTL
,GPSG_AP8A_ER_HTL
,GPSG_AP8A_RES_VL_P
,GPSG_FURNISHED_1
,GPSG_AP8A_EE_HTL_1
,GPSG_AP8A_ER_HTL_1
)

VALUES
(
$Emplid
,$BalGrp
,$Co_Tax_Ref
,#TaxYear
,'1'
,$X1Adress1
,$X1Adress2
,$X1Adress3
,#X1ResidValue
,#X1ResidValue1
,#X1ResidValue2
,$X1OccupFm_Dt
,$X1OccupFm_Dt1
,$X1OccupFm_Dt2
,$X1OccupTo_Dt
,$X1OccupTo_Dt1
,$X1OccupTo_Dt2
,#X1EmplrPdRent
,#X1EmplrPdRent1
,#X1EmplrPdRent2
,#X1EmployeePdRent
,#X1EmployeePdRent1
,#X1EmployeePdRent2
,#X1ResidShare
,#X1ResidShare1
,#X1ResidShare2
,#X1NosAbove20
,#X1NosAbove201
,#X1NosAbove202
,#X1DaysAbove20
,#X1DaysAbove201
,#X1DaysAbove202
,0
,0
,0
,0
,0
,0
,#X1Nos_8_20
,#X1Nos_8_201
,#X1Nos_8_202
,#X1Days_8_20
,#X1Days_8_201
,#X1Days_8_202
,#X1Nos_3_7
,#X1Nos_3_71
,#X1Nos_3_72
,#X1Days_3_7
,#X1Days_3_71
,#X1Days_3_72
,#X1Nos_Less_3
,#X1Days_Less_3
,#X1Nos_Less_31
,#X1Nos_Less_32
,#X1Days_Less_31
,#X1Days_Less_32
,$Furnished_value
,#Hotel_Employee
,#Hotel_Employer
,0
,' '
,0
,0
)
END-SQL

  Let #Counter = 1
  While #Counter < 60
     get $BenefCode  $ValType  #UnitVar0 #UnitVar1 #UnitVar2 from Apndx1Benef(#Counter) BnftCode ValType Unit_Val(0) Unit_Val(1) Unit_Val(2)

     if #UnitVar0 <> 0 or #UnitVar1 <> 0 or #UnitVar2 <> 0
        if $Valtype = 'U'
           Let #AmountVar0 = 0
           Let #AmountVar1 = 0
           Let #AmountVar2 = 0
           Let #UVar0      = #UnitVar0
           Let #UVar1      = #UnitVar1
           Let #UVar2      = #UnitVar2
        else
           Let #AmountVar0 = #UnitVar0
           Let #AmountVar1 = #UnitVar1
           Let #AmountVar2 = #UnitVar2
           Let #UVar0   = 0
           Let #UVar1   = 0
           Let #UVar2   = 0
        End-if

        begin-SQL
           INSERT INTO PS_GPSG_IR21_BNF
                  (EMPLID
                  ,BALANCE_GRP_NUM
                  ,GPSG_CPY_TAX_REF
                  ,GPSG_TAX_YEAR
                  ,GPSG_BEN_TYPE
                  ,GPSG_BEN_UNIT_TYPE
                  ,GPSG_UNIT_CNT
                  ,GPSG_UNIT_CNT_1
                  ,GPSG_UNIT_CNT_2
                  ,GPSG_UNIT_VAL
                  ,GPSG_UNIT_VAL_1
                  ,GPSG_UNIT_VAL_2
                  )
           Values ($Emplid
                  ,$BalGrp
                  ,$Co_Tax_Ref
                  ,#TaxYear
                  ,$BenefCode
                  ,$ValType
                  ,#UVar0
                  ,#UVar1
                  ,#UVar2
                  ,#AmountVar0
                  ,#AmountVar1
                  ,#AmountVar2
                  )
        end-SQL
     End-if

     Add 1 to #Counter

  End-While
End-Procedure

!
!***********************************************************************
!  Procedure: Ins-Update-IR21                                          *
!             Insert / Update Existing IR21 Data                       *
!***********************************************************************
Begin-Procedure Ins-Update-IR21
  Let $RowFound = 'N'
  Let #LastSeq = 0
  Let $LastEff_Dt = ''

  Begin-SELECT
ICHK.EFFDT
ICHK.EFFSEQ

    Let $RowFound = 'Y'

  FROM PS_GPSG_IR21_DTL ICHK
   WHERE ICHK.EMPLID           = $Emplid
     AND ICHK.BALANCE_GRP_NUM  = $BalGrp
     AND ICHK.GPSG_TAX_YEAR    = #TaxYear
     AND ICHK.GPSG_CPY_TAX_REF = $Co_Tax_Ref

   ORDER BY ICHK.EFFDT, ICHK.EFFSEQ
  End-SELECT

  If $RowFound = 'N' or $Recreate = 'Y'
     do Insert-Row

! Save the Salary portion of IR21 Data
! Since the Insert into Details can occur from 2 situations, we will have a routine

     Let #Ins_Effseq   = 0
     Let $Ins_IR21Type = 'O'
     do Insert-Dtls-Row
  Else
     if &ICHK.EFFDT = $CreationDt
        Let #Ins_Effseq = &ICHK.EFFSEQ + 1
     End-if

     Do Update-Row
     Let $Ins_IR21Type = 'M'
     do Insert-Dtls-Row
  End-if

End-Procedure

!
!***********************************************************************
!  Procedure: Update-Row                                               *
!             Update the existing row and update only current Variable *
!***********************************************************************
Begin-Procedure Update-Row

  Begin-SQL
     UPDATE PS_GPSG_IR21_HDR
        SET GPSG_ISSUE_DATE    = $CreationDt
          , GPSG_REGISTERED_NM = $Co_Name
          , GPSG_CPY_TAX_REF   = $Co_Tax_Ref
          , GP_PAYGROUP        = $Job_Paygroup
          , GPSG_ADDRESS1      = $Co_Address1
          , GPSG_ADDRESS2      = $Co_Address2
          , GPSG_ADDRESS3      = $Co_City_Zip
          , NAME               = &PN.NAME
          , NAME_PREFIX        = &PN.NAME_PREFIX
          , NATIONAL_ID_TYPE   = &PI.NATIONAL_ID_TYPE
          , NATIONAL_ID        = &PI.NATIONAL_ID
          , PERM_STATUS_DT_SGP = $Perm_Status_Dt
          , GPSG_ADDRESS1_OTH  = $EmplAddr1
          , GPSG_ADDRESS2_OTH  = $EmplAddr2
          , GPSG_ADDRESS3_OTH  = $EmplAddr3
          , BIRTHDATE          = &PD.BIRTHDATE
          , SEX                = &PE.SEX
          , NATIONALITY        = $EmplNationality
          , MAR_STATUS         = &PE.MAR_STATUS
          , MAR_STATUS_DT      = $Marital_Dt
          , PHONE              = $PPhone
          , JOB_DESCR          = $JobCodeDescr
          , COMP_FREQUENCY     = $CompFreq
          , GPSG_LAST_PAY_DT   = $SalaryPaid_Dt
          , GPSG_LAST_SAL      = #Total_Gross
          , HIRE_DT            = $EmplJobCommc_Dt
          , TERMINATION_DT     = $EmplJobCease_Dt
          , GPSG_CESS_RSN      = $Action_Reason_Descr
          , GPSG_PERIOD        = $PayPeriod
          , GPSG_EMPL_BANK     = $PayBankName
          , GPSG_SPOUSE_NAME   = $SpouseName
          , GPSG_SPOUSE_BDATE  = $SpouseBirthDate
          , GPSG_SPOUSE_ID     = $SpouseID
          , GPSG_SPOUSE_NAT    = $SpouseNationality

WHERE GPSG_CPY_TAX_REF = $Co_Tax_Ref
  AND GPSG_TAX_YEAR    = #TaxYear
  AND EMPLID           = $Emplid
  AND BALANCE_GRP_NUM  = $BalGrp
End-SQL

! Save the 4 rows of Children data

  let #Count = 0
  while #Count < 4
     get $Field1 from ChildArray (#Count) Name
     get $Field2 from ChildArray (#Count) Sex
     get $Field3 from ChildArray (#Count) BirthDate
     get $Field4 from ChildArray (#Count) School
     Let $BenefCount = edit(#Count,'09')
     if Ltrim(rtrim($Field1,' '),' ') = ''
        Let $Field1 = ' '
        Let $Field2 = ' '
        Let $Field3 = ''
     End-if

     if Ltrim(rtrim($Field4,' '),' ') = ''
        Let $Field4 = ' '
     End-if

     begin-SQL
        Insert Into PS_GPSG_IR21_CHILD
               (EMPLID,
                BALANCE_GRP_NUM,
                GPSG_CPY_TAX_REF,
                GPSG_TAX_YEAR,
                DEPENDENT_BENEF,
                NAME,
                SEX,
                BIRTHDATE,
                GPSG_EMPLR_SCHL
               )
        VALUES ($Emplid,
                $BalGrp,
                $Co_Tax_Ref,
                #TaxYear,
                $BenefCount,
                $Field1,
                $Field2,
                $Field3,
                $Field4
               )
     end-SQL

     Add 1 to #Count

  end-while

End-Procedure
!
!***********************************************************************
!  Procedure: Insert-Row                                               *
!             Insert a new row                                         *
!***********************************************************************
Begin-Procedure Insert-Row

  begin-SQL
     Insert Into PS_GPSG_IR21_HDR
            (EMPLID,
             BALANCE_GRP_NUM,
             GPSG_CPY_TAX_REF,
             GPSG_TAX_YEAR,
             GPSG_8A_STATUS,
             GPSG_ISSUE_DATE,
             GP_PAYGROUP,
             GPSG_REGISTERED_NM,
             GPSG_ADDRESS1,
             GPSG_ADDRESS2,
             GPSG_ADDRESS3,
             NAME,
             NAME_PREFIX,
             NATIONAL_ID_TYPE,
             NATIONAL_ID,
             PERM_STATUS_DT_SGP,
             GPSG_ADDRESS1_OTH,
             GPSG_ADDRESS2_OTH,
             GPSG_ADDRESS3_OTH,
             BIRTHDATE,
             SEX,
             NATIONALITY,
             MAR_STATUS,
             MAR_STATUS_DT,
             PHONE,
             JOB_DESCR,
             GPSG_ARRIVAL_DT,
             HIRE_DT,
             TERMINATION_DT,
             GPSG_DEPART_DT,
             GPSG_RESIG_DT,
             GPSG_CESS_RSN,
             COMP_FREQUENCY,
             GPSG_MTH_CESS_RSN,
             GPSG_TAX_WHELD,
             GPSG_LAST_PAY_DT,
             GPSG_LAST_SAL,
             GPSG_PERIOD,
             GPSG_NONE_WHELD,
             GPSG_BASIS_WHELD,
             GPSG_EMPL_BANK,
             GPSG_IR21_EMPLR,
             GPSG_ER_PAYS_TAX,
             GPSG_SPOUSE_NAME,
             GPSG_SPOUSE_BDATE,
             GPSG_SPOUSE_ID,
             GPSG_SPOUSE_NAT,
             GPSG_EMPLR_SCHL,
         GPSG_LOM_NOTICE,
             GPSG_TNW_REASON,
             GPSG_SPOUSE_INCOME,
             GPSG_DATE_PAYMENT,
             GPSG_IR21_MONIES,
             GPSG_ER_PAR_TX_RS
            )
     VALUES ($Emplid,
             $BalGrp,
             $Co_Tax_Ref,
             #TaxYear,
             'W',
             $CreationDt,
             $Job_Paygroup,
             $Co_Name,
             $Co_Address1,
             $Co_Address2,
             $Co_City_Zip,
             &PN.NAME,
             &PN.NAME_PREFIX,
             &PI.NATIONAL_ID_TYPE,
             &PI.NATIONAL_ID,
             $Perm_Status_Dt,
             $EmplAddr1,
             $EmplAddr2,
             $EmplAddr3,
             &PD.BIRTHDATE,
             &PE.SEX,
             $EmplNationality,
             &PE.MAR_STATUS,
             $Marital_Dt,
             $PPhone,
             $JobCodeDescr,
             $CYGPSG_ARRIVAL_DT,
             $EmplJobCommc_Dt,
             $EmplJobCease_Dt,
             $CYDepart_Dt,
             $CYResign_Dt,
             $Action_Reason_Descr,
             $CompFreq,
             ' ',
             0,
             $SalaryPaid_Dt,
             #Total_Gross,
             $PayPeriod,
             ' ',
             ' ',
             $PayBankName,
             ' ',
             'N',
             $SpouseName,
             $SpouseBirthDate,
             $SpouseID,
             $SpouseNationality,
             $SpouseEmployer,
             ' ',
             ' ',
             ' ',
             $CYResign_Dt,
             ' ',
             ' '
            )
  end-SQL

! Save the 4 rows of Children data

  let #Count = 0
  while #Count < 4
     Let $Field1 = ' '
     Let $Field2 = ' '
     Let $Field3 = ''
     Let $Field4 = ' '

    get $Field1 from ChildArray (#Count) Name
    get $Field2 from ChildArray (#Count) Sex
    get $Field3 from ChildArray (#Count) BirthDate
    get $Field4 from ChildArray (#Count) School
    if Ltrim(rtrim($Field4,' '),' ') = ''
       Let $Field4 = ' '
    End-if

    Let $BenefCount = edit(#Count,'09')
    if Ltrim(rtrim($Field1,' '),' ') = ''
       Let $Field1 = ' '
       Let $Field2 = ' '
       Let $Field3 = ''
       Let $Field4 = ' '
    End-if

    begin-SQL
       Insert Into PS_GPSG_IR21_CHILD
              (EMPLID,
               BALANCE_GRP_NUM,
               GPSG_CPY_TAX_REF,
               GPSG_TAX_YEAR,
               DEPENDENT_BENEF,
               NAME,
               SEX,
               BIRTHDATE ,
               GPSG_EMPLR_SCHL
              )
       VALUES ($Emplid,
               $BalGrp,
               $Co_Tax_Ref,
               #TaxYear,
               $BenefCount,
               $Field1,
               $Field2,
               $Field3,
               $Field4
              )
     end-SQL

     Add 1 to #Count

  end-while

End-Procedure

!
!***********************************************************************
!  Procedure: Insert-Dtls-Row                                          *
!             Insert Details Row into IR21 Dtls table                  *
!***********************************************************************
Begin-Procedure Insert-Dtls-Row

   if Ltrim(rtrim($CYOsEmplrFundName,' '),' ') = ''
      Let $CYOsEmplrFundName = $OsFundName
   end-if

   if ltrim(rtrim($CYOsEmplrFundName,' '),' ') = ''
      Let $CYOsEmplrFundName  = ' '
   end-if

! Since aggregate functions (i.e. MIN, MAX, SUM) are not allowed in
! Insert clauses (MS SQL Server), we have to sum together a few variables before
! inserting them into their corresponding table.

   Let #SumCYLeavePayAndCYGrossSalary = #CYLeavePay + #CYGrossSalary
   Let #SumP1LeavePayAndP1GrossSalary = #P1LeavePay + #P1GrossSalary
   Let #SumP2LeavePayAndP2GrossSalary = #P2LeavePay + #P2GrossSalary
   Let #SumCYRetirementAndCYPension   = #CYRetirement + #CYPension
   Let #SumP1RetirementAndP1Pension   = #P1Retirement + #P1Pension
   Let #SumP2RetirementAndP2Pension   = #P2Retirement + #P2Pension


   begin-SQL
      Insert Into PS_GPSG_IR21_DTL
             (EMPLID,
              BALANCE_GRP_NUM,
              GPSG_CPY_TAX_REF,
              GPSG_TAX_YEAR,
              EFFDT,
              EFFSEQ,
              GPSG_IR21_TYPE,
              GPSG_TAX_YR_START,
              GPSG_TAX_YR_END,
              GPSG_TAX_YR_STRT_1,
              GPSG_TAX_YR_END_1,
              GPSG_TAX_YR_STRT_2,
              GPSG_TAX_YR_END_2,
              GPSG_8A_INCOME_TOT,
              GPSG_8A_INC_TOT_1,
              GPSG_8A_INC_TOT_2,
              GPSG_8A_CNT_BONUS,
              GPSG_8A_CNT_BNS_1,
              GPSG_8A_CNT_BNS_2,
              GPSG_8A_NC_BONUS,
              GPSG_8A_NC_BNS_1,
              GPSG_8A_NC_BNS_2,
              GPSG_BONUS_DT,
              GPSG_8A_DIR_FEE,
              GPSG_8A_DIR_FEE_1,
              GPSG_8A_DIR_FEE_2,
          GPSG_DIR_FEE_DT,
              GPSG_8A_COMMSN,
              GPSG_8A_COMMSN_1,
              GPSG_8A_COMMSN_2,
              GPSG_8A_ALLOW_TOT,
              GPSG_8A_ALLW_TOT_1,
              GPSG_8A_ALLW_TOT_2,
              GPSG_8A_GRATUITY,
              GPSG_8A_GRATUITY_1,
              GPSG_8A_GRATUITY_2,
              GPSG_8A_NOTICE,
              GPSG_8A_NOTICE_1,
              GPSG_8A_NOTICE_2,
              GPSG_8A_LOSS_OFFIC,
              GPSG_8A_LOSS_OFF_1,
              GPSG_8A_LOSS_OFF_2,
              GPSG_8A_RETIRE,
              GPSG_RETIRE_FUND,
              GPSG_8A_RETIRE_1,
              GPSG_8A_RETIRE_2,
              GPSG_8A_OS_PENSION,
              GPSG_8A_OS_PENS_1,
              GPSG_8A_OS_PENS_2,
              GPSG_OS_PENS_FUND,
              GPSG_CPF_VOL_ER,
              GPSG_CPF_VOL_ER_1,
              GPSG_CPF_VOL_ER_2,
              GPSG_8A_SHARE_GAIN,
              GPSG_8A_SHARE_GN_1,
              GPSG_8A_SHARE_GN_2,
              GPSG_ESOP_APPLIC,
              GPSG_8A_BIK,
              GPSG_8A_BIK_1,
              GPSG_8A_BIK_2,
              GPSG_CPF_COMP_EE,
              GPSG_CPF_COMP_EE_1,
              GPSG_CPF_COMP_EE_2,
              GPSG_PENS_FUND,
              GPSG_CPF_VOL_EE,
              GPSG_CPF_VOL_EE_1,
              GPSG_CPF_VOL_EE_2,
              GPSG_8A_DONATIONS,
              GPSG_8A_DONATNS_1,
              GPSG_8A_DONATNS_2,
              GPSG_TOTAL_MBMF,
              GPSG_TOTAL_MBMF_1,
              GPSG_8A_MBMF_IND,
              GPSG_8A_CCHEST_IND,
              GPSG_8A_SINDA_IND,
              GPSG_8A_CDAC_IND,
              GPSG_8A_ECF_IND,
              GPSG_8A_YMF_IND,
          GPSG_DATE_PAYMENT
             )
      VALUES ($Emplid,
              $BalGrp,
              $Co_Tax_Ref,
              #TaxYear,
              $CreationDt,
              #Ins_Effseq,
              $Ins_IR21Type,
              $CYYearStart,
              $CYYearEnd,
              $P1YearStart,
              $P1YearEnd,
              $P2YearStart,
              $P2YearEnd,
              #SumCYLeavePayAndCYGrossSalary,
              #SumP1LeavePayAndP1GrossSalary,
              #SumP2LeavePayAndP2GrossSalary,
              #CYCntrctlBonus,
              #P1CntrctlBonus,
              #P2CntrctlBonus,
              #CYNonCntrctlBonus,
              #P1NonCntrctlBonus,
              #P2NonCntrctlBonus,
              $CYBonusDate,
              #CYDirectorFee,
              #P1DirectorFee,
              #P2DirectorFee,
          $CYDirFeeDate,
              #CYCommission,
              #P1Commission,
              #P2Commission,
              #CYAllowance,
              #P1Allowance,
              #P2Allowance,
              #CYGratuity,
              #P1Gratuity,
              #P2Gratuity,
              #CYYearNotice,
              #P1YearNotice,
              #P2YearNotice,
              #CYOfficeLoss,
              #P1OfficeLoss,
              #P2OfficeLoss,
              #SumCYRetirementAndCYPension,
              $CYRetireFundName,
              #SumP1RetirementAndP1Pension,
              #SumP2RetirementAndP2Pension,
              #CYOsEmployerCPF,
              #P1OsEmployerCPF,
              #P2OsEmployerCPF,
              $CYOsEmplrFundName,
              #CYVolEmplrCPF,
              #P1VolEmplrCPF,
              #P2VolEmplrCPF,
              #CYShareOpt,
              #P1ShareOpt,
              #P2ShareOpt,
              $CYESOPApplic,
              #CYBenefInKind,
              #P1BenefInKind,
              #P2BenefInKind,
              #CYEmplMandCPFDed,
              #P1EmplMandCPFDed,
              #P2EmplMandCPFDed,
              $CYEmplMandFundName,
              #CYEmplVolCPFDed,
              #P1EmplVolCPFDed,
              #P2EmplVolCPFDed,
              #CYDonation,
              #P1Donation,
              #P2Donation,
              #CYMBF,
              #P1MBF,
              $CYMBMFPaid,
              $CYCCHESTPaid,
              $CYSINDAPaid,
              $CYCDACPaid,
              $CYECFPaid,
              $CYYMFPaid,
          $CYYearEnd
             )
   end-SQL

End-Procedure
!
!***********************************************************************
!  Procedure: Process-Appendix1                                        *
!             Retrieve and process Appendix 8a into Appendix 1         *
!***********************************************************************
begin-procedure Process-Appendix1

Begin-SELECT
AX1.GPSG_ADDRESS1
AX1.GPSG_ADDRESS2
AX1.GPSG_ADDRESS3
AX1.GPSG_AP8A_RES_VAL
AX1.GPSG_AP8A_RES_SHR
AX1.GPSG_AP8A_RES_FR
AX1.GPSG_AP8A_RES_TO
AX1.GPSG_AP8A_ER_RENT
AX1.GPSG_AP8A_EE_RENT
AX1.GPSG_AP8A_HTL_SLFN
AX1.GPSG_AP8A_HTL_SLFD
AX1.GPSG_AP8A_HTL_CH8N
AX1.GPSG_AP8A_HTL_CH8D
AX1.GPSG_AP8A_HTL_CH3N
AX1.GPSG_AP8A_HTL_CH3D
AX1.GPSG_AP8A_HTL_CH0N
AX1.GPSG_AP8A_HTL_CH0D
AX1.GPSG_AP8A_FURNIT
AX1.GPSG_AP8A_FRIDGE
AX1.GPSG_AP8A_VCR
AX1.GPSG_AP8A_WASHER
AX1.GPSG_AP8A_DRYER
AX1.GPSG_AP8A_DWASHER
AX1.GPSG_AP8A_AC_UNIT
AX1.GPSG_AP8A_AC_CENTR
AX1.GPSG_AP8A_AC_SITTG
AX1.GPSG_AP8A_AC_ADDNL
AX1.GPSG_AP8A_BED_AC
AX1.GPSG_AP8A_TV
AX1.GPSG_AP8A_RADIO
AX1.GPSG_AP8A_AMP
AX1.GPSG_AP8A_STEREO
AX1.GPSG_AP8A_GUITAR
AX1.GPSG_AP8A_COMPUTER
AX1.GPSG_AP8A_ORGAN
AX1.GPSG_AP8A_POOL
AX1.GPSG_AP8A_PUB_UT
AX1.GPSG_AP8A_PHONE
AX1.GPSG_AP8A_PAGER
AX1.GPSG_AP8A_SUITCASE
AX1.GPSG_AP8A_GOLF_BAG
AX1.GPSG_AP8A_CAMERA
AX1.GPSG_AP8A_SERVANT
AX1.GPSG_AP8A_DRIVER
AX1.GPSG_AP8A_GARDENER
AX1.GPSG_AP8A_OTH_FURN
AX1.GPSG_AP8A_FAN
AX1.GPSG_AP8A_COOLER
AX1.GPSG_AP8A_IRON
AX1.GPSG_AP8A_TOASTER
AX1.GPSG_AP8A_FAX
AX1.GPSG_AP8A_VACUUM
AX1.GPSG_AP8A_JUICER
AX1.GPSG_AP8A_BLENDER
AX1.GPSG_AP8A_KETTLE
AX1.GPSG_AP8A_COOKER
AX1.GPSG_AP8A_WATER_HT
AX1.GPSG_AP8A_OVEN
AX1.GPSG_AP8A_LIGHT
AX1.GPSG_AP8A_FLOOR_PL
AX1.GPSG_AP8A_MOWER
AX1.GPSG_AP8A_HOME_LVE
AX1.GPSG_AP8A_ER_INT
AX1.GPSG_AP8A_LIFE_INS
AX1.GPSG_AP8A_HOLIDAY
AX1.GPSG_AP8A_EDUC
AX1.GPSG_AP8A_FEES
AX1.GPSG_AP8A_GAINS
AX1.GPSG_AP8A_VEHICLE
AX1.GPSG_AP8A_CAR
AX1.GPSG_AP8A_OTHER
AX1.GPSG_AP8A_LS_AWARD
AX1.GPSG_AP8A_ER_HTL
AX1.GPSG_AP8A_EE_HTL
AX1.GPSG_FURNISHED

    If #PrcsYear = 0
       Let $CurrYrFound = 'Y'

       Let $X1Adress1        = &AX1.GPSG_ADDRESS1
       Let $X1Adress2        = &AX1.GPSG_ADDRESS2
       Let $X1Adress3        = &AX1.GPSG_ADDRESS3
       Let #X1ResidValue     = &AX1.GPSG_AP8A_RES_VAL
       Let $X1OccupFm_Dt     = &AX1.GPSG_AP8A_RES_FR
       Let $X1OccupTo_Dt     = &AX1.GPSG_AP8A_RES_TO
       Let #X1EmplrPdRent    = &AX1.GPSG_AP8A_ER_RENT
       Let #X1EmployeePdRent = &AX1.GPSG_AP8A_EE_RENT
       Let #X1ResidShare     = &AX1.GPSG_AP8A_RES_SHR
       Let #X1NosAbove20     = &AX1.GPSG_AP8A_HTL_SLFN
       Let #X1DaysAbove20    = &AX1.GPSG_AP8A_HTL_SLFD
       Let #X1Nos_8_20       = &AX1.GPSG_AP8A_HTL_CH8N
       Let #X1Days_8_20      = &AX1.GPSG_AP8A_HTL_CH8D
       Let #X1Nos_3_7        = &AX1.GPSG_AP8A_HTL_CH3N
       Let #X1Days_3_7       = &AX1.GPSG_AP8A_HTL_CH3D
       Let #X1Nos_Less_3     = &AX1.GPSG_AP8A_HTL_CH0N
       Let #X1Days_Less_3    = &AX1.GPSG_AP8A_HTL_CH0D
       Let #Hotel_Employer   = &AX1.GPSG_AP8A_ER_HTL
       Let #Hotel_Employee   = &AX1.GPSG_AP8A_EE_HTL
       Let #Hotel_amount     = #Hotel_Employer  -  #Hotel_Employee
       Let $Furnished_value = &AX1.GPSG_FURNISHED


       if Ltrim(rtrim($X1Adress1,' '),' ') = ''
          Let $X1Adress1 = ' '
       End-if
       if Ltrim(rtrim($X1Adress2,' '),' ') = ''
          Let $X1Adress2 = ' '
       End-if
       if Ltrim(rtrim($X1Adress3,' '),' ') = ''
          Let $X1Adress3 = ' '
       End-if
    End-if

    If #PrcsYear = 1
       Let $PrevYr1Found = 'N'
       Let #X1ResidValue1     = &AX1.GPSG_AP8A_RES_VAL
       Let $X1OccupFm_Dt1     = &AX1.GPSG_AP8A_RES_FR
       Let $X1OccupTo_Dt1     = &AX1.GPSG_AP8A_RES_TO
       Let #X1EmplrPdRent1    = &AX1.GPSG_AP8A_ER_RENT
       Let #X1EmployeePdRent1 = &AX1.GPSG_AP8A_EE_RENT
       Let #X1ResidShare1     = &AX1.GPSG_AP8A_RES_SHR
       Let #X1NosAbove201     = &AX1.GPSG_AP8A_HTL_SLFN
       Let #X1DaysAbove201    = &AX1.GPSG_AP8A_HTL_SLFD
       Let #X1Nos_8_201       = &AX1.GPSG_AP8A_HTL_CH8N
       Let #X1Days_8_201      = &AX1.GPSG_AP8A_HTL_CH8D
       Let #X1Nos_3_71        = &AX1.GPSG_AP8A_HTL_CH3N
       Let #X1Days_3_71       = &AX1.GPSG_AP8A_HTL_CH3D
       Let #X1Nos_Less_31     = &AX1.GPSG_AP8A_HTL_CH0N
       Let #X1Days_Less_31    = &AX1.GPSG_AP8A_HTL_CH0D
    End-if

    If #PrcsYear = 2
       Let $PrevYr2Found = 'N'
       Let #X1ResidValue2     = &AX1.GPSG_AP8A_RES_VAL
       Let $X1OccupFm_Dt2     = &AX1.GPSG_AP8A_RES_FR
       Let $X1OccupTo_Dt2     = &AX1.GPSG_AP8A_RES_TO
       Let #X1EmplrPdRent2    = &AX1.GPSG_AP8A_ER_RENT
       Let #X1EmployeePdRent2 = &AX1.GPSG_AP8A_EE_RENT
       Let #X1ResidShare2     = &AX1.GPSG_AP8A_RES_SHR
       Let #X1NosAbove202     = &AX1.GPSG_AP8A_HTL_SLFN
       Let #X1DaysAbove202    = &AX1.GPSG_AP8A_HTL_SLFD
       Let #X1Nos_8_202       = &AX1.GPSG_AP8A_HTL_CH8N
       Let #X1Days_8_202      = &AX1.GPSG_AP8A_HTL_CH8D
       Let #X1Nos_3_72        = &AX1.GPSG_AP8A_HTL_CH3N
       Let #X1Days_3_72       = &AX1.GPSG_AP8A_HTL_CH3D
       Let #X1Nos_Less_32     = &AX1.GPSG_AP8A_HTL_CH0N
       Let #X1Days_Less_32    = &AX1.GPSG_AP8A_HTL_CH0D
    End-if

    put '001'  'U'  &AX1.GPSG_AP8A_FURNIT    into Apndx1Benef(1)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '002'  'U'  &AX1.GPSG_AP8A_FRIDGE    into Apndx1Benef(2)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '003'  'U'  &AX1.GPSG_AP8A_VCR       into Apndx1Benef(3)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '004'  'U'  &AX1.GPSG_AP8A_WASHER    into Apndx1Benef(4)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '005'  'U'  &AX1.GPSG_AP8A_DRYER     into Apndx1Benef(5)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '006'  'U'  &AX1.GPSG_AP8A_DWASHER   into Apndx1Benef(6)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '007'  'U'  &AX1.GPSG_AP8A_AC_UNIT   into Apndx1Benef(7)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '008'  'U'  &AX1.GPSG_AP8A_AC_CENTR  into Apndx1Benef(8)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '009'  'U'  &AX1.GPSG_AP8A_AC_SITTG  into Apndx1Benef(9)  BnftCode  ValType  Unit_Val(#PrcsYear)
    put '010'  'U'  &AX1.GPSG_AP8A_AC_ADDNL  into Apndx1Benef(10) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '011'  'U'  &AX1.GPSG_AP8A_BED_AC    into Apndx1Benef(11) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '012'  'U'  &AX1.GPSG_AP8A_TV        into Apndx1Benef(12) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '013'  'U'  &AX1.GPSG_AP8A_RADIO     into Apndx1Benef(13) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '014'  'U'  &AX1.GPSG_AP8A_AMP       into Apndx1Benef(14) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '015'  'U'  &AX1.GPSG_AP8A_STEREO    into Apndx1Benef(15) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '016'  'U'  &AX1.GPSG_AP8A_GUITAR    into Apndx1Benef(16) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '017'  'U'  &AX1.GPSG_AP8A_COMPUTER  into Apndx1Benef(17) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '018'  'U'  &AX1.GPSG_AP8A_ORGAN     into Apndx1Benef(18) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '019'  'U'  &AX1.GPSG_AP8A_POOL      into Apndx1Benef(19) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '020'  'V'  &AX1.GPSG_AP8A_PUB_UT    into Apndx1Benef(20) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '021'  'V'  &AX1.GPSG_AP8A_PHONE     into Apndx1Benef(21) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '022'  'V'  &AX1.GPSG_AP8A_PAGER     into Apndx1Benef(22) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '023'  'V'  &AX1.GPSG_AP8A_SUITCASE  into Apndx1Benef(23) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '024'  'V'  &AX1.GPSG_AP8A_GOLF_BAG  into Apndx1Benef(24) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '025'  'V'  &AX1.GPSG_AP8A_CAMERA    into Apndx1Benef(25) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '026'  'V'  &AX1.GPSG_AP8A_SERVANT   into Apndx1Benef(26) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '027'  'V'  &AX1.GPSG_AP8A_DRIVER    into Apndx1Benef(27) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '028'  'V'  &AX1.GPSG_AP8A_GARDENER  into Apndx1Benef(28) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '029'  'V'  &AX1.GPSG_AP8A_OTH_FURN  into Apndx1Benef(29) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '030'  'U'  &AX1.GPSG_AP8A_FAN       into Apndx1Benef(30) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '031'  'U'  &AX1.GPSG_AP8A_COOLER    into Apndx1Benef(31) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '032'  'U'  &AX1.GPSG_AP8A_IRON      into Apndx1Benef(32) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '033'  'U'  &AX1.GPSG_AP8A_TOASTER   into Apndx1Benef(33) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '034'  'V'  &AX1.GPSG_AP8A_FAX       into Apndx1Benef(34) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '035'  'U'  &AX1.GPSG_AP8A_VACUUM    into Apndx1Benef(35) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '036'  'U'  &AX1.GPSG_AP8A_JUICER    into Apndx1Benef(36) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '037'  'U'  &AX1.GPSG_AP8A_BLENDER   into Apndx1Benef(37) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '038'  'U'  &AX1.GPSG_AP8A_KETTLE    into Apndx1Benef(38) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '039'  'U'  &AX1.GPSG_AP8A_COOKER    into Apndx1Benef(39) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '040'  'U'  &AX1.GPSG_AP8A_WATER_HT  into Apndx1Benef(40) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '041'  'U'  &AX1.GPSG_AP8A_OVEN      into Apndx1Benef(41) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '042'  'U'  &AX1.GPSG_AP8A_LIGHT     into Apndx1Benef(42) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '043'  'U'  &AX1.GPSG_AP8A_FLOOR_PL  into Apndx1Benef(43) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '044'  'U'  &AX1.GPSG_AP8A_MOWER     into Apndx1Benef(44) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '045'  'V'  &AX1.GPSG_AP8A_HOME_LVE  into Apndx1Benef(45) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '046'  'V'  &AX1.GPSG_AP8A_ER_INT    into Apndx1Benef(46) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '047'  'V'  &AX1.GPSG_AP8A_LIFE_INS  into Apndx1Benef(47) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '048'  'V'  &AX1.GPSG_AP8A_HOLIDAY   into Apndx1Benef(48) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '049'  'V'  &AX1.GPSG_AP8A_EDUC      into Apndx1Benef(49) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '050'  'V'  &AX1.GPSG_AP8A_FEES      into Apndx1Benef(50) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '051'  'V'  &AX1.GPSG_AP8A_GAINS     into Apndx1Benef(51) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '052'  'V'  &AX1.GPSG_AP8A_VEHICLE   into Apndx1Benef(52) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '053'  'V'  &AX1.GPSG_AP8A_CAR       into Apndx1Benef(53) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '054'  'V'  &AX1.GPSG_AP8A_OTHER     into Apndx1Benef(54) BnftCode  ValType  Unit_Val(#PrcsYear)
    put '055'  'V'  &AX1.GPSG_AP8A_LS_AWARD  into Apndx1Benef(55) BnftCode  ValType  Unit_Val(#PrcsYear)

   FROM PS_GPSG_APP_8A AX1

    WHERE AX1.EMPLID           = $Emplid
     AND  AX1.BALANCE_GRP_NUM  = $BalGrp
     AND  AX1.GPSG_TAX_YEAR    = #WrkTaxYear
     AND  AX1.GPSG_CPY_TAX_REF = $Co_Tax_Ref
End-SELECT

End-Procedure
!
!***********************************************************************
!  Procedure: Select-Parameters                                        *
!             Retrieve Run Control Parameters                          *
!***********************************************************************
begin-procedure Select-Parameters

Begin-SELECT
SP.GPSG_CPY_TAX_REF
SP.GP_PAYGROUP
SP.GPSG_TAX_YEAR
SP.GPSG_FROM_DT
SP.GPSG_TO_DT
SP.GPSG_RECREATE_IR21
SP.GPSG_IR21_APP1
SP.GPSG_CREATE_DATE

  FROM PS_GPSG_RC_IRAS SP
 WHERE SP.OPRID       = $Prcs_OprID
   AND SP.RUN_CNTL_ID = $Prcs_Run_Cntl_ID

End-SELECT

   Let $Co_Tax_Ref      = Ltrim(rtrim(&SP.GPSG_CPY_TAX_REF,' '),' ')
   Let $Paygroup        = Ltrim(rtrim(&SP.GP_PAYGROUP,' '),' ')
   Let #TaxYear         = &SP.GPSG_TAX_YEAR
   Let $TaxYear         = EDIT(#TaxYear,'9999')
   Let $PrcsFromDt      = &SP.GPSG_FROM_DT
   Let $PrcsToDt        = &SP.GPSG_TO_DT
   Let $Recreate        = Ltrim(rtrim(&SP.GPSG_RECREATE_IR21,' '),' ')
   Let $CreationDt      = Ltrim(rtrim(&SP.GPSG_CREATE_DATE,' '),' ')
   Let $PrcsApndx1      = Ltrim(rtrim(&SP.GPSG_IR21_APP1,' '),' ')

   if Ltrim(rtrim($Paygroup,' '),' ') = ''
      Let $PrcsToDt   = $CreationDt
   End-if

End-Procedure

#include 'gpsgirty.sqc'  ! Sets Start and End dates for a Company's Tax Year
#include 'readxlat.sqc'  ! Read-Translate-Table procedure
#include 'getcodta.sqc'  ! Get-Company-Data procedure
#include 'getactrs.sqc'  ! Get-Action Reason Desription
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'datemath.sqc'  ! Routines for date and time maths
#include 'number.sqc'    ! Routines to format numbers
#include 'reset.sqc'     ! Reset Printer
#include 'stdapi.sqc'    ! Routines to Update Run Status
