!***********************************************************************
!   UVGPX20:  Rules Package Compare/Upgrade Validation Report          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:06:12:27                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !Printer and page-size initialization, SETUP31 and
                        !  SETUP32 SQCs to support HTML, HP PCL, PostScript,
                        !  PDF and Window in addition to Line Printer as
                        !  the output type.

! Change History
! Incident ID    Dated     Comments
!
!***********************************************************************
! begin-report                                                         *
!                                                                      *
! Called By: N/A                                                       *
! Calls:   Init-Processing                                             *
!            Get-Values                                                *
!            Process-Main                                              *
!            Reset                                                     *
!            Delete-From-AE-Tables                                     *
!            End-Report                                                *
!***********************************************************************

begin-report


  do Init-Processing
   Let $ShowDebugInfo = 'Y'
  do Get-Values

  do Process-Main

  do Reset                                   ! called from reset.sqc

  do Update-Prcs-Run-Status       ! called from prcsapi.sqc to update the Process Monitor to Success

end-report



begin-procedure Init-Processing

    Do DebugProc ('S', 'Init-Processing')

  do Init-Datetime                ! called from datetime.sqc

  do Get-Current-Datetime         ! called from prcsapi.sqc (curdttim.sqc)

  do Define-Prcs-Vars             ! called from prcsapi.sqc (prcsdef.sqc)

  do Get-Run-Control-Parms        ! In prcsapi.sqc

  do Init-Number                  ! called from number.sqc

  do Get-Language-Codes           ! called from prcslng.sqc

  do Security-Param

    Do DebugProc ('E', 'Init-Processing')
    
end-procedure !Init-Processing


begin-procedure Process-Main

    Do DebugProc ('S', 'Process-Main') 
 do Check-Report-Type

 do Get-Target-DBName

 do Init-Report

 If rtrim(&PKG_COMPARE_DTTM,' ') <> ''

    do Print-Summary

    do Process-Countries-except-ALL

    do Process-Country-ALL
 else
    print $NO_RPT_Lbl (15) BOLD center
 End-if
Do DebugProc ('E', 'Process-Main') 
end-procedure !Process-Main

!**********************************
!begin-procedure Check-Report-Type
!**********************************
begin-procedure Check-Report-Type
  
  Do DebugProc ('S', 'Check-Report-Type')
BEGIN-SELECT
GP_PKG_ID
GP_VERSION_IND
DESCR   &pkgDescr
GPDBNAME
PKG_COMPARE_DTTM
PKG_IMPORT_DTTM
PKG_UPGRADE_DTTM

   Let $pkgDescr = rtrim(&pkgDescr,' ')

   FROM PS_GP_PKG_DFN
     WHERE GP_PKG_ID = $GP_PKG_ID
END-SELECT
  Do DebugProc ('E', 'Check-Report-Type')
End-procedure !Check-Report-Type

!**********************************
!begin-procedure Get-Target-DBName
!**********************************
begin-procedure Get-Target-DBName
  Do DebugProc ('S', 'Get-Target-DBName') 
BEGIN-SELECT
RQ.DBNAME
  FROM PSPRCSPARMS OD , PSPRCSRQST  RQ
    WHERE OD.PRCSINSTANCE  = RQ.PRCSINSTANCE
      AND RQ.PRCSINSTANCE = #prcs_process_instance
end-select
  Do DebugProc ('E', 'Get-Target-DBName') 
end-procedure ! Get-Target-DBName

!**************************
!begin-procedure Init-Report
!**************************
begin-procedure Init-Report
  Do DebugProc ('S', 'Init-Report') 
! Column definitons
!Transaction Columns
  #define Col_1         1
  #define Col_2         5
  #define Col_3         4

  #define Col_4         20
  #define Col_4b        17
  #define Col_4a        24
  #define Col_4c        19

  #define Col_5         49
  #define Col_5a        50
  #define Col_6         10

  #define Col_7         75
  #define Col_7a        91
  #define Col_7b        93

  #define Col_8         75
  #define Col_8a        72
  #define Col_9         130
  #define Col_10        152
  #define Col_10a       154

  #define SCol_1        7
  #define SCol_1a       11
  #define SCol_2        35
  #define SCol_3        50
  #define SCol_3a       59
  #define SCol_4        90
  #define SCol_4a       98

  #define MaxFMLCol     47


!Transaction Rows
  #define Row_1         15

! Translations procedures & Strings Table retrievals.

  do Init_Report_Translation ($ReportID,$curr_Language_Cd)
  do Append_Report_Translation ('UVGPX20')

  do Get_Field_Information ('UVGPX20 ','RULE PCKG',    $RULE_PCKG_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','RPT TYPE',     $RPT_TYPE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','PCKG NAME',    $PCKG_NAME_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','SOURCE DB',    $SOURCE_DB_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','TRGT DB',      $TRGT_DB_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','IMPORTED AT',  $IMPORTED_AT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','CMPRD AT',     $CMPRD_AT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','UPGD AT',      $UPGD_AT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','VERSION',      $VERSION_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','ELEMENT',      $ELEMENT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','RCD.FLD',      $RCD_FLD_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','PIN CODE',     $PIN_CODE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','PIN TYPE',     $PIN_TYPE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','UPGRD ACTION', $UPGRD_ACTION_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','CMPR STATUS',  $CMPR_STATUS_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','CMPR RPT',     $CMPR_RPT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','GPPIN',        $GPPIN_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NAME',         $NAME_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','PINNUM',       $PINNUM_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','DESCR',        $DESCR_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','COMMENTS',     $COMMENTS_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','UPGRD',        $UPGRD_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','MOD ELE',      $MOD_ELE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','ERRORFAIL',    $ERRORFAIL_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NEWELE',       $NEWELE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','DELELE',       $DELELE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','UNCHANGEDELE', $UNCHANGEDELE_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','FORMTEXT',     $FORMTEXT_lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','VERSIONPKG',   $GPVersionLbl,#DW)
  do Get_Field_Information ('UVGPX20 ','SUMMARY',      $SUMMARY_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','COUNTRY',      $COUNTRY_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','RULE PKG DTL', $RULE_PKG_DTL_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','RULE PKG TYPE',$RULE_PKG_TYPE_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','REG',          $REG_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','VER IN PKG',   $VER_IN_PKG_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','CMPR RPT DTL', $CMPR_RPT_DTL_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','CTRY IN PKG',  $CTRY_IN_PKG_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','PRINT OPTNS',  $PRINT_OPTNS_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NO OF ELEM',   $NO_OF_ELEM_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','ERR WARN',     $ERR_WARN_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','MOD',          $MOD_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NEW',          $NEW_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','DEL',          $DEL_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','UNCHG',        $UNCHG_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','YES',          $YES_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NO',           $NO_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NO DATA',      $NO_DATA_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','ALL DESCR',    $ALL_DESCR_Lbl,#DW)
  do Get_Field_Information ('UVGPX20 ','NO RPT',       $NO_RPT_Lbl,#DW)


! Initialize date formatting.

  Let $RPT_TYPE_1_lbl  = rtrim($RPT_TYPE_lbl,' ') || ':'
  Let $RPT_TYPE_2_lbl  = rtrim($RPT_TYPE_lbl,' ')
  Let $PCKG_NAME_lbl = rtrim($PCKG_NAME_lbl,' ') || ':'
  Let $SOURCE_DB_1_lbl = rtrim($SOURCE_DB_lbl,' ') || ':'
  Let $SOURCE_DB_2_lbl = rtrim($SOURCE_DB_lbl,' ')
  Let $TRGT_DB_1_lbl   = rtrim($TRGT_DB_lbl,' ') || ':'
  Let $TRGT_DB_2_lbl   = rtrim($TRGT_DB_lbl,' ')
  Let $IMPORTED_AT_lbl = rtrim($IMPORTED_AT_lbl,' ') || ':'
  Let $CMPRD_AT_lbl  = rtrim($CMPRD_AT_lbl,' ') || ':'
  Let $PIN_CODE_lbl  = rtrim($PIN_CODE_lbl,' ') || ':'
  Let $PIN_TYPE_lbl  = rtrim($PIN_TYPE_lbl,' ') || ':'
  Let $UPGRD_ACTION_lbl = rtrim($UPGRD_ACTION_lbl,' ') || ':'
  Let $UPGRD_lbl = rtrim($UPGRD_lbl,' ') || ':'
  Let $CMPR_STATUS_lbl = rtrim($CMPR_STATUS_lbl,' ') || ':'
  Let $COUNTRY_lbl = rtrim($COUNTRY_lbl,' ') || ':'
  Let $RULE_PKG_TYPE_lbl = rtrim($RULE_PKG_TYPE_lbl,' ') || ':'
  Let $VER_IN_PKG_lbl = rtrim($VER_IN_PKG_lbl,' ') || ':'
  Let $CTRY_IN_PKG_lbl = rtrim($CTRY_IN_PKG_lbl,' ') || ':'
  Let $ALL_DESCR_lbl = rtrim($ALL_DESCR_lbl,' ')

    let $Date_Init = '1900-01-01 00:00:00.000'

    #ifdef ORACLE
           let $Date_Init = '01-NOV-1999'
    #end-if

    do Format-DateTime($Date_Init, $out999, {DEFDATE}, '', '')
! Report variables.
  let $ReportID       = 'UVGPX20'
! Report title will be populated when we retrieve the package description
  let $ReportTitle    = $RULE_PCKG_lbl || ': ' || rtrim(&GP_PKG_ID,' ') || ' (' || $pkgDescr || ') ' || $CMPR_RPT_lbl

  let $pagenew='false'

   Let $chr13 = chr(13)
   Let $chr10 = chr(10)

   Let $finalReformat = 'N'
   let $matchMakeEnabled = 0 ! this flag is set to 1 by the matchmaking procedure. If the procedure call is disabled
                             ! we dont want to scan for line type identifiers during the printing routine.

   !Let $ShowDebugInfo = 'Y'
   Let $GraphicEnabledInMatch = 'Y'
   let #GlobalDepth = 1
   let $DataFound = 'N'
   Do DebugProc ('E', 'Init-Report') 
end-procedure !Init-Report

!**********************************
!begin-procedure Print-Summary
!**********************************
begin-procedure Print-Summary

  Do DebugProc ('S', 'Print-Summary') 

  let $SummaryPage='Y'
  Let $Rpt_type = $SUMMARY_lbl
  do Rule-Pkg-Dtl
  do Compare-Rpt-Dtl
  new-page
  let $SummaryPage='N'
  Do DebugProc ('E', 'Print-Summary')
end-procedure ! Print-Summary


!******************************
!begin-procedure Process-Countries-except-ALL
!******************************
begin-procedure Process-Countries-except-ALL
  Do DebugProc ('S', 'Process-Countries-except-ALL')
begin-SELECT DISTINCT
P7.COUNTRY

  let $Country=rtrim(&P7.COUNTRY,' ')
  do Get-Country-Descr
  let $Country_Dtl = &P7.COUNTRY||' ('||$Country_Descr||')'
  do Print-Sections
  if #current-line > 8
     New-page
  End-if

  FROM PS_GP_PKG_ELEMENTS P7
WHERE P7.GP_PKG_ID = &GP_PKG_ID
AND P7.COUNTRY <> 'ALL'
ORDER BY P7.COUNTRY
end-SELECT
  Do DebugProc ('E', 'Process-Countries-except-ALL')
end-procedure !Process-Countries-except-ALL

!***********************************
!begin-procedure Process-Country-ALL
!***********************************
begin-procedure Process-Country-ALL
  Do DebugProc ('S', 'Process-Countries-ALL')

  let $Country='ALL'
  let $Country_Dtl = $Country || ' (' || $ALL_DESCR_lbl || ')'
  do Print-Sections
  Do DebugProc ('E', 'Process-Countries-ALL')
end-procedure !Process-Country-ALL

!******************************
!begin-procedure Rule-Pkg-Dtl
!******************************
begin-procedure Rule-Pkg-Dtl
  Do DebugProc ('S', 'Rule-Pkg-Dtl')
  print $RULE_PKG_DTL_Lbl (+1) BOLD
  print $RULE_PKG_TYPE_lbl (+1,{SCol_1})

  If &GP_VERSION_IND = 'Y'
     print $VERSION_lbl (,{SCol_2})
     print $VER_IN_PKG_lbl (+1,{SCol_1})

     do Print-Versions
  else
     print $REG_Lbl (,{SCol_2})
  End-if

   print  $SOURCE_DB_1_lbl (+2,{SCol_1})
   print &GPDBNAME (,{SCol_2})
   print $TRGT_DB_1_lbl (+1,{SCol_1})
   print &RQ.DBNAME (,{SCol_2})
   print  $IMPORTED_AT_lbl (+1,{SCol_1})
   print &PKG_IMPORT_DTTM  (,{SCol_2})
   print  $CMPRD_AT_lbl (+1,{SCol_1})
   print &PKG_COMPARE_DTTM  (,{SCol_2})
   print  $UPGD_AT_lbl (+1,{SCol_1})
   print &PKG_UPGRADE_DTTM  (,{SCol_2})   
  Do DebugProc ('E', 'Rule-Pkg-Dtl')
end-procedure !Rule-Pkg-Dtl

!******************************
!begin-procedure Compare-Rpt-Dtl
!******************************
begin-procedure Compare-Rpt-Dtl
  Do DebugProc ('S', 'Compare-Rpt-Dtl')
  print $CMPR_RPT_DTL_Lbl (+3,1) BOLD
  print $CTRY_IN_PKG_lbl (+1,{SCol_1})

  do Print-Countries

  print $RPT_TYPE_2_lbl (+2,{SCol_1})
  print $PRINT_OPTNS_Lbl (,{SCol_3})
  print $NO_OF_ELEM_Lbl (,{SCol_4})

  print $ERR_WARN_Lbl (+1,{SCol_1a})
!  If &PRINT_ERR_WARN_IND = 'Y'
     do Get-Err-Warn-Cnt
     print $YES_Lbl (,{SCol_3a})
     print &No_of_Err_Warn (,{SCol_4a})
  !else
     !print $NO_Lbl (,{SCol_3a})
     !print '--' (,{SCol_4a})
  !End-if

  Do DebugProc ('E', 'Compare-Rpt-Dtl')  
end-procedure !Compare-Rpt-Dtl

!******************************
!begin-procedure Print-Versions
!******************************
begin-procedure Print-Versions
  Do DebugProc ('S', 'Print-Versions')
POSITION (-1)
begin-SELECT
GP_VERSION

   print &GP_VERSION (+1,{SCol_2})

  FROM PS_GP_PKG_CRITVER1 VER
  WHERE VER.GP_PKG_ID = &GP_PKG_ID
end-select
  Do DebugProc ('E', 'Print-Versions')
end-procedure !Print-Versions

!******************************
!begin-procedure Print-Countries
!******************************
begin-procedure Print-Countries
  Do DebugProc ('S', 'Print-Countries')
POSITION (-1)
begin-SELECT DISTINCT
P1.COUNTRY

   let $Country=&P1.COUNTRY
   do Get-Country-Descr
   let $Country_Dtl = &P1.COUNTRY||' ('||$Country_Descr||')'
   print $Country_Dtl (+1,{SCol_2})

  FROM PS_GP_PKG_ELEMENTS P1
WHERE P1.GP_PKG_ID = &GP_PKG_ID
AND P1.COUNTRY <> 'ALL'
AND (P1.GP_PKG_ELEM_CMP_ST IN ('F','W')
OR (P1.GP_PKG_ELEM_CMP_ST='S'
    AND P1.GP_PKG_UPG_OPTN='Y'
    AND P1.GP_PKG_UPG_ACTION <> 'I'))
ORDER BY P1.COUNTRY
end-SELECT

begin-SELECT
'X'

   let $Country = 'ALL'
   let $Country_Dtl = $Country || ' (' || $ALL_DESCR_lbl || ')'
   print $Country_Dtl (+1,{SCol_2})

  FROM PS_INSTALLATION
WHERE EXISTS
(SELECT
'X'
FROM
PS_GP_PKG_ELEMENTS P11
WHERE P11.GP_PKG_ID = &GP_PKG_ID
AND P11.COUNTRY = 'ALL'
AND (P11.GP_PKG_ELEM_CMP_ST IN ('F','W')
OR (P11.GP_PKG_ELEM_CMP_ST='S'
    AND P11.GP_PKG_UPG_OPTN='Y'
    AND P11.GP_PKG_UPG_ACTION <> 'I')))
end-SELECT
  Do DebugProc ('E', 'Print-Countries')
end-procedure !Print-Countries

!******************************
!begin-procedure Get-Err-Warn-Cnt
!******************************
begin-procedure Get-Err-Warn-Cnt
  Do DebugProc ('S', 'Get-Err-Warn-Cnt')
begin-SELECT
COUNT(*) &No_of_Err_Warn
FROM PS_GP_PKG_ELEMENTS P2
where P2.GP_PKG_ID = &GP_PKG_ID
AND P2.GP_PKG_ELEM_UPG_ST in ('N')
end-SELECT
  Do DebugProc ('E', 'Get-Err-Warn-Cnt')
end-procedure !Get-Err-Warn-Cnt

!***********************************
!begin-procedure Print-Sections
!***********************************
begin-procedure Print-Sections
  Do DebugProc ('S', 'Print-Sections')
  !If &PRINT_ERR_WARN_IND = 'Y'
     do Failed-Warning-Status
  !End-if
  Do DebugProc ('E', 'Print-Sections')

end-procedure !Print-Sections

!******************************
!begin-procedure Get-Values
!******************************
begin-procedure Get-Values
  Do DebugProc ('S', 'Get-Values')
   if $prcs_process_instance = ''
      do Ask-Values
   ELSE
      do Select-Parameters
   End-if

   do Format-DateTime($FromDate,$HdgFromDt,{DEFDATE}, '', '')
   do Format-DateTime($ThruDate,$HdgThruDt,{DEFDATE}, '', '')
  Do DebugProc ('E', 'Get-Values')
end-procedure !Get-Values

!*************************
!begin-procedure Ask-Values
!*************************
begin-procedure Ask-Values
  !input $IncludeDetail 'Include Detail?  Y/N' TYPE=char maxlen=1
end-procedure !Ask-Values

!**********************************
!begin-procedure Select-Parameters
!**********************************
begin-procedure Select-Parameters
  Do DebugProc ('S', 'Select-Parameters') 
BEGIN-SELECT
RUNP.GP_PKG_ID
  let $GP_PKG_ID  = rtrim(&RUNP.GP_PKG_ID,' ')
    FROM PS_GP_PKG_RUNCTL RUNP
      WHERE RUNP.OPRID= $prcs_oprid
        AND RUNP.RUN_CNTL_ID=$prcs_run_cntl_id
END-SELECT
  Do DebugProc ('E', 'Select-Parameters') 
end-procedure !Select-Parameters

!***************************
begin-heading 7
!***************************
#include 'stdhdg01.sqc'

!***********************************************************************
! Print column definitions.  Some fields are lined up vertically with  *
!   other fields on the report.  The first occurence of a column       *
!   location is defined.  After that, fields that occur in the same    *
!   column use the first field's column definition.  Field labels end  *
!   in _lbl.  Other column definitions are for the field values.       *
!***********************************************************************

!Line 1
!Transaction Header Line

      POSITION (-1)
      let $Report_Type = $RPT_TYPE_1_lbl || ' '|| $Rpt_type
      print $Report_Type () center BOLD
   if $SummaryPage='N'
      let $Country_Name = $COUNTRY_lbl || ' ' || $Country_Dtl
      print $Country_Name (+1)  center BOLD
      print '=' (+1,1,176) fill
      print $ELEMENT_lbl (+1,{Col_3})
      print $RCD_FLD_lbl (,{Col_5})
      print $SOURCE_DB_2_lbl (,{Col_8})
      print '(' ()
      print &GPDBNAME ()
      print ')' ()
      print $TRGT_DB_2_lbl (,{Col_9})
      print '(' ()
      print &RQ.DBNAME ()
      print ')' ()
      print '=' (+1,1,176) fill
   else
      print '=' (+2,1,176) fill
   End-if


end-heading

!*********************************
!begin-procedure Get-Heading3
!*********************************
begin-procedure Get-Heading3
   if $pagenew='true' and #current-line > 8
      New-page
   End-if
   next-listing no-advance need=3
   print $PIN_CODE_lbl (+1,{Col_3})
   print $pin_code (,{Col_4a})
   let #col_num = #current-line
   print $PIN_TYPE_lbl (+1,{Col_3})
   print $Pin_type  (,{Col_4a})
   let $flag ='true'
   let $pagenew='false'
   evaluate $ComparetypeFlag
     when = 'M'
       POSITION (-3)
       break
     when = 'N'
     when = 'D'
      POSITION (-2)
      break
     when-other
      break
   End-evaluate

end-procedure !Get-Heading3
!
!*********************************
!begin-procedure Get-Heading4
!*********************************
begin-procedure Get-Heading4
   next-listing  need=4
   print $PIN_CODE_lbl (+1,{Col_3})
   print $pin_code (,{Col_4a})
   print $PIN_TYPE_lbl (+1,{Col_3})
   print $pin_type  (,{Col_4a})
   !print $Pin_code (,{Col_5})
   print $UPGRD_ACTION_lbl (+1,{Col_3})
   print $upgaction (,{Col_4a})
   print $UPGRD_lbl (+1,{Col_3})
   print $upgoption (,{Col_4a})
   ! print $CMPR_STATUS_lbl (+1,{Col_3})
   ! print $cmprstatus (,{Col_4a})
   print $UPGRD_lbl (+1,{Col_3})
   print $UpgradeStatus (,{Col_4a})   
   let $FailReason1 =   '**' || $FailReason
   print $FailReason1 (+1,{Col_3})
   POSITION (-4)
   let $pagenew='false'

end-procedure !Get-Heading4

!************************************
!begin-procedure Pin-Num-Fail-GP-Pin
!************************************
begin-procedure Pin-Num-Fail-GP-Pin
  Do DebugProc ('S', 'Pin-Num-Fail-GP-Pin')
begin-SELECT
B.PIN_NM
B.PIN_NUM
B.PIN_TYPE
S.DESCR
S.PIN_TYPE
B.PIN_CODE

 let $Pin_code = rtrim(&B.PIN_CODE,' ')
 let $Pin_type = &S.DESCR

 if $Pin_code <> ''
    do Get-Pin-Pckg-Ele
 End-if

  FROM PS_GP_PIN B,  PS_GP_PIN_TYPE S
    WHERE B.PIN_NUM = #SrcPinNumFail
      AND B.PIN_TYPE = S.PIN_TYPE
end-select
  Do DebugProc ('E', 'Pin-Num-Fail-GP-Pin')
end-procedure !Pin-Num-Fail-GP-Pin

!*********************************
!begin-procedure Failed-Warning-Status
!*********************************
begin-procedure Failed-Warning-Status
   if #current-line > 8
     New-page
   End-if

      Let $Rpt_type = $ERRORFAIL_lbl
  Do DebugProc ('S', 'Failed-Warning-Status')
begin-SELECT
A.PIN_NUM
A.PIN_NUM_TGT
A.PIN_CODE
A.PIN_TYPE
A.GP_PKG_ELEM_CMP_ST
A.GP_PKG_UPG_ACTION
A.GP_PKG_FAIL_REASON
A.GP_PKG_UPG_OPTN
A.GP_PKG_ELEM_UPG_ST
T.DESCR
T.PIN_TYPE

   let $pin_code = &A.PIN_CODE
   let $FieldName = 'GP_PKG_ELEM_CMP_ST'
   let $FieldValue = &A.GP_PKG_ELEM_CMP_ST
   do Read-Translate-Table
   let $cmprstatus = $XlatShortName

   let $FieldName = 'GP_PKG_FAIL_REASON'
   let $FieldValue = &A.GP_PKG_FAIL_REASON
   do Read-Translate-Table
   let $FailReason = $XlatLongName

   let $Pin_type = &T.DESCR

   let $FieldName = 'GP_PKG_UPG_ACTION'
   let $FieldValue = &A.GP_PKG_UPG_ACTION
   do Read-Translate-Table
   let $upgaction =  $XlatLongName

   if &A.GP_PKG_UPG_OPTN = 'Y'
      let $upgoption =  $YES_Lbl
   else
      let $upgoption =  $NO_Lbl
   end-if

   let $FieldName = 'GP_PKG_ELEM_UPG_ST'
   let $FieldValue = &A.GP_PKG_ELEM_UPG_ST
   do Read-Translate-Table
   let $UpgradeStatus = $XlatLongName
   let  #SrcPinNumFail = &A.PIN_NUM + 50000000
   let #TgtPinNumFail  = &A.PIN_NUM_TGT
   do Get-Heading4
   do Pin-Num-Fail-GP-Pin

   let $DataFound = 'Y'

   FROM PS_GP_PKG_ELEMENTS A,  PS_GP_PIN_TYPE T
     WHERE A.GP_PKG_ID = &GP_PKG_ID
       ! AND A.GP_PKG_ELEM_CMP_ST in ('F', 'W')
       AND A.GP_PKG_ELEM_UPG_ST in ('N')
       AND A.PIN_TYPE = T.PIN_TYPE
       AND A.COUNTRY=$Country
ORDER BY A.GP_PKG_ELEM_UPG_ST, A.PIN_CODE
end-select
  Do DebugProc ('E', 'Failed-Warning-Status')
if $DataFound = 'N' and $Country <> 'ALL'
   print $NO_DATA_Lbl ({Row_1}) BOLD center
else
   let $DataFound = 'N'
End-if
end-procedure !Failed-Warning-Status

!****************************
!begin-procedure Get-Pin-Pckg-Ele
!****************************
begin-procedure Get-Pin-Pckg-Ele
  Do DebugProc ('S', 'Get-Pin-Pckg-Ele')
   print $GPPIN_lbl  ( ,{Col_5})
   print $PINNUM_lbl  (+1,{Col_5a}) BOLD
   print $Pin_code (,{Col_8})  BOLD
  Do DebugProc ('E', 'Get-Pin-Pckg-Ele')   
end-procedure !Get-Pin-Pckg-Ele

!*********************************
!begin-procedure Get-Country-Descr
!*********************************
begin-procedure Get-Country-Descr
  Do DebugProc ('S', 'Get-Country-Descr')
begin-SELECT
CTRY.DESCR

   let $Country_Descr = rtrim(&CTRY.DESCR,' ')

FROM PS_COUNTRY_TBL CTRY
WHERE CTRY.COUNTRY = $Country
end-SELECT

if $Curr_Language_Cd <> $PSOptions_Language_Cd
begin-SELECT
CTRYLNG.DESCR

  if rtrim(&CTRYLNG.DESCR,' ') <> ''
     let $Country_Descr = rtrim(&CTRYLNG.DESCR,' ')
  End-if

FROM PS_COUNTRYTBL_LANG CTRYLNG
WHERE CTRYLNG.COUNTRY=$Country
AND LANGUAGE_CD =  $Curr_Language_Cd
end-SELECT
End-if
  Do DebugProc ('E', 'Get-Country-Descr')
end-procedure !Get-Country-Descr


!
!***********************************************************************
! Additional SQCs included in the report                               *
!***********************************************************************
!
#include 'datetime.sqc'     !Routines for date and time formatting
#include 'datemath.sqc'     !Date conversion procedures
#include 'hrsecty.sqc'      !Get SQR Security parameters
#include 'sqrtrans.sqc'     !Translate SQR strings to given language
#include 'prcsapi.sqc'      !Replaces stdapi.sqc
#include 'prcslng.sqc'      !Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset.sqc'        !Reset printer procedure
#include 'number.sqc'       !Routines to format numbers


Begin-Procedure DebugProc ($step, $procName)

  if $_ShowDebugInfo = 'Y'
     Let $cDate = datenow()
     let $char = ''

     if $step = 'S'
        Let $showStatement = 'Starting : ' || $procName
        Show $showStatement noline
        show ' = ' noline
        show $cDate
     else
        Let $showStatement = 'Ended    : ' || $procName
        Show $showStatement noline
        show ' = ' noline
        show $cDate
     End-if
  End-if
End-Procedure
