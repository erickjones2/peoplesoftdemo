!***********************************************************************
! GPMYAM01.SQR        GLOBAL PAYROLL MYS ABSENCE HISTORY PROGRAM       *
!                                                                      *
!  Description:                                                        *
!                  This program will read the absence event record     *
!                  and find the corresponding values in the absence    *
!                  daily result table and format and print the absence *
!                  history report.                                     *
!                                                                      *
!                                                                      *
!***********************************************************************
        
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:54:08                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  ! Portrait Printer and page-size initialization

!List of constants for program 
#define $Term_Emps 'T'
 
#define colA  1
#define colA1 14
#define colB  24
#define colC  67
#define colD  74
#define colE  88
#define colF  110
#define colG  120
#define colH  130
#define colI  135
#define colJ  140
#define colK  160
#Define colL  170
#Define colM  177

begin-report

  do Init-DateTime
  do Init-Number
  do Init-Report
  do Get-Current-DateTime        
  do Process-Main
  do Reset
  do Stdapi-Term

end-report

Begin-Procedure Print-heading

#include 'stdhdg01.sqc'

   Let #Current_line_no = 4    ! Account for first 4 heading lines printed by sqc
      
   If rtrim($Pay_Entity, ' ') <> ''             
      let $header1 = 'Pay Entity   : ' || $Pay_Entity
      Print $Header1 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   End-If

   if $Sort_Key1 = '30' or $Sort_Key2 = '30' or $Sort_Key3 = '30' 
      If rtrim($Deptid, ' ') <> ''             
         let $header2 = 'Department   : ' || $Deptid
         Print $Header2 (+1, {colA})
         Print $dept_name (0, 35)
         Let #Current_line_no = #Current_line_no + 1    
      End-If
   End-If
 
   If rtrim($Emplid, ' ') <> ''             
      let $header3 = 'Employee     : ' || $Emplid
      Print $Header3 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   End-If
   
   If rtrim($Abs_Type, ' ') <> ''             
      let $header4 = 'Absence Type : ' || $Abs_Type
      Print $Header4 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   End-If
   
   If $Term_Emp_YN = 'Y'             
      let $header5 = 'Terminated Employees Are Included'  
      Print $Header5 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   Else
      let $header5 = 'Terminated Employees Not Included'  
      Print $Header5 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   End-If

   If rtrim($Date_From, ' ') <> ''             
      do Format-DateTime($Date_From, $Date_From_Conv, {DEFDMY}, '', '')
      let $header5 = 'From : ' || $Date_From_Conv  
      Print $Header5 (+1, {colA})
      Let #Current_line_no = #Current_line_no + 1    
   End-If
   If rtrim($Date_To, ' ') <> ''             
      do Format-DateTime($Date_To, $Date_To_Conv, {DEFDMY}, '', '')
      let $header6 = 'To : ' || $Date_To_Conv  
      Print $Header6 (0, 20)
      Let #Current_line_no = #Current_line_no + 1    
   End-If

     graphic (+1,{colA}, {colM}) Horz-line 
     Let #Current_line_no = #Current_line_no + 1    

     print 'Emplid'       (+1,{ColA})
     print 'Empl Rcd'     (0,{ColA1})
     print 'Name '        (0,{ColB})
     print 'Type '        (0,{ColC})
     print 'Begin Date'   (0,{ColD})
     print 'End Date'     (0,{ColE})
     print 'Paid ?'       (0,{ColF})
     print 'Mgr App ?'  (0,{ColG})
     print 'Duration '    (0,{ColH})
     print 'Duration Comp Y/N'    (0,{ColJ})
     print 'Voided'       (0,{ColK})
     print 'Reason'       (0,{ColL})
     Let #Current_line_no = #Current_line_no + 1    
       
     graphic (+1,{colA}, {colM}) Horz-line 
     Let #Current_line_no = #Current_line_no + 1    
 
end-procedure
!
!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report

  move 'GPMYAM01' to $ReportID
  move 'Absence History' to $ReportTitle
  display $ReportTitle

  do Stdapi-Init

  Let $PrintHeading = 'Y'
 do Select-Parameters

  do Define-Values

end-procedure
!
!**************************************************************************
!
! Procedure: Define-Values
!
! Description: Define general SQL Dynamic Query Variables.
!
!**************************************************************************
begin-procedure Define-Values

        display 'absence'

  if rtrim($Pay_Entity, ' ') <> ''
     let $where1 = 'AND E.PAY_ENTITY  = ''' || $Pay_Entity || ''' '
     let $where_temp = $where1 
  end-if

  if rtrim($Deptid, ' ') <> ''        
     let $where2 = ' AND D.DEPTID      = ''' || $Deptid || ''' '
     string $where2 $where_temp BY ' ' INTO  $where_temp
  end-if

  if rtrim($Setid_Dept, ' ') <> ''        
     let $where7 = 'AND D.SETID_DEPT  = ''' || $Setid_Dept || ''' '
       string $where7 $where_temp BY ' ' INTO $where_temp
  end-if
  
  if rtrim($Emplid, ' ') <> ''        
     let $where3 = 'AND B.EMPLID  = ''' || $Emplid || ''' '
     string $where3 $where_temp BY ' ' INTO  $where_temp
  end-if

  if rtrim($Abs_Type, ' ') <> ''        
     let $where4 = 'AND F.ABS_TYPE_OPTN  = ''' || $Abs_Type || ''' '
     string $where4 $where_temp BY ' ' INTO  $where_temp
  end-if

  if rtrim($Date_From, ' ') <> ''        
     let $where5 = 'AND B.END_DT  >= ''' || $Date_From || ''' '
     string $where5 $where_temp BY ' ' INTO  $where_temp
  end-if

  if rtrim($Date_To, ' ') <> ''        
     let $where6 = 'AND B.BGN_DT  <= ''' || $Date_To || ''' '
     string $where6 $where_temp BY ' ' INTO  $where_temp
  end-if
        
  if $Term_Emps_YN = 'N'
     let $where7 = 'AND D.EMPL_STATUS  <> ''' || $Term_Emps || ''' '
  end-if
  string $where7 $where_temp BY ' ' INTO  $where_temp
        
  let $where = $where_temp
display $where

!Sort order
  If rtrim($sort_key1, ' ') <> ''        
     evaluate $sort_key1
     when = '10'
          let $Sort_Order1  = 'ORDER BY E.PAY_ENTITY '
     when = '20'
          let $Sort_Order1  ='ORDER BY D.LOCATION '
     when = '30'
          let $Sort_Order1  ='ORDER BY D.DEPTID '
     when = '40'
          let $Sort_Order1  ='ORDER BY C.NAME '
     when = '50'
          let $Sort_Order1  ='ORDER BY D.GP_PAYGROUP '
     when-other
          break
     end-evaluate
     evaluate $sort_key2
     when = '10'
          let $Sort_Order2  = ', E.PAY_ENTITY '
     when = '20'
          let $Sort_Order2  =', D.LOCATION '
     when = '30'
          let $Sort_Order2  =', D.DEPTID '
     when = '40'
          let $Sort_Order2  =', C.NAME '
     when = '50'
          let $Sort_Order2  =', D.GP_PAYGROUP '
     when-other
          break
     end-evaluate
     evaluate $sort_key3
     when = '10'
          let $Sort_Order3  = ', E.PAY_ENTITY '
     when = '20'
          let $Sort_Order3  = ', D.LOCATION '
     when = '30'
          let $Sort_Order3 = ', D.DEPTID '
     when = '40'
          let $Sort_Order3  = ', C.NAME '
     when = '50'
          let $Sort_Order3  = ', D.GP_PAYGROUP '
     when-other
          break
     end-evaluate
     string $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order 
  else
     let $Sort_order = 'ORDER BY C.NAME '
  End-If
  Let $Sort_Lctn_Key_Found = 'N'
  if $Sort_Key1 = '20' or $Sort_Key2 = '20' or $Sort_Key3 = '20' 
     Let $Sort_Lctn_Key_Found = 'Y'
  else
     Let #Print_LCN_Name = 0
  End-If

end-procedure
!**************************************************************************
!
! Procedure: Process-Main
!
! Description: Main processing section
!
!**************************************************************************
begin-procedure Process-Main
        
        Let #Day_Count = 0
        Let $First_Emp = 'Y'
        Let $First_Dept = 'Y'
        Let $Paid_Check = 'Y'

        Let $Locn_First_Time = ''
        Let $SetidLocn_First_Time = ''

begin-SELECT on-error=SQL-Error
D.EMPLID
D.EMPL_RCD
D.EFFDT
C.NAME
D.SETID_DEPT
D.DEPTID
B.VOIDED_IND
B.ABSENCE_REASON
B.BGN_DT
B.END_DT
B.MANAGER_APPR_IND
E.PAY_ENTITY
F.ABS_TYPE_OPTN
D.SETID_LOCATION
D.LOCATION
 
        let $Empl_ID          = &D.EMPLID
        let #Empl_Rcd         = &D.EMPL_RCD            
        let $Name             = &C.NAME
        let $Begin_Dt         = &B.BGN_DT

        Let $Setid_DeptBGT       = &D.SETID_DEPT
        let $DeptidBGT           = &D.DEPTID  
        let $Voided_Ind       = &B.VOIDED_IND
        let $Abs_Reason       = &B.ABSENCE_REASON
        
        let $End_Dt           = &B.END_DT
        let $Mgr_Appr_Ind     = &B.MANAGER_APPR_IND
        let $Abs_Type_Optn    = &F.ABS_TYPE_OPTN

        Let $Setid_Location   = &D.SETID_LOCATION
        Let $Location         = &D.LOCATION
        Let $EE_Effdt         = &D.EFFDT
        Let $AllowPrint       = 'Y'

        if $Sort_Lctn_Key_Found = 'Y'
           if rtrim($Locn_First_Time,' ') = ''
              Do Get-Location-Description
              Let $Locn_First_Time      = $Location
              Let $SetidLocn_First_Time = $Setid_Location
           else
              if ($Locn_First_Time <> $Location) or ($SetidLocn_First_Time <> $Setid_Location)
                 Let $SetidLocn_First_Time = $Setid_Location
                 Let $Locn_First_Time      = $Location
                 Do Get-Location-Description
              end-if
           end-if
        end-if

        If $Term_Emp_YN <> 'Y'
           Do Check-Empl-Status
        End-if

        if $AllowPrint = 'Y'
           do Get-Absence-History
        End-if

FROM PS_GP_ABS_EVENT B,
PS_NAMES C,
PS_JOB D,
PS_GP_PYGRP E,
PS_GP_ABS_TAKE F
WHERE B.PIN_TAKE_NUM = F.PIN_NUM 
AND B.EMPLID = C.EMPLID
AND C.NAME_TYPE = 'PRI'
AND C.EFFDT = (SELECT MAX(C1.EFFDT)
                FROM PS_NAMES C1
                WHERE C.EMPLID = C1.EMPLID
                AND C.NAME_TYPE = C1.NAME_TYPE)        
AND B.EMPLID = D.EMPLID
AND B.EMPL_RCD = D.EMPL_RCD
AND D.EFFDT = (SELECT MAX(D1.EFFDT)
                FROM PS_JOB D1
                WHERE D.EMPLID = D1.EMPLID
                AND D.EMPL_RCD = D1.EMPL_RCD
                AND D1.EFFDT <= B.BGN_DT)
AND D.EFFSEQ = (SELECT MAX(D2.EFFSEQ)
                FROM PS_JOB D2
                WHERE D.EMPLID = D2.EMPLID
                AND D.EMPL_RCD = D2.EMPL_RCD
                AND D.EFFDT    = D2.EFFDT)
AND F.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM PS_GP_ABS_TAKE F1
                WHERE F.PIN_NUM = F1.PIN_NUM
                AND F1.EFFDT <= B.BGN_DT)       
AND D.GP_PAYGROUP = E.GP_PAYGROUP 
      [$where]
      [$sort_order] 
end-SELECT

!If it is a nil report, print out Nil Report.

  if $PrintHeading = 'Y'
     Do Print-Heading
     Print 'Nil Report' (+2) Center
 End-If
!Set the flag to print the 'End of report' line at conclusion of printing
  let #msgflagw = 1

end-procedure
!
!**************************************************************************
!
! Procedure:  Check-Empl-Status
!
! Description: Check the status of the employee 
!**************************************************************************
!
Begin-procedure Check-Empl-Status

BEGIN-SELECT
EMP.TERMINATION_DT
      if rtrim(&EMP.TERMINATION_DT,' ') <> ''
         Let $AllowPrint = 'N'
      End-if   
   FROM PS_EMPLOYMENT EMP
    WHERE EMP.EMPLID   = $Empl_ID
      AND EMP.EMPL_RCD = #Empl_Rcd
END-SELECT
End-Procedure
!
!**************************************************************************
!
! Procedure:  Print-Empl-Dtls
!
! Description: Print the employees details
!**************************************************************************
!
Begin-procedure Print-Empl-Dtls

  if $Sort_Key1 = '30' or $Sort_Key2 = '30' or $Sort_Key3 = '30' 
     If $Deptid <> $Save_DeptID
        if rtrim($Save_DeptID,' ') <> ''
           new-page
           Let $PrintHeading = 'Y'
        end-if
        Do Get_Dept
        Let $Save_DeptId = $DeptID 
        Let #Print_LCN_Name = 1
     End-If
  End-If

  If #Current_line_no > 54   
     new-page    
     Let $PrintHeading = 'Y'
  End-if

  if $PrintHeading = 'Y'
     Do Print-heading
     Let $PrintHeading = 'N'     
  End-if
  if $Sort_Key1 = '20' or $Sort_Key2 = '20' or $Sort_Key3 = '20' 
     IF #Print_LCN_Name
        Print ' '             (+1,1)
        Print 'Location : '   (+1,1) BOLD
        Print $Location_Name  (0,15) BOLD
        Print ' '             (+1,1)
        Let #Print_LCN_Name = 0
     End-if
  End-If
        print $Empl_ID          (+1,{ColA})
        print #Empl_Rcd         (0, {ColA1}) edit '99'
        print $Name             (0,{ColB})
        print $Abs_Type_Optn    (0,{ColC})
        print $Begin_Dt_Conv    (0,{ColD})
        print $End_Dt_Conv      (0,{ColE})
        print $Paid_YN          (0,{ColF})
        print $Mgr_Appr_Ind     (0,{ColG})
        print #Day_Count        (0,{ColH})
        print $Dur_Comp_YN      (0,{ColJ})
        print $Voided_Ind       (0,{ColK})
        print $Abs_Reason       (0,{ColL})

        let $Empl_ID        =  ''      
        let $Name           =  ''      
        let $Abs_Type_Optn  =  ''
        let $Begin_Dt_Conv  =  ''
        let $End_Dt_Conv    =  ''
        let $Paid_YN        =  ''
        let $Mgr_Appr_Ind   =  ''
        let $Dur_Comp_YN    =  ''
        let $Voided_Ind     =  ''
        let $Abs_Reason     =  ''

        Let #Day_Count = 0
        Let $Paid_Check = 'Y'
        Let #Current_line_no = #Current_line_no + 1
end-procedure        

!**************************************************************************
!
! Procedure: Page-Break
!
! Description: Control page breaks.
!
!**************************************************************************
begin-procedure Page-Break
  If $First_Dept = 'Y'
     let $First_Dept = 'N'
  Else        
     New-Page
  End-If
end-procedure
!**************************************************************************
!
! Procedure: Get-Absence-History
!
! Description: Get the absence history data for the absence event.
!
!**************************************************************************
begin-procedure Get-Absence-History
 
  Let #Day_Count        = 0
  let #Day_Count_Paid   = 0
  let #Day_Count_UnPaid = 0
begin-SELECT on-error=SQL-Error
A.EMPLID          
A.DAY_COUNT_PAID   &A.DAY_COUNT_PAID 
A.DAY_COUNT_UNPAID &A.DAY_COUNT_UNPAID

        let #Day_count = #Day_count + 1

        let #Day_Count_Paid   = #Day_Count_Paid + &A.DAY_COUNT_PAID
        let #Day_Count_UnPaid = #Day_Count_UnPaid + &A.DAY_COUNT_UNPAID

FROM PS_GP_RSLT_ABS A 
WHERE EMPLID = $Empl_ID
  AND EMPL_RCD = #Empl_Rcd
  AND ABSENCE_DATE >= $Begin_Dt
  AND ABSENCE_DATE <= $End_Dt
  AND DAY_COUNT > 0
end-SELECT

     if #Day_Count_Paid <> 0 OR #Day_Count_Unpaid <> 0
        if #Day_Count_Paid > 0 AND #Day_Count_Unpaid = 0
           let $Paid_YN = 'Y'
        end-if

        if #Day_Count_Paid = 0 AND #Day_Count_Unpaid > 0
           let $Paid_YN = 'N'
        end-if

        if #Day_Count_Paid > 0 AND #Day_Count_Unpaid > 0
           let $Paid_YN = 'P'
        end-if

!Check if the absence duration is completed

        if $End_Dt > $Date_To
           let $Dur_Comp_YN = 'Y'
        else
           let $Dur_Comp_YN = 'N'
        end-if

        do Format-DateTime($Begin_Dt, $Begin_Dt_Conv, {DEFDATE}, '', '')
        do Format-DateTime($End_Dt, $End_Dt_Conv, {DEFDATE}, '', '')

        do Print-Empl-Dtls
    end-if
end-procedure
!
!**************************************************************************
! Procedure: Get_dept
! Description: Get the dept name of the payee
!**************************************************************************
begin-procedure Get_dept
  Let $Dept_Name = ''
begin-SELECT on-error=SQL-Error
DPT.DESCR

      Let $dept_name = rtrim(&DPT.DESCR,' ')

FROM PS_DEPT_TBL DPT 
WHERE DPT.DEPTID = $Deptid
  AND DPT.SETID  = $Setid_Dept
  AND DPT.EFFDT  = (SELECT MAX(DPT1.EFFDT) FROM PS_DEPT_TBL DPT1
                      WHERE DPT1.DEPTID = DPT.DEPTID
                        AND DPT1.SETID  = DPT.SETID
                        AND DPT1.EFFDT  <= $EE_Effdt
                   )
END-SELECT
end-procedure
!
!
!**************************************************************************
! Procedure: Get-Location-Description
! Description: Get the Location name of the payee
!**************************************************************************
begin-procedure Get-Location-Description
  Let $Location_Name = ''
begin-SELECT on-error=SQL-Error
LCN.DESCR

     Let $Location_name = rtrim(&LCN.DESCR,' ')
     Let #Print_LCN_Name = 1

FROM PS_LOCATION_TBL LCN 
WHERE LCN.LOCATION = $Location
  AND LCN.SETID    = $Setid_Location
  AND LCN.EFFDT  = (SELECT MAX(LCN1.EFFDT) FROM PS_DEPT_TBL LCN1
                      WHERE LCN1.LOCATION = LCN.LOCATION
                        AND LCN1.SETID  = LCN.SETID
                        AND LCN1.EFFDT  <= $EE_Effdt
                   )
END-SELECT
end-procedure
!

#Include 'reset.sqc'     !Reset printer procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers

#Include 'gpmyrntl.sqc'  !Select GP malaysia Reports Run control Parameters 

