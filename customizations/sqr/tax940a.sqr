!****************************************************
!  TAX940A: FUTA Taxable Wages by UI State Report   *
!****************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2014/02/06:12:01:16                                 !
!       $Release:  HR92                                                !
!      $Revision:  109                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'   !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Stdapi-Init
  move 'TAX940A' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.

  move $Tax940A_Title to $ReportTitle
  display $ReportTitle

  do Init-DateTime
  do Init-Number


  if $Prcs_Process_Instance = ''

    input $ParmYr maxLen=4 type=Number 'Enter Desired Year (YYYY)'
    input $ParmQtr maxLen=1 type=Number 'Enter Quarter Number'
    
    let $Tax940a-Bal-ID = 'CY'
    let #Tax940a-Bal-Year = to_number($ParmYr)
    let #Tax940a-Bal-Qtr = to_number($ParmQtr)
    
  else
    
    do Get-Report-Parameters
   
    let $Tax940a-Bal-ID   = rtrim(&RC_TAX940A.BALANCE_ID,' ')
    let #Tax940a-Bal-Year = &RC_TAX940A.BALANCE_YEAR
    let #Tax940a-Bal-Qtr  = &RC_TAX940A.BALANCE_QTR

  end-if
   
    move #Tax940a-Bal-Year to $Tax940a-RptYear 9999
    move #Tax940a-Bal-Qtr  to $Tax940a-RptQtr  9
    let #Tax940a-Bal-QtrPtr = #Tax940a-Bal-Qtr


  if #Tax940a-Bal-Qtr > 0
    move 'Quarterly ' to $ReportTitlePeriod

    evaluate $Tax940a-RptQtr
      when = '1'
        
        move '1st Quarter ' to $Tax940a-Period
        let $AsOfDate = $Tax940a-RptYear || '0331'
        let #AsOfMonth = 3
        break
      when = '2'

        move '2nd Quarter ' to $Tax940a-Period
        let $AsOfDate = $Tax940a-RptYear || '0630'
        let #AsOfMonth = 6
        break
      when = '3'

        move '3rd Quarter ' to $Tax940a-Period
        let $AsOfDate = $Tax940a-RptYear || '0930'
        let #AsOfMonth = 9
        break
      when = '4'

        move '4th Quarter ' to $Tax940a-Period
        let $AsOfDate = $Tax940a-RptYear || '1231'
        let #AsOfMonth = 12
        break
    end-evaluate
  
        let $Tax940a-RptYearPrt = $Tax940a-Period || $Tax940a-RptYear
  else
     
    let $AsOfDate = $Tax940a-RptYear || '1231'
    let $HeadingTaxYearOnly = 'Y'
    let #Tax940a-Bal-Qtr = 4
    let $Tax940a-RptYearPrt = 'Tax Year ' || $Tax940a-RptYear
    let #AsOfMonth = 12
  end-if

  do Format-DateTime($AsOfDate, $AsOfDate, {DEFCMP}, '', 'native')

end-procedure

!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
!Read language-dependent text from the database.

begin-procedure Report-Translation        ! Read from PAY102CN  program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('TAX940A', 'TITLE_WORK_COMP'   , $Tax940A_Title           , #dummy_width)
   do Get_Field_Information ('TAX940A', 'UISTATE'           , $Tax940A_UIState         , #dummy_width)
   do Get_Field_Information ('TAX940A', 'EMPLID'            , $Tax940A_EMPLID          , #dummy_width)
   do Get_Field_Information ('TAX940A', 'EMPNAME'           , $Tax940A_EmpName         , #dummy_width)
   do Get_Field_Information ('TAX940A', 'CHECK'             , $Tax940A_Check           , #dummy_width)
   do Get_Field_Information ('TAX940A', 'PAYDATE'           , $Tax940A_PayDate         , #dummy_width)
   do Get_Field_Information ('TAX940A', 'WAGE'              , $Tax940A_Wage            , #dummy_width)
   do Get_Field_Information ('TAX940A', 'FOR_PERIOD_HDG'    , $Tax940A_for_period_hdg  , #dummy_width)
   do Get_Field_Information ('TAX940A', 'THROUGH_HDG'       , $Tax940A_through_hdg     , #dummy_width)
   do Get_Field_Information ('TAX940A', 'ALL'               , $Tax940A_All             , #dummy_width)
   do Get_Field_Information ('TAX940A', 'NO_UI_STATE'       , $Tax940A_NO_UI_STATE     , #dummy_width)
   do Get_Field_Information ('TAX940A', 'EIN'               , $Tax940A_EIN             , #dummy_width)

end-procedure

begin-heading 8

  #Include 'stdhdg01.sqc'
  print $Tax940A_EIN                        (3,1,11)
  print $StoredEIN                          (0,+01)
  if $HeadingForCompany = 'Y'
    print 'Company:'                        (+1,1,11)
    print $StoredCompany                    (0,13,3)
    print $StoredDescr                      (0,17)
  else
    print ' '                               (+1,1)
  end-if

!-----------------column headings line1

  if $HeadingTaxYearOnly = 'Y'
    print 'YTD'                              (+002, 144)
    print $Tax940A_UIState                   (+001, 002)
    print $Tax940A_EMPLID                    ( 000, 027)
    print $Tax940A_EmpName                   ( 000, 040)
    print $Tax940A_Wage                      ( 000, 136)
  else
    print 'QTD'                              (+002, 94)
    print 'YTD'                              ( 000, 144)
    print $Tax940A_UIState                   (+001, 002)
    print $Tax940A_EMPLID                    ( 000, 027)
    print $Tax940A_EmpName                   ( 000, 040)
    print $Tax940A_Wage                      ( 000, 86)
    print $Tax940A_Wage                      ( 000, 136)
  end-if 

    print $Tax940a-RptYearPrt                (3,)    center

end-heading

begin-procedure Process-Main

!  if report parameters show to just report summary the call summary
!  otherwise do the employee detail

!  comments can be removed when employee leve detail options are required

! if &RC_TAX940A.PY_TAX940A_OPTIONS = 'S'

    do Get-FEIN-Company

! else
!   if &RC_TAX940A.PY_TAX940A_OPTIONS = 'D'
!     do Get-Payment-Date-Detail
!   else
!     do Get-Employee-Detail
!   end-if
! end-if


end-procedure


begin-procedure Get-FEIN-Company

  let $First-Row = 'Y'
  let $HeadingForCompany = 'Y'

begin-SELECT
COM.FEDERAL_EIN
COM.COMPANY
COM.DESCR

  move &COM.Federal_EIN to $StoredEIN      099999999
  move &COM.Company     to $StoredCompany
  move &COM.Descr       to $StoredDescr

  if $First-Row = 'Y'
    move &COM.Federal_EIN   to #Prev-StoredEIN
    let $First-Row = 'N'
  end-if
  
  if &COM.Federal_EIN <> #Prev-StoredEIN

    if $Federal-EIN-Sel = 'Y'
          and #Company-Num > 1
 
      move #Prev-StoredEIN to  $StoredEIN  099999999
      do Get-FEIN-Summary
      let $Federal-EIN-Sel = 'N'
      
    end-if

    move &COM.Federal_EIN to #Prev-StoredEIN
    move &COM.Federal_EIN to $StoredEIN    099999999
    move 0 to #Company-Num
    move 0 to #FEIN-TxGrs-QTD-Tot
    move 0 to #FEIN-TxGrs-YTD-Tot
  end-if

  do Get-Company-Summary

FROM  PS_COMPANY_TBL COM
WHERE  COM.COUNTRY = 'USA'
AND EFFDT = (SELECT MAX(EFFDT)
            FROM PS_COMPANY_TBL
            WHERE COMPANY = COM.COMPANY
            AND   EFFDT  <= $AsOfDate) 

ORDER BY COM.FEDERAL_EIN, COM.COMPANY

end-SELECT
  
  if $Federal-EIN-Sel = 'Y'
        and #Company-Num > 1
    
    do Get-FEIN-Summary
  end-if

end-procedure


begin-procedure Get-FEIN-Summary

  let $HeadingForCompany = 'N'
  
  print 'Federal EIN Totals'        (+001, 002)
  print $Tax940A_All                ( 000, 027)

  if #Tax940a-Bal-QtrPtr = #Tax940a-Bal-Qtr
     and #FEIN-TxGrs-QTD-Tot <> 0

     do Format-Number(#FEIN-TxGrs-QTD-Tot,$Out,'999,999,999,999,999.00')
     print $Out                        ( 000, 82)
  end-if
  
  do Format-Number(#FEIN-TxGrs-YTD-Tot,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 132)
  
  let #FEIN-TxGrs-QTD-Tot = 0
  let #FEIN-TxGrs-YTD-Tot = 0
  new-page

  let $HeadingForCompany = 'Y'

end-procedure


begin-procedure Get-Company-Summary

begin-select
T1.COMPANY
SN.DESCR
T1.STATE

#ifdef DB2ALL
DECIMAL(SUM(T1.TXGRS_YTD),15,3) &T1.TXGRS_YTD

#else
SUM(T1.TXGRS_YTD)               &T1.TXGRS_YTD

#endif

  print &SN.Descr                   (+001, 002)
  print $Tax940A_All                ( 000, 027)

  do Get-Company-Summary-Qtr
  do Format-Number( &T1.TXGRS_YTD,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 132)
  let #Comp-TxGrs-YTD-Tot = #Comp-TxGrs-YTD-Tot + &T1.TXGRS_YTD
  
  let $Company-Sel = 'Y'
  let $Federal-EIN-Sel = 'Y'

FROM  PS_TAX_BALANCE T1,
      PS_STATE_NAMES_TBL SN
WHERE T1.BALANCE_ID = $Tax940a-Bal-ID
  AND T1.BALANCE_YEAR = #Tax940a-Bal-Year
  AND T1.COMPANY = $StoredCompany
  AND T1.STATE BETWEEN 'AA' AND 'ZZ'
  AND T1.TXGRS_YTD <> 0
  AND T1.TAX_CLASS = '6'     
  AND SN.COUNTRY = 'USA'
  AND SN.STATE = T1.STATE
  AND T1.BALANCE_PERIOD =
      (SELECT MAX(A1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE A1
       WHERE  A1.COMPANY       = T1.COMPANY
         AND  A1.EMPLID        = T1.EMPLID
         AND  A1.STATE         = T1.STATE
         AND  A1.TAX_CLASS     = T1.TAX_CLASS
         AND  A1.BALANCE_ID    = T1.BALANCE_ID
         AND  A1.BALANCE_YEAR  = T1.BALANCE_YEAR
         AND  A1.BALANCE_PERIOD <= #AsofMonth)
GROUP BY T1.COMPANY, SN.DESCR, T1.STATE
ORDER BY T1.COMPANY, SN.DESCR, T1.STATE

end-select

  if $Company-Sel = 'Y'
  do Company-Change
  end-if

end-procedure


begin-procedure Get-Company-Summary-Qtr

begin-select

R1.BALANCE_QTR


#ifdef DB2ALL
DECIMAL(SUM(R1.TXGRS_QTD),15,3) &R1.TXGRS_QTD
#else
SUM(R1.TXGRS_QTD)               &R1.TXGRS_QTD
#endif

     if &R1.BALANCE_QTR = #Tax940a-Bal-QtrPtr
       do Format-Number( &R1.TXGRS_QTD,$Out,'999,999,999,999,999.00')
       print $Out                        ( 000, 82)
       let #Comp-TxGrs-QTD-Tot = #Comp-TxGrs-QTD-Tot + &R1.TXGRS_QTD
     end-if 

FROM  PS_TAX_BALANCE R1
WHERE R1.BALANCE_ID = $Tax940a-Bal-ID
  AND R1.BALANCE_YEAR = #Tax940a-Bal-Year
  AND R1.COMPANY = $StoredCompany
  AND R1.STATE = &T1.STATE
  AND R1.TXGRS_QTD <> 0
  AND R1.TAX_CLASS = '6'     
  AND R1.BALANCE_PERIOD =
      (SELECT MAX(G1.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE G1
       WHERE  G1.COMPANY       = R1.COMPANY
         AND  G1.EMPLID        = R1.EMPLID
         AND  G1.STATE         = R1.STATE
         AND  G1.TAX_CLASS     = R1.TAX_CLASS
         AND  G1.BALANCE_ID    = R1.BALANCE_ID
         AND  G1.BALANCE_YEAR  = R1.BALANCE_YEAR
         AND  G1.BALANCE_PERIOD <= #AsofMonth)
GROUP BY R1.BALANCE_QTR

end-select

end-procedure


begin-procedure Company-Change

begin-select

T3.COMPANY

#ifdef DB2ALL
DECIMAL(SUM(T3.TXGRS_YTD),15,3)   &T3.TXGRS_YTD
#else
SUM(T3.TXGRS_YTD)                 &T3.TXGRS_YTD
#endif

  print $Tax940A_NO_UI_STATE        (+001, 002)
  print $Tax940A_All                ( 000, 027)

  do Company-Change-Qtr

  do Format-Number(&T3.TXGRS_YTD,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 132)
  let #Comp-TxGrs-YTD-Tot = #Comp-TxGrs-YTD-Tot + &T3.TXGRS_YTD

FROM  PS_TAX_BALANCE T3
WHERE T3.BALANCE_ID = $Tax940a-Bal-ID
  AND T3.BALANCE_YEAR = #Tax940a-Bal-Year
  AND T3.COMPANY = $StoredCompany
  AND T3.STATE = '$U'
  AND T3.TAX_CLASS = 'U' 
  AND T3.TXGRS_YTD <> 0
  AND T3.BALANCE_PERIOD =
      (SELECT MAX(A3.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE A3
       WHERE  A3.COMPANY       = T3.COMPANY
         AND  A3.EMPLID        = T3.EMPLID
         AND  A3.STATE         = T3.STATE
         AND  A3.TAX_CLASS     = T3.TAX_CLASS
         AND  A3.BALANCE_ID    = T3.BALANCE_ID
         AND  A3.BALANCE_YEAR  = T3.BALANCE_YEAR
         AND  A3.BALANCE_PERIOD <= #AsofMonth)
  AND NOT EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE B3
     WHERE B3.BALANCE_ID = T3.BALANCE_ID
       AND B3.BALANCE_YEAR = T3.BALANCE_YEAR
       AND B3.BALANCE_PERIOD = T3.BALANCE_PERIOD
       AND B3.COMPANY = T3.COMPANY
       AND B3.EMPLID = T3.EMPLID
       AND B3.STATE  BETWEEN 'AA' AND 'ZZ'
       AND B3.TAX_CLASS = 'U')
  AND (NOT EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE C3
     WHERE C3.BALANCE_ID = T3.BALANCE_ID
       AND C3.BALANCE_YEAR = T3.BALANCE_YEAR
       AND C3.BALANCE_PERIOD = T3.BALANCE_PERIOD
       AND C3.COMPANY = T3.COMPANY
       AND C3.EMPLID = T3.EMPLID
       AND C3.STATE  BETWEEN 'AA' AND 'ZZ'
       AND C3.TAX_CLASS = '6')
    OR EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE D3
     WHERE D3.BALANCE_ID = T3.BALANCE_ID
       AND D3.BALANCE_YEAR = T3.BALANCE_YEAR
       AND D3.BALANCE_PERIOD = T3.BALANCE_PERIOD
       AND D3.COMPANY = T3.COMPANY
       AND D3.EMPLID = T3.EMPLID
       AND D3.STATE  BETWEEN 'AA' AND 'ZZ'
       AND D3.TAX_CLASS = '6' AND D3.TXGRS_YTD = 0))
  GROUP BY T3.COMPANY
  ORDER BY T3.COMPANY

end-select

  do Get-Employee-Detail-NoState
  new-page

  if $Company-Sel = 'Y'

    print 'Company Totals '           (+001, 002)
    print $Tax940A_All                ( 000, 027)
    
    if #Tax940a-Bal-QtrPtr = #Tax940a-Bal-Qtr
       and #Comp-TxGrs-QTD-Tot <> 0

       do Format-Number(#Comp-TxGrs-QTD-Tot,$Out,'999,999,999,999,999.00')
       print $Out                        ( 000, 82)
    end-if
    do Format-Number(#Comp-TxGrs-YTD-Tot,$Out,'999,999,999,999,999.00')
    print $Out                        ( 000, 132)
    let #FEIN-TxGrs-QTD-Tot = #FEIN-TxGrs-QTD-Tot + #Comp-TxGrs-QTD-Tot
    let #FEIN-TxGrs-YTD-Tot = #FEIN-TxGrs-YTD-Tot + #Comp-TxGrs-YTD-Tot
    add 1 to #Company-Num
    let $Company-Sel = 'N'
    let #Comp-TxGrs-QTD-Tot = 0
    let #Comp-TxGrs-YTD-Tot = 0

    new-page
  end-if

end-procedure


begin-procedure Company-Change-Qtr

begin-select

R3.COMPANY
R3.BALANCE_QTR

#ifdef DB2ALL
DECIMAL(SUM(R3.TXGRS_QTD),15,3)   &R3.TXGRS_QTD
#else
SUM(R3.TXGRS_QTD)                 &R3.TXGRS_QTD
#endif
     
     if &R3.BALANCE_QTR = #Tax940a-Bal-QtrPtr
       do Format-Number( &R3.TXGRS_QTD,$Out,'999,999,999,999,999.00')
       print $Out                        ( 000, 82)
       let #Comp-TxGrs-QTD-Tot = #Comp-TxGrs-QTD-Tot + &R3.TXGRS_QTD
     end-if
FROM  PS_TAX_BALANCE R3
WHERE R3.BALANCE_ID = $Tax940a-Bal-ID
  AND R3.BALANCE_YEAR = #Tax940a-Bal-Year
  AND R3.COMPANY = $StoredCompany
  AND R3.STATE = '$U'
  AND R3.TAX_CLASS = 'U' 
  AND R3.TXGRS_QTD <> 0
  AND R3.BALANCE_PERIOD =
      (SELECT MAX(G3.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE G3
       WHERE  G3.COMPANY       = R3.COMPANY
         AND  G3.EMPLID        = R3.EMPLID
         AND  G3.STATE         = R3.STATE
         AND  G3.TAX_CLASS     = R3.TAX_CLASS
         AND  G3.BALANCE_ID    = R3.BALANCE_ID
         AND  G3.BALANCE_YEAR  = R3.BALANCE_YEAR
         AND  G3.BALANCE_PERIOD <= #AsofMonth)
  AND NOT EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE E3
     WHERE E3.BALANCE_ID = R3.BALANCE_ID
       AND E3.BALANCE_YEAR = R3.BALANCE_YEAR
       AND E3.BALANCE_PERIOD = R3.BALANCE_PERIOD
       AND E3.COMPANY = R3.COMPANY
       AND E3.EMPLID = R3.EMPLID
       AND E3.STATE  BETWEEN 'AA' AND 'ZZ'
       AND E3.TAX_CLASS = 'U')
  AND NOT EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE F3
     WHERE F3.BALANCE_ID = R3.BALANCE_ID
       AND F3.BALANCE_YEAR = R3.BALANCE_YEAR
       AND F3.BALANCE_PERIOD = R3.BALANCE_PERIOD
       AND F3.COMPANY = R3.COMPANY
       AND F3.EMPLID = R3.EMPLID
       AND F3.STATE  BETWEEN 'AA' AND 'ZZ'
       AND F3.TAX_CLASS = '6')
  GROUP BY R3.COMPANY,R3.BALANCE_QTR
  ORDER BY R3.COMPANY,R3.BALANCE_QTR

end-select

end-procedure


begin-procedure Company-Change-E

begin-select

EPC3.COMPANY
EPC3.EMPLID
EPC3.PAYCHECK_NBR
EPC3.CHECK_DT
EPN3.NAME

#ifdef DB2ALL
DECIMAL(SUM(EPT3.TXGRS_CUR),15,3)   &EPT3.TxGrs_Cur
#else
SUM(EPT3.TXGRS_CUR)                 &EPT3.TxGrs_Cur
#endif


  print $Tax940A_NO_UI_STATE         (+001, 002)
  print &EPC3.emplid                 ( 000, 027)
  print &EPN3.Name                   ( 000, 040)
  print &EPC3.PAYCHECK_NBR           ( 000, 090)
  print &EPC3.CHECK_DT               ( 000, 110)
  do Format-Number(&EPT3.TxGrs_Cur,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 152)

FROM  PS_PAY_CHECK EPC3,
      PS_PAY_TAX   EPT3,
      PS_PY_TAX940A_EMPL EEMP3,
      PS_PERSON_NAME EPN3
WHERE EPC3.COMPANY    = $Prev_Comp
AND   EPC3.CHECK_DT >=  &RC_TAX940A.FromDate
AND   EPC3.CHECK_DT <=  &RC_TAX940A.ThruDate
AND   EPC3.COMPANY    = EPT3.COMPANY
AND   EPC3.PAYGROUP   = EPT3.PAYGROUP
AND   EPC3.PAY_END_DT = EPT3.PAY_END_DT
AND   EPC3.OFF_CYCLE  = EPT3.OFF_CYCLE
AND   EPC3.PAGE_NUM   = EPT3.PAGE_NUM
AND   EPC3.LINE_NUM   = EPT3.LINE_NUM
AND   EPC3.SEPCHK     = EPT3.SEPCHK
AND   EPC3.PAYCHECK_STATUS IN ('A','F','R')
AND   EPT3.STATE = '$U'
AND   EPT3.TAX_CLASS = 'U'
AND   EPT3.TXGRS_CUR <> 0
AND   NOT EXISTS (SELECT 'X'
                  FROM  PS_PAY_TAX   EPT4
                  WHERE EPT4.COMPANY    = EPC3.COMPANY
                  AND   EPT4.PAYGROUP   = EPC3.PAYGROUP
                  AND   EPT4.PAY_END_DT = EPC3.PAY_END_DT
                  AND   EPT4.OFF_CYCLE  = EPC3.OFF_CYCLE
                  AND   EPT4.PAGE_NUM   = EPC3.PAGE_NUM
                  AND   EPT4.LINE_NUM   = EPC3.LINE_NUM
                  AND   EPT4.SEPCHK     = EPC3.SEPCHK
                  AND   EPT4.STATE BETWEEN 'AA' AND 'ZZ'
                  AND   EPT4.TAX_CLASS = 'U')
AND   EEMP3.OPRID          = $Prcs_OprID
AND   EEMP3.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
AND   EEMP3.EMPLID     = EPC3.EMPLID
AND   EPN3.EMPLID      = EPC3.EMPLID

GROUP BY EPC3.COMPANY, EPC3.EMPLID, EPC3.PAYCHECK_NBR, EPC3.CHECK_DT, EPN3.NAME
ORDER BY EPC3.COMPANY, EPC3.EMPLID, EPC3.PAYCHECK_NBR, EPC3.CHECK_DT, EPN3.NAME

end-select
  new-page
end-procedure


begin-procedure Company-Change-D
  new-page
end-procedure


begin-procedure Get-Employee-Detail

  let $First-Row = 'Y'

begin-select

EPC.COMPANY
ESN.DESCR
EPC.EMPLID
EPC.PAYCHECK_NBR
EPC.CHECK_DT
EPN.NAME

#ifdef DB2ALL
DECIMAL(SUM(EPT1.TXGRS_CUR),15,3)   &EPT1.TxGrs_Cur
#else
SUM(EPT1.TXGRS_CUR)                 &EPT1.TxGrs_Cur
#endif

  move &EPC.COMPANY            to  $Company

  if $First-Row = 'Y'
    move $Company   to $Prev_Comp
    let $First-Row = 'N'
  end-if

  if $Company <> $Prev_Comp
    do Company-Change-E
  end-if

  print &ESN.Descr                   (+001, 002)
  print &EPC.emplid                  ( 000, 027)
  print &EPN.Name                    ( 000, 040)
  print &EPC.PAYCHECK_NBR            ( 000, 090)
  print &EPC.CHECK_DT                ( 000, 110)
  do Format-Number(&EPT1.TxGrs_Cur,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 152)

  move $Company   to $Prev_Comp

FROM  PS_PAY_CHECK EPC,
      PS_PAY_TAX   EPT1,
      PS_PAY_TAX   EPT2,
      PS_STATE_NAMES_TBL ESN,
      PS_PY_TAX940A_EMPL EEMP,
      PS_PERSON_NAME EPN
WHERE EPC.CHECK_DT >=  &RC_TAX940A.FromDate
AND   EPC.CHECK_DT <=  &RC_TAX940A.ThruDate
AND   EPC.COMPANY    = EPT1.COMPANY
AND   EPC.PAYGROUP   = EPT1.PAYGROUP
AND   EPC.PAY_END_DT = EPT1.PAY_END_DT
AND   EPC.OFF_CYCLE  = EPT1.OFF_CYCLE
AND   EPC.PAGE_NUM   = EPT1.PAGE_NUM
AND   EPC.LINE_NUM   = EPT1.LINE_NUM
AND   EPC.SEPCHK     = EPT1.SEPCHK
AND   EPC.PAYCHECK_STATUS IN ('A','F','R')
AND   EPT1.STATE = '$U'
AND   EPT1.TAX_CLASS = 'U'
AND   EPT1.TXGRS_CUR <> 0
AND   EPT2.COMPANY    = EPC.COMPANY
AND   EPT2.PAYGROUP   = EPC.PAYGROUP
AND   EPT2.PAY_END_DT = EPC.PAY_END_DT
AND   EPT2.OFF_CYCLE  = EPC.OFF_CYCLE
AND   EPT2.PAGE_NUM   = EPC.PAGE_NUM
AND   EPT2.LINE_NUM   = EPC.LINE_NUM
AND   EPT2.SEPCHK     = EPC.SEPCHK
AND   EPT2.STATE BETWEEN 'AA' AND 'ZZ'
AND   EPT2.TAX_CLASS = 'U'
AND   ESN.COUNTRY     = 'USA'
AND   ESN.STATE       = EPT2.STATE
AND   EEMP.OPRID          = $Prcs_OprID
AND   EEMP.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
AND   EEMP.EMPLID     = EPC.EMPLID
AND   EPN.EMPLID      = EPC.EMPLID

GROUP BY EPC.COMPANY, ESN.DESCR, EPC.EMPLID, EPC.PAYCHECK_NBR, EPC.CHECK_DT, EPN.NAME
ORDER BY EPC.COMPANY, ESN.DESCR, EPC.EMPLID, EPC.PAYCHECK_NBR, EPC.CHECK_DT, EPN.NAME

end-select

end-procedure

begin-procedure Get-Employee-Detail-NoState

  print ''                 (+01,01)

begin-select

T4.COMPANY
T4.EMPLID
PN.NAME

#ifdef DB2ALL
DECIMAL(SUM(T4.TXGRS_YTD),15,3)   &T4.TXGRS_YTD
#else
SUM(T4.TXGRS_YTD)                 &T4.TXGRS_YTD
#endif

  print &T4.EMPLID                  (+001, 027)
  print &PN.NAME                    ( 000, 040)

  do Format-Number(&T4.TXGRS_YTD,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 132)

FROM  PS_TAX_BALANCE T4,
      PS_PERSON_NAME PN
WHERE T4.BALANCE_ID = $Tax940a-Bal-ID
AND T4.BALANCE_YEAR = #Tax940a-Bal-Year
AND T4.COMPANY = $StoredCompany
AND T4.STATE = '$U'
AND T4.TAX_CLASS = 'U' 
AND T4.TXGRS_YTD <> 0
AND T4.BALANCE_PERIOD =
      (SELECT MAX(A4.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE A4
       WHERE  A4.COMPANY       = T4.COMPANY
         AND  A4.EMPLID        = T4.EMPLID
         AND  A4.STATE         = T4.STATE
         AND  A4.TAX_CLASS     = T4.TAX_CLASS
         AND  A4.BALANCE_ID    = T4.BALANCE_ID
         AND  A4.BALANCE_YEAR  = T4.BALANCE_YEAR
         AND  A4.BALANCE_PERIOD <= #AsofMonth)
AND NOT EXISTS
    (SELECT 'X' FROM PS_TAX_BALANCE B4
     WHERE B4.BALANCE_ID = T4.BALANCE_ID
           AND B4.BALANCE_YEAR = T4.BALANCE_YEAR
           AND B4.BALANCE_PERIOD = T4.BALANCE_PERIOD
           AND B4.COMPANY = T4.COMPANY
           AND B4.EMPLID = T4.EMPLID
           AND B4.STATE  BETWEEN 'AA' AND 'ZZ'
           AND B4.TAX_CLASS = 'U')
AND (NOT EXISTS
       (SELECT 'X' FROM PS_TAX_BALANCE C4
       WHERE C4.BALANCE_ID = T4.BALANCE_ID
           AND C4.BALANCE_YEAR = T4.BALANCE_YEAR
           AND C4.BALANCE_PERIOD = T4.BALANCE_PERIOD
           AND C4.COMPANY = T4.COMPANY
           AND C4.EMPLID = T4.EMPLID
           AND C4.STATE  BETWEEN 'AA' AND 'ZZ'
           AND C4.TAX_CLASS = '6')
    OR EXISTS
       (SELECT 'X' FROM PS_TAX_BALANCE D4
       WHERE D4.BALANCE_ID = T4.BALANCE_ID
           AND D4.BALANCE_YEAR = T4.BALANCE_YEAR
           AND D4.BALANCE_PERIOD = T4.BALANCE_PERIOD
           AND D4.COMPANY = T4.COMPANY
           AND D4.EMPLID = T4.EMPLID
           AND D4.STATE  BETWEEN 'AA' AND 'ZZ'
           AND D4.TAX_CLASS = '6' AND D4.TXGRS_YTD = 0))
 AND PN.EMPLID = T4.EMPLID
 GROUP BY T4.COMPANY, T4.EMPLID, PN.NAME
 ORDER BY T4.COMPANY, T4.EMPLID, PN.NAME

end-select

end-procedure

begin-procedure Get-Payment-Date-Detail

  let $First-Row = 'Y'

begin-select

DPC.COMPANY
DSN.DESCR
DPC.CHECK_DT
DPC.PAYCHECK_NBR
DPC.EMPLID
DPN.NAME

#ifdef DB2ALL
DECIMAL(SUM(DPT1.TXGRS_CUR),15,3)   &DPT1.TxGrs_Cur
#else
SUM(DPT1.TXGRS_CUR)                 &DPT1.TxGrs_Cur
#endif

  move &DPC.COMPANY            to  $Company

  if $First-Row = 'Y'
    move $Company   to $Prev_Comp
    let $First-Row = 'N'
  end-if

  if $Company <> $Prev_Comp
    do Company-Change-D
  end-if

  print &DSN.Descr                   (+001, 002)
  print &DPC.emplid                  ( 000, 027)
  print &DPN.Name                    ( 000, 040)
  print &DPC.PAYCHECK_NBR            ( 000, 090)
  print &DPC.CHECK_DT                ( 000, 110)
  do Format-Number(&DPT1.TxGrs_Cur,$Out,'999,999,999,999,999.00')
  print $Out                        ( 000, 152)

  move $Company   to $Prev_Comp

FROM  PS_PAY_CHECK DPC,
      PS_PAY_TAX   DPT1,
      PS_PAY_TAX   DPT2,
      PS_STATE_NAMES_TBL DSN,
      PS_PY_TAX940A_EMPL DEMP,
      PS_PERSON_NAME DPN
WHERE DPC.CHECK_DT >=  &RC_TAX940A.FromDate
AND   DPC.CHECK_DT <=  &RC_TAX940A.ThruDate
AND   DPC.COMPANY    = DPT1.COMPANY
AND   DPC.PAYGROUP   = DPT1.PAYGROUP
AND   DPC.PAY_END_DT = DPT1.PAY_END_DT
AND   DPC.OFF_CYCLE  = DPT1.OFF_CYCLE
AND   DPC.PAGE_NUM   = DPT1.PAGE_NUM
AND   DPC.LINE_NUM   = DPT1.LINE_NUM
AND   DPC.SEPCHK     = DPT1.SEPCHK
AND   DPC.PAYCHECK_STATUS IN ('A','F','R')
AND   DPT1.STATE = '$U'
AND   DPT1.TAX_CLASS = 'U'
AND   DPT1.TXGRS_CUR <> 0
AND   DPT2.COMPANY    = DPC.COMPANY
AND   DPT2.PAYGROUP   = DPC.PAYGROUP
AND   DPT2.PAY_END_DT = DPC.PAY_END_DT
AND   DPT2.OFF_CYCLE  = DPC.OFF_CYCLE
AND   DPT2.PAGE_NUM   = DPC.PAGE_NUM
AND   DPT2.LINE_NUM   = DPC.LINE_NUM
AND   DPT2.SEPCHK     = DPC.SEPCHK
AND   DPT2.STATE BETWEEN 'AA' AND 'ZZ'
AND   DPT2.TAX_CLASS = 'U'
AND   DSN.COUNTRY     = 'USA'
AND   DSN.STATE       = DPT2.STATE
AND   DEMP.OPRID          = $Prcs_OprID
AND   DEMP.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
AND   DEMP.EMPLID     = DPC.EMPLID
AND   DPN.EMPLID      = DPC.EMPLID

GROUP BY DPC.COMPANY, DSN.DESCR, DPC.CHECK_DT, DPC.PAYCHECK_NBR, DPC.EMPLID, DPN.NAME
ORDER BY DPC.COMPANY, DSN.DESCR, DPC.CHECK_DT, DPC.PAYCHECK_NBR, DPC.EMPLID, DPN.NAME

end-select

end-procedure

begin-procedure Get-Report-Parameters

begin-select

RC_TAX940A.BALANCE_ID
RC_TAX940A.BALANCE_YEAR
RC_TAX940A.BALANCE_QTR 
RC_TAX940A.FROMDATE
RC_TAX940A.THRUDATE
RC_TAX940A.PY_TAX940A_OPTIONS
 
  let  $FromDate      = &RC_TAX940A.FromDate
  let  $ThruDate      = &RC_TAX940A.ThruDate


FROM  PS_PY_RC_TAX940A RC_TAX940A
WHERE RC_TAX940A.OPRID          = $Prcs_OprID
AND   RC_TAX940A.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

end-procedure


begin-procedure Get-Rel-Lang-State

begin-SELECT
STL.DESCR

    if rtrim(&STL.Descr, ' ') <> ''
       let $StateName = RTRIM(&STL.Descr, ' ')
    end-if

FROM  PS_STATE_NAMES_LNG STL
WHERE STL.COUNTRY     = 'USA'
  AND STL.LANGUAGE_CD = $Curr_language_cd
  AND STL.STATE       = $State

end-SELECT

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'getftdts.sqc'  !Get-From-Thru-Dates procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
! #Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
