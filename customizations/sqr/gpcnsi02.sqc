!***********************************************************************
! GPCNSI02.SQR     GLOBAL PAYROLL CHINA                                *
!                  REQUISITION/LOSS OF ELIGIBILITY REPORTS FOR PHF/SI  *
!                                                                      *
! Description:                                                         *
!                This program will print the Eligibility Report        *
! for Public Housing Fund and Social Insurance (PHF/SI), and           *
! also generate the csv files for the same                             *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:37:45                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************


!**************************************************************************
!
! Procedure: Init-Report-SI02
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report-SI02

    let  $Where_cond1 = ''
    if $RCTL_Pay_Entity <> ''
        let $Where_cond1 = ' AND   PYE2.PAY_ENTITY = ' || '''' || $RCTL_Pay_Entity || ''''
    end-if
    if $RCTL_Contrib_Type <> ''
        let $Where_cond = $where_cond || 'AND   A.GPCN_CONTRIB_TYPE = ''' || $RCTL_Contrib_Type || ''''
    end-if

    Let $Report_ID = 'GPCNSI01'

    do Delete-Process-Prm
    do Process-Main-SI02
    do Delete-Process-Prm
end-procedure

!**************************************************************************
!
! Procedure: Initiate-Process
!
! Description: This will initiate the Eligibility selection criteria
!
!**************************************************************************
begin-procedure Initiate-Process
BEGIN-SELECT DISTINCT
'W'                                           !DB2: The result of the SELECT used in an INSERT statement can not be empty.
                                              !So first ensure if select SQL returns row
   Do Initiate-Process-Insert1

FROM PS_GPCN_PHFSI_RPTG AA , PSPRCSRQST BB
WHERE AA.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   AA.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   AA.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   AA.GPCN_START_DT BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   AA.GPCN_ACNT_STATUS NOT IN ('CLOSED', 'TRANSFER OUT')
AND   BB.PRCSINSTANCE      = #prcs_process_instance
[$Where_cond]
END-SELECT
!

BEGIN-SELECT DISTINCT
'X'                                           !DB2: The result of the SELECT used in an INSERT statement can not be empty.

  Do Initiate-Process-Insert2

FROM PS_GPCN_PHFSI_RPTG AA , PSPRCSRQST BB
WHERE AA.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   AA.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   AA.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   AA.GPCN_TER_DATE BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   AA.GPCN_PHFSI_TERM_YN = 'N'
AND   BB.PRCSINSTANCE       = #prcs_process_instance
[$Where_cond]
END-SELECT
!

  let $GPCN_YEARCD =  LPAD(RTRIM(TO_CHAR(TO_NUMBER(&RC.GPCN_YEARCD) - 1), ' '), 2, '0')

BEGIN-SELECT DISTINCT
'Y'                                           !DB2: The result of the SELECT used in an INSERT statement can not be empty.

  Do Initiate-Process-Insert3

FROM PS_GPCN_PHFSI_RPTG AA , PSPRCSRQST BB ,  PS_GPCN_PHS_RPT_RC RNCTL1
WHERE ((AA.GPCN_MONTHCD <> '12'
AND   AA.GPCN_MONTHCD  = $TERM_GPCN_MONTHCD
AND   AA.GPCN_YEARCD   = RNCTL1.GPCN_YEARCD)
OR    (AA.GPCN_MONTHCD = '12'
AND   '01'             = RNCTL1.GPCN_MONTHCD
AND   AA.GPCN_YEARCD   = $GPCN_YEARCD ))
AND   AA.GPCN_CONTRIB_AREA  = RNCTL1.GPCN_CONTRIB_AREA
AND   AA.GPCN_TER_DATE BETWEEN $TERM_BGN_DT AND $TERM_END_DT
AND   AA.GPCN_PHFSI_TERM_YN = 'Y'
AND   BB.PRCSINSTANCE       = #prcs_process_instance
AND   RNCTL1.OPRID          = $Prcs_OprID
AND   RNCTL1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
[$Where_cond]
END-SELECT
!

BEGIN-SELECT DISTINCT
'Z'                                           !DB2: The result of the SELECT used in an INSERT statement can not be empty.

  Do Initiate-Process-Insert4

FROM PS_GPCN_PHFSI_RPTG A
, PS_PERSON B
, PSPRCSRQST C
WHERE A.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   A.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   A.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   A.EMPLID            = B.EMPLID
AND   B.DT_OF_DEATH BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   C.PRCSINSTANCE       = #prcs_process_instance
[$Where_cond]
AND NOT EXISTS (SELECT 'X'
                FROM PS_GPCN_PHFSI_TMP1 A1
                WHERE A1.PROCESS_INSTANCE  = #prcs_process_instance
                AND   A1.EMPLID            = A.EMPLID
                AND   A1.GPCN_MONTHCD      = A.GPCN_MONTHCD
                AND   A1.GPCN_YEARCD       = A.GPCN_YEARCD
                AND   A1.GP_PAYGROUP       = A.GP_PAYGROUP
                AND   A1.GPCN_CONTRIB_AREA = A.GPCN_CONTRIB_AREA
                AND   A1.GPCN_CONTRIB_TYPE = A.GPCN_CONTRIB_TYPE
                AND   A1.GPCN_REQ_LOSS     IN ('D', 'T'))
END-SELECT
!
end-procedure

!**************************************************************************
!
! Procedure: Initiate-Process-Insert1
!
! Description: First insert criteria to table PS_GPCN_PHFSI_TMP1
!
!**************************************************************************
begin-procedure Initiate-Process-Insert1
BEGIN-SQL
INSERT INTO PS_GPCN_PHFSI_TMP1
(PROCESS_INSTANCE
, EMPLID
, EMPL_RCD
, GPCN_MONTHCD
, GPCN_YEARCD
, GP_PAYGROUP
, GPCN_CONTRIB_AREA
, GPCN_CONTRIB_TYPE
, GPCN_REQ_LOSS
, GPCN_ACOUNT_NUM
, GPCN_ACNT_STATUS
, GPCN_CHANGE_REASON
, GPCN_HUKOU_TYPE
, GPCN_MONTHLY_BASE
, GPCN_PREV_AVG_SAL
, GPCN_CONT_BASE_ER
, GPCN_CONT_PCT_ER
, GPCN_CONT_BASE_EE
, GPCN_CONT_PCT_EE
, GPCN_CONT_AMT_EE
, GPCN_CONT_AMT_ER
, GPCN_CONT_TOT_AMT
, GPCN_CONT_ADJ_EE
, GPCN_CONT_ADJ_ER
, GPCN_CONT_METHOD
, GPCN_START_DT
, GPCN_TER_DATE)
SELECT B.PRCSINSTANCE
, A.EMPLID
, A.EMPL_RCD
, A.GPCN_MONTHCD
, A.GPCN_YEARCD
, A.GP_PAYGROUP
, A.GPCN_CONTRIB_AREA
, A.GPCN_CONTRIB_TYPE
, 'N'
, A.GPCN_ACOUNT_NUM
, A.GPCN_ACNT_STATUS
, A.GPCN_CHANGE_REASON
, A.GPCN_HUKOU_TYPE
, A.GPCN_MONTHLY_BASE
, A.GPCN_PREV_AVG_SAL
, A.GPCN_CONT_BASE_ER
, A.GPCN_CONT_PCT_ER
, A.GPCN_CONT_BASE_EE
, A.GPCN_CONT_PCT_EE
, A.GPCN_CONT_AMT_EE
, A.GPCN_CONT_AMT_ER
, A.GPCN_CONT_TOT_AMT
, A.GPCN_CONT_ADJ_EE
, A.GPCN_CONT_ADJ_ER
, A.GPCN_CONT_METHOD
, A.GPCN_START_DT
, A.GPCN_TER_DATE
FROM PS_GPCN_PHFSI_RPTG A , PSPRCSRQST B
WHERE A.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   A.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   A.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   A.GPCN_START_DT BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   A.GPCN_ACNT_STATUS NOT IN ('CLOSED', 'TRANSFER OUT')
AND   B.PRCSINSTANCE      = #prcs_process_instance
[$Where_cond];

    #ifdef ORACLE
       COMMIT;
    #endif

END-SQL
end-procedure

!**************************************************************************
!
! Procedure: Initiate-Process-Insert2
!
! Description: Second insert criteria to table PS_GPCN_PHFSI_TMP1
!
!**************************************************************************
begin-procedure Initiate-Process-Insert2
BEGIN-SQL
INSERT INTO PS_GPCN_PHFSI_TMP1
(PROCESS_INSTANCE
, EMPLID
, EMPL_RCD
, GPCN_MONTHCD
, GPCN_YEARCD
, GP_PAYGROUP
, GPCN_CONTRIB_AREA
, GPCN_CONTRIB_TYPE
, GPCN_REQ_LOSS
, GPCN_ACOUNT_NUM
, GPCN_ACNT_STATUS
, GPCN_CHANGE_REASON
, GPCN_HUKOU_TYPE
, GPCN_MONTHLY_BASE
, GPCN_PREV_AVG_SAL
, GPCN_CONT_BASE_ER
, GPCN_CONT_PCT_ER
, GPCN_CONT_BASE_EE
, GPCN_CONT_PCT_EE
, GPCN_CONT_AMT_EE
, GPCN_CONT_AMT_ER
, GPCN_CONT_TOT_AMT
, GPCN_CONT_ADJ_EE
, GPCN_CONT_ADJ_ER
, GPCN_CONT_METHOD
, GPCN_START_DT
, GPCN_TER_DATE)
SELECT B.PRCSINSTANCE
, A.EMPLID
, A.EMPL_RCD
, A.GPCN_MONTHCD
, A.GPCN_YEARCD
, A.GP_PAYGROUP
, A.GPCN_CONTRIB_AREA
, A.GPCN_CONTRIB_TYPE
, 'T'
, A.GPCN_ACOUNT_NUM
, A.GPCN_ACNT_STATUS
, A.GPCN_CHANGE_REASON
, A.GPCN_HUKOU_TYPE
, A.GPCN_MONTHLY_BASE
, A.GPCN_PREV_AVG_SAL
, A.GPCN_CONT_BASE_ER
, A.GPCN_CONT_PCT_ER
, A.GPCN_CONT_BASE_EE
, A.GPCN_CONT_PCT_EE
, A.GPCN_CONT_AMT_EE
, A.GPCN_CONT_AMT_ER
, A.GPCN_CONT_TOT_AMT
, A.GPCN_CONT_ADJ_EE
, A.GPCN_CONT_ADJ_ER
, A.GPCN_CONT_METHOD
, A.GPCN_START_DT
, A.GPCN_TER_DATE
FROM PS_GPCN_PHFSI_RPTG A , PSPRCSRQST B
WHERE A.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   A.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   A.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   A.GPCN_TER_DATE BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   A.GPCN_PHFSI_TERM_YN = 'N'
AND   B.PRCSINSTANCE      = #prcs_process_instance
[$Where_cond];

    #ifdef ORACLE
       COMMIT;
    #endif

END-SQL
end-procedure

!**************************************************************************
!
! Procedure: Initiate-Process-Insert3
!
! Description: Third insert criteria to table PS_GPCN_PHFSI_TMP1
!
!**************************************************************************
begin-procedure Initiate-Process-Insert3
BEGIN-SQL
INSERT INTO PS_GPCN_PHFSI_TMP1
(PROCESS_INSTANCE
, EMPLID
, EMPL_RCD
, GPCN_MONTHCD
, GPCN_YEARCD
, GP_PAYGROUP
, GPCN_CONTRIB_AREA
, GPCN_CONTRIB_TYPE
, GPCN_REQ_LOSS
, GPCN_ACOUNT_NUM
, GPCN_ACNT_STATUS
, GPCN_CHANGE_REASON
, GPCN_HUKOU_TYPE
, GPCN_MONTHLY_BASE
, GPCN_PREV_AVG_SAL
, GPCN_CONT_BASE_ER
, GPCN_CONT_PCT_ER
, GPCN_CONT_BASE_EE
, GPCN_CONT_PCT_EE
, GPCN_CONT_AMT_EE
, GPCN_CONT_AMT_ER
, GPCN_CONT_TOT_AMT
, GPCN_CONT_ADJ_EE
, GPCN_CONT_ADJ_ER
, GPCN_CONT_METHOD
, GPCN_START_DT
, GPCN_TER_DATE)
SELECT B.PRCSINSTANCE
, A.EMPLID
, A.EMPL_RCD
, RNCTL.GPCN_MONTHCD
, RNCTL.GPCN_YEARCD
, A.GP_PAYGROUP
, A.GPCN_CONTRIB_AREA
, A.GPCN_CONTRIB_TYPE
, 'T'
, A.GPCN_ACOUNT_NUM
, A.GPCN_ACNT_STATUS
, A.GPCN_CHANGE_REASON
, A.GPCN_HUKOU_TYPE
, A.GPCN_MONTHLY_BASE
, A.GPCN_PREV_AVG_SAL
, A.GPCN_CONT_BASE_ER
, A.GPCN_CONT_PCT_ER
, A.GPCN_CONT_BASE_EE
, A.GPCN_CONT_PCT_EE
, A.GPCN_CONT_AMT_EE
, A.GPCN_CONT_AMT_ER
, A.GPCN_CONT_TOT_AMT
, A.GPCN_CONT_ADJ_EE
, A.GPCN_CONT_ADJ_ER
, A.GPCN_CONT_METHOD
, A.GPCN_START_DT
, A.GPCN_TER_DATE
FROM PS_GPCN_PHFSI_RPTG A , PSPRCSRQST B ,  PS_GPCN_PHS_RPT_RC RNCTL
WHERE ((A.GPCN_MONTHCD <> '12'
AND   A.GPCN_MONTHCD  = $TERM_GPCN_MONTHCD
AND   A.GPCN_YEARCD   = RNCTL.GPCN_YEARCD)
OR    (A.GPCN_MONTHCD = '12'
AND   '01'            = RNCTL.GPCN_MONTHCD
AND   A.GPCN_YEARCD   = $GPCN_YEARCD ))
AND   A.GPCN_CONTRIB_AREA  = RNCTL.GPCN_CONTRIB_AREA
AND   A.GPCN_TER_DATE BETWEEN $TERM_BGN_DT AND $TERM_END_DT
AND   A.GPCN_PHFSI_TERM_YN = 'Y'
AND   B.PRCSINSTANCE       = #prcs_process_instance
AND   RNCTL.OPRID          = $Prcs_OprID
AND   RNCTL.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
[$Where_cond];

    #ifdef ORACLE
       COMMIT;
    #endif

END-SQL
end-procedure


!**************************************************************************
!
! Procedure: Initiate-Process-Insert4
!
! Description: Fourth insert criteria to table PS_GPCN_PHFSI_TMP1
!
!**************************************************************************
begin-procedure Initiate-Process-Insert4
BEGIN-SQL
INSERT INTO PS_GPCN_PHFSI_TMP1
(PROCESS_INSTANCE
, EMPLID
, EMPL_RCD
, GPCN_MONTHCD
, GPCN_YEARCD
, GP_PAYGROUP
, GPCN_CONTRIB_AREA
, GPCN_CONTRIB_TYPE
, GPCN_REQ_LOSS
, GPCN_ACOUNT_NUM
, GPCN_ACNT_STATUS
, GPCN_CHANGE_REASON
, GPCN_HUKOU_TYPE
, GPCN_MONTHLY_BASE
, GPCN_PREV_AVG_SAL
, GPCN_CONT_BASE_ER
, GPCN_CONT_PCT_ER
, GPCN_CONT_BASE_EE
, GPCN_CONT_PCT_EE
, GPCN_CONT_AMT_EE
, GPCN_CONT_AMT_ER
, GPCN_CONT_TOT_AMT
, GPCN_CONT_ADJ_EE
, GPCN_CONT_ADJ_ER
, GPCN_CONT_METHOD
, GPCN_START_DT
, GPCN_TER_DATE)
SELECT C.PRCSINSTANCE
, A.EMPLID
, A.EMPL_RCD
, A.GPCN_MONTHCD
, A.GPCN_YEARCD
, A.GP_PAYGROUP
, A.GPCN_CONTRIB_AREA
, A.GPCN_CONTRIB_TYPE
, 'D'
, A.GPCN_ACOUNT_NUM
, A.GPCN_ACNT_STATUS
, A.GPCN_CHANGE_REASON
, A.GPCN_HUKOU_TYPE
, A.GPCN_MONTHLY_BASE
, A.GPCN_PREV_AVG_SAL
, A.GPCN_CONT_BASE_ER
, A.GPCN_CONT_PCT_ER
, A.GPCN_CONT_BASE_EE
, A.GPCN_CONT_PCT_EE
, A.GPCN_CONT_AMT_EE
, A.GPCN_CONT_AMT_ER
, A.GPCN_CONT_TOT_AMT
, A.GPCN_CONT_ADJ_EE
, A.GPCN_CONT_ADJ_ER
, A.GPCN_CONT_METHOD
, A.GPCN_START_DT
, B.DT_OF_DEATH
FROM PS_GPCN_PHFSI_RPTG A
, PS_PERSON B
, PSPRCSRQST C
WHERE A.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   A.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   A.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   A.EMPLID            = B.EMPLID
AND   B.DT_OF_DEATH BETWEEN &RC.BGN_DT AND &RC.END_DT
AND   C.PRCSINSTANCE       = #prcs_process_instance
[$Where_cond]
AND NOT EXISTS (SELECT 'X'
                FROM PS_GPCN_PHFSI_TMP1 A1
                WHERE A1.PROCESS_INSTANCE  = #prcs_process_instance
                AND   A1.EMPLID            = A.EMPLID
                AND   A1.GPCN_MONTHCD      = A.GPCN_MONTHCD
                AND   A1.GPCN_YEARCD       = A.GPCN_YEARCD
                AND   A1.GP_PAYGROUP       = A.GP_PAYGROUP
                AND   A1.GPCN_CONTRIB_AREA = A.GPCN_CONTRIB_AREA
                AND   A1.GPCN_CONTRIB_TYPE = A.GPCN_CONTRIB_TYPE
                AND   A1.GPCN_REQ_LOSS     IN ('D', 'T'));

    #ifdef ORACLE
       COMMIT;
    #endif

END-SQL
end-procedure


!**************************************************************************
!
! Procedure: Delete-Process-Prm
!
! Description: Delete tmp table used in Eligibility report
!
!**************************************************************************
begin-procedure Delete-Process-Prm

BEGIN-SQL
DELETE FROM PS_GPCN_PHFSI_TMP1
WHERE PROCESS_INSTANCE = #prcs_process_instance;

#ifdef ORACLE
    COMMIT;
#endif
END-SQL

end-procedure




!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
begin-procedure Process-Main-SI02
    Let #Total_New_Empl    = 0
    Let #Total_Ter_Empl    = 0
    let $First_EE = 'Y'


#ifdef debug
    show 'Inside procedure Process-Main'
    show '&RC.GPCN_MONTHCD      : ' &RC.GPCN_MONTHCD
    show '&RC.GPCN_YEARCD       : ' &RC.GPCN_YEARCD
    show '&RC.GPCN_CONTRIB_AREA : ' &RC.GPCN_CONTRIB_AREA
    show '&RC.GPCN_CONTRIB_TYPE : ' &RC.GPCN_CONTRIB_TYPE
    show '$Where_cond : ' $Where_cond
#end-if
    Let $TERM_GPCN_MONTHCD = &RC.GPCN_MONTHCD
    Let $TERM_GPCN_MONTHCD = LPAD(RTRIM(TO_CHAR(TO_NUMBER($TERM_GPCN_MONTHCD) - 1), ' '), 2, '0')
    Let $TERM_BGN_DT = &RC.BGN_DT
    Let $TERM_BGN_DT = DATEADD(&RC.BGN_DT, 'MONTH', -1 )

    if $sqr-database = 'DB2'
      Let $TERM_BGN_DT = substr($TERM_BGN_DT, 1 , 10)
    end-if

    Let $TERM_END_DT = &RC.END_DT
    Let $TERM_END_DT = DATEADD(&RC.END_DT, 'MONTH', -1 )

    if $sqr-database = 'DB2'
      Let $TERM_END_DT = substr($TERM_END_DT, 1 , 10)
    end-if


#ifdef debug
    show 'TERM_GPCN_MONTHCD :' $TERM_GPCN_MONTHCD
    show 'TERM_BGN_DT :' $TERM_BGN_DT
    show 'TERM_END_DT :' $TERM_END_DT
#end-if

   do Initiate-Process

begin-SELECT DISTINCT
SIV2.GPCN_CONTRIB_TYPE    (,) on-break print=never level=1 before=New_Report
DTL2.DESCR
PYE2.PAY_ENTITY
PYE2.DESCR
PYD2.CURRENCY_CD


    let $Pay_Ent         = rtrim(ltrim(&PYE2.PAY_ENTITY , ' '), ' ')
    let $Cont_Type       = rtrim(ltrim(&SIV2.GPCN_CONTRIB_TYPE, ' '), ' ')
    let $Cont_Type_descr_ENG = rtrim(ltrim(&DTL2.DESCR, ' '), ' ')
    If $curr_language_cd <> 'ENG'
       do Get-Trans-ContType
       do Get-Trans-PayEntity

       If rtrim(ltrim($Pay_Ent_Descr , ' '), ' ') = ''
          let $Pay_Ent_Descr   = rtrim(ltrim(&PYE2.DESCR      , ' '), ' ')
       End-if

       If rtrim(ltrim($Cont_Type_Descr , ' '), ' ') = ''
          let $Cont_Type_descr = rtrim(ltrim(&DTL2.DESCR, ' '), ' ')
       End-if
    Else
       let $Pay_Ent_Descr   = rtrim(ltrim(&PYE2.DESCR      , ' '), ' ')
       let $Cont_Type_descr = rtrim(ltrim(&DTL2.DESCR, ' '), ' ')
    End-if

#ifdef debug
    show '$GP_Paygroup    : ' $GP_Paygroup
    show '$Pay_Ent        : ' $Pay_Ent
    show '$Pay_Ent_Descr  : ' $Pay_Ent_Descr
    show '$Cont_Type      : ' $Cont_Type
#end-if
    let $Registration_num = ''

    do Get-Registration($RCTL_Contrib_Area, $Pay_Ent, $Cont_Type, $RCTL_End_Date, $Registration_num)

    do Print_Heading-SI02

    Let #Total_New_Empl    = 0
    Let #Total_Ter_Empl    = 0

    do Process-Payee-SI02

    do Print_Footer-SI02

    NEW-PAGE

FROM PS_GPCN_PHFSI_TMP1 SIV2
  , PS_GP_PYENT PYE2
  , PS_GP_PYENT_DTL PYD2
  , PS_GP_PYGRP PYG2
  , PS_GPCN_CONT_TYPE DTL2
WHERE SIV2.PROCESS_INSTANCE  = #prcs_process_instance
AND   SIV2.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   SIV2.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   SIV2.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   PYG2.GP_PAYGROUP       = SIV2.GP_PAYGROUP
AND   PYG2.PAY_ENTITY        = PYE2.PAY_ENTITY
AND   PYD2.PAY_ENTITY        = PYE2.PAY_ENTITY
AND   PYD2.EFFDT             = (SELECT MAX(EFFDT)
                             FROM PS_GP_PYENT_DTL PD1
                             WHERE PD1.PAY_ENTITY = PYD2.PAY_ENTITY
                             AND PD1.EFFDT <= &RC.END_DT)
AND   DTL2.GPCN_CONTRIB_TYPE = SIV2.GPCN_CONTRIB_TYPE
[$Where_cond1]
end-SELECT
    if #Total_New_Empl = 0 and #Total_Ter_Empl = 0
        show $WARNING_MSG_Lbl
    end-if
end-procedure
!
!**************************************************************************
!
! Procedure: Get-Labour_Agrm
!
! Description: Delete run control when report comes to successful end.
!
!**************************************************************************
begin-procedure Get-Labour_Agrm
#ifdef debug
    show 'Inside procedure Get-Labour_Agrm'
#end-if

begin-SELECT
LB.DESCR

    let $Val_Worker_Type  = rtrim(ltrim(&LB.DESCR, ' '), ' ')

FROM PS_EMPL_CTG_L1 LB, PS_JOB JB
WHERE JB.EMPLID = $Emplid
AND JB.SETID_LBR_AGRMNT = LB.SETID
AND JB.LABOR_AGREEMENT = LB.LABOR_AGREEMENT
AND JB.EMPL_CTG = LB.EMPL_CTG
AND JB.EFFDT = (SELECT MAX(JB1.EFFDT)
              FROM PS_JOB JB1
              WHERE JB1.EMPLID = JB.EMPLID
              AND   JB1.EMPL_RCD = JB.EMPL_RCD
              AND   JB1.EFFDT <= &RC.END_DT )
AND JB.EFFSEQ = (SELECT MAX(JB2.EFFSEQ)
                FROM PS_JOB JB2
                WHERE JB2.EMPLID = JB.EMPLID
                AND   JB2.EMPL_RCD = JB.EMPL_RCD
                AND   JB2.EFFDT = JB.EFFDT )
AND LB.EFFDT = (SELECT MAX(LB1.EFFDT)
              FROM PS_EMPL_CTG_L1 LB1
              WHERE LB1.SETID = LB.SETID
              AND LB1.LABOR_AGREEMENT = LB.LABOR_AGREEMENT
              AND LB1.EMPL_CTG = LB.EMPL_CTG
              AND LB1.EFFDT <= &RC.END_DT )
end-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
begin-procedure Process-Payee-SI02

    let $First_EE = 'Y'
    let #print-line_number = #current-line + 1
#ifdef debug
    show '$Order_by_cl : ' $Order_by_cl
#end-if

begin-SELECT on-error=SQL-Error
SIV2.EMPLID
PER2.NAME
PER2.NAME_AC
SIV2.GPCN_ACOUNT_NUM
SIV2.GP_PAYGROUP
SIV2.GPCN_REQ_LOSS
SIV2.GPCN_ACNT_STATUS
SIV2.GPCN_CHANGE_REASON
SIV2.GPCN_HUKOU_TYPE


    let $Val_Prn_Id        = ''
    let $Empl_Nid          = ''
    let $Val_Gender        = ''
    let $Val_Dob           = ''
    let $Val_Race          = ''
    let $Val_Hukou_Type    = ''
    let $Val_Worker_Type   = ''
    let $Val_Hukou_Type    = ''
    let $Val_Work_Start_Dt = ''
    let $Val_Req_Loss_Prn  = ''
    let $Val_Change_Reason = ''

    Let $Emplid             = rtrim(ltrim(&SIV2.EMPLID   , ' '), ' ')
    Let $EmployeeName       = rtrim(ltrim(&PER2.NAME   , ' '), ' ')
    Let $EmployeeACName     = rtrim(ltrim(&PER2.NAME_AC, ' '), ' ')
    let $GP_Paygroup        = rtrim(ltrim(&SIV2.GP_PAYGROUP, ' '), ' ')

    let $Val_Req_Loss       = rtrim(ltrim(&SIV2.GPCN_REQ_LOSS     , ' '), ' ')
    let $Val_Acount_Num     = rtrim(ltrim(&SIV2.GPCN_ACOUNT_NUM   , ' '), ' ')
    let $Val_Acnt_Status    = rtrim(ltrim(&SIV2.GPCN_ACNT_STATUS  , ' '), ' ')
    let $Val_Change_Reason  = ''
    let $Val_Hukou_Type     = ''

    let $param1 = rtrim(ltrim(&SIV2.GPCN_CHANGE_REASON, ' '), ' ')
    !do Get-GP-Var-Dtl($param1, 'CN VR ACC STAT CHG CHN', $Val_Change_Reason)
    do Get-Descr-ACCT-CHG !Acc_Change_Reason
    let $param1 = rtrim(ltrim(&SIV2.GPCN_HUKOU_TYPE, ' '), ' ')
    !do Get-GP-Var-Dtl($param1, 'CN VR HUKOU CHN'       , $Val_Hukou_Type)
    do Get-Descr-HUKOU-TYPE !Hukou_Type

    do Get-Empl-Nid !PERS_NID

    LET $Val_Prn_Id = $Empl_Nid

    do Get-Empl-Race !DIVERS_ETHNIC

    do Get-Empl-Data !PERSONal_DATA
    do Get-Work-St-Dt !PER_ORG_ASGN

    do Get-Labour_Agrm

#ifdef debug
    show '$Emplid           : ' $Emplid
    show '$EmployeeName     : ' $EmployeeName
    show '$EmployeeACName   : ' $EmployeeACName
#endif


    if &SIV2.GPCN_REQ_LOSS = 'D' or &SIV2.GPCN_REQ_LOSS = 'T'
        Let #Total_Ter_Empl    = #Total_Ter_Empl + 1
    else
        Let #Total_New_Empl    = #Total_New_Empl + 1
    end-if

    do Print_Empl_Details-SI02

FROM PS_GPCN_PHFSI_TMP1 SIV2
  , PS_PERSON_NAME PER2
  , PS_GP_PYENT PYE1
  , PS_GP_PYGRP PYG1

WHERE SIV2.PROCESS_INSTANCE  = #prcs_process_instance
AND   SIV2.EMPLID            = PER2.EMPLID
AND   SIV2.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   SIV2.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   SIV2.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   SIV2.GPCN_CONTRIB_TYPE = $Cont_Type
AND   SIV2.GP_PAYGROUP       = PYG1.GP_PAYGROUP
AND   PYE1.PAY_ENTITY        = $Pay_Ent
AND   PYG1.PAY_ENTITY        = PYE1.PAY_ENTITY
[$Order_by_cl]
end-SELECT
end-procedure


!
!**************************************************************************
! Procedure:  Get-Descr-HUKOU-TYPE
! Description: Get-Descr-HUKOU-TYPE
!**************************************************************************
Begin-procedure Get-Descr-HUKOU-TYPE
begin-select
VDT.DESCR

    let $Val_Hukou_Type = rtrim(ltrim(&VDT.DESCR, ' '), ' ')

FROM PS_HUKOU_T_DTL_CHN VDT
WHERE VDT.HUKOU_TYPE_CHN  = $param1
END-SELECT
end-procedure

!
!**************************************************************************
! Procedure:  Get-Descr-ACCT-CHG
! Description: Get-Descr-ACCT-CHG
!**************************************************************************
Begin-procedure Get-Descr-ACCT-CHG
begin-select
VDT.XLATLONGNAME

    let $Val_Change_Reason = rtrim(ltrim(&VDT.XLATLONGNAME, ' '), ' ')

FROM PSXLATITEM VDT
WHERE VDT.FIELDNAME = 'GPCN_ACCT_CHG'
AND VDT.FIELDVALUE  = $param1
AND VDT.EFFDT       = (
    select MAX(VDT2.EFFDT) 
    FROM PSXLATITEM VDT2
    WHERE VDT2.FIELDNAME = 'GPCN_ACCT_CHG'
    AND VDT2.FIELDVALUE  = $param1
    AND VDT2.EFFDT       <= &RC.END_DT )
END-SELECT
end-procedure

!
!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
begin-procedure Print_Empl_Details-SI02

    let #print-line-cnt = 0

    if #print-line_number <= 5 or #print-line_number >= 79
        let #print-line-cnt = #current-line
        new-page
        graphic                                        (7, {Col31} , 4) vert-line
        graphic                                        (7, {Col44} , 4) vert-line
        graphic                                        (7, 68 ,      4) vert-line
        graphic                                        (7, 71 ,      4) vert-line
        graphic                                        (7, 84 ,      4) vert-line
        graphic                                        (7, 99 ,      4) vert-line
        graphic                                        (7, 118,      4) vert-line
        graphic                                        (7, 133,      4) vert-line
        graphic                                        (7, 152, 4) vert-line
        graphic                                        (7, 165, 4) vert-line
        graphic                                        (7, 179, 4) vert-line
        graphic                                        (7, 203, 4) vert-line
        let #print-line_number = #current-line +1
        print $EmployeeName       (#print-line_number, {Col1}) WRAP 27 2
        let $First_EE = 'N'
    else
        let #print-line_number1 = #print-line_number -2
        graphic                                        (#print-line_number1, {Col31} , 4) vert-line
        graphic                                        (#print-line_number1, {Col44} , 4) vert-line
        graphic                                        (#print-line_number1, 68      , 4) vert-line
        graphic                                        (#print-line_number1, 71      , 4) vert-line
        graphic                                        (#print-line_number1, 84      , 4) vert-line
        graphic                                        (#print-line_number1, 99      , 4) vert-line
        graphic                                        (#print-line_number1, 118     , 4) vert-line
        graphic                                        (#print-line_number1, 133     , 4) vert-line
        graphic                                        (#print-line_number1, 152     , 4) vert-line
        graphic                                        (#print-line_number1, 165     , 4) vert-line
        graphic                                        (#print-line_number1, 179     , 4) vert-line
        graphic                                        (#print-line_number1, 203     , 4) vert-line
        print $EmployeeName       (#print-line_number , {Col1}) WRAP 27 2
    end-if


    IF LENGTH($EmployeeName) > 27
        print $Emplid             (#print-line_number , {Col32})
    ELSE
        print $Emplid             ( #print-line_number , {Col32})
    END-IF

    if $Val_Req_Loss = 'D' or $Val_Req_Loss = 'T'
        let $Val_Req_Loss_prn = 'Decrease'
    else
        let $Val_Req_Loss_prn = 'Increase'
    end-if

    print $Val_Prn_Id        ( #print-line_number , {Col45}, 20)                            !National Identification Number
    print $Val_Gender        ( #print-line_number , 69         )                            !Gender
    print $Val_Dob           ( #print-line_number , 72         )   !edit 'MM/DD/YYYY'       !Date of Birth
    print $Val_Race          ( #print-line_number , 85         )   WRAP 12 2                !Race/Ethnic Group
    print $Val_Hukou_Type    ( #print-line_number , 100        )   WRAP 15 3                !Hukou Type
    print $Val_Worker_Type   ( #print-line_number , 119        )   WRAP 12 3                !Category Of Job
    print $Val_Hukou_Type    ( #print-line_number , 134        )   WRAP 15 3                !Employee Category
    print $Val_Work_Start_Dt ( #print-line_number , 153        )   !edit 'MM/DD/YYYY'       !Work Life Start Date
    print $Val_Req_Loss_Prn  ( #print-line_number , 166        )                            !Category of Change
    print $Val_Change_Reason ( #print-line_number , 180        )   WRAP 20 3                !Reason of Change
    print ' '                ( #print-line_number , 204        )                            !Category of Change Hidden



    move #LineNum to $LineNum 000000000

    let $REPORT_DATA = $EmployeeName
    let $REPORT_DATA = $REPORT_DATA || ',' || $Emplid
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Prn_Id
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Gender
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Dob
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Race
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Hukou_Type
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Worker_Type
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Hukou_Type
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Work_Start_Dt
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Req_Loss_Prn
    let $REPORT_DATA = $REPORT_DATA || ',' || $Val_Change_Reason
    let $REPORT_DATA = $REPORT_DATA || ',' || ' '
    write 1 from $REPORT_DATA

    let #LineNum = #LineNum + 1

    let #print-line_number = #current-line + 3

end-procedure

!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
!
begin-procedure Print_Heading-SI02

    LET $PrintVal2 = &RC.GPCN_YEARCD || '/' || &RC.GPCN_MONTHCD

    LET $PrintVal4 = rtrim(ltrim(&RC.GPCN_ORG_CODE, ' '), ' ')
    LET $PrintVal6 = $Registration_num

    print $Cont_Type_Lbl     (+2, 20) Bold
    print $Cont_Type_descr   (  , 70)
    print $Cont_Period_Lbl   (+2, 20) Bold
    print $PrintVal2         (  , 70)
    print $Er_Name_Lbl       (+2, 20) Bold
    print $Pay_Ent_Descr     (  , 70)
    print $Org_Code_Lbl      (+2, 20) Bold
    print $PrintVal4         (  , 70)
    print $Org_Reg_Id_Lbl    (+2, 20) Bold
    print $PrintVal6         (  , 70)

    LET $TXT_STR3 = RTRIM(LTRIM(&RC.GPCN_MONTHCD     , ' '), ' ')
    LET $TXT_STR4 = RTRIM(LTRIM(&RC.GPCN_YEARCD      , ' '), ' ')
    LET $TXT_STR1 = RTRIM(LTRIM(&RC.GPCN_CONTRIB_AREA, ' '), ' ')
    LET $TXT_STR2 = $Cont_Type_descr_ENG

    MOVE $Output_Dir to $Filename
    let $Filename = $Filename || $Pay_Ent
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR1
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR2
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR3
    let $Filename = $Filename || $TXT_STR4
    let $Filename = $Filename || 'Eligibility'
    let $Filename = $Filename || '.csv{FILESUFFIX}'

#ifdef debug
    show '$Filename : ' $Filename
#end-if

    open $Filename as 1 for-writing record=9999:vary
    status = #filestat
    if #filestat != 0
        show 'Cannot open file ' $Filename
    end-if

    let $REPORT_HDR = $Cont_Type_descr
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal2
    let $REPORT_HDR = $REPORT_HDR || ',' || $Pay_Ent_Descr
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal4
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal6
    write 1 from $REPORT_HDR

    let #LineNum = 1

    graphic                                        (13,1,220) horz-line
    graphic                                        (13, {Col31} , 8) vert-line
    graphic                                        (13, {Col44} , 8) vert-line
    graphic                                        (13, 68      , 8) vert-line
    graphic                                        (13, 71      , 8) vert-line
    graphic                                        (13, 84      , 8) vert-line
    graphic                                        (13, 99      , 8) vert-line
    graphic                                        (13, 118     , 8) vert-line
    graphic                                        (13, 133     , 8) vert-line
    graphic                                        (13, 152     , 8) vert-line
    graphic                                        (13, 165     , 8) vert-line
    graphic                                        (13, 179     , 8) vert-line
    graphic                                        (13, 203     , 8) vert-line

    print $Ee_Name_Lbl                             (15, {Col1}  ) BOLD
    print $Emplid_Lbl                              (15, 32        ) BOLD WRAP 10 4
    print $Ee_Nid_No_Lbl                           (15, 45        ) BOLD WRAP 20 3
    print $Ee_Gender_Lbl                           (15, 69        ) BOLD WRAP 1 8
    print $Ee_Dob_Lbl                              (15, 72        ) BOLD WRAP 11 3
    print $Ee_Race_Lbl                             (15, 85        ) BOLD WRAP 13 3
    print $Ee_Hukou_Lbl                            (15, 100       ) BOLD WRAP 15 3
    print $Ee_Job_Cat_Lbl                          (15, 119       ) BOLD WRAP 13 3
    print $Ee_Empl_Cat_Lbl                         (15, 134       ) BOLD WRAP 15 3
    print $Ee_Work_Start_Dt_Lbl                    (15, 153       ) BOLD WRAP 11 3
    print $Ee_Change_Cat_Lbl                       (15, 166       ) BOLD WRAP 12 3
    print $Ee_Change_Reason_Lbl                    (15, 180       ) BOLD WRAP 22 3
    print $Ee_Change_Rsn_Hd_Lbl                    (15, 204       ) BOLD WRAP 17 3

    graphic                                        (21,{Col1},220) horz-line

end-procedure

!**************************************************************************
! Procedure: Print_Footer
! Description:  Print the Footer Details
!**************************************************************************
!
begin-procedure Print_Footer-SI02
    graphic              (+2,{Col1},220) horz-line

    print $Tot_New_Cnt_Lbl         (+2,20) Bold
    print #Total_New_Empl          (  ,70) edit '99999999999'
    print $Tot_Ter_Cnt_Lbl         (+2,20) Bold
    print #Total_Ter_Empl          (  ,70) edit '99999999999'
    print $Tot_Filing_Dt_Lbl       (+2,20) Bold
    print &RC.GPCN_FILING_DT       (  ,71)  edit 'YYYY/MM/DD'

    graphic              (+1,{Col1},220) horz-line

    move #Total_New_Empl    to $Total_Empl      000000000
    MOVE #Total_Ter_Empl to $Total_Cont_EE      000000000
    MOVE &RC.GPCN_FILING_DT to $Total_Cont_ER   YYYY/MM/DD

    let $REPORT_FOOTER = ltrim(rtrim($Total_Empl,' '),' ')
    let $REPORT_FOOTER = $REPORT_FOOTER || ',' || ltrim(rtrim($Total_Cont_EE,' '),' ')
    let $REPORT_FOOTER = $REPORT_FOOTER || ',' || ltrim(rtrim($Total_Cont_ER,' '),' ')
    write 1 from $REPORT_FOOTER

    close 1

    let #LineNum = 1
end-procedure

!
!
!**************************************************************************
! Procedure: Get-Empl-Nid
!            Get-Empl-Nid
!**************************************************************************
Begin-procedure Get-Empl-Nid
    let $Empl_Nid = ''
begin-select
NATIONAL_ID

    let $Empl_Nid = rtrim(ltrim(&NATIONAL_ID, ' '), ' ')

FROM  PS_PERS_NID
WHERE EMPLID            = $Emplid
AND COUNTRY             = 'CHN'
AND NATIONAL_ID_TYPE IN ('OLDNID', 'NID')
end-select

end-procedure


!
!
!**************************************************************************
! Procedure: Get-Empl-Race
!            Get-Empl-Race
!**************************************************************************
Begin-procedure Get-Empl-Race
    LET $Val_Race = ''
begin-select
ETH1.DESCR50

    LET $Val_Race = rtrim(ltrim(&ETH1.DESCR50, ' '), ' ')

FROM  PS_DIVERS_ETHNIC ETH
, PS_ETHNIC_GRP_TBL ETH1
WHERE ETH.EMPLID        = $Emplid
AND ETH.SETID           = ETH1.SETID
AND ETH.ETHNIC_GRP_CD   = ETH1.ETHNIC_GRP_CD
AND ETH1.EFFDT          = (SELECT MAX(ETH2.EFFDT)
                           FROM PS_ETHNIC_GRP_TBL ETH2
                           WHERE ETH2.SETID           = ETH1.SETID
                           AND ETH2.ETHNIC_GRP_CD   = ETH1.ETHNIC_GRP_CD
                           AND ETH2.EFFDT           <= &RC.END_DT)
end-select

end-procedure

!
!**************************************************************************
! Procedure: Get-Empl-Data
!            Get-Empl-Data
!**************************************************************************
Begin-procedure Get-Empl-Data
    let $Val_Gender        = ''
    let $Val_Dob           = ''
begin-select
PER.BIRTHDATE
PER.SEX

    move &PER.BIRTHDATE to $Val_Dob YYYY/MM/DD
    let $Val_Gender           = rtrim(ltrim(&PER.SEX, ' '), ' ')

FROM  PS_PERSONAL_DATA PER
WHERE PER.EMPLID = $Emplid
end-select
end-procedure

!
!
!**************************************************************************
! Procedure: Get-Work-St-Dt
!            Get-Work-St-Dt
!**************************************************************************
Begin-procedure Get-Work-St-Dt
    let $Val_Work_Start_Dt = ''
begin-select
INFO.START_DT_CHN

    MOVE &INFO.START_DT_CHN TO $Val_Work_Start_Dt YYYY/MM/DD

FROM  PS_PERS_WRKLIF_CHN INFO
WHERE INFO.EMPLID = $Emplid

end-select
end-procedure

!
!
