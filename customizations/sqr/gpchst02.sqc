!***********************************************************************
!  GPCHST02 :  Procedures to get missing data for the report GPCHST02. *
!              This is done due to porting the report from PS Ver. 8.8 *
!              back to Ver. 8.1                                        *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:27:00                                 *
!       $Release:  HR92                                                *
!      $Revision:  106                                                 *
!                                                                      *
!***********************************************************************


#define LS_76  'CH_LS76'   ! Kurzarbeit in Std.
#define LS_78  'CH_LS78'   ! Arbeitszeit Stundenlöhner in Std.
#define LS_85  'CH_LS85'   ! Bruttolohn
#define LS_90  'CH_LS90'   ! Sozialabgaben
#define LS_95  'CH_LS95'   ! Zulagen
#define LS_99  'CH_LS99'   ! Überstunden
#define LS_104 'CH_LS104'  ! 13. Monatslohn
#define LS_109 'CH_LS109'  ! Spezial-Zahlungen

!***********************************************************************

begin-setup
DECLARE-VARIABLE
INTEGER #GPCH_LOOP
END-DECLARE
end-setup

Begin-Procedure Delete-Temp-Records
do Begin_Trans
  
Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHST021_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql
do Commit_Trans
#debug show 'Rows deleted PS_GPCHST021_TMP: ' #sql-count

do Begin_Trans
Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHST022_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql
do Commit_Trans
#debug show 'Rows deleted PS_GPCHST022_TMP: ' #sql-count

do Begin_Trans
Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHST023_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql
do Commit_Trans
#debug show 'Rows deleted PS_GPCHST023_TMP: ' #sql-count

do Begin_Trans
Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHAL078_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql
do Commit_Trans
#debug show 'Rows deleted PS_GPCHAL078_TMP: ' #sql-count


End-Procedure Delete-Temp-Records
!***********************************************************************
! main procedure to collect the missing data
begin-procedure CalculateMissingData
#debug show '-> CalculateMissingData'
   

! Prepare Periods
    do CopyRP0001

! Update found rows with YOS
! FMB 20070416    do GetYearsOfService


! Build sums per period
    do Extract_ERN_DED_YTD

! Update found rows with these sums

BEGIN-SELECT
PLS.PIN_NUM  &PLS.PIN_NUM
PLS.PIN_NM   &PLS.PIN_NM

 let #ACCUM_PIN  = &PLS.PIN_NUM
 let $PIN_NM = RTRIM(&PLS.PIN_NM, ' ')

 Evaluate $PIN_NM
 When  = 'CH_LS_STD'
    let $ColumnName = 'GPCH_RP_AMOUNT1'
    let $TypeRsltVal = 'UNIT_RSLT_VAL'
 break
 When  = 'CH_LS_LEK'
    let $ColumnName = 'GPCH_RP_AMOUNT2'
    let $TypeRsltVal = 'UNIT_RSLT_VAL'
 break
 When  = 'CH_LS_BS'
    let $ColumnName = 'GPCH_RP_AMOUNT3'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_SA'
    let $ColumnName = 'GPCH_RP_AMOUNT4'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_ZU'
    let $ColumnName = 'GPCH_RP_AMOUNT5'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_US'
    let $ColumnName = 'GPCH_RP_AMOUNT9'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_ZML'
    let $ColumnName = 'GPCH_RP_AMOUNT10'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_SO'
    let $ColumnName = 'GPCH_RP_AMOUNT11'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_DL'
    let $ColumnName = 'GPCH_RP_AMOUNT12'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_AK'
    let $ColumnName = 'GPCH_RP_AMOUNT13'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_ZL'
    let $ColumnName = 'GPCH_RP_AMOUNT14'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
!FMB 20100308
 When  = 'CH_LS_OSTD'
    let $ColumnName = 'GPCH_RP_LSEST'
    let $TypeRsltVal = 'UNIT_RSLT_VAL'
 break
 When  = 'CH_LS_OLEK'
    let $ColumnName = 'GPCH_RP_LSEHRS'
    let $TypeRsltVal = 'UNIT_RSLT_VAL'
 break
 When  = 'CH_LS_OBS'
    let $ColumnName = 'GPCH_RP_LSEGROSS'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break
 When  = 'CH_LS_OSA'
    let $ColumnName = 'GPCH_RP_LSESI'
    let $TypeRsltVal = 'CALC_RSLT_VAL'
 break

  when-other

 goto No_update

 end-evaluate
 
  do GetPINSum($ColumnName, $TypeRsltVal, #ACCUM_PIN, #prcs_process_instance)

 No_update:

from
PS_GP_PIN PLS
  where PLS.PIN_CATEGORY = 'LSE'
  AND PLS.COUNTRY = 'CHE'
  AND PLS.PIN_TYPE = 'AC' 

END-SELECT  



!    do GetPINDataOktUnit( {LS_78},'GPCH_RP_LSEHRS')
!    do GetPINDataOktCalc( {LS_85},'GPCH_RP_LSEGROSS')
!    do GetPINDataOktCalc( {LS_90},'GPCH_RP_LSESI')
!    do GetPINDataOktCalc( {LS_95},'GPCH_RP_LSESHIFT')
!    do GetPINDataOktCalc( {LS_99},'GPCH_RP_LSEOVT')
!    do GetPINDataYTDCalc({LS_104},'GPCH_RP_LSE13TH')
!    do GetPINDataYTDCalc({LS_109},'GPCH_RP_LSESPEC')

#debug show '<- CalculateMissingData'
end-procedure CalculateMissingData
!***********************************************************************
! copy all data from GPCH_RP_0001 to the cloned table GPCH_RP_0001A
begin-procedure CopyRP0001
#debug show '-> CopyRP0001'
 

! Create Temp table with most recent calc for each month (up to 12 rows per person)

    #debug show ' $ptot_year = ' $ptot_year
    let #ptot_year =  $ptot_year

    do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    
    do dtu-format-date(#ptot_year, 1, 1, $YearStart)
    do dtu-format-date(#ptot_year, 12, 31, $YearEnd)
!FMB 20100308
    do dtu-format-date(#ptot_year, 10, 1, $October01)
    do dtu-format-date(#ptot_year, 10, 31, $October31)
    do Convert-From-DTU-Date($October01, $October01)
    do Convert-From-DTU-Date($October31, $October31)
    do Convert-From-DTU-Date($YearStart, $YearStart)
    do Convert-From-DTU-Date($YearEnd, $YearEnd)
    

    #debug show 'Year starts: ' $YearStart
    #debug show 'Year ends: ' $YearEnd
    #debug show 'October: ' $October31
    do Format-DateTime('190001010000',$DateTemp, {DEFCMP},'','native')
do Begin_Trans
Begin-Sql on-error=give_warning
INSERT
INTO PS_GPCHST022_TMP
(PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, INSTANCE,
PIN_NUM, SLICE_BGN_DT, SLICE_END_DT, CALC_RSLT_VAL, UNIT_RSLT_VAL,
BASE_RSLT_VAL, RATE_RSLT_VAL, PCT_RSLT_VAL)
SELECT [$prcs_process_instance],RP1.EMPLID, RP1.CAL_RUN_ID, RP1.EMPL_RCD, RP1.GP_PAYGROUP, RP1.CAL_ID,
       !RP1.RSLT_SEG_NUM, '1', '0',RP1.SEG_BGN_DT, RP1.SEG_BGN_DT, 0.00, 0.00,0.00,0.00,0.00
!FMB 20100308
       RP1.RSLT_SEG_NUM, 1, 0, 
       #ifdef ORACLE
        substr($DateTemp,1,11)
       #else
        substr($DateTemp,1,10)
       #endif 
       , 
       #ifdef ORACLE
        substr($DateTemp,1,11)
       #else
        substr($DateTemp,1,10)
       #endif
, 0.00, 0.00,0.00,0.00,RP1.FTE
FROM PS_GPCH_RP_0001 RP1
WHERE  [$Company_Criteria_BR2] ! RP1.PAY_ENTITY = $Ctl_PayEntity
 AND   RP1.PRD_END_DT between $YearStart and $YearEnd                  
and   RP1.GPCH_AL_CPAY_ENDDT = (select max(RP2.GPCH_AL_CPAY_ENDDT) 
from PS_GPCH_RP_0001 RP2 where RP1.EMPLID = RP2.EMPLID and RP1.EMPL_RCD = RP2.EMPL_RCD
 and RP1.GP_PAYGROUP = RP2.GP_PAYGROUP and  RP1.CAL_ID = RP2.CAL_ID  )
 and RP1.GPCH_MC_LEGAL_RCD = EMPL_RCD ! FMB 20090225

  end-sql

do Commit_Trans

! Copy most recent GPCH_RP_0001 per employment period (as long as there is no rehire, it's one row per person)

do Begin_Trans
Begin-Sql on-error=give_warning
INSERT
INTO PS_GPCHST021_TMP
      (PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, SLICE_END_DT,
       PAY_ENTITY, COMPANY,PRD_END_DT, GPCH_AL_CPAY_ENDDT, GPCH_RP_YEAR, LOCATION,
       DEPTID, SLICE_BGN_DT, SEG_END_DT, SEG_BGN_DT,PRD_BGN_DT, ACTION, REASON,
       SAL_ADMIN_PLAN, GRADE, STEP, STD_HOURS, FTE, EMPL_STATUS, EMPL_CTG, EMPL_CTG_L1,
       JOB_ENTRY_DT, HIRE_DT, TERMINATION_DT, BIRTHDATE, MAR_STATUS, SEX,
       GPCH_SI_AHV_STATUS, GPCH_SI_ALV_STATUS, GPCH_SI_COV_UV, GPCH_TX_UV_STATUS,
       GPCH_UV_ELIG, GPCH_TX_KTG_STATUS, GPCH_PK_STATUS, GPCH_TX_UV_PROV_CD,
       GPCH_TX_FAK_SUBJC, GPCH_TX_FAK_CANTON, GPCH_TX_VILLAGE_CD, GPCH_TX_SETTLE_CD,
       GPCH_TX_EXEMPT_TAX, GPCH_TX_TRF_CD, GPCH_TX_CANTON, GPCH_TX_OVRD_AMT,
       GPCH_TX_OVRD_PCT, GPCH_TX_STAXB_PCT, BEGIN_DT, END_DT, GPCH_TX_LAW_SW,
       CURRENCY_CD, POSTAL, CITY, EXPIRATN_DT, LANG_CD, BUSINESS_UNIT, COST_UNIT_CD,
       CONTRACT_TYPE, CONTRACT_END_DT, GPCH_SI_HPROV, JOBCODE, COUNTRY_FROM,
       GPCH_RP_AMOUNT1, GPCH_RP_AMOUNT2, GPCH_RP_AMOUNT3, GPCH_RP_AMOUNT4,
       GPCH_RP_AMOUNT5, GPCH_RP_AMOUNT9, GPCH_RP_AMOUNT10, GPCH_RP_AMOUNT11,
       GPCH_RP_AMOUNT12, GPCH_RP_AMOUNT13, GPCH_RP_AMOUNT14, GPCH_RP_AMOUNT15,
       GPCH_RP_AMOUNT19, GPCH_RP_LSEYOS, GPCH_RP_LSELOCZIP, GPCH_RP_LSEWT,
       GPCH_RP_LSEST, GPCH_RP_LSEHRS, GPCH_RP_LSEGROSS, GPCH_RP_LSESI,
       GPCH_RP_LSESHIFT, GPCH_RP_LSEOVT, GPCH_RP_LSE13TH, GPCH_RP_LSESPEC, VISA_PERMIT_TYPE, EMPL_CLASS,SETID_JOBCODE)
       #ifdef ORACLE
       SELECT /*+ INDEX(PBD PS_GPCH_RP_0001)*/
       #else
       SELECT 
       #endif
       [$prcs_process_instance],PBD.EMPLID, PBD.CAL_RUN_ID, PBD.EMPL_RCD, PBD.GP_PAYGROUP, PBD.CAL_ID, PBD.RSLT_SEG_NUM, PBD.SLICE_END_DT,
       PBD.PAY_ENTITY, PBD.COMPANY, PBD.PRD_END_DT, PBD.GPCH_AL_CPAY_ENDDT, PBD.GPCH_RP_YEAR, PBD.LOCATION,
       PBD.DEPTID, PBD.SLICE_BGN_DT, PBD.SEG_END_DT, PBD.SEG_BGN_DT, PBD.PRD_BGN_DT, PBD.ACTION, PBD.REASON,
       SAL_ADMIN_PLAN, GRADE, STEP, STD_HOURS, FTE, EMPL_STATUS, EMPL_CTG, EMPL_CTG_L1,
       JOB_ENTRY_DT, HIRE_DT, TERMINATION_DT, BIRTHDATE, MAR_STATUS, SEX, GPCH_SI_AHV_STATUS,
       GPCH_SI_ALV_STATUS, GPCH_SI_COV_UV, GPCH_TX_UV_STATUS, GPCH_UV_ELIG, GPCH_TX_KTG_STATUS,
       GPCH_PK_STATUS, GPCH_TX_UV_PROV_CD, GPCH_TX_FAK_SUBJC, GPCH_TX_FAK_CANTON,
       GPCH_TX_VILLAGE_CD, GPCH_TX_SETTLE_CD, GPCH_TX_EXEMPT_TAX, GPCH_TX_TRF_CD,
       GPCH_TX_CANTON, GPCH_TX_OVRD_AMT, GPCH_TX_OVRD_PCT, GPCH_TX_STAXB_PCT,
       BEGIN_DT, END_DT, GPCH_TX_LAW_SW, CURRENCY_CD, POSTAL, CITY, EXPIRATN_DT, LANG_CD,
       BUSINESS_UNIT, COST_UNIT_CD, CONTRACT_TYPE, CONTRACT_END_DT, GPCH_SI_HPROV,
       JOBCODE, COUNTRY_FROM, 0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,
       GPCH_RP_LSEYOS,GPCH_RP_LSELOCZIP,GPCH_RP_LSEWT,GPCH_RP_LSEST, GPCH_RP_LSEHRS,
       0.00,0.00,0.00,0.00,0.00,0.00, PBD.VISA_PERMIT_TYPE, PBD.EMPL_CLASS, PBD.SETID_JOBCODE
FROM PS_GPCH_RP_0001 PBD, PS_GPCHST022_TMP T22
WHERE       [$Company_Criteria_BR1]     !PBD.PAY_ENTITY = $Ctl_PayEntity
 AND   PBD.PRD_END_DT between $YearStart and $YearEnd 
 AND   T22.PROCESS_INSTANCE = #prcs_process_instance
 and   PBD.EMPLID = T22.EMPLID and PBD.CAL_RUN_ID = T22.CAL_RUN_ID and PBD.EMPL_RCD = T22.EMPL_RCD
 and PBD.GP_PAYGROUP = T22.GP_PAYGROUP and  PBD.CAL_ID = T22.CAL_ID                  
 and  PBD.SLICE_END_DT =  (select max(PBD2.SLICE_END_DT) from PS_GPCH_RP_0001 PBD2
where PBD.EMPLID = PBD2.EMPLID and PBD.COMPANY = PBD2.COMPANY  and PBD2.SLICE_END_DT <= $YearEnd and PBD.HIRE_DT = PBD2.HIRE_DT )

       end-sql
       
       #debug show 'Paygroup Criteria: ' $Paygroup_Crit_PS
       
       do Commit_Trans
       #debug show 'Rows inserted PS_GPCHST021_TMP: ' #sql-count
       
       #debug show '<- CopyRP0001'
       end-procedure CopyRP0001

!***********************************************************************
! extract the needed data from GP_RSLT_ERN_DED to speed up the report
begin-procedure Extract_ERN_DED_YTD
#debug show '-> Extract_ERN_DED_YTD'

!***********************************************************************
! Provide earnings contributing (GPCHAL07 routine)

do GPCHUT00
!***********************************************************************
!FMB 20100308
do Begin_Trans
Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHST023_TMP
(PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, INSTANCE,
PIN_NUM, SLICE_BGN_DT, SLICE_END_DT, CALC_RSLT_VAL, UNIT_RSLT_VAL,
BASE_RSLT_VAL, RATE_RSLT_VAL, PCT_RSLT_VAL)
SELECT [$prcs_process_instance],ED.EMPLID, T211.CAL_RUN_ID, T221.EMPL_RCD, ED.GP_PAYGROUP, T211.CAL_ID,
       T211.RSLT_SEG_NUM, 1, T78.PIN_NUM, T211.SLICE_BGN_DT,
       T211.SLICE_END_DT, sum(ED.CALC_RSLT_VAL * T78.SIGNVALUE ), sum(ED.UNIT_RSLT_VAL* T78.SIGNVALUE ),
       0.00, 0.00, 0.00
FROM PS_GP_RSLT_ERN_DED ED, PS_GPCHST022_TMP T221, PS_GPCHST021_TMP T211, PS_GPCHAL078_TMP T78
Where T221.PROCESS_INSTANCE = #prcs_process_instance
AND ED.EMPLID = T221.EMPLID
AND ED.CAL_RUN_ID = T221.CAL_RUN_ID
! FMB 20090225 AND ED.EMPL_RCD = T221.EMPL_RCD
AND ED.GP_PAYGROUP = T221.GP_PAYGROUP
AND ED.CAL_ID = T221.CAL_ID
AND ED.RSLT_SEG_NUM = T221.RSLT_SEG_NUM
AND T211.PROCESS_INSTANCE = #prcs_process_instance
AND ED.EMPLID = T211.EMPLID
AND T221.EMPL_RCD = T211.EMPL_RCD
AND ED.GP_PAYGROUP = T211.GP_PAYGROUP
AND ED.SLICE_BGN_DT between $October01 and $October31 
AND T78.PROCESS_INSTANCE = #prcs_process_instance
!FMB 20100308
AND T78.PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM in ('CH_LS_OSTD','CH_LS_OLEK','CH_LS_OBS','CH_LS_OSA' ))
AND ED.PIN_NUM = T78.PIN_MBR_NUM
Group by ED.EMPLID, T211.CAL_RUN_ID, T221.EMPL_RCD, ED.GP_PAYGROUP, T211.CAL_ID,
       T211.RSLT_SEG_NUM, T78.PIN_NUM, T211.SLICE_BGN_DT,
       T211.SLICE_END_DT

end-sql

do Commit_Trans
#debug show 'Rows inserted Extract_ERN_DED_YTD: ' #sql-count

!***********************************************************************
do Begin_Trans
Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHST023_TMP
(PROCESS_INSTANCE,EMPLID, CAL_RUN_ID, EMPL_RCD, GP_PAYGROUP, CAL_ID, RSLT_SEG_NUM, INSTANCE,
PIN_NUM, SLICE_BGN_DT, SLICE_END_DT, CALC_RSLT_VAL, UNIT_RSLT_VAL,
BASE_RSLT_VAL, RATE_RSLT_VAL, PCT_RSLT_VAL)
SELECT [$prcs_process_instance],ED.EMPLID, T211.CAL_RUN_ID, T221.EMPL_RCD, ED.GP_PAYGROUP, T211.CAL_ID,
       T211.RSLT_SEG_NUM, 1, T78.PIN_NUM, T211.SLICE_BGN_DT,
       T211.SLICE_END_DT, sum(ED.CALC_RSLT_VAL * T78.SIGNVALUE ), sum(ED.UNIT_RSLT_VAL* T78.SIGNVALUE ),
       0.00, 0.00, 0.00
FROM PS_GP_RSLT_ERN_DED ED, PS_GPCHST022_TMP T221, PS_GPCHST021_TMP T211, PS_GPCHAL078_TMP T78
Where T221.PROCESS_INSTANCE = #prcs_process_instance
AND ED.EMPLID = T221.EMPLID
AND ED.CAL_RUN_ID = T221.CAL_RUN_ID
! FMB 20090225 AND ED.EMPL_RCD = T221.EMPL_RCD
AND ED.GP_PAYGROUP = T221.GP_PAYGROUP
AND ED.CAL_ID = T221.CAL_ID
AND ED.RSLT_SEG_NUM = T221.RSLT_SEG_NUM
AND T211.PROCESS_INSTANCE = #prcs_process_instance
AND ED.EMPLID = T211.EMPLID
AND T221.EMPL_RCD = T211.EMPL_RCD
AND ED.GP_PAYGROUP = T211.GP_PAYGROUP
AND ED.SLICE_BGN_DT between T211.HIRE_DT and T211.SEG_END_DT
AND T78.PROCESS_INSTANCE = #prcs_process_instance
!FMB 20100308
AND T78.PIN_NUM not in ( select PIN_NUM from PS_GP_PIN where PIN_NM in ('CH_LS_OSTD','CH_LS_OLEK','CH_LS_OBS','CH_LS_OSA' ))
AND ED.PIN_NUM = T78.PIN_MBR_NUM
Group by ED.EMPLID, T211.CAL_RUN_ID, T221.EMPL_RCD, ED.GP_PAYGROUP, T211.CAL_ID,
       T211.RSLT_SEG_NUM, T78.PIN_NUM, T211.SLICE_BGN_DT,
       T211.SLICE_END_DT

end-sql

do Commit_Trans
#debug show 'Rows inserted Extract_ERN_DED_YTD: ' #sql-count

#debug show '<- Extract_ERN_DED_YTD'
end-procedure Extract_ERN_DED_YTD
!***********************************************************************

!***********************************************************************
! get value of accum from GPCHST023_TMP
begin-procedure GetPINSum($ColumnName, $TypeRsltVal, #ACCUM_PIN, #prcs_process_instance)
 show '-> GetPINSum: ' $ColumnName ' , ' $TypeRsltVal ' , '  #ACCUM_PIN ' , ' #prcs_process_instance
! do Begin_Trans

Begin-Sql on-error=give_warning
UPDATE PS_GPCHST021_TMP
SET [$ColumnName] = (
    SELECT T231.[$TypeRsltVal]
    FROM PS_GPCHST023_TMP T231
    WHERE T231.PIN_NUM = #ACCUM_PIN
    AND T231.EMPLID = PS_GPCHST021_TMP.EMPLID
    AND T231.CAL_RUN_ID = PS_GPCHST021_TMP.CAL_RUN_ID
    AND T231.EMPL_RCD = PS_GPCHST021_TMP.EMPL_RCD
    AND T231.GP_PAYGROUP = PS_GPCHST021_TMP.GP_PAYGROUP
    AND T231.CAL_ID = PS_GPCHST021_TMP.CAL_ID
    AND T231.SLICE_BGN_DT = PS_GPCHST021_TMP.SLICE_BGN_DT
    AND T231.PROCESS_INSTANCE = #prcs_process_instance
)

WHERE  EXISTS (
    SELECT 1
    FROM PS_GPCHST023_TMP T231
    WHERE T231.PIN_NUM = #ACCUM_PIN
    AND T231.EMPLID = PS_GPCHST021_TMP.EMPLID
    AND T231.CAL_RUN_ID = PS_GPCHST021_TMP.CAL_RUN_ID
    AND T231.EMPL_RCD = PS_GPCHST021_TMP.EMPL_RCD
    AND T231.GP_PAYGROUP = PS_GPCHST021_TMP.GP_PAYGROUP
    AND T231.CAL_ID = PS_GPCHST021_TMP.CAL_ID
    AND T231.SLICE_BGN_DT = PS_GPCHST021_TMP.SLICE_BGN_DT
    AND T231.PROCESS_INSTANCE = #prcs_process_instance
)
 AND PS_GPCHST021_TMP.PROCESS_INSTANCE = #prcs_process_instance
end-sql

! do Commit_Trans
!FMB 20100308

Begin-Sql on-error=give_warning
UPDATE PS_GPCHST021_TMP
SET FTE = (
    SELECT PCT_RSLT_VAL
    FROM PS_GPCHST022_TMP T241
    WHERE T241.EMPLID = PS_GPCHST021_TMP.EMPLID
    AND T241.EMPL_RCD = PS_GPCHST021_TMP.EMPL_RCD
    AND T241.GP_PAYGROUP = PS_GPCHST021_TMP.GP_PAYGROUP
    AND T241.SLICE_BGN_DT between $October01 and $October31
    AND T241.PROCESS_INSTANCE = #prcs_process_instance )
 where exists ( select 'X' from PS_GPCHST022_TMP T241
    WHERE T241.EMPLID = PS_GPCHST021_TMP.EMPLID
    AND T241.EMPL_RCD = PS_GPCHST021_TMP.EMPL_RCD
    AND T241.GP_PAYGROUP = PS_GPCHST021_TMP.GP_PAYGROUP
    AND T241.SLICE_BGN_DT between $October01 and $October31 )
    AND PS_GPCHST021_TMP.PROCESS_INSTANCE = #prcs_process_instance

end-sql

#debug show '<- GetPINSum'
end-procedure


!****************************************************************************
! GPCHUT00  - This calls GPCHUT01 for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT00 
! Step 01 to Step 04

#debug show 'GPCHUT00 <-- '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL078_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'Do Accu Hardcode Category LS --> '

BEGIN-SELECT
P2.PIN_NUM

 let #PIN  = &P2.PIN_NUM

#debug show 'inside select #PIN = '  #PIN

  do GPCHUT01

from
PS_GP_PIN P2
  where P2.PIN_CATEGORY = 'LSE'
  AND P2.COUNTRY = 'CHE'
  AND P2.PIN_TYPE = 'AC' 
  AND not exists ( select 'X' from PS_GPCHAL078_TMP T1
  where T1.PIN_NUM = P2.PIN_NUM and T1.PROCESS_INSTANCE = #prcs_process_instance ) 

 
END-SELECT  

#debug show 'GPCHUT00 --> '

End-procedure GPCHUT00 


!****************************************************************************
! GPCHUT01  - This one is called for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT01 
! Step 01 to Step 04

#debug show 'GPCHUT01 <-- '

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

!*****************************************************************************
! Step 05 - insert initial row for this accumulator

#debug show 'Step05 <-- '


 let #GPCH_LOOP = 1

#debug show 'inside select #PIN = '  #PIN 

Begin-Sql on-error=give_warning

INSERT INTO PS_GPCHAL076_TMP
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM ) 
!Values (#prcs_process_instance,0,#PIN,#PIN, $Ctl_From_Dt_Nrml, NULL,' ', 1,' ',0,0.00 )
Values (#prcs_process_instance,0,#PIN,#PIN, $Ctl_From_Dt_Nrml, NULL,' ', 1,' ',0,0)

End-Sql

!****************************************************************************
! Step 06 - Do while 

#debug show 'Step06 <-- '

 let #FMBCOUNT = 1
 let #FMBCNTRL = 0

 while #FMBCOUNT > 0 AND #FMBCNTRL < 100

#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP '#FMBCOUNT = ' #FMBCOUNT
! ==== 
 
! Call GPCHUT011
 
 do GPCHUT11
 let #FMBCNTRL = #FMBCNTRL + 1

! ==== 
 END-While

!****************************************************************************
! Step 06

#debug show 'Step07 <-- ' 
Begin-Sql

INSERT INTO PS_GPCHAL078_TMP 
(PROCESS_INSTANCE , PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SUM (SIGNVALUE), ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM
  FROM PS_GPCHAL077_TMP, PS_GP_PIN GPPIND3
 WHERE PROCESS_INSTANCE = #prcs_process_instance and GPPIND3.PIN_NUM = #PIN and GPPIND3.COUNTRY = 'CHE'
  GROUP BY PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM,ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM

End-Sql


#debug show 'delete after GPCHAL078_TMP #PIN = '  #PIN ' #GPCH_LOOP = ' #GPCH_LOOP

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'GPCHUT01 --> '

End-procedure GPCHUT01 


!****************************************************************************
! GPCHUT011
!****************************************************************************
! Step 01
!****************************************************************************
Begin-procedure GPCHUT11

#debug show 'GPCHUT11 <-- '
let $GPCH_LOOP = #GPCH_LOOP
#debug show '90 $GPCH_LOOP ' $GPCH_LOOP ' #GPCH_LOOP ' #GPCH_LOOP

Begin-SQL

INSERT INTO PS_GPCHAL077_TMP 
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE , 
 #ifdef DB2ALL
    [$GPCH_LOOP]
 #else
    #GPCH_LOOP
 #endif
 , GPPIND4.PIN_NUM, A.PIN_MBR_NUM, A.BGN_DT, A.END_DT, A.ENTRY_TYPE_ELEM, CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE, 
  A.ENTRY_TYPE_PCT, A.PCT_TO_ACM, A.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A,
       PS_GPCHAL076_TMP B,
       PS_GP_PIN GPPIND4
 WHERE A.ENTRY_TYPE_ELEM IN ('ER0', 'DD0') 
   AND A.PIN_NUM = B.PIN_MBR_NUM
   AND GPPIND4.PIN_NUM = #PIN
   AND B.PROCESS_INSTANCE = #prcs_process_instance 

END-SQL


!****************************************************************************
! Step 02
let $GPCH_LOOP = #GPCH_LOOP
Begin-SQL

INSERT INTO PS_GPCHAL076_TMP 
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE  , 
  #ifdef DB2ALL
    [$GPCH_LOOP]
 #else
    #GPCH_LOOP
 #endif
 
 , GPPIND2.PIN_NUM, A.PIN_MBR_NUM, B.BGN_DT, B.END_DT, B.ENTRY_TYPE_ELEM,
 CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE , B.ENTRY_TYPE_PCT, B.PCT_TO_ACM, B.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A 
  , PS_GPCHAL076_TMP B ,
  PS_GP_PIN GPPIND2
 WHERE A.ENTRY_TYPE_ELEM = 'AC4' 
   AND GPPIND2.PIN_NUM = #PIN
   AND A.PIN_NUM = B.PIN_MBR_NUM 
   AND B.PROCESS_INSTANCE = #prcs_process_instance 

END-SQL


!****************************************************************************
! Step 03
Begin-SQL

DELETE FROM PS_GPCHAL076_TMP  WHERE 
      PROCESS_INSTANCE = #prcs_process_instance AND 
      GPCH_LOOP < #GPCH_LOOP

END-SQL


!****************************************************************************
! Step 03

 let #FMBCOUNT = 0
 
BEGIN-SELECT  
COUNT(*)        &elcount
#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP
! ==== 
 let #FMBCOUNT = &elcount

FROM PS_GPCHAL076_TMP A1 

 WHERE A1.PROCESS_INSTANCE = #prcs_process_instance

! ==== 
END-SELECT 
 
 If #FMBCOUNT > 0
 
 let #GPCH_LOOP = #GPCH_LOOP + 1
 
 End-if
 

End-procedure GPCHUT11




!******************************************************************************************
begin-procedure Begin_Trans
  #ifdef SYBASE
    Begin-Sql on-error=give_warning
      BEGIN TRANSACTION
    End-SQL
  #endif

  #ifdef MICROSOFT
      Begin-Sql on-error=give_warning
        BEGIN TRANSACTION
      End-SQL
  #endif

  #ifdef INFORMIX
      Begin-Sql on-error=give_warning
        BEGIN WORK
      End-SQL
  #endif
end-procedure
!******************************************************************************************
begin-procedure Commit_Trans
  #ifdef SYBASE
    Begin-Sql on-error=give_warning
      COMMIT TRANSACTION
    End-SQL
  #endif

  #ifdef MICROSOFT
       Begin-Sql on-error=give_warning
         COMMIT TRANSACTION
       End-SQL
  #endif

  #ifdef INFORMIX
     Begin-Sql on-error=give_warning
       COMMIT WORK
     End-SQL
  #endif

  #ifdef ORACLE
      COMMIT
  #endif
end-procedure
!***********************************************************************