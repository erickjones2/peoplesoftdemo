!***********************************************************************
!  GPGBHLE.SQR - HIGH LOW EARNING SQR                                  *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:04:04:34                                 
!       $Release:  HR92                                                
!      $Revision:  102                                                 
!                                                                      *
!***********************************************************************

!******************************************************************
!  Date         Modification
!  ----         ------------
!  03/2003      Fix comparison to zero
!
!
!******************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************
!hr89b12 ice 1717000000 -modified procedure RETRIEVE-EARNING-AND-DEDUCTIONS

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables
#define PageLength              135
#define PosNumPage              120

#define Pos1                    1
#define Pos2                    10
#define Pos3                    20
#define Pos4                    30
#define Pos5                    70
#define Pos6                    80
#define Pos7                    105

!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 7 !This number must be changed to match the number
                !of lines in the header (including column headings)

        print $ReportTitle              ()   bold center
        print 'Report ID:  '            (+1,1)
        print $ReportID                 (,{Pos3})
        page-number                     ( ,{PosNumPage}) 'Page: '
        last-page                       () ' / '
        print 'Date:'                   (+1,1)
        print $Time_Begin               (,{Pos3})
        PRINT 'Tax begin Year:'         (,+8)
        PRINT $PNL_TAX_YEAR             (,+1)
        print 'Pay Entity:'             (+1,1)
        print $DESCR                    (,{Pos3})

!******************************************************************
!*** Heading section - Headers
!******************************************************************

        print 'Period'                 (+2,{Pos1})   BOLD
        print 'Emplid'                 (,{Pos2})     BOLD
        print 'Employee Name'          (,{Pos4})     BOLD
        
        IF $PNL_ELEMENT =''  or $PNL_ELEMENT = ' ' 
           PRINT 'Element Name'           (,{Pos5},30)   BOLD
           PRINT 'Amount Value'           (,{Pos7})      BOLD
        
        else
       PRINT $W_PIN_NM                (,{Pos5})     BOLD
        
       PRINT '-'                      (,+1)
       print $PIN_DESCR               (,+1)         BOLD
      print $PNL_OPERATOR            (,+1)         BOLD
      print $PNL_VALUE               (,+1)         BOLD
          
       END-IF
        print ' '                      (+1,1)
!        graphic                       (,1,96) horz-line

end-heading

!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report

        SHOW 'High Low Earnings'

        !----------------------------------------------------------
        !***    ! SHOW timedate of the beginning
        !----------------------------------------------------------
        let $Time_Begin = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        show 'Time Program Began = ' $Time_Begin

        !----------------------------------------------------------
        !***    Call the main procedures
        !----------------------------------------------------------
        do INIT-REPORT
        do MAIN-REPORT

        !----------------------------------------------------------
        !***    SHOW informations
        !----------------------------------------------------------

        move #CountError to $CountError 99999
        SHOW 'CountError  ==> ' noline
        SHOW $CountError
        SHOW ' '

        !----------------------------------------------------------
        !***    SHOW timedate of the end
        !----------------------------------------------------------
        !let $Time_Ended = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
        !show 'Time Program Ended = ' $Time_Ended

end-report


!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT

        let $ProcedureName      = 'INIT-REPORT'   
  !      SHOW 'PROCEDURE->' $ProcedureName

        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME

        if isnull($prcs_process_instance)
                SHOW 'Running High Low Earning SQR'
                do ASK-VALUES !SQR not run through process scheduler
        else
                SHOW 'Running High Low Earning SQR in the Process Scheduler'
                do GET-VALUES !SQR run through process scheduler
        end-if

        let $ReportID    = 'HLE'
        let $ReportTitle = 'High Low Earnings'
        !let $ReportSubTitle = ' '
        SHOW  ' '
        show $ReportID  ' '      $ReportTitle
        SHOW ' '
        show    'Operator ID: ' $Prcs_OprID  ' ' $Prcs_Run_Cntl_ID
        SHOW ' '

end-procedure INIT-REPORT

!*=================================================================
! Procedure    :INIT-VARIABLES
! Comment      :Initializations of all varaibles used by the report
!*=================================================================
begin-procedure INIT-VARIABLES

        let $ProcedureName      = 'INIT-VARIABLES'

        LET #TRUE               = 1
        LET #FALSE              = 0
        LET #CountError         = 0
        LET #counter            = 0


end-procedure INIT-VARIABLES


!*=================================================================
! Procedure   :ASK-VALUES
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure ASK-VALUES

        let $ProcedureName      = 'ASK-VALUES'

        !*---------------------------------------------------------
        !***    Enter the Calender Run ID
        !*---------------------------------------------------------
        !input $PNL_CAL_RUN_ID 'Enter Calender Run ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Entity
        !*---------------------------------------------------------
        !input $PNL_PAY_ENTITY 'Enter Pay Entity'

        !*---------------------------------------------------------
        !***    Enter the Deptid
        !*---------------------------------------------------------
        !input $PNL_DEPTID 'Enter Department ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Group
        !*---------------------------------------------------------
        !input $PNL_PAYGROUP 'Enter Pay Group '

        !*---------------------------------------------------------
        !***    Enter the Employee ID
        !*---------------------------------------------------------
        !input $PNL_EMPLID 'Enter Employee ID '

        !*---------------------------------------------------------
        !***    Enter the Tax Period
        !*---------------------------------------------------------
        !input $PNL_TAX_PERIOD 'Enter Tax Period'

        !*---------------------------------------------------------
        !***    Enter the Frequency ID
        !*---------------------------------------------------------
        !input $PNL_FREQUENCY_ID 'Enter Frequency ID'

        !*---------------------------------------------------------
        !***    Enter the Tax Year
        !*---------------------------------------------------------
        !input $PNL_TAX_YEAR 'Enter The Year the Tax Year Begins In'


end-procedure ASK-VALUES


!*=================================================================
! Procedure     :GET-VALUES
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure GET-VALUES

        let $ProcedureName      = 'GET-VALUES'

LET $PNL_ELEMENT_NAME=' '
begin-SELECT on-error=ERROR-SQL   !SELECTS THE DATA FROM THE PANEL
RUNDB.CAL_RUN_ID
RUNDB.DEPTID
RUNDB.PAY_ENTITY
RUNDB.GP_PAYGROUP
RUNDB.EMPLID
RUNDB.FREQUENCY_ID
RUNDB.GPGB_TAX_PERIOD
RUNDB.GPGB_TAX_BGN_YR
RUNDB.PIN_CODE
RUNDB.GPGB_FMLA_OPER
RUNDB.GPGB_GROSS

        LET $PNL_CAL_RUN_ID         = RTRIM(&RUNDB.CAL_RUN_ID,' ')
        LET $PNL_DEPTID             = RTRIM(&RUNDB.DEPTID,' ')
        LET $PNL_PAY_ENTITY         = RTRIM(&RUNDB.PAY_ENTITY,' ')
        LET $PNL_PAYGROUP           = RTRIM(&RUNDB.GP_PAYGROUP,' ')
        LET $PNL_EMPLID             = RTRIM(&RUNDB.EMPLID,' ')
        LET #PNL_TAX_PERIOD         = &RUNDB.GPGB_TAX_PERIOD
        LET $PNL_FREQUENCY_ID       = RTRIM(&RUNDB.FREQUENCY_ID,' ')
        LET $PNL_TAX_YEAR           = RTRIM(EDIT(&RUNDB.GPGB_TAX_BGN_YR, '9999'),' ')
        LET $PNL_ELEMENT            = RTRIM(&RUNDB.PIN_CODE, ' ')
        LET $_PNL_ELEMENT_NAME       = $PNL_ELEMENT 
        LET $PNL_OPERATOR           = RTRIM(&RUNDB.GPGB_FMLA_OPER, ' ')
        LET $PNL_VALUE              = TO_CHAR(&RUNDB.GPGB_GROSS)

        LET $PNL_TAX_PERIOD         = EDIT(#PNL_TAX_PERIOD,'09')

FROM  PS_GPGB_RUNCTL_SQR RUNDB
WHERE RUNDB.OPRID       = $Prcs_OprID
AND RUNDB.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID

end-SELECT
 

        EVALUATE $PNL_OPERATOR
            WHEN = 'G'
                LET $PNL_OPERATOR = '>='
            WHEN = 'L'
                LET $PNL_OPERATOR = '<='
            WHEN = '^'
                LET $PNL_OPERATOR = '<>'
        END-EVALUATE

        LET #W_POS = INSTR($PNL_ELEMENT,'GBR',2) - 1
        LET $W_PIN_NM = RTRIM(SUBSTR($PNL_ELEMENT,1,#W_POS), ' ')

        SHOW 'PNL_ELE->'  $PNL_ELEMENT
        SHOW 'PNL_OPER->' $PNL_OPERATOR
        SHOW 'PNL_VAL->'  $PNL_VALUE

end-procedure GET-VALUES

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure MAIN-REPORT

        let $ProcedureName      = 'MAIN-REPORT'
        SHOW 'PROCEDURE->' $ProcedureName
        !DO DeleteWorkRecord

        do SelectDataSet

         DO SELECT-EMPLOYEES ($PNL_CAL_RUN_ID, $PNL_DEPTID, $PNL_PAY_ENTITY,
         $PNL_PAYGROUP, $PNL_EMPLID, $PNL_TAX_PERIOD, $PNL_FREQUENCY_ID,
         $PNL_TAX_YEAR, $PNL_ELEMENT ,$SELECTED_EMPLOYEE, #SELECTED_TAX_PERIOD,$SELECTED_FREQUENCY)
        
         DO DeleteWorkRecord
        DO UPDATE-PRCS-RUN-STATUS

end-procedure MAIN-REPORT

!*==================================================================
! Procedure     : SelectDataSet                               !
! Descr         : Retrieves employees for selected criteria chosen !
!               : from the run control panel                       !
!*==================================================================
begin-procedure SelectDataSet

        let $ProcedureName      = 'SelectDataSet'
        SHOW 'PROCEDURE->' $ProcedureName

        LET $Q                          = ''''
        LET $ELEMENT_WHERE_STATEMENT    = ' '
        LET $ELEMENT_WHERE_STATEMENT2   = ' '


        LET $WHERE_STATEMENT    = 'WHERE GER.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR
        LET $FREQ_WHERE         = ' AND GER.FREQUENCY_ID = '''
                                  || $PNL_FREQUENCY_ID || $Q
        LET $PERIOD_WHERE       = ' AND GER.GPGB_TAX_PERIOD = '
                                  || $PNL_TAX_PERIOD
        LET $CALENDER_WHERE     = ' AND GER.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q
        LET $DEPTID_WHERE       = ' AND GER.DEPTID = '''
                                  || $PNL_DEPTID || $Q
        LET $PAY_ENTITY_WHERE   = ' AND GER.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q
        LET $EMPLID_WHERE       = ' AND GER.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        LET $PAYGROUP_WHERE     = ' AND GER.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q

        MOVE $PNL_TAX_PERIOD    TO   #TAX_PERIOD

        IF  #TAX_PERIOD <> 00
                LET $WHERE_STATEMENT= $WHERE_STATEMENT
                                      || $PERIOD_WHERE
        END-IF
      
        IF ($PNL_ELEMENT <> ' ') AND ($PNL_ELEMENT <> '')
                LET $_ELEMENT_WHERE_STATEMENT = ' AND GP.PIN_CODE = '''
                                  || $PNL_ELEMENT || $Q

                        
        #ifdef DB2ALL
             LET $_ELEMENT_WHERE_STATEMENT2 = ' AND GRED.CALC_RSLT_VAL '
                                  || $PNL_OPERATOR  || $PNL_VALUE 

                        SHOW 'ELEMENT_WHERE_STATEMENT2->' $_ELEMENT_WHERE_STATEMENT2
        #else
          LET $_ELEMENT_WHERE_STATEMENT2 = ' AND GRED.CALC_RSLT_VAL '
                                  || $PNL_OPERATOR || '''' || $PNL_VALUE || $Q

                        SHOW 'ELEMENT_WHERE_STATEMENT2->' $_ELEMENT_WHERE_STATEMENT2

        #end-if
                
        END-IF

        EVALUATE ''
        WHEN <> $PNL_FREQUENCY_ID
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $FREQ_WHERE
        WHEN <> $PNL_CAL_RUN_ID
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $CALENDER_WHERE
        WHEN <> $PNL_DEPTID
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $DEPTID_WHERE
                BREAK
        WHEN <> $PNL_PAY_ENTITY
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAY_ENTITY_WHERE

        WHEN <> $PNL_EMPLID
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $EMPLID_WHERE
                BREAK
        WHEN <> $PNL_PAYGROUP
                LET $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAYGROUP_WHERE
                BREAK
        END-EVALUATE

        LET $ELEMENT_WHERE_STATEMENT    = $_ELEMENT_WHERE_STATEMENT
        LET $ELEMENT_WHERE_STATEMENT2   =  $_ELEMENT_WHERE_STATEMENT2
        LET $_Where_statement = $Where_statement 
       SHOW 'FINAL WHERE-> '  $Where_statement

end-procedure
!*==================================================================
! Procedure     : SELECT EMPLOYEES                                 !
! Descr         : Retrieves employees for selected criteria chosen !
!               : from the run control panel                       !
!*==================================================================

begin-procedure SELECT-EMPLOYEES($PNL_CAL_RUN_ID, $PNL_DEPTID,
                $PNL_PAY_ENTITY, $PNL_PAYGROUP,$PNL_EMPLID,
                $PNL_TAX_PERIOD, $PNL_FREQUENCY_ID, $PNL_TAX_YEAR,$PNL_ELEMENT,
                :$SELECTED_EMPLOYEE, :#SELECTED_TAX_PERIOD, :$SELECTED_FREQUENCY)

        let $ProcedureName      = 'SELECT-EMPLOYEES'
        SHOW 'PROCEDURE->' $ProcedureName

        
! ----------- Main select
begin-SELECT DISTINCT
GER.PAY_ENTITY          &PAY_ENTITY  () on-break print=never after=START-NEW-PAGE level=1
GER.EMPLID              &EMPLID
GER.GPGB_TAX_PERIOD     &TAX_PERIOD
GER.CAL_RUN_ID
GER.DEPTID
GER.GP_PAYGROUP
GER.FREQUENCY_ID        &FREQUENCY
GER.GPGB_TAX_BGN_YR

                LET $SELECTED_EMPLOYEE   = RTRIM(&EMPLID, ' ')
                LET #SELECTED_TAX_PERIOD = &TAX_PERIOD 
                LET $SELECTED_FREQUENCY  = &FREQUENCY

        DO RETRIEVE-EARNING-AND-DEDUCTIONS ($SELECTED_EMPLOYEE,
        #SELECTED_TAX_PERIOD, $SELECTED_FREQUENCY, $PNL_ELEMENT,$PERIOD, $NI_CATEGORY, $EMPLID,
        $PAY_ENTITY)

FROM PS_GPGB_EE_RSLT GER, PS_GP_PYE_PRC_STAT GPPS 
[$_Where_statement]
AND GER.EMPLID = GPPS.EMPLID
AND GER.CAL_RUN_ID = GPPS.CAL_RUN_ID
AND GER.EMPL_RCD = GPPS.EMPL_RCD
AND GER.CAL_ID = GPPS.CAL_ID
AND GER.GP_PAYGROUP = GPPS.GP_PAYGROUP
AND GPPS.CALC_TYPE = 'P'
AND GPPS.RSLT_VER_NUM = ( 
 SELECT MAX (X.RSLT_VER_NUM) 
  FROM PS_GP_PYE_PRC_STAT X 
 WHERE GPPS.EMPLID = X.EMPLID 
   AND GPPS.EMPL_RCD = X.EMPL_RCD 
   AND GPPS.CAL_ID = X.CAL_ID 
   AND GPPS.GP_PAYGROUP = X.GP_PAYGROUP 
   AND GPPS.CALC_TYPE = X.CALC_TYPE 
   AND GPPS.RSLT_REV_NUM = ( 
 SELECT MAX (X.RSLT_REV_NUM) 
  FROM PS_GP_PYE_PRC_STAT X 
 WHERE GPPS.EMPLID = X.EMPLID 
   AND GPPS.EMPL_RCD = X.EMPL_RCD 
   AND GPPS.CAL_ID = X.CAL_ID 
   AND GPPS.GP_PAYGROUP = X.GP_PAYGROUP 
   AND GPPS.RSLT_VER_NUM = X.RSLT_VER_NUM 
   AND GPPS.CALC_TYPE = X.CALC_TYPE))
ORDER BY GER.GPGB_TAX_BGN_YR, GER.PAY_ENTITY,GER.EMPLID,GER.FREQUENCY_ID,GER.GPGB_TAX_PERIOD
END-SELECT
end-procedure SELECT-EMPLOYEES
!=================================================== =============
! Procedure:  START-NEW-PAGE                                      !
! Descr:      New page each time the Pay Entity changes           !
!                                                                 !
!*=================================================================
begin-procedure START-NEW-PAGE

        let $ProcedureName      = 'START-NEW-PAGE'
        SHOW 'PROCEDURE->' $ProcedureName

         SHOW 'CURRENT-LINE->' #CURRENT-LINE
        IF #_CURRENT-LINE > 8
                NEW-PAGE

        END-IF

end-procedure START-NEW-PAGE

!*=================================================================
! Procedure: PRINT-REPORT/CALCULATE VALUES                        !
! Descr:     Print Employee information                           !
!                                                                 !
!*=================================================================

begin-procedure PRINT-REPORT ($PIN_CODE,$PERIOD, $NI_CATEGORY,
                $EMPLID, $PAY_ENTITY)

        LET $ProcedureName = 'PRINT-REPORT'
        SHOW 'PROCEDURE->' $ProcedureName
        
        SHOW 'EMPLID->' $EMPLID

        PRINT $PERIOD                   (+1,{Pos1})
        PRINT $EMPLID                   (,{Pos2})
        PRINT $_FULLNAME                (,{Pos4})
          
         
        IF ($_PIN_CODE =' ' OR $_PIN_CODE ='') 
        PRINT $_PIN_DESCR         (,{Pos5},30)
        PRINT #_AMT                     (,{Pos7}) edit 9,999,999.99
          
        ELSE
        PRINT #_AMT                     (,{Pos5}) edit 9,999,999.99
        END-IF

        DO RESET-VALUES

end-procedure PRINT-REPORT

!*=================================================================
! Procedure: Reset-Values                                         !
! Comment:   Resets Calculated Values                             !
!                                                                 !
!*=================================================================

begin-procedure RESET-VALUES

        LET $ProcedureName = 'RESET-ARRAY'
        SHOW 'PROCEDURE->' $ProcedureName

        LET #AMT          = 0

end-procedure RESET-VALUES

!*=================================================================
! Procedure     : RETRIEVE EARNING AND DEDUCTIONS                 !
! Descr         : Retrieves information for all selected Employees!
!                                                                 !
!*=================================================================

begin-procedure RETRIEVE-EARNING-AND-DEDUCTIONS ($SELECTED_EMPLOYEE,
                #SELECTED_TAX_PERIOD, $SELECTED_FREQUENCY,$PNL_ELEMENT, :$PERIOD, :$NI_CATEGORY,
                :$EMPLID, :$PAY_ENTITY)

        let $ProcedureName      = 'RETRIEVE-EARNING-AND-DEDUCTIONS'
        SHOW 'PROCEDURE->' $ProcedureName  '<>' $SELECTED_EMPLOYEE

        LET $PERIOD = 'NEW'
        
! ----------- Select Earning and Deduction results

BEGIN-SELECT

GP.PIN_CODE          &PIN_CODE
GP.PIN_TYPE          &PIN_TYPE
GP.DESCR             &PIN_DESCR
GRED.CALC_RSLT_VAL   &CALC_RSLT_VAL
GRED.EMPLID          &EMPLID
GER.GPGB_TAX_PERIOD  &TAX_PERIOD
GER.GP_PAYGROUP      &PAYGROUP
GER.PAY_ENTITY       &PAY_ENTITY
GER.FREQUENCY_ID     &FREQUENCY_ID
GER.GPGB_NI_CATEGORY &NI_CATEGORY
GER.TAX_CODE_UK      &TAX_CODE
GER.NATIONAL_ID      &NATIONAL_ID
GPY.DESCR            &DESCR
PD.FIRST_NAME         &FIRSTNAME
PD.MIDDLE_NAME        &MIDDLENAME
PD.LAST_NAME          &LAST_NAME

        LET $_FORENAME         = RTRIM(&FIRSTNAME , ' ')
        LET $_SURNAME          = &LAST_NAME
        LET $_FULLNAME         = $_FORENAME || ' ' || $_SURNAME
        LET $_NI                = &NATIONAL_ID
        LET $_DESCR             = &DESCR
        LET $_PIN_CODE          = RTRIM(&PIN_CODE,' ')
        LET $_PIN_TYPE          = RTRIM(&PIN_TYPE,' ')
        LET $_PIN_DESCR         = RTRIM(&PIN_DESCR,' ')
             
        LET #_AMT               = &CALC_RSLT_VAL
        LET $EMPLID             = &EMPLID
        LET $PAY_ENTITY         = &PAY_ENTITY
        LET $FREQUENCY_ID       = RTRIM(&FREQUENCY_ID,' ')
        LET $TAX_PERIOD         = EDIT(&TAX_PERIOD,'99')
        LET $PAYGROUP           = &PAYGROUP
        LET $NI_CATEGORY        = RTRIM(&NI_CATEGORY,' ')
        LET $_TAXCODE           = &TAX_CODE
        LET $PERIOD             = $FREQUENCY_ID || $TAX_PERIOD
            
        PRINT $PERIOD                   (+1,{Pos1})
        PRINT $EMPLID                   (,{Pos2})
        PRINT $_FULLNAME                (,{Pos4})
          
         
        IF ($PNL_ELEMENT =' ' OR $PNL_ELEMENT ='') 
        PRINT $_PIN_DESCR         (,{Pos5},30)
        PRINT #_AMT                     (,{Pos7}) edit 9,999,999.99
          
        ELSE
        PRINT #_AMT                     (,{Pos5}) edit 9,999,999.99
        END-IF

        DO RESET-VALUES

        !DO PRINT-REPORT ($PIN_CODE, $PERIOD, $NI_CATEGORY, $EMPLID,$PAY_ENTITY)

FROM PS_GP_PIN GP
, PS_GP_RSLT_ERN_DED GRED
, PS_GPGB_EE_RSLT GER
, PS_GP_PYENT GPY
, PS_GP_PYE_PRC_STAT GPPS
, PS_PERSONAL_DT_FST PD
,PS_GPGB_PYENT_DTL PYE
WHERE GP.PIN_NUM = GRED.PIN_NUM
AND GRED.CAL_ID = GER.CAL_ID
AND GRED.CAL_RUN_ID = GER.CAL_RUN_ID
AND GRED.EMPL_RCD = GER.EMPL_RCD
AND GRED.EMPLID = GER.EMPLID
AND GER.EMPLID = PD.EMPLID
AND GER.EMPLID = $SELECTED_EMPLOYEE
AND GER.GPGB_TAX_PERIOD = #SELECTED_TAX_PERIOD
AND GER.FREQUENCY_ID = $SELECTED_FREQUENCY
AND GER.PAY_ENTITY = GPY.PAY_ENTITY
AND GRED.GP_PAYGROUP = GER.GP_PAYGROUP
AND GRED.RSLT_SEG_NUM = GER.RSLT_SEG_NUM
AND GER.EMPLID = GPPS.EMPLID
AND GER.CAL_RUN_ID = GPPS.CAL_RUN_ID
AND GER.EMPL_RCD = GPPS.EMPL_RCD
AND PYE.PAY_ENTITY = GER.PAY_ENTITY
AND PYE.GPGB_TAX_BGN_YR = GER.GPGB_TAX_BGN_YR
AND GER.CAL_ID = GPPS.CAL_ID
AND GER.GP_PAYGROUP = GPPS.GP_PAYGROUP
AND GPPS.CALC_TYPE = 'P'
[$_ELEMENT_WHERE_STATEMENT]
[$_ELEMENT_WHERE_STATEMENT2]
ORDER BY GRED.EMPLID, GER.FREQUENCY_ID, GER.GPGB_TAX_PERIOD

END-SELECT

end-procedure RETRIEVE-EARNING-AND-DEDUCTIONS

!-----------------------------------------------------------------------
! Delete all records from existing work table
!-----------------------------------------------------------------------
begin-procedure DeleteWorkRecord
   
let $sql-statement = 'DELETING FROM TEMP GPGB_HLE_TMP'
SHOW $sql-statement
BEGIN-SQL ON-ERROR=SQL-Error
   DELETE FROM PS_GPGB_HLE_TMP
END-SQL
end-procedure

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************

!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure ERROR-SQL

        add 1 to #CountError

        show 'SQL Error -> ' $ProcedureName
        show 'SQL Error -> ' $ErrorMessage
        show 'SQL Error -> ' $SQL-ERROR

        stop

end-procedure ERROR-SQL

!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'    ! Reset printer procedure
#include 'curdttim.sqc' ! Get-Current-DateTime procedure
#include 'datetime.sqc' ! Routines for date and time formatting
#include 'number.sqc'   ! Routines to format numbers
!#Include 'stdapi.sqc'  ! Update Process API
#include 'prcsapi.sqc'  ! Update Process Request API
#include 'prcsdef.sqc' !Update Process Request variable declaration
#include 'readxlat.sqc' ! Read Translate Table
#include 'gpgbrttc.sqc'
#include 'gpgbrttd.sqc'

!******************************* End Of Program *******************
