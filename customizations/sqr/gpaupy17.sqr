!***********************************************************************
! GPAUPY17                                                             *
!                                                                      *
!
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:18:46                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!***********************************************************************
!                                                                      *
!  Program Name : GPAUPY17.SQR                                         *
!  Description: Program to generate the ABS SUrvey of Average Weekly   *
!  and its Dat file in ASCII format - for GPAU                         *
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !page layout and printer definition
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting
#include 'prcsapi.sqc'  !Replaces stdapi.sqc

begin-report

        do Init-Processing
        do Select-Parameters
        do Process-Main
        do Reset                        ! called from reset.sqc
        do Update-Prcs-Run-Status
        do Delete-RunControl

end-report

!***********************************************************************
! Init-Processing                                                      *
! Called By:    begin-report                                           *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Define-Prcs-Vars        - prcsapi.sqc (prcsdef.sqc)    *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Init-Report                                            *
!               Init-Number             - number.sqc                   *
!               Get-Language-Codes      - prcslng.sqc                  *
! Description:  Standard PeopleSoft initialization processing.         *
!***********************************************************************

begin-procedure Init-Processing

    #define Ann_Factor               52
!    #define FullTime_Hours      17.5
    #define FullTime_Hours      35


        do Init-Datetime
        do Get-Current-Datetime
        do Define-Prcs-Vars
        do Get-Run-Control-Parms
        do Init-Report
        do Init-Number
        do Get-Language-Codes
end-procedure ! Init-Processing

!***********************************************************************
! Init-Report                                                          *
! Called By:    Init-Processing                                        *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc              *
!               Get_Field_Information                                  *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!***********************************************************************

begin-procedure Init-Report

    let $ReportID              = 'GPAUPY17'          ! Printed in header
    let $ReportDate            = $AsOfToday          ! Printed in header
    let $ReportTime            = $AsOfNow            ! Printed in header
    let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    let #Maxlines              = 55                  ! # rows on a page, used for page breaking
    let $Current_Emplid        = $Last_Emplid        ! Used for page breaking
    let $Page_Break_Indicator  = 'Reset'             ! Used for page breaking
    let $Rpt_Hdr_FirstTimeThru = 'True'              ! Used for page breaking
    let $Rpt_Hdr_FirstTimeThru  = 'True'


!*** Initialize date formatting.
    let $Date_Init = '1900-01-01 00:00:00.000'
        #ifdef ORACLE
            let $Date_Init = '01-NOV-00'
        #endif

    let $RptDtUnformated = $ReportDate
    do Format-DateTime($RptDtUnformated, $RptDtFormated, {DEFDATE}, '', '')
    let $ReportDate = $RptDtFormated

end-procedure     ! Init-Report


!***********************************************************************
! Select-Parameters                                                    *
! Called By:                                                           *
! Calls:                                                               *
! Description:  Selects level zero information off of run control.     *
!***********************************************************************
begin-procedure Select-Parameters
BEGIN-SELECT
LVL0.OPRID
LVL0.RUN_CNTL_ID
LVL0.GPAU_ABS_REF_NUM
LVL0.PAY_ENTITY
LVL0.YEARCD
LVL0.GPAU_QTR

  let $ABS_ref_num  = &LVL0.GPAU_ABS_REF_NUM
  let $Pay_Entity   = &LVL0.PAY_ENTITY
  let $YearNo       = &LVL0.YEARCD
  let $QrtrNo       = &LVL0.GPAU_QTR

from PS_GPAU_RUNCTL_ABS LVL0
WHERE LVL0.OPRID            = $PRCS_OPRID
      AND LVL0.RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID
end-select
!
!*************************************************
!*  Get the PayEntity Description
!*************************************************
BEGIN-SELECT
PYENT.DESCR
      let $Pay_Entity_Descr = &PYENT.DESCR
      if length($Pay_Entity_Descr) > 25
         let $Pay_Entity_Descr = substr($Pay_Entity_Descr,1,50)
      end-if

    FROM PS_GP_PYENT PYENT
      WHERE PAY_ENTITY = $Pay_Entity
END-SELECT


end-procedure   !  Select-Parameters

!***********************************************************************
! Heading                                                              *
! Called By:                                                           *
! Calls:                                                               *
! Description:  Print the ABS report headings                          *
!***********************************************************************

begin-heading 7


!**** Begin printing header info.                                          *

    let $ReportTitle = $GPAUPY17_Title
    let #RptCol = 2
    print '            '    (1,1)
    print $stdhdg_co_nm     ()          center
    print $stdhdg_rep_id    (+1,#RptCol)
    print $ReportID         (0,35)
    print $ReportTitle      ()          center

    print $stdhdg_page_no   (+1,#RptCol)
    print #page-count       (,35)      edit 88888888

    print $stdhdg_run_dt    (+1,#RptCol)
    print $RptDtFormated    (,35)

    print $stdhdg_run_tm    (+1,#RptCol)
    print $ReportTime       (,35)

    print $Reference_Per    (+1,#RptCol)
    print $Hdg1             (,35)
    print $Reference_Date   (+1,#RptCol)
    print $Qrtr_End_Date (,+4) ! edit 'DD/MM/YYY'


!   print $Company          (+1,#RptCol)
    print 'Business Unit Description ' (+2,#RptCol)
!   print $Pay_entity       (,26)
    print $Pay_Entity_Descr (,35)
    print $ABS_ref_no       (+1,#RptCol)
    print $ABS_ref_num      (,35)
end-heading
!
!*************************************************
!*  Determine Start & End Dates of the Quarter
!*************************************************
begin-procedure Get-Quarter-Dates

  Evaluate $QrtrNo
    when = '1'
         let $Qrtr_Start_Date = '01/01/'
         let $Qrtr_End_Date = '31/03/'
         let $Hdg1 = '1st'
         break
    when = '2'
         let $Qrtr_Start_Date = '01/04/'
         let $Qrtr_End_Date = '30/06/'
         let $Hdg1 = '2nd'
         break
    when = '3'
         let $Qrtr_Start_Date = '01/07/'
         let $Qrtr_End_Date = '30/09/'
         let $Hdg1 = '3rd'
         break
    when = '4'
         let $Qrtr_Start_Date = '01/10/'
         let $Qrtr_End_Date = '31/12/'
         let $Hdg1 = '4th'
  end-evaluate

  let $Qrtr_Start_Date = $Qrtr_Start_Date || $YearNo
  let $Qrtr_End_Date = $Qrtr_End_Date || $YearNo

  do format-datetime($Qrtr_Start_Date, $Qrtr_Start_Date, {DEFDMY},'','native')
  do format-datetime($Qrtr_End_Date, $Qrtr_End_Date, {DEFDMY},'','native')

!****************************
!* Convert Dates to DEFDATE for Printing.
!****************************
    do Format-DateTime($Qrtr_Start_Date, $Qrtr_Start_Dt, {DEFDATE}, '', '')
    do Format-DateTime($Qrtr_End_Date, $Qrtr_End_Dt, {DEFDATE}, '', '')

  let $Hdg1 = $Hdg1 || ' Quarter of ' || $YearNo

end-procedure    ! Get-Quarter-Dates
!
!***********************************************************************
! Process-Main                                                         *
! Called By:    Process-Main                                           *
! Calls:        Format-DateTime                                        *
!               Get-Rslt-Ern-Ded                                       *
!               Get-Rslt-Accum                                         *
! Description:  Retrieves segment information to be printed in page    *
!               header.                                                *
!***********************************************************************

begin-procedure Process-Main
      do Append_Report_Translation ('GPAUHDG1')

      do Get_Field_Information ('GPAUHDG1', 'STDHDG_CO_NM',   $stdhdg_co_nm,       #DW)
      do Get_Field_Information ('GPAUHDG1', 'GPAUPY16_TITLE', $GPAUPY17_Title,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'ABS_REF',        $ABS_ref_no,         #DW)
      do Get_Field_Information ('GPAUHDG1', 'STDHDG_REP_ID',  $stdhdg_rep_id,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'STDHDG_PAGE_NO', $stdhdg_page_no,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'STDHDG_RUN_DT',  $stdhdg_run_dt,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'STDHDG_RUN_TM',  $stdhdg_run_tm,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'STDHDG_END_REP', $stdhdg_end_rep,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'CURRENCY',       $Currency_lbl,       #DW)
      do Get_Field_Information ('GPAUHDG1', 'BEGIN_DATE',     $Begin_date_lbl,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'END_DATE',       $End_date_lbl,       #DW)

      do Get_Field_Information ('GPAUHDG1', 'COMPANY',        $Company,            #DW)
      do Get_Field_Information ('GPAUHDG1', 'REFERENCE_PRD',  $Reference_Per,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'REFERENCE_DATE_17', $Reference_Date,  #DW)

      do Get_Field_Information ('GPAUHDG1', 'TOT_EMPL',       $Tot_Empl,           #DW)
      do Get_Field_Information ('GPAUHDG1', 'FT_MALE',        $FT_male,            #DW)
      do Get_Field_Information ('GPAUHDG1', 'FT_FEMALE',      $FT_female,          #DW)
      do Get_Field_Information ('GPAUHDG1', 'PT_MALE',        $PT_male,            #DW)
      do Get_Field_Information ('GPAUHDG1', 'PT_FEMALE',      $PT_female,          #DW)
      do Get_Field_Information ('GPAUHDG1', 'WAGE_SAL',       $Wage_Salary,        #DW)
      do Get_Field_Information ('GPAUHDG1', 'SEV_TERM_RED',   $Sever_term_redund,  #DW)
      do Get_Field_Information ('GPAUHDG1', 'DIR_OFF_FEES',   $Dir_Office_Fees,    #DW)
      do Get_Field_Information ('GPAUHDG1', 'PAY_GRP',        $Pay_Group_lbl,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'PAY_END_DATE',   $Pay_End_Date_lbl,   #DW)
      do Get_Field_Information ('GPAUHDG1', 'PAY_PRD_TYPE',   $Pay_Period_Type_lbl, #DW)
      do Get_Field_Information ('GPAUHDG1', 'PAY_PRD_TYPE_2', $Pay_Period_Type_2,  #DW)
      do Get_Field_Information ('GPAUHDG1', 'STATE',          $State_lbl,          #DW)
      do Get_Field_Information ('GPAUHDG1', 'FT_ADULT_MALE',  $FT_Adult_Male,      #DW)
      do Get_Field_Information ('GPAUHDG1', 'FT_ADULT_FEMALE',$FT_Adult_Female,    #DW)
      do Get_Field_Information ('GPAUHDG1', 'GE_TOTALS',      $GE_Total,           #DW)
      do Get_Field_Information ('GPAUHDG1', 'GE_FT_ADULT_MALE', $GE_FT_Adult_Male, #DW)
      do Get_Field_Information ('GPAUHDG1', 'GE_FT_ADULT_FEML', $GE_FT_Adult_Feml, #DW)
      do Get_Field_Information ('GPAUHDG1', 'GE_OTHER_MALE',  $GE_Other_Males,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'GE_OTHER_FEMALE', $GE_Other_Females,  #DW)
      do Get_Field_Information ('GPAUHDG1', 'OVT_FT_ADULT_M', $Ovt_FT_Adult_M,     #DW)
      do Get_Field_Information ('GPAUHDG1', 'OVT_FT_ADULT_F', $Ovt_FT_Adult_F,     #DW)

      do Get_Field_Information ('GPAUHDG1', 'NUMBER_PAID_OT',  $Num_Paid_OT,       #DW)
      do Get_Field_Information ('GPAUHDG1', 'OT_HRS_PAID_FOR', $OT_HRS_PAID_FOR,   #DW)

      do Get-Quarter-Dates

!*** Set dynamic sort based on run control value. is resolved in GPRNCTL1.SQC
    let $Order_By_Clause = 'ORDER BY PRCSTAT.PAY_ENTITY, SEGSTAT.EMPLID, SEGSTAT.EMPL_RCD'

    let #rows_selected = 0

    let #Tot_records                 = 0
    let $ABS_AWE_pin_code            = 'ABS AWE AUS'   !Gross Earnings
    let $ABS_OT_pin_code             = 'ABS OT AUS'    !Overtime Earnings
    let $ABS_OT_Hrs_pin_code         = 'ABS OT HR AUS' !Overtime Hours
    let $ABS_WAGE_SAL_code           = 'ABS SEE AUS' !Wages and Salaries
    Let $ABS_DirFEE_Code             = 'ABS FEE AUS'   !Director Fee
    Let $ABS_Sever_Code              = 'ABS TRM AUS'   !Severance Code

    let $ABS_pin_code                =  $ABS_AWE_pin_code
    do Get_ABS_PIN_NUM

    let $ABS_pin_code                =  $ABS_OT_pin_code
    do Get_ABS_PIN_NUM

    let $ABS_pin_code                =  $ABS_OT_Hrs_pin_code
    do Get_ABS_PIN_NUM

    let $ABS_pin_code                =  $ABS_WAGE_SAL_code
    do Get_ABS_PIN_NUM

    let $ABS_pin_code                =  $ABS_DirFEE_Code
    do Get_ABS_PIN_NUM

    let $ABS_pin_code                =  $ABS_Sever_Code
    do Get_ABS_PIN_NUM

    move '{FILEPREFIX}GPAUPY17.DAT{FILESUFFIX}' to $FileName

    let #FileNo = 1
    Open $FileName as #FileNo for-writing record=250
    if #filestat != 0
       show 'Error in opening ABS output file....'
    end-if


BEGIN-SELECT

PRCSTAT.PAY_ENTITY
SEGSTAT.GP_PAYGROUP
PRCSTAT.PRD_END_DT
JOBAUS.PAYROLL_STATE_AUS
JOBAUS.EMPLID
JOBAUS.EMPL_RCD
PRCSTAT.CAL_PRD_ID
CALPRD.FREQUENCY_ID

PRCSTAT.PYE_PRC_IND         &PRCSTAT.PYE_PRC_IND
PRCSTAT.SEL_STAT            &PRCSTAT.SEL_STAT
PRCSTAT.SEL_ACTION          &PRCSTAT.SEL_ACTION
PRCSTAT.CURRENCY_CD         &PRCSTAT.CURRENCY_CD
PRCSTAT.PRD_BGN_DT          &PRCSTAT.PRD_BGN_DT

SEGSTAT.EMPLID              &SEGSTAT.EMPLID
SEGSTAT.CAL_RUN_ID          &SEGSTAT.CAL_RUN_ID
SEGSTAT.CAL_ID              &SEGSTAT.CAL_ID
SEGSTAT.EMPL_RCD            &SEGSTAT.EMPL_RCD
SEGSTAT.CALC_ACTION         &SEGSTAT.CALC_ACTION
SEGSTAT.PYE_CALC_STAT       &SEGSTAT.PYE_CALC_STAT
SEGSTAT.SEG_BGN_DT          &SEGSTAT.SEG_BGN_DT
SEGSTAT.SEG_END_DT          &SEGSTAT.SEG_END_DT
SEGSTAT.SEG_STATUS          &SEGSTAT.SEG_STATUS
SEGSTAT.CUR_RT_TYPE         &SEGSTAT.CUR_RT_TYPE

SEGSTAT.RSLT_SEG_NUM        &SEGSTAT.RSLT_SEG_NUM

    add 1 to #rows_selected
    add 1 to #Tot_records

    let $PayType            = &CALPRD.FREQUENCY_ID
    let $Pay_Entity         = &PRCSTAT.PAY_ENTITY
    let $Pay_group          = &SEGSTAT.GP_PAYGROUP
    let $Pay_end_date       = &PRCSTAT.PRD_END_DT
    let $Seg_end_dt         = &SEGSTAT.SEG_END_DT
    let $State              = &JOBAUS.PAYROLL_STATE_AUS
    let $Cal_prd_id         = &PRCSTAT.CAL_PRD_ID
    let $Cal_Run_ID         = &SEGSTAT.CAL_RUN_ID
    let $Currency_Value     = &PRCSTAT.CURRENCY_CD
    let #Empl_Rec           = &SEGSTAT.EMPL_RCD
    let $Emplid             = &SEGSTAT.EMPLID
    let #Seg_Num            = &SEGSTAT.RSLT_SEG_NUM

    if #rows_selected > 1
       if $Last_Paygroup         <> $Pay_group
          or $Last_End_date_save <> $Pay_end_date
          or $Last_State         <> $State
          or $Last_PayType       <> $PayType
          do Print-Report
          new-page
       end-if
    end-if

    do Get_Empl_Age
    do Get_Empl_Sex
    do Get_Empl_Std_Hour
    do Count-Employee

    let $ABS_pin_code  =  $ABS_AWE_pin_code
    let #ABS_pin_num   =  #ABS_AWE_Pin_Num
    do Get-ABS_Accum                              ! Get Gross Earnings

    let $ABS_pin_code  =  $ABS_OT_pin_code
    let #ABS_pin_num   =  #ABS_OT_Pin_Num
    do Get-ABS_Accum                              ! Get Overtime Earnings

    let $ABS_pin_code=  $ABS_OT_Hrs_pin_code
    let #ABS_pin_num =  #ABS_OT_Hrs_Pin_Num
    do Get-ABS_Accum                              ! Get Overtime Hours

    let $ABS_pin_code=  $ABS_WAGE_SAL_code
    let #ABS_pin_num =  #ABS_SalWage_Pin_Num
    do Get-ABS_Accum                              ! Get Wages and Salaries

    let $ABS_pin_code=  $ABS_DirFEE_Code
    let #ABS_pin_num =  #ABS_DirFEE_Pin_NUm
    do Get-ABS_Accum                              ! Get Director Fee

    let $ABS_pin_code=  $ABS_Sever_Code
    let #ABS_pin_num =  #ABS_Sever_Pin_NUm
    do Get-ABS_Accum                              ! Get Severance Code

    let $Last_Paygroup       = $Pay_group
    let $Last_End_date_save  = $Pay_end_date
    let $Last_PayType        = $PayType
    let $Last_State          = $State

    FROM PS_GP_PYE_PRC_STAT     PRCSTAT,
         PS_GP_RUN_TYPE         GPRUNTYPE1,
         PS_GP_PYE_SEG_STAT     SEGSTAT,
         PS_JOB_AUS              JOBAUS,
         PS_GP_CAL_PRD          CALPRD

    WHERE PRCSTAT.PAY_ENTITY    = $Pay_entity
      AND SEGSTAT.CALC_ACTION   = 'C'
      AND SEGSTAT.PYE_CALC_STAT IN ( '70','75')
      AND SEGSTAT.EMPLID        = PRCSTAT.EMPLID
      AND SEGSTAT.CAL_RUN_ID    = PRCSTAT.CAL_RUN_ID
      AND SEGSTAT.EMPL_RCD      = PRCSTAT.EMPL_RCD
      AND SEGSTAT.GP_PAYGROUP   = PRCSTAT.GP_PAYGROUP
      AND SEGSTAT.CAL_ID        = PRCSTAT.CAL_ID
      AND SEGSTAT.CAL_RUN_ID=SEGSTAT.ORIG_CAL_RUN_ID
      AND PRCSTAT.CAL_RUN_ID=PRCSTAT.ORIG_CAL_RUN_ID
      AND PRCSTAT.PRD_TYPE='C'
      AND PRCSTAT.PRC_ORD_TS = (SELECT MAX(PRC_ORD_TS)
                                FROM PS_GP_PYE_PRC_STAT
                                WHERE EMPLID=PRCSTAT.EMPLID
                                AND EMPL_RCD=PRCSTAT.EMPL_RCD
                                AND CAL_PRD_ID=PRCSTAT.CAL_PRD_ID)

      AND SEGSTAT.RSLT_SEG_NUM=   (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_PYE_SEG_STAT
                                    WHERE EMPLID      = SEGSTAT.EMPLID
                                      AND CAL_RUN_ID  = SEGSTAT.CAL_RUN_ID
                                      AND EMPL_RCD    = SEGSTAT.EMPL_RCD
                                      AND GP_PAYGROUP = SEGSTAT.GP_PAYGROUP
                                      AND CAL_ID      = SEGSTAT.CAL_ID)

      AND PRCSTAT.RSLT_VER_NUM  = (SELECT MAX(RSLT_VER_NUM) FROM PS_GP_PYE_PRC_STAT
                                    WHERE EMPLID      = SEGSTAT.EMPLID
                                      AND CAL_RUN_ID  = SEGSTAT.CAL_RUN_ID
                                      AND EMPL_RCD    = SEGSTAT.EMPL_RCD
                                      AND GP_PAYGROUP = SEGSTAT.GP_PAYGROUP
                                      AND CAL_ID      = SEGSTAT.CAL_ID)

      AND PRCSTAT.RSLT_REV_NUM  = 1
      AND PRCSTAT.PYE_PRC_IND   = 'N'
      AND PRCSTAT.SEL_STAT      IN ('A','I')
      AND PRCSTAT.SEL_ACTION    = 'C'

      AND PRCSTAT.PRD_END_DT    <= $Qrtr_End_Date
      AND PRCSTAT.PRD_END_DT    >= $Qrtr_Start_Date

      AND PRCSTAT.CAL_PRD_ID     = CALPRD.CAL_PRD_ID

      AND SEGSTAT.RSLT_SEG_NUM  > 0
      AND PRCSTAT.RUN_TYPE       = GPRUNTYPE1.RUN_TYPE
      AND GPRUNTYPE1.CALC_TYPE  = 'P'

      AND JOBAUS.EMPLID          = SEGSTAT.EMPLID
      AND JOBAUS.EMPL_RCD        = SEGSTAT.EMPL_RCD
      AND JOBAUS.EFFDT           = (SELECT MAX(EFFDT) FROM PS_JOB_AUS
                                    WHERE EMPLID   = SEGSTAT.EMPLID
                                      AND EMPL_RCD = SEGSTAT.EMPL_RCD
                                      AND EFFDT   <= SEGSTAT.SEG_END_DT)

      AND JOBAUS.EFFSEQ          = (SELECT MAX(EFFSEQ) FROM PS_JOB_AUS
                                    WHERE EMPLID   = SEGSTAT.EMPLID
                                      AND EMPL_RCD = SEGSTAT.EMPL_RCD
                                      AND EFFDT    = JOBAUS.EFFDT)

      ORDER BY SEGSTAT.GP_PAYGROUP, PRCSTAT.PRD_END_DT, CALPRD.FREQUENCY_ID, JOBAUS.PAYROLL_STATE_AUS, JOBAUS.EMPLID,
      JOBAUS.EMPL_RCD

END-SELECT

   do Print-Report
   if not #rows_selected
      let $noDataMsg = '>>> No Data Found, '
      print $noDataMsg   (+5,10)
   end-if
   close #FileNo

end-procedure ! Process-Main


!***********************************************************************
! Print-Report                                                         *
! Called By:    Main                                                   *
! Calls:                                                               *
! Description:  Reset variables                                         *
!***********************************************************************
begin-procedure Print-Report
  do Print-Write-Output
  let #Emp_Count = 0
  let #FT_Male = 0
  let #FT_Female = 0
  let #PT_Male = 0
  let #PT_Female = 0
  let #FTA_Male = 0
  let #FTA_Female = 0
  let #Super_Count = 0
  let #OT_Count = 0
  let #OT_Hours = 0
  let #GrossWS = 0
  let #GrossE = 0
  let #FTAM_GE = 0
  let #FTAF_GE = 0
  let #AOM_GE = 0
  let #AOF_GE = 0
  let #FTAM_OT = 0
  let #FTAF_OT = 0
  let #Term = 0
  let #Direct = 0

  let #Ot     = 0
  let #OtHrs  = 0

end-procedure       !Print-Report



!***********************************************************************
! Get-Amounts-Withheld                                                 *
! Called By:    Main                                                   *
! Calls:        Read-Rslt-Accum                                        *
! Description:  Retrieves accumulators tax amount                      *
!***********************************************************************

begin-procedure Get-ABS_Accum
BEGIN-SELECT
ACCUM2.EMPLID
ACCUM2.CALC_VAL

    if $ABS_pin_code  =  $ABS_AWE_pin_code
       Add &ACCUM2.CALC_VAL to #Grosse
    end-if

    if $ABS_pin_code =  $ABS_WAGE_SAL_code
       add &ACCUM2.CALC_VAL to #Grossws
    end-if

    if $ABS_pin_code =  $ABS_DirFEE_Code
       add &ACCUM2.CALC_VAL to #Direct
    end-if

    if $ABS_pin_code =  $ABS_Sever_Code
       add &ACCUM2.CALC_VAL to #Term
    end-if

    Evaluate $FTA_Flag

        when = 'M'     ! Full Time Adult Male
             if $ABS_pin_code  = $ABS_AWE_pin_code
                 add &ACCUM2.CALC_VAL    to #FTAM_GE
             end-if
             if $ABS_pin_code  = $ABS_OT_pin_code
                add &ACCUM2.CALC_VAL    to #FTAM_OT
             end-if
             break

        when = 'F'     ! Full Time Adult Female
             if $ABS_pin_code  = $ABS_AWE_pin_code
                add &ACCUM2.CALC_VAL to #FTAF_GE
             end-if
             if $ABS_pin_code  = $ABS_OT_pin_code
                add &ACCUM2.CALC_VAL    to #FTAF_OT
             end-if
             break

        when-other
             if $ABS_pin_code = $ABS_AWE_pin_code
                if $Empl_Sex = 'M'
                   add &ACCUM2.CALC_VAL to #AOM_GE
                else
                   add &ACCUM2.CALC_VAL to #AOF_GE
                end-if
             end-if
    end-evaluate


    if $ABS_pin_code  = $ABS_OT_Hrs_pin_code
       if &ACCUM2.EMPLID <> $Last_Emplid
          add 1 to #Ot
          let $Last_Emplid = &ACCUM2.EMPLID
          add &ACCUM2.CALC_VAL    to #OtHrs
       end-if
    end-if

    FROM PS_GP_RSLT_ACUM ACCUM2

    WHERE ACCUM2.EMPLID        = $Emplid
      AND ACCUM2.CAL_RUN_ID    = $Cal_Run_ID
      AND ACCUM2.EMPL_RCD      = #Empl_Rec
      AND ACCUM2.EMPL_RCD_ACUM = #Empl_Rec
      AND ACCUM2.GP_PAYGROUP   = &SEGSTAT.GP_PAYGROUP
      AND ACCUM2.CAL_ID        = &SEGSTAT.CAL_ID
      AND ACCUM2.RSLT_SEG_NUM  = #Seg_Num
      AND ACCUM2.SLICE_END_DT  = $Seg_end_dt
      AND ACCUM2.ACM_THRU_DT   = $Pay_end_date
      AND ACCUM2.PIN_NUM       = #ABS_Pin_Num
      AND ACCUM2.USER_KEY2     = &JOBAUS.PAYROLL_STATE_AUS
END-SELECT
end-procedure  !Get-ABS_Accum
!
!***********************************************************************
! Get_ABS_PIN_NUM                                                      *
! Called By:    Main                                                   *
! Calls:        Read GP_PIN to get PIN_NUM;                            *
! Description:  Retrieves accumulators ABS pin nums                    *
!***********************************************************************

begin-procedure Get_ABS_PIN_NUM

!** The ABS Accum. are stored in PIN_CODE 'ABS AWE AUS' and 'ABS OT AUS' for Australia -
! Hard code using PIN_CODE since it is not changed, on the other hand PIN_NUM  and PIN_NM can be changed overtime:
BEGIN-SELECT

GPPIN.PIN_NUM  &GPPIN.PIN_NUM

    Evaluate $ABS_pin_code

    when = $ABS_AWE_pin_code
           let #ABS_AWE_Pin_Num     = &GPPIN.PIN_NUM
           break
    when = $ABS_OT_pin_code
           let #ABS_OT_Pin_Num      = &GPPIN.PIN_NUM
           break
    when = $ABS_OT_Hrs_pin_code
           let #ABS_OT_Hrs_Pin_Num  = &GPPIN.PIN_NUM
           break
    when = $ABS_WAGE_SAL_code
           Let #ABS_SalWage_Pin_NUm = &GPPIN.PIN_NUM
           break
    when = $ABS_DirFEE_Code
           Let #ABS_DirFEE_Pin_NUm = &GPPIN.PIN_NUM
           break
    when = $ABS_Sever_Code
           Let #ABS_Sever_Pin_NUm = &GPPIN.PIN_NUM
           break
    end-evaluate

  FROM PS_GP_PIN  GPPIN
  WHERE GPPIN.PIN_CODE = $ABS_pin_code
END-SELECT
end-procedure  ! Get_ABS_PIN_NUM
!
!***********************************************************************
! Get_Empl_Age                                                         *
! Called By:    Main                                                   *
! Description:  Read PERSON to get Birthdate and then Calculate age    *
!***********************************************************************
begin-procedure Get_Empl_Age
BEGIN-SELECT
PERS.BIRTHDATE

    ! Calculate Employee's Age

    do Convert-To-DTU-Date(&PERS.BIRTHDATE, $BirthDate)
    do Convert-To-DTU-Date($Pay_end_date, $Pay_End_Dt_DTU)
    do dtu-diff-years($BirthDate, $Pay_End_Dt_DTU, #Emp_Age)

    let $DOB = &PERS.BIRTHDATE

  FROM PS_PERSON PERS
  WHERE PERS.EMPLID = $Emplid
END-SELECT
end-procedure  ! Get_Empl_Age
!
!***********************************************************************
! Get_Empl_Sex                                                         *
! Called By:    Main                                                   *
! Description:  Read PERS_DATA_EFFDT to get Sex                        *
!***********************************************************************
begin-procedure Get_Empl_Sex
BEGIN-SELECT
PERS_D.SEX

  let $Empl_Sex = &PERS_D.SEX

  FROM PS_PERS_DATA_EFFDT PERS_D
  WHERE PERS_D.EMPLID = $Emplid
    AND PERS_D.EFFDT = (SELECT MAX(EFFDT) FROM PS_PERS_DATA_EFFDT
                                    WHERE EMPLID   = $Emplid
                                      AND EFFDT   <= $Pay_end_date)

END-SELECT
end-procedure  ! Get_Empl_Sex
!
!***********************************************************************
! Get_Empl_Std_Hour                                                    *
! Called By:    Main                                                   *
! Calls:                                                               *
! Description:  Retrieve standard hours and frequency factor                        *
!***********************************************************************
begin-procedure Get_Empl_Std_Hour

BEGIN-SELECT

J.STD_HOURS
F.FREQ_ANNUAL_FACTOR

  let #Std_Hours = &J.STD_HOURS
  let #Freq_Factor = &F.FREQ_ANNUAL_FACTOR

  FROM PS_JOB J, PS_FREQUENCY_TBL F
  WHERE J.EMPLID     = $Emplid
    and J.EMPL_RCD   = #Empl_Rec
    and J.EFFDT = (select max(H.EFFDT) from PS_JOB H
                                     where H.EMPLID    = J.EMPLID
                                       and H.EMPL_RCD  = J.EMPL_RCD
                                       and H.EFFDT    <= $Pay_end_date)
    and J.EFFSEQ = (select max(I.EFFSEQ) from PS_JOB I
                                       where I.EMPLID    = J.EMPLID
                                         and I.EMPL_RCD  = J.EMPL_RCD
                                         and I.EFFDT     = J.EFFDT)
   AND J.STD_HRS_FREQUENCY = F.FREQUENCY_ID
   AND F.EFF_STATUS = 'A'

END-SELECT

end-procedure  ! Get_Empl_Std_Hour
!
!***********************************************************************
! Count-Employee                                                       *
! Called By:    Main                                                   *
! Calls:                                                               *
! Description:  Check Employee if Full Time or Part Time, Adult or not,*
!   Male or Female.                                                    *
!***********************************************************************
begin-procedure Count-Employee

  let $FTA_Flag = ''

  let #Full_Time_Hours = ({Ann_Factor} / #Freq_Factor) * {FullTime_Hours}

  if #Std_Hours >= #Full_Time_Hours                ! Full Time
     if $Empl_Sex = 'M'              ! Full Time Male
        add 1 to #FT_Male
        if #Emp_Age >= 21            ! Full Time Adult Male
           add 1 to #FTA_Male
           let $FTA_Flag = 'M'
        end-if
     else                            ! Full Time Female
        add 1 to #FT_Female
        if #Emp_Age >= 21            ! Full Time Adult Female
           add 1 to #FTA_Female
           let $FTA_Flag = 'F'
        end-if
     end-if
  else                               ! Part Time
     if $Empl_Sex = 'M'              ! Part Time Male
        add 1 to #PT_Male
     else
        add 1 to #PT_Female          ! Part Time Female
     end-if
  end-if
  do Count-Super-Employee
  add 1 to #Emp_Count
end-procedure   ! Count-Employee

!***********************************************************************
! Count-Super-Employee                                                 *
! Called By:    Count-Employee                                         *
! Calls:                                                               *
! Description:  Check  if the Employee falls under Super Scheme        *
!***********************************************************************
begin-procedure Count-Super-Employee
let #super_Emp_tmp=0

BEGIN-SELECT
ERNDED.EMPLID
SOVR.PIN_SOVR_NUM
SOVR.SOVR_VAL_CHAR
    add 1 to #Super_Emp_tmp

FROM PS_GP_RSLT_ERN_DED ERNDED, PS_GP_ELM_DFN_SOVR SOVR
WHERE ERNDED.EMPLID=$Emplid
AND ERNDED.EMPL_RCD= #Empl_Rec
AND ERNDED.CAL_RUN_ID=$Cal_Run_id
AND ERNDED.CAL_ID=&SEGSTAT.CAL_ID
AND ERNDED.RSLT_SEG_NUM=#Seg_Num
AND ERNDED.PIN_NUM=SOVR.PIN_NUM
AND SOVR.PIN_SOVR_NUM = (SELECT PIN_NUM FROM PS_GP_PIN WHERE PIN_CODE='SUP VR CONT TYPE AUS')
AND SOVR.SOVR_VAL_CHAR='SA'
END-SELECT

if #Super_Emp_tmp >0
    add 1 to #Super_Count
end-if

end-procedure   ! Count-Super-Employee


!
!***********************************************************************
! Print-Write-Output                                                   *
! Called By:                                                           *
! Calls:                                                               *
! Description:  Write Output file and unformatted report.              *
!***********************************************************************
Begin-Procedure Print-Write-Output

!       print $Pay_Group_lbl                      (+3,2)
        print 'Payroll ID ;'                      (+3,2)
        print $Last_Paygroup                      (,63)

!       print $Pay_End_Date_lbl                   (+1,2)
        print 'Pay end date '                     (+1,2)
        do Format-DateTime($Last_End_date_save, $PeriodDt, {DEFDATE}, '', '')
        print $PeriodDt                           (,63)

!       print $Pay_Period_Type_lbl                (+1,2)
!       print $Pay_Period_Type_2                  (+1,6)
        Print 'Frequency Id (D=daily, W=weekly'   (+1,2)
        Print '    F=Fortnightly, M=Calendar month, 4=4 weekly).' (+1,2)

        Do Get_Frequency
        print $FreqDescr                          (,63)

        print $State_lbl                          (+1,2)
        print $Last_State                         (,66)

        print $Tot_Empl                           (+1,2)
        print #Emp_Count                          (,62)  edit 999,999

        print $FT_male                             (+1,2)
        Print #FT_Male                             (,62)  edit 999,999

        print $FT_female                           (+1,2)
        print #FT_female                           (,62)  edit 999,999

        Print $PT_male                            (+1,2)
        Print #PT_Male                            (,62)  edit 999,999

        Print $PT_female                          (+1,2)
        Print #PT_female                          (,62)  edit 999,999

        print $FT_Adult_Male                      (+1,2)
        print #FTA_Male                           (,62)  edit 999,999

        print $FT_Adult_Female                    (+1,2)
        print #FTA_Female                         (,62)  edit 999,999

        Let #SuperCount = #Super_Count
        Print 'Total Employees In Super Scheme'   (+1,2)
        print #SuperCount                         (,62)  edit 999,999

        print 'Total Employees who worked Overtime'  (+1,2)
        print #OT                                 (,62)  edit 999,999

        print 'Total number of Overtime hours worked' (+1,2)
        print #OTHrs                              (,62)  edit 999,999

        print 'Gross wages and Salaries in whole dollars'  (+1,2)
                  Let $Grossws = Edit(#Grossws, '888,888,888,888')
        Let $Grossws = '$' || $Grossws      !The string will be over-ridden below.
        print $Grossws                            (,68)

        print 'Gross Earnings in whole dollars'   (+1,2)
        Let $GrossE = Edit(#Grosse, '888,888,888,888')
        Let $GrossE = '$' || $GrossE      !The string will be over-ridden below.
        print $GrossE                             (,68)

        print 'Gross Earnings Full time adult males in whole dollars' (+1,2)
                  Let $FTAM_GE = Edit(#FTAM_GE, '888,888,888,888')
        Let $FTAM_GE = '$' || $FTAM_GE      !The string will be over-ridden below.
        print $FTAM_GE                            (,68)

        print 'Gross Earnings Full time adult females in whole dollars' (+1,2)
                  Let $FTAF_GE = Edit(#FTAF_GE, '888,888,888,888')
        Let $FTAF_GE = '$' || $FTAF_GE      !The string will be over-ridden below.
        print $FTAF_GE                            (,68)

        print 'Gross Earnings Full time other males in whole dollars'   (+1,2)
                  Let $AOM_GE = Edit(#AOM_GE, '888,888,888,888')
        Let $AOM_GE = '$' || $AOM_GE      !The string will be over-ridden below.
        print $AOM_GE                             (,68)

        print 'Gross Earnings Full time other females in whole dollars'   (+1,2)
                  Let $AOF_GE = Edit(#AOF_GE, '888,888,888,888')
        Let $AOF_GE = '$' || $AOF_GE      !The string will be over-ridden below.
        print $AOF_GE                             (,68)

        print 'Overtime Full Time Adult Males in whole dollars'           (+1,2)
                  Let $FTAM_OT = Edit(#FTAM_OT, '888,888,888,888')
        Let $FTAM_OT = '$' || $FTAM_OT      !The string will be over-ridden below.
        print $FTAM_OT                            (,68)

        print 'Overtime Full Time Adult females in whole dollars'           (+1,2)
                  Let $FTAF_OT = Edit(#FTAF_OT, '888,888,888,888')
        Let $FTAF_OT = '$' || $FTAF_OT      !The string will be over-ridden below.
        print $FTAF_OT                            (,68)

!For Severance code we report ABS TRM accumulator value.
        print 'Severance, Termination and Redundancy' (+1,2)
        print '  payments in whole dollars.'          (+1,2)
        
                  Let $SeverancePay = Edit(#Term, '888,888,888,888')
        Let $SeverancePay = '$' || $SeverancePay
        print $SeverancePay                       (,68)

!For Directors Fee we report ABS FEE accumulator value.
        print 'Directors/Office Holders Fees in whole dollars.' (+1,2)
                  Let $DirectorFee = Edit(#Direct, '888,888,888,888')
        Let $DirectorFee = '$' || $DirectorFee
        print $DirectorFee                       (,68)

        do format-datetime($Last_End_date_save,$PeriodDt,{DEFCMP},'','')


        Let $PayEndDt  = substr($periodDt,7,2) || substr($periodDt,5,2)
                  || substr($periodDt,1,4)

        do Format-Number(#Emp_Count, $Empls, '000009')
        do Format-Number(#FT_Male, $FtMales, '000009')
        do Format-Number(#FT_Female, $FtFemales, '000009')
        do Format-Number(#PT_Male, $PtMales, '000009')
        do Format-Number(#PT_Female, $PtFemales, '000009')
        do Format-Number(#FTA_Male, $FTAMales, '000009')
        do Format-Number(#FTA_Female, $FTAFemales, '000009')
        do Format-Number(#SuperCount, $Super, '000009')
        do Format-Number(#Ot, $Ot, '000009')
        do Format-Number(#OtHrs, $OtHrs, '0000000009')
        do Format-Number(#Grossws, $Grossws,     '00000009')
        do Format-Number(#Grosse, $Grosse,       '00000009')
        do Format-Number(#FTAM_GE, $GEFTAMales,  '00000009')
        do Format-Number(#FTAF_GE, $GEFTAFemales,'00000009')
        do Format-Number(#AOM_GE, $GEOTHMales,   '00000009')
        do Format-Number(#AOF_GE, $GEOTHFemales, '00000009')
        do Format-Number(#FTAM_OT, $OTFTAMales,  '00000009')
        do Format-Number(#FTAF_OT, $OTFTAFemales,'00000009')
        do Format-Number(#Term, $Term,           '00000009')
        do Format-Number(#Direct, $Direct,       '00000009')

        Write #FileNo from $Pay_Entity_Descr:30  !1,30
                 ',':1                  !31,1
                 $ABS_ref_num:17        !32,17
                 ',':1                  !49,1
                 $Last_Paygroup:8       !50,8
                 ',':1                  !58,1
                 $PayEndDT:8            !59,8
                 ',':1                  !67,1
                 $Last_PayType:1        !68,1
                 ',':1                  !69,1
                 $Last_State:3          !70,3
                 ',':1                  !73,1
                 $Empls:6               !74,6
                 ',':1                  !80,1
                 $FtMales:6             !81,6
                 ',':1                  !87,1
                 $FtFemales:6           !88,6
                 ',':1                  !94,1
                 $PtMales:6             !95,6
                 ',':1                  !101,1
                 $PtFemales:6           !102,6
                 ',':1                  !108,1
                 $FTAMales:6            !109,6
                 ',':1                  !115,1
                 $FTAFemales:6          !116,6
                 ',':1                  !122,1
                 $Super:6               !123,6
                 ',':1                  !129,1
                 $ot:6                  !130,6
                 ',':1                  !136,1
                 $OtHrs:10              !137,10
                 ',':1                  !147,1
                 $Grossws:8             !148,8
                 ',':1                  !156,1
                 $Grosse:8              !157,8
                 ',':1                  !165,1
                 $GEFTAMales:8          !166,8
                 ',':1                  !174,1
                 $GEFTAFemales:8        !175,8
                 ',':1                  !183,1
                 $GEOTHMales:8          !184,8
                 ',':1                  !192,1
                 $GEOTHFemales:8        !193,8
                 ',':1                  !201,1
                 $OTFTAMales:8          !202,8
                 ',':1                  !210,1
                 $OTFTAFemales:8        !211,8
                 ',':1                  !219,1
                 $Term:8                !220,8
                 ',':1                  !228,1
                 $Direct:8              !229,8
End-PROCEDURE       !Print-Write-Output



!***********************************************************************
! Delete-RunControl                                                    *
! Called By:    begin-report                                           *
! Calls:        none                                                   *
! Description:  Delete run control when report comes to successful     *
!                   end.                                               *
!***********************************************************************

begin-procedure Delete-RunControl
begin-SQL
DELETE FROM PS_GPAU_RUNCTL_ABS
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;
        #ifdef ORACLE
            COMMIT;
        #endif

end-SQL
end-procedure ! Delete-RunControl
!
!**************************************************************************
!
! Procedure: Get_Frequency
!
! Description: Get the frequency of the payee
!**************************************************************************
begin-procedure Get_Frequency
  Let $FreqDescr = ''

begin-SELECT on-error=SQL-Error
FREQ.DESCRSHORT
FREQ.FREQUENCY_TYPE

     Let $FreqType  = &FREQ.FREQUENCY_TYPE
     Let $FreqDescr = &FREQ.DESCRSHORT

    Evaluate $FreqType
       When = 'A'          ! Annual
              Let $FreqDescr = rtrim($Last_PayType,' ') || ' - ' || $FreqDescr
              Break
       When = 'B'          ! Biweekly
              Let $FreqDescr = 'F - Fortnightly'
              Let $Last_PayType = 'F'
              Break
       When = 'C'          ! Contract
              Let $FreqDescr = rtrim($Last_PayType,' ') || ' - ' || $FreqDescr
              Break
       When = 'D'          ! Daily
              Let $FreqDescr = 'D - Daily'
              Let $Last_PayType = 'D'
              Break
       When = 'F'          ! Every Four Weeks
              Let $FreqDescr = '4 - 4 weekly'
              Let $Last_PayType = '4'
              Break
       When = 'H'          ! Hourly
              Let $FreqDescr = rtrim($Last_PayType,' ') || ' - ' || $FreqDescr
              Let $Last_PayType = 'H'
              Break
       When = 'M'          ! Monthly
              Let $FreqDescr = 'M - Calendar Month'
              Let $Last_PayType = 'M'
              Break
       When = 'Q'          ! Quarterly
              Let $FreqDescr = rtrim($Last_PayType,' ') || ' - ' || $FreqDescr
              Let $Last_PayType = 'Q'
              Break
       When = 'S'          ! Semimonthly
              Let $FreqDescr = 'F - Fortnightly'
              Let $Last_PayType = 'F'
              Break
       When = 'W'          ! Weekly
              Let $FreqDescr = 'W - Weekly'
              Let $Last_PayType = 'W'
              Break
    End-Evaluate

  FROM PS_FREQUENCY_TBL FREQ
   WHERE FREQ.FREQUENCY_ID = $Last_PayType
     AND FREQ.EFFDT = (SELECT MAX(FREQ1.EFFDT)
                FROM PS_FREQUENCY_TBL FREQ1
                WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID
                  AND FREQ1.EFFDT <= $Qrtr_End_Date)
END-SELECT
end-procedure
!
!***********************************************************************
! SQCS included in the report                                          *
!***********************************************************************
!
#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset.sqc'        ! Reset printer procedure
!#include 'datetime.sqc'
!#Include 'number.sqc'    !Routines to format numbers
!#Include 'stdapi.sqc'    !Routines to Update Run Status
