!***********************************************************************
!* REPORT NAME: Account Code Build         Unit: POSFND16              *
!***********************************************************************
!***********************************************************************
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!          $Date:  2013/06/18:10:10:08                                 !
!       $Release:  HR92                                                !
!      $Revision:  104                                                 !
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector.                  *
!                                                                      *
! Modified : Apr 2 2002 Provide support for 4 additional chartfields   *
!            Budget ref, Chartfield1, Chartfield2, and Chartfield3 now *
!   part of HR ACCT CD LOAD                                            *
!***********************************************************************

#Include 'setenv.sqc'     !Set environment
#Include 'setup32.sqc'
#define ACCT_SIZE 9

!***********************************************************************
begin-report

  do HOUSEKEEPING
  do MAINLINE
  do WRAPUP

end-report

!***********************************************************************
! HOUSEKEEPING                                                         *
! This procedure performs the application initializations.  Formats    *
! variables for use.  Calls the procedures to get input parameters.    *
!***********************************************************************
begin-procedure HOUSEKEEPING

  display 'Process Begin - ' noline
  do display-time

  do INIT-DATETIME
  do INIT-NUMBER
  do GET-CURRENT-DATETIME
  do STDAPI-INIT
  do SELECT-PARAMETERS

  do Create-Arrays
  do Delete-Temp-Record

  let $Zeros = rpad ('0', 20, '0')

end-procedure HOUSEKEEPING

!***********************************************************************
!GET-VALUES                                                            *
!***********************************************************************
begin-procedure GET-VALUES

   do GET-FROM-THRU-DATE
   let $Old_Accts = upper(ltrim(rtrim(&RUN_CNTL_BDGT.Add_To_File,' '),' '))
   move $FromDate to $Rctl_Fromdate
   do Format-DateTime ($Rctl_Fromdate, $Rctl_FromDate_Cmp, {DEFCMP},'','')

end-procedure GET-VALUES

!***********************************************************************
! MAINLINE                                                             *
! This procedure is the main processing paragraph.  It performs        *
! application specific record processing.                              *
!***********************************************************************
begin-procedure MAINLINE

   let #Total_Records_Inactive   = 0
   let #Total_Input_Records      = 0
   let #Total_Records_Updated    = 0
   let #Total_Records_Inserted   = 0

   if $Old_Accts = 'Y'

      do INACTIVATE-OLD-ACCTS

      do Commit-Transaction

      show 'Total Existing Records Inactivated:  '
                                     #Total_Records_Inactive edit 999,999,999

      display 'Records Inactivated - ' noline
      do Display-Time
      display ' '
   end-if

   let $Prev_FDM_HASH     = ' '
   let #FDMComboCount     = 0
   let #ComboSeqNum       = 0
   let #ExistAcctCdSeqNum = 0

   do READ-INPUT-FILE1

   show 'Total Input Records Read:            '
                                     #Total_Input_Records edit 999,999,999

   display 'Input Records Read - ' noline
   do Display-Time
   display ' '

   if #ComboSeqNum > 0 or #ExistAcctCdSeqNum > 0

       if #ComboSeqNum > 0
           do Update-Acct-Cd-Last
           do Commit-Transaction
           do Finialize-FDM-Combo
           do Process-New-FDM-Combo-Code
       end-if

       do New-Valid-Combo-Records
       do Delete-Temp-Record
   end-if

   show 'Total Account Records Updated:       '
                                     #Total_Records_Updated edit 999,999,999

   show 'Total Account Records Inserted:      '
                                     #Total_Records_Inserted edit 999,999,999

   display 'Process Ended - ' noline
   do Display-Time

   do CLOSE-INPUT-FILE1

end-procedure MAINLINE

!***********************************************************************
! INACTIVATE-OLD-ACCTS                                                 *
!***********************************************************************
begin-procedure INACTIVATE-OLD-ACCTS

begin-SELECT
ATB.SETID
ATB.PROCESS_GROUP
ATB.FDM_HASH
ATB.EFFDT
ATB.EFF_STATUS
ATB.FDM_COMBO_CD
ATB.DESCR
ATB.DESCRSHORT
ATB.ACCOUNT
ATB.DEPTID_CF
ATB.PROJECT_ID
ATB.PRODUCT
ATB.FUND_CODE
ATB.PROGRAM_CODE
ATB.CLASS_FLD
ATB.AFFILIATE
ATB.OPERATING_UNIT
ATB.ALTACCT
ATB.BUDGET_REF
ATB.CHARTFIELD1
ATB.CHARTFIELD2
ATB.CHARTFIELD3
ATB.AFFILIATE_INTRA1
ATB.AFFILIATE_INTRA2
ATB.BUSINESS_UNIT_PC
ATB.ACTIVITY_ID
ATB.RESOURCE_TYPE
ATB.RESOURCE_CATEGORY
ATB.RESOURCE_SUB_CAT
ATB.VALID_FLAG

   move &ATB.EFFDT  to $GL_EFFDT
   do Format-DateTime ($GL_EFFDT, $GL_EffDt_Cmp, {DEFCMP},'','')

   if $GL_EffDt_Cmp >= $Rctl_FromDate_Cmp

      move &ATB.SETID              to $Setid
      move &ATB.PROCESS_GROUP      TO $Process_Group
      move &ATB.FDM_HASH           to $Fdm_hash
      move &ATB.EFFDT              to $Effdt
      move 'I'                     to $Eff_Status
      move &ATB.DESCRSHORT         to $Descr_Short
      move &ATB.DESCR              to $Descr
      move &ATB.VALID_FLAG         to $Valid_Flag

      do UPDATE-ACCT-TBL
   else
      move &ATB.SETID              to $GL_SETID
      move &ATB.PROCESS_GROUP      to $GL_PROCESS_GROUP
      move &ATB.FDM_HASH           TO $CALC_HASH
      move &ATB.FDM_COMBO_CD       to $SYS_COMBO_CD
      move 'I'                     to $GL_EFF_STATUS
      move &ATB.DESCR              to $GL_DESCR
      move &ATB.DESCRSHORT         to $GL_DESCR_SHORT
      move &ATB.ACCOUNT            to $GL_ACCOUNT
      move &ATB.DEPTID_CF          to $GL_DEPTID_CF
      move &ATB.PROJECT_ID         to $GL_PROJECT_ID
      move &ATB.PRODUCT            to $GL_PRODUCT
      move &ATB.FUND_CODE          to $GL_FUND_CODE
      move &ATB.PROGRAM_CODE       to $GL_PROGRAM_CODE
      move &ATB.CLASS_FLD          to $GL_CLASS_FLD
      move &ATB.AFFILIATE          to $GL_AFFILIATE
      move &ATB.OPERATING_UNIT     to $GL_OPERATING_UNIT
      move &ATB.ALTACCT            to $GL_ALTACCT
      move &ATB.BUDGET_REF         to $GL_BUDGET_REF
      move &ATB.CHARTFIELD1        to $GL_CHARTFIELD1
      move &ATB.CHARTFIELD2        to $GL_CHARTFIELD2
      move &ATB.CHARTFIELD3        to $GL_CHARTFIELD3
      move &ATB.AFFILIATE_INTRA1   to $GL_AFFILIATE_INTRA1
      move &ATB.AFFILIATE_INTRA2   to $GL_AFFILIATE_INTRA2
      move &ATB.BUSINESS_UNIT_PC   to $GL_BUSINESS_UNIT_PC
      move &ATB.ACTIVITY_ID        to $GL_ACTIVITY_ID
      move &ATB.RESOURCE_TYPE      to $GL_RESOURCE_TYPE
      move &ATB.RESOURCE_CATEGORY  to $GL_RESOURCE_CATEGORY
      move &ATB.RESOURCE_SUB_CAT   to $GL_RESOURCE_SUB_CAT
      move &ATB.VALID_FLAG         to $GL_VALID_FLAG

      do FORMAT-VAR
      do INSERT-NEW-ACCT-CODE
   end-if

   add 1 to #Total_Records_Inactive

FROM PS_VALID_COMBO_TBL ATB
WHERE ATB.EFF_STATUS = 'A'
  AND (ATB.EFFDT = (SELECT MAX(ATB1.EFFDT)
                      FROM PS_VALID_COMBO_TBL ATB1
                     WHERE ATB1.SETID = ATB.SETID
                       AND ATB1.PROCESS_GROUP = ATB.PROCESS_GROUP
                       AND ATB1.FDM_HASH = ATB.FDM_HASH
                       AND ATB1.EFFDT <= $Rctl_FromDate)
    OR (ATB.EFFDT > $Rctl_FromDate))
end-SELECT

end-procedure INACTIVATE-OLD-ACCTS

!***********************************************************************
! READ-INPUT-FILE1                                                     *
!***********************************************************************
begin-procedure READ-INPUT-FILE1

   let $err-statement1 = 'BUD003, READ-INPUT-FILE1'

begin-SELECT
GL.SETID
GL.PROCESS_GROUP
GL.FDM_HASH
GL.EFFDT
GL.EFF_STATUS
GL.DESCR
GL.DESCRSHORT
GL.ACCOUNT
GL.DEPTID_CF
GL.PROJECT_ID
GL.PRODUCT
GL.FUND_CODE
GL.PROGRAM_CODE
GL.CLASS_FLD
GL.AFFILIATE
GL.OPERATING_UNIT
GL.ALTACCT
GL.BUDGET_REF
GL.CHARTFIELD1
GL.CHARTFIELD2
GL.CHARTFIELD3
GL.AFFILIATE_INTRA1
GL.AFFILIATE_INTRA2
GL.BUSINESS_UNIT_PC
GL.ACTIVITY_ID
GL.RESOURCE_TYPE
GL.RESOURCE_CATEGORY
GL.RESOURCE_SUB_CAT
GL.VALID_FLAG
GL.ACCT_CD

   let $GL_Base_hash = substr(&GL.FDM_Hash, 1, 28)

   if $Prev_FDM_HASH <> $GL_Base_hash
       if #FDMComboCount <> 0
           do Process-FDMCombo-Array
       end-if

       do Initialize-FDMCombo-Array
       let #FDMComboCount = 0
       let $Prev_FDM_HASH = $GL_Base_hash
   end-if

   !* do Read-Input-Details ***
   let $GL_Setid = &GL.Setid
   let $GL_Process_Group = &GL.Process_Group
   let $GL_FDM_Hash  = &GL.FDM_Hash
   let $GL_EffDt = &GL.EffDt
   let $GL_Eff_Status = &GL.Eff_Status
   let $GL_Descr = &GL.Descr
   let $GL_Descr_Short = &GL.DescrShort
   let $GL_Account = &GL.Account
   let $GL_DeptID_CF = &GL.DeptID_CF
   let $GL_Project_Id = &GL.Project_Id
   let $GL_Product = &GL.Product
   let $GL_Fund_Code = &GL.Fund_Code
   let $GL_Program_Code = &GL.Program_Code
   let $GL_Class_Fld = &GL.Class_Fld
   let $GL_Affiliate = &GL.Affiliate
   let $GL_Operating_Unit = &GL.Operating_Unit
   let $GL_AltAcct = &GL.AltAcct
   let $GL_BUDGET_REF = &GL.BUDGET_REF
   let $GL_CHARTFIELD1 = &GL.CHARTFIELD1
   let $GL_CHARTFIELD2 = &GL.CHARTFIELD2
   let $GL_CHARTFIELD3 = &GL.CHARTFIELD3
   let $GL_AFFILIATE_INTRA1 = &GL.AFFILIATE_INTRA1
   let $GL_AFFILIATE_INTRA2 = &GL.AFFILIATE_INTRA2
   let $GL_BUSINESS_UNIT_PC = &GL.BUSINESS_UNIT_PC
   let $GL_ACTIVITY_ID = &GL.ACTIVITY_ID
   let $GL_RESOURCE_TYPE = &GL.RESOURCE_TYPE
   let $GL_RESOURCE_CATEGORY = &GL.RESOURCE_CATEGORY
   let $GL_RESOURCE_SUB_CAT = &GL.RESOURCE_SUB_CAT
   let $GL_Valid_Flag = &GL.VALID_FLAG

   add 1 to #Total_Input_Records
   do FORMAT-VAR
   do Store-FDMCombo-Array

FROM PS_GL_ACCT_CD_TBL GL
ORDER by GL.FDM_HASH, GL.SETID, GL.PROCESS_GROUP, GL.EFFDT Desc

end-SELECT

   if #FDMComboCount <> 0
       do Process-FDMCombo-Array
   end-if

end-procedure READ-INPUT-FILE1

!***********************************************************************
! FORMAT-VAR                                                           *
!***********************************************************************
begin-procedure FORMAT-VAR

  let $GL_PROCESS_GROUP = RTRIM($GL_PROCESS_GROUP,' ')
  let $GL_Eff_Status = RTRIM($GL_Eff_Status,' ')
  let $GL_Descr = RTRIM($GL_Descr,' ')
  let $GL_Descr_Short = RTRIM($GL_Descr_Short,' ')
  let $GL_Account = RTRIM($GL_Account,' ')
  let $GL_DeptID_CF = RTRIM($GL_DeptID_CF,' ')
  let $GL_Project_Id = RTRIM($GL_Project_Id,' ')
  let $GL_Product = RTRIM($GL_Product,' ')
  let $GL_Fund_Code = RTRIM($GL_Fund_Code,' ')
  let $GL_Program_Code = RTRIM($GL_Program_Code,' ')
  let $GL_Class_Fld = RTRIM($GL_Class_Fld,' ')
  let $GL_Affiliate = RTRIM($GL_Affiliate, ' ')
  let $GL_Operating_Unit = RTRIM($GL_Operating_Unit,' ')
  let $GL_AltAcct = RTRIM($GL_AltAcct,' ')
  let $GL_BUDGET_REF = RTRIM($GL_BUDGET_REF,' ')
  let $GL_CHARTFIELD1 = RTRIM($GL_CHARTFIELD1,' ')
  let $GL_CHARTFIELD2 = RTRIM($GL_CHARTFIELD2,' ')
  let $GL_CHARTFIELD3 = RTRIM($GL_CHARTFIELD3,' ')
  let $GL_AFFILIATE_INTRA1 = RTRIM($GL_AFFILIATE_INTRA1,' ')
  let $GL_AFFILIATE_INTRA2 = RTRIM($GL_AFFILIATE_INTRA2,' ')
  let $GL_BUSINESS_UNIT_PC = RTRIM($GL_BUSINESS_UNIT_PC,' ')
  let $GL_ACTIVITY_ID = RTRIM($GL_ACTIVITY_ID,' ')
  let $GL_RESOURCE_TYPE = RTRIM($GL_RESOURCE_TYPE,' ')
  let $GL_RESOURCE_CATEGORY = RTRIM($GL_RESOURCE_CATEGORY,' ')
  let $GL_RESOURCE_SUB_CAT = RTRIM($GL_RESOURCE_SUB_CAT,' ')
  let $GL_VALID_FLAG = RTRIM($GL_VALID_FLAG,' ')

  if $GL_Process_Group = ''
     move ' ' to $GL_Process_Group
  end-if

  if $GL_Eff_Status = ''
     move 'I' to $GL_Eff_Status
  end-if

  if $GL_Descr = ''
     move ' ' to $GL_Descr
  end-if

  if $GL_Descr_Short = ''
     move ' ' to $GL_Descr_Short
  end-if

  if $GL_Account = ''
     move ' ' to $GL_Account
  end-if

  if $GL_DeptID_CF = ''
     move ' ' to $GL_DeptID_CF
  end-if

  if $GL_Project_Id = ''
     move ' ' to $GL_Project_Id
  end-if

  if $GL_Product = ''
     move ' ' to $GL_Product
  end-if

  if $GL_Fund_Code = ''
     move ' ' to $GL_Fund_Code
  end-if

  if $GL_Program_Code = ''
     move ' ' to $GL_Program_Code
  end-if

  if $GL_Class_Fld = ''
     move ' ' to $GL_Class_Fld
  end-if

  if $GL_Affiliate = ''
     move ' ' to $GL_Affiliate
  end-if

  if $GL_Operating_Unit = ''
     move ' ' to $GL_Operating_Unit
  end-if

  if $GL_AltAcct = ''
     move ' ' to $GL_AltAcct
  end-if

  if $GL_BUDGET_REF = ''
     move ' ' to $GL_BUDGET_REF
  end-if

  if $GL_CHARTFIELD1 = ''
     move ' ' to $GL_CHARTFIELD1
  end-if

  if $GL_CHARTFIELD2 = ''
     move ' ' to $GL_CHARTFIELD2
  end-if

  if $GL_CHARTFIELD3 = ''
     move ' ' to $GL_CHARTFIELD3
  end-if

  if $GL_AFFILIATE_INTRA1 = ''
     move ' ' to $GL_AFFILIATE_INTRA1
  end-if

  if $GL_AFFILIATE_INTRA2 = ''
     move ' ' to $GL_AFFILIATE_INTRA2
  end-if

  if $GL_BUSINESS_UNIT_PC = ''
     move ' ' to $GL_BUSINESS_UNIT_PC
  end-if

  if $GL_ACTIVITY_ID = ''
     move ' ' to $GL_ACTIVITY_ID
  end-if

  if $GL_RESOURCE_TYPE = ''
     move ' ' to $GL_RESOURCE_TYPE
  end-if

  if $GL_RESOURCE_CATEGORY = ''
     move ' ' to $GL_RESOURCE_CATEGORY
  end-if

  if $GL_RESOURCE_SUB_CAT = ''
     move ' ' to $GL_RESOURCE_SUB_CAT
  end-if

  if $GL_Valid_FLAG = ''
     move ' ' to $GL_Valid_Flag
  end-if

end-procedure FORMAT_VAR

!***********************************************************************
! STORE-FDMCOMBO-ARRAY                                                 *
!***********************************************************************
begin-procedure Store-FDMCombo-Array

  let $FDMComboMatch = 'N'

  if #FDMComboCount <> 0

      let #FDMComboIdx = 0

      while (#FDMComboIdx < #FDMComboCount and $FDMComboMatch = 'N')

          get $Save_setid $Save_process_group $Save_account $Save_deptid_cf
              $Save_project_id $Save_product $Save_fund_code
              $Save_program_code $Save_class_fld $Save_affiliate $Save_operating_unit $Save_altacct
              $Save_budget_ref $Save_Chartfield1
              $Save_Chartfield2 $Save_Chartfield3 $Save_affiliate_intra1 $Save_affiliate_intra2
              $Save_business_unit_pc $Save_activity_id $Save_resource_type $Save_resource_category
              $Save_resource_sub_cat
              #ComboEffDtCount
          from FDMComboArray (#FDMComboIdx)
              setid process_group account deptid_cf project_id product fund_code
              program_code class_fld affiliate operating_unit altacct budget_ref Chartfield1
              Chartfield2 Chartfield3 affiliate_intra1 affiliate_intra2
              business_unit_pc activity_id resource_type resource_category resource_sub_cat
              EffDtCount

          if    $Save_setid            = $GL_Setid
            and $Save_process_group    = $GL_Process_Group
            and $Save_account          = $GL_Account
            and $Save_deptid_cf        = $GL_DeptID_CF
            and $Save_project_id       = $GL_Project_Id
            and $Save_product          = $GL_Product
            and $Save_fund_code        = $GL_Fund_Code
            and $Save_program_code     = $GL_Program_Code
            and $Save_class_fld        = $GL_Class_Fld
            and $Save_affiliate        = $GL_Affiliate
            and $Save_operating_unit   = $GL_Operating_Unit
            and $Save_altacct          = $GL_AltAcct
            and $Save_budget_ref       = $GL_BUDGET_REF
            and $Save_Chartfield1      = $GL_CHARTFIELD1
            and $Save_Chartfield2      = $GL_CHARTFIELD2
            and $Save_Chartfield3      = $GL_CHARTFIELD3
            and $Save_affiliate_intra1 = $GL_AFFILIATE_INTRA1
            and $Save_affiliate_intra2 = $GL_AFFILIATE_INTRA2
            and $Save_business_unit_pc = $GL_BUSINESS_UNIT_PC
            and $Save_activity_id      = $GL_ACTIVITY_ID
            and $Save_resource_type    = $GL_RESOURCE_TYPE
            and $Save_resource_category = $GL_RESOURCE_CATEGORY
            and $Save_resource_sub_cat = $GL_RESOURCE_SUB_CAT

              let $DuplicateEffdt = 'N'
              do Duplicate-Effdt-Row

              if $DuplicateEffdt = 'N'

                  let #ComboEffDtIdx = #ComboEffDtCount

                  if #ComboEffDtCount >= #ComboEffDtSize
                      display 'Array Overflow - Same ChartField combination ' noline
                      display 'with more than 20 effective date rows'
                      stop quiet
                  end-if

                  put $GL_EffDt $GL_Eff_Status $GL_Descr $GL_Descr_Short $GL_Valid_Flag
                  into FDMComboArray (#FDMComboIdx)
                      effdt (#ComboEffDtIdx) eff_status (#ComboEffDtIdx)
                      descr (#ComboEffDtIdx) descrshort (#ComboEffDtIdx)
                      valid_flag (#ComboEffDtIdx)

                  Array-Add 1 to FDMComboArray (#FDMComboIdx) EffDtCount
              end-if

              let $FDMComboMatch   = 'Y'

          else
              let #FDMComboIdx = #FDMComboIdx + 1
          end-if

      end-while
  end-if

  if $FDMComboMatch = 'N'
      do New-ChartField-Set
  end-if

end-procedure

!***********************************************************************
! DUPLICATE-EFFDT-ROW                                                  *
!***********************************************************************
begin-procedure Duplicate-Effdt-Row

  let #ComboEffDtIdx = 0
  while (#ComboEffDtIdx < #ComboEffDtCount and $DuplicateEffdt = 'N')

      get $Check_EffDt from FDMComboArray (#FDMComboIdx) effdt (#ComboEffDtIdx)

      if $Check_EffDt = $GL_EffDt
          let $DuplicateEffdt = 'Y'
      end-if

      let #ComboEffDtIdx =#ComboEffDtIdx + 1
  end-while

end-procedure

!***********************************************************************
! NEW-CHARTFIELD-SET                                                   *
!***********************************************************************
begin-procedure New-ChartField-Set

  let #FDMComboIdx   = #FDMComboCount
  let #ComboEffDtIdx = 0

  if #FDMComboCount >= #FDMComboArraySize
      display 'Array Overflow - Same ChartField combination ' noline
      display 'with more than 50 different SetID / Process Group'
      stop quiet
  end-if

  put $GL_Setid $GL_Process_Group $GL_Account $GL_DeptID_CF $GL_Project_Id $GL_Product
      $GL_Fund_Code $GL_Program_Code $GL_Class_Fld $GL_Affiliate $GL_Operating_Unit $GL_AltAcct
      $GL_BUDGET_REF $GL_CHARTFIELD1 $GL_CHARTFIELD2 $GL_CHARTFIELD3 $GL_AFFILIATE_INTRA1
      $GL_AFFILIATE_INTRA2 $GL_BUSINESS_UNIT_PC $GL_ACTIVITY_ID $GL_RESOURCE_TYPE $GL_RESOURCE_CATEGORY
      $GL_RESOURCE_SUB_CAT ' ' 0 1 $GL_EffDt $GL_Eff_Status
      $GL_Descr $GL_Descr_Short $GL_Valid_Flag
  into FDMComboArray (#FDMComboIdx)
      setid process_group account deptid_cf project_id product
      fund_code program_code class_fld affiliate operating_unit altacct
      budget_ref Chartfield1 Chartfield2 Chartfield3 affiliate_intra1
      affiliate_intra2 business_unit_pc activity_id resource_type resource_category
      resource_sub_cat calc_hash ComboSeqNum EffDtCount effdt (#ComboEffDtIdx) eff_status (#ComboEffDtIdx)
      descr (#ComboEffDtIdx) descrshort (#ComboEffDtIdx) valid_flag (#ComboEffDtIdx)

  let #FDMComboCount   = #FDMComboCount + 1

end-procedure

!***********************************************************************
! PROCESS-FDMCOMBO-ARRAY                                               *
!***********************************************************************
begin-procedure Process-FDMCombo-Array

  do Find-Next-FDM-SeqNo
  let $SkipAcctCd = 'N'

  let #FDMComboIdx = 0
  while #FDMComboIdx < #FDMComboCount

      get $GL_Setid $GL_Process_Group $GL_Account $GL_DeptID_CF $GL_Project_Id $GL_Product
          $GL_Fund_Code $GL_Program_Code $GL_Class_Fld $GL_Affiliate $GL_Operating_Unit
          $GL_AltAcct $GL_BUDGET_REF $GL_CHARTFIELD1 $GL_CHARTFIELD2 $GL_CHARTFIELD3
          $GL_AFFILIATE_INTRA1 $GL_AFFILIATE_INTRA2 $GL_BUSINESS_UNIT_PC $GL_ACTIVITY_ID
          $GL_RESOURCE_TYPE $GL_RESOURCE_CATEGORY $GL_RESOURCE_SUB_CAT #ComboEffDtCount
      from FDMComboArray (#FDMComboIdx)
          setid process_group account deptid_cf project_id product
          fund_code program_code class_fld affiliate operating_unit
          altacct budget_ref Chartfield1 Chartfield2 Chartfield3
          affiliate_intra1 affiliate_intra2 business_unit_pc activity_id
          resource_type resource_category resource_sub_cat EffDtCount

      let $SkipFDMCombo = 'N'
      do Search-Valid-Combo-Table

      if $SkipFDMCombo = 'N'

          if $Chart_Value_Found = 'Y'

              put $CalcHashFound 0 into FDMComboArray (#FDMComboIdx) calc_hash ComboSeqNum

              let #ComboEffDtIdx = 0

              get $GL_EffDt $GL_Eff_Status $GL_Descr $GL_Descr_Short $GL_Valid_Flag
              from FDMComboArray (#FDMComboIdx)
                  effdt (#ComboEffDtIdx) eff_status (#ComboEffDtIdx)
                  descr (#ComboEffDtIdx) descrshort (#ComboEffDtIdx)
                  valid_flag (#ComboEffDtIdx)

              do Evaluate-Record

          else
              if $SkipAcctCd = 'N' and #FDMComboIdx = 0
                  do Match-ChartFields
              end-if

              if $SkipAcctCd = 'N'

                  let #ComboEffDtIdx = 0

                  get $GL_EffDt $GL_Eff_Status $GL_Descr $GL_Descr_Short $GL_Valid_Flag
                  from FDMComboArray (#FDMComboIdx)
                       effdt (#ComboEffDtIdx) eff_status (#ComboEffDtIdx)
                       descr (#ComboEffDtIdx) descrshort (#ComboEffDtIdx)
                       valid_flag (#ComboEffDtIdx)

                  if $AcctCd_Found = 'Y'

                      put $CalcHashFound 0 into FDMComboArray (#FDMComboIdx) calc_hash ComboSeqNum

                      let #ExistAcctCdSeqNum = #ExistAcctCdSeqNum + 1
                      do Insert-into-Temp-Record ('N', $ACT_FDM_Hash, $ACT_AcctCd, #ExistAcctCdSeqNum)

                  else
                      do Find-Match-Hash

                      if $Hash_Found = 'N'
                          do Format-FDM-Hash
                          let #NextSeqNo   = #NextSeqNo + 1
                          let #ComboSeqNum = #ComboSeqNum + 1

                          let $Parm_Calc_Hash = $Calc_Hash
                          let #Parm_ComboSeqNum = #ComboSeqNum
                      else
                          let $Parm_Calc_Hash = $CalcHashFound
                          let #Parm_ComboSeqNum = #ComboSeqNumFound
                      end-if

                      put $Parm_Calc_Hash #Parm_ComboSeqNum into FDMComboArray (#FDMComboIdx) calc_hash ComboSeqNum

                      do Insert-into-Temp-Record ('R', $Parm_Calc_Hash, ' ', #Parm_ComboSeqNum)
                  end-if
              end-if
          end-if
      end-if

      let #FDMComboIdx = #FDMComboIdx + 1
  end-while

end-procedure

!***********************************************************************
! SEARCH-VALID-COMBO-TABLE                                             *
!***********************************************************************
begin-procedure Search-Valid-Combo-Table

  let $err-statement1 = 'BUD003, Select Error - Search-Valid-Combo-Table'
  let $err-statement2 = 'Bind variables: $GL_SetId = '||$GL_Setid||
                                        ', $GL_Process_Group = '||$GL_Process_Group||
                                        ', $GL_Account = '||$GL_Account||
                                        ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                        ', $GL_Project_Id = '||$GL_Project_Id||
                                        ', $GL_Product = '||$GL_Product||
                                        ', $GL_Fund_Code = '||$GL_Fund_Code||
                                        ', $GL_Program_Code = '||$GL_Program_Code||
                                        ', $GL_Class_Fld = '||$GL_Class_Fld||
                                        ', $GL_Affiliate = '||$GL_Affiliate||
                                        ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                        ', $GL_AltAcct = '||$GL_AltAcct||
                                        ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                        ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                        ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                        ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                        ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                        ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                        ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                        ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                        ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                        ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                        ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

  let $Chart_Value_Found = 'N'
  let $FDM_HASH_Match    = 'Y'

begin-SELECT loops=1 on-error = Error-Display
VCT.FDM_HASH
VCT.FDM_COMBO_CD

   move 'Y' to $Chart_Value_Found
   let $FDM_Hash = &VCT.FDM_HASH
   let $FDM_Hash_Cmp = substr($FDM_Hash, 1, 28)

   if $FDM_Hash_Cmp <> $Prev_FDM_HASH

       move 'N' to $FDM_HASH_Match
   else
       move 'Y' to $FDM_HASH_Match
   end-if
   let $CalcHashFound = &VCT.FDM_HASH

FROM PS_VALID_COMBO_TBL VCT
WHERE VCT.ACCOUNT        = $GL_Account
  AND VCT.DEPTID_CF      = $GL_DeptID_CF
  AND VCT.PROJECT_ID     = $GL_Project_Id
  AND VCT.PRODUCT        = $GL_Product
  AND VCT.FUND_CODE      = $GL_Fund_Code
  AND VCT.PROGRAM_CODE   = $GL_Program_Code
  AND VCT.CLASS_FLD      = $GL_Class_Fld
  AND VCT.AFFILIATE      = $GL_Affiliate
  AND VCT.OPERATING_UNIT = $GL_Operating_Unit
  AND VCT.ALTACCT        = $GL_Altacct
  AND VCT.BUDGET_REF     = $GL_BUDGET_REF
  AND VCT.CHARTFIELD1    = $GL_CHARTFIELD1
  AND VCT.CHARTFIELD2    = $GL_CHARTFIELD2
  AND VCT.CHARTFIELD3    = $GL_CHARTFIELD3
  AND VCT.AFFILIATE_INTRA1 = $GL_AFFILIATE_INTRA1
  AND VCT.AFFILIATE_INTRA2 = $GL_AFFILIATE_INTRA2
  AND VCT.BUSINESS_UNIT_PC = $GL_BUSINESS_UNIT_PC
  AND VCT.ACTIVITY_ID    = $GL_ACTIVITY_ID
  AND VCT.RESOURCE_TYPE  = $GL_RESOURCE_TYPE
  AND VCT.RESOURCE_CATEGORY = $GL_RESOURCE_CATEGORY
  AND VCT.RESOURCE_SUB_CAT  = $GL_RESOURCE_SUB_CAT

end-SELECT

  if $Chart_Value_Found = 'Y' and $FDM_HASH_Match = 'N'

      display 'Calculated FDM Hash not match with associated Chart Field Values ' noline
      display 'found on VALID_COMBO_TBL - record skipped'
      let $CF_Detail = 'ChartField Details: $GL_SetId = '||$GL_Setid||
                                         ', $GL_Process_Group = '||$GL_Process_Group||
                                         ', $GL_Account = '||$GL_Account||
                                         ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                         ', $GL_Project_Id = '||$GL_Project_Id||
                                         ', $GL_Product = '||$GL_Product||
                                         ', $GL_Fund_Code = '||$GL_Fund_Code||
                                         ', $GL_Program_Code = '||$GL_Program_Code||
                                         ', $GL_Class_Fld = '||$GL_Class_Fld||
                                         ', $GL_Affiliate = '||$GL_Affiliate||
                                         ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                         ', $GL_AltAcct = '||$GL_AltAcct||
                                         ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                         ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                         ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                         ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                         ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                         ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                         ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                         ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                         ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                         ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                         ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

      display $CF_Detail

      let $SkipFDMCombo = 'Y'
  end-if

end-procedure

!***********************************************************************
! MATCH-CHARTFIELDS                                                    *
!***********************************************************************
begin-procedure Match-ChartFields

  let $err-statement1 = 'BUD003, Select Error - Match-ChartFields'
  let $err-statement2 = 'ChartField Details: $GL_Account = '||$GL_Account||
                                          ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                          ', $GL_Project_Id = '||$GL_Project_Id||
                                          ', $GL_Product = '||$GL_Product||
                                          ', $GL_Fund_Code = '||$GL_Fund_Code||
                                          ', $GL_Program_Code = '||$GL_Program_Code||
                                          ', $GL_Class_Fld = '||$GL_Class_Fld||
                                          ', $GL_Affiliate = '||$GL_Affiliate||
                                          ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                          ', $GL_AltAcct = '||$GL_AltAcct||
                                          ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                          ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                          ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                          ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                          ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                          ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                          ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                          ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                          ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                          ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                          ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

  let $AcctCd_Found             = 'N'
  let $AcctCd_FDM_HASH_Match    = 'Y'

begin-SELECT loops=1 on-error = Error-Display
VCT2.FDM_HASH
VCT2.FDM_COMBO_CD

   move 'Y' to $AcctCd_Found
   let $ACT_AcctCd   = &VCT2.FDM_COMBO_CD
   let $ACT_FDM_Hash = &VCT2.FDM_HASH
   let $FDM_Hash_Cmp = substr($ACT_FDM_Hash, 1, 28)

   if $FDM_Hash_Cmp <> $Prev_FDM_HASH

       move 'N' to $AcctCd_FDM_HASH_Match
   else
       move 'Y' to $AcctCd_FDM_HASH_Match
   end-if
   let $CalcHashFound = &VCT2.FDM_HASH

FROM PS_VALID_COMBO_TBL VCT2
WHERE VCT2.ACCOUNT        = $GL_Account
  AND VCT2.DEPTID_CF      = $GL_DeptID_CF
  AND VCT2.PROJECT_ID     = $GL_Project_Id
  AND VCT2.PRODUCT        = $GL_Product
  AND VCT2.FUND_CODE      = $GL_Fund_Code
  AND VCT2.PROGRAM_CODE   = $GL_Program_Code
  AND VCT2.CLASS_FLD      = $GL_Class_Fld
  AND VCT2.AFFILIATE      = $GL_Affiliate
  AND VCT2.OPERATING_UNIT = $GL_Operating_Unit
  AND VCT2.ALTACCT        = $GL_Altacct
  AND VCT2.BUDGET_REF     = $GL_BUDGET_REF
  AND VCT2.CHARTFIELD1    = $GL_CHARTFIELD1
  AND VCT2.CHARTFIELD2    = $GL_CHARTFIELD2
  AND VCT2.CHARTFIELD3    = $GL_CHARTFIELD3
  AND VCT2.AFFILIATE_INTRA1 = $GL_AFFILIATE_INTRA1
  AND VCT2.AFFILIATE_INTRA2 = $GL_AFFILIATE_INTRA2
  AND VCT2.BUSINESS_UNIT_PC = $GL_BUSINESS_UNIT_PC
  AND VCT2.ACTIVITY_ID    = $GL_ACTIVITY_ID
  AND VCT2.RESOURCE_TYPE  = $GL_RESOURCE_TYPE
  AND VCT2.RESOURCE_CATEGORY = $GL_RESOURCE_CATEGORY
  AND VCT2.RESOURCE_SUB_CAT  = $GL_RESOURCE_SUB_CAT

end-SELECT

  if $AcctCd_Found = 'Y'

      if $AcctCd_FDM_HASH_Match = 'N'

          display 'Calculated FDM Hash not match with associated Chart Field Values ' noline
          display 'found on VALID_COMBO_TBL - record skipped'
          let $CF_Detail = 'ChartField Details: $GL_Account = '||$GL_Account||
                                             ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                             ', $GL_Project_Id = '||$GL_Project_Id||
                                             ', $GL_Product = '||$GL_Product||
                                             ', $GL_Fund_Code = '||$GL_Fund_Code||
                                             ', $GL_Program_Code = '||$GL_Program_Code||
                                             ', $GL_Class_Fld = '||$GL_Class_Fld||
                                             ', $GL_Affiliate = '||$GL_Affiliate||
                                             ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                             ', $GL_AltAcct = '||$GL_AltAcct||
                                             ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                             ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                             ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                             ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                             ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                             ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                             ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                             ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                             ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                             ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                             ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

          display $CF_Detail

          let $SkipAcctCd = 'Y'
      end-if
  else
      do Search-Acct-Cd-Table
  end-if

end-procedure

!***********************************************************************
! SEARCH-ACCT-CD-TABLE                                                 *
!***********************************************************************
begin-procedure Search-Acct-Cd-Table

  let $err-statement1 = 'BUD003, Select Error - Search-Acct-Cd-Table'
  let $err-statement2 = 'Bind variables: $GL_SetId = '||$GL_Setid||
                                        ', $GL_Process_Group = '||$GL_Process_Group||
                                        ', $GL_Account = '||$GL_Account||
                                        ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                        ', $GL_Project_Id = '||$GL_Project_Id||
                                        ', $GL_Product = '||$GL_Product||
                                        ', $GL_Fund_Code = '||$GL_Fund_Code||
                                        ', $GL_Program_Code = '||$GL_Program_Code||
                                        ', $GL_Class_Fld = '||$GL_Class_Fld||
                                        ', $GL_Affiliate = '||$GL_Affiliate||
                                        ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                        ', $GL_AltAcct = '||$GL_AltAcct||
                                        ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                        ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                        ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                        ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                        ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                        ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                        ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                        ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                        ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                        ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                        ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

begin-SELECT loops=1 on-error = Error-Display
ACT.FDM_HASH
ACT.ACCT_CD

   let $AcctCd_Found = 'Y'
   let $ACT_FDM_Hash = &ACT.FDM_HASH
   let $ACT_AcctCd   = &ACT.ACCT_CD
   let $FDM_Hash_Cmp = substr($ACT_FDM_Hash, 1, 28)

   if $FDM_Hash_Cmp <> $Prev_FDM_HASH

       move 'N' to $AcctCd_FDM_HASH_Match
   else
       move 'Y' to $AcctCd_FDM_HASH_Match
   end-if
   let $CalcHashFound = &ACT.FDM_HASH

FROM PS_ACCT_CD_TBL ACT
WHERE ACT.ACCOUNT        = $GL_Account
  AND ACT.DEPTID_CF      = $GL_DeptID_CF
  AND ACT.PROJECT_ID     = $GL_Project_Id
  AND ACT.PRODUCT        = $GL_Product
  AND ACT.FUND_CODE      = $GL_Fund_Code
  AND ACT.PROGRAM_CODE   = $GL_Program_Code
  AND ACT.CLASS_FLD      = $GL_Class_Fld
  AND ACT.AFFILIATE      = $GL_Affiliate
  AND ACT.OPERATING_UNIT = $GL_Operating_Unit
  AND ACT.ALTACCT        = $GL_Altacct
  AND ACT.BUDGET_REF     = $GL_BUDGET_REF
  AND ACT.CHARTFIELD1    = $GL_CHARTFIELD1
  AND ACT.CHARTFIELD2    = $GL_CHARTFIELD2
  AND ACT.CHARTFIELD3    = $GL_CHARTFIELD3
  AND ACT.AFFILIATE_INTRA1 = $GL_AFFILIATE_INTRA1
  AND ACT.AFFILIATE_INTRA2 = $GL_AFFILIATE_INTRA2
  AND ACT.BUSINESS_UNIT_PC = $GL_BUSINESS_UNIT_PC
  AND ACT.ACTIVITY_ID      = $GL_ACTIVITY_ID
  AND ACT.RESOURCE_TYPE    = $GL_RESOURCE_TYPE
  AND ACT.RESOURCE_CATEGORY = $GL_RESOURCE_CATEGORY
  AND ACT.RESOURCE_SUB_CAT = $GL_RESOURCE_SUB_CAT
  AND NOT EXISTS (SELECT 'X' FROM PS_VALID_COMBO_TBL VCT1
                  WHERE VCT1.FDM_COMBO_CD = ACT.ACCT_CD)

end-SELECT

  if $AcctCd_Found = 'Y' and $AcctCd_FDM_HASH_Match = 'N'

      display 'Calculated FDM Hash not match with associated Chart Field Values ' noline
      display 'found on ACCT_CD_TBL - record skipped'
      let $CF_Detail = 'ChartField Details: $GL_Account = '||$GL_Account||
                                         ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                         ', $GL_Project_Id = '||$GL_Project_Id||
                                         ', $GL_Product = '||$GL_Product||
                                         ', $GL_Fund_Code = '||$GL_Fund_Code||
                                         ', $GL_Program_Code = '||$GL_Program_Code||
                                         ', $GL_Class_Fld = '||$GL_Class_Fld||
                                         ', $GL_Affiliate = '||$GL_Affiliate||
                                         ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                         ', $GL_AltAcct = '||$GL_AltAcct||
                                         ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                         ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                         ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                         ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                         ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                         ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                         ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                         ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                         ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                         ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                         ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

      display $CF_Detail

      let $SkipAcctCd = 'Y'
  end-if

end-procedure

!***********************************************************************
! FIND-MATCH-HASH                                                      *
!***********************************************************************
begin-procedure Find-Match-Hash

  let $Hash_Found = 'N'

  let #SearchIdx = 0
  while (#SearchIdx < #FDMComboIdx and $Hash_Found = 'N')

      get $GL_s_Account $GL_s_DeptID_CF $GL_s_Project_Id $GL_s_Product
          $GL_s_Fund_Code $GL_s_Program_Code $GL_s_Class_Fld $GL_s_Affiliate $GL_s_Operating_Unit
          $GL_s_AltAcct $GL_s_BUDGET_REF $GL_s_CHARTFIELD1 $GL_s_CHARTFIELD2 $GL_s_CHARTFIELD3
          $GL_s_AFFILIATE_INTRA1 $GL_s_AFFILIATE_INTRA2 $GL_s_BUSINESS_UNIT_PC $GL_s_ACTIVITY_ID
          $GL_s_RESOURCE_TYPE $GL_s_RESOURCE_CATEGORY $GL_s_RESOURCE_SUB_CAT
          $GL_s_CalcHashFound #GL_s_ComboSeqNumFound
      from FDMComboArray (#SearchIdx)
          account deptid_cf project_id product fund_code
          program_code class_fld affiliate operating_unit altacct budget_ref Chartfield1
          Chartfield2 Chartfield3 affiliate_intra1 affiliate_intra2 business_unit_pc activity_id
          resource_type resource_category resource_sub_cat
          calc_hash ComboSeqNum

      if    $GL_s_Account           = $GL_Account
        and $GL_s_deptid_cf         = $GL_DeptID_CF
        and $GL_s_project_id        = $GL_Project_Id
        and $GL_s_product           = $GL_Product
        and $GL_s_fund_code         = $GL_Fund_Code
        and $GL_s_program_code      = $GL_Program_Code
        and $GL_s_class_fld         = $GL_Class_Fld
        and $GL_s_affiliate         = $GL_Affiliate
        and $GL_s_operating_unit    = $GL_Operating_Unit
        and $GL_s_altacct           = $GL_AltAcct
        and $GL_s_budget_ref        = $GL_BUDGET_REF
        and $GL_s_Chartfield1       = $GL_CHARTFIELD1
        and $GL_s_Chartfield2       = $GL_CHARTFIELD2
        and $GL_s_Chartfield3       = $GL_CHARTFIELD3
        and $GL_s_affiliate_intra1  = $GL_AFFILIATE_INTRA1
        and $GL_s_affiliate_intra2  = $GL_AFFILIATE_INTRA2
        and $GL_s_BUSINESS_UNIT_PC  = $GL_BUSINESS_UNIT_PC
        and $GL_s_ACTIVITY_ID       = $GL_ACTIVITY_ID
        and $GL_s_RESOURCE_TYPE     = $GL_RESOURCE_TYPE
        and $GL_s_RESOURCE_CATEGORY = $GL_RESOURCE_CATEGORY
        and $GL_s_RESOURCE_SUB_CAT  = $GL_RESOURCE_SUB_CAT

          let $Hash_Found       = 'Y'
          let $CalcHashFound    = $GL_s_CalcHashFound
          let #ComboSeqNumFound = #GL_s_ComboSeqNumFound
      end-if

      let #SearchIdx = #SearchIdx + 1

  end-while

end-procedure

!***********************************************************************
! EVALUATE-RECORD                                                      *
!***********************************************************************
begin-procedure EVALUATE-RECORD

  let $err-statement1 = 'BUD003, Select Error - EVALUATE-RECORD'
  let $err-statement2 = 'Bind variables: $GL_SetId = '||$GL_Setid||
                                        ', $GL_Process_Group = '||$GL_Process_Group||
                                        ', $GL_Account = '||$GL_Account||
                                        ', $GL_DeptID_CF = '||$GL_DeptID_CF||
                                        ', $GL_Project_Id = '||$GL_Project_Id||
                                        ', $GL_Product = '||$GL_Product||
                                        ', $GL_Fund_Code = '||$GL_Fund_Code||
                                        ', $GL_Program_Code = '||$GL_Program_Code||
                                        ', $GL_Class_Fld = '||$GL_Class_Fld||
                                        ', $GL_Affiliate = '||$GL_Affiliate||
                                        ', $GL_Operating_Unit = '||$GL_Operating_Unit||
                                        ', $GL_AltAcct = '||$GL_AltAcct||
                                        ', $GL_BUDGET_REF = '||$GL_BUDGET_REF||
                                        ', $GL_CHARTFIELD1 = '||$GL_CHARTFIELD1||
                                        ', $GL_CHARTFIELD2 = '||$GL_CHARTFIELD2||
                                        ', $GL_CHARTFIELD3 = '||$GL_CHARTFIELD3||
                                        ', $GL_AFFILIATE_INTRA1 = '||$GL_AFFILIATE_INTRA1||
                                        ', $GL_AFFILIATE_INTRA2 = '||$GL_AFFILIATE_INTRA2||
                                        ', $GL_BUSINESS_UNIT_PC = '||$GL_BUSINESS_UNIT_PC||
                                        ', $GL_ACTIVITY_ID = '||$GL_ACTIVITY_ID||
                                        ', $GL_RESOURCE_TYPE = '||$GL_RESOURCE_TYPE||
                                        ', $GL_RESOURCE_CATEGORY = '||$GL_RESOURCE_CATEGORY||
                                        ', $GL_RESOURCE_SUB_CAT = '||$GL_RESOURCE_SUB_CAT

  let $InsertNewRec = 'Y'
  let $RecFound     = 'N'

begin-SELECT on-error = Error-Display
E.SETID
E.PROCESS_GROUP
E.FDM_COMBO_CD
E.EFF_STATUS
E.DESCRSHORT
E.DESCR
E.EFFDT
E.VALID_FLAG

   MOVE &E.SETID              TO $Setid
   move &E.Process_group      to $Process_Group
   move &E.FDM_COMBO_CD       to $Acct_cd
   move &E.Eff_Status         to $Eff_Status
   move &E.DescrShort         to $Descr_Short
   move &E.Descr              to $Descr
   move &E.Effdt              to $Effdt
   move &E.Valid_Flag         to $Valid_Flag

   move 'N' to $Update_Record
   move 'Y' to $RecFound

   do Format-DateTime ($Effdt, $Effdt_Cmp, {DEFCMP},'','')

   if $GL_Eff_Status <> $Eff_Status
     move $GL_Eff_Status to $Eff_Status
     move 'Y' to $Update_Record
   end-if

   let $Descr_short = rtrim($descr_short, ' ')
   if $descr_short = ''
       move ' ' to $descr_short
   end-if
   if $GL_Descr_Short <> $Descr_Short
       move $GL_Descr_Short to $Descr_Short
       move 'Y' to $Update_Record
   end-if

   let $Descr = rtrim($descr, ' ')
   if $descr = ''
       move ' ' to $descr
   end-if
   if $GL_Descr <> $Descr
       move $GL_Descr to $Descr
       move 'Y' to $Update_Record
   end-if

   if $Valid_Flag = ''
       move ' ' to $Valid_Flag
   end-if
   if $GL_Valid_Flag <> $Valid_Flag
       move $GL_Valid_Flag to $Valid_Flag
       move 'Y' to $Update_Record
   end-if

   if $Effdt_Cmp > $Rctl_FromDate_Cmp

       if $InsertNewRec = 'Y'

           let $Sys_Combo_Cd = $Acct_Cd
           let $Calc_hash    = $FDM_Hash
           do INSERT-NEW-ACCT-CODE

           let $InsertNewRec = 'N'
       end-if

       if $Update_Record = 'Y'
           do UPDATE-ACCT-TBL
       end-if
   else
       if $Effdt_Cmp = $Rctl_FromDate_Cmp

           if $Update_Record = 'Y'
               do UPDATE-ACCT-TBL
           end-if

           let $InsertNewRec = 'N'
       end-if
   end-if

FROM PS_VALID_COMBO_TBL E
WHERE E.SETID          = $GL_SetId
  AND E.PROCESS_GROUP  = $GL_Process_group
  AND E.FDM_HASH       = $FDM_Hash
  AND (E.EFFDT = (SELECT MAX(E1.EFFDT)
                      FROM PS_VALID_COMBO_TBL E1
                     WHERE E1.SETID         = E.SETID
                       AND E1.PROCESS_GROUP = E.PROCESS_GROUP
                       AND E1.FDM_HASH      = E.FDM_HASH
                       AND E1.EFFDT        <= $Rctl_FromDate)
    OR (E.EFFDT > $Rctl_FromDate))
ORDER by E.EFFDT Asc
end-SELECT

   if $RecFound = 'N'
       let $Sys_Combo_Cd = &VCT.FDM_COMBO_CD
       let $Calc_hash    = $FDM_Hash
       do INSERT-NEW-ACCT-CODE
   else
       if $InsertNewRec = 'Y' and  $Update_Record = 'Y'
           let $Sys_Combo_Cd = $Acct_Cd
           let $Calc_hash    = $FDM_Hash
           do INSERT-NEW-ACCT-CODE
       end-if
   end-if

end-procedure EVALUATE-RECORD

!***********************************************************************
! FIND-NEXT-FDM-SEQNO                                                  *
!***********************************************************************
begin-procedure Find-Next-FDM-SeqNo

  let $Search_Hash = $Prev_FDM_HASH || '%'
  let #NextSeqNo = 0

begin-SELECT
Max(M1.FDM_HASH) &M1.FDM_HASH

  let $FoundHash    = substr(&M1.FDM_HASH, 1, 28)
  let $FoundHashSeq = substr(&M1.FDM_HASH, 29, 3)

  if $FoundHash = $Prev_FDM_HASH
      let #FoundHashSeq = to_number($FoundHashSeq)

      if #FoundHashSeq >= #NextSeqNo
          let #NextSeqNo = #FoundHashSeq + 1
      end-if
  end-if

FROM PS_VALID_COMBO_TBL M1
WHERE M1.FDM_HASH like $Search_Hash

end-SELECT

begin-SELECT
Max(M2.FDM_HASH) &M2.FDM_HASH

  let $FoundHash    = substr(&M2.FDM_HASH, 1, 28)
  let $FoundHashSeq = substr(&M2.FDM_HASH, 29, 3)

  if $FoundHash = $Prev_FDM_HASH
      let #FoundHashSeq = to_number($FoundHashSeq)

      if #FoundHashSeq >= #NextSeqNo
          let #NextSeqNo = #FoundHashSeq + 1
      end-if
  end-if

FROM PS_ACCT_CD_TBL M2
WHERE M2.FDM_HASH like $Search_Hash

end-SELECT

end-procedure

!***********************************************************************
! FORMAT-FDM-HASH                                                      *
!***********************************************************************
begin-procedure Format-FDM-Hash

  if #NextSeqNo = 0

      let $SeqNoString = '000'
  else
      let $NextSeqNo = To_Char(#NextSeqNo)

      if #NextSeqNo < 10

          let $SeqNoString = '00' || $NextSeqNo
      else
          if #NextSeqNo < 100

              let $SeqNoString = '0' || $NextSeqNo
          else
              let $SeqNoString = $NextSeqNo
          end-if
      end-if
  end-if

  let $Calc_Hash = $Prev_FDM_HASH || $SeqNoString

end-procedure

!***********************************************************************
! UPDATE-ACCT-TBL                                                      *
!***********************************************************************
begin-procedure UPDATE-ACCT-TBL

  add 1 to #Total_Records_Updated

  let $err-statement1 = 'BUD003, Select Error-UPDATE-VALID_COMBO-TABLE'
  let $err-statement2 = 'Bind variables: $FDM_HASH = '||$Fdm_Hash||
                        'Key Fields: SETID = '||$Setid||
                                    'PROCESS_GROUP = '||$Process_group||
                                    'FDM_HASH = '||$Fdm_Hash||
                                    'EFFDT = '||$Effdt

begin-SQL on-error = Error-Display

UPDATE PS_VALID_COMBO_TBL
    SET EFF_STATUS         = $Eff_Status,
        DESCRSHORT         = $Descr_Short,
        DESCR              = $Descr,
        VALID_FLAG         = $Valid_Flag
  WHERE SETID              = $Setid
    AND PROCESS_GROUP      = $Process_group
    AND FDM_HASH           = $Fdm_hash
    AND EFFDT              = $Effdt

end-SQL

end-procedure UPDATE_ACCT_TBL

!***********************************************************************
! INSERT-NEW-ACCT-CODE                                                 *
!***********************************************************************
begin-procedure INSERT-NEW-ACCT-CODE

  let $err-statement1 = 'BUD003, Insert Error - INSERT-NEW-ACCT-CODE'
  let $err-statement2 = 'Key Fields: SETID = '||$GL_sETID||
                        ' PROCESS GROUP = '|| $GL_Process_Group ||
                        ' FDM_HASH = '|| $Calc_Hash ||
                        ' FDM_COMBO_CD = '|| $sYS_COMBO_CD ||
                        ' EFFDT =  ' || $Rctl_FromDate

#DEBUG show '$SYS_ACCT_CD           = <' $SYS_ACCT_CD           '>'
#DEBUG show '$RCTL_FROMDATE         = <' $RCTL_FROMDATE         '>'
#DEBUG show '$GL_EFF_STATUS         = <' $GL_EFF_STATUS         '>'
#DEBUG show '$GL_DESCR              = <' $GL_DESCR              '>'
#DEBUG show '$GL_DESCR_SHORT        = <' $GL_DESCR_SHORT        '>'
#DEBUG show '$GL_ACCOUNT            = <' $GL_ACCOUNT            '>'
#DEBUG show '$GL_DEPTID_CF          = <' $GL_DEPTID_CF          '>'
#DEBUG show '$GL_PROJECT_ID         = <' $GL_PROJECT_ID         '>'
#DEBUG show '$GL_PRODUCT            = <' $GL_PRODUCT            '>'
#DEBUG show '$GL_FUND_CODE          = <' $GL_FUND_CODE          '>'
#DEBUG show '$GL_PROGRAM_CODE       = <' $GL_PROGRAM_CODE       '>'
#DEBUG show '$GL_CLASS_FLD          = <' $GL_CLASS_FLD          '>'
#DEBUG show '$GL_AFFILIATE          = <' $GL_AFFILIATE          '>'
#DEBUG show '$GL_OPERATING_UNIT     = <' $GL_OPERATING_UNIT     '>'
#DEBUG show '$GL_ALTACCT            = <' $GL_ALTACCT            '>'
#DEBUG show '$GL_BUDGET_REF         = <' $GL_BUDGET_REF         '>'
#DEBUG show '$GL_CHARTFIELD1        = <' $GL_CHARTFIELD1        '>'
#DEBUG show '$GL_CHARTFIELD2        = <' $GL_CHARTFIELD2        '>'
#DEBUG show '$GL_CHARTFIELD3        = <' $GL_CHARTFIELD3        '>'
#DEBUG show '$GL_AFFILIATE_INTRA1   = <' $GL_AFFILIATE_INTRA1   '>'
#DEBUG show '$GL_AFFILIATE_INTRA2   = <' $GL_AFFILIATE_INTRA2   '>'
#DEBUG show '$GL_BUSINESS_UNIT_PC   = <' $GL_BUSINESS_UNIT_PC   '>'
#DEBUG show '$GL_ACTIVITY_ID        = <' $GL_ACTIVITY_ID        '>'
#DEBUG show '$GL_RESOURCE_TYPE      = <' $GL_RESOURCE_TYPE      '>'
#DEBUG show '$GL_RESOURCE_CATEGORY  = <' $GL_RESOURCE_CATEGORY  '>'
#DEBUG show '$GL_RESOURCE_SUB_CAT   = <' $GL_RESOURCE_SUB_CAT   '>'
#DEBUG show '$GL_ENCUMB_ACCOUNT     = <' $GL_ENCUMB_ACCOUNT     '>'
#DEBUG show '$GL_PRE_ENCUMB_ACCOUNT = <' $GL_PRE_ENCUMB_ACCOUNT '>'
#DEBUG show '$GL_SETID              = <' $GL_SETID              '>'

begin-SQL on-error = Error-Display

INSERT INTO PS_VALID_COMBO_TBL
   (SETID,
   PROCESS_GROUP,
   FDM_HASH,
   EFFDT,
   EFF_STATUS,
   FDM_COMBO_CD,
   DESCR,
   DESCRSHORT,
   ACCOUNT,
   DEPTID_CF,
   PROJECT_ID,
   PRODUCT,
   FUND_CODE,
   PROGRAM_CODE,
   CLASS_FLD,
   AFFILIATE,
   OPERATING_UNIT,
   ALTACCT,
   BUDGET_REF,
   CHARTFIELD1,
   CHARTFIELD2,
   CHARTFIELD3,
   AFFILIATE_INTRA1,
   AFFILIATE_INTRA2,
   BUSINESS_UNIT_PC,
   ACTIVITY_ID,
   RESOURCE_TYPE,
   RESOURCE_CATEGORY,
   RESOURCE_SUB_CAT,
   VALID_FLAG)
VALUES
   ($GL_SETID,
   $GL_PROCESS_GROUP,
   $CALC_HASH,
   $RCTL_FROMDATE,
   $GL_EFF_STATUS,
   $SYS_COMBO_CD,
   $GL_DESCR,
   $GL_DESCR_SHORT,
   $GL_ACCOUNT,
   $GL_DEPTID_CF,
   $GL_PROJECT_ID,
   $GL_PRODUCT,
   $GL_FUND_CODE,
   $GL_PROGRAM_CODE,
   $GL_CLASS_FLD,
   $GL_AFFILIATE,
   $GL_OPERATING_UNIT,
   $GL_ALTACCT,
   $GL_BUDGET_REF,
   $GL_CHARTFIELD1,
   $GL_CHARTFIELD2,
   $GL_CHARTFIELD3,
   $GL_AFFILIATE_INTRA1,
   $GL_AFFILIATE_INTRA2,
   $GL_BUSINESS_UNIT_PC,
   $GL_ACTIVITY_ID,
   $GL_RESOURCE_TYPE,
   $GL_RESOURCE_CATEGORY,
   $GL_RESOURCE_SUB_CAT,
   $GL_VALID_FLAG)

end-SQL

  add 1 to #Total_Records_Inserted

end-procedure INSERT-NEW-ACCT-CODE

!***********************************************************************
! INSERT-INTO-TEMP-RECORD                                              *
!***********************************************************************
begin-procedure Insert-into-Temp-Record ($ValidFlag, $HashValue, $AcctCd, #ComboSeq)


  let $ComboSeq        = #ComboSeq
  let $SeqNo           = #_FDMComboIdx
  let $_err-statement1 = 'BUD003, Select Error - INSERT-INTO-TEMP-RECORD'
  let $_err-statement2 = 'Key Fields: SETID = '||$_GL_SETID||
                        ' PROCESS GROUP = '|| $_GL_Process_Group ||
                        ' FDM_HASH = '|| $HashValue ||
                        ' ACCT_CD = ' || $AcctCd ||
                        ' EFFDT =  ' || $_Rctl_FromDate  ||
                        ' COMBO_SEQ_NO = ' || $ComboSeq ||
                        ' SEQNUM = ' || $SeqNo

begin-SQL on-error = Error-Display

INSERT INTO PS_R_BUD003
   (COMBO_VALID_FLG,
   COMBO_SEQ_NO,
   SEQNUM,
   SETID,
   PROCESS_GROUP,
   FDM_HASH,
   EFFDT,
   EFF_STATUS,
   FDM_COMBO_CD,
   DESCR,
   DESCRSHORT,
   ACCOUNT,
   DEPTID_CF,
   PROJECT_ID,
   PRODUCT,
   FUND_CODE,
   PROGRAM_CODE,
   CLASS_FLD,
   AFFILIATE,
   OPERATING_UNIT,
   ALTACCT,
   BUDGET_REF,
   CHARTFIELD1,
   CHARTFIELD2,
   CHARTFIELD3,
   AFFILIATE_INTRA1,
   AFFILIATE_INTRA2,
   BUSINESS_UNIT_PC,
   ACTIVITY_ID,
   RESOURCE_TYPE,
   RESOURCE_CATEGORY,
   RESOURCE_SUB_CAT,
   VALID_FLAG)
VALUES
   ($ValidFlag,
   #ComboSeq,
   #_FDMComboIdx,
   $_GL_SETID,
   $_GL_PROCESS_GROUP,
   $HashValue,
   $_RCTL_FROMDATE,
   $_GL_EFF_STATUS,
   $AcctCd,
   $_GL_DESCR,
   $_GL_DESCR_SHORT,
   $_GL_ACCOUNT,
   $_GL_DEPTID_CF,
   $_GL_PROJECT_ID,
   $_GL_PRODUCT,
   $_GL_FUND_CODE,
   $_GL_PROGRAM_CODE,
   $_GL_CLASS_FLD,
   $_GL_AFFILIATE,
   $_GL_OPERATING_UNIT,
   $_GL_ALTACCT,
   $_GL_BUDGET_REF,
   $_GL_CHARTFIELD1,
   $_GL_CHARTFIELD2,
   $_GL_CHARTFIELD3,
   $_GL_AFFILIATE_INTRA1,
   $_GL_AFFILIATE_INTRA2,
   $_GL_BUSINESS_UNIT_PC,
   $_GL_ACTIVITY_ID,
   $_GL_RESOURCE_TYPE,
   $_GL_RESOURCE_CATEGORY,
   $_GL_RESOURCE_SUB_CAT,
   $_GL_VALID_FLAG)

end-SQL

end-procedure

!***********************************************************************
! FINIALIZE-FDM-COMBO                                                  *
!***********************************************************************
begin-procedure Finialize-FDM-Combo

  while #ComboSeqNum > 0

      let #ComboSeqNum   = 0

      do Update-Combo-SeqNum
      do Find-Duplicate-AcctCd

      if #ComboSeqNum > 0

          do Update-Acct-Cd-Last
          do Commit-Transaction
      end-if
  end-while

end-procedure

!***********************************************************************
! UPDATE-COMBO-SEQNUM                                                  *
!***********************************************************************
begin-procedure Update-Combo-SeqNum

  let $err-statement1 = 'BUD003, Update-Error - Update-Combo-SeqNum'

begin-SQL On-Error=Error-Display

UPDATE PS_R_BUD003
SET COMBO_VALID_FLG = 'C', COMBO_SEQ_NO = COMBO_SEQ_NO + #LastAcctCd
WHERE COMBO_VALID_FLG = 'R'

end-SQL
end-procedure

!***********************************************************************
! FIND-DUPLICATE-ACCTCD                                                *
!***********************************************************************
begin-procedure Find-Duplicate-AcctCd

  do Format-Acct-Code (#StartComboCd, 'N', $StartComboCd)
  do Format-Acct-Code (#EndComboCd, 'N', $EndComboCd)

begin-Select distinct
S1.FDM_COMBO_CD

  let #ComboSeqNum   = #ComboSeqNum + 1
  do Reset-Combo-Seq (&S1.FDM_COMBO_CD, #ComboSeqNum)

FROM PS_VALID_COMBO_TBL S1
WHERE S1.FDM_COMBO_CD >= $StartComboCd
  AND S1.FDM_COMBO_CD <= $EndComboCd

end-Select

begin-Select distinct
S2.ACCT_CD

  let #ComboSeqNum   = #ComboSeqNum + 1
  do Reset-Combo-Seq (&S2.ACCT_CD, #ComboSeqNum)

FROM PS_ACCT_CD_TBL S2
WHERE S2.ACCT_CD >= $StartComboCd
  AND S2.ACCT_CD <= $EndComboCd
  AND NOT EXISTS (SELECT 'X' FROM PS_VALID_COMBO_TBL S3
                   WHERE S3.FDM_COMBO_CD = S2.ACCT_CD)
end-Select

end-procedure

!***********************************************************************
! FORMAT-ACCT-CODE                                                     *
!***********************************************************************
begin-procedure Format-Acct-Code (#Acct_Cd, $IssueWarning, :$Format_AcctCd)

  move #Acct_Cd to $Acct_Cd 999999999999999999
  let $Acct_Cd  = ltrim($Acct_Cd, ' ')
  let #Acct_Len = length($Acct_Cd)

  if #Acct_Len > {ACCT_SIZE}  and $IssueWarning = 'Y'
      display 'On line account code has exceded standard size limit of {ACCT_SIZE}'
      display 'Please verify the account value in the PS_INSTALLATION_PY table'
      display 'Current Account Code value = ' noline
      display #Acct_Cd
  end-if

  let $Format_AcctCd = substr($_Zeros,1,{ACCT_SIZE} - #Acct_Len) || $Acct_Cd

end-procedure

!***********************************************************************
! RESET-COMBO-SEQ                                                      *
!***********************************************************************
begin-procedure Reset-Combo-Seq ($Acct_Cd, #SeqNo)

  let $_err-statement1 = 'BUD003, Update-Error - Reset-Combo-Seq'

  let #Acct_Cd = To_Number($Acct_Cd)

begin-SQL On-Error=Error-Display

UPDATE PS_R_BUD003
SET COMBO_VALID_FLG = 'R', COMBO_SEQ_NO = #SeqNo
WHERE COMBO_SEQ_NO = #Acct_Cd
  AND COMBO_VALID_FLG = 'C'

end-SQL
end-procedure

!***********************************************************************
! UPDATE-ACCT-CD-LAST                                                  *
!***********************************************************************
begin-procedure Update-Acct-Cd-Last

  let $err-statement1 = 'BUD003, Update Error - UPDATE-ACCT-CD-LAST'
  let $err-statement2 = ' '

begin-SELECT
INS.ACCT_CD_LAST

  let #LastAcctCd = &INS.Acct_Cd_Last

FROM PS_INSTALLATION_PY INS
end-SELECT

  let #StartComboCd = #LastAcctCd + 1
  let #EndComboCd   = #LastAcctCd + #ComboSeqNum

begin-SQL on-error = Error-Display

UPDATE PS_INSTALLATION_PY
SET ACCT_CD_LAST = #EndComboCd
end-SQL

end-procedure

!***********************************************************************
! PROCESS-NEW-FDM-COMBO-CODE                                           *
!***********************************************************************
begin-procedure Process-New-FDM-Combo-Code

begin-Select
R.COMBO_VALID_FLG
R.COMBO_SEQ_NO

   let $R_COMBO_VALID_FLG = &R.COMBO_VALID_FLG
   let #R_COMBO_SEQ_NO    = &R.COMBO_SEQ_NO
   do Format-Acct-Code (&R.COMBO_SEQ_NO, 'Y', $SYS_COMBO_CD)
   do Update-FDM-Combo-Code

FROM PS_R_BUD003 R
WHERE R.COMBO_VALID_FLG <> 'N'
end-Select

end-procedure

!***********************************************************************
! UPDATE-FDM-COMBO-CODE                                                *
!***********************************************************************
begin-procedure Update-FDM-Combo-Code

  let $err-statement1 = 'BUD003, Update Error - Update-FDM-Combo-Code'
  let $err-statement2 = ' '

begin-SQL on-error = Error-Display

UPDATE PS_R_BUD003
SET FDM_COMBO_CD = $SYS_COMBO_CD
WHERE COMBO_VALID_FLG = $R_COMBO_VALID_FLG
  AND COMBO_SEQ_NO    = #R_COMBO_SEQ_NO
end-SQL

end-procedure

!***********************************************************************
! NEW-VALID-COMBO-RECORDS                                              *
!***********************************************************************
begin-procedure New-Valid-Combo-Records

  let $err-statement1 = 'BUD003, Insert Error - New-Valid-Combo-Records'

begin-SQL on-error = Error-Display

INSERT INTO PS_VALID_COMBO_TBL
   (SETID,
   PROCESS_GROUP,
   FDM_HASH,
   EFFDT,
   EFF_STATUS,
   FDM_COMBO_CD,
   DESCR,
   DESCRSHORT,
   ACCOUNT,
   DEPTID_CF,
   PROJECT_ID,
   PRODUCT,
   FUND_CODE,
   PROGRAM_CODE,
   CLASS_FLD,
   AFFILIATE,
   OPERATING_UNIT,
   ALTACCT,
   BUDGET_REF,
   CHARTFIELD1,
   CHARTFIELD2,
   CHARTFIELD3,
   AFFILIATE_INTRA1,
   AFFILIATE_INTRA2,
   BUSINESS_UNIT_PC,
   ACTIVITY_ID,
   RESOURCE_TYPE,
   RESOURCE_CATEGORY,
   RESOURCE_SUB_CAT,
   VALID_FLAG)
SELECT
   SETID,
   PROCESS_GROUP,
   FDM_HASH,
   EFFDT,
   EFF_STATUS,
   FDM_COMBO_CD,
   DESCR,
   DESCRSHORT,
   ACCOUNT,
   DEPTID_CF,
   PROJECT_ID,
   PRODUCT,
   FUND_CODE,
   PROGRAM_CODE,
   CLASS_FLD,
   AFFILIATE,
   OPERATING_UNIT,
   ALTACCT,
   BUDGET_REF,
   CHARTFIELD1,
   CHARTFIELD2,
   CHARTFIELD3,
   AFFILIATE_INTRA1,
   AFFILIATE_INTRA2,
   BUSINESS_UNIT_PC,
   ACTIVITY_ID,
   RESOURCE_TYPE,
   RESOURCE_CATEGORY,
   RESOURCE_SUB_CAT,
   VALID_FLAG
FROM PS_R_BUD003

end-SQL

begin-select
count(*) &NewComboCnt
FROM PS_R_BUD003
end-select

  let #Total_Records_Inserted = #Total_Records_Inserted + &NewComboCnt

end-procedure

!***********************************************************************
! CREATE-ARRAYS                                                        *
!***********************************************************************
begin-procedure Create-Arrays

  let #FDMComboArraySize = 50
  let #ComboEffDtSize    = 20
  Create-array name=FDMComboArray size = 50
               field=setid:Char
               field=process_group:Char
               field=account:Char
               field=deptid_cf:Char
               field=project_id:Char
               field=product:Char
               field=fund_code:Char
               field=program_code:Char
               field=class_fld:Char
               field=affiliate:Char
               field=operating_unit:Char
               field=altacct:Char
               field=budget_ref:Char
               field=Chartfield1:char
               field=Chartfield2:char
               field=Chartfield3:char
               field=affiliate_intra1:Char
               field=affiliate_intra2:Char
               field=business_unit_pc:Char
               field=activity_id:Char
               field=resource_type:Char
               field=resource_category:Char
               field=resource_sub_cat:Char
               field=calc_hash:Char
               field=ComboSeqNum:Number
               field=EffDtCount:Number
               field=effdt:Date:20
               field=eff_status:Char:20
               field=descr:Char:20
               field=descrshort:Char:20
               field=valid_flag:Char:20

end-procedure

!***********************************************************************
! INITIALIZE-FDMCOMBO-ARRAY                                            *
!***********************************************************************
begin-procedure Initialize-FDMCombo-Array

  Clear-Array Name=FDMComboArray

end-procedure

!***********************************************************************
! CLOSE-INPUT-FILE1                                                    *
!***********************************************************************
begin-procedure CLOSE-INPUT-FILE1

  let $err-statement1 = 'BUD003, Delete-Error - DEL-GL_ACCT_CD_TBL'

begin-SQL On-Error=Error-Display

DELETE FROM PS_GL_ACCT_CD_TBL

end-SQL

end-procedure CLOSE-INPUT-FILE1

!****************************************************************************
! DELETE-RUN-CONTROL                                                        *
! Deletes run control information from run control table.                   *
!****************************************************************************
begin-procedure DELETE-RUN-CONTROL

  let $err-statement1 = 'BUD003, Delete-Error - DEL-RUNCTL'
  let $err-statement2 = 'Key Values: TABLE PS_RUN_CNTL_BDGT' ||
                        ', OPRID ' || $PRCS_OPRID ||
                        ', RUN_CNTL_ID ' || $PRCS_RUN_CNTL_ID


begin-SQL On-Error=Error-Display

DELETE FROM PS_RUN_CNTL_BDGT
WHERE OPRID       = $Prcs_OprID
  AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID

end-SQL

end-procedure

!***********************************************************************
!DELETE-TEMP-RECORD                                                    *
!***********************************************************************
begin-procedure Delete-Temp-Record

  let $err-statement1 = 'BUD003, Delete-Error - DELETE-TEMP-RECORD'

begin-SQL On-Error=Error-Display

DELETE FROM PS_R_BUD003

end-SQL

end-procedure

!***********************************************************************
! DISPLAY-TIME                                                         *
!***********************************************************************
begin-procedure Display-Time

  let $AsOfToday = ''
  let $AsOfNow   = ''
  do Get-Current-DateTime
  display $AsOfToday NoLine
  display ', '       NoLine
  display $AsOfNow
  display ''

end-procedure

!***********************************************************************
! WRAPUP                                                               *
! This paragraph ends the report process and updates the status of the *
! job in the process scheduler.                                        *
!***********************************************************************
begin-procedure WRAPUP

  do DELETE-RUN-CONTROL
  do RESET
  do STDAPI-TERM

end-procedure WRAPUP

!***********************************************************************
! SQCs                                                                 *
!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'stderror.sqc'  !Routine for error display
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'btrnctl1.sqc'  !Get run control parameters.  This will change
                         !depending on the type of report you are running
                         !and which type of parameters are being used to
                         !run the report.  Other versions are hrrunctl2.sqc,
                         !bnrunctl.sqc, payrnctl.sqc, and taxrnctl.sqc
#Include 'btgetval.sqc'  !Formats run control parameters.  This will also
                         !change as the above sqc changes.  Other versions
                         !are bngetval.sqc and cbgetval.sqc.
#Include 'askftd.sqc'    !calls prompt for entry of from-thru date
