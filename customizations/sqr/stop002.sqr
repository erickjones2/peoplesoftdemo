!-----------------------------------------------------------------------
!  STOP002:  Summary of Shares Granted
!-----------------------------------------------------------------------
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:06                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Reports all grant info within a date range.
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Create-Array
  do Process-Main
  do Reset
  do Successful-EOJ

  let $CurrentTime = datenow()
  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID = 'STOP002'
  let $cur = $basecurr

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language

  if $prcs_process_instance = ''
    input $RC_Stock_ID          MAXLEN=10 'Enter Stock ID'           Type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID       MAXLEN=10 'Stock ID is required'     Type=Char
    end-while
    input $RC_Stock_Plan maxlen=10 type=char 'Enter the STOCK PLAN ID or press enter for all'
    input $RC_Option_Type maxlen=4 type=char 'Enter the OPTION TYPE or press enter for all'
    input $RC_Status maxlen=1 type=char 'Enter the  GRANT STATUS or press enter for all'
    uppercase $RC_Stock_ID
    uppercase $RC_Status
    uppercase $RC_Option_Type
    uppercase $RC_Stock_Plan
    do Ask-From-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'From Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $StockId        = rtrim($RC_Stock_ID,' ')
  let $RC_Stock_Plan  = rtrim($RC_Stock_Plan,' ')
  let $RC_Option_Type = rtrim($RC_Option_Type,' ')
  let $RC_Status      = rtrim($RC_Status,' ')
  let $RC_FromDate    = rtrim($RC_FromDate,' ')
  let $RC_ThruDate    = rtrim($RC_ThruDate,' ')

  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')

  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 09

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  ,015,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  let $Fieldname  = 'GRANT_STATUS'
  let $Fieldvalue = $RC_Status
  do Read-Translate-Table
  let $StatusXlat = $Xlatshortname
  print $GrantStatusLbl                                    (+1,001,012)
  print ':'                                                (  ,   ,001)
  print $StatusXlat                                        (  ,015,010)

  print $OptionTypeLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,015,004)

  print $StockPlanLbl                                      (+1,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,015,010)

  print $NameLbl                                           (+2,001,030)
  print $GrantNbrLbl                                       (  ,032,012)
  print $GrantStatusLbl                                    (  ,046,012)
  print $GrantPriceLbl                                     (  ,074,011)
  print $CompensationLbl                                   (  ,157,012)
  print $EmplLbl                                           (+1,001,030)
  print $GrantDtLbl                                        (  ,032,010)
  print $OptionTypeLbl                                     (  ,046,012)
  print $StockPlanLbl                                      (  ,060,011)
  print $GrantFmvLbl                                       (  ,076,009)
  print $ShrGrantLbl                                       (  ,095,014)
  print $GrantCostLbl                                      (  ,118,011)
  print $GrantValLbl                                       (  ,138,011)
  print $BenefitLbl                                        (  ,162,007)
  print '-'                                                (+1,001,168) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',   'FROM',           $FromLbl,         #DW)
  do Get_Field_Information ('STOCK',   'THRU',           $ThruLbl,         #DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',       $StockIdLbl,      #DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN',     $StockPlanLbl,    #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE', $OptionTypeLbl,   #DW)
  do Get_Field_Information ('STOCK',   'NAME',           $NameLbl,         #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',         $EmplLbl,         #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',      $GrantNbrLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_DT',       $GrantDtLbl,      #DW)
  do Get_Field_Information ('STOCK',   'SHARES_GRANTED', $ShrGrantLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',    $GrantPriceLbl,   #DW)
  do Get_Field_Information ('STOCK',   'GRANT_FMV',      $GrantFmvLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_VALUE',    $GrantValLbl,     #DW)
  do Get_Field_Information ('STOCK',   'GRANT_COST',     $GrantCostLbl,    #DW)
  do Get_Field_Information ('STOCK',   'HI',             $HiLbl,           #DW)
  do Get_Field_Information ('STOCK',   'LOW',            $LowLbl,          #DW)
  do Get_Field_Information ('STOCK',   'AVG',            $AvgLbl,          #DW)

  do Get_Field_Information ('STOP002', 'STOP002',        $ReportTitle,     #DW)
  do Get_Field_Information ('STOP002', 'COMPENSATION',   $CompensationLbl, #DW)
  do Get_Field_Information ('STOP002', 'BENEFIT',        $BenefitLbl,      #DW)
  do Get_Field_Information ('STOP002', 'GRANT_STATUS',   $GrantStatusLbl,  #DW)
  do Get_Field_Information ('STOP002', 'TOTAL_WEIGHT',   $TotalWeightLbl,  #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  if $RC_Stock_Plan <> ''
    let $PlanClause    = 'and A.STOCK_PLAN = '''||$RC_Stock_Plan ||''''
  else
    let $PlanClause    =  ''
  end-if
  if $RC_Option_Type <> ''
    let $OptionClause  = 'and A.ST_OPTION_TYPE = '''||$RC_Option_Type ||''''
  else
    let $OptionClause  = ''
  end-if
  if $RC_Status <> ''
    let $StatusClause  ='and A.GRANT_STATUS = '''||$RC_Status ||''''
  else
    let $StatusClause  = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan            -
               size  = 50                   -
               field = StockPlan:char       -
               field = SharesGranted:number -
               field = GrantCost:number     -
               field = GrantValue:number    -
               field = Benefit:number

  create-array name  = OptionType           -
               size  = 10                   -
               field = OptionType:char      -
               field = SharesGranted:number -
               field = GrantCost:number     -
               field = GrantValue:number    -
               field = Benefit:number

  create-array name  = GrantStatus          -
               size  = 10                   -
               field = Status:char          -
               field = SharesGranted:number -
               field = GrantCost:number     -
               field = GrantValue:number    -
               field = Benefit:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let #Count       = 1
  let #PlanCount   = 1
  let #TypeCount   = 1
  let #StatusCount = 1
  let #AvgCount    = 0
  let #LowPrice    = 0
  let #MaxPrice    = 0
  let #TotalPrice  = 0
  let $FirstPass   = 'Y'

Begin-Select

A.ST_OPTION_TYPE
A.GRANT_STATUS                                             () on-break print=never before=Get-Status-Xlat
A.STOCK_PLAN
A.EMPLID
A.GRANT_NBR
A.GRANT_DT
A.SHARES_GRANTED
A.GRANT_PRICE
B.NAME

  let $EmplId        = rtrim(&a.emplid,' ')
  let $GrantNbr      = rtrim(&a.grant_nbr,' ')
  let $GrantDt       = rtrim(&a.grant_dt,' ')
  let $OptionType    = rtrim(&a.st_option_type,' ')
  let $GrantStatus   = rtrim(&a.grant_status,' ')
  let $StockPlan     = rtrim(&a.stock_plan,' ')
  let #GrantPrice    = &a.grant_price
  let #SharesGranted = &a.shares_granted
  let $Name          = rtrim(&b.name,' ')
  let $RowSelected   = 'Y'
  do Get-Grant-Fmv-Rules
  do Get_FMV_Prices ($GrantFmvMethod,$StockId,$GrantDt,$FmvHolidayRule,$FmvWeekendRule,#GrantFmv)
  let #GrantCost     = round((#SharesGranted * #GrantPrice),2)
  let #GrantValue    = round((#SharesGranted * #GrantFmv),2)
  let #Benefit       = (#GrantValue - #GrantCost)
  if #Benefit < 0
      let #Benefit = 0
  end-if
  do Get-Status-Xlat
  do Print-Details
  do Populate-Arrays
  do Get-Min-Max-GrantPrice

FROM PS_ST_GRANT       A,
     PS_ST_PERSON_NAME B
WHERE A.EMPLID      = B.EMPLID
  AND A.STOCK_ID    = $StockId
  AND A.GRANT_DT   >= $RC_FromDate
  AND A.GRANT_DT   <= $RC_ThruDate
  [$PlanClause]
  [$OptionClause]
  [$StatusClause]
order by B.NAME, A.ST_OPTION_TYPE

End-Select

  if $RowSelected = 'Y' !implies some data selected
    do Print-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Grant-Fmv-Rules
!-----------------------------------------------------------------------
Begin-Procedure Get-Grant-Fmv-Rules

  let $GrantFmvMethod = ''
  let $FmvHolidayRule = ''
  let $FmvWeekendRule = ''

Begin-Select

C.GRANT_FMV_MTHD
C.FMV_HOLIDAY_RULE
C.FMV_WEEKEND_RULE

  let $GrantFmvMethod = rtrim(&c.grant_fmv_mthd,' ')
  let $FmvHolidayRule = rtrim(&c.fmv_holiday_rule,' ')
  let $FmvWeekendRule = rtrim(&c.fmv_weekend_rule,' ')

 from PS_ST_OPTION_PLAN C
where C.STOCK_ID        = $StockId
  and C.STOCK_PLAN      = $StockPlan
  and C.STOCK_PLAN_TYPE = 'O'
  and C.EFFDT           = (select MAX(EFFDT) 
                             from PS_ST_OPTION_PLAN
                            where STOCK_ID        = C.STOCK_ID
                              and STOCK_PLAN      = C.STOCK_PLAN
                              and STOCK_PLAN_TYPE = C.STOCK_PLAN_TYPE
                              and EFFDT          <= $GrantDt)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Status-Xlat
!-----------------------------------------------------------------------
Begin-Procedure Get-Status-Xlat

  let $GrantStatus = rtrim(&a.grant_status,' ')
  let $Fieldname   = 'GRANT_STATUS'
  let $Fieldvalue  = $GrantStatus
  do Read-Translate-Table
  let $Status      = $Xlatshortname

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  if #Count > 1
    next-listing skiplines=0 need=3
  end-if

  print $Name                                              (+1,001,030)
  print $GrantNbr                                          (  ,032,010)
  print $Status                                            (  ,046,014)
  print $StockPlan                                         (  ,060,010)
  print #GrantPrice                                        (  ,072,013) edit $9,999.999999
  print #SharesGranted                                     (  ,087,022) edit 999,999,999,999.999999
  print #GrantCost                                         (  ,111,018) edit $99,999,999,999.99
  print #GrantValue                                        (  ,131,018) edit $99,999,999,999.99
  print #Benefit                                           (  ,151,018) edit $99,999,999,999.99
  print $EmplId                                            (+1,001,011)
  do Format-DateTime ($GrantDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,032,010)
  print $OptionType                                        (  ,046,014)
  print #GrantFmv                                          (  ,072,013) edit $9,999.999999

  let #TotalGranted = #TotalGranted + #SharesGranted
  let #TotalCost    = #TotalCost    + #GrantCost
  let #TotalValue   = #TotalValue   + #GrantValue
  let #TotalBenefit = #TotalBenefit + #Benefit
  let #Count        = #Count        + 1

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan   #SharesGranted #GrantCost #GrantValue #Benefit into StockPlan(1)   StockPlan   SharesGranted GrantCost GrantValue Benefit
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #SharesGranted #GrantCost #GrantValue #Benefit to StockPlan(#Row) SharesGranted GrantCost GrantValue Benefit
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesGranted #GrantCost #GrantValue #Benefit into StockPlan(#PlanCount) StockPlan SharesGranted GrantCost GrantValue Benefit
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

  if #TypeCount = 1
    put $OptionType  #SharesGranted #GrantCost #GrantValue #Benefit into OptionType(1)  OptionType  SharesGranted GrantCost GrantValue Benefit
    let #TypeCount = #TypeCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #TypeCount
      get $AOptionType from OptionType(#Row) OptionType
      if $OptionType = $AOptionType
        array-add #SharesGranted #GrantCost #GrantValue #Benefit to OptionType(#Row) SharesGranted GrantCost GrantValue Benefit
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $OptionType #SharesGranted #GrantCost #GrantValue #Benefit into OptionType(#TypeCount) OptionType SharesGranted GrantCost GrantValue Benefit
      let #TypeCount = #TypeCount + 1
    end-if
  end-if

  if #StatusCount = 1
    put $Status #SharesGranted #GrantCost #GrantValue #Benefit into GrantStatus(1) Status SharesGranted GrantCost GrantValue Benefit
    let #StatusCount = #StatusCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #StatusCount
      get $AStatus from GrantStatus(#Row) Status
      if $Status = $AStatus
        array-add #SharesGranted #GrantCost #GrantValue #Benefit to GrantStatus(#Row) SharesGranted GrantCost GrantValue Benefit
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $Status #SharesGranted #GrantCost #GrantValue #Benefit into GrantStatus(#StatusCount) Status SharesGranted GrantCost GrantValue Benefit
      let #StatusCount = #StatusCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Min-Max-GrantPrice
! Descr:   Determines the Minimum and Maximum Grant Price and keeps
!          track of how many rows are to be used for dividing by Average
!-----------------------------------------------------------------------
Begin-Procedure Get-Min-Max-GrantPrice

  if $FirstPass = 'Y'
      let #LowPrice   = &a.grant_price
      let #MaxPrice   = &a.grant_price
      let $FirstPass = 'N'
  end-if

  let #AvgCount  = #AvgCount + 1

  if #GrantPrice > #MaxPrice
      let #MaxPrice = #GrantPrice
  else
     if #GrantPrice < #LowPrice
         let #LowPrice = #GrantPrice
     end-if
  end-if

  let #TotalPrice = #TotalPrice + #GrantPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints totals for each print break section.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  new-page

  let #AvgPrice = round((#TotalCost  / #TotalGranted),6)
  let #AvgFmv   = round((#TotalValue / #TotalGranted),6)

  print $TotalWeightLbl                                    (+2,046,023) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgPrice                                          (  ,072,013) bold edit $9,999.999999
  print #TotalGranted                                      (  ,087,022) bold edit 999,999,999,999.999999
  print #TotalCost                                         (  ,111,018) bold edit $99,999,999,999.99
  print #TotalValue                                        (  ,131,018) bold edit $99,999,999,999.99
  print #TotalBenefit                                      (  ,151,018) bold edit $99,999,999,999.99
  print #AvgFmv                                            (+1,072,013) bold edit $9,999.999999

  print $GrantStatusLbl                                    (+2,058,012) bold underline
  let #Row = 1
  while #Row < #StatusCount
    get $Status #SharesGranted #GrantCost #GrantValue #Benefit from GrantStatus(#Row) Status SharesGranted GrantCost GrantValue Benefit
    let #AvgPrice = round((#GrantCost  / #SharesGranted),6)
    let #AvgFmv   = round((#GrantValue / #SharesGranted),6)
    print $Status                                          (+1,058,010) bold
    print #AvgPrice                                        (  ,072,013) bold edit $9,999.999999
    print #SharesGranted                                   (  ,087,022) bold edit 999,999,999,999.999999
    print #GrantCost                                       (  ,111,018) bold edit $99,999,999,999.99
    print #GrantValue                                      (  ,131,018) bold edit $99,999,999,999.99
    print #Benefit                                         (  ,151,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,072,013) bold edit $9,999.999999
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $OptionTypeLbl                                     (+1,058,012) bold underline
  let #Row = 1
  while #Row < #TypeCount
    get $OptionType #SharesGranted #GrantCost #GrantValue #Benefit from OptionType(#Row) OptionType SharesGranted GrantCost GrantValue Benefit
    let #AvgPrice = round((#GrantCost  / #SharesGranted),6)
    let #AvgFmv   = round((#GrantValue / #SharesGranted),6)
    print $OptionType                                      (+1,058,010) bold
    print #AvgPrice                                        (  ,072,013) bold edit $9,999.999999
    print #SharesGranted                                   (  ,087,022) bold edit 999,999,999,999.999999
    print #GrantCost                                       (  ,111,018) bold edit $99,999,999,999.99
    print #GrantValue                                      (  ,131,018) bold edit $99,999,999,999.99
    print #Benefit                                         (  ,151,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,072,013) bold edit $9,999.999999
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $StockPlanLbl                                      (+1,058,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #SharesGranted #GrantCost #GrantValue #Benefit from StockPlan(#Row) StockPlan SharesGranted GrantCost GrantValue Benefit
    let #AvgPrice = round((#GrantCost  / #SharesGranted),6)
    let #AvgFmv   = round((#GrantValue / #SharesGranted),6)
    print $StockPlan                                       (+1,058,010) bold
    print #AvgPrice                                        (  ,072,013) bold edit $9,999.999999
    print #SharesGranted                                   (  ,087,022) bold edit 999,999,999,999.999999
    print #GrantCost                                       (  ,111,018) bold edit $99,999,999,999.99
    print #GrantValue                                      (  ,131,018) bold edit $99,999,999,999.99
    print #Benefit                                         (  ,151,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,072,013) bold edit $9,999.999999
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  let #AvgGrantPrice  =  round((#TotalPrice / #AvgCount),6)

  print $GrantPriceLbl                                     (+2,058,011) bold underline
  print $HiLbl                                             (+1,063,002) bold
  print ':'                                                (  ,   ,001) bold
  print #MaxPrice                                          (  ,072,013) bold edit $9,999.999999
  print $AvgLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgGrantPrice                                     (  ,072,013) bold edit $9,999.999999
  print $LowLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #LowPrice                                          (  ,072,013) bold edit $9,999.999999

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'sqlerr.sqc'      !SQL error processing
#include 'prcsapi.sqc'     !Process Scheduler API
#include 'prcsdef.sqc'     !Update Process Open_Trans variable declaration
#include 'eoj.sqc'         !End of Report Format
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'getrplng.sqc'    !Get the report language
#include 'readxlat.sqc'    !Read the Translate Table for the desired values.
#include 'strunctl.sqc'    !Runcontrol
#include 'askftd.sqc'      !Ask the from-thru-date
#include 'stgetfmv.sqc'    !Get Grant FMV
