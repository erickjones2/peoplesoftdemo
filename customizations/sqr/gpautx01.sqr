!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:19:34                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
!                                                                      *
! Global Payroll - Australia      Release 9                            *
!***********************************************************************

!***********************************************************************
!                                                                      *
!  This SQR updates the employee's tax scale to either '4R' or '4N'    *
!  when the exemption period for not having a tax file number has      *
!  expired.  By doing this, employee's are going to be taxed at the    *
!  highest rate.  Also, this program generates a report that list all  *
!  employees that has been updated.                                    *
!                                                                      *
!  The user has the option to automatically update the tax scale and   *
!  generate a report, or to just generate the report and let the users *
!  manually change the employee's tax scale.                           *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!   NOTE - Throughout this report, debugy and debugz flags are used.   *
!          debugy tracks the report execution/flow, and debugz tracks  *
!          variable values.  For info on how to use these flags for    *
!          debugging, refer to SQR documentation.                      *
!                                                                      *
!          In addition, if you encounter a function, procedure call    *
!          or bit of code you cannot decipher, go to the top of the    *
!          report and search for the string.  It is likely explained   *
!          via comments earlier in the report on the first occurrence. *
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !page layout and printer definition
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting
#include 'prcsapi.sqc'  !Replaces stdapi.sqc



begin-report
!#DEFINE debugx
#DEFINE debugy
#DEFINE debugz
!#DEFINE debugA

#IFDEF debugA
 Let $PRCS_OPRID = 'PS'
 Let $PRCS_RUN_CNTL_ID ='BT'
#ENDIF
#ifdef debugy
        show 'do Init-Processing'
#end-if
        do Init-Processing

#ifdef debugy
        show 'do Select-Parameters'
#end-if
        do Select-Parameters

#ifdef debugy
        show 'do Process-Main'
#end-if
        do Process-Main


#ifdef debugy
        show 'do Reset'
#end-if
        do Reset                        ! called from reset.sqc


#ifdef debugy
        show 'do Update-Prcs-Run-Status'
#end-if
        do Update-Prcs-Run-Status


#ifdef debugy
        show 'do Delete-RunControl'
#end-if
        do Delete-RunControl


#ifdef debugy
        show 'END-REPORT'
#end-if


end-report


!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Define-Prcs-Vars        - prcsapi.sqc (prcsdef.sqc)    *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Init-Report                                            *
!               Init-Number             - number.sqc                   *
!               Get-Language-Codes      - prcslng.sqc                  *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing


#ifdef debugy
        show 'do Init-Datetime'
#end-if
        do Init-Datetime


#ifdef debugy
        show 'do Get-Current-Datetime'
#end-if
        do Get-Current-Datetime


#ifdef debugy
        show 'do Define-Prcs-Vars'
#end-if
        do Define-Prcs-Vars


#ifdef debugy
        show 'do Get-Run-Control-Parms'
#end-if
        do Get-Run-Control-Parms

#ifdef debugy
        show 'do Init-Report'
#end-if
        do Init-Report


#ifdef debugy
        show 'do Init-Number'
#end-if
        do Init-Number


#ifdef debugy
        show 'do Get-Language-Codes'
#end-if
        do Get-Language-Codes


end-procedure ! Init-Processing


!***********************************************************************
!                                                                      *
! Select-Parameters                                                    *
!                                                                      *
!                                                                      *
! Calls:        None                                                   *
!                                                                      *
! Description:  Selects level zero information off of run control.     *
!               Calls the appropriate sub-procedure, if necessary,     *
!                    to string the selected paygroup or employee data. *
!                                                                      *
!***********************************************************************

begin-procedure Select-Parameters

#ifdef debugy
    show 'IN PROCEDURE SELECT-PARAMETERS'
#end-if

begin-SELECT
RC.OPRID                    &RC.OPRID
RC.RUN_CNTL_ID              &RC.RUN_CNTL_ID
RC.ASOFDATE                 &RC.ASOFDATE
RC.GPAU_TFN_UPDATE_YN       &RC.GPAU_TFN_UPDATE_YN
RC.GPAU_SORT_SEQ            &RC.GPAU_SORT_SEQ

    let $Oprid                = &RC.OPRID
    let $Run_Cntl_ID          = &RC.RUN_CNTL_ID
    let $AsOfDate             = &RC.ASOFDATE
    let $Auto_Update          = &RC.GPAU_TFN_UPDATE_YN
    let $Sort_Seq             = &RC.GPAU_SORT_SEQ

#ifdef debugz
    show 'Run Control Select Oprid:           ' noline
    show $Oprid
    show 'Run Control Select Run_Cntl_ID:     ' noline
    show $Run_Cntl_ID
    show '$AsOfDate - ' $AsOfDate
#end-if

    FROM PS_GPAU_RC_REPORTS RC
    WHERE RC.OPRID        = $PRCS_OPRID
      AND RC.RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID


END-SELECT


end-procedure ! Select-Parameters


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc              *
!               Get_Field_Information                                  *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report


#ifdef debugy
        show 'Inside procedure Init-Report'
#end-if


!***********************************************************************
!                                                                      *
! Print column definitions.  Some fields are lined up vertically with  *
!   other fields on the report.  The first occurence of a column       *
!   location is defined.  After that, fields that occur in the same    *
!   column use the first field's column definition.  Field labels end  *
!   in _lbl.  Other column definitions are for the field values.       *
!                                                                      *
!***********************************************************************

!         1         2         3         4         5         6         7         8         9        10        11        12        13
!123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012
!
! Employee ID       Name                    Pay    Balance     TFN     Tax    TFN    Exemption       New     New   New        New
!                                         Entity    Group     Status  Scale           End Date      EffDt   Scale  TFN       Status
!                                                   Number
! xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxx xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx   xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx
! xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxx xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx   xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx
! xxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxx xxxxxxxx xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx   xxxxxxxxxx xxx xxxxxxxxx xxxxxxxxxx
!
!

    #define Col_Emplid_lbl          1
    #define Col_Name_lbl            20
    #define Col_Pay_lbl             42
    #define Col_Balance_lbl         51
    #define Col_OldTFN1_lbl         63
    #define Col_OldTax_lbl          71
    #define Col_OldTFN2_lbl         78
    #define Col_Exempt_lbl          85
    #define Col_New1_lbl            101
    #define Col_New2_lbl            109
    #define Col_New3_lbl            115
    #define Col_New4_lbl            126


    #define Col_Entity_lbl          41
    #define Col_Group_lbl           52
    #define Col_Status_lbl          61
    #define Col_Scale_lbl           70
    #define Col_EndDt_lbl           86
    #define Col_EffDt_lbl           100
    #define Col_NewScale_lbl        108
    #define Col_NewTFN_lbl          115
    #define Col_NewStatus_lbl       125

    #define Col_Number_lbl          52

    #define Col_Emplid          2
    #define Col_EmplName        14
    #define Col_PayEntity       40
    #define Col_BalGrpNum       53
    #define Col_OldTFNStatus    60
    #define Col_OldTaxScale     71
    #define Col_OldTFN          75
    #define Col_XmptEndDate     85
    #define Col_NewEffdt        98
    #define Col_NewTaxScale     109
    #define Col_NewTFN          113
    #define Col_NewTFNStatus    124

!***********************************************************************
!                                                                      *
! Translations procedures & Strings Table retrievals.                  *
!                                                                      *
!***********************************************************************

    do Init_Report_Translation ($ReportID, $curr_language_cd)

    do Append_Report_Translation ('GPAUTX01')

    do Get_Field_Information ('GPAUTX01', 'GPAUTX01_TITLE', $GPAUTX01_Title,  #DW)
    do Get_Field_Information ('GPAUTX01', 'EMPLID',         $Emplid_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'NAME',           $Name_lbl,        #DW)
    do Get_Field_Information ('GPAUTX01', 'PAY',            $Pay_lbl,         #DW)
    do Get_Field_Information ('GPAUTX01', 'ENTITY',         $Entity_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'BALANCE',        $Balance_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'GROUP',          $Group_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'NUMBER',         $Number_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'TFN',            $TFN_lbl,        #DW)
    do Get_Field_Information ('GPAUTX01', 'STATUS',         $Status_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'TAX',            $Tax_lbl,         #DW)
    do Get_Field_Information ('GPAUTX01', 'SCALE',          $Scale_lbl,       #DW)
    do Get_Field_Information ('GPAUTX01', 'EXEMPT',         $Exempt_lbl,      #DW)
    do Get_Field_Information ('GPAUTX01', 'END_DT',         $EndDt_lbl,       #DW)
    do Get_Field_Information ('GPAUTX01', 'NEW',            $New_lbl,         #DW)
    do Get_Field_Information ('GPAUTX01', 'EFFDT',          $Effdt_lbl,       #DW)

    do Append_Report_Translation ('GP_HDG01')
    do Get_Field_Information ('GP_HDG01', 'STDHDG_REP_ID',  $stdhdg_rep_id,      #DW)
    do Get_Field_Information ('GP_HDG01', 'STDHDG_PAGE_NO', $stdhdg_page_no,     #DW)
    do Get_Field_Information ('GP_HDG01', 'STDHDG_RUN_DT',  $stdhdg_run_dt,      #DW)
    do Get_Field_Information ('GP_HDG01', 'STDHDG_RUN_TM',  $stdhdg_run_tm,      #DW)
    do Get_Field_Information ('GP_HDG01', 'STDHDG_END_REP', $stdhdg_end_rep,     #DW)

!***********************************************************************
!                                                                      *
! Report variables.                                                    *
!                                                                      *
!***********************************************************************

    let $ReportID              = 'GPAUTX01'          ! Printed in header
    let $ReportTitle           = $GPAUTX01_Title     ! Printed in header
    let $ReportDate            = $AsOfToday          ! Printed in header
    let $ReportTime            = $AsOfNow            ! Printed in header
    let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    let #Maxlines              = 55                  ! # rows on a page, used for page breaking
    let $Seg_FirstTimeThru     = 'Y'                 ! Used for page breaking
    let $Current_Emplid        = $Last_Emplid        ! Used for page breaking
    let #Current_Seg_Num       = #Last_Seg_Num       ! Used for page breaking
    let $Page_Break_Indicator  = 'Reset'             ! Used for page breaking
    let $Rpt_Hdr_FirstTimeThru = 'True'              ! Used for page breaking


!***********************************************************************
!                                                                      *
! Dates:   All of Europe uses date format DD/MM/YYYY                   *
!          The US uses date format of MM/DD/YYYY                       *
!                                                                      *
! Numbers: The U.S. and the U.K. use NN,NNN.NN                         *
!          The rest of Europe uses NN.NNN,NN                           *
!                                                                      *
!***********************************************************************

    let $ReportDateType = 0

    if $curr_language_cd = 'ENG' or $curr_language_cd = 'INE'
        let $ReportSDecimal   = '.'
        let $ReportSThousand  = ','
    else
        let $ReportSDecimal   = ','             ! resolved in number.sqc
        let $ReportSThousand  = '.'             ! resolved in number.sqc
    end-if


!***********************************************************************
!                                                                      *
! Initialize date formatting.                                          *
!                                                                      *
!***********************************************************************

!*** Initialize date formatting.
    let $Date_Init = '1900-01-01 00:00:00.000'
        #ifdef ORACLE
            let $Date_Init = '01-NOV-00'
        #endif

end-procedure ! Init-Report


!***************************
begin-heading 8
!***************************

#ifdef debugy
        show 'BEGIN-HEADING'
#end-if

! The following is taken from GPHDG01.SQC
!***********************************************************************
!                                                                      *
! Begin printing header info.                                          *
!                                                                      *
!***********************************************************************

    graphic (, 1, 180) box 4
    print '            '    (1,1)
    print $stdhdg_co_nm     ()          center
    print $stdhdg_rep_id    (+1,2)
    print $ReportID         (0,+2)
    print $ReportTitle      ()          center


    let #RptCol = {ColR} - 10


    print $stdhdg_page_no   (0,#RptCol)
    print #page-count       (0,+2)      edit 88888888
    print $Calc_Stat        (+1,)       center

    print $stdhdg_run_dt    (0,#RptCol)

    let $ReportDate            = $AsOfToday

    let $Rpt_Hdr_FirstTimeThru = 'False'

    do Format-DateTime($ReportDate, $ReportDate, {DEFDMY}, '', '')
    print $ReportDate       (0,+5)
    print $stdhdg_run_tm    (+1,#RptCol)
    print $ReportTime       (0,+5)

    do Print-Heading-Labels

end-heading


!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        Format-DateTime                                        *
!                                                                      *
! Description:  Retrieves segment information to be printed in page    *
!               header.  Manages segment-level page breaking.  Manages *
!               which report sections to run based on run control.     *
!                                                                      *
!***********************************************************************


begin-procedure Process-Main


#ifdef debugy
    show 'Inside procedure Process-Main'
#end-if


!***********************************************************************
!                                                                      *
! Set dynamic EE-level sort based on run control value.  $EE_Lvl_Sort  *
!   is resolved in GPRNCTL1.SQC                                        *
!                                                                      *
!***********************************************************************

    if $Sort_Seq = 'E'
        let $Order_By_Clause = 'ORDER BY EETXTFN.EMPLID'
    else
        let $Order_By_Clause = 'ORDER BY EETXTFN.GPAU_TFN_XMPT_END, EETXTFN.EMPLID'
    end-if

    let #rows_selected = 0

BEGIN-SELECT

#ifdef debugy
    show 'Inside SELECT, procedure Process-Main'
#end-if


EETXTFN.EMPLID              &EETXTFN.EMPLID
EETXTFN.EFFDT               &EETXTFN.EFFDT
EETXTFN.GPAU_TFN_STATUS     &EETXTFN.GPAU_TFN_STATUS
EETXTFN.GPAU_TFN_XMPT_STRT  &EETXTFN.GPAU_TFN_XMPT_STRT
EETXTFN.GPAU_TFN_XMPT_END   &EETXTFN.GPAU_TFN_XMPT_END
EETXTFN.GPAU_TFN            &EETXTFN.GPAU_TFN
EETXTFN.GPAU_RE_ENTER_TFN   &EETXTFN.GPAU_RE_ENTER_TFN
EETXTFN.GPAU_TFN_DISCLOSE   &EETXTFN.GPAU_TFN_DISCLOSE
EETXTFN.GPAU_ATO_SENT       &EETXTFN.GPAU_ATO_SENT
PERSON.NAME                 &PERSON.NAME

   add 1 to #rows_selected

!***********************************************************************
!                                                                      *
! Read-Translate-Table reads in a field name and value, and returns    *
!   $XlatShortName and XlatLongName from XLATTABLE.                    *
!                                                                      *
!***********************************************************************

    let $FieldName = 'GPAU_TFN_STATUS'
    let $FieldValue = &EETXTFN.GPAU_TFN_STATUS
    do Read-Translate-Table


!***********************************************************************
!                                                                      *
! Format-DateTime formats dates.  The format is controlled by          *
!   $ReportDateType which is conditionally set earlier in the report.  *
!                                                                      *
!***********************************************************************

    let $Date2 = &EETXTFN.GPAU_TFN_XMPT_END

    do Format-DateTime($Date2, $Xmpt_End_Dt, {DEFDMY}, '', '')


    let $Emplid             = &EETXTFN.EMPLID
    let $TFN_Effdt          = &EETXTFN.EFFDT
    let $TFN_Status         = $XlatShortName
    let $Name               = &PERSON.NAME
    let $TFN                = &EETXTFN.GPAU_TFN

!***********************************************************************
!                                                                      *
! Determine which report sections to run depending on what the user    *
!   selected in the run control.  $Run_Sections is resolved in         *
!   GPRNCTL1.SQC                                                       *
!                                                                      *
!***********************************************************************


    if $Auto_Update = 'Y'
        let $New_Effdt = $AsOfDate
        SHOW '$New_Effdt - ' $New_Effdt
        let $New_TFN = '000000000'
        let $New_TFN_Status = '20'

        do Update-Nonresident-Tax-Scale

        do Update-Tax-TFN

    end-if

    do Update-TFN-Details

    do Generate-Report


!***********************************************************************
!                                                                      *
! Keep track of previous segment information for purposes of writing   *
!   out headers.  This info is used in GPHDG01.SQC                     *
!                                                                      *
!***********************************************************************

    let $Last_Emplid                 = $Emplid
    let $Last_Name                   = $Name


    FROM PS_GPAU_EE_TAX_TFN  EETXTFN,
         PS_PERSON_NAME      PERSON

    WHERE EETXTFN.GPAU_TFN_XMPT_END < $AsOfDate
      AND EETXTFN.EFFDT = (SELECT MAX(EETXTFN2.EFFDT)
                                 FROM PS_GPAU_EE_TAX_TFN  EETXTFN2
                                 WHERE EETXTFN2.EMPLID= EETXTFN.EMPLID
                                   AND EETXTFN.EFFDT < $AsOfDate)
      AND NOT EXISTS (SELECT 'X'
                            FROM PS_GPAU_EE_TAX_TFN  EETXTFN3
                            WHERE EETXTFN3.EMPLID = EETXTFN.EMPLID
                              AND EETXTFN3.EFFDT = EETXTFN.EFFDT
                              AND EETXTFN3.GPAU_TFN_XMPT_END IS NULL)
      AND PERSON.EMPLID = EETXTFN.EMPLID
      [$Order_By_Clause]

END-SELECT

   if not #rows_selected
!      #include 'gphdg01.sqc'
      let $noDataMsg = '>>> No Data Found, As Of Date: ' || $AsOfDate
      print $noDataMsg   (+5,10)
   end-if

end-procedure ! Process-Main

!***********************************************************************
!                                                                      *
! Update-Tax-TFN                                                       *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        None                                                   *
!                                                                      *
! Description:  Updates the employee's tax scale to '4R' or '4N'.      *
!                                                                      *
!***********************************************************************


begin-procedure Update-Tax-TFN


#ifdef debugy
        show 'Inside procedure Update-Tax-TFN'
#end-if

begin-SQL
INSERT INTO PS_GPAU_EE_TAX_TFN (EMPLID
,EFFDT
,GPAU_TFN_STATUS
,GPAU_TFN_XMPT_STRT
,GPAU_TFN_XMPT_END
,GPAU_TFN
,GPAU_RE_ENTER_TFN
,GPAU_TFN_DISCLOSE
,GPAU_ATO_SENT)
VALUES (
&EETXTFN.EMPLID
,$New_EffDt
,$New_TFN_Status
,NULL
,NULL
,$New_TFN
,&EETXTFN.GPAU_RE_ENTER_TFN
,&EETXTFN.GPAU_TFN_DISCLOSE
,&EETXTFN.GPAU_ATO_SENT
);

    #ifdef ORACLE
       COMMIT;
    #endif

end-SQL
end-procedure ! Update-Tax-TFN

!***********************************************************************
!                                                                      *
! Update-TFN-Details                                                   *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        None                                                   *
!                                                                      *
! Description:  Retrieve TFN Details from GPAU_EE_TAX_DTL.             *
!                                                                      *
!***********************************************************************
begin-procedure Update-TFN-Details

#ifdef debugy
        show 'Inside procedure Get-TFN-Details'
#end-if

begin-SELECT
EETXDTL.EMPLID              &EETXDTL.EMPLID
EETXDTL.EFFDT               &EETXDTL.EFFDT
EETXDTL.PAY_ENTITY          &EETXDTL.PAY_ENTITY
EETXDTL.BALANCE_GRP_NUM     &EETXDTL.BALANCE_GRP_NUM
EETXDTL.GPAU_TAX_SCALE      &EETXDTL.GPAU_TAX_SCALE
EETXDTL.GPAU_PAYMENT_BASIS  &EETXDTL.GPAU_PAYMENT_BASIS
EETXDTL.GPAU_FTB_REBATE     &EETXDTL.GPAU_FTB_REBATE
EETXDTL.GPAU_OTHER_REBATE   &EETXDTL.GPAU_OTHER_REBATE
EETXDTL.GPAU_TOTAL_REBATE   &EETXDTL.GPAU_TOTAL_REBATE
EETXDTL.GPAU_CALC_MLA_YN   &EETXDTL.GPAU_CALC_MLA_YN
EETXDTL.GPAU_SPOUSE_YN      &EETXDTL.GPAU_SPOUSE_YN
EETXDTL.GPAU_CMBND_INC_YN   &EETXDTL.GPAU_CMBND_INC_YN
EETXDTL.GPAU_NOOF_DPNDNTS   &EETXDTL.GPAU_NOOF_DPNDNTS
EETXDTL.GPAU_TAX_ADJ_TYP    &EETXDTL.GPAU_TAX_ADJ_TYP
EETXDTL.GPAU_TAX_ADJ_AMT    &EETXDTL.GPAU_TAX_ADJ_AMT
EETXDTL.GPAU_TAX_ADJ_PCT    &EETXDTL.GPAU_TAX_ADJ_PCT
EETXDTL.GPAU_HECS_YN        &EETXDTL.GPAU_HECS_YN
EETXDTL.GPAU_SFSS_YN        &EETXDTL.GPAU_SFSS_YN

EETXDTL.GPAU_FL_YN        &EETXDTL.GPAU_FL_YN

EETXDTL.GPAU_FL_ADJ_IND       &EETXDTL.GPAU_FL_ADJ_IND

EETXDTL.GPAU_FL_OVRD_PCT       &EETXDTL.GPAU_FL_OVRD_PCT

EETXDTL.GPAU_FL_OVRD_AMT       &EETXDTL.GPAU_FL_OVRD_AMT

EETXDTL.GPAU_FL_ADDL_PCT        &EETXDTL.GPAU_FL_ADDL_PCT 


EETXDTL.GPAU_FL_ADDL_AMT        &EETXDTL.GPAU_FL_ADDL_AMT 

EETXDTL.GPAU_CNTRCTR_YN     &EETXDTL.GPAU_CNTRCTR_YN
EETXDTL.GPAU_ABN            &EETXDTL.GPAU_ABN
EETXDTL.GPAU_ABN_BRANCH     &EETXDTL.GPAU_ABN_BRANCH
EETXDTL.GPAU_TFN_SIGNED_YN  &EETXDTL.GPAU_TFN_SIGNED_YN
EETXDTL.GPAU_TFN_SIGNED_DT  &EETXDTL.GPAU_TFN_SIGNED_DT
EETXDTL.GPAU_PAYG_ADJ_IND   &EETXDTL.GPAU_PAYG_ADJ_IND
EETXDTL.GPAU_PAYG_OVRD_PCT  &EETXDTL.GPAU_PAYG_OVRD_PCT
EETXDTL.GPAU_PAYG_OVRD_AMT  &EETXDTL.GPAU_PAYG_OVRD_AMT
EETXDTL.GPAU_PAYG_ADDL_PCT  &EETXDTL.GPAU_PAYG_ADDL_PCT
EETXDTL.GPAU_PAYG_ADDL_AMT  &EETXDTL.GPAU_PAYG_ADDL_AMT
EETXDTL.GPAU_ANNL_ADJ_IND   &EETXDTL.GPAU_ANNL_ADJ_IND
EETXDTL.GPAU_ANNL_OVRD_PCT  &EETXDTL.GPAU_ANNL_OVRD_PCT
EETXDTL.GPAU_ANNL_OVRD_AMT  &EETXDTL.GPAU_ANNL_OVRD_AMT
EETXDTL.GPAU_ANNL_ADDL_PCT  &EETXDTL.GPAU_ANNL_ADDL_PCT
EETXDTL.GPAU_ANNL_ADDL_AMT  &EETXDTL.GPAU_ANNL_ADDL_AMT
EETXDTL.GPAU_HECS_ADJ_IND   &EETXDTL.GPAU_HECS_ADJ_IND
EETXDTL.GPAU_HECS_OVRD_PCT  &EETXDTL.GPAU_HECS_OVRD_PCT
EETXDTL.GPAU_HECS_OVRD_AMT  &EETXDTL.GPAU_HECS_OVRD_AMT
EETXDTL.GPAU_HECS_ADDL_PCT  &EETXDTL.GPAU_HECS_ADDL_PCT
EETXDTL.GPAU_HECS_ADDL_AMT  &EETXDTL.GPAU_HECS_ADDL_AMT
EETXDTL.GPAU_SFSS_ADJ_IND   &EETXDTL.GPAU_SFSS_ADJ_IND
EETXDTL.GPAU_SFSS_OVRD_PCT  &EETXDTL.GPAU_SFSS_OVRD_PCT
EETXDTL.GPAU_SFSS_OVRD_AMT  &EETXDTL.GPAU_SFSS_OVRD_AMT
EETXDTL.GPAU_SFSS_ADDL_PCT  &EETXDTL.GPAU_SFSS_ADDL_PCT
EETXDTL.GPAU_SFSS_ADDL_AMT  &EETXDTL.GPAU_SFSS_ADDL_AMT


    let $Pay_Entity         = &EETXDTL.PAY_ENTITY
    let $Balance_Grp_Num    = &EETXDTL.BALANCE_GRP_NUM
    let $Tax_Scale          = &EETXDTL.GPAU_TAX_SCALE

    if $Auto_Update = 'Y'
           do Update-Tax-DTL
    end-if


    FROM PS_GPAU_EE_TAX_DTL  EETXDTL
    WHERE EETXDTL.EMPLID = $Emplid
      AND EETXDTL.EFFDT  = $TFN_Effdt
    ORDER BY EETXDTL.PAY_ENTITY, EETXDTL.BALANCE_GRP_NUM

end-SELECT

end-procedure ! Update-TFN-Detail

!***********************************************************************
!                                                                      *
! Update-Tax-DTL                                                       *
!                                                                      *
!                                                                      *
! Called By:    Update-Tax-DTL                                         *
!                                                                      *
! Calls:        None                                                   *
!                                                                      *
! Description:  Updates the emloyee's tax scale to '4R' or '4N'.       *
!                                                                      *
!***********************************************************************
begin-procedure Update-Tax-DTL

#ifdef debugy
        show 'Inside procedure Update-Tax-DTL'
#end-if

begin-SQL
INSERT INTO PS_GPAU_EE_TAX_DTL (EMPLID
,EFFDT
,PAY_ENTITY
,BALANCE_GRP_NUM
,GPAU_TAX_SCALE
,GPAU_PAYMENT_BASIS
,GPAU_FTB_REBATE
,GPAU_OTHER_REBATE
,GPAU_TOTAL_REBATE
,GPAU_CALC_MLA_YN
,GPAU_SPOUSE_YN
,GPAU_CMBND_INC_YN
,GPAU_NOOF_DPNDNTS
,GPAU_TAX_ADJ_TYP
,GPAU_TAX_ADJ_AMT
,GPAU_TAX_ADJ_PCT
,GPAU_HECS_YN
,GPAU_SFSS_YN

,GPAU_FL_YN
,GPAU_FL_ADJ_IND
,GPAU_FL_OVRD_PCT

,GPAU_FL_OVRD_AMT
,GPAU_FL_ADDL_PCT
,GPAU_FL_ADDL_AMT 

,GPAU_CNTRCTR_YN
,GPAU_ABN
,GPAU_ABN_BRANCH
,GPAU_TFN_SIGNED_YN
,GPAU_TFN_SIGNED_DT
,GPAU_PAYG_ADJ_IND
,GPAU_PAYG_OVRD_PCT
,GPAU_PAYG_OVRD_AMT
,GPAU_PAYG_ADDL_PCT
,GPAU_PAYG_ADDL_AMT
,GPAU_ANNL_ADJ_IND
,GPAU_ANNL_OVRD_PCT
,GPAU_ANNL_OVRD_AMT
,GPAU_ANNL_ADDL_PCT
,GPAU_ANNL_ADDL_AMT
,GPAU_HECS_ADJ_IND
,GPAU_HECS_OVRD_PCT
,GPAU_HECS_OVRD_AMT
,GPAU_HECS_ADDL_PCT
,GPAU_HECS_ADDL_AMT
,GPAU_SFSS_ADJ_IND
,GPAU_SFSS_OVRD_PCT
,GPAU_SFSS_OVRD_AMT
,GPAU_SFSS_ADDL_PCT
,GPAU_SFSS_ADDL_AMT)

VALUES (
&EETXTFN.EMPLID
,$New_EffDt
,&EETXDTL.PAY_ENTITY
,&EETXDTL.BALANCE_GRP_NUM
,$New_Tax_Scale
,&EETXDTL.GPAU_PAYMENT_BASIS
,&EETXDTL.GPAU_FTB_REBATE
,&EETXDTL.GPAU_OTHER_REBATE
,&EETXDTL.GPAU_TOTAL_REBATE
,&EETXDTL.GPAU_CALC_MLA_YN
,&EETXDTL.GPAU_SPOUSE_YN
,&EETXDTL.GPAU_CMBND_INC_YN


,&EETXDTL.GPAU_NOOF_DPNDNTS
,&EETXDTL.GPAU_TAX_ADJ_TYP
,&EETXDTL.GPAU_TAX_ADJ_AMT
,&EETXDTL.GPAU_TAX_ADJ_PCT
,&EETXDTL.GPAU_HECS_YN
,&EETXDTL.GPAU_SFSS_YN

,&EETXDTL.GPAU_FL_YN


,&EETXDTL.GPAU_FL_ADJ_IND

,&EETXDTL.GPAU_FL_OVRD_PCT

,&EETXDTL.GPAU_FL_OVRD_AMT

,&EETXDTL.GPAU_FL_ADDL_PCT

,&EETXDTL.GPAU_FL_ADDL_AMT 


,&EETXDTL.GPAU_CNTRCTR_YN
,&EETXDTL.GPAU_ABN
,&EETXDTL.GPAU_ABN_BRANCH
,&EETXDTL.GPAU_TFN_SIGNED_YN
,&EETXDTL.GPAU_TFN_SIGNED_DT
,&EETXDTL.GPAU_PAYG_ADJ_IND
,&EETXDTL.GPAU_PAYG_OVRD_PCT
,&EETXDTL.GPAU_PAYG_OVRD_AMT
,&EETXDTL.GPAU_PAYG_ADDL_PCT
,&EETXDTL.GPAU_PAYG_ADDL_AMT
,&EETXDTL.GPAU_ANNL_ADJ_IND
,&EETXDTL.GPAU_ANNL_OVRD_PCT
,&EETXDTL.GPAU_ANNL_OVRD_AMT
,&EETXDTL.GPAU_ANNL_ADDL_PCT
,&EETXDTL.GPAU_ANNL_ADDL_AMT
,&EETXDTL.GPAU_HECS_ADJ_IND
,&EETXDTL.GPAU_HECS_OVRD_PCT
,&EETXDTL.GPAU_HECS_OVRD_AMT
,&EETXDTL.GPAU_HECS_ADDL_PCT
,&EETXDTL.GPAU_HECS_ADDL_AMT
,&EETXDTL.GPAU_SFSS_ADJ_IND
,&EETXDTL.GPAU_SFSS_OVRD_PCT
,&EETXDTL.GPAU_SFSS_OVRD_AMT
,&EETXDTL.GPAU_SFSS_ADDL_PCT
,&EETXDTL.GPAU_SFSS_ADDL_AMT
);

    #ifdef ORACLE
       COMMIT;
    #endif

end-SQL
end-procedure ! Update-Tax-DTL


!***********************************************************************
!                                                                      *
! Generate-Report                                                      *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Prints the details of the employee processed in this   *
!               program.                                               *
!                                                                      *
!***********************************************************************


begin-procedure Generate-Report


#ifdef debugy
    show 'Inside procedure Generate-Report'
#end-if


!***********************************************************************
!                                                                      *
! If beginning a new report section, do not print a section header and *
!   only one row of information on a page.  If this is the case, start *
!   a new page, then print the header & body.                          *
!                                                                      *
!***********************************************************************

    if #current-line + 6 > #Maxlines
        new-page
    end-if


        print $Emplid                 (+2,{Col_Emplid})
        print $Name                   (,{Col_EmplName})
        print $Pay_Entity             (,{Col_PayEntity})
        print $Balance_Grp_Num        (,{Col_BalGrpNum})
        print $TFN_Status             (,{Col_OldTFNStatus})
        print $TFN                    (,{Col_OldTFN})
        print $Tax_Scale              (,{Col_OldTaxScale})
        print $Xmpt_End_Dt            (,{Col_XmptEndDate})

    if $Auto_Update = 'Y'
        do Format-DateTime($New_Effdt, $New_Effdtp, {DEFDMY}, '', '')
        let $FieldName = 'GPAU_TFN_STATUS'
        let $FieldValue = $New_TFN_Status
        do Read-Translate-Table

        print $New_Effdtp             (,{Col_NewEffdt})
        print $New_Tax_Scale          (,{Col_NewTaxScale})
        print $New_TFN                (,{Col_NewTFN})
        print $XlatShortName          (,{Col_NewTFNStatus})
    end-if


end-procedure ! Generate-Report



!***********************************************************************
!                                                                      *
! Print-Heading-Labels                                                 *
!                                                                      *
!                                                                      *
! Called By:    Heading                                                *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Prints the details of the employee processed in this   *
!               program.                                               *
!                                                                      *
!***********************************************************************


begin-procedure Print-Heading-Labels


#ifdef debugy
    show 'Inside procedure Print-Heading-Labels'
#end-if

        graphic (+2, 2, 180) horz-line

        print $Emplid_lbl                 (+1,{Col_Emplid_lbl})
        print $Name_lbl                   (,{Col_Name_lbl})
        print $Pay_lbl                    (,{Col_Pay_lbl})
        print $Balance_lbl                (,{Col_Balance_lbl})
        print $TFN_lbl                    (,{Col_OldTFN1_lbl})
        print $Tax_lbl                    (,{Col_OldTax_lbl})
        print $TFN_lbl                    (,{Col_OldTFN2_lbl})
        print $Exempt_lbl                 (,{Col_Exempt_lbl})
        print $New_lbl                    (,{Col_New1_lbl})
        print $New_lbl                    (,{Col_New2_lbl})
        print $New_lbl                    (,{Col_New3_lbl})
        print $New_lbl                    (,{Col_New4_lbl})

        print $Entity_lbl                 (+1,{Col_Entity_lbl})
        print $Group_lbl                  (,{Col_Group_lbl})
        print $Status_lbl                 (,{Col_Status_lbl})
        print $Scale_lbl                  (,{Col_Scale_lbl})
        print $EndDt_lbl                  (,{Col_EndDt_lbl})
        print $EffDt_lbl                  (,{Col_Effdt_lbl})
        print $Scale_lbl                  (,{Col_NewScale_lbl})
        print $TFN_lbl                    (,{Col_NewTFN_lbl})
        print $Status_lbl                 (,{Col_NewStatus_lbl})

        print $Number_lbl                 (+1,{Col_Number_lbl})

        graphic (+1, 2, 180) horz-line

end-procedure ! Print-Heading-Labels



!***********************************************************************
!                                                                      *
! Delete-RunControl                                                    *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Delete run control when report comes to successful     *
!                   end.                                               *
!                                                                      *
!***********************************************************************


begin-procedure Delete-RunControl

#ifdef debugy
        show 'Inside procedure Delete-RunControl'
#end-if

begin-SQL

DELETE FROM PS_GPAU_RC_REPORTS
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif

end-SQL

end-procedure ! Delete-RunControl


!***********************************************************************
!                                                                      *
! Update-Nonresident-Tax-Scale                                         *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description: Updates tax Scale to 4N if Employee is with a tax Scale *
!              of 3 i.e Non resident and employees with other tax scale*
!              are updated with 4R.                                    *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
begin-procedure Update-Nonresident-Tax-Scale
Begin-Select
EETXDTL1.GPAU_TAX_SCALE   &EETXDTL1.GPAU_TAX_SCALE

         Let $OLD_GPAU_TAX_SCALE = rtrim(ltrim(&EETXDTL1.GPAU_TAX_SCALE, ' '), ' ')

         IF $OLD_GPAU_TAX_SCALE = '3'
            let $New_Tax_Scale = '4N'
              else
            let $New_Tax_Scale = '4R'
         End-If

    FROM PS_GPAU_EE_TAX_DTL  EETXDTL1
    WHERE EETXDTL1.EMPLID = $Emplid
          AND EETXDTL1.EFFDT  = $TFN_Effdt
End-Select
end-procedure  !Update-Nonresident-Tax-Scale

!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
! SQCS included in the report                                          *
!                                                                      *
!***********************************************************************

#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset.sqc'        ! Reset printer procedure



