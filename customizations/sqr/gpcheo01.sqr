!***********************************************************************
!  GPCHEO01.SQR:  EO Statement - Sondermeldekarte                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:25:33                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'

begin-setup
create-array name=Accum size=1

field=arr1:char
field=arr2:char
field=arr3:number
field=arr4:char
field=arr5:char
field=arr6:number
field=arr7:char
field=arr8:char
field=arr9:char
field=arr10:char
field=arr11:char
field=arr12:char
field=arr13:number
field=arr14:char
field=arr15:char
field=arr16:char

field=arr17:char
field=arr18:char
field=arr19:char
field=arr20:char
field=arr21:char
field=arr22:char
field=arr23:number
field=arr24:char
field=arr25:number
field=arr26:char
field=arr27:number
field=arr28:number
field=arr29:number
field=arr30:number
field=arr31:number
field=arr32:number
field=arr33:number
field=arr34:char
field=arr35:char
field=arr36:char
field=arr37:char
field=arr38:char

declare-layout report1
orientation  = LANDSCAPE
line-height  = 9.5
char-width   = 4.32
left-margin  = .05
right-margin = .05
end-declare

declare-layout report2
orientation  = PORTRAIT
line-height  = 9
char-width   = 4.32
left-margin  = .05
right-margin = .25

end-declare

!----------------------------------------------------------------------
declare-report report1
layout = report1
end-declare

declare-report report2
layout = report2
end-declare

end-setup

#define col1   1    !AHV        
#define col2   18   !Pers.Nr
#define col3   32   !Name       
#define col3CH  52   !Korrektur 
#define col3C  60   !Korrektur  
#define col31  63   !Card Type  
#define col32  65               
#define col4H  73   !Dienstart  
#define col4   75   !Dienstart  
#define col41H  83  !Account    
#define col41   80   !Account   
#define col42   92  !control No 
#define col5   106  !Zivilstand 
#define col5H   99   !Zivilstand
#define col6H   113   !Kinder   
#define col6   113   !Kinder    
#define col7H   122   !Von      
#define col7H_1 134  !Bis       
#define col7   122   !Von       
#define col7_1 134  !Bis        
#define col8   142  !Jahressalär
#define col9   152 !Tage       
#define col10  156  !Pro Tag    
#define col11  166  !Total  

#define cole0   10
#define cole1   28
#define cole2   59
#define cole3   74
#define cole4   86
#define DatFileNum 2
#define cole31   50
!********************************************************************************
begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Init-File
  do Process-Main
  do End-File
  do Stdapi-Term
  do Get-Log
end-Program
!********************************************************************************
!-----------------------------------------------------------------------------------!
! Define the the value of Test-Code field for Interface in the define-section below.!
! Make sure there is only one value defined at the same time.                       !
!-----------------------------------------------------------------------------------!
#define TEST ' '
!#define TEST 'TEST'
!*******************************************************************
begin-procedure Init-Report

  do Stdapi-Init

  if $prcs_process_instance = ''
     do Ask-Input
  else
     do Get-Report-Parameters
  end-if
  !-----------------------------------------------------------------------
  #ifdef ORACLE
      let $Sort_Plat = 'TO_CHAR(PBD.BEGIN_DT,''YYYY''),'
   #else
      #ifdef SYBASE
      let $Sort_Plat = 'DATEPART(YEAR,PBD.BEGIN_DT),'
      #else
      let $Sort_Plat = 'YEAR(PBD.BEGIN_DT),'
      #end-if
   #end-if


   Evaluate $Run_Cntl_Sort
    when = 'A'
    let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PBD.NATIONAL_ID,PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
    break
    when = 'N'
    let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
    break
    when = 'E'
    let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PBD.EMPLID,PD.NAME,PBD.BEGIN_DT,PBD.EMPL_RCD'
    break
    when-other
    let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
    break
   End-Evaluate

   #debug show $Run_Sort
  !-----------------------------------------------------------------------
  move 'GPCHEO01' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHTX02')
  do Append_Report_Translation ('GPCHGLOB')
  do Append_Report_Translation ('GPCHSI08')
  do Append_Report_Translation ('GPCHBK02')
  do Append_Report_Translation ('GPCHAL04')

  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHTX02', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHSI08', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHBK02', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHAL04', $language_cd)
  do Report-Translation

  let $ReportTitle = $TITLE1 || ' '
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle
  let #Date_Type= {DateType}

  if $Ctl_Curr_Pay_End_Dt <> ''
    do Get_Beg_Mnth($Ctl_Curr_Pay_End_Dt,$ReportBeginDate)
    do Get_End_Mnth($Ctl_Curr_Pay_End_Dt,$ReportEndDate)
  end-if

  if $ReportEndDate <> ''

      do ConvertToComponents($ReportEndDate  ,$yy11      ,$mm11   ,$dd11)
      do ConvertToComponents($ReportBeginDate,$yy10      ,$mm10   ,$dd10)
      do Format-DateTime    ($ReportBeginDate,$Ctl_B_Date,{DEFCMP},'','')
      do Format-DateTime    ($ReportEndDate  ,$Ctl_E_Date,{DEFCMP},'','')

      evaluate #Date_Type
        when = 1
             let $from_to_format = $dd10 || '{PTDateDelim}' ||
                 $mm10 || '{PTDateDelim}' || ' - ' || $dd11 ||
                 '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $yy11
        break
        when = 2
             let $from_to_format = $mm10 || '{PTDateDelim}'
                 || $dd10 || '{PTDateDelim}' || ' - ' || $yy11
                 || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $dd11
        break
        when-other
             let $from_to_format = $mm10 || '{PTDateDelim}'
                 || $dd10 || '{PTDateDelim}' || ' - ' || $mm11
                 || '{PTDateDelim}' || $dd11 || '{PTDateDelim}' || $yy11
        break
      end-evaluate

  end-if

      do Get-Output-Directory('GPCHEO01',$Output_Directory,$prcs_no)
  !-----------------------------------------------------------------------
      let $reportdir1 = $Output_Directory || 'GPCHEOT1_' || $prcs_no  ! oracle / Mss

      #ifdef MVS
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir1 = $path || 'GPCHEO01(GPCHEOT1)'
      #end-if

      #ifdef OS390
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir1 = $path || 'GPCHEO01(GPCHEOT1)'

      #end-if

      #ifdef OS400
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir1 = $path || 'GPCHEO01(GPCHEOT1)'
      #end-if

      Use-Report report1
      New-report $reportdir1
  !-----------------------------------------------------------------------
      alter-printer
      point-size=7.2

      let $reportdir2 = $Output_Directory || 'GPCHEOT2_' || $prcs_no  ! oracle / Mss

      #ifdef MVS
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir2 = $path || 'GPCHEO01(GPCHEOT2)'
      #end-if

      #ifdef OS390
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir2 = $path || 'GPCHEO01(GPCHEOT2)'

      #end-if

      #ifdef OS400
      let #pos  = instr($sqr-report,'GPCHEO01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdir2 = $path || 'GPCHEO01(GPCHEOT2)'
      #end-if

      Use-Report report2
      New-report $reportdir2



end-procedure
!****************************************************************************************
Begin-procedure Ask-Input

   input $Ctl_Curr_Pay_End_Dt   'Current Pay End Date '  type=date
   input $Ctl_PayEntity         'Pay Entity'             type=char      maxlen=10
   input $language_cd           'Language'               type=char      maxlen=3

   let $crit.company  = ''
   let $Ctl_PayEntity = rtrim(ltrim($Ctl_PayEntity,' '),' ')
       uppercase $Ctl_PayEntity
   if $Ctl_PayEntity <> ''
      let $crit.company = ' AND PBD.PAY_ENTITY = ' || '''' || $Ctl_PayEntity || ''''
   end-if

End-procedure
!****************************************************************************************
begin-procedure Get-Values

   let $Ctl_PayEntity  = RTRIM(&GPCH_RUN_CNTL.PAY_ENTITY,' ')
   let $language_cd    = $PRCS_LANGUAGE_CD
   let $Run_Cntl_Sort  = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_EO_SRT,' ')

end-procedure
!****************************************************************************************
begin-procedure Report-Translation

   do Get_Field_Information ('GPCHEO01', 'TITLE1',                    $TITLE1,#CW)
   do Get_Field_Information ('GPCHEO01', 'PAGE_NO_LBL',              $Page_No,#CW)
   do Get_Field_Information ('GPCHEO01', 'RUN_DATE_LBL',            $Run_Date,#CW)
   do Get_Field_Information ('GPCHEO01', 'RUN_TIME_LBL',           $Run_TimeT,#CW)
   do Get_Field_Information ('GPCHEO01', 'REPORT_LBL',            $Report_IDT,#CW)
   do Get_Field_Information ('GPCHEO01', 'AHV_LBL',                  $AHV_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'NNSS_LBL',                $NNSS_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'BIRTH',                $BIRTH_LBL,#CW)

   do Get_Field_Information ('GPCHEO01', 'EMPL_LBL',                $EMPL_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'NAME_LBL',                $NAME_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'SERVICE_LBL',              $SERVICE,#CW)
   do Get_Field_Information ('GPCHEO01', 'CHILDREN_LBL',        $CHILDREN_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'DAYS_DIFF_LBL',      $DAYS_DIFF_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'YEAR_SAL_LBL',        $Year_Sal_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'PRO_DAY_LBL',          $Pro_Day_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'ZIVIL_STAT_LBL',    $ZIVIL_STAT_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'FROM_LBL',                $FROM_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'TO_LBL',                    $TO_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'TOTAL_LBL',              $TOTAL_LBL,#CW)
   do Get_Field_Information ('GPCHEO01', 'EO_RESTITUTION_LBL',$EO_RESTITUTION_LBL,#CW)
   do Get_Field_Information ('GPCHTX02', 'FROM_STR',                $FROM_STR,#CW)
   do Get_Field_Information ('GPCHGLOB', 'TOTAL',                  $TOTAL_STR,#CW)
   do Get_Field_Information ('GPCHEO01', 'CARD_TYPE',              $CARD_TYPE,#CW)
   do Get_Field_Information ('GPCHEO01', 'CONTR_REFUND',        $CONTR_REFUND,#CW)
   do Get_Field_Information ('GPCHEO01', 'TOTAL_REFUND',        $TOTAL_REFUND,#CW)
   do Get_Field_Information ('GPCHEO01', 'ACCOUNT',        $HD_ACCOUNT,#CW)
   do Get_Field_Information ('GPCHEO01', 'CONTROL_NBR',        $HD_CONTROL_NBR,#CW)
   do Get_Field_Information ('GPCHAL04', 'CORRECTION2_STR',  $CORRECTION2_STR,#CW)
   do Get_Field_Information ('GPCHGLOB', 'HD_FOR',          $HD_FOR          ,#CW)


   do Strings_Pads($Year_Sal_LBL,$Year_Sal_LBL,13)
   do Strings_Pads($DAYS_DIFF_LBL,$DAYS_DIFF_LBL,9)
   do Strings_Pads($TOTAL_LBL,$TOTAL_LBL,14)
   do Strings_Pads($Pro_Day_LBL,$Pro_Day_LBL,14)

   do Get_Field_Information ('GPCHBK02', 'TITLE_STR',       $TITLE_STR_TICKET,#DW)
   do Get_Field_Information ('GPCHEO01', 'ERROR_LIST_STR',  $TITLE_STR_ERR,   #DW)
   do Get_Field_Information ('GPCHEO01', 'ERROR_DESCR_STR', $ERROR_DESCR_STR, #DW)
   do Get_Field_Information ('GPCHEO01', 'RECORD_COUNT_STR',$RECORD_COUNT_STR,#DW)
   do Get_Field_Information ('GPCHEO01', 'FILE_DIR_STR',    $FILE_DIR_STR,    #DW)
   do Get_Field_Information ('GPCHEO01', 'EMPL_COUNT_STR',  $EMPL_COUNT_STR,  #DW)
   do Get_Field_Information ('GPCHEO01', 'TOTAL_REFUND_STR',$TOTAL_REFUND_STR,#DW)
   do Get_Field_Information ('GPCHEO01', 'AHV_COUNT_STR',   $AHV_COUNT_STR,   #DW)
   do Get_Field_Information ('GPCHEO01', 'RATES_COUNT_STR', $RATES_COUNT_STR, #DW)
   do Get_Field_Information ('GPCHEO01', 'DEPT_COUNT_STR',  $DEPT_COUNT_STR,  #DW)

   do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',     $LG_RUNCTLPA,     #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',        $LG_VALUE,        #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',       $LG_REPLOG,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',      $LG_LOGITEM,      #CW)
   do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',        $LG_PINNM,        #CW)
   do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT,       #CW)
   do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',       $HD_TODATE,       #CW)

end-procedure
!***********************************************************************************************
begin-procedure Get-Yearly-EO-Percent
#Debug Show '-> Get-Yearly-EO-Percent  '

create-array name=eopercent size=50
  field=year:char
  field=percent:number

  let #perdsgn = 0

Begin-Select
A.DATA_KEY1_DT
A.DATA_VAL1_DEC

  do ConvertToComponents(&A.DATA_KEY1_DT,$eo_yy,$eo_mm,$eo_dd)
  let #Eo_percent = &A.DATA_VAL1_DEC

  put  $eo_yy     INTO eopercent(#perdsgn) year
  put #Eo_percent INTO eopercent(#perdsgn) percent

  let #perdsgn = #perdsgn + 1

FROM PS_GP_PIN B, PS_GP_BRACKET_DTL A
WHERE B.PIN_NUM = A.PIN_NUM
AND   B.PIN_NM = 'CH_EO_BR001'
ORDER BY A.DATA_KEY1_DT
End-Select

#Debug Show '<- Get-Yearly-EO-Percent '
end-procedure Get-Yearly-EO-Percent

!*************************************************************************
begin-procedure Process-Main
#Debug Show '-> Process-Main ' $Ctl_B_Date  ' , '  $Ctl_E_Date

   do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)

   if $Cal_Run_Id_M_String      <> ''
      let $Cal_Run_Id_Crit_TX02_1   = ' AND CRET.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
   else
      let $Cal_Run_Id_Crit_TX02_1   = ' '
   end-if

   do Get-Company-Address($Ctl_PayEntity,$ReportEndDate,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

   do Get_Fak_Tax_Data('NA',$Ctl_PayEntity,$ReportEndDate,
                        $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                        $Tax_Language,$Employer_StaxNr,#Staxb_PCTR,
                        #Employer_SI_Pct,$AHV_MBR_ID,$AusglKasse,
                        $SI_KTG_MBR_ID,#SI_AHV_ADM_PC,#SI_TOT_AHV_PC,
                        #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

   do Get-Yearly-EO-Percent

   let $ItExistedData = 'N'
   let #Days_Diff_Sum = 0
   let #Amount5_Sum   = 0
   let $Corr          = ' '
   let $OutOfStmt     = 'Y'
   let $First_Print   = 'Y'


Begin-select
RP001.BIRTHDATE
PBD.EMPLID
PBD.CAL_RUN_ID
PBD.EMPL_RCD
PBD.GP_PAYGROUP
PBD.CAL_ID
PBD.RSLT_SEG_NUM
PBD.SLICE_END_DT
PBD.PAY_ENTITY
PBD.COMPANY
PBD.PRD_END_DT
PBD.GPCH_AL_CPAY_ENDDT
PBD.GPCH_RP_YEAR
PBD.SEQ_NO
PBD.GPCH_EO_MBR_ID
PBD.NATIONAL_ID
PBD.GPCH_AH_NNSS
PBD.ACCOUNT
PBD.CONTROL_NUMBER
PBD.GPCH_EO_CARD_TYPE
PBD.GPCH_EO_SERV_TYPE
PBD.BEGIN_DT
PBD.END_DT
PBD.DAYS_DIFF
PBD.TYPE_KK
PBD.GPCH_EO_AVERAGE_AM
PBD.SINGLE_CHECK
PBD.DEP_BENEF_CNT
PBD.GPCH_RP_AMOUNT1
PBD.GPCH_RP_AMOUNT2
PBD.GPCH_RP_AMOUNT3
PBD.GPCH_RP_AMOUNT4
PBD.GPCH_RP_AMOUNT5
PBD.GPCH_RP_AMOUNT6
PBD.SIGN_POS_IND
PBD.STATUS
PBD.GPCH_RP_CHAR01
PBD.GPCH_RP_CHAR02
PBD.GPCH_RP_CHAR03


  if ($Empl_ID <> rtrim(&PBD.EMPLID,' ') or #Empl_RCD <> &PBD.EMPL_RCD) and
     ($OutOfStmt = 'N')
     do check_Retro
  end-if

  let $Empl_ID               =  rtrim(&PBD.EMPLID,' ')
  let $Cal_RunID             =  rtrim(&PBD.CAL_RUN_ID,' ')
  let #Empl_RCD              =  &PBD.EMPL_RCD
  let $GP_Pay_Gr             =  rtrim(&PBD.GP_PAYGROUP,' ')
  let $Cal_ID                =  rtrim(&PBD.CAL_ID,' ')
  let #Rslt_Seg_Nr           =  &PBD.RSLT_SEG_NUM
  let $Slice_End_DT          =  &PBD.SLICE_END_DT
  let $Pay_Entity            =  rtrim(&PBD.PAY_ENTITY,' ')
  let $Company               =  rtrim(&PBD.COMPANY,' ')
  let $PRD_E_DT              =  &PBD.PRD_END_DT
  let $Cpay_E_DT             =  &PBD.GPCH_AL_CPAY_ENDDT
  let $RP_Year               =  &PBD.GPCH_RP_YEAR
  let #Sequence              =  &PBD.SEQ_NO
  let $EO_Mbr_Id             =  rtrim(&PBD.GPCH_EO_MBR_ID,' ')
  let $National_Id           =  rtrim(&PBD.NATIONAL_ID,' ')
  let $NNSS_Id               =  rtrim(&PBD.GPCH_AH_NNSS,' ')

 show '$NNSS_Id -- > ' $NNSS_Id

  let $Account               =  rtrim(&PBD.ACCOUNT,' ')
  let $Control_Nr            =  rtrim(&PBD.CONTROL_NUMBER,' ')
  let $EO_Card_Type          =  rtrim(&PBD.GPCH_EO_CARD_TYPE,' ')
  let $EO_Serv_Type          =  rtrim(&PBD.GPCH_EO_SERV_TYPE,' ')
  let $B_DT                  =  &PBD.BEGIN_DT
  let $E_DT                  =  &PBD.END_DT
  let #Days_Diff             =  &PBD.DAYS_DIFF
  let $Type_KK               =  rtrim(&PBD.TYPE_KK,' ')
  let #Average_AM            =  &PBD.GPCH_EO_AVERAGE_AM
  let $Single_Check          =  rtrim(&PBD.SINGLE_CHECK,' ')
  let #Benef_Cnt             =  &PBD.DEP_BENEF_CNT
  let #Amount1               =  &PBD.GPCH_RP_AMOUNT1
  let #Amount2               =  &PBD.GPCH_RP_AMOUNT2
  let #Amount3               =  &PBD.GPCH_RP_AMOUNT3
  let #Amount4               =  &PBD.GPCH_RP_AMOUNT4
  let #Amount5               =  &PBD.GPCH_RP_AMOUNT5
  let #Amount6               =  &PBD.GPCH_RP_AMOUNT6
  let $Sign_Pos_Ind          =  rtrim(&PBD.SIGN_POS_IND,' ')
  let $Stat                  =  rtrim(&PBD.STATUS,' ')
  let $CHAR02                =  rtrim(&PBD.GPCH_RP_CHAR02,' ')
  let $CHAR03                =  rtrim(&PBD.GPCH_RP_CHAR03,' ')
  let $birth_dt = &RP001.BIRTHDATE
  
  do Format-DateTime($birth_dt, $birth_dt_print, {DEFDATE}, '', '')

  do ConvertToComponents(&PBD.BEGIN_DT,$bdt_yy,$bdt_mm,$bdt_dd)

  do Check_Percent_Variable

  #Debug Show 'Mel ' #Old_eo_percent ' , ' #eo_percent ' , ' $Empl_ID ' , '  $B_DT
  if  #Old_eo_percent <> #eo_percent
                do Print_Sub_Total
!FMB Page break per %
   if  #Old_eo_percent <> 0.00 and $First_Print = 'N'
         NEW-Page
   End-if
  end-if


  do Get-Emp-Address($Empl_ID,$ReportEndDate,'HOME',$EMP_ADDLINE1,$EMP_ADDLINE2,$EMP_ADDLINE3,$EMP_$ADDLINE31,
                      $EMP_ADDLINE4,$EMP_ADDLINE5,$EMP_ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX,
                      $NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$EMP_Phone,$EMP_Email,$EMP_CITY,
                      $EMP_STATE,$EMP_POSTAL)

  let $Empl_Name             =  rtrim($Full_Name,' ')
  let $CHAR01                =  rtrim(&PBD.GPCH_RP_CHAR01,' ')

  let $Nat_ID = rtrim(ltrim(&PBD.NATIONAL_ID,' '),' ')
  if $Nat_ID <> ''
     let $Nat_ID= edit($Nat_ID,'XXX.XX.XXX.XXX')

  end-if
  let $Nat_ID_print = $Nat_ID

  let $NNSS_Id = rtrim(ltrim(&PBD.GPCH_AH_NNSS,' '),' ')
  if $NNSS_Id <> ''
   !  let $NNSS_Id= edit($NNSS_Id,'XXX.XXXX.XXXXX.XX')

      let $NNSS_Id= substr($NNSS_Id,1,3)||'.'||
                       substr($NNSS_Id,4,4)||'.'||
                       substr($NNSS_Id,8,4)||'.'||
                       substr($NNSS_Id,12,2)
     let $Nat_ID_print = $NNSS_Id
  end-if

  do Format-DateTime($Cpay_E_DT,$Cpay_E_Date1,{DEFCMP},'','')
  do Format-DateTime($PRD_E_DT ,$PRD_E_Date1 ,{DEFCMP},'','')

! uc  let $Birth_Date = &PBD.BIRTHDATE
! uc  do Format-DateTime($Birth_Date, $Birth_Date_print, {DEFDATE}, '', '')
  
  if ($PRD_E_Date1 >= $Ctl_B_Date) and ($PRD_E_Date1 <= $Ctl_E_Date)
        let $First_Print    = 'N'
      do Print_Data
  end-if


  let #Old_eo_percent = #eo_percent
  let $Old_bdt_yy     = $bdt_yy
  let $ItExistedData  = 'Y'
  let $OutOfStmt      = 'N'

FROM PS_GPCH_RP_EO01 PBD, PS_GPCH_RP_0001 RP001,{Record_Names} PD
WHERE PBD.EMPLID              = PD.EMPLID
AND   PBD.PAY_ENTITY          = $Ctl_PayEntity 
AND PBD.EMPLID = RP001.EMPLID 
AND PBD.CAL_RUN_ID =  RP001.CAL_RUN_ID 
AND PBD.EMPL_RCD = RP001.EMPL_RCD 
AND PBD.GP_PAYGROUP = RP001.GP_PAYGROUP 
AND PBD.CAL_ID = RP001.CAL_ID 
AND PBD.RSLT_SEG_NUM = RP001.RSLT_SEG_NUM 
AND PBD.ORIG_CAL_RUN_ID = RP001.ORIG_CAL_RUN_ID
!FMB Begin change of Main select
AND
!FMB all recalcs
( PBD.GPCH_AL_CPAY_ENDDT = $ReportEndDate
!FMB or to be reversed in this run
or
( PBD.GPCH_AL_CPAY_ENDDT < $ReportEndDate

AND   PBD.GPCH_AL_CPAY_ENDDT  = (SELECT MAX(PBD1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_EO01 PBD1
                                  WHERE PBD1.EMPLID              = PBD.EMPLID
                                  AND   PBD1.EMPL_RCD            = PBD.EMPL_RCD
                                  AND   PBD1.CAL_ID              = PBD.CAL_ID
                                  AND   PBD1.PAY_ENTITY          = $Ctl_PayEntity
                                  AND   PBD1.GPCH_AL_CPAY_ENDDT <= $ReportEndDate )
AND   PBD.GPCH_AL_CPAY_ENDDT  = (SELECT MAX(RP1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_0001 RP1
                                  WHERE PBD.EMPLID              = RP1.EMPLID
                                  AND   PBD.CAL_ID              = RP1.CAL_ID
                                  AND   PBD.EMPL_RCD            = RP1.EMPL_RCD
                                  AND   PBD.GP_PAYGROUP         = RP1.GP_PAYGROUP
                                  AND   RP1.GPCH_AL_CPAY_ENDDT  < $ReportEndDate ) ) )
 
!FMB End change of Main select
{Record_Names_Sub}
[$Run_Sort]
End-select

   if $OutOfStmt = 'N'
      do check_Retro
   end-if

   do Print_Sub_Total


#Debug Show '<- Process-Main '
end-procedure
!********************************************************************************
Begin-procedure Check_Percent_Variable
#Debug Show '-> Check_Percent_Variable '
    Use-Report report1
     let #pi = 0

       While #pi < #perdsgn

            get $eo_year     from eopercent(#pi)year



            if  $eo_year <= $bdt_yy

                get #eo_percent1 from eopercent(#pi)percent
                let #eo_percent = #eo_percent1
            end-if

            Add 1 to #pi

       End-While

       #Debug Show 'Eo Percent ' $eo_year ' , '  #eo_percent

#Debug Show '<- Check_Percent_Variable '
end-procedure
!********************************************************************************

Begin-procedure Print_Sub_Total
#Debug Show '-> Print_Sub_Total '
! FMB don't print subtotal if no refund for that %
   if #Amount5_Sum = 0
       goto    End_Print_Sub_Total
   end-if

   if $ItExistedData = 'Y'
       alter-printer
       point-size=7.2

       do format-number(#Days_Diff_Sum, $Days_Diff_Sum1, '99,999.99')
       do format-number(#Amount5_Sum  , $Amount5_Sum1  , '999,999,999.99')
!FMB substitue $TOTAL_STR by $TOTAL_LBL
       Use-Report report1
       print '_'                 (+2,1,180)        fill
!       print $TOTAL_STR          (+1,{col1})       bold
       print $TOTAL_LBL          (+1,{col1})       bold
       print $Days_Diff_Sum1     (,{col9})         bold
       print $Amount5_Sum1       (,{col11})        bold

       let #Contr_Refund = #Amount5_Sum * (#eo_percent / 100)
!FMB substitute/override #eo_percent by #old_eo_percent
       let #Contr_Refund = #Amount5_Sum * (#old_eo_percent / 100)
       !Runden auf 5 Rappen
       let #Contr_Refund = round(#Contr_Refund,2)
       let #Contr_Refund = #Contr_Refund * 20
       let #Contr_Refund = round(#Contr_Refund,0)
       let #Contr_Refund = #Contr_Refund / 20

       do format-number(#Contr_Refund, $Contr_Refund1, '999,999,999.99')
       let #Total_Refund = #Amount5_Sum + #Contr_Refund
       do format-number(#Total_Refund, $Total_Refund1, '999,999,999.99')

       do format-number(#old_eo_percent, $eo_perc, '9.99')

       let $CONTR_REFUND_H = $CONTR_REFUND || ' ' || $eo_perc || ' %'

       print $CONTR_REFUND_H  (+2,{col8})  bold
       print $Contr_Refund1   (,{col11})   bold
       print $TOTAL_REFUND    (+2,{col8})  bold
       print $Total_Refund1   (,{col11})   bold

       alter-printer
       point-size=7.2

   end-if

   let #Grand_Sum   = #Grand_Sum   + #Amount5_Sum
   let #Grand_total = #Grand_total + #Total_Refund
   do format-number(#Grand_total, $Grand_total, '999,999,999.99')
   let #Amount5_Sum = 0


  print $TOTAL_STR      (+4,{col8})  bold
  print $Grand_total     (,{col11})   bold


 End_Print_Sub_Total:



#Debug Show '<- Print_Sub_Total '
end-procedure Print_Sub_Total
!********************************************************************************

Begin-procedure Check_Exist_Retro
#Debug Show '-> Check_Exist_Retro '

   let $Exist_Ret = 'N'

Begin-select distinct
#ifdef ORACLE
/*+ INDEX(CRET PS_GPCH_RP_0001)*/
#endif
CRET.EMPLID
   let $Exist_Ret = 'Y'
FROM  PS_GPCH_RP_0001 CRET
WHERE CRET.PAY_ENTITY         = $Ctl_PayEntity
AND   CRET.EMPLID             = $Empl_ID
AND   CRET.EMPL_RCD           = #Empl_RCD
AND   CRET.GPCH_AL_CPAY_ENDDT = $ReportEndDate
AND   CRET.PRD_END_DT         = $PRD_E_DT_tmp
[$Cal_Run_Id_Crit_TX02_1]
end-select

#Debug Show '<- Check_Exist_Retro '
end-procedure
!********************************************************************************
begin-procedure Check_Retro !Print Actual Retro data
#Debug Show '-> Check_Retro '

let #bdt_yy = $bdt_yy

    Use-Report report1

   let $PRD_E_DT_tmp     = ''
   let $PRD_tmp_mm_Old   = ''
   let $PRD_tmp_yy       = ''
   let $PRD_tmp_mm       = ''
   let $PRD_tpm_dd       = ''
   let $BgDt             = ''
   let $BgDt_Old         = ''
   let $PRD_E_DT_tmp_Old = ''
   let $SliceEndDate     = ''
   let $SliceEndDate_Old = ''

Begin-select distinct
TX02_1.PRD_END_DT
TX02_1.BEGIN_DT
TX02_1.SLICE_END_DT

  let $PRD_E_DT_tmp    = rtrim(&TX02_1.PRD_END_DT  ,' ')
  let $BgDt            = rtrim(&TX02_1.BEGIN_DT    ,' ')
  let $SliceEndDate    = rtrim(&TX02_1.SLICE_END_DT,' ')

  do ConvertToComponents($PRD_E_DT_tmp,$PRD_tmp_yy,$PRD_tmp_mm,$PRD_tpm_dd)

  do Get_End_Mnth($PRD_E_DT_tmp,$PRD_E_DT_tmp_out)
  do Get_Beg_Mnth($PRD_E_DT_tmp,$PRD_B_DT_tmp_out)

  if $PRD_E_DT_tmp <> $PRD_E_DT_tmp_Old
     do Check_Exist_Retro
  end-if

  if $Exist_Ret = 'Y'
     do check_Retro_Periode
  end-if

  let $PRD_tmp_mm_Old   = $PRD_tmp_mm
  let $BgDt_Old         = $BgDt
  let $PRD_E_DT_tmp_Old = $PRD_E_DT_tmp
  let $SliceEndDate_Old = $SliceEndDate

from PS_GPCH_RP_EO01 TX02_1
where TX02_1.PAY_ENTITY          = $Ctl_PayEntity
AND   TX02_1.EMPLID              = $Empl_ID
AND   TX02_1.EMPL_RCD            = #Empl_RCD
AND   TX02_1.GPCH_AL_CPAY_ENDDT <= $ReportEndDate
AND   TX02_1.PRD_END_DT          < $ReportBeginDate

!FMB subselect begin
AND   TX02_1.GPCH_AL_CPAY_ENDDT = ( select max(RP1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 RP1
 where  RP1.GPCH_AL_CPAY_ENDDT <= $ReportEndDate !Modified from < to <=
 and RP1.EMPLID = TX02_1.EMPLID 
 and RP1.EMPL_RCD = TX02_1.EMPL_RCD
 and RP1.GP_PAYGROUP = TX02_1.GP_PAYGROUP
 and RP1.CAL_ID = TX02_1.CAL_ID )
!FMB subselect end

!FMB restrict current year
    #ifdef ORACLE
      and TO_CHAR(TX02_1.BEGIN_DT,'YYYY') = $bdt_yy
    #else
      #ifdef SYBASE
      and DATEPART(YEAR,TX02_1.BEGIN_DT) = $bdt_yy
      #else
        and YEAR(TX02_1.BEGIN_DT) = #bdt_yy
      #end-if
    #end-if
GROUP BY TX02_1.PRD_END_DT,TX02_1.SLICE_END_DT,TX02_1.BEGIN_DT
ORDER BY TX02_1.PRD_END_DT desc,TX02_1.SLICE_END_DT,TX02_1.BEGIN_DT
End-select

#Debug Show '<- Check_Retro '
end-procedure
!*************************************************************************************************
Begin-procedure Check_Retro_Periode !Check Retro
#Debug Show '-> Check_Retro_Periode '
  Use-Report report1
  let #merke_exist                 =  0
  let $Empl_ID_tmp_1               =  ''
  let $Cal_RunID_tmp_1             =  ''
  let #Empl_RCD_tmp_1              =  0
  let $GP_Pay_Gr_tmp_1             =  ''
  let $Cal_ID_tmp_1                =  ''
  let #Rslt_Seg_Nr_tmp_1           =  0
  let $Slice_End_DT_tmp_1          =  ''
  let $Pay_Entity_tmp_1            =  ''
  let $Company_tmp_1               =  ''
  let $PRD_E_DT_tmp_1              =  ''
  let $Cpay_E_DT_tmp_1             =  ''
  let $RP_Year_tmp_1               =  ''
  let #Sequence_tmp_1              =  0
  let $EO_Mbr_Id_tmp_1             =  ''
  let $National_Id_tmp_1           =  ''
  let $NNSS_Id_tmp_1               =  ''

  let $Account_tmp_1               =  ''
  let $Control_Nr_tmp_1            =  ''
  let $EO_Card_Type_tmp_1          =  ''
  let $EO_Serv_Type_tmp_1          =  ''
  let $B_DT_tmp_1                  =  ''
  let $E_DT_tmp_1                  =  ''
  let #Days_Diff_tmp_1             =  0
  let $Type_KK_tmp_1               =  ''
  let #Average_AM_tmp_1            =  0
  let $Single_Check_tmp_1          =  ''
  let #Benef_Cnt_tmp_1             =  0
  let #Amount1_tmp_1               =  0
  let #Amount2_tmp_1               =  0
  let #Amount3_tmp_1               =  0
  let #Amount4_tmp_1               =  0
  let #Amount5_tmp_1               =  0
  let #Amount6_tmp_1               =  0
  let $Sign_Pos_Ind_tmp_1          =  ''
  let $Stat_tmp_1                  = ''
  let $CHAR01_tmp_1                = ''

  let $Empl_ID_tmp_1_Old           =  ''
  let $Cal_RunID_tmp_1_Old         =  ''
  let #Empl_RCD_tmp_1_Old          =  0
  let $GP_Pay_Gr_tmp_1_Old         =  ''
  let $Cal_ID_tmp_1_Old            =  ''
  let #Rslt_Seg_Nr_tmp_1_Old       =  0
  let $Slice_End_DT_tmp_1_Old      =  ''
  let $Pay_Entity_tmp_1_Old        =  ''
  let $Company_tmp_1_Old           =  ''
  let $PRD_E_DT_tmp_1_Old          =  ''
  let $Cpay_E_DT_tmp_1_Old         =  ''
  let $RP_Year_tmp_1_Old           =  ''
  let #Sequence_tmp_1_Old          =  0
  let $EO_Mbr_Id_tmp_1_Old         =  ''
  let $National_Id_tmp_1_Old       =  ''
  let $NNSS_Id_tmp_1_Old           =  ''
  let $Account_tmp_1_Old           =  ''
  let $Control_Nr_tmp_1_Old        =  ''
  let $EO_Card_Type_tmp_1_Old      =  ''
  let $EO_Serv_Type_tmp_1_Old      =  ''
  let $B_DT_tmp_1_Old              =  ''
  let $E_DT_tmp_1_Old              =  ''
  let #Days_Diff_tmp_1_Old         =  0
  let $Type_KK_tmp_1_Old           =  ''
  let #Average_AM_tmp_1_Old        =  0
  let $Single_Check_tmp_1_Old      =  ''
  let #Benef_Cnt_tmp_1_Old         =  0
  let #Amount1_tmp_1_Old           =  0
  let #Amount2_tmp_1_Old           =  0
  let #Amount3_tmp_1_Old           =  0
  let #Amount4_tmp_1_Old           =  0
  let #Amount5_tmp_1_Old           =  0
  let #Amount6_tmp_1_Old           =  0
  let $Sign_Pos_Ind_tmp_1_Old      =  ''
  let $Stat_tmp_1_Old              = ''
  let $CHAR01_tmp_1_Old            = ''
  let #Count_Data                  = 0

  do Init_Array

begin-select
TX02_2.EMPLID
TX02_2.CAL_RUN_ID
TX02_2.EMPL_RCD
TX02_2.GP_PAYGROUP
TX02_2.CAL_ID
TX02_2.RSLT_SEG_NUM
TX02_2.SLICE_END_DT
TX02_2.PAY_ENTITY
TX02_2.COMPANY
TX02_2.PRD_END_DT
TX02_2.GPCH_AL_CPAY_ENDDT
TX02_2.GPCH_RP_YEAR
TX02_2.SEQ_NO
TX02_2.GPCH_EO_MBR_ID
TX02_2.NATIONAL_ID
TX02_2.GPCH_AH_NNSS
TX02_2.ACCOUNT
TX02_2.CONTROL_NUMBER
TX02_2.GPCH_EO_CARD_TYPE
TX02_2.GPCH_EO_SERV_TYPE
TX02_2.BEGIN_DT
TX02_2.END_DT
TX02_2.DAYS_DIFF
TX02_2.TYPE_KK
TX02_2.GPCH_EO_AVERAGE_AM
TX02_2.SINGLE_CHECK
TX02_2.DEP_BENEF_CNT
TX02_2.GPCH_RP_AMOUNT1
TX02_2.GPCH_RP_AMOUNT2
TX02_2.GPCH_RP_AMOUNT3
TX02_2.GPCH_RP_AMOUNT4
TX02_2.GPCH_RP_AMOUNT5
TX02_2.GPCH_RP_AMOUNT6
TX02_2.SIGN_POS_IND
TX02_2.STATUS
TX02_2.GPCH_RP_CHAR01
TX02_2.GPCH_RP_CHAR02
TX02_2.GPCH_RP_CHAR03

  let $Empl_ID_tmp_1               =  rtrim(&TX02_2.EMPLID,' ')
  let $Cal_RunID_tmp_1             =  rtrim(&TX02_2.CAL_RUN_ID,' ')
  let #Empl_RCD_tmp_1              =  &TX02_2.EMPL_RCD
  let $GP_Pay_Gr_tmp_1             =  rtrim(&TX02_2.GP_PAYGROUP,' ')
  let $Cal_ID_tmp_1                =  rtrim(&TX02_2.CAL_ID,' ')
  let #Rslt_Seg_Nr_tmp_1           =  &TX02_2.RSLT_SEG_NUM
  let $Slice_End_DT_tmp_1          =  &TX02_2.SLICE_END_DT
  let $Pay_Entity_tmp_1            =  rtrim(&TX02_2.PAY_ENTITY,' ')
  let $Company_tmp_1               =  rtrim(&TX02_2.COMPANY,' ')
  let $PRD_E_DT_tmp_1              =  &TX02_2.PRD_END_DT
  let $Cpay_E_DT_tmp_1             =  &TX02_2.GPCH_AL_CPAY_ENDDT
  let $RP_Year_tmp_1               =  &TX02_2.GPCH_RP_YEAR
  let #Sequence_tmp_1              =  &TX02_2.SEQ_NO
  let $EO_Mbr_Id_tmp_1             =  rtrim(&TX02_2.GPCH_EO_MBR_ID,' ')
  let $National_Id_tmp_1           =  rtrim(&TX02_2.NATIONAL_ID,' ')
  let $NNSS_Id_tmp_1               =  rtrim(&TX02_2.GPCH_AH_NNSS,' ')

  show '$NNSS_Id_tmp_1 --> ' $NNSS_Id_tmp_1

  let $Account_tmp_1               =  rtrim(&TX02_2.ACCOUNT,' ')
  let $Control_Nr_tmp_1            =  rtrim(&TX02_2.CONTROL_NUMBER,' ')
  let $EO_Card_Type_tmp_1          =  rtrim(&TX02_2.GPCH_EO_CARD_TYPE,' ')
  let $EO_Serv_Type_tmp_1          =  rtrim(&TX02_2.GPCH_EO_SERV_TYPE,' ')
  let $B_DT_tmp_1                  =  &TX02_2.BEGIN_DT
  let $E_DT_tmp_1                  =  &TX02_2.END_DT
  let #Days_Diff_tmp_1             =  &TX02_2.DAYS_DIFF
  let $Type_KK_tmp_1               =  rtrim(&TX02_2.TYPE_KK,' ')
  let #Average_AM_tmp_1            =  &TX02_2.GPCH_EO_AVERAGE_AM
  let $Single_Check_tmp_1          =  rtrim(&TX02_2.SINGLE_CHECK,' ')
  let #Benef_Cnt_tmp_1             =  &TX02_2.DEP_BENEF_CNT
  let #Amount1_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT1
  let #Amount2_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT2
  let #Amount3_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT3
  let #Amount4_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT4
  let #Amount5_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT5
  let #Amount6_tmp_1               =  &TX02_2.GPCH_RP_AMOUNT6
  let $Sign_Pos_Ind_tmp_1          =  rtrim(&TX02_2.SIGN_POS_IND,' ')
  let $Stat_tmp_1                  =  rtrim(&TX02_2.STATUS,' ')
  let $CHAR01_tmp_1                =  rtrim(&TX02_2.GPCH_RP_CHAR01,' ')
  let $CHAR02_tmp_1                =  rtrim(&TX02_2.GPCH_RP_CHAR02,' ')
  let $CHAR03_tmp_1                =  rtrim(&TX02_2.GPCH_RP_CHAR03,' ')
  put $Empl_ID_tmp_1_Old            into Accum(0) arr1
  put $Cal_RunID_tmp_1_Old          into Accum(0) arr2
  put #Empl_RCD_tmp_1_Old           into Accum(0) arr3
  put $GP_Pay_Gr_tmp_1_Old          into Accum(0) arr4
  put $Cal_ID_tmp_1_Old             into Accum(0) arr5
  put #Rslt_Seg_Nr_tmp_1_Old        into Accum(0) arr6
  put $Slice_End_DT_tmp_1_Old       into Accum(0) arr7
  put $Pay_Entity_tmp_1_Old         into Accum(0) arr8
  put $Company_tmp_1_Old            into Accum(0) arr9
  put $PRD_E_DT_tmp_1_Old           into Accum(0) arr10
  put $Cpay_E_DT_tmp_1_Old          into Accum(0) arr11
  put $RP_Year_tmp_1_Old            into Accum(0) arr12
  put #Sequence_tmp_1_Old           into Accum(0) arr13
  put $EO_Mbr_Id_tmp_1_Old          into Accum(0) arr14
  put $National_Id_tmp_1_Old        into Accum(0) arr15
  put $NNSS_Id_tmp_1_Old            into Accum(0) arr16

  put $Account_tmp_1_Old            into Accum(0) arr17
  put $Control_Nr_tmp_1_Old         into Accum(0) arr18
  put $EO_Card_Type_tmp_1_Old       into Accum(0) arr19
  put $EO_Serv_Type_tmp_1_Old       into Accum(0) arr20
  put $B_DT_tmp_1_Old               into Accum(0) arr21
  put $E_DT_tmp_1_Old               into Accum(0) arr22
  put #Days_Diff_tmp_1_Old          into Accum(0) arr23
  put $Type_KK_tmp_1_Old            into Accum(0) arr24
  put #Average_AM_tmp_1_Old         into Accum(0) arr25
  put $Single_Check_tmp_1_Old       into Accum(0) arr26
  put #Benef_Cnt_tmp_1_Old          into Accum(0) arr27
  put #Amount1_tmp_1_Old            into Accum(0) arr28
  put #Amount2_tmp_1_Old            into Accum(0) arr29
  put #Amount3_tmp_1_Old            into Accum(0) arr30
  put #Amount4_tmp_1_Old            into Accum(0) arr31
  put #Amount5_tmp_1_Old            into Accum(0) arr32
  put #Amount6_tmp_1_Old            into Accum(0) arr33
  put $Sign_Pos_Ind_tmp_1_Old       into Accum(0) arr34
  put $Stat_tmp_1_Old               into Accum(0) arr35
  put $CHAR01_tmp_1_Old             into Accum(0) arr36
  put $CHAR02_tmp_1_Old             into Accum(0) arr37
  put $CHAR03_tmp_1_Old             into Accum(0) arr38

  let $Empl_ID_tmp_1_Old               =  $Empl_ID_tmp_1
  let $Cal_RunID_tmp_1_Old             =  $Cal_RunID_tmp_1
  let #Empl_RCD_tmp_1_Old              =  #Empl_RCD_tmp_1
  let $GP_Pay_Gr_tmp_1_Old             =  $GP_Pay_Gr_tmp_1
  let $Cal_ID_tmp_1_Old                =  $Cal_ID_tmp_1
  let #Rslt_Seg_Nr_tmp_1_Old           =  #Rslt_Seg_Nr_tmp_1
  let $Slice_End_DT_tmp_1_Old          =  $Slice_End_DT_tmp_1
  let $Pay_Entity_tmp_1_Old            =  $Pay_Entity_tmp_1
  let $Company_tmp_1_Old               =  $Company_tmp_1
  let $PRD_E_DT_tmp_1_Old              =  $PRD_E_DT_tmp_1
  let $Cpay_E_DT_tmp_1_Old             =  $Cpay_E_DT_tmp_1
  let $RP_Year_tmp_1_Old               =  $RP_Year_tmp_1
  let #Sequence_tmp_1_Old              =  #Sequence_tmp_1
  let $EO_Mbr_Id_tmp_1_Old             =  $EO_Mbr_Id_tmp_1
  let $National_Id_tmp_1_Old           =  $National_Id_tmp_1
  let $NNSS_Id_tmp_1_Old               =  $NNSS_Id_tmp_1

  show '$NNSS_Id_tmp_1_Old --> ' $NNSS_Id_tmp_1_Old

  let $Account_tmp_1_Old               =  $Account_tmp_1
  let $Control_Nr_tmp_1_Old            =  $Control_Nr_tmp_1
  let $EO_Card_Type_tmp_1_Old          =  $EO_Card_Type_tmp_1
  let $EO_Serv_Type_tmp_1_Old          =  $EO_Serv_Type_tmp_1
  let $B_DT_tmp_1_Old                  =  $B_DT_tmp_1
  let $E_DT_tmp_1_Old                  =  $E_DT_tmp_1
  let #Days_Diff_tmp_1_Old             =  #Days_Diff_tmp_1
  let $Type_KK_tmp_1_Old               =  $Type_KK_tmp_1
  let #Average_AM_tmp_1_Old            =  #Average_AM_tmp_1
  let $Single_Check_tmp_1_Old          =  $Single_Check_tmp_1
  let #Benef_Cnt_tmp_1_Old             =  #Benef_Cnt_tmp_1
  let #Amount1_tmp_1_Old               =  #Amount1_tmp_1
  let #Amount2_tmp_1_Old               =  #Amount2_tmp_1
  let #Amount3_tmp_1_Old               =  #Amount3_tmp_1
  let #Amount4_tmp_1_Old               =  #Amount4_tmp_1
  let #Amount5_tmp_1_Old               =  #Amount5_tmp_1
  let #Amount6_tmp_1_Old               =  #Amount6_tmp_1
  let $Sign_Pos_Ind_tmp_1_Old          =  $Sign_Pos_Ind_tmp_1
  let $Stat_tmp_1_Old                  =  $Stat_tmp_1
  let $CHAR01_tmp_1_Old                =  $CHAR01_tmp_1
  let $CHAR02_tmp_1_Old                =  $CHAR02_tmp_1
  let $CHAR03_tmp_1_Old                =  $CHAR03_tmp_1

  let #Count_Data  = #Count_Data + 1

FROM PS_GPCH_RP_EO01 TX02_2
WHERE TX02_2.PAY_ENTITY          = $Ctl_PayEntity
AND   TX02_2.EMPLID              = $Empl_ID
AND   TX02_2.EMPL_RCD            = #Empl_RCD
AND   TX02_2.GPCH_AL_CPAY_ENDDT <= $ReportEndDate
AND   TX02_2.PRD_END_DT between $PRD_B_DT_tmp_out and $PRD_E_DT_tmp_out
AND   TX02_2.BEGIN_DT            = $BgDt
AND   TX02_2.SLICE_END_DT        = $SliceEndDate
ORDER BY TX02_2.GPCH_AL_CPAY_ENDDT,TX02_2.PRD_END_DT,TX02_2.SLICE_END_DT

End-select

   if $Cpay_E_DT_tmp_1 <> ''
      do Format-DateTime($Cpay_E_DT_tmp_1,$Temp_Cpay_Date,{DEFCMP},'','')
   end-if

   if $PRD_E_DT_tmp_1 <> ''
      do Format-DateTime($PRD_E_DT_tmp_1,$PRD_E_DT_tmp_11,{DEFCMP},'','')
   end-if

   Evaluate #Count_Data
     when = 0
     break
     when = 1

     if $Temp_Cpay_Date <> $Ctl_E_Date
        let #Amount1_tmp_1     = -1 * #Amount1_tmp_1_Old
        let #Amount2_tmp_1     = -1 * #Amount2_tmp_1_Old
        let #Amount3_tmp_1     = -1 * #Amount3_tmp_1_Old
        let #Amount4_tmp_1     = -1 * #Amount4_tmp_1_Old
        let #Amount5_tmp_1     = -1 * #Amount5_tmp_1_Old
        let #Amount6_tmp_1     = -1 * #Amount6_tmp_1_Old
        let #Average_AM_tmp_1  = -1 * #Average_AM_tmp_1_Old
        let #Days_Diff_tmp_1   = -1 * #Days_Diff_tmp_1_Old

        if $CHAR01_tmp_1 = '1' or $CHAR01_tmp_1 = '2'
           let $CHAR01_tmp_1 = '4'
           let $Sign_Pos_Ind_tmp_1 = '1'
        end-if

     end-if

     do Print_Data_Retro

     break
     when-other

          get $Empl_ID_tmp_1_Old            from Accum(0) arr1
          get $Cal_RunID_tmp_1_Old          from Accum(0) arr2
          get #Empl_RCD_tmp_1_Old           from Accum(0) arr3
          get $GP_Pay_Gr_tmp_1_Old          from Accum(0) arr4
          get $Cal_ID_tmp_1_Old             from Accum(0) arr5
          get #Rslt_Seg_Nr_tmp_1_Old        from Accum(0) arr6
          get $Slice_End_DT_tmp_1_Old       from Accum(0) arr7
          get $Pay_Entity_tmp_1_Old         from Accum(0) arr8
          get $Company_tmp_1_Old            from Accum(0) arr9
          get $PRD_E_DT_tmp_1_Old           from Accum(0) arr10
          get $Cpay_E_DT_tmp_1_Old          from Accum(0) arr11
          get $RP_Year_tmp_1_Old            from Accum(0) arr12
          get #Sequence_tmp_1_Old           from Accum(0) arr13
          get $EO_Mbr_Id_tmp_1_Old          from Accum(0) arr14
          get $National_Id_tmp_1_Old        from Accum(0) arr15
          get $NNSS_Id_tmp_1_Old            from Accum(0) arr16

          get $Account_tmp_1_Old            from Accum(0) arr17
          get $Control_Nr_tmp_1_Old         from Accum(0) arr18
          get $EO_Card_Type_tmp_1_Old       from Accum(0) arr19
          get $EO_Serv_Type_tmp_1_Old       from Accum(0) arr20
          get $B_DT_tmp_1_Old               from Accum(0) arr21
          get $E_DT_tmp_1_Old               from Accum(0) arr22
          get #Days_Diff_tmp_1_Old          from Accum(0) arr23
          get $Type_KK_tmp_1_Old            from Accum(0) arr24
          get #Average_AM_tmp_1_Old         from Accum(0) arr25
          get $Single_Check_tmp_1_Old       from Accum(0) arr26
          get #Benef_Cnt_tmp_1_Old          from Accum(0) arr27
          get #Amount1_tmp_1_Old            from Accum(0) arr28
          get #Amount2_tmp_1_Old            from Accum(0) arr29
          get #Amount3_tmp_1_Old            from Accum(0) arr30
          get #Amount4_tmp_1_Old            from Accum(0) arr31
          get #Amount5_tmp_1_Old            from Accum(0) arr32
          get #Amount6_tmp_1_Old            from Accum(0) arr33
          get $Sign_Pos_Ind_tmp_1_Old       from Accum(0) arr34
          get $Stat_tmp_1_Old               from Accum(0) arr35
          get $CHAR01_tmp_1_Old             from Accum(0) arr36
          get $CHAR02_tmp_1_Old             from Accum(0) arr37
          get $CHAR03_tmp_1_Old             from Accum(0) arr38



          if $Temp_Cpay_Date = $Ctl_E_Date
            do CheckExistChange

            if $ExistCh = 'Y'

            do Print_Data_Retro

            let $Empl_ID_tmp_1               =  $Empl_ID_tmp_1_Old
            let $Cal_RunID_tmp_1             =  $Cal_RunID_tmp_1_Old
            let #Empl_RCD_tmp_1              =  #Empl_RCD_tmp_1_Old
            let $GP_Pay_Gr_tmp_1             =  $GP_Pay_Gr_tmp_1_Old
            let $Cal_ID_tmp_1                =  $Cal_ID_tmp_1_Old
            let #Rslt_Seg_Nr_tmp_1           =  #Rslt_Seg_Nr_tmp_1_Old
            let $Slice_End_DT_tmp_1          =  $Slice_End_DT_tmp_1_Old
            let $Pay_Entity_tmp_1            =  $Pay_Entity_tmp_1_Old
            let $Company_tmp_1               =  $Company_tmp_1_Old
            let $PRD_E_DT_tmp_1              =  $PRD_E_DT_tmp_1_Old
            let $Cpay_E_DT_tmp_1             =  $Cpay_E_DT_tmp_1_Old
            let $RP_Year_tmp_1               =  $RP_Year_tmp_1_Old
            let #Sequence_tmp_1              =  #Sequence_tmp_1_Old
            let $EO_Mbr_Id_tmp_1             =  $EO_Mbr_Id_tmp_1_Old
            let $National_Id_tmp_1           =  $National_Id_tmp_1_Old
            let $NNSS_Id_tmp_1               =  $NNSS_Id_tmp_1_Old

    show '$NNSS_Id_tmp_1 --> ' $NNSS_Id_tmp_1

            let $Account_tmp_1               =  $Account_tmp_1_Old
            let $Control_Nr_tmp_1            =  $Control_Nr_tmp_1_Old
            let $EO_Card_Type_tmp_1          =  $EO_Card_Type_tmp_1_Old
            let $EO_Serv_Type_tmp_1          =  $EO_Serv_Type_tmp_1_Old
            let $B_DT_tmp_1                  =  $B_DT_tmp_1_Old
            let $E_DT_tmp_1                  =  $E_DT_tmp_1_Old
            let $Type_KK_tmp_1               =  $Type_KK_tmp_1_Old
            let $Single_Check_tmp_1          =  $Single_Check_tmp_1_Old
            let #Benef_Cnt_tmp_1             =  #Benef_Cnt_tmp_1_Old
            let $Sign_Pos_Ind_tmp_1          =  $Sign_Pos_Ind_tmp_1_Old
            let #Amount1_tmp_1               = -1 * #Amount1_tmp_1_Old
            let #Amount2_tmp_1               = -1 * #Amount2_tmp_1_Old
            let #Amount3_tmp_1               = -1 * #Amount3_tmp_1_Old
            let #Amount4_tmp_1               = -1 * #Amount4_tmp_1_Old
            let #Amount5_tmp_1               = -1 * #Amount5_tmp_1_Old
                        let #Amount6_tmp_1               = -1 * #Amount6_tmp_1_Old
            let #Average_AM_tmp_1            = -1 * #Average_AM_tmp_1_Old
            let #Days_Diff_tmp_1             = -1 * #Days_Diff_tmp_1_Old
            let $Stat_tmp_1                  = $Stat_tmp_1_Old
            let $CHAR01_tmp_1                = $CHAR01_tmp_1_Old
            let $CHAR02_tmp_1                = $CHAR02_tmp_1_Old
            let $CHAR03_tmp_1                = $CHAR03_tmp_1_Old


            if $CHAR01_tmp_1 = '1' or $CHAR01_tmp_1 = '2'
               let $CHAR01_tmp_1 = '4'
               let $Sign_Pos_Ind_tmp_1 = '1'
            end-if

            do Print_Data_Retro
          end-if
 else
          let #Amount1_tmp_1           = -1 * #Amount1_tmp_1
          let #Amount2_tmp_1           = -1 * #Amount2_tmp_1
          let #Amount3_tmp_1           = -1 * #Amount3_tmp_1
          let #Amount4_tmp_1           = -1 * #Amount4_tmp_1
          let #Amount5_tmp_1           = -1 * #Amount5_tmp_1
          let #Amount6_tmp_1           = -1 * #Amount6_tmp_1
          let #Average_AM_tmp_1        = -1 * #Average_AM_tmp_1
          let #Days_Diff_tmp_1         = -1 * #Days_Diff_tmp_1

          if $CHAR01_tmp_1 = '1' or $CHAR01_tmp_1 = '2'
             let $CHAR01_tmp_1 = '4'
             let $Sign_Pos_Ind_tmp_1 = '1'
          end-if

          do Print_Data_Retro

 end-if
 break
end-evaluate

#Debug Show '<- Check_Retro_Periode '
End-procedure
!*************************************************************************************************
Begin-procedure CheckExistChange
#Debug Show '-> CheckExistChange '

let $ExistCh = 'N'
if $National_Id_tmp_1_Old     <>  $National_Id_tmp_1 or
   $NNSS_Id_tmp_1_Old         <>  $NNSS_Id_tmp_1 or
   $EO_Card_Type_tmp_1_Old    <>  $EO_Card_Type_tmp_1 or
   $EO_Serv_Type_tmp_1_Old    <>  $EO_Serv_Type_tmp_1 or
   $B_DT_tmp_1_Old            <>  $B_DT_tmp_1 or
   $E_DT_tmp_1_Old            <>  $E_DT_tmp_1 or
   #Days_Diff_tmp_1_Old       <>  #Days_Diff_tmp_1 or
!  $Single_Check_tmp_1_Old    <>  $Single_Check_tmp_1 or
   #Benef_Cnt_tmp_1_Old       <>  #Benef_Cnt_tmp_1 or
   #Amount3_tmp_1_Old         <>  #Amount3_tmp_1 or
   #Amount5_tmp_1_Old         <>  #Amount5_tmp_1 or
   #Amount6_tmp_1_Old         <>  #Amount6_tmp_1 or
   $CHAR01_tmp_1_Old          <>  $CHAR01_tmp_1 or
   $CHAR02_tmp_1_Old          <>  $CHAR02_tmp_1 or
   $CHAR03_tmp_1_Old          <>  $CHAR03_tmp_1

   let $ExistCh = 'Y'

end-if

#Debug Show '<- CheckExistChange '
End-procedure
!*************************************************************************************************
begin-procedure Strings_Pads($Str1,:$Str2,#Len1)
#Debug Show '-> Strings_Pads '

   let $Str1 = rtrim(ltrim($Str1,' '),' ')
   let $Str1 = rtrim(substr($Str1,1,#Len1),' ')
   let $Str2 = lpad ($Str1, #Len1, ' ')

#Debug Show '<- Strings_Pads '
end-procedure

!***********************************************************************
Begin-procedure Print_Data_Retro
#Debug Show '-> Print_Data_Retro '

   alter-printer
   point-size=7.2
   use-report report1

   let $First_Print   = 'N'

   let #Record_Cnt = #Record_Cnt + 1

   if $Empl_id <> $Old_Empl_id
      let #Employee_Cnt = #Employee_Cnt + 1
      let $Old_Empl_id = $Empl_id
   end-if

   let #Days_Diff_Sum = #Days_Diff_Sum + #Days_Diff_tmp_1
   let #Amount5_Sum   = #Amount5_Sum   + #Amount5_tmp_1

   do Format-Number  (#Days_Diff_tmp_1,$Days_Diff_1_tmp_1,'99,999.99')
   do Format-Number  (#Amount3_tmp_1  ,$Amount3_tmp_1    ,'999,999,999.99')
   do Format-Number  (#Amount5_tmp_1  ,$Amount5_tmp_1    ,'999,999,999.99')
   do Format-Number  (#Amount6_tmp_1  ,$Amount6_tmp_1    ,'9,999,999.99')

   do Format-DateTime($B_DT_tmp_1,$B_DT1_tmp_1, {DEFDATE}, '', '')
   do Format-DateTime($E_DT_tmp_1,$E_DT1_tmp_1, {DEFDATE}, '', '')

   if #Amount6_tmp_1 > 77400 or #Amount6_tmp_1 < -77400
      let $Amount6_tmp_1 = '      max'
   End-if

   print $HD_FOR (+1,{col1})
   print ' '       (,)

   do ConvertToComponents($PRD_E_DT_tmp_out,$yy_DTR,$mm_DTR,$dd_DTR)

   Evaluate #Date_Type
   when = 2
      let $PRD_E_DTR1 = $yy_DTR || '{PTDateDelim}' || $mm_DTR
   break
   when-other
      let $PRD_E_DTR1    = $mm_DTR || '{PTDateDelim}' || $yy_DTR
   break
   End-evaluate

   print $PRD_E_DTR1  (,)

   print                   $Nat_ID_print                      (+1,{col1})

   do Format-Number(#Empl_RCD,$EmplRcd,'888')
   let $EmplID_Rcd = $Empl_ID || '-' || $EmplRcd

   print                   $EmplID_Rcd                       (,{col2})
   print                   $Empl_Name                        (,{col3})
   print                   $CHAR01_tmp_1                     (,{col3C})
   print                   $EO_Card_Type_tmp_1               (,{col32})
   print                   $EO_Serv_Type_tmp_1               (,{col4})
   !print                   $Account_tmp_1                     (,{col41})
   !print                   $Control_Nr_tmp_1                  (,{col42})
   do Convert-To-Number($Account_tmp_1,$Print_Account_tmp_1,'0')

   do Convert-To-Number($Control_Nr_tmp_1,$Print_Control_Nr_tmp_1,'1')

   let #temp1 = $Print_Account_tmp_1
   do Format-Number(#temp1,$Print_Account_tmp_2,'9999999')

   print                   $Print_Account_tmp_2                     (,{col41})
   print                   $Print_Control_Nr_tmp_1                 (,{col42})

   if $B_DT1_tmp_1 >= '01-07-2005'
   print                   $CHAR03_tmp_1               (,{col5})
   else
   print                   $Single_Check_tmp_1               (,{col5})
   end-if
   print                   #Benef_Cnt_tmp_1                  (,{col6})     edit 88nu
   print                   $B_DT1_tmp_1                      (,{col7})
   print                   $E_DT1_tmp_1                      (,{col7_1})
   print                   $Amount6_tmp_1                    (,{col8})
   print                   $Days_Diff_1_tmp_1                (,{col9})
   print                   $Amount3_tmp_1                    (,{col10})
   print                   $Amount5_tmp_1                    (,{col11})

   print                   $Birth_Date_print                           (+1,8)

   let $Corr = ' '

   alter-printer
   point-size=7.2
  !************
   if $NNSS_Id <> ''
  let $NNSS_Id_temp='-'|| substr($NNSS_Id,4,13)
     else
   let  $NNSS_Id_temp= $Nat_ID
   End-If
   
  !************

   do Write-to-File($CHAR01_tmp_1,$NNSS_Id_temp, $B_DT_tmp_1,$E_DT_tmp_1,$Cpay_E_DT_tmp_1,
                                 $EO_Serv_Type_tmp_1,#Days_Diff_tmp_1,#Benef_Cnt_tmp_1,#Average_AM_tmp_1,
                                 #Amount3_tmp_1,#Amount4_tmp_1,#Amount5_tmp_1,#anzrec,#Amount1_tmp_1,
                                #Amount2_tmp_1,#Sequence_tmp_1,$Print_Account_tmp_1,$Print_Control_Nr_tmp_1,$Type_KK_tmp_1,
                                 $Single_Check_tmp_1,$AusglKasse,$Sign_Pos_Ind_tmp_1,$CHAR02_tmp_1,$CHAR03_tmp_1)

#Debug Show '<- Print_Data_Retro '
End-procedure
!*********************************************************************************
Begin-procedure Print_Data
#Debug Show '-> Print_Data '
   Use-Report report1
   alter-printer
   point-size=7.2

   let #Record_Cnt = #Record_Cnt + 1

   if $Empl_id <> $Old_Empl_id
      let #Employee_Cnt = #Employee_Cnt + 1
      let $Old_Empl_id = $Empl_id
   end-if

   let #Days_Diff_Sum = #Days_Diff_Sum + #Days_Diff
   let #Amount5_Sum   = #Amount5_Sum   + #Amount5

   do Format-Number(#Days_Diff,$Days_Diff_1,'99,999.99')
   do Format-Number(#Amount3  ,$Amount3    ,'999,999,999.99')
   do Format-Number(#Amount5  ,$Amount5    ,'999,999,999.99')
   do Format-Number(#Amount6  ,$Amount6    ,'9,999,999.99')

   do Format-DateTime($B_DT,$B_DT1, {DEFDATE}, '', '')
   do Format-DateTime($E_DT,$E_DT1, {DEFDATE}, '', '')

   if #Amount6 > 77400 or #Amount6 < -77400
      let $Amount6 = '      max'
   end-if

   let #Amount6_tmp_1 = #Amount6

   print                   $Nat_ID_print                           (+2,{col1}) bold

   do Format-Number(#Empl_RCD,$EmplRcd,'888')
   let $EmplID_Rcd = $Empl_ID || '-' || $EmplRcd

   print                   $EmplID_Rcd                       (,{col2})   bold
   print                   $Empl_Name                        (,{col3})   bold
   print                   $CHAR01                             (,{col3C}) bold
   print                   $EO_Card_Type                     (,{col32})   bold
   print                   $EO_Serv_Type                     (,{col4})   bold
   !print                   $Account                           (,{col41})   bold
   !print                   $Control_Nr                       (,{col42})  bold
   
   do Convert-To-Number($Account,$Print_Account,'0')
   let #temp2 = $Print_Account
   do Format-Number(#temp2,$Print_Account_1,'9999999')
    
   print                   $Print_Account_1                          (,{col41})   bold 
   
   do Convert-To-Number($Control_Nr,$Print_ControlNr,'1')
   print                   $Print_ControlNr                  (,{col42})  bold

   if $B_DT1 >= '01-07-2005'
   print                   $CHAR03                           (,{col5})   bold
   else
   print                   $Single_Check                     (,{col5})   bold
   end-if
   print                   #Benef_Cnt                        (,{col6})   edit 88nu bold
   print                   $B_DT1                            (,{col7})   bold
   print                   $E_DT1                            (,{col7_1}) bold
   print                   $Amount6                     (,{col8})   bold
   print                   $Days_Diff_1                      (,{col9})   bold
   print                   $Amount3                          (,{col10})  bold
   print                   $Amount5                          (,{col11})  bold

  print                   $birth_dt_print                           (+1,8) bold


   alter-printer
    point-size=7.2

   !************
   if $NNSS_Id <> ''
   let $NNSS_Id_temp='-'|| substr($NNSS_Id,4,13)
     else
    let $NNSS_Id_temp= $Nat_ID
   End-If
   
  !************

   do Write-to-File($CHAR01,$NNSS_Id_temp,$B_DT,$E_DT,$Cpay_E_DT,$EO_Serv_Type,#Days_Diff,
                                 #Benef_Cnt,#Average_AM,#Amount3,#Amount4,#Amount5,#anzrec,#Amount1,#Amount2,
                                 #Sequence,$Print_Account,$Print_ControlNr,$Type_KK,$Single_Check,
                                 $AusglKasse,$Sign_Pos_Ind,$CHAR02,$CHAR03)

#Debug Show '<- Print_Data '
end-procedure
!********************************************************************************************
Begin-heading   7 FOR-REPORTS   =       (report1)

   #Include 'gpchut09.sqc'
   position (-2,1)
   let $fr_str = $FROM_STR || ' ' || $from_to_format
   alter-printer
   point-size=7.2

   print        $fr_str              (+1,)  center
   print        $Cpdescr (,1)
   print '_'                         (+2,1,180) fill
   print        $EO_RESTITUTION_LBL (+1,{col10})
   print        $AHV_LBL            (+1,{col1})


   print        $EMPL_LBL           (,{col2})
   print        $NAME_LBL           (,{col3})
   print        $CORRECTION2_STR    (,{col3CH})  WRAP 10 2 keep-top
   print        $CARD_TYPE          (,{col31})  WRAP 9  2 keep-top
   print        $SERVICE            (,{col4H})   WRAP 9  2 keep-top
   print        $HD_ACCOUNT           (,{col41H})   WRAP 9  2 keep-top
   print        $HD_CONTROL_NBR      (,{col42})  
   print        $ZIVIL_STAT_LBL     (,{col5H})
   print        $CHILDREN_LBL       (,{col6H})
   print        $FROM_LBL           (,{col7H})
   print        $TO_LBL             (,{col7H_1})
   print        $Year_Sal_LBL       (,{col8})
   print        $DAYS_DIFF_LBL      (,{col9})
   print        $Pro_Day_LBL        (,{col10})
   print        $TOTAL_LBL          (,{col11})

   print        $BIRTH_LBL            (+1,8)

   print '_'                        (+1,1,180)  fill

end-heading

!********************************************************************************************
Begin-procedure Initial_Var
#Debug Show '-> Initial_Var '

  let $Empl_ID_tmp_1               =  $Empl_ID
  let $Cal_RunID_tmp_1             =  $Cal_RunID
  let #Empl_RCD_tmp_1              =  #Empl_RCD
  let $GP_Pay_Gr_tmp_1             =  $GP_Pay_Gr
  let $Cal_ID_tmp_1                =  $Cal_ID
  let #Rslt_Seg_Nr_tmp_1           =  #Rslt_Seg_Nr
  let $Slice_End_DT_tmp_1          =  $Slice_End_DT
  let $Pay_Entity_tmp_1            =  $Pay_Entity
  let $Company_tmp_1               =  $Company
  let $PRD_E_DT_tmp_out            =  $PRD_E_DT
  let $Cpay_E_DT_tmp_1             =  $Cpay_E_DT
  let $RP_Year_tmp_1               =  $RP_Year
  let #Sequence_tmp_1              =  #Sequence
  let $EO_Mbr_Id_tmp_1             =  $EO_Mbr_Id
  let $National_Id_tmp_1           =  $National_Id
  let $NNSS_Id_tmp_1               =  $NNSS_Id

  show '$NNSS_Id_tmp_1 --> ' $NNSS_Id_tmp_1

  let $Account_tmp_1               =  $Account
  let $Control_Nr_tmp_1            =  $Control_Nr
  let $EO_Card_Type_tmp_1          =  $EO_Card_Type
  let $EO_Serv_Type_tmp_1          =  $EO_Serv_Type
  let $B_DT_tmp_1                  =  $B_DT
  let $E_DT_tmp_1                  =  $E_DT
  let #Days_Diff_tmp_1             =  #Days_Diff
  let $Type_KK_tmp_1               =  $Type_KK
  let #Average_AM_tmp_1            =  #Average_AM
  let $Single_Check_tmp_1          =  $Single_Check
  let #Benef_Cnt_tmp_1             =  #Benef_Cnt
  let #Amount1_tmp_1               =  #Amount1
  let #Amount2_tmp_1               =  #Amount2
  let #Amount3_tmp_1               =  #Amount3
  let #Amount4_tmp_1               =  #Amount4
  let #Amount5_tmp_1               =  #Amount5
  let #Amount6_tmp_1               =  #Amount6
  let $Sign_Pos_Ind_tmp_1          =  $Sign_Pos_Ind
  let $Stat_tmp_1                  =  $Stat
  let $CHAR01_tmp_1                =  $CHAR01

#Debug Show '<- Initial_Var '
end-procedure
!********************************************************************************
Begin-procedure Init_Array
#Debug Show '-> Init_Array '

put ''            into Accum(0) arr1
put ''            into Accum(0) arr2
put 0             into Accum(0) arr3
put ''            into Accum(0) arr4
put ''            into Accum(0) arr5
put 0             into Accum(0) arr6
put ''            into Accum(0) arr7
put ''            into Accum(0) arr8
put ''            into Accum(0) arr9
put ''            into Accum(0) arr10
put ''            into Accum(0) arr11
put ''            into Accum(0) arr12
put 0             into Accum(0) arr13
put ''            into Accum(0) arr14
put ''            into Accum(0) arr15
put ''            into Accum(0) arr16

put ''            into Accum(0) arr17
put ''            into Accum(0) arr18
put ''            into Accum(0) arr19
put ''            into Accum(0) arr20
put ''            into Accum(0) arr21
put ''            into Accum(0) arr22
put 0             into Accum(0) arr23
put ''            into Accum(0) arr24
put 0             into Accum(0) arr25
put ''            into Accum(0) arr26
put 0             into Accum(0) arr27
put 0             into Accum(0) arr28
put 0             into Accum(0) arr29
put 0             into Accum(0) arr30
put 0             into Accum(0) arr31
put 0             into Accum(0) arr32
put 0             into Accum(0) arr33
put ''            into Accum(0) arr34
put ''            into Accum(0) arr35
put ''            into Accum(0) arr36
put ''            into Accum(0) arr37
put ''            into Accum(0) arr38

#Debug Show '<- Init_Array '
End-procedure
!********************************************************************************************
Begin-procedure Get_End_Mnth($Dte1,:$Dte2)
#Debug Show '-> Get_End_Mnth '


  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)

  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
          (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
  else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
  end-if

  let $MonthDays1 = to_char(#MonthDays1)
  let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
  do Format-DateTime($E_DT_tmp1,$Dte2, {DEFCMP},'','native')

#Debug Show '<- Get_End_Mnth '
End-procedure
!********************************************************************************************
begin-procedure Get_Beg_Mnth($Dte1,:$Dte2)
#Debug Show '-> Get_Beg_Mnth '

  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tpm1_dd)
  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1,$Dte2, {DEFCMP},'','native')

#Debug Show '<- Get_Beg_Mnth '
end-procedure

!********************************************************************************************
begin-procedure Init-File
#Debug Show '-> Init-File '

   let #Record_Cnt   = 0
   let #Err_Cnt      = 0
   let #Employee_Cnt = 0
   let #Cost_Cnt     = 0
   let #Salary_Cnt   = 0
   let #AHV_Cnt      = 0
   let #anzrec       = 0

   do Open-File

#Debug Show '<- Init-File '
end-procedure
!***********************************************************************
begin-procedure Print_Head

 do Append_Report_Translation ('GPCHGLOB')
  do Get_Field_Information ('GPCHGLOB', 'COMPANY_NM',   $stdhdg_co_nm,   #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'REPORT_ID',  $stdhdg_rep_id,  #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'PAGE_NO', $stdhdg_page_no, #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_DATE',  $stdhdg_run_dt,  #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_TIME',  $stdhdg_run_tm,  #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'END_REPORT', $stdhdg_end_rep, #dummy_width)

  print '            '    (1,10)
  print $stdhdg_co_nm     ()          center
  print $stdhdg_rep_id    (+1,10)
  print $ReportID         (0,+2)
!***********************************************************************
! T-MBOWDEN-5: not to uppercase due to languages other than English    *
!***********************************************************************
  print $ReportTitle      ()          center
  let #ColR = 119
  let #RptCol = #ColR - 8
  print $stdhdg_page_no   (0,#RptCol)
  print #page-count       (0,+2)      edit 88888888
  print $stdhdg_run_dt    (+1,#RptCol)
  print $ReportDate       (0,+1)
  print $fr_str        (,) center
  print $stdhdg_run_tm    (+1,#RptCol)
  print $ReportTime       (0,+1)
end-procedure
!***********************************************************************

! ---------------------------------------------------------------------
! Heading - Define the Heading of the Report.
! ---------------------------------------------------------------------

BEGIN-HEADING   7 FOR-REPORTS   =       (report2)
 do Print_Head
 if $MerkErr = 'N' and #Err_Cnt <> 0
   print $TITLE_STR_ERR        (,) center
   print '_'                               (+1,10,119)         fill
   print $EMPL_LBL      (+1,{cole0})
   print $NAME_LBL      ( 0,{cole1})
   print $FROM_LBL      ( 0,{cole2})
   print $TO_LBL        ( 0,{cole3})
   print $ERROR_DESCR_STR       ( 0,{cole4})
   print '_'                               (+1,10,119)         fill
 else
   print $TITLE_STR_TICKET (+2,1)  center
 end-if
END-HEADING

!********************************************************************************

! ---------------------------------------------------------------------
! End-File
! ---------------------------------------------------------------------

begin-procedure End-File
   let $MerkErr = 'N'

   if #anzrec = 0

          do Close-File

          display ' '
      show 'Deleting file : ' $Filename
          let #success = delete($Filename)
   else
      do print-Summary
      do print-summ2
          do Close-File
   end-if

   display ' '
   display 'program ends normally'
end-procedure End-File

!********************************************************************************

! ---------------------------------------------------------------------
! Get-Pers-Job
! ---------------------------------------------------------------------

begin-procedure Get-Pers-Job
let     #Annual_Rt              =       0
begin-select
J1.EMPL_RCD
J1.ANNUAL_RT
J1.DEPTID
J1.LOCATION
J1.COMPANY
J1.PAYGROUP
   move &J1.EMPL_RCD to #empl_rcd
   let #Annual_Rt    =  &J1.ANNUAL_RT
   let $EE_Deptid    =  &J1.DEPTID
   let $EE_Location  =  &J1.LOCATION
   let $EE_Company   =  &J1.COMPANY
   let $EE_Paygroup  =  &J1.PAYGROUP
   do  Count-Changes

from PS_JOB J1
where J1.EMPLID = $Empl_ID and
J1.EMPL_RCD = #Empl_RCD and
J1.EFFDT = (SELECT MAX(J2.EFFDT) from PS_JOB J2
   where J2.EMPLID = J1.EMPLID and
   J2.EMPL_RCD = J1.EMPL_RCD and
   J2.EFFDT <= $From_Effdt) and
J1.EFFSEQ = (SELECT MAX(J3.EFFSEQ) from PS_JOB J3
   where J3.EMPLID = J1.EMPLID and
   J3.EMPL_RCD = J1.EMPL_RCD and
   J3.EFFDT = J1.EFFDT)
end-select
end-procedure Get-Pers-Job


!********************************************************************************
! ---------------------------------------------------------------------
! Count-Changes
! ---------------------------------------------------------------------

begin-procedure Count-Changes

let $Prev_Deptid         = $EE_Deptid
let     #Prev_Annual_Rt  = #Annual_Rt
begin-select

J4.DEPTID                        &J4.Deptid
J4.ANNUAL_RT             &J4.Annual_Rt
        let $New_Dept      =    &J4.Deptid
        let #New_Annual_Rt  =   &J4.Annual_Rt

        if $Prev_Deptid <> $New_Dept
                  let #Cost_Cnt = #Cost_Cnt + 1
                  let $Prev_Deptid = $New_Deptid
        end-if

        if #Prev_Annual_Rt <> #New_Annual_Rt
                  let #Salary_Cnt = #Salary_Cnt + 1
                  let #Prev_Annual_Rt = #New_Annual_Rt
        end-if

from PS_JOB J4
where J4.EMPLID = $Empl_ID and
J4.EMPL_RCD = #Empl_RCD and
J4.EFFDT BETWEEN $From_Effdt and $TO_Effdt

end-select

end-procedure Count-Changes


!************************************************************************************
begin-procedure ConvertTo5Rappen(:#Amnt)
!Runden auf 5 Rappen
   let #Amnt = round(#Amnt,2)
   let #Amnt = #Amnt * 20
   let #Amnt = round(#Amnt,0)
   let #Amnt = #Amnt / 20
end-procedure
!************************************************************************************
begin-procedure Write-to-File($Kartenart_File,$Nat_ID_lok,$B_DT_lok,$E_DT_lok,$Cpay_E_DT_lok,
                                $EO_Serv_Type_lok,#Days_Diff_lok,#Benef_Cnt_lok,#Average_AM_lok,#Amount3_lok,
                                #Amount4_lok,#Amount5_lok,:#anzrec_lok,#Amount1_lok,#Amount2_lok,
                                #Sequence_lok,$Account_lok,$Control_Nr_lok,$Type_KK_lok,
                                $Single_Check_lok,$AusglKasse_lok,$Sign_Pos_Ind_lok,$CHAR02,$CHAR03)

  let $Dienstart = $EO_Serv_Type_lok
  let $Str_tmp1 = rtrim(ltrim($Control_Nr_lok,' '),' ')
  let $Control_Nr_lok = lpad($Str_tmp1, 3, '0')          ! 33  kontroll-nummer

  if  $Nat_ID_lok =     ''
         let #_AHV_Cnt         = #_AHV_Cnt + 1
         do Get_Message_Descr(17055,1102,$_language_cd,$Mess_Descr,$Mess_Descr_Long)
         let $_Err_Msg         = $Mess_Descr
         do print-Error
     goto end_Write-to-File
  end-if

 ! if  $NNSS_ID_lok =     ''
 !        let #_AHV_Cnt         = #_AHV_Cnt + 1
 !        do Get_Message_Descr(17055,1102,$_language_cd,$Mess_Descr,$Mess_Descr_Long)
 !        let $_Err_Msg         = $Mess_Descr
 !        do print-Error
 !    goto end_Write-to-File
 ! end-if


  if #Amount1_lok < 0
         let #Amount1_lok       = -1 * #Amount1_lok
  end-if

  if #Amount2_lok < 0
         let #Amount2_lok       = -1 * #Amount2_lok
  end-if

  if #Amount3_lok < 0
         let #Amount3_lok       = -1 * #Amount3_lok
  end-if

  if #Amount4_lok < 0
         let #Amount4_lok       = -1 * #Amount4_lok
  end-if

  if #Amount5_lok < 0
         let #Amount5_lok       = -1 * #Amount5_lok
  end-if

  if #Average_AM_lok < 0
         let #Average_AM_lok       = -1 * #Average_AM_lok
  end-if

  if #Days_Diff_lok < 0
         let #Days_Diff_lok       = -1 * #Days_Diff_lok
  end-if



  let $_From_Effdt = $B_DT_lok
  let $_To_Effdt   = $E_DT_lok

  do Get-Pers-Job

  let $Recordart = '81' ! 1  recordart

  let $Ausgl = rtrim(ltrim($AusglKasse_lok,' '),' ')
  let $ausgleichskasse = lpad($Ausgl, 6, '0') ! 3  nr. of ausgleichskasse

  let $Account_lok = rtrim(ltrim($Account_lok,' '),' ')
  let $Account_lok = lpad($Account_lok, 7, '0')
  let $acc_number       = $Account_lok     ! 26  konto-nummer bzw. ref-nummer

  let $reserve          = ' '  !105  reserve

  let $betr_zul         = '0'    ! 69  betriebszulage
  do ConvertTo5Rappen(#Amount1_lok)
  do ConvertTo5Rappen(#Amount2_lok)
  do ConvertTo5Rappen(#Amount3_lok)
  do ConvertTo5Rappen(#Amount4_lok)
  do ConvertTo5Rappen(#Amount5_lok)
  do ConvertTo5Rappen(#Average_AM_lok)

  let #ta_amount1 = #Amount1_lok * 100
  do Format-Number(#ta_amount1, $betreuungskosten, '00000000')
  ! 70  betreuungskosten in fr/rp

  let #ta_amount2 = #Amount2_lok * 100
  do Format-Number(#ta_amount2, $untr_zul, '000000')  ! 78  unterstuetzungszulage

  let #ta_amount3 = #Amount3_lok * 100
  do Format-Number(#ta_amount3, $f19, '000000')  ! 84  tagesansatz

  let #ta_amount4 = #Amount4_lok * 100
  do Format-Number(#ta_amount4, $f20, '000000') ! 90  tagesansatz grundentschaed

  let #ta_amount5 = #Amount5_lok * 100
  do Format-Number(#ta_amount5, $f21, '00000000')

  let #ta_Aver_Amt = #Average_AM_lok * 100
  do Format-Number(#ta_Aver_Amt, $f13, '000000')     ! 60  Durchschn. Tageseinkommen

  let $AHV_Number = TRANSLATE($Nat_ID_lok,'.','')           ! 15  ahv-nummer
  
 !syed let $NNSS_Number = TRANSLATE($NNSS_ID_lok,'.','')           ! 17  NNSS-nummer


  ! 96  eo-entschaedigung

  do Format-Number(#Days_Diff_lok, $Days_Diff, '000')         ! 56  anzahl diensttage
  do Format-Number(#Benef_Cnt_lok, $Dependent_Cnt, '00')  ! 68  anzahl kinder

  do ConvertToComponents($B_DT_lok,$Year,$Mon,$Day)
  let $Dienst_From      =       $Year   ||      $Mon    ||      $Day      ! 40  dienstperiode von

  do ConvertToComponents($E_DT_lok,$Year,$Mon,$Day)
  let $Dienst_To        =       $Year ||        $Mon    ||      $Day      ! 48  dienstperiode bis

  do ConvertToComponents($Cpay_E_DT_lok,$Year,$Mon,$Day)
  let $book_kperiod = $Year || $Mon   ! 9  buchungsperiode

  !let $erwerbsart       =       $Type_KK_lok       ! 59  erwerbsart
  let $erwerbsart       =  '0'
  if rtrim($erwerbsart,' ') = ''
     let $erwerbsart = '0'
  end-if

  let $Dnstart = rtrim(ltrim($Dienstart,' '),' ')
  let $Dienstart = lpad($Dnstart, 2, '0')        ! 38  dienstart
  let $Kartenart_File = lpad($Kartenart_File,2,'0')
  let $Single_Check = '2'
  let $Guaratee = ' '

  write {DatFileNum} from $Recordart:2 $ausgleichskasse:6 $book_kperiod:6 $AHV_Number:11  $acc_number:7 !syed
    $Control_Nr_lok:3 $Kartenart_File:2 $Dienstart:2 $Dienst_From:8 $Dienst_To:8 $Days_Diff:3
    $erwerbsart:1 $f13:6 $Single_Check:1 $Dependent_Cnt:2 $betr_zul:1 $betreuungskosten:8
    $untr_zul:6 $f19:6 $f20:6 $f21:8 $Sign_Pos_Ind_lok:1 $CHAR02:3 $CHAR03:1 $Guaratee:1 $reserve:19

   let #anzrec_lok = #anzrec_lok + 1

   end_Write-to-File:
end-procedure Write-to-File
!****************************************************************************
begin-procedure print-Error
!FMB
Use-Report report2

let  #Err_Cnt =  #Err_Cnt + 1

do Format-Number(#Empl_RCD,$EmplRcd,'888')
let $EmplID_Rcd = $Empl_ID || '-' || $EmplRcd

print   $EmplID_Rcd        (+1,{cole0})
print   $Empl_Name                  ( 0,{cole1},29)
print   $B_DT1          ( 0,{cole2})
print   $E_DT1          ( 0,{cole3})
print   $Err_Msg                        ( 0,{cole4})
end-procedure print-Error
!****************************************************************************
begin-procedure print-Summary

Use-Report report2

if #Err_Cnt > 0
  new-page
  let $MerkErr = 'Y'
end-if

do              format-number(#anzrec,$Record_Cnt,'999,999')
do              format-number(#Employee_Cnt,$Employee_Cnt,'999,999')
do              format-number(#Grand_Sum,$Total_Amt,'99,999,999.99')
do              format-number(#Cost_Cnt,$Cost_Cnt,'999,999')
do              format-number(#Salary_Cnt,$Salary_Cnt,'999,999')
do              format-number(#AHV_Cnt,$AHV_Cnt,'999,999')
do              format-datetime($ReportBeginDate,$Rpt_Fromdt,{DEFDATE},'','')
do              format-datetime($ReportEndDate,$Rpt_Todt,{DEFDATE},'','')

print   $HD_FROMDT                      (+2,{cole0})
print   $Rpt_Fromdt                             ( 0,{cole3})
print   $HD_TODATE                      (+1,{cole0})
print   $Rpt_Todt                               ( 0,{cole3})
print   $RECORD_COUNT_STR                               (+1,{cole0})
print   $Record_Cnt                             ( 0,{cole3})
print   $FILE_DIR_STR                           (+1,{cole0})
print   $Filename                               ( 0,{cole3})

print   $EMPL_COUNT_STR                         (+2,{cole0})
print   $Employee_Cnt                   ( 0,{cole3})

print   $TOTAL_REFUND_STR                               (+2,{cole0})
print   $Total_Amt                              ( 0,{cole3})

print   $DEPT_COUNT_STR                         (+2,{cole0})
print   $Cost_Cnt                               ( 0,{cole3})
print   $RATES_COUNT_STR                                (+1,{cole0})
print   $Salary_Cnt                             ( 0,{cole3})
print   $AHV_COUNT_STR                          (+1,{cole0})
print   $AHV_Cnt                                ( 0,{cole3})

end-procedure print-Summary
!*********************************************************************
begin-procedure print-summ2
  let $t1_RA = '99'                             ! 1  recordart
  let $t2_MN = lpad($AHV_MBR_ID,6,'0')         ! 3  mitglieder-nummer
  let $t3_TD = datetostr(datenow(),'YYYYMMDD')  !14  tagesdat
  do format-number(#anzrec, $anzrec, '000000')  !22  anrec
  let $t4_AR = $anzrec
  let $t5_TE = {TEST}                           !28  test bei testlaeufen
  let $t6_RS = ' '                              !32  reserve

  write 2 from $t1_RA:2 $t2_MN:11 $t3_TD:8 $t4_AR:6 $t5_TE:4 $t6_RS:97
end-procedure
!****************************************************************************
begin-procedure Convert-To-Number($SourceStr,:$OutStr,$Type)
!$SourceStr:- is the Source string
!$OutStr:- is the Output string
!$Type:- If Type=0 then it is for Account field For Type=1 it is for ControlNbr
 let $TempStr1= $SourceStr
 let $TempStr2=''
 let $TempStr3=''
 let $OutStr = ''
 
 let #TempStr1Len = length($TempStr1)
 let #TempStr2Len =0
 
 let #StrCount=1
     
      While #StrCount <= #TempStr1Len

           let $TempStr2= substr($TempStr1,#StrCount,1)
             evaluate $TempStr2
               when ='0' 
               when ='1'
               when ='2'
               when ='3'
               when ='4'
               when ='5'
               when ='6'
               when ='7'
               when ='8'
               when ='9' 
                   let $TempStr3 = $TempStr3 ||$TempStr2
               
               when-other
                   show ' '            
              end-evaluate  
            
             Add 1 to #StrCount

       End-While
        let $OutStr = $TempStr3
       let #TempStr2Len = length($TempStr3)
       If $Type='0' and #TempStr2Len >7
                   let $OutStr= substr($TempStr3,1,7)
                
       else 
          If $Type='1' and #TempStr2Len > 3
                let $OutStr= '000'
          end-if
       end-if       
           
   
end-procedure
!****************************************************************************
begin-procedure Open-File
let $reportdir3 = $Output_Directory || 'GPCHEO01.DAT' ! oracle / Mss

      #ifdef MVS
      let $reportdir3 =  'GPCHEO01'                            ! MVS/ OS390 etc...
      #end-if

      #ifdef OS390
      let $reportdir3 =  'GPCHEO01'                            ! MVS/ OS390 etc...
      #end-if

      #ifdef OS400
      let $reportdir3 =  'GPCHEO01'                            ! MVS/ OS390 etc...
      #end-if


  let $Filename = $reportdir3
  display ' '
  show 'Opening file : ' $Filename
  OPEN $Filename AS {DatFileNum}  FOR-WRITING RECORD=141:FIXED STATUS=#fstat
  if #fstat <> 0
      display 'Error Opening Output Datafile : ' NOLINE
          display $Filename
          display 'Program Aborting'
          STOP
  end-if
end-procedure
!**********************************************************************
begin-procedure Close-File
   CLOSE  {DatFileNum}
end-procedure Close-File
!**********************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHEO01'
               do Get_Eng_GPCHEO01
               break
          when = 'GPCHTX02'
               do Get_Eng_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'GPCHSI08'
               do Get_Eng_GPCHSI08
               break
          when = 'GPCHBK02'
               do Get_Eng_GPCHBK02
               break
          when = 'GPCHAL04'
               do Get_Eng_GPCHAL04
               break
          when = 'ALL'
               do Get_Eng_GPCHEO01
               do Get_Eng_GPCHTX02
               do Get_Eng_GPCHGLOB
               do Get_Eng_GPCHSI08
               do Get_Eng_GPCHBK02
               do Get_Eng_GPCHAL04
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHEO01'
               do Get_Ger_GPCHEO01
               break
          when = 'GPCHTX02'
               do Get_Ger_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'GPCHSI08'
               do Get_Ger_GPCHSI08
               break
          when = 'GPCHBK02'
               do Get_Ger_GPCHBK02
               break
          when = 'GPCHAL04'
               do Get_Ger_GPCHAL04
               break
          when = 'ALL'
               do Get_Ger_GPCHEO01
               do Get_Ger_GPCHTX02
               do Get_Ger_GPCHGLOB
               do Get_Ger_GPCHSI08
               do Get_Ger_GPCHBK02
               do Get_Ger_GPCHAL04
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHEO01'
               do Get_Ita_GPCHEO01
               break
          when = 'GPCHTX02'
               do Get_Ita_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'GPCHSI08'
               do Get_Ita_GPCHSI08
               break
          when = 'GPCHBK02'
               do Get_Ita_GPCHBK02
               break
          when = 'GPCHAL04'
               do Get_Ita_GPCHAL04
               break
          when = 'ALL'
               do Get_Ita_GPCHEO01
               do Get_Ita_GPCHTX02
               do Get_Ita_GPCHGLOB
               do Get_Ita_GPCHSI08
               do Get_Ita_GPCHBK02
               do Get_Ita_GPCHAL04
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHEO01'
               do Get_Fra_GPCHEO01
               break
          when = 'GPCHTX02'
               do Get_Fra_GPCHTX02
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'GPCHSI08'
               do Get_Fra_GPCHSI08
               break
          when = 'GPCHBK02'
               do Get_Fra_GPCHBK02
               break
          when = 'GPCHAL04'
               do Get_Fra_GPCHAL04
               break
          when = 'ALL'
               do Get_Fra_GPCHEO01
               do Get_Fra_GPCHTX02
               do Get_Fra_GPCHGLOB
               do Get_Fra_GPCHSI08
               do Get_Fra_GPCHBK02
               do Get_Fra_GPCHAL04
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!**********************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut04.sqc'    ! get company informations
#include 'gpchut06.sqc'    ! get run control parameter values
#include 'gpchut07.sqc'    ! get Log
#include 'gpchut11.sqc'    !get Tax and Fak Values
#include 'number.sqc'      ! routines for formatting numbers.
#include 'datetime.sqc'    ! routines for formatting dates and times.
#include 'stdapi.sqc'      ! routines for process scheduler manipulation.
#include 'sqrtrans.sqc'    ! routines for language translation.
#include 'readxlat.sqc'    ! routines for xlattable translation.
#include 'curdttim.sqc'    ! get-current-datetime procedure
#include 'validdt.sqc'     ! validate date routine
#include 'datemath.sqc'    ! function for date-calculation
#include 'gpchglbs.sqc'    ! Get Strings Values for GPCHGLOB
#include 'gpcheo1s.sqc'    ! Get Strings Values for GPCHEO01
#include 'gpchtx2s.sqc'    ! Get Strings Values for GPCHTX02
#include 'gpchsi8s.sqc'    ! Get Strings Values for GPCHSI08
#include 'gpchbk2s.sqc'    ! Get Strings Values for GPCHBK02
#include 'gpchal4s.sqc'    ! Get Strings Values for GPCHAL04