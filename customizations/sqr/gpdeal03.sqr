!***********************************************************************
!  GPDEAL03:  Employee compensation -Lohnsummenmeldung pro Mitarbeiter *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:34:30                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc' !set environment
begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-Program

#include 'setup31.sqc'

!************************************************
begin-procedure Init-Report
  do Stdapi-Init
  move 'GPDEAL03' to $ReportID

  if $prcs_process_instance = ''
     input $von 'Datum von'
     input $bis 'Datum bis'
     input $Ctl_PayEntity  'Pay Entity        : '
     input #Ctl_Empl_Type_St 'Mitarbeiterart'
  else
     do Get-Report-Parameters
  end-if

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEAL02')
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE2_STR
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  if $von <> ''
    do Format-DateTime($von,$von_out,{DEFDATE},'','')
  end-if
  if $bis <> ''
    do Format-DateTime($bis,$bis_out,{DEFDATE},'','')
  end-if

end-procedure

Begin-Procedure Report-Translation
  do Get_Field_Information ('GPDEAL02', 'TITLE2_STR',           $TITLE2_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'PERSONAL_ID_STR', $PERSONAL_ID_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'COMPANY_STR',         $COMPANY_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'DATE_FROM_STR',     $DATE_FROM_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'DATE_TO_STR',         $DATE_TO_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'LOCATION_STR',       $LOCATION_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'AMOUNT_STR',           $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'TOTAL_STR',             $TOTAL_STR,#CW)
  do Get_Field_Information ('GPDEAL02', 'CITY_STR',               $CITY_STR,#CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',         $AMOUNT_SPEC,#CW)
end-Procedure Report-Translation

!************************************************
begin-procedure Get-Values
let $language_cd     = $PRCS_LANGUAGE_CD
let #Ctl_Empl_Type_St    = &GPDE_RUN_CNTL.GPDE_RC_EE_TYPE_ST
let $von       = &GPDE_RUN_CNTL.GPDE_RC_FROM_DT
let $bis       = &GPDE_RUN_CNTL.GPDE_RC_TO_DT
let $Ctl_PayEntity        = RTRIM(&GPDE_RUN_CNTL.PAY_ENTITY,' ')

end-procedure

!************************************************
begin-procedure Init-Layout

#define col1  5
#define col2  35
#define col3  55
#define col4  75
#define col5  100

end-procedure

!************************************************
begin-heading  8
uppercase $ReportTitle
#include 'stdhdgtr.sqc'
position (-1,1)
print $DATE_FROM_STR        (,1)
print $von_out           (0,+1)
print $DATE_TO_STR       (+1,1)
print $bis_out              (0,+1)
print $AMOUNT_SPEC1     (0,1)  center
print '_' (+2,1,124) fill
print $COMPANY_STR          (+1,{col1})
print $PERSONAL_ID_STR      (,{col2})
print $LOCATION_STR         (,{col3})
print $CITY_STR             (,{col4})
print $AMOUNT_STR           (,{col5})
print '_'      (+1,1,124) fill
end-heading

!**************************************************
begin-footing 2
print $VersionBez (+1,90)
end-footing
!**************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
let $VersionBez = $Bezeichn || ' ' || $VersionsNr
end-procedure
!**************************************************
begin-procedure Process-Main
do Get_VersionNr
do format-datetime($von,$Start_Date1,{DEFDATE},'','')
do format-datetime($bis,$Last_Date1,{DEFDATE},'','')

do format-datetime($bis,$LastD,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $LastD >= $Stichtag
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
 let $ToCurrency = 'EUR'
else
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
 let $ToCurrency = 'DEM'
end-if

let #Brutto1 = 0
let #Brutto11 = 0
let #Brutto_Gesamt = 0
let $Categ_check = 'N'
let $Nodata = 'Y'
let $Zero_Value = 'Y'

begin-SELECT
PBD.EMPLID     ()  ON-BREAK level=1 print = never after = Print-Liste
PBD.LOCATION
PBD.CURRENCY_CD
PBD.CUR_RT_TYPE
PBD.GPDE_ASOF_DT_EX_RT
sum(RP0002.GPDE_RP_TOTGRSS)     &Summe
PBD.PRD_END_DT
PBD.EMPL_CTG
  let $Nodata = 'N'
  let $PrdEndDT              = &PBD.PRD_END_DT
  let $Empl_ID       = &PBD.EMPLID
  let $Current_Curr    = &PBD.CURRENCY_CD
  let $Current_RT_Type    = &PBD.CUR_RT_TYPE
  let $Current_DT_EX_RT   = &PBD.GPDE_ASOF_DT_EX_RT

  let $cat = rtrim(&PBD.EMPL_CTG, ' ')
  evaluate $cat
     when = '1'
     when = '01'
     when = '001'
     when = '2'
     when = '02'
     when = '002'
     let $Categ_check = 'Y'
     break
  when-other
    goto weiter
        break
  end-evaluate

  let #Brutto1          = 0

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&Summe,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#Brutto1,'F')
  else
     let #Brutto1          = &Summe
  end-if

  let #Brutto11 = #Brutto11 + #Brutto1
  let #Brutto_Gesamt = #Brutto_Gesamt + #Brutto1
  let $Location   = &PBD.LOCATION

  do Get-City
  weiter:
  if #Brutto11 > 0 or &Summe > 0
     let $Zero_Value = 'N'
  end-if

FROM PS_GPDE_RP_0001 PBD,PS_GPDE_RP_0002 RP0002

WHERE PBD.EMPLID      = RP0002.EMPLID
  AND PBD.CAL_RUN_ID     = RP0002.CAL_RUN_ID
  AND PBD.EMPL_RCD     = RP0002.EMPL_RCD
  AND PBD.GP_PAYGROUP    = RP0002.GP_PAYGROUP
  AND PBD.CAL_ID     = RP0002.CAL_ID
  AND PBD.RSLT_SEG_NUM    = RP0002.RSLT_SEG_NUM
  AND PBD.SEG_END_DT    = RP0002.SEG_END_DT
  AND PBD.PAY_ENTITY           = $Ctl_PayEntity
  AND PBD.EMPL_STATUS        = 'A'
  AND RP0002.GPDE_RP_TOTGRSS  > 0
  AND PBD.GPDE_AL_CPAY_ENDDT between $von  and  $bis
  AND (PBD.GPDE_AL_CPAY_ENDDT = (select max(PBD1.GPDE_AL_CPAY_ENDDT)
            from PS_GPDE_RP_0001 PBD1
            where PBD1.PAY_ENTITY = PBD.PAY_ENTITY AND
                      PBD1.EMPLID = PBD.EMPLID     AND
                  PBD1.PRD_END_DT = PBD.PRD_END_DT AND
                  PBD1.GPDE_AL_CPAY_ENDDT between $von  and  $bis ))

GROUP BY PBD.EMPLID,PBD.LOCATION,PBD.CURRENCY_CD,PBD.CUR_RT_TYPE,PBD.GPDE_ASOF_DT_EX_RT,PBD.PRD_END_DT,
         PBD.EMPL_CTG,RP0002.GPDE_RP_TOTGRSS
ORDER BY PBD.EMPLID,PBD.LOCATION,PBD.CURRENCY_CD,PBD.CUR_RT_TYPE,PBD.GPDE_ASOF_DT_EX_RT,PBD.PRD_END_DT

end-SELECT

do Print-Location-Sum
do Print_Info_User
end-procedure
!******************************************************************
begin-procedure Print_Info_User
!Display, if Reqired input on Run Control failed
if $Nodata = 'Y'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing input:'
   display '   Pay Entity: ' noline
   display $Ctl_PayEntity
   display '   From Date: ' noline
   display &GPDE_RUN_CNTL.GPDE_RC_FROM_DT
   display '   To Date: ' noline
   display &GPDE_RUN_CNTL.GPDE_RC_TO_DT
   display '-----------------------------------------------------'
end-if
!--------------------------------
!Display, if Reqired data in result tables failed
if $Categ_check = 'N' and $Nodata = 'N'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing Reason:'
   display 'The field EMPL_CTG in record PS_GPDE_RP_0001 must be have one '
   display 'of the folowing values: "1","01","001","2","02","002" '
   display '-----------------------------------------------------'
end-if

if $Zero_Value = 'Y' and $Nodata = 'N'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing Reason:'
   display 'The report select only rows whith value from the field '
   display 'GPDE_RP_TOTGRSS in record PS_GPDE_RP_0002 > 0 '
   display '-----------------------------------------------------'
end-if

end-procedure
!*******************************************************************
begin-procedure Get-City

begin-select
A.CITY
  let $City = &A.CITY
from PS_LOCATION_TBL A
where
A.LOCATION = $Location
end-select

end-procedure


!*******************************************************************
begin-procedure Print-Liste

if #Brutto11 > 0
   do Format-Number(#Brutto11,$number,'B99,999,999.99')

   print $Ctl_PayEntity    (+1,{col1})
   print $Empl_ID          (,{col2})
   print $Location         (,{col3})
   print $City             (,{col4})
   print $number           (,{col5})
end-if
let #Brutto11 = 0
end-procedure

!****************************************************
begin-procedure Print-Location-Sum
if #Brutto_Gesamt > 0
   print '____________________'    (+1,{col5})
   do Format-Number(#Brutto_Gesamt,$number,'B99,999,999.99')
   print $TOTAL_STR                (+2,{col4})
   print $number                   (,{col5})
end-if
end-procedure Print-Location-Sum
!****************************************************
#include 'gpdeut06.sqc'
#include 'gpdeut04.sqc'
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'datemath.sqc'  !routines for date arithmetic
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'

