!***********************************************************************
!  GPGBEPTD.SQR - ELEMENT SUMMARY - PERIOD DETAIL SQR                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:04:19                                 *
!       $Release:  HR92                                                *
!      $Revision:  101                                                 *
!
!***********************************************************************
! Date        Modification
! ----        ------------
!
!***********************************************************************

!Define Column Location Variables
#DEFINE POS0          55
#DEFINE POS1          10
#DEFINE POS1+1        11
#DEFINE POS2          30
#DEFINE POS3          55
#DEFINE POS4          75
#DEFINE POS5          90
#DEFINE POS6          115
#DEFINE POS7          134 !125
#DEFINE ROW0          3
#DEFINE ROW1          5
#DEFINE ROW2          6

!#Define debug_x
!#Define debug_y
!#define debugx
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Begin Report Section                                    !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
begin-report

   DO INIT-REPORT
!   DO PRINT-REPORT
   DO MAIN-REPORT

end-report


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Selects data from Run Control Page                      !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE INIT-REPORT

   DO Define-Prcs-Vars
   DO Get-Run-Control-Parms

BEGIN-SELECT on-error=ERROR-SQL
E.GP_PAYGROUP
E.CAL_RUN_ID
E.GP_ELN_SET
   
   LET $PNL_CAL_RUN_ID = RTRIM(&E.CAL_RUN_ID,' ')
   LET $PNL_PAYGROUP   = RTRIM(&E.GP_PAYGROUP,' ')
   LET $ELEMENT_SET    = RTRIM(&E.GP_ELN_SET,' ')

FROM  PS_GPGB_RNCTL_ES E
WHERE E.OPRID = $Prcs_OprID
AND E.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
END-SELECT

   SHOW 'CALENDAR RUN ID: ' $PNL_CAL_RUN_ID

END-PROCEDURE INIT-REPORT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Print Column Headings                                   !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!BEGIN-PROCEDURE PRINT-REPORT
Begin-Heading 5

    PRINT $ELEMENT_SET                      ( 1, {POS1}) BOLD
    PRINT ': PERIOD DETAIL'                 () BOLD
    print 'Date: '                          (  , {POS7}) bold

    Let $Curr_Date = edit(datenow(),'dd/mm/yyyy')
    print $Curr_Date                        ()

    print 'Calendar Run: '                  (+1, {POS1}) bold
    print $PNL_CAL_RUN_ID                   ()
    print 'Page: '                          (  , {POS7}) bold
    page-number                             ()
    print ' of '                            ()
    last-page                               ()

    PRINT 'Element'                         (+2, {POS1}) BOLD
    PRINT 'Element Description'             (  , {POS2}) BOLD
    PRINT '    Period Value'                (  , {POS3}) BOLD
    PRINT 'Number of'                       (  , {POS4}) BOLD      !Number of Employees
    PRINT 'Recipient'                       (  , {POS5}) BOLD
    PRINT '            BACS'                (  , {POS6}) BOLD
    PRINT 'Cheque/'                         (  , {POS7}) BOLD      !Cheque/Journal/Other
    PRINT 'Employees'                       (+1, {POS4}) BOLD      !Number of Employees
    PRINT 'Journal/Other'                   (  , {POS7}) BOLD      !Cheque/Journal/Other

End-Heading

!    PRINT 'ELEMENT SUMMARY: PERIOD DETAIL'  ({ROW0}, {POS0}) BOLD
!    PRINT 'Element'              ({ROW1}, {POS1}) BOLD
!    PRINT 'Element Description'  ({ROW1}, {POS2}) BOLD
!    PRINT '    Period Value'     ({ROW1}, {POS3}) BOLD
!    PRINT 'Number of'            ({ROW1}, {POS4}) BOLD      !Number of Employees
!    PRINT 'Recipient'            ({ROW1}, {POS5}) BOLD
!    PRINT 'BACS'                 ({ROW1}, {POS6}) BOLD
!    PRINT 'Cheque/'              ({ROW1}, {POS7}) BOLD      !Cheque/Journal/Other
!    PRINT 'Employees'            (+1,     {POS4}) BOLD      !Number of Employees
!    PRINT 'Journal/Other'        ( 0    , {POS7}) BOLD      !Cheque/Journal/Other


!END-PROCEDURE PRINT-REPORT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Main Procedure                                          !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE MAIN-REPORT

   DO FETCH-ELEMENT-SET

   DO FETCH-ELEMENT-GROUP

   DO UPDATE-PRCS-RUN-STATUS

END-PROCEDURE MAIN-REPORT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element Set:
! GP_ELN_SET_ATTR1   - Require grand total flag    - Y/N
! GP_ELN_SET_ATTR2   - Grand total label
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-SET

BEGIN-SELECT DISTINCT on-error=ERROR-SQL
A.PROCESS_INSTANCE                &A_PROCESS_INSTANCE
A.GP_ELN_SET_ATTR1                &A_GP_ELN_SET_ATTR1
A.GP_ELN_SET_ATTR2                &A_GP_ELN_SET_ATTR2

   Let $Grand_Total_Required   = Rtrim(&A_GP_ELN_SET_ATTR1,' ')
   Let $Grand_Total_Label      = Rtrim(&A_GP_ELN_SET_ATTR2,' ')

FROM
PS_GP_ELN_TMP A
WHERE
A.COUNTRY = 'GBR' AND
A.GP_ELN_SET = $ELEMENT_SET AND 
A.PROCESS_INSTANCE = 0
END-SELECT

END-PROCEDURE FETCH-ELEMENT-GROUP


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element Group:
! GP_ELN_LST_ATTR1   - Report Section
! GP_ELN_LST_ATTR2   - Section Sequence            - number
! GP_ELN_LST_ATTR3   - Sub total required flag     - Y/N
! GP_ELN_LST_ATTR4   - Sub total label
! GP_ELN_LST_ATTR5   - Include in grand total flag - Y/N
! GP_ELN_LST_ATTR6   - Contribution to grand total - A/S/Blank                     !
! GP_ELN_LST_ATTR7   - Show details flag           - Y/N
!
!This function prints the Element Group Headings         
!and calls the FETCH-ELEMENTS function to                
!do further processing                                   
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-GROUP

#ifdef debug_x
SHOW 'Fetch-Element-Group'
#end-if

Let #Report_Grand_Total = 0
Let #DoneFirstLine      = 0

BEGIN-SELECT DISTINCT on-error=ERROR-SQL
A.GP_ELN_LST_ATTR1                &A_GP_ELN_LST_ATTR1
A.GP_ELN_LST_ATTR2                
A.PIN_ELEM_GRP_NUM                &A_PIN_ELEM_GRP_NUM
A.GP_ELN_LST_ATTR3                &A_GP_ELN_LST_ATTR3
A.GP_ELN_LST_ATTR4                &A_GP_ELN_LST_ATTR4
A.GP_ELN_LST_ATTR5                &A_GP_ELN_LST_ATTR5
A.GP_ELN_LST_ATTR6                &A_GP_ELN_LST_ATTR6
A.GP_ELN_LST_ATTR7                &A_GP_ELN_LST_ATTR7

   Let $Report_Section         = Rtrim(&A_GP_ELN_LST_ATTR1,' ')
   Let $Sub_Total_Req          = Rtrim(&A_GP_ELN_LST_ATTR3,' ') 
   Let $Sub_Total_Label        = Rtrim(&A_GP_ELN_LST_ATTR4,' ')
   Let $Include_In_Grand_Total = Rtrim(&A_GP_ELN_LST_ATTR5,' ') 
   Let $Contribution_To_GT     = Rtrim(&A_GP_ELN_LST_ATTR6,' ') 
   Let $Show_Details           = Rtrim(&A_GP_ELN_LST_ATTR7,' ') 
   LET #Section_Sub_Total      = 0

   #ifdef debug_y
   SHOW 'SECTION >' $Report_Section
   #end-if

   IF $Report_Section <> ''
      If #DoneFirstLine = 0
         PRINT $Report_Section          (+1,{POS1}) BOLD
         Let #DoneFirstLine = 1
      Else
         PRINT $Report_Section          (+3,{POS1}) BOLD
      End-If
   END-IF

   DO FETCH-ELEMENTS

   #ifdef debug_y
   SHOW 'Section Sub Total >' #Section_Sub_Total
   #end-if

   If $Sub_Total_Req = 'Y'
      If $Show_Details = 'Y'
         PRINT $Sub_Total_Label      (+2,{Pos1})
         PRINT #Section_Sub_Total    ( 0,{Pos3})  edit 9,999,999,999.99
      Else
         PRINT #Section_Sub_Total    ( 0,{Pos3})  edit 9,999,999,999.99  BOLD 
      End-If
   End-If   

   If $Include_In_Grand_Total = 'Y'
      If $Contribution_To_GT = 'A'
         LET #Report_Grand_Total = #Report_Grand_Total + #Section_Sub_Total
      End-If
      If $Contribution_To_GT = 'S'
         LET #Report_Grand_Total = #Report_Grand_Total - #Section_Sub_Total
      End-If
   End-If

FROM
PS_GP_ELN_TMP A
WHERE
A.COUNTRY = 'GBR' AND
A.GP_ELN_SET = $ELEMENT_SET AND 
A.PROCESS_INSTANCE = 0
ORDER BY A.GP_ELN_LST_ATTR2
END-SELECT

If $Grand_Total_Required = 'Y'

   PRINT $Grand_Total_Label         (+2,{Pos1})
   PRINT #Report_Grand_Total        ( 0,{Pos3})  edit 9,999,999,999.99

End-If

END-PROCEDURE FETCH-ELEMENT-GROUP


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Element:                                                
! GP_ELN_PIN_ATTR1   - Element Description                
! GP_ELN_PIN_ATTR2   - Inlude in report flag     - Y/N
! GP_ELN_PIN_ATTR3   - Contribution to sub total - A/S/Blank       
! GP_ELN_PIN_ATTR4   - Suppress if no data flag  - Y/N       
!
!Fetches elements and prints values
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENTS

#ifdef debug_x
SHOW ' Fetch-Elements'
#end-if

Let #Max_Order       = 0
Let #PinElemGrpToUse = &A_PIN_ELEM_GRP_NUM
Let #ProcInstance    = &A_PROCESS_INSTANCE

BEGIN-SELECT on-error=ERROR-SQL
MAX(Z.GP_ORDER)          &Z_MAX_GP_ORDER

   Let #Max_Order    = &Z_MAX_GP_ORDER

   #ifdef debug_y
   SHOW '  #Max_Order > ' #Max_Order
   #end-if

FROM
PS_GP_ELN_TMP Z
WHERE
Z.PIN_ELEM_GRP_NUM = #PinElemGrpToUse AND
Z.COUNTRY          = 'GBR' AND
Z.GP_ELN_SET       = $ELEMENT_SET AND
Z.PROCESS_INSTANCE = #ProcInstance
END-SELECT

If #Max_Order <> 0
   !Detail elements have been specified
   Let $OrderBy = 'ORDER BY A.GP_ORDER'
Else
   !A nested element group has been used
   Let $OrderBy = 'ORDER BY B.PIN_NM'
End-If

BEGIN-SELECT on-error=ERROR-SQL
A.GP_ELN_PIN_ATTR1               &A_GP_ELN_PIN_ATTR1
A.GP_ELN_PIN_ATTR2               &A_GP_ELN_PIN_ATTR2
A.GP_ELN_PIN_ATTR3               &A_GP_ELN_PIN_ATTR3
A.GP_ELN_PIN_ATTR4               &A_GP_ELN_PIN_ATTR4
A.GP_ORDER
B.PIN_NUM                        &B_PIN_NUM
B.PIN_NM                         &B_PIN_NM
B.PIN_TYPE                       &B_PIN_TYPE

   Let $Element_Description = Rtrim(&A_GP_ELN_PIN_ATTR1,' ')
   Let $Include             = Rtrim(&A_GP_ELN_PIN_ATTR2,' ')
   Let $Contribution_To_ST  = Rtrim(&A_GP_ELN_PIN_ATTR3,' ') 
   Let $Suppress_If_No_Data = Rtrim(&A_GP_ELN_PIN_ATTR4,' ') 

   If #Max_Order = 0
      If $Element_Description     = ''
         Let $Element_Description = Rtrim(&B_PIN_NM,' ')
      End-If
      If $Include                 = ''
         Let $Include             = 'Y'
      End-If
      If $Contribution_To_ST      = '' 
         Let $Contribution_To_ST  = 'A' 
      End-If
      If $Suppress_If_No_Data     = 'N' 
         Let $Suppress_If_No_Data = 'N' 
      End-If
   End-If

   Let #Calc_Rslt_Val       = 0
   Let #Empl_Count          = 0
   Let $Got_Data            = 'N'
   Let $Got_Error           = 'N'
   Let $Recipient           = ''
   LET #Payment_Amount      = 0
   Let $Payment_Method      = ''

   Let #PIN_NUM  = &B_PIN_NUM
   LET $PIN_NM   = RTRIM(&B_PIN_NM,' ')
   LET $PIN_TYPE = RTRIM(&B_PIN_TYPE, ' ')

   #ifdef debug_y
   SHOW '  PIN NAME >' $PIN_NM    '<'
   SHOW '  PIN TYPE >' $PIN_TYPE  '<'
   SHOW '  PIN ELEM >' &B_PIN_NUM '<'
   #endif

   IF $Include = 'Y'
      
      EVALUATE $PIN_TYPE
         WHEN='DD'
            DO FETCH-ERNDED
            DO FETCH-RECIPIENT
            BREAK
         WHEN='ER'
            DO FETCH-ERNDED
            BREAK
         WHEN='AC'
            Let #PinToUse = &B_PIN_NUM
            DO CHECK-ACCUMULATOR
            BREAK
         WHEN-OTHER
            SHOW 'Unhandled type ' $PIN_TYPE ' for elem ' $PIN_NM ' in elemgrp used for section ' $Report_Section
            Let $Got_Error = 'Y'
            BREAK
      END-EVALUATE

      If $Got_Error = 'N'

         If $Contribution_To_ST = 'A'
            LET #Section_Sub_Total = #Section_Sub_Total + #Calc_Rslt_Val
            LET $Contribution_Symbol = '+'
         End-If
         If $Contribution_To_ST = 'S'
            LET #Section_Sub_Total = #Section_Sub_Total - #Calc_Rslt_Val
            LET $Contribution_Symbol = '-'
         End-If


         #ifdef debug_y
         SHOW 'Section Sub Total >' #Section_Sub_Total
         #end-if

         If $Show_Details = 'Y' AND ($Suppress_If_No_Data = 'N' OR ($Suppress_If_No_Data = 'Y' AND $Got_Data = 'Y'))

            PRINT $Contribution_Symbol    (+1,{POS1})
            PRINT $PIN_NM                 ( 0,{POS1+1})
            PRINT $Element_Description    ( 0,{POS2})
            PRINT #Calc_Rslt_Val          ( 0,{POS3})  edit 9,999,999,999.99
            PRINT #EMPL_COUNT             ( 0,{POS4})  edit 999,999
            PRINT $Recipient              ( 0,{POS5})
            If #Payment_Amount > 0
               PRINT #Payment_Amount      ( 0,{POS6})  edit 9,999,999,999.99
            End-If
            Let $PayMethod = ''
            DO Select_From_Xlat('PAYMENT_MTHD',$Payment_Method,$PayMethod,$Null)
            If $PayMethod <> ''
               PRINT $PayMethod           ( 0,{POS7})
            Else
               PRINT $Payment_Method      ( 0,{POS7})
            End-If

         End-If

      End-If

   END-IF

FROM
PS_GP_ELN_TMP A
, PS_GP_PIN B
WHERE
A.PIN_ELEM_GRP_NUM = #PinElemGrpToUse AND
A.PIN_NUM          = B.PIN_NUM AND
A.COUNTRY          = 'GBR' AND
A.GP_ELN_SET       = $ELEMENT_SET AND
A.PROCESS_INSTANCE = #ProcInstance
[$OrderBy]
END-SELECT

END-PROCEDURE FETCH-ELEMENTS


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE CHECK-ACCUMULATOR

!Check accumulator to ensure it is a PTD
!if not - put a message in the log and ignore

#ifdef debug_x
SHOW '  CHECK-ACCUMULATOR>PIN USED ' #PIN_NUM
#end-if

Let #GotAccum = 0

BEGIN-SELECT on-error=ERROR-SQL
AC.PIN_NUM

   Let #GotAccum = 1
   Let #PinToUse = &AC.PIN_NUM
   DO FETCH-TOTALS

FROM
PS_GP_ACCUMULATOR AC
WHERE
AC.PIN_NUM = #PIN_NUM AND
AC.ACM_PRD_OPTN = '2' !PTD Accumulator
END-SELECT

If #GotAccum = 0
   SHOW 'Accum ' $PIN_NM ' in section ' $Report_Section ' is ignored (for this report) because it is not a PTD accumulator'
   Let $Got_Error = 'Y'
End-If

END-PROCEDURE CHECK-ACCUMULATOR


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ERNDED

#ifdef debug_x
SHOW '  Fetch-ErnDed>PIN USED ' #PIN_NUM
#end-if

Let #GotAccum = 0

BEGIN-SELECT on-error=ERROR-SQL
P.PIN_NUM

   Let #GotAccum = 1
   Let #PinToUse = &P.PIN_NUM
   DO FETCH-TOTALS

FROM
PS_GP_ACCUMULATOR P,
PS_GP_AGEN_ACM_VW V
WHERE
V.PIN_NUM = #PIN_NUM AND
P.PIN_NUM = V.PIN_MBR_NUM AND
P.ACM_PRD_OPTN = '2' !PTD Accumulator
END-SELECT

If #GotAccum = 0
   SHOW 'No PTD accum defined for ' $PIN_NM ' in elemgrp used for ' $Report_Section ' - using element results'
   Let #PinToUse = #PIN_NUM
   DO FETCH-ELEMENT-TOTALS
End-If


END-PROCEDURE FETCH-ERNDED


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-TOTALS

#ifdef debug_y
SHOW '   Fetch-Totals>PIN USED ' #PinToUse
#endif

BEGIN-SELECT on-error=ERROR-SQL
SUM(C1.CALC_RSLT_VAL)          &C_CALC_RSLT_VAL
SUM(C1.USER_ADJ_VAL)           &C_USER_ADJ_VAL
FROM
PS_GP_RSLT_ACUM C1
WHERE
C1.PIN_NUM     = #PinToUse AND
C1.CAL_RUN_ID  = $PNL_CAL_RUN_ID AND
C1.GP_PAYGROUP = $PNL_PAYGROUP AND
C1.ORIG_CAL_RUN_ID=$PNL_CAL_RUN_ID AND
(C1.CALC_RSLT_VAL <> 0 OR
C1.USER_ADJ_VAL <> 0)
END-SELECT

BEGIN-SELECT on-error=ERROR-SQL
COUNT(DISTINCT C2.EMPLID)      &EMPL_COUNT
FROM
PS_GP_RSLT_ACUM C2
WHERE
C2.PIN_NUM     = #PinToUse AND
C2.CAL_RUN_ID  = $PNL_CAL_RUN_ID AND
C2.GP_PAYGROUP = $PNL_PAYGROUP AND
C2.ORIG_CAL_RUN_ID=$PNL_CAL_RUN_ID AND
(C2.CALC_RSLT_VAL <> 0 OR
C2.USER_ADJ_VAL <> 0)
END-SELECT

   Let #Calc_Rslt_Val = &C_CALC_RSLT_VAL+&C_USER_ADJ_VAL
   If #Calc_Rslt_Val <> 0 
      Let #Empl_Count = &EMPL_COUNT
      Let $Got_Data   = 'Y'
   End-If

END-PROCEDURE FETCH-TOTALS


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-ELEMENT-TOTALS

#ifdef debug_y
SHOW '   Fetch-Element-Totals>PIN USED ' #PinToUse
#endif

BEGIN-SELECT on-error=ERROR-SQL
SUM(D1.CALC_RSLT_VAL)          &D_CALC_RSLT_VAL
SUM(D1.CALC_ADJ_VAL)           &D_CALC_ADJ_VAL
FROM
PS_GP_RSLT_ERN_DED D1
WHERE
D1.PIN_NUM     = #PinToUse AND
D1.CAL_RUN_ID  = $PNL_CAL_RUN_ID AND
D1.GP_PAYGROUP = $PNL_PAYGROUP AND
D1.ORIG_CAL_RUN_ID=$PNL_CAL_RUN_ID AND
(D1.CALC_RSLT_VAL <> 0 OR
D1.CALC_ADJ_VAL <> 0)
END-SELECT

BEGIN-SELECT on-error=ERROR-SQL
COUNT(DISTINCT D2.EMPLID)      &D_EMPL_COUNT
FROM
PS_GP_RSLT_ERN_DED D2
WHERE
D2.PIN_NUM     = #PinToUse AND
D2.CAL_RUN_ID  = $PNL_CAL_RUN_ID AND
D2.GP_PAYGROUP = $PNL_PAYGROUP AND
D2.ORIG_CAL_RUN_ID=$PNL_CAL_RUN_ID AND
(D2.CALC_RSLT_VAL <> 0 OR
D2.CALC_ADJ_VAL <> 0)
END-SELECT

   Let #Calc_Rslt_Val = &D_CALC_RSLT_VAL+&D_CALC_ADJ_VAL
   If #Calc_Rslt_Val <> 0 
      Let #Empl_Count = &D_EMPL_COUNT
      Let $Got_Data   = 'Y'
   End-If

END-PROCEDURE FETCH-ELEMENT-TOTALS


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Fetches general recipient                               !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-RECIPIENT

LET #Got_Recip = 0

BEGIN-SELECT on-error=ERROR-SQL
R.DESCR             &R_DESCR          
R.RECIPIENT_ID

   Let $Recipient = Rtrim(&R_DESCR,' ')
!   Let $Got_Data  = 'Y'
   Let #Got_Recip = 1
   DO FETCH-PAYMENT-INFO

FROM
PS_RECIPIENT R
, PS_GP_ERN_DED ED
WHERE
ED.PIN_NUM               = #PIN_NUM
AND ED.RECIPIENT_ID      = R.RECIPIENT_ID
AND R.RECIPIENT_CATEGORY = 'G'
END-SELECT

If #Got_Recip = 0
   DO FETCH-RECIPIENT-INDIVIDUAL
End-If

END-PROCEDURE FETCH-RECIPIENT


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Fetches individual recipient                              
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-RECIPIENT-INDIVIDUAL

BEGIN-SELECT on-error=ERROR-SQL
GPAY2.CAL_RUN_ID                 &GPAY2_CAL_RUN_ID
GPAY2.PAYMENT_MTHD               &GPAY2_PAYMENT_MTHD
SUM(GPAY2.GPGB_PMT_AMT)          &GPAY2_GPGB_PMT_AMT

   LET #Payment_Amount = &GPAY2_GPGB_PMT_AMT / 100
   Let $Payment_Method = Rtrim(&GPAY2_PAYMENT_MTHD,' ')
   Let $Recipient = '(Various)'
   If #Payment_Amount <> 0
      Let $Got_Data  = 'Y'
   End-If
   Let #Got_Recip = 1

FROM PS_GPGB_PAYMENT GPAY2
WHERE GPAY2.CAL_RUN_ID = $PNL_CAL_RUN_ID
AND GPAY2.RECIPIENT_ID IN (SELECT R.RECIPIENT_ID
                          FROM PS_GP_RCP_PYE_DTL R
                          WHERE R.PIN_NUM = &B_PIN_NUM)
GROUP BY GPAY2.CAL_RUN_ID, GPAY2.PAYMENT_MTHD
END-SELECT

If #Got_Recip = 0
   DO FETCH-RECIPIENT-INDIVIDUAL-GENERAL
End-If


END-PROCEDURE FETCH-RECIPIENT-INDIVIDUAL


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Fetches individual recipient                              
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-RECIPIENT-INDIVIDUAL-GENERAL

BEGIN-SELECT on-error=ERROR-SQL
GPAY3.CAL_RUN_ID                 &GPAY3_CAL_RUN_ID
GPAY3.PAYMENT_MTHD               &GPAY3_PAYMENT_MTHD
SUM(GPAY3.GPGB_PMT_AMT)          &GPAY3_GPGB_PMT_AMT

   LET #Payment_Amount = &GPAY3_GPGB_PMT_AMT / 100
   Let $Payment_Method = Rtrim(&GPAY3_PAYMENT_MTHD,' ')
   Let $Recipient = '(Various)'
   If #Payment_Amount <> 0
      Let $Got_Data  = 'Y'
   End-If
   Let #Got_Recip = 1

FROM PS_GPGB_PAYMENT GPAY3
WHERE GPAY3.CAL_RUN_ID = $PNL_CAL_RUN_ID
AND GPAY3.RECIPIENT_ID IN (SELECT R.RECIPIENT_ID
                           FROM PS_RECIPIENT R,
                                PS_GP_RSLT_ERN_DED ED
                           WHERE ED.PIN_NUM= &B_PIN_NUM
                             AND ED.CAL_RUN_ID = $PNL_CAL_RUN_ID
                             AND ED.RECIPIENT_ID = R.RECIPIENT_ID
                             AND R.RECIPIENT_CATEGORY = 'G')
GROUP BY GPAY3.CAL_RUN_ID, GPAY3.PAYMENT_MTHD
END-SELECT


END-PROCEDURE FETCH-RECIPIENT-INDIVIDUAL-GENERAL


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Fetches payment information                             !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE FETCH-PAYMENT-INFO

BEGIN-SELECT on-error=ERROR-SQL
GPAY.CAL_RUN_ID
GPAY.RECIPIENT_ID
GPAY.PAYMENT_MTHD        &GPAY_PAYMENT_MTHD
SUM(GPAY.GPGB_PMT_AMT)   &GPAY_GPGB_PMT_AMT

   LET #Payment_Amount = &GPAY_GPGB_PMT_AMT / 100
   Let $Payment_Method = Rtrim(&GPAY_PAYMENT_MTHD,' ')
   If #Payment_Amount <> 0
      Let $Got_Data = 'Y'
   End-If

FROM PS_GPGB_PAYMENT GPAY
WHERE GPAY.CAL_RUN_ID = $PNL_CAL_RUN_ID
AND GPAY.RECIPIENT_ID = &R.RECIPIENT_ID
GROUP BY GPAY.CAL_RUN_ID, GPAY.RECIPIENT_ID, GPAY.PAYMENT_MTHD
END-SELECT

END-PROCEDURE GET-PAYMENT-INFO


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!Error SQL                                               !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
BEGIN-PROCEDURE ERROR-SQL
        add 1 to #CountError
        show 'SQL Error -> ' $ProcedureName
        show 'SQL Error -> ' $ErrorMessage
        show 'SQL Error -> ' $SQL-ERROR
        stop
END-PROCEDURE ERROR-SQL


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!SQCs                                                    !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#include 'setenv.sqc'    ! Set environment
#include 'setup32.sqc'   ! Printer and page-size initialization
#include 'reset.sqc'     ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#Include 'stdapi.sqc'    ! Update Process API
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declaration
#include 'readxlat.sqc'  ! read translate table

#include 'datemath.sqc'  ! Routines for date manipulation
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declaration



!!!!!!!!!!!!!!!!!End Of Program!!!!!!!!!!!!!!!!!!!!!!!!!!!
