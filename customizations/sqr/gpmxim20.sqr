!***********************************************************************
!  GPMXIM20:  Instituto Mexicano Del Seguro Social,                    *
!             ARCHIVO DE IMPORTACION DE CREDITOS INFONAVIT             *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  31781263                                            *
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 13
#define c3 43
#define c4 58
#define c5 73
#define c6 91
#define c7 121
#define c8 132
#define c9 142
#define c10 156
#define c98 158
#define c99 167

begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL - DELEGACIÓN DEL IMSS'  to $ReportTitle1
  move   'CREDITOS INFONAVIT'                                     to $ReportTitle2
  move   'GPMXIM20' to $ReportID
  move   'Ver.2020 PUM37.01' to $ReportVersion
  display $ReportTitle1
  display $ReportTitle2
  display $ReportID
  display $ReportVersion
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Select-Parameters
  do Get-Company-Data-Mex
  do OPEN-FILE
  display ''
  display 'TRABAJADORES IMPROCEDENTES - | DATOS INVÁLIDOS |'
  
  Do Initial-Load
 
  close 1
  
  #ifdef UNIX
    show ' '
    Do ConvertUnixToDOSWin($FILE_NAME)
    show ' '
  #endif
  
end-procedure

!********************************************************
begin-procedure Select-Parameters
begin-select
SUARNCTL.OPRID
SUARNCTL.RUN_CNTL_ID
SUARNCTL.GPMX_INITIAL_LOAD
SUARNCTL.BEGIN_DT
SUARNCTL.END_DT
SUARNCTL.ESTABID
SUARNCTL.COMPANY
SUARNCTL.GPMX_CAPPED
SUARNCTL.LOCATION
SUARNCTL.BUSINESS_UNIT
SUARNCTL.GPMX_ESTABID_OPTN

  let $BegDt   = Rtrim(&SUARNCTL.BEGIN_DT, ' ')
  let $EndDt   = Rtrim(&SUARNCTL.END_DT, ' ')
  let $Company = Rtrim(&SUARNCTL.COMPANY, ' ')
  let $Estabid = rtrim(&SUARNCTL.ESTABID,' ')
  let $Capped  = rtrim(&SUARNCTL.GPMX_CAPPED,' ')
  let $Initial_Load = &SUARNCTL.GPMX_INITIAL_LOAD
  let $RCLocation   = Rtrim(&SUARNCTL.LOCATION, ' ')
  let $RCBusinessUnit = Rtrim(&SUARNCTL.BUSINESS_UNIT, ' ')
  Let $Estab_Opt      = &SUARNCTL.GPMX_ESTABID_OPTN
  
  Do CreateWhereClause

FROM  PS_GPMX_RC_SUA001  SUARNCTL
WHERE SUARNCTL.OPRID = $Prcs_OprID
      AND SUARNCTL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
end-procedure

!********************************************************
begin-heading 10
  print     'PeopleSoft'        (1,1)  center
  uppercase $ReportTitle1
  print     $ReportTitle1       (2,1)  center
  uppercase $ReportTitle2
  print     $ReportTitle2       (3,1)  center
  
  print 'Reporte:'              (4,1)
  print $ReportID               (,25)
  print 'Página:'               (,{c98})
  page-number                   (,{c99})
  
  print 'Compañía:'             (5,1)
  Let $CompanyName = upper($CompanyName)
  print $CompanyName            (,25)
  print 'Fecha:'                 (,{c98})
  print $ReportDate              (,{c99})
  
  if $print_Estab = 'Y'
    print 'Registro Patronal:'   (6,1)
    print $Estabid               (,25) edit XXXXXXXXXX-X
    Let $Estab_Name = upper($Estab_Name)
    print $Estab_Name            (,+2)
  else
    print ''                     (6,1)
  end-if
  print 'Hora:'                 (,{c98})
  print $ReportTime             (,{c99})

  
  print '=' (+1,1,176) fill
  print 'Código'                 (+1,{c1})
  print 'Nombre del Empleado'    (,{c2})
  print 'Registro'               (,{c3})
  print 'No. Seguridad'          (,{c4})
  print 'Número de'              (,{c5})
  print 'Tipo de'                (,{c6})
  print 'Fecha de'               (,{c7})
  print 'Tipo de'                (,{c8})
  print 'Valor'                  (,{c9})
  print 'Aplica Tabla'           (,{c10})
  
  print 'Empleado'               (+1,{c1})
  print 'Patronal IMSS'          (,{c3})
  print 'Social'                 (,{c4})
  print 'Crédito'                (,{c5})
  print 'Movimiento'             (,{c6})
  print 'Movimiento'             (,{c7})
  print 'Descuento'              (,{c8})
  print 'Descuento'              (,{c9})
  print 'Disminucion de %'       (,{c10})
  print '=' (+1,1,176) fill
end-heading

!********************************************************
begin-procedure Initial-Load
Let #Error = 0
Let #Total = 0
Let $Error = ''
begin-SELECT DISTINCT
A.EMPLID
   MOVE &A.EMPLID TO $Emplid
   print $Emplid (+1,{c1}) 
A.EMPL_RCD
   Let #Emplrcd = &A.EMPL_RCD
NAM.LAST_NAME
  Move &NAM.LAST_NAME   to $EmpPat
NAM.SECOND_LAST_NAME
  Move &NAM.SECOND_LAST_NAME   to $EmpMat
NAM.FIRST_NAME
  Move &NAM.FIRST_NAME   to $EmpName
NAM.MIDDLE_NAME
  Move &NAM.MIDDLE_NAME   to $EmpMName
  
  Let $Empl_name = RTRIM($EmpPat,' ') || ' ' || RTRIM($EmpMat, ' ') || ' ' || RTRIM($EmpName,' ') || ' ' || RTRIM($EmpMName,' ')
  Let $Empl_name = upper($Empl_name)
  print $Empl_Name (,{c2},29)

A.ESTABID   
A.LOCATION
   Let $Location = Rtrim(&A.LOCATION, ' ')
   If $Estab_Opt = 'L'
     do  Process-IMSSData
   Else
     Let $IMSSESTABID = Rtrim(&A.ESTABID, ' ')
     do Check-Characters($IMSSESTABID,$IMSSESTABID)
   End-if
     
   do Get-ImssID
   print $IMSSESTABID    (,{c3}) edit XXXXXXXXXX-X
   print $IMSS_ID        (,{c4})
L1.PIN_NUM
   Let #Pinnum = &L1.PIN_NUM
   
L1.GPMX_LOAN_NUM
  Let $LoanNumber = Rtrim(&L1.GPMX_LOAN_NUM, ' ')
  print $LoanNumber      (,{c5},10)
    
L3.GPMX_LOAN_ACTION
  Let $LoanAction = Rtrim(&L3.GPMX_LOAN_ACTION, ' ')
  do GetLoanActionDescr
  print $ActionDescr     (,{c6})
  
L3.GPMX_DATE

  Let $ActionDate = &L3.GPMX_DATE
  Let $ActDate = &L3.GPMX_DATE
  do Convert-To-DTU-Date($ActionDate,$ActionDateP)
  Do dtu-parse-date ($ActionDateP,#dtu-yr,#dtu-mo,#dtu-da)
  move  #dtu-yr to $dtu-yr 9999
  move  #dtu-da to $dtu-da 09
  move  #dtu-mo to $dtu-mo 09
  Let   $ActionDate = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
  Let   $ActionDateF = $dtu-da || $dtu-mo ||$dtu-yr
  
  print $ActionDate     (,{c7})

  Do GetLoanPay 
  LET #Length = 10
  LET $FieldIn = $LoanNumber
  DO FILL_LEADING
  LET $LoanNumber = $FieldOut
  
L1.GPMX_PAY_TYPE
   evaluate &L1.GPMX_PAY_TYPE
     when = '0010'
       move '1' to $PayType
       move #VALUE3 to #VALUE       
       if $ActionDateP <= '1998-01-31'
          Let $Flag = 'S'
       else
          Let $Flag = 'N'
       end-if
       print #VALUE          (,{c9}) edit 0099.9900
       break
     when = '0020'
       move '2' to $PayType
       move #VALUE1 to #VALUE
       if $ActionDateP <= '1998-01-31'
          Let $Flag = 'S'
       else
          Let $Flag = 'N'
       end-if
       print #VALUE          (,{c9}) edit 99999.9900
       break
     when = '0030'
       move '3' to $PayType
       move #VALUE2 to #VALUE
       if $ActionDateP <= '1998-01-31'
          Let $Flag = 'S'
       else
          Let $Flag = 'N'
       end-if
       print #VALUE          (,{c9}) edit 0999.9999
       break
    end-evaluate       
    
    print $PayType        (,{c8}) edit 9
    print $Flag           (,{c10}) edit 9
    
    Let #Total = #Total + 1
    do Validate-Line
    if $Insert = 'False'
      Let #Error = #Error + 1
    else
      do write-rcd
    end-if
    
FROM    PS_JOB             A,
        PS_NAMES         NAM,
        PS_GPMX_SDI_WA     T,
        PS_GPMX_LOAN      L1,
        PS_GPMX_LOAN_DTL  L3

WHERE   A.EMPLID    = NAM.EMPLID
AND     A.EMPLID    = T.EMPLID
AND     A.COMPANY   = $Company
AND     A.EFFSEQ    = (SELECT MAX(AA.EFFSEQ) 
                       FROM PS_JOB AA
                        WHERE AA.EMPLID = A.EMPLID
                        AND   AA.EFFDT  = A.EFFDT
                        AND   AA.EMPL_RCD = A.EMPL_RCD)
AND     A.EFFDT    = (SELECT MAX(A1.EFFDT) 
                       FROM PS_JOB A1
                        WHERE A1.EMPLID = A.EMPLID                        
                        AND   A1.EMPL_RCD = A.EMPL_RCD
                        AND   A1.EFFDT  <= $EndDt )  
AND     NAM.EFFDT = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                      WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                        AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                        AND NAM_ED.EFFDT <= $EndDt) 
AND     NAM.NAME_TYPE = 'PRI'                                               
AND     L1.EMPLID   = A.EMPLID
AND     L1.EMPL_RCD = A.EMPL_RCD
AND     L3.EMPLID   = L1.EMPLID
AND     L3.EMPL_RCD = L1.EMPL_RCD
AND     L3.PIN_NUM  = L1.PIN_NUM
AND     L3.GPMX_LOAN_NUM = L1.GPMX_LOAN_NUM
AND     T.SEQNUM    = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                       WHERE T2.EMPLID      = T.EMPLID
                       AND   T2.EMPL_RCD    = T.EMPL_RCD
                       AND   T2.GP_PAYGROUP = T.GP_PAYGROUP
                       AND   T2.EFFDT       = T.EFFDT
                       AND   T2.SUA_REASON_MEX = T.SUA_REASON_MEX)
                       
[$WhereClause]
end-SELECT
move #Error to $cError 9,999,999,999
move #Total to $cTotal 9,999,999,999
show '' $cError ' trabajadores improcedentes.'
show '' $cTotal ' trabajadores procesados.'

if #Error <> 0 or  #Total <> 0
   print $cError (+2,{c1})
   print ' trabajadores improcedentes.' (,)
   print $cTotal (+1,{c1})
   print ' trabajadores procesados.' (,)
end-if
end-procedure Initial-Load


!********************************************************
BEGIN-PROCEDURE OPEN-FILE
  LET $FILE_NAME =  '{FILEPREFIX}' || 'cred.txt' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  OPEN $FILE_NAME AS 1 FOR-WRITING RECORD=52:FIXED STATUS=#FILESTAT
END-PROCEDURE OPEN-FILE

!********************************************************
Begin-Procedure CreateWhereClause
let $WhereClause = ''
Let $print_Estab = 'N'
! let $WhereClause = $WhereClause || ' AND J2.EFFDT <= '''|| $EndDt || ''')'

if rtrim($Initial_Load, ' ') <> '0040'
   let $WhereClause = $WhereClause || ' AND  A.EFFDT = T.EFFDT AND A.ACTION_REASON IN (SELECT AC1.ACTION_REASON'
   let $WhereClause = $WhereClause || ' FROM PS_ACT_RSN_TBL_MEX AC1, PS_ACTN_REASON_TBL AC2 WHERE AC1.IMS_PRN_FORM_MEX IN (''0010'',''0040'') '  
   let $WhereClause = $WhereClause || ' AND AC1.ACTION = AC2.ACTION AND AC1.ACTION_REASON = AC2.ACTION_REASON'
   let $WhereClause = $WhereClause || ' AND AC2.EFF_STATUS = ''A'' AND AC2.EFFDT = (SELECT MAX(AC3.EFFDT)'
   let $WhereClause = $WhereClause || ' FROM PS_ACTN_REASON_TBL AC3 WHERE AC3.ACTION = AC2.ACTION'
   let $WhereClause = $WhereClause || ' AND AC3.ACTION_REASON = AC2.ACTION_REASON' 
   let $WhereClause = $WhereClause || ' AND AC3.EFFDT <= '''|| $EndDt ||'''))'
else
   let $WhereClause = $WhereClause || ' AND L3.GPMX_DATE BETWEEN '''|| $BegDt ||''' AND '''|| $EndDt ||''''
   let $WhereClause = $WhereClause || ' AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
   let $WhereClause = $WhereClause || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM AND T.SUA_REASON_MEX = TT.SUA_REASON_MEX'
   let $WhereClause = $WhereClause || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ')'  
end-if
 
If (rtrim($EndDt,' ') <> '' AND  rtrim($BegDt,' ') <> '') AND rtrim($Initial_Load, ' ')  = '0010' 
   let $WhereClause = $WhereClause || ' AND L3.GPMX_DATE BETWEEN '''|| $BegDt ||''' AND '''|| $EndDt ||''''
   let $WhereClause = $WhereClause || ' AND T.EFFDT   BETWEEN ' || '''' || $BegDt || '''' ||  ' AND ' || '''' ||  $EndDt || ''''   
   let $WhereClause = $WhereClause || ' AND T.SUA_REASON_MEX IN (''0010'',''0040'') '     
Else
   if rtrim($Initial_Load, ' ') = '0020'     
      let $WhereClause = $WhereClause || ' AND L3.GPMX_DATE <= '''|| $EndDt || ''''
      let $WhereClause = $WhereClause || ' AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
      let $WhereClause = $WhereClause || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM AND T.SUA_REASON_MEX = TT.SUA_REASON_MEX'
      let $WhereClause = $WhereClause || ' AND TT.EFFDT <= ' || '''' || $EndDt || '''' || ')'     
      let $WhereClause = $WhereClause || ' AND T.SUA_REASON_MEX IN (''0010'',''0040'') '
   end-if
End-If

If Rtrim($Estabid, ' ') <> ''
   Let $print_Estab = 'Y'
   If $Estab_Opt = 'L'
     let $WhereClause = $WhereClause || ' AND A.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
     let $WhereClause = $WhereClause || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
     let $WhereClause = $WhereClause || ' AND LOC.SETID = A.SETID_LOCATION AND LOC.LOCATION = A.LOCATION'
     let $WhereClause = $WhereClause || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
     let $WhereClause = $WhereClause || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'
   Else
    let $WhereClause = $WhereClause || ' AND A.ESTABID = ''' || $Estabid || ''' ' 
  End-if
end-if
  
If Rtrim($RCLocation, ' ') <> ''
   let $WhereClause = $WhereClause || ' AND A.LOCATION = ' || '''' ||$RCLocation || ''''
end-if  

If Rtrim($RCBusinessUnit, ' ') <> ''
   let $WhereClause = $WhereClause || ' AND A.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
end-if  
 
 
! ********** Debug Section
  #debug show ' '
  #debug show '$WhereClause: ' $WhereClause
! **********
 
 
end-procedure

!********************************************************
begin-procedure Process-IMSSData
Let $IMSSESTABID = ''
begin-SELECT
IMSS.ESTABID,
  Let $IMSSESTABID = Rtrim(&IMSS.ESTABID, ' ')
FROM  PS_ESTAB_TBL IMSS,
      PS_LOCATION_TBL LOC
WHERE IMSS.ESTABID = LOC.ESTABID
  AND LOC.LOCATION = $Location
  AND LOC.EFFDT = (SELECT MAX(L.EFFDT)
                   FROM   PS_LOCATION_TBL L
                   WHERE  L.LOCATION = LOC.LOCATION)
  AND IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  ESTABID = IMSS.ESTABID)
end-SELECT
do Check-Characters($IMSSESTABID,$IMSSESTABID)
end-procedure

!**********************************************************
begin-procedure Get-ImssID
Let $IMSS_ID = '00000000000'
begin-select
IM.NATIONAL_ID
    let $IMSS_ID = &IM.NATIONAL_ID
FROM PS_PERS_NID IM WHERE IM.NATIONAL_ID_TYPE='IMSS' AND IM.EMPLID=$Emplid AND IM.COUNTRY='MEX'
end-select
end-procedure

!**********************************************************
begin-procedure GetLoanActionDescr
Let $ActionDescr = ''
begin-select
XL.XLATLONGNAME
   Let $ActionDescr = Rtrim(&XL.XLATLONGNAME,' ')
FROM PSXLATITEM XL 
WHERE XL.FIELDNAME = 'GPMX_LOAN_ACTION'
AND XL.FIELDVALUE = $LoanAction
AND XL.EFF_STATUS = 'A'
AND XL.EFFDT <= (SELECT MAX(XL2.EFFDT) FROM PSXLATITEM XL2 WHERE
XL.FIELDNAME = XL2.FIELDNAME
AND XL.FIELDVALUE = XL2.FIELDVALUE
AND XL2.EFFDT <= $EndDt)
end-select

begin-select
XLL.XLATLONGNAME
   Let $ActionDescr = Rtrim(&XLL.XLATLONGNAME,' ')
FROM PSXLATITEMLANG XLL 
WHERE XLL.FIELDNAME = 'GPMX_LOAN_ACTION'
AND XLL.FIELDVALUE = $LoanAction
AND XLL.EFFDT <= (SELECT MAX(XLL2.EFFDT) FROM PSXLATITEM XLL2 WHERE
XLL.FIELDNAME = XLL2.FIELDNAME
AND XLL.FIELDVALUE = XLL2.FIELDVALUE
AND XLL2.EFFDT <= $EndDt)
AND LANGUAGE_CD = $curr_language_cd
end-select
end-procedure

begin-procedure GetLoanPay
Let #VALUE1 = 0
Let #VALUE2 = 0
Let #VALUE3 = 0
BEGIN-SELECT  
L2A.PAYMENT_AMOUNT
L2A.GPMX_X_MIN_WAGES
L2A.GPMX_INFONAVIT_PCT
  move &L2A.PAYMENT_AMOUNT to #VALUE1
  move &L2A.GPMX_X_MIN_WAGES to #VALUE2
  move &L2A.GPMX_INFONAVIT_PCT to #VALUE3
FROM PS_GPMX_LOAN_PAY L2A
WHERE L2A.EMPLID = $Emplid
AND L2A.EMPL_RCD = #Emplrcd
AND L2A.PIN_NUM = #Pinnum
AND L2A.GPMX_LOAN_NUM = $LoanNumber
AND L2A.BGN_DT >= $ActDate 
AND L2A.END_DT IS NULL
END-SELECT
BEGIN-SELECT  
L2.PAYMENT_AMOUNT
L2.GPMX_X_MIN_WAGES
L2.GPMX_INFONAVIT_PCT
  move &L2.PAYMENT_AMOUNT to #VALUE1
  move &L2.GPMX_X_MIN_WAGES to #VALUE2
  move &L2.GPMX_INFONAVIT_PCT to #VALUE3
FROM PS_GPMX_LOAN_PAY L2 
WHERE L2.EMPLID = $Emplid
AND L2.EMPL_RCD = #Emplrcd
AND L2.PIN_NUM = #Pinnum
AND L2.GPMX_LOAN_NUM = $LoanNumber
AND L2.END_DT >= $ActDate
END-SELECT
end-procedure


!**********************************************************
Begin-Procedure FILL_LEADING
  LET $FieldIn  = RTRIM($FieldIn,' ')
  LET $FieldIn  = LTRIM($FieldIn,' ')
  LET $FieldOut = ''
  LET #FieldLength = LENGTH($FieldIn) 
  LET #SPACES = #Length - #FieldLength
  LET #CONT = 1
  WHILE #CONT <= #SPACES
      LET $FieldOut = LTRIM($FieldOut,' ') || '0'
      ADD 1 TO #CONT
  END-WHILE
  LET $FieldOut = $FieldOut || $FieldIn
  Let $FieldIn = ''
End-Procedure FILL_LEADING

!**********************************************************
begin-procedure Validate-Line
Let $Insert = 'True'
Let $Error = ''
if rtrim($IMSSESTABID , ' ') = ''
   Let $Error = $Error || ' | Registro Patronal' 
   Let $Insert = 'False'
end-if
if rtrim($IMSS_ID , ' ') = '00000000000'
   Let $Error = $Error || ' | No. Segurdidad Social' 
   Let $Insert = 'False'
end-if
if rtrim($LoanNumber , ' ') = ''
   Let $Error = $Error || ' | Número préstamo'
   Let $Insert = 'False'
end-if
if rtrim($LoanAction , ' ') = ''
   Let $Error = $Error || ' | Acción préstamo'
   Let $Insert = 'False'
end-if
if rtrim($ActionDateF , ' ') = ''
   Let $Error = $Error || ' | Fecha acción préstamo'
   Let $Insert = 'False'
end-if
if $Insert = 'False'
   Let $Error = rtrim($Emplid, ' ') || $Error
   show $Error
end-if
end-procedure Validate-Line

!**********************************************************
begin-procedure Write-Rcd
Let #VALUE_INT = TRUNC(#VALUE,0)
Let $VALUE_INT = EDIT(#VALUE_INT,'0000')

Let #VALUE_DEC = #VALUE - #VALUE_INT
Let #VALUE_DEC = #VALUE_DEC * 10000
IF #VALUE_DEC = 0
  Let $VALUE_DEC = EDIT(#VALUE_DEC,'0000')
  Let $VALUE_DEC = SUBSTR($VALUE_DEC,1,4)
ELSE
  Let $VALUE_DEC = EDIT(#VALUE_DEC,'9999')
  Let $VALUE_DEC = SUBSTR($VALUE_DEC,1,4)
END-IF


  
WRITE 1 FROM $IMSSESTABID:11     -
             $IMSS_ID:11         -
             $LoanNumber:10      -
             $LoanAction:2       -
             $ActionDateF:8      -
             $PayType:1          -
             $VALUE_INT:4        -
             $VALUE_DEC:4        -
             $Flag:1
end-procedure Write-Rcd

!**********************************************************
begin-procedure Check-Characters($Check, :$Check)
 Let $Check = translate($Check,'''',' ')
 Let $Check = translate($Check,'"',' ')
 Let $Check = translate($Check,'#',' ')
 Let $Check = translate($Check,'$',' ')
 Let $Check = translate($Check,'%',' ')
 Let $Check = translate($Check,'&',' ')
 Let $Check = translate($Check,'/',' ')
 Let $Check = translate($Check,'(',' ')
 Let $Check = translate($Check,')',' ')
 Let $Check = translate($Check,'*',' ')
 Let $Check = translate($Check,'+',' ')
 Let $Check = translate($Check,',',' ')
 Let $Check = translate($Check,';',' ')
 Let $Check = translate($Check,':',' ')
 Let $Check = translate($Check,'-',' ')
 Let $Check = translate($Check,'_',' ')
 Let $Check = translate($Check,'?',' ')
 Let $Check = translate($Check,'@',' ')
 Do convert-to-char($Check,$Check)
 uppercase $Check
end-procedure Check-Characters

#include 'reset.sqc'       !Reset printer procedure
#include 'curdttim.sqc'    !Get-Current-DateTime procedure
#include 'datetime.sqc'    !Routines for date and time formatting
#include 'number.sqc'      !Routines to format numbers
#include 'stdapi.sqc'      !Update Process API
#Include 'datemath.sqc'    !Routines for date math
#include 'getcomex.sqc'    !Get-Company-data-Mex
#include 'ctxrnctl.sqc'
#include 'mxfile01.sqc'  !File Utilities

