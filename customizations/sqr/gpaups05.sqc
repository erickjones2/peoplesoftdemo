!***********************************************************************
!  GPAUPS05: Convert Withholding Tax Amt to Words for Aus Group Certs  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2013/01/18:03:17:59                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

begin-procedure Wheld-Tax-In-Words

  move '' to $Million
  move '' to $thousands
  move '' to $hundreds
  move '' to $tens
  move '' to $units
  move '' to $cents

  move #Tax_Wheld to $Tax_Wheld 099999999.99
  let #counter = 0

  if #Tax_Wheld < 1.00
    move '' to $NetInWords
  else
    move '' to $NetInWords
    move $Tax_Wheld to $Input ~~x          !isolate Millions
    move 1 to #th

    if $Input <> '0'  or #counter > 0
       let $Million =  $Input
       add 1 to #counter
    end-if

    move $Tax_Wheld to $Input ~~~x         !isolate Hundred Thousands
    move 2 to #th

    if $Input <> '0'  or #counter > 0
      do Convert-thousand
      add 1 to #counter
    end-if

    move $Tax_Wheld to $Input ~~~~xx       !isolate Thousands
    move 3 to #th

    if $Input <> '0' or #counter > 0
      do Convert-thousand
      add 1 to #counter
    end-if

    let $NetInwords = $NetInWords || $Thousands
    move $Tax_Wheld to $Input ~~~~~~x      !isolate Hundreds

    if $Input <> '0' or #counter > 0
      do Convert-hundred
      add 1 to #counter
    end-if


    move $Tax_Wheld to $Input ~~~~~~~x     !isolate Tens

    if $Input <> '0'  or #counter > 0
      do Convert-ten
      add 1 to #counter
    end-if

    move $Tax_Wheld to $Input ~~~~~~~~x    !isolate Units

    if $Input <> '0'  or #counter > 0
      do Convert-unit
      add 1 to #counter
    end-if

 End-if

   move $Tax_Wheld to $input ~~~~~~~~~~xx  !Cents portion
   let $Cents = $Cents || $input
! Inorder to print Zeros in words if total tx amount is 0.00

If  Rtrim($thousands,' ') = ''
    concat 'Zero' with  $thousands
end-if

If  Rtrim($hundreds,' ') = ''
    concat 'Zero' with  $hundreds
end-if

If  Rtrim($tens,' ') = ''
    concat 'Zero' with $tens
end-if

If  Rtrim($units,' ') = ''
    concat 'Zero' with $units
end-if

end-procedure


begin-procedure Convert-thousand
     If #th=1
         move $Input to $Index x
         move $Index to #Index
         If #Index>0
            get $NumLit from NumberLits(#Index)
            let $Thousands = $Thousands || $NumLit
            let $Thousands = $Thousands || ' Thousand '
         end-if
     end-if

     If #th=2
         move $Input to $Index x
         move $Index to #Index
         If #Index>0
            get $NumLit from NumberLits(#Index)
            let $Thousands = $Thousands || $NumLit
            let $Thousands = $Thousands || ' Hundred '
         end-if
     end-if

     If #th=3
        move $Input to $Index xx
        move $Index to #Index

        if #Index>0
           If #Index < 21
              get $NumLit from NumberLits(#Index)
              let $Thousands = $Thousands || $NumLit
           else
              move #Index to $Thous 99
              move $Thous to $Input x~
              move $Input to $Index x
              concat '0' with $Index
              move $Index to #Index
              get $NumLit from NumberLits(#Index)
              let $Thousands = $Thousands || $NumLit
              move $Thous to $Input ~x
              move $Input to $Index x
              move $Index to #Index

              if #Index>0
                 get $NumLit from NumberLits(#Index)
                 let $Thousands = $Thousands || $NumLit
              end-if

           end-if

        end-if

     end-if

end-procedure


begin-procedure Convert-hundred
    move $Input to $Index x  !isolate the "hundreds" position
    do Append-Literal
    let $Hundreds = $Hundreds || $NumLit
end-procedure


begin-procedure Convert-ten
    move $Input to $Index x  !isolate the "tens" position
    do Append-Literal
    let $Tens = $Tens || $NumLit
end-procedure


begin-procedure Convert-unit
    move $Input to $Index x  !isolate the "units" position
    do Append-Literal
    let $Units = $Units || $NumLit
end-procedure


begin-procedure Append-Literal
  move $Index to #Index

  if #Index < 10
    get $NumLit from NumberLits(#Index)
  end-if

end-procedure
