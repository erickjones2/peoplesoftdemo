!***********************************************************************
! GPCHST01.SQR  : BESTA Employment Statistics(BESTA Beschäft.Statistik)*
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         
! license agreement containing restrictions on use and                 
! disclosure and are protected by intellectual property                
! laws. Except as expressly permitted in your license agreement        
! or allowed by law, you may not use, copy, reproduce,                 
! translate, broadcast, modify, license, transmit, distribute,         
! exhibit, perform, publish or display any part, in any form or        
! by any means. Reverse engineering, disassembly, or                   
! decompilation of this software, unless required by law for           
! interoperability, is prohibited.                                     
! The information contained herein is subject to change without        
! notice and is not warranted to be error-free. If you find any        
! errors, please report them to us in writing.                         
!                                                                      
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              
! All Rights Reserved.                                                 
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  23715322                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.     
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#define PAGE_PAPER_SIZE (A4)
#include 'setup31.sqc'

begin-setup
 create-array name=locn_check  size=100
     field = locnee:char   
     field = locno:number

declare-layout reportA
paper-size={PAGE_PAPER_SIZE}
orientation = PORTRAIT
line-height=9
char-width=4.32
left-margin=.05
right-margin=.05
end-declare

declare-layout reportB
paper-size={PAGE_PAPER_SIZE}
orientation = PORTRAIT
line-height=9
char-width=4.32
left-margin=.05
right-margin=.05
end-declare

declare-layout reportC
paper-size={PAGE_PAPER_SIZE}
orientation = PORTRAIT
line-height=9
char-width=4.32
left-margin=.05
right-margin=.05
end-declare

declare-report reportA
layout = reportA
end-declare

declare-report reportB
layout = reportB
end-declare

declare-report reportC
layout = reportC
end-declare

end-setup

!**********************************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
  
Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHST010_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql


end-PROGRAM
!**********************************************************************************************
begin-procedure Init-Report

  do Stdapi-Init
  move 'GPCHST01' to $ReportID

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
  end-if

      do Get-Output-Directory('GPCHST01',$Output_Directory,$prcs_no)

      let $reportdirA = $Output_Directory || 'GPCHST01_' || $prcs_no ! oracle / Mss

      #ifdef MVS
      let #pos  = instr($sqr-report,'GPCHST01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirA = $path || 'GPCHST01(GPCHST01)'
      #end-if

      #ifdef OS390
      let #pos  = instr($sqr-report,'GPCHST01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirA = $path || 'GPCHST01(GPCHST01)'

      #end-if

      #ifdef OS400
      let #pos  = instr($sqr-report,'GPCHST01',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirA = $path || 'GPCHST01(GPCHST01)'
      #end-if

      Use-Report reportA
      New-report $reportdirA

      !------------------------------------------------------------------------------

           let #pos1     = instr($prcs_no,'.',0)
           let #pos1     = #pos1 - 1
           let $prcs_no1 = substr($prcs_no,1,#pos1)


!     let $reportdirB = $Output_Directory || 'GPCHST1A.DAT' ! oracle / Mss                        ! FMB 20040509 C
      let $reportdirB = $Output_Directory || 'GPCHST1A_' || $prcs_no1 || '.DAT'  ! oracle / Mss     ! FMB 20040509 C
      let $reportdirC = $Output_Directory || 'GPCHST1B_' || $prcs_no1 || '.DAT'  ! oracle / Mss     ! FMB 20040509 C

      #ifdef MVS
         let $reportdirB =  'GPCHST1A'                            ! MVS/ OS390 etc...
         let $reportdirC =  'GPCHST1B'                            ! MVS/ OS390 etc...     ! FMB 20040509 C
      #end-if

      #ifdef OS390
         let $reportdirB =  'GPCHST1A'                            ! MVS/ OS390 etc...
         let $reportdirC =  'GPCHST1B'                            ! MVS/ OS390 etc...     ! FMB 20040509 C
      #end-if

      #ifdef OS400
         let $reportdirB =  'GPCHST1A'                            ! MVS/ OS390 etc...
         let $reportdirC =  'GPCHST1B'                            ! MVS/ OS390 etc...     ! FMB 20040509 C
      #end-if

       #debug show '$reportdirB ' $reportdirB
       #debug show '$reportdirC ' $reportdirC

      Use-Report reportB
      New-report $reportdirB

      Use-Report reportC                                      ! FMB 20040509 C
      New-report $reportdirC                                  ! FMB 20040509 C

end-procedure
!**********************************************************************************************
begin-procedure Get-Values
#Debug Show ' -> Get-Values '

   let $language_cd           = $PRCS_LANGUAGE_CD
   let $Ctl_GPCH_RC_SKILLED   = &GPCH_RUN_CNTL.GPCH_RC_SKILLED
   let $Ctl_GPCH_RC_TRAINED   = &GPCH_RUN_CNTL.GPCH_RC_TRAINED
   let $Ctl_GPCH_RC_UNSKILLED = &GPCH_RUN_CNTL.GPCH_RC_UNSKILLED
   let $Ctl_GPCH_RC_FORECAST  = &GPCH_RUN_CNTL.GPCH_RC_FORECAST
   let $Ctl_GPCH_RC_DESCR1    = &GPCH_RUN_CNTL.GPCH_RC_DESCR1
   let $Ctl_GPCH_RC_DESCR2    = &GPCH_RUN_CNTL.GPCH_RC_DESCR2
   let #Ctl_GPCH_RC_VACANT    = &GPCH_RUN_CNTL.GPCH_RC_VACANT

  let #Ctl_GPCH_RC_BRANCH    = &GPCH_RUN_CNTL.GPCH_RC_BRANCH
!   let $Ctl_GPCH_RC_BRANCH    = &GPCH_RUN_CNTL.GPCH_RC_BRANCH ! FMB 20040509 C
!FMB 20040509 introduced issued date from Run Control (reassigned GPCH_RC_ADJUST_DT)
   let $Ctl_GPCH_RC_ADJUST_DT = &GPCH_RUN_CNTL.GPCH_RC_ADJUST_DT
   let $Ctl_GPCH_RC_FROM_DT     = &GPCH_RUN_CNTL.GPCH_RC_FROM_DT
   let $Ctl_GPCH_AL_PROVIDER  = substr(&GPCH_RUN_CNTL.GPCH_AL_PROVIDER,1,6)
   let $Ctl_Company           = &GPCH_RUN_CNTL.COMPANY
   let $Setid                 = RTRIM(&GPCH_RUN_CNTL.SETID,' ')
   let $Location              = RTRIM(&GPCH_RUN_CNTL.LOCATION,' ')
   let $TempDate              = &GPCH_RUN_CNTL.GPCH_BK_GEN_DT
   let $BESTA_DTL             = &GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO
   
#Debug Show ' <- Get-Values '
end-procedure

!**********************************************************************************************
! Moved Get-Output-Directory into xxx.Sqc
!**********************************************************************************************
Begin-Procedure Process-Main
#Debug Show ' -> Process-Main '

!   if rtrim($Ctl_Curr_Pay_End_Dt,' ') <> ''

!      do ConvertToComponents($Ctl_Curr_Pay_End_Dt,$yys,$mms,$dds)
!FMB 20040509 substituted $Ctl_Curr_Pay_End_Dt by  $TempDate
   if rtrim($TempDate,' ') <> ''

      do ConvertToComponents($TempDate,$yys,$mms,$dds)

      let $Jahr = $yys

          Evaluate $mms
          when = '01'
          when = '02'
          when = '03'
              move '0331' to $mmA
              move ''     to $mmL
              move ''     to $BegQ
              move '1'    to $Quartal
              break
          when = '04'
          when = '05'
          when = '06'
              move '0630' to $mmA
              move '0331' to $mmL
              move '0401' to $BegQ
              move '2'    to $Quartal
              break
          when = '07'
          when = '08'
          when = '09'
              move '0930' to $mmA
              move '0630' to $mmL
              move '0701' to $BegQ
              move '3'    to $Quartal
              break
          when = '10'
          when = '11'
          when = '12'
              move '1231' to $mmA
              move '0930' to $mmL
              move '1001' to $BegQ
              move '4'    to $Quartal
              break
          End-evaluate

          if rtrim($mmA,' ') <> ''   ! To Get the Actual Quarter Date : $ActualQuarterDate
             let $ActualQuarterD = $yys  || $mmA  || '0000'
             do Format-DateTime($ActualQuarterD,$ActualQuarterDate, {DEFCMP},'','native')
          end-if

          if rtrim($mmL,' ') <> ''   ! To Get the Last Quarter Date : $LastQuarterDate
             let $LastQuarterD = $yys  || $mmL  || '0000'
             do Format-DateTime($LastQuarterD,$LastQuarterDate, {DEFCMP},'','native')
          end-if

          if rtrim($BegQ,' ') <> ''
             let $Cond_BegD = $yys  || $BegQ  || '0000'
             do Format-DateTime($Cond_BegD,$Cond_BegDate, {DEFCMP},'','native')
          end-if

   end-if

   !------------------------------------------------------------------------

   let $CompLocation = ''
   let $CompSetID    = ''
   let $StateCode    = ''

   let $Last_Quarter_flg   = 'N'
   let $Actual_Quarter_flg = 'N'

   if  rtrim($Ctl_Company,' ') = ''
       let $Company_Cond = ''
       let $Company_Cond1 = ''
   else
       let $Company_Cond = ' AND JB.COMPANY = ''' || $Ctl_Company ||  ''' '
       let $Company_Cond1 = ' AND CL.COMPANY = ''' || $Ctl_Company ||  ''' '
   end-if
 
   if rtrim($Setid,' ') = ''
       let $Setid_Cond = ''
   else
       let $Setid_Cond = ' AND CL.SETID = ''' || $Setid || ''' '
   end-if   

   if rtrim($Location,' ') = ''
       let $Location_Cond = ''
   else
       let $Location_Cond = ' AND JBC.LOCATION = ''' || $Location || ''' '
   end-if   

   do Open_File

do Select_Bracket
do Apprentice

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHST010_TMP (PROCESS_INSTANCE,COMPANY, SETID, LOCATION, EFFDT, GPCH_AL_BUR_NBR, GPCH_AL_BLG_NBR, GPCH_TX_VILLAGE_CD, GPCH_RC_WKHOURS, GPCH_RC_WKLESSONS)
SELECT [$prcs_process_instance], A.COMPANY, A.SETID, A.LOCATION, A.EFFDT, A.GPCH_AL_BUR_NBR, A.GPCH_AL_BLG_NBR, A.GPCH_TX_VILLAGE_CD, A.GPCH_RC_WKHOURS, A.GPCH_RC_WKLESSONS
FROM PS_GPCH_AL_COMPLOC A
WHERE A.COMPANY = $Ctl_Company AND A.SETID = $Setid
end-sql

 IF $BESTA_DTL <> 'J' 
   let $Ctl_Company1           = &GPCH_RUN_CNTL.COMPANY
   DO GET_COMPANY_BUR
 END-IF


Begin-Select DISTINCT
JB.COMPANY            !()on-break print=never procedure=Print-New-Page
JB.LOCATION           !()on-break print=never procedure=Print-New-Page
! FMB 20040509 substituted building source by Bracket
! JBC.BUILDING
!BD1.DATA_VAL2
CL.GPCH_AL_BUR_NBR 
CL.GPCH_AL_BLG_NBR
JB.SETID_LOCATION
JBC.STATE
CL.LOCATION 


    let $print_new_page = 'N'
    let $Print_Data_Flg = 'N'
    let $CLBurnbr_prev= $CLBurnbr

    let $Ctl_Company  = &JB.COMPANY
    let $CompLocation = &JB.LOCATION
    let $CLLocation = &CL.LOCATION 
    let $CompSetID    = &JB.SETID_LOCATION
    let $StateCode    = &JBC.STATE
!   let $CompBuilding = &JBC.BUILDING
    let $CompBuilding = &CL.GPCH_AL_BLG_NBR
    let $CLBurnbr = &CL.GPCH_AL_BUR_NBR
      
   
    IF $CLBurnbr_prev <> ''   
     IF $BESTA_DTL = 'J'
       IF $CLBurnbr_prev <> $CLBurnbr 
          let $print_new_page = 'Y'
       end-if
     end-if
    end-if

    let $Last_Quarter_flg   = 'Y'
    let $Actual_Quarter_flg = 'N'

        ! do Process_Each_Quarter

    let $Last_Quarter_flg   = 'N'
    let $Actual_Quarter_flg = 'Y'

   IF $BESTA_DTL = 'J'
    if $print_new_page = 'Y'
      if $ExtedDat = 'Y'
       do PrintData
       do PrintInterface
      end-if    
     do Print-New-Page
    end-if 
   end-if 
                
        do Process_Each_Quarter

    let $Last_Quarter_flg   = 'N'
    let $Actual_Quarter_flg = 'N'    
  
!FMB 20150617    if $ExtedDat = 'Y'

!FMB 20150617      do PrintData
!FMB 20150617      do PrintInterface

!FMB 20150617    end-if
    
!FMB 20150617    do Print-New-Page

FROM PS_JOB JB  , PS_LOCATION_TBL JBC, PS_GPCHST010_TMP CL
WHERE JB.LOCATION   = JBC.LOCATION
AND   JBC.SETID     = JB.SETID_LOCATION

AND   JB.EFFDT      = (SELECT MAX(EFFDT) FROM PS_JOB JB1
                       WHERE JB1.EMPLID    = JB.EMPLID
                       AND   JB1.EMPL_RCD  = JB.EMPL_RCD
                       AND   JB1.EFFDT    <= $TempDate)
AND   JB.EFFSEQ     = (SELECT MAX(EFFSEQ) FROM PS_JOB JB2
                       WHERE JB2.EMPLID    = JB.EMPLID
                       AND   JB2.EMPL_RCD  = JB.EMPL_RCD
                       AND   JB2.EFFDT     = JB.EFFDT )
and   JBC.EFFDT     = (select max(EFFDT) from PS_LOCATION_TBL JBC1
                       where JBC1.LOCATION = JBC.LOCATION
                                           and   JBC1.SETID    = JBC.SETID
                       and   JBC1.EFFDT  <= $TempDate)
[$Company_Cond]
[$Setid_Cond]
[$Location_Cond]

and  CL.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
and  CL.SETID = JBC.SETID
and  CL.LOCATION = JBC.LOCATION
and  CL.COMPANY = JB.COMPANY
AND  CL.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCHST010_TMP CL1
                     where  CL1.SETID = CL.SETID
                       and  CL1.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                       and  CL1.LOCATION = CL.LOCATION
                       and  CL1.COMPANY = CL.COMPANY
                       and  CL1.EFFDT<= $TempDate)
                       
!ORDER BY JB.COMPANY, JB.LOCATION
ORDER BY JB.COMPANY,CL.GPCH_AL_BUR_NBR, JB.LOCATION
End-Select

!FMB 20150617 - Begin

    if $ExtedDat = 'Y'
      do PrintData
      do PrintInterface
    end-if
    
!FMB 20150617 - End     do Print-New-Page

  close 10
    
  do Get-Building-Data
  close 20
  do Check-Location
  
  !do Check-Loctn-EE-Job
  do Check-Missing-Loctn-Setup
  
#Debug Show ' <- Process-Main '
End-Procedure Process-Main
!**********************************************************************************************
begin-procedure Get_Cross_Border_Data
#Debug Show ' -> Get_Cross_Border_Data '

  create-array name=CrossBorder size=2000
     field=EMPLID:CHAR

  let #Crscnt = 0

Begin-Select DISTINCT
CB.EMPLID

      let $CB_EMPLID = &CB.EMPLID
      put $CB_EMPLID INTO CrossBorder(#Crscnt) EMPLID
      let #Crscnt = #Crscnt + 1

FROM PS_VISA_PMT_DATA CB
WHERE CB.COUNTRY      = 'CHE'
AND   CB.DEPENDENT_ID = ' '
AND   CB.EFFDT        = (SELECT MAX(CB1.EFFDT) FROM PS_VISA_PMT_DATA CB1
                         WHERE CB.EMPLID = CB1.EMPLID
                         AND   CB1.EFFDT <= $Conditiondate)

AND  ( CB.EXPIRATN_DT is NULL or CB.EXPIRATN_DT >= $Conditiondate)
 AND  CB.VISA_PERMIT_TYPE like '%G%'
And exists ( select 'X' FROM  PS_CITIZEN_PSSPRT CIT1
 where CB.EMPLID = CIT1.EMPLID
  AND  CIT1.COUNTRY_PASSPORT <> 'CHE' and (CIT1.EXPIRATN_DT is NULL or CIT1.EXPIRATN_DT > $Conditiondate) )
And not exists ( select 'X' FROM  PS_CITIZEN_PSSPRT CIT1
 where CB.EMPLID = CIT1.EMPLID
  AND  CIT1.COUNTRY_PASSPORT = 'CHE' and (CIT1.EXPIRATN_DT is NULL or CIT1.EXPIRATN_DT > $Conditiondate) )

End-Select

#Debug Show ' <- Get_Cross_Border_Data '
End-Procedure Get_Cross_Border_Data

!**********************************************************************************************
begin-procedure Check_For_Cross_Border
#Debug Show '-> Check_For_Cross_Border  '  #Crscnt

  let #pi = 0
While #pi < #Crscnt

  get $CB1_EMPLID FROM  CrossBorder(#pi) EMPLID


  if $ActQuartr = 'N'

     if  rtrim($CB1_EMPLID,' ') = rtrim($ActEmplid,' ') AND $ActSex = 'M'
         add 1 to #CountMenCrsBdrLast
     end-if

     if  rtrim($CB1_EMPLID,' ') = rtrim($ActEmplid,' ') AND $ActSex = 'F'
         add 1 to #CountWomenCrsBdrLast
     end-if

  else
     

     if  rtrim($CB1_EMPLID,' ') = rtrim($ActEmplid,' ') AND $ActSex = 'M'   
         add 1 to #CountMenCrsBdrAct
     end-if

     if  rtrim($CB1_EMPLID,' ') = rtrim($ActEmplid,' ') AND $ActSex = 'F'
         add 1 to #CountWomenCrsBdrAct
     end-if

  end-if


  Add 1 to #pi

End-While

#Debug Show '-> Check_For_Cross_Border '
end-procedure Check_For_Cross_Border

!*************************************************************************
begin-procedure Print-New-Page
 if $ExtedDat = 'Y'
  new-page
 end-if
end-procedure
!*************************************************************************
begin-procedure Check-Location

 let $loc_check = ''
  
Begin-Select 
CLL.LOCATION

 LET $loc_check = RTRIM(&CLL.LOCATION,' ')
 
FROM PS_GPCHST010_TMP CLL
WHERE CLL.COMPANY      = $Ctl_Company
AND  CLL.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
AND  CLL.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCHST010_TMP CL1
                     where  CL1.SETID = CLL.SETID
                       and  CL1.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                       and  CL1.COMPANY = CLL.COMPANY
                       and  CL1.EFFDT<= $TempDate)
End-Select

         
 if $loc_check = ''
  show 'No Location defined in Company Location Table CHE for Company - ' $Ctl_Company
 end-if
 
end-procedure
!***********************************************************************************************
!begin-procedure Count-Locn
!
!let #j = 0
!let #counter = 0
! While #j < #i
!  get $JB_LOC1     from locn_check(#j) locnee
!  if #j = 0
!    let $JB_LOC_OLD = $JB_LOC1
!  end-if
!    if $JB_LOC1 = $JB_LOC_OLD
!        let #counter = #counter + 1
!    else
!        show 'Location ' $JB_LOC_OLD ' has ' #counter ' Employee'
!        let #counter = 1
!    end-if
!   let #j = #j + 1
!   let  $JB_LOC_OLD = $JB_LOC1
! end-while
! if $JB_LOC1 = $JB_LOC_OLD
!    show 'Location ' $JB_LOC1 ' has ' #counter ' Employee'
! else
!    show 'Location ' $JB_LOC_OLD ' has ' #counter ' Employee'
! end-if
!end-procedure
!**********************************************************************************************
!begin-procedure Check-Location-EE
!
! let $EE_check = ''
!  
!Begin-Select 
!CT.LOCATION
!
! LET $EE_check = RTRIM(&CT.LOCATION,' ')
!  
!FROM PS_GPCH_AL_COMPLOC CT
!WHERE CT.COMPANY      = $Ctl_Company
!and CT.LOCATION       = $JB_LOC
!AND  CT.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCH_AL_COMPLOC CL1
!                     where  CL1.SETID = CT.SETID
!                       and  CL1.COMPANY = CT.COMPANY
!                       and  CL1.EFFDT<= $TempDate)
!
!End-Select
! if $EE_check = '' 
!   put $JB_LOC     into locn_check(#i) locnee 
!   put 1     into locn_check(#i) locno
!   let #i = #i + 1
! end-if
!end-procedure
!**********************************************************************************************
!begin-procedure Check-Loctn-EE-Job
! let  #countEE = 0
! let $EE_check = ''
!  let #i = 0
!      
! put ''  into locn_check(0)  locnee
! put 0   into locn_check(0)  locno
! 
!Begin-Select 
!JE.LOCATION
!JE.EMPLID
!
! LET $JB_LOC = RTRIM(&JE.LOCATION,' ')
! LET $JB_EMPLID = RTRIM(&JE.EMPLID,' ')
!   do Check-Location-EE
!
!FROM PS_JOB JE
!WHERE JE.COMPANY        = $Ctl_Company
!and   JE.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB SJJJ
!                      WHERE SJJJ.EMPLID = JE.EMPLID
!                      AND   SJJJ.EMPL_RCD = JE.EMPL_RCD      
!                      AND   SJJJ.EFFDT <= $TempDate)
!order by JE.LOCATION
!End-Select
!    do Count-Locn
!end-procedure
!**********************************************************************************************
begin-procedure Check_Condition_Date($Holiday_Schedule,$LastQuarterDate,:$LastQuarter,:$WorkDay)
#Debug Show ' -> Check_Condition_Date: ' $Holiday_Schedule ', ' $LastQuarterDate

let $WorkDay = 'Y'
let $Existed = 'N'

begin-select DISTINCT
HL.HOLIDAY_SCHEDULE
HL.HOLIDAY

  let $Existed = 'Y'

FROM PS_HOLIDAY_DATE HL
WHERE HL.HOLIDAY_SCHEDULE = $Holiday_Schedule
and   HL.HOLIDAY          = $LastQuarterDate
end-select

if $Existed = 'Y'

  do Convert-To-DTU-Date($LastQuarterDate, $LastQuarter-DTU)
  do dtu-add-days($LastQuarter-DTU, -1, $LastQuarter-DTU1)
  do Convert-From-DTU-Date($LastQuarter-DTU1, $LastQuarter)
  let $WorkDay = 'N'

end-if

#Debug Show ' <- Check_Condition_Date '
end-procedure
!**********************************************************************************************
begin-procedure Get-Village-Code
#Debug Show ' -> Get-Village-Code '

    let $VillageCode      = ''
    let $BUR_Nbr          = ''
    let $Holiday_Schedule = ''
#Debug show 'LOCATION_B Before select ' ' $Ctl_Company= ' $Ctl_Company '$BUR_Nbr= ' $BUR_Nbr

!FMB substitute Bracket CH_RP_BURNR by LOCATION_B_TBL (future) - BEGIN
!begin-select

!CHLB.GPCH_RP_BURNR
!CHLOC.POSTAL
!CHLOC.HOLIDAY_SCHEDULE

!    let $BUR_Nbr          = edit(&CHLB.GPCH_RP_BURNR,'999999999')

!    let $VillageCode      = rtrim(&CHLOC.POSTAL,' ')
!    let $Holiday_Schedule = &CHLOC.HOLIDAY_SCHEDULE



!from PS_LOCATION_TBL CHLOC, PS_LOCATION_B_CHE CHLB
!where CHLOC.SETID    = $CompSetID
!and   CHLOC.LOCATION = $CompLocation
!and   CHLOC.EFFDT    = (select max(EFFDT) from PS_LOCATION_TBL CHLOC1
!                        where CHLOC1.SETID    = CHLOC.SETID
!                        and   CHLOC1.LOCATION = CHLOC.LOCATION
!                        and   CHLOC1.EFFDT   <= $TempDate)
!and   CHLOC.SETID  = CHLB.SETID
!and   CHLOC.LOCATION  = CHLB.LOCATION
!and   CHLOC.EFFDT  = CHLB.EFFDT
!and   CHLB.COMPANY  = $Ctl_Company

!end-select
!FMB substitute Bracket CH_RP_BURNR by LOCATION_B_TBL (future) - END

begin-select

CL.GPCH_AL_BLG_NBR       &CL.GPCH_AL_BLG_NBR1         !Building
CL.GPCH_AL_BUR_NBR       &CL.GPCH_AL_BUR_NBR1         !BurNbr
CHLOC.POSTAL
CHLOC.HOLIDAY_SCHEDULE
    
    let #BUR_Nbr          = &CL.GPCH_AL_BUR_NBR1
    let $BUR_Nbr          = &CL.GPCH_AL_BUR_NBR1
    
    let $VillageCode      = rtrim(&CHLOC.POSTAL,' ')
    let $Holiday_Schedule = &CHLOC.HOLIDAY_SCHEDULE

from PS_LOCATION_TBL CHLOC,PS_GPCHST010_TMP CL
where CHLOC.SETID    = $CompSetID
and   CHLOC.LOCATION = $CompLocation
and   CHLOC.EFFDT    = (select max(EFFDT) from PS_LOCATION_TBL CHLOC1
                        where CHLOC1.SETID    = CHLOC.SETID
                        and   CHLOC1.LOCATION = CHLOC.LOCATION
                        and   CHLOC1.EFFDT   <= $TempDate)

 ! Join GPCH_AL_COMPLOC to Location_Tbl
   and  CL.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
   and  CL.SETID = CHLOC.SETID
   and  CL.LOCATION = CHLOC.LOCATION
   and  CL.COMPANY = $Ctl_Company

 ! Select most recent GPCH_AL_COMPLOC entries
   AND  CL.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCHST010_TMP CL1
                     where  CL1.SETID = CL.SETID
                       and  CL1.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                       and  CL1.LOCATION = CL.LOCATION
                       and  CL1.COMPANY = CL.COMPANY
                       and  CL1.EFFDT<= $TempDate)
end-select

    if isblank($BUR_Nbr)
       let #BUR_Nbr = 99999999 !'99999999'
    end-if

#Debug Show ' <- Get-Village-Code '
end-procedure
!**********************************************************************************************
begin-procedure Process_Each_Quarter
#Debug Show '-> Process_Each_Quarter '

   let $ExtedDat             = 'N'
  !do Initial_Strings
   move 'GPCHST01' to $ReportID
   
   evaluate $language_cd   
       when = 'ENG'
       when = 'GER'
       when = 'ITA'          
       when = 'FRA'     
       break   
       when-other
       let $language_cd = 'GER' 
       break   
   end-evaluate
   
   do Init_Report_Translation ($ReportID, $language_cd)
   do Gpce_Init_Report_Translation ($ReportID, $language_cd)
   do Report-Translation

   if $Last_Quarter_flg   = 'Y' AND rtrim($LastQuarterDate,' ') <> ''

      let $ActQuartr = 'N'
      let $TempDate = $LastQuarterDate

   end-if

   if $Actual_Quarter_flg = 'Y' AND rtrim($ActualQuarterDate,' ') <> ''

      let $ActQuartr = 'Y'
      let $TempDate = $ActualQuarterDate

   end-if
   
! FMB 20150617

if $BESTA_DTL <> 'J'
  Goto SkipInit1
else
  if $print_new_page <> 'Y'
    Goto SkipInit1
  end-if
end-if
 
   if $ActQuartr = 'N'

      let #CountMen1Last        = 0
      let #CountMen2Last        = 0
      let #CountMen3Last        = 0
      let #TotalMenLast         = 0

      let #CountWomen1Last      = 0
      let #CountWomen2Last      = 0
      let #CountWomen3Last      = 0
      let #TotalWomenLast       = 0

      let #TotalPeopleLast      = 0

      let #CountMenCrsBdrLast   = 0
      let #CountWomenCrsBdrLast = 0
      let #TotalCrossPeopleLast = 0

   else

      let #CountMen1Act         = 0
      let #CountMen2Act         = 0
      let #CountMen3Act         = 0
      let #CountMen4Act         = 0 
      let #CountMenFTEAct       = 0 
      let #TotalMenAct          = 0

      let #CountWomen1Act       = 0
      let #CountWomen2Act       = 0
      let #CountWomen3Act       = 0
      let #CountWomen4Act       = 0
      let #CountTotalFTEAct     = 0
      let #CountWomenFTEAct     = 0
      let #TotalWomenAct        = 0

      let #TotalPeopleAct       = 0

      let #CountMenCrsBdrAct    = 0
      let #CountWomenCrsBdrAct  = 0
      let #TotalCrossPeopleAct  = 0

      let #CountMen1ActCHE      = 0
      let #CountMen2ActCHE      = 0
      let #CountMen3ActCHE      = 0
      let #CountMen1ActNotCHE   = 0
      let #CountMen2ActNotCHE   = 0
      let #CountMen3ActNotCHE   = 0
      let #CountWomen1ActCHE    = 0
      let #CountWomen2ActCHE    = 0
      let #CountWomen3ActCHE    = 0
      let #CountWomen1ActNotCHE = 0
      let #CountWomen2ActNotCHE = 0
      let #CountWomen3ActNotCHE = 0
      let #Total-1Act           = 0
      let #Total-2Act           = 0
      let #Total-3Act           = 0
      let #CountMenApprAct      = 0
      let #CountWomenApprAct    = 0
      let #TotalApprAct         = 0

   end-if
   !-------------------------------------------

SkipInit1:

   do Get-Village-Code

   do Get-Location-Address($CompLocation,$TempDate, $ADDLINE1, $ADDLINE2, $ADDLINE3, $ADDLINE31, $ADDLINE4,
                            $ADDLINE5,$ADDLINE6,$PAYENTITY_DESCR,$PAYENTITY_DESCRSHORT,$CITY,$STATE,$POSTAL)

      let $WorkDay = 'N'

      while $WorkDay = 'N'

            do Convert-To-DTU-Date($TempDate, $LastQuarter-DTU)
            do dtu-dayofweek#($LastQuarter-DTU, #dtu_dayofweek)

            if #dtu_dayofweek = 1
               do dtu-add-days($LastQuarter-DTU, -2, $LastQuarter-DTU1)
               do Convert-From-DTU-Date($LastQuarter-DTU1, $TempDate)
            end-if

            if #dtu_dayofweek = 7
               do dtu-add-days($LastQuarter-DTU, -1, $LastQuarter-DTU1)
               do Convert-From-DTU-Date($LastQuarter-DTU1, $TempDate)
            end-if

            do Check_Condition_Date($Holiday_Schedule,$TempDate,$TempDate,$WorkDay)         ! FMB 20040509 C

      end-while

      let $Conditiondate = $TempDate

      do Get_Cross_Border_Data
      do Get_Quarter_Data

   !--------------------------------------------------------------------------------------


#Debug Show '<- Process_Each_Quarter '
end-procedure
!**********************************************************************************************
begin-procedure Get_Quarter_Data
#Debug Show ' -> Get_Quarter_Data '

   let #ActFte        = 0
   let $ActEmplid     = ''
   let $ActSex        = ''
   let $EmplId_Old    = ''
   let $LastPrintEmpl = ''
   let $ExtedDat      = 'N'

!   let $Grade         = ''
   let $EStatus       = ''
   let $Status        = ''

#debug show '$Include_J_Crit before select: ' $Include_J_Crit
#debug show '$Exclude_J_Crit before select: ' $Exclude_J_Crit

begin-select
#ifdef ORACLE
/*+ INDEX(SJB PS_JOB)*/
#end-if
SJB.EMPLID
SJB.EMPL_RCD
SJB.EFFDT
SJB.EFFSEQ
SJB.FTE
PDE.SEX
SJB.ACTION
SJB.LOCATION
SJB.SETID_LOCATION
SJB.COMPANY
!SJB.GRADE
SJB.EMPL_STATUS
[$Apprentice_Field] &App1=CHAR
! ------- CHR customisation begin -------
! PDE.S1H_C_CITIZEN_STAT
! -------- CHR customisation end --------

   let #ActFte    = &SJB.FTE
   let $ActEmplid = &SJB.EMPLID
   let $ActSex    = &PDE.SEX
   let $Action    = &SJB.ACTION
   let $App_Crit1 = &App1
#debug show 'EMPLID $Apprentice: ' $ActEmplid ' , ' $App1
!   let $Grade     = &SJB.GRADE
   let $EStatus   = &SJB.EMPL_STATUS
   let $Status    = rtrim($EStatus,' ')

   do Check_For_Cross_Border
   do Citizenship
   let $Jb_Loc = &SJB.LOCATION   
! ------- CHR customisation begin -------
!   if &PDE.S1H_C_CITIZEN_STAT = '1'
!      let #BoolCitCountry = 1
!   else
!      let #BoolCitCountry = 0
!   end-if
! -------- CHR customisation end --------

   DO EVALUATE_APPRENTICE
   
  evaluate $ActSex
      when = 'M'
!FMB Apprentice
!         if $Grade = '11'
          if   $Apprentice = 'Y'
             add 1 to #CountMenApprAct
          end-if

          if #ActFte >= 0.9
             if $ActQuartr = 'N'               
                add 1 to #CountMen1Last
             else
                add 1 to #CountMen1Act              
                let #CountMenFTEAct = #CountMenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountMen1ActNotCHE
                end-if
             end-if
          end-if

          if #ActFte >= 0.5 and #ActFte <= 0.89
             if $ActQuartr = 'N'
                add 1 to #CountMen2Last
             else
                add 1 to #CountMen2Act
                let #CountMenFTEAct = #CountMenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountMen2ActNotCHE
                end-if
             end-if
          end-if
!FMB 20110413
          if #ActFte >= 0.15 and #ActFte <= 0.49
             if $ActQuartr = 'N'
                add 1 to #CountMen3Last
             else
                add 1 to #CountMen3Act
                let #CountMenFTEAct = #CountMenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountMen3ActNotCHE
                end-if
             end-if
          end-if
          
          if #ActFte < 0.15
             if $ActQuartr = 'N'
                add 1 to #CountMen3Last
             else
                add 1 to #CountMen4Act
                If #ActFte > 0.01
                let #CountMenFTEAct = #CountMenFTEAct +  #ActFte
                End-If
                if  #BoolCitCountry = 0
                    add 1 to #CountMen4ActNotCHE
                end-if
             end-if
          end-if          

          let $ExtedDat = 'Y'
          let $LastPrintEmpl = $ActEmplid
          break

       when = 'F'
!FMB Apprentice
!         if $Grade = '11'
          if   $Apprentice = 'Y'
             add 1 to #CountWomenApprAct
          end-if

          if #ActFte >= 0.9
             if $ActQuartr = 'N'
                add 1 to #CountWomen1Last
             else
                add 1 to #CountWomen1Act
                let #CountWomenFTEAct = #CountWomenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountWomen1ActNotCHE
                end-if
             end-if
          end-if

          if #ActFte >= 0.5 and #ActFte <= 0.89
             if $ActQuartr = 'N'
                add 1 to #CountWomen2Last
             else
                add 1 to #CountWomen2Act
                let #CountWomenFTEAct = #CountWomenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountWomen2ActNotCHE
                end-if
             end-if
          end-if

          if #ActFte >= 0.15 and #ActFte <= 0.49
             if $ActQuartr = 'N'
                add 1 to #CountWomen3Last
             else
                add 1 to #CountWomen3Act
                let #CountWomenFTEAct = #CountWomenFTEAct +  #ActFte
                if  #BoolCitCountry = 0
                    add 1 to #CountWomen3ActNotCHE
                end-if
             end-if
          end-if

          if #ActFte  < 0.15
             if $ActQuartr = 'N'
                add 1 to #CountWomen3Last
             else
                add 1 to #CountWomen4Act
                If #ActFte > 0.01
                let #CountWomenFTEAct = #CountWomenFTEAct +  #ActFte
                End-If                
                if  #BoolCitCountry = 0
                    add 1 to #CountWomen3ActNotCHE
                end-if
             end-if
          end-if          

          let $ExtedDat = 'Y'
          let $LastPrintEmpl = $ActEmplid
          break
       when-other
          break
     end-evaluate

  weiter:

  let $EmplId_Old = $ActEmplid  

from  PS_JOB SJB, {Record_PersDataEffDt} PDE
where PDE.EMPLID         = SJB.EMPLID
and   SJB.COMPANY        = $Ctl_Company
and   SJB.LOCATION       = $CompLocation
and   SJB.SETID_LOCATION = $CompSetID
and   SJB.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB SJJ
                      WHERE SJJ.EMPLID = SJB.EMPLID
                                          AND   SJJ.EMPL_RCD = SJB.EMPL_RCD      ! FMB 20040509 C
                      AND   SJJ.EFFDT <= $Conditiondate)
{Record_GP_Diff1}
and   SJB.EFFSEQ   = (SELECT MAX(EFFSEQ) FROM PS_JOB SJB2
                      WHERE SJB2.EMPLID = SJB.EMPLID
                                          AND   SJB2.EMPL_RCD = SJB.EMPL_RCD     ! FMB 20040509 C
                      AND   SJB2.EFFDT  = SJB.EFFDT)
!FMB Exclude_EE
!and   SJB.EMPL_STATUS IN ('A','L','P')
[$Include_J_Crit]
[$Exclude_J_Crit]
AND SJB.ACTION <> 'TER'                                      ! FMB 20040509 C
order by SJB.EMPLID
end-SELECT

#Debug Show ' <- Get_Quarter_Data ' $Conditiondate ' , ' $Ctl_Company ' , ' $CompLocation ' , ' $CompSetID
end-procedure
!**********************************************************************************************
begin-procedure Citizenship
#Debug Show '-> Citizenship'

   let $CIT_Country    = 'CHE'
   let $CitCountry     = 'CHE'
   let #BoolCitCountry = 1

begin-select DISTINCT
CIT.EMPLID
CIT.COUNTRY_PASSPORT

   let $CIT_Country    = &CIT.COUNTRY_PASSPORT
   let $CitCountry     = rtrim($CIT_country,' ')
   let #BoolCitCountry = 0

FROM  PS_CITIZEN_PSSPRT CIT
WHERE CIT.EMPLID         = $ActEmplid
AND   CIT.DEPENDENT_ID        = ' '
AND   CIT.COUNTRY_PASSPORT <> 'CHE'
AND  ( CIT.EXPIRATN_DT is NULL or CIT.EXPIRATN_DT > $Conditiondate )
And not exists ( select 'X' FROM  PS_CITIZEN_PSSPRT CIT1
 where CIT.EMPLID = CIT1.EMPLID
  AND  CIT.DEPENDENT_ID = CIT1.DEPENDENT_ID
  AND  CIT1.COUNTRY_PASSPORT = 'CHE'
  AND ( CIT1.EXPIRATN_DT is NULL or CIT1.EXPIRATN_DT > $Conditiondate ))
end-SELECT

end-procedure
!**********************************************************************************************
begin-procedure Initial_Strings
#Debug Show '-> Initial_Strings '

let $Strg1  = 'BUNDESAMT FÜR STATISTIK'
let $Strg2  = 'BESCHÄFTIGUNGSSTATISTIK'
let $Strg3  = 'Quartal'
let $Strg4  = 'Rücksendetermin:'
let $Strg5  = 'im Rückantwortkuvert'
let $Strg6  = 'Wirtschaftsart:'
let $Strg7  = 'Bitte Adresse prüfen, bzw. korrigieren'
let $Strg8  = 'Bitte auf der Rückseite keine Bemerkungen anbringen'
let $Strg9  = 'Dieser Fragebogen betrifft nur...'
let $Strg10 = '1a. Personalbestand am Ende des Vorquartals '
let $Strg10_1 = '(inkl. Inhaber/-innen, Geschäftsführer/-innen, Lehrlinge, Heimarbeitende und Grenzgänger)'
let $Strg11 = 'Vollzeitbeschäftigte'
let $Strg11_1 = 'Teilzeitbeschäftigte'
let $Strg11_2 = 'davon Grenzgänger ausländischer Nationalität'
let $Strg11_3 = 'Keine'
let $Strg11_4 = 'Grenzgänger'
let $Strg12_1 = '(90 bis 100%...)'
let $Strg12_2 = '(50 bis 89%...)'
let $Strg12_3 = '(weniger als 50%...)'

let $Strg13 = '(mindestens 90% der Betriebs-'
let $Strg14 = 'üblichen Arbeitszeit'
let $Strg15 = 'mit 50-89%'
let $Strg16 = 'mit weniger als 50%'
let $Strg17 = '(...der betriebsüblichen Arbeitszeit)'
let $Strg18 = 'Ende des Vorquartals'
let $Strg19 = 'Ende des Berichtsquartals'
let $Strg20 = 'Männer'
let $Strg21 = 'Frauen'
let $Strg22 = 'Total'
let $Strg22_1 = 'Im Berichtsquartal gab es in ihrem Betrieb...'
let $Strg23 = '1b. Personalbestand am Ende des Berichtsquartals '
let $Strg24 = '(Bitte Zutreffendes ankreuzen)'
let $Strg25 = 'Mangel'
let $Strg26 = 'Genügend'
let $Strg27 = 'Überfluss'
let $Strg28 = 'an gelerntem Personal'
let $Strg29 = 'an angelerntem Personal'
let $Strg30 = 'an ungelerntem Personal'
let $Strg31 = 'Anzahl offene Stellen am Ende des Berichtsquartals:'
let $Strg32 = 'Wie sind die Beschäftigungsaussichten in Ihrem Betrieb für die ' ||
              'nächsten drei Monate?'
let $Strg33 = 'gut'
let $Strg34 = 'befriedigend'
let $Strg35 = 'schlecht'
let $Strg36 = 'unbestimmt'
let $Strg37 = 'Sachbearbeiter(in):'
let $Strg38 = 'Firma und Unterschrift:'
let $Strg39 = 'Tel.:'
let $Strg40 = 'Ort und Datum:'
let $Strg41 = 'Erläuterungen'
let $Strg42 = '1. Der Fragebogen betrifft ausschliesslich den genannten Betrieb.'
let $Strg43 = '2. Die Beschäftigtenzahl umfasst sämtliche im betreffenden Betrieb ' ||
              'beschäftigten Personen (inkl. Inhaber, Lehrlinge, Aushilfen,'
let $Strg44 = 'im Aussendienst tätige Personen usw.). Kurzarbeit gilt nicht als ' ||
              'Teilzeitbeschäftigung. Die Heimarbeit wird hier nicht erhoben.'
let $Strg45 = 'Stichtag ist der letzte Arbeitstag des Quartals. Beschäftigte mit weniger als 6 Stunden ' ||
              'Arbeitszeit pro Woche sind nicht zu zählen.'
let $Strg46 = '3. Eine Stelle gilt als offen, wenn Schritte zur Rekrutierung eines neuen Mitarbeiters oder ' ||
              'einer neuen Mitarbeiterin unternommen wurden'
let $Strg47 = 'oder nächstens unternommen werden.'
let $Strg48 = '4. Rechtsgrundlage: Bundesstatistikgesetz vom 9. Oktober 1992,'
let $Strg49 = 'Verordnung über die Durchführung von statistischen Erhebungen des Bundes vom 30. Juni 1993.'

let $QuartStr = $Quartal || '. Quartal ' || $Jahr

#Debug Show '<- Initial_Strings '
end-procedure
!**********************************************************************************************
begin-procedure Get_BESTA_Number
let $BESTA_Nbr = ''
begin-select
SIPROV.GPCH_AL_PROVIDER
    let $BESTA_Nbr = ltrim(&SIPROV.GPCH_AL_PROVIDER,' ')
from PS_GPCH_SI_PROVIDR SIPROV
where SIPROV.GPCH_SI_PROV_CD = $Ctl_GPCH_AL_PROVIDER and
      SIPROV.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPCH_SI_PROVIDR SIPROV1
                  WHERE SIPROV1.GPCH_SI_PROV_CD = SIPROV.GPCH_SI_PROV_CD
                  AND  SIPROV1.EFFDT <= $ActualQuarterDate)
end-select
end-procedure
!**********************************************************************************************
! FMB 20040509 Removed procedure Get_BESTA_Phone
!**********************************************************
Begin-Procedure Get-BESTA-Address($Ctl_GPCH_AL_PROVIDER,$ActualQuarterDate, :$ADDLINE1, :$ADDLINE2,
         :$ADDLINE3,:$ADDLINE31,:$ADDLINE4,:$ADDLINE5,:$ADDLINE6,:$PAYENTITY_DESCR,
         :$PAYENTITY_DESCRSHORT,:$CITY,:$STATE,:$POSTAL)
#Debug Show ' -> Get-BESTA-Address '

if $Ctl_Addr_Effdt = ''
    move $_AsOfToday to $Ctl_Addr_Effdt
end-if

Begin-Select
PRV.DESCR
PRV.COUNTRY
PRV.ADDRESS1
PRV.ADDRESS2
PRV.ADDRESS3
PRV.ADDRESS4
PRV.CITY
PRV.NUM1
PRV.NUM2
PRV.HOUSE_TYPE
PRV.ADDR_FIELD1
PRV.ADDR_FIELD2
PRV.ADDR_FIELD3
PRV.COUNTY
PRV.STATE
PRV.POSTAL
PRV.GEO_CODE
PRV.IN_CITY_LIMIT

from PS_GPCH_SI_PROVIDR PRV
where PRV.GPCH_SI_PROV_CD = $Ctl_GPCH_AL_PROVIDER and
      PRV.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPCH_SI_PROVIDR PRV1
                  WHERE PRV1.GPCH_SI_PROV_CD = PRV.GPCH_SI_PROV_CD
                  AND  PRV1.EFFDT <= $ActualQuarterDate)

end-select

     let $PAYENTITY_DESCR     = rtrim(&PRV.DESCR,' ')
     let $PAYENTITY_DESCRSHORT= rtrim(&PRV.DESCR,' ')
     let $NAME                = rtrim($Ctl_GPCH_AL_PROVIDER,' ')
     let $COUNTRY             = rtrim(&PRV.COUNTRY,' ')
     let $ADDRESS1            = rtrim(&PRV.ADDRESS1,' ')
     let $ADDRESS2            = rtrim(&PRV.ADDRESS2,' ')
     let $ADDRESS3            = rtrim(&PRV.ADDRESS3,' ')
     let $ADDRESS4            = rtrim(&PRV.ADDRESS4,' ')
     let $CITY                = rtrim(&PRV.CITY,' ')
     let $NUM1                = rtrim(&PRV.NUM1,' ')
     let $NUM2                = rtrim(&PRV.NUM2,' ')
     let $HOUSE_TYPE          = rtrim(&PRV.HOUSE_TYPE,' ')
     let $ADDR_FIELD1         = rtrim(&PRV.ADDR_FIELD1,' ')
     let $ADDR_FIELD2         = rtrim(&PRV.ADDR_FIELD2,' ')
     let $ADDR_FIELD3         = rtrim(&PRV.ADDR_FIELD3,' ')
     let $COUNTY              = rtrim(&PRV.COUNTY,' ')
     let $STATE               = rtrim(&PRV.STATE,' ')
     let $POSTAL              = rtrim(&PRV.POSTAL,' ')
     let $GEO_CODE            = rtrim(&PRV.GEO_CODE,' ')
     let $IN_CITY_LIMIT       = rtrim(&PRV.IN_CITY_LIMIT,' ')

     if $COUNTRY <> 'CHE'
        do Get-Zip($POSTAL,$COUNTRY, $Eurozip)
        let $POSTAL = $Eurozip
     end-if

    do ADFORMAT($NAME,$ADDRESS1,$ADDRESS2,$ADDRESS3,$ADDRESS4,$NUM1,$NUM2,$HOUSE_TYPE,$POSTAL,
                $CITY,$STATE,$COUNTY,$COUNTRY,$GEO_CODE,$ADDR_FIELD1,$ADDR_FIELD2,
                $ADDR_FIELD3,$IN_CITY_LIMIT,$ADDLINET1,$ADDLINET2,$ADDLINET3,$ADDLINET31,
                $ADDLINET4,$ADDLINET5,$ADDLINET6)


    do Compress-Address($ADDLINET1,$ADDLINET2,$ADDLINET3,$ADDLINET31, $ADDLINET4,$ADDLINET5,
                        $ADDLINET6,$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,$ADDLINE4,
                        $ADDLINE5,$ADDLINE6)


#Debug Show ' <- Get-BESTA-Address '
End-Procedure
!**********************************************************************************************
begin-procedure PrintData
#Debug Show ' -> PrintData '

   Use-Report reportA

   do Get_BESTA_Number
! FMB 20040509 Removed call Get_BESTA_Phone GET_BUR_Nbr

   do Get-BESTA-Address($Ctl_GPCH_AL_PROVIDER,$ActualQuarterDate, $ADDL1, $ADDL2, $ADDL3, $ADDL31, $ADDL4,
                        $ADDL5,$ADDL6,$PAYENT_DCR,$PAYENT_DCRSHRT,$CTY,$STE,$PTAL)

   let $AddStr1 = $ADDL1
   let $AddStr2 = $ADDL2
   let $AddStr3 = $PTAL || ' ' || $CTY


   alter-printer
   font = 4
   point-size = 7.2

   #debug show '#sqr-max-columns:' #sqr-max-columns !133
   #debug show '#sqr-max-lines:' #sqr-max-lines     !82
   graphic (2,110,19)  box 3 8

   alter-printer
   font = 4
   point-size = 13.6
   print $Strg1 (1,10) bold

   alter-printer
   font = 4
   point-size = 8

   print $AddStr1 (3,10) !bold
   print $AddStr2 (4,10) !bold
   print $AddStr3 (5,10) !bold
   print $AddStr4 (6,10) !bold
   print $AddStr5 (7,10) !bold

   alter-printer
   font = 4
   point-size = 13.6
   print $Strg2 (9,10) bold

   alter-printer
   font = 4
   point-size = 8.4
   print $QuartStr (10,10) bold


   alter-printer
   font = 4
   point-size = 7.5

!FMB 20110413   print $Strg12_1     (24,21)
!FMB 20110413   print $Strg12_2     (24,38)
!FMB 20110413   print $Strg12_3     (24,55)
!FMB 20110413   print $Strg17       (30,21)

   print $Strg12_1     (37,21)
   print $Strg12_2     (37,38)
!FMB 20110413
   !print $Strg12_3     (37,55)
   !print '(15 bis 49%)' (37,55) 
   print $Strg12_4 (37,55)
 
   print '(<15%)'       (37,72)
   print $Strg17        (43,21)

   alter-printer
   font = 4
   point-size = 8

   print $Strg4 (11,10) !bold  
   !print $Strg5 (12,10) !bold
   !print $Strg6 (16,10) !bold
   !print $Strg7 (17,10) !bold
   !print $Strg8 (18,10) !bold
   !print $Strg9 (19,10) bold


   !Heading of 1 group
 !FMB 20110413  print $Strg11   (23,18) bold
 !FMB 20110413  print $Strg11_1 (23,42) bold underline
 !FMB 20110413  print $Strg22   (23,78) bold
   print $Strg11_2 (23,95) bold
   print $Strg11_3 (26,120) !bold
   print $Strg11_4 (27,120) !bold


   !Body of 1 group
!FMB 20110413   print $Strg20   (26,10) !bold
!FMB 20110413   print $Strg21   (29,10) !bold
!FMB 20110413   print 'M'       (26,71) !bold
!FMB 20110413   print 'F'       (29,71) !bold
!FMB 20110413   print $Strg22   (32,68) !bold
 
   !print 'M'       (26,92) !bold
   !print 'F'       (29,92) !bold
   print $Strg50       (26,92) !bold
   print $Strg51       (29,92) !bold
   print 'T'       (32,92) !bold

   !Heading of 2 group
   print $Strg11   (36,18) bold
   print $Strg11_1 (36,42) bold underline
!FMB 20110413 - begin
   !print $Strg22   (36,78) bold
   !print $Strg11_2 (36,95) bold
   !print $Strg11_3 (39,120) !bold
   !print $Strg11_4 (40,120) !bold
   print $Strg22   (36,95) bold
  !print 'Vollzeitäquivalente' (36,112) bold
   print $Strg52 (36,112) bold 
!FMB 20110413 - end
   !Body of 2 group
   print $Strg20   (39,10) !bold
   print $Strg21   (42,10) !bold
!FMB 20110413 - begin
   !print 'M'       (39,71) !bold
   !print 'F'       (42,71) !bold
   !print $Strg22   (45,68) !bold

   !print 'M'       (39,92) !bold
   !print 'F'       (42,92) !bold
   !print 'T'       (45,92) !bold

   !print $Strg11_3 (39,120) !bold
   !print $Strg11_4 (40,120) !bold
  
   !print 'M'       (39,92) !bold
   !print 'F'       (42,92) !bold
   print $Strg50       (39,92) !bold
   print $Strg51       (42,92) !bold
    
   print $Strg22   (45,89) !bold
 
 
   !print 'M'       (39,113) !bold
   !print 'F'       (42,113) !bold
   print $Strg50       (39,113) !bold
   print $Strg51       (42,113) !bold
   print 'T'       (45,113) !bold
!FMB 20110413 - end

   !print $Strg22_1 (47,10) bold
   !print $Strg25 (47,84) !bold
   !print $Strg26 (47,102) !bold
   !print $Strg27 (47,122) !bold

   !print $Strg24 (48,13)

   !print $Strg28 (49,52)
   !print $Strg29 (52,52)
   !print $Strg30 (55,52)

   !print $Strg33 (61,68)
   !print $Strg34 (61,80)
   !print $Strg35 (61,97)
   !print $Strg36 (61,114)


   alter-printer
   font = 4
   point-size = 8.5

!FMB 20110413 graphic (21,10,124)  box 1 0 5
   graphic (34,10,124)  box 1 0 5

!FMB 20110413 print $Strg10   (21,10) bold
!FMB 20110413 print ' '       (,)
!FMB 20110413 print $Strg10_1 (,)


   print $Strg23 (34,10) bold
   print ' '       (,)
   print $Strg10_1 (,)


   !print $Strg31 (58,13) bold
   !print $Strg32 (59,13) bold


   print $Strg37 (64,13)
   print $Strg38 (64,80)
   print $Strg39 (66,13)
   print $Strg40 (68,13)

   print $Strg41 (70,13) bold
   print $Ctl_GPCH_RC_DESCR1 (68,80)

   alter-printer
   font = 4
   point-size = 7.2
  ! print $Strg13 (25,70)
  ! print $Strg14 (26,75)

  ! print $Strg15 (25,95)
  ! print $Strg16 (25,115)

  ! print $Strg17 (26,99)

   !print $Strg42 (71,13)
   print $Strg53 (71,13)
   
   !print $Strg43 (72,13)
   !print $Strg44 (73,15)
   !print $Strg45 (74,15)
   !print $Strg46 (75,13)
   !print $Strg47 (76,15)
   !print $Strg48 (77,13)
   !print $Strg49 (78,29)

  !FMB 20110413 graphic (25,20,14)  box 2 8
  !FMB 20110413 graphic (25,37,14)  box 2 8
  !FMB 20110413 graphic (25,54,14)  box 2 8
  !FMB 20110413 graphic (25,74,14)  box 2 8
   graphic (25,95,14)  box 2 8

  !FMB 20110413 graphic (28,20,14)  box 2 8
  !FMB 20110413 graphic (28,37,14)  box 2 8
  !FMB 20110413 graphic (28,54,14)  box 2 8
  !FMB 20110413 graphic (28,74,14)  box 2 8
   graphic (28,95,14)  box 2 8
   graphic (28,124,4)  box 2 8
!FMB 20110413
   !graphic (41,124,4)  box 2 8


!FMB 20110413   graphic (31,74,14)  box 2 8
   graphic (31,95,14)  box 2 8


   graphic (38,20,14)  box 2 8
   graphic (38,37,14)  box 2 8
   graphic (38,54,14)  box 2 8
   graphic (38,74,14)  box 2 8
   graphic (38,95,14)  box 2 8
!FMB 20110413
   graphic (38,116,14)  box 2 8
   
   graphic (41,20,14)  box 2 8
   graphic (41,37,14)  box 2 8
   graphic (41,54,14)  box 2 8
   graphic (41,74,14)  box 2 8
   graphic (41,95,14)  box 2 8
!FMB 20110413
   graphic (41,116,14)  box 2 8
!FMB 20110413
!   graphic (44,74,14)  box 2 8
   graphic (44,95,14)  box 2 8
   graphic (44,116,14)  box 2 8


   !graphic (48,85,4)   box 2 8
   !graphic (48,105,4)  box 2 8
   !graphic (48,125,4)  box 2 8

   !graphic (51,85,4)   box 2 8
   !graphic (51,105,4)  box 2 8
   !graphic (51,125,4)  box 2 8

   !graphic (54,85,4)   box 2 8
   !graphic (54,105,4)  box 2 8
   !graphic (54,125,4)  box 2 8

   !graphic (57,115,14)  box 2 8

   !graphic (60,74,4)   box 2 8
   !graphic (60,91,4)   box 2 8
   !graphic (60,108,4)  box 2 8
   !graphic (60,125,4)  box 2 8

   graphic (64,13,64) horz-line 8
   graphic (66,13,64) horz-line 8
   graphic (68,13,64) horz-line 8
   graphic (68,80,48) horz-line 8

   alter-printer
   font = 4
   point-size = 11

   let #TotalMenLast         = #CountMen1Last      + #CountMen2Last   + #CountMen3Last
   let #TotalWomenLast       = #CountWomen1Last    + #CountWomen2Last + #CountWomen3Last
   let #TotalPeopleLast      = #TotalMenLast       + #TotalWomenLast

   let #TotalCrossPeopleLast = #CountMenCrsBdrLast + #CountWomenCrsBdrLast

   let #TotalMenAct          = #CountMen1Act       + #CountMen2Act    + #CountMen3Act  + #CountMen4Act
   let #TotalWomenAct        = #CountWomen1Act     + #CountWomen2Act  + #CountWomen3Act + #CountWomen4Act
   let #TotalPeopleAct       = #TotalMenAct        + #TotalWomenAct

   let #TotalCrossPeopleAct = #CountMenCrsBdrAct   + #CountWomenCrsBdrAct

   let #CountMen1ActCHE      = #CountMen1Act    - #CountMen1ActNotCHE
   let #CountMen2ActCHE      = #CountMen2Act    - #CountMen2ActNotCHE
   let #CountMen3ActCHE      = #CountMen3Act    - #CountMen3ActNotCHE
   let #CountMen4ActCHE      = #CountMen4Act    - #CountMen4ActNotCHE
   let #CountWomen1ActCHE    = #CountWomen1Act  - #CountWomen1ActNotCHE
   let #CountWomen2ActCHE    = #CountWomen2Act  - #CountWomen2ActNotCHE
   let #CountWomen3ActCHE    = #CountWomen3Act  - #CountWomen3ActNotCHE
   let #CountWomen4ActCHE    = #CountWomen4Act  - #CountWomen4ActNotCHE
   let #Total-1Act           = #CountMen1Act    + #CountWomen1Act
   let #Total-2Act           = #CountMen2Act    + #CountWomen2Act
   let #Total-3Act           = #CountMen3Act    + #CountWomen3Act
   let #Total-4Act           = #CountMen4Act    + #CountWomen4Act
   let #TotalApprAct         = #CountMenApprAct + #CountWomenApprAct


   do format-number(#TotalMenLast   ,$TotalMenLast   ,'B88888888888')
   do format-number(#TotalWomenLast ,$TotalWomenLast ,'B88888888888')
   do format-number(#TotalPeopleLast,$TotalPeopleLast,'B88888888888')

   do format-number(#TotalMenAct   ,$TotalMenAct   ,'B88888888888')
   do format-number(#TotalWomenAct ,$TotalWomenAct ,'B88888888888')
   do format-number(#TotalPeopleAct,$TotalPeopleAct,'B88888888888')

   do format-number(#CountMenCrsBdrLast   ,$CountMenCrsBdrLast   ,'B88888888888')
   do format-number(#CountWomenCrsBdrLast ,$CountWomenCrsBdrLast ,'B88888888888')
   do format-number(#TotalCrossPeopleLast ,$TotalCrossPeopleLast ,'B88888888888')
   do format-number(#CountMenCrsBdrAct    ,$CountMenCrsBdrAct    ,'B88888888888')
   do format-number(#CountWomenCrsBdrAct  ,$CountWomenCrsBdrAct  ,'B88888888888')
   do format-number(#TotalCrossPeopleAct  ,$TotalCrossPeopleAct  ,'B88888888888')

   do Format-DateTime($Ctl_GPCH_RC_ADJUST_DT,$Ctl_GPCH_RC_ADJUST_DT1, {DEFDATE}, '', '')
!FMB 20040509 introduced issued date (reassigned GPCH_RC_Adjust_Dt1)
   do Format-DateTime($Ctl_GPCH_RC_FROM_DT,$Ctl_GPCH_RC_FROM_DT1, {DEFDATE}, '', '')
   do format-number(#Ctl_GPCH_RC_BRANCH,$Ctl_GPCH_RC_BRANCH1,'8888')   ! FMB 20040509 C

   do format-number(#CountMen1Last,$CountMen1Last,'B88888888888')
   do format-number(#CountMen2Last,$CountMen2Last,'B88888888888')
   do format-number(#CountMen3Last,$CountMen3Last,'B88888888888')
   do format-number(#CountWomen1Last,$CountWomen1Last,'B88888888888')
   do format-number(#CountWomen2Last,$CountWomen2Last,'B88888888888')
   do format-number(#CountWomen3Last,$CountWomen3Last,'B88888888888')
   do format-number(#CountMen1Act,$CountMen1Act,'B88888888888')
   do format-number(#CountMen2Act,$CountMen2Act,'B88888888888')
   do format-number(#CountMen3Act,$CountMen3Act,'B88888888888')
   do format-number(#CountMen4Act,$CountMen4Act,'B88888888888')
   do format-number(#CountMenFTEAct,$CountMenFTEAct,'B888888888.99')
   do format-number(#CountWomen1Act,$CountWomen1Act,'B88888888888')
   do format-number(#CountWomen2Act,$CountWomen2Act,'B88888888888')
   do format-number(#CountWomen3Act,$CountWomen3Act,'B88888888888')
   do format-number(#CountWomen4Act,$CountWomen4Act,'B88888888888')
   do format-number(#CountWomenFTEAct,$CountWomenFTEAct,'B888888888.99')

   do format-number(#CountMen1ActCHE,     $CountMen1ActCHE,      'B88888')
   do format-number(#CountMen2ActCHE,     $CountMen2ActCHE,      'B88888')
   do format-number(#CountMen3ActCHE,     $CountMen3ActCHE,      'B88888')
   do format-number(#CountMen4ActCHE,     $CountMen4ActCHE,      'B88888')
   do format-number(#CountWomen1ActCHE,   $CountWomen1ActCHE,    'B88888')
   do format-number(#CountWomen2ActCHE,   $CountWomen2ActCHE,    'B88888')
   do format-number(#CountWomen3ActCHE,   $CountWomen3ActCHE,    'B88888')
   do format-number(#CountWomen4ActCHE,   $CountWomen4ActCHE,    'B88888')   
   do format-number(#CountMen1ActNotCHE,  $CountMen1ActNotCHE,   'B88888')
   do format-number(#CountMen2ActNotCHE,  $CountMen2ActNotCHE,   'B88888')
   do format-number(#CountMen3ActNotCHE,  $CountMen3ActNotCHE,   'B88888')
   do format-number(#CountMen4ActNotCHE,  $CountMen4ActNotCHE,   'B88888')   
   do format-number(#CountWomen1ActNotCHE,$CountWomen1ActNotCHE, 'B88888')
   do format-number(#CountWomen2ActNotCHE,$CountWomen2ActNotCHE, 'B88888')
   do format-number(#CountWomen3ActNotCHE,$CountWomen3ActNotCHE, 'B88888')
   do format-number(#CountWomen4ActNotCHE,$CountWomen4ActNotCHE, 'B88888')   
   do format-number(#Total-1Act,          $Total-1Act,           'B88888')
   do format-number(#Total-2Act,          $Total-2Act,           'B88888')
   do format-number(#Total-3Act,          $Total-3Act,           'B88888')
   do format-number(#Total-4Act,          $Total-4Act,           'B88888')

   do format-number(#CountMenApprAct,     $CountMenApprAct,      'B88888')
   do format-number(#CountWomenApprAct,   $CountWomenApprAct,    'B88888')
   do format-number(#TotalApprAct,        $TotalApprAct,         'B88888')
   
   do format-number(#Ctl_GPCH_RC_VACANT,$Ctl_GPCH_RC_VACANT,'B88888')
!FMB 20040509 introduced issued date (reassigned GPCH_RC_Adjust_Dt1)
  
  
 !print $Ctl_GPCH_RC_FROM_DT1 (11,28)
  print $Ctl_GPCH_RC_FROM_DT1 (11,42) 
 !print $Ctl_GPCH_RC_BRANCH1 (16,28)  
   
   print $CountMen1Last        (26,22)
   print $CountMen2Last        (26,39)
   print $CountMen3Last        (26,56)
   print $TotalMenLast         (26,76)
   print $CountMenCrsBdrLast   (26,97)

   print $CountWomen1Last      (29,22)
   print $CountWomen2Last      (29,39)
   print $CountWomen3Last      (29,56)
   print $TotalWomenLast       (29,76)
   print $CountWomenCrsBdrLast (29,97)

   print $TotalPeopleLast      (32,76)
   print $TotalCrossPeopleLast (32,97)
   
   print $CountMen1Act        (39,22)
   print $CountMen2Act        (39,39)
   print $CountMen3Act        (39,56)
 !FMB 20110413
   !print $TotalMenAct         (39,76)
   !print $CountMenCrsBdrAct   (39,97)
   print $CountMen4Act         (39,76)
   print $TotalMenAct         (39,97)
   print $CountMenFTEAct    (39,117)
 
   print $CountMenCrsBdrAct   (26,97) 
   
   print $CountWomen1Act      (42,22)
   print $CountWomen2Act      (42,39)
   print $CountWomen3Act      (42,56)
!FMB 20110413
   !print $TotalWomenAct       (42,76)
   !print $CountWomenCrsBdrAct (42,97)
   print $CountWomen4Act       (42,76)
   print $TotalWomenAct       (42,97)
   print $CountWomenFTEAct    (42,117)
   
   print $CountWomenCrsBdrAct (29,97)

   !print $TotalPeopleAct      (45,76)
   !print $TotalCrossPeopleAct (45,97)
   
   print $TotalPeopleAct      (45,97)
   
   let #CountTotalFTEAct = #CountMenFTEAct + #CountWomenFTEAct
   do format-number(#CountTotalFTEAct,$CountTotalFTEAct,'B888888888.99')
   
   print $CountTotalFTEAct         (45,117)
   
   print $TotalCrossPeopleAct (32,97)


   #debug show 'mel ' #TotalCrossPeopleLast ' , ' #TotalCrossPeopleAct


   if #TotalCrossPeopleAct  = 0
!FMB 20110413
      !print 'x' (42,125)
      print 'x' (29,125)
   end-if



   evaluate $Ctl_GPCH_RC_SKILLED
     when = '1'
     !  print 'x' (49,86)
       let $Var18 = 'x'
       break
     when = '2'
     !  print 'x' (49,106)
       let $Var21 = 'x'
       break
     when = '3'
     !  print 'x' (49,126)
       let $Var24 = 'x'
       break
     when-other
       break
   end-evaluate

   evaluate $Ctl_GPCH_RC_TRAINED
     when = '1'
     !  print 'x' (52,86)
       let $Var19 = 'x'
       break
     when = '2'
     !  print 'x' (52,106)
       let $Var22 = 'x'
       break
    when = '3'
      ! print 'x' (52,126)
       let $Var25 = 'x'
       break
    when-other
       break
   end-evaluate

   evaluate $Ctl_GPCH_RC_UNSKILLED
     when = '1'
      ! print 'x' (55,86)
       let $Var20 = 'x'
       break
     when = '2'
      ! print 'x' (55,106)
       let $Var23 = 'x'
       break
     when = '3'
      ! print 'x' (55,126)
       let $Var26 = 'x'
       break
     when-other
       break
     end-evaluate

    ! print $Ctl_GPCH_RC_VACANT  (58,116)
    
   evaluate $Ctl_GPCH_RC_FORECAST
       when = '1'
       !  print 'x' (61,75)
         let $Var27 = 'x'
         break
       when = '2'
       !  print 'x' (61,92)
         let $Var28 = 'x'
         break
       when = '3'
       !  print 'x' (61,109)
         let $Var29 = 'x'
         break
       when = '4'
       !  print 'x' (61,126)
         let $Var30 = 'x'
         break
       when-other
         break
   end-evaluate

   print $Ctl_GPCH_RC_DESCR1 (64,30)
   print $Ctl_GPCH_RC_DESCR2 (66,30)
!FMB 20040509 various changes Layout (Company descr displayed 3x, issued date, signature data from company)
 
  IF $BESTA_DTL = 'J'
   print #BUR_Nbr     (4,76) edit 99999999
  ELSE
    print $BUR_Nbr2     (4,76) edit 99999999
  END-IF    
   
   print $BESTA_Nbr   (4,89)
   
   print $Jahr (4,100)
   print $Quartal (4,107)

   print $ADDLINE2  (12,76)
   print $ADDLINE3  (13,76)                   !Comment out, depending on Address entries (KPMG)
   print $ADDLINE31 (14,76)
   print $ADDLINE4  (15,76)
   print $ADDLINE5  (16,76)
   print $ADDLINE6  (17,70)


!FMB 20040509 Company data for Address and signature (translated)

   do Get-Company-Address($Ctl_Company,$Temp_Date,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

#DEBUG SHOW 'Company Data: ' ' $Cpcity ' $Cpcity ' $Cpdescr ' $Cpdescr ' $Cpline1 ' $Cpline1 ' $Cpline2 ' $Cpline2

!FMB 20040509 Introduced issued date (and reassigned GPCH_RC_Adjust_Dt)

    let $City_Date = $Cpcity || ', ' || $CTL_GPCH_RC_ADJUST_DT1
   print $City_Date (68,30)

   print $Cpdescr  (66,80)

   print $Cpdescr  (11,76)
 
   let $Betrifft_Nur = $Cpdescr || ', '||$Cpcity
   
   !print $Betrifft_Nur (20,10)  
   
   alter-printer
   font = 4
   point-size = 5

   print '1' (5,76)
   print '8' (5,87)
   print '9' (5,89)
   print '15' (5,97)
   print '16' (5,100)
   print '20' (5,107)
   print '21' (5,110)
   print '26' (5,128)

!FMB 20040509 Don't print previous quarter data
   !print '117' (49,90)
   !print '125' (55,130)
   !print '126' (58,112)
   !print '130' (58,130)
   !print '131' (62,79)
   !print '134' (62,130)

#Debug Show ' <- PrintData '
end-procedure
!**********************************************************************************************
begin-procedure PrintInterface
#Debug Show ' -> PrintInterface '

   Use-Report reportA
   
      let $BUR_Nbr1   = lpad(rtrim(ltrim($BUR_Nbr,' '),' '),8,'0')  ! FMB 20040509 C
      let $BESTA_Nbr1 = lpad($BESTA_Nbr, 7, '0')
   
      if (ltrim($BUR_Nbr,'0') = ltrim($BESTA_Nbr,'0')) and ($BUR_Nbr <> '')
         let $BESTA_Nbr1 = '0000001'
   end-if
   
   do format-number(#Ctl_GPCH_RC_BRANCH,$Ctl_GPCH_RC_BR1,'B9999')
   
   do format-number(#Ctl_GPCH_RC_VACANT,$Ctl_VACANT,'09999')

   do format-number(#CountMen1ActCHE,$CountMen1ActCHE,'09999')
   do format-number(#CountWomen1ActCHE,$CountWomen1ActCHE,'09999')
   do format-number(#CountMen1ActNotCHE,$CountMen1ActNotCHE,'09999')
   do format-number(#CountWomen1ActNotCHE,$CountWomen1ActNotCHE,'09999')
   do format-number(#Total-1Act,$Total-1Act,'09999')

   do format-number(#CountMen2ActCHE,$CountMen2ActCHE,'09999')
   do format-number(#CountWomen2ActCHE,$CountWomen2ActCHE,'09999')
   do format-number(#CountMen2ActNotCHE,$CountMen2ActNotCHE,'09999')
   do format-number(#CountWomen2ActNotCHE,$CountWomen2ActNotCHE,'09999')
   do format-number(#Total-2Act,$Total-2Act,'09999')

   do format-number(#CountMen3ActCHE,$CountMen3ActCHE,'09999')
   do format-number(#CountWomen3ActCHE,$CountWomen3ActCHE,'09999')
   do format-number(#CountMen3ActNotCHE,$CountMen3ActNotCHE,'09999')
   do format-number(#CountWomen3ActNotCHE,$CountWomen3ActNotCHE,'09999')
   do format-number(#Total-3Act,$Total-3Act,'09999')
   
   do format-number(#CountMen4ActCHE,$CountMen4ActCHE,'09999')
   do format-number(#CountWomen4ActCHE,$CountWomen4ActCHE,'09999')
   do format-number(#CountMen4ActNotCHE,$CountMen4ActNotCHE,'09999')
   do format-number(#CountWomen4ActNotCHE,$CountWomen4ActNotCHE,'09999')
   do format-number(#Total-4Act,$Total-4Act,'09999')   

   do format-number(#CountMenApprAct,$CountMenApprAct,'09999')
   do format-number(#CountWomenApprAct,$CountWomenApprAct,'09999')
   do format-number(#TotalApprAct,$TotalApprAct,'09999')

   do format-number(#TotalPeopleAct,$TotalPeopleAct,'09999')

   do format-number(#CountMenCrsBdrAct,$CountMenCrsBdrAct,'09999')
   do format-number(#CountWomenCrsBdrAct,$CountWomenCrsBdrAct,'09999')
   do format-number(#TotalCrossPeopleAct,$TotalCrossPeopleAct,'09999')
   
!Convert FTE values to Integer 
   let #CountMenFTEAct = ROUND(#CountMenFTEAct * 100,0)
   let #CountWomenFTEAct = ROUND(#CountWomenFTEAct * 100,0)
   let #TotalFTEAct = #CountMenFTEAct + #CountWomenFTEAct

   do format-number(#CountMenFTEAct,$CountMenFTEAct,'0999999')   
   do format-number(#CountWomenFTEAct,$CountWomenFTEAct,'0999999')   
   do format-number(#TotalFTEAct,$TotalFTEAct,'0999999') 
   
   let $Var1  = $BUR_Nbr1               ! entity identifier
   let $Var2  = $CompBuilding           ! building           ! FMB 20040509
   let $Var3  = $Jahr                   ! year
   let $Var4  = $Quartal                ! quarter
   let $Var5  = $VillageCode            ! village code
   let $Var6  = $StateCode              ! state code
   let $Var7  = $Ctl_GPCH_RC_BR1        ! branch

   let $Var8  = $CountMen1ActCHE        ! >90%
   let $Var9  = $CountWomen1ActCHE
   let $Var10 = $CountMen1ActNotCHE
   let $Var11 = $CountWomen1ActNotCHE
   let $Var12 = $Total-1Act

   let $Var13 = $CountMen2ActCHE        ! >50%,<90%
   let $Var14 = $CountWomen2ActCHE
   let $Var15 = $CountMen2ActNotCHE
   let $Var16 = $CountWomen2ActNotCHE
   let $Var17 = $Total-2Act

   let $Var18 = $CountMen3ActCHE        !  >= 15% <50%
   let $Var19 = $CountWomen3ActCHE
   let $Var20 = $CountMen3ActNotCHE
   let $Var21 = $CountWomen3ActNotCHE
   let $Var22 = $Total-3Act
   
   let $Var40 = $CountMen3ActCHE        ! <15%
   let $Var41 = $CountWomen3ActCHE
   let $Var42 = $CountMen3ActNotCHE
   let $Var43 = $CountWomen3ActNotCHE
   let $Var44 = $Total-3Act   
   
   let $Var24 = $TotalPeopleAct         ! Total People Act

   let $Var25 = $CountMenApprAct        ! Apprentices
   let $Var26 = $CountWomenApprAct
   let $Var27 = $TotalApprAct

   let $Var28 = '00000'                 ! vacant positions

   let $Var29 = $CountMenCrsBdrAct      ! Crossborders
   let $Var30 = $CountWomenCrsBdrAct
   let $Var31 = $TotalCrossPeopleAct

   let $Var45 = $CountMenFTEAct        ! FTEs
   let $Var46 = $CountWomenFTEAct
   let $Var47 = $TotalFTEAct
   
!Layout2011
   write 10 from $Var1:8  $Var3:4  $Var4:1
                 $Var8:5  $Var9:5  $Var10:5 $Var11:5 $Var12:5
                 $Var13:5 $Var14:5 $Var15:5 $Var16:5 $Var17:5
                 $Var18:5 $Var19:5 $Var20:5 $Var21:5 $Var22:5  ! only  >= 15%
                 $Var40:5 $Var41:5 $Var42:5 $Var43:5 $Var44:5  !<== put < 15%                 
                 $Var24:5
                 $Var29:5 $Var30:5                 
                 $Var27:5
                 $Var45:7 $Var46:7 $Var47:7                    ! FTEs
 
Goto End 
!Layout before 2011
   write 10 from $Var1:8  $Var2:7  $Var3:4  $Var4:1  $Var5:4  $Var6:2  $Var7:5
                 $Var8:5  $Var9:5  $Var10:5 $Var11:5 $Var12:5
                 $Var13:5 $Var14:5 $Var15:5 $Var16:5 $Var17:5
                 $Var18:5 $Var19:5 $Var20:5 $Var21:5 $Var22:5
                 $Var24:5
                 $Var25:5 $Var26:5 $Var27:5
                 $Var28:5
                 $Var29:5 $Var30:5 $Var31:5  
End:
#Debug Show ' <- PrintInterface '
end-procedure
!**********************************************************************************************
begin-procedure Open_File
#Debug Show ' -> Open_File '

      open $reportdirB as 10 for-writing record=154:FIXED    ! FMB 20120430
      #debug show 'Melr '  $reportdirB

      open $reportdirC as 20 for-writing record=168:FIXED    ! FMB 20040509

#Debug Show ' <- Open_File '
end-procedure
!**********************************************************************************************
begin-procedure Ask-Input

!   input $Ctl_Curr_Pay_End_Dt   'Pay End Date '         type=date
!FMB 20040509 introduced issued date
   input $Temp_Date             'Pay End Date '         type=date
   input $Ctl_Company           'Pay Entity '
   input $Ctl_GPCH_RC_SKILLED   'Skilled 1 or 2 or 3 '
   input $Ctl_GPCH_RC_TRAINED   'Skilled 1 or 2 or 3 '
   input $Ctl_GPCH_RC_UNSKILLED 'Skilled 1 or 2 or 3 '
   input $Ctl_GPCH_RC_FORECAST  'Skilled 1 or 2 or 3 or 4 '
   input $Ctl_GPCH_RC_DESCR1    'Clerk '
   input $Ctl_GPCH_RC_DESCR2    'Phone '
   input #Ctl_GPCH_RC_VACANT    'Vacant Positions '
   input $Ctl_GPCH_RC_BRANCH    'Branch of Company '    ! FMB 20040509 C
   input $Ctl_GPCH_RC_ADJUST_DT 'As of Date '
   input $Ctl_GPCH_RC_FROM_DT     'Latest Return Date '
   input $Ctl_GPCH_AL_PROVIDER  'Provider ID'

end-procedure Ask-Input
!**********************************************************************************************
begin-procedure Apprentice
#Debug Show ' -> Apprentice '

!FMB 20040922  let $Apprentice_Rec = ' '
!FMB 20040922  let $Exclude_Rec = ' '
!FMB 20040922  let $Include_Rec = ' '

Begin-Select
BDTL.DATA_KEY1
BDTL.DATA_KEY2
BDTL.DATA_KEY3
BDTL.DATA_VAL1
BDTL.DATA_VAL2
BDTL.DATA_VAL3
BDTL.DATA_VAL4
BDTL.DATA_VAL5
BDTL.DATA_VAL6
BDTL.DATA_VAL7
BDTL.DATA_VAL8

!Apprentice / Exclude
    let $BESTA_TYP          = RTRIM(&BDTL.DATA_KEY1,' ')

     let $Data_Val_1             = RTRIM(&BDTL.DATA_Val1,' ')
     let $Data_Val_1             = ''''||$Data_Val_1||''''
     let $Data_Val_2             = RTRIM(&BDTL.DATA_Val2,' ')
     let $Data_Val_2             = ''''||$Data_Val_2||''''
     let $Data_Val_3             = RTRIM(&BDTL.DATA_Val3,' ')
     let $Data_Val_3             = ''''||$Data_Val_3||''''
     let $Data_Val_4             = RTRIM(&BDTL.DATA_Val4,' ')
     let $Data_Val_4             = ''''||$Data_Val_4||''''
     let $Data_Val_5             = RTRIM(&BDTL.DATA_Val5,' ')
     let $Data_Val_5             = ''''||$Data_Val_5||''''
     let $Data_Val_6             = RTRIM(&BDTL.DATA_Val6,' ')
     let $Data_Val_6             = ''''||$Data_Val_6||''''
     let $Data_Val_7             = RTRIM(&BDTL.DATA_Val7,' ')
     let $Data_Val_7             = ''''||$Data_Val_7||''''
     let $Data_Val_8             = RTRIM(&BDTL.DATA_Val8,' ')
     let $Data_Val_8             = ''''||$Data_Val_8||''''


  If $BESTA_TYP = 'APPRENTICE'
  goto APPRENTICE
  End-if

  If $BESTA_TYP = 'EXCLUDE'
  goto EXCLUDE
  End-if

  If $BESTA_TYP = 'INCLUDE'
  goto INCLUDE
  End-if

  goto ENDE

EXCLUDE:

    let $EXCLUDE_Rec          = RTRIM(&BDTL.DATA_KEY2,' ')

 If $EXCLUDE_Rec = 'JOB'
  goto E_JOB
 End-if

  If $EXCLUDE_Rec = 'PERSONAL_DATA'
  goto E_PERSONAL_DATA
  End-if

   goto ENDE

E_JOB:


       let $Exclude_J_Field = RTRIM(&BDTL.DATA_KEY3,' ')
          if $Data_Val_1 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_1
          end-if
          if $Data_Val_2 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_2
          end-if
          if $Data_Val_3 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_3
          end-if
          if $Data_Val_4 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_4
          end-if
          if $Data_Val_5 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_5
          end-if
          if $Data_Val_6 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_6
          end-if
          if $Data_Val_7 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_7
          end-if
          if $Data_Val_8 <> ''''''
        let $Exclude_J_Crit = $Exclude_J_Crit || ' and SJB.' || $Exclude_J_Field || ' <> ' || $Data_Val_8
          end-if

      #debug show 'FMB  $Exclude_J_Crit: '  $Exclude_J_Crit

      goto ENDE



E_PERSONAL_DATA:
!FMB not yet coded

   goto ENDE

INCLUDE:

    let $INCLUDE_Rec          = RTRIM(&BDTL.DATA_KEY2,' ')

 If $INCLUDE_Rec = 'JOB'
  goto I_JOB
 End-if

 If $INCLUDE_Rec = 'PERSONAL_DATA'
  goto I_PERSONAL_DATA
 End-if

   goto ENDE

I_JOB:

      let $Include_J_Field = RTRIM(&BDTL.DATA_KEY3,' ')
          if $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' and (SJB.' || $Include_J_Field || ' = ' || $Data_Val_1
          end-if
      if $Data_Val_2 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or SJB.' || $Include_J_Field || ' = ' || $Data_Val_2
      end-if
      if $Data_Val_3 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or SJB.' || $Include_J_Field || ' = ' || $Data_Val_3
      end-if
      if $Data_Val_4 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or SJB.' || $Include_J_Field || ' = ' || $Data_Val_4
      end-if
      if $Data_Val_5 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or  SJB.' || $Include_J_Field || ' = ' || $Data_Val_5
      end-if
      if $Data_Val_6 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or  SJB.' || $Include_J_Field || ' = ' || $Data_Val_6
      end-if
      if $Data_Val_7 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or  SJB.' || $Include_J_Field || ' = ' || $Data_Val_7
      end-if
      if $Data_Val_8 <> '''''' and $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ' or  SJB.' || $Include_J_Field || ' = ' || $Data_Val_8
      end-if
          if $Data_Val_1 <> ''''''
        let $Include_J_Crit = $Include_J_Crit || ') '
      end-if

#debug show 'FMB  $Include_J_Crit: '  $Include_J_Crit

      goto ENDE


I_PERSONAL_DATA:
!FMB not yet coded

   goto ENDE


APPRENTICE:

    let $Apprentice_Rec          = RTRIM(&BDTL.DATA_KEY2,' ')

 If $Apprentice_Rec = 'JOB'
  goto A_JOB
 End-if

  If $Apprentice_Rec = 'PERSONAL_DATA'
  goto A_PERSONAL_DATA
  End-if

 A_JOB:

      let $Apprentice_Field      = RTRIM(&BDTL.DATA_KEY3,' ')
      let $Apprentice_Field      = 'SJB.' || $Apprentice_Field


          let $Apprentice_Val_1 = RTRIM(&BDTL.DATA_Val1,' ')
          let $Apprentice_Val_2 = RTRIM(&BDTL.DATA_Val2,' ')
          let $Apprentice_Val_3 = RTRIM(&BDTL.DATA_Val3,' ')
          let $Apprentice_Val_4 = RTRIM(&BDTL.DATA_Val4,' ')
          let $Apprentice_Val_5 = RTRIM(&BDTL.DATA_Val5,' ')
          let $Apprentice_Val_6 = RTRIM(&BDTL.DATA_Val6,' ')
          let $Apprentice_Val_7 = RTRIM(&BDTL.DATA_Val7,' ')
          let $Apprentice_Val_8 = RTRIM(&BDTL.DATA_Val8,' ')


  goto Ende


  A_Personal_Data:
!FMB not yet coded

  Ende:


from PS_GP_PIN PI, PS_GP_BRACKET BR, PS_GP_BRACKET_DTL BDTL
  where PI.PIN_NUM = BR.PIN_NUM
  and   BDTL.EFFDT = BR.EFFDT
  and   PI.PIN_NUM = BDTL.PIN_NUM
  and   BR.EFFDT = (select max (BR1.EFFDT) from PS_GP_BRACKET BR1
    where BR.PIN_NUM = BR1.PIN_NUM )
 ! and   PI.PIN_NM = 'CH_RP_BESTA'
  [$Bracket_Crit]
  and (  BDTL.DATA_KEY1 = 'APPRENTICE' or BDTL.DATA_KEY1 = 'EXCLUDE' or BDTL.DATA_KEY1 = 'INCLUDE' )

End-Select

#Debug Show '-> End Apprentice '

#Debug Show '$Apprentice_Field: ' $Apprentice_Field
#Debug Show '$Apprentice_let: '   $Apprentice_let
#Debug Show '$Apprentice_Crit1: ' $Apprentice_Crit1

end-procedure Apprentice
!**********************************************************************************************
begin-procedure EVALUATE_APPRENTICE

       let $Apprentice = ' '
              IF   RTRIM($APP_CRIT1, ' ') <> ''        and
                ( ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_1,' ') and  RTRIM($Apprentice_Val_1,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_2,' ') and  RTRIM($Apprentice_Val_2,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_3,' ') and  RTRIM($Apprentice_Val_3,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_4,' ') and  RTRIM($Apprentice_Val_4,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_5,' ') and  RTRIM($Apprentice_Val_5,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_6,' ') and  RTRIM($Apprentice_Val_6,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_7,' ') and  RTRIM($Apprentice_Val_7,' ') <> '' ) or
                  ( RTRIM($APP_CRIT1, ' ') = RTRIM($Apprentice_Val_8,' ') and  RTRIM($Apprentice_Val_8,' ') <> '' )   )
       
       
              let $Apprentice = 'Y'
       End-If

end-procedure EVALUATE_APPRENTICE
!**********************************************************************************************
!**********************************************************************************************
begin-procedure GET_COMPANY_BUR
Begin-Select
A.GPCH_RC_DESCR1 
 
  let $BUR_Nbr2          = &A.GPCH_RC_DESCR1  
 
FROM PS_GPCH_SI_COMPANY A 
  WHERE A.EFFDT = 
        (SELECT MAX(A_ED.EFFDT) FROM PS_GPCH_SI_COMPANY A_ED 
        WHERE A.COMPANY = A_ED.COMPANY 
          AND A_ED.EFFDT <= $TempDate) 
     AND A.EFF_STATUS = 'A'
     AND A.COMPANY = $Ctl_Company1
End-Select

    if isblank($BUR_Nbr2)
       let $BUR_Nbr2 = 99999999 !'99999999'
    end-if

end-procedure GET_COMPANY_BUR
!**********************************************************************************************

BEGIN-PROCEDURE Get-Building-Data

  Write 20 from 'MUTCODE':8
                'CODENEU':8
                'GEBAEUDE':9
                'BEZEICHNUNG':12
                'RUFNAME':30
                'ADRESS':45
                'INTORT':30
                'INTPLZ':7
                'KANTON':7
                'MUTDATUM':11

BEGIN-SELECT distinct
L.EFF_STATUS
CL.GPCH_AL_BLG_NBR &CL.GPCH_AL_BLG_NBR2
L.LOCATION
L.DESCR
L.ADDRESS1
L.ADDRESS2
L.ADDRESS3
L.ADDRESS4
L.CITY
L.POSTAL
L.STATE
L.EFFDT
L.SETID

  let $ADDRESS = RTRIM(&L.ADDRESS1,' ') || ', ' ||
                 RTRIM(&L.ADDRESS2,' ') || ', ' ||
                 RTRIM(&L.ADDRESS3,' ') || ', ' ||
                 RTRIM(&L.ADDRESS4,' ')
  let $ADDRESS = RTRIM(LTRIM($ADDRESS,', '),', ')

  do DeriveBuildingData(&L.LOCATION, &L.SETID, &L.EFFDT, $MUTCODE)

  move &L.EFFDT to $MUTDATUM 'DD Mon YYYY'

  Write 20 from $MUTCODE:8       ! 1
                &CL.GPCH_AL_BLG_NBR2:8 ! 9   "CODENEU"
                &L.LOCATION:9    ! 17  "GEBAEUDE"
                ' ':12           ! 26  "BEZEICHNUNG"
                &L.DESCR:30      ! 38  "RUFNAME"
                $ADDRESS:45      ! 68
                &L.CITY:30       ! 113 "INTORT"
                &L.POSTAL:7      ! 143 "INTPLZ"
                &L.STATE:7       ! 150 "KANTON"
                $MUTDATUM:11     ! 157

FROM PS_LOCATION_TBL L, PS_GPCHST010_TMP CL
WHERE L.COUNTRY = 'CHE'
  AND L.EFF_STATUS = 'A'
  AND L.EFFDT = (SELECT MAX(L1.EFFDT)
             FROM PS_LOCATION_TBL L1
             WHERE L1.SETID = L.SETID
             AND L1.LOCATION = L.LOCATION
             AND L1.EFFDT <= $TempDate)

and  CL.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
and  CL.SETID = L.SETID
and  CL.LOCATION = L.LOCATION
!and  CL.COMPANY = $Ctl_Company
[$Company_Cond1]
AND  CL.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCHST010_TMP CL1
                     where  CL1.SETID = CL.SETID
                       and CL1.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                       and  CL1.LOCATION = CL.LOCATION
                       and  CL1.COMPANY = CL.COMPANY
                       and  CL1.EFFDT<= $TempDate)
ORDER BY L.STATE,CL.GPCH_AL_BLG_NBR


end-SELECT
END-PROCEDURE Get-Building-Data
!**********************************************************************************************
BEGIN-PROCEDURE DeriveBuildingData($LATEST_LOCATION, $LATEST_SETID, $LATEST_EFFDT, :$CHANGECODE)

  ! check if the effdt is in the quarter
  do Convert-To-DTU-Date($LATEST_EFFDT, $LATEST_EFFDT_DTU)
  if isblank($_LastQuarterDate)
      move $_Jahr to #JahrPrev
          subtract 1 from #JahrPrev
      do dtu-format-date(#JahrPrev, 12, 31, $LastQuarterDate_DTU)
  else
      do Convert-To-DTU-Date($_LastQuarterDate, $LastQuarterDate_DTU)
  end-if
  do dtu-diff-days($LastQuarterDate_DTU, $LATEST_EFFDT_DTU, #DiffDays)
  if (#DiffDays > 0)
    let $LATEST_EFFDT_in_qtr_flag = 'Y'
  else
    let $LATEST_EFFDT_in_qtr_flag = 'N'
  end-if

  IF $LATEST_EFFDT_in_qtr_flag = 'Y' ! Latest record has effective date IN the current quarter
        do      GetPreviousBuildingRecord($LATEST_LOCATION, $LATEST_EFFDT, $LATEST_SETID, '', $PrevBldgRecordFlag, $PrevEFFDT, $PrevEFFDT_in_qtr_flag) ! Irrespective of status
        IF $PrevBldgRecordFlag = 'Y'     ! There is at least one previous record (irrespective of status)
      IF $PrevEFF_STATUS = 'I'       ! Next most recent record is "Inactive" - so we're dealing with a newly activated record
        LET $CHANGECODE = 'N'        ! Neu (NEW)
      ELSE                           ! Next most recent record is "Active" - is this record in the current quarter?
        IF $PrevEFFDT_in_qtr_flag = 'N'
          LET $CHANGECODE = ' '      ! Previous record was also Active, but in previous quarter, so there's been no change
        ELSE                         ! Previous record was also Active, but in the current quarter, so we've got to look even further back
          do GetPreviousBuildingRecord($LATEST_LOCATION, $PrevEFFDT, $LATEST_SETID, 'A', $PrevBldgInactiveRecordFlag, $dummy1, $dummy2) ! Get next most recent "Inactive" record
          IF $PrevBldgInactiveRecordFlag = 'Y'   ! There ARE previous INACTIVE records
            LET $CHANGECODE = 'N'    ! Neu (NEW)
          ELSE
            LET $CHANGECODE = ' '    ! Latest record is "Active", there ARE previous records, but not "INACTIVE" ones
          END-IF
        END-IF
      END-IF
        ELSE                             ! NO previous record
      LET $CHANGECODE = 'N'          ! Neu (NEW)
    END-IF
  ELSE                               ! Latest record has effective date BEFORE the current quarter - doesn't matter whether or not there's a previous record
    LET $CHANGECODE     = ' '            ! No change in this quarter
  END-IF

END-PROCEDURE DeriveBuildingData
!**********************************************************************************************
BEGIN-PROCEDURE GetPreviousBuildingRecord($LOCATION, $EFFDT, $SETID, $StatusCondition, :$PrevFlag, :$PREVIOUS_EFFDT, :$PREVIOUS_EFFDT_in_qtr_flag)

  LET $PrevFlag = 'N'

  IF $StatusCondition = ''
    LET $StatusWhereClause = ''
  ELSE
    LET $StatusWhereClause = ' AND EFF_STATUS = ''' || $StatusCondition || ''''
  END-IF

BEGIN-SELECT
LOC.EFF_STATUS
LOC.EFFDT

  let $PrevFlag = 'Y'

  ! check if the effdt is in the quarter
  do Convert-To-DTU-Date(&LOC.EFFDT, $LOC_EFFDT_DTU)
  do Convert-To-DTU-Date($_LastQuarterDate, $LastQuarterDate_DTU)
  do dtu-diff-days($LastQuarterDate_DTU, $LOC_EFFDT_DTU, #DiffDays)
  if (#DiffDays > 0)
    let $PREVIOUS_EFFDT_in_qtr_flag = 'Y'
  else
    let $PREVIOUS_EFFDT_in_qtr_flag = 'N'
  end-if

  move &LOC.EFFDT to $PREVIOUS_EFFDT
  move &LOC.EFF_STATUS to $PREVIOUS_EFF_STATUS

FROM PS_LOCATION_TBL LOC
WHERE COUNTRY = 'CHE'
AND     LOCATION = $LOCATION
AND     SETID = $SETID
AND     EFFDT = (SELECT MAX(LOC1.EFFDT)
             FROM PS_LOCATION_TBL LOC1
             WHERE LOC1.SETID = LOC.SETID
             AND LOC1.LOCATION = LOC.LOCATION
             AND LOC1.EFFDT < $EFFDT)
[$StatusWhereClause]
end-SELECT

END-PROCEDURE GetPreviousBuildingRecord
!**********************************************************************************************

!**********************************************************************************************
begin-procedure Select_Bracket
   let $Bracket_Crit = 'and PI.PIN_NM = ''CH_RP_BESTA'''
Begin-Select
P.PIN_NM
   let $Bracket_Crit = 'and PI.PIN_NM = ''CH_RP_CBESTA'''
from PS_GP_PIN P
  where P.PIN_NM = 'CH_RP_CBESTA'
End-Select
#Debug Show '$Bracket_Crit: ' $Bracket_Crit
end-procedure Select_Bracket
!**********************************************************************************************
begin-procedure Check-Missing-Loctn-Setup

#debug show '$Include_JBB_Crit: '  $Include_JBB_Crit
#debug show '$Exclude_JBB_Crit: '  $Exclude_JBB_Crit

Let $Include_JBB_Crit = replace($Include_J_Crit, 'SJB', 'JBB')
Let $Exclude_JBB_Crit = replace($Exclude_J_Crit, 'SJB', 'JBB')

Begin-Select 
JBB.LOCATION
JBB.COMPANY
COUNT(JBB.EMPLID)     &EmplCount

      LET $JB_LOC = RTRIM(&JBB.LOCATION,' ')     
      LET $JB_COMP = RTRIM(&JBB.COMPANY,' ')           
      LET #counter = &EmplCount
      
     show 'Location ' $JB_LOC ', Company ' $JB_COMP ' has ' #counter ' Employee'

FROM PS_JOB JBB
WHERE JBB.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB JBB1
                      WHERE JBB1.EMPLID = JBB.EMPLID
                      AND   JBB1.EMPL_RCD = JBB.EMPL_RCD      
                      AND   JBB1.EFFDT <= $TempDate)
AND JBB.EFFSEQ    = (SELECT MAX(EFFSEQ) FROM PS_JOB JBB2
                      WHERE JBB2.EMPLID = JBB.EMPLID
                      AND   JBB2.EMPL_RCD = JBB.EMPL_RCD      
                      AND   JBB2.EFFDT = JBB.EFFDT)                      
AND NOT EXISTS (SELECT 'X' FROM PS_GPCHST010_TMP CT
                WHERE CT.COMPANY      = JBB.COMPANY
                and CT.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                and CT.LOCATION       = JBB.LOCATION              
                AND  CT.EFFDT = (SELECT MAX(CL1.EFFDT) FROM PS_GPCHST010_TMP CL1
                     where  CL1.SETID = CT.SETID
                       and  CL1.PROCESS_INSTANCE = #PRCS_PROCESS_INSTANCE
                       and  CL1.COMPANY = CT.COMPANY
                       and  CL1.EFFDT<= $TempDate))
[$Include_JBB_Crit]
[$Exclude_JBB_Crit]
GROUP BY JBB.LOCATION, JBB.COMPANY
ORDER BY JBB.LOCATION, JBB.COMPANY
End-Select

end-procedure
!**********************************************************************************************
!****************************************************************************
Begin-Procedure Report-Translation

do Get_Field_Information ('GPCHST01', '$Strg1',$Strg1,#CW)
do Get_Field_Information ('GPCHST01', '$Strg2',$Strg2,#CW)
do Get_Field_Information ('GPCHST01', '$Strg3',$Strg3,#CW)
do Get_Field_Information ('GPCHST01', '$Strg4',$Strg4,#CW)
do Get_Field_Information ('GPCHST01', '$Strg5',$Strg5,#CW)
do Get_Field_Information ('GPCHST01', '$Strg6',$Strg6,#CW)
do Get_Field_Information ('GPCHST01', '$Strg7',$Strg7,#CW)
do Get_Field_Information ('GPCHST01', '$Strg8',$Strg8,#CW)
do Get_Field_Information ('GPCHST01', '$Strg9',$Strg9,#CW)
do Get_Field_Information ('GPCHST01', '$Strg10',$Strg10,#CW)
do Get_Field_Information ('GPCHST01', '$Strg10_1',$Strg10_1,#CW)
do Get_Field_Information ('GPCHST01', '$Strg11',$Strg11,#CW)
do Get_Field_Information ('GPCHST01', '$Strg11_1',$Strg11_1,#CW)
do Get_Field_Information ('GPCHST01', '$Strg11_2',$Strg11_2,#CW)
do Get_Field_Information ('GPCHST01', '$Strg11_3',$Strg11_3,#CW)
do Get_Field_Information ('GPCHST01', '$Strg11_4',$Strg11_4,#CW)

do Get_Field_Information ('GPCHST01', '$Strg12_1',$Strg12_1,#CW)
do Get_Field_Information ('GPCHST01', '$Strg12_2',$Strg12_2,#CW)
do Get_Field_Information ('GPCHST01', '$Strg12_3',$Strg12_3,#CW)
do Get_Field_Information ('GPCHST01', '$Strg12_4',$Strg12_4,#CW)
do Get_Field_Information ('GPCHST01', '$Strg13',$Strg13,#CW)
do Get_Field_Information ('GPCHST01', '$Strg14',$Strg14,#CW)
do Get_Field_Information ('GPCHST01', '$Strg15',$Strg15,#CW)
do Get_Field_Information ('GPCHST01', '$Strg16',$Strg16,#CW)
do Get_Field_Information ('GPCHST01', '$Strg17',$Strg17,#CW)
do Get_Field_Information ('GPCHST01', '$Strg18',$Strg18,#CW)
do Get_Field_Information ('GPCHST01', '$Strg19',$Strg19,#CW)
do Get_Field_Information ('GPCHST01', '$Strg20',$Strg20,#CW)
do Get_Field_Information ('GPCHST01', '$Strg21',$Strg21,#CW)
do Get_Field_Information ('GPCHST01', '$Strg22',$Strg22,#CW)
do Get_Field_Information ('GPCHST01', '$Strg22_1',$Strg22_1,#CW)
do Get_Field_Information ('GPCHST01', '$Strg23',$Strg23,#CW)
do Get_Field_Information ('GPCHST01', '$Strg24',$Strg24,#CW)

do Get_Field_Information ('GPCHST01', '$Strg25',$Strg25,#CW)
do Get_Field_Information ('GPCHST01', '$Strg26',$Strg26,#CW)
do Get_Field_Information ('GPCHST01', '$Strg27',$Strg27,#CW)
do Get_Field_Information ('GPCHST01', '$Strg28',$Strg28,#CW)
do Get_Field_Information ('GPCHST01', '$Strg29',$Strg29,#CW)
do Get_Field_Information ('GPCHST01', '$Strg30',$Strg30,#CW)
do Get_Field_Information ('GPCHST01', '$Strg31',$Strg31,#CW)
do Get_Field_Information ('GPCHST01', '$Strg32',$Strg32,#CW)
do Get_Field_Information ('GPCHST01', '$Strg33',$Strg33,#CW)
do Get_Field_Information ('GPCHST01', '$Strg34',$Strg34,#CW)
do Get_Field_Information ('GPCHST01', '$Strg35',$Strg35,#CW)
do Get_Field_Information ('GPCHST01', '$Strg36',$Strg36,#CW)
do Get_Field_Information ('GPCHST01', '$Strg37',$Strg37,#CW)

do Get_Field_Information ('GPCHST01', '$Strg38',$Strg38,#CW)
do Get_Field_Information ('GPCHST01', '$Strg39',$Strg39,#CW)
do Get_Field_Information ('GPCHST01', '$Strg40',$Strg40,#CW)
do Get_Field_Information ('GPCHST01', '$Strg41',$Strg41,#CW)
do Get_Field_Information ('GPCHST01', '$Strg42',$Strg42,#CW)
do Get_Field_Information ('GPCHST01', '$Strg43',$Strg43,#CW)
do Get_Field_Information ('GPCHST01', '$Strg44',$Strg44,#CW)
do Get_Field_Information ('GPCHST01', '$Strg45',$Strg45,#CW)
do Get_Field_Information ('GPCHST01', '$Strg46',$Strg46,#CW)
do Get_Field_Information ('GPCHST01', '$Strg47',$Strg47,#CW)
do Get_Field_Information ('GPCHST01', '$Strg48',$Strg48,#CW)
do Get_Field_Information ('GPCHST01', '$Strg49',$Strg49,#CW)
do Get_Field_Information ('GPCHST01', '$Strg50',$Strg50,#CW)
do Get_Field_Information ('GPCHST01', '$Strg51',$Strg51,#CW)
do Get_Field_Information ('GPCHST01', '$Strg52',$Strg52,#CW)
do Get_Field_Information ('GPCHST01', '$Strg53',$Strg53,#CW)
do Get_Field_Information ('GPCHST01', '$QuartStr',$QuartStr,#CW)
end-Procedure Report-Translation
!****************************************************************************
!***********************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
         when = 'GPCHST01'
               do Get_Eng_GPCHST01
               break
         when-other
               break
 end-evaluate
#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHST01'
               do Get_Ger_GPCHST01
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHST01'
               do Get_Ita_GPCHST01
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHST01'
               do Get_Fra_GPCHST01
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************
#include 'gpchut01.sqc'  !Get Strings Values
#include 'gpchst1s.sqc'  !Get Strings Values
#include 'gpchut04.sqc'  !get company informations
#include 'gpchut06.sqc'  !get run control parameter values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'datemath.sqc'  !function for date-calculation