!***********************************************************************
!  GPDETX06:   Trade Tax List (Gewerbesteuerliste)                     *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:37:27                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
! History:
! wdu05b6 created with origin: gpdetx11.sqr 
! wdu05-891b1: codeline merge 2005-05-12 - unch881

#include 'setenv.sqc' !set environment

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-Program


!#include 'setup31.sqc'
#include 'gpdepo01.sqc'


!************************************************
begin-procedure Init-Report
    ! emplid all-row-print for debugging
    let $SuperDetailReport = 'N'    ! wdu05b6: set to 'Y'-> all amounts shown 
    
    ! legislative limit amount constant
    let #Limit = 50000
    
    let #MaxWagesAmt = #Limit
    DO Format-Number(#MaxWagesAmt, $MaxWagesAmt,'888,888,888,888.00')
    
    do Stdapi-Init
    ! begin runcontrol data
    ! If no oprid or runcontrol was passed on the commandline, then ask for it.
    ! After that, fetch functional data from the runcontrol.
    ! The input of functional values is no longer supported.
    if $prcs_process_instance = ''
          input $PRCS_OPRID 'OPRID '
          input $PRCS_RUN_CNTL_ID 'RUNCONTROL '
          input $outputdir 'OUTPUTDIR '
          do Get-Report-Parameters
          ! always override language settings
          let $LANGUAGE_CD = 'GER'
          let $CURR_LANGUAGE_CD = 'GER'
    else
          do Get-Report-Parameters
          ! always override language settings
          let $LANGUAGE_CD = 'GER'
          let $CURR_LANGUAGE_CD = 'GER'
    end-if
    ! end runcontrol data  
         
    do Get-PayEntity-Address
    ! returns: $PyentDescr for heading

    ! emplid sum printing, standard setting should be 'N' (location level)
    ! set to 'Y'->emplid rows, 'N'->summary per loc
    ! Value is taken from the run-control, print detail only if 'Y'
    let $DetailReport = $Ctl_Detail 
    
    if $DetailReport = 'Y'
        ! Einzelnachweis is not a standard-list 
        move 'GPDETX06' to $ReportID
        move 'Einzelnachweis für Gewerbesteuerliste' to $ReportTitle
        !things to see in report
        let $ShowEmplidDetail = 'Y'
        let $ShowEmplidTotal = 'Y'
    else
        move 'GPDETX06' to $ReportID
        move 'Gewerbesteuerliste' to $ReportTitle
        !things to see in report
        let $ShowEmplidDetail = 'N'
        let $ShowEmplidTotal = 'Y'
    end-if

  display $ReportTitle
  display ' '


end-procedure







!************************************************
begin-procedure Init-Layout

#define col1   1
#define col2   20
#define col2b  32
#define col3   35
#define col31  86
#define col4   47
#define col41  55
#define col5   73
#define col6   88
! columns for list BODY
#define colB1   1
#define colB2   12
#define colB2D  22
#define colB3   50
#define colB4   62
#define colB5   70
#define colB6   90
#define colB7   106

#define DASHLEN 35

end-procedure




!************************************************
begin-heading  10
uppercase $ReportTitle
#Include 'stdhdgtr.sqc'

!do Format-DateTime($Ctl_PRD_BD,$Ctl_PRD_BD1,{DEFDATE},'','')
!do Format-DateTime($Ctl_PRD_ED,$Ctl_PRD_ED1,{DEFDATE},'','')

print 'Datum von: '             (3,1)
!print $Ctl_PRD_BD1               (0,0)
print $BegYearAct_prn               (0,0)

print $EuroString      (,1)  center
print 'Datum bis: '             (4,1)
!print $Ctl_PRD_ED1              (0,0)
print $EndYearAct_prn              (0,0)

print $cold                     (5,{col4})
print 'Unternehmen: '           (6,{col1})
print $Ctl_PayEntity            (0,0)

print $PyentDescr              (0,+2)

print 'Kappungsgrenze: '(,{colB5})
print $MaxWagesAmt              (,)
print '_' (+1,1,124) fill
print ' '       (+1,{col1})

if $DetailReport = 'Y'
print 'PersNr.'                  (,{colB3})
print 'BV'                       (,{colB4})
print 'Monat'                    (,{colB7})
end-if

print 'Firma'                    (,{colB1})
Print 'Standort'                 (,{colB2})
print 'Betriebsstaette'          (,{colB2D})
print 'Lohnsumme'                (,{colB5})
print 'Lohnsumme'                (,{colB6})
!print 'Arbeitsstunden'          (,{col6})


print 'ungekappt'                (+1,{colB5})
print 'gekappt'                  (,{colB6})
print '_' (+1,1,124) fill

end-heading







!************************************************
Begin-Procedure Process-Main

         ! reset/prepare global values
         let $Nodata = 'Y'
         do MakeYearBeginEndDates

         let $Note = 'Pre'
         ! main action
         do MainSelectLoop

         ! user information when no rows generated
         do Print_Info_User
End-Procedure Process-Main





!************************************************
begin-procedure MainSelectLoop
! -----------------------------------------------------------------------------
! General logic for the trade tax list
!
! The view returns only the latest version for each calendar and also
! takes care of reversals.
! In this procedure we will step over all rows of the selected year and 
! remember the amount of the last row. We are working on yeartodate accums
! so only the last one is relevant.
!
! When a key change occurs, the last (remembered) row will be registered 
! for processing (added up in full and limited form).
!
! When a change in the major units occurs (pay-entity, location), then
! additional processing takes place, which prints a row for the last entities.
! -----------------------------------------------------------------------------

let $EuroString = 'Betragsangaben in EUR'

! emplid change triggers counter
let $Emplid = ' '
let $LastEmplid=''
let #LastEmplRcd= -1
let $temp=''
! preset to skip first pagebreak
let $LastSiAccidentNum='-x-'
let $LastHazard='-x-'


begin-SELECT
! P.PIN_NM,P.PIN_NUM
! --,DATEPART(YEAR,S1.SEG_END_DT)
AC1.EMPLID
! -- AC1.CAL_RUN_ID
AC1.EMPL_RCD
AC1.GP_PAYGROUP
AC1.CAL_ID
! -- AC1.ORIG_CAL_RUN_ID
! -- AC1.RSLT_SEG_NUM
AC1.PIN_NUM
AC1.EMPL_RCD_ACUM
! -- AC1.ACM_FROM_DT
! -- AC1.ACM_THRU_DT
AC1.SLICE_BGN_DT
AC1.SLICE_END_DT
! -- AC1.SEQ_NUM8
AC1.USER_KEY1
! -- AC1.USER_KEY2
! -- AC1.USER_KEY3
! -- AC1.USER_KEY4
! -- AC1.COUNTRY
! -- AC1.ACM_TYPE
! -- AC1.ACM_PRD_OPTN
AC1.CALC_RSLT_VAL
! -- AC1.CALC_VAL
! -- AC1.USER_ADJ_VAL
! -- AC1.PIN_PARENT_NUM
! -- AC1.CORR_RTO_IND
    let $Note = 'In/' || &AC1.EMPLID
    
    if $SuperDetailReport = 'Y'
        let #DebugRcd = &AC1.EMPL_RCD
        do Format-Number(#DebugRcd, $DebugRcd,'999')
        let #DebugAmount = &AC1.CALC_RSLT_VAL
        do Format-Number(#DebugAmount, $DebugAmount,'999,999,999.00')
        do Format-DateTime(&AC1.SLICE_END_DT,$DebugDate_prn,{DEFDATE},'','')    
        let $RowDebug = &AC1.EMPLID || ',' || $DebugRcd || ' (' || &AC1.USER_KEY1 || ')  '|| $DebugDate_prn || '   ' || $DebugAmount
        print $RowDebug (+1,1)
    end-if
    
    !------- NOTICE: delay logic
    ! #PayAmount is taken from the previous row (last of an emplid), so
    ! it is important to populate this variable **after** the 
    ! Register% procedure calls
    !--------
    
    !  Emplid/rcd switch logic
    !  would print a line for the change from no emplid to first emplid
    !  but $Emplid is not populated yet
    let #wrkEmplRcd = &AC1.EMPL_RCD
    if ($LastEmplid <> &AC1.EMPLID) or (#LastEmplRcd <> #wrkEmplRcd) or ($LastUserKey1 <> &AC1.USER_KEY1)
        ! ----- flush last processed emplid, except the '0th' row.
        if $Emplid <> ' '
                ! When we are here, the amount needs to be registered
                ! In detail-mode it is also printed. 
                do RegisterAmountForLastEmplid 
        end-if
    end-if

    if ($LastUserKey1 <> &AC1.USER_KEY1) and ($Emplid <> ' ') 
        do PrintLocationTotals
    end-if
    
    let $LastEmplid = &AC1.EMPLID
    let #LastEmplRcd = &AC1.EMPL_RCD
    let $LastUserKey1 = &AC1.USER_KEY1
    
    
    ! we populate $Emplid here (late) to detect the first row
    ! and to allow RegisterAmountForLastEmplid to work on the last row
    let $Emplid = &AC1.EMPLID
    let #EmplRcd = &AC1.EMPL_RCD
    
    ! get the new values, these are used in: RegisterAmountForLastEmplid
    ! for the last emplid so it is important that they are filled after the call
    let $UserKey1  = &AC1.USER_KEY1
    let $PayGroup  = &AC1.GP_PAYGROUP
    let $PrdEndDT  = &AC1.SLICE_END_DT
    let #PayAmount = &AC1.CALC_RSLT_VAL
    
    let $Nodata = 'N'
    !do PrintCurrentRowData
FROM PS_GPDE_RP_R_AC_VW AC1
, PS_GP_PIN P
! wdu: we do not join table TAX_LOCATION1, because we do not want to lose data
!      when the setup of it is not okay
! wdu: employee selection via $Ctl_PayEntity from GPDE_RP_0001
WHERE 0=0
AND EXISTS ( SELECT 'X' FROM PS_GPDE_RP_0001 S2X
      WHERE S2X.EMPLID = AC1.EMPLID 
      AND S2X.EMPL_RCD = AC1.EMPL_RCD
      ! selection limited to the chosen pay-entity
      AND S2X.PAY_ENTITY=$Ctl_PayEntity
      AND S2X.SEG_END_DT BETWEEN $BegYearAct AND  $EndYearAct
      AND S2X.GP_PAYGROUP=AC1.GP_PAYGROUP
      AND S2X.CAL_RUN_ID=AC1.CAL_RUN_ID
      AND S2X.ORIG_CAL_RUN_ID=AC1.ORIG_CAL_RUN_ID
      AND S2X.CAL_RUN_ID=AC1.CAL_RUN_ID
      AND S2X.CAL_ID=AC1.CAL_ID
      AND S2X.RSLT_SEG_NUM=AC1.RSLT_SEG_NUM
   )
   ! wdu05b6 employee should not be Praktikant or Azubi
   AND EXISTS ( SELECT 'X' FROM PS_GPDE_RP_SI01 S3X
      WHERE S3X.EMPLID = AC1.EMPLID 
      AND S3X.CAL_RUN_ID=AC1.CAL_RUN_ID
      AND S3X.EMPL_RCD = AC1.EMPL_RCD
      AND S3X.GP_PAYGROUP=AC1.GP_PAYGROUP
      AND S3X.ORIG_CAL_RUN_ID=AC1.ORIG_CAL_RUN_ID
      AND S3X.CAL_ID=AC1.CAL_ID
      AND S3X.RSLT_SEG_NUM=AC1.RSLT_SEG_NUM
      AND S3X.SLICE_END_DT = AC1.SLICE_END_DT
      ! wdu05b6 employee should not be Praktikant or Azubi
      AND NOT ((S3X.GPDE_DV_EMPL_CAT = '102') OR (S3X.GPDE_DV_EMPL_CAT = '105' AND S3X.GPDE_DV_SV_CODE='0000'))  
   )
   AND AC1.PIN_NUM=P.PIN_NUM
   ! AND AC1.EMPLID LIKE 'GD_DEUEV%'      ! wdu: override values for testing
   ! AND P.PIN_NM='DE_SI_0005T_YTD'       ! wdu: override values for testing, use: DE_A2_9090_YTD
   AND P.PIN_NM='DE_A2_9090_YTD'       ! wdu: the real PIN: DE_A2_9090_YTD
AND  AC1.EMPL_RCD_ACUM=AC1.EMPL_RCD
AND  AC1.SLICE_END_DT BETWEEN $BegYearAct AND  $EndYearAct
!
! Warning: the order of fields is of decisive importance
!  
ORDER BY 
!AC1.GP_PAYGROUP
AC1.USER_KEY1
,AC1.EMPLID
,AC1.EMPL_RCD
,AC1.CAL_ID
,AC1.SLICE_END_DT
end-select

!
!
    let $Note = 'Post'
    
    if $Emplid <> ' '
        ! if we had at least 1 emplid then we must flush the delayed row here  
        do RegisterAmountForLastEmplid
        ! if we have emplids then we also must print a total
        do PrintLocationTotals
    end-if
    do PrintGrandTotals
end-procedure




!*************************************************
begin-procedure GetLocationDescr
! in-parameter: $LocationCode
!
begin-select
LOC1.DESCR
FROM PS_TAX_LOCATION1 LOC1
WHERE LOC1.TAX_LOCATION_CD = $LocationCode 
end-select
    
    let $LocationDescr = rtrim(&LOC1.DESCR,' ')
    if $LocationDescr = ''
       let $LocationDescr = 'Bez. nicht gefunden'
    end-if
end-procedure



!************************************************
begin-procedure PrintLocationTotals
! total per location = userkey
        if $DetailReport = 'Y'
            print '_'                (+1,{colB5},{DASHLEN}) fill
        end-if

        ! --------- find location description if code changed --------
        let $LocationCode = $UserKey1 
        if $LocationCode <> $PreviousLocationCode
            do GetLocationDescr
            ! fetches $LocationDescr
            let $PreviousLocationCode = $LocationCode
        end-if
        
        
        do Format-Number(#TotalEmplidAmountUnlimited, $UnlimAmt,'999,999,999.00')
        do Format-Number(#TotalEmplidAmountLimited, $LimAmt,'999,999,999.00')
        print $Ctl_PayEntity     (+1,{colB1})
        print $UserKey1          (,{colB2})
        print $LocationDescr     (,{colB2D})

        print $UnlimAmt           (,{colB5})
        print $LimAmt            (,{colB6})

        if $DetailReport = 'Y'
            print ' '                (+1,)
        end-if
        
        ! reset counters for userkey1
        let #TotalEmplidAmountLimited = 0
        let #TotalEmplidAmountUnlimited = 0
end-procedure





begin-procedure PrintGrandTotals
! grand total = per pay-entity
        print '_'                (+2,{colB5},{DASHLEN}) fill
        
        print $Ctl_PayEntity     (+1,{colB1})
        print $PyentDescr          (,{colB2})
        
        
        print 'Gesamtsumme:'     (,{colB3})
        do Format-Number(#GTotalEmplidAmountUnlimited, $UnlimAmt,'999,999,999.00')
        do Format-Number(#GTotalEmplidAmountLimited, $LimAmt,'999,999,999.00')
        print $UnlimAmt           (,{colB5})
        print $LimAmt            (,{colB6})
end-procedure






!************************************************
begin-procedure RegisterAmountForLastEmplid 
! enter amounts to the counters
! In detail mode a line is printed (for each emplid/empl_rcd/paygroup/userkey)
! In summary mode the amount is only addded up whithout printing

! ###### notice:
! $emplid and #Emplrcd as well as the amounts are valid for the row BEFORE current row
! The current row values are read but not yet set.
! ######

    ! 
    ! limited and unlimited amounts.
    !
    let #EmplidAmountUnlimited = #PayAmount
    if #EmplidAmountUnlimited > #MaxWagesAmt
       let #EmplidAmountLimited = #MaxWagesAmt 
    else
       let #EmplidAmountLimited = #EmplidAmountUnlimited
    end-if
    
    ! totals per pay-entity / userkey / location
    let #TotalEmplidAmountUnlimited = #TotalEmplidAmountUnlimited + #PayAmount
    let #TotalEmplidAmountLimited = #TotalEmplidAmountLimited + #EmplidAmountLimited

    ! grand totals for the sum over all pay-entities
    let #GTotalEmplidAmountUnlimited = #GTotalEmplidAmountUnlimited + #PayAmount
    let #GTotalEmplidAmountLimited = #GTotalEmplidAmountLimited + #EmplidAmountLimited
    
    ! per emplid rows
    if $DetailReport = 'Y'
    
        ! --------- find location description if code changed --------
        let $LocationCode = $UserKey1 
        if $LocationCode <> $PreviousLocationCode
            do GetLocationDescr
            ! fetches $LocationDescr
            let $PreviousLocationCode = $LocationCode
        end-if
    
        do Format-Number(#EmplidAmountUnlimited, $UnlimAmt,'999,999,999.00')
        do Format-Number(#EmplidAmountLimited, $LimAmt,'999,999,999.00')
        do Format-DateTime($PrdEndDT,$PrdEndDT_prn,{DEFDATE},'','')    
        print $Ctl_PayEntity    (+1,{colB1})
        print $UserKey1         (,{colB2})
        print $LocationDescr     (,{colB2D})
        print $Emplid           (,{colB3})
        print #EmplRcd          (,{colB4}) EDIT 88
        
    
        print $UnlimAmt      (,{colB5})
        print $LimAmt         (,{colB6})
        print $PrdEndDT_prn   (,{colB7})
        ! print $Note   (,+5)
    end-if
end-procedure





! ############### utility procedures ############




begin-procedure PrintCurrentRowData 
! ###### notice:
! $emplid and #Emplrcd as well as the amounts are valid for the row BEFORE current row
! The current row values are read but not yet set.
! ######
        do Format-Number(#PayAmount, $T1Amt,'999,999,999.00')
        ! do Format-Number(#TotalEmplidAmountUnlimited, $T2Amt,'999,999,999.00')
        let $T2Amt = '-----'
        do Format-DateTime($PrdEndDT,$PrdEndDT_prn,{DEFDATE},'','')    
        print $Ctl_PayEntity    (+1,{col1})
        print $UserKey1         (,{col2})
        print $Emplid           (,{col3})
        print #EmplRcd          (,+5) EDIT 88

        print $T1Amt      (,{col4})
        print $T2Amt         (,{col5})
        print $PrdEndDT_prn   (,{col6})
        let $RowNote = $Note || '(row)'
        print $RowNote   (,+5)
end-procedure







begin-procedure MakeYearBeginEndDates
!
! create yearbgin and end from the yearnumber on the runcontrol
! BegYearActCmp, EndYearActCmp
    let $BegMonthStr = $Ctl_Year || '0101000000'
    do Format-DateTime($BegMonthStr,$BegYearAct,{DEFCMP},'','native')
    do Format-DateTime($BegYearAct,$BegYearActCmp,{DEFCMP},'','')
    do Format-DateTime($Ctl_Curr_Pay_End_DT,$CtlPayEnd_DTCmp,{DEFCMP},'','')
    let $EndMonthStr = $Ctl_Year || '1231000000'
    do Format-DateTime($EndMonthStr,$EndYearAct,{DEFCMP},'','native')
    do Format-DateTime($EndYearAct,$EndYearActCmp,{DEFCMP},'','')

    ! localized format for heading
    do Format-DateTime($BegYearAct,$BegYearAct_prn,{DEFDATE},'','')    
    do Format-DateTime($EndYearAct,$EndYearAct_prn,{DEFDATE},'','')        
end-procedure




!******************************************************************
begin-procedure Print_Info_User
!Display, if Reqired input on Run Control failed
if $Nodata = 'Y'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing input:'
   display '   Pay Entity: ' noline
   display $Ctl_PayEntity
   display '   From Date: ' noline
   display $Ctl_PRD_BD
   display '   To Date: ' noline
   display $Ctl_PRD_ED
   display '   Employee Type Condition:' noline
   display '-----------------------------------------------------'
end-if
end-procedure


begin-procedure Get-Values
!
! this is called from GPDEUT06.SQC
!
! let $Ctl_Print_Steuer = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_REPORTNAME,' ')

    ! we might get the year from FROM_DATE/TO_DATE as well
    let $Ctl_PRD_BD     = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_FROM_DT,' ')
    let $Ctl_PRD_ED     = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_TO_DT,' ')
    let $Ctl_PayEntity     = RTRIM(&GPDE_RUN_CNTL.PAY_ENTITY,' ')
end-procedure


!****************************************************************************
#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut04.sqc'  !get pay entity information
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'datemath.sqc'
