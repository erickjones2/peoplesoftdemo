!***********************************************************************
!  GPBRSF01:  SEFIP - Sistema Empresa de Recolhimiento do FGTS         *
!                     e Informações à Previdência Social               *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  30634821                                            *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    !Set environment

begin-setup
#include 'setupdb.sqc'
end-setup

Begin-Report
    do Init-DateTime
    do Init-Number
    do Stdapi-Init
    do Get-Current-DateTime
    do Init-Report
    do Select-Parameters

    do PreFillTempTables
    do AbsenceTakeList
    do FillEmployeeGuide


    Evaluate $RC_Gather_Cd
        When = '660'
            do Process-by-Month
            break
        When = '650'
            Do Process-by-Union
            Break
        When-Other
            do Process-Report
            break
    End-Evaluate

    Do Delete-PreFill-Tables
    do Stdapi-Term
    date-time () hh:mi:ss &timeEnded
    display 'Report Ended: ' noline
    display &timeEnded
    do Reset

End-Report

!*****************************
Begin-Procedure PreFillTempTables
#debug show 'Begin-Procedure PreFillTempTables **'
!*****************************

Begin-SQL
INSERT INTO PS_GPBR_SEFIP_AUDT
(PROCESS_INSTANCE,
AUDIT_STAMP,
AUDIT_ACTN,
RECNAME,
FIELDNAME,
KEY1,
NEWVALUE,
OLDVALUE
)
SELECT #prcs_process_instance,
PST.AUDIT_STAMP,
PST.AUDIT_ACTN,
PST.RECNAME,
PST.FIELDNAME,
PST.KEY1,
PST.NEWVALUE,
PST.OLDVALUE

FROM PSAUDIT PST
WHERE PST.RECNAME   = 'PERSON'
AND PST.FIELDNAME   = 'BIRTHDATE'
AND PST.AUDIT_ACTN  = 'C'
AND PST.AUDIT_STAMP = (SELECT MAX(AUDIT_STAMP)
                           FROM PSAUDIT
                          WHERE RECNAME    = PST.RECNAME
                            AND FIELDNAME  = PST.FIELDNAME
                            AND AUDIT_ACTN = PST.AUDIT_ACTN
                            AND AUDIT_STAMP >= $RC_BGN_DT
                            AND AUDIT_STAMP <= $RC_END_DT)

End-SQL

End-Procedure PreFillTempTables

!*****************************
Begin-Procedure Process-by-Month
#debug show 'Begin-Procedure Process-by-Month **'
#debug show '   $EmplFilter     :' $EmplFilter
!*****************************
Let $EmplFilterEstab   = Replace($EmplFilter, 'JOB', 'C')

Begin-Select DISTINCT
A.CAL_RUN_ID
B.PRD_END_DT
A.ORIG_CAL_RUN_ID  &ORIG_CAL_RUN_ID
A.PRD_BGN_DT       &PRD_BGN_DT
A.PRD_END_DT       &PRD_END_DT
A.GPBR_PROCESS_ID

    !$tmpBgnDt is used to data in record 12
    !not for select data in report queries

    Let $tmpBgnDt  = Rtrim(&PRD_BGN_DT, ' ')
    Let $M660EndDt = Rtrim(&PRD_END_DT, ' ')

    Let $CalRunIdKey = ' AND WG6.CAL_RUN_ID = ''' || &A.CAL_RUN_ID || ''' '


    Let #660_process_id = &A.GPBR_PROCESS_ID

    If #660_process_id = 0
        Let $660_process_id = '00000000002'
    Else
        MOVE #660_process_id to $660_process_id '00000000000'
    End-If

    Do Convert-To-DTU-Date($tmpBgnDt, $tmpBgnDt)
    Do Convert-To-DTU-Date($M660EndDt, $M660DTUEndDt)

    Do DTU-Parse-Date($tmpBgnDt, #yy, #mm, #dd)
    Move #mm to $mm '00'
    Move #yy to $yy '0000'
    Let $660ProcessBgnDt = $yy || $mm

    Do DTU-Parse-Date($M660DTUEndDt, #yy, #mm, #dd)
    Move #mm to $mm '00'
    Move #yy to $yy '0000'
    Let $660ProcessEndDt = $yy || $mm
    Let $Competency660 = $yy || $mm

    Let $M660DTUBgnDt = $yy || '-' || $mm || '-' || '01'
    #debug show '      $M660DTUBgnDt :' $M660DTUBgnDt
    Do Convert-From-DTU-Date($M660DTUBgnDt, $M660BgnDt)


    #debug show '    Processing 660'
    #debug show '      $M660BgnDt     :' $M660BgnDt
    #debug show '      $M660EndDt     :' $M660EndDt
    #debug show '      #mm    t       :' #mm ' ' $mm

    Do CountEstabs
    #debug show '      #EstabsInMonth :' #EstabsInMonth
    #debug show '      $EstabsFor660  :' $EstabsFor660

    Do Process-Report
    Do Delete-Temp-Tables


FROM PS_GPBR_SEFIP_G_WA A,
PS_GP_PYE_PRC_STAT B,
PS_GPBR_SEFIP_WA C
WHERE A.CAL_RUN_ID <> A.ORIG_CAL_RUN_ID
AND A.GPBR_GATHERING_CD = '660'
AND B.CAL_RUN_ID = A.CAL_RUN_ID
AND B.RSLT_REV_NUM  = 1
AND B.RSLT_VER_NUM  = 1
AND B.CALC_TYPE = 'P'
AND B.PRD_END_DT >= $BgnDt
AND B.PRD_END_DT <= $EndDt
AND B.GP_PAYGROUP = A.GP_PAYGROUP
AND C.EMPLID = A.EMPLID
[$EmplFilterEstab]
AND C.CAL_RUN_ID  = A.CAL_RUN_ID
AND C.EMPL_RCD    = A.EMPL_RCD
AND C.GP_PAYGROUP = A.GP_PAYGROUP
AND (EXISTS (SELECT 'X'
                   FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                   WHERE ID.PROCESS_TYPE_BRA = '10'
                   AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                   AND CE.ESTABID = C.ESTABID
                   AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                   FROM PS_CENTR_DATA_BRA ID2
                                   WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                   AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                   AND ID2.EFFDT <= $EndDt)
                   AND CE.EFFDT = ID.EFFDT
                   AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                   AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                   AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
      OR C.ESTABID = $RC_Estabid)
ORDER BY B.PRD_END_DT
End-Select

End-Procedure Process-by-Month



!*****************************
Begin-Procedure Process-by-Union
#debug show 'Begin-Procedure Process-by-Union **'
#debug show '   $BgnDt     :' $BgnDt
#debug show '   $EndDt     :' $EndDt
!*****************************
Let $ProcessYear  = '    '

Begin-Select
R650.UNION_CD

    Let $RC_UnionCode = Rtrim(&R650.UNION_CD, ' ')

    !*** Validate union data when reporting SEFIP 650 ***
    Let $ProcessId    = '           '
    Let $ProcessYear  = '    '
    Let $ProcessBgnDt = '           '
    Let $ProcessEndDt = '           '
    Let $GatherAttrib = '  '
    Let $Jurisdiction = '     '

        Do Get-Union-Rev-Contract
        #debug show '    $BgnDtDTU     ' $BgnDtDTU
        #debug show '    $ProcessEndDt ' $ProcessEndDt
        If  $ProcessYear  <> '    '
            Do Process-Report
        End-If

FROM PS_GPBR_UNION_CONT R650
WHERE R650.END_DT >= $BgnDt
AND   R650.END_DT <= $EndDt
End-Select

If  $ProcessYear  = '    '
    #debug show 'SEFIP 650 cannot be reported until the end of union negotiations, review Union Parameters BRA data.'
    show 'SEFIP 650 não pode ser comunicada até ao final de negociações sindicais, revisão de dados da União Parâmetros BRA.'
End-if

End-Procedure Process-by-Union


!*****************************
Begin-Procedure CountEstabs
#debug show 'Begin-Procedure CountEstabs **'
!*****************************

Let #EstabsInMonth = 0

Let $EstabsFor660 = ''

Begin-Select
C.ESTABID

    Let #EstabsInMonth = #EstabsInMonth + 1
    Let $EstabsFor660 = $EstabsFor660 || &C.ESTABID || ' '

FROM PS_GPBR_SEFIP_G_WA A,
PS_GP_PYE_PRC_STAT B,
PS_GPBR_SEFIP_WA C
WHERE A.CAL_RUN_ID <> A.ORIG_CAL_RUN_ID
AND A.GPBR_GATHERING_CD = '660'
AND B.CAL_RUN_ID = A.CAL_RUN_ID
AND B.RSLT_REV_NUM  = 1
AND B.RSLT_VER_NUM  = 1
AND B.CALC_TYPE = 'P'
AND B.PRD_END_DT >= $BgnDt
AND B.PRD_END_DT <= $EndDt
AND A.PRD_BGN_DT >= $M660BgnDt
AND A.PRD_END_DT <= $M660EndDt
AND B.GP_PAYGROUP = A.GP_PAYGROUP
AND C.EMPLID = A.EMPLID
[$EmplFilterEstab]
AND C.CAL_RUN_ID = A.CAL_RUN_ID
AND C.EMPL_RCD = A.EMPL_RCD
AND C.GP_PAYGROUP = A.GP_PAYGROUP
AND (EXISTS (SELECT 'X'
                   FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                   WHERE ID.PROCESS_TYPE_BRA = '10'
                   AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                   AND CE.ESTABID = C.ESTABID
                   AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                   FROM PS_CENTR_DATA_BRA ID2
                                   WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                   AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                   AND ID2.EFFDT <= $EndDt)
                   AND CE.EFFDT = ID.EFFDT
                   AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                   AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                   AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
     OR C.ESTABID = $RC_Estabid)
GROUP BY C.ESTABID
End-Select


End-Procedure CountEstabs

!*****************************
Begin-Procedure Check-Estab-Union
#debug show 'Begin-Procedure Check-Estab-Union **'
#debug show '         $EmpEstablFilter     ' $EmpEstablFilter
!*****************************
!This procedure check if exists information for employees in Establishment and Union
!to avoid include in SEFIP record 10 without employees

Let $Process-Estab-Union = 'N'


if $RC_ListOption = '7'
    !Department ID
    Let $EmpEstablFilter = ' AND WA1.EMPLID IN (SELECT CA2.EMPLID FROM PS_JOB CA2 '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE CA2.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE EMPLID = CA2.EMPLID AND EMPL_RCD = CA2.EMPL_RCD AND '
    Let $EmpEstablFilter = $EmpEstablFilter || ' EFFDT <= ' || '''' || $EndDt || '''' || ')'
    Let $EmpEstablFilter = $EmpEstablFilter || ' AND CA2.DEPTID IN (SELECT DEPTID FROM PS_GPBR_RC_SEFIP_D '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE OPRID = ' || '''' || $prcs_oprid || ''''
    Let $EmpEstablFilter = $EmpEstablFilter || ' AND RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' || ')'
    Let $EmpEstablFilter = $EmpEstablFilter || ')'
Else
    Let $EmpEstablFilter = Replace($EmplFilter, 'JOB', 'WA1')
End-If

Begin-Select Loops = 1
WA1.UNION_CD

    Let $Process-Estab-Union = 'Y'

FROM PS_GPBR_SEFIP_WA WA1,
PS_GP_PYE_PRC_STAT PR1
WHERE WA1.EMPLID          = PR1.EMPLID
AND WA1.CAL_RUN_ID        = PR1.CAL_RUN_ID
AND WA1.EMPL_RCD          = PR1.EMPL_RCD
AND WA1.GP_PAYGROUP       = PR1.GP_PAYGROUP
AND WA1.CAL_ID            = PR1.CAL_ID
AND WA1.ORIG_CAL_RUN_ID   = PR1.ORIG_CAL_RUN_ID
AND WA1.GPBR_GATHERING_CD = '650'
AND WA1.UNION_CD          = $RC_UnionCode
AND WA1.ESTABID           = $CurrentEstabId
AND PR1.PRD_END_DT       >= $BgnDt
AND PR1.PRD_END_DT       <= $EndDt
[$EmpEstablFilter]
End-Select

#debug show '   $Process-Estab-Union : ' $Process-Estab-Union

End-Procedure Check-Estab-Union


!*****************************
Begin-Procedure Init-Report
#debug show 'Begin-Procedure Init-Report **'
!*****************************
    move 'GPBRSF01' to $ReportID
    move 'SEFIP (Sistema Empresa de Recolhimento do FGTS e informações à Previdência Social) Report' to $ReportTitle
    move 'Ver. 2016-P22' to $ReportVersion
    display $ReportID
    display $ReportTitle
    display $ReportVersion
    date-time () hh:mi:ss &timeBegan
    display 'Report Began: ' noline
    display &timeBegan
End-Procedure Init-Report

Begin-Heading 1
End-Heading

!*****************************
Begin-Procedure Select-Parameters
#debug show 'Begin-Procedure Select-Parameters **'
!*****************************
Begin-Select
RC.ESTABID
RC.GPBR_START_MONTH
RC.GPBR_END_YEAR
RC.GPBR_GATHERING_CD
RC.GPBR_FGTS_GATHER
RC.GPBR_FGTS_DT
RC.GPBR_GPS_GATHER_CD
RC.GPBR_GPS_DT
RC.GPBR_INDEX_NUMBER
RC.GPBR_FILE_MODE
RC.GPBR_LIST_OPTION
RC.GPBR_EXCLUDE_FLG1
RC.GB_GROUP_ID
RC.GPBR_INC_ADM_FLAG
RC.RUN_TYPE
RC.UNION_CD
RC.GPBR_INC_AUT_FLAG
RC.GPBR_PRC_ST_FLAG
RC.GPBR_CRED_BGN_DT
RC.GPBR_CRED_END_DT

  Let $Corr_index_number = &RC.GPBR_INDEX_NUMBER
  Let $RC_Estabid        = Rtrim(&RC.ESTABID,' ')
  Let $RC_Comp_Year      = To_Char(&RC.GPBR_END_YEAR)
  Let $RC_Gather_Cd      = &RC.GPBR_GATHERING_CD
  Let $RC_FGTS_Gather_Cd = &RC.GPBR_FGTS_GATHER
  Let $RC_FGTS_Dt        = Rtrim(&RC.GPBR_FGTS_DT, ' ')
  Let $RC_GPS_Gather_Cd  = &RC.GPBR_GPS_GATHER_CD
  Let $RC_GPS_Dt         = Rtrim(&RC.GPBR_GPS_DT, ' ')
  move &RC.GPBR_START_MONTH to $RC_Comp_Month 00
  Let $RC_FileMode       = &RC.GPBR_FILE_MODE
  Let $RC_ListOption     = &RC.GPBR_LIST_OPTION
  Let $RC_ExcludeFlag    = &RC.GPBR_EXCLUDE_FLG1
  Let $RC_GroupId        = Rtrim(&RC.GB_GROUP_ID, ' ')
  Let $RC_IncludeAdmin   = &RC.GPBR_INC_ADM_FLAG
  Let $RC_RunType        = &RC.RUN_TYPE
  Let $RC_UnionCode      = &RC.UNION_CD
  Let $RC_IncludeAuto    = &RC.GPBR_INC_AUT_FLAG
  Let $RC_Process_ST_Structure = &RC.GPBR_PRC_ST_FLAG
  Let $RC_BGN_DT         = Rtrim(&RC.GPBR_CRED_BGN_DT, ' ')
  Let $RC_END_DT         = Rtrim(&RC.GPBR_CRED_END_DT, ' ')




  Evaluate $RC_Gather_Cd
  When = '135'
  !When = '660'
     #debug show 'Selected option is not implemented for current report version: ' $RC_Gather_Cd
     show 'Opção selecionada não está implementada para a versão actual relatório: ' $RC_Gather_Cd
     stop quiet
  End-Evaluate

  Evaluate $RC_Comp_Month
  When = '13'
     Let $CompetencyMonth = '12'
     Let $GPCalendarTbl   = ',PS_GP_CALENDAR  XXX'
     Let $SEFIP_WA_Filter = 'AND XXX.GP_PAYGROUP = YYY.GP_PAYGROUP AND XXX.CAL_ID = YYY.CAL_ID AND XXX.RUN_TYPE = ' || '''' || $RC_RunType || ''''
     Let $BgnDtDTU        = $RC_Comp_Year || '-' || '12' || '-' || '01'
  Break
  When = '12'
     Let $CompetencyMonth = '12'
     Let $GPCalendarTbl   = ',PS_GP_CALENDAR  XXX'
     Let $SEFIP_WA_Filter = 'AND XXX.GP_PAYGROUP = YYY.GP_PAYGROUP AND XXX.CAL_ID = YYY.CAL_ID AND XXX.RUN_TYPE <> ' || '''' || $RC_RunType || ''''
     Let $BgnDtDTU          = $RC_Comp_Year || '-' || $RC_Comp_Month || '-' || '01'
  Break
  When-Other
     Let $CompetencyMonth = $RC_Comp_Month
     Let $GPCalendarTbl   = ''
     Let $BgnDtDTU          = $RC_Comp_Year || '-' || $RC_Comp_Month || '-' || '01'
  End-Evaluate

  do dtu-month-end($BgnDtDTU, $EndDtDTU)
  do Convert-From-DTU-Date($BgnDtDTU,$BgnDt)
  do Convert-From-DTU-Date($EndDtDTU,$EndDt)
  do CreateSQLJobActions

  If $RC_BGN_DT = ''
    Let $RC_BGN_DT = $BgnDt
  End-if

  If $RC_END_DT = ''
    Let $RC_END_DT = $EndDt
  End-if

  if $RC_Comp_Month = '13'

  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND (ZZZ.GPBR_INS_DESC_VAL > 0 OR ZZZ.GPBR_13_COMPENSAT > 0 OR ZZZ.GPBR_REM_PREV_VAL  > 0 OR ZZZ.GPBR_SOC_PROV_13_S > 0)'

  Else

  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND ((ZZZ.GPBR_INS_DESC_VAL > 0 OR ZZZ.GPBR_13_COMPENSAT > 0 OR ZZZ.GPBR_REM_PREV_VAL  > 0 OR ZZZ.GPBR_SOC_PROV_13_S > 0)'
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' OR EXISTS(SELECT ' || '''' || 'X' || '''' || ' FROM PS_GP_RSLT_ABS ABS WHERE ABS.EMPLID = ZZZ.EMPLID'
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND ABS.CAL_RUN_ID = ZZZ.CAL_RUN_ID AND ABS.EMPL_RCD = ZZZ.EMPL_RCD AND ABS.GP_PAYGROUP = ZZZ.GP_PAYGROUP '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND ABS.ORIG_CAL_RUN_ID = ZZZ.ORIG_CAL_RUN_ID AND ABS.RSLT_SEG_NUM = ZZZ.RSLT_SEG_NUM '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND (ABS.ABS_BGN_DT BETWEEN YYY.SEG_BGN_DT AND YYY.SEG_END_DT OR ABS.ABS_END_DT BETWEEN YYY.SEG_BGN_DT AND YYY.SEG_END_DT) '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND ABS.PIN_TAKE_NUM = (SELECT MAX(SP.PIN_TAKE_NUM) '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' FROM PS_GPBR_SEFIP_ABSP SP WHERE SP.PIN_TAKE_NUM = ABS.PIN_TAKE_NUM AND SP.ABSENCE_REASON = ABS.ABSENCE_REASON '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND SP.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SEFIP_ABSP WHERE PIN_TAKE_NUM = SP.PIN_TAKE_NUM '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND ABSENCE_REASON = SP.ABSENCE_REASON AND EFFDT <= YYY.SEG_END_DT)) AND ABS.ABSENCE_REASON = (SELECT MAX(SP1.ABSENCE_REASON) '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' FROM PS_GPBR_SEFIP_ABSP SP1 WHERE SP1.PIN_TAKE_NUM = ABS.PIN_TAKE_NUM AND SP1.ABSENCE_REASON = ABS.ABSENCE_REASON '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' AND SP1.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SEFIP_ABSP WHERE PIN_TAKE_NUM = SP1.PIN_TAKE_NUM AND '
  Let $SEFIP_WA_Filter = $SEFIP_WA_Filter || ' ABSENCE_REASON = SP1.ABSENCE_REASON AND EFFDT <= YYY.SEG_END_DT))))'

  End-if

  move #prcs_process_instance to $prc_instance '000000'
  !Let $FilterRCN_N  = ' AND ((JOB.ACTION IN ( ''HIR'', ''REH'', ''XFR'', ''POI'')'
  Let $FilterRCN_N  = ' AND ((JOB.ACTION IN (' || $SQL_HIR_REH_XFR_POI || ')'
  !Let $FilterRCN_N  = $FilterRCN_N || ' AND RSL.SEL_STAT = ' || '''' || 'A' || '''' || ' ) AND JOB.EMPLID NOT IN '
  Let $FilterRCN_N  = $FilterRCN_N || ' AND RSL.SEL_STAT IN ( ''A'',''S'' )) AND JOB.EMPLID NOT IN '
  Let $FilterRCN_N  = $FilterRCN_N || ' (SELECT EMPLID FROM PS_GPBR_R_SEFIP WHERE PROCESS_INSTANCE = '|| $prc_instance ||' ))'

  !Let $FilterRCN_RC = 'AND ((JOB.ACTION = ' || '''' || 'TER' || '''' || ' AND RSL.SEL_STAT = ' || '''' || 'I' || '''' || ' )'
  Let $FilterRCN_RC = 'AND ((JOB.ACTION IN (' || $SQL_TER ||') AND RSL.SEL_STAT = ''I'' ) '
  !Let $FilterRCN_RC = $FilterRCN_RC || ' OR (JOB.ACTION = ' || '''' || 'REH' || '''' || ' AND RSL.SEL_STAT IN ( ' || '''' || 'A' || '''' || ',' || '''' || 'S' || '''' || ' ))'
  Let $FilterRCN_RC = $FilterRCN_RC || ' OR (JOB.ACTION IN (' || $SQL_REH || ') AND RSL.SEL_STAT IN ( ''A'',''S'')) '
  Evaluate $RC_Gather_Cd
  When = '115'
  When = '150'
  When = '155'
     !Let $FilterRCN_RC = $FilterRCN_RC || ' OR (JOB.ACTION = ' || '''' || 'TER' || '''' || ' AND RSL.SEL_STAT IN ( ' || '''' || 'A' || '''' || ',' || '''' || 'S' || '''' || ' )))'
     Let $FilterRCN_RC = $FilterRCN_RC || ' OR (JOB.ACTION IN (' || $SQL_TER || ') AND RSL.SEL_STAT IN ( ''A'', ''S'' ))) '
  Break
  When-Other
     Let $FilterRCN_RC = $FilterRCN_RC || ')'
  End-Evaluate

  !Create filter according to user selection.
  If $RC_ExcludeFlag = 'Y'
     Let $ExcludeOptn    = ' NOT IN '
  Else
     Let $ExcludeOptn    = ' IN '
  End-If

  Let $EmplFilter      = ''
  Evaluate $RC_ListOption
  When = '6'
  !All Employees
  Break
  When = '3'
  !Select Employees
     Let $EmplFilter      = 'AND JOB.EMPLID' || $ExcludeOptn || '(SELECT EMPLID FROM PS_GPBR_RC_SEFIP_E'
     Let $EmplFilter      = $EmplFilter || ' WHERE OPRID = ' || '''' || $prcs_oprid || ''''
     Let $EmplFilter      = $EmplFilter || ' AND RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' || ')'
  Break
  When = '4'
  !Select Group Id
     Let $EmplFilter      = 'AND JOB.EMPLID' ||  $ExcludeOptn || '(SELECT DISTINCT EMPLID FROM PS_GB_GRP_RES_TBL GE'
     Let $EmplFilter      = $EmplFilter || ' WHERE GB_GROUP_ID  = ' || '''' || $RC_GroupId || ''''
     Let $EmplFilter      = $EmplFilter || ' AND GE.VERSIONGBQDM = (SELECT MAX(GE1.VERSIONGBQDM) FROM PS_GB_GRP_RES_TBL GE1'
     Let $EmplFilter      = $EmplFilter || ' WHERE GE1.GB_GROUP_ID = GE.GB_GROUP_ID ))'
  Break
  When = '7'
  !Select Department Id
     Let $EmplFilter      = 'AND JOB.DEPTID' ||  $ExcludeOptn || '(SELECT DEPTID FROM PS_GPBR_RC_SEFIP_D'
     Let $EmplFilter      = $EmplFilter || ' WHERE OPRID = ' || '''' || $prcs_oprid || ''''
     Let $EmplFilter      = $EmplFilter || ' AND RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' || ')'
  Break
  When-Other
     #debug show 'Selection Criteria Option not codified: ' $RC_ListOption
     show 'Opção de Critérios de Selecção não Codificada: ' $RC_ListOption
     stop quiet
  End-Evaluate

FROM  PS_GPBR_RC_SEFIP RC
WHERE RC.OPRID       = $prcs_oprid
  AND RC.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select

Do FillEstabArray


show '    $RC_Estabid:       ' $RC_Estabid
show '    $RC_Comp_Year:     ' $RC_Comp_Year
show '    $RC_Comp_Month:    ' $RC_Comp_Month
show '    $RC_Gather_Cd:     ' $RC_Gather_Cd
show '    $RC_IncludeAdmin:  ' $RC_IncludeAdmin
show '    $RC_IncludeAuto:   ' $RC_IncludeAuto
#debug show '    $RC_FGTS_Gather_Cd:    ' $RC_FGTS_Gather_Cd
#debug show '    $RC_FGTS_Dt:           ' $RC_FGTS_Dt
#debug show '    $RC_GPS_Gather_Cd:     ' $RC_GPS_Gather_Cd
#debug show '    $RC_GPS_Dt:            ' $RC_GPS_Dt
#debug show '    $RC_FileMode:          ' $RC_FileMode
#debug show '    $RC_ListOption:        ' $RC_ListOption
#debug show '    $RC_ExcludeFlag:       ' $RC_ExcludeFlag
#debug show '    $RC_GroupId:           ' $RC_GroupId
#debug show '    $BgnDt:                ' $BgnDt
#debug show '    $EndDt:                ' $EndDt
#debug show '    $EmplFilter:           ' $EmplFilter
#debug show '    $SEFIP_WA_Filter:      ' $SEFIP_WA_Filter
#debug show '    $FilterRCN_N:          ' $FilterRCN_N
#debug show '    $FilterRCN_RC:         ' $FilterRCN_RC
#debug show '    #prcs_process_instance ' #prcs_process_instance
#debug show '    $curr_language_cd:     ' $curr_language_cd
#debug show '    $RC_BGN_DT:            ' $RC_BGN_DT
#debug show '    $RC_END_DT:            ' $RC_END_DT

Create-Array name=OrderCodes size=10
    Field = Sequence:Integer
    Field = Code:Char:3

!Load Priority Codes

Let #i = 1

Begin-Select
SEQNUM
GPBR_REG_CD_SEFIP

    Let OrderCodes.Sequence(#i) = &SEQNUM
    Let OrderCodes.Code(#i) = Rtrim(&GPBR_REG_CD_SEFIP, ' ')

    Let #i = #i + 1

FROM PS_GPBR_RC_SEFIP_C
WHERE OPRID = $prcs_oprid
AND RUN_CNTL_ID = $prcs_run_cntl_id
ORDER BY SEQNUM ASC
End-Select

let $concat_operator = '||'

#ifdef MICROSOFT
   let $concat_operator = '+'
#endif

End-Procedure Select-Parameters

!*****************************
Begin-Procedure FillEstabArray
#debug show 'Begin-Procedure FillEstabArray **'
!*****************************


Create-Array name=Estabs size=5000
  field = EstabId:char:20
  field = CNPJ:char:14
  field = CentrCode:char:1


!Check if Establishment is Centralizer

Begin-Select
A.CENTRALIZE_CD_BRA

    Let $DisbledCentralization = Rtrim(&A.CENTRALIZE_CD_BRA, ' ')

FROM PS_CENTR_DATA_BRA A

WHERE A.EFFDT = (SELECT MAX(B.EFFDT)
                 FROM PS_CENTR_DATA_BRA B
                 WHERE B.PROCESS_TYPE_BRA = A.PROCESS_TYPE_BRA
                 AND B.CENTR_ESTABID_BRA  = A.CENTR_ESTABID_BRA
                 AND B.EFFDT             <= $EndDt
  )
AND A.PROCESS_TYPE_BRA  = '10'
AND A.CENTR_ESTABID_BRA = $RC_Estabid
End-Select

if $DisbledCentralization = 'C' or $DisbledCentralization = 'G'
    Show '    Centralização Activo'

    put $RC_Estabid into Estabs(1)
    Let #TotalEstab = 1

    !Let $CentralList = '''' || $RC_Estabid || ''', '

Begin-Select
CE.ESTABID


    Let #TotalEstab = #TotalEstab + 1
    put &CE.ESTABID into Estabs(#TotalEstab)

    !Let $CentralList = $CentralList || '''' || &CE.ESTABID || ''', '


FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
WHERE ID.PROCESS_TYPE_BRA = '10'
AND ID.CENTR_ESTABID_BRA = $RC_Estabid
AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                FROM PS_CENTR_DATA_BRA ID2
                WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                AND ID2.EFFDT <= $EndDt)
AND CE.EFFDT = ID.EFFDT
AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
End-Select

!Let $CentralList = Rtrim($CentralList, ', ')

else
    Show '    Centralização Inativo'

    put $RC_Estabid into Estabs(1)
    Let #TotalEstab = 1

    !Let $CentralList = '''' || $RC_Estabid || ''''

end-if

!**** Clean Empty Establishments from Array for gathering codes 115, 150
!**** and 155 when centralization is active
If ($RC_Gather_Cd = '115' or $RC_Gather_Cd = '150' or $RC_Gather_Cd = '155')
    AND $DisbledCentralization <> 'N'

clear-array name=Estabs

Let #TotalEstab = 0

if $RC_ListOption = '7'
    !Department ID
    Let $EmpEstablFilter = ' AND CA1.EMPLID IN (SELECT CA2.EMPLID FROM PS_JOB CA2 '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE CA2.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE EMPLID = CA2.EMPLID AND EMPL_RCD = CA2.EMPL_RCD AND '
    Let $EmpEstablFilter = $EmpEstablFilter || ' EFFDT <= ' || '''' || $EndDt || '''' || ')'
    Let $EmpEstablFilter = $EmpEstablFilter || ' AND CA2.DEPTID IN (SELECT DEPTID FROM PS_GPBR_RC_SEFIP_D '
    Let $EmpEstablFilter = $EmpEstablFilter || ' WHERE OPRID = ' || '''' || $prcs_oprid || ''''
    Let $EmpEstablFilter = $EmpEstablFilter || ' AND RUN_CNTL_ID = ' || '''' || $prcs_run_cntl_id || '''' || ')'
    Let $EmpEstablFilter = $EmpEstablFilter || ')'
Else
    Let $EmpEstablFilter = Replace($EmplFilter, 'JOB', 'CA1')
End-If

 #debug show '       $EmpEstablFilter: ' $EmpEstablFilter

Begin-Select Distinct
CA1.ESTABID

   #debug Show '    -> &CA1.ESTABID  :' &CA1.ESTABID
    Let #TotalEstab = #TotalEstab + 1
    put &CA1.ESTABID into Estabs(#TotalEstab)

FROM PS_GPBR_SEFIP_WA CA1 , PS_GP_RSLT_SEG_VW CB1
WHERE CA1.EMPLID = CB1.EMPLID
AND CA1.EMPL_RCD = CB1.EMPL_RCD
AND CA1.CAL_RUN_ID = CB1.CAL_RUN_ID
AND CA1.GP_PAYGROUP = CB1.GP_PAYGROUP
AND CA1.CAL_ID = CB1.CAL_ID
AND CA1.ORIG_CAL_RUN_ID = CB1.ORIG_CAL_RUN_ID
AND CA1.RSLT_SEG_NUM = CB1.RSLT_SEG_NUM
AND CA1.GPBR_GATHERING_CD = 'NA'
AND CB1.SEG_BGN_DT     >= $BgnDt
AND CB1.SEG_END_DT     <= $EndDt
AND (EXISTS (SELECT 'X'
                   FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                   WHERE ID.PROCESS_TYPE_BRA = '10'
                   AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                   AND CE.ESTABID = CA1.ESTABID
                   AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                   FROM PS_CENTR_DATA_BRA ID2
                                   WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                   AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                   AND ID2.EFFDT <= $EndDt)
                   AND CE.EFFDT = ID.EFFDT
                   AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                   AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                   AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
     OR CA1.ESTABID = $RC_Estabid)
[$EmpEstablFilter]
End-Select

End-If



!************ Clean Establishments without movements for Gathering Code 650
If $RC_Gather_Cd = '650'

clear-array name=Estabs

Let #TotalEstab = 0

Begin-Select Distinct
CA.ESTABID
   #debug Show '    -> &CA.ESTABID  :' &CA.ESTABID
    Let #TotalEstab = #TotalEstab + 1
    put &CA.ESTABID into Estabs(#TotalEstab)

FROM PS_GPBR_SEFIP_WA CA , PS_GP_RSLT_SEG_VW CB
WHERE CA.EMPLID = CB.EMPLID
AND CA.EMPL_RCD = CB.EMPL_RCD
AND CA.CAL_RUN_ID = CB.CAL_RUN_ID
AND CA.GP_PAYGROUP = CB.GP_PAYGROUP
AND CA.CAL_ID = CB.CAL_ID
AND CA.ORIG_CAL_RUN_ID = CB.ORIG_CAL_RUN_ID
AND CA.RSLT_SEG_NUM = CB.RSLT_SEG_NUM
AND CA.GPBR_GATHERING_CD = '650'
AND CB.SEG_BGN_DT     >= $BgnDt
AND CB.SEG_END_DT     <= $EndDt
AND (EXISTS (SELECT 'X'
                   FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                   WHERE ID.PROCESS_TYPE_BRA = '10'
                   AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                   AND CE.ESTABID = CA.ESTABID
                   AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                   FROM PS_CENTR_DATA_BRA ID2
                                   WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                   AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                   AND ID2.EFFDT <= $EndDt)
                   AND CE.EFFDT = ID.EFFDT
                   AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                   AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                   AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
     OR CA.ESTABID = $RC_Estabid)
End-Select

Let #EstabsInMonth = #TotalEstab
end-if


!*****************************************************
!***** Get CNPJ and Sort Establishments in Array *****
!*****************************************************

    Let #i = 1
    While #i <= #TotalEstab
      get $Est from Estabs(#i)
      Do GetArrayCNPJ
        Let Estabs.CNPJ(#i) = $ArrayCNPJ
        Let #i = #i + 1
    End-while

    Do SortEstabsArray

    !************************** Assign Centralization Codes for Record 10 - Field 16
    ! If Centralization = 'C'
    !  If more than 1 Establishment
    !   1 Centralizer (If Centralizer is not in list Set 1 to first Estab in Array)
    !   2 Cenralized
    !  Else
    !   0 Always
    ! Else
    !  0 Always

    If #TotalEstab = 1
        Let Estabs.CentrCode(1) = '0'
    Else
        Let $FoundRCEstab = 'FALSE'
        Let #i = 1
        While #i <= #TotalEstab
            If $DisbledCentralization = 'C'
                if Estabs.EstabId(#i) = $RC_Estabid
                    Let Estabs.CentrCode(#i) = '1'
                    Let $FoundRCEstab = 'TRUE'
                Else
                    Let Estabs.CentrCode(#i) = '2'
                End-If
            Else
                !$DisbledCentralization = 'G'/'N' (Grouping or Not Use)
                Let Estabs.CentrCode(#i) = '0'
            End-if
            Let #i = #i + 1
        End-While

        If $FoundRCEstab = 'FALSE' and $DisbledCentralization = 'C'
            Let Estabs.CentrCode(1) = '1'
        End-If
    End-If

    show '    $DisbledCentralization :' $DisbledCentralization
    Let #i = 1
    While #i <= #TotalEstab
      get $Est $ArrayCNPJ $CentrCode from Estabs(#i)
      show '    ' #i ' CNPJ :' $ArrayCNPJ '  EstabID : ' $Est ' Centralization Code : ' $CentrCode
      Let #i = #i + 1
    End-while

Show '    #TotalEstab   :' #TotalEstab
#debug Show '    $CentralList  :' $CentralList
Show ' '

End-Procedure FillEstabArray

!*****************************
Begin-Procedure GetArrayCNPJ
#debugX show 'Begin-Procedure GetArrayCNPJ **'
#debugX show '   $Est   :' $Est
#debugX show '   $EndDt :' $EndDt

!*****************************
Let $ArrayCNPJ = ''

Begin-Select
ARR.ESTAB_ID_BRA

    Let $ArrayCNPJ = Rtrim(&ARR.ESTAB_ID_BRA, ' ')

FROM PS_ESTAB_ID_BRA ARR
WHERE ARR.ESTABID = $Est
AND ARR.ESTAB_ID_TYPE_BRA = 'CNPJ'
AND ARR.EFFDT = (SELECT MAX(A.EFFDT)
             FROM PS_ESTAB_ID_BRA A
             WHERE A.ESTABID = ARR.ESTABID
             AND A.ESTAB_ID_TYPE_BRA = ARR.ESTAB_ID_TYPE_BRA
             AND A.EFFDT <= $EndDt)
End-Select
#DebugX show '    $ArrayCNPJ :' $ArrayCNPJ
End-Procedure GetArrayCNPJ

!*****************************
Begin-Procedure SortEstabsArray
#debug show 'Begin-Procedure SortEstabsArray **'
!*****************************

    Let #SORTptr = 1

    While #SORTptr < #TotalEstab + 1

       Let $SortCNPJ    = Estabs.CNPJ(#SORTptr)
       Let $SortEstabID = Estabs.EstabId(#SORTptr)

        Let #SCANptr = #SORTptr - 1

        #debugx show '   #SORTptr :' #SORTptr '     #SCANptr :' #SCANptr

        Let $ScanCNPJ    = Estabs.CNPJ(#SCANptr)
        Let $ScanEstabID = Estabs.EstabId(#SCANptr)

        While $SortCNPJ < $ScanCNPJ And #SCANptr >=0

            !#TempIdx = #SCANptr + 1

            Let Estabs.CNPJ(#SCANptr + 1)    = $ScanCNPJ
            Let Estabs.EstabId(#SCANptr + 1) = $ScanEstabID

            Let #SCANptr = #SCANptr - 1

            If #SCANptr >= 0
                Let $ScanCNPJ    = Estabs.CNPJ(#SCANptr)
                Let $ScanEstabID = Estabs.EstabId(#SCANptr)
            End-if
        End-While
        Let Estabs.CNPJ(#SCANptr + 1)    = $SortCNPJ
        Let Estabs.EstabId(#SCANptr + 1) = $SortEstabID

        Let #SORTptr = #SORTptr + 1
    End-While

End-Procedure SortEstabsArray

!*****************************
Begin-Procedure AbsenceTakeList
#debug show 'Begin-Procedure AbsenceTakeList **'
!*****************************

Let $AbsenceTakeList = ''

Begin-Select
ABT.PIN_TAKE_NUM

    Move &ABT.PIN_TAKE_NUM to $PinStrVal '88888888'
    Let $AbsenceTakeList = $AbsenceTakeList || $PinStrVal || ', '


FROM PS_GPBR_SEFIP_ABSP ABT
WHERE ABT.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_GPBR_SEFIP_ABSP
                   WHERE STATUS = 'A'
                   AND EFFDT <= $EndDt)
AND ABT.STATUS = 'A'
End-Select

if length($AbsenceTakeList) = 0
    Let $AbsenceTakeList = '0'
end-if

Let $AbsenceTakeList = Rtrim($AbsenceTakeList, ', ')

#debug Show '   $AbsenceTakeList :' $AbsenceTakeList

End-Procedure AbsenceTakeList

!*****************************
Begin-Procedure FillEmployeeGuide
#debug show 'Begin-Procedure FillEmployeeGuide **'
!*****************************

!*** Select employees and insert in Employee Guide Record

If $RC_Comp_Month <> '13'
        And ($RC_Gather_Cd = '115') !or $RC_Gather_Cd = '650' !or $RC_Gather_Cd = '660')

Begin-SQL
 INSERT INTO PS_GPBR_SEFIP_EMPG ( PROCESS_INSTANCE
 , JOBINSTANCE
 , COMPANY
 , ESTABID
 , EMPLID
 , EMPL_RCD
 , EFFDT
 , EFFSEQ
 , GP_PAYGROUP
 , CBO_CD_BRA
 , HIRE_DT
 , REHIRE_DT
 , SEFIP_CATEGORY_BRA
 , ACTION
 , ACTION_REASON
 , NID_PIS_BRA)
SELECT #prcs_process_instance
,0
,JOB00.COMPANY
,JOB00.ESTABID
,JOB00.EMPLID
,JOB00.EMPL_RCD
,JOB00.EFFDT
,JOB00.EFFSEQ
,JOB00.GP_PAYGROUP
,JJR00.CBO_CD_BRA
,EMN00.HIRE_DT
,EMN00.REHIRE_DT
,JJR00.SEFIP_CATEGORY_BRA
,JOB00.ACTION
,JOB00.ACTION_REASON
,PNI.NATIONAL_ID [$concat_operator] 'NA'

  FROM PS_JOB JOB00
  ,PS_JOB_JR JJR00
  ,PS_EMPLOYMENT EMN00
     LEFT OUTER JOIN PS_PERS_NID   PNI
                                ON (EMN00.EMPLID             = PNI.EMPLID
                                    AND PNI.COUNTRY          = 'BRA'
                                    AND PNI.NATIONAL_ID_TYPE = 'PIS')

 WHERE JOB00.EMPLID   = JJR00.EMPLID
   AND JOB00.EMPL_RCD = JJR00.EMPL_RCD
   AND JOB00.EFFDT    = JJR00.EFFDT
   AND JOB00.EFFSEQ   = JJR00.EFFSEQ
   AND (EXISTS (SELECT 'X'
                           FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                           WHERE ID.PROCESS_TYPE_BRA = '10'
                           AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                           
                           AND CE.ESTABID = JOB00.ESTABID
                           AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                           FROM PS_CENTR_DATA_BRA ID2
                                           WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                           AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                           AND ID2.EFFDT <= $EndDt)
                           AND CE.EFFDT = ID.EFFDT
                           AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                           AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                           AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
        OR JOB00.ESTABID = $RC_Estabid)
   [$EmplFilter2]
   AND JOB00.EMPL_RCD = (SELECT MAX (JOB00_C.EMPL_RCD)
                         FROM PS_JOB JOB00_C
                         WHERE JOB00_C.EMPLID = JOB00.EMPLID)
   AND JOB00.EFFDT    = (SELECT MAX(JOB00_A.EFFDT)
                         FROM PS_JOB JOB00_A
                         WHERE JOB00_A.EMPLID = JOB00.EMPLID
                         AND JOB00_A.EMPL_RCD = JOB00.EMPL_RCD
                         AND JOB00_A.EMPL_STATUS = 'A'
                         AND JOB00_A.EFFDT <= $EndDt)
   AND JOB00.EFFSEQ   = (SELECT MAX(JOB00_B.EFFSEQ)
                         FROM PS_JOB JOB00_B
                         WHERE JOB00_B.EMPLID = JOB00.EMPLID
                         AND JOB00_B.EMPL_RCD = JOB00.EMPL_RCD
                         AND JOB00_B.EMPL_STATUS = 'A'
                         AND JOB00_B.EFFDT = JOB00.EFFDT
                         AND JOB00_B.ESTABID = JOB00.ESTABID)
   AND EMN00.EMPLID   =  JOB00.EMPLID
   AND EMN00.EMPL_RCD =  JOB00.EMPL_RCD
   AND JJR00.SEFIP_CATEGORY_BRA IN ('01','02','03','04','05','06','07')
   AND (
      EXISTS (SELECT 'X'
              FROM PS_PERS_NID_HI_BRA NHI
              WHERE NHI.EMPLID             = JOB00.EMPLID
              AND NHI.COUNTRY              = 'BRA'
              AND NHI.NATIONAL_ID_TYPE IN ('PIS','PASEP','CTPS','CPF')
              AND NHI.ACTION_DT        BETWEEN $RC_BGN_DT AND $RC_END_DT)
       OR
       EXISTS (SELECT 'X'
               FROM PS_GPBR_SEFIP_AUDT PSA
               WHERE PSA.PROCESS_INSTANCE = #prcs_process_instance
               AND PSA.KEY1        = JOB00.EMPLID)
       OR
       EXISTS (SELECT 'X'
               FROM PS_NAMES PSN
               WHERE PSN.EMPLID      = JOB00.EMPLID
               AND PSN.NAME_TYPE   = 'PRI'
               AND PSN.EFFDT = (SELECT MAX(EFFDT)
                                FROM PS_NAMES
                                WHERE EMPLID      = PSN.EMPLID
                                AND NAME_TYPE   = PSN.NAME_TYPE
                                AND EFFDT BETWEEN $RC_BGN_DT AND $RC_END_DT ))
     OR
      EXISTS (SELECT 'X'
              FROM PS_PER_ORG_INST
              WHERE EMPLID = JOB00.EMPLID
              AND LASTUPDDTTM >= $RC_BGN_DT
              AND LASTUPDDTTM <= $RC_END_DT)
    OR
     (JJR00.EFFDT  BETWEEN $RC_BGN_DT AND $RC_END_DT)
    OR
    EXISTS (SELECT 'X'
            FROM PS_ADDRESSES EAD1
            WHERE EAD1.EMPLID= JOB00.EMPLID
            AND EAD1.ADDRESS_TYPE = 'HOME'
            AND EAD1.EFFDT BETWEEN $RC_BGN_DT AND $RC_END_DT)
   )
End-SQL

    #Debug Show 'Manual: Commit-Transaction after Create Employee Guide'
    Do Commit-Transaction

    #ifdef ORACLE
        BEGIN-SQL
            ANALYZE TABLE PS_GPBR_SEFIP_EMPG COMPUTE STATISTICS
        END-SQL
    #endif
End-if

If $RC_Gather_Cd = '115'

#debug show '       *$GPCalTbl        : ' $GPCalTbl
#debug show '       *$SEFIPFilter     : ' $SEFIPFilter
#debug show '       *$EmplFilterRC_N  : ' $EmplFilterRC_N
#debug show '       *$EmplFilterLocal : ' $EmplFilterLocal




Begin-SQL
 INSERT
   INTO
    PS_GPBR_SEFIP_WRK
    (
PROCESS_INSTANCE          ,
        ESTABID           ,
        EMPLID            ,
        EMPL_RCD          ,
        GP_PAYGROUP       ,
        CAL_RUN_ID        ,
        CAL_ID            ,
        SEG_BGN_DT        ,
        SEG_END_DT        ,
        COMP_INS_TYPE_BRA ,
        UNION_CD          ,
        GPBR_RESP_CNPJ    ,
        GPBR_TAKE_INS_TYPE,
        GPBR_STAKER_INSCR ,
        NID_PIS_BRA       ,
        LAST_HIRE_DT      ,
        TERMINATION_DT    ,
        EFFDT             ,
        COMPANY           ,
        ACTION            ,
        ACTION_REASON     ,
        GPBR_SEFIP_CAT    ,
        APPLICANT_NAME    ,
        NID_CTPS_BRA      ,
        GPBR_FGTS_DT      ,
        GPBR_CTPS_ID      ,
        BIRTHDATE         ,
        CBO_CD_BRA        ,
        GPBR_INS_DESC_VAL ,
        GPBR_13_COMPENSAT ,
        GPBR_MULTI_VINC   ,
        GPBR_INSURED_DISC ,
        GPBR_REM_PREV_VAL ,
        GPBR_SOC_PROV_13_S,
        GPBR_GPS_SOC_PROV ,
        EMPL_STATUS       ,
        GPBR_EMP_PERC_CONT,
        GPBR_ACTION_ABS,
        GPBR_ADDL_PYMT,
        GPBR_13TH_SAL_AVG,
        GPBR_13TH_SAL_ADV,
        GPBR_13TH_AVG_ADV,
        GPBR_INSS_13_SAL,
        GPBR_FAMILY_SAL,
        GPBR_PROCESS_ID
    )
SELECT
#prcs_process_instance,
WD2.ESTABID,
WD2.EMPLID,
WD2.EMPL_RCD,
WD2.GP_PAYGROUP,
WD2.CAL_RUN_ID,
WD2.CAL_ID,
WD2.SEG_BGN_DT,
WD2.SEG_END_DT,
A.COMP_INS_TYPE_BRA,
' ',
B.ESTAB_ID_BRA [$concat_operator] ' ',
' ',
' ',
NID.NATIONAL_ID [$concat_operator] ' ',
ADM_DT.EFFDT,
JOB3.TERMINATION_DT,
JOB3.EFFDT,
JOB3.COMPANY,
JOB3.ACTION,
JOB3.ACTION_REASON,
WD2.SEFIP_CATEGORY_BRA,
EMPNAME.NAME_DISPLAY,
NID2.NATIONAL_ID [$concat_operator] ' ',
PYEPARM.GPBR_FGTS_DT,
NID2.CTPS_SERIES_BRA [$concat_operator] ' ',
PERS.BIRTHDATE,
WD2.CBO_CD_BRA,
WD2.GPBR_INS_DESC_VAL,
WD2.GPBR_13_COMPENSAT,
WD2.SEFIP_RISK_LVL_BRA,
WD2.GPBR_INSURED_DISC,
WD2.GPBR_REM_PREV_VAL,
WD2.GPBR_SOC_PROV_13_S,
WD2.GPBR_GPS_SOC_PROV,
JOB3.EMPL_STATUS,
100,
EVT.VOIDED_IND [$concat_operator] ' ',
WD2.GPBR_ADDL_PYMT,
0,
0,
0,
0,
0,
0
FROM (PS_GPBR_SEFIP_WA WD2 LEFT OUTER JOIN PS_GPBR_PRS_NID_VW NID
                                           ON WD2.EMPLID = NID.EMPLID
                                           AND NID.NATIONAL_ID_TYPE = 'PIS'
                           LEFT OUTER JOIN PS_GP_ABS_EVENT EVT
                                           ON WD2.EMPLID = EVT.EMPLID
                                           AND WD2.EMPL_RCD = EVT.EMPL_RCD
                                           AND ((BGN_DT BETWEEN $BgnDt AND $EndDt)
                                                 OR (END_DT BETWEEN $BgnDt AND $EndDt)
                                                 OR (BGN_DT <= $BgnDt AND END_DT >= $EndDt))
                                           AND EVT.VOIDED_IND = 'N'),
     (PS_JOB JOB3          LEFT OUTER JOIN PS_GPBR_PRS_NID_VW NID2
                                            ON JOB3.EMPLID = NID2.EMPLID
                                            AND (NID2.NATIONAL_ID_TYPE = 'CTPS'
                                              OR NID2.NATIONAL_ID_TYPE = 'CPF')),
      PS_JOB ADM_DT,
      PS_PERSON PERS,
      PS_GPBR_PAYEE_PARM PYEPARM,
      PS_NAMES EMPNAME,
     (PS_ESTAB_TBL_BRA A   LEFT OUTER JOIN PS_ESTAB_ID_BRA B
                                           ON((A.ESTAB_ASOC_BRA = B.ESTABID
                                           AND A.COMP_INS_TYPE_BRA   = '20')
                                           OR(A.ESTABID             = B.ESTABID
                                           AND A.COMP_INS_TYPE_BRA   = '10'))
                                           AND B.ESTAB_ID_TYPE_BRA   = 'CNPJ')
      [$GPCalTbl]
WHERE (EXISTS (SELECT 'X'
                       FROM PS_CENTR_DTL_BRA CE, PS_CENTR_DATA_BRA ID
                       WHERE ID.PROCESS_TYPE_BRA = '10'
                       AND ID.CENTR_ESTABID_BRA = $RC_Estabid
                       
                       AND CE.ESTABID = WD2.ESTABID
                       
                       AND ID.EFFDT = (SELECT MAX(ID2.EFFDT)
                                       FROM PS_CENTR_DATA_BRA ID2
                                       WHERE ID2.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                                       AND ID2.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                                       AND ID2.EFFDT <= $EndDt)
                       AND CE.EFFDT = ID.EFFDT
                       AND CE.PROCESS_TYPE_BRA = ID.PROCESS_TYPE_BRA
                       AND CE.CENTR_ESTABID_BRA = ID.CENTR_ESTABID_BRA
                       AND ID.CENTRALIZE_CD_BRA IN ('C','G'))
       OR WD2.ESTABID = $RC_Estabid)
AND WD2.ESTABID   = A.ESTABID
AND(A.EFFDT       = (SELECT MAX(A_ED.EFFDT)
                     FROM PS_ESTAB_TBL_BRA A_ED
                     WHERE A.ESTABID   = A_ED.ESTABID
                     AND A_ED.EFFDT   <= $EndDt)
     AND B.EFFDT  = (SELECT MAX(B_ED.EFFDT)
                     FROM PS_ESTAB_ID_BRA B_ED
                     WHERE B.ESTABID   = B_ED.ESTABID
                     AND B_ED.EFFDT   <= A.EFFDT))
AND PYEPARM.BGN_DT = (SELECT MAX(PYEPARM2.BGN_DT)
                      FROM PS_GPBR_PAYEE_PARM PYEPARM2
                      WHERE PYEPARM.EMPLID   = PYEPARM2.EMPLID
                      AND PYEPARM.EMPL_RCD = PYEPARM2.EMPL_RCD
                      AND PYEPARM2.BGN_DT <= $EndDt)
AND WD2.EMPLID     = EMPNAME.EMPLID
AND EMPNAME.NAME_TYPE = 'PRI'
AND WD2.EMPLID     = PYEPARM.EMPLID
AND WD2.EMPL_RCD   = PYEPARM.EMPL_RCD
AND WD2.EMPLID     = PERS.EMPLID
AND WD2.ORIG_CAL_RUN_ID = WD2.CAL_RUN_ID
AND WD2.GPBR_GATHERING_CD = 'NA'
AND WD2.SEG_BGN_DT       >= $BgnDt
AND WD2.SEG_END_DT       <= $EndDt
[$SEFIPFilter]
AND JOB3.EMPLID   = WD2.EMPLID
AND JOB3.EMPL_RCD = WD2.EMPL_RCD
AND JOB3.ESTABID  = WD2.ESTABID
AND JOB3.EFFDT =
    (SELECT
        MAX(EFFDT)
       FROM
        PS_JOB
      WHERE
        EMPLID         = JOB3.EMPLID
    AND EMPL_RCD       = JOB3.EMPL_RCD
    !AND ACTION        IN('HIR', 'TER', 'XFR', 'REH', 'POI', 'LOF', 'COM')
    AND ACTION        IN([$SQL_TER_COM_LOF_XFR_HIR_REH_POI])
    AND(EFFDT         <= WD2.SEG_END_DT
     OR TERMINATION_DT = WD2.SEG_END_DT)
    )
AND JOB3.EFFSEQ =
    (SELECT
        MAX(EFFSEQ)
       FROM
        PS_JOB
      WHERE
        EMPLID   = JOB3.EMPLID
    AND EMPL_RCD = JOB3.EMPL_RCD
    AND EFFDT    = JOB3.EFFDT
    AND ESTABID  = JOB3.ESTABID
    )
[$EmplFilterLocal]
AND WD2.SEFIP_CATEGORY_BRA <> '22'
AND EMPNAME.EFFDT           =
    (SELECT
        MAX(B_ED.EFFDT)
       FROM
        PS_NAMES B_ED
      WHERE
        EMPNAME.EMPLID    = B_ED.EMPLID
    AND EMPNAME.NAME_TYPE = B_ED.NAME_TYPE
    AND B_ED.EFFDT       <= $EndDt
    )
AND (EVT.BGN_DT = (SELECT MAX(BGN_DT)
                 FROM PS_GP_ABS_EVENT
                  WHERE EMPLID = EVT.EMPLID
                  AND BGN_DT <= $EndDt) OR EVT.BGN_DT IS NULL)
AND ADM_DT.EMPLID = JOB3.EMPLID
AND ADM_DT.EMPL_RCD = JOB3.EMPL_RCD
AND ADM_DT.EFFDT = (SELECT MAX(ADM_DT1.EFFDT)
                    FROM PS_JOB ADM_DT1
                    WHERE ADM_DT1.EMPLID = ADM_DT.EMPLID
                      AND ADM_DT1.EMPL_RCD = ADM_DT.EMPL_RCD
                      AND ((EXISTS (SELECT 'X'
                                    FROM PS_LEG_MOV_DET_BRA SFP
                                       , PS_GPBR_JOB_SFP_VW ADM_DT2
                                    WHERE SFP.PROCESS_TYPE_BRA = '10'
                                      AND SFP.EFFDT = (SELECT MAX(SFP1.EFFDT)
                                                       FROM PS_LEG_MOV_DET_BRA SFP1
                                                       WHERE SFP1.PROCESS_TYPE_BRA = SFP.PROCESS_TYPE_BRA
                                                         AND SFP1.EFFDT <= $EndDt
                                                         AND SFP1.ACTION = SFP.ACTION
                                                         AND SFP1.ACTION_REASON = SFP.ACTION_REASON)
                                      AND SFP.ACTION = ADM_DT1.ACTION
                                      AND SFP.ACTION_REASON = ADM_DT1.ACTION_REASON
                                      AND SFP.SEFIP_LEG_MOV_BRA = 'N3'
                                      AND ADM_DT2.EMPLID = ADM_DT1.EMPLID
                                      AND ADM_DT2.EMPL_RCD = ADM_DT1.EMPL_RCD
                                      AND ADM_DT2.ACTION = SFP.ACTION
                                      AND ADM_DT2.ACTION = ADM_DT1.ACTION))
                            OR ADM_DT1.ACTION = 'HIR'))
End-SQL

    #Debug Show 'Manual: Commit-Transaction after Create Employee Work Table'
    Do Commit-Transaction

    #ifdef ORACLE
        BEGIN-SQL
            ANALYZE TABLE PS_GPBR_SEFIP_WRK COMPUTE STATISTICS
        END-SQL
    #endif

End-if

!*******************************************************************************************************
If $RC_Gather_Cd = '660'

#debug show '       *$EmplFilter      : ' $EmplFilter
Let $EmplFilter660 = Replace($EmplFilter, 'JOB', 'JOB6')
#debug show '       *$EmplFilter660   : ' $EmplFilter660

Begin-SQL
 INSERT
   INTO
    PS_GPBR_SEFIP_WRK
    (
PROCESS_INSTANCE          ,
        ESTABID           ,
        EMPLID            ,
        EMPL_RCD          ,
        GP_PAYGROUP       ,
        CAL_RUN_ID        ,
        CAL_ID            ,
        SEG_BGN_DT        ,
        SEG_END_DT        ,
        COMP_INS_TYPE_BRA ,
        UNION_CD          ,
        GPBR_RESP_CNPJ    ,
        GPBR_TAKE_INS_TYPE,
        GPBR_STAKER_INSCR ,
        NID_PIS_BRA       ,
        LAST_HIRE_DT      ,
        TERMINATION_DT    ,
        EFFDT             ,
        COMPANY           ,
        ACTION            ,
        ACTION_REASON     ,
        GPBR_SEFIP_CAT    ,
        APPLICANT_NAME    ,
        NID_CTPS_BRA      ,
        GPBR_FGTS_DT      ,
        GPBR_CTPS_ID      ,
        BIRTHDATE         ,
        CBO_CD_BRA        ,
        GPBR_INS_DESC_VAL ,
        GPBR_13_COMPENSAT ,
        GPBR_MULTI_VINC   ,
        GPBR_INSURED_DISC ,
        GPBR_REM_PREV_VAL ,
        GPBR_SOC_PROV_13_S,
        GPBR_GPS_SOC_PROV ,
        EMPL_STATUS       ,
        GPBR_EMP_PERC_CONT,
        GPBR_ACTION_ABS,
        GPBR_ADDL_PYMT,
        GPBR_13TH_SAL_AVG,
        GPBR_13TH_SAL_ADV,
        GPBR_13TH_AVG_ADV,
        GPBR_INSS_13_SAL,
        GPBR_FAMILY_SAL,
        GPBR_PROCESS_ID
    )
SELECT
#prcs_process_instance
,JOB6.ESTABID
,JOB6.EMPLID
,JOB6.EMPL_RCD
,WD6.GP_PAYGROUP
,WD6.CAL_RUN_ID
,WD6.CAL_ID
,ST6.SEG_BGN_DT
,ST6.SEG_END_DT
,' '
,' '
,' '
,' '
,' '
,CASE                                       !-- NATIONAL ID (PIS)
   WHEN (PNI.NATIONAL_ID IS NULL AND PAS.NATIONAL_ID IS NULL) THEN ' '
   WHEN (PNI.NATIONAL_ID IS NULL AND NOT (PAS.NATIONAL_ID IS NULL)) THEN PAS.NATIONAL_ID
   ELSE PNI.NATIONAL_ID
 END
,ADM_DT.EFFDT
,JOB6.TERMINATION_DT
,JOB6.EFFDT
,JOB6.COMPANY
,JOB6.ACTION
,JOB6.ACTION_REASON
,WD6.SEFIP_CATEGORY_BRA
,EMPNAME.NAME_DISPLAY                       !-- EMPNAME.NAME_DISPLAY
,N2.NATIONAL_ID [$concat_operator] ' '      !-- NATIONAL ID (CTPS)
,PYE.GPBR_FGTS_DT
,N2.CTPS_SERIES_BRA [$concat_operator] ' '  !-- CTPS_SERIES_BRA
,PE.BIRTHDATE                               !--PERS.BIRTHDATE,
,WD6.CBO_CD_BRA
,WD6.GPBR_INS_DESC_VAL
,WD6.GPBR_13_COMPENSAT
,WD6.SEFIP_RISK_LVL_BRA
,WD6.GPBR_INSURED_DISC
,WD6.GPBR_REM_PREV_VAL
,WD6.GPBR_SOC_PROV_13_S
,WD6.GPBR_GPS_SOC_PROV
,JOB6.EMPL_STATUS
,100
,'N'                                        !-- EVT.VOIDED_IND
,WD6.GPBR_ADDL_PYMT
,WD6.GPBR_13TH_SAL_AVG
,WD6.GPBR_13TH_SAL_ADV
,WD6.GPBR_13TH_AVG_ADV
,WD6.GPBR_INSS_13_SAL
,WD6.GPBR_FAMILY_SAL
,WG6.GPBR_PROCESS_ID
FROM PS_GPBR_SEFIP_WA WD6    LEFT OUTER JOIN PS_PERS_NID PNI
                                             ON WD6.EMPLID            = PNI.EMPLID
                                             AND PNI.COUNTRY          = 'BRA'
                                             AND PNI.NATIONAL_ID_TYPE = 'PIS'
                             LEFT OUTER JOIN PS_PERS_NID PAS
                                             ON WD6.EMPLID            = PAS.EMPLID
                                             AND PAS.COUNTRY          = 'BRA'
                                             AND PAS.NATIONAL_ID_TYPE = 'PASEP'
                             LEFT OUTER JOIN PS_GPBR_PRS_NID_VW N2
                                             ON WD6.EMPLID            = N2.EMPLID
                                             AND N2.COUNTRY           = 'BRA'
                                             AND N2.NATIONAL_ID_TYPE  IN ('CTPS','CPF')
                             LEFT OUTER JOIN PS_PERSON PE
                                             ON PE.EMPLID = WD6.EMPLID,
     PS_NAMES EMPNAME,
     PS_GPBR_SEFIP_G_WA WG6,
     PS_GPBR_PAYEE_PARM PYE,
     PS_JOB JOB6,
     PS_JOB ADM_DT,
     PS_GP_PYE_SEG_STAT ST6
WHERE WD6.EMPLID = WG6.EMPLID
AND WG6.GPBR_GATHERING_CD = '660'
!--AND WD6.ESTABID           IN ([$EstabList])
AND WD6.CAL_RUN_ID        = WG6.CAL_RUN_ID
AND WD6.EMPL_RCD          = WG6.EMPL_RCD
AND WD6.GP_PAYGROUP       = WG6.GP_PAYGROUP
AND WD6.ORIG_CAL_RUN_ID   = WG6.ORIG_CAL_RUN_ID
AND WD6.RSLT_SEG_NUM      = WG6.RSLT_SEG_NUM
AND WD6.GPBR_GATHERING_CD = WG6.GPBR_GATHERING_CD
!--AND WG6.PRD_END_DT       >= $M660BgnDt
!--AND WG6.PRD_END_DT       <= $M660EndDt
!--AND WG6.GPBR_PROCESS_ID   = #660_process_id
AND ST6.EMPLID            = WD6.EMPLID
AND ST6.CAL_RUN_ID        = WD6.CAL_RUN_ID
AND ST6.EMPL_RCD          = WD6.EMPL_RCD
AND ST6.GP_PAYGROUP       = WD6.GP_PAYGROUP
AND ST6.CAL_ID            = WD6.CAL_ID
AND ST6.ORIG_CAL_RUN_ID   = WD6.ORIG_CAL_RUN_ID
AND ST6.RSLT_SEG_NUM      = WD6.RSLT_SEG_NUM
AND JOB6.EMPLID           = WD6.EMPLID
AND JOB6.EMPL_RCD         = WD6.EMPL_RCD
AND JOB6.ESTABID          = WD6.ESTABID
AND JOB6.EFFDT            = (SELECT MAX(EFFDT)
                             FROM PS_JOB
                             WHERE EMPLID = JOB6.EMPLID
                             AND EMPL_RCD = JOB6.EMPL_RCD
                             AND EFFDT <= $EndDt)
AND JOB6.EFFSEQ           = (SELECT MAX(EFFSEQ)
                             FROM PS_JOB
                             WHERE EMPLID = JOB6.EMPLID
                             AND EMPL_RCD = JOB6.EMPL_RCD
                             AND ESTABID = JOB6.ESTABID
                             AND EFFDT = JOB6.EFFDT)
AND PYE.BGN_DT            = (SELECT MAX(PYE2.BGN_DT)
                             FROM PS_GPBR_PAYEE_PARM PYE2
                             WHERE PYE.EMPLID   = PYE2.EMPLID
                             AND PYE.EMPL_RCD = PYE2.EMPL_RCD
                             AND PYE2.BGN_DT <= $EndDt)
AND WG6.EMPLID            = PYE.EMPLID
AND WG6.EMPL_RCD          = PYE.EMPL_RCD
AND WG6.EMPLID            = EMPNAME.EMPLID
AND EMPNAME.EFFDT         = (SELECT MAX(B_ED.EFFDT)
                             FROM PS_NAMES B_ED
                             WHERE EMPNAME.EMPLID  = B_ED.EMPLID
                             AND EMPNAME.NAME_TYPE = B_ED.NAME_TYPE
                             AND B_ED.EFFDT       <= $EndDt)
[$EmplFilter660]
AND WD6.SEFIP_CATEGORY_BRA <> '22'
AND ADM_DT.EMPLID         = JOB6.EMPLID
AND ADM_DT.EMPL_RCD       = JOB6.EMPL_RCD
AND ADM_DT.EFFDT          = (SELECT MAX(ADM_DT1.EFFDT)
                             FROM PS_JOB ADM_DT1
                             WHERE ADM_DT1.EMPLID = ADM_DT.EMPLID
                               AND ADM_DT1.EMPL_RCD = ADM_DT.EMPL_RCD
                               AND ((EXISTS (SELECT 'X'
                                             FROM PS_LEG_MOV_DET_BRA SFP
                                                , PS_GPBR_JOB_SFP_VW ADM_DT2
                                             WHERE SFP.PROCESS_TYPE_BRA = '10'
                                               AND SFP.EFFDT = (SELECT MAX(SFP1.EFFDT)
                                                                FROM PS_LEG_MOV_DET_BRA SFP1
                                                                WHERE SFP1.PROCESS_TYPE_BRA = SFP.PROCESS_TYPE_BRA
                                                                  AND SFP1.EFFDT <= $EndDt
                                                                  AND SFP1.ACTION = SFP.ACTION
                                                                  AND SFP1.ACTION_REASON = SFP.ACTION_REASON)
                                               AND SFP.ACTION = ADM_DT1.ACTION
                                               AND SFP.ACTION_REASON = ADM_DT1.ACTION_REASON
                                               AND SFP.SEFIP_LEG_MOV_BRA = 'N3'
                                               AND ADM_DT2.EMPLID = ADM_DT1.EMPLID
                                               AND ADM_DT2.EMPL_RCD = ADM_DT1.EMPL_RCD
                                               AND ADM_DT2.ACTION = SFP.ACTION
                                               AND ADM_DT2.ACTION = ADM_DT1.ACTION))
                                     OR ADM_DT1.ACTION = 'HIR'))
End-SQL


    #Debug Show 'Manual: Commit-Transaction after Create Employee Work Table'
    Do Commit-Transaction

    #ifdef ORACLE
        BEGIN-SQL
            ANALYZE TABLE PS_GPBR_SEFIP_WRK COMPUTE STATISTICS
        END-SQL
    #endif

End-if
!*******************************************************************************************************
If $RC_Gather_Cd = '650'

#debug show '       *$EmplFilter      : ' $EmplFilter
Let $EmplFilter650 = Replace($EmplFilter, 'JOB', 'JOB6')
#debug show '       *$EmplFilter650   : ' $EmplFilter650

Begin-SQL
 INSERT
   INTO
    PS_GPBR_SEFIP_WRK
    (
PROCESS_INSTANCE          ,
        ESTABID           ,
        EMPLID            ,
        EMPL_RCD          ,
        GP_PAYGROUP       ,
        CAL_RUN_ID        ,
        CAL_ID            ,
        SEG_BGN_DT        ,
        SEG_END_DT        ,
        COMP_INS_TYPE_BRA ,
        UNION_CD          ,
        GPBR_RESP_CNPJ    ,
        GPBR_TAKE_INS_TYPE,
        GPBR_STAKER_INSCR ,
        NID_PIS_BRA       ,
        LAST_HIRE_DT      ,
        TERMINATION_DT    ,
        EFFDT             ,
        COMPANY           ,
        ACTION            ,
        ACTION_REASON     ,
        GPBR_SEFIP_CAT    ,
        APPLICANT_NAME    ,
        NID_CTPS_BRA      ,
        GPBR_FGTS_DT      ,
        GPBR_CTPS_ID      ,
        BIRTHDATE         ,
        CBO_CD_BRA        ,
        GPBR_INS_DESC_VAL ,
        GPBR_13_COMPENSAT ,
        GPBR_MULTI_VINC   ,
        GPBR_INSURED_DISC ,
        GPBR_REM_PREV_VAL ,
        GPBR_SOC_PROV_13_S,
        GPBR_GPS_SOC_PROV ,
        EMPL_STATUS       ,
        GPBR_EMP_PERC_CONT,
        GPBR_ACTION_ABS,
        GPBR_ADDL_PYMT,
        GPBR_13TH_SAL_AVG,
        GPBR_13TH_SAL_ADV,
        GPBR_13TH_AVG_ADV,
        GPBR_INSS_13_SAL,
        GPBR_FAMILY_SAL,
        GPBR_PROCESS_ID
    )
SELECT
#prcs_process_instance
,JOB6.ESTABID
,JOB6.EMPLID
,JOB6.EMPL_RCD
,WD6.GP_PAYGROUP
,WD6.CAL_RUN_ID
,WD6.CAL_ID
,ST6.SEG_BGN_DT
,ST6.SEG_END_DT
,' '
,WD6.UNION_CD
,' '
,' '
,' '
,CASE                                  !-- NATIONAL ID (PIS)
   WHEN (PNI.NATIONAL_ID IS NULL AND PAS.NATIONAL_ID IS NULL) THEN ' '
   WHEN (PNI.NATIONAL_ID IS NULL AND NOT (PAS.NATIONAL_ID IS NULL)) THEN PAS.NATIONAL_ID
   ELSE PNI.NATIONAL_ID
 END
,ADM_DT.EFFDT
,JOB6.TERMINATION_DT
,JOB6.EFFDT
,JOB6.COMPANY
,JOB6.ACTION
,JOB6.ACTION_REASON
,WD6.SEFIP_CATEGORY_BRA
,EMPNAME.NAME_DISPLAY                  !-- EMPNAME.NAME_DISPLAY
,N2.NATIONAL_ID [$concat_operator] ' ' !-- NATIONAL ID (CTPS)
,PYE.GPBR_FGTS_DT
,N2.CTPS_SERIES_BRA                    !-- CTPS_SERIES_BRA
,PE.BIRTHDATE                          !--PERS.BIRTHDATE,
,WD6.CBO_CD_BRA
,WD6.GPBR_INS_DESC_VAL
,WD6.GPBR_13_COMPENSAT
,WD6.SEFIP_RISK_LVL_BRA
,WD6.GPBR_INSURED_DISC
,WD6.GPBR_REM_PREV_VAL
,WD6.GPBR_SOC_PROV_13_S
,WD6.GPBR_GPS_SOC_PROV
,JOB6.EMPL_STATUS
,100
,' '                                   !-- EVT.VOIDED_IND
,WD6.GPBR_ADDL_PYMT
,WD6.GPBR_13TH_SAL_AVG
,WD6.GPBR_13TH_SAL_ADV
,WD6.GPBR_13TH_AVG_ADV
,WD6.GPBR_INSS_13_SAL
,WD6.GPBR_FAMILY_SAL
,0                                     !-- WG6.GPBR_PROCESS_ID Not used in 650
FROM PS_GPBR_SEFIP_WA WD6    LEFT OUTER JOIN PS_PERS_NID PNI
                                             ON WD6.EMPLID            = PNI.EMPLID
                                             AND PNI.COUNTRY          = 'BRA'
                                             AND PNI.NATIONAL_ID_TYPE = 'PIS'
                             LEFT OUTER JOIN PS_PERS_NID PAS
                                             ON WD6.EMPLID            = PAS.EMPLID
                                             AND PAS.COUNTRY          = 'BRA'
                                             AND PAS.NATIONAL_ID_TYPE = 'PASEP'
                             LEFT OUTER JOIN PS_GPBR_PRS_NID_VW N2
                                             ON WD6.EMPLID            = N2.EMPLID
                                             AND N2.COUNTRY           = 'BRA'
                                             AND (N2.NATIONAL_ID_TYPE  = 'CTPS'
                                               OR N2.NATIONAL_ID_TYPE  = 'CPF')
                             LEFT OUTER JOIN PS_PERSON PE
                                             ON PE.EMPLID = WD6.EMPLID,
     PS_NAMES EMPNAME,
     PS_GPBR_SEFIP_WA WG6,
     PS_GPBR_PAYEE_PARM PYE,
     PS_JOB JOB6,
     PS_JOB ADM_DT,
     PS_GP_PYE_SEG_STAT ST6
WHERE WD6.EMPLID = WG6.EMPLID
AND WG6.GPBR_GATHERING_CD = '650'
!--AND WD6.ESTABID           IN ([$EstabList])
AND WD6.CAL_RUN_ID        = WG6.CAL_RUN_ID
AND WD6.EMPL_RCD          = WG6.EMPL_RCD
AND WD6.GP_PAYGROUP       = WG6.GP_PAYGROUP
AND WD6.ORIG_CAL_RUN_ID   = WG6.ORIG_CAL_RUN_ID
AND WD6.RSLT_SEG_NUM      = WG6.RSLT_SEG_NUM
AND WD6.GPBR_GATHERING_CD = WG6.GPBR_GATHERING_CD
AND ST6.SEG_BGN_DT        >= $BgnDt
AND ST6.SEG_END_DT        <= $EndDt
AND ST6.EMPLID            = WD6.EMPLID
AND ST6.CAL_RUN_ID        = WD6.CAL_RUN_ID
AND ST6.EMPL_RCD          = WD6.EMPL_RCD
AND ST6.GP_PAYGROUP       = WD6.GP_PAYGROUP
AND ST6.CAL_ID            = WD6.CAL_ID
AND ST6.ORIG_CAL_RUN_ID   = WD6.ORIG_CAL_RUN_ID
AND ST6.RSLT_SEG_NUM      = WD6.RSLT_SEG_NUM
AND JOB6.EMPLID           = WD6.EMPLID
AND JOB6.EMPL_RCD         = WD6.EMPL_RCD
AND JOB6.ESTABID          = WD6.ESTABID
AND JOB6.EFFDT             = (SELECT MAX(EFFDT)
                             FROM PS_JOB WHERE EMPLID = JOB6.EMPLID
                             AND EMPL_RCD             = JOB6.EMPL_RCD
                             AND ACTION IN ([$SQL_TER_COM_LOF_XFR_HIR_REH_POI])
                             AND (EFFDT <= ST6.SEG_END_DT
                                  OR TERMINATION_DT = ST6.SEG_END_DT))
AND JOB6.EFFSEQ           = (SELECT MAX(EFFSEQ)
                             FROM PS_JOB
                             WHERE EMPLID = JOB6.EMPLID
                             AND EMPL_RCD = JOB6.EMPL_RCD
                             AND ESTABID  = JOB6.ESTABID
                             AND EFFDT    = JOB6.EFFDT)
AND PYE.BGN_DT            = (SELECT MAX(PYE2.BGN_DT)
                             FROM PS_GPBR_PAYEE_PARM PYE2
                             WHERE PYE.EMPLID   = PYE2.EMPLID
                             AND PYE.EMPL_RCD   = PYE2.EMPL_RCD
                             AND PYE2.BGN_DT   <= $EndDt)
AND WG6.EMPLID            = PYE.EMPLID
AND WG6.EMPL_RCD          = PYE.EMPL_RCD
AND WG6.EMPLID            = EMPNAME.EMPLID
AND EMPNAME.EFFDT         = (SELECT MAX(B_ED.EFFDT)
                             FROM PS_NAMES B_ED
                             WHERE EMPNAME.EMPLID  = B_ED.EMPLID
                             AND EMPNAME.NAME_TYPE = B_ED.NAME_TYPE
                             AND B_ED.EFFDT       <= $EndDt)
[$EmplFilter650]
AND WD6.SEFIP_CATEGORY_BRA <> '22'
AND ADM_DT.EMPLID         = JOB6.EMPLID
AND ADM_DT.EMPL_RCD       = JOB6.EMPL_RCD
AND ADM_DT.EFFDT          = (SELECT MAX(ADM_DT1.EFFDT)
                             FROM PS_JOB ADM_DT1
                             WHERE ADM_DT1.EMPLID = ADM_DT.EMPLID
                               AND ADM_DT1.EMPL_RCD = ADM_DT.EMPL_RCD
                               AND ((EXISTS (SELECT 'X'
                                             FROM PS_LEG_MOV_DET_BRA SFP
                                                , PS_GPBR_JOB_SFP_VW ADM_DT2
                                             WHERE SFP.PROCESS_TYPE_BRA = '10'
                                               AND SFP.EFFDT = (SELECT MAX(SFP1.EFFDT)
                                                                FROM PS_LEG_MOV_DET_BRA SFP1
                                                                WHERE SFP1.PROCESS_TYPE_BRA = SFP.PROCESS_TYPE_BRA
                                                                  AND SFP1.EFFDT <= $EndDt
                                                                  AND SFP1.ACTION = SFP.ACTION
                                                                  AND SFP1.ACTION_REASON = SFP.ACTION_REASON)
                                               AND SFP.ACTION = ADM_DT1.ACTION
                                               AND SFP.ACTION_REASON = ADM_DT1.ACTION_REASON
                                               AND SFP.SEFIP_LEG_MOV_BRA = 'N3'
                                               AND ADM_DT2.EMPLID = ADM_DT1.EMPLID
                                               AND ADM_DT2.EMPL_RCD = ADM_DT1.EMPL_RCD
                                               AND ADM_DT2.ACTION = SFP.ACTION
                                               AND ADM_DT2.ACTION = ADM_DT1.ACTION))
                                     OR ADM_DT1.ACTION = 'HIR'))
End-SQL


    #Debug Show 'Manual: Commit-Transaction after Create Employee Work Table'
    Do Commit-Transaction

    #ifdef ORACLE
        BEGIN-SQL
            ANALYZE TABLE PS_GPBR_SEFIP_WRK COMPUTE STATISTICS
        END-SQL
    #endif

End-if


End-Procedure FillEmployeeGuide


!*****************************
Begin-Procedure Process-Report
#debug show 'Begin-Procedure Process-Report **'
!*****************************

Let $WriteReg00 = 'False'
Let $WriteReg10 = 'False'
Let $WriteReg12 = 'False'
Let $WriteReg13 = 'False'
Let $WriteReg14 = 'False'
Let $WriteReg20 = 'False'
Let $WriteReg21 = 'False'
Let $WriteReg30 = 'False'
Let $WriteReg32 = 'False'
Let $WriteReg90 = 'False'

Evaluate $RC_Gather_Cd
    When = '660'
        Let $filename = '{FILEPREFIX}' || 'S' || $mm  || '-' || $660_process_id || '.TXT' || '{FILESUFFIX}'
    Break
    When = '650'
        Let $filename = '{FILEPREFIX}' || $RC_UnionCode || '_' || 'SEFIP.TXT' || '{FILESUFFIX}'
    Break
    When-other
        Let $FileName = '{FILEPREFIX}' || 'SEFIP.TXT' || '{FILESUFFIX}'
End-Evaluate

#debug show '    Filename: ' $FileName

open $FileName as 1 for-writing record=360:fixed status=#filestat

If #filestat ! Is equal to zero
   #debug show '    Error opening output file. Program ending'
   show '    Erro da abertura da lima de saída. Terminando O Programa.'
   stop quiet
Else



   !*** Process company data , create and write registry 00 ***
   Let $Estabid_Code = $RC_Estabid
   do Get-Company-Key
   do Get-Company-Data
   Let $CompanyName1 = $CompanyName
   do Get-Company-Add-Data
   Let $CurrentEstabId = $RC_Estabid
   do Get-Cia-Estab-Data
   do Get-Estab-Data
   do Write-Reg00


   !Establishments Loop
   Let #c = 1
   While #c <= #TotalEstab
    get $RC_Estabid from Estabs(#c)
    #debug show '    ****************************** '  $RC_Estabid '****************************** '
    do Get-Cia-Estab-Data
    do Get-Company-Key
    do Get-Company-Data
    Let $CompanyName1 = $CompanyName

    Let $CurrentEstabId = $RC_Estabid
    do Get-Estab-Data

       !*** Process Selected establishment (which may be the centralizer) ***
       Let $CurrentEstabId   = $RC_Estabid
       Let $CompanyInscrType = $Estabid_Comp_Ins1

       Evaluate $CompanyInscrType
       When = '1'
          Let $Estabid_CNPJ_CEI = $EstabId_CNPJ
          Let $EstabIdType = 'CNPJ'
       Break
       When = '2'
          Let $Estabid_CNPJ_CEI = $EstabId_CEI
          Let $EstabIdType = 'CEI'
       Break
       When-Other
          #debug show 'Company inscription type is not defined.'
          show 'O tipo do inscription da companhia não é definido.'
          stop quiet
       End-Evaluate

!*************************************************************************** Report Only Establishment with Employees

        Evaluate $RC_Gather_Cd
            When = '660'
                FIND $RC_Estabid IN $EstabsFor660 0 #findIn
                #debug Show $RC_Estabid ' find in ' #findIn
                If #findIn >= 0
                    Do Process-Establishment
                End-if
                Break
            When = '650'
                #debug show '   $BgnDt          :' $BgnDt
                #debug show '   $EndDt          :' $EndDt
                #debug show '   $RC_UnionCode   :' $RC_UnionCode
                #debug show '   $CurrentEstabId :' $CurrentEstabId

                Let $Process-Estab-Union = 'N'

                Do Check-Estab-Union

                If $Process-Estab-Union = 'Y'
                    Do Process-Establishment
                End-If
                Break
            When-Other
                Do Process-Establishment
                Break
        End-Evaluate
       Let #c = #c +1
       Do Delete-Temp-Tables
   End-while

   Do Write-Reg90

    Close 1

    #ifdef UNIX
        Do ConvertUnixToDOSWin($FileName)
    #endif

    #debugx Do SendToPrinter

    #debug show '$WriteReg00: ' $WriteReg00
    #debug show '$WriteReg10: ' $WriteReg10
    #debug show '$WriteReg12: ' $WriteReg12
    #debug show '$WriteReg13: ' $WriteReg13
    #debug show '$WriteReg14: ' $WriteReg14
    #debug show '$WriteReg20: ' $WriteReg20
    #debug show '$WriteReg21: ' $WriteReg21
    #debug show '$WriteReg30: ' $WriteReg30
    #debug show '$WriteReg32: ' $WriteReg32
    #debug show '$WriteReg90: ' $WriteReg90

    If $WriteReg13 = 'False'
        And $WriteReg14 = 'False'
        And $WriteReg20 = 'False'
        And $WriteReg21 = 'False'
        And $WriteReg30 = 'False'
        And $WriteReg32 = 'False'

        let #fdelStatus = delete($FileName)

    End-if
End-If

End-Procedure Process-Report

!*****************************
Begin-Procedure SendToPrinter
#debug show 'Begin-Procedure SendToPrinter **'
    open $FileName as 1 for-reading record=360:fixed
    Print $ReportVersion (+1,1)
    Print 'FileName:'    (+1,1)
    Print $FileName      (  ,10)


    While 1
        Read 1 into $FileRow:360
        if #end-file
            break   !End of file reached.
        end-if
        Print $FileRow (+1,1)
    End-while

    close 1
End-Procedure SendToPrinter

!*****************************
Begin-Procedure Get-Cia-Estab-Data
#debug show 'Begin-Procedure Get-Cia-Estab-Data **'
#debug show '    $RC_Estabid ' $RC_Estabid
#debug show '    $EndDt      ' $EndDt
!*****************************
Begin-Select
B.ESTABID
B.COMP_INS_TYPE_BRA
B.SEFIP_REP_TYPE_BRA
B.SEFIP_RESP_ID_BRA
B.SEFIP_RESPN_ID_BRA
B.WORK_RISK_PCT_BRA
B.FPAS_CD_BRA
B.THIRD_PARTY_CD_BRA
B.GPS_PAY_CD_BRA
B.ISE_FIL_PCT_BRA
B.LEGAL_ENT_TYPE_BRA

  Let $Name_CiaEst            = &B.LEGAL_ENT_TYPE_BRA
  Let $Estabid_Comp_Ins       = Rtrim(&B.COMP_INS_TYPE_BRA,' ')
  Let $Estabid_Comp_Ins1      = Substr($Estabid_Comp_Ins, 1,1)
  Let $Estabid_SEFIP_Rep_Type = Rtrim(&B.SEFIP_REP_TYPE_BRA,' ')
  Let $Estabid_SEFIP_Rep_ID   = Rtrim(&B.SEFIP_RESP_ID_BRA,' ')
  Let $Estabid_SEFIP_Respn_ID = Rtrim(&B.SEFIP_RESPN_ID_BRA,' ')
  Let $Third_Party_CD_Bra     = Edit(&B.THIRD_PARTY_CD_BRA, '0999')
  Let $FPAS_CD_Bra            = To_Char(&B.FPAS_CD_BRA)
  Let #Work_Risk_Pct_Bra      = Abs(&B.WORK_RISK_PCT_BRA)
  Let #GPS_Pay_CD_Bra         = &B.GPS_PAY_CD_BRA

  do Get-Resp-Data

  If #Work_Risk_Pct_Bra > 0 and #Work_Risk_Pct_Bra <= 9.9
     Let #Work_Risk_Pct_Bra = #Work_Risk_Pct_Bra * 10
     move #Work_Risk_Pct_Bra to $Work_Risk_Pct_Bra '00'
     !Let $Work_Risk_Pct_Bra   = Substr($Work_Risk_Pct_Bra,1,1)
     !Let $Work_Risk_Pct_Bra   = $Work_Risk_Pct_Bra || '0'
  Else
     move #Work_Risk_Pct_Bra to $Work_Risk_Pct_Bra 00
     #debug show 'Please review your Work Risk% Parameter in Establishment Brazil: ' $RC_Estabid
     show 'Favor rever o parametro de % SAT no Estabelecimento: ' $RC_Estabid
  End-If

  Evaluate $Simples_Option
  When = '2'
  When = '3'
     Let $Work_Risk_Pct_Bra = '00'
     Let $Third_Party_CD_Bra = '    '
  End-Evaluate

  Evaluate $FPAS_CD_Bra
  When = '604'
  When = '647'
  When = '825'
  When = '868'
     Let $Work_Risk_Pct_Bra = '00'
  End-Evaluate

  Evaluate $RC_Gather_Cd
  When = '115'
  When = '150'
  When = '650'
     Let $GPS_Pay_CD_Bra     = Edit(#GPS_Pay_CD_Bra, '0000')
  When-Other
     Let $GPS_Pay_CD_Bra     = '    '
  Break
  End-Evaluate

  Evaluate $RC_Gather_Cd
  When = '145'
  When = '345'
  When = '640'
  When = '660'
     Let $Third_Party_CD_Bra = '    '
  Break
  End-Evaluate

  If $FPAS_CD_Bra = '639' and &B.ISE_FIL_PCT_BRA <> 0
     Let #Philanthropy_Pct_Bra = &B.ISE_FIL_PCT_BRA * 100
     Let $Philanthropy_Pct_Bra = Edit(#Philanthropy_Pct_Bra, '09999')
  End-If

FROM PS_ESTAB_TBL B1
, PS_ESTAB_TBL_BRA B
WHERE B1.ESTABID = $RC_Estabid
AND   B1.EFFDT =  (SELECT MAX(B1_A.EFFDT) FROM PS_ESTAB_TBL B1_A WHERE B1_A.ESTABID = B1.ESTABID AND B1_A.EFFDT  <= $EndDt)
AND   B1.EFF_STATUS = 'A'
AND   B.ESTABID = B1.ESTABID
AND   B.EFFDT   = B1.EFFDT
ORDER BY B.COMP_INS_TYPE_BRA
End-Select

Begin-Select
EIB.ESTAB_ID_TYPE_BRA
EIB.ESTAB_ID_BRA
EIB.EFFDT

  Let $EstabIdType  = Rtrim(&EIB.ESTAB_ID_TYPE_BRA,' ')
  Let $Estab_Id_BRA = Rtrim(&EIB.ESTAB_ID_BRA,' ')
  Let $Estab_Effdt  = &EIB.EFFDT

  Evaluate $EstabIdType
  When = 'CEI'
     Let $Estabid_CEI = $Estab_Id_BRA
     If Length($Estabid_CEI) <= 12
       Do FILL_LEADING ($Estabid_CEI,'0', 14, 'L',$Estabid_CEI)
     End-If
  Break
  When = 'CNPJ'
     Let $Estabid_CNPJ = $Estab_Id_BRA
  Break
  When = 'CNAE'
     Let $Estabid_CNAE = $Estab_Id_BRA
  Break
  When = 'CAIXA'
     Let $Estabid_CAIXA = $Estab_Id_BRA
  Break
  End-Evaluate

FROM PS_ESTAB_ID_BRA  EIB
WHERE EIB.ESTABID = $RC_Estabid
  AND EIB.COUNTRY = 'BRA'
  AND EIB.EFFDT = (SELECT MAX(EIB_A.EFFDT)
                     FROM PS_ESTAB_ID_BRA EIB_A
                    WHERE EIB_A.ESTABID          = EIB.ESTABID
                      AND EIB_A.COUNTY_CD_BRA    = EIB.COUNTY_CD_BRA
                      AND EIB_A.COUNTRY          = EIB.COUNTRY
                      AND EIB_A.ESTAB_ID_TYPE_BRA= EIB.ESTAB_ID_TYPE_BRA
                      AND EIB_A.EFFDT           <= $EndDt)
End-Select
!Do Check-CNAE-Change

End-Procedure Get-Cia-Estab-Data

Begin-Procedure Process-Main-13
#debug show '      Begin-Procedure Process-Main-13 **************************************************'
Do PrintTime('Start Process-Main-13')
#debug show '         $CurrentEstabId  ' $CurrentEstabId
#debug show '         $EndDt           ' $EndDt
#debug show '         $RC_Comp_Month   ' $RC_Comp_Month
#debug show '         $RC_Gather_Cd    ' $RC_Gather_Cd
#debug show '         $EmplFilter      ' $EmplFilter
!*****************************
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'JOB')
Let $EmplFilter2       = Replace($EmplFilter, 'JOB', 'JOB00')

If $RC_Comp_Month <> '13'
        And ($RC_Gather_Cd = '115' or $RC_Gather_Cd = '650' or $RC_Gather_Cd = '660')


!******* Read Guide and create record 13 rows

Begin-Select
NID_PIS_BRA
HIRE_DT
REHIRE_DT
SEFIP_CATEGORY_BRA
CBO_CD_BRA
EMPLID
EMPL_RCD
EFFDT
ACTION

  Let $Emplid    = &EMPLID
  Let $Job_Effdt = &EFFDT
  Let #EmplRcd   = &EMPL_RCD
  Let $SEFIP_Cat = &SEFIP_CATEGORY_BRA
  Let $EmplHireDt = &HIRE_DT
  #debug show '         $EmplHireDt     ' $EmplHireDt

  Let $CBO_CD     = Rtrim(&CBO_CD_BRA,' ')
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = '0' || Substr($CBO_CD_End,1,4)
  Let $CBO_CD_ORIG = $CBO_CD

  do Get-Empl-Data
  do Get-Payee-Parameters
  do Get-National-IDs
  Let $LastDate = $Job_Effdt
  Let $LastAction = &ACTION
  do Get-Admission-Date

  Do Check-Empl-Rec-Chg


FROM PS_GPBR_SEFIP_EMPG
WHERE PROCESS_INSTANCE = #prcs_process_instance
AND ESTABID = $CurrentEstabId
ORDER BY NID_PIS_BRA, HIRE_DT, REHIRE_DT, SEFIP_CATEGORY_BRA, EMPLID, EMPL_RCD, EFFDT, EFFSEQ
End-Select


End-If


If $AuditRecExists = 'N'

  #debug show '         Audit record: AUDIT_PERSN_BRA is required to report changes on employee ID'
         show '         Registro de auditoría: AUDIT_PERSN_BRA está obligada a informar de los cambios en la Matrícula na Empresa'

End-If
Do PrintTime('End Process-Main-13')
End-Procedure Process-Main-13

!*****************************
Begin-Procedure Process-Main-13_old
#debug show '      Begin-Procedure Process-Main-13_old **************************************************'
#debug show '         $CurrentEstabId ' $CurrentEstabId
#debug show '         $EndDt          ' $EndDt
#debug show '         $EmplFilter     ' $EmplFilter
!*****************************
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'JOB')

!*** Process employees with PIS ***
Begin-Select
PNI.NATIONAL_ID
EMNT.HIRE_DT
EMNT.REHIRE_DT
JBJR.SEFIP_CATEGORY_BRA
JBJR.CBO_CD_BRA
JOB.EMPLID
JOB.EMPL_RCD
JOB.EFFDT
JOB.ACTION

  Let $Emplid    = &JOB.EMPLID
  Let $Job_Effdt = &JOB.EFFDT
  Let #EmplRcd   = &JOB.EMPL_RCD
  Let $SEFIP_Cat = &JBJR.SEFIP_CATEGORY_BRA
  Let $EmplHireDt = &EMNT.HIRE_DT
  #debug show '         $EmplHireDt     ' $EmplHireDt

  Let $CBO_CD     = Rtrim(&JBJR.CBO_CD_BRA,' ')
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = '0' || Substr($CBO_CD_End,1,4)
  Let $CBO_CD_ORIG = $CBO_CD

  do Get-Empl-Data
  do Get-Payee-Parameters
  do Get-National-IDs
  Let $LastDate = $Job_Effdt
  Let $LastAction = &JOB.ACTION
  do Get-Admission-Date

  Do Check-Empl-Rec-Chg

FROM PS_JOB        JOB
    ,PS_JOB_JR     JBJR
    ,PS_PERS_NID   PNI
    ,PS_EMPLOYMENT EMNT
WHERE JOB.EMPLID   = JBJR.EMPLID
  AND JOB.EMPL_RCD = JBJR.EMPL_RCD
  AND JOB.EFFDT    = JBJR.EFFDT
  AND JOB.EFFSEQ   = JBJR.EFFSEQ
  AND JOB.ESTABID  = $CurrentEstabId
[$EmplFilterLocal]
  AND JOB.EMPL_RCD = (SELECT MAX(JOB_C.EMPL_RCD) FROM PS_JOB JOB_C WHERE JOB_C.EMPLID = JOB.EMPLID)
  AND JOB.EFFDT    = (SELECT MAX (JOB_A.EFFDT)
                        FROM PS_JOB JOB_A
                       WHERE JOB_A.EMPLID      = JOB.EMPLID
                         AND JOB_A.EMPL_RCD    = JOB.EMPL_RCD
                         AND JOB_A.EFFDT      <= $EndDt
                         !AND JOB_A.ESTABID     = JOB.ESTABID
                         AND JOB_A.EMPL_STATUS = 'A')
  AND JOB.EFFSEQ   = (SELECT MAX(JOB_B.EFFSEQ)
                        FROM PS_JOB JOB_B
                       WHERE JOB_B.EMPLID      = JOB.EMPLID
                         AND JOB_B.EMPL_RCD    = JOB.EMPL_RCD
                         AND JOB_B.EMPL_STATUS = 'A'
                         AND JOB_B.EFFDT       = JOB.EFFDT
                         AND JOB_B.ESTABID = JOB.ESTABID)
  AND JOB.EMPLID           = PNI.EMPLID
  AND PNI.COUNTRY          = 'BRA'
  AND PNI.NATIONAL_ID_TYPE = 'PIS'
  AND EMNT.EMPLID          = JOB.EMPLID
  AND EMNT.EMPL_RCD        = JOB.EMPL_RCD
  AND JBJR.SEFIP_CATEGORY_BRA NOT IN ('11','12','13','14','15','17','18','19','20','21','22','23','24','25','26')
  AND [$RC_Comp_Month]        NOT IN ('13')
  AND [$RC_Gather_Cd]         NOT IN ('130','135','150','155','317','337','608')
ORDER BY PNI.NATIONAL_ID, EMNT.HIRE_DT, EMNT.REHIRE_DT, JBJR.SEFIP_CATEGORY_BRA
End-Select

If $AuditRecExists = 'N'

  #debug show '         Audit record: AUDIT_PERSN_BRA is required to report changes on employee ID'
         show '         Registro de auditoría: AUDIT_PERSN_BRA está obligada a informar de los cambios en la Matrícula na Empresa'

End-If

!*** Process employees without PIS ***
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'JOB01')

Begin-Select
EMN01.HIRE_DT
EMN01.REHIRE_DT
JOB01.EMPLID
JOB01.EFFDT
JOB01.COMPANY
JOB01.PAYGROUP
JOB01.GP_PAYGROUP
JJR01.CBO_CD_BRA
JJR01.SEFIP_CATEGORY_BRA
JOB01.EMPL_RCD
JOB01.ACTION

  Let $Emplid      = &JOB01.EMPLID
  Let $JOB01_Effdt = &JOB01.EFFDT
  Let #EmplRcd     = &JOB01.EMPL_RCD
  Let $SEFIP_Cat   = &JJR01.SEFIP_CATEGORY_BRA
  Let $EmplHireDt  = &EMN01.HIRE_DT
  #debug show '         $EmplHireDt     ' $EmplHireDt

  Let $CBO_CD      = Rtrim(&JJR01.CBO_CD_BRA,' ')
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)
  Let $CBO_CD_ORIG = $CBO_CD

  do Get-Empl-Data
  do Get-Payee-Parameters
  do Get-National-IDs
  Let $LastDate = $JOB01_Effdt
  Let $LastAction = &JOB01.ACTION
  do Get-Admission-Date
  do Check-Empl-Rec-Chg

FROM PS_JOB         JOB01
    ,PS_JOB_JR      JJR01
    ,PS_EMPLOYMENT  EMN01
WHERE JOB01.EMPLID   = JJR01.EMPLID
  AND JOB01.EMPL_RCD = JJR01.EMPL_RCD
  AND JOB01.EFFDT    = JJR01.EFFDT
  AND JOB01.EFFSEQ   = JJR01.EFFSEQ
  AND JOB01.ESTABID  = $CurrentEstabId
[$EmplFilterLocal]
  AND JOB01.EMPL_RCD = (SELECT MAX (JOB01_C.EMPL_RCD)
                          FROM PS_JOB JOB01_C
                         WHERE JOB01_C.EMPLID = JOB01.EMPLID)
  AND JOB01.EFFDT    = (SELECT MAX(JOB01_A.EFFDT)
                          FROM PS_JOB JOB01_A
                         WHERE JOB01_A.EMPLID      = JOB01.EMPLID
                           AND JOB01_A.EMPL_RCD    = JOB01.EMPL_RCD
                           AND JOB01_A.EMPL_STATUS = 'A')
  AND JOB01.EFFSEQ   = (SELECT MAX(JOB01_B.EFFSEQ)
                          FROM PS_JOB JOB01_B
                         WHERE JOB01_B.EMPLID      = JOB01.EMPLID
                           AND JOB01_B.EMPL_RCD    = JOB01.EMPL_RCD
                           AND JOB01_B.EMPL_STATUS = 'A'
                           AND JOB01_B.EFFDT       = JOB01.EFFDT
                           AND JOB01_B.ESTABID = JOB01.ESTABID)
  AND EMN01.EMPLID  = JOB01.EMPLID
  AND EMN01.EMPL_RCD= JOB01.EMPL_RCD
  AND JOB01.EMPLID NOT IN (SELECT PNID01.EMPLID
                             FROM PS_PERS_NID PNID01
                            WHERE PNID01.EMPLID    = JOB01.EMPLID
                              AND PNID01.COUNTRY   = 'BRA'
                              AND PNID01.NATIONAL_ID_TYPE = 'PIS')
  AND JJR01.SEFIP_CATEGORY_BRA NOT IN ('11','12','13','14','15','17','18','19','20','21','22','23','24','25','26')
  AND [$RC_Comp_Month]         NOT IN ('13')
  AND [$RC_Gather_Cd]          NOT IN ('130','135','150','155','317','337','608')
ORDER BY EMN01.HIRE_DT, EMN01.REHIRE_DT, JJR01.SEFIP_CATEGORY_BRA
End-Select
End-Procedure Process-Main-13

!*****************************
Begin-Procedure Get-Empl-Data
#debug show '      Begin-Procedure Get-Empl-Data **'
#debug show '         $Emplid: ' $Emplid
#debug show '         $EndDt:  ' $EndDt
!*****************************
Let $Emplid_Name   = ''
Let $Name_Effdt    = ''
Begin-Select
JN.NAME
JN.FIRST_NAME
JN.MIDDLE_NAME
JN.LAST_NAME
JN.EFFDT

  Let $Emplid_First  = Rtrim(&JN.FIRST_NAME,' ')
  Let $Emplid_First  = Ltrim($Emplid_First,' ')
  Let $Emplid_Middle = Rtrim(&JN.MIDDLE_NAME,' ')
  Let $Emplid_Last   = Rtrim(&JN.LAST_NAME,' ')
  If $Emplid_Middle <> ''
    Let $Emplid_Name   = $Emplid_First || ' ' || $Emplid_Middle || ' ' || $Emplid_Last
  Else
    Let $Emplid_Name   = $Emplid_First || ' ' || $Emplid_Last
  End-If
  Let $Name_Effdt    = &JN.EFFDT

  #debug show '         $Emplid_Name:  ' $Emplid_Name

FROM PS_NAMES JN
WHERE JN.EMPLID  = $Emplid
AND JN.NAME_TYPE = 'PRI'
AND JN.EFFDT     = (SELECT MAX(EFFDT)
                      FROM PS_NAMES JN_A
                     WHERE JN_A.EMPLID    = JN.EMPLID
                       AND JN_A.NAME_TYPE = JN.NAME_TYPE
                       AND JN_A.EFFDT    <= $EndDt)
End-Select

Let $Serie_CTPS    = ' '
Begin-Select
I.CTPS_SERIES_BRA

   Let $Serie_CTPS  = Rtrim(&I.CTPS_SERIES_BRA, ' ')
   If Length($Serie_CTPS) > 0
     DO FILL_LEADING ( $Serie_CTPS , '0' , 5 , 'L', $Serie_CTPS)
   End-If

FROM PS_GPBR_PRS_NID_VW I
WHERE I.EMPLID = $Emplid
  AND I.COUNTRY = 'BRA'
  AND (I.NATIONAL_ID_TYPE = 'CTPS'
    OR I.NATIONAL_ID_TYPE = 'CPF')
End-Select

Let $Emplid_BirthDt   = ''
Let $Emplid_Birthdate = ''

Begin-Select
PER.BIRTHDATE

  Let $Emplid_BirthDt = Rtrim(&PER.BIRTHDATE, ' ')
  do Convert-To-DTU-Date($Emplid_BirthDt, $Emplid_BirthDt1)
  If $Emplid_BirthDt1 <> ''
     Let $Emplid_Birthdate = Substr($Emplid_BirthDt1,9,2) || Substr($Emplid_BirthDt1,6,2) || Substr($Emplid_BirthDt1,1,4)
  End-If

FROM PS_PERSON PER
WHERE PER.EMPLID = $Emplid
End-Select

Let $E_Addr_Effdt  = ''
Let $Emplid_Addr1  = ''
Let $Emplid_Num1   = ''
Let $Emplid_Addr2  = ''
Let $Emplid_Addr3  = ''
Let $Emplid_Addr4  = ''
Let $Emplid_Postal = ''
Let $Emplid_City   = ''
Let $Emplid_State  = ''
Let $Empl_Address  = ''
#debug show '         $Job_Effdt ' $Job_Effdt

Begin-Select
EMPA.ADDRESS1
EMPA.NUM1
EMPA.ADDRESS2
EMPA.ADDRESS3
EMPA.ADDRESS4
EMPA.POSTAL
EMPA.CITY
EMPA.STATE
EMPA.EFFDT

  Let $E_Addr_Effdt  = Rtrim(&EMPA.EFFDT, ' ')
  Let $Emplid_Addr1  = Rtrim(&EMPA.ADDRESS1,' ')
  Let $Emplid_Num1   = Rtrim(&EMPA.NUM1,' ')
  Let $Emplid_Addr2  = Rtrim(&EMPA.ADDRESS2,' ')
  Let $Emplid_Addr3  = Rtrim(&EMPA.ADDRESS3,' ')
  Let $Emplid_Addr4  = Rtrim(&EMPA.ADDRESS4,' ')
  Let $Emplid_Postal = Rtrim(&EMPA.POSTAL,' ')
  Let $Emplid_City   = Rtrim(&EMPA.CITY,' ')
  Let $Emplid_State  = Rtrim(&EMPA.STATE,' ')
  Let $Empl_Address  = $Emplid_Addr1 || ' ' || $Emplid_Num1 || ' ' || $Emplid_Addr2

FROM PS_ADDRESSES EMPA
WHERE EMPA.EMPLID       = $EMPLID
  AND EMPA.ADDRESS_TYPE = 'HOME'
  AND EMPA.EFFDT        = (SELECT MAX(EFFDT)
                           FROM PS_ADDRESSES
                           WHERE EMPLID       = EMPA.EMPLID
                             AND ADDRESS_TYPE = EMPA.ADDRESS_TYPE
                             AND EFFDT       <= $EndDt)
End-Select



End-Procedure Get-Empl-Data

!*****************************
Begin-Procedure Get-Payee-Parameters
#debug show '      Begin-Procedure Get-Payee-Parameters **'
#debug show '         $Emplid         ' $Emplid
#debug show '         #EmplRcd        ' #EmplRcd
#debug show '         $CurrentEstabId ' $CurrentEstabId
!*****************************
Let $FGTS_Option    = 'N'
Let $FGTS_Dt        = ''
Let $FGTS_Date_DTU  = ''

Begin-Select
AIB.GPBR_SEFIP_RIS_LVL
AIB.GPBR_FGTS_DT
AIB.GPBR_FGTS_OPTION


   Let $FGTS_Option = &AIB.GPBR_FGTS_OPTION
   Let $FGTS_Dt     = &AIB.GPBR_FGTS_DT

   Do Convert-To-DTU-Date($FGTS_Dt, $FGTS_Date_DTU)

FROM PS_JOB AIJ
    ,PS_GPBR_PAYEE_PARM AIB
WHERE AIJ.EMPLID   = $Emplid
  AND AIJ.EMPL_RCD = #EmplRcd
  AND AIJ.ESTABID  = $CurrentEstabId
  AND AIJ.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = AIJ.EMPLID AND EMPL_RCD = AIJ.EMPL_RCD AND ESTABID  = AIJ.ESTABID AND EFFDT <= $EndDt)
  AND AIJ.EFFSEQ   = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = AIJ.EMPLID AND EMPL_RCD = AIJ.EMPL_RCD AND ESTABID  = AIJ.ESTABID AND EFFDT = AIJ.EFFDT)
  AND AIB.EMPLID   = AIJ.EMPLID
  AND AIB.EMPL_RCD = AIJ.EMPL_RCD
  AND AIB.GPBR_FGTS_OPTION = 1
  AND AIB.BGN_DT   = (SELECT MAX(BGN_DT)
                        FROM PS_GPBR_PAYEE_PARM
                       WHERE EMPLID   = AIB.EMPLID
                         AND EMPL_RCD = AIB.EMPL_RCD
                         AND BGN_DT  <= AIJ.EFFDT)
End-Select


!Begin-Select
!A.CBO_CD_BRA
!
!  Let $CBO_CD     = &A.CBO_CD_BRA
!
!  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End )
!  Let $CBO_CD = $CBO_CD_End
!  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)
!
!FROM PS_JOB_JR A
!WHERE A.EMPLID = $Emplid
!AND A.EMPL_RCD = #EmplRcd
!AND A.EFFDT = (SELECT MAX(EFFDT)
!                 FROM PS_JOB_JR
!                 WHERE EMPLID = A.EMPLID
!                 AND EMPL_RCD = A.EMPL_RCD
!                 AND EFFDT <= $EmplSegEndDt)
!AND A.EFFSEQ = (SELECT MAX(EFFSEQ)
!                FROM PS_JOB_JR
!                WHERE EMPLID = A.EMPLID
!                AND EMPL_RCD = A.EMPL_RCD
!End-Select

End-Procedure Get-Payee-Parameters

!*****************************
Begin-Procedure Get-Resp-Data
#debug show '    Begin-Procedure Get-Resp-Data **'
#debug show '        $Estabid_SEFIP_Rep_ID:   ' $Estabid_SEFIP_Rep_ID
#debug show '        $Estabid_SEFIP_Respn_ID: ' $Estabid_SEFIP_Respn_ID
!*****************************
If Ltrim(Rtrim($Estabid_SEFIP_Rep_ID, ' '), ' ') = ''
   #debug show 'Please remember to capture SEFIP responsible.'
   show 'Recorde por favor capturar SEFIP responsável.'
Else
   If $Estabid_SEFIP_Rep_Type = '1' And Length(Ltrim($Estabid_SEFIP_Respn_ID, ' ')) = 0
     !Company as responsible, requires person responsible.
      #debug show ' Please remember to capture SEFIP responsible when company is responsible.'
      show 'Recorde por favor capturar SEFIP responsável quando a companhia é responsável.'
   End-If
End-If
Let $Resp_Name = ''
Begin-Select
N.FIRST_NAME
N.MIDDLE_NAME
N.LAST_NAME

  Let $Resp_First  = Rtrim(Ltrim(&N.FIRST_NAME,' '), ' ')
  Let $Resp_Middle = Rtrim(&N.MIDDLE_NAME,' ')
  Let $Resp_Last   = Rtrim(&N.LAST_NAME,' ')

  If $Resp_Middle <> ''
    Let $Resp_Name   = $Resp_First || ' ' || $Resp_Middle || ' ' || $Resp_Last
  Else
    Let $Resp_Name   = $Resp_First || ' ' || $Resp_Last
  End-If

FROM PS_PERSON_NAME N
WHERE (N.EMPLID = $Estabid_SEFIP_Rep_ID Or N.EMPLID = $Estabid_SEFIP_Respn_ID)
End-Select

Let $Rep_Estabid = ''
Begin-Select
E.ESTABID

   Let $Rep_Estabid = Rtrim(&E.ESTABID,' ')

FROM PS_JOB E
WHERE (E.EMPLID = $Estabid_SEFIP_Rep_ID Or E.EMPLID = $Estabid_SEFIP_Respn_ID)
  AND E.EFFDT       = (SELECT MAX (E_A.EFFDT)
                         FROM PS_JOB E_A
                        WHERE E_A.EMPLID      = E.EMPLID
                          AND E_A.EMPL_STATUS = 'A'
                          AND EFFDT          <= $EndDt)
  AND E.EFFSEQ      = (SELECT MAX(E_B.EFFSEQ)
                         FROM PS_JOB E_B
                        WHERE E_B.EMPLID      = E.EMPLID
                          AND E_B.EMPL_RCD    = E.EMPL_RCD
                          AND E_B.EMPL_STATUS = 'A'
                          AND E_B.EFFDT       = E.EFFDT)

End-Select

Let $EstabId = $Rep_Estabid
do Get-Estab-Address

Let $Company_Addr1  = $Est_GEA_Addr1
Let $Company_Num1   = $Est_GEA_Num1
Let $Company_Addr2  = $Est_GEA_Addr2
Let $Company_Addr4  = $Est_GEA_Addr4
Let $Company_Postal = $Est_GEA_Postal
Let $Company_City   = $Est_GEA_City
Let $Company_State  = $Est_GEA_State
Let $Company        = $Est_GEA_Company

Let $Resp_Email = ''
Begin-Select
EM.EMAIL_ADDR

  Let $Resp_Email = Rtrim(&EM.EMAIL_ADDR,' ')

FROM PS_EMAIL_ADDRESSES EM
WHERE (EM.EMPLID = $Estabid_SEFIP_Rep_ID Or EM.EMPLID = $Estabid_SEFIP_Respn_ID)
  AND EM.E_ADDR_TYPE = 'BUSN'
End-Select

Let $phone = '00000000'
Let $Ext   = '00000'
Let $Ext   = '00000'
Let $DDD   = '    '
Let $Rep_Phone = ''
Begin-Select
RP.PHONE

  Let $FullPhone = Ltrim(Rtrim(&RP.PHONE,' '), ' ')

  Do GetPhoneBRA ($FullPhone, $PhoneDDI, $PhoneDDD, $Phone, $PhoneRamal)

!  Let $Rep_Phone = Edit($PhoneDDD, '0999') || Edit($Phone,'09999999')
  Let $Rep_Phone = $PhoneDDD || $Phone

FROM PS_PERSONAL_PHONE RP
WHERE (RP.EMPLID = $Estabid_SEFIP_Rep_ID Or RP.EMPLID = $Estabid_SEFIP_Respn_ID)
  AND RP.PHONE_TYPE = 'BUSN'
End-Select
End-Procedure Get-Resp-Data

!*****************************
Begin-Procedure Write-Reg00
#debug show '  Begin-Procedure Write-Reg00 **************************************************'
#debug show '      $Name_CiaEst   : ' $Name_CiaEst
#debug show '      $CompanyName1  : ' $CompanyName1
#debug show '      $Estabid_Descr1: ' $Estabid_Descr1
#debug show '      $Company       : ' $Company
#debug show '      $Company_Phone : ' $Company_Phone
!*****************************

  move '00' to $Reg00
  move ' '  to $Blank

  Evaluate $Estabid_Comp_Ins1
  When = '1'
     Let $Inscr_Reg00 = $Estabid_CNPJ
  Break
  When = '2'
     Let $Inscr_Reg00 = $Estabid_CEI
  Break
  When-Other
     #debug show 'Invalid Responsible Inscription'
     show 'Inscrição do Responsável não válido'
     stop quiet
  End-Evaluate

  If $Name_CiaEst  = 'COM'
    Let $String_In = $CompanyName1
  Else
    Let $String_In = $Estabid_Descr1
  End-If

  do Check-Strings ( $String_In , $CompanyName)

  do Check-Strings ( $Resp_Name , $Resp_Name)

  do Check-Strings ( $Address_Estab , $Address_Estab)

  do Check-Strings ( $Estabid_Addr4 ,  $Estabid_Addr4)

  do Check-Strings ( $Estabid_City , $Estabid_City)

  do Check-Strings ( $Estabid_State , $Estabid_State)

  Do Str-Delete-Chars( $Estabid_Postal , '-' , $PostalEnd )
  Let #Postal         = To_Number(Substr($PostalEnd,1,8))
  Let $Estabid_Postal = Edit(#Postal, '00000000')


  Let $Competence = $RC_Comp_Year || $RC_Comp_Month

  If $RC_FGTS_Gather_Cd = '0'
     Let $RC_FGTS_Gather_Cd = ' '
  End-If

  Let $RC_FGTS_Dt_DMA = ' '
  If $RC_FGTS_Gather_Cd <> '1'
    If Length($RC_FGTS_Dt) > 0
      do Convert-To-DTU-Date($RC_FGTS_Dt, $RC_FGTS_Dt1)
      Let $RC_FGTS_Dt_DMA    = Substr($RC_FGTS_Dt1,9,2) || Substr($RC_FGTS_Dt1,6,2) || Substr($RC_FGTS_Dt1,1,4)
    End-If
  End-If

  Let $RC_GPS_Dt_DMA = ' '
  If $RC_GPS_Gather_Cd <> '1'
    If Length($RC_GPS_Dt) > 0
      do Convert-To-DTU-Date($RC_GPS_Dt, $RC_GPS_Dt1)
      Let $RC_GPS_Dt_DMA     = Substr($RC_GPS_Dt1,9,2) || Substr($RC_GPS_Dt1,6,2) || Substr($RC_GPS_Dt1,1,4)
    End-If
  End-If

  If $RC_Comp_Month = '13'
    Let $RC_FGTS_Gather_Cd = ' '
  End-If

  Let $ShippingType       = '1'
  Let $GatheringIndex     = ' '
  Let $Sw_Dvlpr_InscrType = '1'
  Let $Sw_Dvlpr_CNPJ      = '59456277000176'
  If $RC_FileMode = '0'
     Let $FileMode = ' '
  Else
     Let $FileMode = $RC_FileMode
  End-If



  !**** 660 specific values

  If $RC_Gather_Cd = '660'

    Let $Competence = $Competency660

    !Let $RC_FGTS_Gather_Cd = '3'
    !Let $RC_GPS_Gather_Cd  = '3'

  end-if

  If $Company_Phone <> ''

    Do FILL_LEADING($Company_Phone, ' ', 12, 'L', $Rep_Phone00)
  else
    Do FILL_LEADING($Rep_Phone, ' ', 12, 'L', $Rep_Phone00)


  End-if

  Let $WriteReg00 = 'True'

  Write 1 From $Reg00:2              -
               $Blank:51             -
               $ShippingType:1       -
               $Estabid_Comp_Ins1:1  -
               $Inscr_Reg00:14       -
               $CompanyName:30       -
               $Resp_Name:20         -
               $Address_Estab:50     -
               $Estabid_Addr4:20     -
               $Estabid_Postal:8     -
               $Estabid_City:20      -
               $Estabid_State:2      -
               $Rep_Phone00:12         -
               $Resp_Email:60        -
               $Competence:6         -
               $RC_Gather_Cd:3       -
               $RC_FGTS_Gather_Cd:1  -
               $FileMode:1           -
               $RC_FGTS_Dt_DMA:8     -
               $RC_GPS_Gather_Cd:1   -
               $RC_GPS_Dt_DMA:8      -
               $GatheringIndex:7     -
               $Sw_Dvlpr_InscrType:1 -
               $Sw_Dvlpr_CNPJ:14     -
               $Blank:18             -
               '*':1
End-Procedure Write-Reg00

!*****************************
Begin-Procedure Write-Reg10
#debug show '    Begin-Procedure Write-Reg10 **************************************************'
#debug show '        $Name_CiaEst   : ' $Name_CiaEst
#debug show '        $CompanyName1  : ' $CompanyName1
#debug show '        $Estabid_Descr1: ' $Estabid_Descr1
#debug show '        $Estab_Phone   : ' $Estab_Phone
!*****************************
  Let $EstabList = '''' || $CurrentEstabId || ''''
  Do Get-Reg10-Data

  Evaluate $RC_Gather_Cd
  When = '150'
  When = '155'
    Let #Maternity_sal_10 = 0
    Let #R12_13th_Mat_Sal = 0
    Let #Family_Sal_10    = 0
    If $RC_IncludeAdmin = 'Y'
      Let $IncludeCurrentEstab = 'Y'
      Do Get-Related-Establishments
      Do Get-Maternity-Salary
    End-If
  End-Evaluate

  move '10' to $Reg10
  move ' '  to $Blank
  move '0'  to $Zero
  Let $Zeroes = rpad($Zero,50,'0')
  Let $Inscr_Reg10 = $Estabid_CNPJ_CEI

  If $Estab_Phone <> ''
    Let $Reg10_Phone = $Estab_Phone
  Else
      If $Rep_Phone <> ''
         Let $Reg10_Phone = $Rep_Phone
      Else
         Let $Reg10_Phone = $Company_Phone
      End-If
  End-if
  Do FILL_LEADING($Reg10_Phone, ' ', 12, 'L', $Reg10_Phone)

  Do Check-Address-Change
  If $Name_CiaEst  = 'COM'
    Let $String_In = $CompanyName1
  Else
    Let $String_In = $Estabid_Descr1
  End-If

  do Check-Strings ( $String_In , $Estabid_Descr)

  do Check-Strings ( $Address_Estab , $Address_Estab)

  do Check-Strings ( $Estabid_Addr4 , $Estabid_Addr4)

  do Check-Strings ( $Estabid_City , $Estabid_City)

  do Check-Strings ( $Estabid_State , $Estabid_State)

  Do Str-Delete-Chars( $Estabid_Postal , '-' , $PostalEnd)
  Let $Postal         = Substr($PostalEnd,1,8)
  Let #Postal         = To_Number($Postal)
  Let $Estabid_Postal = Edit(#Postal, '00000000')

  Let $Family_Sal_10 = Edit($Family_Sal_10, '000000000000000')
  Let $Maternity_sal_10 = Edit($Maternity_sal_10, '000000000000000')
  Let $Contrib_Desc_Emp_10 = Edit($Contrib_Desc_Emp_10, '000000000000000')
  Let $Ind_26_10 = Edit($Ind_26_10, '0')
  Let $Estabid_CNAE_P = Edit($Estabid_CNAE, '0000000')

  Evaluate $RC_Comp_Month
  When = '12'
     Evaluate $RC_Gather_Cd
     When = '145'
     When = '345'
     When = '640'
     When = '660'
        Let $Ind_26_10   = '0'
        Let $Prev_Soc_10 = '00000000000000'
     Break
     When = '115'
     When = '307'
     When = '327'
     When = '903'
     When = '905'
        Let $Prev_Soc_10 = Edit($Prev_Soc_10, '00000000000000')
     Break
     End-Evaluate
  Break
  When = '13'
     Let $Family_Sal_10  = '000000000000000'
     Let $Maternity_sal_10 = '000000000000000'
     Let $Contrib_Desc_Emp_10 = '000000000000000'
     Let $Address_change = 'N'
     Let $CNAE_Change    = 'N'
  When-Other
     Let $Ind_26_10   = '0'
     Let $Prev_Soc_10 = '00000000000000'
  End-Evaluate

  Evaluate $Simples_Option
  When = '2'
  When = '3'
  When = '6'
    Let $Work_Risk_Pct_Bra = '00'
  Break
  When-Other
    If $Work_Risk_Pct_Bra = '00'
       Let $Work_Risk_Pct_Bra = '  '
    End-If
  End-Evaluate


  Evaluate $RC_Gather_Cd
  When = '650'
     Let $Family_Sal_10    = '000000000000000'
     Let $Maternity_sal_10 = '000000000000000'
  Break
  When = '145'
  When = '660'
     Let $Family_Sal_10    = '000000000000000'
     Let $Maternity_sal_10 = '000000000000000'
     Let $Work_Risk_Pct_Bra = '  '
  Break
  When = '150'
  When = '155'
     !Maternity Salary reamins unchanged, all employees reported in rec 10.
     !Family Salary will be reported on each rec 20 and is zero in rec 10.
     !If $RC_IncludeAdmin = 'N'
       Let $Family_Sal_10    = '000000000000000'
       Let $Maternity_sal_10 = '000000000000000'
     !End-If
  Break
  End-Evaluate


  Let $CNAE_Change = 'N'


  Evaluate $DisbledCentralization

  When = 'C'
    If $RC_Gather_Cd = '660'
        If #EstabsInMonth > 1
            If #c = 1
                Let $Centr_CD = '1'
            Else
                Let $Centr_CD = '2'
            End-If
        Else
            Let $Centr_CD = '0'
        End-If
    Else
        If #c = 1
            Let $Centr_CD = '1'
        Else
            Let $Centr_CD = '2'
        End-If
    end-if
    Break
  When = 'G'
    Let $Centr_CD = '0'
    break

  When = 'N'
    Let $Centr_CD = '0'
    break
  End-Evaluate


  Let $Centr_CD = Estabs.CentrCode(#c)

!  If $DisbledCentralization = 'C'
!    If #EstabsInMonth > 1
!        If #c = 1
!            Let $Centr_CD = '1'
!        Else
!            Let $Centr_CD = '2'
!        End-If
!    Else
!        Let $Centr_CD = '0'
!    End-if
!  Else
!    Let $Centr_CD = '0'
!  End-If

#debug show '        $Centr_CD              : ' $Centr_CD
#debug show '        $DisbledCentralization : ' $DisbledCentralization
#debug show '        #c                     : ' #c
#debug show '        #EstabsInMonth         : ' #EstabsInMonth


!Evaluate CNAE Change Code $CNAE_Change

#Debug show '    CNAE Change Code:'
#Debug show '       $RC_Comp_Month : ' $RC_Comp_Month
#Debug show '       $CurrentEstabId: ' $CurrentEstabId
#Debug show '       &RC.ESTABID    : ' &RC.ESTABID
#Debug show '       $Centr: C/G/N  : ' $DisbledCentralization
#Debug show '       $Centr_CD      : ' $Centr_CD
#Debug show '       $RC_Gather_Cd  : ' $RC_Gather_Cd
#Debug show '       $CNAE_Changed  : ' $CNAE_Changed
#Debug show '       #TotalEstab    : ' #TotalEstab

If $RC_Comp_Month = '13'

    Let $CNAE_Change = 'N'

Else
    Evaluate $RC_Gather_Cd
        When = '115'
        When = '150'
        When = '155'
        When = '650'
            Evaluate $Centr_CD
                When = '1'
                    If $CNAE_Changed = 'Y'
                        Let $CNAE_Change = 'A'
                    Else
                        Let $CNAE_Change = 'P'
                    End-If
                    Break
                When = '2'
                    If $CNAE_Changed = 'Y'
                        Let $CNAE_Change = 'S'
                    Else
                        Let $CNAE_Change = 'N'
                    End-If
                    Break
                When = '0'
                    If $DisbledCentralization = 'G'
                        If #TotalEstab = 1
                            If $CNAE_Changed = 'Y'
                                Let $CNAE_Change = 'A'
                            Else
                                Let $CNAE_Change = 'P'
                            End-If
                        Else
                            If &RC.ESTABID = $CurrentEstabId
                                !Principal Establishment
                                If $CNAE_Changed = 'Y'
                                    Let $CNAE_Change = 'A'
                                Else
                                    Let $CNAE_Change = 'P'
                                End-If
                            Else
                                If $CNAE_Changed = 'Y'
                                    Let $CNAE_Change = 'S'
                                Else
                                    Let $CNAE_Change = 'N'
                                End-If
                            End-If
                        End-If
                    Else !Centralization = None
                        If $CNAE_Changed = 'Y'
                            Let $CNAE_Change = 'S'
                        Else
                            Let $CNAE_Change = 'P'
                        End-If
                    End-If
                    Break
            End-Evaluate
            Break
        When = '660'
            If $CNAE_Changed = 'Y'
                Let $CNAE_Change = 'S'
            Else
                Let $CNAE_Change = 'N'
            End-If
            Break
    End-Evaluate
End-If

#Debug show '       $CNAE_Change   : ' $CNAE_Change

  Let $WriteReg10 = 'True'

  Write 1 From $Reg10:2                 -
               $Estabid_Comp_Ins1:1     -
               $Inscr_Reg10:14          -
               $Zeroes:36               -
               $Estabid_Descr:40        -
               $Address_Estab:50        -
               $Estabid_Addr4:20        -
               $Estabid_Postal:8        -
               $Estabid_City:20         -
               $Estabid_State:2         -
               $Reg10_Phone:12          -
               $Address_change:1        -
               $Estabid_CNAE_P:7        -
               $CNAE_Change:1           -
               $Work_Risk_Pct_Bra:2     -
               $Centr_CD:1              -
               $Simples_Option:1        -
               $FPAS_CD_Bra:3           -
               $Third_Party_CD_Bra:4    -
               $GPS_Pay_CD_Bra:4        -
               $Philanthropy_Pct_Bra:5  -
               $Family_Sal_10:15        -
               $Maternity_sal_10:15     -
               $Contrib_Desc_Emp_10:15  -
               $Ind_26_10:1             -
               $Prev_Soc_10:14          -
               $Blank:3                 -
               $Blank:4                 -
               $Blank:9                 -
               $Zeroes:45               -
               $Blank:4                 -
               '*':1
End-Procedure Write-Reg10

!*****************************
Begin-Procedure Get-Union-Rev-Contract
#debug show 'Begin-Procedure Get-Union-Rev-Contract **'
#debug show '    $RC_UnionCode ' $RC_UnionCode
#debug show '    $RC_Comp_Year ' $RC_Comp_Year
#debug show '    $EndDt        ' $EndDt
!*****************************
Begin-Select
UC.GPBR_PROCESS_ID
UC.GPBR_END_YEAR
UC.BGN_DT
UC.END_DT
UC.GPBR_GATHER_ATTRIB
UC.JURISDICTION
UC.GPBR_DATE1

   Let $ProcessId    = Edit(&UC.GPBR_PROCESS_ID, '09999999999')
   Let $ProcessYear  = Edit(&UC.GPBR_END_YEAR, '0999')
   Let $PrcsBgnDt    = Ltrim(&UC.BGN_DT, ' ')
   Let $PrcsEndDt    = Ltrim(&UC.GPBR_DATE1, ' ')
   Let $GatherAttrib = &UC.GPBR_GATHER_ATTRIB
   Let $Jurisdiction = Edit(&UC.JURISDICTION, '09999')

   If Length($PrcsBgnDt) > 0
     Do Convert-To-DTU-Date($PrcsBgnDt, $ProcessBgnDt)
   End-If
   If Length($PrcsEndDt) > 0
     Do Convert-To-DTU-Date($PrcsEndDt, $ProcessEndDt)
   Else
     #debug show $RC_UnionCode ': Collective Agreement Signature date has not value, review Union Parameters BRA data.'
     show $RC_UnionCode ': Data de assinatura do Acordo Coletivo não foi informada em Parametros de Sindicato BRA.'

   End-If

FROM PS_GPBR_UNION_CONT UC
WHERE UC.UNION_CD      = $RC_UnionCode
  AND UC.GPBR_END_YEAR = $RC_Comp_Year
  AND UC.END_DT   = (SELECT MAX(END_DT)
                     FROM PS_GPBR_UNION_CONT
                     WHERE UNION_CD      = UC.UNION_CD
                       AND GPBR_END_YEAR = UC.GPBR_END_YEAR
                       AND END_DT       <= $EndDt)
End-Select
End-Procedure Get-Union-Rev-Contract

!*****************************
Begin-Procedure Write-Reg12
#debug show '    Begin-Procedure Write-Reg12 **************************************************'
!*****************************
  move '12' to $Reg12
  move ' '  to $Blank
  Let $Inscr_Reg12 = $Estabid_CNPJ_CEI
  Let $SEFIP_Sport_Spons_V = Edit($SEFIP_Sport_Spons_V, '000000000000000')
  Let $SEFIP_Rural_Prod_PH = Edit($SEFIP_Rural_Prod_PH, '000000000000000')
  Let $SEFIP_Rural_Prod_JU = Edit($SEFIP_Rural_Prod_JU, '000000000000000')
  Let $SEFIP_Correct_Comp  = Edit($SEFIP_Correct_Comp,  '000000000000000')
  Let $SEFIP_Comp_Val_INSS = Edit($SEFIP_Comp_Val_INSS, '000000000000000')
  Let $SEFIP_Comp_Val_Prev = Edit($SEFIP_Comp_Val_Prev, '000000000000000')
  Let $SEFIP_Comp_Val_Rurl = Edit($SEFIP_Comp_Val_Rurl, '000000000000000')
  Let $SEFIP_Comp_Val_R_Pr = Edit($SEFIP_Comp_Val_R_Pr, '000000000000000')
  Let $SEFIP_Comp_Val_Spon = Edit($SEFIP_Comp_Val_Spon, '000000000000000')
  Let $SEFIP_Coop_Pay_Val  = Edit($SEFIP_Coop_Pay_Val,  '000000000000000')

  If $SEFIP_Oth_Year = '0'
     Let $SEFIP_Oth_Year = '    '
  End-If
  If Substr($SEFIP_Comp_Start_Prd,1,2) = '00'
     Let $SEFIP_Comp_Start_Prd = '      '
  End-If
  If Substr($SEFIP_Comp_End_Prd,1,2) = '00'
     Let $SEFIP_Comp_End_Prd = '      '
  End-If

  Evaluate $Simples_Option
  When = '2'
  When = '3'
  When = '6'
     Let $SEFIP_Rural_Prod_JU = '000000000000000'
  Break
  End-Evaluate

  If $SEFIP_Income_Source = 'N'
     Let $SEFIP_Income_Source = ' '
  End-If

  !Field 15 validation
  Evaluate $RC_Gather_Cd
  When = '115'
  When = '150'
  When = '155'
     if $RC_Comp_Month = '13'
        Let $13TH_Maternity_Sal  = Edit(#R12_13th_Mat_Sal,    '000000000000000')
     else
        Let $13TH_Maternity_Sal  = '000000000000000'
     end-if
  Break
  When = '650'
     Let $13TH_Maternity_Sal  = '000000000000000'
     Let $SEFIP_Sport_Spons_V = '000000000000000'
     Let $SEFIP_Income_Source = ' '
     Let $SEFIP_Rural_Prod_PH = '000000000000000'
     Let $SEFIP_Rural_Prod_JU = '000000000000000'
     Let $SEFIP_Oth_Year      = $ProcessYear
     Let $SEFIP_Comp_Val_Rurl = '000000000000000'
     Let $SEFIP_Comp_Val_R_Pr = '000000000000000'
     Let $SEFIP_Comp_Val_Spon = '000000000000000'
     Let $SEFIP_Coop_Pay_Val  = '000000000000000'
  Break
  When-Other
     Let $13TH_Maternity_Sal  = '000000000000000'
     Let $SEFIP_Correct_Comp  = '000000000000000'
  Break
  End-Evaluate

  If $RC_GPS_Gather_Cd = '1'
    If $SEFIP_Correct_Comp  = '000000000000000'
       #debug show '         According to SEFIP: Compensation - Corrected value must be informed, verify SEFIP parameters values.'
       show '         De acordo com a SEFIP: Compensação - Valor Corrigido debe ser informado, verificar valores SEFIP parâmetros.'
    End-If
  Else
     Let $SEFIP_Correct_Comp  = '000000000000000'
  End-If

  !Fields 16 and 17 validation
  If $SEFIP_Correct_Comp  = '000000000000000'
    Let $SEFIP_Comp_Start_Prd= '      '
    Let $SEFIP_Comp_End_Prd  = '      '
  End-If

  Evaluate $RC_Comp_Month
  When = '13'
    Let $SEFIP_Income_Source = ' '
    Let $SEFIP_Sport_Spons_V = '000000000000000'
    Let $SEFIP_Rural_Prod_PH = '000000000000000'
    Let $SEFIP_Rural_Prod_JU = '000000000000000'
    Let $SEFIP_Oth_Year      = '    '
    Let $SEFIP_Comp_Val_INSS = '000000000000000'
    Let $SEFIP_Comp_Val_Prev = '000000000000000'
    Let $SEFIP_Comp_Val_Rurl = '000000000000000'
    Let $SEFIP_Comp_Val_R_Pr = '000000000000000'
    Let $SEFIP_Comp_Val_Spon = '000000000000000'
    Let $SEFIP_Coop_Pay_Val  = '000000000000000'
  Break
  End-Evaluate

  Evaluate $GatherAttrib
  When = '05'
  When = '07'
    Let $Jurisdiction = $GatherAttrib
  Break
  End-Evaluate

  Do Str-Delete-Chars($ProcessBgnDt , '-', $ProcessBgnDt)
  Do Str-Delete-Chars($ProcessEndDt , '-', $ProcessEndDt)

   If $RC_Gather_Cd = '660'

      Let $13TH_Maternity_Sal   = '000000000000000'
      Let $SEFIP_Sport_Spons_V  = '000000000000000'
      Let $SEFIP_Income_Source  = ' '
      Let $SEFIP_Rural_Prod_PH  = '000000000000000'
      Let $SEFIP_Rural_Prod_JU  = '000000000000000'

      If #660_process_id = 0
          Let $ProcessId        = '00000000002'
      Else
          Let $ProcessId        = $660_process_id
      End-if

      Let $SEFIP_Oth_Year       = $RC_Comp_Year
      Let $Jurisdiction         = '00002'
      Let $ProcessBgnDt         = $660ProcessBgnDt
      Let $ProcessEndDt         = $660ProcessEndDt
      Let $SEFIP_Correct_Comp   = '000000000000000'
      Let $SEFIP_Comp_Start_Prd = '      '
      Let $SEFIP_Comp_End_Prd   = '      '
      Let $SEFIP_Comp_Val_INSS  = '000000000000000'
      Let $SEFIP_Comp_Val_Prev  = '000000000000000'
      Let $SEFIP_Comp_Val_Rurl  = '000000000000000'
      Let $SEFIP_Comp_Val_R_Pr  = '000000000000000'
      Let $SEFIP_Comp_Val_Spon  = '000000000000000'
      Let $Zeroes               = '000000000000000000000000000000000000'
      Let $SEFIP_Coop_Pay_Val   = '000000000000000'
      Let $Blank                = '      '
  End-if

  Let $WriteReg12 = 'True'

  Write 1 From $Reg12:2                 -
               $Estabid_Comp_Ins1:1     -
               $Inscr_Reg12:14          -
               $Zeroes:36               -
               $13TH_Maternity_Sal:15   -
               $SEFIP_Sport_Spons_V:15  -
               $SEFIP_Income_Source:1   -
               $SEFIP_Rural_Prod_PH:15  -
               $SEFIP_Rural_Prod_JU:15  -
               $ProcessId:11            -
               $SEFIP_Oth_Year:4        -
               $Jurisdiction:5          -
               $ProcessBgnDt:6          -
               $ProcessEndDt:6          -
               $SEFIP_Correct_Comp:15   -
               $SEFIP_Comp_Start_Prd:6  -
               $SEFIP_Comp_End_Prd:6    -
               $SEFIP_Comp_Val_INSS:15  -
               $SEFIP_Comp_Val_Prev:15  -
               $SEFIP_Comp_Val_Rurl:15  -
               $SEFIP_Comp_Val_R_Pr:15  -
               $SEFIP_Comp_Val_Spon:15  -
               $Zeroes:15               -
               $Zeroes:15               -
               $Zeroes:15               -
               $SEFIP_Coop_Pay_Val:15   -
               $Zeroes:15               -
               $Zeroes:15               -
               $Zeroes:15               -
               $Blank:6                 -
               '*':1
End-Procedure Write-Reg12

!*****************************
Begin-Procedure Write-Reg13
#debug show '           Begin-Procedure Write-Reg13 **'
#debug show '             $Empl_Alter_CD : ' $Empl_Alter_CD
!*****************************

  Let #CurrentRec = #CurrentRec + 1

  move '13' to $Reg13
  move ' '  to $Blank
  move ' '  to $R13_Emplid_Name

  Let $R13_EMPLID = $EmplID

  do Check-Strings ( $Emplid_Name , $R13_Emplid_Name)
  do Check-Strings ( $R13_Emplid_Name , $R13_Emplid_Name)
  do Check-Strings ( $Empl_OldName , $Empl_OldName)

  If $Empl_Alter_CD <> '403'  AND $Empl_Alter_CD <> '405'  AND $Empl_Alter_CD <> '427' AND $Empl_Alter_CD <> '408'
     do Check-Strings ( $Empl_Alter_Val , $Empl_Alter_Val)
  End-If

  Let $Inscr_Reg13 = $Estabid_CNPJ_CEI


  Let $Admission_Dt_FmtBRA  = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)
  
  Do OnlyNumbers($Serie_CTPS, $New_Serie_CTPS, $Change)
  If $Change = 'Y'
    DO FILL_LEADING ( $New_Serie_CTPS , '0', 5, 'L', $New_Serie_CTPS)
    Show 'Empregado ' $R13_EMPLID ' CTPS Series contém letras:' $Serie_CTPS ' somente números são permitidos, novo valor:' $New_Serie_CTPS
    Let $Serie_CTPS = $New_Serie_CTPS
  End-if

 DO FILL_LEADING ( $R13_EMPLID , '0', 11, 'L', $R13_EMPLID)

 !Report Old values
 If $Empl_Alter_CD = '405'
    Let $National_PIS_PASEP = $OldPISPASEValue
 End-If

 If $Empl_Alter_CD = '404'
     Let $R13_Emplid_Name = $Empl_OldName
 End-If


 If $Empl_Alter_CD = '403'
     Let $National_CTPS = $OLD_CTPS
     Let $Serie_CTPS = $OLD_Series
 End-If

  Let $WriteReg13 = 'True'

  Write 1 From $Reg13:2                 -
               $Estabid_Comp_Ins1:1     -
               $Inscr_Reg13:14          -
               $Zeroes:36               -
               $National_PIS_PASEP:11   -
               $Admission_Dt_FmtBRA:8   -
               $SEFIP_Cat:2             -
               $R13_EMPLID:11                -
               $National_CTPS:7         -
               $Serie_CTPS:5            -
               $R13_Emplid_Name:70      -
               $Estabid_CAIXA:14        -
               $National_CAIXA:11       -
               $Empl_Alter_CD:3         -
               $Empl_Alter_Val:70       -
               $Blank:94                -
               '*':1

  Let $Empl_Alter_Val = ''
  Let $Empl_Alter_CD  = ''
End-Procedure Write-Reg13

!*****************************
Begin-Procedure Write-Reg14
#debug show 'Begin-Procedure Write-Reg14 **'
!*****************************
  move '14' to $Reg14
  move ' '  to $Blank
  Let $Inscr_Reg14 = $Estabid_CNPJ_CEI

  do Check-Strings ( $Emplid_Name, $Emplid_Name)
  do Check-Strings ( $Emplid_Name , $Emplid_Name14 )

  do Check-Strings ( $E_Chg_Address , $E_Chg_Address)

  do Check-Strings ( $E_Chg_Addr4 , $E_Chg_Addr4)

  do Check-Strings ( $E_Chg_City , $E_Chg_City)

  do Check-Strings ( $E_Chg_State , $E_Chg_State)

  Do Str-Delete-Chars( $E_Chg_Postal , '-\/. ' , $PostalEnd)
  Let $Postal         = Substr($PostalEnd,1,8)
  Let #Postal         = To_Number($Postal)
  Let $E_Chg_Postal = Edit(#Postal, '00000000')

  If Rtrim($E_Chg_Address,' ') = ''
     show $Emplid ' - Rec #14 - Favor informar Logradouro, rua, no., andar, apartamento para a empregado '
  End-If
  If Rtrim($E_Chg_Addr4,' ') = ''
     show $Emplid ' - Rec #14 - Favor informar Bairro para a empregado.'
  End-If
  If Rtrim($E_Chg_Postal,' ') = ''
      show $Emplid ' - Rec #14 - Favor informar CEP para a empregado '
  End-If
  If Rtrim($E_Chg_City,' ') = ''
     show $Emplid ' - Rec #14 - Favor informar Ciudade para a empregado '
  End-If
  If Rtrim($E_Chg_State,' ') = ''
     show $Emplid ' - Rec #14 - Favor informar Unidade da Federação para a empregado '
  End-If

  Let $Admission_Dt_FmtBRA  = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)

  Do OnlyNumbers($Serie_CTPS, $New_Serie_CTPS, $Change)
  If $Change = 'Y'
    DO FILL_LEADING ( $New_Serie_CTPS , '0', 5, 'L', $New_Serie_CTPS)
    Show 'Empregado ' $Emplid ' CTPS Series contém letras:' $Serie_CTPS ' somente números são permitidos, novo valor:' $New_Serie_CTPS
    Let $Serie_CTPS = $New_Serie_CTPS
  End-if

  Let $WriteReg14 = 'True'

  Write 1 From $Reg14:2                 -
               $Estabid_Comp_Ins1:1     -
               $Inscr_Reg14:14          -
               $Zeroes:36               -
               $National_PIS_PASEP:11   -
               $Admission_Dt_FmtBRA:8   -
               $SEFIP_Cat:2             -
               $Emplid_Name14:70        -
               $National_CTPS:7         -
               $Serie_CTPS:5            -
               $E_Chg_Address:50        -
               $E_Chg_Addr4:20          -
               $E_Chg_Postal:8          -
               $E_Chg_City:20           -
               $E_Chg_State:2           -
               $Blank:103               -
               '*':1
End-Procedure Write-Reg14

!*****************************
Begin-Procedure Prepare-Reg20
!Procedure to create service taker registry 20.
#debug show 'Begin-Procedure Prepare-Reg20 **'
#debug show '$Estabid_CNPJ_CEI  :' $Estabid_CNPJ_CEI
#debug show '$STaker_Descr      :' $STaker_Descr
!*****************************
  move '20' to $Reg20
  move ' '  to $Blank

  Let $Inscr_Reg20 = $Estabid_CNPJ_CEI

  do Check-Strings ( $STaker_Descr , $STaker_Descr)

  do Check-Strings ( $Address_STaker , $Address_STaker)

  do Check-Strings ( $STaker_Addr4 , $STaker_Addr4)

  do Check-Strings ( $STaker_City  , $STaker_City)

  do Check-Strings ( $STaker_State , $STaker_State)
  Let #R20F8Size = Length($Address_STaker)
  If #R20F8Size > 50

    Let $R20F8Size      = To_Char(#R20F8Size)
    Let $Address_STaker = Substr($Address_STaker, 1, 50)

    #debug show 'In Record 20 , Field 8 the address field lenght: ' $R20F8Size ' exceeds the maximum size limit and has been truncated to 50'
    show 'No Registro 20, Campo 8 do comprimento do campo de endereço: ' $R20F8Size ' excede o limite máximo de tamanho e foi truncado para 50'

  End-If

  Evaluate $RC_Gather_Cd
  When = '150'
     Let #Family_Sal_20  = #ST-FamilySalary
     Let $Family_Sal_20  = To_Char(#Family_Sal_20)
     Let $STAKER_FAM_SAL = Edit($Family_Sal_20, '000000000000000')
  Break
  When = '155'
     !Family Salary should be get for each estab CEI.
     Let #Family_Sal_20  = #ST-FamilySalary
     Let $Family_Sal_20  = To_Char(#Family_Sal_20)
     Let $STAKER_FAM_SAL = Edit($Family_Sal_20, '000000000000000')
  Break
  When-Other
     Let $STAKER_FAM_SAL = '000000000000000'
  End-Evaluate

  If $RC_Comp_Month = '13'
    Let $STAKER_FAM_SAL = '000000000000000'
  End-If

  Let $STAKER_CONTR_DSC = Edit($STAKER_CONTR_DSC, '000000000000000')
  Let $Neg_Pos_Val      = Edit($Neg_Pos_Val, '0')
  Let $Gps_13_Val       = Edit($Gps_13_Val, '00000000000000')
  Let $Ret_9711         = Edit($Ret_9711, '000000000000000')
  Let $Invoice_Val      = Edit($Invoice_Val, '000000000000000')

  Let $Reg20               = Nvl($Reg20, ' ')
  Let $Estabid_Comp_Ins1   = Nvl($Estabid_Comp_Ins1, ' ')
  Let $Inscr_Reg20         = Nvl($Inscr_Reg20, ' ')
  Let $STaker_Ins_Type     = Nvl($STaker_Ins_Type, ' ')
  Let $STaker_Inscr        = Nvl($STaker_Inscr, ' ')
  Let $STaker_Descr        = Nvl($STaker_Descr, ' ')
  Let $Address_STaker      = Nvl($Address_STaker, ' ')
  Let $STaker_Addr4        = Nvl($STaker_Addr4, ' ')
  Let $STaker_Postal       = Nvl($STaker_Postal, ' ')
  Let $STaker_City         = Nvl($STaker_City, ' ')
  Let $STaker_State        = Nvl($STaker_State, ' ')
  Let $STAKER_FAM_SAL      = Nvl($STAKER_FAM_SAL, ' ')
  Let $STAKER_CONTR_DSC    = Nvl($STAKER_CONTR_DSC, ' ')
  Let $Neg_Pos_Val         = Nvl($Neg_Pos_Val, ' ')
  Let $Gps_13_Val          = Nvl($Gps_13_Val, ' ')
  Let $Ret_9711            = Nvl($Ret_9711, ' ')
  Let $Invoice_Val         = Nvl($Invoice_Val, ' ')

  #debug show '$Reg20                :'  $Reg20
  #debug show '$Estabid_Comp_Ins1    :'  $Estabid_Comp_Ins1
  #debug show '$Inscr_Reg20          :'  $Inscr_Reg20
  #debug show '$STaker_Ins_Type      :'  $STaker_Ins_Type
  #debug show '$STaker_Inscr         :'  $STaker_Inscr
  #debug show '$STaker_Descr         :'  $STaker_Descr
  #debug show '$Address_STaker       :'  $Address_STaker
  #debug show '$STaker_Addr4         :'  $STaker_Addr4
  #debug show '$STaker_Postal        :'  $STaker_Postal
  #debug show '$STaker_City          :'  $STaker_City
  #debug show '$STaker_State         :'  $STaker_State
  #debug show '$GPS_Pay_CD_Bra       :'  $GPS_Pay_CD_Bra
  #debug show '$STAKER_FAM_SAL       :'  $STAKER_FAM_SAL
  #debug show '$STAKER_CONTR_DSC     :'  $STAKER_CONTR_DSC
  #debug show '$Neg_Pos_Val          :'  $Neg_Pos_Val
  #debug show '$Gps_13_Val           :'  $Gps_13_Val
  #debug show '$Ret_9711             :'  $Ret_9711
  #debug show '$Invoice_Val          :'  $Invoice_Val

  Let $StrStackerIns = $R20_GPBR_STAKER_INSCR

  Evaluate $RC_Gather_Cd
  When = '130'
  When = '135'
  When = '155'
  When = '608'
     Let $GPS_Pay_CD_Bra         = Edit(#GPS_Pay_CD_Bra, '0000')
  Break
  When-Other
     Let $GPS_Pay_CD_Bra         = '0'
  End-Evaluate


    #debug show '-------------------------------- Insert PS_GPBR_R20_SEFIP ---'
Begin-SQL
INSERT INTO PS_GPBR_R20_SEFIP
(PROCESS_INSTANCE,
REC_TYPE,
GPBR_FIELD_TYPE,
GPBR_INSCR,
GPBR_TAKE_INS_TYPE,
GPBR_STAKER_INSCR,
DESCR,
ADDRESS1,
ADDRESS4,
POSTAL,
CITY,
STATE,
GPS_PAY_CD_BRA,
GPBR_13SAL_COMPENS,
GPBR_INSURED_DSC,
GPBR_KEY_TYPE,
GPBR_PROVIDENCE,
GPBR_PROV_13,
GPBR_GPS_PROV)
VALUES
(#prcs_process_instance
,$Reg20
,$Estabid_Comp_Ins1
,$Inscr_Reg20
,$STaker_Ins_Type
,$STaker_Inscr
,$STaker_Descr
,$Address_STaker
,$STaker_Addr4
,$STaker_Postal
,$STaker_City
,$STaker_State
,$GPS_Pay_CD_Bra
,$STAKER_FAM_SAL
,$STAKER_CONTR_DSC
,$Neg_Pos_Val
,$Gps_13_Val
,$Ret_9711
,$Invoice_Val)
End-SQL
Let $STAKER_CONTR_DSC = '0'
Let $Gps_13_Val       = '0'
Let $Ret_9711         = '0'
Let $Invoice_Val      = '0'
End-Procedure Prepare-Reg20

!*****************************
Begin-Procedure Prepare-Reg21
#debug show 'Begin-Procedure Prepare-Reg21 **'
!*****************************
move '21' to $Reg21
move ' '  to $Blank
Let $Inscr_Reg21 = $Estabid_CNPJ_CEI
Let $Correct_Comp = Edit($Correct_Comp, '000000000000000')
Let $INSS_Payslip = Edit($INSS_Payslip, '000000000000000')
Let $Oth_Entities = Edit($Oth_Entities, '000000000000000')
Let #Correct_Comp = To_Number($Correct_Comp)
Let #Start_Year = To_Number($Start_Year)
Let #Start_Month = To_Number($Start_Month)
Let #End_Year = To_Number($End_Year)
Let #End_Month = To_Number($End_Month)
Let #INSS_Payslip = To_Number($INSS_Payslip)
Let #Oth_Entities = To_Number($Oth_Entities)

Let $Reg21              = Nvl($Reg21, ' ')
Let $Estabid_Comp_Ins1  = Nvl($Estabid_Comp_Ins1, ' ')
Let $Inscr_Reg21        = Nvl($Inscr_Reg21, ' ')
Let $STaker_Ins_Type    = Nvl($STaker_Ins_Type, ' ')
Let $STaker_Inscr       = Nvl($STaker_Inscr, ' ')

    #debug show '-------------------------------- Insert PS_GPBR_R21_SEFIP ---'
Begin-SQL
INSERT INTO PS_GPBR_R21_SEFIP
(PROCESS_INSTANCE,
REC_TYPE,
GPBR_FIELD_TYPE,
GPBR_INSCR,
GPBR_TAKE_INS_TYPE,
GPBR_STAKER_INSCR,
GPBR_CORRECT_COMP,
GPBR_START_YEAR,
GPBR_START_MONTH,
GPBR_END_YEAR,
GPBR_END_MONTH,
GPBR_INSS_PAYSLIP,
GPBR_OTH_ENTITIES)
VALUES
(#prcs_process_instance
,$Reg21
,$Estabid_Comp_Ins1
,$Inscr_Reg21
,$STaker_Ins_Type
,$STaker_Inscr
,#Correct_Comp
,#Start_Year
,#Start_Month
,#End_Year
,#End_Month
,#INSS_Payslip
,#Oth_Entities)
End-SQL
End-Procedure Prepare-Reg21

!*****************************
Begin-Procedure Process-Main-20s
#debug show 'Begin-Procedure Process-Main-20s **'
#debug show '$In_Staker     ' $In_Staker
#debug show '$StrStackerIns ' $StrStackerIns
!*****************************
Let $LastSTProceessed = ''
Begin-Select DISTINCT
R20.REC_TYPE                  &R20.REC_TYPE
R20.GPBR_FIELD_TYPE           &R20.GPBR_FIELD_TYPE
R20.GPBR_INSCR                &R20.GPBR_INSCR
R20.GPBR_TAKE_INS_TYPE        &R20.GPBR_TAKE_INS_TYPE
!R20.GPBR_STAKER_INSCR         &R20.GPBR_STAKER_INSCR () ON-Break PROCEDURE=Process-21-30-32 PRINT=never LEVEL=1
R20.GPBR_STAKER_INSCR         &R20.GPBR_STAKER_INSCR
R20.DESCR                     &R20.DESCR
R20.ADDRESS1                  &R20.ADDRESS1
R20.ADDRESS4                  &R20.ADDRESS4
R20.POSTAL                    &R20.POSTAL
R20.CITY                      &R20.CITY
R20.STATE                     &R20.STATE
R20.GPS_PAY_CD_BRA            &R20.GPS_PAY_CD_BRA
!R20.GPBR_13SAL_COMPENS        &R20.GPBR_13SAL_COMPENS
R20.GPBR_INSURED_DSC          &R20.GPBR_INSURED_DSC
R20.GPBR_KEY_TYPE             &R20.GPBR_KEY_TYPE
R20.GPBR_PROVIDENCE           &R20.GPBR_PROVIDENCE
R20.GPBR_PROV_13              &R20.GPBR_PROV_13
R20.GPBR_GPS_PROV             &R20.GPBR_GPS_PROV

  Let $R20_REC_TYPE           = &R20.REC_TYPE
  Let $R20_GPBR_FIELD_TYPE    = &R20.GPBR_FIELD_TYPE
  Let $R20_GPBR_INSCR         = &R20.GPBR_INSCR
  Let $R20_GPBR_TAKE_INS_TYPE = &R20.GPBR_TAKE_INS_TYPE
  Let $R20_GPBR_STAKER_INSCR  = &R20.GPBR_STAKER_INSCR
  Let $R20_DESCR              = &R20.DESCR
  Let $R20_ADDRESS1           = &R20.ADDRESS1
  Let $R20_ADDRESS4           = &R20.ADDRESS4
  Let $R20_POSTAL             = &R20.POSTAL
  Let $R20_CITY               = &R20.CITY
  Let $R20_STATE              = &R20.STATE
  Let $R20_GPS_PAY_CD_BRA     = Edit(&R20.GPS_PAY_CD_BRA, '0000')
  !Let $R20_GPBR_FAM_SAL       = &R20.GPBR_13SAL_COMPENS
  Let $R20_GPBR_KEY_TYPE      = &R20.GPBR_KEY_TYPE
  Let $R20_GPBR_CONTR_DISC_EE = Edit(0,'000000000000000')
  Let $R20_GPBR_PROVIDENCE    = &R20.GPBR_PROVIDENCE
  Let $R20_GPBR_PROVIDENCE    = Edit(0,'00000000000000')
  Let $R20_GPBR_RET9711       = &R20.GPBR_PROV_13
  Let $R20_GPBR_INVOICE_VAL   = &R20.GPBR_GPS_PROV

  Let $StrStackerIns = $R20_GPBR_STAKER_INSCR
  Do Get-Rec20-Family-Salary
  Let $R20_GPBR_FAM_SAL       = Edit(#ST-FamilySalary,'000000000000000')

  If $R20_GPS_PAY_CD_BRA = '0000'
    Let $R20_GPS_PAY_CD_BRA = '    '
  End-If

  Do Count-Employees-In-STaker

  If #NumOfEmployees > 0

     Do Write-Reg20
     Do Check-Reg21
     If $Reg21_Found = 'Y'
       Do Write-Reg21
     End-If
     Do Write-Reg30
  End-If

FROM PS_GPBR_R20_SEFIP R20
WHERE R20.PROCESS_INSTANCE = #prcs_process_instance
ORDER BY R20.REC_TYPE, R20.GPBR_FIELD_TYPE, R20.GPBR_INSCR, R20.GPBR_TAKE_INS_TYPE, R20.GPBR_STAKER_INSCR
End-Select
End-Procedure Process-Main-20s

!*****************************
Begin-Procedure Get-Rec20-Family-Salary
#debug show 'Begin-Procedure Get-Rec20-Family-Salary **'
#debug show '$StrStackerIns ' $StrStackerIns
!*****************************
Let #ST-FamilySalary = 0
Evaluate $RC_Gather_Cd
When = '150'
Begin-Select
R2S.GPBR_13SAL_COMPENS &R2S_FAMILY_SALARY

   Let #ST-FamilySalary = #ST-FamilySalary + To_Number(&R2S_FAMILY_SALARY)

FROM PS_GPBR_R20_SEFIP R2S
WHERE R2S.GPBR_STAKER_INSCR = $StrStackerIns
AND R2S.PROCESS_INSTANCE = #prcs_process_instance
End-Select
Break
When-Other
Begin-Select
R2S1.GPBR_13SAL_COMPENS &R2S1_FAMILY_SALARY

   Let #ST-FamilySalary = &R2S1_FAMILY_SALARY

FROM PS_GPBR_R20_SEFIP R2S1
WHERE R2S1.GPBR_STAKER_INSCR = $StrStackerIns
AND R2S1.PROCESS_INSTANCE = #prcs_process_instance
End-Select
End-Evaluate
End-Procedure Get-Rec20-Family-Salary

!*****************************
Begin-Procedure Count-Employees-In-STaker
#debug show 'Begin-Procedure Count-Employees-In-STaker **'
#debug show '$R20_GPBR_STAKER_INSCR ' $R20_GPBR_STAKER_INSCR
!*****************************
Begin-Select
COUNT(*) &COUNTEMPLS

   Let #NumOfEmployees  = &COUNTEMPLS
   #debug show '#NumOfEmployees:  '   #NumOfEmployees

FROM PS_GPBR_R_SEFIP
WHERE GPBR_STAKER_INSCR = $R20_GPBR_STAKER_INSCR
AND PROCESS_INSTANCE    = #prcs_process_instance
End-Select
End-Procedure Count-Employees-In-STaker

!*****************************
Begin-Procedure Write-Reg20
#debug show 'Begin-Procedure Write-Reg20 **'
!*****************************

#debug show '$R20_REC_TYPE:2           ' $R20_REC_TYPE
#debug show '$R20_GPBR_FIELD_TYPE:1    ' $R20_GPBR_FIELD_TYPE
#debug show '$R20_GPBR_INSCR:14        ' $R20_GPBR_INSCR
#debug show '$R20_GPBR_TAKE_INS_TYPE:1 ' $R20_GPBR_TAKE_INS_TYPE
#debug show '$R20_GPBR_STAKER_INSCR:14 ' $R20_GPBR_STAKER_INSCR
#debug show '$Zeroes:21                ' $Zeroes
#debug show '$R20_DESCR:40             ' $R20_DESCR
#debug show '$R20_ADDRESS1:50          ' $R20_ADDRESS1
#debug show '$R20_ADDRESS4:20          ' $R20_ADDRESS4
#debug show '$R20_POSTAL:8             ' $R20_POSTAL
#debug show '$R20_CITY:20              ' $R20_CITY
#debug show '$R20_STATE:2              ' $R20_STATE
#debug show '$R20_GPS_PAY_CD_BRA:4     ' $R20_GPS_PAY_CD_BRA
#debug show '$R20_GPBR_FAM_SAL:15      ' $R20_GPBR_FAM_SAL
#debug show '$R20_GPBR_CONTR_DISC_EE:15' $R20_GPBR_CONTR_DISC_EE
#debug show '$R20_GPBR_KEY_TYPE:1      ' $R20_GPBR_KEY_TYPE
#debug show '$R20_GPBR_PROVIDENCE:14   ' $R20_GPBR_PROVIDENCE
#debug show '$R20_GPBR_RET9711:15      ' $R20_GPBR_RET9711
#debug show '$R20_GPBR_INVOICE_VAL:15  ' $R20_GPBR_INVOICE_VAL

  Let $WriteReg20 = 'True'

  Write 1 From $R20_REC_TYPE:2            -
               $R20_GPBR_FIELD_TYPE:1     -
               $R20_GPBR_INSCR:14         -
               $R20_GPBR_TAKE_INS_TYPE:1  -
               $R20_GPBR_STAKER_INSCR:14  -
               $Zeroes:21                 -
               $R20_DESCR:40              -
               $R20_ADDRESS1:50           -
               $R20_ADDRESS4:20           -
               $R20_POSTAL:8              -
               $R20_CITY:20               -
               $R20_STATE:2               -
               $R20_GPS_PAY_CD_BRA:4      -
               $R20_GPBR_FAM_SAL:15       -
               $R20_GPBR_CONTR_DISC_EE:15 -
               $R20_GPBR_KEY_TYPE:1       -
               $R20_GPBR_PROVIDENCE:14    -
               $R20_GPBR_RET9711:15       -
               $R20_GPBR_INVOICE_VAL:15   -
               $Zeroes:45                 -
               $Blank:42                  -
               '*':1
End-Procedure Write-Reg20

!*****************************
Begin-Procedure Check-Reg21
#debug show 'Begin-Procedure Check-Reg21 **'
#debug show '$R20_GPBR_FIELD_TYPE    ' $R20_GPBR_FIELD_TYPE
#debug show '$R20_GPBR_INSCR         ' $R20_GPBR_INSCR
#debug show '$R20_GPBR_TAKE_INS_TYPE ' $R20_GPBR_TAKE_INS_TYPE
#debug show '$R20_GPBR_STAKER_INSCR  ' $R20_GPBR_STAKER_INSCR
!*****************************
move 'N' to $Reg21_Found
Begin-Select
R21.REC_TYPE
R21.GPBR_FIELD_TYPE
R21.GPBR_INSCR
R21.GPBR_TAKE_INS_TYPE
R21.GPBR_STAKER_INSCR
R21.GPBR_CORRECT_COMP
R21.GPBR_START_YEAR
R21.GPBR_START_MONTH
R21.GPBR_END_YEAR
R21.GPBR_END_MONTH
R21.GPBR_INSS_PAYSLIP
R21.GPBR_OTH_ENTITIES

  Let $R21.REC_TYPE           = &R21.REC_TYPE
  Let $R21.GPBR_FIELD_TYPE    = &R21.GPBR_FIELD_TYPE
  Let $R21.GPBR_INSCR         = &R21.GPBR_INSCR
  Let $R21.GPBR_TAKE_INS_TYPE = &R21.GPBR_TAKE_INS_TYPE
  Let $R21.GPBR_STAKER_INSCR  = &R21.GPBR_STAKER_INSCR
  move &R21.GPBR_CORRECT_COMP to $R21.GPBR_CORRECT_COMP 000000000000000
  move &R21.GPBR_START_YEAR   to $R21.GPBR_START_YEAR BBBB
  move &R21.GPBR_START_MONTH  to $R21.GPBR_START_MONTH BB
  move &R21.GPBR_END_YEAR     to $R21.GPBR_END_YEAR BBBB
  move &R21.GPBR_END_MONTH    to $R21.GPBR_END_MONTH BB
  move &R21.GPBR_INSS_PAYSLIP to $R21.GPBR_INSS_PAYSLIP 000000000000000
  move &R21.GPBR_OTH_ENTITIES to $R21.GPBR_OTH_ENTITIES 000000000000000

  If &R21.GPBR_START_YEAR > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_START_MONTH > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_END_YEAR > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_END_MONTH > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_CORRECT_COMP > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_INSS_PAYSLIP > 0
     move 'Y' to $Reg21_Found
  End-If
  If &R21.GPBR_OTH_ENTITIES > 0
     move 'Y' to $Reg21_Found
  End-If

FROM PS_GPBR_R21_SEFIP R21
WHERE R21.GPBR_FIELD_TYPE  = $R20_GPBR_FIELD_TYPE
AND R21.GPBR_INSCR         = $R20_GPBR_INSCR
AND R21.GPBR_TAKE_INS_TYPE = $R20_GPBR_TAKE_INS_TYPE
AND R21.GPBR_STAKER_INSCR  = $R20_GPBR_STAKER_INSCR
AND R21.PROCESS_INSTANCE   = #prcs_process_instance
End-Select
#debug show '$Reg21_Found ' $Reg21_Found
End-Procedure Check-Reg21

!*****************************
Begin-Procedure Write-Reg21
#debug show 'Begin-Procedure Write-Reg21 **'
!*****************************
  Let $WriteReg21 = 'True'

  Write 1 From $R21.REC_TYPE:2            -
               $R21.GPBR_FIELD_TYPE:1     -
               $R21.GPBR_INSCR:14         -
               $R21.GPBR_TAKE_INS_TYPE:1  -
               $R21.GPBR_STAKER_INSCR:14  -
               $Zeroes:21                 -
               $R21.GPBR_CORRECT_COMP:15  -
               $R21.GPBR_START_YEAR:4     -
               $R21.GPBR_START_MONTH:2    -
               $R21.GPBR_END_YEAR:4       -
               $R21.GPBR_END_MONTH:2      -
               $R21.GPBR_INSS_PAYSLIP:15  -
               $R21.GPBR_OTH_ENTITIES:15  -
               $Zeroes:15                 -
               $Zeroes:15                 -
               $Zeroes:15                 -
               $Blank:204                 -
               '*':1
End-Procedure Write-Reg21

!*****************************
Begin-Procedure Process-Main-30-SB
#debug show '    Begin-Procedure Process-Main-30-SB **************************************************'
Do PrintTime('Start Process-Main-30-SB')
#debug show '       $CurrentEstabId: ' $CurrentEstabId
#debug show '       $BgnDt         : ' $BgnDt
#debug show '       $EndDt         : ' $EndDt
!*****************************

move '30' to $Reg30
move ' '  to $Blank

!Read GPBR_SEFIP_WRK ************


Let $Prev_Emplid    = ''
Let $Prev_CNPJ      = ''
Let $Prev_PayGroup  = ''
Let $Prev_SegBgnDt  = ''
Let $Prev_SegEndDt  = ''

Begin-Select
WRK.EMPLID () ON-BREAK print=never level=1 after=Process_Empl
WRK.EMPL_RCD
WRK.COMP_INS_TYPE_BRA
WRK.GPBR_RESP_CNPJ
WRK.GPBR_TAKE_INS_TYPE
WRK.GPBR_STAKER_INSCR
WRK.NID_PIS_BRA
WRK.LAST_HIRE_DT
WRK.TERMINATION_DT
WRK.EFFDT
WRK.COMPANY
WRK.ACTION
WRK.ACTION_REASON
WRK.GPBR_SEFIP_CAT
WRK.APPLICANT_NAME
WRK.NID_CTPS_BRA
WRK.GPBR_CTPS_ID
WRK.GPBR_FGTS_DT
WRK.BIRTHDATE
WRK.CBO_CD_BRA
WRK.GPBR_INS_DESC_VAL
WRK.GPBR_13_COMPENSAT
WRK.GPBR_MULTI_VINC
WRK.GPBR_INSURED_DISC
WRK.GPBR_REM_PREV_VAL
WRK.GPBR_SOC_PROV_13_S
WRK.GPBR_GPS_SOC_PROV
WRK.GPBR_EMP_PERC_CONT
WRK.GPBR_ACTION_ABS
WRK.GP_PAYGROUP
WRK.SEG_BGN_DT
WRK.GPBR_ADDL_PYMT


    #Debug show '         WRK.EMPLID : ' &WRK.EMPLID
    Let #INS_Desc_Val           = #INS_Desc_Val + &WRK.GPBR_INS_DESC_VAL
    Let #13_Compensat           = #13_Compensat + &WRK.GPBR_13_COMPENSAT
    Let #Insured_Disc           = #Insured_Disc + &WRK.GPBR_INSURED_DISC
    Let #Rem_Prev_Val           = #Rem_Prev_Val + &WRK.GPBR_REM_PREV_VAL
    Let #Soc_Prov_13            = #Soc_Prov_13  + &WRK.GPBR_SOC_PROV_13_S
    Let #GPS_Soc_Prov           = #GPS_Soc_Prov + &WRK.GPBR_GPS_SOC_PROV
    Let #Addl_Pymt              = #Addl_Pymt    + &WRK.GPBR_ADDL_PYMT

        If #INS_Desc_Val < 0
            Let #INS_Desc_Val = 0
        End-If

        Let $R30Emplid            = &WRK.EMPLID
        Let #R30Empl_rcd          = &WRK.EMPL_RCD
        #Debug show '         $R30Emplid  :' $R30Emplid

        Let $SEFIP_Cat            = &WRK.GPBR_SEFIP_CAT
        Let $Estabid_Comp_Ins1    = Substr(&WRK.COMP_INS_TYPE_BRA,1,1)
        Let $Inscr_Reg30          = Rtrim(&WRK.GPBR_RESP_CNPJ, ' ')
        Let $STaker_Ins_Type      = &WRK.GPBR_TAKE_INS_TYPE
        Let $STaker_Inscr         = &WRK.GPBR_STAKER_INSCR
        Let $GPBR_ACTION_ABS      = &WRK.GPBR_ACTION_ABS
        Let $National_PIS_PASEP   = Rtrim(&WRK.NID_PIS_BRA, ' ')
        Let $WRK_Effdt            = Rtrim(&WRK.EFFDT, ' ')
        Let $WRK_ACTION           = Rtrim(&WRK.ACTION, ' ')
        Let $WRK_ACTION_REASON    = Rtrim(&WRK.ACTION_REASON, ' ')
        Let $WRK_COMPANY          = Rtrim(&WRK.COMPANY, ' ')

        Let $WRK_TERMINATION_DT   = Rtrim(&WRK.TERMINATION_DT, ' ')

        Do Convert-To-DTU-Date($WRK_TERMINATION_DT, $Termination_dt)
        
        if $Termination_dt < $BgnDtDTU and $Termination_dt <> ''
            Let $Additional_pymt_flag = 'Y'
            #Debug show '         $Termination_dt       :' $Termination_dt
            #Debug show '         $BgnDtDTU             :' $BgnDtDTU
        Else
            Let $Additional_pymt_flag = 'N'
            !EGL
        End-if
        
        #Debug show '         $Additional_pymt_flag :' $Additional_pymt_flag



        If $National_PIS_PASEP = ''
            Show '         '$R30Emplid ' Numero de Identificação PIS/PASEP - Informação Obrigatória. Não existe a informação para o empregado.'
        End-If


        Do Convert-To-DTU-Date(&WRK.LAST_HIRE_DT, $Admission_Dt_DTU)
        Evaluate $SEFIP_Cat
            When = '01'
            When = '03'
            When = '04'
            When = '05'
            When = '06'
            When = '07'
            When = '11'
            When = '12'
            When = '19'
            When = '20'
            When = '21'
            When = '26'
                If Rtrim(&WRK.LAST_HIRE_DT, ' ') = ''
                    Show '         '$R30Emplid ' Data Admissão - Informação Obrigatória. Não existe a informação para o empregado.'
                Else

                    Do DTU-Parse-Date($Admission_Dt_DTU, #Year, #Month, #Day)
                    Move #Year  To $YYYY '0000'
                    Move #Month To $MM   '00'
                    Move #Day   To $DD   '00'
                    Let $Admission_Dt_FmtBRA = $DD || $MM || $YYYY
                End-if
                Break
            When-Other
                Let $Admission_Dt_FmtBRA = ''
        End-Evaluate

        Let $Emplid_Name          = &WRK.APPLICANT_NAME
        Do Check-Strings ( $Emplid_Name , $Emplid_Name)


        Evaluate $SEFIP_Cat
            When = '06'
            When = '13'
            When = '14'
            When = '15'
            When = '16'
            When = '17'
            When = '18'
            When = '22'
            When = '23'
            When = '24'
            When = '25'
                Let $Emplid_Imp = ' '
            Break
            When-Other
                Let $Emplid_Imp = &WRK.EMPLID
                DO FILL_LEADING ( $Emplid_Imp , '0', 11, 'L', $Emplid_Imp)
        End-Evaluate


        Let $National_CTPS        = Rtrim(&WRK.NID_CTPS_BRA,' ')
        Let $National_CTPS = Edit($National_CTPS, '0000000')
        Let $Serie_CTPS           = Rtrim(&WRK.GPBR_CTPS_ID, ' ')
        Let $Serie_CTPS = Edit($Serie_CTPS, '00000')
        Evaluate $SEFIP_Cat
            When = '01'
            When = '03'
            When = '04'
            When = '06'
            When = '07'
            When = '26'
                If $National_CTPS = '0000000' or $Serie_CTPS = '00000'
                    Show '         '$R30Emplid ' Número CTPS / Série CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
                End-If
            Break
            When = '02'
                If $National_CTPS = '0000000'
                    Let $National_CTPS = ''
                End-If
                If $Serie_CTPS  = '00000'
                    Let $Serie_CTPS = ''
                End-if
            Break
            When-Other
                Let $National_CTPS = ''
                Let $Serie_CTPS = ''
        End-Evaluate

        Do Convert-To-DTU-Date(&WRK.GPBR_FGTS_DT, $FGTS_Date_DTU)
        Evaluate $SEFIP_Cat
            When = '01'
            When = '03'
            When = '04'
            When = '05'
            When = '06'
            When = '07'
                if $FGTS_Date_DTU <> ''
                    Do DTU-Parse-Date($FGTS_Date_DTU, #Year, #Month, #Day)
                    Move #Year  To $YYYY '0000'
                    Move #Month To $MM   '00'
                    Move #Day   To $DD   '00'
                    Let $FGTS_Date_FmtBRA = $DD || $MM || $YYYY
                Else
                    Show '         '$R30Emplid ' Data de Opção (FGTS). - Informação Obrigatória. Não existe a informação para o empregado.'
                End-If
            Break
            When-Other
                Let $FGTS_Date_FmtBRA = '       '
        End-Evaluate



        Do Convert-To-DTU-Date(&WRK.BIRTHDATE, $Emplid_Birthdate)
        Evaluate $SEFIP_Cat
            When = '01'
            When = '02'
            When = '03'
            When = '04'
            When = '05'
            When = '06'
            When = '07'
            When = '12'
            When = '19'
            When = '20'
            When = '21'
            When = '26'
                if $Emplid_Birthdate <> ''
                    Do DTU-Parse-Date($Emplid_Birthdate, #Year, #Month, #Day)
                    Move #Year  To $YYYY '0000'
                    Move #Month To $MM   '00'
                    Move #Day   To $DD   '00'
                    Let $Emplid_Birthdate = $DD || $MM || $YYYY
                Else
                    Show '         '$R30Emplid ' Data de Nascimento - Informação Obrigatória. Não existe a informação para o empregado.'
                End-If
            Break
            When-Other
                Let $Emplid_Birthdate = ''
            Break
        End-Evaluate

        Let $CBO_CD = Rtrim(&WRK.CBO_CD_BRA, ' ')
        If $CBO_CD = ''
            Show '         '$R30Emplid ' CBO  Informação Obrigatória. Não existe a informação para o empregado.'
        Else
            Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
            Let $CBO_CD = $CBO_CD_End
            Let $CBO_CD = '0' || Substr($CBO_CD,1,4)
        End-If


        Let #Employee-ST-Percentage = &WRK.GPBR_EMP_PERC_CONT
        Let $SefipRskLvl            = &WRK.GPBR_MULTI_VINC



        #Debug show '  $RC_Comp_Month     :' $RC_Comp_Month
        #Debug show '    #INS_Desc_Val    :' #INS_Desc_Val
        #Debug show '    #13_Compensat    :' #13_Compensat
        #Debug show '    $SefipRskLvl     :' $SefipRskLvl
        #Debug show '    #Insured_Disc    :' #Insured_Disc

        #Debug show '    #Rem_Prev_Val    :' #Rem_Prev_Val
        #Debug show '    #Soc_Prov_13     :' #Soc_Prov_13
        #Debug show '    #GPS_Soc_Prov    :' #GPS_Soc_Prov



        Let $INS_Desc_Val   = To_Char(#INS_Desc_Val   * #Employee-ST-Percentage)
        Let $13_Compensat   = To_Char(#13_Compensat   * #Employee-ST-Percentage)
        Let $Insured_Disc   = To_Char(#Insured_Disc   * #Employee-ST-Percentage)

        Let $Rem_Prev_Val   = To_Char(#Rem_Prev_Val   * #Employee-ST-Percentage)
        Let $Soc_Prov_13    = To_Char(#Soc_Prov_13    * #Employee-ST-Percentage)
        Let $GPS_Soc_Prov   = To_Char(#GPS_Soc_Prov   * #Employee-ST-Percentage)


        Let $SefipRskValues = '01 02 03 04 05 06 07 08'
        Find $SefipRskLvl in $SefipRskValues 0 #strposition
        If #strposition = -1
            Let $SefipRskLvl = '  '
        End-If

        If $INS_Desc_Val = '000000000000000' AND ($13_Compensat <> '000000000000000' OR $Rem_Prev_Val <> '000000000000000' OR $Soc_Prov_13 <> '000000000000000')
            Let $INS_Desc_Val = '000000000000001'
        End-If

        Evaluate $RC_Comp_Month
        When = '12'

            Break
        When = '13'
            Let $INS_Desc_Val   = '000000000000000'
        End-Evaluate

        Let $INS_Desc_Val = Edit($INS_Desc_Val, '000000000000000')
        Let $13_Compensat = Edit($13_Compensat, '000000000000000')
        Let $Insured_Disc = Edit($Insured_Disc, '000000000000000')

        Let $Rem_Prev_Val = Edit($Rem_Prev_Val, '000000000000000')
        Let $Soc_Prov_13  = Edit($Soc_Prov_13, '000000000000000')
        Let $GPS_Soc_Prov = Edit($GPS_Soc_Prov, '000000000000000')

        Let $EmplSegBgnDt = $BgnDt
        Let $EmplSegEndDt = $EndDt



FROM PS_GPBR_SEFIP_WRK WRK
WHERE WRK.PROCESS_INSTANCE = #prcs_process_instance
AND WRK.ESTABID = $CurrentEstabId
!GROUP BY WRK.EMPLID, WRK.EMPL_RCD, WRK.COMP_INS_TYPE_BRA, WRK.GPBR_RESP_CNPJ, WRK.GPBR_TAKE_INS_TYPE, WRK.GPBR_STAKER_INSCR,
!        WRK.NID_PIS_BRA, WRK.LAST_HIRE_DT, WRK.TERMINATION_DT, WRK.EFFDT, WRK.COMPANY, WRK.ACTION, WRK.ACTION_REASON, WRK.GPBR_SEFIP_CAT,
!         WRK.APPLICANT_NAME, WRK.NID_CTPS_BRA, WRK.GPBR_CTPS_ID, WRK.GPBR_FGTS_DT, WRK.BIRTHDATE, WRK.CBO_CD_BRA,
!         WRK.GPBR_MULTI_VINC, WRK.GPBR_EMP_PERC_CONT, WRK.GPBR_ACTION_ABS, WRK.GP_PAYGROUP, WRK.SEG_BGN_DT
ORDER BY WRK.COMP_INS_TYPE_BRA, WRK.GPBR_RESP_CNPJ, WRK.GPBR_TAKE_INS_TYPE, WRK.GPBR_STAKER_INSCR, WRK.NID_PIS_BRA, WRK.EMPLID, WRK.LAST_HIRE_DT, WRK.GPBR_SEFIP_CAT DESC, WRK.TERMINATION_DT DESC
End-Select

Do PrintTime('End Process-Main-30-SB')
End-Procedure Process-Main-30-SB


!*****************************
Begin-Procedure Process_Empl
#debug show '    Begin-Procedure Process_Empl **********  ' $R30Emplid

    If (#INS_Desc_Val = 0
        AND #13_Compensat = 0
        AND #Insured_Disc = 0
        AND #Rem_Prev_Val = 0
        AND #Soc_Prov_13 = 0
        AND #GPS_Soc_Prov = 0) AND (rtrim($GPBR_ACTION_ABS, ' ') <> 'N')

        #debug show 'Employee: ' $R30Emplid ' with zeros in Writable array and not present absences in period'
    Else

      Let $WriteReg30 = 'True'
      Write 1 From $Reg30:2                 -
                   $Estabid_Comp_Ins1:1     -
                   $Inscr_Reg30:14          -
                   $STaker_Ins_Type:1       -
                   $STaker_Inscr:14         -
                   $National_PIS_PASEP:11   -
                   $Admission_Dt_FmtBRA:8   -
                   $SEFIP_Cat:2             -
                   $Emplid_Name:70          -
                   $Emplid_Imp:11           -
                   $National_CTPS:7         -
                   $Serie_CTPS:5            -
                   $FGTS_Date_FmtBRA:8      -
                   $Emplid_Birthdate:8      -
                   $CBO_CD:5                -
                   $INS_Desc_Val:15         -
                   $13_Compensat:15         -
                   $Blank:2                 -
                   $SefipRskLvl:2           -
                   $Insured_Disc:15         -
                   $Rem_Prev_Val:15         -
                   $Soc_Prov_13:15          -
                   $GPS_Soc_Prov:15         -
                   $Blank:98                -
                   '*':1
   
       If $RC_Comp_Month <> '13'
         #debug show '         ** Process-Main-32 **'  $R30Emplid
         Do Process-Main-32
       End-If
    End-if

    Let #INS_Desc_Val           = 0
    Let #13_Compensat           = 0
    Let #Insured_Disc           = 0
    Let #Rem_Prev_Val           = 0
    Let #Soc_Prov_13            = 0
    Let #GPS_Soc_Prov           = 0
    Let #Addl_Pymt              = 0

    Let $Additional_pymt_flag   = 'N'

End-Procedure Process_Empl


!*****************************
Begin-Procedure Process-Main-30
#debug show '    Begin-Procedure Process-Main-30 **************************************************'
Do PrintTime('Start Process-Main-30')
#debug show '       $CurrentEstabId: ' $CurrentEstabId
#debug show '       $BgnDt         : ' $BgnDt
#debug show '       $EndDt         : ' $EndDt
#debug show '       $RehComp_Norm  : ' $RehComp_Norm
!Begin-Doc
!               This procedure selects employees to process according to $RehCompNorm variable the condition changes between
!               Rehired/Complementary and Normal payment employees selection
!End-Doc
!*****************************
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'JOB3')

!Replace the alias for job and result tables in filters to select normal or hired / rehired and complementary payment.
If $RehComp_Norm = 'N'
   Let $EmplFilterRC_N = Replace($FilterRCN_N, 'JOB', 'JOB3')
Else
   Let $EmplFilterRC_N = Replace($FilterRCN_RC,'JOB', 'JOB3')
End-If
Let $EmplFilterRC_N = Replace($EmplFilterRC_N, 'RSL', 'RS0')

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP0')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP0')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'WD2')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD2')


#debug show '       *$GPCalTbl        : ' $GPCalTbl
#debug show '       *$SEFIPFilter     : ' $SEFIPFilter
#debug show '       *$EmplFilterRC_N  : ' $EmplFilterRC_N
#debug show '       *$EmplFilterLocal : ' $EmplFilterLocal

Begin-Select DISTINCT
JOB3.EMPLID
JOB3.EFFDT
JOB3.EMPL_RCD
JOB3.EMPL_STATUS
JOB3.ACTION
WD2.CBO_CD_BRA
WD2.SEFIP_CATEGORY_BRA
WD2.SEG_END_DT
WD2.SEG_BGN_DT

  #Debug show '    JOB3.EMPLID      :' &JOB3.EMPLID
  #Debug show '    JOB3.EMPL_RCD    :' &JOB3.EMPL_RCD
  #Debug show '    JOB3.EMPL_STATUS :' &JOB3.EMPL_STATUS

  Let $Emplid     = &JOB3.EMPLID
  Let $Job_Effdt  = &JOB3.EFFDT
  Let #EmplRcd    = &JOB3.EMPL_RCD
  Let $EmplStatus = &JOB3.EMPL_STATUS
  Let $CBO_CD     = &WD2.CBO_CD_BRA
  Let $EmplSegEndDt = &WD2.SEG_END_DT
  Let $EmplSegBgnDt = &WD2.SEG_BGN_DT

  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End )
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &WD2.SEFIP_CATEGORY_BRA

  do Get-Empl-Data
  do Get-Payee-Parameters
  do Get-National-IDs

  Let $LastDate   = $Job_Effdt
  Let $LastAction = &JOB3.ACTION

  Do Get-Admission-Date
  Do Search-Movement-Code

  #Debug show '    National PIS     :' $National_PIS_PASEP

  If $National_PIS_PASEP <> ''
    Do Get-Segment-Dates
    Let #Employee-ST-Percentage = 100
    Do Get-Employee-WA-Data
    Do Prepare-Reg30
  End-If

FROM PS_GPBR_SEFIP_WA  WD2
   , PS_JOB            JOB3
   , PS_GP_RSLT_SEG_VW RS0

[$GPCalTbl]
WHERE WD2.ESTABID       = $CurrentEstabId
  AND WD2.ORIG_CAL_RUN_ID = WD2.CAL_RUN_ID
  AND WD2.GPBR_GATHERING_CD = 'NA'
  AND RS0.EMPLID        = WD2.EMPLID
    AND RS0.EMPL_RCD      = WD2.EMPL_RCD
    AND RS0.CAL_RUN_ID    = WD2.CAL_RUN_ID
    AND RS0.GP_PAYGROUP   = WD2.GP_PAYGROUP
    AND RS0.CAL_ID        = WD2.CAL_ID
    AND RS0.ORIG_CAL_RUN_ID = WD2.ORIG_CAL_RUN_ID
    AND RS0.RSLT_SEG_NUM  = WD2.RSLT_SEG_NUM
    AND RS0.SEG_BGN_DT   >= WD2.SEG_BGN_DT
    AND RS0.SEG_END_DT   <= WD2.SEG_END_DT
  AND WD2.SEG_BGN_DT   >= $BgnDt
  AND WD2.SEG_END_DT   <= $EndDt
[$SEFIPFilter]
  AND JOB3.EMPLID       = WD2.EMPLID
  AND JOB3.EMPL_RCD     = WD2.EMPL_RCD
  AND JOB3.ESTABID      = WD2.ESTABID
[$EmplFilterRC_N]
 !AND JOB3.EFFDT       = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JOB3.EMPLID AND EMPL_RCD = JOB3.EMPL_RCD AND ACTION IN ('HIR', 'TER', 'XFR', 'REH', 'POI') AND (EFFDT <= WD2.SEG_END_DT OR TERMINATION_DT = WD2.SEG_END_DT))
 AND JOB3.EFFDT        = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JOB3.EMPLID AND EMPL_RCD = JOB3.EMPL_RCD AND ACTION IN ([$SQL_TER_COM_LOF_XFR_HIR_REH_POI])
                           AND (EFFDT <= WD2.SEG_END_DT OR TERMINATION_DT = WD2.SEG_END_DT))
 AND JOB3.EFFSEQ       = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = JOB3.EMPLID AND EMPL_RCD = JOB3.EMPL_RCD AND EFFDT = JOB3.EFFDT AND ESTABID = JOB3.ESTABID)
[$EmplFilterLocal]

  AND WD2.SEFIP_CATEGORY_BRA <> '22'
End-Select
Do PrintTime('End Process-Main-30')
End-Procedure Process-Main-30


!*****************************
Begin-Procedure Process-Main-30-660
#debug show '    Begin-Procedure Process-Main-30-660 **************************************************'
#debug show '       $CurrentEstabId: ' $CurrentEstabId
#debug show '       $BgnDt         : ' $BgnDt
#debug show '       $EndDt         : ' $EndDt
#debug show '       $RehComp_Norm  : ' $RehComp_Norm
#debug show '       $M660BgnDt     : ' $M660BgnDt
#debug show '       $M660EndDt     : ' $M660EndDt
#debug show '       #660_process_id: ' #660_process_id

!Begin-Doc
!
!End-Doc
!*****************************
Let $EmplFilterLocal     = Replace($EmplFilter, 'JOB', 'JOB6')
Let $IncludeCurrentEstab = 'Y'
Do Get-Related-Establishments
#debug show '       $EstabList           : ' $EstabList
#debug show '       $EmplFilterLocal     : ' $EmplFilterLocal
#debug show '       $CalRunIdKey         : ' $CalRunIdKey

Begin-Select
W660.EMPLID
W660.EFFDT
W660.EMPL_RCD
W660.EMPL_STATUS
W660.ACTION
W660.CBO_CD_BRA
W660.GPBR_SEFIP_CAT
W660.GPBR_INS_DESC_VAL
W660.GPBR_13_COMPENSAT
W660.GPBR_INSURED_DISC
W660.GPBR_REM_PREV_VAL
W660.GPBR_SOC_PROV_13_S
W660.GPBR_GPS_SOC_PROV
W660.GPBR_13TH_SAL_AVG
W660.GPBR_13TH_SAL_ADV
W660.GPBR_13TH_AVG_ADV
W660.GPBR_INSS_13_SAL
W660.GPBR_MULTI_VINC !--WD6.SEFIP_RISK_LVL_BRA
W660.GPBR_FAMILY_SAL
W660.SEG_END_DT
W660.SEG_BGN_DT
W660.APPLICANT_NAME
W660.GPBR_CTPS_ID
W660.BIRTHDATE
W660.GPBR_FGTS_DT
W660.NID_PIS_BRA
W660.NID_CTPS_BRA
W660.LAST_HIRE_DT

  Let $EmplSegEndDt = &W660.SEG_END_DT
  Let $EmplSegBgnDt = &W660.SEG_BGN_DT
  Let $Emplid       = &W660.EMPLID
  Let $R30Emplid    = &W660.EMPLID
  #Debug show '+                 $emplid :' $Emplid

  Let $Job_Effdt    = &W660.EFFDT
  Let #EmplRcd      = &W660.EMPL_RCD
  Let $EmplStatus   = &W660.EMPL_STATUS
  Let $CBO_CD       = &W660.CBO_CD_BRA

  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End )
  Let $CBO_CD       = $CBO_CD_End
  Let $CBO_CD       = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &W660.GPBR_SEFIP_CAT

  !do Get-Empl-Data
    Let $Emplid_Name   = &W660.CBO_CD_BRA

    Let $Serie_CTPS  = Rtrim(&W660.GPBR_CTPS_ID, ' ')
    If Length($Serie_CTPS) > 0
        DO FILL_LEADING ( $Serie_CTPS , '0' , 5 , 'L', $Serie_CTPS)
    End-If

    Let $Emplid_BirthDt = Rtrim(&W660.BIRTHDATE, ' ')
    Do Convert-To-DTU-Date($Emplid_BirthDt, $Emplid_BirthDt1)
    If $Emplid_BirthDt1 <> ''
        Let $Emplid_Birthdate = Substr($Emplid_BirthDt1,9,2) || Substr($Emplid_BirthDt1,6,2) || Substr($Emplid_BirthDt1,1,4)
    End-If


  !do Get-Payee-Parameters
    Let $FGTS_Dt     = &W660.GPBR_FGTS_DT
    Do Convert-To-DTU-Date($FGTS_Dt, $FGTS_Date_DTU)

  !do Get-National-IDs
    Let $National_PIS_PASEP = Rtrim(&W660.NID_PIS_BRA,' ')
    Let $National_CTPS  = Rtrim(&W660.NID_CTPS_BRA,' ')
    Let $National_CTPS  = Edit($National_CTPS, '0000000')

  Let $LastDate   = $Job_Effdt
  Let $LastAction = &W660.ACTION

  !Do Get-Admission-Date
    Let $HireDt    = &W660.LAST_HIRE_DT
    Do Convert-To-DTU-Date($HireDt, $Admission_Dt_DTU)

  !Do Search-Movement-Code

  If $National_PIS_PASEP <> ''

    Let $SefipRskLvl    = &W660.GPBR_MULTI_VINC
    Let $INS_Desc_Val   = To_Char(&W660.GPBR_INS_DESC_VAL  * 100)
    Let $13_Compensat   = To_Char(&W660.GPBR_13_COMPENSAT  * 100)
    Let $Insured_Disc   = To_Char(&W660.GPBR_INSURED_DISC  * 100)
    Let $Rem_Prev_Val   = To_Char(&W660.GPBR_REM_PREV_VAL  * 100)
    Let $Soc_Prov_13    = To_Char(&W660.GPBR_SOC_PROV_13_S * 100)
    Let $GPS_Soc_Prov   = To_Char(&W660.GPBR_GPS_SOC_PROV  * 100)
    Let $13Sal_Averages = To_Char(&W660.GPBR_13TH_SAL_AVG  * 100)
    Let $13Sal_Advance  = To_Char(&W660.GPBR_13TH_SAL_ADV  * 100)
    Let $13Sal_Avg_Adv  = To_Char(&W660.GPBR_13TH_AVG_ADV  * 100)
    Let $FamilySalary   = To_Char(&W660.GPBR_FAMILY_SAL    * 100)

    !Do Prepare-Reg30

    !********************** Prepare data for Write
        move '30' to $Reg30
        move ' '  to $Blank
        Let $Inscr_Reg30 = $Estabid_CNPJ_CEI

        Let $Emplid_Name30= Substr($Emplid_Name30, 1, 70)
        Let $INS_Desc_Val = Edit($INS_Desc_Val, '000000000000000')
        Let $13_Compensat = Edit($13_Compensat, '000000000000000')
        Let $Rem_Prev_Val = Edit($Rem_Prev_Val, '000000000000000')
        Let $Soc_Prov_13  = Edit($Soc_Prov_13,  '000000000000000')
        Let $GPS_Soc_Prov = Edit($GPS_Soc_Prov, '000000000000000')
        Let $Insured_Disc = Edit($Insured_Disc, '000000000000000')


        !Blank Values for 660
        Let $STaker_Ins_Type     = ' '
        Let $STaker_Inscr        = ' '

        !Admission Date
        Let $Admission_Dt_DTU_P = $Admission_Dt_DTU
        !Evaluate SEFIP Category to define Admission Date
        Evaluate $SEFIP_Cat
            When = '13'
            When = '14'
            When = '15'
            When = '16'
            When = '17'
            When = '18'
                Let $Admission_Dt_DTU_P = '        '
        End-Evaluate
        Do Str-Delete-Chars($Admission_Dt_DTU_P, '-',$Admission_Dt_DTU_P)
        !Let $Admission_Dt_DTU     = Substr($Admission_Dt_DTU,1,4) || '-' || Substr($Admission_Dt_DTU,5,2) ||  '-' || Substr($Admission_Dt_DTU,7,2)
        Let $Admission_Dt_FmtBRA  = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)

        !Employee Name
        Let $Emplid_Name = Rtrim(&W660.APPLICANT_NAME,' ')
        do Check-Strings ( $Emplid_Name , $Emplid_Name)
        do Check-Strings ( $Emplid_Name , $Emplid_Name30)
        Let $Emplid_Name30= Substr($Emplid_Name30, 1, 70)

        !Evaluate CTPS NID
        Evaluate $SEFIP_Cat
        When = '01'
        When = '03'
        When = '04'
        When = '06'
        When = '07'
        When = '26'
        If $National_CTPS = ''
            Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
            show $Message
            Let $National_CTPS = '0000000'
        End-If
        If $Serie_CTPS    = ''
            Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
            show $Message
            Let $Serie_CTPS    = '00000'
        End-If
        Break
        When = '02'
        If $National_CTPS = ''
            Let $National_CTPS = '0000000'
            Let $Serie_CTPS    = '00000'
        End-If
        Break
        When-Other

        Let $Serie_CTPS    = '00000'
        Let $National_CTPS = '0000000'
        End-Evaluate


        !Evaluate FGTS option date

        If $FGTS_Option = 'N'
         Let $FGTS_Date_DTU = '        '
        Else
         If $FGTS_Date_DTU = ''
            Let $FGTS_Date_DTU = $Admission_Dt_DTU
         End-If
        End-IF

        Evaluate $SEFIP_Cat
        When = '01'
        When = '03'
        When = '04'
        When = '05'
        When = '06'
        When = '07'
         If $FGTS_Date_DTU = ''
           Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Data de Opção - Informação Obrigatória. Não existe a informação para o empregado.'
           show $Message
         End-If
         Let $FGTS_Date_DTU = $Admission_Dt_DTU
        Break
        When-Other
         Let $FGTS_Date_DTU = '        '
        End-Evaluate

        Let $FGTS_Date_FmtBRA  = Substr($FGTS_Date_DTU,9,2) || Substr($FGTS_Date_DTU,6,2) || Substr($FGTS_Date_DTU,1,4)

        !Employee ID
        Evaluate $SEFIP_Cat
        When = '06'
        When = '13'
        When = '14'
        When = '15'
        When = '16'
        When = '17'
        When = '18'
        When = '22'
        When = '23'
        When = '24'
        When = '25'
            Let $Emplid_Imp = ' '
            Break
        When-Other
            Let $Emplid_Imp = &W660.EMPLID
            DO FILL_LEADING ( $Emplid_Imp , '0', 11, 'L', $Emplid_Imp)
        End-Evaluate



        !*******************************************************************************************************

        Let $WriteReg30 = 'True'

        #debug show '   Reg30 data              '
        #debug show '   $Emplid                 ' $Emplid
        #debug show '   $Reg30                  '   $Reg30
        #debug show '   $Estabid_Comp_Ins1      '   $Estabid_Comp_Ins1
        #debug show '   $Inscr_Reg30            '   $Inscr_Reg30
        #debug show '   $STaker_Ins_Type        '   $STaker_Ins_Type
        #debug show '   $STaker_Inscr           '   $STaker_Inscr
        #debug show '   $National_PIS_PASEP     '   $National_PIS_PASEP
        #debug show '   $Admission_Dt_FmtBRA    '   $Admission_Dt_FmtBRA
        #debug show '   $SEFIP_Cat              '   $SEFIP_Cat
        #debug show '   $Emplid_Name            '   $Emplid_Name
        #debug show '   $Emplid_Imp             '   $Emplid_Imp
        #debug show '   $National_CTPS          '   $National_CTPS
        #debug show '   $Serie_CTPS             '   $Serie_CTPS
        #debug show '   $FGTS_Date_FmtBRA       '   $FGTS_Date_FmtBRA
        #debug show '   $Emplid_Birthdate       '   $Emplid_Birthdate
        #debug show '   $CBO_CD                 '   $CBO_CD
        #debug show '   $INS_Desc_Val           '   $INS_Desc_Val
        #debug show '   $13_Compensat           '   $13_Compensat
        #debug show '   $Blank                  '   $Blank
        #debug show '   $SefipRskLvl            '   $SefipRskLvl
        #debug show '   $Insured_Disc           '   $Insured_Disc
        #debug show '   $Rem_Prev_Val           '   $Rem_Prev_Val
        #debug show '   $Soc_Prov_13            '   $Soc_Prov_13
        #debug show '   $GPS_Soc_Prov           '   $GPS_Soc_Prov

      Write 1 From $Reg30:2                 -
                   $Estabid_Comp_Ins1:1     -
                   $Inscr_Reg30:14          -
                   $STaker_Ins_Type:1       -
                   $STaker_Inscr:14         -
                   $National_PIS_PASEP:11   -
                   $Admission_Dt_FmtBRA:8   -
                   $SEFIP_Cat:2             -
                   $Emplid_Name:70          -
                   $Emplid_Imp:11           -
                   $National_CTPS:7         -
                   $Serie_CTPS:5            -
                   $FGTS_Date_FmtBRA:8      -
                   $Emplid_Birthdate:8      -
                   $CBO_CD:5                -
                   $INS_Desc_Val:15         -
                   $13_Compensat:15         -
                   $Blank:2                 -
                   $SefipRskLvl:2           -
                   $Insured_Disc:15         -
                   $Rem_Prev_Val:15         -
                   $Soc_Prov_13:15          -
                   $GPS_Soc_Prov:15         -
                   $Blank:98                -
                   '*':1

        If $RC_Comp_Month <> '13'
            #debug show '         ** Process-Main-32 **'  $R30Emplid
            Do Process-Main-32
        End-If
  End-If

FROM PS_GPBR_SEFIP_WRK W660
WHERE W660.PROCESS_INSTANCE = #prcs_process_instance
![$CalRunIdKey]
AND W660.ESTABID           IN ([$EstabList])
AND W660.SEG_BGN_DT       >= $M660BgnDt
AND W660.SEG_END_DT       <= $M660EndDt
AND W660.GPBR_PROCESS_ID   = #660_process_id
!-- Filer applied in FillEmployeeGuide procedure [$EmplFilterLocal]
ORDER BY W660.NID_PIS_BRA
End-Select

End-Procedure Process-Main-30-660

!*****************************
Begin-Procedure Process-Main-30-650
#debug show '    Begin-Procedure Process-Main-30-650 **************************************************'
!*****************************
Let $EmplFilterLocal     = Replace($EmplFilter, 'JOB', 'JB3')
Let $CurrentEstabId      = $RC_Estabid
Let $IncludeCurrentEstab = 'Y'
Do Get-Related-Establishments

#debug show '       $BgnDt            :' $BgnDt
#debug show '       $EndDt            :' $EndDt
#debug show '       $EmplFilter       :' $EmplFilter
#debug show '       $RC_Estabid       :' $RC_Estabid
#debug show '       $EstabList        :' $EstabList
#debug show '       $EmplFilterLocal  :' $EmplFilterLocal
#debug show '       $RC_UnionCode     :' $RC_UnionCode


Begin-Select
W650.EMPLID
W650.EFFDT
W650.EMPL_RCD
W650.EMPL_STATUS
W650.ACTION
W650.CBO_CD_BRA
W650.GPBR_SEFIP_CAT
W650.GPBR_INS_DESC_VAL
W650.GPBR_13_COMPENSAT
W650.GPBR_INSURED_DISC
W650.GPBR_REM_PREV_VAL
W650.GPBR_SOC_PROV_13_S
W650.GPBR_GPS_SOC_PROV
W650.GPBR_13TH_SAL_AVG
W650.GPBR_13TH_SAL_ADV
W650.GPBR_13TH_AVG_ADV
W650.GPBR_INSS_13_SAL
W650.GPBR_MULTI_VINC  !--SEFIP_RISK_LVL_BRA
W650.GPBR_FAMILY_SAL
W650.SEG_END_DT
W650.SEG_BGN_DT
W650.APPLICANT_NAME
W650.GPBR_CTPS_ID
W650.BIRTHDATE
W650.GPBR_FGTS_DT
W650.NID_PIS_BRA
W650.NID_CTPS_BRA
W650.LAST_HIRE_DT

  Let $Emplid     = &W650.EMPLID
  Let $Job_Effdt  = &W650.EFFDT
  Let #EmplRcd    = &W650.EMPL_RCD
  Let $EmplStatus = &W650.EMPL_STATUS
  Let $CBO_CD     = &W650.CBO_CD_BRA

  #Debug show '+                 $emplid :' $Emplid

  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End )
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &W650.GPBR_SEFIP_CAT

  !do Get-Empl-Data
    Let $Emplid_Name   = &W650.CBO_CD_BRA

    Let $Serie_CTPS  = Rtrim(&W650.GPBR_CTPS_ID, ' ')
    If Length($Serie_CTPS) > 0
        DO FILL_LEADING ( $Serie_CTPS , '0' , 5 , 'L', $Serie_CTPS)
    End-If

    Let $Emplid_BirthDt = Rtrim(&W650.BIRTHDATE, ' ')
    Do Convert-To-DTU-Date($Emplid_BirthDt, $Emplid_BirthDt1)
    If $Emplid_BirthDt1 <> ''
        Let $Emplid_Birthdate = Substr($Emplid_BirthDt1,9,2) || Substr($Emplid_BirthDt1,6,2) || Substr($Emplid_BirthDt1,1,4)
    End-If

  !do Get-Payee-Parameters
    Let $FGTS_Dt     = &W650.GPBR_FGTS_DT
    Do Convert-To-DTU-Date($FGTS_Dt, $FGTS_Date_DTU)

  !do Get-National-IDs
    Let $National_PIS_PASEP = Rtrim(&W650.NID_PIS_BRA,' ')
    Let $National_CTPS  = Rtrim(&W650.NID_CTPS_BRA,' ')
    Let $National_CTPS  = Edit($National_CTPS, '0000000')

  Let $LastDate   = $Job_Effdt
  Let $LastAction = &W650.ACTION

  !Do Get-Admission-Date
    Let $HireDt    = &W650.LAST_HIRE_DT
    Do Convert-To-DTU-Date($HireDt, $Admission_Dt_DTU)

  !Do Search-Movement-Code

  If $National_PIS_PASEP <> ''

    Let $SefipRskLvl    = &W650.GPBR_MULTI_VINC
    Let $INS_Desc_Val   = To_Char(&W650.GPBR_INS_DESC_VAL * 100)
    Let $13_Compensat   = To_Char(&W650.GPBR_13_COMPENSAT * 100)
    Let $Insured_Disc   = To_Char(&W650.GPBR_INSURED_DISC * 100)
    Let $Rem_Prev_Val   = To_Char(&W650.GPBR_REM_PREV_VAL * 100)
    Let $Soc_Prov_13    = To_Char(&W650.GPBR_SOC_PROV_13_S * 100)
    Let $GPS_Soc_Prov   = To_Char(&W650.GPBR_GPS_SOC_PROV * 100)
    Let $13Sal_Averages = To_Char(&W650.GPBR_13TH_SAL_AVG  * 100)
    Let $13Sal_Advance  = To_Char(&W650.GPBR_13TH_SAL_ADV  * 100)
    Let $13Sal_Avg_Adv  = To_Char(&W650.GPBR_13TH_AVG_ADV  * 100)
    Let $FamilySalary   = To_Char(&W650.GPBR_FAMILY_SAL    * 100)


    !Do Prepare-Reg30

    !********************** Prepare data for Write
        move '30' to $Reg30
        move ' '  to $Blank
        Let $Inscr_Reg30 = $Estabid_CNPJ_CEI

        Let $Emplid_Name30= Substr($Emplid_Name30, 1, 70)
        Let $INS_Desc_Val = Edit($INS_Desc_Val, '000000000000000')
        Let $13_Compensat = Edit($13_Compensat, '000000000000000')
        Let $Rem_Prev_Val = Edit($Rem_Prev_Val, '000000000000000')
        Let $Soc_Prov_13  = Edit($Soc_Prov_13,  '000000000000000')
        Let $GPS_Soc_Prov = Edit($GPS_Soc_Prov, '000000000000000')
        Let $Insured_Disc = Edit($Insured_Disc, '000000000000000')


        !Blank Values for 650
        Let $STaker_Ins_Type     = ' '
        Let $STaker_Inscr        = ' '

        !Admission Date
        Let $Admission_Dt_DTU_P = $Admission_Dt_DTU
        !Evaluate SEFIP Category to define Admission Date
        Evaluate $SEFIP_Cat
            When = '13'
            When = '14'
            When = '15'
            When = '16'
            When = '17'
            When = '18'
                Let $Admission_Dt_DTU_P = '        '
        End-Evaluate
        Do Str-Delete-Chars($Admission_Dt_DTU_P, '-',$Admission_Dt_DTU_P)
        !Let $Admission_Dt_DTU     = Substr($Admission_Dt_DTU,1,4) || '-' || Substr($Admission_Dt_DTU,5,2) ||  '-' || Substr($Admission_Dt_DTU,7,2)
        Let $Admission_Dt_FmtBRA  = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)

        !Employee Name
        Let $Emplid_Name = Rtrim(&W650.APPLICANT_NAME,' ')
        do Check-Strings ( $Emplid_Name , $Emplid_Name)
        do Check-Strings ( $Emplid_Name , $Emplid_Name30)
        Let $Emplid_Name30= Substr($Emplid_Name30, 1, 70)

        !Evaluate CTPS NID
        Evaluate $SEFIP_Cat
        When = '01'
        When = '03'
        When = '04'
        When = '06'
        When = '07'
        When = '26'
        If $National_CTPS = ''
            Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
            show $Message
            Let $National_CTPS = '0000000'
        End-If
        If $Serie_CTPS    = ''
            Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
            show $Message
            Let $Serie_CTPS    = '00000'
        End-If
        Break
        When = '02'
        If $National_CTPS = ''
            Let $National_CTPS = '0000000'
            Let $Serie_CTPS    = '00000'
        End-If
        Break
        When-Other

        Let $Serie_CTPS    = '00000'
        Let $National_CTPS = '0000000'
        End-Evaluate


        !Evaluate FGTS option date

        If $FGTS_Option = 'N'
         Let $FGTS_Date_DTU = '        '
        Else
         If $FGTS_Date_DTU = ''
            Let $FGTS_Date_DTU = $Admission_Dt_DTU
         End-If
        End-IF

        Evaluate $SEFIP_Cat
        When = '01'
        When = '03'
        When = '04'
        When = '05'
        When = '06'
        When = '07'
         If $FGTS_Date_DTU = ''
           Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Data de Opção - Informação Obrigatória. Não existe a informação para o empregado.'
           show $Message
         End-If
         Let $FGTS_Date_DTU = $Admission_Dt_DTU
        Break
        When-Other
         Let $FGTS_Date_DTU = '        '
        End-Evaluate

        Let $FGTS_Date_FmtBRA  = Substr($FGTS_Date_DTU,9,2) || Substr($FGTS_Date_DTU,6,2) || Substr($FGTS_Date_DTU,1,4)

        !Employee ID
        Evaluate $SEFIP_Cat
        When = '06'
        When = '13'
        When = '14'
        When = '15'
        When = '16'
        When = '17'
        When = '18'
        When = '22'
        When = '23'
        When = '24'
        When = '25'
            Let $Emplid_Imp = ' '
            Break
        When-Other
            Let $Emplid_Imp = &W650.EMPLID
            DO FILL_LEADING ( $Emplid_Imp , '0', 11, 'L', $Emplid_Imp)
        End-Evaluate

    !*******************************************************************************************************

    Let $WriteReg30 = 'True'

    #debug show '   Reg30 data              '
    #debug show '   $Emplid                 '   $Emplid
    #debug show '   $Reg30                  '   $Reg30
    #debug show '   $Estabid_Comp_Ins1      '   $Estabid_Comp_Ins1
    #debug show '   $Inscr_Reg30            '   $Inscr_Reg30
    #debug show '   $STaker_Ins_Type        '   $STaker_Ins_Type
    #debug show '   $STaker_Inscr           '   $STaker_Inscr
    #debug show '   $National_PIS_PASEP     '   $National_PIS_PASEP
    #debug show '   $Admission_Dt_FmtBRA    '   $Admission_Dt_FmtBRA
    #debug show '   $SEFIP_Cat              '   $SEFIP_Cat
    #debug show '   $Emplid_Name            '   $Emplid_Name
    #debug show '   $Emplid_Imp             '   $Emplid_Imp
    #debug show '   $National_CTPS          '   $National_CTPS
    #debug show '   $Serie_CTPS             '   $Serie_CTPS
    #debug show '   $FGTS_Date_FmtBRA       '   $FGTS_Date_FmtBRA
    #debug show '   $Emplid_Birthdate       '   $Emplid_Birthdate
    #debug show '   $CBO_CD                 '   $CBO_CD
    #debug show '   $INS_Desc_Val           '   $INS_Desc_Val
    #debug show '   $13_Compensat           '   $13_Compensat
    #debug show '   $Blank                  '   $Blank
    #debug show '   $SefipRskLvl            '   $SefipRskLvl
    #debug show '   $Insured_Disc           '   $Insured_Disc
    #debug show '   $Rem_Prev_Val           '   $Rem_Prev_Val
    #debug show '   $Soc_Prov_13            '   $Soc_Prov_13
    #debug show '   $GPS_Soc_Prov           '   $GPS_Soc_Prov

      Write 1 From $Reg30:2                 -
                   $Estabid_Comp_Ins1:1     -
                   $Inscr_Reg30:14          -
                   $STaker_Ins_Type:1       -
                   $STaker_Inscr:14         -
                   $National_PIS_PASEP:11   -
                   $Admission_Dt_FmtBRA:8   -
                   $SEFIP_Cat:2             -
                   $Emplid_Name:70          -
                   $Emplid_Imp:11           -
                   $National_CTPS:7         -
                   $Serie_CTPS:5            -
                   $FGTS_Date_FmtBRA:8      -
                   $Emplid_Birthdate:8      -
                   $CBO_CD:5                -
                   $INS_Desc_Val:15         -
                   $13_Compensat:15         -
                   $Blank:2                 -
                   $SefipRskLvl:2           -
                   $Insured_Disc:15         -
                   $Rem_Prev_Val:15         -
                   $Soc_Prov_13:15          -
                   $GPS_Soc_Prov:15         -
                   $Blank:98                -
                   '*':1

  End-If

FROM PS_GPBR_SEFIP_WRK W650
WHERE W650.PROCESS_INSTANCE = #prcs_process_instance
AND W650.ESTABID IN ([$EstabList])
AND W650.UNION_CD        = $RC_UnionCode
ORDER BY W650.NID_PIS_BRA

End-Select
End-Procedure Process-Main-30-650

!*****************************
Begin-Procedure Get-Segment-Dates
#debug show 'Begin-Procedure Get-Segment-Dates **'
!*****************************
Do Convert-To-DTU-Date($HireDt, $HireDtDTU)
Do Convert-To-DTU-Date($LastDate, $LastDateDTU)

If $BgnDtDTU > $HireDtDTU
   Let $SegBgnDt = $BgnDt
Else
   Let $SegBgnDt = $HireDt
End-If

If $EndDtDTU > $LastDateDTU
   Let $SegEndDt = $EndDt
Else
   Let $SegEndDt = $LastDateSrch
End-If
End-Procedure Get-Segment-Dates

!*****************************
Begin-Procedure Prepare-Reg30
#debug show 'Begin-Procedure Prepare-Reg30 **'
#debug show '$Admission_Dt_DTU    ' $Admission_Dt_DTU
!*****************************
  move '30' to $Reg30
  move ' '  to $Blank
  Let $Inscr_Reg30 = $Estabid_CNPJ_CEI

  do Check-Strings ( $Emplid_Name , $Emplid_Name)
  do Check-Strings ( $Emplid_Name , $Emplid_Name30)

  Let $Emplid_Name30= Substr($Emplid_Name30, 1, 70)
  Let $INS_Desc_Val = Edit($INS_Desc_Val, '000000000000000')
  Let $13_Compensat = Edit($13_Compensat, '000000000000000')
  Let $Rem_Prev_Val = Edit($Rem_Prev_Val, '000000000000000')
  Let $Soc_Prov_13  = Edit($Soc_Prov_13,  '000000000000000')
  Let $GPS_Soc_Prov = Edit($GPS_Soc_Prov, '000000000000000')

  Evaluate $RC_Gather_Cd
  When = '145'
  When = '660'
     Let $Rem_Prev_Val = '000000000000000'
  End-Evaluate

  If Rtrim($Admission_Dt_DTU, ' ') = ''
     Do Convert-To-DTU-Date($EndDt , $Admission_Dt_DTU)
  End-If

  If $FGTS_Option = 'N'
     Let $FGTS_Date_DTU = '        '
  Else
     If $FGTS_Date_DTU = ''
        Let $FGTS_Date_DTU = $Admission_Dt_DTU
     End-If
  End-IF

  If $STaker_Inscr = ''
     Let $STaker_Inscr = ' '
  End-If

  If $STaker_Ins_Type = ''
     Let $STaker_Ins_Type = ' '
  End-If
  #debug show '   $SEFIP_Cat:' $SEFIP_Cat

  Let $Admission_Dt_DTU_P = $Admission_Dt_DTU

  !Evaluate SEFIP Category to define Admission Date
  Evaluate $SEFIP_Cat
  When = '13'
  When = '14'
  When = '15'
  When = '16'
  When = '17'
  When = '18'
    Let $Admission_Dt_DTU_P = '        '
  End-Evaluate

  !Evaluate CTPS NID
  Evaluate $SEFIP_Cat
  When = '01'
  When = '03'
  When = '04'
  When = '06'
  When = '07'
  When = '26'
    If $National_CTPS = ''
      Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
      show $Message
      Let $National_CTPS = '0000000'
    End-If
    If $Serie_CTPS    = ''
      Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Número / Serie CTPS - Informação Obrigatória. Não existe a informação para o empregado.'
      show $Message
      Let $Serie_CTPS    = '00000'
    End-If
  Break
  When = '02'
    If $National_CTPS = ''
      Let $National_CTPS = '0000000'
      Let $Serie_CTPS    = '00000'
    End-If
  Break
  When-Other

    Let $Serie_CTPS    = '00000'
    Let $National_CTPS = '0000000'
  End-Evaluate

  !Evaluate Birthdate
  Evaluate $SEFIP_Cat
  When = '01'
  When = '02'
  When = '03'
  When = '04'
  When = '05'
  When = '06'
  When = '07'
  When = '12'
  When = '19'
  When = '20'
  When = '21'
  When = '26'
     If $Emplid_Birthdate = ''
       Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Data de Nascimento - Informação Obrigatória. Não existe a informação para o empregado.'
       show $Message
       Let $Emplid_Birthdate = '        '
     End-If
  Break
  When-Other
     Let $Emplid_Birthdate = '        '
  End-Evaluate

  !Evaluate FGTS option date
  Evaluate $SEFIP_Cat
  When = '01'
  When = '03'
  When = '04'
  When = '05'
  When = '06'
  When = '07'
     If $FGTS_Date_DTU = ''
       Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' - Rec #30 - Data de Opção - Informação Obrigatória. Não existe a informação para o empregado.'
       show $Message
     End-If
     Let $FGTS_Date_DTU = $Admission_Dt_DTU
  Break
  When-Other
     Let $FGTS_Date_DTU = '        '
  End-Evaluate

  If $Serie_CTPS = ''
     Let $Serie_CTPS = ' '
  End-If
  If $National_PIS_PASEP = ''
       Let $National_PIS_PASEP = ' '
  End-If

  Let $Insured_Disc = Edit($Insured_Disc, '000000000000000')
  Evaluate $RC_Comp_Month
  When = '12'
    Let $13_Compensat = Edit($13_Compensat, '000000000000000')
    Let $Soc_Prov_13 = Edit($Soc_Prov_13, '000000000000000')
    If $Soc_Prov_13 = '000000000000000'
      Let $GPS_Soc_Prov = '000000000000000'
    End-If
  Break
  When = '13'
    Let $Soc_Prov_13  = Edit($Soc_Prov_13, '000000000000000')
    Let $INS_Desc_Val = '000000000000000'
    Let $13_Compensat = '000000000000000'
    Let $GPS_Soc_Prov = '000000000000000'
    Let $Rem_Prev_Val = '000000000000000'
  Break
  When-Other
    Let $13_Compensat = Edit($13_Compensat, '000000000000000')
    If $EmplStatus <> 'A'
      Let $Soc_Prov_13  = Edit($Soc_Prov_13, '000000000000000')
    Else
      Let $Soc_Prov_13  = '000000000000000'
    End-If
    Let $GPS_Soc_Prov = '000000000000000'
  Break
  End-Evaluate

  #debug show '$MovementCode:   ' $MovementCode

  Evaluate $MovementCode
  When = 'O1'
  When = 'O2'
  When = 'R'
  When = 'Z2'
  When = 'Z3'
  When = 'Z4'
  Break
  When-Other
     Let $Rem_Prev_Val = '000000000000000'
  End-Evaluate

  Let $SefipRskValues = '01 02 03 04 05 06 07 08'
  Find $SefipRskLvl in $SefipRskValues 0 #strposition
  If #strposition = -1
     Let $SefipRskLvl = '  '
  End-If

  !As field lenght is 8 and record cannot be changed, remove - chars, add the character when reading the field.
  Do Str-Delete-Chars($Admission_Dt_DTU_P, '-',$Admission_Dt_DTU_P)
  Do Str-Delete-Chars($FGTS_Date_DTU, '-',$FGTS_Date_DTU)

  #debug show '$Emplid              ' $Emplid
  #debug show '$Estabid_Comp_Ins1   ' $Estabid_Comp_Ins1
  #debug show '$Inscr_Reg30         ' $Inscr_Reg30
  #debug show '$STaker_Ins_Type     ' $STaker_Ins_Type
  #debug show '$STaker_Inscr        ' $STaker_Inscr
  #debug show '$National_PIS_PASEP  ' $National_PIS_PASEP
  #debug show '$Admission_Dt_DTU_P  ' $Admission_Dt_DTU_P
  #debug show '$Admission_Dt_DTU    ' $Admission_Dt_DTU
  #debug show '$SEFIP_Cat           ' $SEFIP_Cat
  #debug show '$Emplid_Name30       ' $Emplid_Name30
  #debug show '$National_CTPS       ' $National_CTPS
  #debug show '$Serie_CTPS          ' $Serie_CTPS
  #debug show '$FGTS_Date_DTU       ' $FGTS_Date_DTU
  #debug show '$Emplid_Birthdate    ' $Emplid_Birthdate
  #debug show '$CBO_CD              ' $CBO_CD
  #debug show '$INS_Desc_Val        ' $INS_Desc_Val
  #debug show '$13_Compensat        ' $13_Compensat
  #debug show '$SefipRskLvl         ' $SefipRskLvl
  #debug show '$Insured_Disc        ' $Insured_Disc
  #debug show '$Rem_Prev_Val        ' $Rem_Prev_Val
  #debug show '$Soc_Prov_13         ' $Soc_Prov_13
  #debug show '$GPS_Soc_Prov        ' $GPS_Soc_Prov
  #debug show '$EmplStatus          ' $EmplStatus
  #debug show '$CurrentEstabId      ' $CurrentEstabId

    #debug show '-------------------------------- Insert PS_GPBR_R_SEFIP ---'
Begin-SQL
INSERT INTO PS_GPBR_R_SEFIP
(PROCESS_INSTANCE,
EMPLID,
ESTABID,
GPBR_FIELD_TYPE,
GPBR_INSCR,
GPBR_TAKE_INS_TYPE,
GPBR_STAKER_INSCR,
GPBR_REG_NUMBER,
GPBR_ADMISSION_DT,
GPBR_SEFIP_CAT,
APPLICANT_NAME,
GPBR_CTPS_ID,
GPBR_CTPS_SERIE,
GPBR_FGTS_DATE,
GPBR_BIRTH_DT,
GPBR_CBO_CODE,
GPBR_INS_DISC_VAL,
GPBR_13SAL_COMPENS,
GPBR_MULTI_VINC,
GPBR_INSURED_DSC,
GPBR_PROVIDENCE,
GPBR_PROV_13,
GPBR_GPS_PROV,
EMPL_STATUS,
GPBR_EMP_PERC_CONT)
VALUES
(#prcs_process_instance
,$Emplid
,$CurrentEstabId
,$Estabid_Comp_Ins1
,$Inscr_Reg30
,$STaker_Ins_Type
,$STaker_Inscr
,$National_PIS_PASEP
,$Admission_Dt_DTU_P
,$SEFIP_Cat
,$Emplid_Name30
,$National_CTPS
,$Serie_CTPS
,$FGTS_Date_DTU
,$Emplid_Birthdate
,$CBO_CD
,$INS_Desc_Val
,$13_Compensat
,$SefipRskLvl
,$Insured_Disc
,$Rem_Prev_Val
,$Soc_Prov_13
,$GPS_Soc_Prov
,$EmplStatus
,#Employee-ST-Percentage)
End-SQL
End-Procedure Prepare-Reg30

!*****************************
Begin-Procedure Include-Autonomous
#debug show 'Begin-Procedure Include-Autonomous **'
#debug show '$StrStackerIns ' $StrStackerIns
!Begin-Document
! Procedure   : Include-Autonomous
! Description : Include Autonomous in temporary table to be processed along with employees.
!
! Input Vars  :
!               $EstabId_CNPJ_CEI       Establishment Id CNPJ/CEI
!               $RC_Gather_Cd
!
! Output Vars :
!               $STaker_Ins_Type        Service Taker Inscription Type
!               $STaker_Inscr           Service Taker Inscription ID
!               $National_PIS_PASEP     National ID PIS/PASEP/CI
!               $SEFIP_Cat              SEFIP Category
!               $Emplid_Name            Employee Name
!               $CBO_CD                 CBO Code
!               $INS_Desc_Val           Salary without 13th Salary
!               $SefipRskLvl            Sefip Risk Level / Occurrence
!               $Insured_Disc           Discounted Value of the Insured
!               $13_Compensat           13th Salary Paid
!               $Rem_Prev_Val           Previous Month Payment
!               $Soc_Prov_13            Calculate Basis for 13th Salary for INSS
!               $GPS_Soc_Prov           Calculate Basis for 13th Salary regarding GPS competence 13
!
!End-Document
!*****************************
Let #AutoTotalRecs = 0
Let #AutoRecsInc   = 0

show 'Processing Autonomous for CNPJ: ' $EstabId_CNPJ_CEI
Let $AutoNotIncMsg = 'Autonomous NOT included - '
Begin-Select
SA.GPBR_TAKE_INS_TYPE
SA.GPBR_STAKER_INSCR
SA.GPBR_REG_NUMBER
SA.GPBR_SEFIP_CAT
SA.GPBR_PERS_NAME
SA.GPBR_CBO_CODE
SA.GPBR_INS_DISC_VAL
SA.GPBR_MULTI_VINC
SA.GPBR_INSURED_DSC
SA.GPBR_REFERENCE
!SA.GPBR_BATCH_CODE


  Let #AutoTotalRecs = #AutoTotalRecs + 1
  Let $IncludeRow    = 'Y'

  Let $STaker_Ins_Type    = &SA.GPBR_TAKE_INS_TYPE
  Let $STaker_Inscr       = &SA.GPBR_STAKER_INSCR
  Let $National_PIS_PASEP = &SA.GPBR_REG_NUMBER
  Let $SEFIP_Cat          = &SA.GPBR_SEFIP_CAT
  Let $Emplid_Name        = &SA.GPBR_PERS_NAME
  Let $CBO_CD             = &SA.GPBR_CBO_CODE
  Let $INS_Desc_Val       = &SA.GPBR_INS_DISC_VAL
  Let $SefipRskLvl        = &SA.GPBR_MULTI_VINC
  Let $Insured_Disc       = &SA.GPBR_INSURED_DSC
  Let $Reference          = &SA.GPBR_REFERENCE
  Let $13_Compensat       = '000000000000000'
  Let $Rem_Prev_Val       = '000000000000000'
  Let $Soc_Prov_13        = '000000000000000'
  Let $GPS_Soc_Prov       = '000000000000000'
  Let $Emplid             = ' '
  Let $EmplStatus         = 'A'
  Let #Employee-ST-Percentage = 100

  If Length(Rtrim($National_PIS_PASEP, ' ')) = 0
     show $AutoNotIncMsg 'Invalid CI/PIS/PASEP: ' $National_PIS_PASEP ' Name: ' $Emplid_Name ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-If

  If Length(Rtrim($Emplid_Name, ' ')) = 0
     show $AutoNotIncMsg 'Invalid Name: ' $Emplid_Name ' CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-If

  Evaluate $SEFIP_Cat
  When = '13'
  When = '14'
  When = '15'
  When = '16'
  When = '17'
  When = '18'
  Break
  When-Other
     show $AutoNotIncMsg 'Invalid SEFIP Category: ' $SEFIP_Cat ' CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-Evaluate

  If Length(Rtrim($CBO_CD, ' ')) = 0
     show $AutoNotIncMsg 'CBO Code: ' $CBO_CD ' is mandatory CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-If

  If Substr($CBO_CD,1,1) <> '0'
     show $AutoNotIncMsg 'In CBO Code: ' $CBO_CD ' first character must be 0, CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-If

  Let $strIncludeNum = '^1234567890.'
  Do Str-Delete-Chars($INS_Desc_Val, $strIncludeNum, $INS_Desc_Val)
  Do Str-Delete-Chars($Insured_Disc, $strIncludeNum, $Insured_Disc)

  Let #StringNumber = Round(To_Number($INS_Desc_Val),2) * 100
  Let $INS_Desc_Val = Edit(#StringNumber, '000000000000000')
  Let #StringNumber = Round(To_Number($Insured_Disc),2) * 100
  Let $Insured_Disc = Edit(#StringNumber, '000000000000000')

  If $INS_Desc_Val = '000000000000000'
     show $AutoNotIncMsg 'INSS Remuneration can not be zero  CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
     Let $IncludeRow = 'N'
  End-If

  Evaluate $SefipRskLvl
  When = '05'
  When = '08'
    If $Insured_Disc = '000000000000000'
       show 'INSS Discount can not be zero for Ocurrence: ' $SefipRskLvl ' CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
    End-If
  Break
  When-Other
    If $Insured_Disc <> '000000000000000'
       show 'INSS Discount can not be informed for Ocurrence: ' $SefipRskLvl ' CI/PIS/PASEP: ' $National_PIS_PASEP ' Reference: ' $Reference
    End-If
  End-Evaluate

  Evaluate $RC_Gather_Cd
  When = '115'
     If $STaker_Inscr = $EstabId_CNPJ_CEI Or Length(Rtrim($STaker_Inscr, ' ')) = 0
       Let $STaker_Ins_Type = ' '
       Let $STaker_Inscr    = ' '
     Else
       show $AutoNotIncMsg 'Company Inscription must be the same than Service Taker Inscription for Gathering Code ' $RC_Gather_Cd
       Let $IncludeRow = 'N'
     End-If
  Break
  When = '150'
  When = '155'
     If $RC_IncludeAdmin = 'Y'
       If $STaker_Ins_Type  = ' '
         Let $STaker_Ins_Type = '1'
         Let $STaker_Inscr    = $EstabId_CNPJ_CEI
       End-If
     Else
       If $STaker_Ins_Type  = ' ' Or $STaker_Inscr = $EstabId_CNPJ_CEI
         show $AutoNotIncMsg 'Company Inscription can not be the same than Service Taker Inscription for Gathering Code ' $RC_Gather_Cd
         Let $IncludeRow = 'N'
       End-If
     End-If
  Break
  End-Evaluate

  If $IncludeRow = 'Y'
    Let #AutoRecsInc = #AutoRecsInc + 1
    Do Prepare-Reg30
  End-If

 FROM PS_GPBR_SEFIP_AUTO SA
WHERE SA.GPBR_END_YEAR     = $RC_Comp_Year
  AND SA.GPBR_START_MONTH  = $RC_Comp_Month
  AND SA.GPBR_INSCR        = $EstabId_CNPJ_CEI
End-Select
If #AutoTotalRecs = 0
  show 'No Autonomous found for CNPJ: ' $EstabId_CNPJ_CEI
Else
  Let $AutoTotalRecs = Edit(#AutoTotalRecs,'999999')
  Let $AutoRecsInc   = Edit(#AutoRecsInc,'999999')
  show 'Autonomous Processed: ' $AutoTotalRecs
  show 'Autonomous Included:  ' $AutoRecsInc
End-If
End-Procedure Include-Autonomous

!*****************************
Begin-Procedure Write-Reg30
#debug show '      Begin-Procedure Write-Reg30 **************************************************'
#debug show '         $CurrentEstabId ' $CurrentEstabId
#debug show '         $StrStackerIns ' $StrStackerIns
!*****************************
move '30' to $Reg30
move ' '  to $Blank
Begin-Select
R.EMPLID
R.GPBR_FIELD_TYPE
R.GPBR_INSCR
R.GPBR_TAKE_INS_TYPE
R.GPBR_STAKER_INSCR
R.GPBR_REG_NUMBER
R.GPBR_ADMISSION_DT
R.GPBR_SEFIP_CAT
R.APPLICANT_NAME
R.GPBR_CTPS_ID
R.GPBR_CTPS_SERIE
R.GPBR_FGTS_DATE
R.GPBR_BIRTH_DT
R.GPBR_CBO_CODE
R.GPBR_INS_DISC_VAL
R.GPBR_13SAL_COMPENS
R.GPBR_MULTI_VINC
R.GPBR_INSURED_DSC
R.GPBR_PROVIDENCE
R.GPBR_PROV_13
R.GPBR_GPS_PROV

  Let $R30Emplid            = &R.EMPLID
  Let $Estabid_Comp_Ins1    = &R.GPBR_FIELD_TYPE
  Let $Inscr_Reg30          = &R.GPBR_INSCR
  Let $STaker_Ins_Type      = &R.GPBR_TAKE_INS_TYPE
  Let $STaker_Inscr         = &R.GPBR_STAKER_INSCR
  Let $National_PIS_PASEP   = &R.GPBR_REG_NUMBER
  Let $Admission_Dt_DTU     = &R.GPBR_ADMISSION_DT
  Let $Admission_Dt_DTU     = Substr($Admission_Dt_DTU,1,4) || '-' || Substr($Admission_Dt_DTU,5,2) ||  '-' || Substr($Admission_Dt_DTU,7,2)
  Let $Admission_Dt_FmtBRA  = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)
  Let $SEFIP_Cat            = &R.GPBR_SEFIP_CAT

  #Debug show '         $R30Emplid            :' $R30Emplid
  #Debug show '         &R.GPBR_ADMISSION_DT  :' &R.GPBR_ADMISSION_DT
  #Debug show '         $Admission_Dt_DTU     :' $Admission_Dt_DTU
  #Debug show '         $Admission_Dt_FmtBRA  :' $Admission_Dt_FmtBRA

  Evaluate $SEFIP_Cat
  When = '06'
  When = '13'
  When = '14'
  When = '15'
  When = '16'
  When = '17'
  When = '18'
  When = '22'
  When = '23'
  When = '24'
  When = '25'
    Let $Emplid_Imp = ' '
  Break
  When-Other
    Let $Emplid_Imp = &R.EMPLID
    DO FILL_LEADING ( $Emplid_Imp , '0', 11, 'L', $Emplid_Imp)
  End-Evaluate

  Let $Emplid_Name          = &R.APPLICANT_NAME
  Let $National_CTPS        = &R.GPBR_CTPS_ID
  Let $Serie_CTPS           = &R.GPBR_CTPS_SERIE
  Let $FGTS_Date_DTU        = &R.GPBR_FGTS_DATE
  Let $FGTS_Date_DTU        = Substr($FGTS_Date_DTU ,1,4) ||  '-' ||Substr($FGTS_Date_DTU ,5,2) || '-' || Substr($FGTS_Date_DTU ,7,2)
  Let $FGTS_Date_FmtBRA     = Substr($FGTS_Date_DTU ,9,2) || Substr($FGTS_Date_DTU ,6,2) || Substr($FGTS_Date_DTU ,1,4)
  Let $Emplid_Birthdate     = &R.GPBR_BIRTH_DT
  Let $CBO_CD               = &R.GPBR_CBO_CODE
  Let $INS_Desc_Val         = &R.GPBR_INS_DISC_VAL
  Let $SefipRskLvl          = &R.GPBR_MULTI_VINC
  Let $13_Compensat         = &R.GPBR_13SAL_COMPENS
  Let $Insured_Disc         = &R.GPBR_INSURED_DSC
  Let $Rem_Prev_Val         = &R.GPBR_PROVIDENCE
  Let $Soc_Prov_13          = &R.GPBR_PROV_13
  Let $GPS_Soc_Prov         = &R.GPBR_GPS_PROV

  If $RC_Comp_Month = '13'
    Let $INS_Desc_Val = '000000000000000'
  Else
    If $INS_Desc_Val = '000000000000000' AND ($13_Compensat <> '000000000000000' OR $Rem_Prev_Val <> '000000000000000' OR $Soc_Prov_13 <> '000000000000000')
       Let $INS_Desc_Val = '000000000000001'
    End-If
  End-If

  Do OnlyNumbers($Serie_CTPS, $New_Serie_CTPS, $Change)
  If $Change = 'Y'
    DO FILL_LEADING ( $New_Serie_CTPS , '0', 5, 'L', $New_Serie_CTPS)
    Show 'Empregado ' $Emplid_Imp ' CTPS Series contém letras:' $Serie_CTPS ' somente números são permitidos, novo valor:' $New_Serie_CTPS
    Let $Serie_CTPS = $New_Serie_CTPS
  End-if

  Let $WriteReg30 = 'True'

  Write 1 From $Reg30:2                 -
               $Estabid_Comp_Ins1:1     -
               $Inscr_Reg30:14          -
               $STaker_Ins_Type:1       -
               $STaker_Inscr:14         -
               $National_PIS_PASEP:11   -
               $Admission_Dt_FmtBRA:8   -
               $SEFIP_Cat:2             -
               $Emplid_Name:70          -
               $Emplid_Imp:11           -
               $National_CTPS:7         -
               $Serie_CTPS:5            -
               $FGTS_Date_FmtBRA:8      -
               $Emplid_Birthdate:8      -
               $CBO_CD:5                -
               $INS_Desc_Val:15         -
               $13_Compensat:15         -
               $Blank:2                 -
               $SefipRskLvl:2           -
               $Insured_Disc:15         -
               $Rem_Prev_Val:15         -
               $Soc_Prov_13:15          -
               $GPS_Soc_Prov:15         -
               $Blank:98                -
               '*':1

   If $RC_Comp_Month <> '13'
     #debug show '         ** Process-Main-32 **'  $R30Emplid
     Do Process-Main-32
   End-If

FROM PS_GPBR_R_SEFIP R
WHERE R.GPBR_STAKER_INSCR = $StrStackerIns
AND R.ESTABID = $CurrentEstabId
AND PROCESS_INSTANCE = #prcs_process_instance
ORDER BY R.GPBR_FIELD_TYPE, R.GPBR_INSCR, R.GPBR_TAKE_INS_TYPE, R.GPBR_STAKER_INSCR, R.GPBR_REG_NUMBER, R.GPBR_ADMISSION_DT, R.GPBR_SEFIP_CAT
End-Select

End-Procedure Write-Reg30

!*****************************
Begin-Procedure Process-Main-32
#debug show 'Begin-Procedure Process-Main-32 **'
#debug show '    $R30Emplid     ' $R30Emplid
#debug show '    $StrStackerIns ' $StrStackerIns
#debug show '    $Admission_Dt_DTU : ' $Admission_Dt_DTU
#debug show '    $Sefip Category: ' $SEFIP_Cat
!*****************************

Evaluate $RC_Gather_Cd
When = '115'
When = '150'
When = '155'
When = '660'

  Let $ValidCategories = '01 02 03 04 05 07 11 12 19 20 21 26'
  Find $SEFIP_Cat in $ValidCategories 0 #Position

  #debug show '#Position     ' #Position

  If #Position > -1

    Let $Emplid_Imp = $R30Emplid

     DO FILL_LEADING( $Emplid_Imp , '0' , 11 , 'L', $Emplid_11)


#debug show ' Additional_pymt_flag: ' $Additional_pymt_flag

    if $Additional_pymt_flag = 'N'
     If $RC_Gather_Cd = '115'
        Do Search-Empl-Term-SB
     Else
        Do Search-Empl-Term
     End-If
     End-If



      !just for 660 code swap begin and end date according to current month reported
      !  revert values to avoid impact in other procedures.
      if $RC_Gather_Cd = '660'
          !Save original values
          Let $tmp_bgn_dt = $BgnDt
          Let $tmp_end_dt = $EndDt

          Let $tmpDTU_bgn_dt = $BgnDtDTU
          Let $tmpDTU_end_dt = $EndDtDTU

          !Set new values
          Do Convert-To-DTU-Date($M660BgnDt, $BgnDtDTU)
          Do Convert-To-DTU-Date($M660EndDt, $EndDtDTU)

          Let $BgnDt = $M660BgnDt
          Let $EndDt = $M660EndDt
      end-if

      If $RC_Gather_Cd = '115'
        !'N' Value means absence not voided
        If rtrim($GPBR_ACTION_ABS, ' ') = 'N'
            Do Search-Empl-Abs
        End-If
      Else
        Do Search-Empl-Abs
      End-If

      if $RC_Gather_Cd = '660'
          ! Revert Values to avoid impact in other procedure
          Let $BgnDt = $tmp_bgn_dt
          Let $EndDt = $tmp_end_dt

          Let $BgnDtDTU = $tmpDTU_bgn_dt
          Let $EndDtDTU = $tmpDTU_end_dt
      else
          Do Get-Complementary-Pmt
      end-if
  End-If
When = '650'
  Do Get-Complementary-Pmt
End-Evaluate
End-Procedure Process-Main-32

!*****************************
Begin-Procedure Search-Empl-Term
#debug show 'Begin-Procedure Search-Empl-Term **'
#debug show '    $Emplid_Imp       : ' $Emplid_Imp
#debug show '    $CurrentEstabId   : ' $CurrentEstabId
#debug show '    $StrStackerIns    : ' $StrStackerIns
#debug show '    $BgnDt            : ' $BgnDt
#debug show '    $EndDt            : ' $EndDt
#debug show '    $Admission_Dt_DTU : ' $Admission_Dt_DTU
!*****************************
Let $Trans_Dt      = ''
Let $Job_Action    = ''
Let $Job_ActRsn    = ''
Let $Job_T_Company = ''

Evaluate $RC_Gather_Cd
When = '155'
  Let $SETCondition = 'AND PID.ESTAB_ID_BRA       = ' || '''' || $StrStackerIns || ''''
Break
When-Other
  Let $SETCondition = 'AND PID.ESTABID       = ' || '''' || $CurrentEstabId || ''''
End-Evaluate

#debug show '    $SETCondition     : ' $SETCondition
!For terminations need to consider employees terminated this month (eff dt less or equal than first day of the next month)
Do DTU-Add-Days($EndDtDTU, 1, $NextMonthDTU)
Do Convert-From-DTU-Date($NextMonthDTU, $NextMonthDate)

Do DTU-Add-Days($BgnDtDTU, 1, $BgnDtNextDayDTU)
Do Convert-From-DTU-Date($BgnDtNextDayDTU, $BgnDtNextDay)

!For multiple employments need to restrict terminations beyond admission date.
Do Convert-From-DTU-Date($Admission_Dt_DTU, $Admission_Date)

#debug show '    $BgnDtNextDay     : ' $BgnDtNextDay
#debug show '    $NextMonthDate    : ' $NextMonthDate
#debug show '    $Admission_Date   : ' $Admission_Date

Begin-Select
JOB4.EMPLID         &JOB4.EMPLID
JOB4.EMPL_RCD       &JOB4.EMPL_RCD
JOB4.ESTABID        &JOB4.ESTABID
JOB4.EFFDT          &JOB4.EFFDT
JOB4.COMPANY        &JOB4.COMPANY
JOB4.ACTION         &JOB4.ACTION
JOB4.ACTION_REASON  &JOB4.ACTION_REASON

  Let $Emplid        = &JOB4.EMPLID
  Let #EmplRcd       = &JOB4.EMPL_RCD
  Let $Trans_Dt      = &JOB4.EFFDT
  Let $Job_Action    = &JOB4.ACTION
  Let $Job_ActRsn    = &JOB4.ACTION_REASON
  Let $Job_T_Company = &JOB4.COMPANY

  Let $LastDate      = $Trans_Dt
  Let $LastAction    = &JOB4.ACTION
  Do Get-Admission-Date

  Do Get-Legal-Movement

  Do Convert-To-DTU-Date($Trans_Dt, $DTU_Trans_dt)

  If $DTU_Trans_dt >= $BgnDtDTU  And $DTU_Trans_dt <= $EndDtDTU

  #debug show '**** $Trans_Dt in current report range **'

  If Length(Ltrim($Trans_CD, ' ')) = 0
    Let $Message = &JOB4.EMPLID || ' / ' || To_Char(&JOB4.EMPL_RCD) || ' Estabelecimento: ' || &JOB4.ESTABID
    Let $Message = $Message || ' - Não existe a informação Ação: ' || &JOB4.ACTION || ' Motivo: ' || &JOB4.ACTION_REASON || ' em Códigos de Movimentação Legal.'
    show $Message
  Else
      !Print only when legal movement code found.
      Evaluate $Job_Action
      When = 'TER'
         !Substract one day to Effective date to report the real termination date.
         Do Convert-To-DTU-date($Trans_Dt, $Trans_Dt_DTU)
         Do DTU-subtract-days($Trans_Dt_DTU, 1, $Trans_Dt_DTU)
         Do Convert-From-DTU-date ($Trans_Dt_DTU, $Trans_Dt)
         Do Write-Reg32
      Break
      When-Other
         !For other actions than Termination, eff date has to be less than EndDtTerm (first day of the next month)
         Do Convert-To-DTU-date($Trans_Dt, $Trans_Dt_DTU)
         Do Convert-To-DTU-date($EndDt, $EndDtTerm_DTU)
         Do DTU-add-days($EndDtTerm_DTU, 1, $EndDtTerm_DTU)
         Do dtu-diff-days($Trans_Dt_DTU, $EndDtTerm_DTU, #diffdays)
         If #diffdays > 0
            Do Write-Reg32
         End-If
      End-Evaluate
  End-If
  End-if

FROM PS_JOB  JOB4
WHERE JOB4.EMPLID = $Emplid_Imp
AND JOB4.ESTABID  IN (SELECT PID.ESTABID
                     FROM PS_ESTAB_ID_BRA PID
                     WHERE PID.COUNTRY          = 'BRA'
                     AND PID.ESTAB_ID_TYPE_BRA IN ('CEI','CNPJ')
                     [$SETCondition]
                     AND PID.ESTABID            = (SELECT ESTABID
                                                   FROM PS_ESTAB_TBL
                                                   WHERE ESTABID = PID.ESTABID
                                                   AND EFFDT = PID.EFFDT
                                                   AND EFF_STATUS = 'A')
                     AND PID.EFFDT              = (SELECT MAX(EFFDT)
                                                   FROM PS_ESTAB_ID_BRA
                                                   WHERE ESTABID         = PID.ESTABID
                                                   AND COUNTRY           = PID.COUNTRY
                                                   AND ESTAB_ID_TYPE_BRA = PID.ESTAB_ID_TYPE_BRA
                                                   AND EFFDT            <= $EndDt
                                                   )
                    )
!AND JOB4.ACTION  IN ('TER','COM','LOF','XFR', 'HIR', 'REH', 'POI')
AND JOB4.ACTION  IN ([$SQL_TER_COM_LOF_XFR_HIR_REH_POI])
AND JOB4.EMPL_RCD = (SELECT MAX(JOB4A.EMPL_RCD)
                       FROM PS_JOB JOB4A
                      WHERE JOB4A.EMPLID = JOB4.EMPLID
                        AND JOB4A.EFFDT  = JOB4.EFFDT
                        AND JOB4A.ACTION = JOB4.ACTION)
!AND JOB4.EFFDT    BETWEEN $BgnDtNextDay AND $NextMonthDate
AND JOB4.EFFDT    >= $Admission_Date
AND JOB4.EFFSEQ   = (SELECT MAX(JOB4C.EFFSEQ)
                       FROM PS_JOB JOB4C
                      WHERE JOB4C.EMPLID   = JOB4.EMPLID
                        AND JOB4C.EMPL_RCD = JOB4.EMPL_RCD
                        AND JOB4C.EFFDT    = JOB4.EFFDT
                        AND JOB4C.ESTABID  = JOB4.ESTABID)
AND EXISTS (SELECT 'X'
            FROM PS_GP_SEG_GUIDE_WA WA,
            PS_GP_PYE_SEG_STAT ST
            WHERE WA.EMPLID = JOB4.EMPLID
            AND WA.EMPL_RCD = JOB4.EMPL_RCD
            AND WA.ESTABID = JOB4.ESTABID
            AND ST.EMPLID = WA.EMPLID
            AND ST.CAL_RUN_ID = WA.CAL_RUN_ID
            AND ST.EMPL_RCD = WA.EMPL_RCD
            AND ST.GP_PAYGROUP = WA.GP_PAYGROUP
            AND ST.CAL_ID = WA.CAL_ID
            AND ST.ORIG_CAL_RUN_ID = WA.ORIG_CAL_RUN_ID
            AND ST.RSLT_REV_NUM = 1
            AND ST.RSLT_VER_NUM = (SELECT MAX(P1.RSLT_VER_NUM)
                                   FROM PS_GP_PYE_SEG_STAT P1
                                   WHERE P1.EMPLID = ST.EMPLID
                                   AND P1.CAL_RUN_ID = ST.CAL_RUN_ID
                                   AND P1.EMPL_RCD = ST.EMPL_RCD
                                   AND P1.GP_PAYGROUP = ST.GP_PAYGROUP
                                   AND P1.CAL_ID = ST.CAL_ID
                                   AND P1.RSLT_SEG_NUM = ST.RSLT_SEG_NUM)
             AND ST.SEG_END_DT >= $BgnDt
             AND ST.SEG_END_DT <= $EndDt
            )
ORDER BY JOB4.EFFDT
End-Select
End-Procedure Search-Empl-Term

!*****************************
Begin-Procedure Search-Empl-Term-SB
#debug show 'Begin-Procedure Search-Empl-Term-SB **'
#debug show '    $Emplid_Imp       : ' $Emplid_Imp
#debug show '    $CurrentEstabId   : ' $CurrentEstabId
#debug show '    $StrStackerIns    : ' $StrStackerIns
#debug show '    $BgnDt            : ' $BgnDt
#debug show '    $EndDt            : ' $EndDt
#debug show '    $Admission_Dt_DTU : ' $Admission_Dt_DTU
!*****************************
Let $Trans_Dt      = ''
Let $Job_Action    = ''
Let $Job_ActRsn    = ''
Let $Job_T_Company = ''


!For terminations need to consider employees terminated this month (eff dt less or equal than first day of the next month)
Do DTU-Add-Days($EndDtDTU, 1, $NextMonthDTU)
Do Convert-From-DTU-Date($NextMonthDTU, $NextMonthDate)

Do DTU-Add-Days($BgnDtDTU, 1, $BgnDtNextDayDTU)
Do Convert-From-DTU-Date($BgnDtNextDayDTU, $BgnDtNextDay)

!For multiple employments need to restrict terminations beyond admission date.
Do Convert-From-DTU-Date($Admission_Dt_DTU, $Admission_Date)

#debug show '    $BgnDtNextDay     : ' $BgnDtNextDay
#debug show '    $NextMonthDate    : ' $NextMonthDate
#debug show '    $Admission_Date   : ' $Admission_Date

#debug show '    $R30Emplid       : ' $R30Emplid
#debug show '    #R30Empl_rcd     : ' #R30Empl_rcd
#debug show '    $WRK_Effdt        : ' $WRK_Effdt
#debug show '    $WRK_ACTION       : ' $WRK_ACTION
#debug show '    $WRK_ACTION_REASON: ' $WRK_ACTION_REASON
#debug show '    $WRK_COMPANY      : ' $WRK_COMPANY

  Let $Emplid        = $R30Emplid
  Let #EmplRcd       = #R30Empl_rcd
  Let $Trans_Dt      = $WRK_Effdt
  Let $Job_Action    = $WRK_ACTION
  Let $Job_ActRsn    = $WRK_ACTION_REASON
  Let $Job_T_Company = $WRK_COMPANY

  Let $LastDate      = $Trans_Dt
  Let $LastAction    = &JOB4.ACTION

  Do Get-Legal-Movement

  If $Trans_CD <> ' '
      Do Get-Admission-Date

      Do Convert-To-DTU-Date($Trans_Dt, $DTU_Trans_dt)

      If $DTU_Trans_dt >= $BgnDtDTU  And $DTU_Trans_dt <= $EndDtDTU

      #debug show '**** $Trans_Dt in current report range **'

      If Length(Ltrim($Trans_CD, ' ')) = 0
        Let $Message = &JOB4.EMPLID || ' / ' || To_Char(&JOB4.EMPL_RCD) || ' Estabelecimento: ' || &JOB4.ESTABID
        Let $Message = $Message || ' - Não existe a informação Ação: ' || &JOB4.ACTION || ' Motivo: ' || &JOB4.ACTION_REASON || ' em Códigos de Movimentação Legal.'
        show $Message
      Else
          !Print only when legal movement code found.
          Evaluate $Job_Action
          When = 'TER'
             !Substract one day to Effective date to report the real termination date.
             Do Convert-To-DTU-date($Trans_Dt, $Trans_Dt_DTU)
             Do DTU-subtract-days($Trans_Dt_DTU, 1, $Trans_Dt_DTU)
             Do Convert-From-DTU-date ($Trans_Dt_DTU, $Trans_Dt)
             Do Write-Reg32
          Break
          When-Other
             !For other actions than Termination, eff date has to be less than EndDtTerm (first day of the next month)
             Do Convert-To-DTU-date($Trans_Dt, $Trans_Dt_DTU)
             Do Convert-To-DTU-date($EndDt, $EndDtTerm_DTU)
             Do DTU-add-days($EndDtTerm_DTU, 1, $EndDtTerm_DTU)
             Do dtu-diff-days($Trans_Dt_DTU, $EndDtTerm_DTU, #diffdays)
             If #diffdays > 0
                Do Write-Reg32
             End-If
          End-Evaluate
      End-If
      End-if
  End-if
End-Procedure Search-Empl-Term-SB


!*****************************
Begin-Procedure Get-Legal-Movement
#debug show 'Begin-Procedure Get-Legal-Movement **'
#debug show '$Job_Action '  $Job_Action
#debug show '$Job_ActRsn '  $Job_ActRsn
#debug show '$EndDt '  $EndDt
!*****************************
Let  $Trans_CD = ' '
Begin-Select
LMD.SEFIP_LEG_MOV_BRA

  Let $Trans_CD      = &LMD.SEFIP_LEG_MOV_BRA

FROM PS_LEG_MOV_DET_BRA LMD
WHERE LMD.PROCESS_TYPE_BRA = '10'
AND LMD.ACTION        = $Job_Action
AND LMD.ACTION_REASON = $Job_ActRsn
AND LMD.EFFDT = (SELECT MAX(EFFDT)
                   FROM PS_LEG_MOV_DET_BRA
                  WHERE PROCESS_TYPE_BRA = LMD.PROCESS_TYPE_BRA
                    AND EFFDT           <= $EndDt)
End-Select
#debug show '$Trans_CD '  $Trans_CD
End-Procedure Get-Legal-Movement

!*****************************
Begin-Procedure Get-Complementary-Pmt
#debug show 'Begin-Procedure Get-Complementary-Pmt **'
#debug show '$Emplid_Imp: ' $Emplid_Imp
#debug show '$BgnDt:      ' $BgnDt
#debug show '$EndDt:      ' $EndDt
#debug show '$Admission_Dt_DTU: ' $Admission_Dt_DTU
#debug show '$HireDt          : ' $HireDt
!*****************************

if $RC_Gather_Cd = '115'
    If $Additional_pymt_flag = 'Y'
        Let $Trans_Dt = $WRK_TERMINATION_DT
        Let $Trans_CD = 'V3'
        Do Convert-To-DTU-Date($Trans_Dt, $Trans_Dt1)
        Do Convert-From-DTU-Date($Trans_Dt1, $Trans_Dt)
        Do Write-Reg32
    End-if
Else
!Do Convert-From-DTU-Date($Admission_Dt_DTU,$Admission_Dt)
Let $Admission_Dt = $HireDt

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP1')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP1')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS1')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'SWA')

Begin-Select
SWA.EMPLID
JCP.EFFDT

  Let $Trans_Dt = &JCP.EFFDT
  Let $Trans_CD = 'V3'
  Do Convert-To-DTU-Date($Trans_Dt, $Trans_Dt1)
  Do DTU-Add-Days($Trans_Dt1, -1, $Trans_Dt1)
  Do Convert-From-DTU-Date($Trans_Dt1, $Trans_Dt)
  If $RC_Gather_Cd = '650'
    Do dtu-diff-days($Trans_Dt1, $BgnDtDTU, #diffdays)
    show '#diffdays '
    show #diffdays
    If #diffdays > 0
       Do Write-Reg32
    End-If
  Else
    Do Write-Reg32
  End-If

FROM PS_GPBR_SEFIP_WA  SWA
   , PS_GP_RSLT_SEG_VW RS1
   , PS_GP_RSLT_PIN    PIN3
   , PS_JOB            JCP
[$GPCalTbl]
WHERE SWA.EMPLID            = $Emplid_Imp
  AND SWA.GPBR_GATHERING_CD = 'NA'
  AND SWA.ORIG_CAL_RUN_ID   = SWA.CAL_RUN_ID
  AND RS1.EMPLID       = SWA.EMPLID
  AND RS1.EMPL_RCD     = SWA.EMPL_RCD
  AND RS1.CAL_RUN_ID   = SWA.CAL_RUN_ID
  AND RS1.GP_PAYGROUP  = SWA.GP_PAYGROUP
  AND RS1.CAL_ID       = SWA.CAL_ID
  AND RS1.ORIG_CAL_RUN_ID = SWA.ORIG_CAL_RUN_ID
  AND RS1.RSLT_SEG_NUM = SWA.RSLT_SEG_NUM
  !AND RS1.SEL_STAT     = 'I'
  !Look for inactive employees through rules
  AND PIN3.EMPLID       = SWA.EMPLID
  AND PIN3.EMPL_RCD     = SWA.EMPL_RCD
  AND PIN3.CAL_RUN_ID   = SWA.CAL_RUN_ID
  AND PIN3.GP_PAYGROUP  = SWA.GP_PAYGROUP
  AND PIN3.CAL_ID       = SWA.CAL_ID
  AND PIN3.ORIG_CAL_RUN_ID = SWA.ORIG_CAL_RUN_ID
  AND PIN3.RSLT_SEG_NUM = SWA.RSLT_SEG_NUM
  AND PIN3.PIN_NUM = (SELECT PIN_NUM FROM PS_GP_PIN WHERE PIN_CODE = 'FP GC TERM EXECUTA BRA')
  AND (PIN3.PIN_VAL_NUM = 0
  OR JCP.TERMINATION_DT   <= $BgnDt)
  AND RS1.SEG_BGN_DT  >= $BgnDt
  AND RS1.SEG_END_DT  <= $EndDt
  AND RS1.SEG_BGN_DT  >= $Admission_Dt
[$SEFIPFilter]
  AND JCP.EMPLID       = SWA.EMPLID
  AND JCP.EMPL_RCD     = SWA.EMPL_RCD
  AND JCP.ESTABID      = SWA.ESTABID
  !AND JCP.EFFDT        = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JCP.EMPLID AND EMPL_RCD = JCP.EMPL_RCD AND ESTABID = JCP.ESTABID AND ACTION IN ('TER') AND EFFDT <= $BgnDt)
  AND JCP.EFFDT        = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JCP.EMPLID AND EMPL_RCD = JCP.EMPL_RCD AND ESTABID = JCP.ESTABID AND ACTION IN ([$SQL_TER]) AND EFFDT <= $BgnDt)
  AND JCP.EFFSEQ       = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = JCP.EMPLID AND EMPL_RCD = JCP.EMPL_RCD AND ESTABID = JCP.ESTABID AND EFFDT = JCP.EFFDT)
!  AND JCP.ACTION       = 'TER'
  AND JCP.ACTION       IN ([$SQL_TER])
End-Select
End-if
End-Procedure Get-Complementary-Pmt

!*****************************
Begin-Procedure Search-Movement-Code
#debug show '      Begin-Procedure Search-Movement-Code **'
#debug show '         $Emplid:' $Emplid
#debug show '         $BgnDt: ' $BgnDt
#debug show '         $EndDt: ' $EndDt
#debug show '         $EmplSegEndDt : ' $EmplSegEndDt
#debug show '         $EmplSegBgnDt : ' $EmplSegBgnDt
!*****************************
Let $MovementCode = ' '
Begin-Select
SABP.GPBR_ABSENCE_CODE

   Let $MovementCode = &SABP.GPBR_ABSENCE_CODE

FROM PS_GP_ABS_EVENT SABE
    ,PS_GP_ABS_TAKE  SABT
    ,PS_GPBR_SEFIP_ABSP SABP
WHERE SABE.EMPLID = $Emplid
AND SABE.PIN_TAKE_NUM = SABT.PIN_NUM
AND (SABE.BGN_DT BETWEEN $EmplSegBgnDt and $EmplSegEndDt
  OR SABE.END_DT BETWEEN $EmplSegBgnDt and $EmplSegEndDt
  OR (SABE.BGN_DT < $EmplSegBgnDt
      AND SABE.END_DT > $EmplSegEndDt))
AND SABE.PIN_TAKE_NUM IN  (SELECT GPP.PIN_NUM
                             FROM PS_GP_PIN GPP
                            WHERE GPP.COUNTRY  = 'BRA'
                              AND GPP.PIN_TYPE = 'AT')
AND SABT.EFFDT          = (SELECT MAX(GP2.EFFDT)
                             FROM PS_GP_ABS_TAKE GP2
                            WHERE GP2.PIN_NUM = SABT.PIN_NUM
                              AND GP2.EFFDT  <= $EmplSegEndDt)
AND SABP.PIN_TAKE_NUM   = SABE.PIN_TAKE_NUM
AND SABP.ABSENCE_REASON = SABE.ABSENCE_REASON
AND SABP.EFFDT          = (SELECT MAX(GP3.EFFDT)
                             FROM PS_GPBR_SEFIP_ABSP GP3
                            WHERE GP3.PIN_TAKE_NUM   = SABP.PIN_TAKE_NUM
                              AND GP3.ABSENCE_REASON = SABP.ABSENCE_REASON
                              AND GP3.EFFDT         <= $EmplSegEndDt)
End-Select
#debug show '          $MovementCode  : ' $MovementCode
End-Procedure Search-Movement-Code

!*****************************
Begin-Procedure GetCidUserField
#debug show 'Begin-Procedure GetCidUserField **'
!*****************************

Let $CIDUserField = ''

Begin-Select
CC.FIELDNAME

    Let $CIDUserField = Rtrim(&CC.FIELDNAME, ' ')

FROM PS_GPBR_ABS_CID_VW CC
WHERE CC.COUNTRY = 'BRA'
AND CC.PIN_TAKE_NUM = &ABX.PIN_TAKE_NUM
AND EFF_STATUS = 'A'
End-Select

End-Procedure GetCidUserField


!*****************************
Begin-Procedure Search-Empl-Abs
#debug show 'Begin-Procedure Search-Empl-Abs **'
#debug show '   Ausentismos'
#debug show '   $Emplid_Imp        : ' $Emplid_Imp
#debug show '   $BgnDt             : ' $BgnDt
#debug show '   $EndDt             : ' $EndDt
#debug show '   $M660BgnDt         : ' $M660BgnDt
#debug show '   $M660EndDt         : ' $M660EndDt
#debug show '   $EmplSegBgnDt      : ' $EmplSegBgnDt
#debug show '   $EmplSegEndDt      : ' $EmplSegEndDt
!*****************************

move 60 to #dtu_days
Let $Abs_Bgn_dt1 = ''
Let $Abs_Bgn_dt2 = ''
Let $Abs_Bgn_dt3 = ''
Let $Abs_CID     = ''
Let $ABSENCE     = ''
Begin-Select
ABX.EMPLID
ABX.EMPL_RCD
ABX.BGN_DT
ABX.END_DT
ABX.ABSENCE_REASON
ABX.EVT_CONFIG1
ABX.EVT_CONFIG2
ABX.EVT_CONFIG3
ABX.EVT_CONFIG4
ABX.DURATION_ABS
ABX.PIN_TAKE_NUM
BBS.ABS_TYPE_OPTN

  Let $EmplId     = &ABX.EMPLID
  Let #EmplRcd    = &ABX.EMPL_RCD
  Let $Abs_Bgn_dt = &ABX.BGN_DT
  Let $Abs_End_dt = &ABX.END_DT
  Let $Abs_Type   = &BBS.ABS_TYPE_OPTN
  Let #Pin_Take_Num   = &ABX.PIN_TAKE_NUM
  Let $Abs_Reason = &ABX.ABSENCE_REASON

  Let #Abs_Durat  = &ABX.DURATION_ABS

  Do GetCidUserField

  Evaluate $CIDUserField
      When = 'ABS_USER_FLD1_LBL'
        Let $Abs_CID    = &ABX.EVT_CONFIG1
        break
      When = 'ABS_USER_FLD2_LBL'
        Let $Abs_CID    = &ABX.EVT_CONFIG2
        break
      When = 'ABS_USER_FLD3_LBL'
        Let $Abs_CID    = &ABX.EVT_CONFIG3
        break
      When = 'ABS_USER_FLD4_LBL'
        Let $Abs_CID    = &ABX.EVT_CONFIG4
        break
      When-Other
        Let $Abs_CID    = ''
        break
  End-Evaluate



  ! Initial absence date minus 60 days = $Abs_Bgn_dt3
  do Convert-to-dtu-date ($Abs_Bgn_dt, $Abs_Bgn_dt1)
  do dtu-subtract-days ($Abs_Bgn_dt1, #dtu_days, $Abs_Bgn_dt2)
  do convert-from-dtu-date ($Abs_Bgn_dt2, $Abs_Bgn_dt3)
  Let $Absence_Before = ' '

  ! Absence duration according to dates.
  do Convert-to-dtu-date ($Abs_Bgn_dt,$AbsBgnDTU)
  do Convert-to-dtu-date ($Abs_End_dt,$AbsEndDTU)
  do dtu-diff-days ($AbsBgnDTU, $AbsEndDTU, #Abs_Durat)

  ! Absence type mapping for SEFIP
  do Read-Abs-Type

  ! Initial absence date minus 1 day =  $Abs_Bgn_dtC
  do Convert-to-dtu-date ($Abs_Bgn_dt, $Abs_Bgn_dtA)
  do dtu-subtract-days ($Abs_Bgn_dtA, 1, $Abs_Bgn_dtB)

  Let $LastDate = &ABX.BGN_DT
  Let $LastAction = 'XXX'
  Do Get-Admission-Date
  If $Admission_Dt_DTU >= $Abs_Bgn_dtB
     do convert-from-dtu-date ($Admission_Dt_DTU, $Abs_Bgn_dtC)
  Else
     do convert-from-dtu-date ($Abs_Bgn_dtB, $Abs_Bgn_dtC)
  End-If

  If $RC_Gather_Cd = '660'
    !Let $Abs_CID = ''
  End-if

  #debug show '    $Absence_Before ' $Absence_Before
  #debug show '    $Abs_Bgn_dt     ' $Abs_Bgn_dt
  #debug show '    $BgnDt          ' $BgnDt
  #debug show '    $Abs_End_dt     ' $Abs_End_dt
  #debug show '    $EndDt          ' $EndDt
  #debug show '    $CIDUserField   ' $CIDUserField
  #debug show '    $Abs_CID        ' $Abs_CID

  ! Is there a SEFIP absence type mapping ?
  If Length(Ltrim($Absence_Before, ' ')) = 0

     #debug show 'Didnt find records for Absence Type, verify SEFIP Absence Parameters'
     show 'Não encontrou registros para o tipo da ausência.'

  Else

     If Length(Ltrim($Abs_CID, ' ')) = 0

       Let $Trans_CD = $Absence_Before
       Let $Trans_Dt = $Abs_Bgn_dtC

       !Legal absence not including sick leave.
       #debug show '        $AbsBgnDTU         ' $AbsBgnDTU
       #debug show '        $AbsEndDTU         ' $AbsEndDTU
       #debug show '        $BgnDtDTU          ' $BgnDtDTU
       #debug show '        $EndDtDTU          ' $EndDtDTU
       #debug show '        $Trans_CD          ' $Trans_CD

       If $Trans_CD = 'Q2'
        !When transcode is Q2 Extend Maternity Leave, we need to look for original Maternity Leave
        !Save Q2 event data in temp variables
        Let $Tmp_Trans_Dt = $Trans_Dt
        Let $Tmp_Trans_CD = $Trans_CD

        Do Search-Q1Maternity

        !Restore Q2 Vaues
        Let $Trans_Dt = $Tmp_Trans_Dt
        Let $Trans_CD = $Tmp_Trans_CD
       End-If



       If $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU
         #debug show '1) $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU = TRUE'
         do Write-Reg32
       End-If

       If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU and InStr('O1, O2, O3, Q1, Q2, Q3, Q4, Q5, Q6 , R',$Trans_CD,1) > 0
         #debug show '2) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU = TRUE 1'
         do Write-Reg32
       End-If

       If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
         #debug show '3) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE 2'
         do Write-Reg32
       End-If

       If $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
         Let $Trans_CD = $Return_Before
         Let $Trans_Dt = $Abs_End_dt
         #debug show '4) $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
         do Write-Reg32
       End-If

     Else !Length($Abs_CID) <> 0

       !Absence Sick (is an absence with Codigo Internacional de Dolencia / CID)

       Do Search-Empl-Prev-Abs
       #debug show '$Prev_Abs_Found ' $Prev_Abs_Found
       #debug show '#Days_Before    ' #Days_Before
       #debug show '#Abs_Durat      ' #Abs_Durat

       Let $Trans_Dt = $Abs_Bgn_dtC

       If #Days_Before > 0

         If #Abs_Durat <= #Days_Before

           If $Prev_Abs_Found = 'Y'
             Let $Trans_CD = $Absence_Ocurr
           Else
             Let $Trans_CD = $Absence_Before
           End-If

           #debug show '$Trans_CD ' $Trans_CD

           If $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU
             #debug show 'a) $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU and InStr('O1, O2, O3, Q1, Q2, Q3, Q4, Q5, Q6 , R',$Trans_CD,1) > 0
             #debug show 'b) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
             #debug show 'c) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
             !Let $Trans_CD = $Return_After
             Let $Trans_CD = $Return_Before
             Let $Trans_Dt = $Abs_End_dt
             #debug show 'd) $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

         Else !#Abs_Durat > #Days_Before

           If $Prev_Abs_Found = 'Y'
             Let $Trans_CD = $Absence_Ocurr
           Else
             Let $Trans_CD = $Absence_After
           End-If

           #debug show '$Trans_CD ' $Trans_CD

           If $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU
             #debug show 'e) $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU and InStr('O1, O2, O3, Q1, Q2, Q3, Q4, Q5, Q6 , R',$Trans_CD,1) > 0
             #debug show 'f) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
             #debug show 'g) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

           If $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
             !Let $Trans_CD = $Return_Before
             Let $Trans_CD = $Return_After
             Let $Trans_Dt = $Abs_End_dt
             #debug show 'h) $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
             do Write-Reg32
           End-If

         End-If !#Abs_Durat <= #Days_Before

       Else !#Days_Before = 0

         If $Prev_Abs_Found = 'Y'
           Let $Trans_CD = $Absence_Ocurr
         Else
           Let $Trans_CD = $Absence_Before
         End-If

         #debug show '$Trans_CD ' $Trans_CD

         If $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU
           #debug show 'i) $AbsBgnDTU >= $BgnDtDTU and $AbsBgnDTU <= $EndDtDTU = TRUE'
           do Write-Reg32
         End-If

         If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU and InStr('O1, O2, O3, Q1, Q2, Q3, Q4, Q5, Q6 , R',$Trans_CD,1) > 0
           #debug show 'j) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU > $EndDtDTU = TRUE'
           do Write-Reg32
         End-If

         If $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
           #debug show 'k) $AbsBgnDTU < $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
           do Write-Reg32
         End-If

         If $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU
           Let $Trans_CD = $Return_Before
           Let $Trans_Dt = $Abs_End_dt
           #debug show 'l) $AbsEndDTU >= $BgnDtDTU and $AbsEndDTU <= $EndDtDTU = TRUE'
           do Write-Reg32
         End-If

       End-If !#Days_Before > 0

     End-If !Length($Abs_CID) = 0

   End-If !Length(Ltrim($Absence_Before, ' ')) = 0

 FROM PS_GP_ABS_EVENT ABX
     ,PS_GP_ABS_TAKE  BBS
WHERE ABX.EMPLID = $Emplid_Imp
 AND  ABX.VOIDED_IND = 'N'
 AND  ABX.PIN_TAKE_NUM = BBS.PIN_NUM
 AND (ABX.BGN_DT BETWEEN $EmplSegBgnDt and $EmplSegEndDt
  OR  ABX.END_DT BETWEEN $EmplSegBgnDt and $EmplSegEndDt
  OR (ABX.BGN_DT < $EmplSegBgnDt
 AND  ABX.END_DT > $EmplSegEndDt))
 AND  ABX.PIN_TAKE_NUM IN (SELECT GPP.PIN_NUM
                             FROM PS_GP_PIN GPP
                            WHERE GPP.COUNTRY  = 'BRA'
                              AND GPP.PIN_TYPE = 'AT')
 AND  BBS.EFFDT = (SELECT MAX(GP2.EFFDT)
                     FROM PS_GP_ABS_TAKE GP2
                    WHERE GP2.PIN_NUM = BBS.PIN_NUM
                      AND GP2.EFFDT  <= $EmplSegEndDt)
End-Select
End-Procedure Search-Empl-Abs

!*****************************
Begin-Procedure Read-Abs-Type
#debug show 'Begin-Procedure Read-Abs-Type **'
#debug show '   #Pin_Take_Num    : ' #Pin_Take_Num
#debug show '   $Abs_Type        : ' $Abs_Type
#debug show '   $Abs_Reason      : ' $Abs_Reason
#debug show '   $EndDt           : ' $EndDt
#debug show '   $Abs_Rsn_Sel     : ' $Abs_Rsn_Sel
!*****************************
Let #Days_Before     = 0
Let $Return_After   = ''
Let $Absence_After  = ''
Let $Return_Before  = ''
Let $Absence_Before = ''
Let $Ocurr          = ''
Let $Return_Ocurr   = ''
Let $Absence_Ocurr  = ''

If Length(Ltrim($Abs_Reason, ' ')) > 0
  Let $Abs_Rsn_Sel = 'AND ABSP.ABSENCE_REASON = '|| '''' || $Abs_Reason || ''''
Else
  Let $Abs_Rsn_Sel = ' '
End-If

Begin-Select
ABSP.GPBR_DAYS_BEFORE
ABSP.GPBR_RETURN_CODE
ABSP.GPBR_ABSENCE_CODE
ABSP.GPBR_RETURN_CODE2
ABSP.GPBR_ABSENCE_CODE2
ABSP.GPBR_MULTPLE_OCCUR
ABSP.GPBR_RETURN_CODE3
ABSP.GPBR_ABSENCE_CODE3

  Let #Days_Before    = &ABSP.GPBR_DAYS_BEFORE
  Let $Return_After   = &ABSP.GPBR_RETURN_CODE2
  Let $Absence_After  = &ABSP.GPBR_ABSENCE_CODE2
  Let $Return_Before  = &ABSP.GPBR_RETURN_CODE
  Let $Absence_Before = &ABSP.GPBR_ABSENCE_CODE
  Let $Ocurr          = &ABSP.GPBR_MULTPLE_OCCUR
  Let $Return_Ocurr   = &ABSP.GPBR_RETURN_CODE3
  Let $Absence_Ocurr  = &ABSP.GPBR_ABSENCE_CODE3

  #debug show '   '
  #debug show '   Abs Type Found'
  #debug show '   $Return_After   : ' $Return_After
  #debug show '   $Absence_After  : ' $Absence_After
  #debug show '   $Return_Before  : ' $Return_Before
  #debug show '   $Absence_Before : ' $Absence_Before
  #debug show '   $Ocurr          : ' $Ocurr
  #debug show '   $Return_Ocurr   : ' $Return_Ocurr
  #debug show '   $Absence_Ocurr  : ' $Absence_Ocurr

FROM PS_GPBR_SEFIP_ABSP ABSP
WHERE ABSP.PIN_TAKE_NUM = #Pin_Take_Num
[$Abs_Rsn_Sel]
AND ABSP.STATUS = 'A'
AND ABSP.EFFDT  = (SELECT MAX(GP3.EFFDT)
                     FROM PS_GPBR_SEFIP_ABSP GP3
                    WHERE GP3.PIN_TAKE_NUM   = ABSP.PIN_TAKE_NUM
                      AND GP3.ABSENCE_REASON = ABSP.ABSENCE_REASON
                      AND GP3.STATUS         = ABSP.STATUS
                      AND GP3.EFFDT         <= $EndDt)
End-Select
If Length(Ltrim($Absence_Before, ' ')) = 0
  #debug show 'Didnt find records for Absence Type, verify SEFIP Absence Parameters'
  Let $Message = 'Não encontrou registros para o tipo da ausência, número de pin: ' || To_Char(#Pin_Take_Num)
  show $Message
End-If
End-Procedure Read-Abs-Type

!*****************************
Begin-Procedure Search-Empl-Prev-Abs
#debug show 'Begin-Procedure Search-Empl-Prev-Abs **'
#debug show '   $Emplid_Imp  ' $Emplid_Imp
#debug show '   $Abs_Bgn_dt3 ' $Abs_Bgn_dt3
#debug show '   $Abs_Bgn_dt  ' $Abs_Bgn_dt
#debug show '   $Abs_Type    ' $Abs_Type
#debug show '   $Abs_Reason  ' $Abs_Reason
#debug show '   $Abs_CID     ' $Abs_CID
!*****************************
Let $Prev_Abs_Found = 'N'
Begin-Select
ABS2.EMPLID

  Let $Prev_Abs_Found = 'Y'

FROM PS_GP_ABS_EVENT ABS2
    ,PS_GP_ABS_TAKE  BBS2
WHERE ABS2.PIN_TAKE_NUM = BBS2.PIN_NUM
AND ABS2.EMPLID  = $Emplid_Imp
AND ABS2.BGN_DT >= $Abs_Bgn_dt3
AND ABS2.BGN_DT <  $Abs_Bgn_dt
AND ABS2.ABSENCE_REASON = $Abs_Reason
AND (ABS2.EVT_CONFIG1   = $Abs_CID OR
     ABS2.EVT_CONFIG2   = $Abs_CID OR
     ABS2.EVT_CONFIG3   = $Abs_CID OR
     ABS2.EVT_CONFIG4   = $Abs_CID )
AND ABS2.PIN_TAKE_NUM IN (SELECT GPP2.PIN_NUM
                          FROM PS_GP_PIN GPP2
                          WHERE GPP2.COUNTRY  = 'BRA'
                            AND GPP2.PIN_TYPE = 'AT')
AND BBS2.EFFDT = (SELECT MAX(EFFDT)
                    FROM PS_GP_ABS_TAKE
                   WHERE PIN_NUM = BBS2.PIN_NUM
                     AND EFFDT   < $Abs_Bgn_dt)
AND BBS2.ABS_TYPE_OPTN  = $Abs_Type
End-Select
End-Procedure Search-Empl-Prev-Abs

!*****************************
Begin-Procedure Search-Q1Maternity
#debug show 'Begin-Procedure Search-Q1Maternity **'
#debug show '    $Trans_Dt  ' $Trans_Dt
#debug show '    $Trans_CD  ' $Trans_CD
#debug show '    $SEFIP_Cat ' $SEFIP_Cat
!*****************************

Begin-Select
Q2.PIN_TAKE_NUM
Q2.BGN_DT
CD.GPBR_ABSENCE_CODE

    Let $Trans_Dt = Rtrim(&Q2.BGN_DT, ' ')
    Let $Trans_CD = Rtrim(&CD.GPBR_ABSENCE_CODE, ' ')

    #debug show '   Q1 $Trans_Dt  ' $Trans_Dt
    #debug show '   Q1 $Trans_CD  ' $Trans_CD
    Do Write-Reg32

FROM PS_GP_ABS_EVENT Q2,
     PS_GPBR_SEFIP_ABSP CD
WHERE Q2.EMPLID      = $Emplid
AND Q2.END_DT        = (SELECT MAX(END_DT)
                        FROM PS_GP_ABS_EVENT
                        WHERE EMPLID = Q2.EMPLID
                        AND END_DT < $BgnDt
                        AND PIN_TAKE_NUM = Q2.PIN_TAKE_NUM
                        AND END_DT = Q2.END_DT)
AND Q2.PIN_TAKE_NUM   = #Pin_Take_Num
AND CD.PIN_TAKE_NUM   = Q2.PIN_TAKE_NUM
AND CD.ABSENCE_REASON = Q2.ABSENCE_REASON
AND CD.EFFDT          = (SELECT MAX(EFFDT)
                         FROM PS_GPBR_SEFIP_ABSP
                         WHERE PIN_TAKE_NUM = CD.PIN_TAKE_NUM
                         AND ABSENCE_REASON = CD.ABSENCE_REASON
                         AND EFFDT         <= Q2.END_DT)
AND CD.GPBR_ABSENCE_CODE = 'Q1'
End-Select
End-Procedure Search-Q1Maternity

!*****************************
Begin-Procedure Write-Reg32
#debug show 'Begin-Procedure Write-Reg32 **'
#debug show '    $Trans_Dt  ' $Trans_Dt
#debug show '    $Trans_CD  ' $Trans_CD
#debug show '    $SEFIP_Cat ' $SEFIP_Cat

!*****************************
move '32' to $Reg32
move ' '  to $Blank
Let $Trans_Dt1 = ''
Let $Trans_Dt2 = ''

Let $ValidCategories = '01,03,04,05,06,07'
Find $SEFIP_Cat in $ValidCategories 0 #Position
#debug show '    #Position  ' #Position
#debug show '    $FGTS_Done ' $FGTS_Done
Evaluate $Trans_CD
    When = 'I1'
    When = 'I3'
    When = 'I5'    
       If #Position > -1
         Let $FGTS_Done = 'S'
       End-If
    Break
    When = 'I2'
    When = 'I4'
    When = 'L'
       If #Position > -1
         Let $FGTS_Done = 'N'
       End-If
    Break
    When = 'V3'
       If $SEFIP_Cat = '02'

         Let $FGTS_Done = 'C'
       End-If
    Break
    When-Other
       Let $FGTS_Done = ' '
End-Evaluate

#debug show '    $FGTS_Done ' $FGTS_Done


If $RC_Comp_Month = '13'
   Let $FGTS_Done = ' '
End-If

Let $Inscr_Reg32 = $Estabid_CNPJ_CEI

do Check-Strings ( $Emplid_Name , $Emplid_Name)
do Check-Strings ( $Emplid_Name , $Emplid_Name32)

do Convert-To-DTU-Date($Trans_Dt,$Trans_Dt1)

If $Trans_Dt1 <> ''
   Let $Trans_Dt2 = Substr($Trans_Dt1,9,2) || Substr($Trans_Dt1,6,2) || Substr($Trans_Dt1,1,4)
End-If

Let $Admission_Dt_FmtBRA = Substr($Admission_Dt_DTU,9,2) || Substr($Admission_Dt_DTU,6,2) || Substr($Admission_Dt_DTU,1,4)

Let $WriteReg32 = 'True'

Write 1 From $Reg32:2                 -
             $Estabid_Comp_Ins1:1     -
             $Inscr_Reg32:14          -
             $STaker_Ins_Type:1       -
             $STaker_Inscr:14         -
             $National_PIS_PASEP:11   -
             $Admission_Dt_FmtBRA:8   -
             $SEFIP_Cat:2             -
             $Emplid_Name32:70        -
             $Trans_CD:2              -
             $Trans_Dt2:8             -
             $FGTS_Done:1             -
             $Blank:225               -
             '*':1
End-Procedure Write-Reg32

!*****************************
Begin-Procedure Write-Reg90
#debug show 'Begin-Procedure Write-Reg90 **'
!*****************************
  move '90' to $Reg90
  move ' '  to $Blank
  Let $Fill90 = '999999999999999999999999999999999999999999999999999'

  Let $WriteReg90 = 'True'

  Write 1 From $Reg90:2     -
               $Fill90:51   -
               $Blank:306   -
               '*':1
End-Procedure Write-Reg90

!*****************************
Begin-Procedure Get-Company-Key
#debug show 'Begin-Procedure Get-Company-Key **'
#debug show '    $RC_Estabid ' $RC_Estabid
#debug show '    $EndDt      ' $EndDt
!*****************************
Begin-Select
A8.COMPANY

   Let $Company = Rtrim(&A8.COMPANY,' ')

FROM PS_ESTAB_TBL A8
WHERE A8.ESTABID    = $RC_Estabid
  AND A8.EFF_STATUS = 'A'
  AND A8.EFFDT      = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE ESTABID = A8.ESTABID AND EFF_STATUS = A8.EFF_STATUS AND EFFDT  <= $EndDt)
End-Select
#debug show '    $Company      ' $Company
End-Procedure Get-Company-Key

!*****************************
Begin-Procedure Get-Company-Add-Data
#debug show 'Begin-Procedure Get-Company-Add-Data **'
#debug show '    $Company ' $Company
#debug show '    $EndDt   ' $EndDt
!*****************************
Begin-Select
CADDR.ADDRESS1
CADDR.NUM1
CADDR.ADDRESS2
CADDR.ADDRESS4
CADDR.POSTAL
CADDR.CITY
CADDR.STATE
CADDR.EFFDT

  Let $Company_Addr1  = Rtrim(&CADDR.ADDRESS1,' ')
  Let $Company_Num1   = Rtrim(&CADDR.NUM1,' ')
  Let $Company_Addr2  = Rtrim(&CADDR.ADDRESS2,' ')
  Let $Company_Addr4  = Rtrim(&CADDR.ADDRESS4,' ')
  Let $Company_Postal = Rtrim(&CADDR.POSTAL,' ')
  Let $Company_City   = Rtrim(&CADDR.CITY,' ')
  Let $Company_State  = Rtrim(&CADDR.STATE,' ')
  Let $Address_Comp   = $Company_Addr1 || ' ' || $Company_Num1 || ' ' || $Company_Addr2
  Let $Adress_Effdt   = &CADDR.EFFDT

FROM  PS_COMPANY_TBL CADDR
WHERE CADDR.COMPANY = $Company
  AND CADDR.EFFDT = (SELECT MAX(EFFDT)
                     FROM   PS_COMPANY_TBL
                     WHERE  COMPANY = CADDR.COMPANY
                       AND  EFFDT  <= $EndDt)
End-Select

!Do Check-Address-Change

Let $phone = '00000000'
Let $Ext   = '00000'
Let $DDD   = '    '
Let $Company_Phone = ''
Begin-Select
CP.PHONE

  Let $FullPhone = Ltrim(Rtrim(&CP.PHONE,' '), ' ')

  Do GetPhoneBRA ($FullPhone, $PhoneDDI, $PhoneDDD, $Phone, $PhoneRamal)

  !Let $Company_Phone = Edit($PhoneDDD, '0999') || Edit($Phone,'09999999')
  Let $Company_Phone = $PhoneDDD || $Phone

  If Length($Company_Phone) <= 8
     #debug show '    Please remember to capture Company Phone DDD: ' $Company
     show 'Favor informar o DDD do número do telefone para a empresa: ' $Company
  End-If

FROM PS_COMP_PHONE_TBL CP
WHERE CP.COMPANY    = $Company
  AND CP.PHONE_TYPE = 'BUSN'
  AND CP.EFFDT      = (SELECT MAX(CP_A.EFFDT)
                       FROM PS_COMP_PHONE_TBL CP_A
                       WHERE CP_A.COMPANY    = CP.COMPANY
                         AND CP_A.PHONE_TYPE = CP.PHONE_TYPE
                         AND CP_A.EFFDT     <= $EndDt )

End-Select
#debug show '      $Company_Phone : ' $Company_Phone
Begin-Select
CTB.NATURE_DCLARER_BRA
CTB.SIMPLES_OPTION_BRA

  Let $Nature_Dclarer = Rtrim(&CTB.NATURE_DCLARER_BRA,' ')
  Let $Simples_Option = Substr(Rtrim(&CTB.SIMPLES_OPTION_BRA,' '),2,1)
  Evaluate $RC_Gather_Cd
  When = '130'
  When = '903'
  When = '909'
     Let $Simples_Option = '1'
  Break
  When = '640'
     Let $Simples_Option = ' '
  Break
  End-Evaluate

  Evaluate $FPAS_CD_Bra
  When = '582'
  When = '639'
  When = '663'
  When = '671'
  When = '680'
  When = '736'
     Let $Simples_Option = '1'
  Break
  End-Evaluate

FROM PS_COMPANY_TBL_BRA CTB
WHERE CTB.COMPANY = $Company
  AND CTB.EFFDT   = (SELECT MAX (EFFDT)
                     FROM PS_COMPANY_TBL_BRA
                     WHERE COMPANY = CTB.COMPANY
                       AND EFFDT  <= $EndDt)
End-Select
End-Procedure Get-Company-Add-Data

!*****************************
Begin-Procedure Process-Establishment
#debug show '    Begin-Procedure Process-Establishment **'
#debug show '        $CurrentEstabId   :' $CurrentEstabId
#debug show '        $CompanyInscrType :' $CompanyInscrType
#debug show '        $Estabid_CNPJ_CEI :' $Estabid_CNPJ_CEI
#debug show '        $EstabIdType      :' $EstabIdType
!Begin-Doc
!               Fisrt Part: Processes common SEFIP's sections row types: 00, 10, 12, 13 and 14
!               Second Part: Processes gathering code sections accordig to user selection in run control page.
!End-Doc
!*****************************

!First Part
Let $Centr_CD = '0'
Do Get-Estab-Data
Do Get-Estab-Bra-Data
Do Select-SEFIP-Parameters
Do Check-CNAE-Change
Do Write-Reg10

Do Write-Reg12

Evaluate $RC_Gather_Cd
    When = '660'
        !Do nothing
    Break
    When = '650'
        !Do nothing
    Break
    When-Other
        Do Process-Main-13
        Do Process-Main-14
End-Evaluate

!Second Part
Evaluate $RC_Gather_Cd
When = '115'
   #debug show '******* Gathering Code = 115  *******'
   Let $In_Staker = 'N'
   Let $LastSTProceessed = '*'
   Let $StrStackerIns    = ' '

   !Let $RehComp_Norm = 'RC'
   !Do Process-Main-30
   !Let $RehComp_Norm = 'N'
   !Do Process-Main-30
   Do Process-Main-30-SB

   If $RC_IncludeAuto = 'Y'
     Do Include-Autonomous
   End-If

   !Do Write-Reg30

Break
When = '150'

   Let $LastSTProceessed = '*'
   Let $StrStackerIns    = ' '

   If $RC_IncludeAdmin = 'Y'

     Let $STaker_Ins_Type  = $Estabid_Comp_Ins1
     Let $STaker_Inscr     = $Estabid_CNPJ_CEI
     Let #ST-FamilySalary = 0

     Let $RehComp_Norm = 'RC'
     Do Prcs-Administrative-Empls
     Let $RehComp_Norm = 'N'
     Do Prcs-Administrative-Empls

     !Add employees from related establishments only when they have maternity leave
     Do Add-Maternity-Leave-Empls
   End-If

   Let $Service_Taker   = ' '
   Do Get-Service-Taker-Data
   Do Get-STaker-Monthly-Data
   Do Prepare-Reg20
   Do Prepare-Reg21

   Do Process-Through-Service-Takers

Break
When = '155'

   If $RC_IncludeAdmin = 'Y'

     Let $STaker_Ins_Type  = $Estabid_Comp_Ins1
     Let $STaker_Inscr     = $Estabid_CNPJ_CEI

     Let $RehComp_Norm = 'RC'
     Do Prcs-Administrative-Empls
     Let $RehComp_Norm = 'N'
     Do Prcs-Administrative-Empls

     Let $Service_Taker   = ' '
     Do Get-Service-Taker-Data
     Do Get-STaker-Monthly-Data
     Let #Staker_Count    = 1

     Let #GPS_Pay_CD_Bra  = 2100
     Do Prepare-Reg20
     Do Prepare-Reg21

   End-If

   Let #GPS_Pay_CD_Bra  = 2208

   If $RC_Process_ST_Structure = 'Y'

      Do Process-Through-Service-Takers

   Else

      Do Process-Civil-Construction
      !Remove employees with maternity leave
      !280611 Maternity: Comment the remove process to allow maternity employees.
      !Do Remove-Maternity-Leave-Empls

      !280611 Autonomous: Add the Autonomous
      If $RC_IncludeAuto = 'Y'
        Do Include-Autonomous
      End-If

      Do Process-Main-20s

   End-If

Break
When = '650'

   Let $In_Staker = 'N'
   Let $LastSTProceessed = '*'
   Let $StrStackerIns    = ' '

   Do Process-Main-30-650
   Do Write-Reg30

Break
When = '660'

   Let $In_Staker = 'N'
   Let $LastSTProceessed = '*'
   Let $StrStackerIns    = ' '

   Do Process-Main-30-660
   #debug show '************************************************* $EstabList ' $EstabList
   !Do Write-Reg30
Break
End-Evaluate
End-Procedure Process-Establishment

!*****************************
Begin-Procedure Process-Through-Service-Takers
#debug show 'Begin-Procedure Process-Through-Service-Takers **'
!*****************************

   Do Process-Service-Takers
   #debug show '**************** Service Takers return *********'

   Let $STaker_Ins_Type  = $Estabid_Comp_Ins1
   Let $STaker_Inscr     = $Estabid_CNPJ_CEI
   Let #ST-FamilySalary = 0
   Do Process-Remaining-Percentage
   !280611 Autonomous: Add the Autonomous
   If $RC_IncludeAuto = 'Y'
     Do Include-Autonomous
     Do Process-ST-Autonomous
   End-If

   !Let $Service_Taker   = ' '
   !Do Get-Service-Taker-Data
   !Do Get-STaker-Monthly-Data
   !Do Prepare-Reg20
   !Do Prepare-Reg21

   #debug show '**************** Admin Percentage *********'
   Do Process-Main-20s

End-Procedure Process-Through-Service-Takers

!*****************************
Begin-Procedure Remove-Maternity-Leave-Empls
#debug show 'Begin-Procedure Remove-Maternity-Leave-Empls **'
#debug show '$BgnDt          ' $BgnDt
#debug show '$EndDt          ' $EndDt
!*****************************
Begin-SQL
DELETE FROM PS_GPBR_R_SEFIP
WHERE PROCESS_INSTANCE = #prcs_process_instance
AND EMPLID IN (SELECT PABE.EMPLID
                 FROM PS_GP_ABS_EVENT PABE
                 ,PS_GP_ABS_TAKE  PABT
                 ,PS_GPBR_SEFIP_ABSP PABP
                 WHERE PABE.EMPLID = PS_GPBR_R_SEFIP.EMPLID
                 AND PABE.PIN_TAKE_NUM = PABT.PIN_NUM
                 AND (PABE.BGN_DT BETWEEN $BgnDt and $EndDt
                      OR PABE.END_DT BETWEEN $BgnDt and $EndDt
                      OR (PABE.BGN_DT < $BgnDt AND PABE.END_DT > $EndDt))
                 AND PABE.PIN_TAKE_NUM IN  (SELECT GPP.PIN_NUM
                                            FROM PS_GP_PIN GPP
                                            WHERE GPP.COUNTRY  = 'BRA'
                                            AND GPP.PIN_TYPE = 'AT')
                 AND PABT.EFFDT          = (SELECT MAX(GP2.EFFDT)
                                            FROM PS_GP_ABS_TAKE GP2
                                            WHERE GP2.PIN_NUM = PABT.PIN_NUM
                                            AND GP2.EFFDT  <= $EndDt)
                 AND PABP.PIN_TAKE_NUM   = PABE.PIN_TAKE_NUM
                 AND PABP.ABSENCE_REASON = PABE.ABSENCE_REASON
                 AND PABP.EFFDT          = (SELECT MAX(GP3.EFFDT)
                                            FROM PS_GPBR_SEFIP_ABSP GP3
                                            WHERE GP3.PIN_TAKE_NUM   = PABP.PIN_TAKE_NUM
                                            AND GP3.ABSENCE_REASON = PABP.ABSENCE_REASON
                                            AND GP3.EFFDT         <= $EndDt)
                 AND PABP.GPBR_ABSENCE_CODE IN ('Q1','Q2','Q3','Q4','Q5','Q6')
                 )
End-SQL
End-Procedure Remove-Maternity-Leave-Empls

!*****************************
Begin-Procedure Get-Service-Taker-Data
#debug show 'Begin-Procedure Get-Service-Taker-Data **'
!*****************************
Let $STaker_Descr    = $Estabid_Descr1
Let $STaker_Addr1    = $Estabid_Addr1
Let $STaker_Num1     = $Estabid_Num1
Let $STaker_Addr2    = $Estabid_Addr2
Let $STaker_Addr3    = $Estabid_Addr3
Let $STaker_Addr4    = $Estabid_Addr4
Let $STaker_Postal   = $Estabid_Postal
Let $STaker_City     = $Estabid_City
Let $STaker_State    = $Estabid_State
Let $Address_STaker  = $STaker_Addr1 || ' ' || $STaker_Num1 || ' ' || $STaker_Addr2
Do Str-Delete-Chars( $STaker_Postal , '-' , $PostalEnd )
Let $Postal          = Substr($PostalEnd,1,8)
Let #Postal          = To_Number($Postal)
Let $STaker_Postal   = Edit(#Postal, '00000000')

End-Procedure Get-Service-Taker-Data

!*****************************
Begin-Procedure Process-Civil-Construction
#debug show 'Begin-Procedure Process-Civil-Construction **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
!*****************************
!Select CEI associated establishments.
Begin-Select
EI1.ESTABID
ETB.COMP_INS_TYPE_BRA
ETB.GPS_PAY_CD_BRA
!CNPJ/CEI
EI1.ESTAB_ID_TYPE_BRA
EI1.ESTAB_ID_BRA
!CNAE Id
EI2.ESTAB_ID_TYPE_BRA
EI2.ESTAB_ID_BRA

   Let $CurrentEstabId   = Rtrim(&EI1.ESTABID, ' ')
   Let $Estabid_Comp_Ins = Substr(Rtrim(&ETB.COMP_INS_TYPE_BRA,' '), 1,1)
   Let $StrStackerIns    = Rtrim(&EI1.ESTAB_ID_BRA, ' ')
   Let $Estab_CNAE       = Rtrim(&EI2.ESTAB_ID_BRA, ' ')
   Let $Estab_CNAE_TC    = Substr($Estab_CNAE,1,2)
   !Let #GPS_Pay_CD_Bra   = &ETB.GPS_PAY_CD_BRA

   !If  $Estab_CNAE_TC = '41' Or $Estab_CNAE_TC = '42' Or $Estab_CNAE_TC = '43'

      Do Get-Estab-Data
      Let #Staker_Count    = 1
      Let $STaker_Ins_Type = $Estabid_Comp_Ins
      Do FILL_LEADING ($StrStackerIns,'0', 14, 'L',$STaker_Inscr)
      !Let $STaker_Inscr    = Edit($StrStackerIns, '00000000000000')
      Do Get-Service-Taker-Data
      move 'Y' to $STaker-Data
      Do Get-STaker-Monthly-Data
      Let $EstabList = '''' || $CurrentEstabId || ''''
      Do Get-Reg10-Data
      Do Prepare-Reg20
      Do Prepare-Reg21

      Let $RehComp_Norm = 'RC'
      Do Process-Main-30
      Let $RehComp_Norm = 'N'
      Do Process-Main-30

   !Else
   !
   !   Let $Message = 'Establishment:' || $CurrentEstabId || ' cannot be processed due CNAE Id: ' || $Estab_CNAE || ' does not match construction industry prefix:41, 42 or 43.'
   !   show $Message
   !
   !End-If

FROM PS_ESTAB_TBL_BRA ETB
   , PS_ESTAB_TBL     EST
   , PS_ESTAB_ID_BRA  EI1
   , PS_ESTAB_ID_BRA  EI2
WHERE ETB.ESTAB_ASOC_BRA = $CurrentEstabId
  AND EST.ESTABID        = ETB.ESTABID
  AND EST.EFFDT          = ETB.EFFDT
  AND EST.EFFDT          = (SELECT MAX(EFFDT)
                              FROM PS_ESTAB_TBL
                             WHERE ESTABID = EST.ESTABID
                               AND EFFDT  <= $EndDt)
  AND EST.EFF_STATUS     = 'A'
  AND EI1.ESTABID        = ETB.ESTABID
  AND EI1.EFFDT          = ETB.EFFDT
  AND EI1.COUNTRY        = 'BRA'
  AND EI1.ESTAB_ID_TYPE_BRA = 'CEI'
  AND EI2.ESTABID       = EI1.ESTABID
  AND EI2.EFFDT         = EI1.EFFDT
  AND EI2.COUNTRY       = EI1.COUNTRY
  AND EI2.ESTAB_ID_TYPE_BRA = 'CNAE'
ORDER BY EI1.ESTAB_ID_TYPE_BRA DESC
       , EI1.ESTAB_ID_BRA ASC
End-Select
End-Procedure Process-Civil-Construction

!*****************************
Begin-Procedure Delete-Temp-Tables
#debug show '    Begin-Procedure Delete-Temp-Tables **'
!*****************************
Begin-SQL
  DELETE FROM PS_GPBR_R_SEFIP
  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL

Begin-SQL
  DELETE FROM PS_GPBR_R20_SEFIP
  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL

Begin-SQL
  DELETE FROM PS_GPBR_R21_SEFIP
  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL
End-Procedure Delete-Temp-Tables


!*****************************
Begin-Procedure Delete-PreFill-Tables
#debug show '    Begin-Procedure Delete-PreFill-Tables **'
!*****************************
Begin-SQL
DELETE FROM PS_GPBR_SEFIP_AUDT
WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL

Begin-SQL
DELETE FROM PS_GPBR_SEFIP_EMPG
WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL

Begin-SQL
DELETE FROM PS_GPBR_SEFIP_WRK
WHERE PROCESS_INSTANCE = #prcs_process_instance
End-SQL

End-Procedure Delete-PreFill-Tables


!*****************************
Begin-Procedure Get-Estab-Data
#debug show '    Begin-Procedure Get-Estab-Data **'
#debug show '        $CurrentEstabId: ' $CurrentEstabId
#debug show '        $EndDt         : ' $EndDt
!*****************************
Let $EstabId = $CurrentEstabId
Do Get-Estab-Address

Let $Estabid_Code   = $Est_GEA_Code
Let $Estabid_Descr1 = $Est_GEA_Descr1
Let $Estabid_Addr1  = $Est_GEA_Addr1
Let $Estabid_Num1   = $Est_GEA_Num1
Let $Estabid_Addr2  = $Est_GEA_Addr2
Let $Estabid_Addr3  = $Est_GEA_Addr3
Let $Estabid_Addr4  = $Est_GEA_Addr4
Let $Estabid_Postal = $Est_GEA_Postal
Let $Estabid_City   = $Est_GEA_City
Let $Estabid_State  = $Est_GEA_State
Let $Address_Estab  = $Est_GEA_Address
Let $Estab_Company  = $Est_GEA_Company
Let $Company        = $Est_GEA_Company

#debug show '    ** Get establishment phone **'
Let $phone = '00000000'
Let $Ext   = '00000'
Let $DDD   = '0000'

Let $Estab_Phone = ''
Begin-Select
E2.PHONE

   Let $FullPhone = Rtrim(&E2.PHONE,' ')

   Do GetPhoneBRA ($FullPhone, $PhoneDDI, $PhoneDDD, $Phone, $PhoneRamal)

   !Let $Estab_Phone = Edit($PhoneDDD, '0999') || Edit($Phone,'09999999')
   Let $Estab_Phone = $PhoneDDD ||$Phone

FROM PS_ESTAB_PHONE E2
WHERE E2.ESTABID    = $CurrentEstabId
  AND E2.PHONE_TYPE = 'BUSN'
  AND E2.EFFDT      = (SELECT MAX(E2_A.EFFDT)
                       FROM PS_ESTAB_PHONE E2_A
                       WHERE E2_A.ESTABID    = E2.ESTABID
                         AND E2_A.PHONE_TYPE = E2.PHONE_TYPE
                         AND E2_A.EFFDT     <= $EndDt)
End-Select
End-Procedure Get-Estab-Data

!*****************************
Begin-Procedure Get-Estab-Address
#debug show '    Begin-Procedure Get-Estab-Address **'
#debug show '        $EstabId: ' $EstabId
#debug show '        $EndDt ' $EndDt
!*****************************
Let $Est_GEA_Code   = ''
Let $Est_GEA_Descr1 = ''
Let $Est_GEA_Addr1  = ''
Let $Est_GEA_Num1   = ''
Let $Est_GEA_Addr2  = ''
Let $Est_GEA_Addr3  = ''
Let $Est_GEA_Addr4  = ''
Let $Est_GEA_Postal = ''
Let $Est_GEA_City   = ''
Let $Est_GEA_State  = ''
Let $Est_GEA_Address= ''
Let $Est_GEA_Company= ''
Begin-Select
A.ESTABID
A.DESCR
A.ADDRESS1
A.NUM1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.POSTAL
A.CITY
A.STATE
A.COMPANY

  Let $Est_GEA_Code   = Rtrim(&A.ESTABID,' ')
  Let $Est_GEA_Descr1 = Rtrim(&A.DESCR,' ')
  Let $Est_GEA_Addr1  = Rtrim(&A.ADDRESS1,' ')
  Let $Est_GEA_Num1   = Rtrim(&A.NUM1,' ')
  Let $Est_GEA_Addr2  = Rtrim(&A.ADDRESS2,' ')
  Let $Est_GEA_Addr3  = Rtrim(&A.ADDRESS3,' ')
  Let $Est_GEA_Addr4  = Rtrim(&A.ADDRESS4,' ')
  Let $Est_GEA_Postal = Rtrim(&A.POSTAL,' ')
  Let $Est_GEA_City   = Rtrim(&A.CITY,' ')
  Let $Est_GEA_State  = Rtrim(&A.STATE,' ')
  Let $Est_GEA_Address= $Est_GEA_Addr1 || ' ' || $Est_GEA_Num1 || ' ' || $Est_GEA_Addr2
  Let $Est_GEA_Company= Rtrim(&A.COMPANY,' ')

FROM PS_ESTAB_TBL A
WHERE A.ESTABID    = $EstabId
  AND A.EFF_STATUS = 'A'
  AND A.EFFDT      = (SELECT MAX(A_A.EFFDT) FROM PS_ESTAB_TBL A_A WHERE A_A.ESTABID = A.ESTABID AND A_A.EFF_STATUS = A.EFF_STATUS AND A_A.EFFDT  <= $EndDt)
End-Select

!Look for description in related language record

Let $EstabidLangDescr = ''

Begin-Select
EE.DESCR

  Let $EstabidLangDescr = Ltrim(Rtrim(&EE.DESCR, ' '), ' ')

FROM PS_ESTAB_TBL_LANG EE
WHERE EE.ESTABID = $EstabId
AND   EE.LANGUAGE_CD = $curr_language_cd
AND   EE.EFFDT = (SELECT MAX(E1.EFFDT)
               FROM PS_ESTAB_TBL_LANG E1
               WHERE E1.ESTABID = EE.ESTABID
               AND E1.LANGUAGE_CD = EE.LANGUAGE_CD
               AND E1.EFFDT <= $EndDt)
End-Select

If $EstabidLangDescr <> ''
    Let $Est_GEA_Descr1 = $EstabidLangDescr
End-If


End-Procedure Get-Estab-Address

!*****************************
Begin-Procedure Check-Centralization
#debug show 'Begin-Procedure Check-Centralization **'
#debug show '$CurrentEstabId: ' $CurrentEstabId
#debug show '$BgnDt ' $BgnDt
!Cases:
!1 Establishment is centralizer
!Centralizer , employees and for every centralized and employees.
!2 Establishment is centralized
!Centralizer , centralized employees.
!3 None of previous
!*****************************
Let $Centr_CD = '0'

Begin-Select
'X'
   Let $Centr_CD = '1'

FROM PS_CENTR_DATA_BRA CD
WHERE CD.PROCESS_TYPE_BRA = '10'
  AND CD.CENTR_ESTABID_BRA = $CurrentEstabId
  AND CD.EFFDT = (SELECT MAX (CD_A.EFFDT)
                  FROM PS_CENTR_DATA_BRA CD_A
                  WHERE CD.PROCESS_TYPE_BRA  = CD_A.PROCESS_TYPE_BRA
                    AND CD.CENTR_ESTABID_BRA = CD_A.CENTR_ESTABID_BRA
                    AND CD_A.EFFDT          <= $EndDt)
End-Select

Begin-Select
'Y'
   Let $Centr_CD = '2'

FROM PS_CENTR_DTL_BRA CD1
WHERE CD1.PROCESS_TYPE_BRA = '10'
  AND CD1.ESTABID = $CurrentEstabId
  AND CD1.EFFDT = (SELECT MAX (CD1_A.EFFDT)
                   FROM PS_CENTR_DTL_BRA CD1_A
                   WHERE CD1.PROCESS_TYPE_BRA  = CD1_A.PROCESS_TYPE_BRA
                     AND CD1.CENTR_ESTABID_BRA = CD1_A.CENTR_ESTABID_BRA
                     AND CD1_A.EFFDT          <= $EndDt)
End-Select
End-Procedure Check-Centralization

!*****************************
Begin-Procedure Get-Estab-Bra-Data
#debug show '    Begin-Procedure Get-Estab-Bra-Data **'
#debug show '        $CurrentEstabId: ' $CurrentEstabId
#debug show '        $EndDt         : ' $EndDt
!*****************************
Begin-Select
E3.ESTABID
E3.COMP_INS_TYPE_BRA
E3.SEFIP_REP_TYPE_BRA
E3.SEFIP_RESP_ID_BRA
E3.SEFIP_RESPN_ID_BRA
E3.WORK_RISK_PCT_BRA
E3.FPAS_CD_BRA
E3.THIRD_PARTY_CD_BRA
E3.GPS_PAY_CD_BRA
E3.ISE_FIL_PCT_BRA

  Let $Estabid_Comp_Ins       = Rtrim(&E3.COMP_INS_TYPE_BRA,' ')
  Let $Estabid_Comp_Ins1      = Substr($Estabid_Comp_Ins, 1,1)
  Let $Estabid_SEFIP_Rep_Type = Rtrim(&E3.SEFIP_REP_TYPE_BRA,' ')
  Let $Estabid_SEFIP_Rep_ID   = Rtrim(&E3.SEFIP_RESP_ID_BRA,' ')
  Let $Estabid_SEFIP_Respn_ID = Rtrim(&E3.SEFIP_RESPN_ID_BRA,' ')
  Let $Third_Party_CD_Bra     = Edit(&E3.THIRD_PARTY_CD_BRA, '0999')
  Let $FPAS_CD_Bra            = To_Char(&E3.FPAS_CD_BRA)
  Let #Work_Risk_Pct_Bra      = Abs(&E3.WORK_RISK_PCT_BRA)

  Do Get-Resp-Data

  If #Work_Risk_Pct_Bra > 0 and #Work_Risk_Pct_Bra <= 9.9
  Let #Work_Risk_Pct_Bra = #Work_Risk_Pct_Bra * 10
     move #Work_Risk_Pct_Bra to $Work_Risk_Pct_Bra '00'
     !Let $Work_Risk_Pct_Bra   = Substr($Work_Risk_Pct_Bra,1,1)
     !Let $Work_Risk_Pct_Bra   = $Work_Risk_Pct_Bra || '0'
  Else
     move #Work_Risk_Pct_Bra to $Work_Risk_Pct_Bra 00
     #debug show '        Please review your Work Risk% Parameter in Establishment Brazil: ' $Estabid_Code
     show '        Favor rever o parametro de % SAT no Estabelecimento: ' $Estabid_Code
  End-If

  Evaluate $Simples_Option
  When = '2'
  When = '3'
  When = '6'
     Let $Work_Risk_Pct_Bra  = '00'
     Let $Third_Party_CD_Bra = '    '
     show '        SIMPLES: ' $Simples_Option 'Código de Outras Entidades branco'
  Break
  End-Evaluate

  Evaluate $FPAS_CD_Bra
  When = '604'
  When = '647'
  When = '825'
  When = '868'
     Let $Work_Risk_Pct_Bra = '00'
  Break
  End-Evaluate

  Evaluate $RC_Gather_Cd
  When = '145'
  When = '345'
  When = '640'
  When = '660'
     Let $Third_Party_CD_Bra = '    '
  Break
  When = '115'
  When = '130'
  When = '135'
  When = '150'
  When = '155'
  When = '650'
     If Length(Ltrim($Third_Party_CD_Bra, ' ')) = 0
        #debug show '        Please review Other Entities Code: ' $RC_Estabid
        show '        Favor rever Código de Outras Entidades: ' $RC_Estabid
     End-If
  Break
  End-Evaluate

  Let #GPS_Pay_CD_Bra          = &E3.GPS_PAY_CD_BRA
  !Let #GPS_Pay_CD_Bra          = To_Char(#GPS_Pay_CD_Bra)
  If $FPAS_CD_Bra = '639' and &E3.ISE_FIL_PCT_BRA <> 0
     Let #Philanthropy_Pct_Bra = &E3.ISE_FIL_PCT_BRA * 100
     Let $Philanthropy_Pct_Bra = Edit(#Philanthropy_Pct_Bra, '09999')
  End-If

FROM PS_ESTAB_TBL  E31
   , PS_ESTAB_TBL_BRA E3
WHERE E31.ESTABID    = $CurrentEstabId
  AND E31.EFFDT      = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE ESTABID = E31.ESTABID AND EFFDT <= $EndDt)
  AND E31.EFF_STATUS = 'A'
  AND E3.ESTABID     = E31.ESTABID
  AND E3.EFFDT       = E31.EFFDT
ORDER BY E3.COMP_INS_TYPE_BRA
End-Select
End-Procedure Get-Estab-Bra-Data

!*****************************
Begin-Procedure Select-SEFIP-Parameters
#debug show '    Begin-Procedure Select-SEFIP-Parameters **'
#debug show '        $CurrentEstabId ' $CurrentEstabId
#debug show '        $RC_Comp_Year   ' $RC_Comp_Year
#debug show '        $RC_Comp_Month  ' $RC_Comp_Month
!*****************************

Let $RC_YearMonth = $RC_Comp_Year || $RC_Comp_Month

Let $SQLString1 = 'AND SP.YEARCD || SP.MONTHCD = (SELECT MAX(YEARCD || MONTHCD) '
Let $SQLString2 = 'AND YEARCD || MONTHCD <= ' || $RC_YearMonth ||') '



    #IfDef MICROSOFT
        Let $SQLString1 = 'AND SP.YEARCD + SP.MONTHCD = (SELECT MAX(YEARCD + MONTHCD) '
        Let $SQLString2 = 'AND YEARCD + MONTHCD <= ' || $RC_YearMonth ||') '
    #EndIf

Begin-Select
SP.YEARCD
SP.MONTHCD
SP.GPBR_SPORT_SPONS_V
SP.GPBR_INCOME_SOURCE
SP.GPBR_RURAL_PROD_PH
SP.GPBR_RURAL_PROD_JU
SP.GPBR_OTH_YEAR
SP.GPBR_CORRECT_COMP
SP.GPBR_START_YEAR
SP.GPBR_START_MONTH
SP.GPBR_END_YEAR
SP.GPBR_END_MONTH
SP.GPBR_COMP_VAL_INSS
SP.GPBR_COMP_VAL_PREV
SP.GPBR_COMP_VAL_RURL
SP.GPBR_COMP_VAL_R_PR
SP.GPBR_COMP_VAL_SPON
SP.GPBR_COOP_PAY_VAL
!SP.GPBR_NAME_CIAEST

  #debug show '        YEARCD:  ' &SP.YEARCD
  #debug show '        MONTHCD: ' &SP.MONTHCD

  !Let $Name_CiaEst          = &SP.GPBR_NAME_CIAEST
  Let #SEFIP_Sport_Spons_V  = &SP.GPBR_SPORT_SPONS_V * 100
  Let $SEFIP_Sport_Spons_V  = To_Char(#SEFIP_Sport_Spons_V)
  Let $SEFIP_Income_Source  = &SP.GPBR_INCOME_SOURCE
  Let #SEFIP_Rural_Prod_PH  = &SP.GPBR_RURAL_PROD_PH * 100
  Let $SEFIP_Rural_Prod_PH  = To_Char(#SEFIP_Rural_Prod_PH)
  Let #SEFIP_Rural_Prod_JU  = &SP.GPBR_RURAL_PROD_JU * 100
  Let $SEFIP_Rural_Prod_JU  = To_Char(#SEFIP_Rural_Prod_JU)
  Let #SEFIP_Oth_Year       = &SP.GPBR_OTH_YEAR
  Let $SEFIP_Oth_Year       = To_Char(#SEFIP_Oth_Year)
  Let #SEFIP_Correct_Comp   = &SP.GPBR_CORRECT_COMP * 100
  Let $SEFIP_Correct_Comp   = To_Char(#SEFIP_Correct_Comp)
  Let #SEFIP_Start_Year     = &SP.GPBR_START_YEAR
  Let $SEFIP_Start_Year     = To_Char(#SEFIP_Start_Year)
  Let #SEFIP_Start_Month    = &SP.GPBR_START_MONTH
  Let $SEFIP_Start_Month    = Edit(#SEFIP_Start_Month, '00')
  Let $SEFIP_Comp_Start_Prd = $SEFIP_Start_Year || $SEFIP_Start_Month
  Let #SEFIP_End_Year       = &SP.GPBR_END_YEAR
  Let $SEFIP_End_Year       = To_Char(#SEFIP_End_Year)
  Let #SEFIP_End_Month      = &SP.GPBR_END_MONTH
  Let $SEFIP_End_Month      = Edit(#SEFIP_End_Month,'00')
  Let $SEFIP_Comp_End_Prd   = $SEFIP_End_Year || $SEFIP_End_Month
  Let #SEFIP_Comp_Val_INSS  = &SP.GPBR_COMP_VAL_INSS * 100
  Let $SEFIP_Comp_Val_INSS  = To_Char(#SEFIP_Comp_Val_INSS)
  Let #SEFIP_Comp_Val_Prev  = &SP.GPBR_COMP_VAL_PREV * 100
  Let $SEFIP_Comp_Val_Prev  = To_Char(#SEFIP_Comp_Val_Prev)
  Let #SEFIP_Comp_Val_Rurl  = &SP.GPBR_COMP_VAL_RURL * 100
  Let $SEFIP_Comp_Val_Rurl  = To_Char(#SEFIP_Comp_Val_Rurl)
  Let #SEFIP_Comp_Val_R_Pr  = &SP.GPBR_COMP_VAL_R_PR * 100
  Let $SEFIP_Comp_Val_R_Pr  = To_Char(#SEFIP_Comp_Val_R_Pr)
  Let #SEFIP_Comp_Val_Spon  = &SP.GPBR_COMP_VAL_SPON * 100
  Let $SEFIP_Comp_Val_Spon  = To_Char(#SEFIP_Comp_Val_Spon)
  Let #SEFIP_Coop_Pay_Val   = &SP.GPBR_COOP_PAY_VAL * 100
  Let $SEFIP_Coop_Pay_Val   = To_Char(#SEFIP_Coop_Pay_Val)

FROM PS_GPBR_SEFIP_PARM SP
WHERE SP.ESTABID = $CurrentEstabId
!AND SP.YEARCD||SP.MONTHCD = (SELECT MAX(YEARCD||MONTHCD)
[$SQLString1]
                               FROM PS_GPBR_SEFIP_PARM
                              WHERE ESTABID = SP.ESTABID
                                !AND YEARCD||MONTHCD <= $RC_Comp_Year||$RC_Comp_Month)
                                [$SQLString2]
End-Select
End-Procedure Select-SEFIP-Parameters

!*****************************
!*** Process Establishment, sorting by inscription type and establishment id***
!*** It is required all establishments have it's ID according to inscription type ***
Begin-Procedure Process-Centrzed-Estab
#debug show 'Begin-Procedure Process-Centrzed-Estab **'
!*****************************
Begin-Select
CD2.ESTABID
CD3.COMP_INS_TYPE_BRA
CD4.ESTAB_ID_BRA
CD4.ESTAB_ID_TYPE_BRA

   Let $CurrentEstabId   = Rtrim(&CD2.ESTABID, ' ')
   Let $CompanyInscrType = Rtrim(&CD3.COMP_INS_TYPE_BRA, ' ')
   Let $Estabid_CNPJ_CEI = Rtrim(&CD4.ESTAB_ID_BRA, ' ')
   Let $EstabIdType      = Rtrim(&CD4.ESTAB_ID_TYPE_BRA,' ')

   !*** Only will process those matching records (inscription type and Id type) ***
   If (($CompanyInscrType = '10' And $EstabIdType = 'CNPJ') Or ($CompanyInscrType = '20' And $EstabIdType = 'CEI'))
     Do Process-Establishment
   End-If

FROM PS_CENTR_DTL_BRA CD2
,PS_ESTAB_TBL_BRA CD3
,PS_ESTAB_ID_BRA CD4
WHERE CD2.PROCESS_TYPE_BRA = '10'
  AND CD2.CENTR_ESTABID_BRA = $RC_Estabid
  AND CD2.ESTABID <> $RC_Estabid
  AND CD2.EFFDT = (SELECT MAX (CD2_A.EFFDT)
                   FROM PS_CENTR_DTL_BRA CD2_A
                   WHERE CD2.PROCESS_TYPE_BRA  = CD2_A.PROCESS_TYPE_BRA
                   AND CD2.CENTR_ESTABID_BRA = CD2_A.CENTR_ESTABID_BRA
                   AND CD2_A.EFFDT <= $EndDt)
  AND CD3.ESTABID = CD2.ESTABID
  AND CD3.EFFDT   = (SELECT MAX(CD3_A.EFFDT)
                     FROM PS_ESTAB_TBL_BRA CD3_A
                     WHERE CD3_A.ESTABID = CD3.ESTABID
                     AND   CD3_A.COUNTY_CD_BRA = CD3.COUNTY_CD_BRA
                     AND   CD3_A.EFFDT <= $EndDt)
  AND CD4.ESTABID = CD3.ESTABID
  AND CD4.EFFDT   = CD3.EFFDT
  AND CD4.COUNTY_CD_BRA = CD3.COUNTY_CD_BRA
  AND CD4.COUNTRY = 'BRA'
  AND CD4.ESTAB_ID_TYPE_BRA IN ('CNPJ','CEI')
ORDER BY CD3.COMP_INS_TYPE_BRA, CD4.ESTAB_ID_BRA
End-Select
End-Procedure Process-Centrzed-Estab

!*****************************
Begin-Procedure Get-Admission-Date
#debug show '      Begin-Procedure Get-Admission-Date **'
#debug show '         $Emplid           : ' $Emplid
#debug show '         #EmplRcd          : ' #EmplRcd
#debug show '         $LastDate         : ' $LastDate
#debug show '         $LastAction       : ' $LastAction
#debug show '         $EndDt            : ' $EndDt
!*****************************
move '            ' to $HireDt
move '            ' to $Admission_Dt_DTU
If Length(LTrim($LastDate, ' ')) = 0
  Let $LastDateSrch = $EndDt
Else
  Evaluate $LastAction
  When = 'TER'
  When = 'COM'
  When = 'LOF'
  !When = 'XFR'
    Do Convert-To-DTU-Date($LastDate, $LastDateDTU)
    Do DTU-Subtract-Days($LastDateDTU, 1, $LastDateDTU)
    Do Convert-From-DTU-Date($LastDateDTU, $LastDateSrch)
  When-Other
    Let $LastDateSrch = $LastDate
  End-Evaluate
End-If
Begin-Select
EMP.LAST_HIRE_DT

  Let $HireDt    = &EMP.LAST_HIRE_DT
  Do Convert-To-DTU-Date($HireDt, $Admission_Dt_DTU)

FROM PS_JOB EMP
WHERE EMP.EMPLID   = $Emplid
  AND EMP.EMPL_RCD = #EmplRcd
  !AND EMP.ACTION IN ('HIR','REH')
  AND EMP.EFFDT  = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = EMP.EMPLID AND EMPL_RCD = EMP.EMPL_RCD AND EFFDT <= $LastDateSrch)
  AND EMP.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = EMP.EMPLID AND EMPL_RCD = EMP.EMPL_RCD AND EFFDT = EMP.EFFDT AND ESTABID = EMP.ESTABID)
End-Select
#debug show '         $LastDateSrch     : ' $LastDateSrch
#debug show '         $Admission_Dt_DTU : ' $Admission_Dt_DTU
End-Procedure Get-Admission-Date

!*****************************
Begin-Procedure Get-National-IDs
#debug show '         Begin-Procedure Get-National-IDs '
!   C-RES   Militar Certificate
!   CPF     Person Registry & Work Card
! * CTPS    Work Card
!   ESTRAN  IDENTIFICAÇÃO DE ESTRANGEIRO
! / PASEP   PASEP
! * PIS     PIS
! * CAIXA   CAIXA
!   RG      General Registry
!   TIT-EL  Voter Registratrion Card
#debug show '      ** Get-National-IDs **'
#debug show '         $Emplid ' $Emplid
!*****************************
move '' to $National_PIS
move '' to $National_PASEP
move '' to $National_CTPS
move '' to $National_PIS_PASEP
Begin-Select
NID.EMPLID
NID.NATIONAL_ID_TYPE
NID.NATIONAL_ID

  Let $National_Id_Type = Rtrim(&NID.NATIONAL_ID_TYPE,' ')
  Let $National_Id = Rtrim(&NID.NATIONAL_ID,' ')

  Evaluate $National_Id_Type
  When = 'PIS'
     Let $National_PIS   = $National_Id
  Break
  When = 'PASEP'
     Let $National_PASEP = $National_Id
  Break
  When = 'CTPS'
     Let $National_CTPS  = $National_Id
     Let $National_CTPS  = Edit($National_CTPS, '0000000')
  Break
  When = 'CAIXA'
     Let $National_CAIXA = $National_Id
  Break
  When = 'CPF'
     Let $National_CPF = $National_Id
     If $National_CTPS = ''
        Let $National_CTPS  = Substr($National_Id, 1, 7)
        Let $National_CTPS  = Edit($National_CTPS, '0000000') ! Digital CTPS
     End-If
  Break  
  End-Evaluate

  If $National_PIS <> ''
     Let $National_PIS_PASEP = $National_PIS
  Else
     Let $National_PIS_PASEP = $National_PASEP
  End-If

FROM PS_PERS_NID NID
WHERE NID.EMPLID  = $Emplid
  AND NID.COUNTRY = 'BRA'
  AND NID.NATIONAL_ID_TYPE IN ('CAIXA','CTPS','PIS','PASEP','CPF')
End-Select

If $National_PIS_PASEP = ''
  show '         '$Emplid '      Falta Numero de Identificação PIS/PASEP'
End-If

End-Procedure Get-National-IDs

!*****************************
Begin-Procedure Process-Service-Takers
#debug show 'Begin-Procedure Process-Service-Takers **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$RC_Process_ST_Structure ' $RC_Process_ST_Structure
!*****************************

Begin-Select
ST.GPBR_SERVICE_TAKER
ST.EFFDT
ST.EFF_STATUS
ST.DESCR
ST.ADDRESS1
ST.ADDRESS2
ST.ADDRESS3
ST.ADDRESS4
ST.CITY
ST.NUM1
ST.STATE
ST.POSTAL
ST.GPBR_TAKE_INS_TYPE
ST.GPBR_TAKER_INSCR

  Let $Service_Taker   = Rtrim(&ST.GPBR_SERVICE_TAKER, ' ')
  Let $STaker_Descr    = Rtrim(&ST.DESCR,' ')
  Let $STaker_Addr1    = Rtrim(&ST.ADDRESS1,' ')
  Let $STaker_Num1     = Rtrim(&ST.NUM1,' ')
  Let $STaker_Addr2    = Rtrim(&ST.ADDRESS2,' ')
  Let $STaker_Addr3    = Rtrim(&ST.ADDRESS3,' ')
  Let $STaker_Addr4    = Rtrim(&ST.ADDRESS4,' ')
  Let $STaker_Postal   = Rtrim(&ST.POSTAL,' ')
  Let $STaker_City     = Rtrim(&ST.CITY,' ')
  Let $STaker_State    = Rtrim(&ST.STATE,' ')
  Let $Address_STaker  = $STaker_Addr1 || ' ' || $STaker_Num1 || ' ' || $STaker_Addr2
  Let $STaker_Ins_Type = &ST.GPBR_TAKE_INS_TYPE
  Do FILL_LEADING (&ST.GPBR_TAKER_INSCR,'0', 14, 'L',$STaker_Inscr)
  !Let $STaker_Inscr    = Edit(&ST.GPBR_TAKER_INSCR, '00000000000000')

  Do Str-Delete-Chars( $STaker_Postal , '-' , $PostalEnd )
  Let $Postal        = Substr($PostalEnd,1,8)
  Let #Postal        = To_Number($Postal)
  Let $STaker_Postal = Edit(#Postal, '00000000')

  Let #ST-FamilySalary = 0
  Do Prcs-STaker-Transactions

  Do Get-STaker-Monthly-Data
  Do Prepare-Reg20
  Do Prepare-Reg21


FROM PS_GPBR_SERV_TAKER ST
WHERE ST.EFF_STATUS = 'A'
AND ST.GPBR_PRC_ST_FLAG = $RC_Process_ST_Structure
AND ST.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SERV_TAKER WHERE GPBR_SERVICE_TAKER = ST.GPBR_SERVICE_TAKER AND EFFDT <= $EndDt)
AND (ST.GPBR_SERVICE_TAKER IN (SELECT GPBR_SERVICE_TAKER FROM PS_GPBR_SERV_T_DTL WHERE YEARCD = $RC_Comp_Year AND MONTHCD = $CompetencyMonth)
 OR  ST.GPBR_SERVICE_TAKER IN (SELECT PP.GPBR_SERVICE_TAKER FROM PS_GPBR_PAYEE_PARM PP , PS_JOB JB
                               WHERE PP.BGN_DT = (SELECT MAX(BGN_DT) FROM PS_GPBR_PAYEE_PARM WHERE EMPLID = PP.EMPLID
                                                 AND EMPL_RCD = PP.EMPL_RCD AND BGN_DT <= $EndDt)
                               AND JB.EMPLID = PP.EMPLID AND JB.EMPL_RCD = PP.EMPL_RCD
                               AND JB.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JB.EMPLID AND EMPL_RCD = JB.EMPL_RCD AND EFFDT <= $EndDt)
                               AND JB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = JB.EMPLID AND EMPL_RCD = JB.EMPL_RCD AND EFFDT = JB.EFFDT AND ESTABID = JB.ESTABID)
                               AND JB.ESTABID = $CurrentEstabId))
End-Select

Begin-Select
STA.GPBR_SERVICE_TAKER
STA.EFFDT
STA.EFF_STATUS
STA.DESCR
STA.ADDRESS1
STA.ADDRESS2
STA.ADDRESS3
STA.ADDRESS4
STA.CITY
STA.NUM1
STA.STATE
STA.POSTAL
STA.GPBR_TAKE_INS_TYPE
STA.GPBR_TAKER_INSCR

  Let $Service_Taker   = Rtrim(&STA.GPBR_SERVICE_TAKER, ' ')
  Let $STaker_Descr    = Rtrim(&STA.DESCR,' ')
  Let $STaker_Addr1    = Rtrim(&STA.ADDRESS1,' ')
  Let $STaker_Num1     = Rtrim(&STA.NUM1,' ')
  Let $STaker_Addr2    = Rtrim(&STA.ADDRESS2,' ')
  Let $STaker_Addr3    = Rtrim(&STA.ADDRESS3,' ')
  Let $STaker_Addr4    = Rtrim(&STA.ADDRESS4,' ')
  Let $STaker_Postal   = Rtrim(&STA.POSTAL,' ')
  Let $STaker_City     = Rtrim(&STA.CITY,' ')
  Let $STaker_State    = Rtrim(&STA.STATE,' ')
  Let $Address_STaker  = $STaker_Addr1 || ' ' || $STaker_Num1 || ' ' || $STaker_Addr2
  Let $STaker_Ins_Type = &STA.GPBR_TAKE_INS_TYPE
  Do FILL_LEADING (&STA.GPBR_TAKER_INSCR,'0', 14, 'L',$STaker_Inscr)
  !Let $STaker_Inscr    = Edit(&STA.GPBR_TAKER_INSCR, '00000000000000')

  Do Str-Delete-Chars( $STaker_Postal , '-' , $PostalEnd )
  Let $Postal        = Substr($PostalEnd,1,8)
  Let #Postal        = To_Number($Postal)
  Let $STaker_Postal = Edit(#Postal, '00000000')

  Let #ST-FamilySalary = 0
  Do Prcs-STaker-Assigned-PParamters

  Do Get-STaker-Monthly-Data
  Do Prepare-Reg20
  Do Prepare-Reg21

FROM PS_GPBR_SERV_TAKER STA
WHERE STA.EFF_STATUS = 'A'
AND STA.GPBR_PRC_ST_FLAG = $RC_Process_ST_Structure
AND STA.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SERV_TAKER WHERE GPBR_SERVICE_TAKER = STA.GPBR_SERVICE_TAKER AND EFFDT <= $EndDt)
AND (STA.GPBR_SERVICE_TAKER IN (SELECT GPBR_SERVICE_TAKER FROM PS_GPBR_SERV_T_DTL WHERE YEARCD = $RC_Comp_Year AND MONTHCD = $CompetencyMonth)
 OR  STA.GPBR_SERVICE_TAKER IN (SELECT PP.GPBR_SERVICE_TAKER FROM PS_GPBR_PAYEE_PARM PP , PS_JOB JB
                               WHERE PP.BGN_DT = (SELECT MAX(BGN_DT) FROM PS_GPBR_PAYEE_PARM WHERE EMPLID = PP.EMPLID
                                                 AND EMPL_RCD = PP.EMPL_RCD AND BGN_DT <= $EndDt)
                               AND JB.EMPLID = PP.EMPLID AND JB.EMPL_RCD = PP.EMPL_RCD
                               AND JB.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = JB.EMPLID AND EMPL_RCD = JB.EMPL_RCD AND EFFDT <= $EndDt)
                               AND JB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = JB.EMPLID AND EMPL_RCD = JB.EMPL_RCD AND EFFDT = JB.EFFDT AND ESTABID = JB.ESTABID)
                               AND JB.ESTABID = $CurrentEstabId))
End-Select
End-Procedure Process-Service-Takers

!*****************************
Begin-Procedure Process-ST-Autonomous
#debug show 'Begin-Procedure Process-ST-Autonomous **'
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$Estabid_CNPJ_CEI ' $Estabid_CNPJ_CEI
!Begin-Document
! Procedure   : Process-ST-Autonomous
! Description : Process Service Takers for Autonomous, it is necessary when the report will print only Autonomous.
!
! Input Vars  :
!               $EndDt
!               $RC_Comp_Year
!               $RC_Comp_Month
!               $Estabid_CNPJ_CEI
!
! Output Vars :
!               $Service_Taker
!               $STaker_Descr
!               $STaker_Addr1
!               $STaker_Num1
!               $STaker_Addr2
!               $STaker_Addr3
!               $STaker_Addr4
!               $STaker_Postal
!               $STaker_City
!               $STaker_State
!               $Address_STaker
!               $STaker_Ins_Type
!
!End-Document
!*****************************

Begin-Select DISTINCT
STU.GPBR_SERVICE_TAKER
STU.EFFDT
STU.EFF_STATUS
STU.DESCR
STU.ADDRESS1
STU.ADDRESS2
STU.ADDRESS3
STU.ADDRESS4
STU.CITY
STU.NUM1
STU.STATE
STU.POSTAL
STU.GPBR_TAKE_INS_TYPE
STU.GPBR_TAKER_INSCR

  Let $Service_Taker   = Rtrim(&STU.GPBR_SERVICE_TAKER, ' ')
  Let $STaker_Descr    = Rtrim(&STU.DESCR,' ')
  Let $STaker_Addr1    = Rtrim(&STU.ADDRESS1,' ')
  Let $STaker_Num1     = Rtrim(&STU.NUM1,' ')
  Let $STaker_Addr2    = Rtrim(&STU.ADDRESS2,' ')
  Let $STaker_Addr3    = Rtrim(&STU.ADDRESS3,' ')
  Let $STaker_Addr4    = Rtrim(&STU.ADDRESS4,' ')
  Let $STaker_Postal   = Rtrim(&STU.POSTAL,' ')
  Let $STaker_City     = Rtrim(&STU.CITY,' ')
  Let $STaker_State    = Rtrim(&STU.STATE,' ')
  Let $Address_STaker  = $STaker_Addr1 || ' ' || $STaker_Num1 || ' ' || $STaker_Addr2
  Let $STaker_Ins_Type = &STU.GPBR_TAKE_INS_TYPE
  Do FILL_LEADING (&STU.GPBR_TAKER_INSCR,'0', 14, 'L',$STaker_Inscr)
  !Let $STaker_Inscr    = Edit(&STU.GPBR_TAKER_INSCR, '00000000000000')

  Do Str-Delete-Chars( $STaker_Postal , '-' , $PostalEnd )
  Let $Postal        = Substr($PostalEnd,1,8)
  Let #Postal        = To_Number($Postal)
  Let $STaker_Postal = Edit(#Postal, '00000000')

  Let #ST-FamilySalary = 0
  Do Prcs-STaker-Assigned-PParamters

  Do Get-STaker-Monthly-Data
  Do Prepare-Reg20
  Do Prepare-Reg21

FROM PS_GPBR_SERV_TAKER STU
, PS_GPBR_SEFIP_AUTO SAU
WHERE STU.EFF_STATUS = 'A'
AND STU.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SERV_TAKER WHERE GPBR_SERVICE_TAKER = STU.GPBR_SERVICE_TAKER AND EFFDT <= $EndDt)
AND STU.GPBR_TAKE_INS_TYPE = SAU.GPBR_TAKE_INS_TYPE
AND STU.GPBR_TAKER_INSCR = SAU.GPBR_STAKER_INSCR
AND SAU.GPBR_END_YEAR = $RC_Comp_Year
AND SAU.GPBR_START_MONTH = $RC_Comp_Month
AND SAU.GPBR_INSCR  = $Estabid_CNPJ_CEI
!AND NOT EXISTS (SELECT GPBR_STAKER_INSCR FROM PS_GPBR_R20_SEFIP WHERE GPBR_STAKER_INSCR = SAU.GPBR_INSCR)
End-Select
End-Procedure Process-ST-Autonomous

!*****************************
Begin-Procedure Process-Remaining-Percentage
#debug show 'Begin-Procedure Process-Remaining-Percentage **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$EmplFilter     ' $EmplFilter
!*****************************
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'PJC')

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP4')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP4')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS3')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD5')

Begin-Select DISTINCT
PJC.EMPLID
PJC.EFFDT
PJC.EMPL_RCD
PJC.EMPL_STATUS
PJC.ACTION
PJU.CBO_CD_BRA
PJU.SEFIP_CATEGORY_BRA

  Let $Staker_Trans = 'Y'
  Let $Emplid     = &PJC.EMPLID
  Let $Job_Effdt  = &PJC.EFFDT
  Let #EmplRcd    = &PJC.EMPL_RCD
  Let $EmplStatus = &PJC.EMPL_STATUS
  Let $CBO_CD     = &PJU.CBO_CD_BRA
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &PJU.SEFIP_CATEGORY_BRA
  Do Get-Empl-Data
  do Get-Payee-Parameters
  Do Get-National-IDs
  Let $LastDate = ''
  Do Get-Admission-Date

  If $National_PIS_PASEP <> ''
    !Let $LastAction = ''
    Let $LastAction = &PJC.ACTION
    Do Get-Employee-Distrib-Percentage
    Let #Employee-ST-Percentage = 100 - #SumOfPercentages
    If #Employee-ST-Percentage > 0
      Do Get-Segment-Dates
      Do Get-Employee-WA-Data
      Do Prepare-Reg30
    End-If
  End-If

FROM PS_GPBR_SEFIP_WA  WD5
   , PS_GP_RSLT_SEG_VW RS3
   , PS_JOB            PJC
   , PS_JOB_JR         PJU
   , PS_GPBR_R_SEFIP   RSE
[$GPCalTbl]
WHERE WD5.ESTABID = $CurrentEstabId
AND WD5.ORIG_CAL_RUN_ID = WD5.CAL_RUN_ID
AND RS3.EMPLID        = WD5.EMPLID
AND RS3.EMPL_RCD      = WD5.EMPL_RCD
AND RS3.CAL_RUN_ID    = WD5.CAL_RUN_ID
AND RS3.GP_PAYGROUP   = WD5.GP_PAYGROUP
AND RS3.CAL_ID        = WD5.CAL_ID
AND RS3.ORIG_CAL_RUN_ID = WD5.ORIG_CAL_RUN_ID
AND RS3.RSLT_SEG_NUM  = WD5.RSLT_SEG_NUM
AND RS3.SEG_BGN_DT   >= $BgnDt
AND RS3.SEG_END_DT   <= $EndDt
[$SEFIPFilter]
AND PJC.EMPLID        = WD5.EMPLID
AND PJC.EMPL_RCD      = WD5.EMPL_RCD
AND PJC.ESTABID       = WD5.ESTABID
!AND PJC.EFFDT         = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJC.EMPLID AND EMPL_RCD = PJC.EMPL_RCD AND ESTABID = PJC.ESTABID AND ACTION IN ('HIR', 'XFR', 'REH', 'POI') AND EFFDT <= $EndDt)
AND PJC.EFFDT         = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJC.EMPLID AND EMPL_RCD = PJC.EMPL_RCD AND ESTABID = PJC.ESTABID AND ACTION IN ([$SQL_HIR_REH_XFR_POI]) AND EFFDT <= $EndDt)
AND PJC.EFFSEQ        = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = PJC.EMPLID AND EMPL_RCD = PJC.EMPL_RCD AND ESTABID = PJC.ESTABID AND EFFDT = PJC.EFFDT)
AND PJU.EMPLID        = PJC.EMPLID
AND PJU.EMPL_RCD      = PJC.EMPL_RCD
AND PJU.EFFDT         = PJC.EFFDT
AND PJU.EFFSEQ        = PJC.EFFSEQ
AND PJU.SEFIP_CATEGORY_BRA <> '22'
AND PJC.EMPLID        = RSE.EMPLID
AND RSE.PROCESS_INSTANCE = #prcs_process_instance
AND (SELECT SUM(GPBR_EMP_PERC_CONT)
     FROM PS_GPBR_R_SEFIP
     WHERE EMPLID         = RSE.EMPLID
     AND PROCESS_INSTANCE = #prcs_process_instance
     GROUP BY EMPLID) < 100
End-Select
End-Procedure Process-Remaining-Percentage

!*****************************
Begin-Procedure Prcs-Administrative-Empls
#debug show 'Begin-Procedure Prcs-Administrative-Empls **'
!Employees which are not assigned to a service taker.
#debug show '** Prcs-Administrative-Empls **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$RehComp_Norm:  ' $RehComp_Norm
!*****************************
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'PJB')

!Replace the alias for job and result tables in filters to select normal or hired / rehired and complementary payment.
If $RehComp_Norm = 'N'
   Let $EmplFilterRC_N = Replace($FilterRCN_N, 'JOB', 'PJB')
Else
   Let $EmplFilterRC_N = Replace($FilterRCN_RC,'JOB', 'PJB')
End-If
Let $EmplFilterRC_N = Replace($EmplFilterRC_N, 'RSL', 'RS2')

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP5')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP5')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS2')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD3')

Begin-Select DISTINCT
PJB.EMPLID
PJB.EMPL_RCD
PJB.EFFDT
PJB.ACTION
PJB.EMPL_STATUS
PJR.CBO_CD_BRA
PJR.SEFIP_CATEGORY_BRA
RS2.SEG_BGN_DT
RS2.SEG_END_DT

  Let $Staker_Trans = 'Y'
  Let $Emplid     = &PJB.EMPLID
  Let $Job_Effdt  = &PJB.EFFDT
  Let #EmplRcd    = &PJB.EMPL_RCD
  Let $EmplStatus = &PJB.EMPL_STATUS
  Let $CBO_CD     = &PJR.CBO_CD_BRA
  LeT $SegEmplBgnDt = &RS2.SEG_BGN_DT
  LeT $SegEmplEndDt = &RS2.SEG_END_DT

  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD     = $CBO_CD_End
  Let $CBO_CD     = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &PJR.SEFIP_CATEGORY_BRA

  Do Get-Empl-Data
  do Get-Payee-Parameters
  Do Get-National-IDs
  Let $LastDate   = &PJB.EFFDT
  Let $LastAction = &PJB.ACTION
  !Let $LastDate = ''
  Do Get-Admission-Date

  If $National_PIS_PASEP <> ''
    Do Get-Segment-Dates
    Let #Employee-ST-Percentage = 100
    Do Get-Employee-WA-Data
    Do Prepare-Reg30
  End-If

FROM PS_GPBR_SEFIP_WA  WD3
   , PS_GP_RSLT_SEG_VW RS2
   , PS_JOB            PJB
   , PS_JOB_JR         PJR
[$GPCalTbl]
WHERE WD3.ESTABID  = $CurrentEstabId
AND WD3.ORIG_CAL_RUN_ID = WD3.CAL_RUN_ID
AND WD3.GPBR_GATHERING_CD = 'NA'
AND RS2.EMPLID        = WD3.EMPLID
AND RS2.EMPL_RCD      = WD3.EMPL_RCD
AND RS2.CAL_RUN_ID    = WD3.CAL_RUN_ID
AND RS2.GP_PAYGROUP   = WD3.GP_PAYGROUP
AND RS2.CAL_ID        = WD3.CAL_ID
AND RS2.ORIG_CAL_RUN_ID = WD3.ORIG_CAL_RUN_ID
AND RS2.RSLT_SEG_NUM  = WD3.RSLT_SEG_NUM
AND RS2.SEG_BGN_DT   >= $BgnDt
AND RS2.SEG_END_DT   <= $EndDt
[$SEFIPFilter]
AND PJB.EMPLID        = WD3.EMPLID
AND PJB.EMPL_RCD      = WD3.EMPL_RCD
AND PJB.ESTABID       = WD3.ESTABID
[$EmplFilterRC_N]
!AND PJB.EFFDT         = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJB.EMPLID AND EMPL_RCD = PJB.EMPL_RCD AND ACTION IN ('HIR', 'XFR', 'REH', 'POI') AND EFFDT <= $EndDt)
AND PJB.EFFDT         = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJB.EMPLID AND EMPL_RCD = PJB.EMPL_RCD AND ACTION IN ([$SQL_HIR_REH_XFR_POI]) AND EFFDT <= $EndDt)
AND PJB.EFFSEQ        = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = PJB.EMPLID AND EMPL_RCD = PJB.EMPL_RCD AND EFFDT = PJB.EFFDT AND ESTABID = PJB.ESTABID)
[$EmplFilterLocal]
AND PJB.EMPLID NOT IN (SELECT EMPLID FROM PS_GPBR_SERV_T_DTL WHERE YEARCD = $RC_Comp_Year AND MONTHCD = $CompetencyMonth
                       AND EMPLID = PJB.EMPLID AND EMPL_RCD = PJB.EMPL_RCD AND ESTABID = PJB.ESTABID)
AND PJB.EMPLID NOT IN (SELECT PP.EMPLID FROM PS_GPBR_PAYEE_PARM PP, PS_GPBR_SERV_TAKER ST WHERE PP.EMPLID = PJB.EMPLID AND PP.EMPL_RCD  = PJB.EMPL_RCD
                       AND PP.BGN_DT = (SELECT MAX(BGN_DT) FROM PS_GPBR_PAYEE_PARM WHERE EMPLID = PP.EMPLID AND EMPL_RCD = PP.EMPL_RCD
                                        AND BGN_DT <= $EndDt)
                       AND PP.GPBR_SERVICE_TAKER =  ST.GPBR_SERVICE_TAKER
                       AND ST.EFF_STATUS = 'A'
                       AND ST.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPBR_SERV_TAKER WHERE GPBR_SERVICE_TAKER = ST.GPBR_SERVICE_TAKER
                                       AND EFF_STATUS = ST.EFF_STATUS AND EFFDT <= $EndDt ))
AND PJR.EMPLID   = PJB.EMPLID
AND PJR.EMPL_RCD = PJB.EMPL_RCD
AND PJR.EFFDT    = PJB.EFFDT
AND PJR.EFFSEQ   = PJB.EFFSEQ
AND PJR.SEFIP_CATEGORY_BRA <> '22'
End-Select
End-Procedure Prcs-Administrative-Empls

!*****************************
Begin-Procedure Add-Maternity-Leave-Empls
#debug show 'Begin-Procedure Add-Maternity-Leave-Empls **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$BgnDt          ' $BgnDt
#debug show '$EndDt          ' $EndDt
!*****************************
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'PJOB')

Let $CurrentEstabIdBkup  = $CurrentEstabId
Let $IncludeCurrentEstab = 'N'
Do Get-Related-Establishments
If Length($EstabList) > 0
Begin-Select
PJOB.ESTABID
PJOB.EMPLID
PJOB.EFFDT
PJOB.EMPL_RCD
PJOB.EMPL_STATUS
PJOR.CBO_CD_BRA
PJOR.SEFIP_CATEGORY_BRA

  Let $Staker_Trans = 'Y'
  Let $CurrentEstabId = &PJOB.ESTABID
  Let $Emplid     = &PJOB.EMPLID
  Let $Job_Effdt  = &PJOB.EFFDT
  Let #EmplRcd    = &PJOB.EMPL_RCD
  Let $EmplStatus = &PJOB.EMPL_STATUS

  #Debug show '    JOB3.EMPL_STATUS  MAT-LEAVE :' &JOB3.EMPL_STATUS

  Let $CBO_CD     = &PJOR.CBO_CD_BRA
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &PJOR.SEFIP_CATEGORY_BRA
  Do Get-Empl-Data
  do Get-Payee-Parameters
  Do Get-National-IDs
  Let $LastDate = ''
  Do Get-Admission-Date

  If $National_PIS_PASEP <> ''
    Do Get-Segment-Dates
    Let #Employee-ST-Percentage = 100
    Do Get-Employee-WA-Data
    Do Prepare-Reg30
  End-If

FROM PS_GPBR_SEFIP_WA WD4
    ,PS_JOB           PJOB
    ,PS_JOB_JR        PJOR
    ,PS_GP_ABS_EVENT  P2BE
    ,PS_GP_ABS_TAKE   P2BT
    ,PS_GPBR_SEFIP_ABSP P2BP
WHERE WD4.ESTABID    IN ([$EstabList])
  AND WD4.CAL_RUN_ID IN (SELECT DISTINCT CAL_RUN_ID
                           FROM PS_GP_CAL_RUN_DTL
                          WHERE CAL_ID       = WD4.CAL_ID
                            AND COUNTRY      = 'BRA'
                            AND CALC_TYPE    = 'P'
                            AND PRD_BGN_DT  >= $BgnDt
                            AND PRD_END_DT  <= $EndDt)
  AND WD4.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM)
                            FROM PS_GPBR_SEFIP_WA
                           WHERE EMPLID      = WD4.EMPLID
                             AND CAL_RUN_ID  = WD4.CAL_RUN_ID
                             AND EMPL_RCD    = WD4.EMPL_RCD
                             AND ESTABID     = WD4.ESTABID
                             AND CAL_ID      = WD4.CAL_ID
                             AND ORIG_CAL_RUN_ID = WD4.ORIG_CAL_RUN_ID)
AND PJOB.EMPLID   = WD4.EMPLID
AND PJOB.EMPL_RCD = WD4.EMPL_RCD
AND PJOB.ESTABID  = WD4.ESTABID
!AND ((PJOB.EFFDT      BETWEEN $BgnDt AND $EndDt AND ACTION IN ('TER','REH','HIR', 'POI'))
AND ((PJOB.EFFDT      BETWEEN $BgnDt AND $EndDt AND ACTION IN ([$SQL_TER_REH_HIR_POI]))

!OR    PJOB.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJOB.EMPLID AND EMPL_RCD = PJOB.EMPL_RCD AND ESTABID = PJOB.ESTABID AND ACTION IN ('HIR', 'XFR', 'REH', 'POI') AND EFFDT <= $EndDt))
OR    PJOB.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJOB.EMPLID AND EMPL_RCD = PJOB.EMPL_RCD AND ESTABID = PJOB.ESTABID AND ACTION IN ([SQL_HIR_REH_XFR_POI]) AND EFFDT <= $EndDt))
AND PJOB.EFFSEQ   = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = PJOB.EMPLID AND EMPL_RCD = PJOB.EMPL_RCD AND ESTABID = PJOB.ESTABID AND EFFDT = PJOB.EFFDT)
[$EmplFilterLocal]
AND PJOR.EMPLID   = PJOB.EMPLID
AND PJOR.EMPL_RCD = PJOB.EMPL_RCD
AND PJOR.EFFDT    = PJOB.EFFDT
AND PJOR.EFFSEQ   = PJOB.EFFSEQ
AND PJOR.SEFIP_CATEGORY_BRA <> '22'
AND PJOB.EMPLID   = P2BE.EMPLID
AND PJOB.EMPL_RCD = P2BE.EMPL_RCD
AND P2BE.PIN_TAKE_NUM = P2BT.PIN_NUM
AND (P2BE.BGN_DT BETWEEN $BgnDt and $EndDt
  OR P2BE.END_DT BETWEEN $BgnDt and $EndDt
  OR (P2BE.BGN_DT < $BgnDt
      AND P2BE.END_DT > $EndDt))
AND P2BE.PIN_TAKE_NUM IN  (SELECT GPP.PIN_NUM
                             FROM PS_GP_PIN GPP
                            WHERE GPP.COUNTRY  = 'BRA'
                              AND GPP.PIN_TYPE = 'AT')
AND P2BT.EFFDT          = (SELECT MAX(GP2.EFFDT)
                             FROM PS_GP_ABS_TAKE GP2
                            WHERE GP2.PIN_NUM = P2BT.PIN_NUM
                              AND GP2.EFFDT  <= $EndDt)
AND P2BP.PIN_TAKE_NUM   = P2BE.PIN_TAKE_NUM
AND P2BP.ABSENCE_REASON = P2BE.ABSENCE_REASON
AND P2BP.EFFDT          = (SELECT MAX(GP3.EFFDT)
                             FROM PS_GPBR_SEFIP_ABSP GP3
                            WHERE GP3.PIN_TAKE_NUM   = P2BP.PIN_TAKE_NUM
                              AND GP3.ABSENCE_REASON = P2BP.ABSENCE_REASON
                              AND GP3.EFFDT         <= $EndDt)
AND P2BP.GPBR_ABSENCE_CODE IN ('Q1','Q2','Q3','Q4','Q5','Q6')
End-Select
End-If
Let $CurrentEstabId = $CurrentEstabIdBkup
End-Procedure Add-Maternity-Leave-Empls

!*****************************
Begin-Procedure Prcs-STaker-Transactions
#debug show 'Begin-Procedure Prcs-STaker-Transactions **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$Service_Taker  ' $Service_Taker
!*****************************
Let $In_Staker    = 'Y'
Let $Staker_Trans = 'N'

!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'PJB1')

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP6')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP6')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS6')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD1')

!Process Employees Associated Through Service Taker Transaction.
Begin-Select DISTINCT
PJB1.EMPLID
PJB1.EFFDT
PJB1.EMPL_RCD
PJB1.EMPL_STATUS
PJB1.ACTION
PJR1.CBO_CD_BRA
PJR1.SEFIP_CATEGORY_BRA
STD1.GPBR_EMP_PERC_CONT

  Let $Staker_Trans = 'Y'
  Let $Emplid     = &PJB1.EMPLID
  Let $Job_Effdt  = &PJB1.EFFDT
  Let #EmplRcd    = &PJB1.EMPL_RCD
  Let $EmplStatus = &PJB1.EMPL_STATUS
  Let $CBO_CD     = &PJR1.CBO_CD_BRA
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &PJR1.SEFIP_CATEGORY_BRA
  Do Get-Empl-Data
  do Get-Payee-Parameters
  Do Get-National-IDs
  Let $LastDate = $Job_Effdt
  Let $LastAction = &PJB1.ACTION
  Do Get-Admission-Date

  If $National_PIS_PASEP <> ''
    Do Get-Segment-Dates
    Let #Employee-ST-Percentage = &STD1.GPBR_EMP_PERC_CONT
    Do Get-Employee-WA-Data
    Do Prepare-Reg30
  End-If

FROM PS_GPBR_SEFIP_WA   WD1
   , PS_GP_RSLT_SEG_VW  RS6
   , PS_JOB             PJB1
   , PS_JOB_JR          PJR1
   , PS_GPBR_SERV_T_DTL STD1
[$GPCalTbl]
WHERE WD1.ESTABID     = $CurrentEstabId
AND WD1.ORIG_CAL_RUN_ID = WD1.CAL_RUN_ID
AND RS6.EMPLID        = WD1.EMPLID
AND RS6.EMPL_RCD      = WD1.EMPL_RCD
AND RS6.CAL_RUN_ID    = WD1.CAL_RUN_ID
AND RS6.GP_PAYGROUP   = WD1.GP_PAYGROUP
AND RS6.CAL_ID        = WD1.CAL_ID
AND RS6.ORIG_CAL_RUN_ID = WD1.ORIG_CAL_RUN_ID
AND RS6.RSLT_SEG_NUM  = WD1.RSLT_SEG_NUM
AND RS6.SEG_BGN_DT   >= $BgnDt
AND RS6.SEG_END_DT   <= $EndDt
[$SEFIPFilter]
AND PJB1.EMPLID       = WD1.EMPLID
AND PJB1.EMPL_RCD     = WD1.EMPL_RCD
AND PJB1.ESTABID      = WD1.ESTABID
!AND PJB1.EFFDT        = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJB1.EMPLID AND EMPL_RCD = PJB1.EMPL_RCD AND ACTION IN ('HIR', 'XFR', 'REH', 'POI') AND EFFDT <= $EndDt)
AND PJB1.EFFDT        = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = PJB1.EMPLID AND EMPL_RCD = PJB1.EMPL_RCD AND ACTION IN ([$SQL_HIR_REH_XFR_POI]) AND EFFDT <= $EndDt)
AND PJB1.EFFSEQ       = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = PJB1.EMPLID AND EMPL_RCD = PJB1.EMPL_RCD AND EFFDT = PJB1.EFFDT AND ESTABID = PJB1.ESTABID)
[$EmplFilterLocal]
AND PJR1.EMPLID       = PJB1.EMPLID
AND PJR1.EMPL_RCD     = PJB1.EMPL_RCD
AND PJR1.EFFDT        = PJB1.EFFDT
AND PJR1.EFFSEQ       = PJB1.EFFSEQ
AND PJR1.SEFIP_CATEGORY_BRA <> '22'
AND STD1.EMPLID       = PJB1.EMPLID
AND STD1.EMPL_RCD     = PJB1.EMPL_RCD
AND STD1.ESTABID      = PJB1.ESTABID
AND STD1.YEARCD       = $RC_Comp_Year
AND STD1.MONTHCD      = $CompetencyMonth
AND STD1.GPBR_SERVICE_TAKER = $Service_Taker
End-Select
End-Procedure Prcs-STaker-Transactions

!*****************************
Begin-Procedure Prcs-STaker-Assigned-PParamters
#debug show 'Begin-Procedure Prcs-STaker-Assigned-PParamters **'
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$EndDt          ' $EndDt
#debug show '$RC_Comp_Year   ' $RC_Comp_Year
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '$Service_Taker  ' $Service_Taker
!*****************************
!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'PJB2')

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP7')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP7')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS7')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD6')

!Process Employees Associated Through Payee Parameters.
Begin-Select
PJB2.EMPLID
PJB2.EFFDT
PJB2.EMPL_RCD
PJB2.EMPL_STATUS
PJB2.ACTION
PJR2.CBO_CD_BRA
PJR2.SEFIP_CATEGORY_BRA

  Let $Staker_Trans = 'Y'
  Let $Emplid     = &PJB2.EMPLID
  Let $Job_Effdt  = &PJB2.EFFDT
  Let #EmplRcd    = &PJB2.EMPL_RCD
  Let $EmplStatus = &PJB2.EMPL_STATUS
  Let $CBO_CD     = &PJR2.CBO_CD_BRA
  Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
  Let $CBO_CD = $CBO_CD_End
  Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

  Let $SEFIP_Cat  = &PJR2.SEFIP_CATEGORY_BRA
  Do Get-Empl-Data
  do Get-Payee-Parameters
  Do Get-National-IDs
  Let $LastDate = $Job_Effdt
  Let $LastAction = &PJB2.ACTION
  Do Get-Admission-Date

  If $National_PIS_PASEP <> ''
    !If $LastAction = 'TER'
    !  Let #Employee-ST-Percentage = 100
    !Else
      Do Get-Employee-Distrib-Percentage
      Let #Employee-ST-Percentage = 100 - #SumOfPercentages
    !End-If
    Do Get-Segment-Dates
    Do Get-Employee-WA-Data
    Do Prepare-Reg30
  End-If

FROM PS_GPBR_SEFIP_WA   WD6
   , PS_GP_RSLT_SEG_VW  RS7
   , PS_JOB             PJB2
   , PS_JOB_JR          PJR2
   , PS_GPBR_PAYEE_PARM PP
   , PS_GPBR_SERV_TAKER SRT2
[$GPCalTbl]
WHERE WD6.ESTABID       = $CurrentEstabId
  AND WD6.ORIG_CAL_RUN_ID = WD6.CAL_RUN_ID
  AND RS7.EMPLID        = WD6.EMPLID
  AND RS7.EMPL_RCD      = WD6.EMPL_RCD
  AND RS7.CAL_RUN_ID    = WD6.CAL_RUN_ID
  AND RS7.GP_PAYGROUP   = WD6.GP_PAYGROUP
  AND RS7.CAL_ID        = WD6.CAL_ID
  AND RS7.ORIG_CAL_RUN_ID = WD6.ORIG_CAL_RUN_ID
  AND RS7.RSLT_SEG_NUM  = WD6.RSLT_SEG_NUM
  AND RS7.SEG_BGN_DT   >= $BgnDt
  AND RS7.SEG_END_DT   <= $EndDt
[$SEFIPFilter]
  AND PJB2.EMPLID      = WD6.EMPLID
  AND PJB2.EMPL_RCD    = WD6.EMPL_RCD
  AND PJB2.ESTABID     = WD6.ESTABID
  AND PJB2.EFFDT       = (SELECT MAX(EFFDT)  FROM PS_JOB WHERE EMPLID = PJB2.EMPLID AND EMPL_RCD = PJB2.EMPL_RCD AND EFFDT <= $EndDt)
  AND PJB2.EFFSEQ      = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = PJB2.EMPLID AND EMPL_RCD = PJB2.EMPL_RCD AND EFFDT = PJB2.EFFDT AND ESTABID = PJB2.ESTABID)
[$EmplFilterLocal]
  AND PJR2.EMPLID      = PJB2.EMPLID
  AND PJR2.EMPL_RCD    = PJB2.EMPL_RCD
  AND PJR2.EFFDT       = PJB2.EFFDT
  AND PJR2.EFFSEQ      = PJB2.EFFSEQ
  AND PJR2.SEFIP_CATEGORY_BRA <> '22'
  AND PP.EMPLID        = PJB2.EMPLID
  AND PP.EMPL_RCD      = PJB2.EMPL_RCD
  AND PP.BGN_DT        = (SELECT MAX(BGN_DT) FROM PS_GPBR_PAYEE_PARM WHERE EMPLID = PP.EMPLID AND EMPL_RCD = PP.EMPL_RCD AND BGN_DT <= $EndDt)
  AND PP.GPBR_SERVICE_TAKER = SRT2.GPBR_SERVICE_TAKER
!If employee has been processed with a service taker , don't do it again to prevent duplicity.
  AND NOT EXISTS (SELECT STX1.GPBR_SERVICE_TAKER
                   FROM PS_GPBR_SERV_TAKER STX1, PS_GPBR_R_SEFIP GRX1
                  WHERE STX1.GPBR_TAKE_INS_TYPE = GRX1.GPBR_TAKE_INS_TYPE
                    AND GRX1.PROCESS_INSTANCE = #prcs_process_instance
                    AND STX1.GPBR_TAKER_INSCR = GRX1.GPBR_STAKER_INSCR
                    AND STX1.GPBR_SERVICE_TAKER = SRT2.GPBR_SERVICE_TAKER
                    AND STX1.EFF_STATUS = 'A'
                    AND STX1.EFFDT = (SELECT MAX(EFFDT)
                                        FROM PS_GPBR_SERV_TAKER
                                       WHERE GPBR_SERVICE_TAKER = STX1.GPBR_SERVICE_TAKER
                                        AND EFF_STATUS = STX1.EFF_STATUS)
                    AND GRX1.EMPLID = PP.EMPLID
                    AND GRX1.EMPL_STATUS = 'A')
 AND SRT2.GPBR_SERVICE_TAKER = $Service_Taker
 AND SRT2.EFF_STATUS         = 'A'
 AND SRT2.EFFDT    = (SELECT MAX(EFFDT) FROM PS_GPBR_SERV_TAKER WHERE GPBR_SERVICE_TAKER = SRT2.GPBR_SERVICE_TAKER
                      AND EFF_STATUS = SRT2.EFF_STATUS AND EFFDT <= $EndDt)
End-Select
End-Procedure Prcs-STaker-Assigned-PParamters

!*****************************
Begin-Procedure Get-Employee-Distrib-Percentage
#debug show 'Begin-Procedure Get-Employee-Distrib-Percentage **'
#debug show '$Emplid     ' $Emplid
#debug show '$LastAction ' $LastAction
!*****************************
Let #SumOfPercentages = 0
If $LastAction = 'TER'
  Let $EmplStatus = 'T'
Else
  Let $EmplStatus = 'A'
End-If
Begin-Select
SUM(RSEF.GPBR_EMP_PERC_CONT) &SUM_OF_PERCENTAGES

   Let #SumOfPercentages = &SUM_OF_PERCENTAGES

FROM PS_GPBR_R_SEFIP RSEF
WHERE RSEF.EMPLID = $Emplid
AND RSEF.EMPL_STATUS = $EmplStatus
AND RSEF.PROCESS_INSTANCE = #prcs_process_instance
End-Select

If #SumOfPercentages > 100

   show $Emplid ' percentage: ' #SumOfPercentages ' exceeded the 100% limit'

End-If
End-Procedure Get-Employee-Distrib-Percentage

!*****************************
Begin-Procedure Get-STaker-Monthly-Data
#debug show 'Begin-Procedure Get-STaker-Monthly-Data **'
#debug show '$Service_Taker: ' $Service_Taker
#debug show '$RC_Comp_Year:  ' $RC_Comp_Year
#debug show '$RC_Comp_Month: ' $RC_Comp_Month
#debug show '$CurrentEstabId ' $CurrentEstabId
!*****************************
If Ltrim($Service_Taker, ' ') = ''
  Let $ServiceTakerFilter = ''
Else
  Let $ServiceTakerFilter = 'AND STM.GPBR_SERVICE_TAKER = ' || '''' || $Service_Taker || ''''
End-If

Begin-Select
STM.GPBR_RET_9711
STM.GPBR_CORRECT_COMP
STM.GPBR_START_YEAR
STM.GPBR_START_MONTH
STM.GPBR_END_YEAR
STM.GPBR_END_MONTH
STM.GPBR_INVOICE_VAL
STM.GPBR_GPS_13_VAL
STM.GPBR_COMP_VAL_INSS
STM.GPBR_INSS_PAYSLIP
STM.GPBR_OTH_ENTITIES

  Let #Ret_9711      = &STM.GPBR_RET_9711 * 100
  Let #Correct_Comp  = &STM.GPBR_CORRECT_COMP * 100
  Let #Start_Year    = &STM.GPBR_START_YEAR
  Let #Start_Month   = &STM.GPBR_START_MONTH
  Let #End_Year      = &STM.GPBR_END_YEAR
  Let #End_Month     = &STM.GPBR_END_MONTH
  Let #Invoice_Val   = &STM.GPBR_INVOICE_VAL * 100
  Let #Gps_13_Val    = &STM.GPBR_GPS_13_VAL * 100
  Let #Comp_Val_Inss = &STM.GPBR_COMP_VAL_INSS * 100
  Let #INSS_Payslip  = &STM.GPBR_INSS_PAYSLIP * 100
  Let #Oth_Entities  = &STM.GPBR_OTH_ENTITIES * 100
  Let $Ret_9711      = To_Char(#Ret_9711)
  Let $Correct_Comp  = To_Char(#Correct_Comp)
  Let $Start_Year    = To_Char(#Start_Year)
  Let $Start_Month   = To_Char(#Start_Month)
  Let $Start_Period  = $Start_Year || $Start_Month
  Let $End_Year      = To_Char(#End_Year)
  Let $End_Month     = To_Char(#End_Month)
  Let $End_Period    = $End_Year || $End_Month
  Let $Invoice_Val   = To_Char(#Invoice_Val)
  Let $Gps_13_Val    = To_Char(#Gps_13_Val)
  Let $Comp_Val_Inss = To_Char(#Comp_Val_Inss)
  Let $INSS_Payslip  = To_Char(#INSS_Payslip)
  Let $Oth_Entities  = To_Char(#Oth_Entities)

  If #Gps_13_Val > 0
     Let $Neg_Pos_Val = '0'
  Else
     Let $Neg_Pos_Val = '1'
  End-If

FROM PS_GPBR_STAKER_DTA STM
WHERE STM.YEARCD  = $RC_Comp_Year
  AND STM.MONTHCD = $RC_Comp_Month
[$ServiceTakerFilter]
  AND STM.ESTABID = $CurrentEstabId
End-Select
End-Procedure  Get-STaker-Monthly-Data

!*****************************
Begin-Procedure Get-FGTS-Indicator
#debug show 'Begin-Procedure Get-FGTS-Indicator **'
#debug show '$Emplid_Imp: ' $Emplid_Imp
#debug show '$EndDt: ' $EndDt
!*****************************
Let $FGTS_Done = 'N'
Let $FGTS_Ind_Found = 'N'
Begin-Select
FG.GPBR_FGTS_DONE

  Let #FGTS_Ind = &FG.GPBR_FGTS_DONE
  If #FGTS_Ind = 0
     Let $FGTS_Done = 'S'
  Else
     Let $FGTS_Done = 'N'
  End-If

  Let $FGTS_Ind_Found = 'Y'

FROM PS_GPBR_PYEST_PARM FG
WHERE FG.EMPLID = $Emplid_Imp
  AND FG.EMPL_RCD = (SELECT MAX(EMPL_RCD)
                       FROM PS_GPBR_PYEST_PARM
                      WHERE EMPLID   = FG.EMPLID
                        AND BGN_DT   = FG.BGN_DT)
  AND FG.BGN_DT   = (SELECT MAX(BGN_DT)
                       FROM PS_GPBR_PYEST_PARM
                      WHERE EMPLID   = FG.EMPLID
                        AND EMPL_RCD = FG.EMPL_RCD
                        AND BGN_DT  <= $EndDt)
End-Select
If $FGTS_Ind_Found = 'N'
   #debug show $Emplid_Imp ': Payee Parameters entry not found'
   show $Emplid_Imp ': Entrada de Parâmetros beneficiário não foi encontrado'
End-If
End-Procedure Get-FGTS-Indicator

!*****************************
Begin-Procedure Check-Address-Change
#debug show '      Begin-Procedure Check-Address-Change **'
#debug show '         $CurrentEstabId :' $CurrentEstabId
#debug show '         $BgnDt          :' $BgnDt
#debug show '         $EndDt          :' $EndDt
!*****************************
Let $Address_change = 'N'
Begin-Select
CADDR2.ESTABID

     Let $Address_change = 'S'

!First part selects addres movement in current period.
FROM PS_ESTAB_TBL CADDR2
    ,PS_ESTAB_TBL CADDR3
WHERE CADDR2.ESTABID = $CurrentEstabId
  AND CADDR2.EFFDT   = (SELECT MAX(EFFDT)
                          FROM PS_ESTAB_TBL
                         WHERE ESTABID = CADDR2.ESTABID
                           AND EFFDT BETWEEN $BgnDt AND $EndDt)
!Second part selects the last movement in previos periods and check for differences.
  AND CADDR3.ESTABID = CADDR2.ESTABID
  AND CADDR3.EFFDT   = (SELECT MAX(EFFDT)
                          FROM PS_ESTAB_TBL
                         WHERE ESTABID = CADDR3.ESTABID
                           AND EFFDT   <  $BgnDt)
  AND (CADDR3.ADDRESS1 <> CADDR2.ADDRESS1
    OR CADDR3.NUM1     <> CADDR2.NUM1
    OR CADDR3.ADDRESS2 <> CADDR2.ADDRESS2
    OR CADDR3.ADDRESS4 <> CADDR2.ADDRESS4
    OR CADDR3.POSTAL   <> CADDR2.POSTAL
    OR CADDR3.CITY     <> CADDR2.CITY
    OR CADDR3.STATE    <> CADDR2.STATE)
End-Select
End-Procedure Check-Address-Change

!*****************************
Begin-Procedure Check-CNAE-Change
#debug show 'Begin-Procedure Check-CNAE-Change **'
#debug show ' $BgnDt         : ' $BgnDt
#debug show ' $EndDt         : ' $EndDt
#Debug show ' $CurrentEstabId: ' $CurrentEstabId
!*****************************
If to_number($RC_Comp_Year) > 2008 Or (to_number($RC_Comp_Year) = 2008 And to_number($RC_Comp_Month) = 12)
  Let $CNAE_Change = 'P'
Else
  Let $CNAE_Change = 'N'
End-If

Let $CNAE_Changed = 'N'

Begin-Select
EIB2.ESTAB_ID_BRA

   If to_number($RC_Comp_Year) > 2008 Or (to_number($RC_Comp_Year) = 2008 And to_number($RC_Comp_Month) = 12)
     Let $CNAE_Change = 'A'
   Else
     Let $CNAE_Change = 'S'
   End-If

   Let $CNAE_Changed = 'Y'

!First part selects Id row movement in current period.
 FROM PS_ESTAB_TBL     ETB21
     ,PS_ESTAB_TBL_BRA ETB2
     ,PS_ESTAB_ID_BRA  EIB2
     ,PS_ESTAB_TBL     ETB41
     ,PS_ESTAB_TBL_BRA ETB4
     ,PS_ESTAB_ID_BRA  EIB4
WHERE ETB21.ESTABID          = $CurrentEstabId
  AND ETB21.EFFDT            = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE ESTABID = ETB21.ESTABID AND EFFDT BETWEEN $BgnDt AND $EndDt)
  AND ETB21.EFF_STATUS       = 'A'
  AND ETB2.ESTABID           = ETB21.ESTABID
  AND ETB2.EFFDT             = ETB21.EFFDT
  AND EIB2.ESTABID           = ETB2.ESTABID
  AND EIB2.COUNTY_CD_BRA     = ETB2.COUNTY_CD_BRA
  AND EIB2.EFFDT             = ETB2.EFFDT
  AND EIB2.COUNTRY           = 'BRA'
  AND EIB2.ESTAB_ID_TYPE_BRA = 'CNAE'
!Second part selects the last Id movement in previous periods and check for differences
  AND ETB41.ESTABID          = ETB21.ESTABID
  AND ETB41.EFFDT            = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE ESTABID = ETB41.ESTABID AND EFFDT < $BgnDt)
  AND ETB41.EFF_STATUS       = 'A'
  AND ETB4.ESTABID           = ETB41.ESTABID
  AND ETB4.EFFDT             = ETB41.EFFDT
  AND EIB4.ESTABID           = ETB4.ESTABID
  AND EIB4.EFFDT             = ETB4.EFFDT
  AND EIB4.COUNTY_CD_BRA     = ETB4.COUNTY_CD_BRA
  AND EIB4.COUNTRY           = 'BRA'
  AND EIB4.ESTAB_ID_TYPE_BRA = 'CNAE'
  AND EIB4.ESTAB_ID_BRA     <> EIB2.ESTAB_ID_BRA
End-Select
End-Procedure Check-CNAE-Change

!*****************************
Begin-Procedure Check-Empl-Address-Change
#debug show '      Begin-Procedure Check-Empl-Address-Change **'
#debug show '         $EMPLID ' $EMPLID
#debug show '         $BgnDt  ' $BgnDt
#debug show '         $EndDt  ' $EndDt
!*****************************
Let $Empl_Address_change = 'N'
Begin-Select
EAD1.EMPLID

     Let $Empl_Address_change = 'Y'

 FROM PS_ADDRESSES EAD1
     ,PS_ADDRESSES EAD2
WHERE EAD1.EMPLID= $EMPLID
  AND EAD1.ADDRESS_TYPE = 'HOME'
  AND EAD1.EFFDT = (SELECT MAX(EFFDT)
                          FROM PS_ADDRESSES
                         WHERE EMPLID       = EAD1.EMPLID
                           AND ADDRESS_TYPE = EAD1.ADDRESS_TYPE
                           AND EFFDT BETWEEN $BgnDt AND $EndDt)
  AND EAD2.EMPLID    = EAD1.EMPLID
  AND EAD2.ADDRESS_TYPE = EAD1.ADDRESS_TYPE
  AND EAD2.EFFDT     < EAD1.EFFDT
  AND (EAD2.ADDRESS1 <> EAD1.ADDRESS1
   OR EAD2.NUM1      <> EAD1.NUM1
   OR EAD2.ADDRESS2  <> EAD1.ADDRESS2
   OR EAD2.ADDRESS4  <> EAD1.ADDRESS4
   OR EAD2.POSTAL    <> EAD1.POSTAL
   OR EAD2.CITY      <> EAD1.CITY
   OR EAD2.STATE     <> EAD1.STATE)
End-Select
#debug show '             $Empl_Address_change ' $Empl_Address_change
End-Procedure Check-Empl-Address-Change

!*****************************
Begin-Procedure Get-Related-Establishments
#debug show '      Begin-Procedure Get-Related-Establishments **'
!Get the establishments related list include current establishment as indicated by $IncludeCurrentEstab.
#debug show '         $CurrentEstabId      : ' $CurrentEstabId
#debug show '         $IncludeCurrentEstab : ' $IncludeCurrentEstab
!*****************************
Let $EstabList = ''
Evaluate $RC_Gather_Cd
When = '150'
When = '155'
When = '660'
Begin-Select
ETBR.ESTABID

   Let $EstabList = $EstabList || ',' || '''' || &ETBR.ESTABID || ''''

FROM PS_ESTAB_TBL  ETBR1
, PS_ESTAB_TBL_BRA ETBR
WHERE ETBR.ESTAB_ASOC_BRA = $CurrentEstabId
  AND ETBR.ESTABID     = ETBR1.ESTABID
  AND ETBR.EFFDT       = ETBR1.EFFDT
  AND ETBR1.EFFDT      = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL WHERE ESTABID = ETBR1.ESTABID AND EFFDT <= $EndDt)
  AND ETBR1.EFF_STATUS = 'A'
End-Select

If $IncludeCurrentEstab  = 'Y'
   Let $EstabList = '''' || $CurrentEstabId || '''' || $EstabList
Else
  Let #EstabListLen = Length($EstabList)
  If #EstabListLen > 0
     Let $EstabList = Substr($EstabList,2,(#EstabListLen - 1))
  End-If
End-If

Break
When-Other
  Let $EstabList = '''' || $CurrentEstabId || ''''
End-Evaluate

End-Procedure Get-Related-Establishments

!*****************************
Begin-Procedure Get-Reg10-Data
#debug show '      Begin-Procedure Get-Reg10-Data **'
#debug show '         $EstabList      ' $EstabList
#debug show '         $BgnDt          ' $BgnDt
#debug show '         $EndDt          ' $EndDt
!*****************************
Let $Ind_26_10 = '0'
Begin-Select
sum(WA.GPBR_FAMILY_SAL)    &FAMILY_SAL_10
sum(WA.GPBR_MATERNITY_SAL) &MATERNITY_SAL_10
sum(WA.GPBR_INSS_13_SAL)   &INSS_13_SAL_10
sum(WA.GPBR_EMP_INSS_13_S) &EMP_INSS_13_S_10
sum(WA.GPBR_13TH_MAT_SAL)  &13TH_MATERNITY_SAL

  Let #Family_Sal_10        = &FAMILY_SAL_10 * 100
  Let #Maternity_sal_10     = &MATERNITY_SAL_10 * 100
  Let #Contrib_Desc_Emp_10  = &INSS_13_SAL_10 * 100
  Let #Prev_Soc_10          = &EMP_INSS_13_S_10 * 100
  Let #R12_13th_Mat_Sal     = &13TH_MATERNITY_SAL * 100

  Let $Ind_26_10 = '0'
  Let $Family_Sal_10        = To_Char(#Family_Sal_10)
  Let $Maternity_sal_10     = To_Char(#Maternity_sal_10)
  Let $Contrib_Desc_Emp_10  = 0
  Let $Prev_Soc_10          = '00000000000000'


  #debug show '         #Family_Sal_10      :' #Family_Sal_10
  #debug show '         #Maternity_sal_10   :' #Maternity_sal_10
  #debug show '         #Contrib_Desc_Emp_10:' #Contrib_Desc_Emp_10
  #debug show '         #Prev_Soc_10        :' #Prev_Soc_10
  #debug show '         #R12_13th_Mat_Sal   :' #R12_13th_Mat_Sal



FROM PS_GPBR_SEFIP_WA WA
WHERE WA.ESTABID    IN ([$EstabList])
  AND (WA.CAL_RUN_ID IN  (SELECT DISTINCT CAL_RUN_ID
                           FROM PS_GP_CAL_RUN_DTL
                          WHERE CAL_ID      = WA.CAL_ID
                            AND COUNTRY     = 'BRA'
                            AND CALC_TYPE   = 'P'
                            AND PRD_BGN_DT >= $BgnDt
                            AND PRD_END_DT <= $EndDt)
!Off Cycle
        OR WA.CAL_RUN_ID = (SELECT CAL_RUN_ID
                               FROM PS_GP_CAL_RUN
                              WHERE CAL_RUN_ID = WA.CAL_RUN_ID
                                AND OFF_CYCLE = 'Y'
                                AND CAL_RUN_ID IN (SELECT OFC.CAL_RUN_ID
                                                     FROM PS_GP_CAL_RUN_OFF  OFC
                                                    WHERE OFC.CAL_RUN_ID = WA.CAL_RUN_ID
                                                      AND OFC.GP_PAYGROUP = WA.GP_PAYGROUP
                                                      AND OFC.CAL_PRD_ID = (SELECT CAL_PRD_ID
                                                                              FROM PS_GP_CAL_PRD
                                                                             WHERE CAL_PRD_ID = OFC.CAL_PRD_ID
                                                                               AND PRD_BGN_DT >= $BgnDt
                                                                               AND PRD_END_DT <= $EndDt)
                                                   )
                            )
       )
End-Select
End-Procedure Get-Reg10-Data

!*****************************
Begin-Procedure Get-Maternity-Salary
#debug show 'Begin-Procedure Get-Maternity-Salary **'
#debug show '$EstabList      ' $EstabList
#debug show '$BgnDt          ' $BgnDt
#debug show '$EndDt          ' $EndDt
!*****************************
Begin-Select
sum(SWA.GPBR_MATERNITY_SAL) &MAT_SAL_10
sum(SWA.GPBR_13TH_MAT_SAL)  &13TH_MAT_SAL


  Let #Maternity_sal_10     = &MAT_SAL_10 * 100
  Let #R12_13th_Mat_Sal     = &13TH_MAT_SAL * 100
  Let $Maternity_sal_10     = To_Char(#Maternity_sal_10)

FROM PS_GPBR_SEFIP_WA SWA
WHERE SWA.ESTABID    IN ([$EstabList])
  AND (SWA.CAL_RUN_ID IN  (SELECT DISTINCT CAL_RUN_ID
                           FROM PS_GP_CAL_RUN_DTL
                          WHERE CAL_ID      = SWA.CAL_ID
                            AND COUNTRY     = 'BRA'
                            AND CALC_TYPE   = 'P'
                            AND PRD_BGN_DT >= $BgnDt
                            AND PRD_END_DT <= $EndDt)
!Off Cycle
        OR SWA.CAL_RUN_ID = (SELECT CAL_RUN_ID
                               FROM PS_GP_CAL_RUN
                              WHERE CAL_RUN_ID = SWA.CAL_RUN_ID
                                AND OFF_CYCLE = 'Y'
                                AND CAL_RUN_ID IN (SELECT OFC.CAL_RUN_ID
                                                     FROM PS_GP_CAL_RUN_OFF  OFC
                                                    WHERE OFC.CAL_RUN_ID  = SWA.CAL_RUN_ID
                                                      AND OFC.GP_PAYGROUP = SWA.GP_PAYGROUP
                                                      AND OFC.CAL_PRD_ID  = (SELECT CAL_PRD_ID
                                                                               FROM PS_GP_CAL_PRD
                                                                              WHERE CAL_PRD_ID = OFC.CAL_PRD_ID
                                                                                AND PRD_BGN_DT >= $BgnDt
                                                                                AND PRD_END_DT <= $EndDt)
                                                   )
                            )
       )
End-Select
End-Procedure Get-Maternity-Salary

!*****************************
Begin-Procedure Check-Empl-Rec-Chg
#debug show '      Begin-Procedure Check-Empl-Rec-Chg **'
#debug show '         $CurrentEstabId:' $CurrentEstabId
#debug show '         $Estab_Effdt:   ' $Estab_Effdt
#debug show '         $Emplid:        ' $Emplid
#debug show '         $Name_Effdt:    ' $Name_Effdt
#debug show '         $Job_Effdt:     ' $Job_Effdt
#debug show '         $BgnDt:     ' $BgnDt
#debug show '         $EndDt:     ' $EndDt
!*****************************
Let $BgnDtDT = datetostr(strtodate($BgnDt),{Native-DateTimeMask})
Let $EndDtDT = datetostr(strtodate($EndDt),{Native-DateTimeMask})

    #IfDef MICROSOFT
        Let $BgnDtDT = datetostr(strtodate($BgnDt || ' 00:00:00.000',DATE),{Native-DateTimeMask})
        Let $EndDtDT = datetostr(strtodate($EndDt || ' 00:00:00.000',DATE),{Native-DateTimeMask})
    #EndIf


#debug show '           $BgnDtDT  ' $BgnDtDT
#debug show '           $EndDtDT  ' $EndDtDT
Let $Empl_Alter_Val = ' '
Let $Empl_Alter_CTPS = ' '

!Only report the #MaxRecords rows of record 13 (using priority of run control).
!If exists more than #MaxRecords then report in log file.

!Cycle trough Codes order by priority.
Let #i = 1
Let #MaxRecords = 2
Let #CurrentRec = 1

While #i <= 7
    Let $Code = OrderCodes.Code(#i)

    #debug Show '           Process code ' $Code ' #CurrentRec:' #CurrentRec

    Let $Empl_Alter_CD = ' '

    Evaluate $Code
    When = '405'
        Do Code405
        Break
    When = '428'
        Do Code428
        Break
    When = '404'
        Do Code404
        Break
    When = '403'
        Do Code403
        Break
    When = '408'
        Do Code408
        Break
    When = '406'
        Do Code406
        Break
    When = '427'
        Do Code427
        Break
    End-Evaluate

    !Move #CurrentRec counter to Procedure Write-Reg13
    !If $Empl_Alter_CD <> ' '
    !    Let #CurrentRec = #CurrentRec + 1
    !End-If

    Let #i = #i + 1
End-While

End-Procedure Check-Empl-Rec-Chg

!*****************************
Begin-Procedure Code405
#debug show '      Begin-Procedure Code405 **'
!*****************************
!*** 405 PIS/PASEP
#debug show '           405 PIS/PASEP'
Begin-Select
NHI.NATIONAL_ID
NI1.NATIONAL_ID

   If &NHI.NATIONAL_ID <> &NI1.NATIONAL_ID


     Let $OldPISPASEValue = &NHI.NATIONAL_ID
     Let $Empl_Alter_CD = '405'
     Let $Empl_Alter_Val = &NI1.NATIONAL_ID
     Do FILL_LEADING($Empl_Alter_Val, ' ', 11, 'R', $Empl_Alter_Val)
     Do FILL_LEADING($OldPISPASEValue, ' ', 11, 'R', $OldPISPASEValue)

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

   End-If

FROM PS_PERS_NID_HI_BRA NHI
   , PS_PERS_NID NI1
WHERE NHI.EMPLID           = $Emplid
  AND NHI.NATIONAL_ID_TYPE IN ('PIS','PASEP')
  AND NHI.COUNTRY          = 'BRA'
  AND NHI.ACTION_DT        = (SELECT MAX(ACTION_DT)
                                FROM PS_PERS_NID_HI_BRA
                               WHERE EMPLID           = NHI.EMPLID
                                 AND NATIONAL_ID_TYPE = NHI.NATIONAL_ID_TYPE
                                 AND COUNTRY          = NHI.COUNTRY
                                 AND ACTION_DT        BETWEEN $RC_BGN_DT AND $RC_END_DT)
  AND NI1.EMPLID           = NHI.EMPLID
  AND NI1.NATIONAL_ID_TYPE = NHI.NATIONAL_ID_TYPE
  AND NI1.COUNTRY          = NHI.COUNTRY
End-Select
End-Procedure Code405

!*****************************
 Begin-Procedure Code428
 #debug show '      Begin-Procedure Code428 **'
!*****************************
!*** 428 Data de Nascimento
#debug show '           428 Birth Date'
Begin-Select
PSA.NEWVALUE

    Let $Empl_Alter_CD = '428'
    Let $Empl_Alter_Val = Rtrim(&PSA.NEWVALUE, ' ')
    Let $Empl_Alter_Val = Substr($Empl_Alter_Val,9,2) || Substr($Empl_Alter_Val,6,2) || Substr($Empl_Alter_Val,1,4)

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

FROM PS_GPBR_SEFIP_AUDT PSA
WHERE PSA.PROCESS_INSTANCE = #prcs_process_instance
  AND PSA.KEY1        = $EmplID
  AND PSA.RECNAME     = 'PERSON'
  AND PSA.FIELDNAME   = 'BIRTHDATE'
  AND PSA.AUDIT_ACTN  = 'C'
  AND PSA.AUDIT_STAMP = (SELECT MAX(AUDIT_STAMP)
                           FROM PS_GPBR_SEFIP_AUDT
                          WHERE KEY1       = PSA.KEY1
                            AND RECNAME    = PSA.RECNAME
                            AND FIELDNAME  = PSA.FIELDNAME
                            AND AUDIT_ACTN = PSA.AUDIT_ACTN
                            AND AUDIT_STAMP >= $RC_BGN_DT
                            AND AUDIT_STAMP <= $RC_END_DT)

End-Select
End-Procedure Code428

!*****************************
 Begin-Procedure Code404
 #debug show '      Begin-Procedure Code404 **'
!*****************************
!*** 404 Nome do Empregado
#debug show '           404 Employee Name'
Begin-Select
PSN.FIRST_NAME
PSN.MIDDLE_NAME
PSN.LAST_NAME
PSN.NAME
PSN.EFFDT

  Let $Empl_Alter_CD = '404'

  Let $Emplid_First2  = Rtrim(&PSN.FIRST_NAME,' ')
  Let $Emplid_First2  = Ltrim($Emplid_First2,' ')
  Let $Emplid_Middle2 = Rtrim(&PSN.MIDDLE_NAME,' ')
  Let $Emplid_Last2   = Rtrim(&PSN.LAST_NAME,' ')

  If $Emplid_Middle2 <> ''
    Let $Empl_Alter_Val = $Emplid_First2 || ' ' || $Emplid_Middle2 || ' ' || $Emplid_Last2
  Else
    Let $Empl_Alter_Val = $Emplid_First2 || ' ' || $Emplid_Last2
  End-If

  Let $Empl_OldName = ''
  Do PrevName
  If $Empl_OldName <> ''

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if
  End-if
 FROM PS_NAMES PSN
WHERE PSN.EMPLID      = $Emplid
  AND PSN.NAME_TYPE   = 'PRI'
  AND PSN.EFFDT = (SELECT MAX(EFFDT)
                           FROM PS_NAMES
                          WHERE EMPLID      = PSN.EMPLID
                            AND NAME_TYPE   = PSN.NAME_TYPE
                            AND EFFDT BETWEEN $RC_BGN_DT AND $RC_END_DT)
!  AND PSN.EFFDT <> $EmplHireDt
End-Select

End-Procedure Code404

!*****************************
Begin-Procedure PrevName
#debug show '      Begin-Procedure PrevName **'
!*****************************
!Get Original Name

Let $Empl_OldName = ''

Begin-Select
PSN2.FIRST_NAME
PSN2.MIDDLE_NAME
PSN2.LAST_NAME
PSN2.NAME
PSN2.EFFDT

  Let $Emplid_FirstOld  = Rtrim(&PSN2.FIRST_NAME,' ')
  Let $Emplid_FirstOld  = Ltrim($Emplid_FirstOld,' ')
  Let $Emplid_MiddleOld = Rtrim(&PSN2.MIDDLE_NAME,' ')
  Let $Emplid_LastOld   = Rtrim(&PSN2.LAST_NAME,' ')

  If $Emplid_MiddleOld <> ''
    Let $Empl_OldName = $Emplid_FirstOld || ' ' || $Emplid_MiddleOld || ' ' || $Emplid_LastOld
  Else
    Let $Empl_OldName = $Emplid_FirstOld || ' ' || $Emplid_LastOld
  End-If

FROM PS_NAMES PSN2
WHERE PSN2.EMPLID      = $Emplid
  AND PSN2.NAME_TYPE   = 'PRI'
  AND PSN2.EFFDT = (SELECT MAX(EFFDT)
                           FROM PS_NAMES
                          WHERE EMPLID      = PSN2.EMPLID
                            AND NAME_TYPE   = PSN2.NAME_TYPE
                            AND EFFDT < &PSN.EFFDT)
!  AND PSN.EFFDT <> $EmplHireDt
End-Select

#debug show '         $Empl_OldName :' $Empl_OldName

!if $Empl_OldName = ''
    !Let $Empl_OldName = $Empl_Alter_Val
!End-if

End-Procedure PrevName


!*****************************
Begin-Procedure Code403
#debug show '      Begin-Procedure Code403 **'
!*****************************
!*** 403 Número/Série CTPS
#debug show '           403 Numero/Serie CTPS'
Begin-Select
PNB.NATIONAL_ID
PNB.CTPS_SERIES_BRA
PN2.NATIONAL_ID
PN2.CTPS_SERIES_BRA

  If &PNB.NATIONAL_ID <> &PN2.NATIONAL_ID

         Let $Empl_Alter_CD  = '403'

         Let $Empl_Alter_Val = &PN2.NATIONAL_ID
         Do FILL_LEADING($Empl_Alter_Val, '0', 7, 'L', $Empl_Alter_Val)

         Let $Empl_Alter_CTPS = &PN2.CTPS_SERIES_BRA
         Do FILL_LEADING($Empl_Alter_CTPS, '0', 5, 'L', $Empl_Alter_CTPS)

         Let $Empl_Alter_Val = $Empl_Alter_Val || $Empl_Alter_CTPS

         Let $OLD_CTPS = &PNB.NATIONAL_ID
         Let $OLD_Series = &PNB.CTPS_SERIES_BRA

        Do FILL_LEADING($OLD_CTPS, '0', 7, 'L', $OLD_CTPS)
        Do FILL_LEADING($OLD_Series, '0', 5, 'L', $OLD_Series)

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

  End-If
FROM PS_PERS_NID_HI_BRA PNB
    ,PS_GPBR_PRS_NID_VW PN2
WHERE PN2.EMPLID            = $Emplid
  AND PN2.COUNTRY           = 'BRA'
  AND (PN2.NATIONAL_ID_TYPE = 'CTPS'
    OR PN2.NATIONAL_ID_TYPE = 'CPF')
  AND PNB.EMPLID            = PN2.EMPLID
  AND PNB.COUNTRY           = PN2.COUNTRY
  AND PNB.NATIONAL_ID_TYPE  = PN2.NATIONAL_ID_TYPE
  AND PNB.ACTION_DT BETWEEN $RC_BGN_DT AND $RC_END_DT
End-Select

End-Procedure Code403

!*****************************
Begin-Procedure Code408
#debug show '      Begin-Procedure Code408 **'
!*****************************
!*** 408 Data de Admissão
!************************************************* Add EMPL_RCD TO WHERE CLAUSE
#debug show '           408 Admission Date'
Begin-Select
POI.ORIG_HIRE_DT
PEM.HIRE_DT

     Let $Empl_Alter_CD = '408'
     do Convert-To-DTU-Date(&POI.ORIG_HIRE_DT, $Empl_Alter_Val)
     If $Empl_Alter_Val <> ''
        Let $Empl_Alter_Val = Substr($Empl_Alter_Val,9,2) || Substr($Empl_Alter_Val,6,2) || Substr($Empl_Alter_Val,1,4)
     End-If
     
     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

FROM PS_PER_ORG_INST POI
    ,PS_EMPLOYMENT PEM
WHERE POI.EMPLID   = $EmplId
  AND POI.LASTUPDDTTM = (SELECT MAX(LASTUPDDTTM)
                         FROM PS_PER_ORG_INST
                         WHERE EMPLID = POI.EMPLID)
  AND PEM.EMPLID   = POI.EMPLID
  AND PEM.HIRE_DT <> ORIG_HIRE_DT
End-Select

End-Procedure Code408


!*****************************
Begin-Procedure Code406
#debug show '      Begin-Procedure Code406 **'
!*****************************
!*** 406 Matrícula na Empresa
#debug show '           406 EMPLID'
!*** Developer note: The record definition AUDIT_PERSN_BRA
!*** has to be created in customer's environment .
!*** It's required only to test this functionality
Let $AuditRecExists = 'N'
Begin-Select
REC.RECNAME

  Let $AuditRecExists = 'Y'
  Let $AuditRecord   = ',PS_AUDIT_PERSN_BRA APB'

FROM PSRECDEFN REC
WHERE REC.RECNAME = 'AUDIT_PERSN_BRA'
End-Select

If $AuditRecExists = 'Y'

Begin-Select
PEB.EMPLID

     Let $Empl_Alter_CD = '406'
     Let $Empl_Alter_Val = &PEB.EMPLID

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

FROM PS_PERSON_BRA PEB
[$AuditRecord]
WHERE PEB.EMPLID      =  $EmplID
  AND APB.EMPLID      =  PEB.EMPLID
  AND APB.AUDIT_ACTN  = 'N'
  AND APB.AUDIT_STAMP = (SELECT MAX(AUDIT_STAMP)
                           FROM PS_AUDIT_PERSN_BRA
                          WHERE EMPLID      =  APB.EMPLID
                            AND AUDIT_ACTN  =  APB.AUDIT_ACTN
                            AND AUDIT_STAMP >= $RC_BGN_DT
                            AND AUDIT_STAMP <= $RC_END_DT)
  AND APB.EMPLID NOT IN (SELECT EMPLID
                           FROM PS_AUDIT_PERSN_BRA
                          WHERE AUDIT_OPRID = APB.AUDIT_OPRID
                            AND AUDIT_STAMP = APB.AUDIT_STAMP
                            AND AUDIT_ACTN  = 'K')
End-Select

End-If
End-Procedure Code406


!*****************************
Begin-Procedure Code427
#debug show '      Begin-Procedure Code427 **'
!*****************************
!*** 427 CBO
#debug show '           427 CBO'
Begin-Select
JJR.CBO_CD_BRA
JJ1.CBO_CD_BRA

  If Rtrim(&JJR.CBO_CD_BRA, ' ') <> Rtrim(&JJ1.CBO_CD_BRA, ' ')

    Let $Empl_Alter_CD = '427'

    Let $Empl_Alter_Val = &JJR.CBO_CD_BRA
    Do Str-Delete-Chars( $Empl_Alter_Val , '- ' , $CBO_CD_End)
    Let $Empl_Alter_Val = '0' || Substr($CBO_CD_End,1,4)

     If #CurrentRec <= #MaxRecords
        Do Write-Reg13
     Else
        Show 'Aviso: Código ' $Code ' Alteração Cadastral do Trabalhador ' $Emplid ' Não incluído no SEFIP.'
        Show '       SEFIP pode relatar apenas 2 registros do tipo 13 por trabalhador.'
     End-if

  End-If

 FROM PS_JOB_JR JJR
     ,PS_JOB_JR JJ1
WHERE JJR.EMPLID = $Emplid
  AND JJR.EFFDT  = (SELECT MAX (EFFDT)
                        FROM PS_JOB
                       WHERE EMPLID   = JJR.EMPLID
                         AND EMPL_RCD = JJR.EMPL_RCD
                         AND EFFDT   BETWEEN $RC_BGN_DT AND $RC_END_DT)
  AND JJR.EFFSEQ = (SELECT MAX (EFFSEQ)
                        FROM PS_JOB
                       WHERE EMPLID   = JJR.EMPLID
                         AND EMPL_RCD = JJR.EMPL_RCD
                         AND EFFDT    = JJR.EFFDT
                         AND ESTABID = $CurrentEstabId )
  AND JJR.SEFIP_CATEGORY_BRA <> '22'
  AND JJ1.EMPLID = JJR.EMPLID
  AND JJ1.EMPL_RCD = JJR.EMPL_RCD
  AND JJ1.EFFDT  = (SELECT MAX(EFFDT)
                      FROM PS_JOB
                     WHERE EMPLID   = JJ1.EMPLID
                       AND EMPL_RCD = JJ1.EMPL_RCD
                       AND EFFDT    < JJR.EFFDT)
  AND JJ1.EFFSEQ = (SELECT MAX(EFFSEQ)
                      FROM PS_JOB
                     WHERE EMPLID   = JJ1.EMPLID
                       AND EMPL_RCD = JJ1.EMPL_RCD
                       AND EFFDT    = JJ1.EFFDT)
End-Select
End-Procedure Code427


!*****************************
Begin-Procedure Check-Empl-Rec-Chg2
#debug show '      Begin-Procedure Check-Empl-Rec-Chg2 **'
#debug show '         $CurrentEstabId:' $CurrentEstabId
#debug show '         $Estab_Effdt:   ' $Estab_Effdt
#debug show '         $Emplid:        ' $Emplid
#debug show '         $Name_Effdt:    ' $Name_Effdt
#debug show '         $Job_Effdt:     ' $Job_Effdt
#debug show '         $BgnDt:     ' $BgnDt
#debug show '         $EndDt:     ' $EndDt
!*****************************
Let $BgnDtDT = datetostr(strtodate($BgnDt),{Native-DateTimeMask})
Let $EndDtDT = datetostr(strtodate($EndDt),{Native-DateTimeMask})
#debug show '           $BgnDtDT  ' $BgnDtDT
#debug show '           $EndDtDT  ' $EndDtDT
Let $Empl_Alter_Val = ' '
Let $Empl_Alter_CTPS = ' '

End-Procedure Check-Empl-Rec-Chg2

!*****************************
Begin-Procedure Process-Main-14
#debug show '    ** Process-Main-14 **************************************************'
#debug show '       $CurrentEstabId ' $CurrentEstabId
#debug show '       $EndDt ' $EndDt
!*****************************
Let $Empl_Rec_Chg = 'N'

!Replace the alias for job in employee filter.
Let $EmplFilterLocal   = Replace($EmplFilter, 'JOB', 'JOB02')
#debug show '       $EmplFilterLocal ' $EmplFilterLocal


If $RC_Comp_Month <> '13' And $RC_Gather_Cd = '115'

  !AND [$RC_Comp_Month]         <> '13'
  !AND [$RC_Gather_Cd]          NOT IN ('130','135','150','155','317','337','608')

Begin-Select
R14.NID_PIS_BRA
R14.HIRE_DT
R14.REHIRE_DT
R14.EMPLID
R14.EMPL_RCD
R14.EFFDT
R14.CBO_CD_BRA
R14.SEFIP_CATEGORY_BRA
R14.ACTION


    Let $Emplid     = &R14.EMPLID
    Let #EmplRcd    = &R14.EMPL_RCD
    Let $Job_Effdt  = &R14.EFFDT
    Let $CBO_CD     = &R14.CBO_CD_BRA
    Let $SEFIP_Cat  = &R14.SEFIP_CATEGORY_BRA
    Let $CBO_CD     = Rtrim($CBO_CD,' ')

    Do Str-Delete-Chars( $CBO_CD , '- ' , $CBO_CD_End)
    Let $CBO_CD = $CBO_CD_End
    Let $CBO_CD = '0' || Substr($CBO_CD,1,4)

    Do Get-Empl-Data
    do Get-Payee-Parameters
    Do Get-National-IDs
    Let $LastDate = $Job_Effdt
    Let $LastAction = &R14.ACTION
    Do Get-Admission-Date
    Do Check-Empl-Address-Change

  If $Empl_Address_change = 'Y' Or ($Admission_Dt_DTU >= $BgnDtDTU And $Admission_Dt_DTU <= $EndDtDTU)
     Let $E_Chg_Address = $Empl_Address
     Let $E_Chg_Addr4   = $Emplid_Addr4
     Let $E_Chg_Postal  = $Emplid_Postal
     Let $E_Chg_City    = $Emplid_City
     Let $E_Chg_State   = $Emplid_State
     Do Write-Reg14
  End-If

FROM PS_GPBR_SEFIP_EMPG R14
WHERE R14.PROCESS_INSTANCE = #prcs_process_instance
AND R14.ESTABID = $CurrentEstabId
ORDER BY R14.NID_PIS_BRA, R14.HIRE_DT, R14.REHIRE_DT, R14.SEFIP_CATEGORY_BRA
End-Select

End-If

End-Procedure Process-Main-14

!*****************************
Begin-Procedure Get-Employee-WA-Data
#debug show 'Begin-Procedure Get-Employee-WA-Data **'
#debug show '$Emplid   ' $Emplid
#debug show '#EmplRcd  ' #EmplRcd
#debug show '$CurrentEstabId ' $CurrentEstabId
#debug show '$BgnDt    ' $BgnDt
#debug show '$EndDt    ' $EndDt
#debug show '$SegBgnDt ' $SegBgnDt
#debug show '$SegEndDt ' $SegEndDt
#debug show '$RC_Comp_Month  ' $RC_Comp_Month
#debug show '#Employee-ST-Percentage ' #Employee-ST-Percentage
!*****************************
Let #INS_Desc_Val   = 0
Let #13_Compensat   = 0
Let #Insured_Disc   = 0
Let #Rem_Prev_Val   = 0
Let #Soc_Prov_13    = 0
Let #GPS_Soc_Prov   = 0
Let #13Sal_Averages = 0
Let #13Sal_Advance  = 0
Let #13Sal_Avg_Adv  = 0
Let #INSS_13_Sal    = 0
Let #FamilySalary   = 0

Let $SefipRskLvl    = '  '

Let $INS_Desc_Val   = ''
Let $13_Compensat   = ''
Let $Insured_Disc   = ''
Let $Rem_Prev_Val   = ''
Let $Soc_Prov_13    = ''
Let $GPS_Soc_Prov   = ''
Let $13Sal_Averages = ''
Let $13Sal_Advance  = ''
Let $13Sal_Avg_Adv  = ''
Let $WA_Data_Found  = 'N'

!Replace the alias for segment and calendar tables.
Let $GPCalTbl    = Replace($GPCalendarTbl  , 'XXX', 'GP')
Let $SEFIPFilter = Replace($SEFIP_WA_Filter, 'XXX', 'GP')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'YYY', 'RS')
Let $SEFIPFilter = Replace($SEFIPFilter    , 'ZZZ', 'WD')

Begin-Select
WD.GPBR_INS_DESC_VAL
WD.GPBR_13_COMPENSAT
WD.GPBR_INSURED_DISC
WD.GPBR_REM_PREV_VAL
WD.GPBR_SOC_PROV_13_S
WD.GPBR_GPS_SOC_PROV
WD.GPBR_13TH_SAL_AVG
WD.GPBR_13TH_SAL_ADV
WD.GPBR_13TH_AVG_ADV
WD.GPBR_INSS_13_SAL
WD.SEFIP_RISK_LVL_BRA
WD.GPBR_FAMILY_SAL
RS.SEG_BGN_DT
RS.SEG_END_DT

  add &WD.GPBR_INS_DESC_VAL  to #INS_Desc_Val
  add &WD.GPBR_13_COMPENSAT  to #13_Compensat
  add &WD.GPBR_INSURED_DISC  to #Insured_Disc
  add &WD.GPBR_REM_PREV_VAL  to #Rem_Prev_Val
  add &WD.GPBR_SOC_PROV_13_S to #Soc_Prov_13
  add &WD.GPBR_GPS_SOC_PROV  to #GPS_Soc_Prov
  add &WD.GPBR_13TH_SAL_AVG  to #13Sal_Averages
  add &WD.GPBR_13TH_SAL_ADV  to #13Sal_Advance
  add &WD.GPBR_13TH_AVG_ADV  to #13Sal_Avg_Adv
  add &WD.GPBR_INSS_13_SAL   TO #INSS_13_Sal
  add &WD.GPBR_FAMILY_SAL    TO #FamilySalary

  Let $SefipRskLvl           = &WD.SEFIP_RISK_LVL_BRA
  Let $WA_Data_Found  = 'Y'
  Let $EmplSegBgnDt   = &RS.SEG_BGN_DT
  Let $EmplSegEndDt   = &RS.SEG_END_DT

  #debug show 'RS.SEG_BGN_DT ' &RS.SEG_BGN_DT
  #debug show 'RS.SEG_END_DT ' &RS.SEG_END_DT
  #debug show '&WD.GPBR_INS_DESC_VAL ' &WD.GPBR_INS_DESC_VAL

FROM PS_GPBR_SEFIP_WA  WD
   , PS_GP_RSLT_SEG_VW RS
   , PS_GP_SEG_GUIDE_WA GGG
[$GPCalTbl]
WHERE WD.EMPLID        = $Emplid
  AND WD.EMPL_RCD      = #EmplRcd
  AND WD.ESTABID       = $CurrentEstabId
  AND GGG.ESTABID       = $CurrentEstabId
  AND WD.GPBR_GATHERING_CD = 'NA'
  AND WD.ORIG_CAL_RUN_ID   = WD.CAL_RUN_ID
  AND WD.EMPLID            = GGG.EMPLID
  AND WD.EMPL_RCD          = GGG.EMPL_RCD
  AND WD.CAL_RUN_ID        = GGG.CAL_RUN_ID
  AND WD.GP_PAYGROUP       = GGG.GP_PAYGROUP
  AND WD.CAL_ID            = GGG.CAL_ID
  AND WD.ORIG_CAL_RUN_ID   = GGG.ORIG_CAL_RUN_ID
  AND WD.RSLT_SEG_NUM      = GGG.RSLT_SEG_NUM
  AND (WD.CAL_RUN_ID IN (select DISTINCT CAL_RUN_ID
                          from PS_GP_CAL_RUN_DTL
                          where CAL_ID      = WD.CAL_ID
                           AND COUNTRY     = 'BRA'
                           AND CALC_TYPE   = 'P'
                           and PRD_BGN_DT >= $BgnDt
                           AND PRD_END_DT <= $EndDt)
!Off Cycle
        OR WD.CAL_RUN_ID = (SELECT CAL_RUN_ID
                               FROM PS_GP_CAL_RUN
                              WHERE CAL_RUN_ID = WD.CAL_RUN_ID
                                AND OFF_CYCLE = 'Y'
                                AND CAL_RUN_ID IN (SELECT OFC.CAL_RUN_ID
                                                     FROM PS_GP_CAL_RUN_OFF  OFC
                                                    WHERE OFC.CAL_RUN_ID = WD.CAL_RUN_ID
                                                      AND OFC.GP_PAYGROUP = WD.GP_PAYGROUP
                                                      AND OFC.CAL_PRD_ID = (SELECT CAL_PRD_ID
                                                                              FROM PS_GP_CAL_PRD
                                                                             WHERE CAL_PRD_ID = OFC.CAL_PRD_ID
                                                                               AND PRD_BGN_DT >= $BgnDt
                                                                               AND PRD_END_DT <= $EndDt)
                                                   )
                            )
       )
   !ICE: 2031934000
   AND RS.EMPLID = WD.EMPLID
   AND RS.EMPL_RCD = WD.EMPL_RCD
   AND RS.CAL_RUN_ID = WD.CAL_RUN_ID
   AND RS.GP_PAYGROUP = WD.GP_PAYGROUP
   AND RS.CAL_ID = WD.CAL_ID
   AND RS.ORIG_CAL_RUN_ID = WD.ORIG_CAL_RUN_ID
   AND RS.RSLT_SEG_NUM = WD.RSLT_SEG_NUM
   AND RS.SEG_BGN_DT >= $SegBgnDt
   AND RS.SEG_END_DT <= $SegEndDt
[$SEFIPFilter]
End-Select


If $WA_Data_Found  = 'Y'

  Let $INS_Desc_Val   = To_Char(#INS_Desc_Val   * #Employee-ST-Percentage)
  Let $13_Compensat   = To_Char(#13_Compensat   * #Employee-ST-Percentage)
  Let $Insured_Disc   = To_Char(#Insured_Disc   * #Employee-ST-Percentage)
  Let $Rem_Prev_Val   = To_Char(#Rem_Prev_Val   * #Employee-ST-Percentage)
  Let $Soc_Prov_13    = To_Char(#Soc_Prov_13    * #Employee-ST-Percentage)
  Let $GPS_Soc_Prov   = To_Char(#GPS_Soc_Prov   * #Employee-ST-Percentage)
  Let $13Sal_Averages = To_Char(#13Sal_Averages * #Employee-ST-Percentage)
  Let $13Sal_Advance  = To_Char(#13Sal_Advance  * #Employee-ST-Percentage)
  Let $13Sal_Avg_Adv  = To_Char(#13Sal_Avg_Adv  * #Employee-ST-Percentage)
  Let #ST-FamilySalary = #ST-FamilySalary + (#FamilySalary * #Employee-ST-Percentage)
  Let $FamilySalary   = To_Char(#FamilySalary * #Employee-ST-Percentage)

  #debug show '$INS_Desc_Val    ' $INS_Desc_Val
  #debug show '$13_Compensat    ' $13_Compensat
  #debug show '$Insured_Disc    ' $Insured_Disc
  #debug show '$Rem_Prev_Val    ' $Rem_Prev_Val
  #debug show '$Soc_Prov_13     ' $Soc_Prov_13
  #debug show '$GPS_Soc_Prov    ' $GPS_Soc_Prov
  #debug show '$13Sal_Averages  ' $13Sal_Averages
  #debug show '$13Sal_Advance   ' $13Sal_Advance
  #debug show '$13Sal_Avg_Adv   ' $13Sal_Avg_Adv
  #debug show '$FamilySalary    ' $FamilySalary

Else

  Let $Message = $Emplid || ' / ' || To_Char(#EmplRcd) || ' Estabelecimento: ' || $CurrentEstabId || ' - Não existe a informação para o empregado en SEFIP Writable Array'
  show $Message

End-If

End-Procedure Get-Employee-WA-Data

!*****************************
!*** Change non ascii characters to its ascii equivalent.
Begin-Procedure Check-Strings( $StringIn , :$StringOut )
#debugx show 'Begin-Procedure Check-Strings **'
!*****************************
Let $StringIn  = Ltrim(Rtrim($StringIn, ' '),' ')
Let #I = 1
Let $StringOut = ''
Let #Len = Length($StringIn)
Let $Test_Char1 = ''
Let $Test_Char2 = ''
Let $Test_Char3 = ''

While #I  <= #Len
   Let $Test_Char    = Substr($StringIn,#I, 1)
   Let $Test_Char3   = $Test_Char2
   Let $Test_Char2   = $Test_Char1
   Let $Test_Char1   = $Test_Char
   If ($Test_Char3 = $Test_Char2 and $Test_Char2 = $Test_Char1) or ($Test_Char2 = $Test_Char1 and $Test_Char1 = ' ')
      Let $Test_Char  = ''
   End-If
   Let $Found = 'N'
   Let #Test_Code = ascii(Upper($Test_Char))
   If (#Test_Code > 64 and #Test_Code < 91) or (#Test_Code > 47 and #Test_Code < 58)
      Let $StringOut = $StringOut || Upper($Test_Char)
      Let $Found = 'Y'
   End-If

   If ($Found = 'N')
      Evaluate $Test_Char
        When = 'é'
        When = 'ê'
        When = 'ë'
        When = 'è'
        When = 'É'
        When = 'Ê'
        When = 'Ë'
        When = 'È'
          Let $Test_Char = 'E'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'á'
        When = 'â'
        When = 'ä'
        When = 'à'
        When = 'å'
        When = 'ã'
        When = 'Á'
        When = 'Â'
        When = 'Ä'
        When = 'À'
        When = 'Å'
        When = 'Ã'
          Let $Test_Char = 'A'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'ï'
        When = 'î'
        When = 'ì'
        When = 'í'
        When = 'Ï'
        When = 'Î'
        When = 'Ì'
        When = 'Í'
          Let $Test_Char = 'I'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'ô'
        When = 'ö'
        When = 'ò'
        When = 'Ö'
        When = 'ó'
        When = 'Ô'
        When = 'Ö'
        When = 'Ò'
        When = 'Ö'
        When = 'Ó'
          Let $Test_Char = 'O'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'ü'
        When = 'û'
        When = 'ù'
        When = 'ú'
        When = 'Ü'
        When = 'Û'
        When = 'Ù'
        When = 'Ú'
          Let $Test_Char = 'U'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'ñ'
        When = 'Ñ'
          Let $Test_Char = 'N'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = 'Ç'
        When = 'ç'
          Let $Test_Char = 'C'
          Let $StringOut  = $StringOut || $Test_Char
          Break
        When = ' '
        When = '-'
          Let $StringOut  = $StringOut || $Test_Char
        When-Other
          Let $Test_Char1 = $Test_Char2
          Let $Test_Char2 = $Test_Char3
          Break
      End-Evaluate
    End-If
    add 1 To #I
End-While
Let $StringIn  = ''
End-Procedure Check-Strings

!*****************************
Begin-Procedure FILL_LEADING ( $StringIn, $FillChar , #FinalLen, $Direction, :$SringOut )
#debugx show 'Begin-Procedure FILL_LEADING **'
!*****************************
  Let $FieldIni = Ltrim(Rtrim($StringIn,' '), ' ')
  Let #FieldLen = LENGTH($FieldIni)
  Let #SPACES = #FinalLen - #FieldLen

  Let #CONT = 1
  Let $SringOut = ''
  WHILE #CONT <= #SPACES
    Let $SringOut = $SringOut || $FillChar
    Add 1 TO #CONT
  End-WHILE

Evaluate $Direction
When = 'L'
  Let $SringOut = $SringOut || $FieldIni
Break
When = 'R'
  Let $SringOut = $FieldIni || $SringOut
Break
When-Other
  show 'FILL_LEADING Direction value not valid (L,R) current:' $Direction
End-Evaluate
End-Procedure FILL_LEADING

!*****************************
!*** Delete non-required chars ($sdc_Chars) from a string ($sdc_StringIn) ***
!*** and put the result in ouput ($sdc_StringOut) ***
!*** if the first character is ^ then only the following characters will be kept others will be deleted ***
Begin-Procedure Str-Delete-Chars( $sdc_StringIn , $sdc_Chars , :$sdc_StringOut)
#debugx show 'Begin-Procedure Str-Delete-Chars **'
#debugx show '    $sdc_StringIn: ' $sdc_StringIn
#debugx show '    $sdc_Chars:    ' $sdc_Chars
!*****************************
Let #sdc_Counter      = 1
Let #sdc_Position     = 0
Let #sdc_LengthField  = Length($sdc_StringIn)
Let $sdc_Char         = ' '
Let $sdc_StringOut    = ''
Let $sdc_FirstChar    = Substr($sdc_Chars,1,1)
If $sdc_FirstChar = '^'
   Let $sdc_DeleteChars = Substr($sdc_Chars,2,Length($sdc_Chars)-1)
Else
   Let $sdc_DeleteChars = $sdc_Chars
End-If

  While #sdc_Counter  <= #sdc_LengthField
      Let $sdc_Char = Substr( $sdc_StringIn , #sdc_Counter , 1 )

      Find $sdc_Char in $sdc_DeleteChars 0 #sdc_Position
      If ((#sdc_Position = -1 And $sdc_FirstChar <> '^') Or (#sdc_Position > -1 And $sdc_FirstChar = '^'))
         Let $sdc_StringOut = $sdc_StringOut || $sdc_Char
      End-If

      Let #sdc_Counter = #sdc_Counter + 1
  End-While
#debugx show '$sdc_StringOut: ' $sdc_StringOut
End-Procedure Str-Delete-Chars

!******************************************************************************
Begin-Procedure GetPhoneBRA ($FullPhone, :$PhoneDDI, :$PhoneDDD, :$Phone, :$PhoneRamal)
#debugx show 'Begin-Procedure: GetPhoneBRA'
!******************************************************************************
  Let $PhoneDDI      = '0'
  Let $PhoneDDD      = '0000'
  Let $Phone         = '0'
  Let $PhoneRamal    = '0'
  Let #i             = 1
  Let #DotNumber     = 0
  Let #SizeFullPhone = Length($FullPhone)
  Let $CleanPhone    = ''
  Let #PosDot1       = 0
  Let #PosDot2       = 0
  Let #PosDot3       = 0
  !Clean Phone
  While #i <= #SizeFullPhone
    Let $Test = Substr($FullPhone,#i,1)
    If $Test >= '0' And $Test <= '9' OR $Test = '.'
          Let $CleanPhone = $CleanPhone || $Test
    End-If
    Add 1 to #i
  End-While

  Let #SizeCleanPhone = Length($CleanPhone)
  Let #i = 1

  !Find dots positions
  While #i <= #SizeCleanPhone
    Let $Test = Substr($CleanPhone,#i,1)
    If $Test = '.'
      If #PosDot1 > 0 AND #PosDot2 > 0
        Let #PosDot3 = #i
      End-If
      If #PosDot1 > 0 AND #PosDot3 = 0
              Let #PosDot2 = #i
      End-If
      If #PosDot2 = 0 AND #PosDot3 = 0
              Let #PosDot1 = #i
      End-if
      add 1 to #DotNumber
    End-If
    Add 1 to #i
  End-While

  Evaluate #DotNumber
    When = 0
      !Only phone
      Let $Phone = $CleanPhone
      Break
    When = 1
      !Maybe DDD.phone or phone.Ramal
      If #PosDot1 <= 4
        !DDD.Phone
        Let $PhoneDDD   = Substr($CleanPhone,1           , #PosDot1 - 1)
        Let $Phone      = Substr($CleanPhone,#PosDot1 + 1, #SizeCleanPhone)
      Else
        !Phone.Ramal
        Let $Phone      = Substr($CleanPhone,1           , #PosDot1 - 1)
        Let $PhoneRamal = Substr($CleanPhone,#PosDot1 + 1, #SizeCleanPhone)
      End-If
      Break
    When = 2
      !Maybe DDD.Phone.Ramal or DDI.DDD.Phone
      If (#PosDot2 - #PosDot1) > 5
        !DDD.Phone.Ramal
        Let $PhoneDDD   = Substr($CleanPhone, 1           , #PosDot1 - 1)
        Let $Phone      = Substr($CleanPhone, #PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
        Let $PhoneRamal = Substr($CleanPhone,#PosDot2 + 1, #SizeCleanPhone)
      Else
        !DDI.DDD.Phone
        Let $PhoneDDI   = Substr($CleanPhone,1           , #PosDot1 - 1)
        Let $PhoneDDD   = Substr($CleanPhone,#PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
        Let $Phone      = Substr($CleanPhone,#PosDot2 + 1, #SizeCleanPhone)
      End-If

      Break
    When = 3
      !Must be DDI.DDD.Phone.Ramal
      Let $PhoneDDI   = Substr($CleanPhone, 1           , #PosDot1 - 1)
      Let $PhoneDDD   = Substr($CleanPhone, #PosDot1 + 1, (#PosDot2 - #PosDot1) - 1)
      Let $Phone      = Substr($CleanPhone, #PosDot2 + 1, (#PosDot3 - #PosDot2) - 1)
      Let $PhoneRamal = Substr($CleanPhone, #PosDot3 + 1, #SizeCleanPhone)
      Break
  End-Evaluate
  Let #X = Length($Phone)
  Let #Y = Length($PhoneDDD)

  If Substr($PhoneDDD,1,1) = '0'
      Let $PhoneDDD = Substr($PhoneDDD,2,#Y)
      Let #Y = Length($PhoneDDD)
  End-If

  If #X > 8
    Let $Phone = Substr($Phone, 1,8)
  End-If

  If #Y > 2
    Let $PhoneDDD = Substr($PhoneDDD, 1,2)
  End-If

#debugx show '$PhoneDDI '  $PhoneDDI
#debugx show '$PhoneDDD '  $PhoneDDD
#debugx show '$Phone    '  $Phone
End-Procedure GetPhoneBRA

Begin-Procedure OnlyNumbers($StrNbrs, :$Result, :$Changed)
#debugx show 'Begin-Procedure: OnlyNumbers'

    Let #i = 1
    Let $Result = ''
    Let $Changed = 'N'
    Let #StrSize = Length($StrNbrs)

    While #i <= #StrSize
        Let $test = Substr($StrNbrs, #i, 1)
        Find $test In '1234567890' 0 #findPos
        #debugx show '$test :' $test '   #findPos:' #findPos
        If #findPos >= 0
            !Only Add valid digits
            Let $Result = $Result || $test
        Else
            !Invalid char found
            Let $Changed = 'Y'
        End-if
    Add 1 to #i
    End-while
End-Procedure OnlyNumbers

!******************************************************************************
Begin-Procedure PrintTime($label)
#debugx show 'Begin-Procedure: PrintTime'
!******************************************************************************
  Let $tempTime = datenow()

  Let $TimeToShow = datetostr(datenow(), 'HH24:MI:SS.NNNNNN')

  Show 'TIME :: ' $label ' ' $TimeToShow
End-Procedure

!*****************************
Begin-Procedure CreateSQLJobActions
#debug show 'Begin-Procedure CreateSQLJobActions **'
!*****************************

Let $SQL_HIR_REH_XFR_POI = ''
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || 'SELECT JA.ACTION FROM PS_ACTION_STAT_TBL JA '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || 'WHERE (EXISTS (SELECT ''X'' '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '       FROM PS_LEG_MOV_DET_BRA SP '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '       WHERE SP.PROCESS_TYPE_BRA = ''10'' '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '       AND SP.SEFIP_LEG_MOV_BRA IN (''N1'', ''N2'') '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '       AND SP.ACTION = JA.ACTION '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '       AND SP.EFFDT = (SELECT MAX(EFFDT) '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '                       FROM PS_LEG_MOV_DET_BRA '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '                       WHERE PROCESS_TYPE_BRA = SP.PROCESS_TYPE_BRA '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '                       AND EFFDT <= ''' || $EndDt || '''))) '
Let $SQL_HIR_REH_XFR_POI = $SQL_HIR_REH_XFR_POI || '  OR (SET_STATUS_FLG = ''Y'' AND EMPL_STATUS = ''A'' AND HR_STATUS = ''A'' AND SET_LST_HIRE_DT = ''2'') '

Let $SQL_TER = ''
Let $SQL_TER = $SQL_TER || 'SELECT JA.ACTION FROM PS_ACTION_STAT_TBL JA '
Let $SQL_TER = $SQL_TER || 'WHERE (JA.SET_STATUS_FLG = ''Y'' AND JA.EMPL_STATUS = ''T'' AND '
Let $SQL_TER = $SQL_TER || 'JA.HR_STATUS = ''I'' AND JA.SET_TERM_DT = ''3'') '

Let $SQL_REH = ''
Let $SQL_REH = $SQL_REH || 'SELECT ACTION FROM PS_ACTION_STAT_TBL '
Let $SQL_REH = $SQL_REH || 'WHERE (SET_STATUS_FLG = ''Y'' AND EMPL_STATUS = ''A'' AND '
Let $SQL_REH = $SQL_REH || 'HR_STATUS = ''A'' AND SET_LST_HIRE_DT = ''2'' AND SET_HIRE_DT = ''0'') '



Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = ''
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || 'SELECT JA.ACTION FROM PS_ACTION_STAT_TBL JA '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || 'WHERE (EXISTS (SELECT ''X'' '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '       FROM PS_LEG_MOV_DET_BRA SP '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '       WHERE SP.PROCESS_TYPE_BRA = ''10'' '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '       AND SP.SEFIP_LEG_MOV_BRA IN (''N1'', ''N2'') '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '       AND SP.ACTION = JA.ACTION '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '       AND SP.EFFDT = (SELECT MAX(EFFDT) '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '                       FROM PS_LEG_MOV_DET_BRA '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '                       WHERE PROCESS_TYPE_BRA = SP.PROCESS_TYPE_BRA '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '                       AND EFFDT <= ''' || $EndDt || '''))) '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '  OR (JA.SET_STATUS_FLG = ''Y'' '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '      AND ((JA.EMPL_STATUS = ''A'' AND JA.HR_STATUS = ''A'' AND JA.SET_LST_HIRE_DT = ''2'' AND SET_TERM_DT = ''1'') OR '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '           (JA.EMPL_STATUS = ''S'' AND JA.HR_STATUS = ''A'' AND JA.SET_LST_HIRE_DT = ''0'' AND SET_TERM_DT = ''3'') OR '
Let $SQL_TER_COM_LOF_XFR_HIR_REH_POI = $SQL_TER_COM_LOF_XFR_HIR_REH_POI || '           (JA.EMPL_STATUS = ''T'' AND JA.HR_STATUS = ''I'' AND JA.SET_LST_HIRE_DT = ''0'' AND SET_TERM_DT = ''3'' AND HR_STATUS_VALID <> ''I''))) '

Let $SQL_TER_REH_HIR_POI = ''
Let $SQL_TER_REH_HIR_POI = $SQL_TER_REH_HIR_POI || 'SELECT JA.ACTION FROM PS_ACTION_STAT_TBL JA '
Let $SQL_TER_REH_HIR_POI = $SQL_TER_REH_HIR_POI || 'WHERE (SET_STATUS_FLG = ''Y'' AND EMPL_STATUS = ''A'' AND HR_STATUS = ''A'' AND SET_LST_HIRE_DT = ''2'') '
Let $SQL_TER_REH_HIR_POI = $SQL_TER_REH_HIR_POI || 'OR (JA.SET_STATUS_FLG = ''Y'' AND JA.EMPL_STATUS = ''T'' AND JA.HR_STATUS = ''I'' AND JA.SET_TERM_DT = ''3'') '

#Debug Show '   $SQL_HIR_REH_XFR_POI             :' $SQL_HIR_REH_XFR_POI
#Debug Show '   $SQL_TER                         :' $SQL_TER
#Debug Show '   $SQL_REH                         :' $SQL_REH
#Debug Show '   $SQL_TER_COM_LOF_XFR_HIR_REH_POI :' $SQL_TER_COM_LOF_XFR_HIR_REH_POI
#Debug Show '   $SQL_TER_REH_HIR_POI             :' $SQL_TER_REH_HIR_POI


End-Procedure CreateSQLJobActions



#Include 'setup32.sqc'   !Printer and page-size initialization
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'sqrtrans.sqc'
#include 'getcodta.sqc'  !Get selected fields from Company Table
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'gpbrmape.sqc'  !Get Pin Code
#include 'brfile01.sqc'  !File Utilities
#Include 'tranctrl.sqc'  !Transaction control
