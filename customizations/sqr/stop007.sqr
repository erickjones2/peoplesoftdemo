!-----------------------------------------------------------------------
!  STOP007:  Vesting Forecast for Restricted Exercises
!-----------------------------------------------------------------------
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:33                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Prints all shares exercised within a date range.
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Create-Array
  do Process-Main
  do Reset
  do Successful-EOJ

  let $CurrentTime = datenow()
  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID      = 'STOP007'
  let $cur = $basecurr
  let $StockPlanType = 'O'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language

  if $prcs_process_instance = ''
    input $RC_Stock_ID      maxlen=10 'Enter Stock ID'       type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID   maxlen=10 'Stock ID is required' type=Char
    end-while
    input $RC_Stock_Plan    maxlen=10 'Enter the STOCK PLAN ID   or press enter for all' type=char
    input $RC_Option_Type   maxlen=4  'Enter the OPTION TYPE     or press enter for all' type=char
    uppercase $RC_Stock_ID
    uppercase $RC_Option_Type
    uppercase $RC_Stock_Plan
    do Ask-From-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'From Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $StockId        = rtrim($RC_Stock_ID   ,' ')
  let $RC_Stock_Plan  = rtrim($RC_Stock_Plan ,' ')
  let $RC_Option_Type = rtrim($RC_Option_Type,' ')
  let $RC_FromDate    = rtrim($RC_FromDate   ,' ')
  let $RC_ThruDate    = rtrim($RC_ThruDate   ,' ')
  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')
  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 07

  #include 'stdhdg01.sqc'
 
  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  ,015,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  print $OptionTypeLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,015,004)

  print $StockPlanLbl                                      (+1,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,015,010)

  print $NameLbl                                           (+2,001,030)
  print $EmplLbl                                           (  ,032,011)
  print $GrantNbrLbl                                       (  ,045,012)
  print $GrantDtLbl                                        (  ,059,013)
  print $OptionTypeLbl                                     (  ,074,012)
  print $StockPlanLbl                                      (  ,088,011)
  print $ExerNbrLbl                                        (  ,101,015)
  print $GrantPriceLbl                                     (  ,120,011)
  print $VestDtLbl                                         (  ,133,010)
  print $ShrVestLbl                                        (  ,154,016)
  print '-'                                                (+1,001,166) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STOP002')

  do Get_Field_Information ('STOCK',   'FROM',              $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',   'THRU',              $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',          $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN',        $StockPlanLbl,   #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE',    $OptionTypeLbl,  #DW)
  do Get_Field_Information ('STOCK',   'NAME',              $NameLbl,        #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',            $EmplLbl,        #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',         $GrantNbrLbl,    #DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',       $GrantPriceLbl,  #DW)
  do Get_Field_Information ('STOCK',   'GRANT_DT',          $GrantDtLbl,     #DW)
  do Get_Field_Information ('STOCK',   'EXERCISE_NBR',      $ExerNbrLbl,     #DW)

  do Get_Field_Information ('STOP002', 'STOP007',           $ReportTitle,    #DW)
  do Get_Field_Information ('STOP002', 'SHARES_VESTED',     $ShrVestLbl,     #DW)
  do Get_Field_Information ('STOP002', 'VEST_DT',           $VestDtLbl,      #DW)
  do Get_Field_Information ('STOP002', 'TOTAL_WEIGHT',      $TotalWeightLbl, #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  if $RC_Stock_Plan <> ''
    let $PlanClause    = 'and C.STOCK_PLAN = '''||$RC_Stock_Plan ||''''
  else
    let $PlanClause    =  ''
  end-if
  if $RC_Option_Type <> ''
    let $OptionClause  = 'and C.ST_OPTION_TYPE = '''||$RC_Option_Type ||''''
  else
    let $OptionClause  = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan               -
               size  = 50                      -
               field = StockPlan:char          -
               field = VestCost:number         -
               field = SharesVested:number

  create-array name  = OptionType              -
               size  = 10                      -
               field = OptionType:char         -
               field = VestCost:number         -
               field = SharesVested:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let #PlanCount = 1
  let #TypeCount = 1

Begin-Select

A.EMPLID
A.GRANT_NBR
A.VEST_DT
A.SHARES_VESTED
B.EXERCISE_NBR
C.GRANT_DT
C.GRANT_PRICE
C.STOCK_PLAN
C.ST_OPTION_TYPE
D.NAME

  let $EmplId       = rtrim(&a.emplid,' ')
  let $GrantNbr     = rtrim(&a.grant_nbr,' ')
  let $VestDt       = rtrim(&a.vest_dt,' ')
  let #SharesVested = &a.shares_vested
  let #ExerciseNbr  = &b.exercise_nbr
  let $GrantDt      = rtrim(&c.grant_dt,' ')
  let #GrantPrice   = &c.grant_price
  let $StockPlan    = rtrim(&c.stock_plan,' ')
  let $OptionType   = rtrim(&c.st_option_type,' ')
  let $Name         = rtrim(&d.name,' ')
  let #VestCost     = #SharesVested * #GrantPrice
  let $RowSelected  = 'Y'
  do Print-Details
  do Populate-Arrays

FROM PS_ST_GRNT_VST_DTL A,
     PS_ST_GRANT_EXER   B,
     PS_ST_GRANT        C,
     PS_ST_PERSON_NAME  D
WHERE A.EMPLID              = B.EMPLID
  AND A.STOCK_ID            = B.STOCK_ID
  AND A.GRANT_NBR           = B.GRANT_NBR
  AND A.VEST_EFFDT          = (SELECT MAX(VEST_EFFDT)
                                 FROM PS_ST_GRNT_VST_DTL
                                WHERE EMPLID      = A.EMPLID
                                  AND STOCK_ID    = A.STOCK_ID
                                  AND GRANT_NBR   = A.GRANT_NBR )
  AND A.SEQ_NUM             = (SELECT MAX(SEQ_NUM)
                                 FROM PS_ST_GRNT_VST_DTL
                                WHERE EMPLID     = A.EMPLID
                                  AND STOCK_ID   = A.STOCK_ID
                                  AND GRANT_NBR  = A.GRANT_NBR
                                  AND VEST_DT    = A.VEST_DT
                                  AND VEST_EFFDT = A.VEST_EFFDT )
  AND A.EMPLID              = C.EMPLID
  AND A.STOCK_ID            = C.STOCK_ID
  AND A.GRANT_NBR           = C.GRANT_NBR
  AND A.EMPLID              = D.EMPLID
  AND B.RESTRICTD_EXERCISE  = 'Y'
  AND B.STOCK_ID            = $StockId
  AND A.VEST_DT            >= $RC_FromDate
  AND A.VEST_DT            <= $RC_ThruDate
  [$PlanClause]
  [$OptionClause]
ORDER BY D.NAME, C.ST_OPTION_TYPE

End-Select

  if $RowSelected = 'Y' !implies some data selected
    do Print-Totals
  end-if
  
End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  print $Name                                              (+1,001,030)
  print $EmplId                                            (  ,032,011)
  print $GrantNbr                                          (  ,045,010)
  do Format-DateTime ($GrantDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,059,010)
  print $OptionType                                        (  ,074,012)
  print $StockPlan                                         (  ,088,015)
  print #ExerciseNbr                                       (  ,108,008) edit 99999999
  print #GrantPrice                                        (  ,118,013) edit $9,999.999999
  do Format-DateTime ($VestDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,133,010)
  print #SharesVested                                      (  ,145,022) edit 999,999,999,999.999999

  let #TotalCost   = #TotalCost   + #VestCost
  let #TotalVested = #TotalVested + #SharesVested

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan #VestCost #SharesVested into StockPlan(1) StockPlan VestCost SharesVested
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #VestCost #SharesVested to StockPlan(#Row) VestCost SharesVested
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #VestCost #SharesVested into StockPlan(#PlanCount) StockPlan VestCost SharesVested
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

  if #TypeCount = 1
    put $OptionType #VestCost #SharesVested into OptionType(1) OptionType VestCost SharesVested
    let #TypeCount = #TypeCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #TypeCount
      get $AOptionType from OptionType(#Row) OptionType
      if $OptionType = $AOptionType
        array-add #VestCost #SharesVested to OptionType(#Row) VestCost SharesVested
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $OptionType #VestCost #SharesVested into OptionType(#TypeCount) OptionType VestCost SharesVested
      let #TypeCount = #TypeCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints totals for each print break section.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  new-page

  let #AvgPrice = round((#TotalCost / #TotalVested),6)
  print $TotalWeightLbl                                    (+2,080,023) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgPrice                                          (  ,118,013) bold edit $9,999.999999
  print #TotalVested                                       (  ,145,022) bold edit 999,999,999,999.999999

  print $OptionTypeLbl                                     (+2,100,012) bold underline
  let #Row = 1
  while #Row < #TypeCount
    get $OptionType #VestCost #SharesVested from OptionType(#Row) OptionType VestCost SharesVested
    let #AvgPrice = round((#VestCost / #SharesVested),6)
    print $OptionType                                      (+1,100,010) bold
    print #AvgPrice                                        (  ,118,013) bold edit $9,999.999999
    print #SharesVested                                    (  ,145,022) bold edit 999,999,999,999.999999
    let #Row = #Row + 1
  end-while

  print $StockPlanLbl                                      (+2,100,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #VestCost #SharesVested from StockPlan(#Row) StockPlan VestCost SharesVested
    let #AvgPrice = round((#VestCost / #SharesVested),6)
    print $StockPlan                                       (+1,100,010) bold
    print #AvgPrice                                        (  ,118,013) bold edit $9,999.999999
    print #SharesVested                                    (  ,145,022) bold edit 999,999,999,999.999999
    let #Row = #Row + 1
  end-while

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'sqlerr.sqc'      !SQL error processing
#include 'prcsapi.sqc'     !Process Scheduler API
#include 'prcsdef.sqc'     !Update Process Open_Trans variable declaration
#include 'eoj.sqc'         !End of Report Format
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'getrplng.sqc'    !Get the report language
#include 'readxlat.sqc'    !Read the Translate Table for the desired values.
#include 'strunctl.sqc'    !Runcontrol
#include 'askftd.sqc'      !Prompts for from/thru date range
