!***********************************************************************
! GPDEAL07  : Element Contribution List (Lohnartenstamm)               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:34:59                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc' !set environment

#define col1  5                      !PIN_NM
#define col2  21                     !DESCR
#define col3  48                     !GL
#define col4  58                     !Accum1
#define col14 104
begin-setup

create-array name=Accum size=10

field=arr1:number
field=arr2:number
field=arr3:number
field=arr4:number
field=arr5:number
field=arr6:number
field=arr7:number
field=arr8:number
field=arr9:number
field=arr10:number


create-array name=Acc1 size=10

field=ar1:CHAR
field=ar2:CHAR
field=ar3:CHAR
field=ar4:CHAR
field=ar5:CHAR
field=ar6:CHAR
field=ar7:CHAR
field=ar8:CHAR
field=ar9:CHAR
field=ar10:CHAR

end-setup

!***********************************************************************
begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

#include 'setup31.sqc'

!***********************************************************************
begin-procedure Process-Main
let #Counter = 0

BEGIN-SELECT
G.PIN_NUM
 let #Counter = #Counter + 1
 if #Counter > 10
    exit-select
 end-if
FROM PS_GPDE_RC_AL07 G
WHERE
[$Crit1]
END-SELECT

if (#Counter = 0) or (rtrim($Rep_Name, ' ') = '')
  goto Exit1
end-if

let #Abstand= 60/#Counter
let #Abstand=ROUND(#Abstand,0)
let #Counter = 0
let #Sequ_Num = 0

BEGIN-SELECT
E.PIN_NUM
E.GPDE_RP_DSH
E.GPDE_AL_SNR
D1.PIN_NM
D1.PIN_NUM

 let #Counter = #Counter + 1

 if #Counter > 10
    exit-select
 end-if

 let #Pin_Nummer = &E.PIN_NUM
 let $DescrShort = rtrim(ltrim(&E.GPDE_RP_DSH,' '),' ')
 let $P_NM    = ltrim(rtrim(&D1.PIN_NM,' '),' ')
 let $Pin_Nm  = substr($P_NM,1,-1+#Abstand)
 let $Pin_Nm   = ltrim(rtrim($Pin_Nm,' '),' ')

 put  #Pin_Nummer   into  Accum(#Counter)

 if length($DescrShort)=0
   put  $Pin_Nm into Acc1(#Counter)
 else
   let $DescrShort = substr($DescrShort,1,-1+#Abstand)
   put  $DescrShort into Acc1(#Counter)
 end-if

from
PS_GPDE_RC_AL07 E ,PS_GP_PIN D1
where D1.PIN_NUM = E.PIN_NUM
[$Criteria]
order by
E.GPDE_AL_SNR
END-SELECT

!-----------------------------------------------------------------------
begin-sql
delete from PS_GPDE_RP_AL07_1
end-sql

!-----------------------------------------------------------------------
begin-sql
delete from PS_GPDE_RP_AL07_2
end-sql

let #i=1
let #merk=1
while #i<= #Counter
   get #b from Accum(#i)
   let #NewSign = 1

!-----------------------------------------------------------------------
begin-select DISTINCT
ACM.ACM_SIGN

   let $Sign   = ltrim(rtrim(&ACM.ACM_SIGN,' '),' ')
   if $Sign = 'S'
       let #NewSign = -1
   else
     if $Sign = 'A'
         let #NewSign = 1
     else
         let #NewSign = 0
     end-if
   end-if

from PS_GP_ACM_MBR ACM
where ACM.PIN_MBR_NUM = #b
end-select

do Acc_Er_Dd(#i,#NewSign,#b,#Sequ_Num)

!-----------------------------------------------------------------------
while #merk<=#Sequ_Num

begin-select
GPDE_AC_PNR
GPDE_AC_SEQ
GPDE_AC_SIG

  let #NewSign = &GPDE_AC_SIG
  let #b     = &GPDE_AC_PNR

  do Acc_Er_Dd(#i,#NewSign,#b,#Sequ_Num)

FROM PS_GPDE_RP_AL07_1
WHERE GPDE_AC_SEQ=#merk
end-select

 let #merk = #merk + 1
end-while

 let #i=#i+1
end-while

!-----------------------------------------------------------------------
if $PRT_SIGN = 'Y'

begin-select
B1.PIN_NUM
B1.GPDE_BL_PR_ORDER
B1.GPDE_BL_PR_GROUP

   let #P_N1 = &B1.PIN_NUM
   let #P_O1 = &B1.GPDE_BL_PR_ORDER
   let #P_G1 = &B1.GPDE_BL_PR_GROUP
    let #M   = 0
    let #N    =  0

 do Insert_Print(#P_N1,#M,#N,#P_O1,#P_G1)

from PS_GPDE_BL_PRINT B1
where B1.GPDE_RC_REPORTNAME = $Rep_Name and
      B1.PIN_NUM not in (select C.GPDE_ED_PNR
                    from PS_GPDE_RP_AL07_2 C)
end-select

!-------------------------------------------------------
BEGIN-SQL
delete from PS_GPDE_RP_AL07_2  where GPDE_ED_PNR
    not in (select B1.PIN_NUM from PS_GPDE_BL_PRINT B1
 where B1.GPDE_RC_REPORTNAME = $Rep_Name)
END-SQL

else

BEGIN-SQL
delete from PS_GPDE_RP_AL07_2  where GPDE_ED_PNR
    in (select B11.PIN_NUM from PS_GPDE_BL_PRINT B11
     where B11.GPDE_RC_REPORTNAME = $Rep_Name)
END-SQL
end-if

let #Page_Merk = 0
let #Sign_Temp = 0

!-----------------------------------------------------------------------
begin-select
A2.FROMDATE
A2.TO_DATE

    let $B_D_O   = &A2.FROMDATE
    let $E_D_O   = &A2.TO_DATE
    let $B_D_O_1 = $B_D_O
    let $E_D_O_1 = $E_D_O

    do Format-DateTime($B_D_O,$B_D1,{DEFCMP},'','')
    do Format-DateTime($E_D_O,$E_D1,{DEFCMP},'','')
    do Format-DateTime($Ctl_From_Dt,$From_D1,{DEFCMP},'','')
    do Format-DateTime($Ctl_To_Dt,$To_D1,{DEFCMP},'','')

    if (($E_D1 < $From_D1) and ($E_D_O <> ''))  or
       (($B_D1 > $To_D1) and ($Ctl_To_Dt <> ''))
    else
       do Check_Sign($B_D_O_1,$E_D_O_1,#Sign_Temp)
       if #Sign_Temp=1
           do PrintList($B_D_O,$E_D_O,$Ctl_From_Dt,$Ctl_To_Dt,1)
           let #Page_Merk = 1
           new-page
       end-if
    end-if

FROM PS_GPDE_RP_AL07_2 A2
group by A2.FROMDATE,A2.TO_DATE
order by A2.FROMDATE,A2.TO_DATE
end-select

if #Page_Merk = 0
    do PrintList($Ctl_From_Dt,$Ctl_To_Dt,$Ctl_From_Dt,$Ctl_To_Dt,0)
    new-page
end-if

Exit1:
end-procedure

begin-procedure Check_Sign($B_Data1,$E_Data1,:#Sign_Temp)
let #Sign_Temp   =0
let $TodateStr   =''
let $FromdateStr  =''

if $B_Data1 = ''
 let $FromdateStr =' A3.FROMDATE is null '
else
 let $FromdateStr =' A3.FROMDATE = ''' || $B_Data1 || ''' '
end-if

if $E_Data1 = ''
 let $TodateStr = ' and A3.TO_DATE is null '
else
 let $TodateStr = ' and A3.TO_DATE = ''' || $E_Data1 || ''' '
end-if

begin-select
A3.GPDE_ED_SIG
  let #ED_Sign = &A3.GPDE_ED_SIG
  if #ED_Sign <> 0
     let #Sign_Temp=1
  end-if
from PS_GPDE_RP_AL07_2 A3
where
[$FromdateStr]
[$TodateStr]
end-select
end-procedure

!***********************************************************************
begin-procedure Insert_Print(#P_N1,#M,#N,#P_O1,#P_G1)
let #_Seq_N_EDA = #_Seq_N_EDA + 1

begin-sql
     insert into PS_GPDE_RP_AL07_2 (GPDE_ED_PNR,GPDE_ED_SEA,GPDE_ED_SEQ,
                                 GPDE_ED_SIG,GPDE_ED_ORD,GPDE_ED_GRO)
     values(#P_N1,#_Seq_N_EDA,#M,#N,#P_O1,#P_G1)
end-sql

end-procedure

!***********************************************************************
begin-procedure Acc_Er_Dd(#i,:#NewSign,#bed,:#Sequ_Num)
let #NewS = 0
begin-select
D.PIN_NUM
D.PIN_MBR_NUM
D.ACM_SIGN
D.ENTRY_TYPE_ELEM
D.BGN_DT
D.END_DT

   let $Beg_Date = &D.BGN_DT
   let $End_Date = &D.END_DT
   let $Sign   = ltrim(rtrim(&D.ACM_SIGN,''),'')

   if $Sign = 'S'
     let #NewS = -1 * #NewSign
   else
     if $Sign = 'A'
       let #NewS = #NewSign
     else
       let #NewS = 0
     end-if
   end-if

   let #K = &D.PIN_MBR_NUM
   let $t = ltrim(rtrim(&D.ENTRY_TYPE_ELEM,' '),' ')

   if $t='AC0'
      let #Sequ_Num = #Sequ_Num + 1

      do Insert_AC0(#K,#Sequ_Num,#NewS)
      do Insert_ED0(#K,#i,#NewS,$Beg_Date,$End_Date)
   else
      if (($t='DD0') or ($t='ER0'))
          do Insert_ED0(#K,#i,#NewS,$Beg_Date,$End_Date)
      end-if
    end-if

from PS_GP_ACM_MBR D
WHERE D.PIN_NUM = #bed
END-SELECT
end-procedure

!-------------------------------------------------------------------
begin-procedure Insert_AC0(#K,#Sequ_Num,#NewSign)

begin-sql
insert into PS_GPDE_RP_AL07_1 (GPDE_AC_PNR,GPDE_AC_SEQ,CAL_RUN_ID,GPDE_AC_SIG)
    values (#K,#Sequ_Num,'X',#NewSign)
end-sql

end-procedure

!***********************************************************************
begin-procedure Insert_ED0(#K,#i,#NewSign,$Be_Date,$En_Date)
let #Ord   = 0
let #gr    = 0
let #merk1  = 0

if ($_PRT_SIGN = 'Y')
begin-select
A1.GPDE_BL_PR_ORDER
A1.GPDE_BL_PR_GROUP

  let #Ord   = &A1.GPDE_BL_PR_ORDER
  let #gr    = &A1.GPDE_BL_PR_GROUP
  let #merk1 = 1

from PS_GPDE_BL_PRINT A1
where  (A1.PIN_NUM = #K) AND
       (A1.GPDE_RC_REPORTNAME = $_Rep_Name)
end-select

if #merk1 = 0
 goto m
end-if

else
begin-select distinct
A2.GPDE_BL_PR_ORDER
A2.GPDE_BL_PR_GROUP

  let #Ord   = &A2.GPDE_BL_PR_ORDER
  let #gr    = &A2.GPDE_BL_PR_GROUP
  let #merk1 = 1
from PS_GPDE_BL_PRINT A2
where  (A2.PIN_NUM = #K) AND
       (A2.GPDE_RC_REPORTNAME <> $_Rep_Name)
end-select

if #merk1 = 0
 goto m
end-if

end-if

let #_Seq_N_EDA = #_Seq_N_EDA + 1

begin-sql
Insert into PS_GPDE_RP_AL07_2(GPDE_ED_PNR,GPDE_ED_SEA,GPDE_ED_SEQ,GPDE_ED_SIG,GPDE_ED_ORD,
                              GPDE_ED_GRO,FROMDATE,TO_DATE )
            values (#K,#_Seq_N_EDA,#i,#NewSign,#Ord,#gr,$Be_Date,$En_Date)
end-sql

m:
end-procedure

!*******************************************************************************
begin-procedure PrintList($B_D_O_2,$E_D_O_2,$Ctl_From_Dt_2,$Ctl_To_Dt_2,#Merker)

do Format-DateTime($B_D_O_2,$B_D2,{DEFCMP},'','')
do Format-DateTime($E_D_O_2,$E_D2,{DEFCMP},'','')
do Format-DateTime($Ctl_From_Dt_2,$From_D2,{DEFCMP},'','')
do Format-DateTime($Ctl_To_Dt_2,$To_D2,{DEFCMP},'','')

if $B_D2 <> ''
  do Format-DateTime($B_D_O_2, $B_D_O_21, {DEFDATE}, '', '')
  let $_out = $B_D_O_21
else
  let $_out = ''
end-if

let #Old  = 0
let #New  = 0
let #c    = -1
let #O_Gr = 0
let #N_Gr = 0

begin-select
A.GPDE_ED_PNR
A.GPDE_ED_SEQ
A.GPDE_ED_GRO
A.GPDE_ED_SIG
A.GPDE_ED_ORD
A.FROMDATE
A.TO_DATE
B.PIN_CODE
B.PIN_NM

  let #P_N = &A.GPDE_ED_PNR

  do Get-Description-List(#P_N,$_language_cd,$ObjectDescr,$Pn_NM)

  let $P_D    =  $ObjectDescr
  !let $P_C    = &B.PIN_CODE
  let #AC     = &A.GPDE_ED_SEQ
  let #N_Sign = &A.GPDE_ED_SIG
  let #New    = #P_N
  let #N_Gr   = &A.GPDE_ED_GRO
  let $BD     = &A.FROMDATE
  let $ED     = &A.TO_DATE

  let $P_C    = $Pn_NM
  if #O_Gr <> #N_Gr
    if #O_Gr <> 0
         print ' '   (+1,)
    end-if
  end-if

  let $h  = to_char(#N_Sign)

  if $h = '-1'
     let $NS = '-'
  else
     if $h = '1'
        let $NS = '+'
     else
        let $NS = ''
     end-if
  end-if

  do Format-DateTime($BD,$B_D_2,{DEFCMP},'','')
  do Format-DateTime($ED,$E_D_2,{DEFCMP},'','')

  if #Merker <> 0
     if ($B_D_2 > $B_D2) or (($B_D_2 > $E_D2) and ($E_D2 <> '')) or
            (($E_D_2 < $B_D2) and ($E_D_2 <> ''))
        let $NS = ''
     end-if
  else
     let $NS = ''
  end-if

  evaluate #AC
  when = 0
     let #c = 0
     break
  when = 1
     let #c = {col4}
     break
  when = 2
     let #c = #_Abstand +1+ {col4}
     break
  when = 3
     let #c = #_Abstand *2 +2+ {col4}
     break
  when = 4
     let #c = #_Abstand *3+ 3+{col4}
     break
  when = 5
     let #c = #_Abstand *4+4+ {col4}
     break
  when = 6
     let #c = #_Abstand *5+ 5+{col4}
     break
  when = 7
     let #c = #_Abstand *6+ 6+{col4}
     break
  when = 8
     let #c =#_Abstand *7+ 7+{col4}
     break
  when = 9
     let #c = #_Abstand *8+8+ {col4}
     break
  when = 10
     let #c = #_Abstand *9+ 9+{col4}
     break
  when-other
    break
  end-evaluate

  let $P_C    = ltrim(rtrim(&B.PIN_NM,' '),' ')
  let $P_C   = substr($P_C,1,15)   !(4,15)
  let $P_D    = ltrim(rtrim($P_D,' '),' ')
  let $P_D   = substr($P_D,1,25)
  let #P_N    = &A.GPDE_ED_PNR
  let #AC    = &A.GPDE_ED_SEQ
  let #N_Sign = &A.GPDE_ED_SIG
  let #New   = #P_N
  let $h   = to_char(#N_Sign)

  if  #c = 0
        print $P_C     (+1,{col1})
        print $P_D     (,{col2})
        let #c = -1
  else
     if #New=#Old
        print $P_C    (,{col1})
         print $P_D    (,{col2})
         print $NS    (,#c)
     else
        print $P_C    (+1,{col1})
         print $P_D    (,{col2})
       print $NS     (,#c)
     end-if
 end-if

 let #Old = #New
 let #O_Gr = #N_Gr

from PS_GPDE_RP_AL07_2 A,PS_GP_PIN B
where B.PIN_NUM = A.GPDE_ED_PNR

group by A.GPDE_ED_GRO,A.GPDE_ED_ORD,A.GPDE_ED_PNR,
      A.GPDE_ED_SEQ,A.GPDE_ED_SIG,A.FROMDATE,
   A.TO_DATE,B.PIN_CODE,B.PIN_NM
order by A.GPDE_ED_GRO,A.GPDE_ED_ORD,A.GPDE_ED_PNR

end-select

end-procedure

!****************************************************************************
begin-procedure Init-Report

  do Stdapi-Init
  move 'GPDEAL07' to $ReportID

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
  end-if

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation

  let $ReportTitle = $TITLE1
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report

!****************************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPDEAL07', 'TITLE1',           $TITLE1,#CW)
  do Get_Field_Information ('GPDEAL07', 'ELEMENT',         $ELEMENT,#CW)
  do Get_Field_Information ('GPDEAL07', 'DESCR1',           $DESCR1,#CW)
  do Get_Field_Information ('GPDEAL07', 'REPORT_IDT',   $Report_IDT,#CW)
  do Get_Field_Information ('GPDEAL07', 'PAGE_NO',         $Page_No,#CW)
  do Get_Field_Information ('GPDEAL07', 'RUN_DATE',       $Run_Date,#CW)
  do Get_Field_Information ('GPDEAL07', 'RUN_TIME',      $Run_TimeT,#CW)
  do Get_Field_Information ('GPDEAL07', 'DATES',             $DateS,#CW)
  do Get_Field_Information ('GPDEAL07', 'PRINT_CLASS', $PRINT_CLASS,#CW)
  do Get_Field_Information ('GPDEGLOB', 'PRINTCLASS',    $PRINTCLASS, #CW)

end-Procedure Report-Translation

begin-procedure Get-Values
  let $language_cd    = $PRCS_LANGUAGE_CD
  let $Ctl_To_Dt      = &GPDE_RUN_CNTL.GPDE_RC_TO_DT
  let $Ctl_From_Dt    = &GPDE_RUN_CNTL.GPDE_RC_FROM_DT
  let $Rep_Name       = &GPDE_RUN_CNTL.GPDE_RC_REPORTNAME
  let $PRT_SIGN    = &GPDE_RUN_CNTL.GPDE_RC_PRT_SIGN
  let $Criteria    = ' and E.OPRID = ''' || $prcs_oprid || ''' and E.RUN_CNTL_ID = ''' ||
                          $prcs_run_cntl_id || ''''
  let $Crit1     = ' G.OPRID = ''' || $prcs_oprid || ''' and G.RUN_CNTL_ID = ''' ||
                          $prcs_run_cntl_id || ''''

  show '$language_cd:' $language_cd
end-procedure Get-Values

!****************************************************************************
begin-procedure Ask-Input
input $OPID         'Enter OPRID' type=char
input $RUN_CNT_ID        'Enter RUN_CNTL_ID' type=CHAR
input $Ctl_From_Dt    'Enter Begin Date as dd-mm-yyyy i.e. 31-01-1996' type=date
input $Ctl_To_Dt     'Enter End Date as dd-mm-yyyy i.e. 31-01-1997' type=date
input $Rep_Name      'Enter Report name' type=CHAR

let $Criteria         = 'AND E.OPRID = ''' || $OPID || ''' and E.RUN_CNTL_ID = ''' || $RUN_CNT_ID ||
                                ''''
let $Crit1            = ' G.OPRID = ''' || $OPID || ''' and G.RUN_CNTL_ID = ''' || $RUN_CNT_ID ||
                                ''''
let $prcs_oprid       = $OPID
let $prcs_run_cntl_id =$RUN_CNT_ID
end-procedure Ask-Input

begin-heading   9
uppercase $ReportTitle
#include 'stdhdgtr.sqc'

let #col = {col4}
print $PRINTCLASS    (+1,#RptCol)
print ' ' ()
print $Rep_Name  ()

print $DateS  (+1,#RptCol)
print ' ' ()
print $out  (,)


print '_' (+2,1,126) fill
print $ELEMENT   (+1,{col1})
print $DESCR1    (,{col2})
print 'GL'       (,{col3})

let #i1  = 0
let $Ac1 = ''

while #i1 < #Counter
 let #i1 = #i1 + 1
 get $Ac1 from Acc1(#i1)
 print $Ac1   (,#col)
 let #col = #col + #Abstand +1
end-while
print '_' (+1,1,126) fill
end-heading

#include 'gpdeut06.sqc'
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'        !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'gpdeut02.sqc'  !routine for pin- description
#include 'datemath.sqc'

