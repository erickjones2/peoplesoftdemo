!***********************************************************************
!  GPMXIM10:  Instituto Mexicano Del Seguro Social,                    *
!             REPORTE DE MODIFICACION DE SALARIO DEL ASEGURADO  (EDI)  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  31781263                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization
 
#define c1 1
#define c2 7
#define c3 23
#define c4 75
#define c5 86
#define c6 92
#define c7 98
#define c8 106
#define c9 117
#define c10 123
#define c11 129
#define c12 143

begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move   'GPMXIM10' to $ReportID
  display $ReportID
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL'         to $ReportTitle1
  move   'DELEGACIÓN DEL IMSS'                          to $ReportTitle2
  move   'COMUNICACIÓN DE MODIFICACIÓN DE SALARIOS EDI' to $ReportTitle3
  display $ReportTitle1
  display $ReportTitle2
  display $ReportTitle3
  Show 'Ver.2020 PUM37.01'
  move '1' to $Reportdatetype
  move '1' to $Reportyear4
  move 'GPMXIM10' to $ReportID
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Init-Array
  !do Get-Max-DFSalary
  do Select-Parameters-IMSS2
  do Open-File

  if rtrim($Estabid,' ') = ''
     do Company-Report
  else
     move $Estabid to $Reg_Patronal
     do Process-IMSS-Location
  end-if
  close 1
  do Terminate
end-procedure

begin-procedure Terminate
    if #prcs_process_instance > 0
        do Update-Prcs-Run-Status
    end-if
    do Reset
end-procedure


!*************************************** 
! Get Employee Register by company (RFC)
!*************************************** 
begin-procedure Company-Report
begin-select DISTINCT
LT.ESTABID
  move &LT.ESTABID to $Reg_Patronal
  
  do Process-IMSS-Location

FROM PS_ESTAB_TBL LT
WHERE LT.COMPANY = $Company
AND LT.EFFDT = (SELECT MAX(EFFDT) 
                FROM PS_ESTAB_TBL
                WHERE ESTABID = LT.ESTABID
                AND COMPANY = LT.COMPANY
                AND EFFDT <= $EndDt)
AND LT.EFF_STATUS = 'A'
end-select
end-procedure Company-Report


begin-procedure Process-IMSS-Location
  move 'N' to $EndofReport
begin-SELECT
IMSS.DESCR
IMSS.DESCR_AC
IMSS.ADDRESS1
IMSS.ADDRESS2
IMSS.ADDRESS3
IMSS.ADDRESS4
IMSS.CITY
IMSS.COUNTY
IMSS.STATE
IMSS.POSTAL
IMSS.COUNTRY
IMSS.GUIDE_NBR_MEX
IMSS.ESTABID

  let $LocationName     = rtrim(&IMSS.DESCR,' ')
  let $LocationAbbrv    = rtrim(&IMSS.DESCR_AC,' ')
  let $LocationStreet1  = rtrim(&IMSS.ADDRESS1,' ')
  let $LocationStreet2  = rtrim(&IMSS.ADDRESS2,' ')
  let $LocationStreet3  = rtrim(&IMSS.ADDRESS3,' ')
  let $LocationStreet4  = rtrim(&IMSS.ADDRESS4,' ')
  let $LocationCity     = rtrim(&IMSS.CITY,' ')
  let $LocationCounty   = rtrim(&IMSS.COUNTY,' ')
  let $Guia             = rtrim(&IMSS.GUIDE_NBR_MEX,' ')
  let $Guia             = substr($Guia,2,6)

  move &IMSS.STATE       to $LocationState
  move &IMSS.POSTAL      to $LocationZip
  move &IMSS.COUNTRY     to $LocationCountry
  !let $IMSSer           = &IMSS.ESTABID
  Let $Job_Tbl = 'A'
  Let $Reg_Patronal_RC = $Reg_Patronal
  
  Do Get-Establishment-Optn
  
  do Report

FROM  PS_ESTAB_TBL IMSS

WHERE IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  EFFDT     <= $EndDt
                   AND    ESTABID = IMSS.ESTABID
                   AND    EFF_STATUS = 'A')
  AND IMSS.ESTABID  = $Reg_Patronal
end-SELECT
  move 'Y' to $EndofReport
end-procedure Process-IMSS-Location



begin-heading 8
  let #RptCol = {ColR} - 2
  if $Company  <> $PriorCompany
     do Get-Company-Data-Mex
     move $Company  to $PriorCompany
  end-if
  print 'PeopleSoft'        (1)  center
  print $ReportTitle1       (+1) center
  print 'Compañía:       '  (,1)
  do to_upper($CompanyName)
  Let $CompanyName = Substr($CompanyName, 1,52)
  print $CompanyName        ()
  print 'Página:   '        (,140)
  page-number               ()
  print $ReportTitle2       (+1) center
  print 'Reg.Patronal:   '  (,1)
  print $Reg_Patronal       ()  edit XXXXXXXXXX-X
  do to_upper($LocationName)
  let $locname = '('||rtrim($LocationName,' ')||')'
  print $locname            (,+2)
  print 'Fecha:    '        (,140)
  print $reportdate         ()
  print $ReportTitle3       (+1) center
  print 'Núm. de guía:   '  (,1)
  print $Guia               ()  edit XXXXX
  date-time () HH:MM:SS &ReportTime
  print 'Hora:     '        (,140)
  print &ReportTime         ()
  print '_' (+1,1,165) fill

 print 'NUM'                     (+1,{c1})
 print 'SEC.'                    (+1,{c1})
 print 'NUMERO DE    D'          (-1,{c2})
 print 'AFILIACION   V'          (+1,{c2})
 print 'NOMBRE DEL ASEGURADO'    (-1,{c3})
 print ' SALARIO'                (,{c4})
 print 'INTEGRADO'               (+1,{c4})
 print 'TIPO'                    (-1,{c5})
 print 'TRAB'                    (+1,{c5})
 print 'TIPO'                    (-1,{c6})
 print 'SAL.'                    (+1,{c6})
 print 'SEMANA'                  (-1,{c7})
 print 'JR.RED'                  (+1,{c7})
 print 'FECHA MOV.'              (-1,{c8})
 print 'UMF'                     (,{c9})
 print 'TIPO'                    (,{c10})
 print 'MOV.'                    (+1,{c10})
 print '  CLAVE'                 (-1,{c11})
 print 'TRABAJADOR'              (+1,{c11})
 print '    C U R P'             (-1,{c12})
 print ' '                       (+1,{c12})
 print '_' (+1,1,165) fill
end-heading


begin-procedure init-array
  create-array name=movim size=100000  field=detalle:char
end-procedure init array


begin-procedure Report
move 0 to #EECount
let $v_select = ''

if (rtrim($empini, ' ') <> '') and (rtrim($empfin,' ') = '')
  move ' AND A.EMPLID = ''' to $v_select
  concat $EmpIni with $v_select
  concat ''''  with $v_select
end-if

if (rtrim($empini, ' ') <> '') and (rtrim($empfin, ' ') <> '')
  move   ' AND T.EMPLID BETWEEN ''' to $v_select
  concat $EmpIni with $v_select
  concat ''' AND ''' with $v_select
  concat $EmpFin  with $v_select
  concat ''''  with $v_select
end-if

if ($BegDt <> '') and ($EndDt <> '')
  concat ' AND T.EFFDT BETWEEN ' with $v_select
  concat '''' with $v_select
  concat $BegDt with $v_select
  concat '''' with $v_select
  concat ' AND ' with $v_select
  concat '''' with $v_select
  concat $EndDt  with $v_select
  concat ''''  with $v_select
else
  display 'Please enter the date ranges in the Page'
end-if

if $TipSal <> '0040'  and $TipSal <> ' ' !All
  concat ' AND JBJR.SALARY_TYPE_MEX = ''' with $v_select
  concat $TipSal with $v_select
  concat '''' with $v_select
end-if

#debug show '$EndDt: '  $EndDt
#debug show '$Reg_Patronal: ' $Reg_Patronal
#debug show '$v_flag: ' $v_flag
#debug show '$v_select: ' $v_select

do Advice-Flag

begin-SELECT DISTINCT
A.EMPLID
  move &A.EMPLID to $emplID
  let $Sub_Emplid = substr($emplID,1,7)
  #debug show 'Empl ID: ' $emplID
A.EMPL_RCD 
  
  let #emplRcd = &A.EMPL_RCD 
A.DEPTID
  let $Sub_Deptid = substr(&A.DEPTID,2,3)
A.COMPANY
T.EFFDT
  Move &T.EFFDT to $DatemaxIDS
T.GPMX_SDI_FIX
T.GPMX_SDI_VAR
T.GPMX_SDI_TOT

  Move  0 to #IDSCurr
  let   #FixedCurr = &T.GPMX_SDI_FIX
  let   #VarCurr   = &T.GPMX_SDI_VAR
  let   #IDSCurr   = &T.GPMX_SDI_TOT
  !do Get-Max-DFSalary
  let #IDSCurr_Comp = #IDSCurr
  if $Topado = 'Y' 
     Let $UMA_Effdt = $DatemaxIds
     Do Get-Max-UMA
     
     if #IDSCurr > #SDIMax
       let #IDSCurr = #SDImax
     end-if
   end-if  
        
  move 'N' to $FoundPrevIDS
  do Get-IDS-Prev
  
  #debug show '$FoundPrevIDS: ' $FoundPrevIDS
 
  if $FoundPrevIDS = 'Y' 
     move 'Y' to $printNotice
     if $Topado = 'Y' 
        if  #IDSCurr  = #IDSPrev 
            move 'N' to $printNotice
        end-if
        
     else           
        if  #IDSCurr_Comp  = #IDSPrev_Comp
            let #total = #total + 1
            move 'N' to $printNotice
        end-if 

     end-if
  else
     move 'N' to $printNotice
  end-if
  
T.ACTION
T.ACTION_REASON
S.IMS_PRN_FORM_MEX
A.ESTABID
  move &A.ESTABID to $Imss_Id
  UPPERCASE $Name
A.LOCATION  
JBJR.WORKER_TYPE_MEX

  evaluate &JBJR.WORKER_TYPE_MEX
     when = '0010'
            move '1' to $Worker_Type
            break
     when = '0020'
            move '2' to $Worker_Type
            break
    when = '0030'
            move '3' to $Worker_Type
     break
  end-evaluate
  
NAM.LAST_NAME
   Move &NAM.LAST_NAME     to $EmpPat
NAM.SECOND_LAST_NAME
   Move &NAM.SECOND_LAST_NAME     to $EmpMat
NAM.FIRST_NAME
   Move &NAM.FIRST_NAME   to $EmpName
   Move &NAM.FIRST_NAME   to $Name
JBJR.SALARY_TYPE_MEX
J.DESCR
JBJR.REDUCED_WEEK_MEX
!AD.ADDRESS1
!AD.ADDRESS2
!AD.ADDRESS3
!AD.ADDRESS4
!AD.CITY
!AD.COUNTY
!AD.STATE
!AD.POSTAL
!AD.COUNTRY
  do Rotate-Name-For-Mag-Media-Mex
    
  if $printNotice = 'Y'
    add 1 to #numsec
    print '  '                       (+1,{c5})
    print $Worker_Type               ()
    do GetCurp
    do Get-ImssID
    !do GetRFC
    print #numsec                    (0,{c1}) edit 0999
    Print $IMSS_ID                 (0,{c2})  edit XXXXXXXXXXbbbX
    Print $EmplCurp                   (0,{c12})
    do to_upper($Names)
    Print $Names                      (0,{c3},50)
  
    print #IDSCurr                   (0,{c4}) edit 9,999.99

    evaluate &JBJR.SALARY_TYPE_MEX
      when = '0010'
        move '0' to $SalaryType
        break
      when = '0030'
        move '1' to $SalaryType
        break
      when = '0020'
        move '2' to $SalaryType
        break
    end-evaluate
    print '  '                       (0,{c6})
    print $SalaryType                ()
    let $ReducedWk = substr(&JBJR.REDUCED_WEEK_MEX, 3,1)
    print '  '                       (0,{c7})
    print $ReducedWk                 ()
    do    convert-to-dtu-date (&T.EFFDT,$ChangeDt-dtu)
    do    dtu-parse-date($ChangeDt-dtu,#dtu-yr,#dtu-mo,#dtu-da)
    move  #dtu-yr to $dtu-yr 9999
    move  #dtu-da to $dtu-da 09
    move  #dtu-mo to $dtu-mo 09

    let   $dtu-yy = substr ($dtu-yr,3,2)
    let   $fechamovto = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
    print $fechamovto (0,{c8})
    print '   '       (0,{c11})
    print &A.EMPLID   ()
    let   $Fecha = $dtu-da || $dtu-mo || $dtu-yr
    do GetMedicalUnit
    do GetCurp
    Print $EmplCurp                   (0,{c12})
    print $MedicalUnit   (0,{c9})
    
    if $Reg_Patronal <> ''
       add 1 to #EECount
       do write-rcd
       do search
    end-if
  end-if

  move 'N' to $printNotice

FROM  PS_JOB                  A,
      PS_NAMES              NAM,
      PS_JOBCODE_TBL          J,
      !PS_ADDRESSES           AD,
      PS_JOB_JR            JBJR,
      PS_GPMX_SDI_WA          T,       
      PS_ACT_RSN_TBL_MEX      S
WHERE A.COMPANY               = $Company
  AND A.EFFDT = (SELECT MAX(A_ED.EFFDT) 
                 FROM PS_JOB A_ED 
                 WHERE A.EMPLID = A_ED.EMPLID 
                 AND A.EMPL_RCD = A_ED.EMPL_RCD 
                 AND A_ED.EFFDT <= $EndDt)
  AND A.EFFSEQ = (SELECT MAX(A_ES.EFFSEQ) 
                 FROM PS_JOB A_ES 
                 WHERE A.EMPLID = A_ES.EMPLID 
                 AND A.EMPL_RCD = A_ES.EMPL_RCD AND A.EFFDT = A_ES.EFFDT) 
  AND A.EMPLID                = NAM.EMPLID
  AND NAM.NAME_TYPE = 'PRI'
  AND NAM.EFFDT   = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                        WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                          AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                          AND NAM_ED.EFFDT <= A.EFFDT)
  AND J.SETID                 = A.SETID_JOBCODE
  AND J.JOBCODE               = A.JOBCODE
  AND J.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL WHERE JOBCODE  = J.JOBCODE AND SETID = J.SETID AND EFFDT <= $EndDt)
  !AND AD.EMPLID               = A.EMPLID
  AND A.EMPLID                = JBJR.EMPLID
  AND A.EFFDT                 = JBJR.EFFDT
  AND A.EFFSEQ                = JBJR.EFFSEQ
  AND A.EMPL_RCD              = JBJR.EMPL_RCD
  AND A.EMPLID                =       T.EMPLID   
 ! AND T.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPMX_SDI_WA WHERE EMPLID  = A.EMPLID AND EFFDT <= $EndDt AND EMPL_RCD = A.EMPL_RCD)
  AND T.SEQNUM                = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA WHERE EMPLID = A.EMPLID AND EFFDT = T.EFFDT AND EMPL_RCD = A.EMPL_RCD)
  AND S.ACTION                = T.ACTION 
  AND S.ACTION_REASON         = T.ACTION_REASON  
  AND S.IMS_PRN_FORM_MEX      = '0030'
[$WhereForEstablishment]
[$v_flag]
[$v_select]
Order By [$OrderEstablishment] T.EFFDT DESC, A.EMPLID
end-SELECT
   if #EECount > 0
      do Write-Header
      do Write-Array
      do Write-Footer
      do Imprime-Totales
      new-page
   end-if
 
end-procedure


begin-procedure Advice-Flag
 let $YesFlag = 'Y'
 if $Reimp_Av = 'N' or rtrim($Reimp_Av,' ') = ''
    let $v_flag = 'AND (A.EMPLID NOT IN (SELECT FLG.EMPLID FROM PS_GPMX_IMS_CONTR FLG '
    let $v_flag = $v_flag || 'WHERE FLG.EMPLID = A.EMPLID '
    let $v_flag = $v_flag || 'AND   FLG.EFFDT  = T.EFFDT '
    let $v_flag = $v_flag || 'AND (FLG.GPMX_IMS_MOD_ADV = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_MOD_DEV = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_MOD_EDI = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ')))'
 else
    let $v_flag = ''
 end-if
end-procedure


begin-Procedure Write-Array
  move 1 to #ind
  while #ind <= #EECount
     get $Linea from movim(#ind) detalle
     write 1 FROM $Linea:169
     add 1 to #ind
  end-while
end-procedure Write-Array


begin-Procedure Imprime-Totales
print 'TOTAL DE MODIFICACIONES AL SALARIO REGISTRADAS : ' (+2,1)
print #EECount ()  edit 8888888
print '' (+2,1)
end-procedure


begin-procedure Get-Max-DFSalary
begin-select
WZ.GPMX_MINIMUM_WAGE        &MIN_RATE
FROM PS_GPMX_MIN_WAGE WZ

WHERE  WZ.WAGE_ZONE_MEX  = '10'
AND    WZ.EFFDT      = (SELECT MAX(EFFDT) FROM   PS_GPMX_MIN_WAGE
                        WHERE WAGE_ZONE_MEX = '10'
                        AND EFFDT <= $DatemaxIDS)
end-select
  let #SDImaxDF = 25 *  &MIN_RATE
  let #IDSCurr_Comp = #IDSCurr
  if $Topado = 'Y'
     if #IDSCurr > #SDIMaxDF
        let #IDSCurr = #SDImaxDF
     end-if
  end-if
end-procedure

!**************************************
begin-procedure Get-IDS-Prev
let   #IDSPrev =0
let #IDSCurr_Comp = #IDSCurr
begin-SELECT
M.EFFDT
  move &M.EFFDT  to $DatemaxIdsPrev
M.GPMX_SDI_FIX
M.GPMX_SDI_VAR
M.GPMX_SDI_TOT
  move 0 to #IDSPrev
  let   #FixedPrev = &M.GPMX_SDI_FIX
  let   #VarPrev   = &M.GPMX_SDI_VAR
  let   #IDSPrev   = &M.GPMX_SDI_TOT
  move 'Y' to $FoundPrevIDS
  move 'Y' to $printNotice
  !do Get-Max-DFSalary_Prev
  do Get_IMSS_Control
  
    let #IDSPrev_Comp = #IDSPrev
 if $topado = 'Y'  !When Capping from Run Control Page
    Let $UMA_Effdt = $DatemaxIdsPrev
    Do Get-Max-UMA
    if #IDSPrev > #SDIMax         ! Compares SDI with Capped
       let #IDSPrev = #SDImax     ! Cappes SDI when > 25 UMA
    end-if
 end-if
  

FROM    PS_GPMX_SDI_WA     M

WHERE M.EMPLID = $emplID
AND   M.EMPL_RCD = #emplRcd
AND   M.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPMX_SDI_WA
                 WHERE EMPLID  = M.EMPLID
                 AND EMPL_RCD  = M.EMPL_RCD
                 AND EFFDT    < &T.EFFDT)
AND  M.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
                 WHERE EMPLID  = M.EMPLID
                 AND EFFDT  = M.EFFDT)
end-SELECT
end-procedure



!***************************************************
! Procedure Get-Max-DFSalary_Prev                     *
!***************************************************
begin-procedure Get-Max-DFSalary_Prev
let #SDImaxDFPrev = 0

begin-select
WZ2.GPMX_MINIMUM_WAGE        &MIN_RATE2 

    let #SDImaxDFPrev = 25 *  &MIN_RATE2
    
    
FROM PS_GPMX_MIN_WAGE WZ2
WHERE  WZ2.WAGE_ZONE_MEX  = '10'
AND    WZ2.EFFDT      = (SELECT MAX(EFFDT) 
                        FROM   PS_GPMX_MIN_WAGE
                        WHERE WAGE_ZONE_MEX = '10'
                        AND EFFDT <= $DatemaxIdsPrev)
end-select

end-procedure Get-Max-DFSalary_Prev


begin-procedure Write-Rcd
  let #IDSCurrok = #IDSCurr * 100
  move #IDSCurrok to $IDS 000009
  do to_upper($EmpPat)
  do to_upper($EmpMat)
  do to_upper($EmpName)
  let $Space1 = ' '

  print '07' (0,{c10})

let $Linea = rpad($Reg_Patronal,11,' ') || rpad($IMSS_ID,11,' ')  -
    || rpad(rtrim($EmpPat,' '),27,' ') || rpad(rtrim($EmpMat,' '),27,' ') || rpad(rtrim($EmpName,' '),27,' ')   -
    || rpad($IDS,6,' ') || rpad($Space1,6, ' ') || ' ' || $SalaryType || $ReducedWk || $Fecha  || rpad($Space1,5, ' ') -
    ||  '07' || rpad($Guia,5,' ') || rpad(&A.EMPLID,10,' ') || ' ' || rpad($EmplCurp,18,' ') || '9'

 put $linea into movim (#EEcount)
 move ' ' to $EmplCurp
 move ' ' to $MedicalUnit
 move ' ' to $IMSS_ID

end-procedure Write-Rcd

begin-procedure Write-Header
   let $Partner = 'IMSS-834'
   let $Cabecero = rpad($Partner,16,' ')

   Write 1 FROM $Cabecero:169
end-procedure Write-Header


begin-procedure Write-Footer
   move #EECount  to $EECount  000009
   let $Head = '01'
   let $Tipo_Mov = '07'
   let $ID_Formato = '9'
   let $space = ' '
   let $asterisk = '*'
   let $Pie_Pagina = rpad($asterisk,13,'*') || rpad($space,43,' ') || rpad($EECount,6,' ') || rpad($space,71,' ') -
   || rpad($Guia,5,' ') || rpad($space,29,' ') || $ID_Formato

   Write 1 FROM $Pie_Pagina:169
   !Write 1 FROM $space:166
end-procedure Write-Footer

!**********************************************************
begin-procedure GetMedicalUnit
begin-select
UMF.MED_REC_CD_MEX 
 let $MedicalUnit = Ltrim(Rtrim(&UMF.MED_REC_CD_MEX, ' '), ' ')

FROM PS_PERS_DATA_MEX UMF 
  WHERE UMF.EMPLID = $Emplid 
    AND UMF.EFFDT = 
        (SELECT MAX(UMF_ED.EFFDT) FROM PS_PERS_DATA_MEX UMF_ED 
        WHERE UMF.EMPLID = UMF_ED.EMPLID 
          AND UMF_ED.EFFDT <= $EndDt)
end-select
end-procedure
!**********************************************************

!**********************************************************
begin-procedure GetCurp
begin-select
CURP.NATIONAL_ID
    let $EmplCurp = &CURP.NATIONAL_ID
FROM PS_PERS_NID CURP WHERE CURP.NATIONAL_ID_TYPE='CURP' AND CURP.EMPLID=$emplID AND CURP.COUNTRY='MEX'
end-select
end-procedure
!**********************************************************

!**********************************************************
begin-procedure Get-ImssID
begin-select
IM.NATIONAL_ID
    let $IMSS_ID = &IM.NATIONAL_ID
FROM PS_PERS_NID IM WHERE IM.NATIONAL_ID_TYPE='IMSS' AND IM.EMPLID=$emplID AND IM.COUNTRY='MEX'
end-select
end-procedure
!**********************************************************
!**********************************************************
begin-procedure GetRFC
begin-select
RFC.NATIONAL_ID
    let $RFC = &RFC.NATIONAL_ID
FROM PS_PERS_NID RFC WHERE RFC.NATIONAL_ID_TYPE='IMSS' AND RFC.EMPLID=$emplID AND RFC.COUNTRY='MEX'
end-select
end-procedure
!**********************************************************

begin-procedure SEARCH
Let #total = 0
begin-select
COUNT(*) &TOTAL
  Let #total = &TOTAL

FROM PS_GPMX_IMS_CONTR  P4
WHERE P4.EMPLID  = $emplID
  AND P4.EFFDT   = &T.EFFDT
end-select

  if #total = 0
     do IMSS_Control
  else
     do Update_IMSS_Control
  end-if
end-procedure SEARCH


begin-procedure IMSS_Control
begin-sql
INSERT INTO PS_GPMX_IMS_CONTR
       (EMPLID,
        EFFDT,
        GPMX_IMS_HIRE_ADV,
        GPMX_IMS_MOD_ADV,
        GPMX_IMS_TER_ADV,
        GPMX_IMS_HIRE_DEV,
        GPMX_IMS_MOD_DEV,
        GPMX_IMS_TER_DEV,
        GPMX_IMS_HIRE_EDI,
        GPMX_IMS_MOD_EDI,
        GPMX_IMS_TER_EDI)
VALUES ($emplID,
        &T.EFFDT,
        'N',
        'N',
        'N',
        'N',
        'N',
        'N',
        'N',
        'Y',
        'N')
end-sql
end-procedure


begin-procedure Update_IMSS_Control
begin-sql
UPDATE PS_GPMX_IMS_CONTR
SET  GPMX_IMS_MOD_EDI = 'Y'
WHERE EMPLID  = $emplID
  AND EFFDT   = &T.EFFDT
end-sql
end-procedure Update_IMSS_Control

begin-procedure Get_IMSS_Control
Let $IMSSModEDI = 'N'
begin-select
GPMX_IMS_MOD_EDI 

  Let $IMSSModEDI = &GPMX_IMS_MOD_EDI

FROM PS_GPMX_IMS_CONTR
WHERE EMPLID  = $emplID
  AND EFFDT   = $DatemaxIdsPrev
end-select
end-procedure Get_IMSS_Control

begin-procedure TO_UPPER(:$in)

  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''
  while #c <= length($in)
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)         
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'
           let $let = 'O'
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           break
        when = 'ñ'
           let $let = 'N'
           break
        when-other
           let $let = upper($char)
           break
     end-evaluate
     let $cad = $cad || $let
     let #c = #c + 1
  end-while
  let $in = $cad
end-procedure

!***************************************************
! Procedure OPEN-FILE                              *
!***************************************************
begin-procedure OPEN-FILE
  let $FILE_NAME =  '{FILEPREFIX}' || 'GPMXIM10.TXT' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  open $FILE_NAME as 1 for-writing record=169:fixed STATUS=#FILESTAT
  if #FILESTAT < 0
      show 'Error opening output file. Program ending'
      stop quiet
  end-if
end-procedure


#Include 'reset.sqc'    !Reset printer procedure
#Include 'curdttim.sqc' !Get-Current-DateTime procedure
#Include 'datetime.sqc' !Routines for date and time formatting
#Include 'number.sqc'   !Routines to format numbers
#Include 'stdapi.sqc'   !Update Process API
#Include 'datemath.sqc' !Routines for date math
#Include 'gpmxnotf.sqc'  !Get-Run-Control procedure
#Include 'getcomex.sqc'  !Get-Company-data-Mex
#Include 'gpmxrtn2.sqc' !Rotate-Name-For-Mag-Media
