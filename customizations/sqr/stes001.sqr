!***********************************************************************
!  STES001: Stock Purchase Plan Activity Summary                       *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2013, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!----------------------------------------------------------------------
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      
!          $Date:  2013/01/18:02:49:50                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!-----------------------------------------------------------------------
! Program Descr:Calculate Shares available to issue for given Stock ID,
! Stock Plan and Date range
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Stock Plan ID, Tranaction Date range
! Tables:        RUN_CNTL_ST, PS_ST_PLAN_ALLOC, PS_ST_ESPP_PURCH
!                PS_ST_PURCHASE_PRC, PS_STOCK_EXCHANGE
! Sorts:         PERIOD_END_DT
!------------------------------------------------------------------------

  #include 'setenv.sqc'

!--------------------------------------------------------------------
Begin-Setup
!--------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!--------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!--------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Get-Begining-Balance
  do Heading-Issue
  do Get-Available-ShareTo-Issue
  do Check-Purchase-Data
  do Reset
  do Successful-EOJ

End-Program

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK', $language_cd)
  do Append_Report_Translation ($ReportID)

  do Get_Field_Information ('STOCK',  'STOCK_ID',         $StockIdLbl,         #DW)
  do Get_Field_Information ('STOCK',  'STOCK_PLAN_DESC',  $StockPlanLbl,       #DW)
  do Get_Field_Information ('STOCK',  'FROM',             $FromLbl,            #DW)
  do Get_Field_Information ('STOCK',  'THRU',             $ThruLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'PURCHASE_DT',      $PurchaseDtLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'GRANT_DT',         $GrantDtLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'GRANT_FMV',        $GrantFmvLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'PURCHASE_FMV',     $PurchaseFmvLbl,     #DW)
  do Get_Field_Information ('STOCK'  ,'PURCHASE_PRICE',   $PurchasePriceLbl,   #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES_PURCHASED', $SharesPurchasedLbl, #DW)
  do Get_Field_Information ('STOCK'  ,'CURRENCY_CD',      $CurrencyCdLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'TOTAL',            $TotalLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES',           $SharesLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'PURCHASE_SUMMARY', $PurchaseSummaryLbl, #DW)
  do Get_Field_Information ('STOCK'  ,'PURCHASE_VALUE',   $PurchValueLbl,      #DW)

  do Get_Field_Information ('STES001','TRANSACTION_DATE', $TransDtLbl,         #DW)
  do Get_Field_Information ('STES001','BEGIN_BALANCE',    $BeginAvailLbl,      #DW)
  do Get_Field_Information ('STES001','SHARE_AVAILABLE',  $ShareAvailLbl,      #DW)
  do Get_Field_Information ('STES001','ADJUSTMENT_TYPE',  $AdjustTypeLbl,      #DW)
  do Get_Field_Information ('STES001','ENDING_BALANCE',   $EndingBalanceLbl,   #DW)
  do Get_Field_Information ('STES001','STES001',          $Reporttitle,        #DW)

End-Procedure

!----------------------------------------------------------------------
Begin-Heading 5
!----------------------------------------------------------------------
  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,   )
  print ':'                                                (  ,   ,001)
  print $RC_STOCK_ID                                       (  ,013,010)

  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center

  print $StockPlanLbl                                      (+1,001,   )
  print ':'                                                (  ,   ,001)
  print $RC_STOCK_PLAN                                     (  ,013,010)

End-Heading

!----------------------------------------------------------------------
Begin-Procedure Heading-Issue
!----------------------------------------------------------------------
  print $ShareAvailLbl                                     (+2,001,026) bold underline
  print $TransDtLbl                                        (+1,001,026)
  print $AdjustTypeLbl                                     (  ,040,015)
  print $SharesLbl                                         (  ,096,006)
  print '-'                                                (+1,001,170) fill
  do Format-DateTime($RC_FromDate, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  print $BeginAvailLbl                                     (  ,040,019)
  print #BeginingBalance                                   (  ,080,024) edit 999,999,999,999.999999pr

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Heading-Purchase
!----------------------------------------------------------------------

  let $PurchaseSummaryLbl = $PurchaseSummaryLbl || ':'
  print  $PurchaseSummaryLbl                               (+2,001,018) bold underline
  print  $PurchaseDtLbl                                    (+1,001,013)
  print  $GrantDtLbl                                       (  ,015,010)
  print  $GrantFmvLbl                                      (  ,028,009)
  print  $PurchaseFmvLbl                                   (  ,039,012)
  print  $PurchasePriceLbl                                 (  ,053,014)
  print  $SharesPurchasedLbl                               (  ,075,016)
  print  $PurchValueLbl                                    (  ,097,014)
  print  $CurrencyCdLbl                                    (  ,113,008)
  print '-'                                                (+1,001,170) fill

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Init-Report
!----------------------------------------------------------------------

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STES001'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  let $Rows = 'N'

  if $prcs_process_instance = ''
      do Ask-From-Thru-Date
      do Get-Stock-Values
  else
      do Get-SQR-Parms
  end-if

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Stock-Values
!----------------------------------------------------------------------

  INPUT $RC_STOCK_ID    MAXLEN=10  'Enter Stock ID'  TYPE=CHAR 
  INPUT $RC_STOCK_PLAN  MAXLEN=10  'Enter Stock Plan ID'  TYPE=CHAR
  INPUT $RC_FROMDATE    MAXLEN=10  'Enter From Date'  TYPE=DATE
  INPUT $RC_THRUDATE    MAXLEN=10  'Enter Through Date'  TYPE=DATE

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Begining-Balance
!----------------------------------------------------------------------

Begin-Select

SUM(A.SHARES_ALLOCATED)  &AllocSum

 from PS_ST_PLAN_ALLOC A
where A.STOCK_ID        = $RC_STOCK_ID
  and A.STOCK_PLAN      = $RC_STOCK_PLAN
  and A.STOCK_PLAN_TYPE = 'E'
  and A.ALLOCATION_DT   < $RC_FromDate

End-Select

Begin-Select

SUM(B.SHARES_PURCHASED) &PurchSum

 from PS_ST_ESPP_PURCH B
where B.STOCK_ID        = $RC_STOCK_ID
  and B.STOCK_PLAN      = $RC_STOCK_PLAN
  and B.STOCK_PLAN_TYPE = 'E'
  and B.CONFIRMED       = 'Y'
  and B.PERIOD_END_DT   < $RC_FromDate

End-Select

  let #BeginingBalance = &AllocSum - &PurchSum
  let #TotalShares     = #BeginingBalance

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Check-Purchase-Data
!----------------------------------------------------------------------

Begin-Select

'X'

  let $Rows = 'Y'

 from PS_ST_PURCHASE_PRC C
where C.STOCK_ID        = $RC_STOCK_ID
  and C.STOCK_PLAN      = $RC_STOCK_PLAN
  and C.STOCK_PLAN_TYPE = 'E'
  and C.PERIOD_END_DT BETWEEN $RC_FromDate AND $RC_ThruDate

End-Select

  if $Rows = 'Y'
    do Heading-Purchase
    do Purchase-Summary
  end-if

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Purchase-Summary
!----------------------------------------------------------------------

Begin-Select

D.PERIOD_END_DT
D.GRANT_DT
D.GRANT_FMV
D.PURCHASE_FMV
D.PURCHASE_PRICE

  let $PeriodEndDt   = rtrim(&d.period_end_dt,' ')
  let $GrantDt       = rtrim(&d.grant_dt,' ')
  let #GrantFmv      = &d.grant_fmv
  let #PurchaseFmv   = &d.purchase_fmv
  let #PurchasePrice = &d.purchase_price

  do Get-Shares-Purchased
  do Print-Purchase-Summary

 from PS_ST_PURCHASE_PRC D
where D.STOCK_ID        = $RC_STOCK_ID
  and D.STOCK_PLAN      = $RC_STOCK_PLAN
  and D.STOCK_PLAN_TYPE = 'E'
  and D.PERIOD_END_DT BETWEEN $RC_FromDate AND $RC_ThruDate
order by D.PERIOD_END_DT

End-Select

  do Print-Footer

End-Procedure Process-Main

!----------------------------------------------------------------------
Begin-Procedure Get-Shares-Purchased
!----------------------------------------------------------------------
Begin-Select

SUM(E.SHARES_PURCHASED)  &SharesPurchased

 from PS_ST_ESPP_PURCH E
where E.STOCK_ID        = $RC_STOCK_ID
  and E.STOCK_PLAN      = $RC_STOCK_PLAN
  and E.STOCK_PLAN_TYPE = 'E'
  and E.CONFIRMED       = 'Y'
  and E.GRANT_DT        = $GrantDt
  and E.PERIOD_END_DT BETWEEN $RC_FromDate AND $RC_ThruDate
group by E.PERIOD_END_DT

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Available-ShareTo-Issue
!----------------------------------------------------------------------

Begin-Select

F.ALLOCATION_DT                 &TransDate1
F.ST_ALLOCATION_TYPE            &AdjustType1
SUM(F.SHARES_ALLOCATED)         &SumShare1

  do Print-Share-Issued

 from PS_ST_PLAN_ALLOC F
where F.STOCK_ID        = $RC_STOCK_ID
  and F.STOCK_PLAN      = $RC_STOCK_PLAN
  and F.STOCK_PLAN_TYPE = 'E'
  and F.ALLOCATION_DT BETWEEN $RC_FromDate AND $RC_ThruDate
group BY F.ALLOCATION_DT,
         F.ST_ALLOCATION_TYPE
order BY F.ALLOCATION_DT

End-Select

Begin-Select

G.PERIOD_END_DT                 &TransDate2
'Purchase'                      &AdjustType2
SUM(G.SHARES_PURCHASED) * -1    &SumShare2

  do Print-Share-Purchase

 from PS_ST_ESPP_PURCH G
where G.STOCK_ID        = $RC_STOCK_ID
  and G.STOCK_PLAN      = $RC_STOCK_PLAN
  and G.STOCK_PLAN_TYPE = 'E'
  and G.CONFIRMED       = 'Y'
  and G.PERIOD_END_DT BETWEEN $RC_FromDate AND $RC_ThruDate
group BY G.PERIOD_END_DT
order BY G.PERIOD_END_DT

End-Select

  do Print-Footer-Issue

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Currency
!----------------------------------------------------------------------
Begin-Select

H.CURRENCY_CD

 from PS_STOCK_EXCHANGE H
where H.STOCK_ID = $RC_STOCK_ID
  and H.EFFDT    = (select MAX(HH.EFFDT)
                      from PS_STOCK_EXCHANGE HH
                     where H.STOCK_ID = HH.STOCK_ID)

End-Select

End-Procedure


!----------------------------------------------------------------------
Begin-Procedure Print-Share-Issued
!----------------------------------------------------------------------

  do Format-DateTime(&TransDate1, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  let $FieldName  = 'ST_ALLOCATION_TYPE'
  let $FieldValue = &AdjustType1
  do Read-Translate-Table
  print $XlatLongName                                      (0,40,20) 
  print &SumShare1                                         (  ,080,024) edit 999,999,999,999.999999pr
  let #TotalShares = #TotalShares + &SumShare1

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Print-Share-Purchase
!----------------------------------------------------------------------

  do Format-DateTime(&TransDate2, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  print &AdjustType2                                       (  ,040,020)
  print &SumShare2                                         (  ,080,024) edit 999,999,999,999.999999pr
  let #TotalShares = #TotalShares + &SumShare2

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Print-Purchase-Summary
!----------------------------------------------------------------------

  do Format-DateTime($PeriodEndDt, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  do Format-DateTime($GrantDt, $out, {DEFDATE}, '', '')
  print $out                                               (  ,015,010)
  print #GrantFmv                                          (  ,027,010) edit 999.999999
  print #PurchaseFmv                                       (  ,041,010) edit 999.999999
  print #PurchasePrice                                     (  ,057,010) edit 999.999999
  print &SharesPurchased                                   (  ,069,022) edit 999,999,999,999.999999
  let #PurchaseValue = round(#PurchasePrice * &SharesPurchased ,2)
  print #PurchaseValue                                     (  ,093,018) edit 999,999,999,999.99
  do Get-Currency
  print &h.currency_cd                                     (  ,113,003)
  let #TotalSharePurch    = #TotalSharePurch    + &SharesPurchased
  let #TotalPurchaseValue = #TotalPurchaseValue + #PurchaseValue

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Print-Footer
!----------------------------------------------------------------------

  print '-'                                                (+1,001,170) fill
  print $TotalLbl                                          (+1,001,006)
  print #TotalSharePurch                                   (  ,069,022) edit 999,999,999,999.999999
  print #TotalPurchaseValue                                (  ,093,018) edit 999,999,999,999.99

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Print-Footer-Issue
!----------------------------------------------------------------------

  print '-'                                                (+1,001,170) fill
  do Format-DateTime($RC_ThruDate, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  print $EndingBalanceLbl                                  (  ,040,014)
  print #TotalShares                                       (  ,080,024) edit 999,999,999,999.999999pr

End-Procedure

!----------------------------------------------------------------------
!  SQC Include Files
!----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'getrplng.sqc'   ! Get the report language
#include 'askftd.sqc'     ! From Thru Date input
#include 'readxlat.sqc'
