!***********************************************************************
!  GPDEDV03.SQR:  Triggergenerierung                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:51                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   ! setup sqr environment
#include 'setup32.sqc'

#define col1    1
#define col2    14
#define col3    19
#define col4    31
#define col5    45
#define col6    85
#define col7    90
#define col8    100
#define col9    114
#define col10   128
#define col11   133
#define col12   137
#define col13   141
#define col14   155
#define col15   159
#define col16   163
!------------------
#define col1ME    1
#define col2ME    6
#define col3ME    21
#define col4ME    36
#define col5ME    51
#define col6ME    61
#define col7ME    71
#define col8ME    86
#define col9ME    96
!------------------
#define col1NA    1
#define col2NA    6
#define col3NA    39
#define col4NA    72
#define col5NA    90
!------------------
#define col1GB    1
#define col2GB    6
#define col3GB    38
#define col4GB    55
#define col5GB    72
#define col6GB    84
#define col7GB    96
!------------------
#define col1AN    1
#define col2AN    6
#define col3AN    12
#define col4AN    26
#define col5AN    58
#define col6AN    115
!------------------
#define col1EU    1
#define col2EU    6
#define col3EU    26
!------------------
#define col1SO    1
#define col2SO    6
#define col3SO    18
#define col4SO    28
#define col5SO    41
!*****************************************************************************************
begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

!*************************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do Ask-Input
  else
     do Get-Report-Parameters
  end-if

  move 'GPDEDV03' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Get_BegDT_EndDt
  let $ReportTitle = 'Meldungsgenerierung' || ' ' || $HeadTit
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure
!******************************************************************************************
begin-procedure Ask-Input
input $Ctl_Cal_Run_ID       'Calendat Group ID '
input #Ctl_DV_Run           'DEUEV Run '
input $language_cd          'Language CD '

let $Ctl_Cal_Run_ID = ltrim(rtrim($Ctl_Cal_Run_ID, ' '), ' ')
end-procedure
!****************************************************************************************
begin-procedure Get_BegDT_EndDt
begin-select
DTL1.PRD_BGN_DT &Dtl_Begin_Dt
DTL1.PRD_END_DT &Dtl_End_Dt

      do ConvertToComponents(&Dtl_End_Dt,$yyDtl,$mmDtl,$ddDtl)
  evaluate $mmDtl
    when = '01'
      let $HD_Month_Name = 'Januar'
      break
    when = '02'
      let $HD_Month_Name = 'Februar'
      break
    when = '03'
      let $HD_Month_Name = 'März'
      break
    when = '04'
      let $HD_Month_Name = 'April'
      break
    when = '05'
      let $HD_Month_Name = 'Mai'
      break
    when = '06'
      let $HD_Month_Name = 'Juni'
      break
    when = '07'
      let $HD_Month_Name = 'Juli'
      break
    when = '08'
      let $HD_Month_Name = 'August'
      break
    when = '09'
      let $HD_Month_Name = 'September'
      break
    when = '10'
      let $HD_Month_Name = 'Oktober'
      break
    when = '11'
      let $HD_Month_Name = 'November'
      break
    when = '12'
      let $HD_Month_Name = 'Dezember'
      break
    when-other
      let $HD_Month_Name = 'XXXXXXX'
      break
  end-evaluate

  let $HeadTit = $HD_Month_Name || '  ' || $yyDtl
from PS_GP_CAL_RUN_DTL DTL1
where DTL1.CAL_RUN_ID = $Ctl_Cal_Run_ID
    and DTL1.CAL_SEQ_NUM = (select max(CAL_SEQ_NUM) from PS_GP_CAL_RUN_DTL DTL2
    where DTL2.CAL_RUN_ID = DTL1.CAL_RUN_ID)
end-select


end-procedure
!******************************************************************************************
begin-procedure Get-Report-Parameters
let $Ctl_Cal_Run_ID = ' '
let #Ctl_DV_Run  = 0
let $language_cd = $PRCS_LANGUAGE_CD
begin-select
RC03.CAL_RUN_ID
RC03.GPDE_DV_RUN
  let $Ctl_Cal_Run_ID = rtrim(&RC03.CAL_RUN_ID, ' ')
  let #Ctl_DV_Run     = &RC03.GPDE_DV_RUN
from PS_GPDE_DV_RC03 RC03
where RC03.OPRID = $prcs_oprid and
      RC03.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure
!******************************************************************************************
begin-procedure Process-Main
do Get_VersionNr
if rtrim($Ctl_Cal_Run_ID,' ') = ''
  goto ExitReport
end-if

do Format-Number(#Ctl_DV_Run,$Ctl_DV_Run,'88888')
let $ProtokName = 'Protokoll erstellter Meldungen für DEÜV Lauf ' || $Ctl_DV_Run
let #ProtLength = length($ProtokName)
let $Exists_Data = 'N'
let $Error_Report = 'N'
begin-select
DSME.EMPLID
DSME.EMPL_RCD
DSME.GPDE_DV_EVT_EFFDT
DSME.GPDE_DV_RVNR
DSME.GPDE_DV_REP_RSN
DSME.GPDE_DV_CANCEL
DSME.GPDE_SI_BTNR
DSME.GPDE_SI_PROV_ID
DSME.GPDE_SI_PROV
DSME.GPDE_DV_EMPL_CAT
DSME.GPDE_DV_DBME
DSME.GPDE_DV_DBNA
DSME.GPDE_DV_DBGB
DSME.GPDE_DV_DBAN
DSME.GPDE_DV_DBEU
DSME.GPDE_DV_DBSO

   let $DV_Rsn_Descr     = ' '
   let $Emplid           =  rtrim(&DSME.EMPLID, ' ')
   let #Empl_Rcd         = &DSME.EMPL_RCD
   let $Evt_Effdt        = rtrim(&DSME.GPDE_DV_EVT_EFFDT, ' ')
   let $DV_RvNr          = rtrim(&DSME.GPDE_DV_RVNR, ' ')
   let $DV_Rsn           = rtrim(&DSME.GPDE_DV_REP_RSN, ' ')
   let $DV_Cancel        = rtrim(&DSME.GPDE_DV_CANCEL, ' ')
   let $SI_BtNr          = rtrim(&DSME.GPDE_SI_BTNR, ' ')
   let $Prov_Id          = rtrim(&DSME.GPDE_SI_PROV_ID, ' ')
   let $SI_Prov          = rtrim(&DSME.GPDE_SI_PROV, ' ')
   let $Empl_Cat         = rtrim(&DSME.GPDE_DV_EMPL_CAT, ' ')
   let $DV_DbMe          = rtrim(&DSME.GPDE_DV_DBME, ' ')
   let $DV_DbNa          = rtrim(&DSME.GPDE_DV_DBNA, ' ')
   let $DV_DbGb          = rtrim(&DSME.GPDE_DV_DBGB, ' ')
   let $DV_DbAn          = rtrim(&DSME.GPDE_DV_DBAN, ' ')
   let $DV_DbEu          = rtrim(&DSME.GPDE_DV_DBEU, ' ')
   let $DV_DbSo          = rtrim(&DSME.GPDE_DV_DBSO, ' ')

   let $FieldName  = 'GPDE_DV_REP_RSN'
   let $FieldValue = $DV_Rsn
   do Read-Translate-Table
   let $DV_Rsn_Descr =  ltrim(rtrim($XlatLongName, ' '), ' ')
   if $DV_Rsn_Descr <> ''
     let $DV_Rsn_Descr = ' - ' || $DV_Rsn_Descr
   end-if

   let $DV_Rsn_Descr = $DV_Rsn || $DV_Rsn_Descr

   let $Exists_Data = 'Y'

   do Print_Data_DSME
   do Print_Data_DBME
   do Print_Data_DBNA
   do Print_Data_DBGB
   do Print_Data_DBAN
   do Print_Data_DBEU
   do Print_Data_DBSO

from PS_GPDE_DV_DSME DSME
where DSME.GPDE_DV_RUN = #Ctl_DV_Run and
      DSME.GPDE_DV_REP_STATUS <> 'F'
group by DSME.EMPLID,DSME.EMPL_RCD,DSME.GPDE_DV_EVT_EFFDT,DSME.GPDE_DV_RVNR,DSME.GPDE_DV_REP_RSN
         ,DSME.GPDE_DV_CANCEL,DSME.GPDE_SI_BTNR,DSME.GPDE_SI_PROV_ID,DSME.GPDE_SI_PROV
   ,DSME.GPDE_DV_EMPL_CAT,DSME.GPDE_DV_DBME,DSME.GPDE_DV_DBNA,DSME.GPDE_DV_DBGB
         ,DSME.GPDE_DV_DBAN,DSME.GPDE_DV_DBEU,DSME.GPDE_DV_DBSO
order by DSME.EMPLID
end-select
!-----------------------------------------------------!
! Begin of Report for Error List                      !
!-----------------------------------------------------!
if $Exists_Data = 'Y'
  new-page
end-if
let $ProtokName = 'Protokoll fehlerhafter Meldungen für DEÜV Lauf ' || $Ctl_DV_Run
let #ProtLength = length($ProtokName)
let $Error_Report = 'Y'
begin-select
DSME_E.EMPLID
DSME_E.EMPL_RCD
DSME_E.GPDE_DV_EVT_EFFDT
DSME_E.GPDE_DV_RVNR
DSME_E.GPDE_DV_REP_RSN
DSME_E.GPDE_DV_CANCEL
DSME_E.GPDE_SI_BTNR
DSME_E.GPDE_SI_PROV_ID
DSME_E.GPDE_SI_PROV
DSME_E.GPDE_DV_EMPL_CAT
DSME_E.GPDE_DV_DBME
DSME_E.GPDE_DV_DBNA
DSME_E.GPDE_DV_DBGB
DSME_E.GPDE_DV_DBAN
DSME_E.GPDE_DV_DBEU
DSME_E.GPDE_DV_DBSO
DSME_E.MESSAGE_SET_NBR
DSME_E.MESSAGE_NBR

   let $DV_Rsn_Descr   = ' '
   let $Emplid         =  rtrim(&DSME_E.EMPLID, ' ')
   let #Empl_Rcd       = &DSME_E.EMPL_RCD
   let $Evt_Effdt      = rtrim(&DSME_E.GPDE_DV_EVT_EFFDT, ' ')
   let $DV_RvNr        = rtrim(&DSME_E.GPDE_DV_RVNR, ' ')
   let $DV_Rsn         = rtrim(&DSME_E.GPDE_DV_REP_RSN, ' ')
   let $DV_Cancel      = rtrim(&DSME_E.GPDE_DV_CANCEL, ' ')
   let $SI_BtNr        = rtrim(&DSME_E.GPDE_SI_BTNR, ' ')
   let $Prov_Id        = rtrim(&DSME_E.GPDE_SI_PROV_ID, ' ')
   let $SI_Prov        = rtrim(&DSME_E.GPDE_SI_PROV, ' ')
   let $Empl_Cat       = rtrim(&DSME_E.GPDE_DV_EMPL_CAT, ' ')
   let $DV_DbMe        = rtrim(&DSME_E.GPDE_DV_DBME, ' ')
   let $DV_DbNa        = rtrim(&DSME_E.GPDE_DV_DBNA, ' ')
   let $DV_DbGb        = rtrim(&DSME_E.GPDE_DV_DBGB, ' ')
   let $DV_DbAn        = rtrim(&DSME_E.GPDE_DV_DBAN, ' ')
   let $DV_DbEu        = rtrim(&DSME_E.GPDE_DV_DBEU, ' ')
   let $DV_DbSo        = rtrim(&DSME_E.GPDE_DV_DBSO, ' ')
   let #DV_ErrCD       = &DSME_E.MESSAGE_NBR
   let #MessSetNum     = &DSME_E.MESSAGE_SET_NBR
   let #MessNum        = &DSME_E.MESSAGE_NBR

   let $FieldName  = 'GPDE_DV_REP_RSN'
   let $FieldValue = $DV_Rsn
   do Read-Translate-Table
   let $DV_Rsn_Descr =  ltrim(rtrim($XlatLongName, ' '), ' ')
   if $DV_Rsn_Descr <> ''
     let $DV_Rsn_Descr = ' - ' || $DV_Rsn_Descr
   end-if

   let $DV_Rsn_Descr = $DV_Rsn || $DV_Rsn_Descr
   do Print_Data_DSME
   ! --------- WDUELL commented out unneeded sections 29.5.02 --------------
   !do Print_Data_DBME
   !do Print_Data_DBNA
   !do Print_Data_DBGB
   !do Print_Data_DBAN
   !do Print_Data_DBEU
   !do Print_Data_DBSO
   !----- end wduell ------------------------

from PS_GPDE_DV_DSME DSME_E
where DSME_E.GPDE_DV_RUN = #Ctl_DV_Run and
      DSME_E.GPDE_DV_REP_STATUS = 'F'
group by DSME_E.EMPLID,DSME_E.EMPL_RCD,DSME_E.GPDE_DV_EVT_EFFDT,DSME_E.GPDE_DV_RVNR,
      DSME_E.GPDE_DV_REP_RSN,DSME_E.GPDE_DV_CANCEL,DSME_E.GPDE_SI_BTNR,
      DSME_E.GPDE_SI_PROV_ID,DSME_E.GPDE_SI_PROV,DSME_E.GPDE_DV_EMPL_CAT,
      DSME_E.GPDE_DV_DBME,DSME_E.GPDE_DV_DBNA,DSME_E.GPDE_DV_DBGB,DSME_E.GPDE_DV_DBAN,
      DSME_E.GPDE_DV_DBEU,DSME_E.GPDE_DV_DBSO,DSME_E.MESSAGE_SET_NBR,DSME_E.MESSAGE_NBR
order by DSME_E.EMPLID
end-select

ExitReport:
end-procedure
!************************new procedure wduell****************************************************************


begin-procedure Get_EmplidName
let $EmplidName = ' '
begin-select
NA1.NAME
  let $EmplidName = rtrim(&NA1.NAME, ' ')
from PS_NAMES NA1
where NA1.NAME_TYPE='PRI' and
   NA1.EMPLID = $Emplid and
   NA1.EFFDT= ( Select MAX(NA2.EFFDT) from PS_NAMES NA2
                 WHERE NA1.EMPLID=NA2.EMPLID
                 AND NA2.NAME_TYPE='PRI' )
end-select
end-procedure



!****************************************************************************************
begin-procedure Get_Err_Desc
! ---- wduell : Default-Fehlertext
let $DV_ErrCD_Descr = 'Datenbausteinfehler'
begin-select
CAT.MESSAGE_TEXT
  let $DV_ErrCD_Descr = rtrim(&CAT.MESSAGE_TEXT, ' ')
from PSMSGCATDEFN CAT
where CAT.MESSAGE_SET_NBR = #MessSetNum and
   CAT.MESSAGE_NBR = #MessNum
   !and CAT.LANGUAGE_CD = 'GER'
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBME

begin-select
DBME.BEGIN_DT
DBME.END_DT
DBME.GPDE_BL_AMT
DBME.CURRENCY_CD
DBME.GPDE_DV_SV_CODE
DBME.GPDE_DV_BA_CD
DBME.GPDE_SI_REGION
DBME.GPDE_SI_EMPL_MULT

  let $BegDate_DBME      = &DBME.BEGIN_DT
  let $EndDate_DBME      = &DBME.END_DT
  let #Amount_DBME       = &DBME.GPDE_BL_AMT
  let $CurrCd_BME        = &DBME.CURRENCY_CD
  let $SvCode_DBME       = &DBME.GPDE_DV_SV_CODE
  let $DvBaCd_DBME       = &DBME.GPDE_DV_BA_CD
  let $Region_DBME       = &DBME.GPDE_SI_REGION
  let $EmplMult_DBME     = &DBME.GPDE_SI_EMPL_MULT

  do Format-DateTime($BegDate_DBME, $BegDate_DBME1, {DEFDATE}, '', '')
  do Format-DateTime($EndDate_DBME, $EndDate_DBME1, {DEFDATE}, '', '')
  do Format-Number(#Amount_DBME,$Amount_DBME1,'999,999,999.99')
  if #current-line > 54
     new-page
  end-if
  print 'DBME'                      (+2,{col1ME})
  print 'Beginn'                    (,{col2ME})
  print 'Ende'                      (,{col3ME})
  print 'Engelt'                    (,{col4ME})
  print 'Währ'                      (,{col5ME})
  print 'BGS'                       (,{col6ME})
  print 'TTAE'                      (,{col7ME})
  print 'Region'                    (,{col8ME})
  print 'Mehrfache Beschäftigung'   (,{col9ME})

  print '-'                         (+1,{col1ME},4)  FILL
  print '-'                         (,{col2ME},10)   FILL
  print '-'                         (,{col3ME},10)   FILL
  print '-'                         (,{col4ME},12)   FILL
  print '-'                         (,{col5ME},9)    FILL
  print '-'                         (,{col6ME},9)    FILL
  print '-'                         (,{col7ME},12)   FILL
  print '-'                         (,{col8ME},9)    FILL
  print '-'                         (,{col9ME},23)   FILL

  print $BegDate_DBME1              (+1,{col2ME})
  print $EndDate_DBME1              (,{col3ME})
  print $Amount_DBME1               (,{col4ME})
  print $CurrCd_BME                 (,{col5ME})
  print $SvCode_DBME                (,{col6ME})
  print $DvBaCd_DBME                (,{col7ME})
  print $Region_DBME                (,{col8ME})
  print $EmplMult_DBME              (,{col9ME})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'              (+2,{col2ME})
    print 'Fehlertext'              (,{col3ME})
    print '-'                       (+1,{col2ME},10)   FILL
    print '-'                       (,{col3ME},100)   FILL

    print #DV_ErrCD                 (+1,{col2ME})
 print $DV_ErrCD_Descr           (,{col3ME})
  end-if

from PS_GPDE_DV_DBME DBME
where DBME.EMPLID = $Emplid and
      DBME.EMPL_RCD = #Empl_Rcd and
      DBME.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBME.GPDE_DV_REP_RSN = $DV_Rsn and
      DBME.GPDE_DV_RUN = #Ctl_DV_Run and
      DBME.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBNA

begin-select
DBNA.GPDE_DV_LAST_NAME
DBNA.GPDE_DV_FIRST_NAME
DBNA.NAME_ROYAL_PREFIX
DBNA.NAME_ROYAL_SUFFIX

  let $LastName_DBNA          = rtrim(&DBNA.GPDE_DV_LAST_NAME, ' ')
  let $FirstName_DBNA         = rtrim(&DBNA.GPDE_DV_FIRST_NAME, ' ')
  let $NameRoyPref_DBNA       = rtrim(&DBNA.NAME_ROYAL_PREFIX, ' ')
  let $NameRoySuff_DBNA       = rtrim(&DBNA.NAME_ROYAL_SUFFIX, ' ')
  if #current-line > 54
     new-page
  end-if
  print 'DBNA'                (+2,{col1NA})
  print 'Name'                (,{col2NA})
  print 'Vorname'             (,{col3NA})
  print 'Vorsatz'             (,{col4NA})
  print 'Zusatz'              (,{col5NA})

  print '-'                   (+1,{col1NA},4)  FILL
  print '-'                   (,{col2NA},30)   FILL
  print '-'                   (,{col3NA},30)   FILL
  print '-'                   (,{col4NA},15)   FILL
  print '-'                   (,{col5NA},15)   FILL

  print $LastName_DBNA        (+1,{col2NA})
  print $FirstName_DBNA       (,{col3NA})
  print $NameRoyPref_DBNA     (,{col4NA})
  print $NameRoySuff_DBNA     (,{col5NA})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'        (+2,{col2NA})
    print 'Fehlertext'        (,{col3NA})
 print '-'                 (+1,{col2NA},10)   FILL
    print '-'                 (,{col3NA},100)    FILL

    print #DV_ErrCD           (+1,{col2NA})
 print $DV_ErrCD_Descr     (,{col3NA})
  end-if

from PS_GPDE_DV_DBNA DBNA
where DBNA.EMPLID = $Emplid and
      DBNA.EMPL_RCD = #Empl_Rcd and
      DBNA.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBNA.GPDE_DV_REP_RSN = $DV_Rsn and
      DBNA.GPDE_DV_RUN = #Ctl_DV_Run and
      DBNA.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBGB

begin-select
DBGB.GPDE_DV_BIRTHNAME
DBGB.NAME_ROYAL_PREFIX
DBGB.NAME_ROYAL_SUFFIX
DBGB.BIRTHDATE
DBGB.SEX
DBGB.BIRTHPLACE

  let $BirthName_DBGB         = rtrim(&DBGB.GPDE_DV_BIRTHNAME, ' ')
  let $NameRoyPref_DBGB       = rtrim(&DBGB.NAME_ROYAL_PREFIX, ' ')
  let $NameRoySuff_DBGB       = rtrim(&DBGB.NAME_ROYAL_SUFFIX, ' ')
  let $BirthDate_DBGB         = rtrim(&DBGB.BIRTHDATE, ' ')
  let $Sex_DBGB               = rtrim(&DBGB.SEX, ' ')
  let $BirthPlace_DBGB        = rtrim(&DBGB.BIRTHPLACE, ' ')
  if #current-line > 54
     new-page
  end-if
  print 'DBGB'                (+2,{col1GB})
  print 'Geburtsname'         (,{col2GB})
  print 'Vorsatz'             (,{col3GB})
  print 'Zusatz'              (,{col4GB})
  print 'Geb Datum'           (,{col5GB})
  print 'Geschlecht'          (,{col6GB})
  print 'Geb Ort'             (,{col7GB})

  print '-'                   (+1,{col1GB},4)  FILL
  print '-'                   (,{col2GB},30)   FILL
  print '-'                   (,{col3GB},30)   FILL
  print '-'                   (,{col4GB},15)   FILL
  print '-'                   (,{col5GB},15)   FILL
  print '-'                   (,{col6GB},15)   FILL
  print '-'                   (,{col7GB},30)   FILL

  do Format-DateTime($BirthDate_DBGB, $BirthDate_DBGB1, {DEFDATE}, '', '')
  print $BirthName_DBGB       (+1,{col2GB})
  print $NameRoyPref_DBGB     (,{col3GB})
  print $NameRoySuff_DBGB     (,{col4GB})
  print $BirthDate_DBGB1      (,{col5GB})
  print $Sex_DBGB             (,{col6GB})
  print $BirthPlace_DBGB      (,{col7GB})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'        (+2,{col2GB})
    print 'Fehlertext'        (,{col3GB})
 print '-'                 (+1,{col2GB},10)   FILL
    print '-'                 (,{col3GB},100)    FILL

    print #DV_ErrCD           (+1,{col2GB})
 print $DV_ErrCD_Descr     (,{col3GB})
  end-if

from PS_GPDE_DV_DBGB DBGB
where DBGB.EMPLID = $Emplid and
      DBGB.EMPL_RCD = #Empl_Rcd and
      DBGB.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBGB.GPDE_DV_REP_RSN = $DV_Rsn and
      DBGB.GPDE_DV_RUN = #Ctl_DV_Run and
      DBGB.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBAN

begin-select
DBAN.NATIONALITY_CD
DBAN.POSTAL
DBAN.CITY
DBAN.ADDRESS1
DBAN.ADDRESS2

  let $NationCd_DBAN         = rtrim(&DBAN.NATIONALITY_CD, ' ')
  let $Postal_DBAN           = rtrim(&DBAN.POSTAL, ' ')
  let $City_DBAN             = rtrim(&DBAN.CITY, ' ')
  let $Address1_DBAN         = rtrim(&DBAN.ADDRESS1, ' ')
  let $Address2_DBAN         = rtrim(&DBAN.ADDRESS2, ' ')
  if #current-line > 54
     new-page
  end-if
  print 'DBAN'               (+2,{col1AN})
  print 'Land'               (,{col2AN})
  print 'Plz'                (,{col3AN})
  print 'Wohnort'            (,{col4AN})
  print 'Strasse/Hausnr'     (,{col5AN})
  print 'Zusatz'             (,{col6AN})

  print '-'                  (+1,{col1AN},4)  FILL
  print '-'                  (,{col2AN},4)    FILL
  print '-'                  (,{col3AN},12)   FILL
  print '-'                  (,{col4AN},30)   FILL
  print '-'                  (,{col5AN},55)   FILL
  print '-'                  (,{col6AN},55)   FILL

  print $NationCd_DBAN       (+1,{col2AN})
  print $Postal_DBAN         (,{col3AN})
  print $City_DBAN           (,{col4AN})
  print $Address1_DBAN       (,{col5AN})
  print $Address2_DBAN       (,{col6AN})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'       (+2,{col2AN})
    print 'Fehlertext'       (,{col4AN})
    print '-'                (+1,{col2AN},10)  FILL
    print '-'                (,{col4AN},100)   FILL

    print #DV_ErrCD          (+1,{col2AN})
    print $DV_ErrCD_Descr    (,{col4AN})
  end-if

from PS_GPDE_DV_DBAN DBAN
where DBAN.EMPLID = $Emplid and
      DBAN.EMPL_RCD = #Empl_Rcd and
      DBAN.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBAN.GPDE_DV_REP_RSN = $DV_Rsn and
      DBAN.GPDE_DV_RUN = #Ctl_DV_Run and
      DBAN.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBEU

begin-select
DBEU.BIRTHCOUNTRY
DBEU.GPDE_DV_EU_SSN

  let $BirthCntry_DBEU        = rtrim(&DBEU.BIRTHCOUNTRY, ' ')
  let $DvEuSsn_DBEU           = rtrim(&DBEU.GPDE_DV_EU_SSN, ' ')
  if #current-line > 54
     new-page
  end-if
  print 'DBEU'               (+2,{col1EU})
  print 'geburtsland'        (,{col2EU})
  print 'EU SVNR'            (,{col3EU})

  print '-'                  (+1,{col1EU},4)  FILL
  print '-'                  (,{col2EU},18)   FILL
  print '-'                  (,{col3EU},20)   FILL

  print $BirthCntry_DBEU     (+1,{col2EU})
  print $DvEuSsn_DBEU        (,{col3EU})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'       (+2,{col2EU})
    print 'Fehlertext'       (,{col3EU})
 print '-'                (+1,{col2EU},10)   FILL
    print '-'                (,{col3EU},100)   FILL

    print #DV_ErrCD          (+1,{col2EU})
 print $DV_ErrCD_Descr    (,{col3EU})
  end-if

from PS_GPDE_DV_DBEU DBEU
where DBEU.EMPLID = $Emplid and
      DBEU.EMPL_RCD = #Empl_Rcd and
      DBEU.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBEU.GPDE_DV_REP_RSN = $DV_Rsn and
      DBEU.GPDE_DV_RUN = #Ctl_DV_Run and
      DBEU.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DBSO

begin-select
DBSO.BEGIN_DT
DBSO.GPDE_SI_EMPL_MULT
DBSO.GPDE_DV_CTRL_RPT
DBSO.GPDE_SI_EMPL_INSIG

  let $BeginDt_DBSO         = rtrim(&DBSO.BEGIN_DT, ' ')
  let $SiEmplMult_DBSO      = rtrim(&DBSO.GPDE_SI_EMPL_MULT, ' ')
  let $DvCtrl_DBSO          = rtrim(&DBSO.GPDE_DV_CTRL_RPT, ' ')
  let $EmplInsig_DBSO       = rtrim(&DBSO.GPDE_SI_EMPL_INSIG, ' ')
  if #current-line > 54
     new-page
  end-if
  print 'DBSO'              (+2,{col1SO})
  print 'Beginn'            (,{col2SO})
  print 'Mehrfach'          (,{col3SO})
  print 'Kontrollmld'       (,{col4SO})
  print 'Geringfügig'       (,{col5SO})

  print '-'                 (+1,{col1SO},4)  FILL
  print '-'                 (,{col2SO},10)   FILL
  print '-'                 (,{col3SO},8)    FILL
  print '-'                 (+1,{col4SO},11) FILL
  print '-'                 (,{col5SO},11)   FILL

  do Format-DateTime($BeginDt_DBSO, $BeginDt_DBSO1, {DEFDATE}, '', '')
  print $BeginDt_DBSO1      (+1,{col2SO})
  print $SiEmplMult_DBSO    (,{col3SO})
  print $DvCtrl_DBSO        (,{col4SO})
  print $EmplInsig_DBSO     (,{col5SO})

  if $Error_Report = 'Y'
    do Get_Err_Desc

    print 'Fehlercode'      (+2,{col2SO})
    print 'Fehlertext'      (,{col3SO})
 print '-'               (+1,{col2SO},10)   FILL
    print '-'               (,{col3SO},100)   FILL

    print #DV_ErrCD         (+1,{col2SO})
 print $DV_ErrCD_Descr   (,{col3SO})
  end-if

from PS_GPDE_DV_DBSO DBSO
where DBSO.EMPLID = $Emplid and
      DBSO.EMPL_RCD = #Empl_Rcd and
      DBSO.GPDE_DV_EVT_EFFDT = $Evt_Effdt and
   DBSO.GPDE_DV_REP_RSN = $DV_Rsn and
      DBSO.GPDE_DV_RUN = #Ctl_DV_Run and
      DBSO.GPDE_DV_CANCEL = $DV_Cancel
end-select
end-procedure
!****************************************************************************************
begin-heading 7
uppercase $ReportTitle
uppercase $SubTitel
#include 'stdhdgtr.sqc'
print $ProtokName (+1,{col1})
print '-' (+1,{col1},#ProtLength)  fill
print 'Laufeinheit:' (+2,{col1})
print $Ctl_Cal_Run_ID (,{col3})
end-heading
!**************************************************
begin-footing 2
print $VersionBez (+1,130)
end-footing
!**************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
let $VersionBez = $Bezeichn || ' ' || $VersionsNr
end-procedure
!****************************************************************************************
begin-procedure Print_Data_DSME
 if #current-line > 54
     new-page
 end-if
 do print_Sub_Header
 do Format-DateTime($Evt_Effdt, $Evt_Effdt1, {DEFDATE}, '', '')
 print $Emplid         (+1,{col1})
 print #Empl_Rcd       (,{col2})
 print $Evt_Effdt1     (,{col3})
 print $DV_RvNr        (,{col4})
 print $DV_Rsn_Descr   (,{col5})
 print $DV_Cancel      (,{col6})

  !---- wduell inserted if t
  if $Error_Report = 'Y'
   ! --- wduell added name resolution
   do Get_EmplidName
    print $EmplidName        (,{col7})
  else
 print $SI_BtNr        (,{col7})
 print $Prov_Id        (,{col8})
 print $SI_Prov        (,{col9})
 print $Empl_Cat       (,{col10})
 print $DV_DbMe        (,{col11})
 print $DV_DbNa        (,{col12})
 print $DV_DbGb        (,{col13})
 print $DV_DbAn        (,{col14})
 print $DV_DbEu        (,{col15})
 print $DV_DbSo        (,{col16})
  end-if

!------- inserted by wduell 29.5.02 ------------------
  if $Error_Report = 'Y'

    do Get_Err_Desc
    print 'Fehlercode'        (+2,{col2GB})
    print 'Fehlertext'        (,{col3GB})
    print '-'                 (+1,{col2GB},10)   FILL
    print '-'                 (,{col3GB},100)    FILL

    print #DV_ErrCD           (+1,{col2GB})
    print $DV_ErrCD_Descr     (,{col3GB})

!    print 'Name'     (+2,{col2GB})
!    print '-'                 (+1,{col2GB},30)   FILL
!    print $EmplidName           (+1,{col2GB})

  end-if
!------- end inserted by wduell 29.5.02 ------------------


end-procedure
!****************************************************************************************
begin-procedure print_Sub_Header
print 'Pers Nr'        (+2,{col1})
print 'Rcd'            (,{col2})
print 'Datum'          (,{col3})
print 'SVNR'           (,{col4})
print 'Meldegrund'     (,{col5})
print 'Sto'            (,{col6})

  !---- wduell inserted if t
  if $Error_Report = 'Y'
    print 'Name'       (,{col7})
  else
print 'Btnr Abs'       (,{col7})
print 'Btnr Emp'       (,{col8})
print 'Krankenkasse'   (,{col9})
print 'PGS'            (,{col10})
print 'ME'             (,{col11})
print 'NA'             (,{col12})
print 'GB'             (,{col13})
print 'AN'             (,{col14})
print 'EU'             (,{col15})
print 'SO'             (,{col16})
  end-if


print '-'              (+1,{col1},11) fill
print '-'              (,{col2},3) fill
print '-'              (,{col3},10) fill
print '-'              (,{col4},12) fill
print '-'              (,{col5},38) fill
print '-'              (,{col6},3) fill

  !---- wduell inserted if t
  if $Error_Report = 'Y'
    print '-'              (,{col7},32) fill
  else
print '-'              (,{col7},8) fill
print '-'              (,{col8},8) fill
print '-'              (,{col9},12) fill
print '-'              (,{col10},3) fill
print '-'              (,{col11},2) fill
print '-'              (,{col12},2) fill
print '-'              (,{col13},2) fill
print '-'              (,{col14},2) fill
print '-'              (,{col15},2) fill
print '-'              (,{col16},2) fill
  end-if
end-procedure
!****************************************************************************************
#include 'number.sqc'   ! routines for formatting numbers.
#include 'datetime.sqc' ! routines for formatting dates and times.
#include 'stdapi.sqc'   ! routines for process scheduler manipulation.
#include 'sqrtrans.sqc' ! routines for language translation.
#include 'readxlat.sqc' ! routines for xlat translation.
#include 'curdttim.sqc' ! get-current-datetime procedure
#include 'validdt.sqc'  ! validate date routine
#include 'datemath.sqc'  !function for date-calculation


