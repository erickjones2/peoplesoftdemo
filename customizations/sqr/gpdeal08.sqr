!***********************************************************************
!  GPDEAL08:  Industrial statistics -Industriebericht                  *
!***********************************************************************
!                                                                      *
!                                                                      *
!
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:04                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !set environment

#define col0         5
#define col1        31
#define col2        68
#define col3        100

!****************************************************************************
begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-Program

!****************************************************************************
#include 'setup31.sqc'

begin-heading 10
uppercase $ReportTitle
#include 'stdhdgtr.sqc'
position (-1,0)
let $CURRENCY = &PBD.CURRENCY_CD
let $IN_STR1  = $IN_STR || $Eur
print $SubTitle        ()           center
position (+1,0)

print $SERVICE_STR                      (+1, {col0})
print $STAFF_STR                        ( 0, {col1})
print $Ctl_Deptid                       ( +1, {col0})
print $Ctl_WC_COUNCIL_ID             ( 0, {col1})
print $AMOUNT_SPEC1            (+1,{col0})
print '_' (+1,1,124) fill
print $DEPARTMENT_STR                   (+1, {col0})
print $Title3_Out                       ( 0, {col1})
print $Sum_Title                        ( 0, {col2})
print $HR_Title1                        ( 0, {col3})
print $Title4_Out                       (+1, {col1})
print $IN_STR1                          ( 0, {col2})
print $HR_Title2                        ( 0, {col3})
print '_' (+1,1,124) fill
end-heading
!****************************************************************************
begin-procedure Init-Report

  move 'GPDEAL08' to $ReportID
  move $TITLE to $ReportTitle

  do Stdapi-Init

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
     do Get-Values
  end-if

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation

  let $ReportTitle =  $TITLE_STR || ' ' || rtrim(ltrim($Month_Name,' '),' ') || ' ' || rtrim(ltrim($YYYY,' '),' ')
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle
end-procedure Init-Report
!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPDEAL08', 'TITLE_STR',           $TITLE_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'STAFF_STR',           $STAFF_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'SERVICE_STR',       $SERVICE_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'DETAILS1_STR',     $DETAILS1_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'DETAILS2_STR',     $DETAILS2_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'DEPARTMENT_STR', $DEPARTMENT_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'EMPL_COUNT_STR', $EMPL_COUNT_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'AMOUNT_STR',         $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'AMOUNT1_STR',       $AMOUNT1_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'HOURS1_STR',         $HOURS1_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'HOURS2_STR',         $HOURS2_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'ULTIMO_STR',         $ULTIMO_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'IN_STR',                 $IN_STR,#CW)
  do Get_Field_Information ('GPDEAL08', 'SUM_STR',               $SUM_STR,#CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',       $AMOUNT_SPEC,#CW)
end-Procedure Report-Translation
!****************************************************************************
begin-procedure Get-Values
  let $language_cd              = $PRCS_LANGUAGE_CD
  let $Ctl_WC_COUNCIL_ID     = RTRIM(&GPDE_RUN_CNTL.WC_COUNCIL_ID, ' ')
  let #Ctl_Empl_Type_St         = &GPDE_RUN_CNTL.GPDE_RC_EE_TYPE_ST

  if $Ctl_WC_COUNCIL_ID <> ''
   let $Council_Crit = ' AND PBD.WC_COUNCIL_ID = ''' || $Ctl_WC_COUNCIL_ID || ''''
  end-if

  display $ReportEndDate
  do Format-DateTime($ReportEndDate, $date_print, {DEFDATE},'','')
  do ConvertToComponents($ReportEndDate,$yy,$mm,$dd)
  do Format-DateTime($ReportEndDate, $year_4digit, {DEFCMP},'','')
  let $YYYY = substr($year_4digit,1,4)
  display $mm
  do Get-Translate-Value

end-procedure Get-Values
!****************************************************************************
begin-procedure Get-Translate-Value

  move 'MONTHCD' to $FieldName
  move $mm to $FieldValue

  do Read-Translate-Table
  let $Month_Name = $XlatShortName

  #DEBUG show 'Month Name = ' $Month_Name

end-procedure Get-Translate-Value
!****************************************************************************
begin-procedure Ask-Input
input $Ctl_Curr_Pay_End_Dt 'Current Pay End Date' type = char
input $Ctl_PayEntity 'Enter Pay Entity' type = char
input $Ctl_Deptid 'Abteilung' type = char
input $Ctl_WC_COUNCIL_ID 'Betriebsratseinheit' type=char
input #Ctl_Empl_Type_St 'Mitarbeiterart' type=integer

do Format-DateTime($ReportEndDate, $date_print, {DEFDATE},'','')
do ConvertToComponents($ReportEndDate,$yy,$mm,$dd)
do Format-DateTime($ReportEndDate, $year_4digit, {DEFCMP},'','')
let $YYYY = substr($year_4digit,1,4)

end-procedure Ask-Input
!**********************************************************************
Begin-Procedure Process-Main
let $Nodata = 'Y'
if (rtrim($Ctl_Curr_Pay_End_Dt, ' ') = '') or (rtrim($Ctl_PayEntity, ' ') = '')
  goto nodata
end-if
  do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt1,{DEFDATE},'','')
  do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
  let $Sticht = '2002'  || '01' ||  '01'
  do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
  do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

  if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
     let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
   let $ToCurrency = 'EUR'
  let $Eur = ' EUR '
  else
   let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
   let $ToCurrency = 'DEM'
  let $Eur = ' DM '
  end-if


  let #merk=0
  let $CURRENCY = ''
  if #Ctl_Empl_Type_St = 1
     let $Type = $DETAILS2_STR
     let $Type2 = $EMPL_COUNT_STR
     let $Sum_Title = $AMOUNT1_STR
     let $Hr_Title1 = ' '
     let $Hr_Title2 = ' '
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND PBD.PERFORM_GROUP_GER IS NOT NULL
                        AND PBD.PERFORM_GROUP_GER <> '''||' '||'''      '
     do Get-Dept-Info
     do Print-Sums
  if $Nodata = 'N'
     New-Page
  end-if
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER LIKE '''||'A%'||'''  '
     let $Type = $DETAILS1_STR
     let $Type2 = $EMPL_COUNT_STR
     let $Sum_Title = $AMOUNT_STR
     let $Hr_Title1 = $HOURS1_STR
     let $Hr_Title2 = $HOURS2_STR
     let $Get_Hours = 'Y'
         let #merk=1
     do Get-Dept-Info
     do Print-Sums
         let #merk = 0
  end-if

  if #Ctl_Empl_Type_St = 2
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND PBD.PERFORM_GROUP_GER IS NOT NULL
                        AND PBD.PERFORM_GROUP_GER <> '''||' '||'''      '
     let $Type = $DETAILS2_STR
     let $Type2 = $EMPL_COUNT_STR
     let $Sum_Title = $AMOUNT1_STR
     let $Hr_Title1 = ' '
     let $Hr_Title2 = ' '
     do Get-Dept-Info
     do Print-Sums
  end-if

  if #Ctl_Empl_Type_St = 3
     let #merk = 0
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER LIKE '''||'A%'||'''       '
     let $Type = $DETAILS1_STR
     let $Type2 = $EMPL_COUNT_STR
     let $Sum_Title = $AMOUNT_STR
     let $Hr_Title1 = $HOURS1_STR
     let $Hr_Title2 = $HOURS2_STR
     let $Get_Hours = 'Y'
     do Get-Dept-Info
     do Print-Sums
         let #merk= 0
  end-if

  show 'job clause = ' $job_Clause
nodata:
do Print_Info_User
End-Procedure Process-Main
!******************************************************************
begin-procedure Print_Info_User
!Display, if Reqired input on Run Control failed
if $Nodata = 'Y'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing input:'
   display '   Pay Entity: ' noline
   display $Ctl_PayEntity
   display '   Current Pay End Date: ' noline
   display $Ctl_Curr_Pay_End_Dt
   display '   Department:' noline
   display $Ctl_Deptid
   display '   Works Council ID(field WC_COUNCIL_ID):' noline
   display $Ctl_WC_COUNCIL_ID
   display '   Employee Type Condition:' noline
   Evaluate #Ctl_Empl_Type_St
  When = 1              !both
     display '1 -->(The field value from PERFORM_GROUP_GER in the table GPDE_RP_0001 '
  display '   must be like "A%" or not empty)'
     Break

  When = 2              !white-collar
     display '2 -->(The field value from PERFORM_GROUP_GER in the table GPDE_RP_0001 '
  display '   must be not like "A%" or not empty)'
  break
  When = 3              !blue-collar
     display '3 -->(The field value from PERFORM_GROUP_GER in the table GPDE_RP_0001 must be like "A%")'
    Break
  When-Other
    display '" " -->Please select other value'
    Break
  End-Evaluate
   display '-----------------------------------------------------'
end-if
end-procedure
!****************************************************************************
begin-procedure Get-Dept-Info

do Print-Heading
begin-SELECT

PBD.PAY_ENTITY
PBD.EMPLID
PBD.EMPL_RCD
PBD.WC_COUNCIL_ID
PBD.DEPTID    ()      On-Break  Print=Never  Save=$DeptID After=Print-Totals
RP0002.GPDE_RP_TOTGRSS    &SUMME
RP0002.GPDE_RP_WRKDHRS    &SUMME1
PBD.CURRENCY_CD
PBD.CUR_RT_TYPE
PBD.GPDE_ASOF_DT_EX_RT
PBD.PRD_END_DT

    let $EmplID          = &PBD.EMPLID
 let $Current_Curr    = &PBD.CURRENCY_CD
    let $Current_RT_Type     = &PBD.CUR_RT_TYPE
    let $Current_DT_EX_RT   = &PBD.GPDE_ASOF_DT_EX_RT
 let $PrdEndDT            = &PBD.PRD_END_DT
   let #Total_Amount       = 0

   if rtrim($Current_RT_Type, ' ') = ''
      let $Current_RT_Type = $BaseRtType
   end-if

    if rtrim($Current_DT_EX_RT, ' ') = ''
      let $Current_DT_EX_RT = $PrdEndDT
    end-if

    if $Current_Curr <> $ToCurrency
       do ConvertCurrency(&SUMME,$Current_Curr,$ToCurrency,$Current_RT_Type,
                       $Current_DT_EX_RT,#Total_Amount,'F')
    else
       let #Total_Amount         = &SUMME
    end-if

    let #Brutto1        = #Brutto1 +  #Total_Amount
    let #Total_Brutto   = #Total_Brutto + #Total_Amount
    let #Hours1         = #Hours1 + &SUMME1
    let #Total_Hours    = #Total_Hours + &SUMME1

        add 1 to #Employee_Count
        add 1 to #Total_Employee_Count
    let $Nodata = 'N'
FROM PS_GPDE_RP_0001 PBD,PS_GPDE_RP_0002 RP0002

WHERE PBD.EMPLID       = RP0002.EMPLID
  AND PBD.CAL_RUN_ID   = RP0002.CAL_RUN_ID
  AND PBD.EMPL_RCD     = RP0002.EMPL_RCD
  AND PBD.GP_PAYGROUP  = RP0002.GP_PAYGROUP
  AND PBD.CAL_ID       = RP0002.CAL_ID
  AND PBD.RSLT_SEG_NUM = RP0002.RSLT_SEG_NUM
  AND PBD.SEG_END_DT = RP0002.SEG_END_DT
  AND PBD.EMPL_STATUS      = 'A'
  AND PBD.GPDE_AL_CPAY_ENDDT between  $ReportBeginDate and $ReportEndDate
  [$Cal_Run_Id_Crit]
  [$PayEntity_Crit]
  [$Dept_Crit]
  [$Council_Crit]
  [$JOB_CLAUSE]
ORDER BY PBD.DEPTID
End-Select
End-Procedure Get-Dept-Info
!****************************************************************************
Begin-Procedure Print-Heading
let $SubTitle =  $Type
let $Title3_Out =  $Type2
let $Title4_Out = $ULTIMO_STR || ' ' || $mm || '/' || $YYYY
End-Procedure Print-Heading
!****************************************************************************
Begin-Procedure Print-Totals
if $Nodata = 'N'
      print $DeptId                           (+2, {col0})
      print #Employee_Count                   ( 0, {col1}) edit 9999999
         do Format-Number(#Brutto1,$number,'999,999,999.99')
      print $number                           ( 0, {col2})
if #merk = 1
   do Format-Number(#Total_Hours,$number,'999,999,999.99')
   print $number               ( 0, {col3})
end-if

let #Brutto1           = 0
let #Total_Hours       = 0
let $DeptId                 = ''
let #Employee_Count         = 0
end-if
end-Procedure Print-Totals
!****************************************************************************
Begin-Procedure Print-Sums
if $Nodata = 'N'
print '_' (+2,1,124) fill
print $SUM_STR                     (+2,{col0})
print #Total_Employee_Count       ( 0,{col1}) edit 9999999
do Format-Number(#Total_Brutto,$number,'999,999,999.99')
print $number                     ( 0,{col2})
if #merk = 1
   do Format-Number(#Total_Hours,$number,'999,999,999.99')
   print $number             ( 0,{col3})
end-if
let #Total_Employee_Count = 0
let #Total_Brutto         = 0
let #Total_Hours          = 0
end-if
End-Procedure Print-Sums

!****************************************************************************
#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut04.sqc'  !get pay entity information
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'
#include 'datemath.sqc'  !function for date-calculation
