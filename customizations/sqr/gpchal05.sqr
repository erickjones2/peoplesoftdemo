!***********************************************************************
! GPCHAL05.SQR  : FAK Yearly-Familienausgleichkasse-                   *
!***********************************************************************
!                                                                      *
!                                                                     *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2016/02/07:23:39:09                                 !
!       $Release:  HR92                                                !
!           $Bug:  22026450                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

begin-setup

create-array name = RekapData size = 50
field = Rekap1:char
field = Rekap2:char
field = Rekap3:number
field = Rekap4:number
field = Rekap5:number
field = Rekap6:number
field = Rekap7:number
field = Rekap8:number
field = Rekap9:number
field = Rekap10:number

create-array name = ChldDatCmp size = 2
field = FieldCh:char:20

end-setup


#define col1  10
#define col2  13        !Child Name/First name 5
#define col3  56        !Child Birth date 22
#define col4  37        !Duration of contribution 35
#define col5  63
#define col5a  58        !Activity rate 60
#define col6  73        !AHV-Obligatory sum of salaries 999,999,999.00 69
#define col7  95        !HOUS/FAM 84
#define col8  105       !Outpayment 90
#define col9  87        !Birth 94
#define col10 101       !Children benefits 103
#define col12 115       !Education benefits 112
#define col13 109       !Correction
#define col61 70

#define col1R 10
#define col2R 26        !Beitrag FAK
#define col3R 34        !Fak-zulagen
#define col3_R 28
#define col4R 47        !Haus
#define col5R 61        !Geb
#define col6R 74        !Ausz
#define col7R 88        !korr
#define col8R 100       !korr
#define col9R 113       !ahv
#define col9R_1 110     !ahv

#define Col1P3 10
#define Col2P3 40
#define Col3P3 55
#define Col4P3 70
#define Col5P3 85
#define Col6P3 110
!*************************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report 
If $GPCH_EG_YEP_FLG = 'Y'
   If $Run_Option = 'Y' and $Rpt_Type ='Y'
   do Init_Statustbl
  do Process-Main
  do Delete-Rec-Al05
 
  do Stdapi-Term
  do Get-Log
  Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,$SysDateTime,$Cancel_option)
Else
     If $Cancel_Option = 'Y'
     do Cancle_YEA($ptot_requestid,$Ctl_Year,$comp,$providertype,#ptot_domainid)
     Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option) 
    End-If
    !Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option)
    do Stdapi-Term
    do Get-Log
  End-if
 Else
    do Process-Main
    do Delete-Rec-Al05
    do Stdapi-Term
    do Get-Log
 End-IF
end-PROGRAM
!*************************************************************************************
begin-procedure Init-Report
  do Stdapi-Init
  let $Sort_Order = ''
  let $Sort_OrderR = ''
  let $Sort1 = ''
  let $merk = ''
  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
     do Get-Base-Language
  end-if
if $GPCH_EG_YEP_FLG = 'Y'
  let $Provider_crit = ' '
    do Get-PTotals-Data($Provider_crit,$providertype,#Domainid,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey) 
    do Check_Run_Report(#ptot_domainid,$Ctl_Year,$comp,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)
     
    Let $Ctl_PayEntity = $comp
    
   end-if 
    if $GPCH_EG_YEP_FLG = 'Y'
       If $ptot_userkey <>'99'
        let $canton_elm_crit= ' AND CANT.STATE ='||''''||$ptot_userkey||''''        
       else 
          let $canton_elm_crit = ' AND CANT.STATE IN (select ST.GPCH_TX_CANTON from PS_GPCH_TX_FAK_STX ST where ST.COMPANY = ' ||  '''' || $Ctl_PayEntity || '''' || ' AND ST.GPCH_SI_PROV_CD <> ' || '''' || '''' || ')'
       End-If
     Else       
          let $canton_elm_crit=''
     end-if
    

  move 'GPCHAL05' to $ReportID

  if $ApplyContextLanguage = 'Y'
     let $language_cd = ''
  end-if

  if $language_cd <> ''
     do Get-Language ($ReportID, $language_cd)
  else
     let $Blank_lang = 'Y'
  end-if


  if $Run_Retro_Check <> '5'
     let $ReportTitle = $TITLE_STR  || ' ' || $REVISION_STR
  else
     let $ReportTitle = $TITLE_STR
  end-if
  let $TITLE1 = $TITLE_STR
  let #Date_Type= {DateType}
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle


  if $Ctl_End_Dt <> ''
      do ConvertToComponents ( $Ctl_End_Dt , $yy11 , $mm11 , $dd11 )
      do ConvertToComponents ( $Ctl_Start_Dt , $yy10 , $mm10 , $dd10 )

   do Format-DateTime ( $Ctl_Start_Dt , $Ctl_B_Date , {DEFCMP} , '' , '' )
   do Format-DateTime ( $Ctl_End_Dt , $Ctl_E_Date , {DEFCMP} , '' , '' )

   evaluate #Date_Type
   when = 1
    let $from_to_format = $dd10 || '{PTDateDelim}'
    || $mm10 || '{PTDateDelim}' || ' - ' || $dd11
    || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $yy11
     break
   when = 2
    let $from_to_format = $mm10 || '{PTDateDelim}'
    || $dd10 || '{PTDateDelim}' || ' - ' || $yy11
    || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $dd11
     break
   when-other
     let $from_to_format = $mm10 || '{PTDateDelim}'
    || $dd10 || '{PTDateDelim}' || ' - ' || $mm11
    || '{PTDateDelim}' || $dd11 || '{PTDateDelim}' || $yy11
     break
   end-evaluate

  end-if
!FMB substiuted Pers_Nid by GPCH_RP_0001
    let $Sort1  = 'PBD.STATE, PBD.NATIONAL_ID, PBD.GPCH_AH_NNSS, PBD.BIRTHDATE, PD.NAME, PBD.EMPLID,PBD.EMPL_RCD, ' ||
               'PBD.BEGIN_DT , PBD.END_DT '

    let $Sort_Order = 'ORDER BY '
    concat $Sort1 with $Sort_Order

    let $Sort_OrderR = 'ORDER BY '
    concat $Sort1R with $Sort_OrderR

    let #count_Emplid = 0
    let $Emplid_Criteria1 = ''
    let $Emplid_Criteria1_PS = ''
    let $Emplid_Criteria1_tmp = ''
    let $Emplid_Criteria1_tmp1 = ''
    let $Emplid_CriteriaE1 = ''

    do Get-Emplid-Count

  if #count_Emplid <> 0
     let $Emplid_Criteria1      = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria1_PS    = ' AND PS.EMPLID IN ( ' || $Emplid-String || ')'
     let $Emplid_Criteria1_tmp  = ' AND PSA.EMPLID IN ( ' || $Emplid-String || ')'
     let $Emplid_CriteriaE1 = ' AND FK2.EMPLID IN ( ' || $Emplid-String || ')'
  else
     let $Emplid_Criteria1      = ' '
     let $Emplid_Criteria1_PS    = ' '
     let $Emplid_Criteria1_tmp  = ' '
     let $Emplid_CriteriaE1 = ' '
  end-if
  

end-procedure

!****************************************************************************
Begin-Procedure Get-Language($ReportID, $language_cd)

  do Init_Report_Translation ( $ReportID , $language_cd )
  do Append_Report_Translation ('GPCHGLOB')
  do Append_Report_Translation ('GPCHAL04')

  do Gpce_Init_Report_Translation ( $ReportID , $language_cd )
  do Gpce_Append_Report_Translation ('GPCHGLOB' , $language_cd )
  do Gpce_Append_Report_Translation ('GPCHAL04' , $language_cd )
  do Report-Translation

end-procedure
!************************************************
begin-procedure Get-Base-Language

begin-select
LANGUAGE_CD
  move &Language_Cd to $Base_Language
FROM PSOPTIONS
end-select
end-procedure
!************************************************
begin-procedure Report-Translation

  do Get_Field_Information ( 'GPCHAL04' , 'ACTIVITY_RATE_STR' ,     $ACTIVITY_RATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AHV_NR_STR' ,                   $AHV_NR_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'NNSS_NR_STR' ,                 $NNSS_NR_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH' ,                 $BIRTH_LBL , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AHV_OBLIGATORY_STR' ,   $AHV_OBLIGATORY_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AHV_OBL_SUM_STR' ,         $AHV_OBL_SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AMOUNT_STR' ,                   $AMOUNT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AND_MORE_STR' ,               $AND_MORE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_BENEFS_STR' ,       $BIRTH_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_BENEF_STR' ,         $BIRTH_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_DATE_STR' ,           $BIRTH_DATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_STR' ,                     $BIRTH_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BUDG_FAM_STR' ,               $BUDG_FAM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD1_STR' ,                   $CHILD1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEF1_STR' ,       $CHILD_BENEF1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEFS_STR' ,       $CHILD_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEF_STR' ,         $CHILD_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CONTRIBUTION_STR' ,       $CONTRIBUTION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION1_STR' ,         $CORRECTION1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION2_STR' ,         $CORRECTION2_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION_STR' ,           $CORRECTION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDUCATION_BEN_STR' ,     $EDUCATION_BEN_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDU_BENEFS_STR' ,           $EDU_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDU_BENEF_STR' ,             $EDU_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'ELIGIBLE_BENEF_STR' ,   $ELIGIBLE_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT1_STR' ,         $EMPL_COUNT1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT2_STR' ,         $EMPL_COUNT2_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT3_STR' ,         $EMPL_COUNT3_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT4_STR' ,         $EMPL_COUNT4_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT5_STR' ,         $EMPL_COUNT5_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'ENTRY_EXIT_STR' ,           $ENTRY_EXIT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CANTON_STR' ,           $FAK_CANTON_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CONTRIB_STR' ,         $FAK_CONTRIB_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CONTRIB1_STR' ,       $FAK_CONTRIB1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_DEBIT_BALA_STR' ,   $FAK_DEBIT_BALA_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FROM_STR' ,                       $FROM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TO_STR' ,                       $TO_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FULL_TIME_STR' ,             $FULL_TIME_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HANDL_CHARGE_STR' ,       $HANDL_CHARGE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOURLY_RATE_STR' ,         $HOURLY_RATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOUSE_BENEF_STR' ,         $HOUSE_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'INVALIDE_CHILD_STR' ,   $INVALIDE_CHILD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'NAME1_STR' ,                     $NAME1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'OUTPAYMENT_STR' ,           $OUTPAYMENT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PAGE_SUM_STR' ,               $PAGE_SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PART_TIME_STR' ,             $PART_TIME_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PERCENT_WEEK_STR' ,       $PERCENT_WEEK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RUDIMENT_CHILD_STR' ,   $RUDIMENT_CHILD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_SALARY_STR' ,           $SUM_SALARY_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_TOT_STR' ,                 $SUM_TOT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TITLE1_STR' ,                   $TITLE1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TOTAL_COUNT_STR' ,         $TOTAL_COUNT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TOTAL_FAK_STR' ,             $TOTAL_FAK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RECAPITULATION_STR' ,   $RECAPITULATION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CANTON_STR' ,                   $CANTON_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CONTRIBUTION1_STR' ,     $CONTRIBUTION1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_STR' ,                         $SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BENEFITS_STR' ,               $BENEFITS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOUSEHOLD_STR' ,             $HOUSEHOLD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TITLE_STR' ,                     $TITLE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_STR' ,                         $FAK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RUDIMENT_STR' ,               $RUDIMENT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'REVISION_STR' ,               $REVISION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RUN_DATE',                    $RUN_DATE,      #CW)
  do Get_Field_Information ( 'GPCHAL04' , 'SIGNAT',                      $SIGNAT,        #CW)


  do Get_Field_Information ('GPCHGLOB', 'TOTAL' ,          $TOTAL_STR ,      #CW )
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',     $LG_PINNM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_COUNTRY',   $LG_COUNTRY,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_DEPT',      $HD_DEPT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'EMPLID',    $HD_EMPLID,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FOR',    $HD_FOR,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'CANTON_PAGE',    $HD_CANTON_PAGE,    #CW)

  let $AHV_OBLIGATORY_T_STR = $AHV_OBLIGATORY_STR

  if $Run_Retro_Check = '5'
    let $AHV_OBLIGATORY_STR = ''
  end-if

  if $language_cd = 'GER'
     do Strings_Pads ( $AHV_OBLIGATORY_STR , $AHV_OBLIGATORY_STR , 18 )
  end-if

  do Strings_Pads ( $BUDG_FAM_STR , $BUDG_FAM_STR , 14 )
  do Strings_Pads ( $CORRECTION_STR , $CORRECTION_STR , 12 )
  do Strings_Pads ( $TOTAL_FAK_STR , $TOTAL_FAK_STR , 13 )
  do Strings_Pads ( $BIRTH_STR , $BIRTH_STR , 13 )
  do Strings_Pads ( $BENEFITS_STR , $BENEFITS_R_STR , 13 )

  do Strings_Pads ( $CHILD_BENEF_STR , $CHILD_BENEF_STR , 13 )
  do Strings_Pads ( $CHILD_BENEF_STR , $CHILD_BENEF_STR , 13 )
  do Strings_Pads ( $EDUCATION_BEN_STR , $EDUCATION_BEN_STR , 13 )

  do Strings_Pads ( $SUM_SALARY_STR , $SUM_SALARY_R_STR , 19 )
  do Strings_Pads ( $FAK_CONTRIB_STR , $FAK_CONTRIB_R_STR , 14 )
  do Strings_Pads ( $HOUSEHOLD_STR , $HOUSEHOLD_R_STR , 13 )
  do Strings_Pads ( $FAK_STR , $FAK_R_STR , 13 )

  let $AHV_OBLIGATORY_T_STR1 = substr($AHV_OBLIGATORY_T_STR,1,16)
  let $AHV_OBLIGATORY_T_STR2 = substr($AHV_OBLIGATORY_T_STR,17,16)

  do Strings_Pads ( $AHV_OBLIGATORY_T_STR1 , $AHV_OBLIGATORY_T_STR1 , 16 )
  do Strings_Pads ( $AHV_OBLIGATORY_T_STR2 , $AHV_OBLIGATORY_T_STR2 , 16 )

  let $FAK_CONTRIB1_STR = rtrim ( $FAK_CONTRIB_STR , ' ' )
end-procedure

!***********************************************************************
begin-procedure Strings_Pads ( $Str1 , :$Str2 , #Len1 )
   let $Str1 = rtrim(ltrim($Str1 , ' ' ) , ' ' )
   let $Str01 = rtrim(substr($Str1 , 1 , #Len1) ,' ' )
   let $Str2 = lpad($Str01 , #Len1 , ' ' )
end-procedure

!************************************************************************
begin-heading 10
If $GPCH_EG_YEP_FLG <> 'Y'
  #include 'gpchut08.sqc'
  position (-1,1)
  
  !let $ReportTitle = $TITLE_STR
  if $Run_Retro_Check <> '5'
     let $ReportTitle = $TITLE_STR  || ' ' || $REVISION_STR
  else
     let $ReportTitle = $TITLE_STR
  end-if
  
  let $empl_str = $TITLE1_STR || ' ' || $Employer_Fak_Nbr
  let $fr_str = $FROM_STR || ' ' || $from_to_format
  
  print $ReportTitle (-1,)     center
    
  let $PeriodStr = $FROM_STR || ' - ' || $TO_STR
  if ($Ctl_Canton <> '') or ($Merk_Header <> 'TypeThree')
     print $empl_str (+1,)     center
  end-if
  print $fr_str   (+1,)  center
  if ($Merk_Header <> 'TypeThree')
     let #PageCounter = #PageCounter + 1
     print $HD_CANTON_PAGE (5,#RptCol)
     print #PageCounter     (,{ColM}) edit 88888888
     position (-1,1)
  end-if
evaluate $Merk_Header
  when = 'TypeOne'
  print $Cpdescr  (+1,{col1})
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
     print $FAK_CANTON_STR       (+1,{col1})
     print ' '                   (,)
     print $Canton_Name         (,)
     print $NAME1_STR            (+2,{col1})   bold
     print $PeriodStr            (,42)   bold
     position (+1,1)
     print $ENTRY_EXIT_STR       (,{col4})  bold
         position (-1,1)
     print $ACTIVITY_RATE_STR    (,{col5a},10)  bold
     print $AHV_OBLIGATORY_STR   (,{col6})    bold
     print $BUDG_FAM_STR         (,{col7})    bold
     print $CORRECTION_STR       (,{col13})    bold
     print $AHV_NR_STR           (+1,{col1})   bold
     print $SUM_SALARY_STR       (,{col6})    bold
     print $BIRTH_LBL          (+1,25)   bold

     print $CHILD1_STR           (+1,{col2})
     print $BIRTH_STR            (,{col9})
     print $CHILD_BENEF_STR      (,{col10})
     print $EDUCATION_BEN_STR    (,{col12})
     print $BIRTH_DATE_STR       (,{col3})
     print '_'                   (+1,10,119)    fill bold
   else
     print $FAK_CANTON_STR       (+1,{col1})
     print ' '                   (,)
     print $Canton_Name         (,)
     print $NAME1_STR            (+2,{col1})  bold
     print $PeriodStr            (,42) bold
     position (+1,1)
     print $ENTRY_EXIT_STR       (,{col4})  bold
         position (-1,1)
     print $ACTIVITY_RATE_STR    (,{col5a},10) bold
     print $AHV_OBLIGATORY_STR   (,{col6})    bold
     print $AHV_NR_STR           (+1,{col1})  bold
     print $SUM_SALARY_STR       (,{col61})   bold
     print $CHILD1_STR           (+1,{col2})
     print $NNSS_NR_STR           (,25)   bold
     print $BIRTH_DATE_STR       (,{col3})
     print '_'                   (+1,10,119)    fill bold
   end-if
when = 'TypeTwo'
  print $Cpdescr  (+1,{col1})
  print $FAK_CANTON_STR       (+1,{col1})
  print ' '                   (,)
  print $Canton_Name        (,)
when = 'TypeThree'
  if ($Ctl_Canton <> '')
     let #PageCounter = #PageCounter + 1
     print $HD_CANTON_PAGE (5,#RptCol)
         print #PageCounter     (,{ColM}) edit 88888888
     position (-1,1)
   end-if
   print $Cpdescr  (+1,{col1R})
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

         print $FAK_STR              (+2,{col1R})
         print ' '                   (,)
         print $RECAPITULATION_STR   (,)
         print $CANTON_STR           (+3,{col1R})  bold
         print $RUDIMENT_STR         (,18) bold
         print $SUM_SALARY_R_STR     (,{col3_R})   bold
         print $HOUSEHOLD_R_STR      (,{col4R})    bold
         print $BIRTH_STR            (,{col5R})    bold
         print $CHILD_BENEF_STR      (,{col6R})    bold
         print $EDUCATION_BEN_STR    (,{col7R})    bold
         print $CORRECTION_STR       (,{col8R})    bold

        if $language_cd = 'FRA'
             print $AHV_OBLIGATORY_T_STR1 (,{col9R})    bold
             print $AHV_OBLIGATORY_T_STR2 (+1,{col9R_1})    bold
         else 

          if $language_cd = 'GER'
            extract $AHV_GER_STRING1 from $AHV_OBLIGATORY_T_STR 0 8
            extract $AHV_GER_STRING2 from $AHV_OBLIGATORY_T_STR 9 9

            print $AHV_GER_STRING1 (,121)     bold
            print $AHV_GER_STRING2 (+1,120)    bold          
         else 

            print $AHV_OBLIGATORY_T_STR1 (,{col9R})    bold
            print $AHV_OBLIGATORY_T_STR2 (,{col9R_1})    bold
          end-if
         end-if

    else
         print $FAK_STR              (+2,{col1R})
         print ' '                   (,)
         print $RECAPITULATION_STR   (,)
         print $CANTON_STR           (+2,{col1R})     bold
         if $language_cd = 'FRA'
                        let $AHV_OBLIGATORY_T_STR = 'Salaires soumis AVS'
                        print $AHV_OBLIGATORY_T_STR   (,{col9R_1}  )    bold
         else
                        print $AHV_OBLIGATORY_T_STR1   (,{col9R}    )    bold
         end-if
         print $AHV_OBLIGATORY_T_STR2 (+1,{col9R})    bold
    end-if
         !print '_'                   (+1,10,119)    fill bold
         print '_'                   (,10,119)    fill bold
end-evaluate
end-if
end-heading
!*****************************************************************
begin-footing 9
If $GPCH_EG_YEP_FLG <> 'Y'
if $Finish_Canton = 'Y'

  DO Format-Number(#Sum_AHV_Page , $Sum_AHV_Page_1, '9,999,999,999.00')
  DO Format-Number(#Sum_House_Page , $Sum_House_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Geb_Page , $Sum_Geb_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Child_Page , $Sum_Child_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Edu_Page , $Sum_Edu_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Corr_Page , $Sum_Corr_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_FAK_Page , $Sum_FAK_Page_1, '9,999,999,999.00')
  DO Format-Number(#Sum_AHV_Can , $Sum_AHV_Can_1, '9,999,999,999.00')
  DO Format-Number(#Sum_House_Can , $Sum_House_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Geb_Can , $Sum_Geb_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Child_Can , $Sum_Child_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Edu_Can , $Sum_Edu_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Corr_Can , $Sum_Corr_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_FAK_Can , $Sum_FAK_Can_1, '9,999,999,999.00')

  if $Ctl_Canton <> 'GE'  and $Genf_Can <> 'Y'

   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
      print $Sum_AHV_Page_1       (,{col6})   bold
   end-if
   print $Sum_House_Page_1     (,{col7})   bold
   print $Sum_Corr_Page_1      (,{col13})  bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})
   print $Sum_FAK_Page_1       (,{col6})   bold

   print $SUM_TOT_STR         (+2,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Can_1        (,{col6})   bold
   end-if
   print $Sum_House_Can_1      (,{col7})   bold
   print $Sum_Corr_Can_1       (,{col13})  bold

   print $Sum_Geb_Can_1        (+1,{col9})
   print $Sum_Child_Can_1      (,{col10})
   print $Sum_Edu_Can_1        (,{col12})
   print $Sum_FAK_Can_1        (,{col6}) bold

  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})   bold
   end-if

   print $SUM_TOT_STR        (+2,{col1})
   if $Run_Retro_Check <> '5'

     print $Sum_AHV_Can_1        (,{col6})   bold
   end-if

  end-if

end-if

   DO Format-Number(#Sum_House_Page , $Sum_House_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Geb_Page , $Sum_Geb_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Child_Page , $Sum_Child_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Edu_Page , $Sum_Edu_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Corr_Page , $Sum_Corr_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_FAK_Page , $Sum_FAK_Page_1, '9,999,999,999.00')
   DO Format-Number(#Sum_AHV_Page , $Sum_AHV_Page_1, '9,999,999,999.00')

if $Finish_Canton = 'N'
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})  bold
   end-if
   print $Sum_House_Page_1     (,{col7})     bold
   print $Sum_Corr_Page_1      (,{col13})    bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})

   print $Sum_FAK_Page_1       (,{col6}) bold
  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6}) bold
   end-if

  end-if
end-if

if $Finish_Canton = 'T'
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})  bold
   end-if
   print $Sum_House_Page_1     (,{col7})     bold
   print $Sum_Corr_Page_1      (,{col13})    bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})

   print $Sum_FAK_Page_1       (,{col6})  bold
  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6}) bold
   end-if

  end-if
end-if

let #Sum_AHV_Page    = 0
let #Sum_FAK_Page    = 0
let #Sum_House_Page  = 0
let #Sum_Geb_Page    = 0
let #Sum_Child_Page  = 0
let #Sum_Edu_Page    = 0
let #Sum_Corr_Page   = 0
let #Count_EMPLID = 0
end-if
end-footing

!******************************************************************************************
begin-procedure Ask-Input
  let $Emplid-String            = ''
  let $temp-value               = ''
  let #count_Emplid             = 0
  let $Emplid_Criteria1         = ''
  let $Emplid_Criteria1_PS      = ''
  let $Emplid_Criteria1_tmp     = ''
  let $Emplid_Criteria1_tmp1    = ''

  input $Ctl_Curr_Pay_End_Dt    'Current Pay End Date ' type=date
  input $Ctl_PayEntity  'Pay Entity '        type=char      maxlen=10
more:
  input $Ask_Emplid     'EMPLID, you can select mmore again Yes(Y) No(N)'
  if $Ask_Emplid = 'Y'
         input $Ctl_Emplid  'EMPLID '
         if $Ctl_Emplid <> ''
         let $temp-value                = rtrim($Ctl_Emplid,' ')
         let $Emplid-String     = $Emplid-String || '''' || $temp-value || '''' || ','
         let #count_Emplid              = #count_Emplid + 1
         end-if
         goto more
  end-if

  if #count_Emplid <> 0
         let $Emplid-String             = rtrim($Emplid-String,',')
         let $Emplid_Criteria1          = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_PS       = ' AND PS.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_tmp      = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
  end-if

  input $Ctl_Dept_ID 'Department '
  input $Ctl_Canton 'Canton '

end-procedure Ask-Input
!******************************************************************************************
begin-procedure Get-Values

  Let $GPCH_EG_YEP_FLG = &GPCH_RUN_CNTL.GPCH_EG_YEP_FLG
  let $Ctl_Year                 = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
  let #Domainid = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID
  


    If $GPCH_EG_YEP_FLG = 'Y'
     !St Let #GPCH_EG_TRNS_SEQ             = &GPCH_RUN_CNTL.GPCH_EG_TRNS_SEQ
 !ST      do Format-Number(#GPCH_EG_TRNS_SEQ,$GPCH_EG_TRNS_SEQ,'99')
      Let $comp                  = rtrim(&GPCH_RUN_CNTL.COMPANY,' ')
     !ST Let $Type                  = 'FAK Yearly'
     let $providertype='5'
      Let $PAY_BGN_DT            = $Ctl_Year || '0101'
      do Format-DateTime($PAY_BGN_DT, $PAY_BGN_DT, {DEFCMP},'','native')
    End-If

        let $language_cd                   = RTRIM($PRCS_LANGUAGE_CD,' ')
        let $ApplyContextLanguage          = RTRIM(&GPCH_RUN_CNTL.GPCH_CONTEXT_LANG,' ')
        let $Ctl_Department_Crit           = ''
        let $Ctl_Department_Crit_PS        = ''
        let $Ctl_Department_Crit_tmp       = ''
        let $Ctl_Department_Crit_tmp1      = ''
        let $Ctl_Country_Crit              = ''
        let $Ctl_Canton_Crit               = ''
        let $Ctl_Canton_Crit_P             = ''
        let $Ctl_Canton_Crit1              = ''
        let $Genf_Crit                   = ''
        let $Ctl_Canton_CritE1          = ''
        let $Ctl_Dept_ID                   = $Ctl_Deptid
        let $Ctl_Canton                    = RTRIM(&GPCH_RUN_CNTL.GPCH_TX_CANTON,' ')
        let $Run_Retro_Check               = rtrim(&GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO,' ')

        if $Ctl_Canton <> ''
           let $Ctl_Canton_Crit            = ' AND PBD.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit_P          = ' AND PS.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit1           = ' AND CANT.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit_Ret        = ' AND AL04_12.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_CritE1          = ' AND FK2.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_CritE2          = ' AND INSD.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_CritE3          = ' AND INSPR.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_CritE4          = ' AND INSTR.STATE  = ''' || $Ctl_Canton || ''' '


        else
           let $Ctl_Canton_Crit            = ' '
           let $Ctl_Canton_Crit_P          = ' '
           let $Ctl_Canton_Crit1           = ' '
           let $Ctl_Canton_Crit_Ret        = ' '
           let $Ctl_Canton_CritE1          = ' '
           let $Ctl_Canton_CritE2          = ' '
           let $Ctl_Canton_CritE3          = ' '
           let $Ctl_Canton_CritE4          = ' '

        end-if

          let $Genf_Crit     = ' '
          let $Genf_Crit_Ret = ' '
          let $Genf_Crit1 = ' '

        if $Ctl_Dept_ID <> ''
           let $Ctl_Department_Crit          = ' AND PBD.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
           let $Ctl_Department_Crit_PS   = ' AND PS.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
           let $Ctl_Department_Crit_tmp  = ' AND PBD.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
        else
           let $Ctl_Department_Crit          = ' '
           let $Ctl_Department_Crit_PS   = ' '
           let $Ctl_Department_Crit_tmp  = ' '
        end-if
         
end-procedure
!********************************************************
begin-procedure Process-Main
do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)
do Get_Canton_Description
do SelectEmpls
if $Cal_Run_Id_M_String      <> ''
   let $Cal_Run_Id_Crit_TX02_1   = ' AND AL04_1.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
else
   let $Cal_Run_Id_Crit_TX02_1   = ' '
end-if

if $Cal_Run_Id_M_String      <> ''
   let $Cal_Run_Id_Crit_MRK   = ' AND MRK.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
else
   let $Cal_Run_Id_Crit_MRK   = ' '
end-if

let #Counter_Child = 0
let #Geb1    = 0
let #Geb2    = 0
let #Geb     = 0

let #House1  = 0
let #Birth1  = 0
let #Child_G1  = 0
let #Edu_G1  = 0
let #Child_L1  = 0
let #Edu_L1  = 0
let #Child_H1  = 0
let #Edu_H1     = 0
let #Corr1   = 0

let #House2  = 0
let #Birth2  = 0
let #Child_G2   = 0
let #Edu_G2  = 0
let #Child_L2   = 0
let #Edu_L2  = 0
let #Child_H2   = 0
let #Edu_H2     = 0
let #Corr2   = 0

  let $Ctl_Company         = $Ctl_PayEntity
  let $Ctl_Curr_Pay_End_Dt = $Ctl_End_Dt
  let $Company_Criteria_PY = ' CD.COMPANY  = ' ||''''|| $Ctl_Company ||''''
  do Get-Company-Address($Ctl_PayEntity,$Ctl_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

  do Load_Company_Description

let $Empl_ID               =  ''
let $Cal_RunID             =  ''
let #Empl_RCD              =  0
let $GP_Pay_Gr             =  ''
let $Cal_ID                =  ''
let #Rslt_Seg_Nr           =  0
let $Slice_End_DT          =  ''
let $Pay_Entity            =  ''
let $Company               =  ''
let $PRD_E_DT              =  ''
let $Cpay_E_DT             =  ''
let $RP_Year               =  ''
let $Dpt_ID                =  ''
let $Canton                =  ''
let $Hire_DT               =  ''
let $Term_DT               =  ''
let #FTE                   =  0
let #STD_Hours             =  0
let $Comp_Freq             =  ''
let #Amount1               =  0
let #Amount2               =  0
let #Amount3               =  0
let #Amount4               =  0
let #Amount5               =  0
let #Amount6               =  0
let #Amount7               =  0
let #Amount8               =  0
let #Amount9               =  0
let #Amount10              =  0

let $Canton_Name           =  ''
let $N_Id                  =  ''
let $NNSS_Id               =  ''
let $Empl_Name             =  ''
let $Canton_Old            =  ''

do Canton_Report
end-procedure

!********************************************************************************************
begin-procedure Get_End_Mnth ( $Dte1, :$Dte2 )
  do ConvertToComponents($Dte1 , $tmp1_yy , $tmp1_mm , $tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)

  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
        (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
   else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
   end-if

   let $MonthDays1 = to_char(#MonthDays1)
   let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
   do Format-DateTime($E_DT_tmp1 , $Dte2, {DEFCMP}, '', 'native')

end-procedure
!********************************************************************************************
begin-procedure Get_Beg_Mnth ( $Dte1 , :$Dte2 )
  do ConvertToComponents($Dte1 , $tmp1_yy , $tmp1_mm , $tpm1_dd)

  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1 , $Dte2, {DEFCMP}, '', 'native')
end-procedure
!*****************************************************
begin-procedure Canton_Report
let $Exist_Data          = 'N'
let #merk_found          = 0
let #Counter_tmp         = 0
let #Counter_tmp1        = 0

let #count_child_tmp  = 0
let $Merk_Retro       = 'N'
let $Merk_Header      = 'TypeOne'
let $Finish_Canton    = 'N'
let #Count_EMPLID = 0

let #AHV_PFL_Page        = 0
let #AHV_PFL_Total    = 0

let #TOT_FAK_Page     = 0
let #TOT_FAK_Total    = 0

let #HAUS_FAM_Page    = 0
let #HAUS_FAM_Total   = 0

let #GEB_Page         = 0
let #GEB_Total        = 0

let #KZUL_Page        = 0
let #KZUL_Total       = 0

let #AUSBZ_Page       = 0
let #AUSBZ_Total      = 0

let #KORR_Page        = 0
let #KORR_Total       = 0
let #PageCounter = 0
let #CantonCount = 0
let $Genf_Can = ''
do InitRekapData
do Select_Vald_Canton

end-procedure

!*************************************************************************************
begin-procedure Select_Vald_Canton
begin-select distinct
CANT.STATE
   let $Canton_id  = &CANT.STATE
   let $Actual_Can = rtrim(&CANT.STATE, ' ')
   if $Actual_Can = ''
     let $Actual_Can = ' '
   end-if

  if $Actual_Can = 'GE'
     let $Genf_Can = 'Y'
  end-if
  ! Initialize all needed variables
  let #ChildAllowance1_Total = 0
  let #ChildAllowance2_Total = 0
  let #ChildAllowance3_Total = 0
  let #ChildAllowance4_Total = 0
  let #ChildAllowance5_Total = 0

  let #ChildAllowance1_FT = 0
  let #ChildAllowance2_FT = 0
  let #ChildAllowance3_FT = 0
  let #ChildAllowance4_FT = 0
  let #ChildAllowance5_FT = 0

  let #ChildAllowance1_PT = 0
  let #ChildAllowance2_PT = 0
  let #ChildAllowance3_PT = 0
  let #ChildAllowance4_PT = 0
  let #ChildAllowance5_PT = 0

  let #ChildAllowance1_H = 0
  let #ChildAllowance2_H = 0
  let #ChildAllowance3_H = 0
  let #ChildAllowance4_H = 0
  let #ChildAllowance5_H = 0

  let #EduAllowance1_Total = 0
  let #EduAllowance2_Total = 0
  let #EduAllowance3_Total = 0
  let #EduAllowance4_Total = 0
  let #EduAllowance5_Total = 0

  let #EduAllowance1_FT = 0
  let #EduAllowance2_FT = 0
  let #EduAllowance3_FT = 0
  let #EduAllowance4_FT = 0
  let #EduAllowance5_FT = 0

  let #EduAllowance1_PT = 0
  let #EduAllowance2_PT = 0
  let #EduAllowance3_PT = 0
  let #EduAllowance4_PT = 0
  let #EduAllowance5_PT = 0

  let #EduAllowance1_H = 0
  let #EduAllowance2_H = 0
  let #EduAllowance3_H = 0
  let #EduAllowance4_H = 0
  let #EduAllowance5_H = 0

  let #TotalEmpl = 0
  let #TotalBenefEmpl = 0

  let #BirthAllowance_Counter = 0
  let #BirthAllowance_Total = 0
    
  
    do Canton_Report1
  
   if $Exst_Dat = 'Y'
     do new_canton
 If $GPCH_EG_YEP_FLG <> 'Y'
     do Print-Canton-Summary($Actual_Can,#ChildAllowance1_Total,#ChildAllowance2_Total,
              #ChildAllowance3_Total,#ChildAllowance4_Total,#ChildAllowance5_Total,
              #ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,#ChildAllowance4_FT,
              #ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,#ChildAllowance3_PT,
              #ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,#ChildAllowance2_H,
              #ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,#EduAllowance1_Total,
              #EduAllowance2_Total,#EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
              #EduAllowance1_FT,#EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,
              #EduAllowance5_FT,#EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,
              #EduAllowance4_PT,#EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,
              #EduAllowance3_H,#EduAllowance4_H,#EduAllowance5_H,#TotalEmpl,#TotalBenefEmpl,
              #BirthAllowance_Counter,#BirthAllowance_Total)
 end-if

     if ($Ctl_Canton = '')
        let #PageCounter = 0
     end-if
   end-if
   let $Genf_Can = 'N'
from PS_GPCHAL052_TMP CANT
where CANT.PROCESS_INSTANCE = #prcs_process_instance
AND   CANT.PAY_ENTITY       = $Ctl_PayEntity
[$Ctl_Canton_Crit1]
[$Genf_Crit1]
!FMB 20100511 [$canton_elm_crit]
order by CANT.STATE
end-select

if $Exist_Data = 'Y'
   if $Blank_lang = 'Y'
        do Get-Language($ReportID, $Base_Language)
   end-if
   do Total_Rekap
end-if
end-procedure


!********************************************************************************************
begin-procedure Canton_Report1
 If $GPCH_EG_YEP_FLG = 'Y'
   Let $State_Criteria = ''
   Let $Sort_Order = 'ORDER BY PBD.EMPLID,PBD.EMPL_RCD, PBD.BEGIN_DT , PBD.END_DT'
 Else
   Let $State_Criteria = 'AND   PBD.STATE =' || ''''|| $Actual_Can || ''''
 end-if
   let $Exst_Dat = 'N'
   let $Exst_Dat_Print = 'N'
   do Get_Fak_Tax_Data($Actual_Can,$Ctl_PayEntity,$Ctl_End_Dt,
                       $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                       $Tax_Language,$Employer_Tax_Nbr,#Employer_Tax_Pct,
                       #Employer_SI_Pct,$SI_AHV_MBR_ID,$SI_AHV_PROVCD,
                       $SI_KTG_MBR_ID,#SI_AHV_ADM_PC,#SI_TOT_AHV_PC,
                       #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

   let  $SPRV_TYPE = '5'
   let  $SPRV_ALL = 'Y'

   do Get-MBR-ID

 #debug show ' $MBR_ID = ' $MBR_ID

   let $Employer_Fak_Nbr = $MBR_ID


   do Get_Canton_Name
   do Get_Company_Name

   if $language_cd = ''
      do Get-Language($ReportID, $Fak_Language)
   end-if


begin-select
PBD.EMPLID
PBD.EMPL_RCD
PBD.BEGIN_DT
PBD.END_DT
PBD.PAY_ENTITY
PBD.COMPANY
PBD.DEPTID
PBD.STATE
PBD.HIRE_DT
PBD.TERMINATION_DT
PBD.FTE
PBD.STD_HOURS
PBD.COMP_FREQUENCY
PBD.GPCH_RP_AMOUNT1
PBD.GPCH_RP_AMOUNT2
PBD.GPCH_RP_AMOUNT3
PBD.GPCH_SI_FAK_PCT
PBD.GPCH_RP_AMOUNT4
PBD.GPCH_TX_STAXB_PCT
PBD.GPCH_RP_AMOUNT5
PBD.GPCH_RP_AMOUNT6
PBD.GPCH_RP_AMOUNT7
PBD.GPCH_RP_AMOUNT8
PBD.GPCH_RP_AMOUNT9
PBD.GPCH_RP_AMOUNT10
PBD.STATUS
PD.NAME
PBD.BIRTHDATE
!FMB substiuted Join to Pers_Nid by GPCH_RP_0001
PBD.NATIONAL_ID
PBD.GPCH_AH_NNSS

  let $Empl_ID               =  rtrim(&PBD.EMPLID,' ')
  let #Empl_RCD              =  &PBD.EMPL_RCD
  let $BegDate               =  &PBD.BEGIN_DT
  let $EndDate               =  &PBD.END_DT
  let $Pay_Entity            =  rtrim(&PBD.PAY_ENTITY,' ')
  let $Company               =  rtrim(&PBD.COMPANY,' ')
  let $Dpt_ID                =  rtrim(&PBD.DEPTID,' ')
  let $Canton                =  rtrim(&PBD.STATE,' ')
  let $Hire_DT               =  rtrim(&PBD.HIRE_DT ,' ')
  let $Term_DT               =  rtrim(&PBD.TERMINATION_DT ,' ')
  let #FTE                   =  &PBD.FTE
  let #STD_Hours             =  &PBD.STD_HOURS
  let $Comp_Freq             =  rtrim(&PBD.COMP_FREQUENCY,' ')
  let #Amount1               =  &PBD.GPCH_RP_AMOUNT1
  let #Amount2               =  &PBD.GPCH_RP_AMOUNT2
  let #Amount3               =  &PBD.GPCH_RP_AMOUNT3
  let #Amount4               =  &PBD.GPCH_RP_AMOUNT4
  let #Amount5               =  &PBD.GPCH_RP_AMOUNT5
  let #Amount6               =  &PBD.GPCH_RP_AMOUNT6
  let #Amount7               =  &PBD.GPCH_RP_AMOUNT7
  let #Amount8               =  &PBD.GPCH_RP_AMOUNT8
  let #Amount9               =  &PBD.GPCH_RP_AMOUNT9
  let #Amount10              =  &PBD.GPCH_RP_AMOUNT10
  LET $Status                =  rtrim(&PBD.STATUS,' ')

  let $N_Id = rtrim(ltrim(&PBD.GPCH_AH_NNSS, ' '), ' ')
  if $N_Id <> ''
    let $N_Id = edit($N_Id,'XXX.XXXX.XXXX.XX')
  else
    let $N_Id                  =  rtrim(ltrim(&PBD.NATIONAL_ID,' '),' ')
    if $N_Id <> ''
       let $N_Id = edit($N_Id,'XXX.XX.XXX.XXX')
    end-if
  end-if


  let $NNSS_Id               =  rtrim(ltrim(&PBD.GPCH_AH_NNSS,' '),' ')
  if $NNSS_Id <> ''

      let $NNSS_ID= substr($NNSS_ID,1,3)||'.'||
                       substr($NNSS_ID,4,4)||'.'||
                       substr($NNSS_ID,8,4)||'.'||
                       substr($NNSS_ID,12,2)
  end-if


  let $Empl_Name             =  rtrim(&PD.NAME,' ')
  let $Birth_DT              =  rtrim(&PBD.BIRTHDATE, ' ')

  let #Count_EMPLID = #Count_EMPLID + 1
  let $Empl_IDR               = $Empl_ID
  let #Empl_RCDR              = #Empl_RCD

  let $BegDateR               = $BegDate
  let $EndDateR               = $EndDate
  let $Pay_EntityR            = $Pay_Entity
  let $CompanyR               = $Company
  let $Dpt_IDR                = $Dpt_ID
  let $CantonR                = $Canton
  let $Hire_DTR               = $Hire_DT
  let $Term_DTR               = $Term_DT
  let #FTER                   = #FTE
  let #STD_HoursR             = #STD_Hours
  let $Comp_FreqR             = $Comp_Freq
  let #Amount1R               = #Amount1
  let #Amount2R               = #Amount2
  let #Amount3R               = #Amount3
  let #Amount4R               = #Amount4
  let #Amount5R               = #Amount5
  let #Amount6R               = #Amount6
  let #Amount7R               = #Amount7
  let #Amount8R               = #Amount8
  let #Amount9R               = #Amount9
  let #Amount10R              = #Amount10
  let $SatusR                 = $Status

  let $N_IdR                  = $N_Id
  let $NNSS_IdR               = $NNSS_Id
  let $Empl_NameR             = $Empl_Name
  let $Birth_DTR              = $Birth_DT

  let #FTER1            = #FTER * 100
  let $FTER1            = to_char(#FTER1)
  let $STD_HoursR       = to_char(#STD_HoursR)
  let $ActRate_week     = $FTER1 || '%/' || $STD_HoursR
  let $Empl_ID_PCD      = rtrim($Empl_IDR,' ')
  let #Empl_RCD_PCD     = #Empl_RCDR
  let $Canton_PCD     = rtrim($CantonR,' ')

  do Format-DateTime($EndDateR , $PRD_E_Date1, {DEFCMP}, '', '')

  if $ActionR = 'HIR'
    let $String_Before_E = 'E: '
  end-if

  if $ActionR = 'TWE'
    let $String_Before_E = 'TW: '
  end-if

  if $ActionR = 'TER'
    let $String_Before_T = 'A: '
  end-if

  !------------------------------------------------------------------------
  let $StillHired0 = 'Y'

  do Format-DateTime($BegDateR , $BgDtCmp0, {DEFCMP}, '', '')
  do Format-DateTime($EndDateR , $EdDtCmp0, {DEFCMP}, '', '')
  do Format-DateTime($Term_DTR , $TermDtCmp0, {DEFCMP}, '', '')
    
  do Format-DateTime($Term_DTR, $Term_DTR_CMP, {DEFCMP}, '', '')
  do ConvertToComponents($Term_DTR_CMP , $yy_BR_CMP , $mm_BR_CMP , $dd_BR_CMP)

  if ($TermDtCmp0 < $BgDtCmp0) and  ($TermDtCmp0 <> '' AND $yy_BR_CMP <> '1900')
     let $StillHired0 = 'N'
  end-if
  !------------------------------------------------------------------------
  
  if  ($StillHired0 = 'Y' or ($StillHired0 = 'N' and
       (#Amount1R <> 0 or #Amount2R <> 0 or
       #Amount5R <> 0 or #Amount6R <> 0)))
         do Print_Actual_Data
         do Print_Child_Data
         let $Exst_Dat = 'Y'
   end-if

   let $Empl_ID_Old      = $Empl_IDR
   let #Empl_RCD_Old      = #Empl_RCD
   let $Canton_Old       = $CantonR

   let $Empl_ID_Old  = $Empl_ID
   let $Canton_Old   = $Canton
   let $Exist_Data = 'Y'
   let #count_child_tmp  = 0
from PS_GPCHAL052_TMP PBD, {Record_Names} PD
where PBD.PROCESS_INSTANCE = #prcs_process_instance
 AND   PBD.STATE            = $Actual_Can
![$State_Criteria]
AND   PBD.EMPLID           = PD.EMPLID
AND   PBD.PAY_ENTITY       = $Ctl_PayEntity
{Record_Names_Sub}
[$Emplid_Criteria1]
[$Ctl_Department_Crit]
[$Sort_Order]
end-select



end-procedure
!******************************************************************************************
begin-procedure CheckForZeroRows
let $ZeroRowsChild = 'Y'

begin-select distinct
#ifdef ORACLE
/*+ INDEX(ZRCH PS_GPCH_RP_FK01)*/
#endif
ZRCH.GPCH_RP_AMOUNT1
ZRCH.GPCH_RP_AMOUNT2
ZRCH.GPCH_RP_AMOUNT3
ZRCH.GPCH_RP_AMOUNT4
ZRCH.GPCH_RP_AMOUNT5

  let #Amount1_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT1
  let #Amount2_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT2
  let #Amount3_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT3
  let #Amount4_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT4
  let #Amount5_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT5

  if #Amount1_ZRCH <> 0 or #Amount2_ZRCH <> 0 or #Amount3_ZRCH <> 0 or
     #Amount4_ZRCH <> 0 or #Amount5_ZRCH <> 0
         let $ZeroRowsChild = 'N'
         exit-select
  end-if
from PS_GPCH_RP_FK01 ZRCH
where (ZRCH.EMPLID        = $Empl_IDR)          AND
      (ZRCH.CAL_RUN_ID    = $Cal_RunIDR)        AND
      (ZRCH.EMPL_RCD      = #Empl_RCDR)         AND
      (ZRCH.GP_PAYGROUP   = $GP_Pay_GrR)        AND
      (ZRCH.CAL_ID        = $Cal_IDR)           AND
      (ZRCH.RSLT_SEG_NUM  = #Rslt_Seg_NrR)      AND
      (ZRCH.SLICE_END_DT  = $Slice_End_DTR)

end-select

end-procedure
!******************************************************************************************
Begin-procedure Print_Actual_Data


    let $Merk_Retro = 'N'

    do Check_Exist_Children
    
    let #mm = 3 + #count_child_tmp + #current-line
        
    if #mm > 72
       new-page
    end-if
    
    do Print_Data1
    
    let #Sum_FAK_Can   = #Sum_FAK_Can   + #Amount1R
    let #Sum_AHV_Can   = #Sum_AHV_Can   + #Amount2R
    let #Sum_House_Can = #Sum_House_Can + #Amount5R
    let #Sum_Corr_Can  = #Sum_Corr_Can  + #Amount6R

    let #Geb1     = #Geb1   +  #Amount3R
    let #Geb2     = #Geb2   +  #Amount4R
    let #House1   = #House1 +  #Amount5R
    let #House2   = #House2 +  #Amount10R
    let #Birth2   = #Birth2 +  #Amount9R

        if (#FTER >= 1) and  ($Comp_FreqR <> 'H')
           let #Child_G2 = #Child_G2 +  #Amount7R
           let #Edu_G2   = #Edu_G2   +  #Amount8R
        end-if
        
        if (#FTER < 1) and  ($Comp_FreqR <> 'H')
           let #Child_L2 = #Child_L2 +  #Amount7R
           let #Edu_L2   = #Edu_L2   +  #Amount8R
        end-if

        if ($Comp_FreqR = 'H')
           let #Child_H2 = #Child_H2 +  #Amount7R
           let #Edu_H2   = #Edu_H2   +  #Amount8R
        end-if

end-procedure
!*******************************************************************************************
begin-procedure Total_Rekap
let $Merk_Header      = 'TypeThree'
let $Finish_Canton      = 'O'
let #Sum_Amount1_Total     = 0
let #Sum_Amount2_Total     = 0
let #Sum_Amount3_Total     = 0
let #Sum_Amount4_Total     = 0
let #Sum_Amount5_Total     = 0
let #Sum_Amount6_Total     = 0
let #Sum_Amount7_Total     = 0
let #CountRekData = 0
let #ptot_year = $ptot_year

while #CountRekData < #CantonCount
   get $StateRek      from RekapData(#CountRekData) Rekap1
   get $DescrRek      from RekapData(#CountRekData) Rekap2
   get #PctRek        from RekapData(#CountRekData) Rekap3
   get #Amnt1Rek      from RekapData(#CountRekData) Rekap4
   get #Amnt2Rek      from RekapData(#CountRekData) Rekap5
   get #Amnt3Rek      from RekapData(#CountRekData) Rekap6
   get #Amnt4Rek      from RekapData(#CountRekData) Rekap7
   get #Amnt5Rek      from RekapData(#CountRekData) Rekap8
   get #Amnt6Rek      from RekapData(#CountRekData) Rekap9
   get #Amnt7Rek      from RekapData(#CountRekData) Rekap10

   DO Format-Number(#PctRek , $PctRek_1,'888.000')
   DO Format-Number(#Amnt1Rek , $Amnt1Rek_1 ,'99999999.00')
   DO Format-Number(#Amnt2Rek , $Amnt2Rek_1 ,'999999999.00')
   DO Format-Number(#Amnt3Rek , $Amnt3Rek_1 ,'99999999.00')
   DO Format-Number(#Amnt4Rek , $Amnt4Rek_1 ,'99999999.00')
   DO Format-Number(#Amnt5Rek , $Amnt5Rek_1 ,'99999999.00')
   DO Format-Number(#Amnt6Rek , $Amnt6Rek_1 ,'99999999.00')
   DO Format-Number(#Amnt7Rek , $Amnt7Rek_1 ,'9999999999.00')

   
  

  
 If $GPCH_EG_YEP_FLG <> 'Y'
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
          print $DescrRek         (+1,{col1R},15)
          print $PctRek_1           (,{col2R})
          print $Amnt1Rek_1       (,{col3R})
          print $Amnt2Rek_1       (,{col4R})
          print $Amnt3Rek_1       (,{col5R})
          print $Amnt4Rek_1       (,{col6R})
          print $Amnt5Rek_1       (,{col7R})
          print $Amnt6Rek_1       (,{col8R})
          print $Amnt7Rek_1       (,{col9R})
   else

          print $DescrRek         (+1,{col1R},15)
          print $Amnt7Rek_1       (,{col9R})
   end-if
end-if
   let #Sum_Amount1_Total = #Sum_Amount1_Total + #Amnt1Rek
   let #Sum_Amount2_Total = #Sum_Amount2_Total + #Amnt2Rek
   let #Sum_Amount3_Total = #Sum_Amount3_Total + #Amnt3Rek
   let #Sum_Amount4_Total = #Sum_Amount4_Total + #Amnt4Rek
   let #Sum_Amount5_Total = #Sum_Amount5_Total + #Amnt5Rek
   let #Sum_Amount6_Total = #Sum_Amount6_Total + #Amnt6Rek
   let #Sum_Amount7_Total = #Sum_Amount7_Total + #Amnt7Rek

   let #CountRekData = #CountRekData + 1

If $GPCH_EG_YEP_FLG = 'Y'

         if $StateRek<>'AG'and $StateRek<>'AI' and $StateRek<>'AR' and $StateRek<>'BE' and $StateRek<>'BL' and $StateRek<>'BS' and $StateRek<>'FR' and $StateRek<>'GE'
       and $StateRek<>'GL' and $StateRek<>'GR' and $StateRek<>'JU' and $StateRek<>'LU' and $StateRek<>'NE' and $StateRek<>'NW' and $StateRek<>'OW' and $StateRek<>'SG' and $StateRek<>'SH'
       and $StateRek<>'SO' and $StateRek<>'SZ' and $StateRek<>'TG' and $StateRek<>'TI' and $StateRek<>'UR' and $StateRek<>'VD' and $StateRek<>'VS' and $StateRek<>'ZG' and $StateRek<>'ZH'
       let $StateRek='EX'
      end-if

#debug show ' FMB $StateRek = ' $StateRek ' $Ctl_Canton = ' $Ctl_Canton ' $ptot_providercd = ' $ptot_providercd ' $ptot_userkey = ' $ptot_userkey
     
   Let $Total-FAK-CAF-Incomes = '<Total-FAK-CAF-ContributorySalary>' || RTRIM(LTRIM($Amnt7Rek_1,' '),' ')  || '</Total-FAK-CAF-ContributorySalary>'
   Let $Total-FAK-CAF-FamilyIncomeSupplement = '<Total-FAK-CAF-FamilyIncomeSupplement>' || RTRIM(LTRIM($Amnt1Rek_1,' '),' ')  || '</Total-FAK-CAF-FamilyIncomeSupplement>'
   Let $Canton = '<Canton>' || $StateRek  || '</Canton>'
   Let $Total-FAK-CAF-IncomesPerCanton_XML = '<Total-FAK-CAF-PerCanton>' || $Total-FAK-CAF-Incomes || $Total-FAK-CAF-FamilyIncomeSupplement || $Canton  ||  '</Total-FAK-CAF-PerCanton>'
!FMB 20100515   Let $FAK-CAF-FLG-LFA-Totals = $FAK-CAF-FLG-LFA-Totals || $Total-FAK-CAF-IncomesPerCanton_XML
   Let $FAK-CAF-FLG-LFA-Totals = $Total-FAK-CAF-IncomesPerCanton_XML
   End-If
   
   let $FAK-CAF-Totals_startTag = '<FAK-CAF-Totals'

!FMB 20100515 - begin
   
Begin-Select
PTOT2.GPCH_SI_PROV_CD
 
  let $Tstr2 = rtrim(ltrim(&PTOT2.GPCH_SI_PROV_CD, ' ' ) , ' ' )
  if $Tstr2 <> '' 
  let $FAK-CAF-Totals_startTag = $FAK-CAF-Totals_startTag || ' institutionIDRef=' || '"' || $Tstr2 || '"'
  end-if

 FROM PS_GPCH_EG_PTOTALS PTOT2
 WHERE PTOT2.COMPANY           = $Ctl_PayEntity
 AND   PTOT2.GPCH_EG_USERKEY   = $StateRek
 AND   PTOT2.GPCH_SI_PROV_TYPE = '5'
 AND   PTOT2.GPCH_RC_PAY_YEAR  = #ptot_year
 AND   PTOT2.GPCH_EG_DOMAINID  = #ptot_domainid

End-Select                                 
 
   let $FAK-CAF-Totals_startTag = $FAK-CAF-Totals_startTag || '>'
   

 If $GPCH_EG_YEP_FLG = 'Y'     
  Let $FAK-CAF-FLG-LFA-Totals_XML = $FAK-CAF-Totals_startTag || $FAK-CAF-FLG-LFA-Totals  || '</FAK-CAF-Totals>'
  Do Insert_Company_Total
 end-if
!FMB 20100515 - end

end-while



!FMB 20100515 If $GPCH_EG_YEP_FLG = 'Y'  
!FMB 20100515  Let $FAK-CAF-FLG-LFA-Totals_XML = '<FAK-CAF-FLG-LFA-Totals>' || $FAK-CAF-FLG-LFA-Totals  || '</FAK-CAF-FLG-LFA-Totals>'
!FMB 20100515  Do Insert_Company_Total
!FMB 20100515 end-if  

DO Format-Number(#Sum_Amount1_Total , $Sum_Amount1_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount2_Total , $Sum_Amount2_Total_1, '999,999,999.00')
DO Format-Number(#Sum_Amount3_Total , $Sum_Amount3_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount4_Total , $Sum_Amount4_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount5_Total , $Sum_Amount5_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount6_Total , $Sum_Amount6_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount7_Total , $Sum_Amount7_Total_1, '9,999,999,999.00')
If $GPCH_EG_YEP_FLG <> 'Y'

if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
  print '_'                     (+1,10,119)  fill
  print $SUM_TOT_STR            (+1,{col1R})
  print $Sum_Amount1_Total_1    (,{col3R})
  print $Sum_Amount2_Total_1    (,{col4R})
  print $Sum_Amount3_Total_1    (,{col5R})
  print $Sum_Amount4_Total_1    (,{col6R})
  print $Sum_Amount5_Total_1    (,{col7R})
  print $Sum_Amount6_Total_1    (,{col8R})
  print $Sum_Amount7_Total_1    (,{col9R})
else
  print '_'                     (+1,10,119)   fill
  print $SUM_TOT_STR            (+1,{col1R})
  print $Sum_Amount7_Total_1    (,{col9R})
end-if
end-If
end-procedure
!*********************************************************************************************
Begin-Procedure Insert_Company_Total
 
 Let $Ctl_Year = RTRIM(LTRIM($Ctl_Year,' '),' ')

Begin-Sql on-error=give_warning
Update  PS_GPCH_EG_PTOTALS set  GPCH_EG_CMP_XML= $FAK-CAF-FLG-LFA-Totals_XML where GPCH_SI_PROV_TYPE = '5'   AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company   
AND GPCH_EG_DOMAINID = #ptot_domainid AND GPCH_SI_PROV_CD = $Tstr2 !FMB 20100515
End-SQL

End-Procedure
!*********************************************************************************************

begin-procedure Print_Data1
#debug show '-> Print_Data1 ' $Empl_NameR ' , ' $Comp_FreqR ' , ' $ActRate_week

   add 1 to #TotalEmpl
   
   if ($TermDtCmp0 >= $BgDtCmp0) and ($TermDtCmp0 <= $EdDtCmp0) and  ($TermDtCmp0 <> '')
          let $EndDateRD = $Term_DTR
   else
          let $EndDateRD = $EndDateR
   end-if
   If $GPCH_EG_YEP_FLG <> 'Y'
if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
else
   
   do Format-DateTime($Hire_DTR, $Hire_DTR1, {DEFDATE}, '', '')
   do Format-DateTime($Term_DTR, $Term_DTR1, {DEFDATE}, '', '')
   do ConvertToComponents($BegDateR , $yy_BR , $mm_BR , $dd_BR)
   do ConvertToComponents($EndDateRD , $yy_ER , $mm_ER , $dd_ER)
   
   print  $Empl_NameR            (+2,{col1})          bold

!FMB 20070817ff
#debug show ' $TO_STR = ' $TO_STR ' $Term_DTR1 = ' $Term_DTR1 ' $Empl_NameR = ' $Empl_NameR ' $Ctl_End_Dt = ' $Ctl_End_Dt

!FMB 20070928 Begin
  do ConvertToComponents($Ctl_End_Dt , $yy_Ctl , $mm_Ctl , $dd_Ctl)
!previous year terminated

do Format-DateTime($Term_DTR, $Term_DTR_CMP, {DEFCMP}, '', '')
do ConvertToComponents($Term_DTR_CMP , $yy_BR_CMP , $mm_BR_CMP , $dd_BR_CMP)

if ($Term_DTR1 <> '' and $yy_BR_CMP  <> '1900') and substr($Term_DTR1,7,4) < $yy_Ctl
   print $Term_DTR1              (,42) 

!current year active, take from .. to .. as of print
else
 
   let $B_DDMM = $dd_BR || '.' ||$mm_BR
   let $E_DDMM = $dd_ER || '.' ||$mm_ER

   print  $B_DDMM                (,42)                bold
   print  ' - '                  (,)                  bold
   print  $E_DDMM                (,)                  bold

end-if

   position (+1,1)
   print  $Hire_DTR1             (,{col4})            bold
   print  ' /'                   (,)                  bold

  if ($Term_DTR1 <> '' and $yy_BR_CMP <> '1900') 
   print  $Term_DTR1             (,)                  bold
  end-if
   position (-1,1)
   
   if $Comp_FreqR <> 'H'
      print  $ActRate_week          (,{col5a})        bold
   end-if
   
end-if

let #Sum_AHV_Page   = #Sum_AHV_Page   + #Amount2R
let #Sum_House_Page = #Sum_House_Page + #Amount5R
let #Sum_Corr_Page  = #Sum_Corr_Page  + #Amount6R

if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
!rem if #count_child_tmp = 0 ! if $Run_Retro_Check = '5' and

else
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
      DO Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
      DO Format-Number(#Amount5R , $Amount5R_1, '99,999,999.00')
      DO Format-Number(#Amount6R , $Amount6R_1, '99,999,999.00')

      print $Amount5R_1             (,{col7})      bold
      print $Amount6R_1             (,{col13})      bold

          if $Run_Retro_Check <> '5'
             print $Amount2R_1             (,{col6})            bold
          end-if
   else
          if $Run_Retro_Check <> '5'
              do Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
              print $Amount2R_1             (,{col6})            bold
          end-if
   end-if

   if $NNSS_IdR <> ''
      print $NNSS_IdR              (+1,{col1})  bold
      
   else
      print $N_IdR                (+1,{col1})  bold
   end-if

   do Format-DateTime($Birth_DT, $Birth_DT_formatted, {DEFDATE}, '', '')
   print $Birth_DT_formatted  (+1, 25)   bold


end-if

let #Sum_FAK_Page = #Sum_FAK_Page + #Amount1R

if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
! if #count_child_tmp = 0    ! if $Run_Retro_Check = '5' and
else
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
      DO Format-Number(#Amount1R , $Amount1R_1, '9,999,999,999.00')
    !  if $Run_Retro_Check <> '5'
          print $Amount1R_1             (,{col6})           bold
    !  end-if
   end-if
end-if
 Else
            
        
   do Format-DateTime($Hire_DTR, $Hire_DTR1, {DEFDATE}, '', '')
   do Format-DateTime($Term_DTR, $Term_DTR1, {DEFDATE}, '', '')
   do ConvertToComponents($BegDateR , $yy_BR , $mm_BR , $dd_BR)
   do ConvertToComponents($EndDateRD , $yy_ER , $mm_ER , $dd_ER)
   do Format-Number(#Amount1R , $Amount1R_1, '9999999999.00')
   do Format-Number(#Amount2R , $Amount2R_1, '9999999999.00')        
   
    
 if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
 Else
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

     Do FAK_EMPLOYEE_XML
  End-IF
 End-If
  
  
 End-if

end-procedure
!***********************************sps changes*********************************************************
Begin-Procedure Insrert_PS_GPCHFK01_TMP03
#debug show 'In Insrert_PS_GPCHFK01_TMP03 '

Begin-Sql on-error=give_warning
delete from PS_GPCHFK01_TMP03
end-sql

Begin-Sql on-error=give_warning
delete from PS_GPCHDEP_TMP
end-sql

let $Cal_Run_Id_Criteria = ' AND FK01.ORIG_CAL_RUN_ID   IN (' || $Cal_Run_Id_String || ')'

Begin-Sql on-error=give_warning
insert into PS_GPCHFK01_TMP03 (PROCESS_INSTANCE,EMPLID,CAL_RUN_ID,EMPL_RCD,GP_PAYGROUP,CAL_ID,ORIG_CAL_RUN_ID,RSLT_SEG_NUM,SLICE_END_DT,SEG_BGN_DT,PAY_ENTITY
,COMPANY,PRD_END_DT,GPCH_AL_CPAY_ENDDT,GPCH_RP_YEAR,DEPENDENT_BENEF,BIRTHDATE,GPCH_CA_EDU_END_DT,NAME,SEX,STUDENT,DISABLED,SEQ_NO,GPCH_RP_AMOUNT1,GPCH_RP_AMOUNT2
,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4,GPCH_RP_AMOUNT5,STATUS,NATIONAL_ID,RELATIONSHIP)

SELECT [$prcs_process_instance], FK01.EMPLID, FK01.CAL_RUN_ID, FK01.EMPL_RCD, FK01.GP_PAYGROUP, FK01.CAL_ID, FK01.ORIG_CAL_RUN_ID, FK01.RSLT_SEG_NUM
, FK01.SLICE_END_DT, FK01.SEG_BGN_DT, FK01.PAY_ENTITY, FK01.COMPANY, FK01.PRD_END_DT, FK01.GPCH_AL_CPAY_ENDDT, FK01.GPCH_RP_YEAR, FK01.DEPENDENT_BENEF
, FK01.BIRTHDATE, FK01.GPCH_CA_EDU_END_DT, FK01.NAME,BEN_EFF.SEX, FK01.STUDENT, FK01.DISABLED, FK01.SEQ_NO, FK01.GPCH_RP_AMOUNT1, FK01.GPCH_RP_AMOUNT2
,FK01.GPCH_RP_AMOUNT3, FK01.GPCH_RP_AMOUNT4, FK01.GPCH_RP_AMOUNT5, FK01.STATUS,NID.NATIONAL_ID, BEN_EFF.RELATIONSHIP
FROM PS_GPCH_RP_FK01 FK01, PS_DEP_BEN_EFF BEN_EFF, PS_DEP_BENEF_NID NID
WHERE FK01.EMPLID = $Empl_IDR AND FK01.EMPLID = BEN_EFF.EMPLID AND FK01.EMPLID = NID.EMPLID AND FK01.EMPL_RCD = #Empl_RCDR [$Cal_Run_Id_Criteria] 
AND FK01.DEPENDENT_BENEF = BEN_EFF.DEPENDENT_BENEF AND FK01.DEPENDENT_BENEF = NID.DEPENDENT_BENEF 
AND FK01.GPCH_AL_CPAY_ENDDT IN (SELECT MAX(FK01_1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_FK01 FK01_1 WHERE FK01_1.EMPLID = FK01.EMPLID 
AND FK01_1.ORIG_CAL_RUN_ID = FK01.ORIG_CAL_RUN_ID AND FK01_1.GPCH_AL_CPAY_ENDDT <= $EndDateR)
and BEN_EFF.EFFDT = (SELECT MAX(BEN_EFFT.EFFDT) FROM  PS_DEP_BEN_EFF BEN_EFFT where BEN_EFFT.EMPLID = BEN_EFF.EMPLID AND BEN_EFFT.DEPENDENT_BENEF = BEN_EFF.DEPENDENT_BENEF 
AND BEN_EFFT.EFFDT <= $EndDateR)
end-sql
 
Begin-Sql on-error=give_warning
insert into PS_GPCHDEP_TMP (DEPENDENT_BENEF,GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4)

SELECT TMP03.DEPENDENT_BENEF,SUM(TMP03.GPCH_RP_AMOUNT2),SUM(TMP03.GPCH_RP_AMOUNT3),SUM(TMP03.GPCH_RP_AMOUNT4)
FROM PS_GPCHFK01_TMP03 TMP03
GROUP BY TMP03.DEPENDENT_BENEF
end-sql

Begin-Sql on-error=give_warning
#ifdef ORACLE
commit
#endif
end-sql

#debug show 'Out Insrert_PS_GPCHFK01_TMP03 '

End-Procedure
!********************************************************************************************
Begin-Procedure Insert_FamilyIncomePerChildPeriod
#debug show ' -> Insert_FamilyIncomePerChildPeriod $EndDateR ' $EndDateR ' $Empl_IDR ' $Empl_IDR ' #Empl_RCDR ' #Empl_RCDR ' $CurrDependent  ' $CurrDependent

let $FamilyIncomePerChildPeriod = ''
Begin-Select
DEP_BEN.BIRTHDATE
DATA2.GPCH_CA_LEGAL_END
DATA2.GPCH_CA_EDU_END_DT

  let $PeriodFrom = rtrim(&DEP_BEN.BIRTHDATE,' ')
  let $LegalEndDate = rtrim(&DATA2.GPCH_CA_LEGAL_END,' ')
  let $ReducedEndDate = rtrim(&DATA2.GPCH_CA_EDU_END_DT,' ')
  
   
  If $PeriodFrom >= $From_Date and $PeriodFrom <=$To_Date
     do ConvertToComponents($PeriodFrom , $yy_Ctl , $mm_Ctl , $dd_Ctl)
     let $FamilyIncomePerChildPeriod = '<from>' || $yy_Ctl || '-' || $mm_Ctl || '-' || $dd_Ctl || '</from>'
  Else
     If $PeriodFrom < $From_Date
        let $FamilyIncomePerChildPeriod = '<from>' || $From_Date || '</from>'
     End-If
  End-If   
     
  If $ReducedEndDate = ''
     let $PeriodTo = $LegalEndDate
  Else
     let $PeriodTo = $ReducedEndDate
  End-If
  
  If $PeriodTo <=$To_Date
     do ConvertToComponents($PeriodTo, $yy_Ctl , $mm_Ctl , $dd_Ctl)
     let $FamilyIncomePerChildPeriod = $FamilyIncomePerChildPeriod || '<until>' || $yy_Ctl || '-' || $mm_Ctl || '-' || $dd_Ctl || '</until>'
  Else
     let $FamilyIncomePerChildPeriod = $FamilyIncomePerChildPeriod || '<until>' || $To_Date || '</until>'
  End-If
  
  If $FamilyIncomePerChildPeriod <> ''
     let $FamilyIncomePerChild = $FamilyIncomePerChild ||'<FamilyIncomePerChildPeriod>' || $FamilyIncomePerChildPeriod || '</FamilyIncomePerChildPeriod>' 
  Else 
   let $FamilyIncomePerChild = ''
  End-If
  
FROM PS_GPCH_CA_DATA2 DATA2,PS_DEP_BEN DEP_BEN
WHERE DATA2.EMPLID = $Empl_IDR AND DATA2.EMPLID = DEP_BEN.EMPLID AND DATA2.DEPENDENT_BENEF = $CurrDependent 
AND DATA2.DEPENDENT_BENEF = DEP_BEN.DEPENDENT_BENEF AND DATA2.EFFDT = (SELECT MAX(DATA2_T.EFFDT) FROM PS_GPCH_CA_DATA2 DATA2_T 
WHERE DATA2.EMPLID = DATA2_T.EMPLID AND DATA2.EMPL_RCD = DATA2_T.EMPL_RCD AND DATA2_T.EFFDT <= $EndDateR)
End-Select
End-Procedure
!********************************************************************************************
Begin-Procedure determine_relationship
Begin-Select
PERS.SEX
  let $Parent_Sex = rtrim(&PERS.SEX,' ')
  If $Relationship = 'C'
     If $Parent_Sex = 'F'
        let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'mother'||'</FamilyStatus>'
     Else
        let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'father'||'</FamilyStatus>'
     End-If
  Else
     If $Relationship = 'FC'
        If $Parent_Sex = 'F'
           let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'fosterMother'||'</FamilyStatus>'
        Else
           let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'fosterFather'||'</FamilyStatus>'
        End-If
     Else
        If $Relationship = 'SC'
           If $Parent_Sex = 'F'
              let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'stepmother'||'</FamilyStatus>'
           Else
              let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'stepfather'||'</FamilyStatus>'
           End-If
        Else
           If $Relationship = 'GC' 
              If $Parent_Sex = 'F'
                 let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'grandmother'||'</FamilyStatus>'
              Else
                 let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'grandfather'||'</FamilyStatus>'
              End-If
           Else
              If $Relationship = 'SB' 
                 If $Parent_Sex = 'F'
                    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'sister'||'</FamilyStatus>'
                 Else
                    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyStatus>' || 'brother'||'</FamilyStatus>'
                 End-If
              End-If
           End-If
        End-If
     End-If
  End-If
         
FROM PS_PERS_DATA_EFFDT PERS
WHERE PERS.EMPLID = $Empl_IDR
AND PERS.EFFDT = (SELECT MAX(PERS_1.EFFDT) FROM PS_PERS_DATA_EFFDT PERS_1 WHERE PERS_1.EMPLID = PERS.EMPLID AND PERS_1.EFFDT <= $EndDateR)
End-select
End-Procedure

!*********************************sps changes end********************************************
!********************************************************************************************
Begin-Procedure FAK_EMPLOYEE_XML
#debug show 'In FAK_EMPLOYEE_XML'
let #ptot_year = $ptot_year

  If $Empl_ID <> $Empl_processed 

    Let $FAK-CAF-Salary = ''
    Let $FAK-CAF-Salaries = ''

  End-If

!FMB 20070928 Begin

#debug show ' $TO_STR = ' $TO_STR ' $Term_DTR1 = ' $Term_DTR1 ' $Empl_NameR = ' $Empl_NameR ' $Ctl_End_Dt = ' $Ctl_End_Dt


! FMB 20071111 Begin

  do ConvertToComponents($Ctl_End_Dt , $yy_Ctl , $mm_Ctl , $dd_Ctl)
  
#debug show 'After ConvertToComponents $Ctl_End_Dt'

!previous year terminated

do Format-DateTime($Term_DTR, $Term_DTR_CMP, {DEFCMP}, '', '')
do ConvertToComponents($Term_DTR_CMP, $yy_BR_CMP , $mm_BR_CMP , $dd_BR_CMP)

#debug show 'After ConvertToComponents $Term_DTR_CMP'

if ($Term_DTR1 <> '' and $yy_BR_CMP <> '1900') and substr($Term_DTR1,7,4) < $yy_Ctl
   Let $To_Date = substr($Term_DTR1,7,4) ||'-' ||substr($Term_DTR1,4,2) ||'-' ||substr($Term_DTR1,1,2)
  If substr($Hire_DTR1,7,4) < substr($Term_DTR1,7,4)
   Let $From_Date = substr($Term_DTR1,7,4) ||'-01-01' 
  else
      Let $From_Date = substr($Hire_DTR1,7,4) ||'-' ||substr($Hire_DTR1,4,2) ||'-' ||substr($Hire_DTR1,1,2)

  end-if
!current year active, take from .. to .. as of print
else
 Let $From_Date = $yy_Ctl ||'-' ||$mm_BR ||'-' ||$dd_BR
 Let $To_Date = $yy_Ctl ||'-' ||$mm_ER ||'-' ||$dd_ER
End-If

#debug show 'After Let $To_Date '
   
  if $Canton<>'AG'and $Canton<>'AI' and $Canton<>'AR' and $Canton<>'BE' and $Canton<>'BL' and $Canton<>'BS' and $Canton<>'FR' and $Canton<>'GE'
       and $Canton<>'GL' and $Canton<>'GR' and $Canton<>'JU' and $Canton<>'LU' and $Canton<>'NE' and $Canton<>'NW' and $Canton<>'OW' and $Canton<>'SG' and $Canton<>'SH'
       and $Canton<>'SO' and $Canton<>'SZ' and $Canton<>'TG' and $Canton<>'TI' and $Canton<>'UR' and $Canton<>'VD' and $Canton<>'VS' and $Canton<>'ZG' and $Canton<>'ZH'
       let $Canton='EX'
      end-if

!FMB 20070928 End 

  Let $FAK-CAF-Period = '<FAK-CAF-Period>' || '<from>' || $From_Date || '</from>'|| '<until>' || $To_Date  || '</until>' || '</FAK-CAF-Period>'
  Let $FAK-CAF-ContributorySalary = '<FAK-CAF-ContributorySalary>' ||RTRIM(LTRIM($Amount2R_1,' '),' ')|| '</FAK-CAF-ContributorySalary>'
  Let $FAK-CAF-FamilyIncomeSupplement = ''
  !sps changes
  !If #Amount1R <> 0.00

  !Let $FAK-CAF-FamilyIncomeSupplement = '<FAK-CAF-FamilyIncomeSupplement>' || RTRIM(LTRIM($Amount1R_1,' '),' ')  || '</FAK-CAF-FamilyIncomeSupplement>'
   !End-IF
  let #FamilySupp_tmp = #Amount5R + #Amount10R  
  DO Format-Number(#FamilySupp_tmp , $FamilySupplement , '999999999.00')
  let $FamilySupplement = RTRIM(LTRIM($FamilySupplement,' '),' ')
  if #FamilySupp_tmp <> 0
     let $FamilyIncomeSupplementRepetitive = '<FamilyIncomeSupplementRepetitive>' || $FamilySupplement || '</FamilyIncomeSupplementRepetitive>'
  else
     let $FamilyIncomeSupplementRepetitive = ''
  end-if
 #debug show 'Before Insrert_PS_GPCHFK01_TMP03 '
     !sps populate PS_GPCHFK01_TMP03 from PS_GPCH_RP_FK02, PS_DEP_BEN_EFF (FOR RELATIONSHIP), AND PS_DEP_BENEF_NID (FOR NNSS), need another table for dates.
     do Insrert_PS_GPCHFK01_TMP03
 
     let $FamilyIncomePerChild = '' 
     
#debug show 'Before Select from PS_GPCHFK01_TMP03 TMP01_01, PS_GPCHDEP_TMP TMP_02'

Begin-Select DISTINCT
TMP01_01.DEPENDENT_BENEF
TMP01_01.EMPLID
TMP01_01.BIRTHDATE
TMP01_01.NAME
TMP01_01.SEX
TMP01_01.NATIONAL_ID
TMP01_01.RELATIONSHIP
TMP_02.GPCH_RP_AMOUNT2
TMP_02.GPCH_RP_AMOUNT3
TMP_02.GPCH_RP_AMOUNT4 
  
  let $CurrDependent = &TMP01_01.DEPENDENT_BENEF
  let $Name = &TMP01_01.NAME
  let $Sex = rtrim(&TMP01_01.SEX,' ')
  let $DateOfBirth1 = rtrim(&TMP01_01.BIRTHDATE,' ')
  find ' ' in $DateOfBirth1 0 #locn
  extract $DateOfBirth from $DateOfBirth1 0 #locn
  !FMB 20100515
  do ConvertToComponents($DateOfBirth1 , $yy_Ctl , $mm_Ctl , $dd_Ctl)
  let $DateOfBirth = $yy_Ctl || '-' || $mm_Ctl || '-' || $dd_Ctl 
  
  let $SV-AS-Number1 = rtrim(&TMP01_01.NATIONAL_ID,' ')
  let $SV-AS-Number = substr($SV-AS-Number1,0,3) || '.' || substr($SV-AS-Number1,4,4) || '.' || substr($SV-AS-Number1,8,4) || '.' || substr($SV-AS-Number1,12,2)
  let #amt2 = &TMP_02.GPCH_RP_AMOUNT2
  let #amt3 = &TMP_02.GPCH_RP_AMOUNT3
  let #amt4 = &TMP_02.GPCH_RP_AMOUNT4
  let $Relationship = rtrim(&TMP01_01.RELATIONSHIP,' ')
  
  let #FamilyIncome_tmp = #amt3+#amt4  
  DO Format-Number(#FamilyIncome_tmp , $FamilyIncome , '999999999.00')
  let $FamilyIncome = RTRIM(LTRIM($FamilyIncome,' '),' ')
  DO Format-Number(#amt2 , $SingularIncome , '999999999.00')
  let $SingularIncome = RTRIM(LTRIM($SingularIncome,' '),' ')
  !SHOW 'SPS #amt2+#amt3+#amt4 ' $FamilyIncome1 ' '$FamilyIncome2 ' ' $FamilyIncome3 ' ' $FamilyIncome
  
  !find last name
  let $Name = rtrim($Name,' ')
  find ',' in $Name 0 #locn
  extract $LastName from $Name 0 #locn

  !find first name
  add 2 to #locn
  let $Name = substr($Name,#locn,50 - #locn)
  find ',' in $Name 0 #locn
  if #locn <> -1
    extract $FirstName from $Name 0 #locn
    add 1 to #locn
    extract $PrefixName from $Name #locn 50
  else
    let $Firstname = $Name
    let $PrefixName = ''
  end-if
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyIncomePerChild>'
    do Insert_FamilyIncomePerChildPeriod
    let $FamilyIncomePerChild = $FamilyIncomePerChild ||'<Lastname>' || $LastName || '</Lastname>' 
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<Firstname>' || $Firstname || '</Firstname>' 
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<Sex>' || $Sex || '</Sex>'
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<DateOfBirth>' || $DateOfBirth || '</DateOfBirth>'
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<SV-AS-Number>' || $SV-AS-Number || '</SV-AS-Number>'
    do determine_relationship
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyIncome>' || $FamilyIncome || '</FamilyIncome>'
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '<FamilyIncomeSupplementSingular>' || $SingularIncome || '</FamilyIncomeSupplementSingular>'
    let $FamilyIncomePerChild = $FamilyIncomePerChild || '</FamilyIncomePerChild>'   
    !show 'sps $FamilyIncomePerChild ' $FamilyIncomePerChild

FROM  PS_GPCHFK01_TMP03 TMP01_01, PS_GPCHDEP_TMP TMP_02 
WHERE TMP01_01.DEPENDENT_BENEF = TMP_02.DEPENDENT_BENEF
order by TMP01_01.DEPENDENT_BENEF
End-Select

#debug show 'After Select from PS_GPCHFK01_TMP03 TMP01_01, PS_GPCHDEP_TMP TMP_02'

  !let $FamilyIncomePerChild = '<FamilyIncomePerChild>' || $FamilyIncomePerChild || '</FamilyIncomePerChild>'
  if $FamilyIncomePerChild <> ''
     let $FamilyIncomePerChildren = '<FamilyIncomePerChildren>' || $FamilyIncomePerChild || '</FamilyIncomePerChildren>'
  else 
     let $FamilyIncomePerChildren = ''
  end-if
  if $FamilyIncomeSupplementRepetitive <> '' or $FamilyIncomePerChildren <>''
     Let $FAK-CAF-FamilyIncomeSupplement = '<FAK-CAF-FamilyIncomeSupplement>' || '<FAK-CAF-FamilyIncomeSupplementDetail>' 
     Let $FAK-CAF-FamilyIncomeSupplement = $FAK-CAF-FamilyIncomeSupplement || $FamilyIncomeSupplementRepetitive || $FamilyIncomePerChildren || '</FAK-CAF-FamilyIncomeSupplementDetail>' || '</FAK-CAF-FamilyIncomeSupplement>'
  else
     Let $FAK-CAF-FamilyIncomeSupplement = ''
  end-if
  Let $FAK-CAF-WorkplaceCanton = '<FAK-CAF-WorkplaceCanton>' || $CantonR || '</FAK-CAF-WorkplaceCanton>'

  let $FAK-CAF-Salary_startTag = '<FAK-CAF-Salary'
  
!FMB 20100515 - begin                                   
Begin-Select
PTOT1.GPCH_SI_PROV_CD
 
  let $Tstr1 = rtrim(ltrim(&PTOT1.GPCH_SI_PROV_CD, ' ' ) , ' ' )
  if $Tstr1 <> '' 
  let $FAK-CAF-Salary_startTag = $FAK-CAF-Salary_startTag || ' institutionIDRef=' || '"' || $Tstr1 || '"'
  end-if

 FROM PS_GPCH_EG_PTOTALS PTOT1
 WHERE PTOT1.COMPANY           = $Ctl_PayEntity
 AND   PTOT1.GPCH_EG_USERKEY   = $CantonR
 AND   PTOT1.GPCH_SI_PROV_TYPE = '5'
 AND   PTOT1.GPCH_RC_PAY_YEAR  = #ptot_year
 AND   PTOT1.GPCH_EG_DOMAINID  = #ptot_domainid
 
End-Select
#debug show 'After Select from PS_GPCH_EG_PTOTALS PTOT1'

!FMB 20100515 - end  

  let $FAK-CAF-Salary_startTag = $FAK-CAF-Salary_startTag || '>'
  !sps changes end
  
  Let $FAK-CAF-Salary =  $FAK-CAF-Salary || $FAK-CAF-Salary_startTag || $FAK-CAF-Period || $FAK-CAF-ContributorySalary || $FAK-CAF-FamilyIncomeSupplement || $FAK-CAF-WorkplaceCanton  || '</FAK-CAF-Salary>'

  Let $FAK-CAF-Salaries = '<FAK-CAF-Salaries>' || $FAK-CAF-Salary || '</FAK-CAF-Salaries>'
!FMB 20090103
let #Ctl_Year = $Ctl_Year
Begin-Select
A.GPCH_EG_PRSN_XML 

  Let $EMployee_FAK_XML = Rtrim(Ltrim(&A.GPCH_EG_PRSN_XML,' '),' ')
    Let $EMployee_FAK_XML= replace($EMployee_FAK_XML,'</FAK-CAF-Salaries>','')
     Let $EMployee_FAK_XML= replace($EMployee_FAK_XML,'<FAK-CAF-Salaries>','')
    
FROM PS_GPCH_EG_PERSON A
where A.GPCH_EG_DOMAINID= #ptot_domainid
!ST WHERE A.GPCH_EG_TRNS_SEQ = $GPCH_EG_TRNS_SEQ
!FMB 20090103 AND A.GPCH_RC_PAY_YEAR = $Ctl_Year 
AND A.GPCH_RC_PAY_YEAR = #Ctl_Year
!FMB 20110407 AND A.GPCH_RC_PAY_YEAR = $Ctl_Year 
AND A.COMPANY = $comp
!ST AND A.GPCH_EG_RPT_NAME = $Type
AND A.EMPLID = $Empl_ID 
AND A.EMPL_RCD = #Empl_RCD
AND GPCH_SI_PROV_TYPE='5'
End-Select

#debug show 'After Select from PS_GPCH_EG_PERSON A'
 
if $EMployee_FAK_XML<>''
   Let $FAK-CAF-Salaries=replace($FAK-CAF-Salaries,'</FAK-CAF-Salaries>','')
   Let $FAK-CAF-Salaries= replace($FAK-CAF-Salaries,'<FAK-CAF-Salaries>','')
  Let $FAK-CAF-Salaries=$EMployee_FAK_XML||$FAK-CAF-Salaries
  Let $FAK-CAF-Salaries='<FAK-CAF-Salaries>' || $FAK-CAF-Salaries || '</FAK-CAF-Salaries>'
   let $EMployee_FAK_XML=''
  
  end-if

! FMB 20070423
 
 If $GPCH_EG_YEP_FLG = 'Y'
  Do Insert_FAK_EMPLOYEE_XML
 End-If

  Let $Empl_processed = $Empl_ID
  Let $FAK-CAF-Salaries=''
  Let $EMployee_FAK_XML=''
  let $FAK-CAF-Salary =''
 
#debug show 'Out FAK_EMPLOYEE_XML'
End-Procedure
!********************************************************************************************
Begin-Procedure Insert_FAK_EMPLOYEE_XML

!St  DO Format-Number(#GPCH_EG_TRNS_SEQ , $GPCH_EG_TRNS_SEQ ,'99')

!ST  Let $GPCH_EG_TRNS_SEQ = RTRIM(LTRIM($GPCH_EG_TRNS_SEQ,' '),' ')

 !FMB 20090103
let #ptot_year = $ptot_year 


Begin-Sql on-error=give_warning

 !ST DELETE FROM PS_GPCH_EG_PERSON WHERE GPCH_EG_TRNS_SEQ = $GPCH_EG_TRNS_SEQ AND GPCH_RC_PAY_YEAR = $Ctl_Year AND COMPANY = $comp AND GPCH_EG_RPT_NAME = $Type AND EMPLID = $Empl_ID AND EMPL_RCD = #Empl_RCD
 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company AND  EMPLID = $Empl_ID AND EMPL_RCD = #E_RCD AND GPCH_SI_PROV_TYPE='5'
End-SQL




Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,#ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$Empl_ID,#E_RCD,$PAY_BGN_DT,$Ctl_End_Dt,1,$FAK-CAF-Salaries)

 
End-SQL


End-Procedure
!*********************************************************************************************
begin-procedure Print_Child_Data
#Debug show '-> Print_Child_Data ' $Empl_IDR ' , ' #count_child_tmp ' , ' $BegDateR ' , ' $EndDateR
let #count_child_tmp = 0

let $EmplHasBenef = 'N'

begin-select
AL04_4R.EMPLID
AL04_4R.EMPL_RCD
AL04_4R.PAY_ENTITY
AL04_4R.COMPANY
AL04_4R.DEPENDENT_BENEF
AL04_4R.BIRTHDATE
AL04_4R.GPCH_CA_EDU_END_DT
AL04_4R.NAME
AL04_4R.STUDENT
AL04_4R.DISABLED
AL04_4R.SEQ_NO
AL04_4R.GPCH_RP_AMOUNT1
AL04_4R.GPCH_RP_AMOUNT2
AL04_4R.GPCH_RP_AMOUNT3
AL04_4R.GPCH_RP_AMOUNT4
AL04_4R.GPCH_RP_AMOUNT5

  let #count_child_tmp      =  #count_child_tmp + 1
  let $count_child_tmp    =  to_char(#count_child_tmp)
  let $count_child_tmp    =  $count_child_tmp || '. '
  let $Empl_ID_AL04_4R          =  rtrim(&AL04_4R.EMPLID,' ')
  let #Empl_RCD_AL04_4R         =  &AL04_4R.EMPL_RCD
  let $Pay_Entity_AL04_4R       =  rtrim(&AL04_4R.PAY_ENTITY,' ')
  let $Company_AL04_4R          =  rtrim(&AL04_4R.COMPANY,' ')
  let $Dependent_AL04_4R        =  rtrim(&AL04_4R.DEPENDENT_BENEF,' ')
  let $Birth_DT_AL04_4R         =  rtrim(&AL04_4R.BIRTHDATE,' ')
  let $Edu_End_DT_AL04_4R       =  rtrim(&AL04_4R.GPCH_CA_EDU_END_DT,' ')
  let $Name_AL04_4R             =  rtrim(&AL04_4R.NAME,' ')
  let $Student_AL04_4R          =  rtrim(&AL04_4R.STUDENT,' ')
  let $Disabled_AL04_4R         =  rtrim(&AL04_4R.DISABLED,' ')
  let #Sequence_AL04_4R         =  &AL04_4R.SEQ_NO
  let #Amount1_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT1
  let #Amount2_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT2
  let #Amount3_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT3
  let #Amount4_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT4
  let #Amount5_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT5
  let $count_child_tmp    =  $count_child_tmp || $Name_AL04_4R

  if #Amount2_AL04_4R > 0
     or #Amount3_AL04_4R > 0
         or #Amount4_AL04_4R > 0

    let $EmplHasBenef = 'Y'
  end-if

 If $GPCH_EG_YEP_FLG <> 'Y'
  do Print_Data_Children
 end-if
from PS_GPCHAL051_TMP AL04_4R
where AL04_4R.PROCESS_INSTANCE = #prcs_process_instance
AND   AL04_4R.EMPLID           = $Empl_IDR
AND   AL04_4R.BEGIN_DT         = $BegDateR
AND   AL04_4R.END_DT           = $EndDateR
AND   AL04_4R.EMPL_RCD         = #Empl_RCDR

order by AL04_4R.DEPENDENT_BENEF
end-select

  if $EmplHasBenef = 'Y'
    add 1 to #TotalBenefEmpl
  end-if

#Debug show '<- Print_Child_Data ' $Empl_IDR ' , ' #count_child_tmp 
end-procedure

!*************************************************************************************
begin-procedure Print_Data_Children
  print $count_child_tmp        (+1,{col2},42)
  DO Format-DateTime($Birth_DT_AL04_4R, $Birth_DT_AL04_4R1, {DEFDATE}, '', '')
  print $Birth_DT_AL04_4R1      (,{col3},30)
  if $Canton_PCD <> 'GE' and $Genf_Can <> 'Y'


 DO Format-Number(#Amount2_AL04_4R , $Amount2_AL04_4R_1, '99,999,999.00')
 DO Format-Number(#Amount3_AL04_4R , $Amount3_AL04_4R_1, '99,999,999.00')
 DO Format-Number(#Amount4_AL04_4R , $Amount4_AL04_4R_1, '99,999,999.00')

    print $Amount2_AL04_4R_1      (,{col9})
    print $Amount3_AL04_4R_1      (,{col10})
    print $Amount4_AL04_4R_1      (,{col12})

  end-if

  do Add-ChildData-To-Statistic(#FTER,$Comp_FreqR,#Amount2_AL04_4R,#Amount3_AL04_4R,#Amount4_AL04_4R,
                   #count_child_tmp,#ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,
                   #ChildAllowance4_FT,#ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,
                   #ChildAllowance3_PT,#ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,
                   #ChildAllowance2_H,#ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,
                   #ChildAllowance1_Total,#ChildAllowance2_Total,#ChildAllowance3_Total,
                   #ChildAllowance4_Total,#ChildAllowance5_Total,#EduAllowance1_FT,
                   #EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,#EduAllowance5_FT,
                   #EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,#EduAllowance4_PT,
                   #EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,#EduAllowance3_H,
                   #EduAllowance4_H,#EduAllowance5_H,#EduAllowance1_Total,#EduAllowance2_Total,
                   #EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
                   #BirthAllowance_Counter,#BirthAllowance_Total)

          let #Birth1 = #Birth1 +  #Amount2_AL04_4R

          if (#FTER >= 1) and  ($Comp_FreqR <> 'H')
                 let #Child_G1 = #Child_G1 +  #Amount3_AL04_4R
                 let #Edu_G1   = #Edu_G1 +  #Amount4_AL04_4R
          end-if
          if (#FTER < 1) and  ($Comp_FreqR <> 'H')
                 let #Child_L1 = #Child_L1 +  #Amount3_AL04_4R
                 let #Edu_L1   = #Edu_L1 +  #Amount4_AL04_4R
          end-if

          if ($Comp_FreqR = 'H')
            let #Child_H1 = #Child_H1 +  #Amount3_AL04_4R
            let #Edu_H1   = #Edu_H1   +  #Amount4_AL04_4R
          end-if
  let #Sum_Geb_Page    = #Sum_Geb_Page    + #Amount2_AL04_4R
  let #Sum_Child_Page  = #Sum_Child_Page  + #Amount3_AL04_4R
  let #Sum_Edu_Page    = #Sum_Edu_Page    + #Amount4_AL04_4R
  let #Sum_Geb_Can     = #Sum_Geb_Can     + #Amount2_AL04_4R
  let #Sum_Child_Can   = #Sum_Child_Can   + #Amount3_AL04_4R
  let #Sum_Edu_Can     = #Sum_Edu_Can     + #Amount4_AL04_4R

end-procedure
!*************************************************************************************
begin-procedure Check_Exist_Children
#debug show '-> Check_Exist_Children' #count_child_tmp ' , ' $Empl_IDR ' , ' #Empl_RCDR ' , ' $Ctl_Start_Dt ' , ' $Ctl_End_Dt  

let #count_child_tmp = 0

begin-select
AL04_4R_C.EMPLID

  let #count_child_tmp      = #count_child_tmp + 1
  
from PS_GPCHAL051_TMP AL04_4R_C
where AL04_4R_C.PROCESS_INSTANCE = #prcs_process_instance
AND   AL04_4R_C.EMPLID           = $Empl_IDR
AND   AL04_4R_C.EMPL_RCD         = #Empl_RCDR
AND   AL04_4R_C.BEGIN_DT         = $BegDateR
AND   AL04_4R_C.END_DT           = $EndDateR

end-select

#debug show '<- Check_Exist_Children' #count_child_tmp
end-procedure
!*************************************************************************************
begin-procedure Get_Canton_Name
#DEBUG show '-> Get_Canton_Name  ' $Canton_id ' , ' $BASE_LANG ' , ' $language_cd  ' , ' $Fak_Language

      let $Key_Canton = $Canton_id || $Fak_Language

      Lookup Get_Base_Canton_Descr $Canton_id $Return_Val
      if Not Isnull ($Return_Val)
         let $Canton_Name = rtrim($Return_Val,' ')
      end-if


      if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
         Lookup Get_Trans_Canton_Descr $Canton_id $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Canton_Name = rtrim($Return_Val,' ')
         end-if
      end-if

      if ($BASE_LANG <> $language_cd) and ($language_cd = '')
         Lookup Get_Trans_Canton_Descr_ALL $Key_Canton $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Canton_Name = rtrim($Return_Val,' ')
         end-if
      end-if


#DEBUG show '<- Get_Canton_Name  ' $Canton_Name
end-procedure Get_Canton_Name
!*************************************************************************************
begin-procedure Get_Company_Name
#DEBUG show '-> Get_Company_Name   ' $Ctl_Company ' , ' $BASE_LANG ' , ' $language_cd  ' , ' $Fak_Language

      let $Key_Company  = $Ctl_Company || $Fak_Language

      Lookup Base_Company_Descr $Ctl_Company $Return_Val
      if Not Isnull ($Return_Val)
         let $Cpdescr = rtrim($Return_Val,' ')
      end-if


      if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
         Lookup Trans_Company_Descr $Ctl_Company $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Cpdescr = rtrim($Return_Val,' ')
         end-if
      end-if

      if ($BASE_LANG <> $language_cd) and ($language_cd = '')
         Lookup Trans_Company_Descr_ALL $Key_Company $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Cpdescr = rtrim($Return_Val,' ')
         end-if
      end-if


#DEBUG show '<- Get_Company_Name   ' $Canton_NameR
end-procedure Get_Company_Name
!*************************************************************************************
begin-procedure TO_5Rapen(:#AmntInOut)
   let #AmntInOut = round(#AmntInOut, 2)
   let #AmntInOut = #AmntInOut * 20
   let #AmntInOut = round(#AmntInOut, 0)
   let #AmntInOut = #AmntInOut / 20
end-procedure
!*************************************************************************************
begin-procedure Print_Rekap1

let #Geb1 = (#Employer_SI_Pct   * #Sum_AHV_Can) / 100
let #Geb2 = (#Employer_Fak_Pct  * #Sum_AHV_Can) / 100

do TO_5Rapen(#Geb1)
do TO_5Rapen(#Geb2)

DO Format-Number(#Sum_AHV_Can , $Sum_AHV_Can_1, '9,999,999,999.00')
DO Format-Number(#Geb1 , $Geb1_1, '9,999,999,999.00')
DO Format-Number(#Geb2 , $Geb2_1, '9,999,999,999.00')
DO Format-Number(#Employer_SI_Pct ,  $Employer_SI_Pct,  '8,888.000')
DO Format-Number(#Employer_Fak_Pct , $Employer_Fak_Pct, '8,888.000')

print $AHV_OBL_SUM_STR   (+1,{col1})
print $Sum_AHV_Can_1       (,{col8})
print $FAK_CONTRIB1_STR   (+1,{col1})
print '('                (,)
print $Employer_SI_Pct   (,)
print ')'                (,)
print $Geb1_1              (,{col5})
print $HANDL_CHARGE_STR  (+2,{col1})
print ' '                (,)
print $Employer_Fak_Pct  (,)
print $Geb2_1            (,{col5})

if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

  DO Format-Number(#Child_G1 , $Child_G1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_G1   , $Edu_G1_1,   '9,999,999,999.00')
  DO Format-Number(#Child_L1 , $Child_L1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_L1   , $Edu_L1_1,   '9,999,999,999.00')
  DO Format-Number(#Child_H1 , $Child_H1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_H1   , $Edu_H1_1,   '9,999,999,999.00')
  DO Format-Number(#Child_G2 , $Child_G2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_G2   , $Edu_G2_1,   '9,999,999,999.00')
  DO Format-Number(#Child_L2 , $Child_L2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_L2   , $Edu_L2_1,   '9,999,999,999.00')
  DO Format-Number(#Child_H2 , $Child_H2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_H2   , $Edu_H2_1,   '9,999,999,999.00')
  DO Format-Number(#Birth1   , $Birth1_1,   '9,999,999,999.00')
  DO Format-Number(#Birth2   , $Birth2_1,   '9,999,999,999.00')
  DO Format-Number(#Corr1    , $Corr1_1,    '9,999,999,999.00')
  DO Format-Number(#Corr2    , $Corr2_1,    '9,999,999,999.00')
  DO Format-Number(#House1   , $House1_1,   '9,999,999,999.00')
  DO Format-Number(#House2   , $House2_1,   '9,999,999,999.00')


  print $CHILD_BENEFS_STR  (+2,{col1})
  print '(100%, VZ)'       (,)
  print $Child_G1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print '(100%, VZ)'       (,)
  print $Edu_G1_1            (,{col8})
  print $CHILD_BENEFS_STR  (+1,{col1})
  print '(100%<,TZ)'       (,)
  print $Child_L1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print '(100%<,TZ)'       (,)
  print $Edu_L1_1            (,{col8})
  print $CHILD_BENEFS_STR  (+1,{col1})
  print '('                (,)
  print $HOURLY_RATE_STR   (,)
  print ')'                (,)
  print $Child_H1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print '('                (,)
  print $HOURLY_RATE_STR   (,)
  print ')'                (,)
  print $Edu_H1_1            (,{col8})
  print $BIRTH_BENEFS_STR  (+2,{col1})
  print $Birth1_1            (,{col8})
  print $HOUSE_BENEF_STR   (+2,{col1})
  print $House1_1            (,{col8})
  print $CORRECTION1_STR   (+1,{col1})
  print ' '                (,)
  print $HOUSE_BENEF_STR   (,)
  print $House2_1            (,{col8})

  let #Geb         = #Geb1 + #Geb2
  !let #Gesamtsumme =  #House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +#Edu_L1 +
  !                    #Child_H1 + #Edu_H1 + #House2 + #Birth2 + #Child_G2 +
  !                    #Edu_G2 + #Child_L2 + #Edu_L2 + #Child_H2 + #Edu_H2
  let #Gesamtsumme =  #House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +#Edu_L1 +
                        #Child_H1 + #Edu_H1 + #House2
                        
  let #Diff        =  #Geb1 - #Geb2 - (#House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +
                      #Edu_L1 +  #Child_H1 + #Edu_H1 +  #House2 + #Birth2 + #Child_G2 +
                      #Edu_G2 + #Child_L2 + #Edu_L2 + #Child_H2 + #Edu_H2 )


  let #Diff1 = #Gesamtsumme - #Geb

  print '_' (+2,10,119) fill
  print $TOTAL_STR    (+1,{col1})
  let #temp_8 = -2 + {col8}

  DO Format-Number(#Gesamtsumme , $Gesamtsumme_1, '999,999,999,999.00')
  DO Format-Number(#Geb , $Geb_1, '9,999,999,999.00')
  DO Format-Number(#Diff1 , $Diff1_1, '9,999,999,999.00')

  print $Gesamtsumme_1  ( , #temp_8)
  print $Geb_1          (,{col5})
  print $FAK_DEBIT_BALA_STR  (+2,{col1})
  print $Diff1_1               (,{col5})
  
    print $CORRECTION1_STR   (+2,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print $percent1          (,)
    print $Child_G2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print $percent1          (,)
    print $Edu_G2_1            (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print $percent2          (,)
    print $Child_L2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print $percent2          (,)
    print $Edu_L2_1            (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print '('                (,)
    print $HOURLY_RATE_STR   (,)
    print ')'                (,)
    print $Child_H2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print '('                (,)
    print $HOURLY_RATE_STR   (,)
    print ')'                (,)
    print $Edu_H2_1            (,{col8})
    print $CORRECTION1_STR   (+2,{col1})
    print ' '                (,)
    print $BIRTH_BENEFS_STR  (,)
    print $Birth2_1            (,{col8})
    
else
  let #Geb = #Geb1 + #Geb2
  let #Diff =   #Geb1 - #Geb2

  DO Format-Number(#Geb , $Geb_1, '9,999,999,999.00')
  DO Format-Number(#Diff , $Diff_1, '9,999,999,999.00')

  print '_' (+2,10,119) fill
  print $TOTAL_STR    (+1,{col1})
  let #temp_8 = -2 + {col8}
  print $Geb_1      (,{col5})
  print $FAK_DEBIT_BALA_STR  (+2,{col1})
  print $Diff_1     (,{col5})
end-if

let #Geb1      = 0
let #Geb2      = 0
let #Geb       = 0
let #House1    = 0
let #Birth1    = 0
let #Child_G1    = 0
let #Edu_G1    =0
let #Child_L1    = 0
let #Edu_L1    = 0
let #Child_H1    = 0
let #Edu_H1      = 0
let #Corr1     = 0
let #House2    = 0
let #Birth2    = 0
let #Child_G2    = 0
let #Edu_G2    = 0
let #Child_L2    = 0
let #Edu_L2    = 0
let #Child_H2    = 0
let #Edu_H2      = 0
let #Corr2     = 0

end-procedure

!*****************************************************************************************
begin-procedure new_canton
  let #Count_Cant = #Count_Cant + 1
  let $Finish_Canton = 'Y'
  new-page
  let $Merk_Header = 'TypeTwo'
  let $Finish_Canton = 'O'

 If $GPCH_EG_YEP_FLG <> 'Y'
  do Print_Rekap1
 end-if
  do Insert_Total_Data

  let #Total_Cant_Amount4     = 0
  let #Total_Cant_Amount5    = 0
  let #Total_Cant_Tax_Amount  = 0
  new-page
  let #Sum_FAK_Can         = 0
  let #Sum_House_Can       = 0
  let #Sum_Geb_Can         = 0
  let #Sum_Child_Can       = 0
  let #Sum_Edu_Can         = 0
  let #Sum_Corr_Can        = 0
  let #Sum_AHV_Can         = 0
  let $Merk_Header      = 'TypeOne'
  let $Finish_Canton     = 'T'
  let #Count_EMPLID = 0
end-procedure

!*******************************************************************************************
begin-procedure Insert_Total_Data

put $CantonR         into RekapData(#CantonCount) Rekap1
put $Canton_Name     into RekapData(#CantonCount) Rekap2
put #Employer_SI_Pct into RekapData(#CantonCount) Rekap3
put #Sum_FAK_Can     into RekapData(#CantonCount) Rekap4
put #Sum_House_Can   into RekapData(#CantonCount) Rekap5
put #Sum_Geb_Can     into RekapData(#CantonCount) Rekap6
put #Sum_Child_Can   into RekapData(#CantonCount) Rekap7
put #Sum_Edu_Can     into RekapData(#CantonCount) Rekap8
put #Sum_Corr_Can    into RekapData(#CantonCount) Rekap9
put #Sum_AHV_Can     into RekapData(#CantonCount) Rekap10

let #CantonCount = #CantonCount + 1
end-procedure

!**********************************************************************************************
begin-procedure InitRekapData
while #b1 < 50
put ''            into RekapData(#b1) Rekap1
put ''            into RekapData(#b1) Rekap2
put 0             into RekapData(#b1) Rekap3
put 0             into RekapData(#b1) Rekap4
put 0             into RekapData(#b1) Rekap5
put 0             into RekapData(#b1) Rekap6
put 0             into RekapData(#b1) Rekap7
put 0             into RekapData(#b1) Rekap8
put 0             into RekapData(#b1) Rekap9
put 0             into RekapData(#b1) Rekap10
let #b1 = #b1 + 1
end-while
end-procedure
!***********************************************************************************************

begin-procedure Print-Canton-Summary($Actual_Can,#ChildAllowance1_Total,#ChildAllowance2_Total,
                #ChildAllowance3_Total,#ChildAllowance4_Total,#ChildAllowance5_Total,
                #ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,#ChildAllowance4_FT,
                #ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,#ChildAllowance3_PT,
                #ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,#ChildAllowance2_H,
                #ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,#EduAllowance1_Total,
                #EduAllowance2_Total,#EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
                #EduAllowance1_FT,#EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,
                #EduAllowance5_FT,#EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,
                #EduAllowance4_PT,#EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,
                #EduAllowance3_H,#EduAllowance4_H,#EduAllowance5_H,#TotalEmpl,
                #TotalBenefEmpl,#BirthAllowance_Counter,#BirthAllowance_Total)

  ! Define column constants for summary page
  #define Col1 10
  #define Col2 40
  #define Col3 55
  #define Col4 70
  #define Col5 85
  #define Col6 110

  ! Initialize all needed variables
  let #TotalChildAllowance1 = 0
  let #TotalChildAllowance2 = 0
  let #TotalChildAllowance3 = 0
  let #TotalChildAllowance4 = 0
  let #TotelChildAllowance5 = 0

  let #TotalEduAllowance1 = 0
  let #TotalEduAllowance2 = 0
  let #TotalEduAllowance3 = 0
  let #TotalEduAllowance4 = 0
  let #TotalEduAllowance5 = 0

  let #ChildAllowanceAll_FT = 0
  let #ChildAllowanceAll_PT = 0
  let #ChildAllowanceAll_H = 0
  let #ChildAllowanceAll_Total = 0

  let #EduAllowanceAll_FT = 0
  let #EduAllowanceAll_PT = 0
  let #EduAllowanceAll_H = 0
  let #EduAllowanceAll_Total = 0

  let $ChildAllowance1_Rate = ''
  let $ChildAllowance2_Rate = ''
  let $ChildAllowance3_Rate = ''
  let $ChildAllowance4_Rate = ''
  let $ChildAllowance5_Rate = ''

  let $EduAllowance1_Rate = ''
  let $EduAllowance2_Rate = ''
  let $EduAllowance3_Rate = ''
  let $EduAllowance4_Rate = ''
  let $EduAllowance5_Rate = ''

  let #BirthAllowance_Rate = ''

  ! Calculate all totals
  let #TotalChildAllowance1 = #ChildAllowance1_FT + #ChildAllowance1_PT + #ChildAllowance1_H
  let #TotalChildAllowance2 = #ChildAllowance2_FT + #ChildAllowance2_PT + #ChildAllowance2_H
  let #TotalChildAllowance3 = #ChildAllowance3_FT + #ChildAllowance3_PT + #ChildAllowance3_H
  let #TotalChildAllowance4 = #ChildAllowance4_FT + #ChildAllowance4_PT + #ChildAllowance4_H
  let #TotalChildAllowance5 = #ChildAllowance5_FT + #ChildAllowance5_PT + #ChildAllowance5_H

  let #TotalEduAllowance1 = #EduAllowance1_FT + #EduAllowance1_PT + #EduAllowance1_H
  let #TotalEduAllowance2 = #EduAllowance2_FT + #EduAllowance2_PT + #EduAllowance2_H
  let #TotalEduAllowance3 = #EduAllowance3_FT + #EduAllowance3_PT + #EduAllowance3_H
  let #TotalEduAllowance4 = #EduAllowance4_FT + #EduAllowance4_PT + #EduAllowance4_H
  let #TotalEduAllowance5 = #EduAllowance5_FT + #EduAllowance5_PT + #EduAllowance5_H

  let #ChildAllowanceAll_FT = #ChildAllowance1_FT + #ChildAllowance2_FT
                                                        + #ChildAllowance3_FT + #ChildAllowance4_FT
                                                        + #ChildAllowance5_FT

  let #ChildAllowanceAll_PT = #ChildAllowance1_PT + #ChildAllowance2_PT
                                                        + #ChildAllowance3_PT + #ChildAllowance4_PT
                                                        + #ChildAllowance5_PT

  let #ChildAllowanceAll_H  = #ChildAllowance1_H + #ChildAllowance2_H
                                                        + #ChildAllowance3_H + #ChildAllowance4_H
                                                        + #ChildAllowance5_H

  let #EduAllowanceAll_FT   = #EduAllowance1_FT + #EduAllowance2_FT
                                                        + #EduAllowance3_FT + #EduAllowance4_FT
                                                        + #EduAllowance5_FT

  let #EduAllowanceAll_PT   = #EduAllowance1_PT + #EduAllowance2_PT
                                                        + #EduAllowance3_PT + #EduAllowance4_PT
                                                        + #EduAllowance5_PT

  let #EduAllowanceAll_H    = #EduAllowance1_H + #EduAllowance2_H
                                                        + #EduAllowance3_H + #EduAllowance4_H
                                                        + #EduAllowance5_H

  let #ChildAllowanceAll_Total = #ChildAllowance1_Total + #ChildAllowance2_Total
                               + #ChildAllowance3_Total + #ChildAllowance4_Total
                                                           + #ChildAllowance5_Total

  let #EduAllowanceAll_Total   = #EduAllowance1_Total + #EduAllowance2_Total
                                                           + #EduAllowance3_Total + #EduAllowance4_Total
                                                           + #EduAllowance5_Total

  ! Get the allowance amounts for this canton
  do Get-Allowance-Amounts ('CA1',
                                                        $Actual_Can,
                                                        1,
                                                        $ChildAllowance1_Rate,
                                                        $ChildAllowance2_Rate,
                                                        $ChildAllowance3_Rate,
                                                        $ChildAllowance4_Rate,
                                                        $ChildAllowance5_Rate,
                                                        $EduAllowance1_Rate,
                                                        $EduAllowance2_Rate,
                                                        $EduAllowance3_Rate,
                                                        $EduAllowance4_Rate,
                                                        $EduAllowance5_Rate,
                                                        $BirthAllowance_Rate)

  ! Get the needed report strings from the strings table
  do Get_Field_Information ( 'GPCHAL04' , 'FULL_TIME' , $FULL_TIME , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PART_TIME' , $PART_TIME , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'REMARK_STR' ,$REMARK_STR , #CW )

  ! Format all output numbers
  do Format-Number(#ChildAllowance1_FT, $ChildAllowance1_FT, '99999990')
  do Format-Number(#ChildAllowance1_PT, $ChildAllowance1_PT, '99999990')
  do Format-Number(#ChildAllowance1_H, $ChildAllowance1_H, '99999999990')
  do Format-Number(#ChildAllowance1_Total, $ChildAllowance1_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance2_FT, $ChildAllowance2_FT, '99999990')
  do Format-Number(#ChildAllowance2_PT, $ChildAllowance2_PT, '99999990')
  do Format-Number(#ChildAllowance2_H, $ChildAllowance2_H, '99999999990')
  do Format-Number(#ChildAllowance2_Total, $ChildAllowance2_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance3_FT, $ChildAllowance3_FT, '99999990')
  do Format-Number(#ChildAllowance3_PT, $ChildAllowance3_PT, '99999990')
  do Format-Number(#ChildAllowance3_H, $ChildAllowance3_H, '99999999990')
  do Format-Number(#ChildAllowance3_Total, $ChildAllowance3_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance4_FT, $ChildAllowance4_FT, '99999990')
  do Format-Number(#ChildAllowance4_PT, $ChildAllowance4_PT, '99999990')
  do Format-Number(#ChildAllowance4_H, $ChildAllowance4_H, '99999999990')
  do Format-Number(#ChildAllowance4_Total, $ChildAllowance4_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance5_FT, $ChildAllowance5_FT, '99999990')
  do Format-Number(#ChildAllowance5_PT, $ChildAllowance5_PT, '99999990')
  do Format-Number(#ChildAllowance5_H, $ChildAllowance5_H, '99999999990')
  do Format-Number(#ChildAllowance5_Total, $ChildAllowance5_Total, '999,999,999.00')
  do Format-Number(#ChildAllowanceAll_FT, $ChildAllowanceAll_FT,  '99999990')
  do Format-Number(#ChildAllowanceAll_PT, $ChildAllowanceAll_PT,  '99999990')
  do Format-Number(#ChildAllowanceAll_H, $ChildAllowanceAll_H,  '99999999990')
  do Format-Number(#ChildAllowanceAll_Total, $ChildAllowanceAll_Total,  '999,999,999.00')

  do Format-Number(#EduAllowance1_FT, $EduAllowance1_FT, '99999990')
  do Format-Number(#EduAllowance1_PT, $EduAllowance1_PT, '99999990')
  do Format-Number(#EduAllowance1_H, $EduAllowance1_H, '99999999990')
  do Format-Number(#EduAllowance1_Total, $EduAllowance1_Total, '999,999,999.00')
  do Format-Number(#EduAllowance2_FT, $EduAllowance2_FT, '99999990')
  do Format-Number(#EduAllowance2_PT, $EduAllowance2_PT, '99999990')
  do Format-Number(#EduAllowance2_H, $EduAllowance2_H, '99999999990')
  do Format-Number(#EduAllowance2_Total, $EduAllowance2_Total, '999,999,999.00')
  do Format-Number(#EduAllowance3_FT, $EduAllowance3_FT, '99999990')
  do Format-Number(#EduAllowance3_PT, $EduAllowance3_PT, '99999990')
  do Format-Number(#EduAllowance3_H, $EduAllowance3_H, '99999999990')
  do Format-Number(#EduAllowance3_Total, $EduAllowance3_Total, '999,999,999.00')
  do Format-Number(#EduAllowance4_FT, $EduAllowance4_FT, '99999990')
  do Format-Number(#EduAllowance4_PT, $EduAllowance4_PT, '99999990')
  do Format-Number(#EduAllowance4_H, $EduAllowance4_H, '99999999990')
  do Format-Number(#EduAllowance4_Total, $EduAllowance4_Total, '999,999,999.00')
  do Format-Number(#EduAllowance5_FT, $EduAllowance5_FT, '99999990')
  do Format-Number(#EduAllowance5_PT, $EduAllowance5_PT, '99999990')
  do Format-Number(#EduAllowance5_H, $EduAllowance5_H, '99999999990')
  do Format-Number(#EduAllowance5_Total, $EduAllowance5_Total, '999,999,999.00')
  do Format-Number(#EduAllowanceAll_FT, $EduAllowanceAll_FT,  '99999990')
  do Format-Number(#EduAllowanceAll_PT, $EduAllowanceAll_PT,  '99999990')
  do Format-Number(#EduAllowanceAll_H, $EduAllowanceAll_H,  '99999999990')
  do Format-Number(#EduAllowanceAll_Total, $EduAllowanceAll_Total,  '999,999,999.00')

  do Format-Number(#TotalEmpl, $TotalEmpl, '999990')
  do Format-Number(#TotalBenefEmpl, $TotalBenefEmpl, '999990')
  do Format-Number(#TotalChildAllowance1, $TotalChildAllowance1, '999990')
  do Format-Number(#TotalChildAllowance2, $TotalChildAllowance2, '999990')
  do Format-Number(#TotalChildAllowance3, $TotalChildAllowance3, '999990')
  do Format-Number(#TotalChildAllowance4, $TotalChildAllowance4, '999990')
  do Format-Number(#TotalChildAllowance5, $TotalChildAllowance5, '999990')
  do Format-Number(#TotalEduAllowance1, $TotalEduAllowance1, '999990')
  do Format-Number(#TotalEduAllowance2, $TotalEduAllowance2, '999990')
  do Format-Number(#TotalEduAllowance3, $TotalEduAllowance3, '999990')
  do Format-Number(#TotalEduAllowance4, $TotalEduAllowance4, '999990')
  do Format-Number(#TotalEduAllowance5, $TotalEduAllowance5, '999990')

  do Format-Number(#BirthAllowance_Counter, $BirthAllowance_Counter,  '99999990')
  do Format-Number(#BirthAllowance_Total, $BirthAllowance_Total,  '999,999,999.00')

  let $AMOUNT_STR = lpad($_AMOUNT_STR, 14, ' ')

  let $TotalEduAllowance1 = ltrim($TotalEduAllowance1, ' ')
  let $TotalEduAllowance2 = ltrim($TotalEduAllowance2, ' ')
  let $TotalEduAllowance3 = ltrim($TotalEduAllowance3, ' ')
  let $TotalEduAllowance4 = ltrim($TotalEduAllowance4, ' ')
  let $TotalEduAllowance5 = ltrim($TotalEduAllowance5, ' ')
  let $TotalChildAllowance1 = ltrim($TotalChildAllowance1, ' ')
  let $TotalChildAllowance2 = ltrim($TotalChildAllowance2, ' ')
  let $TotalChildAllowance3 = ltrim($TotalChildAllowance3, ' ')
  let $TotalChildAllowance4 = ltrim($TotalChildAllowance4, ' ')
  let $TotalChildAllowance5 = ltrim($TotalChildAllowance5, ' ')


  ! Print out the summary
  let $_Merk_Header     = 'TypeTwo'
  let $_Finish_Canton = 'O'

  ! Column headings
  print $_CHILD_BENEFS_STR                      (,{Col1}) bold
  print $FULL_TIME                                              (,{Col2}) bold
  print $PART_TIME                                              (,{Col3}) bold
  print $_HOURLY_RATE_STR                               (,{Col4}) bold
  if $Actual_Can <> 'GE'
    print $_RUDIMENT_CHILD_STR                  (,{Col5}) bold
    print $AMOUNT_STR                                   (,{Col6}) bold
  end-if

  ! Data
  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance1_FT                             (,{Col2})
  print $ChildAllowance1_PT                             (,{Col3})
  print $ChildAllowance1_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance1_Rate                 (,{Col5})
    print $ChildAllowance1_Total                (,{Col6})
  end-if

  print '2. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance2_FT                             (,{Col2})
  print $ChildAllowance2_PT                             (,{Col3})
  print $ChildAllowance2_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance2_Rate                 (,{Col5})
    print $ChildAllowance2_Total                (,{Col6})
  end-if

  print '3. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance3_FT                             (,{Col2})
  print $ChildAllowance3_PT                             (,{Col3})
  print $ChildAllowance3_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance3_Rate                 (,{Col5})
    print $ChildAllowance3_Total                (,{Col6})
  end-if

  print '4. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance4_FT                             (,{Col2})
  print $ChildAllowance4_PT                             (,{Col3})
  print $ChildAllowance4_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance4_Rate                 (,{Col5})
    print $ChildAllowance4_Total                (,{Col6})
  end-if

  print '5. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $_AND_MORE_STR                                  (,+1)
  print $ChildAllowance5_FT                     (,{Col2})
  print $ChildAllowance5_PT                             (,{Col3})
  print $ChildAllowance5_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance5_Rate                 (,{Col5})
    print $ChildAllowance5_Total                (,{Col6})
  end-if

  print $_TOTAL_COUNT_STR                       (+2,{Col1}, 30)
  print $ChildAllowanceAll_FT                   (,{Col2})
  print $ChildAllowanceAll_PT                   (,{Col3})
  print $ChildAllowanceAll_H                    (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowanceAll_Total              (,{Col6})
  end-if

  print '_'                                                             (+1,{Col1},119) fill

  print $_EDU_BENEFS_STR                                (+2,{Col1}) bold

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance1_FT                               (,{Col2})
  print $EduAllowance1_PT                               (,{Col3})
  print $EduAllowance1_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance1_Rate                   (,{Col5})
    print $EduAllowance1_Total                  (,{Col6})
  end-if

  print '2. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance2_FT                               (,{Col2})
  print $EduAllowance2_PT                               (,{Col3})
  print $EduAllowance2_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance2_Rate                   (,{Col5})
    print $EduAllowance2_Total                  (,{Col6})
  end-if

  print '3. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance3_FT                               (,{Col2})
  print $EduAllowance3_PT                               (,{Col3})
  print $EduAllowance3_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance3_Rate                   (,{Col5})
    print $EduAllowance3_Total                  (,{Col6})
  end-if

  print '4. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance4_FT                               (,{Col2})
  print $EduAllowance4_PT                               (,{Col3})
  print $EduAllowance4_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance4_Rate                   (,{Col5})
    print $EduAllowance4_Total                  (,{Col6})
  end-if

  print '5. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $_AND_MORE_STR                                  (,+1)
  print $EduAllowance5_FT                               (,{Col2})
  print $EduAllowance5_PT                               (,{Col3})
  print $EduAllowance5_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance5_Rate                   (,{Col5})
    print $EduAllowance5_Total                  (,{Col6})
  end-if

  print $_TOTAL_COUNT_STR                       (+2,{Col1})
  print $EduAllowanceAll_FT                             (,{Col2})
  print $EduAllowanceAll_PT                             (,{Col3})
  print $EduAllowanceAll_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowanceAll_Total                (,{Col6})
  end-if

! The following commented source displays the total amounts for invalid
! children. As long as it is not used, it's commented out

!  print '_'                                                            (+1,{Col1},119) fill

!  print $_INVALIDE_CHILD_STR                   (+2,{Col1})
!  print $_TOTAL_COUNT_STR                      (+2,{Col1})

  print '_'                                                             (+1,{Col1},119) fill

  print $_BIRTH_BENEFS_STR                              (+2,{Col1}) bold
  print $BirthAllowance_Counter                 (,{Col2})
  if $Actual_Can <> 'GE'
    print $BirthAllowance_Rate                  (,{Col5})
    print $BirthAllowance_Total                 (,{Col6})
  end-if

  print '_'                                                             (+1,{Col1},119) fill

  print $_EMPL_COUNT1_STR                               (+2,{Col1})
  print ':'                                                             (,)
  print $TotalEmpl                                              (,+1)

  print $_EMPL_COUNT2_STR                               (+1,{Col1})
  print ':'                                                             (,)
  print $TotalBenefEmpl                                 (,+1)

  print $_CHILD_BENEFS_STR                              (+2,{Col1})
  print $_ELIGIBLE_BENEF_ST                             (,+1)

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance1                   (,+1)
  print '2. '                                                   (,{Col2})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance2                   (,+1)
  print '3. '                                                   (,{Col3})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance3                   (,+1)
  print '4. '                                                   (,{Col4})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance4                   (,+1)
  print '5. '                                                   (,{Col5})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance5                   (,+1)

  print $_EDU_BENEFS_STR                                (+2,{Col1})
  print $_ELIGIBLE_BENEF_ST                             (,+1)

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance1                             (,+1)
  print '2. '                                                   (,{Col2})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance2                             (,+1)
  print '3. '                                                   (,{Col3})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance3                             (,+1)
  print '4. '                                                   (,{Col4})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance4                             (,+1)
  print '5. '                                                   (,{Col5})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance5                             (,+1)

  print $REMARK_STR                                             (+3,{Col1})
  
  print $_RUN_DATE                                        (+8,{col1})
  print $_SIGNAT                                          (+2,{col1})
 
 new-page

  let $_Merk_Header      = 'TypeOne'
  let $_Finish_Canton    = 'T'

end-procedure
!*********************************************************************************************
begin-procedure Add-ChildData-To-Statistic (#FTE,$CompFrequency,#GPCH_RP_AMOUNT2,#GPCH_RP_AMOUNT3,
                #GPCH_RP_AMOUNT4,#ChildNum,:#ChildAllowance1_FT,:#ChildAllowance2_FT,:#ChildAllowance3_FT,
                :#ChildAllowance4_FT,:#ChildAllowance5_FT,:#ChildAllowance1_PT,:#ChildAllowance2_PT,
                :#ChildAllowance3_PT,:#ChildAllowance4_PT,:#ChildAllowance5_PT,:#ChildAllowance1_H,
                :#ChildAllowance2_H,:#ChildAllowance3_H,:#ChildAllowance4_H,:#ChildAllowance5_H,
                :#ChildAllowance1_Total,:#ChildAllowance2_Total,:#ChildAllowance3_Total,
                :#ChildAllowance4_Total,:#ChildAllowance5_Total,:#EduAllowance1_FT,:#EduAllowance2_FT,
                :#EduAllowance3_FT,:#EduAllowance4_FT,:#EduAllowance5_FT,:#EduAllowance1_PT,
                :#EduAllowance2_PT,:#EduAllowance3_PT,:#EduAllowance4_PT,:#EduAllowance5_PT,
                :#EduAllowance1_H,:#EduAllowance2_H,:#EduAllowance3_H,:#EduAllowance4_H,
                :#EduAllowance5_H,:#EduAllowance1_Total,:#EduAllowance2_Total,:#EduAllowance3_Total,
                :#EduAllowance4_Total,:#EduAllowance5_Total,:#BirthAllowance_Counter,
                                :#BirthAllowance_Total)

  if #GPCH_RP_AMOUNT2 <> 0
    add #GPCH_RP_AMOUNT2 to #BirthAllowance_Total
        if #GPCH_RP_AMOUNT2 > 0
          Add  1 to #BirthAllowance_Counter
    else
          add -1 to #BirthAllowance_Counter
        end-if
  end-if

  if (#FTE >= 1) and ($CompFrequency <> 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT3 <> 0

          evaluate #ChildNum
        when = 1
                   add #AddValue to #ChildAllowance1_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
              break
            when = 2
                  add #AddValue to #ChildAllowance2_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
              break
            when = 3
                  add #AddValue to #ChildAllowance3_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
              break
             when = 4
                  add #AddValue to #ChildAllowance4_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
              break
            when >= 5
                  add #AddValue to #ChildAllowance5_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                  break
      end-evaluate
        end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT4 <> 0

          evaluate #ChildNum
        when = 1
                          add #AddValue to #EduAllowance1_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
              break
            when = 2
                  add #AddValue to #EduAllowance2_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
              break
            when = 3
                  add #AddValue to #EduAllowance3_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
              break
             when = 4
                  add #AddValue to #EduAllowance4_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
              break
            when >= 5
                  add #AddValue to #EduAllowance5_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                  break
      end-evaluate
        end-if
  end-if

  if (#FTE < 1) and ($CompFrequency <> 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT3 <> 0

          evaluate #ChildNum
        when = 1
          add #AddValue to #ChildAllowance1_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
              break
            when = 2
                  add #AddValue to #ChildAllowance2_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
              break
            when = 3
                  add #AddValue to #ChildAllowance3_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
              break
            when = 4
                  add #AddValue to #ChildAllowance4_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
              break
            when >= 5
                  add #AddValue to #ChildAllowance5_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                  break
      end-evaluate
        end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT4 <> 0

          evaluate #ChildNum
        when = 1
          add #AddValue to #EduAllowance1_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
              break
            when = 2
                  add #AddValue to #EduAllowance2_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
              break
            when = 3
                  add #AddValue to #EduAllowance3_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
              break
            when = 4
                  add #AddValue to #EduAllowance4_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
              break
            when >= 5
                  add #AddValue to #EduAllowance5_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                  break
      end-evaluate
        end-if
  end-if

  if ($CompFrequency = 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

      if #GPCH_RP_AMOUNT3 <> 0

            evaluate #ChildNum
          when = 1
            add #AddValue to #ChildAllowance1_H
                        add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
                break
              when = 2
                    add #AddValue to #ChildAllowance2_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
                break
              when = 3
                    add #AddValue to #ChildAllowance3_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
                break
              when = 4
                    add #AddValue to #ChildAllowance4_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
                break
              when >= 5
                    add #AddValue to #ChildAllowance5_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                    break
        end-evaluate
          end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

      if #GPCH_RP_AMOUNT4 <> 0

            evaluate #ChildNum
          when = 1
            add #AddValue to #EduAllowance1_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
                break
              when = 2
                    add #AddValue to #EduAllowance2_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
                break
              when = 3
                    add #AddValue to #EduAllowance3_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
                break
                when = 4
                    add #AddValue to #EduAllowance4_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
                break
              when >= 5
                    add #AddValue to #EduAllowance5_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                    break
        end-evaluate
          end-if
  end-if

end-procedure
!*********************************************************************************************
begin-procedure Get-Allowance-Amounts ($Ca_Rates_Id,$Canton,#GPCH_CA_CHILD_MIN,:$ChildAllowance1_Rate,
                :$ChildAllowance2_Rate,:$ChildAllowance3_Rate,:$ChildAllowance4_Rate,
                :$ChildAllowance5_Rate,:$EduAllowance1_Rate,:$EduAllowance2_Rate,
                :$EduAllowance3_Rate,:$EduAllowance4_Rate,:$EduAllowance5_Rate,:$BirthAllowance_Rate)

  ! Get the child and education allowance rate
begin-select
A.SEQNUM
A.GPCH_CA_AMOUNT
A.GPCH_CA_AMOUNT2
A.GPCH_EDU_AMOUNT

  evaluate &A.SEQNUM
    when = 1
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance1_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance1_Rate = $ChildAllowance1_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance1_Rate, '99,990.00')
          break
        when = 2
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance2_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance2_Rate = $ChildAllowance2_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance2_Rate, '99,990.00')
          break
        when = 3
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance3_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance3_Rate = $ChildAllowance3_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance3_Rate, '99,990.00')
          break
        when = 4
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance4_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance4_Rate = $ChildAllowance4_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance4_Rate, '99,990.00')
          break
        when = 5
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance5_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance5_Rate = $ChildAllowance5_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance5_Rate, '99,990.00')
          break
  end-evaluate

FROM   PS_GPCH_CA_STAT_S2 A
WHERE  A.GPCH_CA_RATES_ID = $Ca_Rates_Id
           AND A.GPCH_TX_CANTON = $Canton
           AND A.GPCH_CA_CHILD_MIN = #GPCH_CA_CHILD_MIN
           AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                         FROM   PS_GPCH_CA_STAT_S2 A1
                         WHERE  A1.GPCH_CA_RATES_ID = $Ca_Rates_Id
                         AND A1.GPCH_TX_CANTON = $Canton
                         AND A1.GPCH_CA_CHILD_MIN = #GPCH_CA_CHILD_MIN)
ORDER BY A.SEQNUM
  end-select

  if $ChildAllowance2_Rate = ''
    let $ChildAllowance2_Rate = $ChildAllowance1_Rate
  end-if
  if $ChildAllowance3_Rate = ''
    let $ChildAllowance3_Rate = $ChildAllowance2_Rate
  end-if
  if $ChildAllowance4_Rate = ''
    let $ChildAllowance4_Rate = $ChildAllowance3_Rate
  end-if
  if $ChildAllowance5_Rate = ''
    let $ChildAllowance5_Rate = $ChildAllowance4_Rate
  end-if

  if $EduAllowance2_Rate = ''
    let $EduAllowance2_Rate = $EduAllowance1_Rate
  end-if
  if $EduAllowance3_Rate = ''
    let $EduAllowance3_Rate = $EduAllowance2_Rate
  end-if
  if $EduAllowance4_Rate = ''
    let $EduAllowance4_Rate = $EduAllowance3_Rate
  end-if
  if $EduAllowance5_Rate = ''
    let $EduAllowance5_Rate = $EduAllowance4_Rate
  end-if

  ! Get the birth allowance rate
  begin-select
A.GPCH_CA_BIRTH_AMT

  do Format-Number(&A.GPCH_CA_BIRTH_AMT, $BirthAllowance_Rate, '99,990.00')

FROM  PS_GPCH_CA_STAT_S1 A
WHERE A.GPCH_CA_RATES_ID = $Ca_Rates_Id
          AND A.GPCH_TX_CANTON = $Canton
          AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                        FROM PS_GPCH_CA_STAT_S1 A1
                        WHERE   A1.GPCH_CA_RATES_ID = $Ca_Rates_Id
                        AND A1.GPCH_TX_CANTON = $Canton
                        AND A1.EFF_STATUS = 'A')
  end-select

end-procedure
!******************************************* new ***********************************************
Begin-Procedure Delete-Rec-Al05
#Debug show '-> Delete-Rec-Al05 '

Begin-Sql on-error=give_warning
  delete from PS_GPCHAL051_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

Begin-Sql on-error=give_warning
  delete from PS_GPCHAL052_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif


#Debug show '<- Delete-Rec-Al05 '
End-Procedure Delete-Rec-Al05
!******************************************* new ***********************************************

begin-procedure SelectEmpls

if rtrim($Cal_Run_Id_String, ' ') <> ''
  let $Cal_Run_Id_CriteriaME1     = ' AND FK2.CAL_RUN_ID   IN ( ' || $Cal_Run_Id_String || ')'
  let $Cal_Run_Id_CriteriaI       = ' AND INSD.CAL_RUN_ID  IN ( ' || $Cal_Run_Id_String || ')'
  let $Cal_Run_Id_CriteriaIC      = ' AND INSTR.CAL_RUN_ID  IN ( ' || $Cal_Run_Id_String || ')'
  let $Cal_Run_Id_CriteriaICD     = ' AND INSPR.CAL_RUN_ID IN ( ' || $Cal_Run_Id_String || ')'
else
  let $Cal_Run_Id_CriteriaME1     = ' '
  let $Cal_Run_Id_CriteriaI       = ' '
  let $Cal_Run_Id_CriteriaIC      = ' '
  let $Cal_Run_Id_CriteriaICD     = ' '
end-if



begin-select DISTINCT
#ifdef ORACLE
/*+ INDEX(FK2 PSAGPCH_RP_FK02)*/
#endif
FK2.EMPLID
FK2.EMPL_RCD

   let $FirstRow = 'Y'
   do InsertFk02Data

from PS_GPCH_RP_FK02 FK2
where FK2.PAY_ENTITY         = $Ctl_PayEntity
AND   FK2.PRD_END_DT BETWEEN $Ctl_Start_Dt and $Ctl_End_Dt
#ifdef ORACLE
AND   FK2.GPCH_AL_CPAY_ENDDT = (select /*+ INDEX(FK21 PS_GPCH_RP_FK02)*/ max(FK21.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 FK21
#else
AND   FK2.GPCH_AL_CPAY_ENDDT = (select max(FK21.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 FK21
#endif
                                where FK21.EMPLID     = FK2.EMPLID
                                AND   FK21.EMPL_RCD   = FK2.EMPL_RCD
                                AND   FK21.PRD_END_DT = FK2.PRD_END_DT)
[$Ctl_Canton_CritE1]
[$Cal_Run_Id_CriteriaME1]
[$Emplid_CriteriaE1]
end-select
end-procedure
!**************************************************************************
begin-procedure InsertFk02Data
#Debug Show '-> InsertFk02Data ' &FK2.EMPLID

  #debug show $Cal_Run_Id_CriteriaI
  #debug show $Ctl_Canton_CritE2

  let $Empl_ID_Ins               = ''
  let #Empl_RCD_Ins              = 0
  let $B_DT_Ins                  = ''
  let $E_DT_Ins                  = ''
  let $Pay_Entity_Ins            = ''
  let $Company_Ins               = ''
  let $DeptId_Ins                = ''
  let $State_Ins                 = ''
  let $HireDt_Ins                = ''
  let $TermDt_Ins                = ''
  let $BirthDt_Ins               = ''
  let #Fte_Ins                   = 0
  let #StdHrs_Ins                = 0
  let $CompFrequ_Ins             = ''
  let #Amount1_Ins               = 0
  let #Amount2_Ins               = 0
  let #Amount3_Ins               = 0
  let #SiFakPct_Ins              = 0
  let #Amount4_Ins               = 0
  let #TxStaxbPct_Ins            = 0
  let #Amount5_Ins               = 0
  let #Amount6_Ins               = 0
  let #Amount7_Ins               = 0
  let #Amount8_Ins               = 0
  let #Amount9_Ins               = 0
  let #Amount10_Ins              = 0
  let $Status_Ins                = ''
  let $N_Id_Ins                  = ''
  let $NNSS_Id_Ins               = ''

begin-select
#ifdef ORACLE
/*+ INDEX(RP01 PS_GPCH_RP_0001) INDEX(INSD PS_GPCH_RP_FK02)*/
#endif
INSD.EMPLID
INSD.EMPL_RCD
INSD.SLICE_END_DT
INSD.PRD_END_DT
INSD.PAY_ENTITY
INSD.COMPANY
INSD.DEPTID
INSD.STATE
INSD.HIRE_DT
INSD.TERMINATION_DT
INSD.FTE
INSD.STD_HOURS
INSD.COMP_FREQUENCY
INSD.GPCH_RP_AMOUNT1
INSD.GPCH_RP_AMOUNT2
INSD.GPCH_RP_AMOUNT3
INSD.GPCH_SI_FAK_PCT
INSD.GPCH_RP_AMOUNT4
INSD.GPCH_TX_STAXB_PCT
INSD.GPCH_RP_AMOUNT5
INSD.GPCH_RP_AMOUNT6
INSD.GPCH_RP_AMOUNT7
INSD.GPCH_RP_AMOUNT8
INSD.GPCH_RP_AMOUNT9
INSD.GPCH_RP_AMOUNT10
INSD.SEG_BGN_DT
INSD.STATUS
RP01.NATIONAL_ID
RP01.BIRTHDATE
RP01.GPCH_AH_NNSS

         do ConvertToComponents(&INSD.SEG_BGN_DT,$tmp_y,$tmp_m,$tmp_d)

             let $date_i =  $tmp_y  || '-' || $tmp_m || '-' ||  $tmp_d
            do dtu-add-days($date_i, -1, $Compare_1)

              do ConvertToComponents($E_DT_Ins,$tmp_y,$tmp_m,$tmp_d)

            let $date_i =  $tmp_y  || '-' || $tmp_m || '-' ||  $tmp_d

            let $Compare_2 = $date_i

! FMB 20070423

  Show ' FMB Compare &INSD.EMPLID = ' &INSD.EMPLID ' &INSD.TERMINATION_DT = ' &INSD.TERMINATION_DT ' &INSD.SEG_BGN_DT = ' &INSD.SEG_BGN_DT
  
  IF &INSD.TERMINATION_DT  <> '' and    &INSD.TERMINATION_DT <   &INSD.SEG_BGN_DT
           let $Compare_1  = $Compare_2 
  End-If


  if $FirstRow = 'N'
     ! Vergleich aktuelle gegen alte Zeile

     if $CompFrequ_Ins <> 'H'

        if $State_Ins      <> rtrim(&INSD.STATE,' ')           or
           $HireDt_Ins     <> &INSD.HIRE_DT                    or
         !  $TermDt_Ins     <> &INSD.TERMINATION_DT             or
!FMB 20100910           #Fte_Ins        <> &INSD.FTE                        or
!FMB 20100910           #StdHrs_Ins     <> &INSD.STD_HOURS                  or
         
           $Compare_1  <> $Compare_2                            or 

           $CompFrequ_Ins  <> rtrim(&INSD.COMP_FREQUENCY, ' ')


           let $InsertRow = 'Y'
           do InsertFk01Data
           do InsertData
!FMB20070928           let $B_DT_Ins = &INSD.SLICE_END_DT
           let $B_DT_Ins = &INSD.SEG_BGN_DT
         end-if

     else

         if $State_Ins      <> rtrim(&INSD.STATE,' ')           or
            $HireDt_Ins     <> &INSD.HIRE_DT                    or
        !   $TermDt_Ins     <> &INSD.TERMINATION_DT             or
!FMB 20100910            #Fte_Ins        <> &INSD.FTE                        or
           
            $Compare_1  <> $Compare_2                            or 

            $CompFrequ_Ins  <> rtrim(&INSD.COMP_FREQUENCY, ' ')


            let $InsertRow = 'Y'
            do InsertFk01Data
            do InsertData
            let $B_DT_Ins = &INSD.SLICE_END_DT
         end-if
         
      end-if


  else
!FMB20070928           let $B_DT_Ins = &INSD.SLICE_END_DT
     let $B_DT_Ins  =  &INSD.SEG_BGN_DT
     let $E_DT_Ins  =  &INSD.SLICE_END_DT
  end-if
  !----------------------------------------------------------
  let $Empl_ID_Ins               = rtrim(&INSD.EMPLID,' ')
  let #Empl_RCD_Ins              = &INSD.EMPL_RCD
  let $E_DT_Ins                  = &INSD.SLICE_END_DT
  let $Pay_Entity_Ins            = rtrim(&INSD.PAY_ENTITY,' ')
  let $Company_Ins               = rtrim(&INSD.COMPANY,' ')
  let $DeptId_Ins                = rtrim(&INSD.DEPTID,' ')
  let $State_Ins                 = rtrim(&INSD.STATE,' ') !sps changes to handle cantonal change of an employee. Reading from RP01 instead of FK02.STATE
  let $HireDt_Ins                = &INSD.HIRE_DT
  let $TermDt_Ins                = &INSD.TERMINATION_DT
  let $BirthDt_Ins               = &RP01.BIRTHDATE
  let #Fte_Ins                   = &INSD.FTE
  let #StdHrs_Ins                = &INSD.STD_HOURS
  let $CompFrequ_Ins             = rtrim(&INSD.COMP_FREQUENCY,' ')
  let #Amount1_Ins               = #Amount1_Ins + &INSD.GPCH_RP_AMOUNT1
  let #Amount2_Ins               = #Amount2_Ins + &INSD.GPCH_RP_AMOUNT2
  let #Amount3_Ins               = #Amount3_Ins + &INSD.GPCH_RP_AMOUNT3
  let #SiFakPct_Ins              = &INSD.GPCH_SI_FAK_PCT
  let #Amount4_Ins               = #Amount4_Ins + &INSD.GPCH_RP_AMOUNT4
  let #TxStaxbPct_Ins            = &INSD.GPCH_TX_STAXB_PCT
  let #Amount5_Ins               = #Amount5_Ins + &INSD.GPCH_RP_AMOUNT5
  let #Amount6_Ins               = #Amount6_Ins + &INSD.GPCH_RP_AMOUNT6
  let #Amount7_Ins               = #Amount7_Ins + &INSD.GPCH_RP_AMOUNT7
  let #Amount8_Ins               = #Amount8_Ins + &INSD.GPCH_RP_AMOUNT8
  let #Amount9_Ins               = #Amount9_Ins + &INSD.GPCH_RP_AMOUNT9
  let #Amount10_Ins              = #Amount10_Ins + &INSD.GPCH_RP_AMOUNT10
  let $Status_Ins                = rtrim(&INSD.STATUS,' ')
  let $FirstRow                  = 'N'
  let $Slice_E_Ins               = &INSD.SLICE_END_DT
  let $N_Id_Ins                  = rtrim(&RP01.NATIONAL_ID,' ')
  let $NNSS_Id_Ins               = rtrim(&RP01.GPCH_AH_NNSS,' ')

from PS_GPCH_RP_FK02 INSD, PS_GPCH_RP_0001 RP01
where INSD.EMPLID             = RP01.EMPLID
AND   INSD.EMPL_RCD           = RP01.EMPL_RCD
AND   INSD.CAL_RUN_ID         = RP01.CAL_RUN_ID
AND   INSD.CAL_ID             = RP01.CAL_ID
AND   INSD.GP_PAYGROUP        = RP01.GP_PAYGROUP
AND   INSD.RSLT_SEG_NUM       = RP01.RSLT_SEG_NUM
AND   INSD.SLICE_END_DT       = RP01.SLICE_END_DT
AND   INSD.EMPLID             = &FK2.EMPLID
AND   INSD.EMPL_RCD           = &FK2.EMPL_RCD
AND   INSD.PAY_ENTITY         = $Ctl_PayEntity
AND   INSD.PRD_END_DT BETWEEN $Ctl_Start_Dt and $Ctl_End_Dt

#ifdef ORACLE
AND   INSD.GPCH_AL_CPAY_ENDDT = (select /*+ INDEX(INSD1 PS_GPCH_RP_FK02)*/  max(INSD1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 INSD1
#else
AND   INSD.GPCH_AL_CPAY_ENDDT = (select max(INSD1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 INSD1
#endif
                                  where INSD1.EMPLID     = INSD.EMPLID
                                  AND   INSD1.EMPL_RCD   = INSD.EMPL_RCD
                                  AND   INSD1.PRD_END_DT = INSD.PRD_END_DT)
[$Cal_Run_Id_CriteriaI]
[$Ctl_Canton_CritE2]
order by INSD.EMPLID,INSD.PRD_END_DT,INSD.SLICE_END_DT,INSD.STATE
end-select
    

   ! Speichern letzter Satz
   if $FirstRow = 'N'
        ! let #Fte_Ins                   = 0
        ! let #StdHrs_Ins                = 0

      do InsertFk01Data
      do InsertData
   end-if

#Debug Show '<- InsertFk02Data '
end-procedure
!*********************************************************************************************
begin-procedure InsertData

if $Empl_ID_Ins = ''
  let $Empl_ID_Ins = ' '
end-if

if $Pay_Entity_Ins = ''
   let $Pay_Entity_Ins = ' '
end-if

if $Company_Ins = ''
   let $Company_Ins = ' '
end-if

if $DeptId_Ins = ''
   let $DeptId_Ins = ' '
end-if

if $State_Ins = ''
   let $State_Ins = ' '
end-if

if $CompFrequ_Ins = ''
   let $CompFrequ_Ins = ' '
end-if

if $Status_Ins = ''
   let $Status_Ins = ' '
end-if
!FMB National from GPCH_RP_0001
 If $N_Id_Ins = ''
   let $N_Id_Ins = ' '
 End-if
 If $NNSS_Id_Ins = ''
   let $NNSS_Id_Ins = ' '
 End-if


Begin-Sql on-error=give_warning
!FMB added National_Id
insert into PS_GPCHAL052_TMP(PROCESS_INSTANCE,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,PAY_ENTITY,COMPANY,DEPTID,STATE,
                            HIRE_DT,TERMINATION_DT,BIRTHDATE,FTE,STD_HOURS,COMP_FREQUENCY,GPCH_RP_AMOUNT1,GPCH_RP_AMOUNT2,
                            GPCH_RP_AMOUNT3,GPCH_SI_FAK_PCT,GPCH_RP_AMOUNT4,GPCH_TX_STAXB_PCT,GPCH_RP_AMOUNT5,
                            GPCH_RP_AMOUNT6,GPCH_RP_AMOUNT7,GPCH_RP_AMOUNT8,GPCH_RP_AMOUNT9,GPCH_RP_AMOUNT10,
                            STATUS, NATIONAL_ID,GPCH_AH_NNSS,SEX)
                      values(#prcs_process_instance,$Empl_ID_Ins,#Empl_RCD_Ins,$B_DT_Ins,$E_DT_Ins,
                            $Pay_Entity_Ins,$Company_Ins,$DeptId_Ins,$State_Ins,$HireDt_Ins,$TermDt_Ins,
                            $BirthDt_Ins,#Fte_Ins,#StdHrs_Ins,$CompFrequ_Ins,#Amount1_Ins,#Amount2_Ins,#Amount3_Ins,
                            #SiFakPct_Ins,#Amount4_Ins,#TxStaxbPct_Ins,#Amount5_Ins,#Amount6_Ins,#Amount7_Ins,
                            #Amount8_Ins,#Amount9_Ins,#Amount10_Ins,$Status_Ins,$N_Id_Ins,$NNSS_Id_Ins,' ')
end-sql

let $InsertRow = 'N'

let $Empl_ID_Ins               = ''
let #Empl_RCD_Ins              = 0
let $B_DT_Ins                  = ''
let $E_DT_Ins                  = ''
let $Pay_Entity_Ins            = ''
let $Company_Ins               = ''
let $DeptId_Ins                = ''
let $State_Ins                 = ''
let $HireDt_Ins                = ''
let $TermDt_Ins                = ''
let $BirthDt_Ins               = ''
let #Fte_Ins                   = 0
let #StdHrs_Ins                = 0
let $CompFrequ_Ins             = ''
let #Amount1_Ins               = 0
let #Amount2_Ins               = 0
let #Amount3_Ins               = 0
let #SiFakPct_Ins              = 0
let #Amount4_Ins               = 0
let #TxStaxbPct_Ins            = 0
let #Amount5_Ins               = 0
let #Amount6_Ins               = 0
let #Amount7_Ins               = 0
let #Amount8_Ins               = 0
let #Amount9_Ins               = 0
let #Amount10_Ins              = 0
let $Status_Ins                = ''
let $N_Id_ins                  = ''
let $NNSS_Id_ins               = ''

end-procedure
!**************************************************************************
begin-procedure InsertFk01Data
#Debug Show '-> InsertFk01Data ' &FK2.EMPLID  ' , ' $B_DT_Ins ' , ' $E_DT_Ins
 
begin-select distinct
#ifdef ORACLE
/*+ INDEX(INSCD PS_GPCH_RP_FK01) INDEX(INSPR PS_GPCH_RP_FK02)*/
#endif
INSCD.DEPENDENT_BENEF

  do InsertFk01Data1
  
FROM PS_GPCH_RP_FK01 INSCD , PS_GPCH_RP_FK02 INSPR
WHERE INSCD.EMPLID             = INSPR.EMPLID
AND   INSCD.CAL_RUN_ID         = INSPR.CAL_RUN_ID
AND   INSCD.EMPL_RCD           = INSPR.EMPL_RCD
AND   INSCD.GP_PAYGROUP        = INSPR.GP_PAYGROUP
AND   INSCD.CAL_ID             = INSPR.CAL_ID
AND   INSCD.RSLT_SEG_NUM       = INSPR.RSLT_SEG_NUM
AND   INSCD.SLICE_END_DT       = INSPR.SLICE_END_DT
AND   INSCD.EMPLID     = &FK2.EMPLID
AND   INSCD.EMPL_RCD   = &FK2.EMPL_RCD
AND   INSCD.PAY_ENTITY = $Ctl_PayEntity
AND   INSPR.SLICE_END_DT BETWEEN $B_DT_Ins and $E_DT_Ins
#ifdef ORACLE
AND   INSPR.GPCH_AL_CPAY_ENDDT =  (select /*+ INDEX(INSC1D PS_GPCH_RP_FK02)*/ max(INSC1D.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 INSC1D
#else
AND   INSPR.GPCH_AL_CPAY_ENDDT =  (select max(INSC1D.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_FK02 INSC1D
#endif
                                   where INSC1D.EMPLID     = INSPR.EMPLID
                                   AND   INSC1D.EMPL_RCD   = INSPR.EMPL_RCD
                                   AND   INSC1D.PRD_END_DT = INSPR.PRD_END_DT)
[$Cal_Run_Id_CriteriaICD]
[$Ctl_Canton_CritE3]


end-select
#Debug Show '<- InsertFk01Data '
end-procedure
!**************************************************************************
begin-procedure InsertFk01Data1
#Debug Show '   -> InsertFk01Data1 ' &FK2.EMPLID  ' , ' $B_DT_Ins ' , ' $E_DT_Ins ' , ' &INSCD.DEPENDENT_BENEF  ' , ' $Cal_Run_Id_CriteriaIC

  let $Empl_ID_InsC       = ''
  let #Empl_RCD_InsC      = 0
  let $B_DT_InsC          = ''
  let $E_DT_InsC          = ''
  let $Pay_Entity_InsC    = ''
  let $Company_InsC       = ''
  let $DependBen_InsC     = ''
  let $BirthDate_InsC     = ''
  let $CaEduEndDt_InsC    = ''
  let $Name_InsC          = ''
  let $Student_InsC       = ''
  let $Disabled_InsC      = ''
  let #Sequence_InsC      = 0
  let #Amount1_InsC       = 0
  let #Amount2_InsC       = 0
  let #Amount3_InsC       = 0
  let #Amount4_InsC       = 0
  let #Amount5_InsC       = 0
  let $Status_InsC        = ''
  let $FirstRowC          = 'Y'

begin-select
#ifdef ORACLE
/*+ INDEX(INSC PS_GPCH_RP_FK01)*/
#endif
INSC.PAY_ENTITY
INSC.COMPANY
INSC.PRD_END_DT
INSC.GPCH_AL_CPAY_ENDDT
INSC.GPCH_RP_YEAR
INSC.DEPENDENT_BENEF
INSC.BIRTHDATE
INSC.GPCH_CA_EDU_END_DT
INSC.NAME
INSC.STUDENT
INSC.DISABLED
INSC.SEQ_NO
INSC.GPCH_RP_AMOUNT1
INSC.GPCH_RP_AMOUNT2
INSC.GPCH_RP_AMOUNT3
INSC.GPCH_RP_AMOUNT4
INSC.GPCH_RP_AMOUNT5
INSC.STATUS

  let $Empl_ID_InsC       = $Empl_ID_Ins
  let #Empl_RCD_InsC      = #Empl_RCD_Ins
  let $B_DT_InsC          = $B_DT_Ins
  let $E_DT_InsC          = $E_DT_Ins
  let $Pay_Entity_InsC    = $Pay_Entity_Ins
  let $Company_InsC       = $Company_Ins
  let $DependBen_InsC     = rtrim(&INSC.DEPENDENT_BENEF,' ')
  let $BirthDate_InsC     = &INSC.BIRTHDATE
  let $CaEduEndDt_InsC    = &INSC.GPCH_CA_EDU_END_DT
  let $Name_InsC          = rtrim(&INSC.NAME,' ')
  let $Student_InsC       = rtrim(&INSC.STUDENT,' ')
  let $Disabled_InsC      = rtrim(&INSC.DISABLED,' ')
  let #Sequence_InsC      = &INSC.SEQ_NO
  let #Amount1_InsC       = #Amount1_InsC + &INSC.GPCH_RP_AMOUNT1
  let #Amount2_InsC       = #Amount2_InsC + &INSC.GPCH_RP_AMOUNT2
  let #Amount3_InsC       = #Amount3_InsC + &INSC.GPCH_RP_AMOUNT3
  let #Amount4_InsC       = #Amount4_InsC + &INSC.GPCH_RP_AMOUNT4
  let #Amount5_InsC       = #Amount5_InsC + &INSC.GPCH_RP_AMOUNT5
  let $Status_InsC        = rtrim(&INSC.STATUS,' ')
  let $FirstRowC          = 'N'

FROM PS_GPCH_RP_FK01 INSC , PS_GPCH_RP_FK02 INSTR
WHERE INSC.EMPLID             = INSTR.EMPLID
AND   INSC.CAL_RUN_ID         = INSTR.CAL_RUN_ID
AND   INSC.EMPL_RCD           = INSTR.EMPL_RCD
AND   INSC.GP_PAYGROUP        = INSTR.GP_PAYGROUP
AND   INSC.CAL_ID             = INSTR.CAL_ID
AND   INSC.RSLT_SEG_NUM       = INSTR.RSLT_SEG_NUM
AND   INSC.SLICE_END_DT       = INSTR.SLICE_END_DT
AND   INSC.EMPLID             = &FK2.EMPLID
AND   INSC.EMPL_RCD           = &FK2.EMPL_RCD
AND   INSC.DEPENDENT_BENEF    = &INSCD.DEPENDENT_BENEF
AND   INSC.PAY_ENTITY         = $Ctl_PayEntity
AND   INSTR.SLICE_END_DT BETWEEN $B_DT_Ins AND $E_DT_Ins
#ifdef ORACLE
AND   INSTR.GPCH_AL_CPAY_ENDDT = (SELECT /*+ INDEX(INSC1 PS_GPCH_RP_FK02)*/ MAX(INSC1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_FK02 INSC1
#else
AND   INSTR.GPCH_AL_CPAY_ENDDT = (SELECT MAX(INSC1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_FK02 INSC1
#endif
                                  WHERE INSC1.EMPLID          = INSTR.EMPLID
                                  AND   INSC1.EMPL_RCD        = INSTR.EMPL_RCD
                                  AND   INSC1.PRD_END_DT      = INSTR.PRD_END_DT)
[$Cal_Run_Id_CriteriaIC]
[$Ctl_Canton_CritE4] 

order by INSC.PRD_END_DT,INSC.SLICE_END_DT
end-select

! Speichern letzter Satz
if $FirstRowC = 'N'
   do InsertDataChildren
end-if

end-procedure
!********************************************************************************
begin-procedure InsertDataChildren
#Debug Show ' -> InsertDataChildren'  $Empl_ID_InsC ' , ' $B_DT_InsC ' , '  $E_DT_InsC

if $Empl_ID_InsC = ''
  let $Empl_ID_InsC = ' '
end-if

if $Pay_Entity_InsC = ''
   let $Pay_Entity_InsC = ' '
end-if

if $Company_InsC = ''
   let $Company_InsC = ' '
end-if

if $DependBen_InsC = ''
   let $DependBen_InsC = ' '
end-if

if $Name_InsC = ''
   let $Name_InsC = ' '
end-if

if $Student_InsC = ''
   let $Student_InsC = ' '
end-if

if $Disabled_InsC = ''
   let $Disabled_InsC = ' '
end-if

if $Status_InsC = ''
   let $Status_InsC = ' '
end-if

Begin-Sql on-error=give_warning
insert into PS_GPCHAL051_TMP(PROCESS_INSTANCE,EMPLID,EMPL_RCD,BEGIN_DT,DEPENDENT_BENEF,END_DT,PAY_ENTITY,COMPANY,
                            BIRTHDATE, GPCH_CA_EDU_END_DT,NAME,STUDENT,DISABLED,SEQ_NO,GPCH_RP_AMOUNT1,
                            GPCH_RP_AMOUNT2,GPCH_RP_AMOUNT3,GPCH_RP_AMOUNT4,GPCH_RP_AMOUNT5,STATUS,GPCH_CA_RELATION,GPCH_CA_TYPE,GPCH_TX_CANTON)
                    values (#prcs_process_instance,$Empl_ID_InsC, #Empl_RCD_InsC, $B_DT_InsC,$DependBen_InsC,
                            $E_DT_InsC, $Pay_Entity_InsC,$Company_InsC,$BirthDate_InsC,$CaEduEndDt_InsC,
                            $Name_InsC,$Student_InsC,$Disabled_InsC,#Sequence_InsC,#Amount1_InsC,#Amount2_InsC,
                            #Amount3_InsC, #Amount4_InsC, #Amount5_InsC, $Status_InsC,' ',0,' ')
end-sql

let $InsertRowC = 'N'

let $Empl_ID_InsC       = ''
let #Empl_RCD_InsC      = 0
let $B_DT_InsC          = ''
let $E_DT_InsC          = ''
let $Pay_Entity_InsC    = ''
let $Company_InsC       = ''
let $DependBen_InsC     = ''
let $BirthDate_InsC     = ''
let $CaEduEndDt_InsC    = ''
let $Name_InsC          = ''
let $Student_InsC       = ''
let $Disabled_InsC      = ''
let #Sequence_InsC      = 0
let #Amount1_InsC       = 0
let #Amount2_InsC       = 0
let #Amount3_InsC       = 0
let #Amount4_InsC       = 0
let #Amount5_InsC       = 0
let $Status_InsC        = ''


end-procedure
!***********************************************************************
begin-procedure Get-MBR-ID
#DEBUG show '<- Get-MBR-ID  '

 show '$SPRV_TYPE = ' $SPRV_TYPE
 show '$SPRV_CD = ' $SPRV_CD
 show '$SPRV_CANTON = ' $SPRV_CANTON
 show '$SPRV_ALL = ' $SPRV_ALL
 show '$Tmp_AsOfDate = ' $Tmp_AsOfDate
 show '$ctl_end_dt = ' $ctl_end_dt
 show '$Ctl_Company = ' $Ctl_Company
 show '$Ctl_Com = ' $Ctl_Com
 show '$comp = ' $comp

 Let $MBR_ID = ' '

Begin-Select
MBR.GPCH_SI_UV_MBR_ID     &MBR_ID

 Let $MBR_ID =  &MBR_ID

FROM PS_GPCH_SI_ACC_INS MBR
WHERE MBR.COMPANY =  $Ctl_Company
AND   MBR.GPCH_SI_PROV_TYPE = $SPRV_TYPE
AND  ( MBR.GPCH_TX_CANTON = $SPRV_CANTON or MBR.GPCH_ALL_CANTONFLG = $SPRV_ALL )
AND   MBR.EFFDT = (SELECT MAX(MBR2.EFFDT) FROM PS_GPCH_SI_ACC_INS MBR2
        WHERE MBR.COMPANY = MBR2.COMPANY
         AND  MBR.GPCH_SI_PROV_TYPE = MBR2.GPCH_SI_PROV_TYPE
         AND  MBR.GPCH_TX_UV_PROV_CD = MBR2.GPCH_TX_UV_PROV_CD
         AND  MBR2.EFFDT <= $Ctl_End_Dt)
End-select

 show '$MBR_ID = ' $MBR_ID

#DEBUG show '<- Get-MBR-ID  '
end-procedure Get-MBR-ID

!***********************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Eng_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHAL04
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Ger_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHAL04
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Ita_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHAL04
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Fra_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHAL04
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut02.sqc'
#include 'gpchut04.sqc'  !get company informations
#include 'gpchut06.sqc'  !get run control parameter values
#include 'gpchut07.sqc'  !Log Output Selection
#include 'gpchut11.sqc'  !get Tax and Fak Values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'datemath.sqc'  !function for date-calculation
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'gpchal4s.sqc'  !Get Strings Values for GPCHAL04
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB