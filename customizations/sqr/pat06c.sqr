!***********************************************************************
!  Social Security Calculation Worksheet General Testing Version
!***********************************************************************
!  C H A N G E  L O G
!
!  DATE      ID  REASON
!  -----    ---  ------------------------------------------------------
!
! 2/19/2006  PY  Fix for Calculations with All Plans checked  
!
! 6/8/2001  AJP  FIX CALC_TS DATE PROBLEM IN ORACLE/UNIX ENVIRONMENT
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/17:15:00:15                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment


begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Reset
  do StdApi-Term
end-report

#Include 'setup31.sqc'  !printer and page-size initialization


!* The below section defines various column lengths and widths as    *!
!* variables.  This is intended to ease the formatting of data.      *!

#define col1hdg     1,20
#define col2hdg     21,20
!* Changed By Rajiv Gupta For Printing CALC_NAME from 10 bytes to 20 bytes/ 09/26/1997 *!
#define col3hdg     44,12
!* Changed By Rajiv Gupta col3hdg from 42 to 44 *!
#define col3ahdg    42,40
!* Changed By Rajiv Gupta For Printing CALC_NAME from 10 bytes to 20 bytes/ 09/26/1997 *!
#define col4hdg     57,25
!* Changed By Rajiv Gupta col4hdg from 55 to 57 *!
#define col5hdg     91,10
#define col6hdg     102,20


#define col1arry    1,5
#define col2arry    11,12
#define col3arry    25,15
#define col4arry    39,1
#define col5arry    45,55
#define col6arry    65,10
#define col7arry    80,15
#define col8arry    100,15

#define col1rslt    1,40
#define col2rslt    41,15
#define colmidrslt  41,30
#define col3rslt    65,30
#define col4rslt    100,15


#define header-lines 8
begin-HEADING {header-lines}
  #Include 'stdhdg01.sqc'
  #Include 'pahdg06c.sqc'
end-HEADING

!* The below sections determine if the report was started from within   *!
!* tools or from the SQRW icon.  If it was started from the icon,       *!
!* prompt the user to enter the calculation name and employee id,       *!
!* (Ask-Values).  Otherwise get the values from the run control table   *!
!* with the run control id and oprid passed from the process scheduler. *!
!* (Get-Values).                                                        *!

begin-procedure Init-Report
  move 'PAT06C' to $ReportID
  move 'Social Security Worksheet' to $ReportTitle
  display $ReportTitle
  do StdApi-Init
  if $prcs_process_instance = ''
   do Ask-values
  else
   do Get-values-pa
  end-if
  do Get_CalcRun_DateTime
end-procedure

begin-procedure Get-Values-pa
!No Prompt
  do Select-Parameters-PA
  let $calc_name = &pa_run_cntl.calc_name
  let $emplid    = &pa_run_cntl.emplid
end-procedure

begin-procedure Ask-Values
  input $calc_name_inpt     'Enter Calculation Name'
  input $emplid_inpt        'Enter Employee ID'
  let $calc_name    = rtrim($calc_name_inpt,'')
  let $emplid       = rtrim($emplid_inpt,'')
end-procedure


begin-procedure Get_CalcRun_DateTime
let $sql-statement = 'PAT06C - Calculation Date Time select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
{DateTimeOut-Prefix}CALC_TS{DateTimeOut-Suffix}  &CALC_TS
  move '1' to $Year4
  move '1' to $TLZero
  do Format-DateTime(&calc_ts, $calc_ts, {DEFDATE}, 'time', '',)
CALC_ALL_PLANS_CD
  let $calc_all_plans_cd = &calc_all_plans_cd
FROM PS_PA_CALCULATION
WHERE CALC_NAME = $calc_name
END-SELECT
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure Process-Main

do Initialize
do Process-Emp-Info-Section
let $sql-statement = 'PAT06C - Calculation Plan select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PA_PLAN.BENEFIT_PLAN
  let #nbr_benefit_plans = #nbr_benefit_plans + 1
  if #nbr_benefit_plans > 1
     new-page
  end-if

  let $plan_name         = &pa_plan.benefit_plan
  do Process-Plan-Lvl-Info
FROM PS_PA_CALCULATION PA_CALC1, PS_PA_PROC PA_PLAN,
PS_PA_CLC_PLN_INPT    CLC_PLN_INPT
WHERE PA_CALC1.CALC_NAME = $calc_name
AND CLC_PLN_INPT.CALC_NAME    = $calc_name
AND ((CLC_PLN_INPT.BENEFIT_PLAN = PA_PLAN.BENEFIT_PLAN
OR PA_CALC1.CALC_ALL_PLANS_CD = 'Y')  
AND PA_PLAN.EFFDT = (SELECT MAX (B.EFFDT) FROM PS_PA_PROC B
WHERE B.BENEFIT_PLAN = PA_PLAN.BENEFIT_PLAN
AND B.EFFDT <= PA_CALC1.ASOFDATE))
ORDER BY PA_PLAN.BENEFIT_PLAN
END-SELECT
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure Initialize

create-array name=function-result size=100
   field = functn-rslt:char
   field = functn-descr:char
   field = eacct-type:char
move 0 to #counter
move 0 to #nbr_benefit_plans
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Process-Emp-Info-Section

let $sql-statement = 'PAT06C - Employee Data View select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_EMP_VW.EVENT_DT
  move '1' to $Year4
  do Format-DateTime(&clc_emp_vw.event_dt, $event_dt, {DEFDATE}, '', '',)
CLC_EMP_VW.CALC_REASON
CLC_EMP_VW.NAME
CLC_EMP_VW.BIRTHDATE
  move '1' to $Year4
  do Format-DateTime(&clc_emp_vw.birthdate, $birthdate, {DEFDATE}, '', '',)
CLC_EMP_VW.PROCESS_INSTANCE
  let $fieldname   = 'CALC_REASON'
  let $fieldvalue  = &clc_emp_vw.calc_reason
  do read-translate-table
  let $event_reason     = $xlatlongname
  let $emp_name         = &clc_emp_vw.name
  let #process_instance = &clc_emp_vw.process_instance
FROM PS_PA_CLC_EMP_VW   CLC_EMP_VW
WHERE CLC_EMP_VW.CALC_NAME    = $calc_name
  AND CLC_EMP_VW.EMPLID       = $emplid
end-select
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure Process-Plan-Lvl-info

let $functn_name = 'SOCSEC'
if $calc_all_plans_cd = 'Y'
  do get-function-result-all-plans
else
  do get-function-result
end-if
move 0 to #loop
while #loop < #counter
  get $functn_result_nm from function-result(#loop)
  if #loop > 0
     new-page
  end-if
  do Function-Results-Block
  do Array-Block
  add 1 to #loop
end-while
end-procedure


!***********************************************************************
!***********************************************************************
begin-procedure Function-Results-Block

let $sql-statement = 'PAT06C - Soc Sec PIA Amounts'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_SOC_VW.PIA_AMT
CLC_SOC_VW.PIA_AMT_ADJ
CLC_SOC_VW.DESCR
  let $pia_amt                    = LTRIM(edit (&clc_soc_vw.pia_amt,'$$$,$$$,$$9.99'),' ')
  let $pia_amt_adj                = LTRIM(edit (&clc_soc_vw.pia_amt_adj,'$$$,$$$,$$9.99'),' ')
  let $functn_result_descr        = &clc_soc_vw.descr
FROM PS_PA_CLC_SOC_VW   CLC_SOC_VW
WHERE CLC_SOC_VW.CALC_NAME        = $calc_name
  AND CLC_SOC_VW.EMPLID           = $emplid
  AND CLC_SOC_VW.BENEFIT_PLAN     = $plan_name
  AND CLC_SOC_VW.FUNCTN_RESULT_NM = $functn_result_nm
END-SELECT


let $fld_name = 'ELIG_YR'
do get-decimal-value
if $return_flag = 'Y'
 let $elig_yr = LTRIM(edit (#return_value, '9999'),' ')
else
 let $elig_yr = ' '
end-if


let $fld_name = 'INDEX_YR'
do get-decimal-value
if $return_flag = 'Y'
 let $index_yr = LTRIM(edit (#return_value, '9999'),' ')
else
 let $index_yr = ' '
end-if


let $fld_name = 'AVGWAGES_INDEX_YR'
do get-decimal-value
if $return_flag = 'Y'
 let $avgwages_index_yr = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
else
 let $avgwages_index_yr  = '$0.00'
end-if


let $fld_name = 'COMPUTATION_YRS'
do get-decimal-value
if $return_flag = 'Y'
 let $computation_yrs = LTRIM(edit (#return_value, '99'),' ')
else
 let $index_yr = ' '
end-if

let $fld_name = 'AIME'
do get-decimal-value
if $return_flag = 'Y'
 let $aime = LTRIM(edit (#return_value,'$$$,$$$,$$9.99'),' ')
else
 let $aime  = '$0.00'
end-if

let $fld_name = 'SOC_SEC_AGE'
do get-decimal-value
if $return_flag = 'Y'
 let $ssraw = LTRIM(edit (#return_value,'9999'),' ')
 let $ssyrs = SUBSTR ($ssraw,1,2)
 let $ssmos = SUBSTR ($ssraw,3,2)
 if $ssyrs = '0'
    let $ssra = ' '
 else
    if $ssmos = '00'
        let $ssra = $ssyrs || ' yrs'
    else
        let $ssra = $ssyrs || ' yrs ' || $ssmos || ' mos'
    end-if
 end-if
end-if

let $fld_name = 'SOC_SEC_BCD'
do get-date-value
if $return_flag = 'Y'
 let $ssbcd = $return_value
end-if


print 'Social Security'                     (+1,{col1rslt})
print $functn_result_descr                    (,{colmidrslt})
print $functn_result_nm                       (,{col4rslt})

print 'Primary Insurance Amount:'           (+2,{col1rslt})
print $pia_amt                                (,{col2rslt})
print '# of Computation Yrs:'                 (,{col3rslt})
print $computation_yrs                        (,{col4rslt})

print 'Adjusted Primary Insurance Amt:'     (+1,{col1rslt})
print $pia_amt_adj                            (,{col2rslt})
print 'AIME:'                                 (,{col3rslt})
print $aime                                   (,{col4rslt})

print 'Eligibility Year:'                   (+1,{col1rslt})
print $elig_yr                                (,{col2rslt})
print 'Birthdate:'                            (,{col3rslt})
print $birthdate                              (,{col4rslt})

print 'NAW Indexing Year:'                      (+1,{col1rslt})
print $index_yr                               (,{col2rslt})
print 'Social Security Age:'                  (,{col3rslt})
print $ssra                                   (,{col4rslt})

print 'NAW Index Year Amount:'              (+1,{col1rslt})
print  $avgwages_index_yr                     (,{col2rslt})
print 'Social Security BCD:'                  (,{col3rslt})
print $ssbcd                                  (,{col4rslt})
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure Array-Block

move '0' to $header_printed
let $sql-statement = 'PAT06C - Retreive Social Security Array'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CLC_SOC_AY.CALENDAR_YR    &clc_soc_ay.CALENDAR_YR
CLC_SOC_AY.SOC_SEC_FLAG   &clc_soc_ay.SOC_SEC_FLAG

  if $header_printed = '0'
     do Print-Soc-Array-Header
     move '1' to $header_printed
  end-if

  let $soc_sec_display = &clc_soc_ay.SOC_SEC_FLAG
  if  $soc_sec_display = 'Y' AND &CLC_SOC_AY.EARNED_AMT > 0
      move '*' to $soc_sec_display
      move 'Y' to $write_message
  else
      move ' ' to $soc_sec_display
  end-if

  print &clc_soc_ay.CALENDAR_YR (+1,{col1arry})
CLC_SOC_AY.TWB_AMT                (,{col2arry}) edit 999,999.99
CLC_SOC_AY.EARNED_AMT             (,{col3arry}) edit 999,999,999.99
  print $soc_sec_display            (,{col4arry})
CLC_SOC_AY.CVRD_AMT               (,{col5arry}) edit 999,999,999.99
CLC_SOC_AY.USAW_AMT               (,{col6arry}) edit 999,999.99
CLC_SOC_AY.IDXD_AMT               (,{col7arry}) edit 999,999,999.99
CLC_SOC_AY.HIGH_AMT               (,{col8arry}) edit 999,999,999.99
FROM PS_PA_CLC_SOC_AY      CLC_SOC_AY
WHERE CLC_SOC_AY.CALC_NAME        = $calc_name
  AND CLC_SOC_AY.EMPLID           = $emplid
  AND CLC_SOC_AY.BENEFIT_PLAN     = $plan_name
  AND CLC_SOC_AY.FUNCTN_RESULT_NM = $functn_result_nm
ORDER BY CLC_SOC_AY.CALENDAR_YR
END-SELECT

  if  $write_message = 'Y'
      print '* Social Security Earnings Used Instead of Consolidated Earnings' (+3,1,80)
  end-if
end-procedure


begin-procedure Print-Soc-Array-Header

print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' (+2,1)
print 'Taxable Wage'                            (+1,{col2arry})
print 'Actual Empl'                               (,{col3arry})
print 'Taxable'                                   (,{col5arry})
print 'Natl Avg'                                  (,{col6arry})
print 'Indexed'                                   (,{col7arry})
print 'Indexed Amount'                            (,{col8arry})

print 'Year'                                    (+1,{col1arry})
print 'Base Amount'                               (,{col2arry})
Print 'Earnings'                                  (,{col3arry})
print 'Earnings'                                  (,{col5arry})
print 'Earnings'                                  (,{col6arry})
print 'Amount'                                    (,{col7arry})
print 'Used in Calc'                              (,{col8arry})

print '~~~~'                                    (+1,{col1arry})
print '~~~~~~~~~~~~'                              (,{col2arry})
print '~~~~~~~~~~~~~~'                            (,{col3arry})
print '~~~~~~~~~~~~~~'                            (,{col5arry})
print '~~~~~~~~~~'                                (,{col6arry})
Print '~~~~~~~~~~~~~~'                            (,{col7arry})
print '~~~~~~~~~~~~~~'                            (,{col8arry})
end-procedure

!***********************************************************************
!***********************************************************************

#include 'stdapi.sqc'    !Update Process Request API
#include 'parnctl1.sqc'  !Get run control parameter values
#include 'pagetval.sqc'  !Get values mask routines
#include 'readxlat.sqc'  !read translate table
#include 'paresult.sqc'  !read results table
#include 'pafunctn.sqc'  !read function table
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
