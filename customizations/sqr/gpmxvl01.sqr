!***********************************************************************
!GPMXVL01. Coupons Report (Interfase de Pago de Vales  ACCOR, SODEXHO )*
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  31820991                                            *
!                                                                      *
!***********************************************************************

#define c1 16
#define c3 20
#define c4 40
#define c5 90
#define c6 115
#define c6b 130
#define c7  160
#define c7a 165
#define c98 155
#define c99 166

#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  move '2' to $ReportDateType
  move '1' to $Reportyear4
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Init-Report
  do Select-Parameters
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do Stdapi-Term
  do Reset
end-report

begin-procedure Init-Report
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  move 'GPMXVL01' to $ReportID
  let $ReportTitle = 'INTERFASE PAGO VALES'
  display $ReportTitle
  show 'Ver.2020 PUM36.01'
  show ' '
end-procedure Init-Report

begin-heading 09
  print 'PeopleSoft'  (1,) center
  print $ReportTitle  (2,) center
  print 'Reporte: '   (3,1)
  print $ReportID     (,{c1})
  uppercase $ReportTitle
  print 'Compañía:'   (4,1)
  print $Company      (,{c1})
  print $CompanyName  (,+1)
  print 'Periodo:'    (5,1)
  do Format-DateTime($Acm_From_Dt, $Out,{DEFDATE}, '','')
  print $out          (,{c1})
  print ' al '        (,)
  do Format-DateTime($Acm_Thru_Dt, $out, {DEFDATE}, '', '')
  print $out          (,)
  if $Gp_PayGroup <> $PriorPayGroup
     do Get-PayGroup-Data
     move $Gp_PayGroup to $PriorPayGroup
  end-if
  Print 'Grupo de Pago:'  (6,1)
  Print $Gp_PayGroup      (,{c1})
  
  print 'Página:'     (3,{c98})
  page-number         (,{c99})
  print 'Fecha:'      (4,{c98})
  !print $ReportDate   (,{c99}) 
  do Format-DateTime($AsOfToday, $out, {DEFDMY},'','')  
  print $Out   (,{c99}) 
  
  print 'Hora:'       (5,{c98})
  print $ReportTime   (,{c99})
  
  Print '='               (7,1,173) fill
  if $supplier = '0010'
     print 'No. Cliente'           (+1,1)
     print 'C. Empleado'           ( ,{c3})
     print 'Nombre del Empleado'   ( ,{c4})
     print 'Departamento'          ( ,{c5})
     print 'Localidad'             ( ,{c6})
     if $FS_Type = '0050'
        print 'Cuenta'             ( ,{c6b})
     end-if
     print 'Importe'               ( ,{c7a})
  else
     print 'Sucursal'              (+1,1)
     print 'C. Empleado'           ( ,{c3})
     print 'Nombre del Empleado'   ( ,{c4})
     print 'Departamento'          ( ,{c5})
     print 'Número'                ( ,{c6})
     print 'Importe'               ( ,{c7a})
  end-if
  Print '='               (+1,1,173) fill
end-heading

!######################################
begin-procedure Select-Parameters
#debug show 'Select-Parameters'
Let $product = ''

begin-SELECT
RCCOUP.RUN_CNTL_ID
RCCOUP.CAL_RUN_ID
RCCOUP.GPMX_FC_TYPE
RCCOUP.GPMX_FC_CLIENT_ID
RCCOUP.COMPANY
RCCOUP.GPMX_FC_BRANCH
RCCOUP.GPMX_FC_PROVIDER
RCCOUP.FILENAME
RCCOUP.GPMX_BRANCH
RCCOUP.GPMX_GROUP_ID
RCCOUP.GPMX_CUSTOMER
RCCOUP.GPMX_DATE      

       let $Company    = &RCCOUP.COMPANY
       let $Run_ID     = rtrim(&RCCOUP.RUN_CNTL_ID,' ')
       let $Cal_Run_Id = rtrim(&RCCOUP.CAL_RUN_ID,' ')
       let $supplier    = &RCCOUP.GPMX_FC_PROVIDER
       let $filename   = rtrim(&RCCOUP.FILENAME,' ')
       let #Client_ID  = &RCCOUP.GPMX_FC_CLIENT_ID
       let $Client_ID  = to_char(#Client_ID)
       let $Client_ID  = rtrim($Client_ID,' ')
       Let $Client_ID  = EDIT($Client_ID,'00000000')
       Let $branchIDAcor  = EDIT(&RCCOUP.GPMX_BRANCH, '000')
       Let $customer   = &RCCOUP.GPMX_CUSTOMER
       Let $GroupID = rtrim(&RCCOUP.GPMX_GROUP_ID,' ')
       
       Do Convert-To-DTU-Date(&RCCOUP.GPMX_DATE,$deliveryDate)
       
       Let $accorYear = substr($deliveryDate, 1,4)
       Let $accorMonth = substr($deliveryDate, 6,2)
       Let $accorDay  = substr($deliveryDate, 9,2)
       
       Let $DeliveryDt = $accorYear || $accorMonth || $accorDay

       let $Branch = lpad(&RCCOUP.GPMX_FC_BRANCH,5,'0')
       let $FS_Type = &RCCOUP.GPMX_FC_TYPE
       
       if $supplier = '0010'
             
         Let $fixValue = 'A'        ! A=accor M=Multibonos
         evaluate $FS_Type
           when = '0020'
             Let $product = '002' !vales despensa
             break
           when  = '0010'
             Let $product = '001'
             break
           when = '0030'
             Let $product = '003'
             break
           when = '0040'
             Let $product = '004'
             break
           when = '0050'  
             Let $fixValue = '03'        ! Numérico Siempre inserte el 03 para Asignaciones 
             Let $product  = '012'
             break
         end-evaluate
       end-if
       
       Do Get-Payees

FROM  PS_GPMX_RC_COUPONS  RCCOUP
WHERE RCCOUP.OPRID       = $Prcs_OprID
AND   RCCOUP.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
end-procedure Select-Parameters


!######################################
begin-Procedure  Open-File

  let $filename = '{FILEPREFIX}' || $filename || '{FILESUFFIX}'
  if $supplier = '0010'
     if $FS_Type = '0050'
      open $filename as 1 for-writing record=70
     else
      open $filename as 1 for-writing record=67
     end-if
  else
      open $filename as 1 for-writing record=63
  end-if
  show 'Archivo: ' $filename 
end-procedure Open-File



!***************************** Close-File ***************************************
begin-Procedure  Close-File
    CLOSE 1
end-procedure Close-File


!***************************** Select-Pin_Name ***********************************
begin-procedure Select-Pin_Name
begin-select
PIN.PIN_NM

     let $PNm = &PIN.PIN_NM
     let $PNm = LTRIM($PNm,' ')

FROM PS_GP_PIN PIN
WHERE PIN.PIN_NUM = #PNum
end-select
end-procedure Select-Pin_Name

!######################################
begin-procedure Get-Payees
!show 'Get-Payees'
  let #Count = 0
begin-select
ACUMER.EMPLID
ACUMER.CAL_RUN_ID
ACUMER.GP_PAYGROUP
ACUMER.SLICE_BGN_DT
ACUMER.SLICE_END_DT
SUM(ACUMER.CALC_RSLT_VAL) &ACUMER.CALC_RSLT_VAL
SUM(ACUMER.CALC_ADJ_VAL)  &ACUMER.CALC_ADJ_VAL 
JJJ.DEPTID
JJJ.LOCATION

       move &ACUMER.EMPLID         to  $Emplid
       move &ACUMER.CAL_RUN_ID     to  $Cal_Run_ID
       move &ACUMER.GP_PAYGROUP    to  $Gp_PayGroup
       move &ACUMER.SLICE_BGN_DT   to  $Acm_From_Dt
       move &ACUMER.SLICE_END_DT   to  $Acm_Thru_Dt
       move &ACUMER.CALC_RSLT_VAL  to  #Calc_Rslt_Val
       move &ACUMER.CALC_ADJ_VAL   to  #Calc_Adj_Val
       
       let $Deptid   = &JJJ.DEPTID
       let $Location = &JJJ.LOCATION
       

       if EXISTS($filename) <> 0
          do Open-File
          do Get-Company-Data-Mex
          if $supplier = '0010'
            do Write-Header-ACCOR
          end-if
       end-if
  
       Let #Amount_Tot = #Calc_Rslt_Val + #Calc_Adj_Val
       
       if $supplier = '0010'
          If #Amount_Tot >= 10
             Let #Deposit_Int = #Amount_Tot * 100
             Let #Deposit_Int = TRUNC(#Deposit_Int,0)
             if $FS_Type = '0050'
                Let $Deposit = EDIT(#Deposit_Int,'000000000')
                
                Do Get-Payee-Data
             else
                Let $Deposit = EDIT(#Deposit_Int,'0000000')
             end-if
          else
             show 'No puede haber empleados con cantidad menores a $10: ' $Emplid ' ' #Amount_Tot
             Let #Amount_Tot = 0
          end-if
       else
          Let #Deposit_Int = #Amount_Tot * 100
          Let #Deposit_Int = TRUNC(#Deposit_Int,0)
          Let $Deposit = EDIT(#Deposit_Int,'000000000')
       end-if

       Do Read-Name
       if #Amount_Tot > 0
          add #Amount_Tot to #Tot_Amount
          Do Write-Rcd
       end-if       

FROM PS_GP_RSLT_ERN_DED  ACUMER, 
PS_JOB  JJJ

WHERE ACUMER.EMPLID = JJJ.EMPLID
AND ACUMER.EMPL_RCD = JJJ.EMPL_RCD
AND ACUMER.CAL_RUN_ID = $Cal_Run_Id
AND ACUMER.PIN_NUM IN (SELECT C.PIN_ERN_NUM 
                       FROM PS_GPMX_COUPONS C 
                       WHERE C.OPRID = $Prcs_OprID 
                       AND C.RUN_CNTL_ID = $Prcs_Run_Cntl_ID)
AND JJJ.COMPANY = $Company
AND JJJ.EFFDT = (SELECT MAX(JJJ_ED.EFFDT) FROM PS_JOB JJJ_ED
                 WHERE JJJ.EMPLID = JJJ_ED.EMPLID
                 AND JJJ.EMPL_RCD = JJJ_ED.EMPL_RCD
                 AND JJJ_ED.EFFDT <= $AsOfToday)
AND JJJ.EFFSEQ = (SELECT MAX(JJJ_ES.EFFSEQ) FROM PS_JOB JJJ_ES
                  WHERE JJJ.EMPLID = JJJ_ES.EMPLID
                  AND JJJ.EMPL_RCD = JJJ_ES.EMPL_RCD
                  AND JJJ.EFFDT = JJJ_ES.EFFDT)
AND ACUMER.SLICE_END_DT = (SELECT MAX(SLICE_END_DT) FROM PS_GP_RSLT_ERN_DED A2 
                           WHERE ACUMER.EMPLID = A2.EMPLID
                           AND ACUMER.EMPL_RCD = A2.EMPL_RCD
                           AND ACUMER.CAL_RUN_ID = A2.CAL_RUN_ID
                           AND ACUMER.GP_PAYGROUP = A2.GP_PAYGROUP)
GROUP BY ACUMER.EMPLID, ACUMER.CAL_RUN_ID, ACUMER.GP_PAYGROUP, ACUMER.SLICE_BGN_DT, ACUMER.SLICE_END_DT,
 JJJ.DEPTID,JJJ.LOCATION
ORDER BY ACUMER.GP_PAYGROUP
end-select

if #Tot_Amount > 0
  do Close-File
  do Print-Total
end-if
end-procedure Get-Payees

!**************************************
begin-procedure Acor-Totals

Let #totalAmount = 0

begin-select
A1.CAL_RUN_ID
SUM(A1.CALC_RSLT_VAL) &A1.CALC_RSLT_VAL
SUM(A1.CALC_ADJ_VAL)  &A1.CALC_ADJ_VAL 
     
  
  Let #totalAmount = &A1.CALC_RSLT_VAL + &A1.CALC_ADJ_VAL 
  Let #amountInt = #totalAmount * 100
  Let #amountInt = TRUNC(#amountInt,0)
  
  
  if $FS_Type = '0050'
     Let $totalAmount = EDIT(#amountInt,'000000000')
  else
     Let $totalAmount = EDIT(#amountInt,'00000000000000')
  end-if
  

FROM PS_GP_RSLT_ERN_DED  A1, 
     PS_JOB  JJJ
WHERE A1.EMPLID = JJJ.EMPLID
AND A1.EMPL_RCD = JJJ.EMPL_RCD
AND A1.CAL_RUN_ID = $Cal_Run_Id
AND A1.PIN_NUM IN (SELECT C.PIN_ERN_NUM 
                       FROM PS_GPMX_COUPONS C 
                       WHERE C.OPRID = $Prcs_OprID 
                       AND C.RUN_CNTL_ID = $Prcs_Run_Cntl_ID)
AND JJJ.COMPANY = $Company
AND JJJ.EFFDT = (SELECT MAX(JJJ_ED.EFFDT) 
                 FROM PS_JOB JJJ_ED
                 WHERE JJJ.EMPLID   = JJJ_ED.EMPLID
                 AND   JJJ.EMPL_RCD = JJJ_ED.EMPL_RCD
                 AND   JJJ_ED.EFFDT <= $AsOfToday)
AND JJJ.EFFSEQ = (SELECT MAX(JJJ_ES.EFFSEQ) 
                 FROM PS_JOB JJJ_ES
                 WHERE JJJ.EMPLID   = JJJ_ES.EMPLID
                 AND   JJJ.EMPL_RCD = JJJ_ES.EMPL_RCD
                 AND   JJJ.EFFDT    = JJJ_ES.EFFDT)
AND A1.SLICE_END_DT = (SELECT MAX(SLICE_END_DT) 
                 FROM PS_GP_RSLT_ERN_DED A2 
                 WHERE A1.EMPLID    = A2.EMPLID
                 AND   A1.EMPL_RCD  = A2.EMPL_RCD
                 AND   A1.CAL_RUN_ID = A2.CAL_RUN_ID
                 AND   A1.GP_PAYGROUP = A2.GP_PAYGROUP)
AND (A1.CALC_RSLT_VAL + A1.CALC_ADJ_VAL) >= 10    
GROUP BY A1.CAL_RUN_ID
ORDER BY A1.CAL_RUN_ID
end-select
end-procedure Acor-Totals

!**************************************
begin-procedure Get-Payee-Data
#debug show 'Get-Payee-Data'
Let $CouponsAcc = ''

begin-select
PYE.GPMX_COUPONS_ACCT 
PYE.EMPL_RCD

    Let $CouponsAcc = rtrim(&PYE.GPMX_COUPONS_ACCT, ' ')
    
    If $CouponsAcc <> ''
       Do Get-Payee-Acc2
       Let $CouponsAcc = EDIT($CouponsAcc, '00000000')        
    end-if

FROM PS_GPMX_PAYEE_DATA PYE
WHERE PYE.EMPLID = $Emplid
AND PYE.EFF_STATUS = 'A'
AND PYE.EFFDT = (SELECT MAX(PYE_ED.EFFDT) 
                 FROM PS_GPMX_PAYEE_DATA PYE_ED
                 WHERE PYE_ED.EMPLID   = PYE.EMPLID
                 AND   PYE_ED.EMPL_RCD = PYE.EMPL_RCD
                 AND   PYE_ED.EFFDT <= $AsOfToday)
end-select

If $CouponsAcc = '' 
   show '- El empleado ' $Emplid ' no tiene número de cuenta'
end-if  


end-procedure Get-Payee-Data

!**************************************
begin-procedure Get-Payee-Acc2
#debug show 'Get-Payee-Acc2'

begin-select
PY2.GPMX_COUPONS_ACCT 
PY2.EMPL_RCD

    show '- El empleado ' $Emplid ' ' &PY2.EMPL_RCD ' tiene asignado más de un número de cuenta ' &PY2.GPMX_COUPONS_ACCT
    
FROM PS_GPMX_PAYEE_DATA PY2
WHERE PY2.EMPLID = $Emplid
AND  PY2.GPMX_COUPONS_ACCT <> $CouponsAcc
AND PY2.EFFDT = (SELECT MAX(PYE_ED.EFFDT) 
                 FROM PS_GPMX_PAYEE_DATA PYE_ED
                 WHERE PYE_ED.EMPLID   = PY2.EMPLID
                 AND   PYE_ED.EMPL_RCD = PY2.EMPL_RCD
                 AND   PYE_ED.EFFDT <= $AsOfToday)
end-select


end-procedure Get-Payee-Acc2


!**************************************
begin-procedure Acor-Total-Employees

Let #totalEmployee = 0

begin-select
A2.CAL_RUN_ID
COUNT(DISTINCT A2.EMPLID ) &countEMPLID
   
  Let #totalEmployee = &countEMPLID
  
  show 'No. de Empleados: ' #totalEmployee
  if $FS_Type = '0050'  
     Let $totalEmployee = EDIT(#totalEmployee,'00000')
  else
     Let $totalEmployee = EDIT(#totalEmployee,'0000000')
  end-if
  

FROM PS_GP_RSLT_ERN_DED  A2, 
     PS_JOB  JJJ
WHERE A2.EMPLID = JJJ.EMPLID
AND A2.EMPL_RCD = JJJ.EMPL_RCD
AND A2.CAL_RUN_ID = $Cal_Run_Id
AND A2.PIN_NUM IN (SELECT C.PIN_ERN_NUM 
                   FROM PS_GPMX_COUPONS C 
                   WHERE C.OPRID = $Prcs_OprID 
                   AND C.RUN_CNTL_ID = $Prcs_Run_Cntl_ID)
AND JJJ.COMPANY = $Company
AND JJJ.EFFDT = (SELECT MAX(JJJ_ED.EFFDT) 
                 FROM PS_JOB JJJ_ED
                 WHERE JJJ.EMPLID = JJJ_ED.EMPLID
                 AND JJJ.EMPL_RCD = JJJ_ED.EMPL_RCD
                 AND JJJ_ED.EFFDT <= $AsOfToday)
AND JJJ.EFFSEQ = (SELECT MAX(JJJ_ES.EFFSEQ) 
                  FROM PS_JOB JJJ_ES
                  WHERE JJJ.EMPLID = JJJ_ES.EMPLID
                  AND JJJ.EMPL_RCD = JJJ_ES.EMPL_RCD
                  AND JJJ.EFFDT = JJJ_ES.EFFDT)
AND A2.SLICE_END_DT = (SELECT MAX(SLICE_END_DT) 
                       FROM PS_GP_RSLT_ERN_DED A3
                       WHERE A2.EMPLID = A3.EMPLID
                       AND A2.EMPL_RCD = A3.EMPL_RCD
                       AND A2.CAL_RUN_ID = A3.CAL_RUN_ID
                       AND A2.GP_PAYGROUP = A3.GP_PAYGROUP)
AND (A2.CALC_RSLT_VAL + A2.CALC_ADJ_VAL) >= 10                         
GROUP BY A2.CAL_RUN_ID
ORDER BY A2.CAL_RUN_ID
end-select
end-procedure Acor-Total-Employees


!***************************** Read-Name ***************************************
begin-procedure Read-Name
begin-select
B.FIRST_NAME
B.LAST_NAME_SRCH
B.SECOND_LAST_SRCH


  
  let $First_name_srch = &B.FIRST_NAME
  let $Last_name_srch = &B.LAST_NAME_SRCH
  let $Second_last_srch = &B.SECOND_LAST_SRCH
  let $Name = rtrim ($First_name_srch,' ') || ' ' || rtrim ($Last_name_srch,' ') || ' ' || rtrim ($Second_last_srch,' ')
  uppercase $Name

  if $supplier = '0010'
     let $Deptid_A = substr($Deptid,1,4)
     let $Location_A = substr($Location,1,4)
     if $FS_Type = '0050'
        let $Emplid_A = rtrim($Emplid,' ')
        let $Emplid_A = substr($Emplid_A,1,9)    
        Let $Emplid_A = rpad($Emplid_A,9,' ')        
     else
        let $Emplid_A = substr($Emplid,1,6)
        let $Emplid_A = rtrim($Emplid_A,' ')
        let $Emplid_A = lpad($Emplid_A,6,' ')
     end-if
  else
    let $Deptid_S = substr($Deptid,1,5)
    let $Deptid_S = rtrim($Deptid_S,' ')
    let $Deptid_S = lpad($Deptid_S,5,'0')

    let $Emplid_S = substr($Emplid,1,7)
    let $Emplid_S = rtrim($Emplid_S,' ')
    let $Emplid_S = lpad($Emplid_S,7,'0')
  end-if

FROM PS_PERSON_NAME B

WHERE B.EMPLID  = $Emplid

end-select
end-procedure Read-Name


!***************************** Write-Header-ACCOR ************************************
begin-procedure Write-Header-ACCOR

  
  Do Acor-Totals
  Do Acor-Total-Employees
  

  UPPERCASE $CompanyName
  Let $CompanyName2 = $CompanyName
  Do TO_SpecialChar($CompanyName2)
  
  if $FS_Type = '0050'
     write 1 from $fixValue:2 $branchIDAcor:3 $product:3 $groupID:5 $customer:3 $CompanyName2:40 $totalEmployee:5 $totalAmount:9 
  else
     write 1 from $fixValue:1 $branchIDAcor:3 $product:3 $groupID:5 $customer:3 $CompanyName2:23 $totalAmount:14 $totalEmployee:7 $DeliveryDt:8
  end-if
end-procedure Write-Header-ACCOR


!***************************** Write-Rcd ***************************************
begin-procedure Write-Rcd
!  DISPLAY $supplier
  if $supplier = '0010'
     if $FS_Type = '0050'
        write 1 from $Emplid_A:9 $CouponsAcc:8 $Deposit:9
     else
        write 1 from $Client_ID:8 $Name:29 $Deposit:7 $Deptid_A:4 $Location_A:4 $Emplid_A:6
     end-if
     
     print $Client_ID          (+1,1)   ON-BREAK
     print $Emplid             ( ,{c3}) 
     print $Name               ( ,{c4},43)
     print $Deptid             ( ,{c5})
     print $Location           ( ,{c6})
     if $FS_Type = '0050'
        print $CouponsAcc         ( ,{c6b})
     end-if
     let #Amount =  #Amount_Tot
     print #Amount             ( ,{c7}) edit 9,999,999.99
  else
     add 1 to #Count
     let $Count = to_char(#Count)
     let $Count = lpad($count,7,'0')
     let $Branch_S = SUBSTR($Branch,1,4)
     let $Branch_S = lpad($Branch_S,5,'0')
!     write 1 from $Branch_S:5 $Deptid_S:5 $Count:7 $Emplid_S:7 $Name:30 $Deposit_Int:7 $Deposit_Dec:2
      write 1 from $Branch_S:5 $Deptid_S:5 $Count:7 $Emplid_S:7 $Name:30 $Deposit:9
           
          evaluate &RCCOUP.GPMX_FC_BRANCH
             when = '0010'
               print 'México'       (+1,1) ON-BREAK
               break
             when = '0020'
               print 'Guadalajara'  (+1,1) ON-BREAK
               break
             when = '0030'
               print 'Monterrey'    (+1,1) ON-BREAK
               break
             when = '0040'
               print 'Chihuahua'    (+1,1) ON-BREAK
               break
             when = '0050'
               print 'Cd. Juárez'   (+1,1) ON-BREAK
               break
             when = '0060'
               print 'Tijuana'      (+1,1) ON-BREAK
               break
             when = '0070'
               print 'León'         (+1,1) ON-BREAK
               break
             when = '0080'
               print 'Matamoros'    (+1,1) ON-BREAK
               break
             when = '0090'
               print 'Hermosillo'   (+1,1) ON-BREAK
               break
             when = '0100'
               print 'V. Hermosa'   (+1,1) ON-BREAK
               break
             when = '0110'
               print 'Tampico'      (+1,1) ON-BREAK
               break
             when = '0140'
               print 'Mérida'       (+1,1) ON-BREAK
               break
             when = '0180'
               print 'Mexicali'     (+1,1) ON-BREAK
               break
             when-other
               print ''             (+1,1) ON-BREAK
               break
          end-evaluate

          print $Emplid_S            ( ,{c3})
          print $Name                ( ,{c4},43)
          print $Deptid_S            ( ,{c5})
          print $Count               ( ,{c6})
          let #Amount =  #Amount_Tot
          print #Amount              ( ,{c7}) edit 9,999,999.99
  end-if
end-procedure Write-Rcd         


begin-procedure Print-Total
  print 'Total vales '          (+2,{c6})
  evaluate $FS_Type
    when = '0020'
    print 'Despensa: '          ( ,)
    break
    when  = '0010'
    print 'Comida: '            ( ,)
    break
    when = '0030'
    print 'Gasolina: '          ( ,)
    break
  end-evaluate
  print #Tot_Amount             ( ,{c7}) edit 9,999,999.99
  move 0 to #Tot_Amount
end-procedure Print-Total

!***************************************************
! Procedure TO_UPPER                               *
!***************************************************
begin-procedure TO_SpecialChar(:$in)
  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''
  
  Let $Name_In = $in  
  
  while #c <= length($in)

    let $Found = 'N'
    let $Test_Char = Substr($Name_In, #c, 1)
    let #Test_Code = ascii(Upper($Test_Char))
    if (#Test_Code > 64
    and #Test_Code < 91)
      let $cad  = $cad  || Upper($Test_Char)
      let $Found = 'Y'
    end-if
     
   if ($Found = 'N')  
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)     
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           let $cad = $cad || $let             
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           let $cad = $cad || $let             
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           let $cad = $cad || $let             
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'
           let $let = 'O'
           let $cad = $cad || $let             
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           let $cad = $cad || $let             
           break
        when = 'ñ'
           let $let = 'N'
           let $cad = $cad || $let             
           break
        when = ' '                         
           let $let = ' '
           let $cad = $cad || $let  
        when-other
           break
     end-evaluate
    end-if
     let #c = #c + 1
  end-while
  let $in = $cad
  let $cad = ''
end-procedure

#Include 'tranctrl.sqc'  !Common Transaction Control Procedures
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Date math routines
#include 'askcalyr.sqc'  !Ask-Calendar-Year
#include 'getpgdta.sqc'  !Get-Paygroup-Data
#include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
