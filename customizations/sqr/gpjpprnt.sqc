!***********************************************************************
! GPJPPRNT.sqc: Japanese Print Functions                              *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:47:25                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


!***********************************************************************
!                                                                      *
! Procedure:    gpjp_print_cm                                          *
!                                                                      *
! Description:  This procedure prints out text as the position which   *
!               indicated with a centimeter unit.                      *
!                                                                      *
! Note:         If you use this procedure, it is need to indicate      *
!               line-height as 0.1 and char-width as 0.1 in the        *
!               DCALRE-LAYOUT section.                                 *
!               And it is need to adjustment the printing positon      *
!               by procedure 'gpjp_print_cm-adjust-coordinate'.        *
!                                                                      *
! Arguments:    $str      : printing string                            *
!               #xpos     : position of string left                    *
!               #ypos     : position of string bottom                  *
!                                                                      *
!***********************************************************************
begin-procedure gpjp_print_cm($str, #xpos, #ypos)
   declare-variable
      decimal #line
      decimal #column
      text    $pstr
   end-declare

!   show '#sqr-max-columns : ' #_sqr-max-columns
!   show '#sqr-max-lines : ' #_sqr-max-lines
!   show '$str    : ' $str
!   show '#line   : ' #line
   let #xpos = #xpos + #_gpjp-adj-x
   let #ypos = #ypos + #_gpjp-adj-y

   do gpjp_convert_cm_to_column(#xpos, #column)
   do gpjp_convert_cm_to_line(#ypos, #line)

   if #column > 0 and #line > 0
      print $str (#line, #column)
!      graphic (#line,#column,10) horz-line  ! print indicated position
   end-if

end-procedure !gpjp_print_cm

begin-procedure gpjp_print_cm_adjust_coordinate(#adj-x, #adj-y)
   let #_gpjp-adj-x = #adj-x
   let #_gpjp-adj-y = #adj-y
end-procedure


begin-procedure gpjp_convert_cm_to_column(#xpos, :#column)
   ! Caluclate centimeter to column number.

   let #xpos = #xpos * 26 / 26.11   !for accurate print

   ! Base formula  #column := #xpos[cm] / 2.54[cm/inch] * 72 [pt/inch] / char-width:0.1 [pt]
   let #column = #xpos * 720 / 2.54

end-procedure  !gpjp_convert_cm_to_column

begin-procedure gpjp_convert_cm_to_line(#ypos, :#line)
   ! Caluclate line number from positon with centimeter.
   ! #line := #ypos[cm] / 2.54[cm/inch] * 72 [pt/inch] / line-height:0.1 [pt]
   let #line = #ypos * 720 / 2.54
end-procedure  !gpjp_convert_cm_to_line


begin-procedure gpjp_draw_circle(#xpos, #ypos, #radius)
   declare-variable
      integer #xo #yo #x #y #rx #ry #column #line #tmp #resolution
   end-declare

   let #resolution = 1

   let #xpos = #xpos + #_gpjp-adj-x
   let #ypos = #ypos + #_gpjp-adj-y

   do gpjp_convert_cm_to_column(#xpos, #xo)
   do gpjp_convert_cm_to_line(#ypos, #yo)
   do gpjp_convert_cm_to_column(#radius, #r)

    let #x = #r
    let #y = 0

    while 1
      if #x < #y
         break
      end-if
!        SetPoint(xo + x, yo + y)
        let #column = #xo + #x
        let #line = #yo + #y
        do gpjp_print_dot(#column,#line,#resolution)

!        SetPoint(xo + x, yo - y)
        let #column = #xo + #x
        let #line = #yo - #y
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo - x, yo + y)
        let #column = #xo - #x
        let #line = #yo + #y
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo - x, yo - y)
        let #column = #xo - #x
        let #line = #yo - #y
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo + y, yo + x)
        let #column = #xo + #y
        let #line = #yo + #x
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo + y, yo - x)
        let #column = #xo + #y
        let #line = #yo - #x
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo - y, yo + x)
        let #column = #xo - #y
        let #line = #yo + #x
        do gpjp_print_dot(#column,#line,#resolution)
!        SetPoint(xo - y, yo - x)
        let #column = #xo - #y
        let #line = #yo - #x
        do gpjp_print_dot(#column,#line,#resolution)

        let #tmp = #y + #y
        let #r = #r - #tmp - 1

        if #r < 0
            let #r = #r + (#x - 1) + (#x - 1)
            let #x = #x - #resolution
        end-if
        let #y = #y + #resolution
   end-while

end-procedure

begin-procedure gpjp_print_dot(#column, #line, #size)
   if #column > 0 and #line > 0
      if #column + #size < #_sqr-max-columns and #line + #size <  #_sqr-max-lines
         graphic (#line,#column,#size) horz-line
      end-if
   end-if
end-procedure


begin-procedure gpjp_print_cm_wrap($str, #xpos, #ypos, #wrap-chars, #line-height, #limit-depth)
   declare-variable
      integer #i #pstr #len #len1
   end-declare

   let #str = rtrim($str, ' ')
   let #len = lengthp($str)

   let #ypos = #ypos + #line-height
   let #i = 1

   while #len > 1
      let $pstr = substrp($str, 1, #wrap-chars)

      let #len1 = lengthp($pstr)

      if #len1 < #wrap-chars
         let $pstr = substrp($str, 1, #wrap-chars + 1)
         let #len1 = lengthp($pstr)
      end-if

      do gpjp_print_cm($pstr, #xpos, #ypos)
      let #ypos = #ypos + #line-height
      let $str = substrp($str, #len1 + 1, #len - #wrap-chars)
      let #len = lengthp($str)
   end-while


end-procedure
