!-----------------------------------------------------------------------
!  STOP016: Transfer Agent Instructions
!           (Option Repurchases)
!-----------------------------------------------------------------------
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:54:16                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Reprint , Emplid, Control #
! Tables:        RUN_CNTL_ST
!                STOCK_DTL
!                ST_AGENT_DTL
!                ST_GRNT_REPURCH
!                ST_PERSON_NAME
!                PERS_NID
!                ST_BROKER_TBL
!                STOCK_LEGEND
!                ST_INSIDER_TBL
! Sorts:         Name
!-----------------------------------------------------------------------

 #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  if $TransferAgentID <> ''
    do Process-Main
  else
    show 'Transfer Agent not found. Please check Stock Details to ensure a Transfer Agent is setup.'
  end-if
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 17

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,   )
  print ':'                                                (  ,   ,001)
  print $StockID                                           (  ,016,010)

  do Format-DateTime ($FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center

  print $CusipNumberLbl                                    (+1,001,012)
  print ':'                                                (  ,   ,001)
  print $Cusip_Nbr                                         (  ,020,009)
  print $TransactionLbl                                    (+1,  1,016)
  print ':'                                                (  ,   ,001)
  print $Reporttype2                                       (  ,020,011)

  print $ReprintLbl                                        (+1,001,007)
  print ':'                                                (  ,   ,001)
  print $Reprint                                           (  ,020,001)

  do Format-Amt(#MaxControlNbr,$out,'9999999',$Cur,$Curout)
  let $out = ltrim($out,' ')
  let $ControlNbr = $ControlNoLbl  || ': ' || $out
  print $ControlNbr                                        (  ,083,   ) bold
  print $TransferDescr                                     (+2,083,   )
  print $Address1                                          (+1,083,   )

  if $Address2 <> ''
    print $Address2                                        (+1,083,   )
  end-if

  print $City-Zip                                          (+1,083,   )
  print $Country                                           (+1,083,   )

  print  $NameLbl                                          (+2,018,030)
  print  $NidLbl                                           (+1,018,030)
  print  $StockPlanLbl                                     (  ,062,011)
  print  $RepurchDtLbl                                     (+1,001,015)
  print  $EmplidLbl                                        (  ,018,012)
  print  $InsiderLbl                                       (  ,031,009)
  print  $LegendLbl                                        (  ,050,010)
  print  $OptionTypeLbl                                    (  ,062,011)
  print  $RepurchLbl                                       (  ,078,017)
  print '-'                                                (+1,001,177) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STOP015'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' Procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
    do Get-Stock-Values
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables
  do Create-Array
  do Build-Where-Clause

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-depEndent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK', $language_cd)
  do AppEnd_Report_Translation ($ReportID)

  do Get_Field_Information ('STOCK'  ,'STOCK_ID',          $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK'  ,'NID',               $NidLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'EMPLID',            $EmplidLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'NAME',              $NameLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'DATE',              $DateLbl,        #DW)
  do Get_Field_Information ('STOCK',  'FROM',              $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',  'THRU',              $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'TOTAL',             $TotalLbl,       #DW)
  do Get_Field_Information ('STOCK'  ,'REPURCHASE_DT',     $RepurchDtLbl,   #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES_REPURCHASED',$RepurchLbl,     #DW)
  do Get_Field_Information ('STOCK'  ,'STOCK_PLAN',        $StockPlanLbl,   #DW)
  do Get_Field_Information ('STOCK'  ,'ST_OPTION_TYPE',    $OptionTypeLbl,  #DW)
  do Get_Field_Information ('STOCK'  ,'AUTH_SIGNATURE',    $AuthSignLbl,    #DW)
  do Get_Field_Information ('STOCK'  ,'INSIDER',           $InsiderLbl,     #DW)

  do Get_Field_Information ('STOP015','CONTROL_NO',        $ControlNoLbl,   #DW)
  do Get_Field_Information ('STOP015','REPRINT',           $ReprintLbl,     #DW)
  do Get_Field_Information ('STOP015','LEGEND_ID',         $LegendLbl,      #DW)
  do Get_Field_Information ('STOP015','REPORT_TITLE',      $Reporttitle,    #DW)
  do Get_Field_Information ('STOP015','TRANSACTION_TYPE',  $TransactionLbl, #DW)
  do Get_Field_Information ('STOP015','REPORTTYPE2',       $Reporttype2,    #DW)
  do Get_Field_Information ('STOP015','SUM_PLAN',          $Sum_PlanLbl,    #DW)
  do Get_Field_Information ('STOP015','LEGEND_ID_KEY',     $LegendIdKeyLbl, #DW)
  do Get_Field_Information ('STOP015','CUSIP_NUMBER',      $CusipNumberLbl, #DW)

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Get-Stock-Values
!-----------------------------------------------------------------------

  INPUT $RC_STOCK_ID        MAXLEN=10  'Enter Stock ID'                TYPE=CHAR
  INPUT $RC_EMPLID          MAXLEN=10  'Enter Employee ID'             TYPE=CHAR
  INPUT $RC_REPRINT_PROMPT  MAXLEN=1   'Reprint? (Y/N)'                TYPE=CHAR
  INPUT $FromDate           MAXLEN=10  'Enter from Date'               TYPE=DATE
  INPUT $ThruDate           MAXLEN=10  'Enter Through Date'            TYPE=DATE

  if $RC_REPRINT_PROMPT = 'Y'
    INPUT $RC_BRANCH_CNTL_NBR  MAXLEN=7  'Enter Transfer Control Number'  TYPE=CHAR
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId     = rtrim($RC_STOCK_ID,' ')
  let $RC_EMPLID   = rtrim($RC_EMPLID,' ')
  let $Reprint     = rtrim($RC_REPRINT_PROMPT,' ')
  let $FromDate    = rtrim($RC_FromDate,' ')
  let $ThruDate    = rtrim($RC_ThruDate,' ')
  let $Comments    = rtrim($RC_COMMENTS,' ')
  let #Break       = 1
  let #PlanCount   = 1
  let #LegendCount = 1
  let $RowFound    = 'N'

Begin-Select

W.CUSIP_NBR
X.TRANSFER_AGENCY_ID
Y.DESCR
Z.ADDRESS1
Z.ADDRESS2
Z.CITY
Z.STATE
Z.POSTAL
Z.COUNTRY

  let $Cusip_Nbr         = rtrim(&w.cusip_nbr,' ')
  let $TransferAgentID   = rtrim(&x.transfer_agency_id,' ')
  let $TransferDescr     = rtrim(&y.descr,' ')
  let $Address1          = rtrim(&z.address1,' ')
  let $Address2          = rtrim(&z.address2,' ') 
  let $Country           = rtrim(&z.country,' ') 
  let $City-Zip          = rtrim(&z.city,' ') ||', '|| rtrim(&z.state,' ') ||'-'|| rtrim(&z.postal,' ')

from PS_STOCK_TBL      W,
     PS_STOCK_DTL      X,
     PS_ST_AGENT_DTL   Y,
     PS_ST_AGENT_CNTCT Z 
where W.STOCK_ID           = $StockID
  and W.STOCK_ID           = X.STOCK_ID
  and X.EFFDT              = (select MAX(XX.EFFDT) 
                              from PS_STOCK_DTL XX
                              where XX.STOCK_ID = X.STOCK_ID
                                and XX.EFFDT   <= $AsOfToday )
  and X.STOCK_ID           = Z.STOCK_ID
  and X.TRANSFER_AGENCY_ID = Z.ST_AGENCY_ID
  and X.TRANSFER_AGENCY_ID = Y.ST_AGENCY_ID
  and Y.EFFDT              = (select MAX(YY.EFFDT) 
                              from PS_ST_AGENT_DTL YY
                              where YY.ST_AGENCY_ID = Y.ST_AGENCY_ID
                               and YY.EFFDT       <= $AsOfToday )
  and (Z.ST_CONTACT_TYPE   = 'Y'
   or Z.ST_CONTACT_TYPE    = 'T')
  and Z.EFFDT              = (select MAX(ZZ.EFFDT) 
                              from PS_ST_AGENT_CNTCT ZZ
                              where ZZ.STOCK_ID     = Z.STOCK_ID
                                and ZZ.ST_AGENCY_ID = Z.ST_AGENCY_ID)

End-Select

  if $Reprint = 'N'
    do Get-Last-Control-Number
  else
    let #MaxControlNbr = #RC_TRANSFER_CNTL_NBR
  end-if

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Get-Last-Control-Number
!-----------------------------------------------------------------------

Begin-Select

V.LAST_CONTROL_NBR   &MaxControlNbr

from PS_STOCK_AGENT V
where V.STOCK_ID     = $StockID
  and V.ST_AGENCY_ID = $TransferAgentID

End-Select

  let #MaxControlNbr = &MaxControlNbr + 1

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan            -
               size  = 100                  -
               field = StockPlan:char       -
               field = SharesRepurch:number

  create-array name  = Legend               -
               size  = 100                  -
               field = LegendID:char        -
               field = LegendDescr:char

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause
!-----------------------------------------------------------------------

  let $SQLQuote                     = ''''
  let $WhereRepurchDatefrom         = ''
  let $WhereRepurchDateThru         = ''
  let $WhereUpdateRepurchDatefrom   = ''
  let $WhereUpdateRepurchDateThru   = ''
  let $WhereTransferControlNo       = ''
  let $WhereTransferIssueDate       = ''
  let $WhereUpdateTransferControlNo = ''
  let $WhereUpdateTransferIssueDate = ''

  if rtrim($FromDate, ' ') <> ''
    let $WhereRepurchDatefrom       = 'and A.REPURCHASE_DT >= ' || $SQLQuote || $FromDate || $SQLQuote
    let $WhereUpdateRepurchDatefrom = 'and REPURCHASE_DT >= ' || $SQLQuote || $FromDate || $SQLQuote
  end-if

  if rtrim($ThruDate, ' ') <> ''
    let $WhereRepurchDateThru       = 'and A.REPURCHASE_DT <= ' || $SQLQuote || $ThruDate || $SQLQuote
    let $WhereUpdateRepurchDateThru = 'and REPURCHASE_DT <= ' || $SQLQuote || $ThruDate || $SQLQuote
  end-if

  if $RC_EMPLID <> ''
    let $WhereEmplid         = ' and A.EMPLID  = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
    let $WhereUpdateEmplid   = ' and EMPLID  = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
  else
    let $WhereEmplid         = ''
    let $WhereUpdateEmplid   = ''
  end-if

  if $RC_REPRINT_PROMPT = 'Y'
    let $MAX_CNTL_NO_CHAR             = to_char(#MaxControlNbr)
    let $WhereTransferControlNo       = 'and A.TRANSFER_CNTL_NBR = ' || $MAX_CNTL_NO_CHAR
    let $WhereUpdateTransferControlNo = 'and TRANSFER_CNTL_NBR = ' || $MAX_CNTL_NO_CHAR
  else
    let $WhereTransferIssueDate       = 'and A.TRANSFER_ISSUE_DT IS NULL'
    let $WhereUpdateTransferIssueDate = 'and TRANSFER_ISSUE_DT IS NULL'
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Process-Main                                             
! Descr:      This is where all required data is selected              
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  do Process-Record

  if $RowFound = 'Y'
    do Print-Footer
    if $RC_REPRINT_PROMPT = 'Y'
      do Update-Transfer-Issue-Date
    else
      do Update-Control-No
    end-if
    do Update-Last-Control-No
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Process-Record
! Descr:      This is where all required data is selected
!-----------------------------------------------------------------------
Begin-Procedure Process-Record

  let $Insider  = ' '

Begin-Select

A.EMPLID
A.GRANT_NBR
A.REPURCHASE_DT
A.SHARES_REPURCHASED
A.LEGEND_ID
B.STOCK_PLAN
B.ST_OPTION_TYPE

  let $EmplID        = rtrim(&a.emplid,' ')
  let $GrantNbr      = rtrim(&a.grant_nbr,' ')
  let $RepurchDt     = rtrim(&a.repurchase_dt,' ')
  let #SharesRepurch = &a.shares_repurchased
  let $LegendID      = rtrim(&a.legend_id,' ')
  let $StockPlan     = rtrim(&b.stock_plan,' ')
  let $OptionType    = rtrim(&b.st_option_type,' ')

  do Get-Legend
  do Get-Name
  do Get-National-Id
  do Populate-Arrays
  do Get-Insider-Status
  do Print-Detail-Repurch

  let $RowFound = 'Y'

from PS_ST_GRNT_REPURCH A,
     PS_ST_GRANT        B
where A.STOCK_ID          = $StockID
  and A.STOCK_ID          = B.STOCK_ID
  and A.EMPLID            = B.EMPLID
  and A.GRANT_NBR         = B.GRANT_NBR
  and A.REPURCHASE_STATUS = 'A'
[$WhereEmplid]
[$WhereRepurchDateFrom]
[$WhereRepurchDateThru]
[$WhereTransferControlNo]
[$WhereTransferIssueDate]

End-Select
 
End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Name
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Name

Begin-Select

AA.NAME

  let $Name = rtrim(&aa.name,' ')

from PS_ST_PERSON_NAME AA
where AA.EMPLID = $EmplID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-National-Id
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-National-Id

  let $NationalId = ''

Begin-Select

PERS_NID.NATIONAL_ID

  let $NationalId = rtrim(&pers_nid.national_id, ' ')

 from PS_PERS_NID PERS_NID
where PERS_NID.EMPLID      = $Emplid
  and PERS_NID.PRIMARY_NID = 'Y'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Legend
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Legend

Begin-Select

H.COMMENTS

  let $LegendYes    = 'Y'
  let $LegendDescr  = rtrim(&h.comments,' ')

from PS_STOCK_LEGEND   H
where H.STOCK_ID     = $StockID
  and H.LEGEND_ID    = $LegendID
End-Select
 
End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays 
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays 

  if #LegendCount = 1
    put $LegendID $LegendDescr into Legend(1) LegendID LegendDescr
    add 1 to #LegendCount
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #LegendCount
      get $ArrayLegendID from Legend(#Row) LegendID
      if $LegendID = $ArrayLegendID
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y' and $LegendID <> ''
      put $LegendID $LegendDescr into Legend(#LegendCount) LegendID LegendDescr
      add 1 to #LegendCount
    end-if
  end-if

  if #PlanCount = 1
    put $StockPlan #SharesRepurch into StockPlan(1) StockPlan SharesRepurch
    add 1 to #PlanCount
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $ArrayPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $ArrayPlan
        array-add #SharesRepurch to StockPlan(#Row) SharesRepurch
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesRepurch into StockPlan(#PlanCount) StockPlan SharesRepurch 
      add 1 to #PlanCount
    end-if
  end-if

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Insider-Status
!----------------------------------------------------------------------

  let $TypeOfficer = ' '
  let $TypeRepPerson = ' '
  let $TypeDirector = ' '
  let $TypeCompInsider = ' '
  let $TypeBenOwner = ' '
  let $InsiderType = ' '

Begin-Select

P.ST_OFFICER
P.ST_DIRECTOR
P.COMPANY_INSIDER
P.REPORTING_PERSON
P.ST_BEN_OWNER

  if &p.st_officer = 'Y'
    let $TypeOfficer = 'O'
    let $OfficerType = $TypeOfficer || ','
    concat $OfficerType with $InsiderType
  end-if

  if &p.st_director = 'Y'
    let $TypeDirector = 'D'
    let $DirectorType = $TypeDirector || ','
    concat $DirectorType with $InsiderType
  end-if

  if &p.company_insider = 'Y'
    let $TypeCompInsider = 'I'
    let $CompInsiderType = $TypeCompInsider || ','
    concat $CompInsiderType with $InsiderType
  end-if

  if &p.reporting_person = 'Y'
    let $TypeRepPerson = 'R'
    let $RepPersonType = $TypeRepPerson || ','
    concat $RepPersonType with $InsiderType
  end-if

  if &p.st_ben_owner = 'Y'
    let $TypeBenOwner = 'B'
    concat $TypeBenOwner with $InsiderType
  end-if
   
from  PS_ST_INSIDER_TBL P
where P.EMPLID   = $EmplID
  and P.STOCK_ID = $StockID 
  and P.EFFDT    = (select Max(EFFDT)
                     from PS_ST_INSIDER_TBL
                    where EMPLID    = P.EMPLID
                      and STOCK_ID  = P.STOCK_ID)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail-Repurch
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail-Repurch

  do Format-DateTime($RepurchDt, $DateOut, {DEFDATE}, '', '')
  print $DateOut                                           (+1,001,015)
  print $Name                                              (  ,018,030)
  print $LegendID                                          (  ,050,010)
  print $StockPlan                                         (  ,062,011)
  print #SharesRepurch                                     (  ,075,020) edit 9,999,999,999.999999
  print $NationalID                                        (+1,018,030)
  print $OptionType                                        (  ,062,011)
  print $Emplid                                            (+1,018,012)
  print $InsiderType                                       (  ,031,010)
  print ''                                                 (+1,   ,   )

  let #TotalRepurch = #TotalRepurch + #SharesRepurch

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Footer
!-----------------------------------------------------------------------

  add 1 to #page_number
  print '-'                                                (+1,001,177) fill
  print $TotalLbl                                          (+1,062,   )
  print ':'                                                (  ,   ,001)
  print #TotalRepurch                                      (  ,075,020) edit 9,999,999,999.999999
  print '-'                                                (+1,001,177) fill

  do Footer-Plan-Totals
  if $LegendYes = 'Y'
    do Print-Legend
  end-if

  print $Comments               (+3,005) Wrap 105 4
  print '_'                     (+3,005,040) fill
  print $AuthSignLbl            (+1,005,020)
  print $DateLbl                (  ,042,004)


End-Procedure Print-Footer

!-----------------------------------------------------------------------
Begin-Procedure Print-Legend
!-----------------------------------------------------------------------

  print $LegendIdKeyLbl                                    (+2,001,013) underline
  let #Row = 1
  while #Row < #LegendCount
    get $LegendID $LegendDescr from Legend(#Row) LegendID LegendDescr
    print $LegendID                                        (+1,001,010)
    print $LegendDescr                                     (  ,020,   )
    add 1 to #Row
  end-while

End-Procedure Print-Legend

!--------------------------------------------------------------------
Begin-Procedure Footer-Plan-Totals
!--------------------------------------------------------------------

  print $Sum_PlanLbl                                       (+2,062,020) underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #SharesRepurch from StockPlan(#Row) StockPlan SharesRepurch
    print $StockPlan                                       (+1,062,010)
    print #SharesRepurch                                   (  ,075,020) edit 9,999,999,999.999999
    add 1 to #Row
  end-while

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Transfer-Issue-Date
!--------------------------------------------------------------------
Begin-SQL

update PS_ST_GRNT_REPURCH
  set TRANSFER_ISSUE_DT = $AsOfToday
where STOCK_ID = $StockID
[$WhereUpdateEmplid]
[$WhereUpdateRepurchDateFrom]
[$WhereUpdateRepurchDateThru]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]

End-SQL

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Control-No
!--------------------------------------------------------------------
Begin-SQL

update PS_ST_GRNT_REPURCH
  set TRANSFER_CNTL_NBR = #MaxControlNbr,
  TRANSFER_ISSUE_DT     = $AsOfToday
where STOCK_ID = $StockID
[$WhereUpdateEmplid]
[$WhereUpdateRepurchDateFrom]
[$WhereUpdateRepurchDateThru]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]

End-SQL

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Last-Control-No
!--------------------------------------------------------------------
Begin-SQL

update PS_STOCK_AGENT
  set LAST_CONTROL_NBR = #MaxControlNbr
where STOCK_ID     = $StockID
  and ST_AGENCY_ID = $TransferAgentID

End-SQL

End-Procedure

!--------------------------------------------------------------------
!SQC Include Files
!--------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer Procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime Procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'getrplng.sqc'   ! Gets the report language
