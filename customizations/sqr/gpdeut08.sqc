!***********************************************************************
! GPDEUT08.SQC:  Fetching SQC for Report                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:38:06                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


!rh 05b2 -- new subroutine to test for matching user-key combinations
! if PRD_OPT not is 5 (YTD) or accumulator element does not have user-keys,sum all
! existing accus for a record-key combination (except SEQ_NUM8). Original behavior
! if at least one of the entered user-keys is not stored, sum all 
! if user-key was entered but accumulator element was changed (user-key pin removed), sum all


begin-procedure Insert-ACM($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,
                               #RSLT_SEG_NUM,#INSTANCE,#PIN_NUM,$SLICE_BGN_DT,$SLICE_END_DT,
                               $USER_KEY1,#PIN_USER_KEY1_NUM,$USER_KEY2,
                               #PIN_USER_KEY2_NUM,$USER_KEY3,#PIN_USER_KEY3_NUM, 
                               $USER_KEY4, #PIN_USER_KEY4_NUM,
                               $USER_KEY5, #PIN_USER_KEY5_NUM,
                               $USER_KEY6, #PIN_USER_KEY6_NUM,
                               $ACM_PRD_OPTN, $RP_TABLE_NAME, :#count) 


let #result-ok = 0  
if $ACM_PRD_OPTN = '5' and #PIN_USER_KEY1_NUM > 0

   do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID, #RSLT_SEG_NUM, 
                     #PIN_USER_KEY1_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY1, #result-ok)

   if #PIN_USER_KEY2_NUM > 0
   do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,#RSLT_SEG_NUM, 
                     #PIN_USER_KEY2_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY2,#result-ok)
   end-if
   if #PIN_USER_KEY3_NUM > 0
          do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,#RSLT_SEG_NUM, 
                            #PIN_USER_KEY3_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY3,#result-ok)
   end-if
   if #PIN_USER_KEY4_NUM > 0
          do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,#RSLT_SEG_NUM, 
                            #PIN_USER_KEY4_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY4,#result-ok)
    end-if                         
   if #PIN_USER_KEY5_NUM > 0
          do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,#RSLT_SEG_NUM, 
                            #PIN_USER_KEY5_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY5,#result-ok)
    end-if                         
   if #PIN_USER_KEY6_NUM > 0
          do RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID,#RSLT_SEG_NUM, 
                            #PIN_USER_KEY6_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY6,#result-ok)
    end-if                         


end-if          


! a matching key was found but user-keys don't match.  We do NOT want to store this row
if #result-ok = 1

   let #count = 99
else   


! a matching key was found, and keys match, or user-key variable wasn't stored.  We do need to keep this row

   let #count = 0

end-if
end-procedure Insert-ACM



!**************************************************
! rh 05b2 -- test for matching user-key entry in RSLT_ACUM and RSLT_PIN

begin-procedure RSLT-Pin-Match($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,$ORIG_CAL_RUN_ID, #RSLT_SEG_NUM,#PIN_USER_KEY_NUM_VAL,$SLICE_BGN_DT,$SLICE_END_DT,$USER_KEY_VAL,:#result)


if isblank($ORIG_CAL_RUN_ID) 

   let $COND_ORIG_CAL_RUN_ID = ' '
else

   let $COND_ORIG_CAL_RUN_ID = ' VAR.ORIG_CAL_RUN_ID = $ORIG_CAL_RUN_ID and '
end-if


let #result = 0

BEGIN-SELECT 

VAR.CHR_PIN_VAL &VAR.CHR_PIN_VAL
VAR.DATE_PIN_VAL &VAR.DATE_PIN_VAL
VAR.PIN_VAL_NUM &VAR.PIN_VAL_NUM

! wdu05 891b2 -- added  leading whitespace
 if not isblank(&VAR.CHR_PIN_VAL)
   let $varvalue = &VAR.CHR_PIN_VAL
 end-if

 if not isnull(&VAR.DATE_PIN_VAL)
   let $varvalue = datetostr(&VAR.DATE_PIN_VAL, 'yyyy-mm-dd')
 end-if

 if &VAR.PIN_VAL_NUM > 0
           let $varvalue = &VAR.PIN_VAL_NUM
 end-if


 if rtrim($varvalue, ' ') <> rtrim($USER_KEY_VAL , ' ')
                let #result = 1
 end-if


FROM PS_GP_RSLT_PIN VAR
WHERE 


VAR.EMPLID      = $EMPLID and
VAR.CAL_RUN_ID  = $CAL_RUN_ID and
VAR.EMPL_RCD    = #EMPL_RCD and
VAR.GP_PAYGROUP = $GP_PAYGROUP and
VAR.CAL_ID      = $CAL_ID and
[$COND_ORIG_CAL_RUN_ID]
VAR.RSLT_SEG_NUM  = #RSLT_SEG_NUM and
VAR.PIN_NUM     = #PIN_USER_KEY_NUM_VAL and
VAR.SLICE_BGN_DT = $SLICE_BGN_DT and
VAR.SLICE_END_DT = $SLICE_END_DT and
VAR.INSTANCE = 
(select MAX(SUB.INSTANCE) from PS_GP_RSLT_PIN SUB
where 
VAR.EMPLID  = SUB.EMPLID and
VAR.CAL_RUN_ID  = SUB.CAL_RUN_ID and
VAR.EMPL_RCD    = SUB.EMPL_RCD and
VAR.GP_PAYGROUP = SUB.GP_PAYGROUP and
VAR.CAL_ID      = SUB.CAL_ID and
VAR.ORIG_CAL_RUN_ID = SUB.ORIG_CAL_RUN_ID and
VAR.RSLT_SEG_NUM  = SUB.RSLT_SEG_NUM and
VAR.PIN_NUM     = SUB.PIN_NUM and
VAR.SLICE_BGN_DT = SUB.SLICE_BGN_DT and
VAR.SLICE_END_DT = SUB.SLICE_END_DT)

    end-SELECT

    
end-procedure RSLT-Pin-Match

