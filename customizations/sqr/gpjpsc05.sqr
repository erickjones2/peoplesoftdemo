!***********************************************************************
! GPJPSC05.sqr:  Social Insurance Bonus Payment Report                 *
!                (Detail)                                              *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:47:55                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
#DEFINE JapaneseDates
#DEFINE PRINT_JAPANESE
begin-setup
#include 'gpjpscl2.sqc'  !page layout and printer definition
end-setup

begin-report


        do Init-Processing

        do Build-select

        do Process-Main

        do Update-Prcs-Run-Status

end-report


!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Get-Language-Codes      - prcslng.sqc                  *
!               Get-GPJPSC05-runctl                                    *
!               Init-Report                                            *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing


        do Init-Datetime

        do Get-Current-Datetime

        do Define-Prcs-Vars

        do Get-Run-Control-Parms

        do Get-Language-Codes

        do Get-GPJPSC05-runctl

        do Init-Report


end-procedure ! Init-Processing


!***********************************************************************
!                                                                      *
! Get-GPJPSC05-runctl                                                  *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Description:  Get data from GPJP_RC_SC_BNS runcontrol record.        *
!                                                                      *
!***********************************************************************

begin-procedure Get-GPJPSC05-runctl


begin-select

RC.GPJP_TAX_ESTAB
RC.GPJP_ACTL_PMNT_DT
RC.GPJP_PLAN_PMNT_DT

FROM  PS_GPJP_RC_SC_BNS RC
WHERE RC.OPRID          = $Prcs_OprID
AND   RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

        let $Rc_Gpjp_tax_estab = RTRIM(&RC.GPJP_TAX_ESTAB, ' ')
        let $Gpjp_actl_pmnt_dt = &RC.GPJP_ACTL_PMNT_DT
        let $Gpjp_plan_pmnt_dt = &RC.GPJP_PLAN_PMNT_DT

end-procedure !Get-GPJPSC05-runctl


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report


    do Init_Report_Translation ($ReportID, $curr_language_cd)

    do Append_Report_Translation ('GPJPSC05')

    let $_TableAlias = 'A'
    do Security-Param                   ! SQR Security

    move '1' to $Year4
    move '-' to $DDelimiter


end-procedure ! Init-Report


!***********************************************************************
!                                                                      *
! Build-select                                                         *
!                                                                      *
!                                                                      *
! Called By:    Begin-Report                                           *
!                                                                      *
! Description:  Build dynamic select statement for main procedure      *
!                                                                      *
!***********************************************************************

begin-procedure Build-select

     move '' to $SlctSC_Estblm

     if $Rc_Gpjp_tax_estab <> ''
        concat 'AND A.GPJP_TAX_ESTAB = ' with  $SlctSC_Estblm
        concat   '''' with $SlctSC_Estblm
        concat  $Rc_Gpjp_tax_estab with  $SlctSC_Estblm
        concat   ''' ' with $SlctSC_Estblm
     end-if

end-procedure !Build-select


!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By:    Begin-Report                                           *
!                                                                      *
! Description:  Main processing                                        *
!                                                                      *
!***********************************************************************
begin-procedure Process-Main

let $Estab_save = ' '
let #Empl_count = 0
let $No_records = 'Y'

begin-select
A.EMPLID
A.EMPL_RCD
A.GPJP_TAX_ESTAB
A.GPJP_HLTH_CARD_NUM
!A.GPJP_PENS_FUND
A.PYMT_DT
!A.GPJP_TOT_BNS_ERN
A.GPJP_MTH_CASH_RMN
A.GPJP_MTH_MAT_RMN
A.GPJP_SUM_MTH_RMN


        let $EmplID     = &A.Emplid
        let $Estab      = &A.Gpjp_tax_estab
        let $EstabType  = 'SC'
        let $No_records = 'N'

        if $Estab_save = ' '
           do Get-Estab-Name
        end-if

        if $Estab <> $Estab_save
           if $Estab_save <> ' '
              do TaxEstab-Address
           end-if
           do Get-Estab-Name
           do TaxEstab-Change
           let $Estab_save = $Estab
           let #Empl_count = 0
        end-if

        add 1 to #Empl_count

        do Get-Personal-Data

        let $Pymt_dt = &A.Pymt_dt

        if #Empl_count > 10
           do TaxEstab-Address
           do TaxEstab-Change
           let #Empl_count = 1
        end-if

        do Print-Employee-data


FROM  PS_GPJP_SC_BNS_RPT A
Where A.JOBINSTANCE = #prcs_job_instance
[$SlctSC_Estblm]
[$SecurityClauseWithoutERN]
ORDER BY A.GPJP_TAX_ESTAB, A.GPJP_HLTH_CARD_NUM

end-select

      If $No_records <> 'Y'
         do TaxEstab-Address
      end-if

end-procedure ! Process-Main


!***********************************************************************
!                                                                      *
! TaxEstab-Change                                                      *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure is executed whenever a change is        *
!               detected in Tax Establishment number.                  *
!                                                                      *
!***********************************************************************
begin-procedure TaxEstab-Change

          if $Estab_save <> ' '
             new-page
          end-if

          position (6, 1)

          do Get-Japanese-Dates-Estab

          let $Gpjp_actl_pymt_ymd = $Gpjp_actl_pymt_year_in_era || $Gpjp_actl_pymt_month || $Gpjp_actl_pymt_day
          print $Gpjp_actl_pymt_ymd             (0,66) edit xbbxbbxbbxbbxbbx point-size = 11

          position (+4, 0)
          print $SCEstabRef1                    (0,27) point-size = 9
          print $SCEstabRef2                    (0,36) point-size = 9

          position (+1, 0)
          print $Gpjp_plan_pymt_year_in_era     (0,92)
          print $Gpjp_plan_pymt_month           (0,97)

end-procedure !TaxEstab-Change


!***********************************************************************
!                                                                      *
! TaxEstab-Address                                                     *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure prints the Tax Establishment address    *
!                                                                      *
!***********************************************************************
begin-procedure TaxEstab-Address

          position  (89,1)

          let $Postal = ltrim($EstabPostal,' ')
          unstring $Postal by '-' into  $Postal1 $Postal2
          if $Postal2 = ''
            let $Postal2 = substr($Postal,4,4)
          end-if

          let $SC_address = $EstabState || ' ' || $EstabCity || ' ' || $EstabAddr1 || ' ' ||
                            $EstabAddr2 || ' ' || $EstabAddr3

          let #Addr_length = length($SC_address)
          If #Addr_length > 40
             let $SC_address1 = $EstabState || ' ' || $EstabCity || ' ' || $EstabAddr1
             let $SC_address2 = $EstabAddr2 || ' ' || $EstabAddr3
          else
             let $SC_address1 = $SC_address
             let $SC_address2 = ' '
          end-if

          print $Postal1         (0,31)
          print $Postal2         (0,37)
          print $SC_address1     (0,45)

          position (+1 ,0)

          IF $SC_address2 <> ' '

          print $SC_address2     (0,31)

          END-IF

          position (+2 ,0)

          print $EstabName       (0,31)
          position (+2 ,0)
          print $EstabMngID      (0,31)
          position (+3 ,0)
          print $EstabPhone      (0,31)


end-procedure !TaxEstab-Address


!***********************************************************************
!                                                                      *
! Get-Personal-Data                                                    *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure gets the employee's name, sex and       *
!               birthdate from the PS_PERSONAL_DT_FST view.            *
!                                                                      *
!***********************************************************************
begin-procedure Get-Personal-Data

      let  $Name = ' '
      let  $Sex = ' '
      let  $Birthdate = ' '

begin-select

PERS.EMPLID
PERS.NAME_FORMAL
PERS.SEX
PERS.BIRTHDATE

      let $Name = &PERS.Name_Formal
      let $Sex  = &PERS.Sex
      let $Birthdate = &PERS.Birthdate

FROM  PS_PERSONAL_DT_FST PERS
WHERE PERS.EMPLID        = $Emplid

end-select


end-procedure !Get-Personal-Data


!***********************************************************************
!                                                                      *
! Print-Employee-data                                                  *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure prints each employee's data             *
!                                                                      *
!***********************************************************************
begin-procedure Print-Employee-data


         evaluate #Empl_count
            when = 1
               position  (+6,1)
               break
            when = 2
               position  (+3,1)
               break
            when = 3
               position  (+3,1)
               break
            when = 4
               position  (+3,1)
               break
            when = 5
               position  (+3,1)
               break
            when = 6
               position  (+3,1)
               break
            when = 7
               position  (+3,1)
               break
            when = 8
               position  (+3,1)
               break
            when = 9
               position  (+3,1)
               break
            when = 10
               position  (+3,1)
               break
         end-evaluate

         do Get-Japanese-Dates

         print $Name               (0,95,20)                              !(2-5)  box in FDD



         if $Sex = 'F'
             if $PensFundFlg = 'Y'
                let $Type  = '6'
             else
                let $Type  = '2'
             end-if
         else
             if $PensFundFlg = 'Y'
                let $Type  = '5'
             else
                let $Type  = '1'
             end-if
         end-if

         print $Type               (0,123)                                !(2-6)

      position (+1, 0)

         let $Gpjp_hlth_card_num = &A.Gpjp_hlth_card_num

         print $Gpjp_hlth_card_num (0,12) edit 99999999                   !(2-1)

         print $Birth_era          (0,29) edit x                          !(2-2)
         print $Birth_year_in_era  (0,31) edit xx                         !(2-2)
         print $Birth_month        (0,34) edit xx                         !(2-2)
         print $Birth_day          (0,37) edit xx                         !(2-2)

         If $Pymt_dt <> $Gpjp_actl_pmnt_dt
         let $Pymt_ymd = $Pymt_year_in_era || $Pymt_month || $Pymt_day
         print $Pymt_ymd           (0,51) edit xbbxbbxbbxbbxbbx point-size = 11 !(2-3)
         end-if


         let $Gpjp_tot_bns_wrk = &A.Gpjp_sum_mth_rmn

         If &A.Gpjp_sum_mth_rmn >= 10000000
             let $Gpjp_sum_mth_rmn = '9999'
             print $Gpjp_sum_mth_rmn   (0,74) edit xbbxbbxbbx point-size = 11 !(2-4)
         else
             if &A.Gpjp_sum_mth_rmn >= 1000000
                 let $Gpjp_sum_mth_rmn = substr($Gpjp_tot_bns_wrk, 1, 4)
                 print $Gpjp_sum_mth_rmn   (0,74) edit xbbxbbxbbx point-size = 11 !(2-4)
             else
                 if &A.Gpjp_sum_mth_rmn >= 100000
                     let $Gpjp_sum_mth_rmn = substr($Gpjp_tot_bns_wrk, 1, 3)
                     print $Gpjp_sum_mth_rmn   (0,74) edit bbbxbbxbbx point-size = 11 !(2-4)
                 else
                     if &A.Gpjp_sum_mth_rmn >= 10000
                         let $Gpjp_sum_mth_rmn = substr($Gpjp_tot_bns_wrk, 1, 2)
                         print $Gpjp_sum_mth_rmn   (0,74) edit bbbbbbxbbx point-size = 11 !(2-4)
                     else
                         if &A.Gpjp_sum_mth_rmn >= 1000
                             let $Gpjp_sum_mth_rmn = substr($Gpjp_tot_bns_wrk, 1, 1)
                         else
                             let $Gpjp_sum_mth_rmn = '0'
                         end-if
                         print $Gpjp_sum_mth_rmn   (0,74) edit bbbbbbbbbx point-size = 11 !(2-4)
                     end-if
                 end-if
             end-if
         end-if

      position (+2, 0)


         let $Gpjp_cash_bns_ern = round(&A.Gpjp_mth_cash_rmn,0)



         print $Gpjp_cash_bns_ern  (0,96) edit 999,999,999                !(2-7)

         let $Gpjp_mat_bns_ern = round(&A.Gpjp_mth_mat_rmn,0)

         print $Gpjp_mat_bns_ern  (0,109) edit 999,999,999                !(2-8)


end-procedure !Print-Employee-data

!***********************************************************************
!                                                                      *
! Get-Japanese-Dates                                                   *
!                                                                      *
!                                                                      *
! Called By:    Print-Employee-data                                    *
!                                                                      *
! Description:  This procedure converts the birthdate and the bonus    *
! payment date into the appropriate Japanese format                    *
!                                                                      *
!***********************************************************************
begin-procedure Get-Japanese-Dates

        let $Date_1912 = '19120729'
        let $Date_1926 = '19261224'
        let $Date_1989 = '19890107'

         if $Birthdate <> ' ' and $Birthdate <> ''
           do Convert-To-DTU-Date ($Birthdate, $Birthdate_out)
           let $Birthdate_cmp = substr($Birthdate_out,1,4) || substr($Birthdate_out,6,2) || substr($Birthdate_out,9,2)
           do Get-DateComponents ($Birthdate_cmp,#Year,#Month,#Day)

           if $Birthdate_cmp <= $Date_1912
              let $Birth_era = 1
              let #Print_year = #Year - 1868
              move #Print_year to $Birth_year_in_era 09
           else
              if $Birthdate_cmp <= $Date_1926
                 let $Birth_era = 3
                 let #Print_year = #Year - 1911
                 move #Print_year to $Birth_year_in_era 09
              else
                 if $Birthdate_cmp <= $Date_1989
                    let $Birth_era = 5
                    let #Print_year = #Year - 1925
                    move #Print_year to $Birth_year_in_era 09
                 else
                    let $Birth_era = 7
                    let #Print_year = #Year - 1988
                    move #Print_year to $Birth_year_in_era 09
                 end-if
              end-if
           end-if
           move #Month to $Birth_month 09
           move #Day to   $Birth_day 09

         else
           let  $Birth_era = ' '
           let  $Birth_year_in_era = ' '
           let  $Birth_month = ' '
           let  $Birth_day = ' '
         end-if


         if $Pymt_dt <> ' ' and $Pymt_dt <> ''
           do Convert-To-DTU-Date ($Pymt_dt, $Pymt_dt_out)
           let $Pymt_dt_cmp = substr($Pymt_dt_out,1,4) || substr($Pymt_dt_out,6,2) || substr($Pymt_dt_out,9,2)
           do Get-DateComponents ($Pymt_dt_cmp,#Year,#Month,#Day)

           if $Pymt_dt_cmp <= $Date_1912
              let #Print_year = #Year - 1868
              move #Print_year to $Pymt_year_in_era 09
           else
              if $Pymt_dt_cmp <= $Date_1926
                 let #Print_year = #Year - 1911
                 move #Print_year to $Pymt_year_in_era 09
              else
                 if $Pymt_dt_cmp <= $Date_1989
                    let #Print_year = #Year - 1925
                    move #Print_year to $Pymt_year_in_era 09
                 else
                    let #Print_year = #Year - 1988
                    move #Print_year to $Pymt_year_in_era 09
                 end-if
              end-if
           end-if
           move #Month to $Pymt_month 09
           move #Day to   $Pymt_day 09

         else
           let  $Pymt_year_in_era = ' '
           let  $Pymt_month = ' '
           let  $Pymt_day = ' '
         end-if

end-procedure !Get-Japanese-Dates


!***********************************************************************
!                                                                      *
! Get-Japanese-Dates-Estab                                             *
!                                                                      *
!                                                                      *
! Called By:    TaxEstab-Change                                        *
!                                                                      *
! Description:  This procedure converts the actual/planned             *
! payment date of the bonuses into the appropriate Japanese format     *
!                                                                      *
!***********************************************************************
begin-procedure Get-Japanese-Dates-Estab

        let $Date_1912 = '19120729'
        let $Date_1926 = '19261224'
        let $Date_1989 = '19890107'

         if $Gpjp_actl_pmnt_dt <> ' ' and $Gpjp_actl_pmnt_dt <> ''
           do Convert-To-DTU-Date ($Gpjp_actl_pmnt_dt, $Gpjp_actl_pmnt_dt_out)
           let $Gpjp_actl_pmnt_dt_cmp = substr($Gpjp_actl_pmnt_dt_out,1,4) || substr($Gpjp_actl_pmnt_dt_out,6,2) || substr($Gpjp_actl_pmnt_dt_out,9,2)
           do Get-DateComponents ($Gpjp_actl_pmnt_dt_cmp,#Year,#Month,#Day)

           if $Gpjp_actl_pmnt_dt_cmp <= $Date_1912
              let #Print_year = #Year - 1868
              move #Print_year to $Gpjp_actl_pymt_year_in_era 09
           else
              if $Gpjp_actl_pmnt_dt_cmp <= $Date_1926
                 let #Print_year = #Year - 1911
                 move #Print_year to $Gpjp_actl_pymt_year_in_era 09
              else
                 if $Gpjp_actl_pmnt_dt_cmp <= $Date_1989
                    let #Print_year = #Year - 1925
                    move #Print_year to $Gpjp_actl_pymt_year_in_era 09
                 else
                    let #Print_year = #Year - 1988
                    move #Print_year to $Gpjp_actl_pymt_year_in_era 09
                 end-if
              end-if
           end-if
           move #Month to $Gpjp_actl_pymt_month 09
           move #Day to   $Gpjp_actl_pymt_day 09

         else
           let  $Gpjp_actl_pymt_year_in_era = ' '
           let  $Gpjp_actl_pymt_month = ' '
           let  $Gpjp_actl_pymt_day = ' '
         end-if

         if $Gpjp_plan_pmnt_dt <> ' ' and $Gpjp_plan_pmnt_dt <> ''
           do Convert-To-DTU-Date ($Gpjp_plan_pmnt_dt, $Gpjp_plan_pmnt_dt_out)
           let $Gpjp_plan_pmnt_dt_cmp = substr($Gpjp_plan_pmnt_dt_out,1,4) || substr($Gpjp_plan_pmnt_dt_out,6,2) || substr($Gpjp_plan_pmnt_dt_out,9,2)
           do Get-DateComponents ($Gpjp_plan_pmnt_dt_cmp,#Year,#Month,#Day)

           if $Gpjp_plan_pmnt_dt_cmp <= $Date_1912
              let #Print_year = #Year - 1868
              move #Print_year to $Gpjp_plan_pymt_year_in_era 09
           else
              if $Gpjp_plan_pmnt_dt_cmp <= $Date_1926
                 let #Print_year = #Year - 1911
                 move #Print_year to $Gpjp_plan_pymt_year_in_era 09
              else
                 if $Gpjp_plan_pmnt_dt_cmp <= $Date_1989
                    let #Print_year = #Year - 1925
                    move #Print_year to $Gpjp_plan_pymt_year_in_era 09
                 else
                    let #Print_year = #Year - 1988
                    move #Print_year to $Gpjp_plan_pymt_year_in_era 09
                 end-if
              end-if
           end-if
           move #Month to $Gpjp_plan_pymt_month 09

         else
           let  $Gpjp_plan_pymt_year_in_era = ' '
           let  $Gpjp_plan_pymt_month = ' '

         end-if

end-procedure !Get-Japanese-Dates-Estab


!***********************************************************************
!                                                                      *
!                                                                      *
! SQCS included in the report                                          *
!                                                                      *
!***********************************************************************
#include 'getestab.sqc'     ! Get Establishment Data from the GPJP_TAX_ESTAB
#include 'datemath.sqc'     ! Date conversion procedures
#include 'number.sqc'       !Routines to format numbers
#include 'datetime.sqc'     !Routines for date and time formatting
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcsapi.sqc'      ! Replaces stdapi.sqc
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset1.sqc'        ! Reset printer procedure
#include 'hrsecty.sqc'      ! Get SQR Security parameters
