!***********************************************************************
!  PAY304RT:  Retro Pay Messages Report                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2013, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/17:15:40:12                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move 'PAY304RT' to $ReportID

  do Init-DateTime
  do Init-Number
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay304rt_ReportTitle to $ReportTitle
  display $ReportTitle

  do Select-Parameters

  do Get-Current-DateTime
  do Array-Initialization

  do Build-Where-Clause
  do Build-Order-Clause
  move 'N' to $DataFound

  if $SortOption = '3'
     move 3 to #t
  else
     move 2 to #t
  end-if

end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY304RT  program id
   do Init_Report_Translation($ReportID,$Language_Cd)
   do Append_Report_Translation('HR')


   do Get_Field_Information ('PAY304RT', 'REPORT_TITLE',   $Pay304rt_ReportTitle,   #dummy_width)
   do Get_Field_Information ('PAY304RT', 'GRAND',          $Pay304rt_Grand,         #dummy_width)
   do Get_Field_Information ('PAY304RT', 'COMPANY',        $Pay304rt_Company,       #dummy_width)
   do Get_Field_Information ('PAY304RT', 'TOT_MSG',        $Pay304rt_Tot_Msg,       #dummy_width)
   do Get_Field_Information ('PAY304RT', 'EMPLID',         $Pay304rt_EmplID,        #dummy_width)
   do Get_Field_Information ('PAY304RT', 'EMPL',           $Pay304rt_Empl,          #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RCD',            $Pay304rt_Rcd,           #dummy_width)
   do Get_Field_Information ('PAY304RT', 'EMPL_NAME',      $Pay304rt_Empl_Name,     #dummy_width)
   do Get_Field_Information ('PAY304RT', 'PAYGROUP',       $Pay304rt_Paygroup,      #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RETRO_PAY',      $Pay304rt_Retro_Pay,     #dummy_width)
   do Get_Field_Information ('PAY304RT', 'END_DT',         $Pay304rt_End_Date,      #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RETRO_SEQ',      $Pay304rt_Retro_Seq,     #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RQST_TYPE',      $Pay304rt_Rqst_Type,     #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RQST_TYPE_A',    $Pay304rt_Rqst_Type_A,   #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RQST_TYPE_J',    $Pay304rt_Rqst_Type_J,   #dummy_width)
   do Get_Field_Information ('PAY304RT', 'RQST_TYPE_M',    $Pay304rt_Rqst_Type_M,   #dummy_width)
   do Get_Field_Information ('PAY304RT', 'PGLINE',         $Pay304rt_PgLine,        #dummy_width)
   do Get_Field_Information ('PAY304RT', 'SEP',            $Pay304rt_Sep,           #dummy_width)
   do Get_Field_Information ('PAY304RT', 'CHECK',          $Pay304rt_Check,         #dummy_width)
   do Get_Field_Information ('PAY304RT', 'OFF_CYCLE1',     $Pay304rt_Off_Cycle1,    #dummy_width)
   do Get_Field_Information ('PAY304RT', 'OFF_CYCLE2',     $Pay304rt_Off_Cycle2,    #dummy_width)
   do Get_Field_Information ('PAY304RT', 'MSG',            $Pay304rt_Msg,           #dummy_width)
   do Get_Field_Information ('PAY304RT', 'ID',             $Pay304rt_Id,            #dummy_width)

end-procedure

begin-procedure Array-Initialization
  create-array name=Totals size=4 -
    field=TotalName:char field=LevelName:char field=total:number:1 field=startCol:number:1

  put 'G'     into Totals(1) TotalName
  put 'C'     into Totals(2) TotalName
  put 'P'     into Totals(3) TotalName

  put 77 into Totals(0) startCol(0)
end-procedure


begin-heading 8

#include 'stdhdg02.sqc'

  print $Pay304rt_Empl         (+4,14)
  print $Pay304rt_Retro_Pay     (0,59)
  print $Pay304rt_Sep           (0,106)
  print $Pay304rt_Off_Cycle1    (0,112)
  print $Pay304rt_Msg           (0,118)

  print $Pay304rt_EmplID       (+1,1)
  print $Pay304rt_Rcd           (0,14)
  print $Pay304rt_Empl_Name     (0,20)
  print $Pay304rt_Paygroup      (0,49)
  print $Pay304rt_End_Date      (0,59)
  print $Pay304rt_Retro_Seq     (0,70)
  print $Pay304rt_Rqst_Type     (0,86)
  print $Pay304rt_PgLine        (0,96)
  print $Pay304rt_Check         (0,106)
  print $Pay304rt_Off_Cycle2    (0,112)
  print $Pay304rt_Id            (0,120)
  print $Pay304rt_Msg           (0,125)
end-heading


begin-procedure Process-Main

begin-SELECT DISTINCT
M.COMPANY     () on-break print=never level=1 procedure=Company-Change

    put &M.COMPANY into Totals(2) LevelName

M.PAYGROUP    () on-break print=never level=2 procedure=PayGroup-Change

    put &M.PAYGROUP into Totals(3) LevelName

R.EMPLID
R.EMPL_RCD
N.NAME
N.LAST_NAME
N.FIRST_NAME
M.PAY_END_DT
M.RETROPAY_SEQ_NO
R.RETROPAY_RQST_TYPE

    if &R.RETROPAY_RQST_TYPE = 'A'
        move $Pay304rt_Rqst_Type_A to $Rqst-Descr
    end-if
    if &R.RETROPAY_RQST_TYPE = 'J'
        move $Pay304rt_Rqst_Type_J to $Rqst-Descr
    end-if
    if &R.RETROPAY_RQST_TYPE = 'M'
        move $Pay304rt_Rqst_Type_M to $Rqst-Descr
    end-if

M.PAGE_NUM
M.LINE_NUM
M.SEPCHK
M.OFF_CYCLE
M.MSGID
M.MSGDATA1
M.MSGDATA2
M.MSGDATA3

  do Get-Msg-Descr

  do Print-Msg-Detail

  move 'Y' to $DataFound

FROM PS_RETROPAY_MSG M,
     PS_RETROPAY_RQST R,
     PS_PERSON_NAME N


WHERE  [$Company_Where]
       [$Paygroup_Where]
       [$PayEndDt_Where]
      R.RETROPAY_SEQ_NO = M.RETROPAY_SEQ_NO
  AND N.EMPLID          = R.EMPLID

ORDER BY [$Sort_Order]

end-SELECT

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals

end-procedure

begin-procedure Get-Msg-Descr

begin-SELECT
PM.DESCR
PM.DESCRLONG

   move &PM.DESCR     to $PRNT_DESCR
   move &PM.DESCRLONG to $PRNT_DESCRLONG

   if $Curr_language_cd <> $Psoptions_Language_Cd
      do Get-MsgLang-Descr
   end-if

FROM PS_PAY_MESSAGE_TBL PM

WHERE PM.MSGID = &M.MSGID
end-SELECT

end-procedure


begin-procedure Get-MsgLang-Descr

begin-SELECT
LC.DESCR
LC.DESCRLONG

   let $PRNT_DESCR     = Cond(Rtrim(&LC.DESCR,' ')='', &PM.DESCR, &LC.DESCR)
   let $PRNT_DESCRLONG = Cond(Rtrim(&LC.DESCRLONG,' ')='', &PM.DESCRLONG, &LC.DESCRLONG)

FROM PS_PAY_MESSAGE_LNG LC

WHERE LC.MSGID       = &M.MSGID
  AND LC.LANGUAGE_CD = $Curr_language_cd

end-SELECT

end-procedure


begin-procedure Print-Msg-Detail

  move &M.Company       to $Company   !for the Heading

  print &R.EMPLID              (2,1)
  print &R.EMPL_RCD            (2,15)
  print &N.NAME                (2,20,30)
  print &M.PAYGROUP            (2,52)

  do Format-DateTime(&M.PAY_END_DT, $out, {DEFMDY}, '', '')
  print $out                   (2,59)

  print &M.RETROPAY_SEQ_NO     (2,70)
  print $Rqst-Descr            (2,86)
  print &M.PAGE_NUM            (2,95)  EDIT 99999
  print &M.LINE_NUM            (2,102) EDIT 999
  print &M.SEPCHK              (2,107) EDIT 99
  print &M.OFF_CYCLE           (2,114)
  print &M.MSGID               (2,118)
  print $PRNT_DESCR            (2,125)
  print $PRNT_DESCRLONG        (3,125) WRAP 50 10

  let $msgdata = RTRIM(&M.Msgdata1, ' ')
  if $msgdata > ' '
     concat ';' with $msgdata
  end-if
  let $field   = RTRIM(&M.Msgdata2, ' ')
  if $field > ' '
     concat $field  with $msgdata
     concat ';' with $msgdata
  end-if
  let $field   = RTRIM(&M.Msgdata3, ' ')
  if $field > ' '
     concat $field  with $msgdata
  end-if
  print $Msgdata               (+1,125)
  print ' '                     (0,1)

  ARRAY-ADD 1 to TOTALS(#t) TOTAL(0)
  NEXT-LISTING NEED=8

end-procedure


begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  if $SortOption = '3'
     move 3 to #changeLevel
     do Print-Totals
  end-if
end-procedure


begin-procedure Print-Totals
  move #t to #totalRow

  while #totalRow >= #changeLevel

    if #current-line > 55  !don't split a total series across pages
      new-page
    end-if

    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    get $LevelName from Totals(#totalRow) LevelName

        if $DataFound = 'N'
           let $GrandSpace = ''
        else
           let $GrandSpace = '   '
        end-if

        if $TotalName = 'P'
           let $Total = $Pay304rt_Paygroup || ' ' || $LevelName || ' ' || $Pay304rt_Tot_Msg
        end-if

        if $TotalName = 'C'
           let $Total = $Pay304rt_Company || '  ' || $LevelName || ' ' || $Pay304rt_Tot_Msg
        end-if

        if $TotalName = 'G'
           let $Total = $Pay304rt_Grand || '    ' || $GrandSpace || ' ' || $Pay304rt_Tot_Msg
        end-if

    print $Total (+2,33)
    move 0 to #i

    while #i <= 0
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    position (-1)
    do Reset
  end-if

  new-page
end-procedure


begin-procedure Build-Where-Clause

   let $W1 =  'M.COMPANY = '''
   let $W2 = $PromptCompany
   let $W3 = ''' AND '
   let $W4 = 'M.PAYGROUP = '''
   let $W5 = $PromptPaygroup
   let $W6 = 'M.PAY_END_DT = '''
   let $W7 = $PromptPayEndDt

   if $PromptCompany = ''
      let $Company_Where = ''
   else
      let $Company_Where = $W1 || $W2 || $W3
   end-if

   if $PromptPaygroup = ''
      let $Paygroup_Where = ''
   else
      let $Paygroup_Where = $W4 || $W5 || $W3
   end-if

   if $PromptPayEndDt = ''
      let $PayEndDt_Where = ''
   else
      let $PayEndDt_Where = $W6 || $W7 || $W3
   end-if

end-procedure


begin-procedure Build-Order-Clause

  let $O1  = 'M.COMPANY, R.EMPLID, R.EMPL_RCD, M.RETROPAY_SEQ_NO'
  let $O2  = 'M.COMPANY, N.LAST_NAME, N.FIRST_NAME, R.EMPLID, R.EMPL_RCD, M.RETROPAY_SEQ_NO'
  let $O3  = 'M.COMPANY, M.PAYGROUP, R.EMPLID, R.EMPL_RCD, M.RETROPAY_SEQ_NO'
  let $O4  = 'M.COMPANY, M.RETROPAY_SEQ_NO, R.EMPLID, R.EMPL_RCD'

  if $SortOption = '1'
     let $Sort_Order = $O1
  end-if

  if $SortOption = '2'
     let $Sort_Order = $O2
  end-if

  if $SortOption = '3'
     let $Sort_Order = $O3
  end-if

  if $SortOption = '4'
     let $Sort_Order = $O4
  end-if

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'reset1.sqc'    !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrtrpt.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language

