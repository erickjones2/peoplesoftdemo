!***********************************************************************
!  GPMXLF01:  Termination/Layoff Letter                                *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2014/07/14:12:07:34                                 !
!       $Release:  HR92                                                !
!      $Revision:  103                                                 !
!                                                                      *
!***********************************************************************
!VHO NOV-11-2004
#include 'setenv.sqc'
#define FirstRow 11

Begin-Setup
#include 'ptset01.sqc'
End-Setup

begin-report
   do Init-report
   do Process-Main
   do Stdapi-Term
   do Reset

end-report

begin-procedure Init-Report
    Do GetPinNumbers
    move '2' to $ReportDateType   ! Set for date to format as DMY
    move '1' to $ReportYear4      ! Set for year to be formatted YYYY
    do Init-DateTime
    do Init-Number
    do Stdapi-Init
    do Get-Current-DateTime
    move 'GPMXLF01'         To $ReportID
    move 'Termination/Layoff Letters'  To $ReportTitle
    show '  '$ReportID
    show '  '$ReportTitle
    show 'Ver. 2014-PUM8.01'
    date-time () hh:mi:ss &timeBegan
    display 'Report Began: ' noline
    display &timeBegan

end-procedure Init-Report

begin-procedure Process-Main
    let $Earnings   = ''
    let $Deductions = ''
    let $gv_Order   = ''
    let #limit_detail = 17            !Limit for Detail Print
    let #regpro = 0
    let #reglei = 0
    do Get-PsOptions-Language($Curr_language_Cd)
    show 'Language: ' $Curr_language_Cd
    do Get-Parameters
    do Def-Arrays
    do Get-Period
    do get-code-dayspay
    do Get-Emplid
    date-time () hh:mi:ss &timeEnded
end-procedure Process-Main

begin-procedure Termination-Letter
  let #StdFont     = 5                  !Times Roman proportional
  let #StmtPntSize = 16                 !statement point-size
  let #DescrSize   = 12                 !Pin Name Size Print

  let #ren = {FirstRow} - 3
  let #col = 20

  Do DTU-Parse-Date($Term_Date,#Ano,#Mes,#Dia)
  let $DiaPr = to_char(#Dia)
  let $AnoPr = to_char(#Ano)
  Do Evaluate-Month
  uppercase $State 
  Let $DatePr = $City || ', ' || $State || ' a ' || $DiaPr || ' de ' || $Mes || ' de ' || $AnoPr || '.'
  let $DatePr2 = lpad($DatePr,80,' ')

  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont

  Print $Gpmxlf01_Title_term (#ren,55) BOLD Underline
  Add 5 to #ren
  Print $DatePr2          (#ren,#col)
  Add 6 to #ren
  Print $CompanyName     (#ren,#col)
  Add 2 to #ren
  Print $Company_Address  (#ren,#col)
  Add 2 to #ren
  Print $Company_Address2 (#ren,#col)
  Add 2 to #ren
  Print $Company_Address3 (#ren,#col)

  Add 6 to #ren
  Print 'Por  medio  de  la  presente  y  con  esta fecha  doy por terminado, en' (#ren,#col)
  add 2 to #ren
  Print 'forma voluntaria e irrevocable, mi contrato y/o relación individual de' (#ren,#col)
  add 2 to #ren
  Print 'trabajo  que  me  une  a  esta  empresa  en  terminos   del   artículo 53' (#ren,#col)
  add 2 to #ren
  Print 'fracción I de la  Ley Federal del Trabajo,  renunciando  al puesto que' (#ren,#col)
  add 2 to #ren
  Print 'hasta la fecha desarrollé.'  (#ren,#col)

  Add 5 to #ren
  Print 'Agradezco  todas  y  cada una de las atenciones  que me dispensaron,' (#ren,#col)
  add 2 to #ren
  Print 'otorgando  por  separado el  finiquito de  las  prestaciones  a  las  que' (#ren,#col)
  add 2 to #ren
  Print 'legal  y   contractualmente  tengo  derecho,  y  que  a  esta  fecha  me' (#ren,#col)
  add 2 to #ren
  Print 'han  sido  cubiertas,  por la  ejecución y  terminación del  trabajo que' (#ren,#col)
  add 2 to #ren
  Print 'doy  por  concluido.'  (#ren,#col)

  Add 8 to #ren
  Print 'Atentamente' (#ren,#col)
  Add 10 to #ren
  Print '__________________________' (#ren,#col)
  Print $Name                        (+2,#col)


end-procedure Termination-Letter


begin-procedure Format-Payslip-HD

  let #StdFont     = 5                  !Times Roman proportional
  let #StmtPntSize = 8                  !statement point-size
  let #DescrSize   = 7                  !Pin Name Size Print

  let #row1 = 4 !{FirstRow}                !Init Row Payslip Format
  let #row2 = #row1 + 15                !Header Earnings and Deductions
  let #row3 = #row2 + 3                 !Header details Earnis and Deductions
  let #row4 = #row3 + 23                !NetPay
  
  Let #row5  = #row4 + 3                 !Header Prinitng CFDI
  Let #row6  = #row5 + 1                 !Payment Method 
  Let #row7  = #row6 + 1                 !Payment form
  Let #row8  = #row7 + 1                 !Serial CFD
  Let #row9  = #row8 + 1                 !Fiscal Folio
  Let #row10 = #row9 + 1                 !Serial SAT
  Let #row11 = #row10 + 1                !Timestam 
   
  let #row12 = #row11 + 2                !Header digital Stamp
  let #row13 = #row12 + 1                !Digital Stamp
  let #row14 = #row13 + 2                !Header Stamp SAT
  let #row15 = #row14 + 1                !Stamp SAT
  let #row16 = #row15 + 2                !Header Source String 
  let #row17 = #row16 + 1                !Source String 
  let #row18 = #row17 + 4                !Message
  let #row19 = #row18 + 6                !Date
  let #row20 = #row19 + 4                !Line for Sign Up

  let #ren = #row1 -3
  Alter-Printer Point-size = 16 Font-Type = Proportional Font = #StdFont
  Print 'CARTA FINIQUITO' (#ren,55) BOLD Underline
  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
  let #ren = #row1  -1
  columns 8
  print 'Página:'   (#ren,109)  Bold
  print #page_act (,+2)  Bold Edit '99'
  print '/'      (,+1)  Bold
  print #tot-page   (,+1)  Bold Edit '99'
  columns 8 71

  graphic (#row1,1,63) box  2 10 12
  !graphic (#row1,,63)  box  2 10
  graphic (+2,,63)     box 12 10
  next-column
  graphic (#row1,1,63) box  2 10 12
  !graphic (#row1,,63)  box  2 10
  graphic (+2,,63)     box 12 10
  next-column
  graphic (#row2,1,62) box  2 10 12
  graphic (#row2,,62)  box  2 10
  next-column
  graphic (#row2,1,63) box  2 10 12
  graphic (#row2,,63)  box  2 10

  columns 8 22 48 58  71 85 111 121 133
                   !Percepciones
  graphic (#row3,1,15) box  2 10 12
  graphic (#row3,,15)  box  2 10
  graphic (+2,,14)     box 18 10
  graphic (+18,,51)    box  2 10 12
  next-column
  graphic (#row3,1,26) box  2 10 12
  graphic (#row3,,26)  box  2 10
  graphic (+2,,26)     box 18 10
!  graphic (+18,,26)    box  2 10 12
  next-column
  graphic (#row3,1,10) box  2 10 12
  graphic (#row3,,10)  box  2 10
  graphic (+2,,10)     box 18 10
!  graphic (+18,,10)    box  2 10 12
  next-column
  graphic (#row3,1,12) box  2 10 12
  graphic (#row3,,12)  box  2 10
  graphic (+2,,12)     box 18 10
  graphic (+18,,12)    box  2 10 12

  next-column     !Deducciones

  graphic (#row3,1,15) box  2 10 12
  graphic (#row3,,15)  box  2 10
  graphic (+2,,14)     box 18 10
  graphic (+18,,51)    box  2 10 12
  next-column
  graphic (#row3,1,26) box  2 10 12
  graphic (#row3,,26)  box  2 10
  graphic (+2,,26)     box 18 10
!  graphic (+18,,26)    box  2 10 12
  next-column
  graphic (#row3,1,10) box  2 10 12
  graphic (#row3,,10)  box  2 10
  graphic (+2,,10)     box 18 10
!  graphic (+18,,10)    box  2 10 12
  next-column
  graphic (#row3,1,13) box  2 10 12
  graphic (#row3,,13)  box  2 10
  graphic (+2,,13)     box 18 10
  graphic (+18,,13)    box  2 10 12

  columns 8

  graphic (#row4,74,53) box  2 10 12
  graphic (#row4,,53)   box  2 10

  graphic (#row5,64,63)    box  1 10 12 ! Info CFDI
  graphic (#row6,64,63)    box  6 10  
  
  graphic (#row12,1,126)    box  1 10 12 ! Sello Digital
  graphic (#row13,1,126)    box  3 7    
  graphic (#row14,1,126)    box  1 10 12 ! Sello SAT
  graphic (#row15,1,126)    box  3 10    
  
  graphic (#row16,1,126)    box  1 10 12 ! Cadena original
  graphic (#row17,1,126)    box  3 10  

  columns 8 71

  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
  let #ren = #row1 + 1
  let #col = trunc( (47 - length('DATOS EMPRESA'))/2 *1.4,0)
  print 'DATOS EMPRESA' (#ren,#col) bold
  next-column
  let #col = trunc( (47 - length('DATOS EMPLEADO'))/2 *1.4,0)
  print 'DATOS EMPLEADO'  (#ren,#col) bold
  next-column
  let #leng1 = length($CompanyName)
  let #leng2 = length($Gpmxlf01_Name_Emp)
  if #leng1 > 35 or #leng2 > 35
      add 1 to #ren
    else
      add 2 to #ren
  end-if 
  Print 'Compañía:'          (#ren,2)  Bold
  Print $CompanyName            (#ren,22) Wrap 40 1
  next-column
  Print 'Nombre:'            (#ren,2)  Bold
  Print $Name                   (#ren,22) Wrap 40 1
  next-column
  if #leng1 > 35 or #leng2 > 35
    add 2 to #ren
   else
    add 1 to #ren
  end-if
  Print 'Grupo de Pago:'       (#ren,2)  Bold
  Print $PayGroup               (#ren,22)
  next-column
  Print 'Núm. Empleado:'         (#ren,2)  Bold
  Print $Emplid                 (#ren,22)
  next-column
  add 1 to #ren
  Print 'Periodo:'        (#ren,2)  Bold
  Print $Begin_Dt               (#ren,22)
  Print 'al'            (,+1)
  Print $End_Dt                 (,+1)
  next-column
  Print 'R.F.C.:'           (#ren,2) bold
  Print $Empl_RFC               (#ren,22)
  next-column
  add 1 to #ren
  Print 'R.F.C.:'           (#ren,2) bold
  Print $Company_RFC            (#ren,22)
  next-column
  Print 'CURP:'          (#ren,2) bold
  Print $Empl_Curp              (#ren,22)
  next-column
  add 1 to #ren
  Print 'Tipo de Pago:'  (#ren,2) bold
  Print $Payroll_type           (#ren,22)
  next-column
  Print 'Registro IMSS:'          (#ren,2) bold
  Print $Empl_IMSS              (#ren,22)
  next-column
  add 1 to #ren
  Print 'Departamento:'          (#ren,2) bold
  Let $Dept_descrf = $Deptid || ' ' || $Dept_Descr
  Print $Dept_descrf            (#ren,22,35)
  next-column
  Print 'Fecha Ingreso:'          (#ren,2) bold
  Print $Service_Date           (#ren,22)
  next-column
  add 1 to #ren
  Print 'Localidad:'          (#ren,2) bold
  LET $Loc_Descr = $Location || ' ' || $Location_Descr
  Print $Loc_Descr              (#ren,22,35)
  next-column
  Print 'Fecha Baja:'      (#ren,2) bold
  Print $Term_Date              (#ren,22)
  next-column
  add 1 to #ren
  Print 'Puesto:'    (#ren,2) bold
  Let $Desc_JC = $JobCode || ' ' || $JobCode_Descr
  Print $Desc_JC               (#ren,22,35)
  next-column
  Print 'Antigüedad:'       (#ren,2) bold
  Print #Years_T               (#ren,22) edit '00'
  Print $Gpmxlf01_Years        (,+1)
  Print #Months_T              (,+1) edit '00'
  Print $Gpmxlf01_Months       (,+1)
  next-column
  add 1 to #ren
  next-column
  Print 'Salario Diario:'     (#ren,2) bold
  Print #Daily_rt              (#ren,22) edit '9,999,999.99'
  next-column
  add 1 to #ren
  next-column
  Print 'Salario Integrado:'      (#ren,2) bold
  Print #sdi                   (#ren,22) edit '9,999,999.99'
  next-column
  let #col = trunc( (47 - length('PERCEPCIONES'))/2 *1.4,0)
  let #rowx = #row2 + 1
  Print 'PERCEPCIONES' (#rowx,#col) bold Wrap 50 2
  next-column
  let #col = trunc( (47 - length('DEDUCCIONES'))/2 *1.4,0)
  Print 'DEDUCCIONES'  (#rowx,#col) bold Wrap 50 2

  !Cambiar las columnas para el encabezado siguiente

  columns 8 22 48 58  71 85 111 121 133

  Print 'CLAVE' (#row3,2) bold Wrap 5 2
  next-column
  Print 'DESCRIPCIÓN' (#row3,2) bold Wrap 15 2
  next-column
  Print 'DÍAS U HORAS' (#row3,2) bold Wrap 7 2
  next-column
  Print 'IMPORTE' (#row3,2) bold Wrap 10 2
  next-column
  Print 'CLAVE' (#row3,2) bold Wrap 5 2
  next-column
  Print 'DESCRIPCIÓN' (#row3,2) bold Wrap 15 2
  next-column
  Print 'DÍAS U HORAS' (#row3,2) bold Wrap 7 2
  next-column
  Print 'IMPORTE' (#row3,2) bold Wrap 10 2
  next-column
  next-column

end-procedure Format-Payslip-HD

begin-procedure Format-Payslip-DT
  let #ren = #row3 + 2
  let #print_item = 1
  let #lines_total = 1
  let #amount_erntot = 0
  let #sum_ern = 0
  let #sum_ded = 0
  let #amount_dedtot = 0
  while #print_item <= #count_t
     if #lines_total > #limit_detail
       new-page
       let #lines_total = 1
       Add 1 to #page_act
       Do Format-Payslip-HD
       let #ren = #row3 + 2
     end-if
     if  #cont_e >= #print_item
        get #piner #amount_er #unit_er from arr_erns(#print_item) e_code e_amount e_unit
        let #pin_nmp = #piner
        do Get-Pin-Descr
        let $piner = $pin_nm
        Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont
        Print $piner               (#ren,2,12)
        next-column
        Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
        Print $pin_descr           (#ren,2,19) ! 19 Maximo
        next-column

        !if $pin_code = 'SUELDO CAL MEX' or $pin_code = 'SUELDO FREC MEX'
        !  let #ac_pinnm = #pin_units
        !  DO Get-Accum-Unit
        !  let #unit_er = #amount_acc
        !end-if

        Print #unit_er             (#ren,4)  EDIT 'B999.99'
        next-column
        Print #amount_er           (#ren,2)  EDIT '9,999,999.99'
        let #sum_ern = #sum_ern + #amount_er
        add #amount_er to #amount_erntot
        next-column
       else
         next-column
         next-column
         next-column
         next-column
     end-if
     if  #cont_d >= #print_item
        get #pinde #amount_de #unit_de from arr_ded (#print_item) d_code d_amount d_unit
        let #pin_nmp = #pinde
        do Get-Pin-Descr
        let $pinde = $pin_nm
        Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont
        Print $pinde               (#ren,2,12)
        next-column
        Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
        Print $pin_descr           (#ren,2,19)   ! 19 Maximo
        next-column
        Print #unit_de             (#ren,4) EDIT 'B999.99'
        next-column
        Print #amount_de           (#ren,2) EDIT '9,999,999.99'
        let #sum_ded = #sum_ded + #amount_de
        add #amount_de to #amount_dedtot
        next-column
        next-column
       else
        next-column
        next-column
        next-column
        next-column
        next-column
     end-if
     Add 1 to #ren
     Add 1 to #print_item
     Add 1 to #lines_total
  end-while
     do Format-Payslip-BO
end-procedure Format-Payslip-DT

begin-procedure Format-Payslip-BO
  let #ren = #row4 - 3
Print $Gpmxps01_Total (#ren,2,6) bold
  next-column
  let #ac_pinnm = #earn_tot
  DO Get-Accum
  Print $pin_erntot     (#ren,2)  bold Wrap 18 2
  next-column
  next-column
  !Insertar nueva suma Percepciones
  let #amount_erntot = #sum_ern
  Print #amount_erntot  (#ren,2)  EDIT '9,999,999.99'
  next-column
  Print $Gpmxps01_Total (#ren,2,6) bold
  next-column
  let #ac_pinnm = #ded_tot
  DO Get-Accum
  Print $pin_dedtot     (#ren,2)  bold Wrap 18 2
  next-column
  next-column
  
  let #amount_dedtot = #sum_ded
  Print #amount_dedtot  (#ren,2)  EDIT '9,999,999.99'
  next-column
  columns 1
  let #ren = #row4
  let #ac_pinnm = #net_pay
  DO Get-Accum

  Print $pin_netpay (#ren,86)  bold
  let #ac_pinnm = #net_pay
  DO Get-Accum
  let #amount_netpay = #amount_erntot - #amount_dedtot
  Print #amount_netpay (#ren,120)  EDIT '$$$,$$$,$$9.99'
  let #ren = #row4 + 5
 
 ! *** CFDI***
 If $FileDir <> '' 
     Let #ren = #row4 -4
     print-image (#ren,8)
     type         = jpeg-file
     image-size   = (30,15)
     source       = $FileDir
 End-If 
 !Metodo Pago
  Print 'Este documento es una representación impresa de un CFDI' (#row5,77) Bold 
  
  Print 'Método de Pago:' (#row6,72)  Bold 
  let #PosCFDI = length(ltrim(rtrim('Método de Pago:', ' '), ' ')) +65
  Print $Payment_Mthd  (, 87) !#PosCFDI) 
   
  !forma pago
  Print 'Forma de Pago:' (#row7,72)  Bold 
  let #PosCFDI = length(ltrim(rtrim('Forma de Pago:', ' '), ' ')) +65
  Print $Payment_Form  (, 86) !#PosCFDI) 
  
  !Serie Emisor
  Print 'Serie del Certificado del Emisor:' (#row8,72)   Bold 
  let #PosCFDI = length(ltrim(rtrim('Serie del Certificado del Emisor:', ' '), ' ')) +60
  Print $Id_Certicicate  (, 100) !#PosCFDI) 
  
  !Folio Fiscal
  Print 'Folio Fiscal:' (#row9,72)  Bold 
  let #PosCFDI = length(ltrim(rtrim('Folio Fiscal:', ' '), ' ')) +63
  Print $Folio_UUID  (, 83) !#PosCFDI) 
  
   !Serie SAT
  Print 'No. De serie del Certificado del SAT:' (#row10,72)  Bold 
  let #PosCFDI = length(ltrim(rtrim('No. De serie del Certificado del SAT:', ' '), ' ')) +60
  Print $Id_Cert_Gov  (, 102) !#PosCFDI) 
  
   !Fecha Hora certificacion
  Print 'Fecha y Hora de certificación:' (#row11,72)  Bold 
  let #PosCFDI = length(ltrim(rtrim('Fecha y Hora de certificación:', ' '), ' ')) +63
  Print $Date_Stamp  (, 98) !#PosCFDI) 
     
 
 Alter-Printer Point-size = #StmtPntSize
  Print 'Sello Digital del CFDI' (#row12,2) center Bold !Stamp Emisor
  Alter-Printer Point-size = 7
  Print $Label_Certificate  (#row13, 9) wrap 124 2
  
 
  Alter-Printer Point-size = #StmtPntSize
  Print 'Sello Digital del SAT' (#row14,2) Center Bold  !Stamp SAT
  Alter-Printer Point-size = 7
  Print $Stamp_Gov  (#row15, 9) wrap 124 2
  
  Alter-Printer Point-size = #StmtPntSize
  Print 'Cadena original del complemento de la certificación digital del SAT'  (#row16,2) center Bold !Source String
  Alter-Printer Point-size = 7
  Print $Original_Chain  (#row17, 9) wrap 124 3
 
  if $GPMX_TER_LOF = '0010'
     new-page
     DO Termination-Letter
     !new-page
  else
    Alter-Printer Point-size = 8 Font-Type = Fixed Font = 4
    let $line1 = rtrim($Name, ' ') ||  ', al recibir la cantidad precisada, me doy por pagado de todas y cada'
    let $line2 = ' una de las prestaciones a que tuve derecho con motivo de la ejecución y terminación de  trabajo que doy por concluida'
    let $line3 = ' con la empresa ' || rtrim($CompanyName, ' ') || '. No me reservo ningún tipo de acción o  derecho'
    let $line4 = ' que ejercitar con posterioridad, otorgando a dicha empresa el finiquito más amplio y eficaz que en  derecho  proceda,  ya'
    let $line5 = ' que siempre me cubrió en su totalidad y oportunamente todas mis prestaciones a que tuve derecho.'

    let $linef = $line1 || $line2 || $line3 || $line4 || $line5
    Print $linef (#row18,8) wrap 125 5
    add 10 to #ren

    Do DTU-Parse-Date($Term_Date,#Ano,#Mes,#Dia)
    let $DiaPr = to_char(#Dia)
    let $AnoPr = to_char(#Ano)
    Do Evaluate-Month
    uppercase $State
    Let $DatePr = $City || ', ' || $State || ' a ' || $DiaPr || ' de ' || $Mes || ' de ' || $AnoPr || '.'

    Print $DatePr                (#row19,8)
    add 6 to #ren
    graphic (#row20,8,50) horz-line 7
    Print $Name                  (+1,8) bold
  end-if

end-procedure Format-Payslip-BO

begin-procedure Get-Accum
begin-select
EEE.RSLT_SEG_NUM
EEE.CALC_RSLT_VAL
    MOVE &EEE.CALC_RSLT_VAL  TO  #amount_acc
FROM PS_GP_RSLT_ACUM_VW EEE
where EEE.PIN_NUM      = #ac_pinnm
and   EEE.EMPLID       = $Emplid
and   EEE.EMPL_RCD     = #Empl_Rcd
and   EEE.CAL_RUN_ID   = $CAL_RUN_ID
and   EEE.CAL_ID       = $Cal_ID
and   EEE.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = EEE.EMPLID
                          AND   EMPL_RCD    = EEE.EMPL_RCD
                          AND   CAL_RUN_ID  = EEE.CAL_RUN_ID
                          AND   GP_PAYGROUP = EEE.GP_PAYGROUP
                          AND   CAL_ID      = EEE.CAL_ID)
end-select
end-procedure Get-Accum


begin-procedure Get-Emplid
#debug show '*Get-Emplid'
#debug show '$End_Dt1: ' $End_Dt1

if rtrim($End_Dt1, ' ') <> '' 
begin-select
A.EMPLID
B.NAME
A.COMPANY       () On-Break Print=Never After=Select-Company-Data Level=1
A.DEPTID
A.LOCATION
A.JOBCODE
A.DAILY_RT
A.GP_PAYGROUP
A.SETID_DEPT
A.SETID_JOBCODE
A.SETID_LOCATION
A.EFFDT
A.EMPL_RCD

    MOVE &A.EMPLID         TO $Emplid
    MOVE &A.EMPL_RCD       TO #Empl_Rcd
    MOVE &A.EFFDT          TO $Job_Effdt
    MOVE &B.NAME           TO $Name
    MOVE &A.COMPANY        TO $Company
    MOVE &A.DEPTID         TO $Deptid
    MOVE &A.LOCATION       TO $Location
    MOVE &A.JOBCODE        TO $JobCode
    MOVE &A.DAILY_RT       TO #Daily_rt
    MOVE &A.GP_PAYGROUP    TO $PayGroup
    MOVE &A.SETID_DEPT     TO $SetID_Dept
    MOVE &A.SETID_JOBCODE  TO $SetID_JobCode
    MOVE &A.SETID_LOCATION TO $SetID_Location
    
    #debug show 'Emplid: ' $Emplid

    ADD 1 TO #reglei

    Do Get-RealDates
    Do Convert-To-DTU-Date($Init_Date1,$Begin_Dt)
    Do Convert-To-DTU-Date($End_Date1,$End_dt)
    Do Select-Company-Data
    Do Rotate-Name
    Do get-date-emplid
    Do Get-Real-CAL_ID
    
    #debug show '#reglei: ' #reglei
    
    if #reglei = 1
      do Get-Format
    end-if
            
    Do CheckEmpl
    
    if #ValTerm = 1
     if $Term_Date <> ''
      !if $GPMX_TER_LOF = '0010'
      !   DO Termination-Letter
      !   new-page
      ! else
         clear-array name = arr_erns
         let #cont_e = 0

         if $EARN_IE = '10'
           DO Get-Erns-Amt10
          else
           DO Get-Erns-Amt20
         end-if
         
         clear-array name = arr_ded
         let #cont_d = 0
         if $DED_IE  = '10'
            DO Get-Ded-Amt10
           else
            DO Get-Ded-Amt20
         end-if
         
         #debug show '#cont_e > #cont_d ' #cont_e ' > ' #cont_d

         if #cont_e > #cont_d
           let #count_t = #cont_e
          else
           let #count_t = #cont_d
         end-if
         if #count_t > 0
            let #frac_rem = mod(#count_t,#limit_detail)
            let #tot-page = trunc(#count_t / #limit_detail,0)
            if #frac_rem > 0
              Add 1 TO #tot-page
            end-if
            do get-payroll-type
            do get-curp-rfc
            let #page_act = 1
            do Get-SDI
            do Get-JobCode-Descr
            do Get-Location-Descr
            do Get-Dept-Descr
            ADD 1 TO #regpro
            do Get-Digital-Data
            do Format-Payslip-HD
            do Format-Payslip-DT
            new-page
          end-if
      end-if
     !end-if
   end-if
from  PS_JOB A, PS_NAMES B
where A.EMPLID   = B.EMPLID
and   A.EFFDT    = (SELECT MAX(EFFDT) FROM PS_JOB
                    WHERE EMPLID = A.EMPLID
                    AND   EMPL_RCD = A.EMPL_RCD
                    AND   EFFDT <= $End_Dt1)
and   A.EFFSEQ   = (SELECT MAX(EFFSEQ) FROM PS_JOB
                    WHERE EMPLID = A.EMPLID
                    AND   EMPL_RCD = A.EMPL_RCD
                    AND   EFFDT = A.EFFDT)
and   B.NAME_TYPE = 'PRI'
and   B.EFFDT     = (SELECT MAX(EFFDT) FROM PS_NAMES
                     WHERE EMPLID = B.EMPLID
                     AND   NAME_TYPE = B.NAME_TYPE
                     AND   EFFDT <= $End_Dt1)
and   A.REG_REGION = 'MEX'     
[$where_cia]
[$where_Pyg]
[$where_emplid]
end-select
end-if
end-procedure   Get-Emplid

begin-procedure Get-Location-Descr
  let $Location_Descr = ''
begin-select
L.DESCR
L.ESTABID
  MOVE &L.DESCR    TO $Location_Descr
  MOVE &L.ESTABID  TO $Estabid

from PS_LOCATION_TBL L
where L.SETID     = $SetID_Location
and   L.LOCATION  = $Location
and   L.EFFDT =  (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL
                   WHERE SETID    = L.SETID
                   and   LOCATION = L.LOCATION
                   and   EFFDT <= $End_Dt1)
and   L.EFF_STATUS = 'A'
end-select
end-procedure Get-Location-Descr


begin-procedure Get-Dept-Descr
  let $Dept_Descr = ''
begin-select
DD.DESCR

  MOVE &DD.DESCR   TO $Dept_Descr

from PS_DEPT_TBL DD
where DD.SETID   = $SetID_Dept
and   DD.DEPTID  = $Deptid
and   DD.EFFDT   =  (SELECT MAX(EFFDT) FROM PS_DEPT_TBL
                   WHERE SETID    = DD.SETID
                   and   DEPTID   = DD.DEPTID
                   and   EFFDT <= $End_Dt1)
and   DD.EFF_STATUS = 'A'
end-select
end-procedure Get-Dept-Descr


begin-procedure Get-JobCode-Descr
  let $JobCode_Descr = ''
begin-select
JC.DESCR
  MOVE &JC.DESCR TO $JobCode_Descr

from PS_JOBCODE_TBL JC
where JC.SETID = $SetID_JobCode
and   JC.JOBCODE = $JobCode
and   JC.EFFDT =  (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
                   WHERE SETID = JC.SETID
                   and   JOBCODE = JC.JOBCODE
                   and   EFFDT <= $End_Dt1)
and   JC.EFF_STATUS = 'A'
end-select
end-procedure Get-JobCode-Descr


begin-procedure get-payroll-type
 let $Payroll_typ = ''
begin-select
PRT.DESCRSHORT
PRT.EFFDT
   MOVE &PRT.DESCRSHORT TO $Payroll_typ
   MOVE &PRT.EFFDT      TO $Payroll_effdt
from PS_FREQUENCY_TBL PRT
where PRT.FREQUENCY_ID = $Frequency_ID
and   PRT.EFFDT = (SELECT MAX(EFFDT) FROM PS_FREQUENCY_TBL
                   WHERE FREQUENCY_ID = PRT.FREQUENCY_ID
                   AND   EFF_STATUS = 'A'
                   AND   EFFDT <= $End_Dt1)
AND   PRT.EFF_STATUS = 'A'
end-select

begin-select
PRL.DESCRSHORT
   MOVE &PRL.DESCRSHORT TO $Payroll_typ
from PS_FREQ_TBL_LANG PRL
where PRL.FREQUENCY_ID = $Frequency_ID
and   PRL.LANGUAGE_CD  = $Curr_language_Cd
and   PRL.EFFDT        = $Payroll_effdt
end-select
  let $Payroll_type = $Frequency_ID || ' ' || $Payroll_typ
end-procedure get-payroll-type

!ICE 738663001****************************************************



begin-procedure Get-Period

! Add Functionality for Off Cycle Process

Let $OffCycle  = ''
Let $Begin_Dt1 = ''
Let $End_Dt1   = ''
Let $Cal_ID    = ''
Let $gv_paygp  = ''

!Check if CAL_RUN_ID is Off Cycle
Begin-Select
OFF_CYCLE  
    
    Let $OffCycle = Rtrim(&OFF_CYCLE, ' ')
    
FROM PS_GP_CAL_RUN 
WHERE CAL_RUN_ID = $CAL_RUN_ID
End-Select

If $OffCycle = 'Y'

Begin-Select DISTINCT
OFFP.PRD_BGN_DT
OFFP.PRD_END_DT
OFFD.CAL_PRD_ID
OFFD.GP_PAYGROUP
OFFCAL.CAL_ID
OFFP.FREQUENCY_ID
OFFCAL.RUN_TYPE

    MOVE &OFFP.PRD_BGN_DT   TO $Begin_Dt1
    MOVE &OFFP.PRD_END_DT   TO $End_Dt1
    
    MOVE &OFFD.CAL_PRD_ID   TO $Cal_PrdID
    MOVE &OFFCAL.CAL_ID     TO $Cal_ID
    MOVE &OFFD.GP_PAYGROUP  TO $gv_paygp

    do Convert-To-DTU-Date($Begin_Dt1,$Begin_Dt)
    do Convert-To-DTU-Date($End_Dt1,$End_Dt)
    do get-payroll-type

FROM PS_GP_CAL_RUN_OFF OFFD,
PS_GP_CAL_PRD OFFP,
PS_GP_PYE_CAL OFFCAL,
PS_GP_RUN_TYPE OFFT
WHERE OFFD.CAL_RUN_ID = $CAL_RUN_ID
AND OFFP.CAL_PRD_ID = OFFD.CAL_PRD_ID
AND OFFCAL.GP_PAYGROUP = OFFD.GP_PAYGROUP
AND OFFCAL.CAL_PRD_ID = OFFD.CAL_PRD_ID
AND OFFCAL.OFF_CYCLE_ID = OFFD.CAL_RUN_ID
AND OFFT.RUN_TYPE       = OFFCAL.RUN_TYPE
AND OFFT.CALC_TYPE      = 'P'
End-Select

Else
!!Get Data from PS_GP_CAL_RUN_DTL
begin-select
CAL.PRD_BGN_DT
CAL.PRD_END_DT
CAL.CAL_ID
CAL.FREQUENCY_ID

    MOVE &CAL.PRD_BGN_DT   TO $Begin_Dt1
    MOVE &CAL.PRD_END_DT   TO $End_Dt1
    MOVE &CAL.CAL_ID       TO $Cal_ID
    MOVE &CAL.FREQUENCY_ID TO $Frequency_ID

    do Convert-To-DTU-Date($Begin_Dt1,$Begin_Dt)
    do Convert-To-DTU-Date($End_Dt1,$End_Dt)
    do get-payroll-type

from PS_GP_CAL_RUN_DTL CAL
where CAL.CAL_RUN_ID = $CAL_RUN_ID
and   CAL.CALC_TYPE  = 'P'   !Payroll Calc
end-select
End-If
end-procedure Get-Period

begin-procedure Get-Erns-Amt10
begin-select
BB.SEQNUM
AA.RSLT_SEG_NUM
AA.PIN_NUM
AA.CALC_RSLT_VAL
AA.CALC_ADJ_VAL
AA.UNIT_RSLT_VAL
AA.UNIT_ADJ_VAL
AA.PIN_NM

    MOVE &AA.PIN_NUM        TO  #pin_num
    MOVE &AA.CALC_RSLT_VAL  TO  #amount_rslt
    MOVE &AA.CALC_ADJ_VAL   TO  #amount_adj
    MOVE &AA.UNIT_RSLT_VAL  TO  #unit_rslt
    MOVE $AA.UNIT_ADJ_VAL   TO  #unit_adj
        
    LET #amount_val = #amount_rslt + #amount_adj
    LET #unit_val = #unit_rslt + #unit_adj
    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
      #debug LET #temp_seg = &AAA.RSLT_SEG_NUM
      #debug LET $temp_pinnm = &AAA.PIN_NM
      LET #RsltSegNum = &AA.RSLT_SEG_NUM 
    end-if

FROM PS_GP_RSLT_ED_VW AA, PS_GPMX_PAYSL_F_ER BB
where BB.GPMX_FORMAT_ID = $GPMX_FORMAT
and   BB.EFFDT          = $FO_EFF_DT
and   BB.EFF_STATUS     = 'A'
and   BB.PIN_ERN_NUM    = AA.PIN_NUM
and   AA.PIN_TYPE       = 'ER'
and   AA.EMPLID         = $Emplid
and   AA.EMPL_RCD       = #Empl_Rcd
and   AA.CAL_RUN_ID     = $CAL_RUN_ID
and   AA.CAL_ID         = $Cal_ID
and   AA.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = AA.EMPLID
                          AND   EMPL_RCD    = AA.EMPL_RCD
                          AND   CAL_RUN_ID  = AA.CAL_RUN_ID
                          AND   GP_PAYGROUP = AA.GP_PAYGROUP
                          AND   CAL_ID      = AA.CAL_ID)
order by BB.SEQNUM
end-select

end-procedure Get-Erns-Amt10


begin-procedure Get-Erns-Amt20
begin-select
AAA.RSLT_SEG_NUM
AAA.PIN_NUM
AAA.CALC_RSLT_VAL
AAA.CALC_ADJ_VAL
AAA.UNIT_RSLT_VAL
AAA.UNIT_ADJ_VAL
AAA.PIN_NM

    MOVE &AAA.PIN_NUM        TO  #pin_num
    MOVE &AAA.CALC_RSLT_VAL  TO  #amount_rslt
    MOVE &AAA.CALC_ADJ_VAL   TO  #amount_adj
    MOVE &AAA.UNIT_RSLT_VAL  TO  #unit_rslt
    MOVE &AAA.UNIT_ADJ_VAL   TO  #unit_adj
    
    LET #amount_val = #amount_rslt + #amount_adj
    LET #unit_val = #unit_rslt + #unit_adj
    
    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
      
      #debug LET #temp_seg = &AAA.RSLT_SEG_NUM
      #debug LET $temp_pinnm = &AAA.PIN_NM
      LET #RsltSegNum = &AAA.RSLT_SEG_NUM 
    end-if

FROM PS_GP_RSLT_ED_VW AAA
where AAA.PIN_TYPE = 'ER'
and   AAA.PIN_NM IN [$TiposSueldos]
and   AAA.PIN_NUM   NOT IN (SELECT BB1.PIN_ERN_NUM FROM PS_GPMX_PAYSL_F_ER BB1
                          where BB1.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   BB1.EFFDT          = $FO_EFF_DT
                          and   BB1.EFF_STATUS     = 'A' )
and   AAA.EMPLID        = $Emplid
and   AAA.EMPL_RCD      = #Empl_Rcd
and   AAA.CAL_RUN_ID    = $CAL_RUN_ID
and   AAA.CAL_ID        = $Cal_ID
and   AAA.RSLT_SEG_NUM  = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                           WHERE EMPLID      = AAA.EMPLID
                           AND   EMPL_RCD    = AAA.EMPL_RCD
                           AND   CAL_RUN_ID  = AAA.CAL_RUN_ID
                           AND   GP_PAYGROUP = AAA.GP_PAYGROUP
                           AND   CAL_ID      = AAA.CAL_ID)
order by AAA.PIN_NM
end-select

begin-select
AAA1.RSLT_SEG_NUM
AAA1.PIN_NUM
AAA1.CALC_RSLT_VAL
AAA1.CALC_ADJ_VAL
AAA1.UNIT_RSLT_VAL
AAA1.UNIT_ADJ_VAL
AAA1.PIN_NM

    MOVE &AAA1.PIN_NUM        TO  #pin_num
    MOVE &AAA1.CALC_RSLT_VAL  TO  #amount_rslt
    MOVE &AAA1.CALC_ADJ_VAL   TO  #amount_adj
    MOVE &AAA1.UNIT_RSLT_VAL  TO  #unit_rslt
    MOVE &AAA1.UNIT_ADJ_VAL   TO  #unit_adj
    
    LET #amount_val = #amount_rslt + #amount_adj
    LET #unit_val = #unit_rslt + #unit_adj
    
    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num #unit_val #amount_val into arr_erns(#cont_e) e_code e_unit e_amount
      #debug LET #temp_seg = &AAA1.RSLT_SEG_NUM
      #debug LET $temp_pinnm = &AAA1.PIN_NM
      LET #RsltSegNum = &AAA1.RSLT_SEG_NUM 
    end-if

FROM PS_GP_RSLT_ED_VW AAA1
where AAA1.PIN_TYPE = 'ER'
and   AAA1.PIN_NM   NOT IN [$TiposSueldos]
and   AAA1.PIN_NUM   NOT IN (SELECT BB11.PIN_ERN_NUM FROM PS_GPMX_PAYSL_F_ER BB11
                          where BB11.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   BB11.EFFDT          = $FO_EFF_DT
                          and   BB11.EFF_STATUS     = 'A' )
and   AAA1.EMPLID        = $Emplid
and   AAA1.EMPL_RCD      = #Empl_Rcd
and   AAA1.CAL_RUN_ID    = $CAL_RUN_ID
and   AAA1.CAL_ID        = $Cal_ID
and   AAA1.RSLT_SEG_NUM  = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                           WHERE EMPLID      = AAA1.EMPLID
                           AND   EMPL_RCD    = AAA1.EMPL_RCD
                           AND   CAL_RUN_ID  = AAA1.CAL_RUN_ID
                           AND   GP_PAYGROUP = AAA1.GP_PAYGROUP
                           AND   CAL_ID      = AAA1.CAL_ID)
order by AAA1.PIN_NM
end-select
end-procedure Get-Erns-Amt20


begin-procedure Get-Ded-Amt10
begin-select
DD.SEQNUM
CC.RSLT_SEG_NUM
CC.PIN_NUM
CC.CALC_RSLT_VAL
CC.CALC_ADJ_VAL
CC.UNIT_RSLT_VAL
CC.UNIT_ADJ_VAL
CC.PIN_NM

    MOVE &CC.PIN_NUM        TO  #pin_num
    MOVE &CC.CALC_RSLT_VAL  TO  #amount_rslt
    MOVE &CC.CALC_ADJ_VAL   TO  #amount_adj
    MOVE &CC.UNIT_RSLT_VAL  TO  #unit_rslt
    MOVE &CC.UNIT_ADJ_VAL   TO  #unit_adj
    
    LET #amount_val = #amount_rslt + #amount_adj
    LET #unit_val = #unit_rslt + #unit_adj
    
    if #amount_val <> 0
      ADD 1 TO #cont_d
      put #pin_num #unit_val #amount_val into arr_ded(#cont_d) d_code d_unit d_amount
       #debug LET #temp_seg = &CC.RSLT_SEG_NUM
       #debug LET $temp_pinnm = &CC.PIN_NM
       LET #RsltSegNum = &CC.RSLT_SEG_NUM 
    end-if

FROM PS_GP_RSLT_ED_VW CC, PS_GPMX_PAYSL_F_DE DD
where DD.GPMX_FORMAT_ID = $GPMX_FORMAT
and   DD.EFFDT          = $FO_EFF_DT
and   DD.EFF_STATUS     = 'A'
and   DD.PIN_DED_NUM    = CC.PIN_NUM
and   CC.PIN_TYPE       = 'DD'
and   CC.EMPLID         = $Emplid
and   CC.EMPL_RCD       = #Empl_Rcd
and   CC.CAL_RUN_ID     = $CAL_RUN_ID
and   CC.CAL_ID         = $Cal_ID
and   CC.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = CC.EMPLID
                          AND   EMPL_RCD    = CC.EMPL_RCD
                          AND   CAL_RUN_ID  = CC.CAL_RUN_ID
                          AND   GP_PAYGROUP = CC.GP_PAYGROUP
                          AND   CAL_ID      = CC.CAL_ID)
order by DD.SEQNUM
end-select
end-procedure Get-Ded-Amt10

begin-procedure Get-Ded-Amt20
begin-select
CCC.RSLT_SEG_NUM
CCC.PIN_NUM
CCC.CALC_RSLT_VAL
CCC.CALC_ADJ_VAL
CCC.UNIT_RSLT_VAL
CCC.UNIT_ADJ_VAL
CCC.PIN_NM

    MOVE &CCC.PIN_NUM        TO  #pin_num
    MOVE &CCC.CALC_RSLT_VAL  TO  #amount_rslt
    MOVE &CCC.CALC_ADJ_VAL   TO  #amount_adj
    MOVE &CCC.UNIT_RSLT_VAL  TO  #unit_rslt
    MOVE &CCC.UNIT_ADJ_VAL   TO  #unit_adj
    
    LET #amount_val = #amount_rslt + #amount_adj
    LET #unit_val = #unit_rslt + #unit_adj
    
    if #amount_val <> 0
      ADD 1 TO #cont_d
      put #pin_num #unit_val #amount_val into arr_ded(#cont_d) d_code d_unit d_amount
       #debug LET #temp_seg = &CCC.RSLT_SEG_NUM
       #debug LET $temp_pinnm = &CCC.PIN_NM
       LET #RsltSegNum = &CCC.RSLT_SEG_NUM 
    end-if

FROM PS_GP_RSLT_ED_VW CCC
where CCC.PIN_TYPE = 'DD'
and   CCC.PIN_NUM   NOT IN (SELECT CC1.PIN_DED_NUM FROM PS_GPMX_PAYSL_F_DE CC1
                          where CC1.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   CC1.EFFDT          = $FO_EFF_DT
                          and   CC1.EFF_STATUS     = 'A' )
and   CCC.EMPLID        = $Emplid
and   CCC.EMPL_RCD      = #Empl_Rcd
and   CCC.CAL_RUN_ID    = $CAL_RUN_ID
and   CCC.CAL_ID        = $Cal_ID
and   CCC.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = CCC.EMPLID
                          AND   EMPL_RCD    = CCC.EMPL_RCD
                          AND   CAL_RUN_ID  = CCC.CAL_RUN_ID
                          AND   GP_PAYGROUP = CCC.GP_PAYGROUP
                          AND   CAL_ID      = CCC.CAL_ID)
order by CCC.PIN_NM
end-select
end-procedure Get-Ded-Amt20

begin-procedure  Get-Pin-Descr
  let $pin_descr = ''
  let $pin_nm = ''
begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  MOVE &PD.PIN_NM TO $pin_nm
  MOVE &PD.DESCR  TO $pin_descr
  MOVE &PD.PIN_CODE TO $pin_code

from PS_GP_PIN PD
WHERE PD.PIN_NUM = #pin_nmp
end-select

begin-select
PDL.DESCR

  MOVE &PDL.DESCR TO $pin_descr

from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #pin_nmp
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure   Get-Pin-Descr


begin-procedure Get-SDI
  let #sdi = 0
begin-select
SDI.GPMX_SDI_FIX
SDI.GPMX_SDI_VAR
SDI.GPMX_SDI_TOT

  let   #sdi = &SDI.GPMX_SDI_TOT

FROM    PS_GPMX_SDI_WA  SDI
WHERE   SDI.EMPLID      =  $Emplid
and     SDI.EMPL_RCD    =  #Empl_Rcd
and     SDI.GP_PAYGROUP =  $PayGroup
AND     SDI.EFFDT = (SELECT MAX(EFFDT) FROM PS_GPMX_SDI_WA
                   WHERE EMPLID  = SDI.EMPLID
                   and CAL_RUN_ID  =  SDI.CAL_RUN_ID
                   and EMPL_RCD    =  SDI.EMPL_RCD
                   and GP_PAYGROUP =  SDI.GP_PAYGROUP
                   and CAL_ID      =  SDI.CAL_ID
                   AND EFFDT    <= $End_Dt1)
AND     SDI.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GPMX_SDI_WA
                          WHERE EMPLID   = SDI.EMPLID
                          and CAL_RUN_ID  =  SDI.CAL_RUN_ID
                          and EMPL_RCD    =  SDI.EMPL_RCD
                          and GP_PAYGROUP =  SDI.GP_PAYGROUP
                          and CAL_ID      =  SDI.CAL_ID
                          AND EFFDT       = SDI.EFFDT)
end-SELECT
end-procedure GET-sdi


begin-procedure get-curp-rfc
begin-select
PB.NATIONAL_ID
   let $Empl_RFC  = rtrim(&PB.NATIONAL_ID,' ')
from PS_PERS_NID PB
WHERE PB.NATIONAL_ID_TYPE = 'RFC'
AND PB.EMPLID = $Emplid
end-select

begin-select
PC.NATIONAL_ID
  let $Empl_CURP = rtrim(&PC.NATIONAL_ID,' ')

FROM PS_PERS_NID PC
WHERE PC.NATIONAL_ID_TYPE = 'CURP'
AND PC.EMPLID = $Emplid
end-select

begin-select
PE.NATIONAL_ID
  let $Empl_IMSS = rtrim(&PE.NATIONAL_ID,' ')

FROM PS_PERS_NID PE
WHERE PE.NATIONAL_ID_TYPE = 'IMSS'
AND PE.EMPLID = $Emplid
end-select

end-procedure get-curp-rfc


begin-procedure get-date-emplid
#debug show '*get-date-emplid'
begin-select
MAX(EFFDT) &Term_date_Job
  
 Let $Term_Date1 = Rtrim(&Term_date_Job, ' ')
  Do Convert-To-DTU-Date($Term_Date1, $Term_Date1)
  Do dtu-add-days($Term_Date1, -1, $Term_Date)
  Do dtu-add-days($Term_Date1, -1, $Term_Date1)
  
    
  Do Convert-From-DTU-Date($Term_Date1,$Term_Date1)
  
  
FROM PS_JOB
WHERE EMPL_STATUS IN ('T','D','Q','R','U')
AND EMPLID = $Emplid
AND EMPL_RCD = #Empl_Rcd
!AND EFFDT >= $Init_Date1
AND LAST_DATE_WORKED >= $Init_Date1
!AND EFFDT <= $End_Date1
AND LAST_DATE_WORKED <= $End_Date1
end-select

#debug show ' $Term_Date1 ' $Term_Date1


begin-select
EM.TERMINATION_DT
EM.SERVICE_DT
  
  let $Service_Date1 = &EM.SERVICE_DT
  do Convert-To-DTU-Date($Service_Date1,$Service_Date)

    #debug LET $debugTMP = rtrim($Term_Date,' ')
    
  if (rtrim($Term_Date,' ') <> '') and ($Term_Date <= $End_Dt)
     do dtu-diff-years( $Term_Date,$Service_Date, #Years_Service)
     do dtu-diff-months($Service_Date, $Term_Date, #Months_Service)

    else
     let $Term_Date = ''
  end-if
  let #Months_T = mod(#Months_Service,12)
  let #Years_T = (#Months_Service - #Months_T)/ 12
FROM PS_PER_ORG_ASGN_VW EM
WHERE EM.EMPLID = $Emplid
end-select

if rtrim($Term_Date, ' ') = ''
   do CheckTerminationDate
end-if

end-procedure get-date-emplid



begin-procedure Get-Real-CAL_ID
begin-select
ST.CAL_RUN_ID
ST.CAL_ID
ST.RSLT_VER_NUM
ST.RSLT_REV_NUM
      
        MOVE &ST.CAL_ID       TO $Metod1_CAL_ID
        MOVE &ST.RSLT_VER_NUM TO #Version
        MOVE &ST.RSLT_REV_NUM TO #Revision
        
FROM PS_GP_PYE_PRC_STAT ST
WHERE EMPLID = $Emplid
AND ST.CAL_RUN_ID = $CAL_RUN_ID
AND ST.PRD_BGN_DT <= $Term_Date1
AND ST.PRD_END_DT >= $Term_Date1
AND ST.CALC_TYPE = 'P'
end-select
    
    LET $Real_CAL_ID = $Metod1_CAL_ID
    
If #Revision >= #Version

begin-select DISTINCT
DL.FWD2_PAYGROUP
DL.FWD2_CAL_ID
    
    MOVE &DL.FWD2_PAYGROUP TO $FWD2_PAYGROUP
    MOVE &DL.FWD2_CAL_ID   TO $FWD2_CAL_ID

    If rtrim($FWD2_PAYGROUP,' ') <> '' AND rtrim($FWD2_CAL_ID,' ') <> '' 
        LET $Metod2_CAL_ID = $FWD2_CAL_ID
    End-If
    
FROM PS_GP_RSLT_DELTA DL
WHERE CAL_RUN_ID = $CAL_RUN_ID
AND DL.CAL_ID = $Metod1_CAL_ID
End-Select

LET $Real_CAL_ID = $Metod2_CAL_ID
End-If

End-Procedure Get-Real-CAL_ID

Begin-Procedure Get-RealDates
begin-select
MIN(PRD_BGN_DT) &PRD_BGN_DT

   MOVE &PRD_BGN_DT TO $Init_Date1

FROM PS_GP_PYE_PRC_STAT
WHERE EMPLID = $Emplid
AND CAL_RUN_ID = $CAL_RUN_ID
end-select

begin-select
MAX(PRD_END_DT) &PRD_END_DT

   MOVE &PRD_END_DT TO $End_Date1

FROM PS_GP_PYE_PRC_STAT
WHERE EMPLID = $Emplid
AND CAL_RUN_ID = $CAL_RUN_ID
end-select
End-Procedure Get-RealDates


begin-procedure Select-Company-Data
  let $AsOfDate = $End_Dt1
  do Get-Company-Data-Mex
  let #longvar = LENGTH($State)
  let #restvar = #longvar
  let $State = SUBSTR($State,1,1) || Lower(SUBSTR($State,2,#longvar))
  let $Company_Address  = $Address1 || ' ' || $Address2
  let $Company_Address2 = $Address3 || ' ' || $Address4  || ' C.P. ' || $Zip
  let $Company_Address3 = $City || ', ' || $State
end-procedure Select-Company-Data


begin-procedure get-code-dayspay
begin-select
DP.PIN_NUM
  MOVE &DP.PIN_NUM TO #pin_units

from PS_GP_PIN DP
WHERE DP.PIN_CODE = $dias_pago
end-select
end-procedure get-code-dayspay

begin-procedure Get-Accum-Unit
  let #amount_acc = 0
begin-select
EEE1.RSLT_SEG_NUM
EEE1.CALC_RSLT_VAL

    MOVE &EEE1.CALC_RSLT_VAL  TO  #amount_acc

FROM PS_GP_RSLT_PIN EEE1
where EEE1.PIN_NUM      = #ac_pinnm
and   EEE1.EMPLID       = $Emplid
and   EEE1.EMPL_RCD     = #Empl_Rcd
and   EEE1.CAL_RUN_ID   = $CAL_RUN_ID
and   EEE1.CAL_ID       = $Cal_ID
and   EEE1.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GP_RSLT_ACUM_VW
                          WHERE EMPLID      = EEE1.EMPLID
                          AND   EMPL_RCD    = EEE1.EMPL_RCD
                          AND   CAL_RUN_ID  = EEE1.CAL_RUN_ID
                          AND   GP_PAYGROUP = EEE1.GP_PAYGROUP
                          AND   CAL_ID      = EEE1.CAL_ID)
end-select

end-procedure Get-Accum-Unit


begin-procedure Get-Parameters

begin-select
RC.CAL_RUN_ID
RC.COMPANY
RC.GP_PAYGROUP
RC.EMPLID
RC.GPMX_FORMAT_ID
RC.GPMX_TER_LOF

  let $CAL_RUN_ID      =   rtrim(&RC.CAL_RUN_ID,' ')
  let $COMPANY         =   rtrim(&RC.COMPANY,' ')
  let $GP_PAYGROUP     =   rtrim(&RC.GP_PAYGROUP,' ')
  let $EMPLID          =   rtrim(&RC.EMPLID,' ')
  let $GPMX_FORMAT     =   rtrim(&RC.GPMX_FORMAT_ID, ' ')
  let $GPMX_TER_LOF    =   rtrim(&RC.GPMX_TER_LOF,' ')


  if $COMPANY <> ''
     LET $Where_Cia = 'AND A.COMPANY = ' || '''' || $COMPANY || ''''
   else
     LET $Where_Cia = ''
  end-if

  if $GP_PAYGROUP <> ''
     LET $Where_Pyg = 'AND A.GP_PAYGROUP = ' || '''' || $GP_PAYGROUP || ''''
    else
     LET $Where_Pyg = ''
  end-if

  if $EMPLID <> ''
     LET $Where_Emplid = 'AND A.EMPLID = ' || '''' || $EMPLID || ''''
    else
     LET $Where_Emplid = ''
  end-if

from PS_GPMX_RC_TERMREP RC
where RC.OPRID = $prcs_oprid
and RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

end-procedure  Get-Parameters

begin-procedure Get-Format
begin-select
FO.GPMX_PIN_PSLP1_NUM
FO.GPMX_PIN_PSLP2_NUM
FO.GPMX_PIN_PSLP3_NUM
FO.GPMX_EARN_IE
FO.GPMX_DED_IE
FO.EFFDT

   MOVE &FO.GPMX_PIN_PSLP1_NUM  TO  #earn_tot
   MOVE &FO.GPMX_PIN_PSLP2_NUM  TO  #ded_tot
   MOVE &FO.GPMX_PIN_PSLP3_NUM  TO  #net_pay
   MOVE &FO.GPMX_EARN_IE        TO  $EARN_IE
   MOVE &FO.GPMX_DED_IE         TO  $DED_IE
   MOVE &FO.EFFDT               TO  $FO_EFF_DT

   let $pin_erntot = 'TOTAL PERCEPCIONES'
   let $pin_dedtot = 'TOTAL DEDUCCIONES'
   let $pin_netpay = 'PAGO NETO' 

FROM PS_GPMX_PAYSL_FORM FO
WHERE FO.GPMX_FORMAT_ID = $GPMX_FORMAT
AND   FO.EFF_STATUS = 'A'
AND   FO.EFFDT = (SELECT MAX(FO1.EFFDT) FROM PS_GPMX_PAYSL_FORM FO1
                  where FO1.GPMX_FORMAT_ID  =  FO.GPMX_FORMAT_ID
                  and   FO1.EFF_STATUS      =  FO.EFF_STATUS
                  and   FO1.EFFDT           <= $End_Dt1)
end-select

#debug show '$FO_EFF_DT: ' $FO_EFF_DT

end-procedure Get-Format


Begin-Procedure Evaluate-Month

Evaluate #Mes
 When = 1
   Let $Mes = 'Enero'
 Break
 When = 02
    Let $Mes = 'Febrero'
 Break
 When = 03
    Let $Mes = 'Marzo'
 Break
 When = 04
    Let $Mes = 'Abril'
 Break
 When = 05
    Let $Mes = 'Mayo'
 Break
 When = 06
     Let $Mes = 'Junio'
 Break
 When = 07
     Let $Mes = 'Julio'
 Break
 When = 08
     Let $Mes = 'Agosto'
 Break
 When = 09
     Let $Mes = 'Septiembre'
 Break
 When = 10
     Let $Mes = 'Octubre'
 Break
 When = 11
     Let $Mes = 'Noviembre'
 Break
 When = 12
     Let $Mes = 'Diciembre'
 Break
End-evaluate
End-Procedure


begin-procedure Def-Arrays
CREATE-ARRAY NAME = arr_erns SIZE = 100
     FIELD = e_code:number
     FIELD = e_amount:number
     FIELD = e_unit:number

CREATE-ARRAY NAME = arr_ded SIZE = 100
     FIELD = d_code:number
     FIELD = d_amount:number
     FIELD = d_unit:number
end-procedure Def-Arrays

begin-procedure GetPinNumbers

  Let $dias_pago = ''
  Let $Sueldo = ''
  Let $SueldoRetro = ''
  Let $SueldoXHora = ''
  Let $Terminacion = ''
  Let $TiposSueldos = ''
  
 Do GetPinCode('GPMX_RC_TERMREP','TERMINACION',$Terminacion)
 Do GetPinCode('GPMX_RC_TERMREP','DIAS PAGO',$dias_pago)
 Do GetPinCode('GP_PIN','PIN_USER_FLD1_NUM',$pinCode)

 Do GetPinName('GPMX_RC_TERMREP','SUELDO',$Sueldo)
 Do GetPinName('GPMX_RC_TERMREP','SUELDO RETRO',$SueldoRetro)
 Do GetPinName('GPMX_RC_TERMREP','SUELDO X HORA',$SueldoXHora)
 Let $TiposSueldos = '(''' || $Sueldo ||''','''|| $SueldoRetro ||''','''|| $SueldoXHora || ''')'
 
 
end-procedure GetPinNumbers

begin-procedure CheckEmpl
#debug show '*CheckEmpl'
#debug show '$Terminacion ' $Terminacion
#debug show '$Emplid ' $Emplid
#debug show '$CalRunID ' $CalRunID


begin-select
CALC_RSLT_VAL

  LET #ValTerm = &CALC_RSLT_VAL
  
FROM PS_GP_RSLT_PIN
WHERE EMPLID    = $Emplid
AND EMPL_RCD    = #Empl_Rcd
AND CAL_RUN_ID  = $CAL_RUN_ID
AND CAL_ID      = $Cal_ID
AND GP_PAYGROUP = $PayGroup
AND PIN_NUM = (
               SELECT 
               PIN_NUM 
               FROM PS_GP_PIN 
               WHERE PIN_CODE = $Terminacion
               )
end-select

#debug show '#ValTerm ' #ValTerm

end-procedure

begin-procedure CheckTerminationDate

begin-select
PO.SOVR_VAL_DT 

  Let $term_date = rtrim(&PO.SOVR_VAL_DT, ' ')
  Let $Term_Date1 = $Term_Date
                          
FROM PS_GP_PYE_SOVR PO
WHERE PO.EMPLID  = $Emplid
AND PO.EMPL_RCD = #Empl_Rcd
AND PO.PIN_NUM = (SELECT PO2.PIN_NUM 
                  FROM PS_GP_PIN PO2
                  WHERE PO2.PIN_CODE = $PinCode)
AND PO.BGN_DT  = (SELECT MAX(PO3.BGN_DT) 
                  FROM PS_GP_PYE_SOVR PO3
                  WHERE PO3.EMPLID   = PO.EMPLID
                  AND PO3.EMPL_RCD = PO.EMPL_RCD
                  AND PO3.PIN_NUM  = PO.PIN_NUM
                  AND PO3.BGN_DT  <= $AsOfToday)
end-select                                                      
end-procedure CheckTerminationDate

!***********************************************************************
! Digital information                                                  *
! Procedure : Get-Digital_Data                                         *
! Get Digital Certificate number and string value                      *
!***********************************************************************
begin-procedure Get-Digital-Data

    Let $Label_Certificate = ' '
    Let $Id_Certicicate    = ' '
    Let $Date_Stamp        = ''
    Let $Folio_UUID        = ''
    Let $Id_Cert_Gov       = ''
    Let $Stamp_Gov         = ''
    Let $Version           = '' 
    Let $Original_Chain    = ''
    let $FileDir           = ''
      
    Let #pos  = instr($sqr-program,'gpmxlf01',0)
    Let #pos  = #pos - 1
    Let $path = substr($sqr-program,1,#pos)
 
Begin-Select 
GPMX_STAMP
GPMX_ID_CERT 
GPMX_DATE_STAMP  
GPMX_FISCAL_FOLIO
GPMX_ID_CERT_GOV 
GPMX_STAMP_GOV   
GPMX_VERSION
METHODNAME
FORMID
FILE_NAME     


    Let $Label_Certificate = LTRIM(RTRIM(&GPMX_STAMP  , ' '), ' ')
    Let $Id_Certicicate    = LTRIM(RTRIM(&GPMX_ID_CERT, ' '), ' ') 
                         
    Let $Date_Stamp   = LTRIM(RTRIM(&GPMX_DATE_STAMP  , ' '), ' ')
    Let $Folio_UUID   = LTRIM(RTRIM(&GPMX_FISCAL_FOLIO, ' '), ' ')
    Let $Id_Cert_Gov  = LTRIM(RTRIM(&GPMX_ID_CERT_GOV , ' '), ' ')
    Let $Stamp_Gov    = LTRIM(RTRIM(&GPMX_STAMP_GOV   , ' '), ' ')
    Let $Version      = LTRIM(RTRIM(&GPMX_VERSION     , ' '), ' ')
    Let $Payment_Mthd = LTRIM(RTRIM(&METHODNAME       , ' '), ' ')
    Let $Payment_Form = LTRIM(RTRIM(&FORMID           , ' '), ' ')
    Let $FileDir      = LTRIM(RTRIM(&FILE_NAME        , ' '), ' ')
    Let $Original_Chain = '||'  
    
    If $Version <> ''
      Let $Original_Chain = $Original_Chain || $Version 
    End-If
    
    If $Folio_UUID <> ''
      Let $Original_Chain = $Original_Chain || '|' || $Folio_UUID 
    End-If
    
    If $Date_Stamp <> ''
       Let $Original_Chain = $Original_Chain || '|' || $Date_Stamp
    End-If
    
    If $Label_Certificate <> ''
       Let $Original_Chain = $Original_Chain || '|' || $Label_Certificate
    End-If
    
    If $Id_Cert_Gov <> ''
       Let $Original_Chain = $Original_Chain || '|' || $Id_Cert_Gov
    End-If
    
    If Length($Original_Chain) > 2
       Let $Original_Chain = $Original_Chain || '||'
    Else
       Let $Original_Chain = ''
    End-If   
                        
                             
From PS_GPMX_DIG_TBL CER
Where CER.EMPLID      = $Emplid
  And CER.CAL_RUN_ID  = $CAL_RUN_ID
  And CER.CAL_ID      = $Cal_ID
  And CER.GP_PAYGROUP = $PayGroup
  AND CER.RSLT_SEG_NUM = #RsltSegNum
End-Select


If $Label_Certificate = ' ' Or $Id_Certicicate = ' ' 

  let #MessageSetNbr = 17245
  let #MessageNbr    = 10
  do Read-MsgCatalog-Table
  
  Show $DescrLong  $Emplid

End-If

End-Procedure

!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date
#include 'rotname1.sqc'  !Convert $Name from "Last,First,Prefix" to "First Prefix Last"
#include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
#include 'gpmxpinm.sqc'  !Get pin number from PS_GPMX_ELEM_MAP_D "Map Elems to Comp/Rcd MEX"
#include 'readmsgc.sqc'  !Read the Message Catalog Table 
!***********************************************************************
