!***********************************************************************
! GPCHST02.SQR  :Salary Structure Analysis(Niveau & Struktur der Löhne)*
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:27:05                                 !
!       $Release:  HR92                                                !
!      $Revision:  106                                                 !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#define PAPER_SIZE   LETTER
#include 'setup32.sqc'

!**********************************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  If $GPCH_EG_YEP_FLG <> 'Y'
  do Get-Output-Directory('GPCHST02',$Output_Directory,$prcs_no)
  End-If
 If $GPCH_EG_YEP_FLG = 'Y'
    If $Run_Option = 'Y'
     do Init_Statustbl
     do Process-Main
     do Delete-Temp-Records

     do Stdapi-Term
     do Get-Log
     Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,$SysDateTime,$Cancel_option)
    Else
     If $Cancel_Option = 'Y'
        do Cancle_YEA($ptot_requestid,$Ctl_Year,$comp,$providertype,#ptot_domainid)
       Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option)
     End-If
     !Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option)
     do Stdapi-Term
     do Get-Log
    End-If
 Else
  do Process-Main
  do Delete-Temp-Records
  do Stdapi-Term
  do Get-Log
end-if
end-PROGRAM
!**********************************************************************************************
begin-procedure Init-Report

  do Stdapi-Init
  move 'GPCHST02' to $ReportID
  let $providertype='9'
  if $prcs_process_instance = ''
    do ask-input
  else
     do Get-Report-Parameters
  end-if
If $GPCH_EG_YEP_FLG = 'Y'
     let $Provider_crit=' '
   do Get-PTotals-Data($Provider_crit,$providertype,#Domainid,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey)

   do Check_Run_Report(#ptot_domainid,$Ctl_Year,$comp,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)

  End-If
  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation('GPCHGLOB')

  do Gpce_Init_Report_Translation($ReportID, $language_cd)
  do Gpce_Append_Report_Translation('GPCHGLOB', $language_cd)

  do Report-Translation

  if rtrim($Ctl_Curr_Pay_End_Dt,' ') <> ''
      do ConvertToComponents($Ctl_Curr_Pay_End_Dt,$yys,$mms,$dds)
      let $Jahr = $yys
  end-if

  if $Ctl_comp <> ''
let $Comp_Crit_st02       = ' AND PBD.COMPANY = ' ||'''' ||$Ctl_comp||''''
 else
    let $Comp_Crit_st02=''
 end-if

If $GPCH_EG_YEP_FLG = 'Y'
!FMB 20101229 
#debug show ' build $Ctl_Curr_Pay_End_Dt $ptot_year = ' $ptot_year
      Let $Ctl_Curr_Pay_End_Dt = $Ctl_Year || '1231'
      do Format-DateTime($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt, {DEFCMP},'','native')
  End-IF
      do Get-LegalEntity-Flag
     do Bracket-COmpany-Data
  If $GPCH_EG_YEP_FLG = 'Y'
   Let $Ctl_PayEntity = $comp

   !do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt)
   !  do Format-DateTime( $Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt, {DEFYMD},'','')
    !LET  $Ctl_Curr_Pay_End_Dt=replace( $Ctl_Curr_Pay_End_Dt,'.','-')

 End-If
  if $GPCH_EG_YEP_FLG = 'Y'

     let $payentitycondition  = ' PBD.COMPANY  = ''' || $Ctl_PayEntity || ''' '
  else

  let $payentitycondition  = ' PBD.PAY_ENTITY  = ''' || &GPCH_RUN_CNTL.PAY_ENTITY || ''' '
  end-if


 !  if $GPCH_EG_YEP_FLG = 'Y'

  !    let $payentitycondition1  = ' PRD_END_DT  <= ''' || $Ctl_Curr_Pay_End_Dt || ''' '
  !else

  let $payentitycondition1  = ' PRD_END_DT  = ''' || $Ctl_Curr_Pay_End_Dt || ''' '
  !end-if

end-procedure
!**********************************************************************************************
! FMB 20060416 removed begin-procedure Count-Employees

!**********************************************************************************************
begin-procedure Process-Main

let $ExtedDat = 'N'
let #Counter_tmp = 0
let #Counter_tmp_Interf = 0
let #SeitenNummer = 0
let $Empl = ''
let $Empl_Old = ''

let #CountMeth1 = 0
let #CountMeth2 = 0

if rtrim($Ctl_Count_Meth,' ') <> ''
   move $Ctl_Count_Meth to #Ctl_Count_Meth
else
   move '1' to #Ctl_Count_Meth
end-if
If $GPCH_EG_YEP_FLG = 'Y'
   Let $Ctl_PayEntity = $comp

   !do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt)

 End-If
do CalculateMissingData

let $Ctl_Addr_Effdt = $Ctl_Curr_Pay_End_Dt
do Get-PayEnt-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,
                      $ADDLINE4,$ADDLINE5,$ADDLINE6,$PAYENTITY_DESCR,$PAYENTITY_DESCRSHORT,$CITY,
                      $STATE,$POSTAL)

!do Open_File  FMB 20060416 removed probably used for stand-alone XML file generation
! do Count-Employees
!do Write_Heading  FMB 20060416 removed

begin-select !shilpa Ice 1875845000
COUNT (*) &EmplCount
FROM PS_GPCHST021_TMP
end-select
let #No_of_employees = &EmplCount


begin-select
PBD.EMPLID
PDE.EMPLID
PBD.EMPL_RCD
PBD.SLICE_BGN_DT
PBD.SLICE_END_DT
PBD.HIRE_DT
PBD.TERMINATION_DT
PBD.BIRTHDATE
PBD.SEX
PBD.MAR_STATUS
PBD.EMPL_CTG
PBD.GRADE
PBD.JOBCODE
PBD.EMPL_CLASS
PBD.VISA_PERMIT_TYPE
PBD.GPCH_RP_LSEYOS
PBD.GPCH_RP_LSELOCZIP
PDE.HIGHEST_EDUC_LVL
PBD.GPCH_RP_AMOUNT1
PBD.GPCH_RP_AMOUNT2
PBD.GPCH_RP_AMOUNT3
PBD.GPCH_RP_AMOUNT4
PBD.GPCH_RP_AMOUNT5
PBD.GPCH_RP_AMOUNT9
PBD.GPCH_RP_AMOUNT10
PBD.GPCH_RP_AMOUNT11
PBD.GPCH_RP_AMOUNT12
PBD.GPCH_RP_AMOUNT13
PBD.GPCH_RP_AMOUNT14
PBD.CONTRACT_TYPE
PBD.ACTION
PBD.COMPANY !syed for 89 b15
PBD.SETID_JOBCODE !FMB 20100308 Attribute and October
PBD.LOCATION
PBD.GPCH_RP_LSEST
PBD.GPCH_RP_LSEHRS
PBD.GPCH_RP_LSEGROSS
PBD.GPCH_RP_LSESI
PBD.FTE

    let #CountMeth1 = #CountMeth1 + 1

    if (#CountMeth1 > 1)
       if (mod(#CountMeth1 - 1, #Ctl_Count_Meth) <> 0)
           if ($ExclusionFound = 'N')
                     goto weiter
           end-if
       end-if
    end-if

  !FMB  if rtrim(&PBD.ACTION,' ') = 'TER'
      ! goto weiter
     !end-if

    let $EmplId_tmp       = &PBD.EMPLID
    let #EmplRcd_tmp      = &PBD.EMPL_RCD
    let $BeginDt_tmp      = rtrim(&PBD.SLICE_BGN_DT, ' ')
    let $EndDt_tmp        = rtrim(&PBD.SLICE_END_DT, ' ')
    let $HireDt_tmp       = rtrim(&PBD.HIRE_DT, ' ')
    let $TermDt_tmp       = rtrim(&PBD.TERMINATION_DT, ' ')



    let $BirthDT_tmp      = rtrim(&PBD.BIRTHDATE,' ')
    let $Sex_tmp          = rtrim(&PBD.SEX,' ')
    let $MarStat_tmp      = rtrim(&PBD.MAR_STATUS,' ')
    let #LseYos_tmp       = &PBD.GPCH_RP_LSEYOS
    let #LocZip_tmp       = &PBD.GPCH_RP_LSELOCZIP
    let $HighEdLvl_tmp    = rtrim(&PDE.HIGHEST_EDUC_LVL,' ')


    let $ContrType_tmp    = rtrim(&PBD.CONTRACT_TYPE, ' ')
 show ' $EmplId_tmp = ' $EmplId_tmp ' $ContrType_tmp = ' $ContrType_tmp
    let $Permit           = rtrim(&PBD.VISA_PERMIT_TYPE, ' ')
    let $EmplCtg          = rtrim(&PBD.EMPL_CTG, ' ')
    let $Grade_tmp        = rtrim(&PBD.GRADE, ' ')
    let $JobCode_tmp      = rtrim(&PBD.JOBCODE, ' ')
    let $EmplClass_tmp    = rtrim(&PBD.EMPL_CLASS, ' ')

    let #LseSTD_tmp       = &PBD.GPCH_RP_AMOUNT1
    let #LseLEK_tmp       = &PBD.GPCH_RP_AMOUNT2
    let #LseBS_tmp        = &PBD.GPCH_RP_AMOUNT3
    let #LseSA_tmp        = &PBD.GPCH_RP_AMOUNT4
    let #LseZU_tmp        = &PBD.GPCH_RP_AMOUNT5
    let #LseUS_tmp        = &PBD.GPCH_RP_AMOUNT9
    let #LseZML_tmp       = &PBD.GPCH_RP_AMOUNT10
    let #LseSO_tmp        = &PBD.GPCH_RP_AMOUNT11
    let #LseDL_tmp        = &PBD.GPCH_RP_AMOUNT12
    let #LseAK_tmp        = &PBD.GPCH_RP_AMOUNT13
    let #LseZL_tmp        = &PBD.GPCH_RP_AMOUNT14
    let $Comp_br          = rtrim(&PBD.COMPANY, ' ')
! FMB 20100308
    let $SETID_JOBCODE    = &PBD.SETID_JOBCODE
    let $LOCATION         = &PBD.LOCATION
    let #OctFTE_tmp       = &PBD.FTE 
! show ' #OctFTE ' = #OctFTE 
    let #OctSTD_tmp       = &PBD.GPCH_RP_LSEST
    let #OctLEK_tmp       = &PBD.GPCH_RP_LSEHRS
    let #OctBS_tmp        = &PBD.GPCH_RP_LSEGROSS
    let #OctSA_tmp        = &PBD.GPCH_RP_LSESI

    do PrintData

    weiter:

from PS_GPCHST021_TMP PBD, {Record_PersDataEffDt} PDE
where PBD.EMPLID           = PDE.EMPLID
and   PBD.PROCESS_INSTANCE = #prcs_process_instance
and  [$Company_Criteria_BR1] !PBD.PAY_ENTITY       = $Ctl_PayEntity
{Where_PersDataEffDt}
order by PBD.EMPLID,PBD.EMPL_RCD, PBD.HIRE_DT
end-SELECT
! FMB 20060416   do ... last row

 If $EmplId_old  <> '' and $ExclusionFound <> 'Y' 

    Let $StatisticSalaries = '<StatisticSalaries>' || $StatisticSal_old || '</StatisticSalaries>'
  
    do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do Convert-To-DTU-Date($TermDt_tmp, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do dtu-format-date(#Year, 1, 1, $YearStart)
    do dtu-format-date(#Year, 12, 31, $YearEnd)
    do Convert-From-DTU-Date($YearStart, $YearStart)
    do Convert-From-DTU-Date($YearEnd, $YearEnd)

    do format-number(#Year,$Year,'9999')

    If $GPCH_EG_YEP_FLG <> 'Y'
     let #ptot_domainid = 1
     let $ptot_year = $Year
     let $ptot_company = $Ctl_PayEntity
     let $ptot_provtype = '9'
     let $ptot_providercd = '#OFS'
    End-If

    Do Insert_Employee_XML

 End-If

if $ExtedDat = 'Y'
   close 10
   close 20
else
   let #success = delete($FileNm1)
   let #success = delete($FileNm2)
end-if
end-procedure
!**********************************************************************************************
begin-procedure PrintData
alter-printer
font = 3
pitch = 10
point-size = 11
let #flag = 0 !shilpa Ice 1875845000

do Get-Education-Lvl
do Get-Position
do Get-Function
do Get-Activity
! FMB 20070416 / Re-introduced 20100308 do Get-Contract-Type
do Get-Contract-Type
do Get-Wage-Form
if $EmplClass_tmp <> 'S' and rtrim($EmplClass_tmp,' ') <> ''
  let #LseWt_tmp = 0
end-if


#DEBUG SHOW '$HighEdTmp= ' $HighEdTmp ' $PositionTmp=  ' $PositionTmp ' $GradeTmp= ' $GradeTmp ' $JobCodeTmp= ' $JobCodeTmp ' $ContrTypeTmp= ' $ContrTypeTmp ' $EmplClassTmp= ' $EmplClassTmp ' $NationCat_tmp= ' $NationCat_tmp

if $HighEdTmp = '99' or $PositionTmp = '99' or
   $GradeTmp = '99' or $JobCodeTmp = '99' or
   $ContrTypeTmp = '99' or $EmplClassTmp = '99' or
   $NationCat_tmp = '99'
   let $ExclusionFound = 'Y'
   goto NoPrintDat
else
   let $ExclusionFound = 'N'
end-if

SecondLastEmployee: !shilpa Ice 1875845000
let #Counter_tmp = #Counter_tmp + 1
let #Counter_tmp_Interf = #Counter_tmp_Interf + 1

do format-number(#Counter_tmp,$Counter_tmp,'09')
do format-number(#Counter_tmp_Interf,$Counter_tmp_Interf,'099999')
do ConvertToComponents($BirthDT_tmp,$BYr,$Bmt,$Bdy)
do format-number(#LseYos_tmp,$LseYos_tmp,'09')
do format-number(#LocZip_tmp,$LocZip_tmp,'0999')


!----------------------------------------!

if $BYr = ''
   let $BYr = '    '
end-if

evaluate $Sex_tmp
  when = 'M'
    let $SexEqu = '1'
    break
  when = 'F'
    let $SexEqu = '2'
    break
  when-other
    let $SexEqu = ' '
    break
end-evaluate

evaluate $MarStat_tmp
  when = 'S'
    let $MarStatEqu = '1'
    break
  when = 'M'
    let $MarStatEqu = '2'
    break
  when-other
    let $MarStatEqu = '3'
    break
end-evaluate



! FMB 200704116 If $GPCH_EG_YEP_FLG = 'Y'

 Do Create_Employee_XML



let $ExtedDat = 'Y'

NoPrintDat:
!FMB 20100910 if #No_of_employees = #CountMeth1 and #flag = 0 !shilpa Ice 1875845000
!FMB 20100910  let #flag = 1
!FMB 20100910  goto SecondLastEmployee
!FMB 20100910 end-if

end-procedure
!**********************************************************************************************
Begin-Procedure Create_Employee_XML
#debug show '-> Create_Employee_XML'


 do format-number(#LseSTD_tmp,$LseSTD_tmp,'9999.99')
 do format-number(#LseLEK_tmp,$LseLEK_tmp,'9999')
 do format-number(#LseBS_tmp,$LseBS_tmp,'9999999.99')
 let #LseSA_tmp = #LseSA_tmp * -1
 do format-number(#LseSA_tmp,$LseSA_tmp,'9999999.99')
 do format-number(#LseZU_tmp,$LseZU_tmp,'9999999.99')
 do format-number(#LseUS_tmp,$LseUS_tmp,'9999999.99')
 do format-number(#LseZML_tmp,$LseZML_tmp,'9999999.99')
 do format-number(#LseSO_tmp,$LseSO_tmp,'9999999.99')
 do format-number(#LseDL_tmp,$LseDL_tmp,'9999999.99')
 do format-number(#LseAK_tmp,$LseAK_tmp,'9999999.99')
 do format-number(#LseZL_tmp,$LseZL_tmp,'9999999.99')

!FMB 20100301
 let #OctFTE_tmp = #OctFTE_tmp * 100
 do format-number(#OctFTE_tmp,$OctFTE_tmp,'999')
 do format-number(#OctSTD_tmp,$OctSTD_tmp,'9999999.99')
 do format-number(#OctLEK_tmp,$OctLEK_tmp,'9999')
 do format-number(#OctBS_tmp,$OctBS_tmp,'9999999.99')
 let #OctSA_tmp = #OctSA_tmp * -1
 do format-number(#OctSA_tmp,$OctSA_tmp,'9999999.99')

 Evaluate $HighEdLvl_tmp_Equ

 When = '1'
   Let $HighEdLvl_tmp_Equ = 'university'
   Break
 When = '2'
   Let $HighEdLvl_tmp_Equ = 'higherEducation'
   Break

 When = '3'
   Let $HighEdLvl_tmp_Equ = 'higherVocEducation'
   Break

 When = '4'
   Let $HighEdLvl_tmp_Equ = 'teacherCertificate'
   Break

 When = '5'
    Let $HighEdLvl_tmp_Equ = 'universityEntranceCertificate'
    Break

 When = '6'
    Let $HighEdLvl_tmp_Equ = 'vocEducationCompl'
    Break

 When = '7'
    Let $HighEdLvl_tmp_Equ = 'enterpriseEducation'
    Break

 When = '8'
    Let $HighEdLvl_tmp_Equ = 'mandatorySchoolOnly'
    Break

 When = '9'
    Let $HighEdLvl_tmp_Equ = 'other'
    Break

 When-Other
    Let $HighEdLvl_tmp_Equ = 'other'
    Break

 End-Evaluate

 Evaluate $Grade_tmp_Equ

 When = '1'
   Let $Grade_tmp_Equ = 'highestCadre'
   Break

 When = '2'
   Let $Grade_tmp_Equ = 'middleCadre'
   Break

 When = '3'
   Let $Grade_tmp_Equ = 'lowerCadre'
   Break

 When = '4'
   Let $Grade_tmp_Equ = 'lowestCadre'
   break

 When = '5'
   Let $Grade_tmp_Equ = 'noCadre'
   Break

 When-Other
   Let $Grade_tmp_Equ = 'noCadre'
   Break

 End-Evaluate

 Evaluate $Position_Equ

 When = '1'
  Let $Position_Equ = 'mostDemanding'
  Break

 When = '2'
  Let $Position_Equ = 'qualified'
  Break

 When = '3'
  Let $Position_Equ = 'specialized'
  Break

 When = '4'
  Let $Position_Equ = 'simple'
  Break
 When-Other
    Let $Position_Equ = 'simple'
    Break

 End-Evaluate

 Evaluate $ContrType_tmp_Equ

  When = '1'
    Let $ContrType_tmp_Equ = 'collectivePayAgreementAssociation'
    Break

  When = '2'
    Let $ContrType_tmp_Equ = 'collectivePayAgreementEnterprise'
    Break

  When = '3'
    Let $ContrType_tmp_Equ = 'agreementUnderPublicLaw'
    Break

  When = '4'
    Let $ContrType_tmp_Equ = 'individualContract'
    Break

! FMB 20100308 Re-Introduced for individual Contract_Type 

  When = '41'
    Let $ContrType_tmp_Equ = 'indefiniteSalaryMth'
    Break

  When = '42'
    Let $ContrType_tmp_Equ = 'indefiniteSalaryMthAWT'
    Break

  When = '43'
    Let $ContrType_tmp_Equ = 'indefiniteSalaryHrs'
    Break

  When = '44'
    Let $ContrType_tmp_Equ = 'fixedSalaryMth'
    Break

  When = '45'
    Let $ContrType_tmp_Equ = 'fixedSalaryHrs'
    Break

  When = '46'
    Let $ContrType_tmp_Equ = 'apprentice'
    Break
  
  When-Other
    Let $ContrType_tmp_Equ = ''
    Break

 End-Evaluate



 Evaluate $NationCat_tmp

 When = '1'
  Let $NationCat_tmp = ''
  Break
 When = '2'
  Let $NationCat_tmp = 'shortTerm'
  Break
 When = '3'
  Let $NationCat_tmp = 'annual'
  Break
 When = '4'
  Let $NationCat_tmp = 'settled'
  Break
 When = '5'
  Let $NationCat_tmp = 'crossBorder'
  Break
 When = '6'
  Let $NationCat_tmp = 'OthersNotSwiss'
  Break
  When-Other
     Let $NationCat_tmp = 'othersNotSwiss'
     Break

 End-Evaluate

 Evaluate $EmplClass_tmp_Equ

 When = '1'
    Let $EmplClass_tmp_Equ  = 'timeWages'
    Break
 When = '2'
    Let $EmplClass_tmp_Equ = 'premiumWage'
    Break
 When = '3'
    Let $EmplClass_tmp_Equ = 'wagesCommission'
    Break
 When = '4'
    Let $EmplClass_tmp_Equ = 'pieceWorkWage'
    Break
 When-Other
    Let $EmplClass_tmp_Equ  = 'timeWages'
    Break

 End-Evaluate

 If $TermDt_tmp = ''

    do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do dtu-format-date(#Year, 1, 1, $YearStart)
    do dtu-format-date(#Year, 12, 31, $YearEnd)
    do Convert-From-DTU-Date($YearStart, $YearStart)
    do Convert-From-DTU-Date($YearEnd, $YearEnd)

  let $TermDt_tmp = $YearEnd
 End-If

    do Convert-To-DTU-Date($TermDt_tmp, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do dtu-format-date(#Year, 1, 1, $YearStart)
    do dtu-format-date(#Year, 12, 31, $YearEnd)
    do Convert-From-DTU-Date($YearStart, $YearStart)
    do Convert-From-DTU-Date($YearEnd, $YearEnd)

 ! FMB 20071111
 ! If $HireDt_tmp <= $YearStart
  !   let $HireDt_tmp = $YearStart
  ! End-If


  do ConvertToComponents($HireDt_tmp,$HYr,$Hmt,$Hdy)
  do ConvertToComponents($TermDt_tmp,$TYr,$Tmt,$Tdy)

    do ConvertToComponents($YearEnd,$Year,$Month,$Day)

   If $HYr  < $Year
    Let $From_Date = $Year || '-' || '01-01'
  else
    Let $From_Date = $HYr || '-' || $Hmt || '-' ||$Hdy
  end-if

    Let $To_Date = $TYr || '-' || $Tmt || '-' ||$Tdy


 Let $Period = '<Period>' || '<from>' ||$From_Date||'</from>' || '<until>' ||$To_Date|| '</until>'|| '</Period>'
   Let $TotalHoursOfWork = ''
 Let $TotalLessonsOfWork = ''
 Let $GrossEarnings = ''
 Let $SocialContributions = ''
 Let $Allowances = ''
 Let $Overtime = ''
 Let $Earnings13th = ''
 Let $SpecialPayments = ''
 Let $PaymentsByThird = ''
 Let $LaborCost = ''
 Let $ExtendedBenefits = ''

!FMB 20100308 October TAG
 Let $OctActivityRate = ''
 Let $OctHoursOfWork = ''
 Let $OctLessonsOfWork = ''
 Let $OctEarnings = ''
 Let $OctContributions = ''

  if #OctFTE_tmp <> 0.00
   Let $OctActivityRate = '<ActivityRate >' || RTRIM(LTRIM($OctFTE_tmp ,' '),' ') || '</ActivityRate >'
   End-if
  If #OctSTD_tmp        <> 0.00
  Let $OctHoursOfWork = '<TotalHoursOfWork>' || RTRIM(LTRIM($OctSTD_tmp,' '),' ') || '</TotalHoursOfWork>'
  Else
  Let $OctHoursOfWork = ''
  End-If
  If #OctLEK_tmp <> 0.00
  Let $OctLessonsOfWork = '<TotalLessonsOfWork>' || RTRIM(LTRIM($OctLEK_tmp,' '),' ') || '</TotalLessonsOfWork>'
  Else
  Let $OctLessonsOfWork = ''
  End-If
  if #OctBS_tmp <> 0.00
  Let $OctEarnings = '<GrossEarnings>' || RTRIM(LTRIM($OctBS_tmp,' '),' ') || '</GrossEarnings>'
  End-if
  if #OctSA_tmp <> 0.00
  Let $OctContributions = '<SocialContributions>' || RTRIM(LTRIM($OctSA_tmp,' '),' ') || '</SocialContributions>'
  End-if
  Let $October = '<October>' || $OctActivityRate || $OctHoursOfWork ||$OctLessonsOfWork || $OctEarnings || $OctContributions || '</October>'
!FMB 20100308 End October TAG

 If #LseSTD_tmp <> 0.00
 Let $TotalHoursOfWork = '<TotalHoursOfWork>' || RTRIM(LTRIM($LseSTD_tmp,' '),' ') || '</TotalHoursOfWork>'
 Else
 Let $TotalHoursOfWork = ''
 End-If

 If #LseLEK_tmp <> 0.00
 Let $TotalLessonsOfWork = '<TotalLessonsOfWork>' || RTRIM(LTRIM($LseLEK_tmp,' '),' ') || '</TotalLessonsOfWork>'
 Else
 Let $TotalLessonsOfWork = ''
 End-If
  if #LseBS_tmp <> 0.00
 Let $GrossEarnings = '<GrossEarnings>' || RTRIM(LTRIM($LseBS_tmp,' '),' ') || '</GrossEarnings>'
    End-if
 if #LseSA_tmp <> 0.00
 Let $SocialContributions = '<SocialContributions>' || RTRIM(LTRIM($LseSA_tmp,' '),' ') || '</SocialContributions>'
  End-if
 if   #LseZU_tmp <> 0.00
 Let $Allowances = '<Allowances>' ||RTRIM(LTRIM($LseZU_tmp, ' '), ' ') ||'</Allowances>'
   End-if
 If #LseUS_tmp <> 0.00
 Let $Overtime = '<Overtime>' || RTRIM(LTRIM($LseUS_tmp,' '),' ') || '</Overtime>'
  End-if
 If #LseZML_tmp <> 0.00
 Let $Earnings13th = '<Earnings13th>' ||  RTRIM(LTRIM($LseZML_tmp,' '),' ')|| '</Earnings13th>'
   End-if
 If  #LseSO_tmp <> 0.00
 Let $SpecialPayments = '<SpecialPayments>' ||  RTRIM(LTRIM($LseSO_tmp,' '),' ')|| '</SpecialPayments>'
   End-if
 If #LseDL_tmp <> 0.00
 Let $PaymentsByThird = '<PaymentsByThird>' ||RTRIM(LTRIM($LseDL_tmp, ' '), ' ')|| '</PaymentsByThird>'
   End-if
 if #LseAK_tmp <> 0.00
 Let $LaborCost = '<LaborCost>' ||RTRIM(LTRIM($LseAK_tmp, ' '), ' ') ||'</LaborCost>'
  End-if
 If #LseZL_tmp <> 0.00
  Let $ExtendedBenefits = '<ExtendedBenefits>' ||RTRIM(LTRIM($LseZL_tmp, ' '), ' ')||'</ExtendedBenefits>'
  End-if
 Let $Education = '<Education>' || $HighEdLvl_tmp_Equ || '</Education>'
 Let $Skill = '<Skill>' || $Position_Equ || '</Skill>'
 Let $Position = '<Position>' || $Grade_tmp_Equ || '</Position>'
 Let $Activity = '<Activity>' || $JobCode_tmp_Equ || '</Activity>'
 ! Let $WageForm = '<WageForm>' || $LseSt_tmp || '</WageForm>'
 Let $WageForm = '<WageForm>' ||  $EmplClass_tmp_Equ || '</WageForm>'
!FMB 20100308
 Let $Contract = '<Contract>' ||  $ContrType_tmp_Equ || '</Contract>'

 Let $CompanyWorkingTimeIDRef = $ptot_company || $SETID_JOBCODE || $LOCATION

 let $StatisticSalary0 =  '<StatisticSalary CompanyWorkingTimeIDRef=' || '"#.' ||$CompanyWorkingTimeIDRef|| '"' ||'>'

!FMB 20100909 Begin October only if active in October 

 show ' $EmplId_tmp = ' $EmplId_tmp ' $ptot_year = ' $ptot_year ' $Year = ' $Year
 
IF substr($From_Date,6,2) <= '10' and substr($To_Date,6,2) >= '10' and substr($From_Date,1,4) = $ptot_year

 let $StatisticSalary1 =  $StatisticSalary0 || $October || $Period || $TotalHoursOfWork || $TotalLessonsOfWork || $GrossEarnings || $SocialContributions || $Allowances || $Overtime || $Earnings13th || $SpecialPayments
 Else
 let $StatisticSalary1 =  $StatisticSalary0 || $Period || $TotalHoursOfWork || $TotalLessonsOfWork || $GrossEarnings || $SocialContributions || $Allowances || $Overtime || $Earnings13th || $SpecialPayments 
 End-IF
!FMB 20100909 END October only if active in October 

 Let $StatisticSalary = $StatisticSalary1 || $PaymentsByThird || $LaborCost || $ExtendedBenefits || $Education || $Skill || $Position || $Activity || $WageForm || $Contract ||'</StatisticSalary>'

 #debug show '$StatisticSal_old = ' $StatisticSal_old
 #debug show '$EmplId_old = ' $EmplId_old
 #debug show '$EmplId_tmp = ' $EmplId_tmp

 If ( $EmplId_tmp <> $EmplId_old and $EmplId_old <> '' ) or
    ( #EmplRcd_tmp# <> #EmplRcd_old and $EmplId_old <> '')
         
 Let $StatisticSalaries = '<StatisticSalaries>' ||$StatisticSal_old || '</StatisticSalaries>'

    do Convert-To-DTU-Date($Ctl_Curr_Pay_End_Dt, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do Convert-To-DTU-Date($TermDt_tmp, $DTU_Date)
    do dtu-parse-date($DTU_Date, #Year, #Month, #Day)
    do dtu-format-date(#Year, 1, 1, $YearStart)
    do dtu-format-date(#Year, 12, 31, $YearEnd)
    do Convert-From-DTU-Date($YearStart, $YearStart)
    do Convert-From-DTU-Date($YearEnd, $YearEnd)

    do format-number(#Year,$Year,'9999')

If $GPCH_EG_YEP_FLG <> 'Y'
 let #ptot_domainid = 1
 let $ptot_year = $Year
 let $ptot_company = $Ctl_PayEntity
 let $ptot_provtype = '9'
 let $ptot_providercd = '#OFS'
End-If

! missing last row


  Do Insert_Employee_XML

  let $StatisticSal_old = ' '

 End-If


  let $EmplId_old = $EmplId_tmp
  let #EmplRcd_old = #EmplRcd_tmp
  let $StatisticSal_old = $StatisticSal_old || $StatisticSalary

#debug show '<- Create_Employee_XML'

End-Procedure
!*********************************************************************************************
Begin-Procedure Insert_Employee_XML

#debug show '-> Insert_Employee_XML'

!FMB 20090103
let #ptot_year = $ptot_year  


Begin-Sql on-error=give_warning

 ! ST DELETE FROM PS_GPCH_EG_PERSON WHERE GPCH_EG_TRNS_SEQ = $GPCH_EG_TRNS_SEQ AND GPCH_RC_PAY_YEAR = $Ctl_Year AND COMPANY = $comp AND GPCH_EG_RPT_NAME = $Type AND EMPLID = $EmplId_tmp AND EMPL_RCD = #EmplRcd_tmp
 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company AND  EMPLID = $EmplId_old AND EMPL_RCD = #EmplRcd_old AND GPCH_SI_PROV_TYPE='9'

End-SQL

 !

Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML)
 values (#ptot_domainid,#ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$EmplId_old,#EmplRcd_old,$YearStart,$Ctl_Curr_Pay_End_Dt,1,$StatisticSalaries)
End-SQL

#debug show '<- Insert_Employee_XML'

End-Procedure


!**********************************************************************************************
! FMB removed 20070416 begin-procedure Get_Nationality

!**********************************************************************************************
begin-procedure Get-Education-Lvl
let $HighEdLvl_tmp_Equ = ' '
let $HighEdTmp = ''
begin-select
LSECF.GPCH_RP_LSETVAL
   let $HighEdLvl_tmp_Equ = edit(&LSECF.GPCH_RP_LSETVAL,'B8')
from PS_GPCH_RP_LSECF LSECF
where LSECF.HIGHEST_EDUC_LVL = $HighEdLvl_tmp
end-select

let $HighEdLvl_tmp_Equ = substr($HighEdLvl_tmp_Equ,1,1)
let $HighEdTmp = edit(&LSECF.GPCH_RP_LSETVAL,'B8')
end-procedure
!**********************************************************************************************
begin-procedure Get-Position
let $Position_Equ = ' '
let $PositionTmp = ''
begin-select
LSEPS.GPCH_RP_LSETVAL
   let $Position_Equ = edit(&LSEPS.GPCH_RP_LSETVAL,'B8')
   let $Position_Equ = substr($Position_Equ,1,1)
   let $PositionTmp = edit(&LSEPS.GPCH_RP_LSETVAL,'B8')
from PS_GPCH_RP_LSEPS LSEPS
where LSEPS.GPCH_RP_LSESVAL = $Grade_tmp
end-select

if (isblank($Position_Equ) and isblank($PositionTmp))
    let $Position_Equ = '0'
    let $PositionTmp = '0'
end-if
end-procedure
!**********************************************************************************************
begin-procedure Get-Function
let $Grade_tmp_Equ = ' '
let $GradeTmp = ''
begin-select
LSESK.GPCH_RP_LSETVAL
   let $Grade_tmp_Equ = edit(&LSESK.GPCH_RP_LSETVAL,'B8')
   let $Grade_tmp_Equ = substr($Grade_tmp_Equ,1,1)
   let $GradeTmp = edit(&LSESK.GPCH_RP_LSETVAL,'B8')
from PS_GPCH_RP_LSESK LSESK
where LSESK.GPCH_RP_LSESVAL = $Grade_tmp
end-select

if (isblank($Grade_tmp_Equ) and isblank($GradeTmp))
    let $Grade_tmp_Equ = '0'
    let $GradeTmp = '0'
end-if
end-procedure
!**********************************************************************************************
begin-procedure Get-Activity
let $JobCode_tmp_Equ = '99'
let $JobCodeTmp = '99'
begin-select
LSEJC.GPCH_RP_LSETVAL
   let $JobCode_tmp_Equ = edit(&LSEJC.GPCH_RP_LSETVAL,'B8')
   let $JobCode_tmp_Equ = substr($JobCode_tmp_Equ,1,2)
   let $JobCodeTmp = edit(&LSEJC.GPCH_RP_LSETVAL,'B8')
from PS_GPCH_RP_LSEJC LSEJC
where LSEJC.GPCH_RP_LSESVAL = $JobCode_tmp
end-select

if (isblank($JobCode_tmp_Equ) and isblank($JobCodeTmp))
    let $Grade_tmp_Equ = '99'
    let $GradeTmp = '99'
end-if
end-procedure
!**********************************************************************************************
! FMB removed 20070416 / Re-introduced 20100308 begin-procedure Get-Contract-Type
!*******************************************************************************************
begin-procedure Get-Contract-Type
let $ContrType_tmp_Equ = '99'
let $ContrTypeTmp = '99'
begin-select
LSECT.GPCH_RP_LSETVAL
   let $ContrType_tmp_Equ = edit(&LSECT.GPCH_RP_LSETVAL,'B88')
   Let $ContrType_tmp_Equ = substr($ContrType_tmp_Equ,1,2)
   let $ContrTypeTmp = edit(&LSECT.GPCH_RP_LSETVAL,'B88')
from PS_GPCH_RP_LSECT LSECT
where LSECT.GPCH_RP_LSESVAL = $ContrType_tmp
end-select
if (isblank($JContrType_tmp_Equ) and isblank($ContrTypeTmp))
    let $ContrType_tmp_Equ = '99'
    let $ContrTypeTmp = '99'
end-if
end-procedure
!***********************************************************************
begin-procedure Get-Wage-Form
let $EmplClass_tmp_Equ = ' '
let $EmplClassTmp = ''
begin-select
LSEMP.GPCH_RP_LSETVAL
   let $EmplClass_tmp_Equ = edit(&LSEMP.GPCH_RP_LSETVAL,'B8')
   Let $EmplClass_tmp_Equ = substr($EmplClass_tmp_Equ,1,1)
   let $EmplClassTmp = edit(&LSEMP.GPCH_RP_LSETVAL,'B8')
from PS_GPCH_RP_LSEMP LSEMP
where LSEMP.EMPL_CLASS = $EmplClass_tmp
end-select
end-procedure
!***********************************************************************
begin-procedure Strings_LPads ( $Str1 , :$Str2 , #Len1,$Chr1)
   let $Str1 = rtrim(ltrim($Str1 , ' ' ) , ' ' )
   let $Str01 = rtrim(substr($Str1 , 1 , #Len1) ,' ' )
   let $Str2 = lpad($Str01 , #Len1 , $Chr1)
end-procedure
!***********************************************************************
begin-procedure Strings_RPads ( $Str1 , :$Str2 , #Len1,$Chr1)
   let $Str1 = rtrim(ltrim($Str1 , ' ' ) , ' ' )
   let $Str01 = rtrim(substr($Str1 , 1 , #Len1) ,' ' )
   let $Str2 = rpad($Str01 , #Len1 , $Chr1)
end-procedure
!***************************************************************
! Removed FMB 20070416 begin-procedure GetCompanyAddress
!********************************************************************
! FMB 20070416 reomoved begin-procedure Write_Heading

!**********************************************************************************************
! FMB 20070416 reomoved begin-procedure Print_Interface

!**********************************************************************************************

begin-procedure Open_File
 let $reportdir1 = $Output_Directory || 'GPCHST2A.DAT' ! oracle / Mss

   #ifdef MVS
   let $reportdir1 =  'GPCHST2A'                            ! MVS/ OS390 etc...
   #end-if

   #ifdef OS390
   let $reportdir1 =  'GPCHST2A'                            ! MVS/ OS390 etc...
   #end-if

   #ifdef OS400
   let $reportdir1 =  'GPCHST2A'                            ! MVS/ OS390 etc...
   #end-if


      !------------------------------------------------------------------

   let $reportdir2 = $Output_Directory || 'GPCHST2B.DAT' ! oracle / Mss

   #ifdef MVS
   let $reportdir2 =  'GPCHST2B'                            ! MVS/ OS390 etc...
   #end-if

   #ifdef OS390
   let $reportdir2 =  'GPCHST2B'                            ! MVS/ OS390 etc...
   #end-if

   #ifdef OS400
   let $reportdir2 =  'GPCHST2B'                            ! MVS/ OS390 etc...
   #end-if


  open $reportdir1 as 10 for-writing record=150:VARY

  open $reportdir2 as 20 for-writing record=150:VARY

end-procedure

!**********************************************************************************************
begin-procedure Get-Values
 let $GPCH_EG_YEP_FLG = RTRIM(LTRIM(&GPCH_RUN_CNTL.GPCH_EG_YEP_FLG,' '),' ')
let #Domainid = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID

     If $GPCH_EG_YEP_FLG = 'Y'
     !ST Let #GPCH_EG_TRNS_SEQ             = &GPCH_RUN_CNTL.GPCH_EG_TRNS_SEQ
     !ST do Format-Number(#GPCH_EG_TRNS_SEQ,$GPCH_EG_TRNS_SEQ,'99')
      Let $comp                  = RTRIM(LTRIM(&GPCH_RUN_CNTL.COMPANY,' '),' ')
      Let $Type                  = 'SalaryStructure'
      let $Ctl_Year                 = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
      Let $PAY_BGN_DT               = $Ctl_Year || '0101'
      do Format-DateTime($PAY_BGN_DT, $PAY_BGN_DT, {DEFCMP},'','native')

    End-If


   If $GPCH_EG_YEP_FLG = 'Y'
     let $GPCH_EG_TRNS_SEQ = RTRIM(LTRIM($GPCH_EG_TRNS_SEQ,' '),' ')
   End-If
let $language_cd           = $PRCS_LANGUAGE_CD
let #Ctl_WKHours           = &GPCH_RUN_CNTL.GPCH_RC_WKHOURS
let $Ctl_GPCH_RC_DESCR2    = &GPCH_RUN_CNTL.GPCH_RC_DESCR2

let $Ctl_GPCH_RC_NAME       = &GPCH_RUN_CNTL.NAME
let $Ctl_GPCH_RC_PAY_ENTITY = &GPCH_RUN_CNTL.PAY_ENTITY
let $Ctl_Count_Meth        = rtrim(&GPCH_RUN_CNTL.GPCH_RC_COUNT_METH,' ')
let $Ctl_comp        = rtrim(&GPCH_RUN_CNTL.COMPANY,' ')
end-procedure
!**********************************************************************************************
begin-procedure Ask-Input
input $Ctl_Curr_Pay_End_Dt   'Pay End Date '         type=date
input $Ctl_PayEntity         'Pay Entity '
input #Ctl_WKHours    'Weekly Hours '
input $Ctl_GPCH_RC_DESCR2    'Phone '
input $Ctl_Count_Meth    'Count Method 1=Every Employee / 6=Every 6.th '
end-procedure Ask-Input
!**********************************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',     $LG_BDTTIME,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',      $LG_DBNAME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',      $LG_DBTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',     $LG_EDTTIME,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',      $LG_OPERID,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',     $LG_OPERSYS,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',  $LG_OUTDESTFOR,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE', $LG_OUTDESTTYPE, #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',  $LG_PRCINSTNUM,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',       $LG_PRCNM,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',     $LG_PRCTYPE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',      $LG_REPLNG,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',       $LG_REPNM,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',    $LG_RUNCTLID,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',      $LG_RUNLOC,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',     $LG_RUNSTAT,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',     $LG_TOTDURA,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',      $LG_CURRDT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',      $LG_SRTORD,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',      $LG_PAYENT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',      $LG_PSTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',       $LG_FORYR,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',    $LG_RUNCTLPA,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',       $LG_VALUE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',      $LG_REPLOG,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',     $LG_LOGITEM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',       $LG_PINNM,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SERIAL_NUM',  $LG_SERIAL_NUM,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_AHV_CONTR',   $LG_AHV_CONTR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_ALV1_CONTR',  $LG_ALV1_CONTR,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_ALV2_CONTR',  $LG_ALV2_CONTR,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_ADJ_DATE',    $LG_ADJ_DATE,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRINT_OPT',   $LG_PRINT_OPT,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CANTON',      $LG_CANTON,      #CW)
end-Procedure Report-Translation
!************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!**********************************************************************************************
#include 'gpchst02.sqc'  !calculate missing data
#include 'gpchut03.sqc'  ! ask input parameters (instead of ask input)
#include 'gpchut01.sqc'  !get company informations
#include 'gpchut04.sqc'  !get company informations
#include 'gpchut06.sqc'  !get run control parameter values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'datemath.sqc'  !function for date-calculation
#include 'gpchut07.sqc'  !get run control parameter values
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB