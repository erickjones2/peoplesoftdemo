!-----------------------------------------------------------------------
!  STOP017: Transfer Agent Instructions
!           (Option Releases)
!-----------------------------------------------------------------------
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:54:21                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Reprint , Emplid, Control #
! Prompts:       Stock ID, Emplid, From Date, Thru Date,
!                Reprint Indicator 
! Options:       None
! Tables:        STOCK_TBL
!                ST_PERSON_NAME
!                PERS_NID
!                ST_EXER_RELEASE
!                ST_GRANT
!                ST_REL_ISSUE
!                ST_OPTION_PLAN
!                RUN_CNTL_ST
!                ST_INSIDER_TBL
! Sorts:         NAME
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  if $TransferAgentID <> ''
    do Process-Main
  else
    show 'Transfer Agent not found. Please check Stock Details to ensure a Transfer Agent is setup.'
  end-if
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 17

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,   )
  print ':'                                                (  ,000,001)
  print $StockID                                           (  ,020,010)

  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,000,   ) center

  print $CusipNumberLbl                                    (+1,001,012)
  print ':'                                                (  ,000,001)
  print $Cusip_Nbr                                         (  ,020,009)
  print $TransactionLbl                                    (+1,  1,016)
  print ':'                                                (  ,000,011)
  print $Reporttype3                                       (  ,020,011)

  print $IssuanceLbl                                       (+1,001,013)
  print ':'                                                (  ,   ,001)
  print $IssuanceTypeLbl                                   (  ,020,011)

  do Format-Amt(#MaxControlNbr,$out,'9999999',$Cur,$Curout)
  let $out = ltrim($out,' ')
  let $ControlNbr = $ControlNoLbl || ': ' || $out
  print $ControlNbr                                        (  ,083,   ) bold

  print $ReprintLbl                                        (+1,001,007)
  print ':'                                                (  ,000,001)
  print $Reprint                                           (  ,020,001)

  print $TransferDescr                                     (+1,083,   )
  print $TAddress1                                         (+1,083,   )

  if $TAddress2 <> ''
    print $TAddress2                                       (+1,083,   )
  end-if
  print $TCity-Zip                                         (+1,083,   )
  print $TCountry                                          (+1,083,   )

  print  $NameLbl                                          (+2,016,025)
  print  $BrokerBranchLbl                                  (  ,080,025)
  print  $NidLbl                                           (+1,016,025)
  print  $RegistraionLbl                                   (  ,043,035)
  print  $AccountNumberLbl                                 (  ,080,025)
  print  $StockPlanLbl                                     (  ,107,011)

  print  $ReleaseDtLbl                                     (+1,001,013)
  print  $EmplidLbl                                        (  ,016,012)
  print  $InsiderLbl                                       (  ,029,009)
  print  $NameAddressLbl                                   (  ,043,035)
  print  $LegendLbl                                        (  ,080,025)
  print  $OptionTypeLbl                                    (  ,107,011)
  print  $ReleasedLbl                                      (  ,123,015)
  print  $WithheldLbl                                      (  ,143,015)
  print  $IssuedLbl                                        (  ,165,013)
  print '-'                                                (+1,001,177) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STOP015'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' Procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
    do Get-Stock-Values
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables
  do Create-Array
  do Build-Where-Clause

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-depEndent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK', $language_cd)
  do AppEnd_Report_Translation ($ReportID)

  do Get_Field_Information ('STOCK'  ,'STOCK_ID',        $StockIdLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'NID',             $NidLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'EMPLID',          $EmplidLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES',          $SharesLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'NAME',            $NameLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'DATE',            $DateLbl,           #DW)
  do Get_Field_Information ('STOCK',  'FROM',            $FromLbl,           #DW)
  do Get_Field_Information ('STOCK',  'THRU',            $ThruLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'TOTAL',           $TotalLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'RELEASE_DT',      $ReleaseDtLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES_RELEASED', $ReleasedLbl,       #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES_ISSUED',   $IssuedLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'STOCK_PLAN',      $StockPlanLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'ST_OPTION_TYPE',  $OptionTypeLbl,     #DW)
  do Get_Field_Information ('STOCK',  'DTC_ACCOUNT_NBR', $DtcLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'ISSUANCE_TYPE',   $IssuanceLbl,       #DW)
  do Get_Field_Information ('STOCK'  ,'AUTH_SIGNATURE',  $AuthSignLbl,       #DW)
  do Get_Field_Information ('STOCK'  ,'INSIDER',         $InsiderLbl,        #DW)

  do Get_Field_Information ('STOP015','CONTROL_NO',      $ControlNoLbl,      #DW)
  do Get_Field_Information ('STOP015','REPRINT',         $ReprintLbl,        #DW)
  do Get_Field_Information ('STOP015','LEGEND_ID',       $LegendLbl,         #DW)
  do Get_Field_Information ('STOP015','REPORT_TITLE',    $Reporttitle,       #DW)
  do Get_Field_Information ('STOP015','TRANSACTION_TYPE',$TransactionLbl,    #DW)
  do Get_Field_Information ('STOP015','REPORTTYPE3',     $Reporttype3,       #DW)
  do Get_Field_Information ('STOP015','DTCNUMBER',       $DtcnumberLbl,      #DW)
  do Get_Field_Information ('STOP015','BROKER_BRANCH',   $BrokerBranchLbl,   #DW)
  do Get_Field_Information ('STOP015','WITHHELD',        $WithheldLbl,       #DW)
  do Get_Field_Information ('STOP015','SUM_PLAN',        $SumPlanLbl,        #DW)
  do Get_Field_Information ('STOP015','LEGEND_ID_KEY',   $LegendIdKeyLbl,    #DW)
  do Get_Field_Information ('STOP015','CUSIP_NUMBER',    $CusipNumberLbl,    #DW)
  do Get_Field_Information ('STOP015','NAME_ADDRESS',    $NameAddressLbl,    #DW)
  do Get_Field_Information ('STOP015','ACCOUNT_NUMBER',  $AccountNumberLbl,  #DW)
  do Get_Field_Information ('STOP015','DWAC_SUMMARY',    $DwacSummaryLbl,    #DW)
  do Get_Field_Information ('STOP015','REGISTRAION',     $RegistraionLbl,    #DW)
  do Get_Field_Information ('STOP015','BROKER',          $BrokerLbl,         #DW)
  do Get_Field_Information ('STOP015','CERTIFICATE',     $CertificateLbl,    #DW)
  do Get_Field_Information ('STOP015','ESCROW',          $EscrowLbl,         #DW)

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     
!-----------------------------------------------------------------------
Begin-Procedure Get-Stock-Values

  INPUT $RC_STOCK_ID           MAXLEN=10  'Enter Stock ID'                TYPE=CHAR
  INPUT $RC_EMPLID             MAXLEN=10  'Enter Employee ID'             TYPE=CHAR
  INPUT $RC_REPRINT_PROMPT     MAXLEN=1   'Reprint? (Y/N)'                TYPE=CHAR
  INPUT $RC_FROMDATE           MAXLEN=10  'Enter from Date'               TYPE=DATE
  INPUT $RC_THRUDATE           MAXLEN=10  'Enter Through Date'            TYPE=DATE

  if $RC_REPRINT_PROMPT = 'Y'
    INPUT $RC_BRANCH_CNTL_NBR  MAXLEN=7  'Enter Transfer Control Number'  TYPE=CHAR
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockID       = rtrim($RC_STOCK_ID,' ')
  let $RC_EMPLID     = rtrim($RC_EMPLID,' ')
  let $Reprint       = rtrim($RC_REPRINT_PROMPT,' ')
  let #MaxControlNbr = #RC_TRANSFER_CNTL_NBR
  let $RC_FromDate   = rtrim($RC_FromDate,' ')
  let $RC_ThruDate   = rtrim($RC_ThruDate,' ')
  let $Comments      = rtrim($RC_COMMENTS,' ')

  let #Break         = 1
  let #PlanCount     = 1
  let #BrokerCount   = 1
  let #LegendCount   = 1
  let $RowFound      = 'N'
  let $Found         = 'N'
  do Convert-To-DTU-Date($RC_FromDate,$FromDate)
  do Convert-To-DTU-Date($RC_ThruDate,$ThruDate)

Begin-Select

W.CUSIP_NBR
X.TRANSFER_AGENCY_ID
Y.DESCR
Z.ADDRESS1
Z.ADDRESS2
Z.CITY
Z.STATE
Z.POSTAL
Z.COUNTRY

  let $Cusip_Nbr         = rtrim(&w.cusip_nbr,' ')
  let $TransferAgentID   = rtrim(&x.transfer_agency_id,' ')
  let $TransferDescr     = rtrim(&y.descr,' ')
  let $TAddress1         = rtrim(&z.address1,' ')
  let $TAddress2         = rtrim(&z.address2,' ') 
  let $TCountry          = rtrim(&z.country,' ') 
  let $TCity-Zip         = rtrim(&z.city,' ') ||', '|| rtrim(&z.state,' ') ||'-'|| rtrim(&z.postal,' ')

from PS_STOCK_TBL      W,
     PS_STOCK_DTL      X,
     PS_ST_AGENT_DTL   Y,
     PS_ST_AGENT_CNTCT Z 
where W.STOCK_ID           = $StockID
  and W.STOCK_ID           = X.STOCK_ID
  and X.EFFDT              = (select MAX(XX.EFFDT) 
                              from PS_STOCK_DTL XX
                              where XX.STOCK_ID = X.STOCK_ID
                                and XX.EFFDT   <= $AsOfToday )
  and X.STOCK_ID           = Z.STOCK_ID
  and X.TRANSFER_AGENCY_ID = Z.ST_AGENCY_ID
  and X.TRANSFER_AGENCY_ID = Y.ST_AGENCY_ID
  and Y.EFFDT              = (select MAX(YY.EFFDT) 
                              from PS_ST_AGENT_DTL YY
                              where YY.ST_AGENCY_ID = Y.ST_AGENCY_ID
                               and YY.EFFDT       <= $AsOfToday )
  and (Z.ST_CONTACT_TYPE   = 'Y'
   or Z.ST_CONTACT_TYPE    = 'T')
  and Z.EFFDT              = (select MAX(ZZ.EFFDT) 
                              from PS_ST_AGENT_CNTCT ZZ
                              where ZZ.STOCK_ID     = Z.STOCK_ID
                                and ZZ.ST_AGENCY_ID = Z.ST_AGENCY_ID)

End-Select

  if $Reprint = 'N'
    do Get-Last-Control-Number
  end-if

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Get-Last-Control-Number
!-----------------------------------------------------------------------

Begin-Select

V.LAST_CONTROL_NBR

  let #MaxControlNbr = &v.last_control_nbr + 1

from PS_STOCK_AGENT V
where V.STOCK_ID     = $StockID
  and V.ST_AGENCY_ID = $TransferAgentID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan           -
               size  = 100                 -
               field = StockPlan:char      -
               field = SharesRel:number    -
               field = SharesWith:number   -
               field = SharesIssue:number

  create-array name  = BrokerBranch        -
               size  = 100                 -
               field = BrokerID:char       -
               field = BranchID:char       -
               field = BranchName:char     -
               field = SharesIssue:number

  create-array name  = Legend              -
               size  = 100                 -
               field = LegendID:char       -
               field = LegendDescr:char

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause
!-----------------------------------------------------------------------

  let $SQLQuote                     = ''''
  let $WhereRelDatefrom             = ''
  let $WhereRelDateThru             = ''
  let $WhereUpdateRelDatefrom       = ''
  let $WhereUpdateRelDateThru       = ''
  let $WhereTransferControlNo       = ''
  let $WhereTransferIssueDate       = ''
  let $WhereUpdateTransferControlNo = ''
  let $WhereUpdateTransferIssueDate = ''

  if rtrim($RC_FromDate, ' ') <> ''
    let $WhereRelDatefrom       = 'and B.RELEASE_DT >= ' || $SQLQuote || $RC_FROMDATE || $SQLQuote
    let $WhereUpdateRelDatefrom = 'and RELEASE_DT >= ' || $SQLQuote || $RC_FROMDATE || $SQLQuote
  end-if

  if rtrim($RC_ThruDate, ' ') <> ''
    let $WhereRelDateThru       = 'and B.RELEASE_DT <= ' || $SQLQuote || $RC_THRUDATE || $SQLQuote
    let $WhereUpdateRelDateThru = 'and RELEASE_DT <= ' || $SQLQuote || $RC_THRUDATE || $SQLQuote
  end-if

  if $RC_EMPLID <> ''
    let $WhereEmplid         = ' and B.EMPLID  = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
    let $WhereUpdateEmplid   = ' and EMPLID  = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
  else
    let $WhereEmplid         = ''
    let $WhereUpdateEmplid   = ''
  end-if

  if $RC_REPRINT_PROMPT = 'Y'
    let $MAX_CNTL_NO_CHAR             = to_char(#MaxControlNbr)
    let $WhereTransferControlNo       = 'and B.TRANSFER_CNTL_NBR = ' || $MAX_CNTL_NO_CHAR
    let $WhereUpdateTransferControlNo = 'and TRANSFER_CNTL_NBR = ' || $MAX_CNTL_NO_CHAR
  else
    let $WhereTransferIssueDate       = 'and B.TRANSFER_ISSUE_DT IS NULL'
    let $WhereUpdateTransferIssueDate = 'and TRANSFER_ISSUE_DT IS NULL'
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Process-Main                                             
! Descr:      This is where all required data is selected              
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let $IssueType = 'B'
  let $IssuanceTypeLbl = $BrokerLbl
  do Process-Record

  let $IssueType = 'C'
  let $IssuanceTypeLbl = $CertificateLbl
  do Process-Record

  let $IssueType = 'E'
  let $IssuanceTypeLbl = $EscrowLbl
  do Process-Record

  let $IssuanceTypeLbl = ''
  if $Found = 'Y'
    do Print-Totals
    if $RC_REPRINT_PROMPT = 'Y'
      do Update-Transfer-Issue-Date
    else  
      do Update-Control-No
    end-if
    do Update-Last-Control-No
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Process-Record
! Descr:      This is where all required data is selected
!-----------------------------------------------------------------------
Begin-Procedure Process-Record

  let $RowFound = 'N'
  let #Break    = 1
  let $Insider  = ' '

Begin-Select

A.EMPLID                                                   () on-break print=never Procedure=Reset-Break
A.GRANT_NBR                                                () on-break print=never Procedure=Reset-Break
A.EXERCISE_NBR                                             () on-break print=never Procedure=Reset-Break
A.RELEASE_NBR                                              () on-break print=never Procedure=Reset-Break
A.REGISTRATION_NAME
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.CITY
A.STATE
A.POSTAL
A.COUNTRY
A.ST_ACCOUNT_NBR
A.ISSUANCE_NBR
A.SHARES_ISSUED
A.ST_BROKERAGE_ID
A.ST_BRANCH_ID
B.RELEASE_DT
B.SHARES_RELEASED
C.STOCK_PLAN
C.ST_OPTION_TYPE

  let $EmplID       = rtrim(&a.emplid,' ')
  let $GrantNbr     = rtrim(&a.grant_nbr,' ')
  let #ExerciseNbr  = &a.exercise_nbr
  let #IssueNbr     = &a.issuance_nbr
  let #ReleaseNbr   = &a.release_nbr
  let $IssueAcctNbr = rtrim(&a.st_account_nbr,' ')
  let #SharesIssue  = &a.shares_issued
  let $RegName      = rtrim(&a.registration_name,' ')
  let $BrokerID     = rtrim(&a.st_brokerage_id,' ')
  let $BranchID     = rtrim(&a.st_branch_id,' ')
  let $ReleaseDt    = rtrim(&b.release_dt,' ')
  let #SharesRel    = &b.shares_released
  let $StockPlan    = rtrim(&c.stock_plan,' ')
  let $OptionType   = rtrim(&c.st_option_type,' ')
  let $BrokerName   = ''
  let $BranchName   = ''

  evaluate $IssueType
  when = 'B'
    do Get-Branch-Address
    break
  when = 'C'
    let $IssueAddress1 = rtrim(&a.address1,' ')
    let $IssueAddress2 = rtrim(&a.address2,' ')
    let $IssueAddress3 = rtrim(&a.address3,' ')
    let $IssueCity     = rtrim(&a.city,' ')
    let $IssueState    = rtrim(&a.state,' ')
    let $IssuePostal   = rtrim(&a.postal,' ')
    let $IssueCountry  = rtrim(&a.country,' ')
    break
  when = 'E'
    do Get-Escrow-Address
  end-evaluate

  if $IssueCity <> ''
    let $IssueCityZip  = $IssueCity
  else
    let $IssueCityZip  = ''
  end-if
  if $IssueCityZip  <> ''
    if $IssueState <> ''
      let $IssueCityZip  = $IssueCityZip ||', '|| $IssueState ||'-'|| $IssuePostal
    end-if
  else
    if $IssueState <> ''
      let $IssueCityZip  = $IssueState ||'-'|| $IssuePostal
    end-if
  end-if

  do Get-Legend

  if #Break = 1
    do Get-Name
    do Get-National-Id
    do Get-Shares-Withheld
    do Get-Insider-Status
    do Print-Detail-Rel
  else
    do Print-Detail-Issue
  end-if  

  let $RowFound = 'Y'
  add 1 to #Break

from PS_ST_REL_ISSUE    A,
     PS_ST_EXER_RELEASE B,
     PS_ST_GRANT        C
where A.STOCK_ID        = $StockID
  and A.ISSUANCE_TYPE   = $IssueType
  and A.STOCK_ID        = B.STOCK_ID
  and A.EMPLID          = B.EMPLID
  and A.GRANT_NBR       = B.GRANT_NBR
  and A.EXERCISE_NBR    = B.EXERCISE_NBR
  and A.RELEASE_NBR     = B.RELEASE_NBR
  and A.STOCK_ID        = C.STOCK_ID
  and A.EMPLID          = C.EMPLID
  and A.GRANT_NBR       = C.GRANT_NBR
  and B.RELEASE_STATUS  = 'A'
[$WhereEmplid]
[$WhereRelDateFrom]
[$WhereRelDateThru]
[$WhereTransferControlNo]
[$WhereTransferIssueDate]

End-Select

  if $RowFound = 'Y'
    let $Found = 'Y'
    do Print-Sub-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Reset-Break
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Reset-Break

  let #Break = 1

End-Procedure 

!-----------------------------------------------------------------------
! Section: Get-Name
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Name

Begin-Select

AA.NAME

  let $Name = rtrim(&aa.name,' ')

from PS_ST_PERSON_NAME AA
where AA.EMPLID = $EmplID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-National-Id
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-National-Id

  let $NationalId = ''

Begin-Select

PERS_NID.NATIONAL_ID

  let $NationalId = rtrim(&pers_nid.national_id, ' ')

 from PS_PERS_NID PERS_NID
where PERS_NID.EMPLID      = $Emplid
  and PERS_NID.PRIMARY_NID = 'Y'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Branch-Address
! Descr:   Retrieves the Branch's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Branch-Address

Begin-Select

R1.DESCR
R.DESCR
R.ADDRESS1
R.ADDRESS2
R.ADDRESS3
R.CITY
R.STATE
R.POSTAL
R.COUNTRY

  let $BrokerName    = rtrim(&r1.descr,' ')
  let $BranchName    = rtrim(&r.descr,' ')
  let $IssueAddress1 = rtrim(&r.address1,' ')
  let $IssueAddress2 = rtrim(&r.address2,' ')
  let $IssueAddress3 = rtrim(&r.address3,' ')
  let $IssueCity     = rtrim(&r.city,' ')
  let $IssueState    = rtrim(&r.state,' ')
  let $IssuePostal   = rtrim(&r.postal,' ')
  let $IssueCountry  = rtrim(&r.country,' ')

from PS_ST_BRKR_BRANCH R,
     PS_ST_BROKER_DTL  R1
where R.ST_BROKERAGE_ID  = $BrokerID
  and R.ST_BRANCH_ID     = $BranchID
  and R.EFF_STATUS       = 'A'
  and R.EFFDT            = (SELECT MAX(EFFDT)    
                            from PS_ST_BRKR_BRANCH
                            where ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
                              and ST_BRANCH_ID    = R.ST_BRANCH_ID)
  and R1.ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
  and R1.EFF_STATUS      = 'A'
  and R1.EFFDT           = (SELECT MAX(EFFDT)    
                            from PS_ST_BROKER_DTL
                            where ST_BROKERAGE_ID = R1.ST_BROKERAGE_ID
                              and EFFDT          <= $AsOfToday)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Escrow-Address
! Descr:   Retrieves the Transfer Agent's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Escrow-Address

Begin-Select

S.DESCR
S.ADDRESS1
S.ADDRESS2
S.ADDRESS3
S.CITY
S.STATE
S.POSTAL
S.COUNTRY

  let $RegName       = rtrim(&s.descr,' ')
  let $IssueAddress1 = rtrim(&s.address1,' ')
  let $IssueAddress2 = rtrim(&s.address2,' ')
  let $IssueAddress3 = rtrim(&s.address3,' ')
  let $IssueCity     = rtrim(&s.city,' ')
  let $IssueState    = rtrim(&s.state,' ')
  let $IssuePostal   = rtrim(&s.postal,' ')
  let $IssueCountry  = rtrim(&s.country,' ')

from PS_ST_AGENT_DTL S,
     PS_STOCK_DTL    S1
where S1.STOCK_ID         = $StockID 
  and S1.EFFDT            = (SELECT MAX(EFFDT)
                             from PS_STOCK_DTL
                             where STOCK_ID  = S1.STOCK_ID
                               and EFFDT    <= $AsOfToday)
  and S1.EFF_STATUS       = 'A'
  and S1.ESCROW_AGENCY_ID = S.ST_AGENCY_ID 
  and S.EFFDT             = (SELECT MAX(EFFDT)    
                             from PS_ST_AGENT_DTL
                             where ST_AGENCY_ID  = S.ST_AGENCY_ID
                               and EFFDT        <= $AsOfToday)
  and S.EFF_STATUS        = 'A'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Shares-Withheld
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Withheld

  let #SharesSwap = 0

Begin-Select

F.SHARES_SWAPPED 

  let #SharesSwap = #SharesSwap + &f.shares_swapped

from PS_ST_REL_SWAP F
where F.EMPLID       = $EmplID
  and F.STOCK_ID     = $StockID
  and F.GRANT_NBR    = $GrantNbr
  and F.EXERCISE_NBR = #ExerciseNbr
  and F.RELEASE_NBR  = #ReleaseNbr
  and F.SWAP_SOURCE  = 'C'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Legend
! Descr:   Retrieves the Branch's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Legend

Begin-Select

G.LEGEND_ID
H.COMMENTS

  let $LegendYes    = 'Y'
  let $LegendID     = rtrim(&g.legend_id,' ')
  let $LegendDescr  = rtrim(&h.comments,' ')
  do Populate-Legend-Array

  if $Legend = ''
    let $Legend = $LegendID
  else  
    let $Legend = $Legend || ',' || $LegendID
  end-if

from PS_ST_REL_LEGEND G,
     PS_STOCK_LEGEND   H
where G.EMPLID       = $EmplID
  and G.STOCK_ID     = $StockID
  and G.GRANT_NBR    = $GrantNbr
  and G.EXERCISE_NBR = #ExerciseNbr
  and G.RELEASE_NBR  = #ReleaseNbr
  and G.ISSUANCE_NBR = #IssueNbr
  and G.STOCK_ID     = H.STOCK_ID
  and G.LEGEND_ID    = H.LEGEND_ID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Legend-Array
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Populate-Legend-Array

  if #LegendCount = 1
    put $LegendID $LegendDescr into Legend(1) LegendID LegendDescr
    add 1 to #LegendCount
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #LegendCount
      get $ArrayLegendID from Legend(#Row) LegendID
      if $LegendID = $ArrayLegendID
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $LegendID $LegendDescr into Legend(#LegendCount) LegendID LegendDescr
      add 1 to #LegendCount
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail-Rel
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail-Rel

  do Format-DateTime($ReleaseDt, $DateOut, {DEFDATE}, '', '')
  print $DateOut                                           (+1,001,013)
  print $Name                                              (  ,016,025)
  print $StockPlan                                         (  ,107,011)
  print #SharesRel                                         (  ,120,018) edit 999,999,999.999999
  print #SharesSwap                                        (  ,140,018) edit 999,999,999.999999
  do Populate-Arrays
  print #SharesIssue                                       (  ,160,018) edit 999,999,999.999999
  print $BranchName                                        (  ,080,025)

  if $IssueType = 'B'
    print $BrokerName                                      (  ,043,035)
    print $NationalID                                      (+1,016,025)
    print $RegName                                         (  ,043,035)
    print $IssueAcctNbr                                    (  ,080,025)
    print $OptionType                                      (  ,107,011)
  end-if

  if $IssueType = 'E'
    print $EscrowName                                      (  ,043,035)
    print $NationalID                                      (+1,016,025)
    print $RegName                                         (  ,043,035)
    print $IssueAcctNbr                                    (  ,080,025)
    print $OptionType                                      (  ,107,011)
  end-if

  if $IssueType = 'C'
    print $RegName                                         (  ,043,035)
    print $NationalID                                      (+1,016,025)
    print $IssueAcctNbr                                    (  ,080,025)
    print $OptionType                                      (  ,107,011)
  end-if

  print $Emplid                                            (+1,016,010)
  print $InsiderType                                       (  ,029,011)
  if $IssueAddress1 <> ''
    print $IssueAddress1                                   (  ,043,035)
    print ''                                               (+1,000,   )
  end-if
  if $IssueAddress2 <> ''
    print $IssueAddress2                                   (  ,043,035)
    print ''                                               (+1,000,   )
  end-if
  if $IssueCityZip <> ''
    print $IssueCityZip                                    (  ,043,035)
  end-if

  print ''                                                 (+2,000,   )

  let #SubRel     = #SubRel     + #SharesRel
  let #SubSwap    = #SubSwap    + #SharesSwap
  let #SubIssue   = #SubIssue   + #SharesIssue
  let #TotalRel   = #TotalRel   + #SharesRel
  let #TotalSwap  = #TotalSwap  + #SharesSwap
  let #TotalIssue = #TotalIssue + #SharesIssue
  let $Legend     = ''

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail-Issue
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail-Issue

  do Populate-Arrays
  print #SharesIssue                                       (  ,160,018) edit 999,999,999.999999
  print $BranchName                                        (  ,080,025)
  if $IssueType = 'B'
    print $BrokerName                                      (  ,043,035)
    print $RegName                                         (+1,043,035)
    print $IssueAcctNbr                                    (  ,080,025)
    print ''                                               (+1,000,   )
  else
    print $RegName                                         (  ,043,035)
    print $IssueAcctNbr                                    (+1,080,025)
    if $IssueType = 'E'
      print $EscrowName                                    (  ,043,035)
      print ''                                             (+1,000,   )
    end-if
  end-if

  if $IssueAddress1 <> ''
    print $IssueAddress1                                   (  ,043,035)
    print ''                                               (+1,000,   )
  end-if
  if $IssueAddress2 <> ''
    print $IssueAddress2                                   (  ,043,035)
    print ''                                               (+1,000,   )
  end-if
  if $IssueCityZip <> ''
    print $IssueCityZip                                    (  ,043,035)
  end-if

  print ''                                                 (+2,000,   )
  let #SubIssue   = #SubIssue   + #SharesIssue
  let #TotalIssue = #TotalIssue + #SharesIssue
  let $Legend     = ''

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Insider-Status
!----------------------------------------------------------------------

  let $TypeOfficer = ' '
  let $TypeRepPerson = ' '
  let $TypeDirector = ' '
  let $TypeCompInsider = ' '
  let $TypeBenOwner = ' '
  let $InsiderType = ' '

Begin-Select

P.ST_OFFICER
P.ST_DIRECTOR
P.COMPANY_INSIDER
P.REPORTING_PERSON
P.ST_BEN_OWNER

  if &p.st_officer = 'Y'
    let $TypeOfficer = 'O'
    let $OfficerType = $TypeOfficer || ','
    concat $OfficerType with $InsiderType
  end-if

  if &p.st_director = 'Y'
    let $TypeDirector = 'D'
    let $DirectorType = $TypeDirector || ','
    concat $DirectorType with $InsiderType
  end-if

  if &p.company_insider = 'Y'
    let $TypeCompInsider = 'I'
    let $CompInsiderType = $TypeCompInsider || ','
    concat $CompInsiderType with $InsiderType
  end-if

  if &p.reporting_person = 'Y'
    let $TypeRepPerson = 'R'
    let $RepPersonType = $TypeRepPerson || ','
    concat $RepPersonType with $InsiderType
  end-if

  if &p.st_ben_owner = 'Y'
    let $TypeBenOwner = 'B'
    concat $TypeBenOwner with $InsiderType
  end-if
   
from  PS_ST_INSIDER_TBL P
where P.EMPLID   = $EmplID
  and P.STOCK_ID = $StockID 
  and P.EFFDT    = (select Max(EFFDT)
                     from PS_ST_INSIDER_TBL
                    where EMPLID    = P.EMPLID
                      and STOCK_ID  = P.STOCK_ID)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan #SharesRel #SharesSwap #SharesIssue into StockPlan(1) StockPlan SharesRel SharesWith SharesIssue
    add 1 to #PlanCount
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $ArrayPlan from StockPlan(#Row) StockPlan 
      if $StockPlan = $ArrayPlan
        array-add #SharesRel #SharesSwap #SharesIssue to StockPlan(#Row) SharesRel SharesWith SharesIssue
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesRel #SharesSwap #SharesIssue into StockPlan(#PlanCount) StockPlan SharesRel SharesWith SharesIssue
      add 1 to #PlanCount
    end-if
  end-if

  if $BrokerID <> '' and $BranchID <> ''
    if #BrokerCount = 1
      put $BrokerID $BranchID $BranchName #SharesIssue into BrokerBranch(1) BrokerID BranchID BranchName SharesIssue
      add 1 to #BrokerCount
    else
      let #Row = 1
      let $Flag = 'N'
      while #Row < #BrokerCount
        get $ArrayBrokerID $ArrayBranchID from BrokerBranch(#Row) BrokerID BranchID
        if $ArrayBrokerID = $BrokerID and $ArrayBranchID = $BranchID
          array-add #SharesIssue to BrokerBranch(#Row) SharesIssue
          let $Flag = 'Y'
          break
        end-if
        add 1 to #Row
      end-while
      if $Flag <> 'Y'
        put $BrokerID $BranchID $BranchName #SharesIssue into BrokerBranch(#BrokerCount) BrokerID BranchID BranchName SharesIssue
        add 1 to #BrokerCount
      end-if
    end-if
  end-if

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Print-Sub-Totals
!--------------------------------------------------------------------

  let $SubTotalLbl = $IssuanceTypeLbl || ' ' || $TotalLbl

  print '-'                                                (+1,001,177) fill
  print $SubTotalLbl                                       (+1,100,   )
  print ':'                                                (  ,   ,001)
  print #SubRel                                            (  ,120,018) edit 999,999,999.999999
  print #SubSwap                                           (  ,140,018) edit 999,999,999.999999
  print #SubIssue                                          (  ,160,018) edit 999,999,999.999999
  print '-'                                                (+1,001,177) fill
  new-page
  let #SubRel   = 0
  let #SubSwap  = 0
  let #SubIssue = 0

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Totals
!-----------------------------------------------------------------------

  add 1 to #page_number
  print '-'                                                (+2,001,177) fill
  print $TotalLbl                                          (+1,100,005)
  print ':'                                                (  ,   ,001)
  print #TotalRel                                          (  ,120,018) edit 999,999,999.999999
  print #TotalSwap                                         (  ,140,018) edit 999,999,999.999999
  print #TotalIssue                                        (  ,160,018) edit 999,999,999.999999
  print '-'                                                (+1,001,177) fill

  do Print-Footer

End-Procedure Print-Totals

!--------------------------------------------------------------------
Begin-Procedure Print-Footer
!--------------------------------------------------------------------

  if #PlanCount > 1
    print $SumPlanLbl                                      (+2,100,020) underline
    let #Row = 1
    while #Row < #PlanCount
      get $StockPlan #SharesRel #SharesSwap #SharesIssue from StockPlan(#Row) StockPlan SharesRel SharesWith SharesIssue
      print $StockPlan                                     (+1,100,010)
      print #SharesRel                                     (  ,120,018) edit 999,999,999.999999
      print #SharesSwap                                    (  ,140,018) edit 999,999,999.999999
      print #SharesIssue                                   (  ,160,018) edit 999,999,999.999999
      add 1 to #Row
    end-while
  end-if

  if #BrokerCount > 1
    print $DwacSummaryLbl                                  (+2,100,032) underline
    print $DtcLbl                                          (  ,141,004) underline
    let #Row = 1
    while #Row < #BrokerCount
      get $BrokerID $BranchName #SharesIssue from BrokerBranch(#Row) BrokerID BranchName SharesIssue
      do Get-Broker-Dtc
      print $BranchName                                    (+1,100,030)
      print $DtcAccountNbr                                 (  ,141,010)
      print #SharesIssue                                   (  ,160,018) edit 999,999,999.999999
      add 1 to #Row
    end-while
  end-if

  if #LegendCount > 1
    print $LegendIdKeyLbl                                  (+2,001,013) underline
    let #Row = 1
    while #Row < #LegendCount
      get $LegendID $LegendDescr from Legend(#Row) LegendID LegendDescr
      print $LegendID                                       (+1,001,010)
      print $LegendDescr                                    (  ,020,   )
      add 1 to #Row
    end-while
  end-if

  print $Comments               (+3,005) Wrap 105 4
  print '_'                     (+3,005,040) fill
  print $AuthSignLbl            (+1,005,020)
  print $DateLbl                (  ,042,004)

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Broker-Dtc
! Descr:   Retrieves the Broker's DTC Number
!-----------------------------------------------------------------------
Begin-Procedure Get-Broker-Dtc

  let $DtcAccountNbr = ''

Begin-Select

ST_BROKER_TBL.DTC_ACCOUNT_NBR

  let $DtcAccountNbr = rtrim(&st_broker_tbl.dtc_account_nbr,' ')

from PS_ST_BROKER_TBL ST_BROKER_TBL
where ST_BROKER_TBL.ST_BROKERAGE_ID = $BrokerID

End-Select

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Transfer-Issue-Date
!--------------------------------------------------------------------
Begin-SQL

update PS_ST_EXER_RELEASE
  set TRANSFER_ISSUE_DT = $AsOfToday
where STOCK_ID = $StockID
[$WhereUpdateEmplid]
[$WhereUpdateRelDateFrom]
[$WhereUpdateRelDateThru]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]

End-SQL

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Control-No
!--------------------------------------------------------------------

Begin-SQL

update PS_ST_EXER_RELEASE
  set TRANSFER_CNTL_NBR = #MaxControlNbr,
  TRANSFER_ISSUE_DT     = $AsOfToday
where STOCK_ID = $StockID
[$WhereUpdateEmplid]
[$WhereUpdateRelDateFrom]
[$WhereUpdateRelDateThru]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]
 
End-SQL

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Last-Control-No
!--------------------------------------------------------------------
Begin-SQL

update PS_STOCK_AGENT
  set LAST_CONTROL_NBR = #MaxControlNbr
where STOCK_ID     = $StockID
  and ST_AGENCY_ID = $TransferAgentID

End-SQL

End-Procedure

!--------------------------------------------------------------------
!SQC Include Files
!--------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer Procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime Procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'getrplng.sqc'   ! Gets the report language
