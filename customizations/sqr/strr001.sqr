!-----------------------------------------------------------------------
! Report Name: STRR001.SQR - Potential Diluted Options Outstanding
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:55:25                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: 
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Emplid, From Date, Thru Date
! Options:       None
! Tables:        RUN_CNTL_ST
! Sorts:
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
Begin-Report
!-----------------------------------------------------------------------

  do Init-Report
  do Process-Main
  do Delete-Temp-Files
  do Reset
  do Successful-EOJ

  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

end-report

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 10

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)
  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center
  print $GroupIdLbl                                        (+1,001,008)
  print ':'                                                (  ,   ,001)
  print $GroupId                                           (  , +3,010)
  print $DaysPeriodLbl                                     (  ,080,014)
  print ':'                                                (  ,   ,001)
  print #DaysTotal                                         (  , +1,004) edit 9999
  print $DistribLbl                                        (+1,001,020)
  print ':'                                                (  ,   ,001)
  print $AccountDistribXlat                                (  , +3,014)
  print $AverageFmvLbl                                     (  ,078,011)
  print ':'                                                (  ,   ,001)
  print #AverageFMV                                        (  , +1,012) edit $9999.999999
  print $TaxRateLbl                                        (+1,001,008)
  print ':'                                                (  ,   ,001)
  print #TaxRate                                           (  , +1,009) edit 99.999999
  print '%'                                                (  ,   ,001)

  print $WeightedLbl                                       (+2,084,008)
  print $TotalLbl                                          (  ,103,005)
  print ''                                                 (  ,107,012)
  print $BuyBackSharesLbl                                  (  ,110,052) bold underline
  print $DilutedLbl                                        (  ,173,007)

  print $GrantLbl                                          (+1,001,010)
  print $OptionLbl                                         (  ,012,006)
  print $GrantLbl                                          (  ,024,005)
  print $TransactionLbl                                    (  ,030,011)
  print $TransactionLbl                                    (  ,042,011)
  print $SharesLbl                                         (  ,061,006)
  print $DaysInLbl                                         (  ,068,007)
  print $SharesLbl                                         (  ,086,006)
  print $WeightedLbl                                       (  ,100,008)
  print $ExerciseLbl                                       (  ,118,008)
  print $UnamortizedLbl                                    (  ,133,011)
  print $TaxLbl                                            (  ,159,003)
  print $SharesLbl                                         (  ,174,006)

  print $NumberLbl                                         (+1,001,010)
  print $TypeLbl                                           (  ,012,004)
  print $PriceLbl                                          (  ,024,010)
  print $DateLbl                                           (  ,030,011)
  print $TypeLbl                                           (  ,042,011)
  print $OutstandingLbl                                    (  ,056,011)
  print $PeriodLbl                                         (  ,069,006)
  print $OutstandingLbl                                    (  ,081,011)
  print $PriceLbl                                          (  ,103,005)
  print $ProceedsLbl                                       (  ,118,008)
  print $ExpenseLbl                                        (  ,137,007)
  print $BenefitLbl                                        (  ,155,007)
  print $OutstandingLbl                                    (  ,169,011)

  print '-'                                                (+1,001,179) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STRR001'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
  else
    let #Instance = to_number($prcs_process_instance)
    do Get-SQR-Parms
  end-if

  do Init-Variables
  let $CurrentTime = DateNow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$Language_Cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK'  ,'STOCK_ID',          $StockIdLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'FROM',              $FromLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'THRU',              $ThruLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'GRANT',             $GrantLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'NUMBER',            $NumberLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'DATE',              $DateLbl,            #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES',            $SharesLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'VALUE',             $ValueLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'TOTAL',             $TotalLbl,           #DW)

  do Get_Field_Information ('STRR001','STRR001',           $ReportTitle,        #DW)
  do Get_Field_Information ('STRR001','ST_TAX_RT',         $TaxRateLbl,         #DW)
  do Get_Field_Information ('STRR001','DAYS_IN_PERIOD',    $DaysPeriodLbl,      #DW)
  do Get_Field_Information ('STRR001','AVERAGE_FMV',       $AverageFmvLbl,      #DW)
  do Get_Field_Information ('STRR001','TRANSACTION',       $TransactionLbl,     #DW)
  do Get_Field_Information ('STRR001','OPTION',            $OptionLbl,          #DW)
  do Get_Field_Information ('STRR001','TYPE',              $TypeLbl,            #DW)
  do Get_Field_Information ('STRR001','OUTSTANDING',       $OutstandingLbl,     #DW)
  do Get_Field_Information ('STRR001','DAYS_IN',           $DaysInLbl,          #DW)
  do Get_Field_Information ('STRR001','PERIOD',            $PeriodLbl,          #DW)
  do Get_Field_Information ('STRR001','PRICE',             $PriceLbl,           #DW)
  do Get_Field_Information ('STRR001','WEIGHT',            $WeightedLbl,        #DW)
  do Get_Field_Information ('STRR001','IN_THE_MONEY',      $InTheMoneyLbl,      #DW)
  do Get_Field_Information ('STRR001','GAIN',              $GainLbl,            #DW)
  do Get_Field_Information ('STRR001','BUYBACK',           $BuybackLbl,         #DW)
  do Get_Field_Information ('STRR001','TAX',               $TaxLbl,             #DW)
  do Get_Field_Information ('STRR001','TAX_RT',            $TaxRateLbl,         #DW)
  do Get_Field_Information ('STRR001','BENEFIT',           $BenefitLbl,         #DW)
  do Get_Field_Information ('STRR001','DILUTED',           $DilutedLbl,         #DW)
  do Get_Field_Information ('STRR001','DILUTIVE',          $DilutiveLbl,        #DW)
  do Get_Field_Information ('STRR001','ANTI_DILUTIVE',     $AntiDilutiveLbl,    #DW)
  do Get_Field_Information ('STRR001','SECURITIES',        $SecuritiesLbl,      #DW)
  do Get_Field_Information ('STRR001','EXERCISE',          $ExerciseLbl,        #DW)
  do Get_Field_Information ('STRR001','EXPIRE',            $ExpireLbl,          #DW)
  do Get_Field_Information ('STRR001','CANCEL',            $CancelLbl,          #DW)
  do Get_Field_Information ('STRR001','TOT_WGHT_OUTSTAND', $TotWghtOutstandLbl, #DW)
  do Get_Field_Information ('STRR001','TOT_WGHT_PRICE',    $TotWghtPriceLbl,    #DW)
  do Get_Field_Information ('STRR001','TOT_WGHT_DILUTE',   $TotWghtDiluteLbl,   #DW)
  do Get_Field_Information ('STRR001','TOT_DILUTE_BUYBACK',$TotDiluteBBLbl,     #DW)
  do Get_Field_Information ('STRR001','TOT_DILUTE_OUT',    $TotDiluteOutLbl,    #DW)
  do Get_Field_Information ('STRR001','GROUP_ID',          $GroupIdLbl,         #DW)
  do Get_Field_Information ('STRR001','ACCOUNT_DISTRIB',   $DistribLbl,         #DW)
  do Get_Field_Information ('STRR001','PROCEEDS',          $ProceedsLbl,        #DW)
  do Get_Field_Information ('STRR001','UNAMORTIZED',       $UnamortizedLbl,     #DW)
  do Get_Field_Information ('STRR001','EXPENSE',           $ExpenseLbl,         #DW)
  do Get_Field_Information ('STRR001','TOT_WGHT_ANTI_OUT', $TotWghtAntiLbl,     #DW)
  do Get_Field_Information ('STRR001','TOT_UNAMOR_EXPENSE',$TotUnamorExpenseLbl,#DW)
  do Get_Field_Information ('STRR001','TOT_TAX_BENEFIT',   $TotTaxBenefitLbl,   #DW)
  do Get_Field_Information ('STRR001','BUYBACK_SHARES',    $BuyBackSharesLbl,   #DW)
  do Get_Field_Information ('STRR001','TOT_ANTI_DILUTE',   $TotAntiDiluteLbl,   #DW)
  do Get_Field_Information ('STRR001','TOT_DILUTE',        $TotDiluteLbl,       #DW)

  let $BuyBackSharesLbl = '                   ' || $BuyBackSharesLbl || '                   '

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId          = rtrim($RC_STOCK_ID,' ')
  let $RC_FromDate      = rtrim($RC_FromDate,' ')
  let $RC_ThruDate      = rtrim($RC_ThruDate,' ')
  do Convert-To-DTU-Date($RC_FromDate,$FromDate)
  do Convert-To-DTU-Date($RC_ThruDate,$ThruDate)
  do Format-DateTime ($RC_FromDate,$FromDateCmp,{DEFCMP},'','')
  do Format-DateTime ($RC_ThruDate,$ThruDateCmp,{DEFCMP},'','')
  let $GroupId          = rtrim($RC_ST_GROUP_ID,' ')
  let $AccountDistrib   = rtrim($RC_ST_ACCOUNT_DISTRIB,' ')
  let #TaxRate          = #RC_ST_TAX_RT
  let $SuppressDetails  = rtrim($RC_ST_SUPPR_DTLS,' ')
  do dtu-diff-days($Fromdate,$Thrudate,#DaysTotal)
  let #DaysTotal        = #DaysTotal + 1
  let #FmvCount         = 0
  let #Count            = 0
  let #PrintCount       = 0
  do Create-Array

  move $AccountDistrib to $FieldValue
  move 'ST_ACCOUNT_DISTRIB' to $Fieldname
  do Read-Translate-Table
  let $AccountDistribXlat = rtrim($Xlatlongname,' ')

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = Expire             -
               size  = 50                 -
               field = ExpireDt:char      -
               field = Outstanding:number

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Process-Main
! Descr:     This is where all required data is selected
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

! Build the temporary table ST_STRR001_TBL

  do Get-Fmv-Price
  if #FmvCount > 0
    let #AverageFMV = #TotalFmvPrice / #FmvCount

    do Select-Vesting-Info
    do Get-Shares-Exercised
    do Process-Shares-Exercised
    do Select-Grants
    do Print-Report-Totals
  end-if

End-Procedure Process-Main

!-----------------------------------------------------------------------
! Procedure: Select-Vesting-Info
! Descr:     Selects values to insert into ST_STRR001_TBL.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting-Info

Begin-Select

XB.EMPLID
XB.GRANT_NBR
XC.VEST_DT
XC.SHARES_VESTED
XC.EXPIRATN_DT
XC.TERM_EXPIRATN_DT
XB.ST_CANCEL_REASON
XB.ST_CANCEL_DT

  let $MSCancelDt  = rtrim(&xb.st_cancel_dt,' ')
  let $MSTermExpDt = rtrim(&xc.term_expiratn_dt,' ')
  do Insert-Vesting-Info

from PS_ST_STRR001_TAO  XA,
     PS_ST_GRANT        XB,
     PS_ST_GRNT_VST_DTL XC
where XA.STOCK_ID    = $StockId
  and XA.OPRID       = $Prcs_Oprid
  and XA.RUN_CNTL_ID = $Prcs_Run_cntl_ID
  and XA.EMPLID      = XB.EMPLID
  and XA.STOCK_ID    = XB.STOCK_ID
  and XA.GRANT_NBR   = XB.GRANT_NBR
  and XA.EMPLID      = XC.EMPLID
  and XA.STOCK_ID    = XC.STOCK_ID
  and XA.GRANT_NBR   = XC.GRANT_NBR
  and XC.VEST_EFFDT  = (select MAX(VEST_EFFDT)
                         from PS_ST_GRNT_VST_DTL
                        where EMPLID      = XC.EMPLID
                          and STOCK_ID    = XC.STOCK_ID
                          and GRANT_NBR   = XC.GRANT_NBR
                          and VEST_EFFDT <= $AsOfToday)
  and XC.SEQ_NUM     = (select MAX(SEQ_NUM)
                         from PS_ST_GRNT_VST_DTL
                        where EMPLID      = XC.EMPLID
                          and STOCK_ID    = XC.STOCK_ID
                          and GRANT_NBR   = XC.GRANT_NBR
                          and VEST_EFFDT  = XC.VEST_EFFDT )
End-Select

End-Procedure Select-Vesting-Info

!-----------------------------------------------------------------------
! Procedure: Insert-Vesting-Info
! Descr:     Inserts vesting info into a temp table as the first step in creating
!            the vesting schedule.  CurrentTime and Instance are used to 
!            eliminate the chance of data being accessed by two different runs
!            of the report at the same time.
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting-Info

  let $Procedure = 'Insert-Vesting-Temp'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql     on-error = SQL-Error

INSERT into PS_ST_STRR001_TBL

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED
,SHARES_EXERCISED
,EXPIRATN_DT
,TERM_EXPIRATN_DT
,ST_CANCEL_REASON
,ST_CANCEL_DT)
VALUES
($CurrentTime
,#Instance
,&xb.emplid
,&xb.grant_nbr
,&xc.vest_dt
,&xc.shares_vested
,0
,&xc.expiratn_dt,

! Workaround for TPRD T-MLEAN-Q54CT
#ifdef MICROSOFT
   $MSTermExpDt
  ,&xb.st_cancel_reason
  ,$MSCancelDt)
#else
   &xc.term_expiratn_dt
  ,&xb.st_cancel_reason
  ,&xb.st_cancel_dt)
#endif

End-Sql

End-Procedure Insert-Vesting-Info

!-----------------------------------------------------------------------
! Procedure: Get-Shares-Exercised
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Exercised

Begin-Select

XD.EMPLID
XD.STOCK_ID
XD.GRANT_NBR
XE.VEST_DT
SUM(XD.SHARES_EXERCISED) &SumExer

  do Update-Shares-ExercisedA

from PS_ST_GRANT_EXER  XD,
     PS_ST_STRR001_TBL XE
where XD.EMPLID          = XE.EMPLID
  and XD.GRANT_NBR       = XE.GRANT_NBR
  and XD.EXERCISE_STATUS = 'A'
  and XD.STOCK_ID        = $StockId
  and XD.EXERCISE_DT    <= $RC_ThruDate
  and XE.DATETIME_STAMP  = $CurrentTime
  and XE.PROCESSINSTANCE = #Instance
  and XE.VEST_DT         = (select MIN(VEST_DT)
                            from  PS_ST_STRR001_TBL
                            where EMPLID           = XD.EMPLID
                              and GRANT_NBR        = XD.GRANT_NBR
                              and DATETIME_STAMP   = $CurrentTime
                              and PROCESSINSTANCE  = #Instance
                              and (XD.EXERCISE_DT  < EXPIRATN_DT
                              and (XD.EXERCISE_DT  < TERM_EXPIRATN_DT
                               or TERM_EXPIRATN_DT is null)))
group by XD.EMPLID,XD.STOCK_ID,XD.GRANT_NBR,XE.VEST_DT

End-Select

End-Procedure Get-Shares-Exercised

!-----------------------------------------------------------------------
! Procedure: Update-Shares-ExercisedA
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedA

  let $Procedure = 'Update-Shares-ExercisedA'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql     on-error = SQL-Error

update PS_ST_STRR001_TBL
  set SHARES_EXERCISED = &SumExer
where EMPLID           = &xd.emplid
  and GRANT_NBR        = &xd.grant_nbr
  and VEST_DT          = &xe.vest_dt
  and DATETIME_STAMP   = $CurrentTime
  and PROCESSINSTANCE  = #Instance

End-Sql

End-Procedure Update-Shares-ExercisedA

!-----------------------------------------------------------------------
! Procedure: Process-Shares-Exercised
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Process-Shares-Exercised

  create-array name =Exer
               size =50
               field=VestDt:char
               field=Vest:number
               field=Exer:number

  let #x = 0

Begin-Select
XF.EMPLID       () on-break print=never level=1 procedure=Update-Shares-ExercisedB   save=$OldEmp
XF.GRANT_NBR    () on-break print=never level=1 procedure=Update-Shares-ExercisedB   save=$OldGrant
XF.VEST_DT
XF.SHARES_VESTED
XF.SHARES_EXERCISED

  put &xf.vest_dt &xf.shares_vested &xf.shares_exercised into EXER(#x) VestDt Vest Exer
  add 1 to #x

from PS_ST_STRR001_TBL XF
where XF.DATETIME_STAMP  = $CurrentTime
  and XF.PROCESSINSTANCE = #Instance
order by XF.EMPLID,XF.GRANT_NBR,XF.VEST_DT

End-Select

  do Update-Shares-ExercisedB    !to process last on-break

End-Procedure Process-Shares-Exercised

!-----------------------------------------------------------------------
! Procedure: Update-Shares-ExercisedB
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedB

  let #TotalRow  = 0
  let #Remainder = 0

  while #totalRow <= #x         !to run thru all elements
    get $VestDtArray #ShrVestArray #ShrExerArray from Exer(#totalRow) VestDt Vest Exer
    let #ShareToExer = #ShrExerArray + #Remainder
    if #ShareToExer > #ShrVestArray
      let #UpdateExer  = #ShrVestArray
      let #Remainder   = #ShareToExer  - #ShrVestArray
      do Update-Shares-ExercisedC
    else
      if #Remainder > #ShrExerArray
        let #UpdateExer = #Remainder
        do Update-Shares-ExercisedC
        let #Remainder = 0
      end-if
    end-if
    add 1 to #totalRow
  end-while

  clear-array  name=Exer
  let #x = 0

End-Procedure Update-Shares-ExercisedB

!-----------------------------------------------------------------------
! Procedure: Update-Shares-ExercisedC
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedC

  let $Procedure     = 'Update-Shares-ExercisedC'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error

update PS_ST_STRR001_TBL
  set SHARES_EXERCISED = #UpdateExer
where EMPLID           = $OldEmp
  and GRANT_NBR        = $OldGrant
  and VEST_DT          = $VestDtArray
  and DATETIME_STAMP   = $CurrentTime
  and PROCESSINSTANCE  = #Instance

End-Sql

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Delete-Temp-Files
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Delete-Temp-Files

  let $Procedure = 'Delete-Temp-Files'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error

 delete from PS_ST_STRR001_TBL
 where DATETIME_STAMP  = $CurrentTime
   and PROCESSINSTANCE = #Instance

End-Sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Fmv-Price
! Descr:   Retrieve the info to be passed to the FMV function
!-----------------------------------------------------------------------
Begin-Procedure Get-Fmv-Price

Begin-Select

A.ST_FMV_DT
B.FMV_METHOD
B.FMV_HOLIDAY_RULE
B.FMV_WEEKEND_RULE

  let $FmvDate       = rtrim(&a.st_fmv_dt, ' ')
  let $FmvMethod     = rtrim(&b.fmv_method, ' ')
  let $HolidayRule   = rtrim(&b.fmv_holiday_rule, ' ')
  let $WeekendRule   = rtrim(&b.fmv_weekend_rule, ' ')
  do Get_FMV_Prices ($FmvMethod,$StockId,$FmvDate,$HolidayRule,$WeekendRule,#FmvPrice)
 
  let #FmvCount      = #FmvCount      + 1
  let #TotalFmvPrice = #TotalFmvPrice + #FmvPrice

from  PS_ST_DAILY_PRICES A,
      PS_STOCK_DTL       B
where A.STOCK_ID    = $StockId
  and A.STOCK_ID    = B.STOCK_ID
  and A.ST_FMV_DT  >= $RC_FromDate
  and A.ST_FMV_DT  <= $RC_ThruDate
  and A.ST_DAY_TYPE = 'TRD'
  and B.EFFDT    = (select MAX(EFFDT)
                       from PS_STOCK_DTL
                      where STOCK_ID  = B.STOCK_ID
                        and EFFDT    <= A.ST_FMV_DT )
  
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure:  Select-Grants
! Descr:      Selects all active grants that were granted prior to or
!             on the ThruDate.
!-----------------------------------------------------------------------
Begin-Procedure Select-Grants

Begin-Select

F.EMPLID
F.GRANT_NBR
F.ST_OPTION_TYPE
F.GRANT_DT
F.SHARES_GRANTED
F.GRANT_PRICE
F.ST_CANCEL_DT
F.ST_CANCEL_REASON
F.STOCK_PLAN

  let $Emplid        = rtrim(&f.emplid,' ')
  let $GrantNbr      = rtrim(&f.grant_nbr,' ')
  let $OptionType    = rtrim(&f.st_option_type,' ')
  let $GrantDt       = rtrim(&f.grant_dt,' ')
  let #SharesGranted = &f.shares_granted
  let #GrantPrice    = &f.grant_price
  let $CancelDt      = rtrim(&f.st_cancel_dt,' ')
  let $CancelReason  = rtrim(&f.st_cancel_reason,' ')
  let $StockPlan     = rtrim(&f.stock_plan,' ')
  let #x             = 0
  let #Count         = 0
  let #PrintCount    = 0

  do Get-Outstanding-Shares
  if #SharesOutstanding > 0
    let $TransactionDt   = $GrantDt
    do Print-Detail
  end-if

  do Get-Exercised-Shares

  do Format-DateTime ($CancelDt, $CancelDtCmp,  {DEFCMP}, '', '')
  if $CancelDtCmp >= $FromDateCmp
    and $CancelDtCmp <= $ThruDateCmp
    evaluate $CancelReason
      when = 'RPRC'
      when = 'RESC'
        do Get-Cancel-Reprice
        if #SharesOutstanding > 0
          let $TransactionDt    = $CancelDt
          do Print-Detail
        end-if
        do Get-Expired-Reprice
        while #Count <= #x
          get $TransactionDt #SharesOutstanding from EXPIRE(#Count) ExpireDt Outstanding
          if #SharesOutstanding > 0
            do Print-Detail
          end-if
          add 1 to #Count
        end-while
        break
      when-other
        do Get-Cancel
        if #SharesOutstanding > 0
          let $TransactionDt   = $CancelDt
          do Print-Detail
        end-if
        do Get-Expire
        while #Count <= #x
          get $TransactionDt #SharesOutstanding from EXPIRE(#Count) ExpireDt Outstanding
          if #SharesOutstanding > 0
            do Print-Detail
          end-if
          add 1 to #Count
        end-while
        break
    end-evaluate
  else
    do Get-Expire
    while #Count <= #x
      get $TransactionDt #SharesOutstanding from EXPIRE(#Count) ExpireDt Outstanding
      if #SharesOutstanding > 0
        do Print-Detail
      end-if
      add 1 to #Count
    end-while
  end-if

  if #GrantOutstanding > 0
    do Print-Grant-Totals
  else
    let #GrantOutstanding         = 0
    let #GrantWeightedOutstanding = 0
    let #GrantWeightedPrice       = 0
    let #GrantExerProceeds        = 0
    let #GrantUnamortized         = 0
    let #GrantTaxShares           = 0
    let #GrantDilutive            = 0
  end-if
  clear-array  name=EXPIRE

from  PS_ST_GRANT F
where F.STOCK_ID      = $StockId
  and F.GRANT_STATUS  = 'A'
  and F.GRANT_DT     <= $RC_ThruDate
 order by F.GRANT_NBR

End-Select

End-Procedure Select-Grants

!-----------------------------------------------------------------------
! Procedure:  Get-Outstanding-Shares
! Descr:      Selects all shares the were Granted for the entire
!             period
!-----------------------------------------------------------------------
Begin-Procedure Get-Outstanding-Shares

  let #SharesOutstanding = 0
  let $TransactionType   = $GrantLbl

Begin-Select

G.SHARES_VESTED
G.SHARES_EXERCISED

  let #SharesOutstanding  = #SharesOutstanding + ( &g.shares_vested - &g.shares_exercised )

from  PS_ST_STRR001_TBL G
where G.DATETIME_STAMP     = $CurrentTime
  and G.PROCESSINSTANCE    = #Instance
  and G.EMPLID             = $Emplid
  and G.GRANT_NBR          = $GrantNbr
  and G.SHARES_VESTED      > G.SHARES_EXERCISED
  and (G.ST_CANCEL_DT      > $RC_ThruDate
   or (G.ST_CANCEL_DT     <= $RC_ThruDate
  and G.VEST_DT           <= $RC_ThruDate
  and G.VEST_DT            < G.ST_CANCEL_DT
  and G.ST_CANCEL_REASON  <> 'RPRC'
  and G.ST_CANCEL_REASON  <> 'RESC')
   or G.ST_CANCEL_DT      is null)
  and G.EXPIRATN_DT        > $RC_ThruDate
  and (G.TERM_EXPIRATN_DT  > $RC_ThruDate
   or G.TERM_EXPIRATN_DT  is null)

End-Select

End-Procedure Get-Outstanding-Shares

!-----------------------------------------------------------------------
! Procedure:  Get-Exercised-Shares
! Descr:      Selects all shares the were exercised during the period.
!-----------------------------------------------------------------------
Begin-Procedure Get-Exercised-Shares

  let #SharesOutstanding = 0
  let $TransactionType   = $ExerciseLbl

Begin-Select

H.SHARES_EXERCISED
H.EXERCISE_DT

  let #SharesOutstanding = &h.shares_exercised
  let $TransactionDt    = rtrim(&h.exercise_dt,' ')
  do Print-Detail

from  PS_ST_GRANT_EXER H
where H.EMPLID             = $Emplid
  and H.STOCK_ID           = $StockId
  and H.GRANT_NBR          = $GrantNbr
  and H.EXERCISE_DT       <= $RC_ThruDate
  and H.EXERCISE_DT       >= $RC_FromDate
  and H.EXERCISE_STATUS    = 'A'

End-Select

End-Procedure Get-Exercised-Shares

!-----------------------------------------------------------------------
! Procedure: Get-Cancel
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Cancel

  let #SharesOutstanding = 0
  let $TransactionType   = $CancelLbl

Begin-Select

I.SHARES_VESTED
I.SHARES_EXERCISED

  let #SharesOutstanding  = #SharesOutstanding + ( &i.shares_vested - &i.shares_exercised )

from PS_ST_STRR001_TBL I
where I.DATETIME_STAMP  = $CurrentTime
  and I.PROCESSINSTANCE = #Instance
  and I.EMPLID          = $Emplid
  and I.GRANT_NBR       = $GrantNbr
  and I.SHARES_VESTED   > I.SHARES_EXERCISED
  and I.ST_CANCEL_DT   <= I.VEST_DT
  and I.ST_CANCEL_DT   <= $RC_ThruDate
  and I.ST_CANCEL_DT   >= $RC_FromDate

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Cancel-Reprice
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Cancel-Reprice

  let #SharesOutstanding = 0
  let $TransactionType   = $CancelLbl

Begin-Select

J.SHARES_VESTED
J.SHARES_EXERCISED

  let #SharesOutstanding  = #SharesOutstanding + ( &j.shares_vested - &j.shares_exercised )

from PS_ST_STRR001_TBL   J
where J.DATETIME_STAMP    = $CurrentTime
  and J.PROCESSINSTANCE   = #Instance
  and J.EMPLID            = $Emplid
  and J.GRANT_NBR         = $GrantNbr
  and J.SHARES_VESTED     > J.SHARES_EXERCISED
  and J.ST_CANCEL_DT      < J.EXPIRATN_DT
  and (J.ST_CANCEL_DT     < J.TERM_EXPIRATN_DT
   or J.TERM_EXPIRATN_DT is null)
  and J.ST_CANCEL_DT     <= $RC_ThruDate
  and J.ST_CANCEL_DT     >= $RC_FromDate

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Expire
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Expire

  let #SharesOutstanding = 0
  let $TransactionType   = $ExpireLbl

Begin-Select

K.SHARES_VESTED
K.SHARES_EXERCISED
K.EXPIRATN_DT
K.TERM_EXPIRATN_DT

  let #SharesOutstanding  = &k.shares_vested - &k.shares_exercised

  if &k.term_expiratn_dt = ''
    let $Expire_Date = &k.expiratn_dt
    do Populate-Expire-Array
  else
    if &k.term_expiratn_dt < &k.expiratn_dt
      let $Expire_Date = &k.term_expiratn_dt
      do Populate-Expire-Array
    else
      let $Expire_Date = &k.expiratn_dt
      do Populate-Expire-Array
    end-if
  end-if

FROM PS_ST_STRR001_TBL   K
WHERE K.DATETIME_STAMP     = $CurrentTime
  and K.PROCESSINSTANCE    = #Instance
  and K.EMPLID             = $Emplid
  and K.GRANT_NBR          = $GrantNbr
  and K.SHARES_VESTED      > K.SHARES_EXERCISED
  and (K.ST_CANCEL_DT      > K.VEST_DT
   or K.ST_CANCEL_DT      is null)
  and K.EXPIRATN_DT       >= K.VEST_DT
  and (K.TERM_EXPIRATN_DT >= K.VEST_DT
   or K.TERM_EXPIRATN_DT  is null)
  and (((K.EXPIRATN_DT     <= $RC_ThruDate   and K.EXPIRATN_DT       >= $RC_FromDate) 
        and (K.EXPIRATN_DT <= K.TERM_EXPIRATN_DT or K.TERM_EXPIRATN_DT IS NULL))
    or ((K.TERM_EXPIRATN_DT >= $RC_FromDate   and K.TERM_EXPIRATN_DT  <= $RC_ThruDate) 
        and K.TERM_EXPIRATN_DT <= K.EXPIRATN_DT))

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Expired-Reprice
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Expired-Reprice

  let #SharesOutstanding = 0
  let $TransactionType   = $ExpireLbl

Begin-Select

L.SHARES_VESTED
L.SHARES_EXERCISED
L.EXPIRATN_DT
L.TERM_EXPIRATN_DT

  let #SharesOutstanding  = &l.shares_vested - &l.shares_exercised

  if &l.term_expiratn_dt < &l.expiratn_dt
    let $Expire_Date = &l.term_expiratn_dt
    do Populate-Expire-Array
  else
    let $Expire_Date = &l.expiratn_dt
    do Populate-Expire-Array
  end-if

FROM PS_ST_STRR001_TBL L
WHERE L.DATETIME_STAMP      = $CurrentTime
  and L.PROCESSINSTANCE     = #Instance
  and L.EMPLID              = $Emplid
  and L.GRANT_NBR           = $GrantNbr
  and L.SHARES_VESTED       > L.SHARES_EXERCISED
  and(L.ST_CANCEL_DT       >= L.EXPIRATN_DT
   or L.ST_CANCEL_DT       >= L.TERM_EXPIRATN_DT)
 and (((L.EXPIRATN_DT     <= $RC_ThruDate   and L.EXPIRATN_DT       >= $RC_FromDate) 
        and (L.EXPIRATN_DT <= L.TERM_EXPIRATN_DT or L.TERM_EXPIRATN_DT IS NULL))
    or ((L.TERM_EXPIRATN_DT >= $RC_FromDate   and L.TERM_EXPIRATN_DT  <= $RC_ThruDate) 
        and L.TERM_EXPIRATN_DT <= L.EXPIRATN_DT))

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Populate-Expire-Array
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Expire-Array

  let #RowCount = 0
  let $Flag = 'False'

  if #x = 0
    put $Expire_Date #SharesOutstanding into EXPIRE(#x) ExpireDt Outstanding
    add 1 to #x
  else
    while #RowCount < #x
      get $ExpireDt #Outstanding from EXPIRE(#RowCount) ExpireDt Outstanding
      if $Expire_Date = $ExpireDt
        let #SharesOutstanding = #SharesOutstanding + #Outstanding
        put $Expire_Date #SharesOutstanding into EXPIRE(#RowCount) ExpireDt Outstanding
        let $Flag = 'True'
        break
      end-if
      add 1 to #RowCount
    end-while

    if $Flag = 'False'
      put $Expire_Date #SharesOutstanding into EXPIRE(#x) ExpireDt Outstanding
      add 1 to #x
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Print-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail

  do Calculate-Period-Days

  if #DaysInPeriod > 0

    do Get-Plan-Info
    do Get_FMV_Prices ($FmvMethod,$StockId,$GrantDt,$HolidayRule,$WeekendRule,#GrantFMV)
    let #WeightedOutstanding = #SharesOutstanding * (#DaysInPeriod / #DaysTotal)
    let #WeightedPrice       = round(#WeightedOutstanding * #GrantPrice,2)

    if $SuppressDetails = 'N'
      let #PrintCount = #PrintCount + 1
      if #PrintCount = 1
        print $GrantNbr                                    (+1,001,010)
        print $OptionType                                  (  ,012,006)
        print #GrantPrice                                  (  ,019,010) edit $99.999999
      else
        print ''                                           (+1,   ,   )
      end-if
      do Format-DateTime ($TransactionDt, $PrintDate, {DEFDATE}, '', '')
      print $PrintDate                                     (  ,030,010)
      print $TransactionType                               (  ,042,008)
      print #SharesOutstanding                             (  ,051,016) edit 9,999,999.999999
      print #DaysInPeriod                                  (  ,071,004) edit 9999
      print #WeightedOutstanding                           (  ,076,016) edit 9,999,999.999999
      print #WeightedPrice                                 (  ,093,015) edit $999,999,999.99
    end-if

    let #GrantOutstanding         = #GrantOutstanding         + #SharesOutstanding
    let #GrantWeightedOutstanding = #GrantWeightedOutstanding + #WeightedOutstanding
    let #GrantWeightedPrice       = #GrantWeightedPrice       + #WeightedPrice

  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Print-Grant-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Grant-Totals

  if #GrantPrice < #GrantFMV
    let #WeightedGain   = (#AverageFMV - #GrantFMV) * #GrantWeightedOutstanding
  else
    let #WeightedGain   = (#AverageFMV * #GrantWeightedOutstanding) - #GrantWeightedPrice
  end-if

  if #WeightedGain < 0
    let #WeightedGain   = 0
  end-if

  if $OptionType = 'NQ'
    or $OptionType = 'NSAR'
    or $OptionType = 'RSA'
    let #GrantTaxShares = (#WeightedGain  * (#TaxRate / 100)) / #AverageFMV
  else
    let #GrantTaxShares = 0
  end-if

  let #GrantExerProceeds = #GrantWeightedPrice / #AverageFMV
  
  if $AccountDistrib = 'S'
    do Calculate-Unamortized-Straight
  end-if
  if $AccountDistrib = 'R'
!    do Calculate-Unamortized-Ratable
  end-if

  let #GrantDilutive     = #GrantWeightedOutstanding - #GrantExerProceeds - #GrantUnamortized - #GrantTaxShares
  if #GrantDilutive < 0
    let #GrantDilutive = 0
  end-if

  if $SuppressDetails = 'N'
    and #PrintCount > 0
    print #GrantWeightedOutstanding                        (+1,076,016) bold edit 9,999,999.999999
    print #GrantWeightedPrice                              (  ,093,015) bold edit $999,999,999.99
    print #GrantExerProceeds                               (  ,110,016) bold edit 9,999,999.999999
    print #GrantUnamortized                                (  ,128,016) bold edit 9,999,999.999999
    print #GrantTaxShares                                  (  ,146,016) bold edit 9,999,999.999999
    print #GrantDilutive                                   (  ,164,016) bold edit 9,999,999.999999
    print ''                                               (+1,   ,   )
  end-if

  let #TotalWeightedOutstanding   = #TotalWeightedOutstanding   + #GrantWeightedOutstanding
  let #TotalWeightedPrice         = #TotalWeightedPrice         + #GrantWeightedPrice

  if #GrantDilutive > 0
    let #DilWeightedOutstanding     = #DilWeightedOutstanding   + #GrantWeightedOutstanding
    let #DilWeightedPrice           = #DilWeightedPrice         + #GrantWeightedPrice
    let #DilExerProceeds            = #DilExerProceeds          + #GrantExerProceeds
    let #DilUnamortized             = #DilUnamortized           + #GrantUnamortized
    let #DilTaxShares               = #DilTaxShares             + #GrantTaxShares
    let #DilDilutive                = #DilDilutive              + #GrantDilutive
  else
    let #AntWeightedOutstanding     = #AntWeightedOutstanding   + #GrantWeightedOutstanding
    let #AntWeightedPrice           = #AntWeightedPrice         + #GrantWeightedPrice
    let #AntExerProceeds            = #AntExerProceeds          + #GrantExerProceeds
    let #AntUnamortized             = #AntUnamortized           + #GrantUnamortized
    let #AntTaxShares               = #AntTaxShares             + #GrantTaxShares
    let #AntDilutive                = #AntDilutive              + #GrantDilutive
  end-if

  let #GrantOutstanding           = 0
  let #GrantWeightedOutstanding   = 0
  let #GrantWeightedPrice         = 0
  let #GrantExerProceeds          = 0
  let #GrantUnamortized           = 0
  let #GrantTaxShares             = 0
  let #GrantDilutive              = 0

End-Procedure
!-----------------------------------------------------------------------
! Procedure: Calculate-Period-Days
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Period-Days

  do Convert-To-DTU-Date($TransactionDt,$TransDateDtu)
  do Convert-To-DTU-Date($GrantDt      ,$GrantDateDtu)
  do Format-DateTime ($TransactionDt,$TransDtCmp,{DEFCMP},'','')
  do Format-DateTime ($GrantDt      ,$GrantDtCmp,{DEFCMP},'','')
  evaluate $TransactionType
    when = $GrantLbl
      if $TransDtCmp >= $FromDateCmp
        and $TransDtCmp <= $ThruDateCmp
        do dtu-diff-days($TransDateDtu,$Thrudate,#DaysInPeriod)
        let #DaysInPeriod = #DaysInPeriod + 1
      else
        do dtu-diff-days($FromDate ,$Thrudate,#DaysInPeriod)
        let #DaysInPeriod = #DaysInPeriod + 1
      end-if
      break
    when = $ExerciseLbl
      if $TransDtCmp >= $FromDateCmp
        and $TransDtCmp <= $ThruDateCmp
        if $GrantDtCmp <= $FromDateCmp
          do dtu-diff-days($Fromdate ,$TransDateDtu,#DaysInPeriod)
        end-if
        if $GrantDtCmp > $FromDateCmp
          do dtu-diff-days($GrantDateDtu,$TransDateDtu,#DaysInPeriod)
        end-if
        let #DaysInPeriod = #DaysInPeriod + 1
      end-if
      break
    when = $CancelLbl
    when = $ExpireLbl
      if $TransDtCmp >= $FromDateCmp
        and $TransDtCmp <= $ThruDateCmp
        if $GrantDtCmp < $FromDateCmp
          do dtu-diff-days($Fromdate ,$TransDateDtu,#DaysInPeriod)
        end-if
        if $GrantDtCmp = $FromDateCmp
          do dtu-diff-days($Fromdate ,$ThruDate ,#DaysInPeriod)
        end-if
        if $GrantDtCmp > $FromDateCmp
          do dtu-diff-days($GrantDateDtu,$TransDateDtu,#DaysInPeriod)
        end-if
      end-if
      break 
  end-evaluate
  
  if #DaysInPeriod > #DaysTotal
    let #DaysInPeriod = #DaysTotal
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Plan-Info
! Descr:   Retrieve the info to be passed to the FMV function
!-----------------------------------------------------------------------
Begin-Procedure Get-Plan-Info

Begin-Select

A1.GRANT_FMV_MTHD
A1.FMV_HOLIDAY_RULE
A1.FMV_WEEKEND_RULE

  let $FmvMethod   = rtrim(&a1.grant_fmv_mthd, ' ')
  let $HolidayRule = rtrim(&a1.fmv_holiday_rule, ' ')
  let $WeekendRule = rtrim(&a1.fmv_weekend_rule, ' ')

from  PS_ST_OPTION_PLAN A1
where A1.STOCK_ID        = $StockId
  and A1.STOCK_PLAN_TYPE = 'O'
  and A1.STOCK_PLAN      = $StockPlan
  and A1.EFFDT           = (SELECT MAX(EFFDT) 
                             FROM  PS_ST_OPTION_PLAN
                             WHERE STOCK_ID         = A1.STOCK_ID
                               and STOCK_PLAN_TYPE  = A1.STOCK_PLAN_TYPE
                               and STOCK_PLAN       = A1.STOCK_PLAN
                               and EFFDT           <= $GrantDt )

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Calculate-Unamortized-Straight
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Unamortized-Straight

  do Convert-To-DTU-Date($GrantDt ,$GrantDateDtu)
  do Convert-To-DTU-Date($CancelDt,$CancelDateDtu)

  let #Days             = 0
  let #CompPerShare     = 0
  let #CompValue        = 0
  let #ExpensePerDay    = 0
  let #Adjustment       = 0
  let #NetExpense       = 0
  let #CurrentDays      = 0
  let #PriorDays        = 0
  let #FutureDays       = 0
  let $VestDateDtu      = ''
  let #GrantUnamortized = 0
  do Get-Max-Vesting-Date

  if #GrantPrice < #GrantFmv
    do dtu-diff-days($GrantDateDtu, $VestDateDtu, #Days)
    let #Days          = #Days + 1
    let #CompPerShare  = #GrantFmv - #GrantPrice
!    let #CompValue     = #GrantWeightedOutstanding * #CompPerShare
    let #CompValue     = #GrantOutstanding  * #CompPerShare
    let #ExpensePerDay = #CompValue / #Days

    if $CancelDt <> ''
      and $CancelReason <> 'RPRC'
      do Select-Shares-Cancelled
      let #Adjustment = #CompPerShare * #SharesCancelled * -1
      do dtu-diff-days($GrantDateDtu  , $CancelDateDtu , #Days)
      let $VestDateDtu = $CancelDateDtu
    end-if

    let #NetExpense = #CompValue + #Adjustment

    if $FromDate > $GrantDateDtu
      and $FromDate <= $VestDateDtu
      and $ThruDate >= $VestDateDtu
      do dtu-diff-days($FromDate , $VestDateDtu  , #CurrentDays)
      do dtu-diff-days($GrantDateDtu  , $FromDate, #PriorDays  )
    end-if

    if $FromDate > $GrantDateDtu
      and $FromDate < $VestDateDtu
      and $ThruDate > $GrantDateDtu
      and $ThruDate < $VestDateDtu
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDateDtu  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $VestDateDtu  , #FutureDays )
    end-if

    if $FromDate <= $GrantDateDtu
      and $ThruDate >= $VestDateDtu
      do dtu-diff-days($GrantDateDtu , $VestDateDtu   , #CurrentDays)
    end-if

    if $FromDate <= $GrantDateDtu
      and $ThruDate >= $GrantDateDtu
      and $ThruDate < $VestDateDtu
      do dtu-diff-days($GrantDateDtu  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $VestDateDtu  , #FutureDays )
    end-if

    if $CancelDateDtu <> ''
      and $CancelReason <> 'RPRC'
      let #CurrentDays = #CurrentDays
    else
      let #CurrentDays = #CurrentDays + 1
    end-if

    let #CurrentExpense = #CurrentDays * #ExpensePerDay
    let #PriorExpense   = #PriorDays   * #ExpensePerDay
    let #FutureExpense  = #FutureDays  * #ExpensePerDay
    if $CancelDt <> ''
      and $CancelReason <> 'RPRC'
      let #CurrentExpense = #NetExpense - #FutureExpense - #PriorExpense
    end-if
    let #GrantUnamortized = ((#CurrentExpense + (#FutureExpense * 2)) / 2) / #AverageFMV
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Max-Vesting-Date
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Max-Vesting-Date

Begin-Select

M.VEST_DT

  let $VestDt = rtrim(&m.vest_dt, ' ')
  do Convert-To-DTU-Date($VestDt,$VestDateDtu)

from  PS_ST_GRNT_VST_DTL M
where M.STOCK_ID   = $StockId
  and M.EMPLID     = $Emplid
  and M.GRANT_NBR  = $GrantNbr
  and M.VEST_EFFDT = (select max(MM.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL MM
                       where MM.EMPLID       = M.EMPLID
                         and MM.STOCK_ID     = M.STOCK_ID
                         and MM.GRANT_NBR    = M.GRANT_NBR)
  and M.SEQ_NUM    = (select max(MMM.SEQ_NUM) 
                        from PS_ST_GRNT_VST_DTL MMM
                       where MMM.EMPLID      = M.EMPLID
                         and MMM.STOCK_ID    = M.STOCK_ID
                         and MMM.GRANT_NBR   = M.GRANT_NBR
                         and MMM.VEST_EFFDT  = M.VEST_EFFDT)
  and M.VEST_DT    = (select max(MMMM.VEST_DT)
                        from PS_ST_GRNT_VST_DTL MMMM
                       where MMMM.EMPLID     = M.EMPLID
                         and MMMM.STOCK_ID   = M.STOCK_ID
                         and MMMM.GRANT_NBR  = M.GRANT_NBR
                         and MMMM.VEST_EFFDT = M.VEST_EFFDT
                         and MMMM.SEQ_NUM    = M.SEQ_NUM)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Shares-Cancelled
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Shares-Cancelled

  let #SharesCancelled = 0

Begin-Select

SUM(N.SHARES_VESTED)     &v.shares_vested

  let #SharesCancelled = &v.shares_vested

from  PS_ST_GRNT_VST_DTL N
where N.EMPLID     = $Emplid
  and N.STOCK_ID   = $StockId
  and N.GRANT_NBR  = $GrantNbr
  and N.VEST_EFFDT = (select max(NN.VEST_EFFDT) 
                        from PS_ST_GRNT_VST_DTL NN
                       where NN.EMPLID    = N.EMPLID
                         and NN.STOCK_ID  = N.STOCK_ID
                         and NN.GRANT_NBR = N.GRANT_NBR)
  and N.SEQ_NUM    = (select max(NNN.SEQ_NUM) 
                        from PS_ST_GRNT_VST_DTL NNN
                       where NNN.EMPLID     = N.EMPLID
                         and NNN.STOCK_ID   = N.STOCK_ID
                         and NNN.GRANT_NBR  = N.GRANT_NBR
                         and NNN.VEST_EFFDT = N.VEST_EFFDT)
  and N.VEST_DT   >= $CancelDt

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Calculate-Unamortized-Ratable
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Unamortized-Ratable

  do Convert-To-DTU-Date($GrantDt ,$GrantDateDtu)
  do Convert-To-DTU-Date($CancelDt,$CancelDateDtu)

  let #Days             = 0
  let #CompPerShare     = 0
  let #CompValue        = 0
  let #ExpensePerDay    = 0
  let #Adjustment       = 0
  let #NetExpense       = 0
  let #CurrentDays      = 0
  let #PriorDays        = 0
  let #FutureDays       = 0
  let $VestDateDtu      = ''
  let #GrantUnamortized = 0

  if #GrantPrice < #GrantFmv
    do Select-Ratable-Vesting
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Ratable-Vesting
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Ratable-Vesting

  let #SharesVested = 0
  let $VestDt       = ''

Begin-Select

O.VEST_DT
O.SHARES_VESTED

  let #Days            = 0
  let #CompPerShare    = 0
  let #CompValue       = 0
  let #ExpensePerDay   = 0
  let #Adjustment      = 0
  let #CurrentDays     = 0
  let #PriorDays       = 0
  let #FutureDays      = 0

  let #SharesVested  = &o.shares_vested
  let $VestDt        = rtrim(&o.vest_dt, ' ')
  do Convert-To-DTU-Date($VestDt,$VestDateDtu)

  if $BeginDateDtu = ''
    let $BeginDateDtu = $GrantDateDtu
  else
    let $BeginDateDtu = $EndDateDtu
    do dtu-add-days($BeginDateDtu, 1, $BeginDateDtu)
  end-if
  let $EndDateDtu    = $VestDateDtu
  do dtu-diff-days($BeginDateDtu, $EndDateDtu, #Days)
  let #Days          = #Days + 1

  let #CompPerShare  = #GrantFmv - #GrantPrice
  let #CompValue     = #SharesVested * #CompPerShare
  let #ExpensePerDay = #CompValue / #Days

  if $CancelDateDtu <> ''
    and $CancelDateDtu <= $EndDateDtu
    and $CancelReason <> 'RPRC'
    let #Adjustment    = #CompPerShare * #SharesVested * -1
    let #ExpensePerDay = 0
  end-if

  let #NetExpense    = #NetExpense + #CompValue + #Adjustment

  if $CancelDateDtu = ''
    or $CancelDateDtu > $EndDateDtu

    if $FromDate > $EndDateDtu
      do dtu-diff-days($BeginDateDtu  , $EndDateDtu   , #PriorDays  )
      let #PriorDays   = #PriorDays + 1
    end-if

    if $FromDate > $BeginDateDtu
      and $FromDate <= $EndDateDtu
      and $ThruDate >= $EndDateDtu
      do dtu-diff-days($FromDate , $EndDateDtu   , #CurrentDays)
      do dtu-diff-days($BeginDateDtu  , $FromDate, #PriorDays  )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate > $BeginDateDtu
      and $FromDate < $EndDateDtu
      and $ThruDate > $BeginDateDtu
      and $ThruDate < $EndDateDtu
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($BeginDateDtu  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $EndDateDtu   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

   if $FromDate <= $BeginDateDtu
      and $ThruDate >= $EndDateDtu
      do dtu-diff-days($BeginDateDtu , $EndDateDtu   , #CurrentDays)
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $BeginDateDtu
      and $ThruDate >= $BeginDateDtu
      and $ThruDate < $EndDateDtu
      do dtu-diff-days($BeginDateDtu  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $EndDateDtu   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $ThruDate < $BeginDateDtu
      do dtu-diff-days($BeginDateDtu , $EndDateDtu   , #FutureDays )
      let #FutureDays  = #FutureDays + 1
    end-if

  end-if

  let #CurrentExpense = #CurrentExpense + (#CurrentDays * #ExpensePerDay)
  let #PriorExpense   = #PriorExpense   + (#PriorDays   * #ExpensePerDay)
  let #FutureExpense  = #FutureExpense  + (#FutureDays  * #ExpensePerDay)
  if $CancelDateDtu <> ''
    and $CancelReason <> 'RPRC'
      let #CurrentExpense = #NetExpense - #FutureExpense - #PriorExpense
  end-if

from  PS_ST_GRNT_VST_DTL O
where O.EMPLID     = $EmplID
  and O.STOCK_ID   = $StockId
  and O.GRANT_NBR  = $GrantNbr
  and O.VEST_EFFDT = (select max(OO.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL OO
                       where OO.EMPLID      = O.EMPLID
                         and OO.STOCK_ID    = O.STOCK_ID
                         and OO.GRANT_NBR   = O.GRANT_NBR)
  and O.SEQ_NUM    = (select max(OOO.SEQ_NUM) 
                        from PS_ST_GRNT_VST_DTL OOO
                       where OOO.EMPLID     = O.EMPLID
                         and OOO.STOCK_ID   = O.STOCK_ID
                         and OOO.GRANT_NBR  = O.GRANT_NBR
                         and OOO.VEST_EFFDT = O.VEST_EFFDT)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Print-Report-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Report-Totals

  print $TotDiluteLbl                                      (+1,050,019) bold
  print #DilWeightedOutstanding                            (  ,076,016) bold edit 9,999,999.999999
  print #DilWeightedPrice                                  (  ,093,015) bold edit $999,999,999.99
  print #DilExerProceeds                                   (  ,110,016) bold edit 9,999,999.999999
  print #DilUnamortized                                    (  ,128,016) bold edit 9,999,999.999999
  print #DilTaxShares                                      (  ,146,016) bold edit 9,999,999.999999
  print #DilDilutive                                       (  ,164,016) bold edit 9,999,999.999999
  print $TotAntiDiluteLbl                                  (+1,050,019) bold
  print #AntWeightedOutstanding                            (  ,076,016) bold edit 9,999,999.999999
  print #AntWeightedPrice                                  (  ,093,015) bold edit $999,999,999.99
  print #AntExerProceeds                                   (  ,110,016) bold edit 9,999,999.999999
  print #AntUnamortized                                    (  ,128,016) bold edit 9,999,999.999999
  print #AntTaxShares                                      (  ,146,016) bold edit 9,999,999.999999
  print #AntDilutive                                       (  ,164,016) bold edit 9,999,999.999999

  new-page

  let #DilExerProceeds = #DilExerProceeds * -1
  let #DilUnamortized  = #DilUnamortized  * -1
  let #DilTaxShares    = #DilTaxShares    * -1
  let #Total           = #DilWeightedOutstanding + #DilExerProceeds + #DilUnamortized + #DilTaxShares

  print $SharesLbl                                         (+2,098,006) bold underline
  print $ValueLbl                                          (  ,125,005) bold underline
  print $TotWghtOutstandLbl                                (+1,005,033) bold underline
  print ':'                                                (  ,   ,001) bold
  print #TotalWeightedOutstanding                          (  ,082,022) bold edit 999,999,999,999.999999
  print #TotalWeightedPrice                                (  ,112,018) bold edit $99,999,999,999.99
  print $DilutiveLbl                                       (+2,015,008) bold underline
  print $TotWghtDiluteLbl                                  (+1,025,027) bold
  print ':'                                                (  ,   ,001) bold
  print #DilWeightedOutstanding                            (  ,082,022) bold edit 999,999,999,999.999999
  print #DilWeightedPrice                                  (  ,112,018) bold edit $99,999,999,999.99
  print $TotDiluteBBLbl                                    (+1,025,037) bold
  print ':'                                                (  ,   ,001) bold
  print #DilExerProceeds                                   (  ,081,024) bold edit 999,999,999,999.999999pr
  print $TotUnamorExpenseLbl                               (+1,025,025) bold
  print ':'                                                (  ,   ,001) bold
  print #DilUnamortized                                    (  ,081,024) bold edit 999,999,999,999.999999pr
  print $TotTaxBenefitLbl                                  (+1,025,017) bold
  print ':'                                                (  ,   ,001) bold
  print #DilTaxShares                                      (  ,081,024) bold edit 999,999,999,999.999999pr
  print '='                                                (+1,081,024) bold fill
  print #Total                                             (+1,081,024) bold edit 999,999,999,999.999999pr

  print $AntiDilutiveLbl                                   (+2,015,013) bold underline
  print $TotWghtDiluteLbl                                  (+1,025,027) bold
  print ':'                                                (  ,   ,001) bold
  print #AntWeightedOutstanding                            (  ,082,022) bold edit 999,999,999,999.999999
  print #AntWeightedPrice                                  (  ,112,018) bold edit $99,999,999,999.99

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'    !Stock Admin's Run Control Record
#include 'sqlerr.sqc'      !SQL error processing
#include 'stdapi.sqc'
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'askftd.sqc'      
#include 'stgetfmv.sqc'    !Retrieves FMV for a particular date
#include 'getrplng.sqc'    !Gets the report language
#include 'readxlat.sqc'    !
