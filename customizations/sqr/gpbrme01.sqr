!***********************************************************************
! GPBRME01:  Medias                                                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2015/07/08:09:26:21                                 !
!       $Release:  HR92                                                !
!      $Revision:  104                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'       !Set environment

!**************************************
begin-Setup
#include 'setupdb.sqc'
 
Declare-printer   THIS_REPORT
       Type=HPLASERJET
       Font=5            !15
       Point-Size=6      !12
       Pitch=17          !12
       Symbol-Set=0U     ! ASCII symbol set
 End-Declare
 
 Declare-Layout THIS_REPORT
      Orientation=Portrait
      Top-Margin= .3
      Left-Margin=.30
      Max-Lines=82
      Max-Columns=145
      Char-Width= 4      ! 7.2
      Line-Height=9     ! 6   72/printer_point-size
 End-Declare
 
 Declare-Report THIS_REPORT
       printer-Type=HPLASERJET
       LayOut=THIS_REPORT
 End-Declare
end-Setup

!**************************************
begin-heading 22
!**************************************
  Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
  graphic                              (1, 1,140) box 6 10 5
  print ' '                            (1,1)     
  print 'PeopleSoft'                   (1)    Bold center  
  
  print 'Relatorio: '                  (3,2) Bold
  print $ReportId                      (  ,15) 
  page-number                          (,125)  'Página   '
  last-page                            ()  '/ ' ' '
   
  
  Alter-printer Point-size = 12  Font-Type = Proportional Font = #FontStd
  print ' '                            (5,1)  
  print $ReportTitle                   (5) center  
  
  Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd  
  print ' '                            (6,1)  
  print $Text                          (+0,1) center 
          
  graphic                              (7, 1,140) box 3 10 5
  print 'Empresa:'                     (7,2)   
  print $Company                       ( ,15) Bold
  print $CompanyNm                     ( ,+4) Bold 
  print 'CNPJ:'                        ( ,100) 
  print $CNPJ                          ( ,110) Edit 'XX.XXX.XXX/XXXX-XX' Bold
  print 'Estabelecimento/Departamento:' (+2, 2)
  Let $Establi_Depid = $Estabid || ' ' || $EstabIDDescr || ' ' || $Deptid || ' ' || $DeptidDescr
  print $Establi_Depid                  (,39) Bold
  
  !print $Estabid                       (,39) Bold
  !print $EstabIDDescr                  (,+4) Bold
  !print $Deptid                        (,+10) Bold  
  !print $DeptidDescr                   (,+2) Bold
   
  graphic                              (12, 1,140) box 4 10
  graphic                              (     , 1,140) box 2 10
  graphic                              (     , 1,100) box 4 10
  graphic                              (     , 1, 40) box 4 10
  
  print 'ID: '                         (+1,2)
  print $Emplid                        (,10) Bold
  
  print 'Nome: '                       (,42)
  print $Name                          (,55) Bold
  
  print 'Sindicato:'                     (0,102)
  print $UnionCD                       ( , +2) Bold 
  Do Get-Union-Descr
  print $UnionCDDescr                  (,+2,16) Bold
                  
  print 'CTPS No./Série:'              (+2,2)
  print $CTPS                          ( ,20) Bold
  print $CTPSSerie                     (    , +1) Bold
  
  print 'Cargo:'                       ( ,42)
  print $JobCode                       ( ,50) Bold
  print $JobCodeDescr                  ( ,+5) Bold

  print 'Data Admissão:'               (, 102) 
  
  If $HireDt <> ''
   !  Do convert-to-dtu-date($HireDt,$HireDt)
     Do Format-DateTime($HireDt, $DateOut,{DEFDMY}, '','')
     print $DateOut                    (, +4) Bold 
  End-If
  
  If $Part = '1'
     Do Get-CalRunID-Descr
     Alter-printer Point-size = 12  Font-Type = Proportional Font = #FontStd
     graphic                          (+1, 1,140) horz-line 15  
     print 'PARTE I - COMPOSIÇÃO DOS VALORES DE PAGAMENTO' (+2,2)
     Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
     graphic                          (, 1,140) horz-line 15  
     print ' '                        (+1,1)    
     print 'CALENDARIO '              ( +1,1)
     print $CalRunIDDescr             (,22)      bold    
     print ' '                        (+1,1) 
     print 'PROVENTO'                 (+1,1)
     print 'DESCRIÇÃO'               (,22)
     print 'SINDICATO'                (,47) 
     print 'ACUMULADOR/VERSÃO'        (,61)
     print 'DESCRIÇÃO'               (,91)
     print 'VALOR'                    (,125) 
     print 'Período'                  (+1,11)
     print 'Elemento'                 (,31)
     print 'Descrição'                (,61,25)
     print 'Versão'                   (,91,25)
     graphic                              (, 1,140) horz-line 10  

     
   else
   
    Alter-printer Point-size = 12  Font-Type = Proportional Font = #FontStd
    graphic                           (+1, 1,140) horz-line 15  
    print 'PARTE II - DETALHAMENTO DO CÁLCULO DAS MÈDIAS' (+2,2)
    Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
    graphic                           (, 1,140) horz-line 15 
         
     print ' '                        (+1,1)    
          print 'CALENDARIO '              ( +1,1)
          print $CalRunIDDescr             (,22)      bold    
     print ' '                        (+1,1) 
     
     
     Print 'VERSÃO'                    (+1,1)
     print 'DESCRIÇÃO'                (,31)
     Print 'Tipo de Período'           (+1,1)
     Print 'Tipo de Media'             (,21)
     print 'Período'                   (,41)
     PRINT 'Divisor'                   (,65)
     PRINT '# Mín. de Ocorrências'     (,80)
     PRINT 'Tomar N Maiores'           (,105)
     Print 'Tipo de Correção'          (,125)
     graphic                           (, 1,140) horz-line 10  
     
   end-if
  
end-heading

!**************************************
begin-footing 5
!**************************************
  Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
  graphic                              (2, 1,140) box 3 10 5
  
  print 'Período:'                     (2,2)
  print $BeginDt                       ( , +2) Bold 
  print 'Al'                           (0,+4) 
  print $EndDt                       ( , +2) Bold 
 
  print 'Página'                       (+1,125 ) Bold 
  page-number                          (,135) 
  print 'Tipo de Corrida: '            ( ,2)
  print $RunTypeDescr                  ( , 20) Bold
   
  
  Print 'Data/hora de Emissão: '       (+1,2) 
  Print $ReportDate  (   ,+2)
  Print &timeBegan   (   ,+3)
 
end-footing

!**************************************
Begin-Report

  Let #FontStd  = 4        !3
  Let #SizeStd  = 9  
  
  Move '1' to $ReportDateType
  Move '1' to $ReportYear4
  
  Do Init-DateTime
  Do Init-Number
  Do Stdapi-Init
  Do Get-Current-DateTime
  
  Move 'GPBRME01' to $ReportID
  Move 'DEMONSTRATIVO DO CÁLCULO DAS MÉDIAS' to $ReportTitle
  display $ReportID
  display $ReportTitle
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  
  Alter-Locale MONEY-SIGN = 'R$'
  
  Do Process
  Do Stdapi-Term
  
End-Report

!**************************************
begin-procedure Declare-Rows
#debug show 'Declare-Rows'

  Let #R1  = 1
  Let #R2  = 15
  Let #R3  = 33     ! Unidades
  Let #R3b = 27
  Let #R4  = 48     ! Valor Unitário 
  Let #R4b = 44
  Let #R5  = 68     ! %      
  Let #R5b = 67
  Let #R6  = 83     ! Valor
  Let #R6b = 76
  Let #R7  = 102    ! Ind. Corr
  Let #R7b = 98
  Let #R8  = 130    ! Salário Hora 
  Let #R8b = 125
  Let #R9  = 85     ! 
  
end-procedure Declare-Rows

!**************************************
begin-procedure Create-Arrays
#debug show 'Create-Arrays'
!**************************************
CREATE-ARRAY NAME = ArrayErns SIZE = 100
 Field = Ecode:number
 Field = Eamt:number
 Field = Eunit:number
 Field = EAcode:number
 Field = EType:char
 Field = EVersion:char
 Field = EUnion:Char
 Field = EBeginDt:Char
 Field = EEndDt:Char

 
CREATE-ARRAY NAME = ArrayVersions SIZE = 100
 Field = VVersion:char
 Field = VDescr:char
 Field = VDivideNbr:number
 Field = V13th:number
 Field = V13thfirst:number
 Field = V13thprorate:number
 Field = VHourlyRt:number
 Field = VendDate:char
 Field = VbgnDate:char
 Field = VrunType:char
 Field = VVerAmt:number
 Field = VAmountErn:number
 
end-procedure Create-Arrays


!**************************************
Begin-Procedure Process
!**************************************
Let $SecurityClauseWithERN = ''
Let $_TableAlias = 'B'
Do Security-Param

Begin-Select
RC.COMPANY
RC.GPBR_FORMAT_ID
RC.GPBR_SORTID
RC.GPBR_COPIES
RC.GPBR_FORMAT_ID_FLG
RC.BEGIN_DT
RC.END_DT
RC.GPBR_LIST_OPTION
RC.GPBR_EXCLUDE_FLG1
RC.RUN_TYPE
RC.GB_GROUP_ID

  

   Let $Company  = Rtrim(&RC.COMPANY, ' ')
   
   show 'Company.- ' $Company
   
   Let $EndDt    = &RC.END_DT
   Let $BeginDt  = &RC.BEGIN_DT
   Let $RunType  = Rtrim(&RC.RUN_TYPE, ' ')
   Let $FormatID = &RC.GPBR_FORMAT_ID
   Let $FormatListFlg = &RC.GPBR_FORMAT_ID_FLG
   Let $SortID   = &RC.GPBR_SORTID
   Let $ListOption = Rtrim(&RC.GPBR_LIST_OPTION, ' ')
   Let $ExcludeFlg = Rtrim(&RC.GPBR_EXCLUDE_FLG1, ' ')
   Let #Copies    = &RC.GPBR_COPIES
   Let $GroupID   = rtrim(&RC.GB_GROUP_ID, ' ') 
   Let $WhereRunC = 'WHERE OP.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND OP.RUN_CNTL_ID = '
   Let $WhereRunC = $WhereRunC  || '''' || $prcs_run_cntl_id || '''' || ')'   
     
   Do Get-FormatID-Dtl
   
   If $ExcludeFlg = 'Y'
      Let $WhereExclude = 'NOT IN '
   else 
      Let $WhereExclude = 'IN '
   End-If
   
   Let $Text = 'Folha de Pagamento'
   If $FormatListFlg = 'Y'
      Let $Text = $Text || ' - ' || $ElementListDescr    
   End-If
   
   Evaluate $ListOption  
     when = '2'
       Let $TableOption = 'PS_GPBR_RC_AVG_EST'
       Do Select-Exist-Option
       If $Exist <> ''
         Let $WhereOption = ' AND B.ESTABID ' || $WhereExclude
         Let $WhereOption = $WhereOption   || ' (SELECT OP.ESTABID FROM PS_GPBR_RC_AVG_EST OP ' 
         Let $WhereOption = $WhereOption   || $WhereRunC  
       End-If 
     when = '7' 
       Let $TableOption = 'PS_GPBR_RC_AVG_DEP'
       Do Select-Exist-Option
       If $Exist <> ''
         Let $WhereOption = ' AND B.DEPTID ' || $WhereExclude
         Let $WhereOption = $WhereOption || '( SELECT OP.DEPTID FROM PS_GPBR_RC_AVG_DEP OP ' 
         Let $WhereOption = $WhereOption   || $WhereRunC  
       End-If    
     when = '3'
       Let $TableOption = 'PS_GPBR_RC_AVG_EMP'
       Do Select-Exist-Option
       If $Exist <> ''
         Let $WhereOption = ' AND B.EMPLID ' || $WhereExclude
         Let $WhereOption = $WhereOption || '( SELECT OP.EMPLID FROM PS_GPBR_RC_AVG_EMP OP ' 
         Let $WhereOption = $WhereOption || $WhereRunC     
         
         !Let $WhereRunC1 = 'WHERE B.EMPLID = OP1.EMPLID AND  OP1.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND OP1.RUN_CNTL_ID = '
         !Let $WhereRunC1 = $WhereRunC1  || '''' || $prcs_run_cntl_id || '''' || ')'            
                  
         !Let $WhereOption = $WhereOption || ' AND B.EMPL_RCD ' || $WhereExclude
         !Let $WhereOption = $WhereOption || '( SELECT OP1.EMPL_RCD FROM PS_GPBR_RC_AVG_EMP OP1 ' 
         !Let $WhereOption = $WhereOption || $WhereRunC1     
       end-if
     when = '4'
       Let $WhereOption = ' AND B.EMPLID ' || $WhereExclude
       Let $WhereOption = $WhereOption || ' (SELECT GR.EMPLID FROM  PS_GB_GRP_RES_TBL GR ' 
       Let $WhereOption = $WhereOption || ' WHERE GR.GB_GROUP_ID = ' || '''' || $GroupID  || ''''
       Let $Condicion02 = $WhereOption || ' AND GR.VERSIONGBQDM = (SELECT MAX(G.VERSIONGBQDM) FROM '
       Let $WhereOption = $Condicion02 || ' PS_GB_GRP_RES_TBL G WHERE G.GB_GROUP_ID = GR.GB_GROUP_ID)) '        
   End-Evaluate
   
   #debug show '$WhereOption: '  $WhereOption

   Do Get-RunType-Descr
   Do Get-Company-Descr
   Do Create-Arrays
   Do Declare-Rows
   Do Process-Employees
   
  
FROM  PS_GPBR_RC_AVG  RC
WHERE RC.OPRID = $Prcs_OprID
AND RC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
End-Select
End-Procedure Process

!**************************************
begin-procedure Process-Employees
#debug show '* Process-Employees *'
#debug show '$BeginDt:     ' $BeginDt
#debug show '$EndDt:       ' $EndDt
#debug show '$RunType:     ' $RunType
#debug show '$Company:     ' $Company
#debug show 'Where Option: ' $WhereOption
!**************************************

Begin-select DISTINCT
B.COMPANY                              !Order by
B.GP_PAYGROUP                          !Order by
BB.PAY_ENTITY                          !Order by
B.LOCATION                            !Order by
BB.CAL_ID          
BB.CAL_RUN_ID
BB.ORIG_CAL_RUN_ID
BB.EMPLID       
D.NAME_DISPLAY
B.DEPTID        
B.SETID_DEPT   
B.EFFDT        
B.EMPL_RCD     
B.ESTABID     
B.SETID_JOBCODE
B.JOBCODE
B.UNION_CD
BB.SEG_BGN_DT  
BB.SEG_END_DT  

  Let $Estabid                         = Rtrim(&B.ESTABID, ' ')
  Let $Deptid                          = Rtrim(&B.DEPTID, ' ')  
  Let $Emplid                          = Rtrim(&BB.EMPLID, ' ')
  Let $Name                            = Rtrim(&D.NAME_DISPLAY, ' ')
  Let $SetIDDeptid                     = Rtrim(&B.SETID_DEPT, ' ')
  Let $Effdt                           = Rtrim(&B.EFFDT, ' ')
  Let $SetIDJobCode                    = Rtrim(&B.SETID_JOBCODE, ' ')
  Let $JobCode                         = Rtrim(&B.JOBCODE, ' ')
  Let $GPPaygroup                      = Rtrim(&B.GP_PAYGROUP,' ')
  Let #EmplRcd                         = &B.EMPL_RCD 
  Let $UnionCD                         = &B.UNION_CD
  Let $CalRunID                        = Rtrim(&BB.CAL_RUN_ID, ' ')
  Let $CalID                           = Rtrim(&BB.CAL_ID, ' ')  
    Let $origCalRunID                    = rtrim(&BB.ORIG_CAL_RUN_ID, ' ')
  Let $SegBgnDt                        = &BB.SEG_BGN_DT
  Let $SegEndDt                        = &BB.SEG_END_DT 
  Let #CountElem                       = 0
  Let #CountVer                        = 0
  Let #CountAcum                       = 0
  Let #CopyNbr                         = 1
 

  Do Get-Establishment-Data
  Do Get-Department-Descr
  Do Get-JobCode-Descr
  Do Get-National-Id
  Do Get-HireDate
  Do Get-Pers-Data
  
  #debug show '$Emplid   ' $Emplid
  #debug show '$CalRunID ' $CalRunID
  #debug show '$CalID    ' $CalID  

  Do Get-Max-Rslt-Seg
     
  if $ErnInclude= '10'
    Do Get-Erns-Amt-Inc
  else
    Do Get-Erns-Amt-Exc
  End-If  
  
  if #CountElem > 0
    Do Get-Versions-Hdr
    If (#CountVer > 0
   or  #CountAcum > 0)
  
    Let $Part = '1'
    While #CopyNbr <= #Copies
     !Let #page-count = 1
      Do Print-Part-I
      Do Print-Part-II
      Add 1 to #CopyNbr
      new-page  
    End-While 
    end-if
  end-if  
 

FROM  PS_JOB B
     ,PS_PERSON_NAME D
     ,PS_GP_RSLT_SEG_VW BB
WHERE BB.GP_PAYGROUP = B.GP_PAYGROUP
AND   B.EMPLID = BB.EMPLID
AND   BB.EMPLID = D.EMPLID
AND   B.EMPL_RCD = BB.EMPL_RCD
AND   BB.RUN_TYPE = $RunType
AND   B.EFFDT = (SELECT MAX(JOB.EFFDT) 
                 FROM PS_JOB JOB
                 WHERE JOB.EMPLID   = B.EMPLID
                 AND   JOB.EMPL_RCD = B.EMPL_RCD
                 AND   JOB.EFFDT   <= BB.SEG_END_DT!$EndDt
                 ) 
AND   B.EFFSEQ = (SELECT MAX(JOB1.EFFSEQ) 
                 FROM PS_JOB JOB1
                 WHERE JOB1.EMPLID   = B.EMPLID
                 AND   JOB1.EMPL_RCD = B.EMPL_RCD
                 AND   JOB1.EFFDT    = B.EFFDT)                      
AND   B.COMPANY = $Company      
AND   BB.SEG_BGN_DT >= $BeginDt
AND   BB.SEG_BGN_DT <= $EndDt
!AND   BB.RSLT_REV_NUM = 1
AND BB.RSLT_VER_NUM = (SELECT MAX (X.RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW X
                                WHERE BB.EMPLID       = X.EMPLID
                         !      AND BB.CAL_RUN_ID     = X.CAL_RUN_ID         --> Non selected to get the last calc.
                                AND BB.EMPL_RCD       = X.EMPL_RCD
                                AND BB.CAL_ID         = X.CAL_ID
                                AND BB.GP_PAYGROUP    = X.GP_PAYGROUP
                                AND BB.CALC_TYPE      = X.CALC_TYPE)
AND BB.RSLT_REV_NUM = (SELECT MAX (X.RSLT_REV_NUM) FROM PS_GP_RSLT_SEG_VW X
                                WHERE BB.EMPLID       = X.EMPLID
                         !      AND BB.CAL_RUN_ID     = X.CAL_RUN_ID         --> Non selected to get the last calc.
                               AND BB.EMPL_RCD       = X.EMPL_RCD
                                AND BB.CAL_ID         = X.CAL_ID
                                AND BB.GP_PAYGROUP    = X.GP_PAYGROUP
                                AND BB.CALC_TYPE      = X.CALC_TYPE)                               
AND   BB.SEL_STAT     = 'A'
AND   BB.CALC_ACTION  = 'C'  
AND   EXISTS (select DISTINCT W.EMPLID    
                 FROM  PS_GPBR_AVG_HDR_WA W
                 WHERE   W.EMPLID         = BB.EMPLID
                 AND   W.EMPL_RCD       = BB.EMPL_RCD
                 AND   W.CAL_RUN_ID     = BB.CAL_RUN_ID
!                 AND   W.ORIG_CAL_RUN_ID = BB.ORIG_CAL_RUN_ID
                 AND   W.GP_PAYGROUP    = BB.GP_PAYGROUP
                 AND   W.RSLT_SEG_NUM   = BB.RSLT_SEG_NUM
                 AND   W.CAL_ID         = BB.CAL_ID)
![$SecurityClausewithERN]
[$WhereOption]
[$orderby]
end-select
end-procedure  Process-Employees

!**************************************
begin-procedure Select-Exist-Option
!show '* Select-Exist-Option *'
!**************************************
Let $Exist = ''
begin-select DISTINCT

RCOP.RUN_CNTL_ID

 Let $Exist = Rtrim(&RCOP.RUN_CNTL_ID, ' ')

from [$TableOption] RCOP
where RCOP.OPRID = $prcs_oprid
AND RCOP.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure Select-Exist-Option

!**************************************
begin-procedure Get-National-Id
!show '** Get-National-Id **'
!**************************************
Let $CTPS = ''

Begin-Select
A.NATIONAL_ID
A.NATIONAL_ID_TYPE

   Let $NationalId = Rtrim(&A.NATIONAL_ID_TYPE, ' ')
 
   Evaluate $NationalId 
   when = 'CTPS'
     Let $CTPS     = Rtrim(&A.NATIONAL_ID,' ')  
   End-Evaluate
   
from PS_PERS_NID A
WHERE A.EMPLID = $Emplid
AND A.COUNTRY = 'BRA' 
End-Select
End-Procedure Get-National-Id

!**************************************
begin-procedure Get-HireDate
!Show '* Get-HireDate *'

Begin-select
E.HIRE_DT

 Let $HireDt                           = Rtrim(&E.HIRE_DT, ' ')

FROM  PS_EMPLOYMENT E
WHERE E.EMPLID = $Emplid
AND   E.EMPL_RCD = #EmplRcd                 
end-select
end-procedure Get-HireDate

!**************************************
begin-procedure Get-FormatID-Dtl
#debug show '* Get-FormatID-Dtl *'
!**************************************
Begin-Select
FO.GPBR_PIN_PSLP1_NUM
FO.GPBR_PIN_PSLP2_NUM
FO.GPBR_PIN_PSLP3_NUM
FO.GPBR_EARN_IE
FO.GPBR_DED_IE
FO.EFFDT
FO.DESCR

  Let #EarnTotal  = &FO.GPBR_PIN_PSLP1_NUM    
  Let #DedTotal   = &FO.GPBR_PIN_PSLP2_NUM  
  Let #NetPay     = &FO.GPBR_PIN_PSLP3_NUM 
  Let $ErnInclude = Rtrim(&FO.GPBR_EARN_IE, ' ' )
  
  Let $DedInclude = Rtrim(&FO.GPBR_DED_IE, ' ' )
  Let $FormatIDDescr = Rtrim(&FO.DESCR, ' ')
  Let $FormatEffdt = &FO.EFFDT
  
FROM PS_GPBR_PAYSL_FORM FO
WHERE FO.GPBR_FORMAT_ID = $FormatId
AND   FO.EFF_STATUS = 'A'
AND   FO.EFFDT = (SELECT MAX(FO1.EFFDT)
                  FROM PS_GPBR_PAYSL_FORM FO1
                  WHERE  FO1.GPBR_FORMAT_ID  =  FO.GPBR_FORMAT_ID
                  AND   FO1.EFF_STATUS      =  FO.EFF_STATUS
                  AND   FO1.EFFDT           <= $EndDt)
End-Select
#debug show 'End Get-FormatID-Dtl'
End-Procedure Get-FormatID-Dtl

!**************************************
begin-procedure Get-Pers-Data
!show '** Get-Pers-Data **'
!**************************************
Let $CTPSSerie = ''
Begin-Select     
F.CTPS_SERIES_BRA

  Let $CTPSSerie = Rtrim(&F.CTPS_SERIES_BRA, ' ')
  Let #LenField    = Length($CTPSSerie) 
  
  If #LenField < 3
     Let $CTPSSerie = '00' || $CTPSSerie
      Let #LenField    = Length($CTPSSerie) 
  End-if
  
  Let #Counter     = #LenField - 2   
  Let $CTPSSerieEnd   = ''
  While #Counter  <= #LenField
        Let $Char    = Substr($CTPSSerie,#Counter, 1)  
        Let $CTPSSerieEnd = $CTPSSerieEnd || $Char
        ADD 1 To #Counter
  End-While
  
  Let $CTPSSerie = $CTPSSerieEnd
  Let $CTPSSerie = ' / ' || Edit($CTPSSerie, '000')

  
FROM PS_PERS_DATA_BRA B
    ,PS_PERSON_BRA F
WHERE B.EMPLID = $Emplid
AND B.EMPLID = F.EMPLID
AND B.EFFDT  = (SELECT MAX(BB.EFFDT)
                FROM PS_PERS_DATA_BRA BB
                WHERE BB.EMPLID = B.EMPLID
                AND BB.EFFDT <= $EndDt) 
End-Select
End-Procedure Get-Pers-Data

!**************************************
begin-procedure Get-SortID-Dtl
!**************************************
Let $orderby = 'ORDER BY '
begin-select
SID.GPBR_SEQ01
SID.GPBR_ASC_DESC01
SID.GPBR_SEQ02
SID.GPBR_ASC_DESC02
SID.GPBR_SEQ03
SID.GPBR_ASC_DESC03
SID.GPBR_SEQ04
SID.GPBR_ASC_DESC04
SID.GPBR_SEQ05
SID.GPBR_ASC_DESC05
  
      MOVE &SID.GPBR_SEQ01        TO   $Seq01
      MOVE &SID.GPBR_ASC_DESC01   TO   $AscDesc01
      MOVE &SID.GPBR_SEQ02        TO   $Seq02
      MOVE &SID.GPBR_ASC_DESC02   TO   $AscDesc02
      MOVE &SID.GPBR_SEQ03        TO   $Seq03
      MOVE &SID.GPBR_ASC_DESC03   TO   $AscDesc03
      MOVE &SID.GPBR_SEQ04        TO   $Seq04
      MOVE &SID.GPBR_ASC_DESC04   TO   $AscDesc04
      MOVE &SID.GPBR_SEQ05        TO   $Seq05
      MOVE &SID.GPBR_ASC_DESC05   TO   $AscDesc05
      Do Get-Sequencee($Seq01,$AscDesc01,$orderby)
      Do Get-Sequencee($Seq02,$AscDesc02,$orderby)
      Do Get-Sequencee($Seq03,$AscDesc03,$orderby)
      Do Get-Sequencee($Seq04,$AscDesc04,$orderby)
      Do Get-Sequencee($Seq05,$AscDesc05,$orderby)
from PS_GPBR_SORTID SID
where SID.GPBR_SORTID = $Sortid
AND   SID.EFF_STATUS  = 'A'
AND   SID.EFFDT       = (select MAX(GPS1.EFFDT) from PS_GPBR_SORTID GPS1
                         where GPS1.GPBR_SORTID = SID.GPBR_SORTID
                         AND   GPS1.EFF_STATUS  = SID.EFF_STATUS
                         AND   GPS1.EFFDT       <= $EndDt)
end-select
If length(RTRIM($orderby,' ')) > 8
   Let $orderby = substr($orderby,1,(length($orderby) - 1))
 else
   Let $orderby = ''
 end-if
end-procedure Get-SortID-Dtl

begin-procedure Get-Sequencee ($seq, $order, :$orderby)
if $order = 'Y'
  Let $AscDesc = 'DESC'
else
  Let $AscDesc = ''
end-if
Evaluate $seq
when = '0010'
 Let $orderby = $orderby ||  'B.COMPANY '        || $AscDesc || ','
 break
when = '0020'
 Let $orderby = $orderby ||  'B.GP_PAYGROUP '    || $AscDesc || ','
 break
when = '0030'
 !Let $orderby = $orderby || 'BB.PAY_ENTITY '     || $AscDesc || ','
 break
when = '0040'
 Let $orderby = $orderby ||  'B.LOCATION '       || $AscDesc || ','
 break
when = '0050'
 Let $orderby = $orderby ||  'B.DEPTID '         || $AscDesc || ','
 break
!when = '0060'
! Let $orderby = $orderby ||  'A.SUPERVISOR_ID '  || $AscDesc || ','
! break
when = '0080'
 Let $orderby = $orderby || 'B.EMPLID '          || $AscDesc || ','
 break
when = '0090'
 Let $orderby = $orderby || 'D.NAME_DISPLAY '            || $AscDesc || ','
 break
when = '0100'
 Let $orderby = $orderby || 'B.ESTABID '         || $AscDesc || ','
 break
End-Evaluate
end-procedure Get-Sequencee

!**************************************
begin-procedure Get-Max-Rslt-Seg   
#debug show '* Get-Max-Rslt-Seg *'
!**************************************
Let #RsltSegNum = 0
Begin-Select
MAX(S.RSLT_SEG_NUM) &S.RSLT_SEG_NUMV

   Let #RsltSegNum = &S.RSLT_SEG_NUMV

FROM PS_GP_RSLT_ACUM_VW S
WHERE S.EMPLID      = $Emplid
AND   S.EMPL_RCD    = #EmplRcd
AND   S.CAL_RUN_ID  = $CalRunID
AND   S.GP_PAYGROUP = $GPPayGroup
AND   S.CAL_ID      = $CalID                     
end-Select
end-procedure Get-Max-Rslt-Seg

!**************************************
begin-procedure Get-Erns-Amt-Inc
!show '* Get-Erns-Amt-Inc *'
!show '$FormatID: ' $FormatID
!show '$FormatEffdt: ' $FormatEffdt
!show '$EndDt: ' $EndDt
!**************************************
Clear-array name = ArrayErns 
Let #CountElem = 0
Let #CorrectAmt  = 0
 

 
begin-select
FO1.SEQNUM
RSLT1.PIN_NM
RSLT1.PIN_NUM
ED1.CALC_RULE 
ED1.ENTRY_TYPE_AMT
ED1.PIN_AMT_NUM
RSLT1.USER_FLD1
SUM(RSLT1.CALC_RSLT_VAL) &RSLT1.CALC_RSLT_VAL 
SUM(RSLT1.CALC_ADJ_VAL)  &RSLT1.CALC_ADJ_VAL 


  Let #PinNum     = &RSLT1.PIN_NUM  
  Let #CalcRsltVal     = &RSLT1.CALC_RSLT_VAL  
  Let #AmtAdj     = &RSLT1.CALC_ADJ_VAL   
  Let $CalcRule   = &ED1.CALC_RULE 
  Let $EntryTypeAmt = &ED1.ENTRY_TYPE_AMT
  Let #PinAmtNum  = &ED1.PIN_AMT_NUM
  Let #CalcRsltVal     = #CalcRsltVal + #AmtAdj
  Let $bgnDateWAWhere  = rtrim(&RSLT1.USER_FLD1, ' ')  
  Let $Condition01 = ''
  
  Do Period-Dates
   
  Do Get-Averages-WA
  
  if #CalcRsltVal <> 0
    ADD 1 TO #CountElem 
    If $CalcRule = 'AM'  and
       $EntryTypeAmt = 'AC0'
       Let $Type = 'A'
    else
       Let $Type = 'V'
    end-if
        
    put #PinNum #UnitVal #CalcRsltVal #PinAmtNum $Type $Version $UnionCD1 $bgnDateWA $endDateWA into ArrayErns(#CountElem) Ecode Eunit Eamt EAcode Etype EVersion EUnion EBeginDt EendDt
    Let #CalcRsltVal  = 0
    Let #UnitVal   = 0   
    Let #AmtAdj    = 0   
    Let #UnitAdj   = 0 
  end-if
    
FROM PS_GP_RSLT_ED_VW RSLT1
    ,PS_GPBR_PAYSL_F_ER FO1
    ,PS_GP_ERN_DED ED1
WHERE FO1.GPBR_FORMAT_ID = $FormatID
AND   FO1.EFFDT          = $FormatEffdt
AND   FO1.EFF_STATUS     = 'A'
AND   FO1.PIN_ERN_NUM    = RSLT1.PIN_NUM
AND   RSLT1.PIN_NUM         = ED1.PIN_NUM
AND   ED1.EFFDT           = (SELECT MAX(ED.EFFDT)
                            FROM PS_GP_ERN_DED ED
                            WHERE ED.PIN_NUM = ED1.PIN_NUM
                            AND ED.EFFDT <= $EndDt)
AND   RSLT1.PIN_TYPE       = 'ER'
AND   RSLT1.EMPLID         = $Emplid
AND   RSLT1.EMPL_RCD       = #EmplRcd
AND   RSLT1.CAL_RUN_ID     = $CalRunID
AND   RSLT1.GP_PAYGROUP    = $GPPayGroup
AND   RSLT1.RSLT_SEG_NUM   = #RsltSegNum
AND   RSLT1.CAL_ID         = $CalID
GROUP BY FO1.SEQNUM, RSLT1.PIN_NM ,RSLT1.PIN_NUM, ED1.CALC_RULE, ED1.ENTRY_TYPE_AMT, ED1.PIN_AMT_NUM, RSLT1.USER_FLD1
ORDER BY FO1.SEQNUM, RSLT1.PIN_NM ,RSLT1.PIN_NUM, ED1.CALC_RULE, ED1.ENTRY_TYPE_AMT, ED1.PIN_AMT_NUM, RSLT1.USER_FLD1
end-select
#debug SHOW 'end Get-Erns-Amt-Inc'
End-Procedure Get-Erns-Amt-Inc

!**************************************
begin-procedure Get-Averages-WA
#debug show '* Get-Averages-WA *'
#debug show '$CalRunID: ' $CalRunID
#debug show 'Pin num: ' #PinNum
!**************************************
Let $Version = ''
Let $UnionCD1 = ''
Let $bgnDateWA = ''
Let $endDateWA = ''



begin-select
W1.GPBR_AVG_VERSION
W1.UNION_CD
W1.BGN_DT
W1.END_DT

  Let $Version   = &W1.GPBR_AVG_VERSION
  Let $UnionCD1 = &W1.UNION_CD 
  
  if $Condition01 <> ''
     Let $bgnDateWA = &W1.BGN_DT
     Let $endDateWA = &W1.END_DT
  end-if
  
  #debug show '$Version: ' $Version
  #debug show '$Period : '  $bgnDateWA ' ' $endDateWA
            
FROM  PS_GPBR_AVG_HDR_WA W1
WHERE W1.PIN_NUM        = #PinNum
AND   W1.EMPLID         = $Emplid
AND   W1.EMPL_RCD       = #EmplRcd
AND   W1.CAL_RUN_ID     = $CalRunID
AND   W1.GP_PAYGROUP    = $GPPayGroup
AND   W1.RSLT_SEG_NUM   = #RsltSegNum
AND   W1.CAL_ID         = $CalID
AND   W1.CALC_RSLT_VAL = (SELECT MAX(CALC_RSLT_VAL) 
                          FROM PS_GPBR_AVG_HDR_WA W2 
                          WHERE W2.PIN_NUM=#PinNum
                                   AND   W2.EMPLID= $Emplid
                                   AND   W2.EMPL_RCD       = #EmplRcd
                                   AND   W2.CAL_RUN_ID     = $CalRunID
                                   AND   W2.GP_PAYGROUP    = $GPPayGroup
                                   AND   W2.RSLT_SEG_NUM   = #RsltSegNum
                                   AND   W2.CAL_ID         = $CalID
                                   AND   W2.END_DT =  W1.END_DT ) 
[$Condition01]
end-select
End-Procedure Get-Averages-WA

!**************************************
begin-procedure Get-Erns-Amt-Exc
!**************************************
Clear-array name = ArrayErns 
Let #CountElem = 0
Let #CalcRsltVal  = 0
 
begin-select
RSLT2.PIN_NM
RSLT2.PIN_NUM
ED2.CALC_RULE 
ED2.ENTRY_TYPE_AMT
ED2.PIN_AMT_NUM
RSLT2.USER_FLD1
SUM(RSLT2.CALC_RSLT_VAL) &RSLT2.CALC_RSLT_VAL 
SUM(RSLT2.CALC_ADJ_VAL)  &RSLT2.CALC_ADJ_VAL 

  Let #PinNum       = &RSLT2.PIN_NUM  
  Let #CalcRsltVal  = &RSLT2.CALC_RSLT_VAL  
  Let #AmtAdj       = &RSLT2.CALC_ADJ_VAL   
  Let $CalcRule     = &ED2.CALC_RULE 
  Let $EntryTypeAmt = &ED2.ENTRY_TYPE_AMT
  Let #PinAmtNum    = &ED2.PIN_AMT_NUM
  Let #CalcRsltVal  = #CalcRsltVal + #AmtAdj
  Let $bgnDateWAWhere  = rtrim(&RSLT2.USER_FLD1, ' ')  
  Let $Condition01 = ''
    
  Do Period-Dates         
    
  Do Get-Averages-WA
    
  ! show '#CalcRsltVal: ' #CalcRsltVal
    
  if #CalcRsltVal <> 0 
  !  and $Version <> ''
      ADD 1 TO #CountElem
      If $CalcRule = 'AM' and
         $EntryTypeAmt = 'AC0'
         Let $type = 'A'
      else
         Let $Type = 'V'
      end-if
        
      !show ' $Version '  $Version 
        
      put #PinNum #UnitVal #CalcRsltVal #PinAmtNum $Type $Version $UnionCD1 $bgnDateWA $endDateWA into ArrayErns(#CountElem) Ecode Eunit Eamt EAcode Etype EVersion EUnion EBeginDt EendDt
      
      
      Let #CalcRsltVal  = 0
      Let #CalcRsltVal  = 0
      Let #CalcRsltVal  = 0
      Let #UnitVal   = 0   
      Let #AmtAdj    = 0   
      Let #UnitAdj   = 0 
  end-if
    

FROM PS_GP_RSLT_ED_VW RSLT2
    ,PS_GP_ERN_DED ED2
where RSLT2.PIN_TYPE = 'ER'
AND   RSLT2.PIN_NUM NOT IN (SELECT R.PIN_ERN_NUM 
                         FROM PS_GPBR_PAYSL_F_ER R
                         WHERE R.GPBR_FORMAT_ID = $FormatId
                         AND   R.EFFDT          = $FormatEffdt
                         AND   R.EFF_STATUS     = 'A' )
AND   RSLT2.EMPLID        = $Emplid
AND   RSLT2.EMPL_RCD      = #EmplRcd
AND   RSLT2.CAL_RUN_ID    = $CalRunId
AND   RSLT2.GP_PAYGROUP   = $GPPayGroup
AND   RSLT2.PIN_NUM         = ED2.PIN_NUM
AND   ED2.EFFDT           = (SELECT MAX(ED.EFFDT)
                            FROM PS_GP_ERN_DED ED
                            WHERE ED.PIN_NUM = ED2.PIN_NUM
                            AND ED.EFFDT <= $EndDt)
AND   RSLT2.CAL_ID        = $CalID
AND   RSLT2.RSLT_SEG_NUM  = #RsltSegNum
GROUP BY RSLT2.PIN_NM, RSLT2.PIN_NUM, ED2.CALC_RULE, ED2.ENTRY_TYPE_AMT, ED2.PIN_AMT_NUM, RSLT2.USER_FLD1
ORDER BY RSLT2.PIN_NM, RSLT2.PIN_NUM, ED2.CALC_RULE, ED2.ENTRY_TYPE_AMT, ED2.PIN_AMT_NUM, RSLT2.USER_FLD1
end-select
#debug show 'Get-Erns-Amt-Exc'
End-Procedure Get-Erns-Amt-Exc

!**************************************
begin-procedure Get-Versions-Descr
!show '* Get-Versions-Descr *'
!*************************************
Let $AvgType = ''
begin-select
VER.GPBR_AVG_VERSION
VER.GPBR_PIN_AVG_NUM
VER.GPBR_PERIOD_TYPE
VER.GPBR_AVG_TYPE
VER.GPBR_FREQUENCY
VER.GPBR_HIGHEST
VER.GPBR_DIVIDE_IND
VER2.DESCR
VER.GPBR_FROM_DATE
VER.GPBR_TO_DATE
VER.GPBR_CORRECT_AMT
  
  Let #Frequency    = &VER.GPBR_FREQUENCY
  Let $VersionDescr = Rtrim(&VER2.DESCR, ' ')
  Let #AvgPinNum    = &VER.GPBR_PIN_AVG_NUM
  Let $FieldName    = 'GPBR_PERIOD_TYPE'
  Let $FieldValue   = &VER.GPBR_PERIOD_TYPE
  Do Get-Xlat-Value
  Let $PeriodType   = $XlatValue  
  Let $FieldName    = 'GPBR_AVG_TYPE'
  Let $FieldValue   = &VER.GPBR_AVG_TYPE
  Do Get-Xlat-Value
  Let $AvgType      = rtrim(&VER.GPBR_AVG_TYPE, ' ')
  Let $AvgTypeText  = $XlatValue
  Let $FieldName    = 'GPBR_FROM_DATE'
  Let $FieldValue   = &VER.GPBR_FROM_DATE
  Do Get-Xlat-Value
  Let $FromDate      = $XlatValue
  Let $FieldName    = 'GPBR_TO_DATE'
  Let $FieldValue   = &VER.GPBR_TO_DATE
  Do Get-Xlat-Value
  Let $ToDate      = $XlatValue
  Let $FieldName = 'GPBR_DIVIDE_IND'
  Let $FieldValue = &VER.GPBR_DIVIDE_IND
  Do Get-Xlat-Value
  Let $DivideInd  = $XlatValue
  Let $CorrectAmt = rtrim(&VER.GPBR_CORRECT_AMT, ' ')
  Let $FieldName = 'GPBR_CORRECT_AMT'
  Let $FieldValue = &VER.GPBR_CORRECT_AMT
  Do Get-Xlat-Value
  Let $CorrectText = $XlatValue
  Let #Highest    = &VER.GPBR_HIGHEST  
  
  Do Print-Version-Detail
  
FROM PS_GPBR_AVG_VERS VER2
    ,PS_GPBR_AVG_VERS_E VER
WHERE VER.GPBR_AVG_VERSION = $Version
AND   VER.EFFDT = (SELECT MAX(EFFDT) 
                 FROM PS_GPBR_AVG_VERS_E 
                 WHERE GPBR_AVG_VERSION = VER.GPBR_AVG_VERSION
                 AND EFFDT <= $EndDt)
AND   VER.GPBR_AVG_VERSION = VER2.GPBR_AVG_VERSION    
AND   VER.GPBR_PIN_AVG_NUM IN (SELECT W5.PIN_NUM
FROM PS_GPBR_AVG_WA W5
WHERE W5.EMPLID         = $Emplid
AND   W5.EMPL_RCD       = #EmplRcd
AND   W5.CAL_RUN_ID     = $CalRunID
AND   W5.GP_PAYGROUP    = $GPPayGroup
AND   W5.RSLT_SEG_NUM   = #RsltSegNum
AND   W5.CAL_ID         = $CalID
AND   W5.RUN_TYPE       = $runTypeWA
AND   W5.GPBR_AVG_VERSION  = VER.GPBR_AVG_VERSION)                
End-Select                 
End-Procedure Get-Versions-Descr

begin-procedure Get-Ver-Lng
begin-select
V3.DESCR

   Let $VersionDescr = Rtrim(&V3.DESCR, ' ')

FROM PS_GPBR_AVG_V_LNG V3
WHERE V3.GPBR_AVG_VERSION = $Version
AND V3.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure Get-Ver-Lng

!**************************************
begin-procedure Get-Xlat-Value
!show '* Get-Xlat-Value *'
!**************************************
begin-select
X.XLATLONGNAME 

  Let $XlatValue = &X.XLATLONGNAME  

 
FROM  XLATTABLE_VW X
WHERE X.FIELDNAME  = $FieldName
AND   X.FIELDVALUE = $FieldValue
AND X.EFFDT = (SELECT MAX(XX.EFFDT)
               FROM XLATTABLE_VW XX
               WHERE X.FIELDNAME  = XX.FIELDNAME
               AND   X.FIELDVALUE = XX.FIELDVALUE
               AND   X.EFFDT <= $EndDt)              
end-select

begin-Select
U.XLATLONGNAME 

  Let $XlatValue   =   Rtrim(&U.XLATLONGNAME, ' ')

FROM PSXLATITEMLANG U
WHERE U.FIELDNAME   = $FieldName
  AND U.FIELDVALUE  = $FieldValue
  AND U.LANGUAGE_CD = $Curr_language_Cd
  AND U.EFFDT       = (SELECT MAX(EFFDT) 
                       FROM PSXLATITEMLANG
                       WHERE FIELDNAME = U.FIELDNAME
                       AND FIELDVALUE = U.FIELDVALUE
                       AND LANGUAGE_CD = U.LANGUAGE_CD
                       AND EFFDT <= $EndDt)
End-Select




end-procedure Get-Xlat-Value

!**************************************
begin-procedure Get-Versions-Hdr
#debug show '* Get-Versions-Hdr *'
#debug show '$Emplid: ' $Emplid
#debug show '#EmplRcd: ' #EmplRcd
#debug show '$CalRunID: ' $CalRunID
#debug show '$GPPayGroup: ' $GPPayGroup  
#debug show '$CalID: ' $CalID
#debug show '#RsltSegNum: ' #RsltSegNum
#debug show '$RunType: ' $RunType


!**************************************
Clear-array name = ArrayVersions 
Let $Part = '2'
Let #13Th =0
  
Let #13ThFirst = 0
Let #13ThProrate = 0
BEGIN-SELECT DISTINCT
GP.PIN_NM
AVE.GPBR_AVG_VERSION
AVE.BGN_DT
AVE.END_DT 
AVE.GPBR_DIVIDE_NBR 
AVE.GPBR_HIGHEST
AVE.GPBR_13TH
AVE.GPBR_13TH_AVG_PAY
AVE.GPBR_PRORATE_VAL
AVE.HOURLY_RT
AVE.RUN_TYPE
AVE.PIN_NUM
AVE.CALC_RSLT_VAL
                  
   Let #ItemE = 1

   While #ItemE <= #CountElem 
       Let $version = '' 
       get #PinErn #AmtErn #UnitErn #PinAmtNum $Type $Version $bgnDateWA $endDateWA from ArrayErns(#ItemE) Ecode Eamt Eunit EAcode EType EVersion EBeginDt EendDt       
  
       if rtrim($Version, ' ') <> ''
     
          IF #PinErn = &AVE.PIN_NUM 

            If $endDateWA = ''
                Let $endDateWA = &AVE.END_DT  
            end-If
         
     
             Add 1 to #CountVer                                      
         
             Let $EndDate   = &AVE.END_DT  
           
           if $endDateWA = $EndDate 
           
             Let $BgnDate   = &AVE.BGN_DT 
             Let #DivideNbr = &AVE.GPBR_DIVIDE_NBR
             Let #13Th      = &AVE.GPBR_13TH
             Let #HourlyRtHdr  = &AVE.HOURLY_RT
             Let $runTypeWA = &AVE.RUN_TYPE
             Let #CalcRsltVal = &AVE.CALC_RSLT_VAL                 

             Do Get-Version-Descr
         
             Let #13ThFirst = &AVE.GPBR_13TH_AVG_PAY
             Let #13ThProrate = &AVE.GPBR_PRORATE_VAL
        
            put $Version $VersionDescr #DivideNbr #13Th #13ThFirst #13ThProrate #HourlyRtHdr $EndDate $BgnDate $runTypeWA #CalcRsltVal #AmtErn into ArrayVersions(#CountVer) -
            VVersion VDescr        VDivideNbr  V13th V13thfirst V13thprorate VHourlyRt VendDate VbgnDate VrunType VVerAmt VAmountErn
          
            Let #ItemE = #CountElem 
         End-if 
         end-if  
       end-if
     
          Add 1 to #ItemE
     
  End-While
                                           
FROM  PS_GPBR_AVG_HDR_WA AVE  
     ,PS_GP_PIN GP
WHERE AVE.EMPLID           = $Emplid                                                        
AND   AVE.EMPL_RCD       = #EmplRcd                                                  
AND   AVE.CAL_RUN_ID     = $CalRunID                                                  
AND   AVE.GP_PAYGROUP    = $GPPayGroup                                                  
AND   AVE.RSLT_SEG_NUM   = #RsltSegNum
AND   AVE.CAL_ID         = $CalID
AND   AVE.ORIG_CAL_RUN_ID = $origCalRunID
AND   AVE.CALC_RSLT_VAL = (SELECT MAX(A1.CALC_RSLT_VAL) 
                           FROM PS_GPBR_AVG_HDR_WA A1 
                           WHERE A1.EMPLID      = $Emplid                                                        
                           AND   A1.EMPL_RCD    = #EmplRcd                                                  
                           AND   A1.CAL_RUN_ID  = $CalRunID                                                  
                           AND   A1.GP_PAYGROUP = $GPPayGroup  
                           AND   A1.ORIG_CAL_RUN_ID = $origCalRunID
                           AND   A1.RSLT_SEG_NUM = #RsltSegNum
                           AND   A1.CAL_ID  = $CalID
                           AND   A1.END_DT = AVE.END_DT
                           AND   A1.PIN_NUM = AVE.PIN_NUM)
AND   AVE.PIN_NUM = GP.PIN_NUM
AND   GP.COUNTRY = 'BRA'
ORDER BY AVE.GPBR_AVG_VERSION
end-select
End-Procedure Get-Versions-Hdr

!**************************************
begin-procedure Get-Versions-Detail
#debug show '* Get-Versions-Detail'
#debug show '$CalRunID ' $CalRunID
#debug show '$GPPayGroup ' $GPPayGroup
#debug show '$Version ' $Version
#debug show '$emplid: ' $emplid
#debug show '#RsltSegNum ' #RsltSegNum
#debug show '  #PinNum ' #PinNum
! If Avg Type = Units
!show '$runTypeWA :  ' $runTypeWA
!    sum(units) * hourly rate / divisor
!**************************************
Let $Part = '2'
Let #AvgCount   = 0
Let #TotalUnits = 0

begin-select
W5.PIN_NUM
W5.END_DT              &W5.END_DT
W5.GPBR_CORRECT_ID
W5.HOURLY_RT
SUM(W5.UNIT_RSLT_VAL)   &W5.UNIT_RSLT_VAL
SUM(W5.RATE_RSLT_VAL)   &W5.RATE_RSLT_VAL
SUM(W5.PCT_RSLT_VAL)    &W5.PCT_RSLT_VAL
SUM(W5.BASE_RSLT_VAL)   &W5.BASE_RSLT_VAL
SUM(W5.CALC_ADJ_VAL)    &RSLT5.CALC_ADJ_VAL 

  Let #CorrectAmt     = &RSLT5.CALC_ADJ_VAL 
  Let $endDateWA      = &W5.END_DT
    
  Let #Unit       = &W5.UNIT_RSLT_VAL
  Let #Rate       = &W5.RATE_RSLT_VAL
  Let #Perc       = &W5.PCT_RSLT_VAL
  Let #AmtBase    = &W5.BASE_RSLT_VAL
  Let #HourlyRt   = &W5.HOURLY_RT
    
  Let #TotalUnits = #TotalUnits + #Unit
  Let #AvgCount   = #AvgCount + 1 
   
  if #AmtBase <> 0
     Let #VersionAmt  = #VersionAmt +  #AmtBase
  else
     Let #VersionAmt  = #VersionAmt +  #CorrectAmt
  end-if
  
    
  If $endDateWA <> ''
     Do convert-to-dtu-date($endDateWA,$endDateWA)
  end-if
  
  Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
  print $endDateWA                      (+1,#R2)  
  If #Unit <> 0
      ! if #Perc <> 0
      !    let  #Unit = (#Unit / #Perc)  * 100
      ! end-if
       print #Unit                       (,#R3b)   edit 9,999,999.99
  else
       Let #Unit = 0
       print #Unit                       (,#R3b)   edit 999999999 
  end-if
  
  If #Rate <> 0
       print #Rate                       (,#R4b)   edit $9,999,999,999.99C 
  else
       Let #Rate = 0
       print #Rate                       (,#R4b)   edit 999999999
  end-if
  
  If $AvgType <> '30'
        print #Perc                      (,#R5b)   edit 999  
  end-if
  
  If #AmtBase <> 0
      print #AmtBase                    (,#R6b)   edit $9,999,999,999.99C 
  end-if
  
  If #CorrectAmt <> 0
     print #CorrectAmt                    (,#R7b)  edit $9,999,999,999.99C 
     print &W5.GPBR_CORRECT_ID            (,+3)
     If $CorrectAmt = '30'
        print #HourlyRt                   (,#R8b)  edit $9,999,999,999.99C 
     end-if
  end-if
      
  Let #CorrectAmt     = 0
  Let #AmtBase    = 0
  Let #Unit       = 0
  Let #Rate       = 0
  Let #Perc       = 0  
  
  
FROM PS_GPBR_AVG_WA W5
WHERE W5.EMPLID         = $Emplid
AND   W5.EMPL_RCD       = #EmplRcd
AND   W5.CAL_RUN_ID     = $CalRunID
AND   W5.GP_PAYGROUP    = $GPPayGroup
AND   W5.RSLT_SEG_NUM   = #RsltSegNum
AND   W5.CAL_ID         = $CalID
AND   W5.RUN_TYPE       = $runTypeWA
AND   W5.GPBR_AVG_VERSION  = $Version
AND   W5.PIN_NUM        = #PinNum
[$Condition02]
GROUP BY W5.PIN_NUM, W5.END_DT, W5.GPBR_CORRECT_ID, W5.HOURLY_RT
ORDER BY W5.PIN_NUM, W5.END_DT, W5.GPBR_CORRECT_ID, W5.HOURLY_RT
end-select
Let $PrintDtl = 'N'
End-Procedure Get-Versions-Detail


!**************************************
begin-procedure Get-AcumMbrs-Amount
!show '* Get-AcumMbrs-Amount *'
!show '   #EmplRcd:  ' #EmplRcd
!show '   $CalRunID: ' $CalRunID
!show '   $FormatID: ' $FormatID
!show '   $FormatEffdt: ' $FormatEffdt
!show '   $GPPayGroup: '  $GPPayGroup
!show '   $RunType:    ' $RunType
!show '   #RsltSegNum: ' #RsltSegNum
!SHOW '   $CalId:      ' $CalID
!show ' Pin: ' #PinAmtNum
!**************************************
begin-select
RAC.PIN_NM
RAC.PIN_NUM
SUM(RAC.CALC_RSLT_VAL) &RAC.CALC_RSLT_VAL 
SUM(RAC.CALC_ADJ_VAL)  &RAC.CALC_ADJ_VAL 
SUM(RAC.UNIT_RSLT_VAL) &RAC.UNIT_RSLT_VAL
SUM(RAC.UNIT_ADJ_VAL)  &RAC.UNIT_ADJ_VAL

  Let #PinNum     = &RAC.PIN_NUM
  Let #CalcRsltVal     = &RAC.CALC_RSLT_VAL  
  Let #AmtAdj     = &RAC.CALC_ADJ_VAL   
  Let #UnitVal    = &RAC.UNIT_RSLT_VAL  
  Let #UnitAdj    = &RAC.UNIT_ADJ_VAL 
  Let #CalcRsltVal     = #CalcRsltVal + #AmtAdj
  Let #UnitVal    = #UnitVal   + #UnitAdj
 
    
  Do Get-Pin-Descr

  print $PinName                       (+1, 31,22)  
  print $PinDescr                      (,61,25) 
  
  Do Get-Averages-WA
  print $Version                       (,91,29) 
  print #CalcRsltVal                        (,121)   edit $9,999,999,999.99C 

  Add 1 to #CountAcum
  
FROM PS_GP_RSLT_ED_VW RAC, 
     PS_GP_ACM_MBR AC
WHERE AC.PIN_NUM         = #PinAmtNum
AND   AC.PIN_MBR_NUM    = RAC.PIN_NUM
AND   RAC.PIN_TYPE       = 'ER'
AND   RAC.EMPLID         = $Emplid
AND   RAC.EMPL_RCD       = #EmplRcd
AND   RAC.CAL_RUN_ID     = $CalRunID
AND   RAC.GP_PAYGROUP    = $GPPayGroup
AND   RAC.RSLT_SEG_NUM   = #RsltSegNum
AND   RAC.CAL_ID         = $CalID
GROUP BY RAC.PIN_NM ,RAC.PIN_NUM
ORDER BY RAC.PIN_NM ,RAC.PIN_NUM
end-select
End-Procedure Get-AcumMbrs-Amount

!**************************************
begin-procedure Select-Estab-Id
!show '* Select-Estab-Id **'
!**************************************

Begin-Select
A.ESTAB_ID_BRA

  Let #CNPJ = &A.ESTAB_ID_BRA
  Let $CNPJ  = EDIT(#CNPJ,'00000000000000')
  
FROM  PS_ESTAB_ID_BRA A
     ,PS_ESTAB_TBL_BRA A2
WHERE A.ESTABID = $EstabId
AND   A.ESTABID = A2.ESTABID
AND   A.COUNTRY = 'BRA'
AND   A.COUNTY_CD_BRA  = A2.COUNTY_CD_BRA
AND   A.EFFDT = A2.EFFDT
AND   A.ESTAB_ID_TYPE_BRA = 'CNPJ'
End-Select
End-Procedure Select-Estab-Id

!**************************************
begin-procedure Get-Version-Descr
#debug  show '* Get-Version-Descr'
#debug show ' $Version: '  $Version
!**************************************
Let $VersionDescr  = ''
Begin-Select
V2.DESCR

  Let $VersionDescr = &V2.DESCR
  Do Get-Ver-Lng
  
FROM PS_GPBR_AVG_VERS V2
WHERE V2.GPBR_AVG_VERSION = $Version
end-Select
!show '$VersionDescr: '  $VersionDescr

end-procedure Get-Version-Descr

!**************************************
begin-procedure Print-Part-I
#debug show 'Print-Part-I'
!**************************************
 Let #ItemE = 1

 While #ItemE <= #CountElem 
     Let $version = '' 
     Let $UnionCD1 = '' 
     Let $Part = '1'
     get #PinErn #AmtErn #UnitErn #PinAmtNum $Type $Version $UnionCD1 $bgnDateWA $endDateWA  from ArrayErns(#ItemE) Ecode Eamt Eunit EAcode EType EVersion EUnion EBeginDt EendDt
   
     Let #PinNum = #PinErn
     do Get-Pin-Descr
          
     Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
     Print $PinName                    (+2,1,20) 
     Print $PinDescr                   (   ,22,20)  
     print $UnionCD1                    (   ,47)  
     Print #AmtErn                    (   ,121)  edit $9,999,999,999.99C 
    
     Do Get-Version-Descr

     If $Type = 'A'       
        Let #PinNum     = #PinAmtNum 
        
        Do Get-Pin-Descr
        
        print $PinName                    (+1,61)  Bold
        print $PinDescr                   (,91,25)   Bold 
        
        Do Get-AcumMbrs-Amount
        
        graphic                           (+1, 31,110) horz-line 4 
        print ' '                         (+2,1)

        Add 3 to #Lines
     else
        Print $version                     (,61)
        Print $VersionDescr                (,91,25)
           
        if rtrim($endDateWA, ' ') <> ''
           and rtrim($bgnDateWA, ' ') <> ''
              
           Do Format-DateTime($bgnDateWA, $DateOut,{DEFDMY}, '','')
            
           print $DateOut                  (+1,11)  
           print ' -'                       (,+2)  
           Do Format-DateTime($endDateWA, $DateOut,{DEFDMY}, '','')
           print $DateOut                  (,+1)   
           Add 1 to #Lines
        end-if
     end-if
     
     Add 1 to #ItemE
     
  End-While
  
 
end-procedure Print-Part-I

!**************************************
begin-procedure Print-Part-II
#debug show '* Print-Part-II *'
!**************************************
 #debug show '#CountVer  ' #CountVer
 let $EndDtWA = ' '
 let $BgnDtWA = ' '
 
 If #CountVer > 0
   new-page  
   Let #ItemV = 1 
  
   While #ItemV <= #CountVer  
     
     Let $Part = '2'
    
        get $Version $VersionDescr #DivideNbr #13Th #13ThFirst #13ThProrate #HourlyRtHdr $EndDtWA $BgnDtWA $runTypeWA #CalcRsltVal #Amount_ern from ArrayVersions(#ItemV) -
         VVersion VDescr VDivideNbr V13th V13thfirst V13thprorate VHourlyRt VendDate VbgnDate VrunType VVerAmt VAmountErn
         if rtrim($Version, ' ') <> ''
         #debug show  '  $Version: ' $Version ' ' $VersionDescr ' ' $EndDtWA ' ' $BgnDtWA  
                          
         Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
         
         Print $Version                       (+1,1)  Bold
         Print $VersionDescr                  (,31,30)  Bold   
         
         if rtrim($EndDtWA, ' ') <> ''
            and rtrim($BgnDtWA, ' ') <> ''
            
            Do Format-DateTime($BgnDtWA, $DateOut,{DEFDMY}, '','')               
            Print $DateOut                    (,71,30)  Bold  
            Print '-'                         (,83,30)  Bold   
            Do Format-DateTime($EndDtWA, $DateOut,{DEFDMY}, '','')
            Print $DateOut                    (,85,30)  Bold              
            
            Let $Condition02 = ' AND W5.END_DT >= ' || '''' || $BgnDtWA || '''' || ' AND W5.END_DT <= ' || '''' || $EndDtWA || ''''
            
            Let $EndDtWA   = ''
            Let $BgnDtWA   = ''
         else
             Let $Condition02 = ' '
         end-if
    
       
          Let #AvgTotal = 0

     Do Get-Versions-Descr
       
     print ' '                            (+1,)
     end-if
     Add 1 to #ItemV
    
  End-While
end-if
  
end-procedure Print-Part-II

!**************************************
begin-procedure Print-Version-Detail
#debug show '* Print-Version-Detail *'
!*************************************

  Let #PinNum = #AvgPinNum 
  Do Get-Pin-Descr
    
  Alter-printer Point-size = #Sizestd  Font-Type = Proportional Font = #FontStd
  print $PinName                       (+1, 11,22) Bold 
  print $PinDescr                      (,31,41)  Bold 
  Print #HourlyRtHdr                   (,65) edit $9,999,999,999.99C Bold
  
  Alter-printer Point-size = 7  Font-Type = Proportional Font = #FontStd
  print $PeriodType                    (+2,1)  
  print $AvgTypeText                   (,21)  
  print $FromDate                      (,41) 
  print ','                            (,+1)  
  print $ToDate                        (,55)   
  print $DivideInd                     (,65)
  
  If #Frequency <> 0
     print #Frequency                  (,#R9) edit 999999
  end-if
  If #Highest <> 0
     print #Highest                    (,110) edit 999999
  end-if
  print $CorrectText                   (,125)
  
  print 'Data Final'                (+1,#R2)
  print 'Unidades'                  (,#R3) 
  print 'Valor Unitário'            (,#R4) 
  print '%'                         (,#R5)
  print 'Valor'                     (,#R6)
  print 'Ind. Corr'                 (,#R7) 
  print 'Salário Hora'              (,#R8) 
  graphic                           (,#R2,126) horz-line 10 
  
  Do Get-Versions-Detail  
      
  If #VersionAmt <> 0
     print 'Total'                  (+1,#R2)
     print #VersionAmt              (,#R4b) edit $9,999,999,999.99C 
         If #Highest <> 0
            Let #DivideNbr = #Highest
         else
            print 'Divisor'         (,#R6b)
            print #DivideNbr        (,100)
         end-if
         if #Frequency > 0
            print 'Occurrencies'    (,110)
            print #AvgCount         (,125)
         End-if
  
         If #13Th = 1 
         
           Let #print13 = 1
            If #13ThFirst = 1
               Print '13 Salário 1ra Parcela'   (+1,#R2) 
               Let #VersionAmt = round(#VersionAmt / 2,2)
               Print #VersionAmt                (,60) edit $9,999,999,999.99C 
            else 
               Print '13 Salário 2da Parcela'   (+1,#R2)
            end-if
         End-if
         
         if #CalcRsltVal <> #Amount_ern 
             Let #13ThProrate =  #Amount_ern / #CalcRsltVal
         else
            Let #13ThProrate = 1 
         end-if

   if #13ThProrate <> 1 
        if #13Th = 1
         Print 'Prorateo: '            (+,#R6b)                   
        else
         Print 'Prorateo: '            (+1,#R6b)                   
        End-If
        
        Print #13ThProrate               (,95)  edit 9,999.999999C 
   End-If     
        print 'Valor de Media'        (+1,#R2)         
                        
         iF #DivideNbr > 0 and 
            #13ThProrate <> 0
            Let #AvgAmount = (#VersionAmt / #DivideNbr) * #13ThProrate
         else
            Let #AvgAmount = #VersionAmt / 1
         end-if         
        
         print #AvgAmount              (,#R4b) edit $9,999,999,999.99C 
         print ' '        (+1,1)  
         
        ! Let #AvgTotal = #AvgTotal + #AvgAmount 
            
         Let #VersionAmt = 0
         Let #AvgCount   = 0
    end-if
         
End-Procedure Print-Version-Detail

!**************************************
begin-procedure  Get-Company-Descr
#debug show '* Get-Company-Descr *'
!**************************************
Let $CompanyNm = ''
 
begin-select
C.DESCR
  
  Let $CompanyNm  = Rtrim(&C.DESCR, ' ')
 
from PS_COMPNY_TBL_LANG C
WHERE C.COMPANY = $Company
AND   C.LANGUAGE_CD = $Curr_language_Cd
AND   C.EFFDT = (SELECT MAX(C1.EFFDT) 
                  FROM PS_COMPANY_TBL C1
                  WHERE C1.COMPANY = C.COMPANY
                  AND C1.EFFDT <= $EndDt)
end-select

If $CompanyNm = ''

begin-select
CO.DESCR
  
  Let $CompanyNm  = Rtrim(&CO.DESCR, ' ')
 
from PS_COMPANY_TBL CO
WHERE CO.COMPANY = $Company
AND   CO.EFFDT = (SELECT MAX(C.EFFDT) 
                  FROM PS_COMPANY_TBL C
                  WHERE C.COMPANY = CO.COMPANY
                  AND C.EFFDT <= $EndDt)
end-select

End-If
end-procedure   Get-Company-Descr

!**************************************
begin-procedure Get-Establishment-Data
#debug show '* Get-Establishment-Data *'
!**************************************
Let $EstabIDDescr   = ''


Begin-Select
E.DESCR

  Let $EstabIDDescr   = Ltrim(Rtrim(&E.DESCR, ' '), ' ')
  Do Select-Estab-Id

     
FROM PS_ESTAB_TBL E
WHERE E.ESTABID = $Estabid
AND E.EFFDT = (SELECT MAX(EFFDT) 
               FROM PS_ESTAB_TBL
               WHERE ESTABID = E.ESTABID
               AND   EFFDT <= $EndDt)
End-Select

Begin-Select
EL.DESCR

  Let $EstabIDDescr   = Ltrim(Rtrim(&EL.DESCR, ' '), ' ')

     
FROM PS_ESTAB_TBL_LANG EL
WHERE EL.ESTABID = $Estabid
AND   EL.LANGUAGE_CD = $Curr_language_Cd
AND EL.EFFDT = (SELECT MAX(EFFDT) 
               FROM PS_ESTAB_TBL_LANG
               WHERE ESTABID = EL.ESTABID
               AND   EFFDT <= $EndDt)
End-Select

Let $EstabIDDescr = Substr($EstabIDDescr,1,30) || ' /'
End-Procedure Get-Establishment-Data

!**************************************
begin-procedure  Get-Pin-Descr
#debug show '** Get-Pin-Descr **'
!**************************************
Let $PinDescr = ''
Let $PinName = ''
  Let $pin_code = ''

begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  Let $PinName  = Rtrim(&PD.PIN_NM, ' ')
  Let $PinDescr = Rtrim(&PD.DESCR, ' ')
  MOVE &PD.PIN_CODE TO $pin_code
  Let $pin_code = RTRIM($pin_code,' ')
  Do Get-Pin-Descr-Lang
from PS_GP_PIN PD
WHERE PD.PIN_NUM = #PinNum
end-select
end-procedure   Get-Pin-Descr

begin-procedure  Get-Pin-Descr-Lang
begin-select
PDL.DESCR
   Let  $PinDescr =  &PDL.DESCR
from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #PinNum
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select

#debug show '$PinDescr: '  $PinDescr
end-procedure   Get-Pin-Descr-Lang

!**************************************
Begin-Procedure Get-Department-Descr
#debug show '* Get-Department-Descr *'
!**************************************
Let $DeptIDDescr = ''
Begin-Select
DP.DESCR

  Let $DeptIDDescr = &DP.DESCR
  
  
FROM PS_DEPT_TBL_LANG DP
WHERE DP.DEPTID = $DeptId 
AND DP.SETID = $SetIDDeptid  
AND DP.LANGUAGE_CD = $Curr_language_Cd   
AND DP.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEPT_TBL_LANG
                WHERE DEPTID = DP.DEPTID 
                AND SETID = DP.SETID
                AND LANGUAGE_CD = DP.LANGUAGE_CD 
                AND EFFDT <= $EndDt)   
End-Select

IF $DeptIDDescr = ''
Begin-Select
DP1.DESCR

  Let $DeptIDDescr = &DP1.DESCR 

FROM PS_DEPT_TBL DP1
WHERE DP1.DEPTID = $DeptId 
AND DP1.SETID = $SetIDDeptid  
AND DP1.EFFDT = (SELECT MAX(EFFDT) 
                 FROM PS_DEPT_TBL 
                 WHERE DEPTID = DP1.DEPTID
                 AND SETID = DP1.SETID  
                 AND EFFDT <= $EndDt)
          
End-Select
End-If
End-Procedure Get-Department-Descr

!**************************************
begin-procedure Get-JobCode-Descr
 Let $JobCodeDescr = ''
begin-select
JC.DESCR
  Let $JobCodeDescr = &JC.DESCR
from PS_JOBCODE_LANG JC
where JC.SETID = $SetIDJobCode
AND   JC.JOBCODE = $JobCode
AND   JC.LANGUAGE_CD = $Curr_language_Cd
AND   JC.EFFDT =  (SELECT MAX(EFFDT) FROM PS_JOBCODE_LANG
                   WHERE SETID = JC.SETID
                   AND   JOBCODE = JC.JOBCODE
                   AND   LANGUAGE_CD = JC.LANGUAGE_CD
                   AND   EFFDT <= $EndDt)
end-select
IF $JobCodeDescr  = ''
begin-select
JC1.DESCR
JC1.UNION_CD
  
      MOVE &JC1.DESCR TO $JobCodeDescr
  
from PS_JOBCODE_TBL JC1
where JC1.SETID = $SetIDJobCode
AND   JC1.JOBCODE = $JobCode
AND   JC1.EFFDT =  (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL
        WHERE SETID = JC1.SETID
        AND   JOBCODE = JC1.JOBCODE
        AND   EFFDT <= $EndDt)
AND   JC1.EFF_STATUS = 'A'
end-select
End-If
end-procedure Get-JobCode-Descr


!**************************************
begin-procedure Get-Union-Descr
 Let $UnionCDDescr = ''
begin-select
U.DESCR
  Let $UnionCDDescr = &U.DESCR
from PS_UNION_TBL_LANG U
where U.UNION_CD = $UnionCD
AND   U.LANGUAGE_CD = $Curr_language_Cd
AND   U.EFFDT =  (SELECT MAX(EFFDT) 
                  FROM PS_UNION_TBL_LANG
                  WHERE UNION_CD = U.UNION_CD
                  AND   LANGUAGE_CD = U.LANGUAGE_CD
                  AND   EFFDT <= $EndDt)
end-select
IF $UnionCDDescr  = ''
begin-select
UN.DESCR
  
      MOVE &UN.DESCR TO $UnionCdDescr
  
from PS_UNION_TBL UN
where UN.UNION_CD = $UnionCd
AND   UN.EFFDT =  (SELECT MAX(EFFDT) FROM PS_UNION_TBL
        WHERE UNION_CD = UN.UNION_CD
        AND   EFFDT <= $EndDt)
end-select
End-If
end-procedure Get-Union-Descr

!**************************************
begin-procedure Get-CalRunID-Descr
begin-select
DESCR

  Let $CalRunIDDescr = Rtrim($CalRunID,' ') || ' - ' || Rtrim($CalID, ' ') || '   ' || Rtrim(&DESCR, ' ')

FROM PS_GP_CAL_RUN 
WHERE CAL_RUN_ID = $CalRunID
end-select

end-procedure Get-CalRunID-Descr

!**************************************
begin-procedure Get-RunType-Descr
#debug show 'Get-RunType-Descr'
Let $RunTypeDescr = ''

begin-select
RTL.DESCR

   Let $RunTypeDescr = Rtrim($RunType,' ') || ' ' || Rtrim(&RT.DESCR, ' ')

FROM PS_GP_RUN_TYP_LANG RTL
WHERE RTL.RUN_TYPE = $RunType
AND   RTL.LANGUAGE_CD =$Curr_language_Cd
end-select

if $RunTypeDescr = ''
begin-select
RT.DESCR

   Let $RunTypeDescr = Rtrim($RunType,' ') || ' ' || Rtrim(&RT.DESCR, ' ')

FROM PS_GP_RUN_TYPE RT
WHERE RT.RUN_TYPE = $RunType
end-select
end-if
end-procedure Get-RunType-Descr

!**************************************
begin-procedure Period-Dates 
#debug show '* Period-Dates'
#debug show '  $bgnDateWAWhere ' $bgnDateWAWhere

If $bgnDateWAWhere <> ''
     Do Valid-Date($bgnDateWAWhere, $validDate, $DateOut, $validDate)
   
     If $validDate = 'Y'    
       Let $Condition01 = ' AND W1.BGN_DT = ' || '''' || $DateOut || ''''
       Let $bgnDateWAWhere   = ''     
    end-if 
end-if

#debug show '  $Condition01: ' $Condition01

end-procedure Period-Dates

!**************************************
begin-procedure Valid-Date($DateIn, $validDate,:$DateOut, :$validDate)
#debug show '* Valid-Date'
#debug show '  $DateIn: '  $DateIn

 Let $validDate = 'N'
 Let $DateOut = ''
 Let #validYear = to_number(substr($DateIn,1,4 ))

   
 if #validYear > 1900 
   Let #validMonth = to_number(substr($DateIn,6,2 ))   
   
   if #validMonth > 0 and
      #validMonth < 13
       Let #validDay = to_number(substr($DateIn,9,2 ))  
       
       if #validDay > 0 and
          #validDay < 32     
          
           Do convert-from-dtu-date($DateIn,$DateOut)
           Let $validDate = 'Y'
       end-if
   end-if
 end-if  
 
end-procedure Valid-Date

!**************************************
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date AND time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#include 'hrsecty.sqc'   !Get SQR Security parameters
#Include 'useprntr.sqc'  !Indicate which printer to use for reports
