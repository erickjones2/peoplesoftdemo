!*******************************************
!  PAY011:  Payroll Error Messages         *
!*******************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2014, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2014/08/25:10:39:47                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Process-WC-Parameters
  if $WC_Del_RunID = 'Y'
    do Delete-WC-RunID
  else
    do Process-Main
  end-if
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move 'PAY011' to $ReportID

  move 'PAY011' to $WC_ProgramSrc

  do Init-DateTime
  do Init-Number
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.
  move $Pay011_ReportTitle to $ReportTitle
  display $ReportTitle

  if $Prcs_Process_Instance = ''
    input $RunID maxlen=3 'Enter Payroll Run ID' type=char
    uppercase $RunID
  else
    do Select-Parameters
    let $RunID = $RC_PAY.Run_ID
    let $WCRunOption = $RC_PAY.WC_RUN_OPTION
  end-if

  do Get-Current-DateTime
  do Array-Initialization
end-procedure

! This procedure is used to read language-dependent text from the database.
begin-procedure Report-Translation
! Read from PAY011  program id
   do Init_Report_Translation($ReportID,$Language_Cd)
   do Append_Report_Translation('HR')


   do Get_Field_Information ('PAY011', 'REPORT_TITLE',      $Pay011_ReportTitle,   #dummy_width)
   do Get_Field_Information ('PAY011', 'GR_TOT_MSG',        $Pay011_Gr_Tot_Msg,    #dummy_width)
   do Get_Field_Information ('PAY011', 'CMP_TOT_MSG',       $Pay011_Cmp_Tot_Msg,   #dummy_width)
   do Get_Field_Information ('PAY011', 'PAYPER_TOT_MSG',    $Pay011_PayPer_Tot_Msg,#dummy_width)
   do Get_Field_Information ('PAY011', 'PAYGRP_TOT_MSG',    $Pay011_PayGrp_Tot_Msg,#dummy_width)
   do Get_Field_Information ('PAY011', 'EMPNM',             $Pay011_EmpNm,         #dummy_width)
   do Get_Field_Information ('PAY011', 'EMPID',             $Pay011_EmpId,         #dummy_width)
   do Get_Field_Information ('PAY011', 'DEPTID',            $Pay011_DeptId,        #dummy_width)
   do Get_Field_Information ('PAY011', 'PGLINE',            $Pay011_PgLine,        #dummy_width)
   do Get_Field_Information ('PAY011', 'SEPCHK',            $Pay011_SepChk,        #dummy_width)
   do Get_Field_Information ('PAY011', 'MSGID',             $Pay011_MsgId,         #dummy_width)
   do Get_Field_Information ('PAY011', 'MSG',               $Pay011_Msg,           #dummy_width)

   do Get_Field_Information ('HR',     'BUS_UNIT1',         $HR_Bus_Unit1,         #dummy_width)
   do Get_Field_Information ('HR',     'BUS_UNIT2',         $HR_Bus_Unit2,         #dummy_width)
end-procedure

begin-procedure Array-Initialization
  create-array name=Totals size=5 -
    field=TotalName:char field=total:number:1 field=startCol:number:1

  put $Pay011_Gr_Tot_Msg     into Totals(1) TotalName
  put $Pay011_Cmp_Tot_Msg    into Totals(2) TotalName
  put $Pay011_PayPer_Tot_Msg into Totals(3) TotalName
  put $Pay011_PayGrp_Tot_Msg into Totals(4) TotalName

  put 77 into Totals(0) startCol(0)
end-procedure


begin-heading 8

  #Include 'stdhtr06.sqc'
  print $Hr_Bus_Unit1         (+2,58)
  print $Pay011_EmpNm         (+1,1)
  print $Pay011_EmpId         (0,33)
  print $Pay011_DeptId        (0,46)
  print $Hr_Bus_Unit2         (0,60)
  print $Pay011_PgLine        (0,69)
  print $Pay011_SepChk        (0,79)
  print $Pay011_MsgId         (0,90)
  print $Pay011_Msg           (0,102)
end-heading


BEGIN-PROCEDURE Process-Main
begin-SELECT
A.COMPANY    () on-break print=never level=1 procedure=Company-Change
A.PAY_END_DT () on-break print=never level=2 procedure=PayEndDate-Change

A.PAYGROUP   () on-break print=never level=3 procedure=PayGroup-Change
A.OFF_CYCLE
A.PAGE_NUM            (2,68) EDIT 99999
A.LINE_NUM            (2,75) EDIT 999
A.SEPCHK              (2,80) EDIT 99
A.MSGID               (2,90)
C.DESCR
C.DESCRLONG
A.MSGDATA1
A.MSGDATA2
A.MSGDATA3

  if $WC_Refresh  = 'Y'
    do Initialize-WC-fields

    move &A.Company    to $WC_Company
    move &A.PayGroup   to $WC_PayGroup
    move &A.Pay_End_Dt to $WC_PayEndDt
    add 1              to #WC_Audit_SeqNum
    do Get-Country
  end-if

                move &C.DESCR     to $PRNT_DESCR
                move &C.DESCRLONG to $PRNT_DESCRLONG
         if $Curr_language_cd <> $Psoptions_Language_Cd
        do Lang-Record-Details
         end-if

  if &A.PAGE_NUM <> 0
     if &A.MSGID = '000022'
         and &A.OFF_CYCLE = 'Y'

        let $Emplid = rtrim(&A.MSGDATA2, ' ')
        let $Empl_Rcd = rtrim(&A.MSGDATA3, ' ')
        do Get-Employee-Data
        print $Name               (2,1,30)
        print $Emplid             (2,33)

        if $WC_Refresh  = 'Y'
          if rtrim($Name, ' ')      <> ''
            move $Name              to $WC_EmplName
          end-if

          if rtrim($Emplid, ' ' )   <> ''
            move $Emplid            to $WC_EmplID
          end-if

        end-if

     else
        do Get-PayLine-Data
        print &B.Name             (2,1,30)
        print &B.EmplID           (2,33)

        if $WC_Refresh  = 'Y'
          if rtrim(&B.NAME, ' ' )   <> ''
            move &B.NAME            to $WC_EmplName
          end-if
          if rtrim(&B.EMPLID, ' ' ) <> ''
            move &B.EMPLID          to $WC_EmplID
          end-if
        end-if

     end-if

    print $DeptId             (2,46)
    print $Business_Unit      (2,60)
  end-if

  print $PRNT_DESCR                (2,102)
  print $PRNT_DESCRLONG            (3,102) WRAP 75 10

  let $msgdata = RTRIM(&A.Msgdata1, ' ')
  if $msgdata > ' '
     concat ';' with $msgdata
  end-if
  let $field   = RTRIM(&A.Msgdata2, ' ')
  if $field > ' '
     concat $field  with $msgdata
     concat ';' with $msgdata
  end-if
  let $field   = RTRIM(&A.Msgdata3, ' ')
  if $field > ' '
     concat $field  with $msgdata
  end-if
  print $Msgdata   (+1,102)
  print ' '        (0,1)
  move &A.Company    to $Company
  move &A.PayGroup   to $PayGroup

  move &A.Pay_End_Dt  to $PayEndDate
  ARRAY-ADD 1 to TOTALS(4) TOTAL(0)
  NEXT-LISTING NEED=8


  if $WC_Refresh  = 'Y'

    if rtrim($DeptId, ' ' )        <> ''
      move $DeptId            to $WC_DeptID
    end-if
    if rtrim($Business_Unit, ' ' ) <> ''
      move $Business_Unit     to $WC_BusUnit
    end-if
    move &A.PAGE_NUM          to #WC_PageNum
    move &A.LINE_NUM          to #WC_LineNum
    if rtrim(&A.OFF_CYCLE,   ' ' ) <> ''
      move &A.OFF_CYCLE       to $WC_OffCycle
    end-if
    move 0                    to #WC_AddlNbr
    move &A.SEPCHK            to #WC_SepChk
    move 0                    to #WC_EmplRcd
    if rtrim(&A.MSGID, ' ')    <> ''
      move &A.MSGID           to $WC_MessageID
    end-if
    if rtrim(&A.MSGDATA1, ' ') <> ''
      move &A.MSGDATA1        to $WC_MsgData1
    end-if
    if rtrim(&A.MSGDATA2, ' ') <> ''
      move &A.MSGDATA2        to $WC_MsgData2
    end-if
    if rtrim(&A.MSGDATA3, ' ') <> ''
      move &A.MSGDATA3        to $WC_MsgData3
    end-if

    do Build-WC-Audit-Data

  end-if

FROM  PS_PAY_MESSAGE A,
      PS_PAY_MESSAGE_TBL C

WHERE A.RUN_ID     = $RunID
  AND C.MSGID      = A.MSGID

ORDER BY A.COMPANY,
         A.PAYGROUP,
         A.PAY_END_DT,
         A.PAGE_NUM,
         A.LINE_NUM

end-SELECT


  if &A.Company = ''
    do Get-Header-Data
  end-if

  move 1 to #changeLevel
  move 'Y' to $End
  do Print-Totals

END-PROCEDURE


BEGIN-PROCEDURE Lang-Record-Details
BEGIN-SELECT
LC.DESCR
        let $PRNT_DESCR = Cond(Rtrim(&LC.DESCR,' ')='', &C.DESCR, &LC.DESCR)
LC.DESCRLONG
        let $PRNT_DESCRLONG = Cond(Rtrim(&LC.DESCRLONG,' ')='', &C.DESCRLONG, &LC.DESCRLONG)

FROM PS_PAY_MESSAGE_LNG LC

WHERE LC.MSGID       = &A.MSGID
  AND LC.LANGUAGE_CD = $Curr_language_cd

END-SELECT
END-PROCEDURE

begin-procedure Get-PayLine-Data

begin-SELECT
B.NAME
B.EMPLID
B.DEPTID
B.BUSINESS_UNIT
B.SINGLE_CHECK_USE

  move &B.DEPTID        to $DeptId
  move &B.BUSINESS_UNIT to $Business_Unit

  if &B.SINGLE_CHECK_USE <> 'C' and
     &B.SINGLE_CHECK_USE <> 'N'
     move ' ' to $DeptId
     move ' ' to $Business_Unit
  end-if

FROM  PS_PAY_LINE B
WHERE B.COMPANY    = &A.Company
  AND B.PAYGROUP   = &A.PayGroup
  AND B.PAY_END_DT = &A.Pay_End_Dt
  AND B.OFF_CYCLE  = &A.Off_Cycle
  AND B.PAGE_NUM      = &A.PAGE_NUM
  AND B.LINE_NUM      = &A.LINE_NUM
! AND B.SINGLE_CHECK_USE IN ('C', 'N')
end-SELECT

end-procedure


begin-procedure Get-Employee-Data

   move ' '  to  $Name
   move ' '  to  $DeptId
   move ' '  to  $Business_Unit

begin-SELECT
N.NAME
J.DEPTID
J.BUSINESS_UNIT

  move &N.NAME          to $Name
  move &J.DEPTID        to $DeptId
  move &J.BUSINESS_UNIT to $Business_Unit

FROM  PS_JOB J, PS_NAMES N
WHERE J.EMPLID = $Emplid
  AND J.EMPL_RCD = $Empl_Rcd
  AND J.EMPLID = N.EMPLID
  AND N.NAME_TYPE = 'PRI'
  AND N.EFFDT=
        (SELECT
          MAX(N1.EFFDT)
         FROM PS_NAMES N1
         WHERE N.EMPLID=N1.EMPLID
          AND N.NAME_TYPE = N1.NAME_TYPE
          AND N.EFFDT<= &A.PAY_END_DT)
  AND J.EFFDT=
        (SELECT
          MAX(J1.EFFDT)
         FROM PS_JOB J1
         WHERE J1.EMPLID=J.EMPLID
          AND J1.EMPL_RCD=J.EMPL_RCD
          AND J1.COMPANY = &A.COMPANY
          AND J1.PAYGROUP = &A.PAYGROUP
          AND J1.EFFDT <= &A.PAY_END_DT)
  AND J.EFFSEQ=
        (SELECT
          MAX(J2.EFFSEQ)
         FROM PS_JOB J2
         WHERE J2.EMPLID=J.EMPLID
          AND J2.EMPL_RCD=J.EMPL_RCD
          AND J2.COMPANY = J.COMPANY
          AND J2.PAYGROUP = J.PAYGROUP
          AND J2.EFFDT=J.EFFDT)
end-SELECT
end-procedure


begin-procedure Company-Change
  move 2 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayEndDate-Change
  move 3 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure PayGroup-Change
  move 4 to #changeLevel
  do Print-Totals
end-procedure


begin-procedure Print-Totals
  move 4 to #totalRow

  while #totalRow >= #changeLevel

    if #current-line > 55  !don't split a total series across pages
      new-page
    end-if

    move #totalRow to #rollRow
    subtract 1 from #rollRow
    get $TotalName from Totals(#totalRow) TotalName
    print $TotalName (+2,33)
    move 0 to #i

    while #i <= 0
      get #total from Totals(#totalRow) total(#i)
      get #startCol from Totals(0) startCol(#i)
      do Format-Number(#total, $out, '999')
      print $out (0,#startCol)
      array-add #total to Totals(#rollRow) total(#i)
      put 0 into Totals(#totalRow) total(#i)
      add 1 to #i
    end-while

    subtract 1 from #totalRow
  end-while

  if $End = 'Y'
    position (-1)
    do Reset
  end-if

  new-page
end-procedure



begin-procedure Get-Header-Data

begin-SELECT
PC.COMPANY    () on-break print=never level=1 procedure=Company-Change
PC.PAY_END_DT () on-break print=never level=2 procedure=PayEndDate-Change
PC.PAYGROUP   () on-break print=never level=3 procedure=PayGroup-Change

  move &PC.Company    to $Company
  move &PC.PayGroup   to $PayGroup
  move &PC.Pay_End_Dt to $PayEndDate

FROM  PS_PAY_CALENDAR PC
WHERE RUN_ID = $RunID
end-SELECT

end-procedure


begin-procedure Ignore
  !Dummy procedure to avoid error if no records to delete
end-procedure


begin-procedure Get-Country

begin-SELECT
PG.COUNTRY
PG.INDUSTRY_SECTOR

  let $WC_Country           = rtrim(&PG.COUNTRY, ' ')
  let $WC_Industry_Sector   = rtrim(&PG.INDUSTRY_SECTOR, ' ')

FROM PS_PAYGROUP_TBL PG
WHERE PG.COMPANY    = &A.Company
  AND PG.PAYGROUP   = &A.PayGroup
  AND PG.EFFDT     = (SELECT MAX(PG1.EFFDT)
                      FROM  PS_PAYGROUP_TBL PG1
                      WHERE PG1.COMPANY  = PG.COMPANY
                        AND PG1.PAYGROUP = PG.PAYGROUP
                        AND PG1.EFFDT   <= &A.Pay_End_Dt)

end-SELECT
end-procedure


begin-procedure Initialize-WC-fields

  move ' '   to $WC_MessageID
  move ' '   to $WC_Company
  move ' '   to $WC_PayGroup
  move ' '   to $WC_OffCycle
  move ' '   to $WC_PayEndDt
  move 0     to #WC_PageNum
  move 0     to #WC_LineNum
  move 0     to #WC_AddlNbr
  move 0     to #WC_SepChk
  move ' '   to $WC_EmplID
  move 0     to #WC_EmplRcd
  move ' '   to $WC_EmplName
  move ' '   to $WC_DeptID
  move ' '   to $WC_BusUnit
  move ' '   to $WC_Country
  move ' '   to $WC_Industry_Sector
  move ' '   to $WC_MsgData1
  move ' '   to $WC_MsgData2
  move ' '   to $WC_MsgData3
  move ' '   to $WC_Comp_RateCd
  move 0     to #WC_BalYear
  move 0     to #WC_BalPeriod
  move ' '   to $WC_OKToPay

end-procedure


begin-procedure Build-WC-Audit-Data

begin-SQL ON-ERROR = SQL-Error

INSERT INTO PS_PY_AUDITS(
 PROGRAM_SRC
,COMPANY
,PAYGROUP
,PAY_END_DT
,MESSAGE_ID
,AUDIT_SEQNUM
,OFF_CYCLE
,PAGE_NUM
,LINE_NUM
,ADDL_NBR
,SEPCHK
,BALANCE_YEAR
,BALANCE_PERIOD
,MSGDATA1
,MSGDATA2
,MSGDATA3
,COMP_RATECD
,EMPLID
,EMPL_RCD
,EMPL_NAME
,DEPTID
,BUSINESS_UNIT
,OK_TO_PAY
,RUN_ID
,OPRID
,LASTUPDDTTM
,COUNTRY_CD
,INDUSTRY_SECTOR )
VALUES
($WC_ProgramSrc
,$WC_Company
,$WC_PayGroup
,$WC_PayEndDt
,$WC_MessageID
,#WC_Audit_SeqNum
,$WC_OffCycle
,#WC_PageNum
,#WC_LineNum
,#WC_AddlNbr
,#WC_SepChk
,#WC_BalYear
,#WC_BalPeriod
,$WC_MsgData1
,$WC_MsgData2
,$WC_MsgData3
,$WC_Comp_RateCd
,$WC_EmplID
,#WC_EmplRcd
,$WC_EmplName
,$WC_DeptID
,$WC_BusUnit
,$WC_OKToPay
,$WC_RunID
,$Prcs_OprID
,{DateTimeIn-Prefix}$SysDateTime{DateTimeIn-Suffix}
,$WC_Country
,$WC_Industry_Sector )


end-SQL

end-procedure


begin-procedure Process-WC-Parameters

  do Get-WC-Install-Flag

  let $WC_Del_RunID = 'N'
  let $WC_Refresh   = 'N'

  if $Use_WC_Audit_Except = 'Y'            !install flag on

    Evaluate $WCRunOption
    When = 'R'                             !report and WC data generated
      let $WC_Refresh   = 'Y'

      move $RunID  to $WC_RunID
      do Delete-WC-RunID
      do COMMIT-TRANSACTION
      move 0 to #WC_Audit_SeqNum
      break
    When = 'D'                             !delete WC data and no report
      let $WC_Del_RunID = 'Y'
      break
    When-Other
      break
    End-Evaluate

  else
    do Delete-All-WC-Pay011
    do COMMIT-TRANSACTION
  end-if

end-procedure


begin-procedure Get-WC-Install-Flag

begin-SELECT
PY.WC_AUDIT_EXCEPTION

  move &PY.WC_AUDIT_EXCEPTION to  $Use_WC_Audit_Except

FROM  PS_INSTALLATION_PY PY
end-SELECT
end-procedure


begin-procedure Delete-All-WC-Pay011

begin-SQL on-error=Ignore

  DELETE FROM PS_PY_AUDITS
  WHERE PROGRAM_SRC     = $WC_ProgramSrc

end-SQL

end-procedure


begin-procedure Delete-WC-RunID

begin-SQL on-error=Ignore

  DELETE FROM PS_PY_AUDITS
  WHERE PROGRAM_SRC     = $WC_ProgramSrc
  AND RUN_ID            = $RunID

end-SQL

end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'reset1.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrctl2.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
