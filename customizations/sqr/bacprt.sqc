!***********************************************************************
!  BACPRT: Used for Affordable Care Act (ACA) processing               *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  25866937                                            !
!                                                                      *
!***********************************************************************
!
!***********************************************************************

begin-procedure Process-Phone-Num($Phone_In, :$Phone_Out, #PhoneLength)

  let $Phone_Out = ''
  let $Phone_In = rtrim($Phone_In, ' ')

  let #Len = length($Phone_In)

  let $Digits     = '1234567890'

  let #i = 1
  While #i <= #Len
    Let $Char  = Substr($Phone_In, #i , 1)
    Let #Found = instr($Digits, $Char, 1)
    If #Found <> 0
       Let $Phone_Out = $Phone_Out || $Char
    End-If
        Let #i = #i + 1
  End-While

  let #Len = length($Phone_Out)
  if #Len > #PhoneLength
    let $Phone_Out = substr($Phone_Out, 1, #PhoneLength)
  end-if

end-procedure


begin-procedure Remove-Special-Char($SpecialChar, $string_in, :$string_out)

  let $string_out = ''

  let $string_in = Ltrim(Rtrim($string_in,' '),' ')

    let #LocSpecChar = Instr($string_in,$SpecialChar,1)
    if #LocSpecChar > 0   !special char found in string!

      let #In_Len = Length($string_in)    !length of string
      let #i = 1

      while #i <= #In_Len

         let $string_char     = substr ($string_in, #i, 1)
         if  $string_char     <>  $SpecialChar
           let $string_out    = $string_out || $string_char
         end-if

        add 1 to #i
      end-while


    else
      ! no special char !
      let $string_out = $string_in
    end-if

end-procedure


begin-procedure Check-Tags-Validate($xmlTagIn, $string_in, :$string_out)

  let $ValidCharacters = ''

  let $string_in = Ltrim(Rtrim($string_in,' '),' ')
  let $string_out = ''
  let $xmlTagIn = rtrim($xmlTagIn, ' ')

  evaluate $xmlTagIn
    when = 'BusinessNameLine1Txt'

      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-()&'' '
      break

    when = 'BusinessNameLine2Txt'

      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/%-()&'' '
      break

    when = 'BusinessNameControlTxt'
      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-&'
      break

    when = 'AddressLine1Txt'
    when = 'AddressLine2Txt'

      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-/ '
      break

    when = 'CityNm'

      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz '
      break

    when = 'USZIPCd'
      let $ValidCharacters = '0123456789'
      break

    when = 'ForeignProvinceNm'
      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./-'' '
      break

    when = 'ForeignPostalCd'
      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789./- '
      break

    when = 'PersonFirstNm'
    when = 'PersonMiddleNm'
    when = 'PersonLastNm'
    when = 'SuffixNm'

      let $SpecialChar = ' '       ! remove adjacent spaces
      do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
      let $string_in   = $xmlValueOut

      let $ValidCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz- '
      break

    when-other
      break
  end-evaluate


  if rtrim($ValidCharacters, ' ') <> ''

    do Replace-Accented-Char($string_in, $xmlValueOut)
    let $string_in   = $xmlValueOut

    do Validate-String ($ValidCharacters, $string_in, $string_validated)
    let $string_out = $string_validated
  else
    let $string_out = $string_in
  end-if

  let $SpecialChar = ' '       ! remove adjacent spaces
  let $string_in = $string_out
  do Remove-Adjacent-Char($SpecialChar, $string_in, $xmlValueOut)
  let $string_out = Ltrim(Rtrim($xmlValueOut,' '),' ')


end-procedure


begin-procedure Validate-String($ValidCharacters, $string_in, :$string_out)

  let #I = 1
  let $String_clean = ''
  let #In_Len = Length(Rtrim($string_in, ' '))

  while #I <= #In_Len

    let $Char = Substr($string_in, #I, 1)
    let #Loc = Instr($ValidCharacters,$Char,1)
    if #Loc > 0
      let $String_clean =  $String_clean || $Char
    end-if

    add 1 To #I

  end-while

  let $string_out = $String_clean

end-procedure


begin-procedure Remove-Adjacent-Char($SpecialChar, $string_in, :$string_out)

  let $string_out  = ''

  let $string_in = Ltrim(Rtrim($string_in,' '),' ')

  let #LocSpecChar = Instr($string_in,$SpecialChar,1)
  if #LocSpecChar > 0   !special char found in string!


    let #In_Len = Length($string_in)    !length of string
    let #i = 1

    while #i <= #In_Len

      let $string_char         = substr ($string_in, #i, 1)
      if  $string_char         = $SpecialChar

        let #Out_Len   = Length($string_out)
        if #Out_Len > 0

           let #j = #Out_Len
           let $prior_char     = substr ($string_out, #j, 1)

           if $prior_char <> $SpecialChar
             let $string_out    = $string_out || $string_char
           end-if

        else
          let $string_out    = $string_out || $string_char
        end-if

      else
        let $string_out    = $string_out || $string_char

      end-if

      add 1 to #i
    end-while

  else
    ! no special char !
    let $string_out = $string_in
  end-if

end-procedure


begin-procedure Replace-Accented-Char($string_in, :$string_out)

  let $string_in   = translate($string_in, 'é', 'e')
  let $string_in   = translate($string_in, 'è', 'e')
  let $string_in   = translate($string_in, 'ê', 'e')
  let $string_in   = translate($string_in, 'ë', 'e')
  let $string_in   = translate($string_in, 'â', 'a')
  let $string_in   = translate($string_in, 'à', 'a')
  let $string_in   = translate($string_in, 'ä', 'a')
  let $string_in   = translate($string_in, 'ô', 'o')
  let $string_in   = translate($string_in, 'ö', 'o')
  let $string_in   = translate($string_in, 'î', 'i')
  let $string_in   = translate($string_in, 'ï', 'i')
  let $string_in   = translate($string_in, 'û', 'u')
  let $string_in   = translate($string_in, 'ù', 'u')
  let $string_in   = translate($string_in, 'ü', 'u')
  let $string_in   = translate($string_in, 'ÿ', 'y')
  let $string_in   = translate($string_in, 'ç', 'c')

  let $string_in   = translate($string_in, 'á', 'a')
  let $string_in   = translate($string_in, 'ã', 'a')
  let $string_in   = translate($string_in, 'ì', 'i')
  let $string_in   = translate($string_in, 'í', 'i')
  let $string_in   = translate($string_in, 'ñ', 'i')
  let $string_in   = translate($string_in, 'ò', 'o')
  let $string_in   = translate($string_in, 'ó', 'o')
  let $string_in   = translate($string_in, 'õ', 'o')
  let $string_in   = translate($string_in, 'ú', 'u')
  let $string_in   = translate($string_in, 'ý', 'y')

  let $string_in   = translate($string_in, 'À', 'A')
  let $string_in   = translate($string_in, 'Â', 'A')
  let $string_in   = translate($string_in, 'Ä', 'A')
  let $string_in   = translate($string_in, 'Ç', 'C')
  let $string_in   = translate($string_in, 'È', 'E')
  let $string_in   = translate($string_in, 'É', 'E')
  let $string_in   = translate($string_in, 'Ê', 'E')
  let $string_in   = translate($string_in, 'Ë', 'E')
  let $string_in   = translate($string_in, 'Î', 'I')
  let $string_in   = translate($string_in, 'Ï', 'I')
  let $string_in   = translate($string_in, 'Ô', 'O')
  let $string_in   = translate($string_in, 'Ö', 'O')
  let $string_in   = translate($string_in, 'Ù', 'U')
  let $string_in   = translate($string_in, 'Û', 'U')
  let $string_in   = translate($string_in, 'Ü', 'U')

  let $string_in   = translate($string_in, 'Á', 'A')
  let $string_in   = translate($string_in, 'Ã', 'A')
  let $string_in   = translate($string_in, 'Ì', 'I')
  let $string_in   = translate($string_in, 'Í', 'I')
  let $string_in   = translate($string_in, 'Ñ', 'I')
  let $string_in   = translate($string_in, 'Ò', 'O')
  let $string_in   = translate($string_in, 'Ó', 'O')
  let $string_in   = translate($string_in, 'Õ', 'O')
  let $string_in   = translate($string_in, 'Ú', 'U')
  let $string_in   = translate($string_in, 'Ý', 'Y')

  let $string_out  = $string_in

end-procedure


