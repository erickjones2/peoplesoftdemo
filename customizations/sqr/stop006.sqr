!-----------------------------------------------------------------------
!  STOP006:  Summary of Shares Repurchased
!-----------------------------------------------------------------------
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:28                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Prints all shares repurchased within a date range.
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Create-Array
  do Process-Main
  do Reset
  do Successful-EOJ

  let $CurrentTime = datenow()
  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID      = 'STOP006'
  let $cur = $basecurr
  let $StockPlanType = 'O'

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language

  if $prcs_process_instance = ''
    input $RC_Stock_ID      maxlen=10 'Enter Stock ID'       type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID   maxlen=10 'Stock ID is required' type=Char
    end-while
    input $RC_Stock_Plan    maxlen=10 'Enter the STOCK PLAN ID     or press enter for all' type=char
    input $RC_Option_Type   maxlen=4  'Enter the OPTION TYPE       or press enter for all' type=char
    input $RC_RepStatus     maxlen=1  'Enter the REPRUCHASE STATUS or press enter for all' type=char
    uppercase $RC_Stock_ID
    uppercase $RC_RepStatus
    uppercase $RC_Option_Type
    uppercase $RC_Stock_Plan
    do Ask-From-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'From Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $StockId        = rtrim($RC_Stock_ID   ,' ')
  let $RC_Stock_Plan  = rtrim($RC_Stock_Plan ,' ')
  let $RC_Option_Type = rtrim($RC_Option_Type,' ')
  let $RC_Status      = rtrim($RC_RepStatus ,' ')
  let $RC_FromDate    = rtrim($RC_FromDate   ,' ')
  let $RC_ThruDate    = rtrim($RC_ThruDate   ,' ')

  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')

  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log
  show $RC_Status
End-Procedure

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 09

  #include 'stdhdg01.sqc'
 
  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_ID                                       (  ,020,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  let $Fieldname  = 'REPURCHASE_STATUS'
  let $Fieldvalue = $RC_Status
  do Read-Translate-Table
  let $StatusXlat = $Xlatshortname
  print $RepStatusLbl                                      (+1,001,017)
  print ':'                                                (  ,   ,001)
  print $StatusXlat                                        (  ,020,010)

  print $OptionTypeLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,020,004)

  print $StockPlanLbl                                      (+1,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,020,010)

  print $NameLbl                                           (+2,001,030)
  print $GrantNbrLbl                                       (  ,032,012)
  print $RepStatusLbl                                      (  ,049,017)
  print $StockPlanLbl                                      (  ,068,011)
  print $EmplLbl                                           (+1,001,030)
  print $RepDtLbl                                          (  ,032,015)
  print $RepNumberLbl                                      (  ,049,017)
  print $OptionTypeLbl                                     (  ,068,012)
  print $ReasonLbl                                         (  ,081,006)
  print $GrantPriceLbl                                     (  ,091,013)
  print $RepPriceLbl                                       (  ,104,016)
  print $ShrRepLbl                                         (  ,126,018)
  print $GrantCostLbl                                      (  ,153,011)
  print '-'                                                (+1,001,163) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STOP002')

  do Get_Field_Information ('STOCK',   'FROM',              $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',   'THRU',              $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',          $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN',        $StockPlanLbl,   #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE',    $OptionTypeLbl,  #DW)
  do Get_Field_Information ('STOCK',   'NAME',              $NameLbl,        #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',            $EmplLbl,        #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',         $GrantNbrLbl,    #DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',       $GrantPriceLbl,  #DW)
  do Get_Field_Information ('STOCK',   'SHARES_REPURCHASED',$ShrRepLbl,      #DW)
  do Get_Field_Information ('STOCK',   'REPURCHASE_PRICE',  $RepPriceLbl,    #DW)
  do Get_Field_Information ('STOCK',   'REPURCHASE_DT',     $RepDtLbl,       #DW)
  do Get_Field_Information ('STOCK',   'REPURCHASE_STATUS', $RepStatusLbl,   #DW)
  do Get_Field_Information ('STOCK',   'GRANT_COST',        $GrantCostLbl,   #DW)
  do Get_Field_Information ('STOCK',   'REPURCHASE_NBR',    $RepNumberLbl,   #DW)
  do Get_Field_Information ('STOCK',   'HI',                $HiLbl,          #DW)
  do Get_Field_Information ('STOCK',   'LOW',               $LowLbl,         #DW)
  do Get_Field_Information ('STOCK',   'AVG',               $AvgLbl,         #DW)

  do Get_Field_Information ('STOP002', 'STOP006',           $ReportTitle,    #DW)
  do Get_Field_Information ('STOP002', 'REASON',            $ReasonLbl,      #DW)
  do Get_Field_Information ('STOP002', 'TOTAL_WEIGHT',      $TotalWeightLbl, #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  if $RC_Stock_Plan <> ''
    let $PlanClause    = 'and B.STOCK_PLAN = '''||$RC_Stock_Plan ||''''
  else
    let $PlanClause    =  ''
  end-if
  if $RC_Option_Type <> ''
    let $OptionClause  = 'and B.ST_OPTION_TYPE = '''||$RC_Option_Type ||''''
  else
    let $OptionClause  = ''
  end-if
  if $RC_Status <> ''
    let $StatusClause  ='and A.REPURCHASE_STATUS = '''||$RC_Status ||''''
  else
    let $StatusClause  = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan          -
               size  = 50                 -
               field = StockPlan:char     -
               field = SharesRep:number   -
               field = GrantCost:number   -
               field = RepCost:number

  create-array name  = OptionType         -
               size  = 10                 -
               field = OptionType:char    -
               field = SharesRep:number   -
               field = GrantCost:number   -
               field = RepCost:number

  create-array name  = RepStatus          -
               size  = 10                 -
               field = Status:char        -
               field = SharesRep:number   -
               field = GrantCost:number   -
               field = RepCost:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let #PlanCount   = 1
  let #TypeCount   = 1
  let #StatusCount = 1
  let #AvgCount    = 0
  let #LowPrice    = 0
  let #MaxPrice    = 0
  let #TotalPrice  = 0
  let $FirstPass   = 'Y'

Begin-Select

A.REPURCHASE_STATUS                                        () on-break print=never before=Get-Status-Xlat
A.EMPLID
A.GRANT_NBR
A.REPURCHASE_NBR
A.REPURCHASE_DT
A.REPURCHASE_REASON
A.SHARES_REPURCHASED
A.REPURCHASE_PRICE
A.REPURCHASE_VALUE
B.STOCK_PLAN
B.ST_OPTION_TYPE
B.GRANT_PRICE
C.NAME

  let $RepStatus   = rtrim(&a.repurchase_status,' ')
  let $EmplId      = rtrim(&a.emplid,' ')
  let $GrantNbr    = rtrim(&a.grant_nbr,' ')
  let #RepNbr      = &a.repurchase_nbr
  let $RepDt       = rtrim(&a.repurchase_dt,' ')
  let #SharesRep   = &a.shares_repurchased
  let #RepPrice    = &a.repurchase_price
  let #RepCost     = &a.repurchase_value
  let $RepReason   = rtrim(&a.repurchase_reason,' ')
  let $StockPlan   = rtrim(&b.stock_plan,' ')
  let #GrantPrice  = &b.grant_price
  let $OptionType  = rtrim(&b.st_option_type,' ')
  let $Name        = rtrim(&c.name,' ')
  let #GrantCost   = #SharesRep * #GrantPrice
  let $RowSelected = 'Y'
  do Get-Status-Xlat
  do Print-Details
  do Populate-Arrays
  do Get-Min-Max-GrantPrice

FROM PS_ST_GRNT_REPURCH A,
     PS_ST_GRANT        B,
     PS_ST_PERSON_NAME  C
WHERE A.STOCK_ID       = $StockID
  AND A.REPURCHASE_DT >= $RC_FromDate
  AND A.REPURCHASE_DT <= $RC_ThruDate
  AND A.EMPLID         = B.EMPLID
  AND A.STOCK_ID       = B.STOCK_ID
  AND A.GRANT_NBR      = B.GRANT_NBR
  AND A.EMPLID         = C.EMPLID
  [$PlanClause]
  [$OptionClause]
  [$StatusClause]
ORDER BY C.NAME, B.ST_OPTION_TYPE

End-Select

  if $RowSelected = 'Y' !implies some data selected
    do Print-Totals
  end-if
  
End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Status-Xlat
!-----------------------------------------------------------------------
Begin-Procedure Get-Status-Xlat

  let $RepStatus  = rtrim(&a.repurchase_status,' ')
  let $Fieldname  = 'REPURCHASE_STATUS'
  let $Fieldvalue = $RepStatus
  do Read-Translate-Table
  let $Status     = $Xlatshortname

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  next-listing skiplines=0 need=3
  print $Name                                              (+1,001,030)
  print $GrantNbr                                          (  ,032,010)
  print $Status                                            (  ,049,017)
  print $StockPlan                                         (  ,068,010)
  print $RepReason                                         (  ,081,006)
  print #GrantPrice                                        (  ,089,013) edit $9,999.999999
  print #RepPrice                                          (  ,107,013) edit $9,999.999999
  print #SharesRep                                         (  ,122,022) edit 999,999,999,999.999999
  print #RepCost                                           (  ,146,018) edit $99,999,999,999.99
  print $EmplId                                            (+1,001,011)
  do Format-DateTime ($RepDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,032,010)
  print #RepNbr                                            (  ,049,008) edit 00000009
  print $OptionType                                        (  ,068,017)

  let #TotalRep       = #TotalRep       + #SharesRep
  let #TotalCost      = #TotalCost      + #RepCost
  let #TotalGrantCost = #TotalGrantCost + #GrantCost

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan   #SharesRep #RepCost #GrantCost into StockPlan(1) StockPlan SharesRep RepCost GrantCost
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #SharesRep #RepCost #GrantCost to StockPlan(#Row) SharesRep RepCost GrantCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesRep #RepCost #GrantCost into StockPlan(#PlanCount) StockPlan SharesRep RepCost GrantCost
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

  if #TypeCount = 1
    put $OptionType  #SharesRep #RepCost #GrantCost into OptionType(1)  OptionType  SharesRep RepCost GrantCost
    let #TypeCount = #TypeCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #TypeCount
      get $AOptionType from OptionType(#Row) OptionType
      if $OptionType = $AOptionType
        array-add #SharesRep #RepCost #GrantCost to OptionType(#Row) SharesRep RepCost GrantCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $OptionType #SharesRep #RepCost #GrantCost into OptionType(#TypeCount) OptionType SharesRep RepCost GrantCost
      let #TypeCount = #TypeCount + 1
    end-if
  end-if

  if #StatusCount = 1
    put $Status #SharesRep #RepCost #GrantCost into RepStatus(1) Status SharesRep RepCost GrantCost
    let #StatusCount = #StatusCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #StatusCount
      get $AStatus from RepStatus(#Row) Status
      if $Status = $AStatus
        array-add #SharesRep #RepCost #GrantCost to RepStatus(#Row) SharesRep RepCost GrantCost
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $Status #SharesRep #RepCost #GrantCost into RepStatus(#StatusCount) Status SharesRep RepCost GrantCost
      let #StatusCount = #StatusCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Min-Max-GrantPrice
! Descr:   Determines the Minimum and Maximum Grant Price and keeps
!          track of how many rows are to be used for dividing by Average
!-----------------------------------------------------------------------
Begin-Procedure Get-Min-Max-GrantPrice

  if $FirstPass = 'Y'
      let #LowPrice   = &b.grant_price
      let #MaxPrice   = &b.grant_price
      let $FirstPass = 'N'
  end-if

  let #AvgCount  = #AvgCount + 1

  if #GrantPrice > #MaxPrice
      let #MaxPrice = #GrantPrice
  else
     if #GrantPrice < #LowPrice
         let #LowPrice = #GrantPrice
     end-if
  end-if

  let #TotalPrice = #TotalPrice + #GrantPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints totals for each print break section.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  new-page

  let #AvgPrice    = round((#TotalGrantCost / #TotalRep),6)
  let #AvgRepPrice = round((#TotalCost / #TotalRep),6)
  print $TotalWeightLbl                                    (+2,046,023) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgPrice                                          (  ,089,013) bold edit $9,999.999999
  print #AvgRepPrice                                       (  ,107,013) bold edit $9,999.999999
  print #TotalRep                                          (  ,122,022) bold edit 999,999,999,999.999999
  print #TotalCost                                         (  ,146,018) bold edit $99,999,999,999.99

  print $RepStatusLbl                                      (+2,058,017) bold underline
  let #Row = 1
  while #Row < #StatusCount
    get $Status #SharesRep #RepCost #GrantCost from RepStatus(#Row) Status SharesRep RepCost GrantCost
    let #AvgPrice    = round((#GrantCost / #SharesRep),6)
    let #AvgRepPrice = round((#RepCost / #SharesRep),6)
    print $Status                                          (+1,058,010) bold
    print #AvgPrice                                        (  ,089,013) bold edit $9,999.999999
    print #AvgRepPrice                                     (  ,107,013) bold edit $9,999.999999
    print #SharesRep                                       (  ,122,022) bold edit 999,999,999,999.999999
    print #RepCost                                         (  ,146,018) bold edit $99,999,999,999.99
    let #Row = #Row + 1
  end-while

  print $OptionTypeLbl                                     (+2,058,012) bold underline
  let #Row = 1
  while #Row < #TypeCount
    get $OptionType #SharesRep #RepCost #GrantCost from OptionType(#Row) OptionType SharesRep RepCost GrantCost
    let #AvgPrice    = round((#GrantCost / #SharesRep),6)
    let #AvgRepPrice = round((#RepCost / #SharesRep),6)
    print $OptionType                                      (+1,058,010) bold
    print #AvgPrice                                        (  ,089,013) bold edit $9,999.999999
    print #AvgRepPrice                                     (  ,107,013) bold edit $9,999.999999
    print #SharesRep                                       (  ,122,022) bold edit 999,999,999,999.999999
    print #RepCost                                         (  ,146,018) bold edit $99,999,999,999.99
    let #Row = #Row + 1
  end-while

  print $StockPlanLbl                                      (+2,058,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #SharesRep #RepCost #GrantCost from StockPlan(#Row) StockPlan SharesRep RepCost GrantCost
    let #AvgPrice    = round((#GrantCost / #SharesRep),6)
    let #AvgRepPrice = round((#RepCost / #SharesRep),6)
    print $StockPlan                                       (+1,058,010) bold
    print #AvgPrice                                        (  ,089,013) bold edit $9,999.999999
    print #AvgRepPrice                                     (  ,107,013) bold edit $9,999.999999
    print #SharesRep                                       (  ,122,022) bold edit 999,999,999,999.999999
    print #RepCost                                         (  ,146,018) bold edit $99,999,999,999.99
    let #Row = #Row + 1
  end-while

  let #AvgGrantPrice  =  round((#TotalPrice / #AvgCount),6)

  print $GrantPriceLbl                                     (+2,058,011) bold underline
  print $HiLbl                                             (+1,063,002) bold
  print ':'                                                (  ,   ,001) bold
  print #MaxPrice                                          (  ,089,013) bold edit $9,999.999999
  print $AvgLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgGrantPrice                                     (  ,089,013) bold edit $9,999.999999
  print $LowLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #LowPrice                                          (  ,089,013) bold edit $9,999.999999

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'sqlerr.sqc'      !SQL error processing
#include 'prcsapi.sqc'     !Process Scheduler API
#include 'prcsdef.sqc'     !Update Process Open_Trans variable declaration
#include 'eoj.sqc'         !End of Report Format
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'getrplng.sqc'    !Get the report language
#include 'readxlat.sqc'    !Read the Translate Table for the desired values.
#include 'strunctl.sqc'    !Runcontrol
#include 'askftd.sqc'      !Prompts for from/thru date range
