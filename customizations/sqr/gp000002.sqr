!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!          $Date:  2013/12/06:02:54:07                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!***********************************************************************
!  GP000002.SQR  Global Payroll/Core - Absence Results Register
!                                                                      *
!  The information included is taken from the GP_RSLT_xxx tables       *
!  for absence data                                                    *
!                                                                      *
!  Detail contents are driven by parms set by user as process is       *
!  kicked off                                                          *
!                                                                      *
!  NOTE - Throughout this report, debugy and debugz flags are used.    *
!         debugy tracks the report execution/flow                      *
!         debugz tracks variable values.                               *
!         refer to SQR documentation for how flags are used            *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !page layout and printer definition
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting



begin-report


#ifdef debugy
        show 'do Init-Processing'
#end-if
        do Init-Processing


#ifdef debugy
        show 'do Select-Parameters'
#end-if
        do Select-Parameters


#ifdef debugy
        show 'do Get-PR-Status'
#end-if
        do Get-PR-Status


#ifdef debugy
        show 'do Process-Main'
#end-if
        do Process-Main


#ifdef debugy
        show 'do Reset'
#end-if
        do Reset                        ! called from reset1.sqc


#ifdef debugy
        show 'do Update-Prcs-Run-Status'
#end-if
        do Update-Prcs-Run-Status


#ifdef debugy
        show 'do Delete-RunControl'
#end-if
        do Delete-RunControl


#ifdef debugy
        show 'END-REPORT'
#end-if


end-report


!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Define-Prcs-Vars        - prcsapi.sqc (prcsdef.sqc)    *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Init-Report                                            *
!               Init-Number             - number.sqc                   *
!               Get-Language-Codes      - prcslng.sqc                  *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing


#ifdef debugy
        show 'do Init-Datetime'
#end-if
        do Init-Datetime


#ifdef debugy
        show 'do Get-Current-Datetime'
#end-if
        do Get-Current-Datetime


#ifdef debugy
        show 'do Define-Prcs-Vars'
#end-if
        do Define-Prcs-Vars


#ifdef debugy
        show 'do Get-Run-Control-Parms'
#end-if
        do Get-Run-Control-Parms


#ifdef debugy
        show 'do Init-Report'
#end-if
        do Init-Report


#ifdef debugy
        show 'do Init-Number'
#end-if
        do Init-Number


#ifdef debugy
        show 'do Get-Language-Codes'
#end-if
        do Get-Language-Codes


end-procedure ! Init-Processing


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc              *
!               Get_Field_Information                                  *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report


#ifdef debugy
        show 'Inside procedure Init-Report'
#end-if


!***********************************************************************
!                                                                      *
! Print column definitions.  Some fields are lined up vertically with  *
!   other fields on the report.  The first occurence of a column       *
!   location is defined.  After that, fields that occur in the same    *
!   column use the first field's column definition.  Field labels end  *
!   in _lbl.  Other column definitions are for the field values.       *
!                                                                      *
!***********************************************************************

    #define Col_Instance            19
    #define Col_Slice_Dates         29
    #define Col_Amt_Adj             46
    #define Col_Base_Adj            73
    #define Col_Rate                101
    #define Col_Unit_Adj            128
    #define Col_Percent             158
    #define Col_Amt_Adj_lbl         51
    #define Col_Base_Adj_lbl        80
    #define Col_Rate_lbl            117
    #define Col_Unit_Adj_lbl        134
    #define Col_Percent_lbl         171
    #define Col_Key1                63
    #define Col_Key3                87
    #define Col_Accum_Slice_Date    111
    #define Col_Adjustment          153
    #define Col_Period_lbl          160
    #define Col_Period              155
    #define Col_From_To             21
    #define Col_Value_lbl           49
    #define Col_Value               34
    #define Col_Arr_Amt_Adj_Val     45
    #define Col_Rslt_Not_Taken      67
    #define Col_Paybk_Amt_lbl       110



    #define Col_Holiday_Hours_lbl   25
    #define Col_Config_lbl          35
    #define Col_Over_Config_lbl     45
    #define Col_Alt_Config_lbl      53
    #define Col_Alt_Over_Config_lbl 63
    #define Col_Take_Config_lbl     100
    #define Col_BeginDate_ODB_lbl   113
    #define Col_MapTo_Source_lbl    173


    #define Col_Date_Day_Source_lbl  20
    #define Col_Entitlement_lbl      34
    #define Col_Entitlement_Data     49
    #define Col_Schedule_lbl         63
    #define Col_WorkdayID_Over_lbl   76
    #define Col_Hours_Over_lbl       92
    #define Col_Wait_lbl             101
    #define Col_Wait_Data            116
    #define Col_Eligible_lbl         131
    #define Col_Eligible_Data        149
    #define Col_Eligible_Flag        152
    #define Col_Link_lbl             162
    #define Col_Link_Data            170
    #define Col_Link_Flag            177




!***********************************************************************
!                                                                      *
! Translations procedures & Strings Table retrievals.                  *
!                                                                      *
!***********************************************************************

    do Init_Report_Translation ($ReportID, $curr_language_cd)


    do Append_Report_Translation ('GP_SQR02')
    do Append_Report_Translation ('GP_SQR03')

    do Get_Field_Information ('GP_SQR03', 'GP000002_TITLE',     $GP000002_Title,        #DW)
    do Get_Field_Information ('GP_SQR03', '/DAY',               $Slash_Day_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', '/HOURS',             $Slash_Hours_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', '/OVER',              $Slash_Over_lbl,        #DW)
    do Get_Field_Information ('GP_SQR03', '/SOURCE',            $Slash_Source_lbl,      #DW)
    do Get_Field_Information ('GP_SQR03', '/TAKE_NEG_BALANCE',  $Slash_Tk_Neg_Bal_lbl,  #DW)
    do Get_Field_Information ('GP_SQR03', 'ALTERNATE',          $Alt_lbl,               #DW)
    do Get_Field_Information ('GP_SQR03', 'ALTERNATE_SHORT',    $Alt_Short_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', 'ALT_OVER_SHORT',     $Alt_Over_Short_lbl,    #DW)
    do Get_Field_Information ('GP_SQR03', 'BEGIN_BALANCE',      $Begin_Balance_lbl,     #DW)
    do Get_Field_Information ('GP_SQR03', 'BEGIN_DATE',         $Begin_Date_lbl,        #DW)
    do Get_Field_Information ('GP_SQR03', 'BEGIN_HALF_DAY',     $Begin_Half_Day_lbl,    #DW)
    do Get_Field_Information ('GP_SQR03', 'CONFIG',             $Config_lbl,            #DW)
    do Get_Field_Information ('GP_SQR03', 'COUNT',              $Count_lbl,             #DW)
    do Get_Field_Information ('GP_SQR03', 'CUMULATIVE_SHORT',   $Cum_Short_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', 'DATE',               $Date_lbl,              #DW)
    do Get_Field_Information ('GP_SQR03', 'DAY_COUNT',          $Day_Count_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', 'DAY_PAID',           $Day_Paid_lbl,          #DW)
    do Get_Field_Information ('GP_SQR03', 'DAY_UNPAID',         $Day_Unpaid_lbl,        #DW)
    do Get_Field_Information ('GP_SQR03', 'ELEMENT_NAME',       $Element_Name_lbl,      #DW)
    do Get_Field_Information ('GP_SQR03', 'ELIGIBLE',           $Eligible_lbl,          #DW)
    do Get_Field_Information ('GP_SQR03', 'END_BALANCE',        $End_Balance_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', 'END_HALF_DAY',       $End_Half_Day_lbl,      #DW)
    do Get_Field_Information ('GP_SQR03', 'ENTITLEMENT',        $Entitlement_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', 'FIRST_DAY',          $First_Day_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', 'FIRST_EVENT_DATE',   $First_Event_Dt_lbl,    #DW)
    do Get_Field_Information ('GP_SQR03', 'HOLIDAY',            $Holiday_lbl,           #DW)
    do Get_Field_Information ('GP_SQR03', 'HOURS',              $Hours_lbl,             #DW)
    do Get_Field_Information ('GP_SQR03', 'INDICATOR',          $Indicator_lbl,         #DW)
    do Get_Field_Information ('GP_SQR03', 'INDICATORS',         $Indicators_lbl,        #DW)
    do Get_Field_Information ('GP_SQR03', 'LAST_DAY',           $Last_Day_lbl,          #DW)
    do Get_Field_Information ('GP_SQR03', 'LINK',               $Link_lbl,              #DW)
    do Get_Field_Information ('GP_SQR03', 'MAP_TO',             $Map_To_lbl,            #DW)
    do Get_Field_Information ('GP_SQR03', 'MIN_PER_IND',        $Min_Per_Ind_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', 'MIN_PER',            $Min_Per_lbl,           #DW)
    do Get_Field_Information ('GP_SQR03', 'ORIG_BEGIN_DATE',    $OBD_lbl,               #DW)
    do Get_Field_Information ('GP_SQR03', 'OVERRIDE_SHORT',     $Override_Short_lbl,    #DW)
    do Get_Field_Information ('GP_SQR03', 'PARTIAL_HRS',        $Partial_Hrs_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', 'PERIOD',             $Period_lbl,            #DW)
    do Get_Field_Information ('GP_SQR03', 'REGULAR',            $Regular_lbl,           #DW)
    do Get_Field_Information ('GP_SQR03', 'SCHED',              $Schedule_lbl,          #DW)
    do Get_Field_Information ('GP_SQR03', 'TAKE_CONFIG',        $Take_Config_lbl,       #DW)
    do Get_Field_Information ('GP_SQR03', 'WAIT',               $Wait_lbl,              #DW)
    do Get_Field_Information ('GP_SQR03', 'WORK_DAY_ID',        $Work_Day_ID_lbl,       #DW)
    do Get_Field_Information ('GP_SQR02', 'ACCUM_TITLE',        $Accum_Title_lbl,       #DW)
    do Get_Field_Information ('GP_SQR02', 'ELEM_NM',            $Elem_Nm_lbl,           #DW)
    do Get_Field_Information ('GP_SQR02', 'FROM_TO',            $From_To_lbl,           #DW)
    do Get_Field_Information ('GP_SQR02', 'KEY1',               $Key1_lbl,              #DW)
    do Get_Field_Information ('GP_SQR02', 'KEY3',               $Key3_lbl,              #DW)
    do Get_Field_Information ('GP_SQR02', 'SLICE_DT',           $Slice_Dt_lbl,          #DW)
    do Get_Field_Information ('GP_SQR02', 'VALUE',              $Value_Fwd_Adj_lbl,     #DW)
    do Get_Field_Information ('GP_SQR02', 'ADJ',                $Adj_lbl,               #DW)
    do Get_Field_Information ('GP_SQR02', 'PRD',                $Prd_lbl,               #DW)
    do Get_Field_Information ('GP_SQR03', 'AB_STAT_FINAL',      $Calc_Stat_Final,       #DW)
    do Get_Field_Information ('GP_SQR03', 'AB_STAT_OPEN',       $Calc_Stat_Open,        #DW)




!***********************************************************************
!                                                                      *
! Report variables.                                                    *
!                                                                      *
!***********************************************************************

    let $ReportID              = 'GP000002'          ! Printed in header
    let $ReportTitle           = $GP000002_Title     ! Printed in header
    let $ReportDate            = $AsOfToday          ! Printed in header
    let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    let #Maxlines              = 55                  ! # rows on a page, used for page breaking
    let $EE_FirstTimeThru      = 'Y'                 ! Used for page breaking
    let $Seg_FirstTimeThru     = 'Y'                 ! Used for page breaking
    let $Current_Emplid        = $Last_Emplid        ! Used for page breaking
    let #Current_Seg_Num       = #Last_Seg_Num       ! Used for page breaking
    let $Page_Break_Indicator  = 'Reset'             ! Used for page breaking
    let $Rpt_Hdr_FirstTimeThru = 'True'              ! Used for page breaking


!***********************************************************************
!                                                                      *
! Numbers: The U.S. and the U.K. use NN,NNN.NN                         *
!          The rest of Europe uses NN.NNN,NN                           *
!                                                                      *
!***********************************************************************

    if $curr_language_cd = 'ENG' or $curr_language_cd = 'INE'
        let $ReportSDecimal   = '.'
        let $ReportSThousand  = ','
    else
        let $ReportSDecimal   = ','             ! resolved in number.sqc
        let $ReportSThousand  = '.'             ! resolved in number.sqc
    end-if


!***********************************************************************
!                                                                      *
! Initialize date formatting.                                          *
!                                                                      *
!***********************************************************************

    let $Date_Init = '1900-01-01 00:00:00.000'


        #ifdef ORACLE
            let $Date_Init = '01-NOV-99'
        #endif


    do Format-DateTime($Date_Init, $out999, {DEFDATE}, '', '')


end-procedure ! Init-Report


!***************************
begin-heading 17
!***************************

#include 'gphdg01.sqc'                  ! copied/modified from stdhdgtr.sqc


#ifdef debugy
        show 'BEGIN-HEADING'
#end-if


end-heading


!***********************************************************************
!                                                                      *
! Get-PR-Status                                                        *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieves calc status to print in report header.       *
!                                                                      *
!                                                                      *
!***********************************************************************


begin-procedure Get-PR-Status

#ifdef debugy
        show 'Inside procedure Get-PR-Status'
#end-if


BEGIN-SELECT


#ifdef debugy
        show 'Inside SELECT, procedure Get-PR-Status'
#end-if

CALRUN.RUN_FINALIZED_IND    &CALRUN.RUN_FINALIZED_IND


    let $Finalized_Ind      = &CALRUN.RUN_FINALIZED_IND


    if $Finalized_Ind  = 'Y'
        let $Calc_Stat = $Calc_Stat_Final
    else
        let $Calc_Stat = $Calc_Stat_Open
    end-if


    FROM PS_GP_CAL_RUN CALRUN
    WHERE CALRUN.CAL_RUN_ID = $Cal_Run_ID


END-SELECT

end-procedure ! Get-PR-Status



!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Format-DateTime                                        *
!               Get-Seg-Info                                           *
!                                                                      *
! Description:  Resolves report sort order.  Retrieves population for  *
!               the report.  Manages EE-level page breaking.           *
!                                                                      *
!***********************************************************************


begin-procedure Process-Main


#ifdef debugy
        show 'Inside procedure Process-Main'
#end-if

!***********************************************************************
!                                                                      *
! Set Table Alias for SQR Security,                                    *
! Uses HRSECTY.SQC                                                     *
!                                                                      *
!***********************************************************************

    Let $_TableAlias = 'A'                               !SQR Security
    do Security-Param
    show '$SecurityClausewithERN = ' $SecurityClausewithERN


!***********************************************************************
!                                                                      *
! Set dynamic EE-level sort based on run control value.  $EE_Lvl_Sort  *
!   is resolved in GPRNCTL1.SQC                                        *
!                                                                      *
!***********************************************************************

    if $EE_Lvl_Sort = '10'
        let $Order_By_Clause = 'ORDER BY A.CAL_RUN_ID, A.PAY_ENTITY, A.GP_PAYGROUP, A.CAL_ID, A.EMPLID, A.EMPL_RCD'
    else
        let $Order_By_Clause = 'ORDER BY A.CAL_RUN_ID, A.PAY_ENTITY, A.GP_PAYGROUP, A.CAL_ID, B.NAME_PSFORMAT, A.EMPL_RCD'
    end-if


#ifdef debugy
        show '$Order_By_Clause: ' noline
        show $Order_By_Clause
#end-if



BEGIN-SELECT


#ifdef debugy
        show 'Inside SELECT, procedure Process-Main'
#end-if


A.CAL_RUN_ID            &A.CAL_RUN_ID
A.PAY_ENTITY            &A.PAY_ENTITY
A.CAL_ID                &A.CAL_ID
A.CAL_PRD_ID            &A.CAL_PRD_ID
A.GP_PAYGROUP           &A.GP_PAYGROUP
A.RUN_TYPE              &A.RUN_TYPE
A.PRD_BGN_DT            &A.PRD_BGN_DT
A.PRD_END_DT            &A.PRD_END_DT
A.CURRENCY_CD           &A.CURRENCY_CD
A.PYMT_DT               &A.PYMT_DT
A.EMPLID                &A.EMPLID
A.EMPL_RCD              &A.EMPL_RCD
B.NAME_PSFORMAT         &B.NAME_PSFORMAT
B.EMPLID                &B.EMPLID


!***********************************************************************
!                                                                      *
! Format-DateTime formats dates.                                       *
!                                                                      *
!***********************************************************************

    let $Date1 = &A.PRD_BGN_DT
    do Format-DateTime($Date1, $out1, {DEFDATE}, '', '')

    let $Date2 = &A.PRD_END_DT
    do Format-DateTime($Date2, $out2, {DEFDATE}, '', '')

    let $Date3 = &A.PYMT_DT
    do Format-DateTime($Date3, $out3, {DEFDATE}, '', '')


    let $Cal_Run_ID         = &A.CAL_RUN_ID
    let $Pay_Entity         = &A.PAY_ENTITY
    let $Cal_ID             = &A.CAL_ID
    let $Cal_Period_ID      = &A.CAL_PRD_ID
    let $Paygroup           = &A.GP_PAYGROUP
    let $Run_Type           = &A.RUN_TYPE
    let $Period_Begin_Date  = $out1
    let $Period_End_Date    = $out2
    let $Payment_Date       = $out3
    let $Currency_Value     = &A.CURRENCY_CD
    let $Emplid             = &A.EMPLID
    let #Empl_Rec           = &A.EMPL_RCD
    let $Name               = &B.NAME_PSFORMAT


    do Get-Header-Descriptions


#ifdef debugz
        show 'Emplid:   ' noline
        show $Emplid
#end-if


!***********************************************************************
!                                                                      *
! New page on employee change.                                         *
!                                                                      *
!***********************************************************************

        if $EE_FirstTimethru = 'N'
            if $Emplid <> $Last_Emplid or #Empl_Rec <> #Last_Empl_Rec
                let $Page_Break_Indicator = 'Empl_Change'
                new-page
                let $Page_Break_Indicator = 'Reset'
            end-if
        end-if


    do Get-Seg-Info


    let $EE_FirstTimeThru  = 'N'


    let $Last_Cal_Run_ID                = $Cal_Run_ID
    let $Last_Pay_Entity                = $Pay_Entity
    let $Last_Cal_ID                    = $Cal_ID
    let $Last_Cal_Period_ID             = $Cal_Period_ID
    let $Last_Paygroup                  = $Paygroup
    let $Last_Run_Type                  = $Run_Type
    let $Last_Period_Begin_Date         = $Period_Begin_Date
    let $Last_Period_End_Date           = $Period_End_Date
    let $Last_Payment_Date              = $Payment_Date
    let $Last_Currency_Value            = $Currency_Value
    let $Last_Emplid                    = $Emplid
    let #Last_Empl_Rec                  = #Empl_Rec
    let $Last_Name                      = $Name

    let $Last_Pay_Entity_Descr          = $Pay_Entity_Descr
    let $Last_Paygroup_Descr            = $Paygroup_Descr
    let $Last_Run_Type_Descr            = $Run_Type_Descr
    let $Last_Calendar_Period_Descr     = $Calendar_Period_Descr


    FROM PS_GP_PYE_PRC_STAT A,
         PS_PERSON_NAME     B

    WHERE A.CAL_RUN_ID = $Cal_Run_ID
    [$Paygroup_Select_Clause]                            ! Resolved in GPRNCTL1.SQC
    [$EE_Select_Clause]                                  ! Resolved in GPRNCTL1.SQC
    AND   A.EMPLID IN (SELECT ABS.EMPLID FROM PS_GP_RSLT_ABS ABS
                      WHERE ABS.CAL_RUN_ID = A.CAL_RUN_ID
                      and ABS.GP_PAYGROUP  = A.GP_PAYGROUP
                      and ABS.CAL_ID       = A.CAL_ID)
    AND   B.EMPLID = A.EMPLID
    [$SecurityClausewithERN]                             ! SQR Security
    [$Order_By_Clause]


END-SELECT


end-procedure ! Process-Main


!***********************************************************************
!                                                                      *
! Get-Header-Descriptions                                              *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        Get-PayEntity-Rel-Lang                                 *
!               Get-Paygroup-Rel-Lang                                  *
!               Get-RunType-Rel-Lang                                   *
!               Get-CalPrd-Rel-Lang                                    *
!                                                                      *
! Description:  Retrieves descriptions for information to print in     *
!               the report header.  If report language is different    *
!               from the installation base language, calls program to  *
!               retrieve the description translation from the          *
!               appropriate related language table.                    *
!                                                                      *
!***********************************************************************

begin-procedure Get-Header-Descriptions


#ifdef debugy
    show 'Inside procedure Get-Header-Descriptions'
#end-if


!***********************************************************************
!                                                                      *
! Retrieve Pay Entity description.  Trim to fit report.  Retrieve      *
!   related language entry if necessary.                               *
!                                                                      *
!***********************************************************************

BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT1, procedure Get-Header-Descriptions'
#end-if


PYENT.DESCR     &PYENT.DESCR


    let $Pay_Entity_Descr = &PYENT.DESCR


!***********************************************************************
!                                                                      *
!   Trim description to fit the space available on the report page.    *
!                                                                      *
!***********************************************************************

    if length($Pay_Entity_Descr) > 25
        let $Pay_Entity_Descr = substr($Pay_Entity_Descr,1,25)
    end-if


#ifdef debugy
    show '$Pay_Entity_Descr:    ' noline
    show $Pay_Entity_Descr
#end-if


     if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Pay-Entity-Rel-Lang
     end-if


    FROM PS_GP_PYENT PYENT
    WHERE PAY_ENTITY = $Pay_Entity

END-SELECT


!***********************************************************************
!                                                                      *
! Retrieve Paygroup description.  Retrieve related language entry if   *
!   necessary.                                                         *
!                                                                      *
!***********************************************************************

BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT2, procedure Get-Header-Descriptions'
#end-if


PYGRP.DESCR     &PYGRP.DESCR


    let $Paygroup_Descr = &PYGRP.DESCR


#ifdef debugy
    show '$Paygroup_Descr:    ' noline
    show $Paygroup_Descr
#end-if


     if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Paygroup-Rel-Lang
     end-if


    FROM PS_GP_PYGRP PYGRP
    WHERE GP_PAYGROUP = $Paygroup

END-SELECT


!***********************************************************************
!                                                                      *
! Retrieve Run Type description.  Retrieve related language entry if   *
!   necessary.                                                         *
!                                                                      *
!***********************************************************************

BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT3, procedure Get-Header-Descriptions'
#end-if


RUNTYPE.DESCR     &RUNTYPE.DESCR


    let $Run_Type_Descr = &RUNTYPE.DESCR


#ifdef debugy
    show '$Run_Type_Descr:    ' noline
    show $Run_Type_Descr
#end-if


     if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-RunType-Rel-Lang
     end-if


    FROM PS_GP_RUN_TYPE RUNTYPE
    WHERE RUN_TYPE = $Run_Type

END-SELECT


!***********************************************************************
!                                                                      *
! Retrieve Calendar Period ID description.  Trim to fit report.        *
!   Retrieve related language entry if necessary.                      *
!                                                                      *
!***********************************************************************

BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT4, procedure Get-Header-Descriptions'
#end-if


CALPRD.DESCR     &CALPRD.DESCR


    let $Calendar_Period_Descr = &CALPRD.DESCR


!***********************************************************************
!                                                                      *
!   Trim description to fit the space available on the report page.    *
!                                                                      *
!***********************************************************************

    if length($Calendar_Period_Descr) > 25
        let $Calendar_Period_Descr = substr($Calendar_Period_Descr,1,25)
    end-if


#ifdef debugy
    show '$Calendar_Period_Descr:    ' noline
    show $Calendar_Period_Descr
#end-if


     if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-CalPrd-Rel-Lang
     end-if


    FROM PS_GP_CAL_PRD CALPRD
    WHERE CAL_PRD_ID = $Cal_Period_ID

END-SELECT


end-procedure ! Get-Header-Descriptions


!***********************************************************************
!                                                                      *
! Get-Paygroup-Rel-Lang                                                *
!                                                                      *
!                                                                      *
! Called By:    Get-Header-Descriptions                                *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve paygroup related language entry.              *
!                                                                      *
!***********************************************************************


begin-procedure Get-Paygroup-Rel-Lang


#ifdef debugy
    show 'Inside procedure Get-Paygroup-Rel-Lang'
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Paygroup-Rel-Lang'
#end-if


PYGRPLANG.DESCR     &PYGRPLANG.DESCR


    let $Paygroup_Descr = &PYGRPLANG.DESCR


    FROM PS_GP_PYGRP_LANG PYGRPLANG
    WHERE PYGRPLANG.GP_PAYGROUP = $Paygroup
      AND PYGRPLANG.LANGUAGE_CD = $curr_language_cd

END-SELECT


end-procedure ! Get-Paygroup-Rel-Lang


!***********************************************************************
!                                                                      *
! Get-Pay-Entity-Rel-Lang                                              *
!                                                                      *
!                                                                      *
! Called By:    Get-Header-Descriptions                                *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve pay entity related language entry.            *
!                                                                      *
!***********************************************************************


begin-procedure Get-Pay-Entity-Rel-Lang


#ifdef debugy
    show 'Inside procedure Get-Pay-Entity-Rel-Lang'
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Pay-Entity-Rel-Lang'
#end-if



PYENTLANG.DESCR     &PYENTLANG.DESCR


    let $Pay_Entity_Descr = &PYENTLANG.DESCR


    FROM PS_GP_PYENT_LANG PYENTLANG
    WHERE PYENTLANG.PAY_ENTITY = $Pay_Entity
      AND PYENTLANG.LANGUAGE_CD = $curr_language_cd

END-SELECT


end-procedure ! Get-Pay-Entity-Rel-Lang


!***********************************************************************
!                                                                      *
! Get-RunType-Rel-Lang                                                 *
!                                                                      *
!                                                                      *
! Called By:    Get-Header-Descriptions                                *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve run type related language entry.              *
!                                                                      *
!***********************************************************************


begin-procedure Get-RunType-Rel-Lang


#ifdef debugy
    show 'Inside procedure Get-RunType-Rel-Lang'
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-RunType-Rel-Lang'
#end-if


RUNTYPLANG.DESCR     &RUNTYPLANG.DESCR


    let $Run_Type_Descr = &RUNTYPLANG.DESCR


    FROM PS_GP_RUN_TYP_LANG RUNTYPLANG
    WHERE RUNTYPLANG.RUN_TYPE    = $Run_Type
      AND RUNTYPLANG.LANGUAGE_CD = $curr_language_cd

END-SELECT


end-procedure ! Get-RunType-Rel-Lang


!***********************************************************************
!                                                                      *
! Get-CalPrd-Rel-Lang                                                  *
!                                                                      *
!                                                                      *
! Called By:    Get-Header-Descriptions                                *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve calendar period related language entry.  Trim *
!                   to fit report.                                     *
!                                                                      *
!***********************************************************************


begin-procedure Get-CalPrd-Rel-Lang


#ifdef debugy
    show 'Inside procedure Get-CalPrd-Rel-Lang'
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-CalPrd-Rel-Lang'
#end-if


CALPRDLANG.DESCR     &CALPRDLANG.DESCR


    let $Calendar_Period_Descr = &CALPRDLANG.DESCR


!***********************************************************************
!                                                                      *
!   Trim description to fit the space available on the report page.    *
!                                                                      *
!***********************************************************************

    if length($Calendar_Period_Descr) > 25
        let $Calendar_Period_Descr = substr($Calendar_Period_Descr,1,25)
    end-if


    FROM PS_GP_CAL_PRD_LANG CALPRDLANG
    WHERE CALPRDLANG.CAL_PRD_ID  = $Cal_Period_ID
      AND CALPRDLANG.LANGUAGE_CD = $curr_language_cd

END-SELECT


end-procedure ! Get-CalPrd-Rel-Lang


!***********************************************************************
!                                                                      *
! Get-Rate-Type-Rel-Lang                                               *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve rate type related language entry.             *
!                                                                      *
!***********************************************************************


begin-procedure Get-Rate-Type-Rel-Lang


#ifdef debugy
    show 'Inside procedure Get-Rate-Type-Rel-Lang'
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Rate-Type-Rel-Lang'
#end-if


RTTYPELANG.DESCR     &RTTYPELANG.DESCR


   let $Exc_Rt_Type_Val    = &RTTYPELANG.DESCR


    FROM PS_CUR_RT_TYP_LANG RTTYPELANG
    WHERE RTTYPELANG.CUR_RT_TYPE = $Seg_Cur_Rt_Typ
      AND RTTYPELANG.LANGUAGE_CD = $curr_language_cd

END-SELECT


end-procedure ! Get-Rate-Type-Rel-Lang





!***********************************************************************
!                                                                      *
! Get-Seg-Info                                                         *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Calls:        Format-DateTime                                        *
!               Get-Rslt-Ern-Ded                                       *
!               Get-Rslt-Accum                                         *
!               Get-Ded-Arrears                                        *
!                                                                      *
! Description:  Retrieves segment information to be printed in page    *
!               header.  Manages segment-level page breaking.  Manages *
!               which report sections to run based on run control.     *
!                                                                      *
!***********************************************************************


begin-procedure Get-Seg-Info


#ifdef debugy
    show 'Inside procedure Get-Seg-Info'
#end-if



BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Seg-Info'
#end-if


SEGSTAT.EMPLID          &SEGSTAT.EMPLID
SEGSTAT.CAL_RUN_ID      &SEGSTAT.CAL_RUN_ID
SEGSTAT.EMPL_RCD        &SEGSTAT.EMPL_RCD
SEGSTAT.GP_PAYGROUP     &SEGSTAT.GP_PAYGROUP
SEGSTAT.CAL_ID          &SEGSTAT.CAL_ID
SEGSTAT.RSLT_SEG_NUM    &SEGSTAT.RSLT_SEG_NUM
SEGSTAT.RSLT_VER_NUM    &SEGSTAT.RSLT_VER_NUM
SEGSTAT.RSLT_REV_NUM    &SEGSTAT.RSLT_REV_NUM
SEGSTAT.SEG_STATUS      &SEGSTAT.SEG_STATUS
SEGSTAT.SEG_BGN_DT      &SEGSTAT.SEG_BGN_DT
SEGSTAT.SEG_END_DT      &SEGSTAT.SEG_END_DT
SEGSTAT.PYMT_KEY1       &SEGSTAT.PYMT_KEY1
SEGSTAT.PYMT_KEY2       &SEGSTAT.PYMT_KEY2
SEGSTAT.PYMT_KEY3       &SEGSTAT.PYMT_KEY3
SEGSTAT.PYMT_KEY4       &SEGSTAT.PYMT_KEY4
SEGSTAT.CUR_RT_TYPE     &SEGSTAT.CUR_RT_TYPE
SEGSTAT.PIN_GROSS_VAL   &SEGSTAT.PIN_GROSS_VAL
SEGSTAT.PIN_NET_VAL     &SEGSTAT.PIN_NET_VAL
RATETYPE.EFFDT          &RATETYPE.EFFDT
RATETYPE.CUR_RT_TYPE    &RATETYPE.CUR_RT_TYPE
RATETYPE.DESCR          &RATETYPE.DESCR


!***********************************************************************
!                                                                      *
! Read-Translate-Table reads in a field name and value, and returns    *
!   $XlatShortName and XlatLongName from XLATTABLE.                    *
!                                                                      *
!***********************************************************************

    let $FieldName = 'SEG_STATUS'
    let $FieldValue = &SEGSTAT.SEG_STATUS
    do Read-Translate-Table

    let $Date4 = &SEGSTAT.SEG_BGN_DT
    do Format-DateTime($Date4, $out4, {DEFDATE}, '', '')

    let $Date5 = &SEGSTAT.SEG_END_DT
    do Format-DateTime($Date5, $out5, {DEFDATE}, '', '')



    let #Seg_Num         = &SEGSTAT.RSLT_SEG_NUM
    let #Ver_Num         = &SEGSTAT.RSLT_VER_NUM
    let #Rev_Num         = &SEGSTAT.RSLT_REV_NUM
    let $Seg_Status      = $XlatLongName
    let $Seg_Begin       = $out4
    let $Seg_End         = $out5
    let $Pymnt_Key1      = &SEGSTAT.PYMT_KEY1
    let $Pymnt_Key2      = &SEGSTAT.PYMT_KEY2
    let $Pymnt_Key3      = &SEGSTAT.PYMT_KEY3
    let $Pymnt_Key4      = &SEGSTAT.PYMT_KEY4
    let $Seg_Cur_Rt_Typ  = &SEGSTAT.CUR_RT_TYPE
    let $Exc_Rt_Type_Val = &RATETYPE.DESCR


#ifdef debugz
    show '$Emplid:          ' noline
    show $Emplid
    show 'Segment Number:   ' noline
    show #Seg_Num
    show '#Current_Seg:     ' noline
    show #Current_Seg
#end-if


     if $curr_language_cd <> $Psoptions_Language_Cd
      do Get-Rate-Type-Rel-Lang
     end-if


!***********************************************************************
!                                                                      *
! New page on segment number change within the same employee.          *
!                                                                      *
!***********************************************************************

        if $Seg_FirstTimethru = 'N'
            if #Seg_Num <> #Last_Seg_Num
                let $Page_Break_Indicator = 'Seg_Change'
                new-page
                let $Page_Break_Indicator = 'Reset'
            end-if
        end-if


!***********************************************************************
!                                                                      *
! Determine which report sections to run depending on what the user    *
!   selected in the run control.  $Run_Sections is resolved in         *
!   GPRNCTL1.SQC                                                       *
!                                                                      *
!***********************************************************************


        do Get-Absence-Info

        do Get-Rslt-Accum

    let $Seg_FirstTimeThru  = 'N'


!***********************************************************************
!                                                                      *
! Keep track of previous segment information for purposes of writing   *
!   out headers.  This info is used in GPHDG01.SQC                     *
!                                                                      *
!***********************************************************************

    let #Last_Seg_Num           = #Seg_Num
    let #Last_Ver_Num           = #Ver_Num
    let #Last_Rev_Num           = #Rev_Num
    let $Last_Seg_Status        = $Seg_Status
    let $Last_Seg_Begin         = $Seg_Begin
    let $Last_Seg_End           = $Seg_End
    let $Last_Pymnt_Key1        = $Pymnt_Key1
    let $Last_Pymnt_Key2        = $Pymnt_Key2
    let $Last_Pymnt_Key3        = $Pymnt_Key3
    let $Last_Pymnt_Key4        = $Pymnt_Key4
    let $Last_Exc_Rt_Type_Val   = $Exc_Rt_Type_Val


    FROM PS_GP_PYE_SEG_STAT     SEGSTAT,
         PS_GP_PYE_PRC_STAT     PPS,
         PS_CUR_RT_TYPE_TBL     RATETYPE

    WHERE SEGSTAT.EMPLID        = $Emplid
      AND SEGSTAT.CAL_RUN_ID    = $Cal_Run_ID
      AND SEGSTAT.EMPL_RCD      = #Empl_Rec
      AND SEGSTAT.GP_PAYGROUP   = $Paygroup
      AND SEGSTAT.CAL_ID        = $Cal_ID
      AND SEGSTAT.EMPLID         =PPS.EMPLID
      AND SEGSTAT.EMPL_RCD       =PPS.EMPL_RCD
      AND SEGSTAT.CAL_ID         =PPS.CAL_ID
      AND SEGSTAT.GP_PAYGROUP    =PPS.GP_PAYGROUP
      AND SEGSTAT.CAL_RUN_ID     =PPS.CAL_RUN_ID
      AND SEGSTAT.ORIG_CAL_RUN_ID=PPS.ORIG_CAL_RUN_ID
      AND PPS.CALC_TYPE='A'
      AND RATETYPE.CUR_RT_TYPE  = SEGSTAT.CUR_RT_TYPE
      AND RATETYPE.EFFDT        = (SELECT MAX(EFFDT) FROM PS_CUR_RT_TYPE_TBL
                                    WHERE CUR_RT_TYPE = SEGSTAT.CUR_RT_TYPE AND
                                          EFFDT <= $AsOfToday)

    ORDER BY SEGSTAT.RSLT_SEG_NUM


END-SELECT


end-procedure ! Get-Seg-Info


!***********************************************************************
!                                                                      *
! Get-Absence-Info                                                     *
!                                                                      *
!                                                                      *
! Called By:    Get-Seg-Info                                           *
!                                                                      *
! Calls:        Format-DateTime                                        *
!               Format-Number                                          *
!               Print-Absence-Info                                     *
!                                                                      *
!                                                                      *
! Description:  Retrieves absence related info for each employee       *
!               based on the information passed from previous          *
!               procedures.                                            *
!                                                                      *
!***********************************************************************


begin-procedure Get-Absence-Info


#ifdef debugy
    show 'Inside procedure Get-Absence-Info'
#end-if


    let $Absence_FirstTimethru = 'Y'

#ifdef debugy
    show $Emplid
    show $Cal_Run_ID
    show #Empl_Rec
    show $Paygroup
    show $Cal_ID
    show #Seg_Num
#end-if


BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Absence-Info'
#end-if


ABSENCE.EMPLID              &ABSENCE.EMPLID
ABSENCE.CAL_RUN_ID          &ABSENCE.CAL_RUN_ID
ABSENCE.EMPL_RCD            &ABSENCE.EMPL_RCD
ABSENCE.GP_PAYGROUP         &ABSENCE.GP_PAYGROUP
ABSENCE.CAL_ID              &ABSENCE.CAL_ID
ABSENCE.RSLT_SEG_NUM        &ABSENCE.RSLT_SEG_NUM
ABSENCE.ABSENCE_DATE        &ABSENCE.ABSENCE_DATE
ABSENCE.PIN_TAKE_NUM        &ABSENCE.PIN_TAKE_NUM
ABSENCE.ABS_DATA_SRC        &ABSENCE.ABS_DATA_SRC
ABSENCE.DAY_OF_WK           &ABSENCE.DAY_OF_WK
ABSENCE.HOLIDAY_TYPE        &ABSENCE.HOLIDAY_TYPE
ABSENCE.HOLIDAY_HRS         &ABSENCE.HOLIDAY_HRS
ABSENCE.TAKE_CONFIG1        &ABSENCE.TAKE_CONFIG1
ABSENCE.TAKE_CONFIG2        &ABSENCE.TAKE_CONFIG2
ABSENCE.TAKE_CONFIG3        &ABSENCE.TAKE_CONFIG3
ABSENCE.TAKE_CONFIG4        &ABSENCE.TAKE_CONFIG4
ABSENCE.SCHED_HRS           &ABSENCE.SCHED_HRS
ABSENCE.WORKDAYID           &ABSENCE.WORKDAYID
ABSENCE.PTO_TIME1           &ABSENCE.PTO_TIME1
ABSENCE.PTO_TIME2           &ABSENCE.PTO_TIME2
ABSENCE.PTO_TIME3           &ABSENCE.PTO_TIME3
ABSENCE.PTO_TIME4           &ABSENCE.PTO_TIME4
ABSENCE.SCHED_HRS_ALT       &ABSENCE.SCHED_HRS_ALT
ABSENCE.WORKDAYID_ALT       &ABSENCE.WORKDAYID_ALT
ABSENCE.PTO_TIME1_ALT       &ABSENCE.PTO_TIME1_ALT
ABSENCE.PTO_TIME2_ALT       &ABSENCE.PTO_TIME2_ALT
ABSENCE.PTO_TIME3_ALT       &ABSENCE.PTO_TIME3_ALT
ABSENCE.PTO_TIME4_ALT       &ABSENCE.PTO_TIME4_ALT
ABSENCE.SCHED_HRS_OVRD      &ABSENCE.SCHED_HRS_OVRD
ABSENCE.WORKDAYID_OVRD      &ABSENCE.WORKDAYID_OVRD
ABSENCE.PTO_TIME1_OVRD      &ABSENCE.PTO_TIME1_OVRD
ABSENCE.PTO_TIME2_OVRD      &ABSENCE.PTO_TIME2_OVRD
ABSENCE.PTO_TIME3_OVRD      &ABSENCE.PTO_TIME3_OVRD
ABSENCE.PTO_TIME4_OVRD      &ABSENCE.PTO_TIME4_OVRD
ABSENCE.SCHED_IND_ALT_OVRD  &ABSENCE.SCHED_IND_ALT_OVRD
ABSENCE.SCHED_HRS_ALT_OVRD  &ABSENCE.SCHED_HRS_ALT_OVRD
ABSENCE.WORKDAYID_ALT_OVRD  &ABSENCE.WORKDAYID_ALT_OVRD
ABSENCE.PTO_TIME1_ALT_OVRD  &ABSENCE.PTO_TIME1_ALT_OVRD
ABSENCE.PTO_TIME2_ALT_OVRD  &ABSENCE.PTO_TIME2_ALT_OVRD
ABSENCE.PTO_TIME3_ALT_OVRD  &ABSENCE.PTO_TIME3_ALT_OVRD
ABSENCE.PTO_TIME4_ALT_OVRD  &ABSENCE.PTO_TIME4_ALT_OVRD
ABSENCE.ORIG_BEGIN_DT       &ABSENCE.ORIG_BEGIN_DT
ABSENCE.PARTIAL_HRS         &ABSENCE.PARTIAL_HRS
ABSENCE.BEGIN_DAY_IND       &ABSENCE.BEGIN_DAY_IND
ABSENCE.BEGIN_DAY_HALF_IND  &ABSENCE.BEGIN_DAY_HALF_IND
ABSENCE.END_DAY_IND         &ABSENCE.END_DAY_IND
ABSENCE.END_DAY_HALF_IND    &ABSENCE.END_DAY_HALF_IND
ABSENCE.ABS_BGN_DT          &ABSENCE.ABS_BGN_DT
ABSENCE.FIRST_EVT_BGN_DT    &ABSENCE.FIRST_EVT_BGN_DT
ABSENCE.DAY_COUNT           &ABSENCE.DAY_COUNT
ABSENCE.DAY_COUNT_PAID      &ABSENCE.DAY_COUNT_PAID
ABSENCE.DAY_COUNT_UNPAID    &ABSENCE.DAY_COUNT_UNPAID
ABSENCE.WAIT_COUNT          &ABSENCE.WAIT_COUNT
ABSENCE.ELIG_DATE           &ABSENCE.ELIG_DATE
ABSENCE.ELIG_IND            &ABSENCE.ELIG_IND
ABSENCE.MIN_PRD             &ABSENCE.MIN_PRD
ABSENCE.MIN_IND             &ABSENCE.MIN_IND
ABSENCE.LINK_PRD            &ABSENCE.LINK_PRD
ABSENCE.LINKED_IND          &ABSENCE.LINKED_IND
ABSENCE.CUM_EVENT_WAIT      &ABSENCE.CUM_EVENT_WAIT
ABSENCE.CUM_LINKED_WAIT     &ABSENCE.CUM_LINKED_WAIT
ABSENCE.BEGIN_WAIT_BAL      &ABSENCE.BEGIN_WAIT_BAL
ABSENCE.END_WAIT_BAL        &ABSENCE.END_WAIT_BAL
ABSENCE.BEGIN_ENTL_BAL      &ABSENCE.BEGIN_ENTL_BAL
ABSENCE.END_ENTL_BAL        &ABSENCE.END_ENTL_BAL
ABSENCE.PIN_MAP_TO_NUM      &ABSENCE.PIN_MAP_TO_NUM
ABSENCE.PIN_SOURCE_NUM      &ABSENCE.PIN_SOURCE_NUM
ABSENCE.PIN_NEG_ABS_NUM     &ABSENCE.PIN_NEG_ABS_NUM
GPPIN.PIN_NM                &GPPIN.PIN_NM


    let $Date1 = &ABSENCE.ABSENCE_DATE
    do Format-DateTime($Date1, $out1, {DEFDATE}, '', '')

    let $Date2 = &ABSENCE.ORIG_BEGIN_DT
    do Format-DateTime($Date2, $out2, {DEFDATE}, '', '')

    let $Date3 = &ABSENCE.ABS_BGN_DT
    do Format-DateTime($Date3, $out3, {DEFDATE}, '', '')

    let $Date4 = &ABSENCE.FIRST_EVT_BGN_DT
    do Format-DateTime($Date4, $out4, {DEFDATE}, '', '')

    let $Date5 = &ABSENCE.ELIG_DATE
    do Format-DateTime($Date5, $out5, {DEFDATE}, '', '')




    let #Number1 = &ABSENCE.HOLIDAY_HRS
    do Format-Number(#Number1,    $Number1,       '99.99')

    let #Number2 = &ABSENCE.SCHED_HRS
    do Format-Number(#Number2,    $Number2,       '99.99')

    let #Number3 = &ABSENCE.PTO_TIME1
    do Format-Number(#Number3,    $Number3,       '99.99')

    let #Number4 = &ABSENCE.PTO_TIME2
    do Format-Number(#Number4,    $Number4,       '99.99')

    let #Number5 = &ABSENCE.PTO_TIME3
    do Format-Number(#Number5,    $Number5,       '99.99')

    let #Number6 = &ABSENCE.PTO_TIME4
    do Format-Number(#Number6,    $Number6,       '99.99')

    let #Number7 = &ABSENCE.SCHED_HRS_ALT
    do Format-Number(#Number7,    $Number7,       '99.99')

    let #Number8 = &ABSENCE.PTO_TIME1_ALT
    do Format-Number(#Number8,    $Number8,       '99.99')

    let #Number9 = &ABSENCE.PTO_TIME2_ALT
    do Format-Number(#Number9,    $Number9,       '99.99')

    let #Number10 = &ABSENCE.PTO_TIME3_ALT
    do Format-Number(#Number10,    $Number10,     '99.99')

    let #Number11 = &ABSENCE.PTO_TIME4_ALT
    do Format-Number(#Number11,    $Number11,     '99.99')

    let #Number12 = &ABSENCE.SCHED_HRS_OVRD
    do Format-Number(#Number12,    $Number12,     '99.99')

    let #Number13 = &ABSENCE.PTO_TIME1_OVRD
    do Format-Number(#Number13,    $Number13,     '99.99')

    let #Number14 = &ABSENCE.PTO_TIME2_OVRD
    do Format-Number(#Number14,    $Number14,     '99.99')

    let #Number15 = &ABSENCE.PTO_TIME3_OVRD
    do Format-Number(#Number15,    $Number15,     '99.99')

    let #Number16 = &ABSENCE.PTO_TIME4_OVRD
    do Format-Number(#Number16,    $Number16,     '99.99')

    let #Number17 = &ABSENCE.SCHED_HRS_ALT_OVRD
    do Format-Number(#Number17,    $Number17,     '99.99')

    let #Number18 = &ABSENCE.PTO_TIME1_ALT_OVRD
    do Format-Number(#Number18,    $Number18,     '99.99')

    let #Number19 = &ABSENCE.PTO_TIME2_ALT_OVRD
    do Format-Number(#Number19,    $Number19,     '99.99')

    let #Number20 = &ABSENCE.PTO_TIME3_ALT_OVRD
    do Format-Number(#Number20,    $Number20,     '99.99')

    let #Number21 = &ABSENCE.PTO_TIME4_ALT_OVRD
    do Format-Number(#Number21,    $Number21,     '99.99')

    let #Number22 = &ABSENCE.PARTIAL_HRS
    do Format-Number(#Number22,    $Number22,     '9999.99999')

    let #Number23 = &ABSENCE.DAY_COUNT
    do Format-Number(#Number23,    $Number23,     '9999.999999')

    let #Number24 = &ABSENCE.DAY_COUNT_PAID
    do Format-Number(#Number24,    $Number24,     '9999.999999')

    let #Number25 = &ABSENCE.DAY_COUNT_UNPAID
    do Format-Number(#Number25,    $Number25,     '9999.999999')

    let #Number26 = &ABSENCE.WAIT_COUNT
    do Format-Number(#Number26,    $Number26,     '9999.999999')

    let #Number27 = &ABSENCE.MIN_PRD
    do Format-Number(#Number27,    $Number27,     '9999.999999')

    let #Number28 = &ABSENCE.LINK_PRD
    do Format-Number(#Number28,    $Number28,     '9999.999999')

    let #Number29 = &ABSENCE.CUM_EVENT_WAIT
    do Format-Number(#Number29,    $Number29,     '9999.999999')

    let #Number30 = &ABSENCE.CUM_LINKED_WAIT
    do Format-Number(#Number30,    $Number30,     '9999.999999')

    let #Number31 = &ABSENCE.BEGIN_WAIT_BAL
    do Format-Number(#Number31,    $Number31,     '9999.999999')

    let #Number32 = &ABSENCE.END_WAIT_BAL
    do Format-Number(#Number32,    $Number32,     '9999.999999')

    let #Number33 = &ABSENCE.BEGIN_ENTL_BAL
    do Format-Number(#Number33,    $Number33,     '9999.999999')

    let #Number34 = &ABSENCE.END_ENTL_BAL
    do Format-Number(#Number34,    $Number34,     '9999.999999')


    let $Abs_Date               = $out1
    let #Abs_PIN_Take_Num         = &ABSENCE.PIN_TAKE_NUM
    let $Abs_Data_Src           = &ABSENCE.ABS_DATA_SRC
    let $Abs_Day_Of_Wk          = &ABSENCE.DAY_OF_WK
    let $Abs_Hol_Type           = &ABSENCE.HOLIDAY_TYPE
    let $Abs_Hol_Hrs            = $Number1
    let $Abs_Tk_Config1         = &ABSENCE.TAKE_CONFIG1
    let $Abs_Tk_Config2         = &ABSENCE.TAKE_CONFIG2
    let $Abs_Tk_Config3         = &ABSENCE.TAKE_CONFIG3
    let $Abs_Tk_Config4         = &ABSENCE.TAKE_CONFIG4
    let $Abs_Sched_Hrs          = $Number2
    let $Abs_WorkdayID          = &ABSENCE.WORKDAYID
    let $Abs_PTO_Time1          = $Number3
    let $Abs_PTO_Time2          = $Number4
    let $Abs_PTO_Time3          = $Number5
    let $Abs_PTO_Time4          = $Number6
    let $Abs_Sched_Hrs_Alt      = $Number7
    let $Abs_WorkdayID_Alt      = &ABSENCE.WORKDAYID_ALT
    let $Abs_PTO_Time1_Alt      = $Number8
    let $Abs_PTO_Time2_Alt      = $Number9
    let $Abs_PTO_Time3_Alt      = $Number10
    let $Abs_PTO_Time4_Alt      = $Number11
    let $Abs_Sched_Hrs_Ovrd     = $Number12
    let $Abs_WorkdayID_Ovrd     = &ABSENCE.WORKDAYID_OVRD
    let $Abs_PTO_Time1_Ovrd     = $Number13
    let $Abs_PTO_Time2_Ovrd     = $Number14
    let $Abs_PTO_Time3_Ovrd     = $Number15
    let $Abs_PTO_Time4_Ovrd     = $Number16
    let $Abs_Sched_Ind_Alt_Ovrd = &ABSENCE.SCHED_IND_ALT_OVRD
    let $Abs_Sched_Hrs_Alt_Ovrd = $Number17
    let $Abs_WorkdayID_Alt_Ovrd = &ABSENCE.WORKDAYID_ALT_OVRD
    let $Abs_PTO_Time1_Alt_Ovrd = $Number18
    let $Abs_PTO_Time2_Alt_Ovrd = $Number19
    let $Abs_PTO_Time3_Alt_Ovrd = $Number20
    let $Abs_PTO_Time4_Alt_Ovrd = $Number21
    let $Abs_Orig_Begin_Dt      = $out2
    let $Abs_Partial_Hrs        = $Number22
    let $Abs_Begin_Day_Ind      = &ABSENCE.BEGIN_DAY_IND
    let $Abs_Begin_Half_Ind     = &ABSENCE.BEGIN_DAY_HALF_IND
    let $Abs_End_Day_Ind        = &ABSENCE.END_DAY_IND
    let $Abs_End_Day_Half_Ind   = &ABSENCE.END_DAY_HALF_IND
    let $Abs_Bgn_Dt             = $out3
    let $Abs_First_Evt_Bgn_Dt   = $out4
    let $Abs_Day_Count          = $Number23
    let $Abs_Day_Count_Paid     = $Number24
    let $Abs_Day_Count_Unpaid   = $Number25
    let $Abs_Wait_Count         = $Number26
    let $Abs_Elig_Date          = $out5
    let $Abs_Elig_Ind           = &ABSENCE.ELIG_IND
    let $Abs_Min_Prd            = $Number27
    let $Abs_Min_Ind            = &ABSENCE.MIN_IND
    let $Abs_Link_Prd           = $Number28
    let $Abs_Linked_Ind         = &ABSENCE.LINKED_IND
    let $Abs_Cum_Event_Wait     = $Number29
    let $Abs_Cum_Linked_Wait    = $Number30
    let $Abs_Begin_Wait_Bal     = $Number31
    let $Abs_End_Wait_Bal       = $Number32
    let $Abs_Begin_Entl_Bal     = $Number33
    let $Abs_End_Entl_Bal       = $Number34
    let $Abs_PIN_Map_To_Num     = &ABSENCE.PIN_MAP_TO_NUM
    let $Abs_PIN_Source_Num     = &ABSENCE.PIN_SOURCE_NUM
    let $Abs_PIN_Neg_Abs_Num    = &ABSENCE.PIN_NEG_ABS_NUM
    let $Element_Name           = &GPPIN.PIN_NM

!#ifdef debugy
!    show $Abs_Date
!    show #Abs_PIN_Take_Num
!    show $Abs_Data_Src
!    show $Abs_Day_Of_Wk
!    show $Abs_Hol_Type
!    show $Abs_Hol_Hrs
!    show $Abs_Tk_Config1
!    show $Abs_Tk_Config2
!    show $Abs_Tk_Config3
!    show $Abs_Tk_Config4
!    show $Abs_Sched_Hrs
!    show $Abs_WorkdayID
!    show $Abs_PTO_Time1
!    show $Abs_PTO_Time2
!    show $Abs_PTO_Time3
!    show $Abs_PTO_Time4
!    show $Abs_Sched_Hrs_Alt
!    show $Abs_WorkdayID_Alt
!    show $Abs_PTO_Time1_Alt
!    show $Abs_PTO_Time2_Alt
!    show $Abs_PTO_Time3_Alt
!    show $Abs_PTO_Time4_Alt
!    show $Abs_Sched_Hrs_Ovrd
!    show $Abs_WorkdayID_Ovrd
!    show $Abs_PTO_Time1_Ovrd
!    show $Abs_PTO_Time2_Ovrd
!    show $Abs_PTO_Time3_Ovrd
!    show $Abs_PTO_Time4_Ovrd
!    show $Abs_Sched_Ind_Alt_Ovrd
!    show $Abs_Sched_Hrs_Alt_Ovrd
!    show $Abs_WorkdayID_Alt_Ovrd
!    show $Abs_PTO_Time1_Alt_Ovrd
!    show $Abs_PTO_Time2_Alt_Ovrd
!    show $Abs_PTO_Time3_Alt_Ovrd
!    show $Abs_PTO_Time4_Alt_Ovrd
!    show $Abs_Orig_Begin_Dt
!    show $Abs_Partial_Hrs
!    show $Abs_Begin_Day_Ind
!    show $Abs_Begin_Half_Ind
!    show $Abs_Bgn_Dt
!    show $Abs_First_Evt_Bgn_Dt
!    show $Abs_Day_Count
!    show $Abs_Day_Count_Paid
!    show $Abs_Day_Count_Unpaid
!    show $Abs_Wait_Count
!    show $Abs_Elig_Date
!    show $Abs_Elig_Ind
!    show $Abs_Min_Prd
!    show $Abs_Link_Prd
!    show $Abs_Linked_Ind
!    show $Abs_Cum_Event_Wait
!    show $Abs_Cum_Linked_Wait
!    show $Abs_Begin_Wait_Bal
!    show $Abs_End_Wait_Bal
!    show $Abs_Begin_Entl_Bal
!    show $Abs_End_Entl_Bal
!    show $Abs_PIN_Map_To_Num
!    show $Abs_PIN_Source_Num
!    show $Abs_PIN_Neg_Abs_Num
!#end-if



!#ifdef debugz
!    show 'PIN Number:       ' noline
!    show #Ern_Ded_PIN_Num
!    show 'Instance Number:  ' noline
!    show #Ern_Ded_Instance
!
!#end-if


    if $curr_language_cd <> $Psoptions_Language_Cd
        let #PIN_Num             = #Abs_PIN_Take_Num
        do exchange-pin-name
        if isblank($PIN_Name)
!          Take the default language PIN name
        else
           let $Element_Name        = $PIN_Name
        end-if
    end-if


    do Print-Absence-Info

    let $Absence_FirstTimethru = 'N'


    FROM PS_GP_RSLT_ABS ABSENCE,
         PS_GP_PIN      GPPIN

    WHERE ABSENCE.EMPLID         = $Emplid
      AND ABSENCE.CAL_RUN_ID     = $Cal_Run_ID
      AND ABSENCE.EMPL_RCD       = #Empl_Rec
      AND ABSENCE.GP_PAYGROUP    = $Paygroup
      AND ABSENCE.CAL_ID         = $Cal_ID
      AND ABSENCE.RSLT_SEG_NUM   = #Seg_Num
      AND ABSENCE.PIN_TAKE_NUM   = GPPIN.PIN_NUM

   ORDER BY ABSENCE.ABSENCE_DATE ASC

END-SELECT


end-procedure ! Get-Absence-Info


!***********************************************************************
!                                                                      *
! exchange-pin-name                                                    *
!                                                                      *
!                                                                      *
! Called By:    Get-Rslt-Ern-Ded                                       *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Retrieve PIN Name related language entry.  Trim to fit *
!                   report.                                            *
!                                                                      *
!***********************************************************************


begin-procedure exchange-pin-name


#ifdef debugy
    show 'Inside procedure exchange-pin-name'
#end-if



BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure exchange-pin-name'
#end-if


PINLANG.PIN_NM  &PINLANG.PIN_NM


    let $PIN_Name     = &PINLANG.PIN_NM

    if length($PIN_Name) > 15
        let $PIN_Name = substr($PIN_Name,1,15)
    end-if


    FROM PS_GP_PIN_LANG PINLANG

    WHERE PINLANG.PIN_NUM     = #PIN_Num
      AND PINLANG.LANGUAGE_CD = $curr_language_cd


END-SELECT


end-procedure ! exchange-pin-name


!***********************************************************************
!                                                                      *
! Print-Absence-Info                                                   *
!                                                                      *
!                                                                      *
! Called By:    Get-Absence-Info                                       *
!                                                                      *
! Calls:        Print-Absence-Header                                   *
!                                                                      *
! Description:                                                         *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************


begin-procedure Print-Absence-Info


#ifdef debugy
        show 'Inside procedure Print-Absence-Info'
#end-if


!***********************************************************************
!                                                                      *
! Make sure that a single row of retrieved information, which prints   *
!   as two lines on the report, is not split so that the first line is *
!   on one page and the second line is on the other.  If this is the   *
!   case, start a new page so that both lines print on the new page.   *
!                                                                      *
!***********************************************************************

    if #current-line + 4 > #Maxlines
        new-page
        let $Absence_FirstTimethru = 'Y'
    end-if


    if $Absence_FirstTimethru = 'Y'
        do Print-Absence-Header
    end-if


    print $Element_Name                 (+2,{Col_Cal_Run_Label})
    print $Abs_Date                     (,{Col_Date_Day_Source_lbl})
    print $Begin_Balance_lbl            (,{Col_Entitlement_lbl})
    print $Abs_Begin_Entl_Bal           (,{Col_Entitlement_Data})
    print $Regular_lbl                  (,{Col_Schedule_lbl})
    print $Abs_WorkdayID                (,{Col_WorkdayID_Over_lbl})
    print $Abs_Sched_Hrs                (,{Col_Hours_Over_lbl})
    print $Begin_Balance_lbl            (,{Col_Wait_lbl})
    print $Abs_Begin_Wait_Bal           (,{Col_Wait_Data})
    print $Indicator_lbl                (,{Col_Eligible_lbl})
    print $Abs_Elig_Ind                 (,{Col_Eligible_Flag})
    print $Indicator_lbl                (,{Col_Link_lbl})
    print $Abs_Linked_Ind               (,{Col_Link_Flag})

    print $Abs_Day_Of_Wk                (+1,{Col_Date_Day_Source_lbl})
    print $Day_Count_lbl                (,{Col_Entitlement_lbl})
    print $Abs_Day_Count                (,{Col_Entitlement_Data})
    print $Alt_lbl                      (,{Col_Schedule_lbl})
    print $Abs_WorkdayID_Alt            (,{Col_WorkdayID_Over_lbl})
    print $Abs_Sched_Hrs_Alt            (,{Col_Hours_Over_lbl})
    print $Count_lbl                    (,{Col_Wait_lbl})
    print $Abs_Wait_Count               (,{Col_Wait_Data})
    print $Date_lbl                     (,{Col_Eligible_lbl})
    print $Abs_Elig_Date                (,{Col_Eligible_Data})
    print $Period_lbl                   (,{Col_Link_lbl})
    print $Abs_Link_Prd                 (,{Col_Link_Data})

    print $Abs_Data_Src                 (+1,{Col_Date_Day_Source_lbl})
    print $Day_Paid_lbl                 (,{Col_Entitlement_lbl})
    print $Abs_Day_Count_Paid           (,{Col_Entitlement_Data})
    print $Regular_lbl                  (,{Col_Schedule_lbl})
    print $Abs_WorkdayID_Ovrd           (,{Col_WorkdayID_Over_lbl})
    print $Abs_Sched_Hrs_Ovrd           (,{Col_Hours_Over_lbl})
    print $End_Balance_lbl              (,{Col_Wait_lbl})
    print $Abs_End_Wait_Bal             (,{Col_Wait_Data})
    print $Min_Per_Ind_lbl              (,{Col_Eligible_lbl})
    print $Abs_Min_Ind                  (,{Col_Eligible_Flag})

    print $Day_Unpaid_lbl               (+1,{Col_Entitlement_lbl})
    print $Abs_Day_Count_Unpaid         (,{Col_Entitlement_Data})
    print $Alt_lbl                      (,{Col_Schedule_lbl})
    print $Abs_WorkdayID_Alt_Ovrd       (,{Col_WorkdayID_Over_lbl})
    print $Abs_Sched_Hrs_Alt_Ovrd       (,{Col_Hours_Over_lbl})
    print $Cum_Short_lbl                (,{Col_Wait_lbl})
    print $Abs_Cum_Event_Wait           (,{Col_Wait_Data})
    print $Min_Per_lbl                  (,{Col_Eligible_lbl})
    print $Abs_Min_Prd                  (,{Col_Eligible_Data})

    print $End_Balance_lbl              (+1,{Col_Entitlement_lbl})
    print $Abs_End_Entl_Bal             (,{Col_Entitlement_Data})


end-procedure ! Print-Absence-Info


!***********************************************************************
!                                                                      *
! Print-Absence-Header                                                 *
!                                                                      *
!                                                                      *
! Called By:    Print-Absence-Info                                     *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Prints "Earnings and Deductions" section header.       *
!               Manages page breaking for "Earnings and Deductions"    *
!               section.                                               *
!                                                                      *
!***********************************************************************


begin-procedure Print-Absence-Header


#ifdef debugy
    show 'Inside procedure Print-Absence-Header'
#end-if


!***********************************************************************
!                                                                      *
! If beginning a new report section, do not print a section header and *
!   only one row of information on a page.  If this is the case, start *
!   a new page, then print the header & body.                          *
!                                                                      *
!***********************************************************************

    if #current-line + 11 > #Maxlines
        new-page
    end-if


    print $Element_Name_lbl             (+2,{Col_Cal_Run_Label})        Underline
    print $Date_lbl                     (,{Col_Date_Day_Source_lbl})    Underline
    print $Entitlement_lbl              (,{Col_Entitlement_lbl})        Underline
    print $Schedule_lbl                 (,{Col_Schedule_lbl})           Underline
    print $Work_Day_ID_lbl              (,{Col_WorkdayID_Over_lbl})     Underline
    print $Hours_lbl                    (,{Col_Hours_Over_lbl})         Underline
    print $Wait_lbl                     (,{Col_Wait_lbl})               Underline
    print $Eligible_lbl                 (,{Col_Eligible_lbl})           Underline
    print $Link_lbl                     (,{Col_Link_lbl})               Underline

    print $Slash_Day_lbl                (+1,{Col_Date_Day_Source_lbl})  Underline
    print $Slash_Over_lbl               (,{Col_WorkdayID_Over_lbl})     Underline
    print $Slash_Over_lbl               (,{Col_Hours_Over_lbl})         Underline

    print $Slash_Source_lbl             (+1,{Col_Date_Day_Source_lbl})  Underline



end-procedure ! Print-Absence-Header


!***********************************************************************
!                                                                      *
! Get-Rslt-Accum                                                       *
!                                                                      *
!                                                                      *
! Called By:    Get-Seg-Info                                           *
!                                                                      *
! Calls:        Format-DateTime                                        *
!               Read-Translate-Table                                   *
!               Print-Rslt-Accum                                       *
!                                                                      *
! Description:  Retrieves accumulators info.  Manages "Accumulators"   *
!               section header printing.                               *
!                                                                      *
!***********************************************************************


begin-procedure Get-Rslt-Accum


#ifdef debugy
    show 'Inside procedure Get-Rslt-Accum'
#end-if


    let $Accum_FirstTimethru = 'Y'



BEGIN-SELECT


#ifdef debugy
    show 'Inside SELECT, procedure Get-Rslt-Accum'
#end-if


ACCUM.EMPLID            &ACCUM.EMPLID
ACCUM.CAL_RUN_ID        &ACCUM.CAL_RUN_ID
ACCUM.EMPL_RCD          &ACCUM.EMPL_RCD
ACCUM.GP_PAYGROUP       &ACCUM.GP_PAYGROUP
ACCUM.CAL_ID            &ACCUM.CAL_ID
ACCUM.RSLT_SEG_NUM      &ACCUM.RSLT_SEG_NUM
ACCUM.PIN_NUM           &ACCUM.PIN_NUM
ACCUM.EMPL_RCD_ACUM     &ACCUM.EMPL_RCD_ACUM
ACCUM.ACM_FROM_DT       &ACCUM.ACM_FROM_DT
ACCUM.ACM_THRU_DT       &ACCUM.ACM_THRU_DT
ACCUM.USER_KEY1         &ACCUM.USER_KEY1
ACCUM.USER_KEY2         &ACCUM.USER_KEY2
ACCUM.USER_KEY3         &ACCUM.USER_KEY3
ACCUM.USER_KEY4         &ACCUM.USER_KEY4
ACCUM.SLICE_BGN_DT      &ACCUM.SLICE_BGN_DT
ACCUM.SLICE_END_DT      &ACCUM.SLICE_END_DT
ACCUM.CALC_VAL          &ACCUM.CALC_VAL
ACCUM.USER_ADJ_VAL      &ACCUM.USER_ADJ_VAL
ACCUM.ACM_PRD_OPTN      &ACCUM.ACM_PRD_OPTN
ACCUM.ACM_TYPE          &ACCUM.ACM_TYPE
ACCUM.CALC_RSLT_VAL     &ACCUM.CALC_RSLT_VAL
PIN2.PIN_NM             &PIN2.PIN_NM


    let $Date10 = &ACCUM.ACM_FROM_DT
    do Format-DateTime($Date10, $out10, {DEFDATE}, '', '')

    let $Date11 = &ACCUM.ACM_THRU_DT
    do Format-DateTime($Date11, $out11, {DEFDATE}, '', '')

    let $Date12 = &ACCUM.SLICE_BGN_DT
    do Format-DateTime($Date12, $out12, {DEFDATE}, '', '')

    let $Date13 = &ACCUM.SLICE_END_DT
    do Format-DateTime($Date13, $out13, {DEFDATE}, '', '')

    let #Acc_Rslt_Val = &ACCUM.CALC_RSLT_VAL
    do Format-Number(#Acc_Rslt_Val, $Acc_Rslt_Val, '999,999,999,999.999999')

    let #Acc_Calc_Val = &ACCUM.CALC_VAL
    do Format-Number(#Acc_Calc_Val, $Acc_Calc_Val, '999,999,999,999.999999')

    let #Acc_Adj_Val = &ACCUM.USER_ADJ_VAL
    do Format-Number(#Acc_Adj_Val,  $Acc_Adj_Val,  '999,999,999,999.999999')


    let $FieldName = 'ACM_PRD_OPTN'
    let $FieldValue = &ACCUM.ACM_PRD_OPTN
    do Read-Translate-Table


    let #Accum_PIN_Num          = &ACCUM.PIN_NUM
    let $Accum_From_Dt          = $out10
    let $Accum_Thru_Dt          = $out11
    let $User_Key1              = &ACCUM.USER_KEY1
    let $User_Key2              = &ACCUM.USER_KEY2
    let $User_Key3              = &ACCUM.USER_KEY3
    let $User_Key4              = &ACCUM.USER_KEY4
    let $Accum_Slice_Begin_Dt   = $out12
    let $Accum_Slice_End_Dt     = $out13
    let $Value                  = $Acc_Rslt_Val
    let $Forward_Adj            = $Acc_Calc_Val
    let $Adjustment             = $Acc_Adj_Val
    let $Period                 = $XlatLongName
    let $Accum_PIN_Name         = &PIN2.PIN_NM


!***********************************************************************
!                                                                      *
!   Trim user keys to fit the space available on the report page.      *
!                                                                      *
!***********************************************************************


    if length($User_Key1) > 19
        let $User_Key1 = substr($User_Key1,1,19)
    end-if

    if length($User_Key2) > 19
        let $User_Key2 = substr($User_Key2,1,19)
    end-if

    if length($User_Key3) > 19
        let $User_Key3 = substr($User_Key3,1,19)
    end-if

    if length($User_Key4) > 19
        let $User_Key4 = substr($User_Key4,1,19)
    end-if

    if length($Period) > 26
        let $Period = substr($Period,1,26)
    end-if


#ifdef debugz
    show '$Emplid:      ' noline
    show $Emplid
    show 'Seg Num:      ' noline
    show #Seg_Num
    show 'PIN Number:   ' noline
    show #Accum_PIN_Num
#end-if


    if $curr_language_cd <> $Psoptions_Language_Cd
        let #PIN_Num             = #Accum_PIN_Num
        do exchange-pin-name
        if isblank($PIN_Name)
!          Take the default language PIN name
        else
           let $Accum_PIN_Name   = $PIN_Name
        end-if
    end-if


    do Print-Rslt-Accum


    let $Accum_FirstTimethru = 'N'


!***********************************************************************
!                                                                      *
! Control page breaking based on user's selection in the run control   *
!   of which report sections are to be run.                            *
!                                                                      *
!***********************************************************************



    FROM PS_GP_RSLT_ACUM   ACCUM,
         PS_GP_PIN         PIN2,
         PS_GP_PIN         PIN21,
         PS_GP_PIN_TYPE    T
    WHERE ACCUM.EMPLID        = $Emplid
      AND ACCUM.CAL_RUN_ID    = $Cal_Run_ID
      AND ACCUM.EMPL_RCD      = #Empl_Rec
      AND ACCUM.GP_PAYGROUP   = $Paygroup
      AND ACCUM.CAL_ID        = $Cal_ID
      AND ACCUM.RSLT_SEG_NUM  = #Seg_Num
      AND PIN2.PIN_NUM        = ACCUM.PIN_NUM
      AND PIN21.PIN_NUM       = PIN2.PIN_PARENT_NUM
      AND T.PIN_TYPE          = PIN21.PIN_TYPE
      AND T.PIN_TYPE          = 'AE'

END-SELECT


end-procedure ! Get-Rslt-Accum


!***********************************************************************
!                                                                      *
! Print-Rslt-Accum                                                     *
!                                                                      *
!                                                                      *
! Called By:    Get-Rslt-Accum                                         *
!                                                                      *
! Calls:        Print-Rslt-Accum-Header                                *
!                                                                      *
! Description:  Prints body of "Accumulators" section.  Manages        *
!               "Accumulators" section header printing.  Manages page  *
!               breaking within the body of "Accumulators" section.    *
!                                                                      *
!***********************************************************************


begin-procedure Print-Rslt-Accum


#ifdef debugy
    show 'Inside procedure Print-Rslt-Accum'
#end-if


#ifdef debugz
    show '$Run_Sections  ' noline
    show $Run_Sections
    show '$FirstTimeThru ' noline
    show $FirstTimeThru
    show '$Current_EE    ' noline
    show $Current_EE
    show '$Last_EE       ' noline
    show $Last_EE
    show '#Current_Seg   ' noline
    show #Current_Seg
    show '#Last_Seg      ' noline
    show #Last_Seg
#end-if


!***********************************************************************
!                                                                      *
! Make sure that a single row of retrieved information, which prints   *
!   as two lines on the report, is not split so that the first line is *
!   on one page and the second line is on the other.  If this is the   *
!   case, start a new page so that both lines print on the new page.   *
!                                                                      *
!***********************************************************************

    if #current-line + 15 > #Maxlines
        new-page
        let $Accum_FirstTimethru = 'Y'
    end-if


    if $Accum_FirstTimethru = 'Y'
        do Print-Rslt-Accum-Header
    end-if


    print $Accum_PIN_Name         (+1,{Col_Cal_Run_Label})
    print $Accum_From_Dt          (,{Col_From_To})
    print $User_Key1              (,{Col_Key1})
    print $User_Key3              (,{Col_Key3})
    print $Accum_Slice_Begin_Dt   (,{Col_Accum_Slice_Date})


!***********************************************************************
!                                                                      *
! Do not print the value of a field if it is zero.  Check for all      *
! formats based on the report language.                                *
!                                                                      *
!***********************************************************************

    if $Value <>           '              0,000000'
        if $Value <>       '              0.000000'
            print $Value          (,{Col_Value})
        end-if
    end-if

    if $Adjustment <>      '              0,000000'
        if $Adjustment <>  '              0.000000'
            print $Adjustment     (,{Col_Unit_Adj})
        end-if
    end-if

    print $Period                 (,{Col_Period})

    print $Accum_Thru_Dt          (+1,{Col_From_To})
    print $Accum_Slice_End_Dt     (,{Col_Accum_Slice_Date})

    print $User_Key2              (,{Col_Key1})
    print $User_Key4              (,{Col_Key3})

    if $Forward_Adj <>     '              0,000000'
        if $Forward_Adj <> '              0.000000'
            print $Forward_Adj    (,{Col_Unit_Adj})
        end-if
    end-if


end-procedure ! Print-Rslt-Accum


!***********************************************************************
!                                                                      *
! Print-Rslt-Accum-Header                                              *
!                                                                      *
!                                                                      *
! Called By:    Print-Rslt-Accum                                       *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Prints "Accumulators" section header.  Manages page    *
!               breaking for "Accumulators" section.                   *
!                                                                      *
!***********************************************************************


begin-procedure Print-Rslt-Accum-Header


#ifdef debugy
        show 'Inside procedure Print-Rslt-Accum-Header'
#end-if


!***********************************************************************
!                                                                      *
! If beginning a new report section, do not print a section header and *
!   only one row of information on a page.  If this is the case, start *
!   a new page, then print the header & body.                          *
!                                                                      *
!***********************************************************************

    if #current-line + 15 > #Maxlines
        new-page
    end-if


        print $Accum_Title_lbl      (+2,{Col_Cal_Run_Label}) bold
        print $Elem_Nm_lbl          (+2,{Col_Cal_Run_Label})
        print $From_To_lbl          (,{Col_From_To})
        print $Key1_lbl             (,{Col_Key1})
        print $Key3_lbl             (,{Col_Key3})
        print $Slice_Dt_lbl         (,{Col_Accum_Slice_Date})
        print $Value_Fwd_Adj_lbl    (,{Col_Value_lbl})
        print $Adj_lbl              (,{Col_Unit_Adj})
        print $Prd_lbl              (,{Col_Period_lbl})
        graphic (, 2, 180) horz-line


end-procedure ! Print-Rslt-Accum-Header




!***********************************************************************
!                                                                      *
! Delete-RunControl                                                    *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        none                                                   *
!                                                                      *
! Description:  Delete run control when report comes to successful     *
!                   end.                                               *
!                                                                      *
!***********************************************************************


begin-procedure Delete-RunControl


#ifdef debugy
        show 'Inside procedure Delete-RunControl'
#end-if


begin-SQL


DELETE FROM PS_GP_RUNCTL_SQR
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
            COMMIT;
        #endif

DELETE FROM PS_GP_RUNCTL_SQR01
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
            COMMIT;
        #endif

DELETE FROM PS_GP_RUNCTL_SQR02
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
            COMMIT;
        #endif


end-SQL


end-procedure ! Delete-RunControl


!***********************************************************************
!                                                                      *
!                                                                      *
! SQCS included in the SQR
!                                                                      *
!***********************************************************************

#include 'gprnctl1.sqc'     ! Get run control parameter values, specific to this report
#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcsapi.sqc'      ! Replaces stdapi.sqc
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset1.sqc'       ! Reset printer procedure
#include 'hrsecty.sqc'      ! Get SQR Security parameters
