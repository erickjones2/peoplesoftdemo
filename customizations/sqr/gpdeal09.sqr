!***********************************************************************
!  GPDEAL09:  Overpayment List (Ueberzahlungsliste)                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:09                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!ChangedFor2004Bdl2: changed MAXEFFDT for PS_NAMES
#include 'setenv.sqc' !set environment
#include 'setup31.sqc'

#define col1 5              !P-Nr
#define col2 24             !Name/Vorname
#define col3 74             !Beschaeftigungszeit von
#define col4 104
#define col5 109

begin-report
  do Init-DateTime
  do Init-number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

!************************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do Ask-Input
  else
     do Get-Report-Parameters
  end-if

  move 'GPDEAL09' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  let $ReportTitle = $TITLE_STR
  show #debug  ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure

!*************************************************************************************
begin-procedure Ask-Input
input $Ctl_PayEntity 'Pay Entity'     type=char
input $Ctl_Curr_Pay_End_Dt  'Current Pay End Date'  type = date
input $language_cd 'Language'   type=char      maxlen=3
uppercase $Ctl_PayEntity
if $Ctl_PayEntity <> ''
    let $crit.company = ' AND PBD.PAY_ENTITY = ' || '''' || $Ctl_PayEntity || ''''
    DISPLAY 'GPDEAL09.SQR : COMPANY CRITERIA = ' NOLINE
    DISPLAY $crit.company
end-if

end-procedure

!************************************************************************************
begin-procedure Get-Values
let $language_cd = $PRCS_LANGUAGE_CD
let $Ctl_Print                = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_REPORTNAME,' ')
end-procedure

!************************************************************************************
begin-procedure Report-Translation
  do Get_Field_Information ('GPDEAL09', 'TITLE_STR',                 $TITLE_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'REPORT_ID_STR',         $REPORT_ID_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'PAGE_NO_STR',             $PAGE_NO_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'RUN_DATE_STR',           $RUN_DATE_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'RUN_TIME_STR',           $RUN_TIME_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'ASOFDATE_STR',           $ASOFDATE_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'EMPLID_STR',               $EMPLID_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'NAME_STR',                   $NAME_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'MONTH_STR',                 $MONTH_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'AMOUNT_STR',               $AMOUNT_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'SUM_TOTAL_STR',         $SUM_TOTAL_STR,#CW)
  do Get_Field_Information ('GPDEAL09', 'PAGE_TOTAL_STR',       $PAGE_TOTAL_STR,#CW)
  do Get_Field_Information ('GPDEGLOB', 'PRINTCLASS',              $PRINTCLASS, #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',             $AMOUNT_SPEC,#CW)
end-procedure

!************************************************************************************
begin-procedure Get-Pin-Nr
begin-select
BL1.PIN_NUM
  let  #Accum_NR = &BL1.PIN_NUM
from PS_GPDE_BL_PRINT BL1
where
BL1.GPDE_RC_REPORTNAME = $Ctl_Print and
BL1.GPDE_BL_PR_FIX_VAL = 'Y'
end-select
end-procedure
!****************************************************************************************
begin-procedure Get_Type_Options

let $Name_Type       = ''
let $Addr_Type       = ''
let $Phone_Type      = ''
let $Email_Type      = ''
let $BirthName_Type  = ''

begin-select distinct
INST.NAME_TYPE
INST.ADDRESS_TYPE
INST.PHONE_TYPE
INST.E_ADDR_TYPE
INST.GPDE_BIRTH_NM_TYPE

   let $Name_Type      = &INST.NAME_TYPE
   let $Addr_Type      = &INST.ADDRESS_TYPE
   let $Phone_Type     = &INST.PHONE_TYPE
   let $Email_Type     = &INST.E_ADDR_TYPE
   let $BirthName_Type = &INST.GPDE_BIRTH_NM_TYPE

from PS_GPDE_AL_INSTALL INST
end-select
end-procedure
!**********************************************************************************************
begin-procedure Process-Main
 do Get_Type_Options
 do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt1,{DEFDATE},'','')
 do format-datetime($Ctl_Curr_Pay_End_Dt,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
 let $Sticht = '2002'  || '01' ||  '01'
 do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
 do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

 if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
    let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
    let $ToCurrency = 'EUR'
 let $Eur = ' EUR '
 else
    let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
  let $ToCurrency = 'DEM'
 let $Eur = ' DM '
 end-if

let #Date_Type= {DateType}

begin-sql
delete from PS_GPDE_RP_AL07_1
end-sql

do Get-Pin-Nr

begin-select DISTINCT
PBD.EMPLID
   let $Empl_ID1 = &PBD.EMPLID
   do Find_Cal_Run_IDs

from PS_GP_RSLT_ACUM PBD
where
PBD.PIN_NUM = #Accum_NR
end-select
do Find_Amount
end-procedure

!************************************************************************************
begin-procedure Find_Cal_Run_IDs
let $Ctl_Curr_Crit = ''
if $Ctl_Curr_Pay_End_Dt <>''
   let $Ctl_Curr_Crit=' and RP0001.GPDE_AL_CPAY_ENDDT <= ''' ||
       $Ctl_Curr_Pay_End_Dt || ''' '
else
   goto Ende
end-if
let #Counter=0
let #merke1=0
let #i1=1
let #Sequence1 = 0
let #Sequence2 = 1
begin-select distinct
RP0001.CAL_RUN_ID
   let $Calend_Run_ID = &RP0001.CAL_RUN_ID
   do Insert_Calendar
from PS_GPDE_RP_0001 RP0001
where

RP0001.EMPLID = $Empl_ID1 and
RP0001.PAY_ENTITY=$Ctl_PayEntity
[$Ctl_Curr_Crit]
AND RP0001.GPDE_AL_CPAY_ENDDT = (select max(RP0002.GPDE_AL_CPAY_ENDDT)
    from PS_GPDE_RP_0001 RP0002 where
         RP0002.EMPLID = RP0001.EMPLID and
         RP0002.GPDE_AL_CPAY_ENDDT <= $Ctl_Curr_Pay_End_Dt)
AND (RP0001.PRD_END_DT = (select max(RP00021.PRD_END_DT) from
    PS_GPDE_RP_0001 RP00021 where RP00021.EMPLID = RP0001.EMPLID
    and RP00021.GPDE_AL_CPAY_ENDDT = RP0001.GPDE_AL_CPAY_ENDDT))
end-select
Ende:
end-procedure

!************************************************************************************
begin-procedure Insert_Calendar
let #Merke_Cal_ID=0
begin-select
AL07A.CAL_RUN_ID
  let #Merke_Cal_ID = 1
from PS_GPDE_RP_AL07_1 AL07A
where AL07A.CAL_RUN_ID = $Calend_Run_ID
end-select

if #Merke_Cal_ID = 0

 let #Sequence1 = #Sequence1 + 1
 let #Sequence2 = #Sequence2 + 1
begin-sql
insert into PS_GPDE_RP_AL07_1 (GPDE_AC_PNR,GPDE_AC_SEQ,CAL_RUN_ID,GPDE_AC_SIG)
values (#Sequence1,#Sequence2,$Calend_Run_ID,0)
end-sql

end-if
end-procedure

!************************************************************************************
begin-procedure Find_Amount
let #LineCount = 0
let #Page_Total = 0
let #Summme_Total = 0

begin-select distinct
PBD1.EMPLID
PBD1.CALC_RSLT_VAL
PDN.NAME
PBD1.SLICE_END_DT
PBD1.CAL_RUN_ID
RP0003.CURRENCY_CD
RP0003.CUR_RT_TYPE
RP0003.GPDE_ASOF_DT_EX_RT
RP0003.PRD_END_DT

 let $Calend_Run_ID3 = &PBD1.CAL_RUN_ID
    let $Empl_ID2      = &PBD1.EMPLID
    let $Emlp_Name    = &PDN.NAME
    let $Mnth         = &PBD1.SLICE_END_DT
    let #Total_Amount = &PBD1.CALC_RSLT_VAL
 let $Current_Curr    = &RP0003.CURRENCY_CD
    let $Current_RT_Type     = &RP0003.CUR_RT_TYPE
    let $Current_DT_EX_RT   = &RP0003.GPDE_ASOF_DT_EX_RT
 let $PrdEndDT            = &RP0003.PRD_END_DT

   if rtrim($Current_RT_Type, ' ') = ''
      let $Current_RT_Type = $BaseRtType
   end-if

    if rtrim($Current_DT_EX_RT, ' ') = ''
      let $Current_DT_EX_RT = $PrdEndDT
    end-if

    if $Current_Curr <> $ToCurrency
       do ConvertCurrency(#Total_Amount,$Current_Curr,$ToCurrency,$Current_RT_Type,
                       $Current_DT_EX_RT,#Amount,'F')
    else
       let #Amount         = #Total_Amount
    end-if

   let #Summme_Total = #Summme_Total + #Amount
   let #Page_Total = #Page_Total + #Amount
   do Print_Data
from PS_GP_RSLT_ACUM PBD1,PS_NAMES PDN,
     PS_GPDE_RP_0001 RP0003
where
PBD1.EMPLID = PDN.EMPLID and
PBD1.EMPLID = RP0003.EMPLID and
PBD1.PIN_NUM = #Accum_NR  and
RP0003.PAY_ENTITY=$Ctl_PayEntity and
PBD1.CAL_RUN_ID = RP0003.CAL_RUN_ID and
PBD1.EMPL_RCD = RP0003.EMPL_RCD and
PBD1.GP_PAYGROUP = RP0003.GP_PAYGROUP and
PBD1.CAL_ID = RP0003.CAL_ID and
PBD1.RSLT_SEG_NUM = RP0003.RSLT_SEG_NUM and
PBD1.CAL_RUN_ID in (select AL07C.CAL_RUN_ID from PS_GPDE_RP_AL07_1 AL07C) and
PBD1.CALC_RSLT_VAL < 0 and
PBD1.SLICE_END_DT = (select max(b.SLICE_END_DT) from PS_GP_RSLT_ACUM b
    where (b.EMPLID= PBD1.EMPLID) AND
          (b.PIN_NUM  = #Accum_NR)
      AND (b.CAL_RUN_ID in (select c.CAL_RUN_ID FROM PS_GPDE_RP_AL07_1 c))) and
PDN.NAME_TYPE = $Name_Type and
PDN.EFFDT =(select max(PDN1.EFFDT) from PS_NAMES PDN1 where
                     PDN1.EMPLID = PDN.EMPLID and
                     PDN1.NAME_TYPE=PDN.NAME_TYPE and
                     PDN1.EFFDT <= PBD1.SLICE_END_DT)

order by PDN.NAME
end-select

IF #LineCount < 56
    do page_totals
END-IF
end-procedure

!************************************************************************************
begin-procedure Print_Data
         DO Format-Number(#Amount,$Amount,'999,999,999.00')
         print $Empl_ID2     (+1,{col1})
         print $Emlp_Name   (,{col2})

   do ConvertToComponents($Mnth,$yy1,$mm1,$dd1)
      evaluate #Date_Type
     when = 2
          let $Mnth1 = $yy1 || '{PTDateDelim}' || $mm1
             break
      when-other
             let $Mnth1 = $mm1 || '{PTDateDelim}' || $yy1
             break
         end-evaluate

         print $Mnth1        (,{col3})

         print $Amount      (,{col4})
     let #LineCount = #LineCount + 1
end-procedure

!************************************************************************************
begin-heading 15
do Get-PayEntity-Address
uppercase $ReportTitle
#include 'stdhdgtr.sqc'
print $PyentDescr           (,{col1})
print $PyentAddr         (+1, {col1})
print $ASOFDATE_STR  (,#RptCol)
print ' ' ()
do Format-DateTime($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt1, {DEFDATE}, '', '')
print $Ctl_Curr_Pay_End_Dt1  (,)
let $ZipCity = $PyentZip || ' ' || $PyentCity
print $ZipCity       (+1, {col1})
print $PRINTCLASS    (,#RptCol)
print ' ' ()
print $Ctl_Print ()
print $AMOUNT_SPEC1     (0,1)  center
print '_' (+2,1,128) fill
print $EMPLID_STR       (+1,{col1})
print $NAME_STR         (,{col2})
print $MONTH_STR        (,{col3})
print $AMOUNT_STR       (,{col5})
print '_' (+1,1,128) fill
end-heading

!************************************************************************************
begin-footing 5
DO Format-Number(#Page_Total,$Page_Total,'999,999,999.00')
DO Format-Number(#Summme_Total,$Summme_Total,'999,999,999.00')
if #LineCount >= 56
 do  page_totals
 print '_' (+1,{col3},50) fill
 print $PAGE_TOTAL_STR (+1,{col3})
 print $Page_Total  (,{col4})
 print $SUM_TOTAL_STR (+2,{col3})
 print $Summme_Total (,{col4})
end-if
let #LineCount = 0
let #Page_Total = 0
end-footing

!************************************************************************************
begin-procedure page_totals
 DO Format-Number(#Page_Total,$Page_Total,'999,999,999.00')
 DO Format-Number(#Summme_Total,$Summme_Total,'999,999,999.00')
 print '_' (+1,{col3},50) fill
 print $PAGE_TOTAL_STR (+1,{col3})
 print $Page_Total  (,{col4})
 print $SUM_TOTAL_STR (+2,{col3})
 print $Summme_Total (,{col4})
end-procedure

!************************************************************************************
#include 'gpdeut06.sqc' !get run control parameter values
#include 'gpdeut04.sqc'
#include 'number.sqc'   ! routines for formatting numbers.
#include 'datetime.sqc' ! routines for formatting dates and times.
#include 'stdapi.sqc'   ! routines for process scheduler manipulation.
#include 'sqrtrans.sqc' ! routines for language translation.
#include 'readxlat.sqc' ! routines for xlat translation.
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'validdt.sqc'   !validate date routine
#include 'datemath.sqc'  !function for date-calculation

