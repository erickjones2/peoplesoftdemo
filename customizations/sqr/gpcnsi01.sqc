!***********************************************************************
! GPCNSI01.SQC     GLOBAL PAYROLL CHINA PHF/SI MONTHLY REPORT          *
!                                                                      *
! Description:                                                         *
!                This program will print the Monthly Contribution      *
! Report for Public Housing Fund and Social Insurance (PHF/SI), and    *
! also generate the csv files for the same                             *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:37:35                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************



#DEFINE Col1   1
#DEFINE Col33  33
#DEFINE Col45  45
#DEFINE Col72  72
#DEFINE Col70  70
#DEFINE Col80  80
#DEFINE Col86  86
#DEFINE Col97 97
#DEFINE Col98  98
#DEFINE Col99  99
#DEFINE Col110 110
#DEFINE Col115 115
#DEFINE Col126 126
#DEFINE Col145 145
#DEFINE Col146 146
#DEFINE Col142 142
#DEFINE Col154 154
#DEFINE Col167 167
#DEFINE Col31  31
#DEFINE Col32  32
#DEFINE Col44  44
#DEFINE Col66  66
#define Col67  67
#DEFINE Col79  79
#DEFINE Col83  83
#DEFINE Col96  96
#DEFINE Col108 108
#DEFINE Col112 112
#DEFINE Col125 125
#DEFINE Col140 140
#DEFINE Col152 152
#DEFINE Col164 164



!**************************************************************************
!
! Procedure: Init-Report-SI01
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report-SI01
    if $RCTL_Pay_Entity <> ''
        let $Where_cond = ' AND   PYE.PAY_ENTITY = ' || '''' || $RCTL_Pay_Entity || ''''
    end-if
    if $RCTL_Contrib_Type <> ''
        let $Where_cond = $Where_cond || ' AND   SIV.GPCN_CONTRIB_TYPE = ' || '''' || $RCTL_Contrib_Type || ''''
    end-if
    Let $Report_ID = 'GPCNSI01'
    do Process-Main-SI01
end-procedure

!**************************************************************************
!
! Procedure: Populate-Strings-Lable
!
! Description: Initialise lable strings variables from PS_STRINGS_TBL.
!
!**************************************************************************
Begin-procedure Populate-Strings-Lable
    Let $LanguageStringsFound = 'N'
    do Get-Language-Codes
    do Init_Report_Translation ('GPCNSI01', $curr_language_cd)
    do Append_Report_Translation ('GPCNSI01')
    do Get_Field_Information ('GPCNSI01', 'AVG_PREV_SAL'      , $Avg_Prev_Sal_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ADJ_EE'       , $Cont_Adj_Ee_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ADJ_ER'       , $Cont_Adj_Er_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ADJ_L1'       , $Cont_Adj_L1_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ADJ_L2'       , $Cont_Adj_L2_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ADJ_TOT'      , $Cont_Adj_Tot_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_AMT'          , $Cont_Amt_Lbl          , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_AMT_EE'       , $Cont_Amt_Ee_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_AMT_ER'       , $Cont_Amt_Er_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_BASE'         , $Cont_Base_Lbl         , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_BASE_EE'      , $Cont_Base_Ee_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_BASE_ER'      , $Cont_Base_Er_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_EE_AMT'       , $Cont_Ee_Amt_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_EE_PART'      , $Cont_Ee_Part_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ER_AMT'       , $Cont_Er_Amt_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_ER_PART'      , $Cont_Er_Part_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_PCT_EE'       , $Cont_Pct_Ee_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_PCT_ER'       , $Cont_Pct_Er_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_PERCENTAGE'   , $Cont_Percentage_Lbl   , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_PERIOD'       , $Cont_Period_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_PERIOD_YR'    , $Cont_Period_Yr_Lbl    , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_TOT'          , $Cont_Tot_Lbl          , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_TOTAL'        , $Cont_Total_Lbl        , #DW)
    do Get_Field_Information ('GPCNSI01', 'CONT_TYPE_LBL'     , $Cont_Type_Lbl         , #DW)
    do Get_Field_Information ('GPCNSI01', 'CURRENCY'          , $Currency_Lbl          , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_CHANGE_CAT'     , $Ee_Change_Cat_Lbl     , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_CHANGE_REASON'  , $Ee_Change_Reason_Lbl  , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_CHANGE_RSN_HD'  , $Ee_Change_Rsn_Hd_Lbl  , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_CONT_ID'        , $Ee_Cont_Id_Lbl        , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_CONT_ID_SRT'    , $Ee_Cont_Id_Srt_Lbl    , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_DOB'            , $Ee_Dob_Lbl            , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_EMPL_CAT'       , $Ee_Empl_Cat_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_GENDER'         , $Ee_Gender_Lbl         , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_HUKOU'          , $Ee_Hukou_Lbl          , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_JOB_CAT'        , $Ee_Job_Cat_Lbl        , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_NAME_LBL'       , $Ee_Name_Lbl           , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_NID_NO'         , $Ee_Nid_No_Lbl         , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_RACE'           , $Ee_Race_Lbl           , #DW)
    do Get_Field_Information ('GPCNSI01', 'EE_WORK_START_DT'  , $Ee_Work_Start_Dt_Lbl  , #DW)
    do Get_Field_Information ('GPCNSI01', 'EMPLID'            , $Emplid_Lbl            , #DW)
    do Get_Field_Information ('GPCNSI01', 'ER_NAME_LBL'       , $Er_Name_Lbl           , #DW)
    do Get_Field_Information ('GPCNSI01', 'MONTHLY_BASE_SAL'  , $Monthly_Base_Lbl      , #DW)
    do Get_Field_Information ('GPCNSI01', 'ORG_CAT_LBL'       , $Org_Cat_Lbl           , #DW)
    do Get_Field_Information ('GPCNSI01', 'ORG_CODE_LBL'      , $Org_Code_Lbl          , #DW)
    do Get_Field_Information ('GPCNSI01', 'ORG_REG_ID'        , $Org_Reg_Id_Lbl        , #DW)
    do Get_Field_Information ('GPCNSI01', 'REMARK'            , $Remark_Lbl            , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOTAL_EMPL'        , $Total_Empl_Lbl        , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOT_EE_CONT'       , $Tot_Ee_Cont_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOT_ER_CONT'       , $Tot_Er_Cont_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOT_FILING_DT'     , $Tot_Filing_Dt_Lbl     , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOT_NEW_CNT'       , $Tot_New_Cnt_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'TOT_TER_CNT'       , $Tot_Ter_Cnt_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'WARNING_MSG'       , $WARNING_MSG_Lbl       , #DW)
    do Get_Field_Information ('GPCNSI01', 'PAGE_NO'           , $PAGE_NO_Lbl           , #DW)
End-Procedure
!
!**************************************************************************
!
! Procedure: Define-Values
!
! Description: Define general Variables.
!
!**************************************************************************
begin-procedure Define-Values
    Let #FileCount = 1
end-procedure

!**************************************************************************
!
! Procedure: New_Report
!
! Description: Create new-report / output files for each contribution type.
!
!**************************************************************************

begin-procedure New_Report
    DO Get_Outdest
    Let $prcs_inst = edit(#prcs_process_instance,'9999999')
    Let $prcs_inst = RTRIM(LTRIM($prcs_inst,' '), ' ')
    LET $FileName = $Report_ID || '_' || $prcs_inst || '_'
    Let $FileCount = edit(#FileCount,'99')
    Let $FileCount = RTRIM(LTRIM($FileCount,' '), ' ')
    Let $FileName =  $FileName || $FileCount || $Extension
    LET $FileName = $Output_Dir || $FileName
#ifdef debug
    show '$FileName : ' $FileName
#end-if
    new-report $FileName
    Let #FileCount = #FileCount + 1
end-procedure !New_Report


!**************************************************************************
!
! Procedure: Get-Output-Directory
!
! Description: Create the complete path for output files.
!
!**************************************************************************
begin-procedure Get-Output-Directory($Sqr_Name,:$Output_Directory,:$prcs_no)
#ifdef debug
    Show  '-> Get-Output-Directory   ' #prcs_process_instance  ' , ' $_sqr-report
#end-if

    let $prcs_no = to_char(#_prcs_process_instance)
    let $prcs_no = rtrim($prcs_no,' ')
    let $outputdir = $_sqr-report

    do OutputDirectory_WithoutPS($outputdir,$Output_Directory)

Begin-Select
RQ.RUNLOCATION
OD.PRCSOUTPUTDIR
OD.OUTDEST
RQ.OUTDESTFORMAT
RQ.OUTDESTTYPE

    let $OUTDESTFORMAT = rtrim(&RQ.OUTDESTFORMAT,' ')
    let $RUNLOCATION   = rtrim(&RQ.RUNLOCATION,' ')
    let $PRCSOUTPUTDIR = rtrim(&OD.PRCSOUTPUTDIR,' ')
    let $OUTDEST       = rtrim(&OD.OUTDEST,' ')
    let $OUTDESTTYPE   = rtrim(&RQ.OUTDESTTYPE,' ')

#ifdef debug
    show '$OUTDESTFORMAT ' $OUTDESTFORMAT
    show '$RUNLOCATION   ' $RUNLOCATION
    show '$PRCSOUTPUTDIR ' $PRCSOUTPUTDIR
    show '$OUTDEST       ' $OUTDEST
    show '$OUTDESTTYPE   ' $OUTDESTTYPE
#end-if


    !---------------------------------------
    !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

    if  $RUNLOCATION = '2'           ! Client(1)/Server(2)/Both(0)
        if $OUTDESTTYPE = '2'        ! File(2)

            do OutputDirectory_WithPS($OUTDEST,$Output_Directory)

        else  !To get output on Web

            find  '/'  in  $PRCSOUTPUTDIR  0  #unix_delimit
            find  '\'  in  $PRCSOUTPUTDIR  0  #win_delimit

            if #unix_delimit <> -1
                let $delimiter = '/'
            end-if

            if #win_delimit  <> -1
                let $delimiter = '\'
            end-if

            #debug show '$delimiter ' $delimiter

            let $Output_Directory = $PRCSOUTPUTDIR  || $delimiter

            #debug show ' $Output_Directory Of Web' $Output_Directory

        end-if

    else  ! To Run on the Client

        do OutputDirectory_WithPS($OUTDEST,$Output_Directory)

    end-if

FROM PSPRCSPARMS OD , PSPRCSRQST  RQ
WHERE OD.PRCSINSTANCE  = RQ.PRCSINSTANCE
AND   OD.PRCSINSTANCE  = #_prcs_process_instance
End-Select

    evaluate $OUTDESTFORMAT
        when = '0'    !Any
            let $FileExtension = '.lis'
            break
        when = '1'    !None
            let $FileExtension = '.lis'
            break
        when = '2'    !Acrobat
            let $FileExtension = '.pdf'
            break
        when = '3'    !Comma Delimited
            let $FileExtension = '.csv'
            break
        when = '4'    !HP Format lis
            let $FileExtension = '.lis'
            break
        when = '5'    !HTML Documents
            let $FileExtension = '.htm'
            break
        when = '6'    !Line Printer format
            let $FileExtension = '.lis'
            break
        when = '7'    !Lotus 1-2-3 Files
            let $FileExtension = '.wks'
            break
        when = '8'    !Microsoft Excel
            let $FileExtension = '.xls'
            break
        when = '9'    !Microsoft Word
            let $FileExtension = '.doc'
            break
        when = '10'   !Postscript
            let $FileExtension = '.lis'
            break
        when = '11'   !Crystal Reports
            let $FileExtension = '.rpt'
            break
        when = '12'   !Rich Text File
            let $FileExtension = '.rtf'
            break
        when = '13'   !Sqr Portable Format
            let $FileExtension = '.spf'
            break
        when = '14'    !Text Files
            let $FileExtension = '.txt'
            break
        when = '15'    !Other
            let $FileExtension = '.lis'
            break
        when = '16'    !Default
            let $FileExtension = '.lis'
            break
        when = '17'    !XML Format
            let $FileExtension = '.xml'
            break
        when = '18'    !Data Mover Data File
            let $FileExtension = '.dat'
            break
        when-other     !None
            let $FileExtension = '.pdf'
            break
    end-evaluate

    let $prcs_no     =  $FileExtension

#ifdef debug
    Show  '<- Get-Output-Directory   '  $Output_Directory ' , ' $prcs_no
#end-if
end-Procedure

!**************************************************************************
!
! Procedure: OutputDirectory_WithoutPS
!
! Description: Create the complete path for output files even if threre is
!              no process instance.
!
!**************************************************************************
Begin-Procedure OutputDirectory_WithoutPS($outputdir,:$Output_Directory)
#ifdef debug
    show 'OutputDirectory_WithoutPS -> '
    show '$outputdir ' $outputdir
#end-if

!--------------------------------------- To check if Unix or NT and select delimiter

    find  '/'  in  $outputdir  0  #unix_delimit
    find  '\'  in  $outputdir  0  #win_delimit


    if #unix_delimit <> -1
        let $delimiter = '/'
    end-if

    if #win_delimit  <> -1
        let $delimiter = '\'
    end-if

#ifdef debug
    show '$delimiter ' $delimiter
#end-if

    !---------------------------------------
    !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

    find  '.'  in  $outputdir  0  #File_check

    if #File_check <> -1   !If Filename exists

        let #acc = 1
        while instr($outputdir,$delimiter,#acc ) <> 0
            let #acc = instr($outputdir,$delimiter,#acc ) + 1
#ifdef debug
            show 'Command line ' #acc
#end-if
        end-while
        let $Output_Directory = substr($outputdir, 1, #acc - 1)
#ifdef debug
        Show ' $Output_Directory FNE ' $Output_Directory
#end-if

    else  ! Only directory exist

        let $Delimiter_check = substr($outputdir,length($outputdir),1)

        if  $Delimiter_check = $delimiter
            let $Output_Directory = $outputdir
#ifdef debug
            Show ' $Output_Directory DE ' $Output_Directory
#end-if
        else
            let $Output_Directory = rtrim($outputdir,' ') || $delimiter
#ifdef debug
            Show ' $Output_Directory DNE ' $Output_Directory
#end-if
        end-if

    end-if

#ifdef debug
    show ' Without Process Scheduler $Output_Directory ' $Output_Directory
    show 'OutputDirectory_WithoutPS ends '
#end-if
End-Procedure

!**************************************************************************
!
! Procedure: OutputDirectory_WithPS
!
! Description: Create the complete path for output files.
!
!**************************************************************************
Begin-Procedure OutputDirectory_WithPS($OUTDEST,:$Output_Directory)
#ifdef debug
    show 'OutputDirectory_WithPS -> '
    show '$OUTDEST ' $OUTDEST
#end-if

    !--------------------------------------- To check if Unix or NT and select delimiter

    find  '/'  in  $OUTDEST  0  #unix_delimit
    find  '\'  in  $OUTDEST  0  #win_delimit

    if #unix_delimit <> -1
        let $delimiter = '/'
    end-if

    if #win_delimit  <> -1
        let $delimiter = '\'
    end-if

#ifdef debug
    show '$delimiter ' $delimiter
#end-if

    !---------------------------------------
    !To check if only (directory specified) or (directory and delimiter specified) or (directory and filename specified)

    find  '.'  in  $OUTDEST  0  #File_check

    if #File_check <> -1   !If Filename exists

        let #acc = 1
        while instr($OUTDEST,$delimiter,#acc ) <> 0
            let #acc = instr($OUTDEST,$delimiter,#acc ) + 1
#ifdef debug
            show 'PSE' #acc
#end-if
        end-while
        let $Output_Directory = substr($OUTDEST, 1, #acc - 1)
#ifdef debug
            show ' $Output_Directory FNE ' $Output_Directory
#end-if

    else  ! Only directory exist

        let $Delimiter_check = substr($OUTDEST,length($OUTDEST),1)

        if  $Delimiter_check = $delimiter
            let $Output_Directory = $OUTDEST
#ifdef debug
            Show ' $Output_Directory DE ' $Output_Directory
#end-if
        else
            let $Output_Directory = rtrim($OUTDEST,' ') || $delimiter
#ifdef debug
            Show ' $Output_Directory DNE ' $Output_Directory
#end-if
        end-if

    end-if

#ifdef debug
    show ' With Process Scheduler $Output_Directory ' $Output_Directory
    show 'OutputDirectory_WithPS ends '
#end-if

End-Procedure  OutputDirectory_WithPS

!**************************************************************************
!
! Procedure: Get_Outdest
!
! Description: Create the complete path for output files.
!
!**************************************************************************
begin-procedure Get_Outdest
    let $_sqr-report = $Report_ID
    let #_prcs_process_instance = #prcs_process_instance

    do Get-Output-Directory   ( $_sqr-report, $Output_Dir, $Extension)

#ifdef debug
    show '$_sqr-report : ' $_sqr-report
    show '$Output_Dir  : ' $Output_Dir
    show '$prcs_no_tmp : ' $prcs_no_tmp
#end-if

end-procedure

!**************************************************************************
!
! Procedure: Get-Registration
!
! Description: Will return the Employer PHF/SI registration number.
!
!**************************************************************************
begin-procedure Get-Registration ($Contrib_Area, $Pay_Ent, $Contrib_Type, $End_Date, :$Registration_num)
#ifdef debug
        show 'Inside procedure Get-Registration'
#end-if
begin-SELECT
RG.GPCN_REG_NO

    let $Registration_num  = rtrim(ltrim(&RG.GPCN_REG_NO, ' '), ' ')

FROM PS_GPCN_PHFSI_REG RG
WHERE RG.GPCN_CONTRIB_AREA   = $Contrib_Area
AND RG.PAY_ENTITY            = $Pay_Ent
AND RG.GPCN_CONTRIB_TYPE     = $Contrib_Type
AND RG.EFFDT                 = (SELECT MAX(RG1.EFFDT)
                               FROM PS_GPCN_PHFSI_REG RG1
                               WHERE RG1.GPCN_CONTRIB_AREA = RG.GPCN_CONTRIB_AREA
                               AND   RG1.PAY_ENTITY = RG.PAY_ENTITY
                               AND   RG1.GPCN_CONTRIB_TYPE = RG.GPCN_CONTRIB_TYPE
                               AND   RG1.EFFDT <= $End_Date )
end-SELECT
end-procedure

!**************************************************************************
!
! Procedure: Process-Main-SI01
!
! Description: Main program or Main selection criteria for printing the report.
!
!**************************************************************************
begin-procedure Process-Main-SI01
    Let #Total_Empl    = 0
    Let #Total_Cont_EE = 0.00
    Let #Total_Cont_ER = 0.00
    let $First_EE = 'Y'

#ifdef debugy
    show 'Inside procedure Process-Main'
    show '&RC.GPCN_MONTHCD      : ' $RCTL_Month_Code
    show '&RC.GPCN_YEARCD       : ' $RCTL_Year_Code
    show '&RC.GPCN_CONTRIB_AREA : ' $RCTL_Contrib_Area
    show '&RC.GPCN_CONTRIB_TYPE : ' $RCTL_Contrib_Type
    show '&RC.PAY_ENTITY        : ' $RCTL_Pay_entity
    show '$Where_cond : ' $Where_cond
#end-if


begin-SELECT DISTINCT
SIV.GPCN_CONTRIB_TYPE   (,) on-break print=never level=1 before=New_Report
DTL.DESCR
PYE.PAY_ENTITY
PYE.DESCR
PYD.CURRENCY_CD

        let $Pay_Ent          = rtrim(ltrim(&PYE.PAY_ENTITY , ' '), ' ')
        let $Cont_Type        = rtrim(ltrim(&SIV.GPCN_CONTRIB_TYPE, ' '), ' ')
        let $Cont_Type_Descr_ENG  = rtrim(ltrim(&DTL.DESCR , ' '), ' ')

        If $curr_language_cd <> 'ENG'
           do Get-Trans-ContType
           do Get-Trans-PayEntity

           If rtrim(ltrim($Pay_Ent_Descr , ' '), ' ') = ''
              let $Pay_Ent_Descr    = rtrim(ltrim(&PYE.DESCR      , ' '), ' ')
           End-if

           If rtrim(ltrim($Cont_Type_Descr , ' '), ' ') = ''
              let $Cont_Type_Descr  = rtrim(ltrim(&DTL.DESCR, ' '), ' ')
           End-if
        Else
           let $Pay_Ent_Descr    = rtrim(ltrim(&PYE.DESCR , ' '), ' ')
           let $Cont_Type_Descr  = rtrim(ltrim(&DTL.DESCR , ' '), ' ')
        End-if

        let $Registration_num = ''

        do Get-Registration($RCTL_Contrib_Area, $Pay_Ent, $Cont_Type, $RCTL_End_Date, $Registration_num)

#ifdef debug
        show '$GP_Paygroup    : ' $GP_Paygroup
        show '$Pay_Ent        : ' $Pay_Ent
        show '$Pay_Ent_Descr  : ' $Pay_Ent_Descr
        show '$Cont_Type      : ' $Cont_Type
#end-if

        do Print_Heading-SI01

        Let #Total_Empl    = 0
        Let #Total_Cont_EE = 0.00
        Let #Total_Cont_ER = 0.00

        do Process-Payee-SI01

        do Print_Footer-SI01


        NEW-PAGE

FROM PS_GPCN_PHFSI_RPTG SIV
  , PS_GP_PYENT PYE
  , PS_GP_PYENT_DTL PYD
  , PS_GP_PYGRP PYG
  , PS_GPCN_CONT_TYPE DTL
WHERE SIV.GPCN_MONTHCD      = $RCTL_Month_Code
AND   SIV.GPCN_YEARCD       = $RCTL_Year_Code
AND   SIV.GPCN_CONTRIB_AREA = $RCTL_Contrib_Area
AND   PYG.GP_PAYGROUP       = SIV.GP_PAYGROUP
AND   PYG.PAY_ENTITY        = PYE.PAY_ENTITY
AND   PYD.PAY_ENTITY        = PYE.PAY_ENTITY
AND   PYD.EFFDT             = (SELECT MAX(EFFDT)
                             FROM PS_GP_PYENT_DTL PD1
                             WHERE PD1.PAY_ENTITY = PYD.PAY_ENTITY
                             AND PD1.EFFDT <= $RCTL_End_Date)
AND   DTL.GPCN_CONTRIB_TYPE   = SIV.GPCN_CONTRIB_TYPE
[$Where_cond]
end-SELECT

    if #Total_Empl = 0
        show $WARNING_MSG_Lbl
    end-if
end-procedure

!**************************************************************************
!
! Procedure: Process-Payee-SI01
!
! Description: Process/select the payee based on the selected contribution
!              type and contribution area.
!
!**************************************************************************
begin-procedure Process-Payee-SI01

    let $First_EE = 'Y'
#ifdef debug
    show '$Order_by_cl : ' $Order_by_cl
#end-if

begin-SELECT on-error=SQL-Error
SI.EMPLID
PERS.NAME
PERS.NAME_AC
SI.GPCN_ACOUNT_NUM
SI.GP_PAYGROUP
SUM(SI.GPCN_CONT_BASE_ER)  &SI.GPCN_CONT_BASE_ER             !Employer Contribution Base
SUM(SI.GPCN_CONT_PCT_ER)   &SI.GPCN_CONT_PCT_ER              !Employer Contribution Percentage
SUM(SI.GPCN_CONT_BASE_EE)  &SI.GPCN_CONT_BASE_EE             !Employee Contribution Base
SUM(SI.GPCN_CONT_PCT_EE)   &SI.GPCN_CONT_PCT_EE              !Employee Contribution Percentage
SUM(SI.GPCN_CONT_AMT_EE)   &SI.GPCN_CONT_AMT_EE              !Employee Contribution Amount
SUM(SI.GPCN_CONT_AMT_ER)   &SI.GPCN_CONT_AMT_ER              !Employer Contribution Amount
SUM(SI.GPCN_CONT_TOT_AMT)  &SI.GPCN_CONT_TOT_AMT             !Total Contribution from Employer and Employee
SUM(SI.GPCN_CONT_ADJ_EE)   &SI.GPCN_CONT_ADJ_EE              !Contribution Adjustment from previous periods - EE Part
SUM(SI.GPCN_CONT_ADJ_ER)   &SI.GPCN_CONT_ADJ_ER              !Contribution Adjustment from previous periods - ER Part

    Let $Emplid         = rtrim(ltrim(&SI.EMPLID   , ' '), ' ')
    Let $EmployeeName   = rtrim(ltrim(&PERS.NAME   , ' '), ' ')
    Let $EmployeeACName = rtrim(ltrim(&PERS.NAME_AC, ' '), ' ')
    Let $Empl_Acct_id   = rtrim(ltrim(&SI.GPCN_ACOUNT_NUM, ' '), ' ')
    let $GP_Paygroup    = rtrim(ltrim(&SI.GP_PAYGROUP, ' '), ' ')


#ifdef debug
    show '$Emplid           : ' $Emplid
    show '$EmployeeName     : ' $EmployeeName
    show '$EmployeeACName   : ' $EmployeeACName
#endif

    Let #Cont_Base_Er   = &SI.GPCN_CONT_BASE_ER          !Employer Contribution Base
    Let #Cont_Pct_Er    = &SI.GPCN_CONT_PCT_ER           !Employer Contribution Percentage
    Let #Cont_Base_Ee   = &SI.GPCN_CONT_BASE_EE          !Employee Contribution Base
    Let #Cont_Pct_Ee    = &SI.GPCN_CONT_PCT_EE           !Employee Contribution Percentage
    Let #Cont_Amt_Ee    = &SI.GPCN_CONT_AMT_EE           !Employee Contribution Amount
    Let #Cont_Amt_Er    = &SI.GPCN_CONT_AMT_ER           !Employer Contribution Amount
    Let #Cont_Tot_Amt   = #Cont_Amt_Ee + #Cont_Amt_Er    !Total Contribution from Employer and Employee
    Let #Cont_Adj_Ee    = &SI.GPCN_CONT_ADJ_EE           !Contribution Adjustment from previous periods - EE Part
    Let #Cont_Adj_Er    = &SI.GPCN_CONT_ADJ_ER           !Contribution Adjustment from previous periods - ER Part
    Let #Cont_Adj_Tot   = #Cont_Adj_Ee + #Cont_Adj_Er    !Total Contribution Adjustment

    Let #Total_Empl    = #Total_Empl + 1
    Let #Total_Cont_EE = #Total_Cont_EE + #Cont_Amt_Ee + #Cont_Adj_Ee
    Let #Total_Cont_ER = #Total_Cont_ER + #Cont_Amt_Er + #Cont_Adj_Er

    do Print_Empl_Details-SI01

FROM PS_GPCN_PHFSI_RPTG SI
  , PS_PERSON_NAME PERS
  , PS_GP_PYENT PYE1
  , PS_GP_PYGRP PYG1

WHERE SI.EMPLID            = PERS.EMPLID
AND   SI.GPCN_MONTHCD      = &RC.GPCN_MONTHCD
AND   SI.GPCN_YEARCD       = &RC.GPCN_YEARCD
AND   SI.GPCN_CONTRIB_AREA = &RC.GPCN_CONTRIB_AREA
AND   SI.GPCN_CONTRIB_TYPE = $Cont_Type
AND   SI.GP_PAYGROUP       = PYG1.GP_PAYGROUP
AND   PYE1.PAY_ENTITY      = $Pay_Ent
AND   PYG1.PAY_ENTITY      = PYE1.PAY_ENTITY
AND   NOT (SI.GPCN_CONT_AMT_EE  <= 0
           AND SI.GPCN_CONT_AMT_ER  <= 0)
GROUP BY SI.EMPLID,PERS.NAME,PERS.NAME_AC,SI.GPCN_ACOUNT_NUM, SI.GP_PAYGROUP
[$Order_by_cl]
end-SELECT
end-procedure


!**************************************************************************
!
! Procedure: Pad-String
!
! Description: Control the positioning  of the values
!
!**************************************************************************
Begin-procedure Pad-String($Label, $Value,:$ReturnVal)
    let #MaxLblLen = 17
    Let #Vallen  = length($Label)
    if #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
    else
        Let $PadVar = ''
    end-if
    Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-procedure

!**************************************************************************
!
! Procedure: Print_Empl_Details-SI01
!
! Description: Print payee details/values
!
!**************************************************************************
begin-procedure Print_Empl_Details-SI01

    let #print-line-cnt = 0
    if #current-line <= 5 or #current-line >= 62
        let #print-line-cnt = #current-line
        new-page
        graphic                                        (7, {Col31} , 3) vert-line
        graphic                                        (7, {Col44} , 3) vert-line
        graphic                                        (7, {Col66} , 3) vert-line
        graphic                                        (7, {Col79} , 3) vert-line
        graphic                                        (7, 86,  3) vert-line
        graphic                                        (7, 98  , 3) vert-line
        graphic                                        (7, 110 , 3) vert-line
        graphic                                        (7, 117  , 3) vert-line
        graphic                                        (7, 129  , 3) vert-line
        graphic                                        (7, 144  , 3) vert-line
        graphic                                        (7, 156  , 3) vert-line
        graphic                                        (7, 168  , 3) vert-line
        print $EmployeeName       (9, {Col1}) WRAP 27 2
        let $First_EE = 'N'
    else
        graphic                                        (, {Col31} , 3) vert-line
        graphic                                        (, {Col44} , 3) vert-line
        graphic                                        (, {Col66} , 3) vert-line
        graphic                                        (, {Col79} , 3) vert-line
        graphic                                        (, 86,  3) vert-line
        graphic                                        (, 98  , 3) vert-line
        graphic                                        (, 110 , 3) vert-line
        graphic                                        (, 117  , 3) vert-line
        graphic                                        (, 129  , 3) vert-line
        graphic                                        (, 144  , 3) vert-line
        graphic                                        (, 156  , 3) vert-line
        graphic                                        (, 168  , 3) vert-line
        print $EmployeeName       (+2, {Col1}) WRAP 27 2
    end-if

    IF LENGTH($EmployeeName) > 27
        print $Emplid             (-1, {Col32})
    ELSE
        print $Emplid             (  , {Col32})
    END-IF
    print $Empl_Acct_id       (  , {Col45}, 20)
    print #Cont_Base_Ee       (  , 68) edit '9999999.99'        !Employee Contribution Base
    print #Cont_Pct_Ee        (  , +1)      edit '999.99'               !Employee Contribution Percentage
    print #Cont_Amt_Ee        (  , +2)      edit '9999999.99'        !Employee Contribution Amount
    print #Cont_Base_Er       (  , +2)      edit '9999999.99'        !Employer Contribution Base
    print #Cont_Pct_Er        (  , +1)      edit '999.99'               !Employer Contribution Percentage
    print #Cont_Amt_Er        (  , +2)      edit '9999999.99'        !Employer Contribution Amount
    print #Cont_Tot_Amt       (  , +2)      edit '9999999999.99'     !Total Contribution from Employer and Employee
    print #Cont_Adj_Ee        (  , +2)      edit '9999999.99'        !Contribution Adjustment from previous periods - EE Part
    print #Cont_Adj_Er        (  , +2)      edit '9999999.99'        !Contribution Adjustment from previous periods - ER Part
    print #Cont_Adj_Tot       (  , +2)      edit '9999999.99'        !Total Contribution Adjustment

    move #LineNum to $LineNum 000000000
    move #Cont_Base_Ee to $Cont_Base_Ee  0000000.00
    move #Cont_Pct_Ee  to $Cont_Pct_Ee   000.00
    move #Cont_Amt_Ee  to $Cont_Amt_Ee   0000000.00
    move #Cont_Base_Er to $Cont_Base_Er  0000000.00
    move #Cont_Pct_Er  to $Cont_Pct_Er   000.00
    move #Cont_Amt_Er  to $Cont_Amt_Er   0000000.00
    move #Cont_Tot_Amt to $Cont_Tot_Amt  0000000.00
    move #Cont_Adj_Ee  to $Cont_Adj_Ee   0000000.00
    move #Cont_Adj_Er  to $Cont_Adj_Er   0000000.00
    move #Cont_Adj_Tot to $Cont_Adj_Tot  0000000.00

    let $Cont_Base_Ee = '="' || rtrim(ltrim($Cont_Base_Ee, ' '), ' ') || '"'
    let $Cont_Pct_Ee  = '="' || rtrim(ltrim($Cont_Pct_Ee , ' '), ' ') || '"'
    let $Cont_Amt_Ee  = '="' || rtrim(ltrim($Cont_Amt_Ee , ' '), ' ') || '"'
    let $Cont_Base_Er = '="' || rtrim(ltrim($Cont_Base_Er, ' '), ' ') || '"'
    let $Cont_Pct_Er  = '="' || rtrim(ltrim($Cont_Pct_Er , ' '), ' ') || '"'
    let $Cont_Amt_Er  = '="' || rtrim(ltrim($Cont_Amt_Er , ' '), ' ') || '"'
    let $Cont_Tot_Amt = '="' || rtrim(ltrim($Cont_Tot_Amt, ' '), ' ') || '"'
    let $Cont_Adj_Ee  = '="' || rtrim(ltrim($Cont_Adj_Ee , ' '), ' ') || '"'
    let $Cont_Adj_Er  = '="' || rtrim(ltrim($Cont_Adj_Er , ' '), ' ') || '"'
    let $Cont_Adj_Tot = '="' || rtrim(ltrim($Cont_Adj_Tot, ' '), ' ') || '"'

    let $REPORT_DATA = $EmployeeName
    let $REPORT_DATA = $REPORT_DATA || ',' || $Emplid
    let $REPORT_DATA = $REPORT_DATA || ',' || $Empl_Acct_id
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Base_Ee
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Pct_Ee
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Amt_Ee
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Base_Er
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Pct_Er
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Amt_Er
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Tot_Amt
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Adj_Ee
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Adj_Er
    let $REPORT_DATA = $REPORT_DATA || ',' || $Cont_Adj_Tot

    write 1 from $REPORT_DATA

end-procedure


!**************************************************************************
!
! Procedure: Print_Heading-SI01
!
! Description: Print header for each contribution type
!
!**************************************************************************
begin-procedure Print_Heading-SI01

    LET $PrintVal2 = &RC.GPCN_YEARCD || '/' || &RC.GPCN_MONTHCD

    LET $PrintVal4 = rtrim(ltrim(&RC.GPCN_ORG_CODE, ' '), ' ')
    If $curr_language_cd <> 'ENG'
       LET $PrintVal5 = rtrim(ltrim(&XLATLNG.XLATLONGNAME, ' '), ' ')
       If rtrim(ltrim($PrintVal5, ' '), ' ') = ''
          LET $PrintVal5 = rtrim(ltrim(&XLAT.XLATLONGNAME, ' '), ' ')
       End-if
    Else
       LET $PrintVal5 = rtrim(ltrim(&XLAT.XLATLONGNAME, ' '), ' ')
    End-if
    LET $PrintVal6 = $Registration_num
    LET $PrintVal7 = rtrim(ltrim(&PYD.CURRENCY_CD, ' '), ' ')

    print $Cont_Type_Lbl     (+2, 20) Bold
    print $Cont_Type_Descr   (  , 70)
    print $Cont_Period_Lbl   (+2, 20) Bold
    print $PrintVal2         (  , 70)
    print $Er_Name_Lbl       (+2, 20) Bold
    print $Pay_Ent_Descr     (  , 70)
    print $Org_Code_Lbl      (+2, 20) Bold
    print $PrintVal4         (  , 70)
    print $Org_Cat_Lbl       (+2, 20) Bold
    print $PrintVal5         (  , 70)
    print $Org_Reg_Id_Lbl    (+2, 20) Bold
    print $PrintVal6         (  , 70)
    print $Currency_Lbl      (+2, 20) Bold
    print $PrintVal7         (  , 70)

    LET $TXT_STR3 = RTRIM(LTRIM(&RC.GPCN_MONTHCD     , ' '), ' ')
    LET $TXT_STR4 = RTRIM(LTRIM(&RC.GPCN_YEARCD      , ' '), ' ')
    LET $TXT_STR1 = RTRIM(LTRIM(&RC.GPCN_CONTRIB_AREA, ' '), ' ')
    LET $TXT_STR2 = $Cont_Type_Descr_ENG

    MOVE $Output_Dir to $Filename
    let $Filename = $Filename || $Pay_Ent
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR1
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR2
    let $Filename = $Filename || '-'
    let $Filename = $Filename || $TXT_STR3
    let $Filename = $Filename || $TXT_STR4
    let $Filename = $Filename || '.csv{FILESUFFIX}'

#ifdef debug
    show '$Filename : ' $Filename
#end-if

    open $Filename as 1 for-writing record=9999:vary
    status = #filestat
    if #filestat <> 0
        show 'Cannot open file ' $Filename
    end-if

    let $REPORT_HDR = $Cont_Type_Descr
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal2
    let $REPORT_HDR = $REPORT_HDR || ',' || $Pay_Ent_Descr
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal4
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal5
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal6
    let $REPORT_HDR = $REPORT_HDR || ',' || $PrintVal7

    write 1 from $REPORT_HDR

    graphic                                        (17,1,179) horz-line

    graphic                                        (17, {Col31} , 8) vert-line
    graphic                                        (17, {Col44} , 8) vert-line
    graphic                                        (17, {Col66} , 8) vert-line
    graphic                                        (17, 98  , 8) vert-line
    graphic                                        (17, 129  , 8) vert-line
    graphic                                        (17, 144  , 8) vert-line
    print $Ee_Name_Lbl                             (19, {Col1}  ) BOLD
    print $Emplid_Lbl                              (19, {Col33} ) BOLD WRAP 10 4
    print $Ee_Cont_Id_Lbl                          (19, {Col45} ) BOLD WRAP 18 6

    print $Cont_Ee_Amt_Lbl                          (19, 72 ) BOLD
    print $Cont_Er_Amt_Lbl                          (19, 102 ) BOLD
    graphic                                         (20, 66, 63) horz-line
    graphic                                         (21, 144, 36) horz-line
    print $Cont_Total_Lbl                           (19, 130) BOLD WRAP 12 8
    print $Cont_Adj_L1_Lbl                          (19, 149) BOLD
    graphic                                         (20, {Col79} , 5) vert-line
    graphic                                         (20, 86,  5) vert-line
    graphic                                         (20, 110 , 5) vert-line
    graphic                                         (20, 117  , 5) vert-line
    print $Cont_Adj_L2_Lbl                          (20, 150) BOLD
    print $Cont_Base_Lbl                            (22, {Col70} ) BOLD
    print $Cont_Percentage_Lbl                      (22, 82 ) BOLD
    graphic                                         (21, 156  , 4) vert-line
    graphic                                         (21, 168  , 4) vert-line
    print $Cont_Amt_Lbl                             (22, 88 ) BOLD
    print $Cont_Base_Lbl                            (22, 102 ) BOLD
    print $Cont_Percentage_Lbl                      (22, 114) BOLD
    print $Cont_Amt_Lbl                             (22, 120) BOLD
    print $Cont_Ee_Part_Lbl                         (23, 146) BOLD WRAP 10 8
    print $Cont_Er_Part_Lbl                         (23, 159) BOLD WRAP 10 8
    print $Cont_Tot_Lbl                             (23, 172) BOLD WRAP 10 8


    graphic                                        (25,{Col1},179) horz-line

end-procedure


!**************************************************************************
!
! Procedure: Print_Footer-SI01
!
! Description: Print footer for each contribution type
!
!**************************************************************************
begin-procedure Print_Footer-SI01

    graphic              (+1,{Col1},179) horz-line

    print $Total_Empl_Lbl         (+2,20) Bold
    print #Total_Empl             (  ,70) edit '99999999999999'
    print $Tot_Ee_Cont_Lbl        (+2,20) Bold
    print #Total_Cont_EE          (  ,70) edit '99999999999.99'
    print $Tot_Er_Cont_Lbl        (+2,20) Bold
    print #Total_Cont_ER          (  ,70) edit '99999999999.99'

    graphic              (+1,{Col1},179) horz-line

    move #Total_Empl    to $Total_Empl      000000000
    MOVE #Total_Cont_EE to $Total_Cont_EE   00000000000.00
    MOVE #Total_Cont_ER to $Total_Cont_ER   00000000000.00

    let $REPORT_FOOTER = ltrim(rtrim($Total_Empl,' '),' ')
    let $REPORT_FOOTER = $REPORT_FOOTER || ',' || ltrim(rtrim($Total_Cont_EE,' '),' ')
    let $REPORT_FOOTER = $REPORT_FOOTER || ',' || ltrim(rtrim($Total_Cont_ER,' '),' ')
    write 1 from $REPORT_FOOTER

    close 1

end-procedure



!**************************************************************************
!
! Procedure: Delete-RunControl
!
! Description: to delete the values oon run control page
!
!**************************************************************************
begin-procedure Delete-RunControl
#ifdef debugy
    show 'Inside procedure Delete-RunControl'
#end-if
begin-SQL
DELETE FROM PS_GPCN_PHS_RPT_RC
WHERE OPRID     = $PRCS_OPRID
AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

#ifdef ORACLE
    COMMIT;
#endif
end-SQL
end-procedure

!**************************************************************************
!
! Procedure: Select-Parameters
!
! Description: Select the parameter from PHF/SI Reports CHN Run control page
!
!**************************************************************************
Begin-procedure Select-Parameters
begin-select
RC.GPCN_MONTHCD
RC.GPCN_YEARCD
RC.BGN_DT
RC.END_DT
RC.GPCN_CONTRIB_AREA
RC.PAY_ENTITY
RC.GPCN_CONTRIB_TYPE
RC.GPCN_REPORT_TYPE
RC.GPCN_ORG_CODE
RC.GPCN_ORG_CATAGORY
RC.GPCN_PHFSI_SRT_KY1
RC.GPCN_PHFSI_SRT_KY2
RC.GPCN_PHFSI_SRT_KY3
RC.GPCN_FILING_DT

    Let $RCTL_End_Date      = rtrim(ltrim(&RC.END_DT, ' '), ' ')
    Let $RCTL_Month_Code    = rtrim(ltrim(&RC.GPCN_MONTHCD, ' '), ' ')
    Let $RCTL_Year_Code     = rtrim(ltrim(&RC.GPCN_YEARCD, ' '), ' ')
    Let $RCTL_Contrib_Area  = rtrim(ltrim(&RC.GPCN_CONTRIB_AREA, ' '), ' ')
    Let $RCTL_Contrib_Type  = rtrim(ltrim(&RC.GPCN_CONTRIB_TYPE, ' '), ' ')
    let $Gpcn_Phfsi_Srt_Ky1 = RTRIM(LTRIM(&RC.GPCN_PHFSI_SRT_KY1, ' '), ' ')
    let $Gpcn_Phfsi_Srt_Ky2 = RTRIM(LTRIM(&RC.GPCN_PHFSI_SRT_KY2, ' '), ' ')
    let $Gpcn_Phfsi_Srt_Ky3 = RTRIM(LTRIM(&RC.GPCN_PHFSI_SRT_KY3, ' '), ' ')
    let $GPCN_REPORT_TYPE   = RTRIM(LTRIM(&RC.GPCN_REPORT_TYPE, ' '), ' ')
    let $RCTL_Pay_Entity    = RTRIM(LTRIM(&RC.PAY_ENTITY, ' '), ' ')


FROM  PS_GPCN_PHS_RPT_RC RC
WHERE RC.OPRID          = $Prcs_OprID
AND   RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
end-select

    do Get-Org-Category
    do Get-Trans-Org-Category

#ifdef debug
    show '$Prcs_OprID       : ' $Prcs_OprID
    show '$Prcs_Run_Cntl_ID : ' $Prcs_Run_Cntl_ID

    show '$RCTL_End_Date      : ' $RCTL_End_Date
    show '$RCTL_Month_Code    : ' $RCTL_Month_Code
    show '$RCTL_Year_Code     : ' $RCTL_Year_Code
    show '$RCTL_Contrib_Area  : ' $RCTL_Contrib_Area
    show '$RCTL_Contrib_Type  : ' $RCTL_Contrib_Type
    show '$Gpcn_Phfsi_Srt_Ky1 : ' $Gpcn_Phfsi_Srt_Ky1
    show '$Gpcn_Phfsi_Srt_Ky2 : ' $Gpcn_Phfsi_Srt_Ky2
    show '$Gpcn_Phfsi_Srt_Ky3 : ' $Gpcn_Phfsi_Srt_Ky3
    show '$GPCN_REPORT_TYPE   : ' $GPCN_REPORT_TYPE
#end-if

    do Sort-Order

end-procedure


!**************************************************************************
!
! Procedure: Get-Org-Category
!
! Description: Select the Employer category description
!
!**************************************************************************
Begin-procedure Get-Org-Category
begin-select
XLAT.XLATLONGNAME

FROM PSXLATITEM XLAT
WHERE XLAT.FIELDNAME    = 'GPCN_ORG_CATAGORY'
AND   XLAT.FIELDVALUE   = &RC.GPCN_ORG_CATAGORY
AND   XLAT.EFFDT        = (SELECT MAX(EFFDT)
                           FROM PSXLATITEM X1
                           WHERE X1.FIELDNAME  = XLAT.FIELDNAME
                           AND   X1.FIELDVALUE = XLAT.FIELDVALUE
                           AND   X1.EFFDT <= &RC.END_DT)
end-select
end-procedure

!**************************************************************************
!
! Procedure: Get-Trans-Org-Category
!
! Description: Select the translation of Employer category description
!
!**************************************************************************
Begin-procedure Get-Trans-Org-Category
begin-select
XLATLNG.XLATLONGNAME

FROM PSXLATITEMLANG XLATLNG
WHERE XLATLNG.FIELDNAME    = 'GPCN_ORG_CATAGORY'
AND   XLATLNG.FIELDVALUE   = &RC.GPCN_ORG_CATAGORY
AND   XLATLNG.EFFDT        = (SELECT MAX(EFFDT)
                           FROM PSXLATITEMLANG XLATLNG1
                           WHERE XLATLNG1.FIELDNAME  = XLATLNG.FIELDNAME
                           AND   XLATLNG1.FIELDVALUE = XLATLNG.FIELDVALUE
                           AND   XLATLNG1.EFFDT <= &RC.END_DT)
AND XLATLNG.LANGUAGE_CD = $curr_language_cd
end-select
end-procedure

!**************************************************************************
!
! Procedure: Sort-Order
!
! Description: Build the sort order based on run control page
!
!**************************************************************************
Begin-procedure Sort-Order


    Let $sort_order = ' ORDER BY '
    IF $GPCN_REPORT_TYPE = 'A'
        let $Sort_Order_pf1  = ' SI.'
        let $Sort_Order_pf2  = ' PERS.'
    end-if
    IF $GPCN_REPORT_TYPE = 'B'
        let $Sort_Order_pf1  = ' SIV2.'
        let $Sort_Order_pf2  = ' PER2.'
    end-if
    IF $GPCN_REPORT_TYPE = 'C'
        let $Sort_Order_pf1  = ' SI03.'
        let $Sort_Order_pf2  = ' PERS03.'
    end-if

    If $Gpcn_Phfsi_Srt_Ky1 <> '0'
        evaluate $Gpcn_Phfsi_Srt_Ky1
            when = '2'
                let $Sort_Order1  = $Sort_Order_pf1 || 'EMPLID '
            when = '3'
                let $Sort_Order1  = $Sort_Order_pf2 || 'NAME_AC '
            when = '4'
                let $Sort_Order1  = $Sort_Order_pf1 || 'GPCN_ACOUNT_NUM '
            when-other
                break
        end-evaluate
    End-if

    If $Gpcn_Phfsi_Srt_Ky2 <> '0'
        IF $Gpcn_Phfsi_Srt_Ky1 <> '0'
            LET $Sort_Order2 = ','
        END-IF
        evaluate $Gpcn_Phfsi_Srt_Ky2
            when = '2'
                let $Sort_Order2  = $Sort_Order2 || $Sort_Order_pf1 || 'EMPLID '
            when = '3'
                let $Sort_Order2  = $Sort_Order2 || $Sort_Order_pf2 || 'NAME_AC '
            when = '4'
                let $Sort_Order2  = $Sort_Order2 || $Sort_Order_pf1 || 'GPCN_ACOUNT_NUM '
            when-other
                break
        end-evaluate
    End-if


    If $Gpcn_Phfsi_Srt_Ky3 <> '0'
        IF $Gpcn_Phfsi_Srt_Ky1 <> '0' OR $Gpcn_Phfsi_Srt_Ky2 <> '0'
            LET $Sort_Order3 = ','
        END-IF
        evaluate $Gpcn_Phfsi_Srt_Ky3
            when = '2'
                let $Sort_Order3  = $Sort_Order3 || $Sort_Order_pf1 || 'EMPLID '
            when = '3'
                let $Sort_Order3  = $Sort_Order3 || $Sort_Order_pf2 || 'NAME_AC '
            when = '4'
                let $Sort_Order3  = $Sort_Order3 || $Sort_Order_pf1 || 'GPCN_ACOUNT_NUM '
            when-other
                break
        end-evaluate
    End-if

    String $sort_order $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order
    let $Order_by_cl = $sort_order
    let $Order_by_cl_tmp = rtrim(ltrim($sort_order, ' '), ' ')
    if $Order_by_cl_tmp = 'ORDER BY'
        let $Order_by_cl = ''
    end-if




#ifdef debug
    show '$Order_by_cl : ' $Order_by_cl
#end-if

end-procedure
!

!**************************************************************************
! Procedure: Get-Trans-ContType
! Description: Get the contribution type details
!**************************************************************************
begin-procedure Get-Trans-ContType
  Let $Cont_Type_Descr = ''
begin-SELECT on-error=SQL-Error
CONTPLNG.DESCR

  Let $Cont_Type_Descr = rtrim(ltrim(&CONTPLNG.DESCR, ' '), ' ')

FROM PS_GPCN_CON_TY_LNG CONTPLNG
WHERE CONTPLNG.GPCN_CONTRIB_TYPE = $Cont_Type
AND CONTPLNG.LANGUAGE_CD = $curr_language_cd
END-SELECT
end-procedure

!**************************************************************************
! Procedure: Get-Trans-PayEntity
! Description: Get the pay entity details
!**************************************************************************
begin-procedure Get-Trans-PayEntity
  Let $Pay_Ent_Descr = ''
begin-SELECT on-error=SQL-Error
PYELNG.DESCR

  Let $Pay_Ent_Descr = rtrim(ltrim(&PYELNG.DESCR, ' '), ' ')

FROM PS_GP_PYENT_LANG PYELNG
WHERE PYELNG.PAY_ENTITY = $Pay_Ent
AND PYELNG.LANGUAGE_CD = $curr_language_cd
END-SELECT
end-procedure