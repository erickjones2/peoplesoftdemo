!***********************************************************************
!  GPGBUT02 :  Log output Selection                                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------*
!                                                                      *
!          $Date:  2013/01/18:04:06:42                                 *
!       $Release:  HR92                                                *
!      $Revision:  101                                                 *
!                                                                      *
!----------------------------------------------------------------------*
!             Create-Log-Array                                         *
! This procedure creates the array 'Log_Vars' which holds all the      *
! entries to be displayed in the log file. The maximum number of       *
! entries that can be held is currently 200.                           *
!----------------------------------------------------------------------*
! Date          Modification                                           *
! ----          ------------                                           *
! 09/2006       -  Created SQC                                         *
!***********************************************************************
Begin-Procedure Create-Log-Array

  CREATE-ARRAY  NAME=Log_Vars SIZE=10000
        FIELD=log_item_name:CHAR:30
        FIELD=log_item_value:CHAR:35

  let #Log_Array_Counter = 0

End-Procedure

!***********************************************************************
! Append-Log
! This procedure populates the Log_Vars array with the information to
! be displayed in the log file.
!
!  Inputs : $Log_Item_Name  - This is the name/label of the item
!                             of information to appear in the log
!                             e.g. 'Operator ID'
!           $Log_Item_Value - The actual value, e.g. PSHR
!
!***********************************************************************
Begin-Procedure Append-Log($Log_Item_Name, $Log_Item_Value)

  if #_log_array_counter > 9999

        if #_log_array_counter = 10000

          Display 'Maximum size of Log Item Array has been exceeded.'
          Display '(Maximum number of array elements = 10000)'

        end-if

  else

        if length($Log_Item_Name) > 30

          let $Log_Item_Name = SUBSTR($Log_Item_Name, 1, 30)

        end-if

        if length($Log_Item_Value) > 35

          Do Trunc-log($Log_Item_Name,$Log_Item_Value)

        else

          let $Log_Item_Value = SUBSTR($Log_Item_Value, 1, 35)
          PUT $Log_Item_Name $Log_Item_Value INTO Log_Vars(#_Log_Array_Counter)

        end-if

        ADD 1 TO #_Log_Array_Counter

  end-if

End-Procedure

!************************************************************************
! Write-Log
! This procedure displays the contents of the Log_Vars array in the
! log file.
!************************************************************************
Begin-Procedure Write-Log

  Display ''
  Display '*****************************************************************************'
  Display 'Report Logs'
  Display '*****************************************************************************'
  Display 'Log Item'  noline
  Display '                        '  noline
  Display 'Value'
  Display '-----------------------------------------------------------------------------'

  let #Ctr = 0

  WHILE #Ctr < #Log_Array_Counter

        GET $Log_Item_Name $Log_Item_Value FROM Log_Vars(#Ctr)

        let $Log_Display_Line = RPAD($Log_Item_Name, 30, ' ')||': '||$Log_Item_Value

        Display $Log_Display_Line

    ADD 1 TO #Ctr

  END-WHILE

  Display ''
  Display '*****************************************************************************'

  LET #Log_Array_Counter = 0

End-Procedure
!**********************************************************************
Begin-Procedure Employee-Log

   if MOD(#LG_Emp_count,100) = 0
      let $LG_Emp_count = to_char(#LG_Emp_count)
      Do Get-Current-DateTime
      Do Append-Log (' ',' ')
      Do Append-Log ($LG_PRGUPD  , $ReportTime)
      Do Append-Log ($LG_EMPPROC , $LG_Emp_count)
      Do Append-Log (' ',' ')
      Do Append-Log('----------------------------- ' , '------------------------------' )
   end-if


End-Procedure
!**********************************************************************

Begin-Procedure Trunc-log($Trun_Item_Name,$Trun_Item_Value)

  let #trun_length = length($Trun_Item_Value)
  let #trun_divide = #trun_length/35
  let #trun_round  = round(#trun_divide,0)
  let #trun_count  = #trun_round + 1

  let #trun_i      = 0
  let #trun_start  = 1
  let #trun_end    = 35

  while #trun_i <= #trun_count

     let $trun_cut = substr($Trun_Item_Value,#trun_start,#trun_end)

     if $trun_cut <> ''

        do Append-log($Trun_Item_Name,$trun_cut)

     end-if

     let #trun_i     = #trun_i + 1
     let #trun_start = #trun_start + 35

     let $Trun_Item_Name = ' '
     let $trun_cut       = ' '


  end-while


  let #trun_length = 0
  let #trun_divide = 0
  let #trun_round  = 0
  let #trun_count  = 0

  let #trun_i      = 0
  let #trun_start  = 0

End-Procedure
!****************************************************************************
begin-procedure Get-log
#debug show '       -> Get-log '

Begin-Select
L.PRCSINSTANCE
L.PRCSTYPE
L.PRCSNAME
L.RUNLOCATION
L.OPSYS
L.DBTYPE
L.DBNAME
L.OPRID
L.BEGINDTTM
L.ENDDTTM
L.RUNSTATUS
L.RUNCNTLID
L.OUTDESTTYPE
L.OUTDESTFORMAT
L.TIMEZONE
FROM PSPRCSRQST  L
WHERE PRCSINSTANCE = #prcs_process_instance
End-Select

  let $Process_Inst  = to_char(&L.PRCSINSTANCE)
  let $BeginDate     = datetostr(&L.BEGINDTTM,{PTRPTDATE})
  let $BeginTime     = datetostr(&L.BEGINDTTM,{PTRPTTIME})
  let $BeginDateTime = $BeginDate || '     ' || $BeginTime

  let $EndDate       = datetostr(&L.ENDDTTM,{PTRPTDATE})
  let $EndTime       = datetostr(&L.ENDDTTM,{PTRPTTIME})
  let $EndDateTime   = $EndDate || '     ' || $EndTime

  !do Subtract_Time_Time (&L.ENDDTTM,&L.BEGINDTTM,$TotalDuration)
  !do Subtract_Time_Time ($EndTime,$BeginTime,$TotalDuration)

  move 'RUNLOCATION'  to $FieldName
  move &L.RUNLOCATION to $FieldValue
  do Read-Translate-Table
  let $RUNLOCATION = rtrim(ltrim($XlatlongName,' '),' ')


  move 'OPSYS'  to $FieldName
  move &L.OPSYS to $FieldValue
  do Read-Translate-Table
  let $OPSYS = rtrim(ltrim($XlatlongName,' '),' ')

  move 'DBTYPE'  to $FieldName
  move &L.DBTYPE to $FieldValue
  do Read-Translate-Table
  let $DBTYPE = rtrim(ltrim($XlatlongName,' '),' ')


  move 'RUNSTATUS'  to $FieldName
  move &L.RUNSTATUS to $FieldValue
  do Read-Translate-Table
  let $RUNSTATUS = rtrim(ltrim($XlatlongName,' '),' ')

  move 'OUTDESTTYPE'  to $FieldName
  move &L.OUTDESTTYPE to $FieldValue
  do Read-Translate-Table
  let $OUTDESTTYPE = rtrim(ltrim($XlatlongName,' '),' ')

  move 'OUTDESTFORMAT'  to $FieldName
  move &L.OUTDESTFORMAT to $FieldValue
  do Read-Translate-Table
  let $OUTDESTFORMAT = rtrim(ltrim($XlatlongName,' '),' ')


  Do Append-Log('PROCESS TYPE',      &L.PRCSTYPE)
  Do Append-Log('PROCESS NAME',      &L.PRCSNAME)
  Do Append-Log('REPORT NAME',       $ReportID)
  Do Append-Log('LANGUAGE',          $prcs_language_cd)
  Do Append-Log('PROCESS INSTANCE',  $Process_Inst)
  Do Append-Log(' ' , ' ' )

  Do Append-Log('RUN LOCATION',     $RUNLOCATION)
  Do Append-Log('OPERATING SYS',    $OPSYS)
  Do Append-Log('DB TYPE',          $DBTYPE)
  Do Append-Log('DB NAME',          &L.DBNAME)
  Do Append-Log(' ' , ' ' )

  Do Append-Log('OPERID' ,          &L.OPRID)
  Do Append-Log('RUN CTRL ID' ,     &L.RUNCNTLID)
  Do Append-Log(' ' , ' ' )

  Do Append-Log('BEGIN DATE TIME' , $BeginDateTime)
  Do Append-Log('END DATE TIME' ,   $EndDateTime)
  Do Append-Log(' ' , ' ' )

  Do Append-Log('OUTPUT DEST TYPE',    $OUTDESTTYPE)
  Do Append-Log('OUTPUT DEST FORMAT',  $OUTDESTFORMAT)
  Do Append-Log(' ' , ' ' )
  Do Append-Log('----------------------------- ' , '------------------------------' )

  do Get-Report-Log

#debug show '       <- Get-log '
end-procedure Get-log
!****************************************************************************
!-----------------------------
Begin-Procedure Get-Report-Log
#debug show '       -> Get-Report-Log '
   
   let $ReportID1 = $ReportID || ' Report Parameters '
   Do Append-Log($ReportID1, ' ')
   Do Append-Log(' ',' ')

!-----------------------------
 EVALUATE $ReportID

 WHEN = 'P14'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID)
    DO Append-Log('P60 IND'        , $P60_IND)
       
 WHEN = 'P35'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID)
 
 WHEN = 'P32'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID)
    
 WHEN = 'GTNA'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID)
    DO Append-Log('SET ID'         , $PNL_SETID)
 
 WHEN = 'P11 - PART 1'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID)
     
 WHEN = 'P11 - PART 2'

    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID )
    Do Append-Log('PAY ENTITY'     , $PNL_PAY_ENTITY )
    Do Append-Log('PAY GROUP'      , $PNL_PAYGROUP )
    Do Append-Log('EMPLID'         , $PNL_EMPLID )
    Do Append-Log('FREQUENCY ID'   , $PNL_FREQUENCY_ID)
    Do Append-Log('TAX BEGIN YEAR' , $PNL_TAX_YEAR)
    Do Append-Log('TAX PERIOD'     , $PNL_TAX_PERIOD)
    DO Append-Log('DEPT ID'        , $PNL_DEPTID) 
    
  WHEN = 'GPGBPSLP'
    Do Append-Log('CALENDAR RUN ID', $PNL_CAL_RUN_ID1 )
    Do Append-Log('CALENDAR ID'    , $PNL_CAL_ID1 )
    Do Append-Log('PAYMENT DT'     , $PNL_PYMT_DT_NEW1 )
    Do Append-Log('PAY GROUP'      , $PNL_PYGRP1 )
        
    
 end-evaluate

!------------------------------------------------------------------------------------

  Do Append-Log(' ',' ')
  Do Append-Log('----------------------------- ' , '------------------------------' )
  Do Write-log

End-Procedure Get-Report-Log
!*********************************************************************************















