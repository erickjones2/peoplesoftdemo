!***********************************************************************
!  GPMXIM04:  Instituto Mexicano Del Seguro Social,                    *
!             REPORTE DE ALTAS AL SEGURO SOCIAL (EDI)                  *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  31781263                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 7
#define c3 23
#define c4 75
#define c5 86
#define c6 92
#define c7 98
#define c8 106
#define c9 117
#define c10 122
#define c11 129
#define c12 143


begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move   'GPMXIM04' to $ReportID
  display $ReportID
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL'    to $ReportTitle1
  move   'DELEGACIÓN DEL IMSS'                     to $ReportTitle2
  move   'COMUNICACIÓN DE ALTAS DE ASEGURADOS EDI' to $ReportTitle3
  display $ReportTitle1
  display $ReportTitle2
  display $ReportTitle3
  Show 'Ver.2020 PUM37.01'
  move '1' to $Reportdatetype
  move '1' to $Reportyear4
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do init-array
  do Get-Max-SALDF
  do Select-Parameters-IMSS2
  do OPEN-FILE

  move &RC_IMSS2.ESTABID to $Reg_Patronal
  Let $Job_Tbl = 'A'
  Let $Reg_Patronal_RC = $Reg_Patronal
  
  Do Get-Establishment-Optn
  
  do Report

  close 1
end-procedure

!********************************************************
begin-procedure Get-IMSS-Location
begin-SELECT
IMSS.DESCR,
IMSS.DESCR_AC,
IMSS.ADDRESS1,
IMSS.ADDRESS2,
IMSS.ADDRESS3,
IMSS.ADDRESS4,
IMSS.CITY,
IMSS.COUNTY,
IMSS.STATE              &IMSS.STATE
  do get-Statename
IMSS.POSTAL,
IMSS.COUNTRY,
IMSS.ESTABID,
IMSS.GUIDE_NBR_MEX

  let $IMSSName     = rtrim(&IMSS.DESCR,' ')
  let $IMSSAbbrv    = rtrim(&IMSS.DESCR_AC,' ')
  let $IMSSStreet1  = rtrim(&IMSS.ADDRESS1,' ')
  let $IMSSStreet2  = rtrim(&IMSS.ADDRESS2,' ')
  let $IMSSStreet3  = rtrim(&IMSS.ADDRESS3,' ')
  let $IMSSStreet4  = rtrim(&IMSS.ADDRESS4,' ')
  let $IMSSCity     = rtrim(&IMSS.CITY,' ')
  let $IMSSCounty   = rtrim(&IMSS.COUNTY,' ')

  move &STDESCRIP        to $IMSSState
  move &IMSS.POSTAL      to $IMSSZip
  move &IMSS.COUNTRY     to $IMSSCountry
  let $IMSSer           = &IMSS.ESTABID
  Let $Reg_Patronal = Rtrim(&IMSS.ESTABID, ' ')
  
  Let $Guia = Rtrim(&IMSS.GUIDE_NBR_MEX, ' ')
  let $Guia = substr($Guia,2,6)

FROM  PS_ESTAB_TBL IMSS,
      PS_LOCATION_TBL LOC
WHERE IMSS.ESTABID = LOC.ESTABID
  AND LOC.LOCATION = $Location
  AND LOC.EFFDT = (SELECT MAX(L.EFFDT)
                   FROM   PS_LOCATION_TBL L
                   WHERE  L.LOCATION = LOC.LOCATION)
  AND IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  ESTABID = IMSS.ESTABID)
end-SELECT

end-procedure

!**********************************************************

begin-procedure Get-StateName
begin-Select
ST.DESCR      &STDESCRIP
FROM PS_STATE_NAMES_TBL  ST
WHERE ST.COUNTRY = 'MEX'
AND   ST.STATE   = &IMSS.STATE
end-select
end-Procedure

BEGIN-PROCEDURE OPEN-FILE
  LET $FILE_NAME =  '{FILEPREFIX}' || 'GPMXIM04.TXT' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  OPEN $FILE_NAME AS 1 FOR-WRITING RECORD=190:FIXED STATUS=#FILESTAT
  if #FILESTAT < 0
      show 'Error opening output file. Program ending'
      stop quiet
  end-if
END-PROCEDURE OPEN-FILE


begin-heading 8
  let #RptCol = {ColR} - 2
  if $Company  <> $PriorCompany
     do Get-Company-Data-Mex
     move $Company  to $PriorCompany
  end-if
  print 'PeopleSoft'        (1)  center
  print $ReportTitle1       (+1) center
  print 'Compañía:       '  (,1)
  do to_upper($CompanyName)
  Let $CompanyName = substr(rtrim($CompanyName,' '), 1, 53)
  print $CompanyName        ()
  print 'Página:   '        (,140)
  page-number               ()
  print $ReportTitle2       (+1) center
  print 'Reg.Patronal:   '  (,1)
  print $Reg_Patronal       ()  edit XXXXXXXXXX-X
  do to_upper($IMSSName)
  let $locname = '('||rtrim($IMSSName,' ')||')'
  print $locname            (,+2)
  print 'Fecha:    '        (,140)
  print $reportdate         ()
  print $ReportTitle3       (+1) center
  print 'Núm. de guía:   '  (,1)
  print $Guia               ()  edit XXXXX
  date-time () HH:MM:SS &ReportTime
  print 'Hora:     '        (,140)
  print &ReportTime         ()
  print '=' (+1,1,165) fill

  print 'NUM'                     (+1,{c1})
  print 'SEC.'                    (+1,{c1})
  print 'NUMERO DE    D'          (-1,{c2}) 
  print 'AFILIACION   V'          (+1,{c2})
  print 'NOMBRE DEL ASEGURADO'    (-1,{c3})
  print ' SALARIO'                (,{c4})
  print 'INTEGRADO'               (+1,{c4})
  print 'TIPO'                    (-1,{c5})
  print 'TRAB'                    (+1,{c5})
  print 'TIPO'                    (-1,{c6})
  print 'SAL.'                    (+1,{c6})
  print 'SEMANA'                  (-1,{c7})
  print 'JR.RED'                  (+1,{c7})
  print 'FECHA MOV.'              (-1,{c8})
  print 'UMF'                     (,{c9})
  print 'TIPO'                    (,{c10})
  print 'MOV.'                    (+1,{c10})
  print '  CLAVE'                 (-1,{c11})
  print 'TRABAJADOR'              (+1,{c11})
  print '    C U R P'             (-1,{c12})
  print ' '                       (+1,{c12})
  print '=' (+1,1,165) fill
end-heading


begin-procedure init-array
  create-array name=movim size=100000  field=detalle:char
end-procedure init array


begin-procedure Report
  move 0 to #EECount
  let $v_select = ''
  let $v_espacio = ''
  do WhereForPrint

if (rtrim($empini, ' ') <> '') and (rtrim($empfin,' ') = '')
  move ' AND A.EMPLID = ''' to $v_select
  concat $EmpIni with $v_select
  concat ''''  with $v_select
end-if

if (rtrim($empini, ' ') <> '') and (rtrim($empfin, ' ') <> '')
  move ' AND A.EMPLID between ''' to $v_select
  concat $EmpIni with $v_select
  concat ''' AND ''' with $v_select
  concat $EmpFin  with $v_select
  concat ''''  with $v_select
end-if

if ($BegDt <> '') and ($EndDt <> '')
  concat ' AND T.EFFDT BETWEEN ' with $v_select
  concat '''' with $v_select
  concat $BegDt with $v_select
  concat '''' with $v_select
  concat  ' AND ' with $v_select
  concat '''' with $v_select
  concat $EndDt  with $v_select
  concat ''''  with $v_select
else
   if ($fecini <> '') and ($fecfin <> '')
      let $EndDt = $FecFin
      concat ' AND A.ACTION_DT between ' with $v_select
      concat '''' with $v_select
      concat $FecIni with $v_select
      concat '''' with $v_select
      concat ' AND ' with $v_select
      concat '''' with $v_select
      concat $FecFin  with $v_select
      concat ''''  with $v_select
   end-if
end-if

if $TipSal <> '0040' and Rtrim($TipSal, ' ') <> ''
  concat ' AND JBJR.SALARY_TYPE_MEX = ''' with $v_select
  concat $TipSal with $v_select
  concat '''' with $v_select
end-if
  let #EECount = 0
  do Advice-Flag
  
  #Debug show '$v_select '  $v_select
  #Debug show '$WhereForPrinting ' $WhereForPrinting
  #Debug show '$v_flag ' $v_flag

If $topado = 'Y'
  Let $UMA_Effdt = $EndDt
  do Get-Max-UMA
End-If  
    
begin-SELECT DISTINCT
A.EMPLID
A.COMPANY
T.EFFDT
A.LOCATION
T.ACTION
T.ACTION_REASON
A.DEPTID
A.ESTABID 
  add 1 to #numsec
  Let $Location = Rtrim(&A.LOCATION, ' ')
  print #numsec                    (+1,{c1}) edit 0999
  move &A.EMPLID  to  $Emplid
  let $Sub_Emplid = substr($Emplid,1,10)
  print $Emplid                (0,{c11})
  do convert-to-dtu-date (&T.EFFDT,$HireDT-dtu)
  let $HireDt  = Translate ($HireDt-Dtu,'-','')
  do dtu-parse-date ($HireDt-dtu,#dtu-yr,#dtu-mo,#dtu-da)
  move  #dtu-yr to $dtu-yr 9999
  move  #dtu-da to $dtu-da 09
  move  #dtu-mo to $dtu-mo 09
  let   $fechamovto = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
  print $fechamovto (0,{c8})
  let   $fecha = $dtu-da ||  $dtu-mo || $dtu-yr
  let $Sub_Deptid = substr(&A.DEPTID,2,3)
  do GetImssId
  print $Imss_Id                      (0,{c2})  edit XXXXXXXXXXbbbX
  move $Imss_Id To $NationalId
JBJR.WORKER_TYPE_MEX
 
  If $Estab_Opt = 'L'
    
    If $Reg_Patronal = '' or ($Location <> $Location_Aux)
      Let $Location_Aux = $Location
      DO Get-IMSS-Location
    End-if  
  
  Else
    Let $Reg_Patronal = RTrim(&A.ESTABID, ' ' )
    If $Reg_Patronal = '' or ($Reg_Patronal <> $Reg_Patronal_Aux)
      Let $Reg_Patronal_Aux = $Reg_Patronal
      Do ProcessIMSS_Location
      Let $IMSSName = $LocationName
    End-if
    
  End-if  

   Move &JBJR.WORKER_TYPE_MEX to $Worker_Type
   evaluate &JBJR.WORKER_TYPE_MEX
     when = '0010'
       move '1' to $Worker_Type
       break
     when = '0020'
       move '2' to $Worker_Type
       break
     when = '0030'
       move '3' to $Worker_Type
       break
   end-evaluate
   print $Worker_Type               (0,{c5})
A.EFFDT
  let $JobEffdt = &A.EFFDT  
  Do Get-Name
  
  print $Name                       (0,{c3},50)
T.GPMX_SDI_FIX
T.GPMX_SDI_VAR
T.GPMX_SDI_TOT
  let #FixedCurr = &T.GPMX_SDI_FIX
  let #VarCurr   = &T.GPMX_SDI_VAR
  let #IDSCurr   = &T.GPMX_SDI_TOT
  

  if $Topado = 'Y'          !Si por el panel se pide Topar lo Topa
     if #IDSCurr >  #SDIMax
        let #IDSCurr = #SDIMax
     end-if
  end-if
  print #IDSCurr                   (0,{c4}) edit 9,999.99
JBJR.SALARY_TYPE_MEX
    evaluate &JBJR.SALARY_TYPE_MEX
      when = '0010'
        move '0' to $SalaryType
        break
      when = '0030'
        move '1' to $SalaryType
        break
      when = '0020'
        move '2' to $SalaryType
        break
    end-evaluate
    print $SalaryType                (0,{c6})
JBJR.REDUCED_WEEK_MEX
    
     let $ReducedWk = substr(&JBJR.REDUCED_WEEK_MEX, 3,1)
     print $ReducedWk                 (0,{c7})
A.ACTION
  do GetMedicalUnit
  do GetCurp
  Print $EmplCurp                   (0,{c12})
    print $MedicalUnit   (0,{c9})
    if RTRIM($Reg_Patronal,' ') <> ''
       add 1 to #EECount
       do write-rcd
       do search
    end-if
  

FROM    PS_JOB               A,
        PS_GPMX_SDI_WA       T,
        PS_JOB_JR            JBJR

WHERE   A.EMPLID    = JBJR.EMPLID
AND     A.EFFDT     = JBJR.EFFDT
AND     A.EFFSEQ    = JBJR.EFFSEQ
AND     A.EMPL_RCD  = JBJR.EMPL_RCD
AND     A.EMPLID    = T.EMPLID
AND     A.COMPANY   = $Company
[$WhereForPrinting]
[$v_flag]
[$v_select]
Order By [$OrderEstablishment] T.EFFDT DESC,
         A.EMPLID
end-SELECT
   if #EECount > 0
      do Write-Header
      do Write-Array
      do Write-Footer
      do Imprime-Totales
      new-page
   end-if

end-procedure

!**************************************
begin-procedure Get-Name
!show '** Get-Name **'
!**************************************
begin-SELECT 
NAM.FIRST_NAME
NAM.LAST_NAME
NAM.SECOND_LAST_NAME
NAM.NAME
  move &NAM.FIRST_NAME to $EmpFirstName
  move &NAM.LAST_NAME  to $EmpPat
  move &NAM.SECOND_LAST_NAME  to $EmpMat
  move &NAM.NAME TO $Name
  move &NAM.NAME TO $EmpName
  do to_upper($Name)
  do to_upper($PaternalName)
  do to_upper($MaternalName)
  do to_upper($Name)
FROM    PS_NAMES         NAM
WHERE   NAM.EMPLID  = $Emplid
AND     NAM.NAME_TYPE = 'PRI'
AND     NAM.EFFDT   = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                        WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                          AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                          AND NAM_ED.EFFDT <= $EndDt)
end-SELECT
end-procedure Get-Name

!****************************************************************************
Begin-Procedure WhereForPrint
 let $Value = '0010'
 let $Type = 'A'
  
 If (rtrim($EndDt,' ') <> '' and rtrim($BegDt,' ') <> '')
    Let $WhereForPrinting =' AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
  WHERE EMPLID = A.EMPLID
  AND EMPL_RCD = A.EMPL_RCD
  AND EFFDT BETWEEN '''|| $BEGDT ||''' AND '''|| $ENDDT ||''') !31781263
  AND A.ACTION_REASON IN (SELECT AC1.ACTION_REASON
      FROM PS_ACT_RSN_TBL_MEX AC1
      WHERE AC1.IMS_PRN_FORM_MEX = ''' || $Value || ''')
  AND A.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
      WHERE EMPLID = A.EMPLID
      AND EMPL_RCD = A.EMPL_RCD
      AND EFFDT = A.EFFDT)
      AND T.EFFDT = A.EFFDT
      AND T.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
      WHERE EMPLID = T.EMPLID
      AND EFFDT    = T.EFFDT)'
      
Else
  let $WhereForPrinting =' AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
  WHERE EMPLID = A.EMPLID
  AND EMPL_RCD = A.EMPL_RCD
  AND EFFDT <= '''|| $ENDDT ||''')
  AND A.ACTION_REASON IN (SELECT AC1.ACTION_REASON
      FROM PS_ACT_RSN_TBL_MEX AC1
      WHERE AC1.IMS_PRN_FORM_MEX = ''' || $Value || ''')
  AND A.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
      WHERE EMPLID = A.EMPLID
      AND EMPL_RCD = A.EMPL_RCD
      AND EFFDT = A.EFFDT)
      AND T.EFFDT = A.EFFDT
      AND T.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
      WHERE EMPLID = T.EMPLID
      AND EFFDT    = T.EFFDT)'
      
  end-if
  
  Let $WhereForPrinting = $WhereForPrinting || $WhereForEstablishment
  
end-procedure
!****************************************************************************

begin-procedure GetMedicalUnit
  move '' to $MedicalUnit
begin-select
UMF.MED_REC_CD_MEX 
 let $MedicalUnit = Ltrim(Rtrim(&UMF.MED_REC_CD_MEX, ' '), ' ')

FROM PS_PERS_DATA_MEX UMF 
  WHERE UMF.EMPLID = $Emplid 
    AND UMF.EFFDT = 
        (SELECT MAX(UMF_ED.EFFDT) FROM PS_PERS_DATA_MEX UMF_ED 
        WHERE UMF.EMPLID = UMF_ED.EMPLID 
          AND UMF_ED.EFFDT <= $EndDt)
end-select
end-procedure GetMedicalUnit


begin-procedure GetCurp
  move '' to $EmplCurp
begin-select
CURP.NATIONAL_ID
    let $EmplCurp = &CURP.NATIONAL_ID

FROM PS_PERS_NID CURP
WHERE CURP.NATIONAL_ID_TYPE='CURP'
AND CURP.EMPLID  = $Emplid
AND CURP.COUNTRY = 'MEX'
end-select
end-procedure GetCurp


begin-procedure GetImssId
  move '' to $Imss_Id
begin-select
IMID.NATIONAL_ID
    let $Imss_Id = &IMID.NATIONAL_ID

FROM PS_PERS_NID IMID
WHERE IMID.NATIONAL_ID_TYPE='IMSS'
AND IMID.EMPLID  = $Emplid
AND IMID.COUNTRY = 'MEX'
end-select
end-procedure GetImssId


begin-procedure Advice-Flag
 let $YesFlag = 'Y'
 if $Reimp_Av = 'N' or rtrim($Reimp_Av,' ') = ''
    let $v_flag = ' AND A.EMPLID NOT IN (SELECT FLG.EMPLID FROM PS_GPMX_IMS_CONTR FLG '
    let $v_flag = $v_flag || 'WHERE FLG.EMPLID = A.EMPLID '
    let $v_flag = $v_flag || 'AND   FLG.EFFDT  = T.EFFDT '
    let $v_flag = $v_flag || 'AND   FLG.GPMX_IMS_HIRE_EDI = ''' || $YesFlag || ''''
!    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_HIRE_DEV = ''' || $YesFlag || ''''
!    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_HIRE_EDI = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ')'
 else
    let $v_flag = ''
 end-if
end-procedure Advice-Flag


begin-Procedure Write-Array
  move 1 to #ind
  
  while #ind <= #EECount
     get $Linea from movim(#ind) detalle
     write 1 FROM $Linea:169
     add 1 to #ind
  end-while
end-procedure Write-Array


begin-Procedure Imprime-Totales
  print 'TOTAL DE ALTAS DE ASEGURADOS REGISTRADOS : ' (+2,1)
  print #EECount ()  edit 8888888
  print '' (+2,1)
end-procedure


begin-procedure Get-Max-SALDF
 if rtrim($EndDt,' ') = ''
  let $EndDt = $AsOfDate
 end-if
Begin-select
WZ.GPMX_MINIMUM_WAGE
   Let #MinWage = &WZ.GPMX_MINIMUM_WAGE
FROM PS_GPMX_MIN_WAGE   WZ

WHERE  WZ.WAGE_ZONE_MEX  = '10'
AND    WZ.EFFDT      = (SELECT MAX(EFFDT) FROM   PS_GPMX_MIN_WAGE
                        WHERE WAGE_ZONE_MEX = '10'
                        AND EFFDT <= $EndDt)
end-select
  let #SDImaxDF = 25 *  #MinWage
end-procedure

!*************************************
begin-procedure Write-Rcd
!show '** Write-Rcd **'
!*************************************

  let #IDSCURR2  = #IDScURR * 100
  move #IDSCURR2  to $IDS    000009
  do to_upper($EmpPat)
  do to_upper($EmpMat)
  do to_upper($EmpFirstName)
  let $Space16 = '                ' !Para formato EDI IMSS campo1
  print '08'   (0,{c10})
  Let $Space1 = ' ' 
  
let $Linea = rpad(rtrim($Reg_Patronal,' '),11,' ') || rpad(rtrim($Imss_Id,' '),11,' ')  -
    || rpad(rtrim($EmpPat,' '),27,' ') || rpad(rtrim($EmpMat,' '),27,' ') || rpad(rtrim($EmpFirstName,' '),27,' ')  -
    || rpad($IDS,6,' ') || rpad($Space1,6,' ') || $Worker_Type || $SalaryType || $ReducedWk || $Fecha  -
    || rpad($MedicalUnit,3,' ') || rpad($Space1,2,' ') || '08' || rpad($Guia,5,' ') || rpad($Sub_Emplid,10,' ') -
    || ' ' || rpad(rtrim($EmplCurp,' '),18,' ') || '9'
    

put $linea into movim(#EECount)
end-procedure


begin-procedure Write-Header
   let $Partner = 'IMSS-834'
   let $Cabecero = rpad($Partner,16,' ')
   Write 1 FROM $Cabecero:166
end-procedure Write-Header


begin-procedure Write-Footer
   move #EECount  to $EECount  000009
   let $Head = '01'
   let $Tipo_Mov = '08'
   let $ID_Formato = '9'
   let $asterisk = '*'
   
   let $Pie_Pagina = rpad($asterisk,13,'*') || rpad($Space1,43,' ') || rpad($EECount,6,' ') || rpad($Space1,71,' ') || rpad($Guia,5,' ') || rpad($Space1,29,' ') || '9'
   Write 1 FROM $Pie_Pagina:169
   let $space=' '
   !write 1 from $space:166
end-procedure Write-Footer


begin-procedure SEARCH
begin-select
COUNT(*) &TOTAL
FROM PS_GPMX_IMS_CONTR  P4
WHERE P4.EMPLID  = &A.EMPLID
  AND P4.EFFDT   = &T.EFFDT
end-select
  if &TOTAL = 0
     do INSERT_1
  else
     do UPDATE_1
  end-if
end-procedure


begin-procedure INSERT_1
begin-sql
INSERT INTO PS_GPMX_IMS_CONTR
       (EMPLID,
        EFFDT,
        GPMX_IMS_HIRE_ADV,
        GPMX_IMS_MOD_ADV,
        GPMX_IMS_TER_ADV,
        GPMX_IMS_HIRE_DEV,
        GPMX_IMS_MOD_DEV,
        GPMX_IMS_TER_DEV,
        GPMX_IMS_HIRE_EDI,
        GPMX_IMS_MOD_EDI,
        GPMX_IMS_TER_EDI)
VALUES (&A.EMPLID,
        &T.EFFDT,
        'N',
        'N',
        'N',
        'N',
        'N',
        'N',
        'Y',
        'N',
        'N')
end-sql
end-procedure


begin-procedure UPDATE_1
begin-sql
UPDATE PS_GPMX_IMS_CONTR
SET  GPMX_IMS_HIRE_EDI = 'Y'
WHERE EMPLID  = &A.EMPLID
  AND EFFDT   = &T.EFFDT
end-sql
end-procedure


begin-procedure TO_UPPER(:$in)
  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''
  while #c <= length($in)
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)                       
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'
           let $let = 'O'
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           break
        when = 'ñ'
           let $let = 'N'
           break
        when-other
           let $let = upper($char)
           break
     end-evaluate
     let $cad = $cad || $let
     let #c = #c + 1
  end-while
  let $in = $cad
end-procedure


#include 'reset.sqc'    !Reset printer procedure
#include 'curdttim.sqc' !Get-Current-DateTime procedure
#include 'datetime.sqc' !Routines for date and time formatting
#include 'number.sqc'   !Routines to format numbers
#include 'stdapi.sqc'   !Update Process API
#Include 'datemath.sqc' !Routines for date math
#include 'gpmxnotf.sqc' !Get-Run-Control procedure
#include 'getcomex.sqc'  !Get-Company-data-Mex


