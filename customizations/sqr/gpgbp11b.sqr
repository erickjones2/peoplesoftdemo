!***********************************************************************
!  GPGBP11B.SQR - PART 2 DEDUCTIONS WORKING SHEET P11                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2013/01/18:04:04:54                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!----------------------------------------------------------------------
! Date          Modification                                           *
! ----          ------------                                           *
! 03/2001       -    Design 2001/2002                                  *
!                    + misc. enhancements                              *
! 08/2005       -    Modified to print NI as taxcode if earnings b/w   *
!                    LELand ET                                         *
! 09/2006       -    Modified the whole SQR for NI-Retro Changes       *
!***********************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup32.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables
#define PageLength              177
#define PosNumPage              160

#define PosFreq/Period           1
#define PosHead2                13
#define PosHead3                27
#define PosHead4A               41
#define PosHead4B               55
#define PosHead5                72
#define PosHead6                86
#define PosHead6A               100
#define PosHead6B               115
#define PosHead7                129
#define PosHeadRefund           144
#define PosHead8                146
#define PosHead9                160


#define PosFreq/Period           1
#define Pos2                     9
#define Pos2A                   22
#define Pos3                    23
#define Pos4A                   37
#define Pos4B                   51
#define Pos5                    68
#define Pos5A                   72
#define Pos6                    82
#define Pos6A                   96
#define Pos6AA                  98 
#define Pos6C                   104
#define Pos6D                   107
#define Pos6B                   111
#define Pos6BB                  113
#define Pos7                    125
#define PosRefund               140
#define Pos8                    142
#define Pos9                    156

!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 10 !This number must be changed to match the number
                 !of lines in the header (including column headings)
                 
                 
        let $ReportDateTime =  $ReportDate || ' ' ||  $ReportTime            

        print $ReportTitle              ()   bold center
        print 'Report ID:  '            (+1,1)
        print $ReportID                 (,{Pos2A})
        page-number                     ( ,{PosNumPage}) 'Page: '
        last-page                       () ' / '

        print 'Date:'                   (+1,1)
        print $ReportDateTime           (,{Pos2A}) 
        print 'Selected Tax Year begins in'    (,{Pos6})  Bold
        print $PNL_TAX_YEAR             (,{Pos6B})        Bold

        print 'Employee Surname:'       (+2,1)
        print $SURNAME                  (,{Pos2A})
        print 'Tax Code / Basis:'        (,{Pos5A})
        print $TAXCODE                  (,{Pos6AA})
        if $TAXCODE='NI'
        else
        print ' / '                     (,{Pos6C})
        print #TAX_BASIS                (,{Pos6D})        edit 9
        end-if
        print 'Employee ID:' (,{Pos6BB}) 
        print $EMPLID_RCD               (,{Pos8})   

        print 'Forename(s):'            (+1,1)
        print $FORENAMES                (,{Pos2A})
        print 'Date of Birth'           (,{Pos5A})
        print $DOB                      (,{Pos6AA})
        print 'Date of Starting:'       (,{Pos6BB})       
        print $HIRE_DT                  (,{Pos8})
             
        print 'Pay Entity:'             (+1,1)
        print $PYENT_DESCR              (,{Pos2A})  
        print 'National Insurance No:'  (,{Pos5A})
        print $NI                       (,{Pos6AA})  
        print 'Date of Leaving:'        (,{Pos6BB})        

        print $TERM_DT                  (,{Pos8}) 
        

!******************************************************************
!*** Heading section - Headers
!******************************************************************

        print 'Taxable'                 (+2,{PosHead2})        Bold
        print 'Total Pay'               (,{PosHead3})          Bold
        print 'Total Free'              (,{PosHead4A})         Bold
        print 'Total Additional'        (,{PosHead4B})         Bold
        print 'Total Taxable'           (,{PosHead5})          Bold
        print 'Total Tax'               (,{PosHead6})          Bold
        print 'Tax Due At'              (,{PosHead6A})         Bold
        print 'Regulatory'              (,{PosHead6B})         Bold
        print 'Tax Deducted'            (,{PosHead7})          Bold
        print 'Tax Not'                 (,{PosHead8})          Bold
      
        print 'Period'                  (+1,{PosFreq/Period})  Bold
        print 'Pay'                     (,{PosHead2})          Bold
        print 'To Date'                 (,{PosHead3})          Bold
        print 'Pay To Date'             (,{PosHead4A})         Bold
        print 'Pay To Date'             (,{PosHead4B})         Bold
        print 'Pay To Date'             (,{PosHead5})          Bold
        print 'Due To Date'             (,{PosHead6})          Bold
        print 'End Of Period'           (,{PosHead6A})         Bold
        print 'Limit'                   (,{PosHead6B})         Bold
        print 'Refunded'                (,{PosHead7})          Bold
        print 'Deducted'                (,{PosHead8})          Bold
      
        
        print '2'                       (+1,{PosHead2})        Bold
        print '3'                       (,{PosHead3})          Bold
        print '4A'                      (,{PosHead4A})         Bold
        print '4B'                      (,{PosHead4B})         Bold
        print '5'                       (,{PosHead5})          Bold
        print '6'                       (,{PosHead6})          Bold
        print '6A'                      (,{PosHead6A})         Bold
        print '6B'                      (,{PosHead6B})         Bold
        print '7'                       (,{PosHead7})          Bold
        print '8'                       (,{PosHead8})          Bold
        
        
        
        if(#PNL_TAX_YEAR  < 2006) 
            print 'Tax'                     (-2,{PosHead9})          Bold
            print 'Credits'                 (+1,{PosHead9})          Bold
            print '9'                       (+1,{PosHead9})          Bold
        end-if
        
   

end-heading
!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report
       
       
        do INIT-REPORT
        do MAIN-REPORT
        move #CountError to $CountError 99999
        do Append-Log ('WHERE_STATEMENT'  , $WHERE_STATEMENT)
        do Append-Log ('CountError '  , $CountError)
        do Append-Log('----------------------------- ' , '------------------------------' )
        do Get-log
        
end-report
!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT
#debug Show 'INIT-REPORT -> ' 
        
        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME

        if isnull($prcs_process_instance)
                #debug show 'Running P11 SQR'
                do ASK-VALUES !SQR not run through process scheduler
          else
                #debug show 'Running p11.SQR in the Process Scheduler'
                do GET-VALUES !SQR run through process scheduler
        end-if

        let $ReportID    = 'P11 - PART 2'
        let $ReportTitle = 'Deductions Working Sheet'
   
        
       
#debug Show 'INIT-REPORT <- ' 
end-procedure INIT-REPORT

!*=================================================================
! Procedure    :INIT-VARIABLES
! Comment      :Initializations of all varaibles used by the report
!*=================================================================
begin-procedure INIT-VARIABLES
#debug show 'Procedure Name INIT-VARIABLES -> '   
      

        let #TRUE               = 1
        let #FALSE              = 0
        let #CountError         = 0
        let #counter            = 0
        let #TotConPay          = 0
        let $REFUND             = ' '
        let #Tot1A              = 0
        let #Tot1B              = 0
        let #Tot1C              = 0
        let #Tot1D              = 0
        let #Tot1E              = 0
        let #Tot1F              = 0
        let #Tot1G              = 0
        let #Tot1H              = 0
        
#debug Show 'Procedure Name INIT-VARIABLES <- ' 
end-procedure INIT-VARIABLES


!*=================================================================
! Procedure   :ASK-VALUES
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure ASK-VALUES
#debug show 'ASK-VALUES -> ' 
      
        !*---------------------------------------------------------
        !***    Enter the Calender Run ID
        !*---------------------------------------------------------
        !input $PNL_CAL_RUN_ID 'Enter Calender Run ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Entity
        !*---------------------------------------------------------
        !input $PNL_PAY_ENTITY 'Enter Pay Entity'

        !*---------------------------------------------------------
        !***    Enter the Deptid
        !*---------------------------------------------------------
        !input $PNL_DEPTID 'Enter Department ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Group
        !*---------------------------------------------------------
        !input $PNL_PAYGROUP 'Enter Pay Group '

        !*---------------------------------------------------------
        !***    Enter the Employee ID
        !*---------------------------------------------------------
        !input $PNL_EMPLID 'Enter Employee ID '

        !*---------------------------------------------------------
        !***    Enter the Tax Period
        !*---------------------------------------------------------
        !input $PNL_TAX_PERIOD 'Enter Tax Period'

        !*---------------------------------------------------------
        !***    Enter the Frequency ID
        !*---------------------------------------------------------
        !input $PNL_FREQUENCY_ID 'Enter Frequency ID'

        !*---------------------------------------------------------
        !***    Enter the Tax Year
        !*---------------------------------------------------------
        !input $PNL_TAX_YEAR 'Enter The Year the Tax Year Begins In'

 #debug show 'ASK-VALUES <- ' 
 end-procedure ASK-VALUES


!*=================================================================
! Procedure     :GET-VALUES
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure GET-VALUES
#debug show 'GET-VALUES-> '  
        
begin-SELECT on-error=ERROR-SQL   !SELECTS THE DATA FROM THE PANEL
RUNDB.CAL_RUN_ID
RUNDB.DEPTID
RUNDB.PAY_ENTITY
RUNDB.GP_PAYGROUP
RUNDB.EMPLID
RUNDB.FREQUENCY_ID
RUNDB.GPGB_TAX_PERIOD
RUNDB.GPGB_TAX_BGN_YR

        let $PNL_CAL_RUN_ID         = RTRIM(&RUNDB.CAL_RUN_ID,' ')
        let $PNL_DEPTID             = RTRIM(&RUNDB.DEPTID,' ')
        let $PNL_PAY_ENTITY         = RTRIM(&RUNDB.PAY_ENTITY,' ')
        let $PNL_PAYGROUP           = RTRIM(&RUNDB.GP_PAYGROUP,' ')
        let $PNL_EMPLID             = RTRIM(&RUNDB.EMPLID,' ')
        let #PNL_TAX_PERIOD         = &RUNDB.GPGB_TAX_PERIOD
        let $PNL_FREQUENCY_ID       = RTRIM(&RUNDB.FREQUENCY_ID,' ')
        let $PNL_TAX_YEAR           = RTRIM(EDIT(&RUNDB.GPGB_TAX_BGN_YR, '9999'),' ')
        let #PNL_TAX_YEAR           = &RUNDB.GPGB_TAX_BGN_YR
        let $PNL_TAX_PERIOD         = EDIT(#PNL_TAX_PERIOD,'09')
      
FROM  PS_GPGB_RUNCTL_SQR RUNDB
WHERE RUNDB.OPRID           = $Prcs_OprID
AND RUNDB.RUN_CNTL_ID       = $Prcs_Run_Cntl_ID
end-SELECT

#debug Show 'GET-VALUES <- ' 
end-procedure GET-VALUES

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure MAIN-REPORT
#debug show 'MAIN-REPORT -> ' 
            
        do SELECT-EMPLOYEES
        do UPDATE-PRCS-RUN-STATUS
        
        
#debug show 'MAIN-REPORT <- ' 
end-procedure MAIN-REPORT


!*=================================================================
! Procedure:  START-NEW-PAGE                                      !
! Descr:      New page each time the Emplid changes               !
!                                                                 !
!*=================================================================
begin-procedure START-NEW-PAGE($SELECTED_EMPLOYEE)
#debug show 'START-NEW-PAGE -> ' 

        if $_PRINTB = 'Y'
                do PRINT-TOTALS
                NEW-PAGE
        end-if
        
#debug show 'START-NEW-PAGE <- ' 
end-procedure START-NEW-PAGE
!*=================================================================
! Procedure:  START-NEW-PAGE                                      !
! Descr:      New page each time the Emplid changes               !
!                                                                 !
!*=================================================================

begin-procedure SELECT-EMPLOYEES
#debug Show 'SELECT-EMPLOYEES -> ' 

        let $Q                  = ''''

        let $WHERE_STATEMENT    = 'WHERE GER.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR
        let $FREQ_WHERE         = ' AND GER.FREQUENCY_ID = '''
                                  || $PNL_FREQUENCY_ID || $Q
        let $PERIOD_WHERE       = ' AND GER.GPGB_TAX_PERIOD = '
                                  || $PNL_TAX_PERIOD
        let $CALENDER_WHERE     = ' AND GER.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q
        let $DEPTID_WHERE       = ' AND B.DEPTID = '''
                                  || $PNL_DEPTID || $Q
        let $PAY_ENTITY_WHERE   = ' AND GER.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q
        let $EMPLID_WHERE       = ' AND GER.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        let $PAYGROUP_WHERE     = ' AND GER.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q

        move $PNL_TAX_PERIOD    TO   #TAX_PERIOD

        if  #TAX_PERIOD <> 00
                let $WHERE_STATEMENT= $WHERE_STATEMENT
                                      || $PERIOD_WHERE
        end-if

        Evaluate ''
        when <> $PNL_FREQUENCY_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $FREQ_WHERE
        when <> $PNL_CAL_RUN_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $CALENDER_WHERE
        when <> $PNL_DEPTID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $DEPTID_WHERE
                break
        when <> $PNL_PAY_ENTITY
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAY_ENTITY_WHERE

        when <> $PNL_EMPLID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $EMPLID_WHERE
                break
        when <> $PNL_PAYGROUP
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAYGROUP_WHERE
                break
        end-Evaluate

  

        let $W_Pay_entity = ' '
        let $W_Sel_EmplID = ' '
        
!-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

begin-SELECT

GER.EMPLID              &GER.EMPLID       () on-break print=never level=1 !NEW PAGE IS ONLY CALLED FROM LEVEL 2 AS LEVEL 1 CALLS LEVEL 2 ON EACH BREAK ANYWAY.
GER.PAY_ENTITY          &GER.PAY_ENTITY   () on-break print=never after=START-NEW-PAGE($SELECTED_EMPLOYEE) level=2
GER.CAL_RUN_ID
GER.GP_PAYGROUP
GER.GPGB_TAX_BGN_YR
GER.HIRE_DT             &LAST_HIRE_DT  () on-break print=never level=1
GER.LEAVE_DT            &LEAVE_DT
GER.EMPL_RCD            &GER.EMPL_RCD  
GER.TAX_CODE_UK         &GER.TAX_CODE_UK  
GER.TAX_BASIS_UK        &GER.TAX_BASIS_UK
GER.BIRTHDATE           &GER.BIRTHDATE 
GER.LAST_NAME           &GER.LAST_NAME
GER.FIRST_NAME          &GER.FIRST_NAME
GER.HIRE_DT             &GER.HIRE_DT 
GER.LEAVE_DT            &GER.LEAVE_DT
GER.NATIONAL_ID         &GER.NATIONAL_ID 
GER.GPGB_TAX_PERIOD     &GER.GPGB_TAX_PERIOD   
GER.FREQUENCY_ID        &GER.FREQUENCY_ID      
GER.GPGB_EE_GROSS       &GER.GPGB_EE_GROSS     
GER.GPGB_EE_GROSS_PTD   &GER.GPGB_EE_GROSS_PTD 
GER.GPGB_EE_TC          &GER.GPGB_EE_TC        
GER.GPGB_EE_TAX_PTD     &GER.GPGB_EE_TAX_PTD   
GER.GPGB_EE_TAX         &GER.GPGB_EE_TAX 
GER.GPGB_LEL_VALUE      &GER.GPGB_LEL_VALUE                    
GER.GPGB_LEL_PTD        &GER.GPGB_LEL_PTD        
GER.GPGB_LELET_PTD      &GER.GPGB_LELET_PTD 
GER.GPGB_EE_TC_PTD      &GER.GPGB_EE_TC_PTD 


         let $SELECTED_EMPLOYEE   = RTRIM(&GER.EMPLID, ' ')
         let #SELECTED_TAX_PERIOD = &GER.GPGB_TAX_PERIOD 
         let $SELECTED_FREQUENCY  = &GER.FREQUENCY_ID
         let $MAIN_SEL_PAY_ENTITY = RTRIM(&GER.PAY_ENTITY, ' ')
           
           if $W_Pay_entity <> $MAIN_SEL_PAY_ENTITY
                  do GET-PAY-ENTITY($MAIN_SEL_PAY_ENTITY,$AsOfDate,$PYENT_Descr,$PYENT_Descr,$PYENT_DescrShort,
                  $PYENT_Addr1,$PYENT_Addr2,$PYENT_Addr3,$PYENT_Addr4,$PYENT_City,
                  $PYENT_County,$PYENT_PostCode,$PYENT_Country,$PYENT_NAME,#PYENT_TAXNUM,
                  $PYENT_TAX_DNAME,$PYENT_PAYE_REF,$PYENT_PERMIT_NUM)
                let $W_Pay_entity = $MAIN_SEL_PAY_ENTITY
           end-if
         
         let   $EMPLID             = &GER.EMPLID
         let   $EMPL_RCD           = &GER.EMPL_RCD
         let   $EMPLID_RCD           = RTRIM(&GER.EMPLID,' ')   || '  Empl Rcd#:  ' ||   RTRIM(EDIT(&GER.EMPL_RCD, '999'),' ') 
         let   $TAXCODE            = &GER.TAX_CODE_UK  
         let   #TAX_BASIS          = &GER.TAX_BASIS_UK
         let   $DOB                = DATETOSTR(&GER.BIRTHDATE, 'DD/MM/YYYY')
         let   $FORENAMES          = &GER.FIRST_NAME         
         let   $SURNAME            = &GER.LAST_NAME
         let   $HIRE_DT            = DATETOSTR(&GER.HIRE_DT,  'DD/MM/YYYY')
         let   $TERM_DT            = DATETOSTR(&GER.LEAVE_DT, 'DD/MM/YYYY')
         let   $NI                 = &GER.NATIONAL_ID            
         let   $TAX_PERIOD         = &GER.GPGB_TAX_PERIOD
         show  '$TAX_PERIOD         ' $TAX_PERIOD  
         let #i  =   INSTR($TAX_PERIOD,'.', 1) 
         let   $TAX_PERIOD1        = substr($TAX_PERIOD,1,#i - 1) 
         show '$TAX_PERIOD1        ' $TAX_PERIOD1 
         let #i  =   INSTR($TAX_PERIOD,'.', 1) 
                    show 'i  = ' #i 
         let   $FREQUENCY_ID       = &GER.FREQUENCY_ID 
         let   $GPGB_EE_GROSS      = &GER.GPGB_EE_GROSS 
         let   $GPGB_EE_GROSS_PTD  = &GER.GPGB_EE_GROSS_PTD
         let   $GPGB_EE_TC         = &GER.GPGB_EE_TC
         let   $GPGB_EE_TC_PTD     = &GER.GPGB_EE_TC_PTD
         let   $GPGB_EE_TAX_PTD    = &GER.GPGB_EE_TAX_PTD
         let   $GPGB_EE_TAX        = &GER.GPGB_EE_TAX 
      
         let   #VAL1A              = &GER.GPGB_LEL_VALUE
         let   #VAL1B              = &GER.GPGB_LEL_PTD 
         let   #VAL1C              = &GER.GPGB_LELET_PTD
         
         let   $Period             = $FREQUENCY_ID  || ' '  || $TAX_PERIOD1
         let   #VAL2               = $GPGB_EE_GROSS_PTD  
         let   #VAL3               = $GPGB_EE_GROSS
         let   #VAL7               = $GPGB_EE_TAX_PTD 
       
        
         if  #VAL7  < 0
               let #VAL7           = ABS(TO_NUMBER($GPGB_EE_TAX_PTD)) 
               let  $REFUND        = 'R'
           else
               let $REFUND         = ' '
               let $PRINTB         = 'Y'
        
         end-if  
         
         if(#PNL_TAX_YEAR  < 2006)  
              let #VAL9            = $GPGB_EE_TC_PTD
              let #VAL9Y           = $GPGB_EE_TC
         end-if     
          
          
            
         if #VAL1AY  > 0 AND #VAL1B  > 0 AND  #VAL1C = 0 
               let  $_TAX_CODE = 'NI' 
         end-if 
        
         let #TAX_AC_TXPD_YTD  =  &GER.GPGB_EE_TAX  
         
         if  #TAX_AC_TXPD_YTD  < 0
         let #TAX_AC_TXPD_YTD_TOT  = ABS(#TAX_AC_TXPD_YTD) 
         let  $REFUND_TOT          = 'R'
         else
         let #TAX_AC_TXPD_YTD_TOT  = #TAX_AC_TXPD_YTD
         let $REFUND_TOT           = ' '
         end-if 
         do RETRIEVE-EMPLOYEE-PIN-DATA-11B
         do PRINT-REPORT    
FROM PS_GPGB_EDI_RSLT GER,PS_GPGB_EE_RSLT B
[$Where_statement]
AND GER.RSLT_SEG_NUM = (SELECT MAX(RSLT_SEG_NUM) FROM PS_GPGB_EDI_RSLT A
                    WHERE A.EMPLID = GER.EMPLID
                      AND A.CAL_RUN_ID = GER.CAL_RUN_ID
                      AND A.EMPL_RCD = GER.EMPL_RCD
                      AND A.GP_PAYGROUP = GER.GP_PAYGROUP
                      AND A.CAL_ID = GER.CAL_ID
                      AND A.ORIG_CAL_RUN_ID = GER.ORIG_CAL_RUN_ID
                      AND A.USER_KEY1 = GER.USER_KEY1
                      AND A.USER_KEY2 = GER.USER_KEY2)
AND B.EMPLID=GER.EMPLID 
AND B.EMPL_RCD=GER.EMPL_RCD 
AND B.CAL_RUN_ID=GER.CAL_RUN_ID
AND B.GP_PAYGROUP=GER.GP_PAYGROUP
AND B.CAL_ID=GER.CAL_ID
AND B.ORIG_CAL_RUN_ID=GER.ORIG_CAL_RUN_ID
AND B.RSLT_SEG_NUM=GER.RSLT_SEG_NUM
ORDER BY GER.GPGB_TAX_BGN_YR, GER.EMPLID, GER.EMPL_RCD,GER.HIRE_DT, GER.FREQUENCY_ID, GER.GPGB_TAX_PERIOD,
GER.PAY_ENTITY
end-SELECT
         
#debug Show 'SELECT-EMPLOYEES <- '   
end-procedure SELECT-EMPLOYEES 

!-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
!               RETRIEVE-EMPLOYEE-PIN-DATA-11B
!-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
begin-procedure RETRIEVE-EMPLOYEE-PIN-DATA-11B
#debug Show 'RETRIEVE-EMPLOYEE-PIN-DATA-11B -> '   
  
        let $PRINTB           = 'N'
        let $ACTIVE_IND       = 'N'
        
BEGIN-SELECT
GP.PIN_CODE          &PIN_CODE
GRP.CALC_RSLT_VAL    &CALC_RSLT_VAL
GRP.CHR_PIN_VAL      &CHR_PIN_VAL
GRP.DATE_PIN_VAL     &DATE_PIN_VAL
GRP.EMPLID           &EMPLID
GER2.GPGB_TAX_PERIOD  &TAX_PERIOD
GER2.GP_PAYGROUP      &PAYGROUP
GER2.PAY_ENTITY       &PAY_ENTITY
GER2.FREQUENCY_ID     &FREQUENCY_ID
GER2.GPGB_NI_CATEGORY &NI_CATEGORY
GER2.TAX_CODE_UK      &TAX_CODE
GER2.NATIONAL_ID      &NATIONAL_ID
GPY.DESCR            &DESCR


        let  $_NI              = &NATIONAL_ID
        let $PIN_CODE          = RTRIM(&PIN_CODE,' ')
        let $RSLT              = &CALC_RSLT_VAL
        let $C_PIN_VAL         = &CHR_PIN_VAL
        let $D_PIN_VAL         = &DATE_PIN_VAL
        let $_EMPLID           = &EMPLID
        let $PAY_ENTITY        = &PAY_ENTITY
        let $FREQUENCY_ID      = RTRIM(&FREQUENCY_ID,' ')
        let $TAX_PERIOD        = EDIT(&TAX_PERIOD,'99')
        let $PAYGROUP          = &PAYGROUP
        let $NI_CATEGORY       = RTRIM(&NI_CATEGORY,' ')
    
    evaluate $PIN_CODE
        when = 'TAX VR FREEPAY GBR'
                let #TAX_FREEPAY = TO_NUMBER($RSLT)
                let $PRINTB = 'Y'
                break
        when = 'TAX FM STAGE3 GBR'
                let #VAL6 = TO_NUMBER($RSLT)
                let $PRINTB = 'Y'
                break
        when = 'TAX VR ORL RSLT GBR'
                let #VAL6B = TO_NUMBER($RSLT)
                let $PRINTB = 'Y'
                break
        when = 'TAX VR KTXND GBR'
                let #VAL8 = TO_NUMBER($RSLT)
                let $PRINTB = 'Y'
                break
        when = 'TAX VR WK53IND GBR'
                let $VR_WK53 = RTRIM($C_PIN_VAL,' ')
                break
        when = 'TC VR TERM START GBR'
                let $TERMSTDT = DATETOSTR(&DATE_PIN_VAL, 'DD/MM/YYYY')
                break
        when = 'TC VR TC01 AMT GBR'
                let #TC01_AMT = TO_NUMBER($RSLT)
                break
        when = 'TC VR ACTIVE IND GBR'
                let $ACTIVE_IND = RTRIM($C_PIN_VAL,' ')
                break
        when = 'TAX VR CD ALPHA GBR'
                let $TAX_CD_ALPHA = RTRIM($C_PIN_VAL,' ')
                break
    end-evaluate

FROM PS_GP_PIN GP,
PS_GPGB_EE_RSLT GER2,
PS_GP_RSLT_PIN GRP,
PS_GP_PYENT GPY,
PS_GP_PYE_PRC_STAT GPPS
WHERE GP.PIN_NUM         = GRP.PIN_NUM
AND GRP.EMPLID           = GER2.EMPLID
AND GRP.CAL_RUN_ID       = GER2.CAL_RUN_ID
AND GRP.EMPL_RCD         = GER2.EMPL_RCD
AND GRP.GP_PAYGROUP      = GER2.GP_PAYGROUP
AND GRP.CAL_ID           = GER2.CAL_ID
AND GRP.RSLT_SEG_NUM     = GER2.RSLT_SEG_NUM
AND GER2.EMPLID           = $SELECTED_EMPLOYEE
AND GER2.GPGB_TAX_PERIOD  = #SELECTED_TAX_PERIOD
AND GER2.FREQUENCY_ID     = $SELECTED_FREQUENCY
AND GER2.GPGB_TAX_BGN_YR  = #Pnl_Tax_Year
AND GPY.PAY_ENTITY       = GER2.PAY_ENTITY
AND GPPS.EMPLID          = GER2.EMPLID
AND GPPS.CAL_RUN_ID      = GER2.CAL_RUN_ID
AND GPPS.EMPL_RCD        = GER2.EMPL_RCD
AND GPPS.CAL_ID          = GER2.CAL_ID
AND GPPS.GP_PAYGROUP     = GER2.GP_PAYGROUP
AND GPPS.CALC_TYPE       = 'P'
AND GPPS.RSLT_VER_NUM    = (SELECT MAX (X.RSLT_VER_NUM) FROM PS_GP_PYE_PRC_STAT X
                                WHERE GPPS.EMPLID       = X.EMPLID
                                AND GPPS.EMPL_RCD       = X.EMPL_RCD
                                AND GPPS.CAL_ID         = X.CAL_ID
                                AND GPPS.GP_PAYGROUP    = X.GP_PAYGROUP
                                AND GPPS.CALC_TYPE      = X.CALC_TYPE)
AND GPPS.RSLT_REV_NUM    = (SELECT MIN (X.RSLT_REV_NUM) FROM PS_GP_PYE_PRC_STAT X
                                WHERE GPPS.EMPLID       = X.EMPLID
                                AND GPPS.EMPL_RCD       = X.EMPL_RCD
                                AND GPPS.CAL_ID         = X.CAL_ID
                                AND GPPS.GP_PAYGROUP    = X.GP_PAYGROUP
                                AND GPPS.CALC_TYPE      = X.CALC_TYPE)
AND GP.PIN_CODE IN ('TAX VR FREEPAY GBR',
                    'TAX FM STAGE3 GBR',
                    'TAX VR ORL RSLT GBR',
                    'TAX VR KTXND GBR',
                    'TAX VR WK53IND GBR',
                    'TC VR TERM START GBR',
                    'TC VR TC01 AMT GBR',
                    'TC VR ACTIVE IND GBR',
                    'TAX VR CD ALPHA GBR')
ORDER BY GRP.EMPLID, GER2.FREQUENCY_ID, GER2.GPGB_TAX_PERIOD
end-SELECT

#debug Show ' RETRIEVE-EMPLOYEE-PIN-DATA-11B <- '
end-procedure RETRIEVE-EMPLOYEE-PIN-DATA-11B


!*=================================================================
! Procedure: PRINT TOTALS                                         !
! Descr:     Prints Employee's Totals                             !
!                                                                 !
!*=================================================================
     
begin-procedure PRINT-TOTALS
#debug show 'PRINT-TOTALS -> '       

        graphic                     (+1,1,177) horz-line
        print 'Year To Date'        (+2,{PosFreq/Period})
        print #VAL3                 (,{Pos3})      edit 9,999,999.99
        print #VAL4A                (,{Pos4A})     edit B,999,999.99
        print #VAL4B                (,{Pos4B})     edit B,999,999.99
        print #VAL5                 (,{Pos5})      edit B,999,999.99
        print #VAL6                 (,{Pos6})      edit B,999,999.99
        print #VAL6A                (,{Pos6A})     edit B,999,999.99
        print #VAL6B                (,{Pos6B})     edit B,999,999.99
        print #TAX_AC_TXPD_YTD_TOT  (,{Pos7})      edit B99,999.99
        print $REFUND_TOT           (,{PosRefund})
        print #VAL8                 (,{Pos8})      edit B,999,999.99
        if(#PNL_TAX_YEAR  < 2006) 
        print #VAL9Y                (,{Pos9})     edit 9,999,999.99
        end-if
        graphic                     (+1,1,177) horz-line

               do RESET-VALUES
        
#debug show 'PRINT-TOTALS  <- '       
end-procedure PRINT-TOTALS

!*=================================================================
! Procedure: PRINT-REPORT                                         !
! Descr:     Prints Employee information                          !
!                                                                 !
!*=================================================================

begin-procedure PRINT-REPORT    
#debug show 'PRINT-REPORT -> '   

      if $PRINTB = 'Y'

        let $NIL = 'NIL'
                      
                   print $PERIOD           (+1,{PosFreq/Period})
                   print #VAL2             (,{Pos2})      edit 9,999,999.99
                   if(#PNL_TAX_YEAR  < 2006) 
                      print #VAL9             (,{Pos9})      edit 9,999,999.99
                   end-if

        Evaluate $TAX_CD_ALPHA
       
        when     = 'NT'

                   print #VAL3            (,{Pos3})      edit B,999,999.99

                   let #VAL4A = 0
                   print #VAL4A           (,{Pos4A})     edit B,999,999.99

                   let #VAL4B = 0
                   print #VAL4B           (,{Pos4B})     edit B,999,999.99

                   let #VAL5  = 0
                   print #VAL5            (,{Pos5})      edit B,999,999.99

                   let #VAL6  = 0
                   print #VAL6            (,{Pos6})      edit B,999,999.99

                   let #VAL6A = 0
                   print #VAL6A           (,{Pos6A})     edit B,999,999.99

                   let #VAL6B = 0
                   print #VAL6B           (,{Pos6B})     edit B,999,999.99

                   let #VAL7 = 0
                   print #VAL7            (,{Pos7})      edit B99,999.99

                   print $REFUND          (,{PosRefund})

                   let #VAL8  = 0
                   print #VAL8            (,{Pos8})      edit B,999,999.99

                break

        when = 'D0'

                   let #VAL3 = 0
                   print #VAL3            (,{Pos3})      edit B,999,999.99

                   print $NIL             (,{PosHead4A})

                   let #VAL4B = 0
                   print #VAL4B           (,{Pos4B})     edit B,999,999.99

                   let #VAL5  = #VAL2
                   print #VAL5            (,{Pos5})      edit 9,999,999.99

                   let #VAL6  = 0
                   print #VAL6            (,{Pos6})      edit B,999,999.99

                   let #VAL6A = 0
                   print #VAL6A           (,{Pos6A})     edit B,999,999.99

                   let #VAL6B = 0
                   print #VAL6B           (,{Pos6B})     edit B,999,999.99

                   print #VAL7            (,{Pos7})      edit 999,999.99

                   print $REFUND          (,{PosRefund})

                   let #VAL8  = 0
                   print #VAL8            (,{Pos8})      edit B,999,999.99

                break

        when = 'K'

                if #TAX_BASIS = 1

                   let #VAL3  = 0
                   print #VAL3            (,{Pos3})      edit B,999,999.99

                   let #VAL4A = 0
                   print #VAL4A           (,{Pos4A})     edit B,999,999.99

                   let #VAL4B = ABS(#TAX_FREEPAY)
                   print #VAL4B           (,{Pos4B})     edit 9,999,999.99

                   let #VAL5  = #VAL2 + #VAL4B
                   print #VAL5            (,{Pos5})      edit 9,999,999.99

                   let #VAL6  = 0
                   print #VAL6            (,{Pos6})      edit B,999,999.99

                   let #VAL6A = #VAL6B + #VAL8
                   print #VAL6A           (,{Pos6A})     edit 9,999,999.99

                   print #VAL6B           (,{Pos6B})     edit 9,999,999.99

                   print #VAL7            (,{Pos7})      edit 999,999.99

                   print $REFUND          (,{PosRefund})

                   print #VAL8            (,{Pos8})      edit 9,999,999.99

                else

                   print #VAL3            (,{Pos3})      edit 9,999,999.99

                   let #VAL4A = 0
                   print #VAL4A           (,{Pos4A})     edit B,999,999.99

                   let #VAL4B = ABS(#TAX_FREEPAY)
                   print #VAL4B           (,{Pos4B})     edit 9,999,999.99

                   let #VAL5  = #VAL3 - #TAX_FREEPAY
                   print #VAL5            (,{Pos5})      edit 9,999,999.99

                   let #VAL6  = #TAX_AC_TXPD_YTD + #VAL8
                   print #VAL6            (,{Pos6})      edit 9,999,999.99

                   let #VAL6A = #VAL6B + #VAL8
                   print #VAL6A           (,{Pos6A})     edit 9,999,999.99

                   print #VAL6B           (,{Pos6B})     edit 9,999,999.99

                   print #VAL7            (,{Pos7})      edit 999,999.99

                   print $REFUND          (,{PosRefund})

                   print #VAL8            (,{Pos8})      edit B,999,999.99

                end-if
                break

          when-other 
                     
                if #TAX_BASIS = 1
                     
                      let #VAL3  = 0
                      print #VAL3            (,{Pos3})      edit B,999,999.99

                   if $TAX_CD_ALPHA = 'BR'
                      print $NIL             (,{PosHead4A})
                   else
                      let #VAL4A = #TAX_FREEPAY
                      print #VAL4A           (,{Pos4A})     edit 9,999,999.99
                   end-if

                   let #VAL4B = 0
                   print #VAL4B           (,{Pos4B})        edit B,999,999.99


                   if #VAL4A > #VAL2
                      let #VAL5 = 0
                      print #VAL5            (,{Pos5})      edit B,999,999.99
                   else
                      let #VAL5  = #VAL2 - #VAL4A
                      print #VAL5            (,{Pos5})      edit 9,999,999.99
                   end-if

                   let #VAL6  = 0
                   print #VAL6            (,{Pos6})      edit B,999,999.99

                   
                   let #VAL6A = 0
                   print #VAL6A           (,{Pos6A})     edit B,999,999.99

                   let #VAL6B = 0
                   print #VAL6B           (,{Pos6B})     edit B,999,999.99


                   print #VAL7            (,{Pos7})      edit 999,999.99

                   print $REFUND          (,{PosRefund})

                   let #VAL8  = 0
                   print #VAL8            (,{Pos8})      edit B,999,999.99


                else

                   print #VAL3            (,{Pos3})      edit 9,999,999.99

                   if $TAX_CD_ALPHA = 'BR'
                      print $NIL           (,{PosHead4A})
                   else
                      let #VAL4A = #TAX_FREEPAY
                      print #VAL4A           (,{Pos4A})     edit 9,999,999.99
                   end-if

                   let #VAL4B = 0
                   print #VAL4B           (,{Pos4B})        edit B,999,999.99

                   let #VAL5  = #VAL3 - #VAL4A
                   if #VAL5 < 0
                      let #VAL5 = 0
                      print #VAL5            (,{Pos5})      edit B,999,999.99
                   else
                      print #VAL5            (,{Pos5})      edit 9,999,999.99
                   end-if
                     
                   if #VAL5 = 0
                      let #VAL6 = 0
                      print $NIL           (,{PosHead6})
                   else
                      let #VAL6 = #TAX_AC_TXPD_YTD
                      print #VAL6            (,{Pos6})      edit 9,999,999.99
                   end-if

                   let #VAL6A = 0
                   print #VAL6A           (,{Pos6A})        edit B,999,999.99

                   let #VAL6B = 0
                   print #VAL6B           (,{Pos6B})        edit B,999,999.99


                   print #VAL7            (,{Pos7})         edit 999,999.99

                   print $REFUND          (,{PosRefund})

                   let #VAL8  = 0
                   print #VAL8            (,{Pos8})         edit B,999,999.99


                end-if
                break

         end-Evaluate

        end-if
        
#debug show 'PRINT-REPORT <- ' 
end-procedure PRINT-REPORT

!*=================================================================
! Procedure: RESET VALUES                                         !
! Descr:     Resets Calculated Values                             !
!                                                                 !
!*=================================================================
begin-procedure RESET-VALUES
#debug show 'RESET-VALUES -> ' 

        let #VAL2  = 0
        let #VAL3  = 0
        let #VAL4A = 0
        let #VAL4B = 0
        let #VAL5  = 0
        let #VAL6  = 0
        let #VAL6A = 0
        let #VAL6B = 0
        let #VAL7  = 0
        let #VAL8  = 0
        let #VAL9  = 0
        let #VAL9Y = 0
        let $REFUND = ' '
      
#debug Show 'RESET-VALUES <- ' 
end-procedure RESET-VALUES

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************

!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure ERROR-SQL
#debug Show 'Procedure Name -> ' $ProcedureName 
        add 1 to #CountError

        show 'SQL Error -> ' $ProcedureName
        show 'SQL Error -> ' $ErrorMessage
        show 'SQL Error -> ' $SQL-ERROR

        stop
#debug Show 'Procedure Name <- ' $ProcedureName 
end-procedure ERROR-SQL

!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'     ! Reset printer procedure
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declaration
#include 'readxlat.sqc'  ! Read Translate Table
#include 'datemath.sqc'   
#include 'gpgbut01.sqc'  ! Pay entity and ee address
#include 'gpgbut02.sqc'  ! Log file 
!******************************* End Of Program *******************

