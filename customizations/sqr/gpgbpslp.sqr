!***********************************************************************
!  GPGBPSLP.SQR - Payslip for GP UK                                    *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  31128815                                            !
!                                                                      *
!***********************************************************************
!  Date         Modification                                           *
!  ----         ------------                                           *
!  04/09/01     8.90 Report for Printed Payslips                       *
!  11/07/02     Changes to frequency field selection and print location*
!  04/08/03     Change all references from PERSONAL_DT_FST to          *
!               PERSON_NAME                                            *
!  28/07/04     Inclusion of the ePay functionalities                  *
!  20/09/04     Fix included for Unix error when PSLP_SOURCEFILE is    *
!               Upper case...the AE ePay copy command failed.          *
!  05/10/04     GP_PSLP_ID insert updated to include Empl_Rcd and      *
!  05/10/04     GP_PSLP_ID insert updated to include Empl_Rcd and      *
!               Segment Number                                         *
!  0410/2008    ice-1746220004 modified procedure procedure BAL
!***********************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization


!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables
#define PageLength              177
#define PosNumPage              160

#define SPACE                   ' '

#define Col1                    2
#define Col2                    22
#define Col3                    29
#define Col4                    47
#define Col5                    53
#define Col6                    63
#define Col7                    64
#define Col8                    73
#define Col9                    83
#define Col10                   93
#define Col11                   97
#define Col12                   105
#define Col13                   117
#define Col14                   120


!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-procedure header

        ! new-page
        print 'Pay Advice  '                    (+1,{Col1})  bold
        print $Correct                          (  ,{Col7})  bold Shade
        print $NAME                             (+2,{Col1})  bold
        print 'Period Start:'                   (  ,{Col4})  bold
        print $SEGBDT_NEW                       (  ,{Col7})
        print 'Payment Date:'                   (  ,{Col12}) bold
        print $PNL_PYMT_DT_NEW                  (  ,{Col14})
        print $COMPANY                          (+1,{Col1})  bold
        print 'Period End:'                     (  ,{Col4})  bold
        print $SEGEDT_NEW                       (  ,{Col7})
        print 'Tax Period:'                     (  ,{Col12}) bold
        print #PERIOD                           (  ,{Col14}) edit 99
              graphic                           (+1,1,38)    horz-line
              graphic                           (  ,46,45)   horz-line
              graphic                           (  ,95,39)   horz-line

        print $NAME                             (+1,{Col1})  bold
        print 'Employee ID:'                    (  ,{Col4})  bold
        print $EMPLID                           (  ,{Col7})
        print 'Job Title:'                      (  ,{Col11}) bold
        print $JOB                              (  ,{Col13})

        print $ADD1                             (+1,{Col1})
        print 'Empl Rcd#:'                      (  ,{Col4})  bold
        print #ERCD                             (  ,{Col7})  edit 099
        print 'Tax Code:'                       (  ,{Col11}) bold
        print $TCODE                            (  ,{Col13})

        print $ADD2                             (+1,{Col1})
        print 'Empl Reference#:'                (  ,{Col4})  bold
        print &empl_ref_nbr                     (  ,{Col7})
        print 'Tax Basis:'                      (  ,{Col11}) bold
        print $TAX_BASIS                        (  ,{Col13})

        print $ADD3                             (+1,{Col1})
        print 'Department:'                     (  ,{Col4})  bold
        print $DEPARTMENT                       (  ,{Col7})
        print 'NI Category Code:'               (  ,{Col11}) bold
        print $CAT                              (  ,{Col13})

        print $ADD4                             (+1,{Col1})
        print 'Location:'                       (  ,{Col4})  bold
        print $LOCATION                         (  ,{Col7})


        print $COUNTY                           (+1,{Col1})
        print 'Business Unit:'                  (  ,{Col4})  bold
        print $BUSINESS                         (  ,{Col7})
        
        print $POST                             (+1,{Col1})

        print 'NI Number:'                      (+1,{Col1})  bold
        print $NI                               (  ,{Col2})
              graphic                           (+1,1,38)    horz-line
              graphic                           (  ,46,45)   horz-line
              graphic                           (  ,95,39)   horz-line

        print 'Bank Sort Code:'                 (+1,{Col1})  bold
        print $BSORT                            (  ,{Col2})
        print 'Pay Rate:'                       (  ,{Col4})  bold
        print #COMP                             (  ,{Col7})
        print $FREQ                             (  ,75)
        print 'Net:'                            (  ,{Col11}) bold
        print #NET                              (  ,{Col13})

        print 'Account Number:'                 (+1,{Col1})  bold
        PRINT $BACC                             (  ,{Col2})
        print 'Gross:'                          (  ,{Col11}) bold
        print #GROSS                            (  ,{Col13})
              graphic                           (  ,1,38)    horz-line
              graphic                           (  ,46,45)   horz-line
              graphic                           (  ,95,39)   horz-line

end-procedure


!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report
        do check-mob-custom-enabled
        do INIT-REPORT
        do Stdapi-Init
        do Get_Run_Cntl
        do MAIN-REPORT
        do GP-ePay-Control     ! if ePay installed have a control row inserted.
        do Stdapi-Term
        do Get_Run_Cntl_DATA_FOR_LOG
        do Get-Log
        do insert_mpslp_data


        
end-report



!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT
#debug show ' Procedure Name -> INIT-REPORT'

        
        let $ReportID    = 'GPGBPSLP.SQR'
        let $ReportTitle = 'Printed Payslip'

        do INIT-DATETIME
        do INIT-NUMBER
        do GET-CURRENT-DATETIME

#debug show ' Procedure Name <- INIT-REPORT'
end-procedure INIT-REPORT




!*=================================================================
! Procedure     :Get_Run_Cntl
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure Get_Run_Cntl
#debug show ' Procedure Name -> Get_Run_Cntl'

begin-SELECT                     !SELECTS THE DATA FROM THE PANEL
RUNDA.CAL_RUN_ID
!RUNDB.PYMT_DT
!RUNDB.GP_PAYGROUP
!RUNDB.CAL_ID

        LET $PNL_CAL_RUN_ID1         = RTRIM(&RUNDA.CAL_RUN_ID,' ')
        !LET $PNL_PYMT_DT1            = RTRIM(&RUNDB.PYMT_DT, ' ')
        !do Format-Datetime($PNL_PYMT_DT1, $PNL_PYMT_DT_NEW1, {DEFDMY}, '', '')
       ! LET $PNL_PYGRP1              = RTRIM(&RUNDB.GP_PAYGROUP,' ')
        !LET $PNL_CAL_ID1             = RTRIM(&RUNDB.CAL_ID,' ')

        !Mobile Payslip - Sample Test Start
        If $custEnabled = 'Y'
            do init-mpslp($PNL_CAL_RUN_ID1)     
            LET $GPwhere_clause = ' '               
            do clean_mpslp_records ($PNL_CAL_RUN_ID1, $GPwhere_clause)
        End-If
        !Mobile Payslip - Sample Test End       
        
FROM  PS_GPGB_PSLIP RUNDA
!PS_GP_CAL_DTL_VW RUNDB
WHERE RUNDA.OPRID        = $Prcs_OprID
AND RUNDA.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
!AND RUNDA.CAL_RUN_ID     = RUNDB.CAL_RUN_ID

end-SELECT
     

#debug show ' Procedure Name <- Get_Run_Cntl'
end-procedure Get_Run_Cntl


!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************


!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure MAIN-REPORT
#debug show ' Procedure Name -> MAIN-REPORT'

        do RESET-MAIN-VARIABLES

  If $prcs_process_instance = ''
!     no prompt
  else
     do GP-ePay-Init ! Initialize ePay variables
  End-If

BEGIN-SELECT
PU.GPGB_TAX_PERIOD                                &PERIOD
PU.COMPANY                                        &COY
PU.NATIONAL_ID                                    &NI
PU.ADDRESS1                                       &ADD1
PU.ADDRESS2                                       &ADD2
PU.ADDRESS3                                       &ADD3
PU.ADDRESS4                                       &ADD4
PU.COUNTY                                         &COUNTY
PU.POSTAL                                         &POST
PU.EMPLID                                         &EMPLID
PU.EMPL_RCD                                       &ERCD
{DATEOUT-PREFIX}PU.SEG_BGN_DT{DATEOUT-SUFFIX}     &SEGBDT
{DATEOUT-PREFIX}PU.SEG_END_DT{DATEOUT-SUFFIX}     &SEGEDT
PU.RSLT_SEG_NUM                                   &RSEGNM
PU.DEPTID                                         &DEPTID
PU.LOCATION                                       &LOC
PU.BUSINESS_UNIT                                  &BUS
PU.JOBCODE                                        &JCODE
PU.PIN_NET_VAL                                    &NET
PU.PIN_GROSS_VAL                                  &GROSS
PU.COMPRATE                                       &COMP
PU.COMP_FREQUENCY                                 &FREQ
PU.TAX_BASIS_UK                                   &BASIS
PU.TAX_CODE_UK                                    &TCODE
PU.GPGB_NI_CATEGORY                               &CAT
PS.FIRST_NAME                                     &FNAME
PS.LAST_NAME                                      &LNAME
PU.SEL_ACTION                                     &SEL_ACTION
PU.CAL_RUN_ID                                     &PNL_CAL_RUN_ID
PU.GP_PAYGROUP                                    &PNL_PYGRP
PU.CAL_ID                                         &PNL_CAL_ID
PRC.PYMT_DT                                       &PRCPYMT_DT

          
          let $PNL_CAL_RUN_ID = rtrim(&PNL_CAL_RUN_ID,' ')
          let $PNL_PYGRP      = rtrim(&PNL_PYGRP,' ')
          let $PNL_CAL_ID     = rtrim(&PNL_CAL_ID,' ')
        LET $PRCPYMT_DT = RTRIM(&PRCPYMT_DT, ' ')
        LET $SEGEDT = RTRIM(&SEGEDT, ' ')
       do Format-Datetime($PRCPYMT_DT, $PNL_PYMT_DT_NEW, {DEFDMY}, '', '')
       

          
       LET $SEL_ACTION       = RTRIM(&SEL_ACTION, ' ')
              
       IF $SEL_ACTION <> 'C'
          LET $Correct = 'Corrected'
        else
          LET $Correct = ''
       END-IF
       

       LET #PER    = &PERIOD
       LET #PERIOD = EDIT(#PER,'09')
       LET $COY    = RTRIM(&COY, ' ')
       LET $NI     = &NI
       LET $ADD1   = RTRIM(&ADD1, ' ')
       LET $ADD2   = RTRIM(&ADD2, ' ')
       LET $ADD3   = RTRIM(&ADD3, ' ')
       LET $ADD4   = RTRIM(&ADD4, ' ')
       LET $COUNTY = RTRIM(&COUNTY, ' ')
       LET $POST   = RTRIM(&POST, ' ')
       LET $EMPLID = RTRIM(&EMPLID, ' ')
       LET #ERCD   = &ERCD
       LET $ERCD   = TO_CHAR(#ERCD)

       LET $SEGBDT = RTRIM(&SEGBDT, ' ')
       do Format-Datetime($SEGBDT, $SEGBDT_NEW, {DEFDMY}, '', '')

       LET $SEGEDT = RTRIM(&SEGEDT, ' ')
       do Format-Datetime($SEGEDT, $SEGEDT_NEW, {DEFDMY}, '', '')
       
       ! let $PNL_PYMT_DT_NEW = $SEGEDT_NEW
       
       LET #RSEGNM = &RSEGNM
       LET $RSEGNM = TO_CHAR(#RSEGNM)
       LET $DEPTID = RTRIM(&DEPTID, ' ')
       LET $LOC    = RTRIM(&LOC, ' ')
       LET $BUS    = RTRIM(&BUS, ' ')
       LET $JCODE  = RTRIM(&JCODE, ' ')
       LET #NET    = &NET
       LET #GROSS  = &GROSS
       LET #COMP   = &COMP
       LET $FREQ   = RTRIM(&FREQ, ' ')

       LET $BASIS  = RTRIM(&BASIS, ' ')
           IF $BASIS = '0'
              LET $TAX_BASIS = 'Cumulative'
           ELSE
              LET $TAX_BASIS = 'Wk1/Month1'
           END-IF

       LET $TCODE  = RTRIM(&TCODE, ' ')
       IF isblank($TCODE)
          LET $TCODE = '0T'
       END-IF

       LET $CAT    = RTRIM(&CAT, ' ')
       LET $FNAME  = RTRIM(&FNAME, ' ')
       LET $LNAME  = RTRIM(&LNAME, ' ')
       LET $NAME   = $FNAME||' '||$LNAME

       do CODES
       do BANK-DET
       do EMPL-REF-NBR
       do PRINT-PAYSLIP
       do GP-ePay-Guide   ! if ePay installed write Guide data for each payslip

       new-page

FROM  PS_GPGB_PSLIP_PU_H PU,
            PS_PERSON_NAME PS,
      PS_GP_PYE_PRC_STAT PRC 
WHERE PU.EMPLID    = PS.EMPLID
AND PU.CAL_RUN_ID     = $PNL_CAL_RUN_ID1
AND PU.RSLT_REV_NUM  <= 1
AND PU.EMPLID=PRC.EMPLID
AND PU.EMPL_RCD=PRC.EMPL_RCD
AND PU.CAL_RUN_ID=PRC.CAL_RUN_ID
AND PU.GP_PAYGROUP=PRC.GP_PAYGROUP
AND PU.CAL_ID=PRC.CAL_ID
AND  PRC.RSLT_REV_NUM  <= 1

 ! AND PU.GP_PAYGROUP    = $PNL_PYGRP1
 ! AND PU.CAL_ID         = $PNL_CAL_ID1
ORDER BY PU.EMPLID,PU.EMPL_RCD,PU.CAL_RUN_ID,PU.CAL_ID

END-SELECT

#debug show ' Procedure Name <- MAIN-REPORT'
end-procedure MAIN-REPORT



!*=================================================================
! Procedure     : CODES                                           !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure CODES
#debug show ' Procedure Name -> CODES'

        do RESET-CODE-VARIABLES

BEGIN-SELECT
A.DESCR                             &COMPANY
B.DESCR                             &LOCATION
C.DESCR                             &DEPARTMENT
D.DESCR                             &BUSINESS
E.DESCR                             &JOB

           LET $COMPANY    = RTRIM(&COMPANY, ' ')
           LET $LOCATION   = RTRIM(&LOCATION, ' ')
           LET $DEPARTMENT = RTRIM(&DEPARTMENT, ' ')
           LET $BUSINESS   = RTRIM(&BUSINESS, ' ')
           LET $JOB        = RTRIM(&JOB, ' ')

FROM PS_COMPANY_TBL A,
     PS_LOCATION_TBL B,
     PS_DEPT_TBL C,
     PS_BUS_UNIT_TBL_HR D,
     PS_JOBCODE_TBL E


WHERE A.COMPANY       = $COY
  AND B.LOCATION      = $LOC
  AND C.DEPTID        = $DEPTID
  AND D.BUSINESS_UNIT = $BUS
  AND E.JOBCODE       = $JCODE
  AND A.COMPANY       = C.COMPANY
  AND C.SETID         = D.DEFAULT_SETID
  AND D.DEFAULT_SETID = E.SETID


END-SELECT

#debug show ' Procedure Name <- CODES'
end-procedure CODES



!*=================================================================
! Procedure: BANK-DET                                             !
! Descr:     Get Bank Details                                     !
!                                                                 !
!*=================================================================

begin-procedure BANK-DET
#debug show ' Procedure Name -> BANK-DET'

BEGIN-SELECT
GPGB_PSLIP_BSORT        &BSORT
GPGB_PSLIP_BACC         &BACC

       LET $BSORT = &BSORT
       LET $BACC  = &BACC

FROM PS_GPGB_PSLIP_P_HR
WHERE EMPLID        = $EMPLID
  AND CAL_RUN_ID    = $PNL_CAL_RUN_ID
  AND EMPL_RCD      = #ERCD
  AND CAL_ID        = $PNL_CAL_ID
  AND GP_PAYGROUP   = $PNL_PYGRP
  AND RSLT_SEG_NUM  = #RSEGNM


END-SELECT

#debug show ' Procedure Name <- BANK-DET'
end-procedure BANK-DET

!*=================================================================
! Procedure: EMPL-REF-NBR                                         !
! Descr:     Get Employement Reference Number                     !
!                                                                 !
!*=================================================================

begin-procedure EMPL-REF-NBR
#debug show ' Procedure Name -> EMPL-REF-NBR'

BEGIN-SELECT
GPGB_RTI_EMPMT_NBR         &empl_ref_nbr

FROM PS_GPGB_RTI_EMPMAP EMAP 
WHERE EMAP.EMPLID = $EMPLID
   AND EMAP.EMPL_RCD = #ERCD
   AND EMAP.EFFDT = (SELECT Max(EFFDT) FROM PS_GPGB_RTI_EMPMAP E_EMAP 
                     WHERE E_EMAP.EMPLID = EMAP.EMPLID
                     AND E_EMAP.EMPL_RCD = EMAP.EMPL_RCD
                     AND E_EMAP.EFFDT <= &PRCPYMT_DT)
   AND EMAP.EFFSEQ = (SELECT Max(EFFSEQ) FROM PS_GPGB_RTI_EMPMAP ES_EMAP 
                     WHERE ES_EMAP.EMPLID = EMAP.EMPLID
                     AND ES_EMAP.EMPL_RCD = EMAP.EMPL_RCD
                     AND ES_EMAP.EFFDT <= EMAP.EFFDT)
                  
END-SELECT

#debug show ' Procedure Name <- EMPL-REF-NBR'
end-procedure EMPL-REF-NBR

!*=================================================================
! Procedure: PRINT-PAYSLIP                                        !
! Descr:     Prints Payslips                                      !
!                                                                 !
!*=================================================================

begin-procedure PRINT-PAYSLIP
#debug show ' Procedure Name -> PRINT-PAYSLIP'


    do header
        do EARNINGS
        do BEFORE-TAX
        do AFTER-TAX
        do NI
        do NI_PREV
        do TAX
        do BAL
        do PAY-MSG
        do EMP-MSG


        LET $EmployeePrinting = 'PRINT-PAYSLIP for '||$EMPLID || ' Record ' || $ERCD || ' Segment Number ' || $RSEGNM
        
#debug show ' Procedure Name <- PRINT-PAYSLIP'
end-procedure PRINT-PAYSLIP


!*=================================================================
! Procedure: EARNINGS                                             !
! Descr:     Prints Earnings                                      !
!                                                                 !
!*=================================================================

begin-procedure EARNINGS
#debug show ' Procedure Name -> EARNINGS'

        print 'EARNINGS'                        (+1,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Detail'                          (  ,{Col3})  Bold
        print 'Units'                           (  ,{Col5})  Bold
        print 'Rate'                            (  ,{Col6})  Bold
        print 'Base'                            (  ,{Col8})  Bold
        print 'Percent'                         (  ,{Col9})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Current'                         (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
PAY.GPGB_PSLIP_DESCR             &PAY_DESCR
PAY.GPGB_PSLIP_D_TXT             &PAY_TXT
PAY.GPGB_UNIT_CUR                &PAY_UNIT
PAY.GPGB_RATE_CUR                &PAY_RATE
PAY.GPGB_BASE_VAL                &PAY_BASE
PAY.GPGB_PCT_RSLT_VAL            &PAY_PCT
PAY.GPGB_ADJ_VAL                 &PAY_ADJ
PAY.GPGB_VAL_CUR                 &PAY_VAL
PAY.GPGB_RSLT_VAL_YTD            &PAY_VYTD

        LET $PAY_DESCR = &PAY_DESCR
        LET $PAY_TXT   = &PAY_TXT
        LET #PAY_UNIT  = &PAY_UNIT
        LET #PAY_RATE  = &PAY_RATE
        LET #PAY_BASE  = &PAY_BASE
        LET #PAY_PCT   = &PAY_PCT
        LET #PAY_ADJ   = &PAY_ADJ
        LET #PAY_VAL   = &PAY_VAL
        LET #PAY_VYTD  = &PAY_VYTD

        do PRINT-EARNINGS

FROM  PS_GPGB_PSLIP_P_ED PAY
WHERE PAY.EMPLID             = $EMPLID
  AND PAY.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND PAY.EMPL_RCD           = #ERCD
  AND PAY.GP_PAYGROUP        = $PNL_PYGRP
  AND PAY.RSLT_SEG_NUM       = #RSEGNM
  AND PAY.GPGB_PSLIP_SECTION = 'PAY'
  AND ((PAY.CAL_ID = $PNL_CAL_ID 
  AND PAY.GPGB_ELE_ORDER NOT IN 
  (SELECT DISTINCT P.GPGB_ELE_ORDER 
  FROM PS_GPGB_PSLIP_P_ED P 
  WHERE P.EMPLID = PAY.EMPLID
  AND P.CAL_RUN_ID = PAY.CAL_RUN_ID
  AND P.CAL_ID = PAY.CAL_ID
  AND P.EMPL_RCD = PAY.EMPL_RCD
  AND P.GP_PAYGROUP = PAY.GP_PAYGROUP
  AND P.RSLT_SEG_NUM = PAY.RSLT_SEG_NUM
  AND P.GPGB_PSLIP_SECTION = PAY.GPGB_PSLIP_SECTION
  AND P.GPGB_ADJ_VAL <> 0 
  AND P.GPGB_PSLIP_D_TXT <> ' '))
  OR PAY.GPGB_ELE_ORDER IN 
  (SELECT DISTINCT P1.GPGB_ELE_ORDER 
  FROM PS_GPGB_PSLIP_P_ED P1
  WHERE P1.EMPLID = PAY.EMPLID
  AND P1.CAL_RUN_ID = PAY.CAL_RUN_ID
  AND P1.EMPL_RCD = PAY.EMPL_RCD
  AND P1.GP_PAYGROUP = PAY.GP_PAYGROUP
  AND P1.RSLT_SEG_NUM = PAY.RSLT_SEG_NUM
  AND P1.GPGB_PSLIP_SECTION = PAY.GPGB_PSLIP_SECTION
  AND P1.GPGB_ADJ_VAL <> 0 
  AND P1.GPGB_PSLIP_D_TXT <> ' '))
  ORDER BY PAY.GPGB_ELE_ORDER, PAY.SLICE_BGN_DT
  
END-SELECT

#debug show ' Procedure Name <- EARNINGS'
end-procedure EARNINGS

!*=================================================================
! Procedure: PRINT-EARNINGS                                       !
! Descr:     Prints Earnings                                      !
!                                                                 !
!*=================================================================

begin-procedure PRINT-EARNINGS
#debug show ' Procedure Name -> PRINT-EARNINGS'

        print $PAY_DESCR                            (+1,{Col1})
        print $PAY_TXT                              (  ,{Col3})
        print #PAY_UNIT                             (  ,{Col5})
        print #PAY_RATE                             (  ,{Col6})
        print #PAY_BASE                             (  ,{Col8})
        print #PAY_PCT                              (  ,{Col9})
        print #PAY_ADJ                              (  ,{Col10})
        print #PAY_VAL                              (  ,{Col12})
        print #PAY_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-EARNINGS'
end-procedure PRINT-EARNINGS


!*=================================================================
! Procedure: BEFORE-TAX                                           !
! Descr:     Prints Before Tax                                    !
!                                                                 !
!*=================================================================

begin-procedure BEFORE-TAX
#debug show ' Procedure Name -> BEFORE-TAX'

        print 'BEFORE-TAX DEDUCTIONS'           (+2,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Detail'                          (  ,{Col3})  Bold
        print 'Units'                           (  ,{Col5})  Bold
        print 'Rate'                            (  ,{Col6})  Bold
        print 'Base'                            (  ,{Col8})  Bold
        print 'Percent'                         (  ,{Col9})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Current'                         (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
BTX.GPGB_PSLIP_DESCR             &BTX_DESCR
BTX.GPGB_PSLIP_D_TXT             &BTX_TXT
BTX.GPGB_UNIT_CUR                &BTX_UNIT
BTX.GPGB_RATE_CUR                &BTX_RATE
BTX.GPGB_BASE_VAL                &BTX_BASE
BTX.GPGB_PCT_RSLT_VAL            &BTX_PCT
BTX.GPGB_ADJ_VAL                 &BTX_ADJ
BTX.GPGB_VAL_CUR                 &BTX_VAL
BTX.GPGB_RSLT_VAL_YTD            &BTX_VYTD

        LET $BTX_DESCR = &BTX_DESCR
        LET $BTX_TXT   = &BTX_TXT
        LET #BTX_UNIT  = &BTX_UNIT
        LET #BTX_RATE  = &BTX_RATE
        LET #BTX_BASE  = &BTX_BASE
        LET #BTX_PCT   = &BTX_PCT
        LET #BTX_ADJ   = &BTX_ADJ
        LET #BTX_VAL   = &BTX_VAL
        LET #BTX_VYTD  = &BTX_VYTD

        do PRINT-BTAX

FROM  PS_GPGB_PSLIP_P_ED BTX
WHERE BTX.EMPLID             = $EMPLID
  AND BTX.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND BTX.EMPL_RCD           = #ERCD
  AND BTX.CAL_ID             = $PNL_CAL_ID
  AND BTX.GP_PAYGROUP        = $PNL_PYGRP
  AND BTX.RSLT_SEG_NUM       = #RSEGNM
  AND BTX.GPGB_PSLIP_SECTION = 'BTX'


END-SELECT

#debug show ' Procedure Name <- BEFORE-TAX'
end-procedure BEFORE-TAX


!*=================================================================
! Procedure: PRINT-BTAX                                           !
! Descr:     Prints Before Tax Deductions                         !
!                                                                 !
!*=================================================================

begin-procedure PRINT-BTAX
#debug show ' Procedure Name -> PRINT-BTAX'

        print $BTX_DESCR                            (+1,{Col1})
        print $BTX_TXT                              (  ,{Col3})
        print #BTX_UNIT                             (  ,{Col5})
        print #BTX_RATE                             (  ,{Col6})
        print #BTX_BASE                             (  ,{Col8})
        print #BTX_PCT                              (  ,{Col9})
        print #BTX_ADJ                              (  ,{Col10})
        print #BTX_VAL                              (  ,{Col12})
        print #BTX_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-BTAX'
end-procedure PRINT-BTAX

!*=================================================================
! Procedure: AFTER-TAX                                            !
! Descr:     Prints After Tax                                     !
!                                                                 !
!*=================================================================

begin-procedure AFTER-TAX
#debug show ' Procedure Name -> AFTER-TAX'


        print 'AFTER-TAX DEDUCTIONS'            (+2,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Detail'                          (  ,{Col3})  Bold
        print 'Units'                           (  ,{Col5})  Bold
        print 'Rate'                            (  ,{Col6})  Bold
        print 'Base'                            (  ,{Col8})  Bold
        print 'Percent'                         (  ,{Col9})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Current'                         (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
ATX.GPGB_PSLIP_DESCR             &ATX_DESCR
ATX.GPGB_PSLIP_D_TXT             &ATX_TXT
ATX.GPGB_UNIT_CUR                &ATX_UNIT
ATX.GPGB_RATE_CUR                &ATX_RATE
ATX.GPGB_BASE_VAL                &ATX_BASE
ATX.GPGB_PCT_RSLT_VAL            &ATX_PCT
ATX.GPGB_ADJ_VAL                 &ATX_ADJ
ATX.GPGB_VAL_CUR                 &ATX_VAL
ATX.GPGB_RSLT_VAL_YTD            &ATX_VYTD

        LET $ATX_DESCR = &ATX_DESCR
        LET $ATX_TXT   = &ATX_TXT
        LET #ATX_UNIT  = &ATX_UNIT
        LET #ATX_RATE  = &ATX_RATE
        LET #ATX_BASE  = &ATX_BASE
        LET #ATX_PCT   = &ATX_PCT
        LET #ATX_ADJ   = &ATX_ADJ
        LET #ATX_VAL   = &ATX_VAL
        LET #ATX_VYTD  = &ATX_VYTD

        do PRINT-ATAX

FROM  PS_GPGB_PSLIP_P_ED ATX
WHERE ATX.EMPLID             = $EMPLID
  AND ATX.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND ATX.EMPL_RCD           = #ERCD
  AND ATX.CAL_ID             = $PNL_CAL_ID
  AND ATX.GP_PAYGROUP        = $PNL_PYGRP
  AND ATX.RSLT_SEG_NUM       = #RSEGNM
  AND ATX.GPGB_PSLIP_SECTION = 'ATX'


END-SELECT

#debug show ' Procedure Name <- AFTER-TAX'
end-procedure AFTER-TAX


!*=================================================================
! Procedure: PRINT-ATAX                                           !
! Descr:     Prints After-Tax Deductions                          !
!                                                                 !
!*=================================================================

begin-procedure PRINT-ATAX
#debug show ' Procedure Name -> PRINT-ATAX'

        print $ATX_DESCR                            (+1,{Col1})
        print $ATX_TXT                              (  ,{Col3})
        print #ATX_UNIT                             (  ,{Col5})
        print #ATX_RATE                             (  ,{Col6})
        print #ATX_BASE                             (  ,{Col8})
        print #ATX_PCT                              (  ,{Col9})
        print #ATX_ADJ                              (  ,{Col10})
        print #ATX_VAL                              (  ,{Col12})
        print #ATX_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-ATAX'
end-procedure PRINT-ATAX



!*=================================================================
! Procedure: NI                                                   !
! Descr:     Prints NI                                            !
!                                                                 !
!*=================================================================

begin-procedure NI
#debug show ' Procedure Name -> NI'

        print 'NATIONAL INSURANCE'              (+2,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Current'                         (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
NI.GPGB_PSLIP_DESCR             &NI_DESCR
NI.GPGB_ADJ_VAL                 &NI_ADJ
NI.GPGB_VAL_CUR                 &NI_VAL
NI.GPGB_RSLT_VAL_YTD            &NI_VYTD

        LET $NI_DESCR = &NI_DESCR
        LET #NI_ADJ   = &NI_ADJ
        LET #NI_VAL   = &NI_VAL
        LET #NI_VYTD  = &NI_VYTD

        do PRINT-NI

FROM  PS_GPGB_PSLIP_P_ED NI
WHERE NI.EMPLID             = $EMPLID
  AND NI.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND NI.EMPL_RCD           = #ERCD
  AND NI.CAL_ID             = $PNL_CAL_ID
  AND NI.GP_PAYGROUP        = $PNL_PYGRP
  AND NI.RSLT_SEG_NUM       = #RSEGNM
  AND NI.GPGB_PSLIP_SECTION = 'NI'

END-SELECT

#debug show ' Procedure Name <- NI'
end-procedure NI


!*=================================================================
! Procedure: PRINT-NI                                             !
! Descr:     Prints NI                                            !
!                                                                 !
!*=================================================================

begin-procedure PRINT-NI
#debug show ' Procedure Name -> PRINT-NI'


        print $NI_DESCR                            (+1,{Col1})
        print #NI_ADJ                              (  ,{Col10})
        print #NI_VAL                              (  ,{Col12})
        print #NI_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-NI'
end-procedure PRINT-NI


!*=================================================================
! Procedure: NI_PREV                                                   !
! Descr:     Prints PREVIOUS NI                                            !
!                                                                 !
!*=================================================================

begin-procedure NI_PREV
#debug show ' Procedure Name -> NI_PREV'
  LET #CUR_PERIOD=13
  LET $CURR_CAT=&CAT

BEGIN-SELECT DISTINCT 
EMPLID &P_EMPLID
CAL_RUN_ID &P_PNL_CAL_RUN_ID
EMPL_RCD &P_ERCD
GP_PAYGROUP &P_PNL_PYGRP
CAL_ID &P_PNL_CAL_ID
RSLT_SEG_NUM &P_RSEGNM
SLICE_BGN_DT &P_SLICE_BGN_DT
PRD_BGN_DT &P_PRD_BGN_DT 
PRD_END_DT &P_PRD_END_DT
GPGB_TAX_BGN_YR &P_GPGB_TAX_BGN_YR
GPGB_TAX_PERIOD    &PREV_PERIOD
GPGB_NI_CATEGORY    &PREV_CAT

   LET #PREV_PERIOD=&PREV_PERIOD
   LET $PREV_CAT=&PREV_CAT
   LET $PREV_CAT=&PREV_CAT
   LET $P_EMPLID =&P_EMPLID
   LET $P_PNL_CAL_RUN_ID=&P_PNL_CAL_RUN_ID
   LET #P_ERCD=&P_ERCD
   LET $P_PNL_CAL_ID=&P_PNL_CAL_ID
   LET $P_PNL_PYGRP=&P_PNL_PYGRP
   LET #P_RSEGNM =&P_RSEGNM
 
 IF $CURR_CAT=$PREV_CAT
    LET $CURR_CAT=$PREV_CAT
    LET #CUR_PERIOD=$PREV_PERIOD   
 ELSE
    LET $CURR_CAT=$PREV_CAT
    LET #CUR_PERIOD=$PREV_PERIOD 
  
        LET $PREV_HEADING= 'PREVIOUS NATIONAL INSURANCE-' || $PREV_CAT   
        print $PREV_HEADING           (+2,{Col1})  Bold Shade
        print 'Description'                     (+1,{Col1})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

   
    do FETCH_NI_PREV
 
    END-IF

FROM PS_GPGB_PSLIP_M_ED A
WHERE  A.EMPLID             = $EMPLID
AND A.GPGB_NI_CATEGORY  <> $CURR_CAT
ORDER BY A.GPGB_TAX_PERIOD DESC
! A.GPGB_TAX_PERIOD=(SELECT MAX(A1.GPGB_TAX_PERIOD) FROM PS_GPGB_PSLIP_M_ED A1 WHERE A1.GPGB_TAX_PERIOD < #CUR_PERIOD AND A.EMPLID=A1.EMPLID AND A.GP_PAYGROUP=A1.GP_PAYGROUP)


END-SELECT
 

#debug show ' Procedure Name <- NI_PREV'
end-procedure NI_PREV


!*=================================================================
! Procedure: FETCH_NI_PREV                                             !
! Descr:     FETCH NI_PREV                                            !
!                                                                 !
!*=================================================================

begin-procedure FETCH_NI_PREV
#debug show ' Procedure Name -> FETCH_NI_PREV'

    
BEGIN-SELECT
NI.GPGB_PSLIP_DESCR             &NI_DESCR1
NI.GPGB_ADJ_VAL                 &NI_ADJ1
NI.GPGB_RSLT_VAL_YTD            &NI_VYTD1

        LET $NI_DESCR = &NI_DESCR1
        LET #NI_ADJ   = &NI_ADJ1
        LET #NI_VYTD  = &NI_VYTD1

        do PRINT_NI_PREV

FROM  PS_GPGB_PSLIP_M_ED NI
WHERE NI.EMPLID             = $P_EMPLID
  AND NI.CAL_RUN_ID         = $P_PNL_CAL_RUN_ID
  AND NI.EMPL_RCD           = #P_ERCD
  AND NI.CAL_ID             = $P_PNL_CAL_ID
  AND NI.GP_PAYGROUP        = $P_PNL_PYGRP
  AND NI.RSLT_SEG_NUM       = #P_RSEGNM
  AND NI.GPGB_NI_CATEGORY   = $PREV_CAT
ORDER BY NI.GPGB_ELE_ORDER   

END-SELECT

#debug show ' Procedure Name <- PRINT-NI_PREV'
end-procedure FETCH_NI_PREV



!*=================================================================
! Procedure: PRINT_NI_PREV                                            !
! Descr:     Prints NI                                            !
!                                                                 !
!*=================================================================

begin-procedure PRINT_NI_PREV
#debug show ' Procedure Name -> PRINT-NI'


        print $NI_DESCR                            (+1,{Col1})
        print #NI_ADJ                              (  ,{Col10})
        ! print #NI_VAL                              (  ,{Col12})
        print #NI_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-NI'
end-procedure PRINT-NI


!*=================================================================
! Procedure: NI_PREV                                                   !
! Descr:     Prints PREVIOUS NI                                            !
!                                                                 !
!*=================================================================

!*=================================================================
! Procedure: TAX                                                  !
! Descr:     Prints Tax                                           !
!                                                                 !
!*=================================================================

begin-procedure TAX
#debug show ' Procedure Name -> TAX'

        print 'TAX'                             (+2,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Adjustment'                      (  ,{Col10}) Bold
        print 'Current'                         (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
TAX.GPGB_PSLIP_DESCR             &TAX_DESCR
TAX.GPGB_ADJ_VAL                 &TAX_ADJ
TAX.GPGB_VAL_CUR                 &TAX_VAL
TAX.GPGB_RSLT_VAL_YTD            &TAX_VYTD

        LET $TAX_DESCR = &TAX_DESCR
        LET #TAX_ADJ   = &TAX_ADJ
        LET #TAX_VAL   = &TAX_VAL
        LET #TAX_VYTD  = &TAX_VYTD

        do PRINT-TAX

FROM  PS_GPGB_PSLIP_P_ED TAX
WHERE TAX.EMPLID             = $EMPLID
  AND TAX.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND TAX.EMPL_RCD           = #ERCD
  AND TAX.CAL_ID             = $PNL_CAL_ID
  AND TAX.GP_PAYGROUP        = $PNL_PYGRP
  AND TAX.RSLT_SEG_NUM       = #RSEGNM
  AND TAX.GPGB_PSLIP_SECTION = 'TAX'

END-SELECT

#debug show ' Procedure Name <- TAX'
end-procedure TAX


!*=================================================================
! Procedure: PRINT-TAX                                            !
! Descr:     Prints Tax                                           !
!                                                                 !
!*=================================================================

begin-procedure PRINT-TAX
#debug show ' Procedure Name -> PRINT-TAX'

        print $TAX_DESCR                            (+1,{Col1})
        print #TAX_ADJ                              (  ,{Col10})
        print #TAX_VAL                              (  ,{Col12})
        print #TAX_VYTD                             (  ,{Col14})

#debug show ' Procedure Name <- PRINT-TAX'
end-procedure PRINT-TAX


!*=================================================================
! Procedure: BALANCE                                              !
! Descr:     Prints Balance                                       !
!                                                                 !
!*=================================================================

begin-procedure BAL
#debug show ' Procedure Name -> BAL'

        print 'BALANCES'                        (+2,{Col1})  Bold Shade

        print 'Description'                     (+1,{Col1})  Bold
        print 'Detail'                          (  ,{Col3})  Bold
        print 'Adjustment'                      (  ,{Col5})  Bold
        print 'Current'                         (  ,{Col10}) Bold
        print 'Adjustment YTD'                  (  ,{Col12}) Bold
        print 'Year To Date'                    (  ,{Col14}) Bold

BEGIN-SELECT
BL.GPGB_PSLIP_DESCR             &BL_DESCR
BL.GPGB_PSLIP_D_TXT             &BL_TXT
BL.GPGB_ADJ_VAL                 &BL_ADJ
BL.GPGB_RSLT_VAL_CUR            &BL_VALC
BL.GPGB_ADJ_VAL_YTD             &BL_VALY
BL.GPGB_RSLT_VAL_YTD            &BL_VYTD


        LET $BL_DESCR = &BL_DESCR
        LET $BL_TXT   = &BL_TXT
        LET #BL_ADJ   = &BL_ADJ
        LET #BL_VALC  = &BL_VALC
        

      if &BL_VALY < 0
        let #BL_VALY = 0
      else
         LET #BL_VALY  = &BL_VALY
      end-if


      if &BL_VYTD < 0
        let #BL_VYTD = 0
      else
        LET #BL_VYTD  = &BL_VYTD
      end-if
      
      do PRINT-BAL

FROM  PS_GPGB_PSLIP_P_BL BL
WHERE BL.EMPLID             = $EMPLID
  AND BL.CAL_RUN_ID         = $PNL_CAL_RUN_ID
  AND BL.EMPL_RCD           = #ERCD
  AND BL.CAL_ID             = $PNL_CAL_ID
  AND BL.GP_PAYGROUP        = $PNL_PYGRP
  AND BL.RSLT_SEG_NUM       = #RSEGNM
  ORDER BY BL.GPGB_ELE_ORDER


END-SELECT


#debug show ' Procedure Name <- BAL'
end-procedure BAL


!*=================================================================
! Procedure: PRINT-BALANCE                                        !
! Descr:     Prints Balance                                       !
!                                                                 !
!*=================================================================

begin-procedure PRINT-BAL
#debug show ' Procedure Name -> PRINT-BAL'

        print $BL_DESCR                            (+1,{Col1})
        print $BL_TXT                              (  ,{Col3})
        print #BL_ADJ                              (  ,{Col5})
        print #BL_VALC                             (  ,{Col10})
        print #BL_VALY                             (  ,{Col12})
        print #BL_VYTD                             (  ,{Col14})
        
#debug show ' Procedure Name <- PRINT-BAL'
end-procedure PRINT-BAL


!*=================================================================
! Procedure: PAY-MSG                                              !
! Descr:     Prints Payroll Message                               !
!                                                                 !
!*=================================================================

begin-procedure PAY-MSG
#debug show ' Procedure Name -> PAY-MSG'


        print 'PAYROLL MESSAGES'                 (+2,{Col1}) Bold Shade

BEGIN-SELECT
P.GPGB_PSLIP_MESS              &P_MESS

        LET $P_MESS = &P_MESS

        do PRINT-PMSG

FROM  PS_GPGB_PSLIP_P_FT P
WHERE P.EMPLID         = $EMPLID
  AND P.CAL_RUN_ID     = $PNL_CAL_RUN_ID
  AND P.EMPL_RCD       = #ERCD
  AND P.CAL_ID         = $PNL_CAL_ID
  AND P.GP_PAYGROUP    = $PNL_PYGRP
  AND P.RSLT_SEG_NUM   = #RSEGNM
  AND P.GPGB_MESS_TYPE = 'P'

END-SELECT

#debug show ' Procedure Name <- PAY-MSG'
end-procedure PAY-MSG


!*=================================================================
! Procedure: PRINT-PMSG                                           !
! Descr:     Prints Payroll Message                               !
!                                                                 !
!*=================================================================

begin-procedure PRINT-PMSG
#debug show ' Procedure Name -> PRINT-PMSG'

        print $P_MESS                            (+1,{Col1})
        
#debug show ' Procedure Name <- PRINT-PMSG'
end-procedure PRINT-PMSG


!*=================================================================
! Procedure: EMP-MSG                                              !
! Descr:     Prints Employee Message                              !
!                                                                 !
!*=================================================================

begin-procedure EMP-MSG
#debug show ' Procedure Name -> EMP-MSG'

        print 'EMPLOYEE MESSAGES'                 (+2,{Col1}) Bold Shade

BEGIN-SELECT
E.GPGB_PSLIP_MESS              &E_MESS

        LET $E_MESS = &E_MESS

        do PRINT-EMSG

FROM  PS_GPGB_PSLIP_P_FT E
WHERE E.EMPLID         = $EMPLID
  AND E.CAL_RUN_ID     = $PNL_CAL_RUN_ID
  AND E.EMPL_RCD       = #ERCD
  AND E.CAL_ID         = $PNL_CAL_ID
  AND E.GP_PAYGROUP    = $PNL_PYGRP
  AND E.RSLT_SEG_NUM   = #RSEGNM
  AND E.GPGB_MESS_TYPE = 'E'

END-SELECT

#debug show ' Procedure Name <- EMP-MSG'
end-procedure EMP-MSG


!*=================================================================
! Procedure: PRINT-EMSG                                           !
! Descr:     Prints Employee Message                              !
!                                                                 !
!*=================================================================

begin-procedure PRINT-EMSG
#debug show ' Procedure Name -> PRINT-EMSG'

        print $E_MESS                            (+1,{Col1})
        
#debug show ' Procedure Name <- PRINT-EMSG'
end-procedure PRINT-EMSG


!*=================================================================
! Procedure: RESET-MAIN-VARIABLES                                 !
! Descr:     Reset local variables used in main                   !
!                                                                 !
!*=================================================================

begin-procedure RESET-MAIN-VARIABLES
#debug show ' Procedure Name -> RESET-MAIN-VARIABLES'

            let $COY         = {SPACE}
            let $LOC         = {SPACE}
            let $DEPTID      = {SPACE}
            let $BUS         = {SPACE}
            let $JCODE       = {SPACE}
            
#debug show ' Procedure Name <- RESET-MAIN-VARIABLES'
end-procedure RESET-MAIN-VARIABLES


!*=================================================================
! Procedure: RESET-CODE-VARIABLES                                 !
! Descr:     Reset local variables used in code                   !
!                                                                 !
!*=================================================================

begin-procedure RESET-CODE-VARIABLES
#debug show ' Procedure Name -> RESET-CODE-VARIABLES'

            let $COMPANY     = {SPACE}
            let $LOCATION    = {SPACE}
            let $DEPARTMENT  = {SPACE}
            let $BUSINESS    = {SPACE}
            let $JOB         = {SPACE}

#debug show ' Procedure Name <- RESET-CODE-VARIABLES'
end-procedure RESET-CODE-VARIABLES

!*=================================================================
! Procedure: ePay-Selection                                       !
! Descr:     Select ePay variables to use within the ePay Process !
!                                                                 !
!*=================================================================

begin-procedure ePay-Selection
#debug show ' Procedure Name -> ePay-Selection'
        
BEGIN-SELECT
{DATEOUT-PREFIX}PRC.PRD_END_DT{DATEOUT-SUFFIX}            &PRD_END_DT
{DATEOUT-PREFIX}SEG.SEG_BGN_DT{DATEOUT-SUFFIX}            &SEG_BGN_DT
{DATEOUT-PREFIX}SEG.SEG_END_DT{DATEOUT-SUFFIX}            &SEG_END_DT
{DATEOUT-PREFIX}PRC.PYMT_DT{DATEOUT-SUFFIX}               &PYMT_DT
PRC.RUN_TYPE


        LET $RUN_TYPE = RTRIM(&PRC.RUN_TYPE, ' ')

FROM PS_GP_PYE_PRC_STAT PRC,
     PS_GP_PYE_SEG_STAT SEG

WHERE PRC.EMPLID           = $EMPLID
  AND PRC.CAL_RUN_ID       = $PNL_CAL_RUN_ID
  AND PRC.EMPL_RCD         = #ERCD
  AND PRC.GP_PAYGROUP      = $PNL_PYGRP
  AND PRC.CAL_ID           = $PNL_CAL_ID
  AND PRC.ORIG_CAL_RUN_ID  = PRC.CAL_RUN_ID
  AND PRC.EMPLID           = SEG.EMPLID
  AND PRC.CAL_RUN_ID       = SEG.CAL_RUN_ID
  AND PRC.EMPL_RCD         = SEG.EMPL_RCD
  AND PRC.GP_PAYGROUP      = SEG.GP_PAYGROUP
  AND PRC.CAL_ID           = SEG.CAL_ID
  AND PRC.ORIG_CAL_RUN_ID  = SEG.ORIG_CAL_RUN_ID
    AND SEG.RSLT_SEG_NUM     = #RSEGNM

END-SELECT

#debug show ' Procedure Name <- ePay-Selection'
end-procedure ePay-Selection

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init
#debug show ' Procedure Name -> GP-ePay-Init'

        
   let $sql-statement = 'GPGBPSLP.sqr, GP-ePay-Init '

  Do Check-ePay-installed ($ePay_Installed)

    If $ePay_Installed = 'Y'
     Move 'GPGBPSLP' to $ReportID

      let #eV4 =  To_number($prcs_process_instance)

      !* have the Output Working Directory from the Process parameters table
      do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

      !* have the URL id from the Payslip option table
      do Get-ePay-URLid ('GBR', $eV18)

      !* Global ePay variable settings used in GP-ePay procedures in this SQR
      let $eV1 = $prcs_oprid
      let $eV2 = $prcs_run_cntl_id
      let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

      ! Open the file for writing epay control data
      ! Let $GUIDEFILE   = $eV3 || '.txt'
      ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
      ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GUIDEFILE)

      ! when we do not pass a control file
       Let $GUIDEFILE = ' '
       Let $FILELAYOUT = ' '

    End-If

#debug show ' Procedure Name <- GP-ePay-Init'
end-procedure 

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************

begin-procedure GP-ePay-Guide
#debug show ' Procedure Name -> GP-ePay-Guide'

let $sql-statement = 'GPGBPSLP.sqr,GP-ePay-Guide'

 If $ePay_Installed = 'Y'

   ! to retrieve the extra values needed to process ePay
   do ePay-Selection  ! not an ePay procedure


   let $eV5  = $EMPLID
   let $eV5  = ltrim($eV5, ' ')
   let $eV6  = $PNL_CAL_RUN_ID
   let $eV6  = ltrim($eV6,' ')
   let $eV7  = 'GPGBR'
   ! below code modified to get unique payslip id 
   let $eV8  = $EMPLID || '_'|| $SEGEDT || '_' || $PNL_PYGRP || '_' || $ERCD || '_' || $RSEGNM   
   let $eV9  = &PYMT_DT
   let $eV10 = &SEG_END_DT
   let $eV11 = &SEG_BGN_DT
   let #eV12 = #NET                                                            ! net pay
   let $eV13 = $DEPARTMENT                                                     ! payslip description
   if $eV13 = ''
     let $eV13 = 'No DESCRIPTION'
   end-if
   let $eV14 = $RUN_TYPE
   let $eV15 = 'ORIG'                                                          ! payslip status ORIGINAL
   let $eV16 = $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'                      ! sysfilename of the payslip pdf
   let $eV17 = $eV16                                                           ! userfilename  - what the payee sees filename as
   let #eV19 = #page-count                                                     ! begin page number of payslip in output report
   let #eV20 = #page-count                                                     ! end page number of payslip in output report

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

    do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

!   do Write-ePay-Guide- Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If

#debug show ' Procedure Name <- GP-ePay-Guide'
end-procedure ! GP-ePay-Guide
!*=================================================================
! Procedure     :check-mob-custom-enabled
! Comment       :This procedure checks whether Custom option is chosen in Data Extraction Options.
!*=================================================================
begin-procedure check-mob-custom-enabled

begin-select DISTINCT
GP_SS_MPSLP_DATA    &MbPslpOpt
    if &MbPslpOpt = 'CUST'
        let $custEnabled = 'Y' 
    else
        let $custEnabled = 'N'
    end-if
   
FROM PS_GP_SS_PSLP_OPT
WHERE COUNTRY = 'GBR'
AND GP_PSLP_HDCPYOPTN = 'Y'
AND GP_SS_MPSLP_ENABLE = 'Y'
end-select
end-procedure

!*=================================================================
! Procedure     :Insert_mpslp_data
! Comment       :This procedure insertes Mobile payslip data into staging tables.
!*=================================================================
begin-procedure Insert_mpslp_data
#debug show ' Procedure Name -> Insert_mpslp_data'
        If $GPinit_mob_payslp = 'Y' and   $custEnabled = 'Y'
      
         Let $payslip_id= 'PU.EMPLID'  || '||' ||  '''_''' || '||' || 'PU.SEG_END_DT' ||'||'||'''_'''||'||'||'PU.GP_PAYGROUP'||'||'||'''_'''||'||'||'PU.EMPL_RCD'||'||'||'''_'''||'||'||'PU.RSLT_SEG_NUM' 
         LET $GPselectPartA ='PU.EMPLID, PU.CAL_RUN_ID, PU.EMPL_RCD, PU.GP_PAYGROUP, PU.CAL_ID, PRC.ORIG_CAL_RUN_ID, PU.RSLT_SEG_NUM, ''GPGBR'',' || $payslip_id
         
         LET $GPselectPartB=' , PU.SEG_BGN_DT, PU.SEG_END_DT,PRC.PRD_BGN_DT,PRC.PRD_END_DT, PRC.PYMT_DT,PU.PIN_GROSS_VAL, 0,0,PU.PIN_NET_VAL,0,0,PU.COMPANY,PRC.RUN_TYPE,'' '','' '','' '','' '','' '','' '''
         LET $GPselect = $GPselectPartA || $GPselectPartB
         
        LET $GPfrom = ' PS_GPGB_PSLIP_PU_H PU, PS_GP_PYE_PRC_STAT PRC, PS_GP_SS_PSLP_TMP GDE '
        LET $GPwhere_batch1 =' PU.CAL_RUN_ID=GDE.CAL_RUN_ID AND PU.EMPLID=GDE.EMPLID AND PU.EMPL_RCD= TO_NUMBER(SUBSTR(GDE.GP_PSLP_ID, LENGTH(GDE.GP_PSLP_ID)-2, 1)) AND PU.CAL_RUN_ID= '''||$PNL_CAL_RUN_ID1
        LET $GPwhere_batch2 = ''' AND PU.EMPLID=PRC.EMPLID AND PU.EMPL_RCD=PRC.EMPL_RCD AND PU.CAL_RUN_ID=PRC.CAL_RUN_ID AND PU.GP_PAYGROUP=PRC.GP_PAYGROUP AND PU.CAL_ID=PRC.CAL_ID AND '
        LET $GPwhere_batch3 = ' PRC.PRD_END_DT = GDE.PRD_END_DT AND PRC.RSLT_REV_NUM  <= 1 AND GDE.GP_PSLP_INSTANCE= (SELECT MAX(CH.GP_PSLP_INSTANCE) FROM PS_GP_SS_PSLP_TMP CH'
        LET $GPwhere_batch4 = ' WHERE CH.OPRID=GDE.OPRID AND CH.RUN_CNTL_ID=GDE.RUN_CNTL_ID AND CH.GP_PSLP_PROCNAME='|| '''GPGBPSLP''' ||' )'
        LET $GPwhere_batch =    $GPwhere_batch1 || $GPwhere_batch2 || $GPwhere_batch3 || $GPwhere_batch4
                
        do insert_mpslp_hdr_batch($GPselect, $GPfrom, $GPwhere_batch)
        
        Let $payslip_id1 = 'PAY.EMPLID'||'||'||'''_'''||'||'||'HDR.SEG_END_DT'||'||'||'''_'''||'||'||'PAY.GP_PAYGROUP'||'||'||'''_'''||'||'||'PAY.EMPL_RCD'||'||'||'''_'''||'||'||'PAY.RSLT_SEG_NUM' 
        
        LET $GPselect1A =' DISTINCT PAY.EMPLID, PAY.CAL_RUN_ID, PAY.EMPL_RCD, PAY.GP_PAYGROUP, PAY.CAL_ID, HDR.ORIG_CAL_RUN_ID, PAY.RSLT_SEG_NUM,''GPGBR'',' ||$payslip_id1
        LET $GPselect1B = ' ,PAY.INSTANCE,RXT.PIN_NUM, RXT.SLICE_BGN_DT,RXT.SLICE_END_DT,0,RXT.ED_ASSIGN_INSTANCE,RXT.PI_INSTANCE,HDR.PRD_BGN_DT,HDR.PRD_END_DT,HDR.SEG_BGN_DT,HDR.SEG_END_DT,HDR.PYMT_DT,'
        LET $GPselect1C = ' HDR.RUN_TYPE,RXT.CALC_RSLT_VAL,RXT.CALC_ADJ_VAL, 0, RXT.BASE_RSLT_VAL,RXT.BASE_ADJ_VAL,RXT.RATE_RSLT_VAL,RXT.UNIT_RSLT_VAL,RXT.UNIT_ADJ_VAL,RXT.PCT_RSLT_VAL,RXT.RECIPIENT_ID,'
        LET $GPselect1D = ' RXT.RECIPIENT_TAG,RXT.USER_FLD1,RXT.USER_FLD2,RXT.USER_FLD3,RXT.USER_FLD4,RXT.USER_FLD5,RXT.USER_FLD6, CASE WHEN PIN.PIN_TYPE = ''' ||'ER'||''' THEN '''||'10'
        LET $GPselect1E = ''' WHEN PIN.PIN_TYPE = ''' ||'DD'||''' THEN '''||'20'||'''  END, CASE WHEN PIN.PIN_TYPE = ''' ||'ER'||''' THEN '''||'10'||''' WHEN PIN.PIN_TYPE = ''' ||'DD'
        LET $GPselect1F = ''' THEN '''||'20'||'''  END,CASE WHEN PAY.GPGB_PSLIP_SECTION = ''' ||'ATX'||''' THEN '''||'After-Tax Deductions'||''' WHEN PAY.GPGB_PSLIP_SECTION = ''' ||'BTX'
        LET $GPselect1G = ''' THEN '''||'Before-Tax Deductions'||''' WHEN PAY.GPGB_PSLIP_SECTION = ''' ||'NI'||''' THEN '''||'National Insurance'||''' WHEN PAY.GPGB_PSLIP_SECTION = ''' 
        LET $GPselect1H = 'PAY'||''' THEN '''||'Earnings'||''' WHEN PAY.GPGB_PSLIP_SECTION = ''' ||'TAX'||''' THEN '''||'Tax'||''' ELSE '''||' '||''' END,0,PAY.GPGB_PSLIP_DESCR'
        LET $GPselect1 = $GPselect1A || $GPselect1B || $GPselect1C || $GPselect1D || $GPselect1E || $GPselect1F || $GPselect1G || $GPselect1H
                     
        
        LET $GPfrom1 = ' PS_GPGB_PSLIP_ED_W PAY, PS_GP_MPSLP_STGHDR HDR, PS_GP_RSLT_ERN_DED RXT, PS_GP_PYE_PRC_STAT ST, PS_GP_PIN PIN '
        
        LET $GPwhere_batch1A = ' PAY.EMPLID = HDR.EMPLID AND HDR.EMPL_RCD = RXT.EMPL_RCD AND PAY.EMPLID = RXT.EMPLID AND PAY.EMPL_RCD = RXT.EMPL_RCD AND PAY.CAL_RUN_ID ='''||$PNL_CAL_RUN_ID1
        LET $GPwhere_batch1B = ''' AND HDR.EMPLID = RXT.EMPLID AND HDR.EMPL_RCD = RXT.EMPL_RCD AND HDR.CAL_RUN_ID = RXT.CAL_RUN_ID AND HDR.EMPL_RCD = RXT.EMPL_RCD AND '
        LET $GPwhere_batch1C = ' HDR.GP_PAYGROUP = RXT.GP_PAYGROUP AND HDR.CAL_ID = RXT.CAL_ID AND HDR.ORIG_CAL_RUN_ID = RXT.ORIG_CAL_RUN_ID AND HDR.RSLT_SEG_NUM = RXT.RSLT_SEG_NUM'
        LET $GPwhere_batch1D = ' AND RXT.EMPLID = ST.EMPLID AND RXT.CAL_RUN_ID = ST.CAL_RUN_ID AND RXT.EMPL_RCD = ST.EMPL_RCD AND  PAY.GPGB_PIN_NUM_CUR=RXT.PIN_NUM AND '
        LET $GPwhere_batch1E = ' RXT.GP_PAYGROUP = ST.GP_PAYGROUP AND RXT.CAL_ID = ST.CAL_ID AND RXT.ORIG_CAL_RUN_ID = ST.ORIG_CAL_RUN_ID AND RXT.EMPLID = PAY.EMPLID AND RXT.CAL_RUN_ID = PAY.CAL_RUN_ID'
        LET $GPwhere_batch1F = ' AND RXT.EMPL_RCD = PAY.EMPL_RCD AND RXT.GP_PAYGROUP = PAY.GP_PAYGROUP AND RXT.CAL_ID = PAY.CAL_ID AND RXT.RSLT_SEG_NUM = PAY.RSLT_SEG_NUM AND RXT.INSTANCE = PAY.INSTANCE'
        LET $GPwhere_batch1G = ' AND RXT.SLICE_BGN_DT = PAY.SLICE_BGN_DT ' ||' AND  PAY.GPGB_PIN_NUM_CUR = PIN.PIN_NUM'

        LET $GPwhere_batch1 = $GPwhere_batch1A || $GPwhere_batch1B || $GPwhere_batch1C || $GPwhere_batch1D || $GPwhere_batch1E || $GPwhere_batch1F || $GPwhere_batch1G
        
        do insert_mpslp_ernded_batch($GPselect1, $GPfrom1, $GPwhere_batch1)
        
        LET $GPselect2A=' DISTINCT AC.EMPLID,AC.CAL_RUN_ID,AC.EMPL_RCD,AC.GP_PAYGROUP,AC.CAL_ID, AC.ORIG_CAL_RUN_ID,''GPGBR'', HDR.GP_PSLP_ID, AC.RSLT_SEG_NUM, AC.PIN_NUM, AC.EMPL_RCD_ACUM, AC.ACM_FROM_DT,'
        LET $GPselect2B = ' AC.ACM_THRU_DT,AC.SEQ_NUM8, 0, AC.SLICE_BGN_DT,AC.SLICE_END_DT,HDR.SEG_BGN_DT,HDR.SEG_END_DT,HDR.PRD_BGN_DT,HDR.PRD_END_DT,'
        LET $GPselect2C = ' HDR.PYMT_DT,HDR.RUN_TYPE, '' '','' '','' '','' '','' '','' '',AC.COUNTRY,AC.CALC_RSLT_VAL, 0, AC.CALC_VAL, 40, 0, '' '', 0, '' '''
        LET $GPselect2 =  $GPselect2A || $GPselect2B || $GPselect2C
         
        LET $GPFrom2 = ' PS_GP_RSLT_ACUM AC, PS_GP_MPSLP_STGHDR HDR '
        LET $GPwhere_batch2A=' AC.EMPLID = HDR.EMPLID AND AC.CAL_RUN_ID = HDR.CAL_RUN_ID AND AC.CAL_RUN_ID ='''||$PNL_CAL_RUN_ID1||''' AND AC.EMPL_RCD = HDR.EMPL_RCD AND AC.GP_PAYGROUP = HDR.GP_PAYGROUP AND'
        LET $GPwhere_batch2B = ' AC.CAL_ID = HDR.CAL_ID AND AC.ORIG_CAL_RUN_ID = HDR.ORIG_CAL_RUN_ID AND AC.RSLT_SEG_NUM = HDR.RSLT_SEG_NUM' 
        LET $GPwhere_batch2 =  $GPwhere_batch2A ||  $GPwhere_batch2B
        
        do insert_mpslp_acum_batch($GPselect2, $GPfrom2, $GPwhere_batch2)
        
        
        end-if      
#debug show ' Procedure Name <- Insert_mpslp_data'
end-procedure Insert_mpslp_data



!*=================================================================
! Procedure     :Get_Run_Cntl_DATA_FOR_LOG
! Comment       :This procedure gets the LOG DATA
!*=================================================================
begin-procedure Get_Run_Cntl_DATA_FOR_LOG
#debug show ' Procedure Name -> Get_Run_Cntl_DATA_FOR_LOG'



        LET $PNL_CAL_RUN_ID1         = $PNL_CAL_RUN_ID
         LET $PNL_PYMT_DT1            = $PRCPYMT_DT
         do Format-Datetime($PNL_PYMT_DT1, $PNL_PYMT_DT_NEW1, {DEFDMY}, '', '')
         LET $PNL_PYGRP1              = $PNL_PYGRP
        LET $PNL_CAL_ID1             = $PNL_CAL_ID
 
       

     

#debug show ' Procedure Name <- Get_Run_Cntl_DATA_FOR_LOG'
end-procedure Get_Run_Cntl_DATA_FOR_LOG

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control
#debug show ' Procedure Name -> GP-ePay-Control'

 let $sql-statement = 'GPGBPSLP.sqr,GP-ePay-Control '

 If $ePay_Installed = 'Y'

   let $rptid = lower($ReportID)
   let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'
   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,GUIDEFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GUIDEFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')

 End-If

#debug show ' Procedure Name <- GP-ePay-Control'
end-procedure !GP-ePay-Control



!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'    ! Reset printer procedure
#include 'curdttim.sqc' ! Get-Current-DateTime procedure
#include 'datetime.sqc' ! Routines for date and time formatting
#include 'number.sqc'   ! Routines to format numbers
#include 'prcsapi.sqc'  ! Update Process Request API
#include 'prcsdef.sqc'  ! Update Process Request variable declaration
#Include 'stdapi.sqc'   ! Routines to Update Run Status
#include 'readxlat.sqc' ! Read Translate Table
#Include 'gpsspslp.sqc' ! ePay SQC with ePay procedures
#include 'gpgbut02.sqc' ! Log file
!******************************* End Of Program *******************

