!***********************************************************************
!  GPBRIR01: IMPOSTO DE RENDA NA FONTE                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  29213181                                            *
!                                                                      *
!***********************************************************************

#define CA0   1
#define CAA   2
#define CC0  20
#define CD0  30
  
#define C40  40
#define C60  60
#define C65  65
#define C66  66
#define C49  49
#define C50  50
#define C70  70
#define C79  79
#define C80  80
#define C85  85
#define C86  86
#define C110 110
#define C109 109
#define C115 115
#define C120 120

#define G0     1
#define G1     3
#define G2     5

#define L84   84
#define L100 100
#define L110 110
#define L125 125
#define L170 170

#include 'setenv.sqc'   !Set environment

Begin-Setup
 #include 'setupdb.sqc'
 Declare-Printer   THIS_REPORT
     type          = HPLASERJET
     symbol-set    = 19U
     font          = 5
     point-size    = 4
 End-Declare
 Declare-Layout THIS_REPORT
       Orientation=Portrait
       Top-Margin= .4
       !Bottom-Margin= .2
       Left-Margin=.4
       Max-Columns=130
       Max-lines=94
       Char-Width=4.3    ! 7.2
       Line-Height=8     ! 72/printer_point-size
 End-Declare
 
 Declare-Report THIS_REPORT
       Printer-Type=HPLASERJET
       LayOut=THIS_REPORT
 End-Declare


end-Setup
begin-footing 1
!>  print 'Página' (1,115) bold
!>  move #page-count to $pagecount '99'  
!>  Print $pagecount (,) bold
!>  Print ' de ' (,) bold
!>  move #y to $y '99'  
!>  print $y (,) bold 
  page-number         (1,110)  'Página '      
  last-page           ()  ' de '  
end-footing

!**************************************
begin-report
!**************************************   
  #include 'setupdb.sqc'               ! Database specific setup
  Let #FontStd   = 5  
  let #SizeGrd1  = 12 
  Let #SizeGrd2  = 10   
  let #SizeStd   = 8   
  let #SizeSml   = 7 
  
  let #pos  = instr($sqr-program,'gpbrir01',0)
    let #pos  = #pos - 1
    let $path = substr($sqr-program,1,#pos)
    let $FileDir = $path || 'srf.gif'
      
    #ifdef MVS
     let #pos  = instr($sqr-program,'gpbrir01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'srf)'
    #end-if
      
    #ifdef OS390
     let #pos  = instr($sqr-program,'gpbrir01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'srf)'
    #end-if
      
    #ifdef OS400
     let #pos  = instr($sqr-program,'gpbrir01',0)
     let #pos  = #pos - 1
     let $path = substr($sqr-program,1,#pos)
     let $FileDir = $path || 'srf)'
    #end-if
      
    #ifdef UNIX
     let $FileDir = $path || 'srf.gif'
  #end-if
  
  Do Init-Report
  Do Process-Main
  if $Flag = 'T'
    display 'Não existe Comprovante de Rendimentos a ser emitido para os parametros informados nessa execução'
  end-if
  
  Do Stdapi-Term
end-report

!**************************************
begin-procedure Init-Report
!**************************************
  move '2' to $ReportDateType   ! Set for date to format as DMY
  move '1' to $ReportYear4      ! Set for year to be formatted YYYY
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime 
  move 'GPBRIR01' to $ReportID
  move 'Documento de Arrecadação de Receitas Federais' to $ReportTitle
  move 'Version: 2019.PI30' to $ReportVersion
  
  move '.'                To $ReportSThousand 
  move ','                To $ReportSDecimal
     
  Alter-Locale MONEY-SIGN = 'R$'
    
  display $ReportID
  display $ReportTitle
  display $ReportVersion
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display $AsOfToday
  display &timeBegan
  Let $DateBegan = Datenow()
end-procedure Init-Report

!**************************************
begin-procedure Process-Main
!**************************************
  #debug show  ' Process-Main '
  Let $SecurityClauseWithERN = ''
  Let $_TableAlias = 'A'
  Do Security-Param
  
  do OPENLOG 
  Do Select-Parameters 
  Do Fill-Rec-Array 
  Do Create-Strings-Labels
  Do Declare-Rows
  Do Select-Employee-Data
  Do get-pin-array
  do CloseLog
end-procedure Process-Main

!**************************************
begin-procedure Select-Parameters
!**************************************
 #debug show  ' Select-Parameters '
begin-select
RC.COMPANY
RC.YEARCD
RC.GPBR_SORTID
RC.PER_ORG
RC.GPBR_INC_NAT
RC.GPBR_IREN_OPTNS
RC.GPBR_CRES_ID
RC.GPBR_EXCLUDE_FLG1
RC.DATE_VALUE
RC.COMMENTS
RC.GPBR_NUM_LINES
  
  Let $Company     = Rtrim(&RC.COMPANY , ' ')
  Let $Year        = Rtrim(&RC.YEARCD, ' ')
  Let $Sortid      = Rtrim(&RC.GPBR_SORTID, ' ')
  Let $PerStatus   = Rtrim(&RC.PER_ORG, ' ')
  Let $Nature      = Rtrim(&RC.GPBR_INC_NAT, ' ')
  Let $IrenOpts    = Rtrim(&RC.GPBR_IREN_OPTNS, ' ')
  Let $Contact     = Rtrim(&RC.GPBR_CRES_ID, ' ')
  Let $ExcFlg      = Rtrim(&RC.GPBR_EXCLUDE_FLG1, ' ')
  Let $Date        = Rtrim(&RC.DATE_VALUE, ' ')
  Let $Comments    = Rtrim(&RC.COMMENTS, ' ')
  Let #Numlines    = &RC.GPBR_NUM_LINES
  Let $RequirePINNM = 'N'

  
  Do Calc-Dt
  Do Get-Company-Desc
  Do Get-Contact-Name
  do Health_Prov_Params
  #debug show  ' Processing Company  ---: ' $Company 
FROM  PS_GPBR_RC_IREN RC
WHERE RC.OPRID  = $prcs_oprid
AND   RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
If $ExcFlg = 'N'
  Let $ExcFlg = ' IN '
Else
  Let $ExcFlg = ' NOT IN '
End-If
Do Get-Print-Seq
Do Get-Establishments
Do Get-Employees
Do Get-Departments
Do Get-GroupId
end-procedure Select-Parameters


!**************************************
begin-procedure Get-Establishments
!**************************************
 #debug show  ' Get-Establishments '
Let $WCEstablishments = ''
Let $Establist = '('
Begin-Select
EST.ESTABID
  let $Establist = $Establist || '''' || rtrim(&EST.ESTABID,' ') || ''','
FROM PS_GPBR_RC_EST_SEL EST
WHERE EST.OPRID  = $prcs_oprid
AND   EST.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select
If (length($Establist) - 1) > 0  
   let $WCEstablishments = ' AND A.ESTABID' || $ExcFlg || substr($Establist,1,(length($Establist) - 1)) || ')'
 else
   let $WCEstablishments = ''
 end-if
end-procedure Get-Establishments

!**************************************
begin-procedure Get-Employees
!**************************************
 #debug show  ' Get-Employees '
Let $WCEmployees = ''
Let $Emplist = '('
Begin-Select
EMP.EMPLID
  let $Emplist = $Emplist || '''' || rtrim(&EMP.EMPLID,' ') || ''','
FROM PS_GPBR_RC_EMP_SEL EMP
WHERE EMP.OPRID  = $prcs_oprid
AND   EMP.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select
If (length($Emplist) - 1) > 0  
   let $WCEmployees = ' AND A.EMPLID' || $ExcFlg || substr($Emplist,1,(length($Emplist) - 1)) || ')'
 else
   let $WCEmployees = ''
 end-if
end-procedure Get-Employees

!**************************************
begin-procedure Get-Departments
!**************************************
 #debug show  ' Get-Departments '
Let $WCDepartments = ''
Let $Deptlist = '('
Begin-Select
DEPT.DEPTID
  let $Deptlist = $Deptlist || '''' || rtrim(&DEPT.DEPTID,' ') || ''','
FROM PS_GPBR_RC_DPT_SEL DEPT
WHERE DEPT.OPRID  = $prcs_oprid
AND   DEPT.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select
If (length($Deptlist) - 1) > 0  
   let $WCDepartments = ' AND A.DEPTID'|| $ExcFlg || substr($Deptlist,1,(length($Deptlist) - 1)) || ')'
 else
   let $WCDepartments = ''
 end-if
end-procedure Get-Departments

!**************************************
begin-procedure Get-GroupId
!**************************************
 #debug show  ' Get-GroupId '
Let $GroupId = ''
Begin-Select
GRP.GB_GROUP_ID
  let $GroupId = rtrim(&GRP.GB_GROUP_ID,' ')
FROM PS_GPBR_RC_GRP_SEL GRP
WHERE GRP.OPRID  = $prcs_oprid
AND   GRP.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select
If length($GroupId) > 0  
   let $GroupTable = ', PS_GB_GRP_RES_TBL GE' 
   let $WCGroup = ' AND   GE.GB_GROUP_ID  = ''' || $GroupId || ''''
   let $WCGroup = $WCGroup || ' and GE.VERSIONGBQDM = (select max(GE1.VERSIONGBQDM) from PS_GB_GRP_RES_TBL GE1'
   !let $WCGroup = $WCGroup || ' where GE1.GB_GROUP_ID = GE.GB_GROUP_ID and GE1.EMPLID = GE.EMPLID and GE1.EMPL_RCD = GE.EMPL_RCD)'
   let $WCGroup = $WCGroup || ' where GE1.GB_GROUP_ID = GE.GB_GROUP_ID and GE1.EMPLID = GE.EMPLID)'
   !let $WCGroup = $WCGroup || ' and A.EMPLID = GE.EMPLID and A.EMPL_RCD = GE.EMPL_RCD and A.EFFDT = GE.JOB_EFFDT and A.EFFSEQ = GE.JOB_EFFSEQ'   
   let $WCGroup = $WCGroup || ' and A.EMPLID = GE.EMPLID and A.EFFDT = GE.JOB_EFFDT and A.EFFSEQ = GE.JOB_EFFSEQ'  
else
   let $WCGroup = ''
   let $GroupTable = ''
end-if
end-procedure Get-GroupId

!**************************************
Begin-Procedure Calc-Dt
!**************************************
 #debug show  ' Calc-Dt '
Let $BgnDt = $Year || '-01-01'
Let $EndDt = $Year || '-12-31'
Do Convert-From-DTU-Date($BgnDt, $BgnDt)
do Convert-From-DTU-Date($EndDt, $EndDt)

begin-select 
MD.EFFDT &MAXDATE
 let $MAXDT= &MAXDATE
from ps_gpbr_iren MD 
where MD.COMPANY=$Company 
and MD.EFFDT = (select MAX (J.EFFDT) from ps_gpbr_iren J where J.COMPANY=MD.COMPANY and J.EFFDT <=$EndDt)
end-select

End-Procedure Calc-Dt


!**************************************
Begin-Procedure Select-Employee-Data
!**************************************
 #debug show  ' Select-Employee-Data '
Let $Flag = 'T'
Begin-Select   
A.EMPLID
A.EMPL_CLASS
B.NAME_DISPLAY
A.DEPTID
A.SETID_DEPT
A.ESTABID 
A.EMPL_RCD
   let $Flag = 'F'
   Let $Emplid      = Ltrim(Rtrim(&A.EMPLID, ' '),' ')  
   Let $Empl_class  = Ltrim(Rtrim(&A.EMPL_CLASS, ' '),' ')  
   Let $Name        = Ltrim(Rtrim(&B.NAME_DISPLAY, ' '),' ')   
   Let $DeptId      = Ltrim(Rtrim(&A.DEPTID,' '),' ')
   Let $SetID_Dept  = Ltrim(Rtrim(&A.SETID_DEPT,' '),' ') 
   Let $Estabid     = Ltrim(Rtrim(&A.ESTABID,' '),' ') 
   let #Emplrcd     = &A.EMPL_RCD
   
   Do Get-Company-CNPJ
   Do Get-National-ID
   Do Print-Data

from PS_JOB A
    ,PS_PERSON_NAME B   
    ,PS_GPBR_PRSN_VW C 
[$GroupTable]
WHERE A.COMPANY=$Company
  AND A.EMPLID = B.EMPLID  
  AND A.EFFDT  = (SELECT MAX(AA.EFFDT) FROM PS_JOB AA 
                  WHERE AA.EMPLID = A.EMPLID
                  !and AA.EMPL_RCD = A.EMPL_RCD 
                  and AA.COMPANY=A.COMPANY
                  AND AA.EFFDT   <= $EndDt)            
  AND A.EFFSEQ = (SELECT MAX(AA.EFFSEQ) FROM PS_JOB AA 
                  WHERE AA.EMPLID = A.EMPLID                 
                  !and AA.EMPL_RCD = A.EMPL_RCD
                  and AA.COMPANY=A.COMPANY   
                  AND AA.EFFDT   = A.EFFDT)
  AND A.EMPLID = C.EMPLID 
  and C.PER_ORG = $PerStatus
  AND EXISTS  (SELECT 'X' FROM PS_GP_RSLT_SEG_VW M WHERE M.EMPLID=A.EMPLID AND M.EMPL_RCD=A.EMPL_RCD AND M.PYMT_DT>=$BgnDt AND M.PYMT_DT <=$EndDt)
[$SecurityClausewithERN] 
[$WCEstablishments]
[$WCEmployees]
[$WCDepartments]
[$WCGroup]
[$orderby]
End-Select
End-Procedure Select-Employee-Data

!**************************************
begin-procedure Create-Strings-Labels
!**************************************
  Let $LTitle01    = 'MINISTÉRIO DA FAZENDA'
  Let $LTitle02    = 'Secretaria da Receita Federal do Brasil'
  Let $LTitle03    = 'Imposto sobre a Renda da Pessoa Física'
  Let $LTitle04    = 'Exercício de'
  Let $LTitle05    = 'Comprovante de Rendimentos Pagos e de'
  Let $LTitle06    = 'Imposto sobre a Renda Retido na Fonte'
  Let $LTitle07    = 'Ano-calendário'
  
  Let $STitle01    = '1. Fonte Pagadora Pessoa Jurídica ou Pessoa Física'
  Let $STitle02    = '2. Pessoa Física Beneficiária dos Rendimentos'
  Let $STitle03    = '3. Rendimentos Tributáveis, Deduções e Imposto sobre a Renda Retido na Fonte'
  Let $STitle04    = '4. Rendimentos Isentos e Não Tributáveis'
  Let $STitle05    = '5. Rendimentos Sujeitos à Tributação Exclusiva (rendimento líquido)'

  let $STitle06    = '6. Rendimentos Recebidos Acumuladamente - Art. 12-A da Lei n° 7.713, de 1988 (sujeitos à tributação exclusiva)'
  
  let $STitle07    = '7. Informações Complementares'
  let $STitle08    = '8. Responsável pelas Informações'
  let $STitle09    = 'Valores em reais'
      
  Let $LNumber101   = 'CNPJ / CPF'
  Let $LNumber102   = 'Nome Empresarial / Nome'
  
  Let $LNumber201   = 'CPF'
  Let $LNumber202   = 'Nome Completo'
  Let $LNumber204   = 'Matrícula'
  Let $LNumber203   = 'Natureza do Rendimento'
  
  Let $LNumber301   = '1. Total dos Rendimentos (inclusive férias)'
  Let $LNumber302   = '2. Contribução Previdenciária Oficial'
  Let $LNumber303   = '3. Contribuição a entidades de previdência complementar, pública ou privada, e a fundos de aposentadoria programada individual'
  Let $LNumber303a  = '(Fapi)(preencher também o quadro 7)'  
  let $LNumber304   = '4. Pensão alimentícia (preencher também o quadro 7)'
  Let $LNumber305   = '5. Imposto sobre a renda retido na fonte'
  
  Let $LNumber401   = '1. Parcela isenta dos proventos de aposentadoria, reserva remunerada, reforma e pensão (65 anos ou mais)'
  Let $LNumber402   = '2. Diárias e ajuda de custo'
  Let $LNumber403   = '3. Pensão e proventos de aposentadoria ou reforma por moléstia grave; proventos de aposentadoria ou reforma por'
  let $LNumber403a  = '      acidente em serviço'
  Let $LNumber404   = '4. Lucros e dividendos, apurados a partir de 1996, pagos por pessoa jurídica (lucro real, presumido ou arbitrado)'
  Let $LNumber405   = '5. Valores pagos ao titular ou sócio da microempresa ou empresa de pequeno porte, exceto pro labore, aluguéis'
  let $LNumber405a  = '      ou serviços prestados'
  Let $LNumber406   = '6. Indenizações por rescisão de contrato de trabalho, inclusive a título de PDV e acidente de trabalho'
  Let $LNumber407   = '7. Outros: '
  !let $LNumber407   = '07. Outros - Abono Pecuniario'
  
  Let $LNumber501   = '1. Décimo terceiro salário'
  let $LNumber502   = '2. Imposto sobre a renda retido na fonte sobre 13º salário'
  let $LNumber503   = '3. Outros'
  
  let $LNumber601   = '6.1 Número do processo: (especificar)'
  let $LNumber602   = 'Quantidade de meses '
  let $LNumber603   = 'Natureza do rendimento: (especificar)'
  let $LNumber601_1   = '1. Total dos rendimentos tributáveis (inclusive férias e décimo terceiro salário)'
  let $LNumber601_2   = '2. Exclusão: Despesas com a acão judicial'
  let $LNumber601_3   = '3. Dedução: Contribuição previdenciária oficial'
  let $LNumber601_4   = '4. Dedução: Pensão alimentícia (preencher também o quadro 7)'
  let $LNumber601_5   = '5. Imposto sobre a renda retido na fonte'
  let $LNumber601_6   = '6. Rendimentos isentos de pensão, proventos de aposentadoria ou reforma por moléstia grave ou aposentadoria ou reforma por'
  let $LNumber601_6a   = '     acidente em serviço'

  let $LNumber801   = 'Nome'
  let $LNumber802   = 'Data'
  let $LNumber803   = 'Assinatura'
  
  !let $LNumber901   = 'Aprovado pela IN/SRF n°1202000'
  let $LNumber901   = 'Aprovado pela IN RFB nº 1.682, de 28 de dezembro de 2016.'

end-procedure Create-Strings-Labels

!**************************************
begin-procedure Declare-Rows
!**************************************
  Let #R1  = 2
  let #R2  = #R1 * 6 
  let #R3  = #R1 * 8 
  let #R4  = #R1 * 11 
  let #R5  = #R1 * 19 + 1
  let #R6  = #R1 * 32 !- 1
  let #R7  = #R1 * 36 !- 1
  let #R8  = #R1 * 39
end-procedure Declare-Rows

!**************************************
begin-procedure Print-Data
!**************************************
 #debug show  ' Print-Data '
  Let #row = #R1 + 1
  Let #C70B = {C70} + 13
  Let #C70C = {C70} + 7
  Let #lines = 0
  Let #y = 1
  Let #page-count = 1
  let #curr_line =0
  let #desp_medico_tot=0
  move $Year to #Year
  let #Year = #Year + 1
  move #Year to $Exercise '9999'
  Graphic (#R1 ,1  ,130) box 6  {G0}
  Graphic (#R1 ,1  ,65) box 6  {G0}
  
  print-image (2,4)
  type         = GIF-FILE
  image-size   = (12,6)
  source       = $FileDir
   
  Alter-Printer Point-size = #SizeGrd1  Font-Type = Proportional Font = #FontStd
  Print $LTitle01                      (#row,23) Bold 
  Print $LTitle02                      (+1,18)
  Alter-Printer Point-size = #SizeGrd2  Font-Type = Proportional Font = #FontStd
  Print $LTitle03                      (+1,21) Bold
  Print $LTitle04                      (+1,32) Bold  
  Print $Exercise                      (,+1) Bold  
  
  Print $LTitle05                      (#row,76)
  Print $LTitle06                      (+1,77)
  Print $LTitle07                      (+2,86) Bold
  
  Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
  Print $Year                          (,+2) Bold
  graphic (+3 ,13  ,98) box 2  {G0}
  print 'Verifique as condições e o prazo para a apresentação da Declaração do Imposto sobre a Renda da Pessoa Física para este'     (,14,129) Bold
  print 'ano/calendário no sitío de Secretaria de Receita Federal do Brasil na Internet, no endereço <www.receita.fezenda.gov.br>'     (,14,129) Bold
  
  !Section one
  #debug show  ' Section One ---: ' $Emplid
  Print $STitle01                      (#R2,1) Bold
  Graphic (+1 ,1  ,130) box 2  {G0}
  Graphic (,1  ,{C49}) box 2  {G0}
  Print $LNumber101                    (,1)
  Print $LNumber102                    (,{C50})
  Print $CompanyCNPJ                   (+1,1,100) Edit 'BXX.XXX.XXX/XXXX-XX' 
  Print $CompanyNm                     (,{C50},87)
  !Section two
  #debug show  ' Section Two ---: ' $Emplid
  Print $STitle02                      (#R3,1) Bold
  Graphic (+1 ,1  ,130) box 4 {G0}
  Graphic (,1  ,130) box 2  {G0}
  Graphic (,1  ,{C49}) box 2  {G0}
  Graphic (,1  ,{C109}) box 2  {G0}
  Print $LNumber201                    (,1)
  Print $LNumber202                    (,{C50})
  Print $LNumber204                    (,{C110})
  Print $WorkCard                      (+1,1) Edit 'BXXX.XXX.XXX-XX' 
  Print $Name                          (,{C50},79)
  print $Emplid                        (,{C110}) edit 'BXXXXXXXXXXX'
  Print $LNumber203                    (+1,1)
  If $Nature = '1' 
    Print 'Rendimento do Trabalho Assalariado'     (+1,1,129)
  else
    Print 'Rendimento do Trabalho não Assalariado'  (+1,1,129)
  end-if

  !Section three
  #debug show  ' Section Three ---: ' $Emplid
  Print $STitle03                      (#R4,1) Bold
  print $STitle09                      (,118) bold  
  graphic (,1  ,130) box 10 {G0}
  graphic (,1  ,{C109}) box 10 {G0}
  Print $LNumber301                    (+1,1)
  get $addstring from pin (0)
  get $substring from pin (1)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  let #tottreeone= #rslt_value
  
  graphic (+1,1  ,130) box 2 {G0}
  Print $LNumber302                    (+1,1)
  get $addstring from pin (2)
  get $substring from pin (3)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  print $LNumber303                    (+1,1)
  print $LNumber303a                   (+1,1)  
  get $addstring from pin (4)
  get $substring from pin (5)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  
  graphic (+1,1  ,130) box 2 {G0}
  Print $LNumber304                    (+1,1)
  get $addstring from pin (6)
  get $substring from pin (7)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  print $LNumber305                    (+2,1)
  get $addstring from pin (8)
  get $substring from pin (9)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  
   let #R5= #current-line + 2

  !Section four
  #debug show  ' Section Four ---: ' $Emplid
  Print $STitle04                      (#R5,1) Bold
  print $STitle09                      (,118) bold  
  graphic (,1 ,130) box 14 {G0}
  graphic (,1 ,{C109}) box 14  {G0}
  Print $LNumber401                    (+1,1)
  get $addstring from pin (10)
  get $substring from pin (11)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1,1  ,130) box 2 {G0}
  Print $LNumber402                    (+1,1)
  get $addstring from pin (12)
  get $substring from pin (13)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  print $LNumber403                    (+1,1)
  get $addstring from pin (14)
  get $substring from pin (15)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  
  Print $LNumber403a                   (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1,1  ,130) box 2 {G0}
  Print $LNumber404                    (+1,1)
  get $addstring from pin (16)
  get $substring from pin (17)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  print $LNumber405                    (+1,1)
  get $addstring from pin (18)
  get $substring from pin (19)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  
  Print $LNumber405a                   (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1,1  ,130) box 2 {G0}
  
  print $LNumber406                    (+1,1)
  get $addstring from pin (20)
  get $substring from pin (21)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Print #rslt_value                    (,114) edit 9,999,999,999.99c
  
  get $addstring from pin (22)
  get $substring from pin (23)
  let $DONE='0'

  Let $LNumber407Adj = $LNumber407
  Let #rslt_value7 = 0
  Let #rslt_value8 = 0

  do valid_values
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  
  If #rslt_value > 0
     Let $LNumber407Adj = $LNumber407Adj || 'Abono Pecuniário '
     Let #rslt_value7 = #rslt_value
  End-If

  get $addstring from pin (24)
  get $substring from pin (25)
  let $DONE='0'
  do valid_values
  Let $RequirePINNM = 'Y'
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  Let $RequirePINNM = 'N'
  
  If #rslt_value > 0  
     Let $List_Pin_Nm = Substr($List_Pin_Nm,1,60)
     Let $LNumber407Adj = $LNumber407Adj || $List_Pin_Nm
     Let #rslt_value8 = #rslt_value
  End-If
  
  Let #rslt_value = #rslt_value7 + #rslt_value8

  print $LNumber407Adj                 (+2,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c

  let #rslt_value_four=#rslt_value 
  let #R6 = #current-line + 2
  
  !Section five
  #debug show  ' Section Five ---: ' $Emplid
  Print $STitle05                      (#R6,1) Bold
  print $STitle09                      (,118) bold  
  graphic (,1  ,130) box 6 {G0}
  graphic (,1  ,{C109}) box 6  {G0}
  Print $LNumber501                    (+1,1)
  get $addstring from pin (26)
  get $substring from pin (27)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1,1  ,130) box 2 {G0}

  Print $LNumber502                    (+1,1)
  get $addstring from pin (28) 
  get $substring from pin (29)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1,1  ,130) box 2 {G0}
  
  print $LNumber503                    (+1,1)
  get $addstring from pin (30)
  get $substring from pin (31) 
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  let #rslt_valueotr=#rslt_value
  
  get $addstring from pin (32)
  get $substring from pin (33)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  let #rslt_valueplr1=#rslt_value   
  get $addstring from pin (34)
  get $substring from pin (35)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  let #rslt_valueplr2=#rslt_value    
  get $addstring from pin (36)
  get $substring from pin (37) 
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  let #rslt_valueplr3=#rslt_value 
  let #rslt_value = #rslt_valueotr + #rslt_valueplr1 + #rslt_valueplr2  + #rslt_valueplr3
  let #totalplr = #rslt_valueplr1 + #rslt_valueplr2 + #rslt_valueplr3
  let #totalplr_totincome = #rslt_valueplr1  
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  
  let #R7= #current-line+2
  
  !Section six
  #debug show  ' Section Six ---: ' $Emplid
  do section_six
 
  !Section seven
  #debug show  ' Section Seven ---: ' $Emplid
  print $STitle07                      (#R8,1) bold
  let #seveninipos= #current-line +1
  let #last-printed-line = #seveninipos
  let #lines = 1
  let #rslt_saved = #rslt_value
  let #rslt_value=0
  let #Fapi_tot=0
  do fapi_section
  let #fapi_depen_row = #current-line
! Removed from IREN 2017 layout
!  if #Fapi_tot<>0
!     print #Fapi_tot  (#Fapi_ini_row,114) edit 9,999,999,999.99c
!  end-if
  print '  '          (#fapi_depen_row,1) 
  let #rslt_value = #rslt_saved

  If #rslt_value7 > 0 or #rslt_value8 > 0
     Let #rslt_value = #rslt_value7 + #rslt_value8
     print '   Rendimentos isentos outros:' (+2,1)
! Removed from IREN 2017 layout
!     print #rslt_value                    (,114) edit 9,999,999,999.99c
     If #rslt_value7 > 0
        print 'Abono Pecuniário:'         (+1,8)
        let $mask-amount = edit(#rslt_value7,'b99,999,999,999.99c')
        let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
        print $mask-amount  (,+1)
! Removed from IREN 2017 layout
!        print #rslt_value7               (,93) edit 99,999,999,999.99c
     End-If
     If #rslt_value8 > 0
        let $List_Pin_Nm = rtrim(ltrim($List_Pin_Nm,' '),' ') || ':'
        print $List_Pin_Nm               (+1,8)
        let $mask-amount = edit(#rslt_value8,'b99,999,999,999.99c')
        let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
        print $mask-amount               ( ,+1)
! Removed from IREN 2017 layout
!        print #rslt_value8               (,93) edit 99,999,999,999.99c
     End-If
  End-If     

  if #totalplr <> 0 
     do valid_lines
     print '   Os rendimentos seguintes estão informados na linha 01, quadro 3 e/ou linha 03, quadro 05: '  (+2,1)
     print ' Rendimentos do trabalho assalariado:' (+1,8)
! Removed from IREN 2017 layout
!     print #tottreeone                              (,113)  edit 99,999,999,999.99c     
     let $mask-amount = edit(#tottreeone,'b99,999,999,999.99c')
     let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
     print $mask-amount                            ( ,39)

     do valid_lines
     print ' Participação nos Lucros ou Resultados (PLR):' (+1,8)
! Removed from IREN 2017 layout
!     print #totalplr_totincome                              (,113)  edit 99,999,999,999.99c
!     print #totalplr                                (,113)  edit 99,999,999,999.99c
     let $mask-amount = edit(#totalplr,'b99,999,999,999.99c')
     let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
     print $mask-amount                            ( ,48)
     let #rslt_value_four = 0
     let $Descrip_name = ''
     let #tottreeone=0 
  end-if
  let $stop='N'   
  evaluate $HPP_SOURCE  
  when ='1' !Annual Page
         do by_page
         break
  when ='2' !Payroll
         do by_payroll
         break
  when= '3'  !Both
         do by_both
         break   
  end-evaluate
  
  let $stop='N'
  get $addstring from pin (38)
  get $substring from pin (39)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  if #rslt_value > 0
    if $stop='N'
      print '   Ressarcimento de Despesas Médico Odonto Hospitalares' (+1,1)
      let #Desp_row=#current-line 
      let $stop='Y'
     do valid_lines
    end-if  
      print ' A) Descontos com Assitência Médica/Odontológica/Hospitalar' (+1,8)
      print #rslt_value                    (,93) edit 99,999,999,999.99c
      let #desp_medico_tot=#desp_medico_tot+#rslt_value
     do valid_lines
  end-if
  get $addstring from pin (40)
  get $substring from pin (41)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  if #rslt_value > 0
    if $stop='N'
      print '   Ressarcimento de Despesas Médico Odonto Hospitalares' (+1,1)
      let #Desp_row=#current-line 
      let $stop='Y'
     do valid_lines
    end-if
     print ' B) Despensas Médicas: ' (+1,8)
     print #rslt_value                    (,93) edit 99,999,999,999.99c
     let #desp_medico_tot=#desp_medico_tot+#rslt_value
    do valid_lines
  end-if
  get $addstring from pin (42)
  get $substring from pin (43)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  if #rslt_value > 0
    if $stop='N'
      print '   Ressarcimento de Despesas Médico Odonto Hospitalares' (+1,1)
      let #Desp_row=#current-line 
      let $stop='Y'
     do valid_lines 
    end-if
      print ' C) Rembolso de Despensas Médicas pagos pelo Empregado à Empresa' (+1,8)
      print #rslt_value                                   (,93) edit 99,999,999,999.99c
      let #desp_medico_tot=#desp_medico_tot+#rslt_value
     do valid_lines
  end-if
  get $addstring from pin (44)
  get $substring from pin (45)
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  if #rslt_value > 0
    if $stop='N'
      print '   Ressarcimento de Despesas Médico Odonto Hospitalares' (+1,1)
      let #Desp_row=#current-line 
      let $stop='Y'
     do valid_lines
    end-if
      print ' D ) Desp. Médica - Diferença entre o pago pelo Empregado e o reembolsado pela empresa' (+1,8)
      print #rslt_value                                   (,93)  edit 99,999,999,999.99c
      let #desp_medico_tot=#desp_medico_tot+#rslt_value
  end-if  
    let #curr_line = #current-line
    if #desp_medico_tot<>0
      print #desp_medico_tot                                                                                    (#Desp_row,114)  edit 9,999,999,999.99c
    end-if
     print ' '                                                                   (#curr_line,1)
    do valid_lines
    
  do Pension_section
  if #totalplr <> 0 
     do valid_lines
     print '   O total informado na linha 03 do Quadro 5 já inclui o valor total pago a título de PLR correspondente a' (+2,1)
     let $mask-amount = edit(#totalplr,'b99,999,999,999.99c')
     let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
     print $mask-amount                            ( ,80)
     do valid_lines
     let #totalplr_totincome = 0
     let #totalplr = 0
  end-if   
  let #LAST_LINE_PRINTED=#current-line
  
  let #R8=#seveninipos+#lines
  let #tope_lineas=#sqr-max-lines -3
  let $IA = $Comments
  let #lines =  #lines + ((length($IA) / 129) + #Numlines)
  let #finalline= #lines
  let #BL = #seveninipos
  let #BL2 = #BL + #lines
   if #BL2 >= #tope_lineas -5
    let #DIFBL= #BL2 - #tope_lineas
    let #BL2 = #tope_lineas
    let #finalline= #tope_lineas - #seveninipos +1
    if length($IA) > 0
       let #lia = (length($IA) / 129) + 1
       let #temp=#current-line +1
       print $IA (#temp, 1) wrap 129 #lia
    end-if
    graphic (#seveninipos,1  ,130) box #finalline {G0}
! Removed from IREN 2017 layout    
!    print $CompanyNm                     (92,1,100)
!    print $LNumber102                    (,+1)
!    print $CompanyCNPJ                   (,+2) edit 'BXX.XXX.XXX/XXXX-XX'
    let #lines=#DIFBL + 1
    let #y = #y + 1
    new-page
    let #seveninipos=1
    let #BL = 1
    if #lines > 0 
     if #lines < 1 
      let #lines=1
     end-if
     graphic (#seveninipos,1  ,130) box #lines {G0}
    end-if
   else
   if length($IA) > 0
     let #lia = (length($IA) / 129) + 1
     if (#BL + #lines) >= #tope_lineas
       let #y = #y + 1
       let #lines = #lines + (94 - (#BL + #lines))
       print $IA (#R8,1) wrap 129 #lia
       let #subbox = #lia - #lines
       let $PAD = 'Y'
     else
       let #LAST_LINE_PRINTED=#LAST_LINE_PRINTED + 1  
       print $IA (#LAST_LINE_PRINTED, 1) wrap 129 #lia  
     end-if
   end-if
    graphic (#seveninipos,1  ,130) box #finalline {G0} 
   end-if 
  
  !Section eight
  #debug show  ' Section Eight ---: ' $Emplid
  if (#BL + #lines + 1) >= #tope_lineas and $PAD = 'Y'
    print $STitle08                      (+#subbox,1) bold
  else
   if #lines > 0
    if (#BL + #lines + 1) >= #tope_lineas
       let #y = #y + 1
       let #BL = #sqr-max-lines - 1 - #BL - #lines
       let #BL= trunc(#BL,0)
       print $STitle08                      (+#BL,1) bold
    else
       let #BL = #BL + #lines + 1 
       let #BL= trunc(#BL,0)
       print $STitle08                      (#BL,1) bold
    end-if
   else
    let #BL = #BL + #lines + 1
    let #BL = #current-line +1
    !let #BL= trunc(#BL,0)
    print $STitle08                      (#BL,1) bold
   end-if
  end-if
  
  Graphic (+1 ,1 ,130) box 2 {G0}
  Graphic (,1 ,{C65}) box 2  {G0}
  Graphic (,1,{C85}) box 2 {G0}
  print $LNumber801                    (,1)
  print $LNumber802                    (,{C66})
  print $LNumber803                    (,{C86})
  print $HRContact                     (+1,1)

! Removed from IREN 2017 layout
!  print $CompanyNm                     (+1,1,100)
!  print $LNumber102                                        (,+1)
!  print $CompanyCNPJ                   (,+2) edit 'BXX.XXX.XXX/XXXX-XX'

  do Format-DateTime($Date, $Date1, {DEFDMY}, '','') 
  Print $Date1                         (,{C66}) 
  print $LNumber901                    (+1,1)
  !print $Prcs_Process_Instance  (+2,1)                                                
! Removed from IREN 2017 layout
!  print $Emplid                  (+2,1)                                                
!  print $Name                    (, +3)   
  !print $DateBegan              (, +5)
  
  if $PAD = 'Y' 
    Let #lsb = #current-line - 8
    Graphic (1 ,1  ,130) box #lsb {G0}
  end-if
  
  new-page

     
end-procedure Print-Data 

!**************************************
begin-procedure Fill-Rec-Array
!**************************************
Let $Rec1 = 'GPBR_IREN_TXBL'
Let $Rec2 = 'GPBR_IREN_NTXBL'
Let $Rec3 = 'GPBR_IREN_EXCL'
Let $Rec4 = 'GPBR_IREN_COMP'

create-array name=records size=4 field=name:char
create-array name=pin size=50 field=pinstring:char
put $Rec1 into records (0) name
put $Rec2 into records (1) name
put $Rec3 into records (2) name
put $Rec4 into records (3) name
Let #I = 0
while #I <= 3
 get $name from records (#I)
 Let $WC = 'WHERE X.FIELDNAME = ''' || $name || ''''
begin-select
X.FIELDNAME
X.FIELDVALUE
  let $FV = rtrim(&X.FIELDVALUE,' ')
  let $FN = rtrim(&X.FIELDNAME,' ')
  Do Get-Pin-String
From PSXLATITEM X
[$WC]
AND X.EFFDT=(SELECT MAX(J.EFFDT) FROM PSXLATITEM J WHERE J.FIELDNAME=X.FIELDNAME AND J.FIELDVALUE=X.FIELDVALUE AND J.EFFDT <=$EndDt)
!order by X.FIELDVALUE, X.FIELDNAME
order by X.FIELDNAME,X.XLATLONGNAME
end-select
add 1 to #I
end-while
end-procedure Fill-Rec-Array

!**************************************
begin-procedure Get-Pin-String
!**************************************
Let $pins01a = '('
Let $pins01s = '('
Let $pins02a = '('
let $pins02s = '('
Let $pins03a = '('
Let $pins03s = '('
Let $pins04a = '('
Let $pins04s = '('
Let $pins05a = '('
Let $pins05s = '('
Let $pins06a = '('
Let $pins06s = '('
Let $pins07a = '('
Let $pins07s = '('
Let $pins08a = '('
Let $pins08s = '('
let $Table = 'PS_' || $name || ' A'
let $WClause2 = ' AND A.' || $name || ' =''' || $FV || ''' AND A.EFFDT IN (SELECT MAX(DT.EFFDT)'
let $WClause2 = $WClause2 || ' FROM PS_' || $name || ' DT WHERE DT.COMPANY = A.COMPANY'
!let $WClause2 = $WClause2 ||  ' AND DT.' || $name || ' = A.' || $name ||  ' and DT.EFFDT <= ''' || $EndDt || ''')'
let $WClause2 = $WClause2 ||  ' AND DT.' || $name || ' = A.' || $name || ' and DT.EFFDT >= ''' || $MAXDT || ''' and DT.EFFDT <= ''' || $EndDt || ''')' 
begin-select
A.GPBR_PIN_IREN_NUM
A.GPBR_ERDD_SIGN
  
  let $NPin = &A.GPBR_PIN_IREN_NUM
  Let $NPin = To_char(trunc(to_number($NPin),0))
  let $Sign = rtrim(&A.GPBR_ERDD_SIGN, ' ')
  evaluate $FV
   when = '01'
    if $Sign = 'A'
     let $pins01a = $pins01a || $NPin || ','
    else
     let $pins01s = $pins01s || $NPin || ','
    end-if
   break
   when = '02'
    if $Sign = 'A'
     let $pins02a = $pins02a || $NPin || ','
    else
     let $pins02s = $pins02s || $NPin || ','
    end-if
   break
   when = '03'
    if $Sign = 'A'
     let $pins03a = $pins03a || $NPin || ','
    else
     let $pins03s = $pins03s || $NPin || ','
    end-if
   break
   when = '04'
    if $Sign = 'A'
     let $pins04a = $pins04a || $NPin || ','
    else
     let $pins04s = $pins04s || $NPin || ','
    end-if    
   break
   when = '05'
    if $Sign = 'A'
     let $pins05a = $pins05a || $NPin || ','
    else
     let $pins05s = $pins05s || $NPin || ','
    end-if   
   break
   when = '06'
    if $Sign = 'A'
     let $pins06a = $pins06a || $NPin || ','
    else
     let $pins06s = $pins06s || $NPin || ','
    end-if   
   break
   when = '07'
    if $Sign = 'A'
     let $pins07a = $pins07a || $NPin || ','
    else
     let $pins07s = $pins07s || $NPin || ','
    end-if    
   when = '08'
    if $Sign = 'A'
     let $pins08a = $pins08a || $NPin || ','
    else
     let $pins08s = $pins08s || $NPin || ','
    end-if       
   break   
  end-evaluate
FROM 
[$Table]
where A.COMPANY = $Company
[$WClause2]
end-select
Evaluate $FV
 when = '01'
   Do arrange-string($pins01a,$S01a)
   Do arrange-string($pins01s,$S01s)
 break
 when = '02'
   Do arrange-string($pins02a,$S02a)
   Do arrange-string($pins02s,$S02s)
 break
 when = '03'
   Do arrange-string($pins03a,$S03a)
   Do arrange-string($pins03s,$S03s)  
 break
 when = '04'
   Do arrange-string($pins04a,$S04a)
   Do arrange-string($pins04s,$S04s)  
 break
 when = '05'
   Do arrange-string($pins05a,$S05a)
   Do arrange-string($pins05s,$S05s) 
 break
 when = '06'
   Do arrange-string($pins06a,$S06a)
   Do arrange-string($pins06s,$S06s) 
 break
 when = '07'
   Do arrange-string($pins07a,$S07a)
   Do arrange-string($pins07s,$S07s)  
 break
 when = '08'
   Do arrange-string($pins08a,$S08a)
   Do arrange-string($pins08s,$S08s)
 break 
End-Evaluate
end-procedure Get-Pin-String

!**************************************
begin-procedure arrange-string($in, :$out)
!**************************************
 If (length($in) - 1) > 0  
   let $out = substr($in,1,(length($in) - 1)) || ')'
 else
   let $out = ''
 end-if
Do fill-pin-array($out, #position)
Let #position = #position + 1
end-procedure

!**************************************
begin-procedure fill-pin-array($val, #position)
!**************************************
put $val into pin (#position) pinstring
end-procedure

!**************************************
begin-procedure get-pin-array
!**************************************
Let #J = 0
while #J < 32
  get $pin_array from pin (#J)
  let #J = #J + 1
end-while
end-procedure get-pin-array

!**************************************
begin-procedure get-rslt-value($add_string, $sub_string, $Emplid, $BgnDt, $EndDt, #Emplrcd,$Company, $RequirePINNM, :#rslt_value, :$List_Pin_Nm)
!**************************************
let #add_value = 0
let #sub_value = 0
let #rslt_value = 0
let $Descrip_name = ''
if $add_string <> ''
begin-select
SUM(ED1.CALC_RSLT_VAL + ED1.CALC_ADJ_VAL) &ImportED1
 let #add_value = &ImportED1
from PS_GP_RSLT_SEG_VW RS1, 
PS_GP_RSLT_ERN_DED ED1
,PS_GP_SEG_GUIDE_WA SG1
where RS1.EMPLID = $Emplid
!AND RS1.EMPL_RCD = #Emplrcd
and RS1.CALC_TYPE = 'P'
AND RS1.RSLT_VER_NUM = (SELECT MAX(RS2.RSLT_VER_NUM) 
                      FROM PS_GP_RSLT_SEG_VW RS2
                      WHERE RS1.EMPLID = RS2.EMPLID 
                      !AND RS1.EMPL_RCD = RS2.EMPL_RCD 
                      AND RS1.CAL_ID = RS2.CAL_ID )
AND RS1.RSLT_REV_NUM = 1
AND RS1.CALC_ACTION <> 'V' 
AND RS1.PYE_CALC_STAT >= '50'
AND RS1.PYMT_DT >= $BgnDt
AND RS1.PYMT_DT <= $EndDt
AND RS1.EMPLID = ED1.EMPLID 
!AND RS1.EMPL_RCD = ED1.EMPL_RCD 
AND RS1.CAL_RUN_ID = ED1.CAL_RUN_ID 
AND RS1.GP_PAYGROUP = ED1.GP_PAYGROUP 
AND RS1.CAL_ID = ED1.CAL_ID 
AND RS1.ORIG_CAL_RUN_ID = ED1.ORIG_CAL_RUN_ID 
AND RS1.RSLT_SEG_NUM = ED1.RSLT_SEG_NUM
and ED1.PIN_NUM in [$add_string] 
and ED1.EMPLID=SG1.EMPLID 
!and ED1.EMPL_RCD=SG1.EMPL_RCD 
and ED1.CAL_RUN_ID=SG1.CAL_RUN_ID 
and ED1.ORIG_CAL_RUN_ID=SG1.ORIG_CAL_RUN_ID 
and ED1.CAL_ID=SG1.CAL_ID 
and ED1.GP_PAYGROUP=SG1.GP_PAYGROUP 
and SG1.COMPANY=$Company   
end-select
end-if
if $sub_string <> ''
begin-select
SUM(ED2.CALC_RSLT_VAL) &ImportED2
  let #sub_value = &ImportED2
FROM PS_GP_RSLT_SEG_VW RS3, 
PS_GP_RSLT_ERN_DED ED2
,PS_GP_SEG_GUIDE_WA SG2 
WHERE RS3.EMPLID = $Emplid
!AND RS3.EMPL_RCD = #Emplrcd
AND RS3.CALC_TYPE = 'P'
AND RS3.RSLT_VER_NUM = (SELECT MAX(RS4.RSLT_VER_NUM) 
                      FROM PS_GP_RSLT_SEG_VW RS4
                      WHERE RS3.EMPLID = RS4.EMPLID 
                      !AND RS3.EMPL_RCD = RS4.EMPL_RCD 
                      AND RS3.CAL_ID = RS4.CAL_ID )
AND RS3.RSLT_REV_NUM = 1
AND RS3.CALC_ACTION <> 'V' 
AND RS3.PYE_CALC_STAT >= '50'
AND RS3.PYMT_DT >= $BgnDt
AND RS3.PYMT_DT <= $EndDt
AND RS3.EMPLID = ED2.EMPLID 
!AND RS3.EMPL_RCD = ED2.EMPL_RCD 
AND RS3.CAL_RUN_ID = ED2.CAL_RUN_ID 
AND RS3.GP_PAYGROUP = ED2.GP_PAYGROUP 
AND RS3.CAL_ID = ED2.CAL_ID 
AND RS3.ORIG_CAL_RUN_ID = ED2.ORIG_CAL_RUN_ID 
AND RS3.RSLT_SEG_NUM = ED2.RSLT_SEG_NUM
and ED2.PIN_NUM in [$sub_string]
and ED2.EMPLID=SG2.EMPLID 
!and ED2.EMPL_RCD=SG2.EMPL_RCD 
and ED2.CAL_RUN_ID=SG2.CAL_RUN_ID 
and ED2.ORIG_CAL_RUN_ID=SG2.ORIG_CAL_RUN_ID 
and ED2.CAL_ID=SG2.CAL_ID 
and ED2.GP_PAYGROUP=SG2.GP_PAYGROUP 
and SG2.COMPANY=$Company   
end-select
end-if

let #rslt_value = #add_value - #sub_value

IF $RequirePINNM = 'Y' AND #rslt_value <> 0

  Let $NewAdd_String = replace($add_string, ')', '')
  Let $NewAdd_String = replace($NewAdd_String, '(', '')
  Let $NewSub_String = replace($sub_string, ')', '')
  Let $NewSub_String = replace($NewSub_String, '(', '')
  
  If $NewAdd_String <> ''
     Let $New_String = '(' || $NewAdd_String
     If $NewSub_String <> ''
        Let $New_String = $New_String || ',' || $NewSub_String || ')'
     else
        Let $New_String = $New_String || ')'
     End-if
  Else
     If $NewSub_String <> ''
        Let $New_String = '(' || $NewSub_String || ')'
     End-if
  End-if

  Let $List_Pin_Nm = 'X'

begin-select distinct 
GP2.PIN_NM &pin_name_8

    If $List_Pin_Nm = 'X'
      Let $List_Pin_Nm = &pin_name_8
    Else
      Let $List_Pin_Nm = $List_Pin_Nm || ',' || &pin_name_8
    End-If 

FROM PS_GP_RSLT_SEG_VW RS3
    ,PS_GP_RSLT_ERN_DED ED2
    ,PS_GP_SEG_GUIDE_WA SG2 
    ,PS_GP_PIN GP2
WHERE RS3.EMPLID = $Emplid
  AND RS3.CALC_TYPE = 'P'
  AND RS3.RSLT_VER_NUM = (SELECT MAX(RS4.RSLT_VER_NUM) 
                             FROM PS_GP_RSLT_SEG_VW RS4
                            WHERE RS3.EMPLID = RS4.EMPLID 
                              AND RS3.CAL_ID = RS4.CAL_ID )
  AND RS3.RSLT_REV_NUM = 1
  AND RS3.CALC_ACTION <> 'V' 
  AND RS3.PYE_CALC_STAT >= '50'
  AND RS3.PYMT_DT >= $BgnDt
  AND RS3.PYMT_DT <= $EndDt
  AND RS3.EMPLID = ED2.EMPLID 
  AND RS3.CAL_RUN_ID = ED2.CAL_RUN_ID 
  AND RS3.GP_PAYGROUP = ED2.GP_PAYGROUP 
  AND RS3.CAL_ID = ED2.CAL_ID 
  AND RS3.ORIG_CAL_RUN_ID = ED2.ORIG_CAL_RUN_ID 
  AND RS3.RSLT_SEG_NUM = ED2.RSLT_SEG_NUM
  and ED2.PIN_NUM in [$New_String]
  and ED2.EMPLID=SG2.EMPLID 
  and ED2.CAL_RUN_ID=SG2.CAL_RUN_ID 
  and ED2.ORIG_CAL_RUN_ID=SG2.ORIG_CAL_RUN_ID 
  and ED2.CAL_ID=SG2.CAL_ID 
  and ED2.GP_PAYGROUP=SG2.GP_PAYGROUP 
  and SG2.COMPANY=$Company  
  and GP2.PIN_NUM=ED2.PIN_NUM
end-select

END-IF

  
end-procedure get-rslt-value

!**************************************
begin-procedure Get-Company-Desc
!**************************************
 #debug show ' Get-Company-Desc '
let $CompanyNm = ''
begin-select
CO.DESCR
  let $CompanyNm  = rtrim(&CO.DESCR, ' ')
from PS_COMPANY_TBL CO
where CO.COMPANY = $Company
and   CO.EFFDT = (select MAX(C.EFFDT) 
                  from PS_COMPANY_TBL C
                  where C.COMPANY = CO.COMPANY
                  and C.EFFDT <= $EndDt)
end-select
 #debug show ' $curr_language_cd ---: ' $curr_language_cd 
if $curr_language_cd <> $Psoptions_Language_Cd
begin-select
CO1.DESCR
  let $CompanyNm  = rtrim(&CO1.DESCR, ' ')
from PS_COMPNY_TBL_LANG CO1
where CO1.COMPANY = $Company
and   CO1.EFFDT = (select MAX(C.EFFDT) 
                  from PS_COMPANY_TBL C
                  where C.COMPANY = CO1.COMPANY
                  and C.EFFDT <= $EndDt)
and CO1.LANGUAGE_CD=$curr_language_cd
end-select                    
end-if
end-procedure Get-Company-Desc

!**************************************
begin-procedure Get-Company-CNPJ
!**************************************
 #debug show ' Get-Company-CNPJ '
Let $CompanyCNPJ = ''
begin-select  
CNPJ.ESTAB_ID_BRA
  Let $CompanyCNPJ = &CNPJ.ESTAB_ID_BRA
FROM PS_ESTAB_ID_BRA CNPJ
WHERE CNPJ.ESTABID = $Estabid
AND CNPJ.ESTAB_ID_TYPE_BRA = 'CNPJ'
AND CNPJ.EFFDT =(SELECT MAX(ES2.EFFDT) FROM PS_ESTAB_ID_BRA ES2 WHERE CNPJ.ESTAB_ID_BRA=ES2.ESTAB_ID_BRA
AND ES2.EFFDT <= CNPJ.EFFDT)
end-select
end-procedure Get-Company-CNPJ

!**************************************
begin-procedure Get-National-ID
!**************************************
 #debug show ' Get-National-ID '
begin-SELECT
WK.NATIONAL_ID
 Let $WorkCard = rtrim(&WK.NATIONAL_ID,' ')
FROM PS_PERS_NID WK
WHERE WK.NATIONAL_ID_TYPE = 'CPF' AND WK.EMPLID = $Emplid
end-select
end-procedure Get-National-ID

!**************************************
begin-procedure Get-Dep-NatID ($Emplid, $DId, :$DNa)
!**************************************
 #debug show '      Get-Dep-NatID '
Let $DNa = ''
begin-select
NID.NATIONAL_ID
  Let $DNa = RTRIM(&NID.NATIONAL_ID, ' ')
FROM PS_DEP_BENEF_NID NID
WHERE NID.EMPLID = $Emplid
AND NID.NATIONAL_ID_TYPE = 'CPF'
AND DEPENDENT_BENEF = $DId
end-select
end-procedure

!**************************************
begin-procedure Sub-query ($Emplid, #Emplrcd, $EndDt, $DId, $type, :$Subquery)
!**************************************
Let $Subquery = ' (SELECT SQB.PIN_NUM FROM PS_GPBR_RECBEN_REL SQA, PS_GP_PIN SQB, PS_GP_RCP_PYE_DTL SQD'
!let $Subquery = $Subquery || ' WHERE SQA.EMPLID = ''' || $Emplid || ''' AND SQA.EMPL_RCD = ' || to_char(#Emplrcd)
let $Subquery = $Subquery || ' WHERE SQA.EMPLID = ' || $Emplid
Let $Subquery = $Subquery || ' AND SQA.EFFDT = (SELECT MAX(SQC.EFFDT) FROM PS_GPBR_RECBEN_REL SQC'
!Let $Subquery = $Subquery || ' where SQC.EMPLID = SQA.EMPLID and SQC.EMPL_RCD = SQA.EMPL_RCD'
let $Subquery = $Subquery || ' where SQC.EMPLID = SQA.EMPLID '
Let $Subquery = $Subquery || ' AND SQC.EFFDT <= ''' || $EndDt || ''' ) AND SQB.PIN_NUM = SQD.PIN_NUM'
!let $Subquery = $Subquery || ' AND SQA.EMPLID = SQD.EMPLID AND SQA.EMPL_RCD = SQD.EMPL_RCD'
let $Subquery = $Subquery || ' AND SQA.EMPLID = SQD.EMPLID'
Let $Subquery = $Subquery || ' AND SQA.DEPENDENT_BENEF = ' || $DId || ' AND SQA.RECIPIENT_ID = SQD.RECIPIENT_ID'
Let $Subquery = $Subquery || ' AND SQD.EFFDT = (SELECT MAX(SQE.EFFDT) FROM PS_GP_RCP_PYE_DTL SQE WHERE SQE.EMPLID = SQA.EMPLID'
!let $Subquery = $Subquery || ' AND SQE.EMPL_RCD = SQA.EMPL_RCD AND SQE.EFFDT <= ''' || $EndDt || ''') AND SQB.PIN_CATEGORY = ''' || $type || ''')'
let $Subquery = $Subquery || ' AND SQE.EFFDT <= ''' || $EndDt || ''') AND SQB.PIN_CATEGORY = ''' || $type || ''')'
end-procedure Sub-query
!**************************************
begin-procedure Get-Contact-Name
!**************************************
Begin-Select
SP.NAME_DISPLAY

  Let $HRContact = rtrim(&SP.NAME_DISPLAY, ' ')
  
FROM PS_PERSON_NAME SP 
WHERE SP.EMPLID = $Contact
End-Select
end-procedure Get-Contact-Name

!**************************************
begin-procedure Get-Print-Seq
!**************************************
Let $orderby = 'ORDER BY '
begin-select
GPS.GPBR_SEQ01
GPS.GPBR_ASC_DESC01
GPS.GPBR_SEQ02
GPS.GPBR_ASC_DESC02
GPS.GPBR_SEQ03
GPS.GPBR_ASC_DESC03
GPS.GPBR_SEQ04
GPS.GPBR_ASC_DESC04
GPS.GPBR_SEQ05
GPS.GPBR_ASC_DESC05
      MOVE &GPS.GPBR_SEQ01        TO   $GPBR_SEQ01
      MOVE &GPS.GPBR_ASC_DESC01   TO   $GPBR_ASC_DESC01
      MOVE &GPS.GPBR_SEQ02        TO   $GPBR_SEQ02
      MOVE &GPS.GPBR_ASC_DESC02   TO   $GPBR_ASC_DESC02
      MOVE &GPS.GPBR_SEQ03        TO   $GPBR_SEQ03
      MOVE &GPS.GPBR_ASC_DESC03   TO   $GPBR_ASC_DESC03
      MOVE &GPS.GPBR_SEQ04        TO   $GPBR_SEQ04
      MOVE &GPS.GPBR_ASC_DESC04   TO   $GPBR_ASC_DESC04
      MOVE &GPS.GPBR_SEQ05        TO   $GPBR_SEQ05
      MOVE &GPS.GPBR_ASC_DESC05   TO   $GPBR_ASC_DESC05
      Do Set-Sequence($GPBR_SEQ01,$GPBR_ASC_DESC01,$orderby)
      Do Set-Sequence($GPBR_SEQ02,$GPBR_ASC_DESC02,$orderby)
      Do Set-Sequence($GPBR_SEQ03,$GPBR_ASC_DESC03,$orderby)
      Do Set-Sequence($GPBR_SEQ04,$GPBR_ASC_DESC04,$orderby)
      Do Set-Sequence($GPBR_SEQ05,$GPBR_ASC_DESC05,$orderby)
from PS_GPBR_SORTID GPS
where GPS.GPBR_SORTID = $Sortid
and   GPS.EFF_STATUS  = 'A'
and   GPS.EFFDT       = (select MAX(GPS1.EFFDT) from PS_GPBR_SORTID GPS1
                         where GPS1.GPBR_SORTID = GPS.GPBR_SORTID
                         and   GPS1.EFF_STATUS  = GPS.EFF_STATUS
                         and   GPS1.EFFDT       <= $EndDt)
end-select
If length(RTRIM($orderby,' ')) > 8
   let $orderby = substr($orderby,1,(length($orderby) - 1))
 else
   let $orderby = ''
 end-if
end-procedure Get-Print-Seq

begin-procedure Set-Sequence ($seq, $order, :$orderby)
if $order = 'Y'
  Let $AscDesc = 'DESC'
else
  Let $AscDesc = ''
end-if
Evaluate $seq
when = '0010'
 let $orderby = $orderby ||  'A.COMPANY '        || $AscDesc || ','
 break
when = '0020'
 let $orderby = $orderby ||  'A.GP_PAYGROUP '    || $AscDesc || ','
 break
when = '0030'
 !let $orderby = $orderby ||  'C.PAY_ENTITY '     || $AscDesc || ','
 break
when = '0040'
 let $orderby = $orderby ||  'A.LOCATION '       || $AscDesc || ','
 break
when = '0050'
 let $orderby = $orderby ||  'A.DEPTID '         || $AscDesc || ','
 break
when = '0060'
 let $orderby = $orderby ||  'A.SUPERVISOR_ID '  || $AscDesc || ','
 break
when = '0080'
 let $orderby = $orderby || 'A.EMPLID '          || $AscDesc || ','
 break
when = '0090'
 let $orderby = $orderby || 'B.NAME_DISPLAY '            || $AscDesc || ','
 break
when = '0100'
 let $orderby = $orderby || 'A.ESTABID '         || $AscDesc || ','
 break
End-Evaluate
end-procedure
begin-procedure Select-Pin_nm ($pin_string, :$Pin_descr)
Let $Pin_descr = ''
if $pin_string <> ''
begin-select
PPP.DESCR
  Let $Pin_descr = $Pin_descr || RTRIM(&PPP.DESCR,' ') || ', '
FROM PS_GP_PIN PPP
WHERE PIN_NUM IN [$pin_string]
end-select
If (length($Pin_descr)) > 0  
  let $Pin_descr = substr($Pin_descr,1,(length($Pin_descr) - 2))
end-if
end-if
end-procedure Select-Pin_nm
begin-procedure section_six
  print $STitle06                      (#R7,1) bold
  let #rslt_value =0
  graphic (+1 ,1  ,60) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  graphic (   ,1  ,88) box 2 {G0}
  print $LNumber601                    (+1,1)
  print $LNumber602                    (,63)
  print #rslt_value                    (,93) edit 99,999,999,999.99c
  graphic (+1 ,1  ,109) box 2 {G0}
  print $LNumber603                    (+1,1)
  print $STitle09                      (,118) bold  
  graphic (+1, 1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_1                    (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1 ,1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_2                    (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1 ,1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_3                    (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1 ,1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_4                    (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c
  graphic (+1 ,1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_5                    (+1,1)
  print #rslt_value                    (,114) edit 9,999,999,999.99c 
  graphic (+1 ,1  ,130) box 2 {G0}
  graphic (   ,1  ,109) box 2 {G0}
  print $LNumber601_6                    ( ,1)
  print $LNumber601_6a                   (+1,1)
  print #rslt_value                      (,114) edit 9,999,999,999.99c
  let #R8=#current-line+2
end-procedure section_six
begin-procedure Health_Prov_Params  ! OUTPUT VAR: $HPP_SOURCE  1: PAGE 2: PAYROLL 3: BOTH
 #debug show ' Health_Prov_Params '
begin-select
HPP.GPBR_HEALTH_SOURCE
 let $HPP_SOURCE=&HPP.GPBR_HEALTH_SOURCE
  #debug show ' SOURCE 1=Page  2= Payroll 3=Both ---: ' $HPP_SOURCE 
from PS_GPBR_PARM_DIRF HPP
WHERE HPP.COMPANY=$Company
and HPP.GPBR_DIRFA_INFOD=$Year
and HPP.EFFDT=(select MAX(A.EFFDT) from PS_GPBR_PARM_DIRF A WHERE A.COMPANY=HPP.COMPANY and A.GPBR_DIRFA_INFOD=HPP.GPBR_DIRFA_INFOD and A.EFFDT<=$EndDt)
end-select
end-procedure Health_Prov_Data
begin-procedure by_page
 #debug show ' by_page '
begin-select 
hp.HPROV_CD_BRA
hp.DESCR
hp.HPROV_CNPJ_BRA
PG.AMOUNT
  let $Prov_cd=&hp.HPROV_CD_BRA
  let $Prov_descr=&hp.DESCR
  let $Prov_cnpj=rtrim(&hp.HPROV_CNPJ_BRA, ' ')
  let #Prov_amt=&PG.AMOUNT
    do print_rslt
    do Health_Dependent
! Removed from IREN 2017 layout
!    print #prov_total                                                                                           (#TITULAR_ROW,114) edit 9,999,999,999.99c
!    print '  '                                                                                                  (#depend_row,1)
from PS_HEALTH_PROV_BRA hp,PS_GPBR_H_EE_AMT PG
WHERE PG.HPROV_CD_BRA=hp.HPROV_CD_BRA
and PG.EMPLID=$Emplid
and hp.EFF_STATUS='A'
!and PG.effdt=(select max(b.effdt) from PS_GPBR_H_EE_AMT b where b.emplid=PG.emplid and b.empl_rcd=PG.empl_rcd and b.hprov_cd_bra=PG.hprov_cd_bra and b.effdt<=$EndDt)
and PG.effdt=(select max(b.effdt) from PS_GPBR_H_EE_AMT b where b.emplid=PG.emplid and b.hprov_cd_bra=PG.hprov_cd_bra and b.effdt<=$EndDt)
and hp.effdt=(select max(b1.effdt) from PS_HEALTH_PROV_BRA b1 where b1.hprov_cd_bra=PG.hprov_cd_bra and b1.eff_status=hp.EFF_STATUS and b1.effdt<=$EndDt)
end-select
 let #TITULAR_ROW=0
 let #prov_total=0
 let #depend_row=0
end-procedure by_page

begin-procedure by_payroll
 #debug show ' by_payroll '
 do get_pines
 let $HealthDiscEmpl = 'N'
begin-select 
HPR.HPROV_CD_BRA
HPR.HPROV_CNPJ_BRA
HPR.DESCR
SUM(RSLT.CALC_RSLT_VAL+RSLT.CALC_ADJ_VAL) &PR_AMT
  let $Prov_cd2=&HPR.HPROV_CD_BRA
  let $Prov_descr2=&HPR.DESCR
  let $Prov_cnpj2=rtrim(&HPR.HPROV_CNPJ_BRA, ' ')
  let #Prov_amt2=&PR_AMT
  let $HealthDiscEmpl = 'Y'
    do print_rslt
    do HPR_Dependent
! Removed from IREN 2017 layout
!  print #prov_total2                                                                                    (#TITULAR_ROW2,114) edit 9,999,999,999.99c
!  print '  '                                                                                            (#depend_row2,1)
from PS_GP_RSLT_ERN_DED RSLT, 
PS_HEALTH_PROV_BRA HPR
,PS_GP_SEG_GUIDE_WA HP1 
,PS_GP_RSLT_SEG_VW HPRSLT
WHERE HPRSLT.EMPLID = $Emplid
and HPRSLT.CALC_TYPE = 'P'
and HPRSLT.RSLT_VER_NUM = (select MAX(HPRSLTA.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW HPRSLTA
                      where HPRSLT.EMPLID = HPRSLTA.EMPLID 
                      and HPRSLT.CAL_ID = HPRSLTA.CAL_ID )
and HPRSLT.RSLT_REV_NUM = 1
and HPRSLT.CALC_ACTION <> 'V' 
and HPRSLT.PYE_CALC_STAT >= '50'
AND HPRSLT.PYMT_DT >= $BgnDt
AND HPRSLT.PYMT_DT <= $EndDt
and HPRSLT.EMPLID = RSLT.EMPLID 
and HPRSLT.CAL_RUN_ID = RSLT.CAL_RUN_ID 
and HPRSLT.GP_PAYGROUP = RSLT.GP_PAYGROUP 
and HPRSLT.CAL_ID = RSLT.CAL_ID 
and HPRSLT.ORIG_CAL_RUN_ID = RSLT.ORIG_CAL_RUN_ID 
and HPRSLT.RSLT_SEG_NUM = RSLT.RSLT_SEG_NUM
and HPRSLT.CAL_RUN_ID = RSLT.CAL_RUN_ID 
and HPRSLT.GP_PAYGROUP = RSLT.GP_PAYGROUP 
and HPRSLT.CAL_ID = RSLT.CAL_ID 
and HPRSLT.ORIG_CAL_RUN_ID = RSLT.ORIG_CAL_RUN_ID 
and HPRSLT.RSLT_SEG_NUM = RSLT.RSLT_SEG_NUM
and HPR.HPROV_CD_BRA = [$EMPLUSERFIELD]
and HPR.EFF_STATUS='A'
and HPR.EFFDT = (select MAX(B.EFFDT) from PS_HEALTH_PROV_BRA B where B.HPROV_CD_BRA=HPR.HPROV_CD_BRA and B.EFF_STATUS=HPR.EFF_STATUS)
[$HP_EMPL_PIN]
and RSLT.EMPLID=HP1.EMPLID 
and RSLT.CAL_RUN_ID=HP1.CAL_RUN_ID 
and RSLT.ORIG_CAL_RUN_ID=HP1.ORIG_CAL_RUN_ID 
and RSLT.CAL_ID=HP1.CAL_ID 
and RSLT.GP_PAYGROUP=HP1.GP_PAYGROUP 
and HP1.COMPANY=$Company 
group by HPR.HPROV_CD_BRA,HPR.HPROV_CNPJ_BRA,HPR.DESCR 
end-select
If $HealthDiscEmpl = 'N'
   do HPR_Dependent
End-if
end-procedure by_payroll

begin-procedure HPR_Dependent
 #debug show ' HPR_Dependent '
let #Ben2_amt=0
if $HPP_SOURCE='3'
 let $Prov_cd2=$Prov_cd3
 if $Ben_num<>'' 
 let $benefit_number= ' AND BENE2.DEPENDENT_BENEF = ' || $Ben_num
 else
 let $benefit_number= ''
 if $depend_no_page <> ''
    let $benefit_number= $depend_no_page
 end-if
 end-if 
else
 let $benefit_number= ''
end-if 
if $DEPUSERFIELD<>''
begin-select
HPR2.HPROV_CD_BRA
HPR2.HPROV_CNPJ_BRA
HPR2.DESCR
BENE2.DEPENDENT_BENEF
BENE2.NAME_DISPLAY
SUM(RSLT2.CALC_RSLT_VAL+RSLT2.CALC_ADJ_VAL) &HPD_AMT
  let $Ben2_num=&BENE2.DEPENDENT_BENEF
  let $Ben2_name=&BENE2.NAME_DISPLAY
  let #Ben2_amt=&HPD_AMT
  if $HPP_SOURCE='2'
     If $HealthDiscEmpl = 'N'
        If $Prov_cnpj2      = ''
           let $Prov_cd2    = &HPR2.HPROV_CD_BRA
           let $Prov_descr2 = &HPR2.DESCR
           let $Prov_cnpj2  = rtrim(&HPR2.HPROV_CNPJ_BRA, ' ')
           let #Prov_amt2   = 0
           do print_rslt
        End-If
     End-If
     do print_rslt_dependent
  end-if
  if $HPP_SOURCE='3' and $payroll_no_page='Y'
   let $Ben_num=&BENE2.DEPENDENT_BENEF
   let $Ben_name=&BENE2.NAME_DISPLAY
   let #Ben3_amt=&HPD_AMT
   If $HealthDiscEmpl = 'N'
      If $Prov_cnpj3      = ''
         let $Prov_cd3    = &HPR2.HPROV_CD_BRA
         let $Prov_descr3 = &HPR2.DESCR
         let $Prov_cnpj3  = rtrim(&HPR2.HPROV_CNPJ_BRA, ' ')
         let #Prov_amt3   = 0
         do print_rslt
      End-If
   End-If
   do print_rslt_dependent
  end-if
  from PS_GP_RSLT_ERN_DED RSLT2
,PS_HEALTH_PROV_BRA HPR2
,PS_DEPENDENT_BENEF BENE2
,PS_GP_SEG_GUIDE_WA BN2
,PS_GP_RSLT_SEG_VW HPRSLT2
WHERE HPRSLT2.EMPLID = $Emplid
and HPRSLT2.CALC_TYPE = 'P'
and HPRSLT2.RSLT_VER_NUM = (select MAX(HPRSLT2A.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW HPRSLT2A
                      where HPRSLT2.EMPLID = HPRSLT2A.EMPLID 
                      and HPRSLT2.CAL_ID = HPRSLT2A.CAL_ID )
and HPRSLT2.RSLT_REV_NUM = 1
and HPRSLT2.CALC_ACTION <> 'V' 
and HPRSLT2.PYE_CALC_STAT >= '50'
AND HPRSLT2.PYMT_DT >= $BgnDt
AND HPRSLT2.PYMT_DT <= $EndDt
and HPRSLT2.EMPLID = RSLT2.EMPLID 
and HPRSLT2.CAL_RUN_ID = RSLT2.CAL_RUN_ID 
and HPRSLT2.GP_PAYGROUP = RSLT2.GP_PAYGROUP 
and HPRSLT2.CAL_ID = RSLT2.CAL_ID 
and HPRSLT2.ORIG_CAL_RUN_ID = RSLT2.ORIG_CAL_RUN_ID 
and HPRSLT2.RSLT_SEG_NUM = RSLT2.RSLT_SEG_NUM
and HPRSLT2.CAL_RUN_ID = RSLT2.CAL_RUN_ID 
and HPRSLT2.GP_PAYGROUP = RSLT2.GP_PAYGROUP 
and HPRSLT2.CAL_ID = RSLT2.CAL_ID 
and HPRSLT2.ORIG_CAL_RUN_ID = RSLT2.ORIG_CAL_RUN_ID 
and HPRSLT2.RSLT_SEG_NUM = RSLT2.RSLT_SEG_NUM
and HPRSLT2.CAL_RUN_ID = RSLT2.CAL_RUN_ID 
and HPRSLT2.GP_PAYGROUP = RSLT2.GP_PAYGROUP 
and HPRSLT2.CAL_ID = RSLT2.CAL_ID 
and HPRSLT2.ORIG_CAL_RUN_ID = RSLT2.ORIG_CAL_RUN_ID 
and HPRSLT2.RSLT_SEG_NUM = RSLT2.RSLT_SEG_NUM
and HPR2.HPROV_CD_BRA = [$DEPUSERFIELD]
and BENE2.DEPENDENT_BENEF = [$DEP2USERFIELD]
and BENE2.EMPLID=HPRSLT2.EMPLID
and HPR2.EFF_STATUS='A'
and HPR2.EFFDT = (select MAX(B2.EFFDT) from PS_HEALTH_PROV_BRA B2 where B2.HPROV_CD_BRA=HPR2.HPROV_CD_BRA and B2.EFF_STATUS=HPR2.EFF_STATUS)
[$HP_DEPE_PIN]
and RSLT2.EMPLID=BN2.EMPLID 
and RSLT2.CAL_RUN_ID=BN2.CAL_RUN_ID 
and RSLT2.ORIG_CAL_RUN_ID=BN2.ORIG_CAL_RUN_ID 
and RSLT2.CAL_ID=BN2.CAL_ID 
and RSLT2.GP_PAYGROUP=BN2.GP_PAYGROUP 
and BN2.COMPANY=$Company 
[$benefit_number]
and RSLT2.EMPLID=BN2.EMPLID 
and RSLT2.CAL_RUN_ID=BN2.CAL_RUN_ID 
and RSLT2.ORIG_CAL_RUN_ID=BN2.ORIG_CAL_RUN_ID 
and RSLT2.CAL_ID=BN2.CAL_ID 
and RSLT2.GP_PAYGROUP=BN2.GP_PAYGROUP 
and BN2.COMPANY=$Company 
group by HPR2.HPROV_CD_BRA,HPR2.HPROV_CNPJ_BRA,HPR2.DESCR,BENE2.DEPENDENT_BENEF,BENE2.NAME_DISPLAY
end-select
end-if
let #depend_row2= #current-line
let #depend_row3= #current-line
end-procedure HPR_Dependent

begin-procedure by_both
 #debug show '     by_both '
  do get_pines
  do by_page_payroll
end-procedure by_both

begin-procedure Health_Dependent
 #debug show ' Health_Dependent '
 let $depend_no_page = ''
 if $HPP_SOURCE='3'
  let $Prov_cd=$Prov_cd3
 end-if 
begin-select 
DEP.DEPENDENT_BENEF
BENE.NAME_DISPLAY
DEP.AMOUNT
  let $Ben_num=&DEP.DEPENDENT_BENEF
  let $Ben_name=&BENE.NAME_DISPLAY
  let #Ben_amt=&DEP.AMOUNT
  if $HPP_SOURCE='1'
   do print_rslt_dependent
  else
   ! Save the dependents set on Other Amt BRA page for further processing so they will be excluded and only the ones not set will be processed
   if $HPP_SOURCE='3'
      let $depend_no_page = $depend_no_page || ' AND BENE2.DEPENDENT_BENEF <> ' || $Ben_num
   end-if
   do HPR_Dependent
   do print_rslt_dependent
  end-if
from PS_GPBR_H_DEP_AMT DEP , PS_DEPENDENT_BENEF BENE
WHERE DEP.EMPLID= $Emplid
and DEP.HPROV_CD_BRA =$Prov_cd
and BENE.EMPLID=DEP.EMPLID
and BENE.DEPENDENT_BENEF=DEP.DEPENDENT_BENEF
and DEP.EFFDT=(select MAX(M.EFFDT) from PS_GPBR_H_DEP_AMT M where M.EMPLID=DEP.EMPLID and M.HPROV_CD_BRA=DEP.HPROV_CD_BRA and M.DEPENDENT_BENEF=DEP.DEPENDENT_BENEF)
end-select
! Process only the remaining dependents not set on Other Amts BRA page
if $HPP_SOURCE='3'
   let $Ben_num              = ''
   let $payroll_no_page_prev = $payroll_no_page
   let $payroll_no_page      = 'Y'
   do HPR_Dependent
   let $payroll_no_page      = $payroll_no_page_prev
end-if
 let #depend_row= #current-line
 let #depend_row3= #current-line
end-procedure Health_Dependent
begin-procedure get_pines    
 #debug show '     get_pines  '
 let $HP_EMPL_PIN=''
 let $HP_EMPL_PIN3=''
 let $HP_EMPL_PIN31=''
begin-select 
EMPL.PIN_NUM
EMPL.GPBR_HEALTH_FIELD
  let $EMPLFLD=&EMPL.GPBR_HEALTH_FIELD
  let $EMPLUSERFIELD= 'RSLT.USER_FLD'||$EMPLFLD
  let $EMPL3USERFIELD= 'RSLT3.USER_FLD'||$EMPLFLD
  let $EMPL31USERFIELD= 'RSLT31.USER_FLD'||$EMPLFLD
 if $HP_EMPL_PIN=''
     let $HP_EMPL_PIN= to_char(trunc(&EMPL.PIN_NUM,0))   
     let $HP_EMPL_PIN3= to_char(trunc(&EMPL.PIN_NUM,0))  
     let $HP_EMPL_PIN31= to_char(trunc(&EMPL.PIN_NUM,0))
  else 
     let $HP_EMPL_PIN=  $HP_EMPL_PIN || ',' || to_char(trunc(&EMPL.PIN_NUM,0))
     let $HP_EMPL_PIN3=  $HP_EMPL_PIN3 || ',' || to_char(trunc(&EMPL.PIN_NUM,0))
     let $HP_EMPL_PIN31=  $HP_EMPL_PIN31 || ',' || to_char(trunc(&EMPL.PIN_NUM,0))
 end-if 
from PS_GPBR_HEALTH_INF EMPL
where EMPL.COMPANY=$Company
and EMPL.GPBR_DIRF_HLT_TYPE='10'
and EMPL.EFFDT=(select MAX(D.EFFDT) from PS_GPBR_HEALTH_INF D where D.COMPANY=EMPL.COMPANY and D.GPBR_DIRF_HLT_TYPE=EMPL.GPBR_DIRF_HLT_TYPE and D.EFFDT<=$EndDt)
end-select
  let $HP_EMPL_PIN= 'AND RSLT.PIN_NUM in (' || $HP_EMPL_PIN || ')'
  let $HP_EMPL_PIN3= 'AND RSLT3.PIN_NUM in (' || $HP_EMPL_PIN3 || ')'
  let $HP_EMPL_PIN31= 'AND RSLT31.PIN_NUM in (' || $HP_EMPL_PIN31 || ')'
 let $HP_DEPE_PIN=''
 let $HP_DEPE_PIN3=''  
 let $HP_DEPE_PIN31=''    
begin-select 
DEPE.PIN_NUM
DEPE.GPBR_HEALTH_FIELD
DEPE.GPBR_DEPEND_FIELD
 let $DEPFLD=&DEPE.GPBR_HEALTH_FIELD
 let $DEPUSERFIELD= 'RSLT2.USER_FLD'||$DEPFLD
 let $DEPFLD2=&DEPE.GPBR_DEPEND_FIELD
 let $DEP2USERFIELD= 'RSLT2.USER_FLD'||$DEPFLD2

 if $HP_DEPE_PIN=''
     let $HP_DEPE_PIN= to_char(trunc(&DEPE.PIN_NUM,0))
     let $HP_DEPE_PIN3= to_char(trunc(&DEPE.PIN_NUM,0))
     let $HP_DEPE_PIN31= to_char(trunc(&DEPE.PIN_NUM,0))
  else 
     let $HP_DEPE_PIN=  $HP_DEPE_PIN || ',' || to_char(trunc(&DEPE.PIN_NUM,0))
     let $HP_DEPE_PIN3=  $HP_DEPE_PIN3 || ',' || to_char(trunc(&DEPE.PIN_NUM,0))
     let $HP_DEPE_PIN31=  $HP_DEPE_PIN31 || ',' || to_char(trunc(&DEPE.PIN_NUM,0))
  end-if   
from PS_GPBR_HEALTH_INF DEPE
WHERE DEPE.COMPANY=$Company
and DEPE.GPBR_DIRF_HLT_TYPE='20'
and DEPE.EFFDT=(select MAX(DD.EFFDT) from PS_GPBR_HEALTH_INF DD where DD.COMPANY=DEPE.COMPANY and DD.GPBR_DIRF_HLT_TYPE=DEPE.GPBR_DIRF_HLT_TYPE and DD.EFFDT<=$EndDt)
end-select
  let $HP_DEPE_PIN= 'AND RSLT2.PIN_NUM in (' || $HP_DEPE_PIN || ')'
  let $HP_DEPE_PIN3= 'AND RSLT3.PIN_NUM in (' || $HP_DEPE_PIN3 || ')'
  let $HP_DEPE_PIN31= 'AND RSLT31.PIN_NUM in (' || $HP_DEPE_PIN31 || ')'
end-procedure get_pines
begin-procedure print_rslt
 #debug show ' print_rslt  '
evaluate $HPP_SOURCE
when ='1'
  if $Prov_cnpj<>'' and $stop='N'
  print ' Pagamentos a planos de saúde:'    (+2,2)
  do valid_lines
  print ' '                                 (+1,1)
  do valid_lines
    let $stop='Y'
    let $stop_depend = 'N'
  end-if
    if #lines=1
      print ' CNPJ: '                                                                                     (,2)
    else
      print ' CNPJ: '                                                                                     (+1,2)
    end-if
    print $Prov_cnpj                                                                                      (  ,+1) Edit 'BXX.XXX.XXX/XXXX-XX'
    print $Prov_descr                                                                                     (  ,+3)
    let #TITULAR_ROW= #current-line
  do valid_lines  
    print ' Valor pago no ano referente ao titular: '                                                     (+1,2)
! Removed from IREN 2017 layout
!    print $Name                                                                                           (  ,+1)
    let $mask-amount = edit(#Prov_amt,'b99,999,999,999.99c')
    let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
    print $mask-amount                      ( ,35)
    do valid_lines
    let #prov_total=#Prov_amt
  do valid_lines  
 break
when ='2'
  if $Prov_cnpj2<>'' and $stop='N'
    print ' Pagamentos a planos de saúde:'  (+2,2)
  do valid_lines
    print ' '                               (+1,1)
    do valid_lines
    let $stop='Y'
    let $stop_depend = 'N'
  end-if 
    if #lines=1
      print ' CNPJ: '                                                                                    (,2)
    else
      print ' CNPJ: '                                                                                    (+1,2)
    end-if
    print $Prov_cnpj2                                                                                    (  ,+1) Edit 'BXX.XXX.XXX/XXXX-XX'
    print $Prov_descr2                                                                                   (  ,+3)
    let #TITULAR_ROW2= #current-line
  do valid_lines
    print ' Valor pago no ano referente ao titular: '                                                    (+1,2)
! Removed from IREN 2017 layout
!    print $Name                                                                                          (  ,+1)
    let $mask-amount = edit(#Prov_amt2,'99,999,999,999.99c')
    let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
    print $mask-amount                      ( ,35)
    do valid_lines
    let #prov_total2=#Prov_amt2
  do valid_lines  
 break
when ='3'
  if $Prov_cnpj3<>'' and $stop='N'
    print ' Pagamentos a planos de saúde:'  (+2,2)
  do valid_lines 
    print ' '                               (+1,1)
    do valid_lines
    let $stop='Y'
    let $stop_depend = 'N'
  end-if  
    if #lines=1
      print ' CNPJ: '                                                                                     (,2)
    else
      print ' CNPJ: '                                                                                     (+1,2)
    end-if
    print  $Prov_cnpj3                                                                                    (  ,+1) Edit 'BXX.XXX.XXX/XXXX-XX'
    print $Prov_descr3                                                                                    (  ,+3)
    let #TITULAR_ROW3= #current-line
  do valid_lines
    print ' Valor pago no ano referente ao titular: '                                                     (+1,2)
! Removed from IREN 2017 layout
!    print $Name                                                                                           (  ,+1)
    let $mask-amount = edit(#Prov_amt3,'b99,999,999,999.99c')
    let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
    print $mask-amount                      ( ,35)
    do valid_lines
    let #prov_total3=#Prov_amt3
  do valid_lines
 break
end-evaluate
end-procedure print_rslt
begin-procedure print_rslt_dependent
 #debug show ' print_rslt_dependent  '
if $stop_depend = 'N'
   do valid_lines
   print ' Valor pago no ano referente aos dependentes:'                                          (+1,2)
   do valid_lines
   print ' CPF'      (+1,  2)
   print 'Nome'      (  , 19)
   print 'Valor'     (  ,123)
   do valid_lines
   let $stop_depend = 'Y'
end-if
evaluate $HPP_SOURCE
 #debug show  ' Dependiente ---: ' $Ben_name
when ='1' 
  let $DId=$Ben_num
  do Get-Dep-NatID ($Emplid, $DId, $DNa)
  let $filled-cpf = rtrim(ltrim($DNa,' '),' ')
  if $filled-cpf <> ''
     print $DNa                                                                                         (+1,2) Edit 'BXXX.XXX.XXX-XX'
  else
     print '               '                                                                            (+1,2)
  end-if
  print $Ben_name                                                                                       ( ,+2)
  print #Ben_amt                                                                                        ( ,113) edit 99,999,999,999.99c
  let #prov_total= #prov_total + #Ben_amt
 do valid_lines
 break
when ='2'
 let $DId=$Ben2_num
  do Get-Dep-NatID ($Emplid, $DId, $DNa)
  let $filled-cpf = rtrim(ltrim($DNa,' '),' ')
  if $filled-cpf <> ''
     print $DNa                                                                                         (+1,2) Edit 'BXXX.XXX.XXX-XX'
  else
     print '               '                                                                            (+1,2)
  end-if
  print $Ben2_name                                                                                      (  ,+2)
  print #Ben2_amt                                                                                       ( ,113) edit 99,999,999,999.99c
  let #prov_total2= #prov_total2 + #Ben2_amt
 do valid_lines
 break
when ='3' 
  if $payroll_no_page='Y' 
   let #Ben_amt3=#Ben3_amt   
  else
   let #Ben_amt3=#Ben_amt+#Ben2_amt
  end-if 
   let $DId=$Ben_num
  do Get-Dep-NatID ($Emplid, $DId, $DNa)
  let $filled-cpf = rtrim(ltrim($DNa,' '),' ')
  if $filled-cpf <> ''
     print $DNa                                                                                         (+1,2) Edit 'BXXX.XXX.XXX-XX'
  else
     print '               '                                                                            (+1,2)
  end-if
  print $Ben_name                                                                                       (  ,+2)
  print #Ben_amt3                                                                                       ( ,113) edit 99,999,999,999.99c
  let #prov_total3= #prov_total3 + #Ben_amt3
 do valid_lines
 break
end-evaluate
end-procedure print_rslt_dependent
begin-procedure by_page_payroll
 #debug show '     by_page_payroll  '
 let $found=''
begin-select
FF.COMPANY
 let $found= &FF.COMPANY
from PS_GPBR_OTH_EE_AMT FF
where FF.EMPLID=$Emplid
and FF.COMPANY=$company
and EFFDT=(select MAX (L.EFFDT) from PS_GPBR_OTH_EE_AMT L where L.EMPLID=FF.EMPLID and L.COMPANY=FF.COMPANY)
end-select
if $found<>''
begin-select 
hp3.HPROV_CD_BRA
hp3.DESCR
hp3.HPROV_CNPJ_BRA
PAGE3.AMOUNT
  let $Prov_cd3=&hp3.HPROV_CD_BRA
  let $Prov_descr3=&hp3.DESCR
  let $Prov_cnpj3=rtrim(&hp3.HPROV_CNPJ_BRA, ' ')
  let #Prov_amt3=&PAGE3.AMOUNT
    do payee_rslt
    do print_rslt
    do Health_Dependent
! Removed from IREN 2017 layout
!    print #prov_total3                                                                                  (#TITULAR_ROW3,113) edit 99,999,999,999.99c
    print '  '                                                                                          (#depend_row3,1)
from PS_HEALTH_PROV_BRA hp3,PS_GPBR_H_EE_AMT PAGE3
,PS_GPBR_OTH_EE_AMT PAGE4
WHERE PAGE3.HPROV_CD_BRA=hp3.HPROV_CD_BRA
and PAGE3.EMPLID=$Emplid
and hp3.EFF_STATUS='A'
and page3.effdt=(select max(b.effdt) from PS_GPBR_H_EE_AMT b where b.emplid=page3.emplid and b.hprov_cd_bra=page3.hprov_cd_bra and b.effdt<=$EndDt)
and hp3.effdt=(select max(b2.effdt) from PS_HEALTH_PROV_BRA b2 where b2.hprov_cd_bra=page3.hprov_cd_bra and b2.eff_status=hp3.eff_status and b2.effdt<=$EndDt)
and PAGE4.EMPLID=PAGE3.EMPLID and PAGE3.EFFDT=PAGE4.EFFDT and PAGE4.COMPANY=$Company 
end-select
end-if
 let #TITULAR_ROW3=0
 let #prov_total3=0
 let #depend_row3=0
 do payroll_no_page   
end-procedure by_page_payroll 

begin-procedure payee_rslt
 #debug show ' payee_rslt  '
begin-select 
HPR3.HPROV_CD_BRA
HPR3.HPROV_CNPJ_BRA
HPR3.DESCR
SUM(RSLT3.CALC_RSLT_VAL+RSLT3.CALC_ADJ_VAL) &PR_AMT3
  let $Prov_descr3=&HPR3.DESCR
  let $Prov_cnpj3=rtrim(&HPR3.HPROV_CNPJ_BRA, ' ')
  let #Prov_amt3= #Prov_amt3 + &PR_AMT3
from PS_GP_RSLT_ERN_DED RSLT3, 
PS_HEALTH_PROV_BRA HPR3
,PS_GP_SEG_GUIDE_WA HP3 
,PS_GP_RSLT_SEG_VW HPR3SLT3
WHERE HPR3SLT3.EMPLID = $Emplid
and HPR3SLT3.CALC_TYPE = 'P'
and HPR3SLT3.RSLT_VER_NUM = (select MAX(HPR3SLT3A.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW HPR3SLT3A
                      where HPR3SLT3.EMPLID = HPR3SLT3A.EMPLID 
                      and HPR3SLT3.CAL_ID = HPR3SLT3A.CAL_ID )
and HPR3SLT3.RSLT_REV_NUM = 1
and HPR3SLT3.CALC_ACTION <> 'V' 
and HPR3SLT3.PYE_CALC_STAT >= '50'
AND HPR3SLT3.PYMT_DT >= $BgnDt
AND HPR3SLT3.PYMT_DT <= $EndDt
and HPR3SLT3.EMPLID = RSLT3.EMPLID 
and HPR3SLT3.CAL_RUN_ID = RSLT3.CAL_RUN_ID 
and HPR3SLT3.GP_PAYGROUP = RSLT3.GP_PAYGROUP 
and HPR3SLT3.CAL_ID = RSLT3.CAL_ID 
and HPR3SLT3.ORIG_CAL_RUN_ID = RSLT3.ORIG_CAL_RUN_ID 
and HPR3SLT3.RSLT_SEG_NUM = RSLT3.RSLT_SEG_NUM
and HPR3SLT3.CAL_RUN_ID = RSLT3.CAL_RUN_ID 
and HPR3SLT3.GP_PAYGROUP = RSLT3.GP_PAYGROUP 
and HPR3SLT3.CAL_ID = RSLT3.CAL_ID 
and HPR3SLT3.ORIG_CAL_RUN_ID = RSLT3.ORIG_CAL_RUN_ID 
and HPR3SLT3.RSLT_SEG_NUM = RSLT3.RSLT_SEG_NUM
and HPR3.HPROV_CD_BRA = [$EMPL3USERFIELD]
and HPR3.EFF_STATUS='A'
and HPR3.EFFDT = (select MAX(B.EFFDT) from PS_HEALTH_PROV_BRA B where B.HPROV_CD_BRA=HPR3.HPROV_CD_BRA and B.EFF_STATUS=HPR3.EFF_STATUS) 
and HPR3.HPROV_CD_BRA=$Prov_cd3
[$HP_EMPL_PIN3]
and RSLT3.EMPLID=HP3.EMPLID 
!and RSLT3.EMPL_RCD=HP3.EMPL_RCD 
and RSLT3.CAL_RUN_ID=HP3.CAL_RUN_ID 
and RSLT3.ORIG_CAL_RUN_ID=HP3.ORIG_CAL_RUN_ID 
and RSLT3.CAL_ID=HP3.CAL_ID 
and RSLT3.GP_PAYGROUP=HP3.GP_PAYGROUP 
and HP3.COMPANY=$Company 
group by HPR3.HPROV_CD_BRA,HPR3.HPROV_CNPJ_BRA,HPR3.DESCR 
end-select
end-procedure payee_rslt

begin-procedure payroll_no_page
 #debug show '     payroll_no_page  '
let $payroll_no_page='N'
let $HealthDiscEmpl = 'N'
begin-select 
HPR31.HPROV_CD_BRA
HPR31.HPROV_CNPJ_BRA
HPR31.DESCR
SUM(RSLT31.CALC_RSLT_VAL+RSLT31.CALC_ADJ_VAL) &PR_AMT31
 let $Prov_cd3=&HPR31.HPROV_CD_BRA
 let $Prov_descr3=&HPR31.DESCR
 let $Prov_cnpj3=rtrim(&HPR31.HPROV_CNPJ_BRA, ' ')
 let #Prov_amt3=&PR_AMT31
 let $HealthDiscEmpl = 'Y'
 #debug show $Emplid ' payroll_no_page  ' #Prov_amt3
 let $payroll_no_page='Y'
 do print_rslt
 do HPR_Dependent
! Removed from IREN 2017 layout 
!  print #prov_total3                                                                                     (#TITULAR_ROW3,113) edit 99,999,999,999.99c
 print '  '                                                                                             (#depend_row3,1)
 !print '  '                                                                                                     (+1,1)
from PS_GP_RSLT_ERN_DED RSLT31, 
PS_HEALTH_PROV_BRA HPR31
,PS_GP_SEG_GUIDE_WA HP4 
,PS_GP_RSLT_SEG_VW HPR31SLT3
WHERE HPR31SLT3.EMPLID = $Emplid
and HPR31SLT3.CALC_TYPE = 'P'
and HPR31SLT3.RSLT_VER_NUM = (select MAX(HPR31SLT3A.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW HPR31SLT3A
                      where HPR31SLT3.EMPLID = HPR31SLT3A.EMPLID 
                      and HPR31SLT3.CAL_ID = HPR31SLT3A.CAL_ID )
and HPR31SLT3.RSLT_REV_NUM = 1
and HPR31SLT3.CALC_ACTION <> 'V' 
and HPR31SLT3.PYE_CALC_STAT >= '50'
AND HPR31SLT3.PYMT_DT >= $BgnDt
AND HPR31SLT3.PYMT_DT <= $EndDt
and HPR31SLT3.EMPLID = RSLT31.EMPLID 
and HPR31SLT3.CAL_RUN_ID = RSLT31.CAL_RUN_ID 
and HPR31SLT3.GP_PAYGROUP = RSLT31.GP_PAYGROUP 
and HPR31SLT3.CAL_ID = RSLT31.CAL_ID 
and HPR31SLT3.ORIG_CAL_RUN_ID = RSLT31.ORIG_CAL_RUN_ID 
and HPR31SLT3.RSLT_SEG_NUM = RSLT31.RSLT_SEG_NUM
and HPR31SLT3.CAL_RUN_ID = RSLT31.CAL_RUN_ID 
and HPR31SLT3.GP_PAYGROUP = RSLT31.GP_PAYGROUP 
and HPR31SLT3.CAL_ID = RSLT31.CAL_ID 
and HPR31SLT3.ORIG_CAL_RUN_ID = RSLT31.ORIG_CAL_RUN_ID 
and HPR31SLT3.RSLT_SEG_NUM = RSLT31.RSLT_SEG_NUM
and HPR31.HPROV_CD_BRA= [$EMPL31USERFIELD]
and HPR31.EFF_STATUS='A'
and HPR31.EFFDT = (select MAX(B.EFFDT) from PS_HEALTH_PROV_BRA B where B.HPROV_CD_BRA=HPR31.HPROV_CD_BRA and B.EFF_STATUS=HPR31.EFF_STATUS) 
and HPR31.HPROV_CD_BRA not in (select distinct c.hprov_cd_bra from PS_GPBR_H_EE_AMT c, PS_GPBR_OTH_EE_AMT D where c.emplid=rslt31.emplid 
and C.EMPLID=D.EMPLID 
and C.EFFDT=D.EFFDT and D.COMPANY=$Company)
[$HP_EMPL_PIN31]
and RSLT31.EMPLID=HP4.EMPLID 
!and RSLT31.EMPL_RCD=HP4.EMPL_RCD 
and RSLT31.CAL_RUN_ID=HP4.CAL_RUN_ID 
and RSLT31.ORIG_CAL_RUN_ID=HP4.ORIG_CAL_RUN_ID 
and RSLT31.CAL_ID=HP4.CAL_ID 
and RSLT31.GP_PAYGROUP=HP4.GP_PAYGROUP 
and HP4.COMPANY=$Company 
group by HPR31.HPROV_CD_BRA,HPR31.HPROV_CNPJ_BRA,HPR31.DESCR
end-select
If $HealthDiscEmpl = 'N'
   do HPR_Dependent
End-if
end-procedure payroll_no_page

begin-procedure fapi_section
 #debug show ' fapi_section  '
 let $stop='N'
begin-select distinct  
F.FAPI_CD_BRA
 let $FAPI_NAME=&F.FAPI_CD_BRA
 do BUILD_FAPI_PINS
 do PRINT_FAPI
from PS_GPBR_IREN_TXBL F
WHERE F.company=$Company
and F.GPBR_IREN_TXBL='03'
and EFFDT=(select MAX(G.EFFDT) from PS_GPBR_IREN_TXBL G WHERE G.COMPANY=F.COMPANY and G.GPBR_IREN_TXBL=F.GPBR_IREN_TXBL and G.EFFDT<=$EndDt)
order by F.FAPI_CD_BRA
end-select
end-procedure fapi_section

begin-procedure BUILD_FAPI_PINS
 #debug show ' BUILD_FAPI_PINS '
 let $FAPI_PINA=''
 let $FAPI_PINS=''
begin-select 
FAP.FAPI_CNPJ_BRA
FAP.DESCR
F1.GPBR_PIN_IREN_NUM
F1.GPBR_ERDD_SIGN 
 let $FAPI_CNPJ=&FAP.FAPI_CNPJ_BRA
 let $FAPI_DESCR=&FAP.DESCR
 let $FAPI_SIGN=&F1.GPBR_ERDD_SIGN
 evaluate $FAPI_SIGN
 when='A'
 if $FAPI_PINA=''
     let $FAPI_PINA= to_char(trunc(&F1.GPBR_PIN_IREN_NUM,0))  
  else 
     let $FAPI_PINA=  $FAPI_PINA || ',' || to_char(trunc(&F1.GPBR_PIN_IREN_NUM,0))
 end-if   
 break
 when='S'
  if $FAPI_PINS=''
     let $FAPI_PINS= to_char(trunc(&F1.GPBR_PIN_IREN_NUM,0))  
  else 
     let $FAPI_PINS=  $FAPI_PINA || ',' || to_char(trunc(&F1.GPBR_PIN_IREN_NUM,0))
 end-if  
 break
 end-evaluate
from PS_GPBR_IREN_TXBL F1,PS_FAPI_PROV_BRA FAP
WHERE F1.company=$Company
and F1.GPBR_IREN_TXBL='03'
and F1.FAPI_CD_BRA=$FAPI_NAME
and F1.EFFDT=(select MAX(G.EFFDT) from PS_GPBR_IREN_TXBL G WHERE G.COMPANY=F1.COMPANY and G.GPBR_IREN_TXBL=F1.GPBR_IREN_TXBL and G.EFFDT<=$EndDt)
and FAP.FAPI_CD_BRA=F1.FAPI_CD_BRA
and fap.eff_status='A'
and FAP.EFFDT=(select MAX(H1.EFFDT) from PS_FAPI_PROV_BRA H1 where FAP.FAPI_CD_BRA=H1.FAPI_CD_BRA and H1.eff_status=fap.eff_status and H1.EFFDT<=$EndDt)
end-select
end-procedure BUILD_FAPI_PINS

begin-procedure PRINT_FAPI
  if $FAPI_PINA=''
   let $addstring = ''
  else
   let $addstring = '(' || $FAPI_PINA || ')'
  end-if
  if $FAPI_PINS=''
   let $substring =''
  else
   let $substring = '(' || $FAPI_PINS || ')'
  end-if
  do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
  if #rslt_value <> 0
   if $stop='N'
     if #lines=1
       print '   Previdência Complementar e para Fapi:'  (+2,1)
     else
       print '   Previdência Complementar e para Fapi:'  (+1,1)
     end-if
     let #Fapi_ini_row = #current-line
     let $stop='Y'
    do valid_lines
   end-if 
    if #lines=1
      print ' CNPJ : '                                                                              (+2,8)
    else
      print ' CNPJ : '                                                                              (+1,8)
    end-if
      print $FAPI_CNPJ                                                                              (  ,+1) Edit 'BXX.XXX.XXX/XXXX-XX'
      let $FAPI_DESCR = rtrim(ltrim($FAPI_DESCR,' '),' ')
      print $FAPI_DESCR                                                                             (  ,+3)
      let $mask-amount = edit(#rslt_value,'b99,999,999,999.99c')
      let $mask-amount = 'R$ ' || rtrim(ltrim($mask-amount,' '),' ')
      print $mask-amount                                                                            (  ,+3)
      
      let #Fapi_tot=#Fapi_tot+#rslt_value
    do valid_lines 
  end-if         
end-procedure PRINT_FAPI
begin-procedure Pension_section
 #debug show ' Pension_section: ' $Emplid
    let $RECIPIENTE=''
    let $stop='N'
    get $addstring from pin (46)
    get $substring from pin (47)
    do get-rslt-value($addstring,$substring,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $List_Pin_Nm)
    if #rslt_value <> 0  
    let $print-hdr-alimony = 'Y'
      if $stop='N'
         if #LINES=1  
           print '   Beneficiários de pensão alimentícia:'                                          (+1 ,1)
            if $print-hdr-alimony = 'Y'
               print ' CPF'                (  ,2)
               print 'Nascimento'             ( ,21)
               print 'Nome'                   ( ,40)
               print 'Valor'                  (,123)
               let $print-hdr-alimony = 'N'                                                         
            end-if
         else
           print '   Beneficiários de pensão alimentícia:'                                          (+2 ,1)
           if $print-hdr-alimony = 'Y'
               print ' CPF'                (+1,2)
               print 'Nascimento'             ( ,21)
               print 'Nome'                   ( ,40)
               print 'Valor'                  (,123)
               let $print-hdr-alimony = 'N' 
           end-if                 
         end-if
         let $stop='Y'
        do valid_lines
      end-if
        ! Removed from IREN 2017 layout
        ! print #rslt_value                                                   (,114)  edit 9,999,999,999.99c
      let $add_string = $addstring
      do get-rslt-value-sum-ali($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value)
    end-if    
end-procedure Pension_section
!**************************************
begin-procedure validate_pension   ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2)
!**************************************
 #debug show '      validate_pension '
  if #rslt_value <> 0
    do valid_rcp_pye  ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2)
  end-if
end-procedure validate_pension
!**************************************
begin-procedure valid_rcp_pye  ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2)
!**************************************
 #debug show '      valid_rcp_pye '
 let $error1='N'
 let $error2='N'
 let #count_recip=0
 let $RECIPIENTE=''
begin-select distinct
P2.RECIPIENT_ID
 let $RECIPIENTE=&P2.RECIPIENT_ID
 let #count_recip=#count_recip+1
 do get_dependent_info  ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2, $RECIPIENTE, $error1 ,$error2)
from PS_GP_RCP_PYE_DTL P2, PS_GPBR_RECBEN_REL P22
where P2.EMPLID=$Emplid
and P2.EMPLID=P22.EMPLID
and P2.RECIPIENT_ID=P22.RECIPIENT_ID
and P22.DEPENDENT_BENEF=$user_fld2
and P2.PIN_NUM in [$add_string]
end-select

 if #count_recip=0
  let $error1='Y'
  #debug show '      $Error1 ' $error1
       write 10000 from $Emplid '- Area #7 - Pensão Alimentícia: Dependent Benefit ' $user_fld2
       write 10000 from '          Falta de Dados:'
       write 10000 from '          Elemento de Pensão Alimentícia sem Recipiente O sem Recpnt/Benef Relationship BRA'
       write 10000 from '          '
       !let $text=' Elemento de Pensão Alimentícia sem Recipiente O sem Recpnt/Benef Relationship BRA, Dependent Benefit: ' ||  $user_fld2 
       !print $text (+1,2)
 end-if 
 
 if #count_recip>1
  let $error2='Y'
  #debug show '      $Warning2 ' $error2
       write 10000 from $Emplid '- Area #7 - Pensão Alimentícia: Dependent Benefit ' $user_fld2
       write 10000 from '          Falta de Dados:'
       write 10000 from '          Elemento de Pensão Alimentícia com mais de um Recipiente'
       write 10000 from '        '
 end-if 
 
end-procedure valid_rcp_pye
!**************************************
begin-procedure get_dependent_info   ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2, $RECIPIENTE, $error1 ,$error2)
!**************************************
 #debug show '      get_dependent_info '
 let $error3='N'
 let $error4='N'
 let #count_depen=0
if $RECIPIENTE<>''
begin-select 
P3.DEPENDENT_BENEF
 let $DId=&P3.DEPENDENT_BENEF
P4.NAME_DISPLAY
 let $NOMBRE=&P4.NAME_DISPLAY
P4.BIRTHDATE
 let $Birth-Date = Rtrim(&P4.BIRTHDATE, ' ')
 if $Birth-Date <> ''
    Do Convert-To-DTU-Date($Birth-Date, $Birth-Date)
    Do DTU-Parse-Date ($Birth-Date, #y, #m, #d)
        Move #y to $y '0000'
        Move #m to $m '00'
        Move #d to $d '00'
        let $Birth-Date = $d || '/' || $m || '/' || $y
 end-if
 let #count_depen= #count_depen+1
  do Get-Dep-NatID ($Emplid, $DId, $DNa)
from PS_GPBR_RECBEN_REL P3, PS_DEPENDENT_BENEF P4 
where P3.EMPLID=$Emplid
and P3.RECIPIENT_ID=$RECIPIENTE
and P4.EMPLID=P3.EMPLID
and P4.DEPENDENT_BENEF=P3.DEPENDENT_BENEF
and P3.DEPENDENT_BENEF=$USER_FLD2
order by P4.BIRTHDATE
end-select
end-if
 if #count_depen=0
   let $error3='Y'
   #debug show '      $Warning3 ' $error3
    write 10000 from $Emplid '- Area #7 - Pensão Alimentícia: Dependent Benefit ' $user_fld2
    write 10000 from '          Falta de Dados:'                
    write 10000 from  '         Elemento de Pensão Alimentícia e Recipiente sem Dependente/Beneficiário.'
    write 10000 from  '        '
 end-if
 if #count_depen>1
   let $error4='Y'
   #debug show '      $Error4 ' $error4
    write 10000 from $Emplid '- Area #7 - Pensão Alimentícia: Dependent Benefit ' $user_fld2
    write 10000 from '          Falta de Dados:'                 
    write 10000 from  '         Elemento de Pensão Alimentícia e Recipiente com mais de um Dependente/Beneficiário.'
    write 10000 from  '        '
    !let $text=' Elemento de Pensão Alimentícia e Recipiente com mais de um Dependente/Beneficiário: ' ||  $user_fld2 
    !print $text (+1,2)
 end-if  

if $RECIPIENTE<>''
      if $error1='Y' or $error4='Y' 
          write 10000 from $Emplid '- Error found in Area #7 - Pensão Alimentícia'
      else
        let $filled-cpf = rtrim(ltrim($DNa,' '),' ')
          if $filled-cpf <> ''
             print $DNa                  (+1,2) edit 'BXXX.XXX.XXX-XX'
          else
             print '               '     (+1,2)
          end-if
            print $Birth-Date              ( ,21)
            print $NOMBRE                  ( ,40)
            print #rslt_value              (,113)  edit 99,999,999,999.99c 
            do valid_lines    
      end-if    
end-if
end-procedure get_dependent_info 
!******************************************************************************
begin-procedure OpenLog
#debug show 'PROCEDURE : OpenLog'
!******************************************************************************
move #prcs_process_instance to $ProcInstance '0000000000'
let $FileLog = '{FILEPREFIX}IREN_'|| $ProcInstance || '.log' || '{FILESUFFIX}'

open $FileLog as 10000 for-writing record=1000 status=#filestat
if #filestat != 0
    display 'Error opening Log file ' noline
    display $FileName
else
    #debug display '  File Open success ' noline
    #debug display $FileLog
end-if
end-procedure OpenLog
!******************************************************************************
begin-procedure CloseLog
#debug show 'Procedure: CloseLog'
!******************************************************************************
    close 10000
end-procedure CloseLog
begin-procedure valid_lines
 if #last-printed-line > #current-line
    let #last-printed-line = #current-line - 1
 end-if
 let #lines= #lines + (#current-line - #last-printed-line)
 let #last-printed-line = #current-line
 let #numberlines=#seveninipos + #lines
 let #tope_lineas=#sqr-max-lines -5
 if #numberlines < #tope_lineas
 else  
    graphic (#seveninipos,1  ,130) box #lines {G0}
    new-page
    let #lines=1
    let #y = #y + 1
    let #seveninipos=1
    let #last-printed-line = #seveninipos
 end-if
end-procedure valid_lines
begin-procedure valid_values
 #debug show ' valid_values '
if $addstring <> '' and $DONE='0'
begin-select distinct 
pin.descr &Pin_descr_name
  let $Pin_descr_name= &Pin_descr_name
  let $Descrip_name = $Descrip_name || $Pin_descr_name
  if (length($Pin_descr_name) > 0)
   let $Descrip_name = $Descrip_name || ', '
  end-if
from PS_GP_RSLT_SEG_VW RS12, 
PS_GP_RSLT_ERN_DED ED12,
PS_GP_PIN PIN
,PS_GP_SEG_GUIDE_WA RS0 
where RS12.EMPLID = $Emplid
!and RS12.EMPL_RCD = #Emplrcd
and RS12.CALC_TYPE = 'P'
and RS12.RSLT_VER_NUM = (select MAX(RS2.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS2
                      where RS12.EMPLID = RS2.EMPLID 
                      !and RS12.EMPL_RCD = RS2.EMPL_RCD 
                      and RS12.CAL_ID = RS2.CAL_ID )
and RS12.RSLT_REV_NUM = 1
and RS12.CALC_ACTION <> 'V' 
and RS12.PYE_CALC_STAT >= '50'
AND RS12.PYMT_DT >= $BgnDt
AND RS12.PYMT_DT <= $EndDt
and RS12.EMPLID = ED12.EMPLID 
!and RS12.EMPL_RCD = ED12.EMPL_RCD 
and RS12.CAL_RUN_ID = ED12.CAL_RUN_ID 
and RS12.GP_PAYGROUP = ED12.GP_PAYGROUP 
and RS12.CAL_ID = ED12.CAL_ID 
and RS12.ORIG_CAL_RUN_ID = ED12.ORIG_CAL_RUN_ID 
and RS12.RSLT_SEG_NUM = ED12.RSLT_SEG_NUM
and ED12.PIN_NUM in [$addstring]
and ED12.PIN_NUM=PIN.PIN_NUM
and RS12.EMPLID=RS0.EMPLID 
!and RS12.EMPL_RCD=RS0.EMPL_RCD 
and RS12.CAL_RUN_ID=RS0.CAL_RUN_ID 
and RS12.ORIG_CAL_RUN_ID=RS0.ORIG_CAL_RUN_ID 
and RS12.CAL_ID=RS0.CAL_ID
and RS12.GP_PAYGROUP=RS0.GP_PAYGROUP 
and RS0.COMPANY=$Company
end-select

if $curr_language_cd <> $Psoptions_Language_Cd
begin-select distinct 
pinlan.descr &Pin_descr_namelan
  let $Pin_descr_namelan= &Pin_descr_namelan
  let $Descrip_namelan = $Descrip_namelan || $Pin_descr_namelan
  if (length($Pin_descr_namelan) > 0)
   let $Descrip_namelan = $Descrip_namelan || ', '
  end-if
from PS_GP_RSLT_SEG_VW RS12lan, 
PS_GP_RSLT_ERN_DED ED12lan,
PS_GP_PIN_lang PINlan
,PS_GP_SEG_GUIDE_WA RS0lan 
where RS12lan.EMPLID = $Emplid
!and RS12lan.EMPL_RCD = #Emplrcd
and RS12lan.CALC_TYPE = 'P'
and RS12lan.RSLT_VER_NUM = (select MAX(RS2lan.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS2lan
                      where RS12lan.EMPLID = RS2lan.EMPLID 
                      !and RS12lan.EMPL_RCD = RS2lan.EMPL_RCD 
                      and RS12lan.CAL_ID = RS2lan.CAL_ID )
and RS12lan.RSLT_REV_NUM = 1
and RS12lan.CALC_ACTION <> 'V' 
and RS12lan.PYE_CALC_STAT >= '50'
AND RS12lan.PYMT_DT >= $BgnDt
AND RS12lan.PYMT_DT <= $EndDt
and RS12lan.EMPLID = ED12lan.EMPLID 
!and RS12lan.EMPL_RCD = ED12lan.EMPL_RCD 
and RS12lan.CAL_RUN_ID = ED12lan.CAL_RUN_ID 
and RS12lan.GP_PAYGROUP = ED12lan.GP_PAYGROUP 
and RS12lan.CAL_ID = ED12lan.CAL_ID 
and RS12lan.ORIG_CAL_RUN_ID = ED12lan.ORIG_CAL_RUN_ID 
and RS12lan.RSLT_SEG_NUM = ED12lan.RSLT_SEG_NUM
!and ED12lan.SLICE_END_DT >= $BgnDt
!and ED12lan.SLICE_END_DT <= $EndDt
and ED12lan.PIN_NUM in [$addstring]
and ED12lan.PIN_NUM=PINlan.PIN_NUM
and PINlan.LANGUAGE_CD=$curr_language_cd 
and RS12lan.EMPLID=RS0lan.EMPLID 
!and RS12lan.EMPL_RCD=RS0lan.EMPL_RCD 
and RS12lan.CAL_RUN_ID=RS0lan.CAL_RUN_ID 
and RS12lan.ORIG_CAL_RUN_ID=RS0lan.ORIG_CAL_RUN_ID 
and RS12lan.CAL_ID=RS0lan.CAL_ID 
and RS12lan.GP_PAYGROUP=RS0lan.GP_PAYGROUP 
and RS0lan.COMPANY=$Company 
end-select
end-if
end-if

if $substring <> '' and $DONE='0'
begin-select distinct 
pin2.descr &Pin_descr_name2
  let $Pin_descr_name2= &Pin_descr_name2
  let $Descrip_name = $Descrip_name || $Pin_descr_name2
  if (length($Pin_descr_name2) > 0)
   let $Descrip_name = $Descrip_name || ', '
  end-if
from PS_GP_RSLT_SEG_VW RS13, 
PS_GP_RSLT_ERN_DED ED13,
PS_GP_PIN PIN2
,PS_GP_SEG_GUIDE_WA RS1 
where RS13.EMPLID = $Emplid
!and RS13.EMPL_RCD = #Emplrcd
and RS13.CALC_TYPE = 'P'
and RS13.RSLT_VER_NUM = (select MAX(RS2.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS2
                      where RS13.EMPLID = RS2.EMPLID 
                      !and RS13.EMPL_RCD = RS2.EMPL_RCD 
                      and RS13.CAL_ID = RS2.CAL_ID )
and RS13.RSLT_REV_NUM = 1
and RS13.CALC_ACTION <> 'V' 
and RS13.PYE_CALC_STAT >= '50'
AND RS13.PYMT_DT >= $BgnDt
AND RS13.PYMT_DT <= $EndDt
and RS13.EMPLID = ED13.EMPLID 
!and RS13.EMPL_RCD = ED13.EMPL_RCD 
and RS13.CAL_RUN_ID = ED13.CAL_RUN_ID 
and RS13.GP_PAYGROUP = ED13.GP_PAYGROUP 
and RS13.CAL_ID = ED13.CAL_ID 
and RS13.ORIG_CAL_RUN_ID = ED13.ORIG_CAL_RUN_ID 
and RS13.RSLT_SEG_NUM = ED13.RSLT_SEG_NUM
and ED13.PIN_NUM in [$substring]
and ED13.PIN_NUM=PIN2.PIN_NUM  
and RS13.EMPLID=RS1.EMPLID 
!and RS13.EMPL_RCD=RS1.EMPL_RCD 
and RS13.CAL_RUN_ID=RS1.CAL_RUN_ID 
and RS13.ORIG_CAL_RUN_ID=RS1.ORIG_CAL_RUN_ID 
and RS13.CAL_ID=RS1.CAL_ID 
and RS13.GP_PAYGROUP=RS1.GP_PAYGROUP 
and RS1.COMPANY=$Company 
end-select

if $curr_language_cd <> $Psoptions_Language_Cd
begin-select distinct 
pinlans.descr &Pin_descr_namelans
  let $Pin_descr_namelan= &Pin_descr_namelans
  let $Descrip_namelan = $Descrip_namelan || $Pin_descr_namelan
  if (length($Pin_descr_namelan) > 0)
   let $Descrip_namelan = $Descrip_namelan || ', '
  end-if
from PS_GP_RSLT_SEG_VW RS12lans, 
PS_GP_RSLT_ERN_DED ED12lans,
PS_GP_PIN_lang PINlans
,PS_GP_SEG_GUIDE_WA RS1lans 
where RS12lans.EMPLID = $Emplid
!and RS12lans.EMPL_RCD = #Emplrcd
and RS12lans.CALC_TYPE = 'P'
and RS12lans.RSLT_VER_NUM = (select MAX(RS2lans.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS2lans
                      where RS12lans.EMPLID = RS2lans.EMPLID 
                      !and RS12lans.EMPL_RCD = RS2lans.EMPL_RCD 
                      and RS12lans.CAL_ID = RS2lans.CAL_ID )
and RS12lans.RSLT_REV_NUM = 1
and RS12lans.CALC_ACTION <> 'V' 
and RS12lans.PYE_CALC_STAT >= '50'
AND RS12lans.PYMT_DT >= $BgnDt
AND RS12lans.PYMT_DT <= $EndDt
and RS12lans.EMPLID = ED12lans.EMPLID 
!and RS12lans.EMPL_RCD = ED12lanss.EMPL_RCD 
and RS12lans.CAL_RUN_ID = ED12lans.CAL_RUN_ID 
and RS12lans.GP_PAYGROUP = ED12lans.GP_PAYGROUP 
and RS12lans.CAL_ID = ED12lans.CAL_ID 
and RS12lans.ORIG_CAL_RUN_ID = ED12lans.ORIG_CAL_RUN_ID 
and RS12lans.RSLT_SEG_NUM = ED12lans.RSLT_SEG_NUM
and ED12lans.PIN_NUM in [$substring]
and ED12lans.PIN_NUM=PINlans.PIN_NUM
and PINlans.LANGUAGE_CD=$curr_language_cd 
and ED12lans.EMPLID=RS1lans.EMPLID 
!and ED12lans.EMPL_RCD=RS1lans.EMPL_RCD 
and ED12lans.CAL_RUN_ID=RS1lans.CAL_RUN_ID 
and ED12lans.ORIG_CAL_RUN_ID=RS1lans.ORIG_CAL_RUN_ID 
and ED12lans.CAL_ID=RS1lans.CAL_ID 
and ED12lans.GP_PAYGROUP=RS1lans.GP_PAYGROUP 
and RS1lans.COMPANY=$Company 
end-select
end-if
end-if
 if (length($Descrip_namelan) > 0)
   let $Descrip_name = $Descrip_namelan
 end-if
 let $DONE='1'
end-procedure valid_values

!**************************************
begin-procedure  get-rslt-value-sum-ali ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value)
!**************************************
 #debug show '      Sum Alimony elements '
let #add_value = 0
let #sub_value = 0
let #rslt_value = 0
let $Descrip_name = ''
let $user_fld2='0'
if $add_string <> ''
begin-select
SUM(ED11.CALC_RSLT_VAL + ED11.CALC_ADJ_VAL) &ImportED11
ED11.USER_FLD2 
 let #add_value = &ImportED11
 let $user_fld2 = &ED11.USER_FLD2
 do get-rslt-value-rest-ali ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2)
 let #rslt_value = #add_value - #sub_value
 do validate_pension  ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2)
from PS_GP_RSLT_SEG_VW RS11, 
PS_GP_RSLT_ERN_DED ED11
,PS_GP_SEG_GUIDE_WA SG11
where RS11.EMPLID = $Emplid
and RS11.CALC_TYPE = 'P'
and RS11.RSLT_VER_NUM = (select MAX(RS2.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS2
                      where RS11.EMPLID = RS2.EMPLID 
                      and RS11.CAL_ID = RS2.CAL_ID )
and RS11.RSLT_REV_NUM = 1
and RS11.CALC_ACTION <> 'V' 
and RS11.PYE_CALC_STAT >= '50'
and RS11.PYMT_DT >= $BgnDt
and RS11.PYMT_DT <= $EndDt
and RS11.EMPLID = ED11.EMPLID 
and RS11.CAL_RUN_ID = ED11.CAL_RUN_ID 
and RS11.GP_PAYGROUP = ED11.GP_PAYGROUP 
and RS11.CAL_ID = ED11.CAL_ID 
and RS11.ORIG_CAL_RUN_ID = ED11.ORIG_CAL_RUN_ID 
and RS11.RSLT_SEG_NUM = ED11.RSLT_SEG_NUM
and ED11.PIN_NUM in [$add_string] 
and ED11.EMPLID=SG11.EMPLID 
and ED11.CAL_RUN_ID=SG11.CAL_RUN_ID 
and ED11.ORIG_CAL_RUN_ID=SG11.ORIG_CAL_RUN_ID 
and ED11.CAL_ID=SG11.CAL_ID 
and ED11.GP_PAYGROUP=SG11.GP_PAYGROUP 
and SG11.COMPANY=$Company
and ED11.USER_FLD1=SG11.COMPANY 
group by ED11.USER_FLD2    
end-select
end-if 
end-procedure get-rslt-value-sum-ali
!**************************************
begin-procedure  get-rslt-value-rest-ali ($add_string,$sub_string,$Emplid,$BgnDt,$EndDt,#Emplrcd,$Company, $RequirePINNM, #rslt_value, $user_fld2) 
!**************************************
 #debug show '      Rest Alimony elements '
if $sub_string <> ''
begin-select
SUM(ED22.CALC_RSLT_VAL) &ImportED22
  let #sub_value = &ImportED22
from PS_GP_RSLT_SEG_VW RS33, 
PS_GP_RSLT_ERN_DED ED22
,PS_GP_SEG_GUIDE_WA SG22 
where RS33.EMPLID = $Emplid
and RS33.CALC_TYPE = 'P'
and RS33.RSLT_VER_NUM = (select MAX(RS4.RSLT_VER_NUM) 
                      from PS_GP_RSLT_SEG_VW RS4
                      where RS33.EMPLID = RS4.EMPLID 
                      and RS33.CAL_ID = RS4.CAL_ID )
and RS33.RSLT_REV_NUM = 1
and RS33.CALC_ACTION <> 'V' 
and RS33.PYE_CALC_STAT >= '50'
and RS33.PYMT_DT >= $BgnDt
and RS33.PYMT_DT <= $EndDt
and RS33.EMPLID = ED22.EMPLID 
and RS33.CAL_RUN_ID = ED22.CAL_RUN_ID 
and RS33.GP_PAYGROUP = ED22.GP_PAYGROUP 
and RS33.CAL_ID = ED22.CAL_ID 
and RS33.ORIG_CAL_RUN_ID = ED22.ORIG_CAL_RUN_ID 
and RS33.RSLT_SEG_NUM = ED22.RSLT_SEG_NUM
and ED22.PIN_NUM in [$sub_string]
and ED22.EMPLID=SG22.EMPLID 
and ED22.CAL_RUN_ID=SG22.CAL_RUN_ID 
and ED22.ORIG_CAL_RUN_ID=SG22.ORIG_CAL_RUN_ID 
and ED22.CAL_ID=SG22.CAL_ID 
and ED22.GP_PAYGROUP=SG22.GP_PAYGROUP 
and SG22.COMPANY=$Company  
and ED22.USER_FLD1=SG22.COMPANY 
and ED22.USER_FLD2=$user_fld2  
end-select
end-if

end-procedure get-rslt-value-rest-ali
!**************************************
!#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#include 'sqrtrans.sqc'
#Include 'useprntr.sqc'  !Indicate which printer to use for reports
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'prcslng.sqc'   !Process Language



