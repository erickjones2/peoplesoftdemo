!***********************************************************************
! GPMXIM06:  Instituto Mexicano Del Seguro Social,                     *
!            REPORTE DE BAJAS DE ASEGURADOS DEL SEGURO SOCIAL (DEV)    *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  31781263                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 7
#define c3 23
#define c4 75
#define c5 86
#define c6 92
#define c7 98
#define c8 106
#define c9 117
#define c10 122
#define c11 129
#define c12 143
#define c13 162


begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move   'GPMXIM06' to $ReportID
  move 'Ver.2020 PUM37.01'  to $ReportVersion
  display $ReportID
  display $ReportVersion
  display ' '

  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL'         to $ReportTitle1
  move   'DELEGACIÓN DEL IMSS'                          to $ReportTitle2
  move   'COMUNICACIÓN DE BAJAS DE ASEGURADOS EDI (DISP. MAGNÉTICOS)' to $ReportTitle3
  display $ReportTitle1
  display $ReportTitle2
  display $ReportTitle3
  move '1' to $Reportdatetype
  move '1' to $Reportyear4
  move 'GPMXIM06' to $ReportID
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Init-Array
  !do Get-Max-SALDF
  do Select-Parameters-IMSS2
  do OPEN-FILE

  if rtrim($FecFin,' ') <> ''
     move $FecFin to $AsOfDate
  end-if

  move &RC_IMSS2.ESTABID to $Reg_Patronal
  
  Let $Job_Tbl = 'A'
  Let $Reg_Patronal_RC = $Reg_Patronal
  
  Do Get-Establishment-Optn
  
  Do Report
  do write-total

  close 1
end-procedure Init-Report


!********************************************************
! Obtiene todos los registros patronales de la compañía *
!********************************************************
begin-procedure Company-Report
begin-select DISTINCT
LT.ESTABID
  move &LT.ESTABID to $Reg_Patronal
  do Process-IMSS-Location

FROM PS_ESTAB_TBL LT
WHERE LT.COMPANY = $Company
AND LT.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL
                WHERE ESTABID = LT.ESTABID
                  AND COMPANY = $Company
                  AND EFFDT <= $EndDt)
AND LT.EFF_STATUS = 'A'
end-select
end-procedure Company-Report
!********************************************************************************************


begin-procedure Process-IMSS-Location
  move 'N' to $EndofReport
begin-SELECT
IMSS.DESCR,
IMSS.DESCR_AC,
IMSS.ADDRESS1,
IMSS.ADDRESS2,
IMSS.ADDRESS3,
IMSS.ADDRESS4,
IMSS.CITY,
IMSS.COUNTY,
IMSS.STATE,
IMSS.POSTAL,
IMSS.COUNTRY,
IMSS.GUIDE_NBR_MEX,
IMSS.ESTABID
  let $LocationName     = rtrim(&IMSS.DESCR,' ')
  let $LocationAbbrv    = rtrim(&IMSS.DESCR_AC,' ')
  let $LocationStreet1  = rtrim(&IMSS.ADDRESS1,' ')
  let $LocationStreet2  = rtrim(&IMSS.ADDRESS2,' ')
  let $LocationStreet3  = rtrim(&IMSS.ADDRESS3,' ')
  let $LocationStreet4  = rtrim(&IMSS.ADDRESS4,' ')
  let $LocationCity     = rtrim(&IMSS.CITY,' ')
  let $LocationCounty   = rtrim(&IMSS.COUNTY,' ')
  let $Guia             = &IMSS.GUIDE_NBR_MEX
  let $Guia             = substr($Guia,2,6)
  !let $IMSSer           = &IMSS.ESTABID
  move &IMSS.STATE      to $LocationState
  move &IMSS.POSTAL     to $LocationZip
  move &IMSS.COUNTRY    to $LocationCountry

  !do Report

FROM  PS_ESTAB_TBL IMSS

WHERE IMSS.EFFDT = (SELECT MAX(EFFDT) FROM PS_ESTAB_TBL
                    WHERE ESTABID = IMSS.ESTABID
                      AND EFF_STATUS = 'A')
  AND IMSS.ESTABID  = $Reg_Patronal
end-SELECT
  move 'Y' to $EndofReport
end-procedure Process-IMSS-Location

!***************************** **************************************
begin-procedure Get-StateName
begin-Select
ST.DESCR      &STDESCRIP
FROM PS_STATE_NAMES_TBL  ST
WHERE ST.COUNTRY = 'MEX'
AND   ST.STATE   = &IMSS.STATE
end-select
end-Procedure
!***************************** OPEN-FILE ***************************************
BEGIN-PROCEDURE OPEN-FILE
  LET $FILE_NAME =  '{FILEPREFIX}' || 'GPMXIM06.TXT' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  OPEN $FILE_NAME AS 1 FOR-WRITING RECORD=190:FIXED STATUS=#FILESTAT
END-PROCEDURE OPEN-FILE
!***************************** END-FILE ***************************************

begin-heading 8

  let #RptCol = {ColR} - 2
  if $Company  <> $PriorCompany
     do Get-Company-Data-Mex
     move $Company  to $PriorCompany
     
  end-if
  
   print 'PeopleSoft'        (1)  center
        
    print $ReportTitle1       (+1) center
    print 'Reporte:        '  (,1)
    print 'GPMXIM06'          ()
    print 'Página:   '        (,140)
    page-number               ()
    print $ReportTitle2       (+1) center
    print 'Compañía:       '  (,1)
    do to_upper($CompanyName)
    print $CompanyName        ()  
    print 'Fecha:    '        (,140)
    print $reportdate         ()
    print $ReportTitle3       (+1) center
    print 'Reg.Patronal:   '  (,1)
    print $Reg_Patronal       ()  edit XXXXXXXXXX-X
    do to_upper($LocationName)
    let $locname = '('||substr(rtrim($LocationName,' '), 1, 25)||')'
    print $locname            (,+2)
   
    date-time () HH:MM:SS &ReportTime
    print 'Hora:     '        (,140)
    print &ReportTime         () 
    print 'Núm. de guía:   '  (+1,1)
    print $Guia               ()  edit XXXXX
  print '_' (+1,1,165) fill

 print 'NUM'                     (+1,{c1})
 print 'SEC.'                    (+1,{c1})
 print 'NUMERO DE    D'          (-1,{c2})
 print 'AFILIACION   V'          (+1,{c2})
 print 'NOMBRE DEL ASEGURADO'    (-1,{c3})
 print ' SALARIO'                (,{c4})
 print 'INTEGRADO'               (+1,{c4})
 print 'TIPO'                    (-1,{c5})
 print 'TRAB'                    (+1,{c5})
 print 'TIPO'                    (-1,{c6})
 print 'SAL.'                    (+1,{c6})
 print 'SEMANA'                  (-1,{c7})
 print 'JR.RED'                  (+1,{c7})
 print 'FECHA MOV.'              (-1,{c8})
 print 'UMF'                     (,{c9})
 print 'TIPO'                    (,{c10})
 print 'MOV.'                    (+1,{c10})
 print '  CLAVE'                 (-1,{c11})
 print 'TRABAJADOR'              (+1,{c11})
 print '    C U R P'             (-1,{c12})
 print ' '                       (+1,{c12})
 print 'CAUSA'                   (-1,{c13})
 print 'BAJA'                    (+1,{c13})
 print '_' (+1,1,175) fill
end-heading


begin-procedure init-array
  create-array name=movim size=100000  field=detalle:char
end-procedure init array


begin-procedure Report
 move 0 to #EECount
 move 0 to #numsec
 let $v_select = ''
 let $v_espacio = ''
 Let $EmplLocation_Aux = ''
 Let $Reg_Patronal_Aux = ''
 Do Advice-Flag
 Do WhereForPrint

  let $empini = rtrim($empini, ' ')
  let $empfin = rtrim($empfin, ' ')
  let $TipSal = rtrim($TipSal, ' ')

if (rtrim($empini, ' ') <> '') and (rtrim($empfin,' ') = '')
  move ' AND A.EMPLID = ''' to $v_select
  concat $EmpIni with $v_select
  concat ''''  with $v_select
  display $v_select noline
end-if

if (rtrim($empini, ' ') <> '') and (rtrim($empfin, ' ') <> '')
  move   ' AND A.EMPLID BETWEEN ''' to $v_select
  concat $EmpIni with $v_select
  concat ''' AND ''' with $v_select
  concat $EmpFin  with $v_select
  concat ''''  with $v_select
end-if



if ($BegDt <> '') and ($EndDt <> '')
  #Debug show 'Dates must be added in one Day for Termination to match with Job Dates'
  #Debug show '  $BegDt  :' $BegDt 
  #Debug show '  $EndDt  :' $EndDt
  
  #Debug Show 'Convert to DTU'
  DO Convert-To-DTU-Date($BegDt, $BegDt)
  DO Convert-To-DTU-Date($EndDt, $EndDt)
  #Debug show '  $BegDt  :' $BegDt 
  #Debug show '  $EndDt  :' $EndDt
  
  #Debug Show 'Add 1 day'
  Do dtu-add-days ($BegDt, 1, $BegDt)
  Do dtu-add-days ($EndDt, 1, $EndDt)
  #Debug show '  $BegDt  :' $BegDt 
  #Debug show '  $EndDt  :' $EndDt
  
  #Debug Show 'Return to Native format'
  DO Convert-From-DTU-Date($BegDt, $BegDt)
  DO Convert-From-DTU-Date($EndDt, $EndDt)
  #Debug show '  $BegDt  :' $BegDt 
  #Debug show '  $EndDt  :' $EndDt
  
  
  
  concat ' AND A.EFFDT BETWEEN ' with $v_select
  concat ''''  with $v_select
  concat $BegDt with $v_select
  concat ''''  with $v_select
  concat ' AND ' with $v_select
  concat ''''  with $v_select
  concat $EndDt  with $v_select
  concat ''''  with $v_select
else
  if ($fecini <> '') and ($fecfin <> '')
     let $EndDt = $FecFin
     concat ' AND A.ACTION_DT BETWEEN ' with $v_select
     concat ''''  with $v_select
     concat $FecIni with $v_select
     concat ''''  with $v_select
     concat ' AND ' with $v_select
     concat ''''  with $v_select
     concat $FecFin  with $v_select
     concat ''''  with $v_select
  end-if
end-if

  if rtrim($TipSal,' ') <> '0040' and $TipSal <> ''
     concat ' AND JBJR.SALARY_TYPE_MEX = ''' with $v_select
     concat $TipSal with $v_select
     concat '''' with $v_select
  end-if

  #Debug show '$v_select '  $v_select
  #Debug show '$WhereForPrinting ' $WhereForPrinting
  #Debug show '$v_flag ' $v_flag

If $topado = 'Y'
   Let $UMA_Effdt = $EndDt
   do Get-Max-UMA
End-If  

begin-SELECT DISTINCT
A.EMPLID
  add 1 to #numsec
  print #numsec                    (+1,{c1}) edit 0999
  move &A.EMPLID  to  $Emplid
  let $Sub_Emplid = substr($Emplid,1,10)
A.DEPTID
A.EFFDT
A.ACTION
A.ACTION_REASON
  move &A.ACTION         to $Action
  move &A.ACTION_REASON  to $Action_Reason
  do GetTermReason
  evaluate $Imss_Term_Reason
     When = '0140'
        !Term of Contract                   
        let $Imss_Term_Reason_ch = '1'
        break
     When = '0020'
     When = '0070'
        !Voluntary Resignation    
        let $Imss_Term_Reason_ch = '2'
        break
     When = '0150'
        !Employees Resignation
        let $Imss_Term_Reason_ch = '3'
        break
     When  = '0090'
        !Employee Death      
        let $Imss_Term_Reason_ch = '4'
        break 
     When = '0130'
     When = '0160'
        !Closing    
        let $Imss_Term_Reason_ch = '5'
        break
     When = '0080'
     When = '0180'
        !Absenteeism    
        let $Imss_Term_Reason_ch = '7'
        break 
     When = '0170'
        !Anticipated End of Contract
        let $Imss_Term_Reason_ch = '8'
        break  
     When  = '0040'
        !Retirement                  
        let $Imss_Term_Reason_ch = '9'
        break 
     When  = '0060'
        !Pension-Off                     
        let $Imss_Term_Reason_ch = 'A'
        break  
     when-other
        let $Imss_Term_Reason_ch = '6'
        break
  end-evaluate
  print $Imss_Term_Reason_ch     (0,{c13})
A.ESTABID  
A.LOCATION
  
  LET $EmplEstabId  = &A.ESTABID
  let $Reg_Location = &A.LOCATION 
  
  if &A.EMPLID <> $Saveemplid
     move &A.EMPLID    to  $SaveEmplid
     move &A.LOCATION  to  $SaveLocation
  else
     if &A.LOCATION <> $SaveLocation
        if $Savelocation = $Location
           move 'Y' To $Baja
        end-if
      end-if
  end-if
  
  If $Estab_Opt = 'J'
    LET $Reg_Patronal = $EmplEstabId
  Else
    If $Reg_Location <> $EmplLocation_Aux
      Let $EmplLocation_Aux = $Reg_Location 
      do Get-Reg-Patronal
    End-if  
  End-if
  
  If $Reg_Patronal <> $Reg_Patronal_Aux  
    Do Process-IMSS-Location
    Let $Reg_Patronal_Aux = $Reg_Patronal
  End-if
  
A.EMPL_RCD
  do GetImssId
  print $Imss_Id                    (0,{c2})  edit XXXXXXXXXXbbbX
  do GetCurp
  Print $EmplCurp                   (0,{c12})
NAM.NAME
  !move &NAM.NAME   to $Name
  !do to_upper($Name)
  !do Rotate-Name-For-Mag-Media-Mex
  !print $Name                      (0,{c3},50)
T.EFFDT
T.GPMX_SDI_FIX
T.GPMX_SDI_VAR
T.GPMX_SDI_TOT
  let #FixedCurr = &T.GPMX_SDI_FIX
  let #VarCurr   = &T.GPMX_SDI_VAR
  let #IDSCurr   = &T.GPMX_SDI_TOT
  
  if $Topado = 'Y'
     if #IDSCurr >  #SDIMax
        let #IDSCurr = #SDIMax
     end-if
  end-if
  print #IDSCurr                   (0,{c4}) edit 9,999.99
JBJR.IMS_TERM_DT_MEX
  move &JBJR.IMS_TERM_DT_MEX to $Term_Dt
JBJR.WORKER_TYPE_MEX
   Move &JBJR.WORKER_TYPE_MEX to $Worker_Type
   evaluate &JBJR.WORKER_TYPE_MEX
     when = '0010'
       move '1' to $Worker_Type
       break
     when = '0020'
       move '2' to $Worker_Type
       break
     when = '0030'
       move '3' to $Worker_Type
       break
   end-evaluate
   print $Worker_Type               (0,{c5})
JBJR.SALARY_TYPE_MEX
   evaluate &JBJR.SALARY_TYPE_MEX
     when = '0010'
        move '0' to $SalaryType
        break
     when = '0030'
        move '1' to $SalaryType
        break
     when = 'M'
        move '0020' to $SalaryType
        break
   end-evaluate
   print $SalaryType    (0,{c6})
JBJR.REDUCED_WEEK_MEX
   evaluate &JBJR.REDUCED_WEEK_MEX
     when = '0000'
       move '0' to $ReducedWk
       break
     when = '0010'
       move '1' to $ReducedWk
       break
     when = '0020'
       move '2' to $ReducedWk
       break
     when = '0030'
       move '3' to $ReducedWk
       break
     when = '0040'
       move '4' to $ReducedWk
       break
     when = '0050'
       move '5' to $ReducedWk
       break
     when = '0060'
       move '6' to $ReducedWk
       break
   end-evaluate
   print $ReducedWk     (0,{c7})
NAM.FIRST_NAME
  Move &NAM.FIRST_NAME    to $EmpName
NAM.LAST_NAME
   Move &NAM.LAST_NAME   to $EmpPat
NAM.SECOND_LAST_NAME
   Move &NAM.SECOND_LAST_NAME     to $EmpMat
   Let $Name = $EmpName
   
   do to_upper($Names)
    
   do Rotate-Name-For-Mag-Media-Mex
   !show 'the name is '
   !show $Names
   print $Names                      (0,{c3},50)
   
     !do convert-to-dtu-date (&T.EFFDT,$TermDt-dtu)
     do convert-to-dtu-date (&JBJR.IMS_TERM_DT_MEX,$TermDt-dtu)
     let $TermDt = Translate ($TermDt-dtu,'-','')
     do dtu-parse-date ($TermDt-dtu,#dtu-yr,#dtu-mo,#dtu-da)
     move #dtu-yr to $dtu-yr 9999
     move #dtu-da  to $dtu-da  09
     move #dtu-mo  to $dtu-mo  09
     let $Fecha = $dtu-da || $dtu-mo || $dtu-yr
     let $fechamovto = $dtu-da || '/' || $dtu-mo || '/' || $dtu-yr
     print $fechamovto (0,{c8})
     print '   '       (0,{c11})
     print &A.EMPLID   ()
  If rtrim($Imss_Id,' ') <> ''
     add 1 to #EECount
     do write-rcd
     do search
  end-if
  LABELQ:
     Move 'N' To $Baja

FROM   PS_JOB               A,
       PS_NAMES             NAM,
       PS_GPMX_SDI_WA       T,
       PS_ACT_RSN_TBL_MEX   S,
       PS_JOB_JR            JBJR

WHERE NAM.EMPLID         = A.EMPLID
  AND A.EMPLID           = T.EMPLID
  AND A.COMPANY          = $Company
  AND A.EMPLID           = JBJR.EMPLID
  AND A.EMPLID           = JBJR.EMPLID
  AND A.EFFDT            = JBJR.EFFDT
  AND A.EFFSEQ           = JBJR.EFFSEQ
  AND A.EMPL_RCD         = JBJR.EMPL_RCD
  AND S.SUA_REASON_MEX   = T.SUA_REASON_MEX
  AND S.IMS_PRN_FORM_MEX = T.IMS_PRN_FORM_MEX
  AND S.IMS_PRN_FORM_MEX = '0020'
  AND S.ACTION = A.ACTION
  AND S.ACTION_REASON = A.ACTION_REASON !31781263
  !AND A.EFFDT = T.EFFDT      !ICE1222593000
  AND NAM.NAME_TYPE      = 'PRI'
  AND NAM.EFFDT          = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                             WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                               AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                               AND NAM_ED.EFFDT <= A.EFFDT)
[$WhereForPrinting]
[$v_flag]
[$v_select]
Order by [$OrderEstablishment] A.EFFDT DESC,
         A.EMPLID,
         A.EMPL_RCD
end-select
   if #EECount > 0
      !do Write-Total
      do Imprime-Totales
      new-page
   end-if

end-procedure Report


Begin-Procedure WhereForPrint
  If rtrim($EndDt,' ') <> ''
    let $WhereForPrinting =' AND T.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
                WHERE EMPLID = T.EMPLID
                  AND EFFDT    = T.EFFDT)'
  else
    let $WhereForPrinting =' AND T.SEQNUM = (SELECT MAX(SEQNUM) FROM PS_GPMX_SDI_WA
                WHERE EMPLID = T.EMPLID
                  AND EFFDT    = T.EFFDT)'
   end-if
   
  If Rtrim($Reg_Patronal, ' ') <> ''
    let $WhereForPrinting = $WhereForPrinting || $WhereForEstablishment
  end-if     
   
end-procedure WhereForPrint



begin-procedure GetMedicalUnit
  move '' to $MedicalUnit
begin-select
UMF.MED_REC_CD_MEX
    let $MedicalUnit = &UMF.MED_REC_CD_MEX
FROM PS_PERS_DATA_MEX UMF 
WHERE UMF.EMPLID = $Emplid 
AND UMF.EFFDT = (SELECT MAX(EFFDT) FROM PS_PERS_DATA_MEX
                WHERE EMPLID = $Emplid 
                AND EFFDT <= $EndDt)
end-select
end-procedure



begin-procedure GetCurp
  move '' to $EmplCurp
begin-select
CURP.NATIONAL_ID
    let $EmplCurp = &CURP.NATIONAL_ID

FROM PS_PERS_NID CURP
WHERE CURP.NATIONAL_ID_TYPE='CURP'
AND CURP.EMPLID  = $Emplid
AND CURP.COUNTRY = 'MEX'
end-select
end-procedure GetCurp


begin-procedure GetImssId
  move '' to $Imss_Id
begin-select
IMID.NATIONAL_ID
    let $Imss_Id = &IMID.NATIONAL_ID

FROM PS_PERS_NID IMID
WHERE IMID.NATIONAL_ID_TYPE='IMSS'
AND IMID.EMPLID  = $Emplid
AND IMID.COUNTRY = 'MEX'
end-select
end-procedure GetImssId


begin-procedure GetTermReason
begin-select
TR.IMS_TER_REASON_MEX
   move &TR.IMS_TER_REASON_MEX to $Imss_Term_Reason

FROM PS_ACT_RSN_TBL_MEX TR
WHERE TR.ACTION        = $Action
  AND TR.ACTION_REASON = $Action_Reason
end-select
end-procedure GetTermReason


begin-procedure Advice-Flag
 let $YesFlag = 'Y'
 if $Reimp_Av = 'N' or rtrim($Reimp_Av,' ') = ''
    let $v_flag = ' AND (A.EMPLID NOT IN (SELECT FLG.EMPLID FROM PS_GPMX_IMS_CONTR FLG'
    let $v_flag = $v_flag || ' WHERE FLG.EMPLID = A.EMPLID '
    let $v_flag = $v_flag || ' AND   FLG.EFFDT  = T.EFFDT '
    let $v_flag = $v_flag || 'AND (FLG.GPMX_IMS_TER_ADV = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_TER_DEV = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ' OR FLG.GPMX_IMS_TER_EDI = ''' || $YesFlag || ''''
    let $v_flag = $v_flag || ')))'

 else
    let $v_flag = ''
 end-if

end-procedure


begin-Procedure Imprime-Totales
print 'TOTAL DE BAJAS DE ASEGURADOS REGISTRADAS : ' (+2,1)
print #numsec ()  edit 8888888
print '' (+2,1)
end-procedure

begin-procedure Get-Max-SALDF
 if rtrim($EndDt,' ') =''
  let $EndDt = $AsOfDate
 end-if
Begin-select
WZ.GPMX_MINIMUM_WAGE
   Let #MinWage = &WZ.GPMX_MINIMUM_WAGE
FROM PS_GPMX_MIN_WAGE   WZ

WHERE  WZ.WAGE_ZONE_MEX  = '10'
AND    WZ.EFFDT      = (SELECT MAX(EFFDT) FROM   PS_GPMX_MIN_WAGE
                        WHERE WAGE_ZONE_MEX = '10'
                        AND EFFDT <= $EndDt)
end-select
let #SDImaxDF = 25 *  #MinWage
end-procedure

begin-procedure Write-Rcd
   do to_upper($EmpPat)
   do to_upper($EmpMat)
   do to_upper($EmpName)
   let $IDS = #IDSCurr
   print '02'   (0,{c10})
   Let $Filler_Zero = rpad($filler0,15,'0')
   
      Write 1 FROM $Reg_Patronal:11   -
                   $Imss_Id:11 -
                   $EmpPat:27 -
                   $EmpMat:27 -
                   $EmpName:27 -
                   $Filler_Zero:15 -
                   $Fecha:8 -
                   '     ' -
                   '02'
                   $Guia:5 -
                   $Sub_Emplid:10 -
                   $Imss_Term_Reason_ch -
                   '                  ':18 -
                   '9'
end-procedure


begin-procedure Write-Total
   if #EECount > 0
      move   #EECount           to  $EECount           000000

      Write 1 FROM '*************' -
                   '                                           ':43 -
                   $EECount:6 -
                   '                                                                        ':71 -
                   $Guia:5 -
                   '                             ':29 -
                   '9'
   !Write 1 FROM $space:166

   end-if
end-procedure


begin-procedure SEARCH

  if rtrim($Term_Dt, ' ') = ''
    display 'Empeado sin fecha de baja Datos de Puesto (Mexico): '  &A.EMPLID 
  end-if
begin-select
COUNT(*) &TOTAL
FROM PS_GPMX_IMS_CONTR  P4
WHERE P4.EMPLID  = &A.EMPLID
  AND P4.EFFDT   = $Term_Dt
end-select
  if &TOTAL = 0
     do INSERT_1
  else
     do UPDATE_1
  end-if
end-procedure


begin-procedure INSERT_1
begin-sql
INSERT INTO PS_GPMX_IMS_CONTR
       (EMPLID,
        EFFDT,
        GPMX_IMS_HIRE_ADV,
        GPMX_IMS_MOD_ADV,
        GPMX_IMS_TER_ADV,
        GPMX_IMS_HIRE_DEV,
        GPMX_IMS_MOD_DEV,
        GPMX_IMS_TER_DEV,
        GPMX_IMS_HIRE_EDI,
        GPMX_IMS_MOD_EDI,
        GPMX_IMS_TER_EDI)
VALUES (&A.EMPLID,
        $Term_Dt,
        'N',
        'N',
        'N',
        'N',
        'N',
        'Y',
        'N',
        'N',
        'N')
end-sql
end-procedure


begin-procedure UPDATE_1
begin-sql
UPDATE PS_GPMX_IMS_CONTR
SET  GPMX_IMS_TER_DEV = 'Y'
WHERE EMPLID  = &A.EMPLID
  AND EFFDT   = $Term_Dt
end-sql
end-procedure


begin-procedure TO_UPPER(:$in)
  let $in = rtrim($in,' ')
  let #c = 1
  let $cad = ''

  Let $Name_In = $in
  
  while #c <= length($in)
  
    let $Found = 'N'
    let $Test_Char = Substr($Name_In, #c, 1)
    let #Test_Code = ascii(Upper($Test_Char))
    if (#Test_Code > 64
    and #Test_Code < 91)
      let $cad  = $cad  || Upper($Test_Char)
      let $Found = 'Y'
    end-if
  
    if ($Found = 'N')
     let $char_aux = substr($in,#c,1)
     let $char = lower($char_aux)     
     evaluate $char
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
           let $let = 'A'
           let $cad = $cad || $let           
           break
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
           let $let = 'E'
           let $cad = $cad || $let           
           break
        when = 'í'
        when = 'ï'
        when = 'î'
        when = 'ì'
           let $let = 'I'
           let $cad = $cad || $let           
           break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'ó'   
           let $let = 'O'
           let $cad = $cad || $let           
           break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
           let $let = 'U'
           let $cad = $cad || $let           
           break
        when = 'ñ'
           let $let = 'N'
           let $cad = $cad || $let           
           break
        when = ' '                         
           let $let = ' '
           let $cad = $cad || $let  
        when-other
           break
     end-evaluate     
    end-if
     let #c = #c + 1
  end-while
  let $in = $cad
  let $cad = ''
end-procedure


begin-procedure Get-Reg-Patronal
begin-select 
LOC2.ESTABID
  LET $Reg_Patronal = &LOC2.ESTABID
  
from PS_LOCATION_TBL LOC2
where LOC2.LOCATION = $Reg_Location
and LOC2.EFFDT = (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL 
            WHERE LOCATION = $Reg_Location
            AND EFFDT <= $EndDt)
end-select
end-procedure Get-Reg-Patronal


#Include 'reset.sqc'    !Reset printer procedure
#Include 'curdttim.sqc' !Get-Current-DateTime procedure
#Include 'datetime.sqc' !Routines for date and time formatting
#Include 'number.sqc'   !Routines to format numbers
#Include 'stdapi.sqc'   !Update Process API
#Include 'datemath.sqc' !Routines for date math
#include 'gpmxnotf.sqc' !Get-Run-Control procedure
#include 'getcomex.sqc'  !Get-Company-data-Mex
#include 'gpmxrtn2.sqc' !Rotate-Name-For-Mag-Media
