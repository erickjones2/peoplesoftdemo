!----------------------------------------------------------------------
! Report Name: STOP035.SQR - Reprice Election Form
!----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:55:09                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!----------------------------------------------------------------------
! Program Descr: Prints Employee Stock Purchases for employees in the selected
!                Purchase ID. Detail report shows contributions, purchases and
!                refunds along with Broker and issuance instructions.
!----------------------------------------------------------------------
! Prompts:       Stock ID, Reprice ID, Process Method, Sort Method, Emplid
! Options:       None
! Tables:        RUN_CNTL_ST, RUN_CNTL_ST_RP1
! Sorts:         By Sort Method
!----------------------------------------------------------------------

  #include 'setenv.sqc'

!----------------------------------------------------------------------
Begin-Setup
!----------------------------------------------------------------------

  #include 'ptpsp125.sqc'               ! Portrait 125 Columns

End-Setup

!----------------------------------------------------------------------
Begin-Report
!----------------------------------------------------------------------

  do Init-Report
  do Process-Main
  do Reset
  do Successful-EOJ

End-Report

!----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!----------------------------------------------------------------------
Begin-Heading 12

 #include 'stdhdg01.sqc'

  print $StockIDLbl                                        (+3,1,#BB)
  print ':'                                                (  ,,1)
  print $StockId                                           (  ,+3,10)

  print $EmployeeLbl                                       (+1,1,#CC)
  print $NameLbl                                           (  ,+1,#DD)
  print ':'                                                (  ,,1)
  print $Name                                              (  ,+2,30)

  print $EmplidLbl                                         (  ,47,#EE)
  print ':'                                                (  ,,1)
  print $Emplid                                            (  ,+2,11)

  print $NidLbl                                            (  ,68,#FF)
  print ':'                                                (  ,,1)
  print $NationalId                                        (  ,+2,20)

  print $AddressLbl                                        (+1,1,#GG)
  print ':'                                                (  ,,1)
  print $Address1                                          (  ,+2,30)

  print ' '                                                (+1,1,#GG)
  print ' '                                                (  ,,1)
  print $Emp_City_State                                    (  ,+2,30)

  print $CompanyLbl                                        (+1,1,#HH)
  print ':'                                                (  ,,1)
  print $Company                                           (  ,+2,30)

  print $LocationLbl                                       (  ,47,#II)
  print ':'                                                (  ,,1)
  print $Location                                          (  ,+2,30)

  print $EmailLbl                                          (+1,1,#JJ)
  print ':'                                                (  ,,1)
  print $Email                                             (  ,+2,30)

  print $InsiderLbl                                        (  ,47,#KK)
  print ':'                                                (  ,,1)
  print $Insider                                           (  ,+2,30)

end-heading

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ('STOP035')

  do Get_Field_Information ('STOCK', 'STOCK_ID',           $StockIDLbl,       #BB)
  do Get_Field_Information ('STOCK', 'NAME',               $NameLbl,          #DD)
  do Get_Field_Information ('STOCK', 'EMPLID',             $EmplidLbl,        #EE)
  do Get_Field_Information ('STOCK', 'NID',                $NidLbl,           #FF)
  do Get_Field_Information ('STOCK', 'COMPANY',            $CompanyLbl,       #HH)
  do Get_Field_Information ('STOCK', 'GRANT',              $GrantLbl,         #MM)
  do Get_Field_Information ('STOCK', 'NUMBER',             $NumberLbl,        #NN)
  do Get_Field_Information ('STOCK', 'DATE',               $DateLbl,          #OO)
  do Get_Field_Information ('STOCK', 'SHARES',             $SharesLbl,        #SS)
  do Get_Field_Information ('STOCK', 'GRANT_PRICE',        $GrantPriceLbl,    #WW)
  
  do Get_Field_Information ('STOP035', 'STOP035',            $ReportTitle,      #AA)
  do Get_Field_Information ('STOP035', 'EMPLOYEE',           $EmployeeLbl,      #CC)
  do Get_Field_Information ('STOP035', 'ADDRESS',            $AddressLbl,       #GG)
  do Get_Field_Information ('STOP035', 'LOCATION',           $LocationLbl,      #II)
  do Get_Field_Information ('STOP035', 'EMAIL_ADDR',         $EmailLbl,         #JJ)
  do Get_Field_Information ('STOP035', 'INSIDER_STATUS',     $InsiderLbl,       #KK)
  do Get_Field_Information ('STOP035', 'STOCK',              $StockLbl,         #LL)
  do Get_Field_Information ('STOP035', 'OPTION',             $OptionLbl,        #PP)
  do Get_Field_Information ('STOP035', 'TYPE',               $TypeLbl,          #QQ)
  do Get_Field_Information ('STOP035', 'PRICE',              $PriceLbl,         #RR)
  do Get_Field_Information ('STOP035', 'ELECTION',           $ElectionLbl,      #XX)
  do Get_Field_Information ('STOP035', 'CHECK_BOX',          $CheckBoxLbl,      #YY)
  do Get_Field_Information ('STOP035', 'PLAN',               $PlanLbl,          #ZZ)
  do Get_Field_Information ('STOP035', 'OUTSTANDING',        $OutstandingLbl,   #TT)
  do Get_Field_Information ('STOP035', 'VESTED',             $VestedLbl,        #UU)
  do Get_Field_Information ('STOP035', 'UNVESTED',           $UnvestedLbl,      #VV)

End-Procedure

!----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the begin-Program procedure.
!----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STOP035'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  move '''' to $SQL-Text-Char

  if $prcs_process_instance = ''
    let #Instance = 0
    input $StockId MAXLEN=10 'Enter Stock ID' Type=Char
    uppercase $StockId
    input $RepriceId MAXLEN=10 'Enter Reprice ID' Type=Char
    uppercase $RepriceId
    input $Reprice_Prcs_Mthd MAXLEN=10 'Enter Reprice Process Method' Type=Char
    uppercase $Reprice_Prcs_Mthd
    input $Reprice_Sort_Mthd MAXLEN=10 'Enter Reprice Sort Method' Type=Char
    uppercase $Reprice_Sort_Mthd
  else
    let #Instance = to_number($prcs_process_instance)
    do Get-Run-Control                  ! Get Run Control Values
  end-if

  do Get-Reprice-Parms

  let $CurrentTime = datenow()

End-Procedure

!----------------------------------------------------------------------
! Section: Get-Run-Control
! Descr:   Retrieve the Company Name
!----------------------------------------------------------------------
Begin-Procedure Get-Run-Control

Begin-Select

PS_RUN_CNTL_ST.STOCK_ID
PS_RUN_CNTL_ST.REPRICE_ID
PS_RUN_CNTL_ST.REPRICE_PRCS_MTHD
PS_RUN_CNTL_ST.REPRICE_SORT_MTHD

  let $StockId           = rtrim(&PS_RUN_CNTL_ST.STOCK_ID, ' ')
  let $RepriceId         = rtrim(&PS_RUN_CNTL_ST.REPRICE_ID, ' ')
  let $Reprice_Prcs_Mthd = rtrim(&PS_RUN_CNTL_ST.REPRICE_PRCS_MTHD, ' ')
  let $Reprice_Sort_Mthd = rtrim(&PS_RUN_CNTL_ST.REPRICE_SORT_MTHD, ' ')

from  PS_RUN_CNTL_ST
where PS_RUN_CNTL_ST.OPRID       = $Prcs_Oprid
  and PS_RUN_CNTL_ST.RUN_CNTL_ID = $Prcs_Run_Cntl_Id
  
End-Select

End-Procedure

!----------------------------------------------------------------------
! Section: Get-Reprice-Parms
! Descr:   Retrieve the Reprice Parameters
!----------------------------------------------------------------------
Begin-Procedure Get-Reprice-Parms

Begin-Select

ZZ.RECORD_DT
ZZ.BREAK_PRICE

  let $Break_Price  = &zz.break_price
  do Format-DateTime(&zz.record_dt , $Record_Dt, {DEFDATE}, '', '')

from  PS_ST_REPRC_TBL ZZ
where ZZ.STOCK_ID   = $StockId
  and ZZ.REPRICE_ID = $RepriceId
  
End-Select

End-Procedure

!----------------------------------------------------------------------
! Section: Select-Vesting-Info
! Descr:   Selects values to insert into ST_STOP035_TAO.
!----------------------------------------------------------------------
Begin-Procedure Select-Vesting-Info

Begin-Select
A.EMPLID
A.GRANT_NBR
B.VEST_DT
B.SHARES_VESTED
B.EXPIRATN_DT
B.TERM_EXPIRATN_DT
A.ST_CANCEL_REASON
A.ST_CANCEL_DT

  let $MSCancelDt  = rtrim(&a.st_cancel_dt,' ')
  let $MSTermExpDt = rtrim(&b.term_expiratn_dt,' ')
  do Insert-Vesting-Info

from PS_ST_GRANT        A,
     PS_ST_GRNT_VST_DTL B,
     PS_ST_REPRC_PARTIC C

where A.EMPLID       = B.EMPLID
  and A.EMPLID       = C.EMPLID
  and A.STOCK_ID     = $StockID
  and A.STOCK_ID     = B.STOCK_ID
  and A.STOCK_ID     = C.STOCK_ID
  and A.GRANT_NBR    = B.GRANT_NBR
  and A.GRANT_NBR    = C.GRANT_NBR
  and C.REPRICE_ID   = $RepriceId
  and A.GRANT_STATUS = 'A'
  and A.GRANT_DT    <= $AsOfToday
  and B.VEST_EFFDT   = (select MAX(VEST_EFFDT)
                          from PS_ST_GRNT_VST_DTL
                         where EMPLID       = B.EMPLID
                           and STOCK_ID    = B.STOCK_ID
                           and GRANT_NBR   = B.GRANT_NBR
                           and VEST_EFFDT <= $AsOfToday)
  and B.SEQ_NUM      = (select MAX(SEQ_NUM)
                          from PS_ST_GRNT_VST_DTL
                         where EMPLID     = B.EMPLID
                           and STOCK_ID   = B.STOCK_ID
                           and GRANT_NBR  = B.GRANT_NBR
                           and VEST_EFFDT = B.VEST_EFFDT )
End-Select

End-Procedure

!----------------------------------------------------------------------
! Section: Insert-Vesting-Info
! Descr:   Inserts vesting info into a temp table as the first step in creating
!          the vesting schedule.  CurrentTime and Instance are used to 
!          eliminate the chance of data being accessed by two different runs
!          of the report at the same time.
!----------------------------------------------------------------------
Begin-Procedure Insert-Vesting-Info

  let $Procedure = 'Insert-Vesting-Temp'
  let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
INSERT into PS_ST_STOP035_TAO

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,GRANT_NBR
,VEST_DT
,SHARES_VESTED
,SHARES_EXERCISED
,EXPIRATN_DT
,TERM_EXPIRATN_DT
,ST_CANCEL_REASON
,ST_CANCEL_DT)

VALUES
($CurrentTime
,#Instance
,&a.emplid
,&a.grant_nbr
,&b.vest_dt
,&b.shares_vested
,0
,&b.expiratn_dt,

! Workaround for TPRD T-MLEAN-Q54CT
#ifdef MICROSOFT
   $MSTermExpDt
  ,&a.st_cancel_reason
  ,$MSCancelDt)
#else
   &b.term_expiratn_dt
  ,&a.st_cancel_reason
  ,&a.st_cancel_dt)
#endif

end-sql

End-Procedure

!----------------------------------------------------------------------
! Section: Get-Shares-Exercised
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Get-Shares-Exercised

Begin-Select
D.EMPLID
D.STOCK_ID
D.GRANT_NBR
E.VEST_DT
SUM(D.SHARES_EXERCISED) &SumExer

  do Update-Shares-ExercisedA

from PS_ST_GRANT_EXER   D,
     PS_ST_STOP035_TAO  E

where D.EMPLID          = E.EMPLID
  and D.GRANT_NBR       = E.GRANT_NBR
  and D.EXERCISE_STATUS = 'A'
  and D.STOCK_ID        = $StockID
  and D.EXERCISE_DT    <= $AsOfToday
  and E.DATETIME_STAMP  = $CurrentTime
  and E.PROCESSINSTANCE = #Instance
  and E.VEST_DT         = (select MIN(VEST_DT)
                            from  PS_ST_STOP035_TAO
                            where EMPLID              = D.EMPLID
                              and GRANT_NBR           = D.GRANT_NBR
                              and DATETIME_STAMP      = $CurrentTime
                              and PROCESSINSTANCE     = #Instance
                              and (D.EXERCISE_DT      < EXPIRATN_DT
                              and (D.EXERCISE_DT      < TERM_EXPIRATN_DT
                               OR TERM_EXPIRATN_DT is null)))
group by D.EMPLID,D.STOCK_ID,D.GRANT_NBR,E.VEST_DT
End-Select

End-Procedure

!----------------------------------------------------------------------
! Section: Update-Shares-ExercisedA
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedA

  let $Procedure = 'Update-Shares-ExercisedA'
  let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
UPDATE PS_ST_STOP035_TAO
  SET SHARES_EXERCISED = &SumExer
where EMPLID          = &d.emplid
  and GRANT_NBR       = &d.grant_nbr
  and VEST_DT         = &e.vest_dt
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!----------------------------------------------------------------------
! Section: Process-Shares-Exercised
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Process-Shares-Exercised

  create-array name=Exer
    size=50
    field=VestDt:char
    field=Vest:number
    field=Exer:number    

  let #x = 0

Begin-Select
F.EMPLID    () on-break print=never level=1 procedure=Update-Shares-ExercisedB   save=$OldEmp
F.GRANT_NBR    () on-break print=never level=1 procedure=Update-Shares-ExercisedB   save=$OldGrant
F.VEST_DT
F.SHARES_VESTED
F.SHARES_EXERCISED

  put &F.vest_dt &F.shares_vested &F.shares_exercised into EXER(#x) VestDt Vest Exer
  add 1 to #x

from PS_ST_STOP035_TAO F
where F.DATETIME_STAMP  = $CurrentTime
  and F.PROCESSINSTANCE = #Instance
order BY F.EMPLID,F.GRANT_NBR,F.VEST_DT
End-Select

  do Update-Shares-ExercisedB    !to process last on-break

End-Procedure

!----------------------------------------------------------------------
! Section: Update-Shares-ExercisedB
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedB

  let #TotalRow = 0
  let #Remainder = 0

  while #totalRow <= #x   !to run thru all elements
    get $VestDtArray #ShrVestArray #ShrExerArray  -
         from EXER(#totalRow) VestDt Vest Exer
    let #ShareToExer = #ShrExerArray + #Remainder
    if #ShareToExer > #ShrVestArray
       let #UpdateExer  = #ShrVestArray
       let #Remainder   = #ShareToExer  - #ShrVestArray
       do Update-Shares-ExercisedC
    else
       if #Remainder > #ShrExerArray
          let #UpdateExer = #Remainder
          do Update-Shares-ExercisedC
          let #Remainder = 0
       end-if
    end-if
    add 1 to #totalRow
  end-while
  clear-array  name=EXER
  let #x = 0

End-Procedure

!----------------------------------------------------------------------
! Section: Update-Shares-ExercisedC
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedC

 let $Procedure     = 'Update-Shares-ExercisedC'
 let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error

UPDATE PS_ST_STOP035_TAO
  SET SHARES_EXERCISED = #UpdateExer
where EMPLID          = $OldEmp
  and GRANT_NBR       = $OldGrant
  and VEST_DT         = $VestDtArray
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
  
end-sql

End-Procedure

!----------------------------------------------------------------------
! Section: Delete-Temp
! Descr:
!----------------------------------------------------------------------
Begin-Procedure Delete-Temp

  let $Procedure = 'Delete-Temp'
  let $SQL-Statement = 'Procedure: ' || $Procedure

begin-sql                           on-error = SQL-Error
 DELETE from PS_ST_STOP035_TAO
 where DATETIME_STAMP  = $CurrentTime
   and PROCESSINSTANCE = #Instance
end-sql

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Process-Main
!----------------------------------------------------------------------
 do Delete-Temp
 do Select-Vesting-Info
 do Get-Shares-Exercised
 do Process-Shares-Exercised
 
  evaluate $Reprice_Prcs_Mthd
    when = 'A'
      if $Reprice_Sort_Mthd = 'E'
        let $Sort_Order = ' order by G.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'L'
        let $Sort_Order = ' order by H1.NAME, G.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'C'
        let $Sort_Order = ' order by I.COMPANY, I.LOCATION, G.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'P'
        let $Sort_Order = ' order by H4.COUNTRY, H4.POSTAL, G.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'M'
        let $Sort_Order = ' order by G.EMPLID'
      end-if
      do Process-All
      break
    when = 'I'
      if $Reprice_Sort_Mthd = 'E'
        let $Sort_Order = ' order by J.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'L'
        let $Sort_Order = ' order by L1.NAME, J.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'C'
        let $Sort_Order = ' order by M.COMPANY, M.LOCATION, J.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'P'
        let $Sort_Order = ' order by L4.COUNTRY, L4.POSTAL, J.EMPLID'
      end-if
      if $Reprice_Sort_Mthd = 'M'
        let $Sort_Order = ' order by J.EMPLID'
      end-if
      do Process-Individuals
      break
    when-other
      break
  end-evaluate


End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Process-All
!----------------------------------------------------------------------
Begin-Select Distinct

G.EMPLID       () On-Break print=never Level = 1 After=Print-footer
H1.NAME
H2.NATIONAL_ID
H4.ADDRESS1
H4.ADDRESS2
H4.ADDRESS3
H4.ADDRESS4
H4.CITY
H4.STATE
H4.POSTAL
H4.COUNTRY
I.COMPANY
I.LOCATION
  
  let $Emplid     = rtrim(&g.emplid,' ')
  let $Name       = rtrim(&h1.name,' ')
  let $NationalId = rtrim(&h2.national_id, ' ')
  let $Address1   = rtrim(&h4.address1,' ')
  let $Address2   = rtrim(&h4.address2,' ')
  let $Address3   = rtrim(&h4.address3,' ')
  let $Address4   = rtrim(&h4.address4,' ')
  let $City       = rtrim(&h4.city,' ')
  let $State      = rtrim(&h4.state,' ')
  let $Postal     = rtrim(&h4.postal,' ')
  let $Country    = rtrim(&h4.country,' ')
  let $Company    = rtrim(&i.company,' ')
  let $Location   = rtrim(&i.location,' ')
  let $Insider    = ''

  do Get-Insider-Status

  if $Insider = ''
    let $Insider = 'None'
  end-if

  do Print-Header-Data
  do Get-Reprice-Grant

from  PS_ST_REPRC_PARTIC  G,
      PS_ST_PERSON_NAME   H1,
      PS_PERS_NID         H2,
      PS_TAX_LOCATION1    H3,
      PS_PERSON_ADDRESS   H4,
      PS_JOB              I
where G.STOCK_ID    = $StockId 
  and G.REPRICE_ID  = $RepriceId
  and G.EMPLID      = H1.EMPLID
  and G.EMPLID      = I.EMPLID
  and G.EMPLID      = H2.EMPLID
  and G.EMPLID      = H4.EMPLID
  and H2.COUNTRY    = H3.COUNTRY
  and H2.NATIONAL_ID_TYPE = 'PR'
  and I.EFFDT       = (select Max(EFFDT)
                        from PS_JOB
                       where EMPLID    = I.EMPLID
                         and EMPL_RCD  = I.EMPL_RCD
                         and EFFDT    <= $AsOfToday )
  and I.EFFSEQ      = (select Max(EFFSEQ)
                        from PS_JOB
                       where EMPLID    = I.EMPLID
                         and EMPL_RCD  = I.EMPL_RCD
                         and EFFDT     = I.EFFDT )
  and H3.TAX_LOCATION_CD = I.TAX_LOCATION_CD
  and (H4.ADDRESS_TYPE   = 'MAIL'
   or (H4.ADDRESS_TYPE   = 'HOME'
  and NOT EXISTS (select 'X'
                   from PS_PERSON_ADDRESS
                  where EMPLID       = H4.EMPLID
                    and ADDRESS_TYPE = 'MAIL' )))
 [$Sort_Order]

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Process-Individuals
!----------------------------------------------------------------------
Begin-Select Distinct

J.EMPLID        () On-Break print=never Level = 1 After=Print-footer
L1.NAME
L2.NATIONAL_ID
L4.ADDRESS1
L4.ADDRESS2
L4.ADDRESS3
L4.ADDRESS4
L4.CITY
L4.STATE
L4.POSTAL
L4.COUNTRY
M.COMPANY
M.LOCATION

  let $Emplid     = rtrim(&j.emplid,' ')
  let $Name       = rtrim(&l1.name,' ')
  let $NationalId = rtrim(&l2.national_id, ' ')
  let $Address1   = rtrim(&l4.address1,' ')
  let $Address2   = rtrim(&l4.address2,' ')
  let $Address3   = rtrim(&l4.address3,' ')
  let $Address4   = rtrim(&l4.address4,' ')
  let $City       = rtrim(&l4.city,' ')
  let $State      = rtrim(&l4.state,' ')
  let $Postal     = rtrim(&l4.postal,' ')
  let $Country    = rtrim(&l4.country,' ')
  let $Company    = rtrim(&m.company,' ')
  let $Location   = rtrim(&m.location,' ')
  let $Insider    = ''

  do Get-Insider-Status

  if $Insider = ''
    let $Insider = 'None'
  end-if

  do Print-Header-Data
  do Get-Reprice-Grant

from  PS_RUN_CNTL_ST_RP1  J,
      PS_ST_REPRC_PARTIC  K,
      PS_ST_PERSON_NAME   L1,
      PS_PERS_NID         L2,
      PS_TAX_LOCATION1    L3,
      PS_PERSON_ADDRESS   L4,
      PS_JOB              M
where J.OPRID       = $Prcs_Oprid
  and J.RUN_CNTL_ID = $Prcs_Run_Cntl_Id
  and J.EMPLID      = K.EMPLID
  and J.EMPLID      = L1.EMPLID
  and J.EMPLID      = M.EMPLID
  and J.EMPLID      = L2.EMPLID
  and J.EMPLID      = L4.EMPLID
  and L2.COUNTRY    = L3.COUNTRY
  and L2.NATIONAL_ID_TYPE = 'PR'
  and K.STOCK_ID    = $StockId 
  and K.REPRICE_ID  = $RepriceId
  and M.EFFDT       = (select Max(EFFDT)
                        from PS_JOB
                       where EMPLID    = M.EMPLID
                         and EMPL_RCD  = M.EMPL_RCD
                         and EFFDT    <= $AsOfToday )
  and M.EFFSEQ      = (select Max(EFFSEQ)
                        from PS_JOB
                       where EMPLID    = M.EMPLID
                         and EMPL_RCD  = M.EMPL_RCD
                         and EFFDT     = M.EFFDT )
  and L3.TAX_LOCATION_CD = M.TAX_LOCATION_CD
  and (L4.ADDRESS_TYPE   = 'MAIL'
   or (L4.ADDRESS_TYPE   = 'HOME'
  and NOT EXISTS (select 'X'
                   from PS_PERSON_ADDRESS
                  where EMPLID       = L4.EMPLID
                    and ADDRESS_TYPE = 'MAIL' )))
  [$Sort_Order]
  
End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Insider-Status
!----------------------------------------------------------------------
Begin-Select

P.ST_OFFICER
P.ST_DIRECTOR
P.COMPANY_INSIDER
P.REPORTING_PERSON
P.ST_BEN_OWNER

  if &p.st_officer = 'Y'
    let $Insider = 'Officer'
  end-if

  if &p.st_director = 'Y'
    if $Insider = ''
      let $Insider = 'Director'
    else
      let $Insider = $Insider||',Director'
    end-if
  end-if

  if &p.company_insider = 'Y'
    if $Insider = ''
      let $Insider = 'Company Insider'
    else
      let $Insider = $Insider||',Company Insider'
    end-if
  end-if

  if &p.reporting_person = 'Y'
    if $Insider = ''
      let $Insider = 'Reporting Person'
    else
      let $Insider = $Insider||',Reporting Person'
    end-if
  end-if

  if &p.st_ben_owner = 'Y'
    if $Insider = ''
      let $Insider = 'Beneficial Owner'
    else
      let $Insider = $Insider||',Beneficial Owner'
    end-if
  end-if
    
from  PS_ST_INSIDER_TBL P
where P.EMPLID   = $Emplid
  and P.STOCK_ID = $StockId 
  and P.EFFDT    = (select Max(EFFDT)
                     from PS_ST_INSIDER_TBL
                    where EMPLID    = P.EMPLID
                      and STOCK_ID  = P.STOCK_ID)

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Reprice-Grant
!----------------------------------------------------------------------
Begin-Select

Q.GRANT_NBR
R.STOCK_PLAN
R.GRANT_DT
R.ST_OPTION_TYPE
R.GRANT_PRICE
R.ST_CANCEL_DT
R.VEST_SUSPEND_DT

  let #Shares_Repriced = 0
  let #Shares_Vested   = 0
  let #Shares_Unvested = 0
  do Get-Shares-Repriced
  do Get-Shares-Vested
  do Get-Shares-Unvested
  do Print-Detail

from  PS_ST_REPRC_PARTIC Q,
      PS_ST_GRANT        R
where Q.STOCK_ID      = $StockId 
  and Q.REPRICE_ID    = $RepriceId
  and Q.EMPLID        = $Emplid
  and Q.EMPLID        = R.EMPLID
  and Q.STOCK_ID      = R.STOCK_ID
  and Q.GRANT_NBR     = R.GRANT_NBR
  and R.GRANT_STATUS  = 'A'
  and (R.ST_CANCEL_DT > &zz.record_dt
   or R.ST_CANCEL_DT is null) 

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Shares-Repriced
!----------------------------------------------------------------------
Begin-Select

S.SHARES_VESTED
S.SHARES_EXERCISED

  let #Shares_Repriced  = #Shares_Repriced + ( &s.shares_vested - &s.shares_exercised )

from PS_ST_STOP035_TAO S
where S.DATETIME_STAMP    = $CurrentTime
  and S.PROCESSINSTANCE   = #Instance
  and S.EMPLID            = $Emplid
  and S.GRANT_NBR         = &q.grant_nbr
  and S.SHARES_VESTED     > S.SHARES_EXERCISED
  and (S.ST_CANCEL_DT     > &zz.record_dt
   or S.ST_CANCEL_DT is null)
  and S.EXPIRATN_DT       > &zz.record_dt
  and (S.TERM_EXPIRATN_DT > &zz.record_dt
   or S.TERM_EXPIRATN_DT is null)

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Shares-Vested
!----------------------------------------------------------------------
Begin-Select

T.SHARES_VESTED
T.SHARES_EXERCISED

  let #Shares_Vested  = #Shares_Vested + ( &t.shares_vested - &t.shares_exercised )

from PS_ST_STOP035_TAO T
where T.DATETIME_STAMP    = $CurrentTime
  and T.PROCESSINSTANCE   = #Instance
  and T.EMPLID            = $Emplid
  and T.GRANT_NBR         = &q.grant_nbr
  and T.SHARES_VESTED     > T.SHARES_EXERCISED
  and T.VEST_DT          <= $AsOfToday
  and (T.ST_CANCEL_DT     > &zz.record_dt
   or T.ST_CANCEL_DT is null)
  and T.EXPIRATN_DT       > &zz.record_dt
  and (T.TERM_EXPIRATN_DT > &zz.record_dt
   or T.TERM_EXPIRATN_DT is null)
  
End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Shares-Unvested
!----------------------------------------------------------------------
Begin-Select

U.SHARES_VESTED
U.SHARES_EXERCISED
         
  let #Shares_Unvested  = #Shares_Unvested + ( &u.shares_vested - &u.shares_exercised )

from PS_ST_STOP035_TAO U
where U.DATETIME_STAMP    = $CurrentTime
  and U.PROCESSINSTANCE   = #Instance
  and U.EMPLID            = $Emplid
  and U.GRANT_NBR         = &q.grant_nbr
  and U.SHARES_VESTED     > U.SHARES_EXERCISED
  and U.VEST_DT           > $AsOfToday
  and (U.ST_CANCEL_DT     > &zz.record_dt
   or U.ST_CANCEL_DT is null)
  and U.EXPIRATN_DT       > &zz.record_dt
  and (U.TERM_EXPIRATN_DT > &zz.record_dt
   or U.TERM_EXPIRATN_DT is null)

End-Select

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Print-Header-Data
!----------------------------------------------------------------------

  let $Emp_City_State = rtrim($City,' ')||', '||rtrim($State,' ')||', '||rtrim($Postal,' ')

  print $SharesLbl                                                 (+4,63,#SS)
  print $SharesLbl                                                 (  ,79,#SS)
  print $StockLbl                                                  (+1,1,#LL)
  print $GrantLbl                                                  (  ,12,#MM)
  print $GrantLbl                                                  (  ,24,#MM)
  print $OptionLbl                                                 (  ,36,#PP)
  print $SharesLbl                                                 (  ,47,#SS)
  print $VestedLbl                                                 (  ,63,#UU)
  print $UnvestedLbl                                               (  ,79,#VV)
  print $GrantLbl                                                  (  ,95,#MM)
  print $ElectionLbl                                               (  ,105,#XX)
  print $PlanLbl                                                   (+1,1,#ZZ)
  print $NumberLbl                                                 (  ,12,#NN)
  print $DateLbl                                                   (  ,24,#OO)
  print $TypeLbl                                                   (  ,36,#QQ)
  print $OutstandingLbl                                            (  ,47,#TT)
  print $OutstandingLbl                                            (  ,63,#TT)
  print $OutstandingLbl                                            (  ,79,#TT)
  print $PriceLbl                                                  (  ,95,#RR)
  print $CheckBoxLbl                                               (  ,105,#YY)
  print ' '                                                        (+1,1,1)

End-Procedure Print-Header-Data

!----------------------------------------------------------------------
Begin-Procedure Print-Detail
!----------------------------------------------------------------------
  do Format-DateTime(&r.grant_dt , $Grant_Dt, {DEFDATE}, '', '')
  print &r.stock_plan                                              (+1,1,10)
  print &q.grant_nbr                                               (  ,12,10)
  print $Grant_Dt                                                  (  ,24,10)
  print &r.st_option_type                                          (  ,36,6)
  print #Shares_Repriced                                           (  ,44,14)  edit 999,999,999.99
  print #Shares_Vested                                             (  ,60,14)  edit 999,999,999.99
  print #Shares_Unvested                                           (  ,76,14)  edit 999,999,999.99
  print &r.grant_price                                             (  ,92,11)  edit $$$$,$$9.99

End-Procedure

Begin-Procedure Print-footer

  print 'Optionee Signature:___________________________________'  (+6,1,54)
  print 'Date:__________________'                                 (  ,+1,23)
  new-page

End-Procedure
!----------------------------------------------------------------------
!  SQC Include Files
!----------------------------------------------------------------------
#include 'strunctl.sqc'    ! Stock Admin's Run Control Record
#include 'sqlerr.sqc'      !SQL error processing
#include 'stdapi.sqc'
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'getrplng.sqc'    !Get the report language
#include 'askftd.sqc'      !
