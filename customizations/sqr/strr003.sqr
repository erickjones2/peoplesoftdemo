!-----------------------------------------------------------------------
! Report Name: STRR003.SQR - Detail of Common Stock Transactions
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:55:30                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr:
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Emplid, From Date, Thru Date
! Options:       None
! Tables:        RUN_CNTL_ST
! Sorts:
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Process-Main
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 09

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  ,013,010)
  print $FromLbl                                           (  ,074,004)
  print ':'                                                (  ,   ,001)
  do Format-DateTime ($FromDate, $Date, {DEFDATE}, '', '')
  print $Date                                              (  , +1,010)
  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  do Format-DateTime ($ThruDate, $Date, {DEFDATE}, '', '')
  print $Date                                              (  , +1,010)

  print $DaysPeriodLbl                                     (+1,001,014)
  print ':'                                                (  ,   ,001)
  print #DaysTotal                                         (  , +2,007) edit 9999999

  print $AverageFmvLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print #AverageFMV                                        (  , +5,014) edit 999,999.999999

  
  if $SupDetail = 'N'
    print $TransactionLbl                                    (+3,001,011)
    print $SharesLbl                                         (  ,052,006)
    print $DaysInLbl                                         (  ,060,007)
    print $WghtSharesLbl                                     (  ,114,015)
    print $WeightedLbl                                       (  ,142,008)
    print $DateLbl                                           (+1,001,011)
    print $TypeLbl                                           (  ,013,021)
    print $OutstandingLbl                                    (  ,047,011)
    print $PeriodLbl                                         (  ,061,006)
    print $PriceLbl                                          (  ,079,005)
    print $TotalPriceLbl                                     (  ,094,011)
    print $OutstandingLbl                                    (  ,118,011)
    print $TotalPriceLbl                                     (  ,139,011)
    print '-'                                                (+1,001,150) fill
  
  end-if

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STRR003'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables

End-Procedure

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STRR001')

  do Get_Field_Information ('STOCK', 'STOCK_ID',           $StockIDLbl,       #DW)
  do Get_Field_Information ('STOCK', 'FROM',               $FromLbl,          #DW)
  do Get_Field_Information ('STOCK', 'THRU',               $ThruLbl,          #DW)
  do Get_Field_Information ('STOCK', 'GRANT',              $GrantLbl,         #DW)
  do Get_Field_Information ('STOCK', 'NUMBER',             $NumberLbl,        #DW)
  do Get_Field_Information ('STOCK', 'DATE',               $DateLbl,          #DW)
  do Get_Field_Information ('STOCK', 'SHARES',             $SharesLbl,        #DW)
  do Get_Field_Information ('STOCK', 'TOTAL',              $TotalLbl,         #DW)

  do Get_Field_Information ('STRR001', 'STRR003',          $ReportTitle,      #DW)
  do Get_Field_Information ('STRR001', 'DAYS_IN_PERIOD',   $DaysPeriodLbl,    #DW)
  do Get_Field_Information ('STRR001', 'AVERAGE_FMV',      $AverageFmvLbl,    #DW)
  do Get_Field_Information ('STRR001', 'TRANSACTION',      $TransactionLbl,   #DW)
  do Get_Field_Information ('STRR001', 'TRANSACTION_TYPE', $TypeLbl,          #DW)
  do Get_Field_Information ('STRR001', 'OUTSTANDING',      $OutstandingLbl,   #DW)
  do Get_Field_Information ('STRR001', 'DAYS_IN',          $DaysInLbl,        #DW)
  do Get_Field_Information ('STRR001', 'PERIOD',           $PeriodLbl,        #DW)
  do Get_Field_Information ('STRR001', 'PRICE',            $PriceLbl,         #DW)
  do Get_Field_Information ('STRR001', 'TOTAL_PRICE',      $TotalPriceLbl,    #DW)
  do Get_Field_Information ('STRR001', 'WEIGHTED_SHARES',  $WghtSharesLbl,    #DW)
  do Get_Field_Information ('STRR001', 'WEIGHT',           $WeightedLbl,      #DW)
  do Get_Field_Information ('STRR001', 'OPTN_EXER',        $ExerLbl,          #DW)
  do Get_Field_Information ('STRR001', 'ESPP_PURCH',       $PurchLbl,         #DW)
  do Get_Field_Information ('STRR001', 'REPURCHASE',       $RepurchLbl,       #DW)
  do Get_Field_Information ('STRR001', 'FOOTER',           $FooterLbl,        #DW)
  do Get_Field_Information ('STRR001', 'FOOTER2',          $Footer2Lbl,       #DW)
  do Get_Field_Information ('STRR001', 'TOT_PRICE ',       $TotPrcLbl,        #DW)
  do Get_Field_Information ('STRR001', 'TOT_OUTSTAND',     $TotShrOutLbl,     #DW)
  do Get_Field_Information ('STRR001', 'TOT_WGHT_OUTSTAND',$TotWghtOutLbl,    #DW)
  do Get_Field_Information ('STRR001', 'TOT_WGHT_PRICE',   $TotWghtPrcLbl,    #DW)

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId  = rtrim($RC_Stock_ID,' ')
  let $FromDate = rtrim($RC_FromDate,' ')
  let $ThruDate = rtrim($RC_ThruDate,' ')
  do Format-DateTime ($ThruDate, $ThruDateCmp,  {DEFCMP}, '', '')
  do Format-DateTime ($FromDate, $FromDateCmp,  {DEFCMP}, '', '')
  do Convert-To-DTU-Date($FromDate, $FromDateDtu)
  do Convert-To-DTU-Date($ThruDate, $ThruDateDtu)
  do dtu-diff-days($FromdateDtu, $ThrudateDtu, #DaysTotal)
  let #DaysTotal = #DaysTotal + 1
  let $SupDetail = rtrim($RC_ST_SUPPR_DTLS,' ')

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  do Get-Fmv-Method
  do Select-Exercises
  do Select-Purchases
  do Select-Repurchases

  do Print-Totals

End-Procedure Process-Main

!-----------------------------------------------------------------------
! Section: Get-Fmv-Method
! Descr:   Retrieve the Fmv Method from the Stock_Dtl table
!-----------------------------------------------------------------------
Begin-Procedure Get-Fmv-Method

Begin-Select

YY.FMV_METHOD

  let $Fmv_Method = rtrim(&yy.fmv_method, ' ')
  do Format-DateTime ($ThruDate,$BeginDtCmp,{DEFCMP}, '', '')
  while $BeginDtCmp >= $FromdateCmp
    do Get-Fmv-Rules
    let #TotalFMV = #TotalFMV + #FinalFMV
    add 1 to #CountDays
    do Format-DateTime($BeginDtCmp, $BeginDt, {DEFCMP},'','native')
    do Convert-To-DTU-Date($BeginDt, $BeginDtDtu)
    do dtu-subtract-days($BeginDtDtu, 1, $BeginDtDtu)
    do Convert-From-DTU-Date($BeginDtDtu, $BeginDt)
    do Format-DateTime ($BeginDt,$BeginDtCmp,{DEFCMP}, '', '')
  end-while

  if #CountDays <> 0
    let #AverageFMV = #TotalFMV / #CountDays
  end-if

from  PS_STOCK_DTL YY
where YY.STOCK_ID    = $StockId
  and YY.EFFDT       = ( SELECT MAX(EFFDT)
                           FROM PS_STOCK_DTL
                          WHERE STOCK_ID = YY.STOCK_ID
                            AND EFFDT   <= $AsOfToday )

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Fmv-Rules
! Descr:   Retrieve the Fmv Rules from the St_Fmv_Mthd_Tbl table
!-----------------------------------------------------------------------
Begin-Procedure Get-Fmv-Rules

Begin-Select

XX.ST_PRICE_TYPE
XX.CURRENT_PRIOR_DAY
XX.FMV_AVERAGE_DAYS

  let $PriceType = rtrim(&xx.st_price_type, ' ')
  let $Day       = &xx.current_prior_day
  let #NbrOfDays = &xx.fmv_average_days

  evaluate $Day
    when = 'P'
      do Format-DateTime($BeginDtCmp, $BeginDt, {DEFCMP},'','native')
      do Convert-To-DTU-Date($BeginDt, $BeginDtDtu)
      do dtu-subtract-days($BeginDtDtu, 1, $BeginDtDtu)
      do Convert-From-DTU-Date($BeginDtDtu, $BeginDt)
      do Format-DateTime ($BeginDt,$BeginDtCmp,{DEFCMP}, '', '')
      break
    when-other
      break
  end-evaluate

  do Get-Day-Type

  while $DayType <> 'TRD'
    do Format-DateTime($BeginDtCmp, $BeginDt, {DEFCMP},'','native')
    do Convert-To-DTU-Date($BeginDt, $BeginDtDtu)
    do dtu-subtract-days($BeginDtDtu, 1, $BeginDtDtu)
    do Convert-From-DTU-Date($BeginDtDtu, $BeginDt)
    do Format-DateTime ($BeginDt,$BeginDtCmp,{DEFCMP}, '', '')
    do Get-Day-Type
  end-while

  let #FinalFMV = 0
  let #I        = 1
  let $StartDt  = $BeginDt

  while #I <= #NbrOfDays
    let #FMVPrice = 0
    do Get-Prices
    evaluate $PriceType
      when = 'B'
        let #FMVPrice = &vv.bid_price
        break
      when = 'A'
        let #FMVPrice = &vv.ask_price
        break
      when = 'O'
        let #FMVPrice = &vv.open_price
        break
      when = 'C'
        let #FMVPrice = &vv.close_price
        break
      when = 'H'
        let #FMVPrice = &vv.high_price
        break
      when = 'L'
        let #FMVPrice = &vv.low_price
        break
      when = 'P'
        let #FMVPrice = &vv.private_price
        break
      when = 'W'
        let #FMVPrice = ( &vv.high_price + &vv.low_price ) / 2
        break
      when = 'S'
        let #FMVPrice = ( &vv.open_price + &vv.close_price ) / 2
        break
      when = 'D'
        let #FMVPrice = ( &vv.bid_price + &vv.ask_price ) / 2
        break
      when-other
        break
    end-evaluate

    let #FinalFMV = #FinalFMV + #FMVPrice
    if #I < #NbrOfDays
      do Format-DateTime($BeginDtCmp, $BeginDt, {DEFCMP},'','native')
      do Convert-To-DTU-Date($BeginDt, $BeginDtDtu)
      do dtu-subtract-days($BeginDtDtu, 1, $BeginDtDtu)
      do Convert-From-DTU-Date($BeginDtDtu, $BeginDt)
      do Format-DateTime ($BeginDt,$BeginDtCmp,{DEFCMP}, '', '')
      do Get-Day-Type
      while $DayType <> 'TRD'
        do Format-DateTime($BeginDtCmp, $BeginDt, {DEFCMP},'','native')
        do Convert-To-DTU-Date($BeginDt, $BeginDtDtu)
        do dtu-subtract-days($BeginDtDtu, 1, $BeginDtDtu)
        do Convert-From-DTU-Date($BeginDtDtu, $BeginDt)
        do Format-DateTime ($BeginDt,$BeginDtCmp,{DEFCMP}, '', '')
        do Get-Day-Type
      end-while
    end-if
    add 1 to #I
  end-while

  let #FinalFMV = #FinalFMV / #NbrOfDays
  let $BeginDt  = $StartDt

from  PS_ST_FMV_MTHD_TBL XX
where XX.FMV_METHOD = $Fmv_Method
  and XX.EFFDT      = ( SELECT MAX(EFFDT)
                          FROM PS_ST_FMV_MTHD_TBL
                         WHERE FMV_METHOD = XX.FMV_METHOD
                           AND EFFDT     <= $AsOfToday )

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Day-Type
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Day-Type

Begin-Select

WW.ST_DAY_TYPE

  let $DayType = rtrim(&ww.st_day_type, ' ')

from  PS_ST_DAILY_PRICES WW
where WW.STOCK_ID  = $StockId
  and WW.ST_FMV_DT = $BeginDt

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Prices
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Get-Prices

Begin-Select

VV.BID_PRICE
VV.ASK_PRICE
VV.OPEN_PRICE
VV.CLOSE_PRICE
VV.HIGH_PRICE
VV.LOW_PRICE
VV.PRIVATE_PRICE

from  PS_ST_DAILY_PRICES VV
where VV.STOCK_ID  = $StockId
  and VV.ST_FMV_DT = $BeginDt

End-Select

End-Procedure

!----------------------------------------------------------------------!
! Procedure:  Select-Exercises                                         !
! Descr:      Selects all active exercises that were granted between   !
!             the From and Thru date.                                  !
!----------------------------------------------------------------------!
Begin-Procedure Select-Exercises

  let $TransactionType   = $ExerLbl

Begin-Select

B.EMPLID
B.SHARES_EXERCISED
B.EXERCISE_DT
B.EXERCISE_FMV
B.SHARES_SWAPPED
B.SHARES_TRADED

  let #SharesOutstanding = &b.shares_exercised - &b.shares_swapped - &b.shares_traded
  let $TransactionDt     = rtrim(&b.exercise_dt,' ')
  let #Price             = &b.exercise_fmv
  do Print-Detail

from  PS_ST_GRANT_EXER B
where B.STOCK_ID         = $StockId
  and B.EXERCISE_DT     <= $ThruDate
  and B.EXERCISE_DT     >= $FromDate
  and B.EXERCISE_STATUS  = 'A'
order by B.EXERCISE_DT

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Begin-Procedure Select-Purchases
! Descr:      Selects all ESPP Purchases that occurred between the
!             From and Thru date.
!----------------------------------------------------------------------!
Begin-Procedure Select-Purchases

  let $TransactionType = $PurchLbl

Begin-Select

C.EMPLID
C.SHARES_PURCHASED
C.GRANT_DT
C.PURCHASE_PRICE
C.PERIOD_END_DT

  let #SharesOutstanding = &c.shares_purchased
  let $TransactionDt     = rtrim(&c.period_end_dt,' ')
  let #Price             = &c.purchase_price
  do Print-Detail

from  PS_ST_ESPP_PURCH C
where C.STOCK_ID          = $StockId
  and C.PERIOD_END_DT    <= $ThruDate
  and C.PERIOD_END_DT    >= $FromDate
order by C.PERIOD_END_DT

End-Select

End-Procedure

!----------------------------------------------------------------------!
! Procedure:  Select-Repurchases                                       !
! Descr:      Selects all Repurchases that occurred between the        !
!             From and Thru date.                                      !
!----------------------------------------------------------------------!
Begin-Procedure Select-Repurchases

  let $Footer = 'N'

Begin-Select

D.EMPLID
D.SHARES_REPURCHASED
D.REPURCHASE_DT
D.REPURCHASE_PRICE

  let $Footer = 'Y'

from  PS_ST_GRNT_REPURCH D
where D.STOCK_ID           = $StockId
  and D.REPURCHASE_DT     <= $ThruDate
  and D.REPURCHASE_DT     >= $FromDate
  and D.REPURCHASE_STATUS  = 'A'
order by D.REPURCHASE_DT

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail


  do Calculate-Days-In-Period
  let #Price               = round(#Price,2)
  let #CalcPrice           = round(#SharesOutstanding   * #Price,2)
  let #WeightedOutstanding = #SharesOutstanding   * (#DaysInPeriod / #DaysTotal)
  let #WeightedPrice       = round(#WeightedOutstanding * #Price,2)

 if $SupDetail = 'N'

  do Format-DateTime($TransactionDt,$DateOut,{DEFDATE},'','')
  print $DateOut                                           (+1,001,011)
  print $TransactionType                                   (  ,013,021)
  print #SharesOutstanding                                 (  ,036,022) edit 999,999,999,999.999999
  print #DaysInPeriod                                      (  ,060,007) edit 9999999
  print #Price                                             (  ,069,015) edit $999,999.999999
  print #CalcPrice                                         (  ,086,019) edit $999,999,999,999.99
  print #WeightedOutstanding                               (  ,107,022) edit 999,999,999,999.999999
  print #WeightedPrice                                     (  ,131,019) edit $999,999,999,999.99
 end-if
  let #TotalOutstanding         = #TotalOutstanding         + #SharesOutstanding
  let #TotalPrice               = #TotalPrice               + #CalcPrice
  let #TotalWeightedOutstanding = #TotalWeightedOutstanding + #WeightedOutstanding
  let #TotalWeightedPrice       = #TotalWeightedPrice       + #WeightedPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  if $SupDetail = 'N'
    print $TotalLbl                                          (+2,013,005) bold
    print ':'                                                (  ,   ,001) bold
    print #TotalOutstanding                                  (  ,036,022) bold edit 999,999,999,999.999999
    print #TotalPrice                                        (  ,086,019) bold edit $999,999,999,999.99
    print #TotalWeightedOutstanding                          (  ,107,022) bold edit 999,999,999,999.999999
    print #TotalWeightedPrice                                (  ,131,019) bold edit $999,999,999,999.99
  else
    print $TotShrOutLbl                                      (+2,005)
    print #TotalOutstanding                                  (  ,040,022) bold edit 999,999,999,999.999999
    print $TotPrcLbl                                         (+1,005)
    print #TotalPrice                                        (  ,040,019) bold edit $999,999,999,999.99
    print $TotWghtOutLbl                                     (+1,005)
    print #TotalWeightedOutstanding                          (  ,40,022) bold edit 999,999,999,999.999999
    print $TotWghtPrcLbl                                     (+1,005)
    print #TotalWeightedPrice                                (  ,40,019) bold edit $999,999,999,999.99
  end-if

  if $Footer = 'Y'
    let $PrintFooterLbl = rtrim($FooterLbl,' ') || rtrim($Footer2Lbl,' ')
    print '*'                                              (+2,001,001) bold
    print $PrintFooterLbl                                  (  ,   ,150) bold
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Calculate-Days-In-Period
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Days-In-Period

  do Convert-To-DTU-Date($TransactionDt, $TransDateDtu)

  evaluate $TransactionType
    when = $RepurchLbl
      do dtu-diff-days($FromdateDtu, $TransDateDtu, #DaysInPeriod)
      break
    when = $ExerLbl
    when = $PurchLbl
      do dtu-diff-days($TransDateDtu, $ThrudateDtu, #DaysInPeriod)
      let #DaysInPeriod = #DaysInPeriod + 1
      break
  end-evaluate

  if #DaysInPeriod > #DaysTotal
    let #DaysInPeriod = #DaysTotal
  end-if

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   ! Gets the report language
