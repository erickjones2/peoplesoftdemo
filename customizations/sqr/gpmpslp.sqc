!**********************************************************************!
!       $Release:  HR92                                                !
!           $Bug:  30598257                                            !
!**********************************************************************!
!**********************************************************************!
!  gpmpslp.SQC - Mobile Payslip: To insert into 4 core tables          *
!                                                                      *
!***********************************************************************
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------*
!***********************************************************************
! This program is specific to HRMS.                                    *
! Called by: Payslip Global Payroll CE'S                               *
! Debug levels:                                                        *
!             debug5-base level                                        *
!                    shows procedure calls that are not redundant      *
!             debug6-medium                                            *
!                    shows detail of non redundant calls               *
!             debug7-intense                                           *
!                    shows procedure calls that are redundant          *
!             debug8-everything but the kitchen sink                   *
!                    shows detail in redundant calls                   *
!                                                                      *
! $GPcheck_field_exists - This field allows us to handle record structure*
! changes  across releases. Everytime new additons are made to the core *
! records make sure that corresponding check field exists method is created*
! by validating the newly added fields. This allows us to conform to    *
! PUM guidelines.                                                       *
!***********************************************************************
!*********************************************************************************
! For ePay Purposes: Mobile Payslip  - create arrays for the three staging tables*
!These array names can be used in the programs to assign the values             
!********************************************************************************* 

#define MAX_COREMSG  20 !Set maximum core messages that can be stored in the array.
 
BEGIN-SETUP

CREATE-ARRAY NAME=MPSLP_HDR SIZE=10
        FIELD = EMPLID:CHAR
        FIELD = CAL_RUN_ID:CHAR
        FIELD = EMPL_RCD:Number
        FIELD = GP_PAYGROUP:CHAR
        FIELD = CAL_ID:CHAR
        FIELD = ORIG_CAL_RUN_ID:CHAR
        FIELD = RSLT_SEG_NUM:Number
        FIELD = GP_PSLP_SRCPRODUCT:CHAR
        FIELD = GP_PSLP_ID:CHAR
        FIELD = SEG_BGN_DT:CHAR
        FIELD = SEG_END_DT:CHAR
        FIELD = PRD_BGN_DT:CHAR
        FIELD = PRD_END_DT:CHAR
        FIELD = PYMT_DT:CHAR
        FIELD = GP_MPSLP_GROSS:Number
        FIELD = CALC_DELTA_VAL:Number
        FIELD = CALC_VAL:Number
        FIELD = GP_MPSLP_NET:Number
        FIELD = CALC_DELTA_VAL2:Number
        FIELD = CALC_VAL2:Number
        FIELD = GP_COMPANY:CHAR
        FIELD = RUN_TYPE:CHAR
        FIELD = GP_MPSLP_HDR1:CHAR
        FIELD = GP_MPSLP_HDR2:CHAR
        FIELD = GP_MPSLP_HDR3:CHAR
        FIELD = GP_MPSLP_HDR4:CHAR
        FIELD = GP_MPSLP_HDR5:CHAR
        FIELD = GP_MPSLP_HDR6:CHAR
        
        
        CREATE-ARRAY NAME=MPSLP_ED SIZE=10
        FIELD = EMPLID:CHAR
        FIELD = CAL_RUN_ID:CHAR
        FIELD = EMPL_RCD:Number
        FIELD = GP_PAYGROUP:CHAR
        FIELD = CAL_ID:CHAR
        FIELD = ORIG_CAL_RUN_ID:CHAR
        FIELD = RSLT_SEG_NUM:Number
        FIELD = GP_PSLP_SRCPRODUCT:CHAR
        FIELD = GP_PSLP_ID:CHAR
        FIELD = INSTANCE:Number
        FIELD = PIN_NUM:Number
        FIELD = SLICE_BGN_DT:CHAR
        FIELD = SLICE_END_DT:CHAR
        FIELD = PIN_ELEM_GRP_NUM:Number
        FIELD = ED_ASSIGN_INSTANCE:Number
        FIELD = PI_INSTANCE:Number
        FIELD = PRD_BGN_DT:CHAR
        FIELD = PRD_END_DT:CHAR
        FIELD = SEG_BGN_DT:CHAR
        FIELD = SEG_END_DT:CHAR
        FIELD = PYMT_DT:CHAR
        FIELD = RUN_TYPE:CHAR
        FIELD = CALC_RSLT_VAL:Number
        FIELD = CALC_ADJ_VAL:Number
        FIELD = CALC_DELTA_VAL:Number
        FIELD = BASE_RSLT_VAL:Number
        FIELD = BASE_ADJ_VAL:Number
        FIELD = RATE_RSLT_VAL:Number
        FIELD = UNIT_RSLT_VAL:Number
        FIELD = UNIT_ADJ_VAL:Number
        FIELD = PCT_RSLT_VAL:Number
        FIELD = RECIPIENT_ID:CHAR
        FIELD = RECIPIENT_TAG:Number
        FIELD = USER_FLD1:CHAR
        FIELD = USER_FLD2:CHAR
        FIELD = USER_FLD3:CHAR
        FIELD = USER_FLD4:CHAR
        FIELD = USER_FLD5:CHAR
        FIELD = USER_FLD6:CHAR
        FIELD = GP_MPSLP_SECTION:CHAR
        FIELD = GP_MPSLP_SPRNT_ORD:Number
        FIELD = GP_MPSLP_SUBSECTN:CHAR
        FIELD = GP_MPSLP_PRNT_ORD:Number
        FIELD = GP_MPSLP_PIN_DESCR:CHAR
        FIELD = GP_MPSLP_DISP_ZERO:CHAR
        FIELD = GP_MPSLP_RET_ADJ:CHAR
        FIELD = GP_MPSLP_SUM_INST:CHAR
        FIELD = GP_MPSLP_ADD_TOTAL:CHAR
        FIELD = GP_MPSLP_DISP_PYSL:CHAR



        CREATE-ARRAY NAME=MPSLP_ACUM SIZE=10
        FIELD = EMPLID:CHAR
        FIELD = CAL_RUN_ID:CHAR
        FIELD = EMPL_RCD:Number
        FIELD = GP_PAYGROUP:CHAR
        FIELD = CAL_ID:CHAR
        FIELD = ORIG_CAL_RUN_ID:CHAR
        FIELD = GP_PSLP_SRCPRODUCT:CHAR
        FIELD = GP_PSLP_ID:CHAR
        FIELD = RSLT_SEG_NUM:Number
        FIELD = PIN_NUM:Number
        FIELD = EMPL_RCD_ACUM:Number
        FIELD = ACM_FROM_DT:CHAR
        FIELD = ACM_THRU_DT:CHAR
        FIELD = SEQ_NUM8:Number
        FIELD = PIN_ELEM_GRP_NUM:Number
        FIELD = SLICE_BGN_DT:CHAR
        FIELD = SLICE_END_DT:CHAR
        FIELD = SEG_BGN_DT:CHAR
        FIELD = SEG_END_DT:CHAR
        FIELD = PRD_BGN_DT:CHAR
        FIELD = PRD_END_DT:CHAR
        FIELD = PYMT_DT:CHAR
        FIELD = RUN_TYPE:CHAR
        FIELD = USER_KEY1:CHAR
        FIELD = USER_KEY2:CHAR
        FIELD = USER_KEY3:CHAR
        FIELD = USER_KEY4:CHAR
        FIELD = USER_KEY5:CHAR
        FIELD = USER_KEY6:CHAR
        FIELD = COUNTRY:CHAR
        FIELD = CALC_RSLT_VAL:Number
        FIELD = CALC_DELTA_VAL:Number
        FIELD = CALC_VAL:Number
        FIELD = GP_MPSLP_SECTION:CHAR
        FIELD = GP_MPSLP_SPRNT_ORD:Number
        FIELD = GP_MPSLP_SUBSECTN:CHAR
        FIELD = GP_MPSLP_PRNT_ORD:Number
        FIELD = GP_MPSLP_PIN_DESCR:CHAR
        FIELD = GP_MPSLP_DISP_ZERO:CHAR
        FIELD = GP_MPSLP_RET_ADJ:CHAR
        FIELD = GP_MPSLP_SUM_INST:CHAR
        FIELD = GP_MPSLP_ADD_TOTAL:CHAR
        FIELD = GP_MPSLP_DISP_PYSL:CHAR
        FIELD = GP_BASE:Number
        FIELD = GP_UNIT:Number
        FIELD = GP_RATE:Number
        FIELD = GP_PERCENT:Number


        CREATE-ARRAY NAME=MPSLP_MSG SIZE=10
        FIELD = EMPLID:CHAR
        FIELD = CAL_RUN_ID:CHAR
        FIELD = EMPL_RCD:Number
        FIELD = GP_PAYGROUP:CHAR
        FIELD = CAL_ID:CHAR
        FIELD = ORIG_CAL_RUN_ID:CHAR
        FIELD = RSLT_SEG_NUM:Number
        FIELD = GP_CNTRY_PSLP_MSG:CHAR
        FIELD = GP_PSLP_MSG_NBR:Number
        FIELD = GP_PSLP_MSG_PRIORITY:Number
        FIELD = GP_PSLP_DTA_SRC:CHAR
        FIELD = GP_PSLP_MSG_TEXT:CHAR

        CREATE-ARRAY NAME=PSLP_MSG_TEXT SIZE={MAX_COREMSG}
        FIELD = MSGNBR:Number
        FIELD = MSGCOUNTRY:CHAR
        FIELD = MSGPRIORITY:Number
        FIELD = MSGTEXT:CHAR
END-SETUP

!*********************************************************************************
! For ePay Purposes: Mobile Payslip  - check the availability of Mob Payslip     *
!This procedure check the pre-req's for the Mobile Payslip                       *
!*********************************************************************************
begin-procedure init-mpslp($GPcal_run_id)
#debug5 show '** MOB PAY SLIP SQC: init-mpslp'

    LET $GPinit_mob_payslp =    ' '
    LET $GPcheck_field_exists  = ' '
    LET $GPmobmsg_check = ' '
    
    DO get-country($GPcal_run_id,$payslp_Country)
    DO check-mob-records-avail($GPmob_records_avail)
    
    if $GPmob_records_avail = 'Y'
        LET $_GP_Mobenabled_field1 = ' OPT.GP_PSLP_HDCPYOPTN '  
        LET $_GP_Mobenabled_field2 = ' OPT.GP_SS_MPSLP_ENABLE '        
       Do check-mob-epay-enabled($payslp_Country, $GPmobepay_check)
       Do check-field-exists($GPcheck_field_exists)
    ELSE
        LET $_GP_Mobenabled_field1 = ' OPT.GP_PSLP_HDCPYOPTN '
        LET $_GP_Mobenabled_field2 = ' OPT.COUNTRY '  
    END-IF
      
    LET $_GPcheck_field_exists = $GPcheck_field_exists   
        
    if $GPmob_records_avail = 'Y' AND $GPmobepay_check = 'Y'
        LET $_GPinit_mob_payslp = 'Y'
    ELSE 
        LET $_GPinit_mob_payslp = 'N'
    END-IF
    
    ! Mobile Payslip Message Feature available
    DO check-mob-msgrecord-avail($GPmob_msg_record_avail)

    if  $GPmob_msg_record_avail = 'Y'  AND $_GPinit_mob_payslp = 'Y'
       LET $_GPmobmsg_check = 'Y'
    else
       LET $_GPmobmsg_check = 'N'
    end-if
       
    do Record-Field-List('GP_MPSLP_STGHDR')
    do Record-Field-List('GP_MPSLP_STGED')
    do Record-Field-List('GP_MPSLP_STGACM')
    do Record-Field-List('GP_MPSLP_STGMSG')
    
    ! Initialize the array values for all the arrays.
    PUT '' 0 0 0 0 0 0 ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' INTO MPSLP_HDR(0) PYMT_DT GP_MPSLP_GROSS CALC_DELTA_VAL CALC_VAL GP_MPSLP_NET CALC_DELTA_VAL2 CALC_VAL2 GP_COMPANY RUN_TYPE 
    GP_MPSLP_HDR1 GP_MPSLP_HDR2 GP_MPSLP_HDR3 GP_MPSLP_HDR4 GP_MPSLP_HDR5 GP_MPSLP_HDR6
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 $MV9 $MV10 $MV11 $MV12 $MV13 $MV14 #MV15 #MV16 #MV17 #MV18 #MV19 #MV20 $MV21 $MV22 $MV23 $MV24 $MV25 $MV26 $MV27 $MV28 FROM MPSLP_HDR(0)
    
    PUT 0 0 '' '' '' '' '' ' ' 0 0 0 0 0 0 0 0 0 ' ' 0 ' ' ' ' ' ' ' ' ' ' ' ' ' ' 0 ' ' 0 ' ' 'N' 'Y' 'N' 'Y' 'Y' INTO MPSLP_ED(0) ED_ASSIGN_INSTANCE PI_INSTANCE PRD_BGN_DT PRD_END_DT SEG_BGN_DT 
    SEG_END_DT PYMT_DT  RUN_TYPE CALC_RSLT_VAL CALC_ADJ_VAL CALC_DELTA_VAL BASE_RSLT_VAL BASE_ADJ_VAL RATE_RSLT_VAL UNIT_RSLT_VAL UNIT_ADJ_VAL PCT_RSLT_VAL RECIPIENT_ID RECIPIENT_TAG USER_FLD1 USER_FLD2  
    USER_FLD3 USER_FLD4 USER_FLD5 USER_FLD6 GP_MPSLP_SECTION GP_MPSLP_SPRNT_ORD GP_MPSLP_SUBSECTN GP_MPSLP_PRNT_ORD GP_MPSLP_PIN_DESCR GP_MPSLP_DISP_ZERO GP_MPSLP_RET_ADJ GP_MPSLP_SUM_INST 
    GP_MPSLP_ADD_TOTAL GP_MPSLP_DISP_PYSL                                                                                                           
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 $MV9 #MV10 #MV11 $MV12 $MV13 #MV14 #MV15 #MV16 $MV17 $MV18 $MV19 $MV20 $MV21 $MV22 #MV23 #MV24 #MV25 #MV26 #MV27 #MV28 #MV29 #MV30 
    #MV31 $MV32 #MV33 $MV34 $MV35 $MV36 $MV37 $MV38 $MV39 $MV40 #MV41 $MV42 #MV43 $MV44 $MV45 $MV46 $MV47 $MV48 $MV49 FROM MPSLP_ED(0)
    
    PUT '' '' '' '' '' '' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' 0 0 0 ' ' 0 ' ' 0 ' ' 'N' 'Y' 'N' 'Y' 'Y' 0 0 0 0 INTO MPSLP_ACUM(0) SLICE_END_DT  SEG_BGN_DT SEG_END_DT PRD_BGN_DT PRD_END_DT PYMT_DT RUN_TYPE 
    USER_KEY1 USER_KEY2 USER_KEY3 USER_KEY4 USER_KEY5 USER_KEY6 COUNTRY CALC_RSLT_VAL CALC_DELTA_VAL CALC_VAL GP_MPSLP_SECTION  GP_MPSLP_SPRNT_ORD GP_MPSLP_SUBSECTN GP_MPSLP_PRNT_ORD GP_MPSLP_PIN_DESCR 
    GP_MPSLP_DISP_ZERO GP_MPSLP_RET_ADJ GP_MPSLP_SUM_INST  GP_MPSLP_ADD_TOTAL GP_MPSLP_DISP_PYSL GP_BASE GP_UNIT GP_RATE GP_PERCENT
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 $MV7 $MV8 #MV9 #MV10 #MV11 $MV12 $MV13 #MV14 #MV15 $MV16 $MV17 $MV18 $MV19 $MV20 $MV21 $MV22 $MV23 $MV24 $MV25 $MV26 
    $MV27 $MV28 $MV29 $MV30 #MV31 #MV32 #MV33 $MV34 #MV35 $MV36 #MV37 $MV38 $MV39 $MV40 $MV41 $MV42 $MV43 #MV44 #MV45 #MV46 #MV47 FROM MPSLP_ACUM(0) 
    
    
    PUT ' ' ' ' 0 ' ' ' ' ' '  0 ' ' 0 0 ' ' ' ' INTO MPSLP_MSG(0) EMPLID CAL_RUN_ID EMPL_RCD GP_PAYGROUP CAL_ID ORIG_CAL_RUN_ID RSLT_SEG_NUM GP_CNTRY_PSLP_MSG GP_PSLP_MSG_NBR GP_PSLP_MSG_PRIORITY 
    GP_PSLP_DTA_SRC GP_PSLP_MSG_TEXT
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 #MV9 #MV10 $MV11 $MV12 FROM MPSLP_MSG(0)
    
    
#debug6 show '** MOB PAY SLIP SQC: init-mpslp output:'
end-procedure !init-mpslp

!***********************************************************************
! For ePay Purposes: Mobile Payslip  - Get the name of country         *
!***********************************************************************

begin-procedure get-country($GPcal_run_id, :$payslp_Country)

BEGIN-SELECT
A.COUNTRY
    LET $payslp_Country = &A.COUNTRY
FROM PS_GP_CAL_RUN A
WHERE A.CAL_RUN_ID = $GPcal_run_id
END-SELECT
end-procedure

!***********************************************************************
! For ePay Purposes: Mobile Payslip  - check if the records available  *
!***********************************************************************

begin-procedure check-mob-records-avail (:$GPmob_records_avail)
#debug5 show '** MOB PAY SLIP SQC: Check-mob-records-avail'

  let $GPmob_rec1 = 'N'
begin-select
REC1.RECNAME 
    let $GPmob_rec1 = 'Y'
FROM PSRECDEFN REC1
WHERE REC1.RECNAME = 'GP_MPSLP_STGED'
OR REC1.RECNAME = 'GP_MPSLP_STGACM'
OR REC1. RECNAME = 'GP_MPSLP_STGHDR'
end-select

    if $GPmob_rec1 = 'Y'
        LET $GPmob_records_avail = 'Y'
    ELSE
        LET $GPmob_records_avail = 'N'
    end-if
    
#debug6 show '** MOB PAY SLIP SQC: Check-mob-records-avail:' $GPmob_records_avail 
end-procedure !Check-mob-records-avail

!***********************************************************************************
! For ePay Purposes: Mobile Payslip  - check if the PSLP Message record available  *
!***********************************************************************************
!
begin-procedure check-mob-msgrecord-avail (:$GPmob_msg_record_avail)
#debug5 show '** MOB PAY SLIP SQC: Check-mob-msgrecord-avail'

   let $GPmob_msg_rec1 = 'N'

begin-select
REC1.RECNAME
    let $GPmob_msg_rec1 = 'Y'
FROM PSRECDEFN REC1
WHERE REC1.RECNAME = 'GP_MPSLP_MSGFTR'
end-select

    if $GPmob_msg_rec1 = 'Y'
        LET $GPmob_msg_record_avail = 'Y'
    ELSE
        LET $GPmob_msg_record_avail = 'N'
    end-if
    
#debug6 show '** MOB PAY SLIP SQC: Check-mob-msg-records-avail:' $GPmob_msg_record_avail 
end-procedure !check-mob-msgrecord-avail

!***********************************************************************
! For ePay Purposes: Mobile Payslip  - check if the records available  *
!***********************************************************************

begin-procedure check-field-exists (:$GPcheck_field_exists)
#debug5 show '** MOB PAY SLIP SQC: Check-mob-records-avail'

  let $GPcheck_field_exists = 'N'

begin-select
REC2.FIELDNAME 
    let $GPcheck_field_exists = 'Y'
FROM PSRECFIELDDB REC2
WHERE REC2.RECNAME = 'GP_MPSLP_STGACM'
AND REC2.FIELDNAME = 'GP_MPSLP_DISP_ZERO'
end-select

    
#debug6 show '** MOB PAY SLIP SQC: check-field-exists :' $GPcheck_field_exists
end-procedure !check-field-exists 

!***********************************************************************
! For ePay Purposes: Mobile Payslip  - check if the ePay installed     *
!***********************************************************************

begin-procedure check-mob-ePay-enabled ($payslp_Country,:$GPmobepay_check)
#debug5 show '** MOB PAY SLIP SQC: Check-Mob-ePay-enabled'
 
begin-select
[$_GP_Mobenabled_field1]  &OPT.GP_PSLP_HDCPYOPTN=CHAR
[$_GP_Mobenabled_field2]  &OPT.GP_SS_MPSLP_ENABLE=CHAR

      
FROM PS_GP_SS_PSLP_OPT OPT
WHERE OPT.COUNTRY = $payslp_Country
end-select

   if &OPT.GP_PSLP_HDCPYOPTN = 'Y' and &OPT.GP_SS_MPSLP_ENABLE = 'Y'
     let $GPmobepay_check = 'Y' 
   else
   let $GPmobepay_check = 'N'
   end-if
    
#debug6 show '** MOB PAY SLIP SQC: Check-Mob-ePay-enabled:  ' $GPmobepay_check
end-procedure !Check-Mob-ePay-enabled

!***********************************************************************
! For ePay Purposes: Mobile Payslip  - Delete the existing data         *
! These procedure will clean up the data from the staging tables        *
! The where clause is optional in nature.                               *
! $GPcal_run_id - calendar run id is mandatory.                         *
!***********************************************************************

begin-procedure clean_mpslp_records ($GPcal_run_id, $GPwhere_clause)
#debug5 show '** MOB PAY SLIP SQC: clean_mpslp_records'

    IF $GPinit_mob_payslp = 'Y' or $_GPinit_mob_payslp = 'Y'
        LET $GPcal_chk = substr($GPcal_run_id, 0 , 1)
        IF  $GPcal_chk = '''' 
            let $GPwhere_clause = ' WHERE CAL_RUN_ID = '|| $GPcal_run_id  || ' '|| $GPwhere_clause
        ELSE
            let $GPwhere_clause = ' WHERE CAL_RUN_ID = '|| '''' || $GPcal_run_id  ||'''' || ' '|| $GPwhere_clause
        END-IF

begin-SQL on-error=SQL-Error

DELETE FROM PS_GP_MPSLP_STGHDR [$GPwhere_clause] ;
DELETE FROM PS_GP_MPSLP_STGED [$GPwhere_clause] ;
DELETE FROM PS_GP_MPSLP_STGACM [$GPwhere_clause] ;
end-SQL
    
    END-IF
    
    !Clear the Payslip messages table.
    IF $_GPmobmsg_check = 'Y' 
    
begin-SQL on-error=SQL-Error
DELETE FROM PS_GP_MPSLP_STGMSG [$GPwhere_clause] ;
end-SQL

    END-IF

end-procedure !clean_mpslp_records

!*************************************************************************************
! For ePay Purposes: Mobile Payslip  - Insert the header batch data.                  *
! $GPselect - Parameter accepts the Field list separated by commas                    *
! $GPfrom - Parameter accepts the record names separated by commas                    *
! $GPwhere_batch - Parameter accepts the where clause conditions                      *
!*************************************************************************************

begin-procedure insert_mpslp_hdr_batch($GPselect, $GPfrom, $GPwhere_batch)
#debug5 show '** MOB PAY SLIP SQC: insert_mpslp_hdr_batch '
    
    IF $_GPinit_mob_payslp = 'Y' or $GPinit_mob_payslp = 'Y'
        
    IF $GPwhere_batch = '' OR $GPwhere_batch = ' '
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGHDR ' || '(' || $_GPFieldListhdr ||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom ||')'
            ELSE
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGHDR ' || '(' || $_GPFieldListhdr ||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom || ' WHERE ' ||$GPwhere_batch ||')'
    END-IF
    
begin-SQL on-error=SQL-Error

INSERT INTO [$INSERT_SQL]
        
end-SQL
    
    END-IF

end-procedure !insert-hdr-batch

!*************************************************************************************
! For ePay Purposes: Mobile Payslip  - Insert the earning and deduction batch data. *
! $GPselect - Parameter accepts the Field list separated by commas                    *
! $GPfrom - Parameter accepts the record names separated by commas                    *
! $GPwhere_batch - Parameter accepts the where clause conditions                      *
!*************************************************************************************

begin-procedure insert_mpslp_ernded_batch($GPselect, $GPfrom, $GPwhere_batch)
#debug5 show '** MOB PAY SLIP SQC: insert_mpslp_ernded_batch '
    
    IF $_GPinit_mob_payslp = 'Y' or $GPinit_mob_payslp = 'Y'
    
        IF $_GPcheck_field_exists = 'Y' OR $GPcheck_field_exists = 'Y'
             LET #start_posn = 0
             LET #comma_count  = 0
             while #comma_count < 55
        
            find  ','  in  $GPselect  #start_posn  #comma_loc
            
      
            if #comma_loc = -1
            show 'Earning Deduction Field loop out:  ' #comma_count
                break       ! Exit WHILE loop.
            end-if
            LET #start_posn = #comma_loc + 1
            LET #comma_count  = #comma_count + 1
        end-while
        show 'Total Commas earning deduction:  ' #comma_count
                
        EVALUATE #comma_count
        WHEN = 48
            let $GPselect = $GPselect
        WHEN = 47
            let $GPselect = $GPselect || ',''Y'''
        WHEN = 46
            let $GPselect = $GPselect || ',''Y'',''Y'''
        WHEN = 45
            let $GPselect = $GPselect || ',''N'',''Y'',''Y'''
        WHEN = 44
            let $GPselect = $GPselect || ',''Y'',''N'',''Y'',''Y'''
        WHEN-OTHER
            let $GPselect = $GPselect || ',''N'',''Y'',''N'',''Y'',''Y'''
        BREAK
        END-EVALUATE
        
        END-IF
     
    IF $GPwhere_batch = '' OR $GPwhere_batch = ' '
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGED ' || '(' ||$_GPFieldListed||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom ||')'
        ELSE
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGED ' || '(' ||$_GPFieldListed||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom || ' WHERE ' ||$GPwhere_batch ||')'
    END-IF

begin-SQL on-error=SQL-Error

INSERT INTO [$INSERT_SQL]
        
end-SQL
    
    END-IF

end-procedure !insert_mpslp_ernded_batch

!**************************************************************************************
! For ePay Purposes: Mobile Payslip  - Insert the accumulators batch data.            *
! $GPselect - Parameter accepts the Field list separated by commas                    *
! $GPfrom - Parameter accepts the record names separated by commas                    *
! $GPwhere_batch - Parameter accepts the where clause conditions                      *
!**************************************************************************************

begin-procedure insert_mpslp_acum_batch($GPselect, $GPfrom, $GPwhere_batch)
#debug5 show '** MOB PAY SLIP SQC: insert_mpslp_acum_batch'
    
    IF $_GPinit_mob_payslp = 'Y' OR $GPinit_mob_payslp = 'Y'
        IF $_GPcheck_field_exists = 'Y' OR $GPcheck_field_exists = 'Y'
            LET #start_posn = 0
            LET #comma_count  = 0
            while  #comma_count < 60
            
            find  ','  in  $GPselect  #start_posn  #comma_loc

                        
            if #comma_loc = -1
            show 'Accumulators Field loop out:  ' #comma_count
                break       ! Exit WHILE loop.
            end-if
            LET #start_posn = #comma_loc + 1
            LET #comma_count  = #comma_count + 1
            
        end-while
        show 'Total Commas Accumulator:  ' #comma_count
        EVALUATE #comma_count
        WHEN = 46
            let $GPselect = $GPselect
        WHEN = 45
            let $GPselect = $GPselect || ',0'
        WHEN = 44
            let $GPselect = $GPselect || ',0,0'
        WHEN = 43
            let $GPselect = $GPselect || ',0,0,0'
        WHEN = 42
            let $GPselect = $GPselect || ',0,0,0,0'
        WHEN = 41
            let $GPselect = $GPselect || ',''Y'',0,0,0,0'
        WHEN = 40
            let $GPselect = $GPselect || ',''Y'',''Y'',0,0,0,0'
        WHEN = 39
            let $GPselect = $GPselect || ',''N'',''Y'',''Y'',0,0,0,0'
        WHEN = 38
            let $GPselect = $GPselect || ',''Y'',''N'',''Y'',''Y'',0,0,0,0'
        WHEN-OTHER
            let $GPselect = $GPselect || ',''N'',''Y'',''N'',''Y'',''Y'',0,0,0,0'
        BREAK
        END-EVALUATE
        
        END-IF
                        
    IF $GPwhere_batch = '' OR $GPwhere_batch = ' '
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGACM ' || '(' ||$_GPFieldListacm||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom ||')'
        ELSE
        LET $INSERT_SQL = ' PS_GP_MPSLP_STGACM ' || '(' ||$_GPFieldListacm||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom || ' WHERE ' ||$GPwhere_batch ||')'
    END-IF

begin-SQL on-error=SQL-Error

INSERT INTO [$INSERT_SQL]
        
end-SQL
    

    END-IF

end-procedure !insert_mpslp_acum_batch

!*************************************************************************************
! For ePay Purposes: Mobile Payslip  - Insert the Messages batch data.                *
! $GPselect - Parameter accepts the Field list separated by commas                    *
! $GPfrom - Parameter accepts the record names separated by commas                    *
! $GPwhere_batch - Parameter accepts the where clause conditions                      *
!*************************************************************************************

begin-procedure insert_mpslp_msg_batch($GPselect, $GPfrom, $GPwhere_batch)
#debug5 show '** MOB PAY SLIP SQC: insert_mpslp_msg_batch '
    
    
    IF ( $_GPmobmsg_check = 'Y'  OR  $GPmobmsg_check = 'Y' )
        
       IF $GPwhere_batch = '' OR $GPwhere_batch = ' '
          LET $INSERT_SQL = ' PS_GP_MPSLP_STGMSG ' || '(' || $_GPFieldListmsg ||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom ||')'
       ELSE
          LET $INSERT_SQL = ' PS_GP_MPSLP_STGMSG ' || '(' || $_GPFieldListmsg ||')'||'(SELECT '||$GPselect || ' FROM '|| $GPfrom || ' WHERE ' ||$GPwhere_batch ||')'
       END-IF
    
begin-SQL on-error=SQL-Error
INSERT INTO [$INSERT_SQL]
end-SQL
    
    END-IF

end-procedure !insert-msg-batch

!***********************************************************************
! For ePay Purposes: Mobile Payslip Field Structure                    *
!***********************************************************************
Begin-Procedure Record-Field-List($GPrecname)

    LET $GPFieldList = ' '
    LET $GPrecname1 = ''''||$GPrecname||''''
    
begin-select
FLDLST.FIELDNAME
FLDLST.FIELDNUM

    LET $GPFieldList = $GPFieldList || &FLDLST.FIELDNAME || ' ,'
    
FROM PSRECFIELDDB FLDLST
WHERE FLDLST.RECNAME =  [$GPrecname1]
ORDER BY FLDLST.FIELDNUM
end-select
    
    LET $GPFieldList = RTRIM($GPFieldList, ',')
    
    IF $GPrecname = 'GP_MPSLP_STGHDR' 
        LET $_GPFieldListhdr = $GPFieldList
    END-IF
    
    IF $GPrecname = 'GP_MPSLP_STGED' 
        LET $_GPFieldListed = $GPFieldList
    END-IF
    
    IF $GPrecname = 'GP_MPSLP_STGACM' 
        LET $_GPFieldListacm = $GPFieldList
    END-IF
    
    ! Mobile Payslip Message Changes
    IF $GPrecname = 'GP_MPSLP_STGMSG' 
        LET $_GPFieldListmsg = $GPFieldList
    END-IF
        
End-Procedure !Record-Field-List

!************************************************************************
! Procedure: insert_mpslp_hdr_row                                       *
! Descr: Use this procedure to insert data to Mob Payslip Header        *
! PS_GP_MPSLP_STGHDR table                                              *
!----------------------------------                                     *
!                                                                       *
! Input:    EMPLID                  $MV1                                *
!           CAL_RUN_ID              $MV2                                *
!           EMPL_RCD                #MV3                                *
!           GP_PAYGROUP             $MV4                                *
!           CAL_ID                  $MV5                                *
!           ORIG_CAL_RUN_ID         $MV6                                *
!           RSLT_SEG_NUM            #MV7                                *
!           GP_PSLP_SRCPRODUCT      $MV8                                *
!           GP_PSLP_ID              $MV9                                *
!           SEG_BGN_DT              $MV10                               *
!           SEG_END_DT              $MV11                               *
!           PRD_BGN_DT              $MV12                               *
!           PRD_END_DT              $MV13                               *
!           PYMT_DT                 $MV14                               *
!           GP_MPSLP_GROSS          #MV15                               *
!           CALC_DELTA_VAL          #MV16                               *
!           CALC_VAL                #MV17                               *
!           GP_MPSLP_NET            #MV18                               *
!           CALC_DELTA_VAL2         #MV19                               *
!           CALC_VAL2               #MV20                               *
!           GP_COMPANY              $MV21                               *
!           RUN_TYPE                $MV22                               *
!           GP_MPSLP_HDR1           $MV23                               *
!           GP_MPSLP_HDR2           $MV24                               *
!           GP_MPSLP_HDR3           $MV25                               *
!           GP_MPSLP_HDR4           $MV26                               *
!           GP_MPSLP_HDR5           $MV27                               *
!           GP_MPSLP_HDR6           $MV28                               *
!                                                                       *
! Output:  <none>                                                       *
! Comments: The values requires to be pass to an array in the zeroth row *
! only, as it's for row by row processing so one row will be passed      *
! to an array.                                                           *
! Example: to pass an value into a array                                 *
! LET MPSLP_HDR.EMPLID(0) =  $EMPLID                                         *
! There 6 common key fields in the header records which are being passed *
! into the earning/deductions & accumulator array here only.             *
! No need to pass it again.                                              * 
!************************************************************************


Begin-Procedure insert_mpslp_hdr_row

    Let $sql-statement = 'GPMPSLP.SQC, insert_mpslp_hdr_row, Insert, PS_GP_MPSLP_STGHDR'

     LET   $MV14        =    ''
     LET   #MV15        =    0
     LET   #MV16        =    0
     LET   #MV17        =    0
     LET   #MV18        =    0
     LET   #MV19        =    0
     LET   #MV20        =    0
     LET   $MV21        =    ' '
     LET   $MV22        =    ' '
     LET   $MV23        =    ' '
     LET   $MV24        =    ' '
     LET   $MV25        =    ' '
     LET   $MV26        =    ' '
     LET   $MV27        =    ' '
     LET   $MV28        =    ' '
    
    IF $GPinit_mob_payslp = 'Y'   OR $_GPinit_mob_payslp = 'Y'   
        
        GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 $MV9 $MV10 $MV11 $MV12 $MV13 $MV14 #MV15 #MV16 #MV17 #MV18 #MV19 #MV20 $MV21 $MV22 $MV23 $MV24 $MV25 $MV26 $MV27 $MV28 FROM MPSLP_HDR(0)
        
    IF $MV14      =   '' OR $MV14      =   ' '
        LET     $MV14      =   ''
    END-IF
    IF $MV21      =   '' OR $MV21      =   ' '
        LET     $MV21      =   ' '
    END-IF
    IF $MV22      =   '' OR $MV22      =   ' '
        LET     $MV22      =   ' '
    END-IF
    IF $MV23      =   '' OR $MV23      =   ' '
        LET     $MV23      =   ' '
    END-IF
    IF $MV24      =   '' OR $MV24      =   ' '
        LET     $MV24      =   ' '
    END-IF
    IF $MV25      =   '' OR $MV25      =   ' '
        LET     $MV25      =   ' '
    END-IF
    IF $MV26      =   '' OR $MV26      =   ' '
        LET     $MV26      =   ' '
    END-IF
    IF $MV27      =   '' OR $MV27      =   ' '
        LET     $MV27      =   ' '
    END-IF
    IF $MV28      =   '' OR $MV28      =   ' '
        LET     $MV28      =   ' '
    END-IF
    
        !PASS THE COMMON HEADER KEY VALUES INTO THE ED AND ACUM AND MSG ARRAYS.
        LET MPSLP_ED.EMPLID(0) = MPSLP_HDR.EMPLID(0)
        LET MPSLP_ED.CAL_RUN_ID(0) = MPSLP_HDR.CAL_RUN_ID(0)
        LET MPSLP_ED.EMPL_RCD(0) = MPSLP_HDR.EMPL_RCD(0)
        LET MPSLP_ED.GP_PAYGROUP(0) = MPSLP_HDR.GP_PAYGROUP(0)
        LET MPSLP_ED.CAL_ID(0) = MPSLP_HDR.CAL_ID(0)
        LET MPSLP_ED.ORIG_CAL_RUN_ID(0) = MPSLP_HDR.ORIG_CAL_RUN_ID(0)

        LET MPSLP_ACUM.EMPLID(0) = MPSLP_HDR.EMPLID(0)
        LET MPSLP_ACUM.CAL_RUN_ID(0) = MPSLP_HDR.CAL_RUN_ID(0)
        LET MPSLP_ACUM.EMPL_RCD(0) = MPSLP_HDR.EMPL_RCD(0)
        LET MPSLP_ACUM.GP_PAYGROUP(0) = MPSLP_HDR.GP_PAYGROUP(0)
        LET MPSLP_ACUM.CAL_ID(0) = MPSLP_HDR.CAL_ID(0)
        LET MPSLP_ACUM.ORIG_CAL_RUN_ID(0) = MPSLP_HDR.ORIG_CAL_RUN_ID(0)

        IF $_GPmobmsg_check = 'Y'        
           LET MPSLP_MSG.EMPLID(0)          = MPSLP_HDR.EMPLID(0)
           LET MPSLP_MSG.CAL_RUN_ID(0)      = MPSLP_HDR.CAL_RUN_ID(0)
           LET MPSLP_MSG.EMPL_RCD(0)        = MPSLP_HDR.EMPL_RCD(0)
           LET MPSLP_MSG.GP_PAYGROUP(0)     = MPSLP_HDR.GP_PAYGROUP(0)
           LET MPSLP_MSG.CAL_ID(0)          = MPSLP_HDR.CAL_ID(0)
           LET MPSLP_MSG.ORIG_CAL_RUN_ID(0) = MPSLP_HDR.ORIG_CAL_RUN_ID(0)
           LET MPSLP_MSG.RSLT_SEG_NUM(0)    = MPSLP_HDR.RSLT_SEG_NUM(0)
        END-IF


begin-sql on-error=SQL-Error

INSERT INTO PS_GP_MPSLP_STGHDR
(
[$GPFieldListhdr]
) VALUES 
($MV1, 
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
#MV7, 
$MV8, 
$MV9, 
$MV10,
$MV11,
$MV12,
$MV13,
$MV14,
#MV15, 
#MV16, 
#MV17, 
#MV18, 
#MV19, 
#MV20, 
$MV21,
$MV22,
$MV23,
$MV24,
$MV25,
$MV26,
$MV27, 
$MV28);

END-SQL

    ! Initialize the array values after inserting the data.
    PUT '' 0 0 0 0 0 0 ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' INTO MPSLP_HDR(0) PYMT_DT GP_MPSLP_GROSS CALC_DELTA_VAL CALC_VAL GP_MPSLP_NET CALC_DELTA_VAL2 CALC_VAL2 GP_COMPANY RUN_TYPE 
    GP_MPSLP_HDR1 GP_MPSLP_HDR2 GP_MPSLP_HDR3 GP_MPSLP_HDR4 GP_MPSLP_HDR5 GP_MPSLP_HDR6
    
    END-IF
    
End-Procedure !insert_mpslp_hdr_row



!************************************************************************
! Procedure: insert_mpslp_ernded_row                                 *
! DesCr: Use this procedure to insert control data to Mob Payslip Header*
! PS_GP_MPSLP_STGED table                                               *
!----------------------------------                                     *
!                                                                       *
! Input:            EMPLID                          $MV1                *
!                   CAL_RUN_ID                      $MV2                *
!                   EMPL_RCD                        #MV3                *
!                   GP_PAYGROUP                     $MV4                *
!                   CAL_ID                          $MV5                *
!                   ORIG_CAL_RUN_ID                 $MV6                *
!                   RSLT_SEG_NUM                    #MV7                *
!                   GP_PSLP_SRCPRODUCT              $MV8                *
!                   GP_PSLP_ID                      $MV9                *
!                   INSTANCE                        #MV10               *
!                   PIN_NUM                         #MV11               *
!                   SLICE_BGN_DT                    $MV12               *
!                   SLICE_END_DT                    $MV13               *
!                   PIN_ELEM_GRP_NUM                #MV14               *
!                   ED_ASSIGN_INSTANCE              #MV15               *
!                   PI_INSTANCE                     #MV16               *
!                   PRD_BGN_DT                      $MV17               *
!                   PRD_END_DT                      $MV18               *
!                   SEG_BGN_DT                      $MV19               *
!                   SEG_END_DT                      $MV20               *
!                   PYMT_DT                         $MV21               *
!                   RUN_TYPE                        $MV22               *
!                   CALC_RSLT_VAL                   #MV23               *
!                   CALC_ADJ_VAL                    #MV24               *
!                   CALC_DELTA_VAL                  #MV25               *
!                   BASE_RSLT_VAL                   #MV26               *
!                   BASE_ADJ_VAL                    #MV27               *
!                   RATE_RSLT_VAL                   #MV28               *
!                   UNIT_RSLT_VAL                   #MV29               *
!                   UNIT_ADJ_VAL                    #MV30               *
!                   PCT_RSLT_VAL                    #MV31               *
!                   RECIPIENT_ID                    $MV32               *
!                   RECIPIENT_TAG                   #MV33               *
!                   USER_FLD1                       $MV34               *
!                   USER_FLD2                       $MV35               *
!                   USER_FLD3                       $MV36               *
!                   USER_FLD4                       $MV37               *
!                   USER_FLD5                       $MV38               *
!                   USER_FLD6                       $MV39               *
!                   GP_MPSLP_SECTION                $MV40               *
!                   GP_MPSLP_SPRNT_ORD              #MV41               *
!                   GP_MPSLP_SUBSECTN               $MV42               *
!                   GP_MPSLP_PRNT_ORD               #MV43               *
!                   GP_MPSLP_PIN_DESCR              $MV44               *
!                   GP_MPSLP_DISP_ZERO              $MV45               *
!                   GP_MPSLP_RET_ADJ                $MV46               *
!                   GP_MPSLP_SUM_INST               $MV47               *
!                   GP_MPSLP_ADD_TOTAL              $MV48               *
!                   GP_MPSLP_DISP_PYSL              $MV49               *
!                                                                      *
! Output:  <none>                                                      *
! Comments: The values requires to be pass to an array in the zeroth row *
! only, as it's for row by row processing so one row will be passed      *
! to an array.                                                           *
! Example: to pass an value into a array                                 *
! LET MPSLP_ED.EMPLID(0) =  $EMPLID                                      *
!                                                                      *
!***********************************************************************

Begin-Procedure insert_mpslp_ernded_row

    Let $sql-statement = 'GPMPSLP.SQC, insert_mpslp_ernded_row, Insert, PS_GP_MPSLP_STGED    '
    
    LET           #MV15      =         0
   LET           #MV16      =         0
   LET           $MV17      =         ''
   LET           $MV18      =         ''
   LET           $MV19      =         ''
   LET           $MV20      =         ''
   LET           $MV21      =         ''
   LET           $MV22      =         ' '
   LET           #MV23      =         0
   LET           #MV24      =         0
   LET           #MV25      =         0
   LET           #MV26      =         0
   LET           #MV27      =         0
   LET           #MV28      =         0
   LET           #MV29      =         0
   LET           #MV30      =         0
   LET           #MV31      =         0
   LET           $MV32      =         ' '
   LET           #MV33      =         0
   LET           $MV34      =         ' '
   LET           $MV35      =         ' '
   LET           $MV36      =         ' '
   LET           $MV37      =         ' '
   LET           $MV38      =         ' '
   LET           $MV39      =         ' '
   LET           $MV40      =         ' '
   LET           #MV41      =         0
   LET           $MV42      =         ' '
   LET           #MV43      =         0
   LET           $MV44      =         ' '
   LET           $MV45      =         'N'
   LET           $MV46      =         'Y'
   LET           $MV47      =         'N'
   LET           $MV48      =         'Y'
   LET           $MV49      =         'Y'
   
   
    IF $GPinit_mob_payslp = 'Y'    OR $_GPinit_mob_payslp = 'Y'  
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 $MV9 #MV10 #MV11 $MV12 $MV13 #MV14 #MV15 #MV16 $MV17 $MV18 $MV19 $MV20 $MV21 $MV22 #MV23 #MV24 #MV25 #MV26 #MV27 #MV28 #MV29 #MV30 
    #MV31 $MV32 #MV33 $MV34 $MV35 $MV36 $MV37 $MV38 $MV39 $MV40 #MV41 $MV42 #MV43 $MV44 $MV45 $MV46 $MV47 $MV48 $MV49 FROM MPSLP_ED(0)
        
        
    IF $MV17      =   '' OR $MV17      =   ' '
        LET     $MV17      =   ''
    END-IF
    IF $MV18      =   '' OR $MV18      =   ' '
        LET     $MV18      =   ''
    END-IF
    IF $MV19      =   '' OR $MV19      =   ' '
        LET     $MV19      =   ''
    END-IF
    IF $MV20      =   '' OR $MV20      =   ' '
        LET     $MV20      =   ''
    END-IF
    IF $MV21      =   '' OR $MV21      =   ' '
        LET     $MV21      =   ''
    END-IF
    IF $MV22      =   '' OR $MV22      =   ' '
        LET     $MV22      =   ' '
    END-IF
    IF $MV32      =   '' OR $MV32      =   ' '
        LET     $MV32      =   ' '
    END-IF
    IF $MV34      =   '' OR $MV34      =   ' '
        LET     $MV34      =   ' '
    END-IF
    IF $MV35      =   '' OR $MV35      =   ' '
        LET     $MV35      =   ' '
    END-IF
    IF $MV36      =   '' OR $MV36      =   ' '
        LET     $MV36      =   ' '
    END-IF
    IF $MV37      =   '' OR $MV37      =   ' '
        LET     $MV37      =   ' '
    END-IF
    IF $MV38      =   '' OR $MV38      =   ' '
        LET     $MV38      =   ' '
    END-IF
    IF $MV39      =   '' OR $MV39      =   ' '
        LET     $MV39      =   ' '
    END-IF
    IF $MV40      =   '' OR $MV40      =   ' '
        LET     $MV40      =   ' '
    END-IF
    IF $MV42      =   '' OR $MV42      =   ' '
        LET     $MV42      =   ' '
    END-IF
    IF $MV44      =   '' OR $MV44      =   ' '
        LET     $MV44      =   ' '
    END-IF
    IF $MV45      =   '' OR $MV45      =   ' '
        LET     $MV45      =   'N'
    END-IF
    IF $MV46      =   '' OR $MV46      =   ' '
        LET     $MV46      =   'Y'
    END-IF
    IF $MV47      =   '' OR $MV47      =   ' '
        LET     $MV47      =   'N'
    END-IF
    IF $MV48      =   '' OR $MV48      =   ' '
        LET     $MV48      =   'Y'
    END-IF
    IF $MV49      =   '' OR $MV49      =   ' '
        LET     $MV49      =   'Y'
    END-IF
    
    IF $GPcheck_field_exists = 'Y' OR $_GPcheck_field_exists = 'Y'
    
begin-sql on-error=SQL-Error
INSERT INTO PS_GP_MPSLP_STGED
(
[$GPFieldListed]
) VALUES 
($MV1,
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
#MV7, 
$MV8, 
$MV9, 
#MV10,
#MV11,
$MV12,
$MV13,
#MV14,
#MV15,
#MV16,
$MV17,
$MV18,
$MV19,
$MV20,
$MV21,
$MV22,
#MV23,
#MV24,
#MV25,
#MV26,
#MV27,
#MV28,
#MV29,
#MV30,
#MV31,
$MV32,
#MV33,
$MV34,
$MV35,
$MV36,
$MV37,
$MV38,
$MV39,
$MV40,
#MV41,
$MV42,
#MV43,
$MV44,
$MV45,
$MV46,
$MV47,
$MV48,
$MV49 
);

END-SQL

    ELSE
    
begin-sql on-error=SQL-Error
INSERT INTO PS_GP_MPSLP_STGED
(
[$GPFieldListed]
) VALUES 
($MV1,
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
#MV7, 
$MV8, 
$MV9, 
#MV10,
#MV11,
$MV12,
$MV13,
#MV14,
#MV15,
#MV16,
$MV17,
$MV18,
$MV19,
$MV20,
$MV21,
$MV22,
#MV23,
#MV24,
#MV25,
#MV26,
#MV27,
#MV28,
#MV29,
#MV30,
#MV31,
$MV32,
#MV33,
$MV34,
$MV35,
$MV36,
$MV37,
$MV38,
$MV39,
$MV40,
#MV41,
$MV42,
#MV43,
$MV44 
);

END-SQL

    END-IF
    ! Initialize the array values after inserting the data.
    PUT 0 0 '' '' '' '' '' ' ' 0 0 0 0 0 0 0 0 0 ' ' 0 ' ' ' ' ' ' ' ' ' ' ' ' ' ' 0 ' ' 0 ' ' 'N' 'Y' 'N' 'Y' 'Y' INTO MPSLP_ED(0) ED_ASSIGN_INSTANCE PI_INSTANCE PRD_BGN_DT PRD_END_DT SEG_BGN_DT 
    SEG_END_DT PYMT_DT  RUN_TYPE CALC_RSLT_VAL CALC_ADJ_VAL CALC_DELTA_VAL BASE_RSLT_VAL BASE_ADJ_VAL RATE_RSLT_VAL UNIT_RSLT_VAL UNIT_ADJ_VAL PCT_RSLT_VAL RECIPIENT_ID RECIPIENT_TAG USER_FLD1 USER_FLD2  
    USER_FLD3 USER_FLD4 USER_FLD5 USER_FLD6 GP_MPSLP_SECTION GP_MPSLP_SPRNT_ORD GP_MPSLP_SUBSECTN GP_MPSLP_PRNT_ORD GP_MPSLP_PIN_DESCR GP_MPSLP_DISP_ZERO GP_MPSLP_RET_ADJ GP_MPSLP_SUM_INST 
    GP_MPSLP_ADD_TOTAL GP_MPSLP_DISP_PYSL                                                                                                           
    
    END-IF
    
End-Procedure !insert_mpslp_ernded_row

!************************************************************************
! Procedure: insert_mpslp_acum_row                                  *
! DesCr: Use this procedure to insert control data to Mob Payslip Header*
! PS_GP_MPSLP_STGACM table                                              *
!----------------------------------                                     *
!                                                                       *
!   Input:      EMPLID                      $MV1                        *
!               CAL_RUN_ID                  $MV2                        *
!               EMPL_RCD                    #MV3                        *
!               GP_PAYGROUP                 $MV4                        *
!               CAL_ID                      $MV5                        *
!               ORIG_CAL_RUN_ID             $MV6                        *
!               GP_PSLP_SRCPRODUCT          $MV7                        *
!               GP_PSLP_ID                  $MV8                        *
!               RSLT_SEG_NUM                #MV9                        *
!               PIN_NUM                     #MV10                       *
!               EMPL_RCD_ACUM               #MV11                       *
!               ACM_FROM_DT                 $MV12                       *
!               ACM_THRU_DT                 $MV13                       *
!               SEQ_NUM8                    #MV14                       *
!               PIN_ELEM_GRP_NUM            #MV15                       *
!               SLICE_BGN_DT                $MV16                       *
!               SLICE_END_DT                $MV17                       *
!               SEG_BGN_DT                  $MV18                       *
!               SEG_END_DT                  $MV19                       *
!               PRD_BGN_DT                  $MV20                       *
!               PRD_END_DT                  $MV21                       *
!               PYMT_DT                     $MV22                       *
!               RUN_TYPE                    $MV23                       *
!               USER_KEY1                   $MV24                       *
!               USER_KEY2                   $MV25                       *
!               USER_KEY3                   $MV26                       *
!               USER_KEY4                   $MV27                       *
!               USER_KEY5                   $MV28                       *
!               USER_KEY6                   $MV29                       *
!               COUNTRY                     $MV30                       *
!               CALC_RSLT_VAL               #MV31                       *
!               CALC_DELTA_VAL              #MV32                       *
!               CALC_VAL                    #MV33                       *
!               GP_MPSLP_SECTION            $MV34                       *
!               GP_MPSLP_SPRNT_ORD          #MV35                       *
!               GP_MPSLP_SUBSECTN           $MV36                       *
!               GP_MPSLP_PRNT_ORD           #MV37                       *
!               GP_MPSLP_PIN_DESCR          $MV38                       *
!               GP_MPSLP_DISP_ZERO          $MV39                       *
!               GP_MPSLP_RET_ADJ            $MV40                       *
!               GP_MPSLP_SUM_INST           $MV41                       *
!               GP_MPSLP_ADD_TOTAL          $MV42                       *
!               GP_MPSLP_DISP_PYSL          $MV43                       *
!               GP_BASE                     #MV44                       *
!               GP_UNIT                     #MV45                       *
!               GP_RATE                     #MV46                       *
!               GP_PERCENT                  #MV47                       *
!                                                                      *
! Output:  <none>                                                      *
! Comments: The values requires to be pass to an array in the zeroth row *
! only, as it's for row by row processing so one row will be passed      *
! to an array.                                                           *
! Example: to pass an value into a array                                 *
! LET MPSLP_ACUM.EMPLID(0) =  $EMPLID                                        *
!                                                                      *
!***********************************************************************

Begin-Procedure insert_mpslp_acum_row
    
    Let $sql-statement = 'GPMPSLP.SQC, insert_mpslp_acum_row, Insert, PS_GP_MPSLP_STGACM'
    
        LET     $MV16      =   ''
        LET     $MV17      =   ''
        LET     $MV18      =   ''
        LET     $MV19      =   ''
        LET     $MV20      =   ''
        LET     $MV21      =   ''
        LET     $MV22      =   ''
        LET     $MV23      =   ' '
        LET     $MV24      =   ' '
        LET     $MV25      =   ' '
        LET     $MV26      =   ' '
        LET     $MV27      =   ' '
        LET     $MV28      =   ' '
        LET     $MV29      =   ' '
        LET     $MV30      =   ' '
        LET     #MV31      =   0
        LET     #MV32      =   0
        LET     #MV33      =   0
        LET     $MV34      =   ' '
        LET     #MV35      =   0
        LET     $MV36      =   ' '
        LET     #MV37      =   0
        LET     $MV38      =   ' '
        LET     $MV39      =   'N'
        LET     $MV40      =   'Y'
        LET     $MV41      =   'N'
        LET     $MV42      =   'Y'
        LET     $MV43      =   'Y'
        LET     #MV44      =   0
        LET     #MV45      =   0
        LET     #MV46      =   0
        LET     #MV47      =   0
   
    IF $GPinit_mob_payslp = 'Y'   OR $_GPinit_mob_payslp = 'Y' 
    
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 $MV7 $MV8 #MV9 #MV10 #MV11 $MV12 $MV13 #MV14 #MV15 $MV16 $MV17 $MV18 $MV19 $MV20 $MV21 $MV22 $MV23 $MV24 $MV25 $MV26 
    $MV27 $MV28 $MV29 $MV30 #MV31 #MV32 #MV33 $MV34 #MV35 $MV36 #MV37 $MV38 $MV39 $MV40 $MV41 $MV42 $MV43 #MV44 #MV45 #MV46 #MV47 FROM MPSLP_ACUM(0)  
          
    IF $MV16      =   '' OR $MV16      =   ' '
        LET     $MV16      =   ''
    END-IF
    IF $MV17      =   '' OR $MV17      =   ' '
        LET     $MV17      =   ''
    END-IF
    IF $MV18      =   '' OR $MV18      =   ' '
        LET     $MV18      =   ''
    END-IF
    IF $MV19      =   '' OR $MV19      =   ' '
        LET     $MV19      =   ''
    END-IF
    IF $MV20      =   '' OR $MV20      =   ' '
        LET     $MV20      =   ''
    END-IF
    IF $MV21      =   '' OR $MV21      =   ' '
        LET     $MV21      =   ''
    END-IF
    IF $MV22      =   '' OR $MV22      =   ' '
        LET     $MV22      =   ''
    END-IF
    IF $MV23      =   '' OR $MV23      =   ' '
        LET     $MV23      =   ' '
    END-IF
    IF $MV24      =   '' OR $MV24      =   ' '
        LET     $MV24      =   ' '
    END-IF
    IF $MV25      =   '' OR $MV25      =   ' '
        LET     $MV25      =   ' '
    END-IF
    IF $MV26      =   '' OR $MV26      =   ' '
        LET     $MV26      =   ' '
    END-IF
    IF $MV27      =   '' OR $MV27      =   ' '
        LET     $MV27      =   ' '
    END-IF
    IF $MV28      =   '' OR $MV28      =   ' '
        LET     $MV28      =   ' '
    END-IF
    IF $MV29      =   '' OR $MV29      =   ' '
        LET     $MV29      =   ' '
    END-IF
    IF $MV30      =   '' OR $MV30      =   ' '
        LET     $MV30      =   ' '
    END-IF
    IF $MV34      =   '' OR $MV34      =   ' '
        LET     $MV34      =   ' '
    END-IF
    IF $MV36      =   '' OR $MV36      =   ' '
        LET     $MV36      =   ' '
    END-IF
    IF $MV38      =   '' OR $MV38      =   ' '
        LET     $MV38      =   ' '
    END-IF
    IF $MV39      =   '' OR $MV39      =   ' '
        LET     $MV39      =   'N'
    END-IF
    IF $MV40      =   '' OR $MV40      =   ' '
        LET     $MV40      =   'Y'
    END-IF
    IF $MV41      =   '' OR $MV41      =   ' '
        LET     $MV41      =   'N'
    END-IF
    IF $MV42      =   '' OR $MV42      =   ' '
        LET     $MV42      =   'Y'
    END-IF
    IF $MV43      =   '' OR $MV43      =   ' '
        LET     $MV43      =   'Y'
    END-IF
    
     IF $GPcheck_field_exists = 'Y' OR $_GPcheck_field_exists = 'Y'
     
begin-sql on-error=SQL-Error
INSERT INTO PS_GP_MPSLP_STGACM
(
[$GPFieldListacm]
) VALUES 
(
$MV1, 
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
$MV7, 
$MV8, 
#MV9, 
#MV10,
#MV11,
$MV12,
$MV13,
#MV14,
#MV15,
$MV16,
$MV17,
$MV18,
$MV19,
$MV20,
$MV21,
$MV22,
$MV23,
$MV24,
$MV25,
$MV26,
$MV27,
$MV28,
$MV29,
$MV30,
#MV31, 
#MV32, 
#MV33, 
$MV34,
#MV35,
$MV36,
#MV37,
$MV38,
$MV39,
$MV40,
$MV41,
$MV42,
$MV43,
#MV44,
#MV45,
#MV46,
#MV47
);

END-SQL

    else

begin-sql on-error=SQL-Error
INSERT INTO PS_GP_MPSLP_STGACM
(
[$GPFieldListacm]
) VALUES 
(
$MV1, 
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
$MV7, 
$MV8, 
#MV9, 
#MV10,
#MV11,
$MV12,
$MV13,
#MV14,
#MV15,
$MV16,
$MV17,
$MV18,
$MV19,
$MV20,
$MV21,
$MV22,
$MV23,
$MV24,
$MV25,
$MV26,
$MV27,
$MV28,
$MV29,
$MV30,
#MV31, 
#MV32, 
#MV33, 
$MV34,
#MV35,
$MV36,
#MV37,
$MV38
);

END-SQL

    END-IF
    ! Initialize the array values after inserting the data.
    PUT '' '' '' '' '' '' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' 0 0 0 ' ' 0 ' ' 0 ' ' 'N' 'Y' 'N' 'Y' 'Y' 0 0 0 0 INTO MPSLP_ACUM(0) SLICE_END_DT  SEG_BGN_DT SEG_END_DT PRD_BGN_DT PRD_END_DT PYMT_DT RUN_TYPE 
    USER_KEY1 USER_KEY2 USER_KEY3 USER_KEY4 USER_KEY5 USER_KEY6 COUNTRY CALC_RSLT_VAL CALC_DELTA_VAL CALC_VAL GP_MPSLP_SECTION  GP_MPSLP_SPRNT_ORD GP_MPSLP_SUBSECTN GP_MPSLP_PRNT_ORD GP_MPSLP_PIN_DESCR 
    GP_MPSLP_DISP_ZERO GP_MPSLP_RET_ADJ GP_MPSLP_SUM_INST  GP_MPSLP_ADD_TOTAL GP_MPSLP_DISP_PYSL GP_BASE GP_UNIT GP_RATE GP_PERCENT
    
    END-IF
End-Procedure !insert_mpslp_acum_row


!*************************************************************************
! Procedure: insert_mpslp_msg_row                                        *
! Descr: Use this procedure to insert data to Mobile Payslip Message     *
! PS_GP_MPSLP_STGMSG table                                               *
!------------------------------------------------------------------------*
!                                                                        *
! Input:    EMPLID                  $MV1                                 *
!           CAL_RUN_ID              $MV2                                 *
!           EMPL_RCD                #MV3                                 *
!           GP_PAYGROUP             $MV4                                 *
!           CAL_ID                  $MV5                                 *
!           ORIG_CAL_RUN_ID         $MV6                                 *
!           RSLT_SEG_NUM            #MV7                                 *
!           GP_CNTRY_PSLP_MSG       $MV8                                 *
!           GP_PSLP_MSG_NBR         #MV9                                 *
!           GP_PSLP_MSG_PRIORITY    #MV10                                *
!           GP_PSLP_DTA_SRC         #MV11                                *
!           GP_PSLP_MSG_TEXT        $MV12                                *
!           $CoreMsgFlag            Payslip Message Flag                 *
!                                     - "Y"      - Core Messages         *
!                                     - "N" / "" - Country Extension     *
!                                                                        *
! Output:  <none>                                                        *
! Comments: The values requires to be pass to an array in the zeroth row *
! only, as it's for row by row processing so one row will be passed      *
! to an array.                                                           *
! Example: to pass an value into a array                                 *
! LET MPSLP_MSG.EMPLID(0) =  $EMPLID                                     *
! There 7 common key fields in the header records which are being passed *
! into the earning/deductions & accumulator array here only.             *
! No need to pass it again.                                              * 
!*************************************************************************

Begin-Procedure insert_mpslp_msg_row($CoreMsgFlag)

    IF ( $_GPmobmsg_check = 'Y'  OR  $GPmobmsg_check = 'Y' )

       ! Process Country Extension (CE) payslip messages.
       IF ( $CoreMsgFlag = 'N' OR ltrim($CoreMsgFlag, ' ' ) = '' )
           LET MPSLP_MSG.GP_PSLP_DTA_SRC(0) = 'CE'   ! Country Extension Message 

           do Insert_PayslipMsg_Values
       END-IF

       ! Process core payslip messages
       IF $CoreMsgFlag = 'Y'
          GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 #MV9 #MV10 $MV11 $MV12 FROM MPSLP_MSG(0)

          ! Clear the Core message Array
          CLEAR-ARRAY name=PSLP_MSG_TEXT
          LET #MsgCount = -1
          
          Let $sql-statement = 'GPMPSLP.SQC, insert_mpslp_msg_row, Select, PS_GP_PSLP_MSG_WA, PS_GP_PSLP_MSG'

          ! Get the Core Payslip Payroll Calculation messages for a Payee
begin-SELECT on-error=SQL-Error
A.GP_PSLP_MSG_NBR
A.GP_CNTRY_PSLP_MSG
B.GP_PSLP_MSG_TEXT
B.GP_PSLP_MSG_PRIOTY
A.RSLT_SEG_NUM

    let #Msg_Nbr = &A.GP_PSLP_MSG_NBR

    if #Msg_nbr <> 0
       LET MPSLP_MSG.GP_PSLP_MSG_NBR(0)      = #Msg_Nbr
       LET MPSLP_MSG.GP_CNTRY_PSLP_MSG(0)    = &A.GP_CNTRY_PSLP_MSG
       LET MPSLP_MSG.GP_PSLP_MSG_PRIORITY(0) = &B.GP_PSLP_MSG_PRIOTY
       LET MPSLP_MSG.GP_PSLP_MSG_TEXT(0)     = &B.GP_PSLP_MSG_TEXT
       LET MPSLP_MSG.GP_PSLP_DTA_SRC(0)      = 'CC'
       LET MPSLP_MSG.RSLT_SEG_NUM(0)         = &A.RSLT_SEG_NUM
       
       do Insert_PayslipMsg_Values

       let #MsgCount = #MsgCount + 1
       if  #MsgCount < {MAX_COREMSG}
          LET PSLP_MSG_TEXT.MSGNBR(#MsgCount)      = #Msg_Nbr
          LET PSLP_MSG_TEXT.MSGCOUNTRY(#MsgCount)  = &A.GP_CNTRY_PSLP_MSG
          LET PSLP_MSG_TEXT.MSGPRIORITY(#MsgCount) = &B.GP_PSLP_MSG_PRIOTY
          LET PSLP_MSG_TEXT.MSGTEXT(#MsgCount)     = &B.GP_PSLP_MSG_TEXT
       end-if
    end-if

FROM  PS_GP_PSLP_MSG_WA A
    , PS_GP_PSLP_MSG B
WHERE A.EMPLID            = $MV1
  AND A.CAL_RUN_ID        = $MV2
  AND A.EMPL_RCD          = #MV3
  AND A.GP_PAYGROUP       = $MV4
  AND A.CAL_ID            = $MV5
  AND (    A.GP_CNTRY_PSLP_MSG = $MV8
        OR A.GP_CNTRY_PSLP_MSG = 'ALL'
      )
  AND A.GP_CNTRY_PSLP_MSG = B.GP_CNTRY_PSLP_MSG
  AND A.GP_PSLP_MSG_NBR   = B.GP_PSLP_MSG_NBR
ORDER BY A.GP_CNTRY_PSLP_MSG, B.GP_PSLP_MSG_PRIOTY
end-select

          ! Get the Payslip Processing Core Payslip Processing Messages
          Let $sql-statement = 'GPMPSLP.SQC, insert_mpslp_msg_row, Select, PS_GP_PSLP_MSG'

begin-SELECT on-error=SQL-Error
PMSG.GP_CNTRY_PSLP_MSG
PMSG.GP_PSLP_MSG_NBR
PMSG.GP_PSLP_MSG_AVAIL
PMSG.CAL_RUN_ID
PMSG.DEFN_ASOFDT_OPTN
PMSG.GP_FROM_DT
PMSG.GP_TO_DT
PMSG.GP_PSLP_POPUL_SEL
PMSG.EMPLID
PMSG.GROUP_LIST_ID
PMSG.GB_GROUP_ID
PMSG.GP_PSLP_MSG_PRIOTY
PMSG.GP_PSLP_MSG_TEXT

    Let $CorePslpMsgWhere = ''
    
    ! Calendar Group
    If &PMSG.GP_PSLP_MSG_AVAIL = 'C' 
       Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.CAL_RUN_ID = ' || '''' || &PMSG.CAL_RUN_ID || ''''
    End-If

    ! Payee
    If &PMSG.GP_PSLP_POPUL_SEL = 'E' 
       Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.EMPLID = ' || '''' || &PMSG.EMPLID || ''''
    End-If

    ! Human Resource Group
    If &PMSG.GP_PSLP_POPUL_SEL = 'G' 
       Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.EMPLID IN (SELECT GRP.EMPLID FROM PS_GB_GRP_RES_TBL GRP WHERE GRP.GB_GROUP_ID = ' || '''' || &PMSG.GB_GROUP_ID || '''' || ')'
    End-If

    ! Global Payroll Payee List
    If &PMSG.GP_PSLP_POPUL_SEL = 'P' 
       Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.EMPLID IN (SELECT GRP.EMPLID FROM PS_GP_GRP_LIST_DTL GRP WHERE GRP.GROUP_LIST_ID = ' || '''' || &PMSG.GROUP_LIST_ID || '''' || ')'
    End-If

   ! Selection is based on Date Range.
   If &PMSG.GP_PSLP_MSG_AVAIL = 'D' 
   
      Evaluate &PMSG.DEFN_ASOFDT_OPTN
      When = 'P'     ! Payment Date
         If Not isnull(&PMSG.GP_FROM_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PYMT_DT >= ' || '''' || &PMSG.GP_FROM_DT || ''''
         End-If

         If Not isnull(&PMSG.GP_TO_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PYMT_DT <= ' || '''' || &PMSG.GP_TO_DT || ''''
         End-If

         Break
      When = 'B'     ! Calendar Period Begin Date
         If Not isnull(&PMSG.GP_FROM_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PRD_BGN_DT >= ' || '''' || &PMSG.GP_FROM_DT || ''''
         End-If

         If Not isnull(&PMSG.GP_TO_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PRD_BGN_DT <= ' || '''' || &PMSG.GP_TO_DT || ''''
         End-If

         Break
      When = 'E'     ! Calendar Period End Date
         If Not isnull(&PMSG.GP_FROM_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PRD_END_DT >= ' || '''' || &PMSG.GP_FROM_DT || ''''
         End-If

         If Not isnull(&PMSG.GP_TO_DT) 
            Let $CorePslpMsgWhere = $CorePslpMsgWhere || ' AND HDR.PRD_END_DT <= ' || '''' || &PMSG.GP_TO_DT || ''''
         End-If

         Break
      End-Evaluate

   End-If
   
   LET MPSLP_MSG.GP_CNTRY_PSLP_MSG(0)    = &PMSG.GP_CNTRY_PSLP_MSG
   LET MPSLP_MSG.GP_PSLP_MSG_NBR(0)      = &PMSG.GP_PSLP_MSG_NBR
   LET MPSLP_MSG.GP_PSLP_MSG_PRIORITY(0) = &PMSG.GP_PSLP_MSG_PRIOTY
   LET MPSLP_MSG.GP_PSLP_DTA_SRC(0)      = 'CP'
   LET MPSLP_MSG.GP_PSLP_MSG_TEXT(0)     = &PMSG.GP_PSLP_MSG_TEXT
   
   do Store-Payslip-Messages($CorePslpMsgWhere, #MsgCount)
   
FROM PS_GP_PSLP_MSG PMSG
WHERE PMSG.GP_PSLP_MSG_METHOD    = 'P'           ! Payslip Processing Messages
  AND PMSG.EFF_STATUS            = 'A'           ! Active
  AND (   PMSG.GP_CNTRY_PSLP_MSG = $MV8          ! Specific Country
       OR PMSG.GP_CNTRY_PSLP_MSG = 'ALL'         ! All Countries    
      )
ORDER BY PMSG.GP_CNTRY_PSLP_MSG, PMSG.GP_PSLP_MSG_PRIOTY
end-select

       END-IF   ! For $CoreMsgFlag = 'Y'

       ! Initialize the Payslip Message Array.
       PUT 0 0 ' ' ' ' ' '  INTO MPSLP_MSG(0) GP_PSLP_MSG_NBR GP_PSLP_MSG_PRIORITY GP_PSLP_DTA_SRC GP_PSLP_MSG_TEXT GP_CNTRY_PSLP_MSG

    END-IF      ! For $GPmobmsg_check = 'Y'

End-Procedure !insert_mpslp_msg_row
!
!
!***************************************************************************
! Procedure: Store-Payslip-Messages                                        *
! Descr: Use this procedure to validate whether a selected Payee has       *
!        any active Payslip Messages using the  PS_GP_MPSLP_STGHDR table   *
!        amd then insert those messages in Mobile payslip messages table.  *
!                                                                          *
! Input: $CorePslpMsgWhere - Where clause / data filtering criteria        *
!        #MsgCount         - Message count - Reference variable            *
!--------------------------------------------------------------------------*
begin-procedure Store-Payslip-Messages($CorePslpMsgWhere, :#MsgCount)

   
   GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 #MV9 #MV10 $MV11 $MV12 FROM MPSLP_MSG(0)

   Let $sql-statement = 'GPMPSLP.SQC, Store-Payslip-Messages, Select, PS_GP_MPSLP_STGHDR'

begin-SELECT on-error=SQL-Error
HDR.EMPLID

    do Insert_PayslipMsg_Values

    let #MsgCount = #MsgCount + 1
    if  #MsgCount < {MAX_COREMSG}
       LET PSLP_MSG_TEXT.MSGNBR(#MsgCount)      = #MV9
       LET PSLP_MSG_TEXT.MSGTEXT(#MsgCount)     = $MV12
       LET PSLP_MSG_TEXT.MSGCOUNTRY(#MsgCount)  = $MV8
       LET PSLP_MSG_TEXT.MSGPRIORITY(#MsgCount) = #MV10
    end-if

FROM PS_GP_MPSLP_STGHDR HDR
WHERE HDR.EMPLID          = $MV1
  AND HDR.CAL_RUN_ID      = $MV2
  AND HDR.EMPL_RCD        = #MV3
  AND HDR.GP_PAYGROUP     = $MV4
  AND HDR.CAL_ID          = $MV5
  AND HDR.ORIG_CAL_RUN_ID = $MV6
  AND HDR.RSLT_SEG_NUM    = #MV7 
[$CorePslpMsgWhere]

end-select

end-procedure Store-Payslip-Messages
!
!
!***************************************************************************
! Procedure: Insert_PayslipMsg_Values                                      *
! Descr: Use this procedure to insert data to Mobile Payslip Message table *
! PS_GP_MPSLP_STGMSG table                                                 *
!--------------------------------------------------------------------------*
Begin-Procedure Insert_PayslipMsg_Values

    Let $sql-statement = 'GPMPSLP.SQC, Insert_PayslipMsg_Values, Insert, PS_GP_MPSLP_STGMSG' 

    LET   $MV8   =  ' '
    LET   #MV9   =  0
    LET   #MV10  =  0
    LET   $MV11  =  ' '
    LET   $MV12  =  ' '

    ! Get the field values from the Mobile payslip Array.
    GET $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 #MV9 #MV10 $MV11 $MV12 FROM MPSLP_MSG(0)

    IF $MV8 = '' OR $MV8 = ' '
        LET $MV8  =   ' '
    END-IF

    IF $MV11 = '' OR $MV11 = ' '
        LET  $MV11 = ' '
    END-IF

    IF $MV12 = '' OR $MV12 = ' '
        LET  $MV12 = ' '
    END-IF

#debug6 show 'Inserting data in PS_GP_MPSLP_STGMSG with values '  $MV1 $MV2 #MV3 $MV4 $MV5 $MV6 #MV7 $MV8 #MV9 #MV10 $MV11 $MV12

begin-sql on-error=SQL-Error

INSERT INTO PS_GP_MPSLP_STGMSG
(
[$GPFieldListmsg]
) VALUES 
($MV1, 
$MV2, 
#MV3, 
$MV4, 
$MV5, 
$MV6, 
#MV7, 
$MV8, 
#MV9, 
#MV10,
$MV11,
$MV12
);

END-SQL

End-Procedure Insert_PayslipMsg_Values
!
!
!***********************************************************************
! For ePay Purposes: Mobile Payslip  - Update the STATISTICS            *
!***********************************************************************

Begin-Procedure Update_Stats
    
   ! IF $GPinit_mob_payslp = 'Y'   
    ! #IFDEF ORACLE
! begin-SQL on-error=SQL-Error
! BEGIN
! DBMS_STATS.GATHER_TABLE_STATS (ownname=> 'EMDBO', tabname=>'PS_GP_MPSLP_STGHDR', estimate_percent=>20, method_opt=> 'FOR ALL COLUMNS SIZE AUTO',cascade=>TRUE);;
! DBMS_STATS.GATHER_TABLE_STATS (ownname=> 'EMDBO', tabname=>'PS_GP_MPSLP_STGED', estimate_percent=>20, method_opt=> 'FOR ALL COLUMNS SIZE AUTO',cascade=>TRUE);;
! DBMS_STATS.GATHER_TABLE_STATS (ownname=> 'EMDBO', tabname=>'PS_GP_MPSLP_STGACM', estimate_percent=>20, method_opt=> 'FOR ALL COLUMNS SIZE AUTO',cascade=>TRUE);;
! END;
! end-SQL

!IF $_GPmobmsg_check = 'Y'
! begin-SQL on-error=SQL-Error
! BEGIN
! DBMS_STATS.GATHER_TABLE_STATS (ownname=> 'EMDBO', tabname=>'PS_GP_MPSLP_STGMSG', estimate_percent=>20, method_opt=> 'FOR ALL COLUMNS SIZE AUTO',cascade=>TRUE);;
! END;
! end-SQL
!end-if
    ! #ENDIF
    
    ! #IFDEF MSS
! begin-SQL on-error=SQL-Error
! UPDATE STATISTICS PS_GP_MPSLP_STGHDR;
! UPDATE STATISTICS PS_GP_MPSLP_STGED;
! UPDATE STATISTICS PS_GP_MPSLP_STGACM;
! end-SQL
!IF $_GPmobmsg_check = 'Y'
! begin-SQL on-error=SQL-Error
! UPDATE STATISTICS PS_GP_MPSLP_STGMSG;
! end-SQL
!end-if
    ! #ENDIF
        
!   #IFDEF SYBASE
!   begin-SQL on-error=SQL-Error
! UPDATE ALL STATISTICS PS_GP_MPSLP_STGHDR;
! UPDATE ALL STATISTICS PS_GP_MPSLP_STGACM;
! UPDATE ALL STATISTICS PS_GP_MPSLP_STGED;
! end-SQL
!IF $_GPmobmsg_check = 'Y'
! begin-SQL on-error=SQL-Error
! UPDATE ALL STATISTICS PS_GP_MPSLP_STGMSG;
! end-SQL
!end-if
!   #ENDIF
        
!   #IFDEF DB2 UNIX
! begin-SQL on-error=SQL-Error
! RUNSTATS ON TABLE PS_GP_MPSLP_STGHDR AND INDEXES ALL;
! RUNSTATS ON TABLE PS_GP_MPSLP_STGED AND INDEXES ALL;
! RUNSTATS ON TABLE PS_GP_MPSLP_STGACM AND INDEXES ALL;
! end-SQL
!IF $_GPmobmsg_check = 'Y'
! begin-SQL on-error=SQL-Error
! RUNSTATS ON TABLE PS_GP_MPSLP_STGMSG AND INDEXES ALL;
! end-SQL
!end-if
!   #ENDIF

    ! #IFDEF INFORMIX   
! begin-SQL on-error=SQL-Error
! UPDATE STATISTICS MEDIUM FOR TABLE PS_GP_MPSLP_STGHDR;
! UPDATE STATISTICS MEDIUM FOR TABLE PS_GP_MPSLP_STGACM;
! UPDATE STATISTICS MEDIUM FOR TABLE PS_GP_MPSLP_STGED;
! end-SQL

!IF $_GPmobmsg_check = 'Y'
! begin-SQL on-error=SQL-Error
! UPDATE STATISTICS MEDIUM FOR TABLE PS_GP_MPSLP_STGMSG;
! end-SQL
!end-if
!   #ENDIF


! END-IF
    
end-procedure

