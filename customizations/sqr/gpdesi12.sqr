!***********************************************************************
!  configurable SQR, see procedure local_setup,
!  GPDESI12.SQR is the MASTER FILE
!
!  GPDESI11:   Entgeltnachweis für Berufsgenossenschaft                *
!  GPDESI12:   Einzelnachweis für Berufsgenossenschaft                 *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:36:47                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
! wdu05-891b1: codeline merge 2005-05-12 - unch881
#include 'setenv.sqc' !set environment

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main-Before
  do Stdapi-Term
end-Program

#include 'setup31.sqc'

!************************************************
begin-procedure Init-Report

  move 'GPDESI12' to $ReportID
  move 'Einzelnachweis für Berufsgenossenschaft' to $ReportTitle

  do local_setup      ! override titles if required

  display $ReportTitle
  display ' '

  do Stdapi-Init

  if $prcs_process_instance = ''
     input $Ctl_PRD_BD 'Datum von'
     input $Ctl_PRD_ED 'Datum bis'
     input $Pay_Entity 'Unternehmen'
     input #Ctl_Empl_Type_St 'Mitarbeiterart' type=number
  else
     do Get-Report-Parameters
  end-if

end-procedure




!************************************************
begin-procedure Get-Values
let $language_cd     = $PRCS_LANGUAGE_CD
let $Ctl_PRD_BD     = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_FROM_DT,' ')
let $Ctl_PRD_ED     = RTRIM(&GPDE_RUN_CNTL.GPDE_RC_TO_DT,' ')
let $Ctl_PayEntity     = RTRIM(&GPDE_RUN_CNTL.PAY_ENTITY,' ')
let #Ctl_Empl_Type_St    = &GPDE_RUN_CNTL.GPDE_RC_EE_TYPE_ST
end-procedure




!************************************************
begin-procedure Init-Layout

#define col1   1
#define col2   20
#define col2b  32
#define col3   35
#define col31  86
#define col4   47
#define col41  55
#define col5   73
#define col51  83
#define col52  86
#define col6   88

end-procedure




!************************************************
begin-heading  10
uppercase $ReportTitle
#Include 'stdhdgtr.sqc'

do Format-DateTime($Ctl_PRD_BD,$Ctl_PRD_BD1,{DEFDATE},'','')
do Format-DateTime($Ctl_PRD_ED,$Ctl_PRD_ED1,{DEFDATE},'','')

print 'Datum von: '             (3,1)
print $Ctl_PRD_BD1              (0,0)
print $EuroString      (,1)  center
print 'Datum bis: '             (4,1)
print $Ctl_PRD_ED1              (0,0)
print $cold                     (5,{col4})
print 'Unternehmen: '           (6,{col1})
print $Ctl_PayEntity            (0,0)
print 'BG: '                    (6,{col2b})
print $ACCIDENT_INS             (0,0)
print 'MitgliedsNr: '           (0,{col41})
print $SI_Accident              (0,+1)
print 'Jahr.-Verdienst-Grenze: '(,{col31})
print $Max_Acc_Inc              (,)
print '_' (+1,1,132) fill
print 'Gefahrtarifstelle'       (+1,{col1})
print 'Pers.-Nr'                (,{col2})
Print 'BV'                      (,{col2b})
print 'Eintrittsdatum'          (,{col3})
print 'Austrittsdatum'          (,+2)
print 'Arbeitsstunden'          (,+2)
print 'Gesamtbrutto'            (,{col52})
print 'Meldebrutto'             (,+4)
print 'Abr.periode'             (,+6)
print '(ungekürzt)'             (+1,{col52})
print '_' (+1,1,132) fill

end-heading




!************************************************

Begin-Procedure Process-Main-Before

begin-sql
DELETE FROM PS_GPDE_RP_COOP_WK
end-sql



let $Nodata = 'Y'
Evaluate #Ctl_Empl_Type_St
  When = 1              !both
     let $cold ='Auswertung für Angestellte'
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND PBD.PERFORM_GROUP_GER IS NOT NULL
                        AND PBD.PERFORM_GROUP_GER <> '''||' '||'''      '
     let $Job_Clause_sum = 'AND SUMX.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND SUMX.PERFORM_GROUP_GER IS NOT NULL
                        AND SUMX.PERFORM_GROUP_GER <> '''||' '||'''      '
         do StoreLimitedAmounts
         do Process-Main-wb
! -- no difference at the moment
!     let $cold ='Auswertung für Arbeiter'
!     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER LIKE '''||'A%'||'''   '
!     let $Job_Clause_SUM = 'AND SUMX.PERFORM_GROUP_GER LIKE '''||'A%'||'''   '
!         do StoreLimitedAmounts
!         do Process-Main-wb
    Break
  When = 2              !white-collar
     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND PBD.PERFORM_GROUP_GER IS NOT NULL
                        AND PBD.PERFORM_GROUP_GER <> '''||' '||'''      '
     let $Job_Clause_SUM = 'AND SUMX.PERFORM_GROUP_GER NOT LIKE '''||'A%'||'''
                        AND SUMX.PERFORM_GROUP_GER IS NOT NULL
                        AND SUMX.PERFORM_GROUP_GER <> '''||' '||'''      '
     let $cold ='Auswertung für Angestellte '
         do StoreLimitedAmounts
         do Process-Main-wb
    Break
  When = 3              !blue-collar

     let $Job_Clause = 'AND PBD.PERFORM_GROUP_GER LIKE '''||'A%'||'''   '
     let $Job_Clause_SUM = 'AND SUMX.PERFORM_GROUP_GER LIKE '''||'A%'||'''   '
     let $cold ='Auswertung für Arbeiter '
         do StoreLimitedAmounts
         do Process-Main-wb
    Break
  When-Other
    Break
End-Evaluate
do Print_Info_User
End-Procedure Process-Main-Before








!******************************************************************
begin-procedure Print_Info_User
!Display, if Reqired input on Run Control failed
if $Nodata = 'Y'
   display '-----------------------------------------------------'
   display 'No Output file for the folowing input:'
   display '   Pay Entity: ' noline
   display $Ctl_PayEntity
   display '   From Date: ' noline
   display $Ctl_PRD_BD
   display '   To Date: ' noline
   display $Ctl_PRD_ED
   display '   Employee Type Condition:' noline
   Evaluate #Ctl_Empl_Type_St
  When = 1              !both
     display '1 -->(The value from the field PERFORM_GROUP_GER in the table GPDE_RP_0001 '
  display '   must be like "A%" or not empty)'
     Break

  When = 2              !white-collar
     display '2 -->(The value from the field PERFORM_GROUP_GER in the table GPDE_RP_0001 '
  display '   must be not like "A%" or not empty)'
  break
  When = 3              !blue-collar
     display '3 -->(The value from the field PERFORM_GROUP_GER in the table GPDE_RP_0001 must be like "A%")'
    Break
  When-Other
    display '" " -->Please select other value'
    Break
  End-Evaluate
   display '-----------------------------------------------------'
end-if
end-procedure





!************************************************
begin-procedure Process-Main-wb
do format-datetime($Ctl_PRD_BD,$Start_Date1,{DEFDATE},'','')
do format-datetime($Ctl_PRD_ED,$Last_Date1,{DEFDATE},'','')
do format-datetime($Ctl_PRD_ED,$LastD,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $LastD >= $Stichtag
 let $EuroString = 'Betragsangaben in EURO'
 let $ToCurrency = 'EUR'
 let $Eur    = ' EUR '
else
 let $EuroString = 'Betragsangaben in DM'
 let $ToCurrency = 'DEM'
 let $Eur    = ' DM '
end-if

let #EmployeeCountByHazard = 0
let $Hazard = ''
let $ACCIDENT_INS = ''
let #BruttoByHazard = 0
let #HoursByHazard = 0
let #AccInsbyHazard = 0
let $SI_Accident = ''
let #BruttoByInsAccount = 0
let #EmployeeCountByInsAccount = 0
let #HoursByInsAccount = 0
let #ThisEmplidBrutto = 0
let #ThisEmplidHours = 0
Let #ThisEmplidAccIns = 0
Let #AccInsbyInsAccount = 0
! -- wdu-jw05: emplid change triggers counter
let $Empl_ID = ' '

let $LastEmplid=''
let #LastEmplRcd= -1
let $temp=''
! to skip first pagebreak
let $LastSiAccidentNum='-x-'
let $LastHazard='-x-'


begin-SELECT
SUMX.ACCIDENT_INS
SUMX.SI_ACCIDENT_NUM
! manual:       () On-xBreak  Print=Never  After= New_Page
SUMX.HAZARD
! manual        () On-xBreak  Print=Never  After= PrintHazardSubtotal

SUMX.EMPLID
SUMX.EMPL_RCD
RP.HIRE_DT
RP.TERMINATION_DT

SUMX.GPDE_AI_GROSS        &GROSS_AMOUNT
SUMX.GPDE_AI_HRS          &HOURS
SUMX.PRD_END_DT
SUMX.SLICE_END_DT
!SUMX.GPDE_SI_MX_ACC_INC
!SUMX.PERFORM_GROUP_GER
    ! On-Break emulation

    let #EmplRcd = &SUMX.EMPL_RCD
    if (($LastEmplid <> &SUMX.EMPLID) or (#LastEmplRcd <> #EmplRcd) or $LastHazard <>  &SUMX.HAZARD )
        ! ----- flush last processed emplid, except the '0th' row.
        if $Empl_ID <> ' '
                do PrintTotalForLastEmplid

                add 1 to #EmployeeCountByHazard
                add 1 to #EmployeeCountByInsAccount
        end-if
        let $LastEmplid = &SUMX.EMPLID
        let #LastEmplRcd = &SUMX.EMPL_RCD
    end-if

    let $temp = &SUMX.HAZARD
    if $temp <> $LastHazard Or $LastSiAccidentNum <> &SUMX.SI_ACCIDENT_NUM
        if '-x-' <> $LastHazard
            ! not on first row
            do PrintHazardSubtotal
        end-if
        let $LastHazard =$temp
    end-if

    let $temp=&SUMX.SI_ACCIDENT_NUM
    if $temp <> $LastSiAccidentNum
        if '-x-'  <> $LastSiAccidentNum
            ! not on first row
            do New_Page
        end-if
        let $LastSiAccidentNum = $temp
    end-if

    ! -- wdu-jw05: new counter logic

    ! -- wdu-881b6:  would print a line for the change from no emplid to first emplid
    !   but $Empl_ID is not populated yet


    let $PrdEndDT              = &SUMX.PRD_END_DT
!    let $Current_Curr          = &SUMX.CURRENCY_CD
!    let $Current_RT_Type       = &SUMX.CUR_RT_TYPE
!    let $Current_DT_EX_RT      = &SUMX.GPDE_ASOF_DT_EX_RT
    let #BruttCalc          = 0
    let #Hours = &HOURS
    let $Empl_ID = &SUMX.EMPLID
    let $SI_Accident = &SUMX.SI_ACCIDENT_NUM         !member number from department
    let $Hazard = &SUMX.HAZARD                       !Gefahrtarifstelle
    let $Hire_DT = &RP.HIRE_DT
    let $Term_DT = &RP.TERMINATION_DT
    let $Slice_end_dt = &SUMX.SLICE_END_DT
    let $ACCIDENT_INS = &SUMX.ACCIDENT_INS

    !let #Max_Acc_Inc = &SUMX.GPDE_SI_MX_ACC_INC

    let #BruttCalc    = &GROSS_AMOUNT

    let #BruttoByHazard = #BruttoByHazard +  #BruttCalc
    let #BruttoByInsAccount = #BruttoByInsAccount +  #BruttCalc

    let #HoursByHazard = #HoursByHazard + &HOURS
    let #HoursByInsAccount = #HoursByInsAccount + &HOURS

    let #ThisEmplidBrutto = #ThisEmplidBrutto +  #BruttCalc
    let #ThisEmplidHours = #ThisEmplidHours +  &HOURS

    ! -- wdu-j05 disable theses counts
    ! add 1 to #EmployeeCountByHazard
    ! add 1 to #EmployeeCountByInsAccount
    Do Get_Accdt_Ins_Lmt
    Do Get_Hazard_Tot_Employee
    DO Format-Number(#Accdt_Ins_Lmt, $Max_Acc_Inc,'888,888,888,888.00')
    If(#Sum_gross > #Accdt_Ins_Lmt)
        Let #Accdt_Ins =(#Accdt_Ins_Lmt * #BruttCalc)/#Sum_gross
    Else
        Let #Accdt_Ins = #BruttCalc
    End-If

    Let #ThisEmplidAccIns = #ThisEmplidAccIns + #Accdt_Ins
    Let #AccInsbyHazard = #AccInsbyHazard + #Accdt_Ins
    Let #AccInsbyInsAccount = #AccInsbyInsAccount + #Accdt_Ins
    if $ShowEmplidDetail = 'Y'
        do PrintEmplidDetailRow
    end-if

 let $Nodata = 'N'
FROM PS_GPDE_RP_ACINS01 SUMX, PS_GPDE_RP_0001 RP

WHERE SUMX.PRD_END_DT between  $Ctl_PRD_BD and $Ctl_PRD_ED
AND SUMX.GPDE_AL_CPAY_ENDDT = (SELECT MAX(SUMX1.GPDE_AL_CPAY_ENDDT) FROM PS_GPDE_RP_ACINS01 SUMX1
                                WHERE SUMX1.CAL_ID = SUMX.CAL_ID
                                !AND SUMX1.HAZARD = SUMX.HAZARD
                                AND SUMX1.PAY_ENTITY = SUMX.PAY_ENTITY
                                AND SUMX1.ACCIDENT_INS = SUMX.ACCIDENT_INS
                                AND SUMX1.SI_ACCIDENT_NUM = SUMX.SI_ACCIDENT_NUM
                                AND SUMX1.EMPLID = SUMX.EMPLID
                                AND SUMX1.EMPL_RCD = SUMX.EMPL_RCD)
AND SUMX.PAY_ENTITY = $Ctl_PayEntity
AND SUMX.EMPLID = RP.EMPLID
AND SUMX.EMPL_RCD = RP.EMPL_RCD
AND SUMX.CAL_RUN_ID = RP.CAL_RUN_ID
AND SUMX.GP_PAYGROUP = RP.GP_PAYGROUP
AND SUMX.CAL_ID = RP.CAL_ID
AND SUMX.ORIG_CAL_RUN_ID = RP.ORIG_CAL_RUN_ID
AND SUMX.RSLT_SEG_NUM = RP.RSLT_SEG_NUM
AND SUMX.SEG_END_DT = RP.SEG_END_DT
AND SUMX.PAY_ENTITY = RP.PAY_ENTITY

!  [$JOB_CLAUSE_SUM]

!
! Warning: the order of fields is of decisive importance
!
ORDER BY SUMX.ACCIDENT_INS
,SUMX.SI_ACCIDENT_NUM
,SUMX.HAZARD
,SUMX.EMPLID
,SUMX.EMPL_RCD
,RP.HIRE_DT
,RP.TERMINATION_DT
,SUMX.PRD_END_DT
end-select

!
!
do PrintTotalForLastEmplid

!
!
! wdu-j05: need to print summary after last page with manual on-break
if $LastSiAccidentNum <> '-x-'
        add 1 to #EmployeeCountByHazard
        add 1 to #EmployeeCountByInsAccount
        ! but only if rows were printed.
        do PrintHazardSubtotal
        do PrintTotalForInsAccount
end-if
end-procedure

!****************************************************************************
Begin-Procedure Get_Accdt_Ins_Lmt

Let #Accdt_Ins_Lmt = 0
Begin-SELECT
ACC.GPDE_SI_MX_ACC_INC

    Let #Accdt_Ins_Lmt = &ACC.GPDE_SI_MX_ACC_INC

FROM PS_ACCDT_INS_TBL ACC
WHERE ACC.ACCIDENT_INS = $ACCIDENT_INS
AND ACC.EFFDT between $Ctl_PRD_BD and $Ctl_PRD_ED
AND ACC.EFF_STATUS = 'A'
End-SELECt
End-Procedure


!****************************************************************************
begin-procedure Get_Hazard_Tot_Employee

Let #Sum_gross = 0

Begin-SELECT
SUMY.GPDE_AI_GROSS


    Let #Gross_Amt = &SUMY.GPDE_AI_GROSS
    Let #Sum_gross = #Sum_gross + #Gross_Amt

    If #Sum_Gross = 0
        Let #Sum_gross = 1
    End-If

FROM PS_GPDE_RP_ACINS01 SUMY
WHERE SUMY.EMPLID = $Empl_Id
AND SUMY.PRD_END_DT between  $Ctl_PRD_BD and $Ctl_PRD_ED
AND SUMY.PAY_ENTITY = $Ctl_PayEntity
AND SUMY.SI_ACCIDENT_NUM = $LastSiAccidentNum
AND SUMY.GPDE_AL_CPAY_ENDDT = (SELECT MAX(SUMY1.GPDE_AL_CPAY_ENDDT) FROM PS_GPDE_RP_ACINS01 SUMY1
                                WHERE SUMY1.CAL_ID = SUMY.CAL_ID
                                  !AND SUMY1.HAZARD = SUMY.HAZARD
                                  AND SUMY1.PAY_ENTITY = SUMY.PAY_ENTITY
                                  AND SUMY1.ACCIDENT_INS = SUMY.ACCIDENT_INS
                                  AND SUMY1.SI_ACCIDENT_NUM = SUMY.SI_ACCIDENT_NUM
                                  AND SUMY1.EMPLID = SUMY.EMPLID
                                  AND SUMY1.EMPL_RCD = SUMY.EMPL_RCD)
end-SELECT

End-Procedure



!************************************************
begin-procedure New_Page
do PrintTotalForInsAccount
new-page
end-procedure





!************************************************
begin-procedure PrintHazardSubtotal
        print '_'                                (+2,{col5},40) fill
        print #EmployeeCountByHazard                    (+2,{col2})     edit 8888888
        print 'Zwischensumme Gefahrenstelle'            (,+2)
        DO Format-Number(#BruttoByHazard, $BruttoByHazard,'999,999,999.00')
        DO Format-Number(#AccInsbyHazard, $AccInsbyHazard,'999,999,999.00')
        DO Format-Number(#HoursByHazard, $HoursByHazard,'999,999,999.00')
        print $Hazard                            (,+2)
        print $HoursByHazard                            (,65)
        print $BruttoByHazard                           (,{col51})
        print $AccInsbyHazard                            (,+2)

        let $Hazard = ''
        let #BruttoByHazard = 0
        let #EmployeeCountByHazard = 0
        let #HoursByHazard = 0
        let #AccInsbyHazard = 0

        print ' '                                        (+1,)
end-procedure





!************************************************
begin-procedure PrintTotalForInsAccount
        print '_'                (+2,{col5},40) fill
        print #EmployeeCountByInsAccount   (+2,{col2})     edit 8888888

        print 'Gesamtsumme:'     (,{col4})
        DO Format-Number(#BruttoByInsAccount, $BruttoByInsAccount,'999,999,999.00')
        DO Format-Number(#AccInsbyInsAccount, $AccInsbyInsAccount,'999,999,999.00')
        DO Format-Number(#HoursByInsAccount, $Hours2,'999,999,999.00')
        print $Hours2                       (,65)
        print $BruttoByInsAccount           (,{col51})
        print $AccInsbyInsAccount            (,+2)

        let #BruttoByHazard = 0
        let #EmployeeCountByHazard = 0
        let #HoursByHazard = 0
        let #BruttoByInsAccount = 0
        let #EmployeeCountByInsAccount = 0
        let #HoursByInsAccount = 0
        let #AccInsbyHazard = 0
        Let #AccInsbyInsAccount = 0
end-procedure








!************************************************
begin-procedure PrintTotalForLastEmplid
! print employee total for $LastEmplid, $LastEmplRcd

if $ShowEmplidTotal = 'Y'

   do Format-DateTime($Hire_DT,$Hire_DT1,{DEFDATE},'','')
    !------------------------------------------------------------------
    if rtrim($Term_DT, ' ') <> ''
        do ConvertToComponents($Term_DT,$tmp_y2,$tmp_m2,$tmp_d2)
        let $Begin_DT2_Str1 =  $tmp_y2  || '-' || $tmp_m2 || '-' ||  $tmp_d2
        do dtu-add-days($Begin_DT2_Str1, -1, $Begin_DT2_Str2)

        let $YY3 = substr($Begin_DT2_Str2,1,4)
        let $MM3 = substr($Begin_DT2_Str2,6,2)
        let $DD3 = substr($Begin_DT2_Str2,9,2)
        let $Stch3 = $YY3  || $MM3 ||  $DD3 || '0000'

        do Format-DateTime($Stch3, $Begin_DT4, {DEFCMP},'','native')
        do Format-DateTime($Begin_DT4, $Term_DT1, {DEFDATE}, '', '')
    else
        do Format-DateTime($Term_DT, $Term_DT1, {DEFDATE}, '', '')
    end-if

    !--------------------------------------------------------------------

    !print $Hazard         (+1,{col1})
    !print $Empl_ID        (,{col2})
    !print ',' (,)
    !print #EmplRcd (,+5) EDIT 88
    !print #EmplRcd (,+2) EDIT 88
    !print $Hire_DT1       (,{col3})
    !print $Term_DT1       (,{col4})
    DO Format-Number(#ThisEmplidBrutto, $BruttCalc,'999,999,999.00')
    DO Format-Number(#ThisEmplidAccIns, $ThisEmplidAccIns,'999,999,999.00')
    DO Format-Number(#ThisEmplidHours, $SUMME1,'999,999,999.00')
    print 'Summe Mitarbeiter'  (+1,{col3})
    print $SUMME1         (,65)
    print $BruttCalc      (,{col51})
    print $ThisEmplidAccIns         (,+2)

    if $ShowEmplidDetail = 'Y'
        print ' '           (+1,{col1})
    end-if
end-if

    let #ThisEmplidBrutto = 0
    let #ThisEmplidHours = 0
    Let #ThisEmplidAccIns = 0

end-procedure




!************************************************
begin-procedure PrintEmplidDetailRow
    do Format-DateTime($Hire_DT,$Hire_DT1,{DEFDATE},'','')
    !------------------------------------------------------------------
    if rtrim($Term_DT, ' ') <> ''
        do ConvertToComponents($Term_DT,$tmp_y2,$tmp_m2,$tmp_d2)
        let $Begin_DT2_Str1 =  $tmp_y2  || '-' || $tmp_m2 || '-' ||  $tmp_d2
        do dtu-add-days($Begin_DT2_Str1, -1, $Begin_DT2_Str2)

        let $YY3 = substr($Begin_DT2_Str2,1,4)
        let $MM3 = substr($Begin_DT2_Str2,6,2)
        let $DD3 = substr($Begin_DT2_Str2,9,2)
        let $Stch3 = $YY3  || $MM3 ||  $DD3 || '0000'

        do Format-DateTime($Stch3, $Begin_DT4, {DEFCMP},'','native')
        do Format-DateTime($Begin_DT4, $Term_DT1, {DEFDATE}, '', '')
    else
        do Format-DateTime($Term_DT, $Term_DT1, {DEFDATE}, '', '')
    end-if

    !--------------------------------------------------------------------
    print $Hazard         (+1,{col1})
    print $Empl_ID        (,{col2})
    !print ',' (,)
    !print #EmplRcd (,+5) EDIT 88
    print #EmplRcd (,+2) EDIT 88
    print $Hire_DT1       (,{col3})
    print $Term_DT1       (,{col4})
    DO Format-Number(#BruttCalc, $BruttCalc,'999,999,999.00')
    !DO Format-Number(#Accdt_Ins, $Accdt_Ins,'999,999,999.00')
    DO Format-Number(#Hours, $SUMME1,'999,999,999.00')
    print $SUMME1         (,65)
    print $BruttCalc      (,{col51})
    !print $Accdt_Ins         (,+2)
    do Format-Datetime($Slice_end_dt, $Slice_end_dt1, {DEFDATE},'','')
    print $Slice_end_dt1 (,120)
    ! for debugging
    !do Format-DateTime($PrdEndDT, $PrdEndDT_disp, {DEFDATE}, '', '')
    !print $PrdEndDT_disp (,+3)
end-procedure






!****************************************************************************
!begin-procedure Get_Max_Acc_Inc
!begin-select
!ACCI.GPDE_SI_MX_ACC_INC
!  let #Max_Acc_Inc = &ACCI.GPDE_SI_MX_ACC_INC
!  DO Format-Number(#Max_Acc_Inc, $Max_Acc_Inc,'888,888,888,888.00')
!from PS_GPDE_SI_ACCDT ACCI
!where ACCI.ACCIDENT_INS = $ACCIDENT_INS and
!      ACCI.EFFDT = (SELECT MAX(ACCI1.EFFDT) FROM PS_GPDE_SI_ACCDT ACCI1
!      WHERE ACCI1.ACCIDENT_INS = ACCI.ACCIDENT_INS AND
! -- wdu-j05 PRD_END_DT instead of $AsOfToday
!            ACCI1.EFFDT <= $PrdEndDT )
!end-select
!end-procedure
!******************************************************************



! -- Begin changes 07-Dec-2006
begin-procedure Get_Hazard_Pin_Number
begin-select
COOP_HAZ.PIN_NUM &HAZ_PIN_NUM
from PS_GP_PIN COOP_HAZ
where COOP_HAZ.PIN_CODE = 'DE_SI_COOP_HAZARD DEU'
end-select
end-procedure

!******************************************************************
begin-procedure Get_Prov_Pin_Number
begin-select
COOP_PROV.PIN_NUM &PROV_PIN_NUM
from PS_GP_PIN COOP_PROV
where COOP_PROV.PIN_CODE = 'DE_SI_COOP_PROVDR DEU'
end-select
end-procedure

!******************************************************************
Begin-procedure Get_Rslt_Pin_Val($EmplID,$Cal_Run_Id,#Empl_Rcd,$GP_PayGroup,
    $Cal_Id,$Orig_Cal_Run_Id,#Rslt_Seg_Num,#Pin_Num,:$CHR_Pin_Val)

let $CHR_Pin_Val = ''
begin-select
GP_RSLT1.CHR_PIN_VAL
  let $CHR_Pin_Val = &GP_RSLT1.CHR_PIN_VAL
from PS_GP_RSLT_PIN GP_RSLT1
where GP_RSLT1.EMPLID = $EmplID
 and GP_RSLT1.CAL_RUN_ID = $Cal_Run_Id
 and GP_RSLT1.EMPL_RCD = #Empl_Rcd
 and GP_RSLT1.GP_PAYGROUP = $GP_PayGroup
 and GP_RSLT1.CAL_ID = $Cal_Id
 and GP_RSLT1.ORIG_CAL_RUN_ID = $Orig_Cal_Run_Id
 and GP_RSLT1.RSLT_SEG_NUM = #Rslt_Seg_Num
 and GP_RSLT1.PIN_NUM = #Pin_Num
end-select

end-procedure
!******************************************************************

begin-procedure Get_SI_Limit
begin-select
SI_ACCT.GPDE_SI_MX_ACC_INC &SI_MX_ACC_INC
SI_ACCT.CURRENCY_CD
from PS_ACCDT_INS_TBL SI_ACCT
where SI_ACCT.ACCIDENT_INS = $dept_ACCIDENT_INS
 and SI_ACCT.EFFDT = (select max(SI_ACCT1.EFFDT)
        from PS_ACCDT_INS_TBL SI_ACCT1
        where SI_ACCT1.ACCIDENT_INS = SI_ACCT1.ACCIDENT_INS
        and SI_ACCT1.EFFDT <= &PBD.SEG_END_DT)
end-select
end-procedure
! -- End Changes 07-Dec-2006


!******************************************************************
!
! go by PRD_END_DT
! (PAY_ENTITY, ACCIDENT_INS,SI_ACCIDENT_NUM,EMPLID,EMPL_RCD
!    ,PRD_END_DT , HAZARD )
!
! Calculation goes across all hazards!
! if the limit is reached discard excess amount.
!
!
!******************************************************************
begin-procedure StoreLimitedAmounts
 ! -- Begin changes 07-Dec-2006
 do Get_Hazard_Pin_Number
 do Get_Prov_Pin_Number
 ! -- End Changes 07-Dec-2006

 let $EuroString = 'Betragsangaben in EURO'
 let $ToCurrency = 'EUR'
 let $Eur    = ' EUR '

!let #EmployeeCountByHazard = 0
!let $Hazard = ''
!let $ACCIDENT_INS = ''
!let #BruttoByHazard = 0
!let #HoursByHazard = 0
!let $SI_Accident = ''
!let #BruttoByInsAccount = 0
!let #EmployeeCountByInsAccount = 0
!let #HoursByInsAccount = 0


! -- wdu-jw05: emplid change triggers counter
let $LastEmplid=''
let #LastEmplRcd= -1
let $LastHireDt=''
let $LastTermDt=''

begin-SELECT
PBD.PAY_ENTITY
! -- DEPT.ACCIDENT_INS
! -- DEPT.SI_ACCIDENT_NUM

! -- DEPT.HAZARD
PBD.EMPLID
PBD.EMPL_RCD

PBD.HIRE_DT
PBD.TERMINATION_DT
PBD.PRD_END_DT
    ! PRD_END_DT is used for grouping later
PBD.SEG_END_DT
PBD.GP_PAYGROUP &MYPAYGROUP
    ! need to check on segment basis, because there may be more than one per PRD

RP0002.GPDE_RP_A2_9190        &GROSS_AMOUNT1
RP0002.GPDE_RP_WRKDHRS        &HOURS1
! -- SIMX.GPDE_SI_MX_ACC_INC
PBD.PERFORM_GROUP_GER
!
PBD.GPDE_AL_CPAY_ENDDT
! -- Begin Changes 07-Dec-2006
PBD.CAL_RUN_ID
PBD.CAL_ID
PBD.ORIG_CAL_RUN_ID
PBD.RSLT_SEG_NUM
! -- End Changes 07-Dec-2006
    ! maximum gross
    ! -- let #Limit = &SIMX.GPDE_SI_MX_ACC_INC
    do local_setup

    ! -- Begin Changes 07-Dec-2006
    ! -- Get Hazard value
    do Get_Rslt_Pin_Val(&PBD.EMPLID,&PBD.CAL_RUN_ID,&PBD.EMPL_RCD,&MYPAYGROUP,
    &PBD.CAL_ID,&PBD.ORIG_CAL_RUN_ID,&PBD.RSLT_SEG_NUM,&HAZ_PIN_NUM,$Hazard_Pin_Val)

    if rtrim($Hazard_Pin_Val,' ') <> ''
      let $HAZARD = $Hazard_Pin_Val
    end-if

    ! -- Get Provider value
    do Get_Rslt_Pin_Val(&PBD.EMPLID,&PBD.CAL_RUN_ID,&PBD.EMPL_RCD,&MYPAYGROUP,
    &PBD.CAL_ID,&PBD.ORIG_CAL_RUN_ID,&PBD.RSLT_SEG_NUM,&PROV_PIN_NUM,$Prov_Pin_Val)
    if rtrim($Prov_Pin_Val, ' ') <> ''
      let $dept_ACCIDENT_INS = $Prov_Pin_Val
    end-if

    ! -- Get SI Limit
    do Get_SI_Limit
    if &SI_MX_ACC_INC > 0
      let #Limit = &SI_MX_ACC_INC
      let #Max_Acc_Inc = #Limit
    DO Format-Number(#Max_Acc_Inc, $Max_Acc_Inc,'888,888,888,888.00')
    end-if

    ! -- End Changes 07-Dec-2006


    let $KontrollEmplid=&PBD.EMPLID

    let #EmplRcd = &PBD.EMPL_RCD
    if ($LastEmplid <> &PBD.EMPLID) or (#LastEmplRcd <> #EmplRcd)
        let $LastEmplid = &PBD.EMPLID
        let #LastEmplRcd = &PBD.EMPL_RCD
        let #LimitedTotalPerEmplRcd = 0
    end-if

    if ( &PBD.HIRE_DT <> $LastHireDt)
        let $LastHireDt = &PBD.HIRE_DT
        let #LimitedTotalPerEmplRcd = 0
    end-if

    ! -- wdu-881b6: termination not significant
    !if ( &PBD.TERMINATION_DT <> $LastTermDt)
    !    let $LastTermDt = &PBD.TERMINATION_DT
    !    let #LimitedTotalPerEmplRcd = 0
    !end-if

    ! ------------ check amount do add -----------------
    let #AvailDiff = #Limit - #LimitedTotalPerEmplRcd
    if #AvailDiff <= 0
         ! do not write gross, but need to write hours
         let #AddGross=0
    else
        if &GROSS_AMOUNT1  > #AvailDiff
             let #AddGross= #AvailDiff
        else
             let #AddGross = &GROSS_AMOUNT1
        end-if
    end-if

    ! ---- write AddGross+Hours here
    let #LimitedTotalPerEmplRcd = #LimitedTotalPerEmplRcd + #AddGross
    let #Hours = &HOURS1

    do WriteGross
    !
    !---------------------
    let $PrdEndDT              = &PBD.PRD_END_DT
!    let $Current_Curr          = &PBD.CURRENCY_CD
!    let $Current_RT_Type       = &PBD.CUR_RT_TYPE
!    let $Current_DT_EX_RT      = &PBD.GPDE_ASOF_DT_EX_RT
    let #BruttCalc          = 0
    let $Empl_ID = &PBD.EMPLID
! --     let $SI_Accident = &DEPT.SI_ACCIDENT_NUM         !member number from department
    let $SI_Accident = $dept_SI_ACCIDENT_NUM         !member number from department

! --     let $Hazard = &DEPT.HAZARD                       !Gefahrtarifstelle

    let $Hire_DT = &PBD.HIRE_DT
    let $Term_DT = &PBD.TERMINATION_DT
! --     let $ACCIDENT_INS = &DEPT.ACCIDENT_INS
     let $ACCIDENT_INS = $dept_ACCIDENT_INS


FROM PS_GPDE_RP_0001 PBD
    ,PS_GPDE_RP_0002 RP0002
    ,PS_GPDE_RP_SI01 RPSI01
! --    ,PS_DEPT_TBL DEPT
! --    ,PS_GPDE_SI_ACCDT SIMX
WHERE PBD.EMPLID = RP0002.EMPLID
! --  AND DEPT.DEPTID = PBD.DEPTID

!            AND PBD.EMPLID='004540B'
!            AND PBD.EMPLID = '023312L'
  AND PBD.CAL_RUN_ID  =RP0002.CAL_RUN_ID
  AND PBD.EMPL_RCD = RP0002.EMPL_RCD
  AND PBD.GP_PAYGROUP =RP0002.GP_PAYGROUP
  AND PBD.CAL_ID =RP0002.CAL_ID
  AND PBD.RSLT_SEG_NUM =RP0002.RSLT_SEG_NUM
  AND PBD.SEG_END_DT = RP0002.SEG_END_DT

  AND PBD.ORIG_CAL_RUN_ID = RP0002.ORIG_CAL_RUN_ID
  AND PBD.PAY_ENTITY          = $Ctl_PayEntity
  AND PBD.EMPL_STATUS      = 'A'
  AND PBD.PRD_END_DT between  $Ctl_PRD_BD and $Ctl_PRD_ED

! --  AND DEPT.EFFDT  = (SELECT MAX(DEPT1.EFFDT)
! --                     FROM PS_DEPT_TBL DEPT1
! --                     WHERE DEPT1.SETID = DEPT.SETID
! --                     AND   DEPT1.DEPTID = DEPT.DEPTID
! --                     AND   DEPT1.EFFDT <= PBD.SEG_END_DT)
! --  AND SIMX.ACCIDENT_INS=DEPT.ACCIDENT_INS
! --  AND SIMX.EFFDT=(SELECT MAX(SIMX1.EFFDT) from PS_GPDE_SI_ACCDT SIMX1 where SIMX1.ACCIDENT_INS=SIMX.ACCIDENT_INS)

!-- wdu-jw05: need latest version only
  AND PBD.GPDE_AL_CPAY_ENDDT = ( SELECT MAX(PBDX.GPDE_AL_CPAY_ENDDT)
       FROM PS_GPDE_RP_0001 PBDX
       where PBDX.EMPLID=PBD.EMPLID
   AND PBDX.EMPL_RCD=PBD.EMPL_RCD
       ! -- surely wrong: AND PBDX.CAL_RUN_ID=PBD.CAL_RUN_ID
       AND PBDX.GP_PAYGROUP=PBD.GP_PAYGROUP
       AND PBDX.CAL_ID=PBD.CAL_ID
       AND PBDX.ORIG_CAL_RUN_ID=PBD.ORIG_CAL_RUN_ID
       ! -- PBDX.RSLT_SEG_NUM=PBD.RSLT_SEG_NUM -- not to be compared
       AND PBDX.SEG_END_DT=PBD.SEG_END_DT
       )
!--x   AND RP0002.GPDE_A_CPAY_ENDDT = PBD.GPDE_AL_CPAY_ENDDT

  !
  AND PBD.EMPLID = RPSI01.EMPLID
  AND PBD.CAL_RUN_ID  = RPSI01.CAL_RUN_ID
  AND PBD.EMPL_RCD = RPSI01.EMPL_RCD
  AND PBD.GP_PAYGROUP =RPSI01.GP_PAYGROUP
  AND PBD.CAL_ID =RPSI01.CAL_ID
  AND PBD.ORIG_CAL_RUN_ID = RPSI01.ORIG_CAL_RUN_ID
  AND PBD.RSLT_SEG_NUM =RPSI01.RSLT_SEG_NUM
  AND PBD.SEG_END_DT = RPSI01.SEG_END_DT
  ! looking at the last slice in a segment only
  AND PBD.SEG_END_DT = RPSI01.SLICE_END_DT
  !
  ! remove si-free PGS
  AND RPSI01.GPDE_DV_EMPL_CAT NOT IN ('108','900','901','903','910')


! --     [$JOB_CLAUSE]
! -- ORDER BY DEPT.ACCIDENT_INS,DEPT.SI_ACCIDENT_NUM,DEPT.HAZARD,PBD.EMPLID,PBD.EMPL_RCD,PBD.HIRE_DT,
! --          PBD.TERMINATION_DT,PBD.PRD_END_DT
ORDER BY PBD.EMPLID,PBD.EMPL_RCD,PBD.HIRE_DT,
         PBD.TERMINATION_DT,PBD.PRD_END_DT
end-select


end-procedure






! ############################################################

begin-procedure WriteGross
!
! Notice, #AddGross goes down to zero when limit is reached
!
!show $KontrollEmplid
!show $dept_ACCIDENT_INS
!show $HAZARD
!show #Limit
!let $s1 = &PBD.PRD_END_DT
!let $s2 = &PBD.SEG_END_DT
!let $s3 = &PBD.GPDE_AL_CPAY_ENDDT
!let $testamt = &GROSS_AMOUNT1
!show $s1
!show $s2
!show $s3
!show $testamt


begin-sql
INSERT INTO PS_GPDE_RP_COOP_WK
( PAY_ENTITY
,ACCIDENT_INS
,SI_ACCIDENT_NUM
,HAZARD
,EMPLID
,EMPL_RCD
,HIRE_DT
,TERMINATION_DT
,PRD_END_DT
,SEG_END_DT
,GP_PAYGROUP
,GPDE_RP_A2_9190
,GPDE_RP_WRKDHRS
,GPDE_SI_MX_ACC_INC
,PERFORM_GROUP_GER )
VALUES (&PBD.PAY_ENTITY
,$dept_ACCIDENT_INS
,$dept_SI_ACCIDENT_NUM
,$HAZARD
,&PBD.EMPLID
,&PBD.EMPL_RCD
,&PBD.HIRE_DT
,&PBD.TERMINATION_DT
,&PBD.PRD_END_DT
,&PBD.SEG_END_DT
,&MYPAYGROUP
,#AddGross
,&HOURS1
,#Limit
,&PBD.PERFORM_GROUP_GER )
end-sql
end-procedure



begin-procedure local_setup

    !######### GPDESI11 => $DetailReport = 'N'
    !######### GPDESI12 => $DetailReport = 'Y'
    !
    !######### config this line only #########
    !
    let $DetailReport = 'Y'
    !
    !######### END config

    if $DetailReport = 'Y'
        move 'GPDESI12' to $ReportID
        move 'Einzelnachweis für Berufsgenossenschaft' to $ReportTitle
        !things to see in report
        let $ShowEmplidDetail = 'Y'
        let $ShowEmplidTotal = 'Y'
    else
        move 'GPDESI11' to $ReportID
        move 'Entgeltnachweis für Berufsgenossenschaft' to $ReportTitle
        !things to see in report
        let $ShowEmplidDetail = 'N'
        let $ShowEmplidTotal = 'Y'
    end-if
    let $dept_ACCIDENT_INS = 'VBG'
    let $dept_SI_ACCIDENT_NUM = ' '
    let $HAZARD =' '
    !let #Limit = 84000

    let #Max_Acc_Inc = #Limit
    DO Format-Number(#Max_Acc_Inc, $Max_Acc_Inc,'888,888,888,888.00')

   Evaluate $Ctl_PayEntity
  When = '001'
    let $HAZARD ='01'
     Break
  When = '002'
    let $HAZARD ='01'
     Break
  When = '004'
    let $HAZARD ='01'
     Break
  When = '010'
    let $HAZARD ='18'
     Break
  When = '016'
    let $HAZARD ='28'
     Break
  When = '017'
    let $HAZARD ='02'
     Break

  When = '020'
    let $HAZARD ='28'
     Break
  When = '025'
    let $HAZARD ='12'
     Break
  When = '027'
    let $HAZARD ='08'
     Break
  When = '062'
    let $HAZARD ='28'
     Break
  end-evaluate

end-procedure






!****************************************************************************
#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut04.sqc'  !get pay entity information
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'datemath.sqc'
