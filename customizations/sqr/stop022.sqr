!******************************************************************************
! Report Name: STOP022 - ISO Disqualifying Diposition to Acctg/Tax
!******************************************************************************
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:54:58                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!******************************************************************************
! Program Descr: This report calculates and prints information from sale
!                of Exercises or Releases to be reported to the accounting/tax
!                department - for reconciliation. The report is run by Process
!                Group or employee and by a range of disposition dates. If
!                Process Group is choosen the report sorts and breaks by
!                process group; it first selects all info by process group
!                where ST_PR_DT is NULL and then selects all info by process
!                group where ST_PR_DT is not NULL. If employee is choosen, it
!                sorts by employee  name. Only transactions with a status of
!                'confirmed' are reported.  Summay page is printed at the end,
!                which lists all process group totals.
!******************************************************************************
! Prompts:       Stock ID, Stock Plan ID, Emplid, From Date, Thru Date,
!                Process Group, Run Type
! Options:       None
! Tables:        ST_GRANT
!                ST_GRANT_EXER
!                ST_EXER_RELEASE
!                ST_EXER_DISPOSN
!                ST_REL_DISPOSN
!                JOB
!                ST_PERSON_NAME
!                ST_OPTION_PLAN
! Sorts:         Process Group or Name,
!                Grant Date
!                Exercise/Release Date
!                Disposition Date
!******************************************************************************

#include 'setenv.sqc'

!******************************************************************************
Begin-Setup

 #include 'ptpsl177.sqc'               ! Landscape 177 Columns

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Create-Array
  do Build-Where-Clause
  do Expand-Process-Group        !stprcgrp.sqc
  let $WherePayrollDate     = ' and C.ST_PR_DT IS NULL'
  let $WherePayrollDate2    = ' and J.ST_PR_DT IS NULL'
  let $WhereOrder           = ' order by 1,3,20,16'
  let $ProcessNull = 'Y'
  do Main-Process
  let $WherePayrollDate     = ' and C.ST_PR_DT IS NOT NULL'
  let $WherePayrollDate2    = ' and J.ST_PR_DT IS NOT NULL'
  let $ProcessNull = 'N'
  let $WhereOrder           = ' order by 2,3,20,16'
  do Main-Process
  if #ArrayCount > 1
    do Print-Summary
  end-if
  do Reset
  do Successful-EOJ

 let $CurrentTime = datenow()
 show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 12

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (03,001,008)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_ID                                       (  ,020,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  print $StockPlanLbl                                      (04,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,020,010)

  print $PrcsGrpLbl                                        (05,001,013)
  print ':'                                                (  ,   ,001)
  print $PrcsGrp                                           (  ,020,010)

  print $TransTypeLbl                                      (06,001,016)
  print ':'                                                (  ,   ,001)
  if $Type = 'E'
     print $ExerLbl                                        (  ,020,008)
  else
     print $RelLbl                                         (  ,020,007)
  end-if

  print $SentLbl                                           (07,001,015)
  print ':'                                                (  ,   ,001)
  if $ProcessNull = 'Y'
    print $NoLbl                                           (  ,020,002)
  else
    print $YesLbl                                          (  ,020,003)
  end-if

  print $NameLbl                                           (09,001,030)
  print $GrantDtLbl                                        (  ,032,012)
  print $TransFmvLbl                                       (  ,046,016)
  print $TransLbl                                          (  ,066,011)
  print $DispPriceLbl                                      (  ,080,017)
  print $PyDtLbl                                           (  ,147,020)

  print $EmpIDLbl                                          (10,001,030)
  print $GrantPriceLbl                                     (  ,032,012)
  print $TransNbrLbl                                       (  ,046,018)
  print $DateLbl                                           (  ,066,011)
  print $DispDtLbl                                         (  ,080,017)
  print $ShareDispLbl                                      (  ,106,015)
  print $OrdIncLbl                                         (  ,130,015)
  print $SourceLbl                                         (  ,147,022)

  print $CostBasisLbl                                      (11,032,010)

  print '-'                                                (12,001,171) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set variables and retrieves
!            report parameters.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID      = 'STOP022'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language
  let $AsOfDate   = $AsOfToday
  let #ArrayCount = 1

  if $prcs_process_instance = ''
  else
    do Get-SQR-Parms                   ! Get Run Control Values
  end-if

  show 'Stock ID:      ' $RC_Stock_ID
  show 'From Date:     ' $RC_FromDate
  show 'Thru Date:     ' $RC_ThruDate
  if $RC_Stock_Plan <> ''
    show 'Stock Plan:    ' $RC_Stock_Plan
  end-if
  if $RC_PrcsGrp <> ''
    show 'Prcs Group:    ' $RC_PrcsGrp
  end-if
  if $RC_Emplid <> ''
    show 'Emplid:    ' $RC_Emplid
  end-if

  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')

  show ' '
  let $CurrentTime = datenow()
  show 'Process started at: ' $CurrentTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ('STOP020')
  do Append_Report_Translation ('STOP012')

  do Get_Field_Information ('STOCK', 'TOTAL',             $TotalLbl,      #DW)
  do Get_Field_Information ('STOCK', 'GRAND_TOTAL',       $GrndTotLbl,    #DW)
  do Get_Field_Information ('STOCK', 'STOCK_ID',          $StockIdLbl,    #DW)
  do Get_Field_Information ('STOCK', 'PROCESS_GRP',       $PrcsGrpLbl,    #DW)
  do Get_Field_Information ('STOCK', 'NAME',              $NameLbl,       #DW)
  do Get_Field_Information ('STOCK', 'EMPLID',            $EmpIdLbl,      #DW)
  do Get_Field_Information ('STOCK', 'GRANT_PRICE',       $GrantPriceLbl, #DW)
  do Get_Field_Information ('STOCK', 'GRANT_DT',          $GrantDtLbl,    #DW)
  do Get_Field_Information ('STOCK', 'NUMBER',            $NbrLbl,        #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION_PRICE', $DispPriceLbl,  #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION_DT',    $DispDtLbl,     #DW)
  do Get_Field_Information ('STOCK', 'SHARES_DISPOSED',   $ShareDispLbl,  #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION_INC',   $DisposnLbl,    #DW)
  do Get_Field_Information ('STOCK', 'FROM',              $FromLbl,       #DW)
  do Get_Field_Information ('STOCK', 'THRU',              $ThruLbl,       #DW)
  do Get_Field_Information ('STOCK', 'DATE',              $DateLbl,       #DW)
  do Get_Field_Information ('STOCK', 'ST_ORD_INCOME',     $OrdIncLbl,     #DW)
  do Get_Field_Information ('STOCK', 'EXERCISE',          $ExerLbl,       #DW)
  do Get_Field_Information ('STOCK', 'RELEASE',           $RelLbl,        #DW)
  do Get_Field_Information ('STOCK', 'STOCK_PLAN',        $StockPlanLbl,  #DW)
  do Get_Field_Information ('STOCK', 'COST_BASIS1',       $CostBasisLbl,  #DW)

  do Get_Field_Information ('STOP020','STOP022',          $ReportTitle,   #DW)
  do Get_Field_Information ('STOP020','ST_PR_DT',         $PyDtLbl,       #DW)
  do Get_Field_Information ('STOP020','ST_SEND_SRC',      $SourceLbl,     #DW)
  do Get_Field_Information ('STOP020','YES',              $YesLbl,        #DW)
  do Get_Field_Information ('STOP020','NO',               $NoLbl,         #DW)
  do Get_Field_Information ('STOP020','SENT_TO_PR',       $SentLbl,       #DW)
  do Get_Field_Information ('STOP020','SUMMARY',          $SumLbl,        #DW)

  do Get_Field_Information ('STOP012','TRANSACTION',      $TransLbl,      #DW)
  do Get_Field_Information ('STOP012','TRANSACTION_NBR',  $TransNbrLbl,   #DW)
  do Get_Field_Information ('STOP012','TRANSACTION_FMV',  $TransFmvLbl,   #DW)
  do Get_Field_Information ('STOP012','TRANSACTION_TYPE', $TransTypeLbl,  #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = ProcessGroup         -
               size  = 100                  -
               field = PrcsGrp:char         -
               field = SentToPayroll:char   -
               field = SharesDisp:number    -
               field = OrdIncome:number

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Construct portions of where clause, to be used in the main select,
!          based on report parameters choosen.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  let $SQLQuote = ''''

  if $RC_Stock_Plan <> ''
    let $WhereStockPlan   = ' and A.STOCK_PLAN  = '      || $SQLQuote || $RC_Stock_Plan || $SQLQuote
  else
    let $WhereStockPlan   = ''
  end-if

  if $RC_PrcsGrp <> ''
    let $WherePrcsGrp     = ' and C.PROCESS_GROUP  = '     || $SQLQuote || $RC_PrcsGrp    || $SQLQuote
    let $WherePrcsGrp2    = ' and J.PROCESS_GROUP  = '     || $SQLQuote || $RC_PrcsGrp    || $SQLQuote
  else
    let $WherePrcsGrp     = ''
    let $WherePrcsGrp2    = ''
  end-if

  if $RC_Emplid <> ''
    let $WhereEmplid     = ' and A.EMPLID  = '             || $SQLQuote || $RC_Emplid     || $SQLQuote
  else
    let $WhereEmplid     = ''
  end-if

  if $RC_FromDate <> ''
    let $WhereFromDate      = ' and C.DISPOSITION_DT  >= ' || $SQLQuote || $RC_FromDate   || $SQLQuote
    let $WhereFromDate2     = ' and J.DISPOSITION_DT  >= ' || $SQLQuote || $RC_FromDate   || $SQLQuote
  else
    let $WhereFromDate      = ''
    let $WhereFromDate2     = ''
  end-if

  if $RC_ThruDate <> ''
    let $WhereThruDate      = ' and C.DISPOSITION_DT  <= ' || $SQLQuote || $RC_ThruDate   || $SQLQuote
    let $WhereThruDate2     = ' and J.DISPOSITION_DT  <= ' || $SQLQuote || $RC_ThruDate   || $SQLQuote
  else
    let $WhereThruDate      = ''
    let $WhereThruDate2     = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main report logic for report.
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

  do Define-PrimJob-Clause('D',$AsOfToday, $PRIM_JOB_CLAUSE)
  let $AsOfDate = $AsOfToday

Begin-Select
H.PROCESS_GROUP
C.PROCESS_GROUP
'E'              &Type
A.EMPLID
A.GRANT_NBR
A.GRANT_DT
A.GRANT_PRICE
A.ST_OPTION_TYPE
B.EXERCISE_DT
B.EXERCISE_FMV
B.EXERCISE_NBR
B.EXERCISE_METHOD
B.EXERCISE_COST
B.SWAP_VALUE
0                       &RelNbr
C.DISPOSITION_DT
C.SHARES_DISPOSED
C.DISPOSITION_PRICE
C.DISPOSITION_NBR
E.NAME
C.ST_ORD_INCOME
C.ST_SEND_SRC
C.ST_PR_DT
I.COUNTRY

  if $ProcessNull = 'Y'
    let $PrcsGrp    = rtrim(&h.process_group,' ')
  else
    let $PrcsGrp    = rtrim(&c.process_group,' ')
  end-if
  print $PrcsGrp                            () on-break print=never level=1 procedure=PrcsGrp-Change
  print &Type                               () on-break print=never level=2 procedure=Trans-Change

  let $Print      = 'Y'
  let $Emplid     = rtrim(&a.emplid,' ')
  let $GrantNbr   = rtrim(&a.grant_nbr,' ')
  let $GrantDt    = rtrim(&a.grant_dt,' ')
  let #GrantPrice = &a.grant_price
  let $Type       = &Type
  let $ExerDt     = rtrim(&b.exercise_dt,' ')
  let #ExerFmv    = &b.exercise_fmv
  let #ExerNbr    = &b.exercise_nbr
  let #ExerciseCost     = round(&b.exercise_cost,2)
  let $ExerciseMethod   = rtrim(&b.exercise_method,' ')
  let #SwapValue        = round(&b.swap_value,2)
  let #RelNbr     = &RelNbr
  let $DispDt     = rtrim(&c.disposition_dt,' ')
  let #SharesDisp = &c.shares_disposed
  let #DispPrice  = &c.disposition_price
  let #DispNbr    = &c.disposition_nbr
  let $Name       = rtrim(&e.name,' ')
  let $TaxCountry = rtrim(&I.country,' ')
  let $OptionType = rtrim(&a.st_option_type,' ')
  let #OrdIncome  = round(&c.st_ord_income,2)
  let $SendSource = rtrim(&c.st_send_src,' ')
  let $PayrollDt  = rtrim(&c.st_pr_dt,' ')
  do Format-DateTime ($GrantDt, $GrantDt, {DEFDATE}, '', '')
  do Format-DateTime ($ExerDt , $ExerDt , {DEFDATE}, '', '')
  do Format-DateTime ($DispDt , $DispDt , {DEFDATE}, '', '')
  if $ProcessNull = 'Y'
    let $SendSourceXlat = ''
  else
    do Format-DateTime ($PayrollDt , $PayrollDt, {DEFDATE}, '', '')
    move $SendSource to $FieldValue
    move 'ST_SEND_SRC'  to $Fieldname
    do Read-Translate-Table
    let $SendSourceXlat = $Xlatlongname
  end-if
  do Print-Detail

  let #TransShares    = #TransShares    + #SharesDisp
  let #TransOrdIncome = #TransOrdIncome + #OrdIncome
  let #PrcsShares     = #PrcsShares     + #SharesDisp
  let #PrcsOrdIncome  = #PrcsOrdIncome  + #OrdIncome

 from PS_ST_GRANT         A,
      PS_ST_GRANT_EXER    B,
      PS_ST_EXER_DISPOSN  C,
      PS_JOB              D,
      PS_ST_PERSON_NAME   E,
      PS_PAYGROUP_TBL     G,
      PS_R_PRCS_GRP_DTL   H,
      PS_TAX_LOCATION1    I
 where A.EMPLID             = B.EMPLID
   and A.STOCK_ID           = $RC_Stock_ID
   and A.STOCK_ID           = B.STOCK_ID
   and A.GRANT_NBR          = B.GRANT_NBR
   and B.EMPLID             = C.EMPLID
   and B.STOCK_ID           = C.STOCK_ID
   and B.GRANT_NBR          = C.GRANT_NBR
   and B.EXERCISE_NBR       = C.EXERCISE_NBR
   and D.EMPLID             = A.EMPLID
   and D.EFFDT              = (SELECT MAX(EFFDT)   from PS_JOB
                              where     EMPLID    = D.EMPLID
                                and     EMPL_RCD  = D.EMPL_RCD
                                and     EFFDT    <= C.DISPOSITION_DT)
   and D.EMPL_RCD           = [$PRIM_JOB_CLAUSE]
   and D.EFFSEQ             = (SELECT MAX(EFFSEQ)  from PS_JOB
                              where     EMPLID    = D.EMPLID
                                and     EMPL_RCD  = D.EMPL_RCD
                                and     EFFDT     = D.EFFDT)
   and E.EMPLID             = A.EMPLID
   and C.DISQUAL_DISPOSN    = 'Y'
   and C.DISPOSITION_STATUS = 'C'
   and C.ST_ORD_INCOME      > 0
   and C.REVERSAL_DT       is null
   and G.COMPANY            = D.COMPANY
   and G.PAYGROUP           = D.PAYGROUP
   and G.EFFDT              = (SELECT MAX(EFFDT)   from PS_PAYGROUP_TBL
                               where     COMPANY  = G.COMPANY
                                 and     PAYGROUP = G.PAYGROUP
                                 and     EFFDT   <= C.DISPOSITION_DT)
   and H.COMPANY            = D.COMPANY
   and H.PAYGROUP           = D.PAYGROUP
   and H.REPORT_ID          = $ReportID
   and I.TAX_LOCATION_CD    = D.TAX_LOCATION_CD
   [$WhereFromDate]
   [$WhereThruDate]
   [$WhereStockPlan]
   [$WhereEmplid]
   [$WherePrcsGrp]
   [$WherePayrollDate]

 UNION
 SELECT
  H.PROCESS_GROUP
 ,J.PROCESS_GROUP
 ,'R'
 ,A.EMPLID
 ,A.GRANT_NBR
 ,A.GRANT_DT
 ,A.GRANT_PRICE
 ,A.ST_OPTION_TYPE
 ,I.RELEASE_DT
 ,I.RELEASE_FMV
 ,I.EXERCISE_NBR
 ,I.RELEASE_METHOD
 ,B.EXERCISE_COST
 ,B.SWAP_VALUE
 ,I.RELEASE_NBR
 ,J.DISPOSITION_DT
 ,J.SHARES_DISPOSED
 ,J.DISPOSITION_PRICE
 ,J.DISPOSITION_NBR
 ,E.NAME
 ,J.ST_ORD_INCOME
 ,J.ST_SEND_SRC
 ,J.ST_PR_DT
 ,K.COUNTRY
 from PS_ST_GRANT         A,
      PS_ST_GRANT_EXER    B,
      PS_ST_EXER_RELEASE  I,
      PS_ST_REL_DISPOSN   J,
      PS_JOB              D,
      PS_ST_PERSON_NAME   E,
      PS_PAYGROUP_TBL     G,
      PS_R_PRCS_GRP_DTL   H,
      PS_TAX_LOCATION1    K
 where A.EMPLID             = B.EMPLID
   and A.STOCK_ID           = $RC_Stock_ID
   and A.STOCK_ID           = B.STOCK_ID
   and A.GRANT_NBR          = B.GRANT_NBR
   and B.EMPLID             = I.EMPLID
   and B.STOCK_ID           = I.STOCK_ID
   and B.GRANT_NBR          = I.GRANT_NBR
   and B.EXERCISE_NBR       = I.EXERCISE_NBR
   and I.EMPLID             = J.EMPLID
   and I.STOCK_ID           = J.STOCK_ID
   and I.GRANT_NBR          = J.GRANT_NBR
   and I.EXERCISE_NBR       = J.EXERCISE_NBR
   and I.RELEASE_NBR        = J.RELEASE_NBR
   and D.EMPLID             = A.EMPLID
   and D.EFFDT              = (SELECT MAX(EFFDT)   from PS_JOB
                               where     EMPLID    = D.EMPLID
                                 and     EMPL_RCD  = D.EMPL_RCD
                                 and     EFFDT    <= J.DISPOSITION_DT)
   and D.EMPL_RCD           = [$PRIM_JOB_CLAUSE]
   and D.EFFSEQ             = (SELECT MAX(EFFSEQ)  from PS_JOB
                               where     EMPLID    = D.EMPLID
                                 and     EMPL_RCD  = D.EMPL_RCD
                                 and     EFFDT     = D.EFFDT)
   and E.EMPLID             = A.EMPLID
   and J.DISQUAL_DISPOSN    = 'Y'
   and J.DISPOSITION_STATUS = 'C'
   and J.ST_ORD_INCOME      > 0
   and J.REVERSAL_DT       is null
   and G.COMPANY            = D.COMPANY
   and G.PAYGROUP           = D.PAYGROUP
   and G.EFFDT              = (SELECT MAX(EFFDT)   from PS_PAYGROUP_TBL
                               where     COMPANY  = G.COMPANY
                                 and     PAYGROUP = G.PAYGROUP
                                 and     EFFDT   <= J.DISPOSITION_DT)
   and H.COMPANY            = D.COMPANY
   and H.PAYGROUP           = D.PAYGROUP
   and H.REPORT_ID          = $ReportID
   and K.TAX_LOCATION_CD    = D.TAX_LOCATION_CD
   [$WhereFromDate2]
   [$WhereThruDate2]
   [$WhereStockPlan]
   [$WhereEmplid]
   [$WherePrcsGrp2]
   [$WherePayrollDate2]
   [$WhereOrder]
End-Select

  if $Print = 'Y'
    do PrcsGrp-Change
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Array
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Array

  if $ProcessNull = 'Y'
    let $SentToPayroll = $NoLbl
  else
    let $SentToPayroll = $YesLbl
  end-if

  put $PrcsGrp $SentToPayroll #PrcsShares #PrcsOrdIncome into ProcessGroup(#ArrayCount) PrcsGrp SentToPayroll SharesDisp OrdIncome
  add 1 to #ArrayCount

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail
! Descr:   Prints the report
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail

  print $Name                                              (+2,001,030)
  print $GrantDt                                           (  ,032,010)

  print #ExerFMV                                           (  ,046,012) edit $9999.999999
  print $ExerDt                                            (  ,066,010)
  print #DispPrice                                         (  ,080,012) edit $9999.999999
  print #SharesDisp                                        (  ,099,022) edit 999,999,999,999.999999

  if $ExerciseMethod = 'SWAP'
     do Get-Shares-Issued
     do Get-Taxes
     let #CostBasis = 0
     if $OptionType = 'ISO' or $OptionType = 'ISAR'
         let #CostBasis = (#ExerciseCost - #SwapValue) / #TotalSharesIssued
     else
        if $OptionType = 'NQ' or $OptionType = 'NSAR'
            let #CostBasis = #ExerFmv
        end-if
     end-if
  end-if

  if $ExerciseMethod = 'SWAP'
     let #OrdIncome = (#ExerFMV - #CostBasis) * #SharesDisp
     let #OrdIncome = round(#OrdIncome,2)
  end-if

  print #OrdIncome                                         (  ,123,022) edit $$9,999,999,999.999999
  print $PayrollDt                                         (  ,147,010)

  print $Emplid                                            (+1,001,030)
  print #GrantPrice                                        (  ,032,012) edit $9999.999999
  if $Type = 'E'
    print #ExerNbr                                         (  ,046,008) edit 99999999
  else
    print #RelNbr                                          (  ,046,008) edit 99999999
  end-if
  print $DispDt                                            (  ,080,010)
  print $SendSourceXlat                                    (  ,147,022)

  if $ExerciseMethod = 'SWAP'
     if $OptionType = 'ISO' or $OptionType = 'ISAR' or $OptionType = 'NQ' or $OptionType = 'NSAR'
         let #CostBasis = round(#CostBasis,6)
         print #CostBasis                                  (+1,032,012) edit $9999.999999
     end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Shares-Issued
! Descr:   Add all shares issued for a given exercise number
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Issued

  let #TotalSharesIssued = 0

Begin-Select

HH.SHARES_ISSUED

  let #TotalSharesIssued = #TotalSharesIssued + &hh.shares_issued

from PS_ST_EXER_ISSUE HH
where HH.EMPLID          = $Emplid
  and HH.STOCK_ID        = $RC_Stock_ID
  and HH.GRANT_NBR       = $GrantNbr
  and HH.EXERCISE_NBR    = #ExerNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Taxes
! Descr:     Retrieve tax data for a given exercise.
!-----------------------------------------------------------------------
Begin-Procedure Get-Taxes

  let #TotalTax = 0

Begin-Select
T.TAX_CUR
T.STATE
T.LOCALITY
T.ST_STOCK_TAX_TYPE

  let $TaxState      = rtrim(&t.state,' ')
  let $TaxLocality   = rtrim(&t.locality,' ')
  let #TaxCur        = &t.tax_cur
  add &t.tax_cur to #TotalTax

from PS_ST_EXER_TAXES    T,
     PS_ST_TAX_TYPE_TBL  T1
where T.EMPLID             = $Emplid
  and T.STOCK_ID           = $RC_Stock_ID
  and T.GRANT_NBR          = $GrantNbr
  and T.EXERCISE_NBR       = #ExerNbr
  and T.COUNTRY            = $TaxCountry
  and T1.COUNTRY           = T.COUNTRY
  and T1.ST_STOCK_TAX_TYPE = T.ST_STOCK_TAX_TYPE
order by T.STATE,
         T.ST_STOCK_TAX_TYPE,
         T.LOCALITY

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: PrcsGrp-Change
! Descr:     Prints Totals for each process group and advances a new page
!-----------------------------------------------------------------------
Begin-Procedure PrcsGrp-Change

  next-listing need=4
  let $ChangeLbl = $TransTypeLbl || ' ' || $TotalLbl || ':'
  print '-'                                                (+1,001,171) fill
  print $ChangeLbl                                         (+1,032,   )
  print #TransShares                                       (  ,099,022) edit 999,999,999,999.999999
  print #TransOrdIncome                                    (  ,123,022) edit $$9,999,999,999.999999
  print '-'                                                (+1,001,171) fill
  let #TransShares    = 0
  let #TransOrdIncome = 0

  next-listing need=4
  let $ChangeLbl = $PrcsGrpLbl || ' ' || $TotalLbl || ':'
  print '-'                                                (+1,001,171) fill
  print $ChangeLbl                                         (+1,032,   )
  print #PrcsShares                                        (  ,099,022) edit 999,999,999,999.999999
  print #PrcsOrdIncome                                     (  ,123,022) edit $$9,999,999,999.999999
  print '-'                                                (+1,001,171) fill
  do Populate-Array
  let #TotalShares    = #TotalShares     + #PrcsShares
  let #TotalOrdIncome = #TotalOrdIncome  + #PrcsOrdIncome
  let #PrcsShares    = 0
  let #PrcsOrdIncome = 0
  new-page

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Trans-Change
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Trans-Change

  next-listing need=4
  let $ChangeLbl = $TransTypeLbl || ' ' || $TotalLbl || ':'
  print '-'                                                (+1,001,171) fill
  print $ChangeLbl                                         (+1,032,   )
  print #TransShares                                       (  ,099,022) edit 999,999,999,999.999999
  print #TransOrdIncome                                    (  ,123,022) edit $$9,999,999,999.999999
  print '-'                                                (+1,001,171) fill
  let #TransShares    = 0
  let #TransOrdIncome = 0
  new-page

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Print-Summary
!-----------------------------------------------------------------------
Begin-Procedure Print-Summary

  next-listing need=4
  print '-'                                                (+2,001,171) fill
  print $GrndTotLbl                                        (+1,032,   )
  print ':'                                                (  ,   ,001)
  print #TotalShares                                       (  ,099,022) edit 999,999,999,999.999999
  print #TotalOrdIncome                                    (  ,123,022) edit $$9,999,999,999.999999
  print '-'                                                (+1,001,171) fill

  print $SumLbl                                            (+2,001,007) bold underline
  print $PrcsGrpLbl                                        (+1,001,013) underline
  print $SentLbl                                           (  ,016,015) underline
  print $ShareDispLbl                                      (  ,040,015) underline
  print $OrdIncLbl                                         (  ,064,015) underline
  let #Row = 1
  while #Row < #ArrayCount
    get $PrcsGrp $SentToPayroll #SharesDisp #OrdIncome from ProcessGroup(#Row) PrcsGrp SentToPayroll SharesDisp OrdIncome
    print $PrcsGrp                                         (+1,001,010)
    print $SentToPayroll                                   (  ,016,015)
    print #SharesDisp                                      (  ,033,022) edit 999,999,999,999.999999
    print #OrdIncome                                       (  ,057,022) edit $$9,999,999,999.999999
    add 1 to #Row
  end-while

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'curdttim.sqc'                ! Procedures: Get-Current-DateTime
#include 'datetime.sqc'                ! Procedures: Init-Datetime
#include 'eoj.sqc'                     ! End of Report Format
#include 'number.sqc'                  ! Procedures: Init-Number
#include 'prcsapi.sqc'                 ! Process Scheduler API
#include 'prcsdef.sqc'                 ! Update Process Open_Trans variable declaration
#include 'reset.sqc'                   ! Reset printer procedure
#include 'strunctl.sqc'                ! Stock Admin's Run Control Record
#include 'getrplng.sqc'                !Gets the report language
#include 'sqlerr.sqc'                  !SQL error processing
#include 'getprimj.sqc'                !Get primary job
#include 'askftd.sqc'                  !Prompt for from thru date range
#include 'stprcgrp.sqc'                !Creates temp table with all combos for process groups
#include 'sqrtrans.sqc'
#include 'readxlat.sqc'
#include 'datemath.sqc'
