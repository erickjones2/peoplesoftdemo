!***********************************************************************
! GPINPS01.SQR        GLOBAL PAYROLL INDIA PAYSLIP PRINT PROGRAM       *
!                                                                      *
!  Description:                                                        *
!                  This program will take the results from the main GP *
!                  result tables and based on a payslp template ID     *
!                  attached to a paygroup, extract, format and print   *
!                  the results.                                        *
!                                                                      *
!                                                                      *
!***********************************************************************

!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  30687666                                            !
!                                                                      *
!***********************************************************************
!  Modification History:                                                 *
!                                                                        *
!  Date         Incident                   Description                   *
! ----------    -----------           --------------------               *
! DD/MM/YYYY                                                             *
! 17/Apr/2007   1623469012     The SQR has been updated be modified to   *
!                              print YTD accumulators of earnings of     *
!                              country type IND and ALL.                 *
!                                                                        *
!*************************************************************************



#include 'setenv.sqc'   !Set environment


Begin-Setup

#include 'setupdb.sqc'
  page-size 85 130

  declare printer
        type          = HPLASERJET
        orientation   = portrait
        top-margin    = .27
        left-margin   = 0.10
        font          = 3
        point-size    = 8
End-Setup


!List of constants for program
#define $payee_list     '10'
#define box_shade        40
#define colA 2
#define colCO 4
#define colB 8
#define colC 16
#define colD 54
#define colE 32
#define colF 40
#define colG 72
#define colH 56
#define colI 72
#define colII 84
#define colI2 87
#define colI3 89
#define colJ 72
#define colK 90
#define colL 88
#define colM 96
#define colMM 101
#define colN 108
#define colO 112
#define colP 114

!Earnings and Deductions Heading Settings
#define ColHD3  26
#define ColHD5  33
#define ColHD6  46
#define ColHD7  55
#define ColHD8  64
#define ColHD9  74
#define ColHD10 84
#define ColHD11 96
#define ColHD12 105
#define ColHD13 115
#define ColHD14 124

!Earnings and deductions column settings
#define ColED3  22
#define ColED5  33
#define ColED6  41
#define ColED7  49
#define ColED8  59
#define ColED9  71
#define ColED10 81
#define ColED11 91
#define ColED12 101
#define ColED13 111
#define ColED14 121

!Accumulators and its heading col settings
#define ColAC1  36
#define ColAC2  51
#define ColAC3  66
#define ColAC4  81
#define ColAC5  96
#define ColAC6  111

!#DEFINE DEBUGA

begin-report


  do Init-DateTime
  Do Get-Current-DateTime
  do Init-Report
  do Process-Main
  Do Delete-RunControl
!ePay Implementation Changes begins here
  do GP-ePay-Control ! if ePay installed have a control row inserted.
!ePay Implementation Changes ends here

  do Stdapi-Term
end-report

begin-heading 23


   graphic (0,1,130) horz-line


   do Print_Company

   Print $Header1 (8, {colII})   Bold

   Print $Header3 (9, {colII})   Bold
   Print $Header4a (12, {colII})  Bold

   Print $Header5a (13,{colII})   Bold

   Print $Header6a (14,{colII})     Bold
   Print $Header6b  (15, {colII})   Bold
   Print $Header7a  (16,{colII})    Bold
   Print $Header8a  (16,{colII})    Bold

  If $Del_opt <> '20'  !HOME, MAIL, LOCATION

         If ltrim(rtrim($ADDLINE1,' '),' ') = ''
               let $ADDLINE1 = $EmployeeName
         End-if

         Print $ADDLINE1 (15, 20)   Bold  !Replacing header 6
         If ltrim(rtrim($ADDLINE2,' '),' ') <> $Country
            Print $ADDLINE2 (16, 20)   Bold  !Replacing Header 7
         end-if

         If ltrim(rtrim($ADDLINE3,' '),' ') <> $Country
                     Print $ADDLINE3 (17, 20)   Bold  !Replacing Header 7
         end-if
         Print $ADDLINE31 (18, 20)  Bold  !Replacing header 9
         Print $ADDLINE4  (19, 20)  Bold  !REplacing Header 9A


  End-if

  if $Del_opt = '20' ! Department
     Print $EmployeeName (8, 5)   Bold  !Replacing header 6
  End-if


Print $Header9a   (17, {colII})   Bold
Print $Header10a  (18, {colII})   Bold
Print $Header11aa (19, {colII})   Bold
Print $Header11a  (20, {colII})   Bold
Print $Header12a  (21, {colII})   Bold
Print $Header13a  (22, {colII})   Bold



end-heading

begin-footing 2
   graphic (1,1,130) horz-line
end-footing

!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
Begin-Procedure Init-Report
  do Stdapi-Init
#IFDEF DEBUGA

#ENDIF


  if $prcs_process_instance = ''

  else
    do Select-Parameters
  end-if
  
 
!ePay Implementation Changes begins here
  do GP-ePay-Init ! Initialize ePay variables
!ePay Implementation Changes ends here


  do Define-Values

End-Procedure

!**************************************************************************
!
! Procedure: Get_Company
!
! Description:  Get the Company Details
!
!**************************************************************************
Begin-Procedure Get_Company
Begin-Select on-error=SQL-Error

A.COMPANY
B.DESCR
B.ADDRESS1
B.ADDRESS2
B.ADDRESS3
B.ADDRESS4
B.CITY
B.STATE
B.POSTAL
B.COUNTRY
        Let $Name       = &B.DESCR
        Let $address1   = &B.ADDRESS1
        Let $address2   = &B.ADDRESS2
        Let $address3   = &B.ADDRESS3
        Let $address4   = &B.ADDRESS4
        Let $City       = &B.CITY
        Let $State      = &B.STATE
        Let $Postal     = &B.POSTAL
        Let $Country = &B.COUNTRY

        do adformat
        do Compress-Address

        Let $COMPANY_NM         = $ADDLINE1
        Let $COADD1             = $ADDLINE2
        Let $COADD2             = $ADDLINE3
        Let $COADD3             = $ADDLINE31
        Let $COADD4             = $ADDLINE4
        Let $COCITY             = $ADDLINE5
        Let $COSTATE            = $ADDLINE6
  FROM PS_JOB A,  PS_COMPANY_TBL B
  WHERE A.COMPANY = B.COMPANY
        AND A.EMPLID = $Emplid
        AND  A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_JOB A1
                         WHERE A1.EMPLID = A.EMPLID
                        AND A1.EMPL_RCD = A.EMPL_RCD)
        AND A.EFFSEQ = (SELECT MAX(A2.EFFSEQ) FROM PS_JOB A2
                        WHERE A2.EMPLID = A.EMPLID
                        AND A2.EMPL_RCD = A.EMPL_RCD
                        AND A2.EFFDT = A.EFFDT)
        AND B.EFFDT =   (SELECT MAX(B1.EFFDT) FROM PS_COMPANY_TBL B1
                         WHERE B1.COMPANY = B.COMPANY)

End-Select



End-Procedure

!**************************************************************************
!
! Procedure: Print_Company
!
! Description:  Get the Company Details
!
!**************************************************************************
Begin-Procedure Print_Company

        print $COMPANY_NM (4,4,30) BOLD
        print $COADD1 (+1,4,30) BOLD
        print $COADD2 (+1,4,30) BOLD
        print $COADD3 (+1,4,30) BOLD
        print $COADD4 (+1,4,30) BOLD

End-Procedure

!**************************************************************************
!
! Procedure: Get_Day_Work_Count
!
! Description: Get and print the Days Worked and Total Work Days for the payee.
!
!**************************************************************************

Begin-Procedure Get_Day_Work_Count

          Let $dayswrkd = ' '
          Let $totworkdays  = ' '
          Let $Day_type = ' '

Begin-Select on-error=SQL-Error

WRK_DAY.PIN_NUM
WRK_DAY.GPIN_DAY_TYPE
GPRSLTPIN.CALC_RSLT_VAL

   Let $Pin_Val    =   &RSLT.CALC_RSLT_VAL

    Let $Day_type   =   &WRK_DAY.GPIN_DAY_TYPE
    Let $Pin_Val    =   &GPRSLTPIN.CALC_RSLT_VAL
        IF  RTRIM(LTRIM($DAY_TYPE,' '),' ') = 'WD'
            MOVE $PIN_VAL TO $TOTWORKDAYS

            LET $TOTWORKDAYS= EDIT($TOTWORKDAYS, '999.99')
        ELSE
            IF  RTRIM(LTRIM($DAY_TYPE,' '),' ') = 'DW'
            MOVE $PIN_VAL TO $DAYSWRKD
            LET $DAYSWRKD = EDIT($DAYSWRKD, '999.99')
            END-IF
        END-IF

FROM PS_GPIN_WRK_DAY WRK_DAY,
PS_GP_RSLT_PIN GPRSLTPIN

WHERE
WRK_DAY.GPIN_PAYSLIP_ID =   $Payslip_ID

AND WRK_DAY.EFFDT           = (SELECT MAX(A2.EFFDT) FROM PS_GPIN_WRK_DAY A2
                                WHERE WRK_DAY.PIN_NUM = A2.PIN_NUM)
AND GPRSLTPIN.PIN_NUM    =   WRK_DAY.PIN_NUM
AND GPRSLTPIN.EMPLID        =   $EMPLID
AND GPRSLTPIN.CAL_RUN_ID    =   $Cal_Run_ID
AND GPRSLTPIN.GP_PAYGROUP   =   $GP_Paygroup
AND GPRSLTPIN.CAL_ID        =   $Cal_ID
AND GPRSLTPIN.RSLT_SEG_NUM  =   #Rslt_Seg_num

End-Select
End-Procedure



!**************************************************************************
!   Procedure: Define-Values
!   Description: Define general SQL Dynamic Query Variables.
!**************************************************************************
Begin-Procedure Define-Values

Let $EmplList = 'N'
Let $DeptList = 'N'
Let $LocnList = 'N'
Let $PyenList = 'N'
Let $PyGPList = 'N'
Let $No_List  = 'Y'

  If $sort_key1 <> '00'
     evaluate $sort_key1
            when = '10'
                Let $Sort_Order1  = 'ORDER BY PRC.PAY_ENTITY '
          when = '20'
                Let $Sort_Order1  ='ORDER BY PER.LOCATION '
          when = '30'
                Let $Sort_Order1  ='ORDER BY PER.DEPTID '
          when = '40'
                Let $Sort_Order1  ='ORDER BY PER.NAME '
          When = '50'
                Let $Sort_Order1  ='ORDER BY PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key2 <> '00'
     evaluate $sort_key2
            when = '10'
               Let $Sort_Order2  = ', PER.PAY_ENTITY '

          when = '20'
                Let $Sort_Order2  = ', PER.LOCATION '
          when = '30'
                Let $Sort_Order2  = ', PER.DEPTID '
          when = '40'
                Let $Sort_Order2  = ', PER.NAME '
          When = '50'
                Let $Sort_Order2  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
  If $sort_key3 <> '00'
     evaluate $sort_key3
            when = '10'
                Let $Sort_Order3  = ', PER.PAY_ENTITY '
          when = '20'
                Let $Sort_Order3  = ', PER.LOCATION '
          when = '30'
                Let $Sort_Order3  = ', PER.DEPTID '
          when = '40'
                Let $Sort_Order3  = ', PER.NAME '
          When = '50'
                Let $Sort_Order3  = ', PER.GP_PAYGROUP '
          when-other
                break
     end-evaluate
  End-if
     Let $Sort_order4 = ', PER.RSLT_SEG_NUM '
     string $Sort_order1 $Sort_order2 $Sort_order3 $Sort_order4 by ' ' into $sort_order
  if $Sort_Key1 = '00'
     Let $Sort_order = 'ORDER BY PER.NAME '
     string $Sort_order $Sort_order4 by ' ' into $sort_order
  End-If
  if ($Sort_Key1 = '20' or $Sort_Key1 = '30') or
     ($Sort_Key2 = '20' or $Sort_Key2 = '30') or
     ($Sort_Key3 = '20' or $Sort_Key3 = '30')
#define colI 72
#define colI2 87
#define colI3 89
  End-If
End-Procedure
!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
Begin-Procedure Process-Main

!Mobile Payslip - Start
    do check-mob-custom-enabled
    If( $custEnabled = 'Y')
        do init-mpslp($Cal_Run_ID)
        LET $GPwhere_clause = ' '

        Do clean_mpslp_records ($Cal_Run_ID, $GPwhere_clause)

    End-If

!Mobile Payslip -  End

  Do Get-GP-Paygroup
  Do Process-Empl-List
  Do Process-Dept-List
  Do Process-Locn-List
  Do Process-Pay-Entity-List
  Do Process-PayGroup-List

  Let #J = 1

  If $No_List = 'Y'

     While #J <= #I

        Get $GP_Pygrp FROM Gp_Paygroups(#J)
        If #j = 1
           Let $WhereTemp = ' AND (PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''

        Else
           if rtrim($GP_Pygrp,' ') <> ''
              Let $TempString = ' OR PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''

              Let $WhereTemp = $WhereTemp || $TempString
           End-if
        End-If
        Let #J = #J + 1
     End-While
     if rtrim($WhereTemp,' ') <> ''
        Let $WhereTemp = $WhereTemp || ')'
        Let $WhereClause = $WhereTemp
        Do Process-Payee
     End-if
End-If

    If( $custEnabled = 'Y')

      Do Update_Stats

    End-If

  
End-Procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
Begin-Procedure Process-Payee
   Let $First_Empl = 'Y'
   Let #No_payroll_emp = 0

Begin-Select on-error=SQL-Error
PER.EMPLID
PER.EMPL_RCD
PER.NAME
PER.SETID_DEPT
PER.DEPTID
PER.SETID_LOCATION
PER.LOCATION
PER.COMPANY
PER.GP_PAYGROUP
PER.COMP_FREQUENCY
PER.JOBTITLE
PER.PAY_ENTITY
PER.PYMT_DT
PER.SEG_BGN_DT
PER.SEG_END_DT
PER.CAL_RUN_ID
PER.CAL_ID
PER.RSLT_SEG_NUM

        Let $Emplid         = &PER.EMPLID
        Let #No_payroll_emp = #No_payroll_emp + 1

        !ePay Implementation Changes begins here

        Let #BeginPageNumber = #page-count
        !ePay Implementation Changes ends here

        do Get_Company
        do clear-address-vars
        Do Get_PAN_Number
        Do Get_ESI_Number

        ! Check for ESI Data
         IF LTRIM(rtrim($ESI_REG_NBR,' '),' ')= ''
                 MOVE 'Not Eligible' to $ESI_REG_NBR
         END-IF

        do Get_PF_Number
        !If the Employee does not exists in the GPIN_PF_ENROLL Table Print PF Not Enrolled

         IF LTRIM(rtrim($PF_NBR,' '),' ')= ''
                         MOVE 'Not Eligible' to $PF_NBR
         END-IF


        Let #Empl_Rcd       = &PER.EMPL_RCD
        Let $EmployeeName   = &PER.NAME
        Let $SetIDDept      = &PER.SETID_DEPT
        Let $Deptid         = &PER.DEPTID
        Let $SetIDLocn      = &PER.SETID_LOCATION
        Let $Location       = &PER.LOCATION
        Let $Company        = &PER.COMPANY
        Let $Comp_Freq      = &PER.COMP_FREQUENCY
        Let $Jobtitle       = &PER.JOBTITLE
       Let $Pay_Ent        = &PER.PAY_ENTITY
        Let $Pymt_Dt        = &PER.PYMT_DT
        Let $Pay_Pd_From_Dt = &PER.SEG_BGN_DT
        Let $Pay_Pd_To_Dt   = &PER.SEG_END_DT
        Let $Cal_ID         = &PER.CAL_ID

        Let $GP_Paygroup    = &PER.GP_PAYGROUP
        Let #Rslt_Seg_num   = &PER.RSLT_SEG_NUM
        Let $Cal_Run_Id     = &PER.CAL_RUN_ID 


!ePay Implementation Changes begins here
        Let $SegBgnDt      = &PER.SEG_BGN_DT
!ePay Implementation Changes ends here


  
!Check that the payee is not in an excluded location or dept


        Let $locn_excl             = 'N'
        Let $dept_excl             = 'N'
        do Get_Payslip_ID


        do Check_Excl_Dept
        do Check_Excl_Loctn

        If $locn_excl = 'N' and $dept_excl = 'N'
          do Get_Payslip_Labels
               If $Del_opt = '50'
                  Let $addr_Type = 'HOME'
                  do Get_Address
                  Let $Name = $EmployeeName
                  do adformat
                  do Compress-Address
               End-if

           do Get_Day_Work_Count
           do Get-PayEntity
           do Get_dept
           DO Get_BASEPAY
           do Get_location
           do Get_Frequency
           do Print_Empl_Details
           do Print_Heading
  
           do Get_ED_Sections
           do Print_Summ_Lbls
           do Get_Payment_Summ   



           do Get_Leave
           do Get_Disburs_Banked
           do Get_Disburs_NonBanked
           do Get_Messages
           Let $End_Msg = '***** End Of Payslip *****'
           print $End_msg (+2, 10)   Bold Center
   


!ePay Implementation Changes begins here
          Let #EndPageNumber = #page-count
!ePay Implementation Changes ends here

!ePay Implementation Changes begins here
          do GP-ePay-Guide  ! if ePay installed write Guide data for each payslip
!ePay Implementation Changes ends here

           NEW-PAGE
           do clear-address-vars
        End-If
FROM PS_GPIN_SS_PSLP_VW PER


  WHERE
    PER.CAL_RUN_ID  = $Cal_Run_ID
      [$whereClause]
      [$sort_order]
End-Select

End-Procedure

!**************************************************************************
! Procedure :   Clear-address-vars
! Description  :Clear the variables set previously
!**************************************************************************
begin-procedure clear-address-vars

  Let $address1   = ''
  Let $address2   = ''
  Let $address3   = ''
  Let $address4   = ''
  Let $City       = ''
  Let $State      = ''
  Let $Postal     = ''
  let $ADDLINE1 = ''
  let $ADDLINE2 = ''
  let $ADDLINE3 = ''
  let $ADDLINE31 = ''
  let $ADDLINE4 = ''
  let $ADDLINE5 = ''
  let $ADDLINE6 = ''
end-procedure

!**************************************************************************
! Procedure:    Get_Payslip_Labels
! Description:  Get the payslip labels on delivery option for the payees
!               based on the paygroup
!**************************************************************************
Begin-Procedure Get_Payslip_Labels


Begin-Select on-error=SQL-Error

PSLP.GPIN_DEL_OPT
PSLP.GPIN_LBL_ACUM1
PSLP.GPIN_LBL_ACUM2
PSLP.GPIN_LBL_ACUM3
PSLP.GPIN_LBL_ACUM4
PSLP.GPIN_LBL_ACUM5
PSLP.GPIN_LBL_ACUM6


!Check if an override for the delivery address exits
        Let $Del_Opt               = &PSLP.GPIN_DEL_OPT

        do Check_Override_Add
!If the deleivery option is secondary get the details

        If $Del_opt = '60' !then get the secondary address
              Let $addr_Type = 'MAIL'
              do Get_Address
        End-If

        Let $Acum_Lbl1      = &PSLP.GPIN_LBL_ACUM1
        Let $Acum_Lbl2      = &PSLP.GPIN_LBL_ACUM2
        Let $Acum_Lbl3      = &PSLP.GPIN_LBL_ACUM3
        Let $Acum_Lbl4      = &PSLP.GPIN_LBL_ACUM4
        Let $Acum_Lbl5      = &PSLP.GPIN_LBL_ACUM5
        Let $Acum_Lbl6      = &PSLP.GPIN_LBL_ACUM6

FROM PS_GPIN_PSLP PSLP,
PS_GP_PG_DTL_SGPIN SGPIN
WHERE PSLP.EFFDT = (SELECT MAX(PSLP1.EFFDT)
                 FROM PS_GPIN_PSLP PSLP1
                 WHERE PSLP1.EFFDT <= PSLP.EFFDT)
AND PSLP.GPIN_PAYSLIP_ID = SGPIN.GPIN_PAYSLIP_ID
AND GP_PAYGROUP = $GP_Paygroup
End-Select

End-Procedure
!**************************************************************************
!
! Procedure:  Print_Summ_Lbls
!
! Description: Print the summary headings/labels
!**************************************************************************
Begin-Procedure Print_Summ_Lbls

!ePay Implementation Changes begins here
   !Let #BeginPageNumber = #page-count
!ePay Implementation Changes ends here

        print 'Pay Summary' (+4) Center Bold Underline

        Do Find-Start-Pos ($Acum_Lbl1, {colAC1},#ReturnCol)
        print $Acum_Lbl1 (+1, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl2, {colAC2},#ReturnCol)
        print $Acum_Lbl2 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl3, {colAC3},#ReturnCol)
        print $Acum_Lbl3 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl4, {colAC4},#ReturnCol)
        print $Acum_Lbl4 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl5, {colAC5},#ReturnCol)
        print $Acum_Lbl5 (0, #ReturnCol) Bold

        Do Find-Start-Pos ($Acum_Lbl6, {colAC6},#ReturnCol)
        print $Acum_Lbl6 (0, #ReturnCol) Bold

End-Procedure
!
!**************************************************************************
! Procedure:  Find-Start-Pos
! Description: Control the positioning  print the headings
!**************************************************************************
Begin-Procedure Find-Start-Pos($Acum_Lbl, #StartCol,:#ReturnCol)
     Let $Acum_lbl = rtrim($Acum_lbl,' ')
     Let #Len = length($Acum_lbl)
     Let #ReturnCol = (#StartCol + 10) - #Len
     if #ReturnCol <= 0
        Let #ReturnCol = #StartCol
     End-if
End-Procedure

!**************************************************************************
! Procedure:  Pad-String
! Description: Control the positioning  of the values
!**************************************************************************
Begin-Procedure Pad-String($Label, $Value,:$ReturnVal)
     Let #MaxLblLen = 17
     Let #Vallen  = length($Label)
     if #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
     else
        Let $PadVar = ''
     end-if
     Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-Procedure


!**************************************************************************
! Procedure: Get_BASEPAY
! Description: Get the BASEPAY of the Employee
!**************************************************************************
Begin-Procedure Get_BASEPAY
Let #BASEPAY = 0

Begin-Select on-error=SQL-Error
A.CALC_RSLT_VAL

   Let #BASEPAY       = &A.CALC_RSLT_VAL + #BASEPAY

    FROM  PS_GP_RSLT_PIN A
            , PS_GP_PIN_NM_VW B
   WHERE

    A.EMPLID = $Emplid
    AND A.CAL_RUN_ID = $Cal_Run_ID
    AND  A.PIN_NUM = B.PIN_NUM
    AND  B.PIN_NM IN ('INSAL', 'INHRLY')


End-Select
End-Procedure

!**************************************************************************
! Procedure: Get_ESI_Number
! Description: Get the ESI Number of the Employee
!**************************************************************************
Begin-Procedure Get_ESI_Number

        Let $ESI_REG_NBR = ''
        Let $ESI_REG_IND = ''


Begin-Select on-error=SQL-Error
A.GPIN_REG_NBR
A.GPIN_REG_IND

    Let $ESI_REG_NBR = &A.GPIN_REG_NBR
    Let $ESI_REG_IND = &A.GPIN_REG_IND

            If (LTRIM(rtrim($ESI_REG_NBR,' '),' ')= ''  AND
                 $REG_IND = 'Y')
                 move 'Applied' to $ESI_REG_NBR

            else
                If  $REG_IND = 'N'
                     move 'Not Enrolled' to $PF_NBR
                end-if
            End-If

    FROM PS_GPIN_ESI_ENROLL A
    WHERE A.EMPLID = $Emplid
    AND ( A.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_GPIN_ESI_ENROLL A1
        WHERE A.EMPLID = A1.EMPLID)
        AND A.EFF_STATUS = 'A' )
End-Select

End-Procedure


!**************************************************************************
! Procedure: Get_PF_Number
! Description: Get the PF Number of the Employee
!**************************************************************************
Begin-Procedure Get_PF_Number

        Let $PF_NBR = ''
        Let $REG_IND = ''
        Let $UAN = ''

Begin-Select on-error=SQL-Error
PF.GPIN_REG_NBR
PF.GPIN_REG_IND
PF.GPIN_EE_PF_UAN

    Let $PF_NBR = &PF.GPIN_REG_NBR
    Let $REG_IND = &PF.GPIN_REG_IND
    Let $UAN = to_char(&PF.GPIN_EE_PF_UAN)

            If (LTRIM(rtrim($PF_NBR,' '),' ') = '' AND
                 $REG_IND = 'Y')
                 MOVE 'Applied' to $PF_NBR

            ELSE
                If (LTRIM(rtrim($PF_NBR,' '),' ') = '' AND
                     $REG_IND = 'N')
                     MOVE 'Not Enrolled' to $PF_NBR
                end-if
            END-IF

            If LTRIM(rtrim($UAN,' '),' ') = '0'
               Let $UAN = ''
            END-IF

  FROM PS_GPIN_PF_ENROLL PF
        WHERE PF.EMPLID = $Emplid
        AND PF.EFFDT = (SELECT MAX(A1.EFFDT) FROM PS_GPIN_PF_ENROLL A1
              WHERE PF.EMPLID = A1.EMPLID)
        AND PF.EFF_STATUS = 'A'
End-Select
End-Procedure


!**************************************************************************
! Procedure: Get_PAN_Number
! Description: Get the PAN of the Employee
!**************************************************************************

Begin-Procedure Get_PAN_Number
    Let $PAN_ID = ''
    Let $EMPLID = ltrim(rtrim($EMPLID,' '),' ')

Begin-Select on-error=SQL-Error
A.NATIONAL_ID
    let $PAN_ID = &A.NATIONAL_ID
FROM PS_PERS_NID A
WHERE A.EMPLID = $EMPLID
AND A.NATIONAL_ID_TYPE = 'PAN'
End-Select
End-Procedure

!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
Begin-Procedure Print_Empl_Details

  do Format-DateTime($Pay_Pd_From_Dt, $Pay_Dt_From_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pay_Pd_To_Dt, $Pay_Dt_To_Conv, {DEFDATE}, '', '')
  do Format-DateTime($Pymt_Dt, $Pymt_Dt_Conv, {DEFDATE}, '', '')

  Let $Header1 = 'Pay Period'

  Let $Header2 = 'Pay Period To    ' || $Pay_Dt_To_Conv

  Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv

  Do Pad-String ($Header1,$PayDates,$Header1)

  Let $Header3 = 'Payment Date'
  Do Pad-String ($Header3,$Pymt_Dt_Conv,$Header3)

  Let $Header4a = 'Employee Number'

  Do Pad-String ($Header4A,$Emplid,$Header4A)

  Let $Header5 = 'Name:            ' || $Name

  Let $Header5a = 'Pay Entity'
  Do Pad-String ($Header5A,$PayEntityDescr,$Header5A)

  if $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
        Let $SortDeptid = rtrim($DeptID,' ')
        Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
  else
        Let $Sort_Dept = $Dept_Name
  end-if

  Do Pad-String ($Header6A,$Sort_Dept,$Header6A)


  if $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
        Let $SortLocation = rtrim($Location,' ')
        Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
  else
        Let $Sort_Location = $lctnDesc
  end-if

  Let $Header6a = 'Department'

  Do Pad-String ($Header6A,$dept_name,$Header6A)

  Let $Header6b = 'Location'

  Do Pad-String ($Header6b,$lctnDesc,$Header6b)

  Let $Comprate = to_char(#BASEPAY)
  Let $Comprate = edit($Comprate, '999,999.99')
  Let $Compensation = ltrim($comprate,' ')
  Let $Header8a = 'Job Description'
  Do Pad-String ($Header8a,$Jobtitle,$Header8a)

  Let $Header9a = 'ESI Number'
  Do Pad-String ($Header9A,$ESI_REG_NBR,$Header9A)

  Let $Header10a = 'PF Number'
  Do Pad-String ($Header10A,$PF_NBR,$Header10A)

  Let $Header11aa = 'UAN'
  Do Pad-String ($Header11AA,$UAN,$Header11AA)

  Let $Header11a = 'PAN'
  Do Pad-String ($Header11A,$PAN_ID,$Header11A)

  Let $Header12a = 'Working Days'
  Do Pad-String ($Header12A,$totworkdays,$Header12A)

  Let $Header13a = 'Days Worked'
  Do Pad-String ($Header13A,$dayswrkd,$Header13A)


End-Procedure

!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
Begin-Procedure Print_Heading
        print 'Payment Details' (+2,) Center Bold Underline
        print '|' (+2,{ColA}) Bold
        graphic (0,3,25) horz-line
        graphic (0,44,27) horz-line
        print 'Current Values' (0,28) bold
        print '|Payback|'(0,71) Bold
        graphic (0,81,8) horz-line
        print 'Adjustments' (0,89) bold
        graphic (0,101,8) horz-line
        print '|' (0,109)
        graphic (0,110,4) horz-line
        print 'YTD Values' (0,114) bold
        graphic (0,125,4) horz-line
        print '|' (0,129)

End-Procedure

!**************************************************************************
! Procedure: Get_ED_Sections
! Description:  Get the sections applicable based on the payslip id
!**************************************************************************
Begin-Procedure Get_ED_Sections


  Let $sql-statement = ' Get_Section'
Begin-Select on-error=SQL-Error
SECT.DESCR
SECT.SEQ_NUM
        Let $Sect_Hdg           = rtrim(&SECT.DESCR, ' ')
        Let #Sect_Seq_Num       = &SECT.SEQ_NUM
        do Print_ED_Headings
        do Get_ErnDed_Results

FROM PS_GPIN_PSLP_SECT SECT
WHERE SECT.GPIN_PAYSLIP_ID = $Payslip_ID
      AND SECT.EFFDT = (SELECT MAX(SECT1.EFFDT) FROM PS_GPIN_PSLP_SECT SECT1
                                WHERE SECT1.GPIN_PAYSLIP_ID = $Payslip_ID
                                  AND SECT1.EFFDT <= $Pymt_Dt)
ORDER BY SECT.SEQ_NUM

End-Select
End-Procedure


!**************************************************************************


! Procedure: Get_ErnDed_Results
! Description: Get and print the earnings and deduction details for the payee.
!**************************************************************************
Begin-Procedure Get_ErnDed_Results

        Let $TenCharVar = '1234567890'

Begin-Select on-error=SQL-Error
PIN.PIN_NUM
ED.DESCR
PIN.DESCR
PIN.PIN_NM
PIN.PIN_TYPE
ED.GPIN_DESC_TYPE
SUM(RSLT.CALC_RSLT_VAL)   &RSLT.CALC_RSLT_VAL
RSLT.UNIT_RSLT_VAL
RSLT.RATE_RSLT_VAL
RSLT.BASE_RSLT_VAL
RSLT.PCT_RSLT_VAL
RSLT.RSLT_PAYBK
RSLT.CALC_ADJ_VAL
RSLT.BASE_ADJ_VAL
RSLT.UNIT_ADJ_VAL
RSLT.INSTANCE
ED.GPIN_YTD_AC_AMT
ED.GPIN_YTD_AC_UNITS
ED.GPIN_BSE_COMP_YN
ED.GPIN_PCT_COMP_YN
ED.GPIN_RTE_COMP_YN
ED.GPIN_UNT_COMP_YN
ED.GPIN_YTD_AC_AMT_YN
ED.GPIN_YTD_AC_UNT_YN
ED.SEQ_NUM5
PRC.PRD_BGN_DT                   
PRC.PRD_END_DT                    
PRC.ORIG_CAL_RUN_ID              
PRC.RUN_TYPE  

       Let $PrdBgnDt     = &PRC.PRD_BGN_DT
       Let $PrdEndDt     = &PRC.PRD_END_DT
       Let $orig_Cal_Run_ID = &PRC.ORIG_CAL_RUN_ID
       Let $Run_Type = &PRC.RUN_TYPE
       Let #Instance = &RSLT.INSTANCE
       Let #Seq_Num5 = &ED.SEQ_NUM5  

!Get the accumulated value of the hours , if entered at setup
       if &ED.GPIN_YTD_AC_UNT_YN = 'Y'
        if &ED.GPIN_YTD_AC_UNITS > 0
           Let #Pin_Num = &ED.GPIN_YTD_AC_UNITS
           do Get_Accum_Values
           Let #Acum_Rslt_Hrs         = #Calc_Rslt_Val
        end-if
       end-if
!Get the accumulated value of the amount, if entered at setup
       if &ED.GPIN_YTD_AC_AMT_YN = 'Y'
           Let #Pin_Num = &ED.GPIN_YTD_AC_AMT
           do Get_Accum_Values
           Let #Acum_Rslt_Amt         = #Calc_Rslt_Val
       end-if

        Let $ED_Descr                 = &ED.DESCR
        Let $Pin_Descr                = &PIN.DESCR
        Let $Descr_Type               = &ED.GPIN_DESC_TYPE
        Let $Pin_Nm                   = &PIN.PIN_NM
        Let #ED_PinNum                = &PIN.PIN_NUM
        Let $PinType                  = &PIN.PIN_TYPE  
        Let #Calc_Rslt_Val            = &RSLT.CALC_RSLT_VAL
        Let #Acum_PinNum              = &ED.GPIN_YTD_AC_AMT
        Let #Acum_UnitPin             = &ED.GPIN_YTD_AC_UNITS   
        Let $PrdBgnDt                 = &PRC.PRD_BGN_DT
        Let $PrdEndDt                 = &PRC.PRD_END_DT
        Let $orig_Cal_Run_ID          = &PRC.ORIG_CAL_RUN_ID
        Let $Run_Type                 = &PRC.RUN_TYPE
        Let #Instance                 = &RSLT.INSTANCE
        Let #Unit_Rslt_Val            = &RSLT.UNIT_RSLT_VAL
   
        Let #Rate_Rslt_Val            = &RSLT.RATE_RSLT_VAL
        Let #Base_Rslt_Val            = &RSLT.BASE_RSLT_VAL
        Let #Pct_Rslt_Val             = &RSLT.PCT_RSLT_VAL
        Let #Rslt_Paybk               = &RSLT.RSLT_PAYBK
        Let #Calc_Adj_Val             = &RSLT.CALC_ADJ_VAL
        Let #Base_Adj_Val             = &RSLT.BASE_ADJ_VAL
        Let #Unit_Adj_Val             = &RSLT.UNIT_ADJ_VAL


        Let $Print_Base_YN        = &ED.GPIN_BSE_COMP_YN
        Let $Print_Pct_YN        = &ED.GPIN_PCT_COMP_YN
        Let $Print_Rte_YN        = &ED.GPIN_RTE_COMP_YN
        Let $Print_Unt_YN        = &ED.GPIN_UNT_COMP_YN

        Let #total_curr_amt  = #total_curr_amt + #Calc_Rslt_Val
        Let #total_pybck_amt = #total_pybck_amt + #Rslt_Paybk
        Let #total_adj_amt   = #total_adj_amt + #Calc_Adj_Val


        Let $PinSec = '00'
        evaluate $PinType 
            when = 'ER'
                Let $PinSec = '10'
            when = 'DD'
                Let $PinSec = '20'
            when = 'AC'
                Let $PinSec = '40'
        end-evaluate



        evaluate $Descr_Type
                when = '10'
                        Let $Descr_Temp = $PIN_Descr
                when = '20'
                        Let $Descr_Temp = $ED_Descr
                when = '30'
                        Let $Descr_Temp = $Pin_Nm
        end-evaluate

        Let $Descr = substr($Descr_Temp,1 , 16)

     If #Current-line >  80
             NEW-PAGE
             do Print_Heading
             do Print_ED_Headings
     else
             print $Descr         (+1, {ColA})

        If $Print_Base_YN = 'Y'
           if #Base_Rslt_VAl <> 0
              Do Find-Start-Pos ($TenCharVar, {colED3},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Base_Rslt_Val (0, #ReturnCol) edit '9999999.99'
           end-if
        End-If
        If $Print_Pct_YN = 'Y'
           if #Pct_Rslt_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED5},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Pct_Rslt_Val  (0, #ReturnCol) edit '9999999.99'
           end-if
        End-If
        If $Print_Rte_YN = 'Y'
           IF #Rate_Rslt_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED6},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Rate_Rslt_Val (0, #ReturnCol) edit '9999999.99'
           end-if
        End-If
        If $Print_Unt_YN = 'Y'
           if #Unit_Rslt_Val <> 0
              Do Find-Start-Pos ($TenCharVar, {colED7},#ReturnCol)
              Let #ReturnCol = #ReturnCol - 3
              print #Unit_Rslt_Val (0, #ReturnCol) edit '9999999.99'
           end-if
        End-If
        if #Calc_Rslt_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Calc_Rslt_Val (0, #ReturnCol)   edit '9999999.99'
        End-If
        If #Rslt_Paybk > 0
           Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Rslt_Paybk    (0, #ReturnCol)   edit '9999999.99'
        end-if
        if #Calc_Adj_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Calc_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
        end-if
        if #Base_Adj_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED11},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Base_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
        end-if
        if #Unit_Adj_Val <> 0
           Do Find-Start-Pos ($TenCharVar, {colED12},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Unit_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
        end-if
        if #Acum_Rslt_Hrs <> 0
           Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Acum_Rslt_Hrs (0, #ReturnCol)  edit '9999999.99'
        end-if
        if #Acum_Rslt_Amt <> 0
           Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           print #Acum_Rslt_Amt (0, #ReturnCol)  edit '9999999.99'
           Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt + #Acum_Rslt_Amt_TTL
        end-if

        If ( $custEnabled = 'Y' )
            do Get-Element-Group
            do Get-Section_Number
            do Get-ACSection_Number

            !Check for period segmentation
            If ( $PrdEndDt = $Pay_Pd_To_Dt)
                Let $Mp_Payslip_Id = to_char(#Empl_Rcd ) || ' ' || Edit($PrdEndDt,'MM/DD/YYYY')
            else
                Let $Mp_Payslip_Id = to_char(#Empl_Rcd ) || ' ' || Edit($Pay_Pd_To_Dt,'MM/DD/YYYY')
            End-If


            !**********Populate Mobile Payslip Earnings/Deductions into staging tables**************

            LET MPSLP_ED.EMPLID(0) = $Emplid
            LET MPSLP_ED.CAL_RUN_ID(0) = $Cal_Run_Id
            LET MPSLP_ED.EMPL_RCD(0) = #Empl_Rcd
            LET MPSLP_ED.GP_PAYGROUP(0) = $GP_Paygroup
            LET MPSLP_ED.CAL_ID(0) = $Cal_ID 
            LET MPSLP_ED.ORIG_CAL_RUN_ID(0) = $orig_Cal_Run_ID 
            LET MPSLP_ED.RSLT_SEG_NUM(0) = #Rslt_Seg_num
            LET MPSLP_ED.GP_PSLP_SRCPRODUCT(0) = 'GPIND'
            LET MPSLP_ED.GP_PSLP_ID(0) = $Mp_Payslip_Id
            LET MPSLP_ED.INSTANCE(0) = #Instance
            LET MPSLP_ED.PIN_NUM(0) = #ED_PinNum
            LET MPSLP_ED.SLICE_BGN_DT(0) = $Slice_Bgn_Dt
            LET MPSLP_ED.SLICE_END_DT(0) = $Slice_End_Dt
            LET MPSLP_ED.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN
            LET MPSLP_ED.ED_ASSIGN_INSTANCE(0) = 0
            LET MPSLP_ED.PI_INSTANCE(0) = 0
            LET MPSLP_ED.PRD_BGN_DT(0) = $PrdBgnDt
            LET MPSLP_ED.PRD_END_DT(0) = $PrdEndDt 
            LET MPSLP_ED.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
            LET MPSLP_ED.SEG_END_DT(0) = $Pay_Pd_To_Dt
            LET MPSLP_ED.PYMT_DT(0) =  $Pymt_Dt
            LET MPSLP_ED.RUN_TYPE(0) = rtrim($Run_Type, ' ')
            LET MPSLP_ED.CALC_RSLT_VAL(0) = #Calc_Rslt_Val
            LET MPSLP_ED.GP_MPSLP_SECTION(0) = $GP_section_nm
            LET MPSLP_ED.CALC_DELTA_VAL(0) =    #Calc_Adj_Val         
            LET MPSLP_ED.BASE_RSLT_VAL(0) =     #Base_Rslt_Val      
            LET MPSLP_ED.BASE_ADJ_VAL(0) =     #Base_Adj_Val       
            LET MPSLP_ED.RATE_RSLT_VAL(0) =     #Rate_Rslt_Val        
            LET MPSLP_ED.UNIT_RSLT_VAL(0) =     #Unit_Rslt_Val       
            LET MPSLP_ED.UNIT_ADJ_VAL(0) =      #Unit_Adj_Val
            LET MPSLP_ED.PCT_RSLT_VAL(0) =    #Pct_Rslt_Val  
            LET MPSLP_ED.GP_MPSLP_SPRNT_ORD(0) =   $PinSec        
            LET MPSLP_ED.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
            LET MPSLP_ED.GP_MPSLP_PRNT_ORD(0) =    #SeqNum5
            LET MPSLP_ED.GP_MPSLP_PIN_DESCR(0) =   $Descr

            do insert_mpslp_ernded_row


            !**********Populate Mobile Payslip Accumulators into staging tables***************

            LET MPSLP_ACUM.EMPLID(0) = $Emplid
            LET MPSLP_ACUM.CAL_RUN_ID(0) = $Cal_Run_Id
            LET MPSLP_ACUM.EMPL_RCD(0) = #Empl_Rcd
            LET MPSLP_ACUM.GP_PAYGROUP(0) = $GP_Paygroup
            LET MPSLP_ACUM.CAL_ID(0) = $Cal_ID 
            LET MPSLP_ACUM.ORIG_CAL_RUN_ID(0) = $orig_Cal_Run_ID 
            LET MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0) = 'GPIND'
            LET MPSLP_ACUM.GP_PSLP_ID(0) = $Mp_Payslip_Id
            LET MPSLP_ACUM.RSLT_SEG_NUM(0) = #RSEGNM
            LET MPSLP_ACUM.PIN_NUM(0) = #Acum_PinNum
            LET MPSLP_ACUM.EMPL_RCD_ACUM(0) = #Empl_Rcd_Acum
            LET MPSLP_ACUM.ACM_FROM_DT(0) = $Acm_from_Dt
            LET MPSLP_ACUM.ACM_THRU_DT(0) = $Acm_Thru_Dt
            LET MPSLP_ACUM.SEQ_NUM8(0) = #Seq_Num8
            LET MPSLP_ACUM.PIN_ELEM_GRP_NUM(0) = #PARENT_PIN_Y
            LET MPSLP_ACUM.SLICE_BGN_DT(0) = $Slice_Bgn_Dt
            LET MPSLP_ACUM.SLICE_END_DT(0) = $Slice_End_Dt
            LET MPSLP_ACUM.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
            LET MPSLP_ACUM.SEG_END_DT(0) = $Pay_Pd_To_Dt
            LET MPSLP_ACUM.PRD_BGN_DT(0) = $PrdBgnDt
            LET MPSLP_ACUM.PRD_END_DT(0) = $PrdEndDt
            LET MPSLP_ACUM.PYMT_DT(0) = $Pymt_Dt
            LET MPSLP_ACUM.RUN_TYPE(0) = $Run_Type
            LET MPSLP_ACUM.COUNTRY(0) = $Country
            LET MPSLP_ACUM.CALC_VAL(0) = #CalcVal
            LET MPSLP_ACUM.CALC_RSLT_VAL(0) = #Acum_Rslt_Amt
            LET MPSLP_ACUM.GP_MPSLP_SECTION(0) = $GP_section_nm_Y
            LET MPSLP_ACUM.CALC_DELTA_VAL(0) = 0


            LET MPSLP_ACUM.GP_MPSLP_SPRNT_ORD(0) =   '40'
            LET MPSLP_ACUM.GP_MPSLP_SUBSECTN(0) =    $Sect_Hdg   
            LET MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0) =    #Seq_Num5
            LET MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0) =   $Descr

            If ( (&ED.GPIN_YTD_AC_UNT_YN = 'Y' ) OR (&ED.GPIN_YTD_AC_AMT_YN = 'Y') )

               do insert_mpslp_acum_row

            End-if

        End-If
        !**********Populate Mobile Payslip Ends***************

        Let #Calc_Rslt_Val = 0
        Let #Acum_Rslt_Hrs = 0
        Let #Acum_Rslt_Amt = 0

    end-if


FROM PS_GPIN_PSLP_ED ED
, PS_GP_RSLT_ERN_DED RSLT
, PS_GP_PIN PIN
, PS_GP_PYE_PRC_STAT PRC


WHERE ED.PIN_NUM         = RSLT.PIN_NUM

  AND ED.PIN_NUM         = PIN.PIN_NUM

  AND ED.GPIN_PAYSLIP_ID = $Payslip_ID
  AND ED.SEQ_NUM         = #Sect_Seq_Num
  AND PRC.EMPLID         = $Emplid
  AND PRC.EMPL_RCD       = #Empl_Rcd
  AND RSLT.EMPLID        = PRC.EMPLID
  AND RSLT.EMPL_RCD      = PRC.EMPL_RCD
  AND RSLT.CAL_RUN_ID    = PRC.CAL_RUN_ID
  AND RSLT.GP_PAYGROUP   = PRC.GP_PAYGROUP
  AND RSLT.CAL_ID        = PRC.CAL_ID
  AND PRC.CAL_RUN_ID     = $Cal_Run_ID
  AND PRC.CAL_ID         = $Cal_ID
  AND PRC.GP_PAYGROUP    = $GP_Paygroup
  AND RSLT.RSLT_SEG_NUM  = #Rslt_Seg_num
  AND ED.EFFDT = (SELECT MAX(ED1.EFFDT) FROM PS_GPIN_PSLP_ED ED1
                    WHERE ED1.GPIN_PAYSLIP_ID = ED.GPIN_PAYSLIP_ID
                    AND ED1.SEQ_NUM = ED.SEQ_NUM )
       GROUP BY PIN.PIN_NUM, ED.DESCR, PIN.DESCR, PIN.PIN_NM, PIN.PIN_TYPE, ED.GPIN_DESC_TYPE, RSLT.UNIT_RSLT_VAL
       , RSLT.RATE_RSLT_VAL, RSLT.BASE_RSLT_VAL, RSLT.PCT_RSLT_VAL, RSLT.RSLT_PAYBK, RSLT.CALC_ADJ_VAL
       , RSLT.BASE_ADJ_VAL, RSLT.UNIT_ADJ_VAL,RSLT.INSTANCE, ED.GPIN_YTD_AC_AMT, ED.GPIN_YTD_AC_UNITS, ED.GPIN_BSE_COMP_YN
       , ED.GPIN_PCT_COMP_YN, ED.GPIN_RTE_COMP_YN, ED.GPIN_UNT_COMP_YN, ED.GPIN_YTD_AC_AMT_YN, ED.GPIN_YTD_AC_UNT_YN, ED.SEQ_NUM5
       , PRC.PRD_BGN_DT, PRC.PRD_END_DT, PRC.ORIG_CAL_RUN_ID, PRC.RUN_TYPE
ORDER BY ED.SEQ_NUM5
End-Select

        if #total_curr_amt <> 0
           Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
           Let #ReturnCol = #ReturnCol - 3
           Let $Sec_Total = 'Total ' || $Sect_Hdg
           print $Sec_Total (+2, {ColA}) Bold
           print #total_curr_amt (0, #ReturnCol)   edit '9999999.99'
        else
           if #total_pybck_amt <> 0 or #total_adj_amt <> 0 or #Acum_Rslt_Amt_TTL <> 0
              Let $Sec_Total = 'Total ' || $Sect_Hdg
              print $Sec_Total (+2, {ColA}) Bold
           End-If
        End-If

        if #total_pybck_amt <> 0
            Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 4
            print #total_pybck_amt   (0, #ReturnCol)  edit '99999999.99'

       end-if

       if  #total_adj_amt <> 0
            Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 4
            print #total_adj_amt   (0, #ReturnCol)  edit '99999999.99'
        end-if

        if #Acum_Rslt_Amt_TTL <> 0
            Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 4
            print #Acum_Rslt_Amt_TTL (0, #ReturnCol)  edit '99999999.99'
        end-if

        Let $New_Page_ED = 'N'
        Let #total_curr_amt = 0
        Let #total_adj_amt = 0
        Let #total_pybck_amt = 0
        Let #Acum_Rslt_Amt_TTL = 0
End-Procedure

!**************************************************************************
! Procedure: Get_Leave
! Description: Get and print the leave balances for the payee.
!**************************************************************************
Begin-Procedure Get_Leave
        Let $First_Abs = 'Y'

Begin-Select
ABTMPL.SEQ_NUM
ABTMPL.GPIN_PIN_PSLP_NUM
ABTMPL.PIN_NUM           &PIN1
ABTMPL.GPIN_DESC_TYPE
ABTMPL.DESCR
ABTMPL.GPIN_PIN_AC1_NUM  &PIN2
ABTMPL.GPIN_PIN_AC2_NUM  &PIN3
ABTMPL.GPIN_PIN_AC3_NUM  &PIN4

        Let #Pin1 = &PIN1  ! Entitlement
        Let #Pin2 = &PIN2  ! Balance
        Let #Pin3 = &PIN3  ! Adjustment
        Let #Pin4 = &PIN4  ! Take

        Let $AB_Descr = &ABTMPL.DESCR
        Let $Descr_Type = &ABTMPL.GPIN_DESC_TYPE

        Do Get-Leave-Data

        if #Pin1Val <> 0 or #Pin2Val <> 0 or #Pin3Val <> 0 or #Pin4Val <> 0
         If #Current-line >  80
             NEW-PAGE
             do Print_Heading
         Else
           If $First_Abs = 'Y'
              do Print_Abs_headings
              Let $First_Abs = 'N'
           end-if

           print $Descr        (+1, {ColA})

           if #Pin1Val <> 0
              print #Pin1Val  (0, {ColD})   edit '9999.999999'
           end-if
           if #Pin2Val <> 0
              print #Pin2Val  (0, {ColN})  edit '9999.999999'
           end-if
           if #Pin3Val <> 0
              print #Pin3Val  (0, {ColG})  edit '9999.999999'
           end-if
           if #Pin4Val <> 0
              print #Pin4Val  (0, {ColK})  edit '9999.999999'
           end-if
         end-if
        end-if

   FROM PS_GPIN_PSLP_ABS ABTMPL
    WHERE ABTMPL.GPIN_PAYSLIP_ID = $Payslip_Id
     AND ABTMPL.EFFDT  = (SELECT MAX(ABTMPL1.EFFDT)
                             FROM PS_GPIN_PSLP_ABS ABTMPL1
                            WHERE ABTMPL1.GPIN_PAYSLIP_ID = ABTMPL.GPIN_PAYSLIP_ID
                              AND ABTMPL1.EFFDT <= $Pymt_Dt)
ORDER BY ABTMPL.SEQ_NUM
End-Select

          Let $New_Page_Abs = 'N'

End-Procedure

!**************************************************************************
! Procedure: Get-Leave-Data
! Description: Get and print the leave balances for the payee.
!**************************************************************************
Begin-Procedure Get-Leave-Data
   Let #Pin1Val = 0
   Let #Pin2Val = 0
   Let #Pin3Val = 0
   Let #Pin4Val = 0

Begin-Select on-error=SQL-Error
D.PIN_NUM
D.PIN_NM
ABS.CALC_RSLT_VAL
D.DESCR

        Let $Pin_Descr                 = &D.DESCR
        Let $Pin_Nm                = &D.PIN_NM

           evaluate $Descr_Type
           when = '10'
                Let $Descr = $Ab_Descr
           when = '20'
                Let $Descr = $Pin_Descr
           when = '30'
                Let $Descr = $Pin_Nm
        end-evaluate

        if &D.PIN_NUM = #PIN1
           Let #Pin1Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN2
           Let #Pin2Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN3
           Let #Pin3Val = &ABS.CALC_RSLT_VAL
        end-if
        if &D.PIN_NUM = #PIN4
           Let #Pin4Val = &ABS.CALC_RSLT_VAL
        end-if
FROM PS_GP_PYE_PRC_STAT A
   , PS_GP_PYE_SEG_STAT B
   , PS_GP_PIN D
   , PS_GP_RSLT_ACUM ABS
   , PS_GP_RUN_TYPE DR
   , PS_GP_CAL_PRD H
  WHERE A.CAL_RUN_ID         = B.CAL_RUN_ID
    AND A.EMPLID             = B.EMPLID
    AND A.EMPL_RCD           = B.EMPL_RCD
    AND A.GP_PAYGROUP        = B.GP_PAYGROUP
    AND A.CAL_ID             = B.CAL_ID
    AND DR.RUN_TYPE           = A.RUN_TYPE
    AND DR.CALC_TYPE          = 'A'
    AND A.CAL_PRD_ID         = H.CAL_PRD_ID
    AND A.PRD_BGN_DT         = H.PRD_BGN_DT
    AND A.PRD_END_DT         = H.PRD_END_DT
    AND B.EMPLID             = ABS.EMPLID
    AND B.CAL_RUN_ID         = ABS.CAL_RUN_ID
    AND B.EMPL_RCD           = ABS.EMPL_RCD
    AND ABS.EMPL_RCD         = ABS.EMPL_RCD_ACUM
    AND B.CAL_ID             = ABS.CAL_ID
    AND B.GP_PAYGROUP        = ABS.GP_PAYGROUP
    AND ABS.PIN_NUM          = D.PIN_NUM
    AND (ABS.PIN_NUM = #PIN1 or ABS.PIN_NUM = #PIN2 or ABS.PIN_NUM = #PIN3 or ABS.PIN_NUM = #PIN4)
    AND (ABS.ACM_THRU_DT IS NULL
    OR
       ((ABS.ACM_THRU_DT IS NOT NULL) AND
    ABS.ACM_THRU_DT   = (SELECT MAX(ABS1.ACM_THRU_DT)
                                FROM PS_GP_RSLT_ACUM ABS1
                                WHERE ABS.EMPLID        = ABS1.EMPLID
                                AND ABS.CAL_RUN_ID      = ABS1.CAL_RUN_ID
                                AND ABS.EMPL_RCD        = ABS1.EMPL_RCD
                                AND ABS.GP_PAYGROUP     = ABS1.GP_PAYGROUP
                                AND ABS.CAL_ID          = ABS1.CAL_ID
                                AND ABS.ORIG_CAL_RUN_ID = ABS1.ORIG_CAL_RUN_ID
                                AND ABS.RSLT_SEG_NUM    = ABS1.RSLT_SEG_NUM
                                AND ABS.PIN_NUM         = ABS1.PIN_NUM
                                AND ABS.EMPL_RCD_ACUM   = ABS1.EMPL_RCD_ACUM
                          )
        )AND ABS.ACM_THRU_DT > ABS.SLICE_END_DT)
    AND A.EMPLID             = $Emplid
    AND A.EMPL_RCD           = #Empl_Rcd
    AND A.CAL_RUN_ID         = $Cal_Run_Id
    AND A.GP_PAYGROUP        = $GP_Paygroup
    AND A.PRC_ORD_TS = (SELECT MAX(A21.PRC_ORD_TS) FROM PS_GP_PYE_PRC_STAT A21, PS_GP_CAL_PRD AG21
                                       WHERE A21.EMPLID     = A.EMPLID
                                         AND A21.EMPL_RCD   = A.EMPL_RCD
                                         AND A21.CAL_PRD_ID = AG21.CAL_PRD_ID
                                         AND A21.PRD_BGN_DT = H.PRD_BGN_DT
                                         AND A21.PRD_END_DT = H.PRD_END_DT )
End-Select
End-Procedure

!**************************************************************************
! Procedure: Get_Disburs_Banked
! Description: Get and print the banking details for the payee.
!**************************************************************************
Begin-Procedure Get_Disburs_Banked

        Let $First_Disb = 'Y'

Begin-Select on-error=SQL-Error
B.GP_PMT_AMT
D.BRANCH_EC_CD
D.ACCOUNT_EC_ID
        Let $MACNO = &D.ACCOUNT_EC_ID

E.BANK_NM
    If #Current-line >  80
        NEW-PAGE
        do Print_Heading
    Else
        If $First_Disb = 'Y'
                do Print_Disb_headings
                Let $First_Disb = 'N'
        end-if

        Let $Bank_Name = &E.BANK_NM
        print $Bank_Name (+1, {ColA})
        Let $BSB_Char = edit(&D.BRANCH_EC_CD,'XXX-XXX-XXXXXXXX')
        print $BSB_char (0, {ColD})

        Let $Acct_Nbr = &D.ACCOUNT_EC_ID

        print $Acct_Nbr (0, {ColG})

        Let #Paymnt_Amt = &B.GP_PMT_AMT
        print #Paymnt_Amt (0, {ColN}) edit '999999999.99'
    End-If

FROM PS_GP_CALENDAR A
, PS_GP_PAYMENT B
, PS_GP_NET_DIST_DTL C
, PS_PYE_BANKACCT D
, PS_BANK_EC_TBL E
WHERE
        A.GP_PAYGROUP = $GP_Paygroup
    AND A.CAL_ID        = $Cal_ID

    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.EMPLID        = $Emplid
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID      = $Cal_ID


    AND C.EMPLID        = $Emplid
    AND C.EMPL_RCD      = #Empl_Rcd
    AND C.RUN_TYPE      = A.RUN_TYPE

    AND C.EFFDT =(SELECT MAX(C1.EFFDT) FROM PS_GP_NET_DIST_DTL C1 WHERE C1.EMPLID = C.EMPLID
                      AND C1.EMPL_RCD = C.EMPL_RCD
                      AND C1.RUN_TYPE = C.RUN_TYPE
                      AND C1.INSTANCE = C.INSTANCE)
    AND B.INSTANCE    = C.INSTANCE
    AND B.PMT_TYPE    = '01'


    AND D.EMPLID      = $Emplid
    AND C.ACCOUNT_ID  = D.ACCOUNT_ID

    AND D.COUNTRY_CD  = E.COUNTRY_CD
    AND D.BANK_CD     = E.BANK_CD



End-Select

End-Procedure
!**************************************************************************
! Procedure: Get_Disburs_Nonbanked
! Description: Get and print the non banking disburment details for the payee.
!**************************************************************************
Begin-Procedure Get_Disburs_Nonbanked

Begin-Select on-error=SQL-Error
PMNT.PAYMENT_MTHD    &PMNT_Mthd
SUM(PMNT.GP_PMT_AMT) &NetPayAmt

    If #Current-line >  80
        NEW-PAGE
        do Print_Heading
    Else
        If $First_Disb = 'Y'
           do Print_Non_Disb_headings
           Let $First_Disb = 'N'
        end-if

        Let #Paymnt_Amt = &NetPayAmt
        if #Paymnt_Amt <> 0
           Let $FieldName  = 'PAYMENT_MTHD'
           Let $FieldValue = &PMNT_Mthd

           Let $curr_language_cd = 'ENG'

           Do Read-Translate-Table
           Print $XlatLongName (+1,{ColA})
           print #Paymnt_Amt (0, {ColN}) edit '999999999.99'
        end-if
     End-If
FROM PS_GP_PAYMENT PMNT
    WHERE
     PMNT.CAL_RUN_ID  = $Cal_Run_ID
      AND   PMNT.EMPLID      = $Emplid

      AND PMNT.EMPL_RCD    = #Empl_Rcd

      AND PMNT.GP_PAYGROUP = $GP_Paygroup
      AND PMNT.CAL_ID      = $Cal_ID

      AND PMNT.PAYMENT_MTHD <> 'T'
      AND PMNT.PMT_TYPE    = '01'
GROUP BY PMNT.PAYMENT_MTHD
End-Select

        Let $New_Page_Dis = 'N'

End-Procedure

!**************************************************************************
! Procedure: Get_Messages
! Description: Get and print the messages for the payee.
!**************************************************************************
Begin-Procedure Get_Messages

        Let $First_Msg = 'Y'
        Let #Msg_Nbr = 0
Begin-Select on-error=SQL-Error
B.GPIN_MSG_NBR
A.GPIN_MESSAGE

        If $First_Msg = 'Y'
            print 'Messages' (+2, {ColB}) Center Bold Underline
           Let $First_Msg = 'N'
        end-if

        Let #Msg_Nbr = &B.GPIN_MSG_NBR
        Let $Message = &A.GPIN_MESSAGE

        if #Msg_nbr <> 0
           print #Msg_Nbr (+1, {ColC}) EDIT '9999'
           print $Message (0, 25) Wrap {colK} 3
        end-if

FROM PS_GPIN_PSLP_MSG A
, PS_GPIN_PSLP_RSLT B
WHERE A.CAL_RUN_ID = $Cal_Run_ID
    AND A.GPIN_MSG_NBR = B.GPIN_MSG_NBR
    AND B.EMPLID        = $Emplid
    AND B.CAL_RUN_ID    = $Cal_Run_ID
    AND B.EMPL_RCD      = #Empl_Rcd
    AND B.GP_PAYGROUP   = $GP_Paygroup
    AND B.CAL_ID        = $Cal_ID
End-Select
End-Procedure

!**************************************************************************
! Procedure: Print_ED_Headings
! Description: Prints the section headings
!**************************************************************************
Begin-Procedure Print_ED_Headings
        print $Sect_Hdg (+3,) Center Bold Underline

        print 'Description' (+1, {ColA}) Bold

        Do Find-Start-Pos ('Base', {colED3},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Percent', {colED5},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Percent' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Rate', {colED6},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Rate' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Units', {colED7},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Base', {colED11},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Base ' (0, #ReturnCol) Bold


        Do Find-Start-Pos ('Unit', {colED12},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Unit' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Units', {colED13},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Units' (0, #ReturnCol) Bold

        Do Find-Start-Pos ('Amount', {colED14},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Let $New_Page_ED = 'Y'

End-Procedure

!**************************************************************************
! Procedure: Print_Abs_headings
! Description: Print the absence data headings
!**************************************************************************

Begin-Procedure Print_Abs_headings

        print 'Leave Balances' (+3, {ColG}) Center Bold Underline
        print 'Description' (+1, {ColA}) Bold
        print 'Entitlement' (0, {ColD}) Bold
        print 'Adjustment'  (0, {ColG}) Bold
        print 'Taken'       (0, {ColM}) Bold
        print 'End Balance' (0, {ColN}) Bold

        Let $New_Page_Abs = 'Y'
End-Procedure

!**************************************************************************
! Procedure: Print_Disb_headings
! Description: Print the disbusment data headings
!**************************************************************************

Begin-Procedure Print_Disb_headings
        print 'Disbursment Details' (+3, {ColG}) Center Bold Underline
        print 'Bank' (+1, {ColA}) Bold
        print 'B.S.B' (0, {ColD}) Bold
        print 'Account #'  (0, {ColG}) Bold

        Do Find-Start-Pos ('Amount', {colO},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Let $New_Page_Dis = 'Y'

End-Procedure


!**************************************************************************
! Procedure: Print_Non_Disb_headings
! Description: Print the Non disbusment data headings
!**************************************************************************
Begin-Procedure Print_Non_Disb_headings
        print 'Disbursment Details' (+3, {ColG}) Center Bold Underline

        print 'Bank' (+1, {ColA}) Bold

        Do Find-Start-Pos ('Amount', {colO},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        print 'Amount' (0, #ReturnCol) Bold

        Let $New_Page_Dis = 'Y'

End-Procedure



!
!**************************************************************************
! Procedure: Get_dept
! Description: Get the dept name of the payee
!**************************************************************************
Begin-Procedure Get_dept
      Let $dept_name = ''
Begin-Select on-error=SQL-Error

DEPT.DESCR

      Let $dept_name = rtrim(&DEPT.DESCR,' ')

   FROM PS_DEPT_TBL DEPT
    WHERE DEPT.SETID  = $SetIDDept
      AND DEPT.DEPTID = $Deptid
      AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                            WHERE DEPT1.SETID  = DEPT.SETID
                              AND DEPT1.DEPTID = DEPT.DEPTID)
End-Select
End-Procedure
!
!
!**************************************************************************
! Procedure: Get_location
! Description: Get the location of the payee
!**************************************************************************
Begin-Procedure Get_location
Begin-Select on-error=SQL-Error
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.STATE
A.POSTAL
A.COUNTY
A.COUNTRY

        if $Del_Opt = '30'   ! Location

              Let $Name     = $EmployeeName
              Let $address1 = &A.ADDRESS1
              Let $address2 = &A.ADDRESS2
              Let $address3 = &A.ADDRESS3
              Let $address4 = &A.ADDRESS4
              Let $City     = rtrim(&A.CITY, ' ')
              Let $State    = &A.STATE
              Let $Countrycode  = &A.COUNTRY
              Let $Postal   = &A.POSTAL
           do adformat
           do Compress-Address
       end-if
       Let $LctnDesc = rtrim(&A.DESCR,' ')

FROM PS_LOCATION_TBL A
WHERE A.LOCATION = $Location
End-Select
End-Procedure

!**************************************************************************
! Procedure: Get-PayEntity
! Description: Get the pay entity details
!**************************************************************************
Begin-Procedure Get-PayEntity
  Let $PayEntityDescr = ''
Begin-Select on-error=SQL-Error
PYE.DESCR

  Let $PayEntityDescr = rtrim(&PYE.DESCR,' ')

FROM PS_GP_PYENT PYE
WHERE PYE.PAY_ENTITY = $Pay_Ent
End-Select
End-Procedure

!**************************************************************************
! Procedure: Get_Frequency
! Description: Get the frequency of the payee
!**************************************************************************
Begin-Procedure Get_Frequency

Begin-Select on-error=SQL-Error
FREQ.DESCRSHORT

        Let $freq_descr = &FREQ.DESCRSHORT
FROM
PS_FREQUENCY_TBL FREQ
WHERE FREQ.FREQUENCY_ID = $Comp_Freq
AND FREQ.EFFDT = (SELECT MAX(FREQ1.EFFDT)
                FROM PS_FREQUENCY_TBL FREQ1
                WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID)
End-Select
End-Procedure

!**************************************************************************
! Procedure     : Check_Excl_Dept
! Description   : Check if the payee's department has been excluded
!**************************************************************************
Begin-Procedure Check_Excl_Dept
Begin-Select on-error=SQL-Error
DEPT.SETID
DEPT.DEPTID
        Let $dept_excl = 'Y'
   FROM PS_GPIN_PSLP_DEPT DEPT
   WHERE DEPT.DEPTID = $Deptid
    AND  DEPT.SETID  = $SetIDDept
    AND DEPT.GPIN_PAYSLIP_ID = $Payslip_Id
    AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_GPIN_PSLP_DEPT DEPT1
                      WHERE DEPT1.DEPTID          = DEPT.DEPTID
                      AND DEPT1.SETID           = DEPT.SETID
                      AND DEPT1.GPIN_PAYSLIP_ID = $Payslip_ID
                )
End-Select
End-Procedure

!**************************************************************************
! Procedure     : Check_Excl_Loctn
! Description   : Check if the payee's location has been excluded
!**************************************************************************
Begin-Procedure Check_Excl_Loctn
Begin-Select on-error=SQL-Error
LOCN.SETID
LOCN.LOCATION
        Let $locn_excl = 'Y'

   FROM PS_GPIN_PSLP_LOCTN LOCN
   WHERE LOCN.LOCATION = $Location
     AND LOCN.SETID = $SetIDLocn
     AND LOCN.GPIN_PAYSLIP_ID = $Payslip_Id
     AND LOCN.EFFDT = (SELECT MAX(LOCN1.EFFDT) FROM PS_GPIN_PSLP_LOCTN LOCN1
                      WHERE LOCN1.LOCATION     = LOCN.LOCATION
                      AND LOCN1.SETID        = LOCN.SETID
                      AND LOCN1.GPIN_PAYSLIP_ID = $Payslip_ID
                )
End-Select
End-Procedure


!**************************************************************************
! Procedure     : Get_Address
! Description   : Get the payee's address details
!**************************************************************************
Begin-Procedure Get_Address
  Let $Adr2Found = 'N'
! Initialize the Address Line variables, to avoid wrong information being printed
  Let $ADDLINE1 = ''
  Let $ADDLINE2 = ''
  Let $ADDLINE3 = ''
  Let $ADDLINE31 = ''
  Let $ADDLINE4 = ''
  Let $ADDLINE5 = ''
  Let $ADDLINE6 = ''

Begin-Select on-error=SQL-Error
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY
        Let $Adr2Found = 'Y'

        Let $Name     = $EmployeeName
        Let $address1 = &ADR.ADDRESS1
        Let $address2 = &ADR.ADDRESS2
        Let $address3 = &ADR.ADDRESS3
        Let $address4 = &ADR.ADDRESS4
        Let $City     = rtrim(&ADR.CITY, ' ')
        Let $State    = &ADR.STATE
        Let $Country  = &ADR.COUNTRY

        Let $Postal   = &ADR.POSTAL
           do adformat
           do Compress-Address

    FROM PS_ADDRESSES ADR ,  PS_GP_CALENDAR B
      WHERE ADR.EMPLID = $Emplid
      AND ADR.ADDRESS_TYPE = $Addr_Type
      AND ADR.EFFDT = (SELECT MAX(ADR1.EFFDT) FROM PS_ADDRESSES ADR1
                         WHERE ADR1.EMPLID = ADR.EMPLID
                           AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE
                            AND ADR1.EFFDT <= B.PYMT_DT    )
      AND B.CAL_ID = $Cal_ID
      AND B.GP_PAYGROUP = $GP_Paygroup


End-Select
! If Address Entry wasn't found, populate $ADDLINE1 with EmployeeName.

   If $Adr2Found = 'N'
      Let $ADDLINE1 = $EmployeeName
   End-if

End-Procedure
!**************************************************************************
! Procedure     : Check_Override_Add
! Description   : Check the existance of an override
!**************************************************************************
Begin-Procedure Check_Override_Add

Begin-Select on-error=SQL-Error

PAY.GPIN_DEL_OPT

        Let $Del_Opt = &PAY.GPIN_DEL_OPT

FROM PS_GPIN_PAYEE_TBL PAY
WHERE PAY.EMPLID = $Emplid
AND PAY.EMPL_RCD = #Empl_Rcd
AND PAY.EFFDT = (SELECT MAX(PAY1.EFFDT)
                FROM PS_GPIN_PAYEE_TBL PAY1
                WHERE PAY1.EMPLID = PAY.EMPLID
                AND PAY1.EMPL_RCD = PAY.EMPL_RCD)
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Get_Payslip_Id
! Description   : Get the payslip id based on the paygroup of payee
!**************************************************************************
Begin-Procedure Get_Payslip_Id

Begin-Select on-error=SQL-Error
ID.GPIN_PAYSLIP_ID

        Let $Payslip_Id = &ID.GPIN_PAYSLIP_ID

FROM PS_GP_PG_DTL_SGPIN ID,PS_GP_CALENDAR GPCAL
WHERE ID.GP_PAYGROUP = GPCAL.GP_PAYGROUP
AND ID.GPIN_REG_RUN_TYPE = GPCAL.RUN_TYPE
AND ID.GP_PAYGROUP = $GP_Paygroup
AND ID.EFFDT = (SELECT MAX(F1.EFFDT)
                FROM PS_GP_PG_DTL_SGPIN F1
                WHERE F1.GP_PAYGROUP = ID.GP_PAYGROUP)



End-Select
End-Procedure
!
!******************************************************************
! Procedure     : Get-Element-Group
! Description   : Fetch element group
!******************************************************************
begin-procedure Get-Element-Group

begin-SELECT DISTINCT
A.PIN_NUM  &PIN_NM

    LET #PARENT_PIN = &PIN_NM

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #ED_PinNum
end-SELECT


begin-SELECT DISTINCT
A.PIN_NUM   &PIN_NM_Y

    LET #PARENT_PIN_Y = &PIN_NM_Y

FROM PS_GP_ELEM_GRP_MBR A
WHERE  A.EFFDT =
        (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR A_ED
        WHERE A.PIN_NUM = A_ED.PIN_NUM
          AND A_ED.EFFDT <= $AsOfToday)
and A.PIN_ELEM_NUM = #PIN_NUM_YTD
end-SELECT
end-procedure
!
!******************************************************************
! Procedure     : Get-Section_Number
! Description   : Fetch Section Number
!******************************************************************
begin-procedure Get-Section_Number

begin-SELECT DISTINCT
A.PIN_TYPE &PIN_TYP

    LET  $Pin_Type = &PIN_TYP

    IF $Pin_Type = 'ER'
        LET $GP_section_nm = '10'
    ELSE
        IF $Pin_Type = 'DD'
            LET $GP_section_nm = '20'
        END-IF
    END-IF

FROM PS_GP_PIN A
WHERE   A.PIN_NUM = #ED_PinNum
end-SELECT

end-procedure
!
!******************************************************************
! Procedure     : Get-ACSection_Number
! Description   : Fetch Accumulator Section Number
!******************************************************************
begin-procedure Get-ACSection_Number
begin-SELECT DISTINCT
A.PIN_TYPE &PIN_TYP_Y

    LET $Pin_Type_Y = &PIN_TYP_Y

    IF $Pin_Type_Y = 'AC'
        LET $GP_section_nm_Y = '40'
    END-IF


FROM PS_GP_PIN A
WHERE   A.PIN_NUM = #PIN_NUM_YTD
end-SELECT

end-procedure
!
!******************************************************************
! Procedure     : Chk_Accum_Table
! Description   : Check duplicate PIN_NUMBERS in PS_GP_MPSLP_STGACM table
!******************************************************************
begin-procedure Chk_Accum_Table
BEGIN-SELECT
COUNT(*) &ACUM_COUNT

FROM PS_GP_MPSLP_STGACM ACM1
WHERE ACM1.EMPLID = $Emplid 
AND ACM1.EMPL_RCD = #Empl_Rcd
AND ACM1.CAL_RUN_ID = $Cal_Run_ID
AND ACM1.PIN_NUM = #Acum_PinNum

END-SELECT
LET #Accum_Count = &ACUM_COUNT
end-procedure
!
!**************************************************************************
! Procedure     : Get_Accum_Values
! Description   : Get the accumulated values for the payee
!**************************************************************************
Begin-Procedure Get_Accum_Values
Begin-Select on-error=SQL-Error
ACC.CALC_RSLT_VAL
ACC.CALC_VAL
ACC.SLICE_BGN_DT
ACC.SLICE_END_DT
ACC.EMPL_RCD_ACUM
ACC.ACM_FROM_DT
ACC.ACM_THRU_DT
ACC.SEQ_NUM8
ACC.PIN_NUM
ACC.USER_KEY1         &UsrKey1
ACC.USER_KEY2         &UsrKey2
ACC.USER_KEY3         &UsrKey3
ACC.USER_KEY4         &UsrKey4
ACC.USER_KEY5         &UsrKey5
ACC.USER_KEY6         &UsrKey6



        Let #Calc_Rslt_Val = &ACC.CALC_RSLT_VAL
        Let #CalcVal = &ACC.CALC_VAL
        Let $Slice_Bgn_Dt = &ACC.SLICE_BGN_DT
        Let $Slice_End_Dt = &ACC.SLICE_END_DT
        Let #Empl_Rcd_acum = &ACC.EMPL_RCD_ACUM
        Let $Acm_from_Dt = &ACC.ACM_FROM_DT
        Let $Acm_Thru_Dt = &ACC.ACM_THRU_DT
        Let #Seq_Num8    = &ACC.SEQ_NUM8
        Let #PIN_NUM_YTD = &ACC.PIN_NUM


FROM PS_GP_RSLT_ACUM ACC
  WHERE ACC.EMPLID        = $Emplid
    AND ACC.EMPL_RCD      = #Empl_Rcd
    AND ACC.CAL_RUN_ID    = $Cal_Run_ID
    AND ACC.GP_PAYGROUP   = $GP_Paygroup
    AND ACC.CAL_ID        = $Cal_ID
    AND ACC.RSLT_SEG_NUM  = #Rslt_Seg_num
    AND ACC.PIN_NUM       = #Pin_Num

End-Select
End-Procedure

!**************************************************************************
!Procedure: Get_Payment_Summ
!Description: Get and print the pay summary details for the payee.
!**************************************************************************
Begin-Procedure Get_Payment_Summ
Begin-Select distinct on-error=SQL-Error
C.GPIN_PIN_AC1_NUM                &GPIN_PIN_AC1_NUM
C.GPIN_PIN_AC2_NUM                &GPIN_PIN_AC2_NUM
C.GPIN_PIN_AC3_NUM                &GPIN_PIN_AC3_NUM
C.GPIN_PIN_AC4_NUM                &GPIN_PIN_AC4_NUM
C.GPIN_PIN_AC5_NUM                 &GPIN_PIN_AC5_NUM
C.GPIN_PIN_AC6_NUM                &GPIN_PIN_AC6_NUM
C.DESCR                          &C.DESCR
C.SEQ_NUM
        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC1_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val1 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC2_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val2 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC3_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val3 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC4_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val4 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC5_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val5 = #Calc_Rslt_Val

        Let #Calc_Rslt_Val = 0

         Let #Pin_Num = &GPIN_PIN_AC6_NUM
        do Get_Accum_Values
        Let #Calc_Acum_Val6 = #Calc_Rslt_Val

         Let $Pay_Summ_Desc  = &C.DESCR

        if #Calc_Acum_Val1 <> 0 or
              #Calc_Acum_Val2 <> 0 or
              #Calc_Acum_Val3 <> 0 or
              #Calc_Acum_Val4 <> 0 or
              #Calc_Acum_Val5 <> 0 or
              #Calc_Acum_Val6 <> 0

          print $Pay_Summ_Desc (+1, {colA}) Bold

          if  #Calc_Acum_Val1 <> 0
            print #Calc_Acum_Val1 (0, {colAC1})  edit 999999999999.99

          end-if

          if  #Calc_Acum_Val2 <> 0
            print #Calc_Acum_Val2 (0, {colAC2})      edit 999999999999.99
          end-if

          if  #Calc_Acum_Val3 <> 0
            print #Calc_Acum_Val3 (0, {colAC3})  edit 999999999999.99
          end-if

          if  #Calc_Acum_Val4 <> 0
            print #Calc_Acum_Val4 (0, {colAC4})  edit 999999999999.99
          end-if

          if  #Calc_Acum_Val5 <> 0
            print #Calc_Acum_Val5 (0, {colAC5})  edit 999999999999.99
          end-if

          if  #Calc_Acum_Val6 <> 0
            print #Calc_Acum_Val6 (0, {colAC6})  edit 999999999999.99
          end-if
        end-if


    !**********Populate Mobile Payslip Header info into staging tables***************
    If( $custEnabled = 'Y')


    LET MPSLP_HDR.EMPLID(0) = $Emplid
    LET MPSLP_HDR.CAL_RUN_ID(0) = $Cal_Run_Id
    LET MPSLP_HDR.EMPL_RCD(0) = #Empl_Rcd
    LET MPSLP_HDR.GP_PAYGROUP(0) = $GP_Paygroup
    LET MPSLP_HDR.CAL_ID(0) = $Cal_ID
    LET MPSLP_HDR.ORIG_CAL_RUN_ID(0) = $orig_Cal_Run_ID
    LET MPSLP_HDR.RSLT_SEG_NUM(0) = #Rslt_Seg_num
    LET MPSLP_HDR.GP_PSLP_SRCPRODUCT(0) = 'GPIND'
    LET MPSLP_HDR.GP_PSLP_ID(0) = $Mp_Payslip_Id
    LET MPSLP_HDR.SEG_BGN_DT(0) = $Pay_Pd_From_Dt
    LET MPSLP_HDR.SEG_END_DT(0) = $Pay_Pd_To_Dt
    LET MPSLP_HDR.PRD_BGN_DT(0) = $PrdBgnDt
    LET MPSLP_HDR.PRD_END_DT(0) = $PrdEndDt
    LET MPSLP_HDR.PYMT_DT(0) = $Pymt_Dt
    LET MPSLP_HDR.GP_MPSLP_GROSS(0) = #Calc_Acum_Val1
    LET MPSLP_HDR.CALC_VAL(0) = #Calc_Acum_Val2
    LET MPSLP_HDR.GP_MPSLP_NET(0) = #Calc_Acum_Val2
    LET MPSLP_HDR.GP_COMPANY(0) = $Company
    LET MPSLP_HDR.RUN_TYPE(0)= rtrim($Run_Type, ' ')


    DO insert_mpslp_hdr_row

    End-If

FROM PS_GPIN_PSLP_ACUM C,
    PS_GP_CALENDAR GPCAL,
    PS_GP_PG_DTL_SGPIN D,
      PS_GP_PYE_SEG_STAT B

WHERE

 C.GPIN_PAYSLIP_ID = D.GPIN_PAYSLIP_ID

 AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_GPIN_PSLP_ACUM C1
                              WHERE C1.GPIN_PAYSLIP_ID = C.GPIN_PAYSLIP_ID
                                AND C1.EFFDT <=$Pymt_Dt)


AND B.EMPLID            = $Emplid
AND B.CAL_RUN_ID        = $Cal_Run_ID
AND B.EMPL_RCD          = #Empl_Rcd
AND GPCAL.GP_PAYGROUP = B.GP_PAYGROUP
AND B.CAL_ID            = $Cal_ID
!AND GPCAL.CAL_ID = B.CAL_ID


AND D.GP_PAYGROUP = B.GP_PAYGROUP
AND D.GPIN_REG_RUN_TYPE = GPCAL.RUN_TYPE
AND B.RSLT_SEG_NUM = (SELECT MAX (SEG2.RSLT_SEG_NUM)
                                 FROM PS_GP_PYE_SEG_STAT SEG2

                                  WHERE B.EMPLID       = SEG2.EMPLID
                                    AND B.CAL_RUN_ID   = SEG2.CAL_RUN_ID
                                    AND B.EMPL_RCD     = SEG2.EMPL_RCD
                                    AND B.GP_PAYGROUP  = SEG2.GP_PAYGROUP
                                    AND B.CAL_ID       = SEG2.CAL_ID)
AND B.RSLT_REV_NUM = (SELECT MAX (SEG1.RSLT_REV_NUM)
                                 FROM PS_GP_PYE_SEG_STAT SEG1
                                  WHERE B.EMPLID       = SEG1.EMPLID
                                    AND B.CAL_RUN_ID   = SEG1.CAL_RUN_ID
                                    AND B.EMPL_RCD     = SEG1.EMPL_RCD
                                    AND B.GP_PAYGROUP  = SEG1.GP_PAYGROUP
                                    AND B.CAL_ID       = SEG1.CAL_ID
                                    AND B.RSLT_SEG_NUM = SEG1.RSLT_SEG_NUM)

ORDER BY C.SEQ_NUM
End-Select


End-Procedure

!**************************************************************************
! Procedure: Delete-RunControl
! Description: Delete run control when report comes to successful end.
!**************************************************************************
Begin-Procedure Delete-RunControl
#ifdef debugy

#end-if
begin-SQL
DELETE FROM PS_GPIN_PSLP_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPIN_PSLP_DP_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPIN_PSLP_LC_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL

begin-SQL
DELETE FROM PS_GPIN_PSLP_PE_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPIN_PSLP_PG_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
begin-SQL
DELETE FROM PS_GPIN_PYE_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

        #ifdef ORACLE
           COMMIT;
        #endif
end-SQL
End-Procedure
!
!**************************************************************************
! Procedure:    Process-Empl-List
! Description : Process Employees selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Empl-List
Begin-Select
APY1.EMPLID    &Emplid
APY1.EMPL_RCD  &EmplRcd
   If rtrim(&Emplid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $EmplRcd = edit(&EmplRcd,'999')
     Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &Emplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd


     Do Process-Payee
  End-If
  FROM PS_GPIN_PYE_RC APY1
    WHERE APY1.OPRID          = $Prcs_OprID
    AND   APY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Process-Dept-List
! Description   : Process Departments selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Dept-List
Begin-Select
BPY1.SETID   &Setid
BPY1.DEPTID  &Deptid
   If rtrim(&Deptid, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND PER.SETID_DEPT = ' || '''' || &Setid || '''' || ' AND PER.DEPTID = ' || '''' || &Deptid || ''''

     Do Process-Payee
   End-If
    FROM PS_GPIN_PSLP_DP_RC BPY1

    WHERE BPY1.OPRID          = $Prcs_OprID
    AND   BPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Process-Locn-List
! Description   : Process Locations selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Locn-List
Begin-Select
CPY1.SETID    &SetId1
CPY1.LOCATION &Location
   If rtrim(&Location, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND PER.SETID_LOCATION = ' || '''' || &Setid1 || '''' || ' AND PER.LOCATION = ' || '''' || &Location || ''''

     Do Process-Payee
   End-If
    FROM PS_GPIN_PSLP_LC_RC CPY1
    WHERE CPY1.OPRID          = $Prcs_OprID
    AND   CPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Process-Pay Entity List
! Description   : Process Pay Entity selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Pay-Entity-List

Begin-Select

DPY1.PAY_ENTITY &PayEntity

   Let $WhereClause = ''

   If rtrim(&PayEntity, ' ') <> ''
     Let $No_List = 'N'
          Let $WhereClause = ' AND PER.PAY_ENTITY = ' || '''' || &PayEntity || ''''

     Do Process-Payee
   End-If
    FROM PS_GPIN_PSLP_PE_RC DPY1
    WHERE DPY1.OPRID          = $Prcs_OprID
    AND   DPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Process-Paygroup List
! Description   : Process Paygroup selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-PayGroup-List
Begin-Select
EPY1.GP_PAYGROUP &PayGrp

   If rtrim(&PayGrp, ' ') <> ''
     Let $No_List = 'N'
     Let $WhereClause = ''
     Let $WhereClause = ' AND PER.GP_PAYGROUP = ' || '''' || &PayGrp || ''''

     Do Process-Payee
    End-If
    FROM PS_GPIN_PSLP_PG_RC EPY1
    WHERE EPY1.OPRID          = $Prcs_OprID
    AND   EPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
End-Select
End-Procedure
!
!**************************************************************************
! Procedure:    Get-Country-Name
! Description : Get-Country Name
!**************************************************************************
Begin-Procedure Get-Country-Name
  Let $Country = ''
Begin-Select
CTY.DESCR
  Let $Country = &CTY.DESCR
  FROM PS_COUNTRY_TBL CTY
 WHERE CTY.COUNTRY = $Countrycode
End-Select
End-Procedure
!
!**************************************************************************
! Procedure     : Get-GP-Paygroup
! Description   : Get the GP Paygroup if none of the lists has been chosen.
!**************************************************************************
Begin-Procedure Get-GP-Paygroup

 Create-Array Name=Gp_Paygroups Size=10
 Field=Gp_Paygroup:Char
 Let #I = 1

Begin-Select
DTL.GP_PAYGROUP
DTL.CAL_ID

  Let $GP_Pygrp = ''
  Let $Payroll_CalID = ''

  Let $Payroll_CalID = &DTL.CAL_ID
  Let $GP_Pygrp   = &DTL.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_DTL DTL
WHERE DTL.CAL_RUN_ID = $Cal_Run_ID
AND DTL.CALC_TYPE = 'P'
END-SELECT

Begin-SELECT
DTLA.GP_PAYGROUP
' '
  Let $GP_Pygrp   = &DTLA.GP_PAYGROUP

  Put $GP_Pygrp INTO Gp_Paygroups(#I)
  Let #I = #I + 1


FROM PS_GP_CAL_RUN_OFF DTLA
WHERE DTLA.CAL_RUN_ID = $Cal_Run_ID
End-SELECT
End-Procedure
!
!************************************************************************
!************************************************************************
! Routines and code below have been added to enable ePay Implementation *
!************************************************************************
!************************************************************************
!
begin-Procedure Get-NetAmountValue
   Let #NetPayAccumulatorValue = 0
Begin-SELECT !on-error=SQL-Error
SUM(ENP.PIN_NET_VAL) &NetPayVal

    Let #NetPayAccumulatorValue = &NetPayVal

  FROM PS_GP_PYE_SEG_STAT ENP
   WHERE ENP.EMPLID         = $Emplid
     AND ENP.EMPL_RCD       = #Empl_Rcd
     AND ENP.CAL_RUN_ID     = $Cal_Run_ID
     AND ENP.CAL_ID         = $Cal_ID
     AND ENP.GP_PAYGROUP    = $GP_Paygroup
     AND ENP.RSLT_SEG_NUM   = #Rslt_Seg_num
End-SELECT
End-Procedure
!
!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init
   let $sql-statement = 'GPINPS01.sqr, GP-ePay-Init '

  Do Check-ePay-installed ($ePay_Installed)

    If $ePay_Installed = 'Y'
     Move 'GPINPS01' to $ReportID

      let #eV4 =  To_number($prcs_process_instance)

      !* have the Output Working Directory from the Process parameters table
      do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

      !* have the URL id from the Payslip option table
      do Get-ePay-URLid ('IND', $eV18)

      !* Global ePay variable settings used in GP-ePay procedures in this SQR
      let $eV1 = $prcs_oprid
      let $eV2 = $prcs_run_cntl_id
      let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

      ! Open the file for writing epay control data
      ! Let $GP_PSLP_CTLFILE   = $eV3 || '.txt'
      ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
      ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GP_PSLP_CTLFILE)

      ! when we do not pass a control file
       Let $GP_PSLP_CTLFILE = ' '
       Let $FILELAYOUT = ' '

    End-If

end-procedure !GP-ePay-Init

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************

begin-procedure GP-ePay-Guide

   let $sql-statement = 'GPINPS01.sqr,GP-ePay-Guide'

 If $ePay_Installed = 'Y'

   ! IND Payslip does not exclude by run type. We can ignore this procedure

   !do Get-RUN-TYPE  ! not an ePay procedure

   Let $strEmplRcd = to_char(#Empl_Rcd)
   let $strEmplRcd  = rtrim($strEmplRcd,' ')
   let $strEmplRcd  = ltrim($strEmplRcd,' ')

   let $eV5  = rtrim($Emplid, ' ')
   let $eV5  = ltrim($eV5, ' ')
   let $eV6  = rtrim($Cal_Run_ID,' ')
   let $eV6  = ltrim($eV6,' ')
   let $eV7  = 'GPIND'
   let $eV8  = $strEmplRcd || ' ' || $Pay_Dt_To_Conv ! gp epay payslip id
   !let $eV8  = rtrim($CAL_run_ID, ' ') || '_' || $eV5 || '_' || $strEmplRcd        ! gp epay payslip id
   let $eV9  = $pymt_dt
   let $eV10 = $Pay_Pd_To_Dt
   let $eV11 = $SegBgnDt
   ! Perform routine to retrieve the NetPay amount based on Net pay pin number
   Do Get-NetAmountValue
   let #eV12 = #NetPayAccumulatorValue ! net pay

   let $eV13 = $PayEntityDescr   ! SGP will populate the Pay Entity Name in the Description column.

    If (rtrim($Run_Type, ' ') <> '')   
       let $eV14 = rtrim($Run_Type, ' ')
    Else
       let $eV14 = ' ' ! we are not populating the run type
    End-If
   let $eV15 = 'ORIG' ! payslip status ORIGINAL
   let $eV16 = $eV5 || '_' || $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'       !sysfilename of the payslip pdf
   let $eV17 = $eV16                                                           !userfilename  - what the payee sees filename as
   let #eV19 = #BeginPageNumber                                                !begin page number of payslip in output report
   let #eV20 = #EndPageNumber                                                  !end page number of payslip in output report

   !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
   !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
   !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

    do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

!   do Write-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

 End-If

end-procedure ! GP-ePay-Guide

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control

let $sql-statement = 'GPINPS01.sqr,GP-ePay-Control '

 If $ePay_Installed = 'Y'

   Let $rptid = lower($ReportID)
   let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'
   let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

   ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
   ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GP_PSLP_CTLFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')

 End-If

end-procedure !GP-ePay-Control

!***************************************************************************
!For Mobile Payslip Purposes: Mobile Payslip                               *
!Procedure : check-mob-custom-enabled                                      *
!Check if Mobile Payslip is enabled for India                              *
!***************************************************************************
begin-procedure check-mob-custom-enabled

begin-select
GP_SS_MPSLP_DATA    &MbPslpOpt

   if &MbPslpOpt = 'CUST'
     let $custEnabled = 'Y'
     #debug6 show '** GPINPS01 : Custom mode enabled for Mobile Payslip'
   else
     let $custEnabled = 'N'
   end-if

FROM PS_GP_SS_PSLP_OPT
WHERE COUNTRY = 'IND'
AND GP_PSLP_HDCPYOPTN = 'Y'
AND GP_SS_MPSLP_ENABLE = 'Y'
end-select

end-procedure !check-mob-custom-enabled
!Mobile Payslip - End


!***************************************************************************
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Routines to format address
#Include 'gpinrc01.sqc'  !Select GP INDIA Runcontrol Parameters procedure
#Include 'readxlat.sqc'  !Routines to read Translate table
!ePay Implementation Changes begins here
#Include 'gpsspslp.sqc'     ! ePay SQC with ePay procedures
#include 'rellang.sqc'
!ePay Implementation Changes ends here

