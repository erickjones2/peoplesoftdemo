!***********************************************************************
!  TAX815WA:  Qtrly Wage List - Washington                             *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  30161826                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report

! These variables are used by rptsmmry.sqc
  MOVE 'TAX815WA' TO  $Program

  do Process-Main

  close 10

  if #Count_F > 0
    display 'Upon successful conclusion of this program, the following'
    display 'file will have been created:'
    display ''
    display '  TAX815WA  contains 275-character records in ICESA format'
    display '            for electronic submission to the State of Washington.'
    display ''
    display 'Follow the instructions from the department for preparing'
    display 'and submitting the file electronically.'
  else
    do Print-Summary-Data('NoData')
  end-if
  
  do Stdapi-Term
end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init
  do Initialization
  move 'TAX815WA' to $ReportID

  move 'Washington Paid Leave Report ' to $ReportTitle
  display ''
  display 'Creating Electronic file for Washington Paid Leave Reporting'

end-procedure

begin-procedure Initialization
  #ifdef TAXTEST
    move 'CA'              to $State
  #else
    move 'WA'              to $State
  #endif

  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move &TX.Balance_Qtr  to $RptQuarter 9
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 275 to #RecordLength


     do Select-Parameters
     do Select-Transmitter-Contact-Data



  move ' ' to $Blocking_Factor

  move '1' to $Year4
  move '' to $DDelimiter
  do Format-DateTime($AsOfToday,$CreationDate,{DEFMDY},'','')
  Move 0 to $ZeroFill 09999999999999

  do Open-File

  move &TX.Balance_Year to $QtrBeginDate xxxx
  let #QtrBeginMonth = #QtrEndMonth - 2
  move #QtrBeginMonth to $QtrBeginMonth 09

  let $QtrBeginDate = $QtrBeginDate || '-' || $QtrBeginMonth || '-01'

  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($PeriodEndDate,$PeriodEndDate,{DEFYMD},'','')

  do DTU-DayOfWeek#($QtrBeginDate,#QtrBeginWeekday)
  if #QtrBeginWeekday <> 1
    let #BegOffsetDays = #QtrBeginWeekday - 1
    do DTU-Subtract-Days($QtrBeginDate,#BegOffsetDays,$EarnsBeginDate)
  else
    move $QtrBeginDate to $EarnsBeginDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsBeginDate,$SlctEarnsBeginDate,{DEFYMD},'','native')

  do DTU-DayOfWeek#($PeriodEndDate,#QtrEndWeekday)
  if #QtrEndWeekday <> 7
    let #EndOffsetDays = 7 - #QtrEndWeekday
    do DTU-Add-Days($PeriodEndDate,#EndOffsetDays,$EarnsEndDate)
  else
    move $PeriodEndDate to $EarnsEndDate
  end-if
  move '1' to $Year4
  move '-' to $DDelimiter
  do Format-DateTime($EarnsEndDate,$SlctEarnsEndDate,{DEFYMD},'','native')

  do DTU-Diff-Days($QtrBeginDate, $PeriodEndDate, #DaysInQtr)
  let #DaysInQtr = #DaysInQtr + 1

  create-array name=QtrWeeks size=1  field=WeekWorked:char:15
  create-array name=QtrDays  size=20 field=PayGroup:char:1
                                     field=WkSched:char:1
                                     field=WeekDay:number:100
                                     field=Week#:number:100
                                     field=WorkDay:char:100
                                     field=Wages:number:100
  move 0 to #StateMinimum
end-procedure

begin-procedure Process-Main

begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
  end-if
  do Get-Company-Data                 !Transmitter identifying data
  do Write-A-Record

begin-SELECT
B.COMPANY
B.DESCR
B.FEDERAL_EIN
B.ADDRESS1
B.CITY
B.STATE
B.POSTAL
B.COUNTRY

  move &B.Company to $Company
  move &B.Descr   to $CompanyName

  do Read-Employee-Data

FROM  PS_COMPANY_TBL B
WHERE B.EFF_STATUS = 'A'
  AND B.TAX_REPORT_TYPE = '2'
  AND B.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = B.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT
  if #Count_F > 0
    do Write-F-Record
    divide 100 into #Tot_NlGrs_QTD
    do Print-Summary-Data('FileTotal815')
  end-if
end-procedure

begin-procedure Read-Employee-Data
! This TAX CLASSES are paid once per quarter
  
begin-SELECT
C.COMPANY    () on-break level=1 print=never before=Before-Company
                                      AFTER=After-Company
C.EMPLID     () on-break level=2 print=never before=Before-EMPL
                                      AFTER=After-EMPL
C.BALANCE_PERIOD
C.TAX_CLASS 
C.NLGRS_QTD
C.TXGRS_QTD
C.TAX_QTD
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME
D1.NATIONAL_ID

  MOVE &C.EMPLID  TO $EMPLID_AMT
  MOVE &C.COMPANY TO $COMPANY_AMT
  MOVE &C.BALANCE_PERIOD TO #BALANCE_PERIOD_AMT
  if &C.NLGRS_QTD > 0
     MOVE &C.NLGRS_QTD to #NlGrs_QTD
  else
     if &C.NLGRS_QTD < 0
        DO WRITE-NEGATIVE-DATA
        move 0 to #NlGrs_QTD
        MOVE 0 TO #Tax_QTD
     end-if
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &B.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     IN ('I','O','Y','0','1','2','3','4')
  AND C.LOCALITY      = ' '
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
  #ifdef TAXTEST
    AND C.STATE         = 'CA'
  #else
    AND C.STATE         = 'WA'
  #endif

  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND (C.NLGRS_QTD <> 0 OR C.TXGRS_QTD <> 0)
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID, C.BALANCE_PERIOD
end-SELECT
end-procedure


BEGIN-PROCEDURE WRITE-NEGATIVE-DATA

   MOVE ' ' TO $ErMsg
   MOVE 'WA QTD PFML Wages Negative (' TO $ErMsg
   
   MOVE &C.TAX_CLASS TO $TAX_CLASS
   LET $TAX_CLASS = RTRIM(LTRIM($TAX_CLASS, ' '), ' ')
   
   EVALUATE $TAX_CLASS
    when = '0'
      LET $ErMsg = $ErMsg || 'Vol MLI/ER'
      break

    when = '1'
      LET $ErMsg = $ErMsg || 'Vol MLI/EE'
      break

    when = '2'
       LET $ErMsg = $ErMsg || 'MLI/ER'
      break

    when = '3'
       LET $ErMsg = $ErMsg || 'MLI/EE'
      break

    when = '4'
      LET $ErMsg = $ErMsg || 'FLI/ER'
      break
      
    when = 'I'
      LET $ErMsg = $ErMsg || 'FLI/EE'
      break
      
    when = 'O'
      LET $ErMsg = $ErMsg || 'Vol FLI/EE'
      break

    when = 'Y'
      LET $ErMsg = $ErMsg || 'Vol FLI/ER'
      break
      
    when-other
      break
      
  end-evaluate

   LET $ErMsg = $ErMsg || ')'
   move &C.NlGrs_QTD to #Neg_NlGrs_QTD
   move &C.Tax_QTD to #Tax_QTD
   do Print-Summary-Data('NegAmt')

END-PROCEDURE

begin-procedure Before-EMPL

  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '   to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID        to $NATIONAL_ID
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  
  
  LET $Valid_Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ -'''
  MOVE 0   TO #Invalid
  
  MOVE $LastName TO $LastNameAUX
  LET $LastNameAUX = RTRIM($LastNameAUX,' ')
  UPPERCASE $LastNameAUX
  LET $Invalid_Chars = Translate($LastNameAUX, $Valid_Chars, '')
  LET #Invalid = length($Invalid_Chars)
  
  IF #Invalid
    DISPLAY ' '
    DISPLAY 'Only alphabetical characters, spaces, hyphens, and apostrophes are allowed for Last Name.'
    DISPLAY 'Verify the employee Last Name for the EMPLID '  NOLINE
    DISPLAY &C.EMPLID NOLINE
    DISPLAY ' before submitting the file.' 
    DISPLAY ' '
    MOVE 0   TO #Invalid
  END-IF
  
  MOVE $FirstName TO $FirstNameAUX
  LET $FirstNameAUX = RTRIM($FirstNameAUX,' ')
  UPPERCASE $FirstNameAUX
  LET $Invalid_Chars = Translate($FirstNameAUX, $Valid_Chars, '')
  LET #Invalid = length($Invalid_Chars)
  
  IF #Invalid
    DISPLAY ' '
    DISPLAY 'Only alphabetical characters, spaces, hyphens, and apostrophes are allowed for First Name.'
    DISPLAY 'Verify the employee First Name for the EMPLID '  NOLINE
    DISPLAY &C.EMPLID NOLINE
    DISPLAY ' before submitting the file.' 
    DISPLAY ' '
    MOVE 0   TO #Invalid
  END-IF
  
  !
  
  
  
  uppercase $LastName
  uppercase $FirstName

  move &C.EmplID to $EmplID
  move 0 to #TotTxGrs_QTD
  move 0 to #NlGrs_QTD
  move 0 to #TxGrs_QTD

  do Get-Weeks

  if #WeeksWorked > 13
    move 13 to #Weeks
  else
    move #WeeksWorked to #Weeks
  end-if
  do Format-Number(#Weeks, $Weeks, '09')


end-procedure

begin-procedure After-EMPL

  move 'PS_RC_TAX815WA D'  to $TAX810X1
  move 'PS_RC_TAX815WA D1' to $TAX810X2
  move 'PS_RC_TAX815WA D2' to $TAX810X3
  move 'PS_RC_TAX815WA D3' to $TAX810X4
  do Get-Hours
  if #Hours > 9999
     let $Hours = '9999'
  else
     if #Hours >= 0
        let #Hours = #Hours + .99
        let #Hours = trunc (#Hours,0)
        do Format-Number(#Hours, $Hours, '0999')
     end-if
  end-if
  move '0'  to $ExemptOfficer                   !Assume 0 until the state says otherwise

  if #Hours < 0
     do Format-Number(#Hours, $NegHours, '99999.99')
     do Print-Negative-Hours
     let #Co_NlGrs_QTD = #Co_NlGrs_QTD - #NlGrs_QTD
  else
     DO VALIDATE-SAME-AMOUNTS
     IF $ProcessEE = 'Y'
        DO FORMAT-AMOUNTS
        DO Write-S-Record
     END-IF
  end-if
end-procedure

begin-procedure Before-Company
  do Get-Company-Data
  do Get-State-Tax-Data             !Employer ID

  MOVE &UBI_NUMBER  to  $UBINumber
  LET $UBINumber = RTRIM($UBINumber,' ')

  IF $UBINumber = '' OR $UBINumber = '0'
    DISPLAY ' '
    display '*** WARNING: UBI Number is missing in Company State Tax Table ***'
    DISPLAY 'Enter a valid UBI Number for Company ' NOLINE
    DISPLAY $Company NOLINE
    DISPLAY ' before submitting the file.'
  ELSE
     if length($UBINumber) = 12
        move &UBI_NUMBER   to $UBINumber 099999999999
     else
        move &UBI_NUMBER   to $UBINumber 099999999
        let $UBINumber = $UBINumber || '   '
     end-if
  end-if
 

  move &SUT_Experience_Rt to #Experience_Rt
  move &EAF_RATE          to #EAFRate
  subtract #EAFRate  from #Experience_Rt                   !UI rate includes the EAF rate
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.999999
  let $Experience_Rt = SUBSTR($Experience_Rt,3,6)
  divide 100 into  #EAFRate
  move #EAFRate           to $EAFRate  0.9999
  let $EAFRate = SUBSTR($EAFRate,3,4)

do Write-E-Record

#ifdef TAXTEST              !Reset so Getweeks will work
  move 'CA' to $State
#endif

end-procedure

begin-procedure After-Company

  MOVE 0 TO #TotAmtPrem
  MOVE ' ' TO $TotAmtPrem
  if #Count_S > 0
    Do Get-EE-Premium-Withheld
    do Write-T-Record
  end-if

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  ADD #TotAmtPrem TO #Tot_TotAmtPrem
  divide 100 into #Co_NlGrs_QTD

  do Print-Summary-Data('CoAmt815')

  add #Count_S to #Count_F
  move 0 to #Co_NlGrs_QTD
  move 0 to #Count_S
  new-page

end-procedure


Begin-Procedure Select-Transmitter-Contact-Data

Begin-Select
RC960.CONTACT_NAME_SSA
RC960.TELEPHONE_NBR
RC960.PHONE_EXTN
RC960.EMAIL_ADDR_MMREF

FROM PS_TAX960_PARM RC960
End-Select

  if rtrim(&RC960.CONTACT_NAME_SSA, ' ') = ''
    Show 'MMREF Parameters must be set up on SETUP Menu.'
    Show 'Re-execute after establishing MMREF Parameters.'
  End-if

  Let $TransmitterContact       = translate(&RC960.CONTACT_NAME_SSA,',','')

  let $TempPho1= translate (&RC960.TELEPHONE_NBR,' ','')
  let $TempPho1= translate ($TempPho1,'-','')
  let $TempPho1= translate ($TempPho1,'(','')
  let $TempPho1= translate ($TempPho1,')','')
  let $TempPho1= translate ($TempPho1,'/','')
  let $TempPho1= translate ($TempPho1,'\','')
  move $TempPho1 to $TransmitterPhone

  do Is-String-Numeric ($TransmitterPhone, #Rtrn_Value)
  if (length($TempPho1) <> 10) or (#Rtrn_Value = 0)
    display '*** Warning: Contact Telephone Number is not 10 digits ' noline
    display ': ' noline
    display $TransmitterPhone
    display ''
  end-if

  move &RC960.EMAIL_ADDR_MMREF  to $ContactEmailAddr
  let $FiftySpaces = '                                                  '
  let $ContactEmailAddr = $ContactEmailAddr || $FiftySpaces

  If &RC960.PHONE_EXTN <> 0
    move &RC960.PHONE_EXTN to $TransmitterPhoneExt
  Else
    move '    ' to $TransmitterPhoneExt
  End-if

End-Procedure


begin-procedure Is-String-Numeric ($Test_String, :#Return_Value)
  let #Max_Lngth = length ($Test_String)
  let #Return_Value  =  1
  let #Char_Pos  =  1

  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($Test_String, #Char_Pos, 1)
    let #Which_Digit = instr ('0123456789', $Test_Char, 1)
    if  #Which_Digit = 0
      let #Return_Value  =  0
      break
    end-if
    add 1 to #Char_Pos
  end-while
end-procedure

BEGIN-PROCEDURE VALIDATE-SAME-AMOUNTS
  MOVE 'Y' TO $ProcessEE
BEGIN-SELECT

MAX(TB1.NLGRS_QTD) &MAX_NLGRS_QTD
MIN(TB1.NLGRS_QTD) &MIN_NLGRS_QTD
 
   IF (&MAX_NLGRS_QTD <> &MIN_NLGRS_QTD) AND &MAX_NLGRS_QTD > 0
      DISPLAY ' '
      DISPLAY '*** Warning: Employee ID ' NOLINE
      DISPLAY $EMPLID_AMT NOLINE 
      DISPLAY ' is included in the file, however, ' NOLINE 
      DISPLAY 'the no limit grosses for state ' NOLINE 
      DISPLAY 'and/or voluntary FLI-EE, FLI-ER, MLI-EE, MLI-ER' NOLINE 
      DISPLAY ' are not the same amount.' 
      DISPLAY 'The file will report the no limit gross ' NOLINE
      DISPLAY 'for the highest gross.'
      DISPLAY 'Review the tax balances of the employee ' NOLINE 
      DISPLAY 'to ensure they are accurate.'
      DISPLAY 'If corrections are needed, correct the balances ' NOLINE
      DISPLAY 'with the online Balance Adjustment pages and rerun the file.'
      DISPLAY ' '
      MOVE &MAX_NLGRS_QTD TO #NlGrs_QTD
   END-IF
   
   IF (&MAX_NLGRS_QTD < 0)
      MOVE 'N' TO $ProcessEE
   END-IF
   

FROM PS_TAX_BALANCE TB1
WHERE 
       TB1.EMPLID = $EMPLID_AMT
   AND TB1.COMPANY = $COMPANY_AMT
   AND TB1.BALANCE_ID = $Calendar_Year_Id
   AND TB1.BALANCE_YEAR = &TX.Balance_Year
   AND TB1.BALANCE_QTR =  &TX.Balance_Qtr
   AND TB1.BALANCE_PERIOD = #BALANCE_PERIOD_AMT !&C.BALANCE_PERIOD
   #ifdef TAXTEST
   AND TB1.STATE         = 'CA'
   #else
   AND TB1.STATE         = 'WA'
  #endif
   AND TB1.TAX_CLASS  IN ('I','O','Y','0','1','2','3','4')
END-SELECT
END-PROCEDURE

BEGIN-PROCEDURE FORMAT-AMOUNTS
  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  add #NlGrs_QTD to #Co_NlGrs_QTD

END-PROCEDURE

Begin-Procedure Get-EE-Premium-Withheld
! This TAX CLASSES are paid once per quarter
begin-SELECT

#ifdef DB2ALL
DECIMAL(SUM(TB.TAX_QTD),15,3) &TB.TAX_QTD
#else
SUM(TB.TAX_QTD) &TB.TAX_QTD
#endif

   ADD &TB.TAX_QTD TO #TotAmtPrem
   multiply 100 times #TotAmtPrem
   do Format-Number(#TotAmtPrem,  $TotAmtPrem,  '09999999999999')
   divide 100 into #TotAmtPrem

FROM  PS_TAX_BALANCE TB
WHERE TB.COMPANY        = &B.Company
  AND TB.BALANCE_ID     = $Calendar_Year_Id
  AND TB.BALANCE_YEAR   = &TX.Balance_Year
  AND TB.BALANCE_QTR    = &TX.Balance_Qtr
  
  AND TB.BALANCE_PERIOD  =
      (SELECT MAX(TBS.BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE TBS
       WHERE  TBS.EMPLID        = TB.EMPLID
         AND  TBS.COMPANY       = TB.COMPANY
         AND  TBS.BALANCE_ID    = TB.BALANCE_ID
         AND  TBS.BALANCE_YEAR  = TB.BALANCE_YEAR
         AND  TBS.BALANCE_QTR   = TB.BALANCE_QTR
         AND  TBS.STATE         = TB.STATE
         AND  TBS.LOCALITY      = TB.LOCALITY
         AND  TBS.TAX_CLASS     = TB.TAX_CLASS)
  
  #ifdef TAXTEST
    AND TB.STATE        = 'CA'
  #else
    AND TB.STATE        = 'WA'
  #endif
  
  AND TB.TAX_CLASS      IN ('1','3','I','O') 
  AND TB.TAX_QTD > 0
  AND TB.NLGRS_QTD > 0
end-SELECT

End-Procedure

begin-procedure Write-A-Record
  move $CompanyName    to $TransmitterName
  move &CT.Federal_EIN to $FedEIN 099999999
  let $FedEIN = lpad($FedEIN,9,'0')
  move $CompnyAdd1    to $TransmitterAddress
  move $CompnyCity        to $TransmitterCity
  let $TransmitterState = rtrim(&CT.State, ' ')
  move &CT.Postal      to $Zip
  move '000000'        to $MediaAuthNbr 099999
  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  write 10 from    'A':1  !1-1
           $CalendarYr:4  !2-5
               $FedEIN:9  !6-14
                'PFML':4  !15-18
                   $Sp:5  !19-23
      $TransmitterName:50 !24-73
   $TransmitterAddress:40 !74-113
      $TransmitterCity:25 !114-138
     $TransmitterState:2  !139-140
                   $Sp:13 !141-153
                  $Zip:5  !154-158
             $ZipExtsn:5  !159-163
   $TransmitterContact:30 !164-193
     $TransmitterPhone:10 !194-203
  $TransmitterPhoneExt:4  !204-207
                   $Sp:6  !208-213
                   $Sp:1  !214-214
                   $Sp:5  !215-219
                   $Sp:1  !220-220
                   $Sp:9  !221-229
                   $Sp:13 !230-242
         $CreationDate:8  !243-250
                   $Sp:25 !251-275


  add 1 to #RecordCount
end-procedure

begin-procedure Write-E-Record
  move &B.Federal_EIN  to $FedEIN 099999999
  let $FedEIN = lpad($FedEIN,9,'0')
  move &B.Descr        to $ErName
  move &B.Address1     to $ErAddress
  move &B.City         to $ErCity
  let $ErState = rtrim(&B.State, ' ')
  move &B.Postal       to $Zip

  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0
  and $ZipExtsn <> '    '
    let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  move &B.COUNTRY   TO $CompanyCountry
  uppercase $CompanyCountry
  if $CompanyCountry = 'USA'
     move ' '   to $ForeignInd
  else
     move 'X'   to $ForeignInd
  end-if

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  move '1' to $NWNW         !E record will be followed by S record
  LET $PFML_Acct = 'C' || $UBINumber
  
  write 10 from 'E':1    !1-1
   &TX.Balance_Year:4    !2-5
            $FedEIN:9    !6-14
                $Sp:9    !15-23
            $ErName:50   !24-73
         $ErAddress:40   !74-113
            $ErCity:25   !114-138
           $ErState:2    !139-140
                $Sp:8    !141-148
          $ZipExtsn:5    !149-153
               $Zip:5    !154-158
                $Sp:8    !159-166
             'PFML':4    !167-170
                $Sp:2    !171-172
                $Sp:15   !173-187
       $QtrEndMonth:2    !188-189
              $NWNW:1    !190-190
                $Sp:11   !191-201
         $PFML_Acct:10   !202-211
                $Sp:44   !212-255
        $ForeignInd:1    !256-256
                $Sp:1    !257-257
         $UBINumber:12   !258-269
                $Sp:6    !270-275
 

  move 'Y' to $RecordWritten
  add 1 to #Count_E
  move 0 to #Count_S
  add 1 to #RecordCount
end-procedure

begin-procedure Write-S-Record
  add 1 to #Count_S
  move '000000000000000' to $LocCode

  write 10 from 'S':1    !1-1
       $NATIONAL_ID:9    !2-10
          $LastName:20   !11-30
         $FirstName:12   !31-42
        $MidInitial:1    !43-43
                $Sp:20   !44-63
         $NlGrs_QTD:14   !64-77
                $Sp:54   !78-131
             $Hours:4    !132-135
                $Sp:7    !136-142
             'PFML':4    !143-146
                $Sp:68   !147-214
       $QtrEndMonth:2    !215-216
        $CalendarYr:4    !217-220
                $Sp:55   !221-275

  add 1 to #RecordCount
  move '00' to $Weeks
  move 0    to #Weeks
end-procedure

begin-procedure Write-T-Record
  move #Count_S to $Count_S 0999999
  add #Count_S to #TotCount_S
  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999

    write 10 from 'T':1   !1-1
             $Count_S:7   !2-8 
               'PFML':4   !9-12 
                  $Sp:14  !13-26 
        $Co_NlGrs_QTD:14  !27-40 
                  $Sp:28  !41-68 
          $TotAmtPrem:14  !69-82
                  $Sp:193 !83-275

  add 1 to #RecordCount
  move 0  to #T_Gross

end-procedure

begin-procedure Write-F-Record
  move #TotCount_S to $TotCount_S  0999999999
  move #Count_E    to $Count_E     0999999999
  move #Tot_NlGrs_QTD to $Tot_NlGrs_QTD 099999999999999

  write 10 from 'F':1   !1-1
        $TotCount_S:10  !2-11
           $Count_E:10  !12-21
             'PFML':4   !22-25
                $Sp:15  !26-40
     $Tot_NlGrs_QTD:15  !41-55
                $Sp:220 !56-275

end-procedure


begin-procedure Open-File

  open '{IMPORTPREFIX}TAX815WA{IMPORTSUFFIX}' as 10 for-writing record=275:fixed

end-procedure


begin-procedure Print-Negative-Hours

  if $_Company <> $_LastCompany
    move $_Company     to $_LastCompany
    move $_CompanyName to $_LastCompanyName
    move '' to $PrintHeader
  end-if

  if $PrintHeader = ''
     print '**** Negative Hours ******'  (+1,1)
        print 'EmplID'                   (+2,1)
        print 'Hours'                     (0,55)
        position (+1)
        move 'N' to $PrintHeader
  end-if

  let $EmpName = substr($LastName, 1, 20) || ', ' || substr($FirstName, 1, 15)

  print $EmplID       (+1,1)
  print $EmpName       (0,15)
  print $NegHours      (0,52)    edit 99999.99

end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'getweksa.sqc'  !Get-Weeks procedure
#Include 'datemath.sqc'  !Date math procedures
#Include 'gethours.sqc'  !Get-Hours procedure

