!***********************************************************************
! GPBRTE01:  Termo de Rescisão do Contrato de Trabalho                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  28142594                                            *
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'       !Set environment
  
Begin-Setup
#include 'setupdb.sqc'
 Declare-Printer     THIS_REPORT
   Type=HPLASERJET
   Font=3
   Point-Size=1
   Symbol-Set=0U     ! ASCII symbol set
 End-Declare

 Declare-Layout THIS_REPORT
   Orientation   = Portrait
   Top-margin    = 0.3
   Left-margin   = 0.5
   Right-margin  = 0.5
   Max-Lines     = 250
   Char-Width    = 4      ! 7.2
   Line-Height   = 5.5
 End-Declare

 Declare-Report THIS_REPORT
   Printer-Type  = HPLASERJET
   LayOut        = THIS_REPORT
 End-Declare


End-Setup

!******** BEGIN PRINCIPAL *************

Begin-Report
   Do Init-Report
   Do Process-Main
End-Report

!***************************************
Begin-Procedure Init-Report
!***************************************
 Move 'GPBRTE01'                       To $ReportID
 Move 'TERMO DE RESCISÃO DO CONTRATO DE TRABALHO'   To $ReportTitle
 move 'Ver.PUM29_01' to $ReportVersion

 Alter-Locale MONEY-SIGN = 'R$'
 move '.' To $ReportSThousand
 move ',' To $ReportSDecimal

 Do Init-dateTime
 Do Init-Number
 Do Stdapi-Init
 Do Get-Current-DateTime
  
 Date-time () hh:mi:ss &timeBegan
 Display $ReportID
 Display $ReportTitle
 Display $ReportVersion
 Display 'Report Began: ' noline
 Display &timeBegan
 let #fonthel  = 2
 let #fontstd  = 4
 let #sizexsm  = 4
 let #sizesm   = 4
 let #sizestd  = 5
 let #sizestd2 = 7
 let #sizegr   = 10
 Do Stdapi-Term
 let #count_TRCT = 0 
 let #count_TQRCT = 0 
 let #count_THRCT = 0 

End-Procedure Init-Report

!**************************************
Begin-Procedure Process-Main
!Begin-Document
! Procedure   : Process-Main
! Description : Process Main, in this procedure is open the xml file,
!               get SQR parameters and calls employee procedure.
!End-Document
!Begin-Document
!**************************************  
  Let #EmployeeCount = 0
  Let $openXMLFile = 'N'

  Do Delete-XML-RunControl 
  Do Delete-Elem-RunControl
  
  let $FileName = 'gpbrte01.xml'
  let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
  let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'

  let #FNum  = 1
  let #FStat = 0
  let $xml_cntrl_begin = '<'
  let $xml_cntrl_end   = '>'
  let $xml_text_delim  = '"'
  let $xml_tag_end     = '/'
  let $xml_tag         = ''
  let $xml_content     = ''
  let $xml_output_line = ''  
 
  Do Get-Parameters
  show 'Language Cd: ' $Curr_language_Cd 
  let $SecurityClausewithERN = ''
  let $_TableAlias = 'A'
  Do Security-Param
  Do Employees-Info

  if #EmployeeCount = 0 and $openXMLFile = 'N'
      
     !Do Open-XML-File($FileName, #FNum, #FStat, $openXMLFile) 
     !let $xml_tag = 'EMPLOYEE_DATA'      
     !Do Process-XML-Tag-Beg
     !let $xml_tag = 'EMPLID'
     !let $xml_content = 'RELATORIO SIM EMPREGADOS'
     !do Process-XML-Tag-Content
     !let $xml_tag = 'EMPLOYEE_DATA'      
     !Do Process-XML-Tag-End
     !let $xml_tag = 'start'    
     !Process-XML-Tag-End

     show '******  Relatorio sim empregados'
  else
     !let $xml_tag = 'start'    
     !Do Process-XML-Tag-End
     
     
  end-if
  
  Do Delete-Elem-RunControl
  Do Close-File
  Do Delete-RunControl
   
End-Procedure Process-Main

!**************************************
Begin-Procedure Get-Parameters
#debug show 'Procedure: Get-Parameters'
!Begin-Document
! Procedure   : Get-Parameters
! Description : Get Run Control Parameters
!
! Input Vars  :
!               $prcs_oprid             Oper ID
!               $prcs_run_cntl_id       Run Control ID
! Output Vars :
!               $xxx             xxx   
! Last Changes: - Add GPBR_PIN_ERN_NUM for % Alimony
!End-Document
!**************************************

let $WhereOption = ''

Begin-Select
GP.COMPANY
GP.BEGIN_DT
GP.END_DT
GP.GPBR_FORMAT_ID
GP.RUN_TYPE
GP.GPBR_PIN_ACCUM_NUM
GP.GPBR_PIN_VAR_NUM
GP.GPBR_LIST_OPTION
GP.GPBR_COMP_REPT
GP.GPBR_PIN_ERN_NUM
GP.GPBR_PRINT_ZERO
GP.GPBR_TRCT_RPT_TYPE
GP.GPBR_COPIES

 let $Company        = Rtrim(&GP.COMPANY, ' ')
 let $BeginDt        = Rtrim(&GP.BEGIN_DT, ' ')
 let $EndDt          = Rtrim(&GP.END_DT, ' ')
 let $FormatID       = Rtrim(&GP.GPBR_FORMAT_ID, ' ')
 let $RunType        = Rtrim(&GP.RUN_TYPE, ' ')
 let #Acc_Ter        = &GP.GPBR_PIN_ACCUM_NUM
 let #Alimony        = &GP.GPBR_PIN_VAR_NUM
 let $List_Option    = Rtrim(&GP.GPBR_LIST_OPTION, ' ')
 let $CompRpt        = Rtrim(&GP.GPBR_COMP_REPT, ' ')
 let #AlimonyFGTSPin = &GP.GPBR_PIN_ERN_NUM
 let $printZero      = rtrim(&GP.GPBR_PRINT_ZERO, ' ')
 let $TRCTreportType = Rtrim(&GP.GPBR_TRCT_RPT_TYPE, ' ')
 let #Copies         = &GP.GPBR_COPIES
 
 Evaluate  $TRCTreportType
   when = '1'
   when = '2'
     Let $TemplateID = 'GPBR_TRCT'
     Let $ReportDefn = 'GPBR_TRCT' 
     let $FileName = 'gpbrte01.xml'
     let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
     let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
     Do Insert-XML-RunControl
   when = '1'  
   when = '3'
     Let $TemplateID = 'GPBR_TQRCT'
     Let $ReportDefn = 'GPBR_TQRCT' 
     let $FileName = 'gpbrte02.xml'
     let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
     let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
     Do Insert-XML-RunControl 
   when = '1'  
   when = '4'
     Let $TemplateID = 'GPBR_THRCT'
     Let $ReportDefn = 'GPBR_THRCT' 
     let $FileName = 'gpbrte03.xml'
     let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
     let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
     Do Insert-XML-RunControl 
 end-evaluate
 
 let $WhereRunC = 'WHERE OP.OPRID = ' || '''' || $prcs_oprid || '''' || ' AND OP.RUN_CNTL_ID = '
 let $WhereRunC = $WhereRunC  || '''' || $prcs_run_cntl_id || '''' || ')'

 Evaluate $List_Option
 when = '2'
   let $TableOption = 'PS_GPBR_RC_TER_EST'
   let $WhereOption = ' AND A.ESTABID '
   let $WhereOption = $WhereOption   ||' IN ' || ' (SELECT OP.ESTABID FROM PS_GPBR_RC_TER_EST OP '
   let $WhereOption = $WhereOption   || $WhereRunC

  when = '3'
   let $TableOption = 'PS_GPBR_RC_TER_EMP'
   let $WhereOption = ' AND A.EMPLID '
   let $WhereOption = $WhereOption   ||' IN ' || ' (SELECT OP.EMPLID FROM PS_GPBR_RC_TER_EMP OP '
   let $WhereOption = $WhereOption   || $WhereRunC

  when = '7'
   let $TableOption = 'PS_GPBR_RC_TER_DEP'
   let $WhereOption = ' AND A.DEPTID '
   let $WhereOption = $WhereOption   ||' IN ' || ' (SELECT OP.DEPTID FROM PS_GPBR_RC_TER_DEP OP '
   let $WhereOption = $WhereOption   || $WhereRunC

  when-other
   let $WhereOption = ' AND B.EMPLID=C.EMPLID'

 End-Evaluate

 If $BeginDt <> ''
     let $WhereOption = $WhereOption || ' AND A.EFFDT >= ' || '''' || $BeginDt || ''''
 else
     
 End-If

 If $EndDt = ''
     let $EndDt = $AsOfToday
 End-If

 let $WhereOption = $WhereOption || ' AND A.EFFDT <= ' || '''' || $EndDt || ''''
 

FROM PS_GPBR_RC_TER_CON GP
WHERE GP.OPRID       = $prcs_oprid
AND   GP.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select

#debug show '[Alimony PIN FGTS (#AlimonyFGTSPin)] ' #AlimonyFGTSPin
#debug show '[$BeginDt]                ' $BeginDt
#debug show '[$EndDt]                  ' $EndDt
#debug show '[$AsOfDate]               ' $AsOfToday
#debug show '[$WhereOption]            ' $WhereOption
#debug show '[#Alimony]                ' #Alimony
#debug show '-' 

End-Procedure  Get-Parameters

!**************************************
Begin-Procedure Employees-Info
!Select 11.Name,19.Birthdate,24 Date Afast 25 Causa do afastamento,28.Category
#debug show 'Procedure: Employees-Info'
#debug show '[$WhereOption:]           ' $WhereOption
! CONTRACT_NUM
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************
let $Process-Elementlist = ' '
Do Get-Format
Do Get-Max-Legal-Code

Begin-Select
A.EMPLID
A.LOCATION
A.ESTABID
A.EMPL_STATUS           &A.EMPL_STATUS
A.EFFDT
A.ACTION
A.ACTION_REASON
A.EMPL_RCD
A.GP_PAYGROUP
B.NAME_PSFORMAT
B.NAME_DISPLAY
C.BIRTHDATE
V.SEFIP_CATEGORY_BRA
A.EMPL_CLASS
X.TERMINATION_DT
X.LAST_DATE_WORKED
A.TERMINATION_DT
A.LAST_HIRE_DT
A.HIRE_DT
A.CONTRACT_NUM
A.UNION_CD
A.REG_REGION
A.EXPECTED_END_DATE

  let $Emplid             = ltrim(rtrim(&A.EMPLID, ' '), ' ')
  let $Estabid            = rtrim(&A.ESTABID, ' ')
  let $JobEffdt           = rtrim(&A.EFFDT, ' ')
  let $union              = rtrim(&A.UNION_CD, ' ')
  let $TerminationDt      = rtrim(&A.TERMINATION_DT, ' ')
  let $ExpectedEndDt      = rtrim(&A.EXPECTED_END_DATE, ' ') 
  let $Action             = Rtrim(&A.ACTION, ' ')
  let $ActionReason           = Rtrim(&A.ACTION_REASON, ' ')
  let #EmplRcd            = &A.EMPL_RCD
  let $GPPayGroup         = Rtrim(&A.GP_PAYGROUP, ' ')
  let $Name               = Rtrim(&B.NAME_DISPLAY, ' ')
  let $Dt_Birth           = Rtrim(&C.BIRTHDATE, ' ')
  let $ContractNum        = rtrim(&A.CONTRACT_NUM, ' ')
  let $EmplClass          = rtrim(&A.EMPL_CLASS, ' ')
  let $RegRegion          = Rtrim(&A.REG_REGION, ' ')  
  let $Category           = Rtrim(&V.SEFIP_CATEGORY_BRA, ' ')
  let $ContractTypeDescr = ' '
   
  If $TerminationDt=''
      let $TerminationDt          = &X.TERMINATION_DT
  End-If  

  let $Entry_Dt      =  Rtrim(&A.LAST_HIRE_DT, ' ')
  Do Format-DateTime($Entry_Dt, $Entry_DateF,{DEFDMY}, '','')  
  Do Format-DateTime($TerminationDt, $Date_AfF,{DEFDMY}, '','')
  Do Format-DateTime($Dt_Birth, $BirthDate,{DEFDMY}, '','')
  Do Convert-To-Dtu-Date($TerminationDt, $TerminationDt_DTU)
  Do Convert-To-Dtu-Date($JobEffdt, $JobEffdt_DTU)
  Do Convert-To-Dtu-Date($ExpectedEndDt, $ExpectedEndDt_DTU)
  
  Do Convert-To-Dtu-Date(($Entry_Dt, $Entry_Dt_DTU)
  Do dtu-diff-years($Entry_Dt_DTU, $TerminationDt_DTU, #yearswrkd)
  
  #debug show '[$yearswrkd:]              ' #yearswrkd
  #debug show '*************'
  #debug show '[Employee ID ($Emplid)]   ' $Emplid
  #debug show '[$TerminationDt]          ' $TerminationDt
  #debug show '[$ContractNum)            ' $ContractNum 
  #debug show '[$EmplClass]              ' $EmplClass 
  #debug show '[Effdt          ($JobEffdt)] ' $JobEffdt 
  #debug show '[Expected End Dt($ExpectedEndDt)] ' $ExpectedEndDt
  #debug show '[$Estabid:]               ' $Estabid
  #debug show '[$Entry_Dt:]              ' $Entry_Dt
  
  If $ContractNum <> ''
     Do Get-Contract-Data
  else
     Do Get-Contract-Type-EmplClass
  end-if
  
  Do Get-Union-Data
  Do Name-Employeer
  Do Employeer-Info
  Do Estab-ID
  Do Serv-Taker
  Do Select-PIS
  Do Select-Employee-Address
  Do Select-Carteira
  Do Select-CPF
  Do Mother-Name
!  Do Select-First-Job
  Do Aviso-Date
  Do Aff-Cause
  
  !Process accumulators and Element List
 
  let $Employer_Addr         = ' '
  let $Employer_Neighborhood = ' '
  let $Employer_County       = ' '
  let $Employer_State        = ' '
  let $Employer_Postal       = ' '
  
  Do GetEstabAddress($Estabid, $JobEffdt, $Address, $Number, $Complement, $Neighborhood, $ZipCode, $Citycode, $CityName, $Empl_StateCode)

  let $Employer_Addr = $Address || ', ' || $Number || ' ' || $Complement
  let $Employer_Neighborhood = $Neighborhood
  let $Employer_County = $CityName
  let $Employer_State = $Empl_StateCode
  let $Employer_Postal = $ZipCode
  Let $foundDelta = 'N'
   
  Do Process-Element-List
  if #ContErn > 0 or #ContDed > 0
     Let #EmployeeCount = #EmployeeCount + 1
  end-if
  #debug show '$Process-Elementlist ' $Process-Elementlist ' #ContErn ' #ContErn ' #ContDed ' #ContDed
  

FROM PS_JOB A
,PS_PERSON_NAME B
,PS_PERSON C
,PS_JOB_JR V
,PS_EMPLOYMENT X
WHERE A.COMPANY = $Company
  AND A.EMPLID  = B.EMPLID
  AND A.EMPLID  = C.EMPLID
  AND A.EMPLID  = V.EMPLID
  AND A.EMPLID  = X.EMPLID
  AND A.EMPL_RCD= V.EMPL_RCD
  AND A.EMPL_RCD= X.EMPL_RCD
  AND V.EFFDT   = A.EFFDT
  AND A.EFFSEQ  = V.EFFSEQ
  AND A.EFFSEQ  = (SELECT MAX(A_ES.EFFSEQ)
                  FROM PS_JOB A_ES
                  WHERE A.EMPLID = A_ES.EMPLID
                  and A.EMPL_RCD = A_ES.EMPL_RCD
                  and A.ESTABID = A_ES.ESTABID  
                  and A.EFFDT = A_ES.EFFDT)
  AND A.EMPL_STATUS IN ('T','U','V','W','X','D')
[$WhereOption]
  AND B.NAME_TYPE = 'PRI'
![$SecurityClausewithERN]
End-Select
End-Procedure Employees-Info

!**************************************
Begin-Procedure Get-Contract-Data
#debug show 'Procedure: Get-Contract-Data **'
!!! #debug show '  $ContractNum   ' $ContractNum
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************
let $ContractTypeBRA =  ' '
let $ContractDefault =  ' '

Begin-Select
CNT2.CONTRACT_NUM 
CNT2.EFFDT 
CNT2.CONTRACT_TYPE 
CNT.CONTRACT_BEGIN_DT 
CNT.CONTRACT_END_DT 
CNT.CONTRCT_EXP_END_DT 
CNT.CONTRACT_STATUS 
CNT.REG_REGION

  let $RegRegion = Rtrim(&CNT.REG_REGION, ' ')
  let $ContractType = Rtrim(&CNT2.CONTRACT_TYPE, ' ') 
  Do Convert-to-Dtu-Date(&CNT.CONTRCT_EXP_END_DT, $ContrtcExpDt_DTU)
  Do Convert-To-Dtu-Date(&CNT.CONTRACT_END_DT , $ContractEndDt_DTU)
  
  Do Get-Contract-Type
  Do Get-Contract-Data-BRA
  
  #debug show '$ContrtcExpDt_DTU  ' $ContrtcExpDt_DTU 
  #debug show '$ContractEndDt_DTU  ' $ContractEndDt_DTU 
  #debug show '$Clause  ' $Clause  
  #debug show '$terminationDt_DTU: '  $terminationDt_dtu
  #debug show 'if $terminationDt < $ContrtcExpDt_DTU '     
  
  if $terminationDt_DTU < $ContrtcExpDt_DTU  
     if $ContractTypeBRA = '1' 
        if $Clause = 'Y'
           Show '* Empregado ' $Emplid
           Show '  Contrato Indeterminado encerrado em Período de Experiência.' 
           Show '  Assumido como Determinado com Cláusula de Direto Recíproco de Rescisão'
           let $ContractTypeBRA = '2'
        else
           Show '* Empregado ' $Emplid
           Show '  Contrato Indeterminado encerrado em Período de Experiência.'
           Show '  Assumido como Determinado Sem Cláusula de Direto Recíproco de Rescisão.'
           let $ContractTypeBRA = '3'
        end-if
     end-if
  else
     if $terminationDt_DTU < $Contract2EndDt_DTU
        if $ContractTypeBRA = '1' 
           if $Clause = 'Y'
              Show '* Empregado ' $Emplid
              Show '  Contrato Indeterminado encerrado em Período de Experiência.' 
              Show '  Assumido como Determinado com Cláusula de Direto Recíproco de Rescisão'
              let $ContractTypeBRA = '2'
           else
              Show '* Empregado ' $Emplid
              Show '  Contrato Indeterminado encerrado em Período de Experiência.'
              Show '  Assumido como Determinado Sem Cláusula de Direto Recíproco de Rescisão.'
              let $ContractTypeBRA = '3'
           end-if
         end-if
     else     
         if $terminationDt_DTU > $ContrtcExpDt_DTU 
            if $ContractTypeBRA = '2' or $ContractTypeBRA = '3'
               if $ContractDefault = 'Y'
                  Show '* Empregado ' $Emplid
                  Show '  Contrato por Tempo Determinado convertido para Contrato Indeterminado.'
                  Show '  Continuidade na prestação de Serviços, após data de término.'

                  let $ContractTypeBRA = '1'
            end-if
          end-if
         end-if
       end-if
   end-if
   
   #debug show '$ContractTypeBRA: ' $ContractTypeBRA
   
   Do Get-Contract-Descr

FROM PS_WKF_CNT_TYPE  CNT2
    ,PS_CONTRACT_DATA CNT
WHERE CNT.EMPLID = CNT2.EMPLID 
AND CNT.CONTRACT_NUM=CNT2.CONTRACT_NUM 
AND CNT.EMPLID = $Emplid
AND CNT.CONTRACT_NUM=$ContractNum
End-Select
End-Procedure Get-Contract-Data

!**************************************
Begin-Procedure Get-Contract-Data-BRA
#debug show 'Procedure: Get-Contract-Data-BRA **'
!Begin-Document
!        - Add GPBR_PIN_ERN_NUM for % Alimony
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************
Begin-Select
CNT3.CONTRCT_BGN_DT_BRA
CNT3.CONTRCT_END_DT_BRA
CNT3.CONTRCT_CLAUSE_BRA

  let $Clause = rtrim(&CNT3.CONTRCT_CLAUSE_BRA, ' ')
  Do Convert-To-Dtu-Date(&CNT3.CONTRCT_END_DT_BRA , $Contract2EndDt_DTU)
    
FROM PS_CONTRCT_DTA_BRA CNT3  
WHERE CNT3.EMPLID = $Emplid
AND CNT3.CONTRACT_NUM=$ContractNum
End-Select

#debug Show '  $Clause ' $Clause
#debug show '  $Contract2EndDt_DTU ' $Contract2EndDt_DTU

End-Procedure Get-Contract-Data-BRA

!**************************************
Begin-Procedure Get-Contract-Type
#debug show 'Procedure: Get-Contract-Type **'
#debug show '  $ContractType ' $ContractType
#debug show '  $RegRegion '  $RegRegion
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************


Begin-Select
CNTY.EFFDT 
CNTY.CONTRACT_TYPE_BRA
CNTY.CONTRCT_DFLT_BRA

 let $ContractTypeBRA =  Rtrim(&CNTY.CONTRACT_TYPE_BRA, ' ')
 let $ContractDefault =  Rtrim(&CNTY.CONTRCT_DFLT_BRA, ' ')
 
 Do Get-Contract-Descr

FROM PS_CNT_TYP_DEF_BRA CNTY 
WHERE CNTY.CONTRACT_TYPE = $ContractType
AND CNTY.SETID = $RegRegion
AND CNTY.EFFDT = (SELECT MAX(E.EFFDT)
                  FROM PS_CNT_TYP_DEF_BRA E
                  WHERE E.CONTRACT_TYPE = CNTY.CONTRACT_TYPE
                  AND   E.SETID = CNTY.SETID
                  AND   E.EFFDT <= $TerminationDt)
End-Select

#debug show '  $ContractTypeBRA ' $ContractTypeBRA
#debug show '  $ContractDefault ' $ContractDefault

End-Procedure Get-Contract-Type

!**************************************
Begin-Procedure Get-Contract-Type-EmplClass
#debug show 'Procedure: Get-Contract-Type-EmplClass'
#debug show '[$RegRegion]              '  $RegRegion
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************
Begin-Select
CTE.CONTRACT_TYPE_BRA
CTE.CONTRCT_DFLT_BRA

 let $ContractTypeBRA =  Rtrim(&CTE.CONTRACT_TYPE_BRA, ' ') 
 let $ContractDefault =  Rtrim(&CTE.CONTRCT_DFLT_BRA, ' ')
 
 Do Get-Contract-Descr
 
  
 if $terminationDt_DTU > $ExpectedEndDt_DTU  
     if $ContractTypeBRA = '2' or $ContractTypeBRA = '3'
        if $ContractDefault = 'Y'
           Show '* Empregado ' $Emplid
           Show '  Contrato por Tempo Determinado convertido para Contrato Indeterminado.'
           Show '  Continuidade na prestação de Serviços, após data de término.'
           let $ContractTypeBRA = '1'
        end-if 
      end-if
 end-if


FROM PS_CNT_TYP_ECD_BRA CTE
WHERE CTE.EMPL_CLASS = $EmplClass
AND CTE.SETID = $RegRegion
AND CTE.EFFDT = (SELECT MAX(E.EFFDT)
                  FROM PS_CNT_TYP_ECD_BRA E
                  WHERE E.EMPL_CLASS = CTE.EMPL_CLASS
                  AND   E.SETID = CTE.SETID
                  AND   E.EFFDT <= $TerminationDt)
End-Select

End-Procedure Get-Contract-Type-EmplClass

!**************************************
Begin-Procedure Get-Contract-Descr
#debug show 'Procedure: Get-Contract-Descr'
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************

  Evaluate $ContractTypeBRA
  when = '1' 
      let $ContractTypeDescr = '1.Contrato de trabalho por prazo indeterminado'
  when = '2'
      let $ContractTypeDescr = '2.Contrato de trabalho por prazo determinado com cláusula de direito de rescisão antecipada.'
  when = '3'
      let $ContractTypeDescr = '3.Contrato de trabalho por prazo determinado sem cláusula de direito de rescisão antecipada.'
  end-evaluate

#debug show '[$ContractTypeBRA]]   ' $ContractTypeBRA
#debug show '[Description   ($ContractTypeDescr) ' $ContractTypeDescr

End-Procedure Get-Contract-Descr

!**************************************
Begin-Procedure Name-Employeer
!Select 02.RAZAO SOCIAL/NAME
#debug show 'Procedure: Name-Employeer **'
!Begin-Document
! Procedure   : xxx
! Description : xxx
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx      
!End-Document
!**************************************
Begin-Select
D.DESCR

  let $Employer_Name  = Rtrim(&D.DESCR, ' ')

FROM PS_COMPANY_TBL D
WHERE D.COMPANY = $Company
 AND  D.EFFDT   = (SELECT MAX(DD.EFFDT)
                  FROM PS_COMPANY_TBL DD
                  WHERE DD.COMPANY   = D.COMPANY
                  AND   DD.EFFDT    <= $EndDt)
End-Select
End-Procedure Name-Employeer

!**************************************
Begin-Procedure Employeer-Info
#debug show 'Procedure: Employeer Info **'
!Begin-Document
! Procedure   : xxx
! Description : Select fields 03,04,05,06,07,08
!
! Input Vars  :
!               $xxx             xxx
! Output Vars :
!               $xxx             xxx  
! Last Change :
!End-Document
!**************************************
Begin-Select
E.ESTAB_ID_BRA
F.DESCR
F.ADDRESS1
F.NUM1
F.ADDRESS2
F.ADDRESS4
F.CITY
F.STATE
F.POSTAL

   let $CNAE = Rtrim(&E.ESTAB_ID_BRA, ' ')
   If Length($CNAE) > 6
     let $CNAE = Substr($CNAE, 1, 5) ||'-' || substr($CNAE, 6, 2)
   End-If
    
   let $Employer_Addr = Rtrim(&F.ADDRESS1, ' ')
   let $NumEr = Rtrim(&F.NUM1, ' ')
   let $Employer_Addr =  $Employer_Addr ||' ' || $NumEr
   let $Employer_Neighborhood = Rtrim(&F.ADDRESS4, ' ')
   let $Employer_County = Rtrim(&F.CITY, ' ')
   let $Employer_State = Rtrim(&F.STATE, ' ')
   let $Postal = Rtrim(&F.POSTAL, ' ')

   Do Check-Strings

   let $Employer_Postal1 = substr($Postal   ,1,5)
   let $Employer_Postal2 = substr($Postal   ,6,3)
   let $Employer_Postal = $Employer_Postal1 ||'-' || $Employer_Postal2
      
   If $LegalEntType = 'EST'
      let $Employer_Name = Rtrim(&F.DESCR, ' ')     
   End-If

FROM PS_ESTAB_ID_BRA E
    ,PS_ESTAB_TBL F
WHERE E.COUNTRY = 'BRA'
  AND E.ESTABID = $Estabid
  AND E.ESTAB_ID_TYPE_BRA = 'CNAE'
  AND E.EFFDT   = (SELECT MAX(EE.EFFDT)
                  FROM PS_ESTAB_ID_BRA EE
                  WHERE EE.ESTABID     = E.ESTABID
                  AND   EE.EFFDT    <= $EndDt)
  AND E.ESTABID = F.ESTABID
  AND F.EFFDT   = (SELECT MAX(FF.EFFDT)
                  FROM PS_ESTAB_TBL FF
                  WHERE FF.ESTABID  = F.ESTABID
                  AND   FF.EFFDT    <= $EndDt)
End-Select
End-Procedure Employeer-Info

!**************************************
Begin-Procedure Estab-ID
!Select field 01
#debug show 'Procedure: Estab-ID  **'
!**************************************
let $CNPJ = ''
let $CEI  = ''
let $EstabAsoc  = ''
let $CEIF = ' '

Begin-Select
GA.COMP_INS_TYPE_BRA
GA.ESTAB_ASOC_BRA
GA.LEGAL_ENT_TYPE_BRA

   ! CEI with associated CNPJ
   If Rtrim(&GA.COMP_INS_TYPE_BRA, ' ')  = '20'
      let $EstabAsoc  = Rtrim(&GA.ESTAB_ASOC_BRA, ' ')
   End-If
   let $LegalEntType = Rtrim(&GA.LEGAL_ENT_TYPE_BRA, ' ')

FROM PS_ESTAB_TBL_BRA GA
WHERE GA.ESTABID = $Estabid
  AND GA.EFFDT   = (SELECT MAX(GAA.EFFDT)
                   FROM PS_ESTAB_TBL_BRA GAA
                   WHERE GAA.ESTABID = GA.ESTABID
                     AND GAA.EFFDT  <= $EndDt)
End-Select

Begin-Select
GB.ESTAB_ID_BRA

   let $CNPJ = Rtrim(&GB.ESTAB_ID_BRA, ' ')

FROM PS_ESTAB_ID_BRA GB
WHERE GB.ESTABID = $EstabAsoc
  AND GB.EFFDT   = (SELECT MAX(GG.EFFDT)
                  FROM PS_ESTAB_ID_BRA GG
                  WHERE GG.ESTABID  = GB.ESTABID
                  AND   GG.EFFDT   <= $EndDt)
  AND GB.COUNTRY = 'BRA'
  AND GB.ESTAB_ID_TYPE_BRA = 'CNPJ'
End-Select

Begin-Select
G.ESTAB_ID_TYPE_BRA
G.ESTAB_ID_BRA

  let $EstabIdType = Rtrim(&G.ESTAB_ID_TYPE_BRA, ' ')
  Evaluate $EstabIdType
    when = 'CNPJ'
      let $CNPJ = Rtrim(&G.ESTAB_ID_BRA, ' ')
    when = 'CEI'
      let $CEI  = Rtrim(&G.ESTAB_ID_BRA, ' ')
  End-Evaluate

FROM PS_ESTAB_ID_BRA G
WHERE G.ESTABID = $Estabid
  AND G.EFFDT   = (SELECT MAX(GG.EFFDT)
                  FROM PS_ESTAB_ID_BRA GG
                  WHERE GG.ESTABID  = G.ESTABID
                  AND   GG.EFFDT   <= $EndDt)
  AND G.COUNTRY = 'BRA'
  AND G.ESTAB_ID_TYPE_BRA IN ('CNPJ','CEI')
End-Select

If Length($CNPJ) > 11
  let $CNPJ_out = Substr($CNPJ, 1, 2) || '.' || Substr($CNPJ, 3, 3) || '.' || Substr($CNPJ, 6, 3)
  let $CNPJ_out = $CNPJ_out || '/' || Substr($CNPJ, 9, 4)
  If Length($CNPJ) > 13
    let $CNPJ_out = $CNPJ_out || '-' || Substr($CNPJ, 13, 2)
  End-If
  Let $CNPJ = $CNPJ_out
End-If

If Length($CEI) > 11
  let $CEIF = Substr($CEI, 1, 2) || '.' || Substr($CEI, 3, 3) || '.' || Substr($CEI, 6, 5)
  let $CEIF = $CEIF || '/' || Substr($CEI, 11, 2)
End-If

If $CEI <> ''
   let $ServiceT_CNPJ = $CEIF                                                 
Else
   let $ServiceT_CNPJ = $CNPJ                                                
End-If

End-Procedure Estab-ID

!*************************************
Begin-Procedure Serv-Taker
!Select field 09
#debug show 'Procedure: Serv-Taker **'
!**************************************
let $Serv-Taker = ''
let $Year = substr($EndDt,7,4)
let $Month = substr($EndDt,1,2)
Begin-Select
J.GPBR_SERVICE_TAKER

   let $Serv-Taker = Rtrim(&J.GPBR_SERVICE_TAKER, ' ')

FROM PS_GPBR_SERV_T_DTL J
WHERE J.YEARCD  = $Year
  AND J.MONTHCD = (SELECT MAX(JJ.MONTHCD)
                  FROM PS_GPBR_SERV_T_DTL JJ
                  WHERE J.YEARCD = JJ.YEARCD
                  AND   J.MONTHCD <= $Month)
  AND J.ESTABID = $Estabid
End-Select
End-Procedure Serv-Taker

!*************************************
Begin-Procedure Select-PIS
!SELECT 10 PIS/PASEP
#debug show 'Procedure: Select-PIS  **'
!**************************************
let $PIS = ''
let $PASEP = ''
Begin-Select
L.NATIONAL_ID_TYPE
L.NATIONAL_ID

   let $NationalIdType = Rtrim(&L.NATIONAL_ID_TYPE, ' ')
   Evaluate $NationalIdType
   when = 'PIS'
        let $PIS = Rtrim(&L.NATIONAL_ID, ' ')
   when = 'PASEP'
        let $PIS = Rtrim(&L.NATIONAL_ID, ' ')
   End-Evaluate

FROM PS_PERS_NID L
WHERE L.EMPLID  = $Emplid
  AND L.COUNTRY = 'BRA'
  AND L.NATIONAL_ID_TYPE IN ('PIS','PASEP')
End-Select
End-Procedure Select-PIS

!*************************************
Begin-Procedure Select-First-Job
!Select field 22.DataAdmissao
#debug show 'Procedure: Select-First-Job **'
!**************************************
let $Act_Rsn = ''
let $Entry_Dt = ''
Begin-Select
M.ACTION_REASON
M.JOB_ENTRY_DT

  let $Entry_Dt      =  Rtrim(&M.JOB_ENTRY_DT, ' ')
  Do Format-DateTime($Entry_Dt, $Entry_DateF,{DEFDMY}, '','')

  Evaluate $Act_Rsn
  when = 'FST'
       let $Act_Rsn = Rtrim(&M.ACTION_REASON, ' ')
  End-Evaluate

FROM PS_JOB M
WHERE M.EMPLID = $Emplid
AND   M.EFFDT  = (SELECT MIN(MM.EFFDT)
                 FROM PS_JOB MM
                 WHERE MM.EMPLID   = M.EMPLID
                 AND   MM.EMPL_RCD = M.EMPL_RCD
                 AND   MM.ACTION   = M.ACTION
                 AND   MM.EFFDT   <= $EndDt)
AND   M.EFFSEQ = (SELECT MAX(MM.EFFSEQ)
                 FROM PS_JOB MM
                 WHERE MM.EMPLID   = M.EMPLID
                 AND   MM.EMPL_RCD = M.EMPL_RCD
                 and   MM.ACTION   = M.ACTION
                 and   MM.ESTABID = M.ESTABID 
                 AND   MM.EFFDT    = M.EFFDT)
AND   M.ACTION ='HIR'
End-Select
End-Procedure Select-First-Job

!*************************************
Begin-Procedure Select-Employee-Address
!Select fields 12,13,14,15,16
#debug show 'Procedure: Select-Employee-Address **'
!**************************************
let $Empl_Address =''
let $Empl_Postal=''
let $Empl_State=''

Begin-Select
P.NUM1
P.ADDRESS1
P.ADDRESS2
P.ADDRESS3
P.ADDRESS4
P.CITY
P.STATE
P.POSTAL

  let $Empl_Address = Rtrim(&P.ADDRESS1, ' ')
  let $Empl_Address = $Empl_Address || ' ' || Rtrim(&P.NUM1, ' ')
  let $Empl_Address = $Empl_Address || ' ' || Rtrim(&P.ADDRESS2, ' ')
  let $Empl_Address = $Empl_Address || ' ' || Rtrim(&P.ADDRESS3, ' ')
  let $Empl_Neighborhood =  Rtrim(&P.ADDRESS4, ' ')
  let $Empl_County =  Rtrim(&P.CITY, ' ')
  let $Empl_State     =  Rtrim(&P.STATE, ' ')
  let $Empl_Postal    =  Rtrim(&P.POSTAL, ' ')

FROM PS_ADDRESSES P
WHERE P.EMPLID       =$Emplid
  AND P.ADDRESS_TYPE = 'HOME'
  AND P.EFFDT        = (SELECT MAX(PP.EFFDT)
                        FROM PS_ADDRESSES PP
                       WHERE PP.EMPLID = P.EMPLID
                         AND PP.EFFDT <= $TerminationDt)
End-Select
End-Procedure Select-Employee-Address

!*************************************
Begin-Procedure Select-Carteira
!Select field 17 =>$CTPS
#debug show 'Procedure: Select-Carteira  **'
!**************************************
let $Serie= ''
let $State= ''
let $CTPS= ''
Begin-Select
R.CTPS_SERIES_BRA
R.CTPS_STATE_BRA

  let $Serie  =    Rtrim(&R.CTPS_SERIES_BRA, ' ')
  let $State  =    Rtrim(&R.CTPS_STATE_BRA, ' ')
  let $CTPS = $Serie || ' '||$State
  Do Select-NatID
  let $CTPS = $NatID || ' ' || $CTPS

FROM PS_PERSON_BRA R
WHERE R.EMPLID=$Emplid
End-Select
End-Procedure Select-Carteira

!*************************************
Begin-Procedure Select-NatID
!Select field 17 =>$NatID
#debug show 'Procedure: Select-NatID **'
!**************************************
let $NatID  = ''
Begin-Select
R1.NATIONAL_ID

  let $NatID  =    Rtrim(&R1.NATIONAL_ID, ' ')

FROM PS_PERS_NID R1
WHERE R1.EMPLID           = $Emplid
  AND R1.COUNTRY          = 'BRA'
  AND R1.NATIONAL_ID_TYPE = 'CTPS'
End-Select
End-Procedure Select-NatID

!*************************************
Begin-Procedure Select-CPF
!Select field 18
#debug show 'Procedure: Select-CPF **'
!**************************************
let $CPF=''
Begin-Select
Q.NATIONAL_ID

  let $CPF   =   Rtrim(&Q.NATIONAL_ID, ' ')
  let $CPF1 = substr($CPF   ,1,3)
  let $CPF2 = substr($CPF   ,4,3)
  let $CPF3 = substr($CPF   ,7,3)
  let $CPF4 = substr($CPF   ,10,2)
  let $CPF = $CPF1 ||'.' || $CPF2 || '.' || $CPF3 || '.' || $CPF4

FROM PS_PERS_NID Q
WHERE Q.EMPLID           =$Emplid
  AND Q.COUNTRY          = 'BRA'
  AND Q.NATIONAL_ID_TYPE = 'CPF'
End-Select
End-Procedure Select-CPF

!*************************************
Begin-Procedure Mother-Name 
!Select field 20
#debug show 'Procedure: Mother-Name **'
!**************************************
let $Mother_Name   = ''
Begin-Select
PI.MOTHER_NAME_BRA

   let $Mother_Name   =  Rtrim(&PI.MOTHER_NAME_BRA, ' ')

FROM PS_PERSON_INFO_BRA PI
WHERE PI.EMPLID = $Emplid
End-Select

if $Mother_Name = ''
   Do Mother-Name-ADDL
end-if

End-Procedure Mother-Name-ADDL

!*************************************
Begin-Procedure Mother-Name-ADDL
!Select field 20
#debug show 'Procedure: Mother-Name-ADDL **'
!**************************************
let $Mother_Name   = ''
Begin-Select
NAM.NAME_DISPLAY

   let $Mother_Name   =  Rtrim(&NAM.NAME_DISPLAY, ' ')

FROM PS_NAMES NAM
WHERE NAM.EMPLID = $Emplid
AND NAM.NAME_TYPE = 'MTR'
AND NAM.EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_NAMES
                 WHERE EMPLID = NAM.EMPLID
                 AND NAME_TYPE = NAM.NAME_TYPE
                 AND EFFDT <= $EndDt)
End-Select
End-Procedure Mother-Name-ADDL

!*************************************
Begin-Procedure Aviso-Date
!Select fields 23 Y 26
#debug show 'Procedure: Select-Aviso-Date **'
!**************************************
let $Bgn_Dt = ''
Begin-Select
S.GPBR_FGTS_CD

  let #FGTS_CD      =  &S.GPBR_FGTS_CD

FROM PS_GPBR_PYEST_PARM S
WHERE S.EMPLID=$Emplid
  AND S.BGN_DT= (SELECT MAX(SS.BGN_DT)
                FROM PS_GPBR_PYEST_PARM SS
                WHERE SS.EMPLID   = S.EMPLID
                AND   SS.EMPL_RCD = S.EMPL_RCD
                AND   SS.BGN_DT  <= $EndDt)
End-Select

Begin-Select
S2.GPBR_TERM_NOTIF

  let $Bgn_Dt      =  Rtrim(&S2.GPBR_TERM_NOTIF, ' ')
  Do Format-DateTime($Bgn_Dt, $Bgn_Dt_PrF,{DEFDMY}, '','')

FROM PS_GPBR_PAYEE_PARM S2
WHERE S2.EMPLID=$Emplid
  AND S2.BGN_DT= (SELECT MAX(SS2.BGN_DT)
                 FROM PS_GPBR_PAYEE_PARM SS2
                 WHERE SS2.EMPLID   = S2.EMPLID
                 AND   SS2.EMPL_RCD = S2.EMPL_RCD
                 AND   SS2.BGN_DT  <= $EndDt)
End-Select
End-Procedure Aviso-Date

!*************************************
Begin-Procedure Aff-Cause
!Select field 25
#debug show 'Procedure: Select-Afastamento Cause'
!**************************************
let $Term_type    = ''
let $TermTypeCode = ''
Begin-Select
A.GPBR_RPT_CODE 


   if Rtrim(&A.GPBR_RPT_CODE,' ') <> '00' 
   
     let $TermTypeCode   = Rtrim(&A.GPBR_RPT_CODE,' ')
     !let $FieldValue     = Rtrim(&A.GPBR_RPT_CODE,' ')

   End-If   

  ! let $TermTypeCode   = Rtrim(&A.GPBR_RPT_CODE,' ')
  let $FieldValue     = Rtrim(&A.GPBR_RPT_CODE,' ')
  let $FieldName      = 'GPBR_RPT_CODE'
  #debug show '[$FieldValue:]          '  $FieldValue
  #debug show '[$FieldName:]           '  $FieldName

  Do Get-ActionReason-Description
    
  
FROM PS_GPBR_RPTMOV_DEF A 
WHERE  A.ACTION = $Action 
AND    A.ACTION_REASON = $ActionReason 
AND    A.GPBR_RPT_PROC_TYPE = '001' 
AND    A.EFFDT = ( SELECT MAX(A2.EFFDT) 
                   FROM PS_GPBR_RPTMOV_DEF A2 
                   WHERE A2.ACTION = A.ACTION 
                   AND A2.ACTION_REASON = A.ACTION_REASON 
                   AND A2.GPBR_RPT_PROC_TYPE = A.GPBR_RPT_PROC_TYPE
                   AND A2.EFFDT <= $EndDt ) 
End-Select

#debug show '  $Desc_Aff  : '  $Desc_Aff

End-Procedure Aff-Cause

!*************************************
Begin-Procedure Aff-Causebck
!Select field 25
#debug show 'Procedure: Select-Afastamento Cause'
!**************************************
let $Term_type    = ''
let $TermTypeCode = ''
Begin-Select
T.GPBR_TERM_TYPE

  let $Term_type      = Rtrim(&T.GPBR_TERM_TYPE,' ')
  #debug show '[$Term_type:]           '  $Term_type
  #debug show '[$Curr_language_Cd:]    ' $Curr_language_Cd

  Do GetTerminationCode ($Term_type, 'gpbrte01', $Curr_language_Cd, $TermTypeCode, $Desc_Aff)

  #debug show '[TermTypeCode:]         ' $TermTypeCode
  #debug show '[$Desc_Aff:]            ' $Desc_Aff

FROM PS_GPBR_TER_ACTRSN T
WHERE T.ACTION        = $Action
  AND T.ACTION_REASON = $ActionReason
End-Select
End-Procedure Aff-Causebck

!*************************************
Begin-Procedure Get-Xlat-Description
#debug show 'Procedure: Get-Xlat-Description'
!**************************************
let $Curr_language_Cd = Rtrim($Curr_language_Cd, ' ')
let $Desc_Aff = ''
Begin-Select
U.XLATLONGNAME

  let $XlatDescription   =   Rtrim(&U.XLATLONGNAME, ' ')

FROM PSXLATITEMLANG U
WHERE U.FIELDNAME   = $FieldName
  AND U.FIELDVALUE  = $FieldValue
  AND U.LANGUAGE_CD = $Curr_language_Cd
  AND U.EFFDT       = (SELECT MAX(EFFDT)
                       FROM PSXLATITEMLANG
                       WHERE FIELDNAME = U.FIELDNAME
                       AND FIELDVALUE = U.FIELDVALUE
                       AND LANGUAGE_CD = U.LANGUAGE_CD
                       AND EFFDT <= $EndDt)
End-Select

If $Desc_Aff = ''
Begin-Select
V.XLATLONGNAME

  let $XlatDescription = Rtrim(&V.XLATLONGNAME, ' ')

FROM PSXLATITEM V
WHERE V.FIELDNAME  = $FieldName
  AND V.FIELDVALUE = $FieldValue
  AND V.EFFDT      = (SELECT MAX(EFFDT)
                      FROM PSXLATITEM
                      WHERE FIELDNAME = V.FIELDNAME
                      AND FIELDVALUE = V.FIELDVALUE
                      AND EFFDT <= $EndDt)
End-Select
End-If
End-Procedure Get-Xlat-Description

!*************************************
Begin-Procedure Get-ActionReason-Description
#debug show 'Procedure: Get-Xlat-Description'
!**************************************
let $Curr_language_Cd = Rtrim($Curr_language_Cd, ' ')
let $Desc_Aff = ''
Begin-Select
U.DESCR100

  let $Desc_Aff   =   Rtrim(&U.DESCR100, ' ')

FROM  PS_GPBR_RPT_CD_LNG U
WHERE U.GPBR_RPT_PROC_TYPE   = '001'
  AND U.GPBR_RPT_CODE  = $FieldValue
  AND U.LANGUAGE_CD = $Curr_language_Cd
  AND U.EFFDT       = (SELECT MAX(EFFDT)
                       FROM PS_GPBR_RPT_CD_LNG
                       WHERE GPBR_RPT_PROC_TYPE = U.GPBR_RPT_PROC_TYPE
                       AND GPBR_RPT_CODE = U.GPBR_RPT_CODE
                       AND LANGUAGE_CD = U.LANGUAGE_CD
                       AND EFFDT <= $EndDt)
End-Select

If $Desc_Aff = ''
Begin-Select
V.DESCR100

  let $Desc_Aff = Rtrim(&V.DESCR100, ' ')

FROM PS_GPBR_RPT_CD_TBL V
WHERE V.GPBR_RPT_PROC_TYPE  = '001'
  AND V.GPBR_RPT_CODE = $FieldValue
  AND V.EFFDT      = (SELECT MAX(EFFDT)
                      FROM PS_GPBR_RPT_CD_TBL
                      WHERE GPBR_RPT_PROC_TYPE = V.GPBR_RPT_PROC_TYPE
                      AND GPBR_RPT_CODE = V.GPBR_RPT_CODE
                      AND EFF_STATUS = 'A'
                      AND EFFDT <= $EndDt)
End-Select
End-If
End-Procedure Get-ActionReason-Description

!**************************************
Begin-Procedure Get-Format
#debug show 'Procedure: Get-Format'
!**************************************
Begin-Select
FO.GPBR_PIN_PSLP1_NUM
FO.GPBR_PIN_PSLP2_NUM
FO.GPBR_PIN_PSLP3_NUM
FO.GPBR_PSLP1_LCODE
FO.GPBR_PSLP2_LCODE
FO.GPBR_PSLP3_LCODE
FO.GPBR_EARN_IE
FO.GPBR_DED_IE
FO.EFFDT

 let #PinErnTot     = &FO.GPBR_PIN_PSLP1_NUM
 let #PinDedTot     = &FO.GPBR_PIN_PSLP2_NUM
 let #PinNetPay     = &FO.GPBR_PIN_PSLP3_NUM
 let $TotErnCode    = rtrim(&FO.GPBR_PSLP1_LCODE, ' ')
 let $TotDedCode    = rtrim(&FO.GPBR_PSLP2_LCODE, ' ')
 let $NetPayCode    = rtrim(&FO.GPBR_PSLP3_LCODE, ' ')
 let $EarnInclude   = Rtrim(&FO.GPBR_EARN_IE, ' ')
 let $DedInclude    = Rtrim(&FO.GPBR_DED_IE, ' ')
 let $FormatEffdt   = Rtrim(&FO.EFFDT, ' ')
 let #PinNum = #PinNetPay
 Do Get-Pin-Descr
 let $PinNetDes = $PinDescr
 let $PinNetNam = $PinName
 
! Do Missing-Legal-Codes-Ern
! Do Missing-Legal-Codes-Ded
 

FROM PS_GPBR_PAYSL_FORM FO
WHERE FO.GPBR_FORMAT_ID = $FormatID
AND   FO.EFF_STATUS     = 'A'
AND   FO.EFFDT          = (SELECT MAX(FO1.EFFDT)
                          FROM PS_GPBR_PAYSL_FORM FO1
                          where FO1.GPBR_FORMAT_ID  =  FO.GPBR_FORMAT_ID
                          and   FO1.EFF_STATUS      =  FO.EFF_STATUS
                          and   FO1.EFFDT           <= $EndDt)
End-Select
End-Procedure Get-Format

!**************************************
Begin-Procedure  Get-Pin-Descr
#debug show 'Procedure: Get-Pin-Descr'
!**************************************
let $PinDescr = ''
let $PinName = ''
let $pin_code = ''

Begin-Select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  let $PinName  = Rtrim(&PD.PIN_NM, ' ')
  let $PinDescr = Rtrim(&PD.DESCR, ' ')
  MOVE &PD.PIN_CODE TO $pin_code
  let $pin_code = RTRIM($pin_code,' ')
  DO Get-Pin-Descr-Lang

FROM PS_GP_PIN PD
WHERE PD.PIN_NUM = #PinNum
End-Select
End-Procedure   Get-Pin-Descr

!***************************************
begin-procedure  Get-Pin-Descr-Lang
#debug show 'Procedure: Get-Pin-Descr-Lang'

begin-select
PDL.DESCR
  MOVE &PDL.DESCR TO $PinDescr

FROM PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #PinNum
AND   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure   Get-Pin-Descr-Lang

!***************************************
begin-procedure Get-Field-Format
let $sign = 'N'
begin-select
P.FLD_FMT

  let $sign = 'Y'

FROM PS_GP_ERN_DED ED
,PS_GP_PIN P
WHERE ED.PIN_NUM = #PinNum
AND ED.PIN_RATE_NUM = P.PIN_NUM
AND P.FLD_FMT = '3'
end-select
end-procedure   Get-Field-Format

!**************************************
Begin-Procedure Def-Arrays
#debug show 'Procedure: Def-Arrays **'
!**************************************

CREATE-ARRAY NAME = ArrayErn SIZE = 80
 FIELD = ELCode:char
 FIELD = ELCodeNum:number
 FIELD = ELCDescr:char
 FIELD = Ecode:number 
 FIELD = Eamt:number
 FIELD = Eunit:number
 FIELD = Erate:number
 FIELD = Ecalc:char
 FIELD = Euser:char
 FIELD = Euser2:char
 FIELD = ELCType:char
 FIELD = Epin1:number
 FIELD = Epin2:number
 FIELD = Epin3:number
 FIELD = Eparm1:char
 FIELD = Eparm2:char
 FIELD = Eparm3:char

CREATE-ARRAY NAME = ArrayDed SIZE = 60
 FIELD = DLCode:char
 FIELD = DLCodeNum:number
 FIELD = DLCDescr:char
 FIELD = Dcode:number
 FIELD = Damt:number
 FIELD = Dunit:number
 FIELD = Drate:number
 FIELD = Dcalc:char
 FIELD = Duser:char
 FIELD = Duser2:char
 FIELD = DLCType:char  
 FIELD = Dpin1:number
 FIELD = Dpin2:number
 FIELD = Dpin3:number
 FIELD = Dparm1:char
 FIELD = Dparm2:char
 FIELD = dparm3:char
 
End-Procedure Def-Arrays

!**************************************
Begin-Procedure Process-Element-List
#debug show 'Procedure: Process-Element-List'
#debug show '  $RunType '  $RunType
#debug show '  $TerminationDt ' $TerminationDt
!**************************************
Do Def-Arrays
let $Process-Elementlist = 'N'

If $CompRpt = 'Y'
  let $QryRevision = 'AND SEG.RSLT_REV_NUM =  (SELECT MAX(RSLT_REV_NUM)'
  Do dtu-month-end($TerminationDt_DTU, $Month_endDTU)

Else
  let $QryRevision = 'AND SEG.RSLT_REV_NUM =  (SELECT MIN(RSLT_REV_NUM)'
!  let $Month_endDTU = $JobEffdt_DTU
  Do dtu-month-end($TerminationDt_DTU, $Month_endDTU)
End-If

Do Convert-From-Dtu-Date($Month_endDTU, $Month_end)
#debug show '$Month_end ' $Month_end
#debug show '$QryRevision ' $QryRevision



Begin-Select
XC.CAL_ID
XC.RUN_TYPE
XC.GP_PAYGROUP
SEG.CAL_RUN_ID
SEG.ORIG_CAL_RUN_ID
SEG.RSLT_REV_NUM
SEG.RSLT_SEG_NUM
SEG.RSLT_VER_NUM

 let #ContDed = 0
 let $LegalCode = ' '
 let #ContErn   = 0
 Clear-array name = ArrayDed
 Clear-array name = ArrayErn

 if $foundDelta = 'N'

    let $CalID                       = Rtrim(&XC.CAL_ID, ' ')
    let $GPPaygroup                  = Rtrim(&XC.GP_PAYGROUP, ' ')
    let $calRunID                    = rtrim(&SEG.CAL_RUN_ID, ' ')
    let #RSLT_VER_NUM                = &SEG.RSLT_VER_NUM
    let #RSLT_REV_NUM                = &SEG.RSLT_REV_NUM
    let #RsltSegNum                  = &SEG.RSLT_SEG_NUM
    let $OrigCalRunID                = &SEG.ORIG_CAL_RUN_ID


    #debug show '----------------------------------'
    #debug show '[Calendar ID ($CalID):]  ' $CalID
    #debug show '[$GPPayGroup :]          ' $GPPayGroup
    #debug show '[$calRunID   :]          ' $calRunID
    #debug show '[#RsltSegNum :]          ' #RsltSegNum
    #debug show '[#RSLT_VER_NUM:]         ' #RSLT_VER_NUM
    #debug show '[#RSLT_REV_NUM:]         ' #RSLT_REV_NUM
    #debug show '[$OrigCalRunI]           ' $OrigCalRunID
 
    If &SEG.RSLT_REV_NUM > 1 And $CompRpt = 'Y'
  ! Employee with forwarding retro
       Do GetCalID_RForward 
    
       #debug show '[**#delta:]             '  #delta
    
       if #delta = 0     
         let  $CalID = ' '
       end-if
    
       #debug show '[**Delta Calendar ID ($CalID):]  ' $CalID
    End-If
 
 
    let $Process-Elementlist ='Y'

 
    Do Get-Alimony-Amt
 
    if $EarnInclude = '10'
       Do Get-Erns-Amt-Inc
    else
       DO Get-Erns-Amt-Exc
    end-if

    if $DedInclude  = '10'
       DO Get-Ded-Amt-Inc
    else
      DO Get-Ded-Amt-Exc
    end-if
 
    !Accumulator 1 :Termination
    #debug show ' #Acc_Ter ' #Acc_Ter
  
  
     If #Acc_Ter <> 0
        let #PinTotal = #Acc_Ter
        Do Get-Accum-Amt
        let #PreviousSalary = #AmtVal
     else
        let #PreviousSalary = 0
     end-if
  
     #debug show '#PreviousSalary: ' #PreviousSalary
     #debug show '  #ContErn ' #ContErn
     #debug show '  #ContDed ' #ContDed
  
  end-if

  If #ContErn > 0 or
     #ContDed > 0     
     
     If #EmployeeCount = 0
        Do Open-XML-File($FileName, #FNum, #FStat, $openXMLFile)
     end-if

     If #PinErnTot <> 0
        let #PinTotal = #PinErnTot
        Do Get-Accum-Amt
        let #AmtErnTot = #AmtVal        
     End-if
 
     If #PinDedTot <> 0
        let #PinTotal = #PinDedTot
        Do Get-Accum-Amt
        let #AmtDedTot = #AmtVal
     End-if

     If #PinNetPay <> 0
        let #PinTotal = #PinNetPay
        Do Get-Accum-Amt
        let #AmtNetTot = #AmtVal    
     end-if
          
     Do Get-Earnings-Elements  
     Do Get-Deductions-Elements 
     if $printZero = 'Y'
        Do Get-Empty-Legal-Codes  
     end-if
     
     Let #Copy = 1
     
     while #Copy <= #Copies
     
     Evaluate  $TRCTreportType
        when = '1'
        when = '2'
        !file  'GPBR_TRCT 
           
             let #count_TRCT = #count_TRCT + 1
             let #Fnum = 1
             let $FileName = 'gpbrte01.xml'
             let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
             let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
             let $xml_tag = 'EMPLOYEE_DATA'      
             Do Process-XML-Tag-Beg  
             Do Create-Employer-XML
             Do Create-Employee-XML
             Do Create-Contract-XML
             Do Create-Fields-50-116
             let $xml_tag = 'EMPLOYEE_DATA'      
             Do Process-XML-Tag-End  
     
        when = '1'  
        when = '3'
        !file  ' 'GPBR_TQRCT'
                       
             let #Fnum = 2
             let $FileName = 'gpbrte02.xml'
             let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
             let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
             
             if #yearswrkd < 1 or $CompRpt = 'Y'
               
                let #count_TQRCT = #count_TQRCT + 1
                let $xml_tag = 'EMPLOYEE_DATA' 
                Do Process-XML-Tag-Beg  
                Do Create-Employer-XML
                Do Create-Employee-XML
                Do Create-Contract-XML
                let $xml_tag = 'EMPLOYEE_DATA'      
                Do Process-XML-Tag-End 
             else
                 !show 'Employee with more than 12 months worked ' $emplID
                 show 'Empregado com mais de 12 meses trabalharam '$emplID
             end-if
        
        when = '1'  
        when = '4'
        !file  ' 'GPBR_THRCT'
             
             let #Fnum = 3
             let $FileName = 'gpbrte03.xml'
             let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
             let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
             
             if #yearswrkd >= 1
                let #count_THRCT = #count_THRCT + 1
                
                let $xml_tag = 'EMPLOYEE_DATA' 
                Do Process-XML-Tag-Beg  
                Do Create-Employer-XML
                Do Create-Employee-XML
                Do Create-Contract-XML
                let $xml_tag = 'EMPLOYEE_DATA'      
                Do Process-XML-Tag-End  
             else
                !show 'Employee with less than 12 months worked ' $emplID
                show 'Empregado com menos de 12 meses trabalharam '$emplID
             end-if
      
        end-evaluate
          
        Let #Copy = #Copy + 1
     end-while
 else
     if $foundDelta = 'N'
        show 'Empregado sim elementos:' $emplID
     end-if
 End-If

FROM  PS_GP_CALENDAR XC
     ,PS_GP_PYE_SEG_STAT SEG
WHERE SEG.EMPLID = $emplID
AND   SEG.EMPL_RCD = #emplRcd
AND   SEG.GP_PAYGROUP = $GPPayGroup
AND   SEG.GP_PAYGROUP = XC.GP_PAYGROUP
AND   XC.RUN_TYPE    = $RunType
AND   SEG.CAL_ID     = XC.CAL_ID
AND   XC.PYMT_DT     = (SELECT MAX(XC1.PYMT_DT)
                       FROM PS_GP_CALENDAR XC1
                       WHERE XC1.RUN_TYPE    = XC.RUN_TYPE
                       AND   XC1.GP_PAYGROUP = XC.GP_PAYGROUP
                       AND   XC1.CAL_ID     = XC.CAL_ID
                       AND   XC1.PYMT_DT    <= $Month_end )
AND   SEG.SEG_BGN_DT   <= $TerminationDt
AND   SEG.SEG_END_DT   >= $TerminationDt
AND   SEG.RSLT_SEG_NUM  = (SELECT MAX(RSLT_SEG_NUM)
                           FROM PS_GP_PYE_SEG_STAT
                           WHERE EMPLID          = SEG.EMPLID
                           AND   CAL_RUN_ID      = SEG.CAL_RUN_ID
                           AND   EMPL_RCD        = SEG.EMPL_RCD
                           AND   GP_PAYGROUP     = SEG.GP_PAYGROUP
                           AND   CAL_ID          = SEG.CAL_ID
                           AND   SEG_BGN_DT     <= $TerminationDt
                           AND   SEG_END_DT     >= $TerminationDt
                           AND   ORIG_CAL_RUN_ID = SEG.ORIG_CAL_RUN_ID)
AND   SEG.RSLT_VER_NUM  = (SELECT MAX(RSLT_VER_NUM)
                          FROM PS_GP_PYE_SEG_STAT
                          WHERE EMPLID    = SEG.EMPLID
                          AND EMPL_RCD    = SEG.EMPL_RCD
                          AND GP_PAYGROUP = SEG.GP_PAYGROUP
                          AND CAL_ID      = SEG.CAL_ID)
[$QryRevision]
                          FROM PS_GP_PYE_SEG_STAT
                          WHERE EMPLID     = SEG.EMPLID
                          AND EMPL_RCD     = SEG.EMPL_RCD
                          AND RSLT_VER_NUM = SEG.RSLT_VER_NUM
                          AND GP_PAYGROUP  = SEG.GP_PAYGROUP
                          AND CAL_ID       = SEG.CAL_ID)
End-Select
End-Procedure Process-Element-List

!**************************************
Begin-Procedure GetCalID_RForward
#debug show 'Procedure: GetCalID_RForward'
let #delta = 0

Begin-Select DISTINCT
GRD.FWD2_CAL_ID
GRD.DELTA_NUM
GRD.RSLT_SEG_NUM 

   #DEBUG show 'Delta   &GRD.FWD2_CAL_ID ' &GRD.FWD2_CAL_ID
   if rtrim(&GRD.FWD2_CAL_ID, ' ') <> ''
      let $CalID                     = Rtrim(&GRD.FWD2_CAL_ID, ' ')
      Let #RsltSegNum                = &GRD.RSLT_SEG_NUM 
      let #delta =  &GRD.DELTA_NUM
      Let $foundDelta = 'Y'
   end-if

FROM PS_GP_RSLT_DELTA GRD
WHERE GRD.EMPLID   = $emplID
AND GRD.EMPL_RCD   = #emplRcd
AND GRD.CAL_RUN_ID = $calRunID
AND GRD.CAL_ID     = $CalID
AND GRD.GP_PAYGROUP = $GPPayGroup
!AND GRD.RSLT_SEG_NUM = #RsltSegNum
AND GRD.RSLT_VER_NUM = #RSLT_VER_NUM
AND GRD.RSLT_REV_NUM = #RSLT_REV_NUM
AND GRD.FORWARD_IND = 'Y'
End-Select

End-Procedure GetCalID_RForward

!**************************************
Begin-Procedure Get-Empty-Legal-Codes
#debug show 'Procedure: Get-Empty-Legal-Codes'
Let $Procedure = 'Get-Empty-Legal-Codes'
!**************************************
let #AmtArray   = 0
let #UnitArray  = 0
let #UnitAdj    = 0
let #RateArray  = 0
let #PctArray   = 0 
let $LegalCode  = ' '
let $LCDescr   = ' '
let #PinArray   = 0
let $LCType     = ' '
let $UserFArray = ' '

Begin-Select DISTINCT
ELC1.GPBR_LEGAL_CODE
ELC1.DESCR100
ELC1.GPBR_CODE_TYPE
 
  let $LegalCode = ltrim(rtrim(&ELC1.GPBR_LEGAL_CODE, ' '), ' ')
  #debug show '$LegalCode '   $LegalCode 
     
  let $LCDescr    = rtrim(&ELC1.DESCR100, ' ')
  let $LCType     = rtrim(&ELC1.GPBR_CODE_TYPE, ' ')
  let $XMLField   = EDIT($LegalCode, '999.999')
  let #LegalCode  = to_number($LegalCode)
  
  if (#LegalCode > 56  and #LegalCode < 57)  or 
     (#LegalCode > 64  and #LegalCode < 65)  or
     (#LegalCode > 66  and #LegalCode < 68)  or
     (#LegalCode > 66  and #LegalCode < 69)  or
     (#LegalCode > 95  and #LegalCode < 96)  or
     (#LegalCode > 103 and #LegalCode < 104) or
     (#LegalCode > 115 and #LegalCode < 116) 
       
      Do Check-Strings3($LegalCode, $XMLField) 
      let $XMLField   = EDIT($XMLField, '999.999')
       
  end-if

  Do Get-Legal-Code-Lang     
  
  let $LCDescr    = replace($LCDescr, 'xx', '')
  let $LCDescr    = replace($LCDescr, 'yy', '')
  let $LCDescr    = replace($LCDescr, 'zz', '')
  let $LCDescr    = replace($LCDescr, 'XX', '')
  let $LCDescr    = replace($LCDescr, 'YY', '')
  let $LCDescr    = replace($LCDescr, 'ZZ', '')
  
  Do Insert-Elements-Detail
  
FROM PS_GPBR_TRCT_CODES ELC1
    ,PS_GPBR_PAYSL_F_ER E1
WHERE ELC1.EFFDT = (SELECT MAX(LE.EFFDT)
                   FROM PS_GPBR_TRCT_CODES LE
                   WHERE LE.GPBR_LEGAL_CODE  =  ELC1.GPBR_LEGAL_CODE
                   AND   LE.EFFDT           <= $EndDt)
AND ELC1.GPBR_LEGAL_CODE NOT IN (SELECT GPBR_LEGAL_CODE 
                                FROM PS_GPBR_ELEMEN_TMP
                                WHERE OPRID =$Prcs_OprID
                                AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
                                AND PROCESS_INSTANCE= #prcs_process_instance
                                AND EMPLID = $emplid
                                AND CAL_RUN_ID = $calRunID
                                AND ORIG_CAL_RUN_ID = $OrigCalRunID
                                AND CAL_ID = $CalID
                                AND RSLT_SEG_NUM =#RsltSegNum
                                AND EMPL_RCD = #emplRcd)
AND E1.GPBR_FORMAT_ID = $FormatID
AND E1.EFFDT          = $FormatEffdt
AND E1.EFF_STATUS     = 'A'
AND E1.GPBR_LEGAL_CODE = ELC1.GPBR_LEGAL_CODE                    
End-Select


Begin-Select DISTINCT
ELC2.GPBR_LEGAL_CODE
ELC2.DESCR100
ELC2.GPBR_CODE_TYPE
 
  let $LegalCode = &ELC2.GPBR_LEGAL_CODE
  #debug show '$LegalCode '   $LegalCode 
     
  let $LCDescr    = rtrim(&ELC2.DESCR100, ' ')  
  let $LCType     = rtrim(&ELC2.GPBR_CODE_TYPE, ' ')
  let $XMLField   = EDIT($LegalCode, '999.999')

  Do Get-Legal-Code-Lang 
  
  let $LCDescr    = replace($LCDescr, 'xx', '')
  let $LCDescr    = replace($LCDescr, 'yy', '')
  let $LCDescr    = replace($LCDescr, 'zz', '')
  let $LCDescr    = replace($LCDescr, 'XX', '')
  let $LCDescr    = replace($LCDescr, 'YY', '')
  let $LCDescr    = replace($LCDescr, 'ZZ', '')
    
  Do Insert-Elements-Detail   
  
FROM PS_GPBR_TRCT_CODES ELC2
    ,PS_GPBR_PAYSL_F_DE E2
WHERE ELC2.EFFDT = (SELECT MAX(LE.EFFDT)
                   FROM PS_GPBR_TRCT_CODES LE
                   WHERE LE.GPBR_LEGAL_CODE  =  ELC2.GPBR_LEGAL_CODE
                   AND   LE.EFFDT           <= $EndDt)
AND ELC2.GPBR_LEGAL_CODE NOT IN (SELECT GPBR_LEGAL_CODE 
                                FROM PS_GPBR_ELEMEN_TMP
                                WHERE OPRID =$Prcs_OprID
                                AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
                                AND PROCESS_INSTANCE= #prcs_process_instance
                                AND EMPLID = $emplid
                                AND CAL_RUN_ID = $calRunID
                                AND ORIG_CAL_RUN_ID = $OrigCalRunID
                                AND CAL_ID = $CalID
                                AND RSLT_SEG_NUM =#RsltSegNum
                                AND EMPL_RCD = #emplRcd)
AND E2.GPBR_FORMAT_ID = $FormatID
AND E2.EFFDT          = $FormatEffdt
AND E2.EFF_STATUS     = 'A'
AND E2.GPBR_LEGAL_CODE = ELC2.GPBR_LEGAL_CODE                    
End-Select

#debug show 'End Get-Empty-Legal-Codes'
End-Procedure Get-Empty-Legal-Codes

!**************************************
Begin-Procedure Get-Max-Legal-Code
#debug show 'Procedure: Get-Max-Legal-Code'
!**************************************
Let #MaxLC66 = 66 
Let #MaxLC67 = 67 
Let #MaxLC64 = 64 
Let #MaxLC95 = 95
Let #MaxLC115 = 115

Begin-Select
ELCM.GPBR_LEGAL_CODE

  let #LC = to_number(&ELCM.GPBR_LEGAL_CODE)
  
  if #LC >= 66 AND #LC < 67
      IF #LC > #MaxLC66
          let #MaxLC66 = #LC
      end-if
  end-if
  
  if #LC >= 64 AND #LC < 65
    IF #LC > #MaxLC64
      let #MaxLC64 = #LC
    end-if
  end-if
  
  if #LC >= 95 AND #LC < 96
      IF #LC > #MaxLC95
        let #MaxLC95 = #LC
      end-if
  end-if
  
  if #LC >= 115 AND #LC < 116
        IF #LC > #MaxLC115
          let #MaxLC115 = #LC
        end-if
  end-if
  
  if #LC >= 67 AND #LC < 68
     IF #LC > #MaxLC67
        let #MaxLC67 = #LC
     end-if
  end-if
  
FROM PS_GPBR_TRCT_CODES ELCM
WHERE ELCM.EFFDT = (SELECT MAX(LE.EFFDT)
                   FROM PS_GPBR_TRCT_CODES LE
                   WHERE LE.GPBR_LEGAL_CODE  =  ELCM.GPBR_LEGAL_CODE
                   AND   LE.EFFDT           <= $EndDt)
AND ELCM.GPBR_CODE_TYPE = '1'
ORDER BY ELCM.GPBR_LEGAL_CODE                 
End-Select

#debug show '[#MaxLC66]                ' #MaxLC66 

#debug show '*End Get-Max-Legal-Code'
End-Procedure Get-Max-Legal-Code


!**************************************
Begin-Procedure Get-Erns-Amt-Inc
#debug show 'Procedure: Get-Erns-Amt-Inc'
#debug show '  $FormatID    ' $FormatID
#debug show '  $FormatEffdt ' $FormatEffdt
#debug show '  $GPPayGroup  ' $GPPayGroup
#DEBUG show '  $CalID       ' $CalID
#debug show '  #RsltSegNum  ' #RsltSegNum
!**************************************
let $calcRule  = ' '
let #PinNum    = 0
let $Search    = 'Y'

Begin-Select
VBB.GPBR_LEGAL_CODE
LG1.DESCR100
LG1.GPBR_CODE_TYPE
LG1.GPBR_PIN_VAR_NUM
LG1.GPBR_PAR1_TYPE
LG1.GPBR_PIN_VA2_NUM
LG1.GPBR_PAR2_TYPE
LG1.GPBR_PIN_VA3_NUM
LG1.GPBR_PAR3_TYPE
V1.PIN_NM
V1.PIN_NUM
!V1.CALC_RULE
V1.USER_FLD1
V1.USER_FLD2
SUM(V1.CALC_RSLT_VAL) &V1.CALC_RSLT_VAL
SUM(V1.CALC_ADJ_VAL)  &V1.CALC_ADJ_VAL
SUM(V1.UNIT_RSLT_VAL) &V1.UNIT_RSLT_VAL
SUM(V1.UNIT_ADJ_VAL)  &V1.UNIT_ADJ_VAL
SUM(V1.BASE_RSLT_VAL)  &V1.BASE_RSLT_VAL

  let #PinNum    = &V1.PIN_NUM
  let $LegalCode = rtrim(ltrim(&VBB.GPBR_LEGAL_CODE, ' '), ' ')
  Let #PinParm1  = &LG1.GPBR_PIN_VAR_NUM
  Let #PinParm2  = &LG1.GPBR_PIN_VA2_NUM
  Let #PinParm3  = &LG1.GPBR_PIN_VA3_NUM
  Let $PinType1  = &LG1.GPBR_PAR1_TYPE
  Let $PinType2  = &LG1.GPBR_PAR2_TYPE
  Let $PinType3  = &LG1.GPBR_PAR3_TYPE
  Let $ParmNumb  = ' '

  if $LegalCode   <> ''
   
     let $UserF  = ' '
     let $UserF2 = ' '   
     let #RateVal= 0 
     let #LegalCode  = to_number($LegalCode)
     let $LCDescr    = rtrim(&LG1.DESCR100, ' ')
     let $LCType     = rtrim(&LG1.GPBR_CODE_TYPE, ' ')
     
     if  rtrim(&V1.USER_FLD1,  ' ')  <> ''
         let $UserF = rtrim(&V1.USER_FLD1,  ' ')
     end-if
     
     if  rtrim(&V1.USER_FLD2,  ' ')  <> ''
         let $UserF2 = rtrim(&V1.USER_FLD2,  ' ')
     end-if
     
     let #AmtVal     = &V1.CALC_RSLT_VAL + &V1.CALC_ADJ_VAL 

     Do Get-Legal-Code-Lang    
    
     let #UnitVal    = &V1.UNIT_RSLT_VAL + &V1.UNIT_ADJ_VAL 
     
     #debug show '  $LegalCode ' $LegalCode ' ' $LCDescr 
     #debug show '  $LCType    ' $LCType
     #debug show '  $UserF      ' $UserF
     #debug show '  #AmtVal    ' #AmtVal
     #debug show '  #UnitVal   ' #UnitVal
     #debug show '  $LCType    ' $LCType
 
     if #AmtVal <> 0             
     
        if $LCType = '2'            
           let  #AmtVal =  #AmtVal * (-1)
           let  #RateVal = #UnitVal
           let  #UnitVal = #UnitVal * (-1)
           
           Do Search-Ded-from-Array
 
           
           If $FoundElement = 'N'
              Do Add-Ded-To-Array  
           end-if
           
        else  
           Do Search-Ern-from-Array           
           
           If $FoundElement = 'N'
              Do Add-Ern-To-Array  
           end-if
        end-if        
     end-if
  end-if
   
FROM PS_GP_RSLT_ED_VW V1,
     PS_GPBR_PAYSL_F_ER VBB,
     PS_GPBR_TRCT_CODES LG1
WHERE VBB.GPBR_FORMAT_ID = $FormatID
AND   VBB.EFFDT          = $FormatEffdt
AND   VBB.EFF_STATUS     = 'A'
AND   VBB.PIN_ERN_NUM    = V1.PIN_NUM
AND   V1.PIN_TYPE        = 'ER'
AND   V1.EMPLID          = $Emplid
AND   V1.EMPL_RCD        = #emplRcd
AND   V1.GP_PAYGROUP     = $GPPayGroup
AND   V1.CAL_ID          = $CalID
AND   V1.CAL_RUN_ID      = $calRunID
AND   V1.RSLT_SEG_NUM    = #RsltSegNum
AND   VBB.GPBR_LEGAL_CODE <> ' ' 
AND   VBB.GPBR_LEGAL_CODE = LG1.GPBR_LEGAL_CODE
AND   LG1.EFFDT          = (SELECT MAX(LE.EFFDT)
                          FROM PS_GPBR_TRCT_CODES LE
                          where LE.GPBR_LEGAL_CODE  =  LG1.GPBR_LEGAL_CODE
                          and   LE.EFFDT           <= $EndDt)
GROUP BY VBB.GPBR_LEGAL_CODE, LG1.DESCR100 ,LG1.GPBR_CODE_TYPE, LG1.GPBR_PIN_VAR_NUM,LG1.GPBR_PAR1_TYPE
,LG1.GPBR_PIN_VA2_NUM,LG1.GPBR_PAR2_TYPE, LG1.GPBR_PIN_VA3_NUM,LG1.GPBR_PAR3_TYPE
,V1.PIN_NM, V1.PIN_NUM, V1.USER_FLD1, V1.USER_FLD2
ORDER BY VBB.GPBR_LEGAL_CODE, LG1.DESCR100 ,LG1.GPBR_CODE_TYPE, V1.PIN_NM, V1.PIN_NUM, V1.USER_FLD1, V1.USER_FLD2
End-Select
#debug show 'End Get-Erns-Amt-Inc'

End-Procedure Get-Erns-Amt-Inc

!**************************************
Begin-Procedure Get-Erns-Amt-Exc
#debug show 'Procedure: Get-Erns-Amt-Exc **'
#debug show '  $FormatID ' $FormatID
#debug show '  $FormatEffdt ' $FormatEffdt
#debug show '  $GPPayGroup ' $GPPayGroup
#debug show '  $CalID ' $CalID
#debug show '  #RsltSegNum ' #RsltSegNum
!**************************************
let $LegalCode    = ' '
let $LCType       = ' '

Begin-Select
V2.PIN_NM
V2.PIN_NUM
!V2.CALC_RULE
V2.USER_FLD1
V2.USER_FLD2
SUM(V2.CALC_RSLT_VAL) &V2.CALC_RSLT_VAL
SUM(V2.CALC_ADJ_VAL)  &V2.CALC_ADJ_VAL
SUM(V2.UNIT_ADJ_VAL)  &V2.UNIT_ADJ_VAL
SUM(V2.UNIT_RSLT_VAL) &V2.UNIT_RSLT_VAL
SUM(V2.BASE_RSLT_VAL)  &V2.BASE_RSLT_VAL

 let $UserF = ' '
 let #PinNum      = &V2.PIN_NUM
 let $LegalCode   = ' '
! let $calcRule    = &V2.CALC_RULE
      if  rtrim(&V2.USER_FLD1,  ' ')  <> ''
          let $UserF = rtrim(&V2.USER_FLD1,  ' ')
     end-if
 let #AmtVal      = &V2.CALC_RSLT_VAL
 let #AmtAdj      = &V2.CALC_ADJ_VAL
 let #AmtVal      = #AmtVal + #AmtAdj
 let #UnitAdj    = &V2.UNIT_ADJ_VAL
 let #UnitVal    = #UnitVal + #UnitAdj

 if #AmtVal <> 0
    if $LCType = '2'            
        let  #AmtVal =  #AmtVal * (-1)
        let  #RateVal = #UnitVal
        let  #UnitVal = #UnitVal * (-1)
           
        Do Search-Ded-from-Array
           
        If $FoundElement = 'N'
           Do Add-Ded-To-Array  
        end-if
           
    else   
           Do Search-Ern-from-Array           
           
           If $FoundElement = 'N'
              Do Add-Ern-To-Array  
           end-if
        end-if         
 end-if
 
FROM PS_GP_RSLT_ED_VW V2
WHERE V2.PIN_TYPE = 'ER'
AND   V2.PIN_NUM NOT IN (SELECT BB11.PIN_ERN_NUM
                         FROM PS_GPBR_PAYSL_F_ER BB11
                         WHERE BB11.GPBR_FORMAT_ID = $FormatId
                           AND BB11.EFFDT          = $FormatEffdt
                           AND BB11.EFF_STATUS     = 'A'
                           AND V2.PIN_NUM = V2.PIN_NUM)
AND V2.EMPLID       = $Emplid
AND V2.EMPL_RCD     = #emplRcd
AND V2.GP_PAYGROUP  = $GPPayGroup
AND V2.CAL_ID       = $CalId
AND V2.CAL_RUN_ID   = $calRunID
AND V2.RSLT_SEG_NUM = #RsltSegNum
GROUP BY V2.PIN_NM, V2.PIN_NUM, V2.USER_FLD1, V2.USER_FLD2
ORDER BY V2.PIN_NM, V2.PIN_NUM, V2.USER_FLD1, V2.USER_FLD2
End-Select
End-Procedure Get-Erns-Amt-Exc

!**************************************
Begin-Procedure Get-Ded-Amt-Inc
#debug show 'Procedure: Get-Ded-Amt-Inc **'
#debug show '  $FormatID ' $FormatID
#debug show '  $FormatEffdt ' $FormatEffdt
#debug show '  $GPPayGroup ' $GPPayGroup
#debug show '  $CalID ' $CalID
#debug show '  #RsltSegNum ' #RsltSegNum
!**************************************
Begin-Select
VDD.GPBR_LEGAL_CODE
LG2.DESCR100
LG2.GPBR_CODE_TYPE
LG2.GPBR_PIN_VAR_NUM
LG2.GPBR_PAR1_TYPE
LG2.GPBR_PIN_VA2_NUM
LG2.GPBR_PAR2_TYPE
LG2.GPBR_PIN_VA3_NUM
LG2.GPBR_PAR3_TYPE
V3.PIN_NM
V3.PIN_NUM
V3.USER_FLD1
V3.USER_FLD2
SUM(V3.CALC_RSLT_VAL) &V3.CALC_RSLT_VAL
SUM(V3.CALC_ADJ_VAL)  &V3.CALC_ADJ_VAL
SUM(V3.UNIT_RSLT_VAL) &V3.UNIT_RSLT_VAL
SUM(V3.UNIT_ADJ_VAL)  &V3.UNIT_ADJ_VAL
SUM(V3.BASE_RSLT_VAL)  &V3.BASE_RSLT_VAL
  
  let $UserF = ' '
  let #PinNum      = &V3.PIN_NUM
  let $LegalCode   = &VDD.GPBR_LEGAL_CODE
  let $LCDescr     = rtrim(&LG2.DESCR100, ' ')
  let $LCType      = rtrim(&LG2.GPBR_CODE_TYPE, ' ')
  let #LegalCode  = to_number($LegalCode)
 
       if  rtrim(&V3.USER_FLD1,  ' ')  <> ''
           let $UserF = rtrim(&V3.USER_FLD1,  ' ')
     end-if
  Let #PinParm1    = &LG2.GPBR_PIN_VAR_NUM
  Let #PinParm2    = &LG2.GPBR_PIN_VA2_NUM
  Let #PinParm3    = &LG2.GPBR_PIN_VA3_NUM
  Let $PinType1    = &LG2.GPBR_PAR1_TYPE
  Let $PinType2    = &LG2.GPBR_PAR2_TYPE
  Let $PinType3    = &LG2.GPBR_PAR3_TYPE
  Let $ParmNumb    = ' '     


  let #AmtVal     = &V3.CALC_RSLT_VAL
  let #AmtAdj     = &V3.CALC_ADJ_VAL
  let #AmtVal     = #AmtVal + #AmtAdj
  let #UnitVal    = &V3.UNIT_RSLT_VAL

     let #UnitAdj    = &V3.UNIT_ADJ_VAL
     let #UnitVal    = #UnitVal   + #UnitAdj

   if #AmtVal <> 0
    
    Do Get-Legal-Code-Lang    
    if $LCType = '1'            
       let  #AmtVal =  #AmtVal * (-1)
       let  #UnitVal = #UnitVal
       let  #UnitVal = #UnitVal * (-1)
               
       Do Search-Ern-from-Array           
               
       If $FoundElement = 'N'
          Do Add-Ern-To-Array  
       end-if      
    else    
       Do Search-Ded-from-Array 
         
       If $FoundElement = 'N'
          Do Add-Ded-To-Array  
       end-if
    end-if
 end-if


FROM PS_GP_RSLT_ED_VW V3,
     PS_GPBR_PAYSL_F_DE VDD,
     PS_GPBR_TRCT_CODES LG2
WHERE VDD.GPBR_FORMAT_ID = $FormatID
AND   VDD.EFFDT          = $FormatEffdt
AND   VDD.EFF_STATUS     = 'A'
AND   VDD.PIN_DED_NUM    = V3.PIN_NUM
AND   V3.PIN_TYPE        = 'DD'
AND   V3.EMPLID          = $Emplid
AND   V3.EMPL_RCD        = #emplRcd
AND   V3.GP_PAYGROUP     = $GPPayGroup
AND   V3.CAL_ID          = $CalId
AND   V3.CAL_RUN_ID      = $calRunID
AND   V3.RSLT_SEG_NUM    = #RsltSegNum
AND   VDD.GPBR_LEGAL_CODE <> ' ' 
AND   VDD.GPBR_LEGAL_CODE = LG2.GPBR_LEGAL_CODE
AND   LG2.EFFDT          = (SELECT MAX(LE.EFFDT)
                          FROM PS_GPBR_TRCT_CODES LE
                          where LE.GPBR_LEGAL_CODE  =  LG2.GPBR_LEGAL_CODE
                          and   LE.EFFDT           <= $EndDt)
GROUP BY VDD.GPBR_LEGAL_CODE, LG2.DESCR100 ,LG2.GPBR_CODE_TYPE, V3.PIN_NM, V3.PIN_NUM, V3.USER_FLD1, V3.USER_FLD2
,LG2.GPBR_PIN_VAR_NUM
,LG2.GPBR_PAR1_TYPE
,LG2.GPBR_PIN_VA2_NUM
,LG2.GPBR_PAR2_TYPE
,LG2.GPBR_PIN_VA3_NUM
,LG2.GPBR_PAR3_TYPE
ORDER BY VDD.GPBR_LEGAL_CODE, LG2.DESCR100 ,LG2.GPBR_CODE_TYPE, V3.PIN_NM, V3.PIN_NUM, V3.USER_FLD1, V3.USER_FLD2
End-Select

#debug show '  #ContDed ' #ContDed
#debug show 'End Get-Ded-Amt-Inc'
End-Procedure Get-Ded-Amt-Inc

!**************************************
Begin-Procedure Get-Ded-Amt-Exc
#debug show 'Procedure: Get-Ded-Amt-Exc **'
#debug show '  $FormatID ' $FormatID
#debug show '  $FormatEffdt ' $FormatEffdt
#debug show '  $GPPayGroup ' $GPPayGroup
#debug show '  $CalID ' $CalID
#debug show '  #RsltSegNum ' #RsltSegNum
!**************************************
let $LegalCode = ' '

Begin-Select
V4.PIN_NM
V4.PIN_NUM
!V4.CALC_RULE
V4.USER_FLD1
V4.USER_FLD2
!SUM(V4.USER_FLD1) &V4.USER_FLD1
SUM(V4.CALC_RSLT_VAL) &V4.CALC_RSLT_VAL
SUM(V4.CALC_ADJ_VAL)  &V4.CALC_ADJ_VAL
SUM(V4.UNIT_RSLT_VAL) &V4.UNIT_RSLT_VAL
SUM(V4.UNIT_ADJ_VAL)  &V4.UNIT_ADJ_VAL
SUM(V4.BASE_RSLT_VAL)  &V4.BASE_RSLT_VAL

  let #PinNum      = &V4.PIN_NUM
  let $LegalCode    = ' '

  if rtrim(&V4.USER_FLD1,  ' ')  <> ''
     let $UserF = rtrim(&V4.USER_FLD1,  ' ')
  end-if

  let #AmtVal      = &V4.CALC_RSLT_VAL
  let #AmtAdj      = &V4.CALC_ADJ_VAL
  let #AmtVal      = #AmtVal  + #AmtAdj

  let $UserF  = ' '
  let $UserF2 = ' '
  let #UnitVal    = &V4.UNIT_RSLT_VAL
  let #UnitAdj     = &V4.UNIT_ADJ_VAL
  let #UnitVal     = #UnitVal    + #UnitAdj
 
 if #AmtVal <> 0
    if $LCType = '1'            
       let  #AmtVal =  #AmtVal * (-1)
       let  #UnitVal = #UnitVal * (-1)
               
       Do Search-Ern-from-Array           
               
       If $FoundElement = 'N'
          Do Add-Ern-To-Array  
       end-if      
    else    
       Do Search-Ded-from-Array 
         
       If $FoundElement = 'N'
          Do Add-Ded-To-Array  
       end-if
    end-if
 end-if

FROM PS_GP_RSLT_ED_VW V4
where V4.PIN_TYPE = 'DD'
and   V4.PIN_NUM   NOT IN (SELECT CC1.PIN_DED_NUM FROM PS_GPBR_PAYSL_F_DE CC1
                          where CC1.GPBR_FORMAT_ID = $FormatID
                          and   CC1.EFFDT          = $FormatEffdt
                          and   CC1.EFF_STATUS     = 'A'
                          and   V4.PIN_NUM = V4.PIN_NUM)
and   V4.EMPLID        = $Emplid
and   V4.EMPL_RCD      = #emplRcd
and   V4.GP_PAYGROUP   = $GPPayGroup
AND   V4.CAL_ID        = $CalID
AND   V4.CAL_RUN_ID    = $calRunID
and   V4.RSLT_SEG_NUM  = #RsltSegNum
GROUP by V4.PIN_NM, V4.PIN_NUM, V4.USER_FLD1, V4.USER_FLD2
order by V4.PIN_NM, V4.PIN_NUM, V4.USER_FLD1, V4.USER_FLD2
End-Select
End-Procedure Get-Ded-Amt-Exc

!**************************************
Begin-Procedure Get-Accum-Amt
#debug show '** Get-Accum-Amt **'
!**************************************
let #AmtVal = 0
Begin-Select
V5.PIN_NM
V5.PIN_NUM
SUM(V5.CALC_RSLT_VAL) &V5.CALC_RSLT_VAL

 let #AmtVal = &V5.CALC_RSLT_VAL

FROM PS_GP_RSLT_ACUM_VW V5
WHERE V5.PIN_NUM          = #PinTotal
and   V5.EMPLID           = $Emplid
and   V5.EMPL_RCD         = #emplRcd
and   V5.GP_PAYGROUP      = $GPPayGroup
and   V5.CAL_ID           = $CalID
AND   V5.CAL_RUN_ID       = $calRunID
and   V5.RSLT_SEG_NUM     = #RsltSegNum
GROUP by V5.PIN_NM, V5.PIN_NUM
order by V5.PIN_NM, V5.PIN_NUM
End-Select
End-Procedure Get-Accum-Amt

!**************************************
Begin-Procedure Get-Alimony-Amt
#debug show 'Procedure: Get-Alimony-Amt'
!**************************************
 
let #AlimonyAmt    = 0

let #AlimonyPinNum = #Alimony

Do Get-Alimony-DD

If #AlimonyAmt = 0
   Do Get-Alimony-Ovr
   
   if #AlimonyAmt = 0
      Do Get-Alimony-Var
   end-if
end-if

#debug show '  #AlimonyAmt: ' #AlimonyAmt

let #AlimonyTRCTAmt = #AlimonyAmt
let #AlimonyAmt    = 0

let #AlimonyPinNum = #AlimonyFGTSPin
Do Get-Alimony-DD

If #AlimonyAmt = 0
   Do Get-Alimony-Ovr
   
   if #AlimonyAmt = 0
      Do Get-Alimony-Var
   end-if
end-if

#debug  show '  #AlimonyAmt: ' #AlimonyAmt

let #AlimonyFGTSAmt = #AlimonyAmt
 
End-Procedure Get-Alimony-Amt


!**************************************
Begin-Procedure Get-Alimony-Ovr
#debug show 'Procedure: Get-Alimony-Ovr'
!**************************************
Begin-Select
SO.SOVR_VAL_NUM

 let #AlimonyAmt = &SO.SOVR_VAL_NUM

FROM PS_GP_PYE_SOVR SO
WHERE SO.EMPLID = $Emplid
AND SO.EMPL_RCD = #emplRcd
AND SO.PIN_NUM  = #AlimonyPinNum
AND SO.BGN_DT  <= (SELECT MAX(SO1.BGN_DT)
                  FROM PS_GP_PYE_SOVR SO1
                  WHERE SO1.EMPLID   = SO.EMPLID
                  AND   SO1.EMPL_RCD = SO.EMPL_RCD
                  AND   SO1.BGN_DT   <= $TerminationDt)
AND (SO.END_DT >= (SELECT MAX(SO2.END_DT)
                  FROM PS_GP_PYE_SOVR SO2
                  WHERE SO2.EMPLID   = SO.EMPLID
                  AND   SO2.EMPL_RCD = SO.EMPL_RCD
                  AND   SO2.END_DT   >= $TerminationDt)
OR   SO.END_DT IS NULL)
End-Select

#debug  show '  #AlimonyAmt: ' #AlimonyAmt
#debug  show 'End Get-Alimony-Ovr '

End-Procedure Get-Alimony-Ovr

!**************************************
Begin-Procedure Get-Alimony-Var
#debug show 'Procedure: Get-Alimony-Var **'
!**************************************
Begin-Select
VA.DECIMAL_VALUE

  let #AlimonyAmt = &VA.DECIMAL_VALUE

FROM PS_GP_VARIABLE VA
WHERE VA.PIN_NUM = #AlimonyPinNum
  AND VA.EFFDT  <= (SELECT MAX(VA1.EFFDT)
                   FROM PS_GP_VARIABLE VA1
                   WHERE VA1.PIN_NUM = VA.PIN_NUM
                   AND  VA1.EFFDT  <= $TerminationDt)
End-Select
#debug  show '  #AlimonyAmt: ' #AlimonyAmt
#debug  show 'End Get-Alimony-Var ' 

End-Procedure Get-Alimony-Var

!**************************************
Begin-Procedure Get-Alimony-DD
#debug show 'Procedure: Get-Alimony-DD **'
!**************************************
Begin-Select
AL.PCT_RSLT_VAL

   let #AlimonyAmt = &AL.PCT_RSLT_VAL

FROM PS_GP_RSLT_ED_VW AL
WHERE AL.PIN_TYPE     = 'DD'
AND   AL.PIN_NUM      = #AlimonyPinNum
AND   AL.EMPLID       = $Emplid
AND   AL.EMPL_RCD     = #emplRcd
AND   AL.GP_PAYGROUP  = $GPPayGroup
AND   AL.CAL_ID       = $CalId
AND   AL.CAL_RUN_ID   = $calRunID
AND   AL.RSLT_SEG_NUM = #RsltSegNum
End-Select

#debug show '  #AlimonyAmt: '  #AlimonyAmt
#debug show 'End Get-Alimony-DD'  

End-Procedure Get-Alimony-DD

!**************************************
Begin-Procedure Get-Pin-Parameter-Value
#debug show 'Procedure: Get-Pin-Parameter-Value **'
#debug show ' #PinParmNum: ' #PinParmNum
#debug show ' $GPPayGroup: ' $GPPayGroup
#debug show ' $CalId:      ' $CalId
#debug show ' $calRunID:   ' $calRunID
#debug show ' #RsltSegNum: ' #RsltSegNum
#debug show ' #PinNum:     ' #PinNum
#debug show ' $terminationDt : ' $terminationDt
#debug SHOW ' $PinParmType: ' $PinParmType
!**************************************  
let $variable  = ''
let $variable2 = ''
Let $variableLbl = ''

Begin-Select
SOV.SOVR_VAL_CHAR

   Let $variableLbl = rtrim(&SOV.SOVR_VAL_CHAR, ' ')   

FROM PS_GP_ELM_DFN_SOVR SOV
WHERE SOV.PIN_NUM      = #PinArray
AND SOV.PIN_SOVR_NUM   = #PinParmNum
AND SOV.BGN_DT = (SELECT MAX(S1.BGN_DT) FROM PS_GP_ELM_DFN_SOVR S1
                   WHERE S1.PIN_NUM = SOV.PIN_NUM
                   AND S1.PIN_SOVR_NUM  = SOV.PIN_SOVR_NUM 
                   AND S1.BGN_DT <= $TerminationDt)
End-Select


Begin-Select
PR1.CALC_RSLT_VAL
PR1.UNIT_RSLT_VAL
PR1.BASE_RSLT_VAL
PR1.PCT_RSLT_VAL
PR1.RATE_RSLT_VAL
PR1.USER_FLD1
PR1.USER_FLD2

   #debug SHOW '&PR1.UNIT_RSLT_VAL ' &PR1.UNIT_RSLT_VAL
   #debug SHOW '$PinParmType : ' $PinParmType
   
   Let $variable2 = ' '

   If  $PinParmType = '10' or  $PinParmType = '20'
       if &PR1.UNIT_RSLT_VAL <> 0
          Let $variable = edit(&PR1.UNIT_RSLT_VAL , 'b999.99')   
          Let $variable2 = edit(&PR1.UNIT_RSLT_VAL , 'b999')    
       end-if
   end-if
      
   If  $PinParmType = '30'
       if rtrim(&PR1.USER_FLD2, ' ') <> ''
          Let $variable = ltrim(rtrim(&PR1.USER_FLD2, ' '), ' ')
       end-if
   end-if
 
   If  $PinParmType = '40'
       if &PR1.CALC_RSLT_VAL <> 0
         Let $variable = edit(&PR1.CALC_RSLT_VAL , 'b999.99')
         Let $variable2 = edit(&PR1.CALC_RSLT_VAL , 'b999') 
       end-if
   end-if
     
   If  $PinParmType = '50'
       if &PR1.PCT_RSLT_VAL <> 0
          Let $variable = edit(&PR1.PCT_RSLT_VAL, 'b999.99') 
       end-if
   end-if
   
   If  $PinParmType = '60'
       if rtrim(&PR1.USER_FLD1, ' ') <> ''
          Let $variable = &PR1.USER_FLD1
       end-if
   end-if 
         
   let $variable = rtrim(ltrim($variable, ' '), ' ')
   
   If  $PinParmType = '40' or 
       $PinParmType = '10' or
       $PinParmType = '20'
       if to_number($variable) = to_number($variable2) 
          let $variable = rtrim(ltrim($variable2, ' '), ' ')
       end-if
   end-if


FROM PS_GP_RSLT_ED_VW PR1
WHERE PR1.PIN_NUM      = #PinParmNum
AND   PR1.EMPLID       = $Emplid
AND   PR1.EMPL_RCD     = #emplRcd
AND   PR1.GP_PAYGROUP  = $GPPayGroup
AND   PR1.CAL_ID       = $CalId
AND   PR1.CAL_RUN_ID   = $calRunID
AND   PR1.RSLT_SEG_NUM = #RsltSegNum
ORDER BY PR1.USER_FLD1, PR1.USER_FLD2
End-Select
   
   Do Evaluate-Legal-Code 

End-Procedure Get-Pin-Parameter-Value


!**************************************
Begin-Procedure Get-Earnings-Elements
#debug show 'Procedure: Get-Earnings-Elements **'
!**************************************
   
  let #Item = 1


  While #Item <= #ContErn

    get $LegalCode $LCDescr #PinArray #AmtArray #UnitArray #RateArray $calcRule $LCType $UserFArray -
    $UserFArray2 #PinParm1 #PinParm2 #PinParm3 $PinType1 $PinType2  $PinType3 #LegalCode  from ArrayErn(#Item) - 
    ELCode ELCDescr Ecode Eamt Eunit Erate Ecalc ELCType Euser  Euser2 Epin1 Epin2 Epin3 Eparm1 Eparm2 Eparm3 ELCodeNum
     
    
    #debug show 'Proventos - $LegalCode: '  $LegalCode
    #debug show '            #UnitArray: ' #UnitArray 
    
    let $XMLField = EDIT($LegalCode, '999.999')
    
    if (#LegalCode > 56  and #LegalCode < 57) or 
       (#LegalCode > 64  and #LegalCode < 65) or
       (#LegalCode > 66  and #LegalCode < 68) or
       (#LegalCode > 95  and #LegalCode < 96) or
       (#LegalCode > 115 and #LegalCode < 116) 
       
       Do Check-Strings3($LegalCode, $XMLField) 
       let $XMLField   = EDIT($XMLField, '999.999')
       
    end-if 
    
    Do Evaluate-Parameters
    Do Insert-Elements-Detail
   
    let #Item = #Item + 1
    
  End-while

End-Procedure Get-Earnings-Elements

!**************************************
Begin-Procedure Get-Deductions-Elements
#debug show 'Procedure: Get-Deductions-Elements **'
!**************************************
   
  let #Item = 1

  While #Item <= #ContDed

    get $LegalCode $LCDescr #PinArray #AmtArray #UnitArray #RateArray $calcRule $LCType $UserFArray -
    $UserFArray2 #PinParm1 #PinParm2 #PinParm3 $PinType1 $PinType2  $PinType3 #LegalCode from ArrayDed(#Item) - 
    DLCode DLCDescr Dcode Damt Dunit Drate Dcalc DLCType Duser Duser2 Dpin1 Dpin2 Dpin3 Dparm1 Dparm2 dparm3 DLCodeNum
    
    let $XMLField = EDIT($LegalCode, '999.999')
    
    if (#LegalCode > 56  and #LegalCode < 57) or 
       (#LegalCode > 64  and #LegalCode < 65) or
       (#LegalCode > 66  and #LegalCode < 68) or
       (#LegalCode > 95  and #LegalCode < 96) or
       (#LegalCode > 115 and #LegalCode < 116) 
       
       Do Check-Strings3($LegalCode, $XMLField)   
       let $XMLField   = EDIT($XMLField, '999.999')
           
    end-if
           
    Do Evaluate-Parameters
    Do Insert-Elements-Detail
    
   
    let #Item = #Item + 1
    
  End-while
    
End-Procedure Get-Deductions-Elements

!**************************************
Begin-Procedure Evaluate-Legal-Code 
#debug show 'Procedure: Evaluate-Legal-Code **'
#debug show '           $LegalCode: ' $LegalCode
#debug show '           #LegalCode: ' #LegalCode
#debug show '           $LCDescr:   ' $LCDescr  
#debug show '           $variable 3   ' $variable
#debug show '           $ParmNumb:    ' $ParmNumb
!**************************************


 if  #LegalCode = 50
     #debug show 'evaluate 50 - Label'  $variableLbl ' ' $variable
  
     if $ParmNumb  = '1'     
        if $variable  = ''
           let $variable  = edit(#UnitArray, '999.99')
           let $variable2 = edit(#UnitArray, '999')
           if to_number($variable) = to_number($variable2) 
              let $variable = rtrim(ltrim($variable2, ' '), ' ')
           end-if
        end-if
      
        if rtrim($variableLbl, ' ') <> ''
           Let $variable = ltrim(rtrim(($variable || '/' || $variableLbl), '/'), '/')
        end-if
      
        if $variable  <> ' '       
           Do Check-Strings2( $LCDescr , $StringOut)
       
           If $StringOut = 'xx'
              let $LCDescr = replace($LCDescr, 'xx',  $variable)
              let $LCDescr = replace($LCDescr, 'XX',  $variable)
           else
              let $LCDescr = $LCDescr || ' ' || $variable
           end-if
        end-if
     end-if     
   
     if $ParmNumb  = '2'
     
     #debug show '50 $variable  2: '  $variable
        if $variable <> ''   and  $variable  <> '0'
           Do Check-Strings2( $LCDescr , $StringOut)
         
           If $StringOut = 'yy'
              Let $variable =   '/' || $variable 
              let $LCDescr = replace($LCDescr, 'yy',  $variable)
              let $LCDescr = replace($LCDescr, 'YY',  $variable)
           else
              let $LCDescr = ltrim(rtrim(($LCDescr || '/' || $variable), '/'), '/')
           end-if
        end-if
     end-if  
 end-if
    
 if (#LegalCode >= 63 and #LegalCode < 64) or
    (#LegalCode >= 69 and #LegalCode < 72) or
    (#LegalCode >= 95 and #LegalCode < 96) or
   (#LegalCode >= 103 and #LegalCode < 104)
   #debug show 'evaluate 95' $LCDescr
   #debug show 'evaluate variable ' $variable

    Let $LCDescr95 = $LCDescr

    if $variable  = ''
       Let $variable = edit(#UnitArray, '999')
    end-if 
   
    if $variable  <> ''  
       Let $variable = ltrim($variable, '0')
       Do Check-Strings2( $LCDescr , $StringOut)         
       
       If $StringOut = 'xx'
          let $LCDescr = replace($LCDescr, 'xx',  $variable)
          let $LCDescr = replace($LCDescr, 'XX',  $variable)
       else       
          let $LCDescr = $LCDescr || ' ' ||  $variable
       end-if
    end-if
 end-if

 if #LegalCode >= 64 and  #LegalCode < 65
    #debug show 'evaluate 64' $LCDescr
    if $ParmNumb  = '1'  
       if $variable  = ''
          Let $variable = edit(#UnitArray, '999')
       else
          Let $variable = ltrim($variable, '0')
       end-if 
 
       if $variable  <> ''  
          Do Check-Strings2( $LCDescr , $StringOut)
          If $StringOut = 'xx'
             let $LCDescr = replace($LCDescr, 'xx',  $variable)
             let $LCDescr = replace($LCDescr, 'XX',  $variable)
          else
             let $LCDescr = $LCDescr || ' ' || $variable
          end-if
       end-if

    end-if
             
    if $ParmNumb  = '2'
       if $variable  = ''
          Let $variable = $userFArray
       end-if
              
       Do Valid-Date($variable, 'N', $DateOut, $validDate)
       If $validDate = 'Y'
          Let $variable = to_number(substr($DateOut,1,4 )) 
       else 
          Let $variable = ltrim($variable, '0')
       end-if
       
       let $LCDescr = $LCDescr || ' ' ||  $variable  
    end-if  
 end-if
    
 if #LegalCode >= 65 and #LegalCode < 66
   if $ParmNumb  = '1' 
      #debug show 'evaluate 65' 
      if $variable  = ''
         Let $variable = edit(#UnitArray, '999')
      end-if 
    
      if $variable  <> ''  
         Do Check-Strings2($LCDescr , $StringOut)
         
         If $StringOut = 'xx'
            let $LCDescr = replace($LCDescr, 'xx',  $variable)
            let $LCDescr = replace($LCDescr, 'XX',  $variable)
         else
            let $LCDescr = $LCDescr || ' ' || $variable
         end-if
      end-if 
    end-if
 end-if
 
          
 if #LegalCode >= 66 and #LegalCode < 67
    #debug show 'evaluate 66' 
    #debug show '$ParmNumb: ' $ParmNumb
    
    
    if $ParmNumb  = '1'  
       if $variable  = ''
          Let $variable = ltrim(rtrim($userFArray, ' '), ' ')
       end-if 
      
       if $variable  <> ''  
          Let $validDate = 'N'
          Do Valid-Date($variable, $validDate, $DateOut, $validDate )
          If $validDate = 'Y'
             Let $variable = $DateOut
          else 
             Let $variable = ltrim($variable, '0')
          end-if
          
          Do Check-Strings2($LCDescr , $StringOut)
         
          If $StringOut = 'xx'
             let $LCDescr = replace($LCDescr, 'xx',  $variable)
             let $LCDescr = replace($LCDescr, 'XX',  $variable)
          else
             let $LCDescr = $LCDescr || ' ' || $variable
          end-if
       end-if
      
   end-if   
     
   #debug show '$ParmNumb: ' $ParmNumb  
   if $ParmNumb  = '2'
      if $variable  = ''
         Let $variable = ltrim(rtrim($userFArray2, ' '), ' ')
      end-if 
    
      if $variable <> '' 
         Let $validDate = 'N'
         Do Valid-Date($variable, $validDate, $DateOut, $validDate)
         If $validDate = 'Y'
            Let $variable = $DateOut
         else
            Let $variable = ltrim($variable, '0')       
         end-if
    
         Do Check-Strings2( $LCDescr , $StringOut)
         If $StringOut = 'yy'
            let $LCDescr = replace($LCDescr, 'yy',  $variable)
            let $LCDescr = replace($LCDescr, 'YY',  $variable)
         else
            let $LCDescr = $LCDescr || ' a ' || $variable
         end-if
      end-if 
   end-if

    
   if $ParmNumb  = '3' 
      if  $variable <> ''  
    
          Do Check-Strings2( $LCDescr , $StringOut)
          If $StringOut = 'zz'
             let $LCDescr = replace($LCDescr, 'zz',  $variable)
             let $LCDescr = replace($LCDescr, 'ZZ',  $variable)
          else
             let $LCDescr = ltrim(rtrim(($LCDescr || '/' || $variable), '/'), '/')
          end-if
      end-if 
   end-if
   
 end-if

 if (#LegalCode >= 95 and #LegalCode < 96)  
   Let $LCDescr = $LCDescr95
 end-if

End-Procedure Evaluate-Legal-Code

!**************************************
Begin-Procedure Check-Strings
#debug show 'Procedure: Check-Strings **'
!**************************************
let $String_In  = ltrim(rtrim($Postal, ' '),' ')
let #I = 1
let $String_Out = ''
let #Len = Length($String_In)

While #I  <= #Len
   let $Test_Char    = Substr($String_In,#I, 1)

   evaluate $Test_Char
      when = '-'
         break
      when = ' '
         break
      when-other
      let $String_Out  = $String_Out || $Test_Char
      end-evaluate
   add 1 To #I
End-While
let $String_In  = ''
let $Postal = $String_Out
End-Procedure Check-Strings

!**************************************
Begin-Procedure Create-Employer-XML
#debug show 'Procedure: Create-Employer-XML **'
!**************************************
   let $xml_tag = 'EMPLID'
   let $xml_content = $Emplid || ' ' || edit(to_char(#emplRcd), '99')
   do Process-XML-Tag-Content

   let #TagCount = 1
 
   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = $CNPJ
   do Process-XML-Tag-Content

   
   let #TagCount = #TagCount + 1

   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = $Employer_Name
   do Process-XML-Tag-Content
   
   let #TagCount = #TagCount + 1
  
   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = $Employer_Addr
   do Process-XML-Tag-Content
   
   let #TagCount = #TagCount + 1
   
   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = ltrim($Employer_Neighborhood ,' ')
   do Process-XML-Tag-Content
   
   let #TagCount = #TagCount + 1
 
   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = ltrim($Employer_County  ,' ')
   do Process-XML-Tag-Content
   
   let #TagCount = #TagCount + 1
 
   let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
   let $xml_content = ltrim($Employer_State ,' ')
   do Process-XML-Tag-Content

   
   let #TagCount = #TagCount + 1
 
  if rtrim($Employer_Postal , ' ') <> ''  
     let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
     let $xml_content = ltrim($Employer_Postal  ,' ')
     do Process-XML-Tag-Content
  end-if
   
  let #TagCount = #TagCount + 1
 
  if rtrim($CNAE, ' ') <> ''  
      let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
      let $xml_content = ltrim($CNAE,' ')
      do Process-XML-Tag-Content
  end-if
   
  let #TagCount = #TagCount + 1
    
  if rtrim($ServiceT_CNPJ, ' ') <> ''  
      let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
      let $xml_content = ltrim($ServiceT_CNPJ,' ')
      do Process-XML-Tag-Content
  end-if  
 

End-Procedure Create-Employer-XML

!**************************************
Begin-Procedure Create-Employee-XML
#debug show 'Procedure: Create-Employee-XML **'
!**************************************
! ******** FIELD10  

  let #TagCount = 10

  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($PIS ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Name  ,' ')
  do Process-XML-Tag-Content

  let #TagCount = #TagCount + 1
   
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Empl_Address ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Empl_Neighborhood ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Empl_County  ,' ')
  do Process-XML-Tag-Content
  
! ******** FIELD15  
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Empl_State ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
   
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Empl_Postal  ,' ')
  do Process-XML-Tag-Content

  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($CTPS,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
   
  if rtrim($CPF , ' ') <> ''  
     let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
     let $xml_content = ltrim($CPF ,' ')
     do Process-XML-Tag-Content
  end-if
  
  let #TagCount = #TagCount + 1
   
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($BirthDate ,' ')
  do Process-XML-Tag-Content
   
! ******** FIELD20  
  let #TagCount = #TagCount + 1 
    
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Mother_Name ,' ')
  do Process-XML-Tag-Content


End-Procedure Create-Employee-XML

!**************************************
Begin-Procedure Create-Contract-XML
#debug show 'Procedure: Create-Contract-XML **'
!**************************************

  let #TagCount = 21
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($ContractTypeDescr ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Desc_Aff  ,' ')
  do Process-XML-Tag-Content

  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim(edit(#PreviousSalary,'999,999,999.99c'), ' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Entry_DateF ,' ')
  do Process-XML-Tag-Content
   
! ******** FIELD25   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Bgn_Dt_PrF  ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Date_AfF ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($TermTypeCode  ,' ')
  do Process-XML-Tag-Content
   
  let #TagCount = #TagCount + 1
 
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim(edit(#AlimonyTRCTAmt,'999,999,999.99c'), ' ')
  do Process-XML-Tag-Content
    
  let #TagCount = #TagCount + 1
   
  let $xml_tag = 'Field' ||  ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim(edit(#AlimonyFGTSAmt,'999,999,999.99c'), ' ')
  do Process-XML-Tag-Content
    
! ******** FIELD30 
  let #TagCount = #TagCount + 1
   
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($Category  ,' ')
  do Process-XML-Tag-Content
  
  let #TagCount = #TagCount + 1
    
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($unionCdBRA ,' ')
  do Process-XML-Tag-Content
  
  let #TagCount = #TagCount + 1
  
  let $xml_tag = 'Field' || ltrim(edit(#TagCount,'b999'), ' ')
  let $xml_content = ltrim($unionDescr  ,' ')
  do Process-XML-Tag-Content  

End-Procedure Create-Contract-XML

!**************************************
Begin-Procedure GetEstabAddress($EstabID, $Effdt, :$Address, :$Number, :$Complement, :$Neighborhood, :$ZipCode, :$Citycode, :$CityName, :$Empl_StateCode)
#debug show 'Procedure: GetEstabAddress'
!**************************************

let $MyEstab = ''
let $MyCompany = ''

Begin-Select
EA.COMP_INS_TYPE_BRA
EA.ESTAB_ASOC_BRA
EA.LEGAL_ENT_TYPE_BRA

    let $InscrType = Rtrim(&EA.COMP_INS_TYPE_BRA, ' ')
    let $EstabAsoc = Rtrim(&EA.ESTAB_ASOC_BRA, ' ')
    let $LegEntType = Rtrim(&EA.LEGAL_ENT_TYPE_BRA, ' ')

FROM PS_ESTAB_TBL_BRA EA
WHERE EA.ESTABID = $EstabID
  AND EA.EFFDT   = (SELECT MAX(EA2.EFFDT)
                   FROM PS_ESTAB_TBL_BRA EA2
                   WHERE EA2.ESTABID = EA.ESTABID
                     AND EA2.EFFDT  <= $Effdt)
End-Select

#debug Show '  $EstabID     [' $EstabID ']'
#debug Show '  $Effdt       [' $Effdt ']'
#debug Show '  $InscrType   [' $InscrType ']'
#debug Show '  $EstabAsoc   [' $EstabAsoc ']'
#debug Show '  $LegEntType  [' $LegEntType ']'



!Take addres from establishment
!Inscription Type 10 = CNPJ, 20 = CEI
If $InscrType = '20'
    let $MyEstab = $EstabAsoc
Else
    let $MyEstab = $EstabID
End-if

let $Address      = ''
let $Number       = ''
let $Complement   = ''
let $Neighborhood = ''
let $ZipCode      = ''
let $CityName     = ''
let $Empl_StateCode       = ''

Begin-Select
ES.ADDRESS1
ES.NUM1
ES.ADDRESS2
ES.ADDRESS3
ES.ADDRESS4
ES.POSTAL
BS.COUNTY_CD_BRA

    let $Address      = Rtrim(&ES.ADDRESS1, ' ')
    let $Number       = Rtrim(&ES.NUM1, ' ')
    let $Complement   = Rtrim(&ES.ADDRESS2, ' ') || ' ' || Rtrim(&ES.ADDRESS3, ' ')
    let $Neighborhood = Rtrim(&ES.ADDRESS4, ' ')
    let $ZipCode      = Rtrim(&ES.POSTAL, ' ')
    let #Code_city    = &BS.COUNTY_CD_BRA
    Move &BS.COUNTY_CD_BRA to $Citycode '0000000'
       #debug Show '  $MyEstab       [' $MyEstab ']'
       #debug Show '  $Effdt         [' $Effdt ']'
       #debug Show '  $Address       [' $Address ']'
       #debug Show '  $Number        [' $Number ']'
       #debug Show '  $Complement    [' $Complement ']'
       #debug Show '  $Neighborhood  [' $Neighborhood ']'
       #debug Show '  $ZipCode       [' $ZipCode ']'
       #debug Show '  $CityName      [' $CityName ']'
       #debug Show '  $Empl_StateCode        [' $Empl_StateCode ']'
       #debug Show '  $Citycode      [' $Citycode '] - [' #Code_city ']'

FROM PS_ESTAB_TBL ES
,PS_ESTAB_TBL_BRA BS
WHERE ES.ESTABID = $MyEstab
AND ES.EFF_STATUS = 'A'
AND ES.EFFDT = (SELECT MAX(ES2.EFFDT)
                FROM PS_ESTAB_TBL ES2
                WHERE ES2.ESTABID = ES.ESTABID
                AND ES2.EFF_STATUS = ES.EFF_STATUS
                AND ES2.EFFDT <= $Effdt)
AND BS.ESTABID = ES.ESTABID
AND BS.EFFDT = ES.EFFDT
End-Select

Begin-Select
CT.CITY
CT.STATE

    let $CityName     = Rtrim(&CT.CITY, ' ')
    let $Empl_StateCode       = Rtrim(&CT.STATE, ' ')

   #debug Show '  $CityName      [' $CityName ']'
   #debug Show '  $Empl_StateCode        [' $Empl_StateCode ']'

FROM PS_CODE_CITY_BRA CT
WHERE CT.CODE_CITY_BRA = #Code_city
End-Select

End-Procedure GetEstabAddress

!**************************************
begin-procedure Get-Union-Data
#debug show 'Procedure: Get-Union-Data'
let $unionDescr    =  ' '
let $unionCNPJ     =  ' '

BEGIN-SELECT
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.NUM1
A.STATE
A.POSTAL
B.UNION_TYPE_BRA
B.UNION_CNPJ_BRA
B.UNION_CODE_BRA

 let $unionDescr    = &A.DESCR
 let $unionCdBRA    = &B.UNION_CODE_BRA
 let $unionAddress1 = &A.ADDRESS1
 let $unionNum      = &A.NUM1
 let $unionAddress2 = &A.ADDRESS2
 let $unionCNPJ     = &B.UNION_CNPJ_BRA 
 let $unionNeighborhood = &A.ADDRESS4
 let $unionPostal   = &A.POSTAL
 let $unionCity     = &A.CITY
 let $unionState    = &A.STATE

FROM PS_UNION_TBL A
    ,PS_UNION_TBL_BRA B
WHERE A.UNION_CD = $union
AND A.UNION_CD   = B.UNION_CD
AND A.EFFDT      = (SELECT MAX(AA.EFFDT) 
                   FROM PS_UNION_TBL AA 
                   WHERE AA.UNION_CD = A.UNION_CD 
                   AND AA.EFFDT <= $TerminationDt
                   AND AA.EFF_STATUS = A.EFF_STATUS)
AND A.EFF_STATUS = 'A'
AND A.EFFDT = B.EFFDT
end-select

BEGIN-Select
B1.DESCR     

  let $unionDescr   = Ltrim(Rtrim(&B1.DESCR, ' '), ' ')

FROM PS_UNION_TBL_LANG B1
WHERE B1.UNION_CD = $union
AND   B1.LANGUAGE_CD = $curr_language_cd
AND   B1.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_UNION_TBL_LANG
                  WHERE UNION_CD = B1.UNION_CD
                  AND   LANGUAGE_CD = B1.LANGUAGE_CD
                  AND   EFFDT <= $TerminationDt)
End-Select

let $unionDescr    = $unionCNPJ || ' ' ||$unionDescr
end-procedure Get-Union-Data

!**************************************
Begin-Procedure Get-Legal-Code-Lang
#debug show 'Procedure: Get-Legal-Code-Lang **'
!**************************************
Begin-Select
LCL.DESCR100

  let $LCDescr    = rtrim(&LCL.DESCR100, ' ')

FROM PS_GPBR_TRCT_C_LNG LCL
WHERE LCL.EFFDT   = (SELECT MAX(LE.EFFDT)
                     FROM PS_GPBR_TRCT_C_LNG LE
                     where LE.GPBR_LEGAL_CODE  =  LCL.GPBR_LEGAL_CODE
                     AND   LE.LANGUAGE_CD  = LCL.LANGUAGE_CD 
                     and   LE.EFFDT           <= $FormatEffdt
                     )
AND   LCL.GPBR_LEGAL_CODE = $LegalCode 
AND   LCL.LANGUAGE_CD = $Curr_language_Cd
End-Select

#debug show 'End Get-Legal-Code-Lang' 
End-Procedure Get-Legal-Code-Lang

!**************************************
Begin-Procedure Missing-Legal-Codes-Ern
#debug show 'Procedure: Missing-Legal-Codes-Ern **'
!**************************************
let #CountMiss = 0

Begin-Select
MLE.SEQNUM
MLE.PIN_ERN_NUM
GP1.PIN_NM
GP1.DESCR

  if #CountMiss = 0 
     show 'Proventos: Não existe Códigos Legais do TRTC para os seguintes elementos: '  
  end-if
  
  show '--> '  &GP1.PIN_NM 
  let #CountMiss = #CountMiss + 1


FROM PS_GPBR_PAYSL_F_ER MLE,
     PS_GP_PIN GP1
WHERE MLE.GPBR_FORMAT_ID = $FormatID
AND   MLE.EFFDT          = $FormatEffdt
AND   MLE.EFF_STATUS     = 'A'
AND   MLE.PIN_ERN_NUM    = GP1.PIN_NUM
AND   GP1.PIN_TYPE        = 'ER'
AND   MLE.GPBR_LEGAL_CODE = ' ' 
End-Select
End-Procedure Missing-Legal-Codes-Ern

!**************************************
Begin-Procedure Missing-Legal-Codes-Ded
#debug show 'Procedure: Missing-Legal-Codes-Ded'
!**************************************
let #CountMiss = 0

Begin-Select
MLD.SEQNUM
MLD.PIN_DED_NUM
GP2.PIN_NM
GP2.DESCR

  if #CountMiss = 0 
     show 'Descontos: Não existe Códigos Legais do TRTC para os seguintes elementos: '  
  end-if
  
  show '--> '  &GP2.PIN_NM  
  let #CountMiss = #CountMiss + 1


FROM PS_GPBR_PAYSL_F_DE MLD,
     PS_GP_PIN GP2
WHERE MLD.GPBR_FORMAT_ID = $FormatID
AND   MLD.EFFDT          = $FormatEffdt
AND   MLD.EFF_STATUS     = 'A'
AND   MLD.PIN_DED_NUM    = GP2.PIN_NUM
AND   GP2.PIN_TYPE        = 'DD'
AND   MLD.GPBR_LEGAL_CODE = ' ' 
End-Select
End-Procedure Missing-Legal-Codes-Ern

!**************************************
Begin-Procedure Add-Ern-To-Array
#debug show 'Procedure: Add-Ern-To-Array **'
#debug show '$LegalCode: ' $LegalCode
#debug show '#AmtVal:  ' #AmtVal
#debug show '#UnitVal: ' #UnitVal
#debug show '#RateVal: ' #RateVal
!**************************************
  Add 1 TO #ContErn
   
  let ArrayErn.ELCode(#ContErn)    = $LegalCode
  let ArrayErn.ELCDescr(#ContErn)  = $LCDescr 
  let ArrayErn.Ecode(#ContErn)     = #PinNum
  let ArrayErn.Eunit(#ContErn)     = #UnitVal
  let ArrayErn.Ecalc(#ContErn)     = $calcRule
  let ArrayErn.Eamt(#ContErn)      = #AmtVal
  let ArrayErn.ELCType(#ContErn)   = $LCType
  let ArrayErn.Erate(#ContErn)     = #RateVal
  let ArrayErn.Euser(#ContErn)     = $UserF     
  let ArrayErn.Euser2(#ContErn)    = $UserF2 
  let ArrayErn.Epin1(#ContErn)     = #PinParm1  
  let ArrayErn.Epin2(#ContErn)     = #PinParm2   
  let ArrayErn.Epin3(#ContErn)     = #PinParm3  
  let ArrayErn.Eparm1(#ContErn)    = $PinType1   
  let ArrayErn.Eparm2(#ContErn)    = $PinType2   
  let ArrayErn.Eparm3(#ContErn)    = $PinType3 
  let ArrayErn.ELCodeNum(#ContErn) = #LegalCode
  
  let $showLine = $LegalCode || '\'  ||  $LCDescr ||  '\' || to_char(#PinNum) || '\' || to_char(#UnitVal) || '\' || $calcRule 
  let $showLine = $showLine  || '\'  || to_char(#AmtVal) || '\' || $LCType || '\' || $UserF 
  
  #debug show '$showLine : ' $showLine
     

  let #AmtVal   = 0
  let #UnitVal  = 0
  let #UnitAdj  = 0
  let #RateVal  = 0
  let $LegalCode = ' '
  let $LCDescr  = ' '
  let #PinNum   = 0
  let $LCType   = ' '
  let $UserF    = ' '
  let $UserF2    = ' '
 
End-Procedure Add-Ern-To-Array

!**************************************
Begin-Procedure Evaluate-Parameters
#debug show 'Procedure: Evaluate-Parameters **'
#debug show '#LegalCode: '  #LegalCode 
!**************************************
 
   If #PinParm1 <> 0 or
         #LegalCode = 50 or
         (#LegalCode >= 63 and  #LegalCode < 68) or
         (#LegalCode >= 69 and  #LegalCode < 72) or
         (#LegalCode >= 95 and  #LegalCode < 96) or
         (#LegalCode >= 103 and  #LegalCode < 104)
 
         Let $ParmNumb  = '1'
         Let #PinParmNum = #PinParm1
         Let $PinParmType = $PinType1
         Do Get-Pin-Parameter-Value  
      end-if
      
      If #PinParm2 <> 0 or
         (#LegalCode >= 66 and  #LegalCode < 68)
         
         if #PinParm2 = 0
            Let #PinParm2 =  #PinNum       
         end-if
         
         Let $ParmNumb  = '2'
         Let #PinParmNum = #PinParm2
         Let $PinParmType = $PinType2
         Do Get-Pin-Parameter-Value  
      end-if
 
      If #PinParm3 <> 0 or
         (#LegalCode >= 66 and  #LegalCode < 68)
         Let $ParmNumb  = '3'
         Let #PinParmNum = #PinParm3
         Let $PinParmType = $PinType3
         Do Get-Pin-Parameter-Value  
     end-if 
    
 
End-Procedure Evaluate-Parameters

!**************************************
Begin-Procedure Add-Ded-To-Array
#debug show 'Procedure:Add-Ded-To-Array **'
!**************************************
  
  Add 1 TO #ContDed
  let ArrayDed.DLCode(#ContDed)    = $LegalCode
  let ArrayDed.DLCDescr(#ContDed)  = $LCDescr 
  let ArrayDed.Dcode(#ContDed)     = #PinNum
  let ArrayDed.Dunit(#ContDed)     = #UnitVal
  let ArrayDed.Dcalc(#ContDed)     = $calcRule
  let ArrayDed.Damt(#ContDed)      = #AmtVal
  let ArrayDed.DLCType(#ContDed)   = $LCType
  let ArrayDed.Duser(#ContDed)     = $UserF  
  let ArrayDed.DLCodeNum(#ContDed) = #LegalCode
  
  let $showLine = $LegalCode || '\'       ||  $LCDescr ||  '\' ||  to_char(#LegalCode) ||  '\' || to_char(#PinNum) || '\' || to_char(#UnitVal) || '\' || $calcRule 
  let $showLine = $showLine  || '\'       || to_char(#AmtVal) || '\' || $LCType || '\' || $UserF   
  
  
  #debug show '#ContDed: ' #ContDed
  #debug show '$showLine: ' $showLine
  
  let #AmtVal   = 0
  let #UnitVal  = 0
  let #UnitAdj  = 0
 
End-Procedure Add-Ded-To-Array

!**************************************
Begin-Procedure Search-Ern-from-Array
#debug show 'Procedure: Search-Ern-from-Array **'
#debug show '$LegalCode: ' $LegalCode
#debug show '#AmtVal:  ' #AmtVal
#debug show '#UnitVal: ' #UnitVal
#debug show '#RateVal: ' #RateVal
!**************************************
 
let #ind   = 1
let $FoundElement = 'N'

While #ind <= #ContErn
     
      If (ArrayErn.ELCode(#ind) = $LegalCode) 
      
          If $userF = ' '
      
             let $FoundElement = 'Y'
     
             let ArrayErn.Eamt(#ind)   = ArrayErn.Eamt(#ind)  + #AmtVal          
             let ArrayErn.Eunit(#ind)  = ArrayErn.Eunit(#ind) + #UnitVal
             let ArrayErn.Erate(#ind)  = ArrayErn.Erate(#ind) + #RateVal
          else
             If (#LegalCode >= 66  and #LegalCode < 67) or
                (#LegalCode >= 64  and #LegalCode < 65) or
                (#LegalCode >= 95  and #LegalCode < 96) or
                (#LegalCode >= 115 and #LegalCode < 116)
                Do Legal-Code-Sequence
             else
                let $FoundElement = 'Y'
                      
                let ArrayErn.Eamt(#ind)   = ArrayErn.Eamt(#ind)  + #AmtVal          
                let ArrayErn.Eunit(#ind)  = ArrayErn.Eunit(#ind) + #UnitVal
                let ArrayErn.Erate(#ind)  = ArrayErn.Erate(#ind) + #RateVal                      
             end-if
          end-if
            
          let #ind = #ContErn   + 1      

      end-if

  Add 1 to #ind
end-while

#debug show '$FoundElement: '  $FoundElement

End-Procedure Search-Ern-from-Array

!**************************************
Begin-Procedure Search-Ded-from-Array
#debug show 'Procedure: Search-Ded-from-Array **'
!**************************************
 
let #ind   = 1
let $FoundElement = 'N'

While #ind <= #ContDed
     
      If (ArrayDed.DLCode(#ind) = $LegalCode) 
      
         If $userF = ' '
            let $FoundElement = 'Y'
      
            let ArrayDed.Damt(#ind)   = ArrayDed.Damt(#ind)  + #AmtVal
            let ArrayDed.Dunit(#ind)  = ArrayDed.Dunit(#ind) + #UnitVal
            let ArrayDed.Drate(#ind)  = 0
          
         else
             If (#LegalCode >= 66  and #LegalCode < 67) or
                (#LegalCode >= 64  and #LegalCode < 65) or
                (#LegalCode >= 95  and #LegalCode < 96) or
                (#LegalCode >= 115 and #LegalCode < 116)
                Do Legal-Code-Sequence
             else
                let $FoundElement = 'Y'
                       
                let ArrayDed.Damt(#ind)   = ArrayDed.Damt(#ind)  + #AmtVal
                let ArrayDed.Dunit(#ind)  = ArrayDed.Dunit(#ind) + #UnitVal
                let ArrayDed.Drate(#ind)  = 0                  
             end-if
          end-if          
          
          let #ind = #ContDed          
      end-if

  Add 1 to #ind
end-while

End-Procedure Search-Ded-from-Array

!**************************************
Begin-Procedure Legal-Code-Sequence
#debug show 'Procedure: Legal-Code-Sequence **'
!**************************************
 
  If #LegalCode >= 66 and #LegalCode < 67
     Let #MaxLC66 = #MaxLC66 + 0.01
     Let #LegalCode = #MaxLC66
     Let $LegalCode = edit(#LegalCode, '999.999')
     if #MaxLC66 <= 66.09
        Let $LegalCode = edit(((#MaxLC66 - 0.01) +.1), '999.9')
     end-if
  else 
     If #LegalCode >= 64 and #LegalCode < 65
        Let #MaxLC64 = #MaxLC64 + 0.01
        Let #LegalCode = #MaxLC64
        Let $LegalCode = edit(#LegalCode, '999.999')
        if #MaxLC64 <= 64.09
           Let $LegalCode = edit(((#MaxLC64 - 0.01) +.1), '999.9')
        end-if
     else
        If #LegalCode >= 95 and #LegalCode < 96
           Let #MaxLC95 = #MaxLC95 + 0.01
           Let #LegalCode = #MaxLC95
           Let $LegalCode = edit(#LegalCode, '999.999')
           if #MaxLC95 <= 95.09
              Let $LegalCode = edit(((#MaxLC95 - 0.01) +.1), '999.9')
           end-if
        else
           If #LegalCode >= 115 and #LegalCode < 116
              Let #MaxLC115 = #MaxLC115 + 0.01
              Let #LegalCode = #MaxLC115
              Let $LegalCode = edit(#LegalCode, '999.999')
              if #MaxLC115 <= 115.09
                 Let $LegalCode = edit(((#MaxLC115 - 0.01) +.1), '999.9')
              end-if
           else
               If #LegalCode >= 67 and #LegalCode < 68
                  Let #MaxLC67 = #MaxLC67 + 0.01
                  Let #LegalCode = #MaxLC67
                  Let $LegalCode = edit(#LegalCode, '999.999')
                  if #MaxLC67 <= 67.09
                     Let $LegalCode = edit(((#MaxLC115 - 0.01) +.1), '999.9')
                  end-if
               end-if
           end-if
        end-if
      end-if
   end-if         

End-Procedure Legal-Code-Sequence

!**************************************
begin-procedure Process-XML-Tag-Content
!**************************************

   let $xml_content   = replace($xml_content, '&',  '&amp;')
   let $xml_content   = replace($xml_content, '"',  '&quot;')
   let $xml_content   = replace($xml_content, '<',  '&lt;')
   let $xml_content   = replace($xml_content, '>',  '&gt;')
   let $xml_content   = replace($xml_content, '''', '&apos;')


   let $xml_content   = ltrim($xml_content, ' ')
   let $xml_content   = rtrim($xml_content, ' ')

   let $xml_output_line = ''
   let $xml_output_line = $xml_cntrl_begin || $xml_tag || $xml_cntrl_end  || $xml_content
                || $xml_cntrl_begin || $xml_tag_end || $xml_tag || $xml_cntrl_end
                
                            
   #debug show '[$xml_tag:]            ' $xml_tag
   #debug show '[$xml_output_line:]    ' $xml_output_line
   
   write #FNum from $xml_output_line

end-procedure


begin-procedure Process-XML-Tag-Beg
#debug show 'Procedure: Process-XML-Tag-Beg'

   let $xml_output_line = ''
   let $xml_output_line = $xml_cntrl_begin || $xml_tag|| $xml_cntrl_end
   
   #debug show '[$xml_output_line:]    ' $xml_output_line
   write #FNum from $xml_output_line
   
   #debug show '[$xml_output_line:]    ' $xml_output_line

end-procedure


begin-procedure Process-XML-Tag-End
#debug show 'Procedure: Process-XML-Tag-End'

  let $xml_output_line = ''
  let $xml_output_line = $xml_cntrl_begin || $xml_tag_end || $xml_tag|| $xml_cntrl_end
  write #FNum from $xml_output_line
  
  #debug show '[$xml_output_line:]    ' $xml_output_line

end-procedure


!**************************************
begin-procedure Open-XML-File($FileName, #FNum, :#FStat, :$openXMLFile)
#debug show 'Procedure: Open-XML-File'
!**************************************
 
   if $openXMLFile = 'N'
   
     let $FileName = 'gpbrte01.xml'
     let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
     let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
     let #FNum  = 1
 
     open $FileName as #FNum for-writing
         record=200:vary status = #FStat
     if #FStat = 0    
      
        let $xml_output_line = '<?xml version="1.0" encoding="iso-8859-1"?>'       
        write #FNum from $xml_output_line
        write #FNum from '<start>'
                      
        let $FileName = 'gpbrte02.xml'
        let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
        let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
        let #FNum  = 2
       
        open $FileName as #FNum for-writing
                 record=200:vary status = #FStat
       
        if #FStat = 0
                 
              let $xml_output_line = '<?xml version="1.0" encoding="iso-8859-1"?>'       
              write #FNum from $xml_output_line
              write #FNum from '<start>'
                                   
              let $FileName = 'gpbrte03.xml'
              let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
              let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
              let #FNum  = 3
              
              open $FileName as #FNum for-writing
                 record=200:vary status = #FStat
                         
              if #FStat = 0
                 let $xml_output_line = '<?xml version="1.0" encoding="iso-8859-1"?>'       
                 write #FNum from $xml_output_line
                 write #FNum from '<start>'
              end-if 
              
           end-if
        
        end-if
           
   Let $openXMLFile = 'Y'
   
   end-if
   

end-procedure

!**************************************
begin-procedure Insert-XML-RunControl
#debug show 'Procedure: Insert-XML-RunControl'
#debug show '[$FileName:]              ' $FileName
#debug show '[$Prcs_OprID], [$Prcs_Run_Cntl_ID], [#prcs_process_instance]'    
#debug show '[$ReportID]               ' $ReportID             
#debug show '[#prcs_job_instance]      ' #prcs_job_instance    
#debug show '[$TemplateID:]            ' $TemplateID
#debug show '                          GPBR_TRCT'                   
#debug show '[$FileName]               ' $FileName             
#debug show '[$ReportDefn]             ' $ReportDefn
#debug show '[#Copies:]                ' #Copies
#debug show '-'
!**************************************

let $err-statement1 = 'Procedure: Insert-XML-RunControl'
let $err-statement2 = 'INSERT'

begin-SQL on-error=Error-Display
INSERT INTO PS_GPBR_XML_RCTL
(OPRID
,RUN_CNTL_ID
,PROCESS_INSTANCE
,PRCSNAME
,JOBINSTANCE
,TMPLDEFN_ID
,GPBR_FILE_NAME
,REPORT_DEFN_ID
,GPBR_COPIES)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,$ReportID
,#prcs_job_instance
,$TemplateID
,$FileName
,$ReportDefn
,1)
end-SQL
end-procedure Insert-XML-RunControl

!**************************************
begin-procedure Delete-XML-RunControl
#debug show 'Procedure: Delete-XML-RunControl'
!**************************************

let $err-statement1 = 'Procedure: Delete-XML-RunControl'
let $err-statement2 = 'DELETE '


begin-SQL on-error=Error-Display
DELETE FROM PS_GPBR_XML_RCTL
WHERE OPRID = $Prcs_OprID
AND   RUN_CNTL_ID = $Prcs_Run_Cntl_ID
!AND   PROCESS_INSTANCE = #prcs_process_instance
end-SQL

do Commit-Transaction


end-procedure Delete-XML-RunControl

!**************************************
begin-procedure Delete-RunControl
#debug show 'Procedure: Delete-RunControl'
!**************************************

let $err-statement1 = 'Procedure: Delete-RunControl'
let $err-statement2 = 'DELETE '

IF #count_TRCT = 0 
  begin-SQL on-error=Error-Display
    DELETE FROM PS_GPBR_XML_RCTL
    WHERE OPRID = $Prcs_OprID
    AND   RUN_CNTL_ID = $Prcs_Run_Cntl_ID
    AND   TMPLDEFN_ID = 'GPBR_TRCT' 
  end-SQL
  
end-if

IF #count_THRCT = 0 
  begin-SQL on-error=Error-Display
    DELETE FROM PS_GPBR_XML_RCTL
    WHERE OPRID = $Prcs_OprID
    AND   RUN_CNTL_ID = $Prcs_Run_Cntl_ID
    AND   TMPLDEFN_ID = 'GPBR_THRCT' 
  end-SQL
   
end-if

IF #count_TQRCT = 0 
  begin-SQL on-error=Error-Display
    DELETE FROM PS_GPBR_XML_RCTL
    WHERE OPRID = $Prcs_OprID
    AND   RUN_CNTL_ID = $Prcs_Run_Cntl_ID
    AND   TMPLDEFN_ID = 'GPBR_TQRCT' 
  end-SQL
  
end-if

end-procedure Delete-RunControl

!**************************************
begin-procedure Delete-Elem-RunControl
#debug show 'Procedure: Delete-Elem-RunControl'
!**************************************

let $err-statement1 = 'Procedure: Delete-Elem-RunControl'
let $err-statement2 = 'DELETE FROM PS_GPBR_ELEMEN_TMP '

begin-SQL on-error=Error-Display
DELETE FROM PS_GPBR_ELEMEN_TMP
WHERE OPRID = $Prcs_OprID
AND   RUN_CNTL_ID = $Prcs_Run_Cntl_ID
AND   PROCESS_INSTANCE = #prcs_process_instance
end-SQL

do Commit-Transaction

end-procedure Delete-Elem-RunControl

!**************************************
begin-procedure Insert-Elements-Detail
#debug show 'Procedure: Insert-Elements-Detail'

let $LCDescr = substr($LCDescr, 1, 100)
let $space = '                             '


let $err-statement1 = 'Procedure: Insert-Elements-Detail'
let $err-statement2 = $Procedure || ' PS_GPBR_ELEMEN_TMP : ' || $Prcs_OprID || '/' || $Prcs_Run_Cntl_ID || '/' || to_char(#prcs_process_instance)  || '/' || $emplid
let $err-statement2 = $err-statement2 || '/' || $calRunID || '/' || $CalID || '/' || $OrigCalRunID || '/' || to_char(#RsltSegNum)  || '/' || to_char(#emplRcd)
let $err-statement2 = $err-statement2 || '/' ||to_char(#PinArray) || '/' || $LegalCode
let $err-statement3 = $space || $err-statement2 || '/' ||to_char(#PinArray) || '//' || $LegalCode || '//' || $XMLfield

#debug show '[$err-statement]            ' $err-statement3

begin-SQL on-error=Error-Display
INSERT INTO PS_GPBR_ELEMEN_TMP
(OPRID
,RUN_CNTL_ID
,PROCESS_INSTANCE
,EMPLID
,CAL_RUN_ID
,CAL_ID
,ORIG_CAL_RUN_ID
,RSLT_SEG_NUM
,EMPL_RCD
,GPBR_CODE_TYPE
,GPBR_LEGAL_CODE
,DESCR100
,PIN_NUM
,CALC_RSLT_VAL
,UNIT_RSLT_VAL
,BASE_RSLT_VAL
,RATE_RSLT_VAL
,PCT_RSLT_VAL
,USER_FLD1
,GPBR_FIELD_NAME)
Values
($Prcs_OprID
,$Prcs_Run_Cntl_ID
,#prcs_process_instance
,$emplid
,$calRunID
,$CalID
,$OrigCalRunID
,#RsltSegNum
,#emplRcd
,$LCType
,$LegalCode
,$LCDescr 
,#PinArray
,#AmtArray 
,#UnitArray 
,#RateArray 
,#PctArray
,#RateArray 
,$UserFArray
,$XMLfield)
end-SQL

#ifdef ORACLE
!Begin-SQL 
!   COMMIT
!End-SQL       
#endif


Let $LegalCode = ' '
Let $LCDescr   = ' '
Let #PinArray  = 0
Let #AmtArray  = 0 

end-procedure Insert-Elements-Detail

begin-procedure Create-Fields-50-116
#debug show 'Procedure: Create-Fields-50-116'

let $xml_tag = 'Field_Tot_Ern' 
let $xml_content = edit(#AmtErnTot,'$b999,999,999.99c')
do Process-XML-Tag-Content

let $xml_tag = 'Field_Tot_Ded' 
let $xml_content = edit(#AmtDedTot,'$b999,999,999.99c')
do Process-XML-Tag-Content

let $xml_tag = 'Field_Tot_Net' 
let $xml_content = edit(#AmtNetTot,'$b999,999,999.99c')
do Process-XML-Tag-Content

let #Col = 0
Let #DedCount = 0
Let #ErnCount = 0

begin-SELECT
GPBR_CODE_TYPE
GPBR_LEGAL_CODE
DESCR100
CALC_RSLT_VAL
UNIT_RSLT_VAL
BASE_RSLT_VAL
PCT_RSLT_VAL
GPBR_FIELD_NAME
USER_FLD1

  let $LCType       = &GPBR_CODE_TYPE
  let $LegalCode    = ltrim(rtrim(&GPBR_LEGAL_CODE, ' '), ' ')
  let #LegalCode    = to_number(edit(to_number($LegalCode), '999.999'))
   
  let $LCDescr   = rtrim(&DESCR100, ' ')
  let #AmtArray  = &CALC_RSLT_VAL 
  let #UnitVal   = &UNIT_RSLT_VAL
  let #RateArray = &BASE_RSLT_VAL
  let $UserFArray = ltrim(rtrim(&USER_FLD1, ' '), ' ')
  
  #debug show '***'
  #debug show '$LegalCode: '  $LegalCode
  #debug show '#LegalCode: '  #LegalCode  
  #debug show '$LCDescr    '  $LCDescr
  #debug show '#AmtArray   '  #AmtArray
  #debug show '#UnitVal    '  #UnitVal
  #debug show '#RateArray  '  #RateArray
  #debug show '$XMLfield   '  $XMLfield 
  

  if #LegalCode >= 55 and #LegalCode < 57
           
     Do Check-Strings2( $LCDescr , $StringOut)
     let $variable = ltrim(rtrim(edit(#UnitVal, '9999.99'), ' '), ' ')
     if $variable = '0.00'
        let $variable = ' '
     end-if
                 
     If $StringOut = 'xx'
        let $LCDescr = replace($LCDescr, 'xx',  $variable)
        let $LCDescr = replace($LCDescr, 'XX',  $variable)
     else
        let $LCDescr = $LCDescr || ' ' || $variable
     end-if
  end-if
  
  let #Col = #Col + 1
    
  If $LCType = '2'  
     If  #DedCount = 0
         if (#Col > 1 and #Col <= 3)  and #ErnCount  > 0      
            let $xml_tag = $xml_tag_elem       
            Do Process-XML-Tag-End  
         end-if
         let #Col = 1
     end-if    
     Let $xml_tag_lbl   = 'LabelDeduction'    
     Let $xml_tag_field = 'Deduction'
     let $xml_tag_elem  = 'DEDUCTIONS'  
     Let #DedCount = #DedCount + 1      
  else
     Let #ErnCount = #ErnCount + 1
     Let $xml_tag_lbl   = 'LabelEarning'    
     Let $xml_tag_field = 'Earning'
     let $xml_tag_elem  = 'EARNINGS' 
  end-if
  
  If #AmtArray <> 0
     let $xml_content_val = edit(#AmtArray, '$b999,999,999.99c')
  else
     let $xml_content_val = '0,00'
  end-if
  
  Do Create-Row


FROM PS_GPBR_ELEMEN_TMP
WHERE OPRID =$Prcs_OprID
AND RUN_CNTL_ID = $Prcs_Run_Cntl_ID
AND PROCESS_INSTANCE= #prcs_process_instance
AND EMPLID = $emplid
AND CAL_RUN_ID = $calRunID
AND CAL_ID = $CalID
AND ORIG_CAL_RUN_ID = $OrigCalRunID
AND RSLT_SEG_NUM =#RsltSegNum
AND EMPL_RCD = #emplRcd
ORDER BY GPBR_CODE_TYPE, GPBR_FIELD_NAME, GPBR_LEGAL_CODE
end-SELECT

if #Col >= 1 and #DedCount  > 0      
   let $xml_tag = $xml_tag_elem       
   Do Process-XML-Tag-End 
else
   if #Col >= 1 and #ErnCount  > 0  
      let $xml_tag = $xml_tag_elem       
      Do Process-XML-Tag-End  
   end-if
end-if

end-procedure Create-Fields-50-116


!***************************** 
Begin-Procedure Check-Strings2($StringIn , :$StringOut )
#debug show '** Check-Strings2 **'
#debug show '$StringIn: '  $StringIn
!***************************** 
Let $StringIn  = Ltrim(Rtrim($StringIn, ' '),' ')
Let #I = 1
Let $StringOut = ' '
Let #Len = Length($StringIn)
Let $Test_Char1 = ''
Let $Test_Char2 = ''
Let $Test_Char3 = ''

While #I  <= #Len
   Let $Test_Char    = Substr($StringIn,#I, 1)
   Let $Test_Char2   = $Test_Char1
   Let $Test_Char1   = $Test_Char 
   Let $Test_Char3   = $Test_Char1 || $Test_Char2
   
   #debug show '$Test_Char3 : ' $Test_Char3 
   
   If $Test_Char3 = 'xx' or $Test_Char3 = 'XX'
      Let $StringOut = 'xx'
      Let #I  = #Len
   End-If
   
   If $Test_Char3 = 'yy' or $Test_Char3 = 'YY'
      Let $StringOut = 'yy'
      Let #I  = #Len
   End-If
   
   If $Test_Char3 = 'zz'  or $Test_Char3 = 'ZZ'
      Let $StringOut = 'zz'
      Let #I  = #Len
   End-If
   
    add 1 To #I
End-While
Let $StringIn  = ''

#debug show '$StringOut: '  $StringOut
End-Procedure Check-Strings2

!***************************** 
Begin-Procedure Check-Strings3($StringIn , :$StringOut )
#debug show '** Check-Strings3 **'
#debug show '$StringIn: '  $StringIn
!***************************** 
let #I = 1
let $StringOutOrg = $StringIn
let $StringOut = ''
let $test_P = ''
let $test_1 = ''
let $test_2 = ''
let #Len = Length($StringIn)

#debug show '#Len ' #Len

While #I  <= #Len
   let $Test_Char    = Substr($StringIn,#I, 1)

   If $test_P = '.'
      if $test_1 = ''
         let $test_1 = $Test_Char
      else
         if $test_2 = '' 
            let $test_2 = $Test_Char
         end-if   
      end-if 
   else
      Let $StringOut = $StringOut || $Test_Char   
   end-if   
   
   if $Test_Char = '.'
      let $test_P = $Test_Char
   end-if
   
   add 1 To #I
   
end-while  

 if $test_2 = ''
    if $test_1 <> ''
       Let $StringOut = $StringOut ||  '0' || $test_1  
    end-if
 else 
    Let $StringOut = $StringOutOrg
 end-if 
 
End-Procedure Check-Strings3

!***************************** 
Begin-Procedure Create-Row
#debug show 'Create-Row'
!***************************** 

  if #Col = 1
     let $xml_tag = $xml_tag_elem         
     Do Process-XML-Tag-Beg 
     let $xml_tag = $xml_tag_lbl || 'A'
     let $xml_content = rtrim(ltrim($LegalCode, ' '), ' ')  || ' ' ||  ltrim($LCDescr, ' ')
     do Process-XML-Tag-Content   
     let $xml_tag =$xml_tag_field || 'A'  
     let $xml_content = $xml_content_val
     do Process-XML-Tag-Content
  end-if
  
  if #Col = 2
     let $xml_tag = $xml_tag_lbl || 'B'
     let $xml_content = rtrim(ltrim($LegalCode, ' '), ' ')  || ' ' ||  ltrim($LCDescr, ' ')
     do Process-XML-Tag-Content 
     let $xml_tag =$xml_tag_field || 'B'  
     let $xml_content = $xml_content_val
     do Process-XML-Tag-Content
  end-if
  
  if #Col = 3
     let $xml_tag = $xml_tag_lbl || 'C'
     let $xml_content = rtrim(ltrim($LegalCode, ' '), ' ')  || ' ' ||  ltrim($LCDescr, ' ')
     do Process-XML-Tag-Content 
     let $xml_tag =$xml_tag_field || 'C'  
     let $xml_content = $xml_content_val
     do Process-XML-Tag-Content
     let $xml_tag = $xml_tag_elem       
     Do Process-XML-Tag-End  
     Let #Col = 0
  end-if
    
End-Procedure Create-Row


!**************************************
begin-procedure Valid-Date($DateIn, $validDate,:$DateOut, :$validDate)
#debug show '* Valid-Date'
#debug show '  $DateIn: '  $DateIn

 Let $validDate = 'N'
 Let $DateOut = ''
 Let #validYear = to_number(substr($DateIn,1,4 ))

   
 if #validYear > 1900 
   Let #validMonth = to_number(substr($DateIn,6,2 ))  
   
   if #validMonth > 0 and
      #validMonth < 13
       Let #validDay = to_number(substr($DateIn,9,2 ))  
       
       if #validDay > 0 and
          #validDay < 32     
          
           Do convert-from-dtu-date($DateIn,$DateOut)
           Do Format-DateTime($DateOut, $DateOut,{DEFDMY}, '','')  
           Let $DateOut = replace($DateOut, '-', '/')
           Let $validDate = 'Y'
       end-if
   end-if
 end-if  
 
end-procedure Valid-Date

begin-procedure Close-File
if $openXMLFile = 'Y'
   let #Fnum = 3
   let $FileName = 'gpbrte03.xml'
   let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
   let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
   let $xml_tag = 'start'    
   Do Process-XML-Tag-End
   Do Close-XML-File(#Fnum)
   let #Fnum = 2
   let $FileName = 'gpbrte02.xml'
   let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
   let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
   let $xml_tag = 'start'    
   Do Process-XML-Tag-End
   Do Close-XML-File(#Fnum)
   let #Fnum = 1
   let $FileName = 'gpbrte01.xml'
   let $FileName = Rtrim(LTRIM($FileName, ' '), ' ') 
   let $FileName = '{IMPORTPREFIX}' || $FileName || '{IMPORTSUFFIX}'
   let $xml_tag = 'start'    
   Do Process-XML-Tag-End
   Do Close-XML-File(#Fnum)
 end-if

end-procedure

begin-procedure Close-XML-File(#Fnum)

   close #Fnum

end-procedure Close-XML-File

!***********************************************************************
#Include 'reset.sqc'     !Reset Printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'
#include 'number.sqc'
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'prcsapi.sqc'   !Process API
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Routines for date
#include 'prcslng.sqc'   !Process Language
#include 'getcombr.sqc'  !Get selected fields from Company Table and Brazil Fields
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'gpbrtc01.sqc'  !Termination codes
#Include 'tranctrl.sqc'  !Commit-Transaction
#include 'stderror.sqc' 
!***********************************************************************
