!-----------------------------------------------------------------------
!  STOP003:  Summary of Shares Exercised
!-----------------------------------------------------------------------
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:12                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Prints all shares exercised within a date range.
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Create-Array
  do Process-Main
  do Reset
  do Successful-EOJ

  let $CurrentTime = datenow()
  show 'Process ended at:   ' $SysDateTime    !standard output info to sqr.log


End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID      = 'STOP003'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language
  let $AsOfDate = $AsOfToday

  if $prcs_process_instance = ''
    input $RC_Stock_ID      maxlen=10 'Enter Stock ID'       type=Char
    let $RC_Stock_ID = rtrim($RC_Stock_ID,' ')
    while $RC_Stock_ID = ''
       input $RC_Stock_ID   maxlen=10 'Stock ID is required' type=Char
    end-while
    input $RC_Stock_Plan    maxlen=10 'Enter the STOCK PLAN ID   or press  enter for all' type=char
    input $RC_Option_Type   maxlen=4  'Enter the OPTION TYPE     or press enter for all' type=char
    input $RC_ExerStatus    maxlen=1  'Enter the EXERCISE STATUS or press enter for all' type=char
    uppercase $RC_Stock_ID
    uppercase $RC_ExerStatus
    uppercase $RC_Option_Type
    uppercase $RC_Stock_Plan
    do Ask-From-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'From Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $StockId        = rtrim($RC_Stock_ID   ,' ')
  let $RC_Stock_Plan  = rtrim($RC_Stock_Plan ,' ')
  let $RC_Option_Type = rtrim($RC_Option_Type,' ')
  let $RC_Status      = rtrim($RC_ExerStatus ,' ')
  let $RC_FromDate    = rtrim($RC_FromDate   ,' ')
  let $RC_ThruDate    = rtrim($RC_ThruDate   ,' ')
  let $FairValLbl     = 'Fair  Value'

do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')

let $CurrentTime = datenow()
show 'Process started at: ' $SysDateTime      !standard output info to sqr.log


End-Procedure

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 10

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_ID                                       (  ,018,010)

  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,   ,001)
  print $FromDate                                          (  , +1,010)

  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,   ,001)
  print $ThruDate                                          (  , +1,010)

  let $Fieldname  = 'EXERCISE_STATUS'
  let $Fieldvalue = $RC_Status
  do Read-Translate-Table
  let $StatusXlat = $Xlatshortname
  print $ExerStatusLbl                                     (+1,001,015)
  print ':'                                                (  ,   ,001)
  print $StatusXlat                                        (  ,018,010)

  print $OptionTypeLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print $RC_Option_Type                                    (  ,018,004)

  print $StockPlanLbl                                      (+1,001,010)
  print ':'                                                (  ,   ,001)
  print $RC_Stock_Plan                                     (  ,018,010)

  print $GrantPriceLbl                                     (+2,082,011)
  print $NameLbl                                           (+1,001,030)
  print $GrantNbrLbl                                       (  ,032,012)
  print $ExerStatusLbl                                     (  ,046,015)
  print $StockPlanLbl                                      (  ,063,011)
  print $ExerFmvLbl                                        (  ,081,012)
  print $FairValLbl                                        (  ,146,011)
  print $EmplLbl                                           (+1,001,030)
  print $ExerDtLbl                                         (  ,032,013)
  print $OptionTypeLbl                                     (  ,046,012)
  print $MethodTradeLbl                                    (  ,063,015)
  print $SalePrcLbl                                        (  ,083,010)
  print $ShrExerLbl                                        (  ,101,016)
  print $GrantCostLbl                                      (  ,126,011)
  print $GrantValLbl                                       (  ,146,011)
  print $OrdIncLbl                                         (  ,162,015)
  print '-'                                                (+1,001,176) fill

End-Heading

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STOP002')

  do Get_Field_Information ('STOCK',   'FROM',              $FromLbl,#DW)
  do Get_Field_Information ('STOCK',   'THRU',              $ThruLbl,#DW)
  do Get_Field_Information ('STOCK',   'STOCK_ID',          $StockIdLbl,#DW)
  do Get_Field_Information ('STOCK',   'STOCK_PLAN',        $StockPlanLbl, #DW)
  do Get_Field_Information ('STOCK',   'ST_OPTION_TYPE',    $OptionTypeLbl,#DW)
  do Get_Field_Information ('STOCK',   'NAME',              $NameLbl, #DW)
  do Get_Field_Information ('STOCK',   'EMPLID',            $EmplLbl,  #DW)
  do Get_Field_Information ('STOCK',   'GRANT_NBR',         $GrantNbrLbl,#DW)
  do Get_Field_Information ('STOCK',   'SHARES_EXERCISED',  $ShrExerLbl,#DW)
  do Get_Field_Information ('STOCK',   'GRANT_PRICE',       $GrantPriceLbl,#DW)
  do Get_Field_Information ('STOCK',   'EXERCISE_FMV',      $ExerFmvLbl, #DW)
  do Get_Field_Information ('STOCK',   'ST_COST_SALE_PRICE',$SalePrcLbl, #DW)
  do Get_Field_Information ('STOCK',   'GRANT_VALUE',       $GrantValLbl, #DW)
  do Get_Field_Information ('STOCK',   'ST_ORD_INCOME',     $OrdIncLbl,#DW)
  do Get_Field_Information ('STOCK',   'EXERCISE_STATUS',   $ExerStatusLbl,#DW)
  do Get_Field_Information ('STOCK',   'EXERCISE_DT',       $ExerDtLbl,#DW)
  do Get_Field_Information ('STOCK',   'GRANT_COST',        $GrantCostLbl,#DW)
  do Get_Field_Information ('STOCK',   'HI',                $HiLbl,#DW)
  do Get_Field_Information ('STOCK',   'LOW',               $LowLbl,#DW)
  do Get_Field_Information ('STOCK',   'AVG',               $AvgLbl, #DW)

  do Get_Field_Information ('STOP002', 'STOP003',           $ReportTitle, #DW)
  do Get_Field_Information ('STOP002', 'TOTAL_WEIGHT',      $TotalWeightLbl, #DW)
  do Get_Field_Information ('STOP002', 'EXER_METHOD_TRADE', $MethodTradeLbl,#DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  if $RC_Stock_Plan <> ''
    let $PlanClause    = 'and A.STOCK_PLAN = '''||$RC_Stock_Plan ||''''
  else
    let $PlanClause    =  ''
  end-if
  if $RC_Option_Type <> ''
    let $OptionClause  = 'and B.ST_OPTION_TYPE = '''||$RC_Option_Type ||''''
  else
    let $OptionClause  = ''
  end-if
  if $RC_Status <> ''
    let $StatusClause  ='and A.EXERCISE_STATUS = '''||$RC_Status ||''''
  else
    let $StatusClause  = ''
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan               -
               size  = 50                      -
               field = StockPlan:char          -
               field = SharesExercised:number  -
               field = ExerciseCost:number     -
               field = Fairvalue:number        -
               field = ExerciseValue:number    -
               field = OrdIncome:number

  create-array name  = OptionType              -
               size  = 10                      -
               field = OptionType:char         -
               field = SharesExercised:number  -
               field = ExerciseCost:number     -
               field = Fairvalue:number        -
               field = ExerciseValue:number    -
               field = OrdIncome:number

  create-array name  = ExerciseStatus          -
               size  = 10                      -
               field = Status:char             -
               field = SharesExercised:number  -
               field = ExerciseCost:number     -
               field = Fairvalue:number        -
               field = ExerciseValue:number    -
               field = OrdIncome:number

  create-array name =Value
               size =50
               field=ST_VALUE_PER_SHARE:number
               field=SHARES_VALUED:number


End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Main
! Descr:   Selects all Grant info for paramteres passed by user.
!-----------------------------------------------------------------------
Begin-Procedure Process-Main

  let #PlanCount   = 1
  let #TypeCount   = 1
  let #StatusCount = 1
  let #AvgCount    = 0
  let #LowPrice    = 0
  let #MaxPrice    = 0
  let #TotalPrice  = 0
  let $FirstPass   = 'Y'

Begin-Select

A.STOCK_PLAN
A.EXERCISE_STATUS                                          () on-break print=never before=Get-Status-Xlat
A.EMPLID
A.GRANT_NBR
A.EXERCISE_NBR
A.EXERCISE_DT
A.EXERCISE_METHOD
A.TRADE_FOR_TAXES
A.SHARES_EXERCISED
A.EXERCISE_FMV
A.ST_COST_SALE_PRICE
A.ST_ORD_INCOME
A.EXERCISE_VALUE
A.EXERCISE_COST
B.GRANT_PRICE
B.ST_OPTION_TYPE
C.NAME

  let $StockPlan       = rtrim(&a.stock_plan,' ')
  let $ExerciseStatus  = rtrim(&a.exercise_status,' ')
  let $EmplId          = rtrim(&a.emplid,' ')
  let $GrantNbr        = rtrim(&a.grant_nbr,' ')
  let #ExerciseNbr     = &a.exercise_nbr
  let $ExerciseDt      = rtrim(&a.exercise_dt,' ')
  let $ExerciseMethod  = rtrim(&a.exercise_method,' ')
  let $TradeForTaxes   = rtrim(&a.trade_for_taxes,' ')
  let #SharesExercised = &a.shares_exercised
  let #ExerciseFmv     = &a.exercise_fmv
  let #CostSalePrice   = &a.st_cost_sale_price
  let #OrdIncome       = &a.st_ord_income
  let #ExerciseValue   = &a.exercise_value
  let #ExerciseCost    = &a.exercise_cost
  let #GrantPrice      = &b.grant_price
  let $OptionType      = rtrim(&b.st_option_type,' ')
  let $Name            = rtrim(&c.name,' ')
  let $RowSelected   = 'Y'

  do Get-Status-Xlat
  do Get-Share-Value
  do Print-Details
  do Populate-Arrays
  do Get-Min-Max-GrantPrice

FROM PS_ST_GRANT_EXER   A,
     PS_ST_GRANT        B,
     PS_ST_PERSON_NAME  C
WHERE A.EMPLID           = B.EMPLID
  AND A.GRANT_NBR        = B.GRANT_NBR
  AND A.STOCK_ID         = B.STOCK_ID
  AND A.EMPLID           = C.EMPLID
  AND A.STOCK_ID         = $StockId
  AND A.EXERCISE_DT     >= $RC_FromDate
  AND A.EXERCISE_DT     <= $RC_ThruDate
  [$PlanClause]
  [$OptionClause]
  [$StatusClause]
ORDER BY C.NAME, B.ST_OPTION_TYPE, A.EXERCISE_DT, A.EXERCISE_NBR 

End-Select

  if $RowSelected = 'Y' !implies some data selected
    do Print-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Status-Xlat
!-----------------------------------------------------------------------
Begin-Procedure Get-Status-Xlat

  let $ExerciseStatus = rtrim(&a.exercise_status,' ')
  let $Fieldname      = 'EXERCISE_STATUS'
  let $Fieldvalue     = $ExerciseStatus
  do Read-Translate-Table
  let $Status         = $Xlatshortname

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Share-Value
!-----------------------------------------------------------------------
Begin-Procedure Get-Share-Value

   let #Fairvalue  = 0

BEGIN-SELECT
V.ST_VALUE_METHOD
W.ST_VALUE_PER_SHARE
W.SHARES_VALUED

  let $value_meth       = rtrim(&v.st_value_method,' ')
  let #Valuepershare    = &w.st_value_per_share
  let #Sharesvalued     = &w.shares_valued

  if $value_meth = 'M'
    do Get-Val-Dtl
  else
    let #Fairvalue = #Valuepershare * #SharesExercised
  end-if


FROM PS_ST_VALUE_TBL V,
     PS_ST_GRANT_VALUE W,
     PS_ST_GRANT_EXER X
WHERE X.EMPLID = $EmplId
  AND X.STOCK_ID = $StockId
  AND X.GRANT_NBR = $GrantNbr
  AND X.EMPLID = W.EMPLID
  AND X.STOCK_ID = W.STOCK_ID
  AND X.GRANT_NBR = W.GRANT_NBR
  AND W.ST_VALUE_REASON = 'I'
  AND V.STOCK_ID = W.STOCK_ID
  AND V.ST_VALUATION_ID = W.ST_VALUATION_ID
  AND W.ST_VALUE_EFFDT = (SELECT MAX(ST_VALUE_EFFDT) FROM PS_ST_GRANT_VALUE W1
                        WHERE W1.EMPLID = W.EMPLID AND W1.STOCK_ID = W.STOCK_ID AND W1.GRANT_NBR = W.GRANT_NBR
                        AND W1.ST_VALUE_EFFDT <= $AsOfDate)
  AND X.EXERCISE_NBR = (SELECT MAX(EXERCISE_NBR) FROM PS_ST_GRANT_EXER X1
                     WHERE X.EMPLID = X1.EMPLID AND X.STOCK_ID = X1.STOCK_ID AND X.GRANT_NBR = X1.GRANT_NBR
                     AND X1.EXERCISE_DT = X.EXERCISE_DT)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Val-Dtl
!-----------------------------------------------------------------------
Begin-Procedure Get-Val-Dtl

  let #T = 0
  let #tot_exer_share_val = 0


!Total shares exercised. Used to evaluate the no. of shares
!that have already been valued.

BEGIN-SELECT
SUM(SHARES_EXERCISED)  &y.shares_exercised

  let #tot_exer_share_val =  &y.shares_exercised
  let $reval = 'Y'

FROM PS_ST_GRANT_EXER Y
WHERE Y.EMPLID    = $EmplId
  AND Y.STOCK_ID  = $StockId
  AND Y.GRANT_NBR = $GrantNbr
  AND ((Y.EXERCISE_DT = $ExerciseDt 
  AND Y.EXERCISE_NBR < #ExerciseNbr)
  OR Y.EXERCISE_DT < $ExerciseDt)

END-SELECT



BEGIN-SELECT
K.ST_VALUE_PER_SHARE
K.SHARES_VALUED

  let #Valpershare    = &k.st_value_per_share
  let #Sharesval      = &k.shares_valued
  put &k.st_value_per_share &k.shares_valued into value(#T) ST_VALUE_PER_SHARE SHARES_VALUED
  add 1 to #T


FROM PS_ST_GRNT_VAL_DTL K
WHERE K.EMPLID = $EmplId
  AND K.STOCK_ID = $StockId
  AND K.GRANT_NBR = $GrantNbr

End-Select

  let #TotalRow  = 0
  let #Tot_shrval= 0   !Total no. of shares that needs to be valued
  let #shrval    = 0
  let #Fairvalue = 0
  let #Netval    = 0

  while #totalRow <= #T
    get #Valpershare #Sharesval from value(#totalRow) ST_VALUE_PER_SHARE SHARES_VALUED
       
       let #Tot_shrval    = #Tot_shrval + #Sharesval
       if #Tot_shrval >  #tot_exer_share_val
          if $reval = 'Y'               !if partial shares are left to be valued
            let #Sharesval =  #Tot_shrval - #tot_exer_share_val 
            let $reval = 'N'
          end-if
          let #Fairvalue = #Fairvalue + (#Valpershare * #Sharesval)
          let #shrval = #shrval + #Sharesval
         
          if #shrval > #SharesExercised
            let #Netval    =  #shrval - #SharesExercised
            let #Fairvalue =  #Fairvalue - (#Valpershare * #Netval)
            break
          end-if
          if #shrval = #SharesExercised
            break
          end-if
       end-if

     add 1 to #totalRow
  end-while

  clear-array  name=Value
  let #T = 0

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  let $FieldName  = 'PSYESNO'
  let $FieldValue = $TradeForTaxes
  do Read-Translate-Table
  let $TradeXlat  = $XlatLongName
  let $MethodTrade = $ExerciseMethod || ' / ' || $TradeXlat

  next-listing skiplines=0 need=4

  print $Name                                              (+1,001,030)
  print $GrantNbr                                          (  ,032,010)
  print $Status                                            (  ,046,014)
  print $StockPlan                                         (  ,063,015)
  print #GrantPrice                                        (  ,080,013) edit $9,999.999999
  print #SharesExercised                                   (  ,095,022) edit 999,999,999,999.999999
  print #ExerciseCost                                      (  ,119,018) edit $99,999,999,999.99
  print #Fairvalue                                         (  ,139,018) edit $99,999,999,999.99
  print #OrdIncome                                         (  ,159,018) edit $99,999,999,999.99
  print $EmplId                                            (+1,001,011)
  do Format-DateTime ($ExerciseDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,032,010)
  print $OptionType                                        (  ,046,014)
  print $MethodTrade                                       (  ,063,015)
  print #ExerciseFmv                                       (  ,080,013) edit $9,999.999999
  print #ExerciseValue                                     (  ,139,018) edit $99,999,999,999.99
  print #CostSalePrice                                     (+1,080,013) edit $9,999.999999

  let #TotalExercised = #TotalExercised + #SharesExercised
  let #TotalCost      = #TotalCost      + (#SharesExercised * #GrantPrice)
  let #TotalFairVal   = #TotalFairVal   + #Fairvalue
  let #TotalValue     = #TotalValue     + #ExerciseValue
  let #TotalOrdIncome = #TotalOrdIncome + #OrdIncome

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan   #SharesExercised #ExerciseCost #Fairvalue
#ExerciseValue #OrdIncome into StockPlan(1)   StockPlan   SharesExercised
ExerciseCost Fairvalue ExerciseValue OrdIncome
    let #PlanCount = #PlanCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $AStockPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $AStockPlan
        array-add #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome to StockPlan(#Row) SharesExercised ExerciseCost Fairvalue
ExerciseValue OrdIncome
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesExercised #ExerciseCost #Fairvalue
#ExerciseValue #OrdIncome into StockPlan(#PlanCount) StockPlan
SharesExercised ExerciseCost Fairvalue ExerciseValue OrdIncome
      let #PlanCount = #PlanCount + 1
    end-if
  end-if

  if #TypeCount = 1
    put $OptionType  #SharesExercised #ExerciseCost #Fairvalue
#ExerciseValue #OrdIncome into OptionType(1)  OptionType  SharesExercised
ExerciseCost Fairvalue ExerciseValue OrdIncome
    let #TypeCount = #TypeCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #TypeCount
      get $AOptionType from OptionType(#Row) OptionType
      if $OptionType = $AOptionType
        array-add #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome to OptionType(#Row) SharesExercised ExerciseCost Fairvalue
ExerciseValue OrdIncome
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $OptionType #SharesExercised #ExerciseCost #Fairvalue
#ExerciseValue #OrdIncome into OptionType(#TypeCount) OptionType
SharesExercised ExerciseCost Fairvalue ExerciseValue OrdIncome
      let #TypeCount = #TypeCount + 1
    end-if
  end-if

  if #StatusCount = 1
    put $Status #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome into ExerciseStatus(1) Status SharesExercised ExerciseCost
Fairvalue ExerciseValue OrdIncome
    let #StatusCount = #StatusCount + 1
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #StatusCount
      get $AStatus from ExerciseStatus(#Row) Status
      if $Status = $AStatus
        array-add #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome to ExerciseStatus(#Row) SharesExercised ExerciseCost Fairvalue
ExerciseValue OrdIncome
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $Status #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome into ExerciseStatus(#StatusCount) Status SharesExercised
ExerciseCost Fairvalue ExerciseValue OrdIncome
      let #StatusCount = #StatusCount + 1
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Min-Max-GrantPrice
! Descr:   Determines the Minimum and Maximum Grant Price and keeps
!          track of how many rows are to be used for dividing by Average
!-----------------------------------------------------------------------
Begin-Procedure Get-Min-Max-GrantPrice

  if $FirstPass = 'Y'
      let #LowPrice   = &b.grant_price
      let #MaxPrice   = &b.grant_price
      let $FirstPass = 'N'
  end-if

  let #AvgCount  = #AvgCount + 1

  if #GrantPrice > #MaxPrice
      let #MaxPrice = #GrantPrice
  else
     if #GrantPrice < #LowPrice
         let #LowPrice = #GrantPrice
     end-if
  end-if

  let #TotalPrice = #TotalPrice + #GrantPrice

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Totals
! Descr:   Prints totals for each print break section.
!-----------------------------------------------------------------------
Begin-Procedure Print-Totals

  new-page

  let #AvgPrice = round((#TotalCost  / #TotalExercised),6)
  let #AvgFmv   = round((#TotalValue / #TotalExercised),6)

  print $TotalWeightLbl                                    (+2,046,023) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgPrice                                          (  ,080,013) bold edit $9,999.999999
  print #TotalExercised                                    (  ,095,022) bold edit 999,999,999,999.999999
  print #TotalCost                                         (  ,119,018) bold edit $99,999,999,999.99
  print #TotalFairval                                      (  ,139,018) bold edit $99,999,999,999.99
  print #TotalOrdIncome                                    (  ,159,018) bold edit $99,999,999,999.99
  print #AvgFmv                                            (+1,080,013) bold edit $9,999.999999
  print #TotalValue                                        (  ,139,018) bold edit $99,999,999,999.99

  print $ExerStatusLbl                                     (+2,058,015) bold  underline
  let #Row = 1
  while #Row < #StatusCount
    get $Status #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome from ExerciseStatus(#Row) Status SharesExercised ExerciseCost
Fairvalue ExerciseValue OrdIncome
    let #AvgPrice = round((#ExerciseCost  / #SharesExercised),6)
    let #AvgFmv   = round((#ExerciseValue / #SharesExercised),6)
   
    print $Status                                          (+1,058,010) bold
    print #AvgPrice                                        (  ,080,013) bold edit $9,999.999999
    print #SharesExercised                                 (  ,095,022) bold edit 999,999,999,999.999999
    print #ExerciseCost                                    (  ,119,018) bold edit $99,999,999,999.99
    print #FairValue                                       (  ,139,018) bold edit $99,999,999,999.99
    print #OrdIncome                                       (  ,159,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,080,013) bold edit $9,999.999999
    print #ExerciseValue                                   (  ,139,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $OptionTypeLbl                                     (+1,058,012) bold underline
  let #Row = 1
  while #Row < #TypeCount
    get $OptionType #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome from OptionType(#Row) OptionType SharesExercised ExerciseCost
Fairvalue ExerciseValue OrdIncome
    let #AvgPrice = round((#ExerciseCost  / #SharesExercised),6)
    let #AvgFmv   = round((#ExerciseValue / #SharesExercised),6)
    print $OptionType                                      (+1,058,010) bold
    print #AvgPrice                                        (  ,080,013) bold edit $9,999.999999
    print #SharesExercised                                 (  ,095,022) bold edit 999,999,999,999.999999
    print #ExerciseCost                                    (  ,119,018) bold edit $99,999,999,999.99
    print #FairValue                                       (  ,139,018) bold edit $99,999,999,999.99
    print #OrdIncome                                       (  ,159,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,080,013) bold edit $9,999.999999
    print #ExerciseValue                                   (  ,139,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  print $StockPlanLbl                                      (+1,058,010) bold underline
  let #Row = 1
  while #Row < #PlanCount
    get $StockPlan #SharesExercised #ExerciseCost #Fairvalue #ExerciseValue
#OrdIncome from StockPlan(#Row) StockPlan SharesExercised ExerciseCost
Fairvalue ExerciseValue OrdIncome
    
    let #AvgPrice = round((#ExerciseCost  / #SharesExercised),6)
    let #AvgFmv   = round((#ExerciseValue / #SharesExercised),6)
    print $StockPlan                                       (+1,058,010) bold
    print #AvgPrice                                        (  ,080,013) bold edit $9,999.999999
    print #SharesExercised                                 (  ,095,022) bold edit 999,999,999,999.999999
    print #ExerciseCost                                    (  ,119,018) bold edit $99,999,999,999.99
    print #Fairvalue                                       (  ,139,018) bold edit $99,999,999,999.99
    print #OrdIncome                                       (  ,159,018) bold edit $99,999,999,999.99
    print #AvgFmv                                          (+1,080,013) bold edit $9,999.999999
    print #ExerciseValue                                   (  ,139,018) bold edit $99,999,999,999.99
    print ''                                               (+1,001,001)
    let #Row = #Row + 1
  end-while

  let #AvgGrantPrice  =  round((#TotalPrice / #AvgCount),6)

  print $GrantPriceLbl                                     (+2,058,011) bold underline
  print $HiLbl                                             (+1,063,002) bold
  print ':'                                                (  ,   ,001) bold
  print #MaxPrice                                          (  ,080,013) bold edit $9,999.999999
  print $AvgLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #AvgGrantPrice                                     (  ,080,013) bold edit $9,999.999999
  print $LowLbl                                            (+1,063,003) bold
  print ':'                                                (  ,   ,001) bold
  print #LowPrice                                          (  ,080,013) bold edit $9,999.999999

End-Procedure

!-----------------------------------------------------------------------
!SQC Include Files
!-----------------------------------------------------------------------
#include 'sqlerr.sqc'      !SQL error processing
#include 'prcsapi.sqc'     !Process Scheduler API
#include 'prcsdef.sqc'     !Update Process Open_Trans variable declaration
#include 'eoj.sqc'         !End of Report Format
#include 'curdttim.sqc'    !Get-Current-Date-Time
#include 'datetime.sqc'    !Get-Date-Time
#include 'datemath.sqc'    !Date Math Routines
#include 'reset.sqc'       !Reset printer procedure
#include 'number.sqc'      !Routines to format numbers
#include 'sqrtrans.sqc'    !Translate SQR strings to given language
#include 'getrplng.sqc'    !Get the report language
#include 'readxlat.sqc'    !Read the Translate Table for the desired values.
#include 'strunctl.sqc'    !Runcontrol
#include 'askftd.sqc'      !Prompts for from/thru date range


