!***********************************************************************
!  GPDESI09 : Beurteilung KV-Pflicht                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:36:26                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20050826 wdu05-890b2==='
!
! updates:
! wdu05 890b2: added prints for string-labels
! wdu05 890b2: modified the select to return just 1 row per emplid
 
#include 'setenv.sqc' !set environment
#define LANGUAGE_REPORT 'GER'

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Layout
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-Program

#include 'setup32.sqc'

!************************************************
begin-procedure Init-Report
#debug show '-> Init-Report '

  move 'GPDESI09' to $ReportID

  do Stdapi-Init

  if $prcs_process_instance = ''
    do Ask-Report-Parameters                !in GPDEUT03.SQC
  else
    do Get-Report-Parameters                !in GPDEUT06.SQC
    do Get-Values
  end-if

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPDEGLOB')
  do Report-Translation
  move $TITLE to $ReportTitle
  let #ReportLimitAmount=&GPDE_RUN_CNTL.GPDE_RC_LIMIT_SI09
  do Format-Number (&GPDE_RUN_CNTL.GPDE_RC_LIMIT_SI09, $ReportLimitFmtAmt, '999,999.99')
  let $Report_Cal_Run_Id = rtrim(&GPDE_RUN_CNTL.CAL_RUN_ID,' ')
  let $ReportMonthFlag   = rtrim(&GPDE_RUN_CNTL.GPDE_RC_MONTH_FLG ,' ')

  ! ----------------------------------------------------------------------------------
  let $ReportOperator  = rtrim(&GPDE_RUN_CNTL.GPDE_RC_OPERATORCD,' ')
  if ( $ReportOperator <> 'K' )
     let $ReportOperator='G'
  end-if
  ! ----------------------------------------------------------------------------------
  let $region_deu = RTRIM(&GPDE_RUN_CNTL.GPDE_SI_REGION,' ')
  if $region_deu = ''
     let $Region_Criteria = ' '
     let $Region_Criteria1 = ' '
  else
     let $Region_Criteria = ' AND SI.GPDE_SI_REGION=''' || $region_deu || ''''
     let $Region_Criteria1 = ' AND SI1.GPDE_SI_REGION=''' || $region_deu || ''''
  end-if
  ! ----------------------------------------------------------------------------------
  let $coverage_deu = RTRIM(&GPDE_RUN_CNTL.GPDE_SI_COVERAGE,' ')
  if $coverage_deu = ''
     let $Coverage_Criteria = ' '
     let $Coverage_Criteria1 = ' '
  else
     let $Coverage_Criteria = ' AND SI.GPDE_SI_COVERAGE=''' || $coverage_deu || ''''
     let $Coverage_Criteria1 = ' AND SI1.GPDE_SI_COVERAGE=''' || $coverage_deu || ''''
  end-if
  ! ----------------------------------------------------------------------------------
  ! get translates

    let $FieldName = 'GPDE_SI_REGION'
    let $FieldValue = $region_deu
    do Read-Translate-Table
    let $region_long = $XlatLongName


    let $FieldName = 'GPDE_SI_COVERAGE'
    let $FieldValue = $coverage_deu
    do Read-Translate-Table
    let $coverage_long = $XlatLongName

! ------------------------------------------
! find relevant interval for the report:
! PAY_END_DT must be given, if not --> asoftoday
!
! MONTH_FLAG = Y     Begin-Date=first of month
! MONTH_FLAG = N     Begin-Date=first of year
!
! ------------------------------------------
  let $ReportEndDate = $AsOfToday
  if ( $ReportMonthFlag = 'Y' )
     ! Monthbegin
     do Convert-to-DTU-DATE($ReportEndDate,$DTU_end_dt)
     do Dtu-Month-Begin($DTU_end_dt,$DTU_monthbegin)
     do Convert-From-DTU-DATE($DTU_monthbegin,$ReportBeginDate)
  else
     ! Yearbegin
     do Convert-to-DTU-DATE($ReportEndDate,$DTU_end_dt)
     do Dtu-parse-date($DTU_end_dt,#dtuyr,#dtumo,#dtudy)
     do dtu-format-date(#dtuyr,1,1,$DTU_yearbegin)
     do Convert-From-DTU-DATE($DTU_yearbegin,$ReportBeginDate)
  end-if

  ! format for display and print
  do Format-DateTime($ReportEndDate, $ZDate, {DEFDATE}, '', '')
  do Format-DateTime($ReportBeginDate, $ADate, {DEFDATE}, '', '')

  if ( $ReportOperator <> 'K' )
     let $ZOperator='>'
  else
     let $ZOperator='<'
  end-if

  let $kopfzeile1 =  'Vergleichswert:  Einkommen ' || $ZOperator || ' ' || $ReportLimitFmtAmt
  let $kopfzeile2 =  'Bezugszeitraum:  ' || $ADate ||  ' - ' || $ZDate
 ! $ReportFinishDate

  let $kopfzeile3 =  'Versicherungsregion: ' || $region_long
  let $kopfzeile4 =  'Versicherungsart   : ' || $coverage_long


end-procedure
!************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPDEGLOB', 'EMPLID',         $EMPLID,      #CW)
  do Get_Field_Information ('GPDEGLOB', 'PAYENTITY',      $PAYENTITY,   #CW)
  do Get_Field_Information ('GPDEGLOB', 'DEPT',           $DEPT,        #CW)
  do Get_Field_Information ('GPDEGLOB', 'NAME',           $NAME,        #CW)
  do Get_Field_Information ('GPDESI09', 'TITLE',          $TITLE,       #CW)
  do Get_Field_Information ('GPDESI09', 'SVDAYS',         $SVDAYS,      #CW)
  do Get_Field_Information ('GPDESI09', 'COMPARE',        $COMPARE,     #CW)
  do Get_Field_Information ('GPDESI09', 'INCOME',         $INCOME,      #CW)
  do Get_Field_Information ('GPDESI09', 'PERIOD',         $PERIOD,      #CW)
  do Get_Field_Information ('GPDESI09', 'REGION',         $REGION,      #CW)
  do Get_Field_Information ('GPDESI09', 'COVERAGE',       $COVERAGE,    #CW)
  do Get_Field_Information ('GPDESI09', 'FICTITIOUS',     $FICTITIOUS,  #CW)
  do Get_Field_Information ('GPDESI09', 'SIGROSS',        $SIGROSS,     #CW)
  do Get_Field_Information ('GPDESI09', 'SIANLZ',         $SIANLZ,      #CW)
  do Get_Field_Information ('GPDESI09', 'SIBONUS',        $SIBONUS,     #CW)
  do Get_Field_Information ('GPDEGLOB', 'AMOUNT_SPEC',     $AMOUNT_SPEC,#CW)
End-Procedure Report-Translation

!************************************************
begin-procedure Get-Values
let $language_cd = $PRCS_LANGUAGE_CD
end-procedure
!************************************************
begin-procedure Init-Layout
    #define col0 33
    #define col1 1
    #define col2 15
    #define col3 23
    #define col4 35
    #define col5 50
    #define cnamelength 25
    #define coltab 77
    ! wdu05 890b2: added prints for string-labels
    #define coltab2 88
    #define coltab3 112
    #define coltab4 136
    #define coltab5 160
    #define colhd1 4
    #define colhd2 60

!**columns for fixed header
end-procedure

!************************************************
begin-heading  10
#include 'stdhdg01.sqc'
print $AMOUNT_SPEC1          (+1,1)  center
print $kopfzeile1            (+1,{colhd1})
print $kopfzeile3            (,{colhd2})
print $kopfzeile2            (+1,{colhd1})
print $kopfzeile4            (,{colhd2})
print '_'                    (+1,{col1},182) FILL  bold
print $EMPLID                (+1,{col1})
print $PAYENTITY             (0,{col3})
print $DEPT                  (0,{col4})
print $NAME                  (0,{col5})
print $SVDAYS                (0,{coltab})
print $FICTITIOUS            (0,{coltab2})
print $SIGROSS               (0,{coltab3})
print $SIANLZ                (0,{coltab4})
print $SIBONUS               (0,{coltab5})

print '_'                    (+1,{col1},182) FILL  bold
end-heading
!****************************************************************************************
begin-procedure Get_Type_Options

let $Name_Type       = ''
let $Addr_Type       = ''
let $Phone_Type      = ''
let $Email_Type      = ''
let $BirthName_Type  = ''

begin-select distinct
INST.NAME_TYPE
INST.ADDRESS_TYPE
INST.PHONE_TYPE
INST.E_ADDR_TYPE
INST.GPDE_BIRTH_NM_TYPE

   let $Name_Type      = &INST.NAME_TYPE
   let $Addr_Type      = &INST.ADDRESS_TYPE
   let $Phone_Type     = &INST.PHONE_TYPE
   let $Email_Type     = &INST.E_ADDR_TYPE
   let $BirthName_Type = &INST.GPDE_BIRTH_NM_TYPE

from PS_GPDE_AL_INSTALL INST
end-select
end-procedure
!****************************************************************************************
begin-procedure Initial_Convert_Currency
do format-datetime($ReportEndDate,$LastD,{DEFCMP},'','')
let $Sticht = '2002'  || '01' ||  '01'
do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

if $LastD >= $Stichtag
 let $ToCurrency = 'EUR'
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' EURO'
else
 let $ToCurrency = 'DEM'
 let $AMOUNT_SPEC1 = $AMOUNT_SPEC || ' DM'
end-if
end-procedure
!**************************************************
begin-procedure Process-Main
show {gpdeversionstamp}

do Get_Type_Options
do Initial_Convert_Currency

begin-SELECT

PBD.EMPLID
PBD.EMPL_RCD
PBD.PAY_ENTITY
PBD.DEPTID
PDSN.NAME
PAC.GPDE_RP_SIGRSS_YTD     &SI_GROSS
PAC.GPDE_RP_SIGRSA_YTD     &SI_ANLZ
PAC.GPDE_RP_SIGRSB_YTD     &SI_BONUS
PAC.GPDE_RP_SIDAYS_YTD     &SV_DAYS
PBD.CURRENCY_CD
PBD.CUR_RT_TYPE
PBD.GPDE_ASOF_DT_EX_RT
PBD.PRD_END_DT
  let $PrdEndDT          = &PBD.PRD_END_DT
  let $Current_Curr      = &PBD.CURRENCY_CD
  let $Current_RT_Type   = &PBD.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PBD.GPDE_ASOF_DT_EX_RT

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if $Current_Curr <> $ToCurrency
     do ConvertCurrency(&SI_GROSS,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#SI_GROSS,'F')
     do ConvertCurrency(&SI_ANLZ,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#SI_ANLZ,'F')
     do ConvertCurrency(&SI_BONUS,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#SI_BONUS,'F')
  else
     let #SI_GROSS         = &SI_GROSS
     let #SI_ANLZ          = &SI_ANLZ
     let #SI_BONUS         = &SI_BONUS
  end-if

  let $EmplIdN = &PBD.EMPLID
  do Format-Number (&PBD.EMPL_RCD, $Empl_Rcd_Num, '9')
  move &PBD.EMPL_RCD to #Empl_Rcd
  let $EmplCode = rtrim($EmplIdN,' ')
  concat '-' with $EmplCode
  concat $Empl_Rcd_Num with $EmplCode
  !----------------------------------------------------------

  let $company = rtrim(&PBD.PAY_ENTITY ,' ')
  let $deptid  = rtrim(&PBD.DEPTID,' ')
  let $empname = rtrim(&PDSN.NAME,' ')

  !----------------------------------------------------------
  let #SV_DAYS   =  &SV_DAYS

  !----------------------------------------------------------


  if ( #SV_DAYS > 0 )
     let #fictive= ( #SI_GROSS / #SV_DAYS ) * 360
  else
     let #fictive = #SI_GROSS
     let #SV_DAYS = 0
  end-if

  if ((( $ReportOperator = 'G' ) and ( #fictive > #ReportLimitAmount )) or
      (( $ReportOperator = 'K' ) and ( #fictive < #ReportLimitAmount )))

     print $EmplCode  (+1,{col1})
     print $company (,{col3})
     print $deptid  (,{col4})
     print $empname (,{col5},{cnamelength})

     do Format-Number(#SV_DAYS,$temp, '999')
     print $temp (,{coltab})

     do Format-Number(#fictive,$temp, '99,999,999.99')
     print $temp (,+11)

     do Format-Number(#SI_GROSS,$temp, '99,999,999.99')
     print $temp (,+11)

     do Format-Number(#SI_ANLZ,$temp, '99,999,999.99')
     print $temp (,+11)

     do Format-Number(#SI_BONUS,$temp, '99,999,999.99')
     print $temp (,+11)

   end-if

FROM PS_GPDE_RP_0001 PBD, PS_GPDE_SI_EE_DTL SI, PS_NAMES PDSN , PS_GPDE_RP_0002 PAC
WHERE PBD.EMPLID   = SI.EMPLID
AND   PBD.EMPL_RCD = SI.EMPL_RCD
AND   PBD.EMPLID   = PDSN.EMPLID
AND (PDSN.NAME_TYPE = $Name_Type)
AND (PDSN.EFFDT =(select max(PDSN1.EFFDT) from PS_NAMES PDSN1 where
                     PDSN1.EMPLID = PDSN.EMPLID and
                     PDSN1.EFFDT <= PDSN.EFFDT))
AND   PBD.EMPLID   = PAC.EMPLID
AND   PBD.CAL_RUN_ID  = PAC.CAL_RUN_ID
AND   PBD.EMPL_RCD    = PAC.EMPL_RCD
AND   PBD.GP_PAYGROUP = PAC.GP_PAYGROUP
AND   PBD.CAL_ID      = PAC.CAL_ID
AND   PBD.RSLT_SEG_NUM = PAC.RSLT_SEG_NUM
AND   PBD.SEG_END_DT = PAC.SEG_END_DT
AND   PBD.ORIG_CAL_RUN_ID=PAC.ORIG_CAL_RUN_ID
AND   SI.GPDE_SI_TYPE='01'
AND   SI.EFFDT =   (SELECT MAX(EFFDT)
                   FROM PS_GPDE_SI_EE_DTL SI1
                   WHERE SI1.EMPLID = SI.EMPLID
                   AND SI1.EMPL_RCD = SI.EMPL_RCD
                   AND SI1.GPDE_SI_TYPE='01'
                   AND SI1.EFFDT <= PBD.GPDE_AL_CPAY_ENDDT)
!                   
! wdu05 890b2: only the latest version of the yeartodates, only one month.
! This is a workaround for now!
! The field on the page should really be PRD_END_DT instead of GPDE_AL_CPAY_ENDDT and 
! should be matched with PRD_END_DT.
! GPDE_AL_CPAY_ENDDT should be taken to find the latest version.
AND PBD.PRD_END_DT = $Ctl_Curr_Pay_End_Dt                   
!
! AND PBD.GPDE_AL_CPAY_ENDDT=( select max(PBD1.GPDE_AL_CPAY_ENDDT) 
!  FROM PS_GPDE_RP_0001 PBD1
!  WHERE   PBD1.EMPLID   = PBD.EMPLID
!  AND   PBD1.EMPL_RCD    = PBD.EMPL_RCD
!  AND   PBD1.GP_PAYGROUP = PBD.GP_PAYGROUP
!  AND   PBD1.CAL_ID      = PBD.CAL_ID
!  AND     PBD1.ORIG_CAL_RUN_ID=PBD.ORIG_CAL_RUN_ID
! )                   
[$Cal_Run_Id_Crit]
[$PayEntity_Crit]
[$Dept_Crit]
[$Coverage_Criteria]
[$Region_Criteria]

ORDER BY PBD.EMPLID,PBD.EMPL_RCD

end-SELECT

end-procedure

!****************************************************************

#include 'gpdeut03.sqc'  !ask input parameters
#include 'gpdeut04.sqc'  !get pay entity data
#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut07.sqc'  !zip
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'datemath.sqc'  !routines for date functions
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
