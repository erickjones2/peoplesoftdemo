
!***********************************************************************
!*  GPGBEOY.SQR - EOY Pre Validation Report
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  29859962                                            *
!
!***********************************************************************
! Date        Modification
! ----        ------------
! 08/2005     SQR Created.
!
!***********************************************************************
!* Constants definitions

!#define debuga

#define PageLength              177
#define Pos5                    7
#define Pos1                    5
#define Pos2                    15
#define Pos3                    32
#define Pos7                    27
#define Pos33                   50
#define Pos4                    83
#define Pos6                    73
#DEFINE POS88                   88
#define Pos8                    0
#define Pos9                    0
#define Pos10                   0
#define Pos11                   0
#define Pos12                   0
#define Pos13                   0
#define Pos14                   0
#define Pos15                   0
#define Pos16                   0
#define Pos17                   0
#define Pos18                   0
#define Pos19                   0
#define Row1                    3 !9
#define Row2                    4 !10
#define Row3                    5 ! 11
#define p7                      5
#define p15                     15
#define p17                     18
#define p20                     20
#define p35                     37
#define p23                     23
#define p24                     24
#define p28                     32
#define p35                     35
#define p41                     41
#define p45                     45
#define p50                     35
#define p46                     46
#define p66                     66
#define p67                     67
#define p81                     81
#define p60                     60
#define p68                     68
#define p60                     60
#define p65                     65
#define p72                     72
#define p75                     75
#define p79                     79
#define p80                     80
#define p82                     82
#define p91                     91
#define p77                     77
#define p105                    105
#define p110                    110
#define p95                     95
#define Header-Size             3
#define Debug_Indent_String  '    '   !* The Indent Amount for the Auto Debug.

!******************************************************************
!* Include Files
!******************************************************************
#include 'setenv.sqc'   ! Set environment
#include 'setup32.sqc'  ! Printer and page-size initialization




!******************************************************************
!***               Begin Report Section
!******************************************************************


Begin-Report

      #debuga do Show-Procedure-Name('Report')
        
        let $ReportID    = 'GPGBEOY'
        let $ReportTitle = 'End Of Year Validation  Report'

        do Init-Datetime
        do Define-Prcs-Vars
        do Get-Current-Datetime

        let $Time_Begin = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')

        do Get-Run-Control-Parms
        do Read-Run-Control($Prcs_OprID, $Prcs_Run_Cntl_ID, $RC_Payentity,$RC_TAX_YEAR, $RC_PREEOY_IND)

        let $Payentity=$RC_Payentity
        let #TAX_YEAR  =$RC_TAX_YEAR
        LET $PREEOY_IND = $RC_PREEOY_IND

        do Title-Page

        ALTER-REPORT
        HEADING     = 'MAIN'
        HEADING-SIZE    = {Header-Size}
        FOOTING     = 'MAIN'

        do Main-Fonts
        
        ! Retrieve the Tax Year Begin and End Dates
        do dtu-format-date(#TAX_YEAR, 4, 6, $dtu_start_date)
        do Convert-From-DTU-Date($dtu_start_date, $native_start_date)
        LET #TAX_YEAR_END = #TAX_YEAR + 1
        do dtu-format-date(#TAX_YEAR_END, 4, 5, $dtu_thru_date)
        do Convert-From-DTU-Date($dtu_thru_date, $native_thru_date)
        
        do Build-Dynamic-SQL($RC_Payentity, $native_start_date, $native_thru_date, $Employee_Selection, $Employee_Selection_B)

        ! Initialize NID Prefix Array
        let #NIDTOT = 0              
        do  Populate-NID-Prefix-Array($native_thru_date)
                
        
        do GET-ERDETAILS($Payentity, #TAX_YEAR, $PREEOY_IND)
        do GET-ERDETAILS2($Payentity, #TAX_YEAR,$PREEOY_IND)

        do Personal($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date)        
        do Personal-2($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date)
        do Nid-Prefix-GBR($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date)
        DO ECON($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date) 
        DO SCON($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date)
        DO NICAT($Employee_Selection, $PREEOY_IND, $native_start_date, $native_thru_date)
        do Update-Prcs-Run-Status
        do End-Of-Report

      #debuga do Remove-Procedure-Indent
End-Report



!******************************************************************
!***          Initialise Variables
!******************************************************************


Begin-Procedure Init-Variables

        Let #Columns    = 7
        Let $Header1    = 'Empl ID'
        Let $Header2    = 'Empl Rcd'
        Let $Header3    = 'Empl Name'
        Let $Header4    = 'Details'

      #debuga do Remove-Procedure-Indent
End-Procedure Init-Variables



!*=================================================================
!   Procedure:   Read-Run-Control
!   Comment  :   Procedure to read run control params
!*=================================================================


Begin-Procedure Read-Run-Control($OprID, $Run_ID,:$Payentity, :$Tax_Year, :$PREEOY_IND)

Begin-Select On-Error=Error-SQL
A.PAY_ENTITY
A.GPGB_TAX_BGN_YR
A.GPGB_PREEOY_IND

          let #TAX_YEAR = &A.GPGB_TAX_BGN_YR
          let $Payentity = rtrim(&A.PAY_ENTITY,' ')
          let $Tax_Year =   &A.GPGB_TAX_BGN_YR
          let $Tax_Year =   substr($Tax_Year,1,4)
          let $PREEOY_IND = rtrim(&A.GPGB_PREEOY_IND,' ')
          let $_Param1 = 'Pay Entity: ' || $Payentity
          let $_Param2 = 'Tax Year  : ' || $Tax_Year

          if (#TAX_YEAR =0)

                  let $_Param2 = '    '
          end-if


          let $_Operator = 'Oper ID: ' || $OprID
          let $_PNL_PAY_ENTITY = $Payentity
          let $TAX_YEAR = &A.GPGB_TAX_BGN_YR
          let $_PNL_PREEOY_IND = $PREEOY_IND

       #debuga show 'TAX YEAR ' $Tax_Year     

FROM  PS_GPGB_RNCTL_EOY A

WHERE A.OPRID       = $OprID
AND   A.RUN_CNTL_ID = $Run_ID

End-Select


      #debuga do Remove-Procedure-Indent
End-Procedure Read-Run-Control


!*=================================================================
!   Procedure:   Build-Dynamic-SQL
!   Comment  :   Build dynamic where clause
!*=================================================================

Begin-Procedure Build-Dynamic-SQL($Payentity, $Start_date, $End_date, :$Where, :$Where_B)

        let $Where = ''
        let $Start_Dt = ''
        let $End_Dt = ''

        if not isblank($payentity)

                let $Where = ' AND GRP.PAY_ENTITY= ''' || $Payentity || ''''
                let $Where_B = ' AND B.PAY_ENTITY = ''' || $Payentity || ''''
        end-if


        if not isblank($Payentity)

                let $Payentity_Where = ' AND A.PAY_ENTITY = ''' || $Payentity || ''''
        else

                let $Payentity_Where = ''
        end-if
        
        ! Below, the subquery is built which will be used by all Employee validation functions
        ! It selects employees who are active in the current tax year and belongs to the 
        ! selected pay entity (in the current tax year)
        
        let $Empl_Clause =                 ' AND B.EFFDT  = (SELECT MAX(B2.EFFDT) ' 
        let $Empl_Clause = $Empl_Clause || '                FROM  PS_JOB  B2 '
        let $Empl_Clause = $Empl_Clause || '                WHERE  B2.EMPLID = B.EMPLID '
        let $Empl_Clause = $Empl_Clause || '                AND B2.EMPL_RCD = B.EMPL_RCD '
        let $Empl_Clause = $Empl_Clause || ' AND  B2.EFFDT  <= ''' || $End_date || ''' ) '
        
        let $Empl_Clause = $Empl_Clause || ' AND B.EFFSEQ = (SELECT MAX(B3.EFFSEQ) '
        let $Empl_Clause = $Empl_Clause || '                FROM PS_JOB B3 '
        let $Empl_Clause = $Empl_Clause || '                WHERE B3.EMPLID = B.EMPLID '
        let $Empl_Clause = $Empl_Clause || '                AND B3.EMPL_RCD = B.EMPL_RCD '
        let $Empl_Clause = $Empl_Clause || '                AND B3.EFFDT= B.EFFDT) '
        let $Empl_Clause = $Empl_Clause || ' AND (B.EFFDT >= ''' || $Start_date || ''' OR B.EMPL_STATUS IN (''P'', ''A'', ''L'', ''S'')) '
        let $Empl_Clause = $Empl_Clause || ' AND   EXISTS (SELECT ''x'' '
        let $Empl_Clause = $Empl_Clause || '              FROM PS_GP_PYE_PRC_STAT GRP '
        let $Empl_Clause = $Empl_Clause || '              WHERE  GRP.EMPLID = B.EMPLID '
        let $Empl_Clause = $Empl_Clause || '                 AND GRP.EMPL_RCD = B.EMPL_RCD '

        if not isblank($Payentity)
        let $Empl_Clause = $Empl_Clause || '                 AND GRP.PAY_ENTITY= ''' || $Payentity || ''' '
        end-if

        let $Empl_Clause = $Empl_Clause || '                 AND ((GRP.PRD_BGN_DT BETWEEN ''' || $Start_date || ''' AND ''' || $End_date || ''') '
        let $Empl_Clause = $Empl_Clause || '                 OR (GRP.PRD_END_DT BETWEEN ''' || $Start_date || ''' AND ''' || $End_date || '''))) '
        
        let $Where = $Empl_Clause
        show $Where

      #debuga do Remove-Procedure-Indent
End-Procedure Build-Dynamic-SQL



!*=================================================================
!   Procedure:   Report-Heading
!   Comment  :   Prints report headers
!*=================================================================


Begin-Procedure Report-Heading($Heading, $Description)
        NEXT-LISTING NEED=2

        print ' ' (0, {Pos1})
        ALTER-PRINTER font=5 POINT-SIZE=10

        print $Heading (0, {Pos1}) bold

        do Main-Fonts

        print $Description (+1, {Pos1}) wrap 157 3

      #debuga do Remove-Procedure-Indent
End-Procedure Report-Heading




!*=================================================================
!   Procedure:  GET-ERDETAILS
!   Comment  :  Validates Employer Details- Country, Employer's 
!               Name, IR Office Number, PAYE Ref, Tax Begin Yr 
!*=================================================================

BEGIN-PROCEDURE  GET-ERDETAILS($Payentity,#TAX_YEAR,$PREEOY_IND)

        let $Detail = 'Employer details information entered in the Pay entity page has the following issues.'

        do Report-Heading('Employer Details ', $Detail)

        Let $Header1    = 'Employers Name'
        Let $Header2    = 'IR No'
        Let $Header3    = 'Payee Reference'
        Let $Header4    = 'Country'
        Let $HEADER5    = 'Tax Year'
        Let $HEADER7    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p35})  underline
        PRINT $HEADER3                  ({Row1},{p45})  underline
        PRINT $HEADER4                  ({Row1},{p66}) underline
        PRINT $HEADER5                  ({Row1},{p77})  underline
        PRINT $HEADER7                 ({Row1},{p95}) underline

        let #Count  = 0
        let #ErrCount_Total  = 0
        
Begin-Select DISTINCT  On-Error=SQL-Error
A.GPGB_ER_NAME
A.GPGB_ER_TAXNUM
A.GPGB_ER_TAX_DNAME
A.GPGB_ER_PAYE_REF
A.GPGB_ER_PERMIT_NUM
B.ADDRESS1                  &B.ADDRESS1
B.ADDRESS2                  &B.ADDRESS2
B.ADDRESS3                  &B.ADDRESS3
B.CITY
B.POSTAL                    &B.POSTAL
B.COUNTRY                   &B.COUNTRY
C.GPGB_TAX_BGN_YR           &C.GPGB_TAX_BGN_YR

          add 1 to #Count

          let #ErrCount =0
          let $msg = ''
          let $msg1 = ' '
          let #IRNO          = &A.GPGB_ER_TAXNUM
          let $payeref       = rtrim(&A.GPGB_ER_PAYE_REF,' ')
          let $employername  = &A.GPGB_ER_NAME
          let $eaddress1     = &B.ADDRESS1
          let $eaddress2     = &B.ADDRESS2
          let $eaddress3     = &B.ADDRESS3
          let $postal        = &B.POSTAL
          let $country        = &B.COUNTRY
          let $tax_bgn_yr       = &C.GPGB_TAX_BGN_YR
          let #tax_bgn_yrn       = &C.GPGB_TAX_BGN_YR
          let $msgcountry = 'Country'
          let $msgeaddress1 = 'Address 1'
          let $msgeaddress2 = 'Address 2'
          let $msgeaddress3 = 'Address 3'
          let $msgemployername = 'Name'
          let $msgIRNO = 'IRNO'
          let $msgpayeref = 'Payee Reference'
          let $msgtax_bgn_yr = 'Tax Bgn Year'
          let $msgpostal = 'Post Code '
          let  $eaddress =  $eaddress1 || $eaddress2 ||  $eaddress3 || $postal
          let  $tax_bgn_yr_temp = rtrim(substr($tax_bgn_yr,1,4),' ')
          let $employername  = rtrim(substr($employername,1,25),'')
          let  $eaddress_temp  = rtrim(substr($eaddress,1,11),' ')
            
          do Init-Message($msg, $msg1)
          do Check-Chars($country,$msg,$msg1,#ErrCount,$msgcountry)
          do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )

          do Init-Message($msg, $msg1)
          do Check-Chars($employername,$msg,$msg1,#ErrCount,$msgemployername)
          do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )

          let $char1 = to_char(#IRNO)

          do Init-Message($msg, $msg1)
          do Check-Chars($char1,$msg,$msg1,#ErrCount,$msgIRNO)

          ! do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp,$PREEOY_IND, #ErrCount )

          do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          do Init-Message($msg, $msg1)
          do Check-Chars-Payeref($payeref,$msg,$msg1,#ErrCount,$msgpayeref)
          do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )

       
          do Init-Message($msg, $msg1)
          do Check-Chars($tax_bgn_yr,$msg,$msg1,#ErrCount,$msgtax_bgn_yr)
          do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )

          ! Validate the Employer Name

          if isnull($employername) OR isblank($employername)  OR  $employername = ''

                  do Init-Message($msg, $msg1)

                  let $msg = 'Employer Name is required.'
                  let $msg1 =  'Employer Name is required.'

                  add 1 to #ErrCount

                  do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          end-if


          ! Validate the IR Office No

          if  (#IRNO  = 0) or  isnull(&A.GPGB_ER_TAXNUM)

                  do Init-Message($msg, $msg1)

                  let $msg = 'IR Office Number is required.'
                  let $msg1 =  $msg1  ||  'IR Office Number is required.'

                  add 1 to #ErrCount

                  do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          end-if


          if  #IRNO >=  1  and  #IRNO <= 999
          else

                  do Init-Message($msg, $msg1)

                  let $msg  = $msg || 'IR Office Number, Numeric Characters in the range 001-999. '
                  let $msg1 = $msg1 || 'IR Office, should be numeric in the range 001-999.'

                  add 1 to #ErrCount

                  do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          end-if


          ! Validate the Payee Reference

          if isnull($payeref) OR isblank($payeref)  OR  $payeref = ''

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||  'Payee reference is required.'
                  let $msg1 =  $msg1 ||  'Payee reference is required.'

                  add 1 to #ErrCount

                  do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          end-if


          !Validate the Tax Year -

          if  (#tax_bgn_yrn  = 0) OR  isnull($tax_bgn_yr) OR isblank($tax_bgn_yr )  OR  $tax_bgn_yr  = ''

                  do Init-Message($msg, $msg1)

                  let $msg =   $msg   || ' Tax year is required.'
                  let $msg1 =  $msg1  || ' Tax year is required.'

                  add 1 to #ErrCount

                  do  Print-Employer-Message($msg, $msg1, $employername, $char1, $payeref, $eaddress_temp, $tax_bgn_yr_temp, $country,   $PREEOY_IND, #ErrCount )
          end-if


          if #ErrCount >  0

                  add 1 to #ErrCount_Total
          end-if


FROM PS_GPGB_PYENT A ,
PS_GP_PYENT_DTL B ,
PS_GPGB_PYENT_DTL C

WHERE A.PAY_ENTITY = $Payentity
AND B.PAY_ENTITY = A.PAY_ENTITY
AND C.PAY_ENTITY = A.PAY_ENTITY
AND C.GPGB_TAX_BGN_YR = #TAX_YEAR
END-Select


        let $ee_eg = 'Example IR Office Number, Numeric Characters in the range 001-999. '

        if  #ErrCount_Total   >  3

                print $ee_eg (+1, {p7})
        end-if


        if    (#Count = 0)

                print '*** No Records  Found. Employer Details are required with Tax period specified' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total  =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        print '                       ' (+1, {Pos1})

END-PROCEDURE GET-ERDETAILS






BEGIN-PROCEDURE Print-Employer-Message(:$msg, :$msg1, :$employername, :$char1, :$payeref, :$eaddress_temp, :$tax_bgn_yr_temp, :$country,  :$PREEOY_IND, :#ErrCount )

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                Print $employername   (+1,{p7})
                Print $char1          (0,{p35})
                Print $payeref        (0,{p45})
                Print $country        (0,{p66})
                Print $tax_bgn_yr_temp     (0,{p77})

                if ($PREEOY_IND ='Y')

                        print $msg1 (,{p95},70)
                else

                        print $msg (,{p95},70)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1 (+1,{p95},70)
                        else

                                print $msg (+1,{p95},70)
                        end-if

                end-if

        end-if

END-PROCEDURE Print-Employer-Message



!*=================================================================
!   Procedure:  GET-ERDETAILS2
!   Comment  :  Validates Employer's Address
!*=================================================================


BEGIN-PROCEDURE  GET-ERDETAILS2($Payentity,#TAX_YEAR,$PREEOY_IND)
          
        let $Detail = 'Employer details information entered in the Pay entity page has the following issues.'

        do Report-Heading('Employer Address Details ', $Detail)

        Let $Header1    = 'Employers Name'
        Let $Header2    = 'Address'
        Let $Header3    = 'Address2'
        Let $Header4    = 'Address3'
        Let $Header5    = 'Address4'
        Let $HEADER7    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p24})  underline
        PRINT $HEADER7                 ({Row1},{p95}) underline

        let #Count  = 0
        let #ErrCount_Total  = 0

Begin-Select DISTINCT  On-Error=SQL-Error
A.GPGB_ER_NAME
A.GPGB_ER_TAXNUM
A.GPGB_ER_TAX_DNAME
A.GPGB_ER_PAYE_REF
A.GPGB_ER_PERMIT_NUM
B.ADDRESS1                  &B.ADDRESS1
B.ADDRESS2                  &B.ADDRESS2
B.ADDRESS3                  &B.ADDRESS3
B.ADDRESS3                  &B.ADDRESS4
B.POSTAL                    &B.POSTAL
C.GPGB_TAX_BGN_YR           &C.GPGB_TAX_BGN_YR

          add 1 to #Count

          let #ErrCount =0
          let $msg = ''
          let $msg1 = ' '
          let $employername  = &A.GPGB_ER_NAME
          let $eaddress1     = &B.ADDRESS1
          let $eaddress2     = &B.ADDRESS2
          let $eaddress3     = &B.ADDRESS3
          let $eaddress4     = &B.ADDRESS4
          let $postal        = &B.POSTAL
          let $msgeaddress1 = 'Address 1'
          let $msgeaddress2 = 'Address 2'
          let $msgeaddress3 = 'Address 3'
          let $msgeaddress4 = 'Address 4'
          let $msgpostal    = 'Post Code'
          let $tax_yr  =   &C.GPGB_TAX_BGN_YR
   
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($eaddress1,$msg,$msg1,#ErrCount,$msgeaddress1)
          do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3,$eaddress4, $postal , $PREEOY_IND , #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($eaddress2,$msg,$msg1,#ErrCount,$msgeaddress2)
          do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3,$eaddress4 , $postal , $PREEOY_IND , #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($eaddress3,$msg,$msg1,#ErrCount,$msgeaddress3)
          do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3,$eaddress4 , $postal , $PREEOY_IND , #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($eaddress4,$msg,$msg1,#ErrCount,$msgeaddress4)
          do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3,$eaddress4 , $postal , $PREEOY_IND , #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Postcode($postal,$msg,$msg1,#ErrCount,$msgpostal)
          do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3 ,$eaddress4, $postal , $PREEOY_IND , #ErrCount)
          do Init-Message($msg, $msg1)
        !  do Check-Length-Postal ($postal,$msg,$msg1,#ErrCount)
        !  do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3 ,$eaddress4, $postal , $PREEOY_IND , #ErrCount)
          
           
           let #length_postal= length(rtrim(ltrim($postal,' '),' '))  
                    if (length(rtrim(ltrim($postal,' '),' ')) > 8 )
                let $msg =  $msg   ||  'Length of postal code exceeds 8 charcaters ' 
                let $msg1 = $msg1  ||  'Length of postal code exceeds 8 charcaters '  ||', invalid char ' ||$TextToCheck 

                add 1 to #ErrCount
               do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3 ,$eaddress4, $postal , $PREEOY_IND , #ErrCount)
        End-If

         if isnull($eaddress1 ) OR isblank($eaddress1 )  OR  $eaddress1  = ''

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||  'Employers address is required.'
                  let $msg1 =  $msg1 ||  'Employers address is required.'

                  add 1 to #ErrCount
          end-if


          if #ErrCount >  0

                  add 1 to #ErrCount_Total
          end-if


FROM PS_GPGB_PYENT A ,
PS_GP_PYENT_DTL B ,
PS_GPGB_PYENT_DTL C

WHERE A.PAY_ENTITY = $Payentity
AND B.PAY_ENTITY = A.PAY_ENTITY
AND C.PAY_ENTITY = A.PAY_ENTITY
AND C.GPGB_TAX_BGN_YR = #TAX_YEAR
END-Select


        let $ee_eg = 'Example : Employers Address is required, special characters like # [  ] \ _ not allowed.'

        if  #ErrCount_Total   >  3

                print $ee_eg (+1, {p7})
        end-if


        if    (#Count = 0)

                print '*** No Records Found Employer  Address Details are required***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total  =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        print '                        ' (+1, {Pos1})
END-PROCEDURE GET-ERDETAILS2




BEGIN-PROCEDURE  Print-Employer-Message2(:$msg, :$msg1, :$employername, :$eaddress1 , :$eaddress2,:$eaddress3 ,:$eaddress4, :$postal , :$PREEOY_IND , :#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                Print $employername   (+1,{p7})
                Print $eaddress1          (0,{p24},)
                Print $eaddress2           (+1,{p24},)
                Print $eaddress3           (+1,{p24},)
                Print $eaddress4           (+1,{p24},)

                if ($PREEOY_IND ='Y')

                        print $msg1 (-3,{p95},70)
                else

                        print $msg (-3,{p95},70)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1 (+1,{p95},70)
                        else

                                print $msg (+1,{p95},70)
                        end-if

                end-if

        end-if
END-PROCEDURE Print-Employer-Message2



Begin-Procedure Get-NID($EmplID, :$NID)
        let $EmplID = RTRIM($EmplID,' ')
        let $NID = ''
BEGIN-SELECT
N.NATIONAL_ID
        LET $NID = &N.NATIONAL_ID
FROM PS_PERS_NID N
WHERE N.EMPLID = $EmplID
AND N.COUNTRY = 'GBR'
AND N.NATIONAL_ID_TYPE IN ('PR', 'PR_9')
! AND N.PRIMARY_NID = 'Y'
End-Select

End-Procedure Get-NID


!*=================================================================
!   Procedure:  Personal
!   Comment  :  Validates Employee Details like Name, Address,
!               Gender (Cross verifies occurence of SMP)
!*=================================================================


Begin-Procedure Personal($Employee_Selection, $PREEOY_IND, $Start_date, $End_date) 

        let $Detail = 'Personal Details of Employee entered in the personal data page  has the following issues'
       
        do Report-Heading('Personal Details ', $Detail)

        Let $HEADER1    = 'Empl Id'
        Let $Header9    = 'Empl Rcd'
        Let $Header2    = 'Last Name'
        Let $Header3    = 'First Name'
        Let $Header4    = 'Second Name'
        Let $Header5    = 'Gender'
        Let $HEADER6    = 'Birth Date'
        Let $HEADER8    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $Header9                  ({Row1},{p20})  underline
        PRINT $HEADER2                  ({Row1},{p28})  underline
        PRINT $HEADER3                  ({Row1},{p45})  underline
        PRINT $HEADER4                  ({Row1},{p60}) underline
        PRINT $HEADER5                  ({Row1},{p72}) underline
        PRINT $HEADER6                  ({Row1},{p80})  underline
        PRINT $HEADER8                  ({Row1},{p95}) underline

        let #Count =0
        let #ErrCount_Total  = 0

Begin-Select DISTINCT On-Error=SQL-Error
AA.NAME_PSFORMAT
A.LAST_NAME                   &A.LAST_NAME
A.FIRST_NAME                  &A.FIRST_NAME
A.MIDDLE_NAME
A.BIRTHDATE
A.SEX                         &A.SEX
A.EMPLID
D1.GPGB_NI_CATEGORY           &NI_CATEGORY
D1.EMPL_RCD       &D1.EMPL_RCD

          add 1 to #Count

          let $msg = ''
          let $msg1 = ''
          let $msg2 =''
          let #Errcount = 0
          let $Input = ''

          let $bdate =rtrim(&A.BIRTHDATE,'')

          let $EmplID = &A.EMPLID
          DO Get-NID($EmplID, $national_id)
            
          let $bdate1  = rtrim(substr($bdate,1,11), '')

          let $LAST_NAME =   &A.LAST_NAME
          let $FIRST_NAME =  &A.FIRST_NAME
          let $SEX        =  &A.SEX


          ! Name Validations
          ! Employees surname(Lastname) is mandatory - 1 char as alpha
          ! Employees Inital  is mandatory - 1 char as alpha)
          ! Employee Second name is optional if present - 1 char has to be alpha

          let $name =   &AA.NAME_PSFORMAT
          let $first_name  = rtrim(&A.FIRST_NAME,' ')
          let $middle_name = rtrim(&A.MIDDLE_NAME,' ')
          let $last_name   = rtrim(&A.LAST_NAME,' ')
          let $emplid  =   rtrim(&A.EMPLID, ' ')
          let #empl_rcd =   &D1.EMPL_RCD
   let $empl_rcds = to_char(#empl_rcd)
   let #Empl_Rcd_LEN = length(rtrim($empl_rcds,''))
   if #Empl_Rcd_LEN < 3
          let $Leading_Zeros = substr('000',1, (3 - #Empl_Rcd_LEN))
          let $empl_rcd = $Leading_Zeros || $empl_rcds
          end-if

          !  Check the special charater

          let $msgfirst_name = 'first name'
          let $msgmiddle_name = 'second name'
          let $msglast_name = 'last name'
          let $msgaddress  = 'address'
          let $msgworksno  = 'Empl id'

          do Init-Message($msg, $msg1)
          do Check-Chars-FMNames($first_name,$msg,$msg1,#ErrCount,$msgfirst_name)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          if   not (isnull($middle_name) OR isblank($middle_name)  OR  $middle_name   = '')
          do Init-Message($msg, $msg1)
          do Check-Chars-FMNames($middle_name,$msg,$msg1,#ErrCount,$msgmiddle_name)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if
          do Init-Message($msg, $msg1)
          do Check-Chars-Lastname($last_name,$msg,$msg1,#ErrCount,$msglast_name)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars($emplid,$msg,$msg1,#ErrCount,$msgworksno)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)

          ! Validate Firstname

          if isnull($first_name) OR isblank($first_name)  OR  $first_name   = ''

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||   'Employee first name required at least one char must be entered'
                  let $msg1 =  $msg1 ||   'Employee first name required at least one char must be entered.'

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if


          let  $char1n  = ltrim(rtrim(substr($first_name,1,1),' '),' ')
          Uppercase $char1n

          do Init-Message($msg, $msg1)

          let  $msg2 = 'First name first char must be alpha'

          do Alpha-Chars($char1n,$msg,$msg1,#ErrCount,$msg2)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)

          ! Validate Middle name

          let $char1mn  = ltrim(rtrim(substr($middle_name,1,1),' '),' ')

          if isnull($char1mn) OR isblank($char1mn)  OR  $char1mn   = ''
          else
                  Uppercase $char1mn

                  do Init-Message($msg, $msg1)

                  let  $msg2 = 'Second name first char must be alpha'

                  do Alpha-Chars($char1mn,$msg,$msg1,#ErrCount,$msg2)
                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if


          ! Validate Last name

          if isnull($last_name) OR isblank($last_name)  OR  $last_name  = ''

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||  'Last Name required.'
                  let $msg1 =  $msg1 ||  'Last Name required.'

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if


          let  $char1sn  = ltrim(rtrim(substr($last_name,1,1),' '),' ')
          Uppercase $char1sn

          do Init-Message($msg, $msg1)

          let  $msg2 = 'Last name first char must be alpha'

          do Alpha-Chars($char1sn,$msg,$msg1,#ErrCount,$msg2)
          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)

          ! Gender Validations

          let $gender =  rtrim(&A.SEX,' ')

          if  &A.BIRTHDATE <> ''

                  if   $gender =''

                          do Init-Message($msg, $msg1)

                          let $msg =  $msg   ||  'Gender is required.'
                          let $msg1 = $msg1 ||   'Gender is required.'

                          add 1 to #ErrCount

                          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
                  end-if

          end-if


          if  $gender = 'U' and  (isblank($national_id) or $national_id ='' or isnull($national_id))

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||  'Gender is required as national insurance number is not known.'
                  let $msg1 = $msg1 ||   'Gender is required as national insurance number is not known, invalid char ' || $gender

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
          end-if


          if $gender = 'U'

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg   ||  'Gender should be M or F'
                  let $msg1 = $msg1 ||  'Gender should be M or F, invalid char U '

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if


          let  $ni_cat  = rtrim(&NI_CATEGORY, ' ')

          if $gender = 'M'

                  if $ni_cat = 'B' or  $ni_cat = 'E' or $ni_cat = 'G' or $ni_cat = 'K'
                          or $ni_cat = 'O'

                          do Init-Message($msg, $msg1)

                          let $msg =  $msg ||   'Gender M cant have the NI category B, E, G, K, O or T'
                          let $msg1 = $msg1 ||  'Gender M cant have the NI category B, E, G, K, O or T, invalid char  ' || $ni_cat

                          add 1 to #ErrCount

                          do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
                  end-if

          end-if


          let  #SMP_total = 0

          DO Calculate-SMP($Payentity,#TAX_YEAR, $emplid , #emp_rcd ,  #SMP_total)

          let $SMP_tot =  to_char(#SMP_total)

          if #SMP_total > 0  and $gender ='M'

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg ||   'For Gender M SMP must be zero '
                  let $msg1 = $msg1 ||  'For Gender M SMP must be zero, invalid SMP value' || $SMP_tot

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
          end-if


          if #SMP_total > 0 and $gender ='U'

                  do Init-Message($msg, $msg1)

                  let $msg =  $msg ||   'Gender must be specified if SMP is greater than zero '
                  let $msg1 = $msg1 ||  'Gender must be specified if SMP is greater than zero, invalid char' || $gender ='U'

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1,$PREEOY_IND, #ErrCount)
          end-if


          ! DATE VALIDATIONS

          let #diff_months = datediff(datenow(),&A.BIRTHDATE,'MONTH')

          if #diff_months < 0

                  do Init-Message($msg, $msg1)

                  let $msg  =$msg  ||  'The Date of Birth cannot be greater than the current date.'
                  let $msg1 =$msg1 ||  'The Date of Birth cannot be greater than the current date.'

                  add 1 to #ErrCount

                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
          end-if


          let $EMPLID =&A.EMPLID
          
             if isblank(&A.BIRTHDATE) or &A.BIRTHDATE = ''

                   let #temperr     =  0    
                   let #tempErrCount = #ErrCount   ! Shuffle this variable at end of error encountered               
                   
                   if   isblank($national_id) or $national_id ='' or isnull($national_id)      
                        let  #temperr =   #temperr + 1             
                   end-if
                   
                   do  Init-Message($msg, $msg1)  
                   do  Validate-NID-first2char($national_id, $msg, $msg1, #ErrCount)
                   if not ( isblank($msg) or isblank($msg1))
                        let  #temperr =   #temperr + 1 
                   end-if    
                   
                   do  Init-Message($msg, $msg1)  
                   do  Validate-NID-char3-8($national_id, $msg, $msg1, #ErrCount) 
                   if not  ( isblank($msg) or isblank($msg1))
                       let  #temperr =   #temperr + 1  
                   end-if   
                           
                  
                   do  Init-Message($msg, $msg1)  
                   do  Validate-NID-char9($national_id, $msg, $msg1, #ErrCount)
                   if not  (isblank($msg) or isblank($msg1))
                       let  #temperr =   #temperr + 1  
                   end-if           
                     

                   if #temperr  > 0 
                       do Init-Message($msg, $msg1)
                   
                      do  CONVERT-TO-DTU-DATE($End_date,$End1_date)
                           
                      do  dtu-parse-date($End1_date,#yr,#mnth,#dy) 
                       if (#yr < 2007 )
                       let $msg  =  'Date of Birth is required, If not known provide default DOB 01-01-1901'
                       let $msg1 =  'Date of Birth is required, If not known provide default DOB 01-01-1901'
                       add 1 to #ErrCount
                       let  #ErrCount = #tempErrCount + 1 
           do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)

                        else          
                        IF (#yr >=2007 AND (isblank($national_id) or $national_id ='' or isnull($national_id)))
                              
                       let $msg  =  'Date of Birth is mandatory,if national id is blank'
                       let $msg1 =  'Date of Birth is mandatory,if national id is blank'

                       add 1 to #ErrCount
                       let  #ErrCount = #tempErrCount + 1 
           do Print-Personal-Message($msg, $msg1, $emplid , $empl_rcd,$last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
                   end-if 
           end-if 
           end-if
           end-if
           if isblank($national_id) or $national_id ='' or isnull($national_id)
                  do Init-Message($msg, $msg1)
                  let $msg  = 'Warning: National ID is temporary or does not exist.'
                  let $msg1 = $msg
                  add 1 to #ErrCount
                  do Print-Personal-Message($msg, $msg1, $emplid ,$empl_rcd, $last_name , $first_name , $middle_name, $SEX , $bdate1, $PREEOY_IND, #ErrCount)
           end-if
          
           if #ErrCount >  0
                   add 1 to #ErrCount_Total
           end-if


FROM PS_PERSONAL_DT_FST A , PS_JOB B, PS_GPGB_EE_NI D1 , PS_PERSON_NAME AA 
WHERE A.EMPLID = AA.EMPLID
  AND A.EMPLID = B.EMPLID
  AND A.EMPLID = D1.EMPLID
  AND D1.EMPL_RCD = B.EMPL_RCD
  AND D1.EFFDT = (SELECT MAX(D2.EFFDT) 
                  FROM PS_GPGB_EE_NI D2
                  WHERE D2.EMPLID = D1.EMPLID
                  AND D2.EMPL_RCD = D1.EMPL_RCD
                  AND D2.EFFDT <= $End_date)
  [$Employee_Selection]
End-Select


        let $personal_eg = 'Example employee second name first char must be alphha,'

        if #ErrCount_Total  >  3

                print $personal_eg (+1, {p7})
        end-if


        if    (#Count = 0)

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total  =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


      #debuga do Remove-Procedure-Indent

        Print '                                      '(+1, {Pos1})
End-Procedure Personal




!*=================================================================
!   Procedure:  Print-Personal-Message
!   Comment  :  Used by Personal to print Error Messages
!*=================================================================
Begin-Procedure  Print-Personal-Message(:$msg, :$msg1, :$emplid ,:$empl_rcd, :$last_name , :$first_name , :$middle_name, :$SEX ,:$bdate1,: $PREEOY_IND,:#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                print $emplid   (+1, {p7})
                print $empl_rcd (,{p20})
                print $last_name ( , {p28})          EDIT xxxxxxxxxxxx
                print $first_name (,{p45})    EDIT xxxxxxxxxxxx          
                print $middle_name (,{p60})          EDIT xxxxxxxxxxx
                print $SEX        (, {p72})
                print $bdate1      (,{p80})

                if ($PREEOY_IND ='Y')

                        print $msg1 (,{p95},70)
                else

                        print $msg (,{p95},70)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1 (+1,{p95},70)
                        else

                                print $msg (+1,{p95},70)
                        end-if

                end-if

        end-if

End-Procedure Print-Personal-Message



!*=================================================================
!   Procedure:  Personal-2
!   Comment  :  Validates Employee Address
!*=================================================================

Begin-Procedure Personal-2($Employee_Selection, $PREEOY_IND, $Start_date, $End_date)

        let $Detail = 'Personal Details of Employee entered in the personal data page  has the following issues'

        do Report-Heading('Personal Details-Address ', $Detail)

        Let $HEADER1    = 'Empl Id'
        Let $Header2    = 'Address'
        Let $HEADER8    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p24})  underline
        PRINT $HEADER8                  ({Row1},{p95}) underline

        let #Count =0
        let #ErrCount_Total  = 0

Begin-Select DISTINCT On-Error=SQL-Error
A.NAME
C.ADDRESS1                    &C.ADDRESS1
C.ADDRESS2                    &C.ADDRESS2
C.ADDRESS3                    &C.ADDRESS3
C.ADDRESS4                    &C.ADDRESS4
C.POSTAL                      &C.POSTAL 

A.EMPLID                      &A.EMPLID
D1.EMPL_RCD       &D1.EMPL_RCD

          add 1 to #Count

          let $msg = ''
          let $msg1 = ''
          let $msg2 =''
          let #Errcount = 0
          let $Input = ''
          let $Address1 = rtrim( &C.ADDRESS1,'')
          let $Address2 = rtrim( &C.ADDRESS2,'')
          let $Address3 = rtrim( &C.ADDRESS3,'')
          let $Address4 = rtrim( &C.ADDRESS4,'')
          let $postal   = rtrim( &C.POSTAL,'') 
          let $emplid  =   &A.EMPLID
          let #emp_rcd =   &D1.EMPL_RCD

          !  Check the special charater

          let $msgaddress1  = 'Address 1'
          let $msgaddress2  = 'Address 2'
          let $msgaddress3  = 'Address 3'
          let $msgaddress4  = 'Address 4'
          let $msgaddress5 = 'Postal'
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($Address1,$msg,$msg1,#ErrCount,$msgaddress1)
          do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3, $PREEOY_IND,  #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($Address2,$msg,$msg1,#ErrCount,$msgaddress2)
          do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3 ,$PREEOY_IND,  #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($Address3,$msg,$msg1,#ErrCount,$msgaddress3)
          do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3, $PREEOY_IND,  #ErrCount)
          do Init-Message($msg, $msg1)
          do Check-Chars-Address($Address4,$msg,$msg1,#ErrCount,$msgaddress4)
          do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3, $PREEOY_IND,  #ErrCount)
           do Init-Message($msg, $msg1)
          do Check-Chars-Postcode($postal,$msg,$msg1,#ErrCount,$msgaddress5)
          do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3, $PREEOY_IND,  #ErrCount)
            do Init-Message($msg, $msg1)
        !  do Check-Length-Postal ($postal,$msg,$msg1,#ErrCount)
        !  do Print-Employer-Message2($msg, $msg1, $employername, $eaddress1 , $eaddress2,$eaddress3 ,$eaddress4, $postal , $PREEOY_IND , #ErrCount)
               
           let #length_postal= length(rtrim(ltrim($postal,' '),' '))  
         
            if (length(rtrim(ltrim($postal,' '),' ')) > 8 )
                let $msg =  $msg   ||  'Length of postal code exceeds 8 charcaters ' 
                let $msg1 = $msg1  ||  'Length of postal code exceeds 8 charcaters '  ||', invalid char ' ||$TextToCheck 

                add 1 to #ErrCount
              
               do Print-Personal2-Message($msg, $msg1, $emplid ,$Address1, $Address2,$Address3, $PREEOY_IND,  #ErrCount)

        End-If




          if #ErrCount >  0

                  add 1 to #ErrCount_Total
          end-if


FROM PS_PERSONAL_DT_FST A, PS_JOB B, PS_PERSON_ADDRESS C, PS_GPGB_EE_NI D1
WHERE A.EMPLID = B.EMPLID
  AND A.EMPLID = C.EMPLID
  AND C.EFF_STATUS = 'A'
  AND A.EMPLID = D1.EMPLID
  AND D1.EMPL_RCD = B.EMPL_RCD
  AND D1.EFFDT = (SELECT MAX(D2.EFFDT) 
                  FROM PS_GPGB_EE_NI D2
                  WHERE D2.EMPLID = D1.EMPLID
                  AND D2.EMPL_RCD = D1.EMPL_RCD
                  AND D2.EFFDT <= $End_date)
  [$Employee_Selection]
End-Select


        let $personal_eg = 'Example: Employee Address is required.'

        if #ErrCount_Total  >  3

                print $personal_eg (+1, {p7})
        end-if


        if    (#Count = 0)

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total  =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


      #debuga do Remove-Procedure-Indent

        print '                                     ' (+1, {Pos1})
End-Procedure Personal-2



!*=================================================================
!   Procedure:  Print-Personal2-Message
!   Comment  :  Used to print Error Messages by Personal2
!*=================================================================

Begin-Procedure   Print-Personal2-Message(:$msg, :$msg1, :$emplid ,:$Address1, :$Address2,:$Address3,:$PREEOY_IND,   :#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                print $emplid   (+1, {p7})
                print $Address1 ( , {p24})

                if ($PREEOY_IND ='Y')

                        print $msg1 (,{p95},70)
                else

                        print $msg (,{p95},70)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1 (+1,{p95},70)
                        else

                                print $msg (+1,{p95},70)
                        end-if

                end-if

        end-if

End-Procedure Print-Personal2-Message




!*=================================================================
!   Procedure:  ECON
!   Comment  :  Validates ECON in Statutory Details Record
!               (Format and Modulus 19 check)
!*=================================================================

Begin-Procedure ECON($Employee_Selection, $PREEOY_IND, $Start_date, $End_date)

        let $Detail = 'ECONs  -The following employees have econ number entered wrongly'

        do Report-Heading('ECONs', $Detail)

        let #Count     = 0
        let #ErrCount  = 0
        let #ErrCount_Total  = 0
        let $msg  = 'Invalid Econ.'
        Let $Header1    = 'Empl Id'
        Let $Header2    = 'Empl Rcd'
        Let $Header3    = 'Company'
        Let $Header4    = 'ECON'
        Let $Header5    = 'NI Category'
        Let $HEADER6    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p24})  underline
        PRINT $HEADER3                  ({Row1},{p41})  underline
        PRINT $HEADER4                  ({Row1},{p60}) underline
        PRINT $HEADER5                  ({Row1},70) underline
        PRINT $HEADER6                  ({Row1},{p95}) underline

Begin-Select DISTINCT
D1.EMPLID
B.EMPL_RCD
B.COMPANY
D1.GPGB_ECON
D1.GPGB_SCON
D1.GPGB_NI_CATEGORY

          add 1 to #Count

          let #Errcount = 0
          let  $msg = ' '
          let  $msg1 = ' '
          let  $msg2 = ' '
          let  $emplid    =   &D1.EMPLID
          let  #empl_rcd  =   &B.EMPL_RCD
          let $empl_rcds = to_char(#Empl_Rcd)
   let #Empl_Rcd_LEN = length(rtrim($empl_rcds,''))
   if #Empl_Rcd_LEN < 3
          let $Leading_Zeros = substr('000',1, (3 - #Empl_Rcd_LEN))
          let $empl_rcd1 = $Leading_Zeros || $empl_rcds
          end-if
          !let  $empl_rcd1  =   &B.EMPL_RCD
          !let  $empl_rcd1 = substr($empl_rcd1,3,3)
          let  $company   =   &B.COMPANY
          let  $econ     =    &D1.GPGB_ECON
          let  $ni_cat   =    &D1.GPGB_NI_CATEGORY

          ! Econ must only be completed when NI Category fields contains
          ! one of the following characters - D , E, F, G, H, K,L,N ,O, S, V

          let  $ni_cat = rtrim($ni_cat,' ')
          Uppercase $ni_cat

          if $ni_cat ='D' or $ni_cat ='E' or $ni_cat ='F' or $ni_cat ='G'
                  or $ni_cat ='H' or $ni_cat ='K' or $ni_cat ='L'
                  or $ni_cat ='N' or $ni_cat ='O' or $ni_cat ='S'
                  or $ni_cat ='V'

                  if isnull($econ) OR isblank($econ)  OR  $econ   = ' '
                  else

                          let $econ1 = rtrim($econ,' ')
                          let  $st1 = substr($econ1, 1, 2)
                          LET  #E1= TO_NUMBER(substr($econ1, 2, 1))
                          LET #E2= TO_NUMBER(substr($econ1, 3, 1))
                          LET #E3= TO_NUMBER(substr($econ1, 4, 1))
                          LET #E4= TO_NUMBER(substr($econ1, 5, 1))
                          LET #E5= TO_NUMBER(substr($econ1, 6, 1))
                          LET #E6= TO_NUMBER(substr($econ1, 7, 1))
                          LET #E7= TO_NUMBER(substr($econ1, 8, 1))
                          LET #E1 = #E1 * 8
                          LET #E2 = #E2 * 7
                          LET #E3 = #E3 * 6
                          LET #E4 = #E4 * 5
                          LET #E5 = #E5 * 4
                          LET #E6 = #E6 * 3
                          LET #E7 = #E7 * 2
                          LET #ETOTAL = #E1 +#E2 +#E3 +#E4 +#E5 +#E6 + #E7
                          LET #ETOTAL1 = #ETOTAL + 37
                          LET #EDIVIDE = #ETOTAL1 % 19
                          let $st3 = substr($econ, 9, 1)
                          let #st4 = TO_NUMBER($st3)
                          let $ascisst3= ascii($st3)

                          ! modulous check

                          if (#EDIVIDE = 0 and $st3 <> 'A') or (#EDIVIDE = 1 and $st3 <> 'B') OR
                                  (#EDIVIDE = 2 and $st3 <> 'C') or (#EDIVIDE = 3 and $st3 <> 'D') OR
                                  (#EDIVIDE = 4 and $st3 <> 'E') or (#EDIVIDE = 5 and $st3 <> 'F') OR
                                  (#EDIVIDE = 6 and $st3 <> 'H') or (#EDIVIDE = 7 and $st3 <> 'J')  OR
                                  (#EDIVIDE = 8 and $st3 <> 'K') or (#EDIVIDE = 9 and $st3 <> 'L') OR
                                  (#EDIVIDE = 10 and $st3 <> 'M') or (#EDIVIDE = 11 and $st3 <> 'N') OR
                                  (#EDIVIDE = 12 and $st3 <> 'P') or (#EDIVIDE = 13 and $st3 <> 'Q') OR
                                  (#EDIVIDE = 14 and $st3 <> 'R') or (#EDIVIDE = 15 and $st3 <> 'T') OR
                                  (#EDIVIDE = 16 and $st3 <> 'W') or (#EDIVIDE = 17 and $st3 <> 'X') OR
                                  (#EDIVIDE = 18 and $st3 <> 'Y')

                                  do Init-Message($msg, $msg1)

                                  let $msg = 'Invalid Econ, modulus 19 calculation'
                                  let $msg1 ='Invalid Econ, modulus 19 calculation, invalid char ' || $st3

                                  add 1 to #ErrCount

                                  do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND,  #ErrCount)

                                  let $econ = rtrim($econ,' ')
                                  let #econ_length = length($econ)

                                  if  #econ_length = 9
                                  else

                                          do Init-Message($msg, $msg1)

                                          let $msg =  $msg || 'Econ must be 9 char alpha numeric.'
                                          let $msg1 = $msg1 ||'Econ must be 9 char alpha numeric.'

                                          add 1 to #ErrCount

                                          do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND,  #ErrCount)
                                  end-if


                                  let $firstchar  = rtrim(substr($econ,1,1), '')
                                  UpperCase $econ

                                  if $firstchar  = 'E'
                                  else

                                          do Init-Message($msg, $msg1)

                                          let $msg  =  $msg  ||  'Econ char 1 must be E.'
                                          let $msg1 =   $msg1 || 'Econ char 1 must be E, invalid char ' || $firstchar

                                          add 1 to #ErrCount

                                          do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND, #ErrCount)
                                  end-if


                                  ! Validate Character 2-8 must be numeric.

                                  let $errchar= rtrim(substr($econ,2,7),' ')

                                  do Init-Message($msg, $msg1)

                                  let $msg2 = 'Econ char 2-8 must be numeric in range 3000000-3999999'

                                  do Numeric-Chars($errchar,$msg,$msg1,#ErrCount,$msg2)
                                  do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND,  #ErrCount)

                                  ! Validate the range of the char 2-8,   3000000 - 3999999

                                  let $two_eight  =   rtrim(substr($econ,1,2),'')
                                  let #two_eightn =   to_number($two_eight)

                                  If (Length($econ1) = 9)

                                          If (($st1 <> 'E3') Or
                                                  (ascii($st3) < 65) Or
                                                  (ascii($st3) > 90 And
                                                  ascii($st3)< 97) Or
                                                  (ascii($st3) > 122))

                                                  ! print 'Econ number entered not in correct format' (0,{p77})

                                                  do Init-Message($msg, $msg1)

                                                  let $msg =  $msg   || 'Invalid Econ char 2-8 range, valid range 3000000-3999999 '
                                                  let $msg1 =  $msg1 || 'Invalid Econ char 2-8 range, valid range 3000000-3999999, invalid char' || $two_eight

                                                  add 1 to #ErrCount

                                                  do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND, #ErrCount)
                                          End-If

                                  end-if


                                  !  Validate char 9, should be alpha

                                  let  $econ  = &D1.GPGB_ECON
                                  let $char9  = substr($econ,9,1)
                                  Uppercase $char9

                                  do Init-Message($msg, $msg1)

                                  let $msg2 = 'Econ char 9 must be alpha'

                                  do Alpha-Chars($char9,$msg,$msg1,#ErrCount,$msg2)
                                  do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND,  #ErrCount)
                          end-if

                  end-if

          else

                  if not($ni_cat ='D' or $ni_cat ='E' or $ni_cat ='F' or $ni_cat ='G'
                          or $ni_cat ='H' or $ni_cat ='K' or $ni_cat ='L'
                          or $ni_cat ='N' or $ni_cat ='O' or $ni_cat ='S'
                          or $ni_cat ='V') and not( isnull($econ) OR isblank($econ)  OR  $econ   = ' ')

                          do Init-Message($msg, $msg1)

                          let $msg =   $msg  || 'Econ Must only be completed when NI Category(D, E, F, G, H, K, L, N, O, S, V)'
                          let $msg1 =  $msg1 ||'Econ Must only be completed when NI Category(D, E, F, G, H, K, L, N, O, S, V), invalid Econ ' ||$econ

                          add 1 to #ErrCount

                          do  Print-ECON-Message($msg, $msg1, $emplid , $empl_rcd1 , $company , $econ, $ni_cat , $PREEOY_IND, #ErrCount)
                  end-if

          end-if


          if #ErrCount >  0

                  add 1 to #ErrCount_Total
          end-if


FROM PS_GPGB_EE_NI D1,PS_JOB B
WHERE D1.EMPLID = B.EMPLID
  AND D1.EMPL_RCD = B.EMPL_RCD
  AND D1.EFFDT = (SELECT MAX(D2.EFFDT) 
                  FROM PS_GPGB_EE_NI D2 
                  WHERE D2.EMPLID = D1.EMPLID
                  AND D2.EMPL_RCD = D1.EMPL_RCD
                  AND D2.EFFDT <= $End_date)
  [$Employee_Selection]
End-Select


        let $econ_eg = 'Example of ECON: Conditional Must be completed if known, Char 1 must be - E Char 2-8 must be numeric'

        if #ErrCount_Total >  3

                print $econ_eg (+1, {p7})
        end-if


        if (#Count = 0)

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


      #debuga do Remove-Procedure-Indent

        Print '                                       '(+1, {Pos1})
End-Procedure  ECON



!*=================================================================
!   Procedure:  Print-ECON-Message
!   Comment  :  Used to print Error Messages by ECON
!*=================================================================

Begin-Procedure  Print-ECON-Message(:$msg, :$msg1, :$emplid , :$empl_rcd , :$company , :$econ, :$ni_cat , :$PREEOY_IND , :#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                print  $emplid            (+1, {p7})
                print  $empl_rcd          (0 ,{p24})
                print  $company           (0 ,{p41})
                print  $econ              (0 ,{p60})
                print  $ni_cat            (0 ,70)

                if ($PREEOY_IND ='Y')

                        print $msg1 (0, {p95},)
                else

                        print $msg (0, {p95},)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1      (+1,{p95},)
                        else

                                print $msg (+1,{p95},)
                        end-if

                end-if

        end-if

End-Procedure Print-ECON-Message



!*=================================================================
!   Procedure:  SCON
!   Comment  :  Validates SCON in Statutory Details Record
!               (Format and Modulus 19 check)
!*=================================================================

Begin-Procedure SCON($Employee_Selection, $PREEOY_IND, $Start_date, $End_date)

        let $Detail = ' SCONs -The following employees have scon number entered wrongly'

        do Report-Heading('SCONs   ', $Detail)

        let #Count     = 0
        let #ErrCount  = 0
        let #ErrCount_Total = 0
        let $msg  = 'Invalid SCON.'
        Let $Header1    = 'Empl Id'
        Let $Header2    = 'Empl Rcd'
        Let $Header3    = 'Company'
        Let $Header4    = 'SCON'
        Let $Header5    = 'NI Category '
        Let $HEADER6    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p24})  underline
        PRINT $HEADER3                  ({Row1},{p41})  underline
        PRINT $HEADER4                  ({Row1},{p60}) underline
        PRINT $HEADER5                  ({Row1},70) underline
        PRINT $HEADER6                  ({Row1},{p95}) underline

Begin-Select DISTINCT
D1.EMPLID
B.EMPL_RCD
B.COMPANY
D1.GPGB_ECON
D1.GPGB_SCON
D1.GPGB_NI_CATEGORY

          add 1 to #Count

          let   $msg = ''
          let   $msg1 = ''
          Let #Errcount = 0
          let  $emplid    =  &D1.EMPLID
          let  #empl_rcd  =  &B.EMPL_RCD
          let  $company   =  &B.COMPANY
          let  $scon     =   &D1.GPGB_SCON
          let  $ni_cat   =    &D1.GPGB_NI_CATEGORY
          let  $ni_cat = rtrim($ni_cat,' ')
          !let  $empl_rcd  =   &B.EMPL_RCD
   let $empl_rcds = to_char(#empl_Rcd)
   let #Empl_Rcd_LEN = length(rtrim($empl_rcds,''))
   if #Empl_Rcd_LEN < 3
          let $Leading_Zeros = substr('000',1, (3 - #Empl_Rcd_LEN))
          let $empl_rcd = $Leading_Zeros || $empl_rcds
          end-if
          !let  $empl_rcd  =  substr($empl_rcd,3,3)
          UPPERCASE $ni_cat

          if  $ni_cat ='F' or $ni_cat ='G' or $ni_cat ='H' or $ni_cat ='K' or $ni_cat ='S'or $ni_cat ='V'

                  if isnull($scon) OR isblank($scon)  OR  $scon   = ' '
                  else

                          let #scon_length = length(&D1.GPGB_SCON)
                          let  $sconr     =  rtrim(&D1.GPGB_SCON,' ')
                          let $sconl =       ltrim(&D1.GPGB_SCON,' ')
                          let #scon_length = length($sconr)
                          let $scon1 =rtrim($scon,'')
                          let  $st1 = substr($scon1, 1, 2)
                          LET #E1= TO_NUMBER(substr($scon1, 2, 1))
                          LET #E2= TO_NUMBER(substr($scon1, 3, 1))
                          LET #E3= TO_NUMBER(substr($scon1, 4, 1))
                          LET #E4= TO_NUMBER(substr($scon1, 5, 1))
                          LET #E5= TO_NUMBER(substr($scon1, 6, 1))
                          LET #E6= TO_NUMBER(substr($scon1, 7, 1))
                          LET #E7= TO_NUMBER(substr($scon1, 8, 1))
                          LET #E1 = #E1 * 8
                          LET #E2 = #E2 * 7
                          LET #E3 = #E3 * 6
                          LET #E4 = #E4 * 5
                          LET #E5 = #E5 * 4
                          LET #E6 = #E6 * 3
                          LET #E7 = #E7 * 2
                          LET #ETOTAL = #E1 +#E2 +#E3 +#E4 +#E5 +#E6 + #E7
                          LET #ETOTAL1 = #ETOTAL + 51
                          LET #EDIVIDE = #ETOTAL1 % 19
                          let $st3 = substr($scon, 9, 1)
                          let #st4 = TO_NUMBER($st3)
                          let $ascisst3= ascii($st3)

                          ! Validate  modulous check

                          if (#EDIVIDE = 0 and $st3 <> 'A') or (#EDIVIDE = 1 and $st3 <> 'B') OR
                                  (#EDIVIDE = 2 and $st3 <> 'C') or (#EDIVIDE = 3 and $st3 <> 'D') OR
                                  (#EDIVIDE = 4 and $st3 <> 'E') or (#EDIVIDE = 5 and $st3 <> 'F') OR
                                  (#EDIVIDE = 6 and $st3 <> 'H') or (#EDIVIDE = 7 and $st3 <> 'J')  OR
                                  (#EDIVIDE = 8 and $st3 <> 'K') or (#EDIVIDE = 9 and $st3 <> 'L') OR
                                  (#EDIVIDE = 10 and $st3 <> 'M') or (#EDIVIDE = 11 and $st3 <> 'N') OR
                                  (#EDIVIDE = 12 and $st3 <> 'P') or (#EDIVIDE = 13 and $st3 <> 'Q') OR
                                  (#EDIVIDE = 14 and $st3 <> 'R') or (#EDIVIDE = 15 and $st3 <> 'T') OR
                                  (#EDIVIDE = 16 and $st3 <> 'W') or (#EDIVIDE = 17 and $st3 <> 'X') OR
                                  (#EDIVIDE = 18 and $st3 <> 'Y')

                                  do Init-Message($msg, $msg1)

                                  let $msg = 'Invalid SCON modulus 19 Calculation'
                                  let $msg1 ='Invalid SCON modulus 19 Calculation, invalid char ' || $st3

                                  add 1 to #ErrCount

                                  do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND, #ErrCount)

                                  if  #scon_length = 9
                                  else

                                          do Init-Message($msg, $msg1)

                                          let $msg = 'SCON must be 9 char alpha numeric.'
                                          let $msg1 ='SCON must be 9 char alpha numeric.'

                                          add 1 to #ErrCount

                                          do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND,   #ErrCount)
                                  end-if


                                  let $firstchar  = rtrim(substr($scon,1,1), '')
                                  UpperCase $scon

                                  if $firstchar  = 'S'
                                  else

                                          do Init-Message($msg, $msg1)

                                          let   $msg =  $msg   || 'SCON char 1 must be S.'
                                          let $msg1 =   $msg1  || 'SCON char 1 must be S, invalid char '   || $firstchar

                                          add 1 to #ErrCount

                                          do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND, #ErrCount)
                                  end-if


                                  !Validate Character 2-8 must be numeric.

                                  let $char2  = rtrim(substr($scon,2,1),'')
                                  let #char2n  = ascii($char2)

                                  if  #char2n = 48    or  #char2n = 49 or #char2n = 50 or #char2n = 52 or #char2n = 56
                                  else

                                          do Init-Message($msg, $msg1)

                                          let $msg =   $msg  ||   'SCON char 2 valid values are 0, 1, 2, 4, 6 or 8 '
                                          let $msg1 =  $msg1 ||   'SCON char 2 valid values are 0, 1, 2, 4, 6 or 8, invalid char ' ||$char2

                                          add 1 to #ErrCount

                                          do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND,  #ErrCount)
                                  end-if


                                  let $errchar1     = rtrim(substr($scon,3,6),'')

                                  do Init-Message($msg, $msg1)

                                  let $msg2 = 'SCON char 3-8 must be numeric'

                                  do Numeric-Chars($errchar1,$msg,$msg1,#ErrCount,$msg2)
                                  do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND, #ErrCount)

                                  ! !!! Validate char 9, should be alpha

                                  let  $scon  = &D1.GPGB_SCON
                                  let $char9  = substr($scon,9,1)
                                  Uppercase $char9

                                  do Init-Message($msg, $msg1)

                                  let $msg2 = 'SCON char 9 must be alpha'

                                  do Alpha-Chars($char9,$msg,$msg1,#ErrCount,$msg2)
                                  do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND, #ErrCount)
                          end-if

                  end-if

          else

                  if  not($ni_cat ='F' or $ni_cat ='G' or $ni_cat ='H' or $ni_cat ='K' or $ni_cat ='S'or $ni_cat ='V')
                          and not(isnull($scon) OR isblank($scon)  OR  $scon   = ' ')

                          do Init-Message($msg, $msg1)

                          let $msg =   $msg  || 'Scon must only be completed when NI Category(F, G, H, K, S, V)'
                          let $msg1 =  $msg1 || 'Scon must only be completed when NI Category(F, G, H, K, S, V), invalid Scon ' || $scon

                          add 1 to #ErrCount

                          do  Print-SCON-Message($msg, $msg1, $emplid , $empl_rcd , $company , $scon, $ni_cat , $PREEOY_IND,  #ErrCount)
                  end-if

          end-if


          if #ErrCount >  0

                  add 1 to #ErrCount_Total
          end-if


FROM PS_GPGB_EE_NI D1, PS_JOB B
WHERE D1.EMPLID = B.EMPLID
  AND D1.EMPL_RCD = B.EMPL_RCD
  AND D1.EFFDT = (SELECT MAX(D2.EFFDT) 
                  FROM PS_GPGB_EE_NI D2
                  WHERE D2.EMPLID = D1.EMPLID
                  AND D2.EMPL_RCD = D1.EMPL_RCD
                  AND D2.EFFDT <= $End_date)
  [$Employee_Selection]
End-Select


        let $Scon_eg = 'Example of Scon: Conditional Must be completed if known.'
        let $Scon_eg =  $Scon_eg || 'Char 1 must be - S Char 2 must be one of the '
        let $Scon_eg =  $Scon_eg || 'following values 0 ,1,2,4,6,8 and char  9 should be alpha'

        if #ErrCount_Total  >  3

                print $Scon_eg (+1, {p7})
        end-if


        if    (#Count = 0)

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  ( #ErrCount_Total =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


      #debuga do Remove-Procedure-Indent
      Print '                                       '(+1, {Pos1})
End-Procedure   SCON



!*=================================================================
!   Procedure:  Print-SCON-Message
!   Comment  :  Used by SCON to print Error Messages
!*=================================================================

Begin-Procedure  Print-SCON-Message(:$msg, :$msg1, :$emplid , :$empl_rcd , :$company , :$scon, :$ni_cat , :$PREEOY_IND, :#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

                print  $emplid            (+1, {p7})
                print  $empl_rcd          (0 ,{p24})
                print  $company           (0 ,{p41})
                print  $scon                (0 ,{p60})
                print  $ni_cat              (0 ,70)

                if ($PREEOY_IND ='Y')

                        print $msg1 (0, {p95},)
                else

                        print $msg (0, {p95},)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1      (+1,{p95},)
                        else

                                print $msg (+1,{p95},)
                        end-if

                end-if

        end-if

End-Procedure Print-SCON-Message

!*=================================================================
!   Procedure:  NICAT
!   Comment  :  Validates NI Category in Statutory Details Record
!*=================================================================

Begin-Procedure NICAT($Employee_Selection, $PREEOY_IND, $Start_date, $End_date)

        let $Detail = 'NI Categories - The following employees have NI Categories with invalid characters'

        do Report-Heading('NI Categories', $Detail)

        let #Count     = 0
        let #ErrCount  = 0
        let #ErrCount_Total  = 0
        let $msg  = 'Invalid NI Category.'
        Let $Header1    = 'Empl Id'
        Let $Header2    = 'Empl Rcd'
        Let $Header3    = 'Company'
        Let $Header4    = 'NI Category'
        Let $HEADER6    = 'Error(s)'

        PRINT $HEADER1                  ({Row1},{p7})   underline
        PRINT $HEADER2                  ({Row1},{p24})  underline
        PRINT $HEADER3                  ({Row1},{p41})  underline
        PRINT $HEADER4                  ({Row1},{p60}) underline
        PRINT $HEADER6                  ({Row1},{p95}) underline

Begin-Select DISTINCT
D1.EMPLID
B.EMPL_RCD
B.COMPANY
D1.GPGB_NI_CATEGORY

          add 1 to #Count

          let #Errcount = 0
          let  $msg = ' '
          let  $msg1 = ' '
          let  $msg2 = ' '
          let  $emplid    =   &D1.EMPLID
          let  #empl_rcd  =   &B.EMPL_RCD
   let $empl_rcds = to_char(#empl_Rcd)
   let #Empl_Rcd_LEN = length(rtrim($empl_rcds,''))
   if #Empl_Rcd_LEN < 3
          let $Leading_Zeros = substr('000',1, (3 - #Empl_Rcd_LEN))
          let $empl_rcd1 = $Leading_Zeros || $empl_rcds
          end-if
          !let  $empl_rcd1  =   &B.EMPL_RCD
          !let  $empl_rcd1 = substr($empl_rcd1,3,3)
          let  $company   =   &B.COMPANY
          let  $ni_cat   =    &D1.GPGB_NI_CATEGORY

          let  $ni_cat = rtrim($ni_cat,' ')
          Uppercase $ni_cat

          #define ReplaceChars  'ABCDEHIJKLMNOPQRTVWXYZ'
          #define ConvertChars  'AAAAAAAAAAAAAAAAAAAAAA'

          Let $ErrChar =Replace(Translate(Upper($ni_cat),{ReplaceChars},{ConvertChars}),'A','')
          If $ErrChar <> ''
                do Init-Message($msg, $msg1)
                let $msg = 'Invalid NI Category. Contains invalid character(s) - ' || $ErrChar
                let $msg1 = 'Invalid NI Category. Contains invalid character(s) - ' || $ErrChar
                add 1 to #ErrCount

                print  $emplid            (+1, {p7})
                print  $empl_rcd1         (0 ,{p24})
                print  $company           (0 ,{p41})
                print  $ni_cat            (0 ,{p60})
                if ($PREEOY_IND ='Y')
                       print $msg1 (0, {p95},)
                else
                       print $msg (0, {p95},)
                end-if

          End-If


          if #ErrCount >  0
                  add 1 to #ErrCount_Total
          end-if


FROM PS_GPGB_EE_NI D1, PS_JOB B
WHERE D1.EMPLID = B.EMPLID
  AND D1.EMPL_RCD = B.EMPL_RCD
  AND D1.EFFDT = (SELECT MAX(D2.EFFDT) 
                  FROM PS_GPGB_EE_NI D2
                  WHERE D2.EMPLID = D1.EMPLID
                  AND D2.EMPL_RCD = D1.EMPL_RCD
                  AND D2.EFFDT <= $End_date)
  [$Employee_Selection]
End-Select

        let $nicat_eg = 'Allowable NI Category letters are "A", "B", "C", "D", "E","H", "I", "J", "K", "L", "M", N", "O", "P", "Q", "R", "T", "V", "W", "X", "Y" and "Z"'
        if #ErrCount_Total >  3
                print $nicat_eg (+2, {p7})
        end-if
        if (#ErrCount_Total =  0)
                print '*** No Errors Found ***' (+2, {Pos1})
        end-if

       #debuga do Remove-Procedure-Indent
       !  Print '                                       '(+1, {Pos1})
End-Procedure  NICAT



!*=================================================================
!   Procedure:  ERROR-SQL
!   Comment  :  Used for debugging
!*=================================================================

Begin-Procedure ERROR-SQL
      #debuga do Remove-Procedure-Indent
End-Procedure ERROR-SQL




!*=================================================================
!   Procedure:  Show-Procedure-Name
!   Comment  :  Used for debugging
!*=================================================================

Begin-Procedure Show-Procedure-Name($Procedure_Name)

        do Get-Current-DateTime

        LET $_Debug_Indent = $_Debug_Indent  || {Debug_Indent_String}
End-Procedure Show-Procedure-Name




!*=================================================================
!   Procedure:  Remove-Procedure-Indent
!   Comment  :  Used for debugging
!*=================================================================

Begin-Procedure Remove-Procedure-Indent LOCAL

        LET #Len = Length($_Debug_Indent) - Length({Debug_Indent_String})
        LET $_Debug_Indent = substr($_Debug_Indent,1, #Len)
End-Procedure Remove-Procedure-Indent



!*=================================================================
!   Procedure:  Nid-Prefix-GBR
!   Comment  :  Validates Employee National Insurance Numbers
!               (Format check and Prefix Validation)
!*=================================================================

Begin-Procedure Nid-Prefix-GBR($Employee_Selection, $PREEOY_IND, $Start_date, $End_date)

        let $Detail = 'ALL employees should have valid permanent NI Number for end of year reporting.'

        do Report-Heading('NI Number Prefixes ', $Detail)

        let #Count    = 0
        let #ErrCount =0
        let #ErrCount_Total = 0
        let #bottom-line=33

        DO Print-Nid-Prefix-GBR

Begin-Select DISTINCT On-Error=SQL-Error
A.EMPLID          &A.EMPLID
B.EMPL_RCD        &B.EMPL_RCD
B.COMPANY         &B.COMPANY
AA.NAME_PSFORMAT  &AA.NAME_PSFORMAT
N.COUNTRY
N.NATIONAL_ID_TYPE  &N.NATIONAL_ID_TYPE
N.NATIONAL_ID          &N.NATIONAL_ID

          let $Emplid            = &A.EMPLID
          let  #Empl_Rcd         = &B.EMPL_RCD
          let  $company          = &B.COMPANY
          let  $name             = &AA.NAME_PSFORMAT
          let  $National_id_type =  &N.NATIONAL_ID_TYPE
          let  $national_id     =   &N.NATIONAL_ID
          let $msg = ' '
          let $msg1 = ' '
          let #ErrCount =0
          !let  $empl_rcds         = &B.EMPL_RCD
          !let  $empl_rcds = to_char(#Empl_Rcd)
   let $empl_rcds = to_char(#Empl_Rcd)
   let #Empl_Rcd_LEN = length(rtrim($empl_rcds,''))
   if #Empl_Rcd_LEN < 3
          let $Leading_Zeros = substr('000',1, (3 - #Empl_Rcd_LEN))
          let $empl_rcds = $Leading_Zeros || $empl_rcds
          end-if

          !let  $empl_rcds         = substr($empl_rcds,3,3)
          let  $name_temp  =  rtrim(substr($name,1,18), '')

          add 1 to #Count

          ! Validate the designated character to emplid

          do Init-Message($msg, $msg1)

          let $msgworksno = 'Emplid'

          do Check-Chars($Emplid,$msg,$msg1,#ErrCount,$msgworksno)
          do Print-NID-Message($msg, $msg1, $emplid , $empl_rcds , $name_temp ,  $national_id , $PREEOY_IND,  #ErrCount)

          let  $national_idl =  ltrim(RTRIM($national_id,''),'')
          let #NID_Length = length($national_idl)

          if  isblank($national_idl)  or isnull($national_idl) or $national_idl = ' '
        else
                     do Init-Message($msg, $msg1)
                     do Validate-NID-first2char($national_id, $msg, $msg1, #ErrCount) 
                     do  Print-NID-Message($msg, $msg1, $emplid , $empl_rcds , $name_temp ,  $national_id , $PREEOY_IND,  #ErrCount)  
                    
                     do Init-Message($msg, $msg1)
                     do Validate-NID-char3-8($national_id, $msg, $msg1, #ErrCount) 
                     do  Print-NID-Message($msg, $msg1, $emplid , $empl_rcds , $name_temp ,  $national_id , $PREEOY_IND,  #ErrCount)    
                     
                     do  Init-Message($msg, $msg1)
                     do  Validate-NID-char9($national_id, $msg, $msg1, #ErrCount)
                     do  Print-NID-Message($msg, $msg1, $emplid , $empl_rcds , $name_temp ,  $national_id , $PREEOY_IND,  #ErrCount) 


                  if #ErrCount >  0

                          add 1 to #ErrCount_Total
                  end-if

          end-if


          if #current-line >= #bottom-line
                  New-Page

                  do Print-Nid-Prefix-GBR
          end-if


FROM PS_PERSONAL_DT_FST A, PS_PERS_NID N, PS_JOB B, PS_PERSON_NAME AA

WHERE A.EMPLID = AA.EMPLID
   
  AND A.EMPLID = N.EMPLID
  AND A.EMPLID = B.EMPLID
  AND N.NATIONAL_ID_TYPE IN('PR_9', 'PR', 'TEMP_9')
  AND N.COUNTRY='GBR'
  [$Employee_Selection]
End-Select


        let $NI_Prefix_eg = 'Example of NI Prefix: Char 1-2 alpha, Char 9 must be alpha in the range A-D, F, M, P or space.'

        if  #ErrCount_Total  >  3

                print $NI_Prefix_eg (+1, {p7})
        end-if


        if   (#Count = 0)

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


        if not (#Count = 0) and  (#ErrCount_Total =  0 )

                print '*** No Errors Found ***' (+2, {Pos1})
        end-if


      #debuga do Remove-Procedure-Indent

        Print '                                   '(+1, {Pos1})
End-Procedure Nid-Prefix-GBR



!*=================================================================
!   Procedure:  Print-NID-Message
!   Comment  :  Used by NID-PREFIX-GBR to print error messages
!*=================================================================

BEGIN-Procedure  Print-NID-Message(:$msg, :$msg1, :$emplid , :$empl_rcds , :$name_temp , :$national_id , :$PREEOY_IND, :#ErrCount)

        if  (#ErrCount =1 )  and not  ( isblank($msg) or isblank($msg1))

              print  $Emplid                   (+1, {p7})
                print  $empl_rcds               (0,{p20})
                print  $name_temp               (0,{p35})
                print  $national_id             (0 ,{p65})

                if ($PREEOY_IND ='Y')

                        print $msg1 (,{p95},70)
                else

                        print $msg (,{p95},70)
                end-if

        else

                if (#ErrCount > 0) and  not (#ErrCount =1) and not ( isblank($msg) or isblank($msg1))

                        if ($PREEOY_IND ='Y')

                                print $msg1      (+1,{p95},70)
                        else

                                print $msg (+1,{p95},70)
                        end-if

                end-if

        end-if

END-Procedure Print-NID-Message



!*=================================================================
!   Procedure:  Print-Nid-Prefix-GBR
!   Comment  :  Prints Column Names for NID Section in Report
!*=================================================================

Begin-Procedure Print-Nid-Prefix-GBR

        Let $Header1    = 'Empl Id'
        Let $Header2    = 'Empl Rcd'
        Let $Header3    = 'Empl Name'
        Let $HEADER4    = 'National Id'
        Let $HEADER5    = 'Error(s)'

        PRINT $HEADER1                  (+1,{p7})   underline
        PRINT $HEADER2                  (,{p20})  underline
        PRINT $HEADER3                  (,{p35})  underline
        PRINT $HEADER4                  (,{P65}) underline
        PRINT $HEADER5                   (0, {p95})  underline
End-Procedure Print-Nid-Prefix-GBR



!*=================================================================
!   Procedure:  Check-Chars
!   Comment  :  Procedure to check Designated Character Set
!*=================================================================

begin-procedure Check-Chars($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

        #define ReplaceChars '!!"%&''()*+,-./0123456789:;<=> ?ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Check-Chars

!*=================================================================
!   Procedure:  Check-Chars-name
!   Comment  :  Procedure to check Designated Character Set
!*=================================================================

begin-procedure Check-Chars-name($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

   
        #define ReplaceChars '''ABCDEFGHIJKLMNOPQRSTUVWXYZ-'
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Check-Chars-name






!*=================================================================
!   Procedure:  Alpha-Chars
!   Comment  :  Procedure to check Alphabets
!*=================================================================

begin-procedure Alpha-Chars($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

        #define ReplaceChars 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   || $msg2
                let $msg1 = $msg1  || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Alpha-Chars



!*=================================================================
!   Procedure:  Numeric-Chars
!   Comment  :  Procedure to check Numeric chars
!*=================================================================

begin-procedure Numeric-Chars($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

        #define ReplaceChars '0123456789'
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   || $msg2
                let $msg1 = $msg1  || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Numeric-Chars


!*=============================================================================
!   Procedure:  Check-Chars-Payeref
!   Comment  :  Procedure to check Designated Character Set for paye reference
!*=============================================================================

begin-procedure Check-Chars-Payeref($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)


        #define ReplaceChars 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz.,-/=!!%>;<+:?*(&)'''
                                 
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')
        
        If $ErrChar <> ''
       
                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar


                add 1 to #ErrCount
        End-If

end-procedure Check-Chars-Payeref

!*============================================================================
!   Procedure:  Check-Chars-Postcode
!   Comment  :  Procedure to check Designated Character Set for postal field
!*============================================================================

begin-procedure Check-Chars-Postcode($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)
       
        #define ReplaceChars 'A BCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Check-Chars-Postcode



!*========================================================================================
!   Procedure:  Check-Chars-FMNames
!   Comment  :  Procedure to check Designated Character Set for First And Middle Names
!*========================================================================================

begin-procedure  Check-Chars-FMNames($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)
           
          
        #define ReplaceChars 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-'''
                                 
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure  Check-Chars-FMNames

!*=================================================================
!   Procedure:  Check-Chars-Lastname
!   Comment  :  Procedure to check Designated Character Set
!*=================================================================

begin-procedure Check-Chars-Lastname($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

   
        #define ReplaceChars 'ABCDEFGHIJKLMNOPQRSTUVWXYZ''abcdefghijklmnop qrstuvwxyz-,(&)/.''''0123456789 '
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

             

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If

end-procedure Check-Chars-Lastname


!*===========================================================================
!   Procedure:  Check-Chars-Address
!   Comment  :  Procedure to check Designated Character Set for addresses.
!*===========================================================================

begin-procedure Check-Chars-Address($TextToCheck,:$msg,:$msg1,:#ErrCount,:$msg2)

        #define ReplaceChars '!!%&''(),''''-./*;<=>+:?A BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
                                 
        #define ConvertChars 'ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ'

        Let $ErrChar =Replace(Translate(Upper($TextToCheck),{ReplaceChars},{ConvertChars}),'Z','')

        If $ErrChar <> ''

                let $msg =  $msg   ||  'Special char not allowed in ' || $msg2
                let $msg1 = $msg1  ||  'Special char not allowed in ' || $msg2 ||', invalid char ' || $ErrChar

                add 1 to #ErrCount
        End-If


end-procedure Check-Chars-Address



!*=================================================================
!   Procedure:  Init-Message
!   Comment  :  Initialises $msg and $msg1 variables to blank
!*=================================================================
begin-procedure Init-Message(:$msg, :$msg1)
        let $msg = ''
        let $msg1 = ''
end-procedure Init-Message



!*=================================================================
!   Procedure:  Calculate-SMP
!   Comment  :  Used in SMP corss verification
!*=================================================================

begin-procedure Calculate-SMP(:$Payentity,#TAX_YEAR, $emplid , #emp_rcd ,  :#SMP_total)

begin-select
GP.PIN_CODE &PIN_CODE
GP.PIN_TYPE
GP.DESCR
SUM(GRA.CALC_RSLT_VAL) &CALC_RSLT_VAL
PYE.GPGB_SMP_STD       &GPGB_SMP_STD

          LET $PIN_CODES          = RTRIM(&PIN_CODE,' ')

          IF $PIN_CODES = 'SMP AC PAY PTD GBR'

                  LET #SMP_TEMP         = &CALC_RSLT_VAL
          END-IF


          LET #SMP_total= #SMP_TEMP * &GPGB_SMP_STD/100

FROM PS_GP_PIN GP, PS_GP_RSLT_ACUM GRA, PS_GPGB_EE_RSLT GER,PS_GPGB_PYENT_DTL PYE,
PS_GP_PYENT GPY, PS_GP_PYE_PRC_STAT GPPS where
GP.PIN_NUM = GRA.PIN_NUM
AND GRA.CAL_ID = GER.CAL_ID
AND GRA.CAL_RUN_ID = GER.CAL_RUN_ID
AND GRA.EMPL_RCD = GER.EMPL_RCD
AND GRA.EMPLID = GER.EMPLID
AND GER.PAY_ENTITY =PYE.PAY_ENTITY
AND GP.PIN_CODE = 'SMP AC PAY PTD GBR'
AND GER.PAY_ENTITY = GPY.PAY_ENTITY
AND GRA.GP_PAYGROUP = GER.GP_PAYGROUP
AND GRA.RSLT_SEG_NUM = GER.RSLT_SEG_NUM
AND GER.EMPLID = GPPS.EMPLID
AND GER.CAL_RUN_ID = GPPS.CAL_RUN_ID
AND GER.EMPL_RCD = GPPS.EMPL_RCD
AND GER.CAL_ID = GPPS.CAL_ID
AND GER.GP_PAYGROUP = GPPS.GP_PAYGROUP
AND GPPS.CALC_TYPE = 'P'
AND GER.PAY_ENTITY = $Payentity
AND GER.GPGB_TAX_PERIOD = #TAX_YEAR
AND GER.EMPLID   =  $emplid
AND GER.EMPL_RCD = #emp_rcd
GROUP BY GP.PIN_CODE, GP.PIN_TYPE, GP.DESCR,GER.GPGB_TAX_PERIOD,
GER.GP_PAYGROUP,GER.PAY_ENTITY,GER.FREQUENCY_ID, GPY.DESCR,PYE.GPGB_SMP_STD
end-select

end-procedure Calculate-SMP


!*=================================================================
!   Procedure:  Populate-NID-Prefix-Array
!   Comment  :  Initialises the NIDPREFIX array with valid
!               prefixes for the selected Tax Year. The valid 
!               prefixes are picked up from NID_PREFIX_GBR table
!*=================================================================

begin-procedure Populate-NID-Prefix-Array($End_date)

        CREATE-ARRAY    NAME  = NIDPREFIX
                SIZE  = 700
                FIELD = PREFIX:CHAR

       LET #NIDCOUNT = 0


begin-SELECT
NID.NID_PREFIX       &NID_PREFIX

        LET $NID_PREFIX    = RTRIM(&NID_PREFIX, ' ')

        PUT $NID_PREFIX
        INTO NIDPREFIX(#NIDCOUNT) PREFIX

        GET $NP FROM NIDPREFIX(#NIDCOUNT) PREFIX
        ADD 1 TO #NIDCOUNT

FROM PS_NID_PREFIX_GBR NID
WHERE NID.EFFDT = (SELECT MAX(NN.EFFDT) 
                   FROM PS_NID_PREFIX_GBR NN 
                   WHERE NID.NID_PREFIX = NN.NID_PREFIX
                   AND NN.EFFDT <= $End_date)
      AND NID.EFF_STATUS = 'A'
END-SELECT

        LET #_NIDTOT = #NIDCOUNT
    
end-procedure Populate-NID-first2char-Array


!*=================================================================
!   Procedure:  Validate-NID-first2char
!   Comment  :  Validates NID Prefix (First 2 Characters)
!*=================================================================

begin-procedure Validate-NID-first2char($national_id, :$msg, :$msg1, :#ErrCount) 
                
       Let $first2char  = rtrim(substr($national_id,1,2), '')
       UpperCase $first2char
  
        LET #VALID = 0
        LET #INDEX = 0
        LET $NP = ''
        
        WHILE #INDEX < #_NIDTOT
            GET $NP FROM NIDPREFIX(#INDEX) PREFIX
          
            IF $first2char = $NP
                  LET #VALID = 1
               BREAK
            END-IF
            
           ADD 1 TO #INDEX
        END-WHILE
        
        if #VALID = 0
            let   $msg  =   $msg   || 'NI char 1-2 must be valid alpha characters.'
            let   $msg1 =   $msg1  || 'NI char 1-2 must be valid alpha characters, invalid char ' || $first2char
            add 1 to #ErrCount
        end-if         
end-procedure Validate-NID-first2char     


!*=================================================================
!   Procedure:  Validate-NID-char3-8
!   Comment  :  Verifies that characters 3 to 8 are numeric
!*=================================================================

begin-procedure Validate-NID-char3-8($national_id, :$msg, :$msg1, :#ErrCount)
       let $char3-8     = rtrim(substr($national_id,3,6),'')
       let $msg2 = 'NI char 3-8 must be numeric'
       
       do Numeric-Chars($char3-8,$msg,$msg1,#ErrCount,$msg2)
end-procedure Validate-NID-char3-8


!*=================================================================
!   Procedure:  Validate-NID-char3-8
!   Comment  :  Verify that char 9 of NID should be alpha in the 
!               range A-D, F, M, P or space
!*=================================================================

begin-procedure  Validate-NID-char9($national_id, :$msg, :$msg1, :#ErrCount)
       let $char9  = substr($national_id,9,1)
       Uppercase $char9
       
       if   $char9 ='A' or $char9 ='B' or $char9 ='C' or $char9 ='D' or $char9 ='F'
               or $char9 ='M' or $char9 ='P' or $char9=' '
       else
               let $msg  = $msg  ||  'NI char 9 must be alpha in the range A-D, F, M, P or space.'
               let $msg1 = $msg1  || 'NI char 9 must be alpha in the range A-D, F, M, P or space, invalid char ' || $char9
 
               add 1 to #ErrCount
       end-if
       
end-procedure Validate-NID-char9

!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************

#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declaration
#include 'useprntr.sqc'  ! Init Printer
#include 'datemath.sqc'  ! Routines for date and time operations
#INCLUDE 'gprnctl1.sqc'
#INCLUDE 'gpgbeoy.sqc'

!******************************* End Of Program *******************



