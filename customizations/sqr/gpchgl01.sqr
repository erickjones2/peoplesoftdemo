!***********************************************************************
!  GPCHGL01.SQR: Accounting Voucher                                    *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2016/05/02:09:02:25                                 !
!       $Release:  HR92                                                !
!           $Bug:  22268076                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'

#define col1        1
#define col2        13
#define col3        25
#define col4        37
#define col5        49
#define col5a       55
#define col6        61
#define col7        73
#define col8        85
#define col9        145
#define col10       162

#define col_11      89
#define col_12      106

#define col_11F      109
#define col_12F      126

#define col_13      131

#define col11       136
#define col12       158

#define col_str1    120
#define col_str2    155
!************************************************************************

begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Get-Company-Address($Ctl_PayEntity,$Ctl_Account_dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
  do Process-Main
  do Reset
  do Stdapi-Term
  do Get-Log
end-Program

!************************************************************************

begin-heading 15
     
  #include 'gpchut09.sqc'
!FMB 20100910
   print $ACC_DATE                     (+1, {col1})   
   print $Ctl_Account_dt               (0, {col3})     

   print $PYENT                           (+2,{col1})
   print $Cpline1                        (0,+2)

   print $Cpdescr                (+1, {col1})
   print $BUSI_UNIT                      (0,{col11})
   print $P_BUS_U                        (0,{col12})


   print $Cpline2                      (+1, {col1})
   print $BUSI_UNIT_GL                   (0,{col11})
   print $P_BUS_UGL                      (0,{col12})

   print $Cpline3                      (+1, {col1})
   print $JOUR_TEMP                      (0,{col11})
   print $P_APP_JR                       (0,{col12})

   print $Cpline31                     (+1, {col1})

   print '_'                             (+1,{col1},180) FILL
   print $WAGE_TYPE                     (+1,{col2},11)

   print $WAGE_TYPE   (0,{col_str1})
!FMB 20100726   print &A.FOREIGN_CURRENCY  (,+1)
   print $ACCOUNT      (0,{col_str2})
    
!FMB 20100726    print &A.CURRENCY_CD  (,+1)

!FMB 20100726   print $ACC_DESCR     (+1, {col4})
!FMB 20100726   print $ACCOUNT       (0, {col8},14)
   print $ACCOUNT       (+1, {col4},14)
   print $DEBIT         (0, {col_11F},17)
   print $CREDIT        (0, {col_12F},17)
   print $DEBIT         (0, {col9},17)
   print $CREDIT        (0, {col10},17)
   print '_'            (+1,{col1},180) FILL

end-heading

!************************************************************************
begin-procedure Init-Report
  do Stdapi-Init

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters                !in Gpchut06.sqc
     do Get-Values
  end-if

! Read System Base Language
Begin-Select
P.LANGUAGE_CD 
  let $Base_Language = rtrim(ltrim(&P.LANGUAGE_CD,' '),' ')
  
  #debug show '$language_cd : ' $language_cd ' $Base_Language : ' $Base_Language
  
  ! if selected language is not supported then use base language
  if $language_cd = 'FRA' or $language_cd = 'GER' or $language_cd = 'ITA' or $language_cd = 'ENG'
  else
    let $language_cd=$Base_Language
  end-if
  
  #debug show '$language_cd : ' $language_cd ' $Base_Language : ' $Base_Language
  
FROM PSOPTIONS P
End-Select
  
  move 'GPCHGL01' to $ReportID
  move 'GPCHGL02' to $ReportID1
  do Init_Report_Translation ($ReportID1, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation ($ReportID1, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation
  let $ReportTitle = $TITLE2
  let $TITLE1      = $TITLE2
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle ' $language_cd = ' $language_

end-procedure Init-Report

!************************************************************************
begin-procedure Ask-Input

input $Start_Date     'Begin Date       : '
input $Last_Date      'End Date         : '
input $Ctl_Company    'Company          : ' type=char      maxlen=3

end-procedure Ask-Input

!*************************************************************************
begin-procedure Get-Values

    let $language_cd      = $PRCS_LANGUAGE_CD
    let $Ctl_Busi_Unit    = RTRIM(&GPCH_RUN_CNTL.BUSINESS_UNIT ,' ')
    let $Ctl_Busi_Unit_Gl = RTRIM(&GPCH_RUN_CNTL.BUSINESS_UNIT_GL,' ')
    let $Ctl_App_Jrnl_Id  = RTRIM(&GPCH_RUN_CNTL.APPL_JRNL_ID,' ')
    let $Ctl_Account_dt   = RTRIM(&GPCH_RUN_CNTL.ACCOUNTING_DT,' ')
    let $Ctl_Payentity    = RTRIM(&GPCH_RUN_CNTL.PAY_ENTITY,' ')

    let $A_Busi_Unit     = ' AND A.BUSINESS_UNIT    = ''' || $Ctl_Busi_Unit    ||  ''' '
    let $A_Busi_Unit_Gl  = ' AND A.BUSINESS_UNIT_GL = ''' || $Ctl_Busi_Unit_Gl ||  ''' '
    let $A_App_Jrnl_Id   = ' AND A.APPL_JRNL_ID     = ''' || $Ctl_App_Jrnl_Id  ||  ''' '

   if  $Ctl_Account_dt <> ''
!FMB 20100726       let $A_Account_dt    = ' AND A.POSTING_DATE    = ''' || $Ctl_Account_dt   ||  ''' '
       let $A_Account_dt    = ' AND A.POSTING_DATE   = ''' || $Ctl_Account_dt   ||  ''' '
   else
       let $A_Account_dt    = ''
   end-if

   if  $Ctl_Payentity <> ''
       let $B_Payentity     = ' AND B.PAY_ENTITY       = ''' || $Ctl_Payentity    ||  ''' ' ||
                           ' AND A.PIN_CHART1_VAL   = ''' || $Ctl_Payentity    ||  ''' '
   else
       let $B_Payentity     = ' '
   end-if

end-procedure Get-Values
!****************************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPCHGL02','BUSI_UNIT',      $BUSI_UNIT,    #CW)
  do Get_Field_Information ('GPCHGL02','BUSI_UNIT_GL',   $BUSI_UNIT_GL, #CW)
  do Get_Field_Information ('GPCHGL02','JOUR_TEMP',      $JOUR_TEMP,    #CW)
  do Get_Field_Information ('GPCHGL02','TITLE2',         $TITLE2 ,      #CW)

  do Get_Field_Information ('GPCHGL02','ACC_TYPE',   $ACC_TYPE ,  #CW)
  do Get_Field_Information ('GPCHGL02','ACC_DATE',   $ACC_DATE ,  #CW)
  do Get_Field_Information ('GPCHGL02','ACC_DESCR',  $ACC_DESCR , #CW)
  do Get_Field_Information ('GPCHGL02','ACCOUNT',    $ACCOUNT ,   #CW)
  do Get_Field_Information ('GPCHGL02','DEBIT',      $DEBIT ,     #CW)
  do Get_Field_Information ('GPCHGL02','CREDIT',     $CREDIT ,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'SUM',       $SUM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',     $PYENT     , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',  $LG_PAYENT     , #CW)

  do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',       $HD_TODATE , #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHSI06', 'MU_FUND',         $MU_FUND   ,      #CW)
  do Get_Field_Information ('GPCHSI06', 'BASE_AHV_WAGE',   $BASE_AHV_WAGE  , #CW)
  do Get_Field_Information ('GPCHGL02', 'PAY_CURRENCY',   $PAY_CURRENCY  , #CW)
  do Get_Field_Information ('GPCHGL02', 'GL_CURRENCY',   $GL_CURRENCY  , #CW)
  do Get_Field_Information ('GPCHGLOB', 'TOTAL',           $TOTAL,           #CW)
  do Get_Field_Information ('GPCHGL02', 'WAGE_TYPE',      $WAGE_TYPE,      #CW)

  let $DEBIT = rtrim($DEBIT,' ')
  let $DEBIT = lpad($DEBIT,17,' ')

  let $CREDIT = rtrim($CREDIT,' ')
  let $CREDIT = lpad($CREDIT,17,' ')

end-Procedure Report-Translation

!****************************************************************************

begin-procedure Process-Main
  do Get-Chart-Fields
  let $P_ACCT = ' '

!------------
! If $language_cd = 'FRA' or $language_cd = 'GER' or $language_cd = 'ITA'
!#define Record_ACCT_AND_PIN      PS_GL_ACCOUNT_LANG C, PS_GP_PIN_LANG P
!#define Lang_ACCT_AND_PIN        AND P.LANGUAGE_CD = $language_cd AND C.LANGUAGE_CD = $language_cd
! Else
!#define Record_ACCT_AND_PIN      PS_GL_ACCOUNT_TBL C, PS_GP_PIN P
!#define Lang_ACCT_AND_PIN        
! End-IF
!------------
  
!------------

#debug show '$language_cd : ' $language_cd ' $Base_Language : ' $Base_Language

 If $language_cd = $Base_Language 
     do Main-Select-Base
 Else
     do Main-Select-Language 
 End-If
 
!------------

! Process last row - language independent
   
   print $P_ACCT            (+1,{col4}) bold
   print $P_DESCR           (0,{col5})  bold
   print $FldDR1            (0,{col9})  bold
   print $FldCR1            (0,{col10}) bold

   do Format-Number  (#FldD,$FldD,'99,999,999,999.99mi')
   do Format-Number  (#FldC,$FldC,'99,999,999,999.99mi')

   print $TOTAL           (+2,{col_11F}) bold
   print $FldD            (0,{col9})  bold
   print $FldC            (0,{col10})  bold

end-procedure Process-Main


!****************************************************************************
begin-procedure Main-Select-Base
  
BEGIN-Select
B.PAY_ENTITY           &P_PYENT   
A.BUSINESS_UNIT        &P_BUS_U 
A.PIN_NUM              &P_PIN_NUM
P.PIN_NM               &P_PIN_NM
P.DESCR                &P_PIN_DESCR
B.REVERSE_SIGN         &B.REVERSE_SIGN=char
SUM(A.CALC_RSLT_VAL)   &A.MONETARY_AMOUNT=number
C.ACCOUNT              &P_ACCT
C.DESCR                &P_DESCR
B.GROUPING_CODE        &P_GROUPING_CODE
A.POSTING_DATE         &P_ACCOUNTING_DT

! Do Main-Logic
  let $P_PYENT    =  rtrim(&P_PYENT    ,' ')
  let $P_BUS_U    =  rtrim(&P_BUS_U  ,' ')

  let $P_SIGN     =  &B.REVERSE_SIGN
  
 If &P_ACCT <> $P_ACCT and $P_ACCT <> ' '
   
   print $P_ACCT            (+1,{col4}) bold
   print $P_DESCR           (0,{col5})  bold
   print $FldDR1            (0,{col9})  bold
   print $FldCR1            (0,{col10}) bold
   print ' '                (+1,{col1})
 End-IF
 
 let #P_MON_AMT  =  &A.MONETARY_AMOUNT
 do Format-Number  (#P_MON_AMT,$P_MON_AMT,'99,999,999,999.99mi')
 
!  print &P_PIN_NUM         (+1,{col1})
 print &P_PIN_NM          (+1,{col2})    
 print &P_PIN_DESCR       (0,{col3})
   
 if  $P_SIGN = 'N'
    print $P_MON_AMT     (0,{col_11F})
 else
    print $P_MON_AMT     (0,{col_12F})
 end-if
 
 If &P_ACCT <> $P_ACCT
   if  $P_SIGN = 'N'
      let #FldDR1     =  #P_MON_AMT
      let #FldCR1     =  0.00
   else
      let #FldCR1     =  #P_MON_AMT
      let #FldDR1     =  0.00
   end-if
 
 ELSE
   if  $P_SIGN = 'N'
      let #FldDR1     =  #FldDR1 + #P_MON_AMT
   else
      let #FldCR1     =  #FldCR1 + #P_MON_AMT
   end-if
 
 End-IF
 
 IF  $P_SIGN = 'N'
   let #FldD       =  #FldD   + #P_MON_AMT
 ELSE
   let #FldC       =  #FldC   + #P_MON_AMT
 END-IF
 
 do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
 do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')
   
 let $P_ACCT  = &P_ACCT
 let $P_DESCR = &P_DESCR

FROM PS_GP_GL_DATA A, PS_GP_GL_MAP_DTL B , PS_GL_ACCOUNT_TBL C, PS_GP_PIN P
WHERE A.BUSINESS_UNIT    = B.BUSINESS_UNIT
AND   A.GROUPING_CODE    = B.GROUPING_CODE
AND   A.ACCOUNT          = B.ACCOUNT     
AND   A.ACCOUNT          = C.ACCOUNT
AND   A.PAY_ENTITY       = B.PAY_ENTITY
AND   C.SETID            = (SELECT CD.SETID FROM PS_SET_CNTRL_REC CD
                            WHERE  CD.SETCNTRLVALUE = A.BUSINESS_UNIT
                            AND    CD.RECNAME = 'GL_ACCOUNT_TBL')
AND   C.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL CA
                            WHERE CA.SETID   = C.SETID
                            AND   CA.ACCOUNT = C.ACCOUNT
                            AND   CA.EFFDT <= $Ctl_Account_dt)
! AND   C.EFF_STATUS       = 'A'
AND   B.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GP_GL_MAP_DTL BA
                            WHERE BA.PAY_ENTITY=B.PAY_ENTITY
                            AND   BA.BUSINESS_UNIT = B.BUSINESS_UNIT
                            AND   BA.GROUPING_CODE = B.GROUPING_CODE
                            AND   BA.EFFDT <= $Ctl_Account_dt)
AND  A.PIN_NUM           = P.PIN_NUM
AND   B.PIN_CHART1_VAL   IN (A.PIN_CHART1_VAL, ' ')
AND   B.PIN_CHART2_VAL   IN (A.PIN_CHART2_VAL, ' ')
AND   B.PIN_CHART3_VAL   IN (A.PIN_CHART3_VAL, ' ')
AND   B.PIN_CHART4_VAL   IN (A.PIN_CHART4_VAL, ' ')
AND   B.PIN_CHART5_VAL   IN (A.PIN_CHART5_VAL, ' ')
AND   B.PIN_CHART6_VAL   IN (A.PIN_CHART6_VAL, ' ')
AND   B.PIN_CHART7_VAL   IN (A.PIN_CHART7_VAL, ' ')
AND   B.PIN_CHART8_VAL   IN (A.PIN_CHART8_VAL, ' ')

[$B_Payentity]
[$A_Busi_Unit]
[$A_Account_dt]

GROUP BY B.PAY_ENTITY,A.BUSINESS_UNIT,A.POSTING_DATE,C.ACCOUNT,C.DESCR,B.GROUPING_CODE,A.PIN_NUM,P.PIN_NM, P.DESCR, B.REVERSE_SIGN
ORDER BY B.PAY_ENTITY,A.BUSINESS_UNIT,A.POSTING_DATE,C.ACCOUNT,C.DESCR,B.GROUPING_CODE,P.PIN_NM, B.REVERSE_SIGN
END-Select

!  let $P_ACCT = &P_ACCT
!   do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
!   do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')

end-procedure Main-Select-Base
!****************************************************************************

begin-procedure Main-Select-Language
  
BEGIN-Select
B.PAY_ENTITY           &PL_PYENT   
A.BUSINESS_UNIT        &PL_BUS_U 
A.PIN_NUM              &PL_PIN_NUM
P.PIN_NM               &PL_PIN_NM
P.DESCR                &PL_PIN_DESCR
B.REVERSE_SIGN         &BL.REVERSE_SIGN=char
SUM(A.CALC_RSLT_VAL)   &AL.MONETARY_AMOUNT=number
C.ACCOUNT              &PL_ACCT
C.DESCR                &PL_DESCR
B.GROUPING_CODE        &PL_GROUPING_CODE
A.POSTING_DATE         &PL_ACCOUNTING_DT

 if &PL_PIN_DESCR = '' or &PL_DESCR = ''
   do Main-Select-Base
 end-if
  
!Do Main-Logic
  let $P_PYENT    =  rtrim(&PL_PYENT    ,' ')
  let $P_BUS_U    =  rtrim(&PL_BUS_U  ,' ')

  let $P_SIGN     =  &BL.REVERSE_SIGN
  
 If &PL_ACCT <> $P_ACCT and $P_ACCT <> ' '
   
   print $P_ACCT            (+1,{col4}) bold
   print $P_DESCR           (0,{col5})  bold
   print $FldDR1            (0,{col9})  bold
   print $FldCR1            (0,{col10}) bold
   print ' '                (+1,{col1})
 End-IF
 
 let #P_MON_AMT  =  &AL.MONETARY_AMOUNT
 do Format-Number  (#P_MON_AMT,$P_MON_AMT,'99,999,999,999.99mi')
 
!  print &PL_PIN_NUM         (+1,{col1})
 print &PL_PIN_NM          (+1,{col2})    
 print &PL_PIN_DESCR       (0,{col3})
   
 if  $P_SIGN = 'N'
    print $P_MON_AMT     (0,{col_11F})
 else
    print $P_MON_AMT     (0,{col_12F})
 end-if
 
 If &PL_ACCT <> $P_ACCT
   if  $P_SIGN = 'N'
      let #FldDR1     =  #P_MON_AMT
      let #FldCR1     =  0.00
   else
      let #FldCR1     =  #P_MON_AMT
      let #FldDR1     =  0.00
   end-if
 
 ELSE
   if  $P_SIGN = 'N'
      let #FldDR1     =  #FldDR1 + #P_MON_AMT
   else
      let #FldCR1     =  #FldCR1 + #P_MON_AMT
   end-if
 
 End-IF
 
 IF  $P_SIGN = 'N'
   let #FldD       =  #FldD   + #P_MON_AMT
 ELSE
   let #FldC       =  #FldC   + #P_MON_AMT
 END-IF
 
 do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
 do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')
   
 let $P_ACCT  = &PL_ACCT
 let $P_DESCR = &PL_DESCR

FROM PS_GP_GL_DATA A, PS_GP_GL_MAP_DTL B , PS_GL_ACCOUNT_LANG C, PS_GP_PIN_LANG P
WHERE A.BUSINESS_UNIT    = B.BUSINESS_UNIT
AND   A.GROUPING_CODE    = B.GROUPING_CODE
AND   A.ACCOUNT          = B.ACCOUNT
! select Language, if not base
AND P.LANGUAGE_CD        = $language_cd 
AND C.LANGUAGE_CD        = $language_cd      
AND   A.ACCOUNT          = C.ACCOUNT
AND   C.SETID            = (SELECT CD.SETID FROM PS_SET_CNTRL_REC CD
                            WHERE  CD.SETCNTRLVALUE = A.BUSINESS_UNIT
                            AND    CD.RECNAME = 'GL_ACCOUNT_TBL')
AND   C.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GL_ACCOUNT_TBL CA
                            WHERE CA.SETID   = C.SETID
                            AND   CA.ACCOUNT = C.ACCOUNT
                            AND   CA.EFFDT <= $Ctl_Account_dt)
! AND   C.EFF_STATUS       = 'A'
AND   B.EFFDT            = (SELECT MAX(EFFDT) FROM PS_GP_GL_MAP_DTL BA
                            WHERE BA.PAY_ENTITY=B.PAY_ENTITY
                            AND   BA.BUSINESS_UNIT = B.BUSINESS_UNIT
                            AND   BA.GROUPING_CODE = B.GROUPING_CODE
                            AND   BA.EFFDT <= $Ctl_Account_dt)
AND  A.PIN_NUM           = P.PIN_NUM
AND   B.PIN_CHART1_VAL   IN (A.PIN_CHART1_VAL, ' ')
AND   B.PIN_CHART2_VAL   IN (A.PIN_CHART2_VAL, ' ')
AND   B.PIN_CHART3_VAL   IN (A.PIN_CHART3_VAL, ' ')
AND   B.PIN_CHART4_VAL   IN (A.PIN_CHART4_VAL, ' ')
AND   B.PIN_CHART5_VAL   IN (A.PIN_CHART5_VAL, ' ')
AND   B.PIN_CHART6_VAL   IN (A.PIN_CHART6_VAL, ' ')
AND   B.PIN_CHART7_VAL   IN (A.PIN_CHART7_VAL, ' ')
AND   B.PIN_CHART8_VAL   IN (A.PIN_CHART8_VAL, ' ')

[$B_Payentity]
[$A_Busi_Unit]
[$A_Account_dt]

GROUP BY B.PAY_ENTITY,A.BUSINESS_UNIT,A.POSTING_DATE,C.ACCOUNT,C.DESCR,B.GROUPING_CODE,A.PIN_NUM,P.PIN_NM, P.DESCR, B.REVERSE_SIGN
ORDER BY B.PAY_ENTITY,A.BUSINESS_UNIT,A.POSTING_DATE,C.ACCOUNT,C.DESCR,B.GROUPING_CODE,P.PIN_NM, B.REVERSE_SIGN
END-Select

!  let $P_ACCT = &PL_ACCT
!   do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
!   do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')

end-procedure Main-Select-Language
!****************************************************************************

begin-procedure Main-Logic



end-procedure Main-Logic

!****************************************************************************

begin-procedure Get-Chart-Fields


Begin-Select

CF.PIN_CHART1_NUM  &P_N1
CF.PIN_CHART2_NUM  &P_N2
CF.PIN_CHART3_NUM  &P_N3
CF.PIN_CHART4_NUM  &P_N4
CF.PIN_CHART5_NUM  &P_N5
CF.PIN_CHART6_NUM  &P_N6
CF.PIN_CHART7_NUM  &P_N7
CF.PIN_CHART8_NUM  &P_N8


   let $P_N1 = rtrim(to_char(&P_N1), ' ')
   let $P_N2 = rtrim(to_char(&P_N2), ' ')
   let $P_N3 = rtrim(to_char(&P_N3), ' ')
   let $P_N4 = rtrim(to_char(&P_N4), ' ')
   let $P_N5 = rtrim(to_char(&P_N5), ' ')
   let $P_N6 = rtrim(to_char(&P_N6), ' ')
   let $P_N7 = rtrim(to_char(&P_N7), ' ')
   let $P_N8 = rtrim(to_char(&P_N8), ' ')

   let $Pin_crit = ' '




   if &P_N1 <> 0
      let $Chart_fld1   = 'A.PIN_CHART1_VAL'
      let $Chart_grp1   = 'A.PIN_CHART1_VAL,'
      let $find_end     = 'End1'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N1 || ' ) '
          do Get-Chart-Head
          let $name1 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N2 <> 0
      let $Chart_fld2  = 'A.PIN_CHART2_VAL'
      let $Chart_grp2  = 'A.PIN_CHART2_VAL,'
      let $find_end     = 'End2'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N2 || ' ) '
          do Get-Chart-Head
          let $name2 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N3 <> 0
      let $Chart_fld3  = 'A.PIN_CHART3_VAL'
      let $Chart_grp3  = 'A.PIN_CHART3_VAL,'
      let $find_end     = 'End3'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N3 || ' ) '
          do Get-Chart-Head
          let $name3 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N4 <> 0
      let $Chart_fld4  = 'A.PIN_CHART4_VAL'
      let $Chart_grp4  = 'A.PIN_CHART4_VAL,'
      let $find_end     = 'End4'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N4 || ' ) '
          do Get-Chart-Head
          let $name4 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N5 <> 0
      let $Chart_fld5  = 'A.PIN_CHART5_VAL'
      let $Chart_grp5  = 'A.PIN_CHART5_VAL,'
      let $find_end     = 'End5'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N5 || ' ) '
          do Get-Chart-Head
          let $name5 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N6 <> 0
      let $Chart_fld6  = 'A.PIN_CHART6_VAL'
      let $Chart_grp6  = 'A.PIN_CHART6_VAL,'
      let $find_end     = 'End6'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N6 || ' ) '
          do Get-Chart-Head
          let $name6 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N7 <> 0
      let $Chart_fld7  = 'A.PIN_CHART7_VAL'
      let $Chart_grp7  = 'A.PIN_CHART7_VAL,'
      let $find_end     = 'End7'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N7 || ' ) '
          do Get-Chart-Head
          let $name7 = rtrim(&CN.PIN_NM,' ')
   end-if

   if &P_N8 <> 0
      let $Chart_fld8 = 'A.PIN_CHART8_VAL'
      let $Chart_grp8 = 'A.PIN_CHART8_VAL,'
      let $find_end     = 'End8'
          let $Pin_crit = ' where CN.PIN_NUM IN ' || '(' || $P_N8 || ' ) '
          do Get-Chart-Head
          let $name8 = rtrim(&CN.PIN_NM,' ')
   end-if

   let $Chart_grp = $Chart_grp1 ||  $Chart_grp2 ||  $Chart_grp3 ||
                    $Chart_grp4 ||  $Chart_grp5 ||  $Chart_grp6 ||
                    $Chart_grp7 ||  $Chart_grp8

FROM PS_GP_GL_CHARTFLD CF
WHERE CF.PAY_ENTITY     = $Ctl_Payentity
AND   CF.BUSINESS_UNIT  = $Ctl_Busi_Unit
AND   CF.EFFDT          = (SELECT MAX(EFFDT) FROM PS_GP_GL_CHARTFLD CFA
                           WHERE  CFA.PAY_ENTITY     = CF.PAY_ENTITY
                           AND    CFA.BUSINESS_UNIT  = CF.BUSINESS_UNIT
                           AND    CFA.EFFDT         <= $Ctl_Account_dt )
End-Select

end-procedure

!****************************************************************************

begin-procedure New-Date

  new-page

end-procedure

!****************************************************************************
begin-procedure Get-Chart-Head

  let #cnt = 0
Begin-Select
CN.PIN_NM &CN.PIN_NM

FROM PS_GP_PIN_NM_VW CN
[$Pin_crit]
End-Select

end-procedure

!****************************************************************************
begin-procedure Chart-Total1

      if ($Chart_fld1 = '')
         goto chart_end1
      end-if

      do Format-Number  (#FldDR1,$FldDR1,'99,999,999,999.99mi')
      do Format-Number  (#FldCR1,$FldCR1,'99,999,999,999.99mi')

          do Format-Number  (#FldDR1F,$FldDR1F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR1F,$FldCR1F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name1                (0, +1)     bold
      print $P_CF1                (0, +1)     bold
      print $FldDR1               (0 ,{col9}) bold
      print $FldCR1               (0 ,{col10}) bold

          print $FldDR1F               (0 ,{col_11F}) bold
      print $FldCR1F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR1  = 0
      let  #FldCR1 = 0
          let  #FldDR1F  = 0
      let  #FldCR1F = 0
      chart_end1:
end-procedure Chart-Total1

!****************************************************************************
begin-procedure Chart-Total2

      if ($Chart_fld2 = '')
         goto chart_end2
      end-if

      do Format-Number  (#FldDR2,$FldDR2,'99,999,999,999.99mi')
      do Format-Number  (#FldCR2,$FldCR2,'99,999,999,999.99mi')

          do Format-Number  (#FldDR2F,$FldDR2F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR2F,$FldCR2F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name2                (0, +1)     bold
      print $P_CF2                (0, +1)     bold
      print $FldDR2               (0,{col9}) bold
      print $FldCR2               (0 ,{col10}) bold

          print $FldDR2F               (0,{col_11F}) bold
      print $FldCR2F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR2  = 0
      let  #FldCR2 = 0
          let  #FldDR2F  = 0
      let  #FldCR2F = 0

      chart_end2:

end-procedure Chart-Total2

!****************************************************************************
begin-procedure Chart-Total3

      if ($Chart_fld3 = '')
         goto chart_end3
      end-if

      do Format-Number  (#FldDR3,$FldDR3,'99,999,999,999.99mi')
      do Format-Number  (#FldCR3,$FldCR3,'99,999,999,999.99mi')

          do Format-Number  (#FldDR3F,$FldDR3F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR3F,$FldCR3F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name3                (0, +1)     bold
      print $P_CF3                (0, +1)     bold
      print $FldDR3               (0,{col9}) bold
      print $FldCR3               (0 ,{col10}) bold

          print $FldDR3F               (0,{col_11F}) bold
      print $FldCR3F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR3  = 0
      let  #FldCR3 = 0
          let  #FldDR3F  = 0
      let  #FldCR3F = 0
      chart_end3:

end-procedure Chart-Total3

!****************************************************************************
begin-procedure Chart-Total4

      if ($Chart_fld4 = '')
         goto chart_end4
      end-if

      do Format-Number  (#FldDR4,$FldDR4,'99,999,999,999.99mi')
      do Format-Number  (#FldCR4,$FldCR4,'99,999,999,999.99mi')

          do Format-Number  (#FldDR4F,$FldDR4F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR4F,$FldCR4F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name4                (0, +1)     bold
      print $P_CF4                (0, +1)     bold
      print $FldDR4               (0,{col9}) bold
      print $FldCR4               (0 ,{col10}) bold

          print $FldDR4F               (0,{col_11F}) bold
      print $FldCR4F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR4  = 0
      let  #FldCR4 = 0
          let  #FldDR4F  = 0
      let  #FldCR4F = 0
      chart_end4:

end-procedure Chart-Total4

!****************************************************************************
begin-procedure Chart-Total5

      if ($Chart_fld5 = '')
         goto chart_end5
      end-if

      do Format-Number  (#FldDR5,$FldDR5,'99,999,999,999.99mi')
      do Format-Number  (#FldCR5,$FldCR5,'99,999,999,999.99mi')

          do Format-Number  (#FldDR5F,$FldDR5F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR5F,$FldCR5F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name5                (0, +1)     bold
      print $P_CF5                (0, +1)     bold
      print $FldDR5               (0,{col9}) bold
      print $FldCR5               (0 ,{col10}) bold

          print $FldDR5F               (0,{col_11F}) bold
      print $FldCR5F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR5  = 0
      let  #FldCR5 = 0
          let  #FldDR5F  = 0
      let  #FldCR5F = 0
      chart_end5:

end-procedure Chart-Total5

!****************************************************************************
begin-procedure Chart-Total6

      if ($Chart_fld6 = '')
         goto chart_end6
      end-if

      do Format-Number  (#FldDR6,$FldDR6,'99,999,999,999.99mi')
      do Format-Number  (#FldCR6,$FldCR6,'99,999,999,999.99mi')

          do Format-Number  (#FldDR6F,$FldDR6F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR6F,$FldCR6F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name6                (0, +1)     bold
      print $P_CF6                (0, +1)     bold
      print $FldDR6               (0,{col9}) bold
      print $FldCR6               (0 ,{col10}) bold

          print $FldDR6F               (0,{col_11F}) bold
      print $FldCR6F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR6  = 0
      let  #FldCR6 = 0
          let  #FldDR6F  = 0
      let  #FldCR6F = 0
      chart_end6:

end-procedure Chart-Total6

!****************************************************************************
begin-procedure Chart-Total7

      if ($Chart_fld7 = '')
         goto chart_end7
      end-if

      do Format-Number  (#FldDR7,$FldDR7,'99,999,999,999.99mi')
      do Format-Number  (#FldCR7,$FldCR7,'99,999,999,999.99mi')

          do Format-Number  (#FldDR7F,$FldDR7F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR7F,$FldCR7F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name7                (0, +1)     bold
      print $P_CF7                (0, +1)     bold
      print $FldDR7               (0,{col9}) bold
      print $FldCR7               (0 ,{col10}) bold

          print $FldDR7F               (0,{col_11F}) bold
      print $FldCR7F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR7  = 0
      let  #FldCR7 = 0
          let  #FldDR7F  = 0
      let  #FldCR7F = 0
      chart_end7:

end-procedure Chart-Total7

!****************************************************************************
begin-procedure Chart-Total8

      if ($Chart_fld8 = '')
         goto chart_end8
      end-if

      do Format-Number  (#FldDR8,$FldDR8,'99,999,999,999.99mi')
      do Format-Number  (#FldCR8,$FldCR8,'99,999,999,999.99mi')

          do Format-Number  (#FldDR8F,$FldDR8F,'99,999,999,999.99mi')
      do Format-Number  (#FldCR8F,$FldCR8F,'99,999,999,999.99mi')

      print $SUM                  (+1,{col1}) bold
      print $name8                (0, +1)     bold
      print $P_CF8                (0, +1)     bold
      print $FldDR8               (0,{col9}) bold
      print $FldCR8               (0 ,{col10}) bold

          print $FldDR8F               (0,{col_11F}) bold
      print $FldCR8F               (0 ,{col_12F}) bold

      print ''                    (+1,0)

      let  #FldDR8  = 0
      let  #FldCR8 = 0

          let  #FldDR8F  = 0
      let  #FldCR8F = 0
      chart_end8:

end-procedure Chart-Total8
!************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Eng_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHGL02
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Ger_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHGL02
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Ita_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHGL02
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHGL02'
               do Get_Fra_GPCHGL02
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHGL02
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!**********************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut04.sqc'  !get payentity address
#include 'gpchut06.sqc'  !get values mask routines
#include 'gpchut07.sqc'  !Log Output Selection
#include 'readxlat.sqc'    !routine to get values from xlattbl
#include 'stdapi.sqc'      !routines to update run status
#include 'reset.sqc'       !reset printer procedure
#include 'curdttim.sqc'    !get-current-datetime procedure
#include 'datetime.sqc'    !routines for date and time formatting
#include 'datemath.sqc'    !function for date-calculation
#include 'validdt.sqc'     !validate date routine
#include 'number.sqc'      !routines to format numbers
#include 'sqrtrans.sqc'    !sqr strings table procedures
#include 'gpchgl2s.sqc'    ! Get Strings Values for GPCHGL02
#include 'gpchglbs.sqc'    ! Get Strings Values for GPCHGLOB