!***********************************************************************
!  TAX810DC:  Qtrly Wage List - Tape - District of Columbia            *
!                                                                      *
!             NOTE: "#IFDEF TAXTEST" in main SELECT is used for        *
!                   testing this report against DEMO database          *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2015/08/30:22:13:34                                 !
!       $Release:  HR92                                                !
!      $Revision:  104                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#include 'setup31.sqc' !Printer and page-size initialization
#include 'usarpt.sqc'  ! NID_COUNTRY defined

begin-report
  do Init-Report
  do Init-DateTime

! These variables are used by rptsmmry.sqc
  Let $Prnt_CoTxGrs = 'Y'
  Let $Prnt_CoExGrs = 'Y'

  do Process-Main

  close 10

  if $RecordWritten = 'Y'
     display ''
     display 'Upon successful conclusion of this program, the following'
     display 'file will have been created:'
     display ''
     display '  T81DCxxx  where "xxx" represents a volume identifier'
     display '            for each company code.'
     display 'The file(s) contains 275-char records in the ICESA format'
     display 'required for electronic reporting of quarterly wages'
     display 'to the Department of Economic Services, District of Columbia'
     display ''
     display 'Follow instructions from the department for preparing'
     display 'and submission of the file electronically.'
     display ''
  else
     do Print-Summary-Data('NoData')
  end-if

  do Stdapi-Term

end-report

begin-procedure Init-Report
  do Init-DateTime
  do Init-Number

  do Get-Current-DateTime
  do Get-Calendar-Year-Id
  do Stdapi-Init

  do Initialization

  move 'TAX810DC' to $ReportID

  move 'District of Columbia Quarterly UI Wage Report - Electronic' to
$ReportTitle
  display ''
  display 'Creating Electronic File for District of Columbia UI Wage Reporting'

end-procedure

begin-procedure Initialization
#ifdef TAXTEST
  move 'CA'              to $State
#else
  move 'DC'              to $State
#endif

  do Delete-Temp-Name-Table
  do Get-Tax-Reporting-Run-Controls
  move &TX.Balance_Year to $RptYear 9999
  move $RptYear          to $CalendarYr
  move $RptYear          to $RptYear ~~xx
  move $PeriodEndDate    to $AsOfDate

  move '0' to $Year4
  move '' to $DDelimiter
  do Format-DateTime($AsOfToday, $out, {DEFCMP}, '', '')
  let $CreationDate = substr($out, 5, 2) || substr($out, 7, 2) || substr($out, 1, 4)

  display ' '
  display 'Processing balances for '   noline
  display $RptQtrYr

  move 1  to #FileCount

  move 275 to #RecordLength

  if $PRCS_Process_Instance = ''
     do Prompts
  else
     do Select-Parameters
     do Convert-Parameters
  end-if

  do Evaluate-File-Type
end-procedure

begin-procedure Open-File

   move 0 to #RecordCount
   if #FileCount > 1
      close 10
   end-if
   move #FileCount to $FileExtension 099
#ifdef OS400
   let $FileExtension = '(D' || &A.Company || ')'
   let $FileID = '{IMPORTPREFIX}' || 'T81DC' || $FileExtension
#else
   let $FileID = '{IMPORTPREFIX}' || 'T81DC' || &A.Company
#endif
   open $FileID as 10 for-writing record=275:fixed

end-procedure

begin-procedure Process-Main
begin-SELECT
TEMP_SSN_MASK
FROM PS_INSTALLATION
end-SELECT

  move &TX.Company       to $Company  !TX.Company is the Transmitter
  if RTRIM($Company,' ') = ''
    display '*** Company field blank on Tax Run Control Record ***'
    display '***************** Processing stopped ****************'
    stop
  end-if

  do Get-Company-Data                 !Transmitter identifying data

!  do Write-B-Record
!     B record no longer required 4-2014

begin-SELECT
A.COMPANY
A.DESCR
A.FEDERAL_EIN
A.ADDRESS1
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  move &A.Company to $Company
  move &A.Descr   to $CompanyName

  do Read-Employee-Data

FROM  PS_COMPANY_TBL A
WHERE A.EFF_STATUS      = 'A'
  AND A.TAX_REPORT_TYPE = '2'
  AND A.EFFDT =
  (SELECT MAX(EFFDT)
     FROM PS_COMPANY_TBL
     WHERE  COMPANY = A.COMPANY
       AND  EFFDT  <= $AsOfDate)
ORDER BY COMPANY
end-SELECT

  if #Count_F1 > 0
    move #Count_F1 to #Count_F
    do Print-Summary-Data('FileNames')
  end-if
end-procedure

begin-procedure Read-Employee-Data
begin-SELECT
C.COMPANY    () on-break print=never before=Before-Company
                                      AFTER=AFTER-COMPANY
C.EMPLID
C.NLGRS_QTD
C.TXGRS_QTD
D1.NATIONAL_ID
D.LAST_NAME
D.FIRST_NAME
D.MIDDLE_NAME

  move '0' to $Officer_Cd
  move &C.EMPLID to $EmplID

  if &C.NlGrs_QTD > 0
     do Process-Employee
  else
     do Print-Summary-Data('NegWage')
  end-if

FROM  PS_TAX_BALANCE C, PS_PERSON_NAME D, PS_PERS_NID D1
WHERE C.COMPANY       = &A.Company
  AND D.EMPLID        = C.EMPLID
  AND C.TAX_CLASS     = 'U'
  AND C.BALANCE_ID    = $Calendar_Year_Id
  AND C.BALANCE_YEAR  = &TX.Balance_Year
  AND C.BALANCE_QTR   = &TX.Balance_Qtr
#ifdef TAXTEST
  AND C.STATE         = 'CA'
#else
  AND C.STATE         = 'DC'
#endif
  AND C.LOCALITY      = ' '
  AND C.BALANCE_PERIOD  =
      (SELECT MAX(BALANCE_PERIOD)
       FROM   PS_TAX_BALANCE
       WHERE  EMPLID        = C.EMPLID
         AND  COMPANY       = C.COMPANY
         AND  BALANCE_ID    = C.BALANCE_ID
         AND  BALANCE_YEAR  = C.BALANCE_YEAR
         AND  BALANCE_QTR   = C.BALANCE_QTR
         AND  STATE         = C.STATE
         AND  LOCALITY      = C.LOCALITY
         AND  TAX_CLASS     = C.TAX_CLASS)
  AND C.NLGRS_QTD <> 0
  AND D.EMPLID            = D1.EMPLID
  AND D1.COUNTRY          = {NID_Country}
  AND D1.NATIONAL_ID_TYPE = $Payroll_NID_Type
ORDER BY D1.NATIONAL_ID
end-SELECT
end-procedure

begin-procedure Process-Employee
  move &D1.NATIONAL_ID to $S123 xxx       !isolate first 3 digits
  if $S123 = &Temp_SSN_Mask or RTRIM(&D1.NATIONAL_ID, ' ') = ''
    move 'I        '      to $NATIONAL_ID
  else
    move &D1.NATIONAL_ID  to $NATIONAL_ID
  end-if

  move 'PS_RC_TAX810DC_ERN D'  to $TAX810X1
  move 'PS_RC_TAX810DC_ERN D1' to $TAX810X2
  move 'PS_RC_TAX810DC_ERN D2' to $TAX810X3
  move 'PS_RC_TAX810DC_ERN D3' to $TAX810X4
  do Get-Hours
  if #Hours > 9999
     let $Hours = '9999'
  else
     let #Hours = #Hours + .99
     let #Hours = trunc (#Hours,0)
     do Format-Number(#Hours, $Hours, '099')
  end-if

  let $LastName   = rtrim(&D.LAST_NAME, ' ')
  let $FirstName  = rtrim(&D.FIRST_NAME, ' ')
  let $MidInitial = {ps-substr}(&D.MIDDLE_NAME,1,1)
  uppercase $LastName
  uppercase $FirstName

  do Check-Name-Alpha

  move '0' to $AdjReason

  move &C.NlGrs_QTD to #NlGrs_QTD
  multiply 100 times #NlGrs_QTD
  do Format-Number(#NlGrs_QTD,  $NlGrs_QTD,  '09999999999999')
  add #NlGrs_QTD to #Co_NlGrs_QTD

  move &C.TxGrs_QTD to #TxGrs_QTD
  multiply 100 times #TxGrs_QTD
  do Format-Number(#TxGrs_QTD,  $TxGrs_QTD,  '09999999999999')
  add #TxGrs_QTD to #Co_TxGrs_QTD

  let #ExGrs_QTD = #NlGrs_QTD - #TxGrs_QTD
  do Format-Number(#ExGrs_QTD,  $ExGrs_QTD,  '09999999999999')
  add #ExGrs_QTD to #Co_ExGrs_QTD

begin-select
J.OFFICER_CD
J.HIRE_DT
J.TERMINATION_DT

  if &J.Officer_Cd = 'O'
    move '1' to $Officer_Cd
  end-if
  if &J.Officer_Cd = 'C'
    move '6' to $Officer_Cd
  end-if

  move '1' to $Year4
  move '1' to $MMLZero
  move '1' to $DDLZero
  do Format-DateTime(&J.Hire_Dt, $out, {DEFMDY},'','')
  let $HireDt = SUBSTR($out, 1, 2) || SUBSTR($out, 7, 4)


  move '1' to $Year4
  move '1' to $MMLZero
  move '1' to $DDLZero
  do Format-DateTime(&J.TERMINATION_Dt, $out, {DEFMDY},'','')
  let $TermDt = SUBSTR($out, 1, 2) || SUBSTR($out, 7, 4)

 FROM PS_JOB J
WHERE J.EMPLID   = $EmplID
  AND J.COMPANY  = $Company
  AND J.EFFDT    =
      (SELECT MAX(EFFDT)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT    <= $AsOfDate)
  AND J.EFFSEQ   =
      (SELECT MAX(EFFSEQ)
         FROM PS_JOB
        WHERE EMPLID    = J.EMPLID
          AND COMPANY   = J.COMPANY
          AND EFFDT     = J.EFFDT)
end-select

  do Write-S-Record
end-procedure

begin-procedure Check-Name-Alpha

  move 'N'     to $Name-Err

  do  Is-String-Alpha ($LastName, #Return_Value, $LstNm, $LastNm)
  if #Return_Value = 0
     move 'Y'     to $Name-Err
     move $LastNm to $LastName
  end-if

  do  Is-String-Alpha ($FirstName, #Return_Value, $FstNm, $FirstNm)
  if #Return_Value = 0
     move 'Y'      to $Name-Err
     move $FirstNm to $FirstName
  end-if

  do  Is-String-Alpha ($MidInitial, #Return_Value, $MidIn, $MidInit)
  if #Return_Value = 0
     move 'Y'      to $Name-Err
     move $MidInit to $MidInitial
  end-if


! PRINT MESSAGE IF EMPLOYEE NAME CONTAINS SPECIAL CHARACTERS
  if $Name-Err = 'Y'
     display '*** WARNING ***  Employee name contains special characters - Company: ' noline
     display $Company noline
     display '   Employee: ' noline
     display $EmplID noline
     display '  ' noline
     display $FstNm noline
     display ' ' noline
     display $MidIn noline
     display ' ' noline
     display $LstNm
  end-if

end-procedure

begin-procedure Is-String-Alpha ($Test_String, :#Return_Value, :$PrevNm, :$New_String)

  let #Max_Lngth    = length ($Test_String)
  let #Return_Value = 1
  let #Char_Pos     = 1
  let $PrevNm       = $Test_String
  let $New_String   = $Test_String
  let $Re_String    = ''
  
  while #Char_Pos <= #Max_Lngth
    let $Test_Char = substr ($New_String, #Char_Pos, 1)
    let #Alpha     = RANGE($Test_Char,'A','Z')
    let #NumDigit  = RANGE($Test_Char,'0','9')

    if (#Alpha = 0) AND (#NumDigit = 0) AND ($Test_Char <> ' ')
       let #Return_Value = 0
    else    
        if (#Alpha > 0 or #NumDigit > 0 or $Test_Char = ' ')
           let $Re_String = $Re_String || $Test_Char
        end-if
    end-if
    add 1 to #Char_Pos
  end-while

  let $New_String = $Re_String

end-procedure

begin-procedure Before-Company
  do Get-Company-Data

  move 'DC' to $State
  do Get-State-Tax-Data             !Employer ID
  if RTRIM(&Employer_ID_SUT,' ') = ''
    display '*** State Unemployment ID missing in Company State Tax Table ***'
    display '*********************** Processing stopped *********************'
    display 'Company ' noline
    display $Company
    stop
  end-if

  move &Employer_ID_SUT to $StateEIN

  move &SUT_Experience_Rt to #Experience_Rt
  divide 100 into #Experience_Rt
  move #Experience_Rt to $Experience_Rt 0.99999
  let $Experience_Rt = SUBSTR($Experience_Rt,2,6)

  if $Prcs_Process_Instance  =  ''
     do Employer-Prompts
  else
     do Company-Run-Control
  end-if

  do Open-File

  do Write-A-Record
  do Write-E-Record
end-procedure

begin-procedure After-Company

  add #Co_NlGrs_QTD to #Tot_NlGrs_QTD
  add #Count_S to #Count_F
  add #Count_R to #Count_R_Total

  if #Count_S > 0
    do Write-T-Record
    do Write-F-Record
    move 0 to #Count_F
    move 0 to #Tot_Nlgrs_QTD
    move 0 to #Tot_TxGrs_QTD
    move 0 to #Tot_ExGrs_QTD
  end-if

  divide 100 into #Co_NlGrs_QTD
  divide 100 into #Co_TxGrs_QTD
  divide 100 into #Co_ExGrs_QTD
  add #Co_TxGrs_QTD to #Tot_TxGrs_QTD
  add #Co_ExGrs_QTD to #Tot_ExGrs_QTD

  do Print-Summary-Data('CoTotal')

  move 0 to #Co_NlGrs_QTD
  move 0 to #Co_TxGrs_QTD
  move 0 to #Co_ExGrs_QTD
  add  1 to #FileCount
  move 0 to #Count_S
  new-page
end-procedure

begin-procedure Get-FIPS-Code
  let $TransmitterState = ' '
begin-SELECT
FIPS_CODE

  let $TransmitterState = SUBSTR(&FIPS_CODE,1,2)

FROM  PS_REMIT_STATE_TBL
WHERE STATE  = &CT.State
  AND STATUS = 'A'
end-SELECT
end-procedure

begin-procedure Write-A-Record
  move $CompanyName     to $TransmitterName
  move &CT.Federal_EIN  to $FedEIN 099999999
  move $CompnyAdd1      to $TransmitterAddress
  move $CompnyCity      to $TransmitterCity

  do Get-FIPS-Code

  if &CT.Country = 'USA'
     move &CT.Postal    to $Zip
  else
     move ' '           to $Zip
  end-if

  move $Zip             to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6)  = 0 and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip             to $ZipExtsn ~~~~~xxxxx

  uppercase $TransmitterName
  uppercase $TransmitterAddress
  uppercase $TransmitterCity
  uppercase $TransmitterContact

  write 10 from    'A':1           !   1 -   1
                   $Sp:4           !   2 -   5
               $FedEIN:9           !   6 -  14
                   $Sp:4           !  15 -  18
                   $Sp:5           !  19 -  23
      $TransmitterName:50          !  24 -  73
   $TransmitterAddress:40          !  74 - 113
      $TransmitterCity:25          ! 114 - 138
     $TransmitterState:2           ! 139 - 140
                   $Sp:13          ! 141 - 153
                  $Zip:5           ! 154 - 158
             $ZipExtsn:5           ! 159 - 163
   $TransmitterContact:30          ! 164 - 193
     $TransmitterPhone:10          ! 194 - 203
  $TransmitterPhoneExt:4           ! 204 - 207
                   $Sp:6           ! 208 - 213
                   $Sp:1           ! 214
                   $Sp:5           ! 215 - 219
                   $Sp:1           ! 220
                   $Sp:9           ! 221 - 229
                   $Sp:13          ! 230 - 242
         $CreationDate:8           ! 243 - 250
                   $Sp:25          ! 251 - 275

  add 1 to #RecordCount
end-procedure

begin-procedure Write-B-Record

  write 10 from    'B':1           !   1
           $CalendarYr:4           !   2 -   5
               $FedEIN:9           !   6 -  14
         $Computer_Mfr:8           !  15 -  22
           $Tape_Label:2           !  23 -  24
                   $Sp:1           !  25
              $Density:2           !  26 -  27
         $Recording_Cd:3           !  28 -  30
               $Tracks:2           !  31 -  32
      $Blocking_Factor:2           !  33 -  34
                'UTAX':4           !  35 -  38
                   $Sp:108         !  39 - 146
      $TransmitterName:44          ! 147 - 190
   $TransmitterAddress:35          ! 191 - 225
      $TransmitterCity:20          ! 226 - 245
     $TransmitterState:2           ! 246 - 247
                   $Sp:5           ! 248 - 254
                  $Zip:5           ! 253 - 257
             $ZipExtsn:5           ! 258 - 262
                   $Sp:13          ! 263 - 275

  add 1 to #RecordCount
end-procedure

begin-procedure Write-E-Record
  move &A.Federal_EIN  to $FedEIN 099999999
  move &A.Descr        to $ErName
  move &A.Address1     to $ErAddress
  move &A.City         to $ErCity
  let $ErState         = rtrim(&A.State, ' ')

  if &A.Country = 'USA'
     move &A.Postal    to $Zip
     move ' '          to $Intl_Addr
  else
     move ' '          to $Zip
     move 'X'          to $Intl_Addr
  end-if

  move $Zip            to $ZipExtsn ~~~~~~xxxx
  if instr($Zip,'-',6) = 0  and $ZipExtsn <> '    '
     let $Zip = substr($Zip,1,5) || '-' || substr($Zip,6,4)
  end-if
  move $Zip            to $ZipExtsn ~~~~~xxxxx

  uppercase $ErName
  uppercase $ErAddress
  uppercase $ErCity

  move '1' to $NWNW         !E record will be followed by S record

  write 10 from 'E':1              !   1
   &TX.Balance_Year:4              !   2 -   5
            $FedEIN:9              !   6 -  14
                $Sp:9              !  15 -  23
            $ErName:50             !  24 -  73
         $ErAddress:40             !  74 - 113
            $ErCity:25             ! 114 - 138
           $ErState:2              ! 139 - 140
                $Sp:8              ! 141 - 148
          $ZipExtsn:5              ! 149 - 153
               $Zip:5              ! 154 - 158
                $Sp:1              ! 159
                $Sp:1              ! 160
                $Sp:2              ! 161 - 162
                $Sp:4              ! 163 - 166
             'UTAX':4              ! 167 - 170
               '11':2              ! 171 - 172
          $StateEIN:15             ! 173 - 187
       $QtrEndMonth:2              ! 188 - 189
              $NWNW:1              ! 190
                $Sp:1              ! 191
                $Sp:5              ! 192 - 196
                $Sp:7              ! 197 - 203
                $Sp:5              ! 204 - 208
                $Sp:47             ! 209 - 255
                $Sp:1              ! 256
                $Sp:1              ! 257
                $Sp:9              ! 258 - 266
                $Sp:9              ! 267 - 275

  move 'Y' to $RecordWritten
  add 1 to #Count_E
  add 1 to #RecordCount
end-procedure

begin-procedure Write-S-Record
  add 1 to #Count_S

  write 10 from 'S':1              !   1
       $NATIONAL_ID:9              !   2 -  10
          $LastName:20             !  11 -  30
         $FirstName:12             !  31 -  42
        $MidInitial:1              !  43
               '11':2              !  44 -  45
                $Sp:4              !  46 -  49
                $Sp:14             !  50 -  63
         $NlGrs_QTD:14             !  64 -  77
                $Sp:14             !  78 -  91
                $Sp:14             !  92 - 105
                $Sp:15             ! 106 - 120
                $Sp:9              ! 121 - 129
                $Sp:2              ! 130 - 131
             $Hours:3              ! 132 - 134
                $Sp:8              ! 135 - 142
                $Sp:4              ! 143 - 146
          $StateEIN:15             ! 147 - 161
                $Sp:15             ! 162 - 176
         $AdjReason:1              ! 177
                $Sp:13             ! 178 - 190
                $Sp:14             ! 191 - 204
                $Sp:2              ! 205 - 206
                $Sp:1              ! 207
                $Sp:1              ! 208
                $Sp:1              ! 209
        $Officer_Cd:1              ! 210
                $Sp:1              ! 211
                $Sp:1              ! 212
                $Sp:1              ! 213
                $Sp:1              ! 214
       $QtrEndMonth:2              ! 215 - 216
        $CalendarYr:4              ! 217 - 220
            $HireDt:6              ! 221 - 226
            $TermDt:6              ! 227 - 232
                $Sp:43             ! 233 - 275

  add 1 to #RecordCount
end-procedure

begin-procedure Write-T-Record
  move #Count_S      to $Count_S 0999999

  move #Co_NlGrs_QTD to $Co_NlGrs_QTD 09999999999999
  move #Co_TxGrs_QTD to $Co_TxGrs_QTD 09999999999999
  move #Co_ExGrs_QTD to $Co_ExGrs_QTD 09999999999999

  add #Month1Count   to #TotMonth1Count
  add #Month2Count   to #TotMonth2Count
  add #Month3Count   to #TotMonth3Count

  write 10 from 'T':1              !   1
           $Count_S:7              !   2 -   8
                $Sp:4              !   9 -  12
                $Sp:14             !  13 -  26
      $Co_NlGrs_QTD:14             !  27 -  40
      $Co_ExGrs_QTD:14             !  41 -  54
      $Co_TxGrs_QTD:14             !  55 -  68
                $Sp:13             !  69 -  81
       $QtrEndMonth:2              !  82 -  83
   &TX.Balance_Year:4              !  84 -  87
                $Sp:13             !  88 - 100
                $Sp:11             ! 101 - 111
                $Sp:11             ! 112 - 122
                $Sp:11             ! 123 - 133
                $Sp:11             ! 134 - 144
                $Sp:4              ! 145 - 148
                $Sp:11             ! 149 - 159
                $Sp:4              ! 160 - 163
                $Sp:11             ! 164 - 174
                $Sp:11             ! 175 - 185
                $Sp:13             ! 186 - 198
                $Sp:14             ! 199 - 212
                $Sp:14             ! 213 - 226
       $Month1Count:7              ! 227 - 233
       $Month2Count:7              ! 234 - 240
       $Month3Count:7              ! 241 - 247
                $Sp:3              ! 248 - 250
                $Sp:7              ! 251 - 257
                $Sp:10             ! 258 - 267
                $Sp:8              ! 268 - 275

  add 1 to #RecordCount
  move 0  to #T_Gross
end-procedure

begin-procedure Write-F-Record

  move #Count_F to $Count_F 0999999999
!  move #Count_E to $Count_E 0999999999
  move #Tot_NlGrs_QTD to $Tot_NlGrs_QTD  099999999999999

!  let $Tot_NlGrs_QTD = EDIT(#Tot_NlGrs_QTD * 100,'099999999999999')
!  let $Tot_ExGrs_QTD = EDIT(#Tot_ExGrs_QTD * 100,'099999999999999')
!  let $Tot_TxGrs_QTD = EDIT(#Tot_TxGrs_QTD * 100,'099999999999999')

!  move #TotMonth1Count to $TotMonth1Count  09999999
!  move #TotMonth2Count to $TotMonth2Count  09999999
!  move #TotMonth3Count to $TotMonth3Count  09999999

  write 10 from 'F':1              !   1
           $Count_F:10             !   2 -  11
                $Sp:10             !  12 -  21
                $Sp:4              !  22 -  25
                $Sp:15             !  26 -  40
     $Tot_NlGrs_QTD:15             !  41 -  55
                $Sp:15             !  56 -  70
                $Sp:15             !  71 -  85
                $Sp:15             !  86 - 100
                $Sp:15             ! 101 - 115
                $Sp:8              ! 116 - 123
                $Sp:8              ! 124 - 131
                $Sp:8              ! 132 - 139
                $Sp:136            ! 140 - 275

  add 1 to #RecordCount

  move 0 to #Count_F
  move '' to $Count_F
end-procedure

begin-procedure Prompts
  display 'Enter Transmitter Contact Information:'
  input $TransmitterContact  maxlen=30 '  Contact name (30 char max)'
  input $TransmitterPhone    maxlen=10 '  Contact phone (e.g. 9995551212)'
  input $TransmitterPhoneExt maxlen=4  '  Contact 4-digit extension'

  while $FileType = ''
    input $FileType 'Tape, cartridge or diskette file? (X or Q to quit)'
    uppercase $FileType
    if INSTR('XQ',$FileType,1) = 0
      display ' '
      display '***** Enter X or Q *****'
      display ' '
      move '' to $FileType
    end-if
  end-while
end-procedure

begin-procedure Convert-Parameters

  move $RC_QTR_UI.Contact_Person    to $TransmitterContact
  move $RC_QTR_UI.Contact_Phone     to $TransmitterPhone
  move $RC_QTR_UI.Contact_Phone_Ext to $TransmitterPhoneExt
  move $RC_QTR_UI.Diskette_Type     to $DisketteType
  move $RC_QTR_UI.Reporting_Medium  to $FileType

  unstring  $TransmitterPhone by '/' into $str1 $str2
  unstring $str2 by '-' into $str3 $str4
  let $TransmitterPhone = $str1 || $str3 || $str4
end-procedure

begin-procedure Evaluate-File-Type

  evaluate $FileType
    when = 'Q'
      stop

  end-evaluate
end-procedure

begin-procedure Employer-Prompts
  display ' '
  display 'Enter quarterly data for ' noline
  display $Company noline
  display ':'
  display '(Numbers should include decimal and cents, but no commas, e.g. 1234.00)'
  input $Month1Count     '   Month 1 employee count'
  input $Month2Count     '   Month 2 employee count'
  input $Month3Count     '   Month 3 employee count'

  move $Month1Count     to #Month1Count
  move $Month2Count     to #Month2Count
  move $Month3Count     to #Month3Count

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure

begin-procedure Company-Run-Control
begin-select
DC.UI_MONTH1_COUNT
DC.UI_MONTH2_COUNT
DC.UI_MONTH3_COUNT

FROM PS_RC_TAX810DC DC
WHERE DC.OPRID       = $Prcs_OprID
  AND DC.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
  AND DC.COMPANY     = &C.Company

end-SELECT

  move &DC.UI_Month1_Count     to #Month1Count
  move &DC.UI_Month2_Count     to #Month2Count
  move &DC.UI_Month3_Count     to #Month3Count

  move #Month1Count     to $Month1Count     0999999
  move #Month2Count     to $Month2Count     0999999
  move #Month3Count     to $Month3Count     0999999
end-procedure


begin-procedure Print-Totals
  print '**** File Total ****'     (+3,1)
  print 'No Limit Gross QTD '      (+2,1,22)
  print #Tot_NlGrs_QTD              (,24)   edit 999,999,999,999.99mi

  if #Tot_TxGrs_QTD <> 0
    print 'Taxable Gross QTD  '    (+2,1,22)
    print #Tot_TxGrs_QTD            (,24)   edit 999,999,999,999.99mi
  end-if

  if #Tot_ExGrs_QTD <> 0
    print 'Excess Gross QTD   '    (+2,1,22)
    print #Tot_ExGrs_QTD            (,24)   edit 999,999,999,999.99mi
  end-if

  if #Tot_Tips_QTD <> 0
    print 'Declared Tips QTD  '    (+2,1)
    print #Tot_Tips_QTD             (,24)   edit 999,999,999,999.99mi
  end-if

  print 'Employees Reported'       (+2,1,29)
  print #Count_F                    (,31)   edit 999,999,999

  if #Count_R_Total > 0
    print 'Records Reported'       (+2,1,29)
    print #Count_R_Total            (,31)   edit 999,999,999
  end-if

  if #Count_E <> 0
    print 'Employers Reported'     (+2,1,29)
    print #Count_E                  (,31)   edit 999,999,999
  end-if

  print 'Output File(s):  '        (+2,1)
  move 0 to #i
  if #FileCount > 0
     while #i <= #FileCount
       move #i to $i B9
       let $FileName = 'DCWAGE' || ltrim($i, ' ')
       let $FileID   = '{IMPORTPREFIX}' || $FileName || '.TXT'
       print $FileID                (+1,10)
       add 1 to #i
       if #i = 1
          move 2 to #i
       end-if
     end-while
  else
      let $FileID = $ReportID
      let $FileID = '{IMPORTPREFIX}' || $FileID || '{IMPORTSUFFIX}'
      print $FileID                 (+1,10)
  end-if

end-procedure

begin-procedure Delete-Temp-Name-Table
begin-SQL on-error=Ignore
  DELETE FROM PS_R_TAX810ST
end-SQL
end-procedure

begin-procedure Ignore
! dummy procedure to avoid SQL error message on delete of empty table
end-procedure

begin-Procedure Build-Temp-Name-Table
begin-SQL on-error=Insert-Name-Error
  INSERT INTO PS_R_TAX810ST (STATE, COMPANY)
         VALUES ($State, &A.COMPANY)
end-SQL
end-Procedure

begin-procedure Insert-Name-Error
  display 'Error on insert to temporary Name table '
end-procedure


#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'taxrnctl.sqc'  !Get-Tax-Reporting-Run-Controls procedure
#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getstdta.sqc'  !Get-State-Tax-Data procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'rptsmmry.sqc'  !Print-Summary-Data procedure
#Include 'getbalid.sqc'  !Get-Calendar-Year-Id
#Include 'stdapi.sqc'    !Update Process API
#Include 'txrnctl1.sqc'  !Get-Run-Control procedure
#Include 'gethours.sqc'  !Get-Hours procedure
