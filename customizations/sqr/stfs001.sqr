!-----------------------------------------------------------------------
! Report Name: STFS001.SQR - Expected Life Years Analysis Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:51:33                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: This report calculates the expected life for the grants
!                specified in ST_STFS001_TAO.
!-----------------------------------------------------------------------
! Options:       None
! Tables:        ST_STFS001_TAO
!                ST_GRANT
!                ST_GRANT_EXER
!                ST_GRANT_VEST
!                ST_GRNT_VST_DTL
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
! Procedure: Begin-Setup
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report Procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Main-Process
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all Procedures for
!          printing the optional heading.
!-----------------------------------------------------------------------
Begin-Heading 08

  #Include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)

  print $Xlatlongname                                      (  ,   ,   ) center

  print $MinExerciseLbl                                    (+1,001,018)
  print ':'                                                (  ,   ,001)
  print #Percent_Exercised                                 (  , +3,007) edit 999.999
  print '%'                                                (  ,   ,001)

  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center

  print $GroupIdLbl                                        (+1,001,008)
  print ':'                                                (  ,   ,001)
  print $Group_Id                                          (  , +3,010)

  if $ValuationMethod = 'S'
    do Single-Heading
  else
    do Multiple-Heading
  end-if

End-Heading

!-----------------------------------------------------------------------
! Section: Single-Heading
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Single-Heading

  print $GrantLbl                                          (+2,045,010)
  print $GrantLbl                                          (  ,057,010)
  print $VestingLbl                                        (  ,069,010)
  print $SharesLbl                                         (  ,093,006)
  print $SharesLbl                                         (  ,112,006)
  print $PercentageLbl                                     (  ,120,010)
  print $NumberofLbl                                       (  ,133,009)
  print $ExpectedLbl                                       (  ,146,008)

  print $NameLbl                                           (+1,001,030)
  print $EmpIdLbl                                          (  ,032,010)
  print $NumberLbl                                         (  ,045,010)
  print $DateLbl                                           (  ,057,010)
  print $ScheduleLbl                                       (  ,069,010)
  print $GrantedLbl                                        (  ,092,007)
  print $ExercisedLbl                                      (  ,109,009)
  print $ExercisedLbl                                      (  ,121,009)
  print $ExercisesLbl                                      (  ,133,009)
  print $LifeLbl                                           (  ,150,004)
  print '-'                                                (+1,001,177) fill Bold

End-Procedure

!-----------------------------------------------------------------------
! Section: Multiple-Heading
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Multiple-Heading

  print $GrantLbl                                          (+2,046,010)
  print $VestLbl                                           (  ,058,010)
  print $VestingLbl                                        (  ,070,010)
  print $ExerLbl                                           (  ,082,010)
  print $SharesLbl                                         (  ,105,006)
  print $ExerLbl                                           (  ,114,010)
  print $ExpectedLbl                                       (  ,128,008)

  print $NameLbl                                           (+1,001,030)
  print $EmpIdLbl                                          (  ,032,010)
  print $NumberLbl                                         (  ,046,010)
  print $DateLbl                                           (  ,058,010)
  print $ScheduleLbl                                       (  ,070,010)
  print $DateLbl                                           (  ,082,010)
  print $ExercisedLbl                                      (  ,102,009)
  print $MethodLbl                                         (  ,114,010)
  print $LifeLbl                                           (  ,132,004)
  print '-'                                                (+1,001,177) fill Bold

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization Procedure.  Set titles, parameters.
!            This is called from the Begin-Program Procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STFS001'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' Procedure
                            ! that reads the language dep. text

  if $prcs_process_instance = ''
    do Ask-From-Thru-Date
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables
  do Create-Array

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This Procedure is used to read language-depEndent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do AppEnd_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',  'STOCK_ID',         $StockIdLbl,     #DW)
  do Get_Field_Information ('STOCK',  'FROM',             $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',  'THRU',             $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',  'GRANT',            $GrantLbl,       #DW)
  do Get_Field_Information ('STOCK',  'SHARES',           $SharesLbl,      #DW)
  do Get_Field_Information ('STOCK',  'NAME',             $NameLbl,        #DW)
  do Get_Field_Information ('STOCK',  'EMPLID',           $EmpIdLbl,       #DW)
  do Get_Field_Information ('STOCK',  'DATE',             $DateLbl,        #DW)
  do Get_Field_Information ('STOCK',  'NUMBER',           $NumberLbl,      #DW)
  do Get_Field_Information ('STOCK',  'EXERCISED',        $ExercisedLbl,   #DW)
  do Get_Field_Information ('STOCK',  'GRANTED',          $GrantedLbl,     #DW)
  do Get_Field_Information ('STOCK',  'FROM',             $FromLbl,        #DW)
  do Get_Field_Information ('STOCK',  'THRU',             $ThruLbl,        #DW)
  do Get_Field_Information ('STOCK',  'EXERCISE',         $ExerLbl,        #DW)
  do Get_Field_Information ('STFS001','EXERCISES',        $ExercisesLbl,   #DW)
  do Get_Field_Information ('STFS001','PERCENTAGE',       $PercentageLbl,  #DW)
  do Get_Field_Information ('STFS001','NUMBER_OF',        $NumberofLbl,    #DW)
  do Get_Field_Information ('STFS001','VEST',             $VestLbl,        #DW)
  do Get_Field_Information ('STFS001','VESTING',          $VestingLbl,     #DW)
  do Get_Field_Information ('STFS001','EXPECTED',         $ExpectedLbl,    #DW)
  do Get_Field_Information ('STFS001','SCHEDULE',         $ScheduleLbl,    #DW)
  do Get_Field_Information ('STFS001','METHOD',           $MethodLbl,      #DW)
  do Get_Field_Information ('STFS001','LIFE',             $LifeLbl,        #DW)
  do Get_Field_Information ('STFS001','MINIMUM_EXERCISE', $MinExerciseLbl, #DW)
  do Get_Field_Information ('STFS001','GROUP_ID',         $GroupIdLbl,     #DW)
  do Get_Field_Information ('STFS001','WEIGHTED_AVERAGE', $WeightedLbl,    #DW)
  do Get_Field_Information ('STFS001','REPORT_TITLE',     $ReportTitle,    #DW)

End-Procedure Report-Translation

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let #Count             = 0
  let #Rows              = 0
  let $WhereSort         = ''
  let $StockId           = rtrim($RC_STOCK_ID,' ')
  let $ValuationMethod   = rtrim($RC_ST_VALUE_METHOD,' ')
  let #Percent_Exercised = #RC_ST_PERCENT_EXER
  let $Group_Id          = rtrim($RC_ST_GROUP_ID,' ')
  let $RC_FromDate       = rtrim($RC_FromDate,' ')
  let $RC_ThruDate       = rtrim($RC_ThruDate,' ')
  let $SortBy            = rtrim($RC_Sort_By,' ')

  move $ValuationMethod to $FieldValue
  move 'ST_VALUE_METHOD' to $Fieldname
  do Read-Translate-Table
  let $Xlatlongname      = rtrim($Xlatlongname,' ')

  Evaluate $SortBy
  When = 'E'
    let $WhereSort = 'ORDER BY A.EMPLID'
    break
  When = 'G'
    let $WhereSort = 'ORDER BY A.GRANT_NBR'
    break
  When = 'O'
    let $WhereSort = 'ORDER BY A.ST_OPTION_TYPE'
    break
  When = 'N'
    let $WhereSort = 'ORDER BY C.NAME'
    break  
  End-Evaluate

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = Exercise            -
               size  = 150                 -
               field = Date:char           -
               field = Shares:number       -
               field = ExerMethod:char

  create-array name  = Vest                -
               size  = 1000                -
               field = Date:char           -
               field = Shares:number       -
               field = ExpireDate:char     -
               field = ExerShares:number

  create-array name  = Multiple            -
               size  = 1000                -
               field = VestDate:char       -
               field = VestShares:number   -
               field = ExerDate:char       -
               field = ExerShares:number   -
               field = ExerMethod:char

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main process
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

  do Select-Grants
  if $ValuationMethod = 'S'
    do Print-Single-Summary
  else
    do Print-Multiple-Summary
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Grants
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Select-Grants

Begin-Select

A.EMPLID
A.GRANT_NBR
A.GRANT_DT
A.SHARES_GRANTED
A.ST_OPTION_TYPE
C.NAME

  let #Count           = 0
  let #VestRows        = 0
  let #TotalExercised  = 0
  let $EmplId          = rtrim(&a.emplid, ' ')
  let $GrantDate       = rtrim(&a.grant_dt, ' ')
  let $GrantNbr        = rtrim(&a.grant_nbr, ' ')
  let #SharesGranted   = &a.shares_granted
  let #TotalGranted    = #TotalGranted + #SharesGranted
  let $Name            = rtrim(&c.name,' ')
  do Select-Exercises
  do Select-Vesting
  if $ValuationMethod = 'S'
    do Calculate-Life-Single
  else
    do Calculate-Life-Multiple
  end-if

from  PS_ST_GRANT        A,
      PS_ST_STFS001_TAO  B,
      PS_ST_PERSON_NAME C
where A.STOCK_ID    = $StockId
  and A.STOCK_ID    = B.STOCK_ID
  and A.EMPLID      = B.EMPLID
  and A.GRANT_NBR   = B.GRANT_NBR
  and A.EMPLID      = C.EMPLID
[$WhereSort]

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Exercises
! Descr:   Select exercise information and stores shares exercised and exercise
!          date in the Exercise array.  This array is used in the Calculate section
!          to determine the Expected Life.
!-----------------------------------------------------------------------
Begin-Procedure Select-Exercises

Begin-Select

D.EXERCISE_DT
D.SHARES_EXERCISED
D.EXERCISE_METHOD

  let #Count           = #Count + 1
  let $ExerciseDate    = rtrim(&d.exercise_dt, ' ')
  let #SharesExercised = &d.shares_exercised
  let $ExerMethod      = rtrim(&d.exercise_method, ' ')
  let #TotalExercised  = #TotalExercised + #SharesExercised
  
  if $ValuationMethod = 'S'
    do Populate-Exercise-Array 
  else
    put $ExerciseDate #SharesExercised $ExerMethod into Exercise(#Count) Date Shares ExerMethod
  end-if 
  
from  PS_ST_GRANT_EXER D
where D.STOCK_ID        = $StockId
  and D.EMPLID          = $EmplId
  and D.GRANT_NBR       = $GrantNbr
  and D.EXERCISE_STATUS = 'A'
order by D.EXERCISE_DT

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Exercise-Array
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Populate-Exercise-Array

  if #Count = 1
    put $ExerciseDate #SharesExercised into Exercise(#Count) Date Shares
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #Count
      get $Date from Exercise(#Row) Date
      if $ExerciseDate = $Date
        put $ExerciseDate #SharesExercised into Exercise(#Count) Date Shares
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $ExerciseDate #SharesExercised into Exercise(#Count) Date Shares
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting
! Descr:   Select Vesting information and stores shares vested and expiration
!          date in the Vest array.  This array is used in the Calculate section
!          to determine the Maximum Expected Life possible.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting

Begin-Select

E.VEST_SCHED_ID
F.SHARES_VESTED
F.VEST_DT
F.EXPIRATN_DT

  add 1 to #VestRows
  let $VestSchedId  = rtrim(&e.vest_sched_id, ' ')
  let #SharesVested = &f.shares_vested
  let $VestDate     = rtrim(&f.vest_dt, ' ')
  let $ExpiratnDate = rtrim(&f.expiratn_dt, ' ')
  put $VestDate #SharesVested $ExpiratnDate into Vest(#VestRows) Date Shares ExpireDate

from  PS_ST_GRANT_VEST   E,
      PS_ST_GRNT_VST_DTL F
where E.STOCK_ID     = $StockId
  and E.EMPLID       = $EmplId
  and E.GRANT_NBR    = $GrantNbr
  and E.VEST_EFFDT   = (select MAX(EE.VEST_EFFDT)
                          from PS_ST_GRNT_VST_DTL EE
                         where EE.EMPLID      = E.EMPLID
                           and EE.STOCK_ID    = E.STOCK_ID
                           and EE.GRANT_NBR   = E.GRANT_NBR )
  and E.SEQ_NUM      = (select MAX(EEE.SEQ_NUM)
                          from PS_ST_GRNT_VST_DTL EEE
                         where EEE.EMPLID     = E.EMPLID
                           and EEE.STOCK_ID   = E.STOCK_ID
                           and EEE.GRANT_NBR  = E.GRANT_NBR
                           and EEE.VEST_EFFDT = E.VEST_EFFDT )
  and E.STOCK_ID     = F.STOCK_ID
  and E.EMPLID       = F.EMPLID
  and E.GRANT_NBR    = F.GRANT_NBR

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Calculate-Life-Single
! Descr:   Calculates the Expected Life for a Grant.  Calculates the Maximum
!          Expected Life possible and compares it to the Expected Life.  The
!          lower of these values is the Expected Life.
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Life-Single

  ! Get Total Shares Exercised
  let #Loop        = 1
  let #TotalShares = 0
  while #Loop <= #Count
    get $Date #Shares from Exercise(#Loop) Date Shares
    let #TotalShares = #TotalShares + #Shares
    add 1 to #Loop
  end-while

  ! Calculate the Expected Life
  let #Loop        = 1
  let #PerShare    = 0
  while #Loop <= #Count
    get $Date #Shares from Exercise(#Loop) Date Shares
    do Diff-Date($Date,$GrantDate,#Y,#M,#Days)
    let #Years = #Days / 365
    let #PerShare = #PerShare + ((#Years / #TotalShares) * (#Shares / #TotalExercised))
    add 1 to #Loop
  end-while

  let #PercentExercised = (#TotalExercised / #SharesGranted) * 100
  if #PercentExercised = 100
    let #ExpectedLife = #Years
  else
    let #ExpectedLife = ((#SharesGranted - #TotalExercised) * #PerShare) + #Years
  end-if

  ! Calculate the Maximum Expected Life possible and compare to Expected Life
  let #Loop        = 1
  let #TotalVest   = 0
  while #Loop <= #VestRows
    get $ExpireDate #Shares from Vest(#Loop) ExpireDate Shares
    do Diff-Date($ExpireDate,$GrantDate,#Y,#M,#Days)
    let #Years     = #Days / 365
    let #TotalVest = #TotalVest + (#Years * #Shares)
    add 1 to #Loop
  end-while

  let #MaxExpectedLife = #TotalVest / #SharesGranted

  if #MaxExpectedLife < #ExpectedLife
    let #ExpectedLife = #MaxExpectedLife
  end-if

  let #GrantedLife = #GrantedLife + (#SharesGranted * #ExpectedLife)

  do Print-Single

  clear-array name  = Exercise
  clear-array name  = Vest

End-Procedure

!-----------------------------------------------------------------------
! Section: Calculate-Life-Multiple
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Calculate-Life-Multiple

  ! Calculate the Expected Life
  let #ExerRow      = 1
  let #MultRow      = 1
  let #Loop         = 1

  while #ExerRow <= #Count
    get $ExerDate #ExerShares $ExerMethod from Exercise(#ExerRow) Date Shares ExerMethod
    while #Loop <= #VestRows
      get $VestDate #VestShares #VestExer from Vest(#Loop) Date Shares ExerShares
      if (#VestShares - #VestExer) > 0
        if #ExerShares > (#VestShares - #VestExer)
          let #a = #VestShares - #VestExer
          put $VestDate #VestShares $ExerDate #a $ExerMethod into Multiple(#MultRow) VestDate VestShares ExerDate ExerShares ExerMethod
          put $VestDate #VestShares #VestShares into Vest(#Loop) Date Shares ExerShares
          add 1 to #Loop
          add 1 to #MultRow
          let #ExerShares = #ExerShares - (#VestShares - #VestExer)
        else  
          put $VestDate #VestShares $ExerDate #ExerShares $ExerMethod into Multiple(#MultRow) VestDate VestShares ExerDate ExerShares ExerMethod
          let #VestExer = #VestExer + #ExerShares
          put #VestExer into Vest(#Loop) ExerShares
          let #ExerShares = 0
          add 1 to #ExerRow
          add 1 to #MultRow
          break
        end-if
      else
        add 1 to #Loop
      end-if 
    end-while
  end-while

  ! Calculate the Expected Life
  let #Loop        = 1
  let #TotalShares = 0
  let #PerShare    = 0
  while #Loop < #MultRow
    get $VestDate #VestShares $ExerDate #ExerShares $ExerMethod from Multiple(#Loop) VestDate VestShares ExerDate ExerShares ExerMethod
    do Diff-Date($ExerDate,$VestDate,#Y,#M,#Days)
    let #Years = #Days / 365
    if #Years < 0
      let #Years = 0
    end-if  
    let #ExpectedLife = #ExpectedLife + (#Years * #ExerShares)
    add 1 to #Loop
    do Print-Multiple
  end-while

  let #SumExercised  = #SumExercised + #TotalExercised

  clear-array name  = Exercise
  clear-array name  = Vest
  clear-array name  = Multiple

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Single
! Descr:   Prints the report for the Single Option Method.
!-----------------------------------------------------------------------
Begin-Procedure Print-Single

  do Format-DateTime ($GrantDate, $GrantDate, {DEFDATE}, '', '')
  print $Name                                              (+1,001,030)
  print $EmplId                                            (  ,032,010)
  print $GrantNbr                                          (  ,045,010)
  print $GrantDate                                         (  ,057,010)
  print $VestSchedId                                       (  ,069,010)
  print #SharesGranted                                     (  ,082,017) edit 99,999,999.999999
  print #TotalExercised                                    (  ,101,017) edit 99,999,999.999999
  print #PercentExercised                                  (  ,126,003) edit 999
  print '%'                                                (  ,   ,001)
  print #Count                                             (  ,132,010) edit 9999999999
  print #ExpectedLife                                      (  ,144,010) edit 999.999999

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Multiple
! Descr:   Prints the report for the Multiple Option Method.
!-----------------------------------------------------------------------
Begin-Procedure Print-Multiple

  do Format-DateTime ($VestDate, $VestDate, {DEFDATE}, '', '')
  do Format-DateTime ($ExerDate, $ExerDate, {DEFDATE}, '', '')
  print $Name                                              (+1,001,030)
  print $EmplId                                            (  ,032,010)
  print $GrantNbr                                          (  ,046,010)
  print $VestDate                                          (  ,058,010)
  print $VestSchedId                                       (  ,070,010)
  print $ExerDate                                          (  ,082,010)
  print #ExerShares                                        (  ,094,017) edit 99,999,999.999999
  print $ExerMethod                                        (  ,114,010)
  print #Years                                             (  ,126,010) edit 999.999999

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Single-Summary
! Descr:   Prints the Weighted Average Expected Life.
!-----------------------------------------------------------------------
Begin-Procedure Print-Single-Summary

  if #TotalGranted > 0
    let #WeightedAverage = #GrantedLife / #TotalGranted
  else
    let #WeightedAverage = 0
  end-if
  print $WeightedLbl                                       (+2,098,030)
  print ':'                                                (  ,   ,   )
  print #WeightedAverage                                   (  ,144,010) edit 999.999999

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Multiple-Summary
! Descr:   Prints the Weighted Average Expected Life.
!-----------------------------------------------------------------------
Begin-Procedure Print-Multiple-Summary

  if #SumExercised > 0
    let #WeightedAverage = #ExpectedLife / #SumExercised
  else
    let #WeightedAverage = 0
  end-if
  print $WeightedLbl                                       (+2,092,030)
  print ':'                                                (  ,   ,   )
  print #WeightedAverage                                   (  ,126,010) edit 999.999999

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'stgetfmv.sqc'   ! Get Grant FMV
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer Procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime Procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   
