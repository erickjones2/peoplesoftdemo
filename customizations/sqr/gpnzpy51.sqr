!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:58:36                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!
!***********************************************************************
!                                                                      *
! Global Payroll       Release 8                                       *
!***********************************************************************

!***********************************************************************
!                                                                      *
!  This SQR generates the Net Payments Report                          *
!                                                                      *
!  The user has several the option of generating a summary or detail   *
!  report.                                                             *
!                                                                      *
!***********************************************************************
!XXX    : SN : Data Retrieval SQL is incorrect when referencing the    *
!XXX    :    : max(RSLT_SEG_NUM). There is no join for emplid and other*
!       :    : key fields. In detail Report                            *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#include 'setup32.sqc'  !page layout and printer definition
#include 'number.sqc'   !Routines to format numbers
#include 'datetime.sqc' !Routines for date and time formatting
#include 'prcsapi.sqc'  !Replaces stdapi.sqc

#define ColR   155
begin-report

#IFDEF DEBUGA
 lET $PRCS_OPRID = 'PS'
 LET $PRCS_RUN_CNTL_ID = '1'
#ENDIF
        do Init-Processing
        Do Stdapi-Init
        do Get-Parameters
        do Process-PE
        do Reset                        ! called from reset.sqc
        do Delete-RunControl
        Do Stdapi-Term
end-report
!
!***********************************************************************
! Init-Processing                                                      *
!***********************************************************************
begin-procedure Init-Processing
        do Init-Datetime
        do Get-Current-Datetime
        do Init-Report
        do Define-Prcs-Vars
!        do Get-Language-Codes
end-procedure ! Init-Processing
!
!***********************************************************************
! Init-Report                                                          *
!***********************************************************************
begin-procedure Init-Report

#define Col1   1
#define Col2   14
#define Col3   27
#define Col4   38
#define Col5   88
#define Col6   102
#define Col7   118
#define Col8   130
#define Col9   146
#define Col10  162

    Let $ReportID = 'GPNZPY51'

    Let $Curr_Language_Cd = 'ENG'

    do Init_Report_Translation ($ReportID, $curr_language_cd)

    do Get_Field_Information ($ReportID, 'PAY_ENTITY'   , $Pay_Entity_Title, #DW)
    do Get_Field_Information ($ReportID, 'DEBIT_DT'     , $Debit_Dt_Title,   #DW)
    do Get_Field_Information ($ReportID, 'CAL_RUN_ID'   , $Cal_Run_Title,    #DW)
    do Get_Field_Information ($ReportID, 'EMPLID'       , $EMPLID_Title,     #DW)
    do Get_Field_Information ($ReportID, 'EMPL_RCD'     , $ERCD_Title,       #DW)
    do Get_Field_Information ($ReportID, 'NAME'         , $NAME_Title,       #DW)
    do Get_Field_Information ($ReportID, 'GP_AMT'       , $AMT_Title,        #DW)
    do Get_Field_Information ($ReportID, 'PAYMENT_MTHD' , $Mode_Title,       #DW)
    do Get_Field_Information ($ReportID, 'TOTAL_AMOUNT' , $Total_Amt_Title,  #DW)
    do Get_Field_Information ($ReportID, 'TOTAL_RECORDS', $Total_Recs_Title, #DW)
    do Get_Field_Information ($ReportID, 'NET_PAY_DTL'  , $Net_Pay_Dtl_Title,#DW)
    do Get_Field_Information ($ReportID, 'NET_PAY_SUM'  , $Net_Pay_Sum_Title,#DW)
    do Get_Field_Information ($ReportID, 'BANK_NM'      , $BankNameLbl      ,#DW)
    do Get_Field_Information ($ReportID, 'BRANCH_EC_CD' , $BranchIDLbl      ,#DW)
    do Get_Field_Information ($ReportID, 'ACCOUNT_EC_ID', $AccountNoLbl     ,#DW)
    do Get_Field_Information ($ReportID, 'PAYMENT_STATUS', $PaymentStatus     ,#DW)

end-procedure ! Init-Report


!***************************
Begin-Procedure Print-Heading

#Include 'stdhdg01.sqc'

  Let #DL = {Colr} +25
  print  '-'                   (+1,1,#DL)  fill
  print $Cal_Run_Title         (+1,1)
  print ':'                    (0,20)
  print $Cal_Run_ID            (0,23)
  print $Cal_Run_Descr         (0,42)
  print $Debit_Dt_Title        (+1,1)
  print ':'                    (0,20)
  print $DebitDt               (0,23) ! edit 'DD/MM/YYYY'
  print $Pay_Entity_Title      (+1,1)
  print ':'                    (0,20)
  Print $PayEntity             (0,23)
  print $Pay_Entity_Descr      (0,42)
  print  '-'                   (+1,1,#DL)  fill

  Let #LC = 13

  If $ReportLvl = '1' ! Detail Report
     print $EMPLID_Title (+1,{Col2})
     print $ERCD_Title   (0,{Col3})
     print $NAME_Title   (0,{Col4})
     Let #AmtTitle = {Col5} + 5
     print $AMT_Title    (0,#AmtTitle)
     print $Mode_Title   (0,{Col6})
     print $BankNameLbl  (0,{Col7})
     print $BranchIDLbl  (0,{Col8})
     print $AccountNoLbl (0,{Col9})
     print $PaymentStatus (0,{Col10})
     print  '-'          (+1,1,#DL)  fill
  end-if

End-Procedure
!
!***********************************************************************
! Get-Parameters                                                    *
!***********************************************************************
begin-procedure Get-Parameters
Begin-SELECT
RC.CAL_RUN_ID
RC.GPNZ_REPORT_LVL
     Let $Cal_Run_ID = &RC.CAL_RUN_ID
     let $ReportLvl  = &RC.GPNZ_REPORT_LVL

  FROM PS_GPNZ_NET_PAY_RC RC
    WHERE RC.OPRID         = $PRCS_OPRID
        AND RC.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
End-SELECT

end-procedure ! Get-Parameters
!
!***********************************************************************
! Process-PE                                                           *
!***********************************************************************
begin-procedure Process-PE
   Let #PageNo = 1
BEGIN-SELECT DISTINCT
PE.PAY_ENTITY
CR.DESCR
PE.DESCR
B.CAL_ID
A.RUN_TYPE

   Let $Cal_Run_Descr = &CR.DESCR
   Let $Pay_Entity_Descr = &PE.DESCR
   Let $PayEntity = &PE.PAY_ENTITY
   Let $Runtype = &A.RUN_TYPE
   Let $CAL_ID = &B.CAL_ID

   IF $Runtype <> ' '
    DO Call-Detail-Report
   else
    Do Get-OffCycle-RunType
   end-if


   FROM PS_GP_CAL_RUN_DTL A,
        PS_GP_PAYMENT B,
        PS_GP_CAL_RUN CR,
        PS_GP_PYENT PE
 WHERE A.CAL_RUN_ID = B.CAL_RUN_ID
  AND A.PAY_ENTITY = B.PAY_ENTITY
  AND A.GP_PAYGROUP = B.GP_PAYGROUP
  AND A.CAL_ID = B.CAL_ID
  AND A.CAL_RUN_ID = $Cal_Run_ID
  AND A.CALC_TYPE  = 'P'
  AND A.CAL_RUN_ID = CR.CAL_RUN_ID
  AND A.PAY_ENTITY = PE.PAY_ENTITY
UNION
SELECT
PE.PAY_ENTITY
,CR.DESCR
,PE.DESCR
,B.CAL_ID
,' '

   FROM PS_GP_CAL_RUN_OFF A,
        PS_GP_PAYMENT B,
        PS_GP_CAL_RUN CR,
        PS_GP_PYENT PE

 WHERE A.CAL_RUN_ID  = B.CAL_RUN_ID
  AND A.GP_PAYGROUP  = B.GP_PAYGROUP
  AND A.CAL_RUN_ID   = $Cal_Run_ID
  AND A.CAL_RUN_ID   = CR.CAL_RUN_ID
  AND B.PAY_ENTITY   = PE.PAY_ENTITY


End-SELECT
End-Procedure ! Process-PE
!
!***********************************************************************
! Detail-Report                                                        *
!***********************************************************************
begin-procedure Detail-Report
   Let #TotRows = 0
   Let #PAmount = 0
   Let #LC = 65
   LET $PrevEmplid = ''

BEGIN-SELECT
SUM(G.GP_PMT_AMT)  &Amount
G.EMPLID
G.EMPL_RCD
G.PAYMENT_MTHD
G.DEBIT_DT
G.PMT_STATUS
NDD.ACCOUNT_ID

    Let $Emplid  = &G.EMPLID
    Let $EmplRcd = &G.EMPL_RCD
    Let $PayMthd = &G.PAYMENT_MTHD
    Let $PmtStatus = &G.PMT_STATUS
    Let #Amount  = &Amount
    Let #accountID = &NDD.ACCOUNT_ID
    Do Format-DateTime(&G.DEBIT_DT, $DebitDt, {DEFDATE},'','')

    if $Print =  'Y'
! The value of $EarlierPayMethod is null the 1st time. after that it will be the same as the paymthd of previous row.
! Thus Fieldvalue will now have the same value as the earlier row after this assignment.

       Let $FieldValue = $EarlierPayMethod
       if $FieldValue <> $PayMthd
          let $FieldName = 'PAYMENT_MTHD'
          let $FieldValue = $PayMthd
          do Read-Translate-Table
          Let $PayMethodDescr = $XlatLongName
       end-if

! We need to take a copy of PayMthd,because the fieldvalue will get modified to get PMTSTatus value.

       Let $EarlierPayMethod = $PayMthd

       Let $FieldValue = $EarlierPmtStatus
       if $FieldValue <> $PmtStatus
          let $FieldName = 'PMT_STATUS'
          let $FieldValue = $PmtStatus
          do Read-Translate-Table
          Let $PmtStatusDescr = $XlatLongName

       end-if

       Let $EarlierPmtStatus = $PmtStatus

       if $Emplid <> $PrevEmplid
          Do Get-Name
       End-if

       Do Print-Values

       Let $PrevEmplid = $Emplid
    end-if

    Add 1 to #TotRows
    Add #Amount to #PAmount



    FROM PS_GP_PAYMENT G
         ,PS_GP_NET_DIST_DTL NDD
    WHERE G.CAL_RUN_ID = $Cal_Run_ID
      AND G.CAL_ID = $CAL_ID
      AND G.PAY_ENTITY = $PayEntity
      AND G.PMT_TYPE   = '01'
      AND G.EMPLID = NDD.EMPLID
      AND G.EMPL_RCD = NDD.EMPL_RCD
      AND G.GP_PMT_AMT > 0
      AND NDD.EMPLID = G.EMPLID
      AND NDD.EMPL_RCD = G.EMPL_RCD
      AND NDD.INSTANCE = G.INSTANCE
      AND NDD.RUN_TYPE = $Runtype
      AND NDD.EFFDT = (SELECT MAX(NDD1.EFFDT) FROM PS_GP_NET_DIST_DTL NDD1
                        WHERE NDD1.EMPLID = NDD.EMPLID
                          AND NDD1.EMPL_RCD = NDD.EMPL_RCD
                          AND NDD1.RUN_TYPE = NDD.RUN_TYPE
                          AND NDD1.EFFDT <= G.SEG_END_DT
                      )
GROUP BY G.EMPLID, G.EMPL_RCD, G.PAYMENT_MTHD, G.DEBIT_DT, G.PMT_STATUS, NDD.ACCOUNT_ID
END-SELECT
end-procedure ! Process-Main

!***********************************************************************
! Procedure : getAccountDetails
!***********************************************************************
Begin-Procedure getAccountDetails
begin-SELECT
A.COUNTRY_CD
A.BANK_CD
A.BRANCH_EC_CD
A.ACCOUNT_EC_ID
A.ACCOUNT_NAME
B.BANK_NM

          print &A.BANK_CD       (0,{Col7})
          print &A.BRANCH_EC_CD  (0,{Col8})
          print &A.ACCOUNT_EC_ID   (0,{Col9})

  FROM PS_PYE_BANKACCT A
    ,PS_BANK_EC_TBL  B
   WHERE A.EMPLID     = $Emplid
     AND A.COUNTRY_CD = B.COUNTRY_CD
     AND A.BANK_CD    = B.BANK_CD
     AND A.ACCOUNT_ID = #accountID
end-SELECT
end-procedure
!
!***********************************************************************
! Get-Name
!***********************************************************************
Begin-Procedure Get-Name
Begin-SELECT
A.NAME
     Let $Name = &A.NAME
   FROM PS_NAMES A
  WHERE A.EMPLID = $Emplid
    AND A.NAME_TYPE = 'PRI'
End-SELECt
End-Procedure
!
!***********************************************************************
! Print-Values
!***********************************************************************
Begin-procedure Print-Values
   if #LC > 50
      if #PageNo > 1
         new-page
      end-if
      Do Print-Heading
      Add 1 to #PageNo
   End-if

   Print $Emplid   (#LC,{Col2})
   Print $EmplRcd  (#LC,{Col3})     edit '99999'
   Print $Name     (#LC,{Col4})
   Print #Amount   (#LC,{Col5})     edit '99999999.99'
   Print $PayMethodDescr (#LC,{Col6})

   if #accountID <> 0
      Do getAccountDetails
   End-if

   Print $PmtStatusDescr (#LC,{Col10})
   Let #LC = #LC + 1
End-Procedure

!***********************************************************************
! Call-Detail-Report                                                   *
! Called from Process-PE                                               *
! Calls Detail-Report                                                  *
!***********************************************************************
begin-procedure Call-Detail-Report
   IF $ReportLvl = '1' ! Detail Report
      Let $ReportTitle = $Net_Pay_Dtl_Title
      Let $Print = 'Y'
      Do Detail-Report
   Else
      Let $Print = 'N'
      Let $ReportTitle = $Net_Pay_Sum_Title
      Do Detail-Report

      if #PageNo > 1
         new-page
      end-if

      Do Print-Heading
      Add 1 to #PageNo
   End-if

   Let #LC = #LC + 4
   Print $Total_Amt_Title   (+2,61)
   Print #PAmount           (0,{Col5})     edit '99999999.99'
   Print $Total_Recs_Title  (+2,61)
   Print #TotRows           (0,{Col5})     edit '99999999'
end-procedure !Call-Detail-Report

!***********************************************************************
! Get-OffCycle-RunType                                                 *
! Called from Process-PE                                               *
! Calls Call-Detail-Report                                             *
! Gets Run-Type from OffCycle                                          *
!***********************************************************************
begin-procedure Get-OffCycle-RunType
BEGIN-SELECT DISTINCT
OFC.RUN_TYPE

    LET $Runtype = &OFC.RUN_TYPE
    DO Call-Detail-Report

FROM PS_GP_PYE_CAL OFC
WHERE CAL_RUN_ID = $Cal_Run_ID
END-SELECT
end-procedure !Get-OffCycle-RunType

!***********************************************************************
!
!***********************************************************************
! Delete-RunControl                                                    *
!***********************************************************************
begin-procedure Delete-RunControl
begin-SQL
DELETE FROM PS_GPNZ_NET_PAY_RC
    WHERE OPRID         = $PRCS_OPRID
        AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;
end-SQL

end-procedure ! Delete-RunControl
!
#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset.sqc'        ! Reset printer procedure
#include 'stdapi.sqc'   ! routines for process scheduler manipulation.

