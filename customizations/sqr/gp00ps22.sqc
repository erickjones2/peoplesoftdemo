!***********************************************************************
!  GP00PS22: Global Payroll Payslips - Dynamic Deductions for ALL      *
!            Countries.                                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!   This software and related documentation are provided under a       *
!   license agreement containing restrictions on use and               *
!   disclosure and are protected by intellectual property              *
!   laws. Except as expressly permitted in your license agreement      *
!   or allowed by law, you may not use, copy, reproduce,               *
!   translate, broadcast, modify, license, transmit, distribute,       *
!   exhibit, perform, publish or display any part, in any form or      *
!   by any means. Reverse engineering, disassembly, or                 *
!   decompilation of this software, unless required by law for         *
!   interoperability, is prohibited.                                   *
!   The information contained herein is subject to change without      *
!   notice and is not warranted to be error-free. If you find any      *
!   errors, please report them to us in writing.                       *
!                                                                      *
!   Copyright (C) 1988, 2013, Oracle and/or its affiliates.            *
!   All Rights Reserved.                                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:04:08:42                                 *
!       $Release:  HR92                                                *
!      $Revision:  101                                                 *
!                                                                      *
!***********************************************************************
#Define EmplDedArrSize 99
begin-setup

    create-array Name=EmplDedArr Size={EmplDedArrSize}
        Field=DeductionNm:Char
        Field=UserKey2:Char
        Field=PslpElnCat:Char
        Field=CurrAmt:Decimal
        Field=YtdAmt:Decimal

    create-array Name=PrintSetup Size=2
        Field=Report_Col1:Integer
        Field=Report_Col2:Integer
        Field=Report_Col3:Integer
        Field=DedDescr:Char
        Field=DedDescrLen:Integer
        Field=DedTitle:Char
        Field=DedTitleLen:Integer
        Field=CurDedTitle:Char
        Field=CurDedTitleLen:Integer
        Field=YtdDedTitle:Char
        Field=YtdDedTitleLen:Integer
        Field=TotalTitle:Char
        Field=TotalTitleLen:Integer
        Field=TaxableTitle:Char
        Field=TaxableTitleLen:Integer
        Field=CurDedTitleMask:Char
        Field=YtdDedTitleMask:Char
        Field=TotalCurrAmt:Decimal:3
        Field=TotalYtdAmt:Decimal:3
        Field=NonPrtCurrAmt:Decimal:3
        Field=NonPrtYtdAmt:Decimal:3


end-setup

!***********************************************************************
!                                                                      *
begin-procedure Get_Dyn_Deductions
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('ALL Deductions section GP00PS22.SQC ')
#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure Get_Dyn_Deductions')


    let $ReportID = 'GP00PSLP'
    let $Element_Cat = 'AND A.GPUS_PSLP_ELN_CAT IN ('
    let $Element_Cat =  $Element_Cat || '''30'','
    let $Element_Cat =  $Element_Cat || '''40'''
    let $Element_Cat =  $Element_Cat || ')'

    do Prepare_Dyn_EE_Deductions ($ReportID,$Element_Cat,'DED',
                                      #current-line,#page-count)

end-procedure ! Get_Dyn_Deductions

!***********************************************************************
!                                                                      *
begin-procedure Get_Dyn_EmplPaidBenefits
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('ALL Deductions section GP00PS22.SQC ')
#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure Get_Dyn_EmplPaidBenefits')

    let $ReportID = 'GP00PSLP'
    let $Element_Cat = 'AND A.GPUS_PSLP_ELN_CAT IN ('
    let $Element_Cat =  $Element_Cat || '''50'','
    let $Element_Cat =  $Element_Cat || '''52'''
    let $Element_Cat =  $Element_Cat || ')'

    do Prepare_Dyn_EE_Deductions ($ReportID,$Element_Cat,'DBD',
                                      #current-line,#page-count)

end-procedure ! Get_Dyn_EmplPaidBenefits


!***********************************************************************
!                                                                      *
begin-procedure Prepare_Dyn_EE_Deductions ($ReportID,$Element_Cat,
                $Caller,#current-line,#page-count)
!                                                                      *
!   $Caller = DED   -> Dynamic Employee Paid Deductions                *
!   $Caller = DBD   -> Dynamic Benefit Deductions                      *
!                                                                      *
!***********************************************************************
#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure Prepare_Dyn_EE_Deductions')

    clear-array  name = EmplDedArr
    let #EmplDedArrLast = 0
    clear-array  name = PrintSetup

    let #TotalCurrAmt   = 0
    let #TotalYtdAmt    = 0
    let #NonPrtCurrAmt  = 0
    let #NonPrtYtdAmt   = 0
    let #DedCnt         = 0
    let $section_printed = 'n'

    while ($section_printed = 'n')
        do get_start_page_line_number(#current-line, #page-count,
                                      #start-section-line-number,
                                      #start-section-page-number)
        do evaluate_space(#start-section-line-number,$space_left)
        if $space_left = 'n'
            if $gbl_Paycheck_To_Do = 'y'
                print 'CHECKKK' (#start-section-line-number,1) bold
                print 'CHECKKK' (+1,1) bold
                Add 2 to #start-section-line-number
                move 'n' to $check_collision
                move 'n' to $gbl_Paycheck_To_Do
            else
                new-page
                Move 1 to #_gbl_curr_Section_Start_Line
                Move 1 to #start-section-line-number
                do Print_Dyn_EE_Deductions ($ReportID,$Element_Cat,$Caller,
                                                #start-section-line-number,
                                                #EmplDedArrLast)
                move 'y' to $section_printed
                break
            end-if
        end-if

        if $space_left = 'y'
            if $gbl_Paycheck_To_Do = 'y'
                do evaluate_bankdraft_collision(#start-section-line-number,
                                                $check_collision)
                if $check_collision = 'y'

                    print 'CHECKKK' (#start-section-line-number,1) bold
                    print 'CHECKKK' (+1,1) bold
                    Add 2 to #start-section-line-number
                    move 'n' to $check_collision
                    move 'n' to $gbl_Paycheck_To_Do
                else
                    do Print_Dyn_EE_Deductions ($ReportID,$Element_Cat,
                                                    $Caller,
                                                    #start-section-line-number,
                                                    #EmplDedArrLast)
                    move 'y' to $section_printed
                    break
                end-if
            else
                do Print_Dyn_EE_Deductions ($ReportID,$Element_Cat,
                                                $Caller,
                                                #start-section-line-number,
                                                #EmplDedArrLast)
                move 'y' to $section_printed
                break
            end-if
        end-if
    end-while

end-procedure ! Prepare_Dyn_EE_Deductions

!***********************************************************************
!                                                                      *
begin-procedure Print_Dyn_EE_Deductions ($ReportID,$Element_Cat,
                                             $Caller,
                                             #start-section-line-number,
                                             :#EmplDedArrLast)
!                                                                      *
!   $Caller = DED   -> Dynamic Employee Paid Deductions                *
!   $Caller = DBD   -> Dynamic Benefit Deductions                      *
!                                                                      *
!***********************************************************************
#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure Print_Dyn_EE_Deductions')

Begin-SELECT
MAX(AA.SLICE_END_DT)    &AA.SLICE_END_DT
    let $max_slice_end_dt   = &AA.SLICE_END_DT
FROM PS_GPUS_PSLP_RSLT AA
WHERE AA.JOBINSTANCE  = #_gbl_job_instance
AND AA.CAL_RUN_ID        = $_gbl_rc_Calendar_Group
AND AA.EMPLID            = $_gbl_tgt_Emplid
AND AA.PMT_GRP_ID        = #_gbl_tgt_Grp_ID
AND AA.GP_CNTRY_PSLP_ELN = $_gbl_GP_CNTRY_PSLP_ELN
AND AA.GP_ELN_SET        = $_gbl_GP_ELN_SET
End-SELECT


    let #Line_counter   = #start-section-line-number

Begin-SELECT
A.PIN_NUM               &A.PIN_NUM
A.CALC_RSLT_VAL         &A.DED_AMT
A.GPUS_PSLP_CURR_YTD    &A.GPUS_PSLP_CURR_YTD
A.GPUS_PSLP_ELN_CAT     &A.GPUS_PSLP_ELN_CAT
A.GPUS_PSLP_RES_DTL     &A.GPUS_PSLP_RES_DTL
A.GPUS_PSLP_TITLEOPT    &A.GPUS_PSLP_TITLEOPT
A.GPUS_PSLP_TITLE       &A.GPUS_PSLP_TITLE
A.PIN_CATEGORY          &A.PIN_CATEGORY
A.USER_KEY1             &A.USER_KEY1
A.USER_KEY2             &A.USER_KEY2
A.INSTANCE              &A.INSTANCE  
A.SLICE_END_DT          &A.SLICE_END_DT
    let #PinNum         = &A.PIN_NUM
    let #DedAmt         = &A.DED_AMT
    let #PSLP_Curr_Ytd  = &A.GPUS_PSLP_CURR_YTD
    let $PslpElnCat     = &A.GPUS_PSLP_ELN_CAT
    let $PslpResDtl     = &A.GPUS_PSLP_RES_DTL
    let $PinCategory    = &A.PIN_CATEGORY
    let $PslpTitleOpt   = &A.GPUS_PSLP_TITLEOPT
    let $PslpTitle      = &A.GPUS_PSLP_TITLE
    let $UserKey1       = &A.USER_KEY1
    let $UserKey2       = &A.USER_KEY2
    let #Instance       = &A.INSTANCE
    let $slice_end_dt   = &A.SLICE_END_DT
    Do get_pin_name(&A.PIN_NUM, $DeductionNm)

    do UpdDedArr (#PinNum,$DeductionNm,#DedAmt,#PSLP_Curr_Ytd,
                                $PslpElnCat, $PslpResDtl,$PinCategory,
                                $PslpTitleOpt,$PslpTitle,$UserKey1,$UserKey2,#Instance,#EmplDedArrLast,
                                $slice_end_dt,$max_slice_end_dt)
FROM PS_GPUS_PSLP_RSLT A
  WHERE A.JOBINSTANCE  = #_gbl_job_instance
    AND A.CAL_RUN_ID        = $_gbl_rc_Calendar_Group
    AND A.EMPLID            = $_gbl_tgt_Emplid
    AND A.PMT_GRP_ID        = #_gbl_tgt_Grp_ID
    AND A.GP_CNTRY_PSLP_ELN = $_gbl_GP_CNTRY_PSLP_ELN
    AND A.GP_ELN_SET        = $_gbl_GP_ELN_SET
   [$Element_Cat]
    ORDER BY A.EMPLID,A.PMT_GRP_ID,A.CAL_ID,A.GP_PSLP_ORDER,A.RSLT_SEG_NUM,
           A.SEQ_NUM,A.GPUS_PSLP_CURR_YTD
End-SELECT

    do PrintDedArr ($ReportID,$Caller,#BoxStartCol,#Line_counter,
                    #EmplDedArrLast)

    let #_gbl_Line_Ctr = #Line_counter

end-procedure ! Print_Dyn_EE_Deductions

!***********************************************************************
!                                                                      *
begin-procedure GetTranslatedDescr (#PinNum,:$DeductionNm)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure GetTranslatedDescr')

Begin-SELECT on-error=SQL-Error
DESCR       &DESCR_PIN_LNG

    let $DeductionNm = &DESCR_PIN_LNG

FROM PS_GP_PIN_LANG
WHERE PIN_NUM     = #PinNum
  AND LANGUAGE_CD = $_gbl_tgt_lang_cd
end-SELECT

end-procedure ! GetTranslatedDescr

!***********************************************************************
!                                                                      *
begin-procedure UpdDedArr (#PinNum,$DeductionNm,#DedAmt,:#PSLP_Curr_Ytd,
                                $PslpElnCat, $PslpResDtl,$PinCategory,
                                $PslpTitleOpt,$PslpTitle,$UserKey1,$UserKey2,#Instance,:#EmplDedArrLast,
                                $slice_end_dt,$max_slice_end_dt)
!                                                                      *
!***********************************************************************

Do get_appropriate_description(#PinNum, $PslpTitleOpt,$PslpTitle,$PinCategory,$UserKey1, $UserKey2,$DeductionNm)
    let #i=1

   #debug2 show '**              UpdDedArr  Pin Num = ' #PinNum ' Deduction name = '$DeductionNm ' Deduction Amount = '#DedAmt
   
    while #i <= #EmplDedArrLast
        if Rtrim(EmplDedArr.DeductionNm(#i),' ') = Rtrim($DeductionNm,' ')
          if Rtrim(EmplDedArr.UserKey2(#i),' ') = Rtrim($UserKey2,' ')
            if #PSLP_Curr_Ytd = 20  ! YTD Amount
               if $slice_end_dt = $max_slice_end_dt
                  Array-Add #DedAmt to EmplDedArr (#i) YtdAmt
               end-if
            else
               Array-Add #DedAmt to EmplDedArr (#i) CurrAmt
            end-if
            Break
          end-if
        end-if
        let #i = #i + 1
    end-while
  if $PslpResDtl = 'N'

    if #i > #EmplDedArrLast

        let EmplDedArr.PslpElnCat (#i) = $PslpElnCat
        let EmplDedArr.UserKey2 (#i) = $UserKey2

        if $PslpElnCat = '52'
            let EmplDedArr.DeductionNm(#i) = Rtrim($DeductionNm,' ') || ' *'
        else
            let EmplDedArr.DeductionNm(#i) = Rtrim($DeductionNm,' ')
        end-if
        if #PSLP_Curr_Ytd = 20  ! YTD Amount
           if $slice_end_dt = $max_slice_end_dt
              let EmplDedArr.YtdAmt (#i)     = #DedAmt
           end-if
        else
           let EmplDedArr.CurrAmt(#i)     = #DedAmt
        end-if
        let #EmplDedArrLast = #i
    end-if
end-if
if $PslpResDtl = 'Y'
   if #i > #EmplDedArrLast
       let #i = #EmplDedArrLast + 1
       let EmplDedArr.PslpElnCat (#i) = $PslpElnCat
       let EmplDedArr.UserKey2 (#i) = $UserKey2
        if $PslpElnCat = '52'
            let EmplDedArr.DeductionNm(#i) = Rtrim($DeductionNm,' ') || ' *'
        else
            let EmplDedArr.DeductionNm(#i) = Rtrim($DeductionNm,' ')
        end-if
        if #PSLP_Curr_Ytd = 20  ! YTD Amount
           if $slice_end_dt = $max_slice_end_dt
              let EmplDedArr.YtdAmt (#i)     = #DedAmt
           end-if
        else
           let EmplDedArr.CurrAmt(#i)     = #DedAmt
        end-if
        let #EmplDedArrLast = #i
   end-if
end-if
end-procedure ! UpdDedArr

!***********************************************************************
!                                                                      *
begin-procedure PrintDedArr ($ReportID,$Caller,#BoxStartCol,
                             :#Line_counter,#EmplDedArrLast)
!                                                                      *
!***********************************************************************

#debug do Pslp-Proc-Debug-Msg('ALL Deductions section: Procedure PrintDedArr')


    let $PrintHeading = 'Y'
    let #i=1
    while #i < {EmplDedArrSize}

        if Rtrim(EmplDedArr.PslpElnCat(#i),' ') = '' !and

           Break
        end-if

        if $PrintHeading = 'Y'
            do Print_Headings ($ReportID,$Caller,#BoxStartCol,#Line_counter)
            let $PrintHeading = 'N'
        end-if

        if $gbl_Paycheck_To_Do = 'Y'

            if #Line_counter >= (#_gbl_Paycheck_Start_Line - 2)

              !  do Print_Check_USA
                let $_gbl_Paycheck_To_Do = 'N'
                let #Line_counter = #_gbl_curr_Section_Start_Line
                new-page
                do Print_Headings ($ReportID,$Caller,#BoxStartCol,
                                   #Line_counter)
            end-if
        end-if

        do Print_Empl_Deductions (#Line_counter,#i)

        let #i = #i + 1
    end-while


    if $PrintHeading = 'Y'
        do Print_Headings ($ReportID,$Caller,#BoxStartCol,#Line_counter)
        let $PrintHeading = 'N'
    end-if

    do Print_Ded_Totals ($Caller,#Line_counter)

end-procedure ! PrintDedArr

!***********************************************************************
!                                                                      *
begin-procedure Print_Headings ($ReportID,$Caller,:#BoxStartCol,
                                :#Line_counter)
!                                                                      *
!***********************************************************************
columns 3

    let #BoxStartCol = 1
    let #BoxWidth = 126

    do Report_Setup ($ReportID,$Caller,#BoxStartCol)

    Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box 1 #_BoxThickness 12
    let $DedTitle = PrintSetup.DedTitle(1)
    if $Caller = 'DED'
         Print $DedTitle (#Line_counter,55) Bold
    else
         Print $DedTitle (#Line_counter,50) Bold
    end-if   
    let #Line_counter = #Line_counter + 1
    Graphic (#Line_counter,#BoxStartCol,#BoxWidth) Box 1 #_BoxThickness

    let $DedDescr       = PrintSetup.DedDescr(1)
    let #Report_Col     = PrintSetup.Report_Col1(1)
    let #DedDescrLen    = PrintSetup.DedDescrLen(1)
    Print $DedDescr       (#Line_counter,#Report_Col,#DedDescrLen)
    let $CurDedTitle    = PrintSetup.CurDedTitle(1)
    let #Report_Col     = PrintSetup.Report_Col2(1)
    let #CurDedTitleLen = PrintSetup.CurDedTitleLen(1)
    let $CurDedTitle    = lpad($CurDedTitle,#CurDedTitleLen,' ')
    Print $CurDedTitle    (#Line_counter,#Report_Col,#CurDedTitleLen)
    let $YTDDedTitle    = PrintSetup.YtdDedTitle(1)
    let #Report_Col     = PrintSetup.Report_Col3(1)
    let #YTDDedTitleLen = PrintSetup.YtdDedTitleLen(1)
    let $YTDDedTitle    = lpad($YTDDedTitle,#YTDDedTitleLen,' ')
    Print $YTDDedTitle    (#Line_counter,#Report_Col,#YTDDedTitleLen)

end-procedure ! Print_Headings

!***********************************************************************
!                                                                      *
begin-procedure Report_Setup ($ReportID,$Caller,#BoxStartCol)
!                                                                      *
!***********************************************************************

    do Init_Report_Translation ($ReportID, $_gbl_tgt_lang_cd)

    Evaluate $Caller
        when = 'DED'
            do Get_Field_Information ($ReportID, 'DEDTITLE', $DedTitle,
                                      #DedTitleLen)
            let PrintSetup.DedTitle(1)    = $DedTitle
            let PrintSetup.DedTitleLen(1) = #DedTitleLen
            Break

        when = 'DBD'
            do Get_Field_Information ($ReportID, 'ERPAIDDEDDESCR', $DedTitle,
                                      #DedTitleLen)
            let PrintSetup.DedTitle(1)    = $DedTitle
            let PrintSetup.DedTitleLen(1) = #DedTitleLen
            Break

        When-Other
            Break
    End-Evaluate

    let #Report_Col1                    = #BoxStartCol + 1
    let PrintSetup.Report_Col1(1)       = #Report_Col1
    do Get_Field_Information ($ReportID, 'DESCR_LBL', $DedDescr, #DedDescrLen)
    let #DedDescrLen                    = 25
    let PrintSetup.DedDescr(1)          = $DedDescr
    let PrintSetup.DedDescrLen(1)       = #DedDescrLen
    let #Report_Col2                    = #Report_Col1 + #DedDescrLen + 12
    let PrintSetup.Report_Col2(1)       = #Report_Col2
    do Get_Field_Information ($ReportID, 'CUR_LBL', $CurDedTitle,
                              #CurDedTitleLen)
    let PrintSetup.CurDedTitle(1)       = $CurDedTitle
    let #CurDedTitleLen                 = 10
    let PrintSetup.CurDedTitleLen(1)    = #CurDedTitleLen
    let #Report_Col3                    = #Report_Col2 + #CurDedTitleLen + 12
    let PrintSetup.Report_Col3(1)       = #Report_Col3
    let $CurDedTitle                    = lpad($CurDedTitle,#CurDedTitleLen,' ')
    do PrepareMask(#CurDedTitleLen,'Y',$CurDedTitleMask)
    let PrintSetup.CurDedTitleMask(1)   = $CurDedTitleMask
    do Get_Field_Information ($ReportID, 'YTD_LBL', $YTDDedTitle,
                              #YTDDedTitleLen)
    let #YTDDedTitleLen                 = 10
    let PrintSetup.YtdDedTitle(1)       = $YTDDedTitle
    let PrintSetup.YtdDedTitleLen(1)    = #YTDDedTitleLen
    let $YTDDedTitle = lpad($YTDDedTitle,#YTDDedTitleLen,' ')
    do PrepareMask(#YTDDedTitleLen,'Y',$YTDDedTitleMask)
    let PrintSetup.YtdDedTitleMask(1)   = $YTDDedTitleMask
    do Get_Field_Information ($ReportID, 'TOTAL_LBL', $TotalTitle,
                              #TotalTitleLen)
    let #TotalTitleLen                  = 10
    let PrintSetup.TotalTitle(1)        = $TotalTitle
    let PrintSetup.TotalTitleLen(1)     = #TotalTitleLen

end-procedure ! Report_Setup

!***********************************************************************
!                                                                      *
begin-procedure Print_Empl_Deductions (:#Line_counter,#RowNum)
!                                                                      *
!***********************************************************************

    let #Line_counter     = #Line_counter + 1
    let $DeductionNm      = EmplDedArr.DeductionNm(#RowNum)
    if Rtrim($DeductionNm,' ') <> ''

        let #CurrAmt          = EmplDedArr.CurrAmt(#RowNum)
        let #YtdAmt           = EmplDedArr.YtdAmt(#RowNum)

        let #Report_Col       = PrintSetup.Report_Col1    (1)
        let #DedDescrLen      = PrintSetup.DedDescrLen    (1)
        Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

        let #Report_Col       = PrintSetup.Report_Col2    (1)
        let #CurDedTitleLen   = PrintSetup.CurDedTitleLen (1)
        let $CurDedTitleMask  = PrintSetup.CurDedTitleMask(1)
        Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                               Edit :$CurDedTitleMask

        Array-Add #CurrAmt to PrintSetup(1) TotalCurrAmt (0)

        let #Report_Col       = PrintSetup.Report_Col3    (1)
        let #YTDDedTitleLen   = PrintSetup.YtdDedTitleLen (1)
        let $YTDDedTitleMask  = PrintSetup.YtdDedTitleMask(1)
        Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                               Edit :$YTDDedTitleMask

        Array-Add #YtdAmt  to PrintSetup(1) TotalYtdAmt  (0)
    end-if

end-procedure ! Print_Empl_Deductions

!***********************************************************************
!                                                                      *
begin-procedure Print_Ded_Totals ($Caller,:#Line_counter)
!                                                                      *
!***********************************************************************

    let #Line_counter     = #Line_counter + 1

    let #CurrAmt          = PrintSetup.TotalCurrAmt   (1,0)
    let #YtdAmt           = PrintSetup.TotalYtdAmt    (1,0)

    if #CurrAmt <> 0 or
       #YtdAmt  <> 0

        let $DeductionNm      = PrintSetup.TotalTitle     (1)
        let #Report_Col       = PrintSetup.Report_Col1    (1)
        let #DedDescrLen      = PrintSetup.DedDescrLen    (1)
        Print $DeductionNm    (#Line_counter,#Report_Col,#DedDescrLen)

        let #Report_Col       = PrintSetup.Report_Col2    (1)
        let #CurDedTitleLen   = PrintSetup.CurDedTitleLen (1)
        let $CurDedTitleMask  = PrintSetup.CurDedTitleMask(1)
        Print #CurrAmt        (#Line_counter,#Report_Col,#CurDedTitleLen)
                               Edit :$CurDedTitleMask

        let #Report_Col       = PrintSetup.Report_Col3    (1)
        let #YTDDedTitleLen   = PrintSetup.YtdDedTitleLen (1)
        let $YTDDedTitleMask  = PrintSetup.YtdDedTitleMask(1)
        Print #YtdAmt         (#Line_counter,#Report_Col,#YTDDedTitleLen)
                               Edit :$YTDDedTitleMask
    end-if

    let #Line_counter = #Line_counter + 1
    Print ' '    (#Line_counter,1,1)

end-procedure ! Print_Ded_Totals

!***********************************************************************
!                                                                      *
begin-procedure PrepareMask(#FieldLen,$IncludeDec,:$Mask)
!                                                                      *
!***********************************************************************

!   $DecPos will carry the number of positions required for the decimal

    let $Mask = ''
    let #MaskPos = 0

    if $IncludeDec = 'Y'
        let #DecPos = 3
    else
        let #DecPos = 0
    end-if

    if #FieldLen <= #DecPos

        if #FieldLen = 1

            let $Mask = '9'
        else
            if #FieldLen = 2

                let $Mask = '.9'
            else

                if #FieldLen = 3

                    let $Mask = '.99'
                end-if
            end-if
        end-if
    end-if

    While #MaskPos < (#FieldLen - #DecPos)

        let #MaskPos = #MaskPos + 1
!       if #MaskPos = 1
!           let $Mask = 'B'
!       else
            let $Mask = $Mask || '9'
!       end-if
    End-While

    let $Mask = $Mask || '.99'

end-procedure ! PrepareMask

