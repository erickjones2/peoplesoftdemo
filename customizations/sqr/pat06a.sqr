!***********************************************************************
!  Non Detailed  Calculation Worksheet  PAT06A
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
! CHANGE LOG                                                           *
!                                                                      *
!  2/19/2006  PY - Fix for Calculations with All Plans checked         *
!                                                                      *
! 11/29/2001  PY - LEGISLATIVE REQUIREMENT                             *
!                  CHANGES TO INTERNAL REVENUE CODE SECTION 415        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/17:15:00:05                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#Include 'setup31.sqc'  !printer and page-size initialization
#Include 'usarpt.sqc'   !Get USA variables

#define col1bbbbbb 1,20
#define col2bbbbbb 22,20
#define col3bbbbbb 43,20
#define col4bbbbbb 64,20
#define col5bbbbbb 85,20
#define col6bbbbbb 106,18

begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do P-100-Init-Report
  do P-200-Process-Main
  do Reset
  do StdApi-Term
end-report

begin-HEADING 5
  #Include 'stdhdg01.sqc'
end-HEADING

!***********************************************************************
!***********************************************************************
begin-procedure P-100-Init-Report
  move 'PAT06A' to $ReportID
  move 'Calculation Worksheet - Formula Detail ' to $ReportTitle
  display $ReportTitle
  do StdApi-Init
  if $prcs_process_instance = ''
   do P-300-Ask-values
  else
   do P-400-Get-values-Pa
  end-if
  create-array name=operand size=100 field=name:char field=value:char
  create-array name=operand_store size=100 field=operand:char
  create-array name=lines   size=100 field=line:char
  let #column1     = 13
  let #column1.5   = 18
  let #column2     = 25
  let #column3     = 46
  let #column3.5   = 59
  let #column4     = 68
  let #columnRight = 72
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-200-Process-Main
  do P-500-Retrieve-Calc-Variables
  do P-525-Retrieve-Employee-Variables
  do P-550-Process-Plans-Main
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-300-Ask-Values
  input $calc_name_inpt            'Enter Calculation Name'
  input $emplid_inpt               'Enter Employee ID'
  let $calc_name        = rtrim($calc_name_inpt,'')
  let $emplid           = rtrim($emplid_inpt,'')
end-procedure

begin-procedure P-400-Get-Values-Pa
  do Select-Parameters-PA
  let $calc_name        = rtrim(&pa_run_cntl.calc_name,' ')
  let $emplid           = rtrim(&pa_run_cntl.emplid,' ')
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-500-Retrieve-Calc-Variables
   print 'Calculation'                  (+1,#column1)
let $sql-statement = 'PAT06A - Calculation Variables select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CALC.DESCR                                (,#Column2)
   print '('                              (,#ColumnRight)
CALC.CALC_NAME                            (,,)
   print ')'                              (,,)
   print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' (+1,#column1)
   print 'Rules as of Date:'            (+1,#Column2)
CALC.ASOFDATE
  move '1' to $Year4
  do Format-DateTime(&CALC.ASOFDATE,$calc.asofdate, {DEFDATE}, '', '',)
  print $calc.asofdate                    (,+1)
{DateTimeOut-Prefix}CALC.CALC_TS{DateTimeOut-Suffix} &CALC.CALC_TS
  move '1' to $Year4
  move '1' to $TLZero
  do Format-DateTime(&CALC.CALC_TS, $calc.calc_ts, {DEFDATE}, 'time', '',)
  let $calc.calc_ts_date = substr($calc.calc_ts,1,10)
  let $calc.calc_ts_time = ltrim(substr($calc.calc_ts,12,10),'')
  print 'Run Date: '                      (,+4)
  print $calc.calc_ts_date                (,+1)
  print 'Run Time: '                      (,+2)
  print $calc.calc_ts_time                (,+1)
FROM PS_PA_CALCULATION CALC
WHERE CALC.CALC_NAME    = $calc_name
END-SELECT
end-procedure

begin-procedure P-525-Retrieve-Employee-Variables
let $sql-statement = 'PAT06A - Employee Variables select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
   print 'Calc Reason: '                         (+1,#Column2)
EMP_VW.CALC_REASON
   let $fieldname  = 'CALC_REASON'
   let $fieldvalue = rtrim(&emp_vw.calc_reason,' ')
   do read-translate-table
   let $reason = $xlatlongname
   print $reason                                 (,+1)
   print '('                                     (,+2)
EMP_VW.EVENT_DT
   move '1' to $Year4
   do Format-DateTime(&emp_vw.event_dt,$emp_vw.event_dt, {DEFDATE}, '', '',)
   print $emp_vw.event_dt                        (,,)
   print ')'                                     (,,)
   print 'Employee'                            (+2,#Column1)
EMP_VW.NAME                                      (,#Column2)
   print '('                                     (,#ColumnRight)
EMP_VW.EMPLID                                    (,,)
   print ')'                                     (,,)
   print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' (+1,#column1)
   print 'Birthdate: '                         (+1,#Column2)
EMP_VW.BIRTHDATE
   move '1' to $Year4
   do Format-DateTime(&emp_vw.birthdate,$emp_vw.birthdate, {DEFDATE}, '', '',)
   print $emp_vw.birthdate                       (,+1)
   print 'Sex: '                                 (,+4)
EMP_VW.SEX                                       (,,)
   print 'Soc Sec Number: '                      (,+4)
PERS_NID.NATIONAL_ID
  let $nid = edit(&pers_nid.national_id,'xxx-xx-xxxx')
  print $nid                                     (,,)
  print 'Marital Status:'                      (+1,#Column2)
  print 'Spouse Name/Birthdate:'                 (,#Column3)
EMP_VW.MAR_STATUS
  let $fieldname = 'MAR_STATUS'
  let $fieldvalue = rtrim(&emp_vw.mar_status,' ')
  do read-translate-table
  let $mar_status = $xlatlongname
  print $mar_status                            (+1,#Column2)
EMP_VW.SPOUSE_NAME                               (,#Column3)
  print '('                                      (,+2)
EMP_VW.SPOUSE_BIRTHDATE
   move '1' to $Year4
   do Format-DateTime(&emp_vw.spouse_birthdate,$emp_vw.spouse_birthdate, {DEFDATE}, '', '',)
   print $emp_vw.spouse_birthdate                (,,)
  print ')'                                      (,,)
FROM PS_PA_CLC_EMP_VW EMP_VW,
     PS_PERS_NID      PERS_NID
WHERE EMP_VW.CALC_NAME    = $calc_name
  AND EMP_VW.EMPLID       = $emplid
  AND EMP_VW.EMPLID       = PERS_NID.EMPLID
  AND PERS_NID.COUNTRY    = {NID_COUNTRY}
  AND PERS_NID.NATIONAL_ID_TYPE  = $PAYROLL_NID_TYPE
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-550-Process-Plans-Main
let $sql-statement = 'PAT06A - Process Plans Main select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
  print 'Plan'                                   (+2,#column1)
PA_PLAN.DESCR                                     (,#Column2)
  print '('                                        (,#ColumnRight)
PA_PLAN.BENEFIT_PLAN                          (,,)
  print ')'                                        (,,)
  print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~' (+1,#column1)
  print 'Benefit Commencement Age: '             (+1,#column2)
CLC_DATES.BEN_CMCMNT_AGE                           (,,)
  print 'Date: '                                   (,+1)
CLC_DATES.BEN_CMDT_DATE
   move '1' to $Year4
   do Format-DateTime(&CLC_DATES.BEN_CMDT_DATE,$clc_dates.ben_cmdt_date, {DEFDATE}, '', '',)
   print $clc_dates.ben_cmdt_date                  (,,)
   print 'Lump Sum Age: '                          (,+4)
CLC_DATES.LUMP_SUM_AGE                             (,,)
   print 'Date: '                                  (,+1)
CLC_DATES.LUMP_SUM_DT
   move '1' to $Year4
   do Format-DateTime(&CLC_DATES.LUMP_SUM_DT,$clc_dates.lump_sum_dt, {DEFDATE}, '', '',)
   print $clc_dates.lump_sum_dt                 (,,)
  do P-600-Process-Plan
FROM PS_PA_CLC_DATES CLC_DATES, PS_PA_PEN_PLAN_VW PA_PLAN
WHERE CLC_DATES.CALC_NAME       = &CALC.CALC_NAME
  AND CLC_DATES.BENEFIT_PLAN    = PA_PLAN.BENEFIT_PLAN
  AND CLC_DATES.EMPLID          = $emplid
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-600-Process-Plan
let $sql-statement = 'PAT06A - Process Plan select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
PROC2.PROC_NAME
FNC_DFN.DEFINITION_NAME
  print 'Formula:'                               (+2,#column2)
  print '('                                        (,#ColumnRight)
  let $print_stmt = rtrim(&proc2.proc_name,' ')
  print $print_stmt                            (,,)
  print ')'                                        (,,)
  print '==============================================================' (+1,#column2)
  do P-700-Define-Benefit-Formula
FROM PS_PA_PROC_USE     PROC2,
     PS_PA_FNC_RSLT_TBL FNC_RSLT,
     PS_PA_FUNCTN_RESLT FNC_DFN
WHERE PROC2.BENEFIT_PLAN             = &pa_plan.benefit_plan
  AND PROC2.PROC_INSTALL_CD          = 'I'
  AND PROC2.PROC_NAME                = FNC_RSLT.FUNCTN_RESULT_NM
  AND PROC2.BENEFIT_PLAN             = FNC_RSLT.BENEFIT_PLAN
  AND PROC2.BENEFIT_PLAN             = FNC_DFN.BENEFIT_PLAN
  AND PROC2.EFFDT                   <= &calc.asofdate
  AND FNC_RSLT.FUNCTN_NAME          = 'BENCALC'
  AND FNC_DFN.FUNCTN_NAME           = 'BENCALC'
  AND FNC_DFN.FUNCTN_RESULT_NM      = FNC_RSLT.FUNCTN_RESULT_NM
  AND FNC_DFN.EFFDT                <= &calc.asofdate
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-700-Define-Benefit-Formula
   move 0 to #I
   move 0 to #line_count
let $sql-statement = 'PAT06A - Define Benefit Formula select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
MAX(PA_SEQ_NUM)   &max_seq_num
   do P-710-Hash-Out-Formula
   do P-800-Retrieve-Formula-Components
FROM PS_PA_CUSTOM2
WHERE CUSTOM_STMT_NAME = &fnc_dfn.definition_name
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-710-Hash-Out-Formula
  let #operand_count = 0
  let #operand_store_count = 0
  let #line_count = 0
let $sql-statement = 'PAT06A - Hash Out Formula select'
BEGIN-SELECT ON-ERROR=SQL-ERROR
CSTM2.STMT_TYPE
CSTM2.KEYWORD
CSTM2.PA_SEQ_NUM
CSTM2.OPERAND1
CSTM2.OPERAND2
CSTM2.OPERAND3
CSTM2.OPERAND1_TYP
CSTM2.OPERAND2_TYP
CSTM2.OPERAND3_TYP
CSTM2.OPERATOR1
CSTM2.OPERATOR2
   do P-750-Analyze-Custom-Stmt-Line
FROM PS_PA_CUSTOM2 CSTM2
WHERE CSTM2.CUSTOM_STMT_NAME = &fnc_dfn.definition_name
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-750-Analyze-Custom-Stmt-Line
   let #max_seq_num  = &max_seq_num
   let $stmt_type    = rtrim(&cstm2.stmt_type,' ')
   let $keyword      = rtrim(&cstm2.keyword,' ')
   let #pa_seq_num   = &cstm2.pa_seq_num
   let $operand1     = rtrim(&cstm2.operand1,' ')
   let $operand2     = rtrim(&cstm2.operand2,' ')
   let $operand3     = rtrim(&cstm2.operand3,' ')
   let $operand1_typ = rtrim(&cstm2.operand1_typ,' ')
   let $operand2_typ = rtrim(&cstm2.operand2_typ,' ')
   let $operand3_typ = rtrim(&cstm2.operand3_typ,' ')
   let $operator1    = rtrim(&cstm2.operator1,' ')
   let $operator2    = rtrim(&cstm2.operator2,' ')
   if $operator2     = 'AN'
      let $operator2 = 'AND'
   end-if
   let $hold_operand1     = $operand1
   let $hold_operand2     = $operand2
   let $hold_operand3     = $operand3
   if $operand1_typ = 'A' and substr($operand1,1,4) != 'TEMP'
     let #i = 0
     move 'N' to $found_flag
     while #i <= #operand_store_count
       get $operand_compare1 from operand_store(#i)
       if $operand_compare1 = $operand1
          move 'Y' to $found_flag
       end-if
       add 1 to #i
     end-while
     if $found_flag = 'N'
       put $operand1 into operand_store(#operand_store_count)
       add 1 to #operand_store_count
     end-if
   end-if

   if $operand2_typ = 'A' and substr($operand2,1,4) != 'TEMP'
     let #i = 0
     move 'N' to $found_flag
     while #i <= #operand_store_count
       get $operand_compare1 from operand_store(#i)
       if $operand_compare1 = $operand2
          move 'Y' to $found_flag
       end-if
       add 1 to #i
     end-while
     if $found_flag = 'N'
       put $operand2 into operand_store(#operand_store_count)
       add 1 to #operand_store_count
     end-if
   end-if

   if $operand3_typ = 'A' and substr($operand3,1,4) != 'TEMP'
     let #i = 0
     move 'N' to $found_flag
     while #i <= #operand_store_count
       get $operand_compare1 from operand_store(#i)
       if $operand_compare1 = $operand3
          move 'Y' to $found_flag
       end-if
       add 1 to #i
     end-while
     if $found_flag = 'N'
       put $operand3 into operand_store(#operand_store_count)
       add 1 to #operand_store_count
     end-if
   end-if
!*    ----------    R e t r i e v e  O l d  O p e r a n d s  -------
        let #i = 0
        while #i <= #operand_count
          get $operand_compare $operand_value from operand(#i)
          if $operand_compare = $operand1
             let $operand1 = $operand_value
          end-if
          if $operand_compare = $operand2
             let $operand2 = $operand_value
          end-if
          let #i = #i + 1
        end-while
!*    ---------------------------------------------------------------
      do P-760-Create-Equation
!*    ----------    P o s t   N e w   O p e r a n d s  -------
        move 'N' to $found_flag
        let #i = 0
        while #i <= #operand_count
          get $operand_compare $operand_value from operand(#i)
          if $operand_compare = $operand3
             let $operand_value = $hold_operand3
             put $operand_compare $operand_value into operand(#i)
             move 'Y' to $found_flag
          end-if
          let #i = #i + 1
        end-while
        if $found_flag = 'N'
         if $operand3 <> ' '
          put $operand3 $hold_operand3 into operand(#operand_count)
          add 1 to #operand_count
         end-if
        end-if
!*    ---------------------------------------------------------------
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-760-Create-Equation
   evaluate $stmt_type
    when = 'B'
     if $keyword = 'IF'
         if $operator2 = ' '
            if $line > ' '
              let $line = $line || $keyword || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ')'
            else
              let $line = $keyword || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ')'
            end-if
         end-if
         if $operator2 = 'AND' or $operator2 = 'OR'
            if $line > ' '
              let $line = $line || $keyword || ' ((' || $operand1 || ' '
                                  || $operator1 || ' ' || $operand2 || ') '
                                  || $operator2
            else
              let $line = $keyword || ' ((' || $operand1 || ' '
                                  || $operator1 || ' ' || $operand2 || ') '
                                  || $operator2
            end-if
         end-if
     else
      if $keyword = ' '
         if $operator2 = ' '
           if $line > ' '
            let $line = $line || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || '))'
           else
            let $line = '(' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || '))'
           end-if
         end-if
         if $operator2 = 'AND' or $operator2 = 'OR'
           if $line > ' '
            let $line = $line || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ') '
                                || $operator2
           else
            let $line = '(' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ') '
                                || $operator2
           end-if
         end-if
      else
       if $keyword = 'ELSEIF'
         if $operator2 = ' '
           if $line > ' '
            let $line = $line || $keyword || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ')'
           else
            let $line = $keyword || ' (' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ')'
           end-if
         end-if
         if $operator2 = 'AND' or $operator2 = 'OR'
           if $line > ' '
            let $line = $line || $keyword || ' ((' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ') '
                                || $operator2
           else
            let $line = $keyword || ' ((' || $operand1 || ' '
                                || $operator1 || ' ' || $operand2 || ') '
                                || $operator2
           end-if
         end-if
       end-if
      end-if
     end-if
    when = 'O'
     if $keyword = 'THEN' or $keyword = 'ELSE'
        if $operator2 = '='
         if $line > ' '
           let $hold_operand3 = $line || ' ' || $keyword || ' (' || $operand1 || ' ' ||
                                $operator1 || ' ' || $operand2 || ')'
           let $line =    $line || ' ' || $keyword || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ')' || ' = ' ||
                           $operand3
         else
           let $hold_operand3 = $keyword || ' (' || $operand1 || ' ' ||
                                $operator1 || ' ' || $operand2 || ')'
           let $line =    $keyword || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ')' || ' = ' ||
                           $operand3
         end-if
           put $line into lines(#line_count)
           add 1 to #line_count
           let $line = ' '
        else
         if $line > ' '
           let $line =  $line || ' ' || $keyword || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ' ' || $operand3 || ') ' || $operator2
         else
           let $line =  $keyword || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ' ' || $operand3 || ') ' || $operator2
         end-if
        end-if
     else
        if $operator2 = '='
          if $line > ' '
           let $hold_operand3 = $line || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                              $operand2 || ')'
           let $line =  $line || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ')' || ' = ' ||
                           $operand3
          else
           let $hold_operand3 = '(' || $operand1 || ' ' || $operator1 || ' ' ||
                              $operand2 || ')'
           let $line =  '(' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ')' || ' = ' ||
                           $operand3
          end-if
           put $line into lines(#line_count)
           add 1 to #line_count
           let $line = ' '
        else
         if $line > ' '
           let $line =  $line || ' (' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ' ' || $operand3 || ') ' || $operator2
         else
           let $line =  '(' || $operand1 || ' ' || $operator1 || ' ' ||
                           $operand2 || ' ' || $operand3 || ') ' || $operator2
         end-if
        end-if
     end-if
    when = 'F'
       if $keyword = 'MIN' or $keyword = 'MAX' or $keyword = 'IN' or
                              $keyword = 'TBLLKUP'
          if $operator2 = '='
           if $line > ' '
             let $hold_operand3 =  $line || $keyword || '(' || $operand1 || ','
                                  || $operand2 || ')'
             let $line =  $line || $keyword || '(' || $operand1 || ','
                             || $operand2 || ')' || ' = ' ||
                             $operand3
           else
             let $hold_operand3 =  $keyword || '(' || $operand1 || ','
                                  || $operand2 || ')'
             let $line =  $keyword || '(' || $operand1 || ','
                             || $operand2 || ')' || ' = ' ||
                             $operand3
           end-if
             put $line into lines(#line_count)
             add 1 to #line_count
             let $line = ' '
          else
           if $line > ' '
             let $line =  $line || $keyword || '(' || $operand1 || ','
                             || $operand2 || ')'
           else
             let $line =  $keyword || '(' || $operand1 || ','
                             || $operand2 || ')'
           end-if
          end-if
       else
        if $keyword = ' '
          if $operator2 = '='
            if $line > ' '
             let $hold_operand3 = $line || '(' || $operand1 || ','
                                || $operand2 || ')'
             let $line =   $line || '(' || $operand1 || ','
                             || $operand2 || ')' || ' = ' ||
                             $operand3
            else
             let $hold_operand3 = '(' || $operand1 || ','
                                || $operand2 || ')'
             let $line =   '(' || $operand1 || ','
                             || $operand2 || ')' || ' = ' ||
                             $operand3
            end-if
             put $line into lines(#line_count)
             add 1 to #line_count
             let $line = ' '
          else
            if $line > ' '
             let $line =  $line || '(' || $operand1 || ','
                             || $operand2 || ')'
            else
             let $line =  '(' || $operand1 || ','
                             || $operand2 || ')'
            end-if
          end-if
        end-if
       end-if
   end-evaluate
 if #pa_seq_num = #max_seq_num
  if $operator2 != '='
    put $line into lines(#line_count)
    add 1 to #line_count
  end-if
  let #line_count = #line_count - 1
  get $line_print from lines(#line_count)
  print $line_print                               (+1,#column2) wrap 50 10
  print '==============================================================' (+1,#column2)
  let $line = ''
 end-if
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-800-Retrieve-Formula-Components
  print 'Components'                              (+2,#Column2)
  print '--------------------------------------------------------------'      (+1,#column2)
  let #i=0
  while #i <= #operand_store_count
     get $operand_store from operand_store(#i)
     let $operand_store_a = ltrim(substr($operand_store,1,10),'')
     do P-810-Select-Function-Result-or-Alias
     add 1 to #i
  end-while
end-procedure

!***********************************************************************
!***********************************************************************
begin-procedure P-810-Select-Function-Result-or-Alias
   let #variable_column  = #column2
   let #variable_column2 = 57
let $sql-statement = 'PAT06A - Function-Result-or-Alias select 1'


BEGIN-SELECT ON-ERROR=SQL-ERROR
ALS_VAL.ALIAS_NAME                        (+1,#variable_column)
   print ' = '                              (,#variable_column2)
ALS_VAL.ALIAS_VAL_FLD_TYPE
ALS_VAL.ALIAS_DEC_VAL
ALS_VAL.ALIAS_DATE_VAL
ALS_VAL.ALIAS_CHAR_VAL
   let $eval_fld_type = rtrim(&als_val.alias_val_fld_type,' ')
   evaluate $eval_fld_type
    when = 'DE'
      let $print_stmt =&als_val.alias_dec_val
      print $print_stmt              (,+1)
    when = 'DA'
      let $print_stmt = &als_val.alias_date_val
      print $print_stmt              (,+1)
   end-evaluate
FROM PS_PA_CLC_ALS_VAL ALS_VAL
WHERE ALS_VAL.CALC_NAME    = $calc_name
  AND ALS_VAL.EMPLID       = $emplid
  AND ALS_VAL.BENEFIT_PLAN = &pa_plan.benefit_plan
  AND ALS_VAL.ALIAS_NAME   = $operand_store_a
END-SELECT

let $sql-statement = 'PAT06A - Function-Result-or-Alias select 2'
BEGIN-SELECT ON-ERROR=SQL-ERROR
FR.FUNCTN_NAME
FR.FUNCTN_RESULT_NM
FD.FLD_NAME
FD.FLD_TYPE
  let $functn_result_nm = rtrim(&fr.functn_result_nm,' ')
  let $fld_name         = rtrim(&fd.fld_name,' ')
  let $eval_fld_type = rtrim(&fd.fld_type,' ')
  evaluate $eval_fld_type
   when = 'C'
        do get-character-value
          print $functn_result_nm                (+1,#variable_column)
          print '('                                (,+1)
          print $fld_name                          (,,)
          print ')'                                (,,)
          print ' = '                              (,#variable_column2)
          print $return_value                      (,+1)
     when = 'N'
          do get-decimal-value
          move #return_value to $return_value 999999999.999999
          print $functn_result_nm                (+1,#variable_column)
          print '('                                (,+1)
          print $fld_name                          (,,)
          print ')'                                (,,)
          print ' = '                              (,#variable_column2)
          print $return_value                      (,+1)
     when = 'D'
          do get-date-value
          print $functn_result_nm                (+1,#variable_column)
          print '('                                (,+1)
          print $fld_name                          (,,)
          print ')'                                (,,)
          print ' = '                              (,#variable_column2)
          print $return_value                      (,+1)
    end-evaluate
FROM PS_PA_FNC_RSLT_DFN FR,
     PS_PA_FUNCTN_FLD_1 FD
WHERE FR.FUNCTN_RESULT_NM  = $operand_store_a
AND   FR.EFFDT            <= &calc.asofdate
AND   FR.ACTIVE_INACTIVE  <= 'Y'
AND   FR.FUNCTN_NAME       = FD.FUNCTN_NAME
END-SELECT
end-procedure

!***********************************************************************
!***********************************************************************

#include 'stdapi.sqc'    !Update Process Request API
#include 'parnctl1.sqc'  !Get run control parameter values
#include 'pagetval.sqc'  !Get values mask routines
#include 'readxlat.sqc'  !read translate table
#include 'paresult.sqc'  !read results table
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
