!***********************************************************************
!  GPMXIM21:  Instituto Mexicano Del Seguro Social,                    *
!             ARCHIVO DE IMPORTACION DE DATOS DE INCAPACIDADES         *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  31781263                                            *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment
#Include 'setup02.sqc'  !Printer and page-size initialization

#define c1 1
#define c2 11
#define c3 41
#define c4 56
#define c5 71
#define c6 82
#define c7 93
#define c8 113
#define c9 122
#define c10 132
#define c11 137
#define c12 157
#define c98 158
#define c99 167

begin-report
  do Init-Report
  do Reset
  do Stdapi-Term
end-report


begin-procedure Init-Report
  move   'INSTITUTO MEXICANO DEL SEGURO SOCIAL - DELEGACIÓN DEL IMSS'  to $ReportTitle1
  move   'DATOS DE INCAPACIDADES'                                 to $ReportTitle2
  move   'GPMXIM21' to $ReportID
  display $ReportTitle1
  display $ReportTitle2
  display $ReportID
  show 'Ver.2020 PUM37.01'
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  do Select-Parameters
  do Get-Company-Data-Mex
  do OPEN-FILE
  display ''
  display 'TRABAJADORES IMPROCEDENTES - | DATOS INVÁLIDOS |'
  Do Report
  close 1
end-procedure

!********************************************************
begin-procedure Select-Parameters
begin-select
SUARNCTL.OPRID
SUARNCTL.RUN_CNTL_ID
SUARNCTL.GPMX_INITIAL_LOAD
SUARNCTL.BEGIN_DT
SUARNCTL.END_DT
SUARNCTL.ESTABID
SUARNCTL.COMPANY
SUARNCTL.GPMX_CAPPED
SUARNCTL.LOCATION
SUARNCTL.BUSINESS_UNIT
SUARNCTL.GPMX_ESTABID_OPTN

  let $BegDt   = Rtrim(&SUARNCTL.BEGIN_DT, ' ')
  let $EndDt   = Rtrim(&SUARNCTL.END_DT, ' ')
  let $Company = Rtrim(&SUARNCTL.COMPANY, ' ')
  let $Estabid = rtrim(&SUARNCTL.ESTABID,' ')
  let $Capped  = rtrim(&SUARNCTL.GPMX_CAPPED,' ')
  let $Initial_Load = &SUARNCTL.GPMX_INITIAL_LOAD
  let $RCLocation   = Rtrim(&SUARNCTL.LOCATION, ' ')
  let $RCBusinessUnit = Rtrim(&SUARNCTL.BUSINESS_UNIT, ' ')
  Let $Estab_Opt      = &SUARNCTL.GPMX_ESTABID_OPTN

FROM  PS_GPMX_RC_SUA001  SUARNCTL
WHERE SUARNCTL.OPRID = $Prcs_OprID
      AND SUARNCTL.RUN_CNTL_ID = $Prcs_Run_Cntl_ID
end-select
Do CreateWhereClause
end-procedure

!********************************************************
begin-heading 10
  print     'PeopleSoft'        (1,1)  center
  uppercase $ReportTitle1
  print     $ReportTitle1       (2,1)  center
  uppercase $ReportTitle2
  print     $ReportTitle2       (3,1)  center
  
  print 'Reporte:'              (4,1)
  print $ReportID               (,12)
  print 'Página:'               (,{c98})
  page-number                   (,{c99})
  
  print 'Compañía:'             (5,1)
  Let $CompanyName = upper($CompanyName)
  print $CompanyName            (,12)
  print 'Hora:'                 (,{c98})
  print $ReportTime             (,{c99})
  
  if $print_Estab = 'Y'
    print 'Registro Patronal:'   (6,1)
    print $Estabid               (,25) edit XXXXXXXXXX-X
    Let $Estab_Name = upper($Estab_Name)
    print $Estab_Name            (,+2)
  else
    print ''                     (6,1)
  end-if
  print 'Fecha:'                 (,{c98})
  print $ReportDate              (,{c99})
  
  print '=' (+1,1,176) fill
  print 'Código'                 (+1,{c1})
  print 'Nombre del Empleado'    (,{c2})
  print 'Registro'               (,{c3})
  print 'No. Seguridad'          (,{c4})
  print 'Fecha'                  (,{c5})
  print 'Fecha'                  (,{c6})
  print 'Descripción'            (,{c7})
  print 'Duración'               (,{c8})
  print 'Folio'                  (,{c9})
  print '%IPP'                   (,{c10})
  print 'Descripción'            (,{c11})
  print 'Descripción'            (,{c12})
  print 'Empleado'               (+1,{c1})
  print 'Patronal IMSS'          (,{c3})
  print 'Social'                 (,{c4})
  print 'Inicio'                 (,{c5})
  print 'Fin'                    (,{c6})
  print 'Incapacidad'            (,{c7})
  print 'Secuela'                (,{c11})
  print 'Control'                (,{c12})
  print '=' (+1,1,176) fill
end-heading

!********************************************************
begin-procedure Report
Let $IPP = 0
Let #Error = 0
Let #Total = 0
Let $Error = ''
Let $IPP = 0
#Debug show '$WhereClause: ' $WhereClause

begin-SELECT DISTINCT
A.EMPLID
   MOVE &A.EMPLID TO $Emplid
   print $Emplid (+1,{c1})   
NAM.LAST_NAME
  Move &NAM.LAST_NAME   to $EmpPat
NAM.SECOND_LAST_NAME
  Move &NAM.SECOND_LAST_NAME   to $EmpMat
NAM.FIRST_NAME
  Move &NAM.FIRST_NAME   to $EmpName
NAM.MIDDLE_NAME
  Move &NAM.MIDDLE_NAME   to $EmpMName
  
  Let $Empl_name = RTRIM($EmpPat,' ') || ' ' || RTRIM($EmpMat, ' ') || ' ' || RTRIM($EmpName,' ') || ' ' || RTRIM($EmpMName,' ')
  Let $Empl_name = upper($Empl_name)
  print $Empl_Name (,{c2},29)

A.ESTABID  
A.LOCATION
   Let $Location = Rtrim(&A.LOCATION, ' ')
   
   If $Estab_Opt = 'L'
     do  Process-IMSSData
   Else
     Let $IMSSESTABID = Rtrim(&A.ESTABID, ' ')
     do Check-Characters($IMSSESTABID,$IMSSESTABID)
   End-if
     
   do Get-ImssID
   print $IMSSESTABID    (,{c3}) edit XXXXXXXXXX-X
   print $IMSS_ID        (,{c4})

ABSE.BGN_DT

  Let $BeginDate = &ABSE.BGN_DT
  do Convert-To-DTU-Date($BeginDate,$BeginDateP)
  Do dtu-parse-date ($BeginDateP,#dtu-yr,#dtu-mo,#dtu-da)
  move  #dtu-yr to $dtu-yr 9999
  move  #dtu-da to $dtu-da 09
  move  #dtu-mo to $dtu-mo 09
  Let   $BeginDate = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
  Let   $BeginDateF = $dtu-da || $dtu-mo ||$dtu-yr

  print $BeginDate      (,{c5})
   
ABSE.END_DT
  Let $EndDate = &ABSE.END_DT
  do Convert-To-DTU-Date($EndDate,$EndDateP)
  Do dtu-parse-date ($EndDateP,#dtu-yr,#dtu-mo,#dtu-da)
  move  #dtu-yr to $dtu-yr 9999
  move  #dtu-da to $dtu-da 09
  move  #dtu-mo to $dtu-mo 09
  Let   $EndDate = $dtu-da || '/'|| $dtu-mo || '/' ||$dtu-yr
  Let   $EndDateF = $dtu-da || $dtu-mo ||$dtu-yr
  print $EndDate      (,{c6})
  
ABSE.VOIDED_IND
  let $voided = rtrim(&ABSE.VOIDED_IND, ' ')

ABSE.PIN_TAKE_NUM
 let #pin_nmp = &ABSE.PIN_TAKE_NUM
 Do Get-Pin-Descr
  print $pin_descr   (,{c7},19)
    
ABSE.DURATION_ABS
  Let #Duration = &ABSE.DURATION_ABS
  if upper($voided) = 'Y'
     Let #Duration = 0.0
  end-if
  LET #Duration = TRUNC(#Duration,0)
  LET #Length = 3
  LET $FieldIn = to_char(#Duration)
  DO FILL_LEADING
  LET $Duration = $FieldOut
  print $Duration     (,{c8}) edit 999
  
ABSE.EVT_CONFIG1
  Let $Folio = rtrim(&ABSE.EVT_CONFIG1, ' ')
  print $Folio        (,{c9})

ABSE.EVT_CONFIG2
!31215243
ABSE.EVT_CONFIG1_DEC

  If &ABSE.EVT_CONFIG1_DEC > 0
    Let #IPP = &ABSE.EVT_CONFIG1_DEC
  Else
    Let #IPP = rtrim(&ABSE.EVT_CONFIG2,' ')
  End-if
!31215243 
  LET #IPP = TRUNC(#IPP,0)
  LET #Length = 3
  LET $FieldIn = to_char(#IPP)
  DO FILL_LEADING
  LET $IPP = $FieldOut
  print $IPP          (,{c10}) edit 999

ABSE.EVT_CONFIG3
  Let $Conseq = rtrim(&ABSE.EVT_CONFIG3, ' ')
  Evaluate $Conseq 
  when = 'S'
    Let $Conseq = '10'
    break
  when = 'N'
    Let $Conseq = '11'
    break
  end-evaluate
  Do GetConseqDescr
  print $ConseqDescr  (,{c11},19)
  if upper($voided) = 'Y'
     Let $Conseq = ''
  end-if

ABSE.EVT_CONFIG4
  Let $Control = rtrim(&ABSE.EVT_CONFIG4, ' ')
  Evaluate $Control 
  when = 'REC'
    Let $Control = '10'
    break
  when = 'REEV'
    Let $Control = '11'
    break
  end-evaluate
  Do GetControlDescr
  print $ControlDescr (,{c12},19)
  if upper($voided) = 'Y'
     Let $Control = ''
  end-if
  
TAKE.ABS_TYPE_OPTN
  Let $RIncap = '0'
  Let $RiskType = '0'
  Let $AbsType = &TAKE.ABS_TYPE_OPTN
  evaluate $AbsType
  when = 'ENF' 
     Let $RIncap = '2'
     Let $RiskType = '0'
     break
  when = 'MAT'
     Let $RIncap = '3'
     Let $RiskType = '0'
     break
  when = 'RSG'
     Let $RIncap = '1'
     Let $RiskType = '1'
     break
  when = 'RST'
     Let $RIncap = '1'
     Let $RiskType = '2'
     break
  when = 'ENT'
     Let $RIncap = '1'
     Let $RiskType = '3'
     break
  when = 'LEN'
     Let $RIncap = '4'
     Let $RiskType = '0'
     break   
  end-evaluate
  
  Let #Total = #Total + 1
  do Validate-Line
  if $Insert = 'False'
    Let #Error = #Error + 1
  else
    do write-rcd
  end-if
    
FROM    PS_JOB             A,
        PS_NAMES         NAM,
        PS_GPMX_SDI_WA     T,
        PS_GP_ABS_EVENT ABSE,
        PS_GP_ABS_TAKE  TAKE
WHERE   A.EMPLID    = T.EMPLID
AND     A.EMPLID    = NAM.EMPLID
AND     NAM.NAME_TYPE = 'PRI'
AND     NAM.EFFDT   = (SELECT MAX(NAM_ED.EFFDT) FROM PS_NAMES NAM_ED 
                        WHERE NAM.EMPLID    = NAM_ED.EMPLID 
                          AND NAM.NAME_TYPE = NAM_ED.NAME_TYPE 
                          AND NAM_ED.EFFDT <= A.EFFDT)
AND     A.EMPLID    = ABSE.EMPLID
AND     A.EMPL_RCD  = ABSE.EMPL_RCD
AND     A.COMPANY   = $Company
AND     A.EFFSEQ    = (SELECT MAX(AA.EFFSEQ) FROM PS_JOB AA
                        WHERE AA.EMPLID = A.EMPLID
                        AND   AA.EFFDT  = A.EFFDT
                        AND   AA.EMPL_RCD = A.EMPL_RCD)
AND     ABSE.PIN_TAKE_NUM = TAKE.PIN_NUM
AND     TAKE.ABS_TYPE_OPTN IN ('ENT','ENF','MAT','RSG','RST', 'LEN')
AND     T.SEQNUM    = (SELECT MAX(T2.SEQNUM) FROM PS_GPMX_SDI_WA T2
                       WHERE T2.EMPLID      = T.EMPLID
                       AND   T2.EMPL_RCD    = T.EMPL_RCD
                       AND   T2.GP_PAYGROUP = T.GP_PAYGROUP
                       AND   T2.EFFDT       = T.EFFDT
                       AND   T2.SUA_REASON_MEX = T.SUA_REASON_MEX)
[$WhereClause]
end-SELECT
move #Error to $cError 9,999,999,999
move #Total to $cTotal 9,999,999,999
show '' $cError ' trabajadores improcedentes.'
show '' $cTotal ' trabajadores procesados.'

if #Error <> 0 or  #Total <> 0
   print $cError (+2,{c1})
   print ' trabajadores improcedentes.' (,)
   print $cTotal (+1,{c1})
   print ' trabajadores procesados.' (,)
end-if   
end-procedure

!********************************************************
BEGIN-PROCEDURE OPEN-FILE
  LET $FILE_NAME =  '{FILEPREFIX}' || 'incap.txt' || '{FILESUFFIX}'
  show '$FILE_NAME: '  $FILE_NAME
  OPEN $FILE_NAME AS 1 FOR-WRITING RECORD=57:FIXED STATUS=#FILESTAT
END-PROCEDURE OPEN-FILE

!********************************************************
Begin-Procedure CreateWhereClause
 let $WhereClause = ''
 Let $print_Estab = 'N'
 
 if rtrim($Initial_Load, ' ') <> '0040'
    let $WhereClause = $WhereClause || ' AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = A.EMPLID AND EMPL_RCD = A.EMPL_RCD'
    let $WhereClause = $WhereClause || ' AND EFFDT <= '''|| $EndDt || ''') AND A.ACTION_REASON IN (SELECT AC1.ACTION_REASON'
    let $WhereClause = $WhereClause || ' FROM PS_ACT_RSN_TBL_MEX AC1, PS_ACTN_REASON_TBL AC2 WHERE AC1.IMS_PRN_FORM_MEX IN (''0010'',''0040'')'
    let $WhereClause = $WhereClause || ' AND AC1.ACTION = AC2.ACTION AND AC1.ACTION_REASON = AC2.ACTION_REASON'
    let $WhereClause = $WhereClause || ' AND AC2.EFF_STATUS = ''A'' AND AC2.EFFDT = (SELECT MAX(AC3.EFFDT)'
    let $WhereClause = $WhereClause || ' FROM PS_ACTN_REASON_TBL AC3 WHERE AC3.ACTION = AC2.ACTION'
    let $WhereClause = $WhereClause || ' AND AC3.ACTION_REASON = AC2.ACTION_REASON' 
    let $WhereClause = $WhereClause || ' AND AC3.EFFDT <= '''|| $EndDt ||'''))'
    let $WhereClause = $WhereClause || ' AND T.SUA_REASON_MEX IN (''0010'',''0040'') '
 else
    let $WhereClause = $WhereClause || ' AND A.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = A.EMPLID AND EMPL_RCD = A.EMPL_RCD'
    let $WhereClause = $WhereClause || ' AND EFFDT <= '''|| $EndDt || ''') '
    let $WhereClause = $WhereClause || ' AND T.EFFDT = (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
    let $WhereClause = $WhereClause || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
    let $WhereClause = $WhereClause || ' AND TT.EFFDT <= '''|| $EndDt ||''')'
    let $WhereClause = $WhereClause || ' AND ABSE.BGN_DT BETWEEN '''|| $BegDt ||''' AND '''|| $EndDt ||''''
 end-if
 
 If rtrim($EndDt,' ') <> '' AND  rtrim($BegDt,' ') <> '' AND rtrim($Initial_Load,' ') = '0010'
   let $WhereClause = $WhereClause || ' AND T.EFFDT   BETWEEN ' || '''' || $BegDt || '''' ||  ' AND ' || '''' ||  $EndDt || ''''
   let $WhereClause = $WhereClause || ' AND ABSE.BGN_DT BETWEEN '''|| $BegDt ||''' AND '''|| $EndDt ||''''
 Else
   If rtrim($Initial_Load, ' ') = '0020'
      let $WhereClause = $WhereClause || ' AND T.EFFDT <= (SELECT MAX(TT.EFFDT) FROM PS_GPMX_SDI_WA TT WHERE TT.EMPLID = '
      let $WhereClause = $WhereClause || ' T.EMPLID AND T.EMPL_RCD = TT.EMPL_RCD AND T.SEQNUM = TT.SEQNUM'
      let $WhereClause = $WhereClause || ' AND TT.EFFDT <= '''|| $EndDt ||''')'
      let $WhereClause = $WhereClause || ' AND ABSE.BGN_DT <= '''|| $EndDt || ''''
   End-If
 End-If
 
 If Rtrim($Estabid, ' ') <> ''
  Let $print_Estab = 'Y'
  If $Estab_Opt = 'L'
    let $WhereClause = $WhereClause || ' AND A.LOCATION IN (SELECT LOC.LOCATION FROM PS_LOCATION_TBL LOC '
    let $WhereClause = $WhereClause || ' WHERE LOC.ESTABID = ' || '''' || $Estabid || ''''
    let $WhereClause = $WhereClause || ' AND LOC.SETID = A.SETID_LOCATION AND LOC.LOCATION = A.LOCATION'
    let $WhereClause = $WhereClause || ' AND   LOC.EFFDT = (SELECT MAX(L.EFFDT) FROM PS_LOCATION_TBL L'
    let $WhereClause = $WhereClause || ' WHERE L.LOCATION = LOC.LOCATION AND L.EFFDT <= ''' || $EndDt || '''))'
  Else
    let $WhereClause = $WhereClause || ' AND A.ESTABID = ''' || $Estabid || ''' ' 
  End-if  
 end-if
  
 If Rtrim($RCLocation, ' ') <> ''
  let $WhereClause = $WhereClause || ' AND A.LOCATION = ' || '''' ||$RCLocation || ''''
 end-if  

 If Rtrim($RCBusinessUnit, ' ') <> ''
    let $WhereClause = $WhereClause || ' AND A.BUSINESS_UNIT = ' || '''' ||$RCBusinessUnit || ''''
 End-if
 
 ! ********** Debug Section
   #debug show ' '
   #debug show '$WhereClause: ' $WhereClause
  ! **********
 
end-procedure

!********************************************************
begin-procedure Process-IMSSData
Let $IMSSESTABID = ''
begin-SELECT
IMSS.ESTABID,
  Let $IMSSESTABID = Rtrim(&IMSS.ESTABID, ' ')
FROM  PS_ESTAB_TBL IMSS,
      PS_LOCATION_TBL LOC
WHERE IMSS.ESTABID = LOC.ESTABID
  AND LOC.LOCATION = $Location
  AND LOC.EFFDT = (SELECT MAX(L.EFFDT)
                   FROM   PS_LOCATION_TBL L
                   WHERE  L.LOCATION = LOC.LOCATION)
  AND IMSS.EFFDT = (SELECT MAX(EFFDT)
                   FROM   PS_ESTAB_TBL
                   WHERE  ESTABID = IMSS.ESTABID)
end-SELECT
do Check-Characters($IMSSESTABID,$IMSSESTABID)
end-procedure

!**********************************************************
begin-procedure Get-ImssID
Let $IMSS_ID = '00000000000'
begin-select
IM.NATIONAL_ID
    let $IMSS_ID = &IM.NATIONAL_ID
FROM PS_PERS_NID IM WHERE IM.NATIONAL_ID_TYPE='IMSS' AND IM.EMPLID=$Emplid AND IM.COUNTRY='MEX'
end-select
end-procedure

!**********************************************************
begin-procedure GetConseqDescr
Let $ConseqDescr = ''
begin-select
XL.XLATLONGNAME
   Let $ConseqDescr = Rtrim(&XL.XLATLONGNAME,' ')
FROM PSXLATITEM XL 
WHERE XL.FIELDNAME = 'GPMX_ABS_CONSEQ'
AND XL.FIELDVALUE = $Conseq
AND XL.EFF_STATUS = 'A'
AND XL.EFFDT <= (SELECT MAX(XL2.EFFDT) FROM PSXLATITEM XL2 WHERE
XL.FIELDNAME = XL2.FIELDNAME
AND XL.FIELDVALUE = XL2.FIELDVALUE
AND XL2.EFFDT <= $EndDt)
end-select
begin-select
XLL.XLATLONGNAME
   Let $ConseqDescr = Rtrim(&XLL.XLATLONGNAME,' ')
FROM PSXLATITEMLANG XLL 
WHERE XLL.FIELDNAME = 'GPMX_ABS_CONSEQ'
AND XLL.FIELDVALUE = $Conseq
AND XLL.EFFDT <= (SELECT MAX(XLL2.EFFDT) FROM PSXLATITEM XLL2 WHERE
XLL.FIELDNAME = XLL2.FIELDNAME
AND XLL.FIELDVALUE = XLL2.FIELDVALUE
AND XLL2.EFFDT <= $EndDt)
AND LANGUAGE_CD = $curr_language_cd
end-select
end-procedure

!**********************************************************
begin-procedure GetControlDescr
Let $ControlDescr = ''
begin-select
XL3.XLATLONGNAME
   Let $ControlDescr = Rtrim(&XL3.XLATLONGNAME,' ')
FROM PSXLATITEM XL3 
WHERE XL3.FIELDNAME = 'GPMX_ABS_CONTROL'
AND XL3.FIELDVALUE = $Control
AND XL3.EFF_STATUS = 'A'
AND XL3.EFFDT <= (SELECT MAX(XL4.EFFDT) FROM PSXLATITEM XL4 WHERE
XL3.FIELDNAME = XL4.FIELDNAME
AND XL3.FIELDVALUE = XL4.FIELDVALUE
AND XL4.EFFDT <= $EndDt)
end-select

begin-select
XLL3.XLATLONGNAME
   Let $ControlDescr = Rtrim(&XLL3.XLATLONGNAME,' ')
FROM PSXLATITEMLANG XLL3
WHERE XLL3.FIELDNAME = 'GPMX_ABS_CONTROL'
AND XLL3.FIELDVALUE = $Control
AND XLL3.EFFDT <= (SELECT MAX(XLL4.EFFDT) FROM PSXLATITEM XLL4 WHERE
XLL3.FIELDNAME = XLL4.FIELDNAME
AND XLL3.FIELDVALUE = XLL4.FIELDVALUE
AND XLL4.EFFDT <= $EndDt)
AND LANGUAGE_CD = $curr_language_cd
end-select
end-procedure

!***************************************
begin-procedure  Get-Pin-Descr
  let $pin_descr = ''
  let $pin_nm = ''
begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE
  MOVE &PD.PIN_NM TO $pin_nm
  MOVE &PD.DESCR  TO $pin_descr
  MOVE &PD.PIN_CODE TO $pin_code
from PS_GP_PIN PD
WHERE PD.PIN_NUM = #pin_nmp
end-select
begin-select
PDL.DESCR
  MOVE &PDL.DESCR TO $pin_descr
from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #pin_nmp
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
Let $Desc_ernded = RTRIM($pin_nm, ' ') || ' ' || RTRIM($pin_descr, ' ')
end-procedure   Get-Pin-Descr

!**************************************
Begin-Procedure FILL_LEADING
  LET $FieldIn  = RTRIM($FieldIn,' ')
  LET $FieldIn  = LTRIM($FieldIn,' ')
  LET $FieldOut = ''
  LET #FieldLength = LENGTH($FieldIn) 

  LET #SPACES = #Length - #FieldLength
  
  LET #CONT = 1
  WHILE #CONT <= #SPACES
      LET $FieldOut = LTRIM($FieldOut,' ') || '0'
      ADD 1 TO #CONT
  END-WHILE

  LET $FieldOut = $FieldOut || $FieldIn
  Let $FieldIn = ''
End-Procedure FILL_LEADING

!**********************************************************
begin-procedure Validate-Line
Let $Insert = 'True'
Let $Error = ''
if rtrim($IMSSESTABID , ' ') = ''
   Let $Error = $Error || ' | Registro Patronal' 
   Let $Insert = 'False'
end-if
if rtrim($IMSS_ID , ' ') = '00000000000'
   Let $Error = $Error || ' | No. Segurdidad Social' 
   Let $Insert = 'False'
end-if

if ($Conseq = '10' or $Conseq = '11')
   Let $Error = $Error || ' | Consecuencia Inválida' 
   Let $Insert = 'False'
end-if
   
if ($Control = '10' or $Control = '11')
   Let $Error = $Error || ' | Control Inválida' 
   Let $Insert = 'False'
end-if
   
if rtrim($AbsType, ' ') = 'ENF' or rtrim($AbsType, ' ') = 'MAT'
  if $Control <> '' 
    if rtrim($Folio , ' ') = ''
       Let $Error = $Error || ' | Folio' 
       Let $Insert = 'False'
    end-if
    if #Duration = 0 
       Let $Error = $Error || ' | Duración' 
       Let $Insert = 'False'
    end-if
  end-if
else
if ($Conseq <> '' and $Control <> '')
   if($Conseq = '0' and $Control = '0')
     if rtrim($Folio, ' ') <> ''
        Let $Error = $Error || ' | Folio' 
        Let $Insert = 'False'
     end-if
     if #Duration > 0
        Let $Error = $Error || ' | Duración' 
        Let $Insert = 'False'
     end-if
     if #IPP > 0
        Let $Error = $Error || ' | %IPP' 
        Let $Insert = 'False'
     end-if
   end-if
   
   if(($Conseq = '1' or $Conseq = '5' or $Conseq = '8') and ($Control = '1' or $Control = '2' or $Control = '3' or $Control = '4'))
     if rtrim($Folio, ' ') = ''
        Let $Error = $Error || ' | Folio' 
        Let $Insert = 'False'
     end-if
     if #Duration <= 0
        Let $Error = $Error || ' | Duración' 
        Let $Insert = 'False'
     end-if
     if #IPP > 0
        Let $Error = $Error || ' | %IPP' 
        Let $Insert = 'False'
     end-if
   end-if
   
   if(($Conseq = '2' or $Conseq = '3' or $Conseq = '6' or $Conseq = '7' or $Conseq = '9') and $Control = '5')
     if rtrim($Folio, ' ') <> ''
        Let $Error = $Error || ' | Folio' 
        Let $Insert = 'False'
     end-if
     if #Duration > 0
        Let $Error = $Error || ' | Duración' 
        Let $Insert = 'False'
     end-if
     if #IPP <= 0
        Let $Error = $Error || ' | %IPP' 
        Let $Insert = 'False'
     end-if
   end-if

   if($Conseq = '4' and $Control = '6')
     if rtrim($Folio, ' ') <> ''
        Let $Error = $Error || ' | Folio' 
        Let $Insert = 'False'
     end-if
     if #Duration <= 0
        Let $Error = $Error || ' | Duración' 
        Let $Insert = 'False'
     end-if
     if #IPP <= 0
        Let $Error = $Error || ' | %IPP' 
        Let $Insert = 'False'
     end-if
   end-if  
end-if
end-if
if $Insert = 'False'
   Let $Error = rtrim($Emplid, ' ') || $Error
   show $Error
end-if
end-procedure Validate-Line

!**********************************************************
begin-procedure Write-Rcd

Let #VALUE_INT = TRUNC(#VALUE,0)
Let $VALUE_INT = EDIT(#VALUE_INT,'0000')

Let #VALUE_DEC = #VALUE - #VALUE_INT
Let #VALUE_DEC = #VALUE_DEC * 100
Let $VALUE_DEC = EDIT(#VALUE_DEC,'0000')
Let $VALUE_DEC = SUBSTR($VALUE_DEC,1,4)

WRITE 1 FROM $IMSSESTABID:11     -
             $IMSS_ID:11         -
             '1':1               -
             $BeginDateF:8       -
             $Folio:8            -
             $Duration:3         -
             $IPP:3              -
             $RIncap:1           -
             $RiskType:1         -
             $Conseq:1           -
             $Control:1          - 
             $EndDateF:8         
end-procedure Write-Rcd

!**********************************************************
begin-procedure Check-Characters($Check, :$Check)
 Let $Check = translate($Check,'''',' ')
 Let $Check = translate($Check,'"',' ')
 Let $Check = translate($Check,'#',' ')
 Let $Check = translate($Check,'$',' ')
 Let $Check = translate($Check,'%',' ')
 Let $Check = translate($Check,'&',' ')
 Let $Check = translate($Check,'/',' ')
 Let $Check = translate($Check,'(',' ')
 Let $Check = translate($Check,')',' ')
 Let $Check = translate($Check,'*',' ')
 Let $Check = translate($Check,'+',' ')
 Let $Check = translate($Check,',',' ')
 Let $Check = translate($Check,';',' ')
 Let $Check = translate($Check,':',' ')
 Let $Check = translate($Check,'-',' ')
 Let $Check = translate($Check,'_',' ')
 Let $Check = translate($Check,'?',' ')
 Let $Check = translate($Check,'@',' ')
 Do convert-to-char($Check,$Check)
 uppercase $Check
end-procedure Check-Characters

#include 'reset.sqc'       !Reset printer procedure
#include 'curdttim.sqc'    !Get-Current-DateTime procedure
#include 'datetime.sqc'    !Routines for date and time formatting
#include 'number.sqc'      !Routines to format numbers
#include 'stdapi.sqc'      !Update Process API
#Include 'datemath.sqc'    !Routines for date math
#include 'getcomex.sqc'    !Get-Company-data-Mex
#include 'ctxrnctl.sqc'
