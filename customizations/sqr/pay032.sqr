!***********************************************************************
!  PAY032: Earnings Subject to Limits REPORT                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  31351712                                            !
!                                                                      *
!***********************************************************************
!

#include 'setenv.sqc' !Set environment
#Include 'setup32.sqc'  !Printer and page-size initialization

begin-report
  do Init-Report
  do Stdapi-Term
end-report

begin-procedure Init-Report
  move 'PAY032' to $ReportID
  do Get-Report-Language          ! Procedure that decides the report language
                                  ! and then calls 'Report-Translation' procedure
                                  ! that reads the language dep. text.
  move $Pay032_Title_report to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Payroll-Report-Initialization
  do Report-Headings
  do Process-Main

end-procedure


begin-heading 9

  #Include 'stdhtrpi.sqc'
  #Include 'stdhtr06.sqc'
end-heading


begin-procedure Report-Translation     ! Read from PAY032 program ids

   do Init_Report_Translation($ReportID,$Language_Cd)

   do Get_Field_Information ('PAY032', 'REPORT_TITLE'   , $Pay032_Title_report , #dummy_width)
   do Get_Field_Information ('PAY032', 'EMPLOYEE'       , $Pay032_Employee , #dummy_width)
   do Get_Field_Information ('PAY032', 'RCD'            , $Pay032_Rcd , #dummy_width)
   do Get_Field_Information ('PAY032', 'EMPL'           , $Pay032_Empl , #dummy_width)
   do Get_Field_Information ('PAY032', 'STANDARD'       , $Pay032_Standard , #dummy_width)
   do Get_Field_Information ('PAY032', 'RUN_ID'         , $Pay032_RunID , #dummy_width)
   do Get_Field_Information ('PAY032', 'EMPLOYEE_NAME'  , $Pay032_Employee_name , #dummy_width)
   do Get_Field_Information ('PAY032', 'STD_HRS'        , $Pay032_Std_hrs, #dummy_width)
   do Get_Field_Information ('PAY032', 'EARNINGS'       , $Pay032_Earnings, #dummy_width)
   do Get_Field_Information ('PAY032', 'PAYCHECK'       , $Pay032_Paycheck, #dummy_width)
   do Get_Field_Information ('PAY032', 'PAYCHECK_HDG'   , $Pay032_Paycheck_hdg, #dummy_width)
   do Get_Field_Information ('PAY032', 'PAYSHEET'       , $Pay032_Paysheet, #dummy_width)
   do Get_Field_Information ('PAY032', 'HOURS'          , $Pay032_Hours, #dummy_width)
   do Get_Field_Information ('PAY032', 'HRS'            , $Pay032_Hrs, #dummy_width)
   do Get_Field_Information ('PAY032', 'DEFINED'        , $Pay032_Defined, #dummy_width)
   do Get_Field_Information ('PAY032', 'MAXIMUM'        , $Pay032_Maximum, #dummy_width)
   do Get_Field_Information ('PAY032', 'MESSAGE'        , $Pay032_Message, #dummy_width)
   do Get_Field_Information ('PAY032', 'TYPE'           , $Pay032_Type, #dummy_width)
   do Get_Field_Information ('PAY032', 'FREQUENCY'      , $Pay032_Frequency, #dummy_width)
   do Get_Field_Information ('PAY032', 'CODE'           , $Pay032_Code, #dummy_width)
   do Get_Field_Information ('PAY032', 'SPCL_ACCUM'     , $Pay032_Spcl_accum, #dummy_width)
   do Get_Field_Information ('PAY032', 'SPCL'           , $Pay032_Spcl, #dummy_width)
   do Get_Field_Information ('PAY032', 'EARNS_AMT'      , $Pay032_Earns_amt, #dummy_width)
   do Get_Field_Information ('PAY032', 'DAILY'          , $Pay032_Daily, #dummy_width)
   do Get_Field_Information ('PAY032', 'DAILY_LIMIT'    , $Pay032_Daily_limit, #dummy_width)
   do Get_Field_Information ('PAY032', 'YTD_HOURS'      , $Pay032_Ytd_hours, #dummy_width)
   do Get_Field_Information ('PAY032', 'TOTAL_HOURS'    , $Pay032_Total_hours, #dummy_width)
   do Get_Field_Information ('PAY032', 'YTD_CURRENT'    , $Pay032_YTD_Current, #dummy_width)
   do Get_Field_Information ('PAY032', 'YTD_CURRENT2'   , $Pay032_YTD_Current2, #dummy_width)
   do Get_Field_Information ('PAY032', 'CALCULATED'     , $Pay032_Calculated, #dummy_width)
   do Get_Field_Information ('PAY032', 'OFF_CYCLE'      , $Pay032_Offcycle, #dummy_width)
   do Get_Field_Information ('PAY032', 'ONCYCLE'        , $Pay032_Oncycle, #dummy_width)
   do Get_Field_Information ('PAY032', 'DAILY_LIMIT_MSG', $Pay032_daily_limit_msg, #dummy_width)
   do Get_Field_Information ('PAY032', 'MAX_YTD_MSG'    , $Pay032_max_ytd_msg, #dummy_width)
   do Get_Field_Information ('PAY032', 'CAT_HRS_MSG'    , $Pay032_cat_hrs_msg, #dummy_width)
   do Get_Field_Information ('PAY032', 'PART_TIME'      , $Pay032_parttime, #dummy_width)
   do Get_Field_Information ('PAY032', 'THRESHOLD'      , $Pay032_Threshold, #dummy_width)
   do Get_Field_Information ('PAY032', 'ESTIMATED'      , $Pay032_Estimated, #dummy_width)
   do Get_Field_Information ('PAY032', 'CATEGORY'       , $Pay032_category, #dummy_width)
   do Get_Field_Information ('PAY032', 'PAY_PERIOD'     , $Pay032_Pay_period, #dummy_width)
   do Get_Field_Information ('PAY032', 'AMOUNT'         , $Pay032_Amount, #dummy_width)
   do Get_Field_Information ('PAY032', 'PAGE'           , $Pay032_Page, #dummy_width)
   do Get_Field_Information ('PAY032', 'LINE'           , $Pay032_Line, #dummy_width)
   do Get_Field_Information ('PAY032', 'ADDL'           , $Pay032_Addl, #dummy_width)
   do Get_Field_Information ('PAY032', 'NUM'            , $Pay032_Nbr, #dummy_width)
   do Get_Field_Information ('PAY032', 'END_REPORT'     , $Pay032_end_report, #dummy_width)
end-procedure

begin-procedure Report
!
end-procedure


begin-procedure Process-Main

    move '''' to $SlctEarns
    move ' '  to $SlctStmt

begin-SELECT
A.ERNCD

    let $Erncd = rtrim(&A.Erncd,' ')

    if $SlctEarns <> ''''
        concat ''',''' with $SlctEarns
    end-if
    concat $Erncd with $SlctEarns

FROM PS_PY_REDUCE_ERN A
ORDER BY A.PY_EARN_CATEGORY,
         A.ERNCD
end-SELECT

   concat '''' with $SlctEarns
   concat ')' with $SlctEarns
   concat 'AND C.ERNCD IN (' with $SlctStmt
   concat $SlctEarns with $SlctStmt

   do Process-Other-Earnings

end-procedure



Begin-Procedure Report-Headings
  print $Pay032_RunID             (-4,1)
  print $RC_PAYINIT.Run_ID        (0,13)
  print $Pay032_Spcl              (+3,106)
  print $Pay032_Total_hours       (,147)
  print $Pay032_Spcl              (,158)
  print $Pay032_Total_hours       (,166)
  print $Pay032_limit             (,174)
  print $Pay032_Estimated         (+1,52)
  print $Pay032_Std_hrs           (,63)
  print $Pay032_Paycheck_hdg      (,74)
  print $Pay032_Spcl_accum        (,106)
  print $Pay032_Defined           (,115)
  print $Pay032_Estimated         (,125)
  print $Pay032_Paycheck          (,147)
  print $Pay032_Spcl_accum        (,158)
  print $Pay032_Hours             (,166)
  print $Pay032_category          (,174)
  print $Pay032_Empl              (+1,13)
  print $Pay032_Empl              (,38)
  print $Pay032_Standard          (,43)
  print $Pay032_Threshold         (,52)
  print $Pay032_Hrs               (,63)
  print $Pay032_Earnings          (,68)
  print $Pay032_Page              (,74)
  print $Pay032_Line              (,79)
  print $Pay032_Addl              (,85)
  print $Pay032_Paysheet          (,92)
  print $Pay032_Ytd_hours         (,106)
  print $Pay032_Daily             (,115)
  print $Pay032_Pay_period        (,125)
  print $Pay032_Paysheet          (,137)
  print $Pay032_Category          (,147)
  print $Pay032_Ytd_hours         (,158)
  print $Pay032_Ytd_Current       (,166)
  print $Pay032_Maximum           (,174)
  print $Pay032_Employee          (+1,1)
  print $Pay032_Rcd               (,13)
  print $Pay032_Employee_name     (,18)
  print $Pay032_Type              (,38)
  print $Pay032_Hrs               (,43)
  print $Pay032_Maximum           (,52)
  print $Pay032_Frequency         (,63)
  print $Pay032_Code              (,68)
  print $Pay032_Nbr               (,74)
  print $Pay032_Nbr               (,79)
  print $Pay032_Nbr               (,85)
  print $Pay032_Earns_amt         (,92)
  print $Pay032_Amount            (,106)
  print $Pay032_Daily_limit       (,115)
  print $Pay032_Daily_limit       (,125)
  print $Pay032_Hours             (,137)
  print $Pay032_Hours             (,147)
  print $Pay032_Hrs               (,158)
  print $Pay032_YTD_Current2      (,166)
  print $Pay032_Hours             (,174)
  print ' '                       (+2,11)

  let #printlines = 20
End-Procedure


Begin-Procedure Print-Report-line1

  if #printlines > 66
     do page-break
     let #printlines = 0
  end-if

  print $Emplid                   (+1,1)
  do Format-Number(#Emplrcd, $out, '999')
  print $out                      (,13)
  print $Empl_name                (,18)
  print $Empl_type                (,39)
  do Format-Number(#Empl_std_hrs, $out, '99999')
  print $out                      (,40)
  do Format-Number(#FTE, $out, '99.99')
  print $out                      (,46)
  do Format-Number(#Calc_max_hrs,  $out, '999.99')
  print $out                      (,53)
  print $Empl_std_hrs_freq        (,63)
  print $Erncd                    (,68)
  do Format-Number(#Pagenum,  $out, '9999')
  print $out                      (,72)
  do Format-Number(#Linenum,  $out, '9999')
  print $out                      (,77)
  do Format-Number(#Addl_nbr,  $out,'9999')
  print $out                      (,81)
  do Format-Number(#Payline_earns, $out, '9,999,999.99mi')
  print $out                      (,89)
  do Format-Number(#Daily_limit, $out, '999,999.99mi')
  print $out                      (,113)
  do Format-Number(#Daily_amount_limit, $out, '9,999,999.99mi')
  print $out                      (,123)
  do Format-Number(#Payline_hrs,  $out, '999.99')
  print $out                      (,137)

  add 1 to #printlines

End-Procedure

Begin-Procedure Print-Report-line2

  if #printlines > 66
     do page-break
     let #printlines = 0
  end-if

  print $Emplid                   (+1,1)
  do Format-Number(#Emplrcd, $out, '999')
  print $out                      (,13)
  print $Empl_name                (,18)
  print $Empl_type                (,39)
  do Format-Number(#Empl_std_hrs, $out, '99999')
  print $out                      (,40)
  do Format-Number(#FTE, $out, '99.99')
  print $out                      (,46)
  do Format-Number(#Calc_max_hrs,  $out, '999.99')
  print $out                      (,53)
  print $Empl_std_hrs_freq        (,63)
  print $Erncd                    (,68)
  do Format-Number(#Pagenum,  $out, '9999')
  print $out                      (,72)
  do Format-Number(#Linenum,  $out, '9999')
  print $out                      (,77)
  do Format-Number(#Addl_nbr,  $out,'9999')
  print $out                      (,81)
  do Format-Number(#Payline_earns, $out, '9,999,999.99mi')
  print $out                      (,89)
  do Format-Number(#Empl_grs_ytd, $out, '9,999,999.99mi')
  print $out                      (,101)
  do Format-Number(#Daily_limit, $out, '999,999.99mi')
  print $out                      (,113)
  do Format-Number(#Daily_amount_limit, $out, '9,999,999.99mi')
  print $out                      (,123)
  do Format-Number(#Payline_hrs,  $out, '999.99')
  print $out                      (,137)
  do Format-Number(#Empl_Oth_hrs,  $out, '999.99')
  print $out                      (,148)
  do Format-Number(#Empl_hrs_ytd,  $out, '999.99')
  print $out                      (,158)
  do Format-Number(#Employee_hours,  $out, '999.99')
  print $out                      (,166)
  do Format-Number(#Hrs_limit,  $out, '999.99')
  print $out                      (,173)

  add 1 to #printlines

End-Procedure

Begin-Procedure Print-Report-no-hours

  if #printlines > 66
     do page-break
     let #printlines = 0
  end-if

  print $Emplid                   (+1,1)
  do Format-Number(#Emplrcd, $out, '999')
  print $out                      (,13)
  print $Empl_name                (,18)
  print $Empl_type                (,39)
  do Format-Number(#Empl_std_hrs, $out, '99999')
  print $out                      (,40)
  do Format-Number(#FTE, $out, '99.99')
  print $out                      (,46)
  print $Empl_std_hrs_freq        (,63)
  print $Erncd                    (,68)
  do Format-Number(#Pagenum,  $out, '9999')
  print $out                      (,72)
  do Format-Number(#Linenum,  $out, '9999')
  print $out                      (,77)
  do Format-Number(#Addl_nbr,  $out,'9999')
  print $out                      (,81)
  do Format-Number(#Payline_earns, $out, '9,999,999.99mi')
  print $out                      (,89)
  do Format-Number(#Empl_grs_ytd, $out, '9,999,999.99mi')
  print $out                      (,101)
  do Format-Number(#Daily_limit, $out, '999,999.99mi')
  print $out                      (,113)
  do Format-Number(#Daily_amount_limit, $out, '9,999,999.99mi')
  print $out                      (,123)

  add 1 to #printlines

End-Procedure


begin-procedure Process-Other-Earnings

begin-SELECT
B.EMPLID     () on-break print=never  before=Init-Emplid after=Print-Empl-Msg
A.COMPANY    () on-break print=never  level=1  procedure=Page-break
A.PAY_END_DT () on-break print=never  level=2  procedure=Page-break
A.PAYGROUP   () on-break print=never  level=3  procedure=Page-break
B.NAME
B.OFF_CYCLE
B.PAGE_NUM
B.LINE_NUM
C.ADDL_NBR
C.ERNCD
C.OTH_HRS
C.OTH_EARNS
P.PAY_FREQUENCY
P.WORK_SCHEDULE
P.INDUSTRY_SECTOR
P.INDUSTRY

  move &A.Company     to $Company
  move &A.PayGroup    to $PayGroup
  move &A.Pay_End_Dt  to $PayEndDate
  move &B.OFF_CYCLE   to $Off_cycle
  move &B.Emplid      to $Emplid
  let  $Empl_name  = substr(&B.Name,1,20)
  move &B.Page_num    to #Pagenum
  move &B.Line_num    to #Linenum
  move &C.Erncd       to $Erncd
  move &C.Oth_hrs     to #Payline_hrs
  move &C.Oth_earns   to #Payline_earns
  move &C.Addl_nbr    to #Addl_nbr
  move &P.Pay_frequency to $Pay_frequency
  move &P.Work_schedule to $Work_schedule
  move &P.Industry_sector to $Industry_sector
  move &P.Industry    to $Industry

  do Format-DateTime($PayEndDate,$CMP-PEDate,{DEFCMP},'','')
  do Get-DateComponents ($CMP-PEDate,#PEYear,#Payperiod,#PEDay)

  do Get-Daily-Limits
  do Get-Earn-Max
  do Process-Employee


FROM  PS_PAY_CALENDAR A,
      PS_PAY_CHECK B,
      PS_PAY_OTH_EARNS C,
      PS_PAYGROUP_TBL P
WHERE [$SlctCalendar]
  AND B.OFF_CYCLE IN ($SlctOffCycleA, $SlctOffCycleB)
  AND B.PAGE_NUM BETWEEN #SlctPageFrom AND #SlctPageThru
  AND B.COMPANY    = A.COMPANY
  AND B.PAYGROUP   = A.PAYGROUP
  AND B.PAY_END_DT = A.PAY_END_DT
  AND P.COMPANY    = A.COMPANY
  AND P.PAYGROUP   = A.PAYGROUP
  AND P.EFFDT            =
      (SELECT MAX(EFFDT)
         FROM PS_PAYGROUP_TBL
        WHERE COMPANY    = A.COMPANY
          AND PAYGROUP   = A.PAYGROUP
          AND EFF_STATUS = 'A'
          AND EFFDT     <= A.PAY_END_DT)
  AND B.PAYCHECK_STATUS ='C'
  AND B.COMPANY = C.COMPANY
  AND B.PAYGROUP = C.PAYGROUP
  AND B.PAY_END_DT = C.PAY_END_DT
  AND B.OFF_CYCLE = C.OFF_CYCLE
  AND B.PAGE_NUM = C.PAGE_NUM
  AND B.LINE_NUM = C.LINE_NUM
  AND B.SEPCHK   = C.SEPCHK
  [$SlctStmt]
ORDER BY B.COMPANY,
         B.PAY_END_DT,
         B.PAYGROUP,
         B.EMPLID,
         C.ERNCD
end-SELECT

      print $Pay032_end_report (+3,1) center

end-procedure


begin-procedure Get-Daily-Limits

begin-SELECT
AE.PY_LIMIT_DAILY
AE.PY_EARN_CATEGORY

   let $Cat_Erncd   = rtrim(&AE.Py_earn_category,' ')
   let #Daily_limit = &AE.PY_LIMIT_DAILY

FROM PS_PY_REDUCE_ERN AE
  WHERE AE.ERNCD = $Erncd
end-SELECT


end-procedure


begin-procedure Get-Earn-Max

  let #Ern_ytd_max = 0

begin-SELECT
EARN_YTD_MAX

   let #Ern_ytd_max = &EARN_YTD_MAX

FROM PS_EARNINGS_TBL
  WHERE ERNCD = $Erncd
    AND EFFDT =
      (SELECT MAX(EFFDT)
         FROM PS_EARNINGS_TBL
        WHERE ERNCD = $Erncd
          AND EFFDT     <= $PayEndDate)

end-SELECT


end-procedure



begin-procedure Get-Spcl-Accum-Info

     move '''' to $SlctAccum
     move ' ' to $SlctStmt4

begin-SELECT
SP.ERNCD_SPCL

    let $Special_Accum_code = rtrim(&SP.Erncd_spcl, ' ')
    if $SlctAccum <> ''''
        concat ''',''' with $SlctAccum
    end-if
    concat $Special_Accum_code with $SlctAccum

FROM PS_EARNINGS_SPCL SP
WHERE SP.SPCL_EFFECT = 'A'
[$SlctStmt3]
AND   SP.EFFDT = (SELECT MAX(EFFDT)
               FROM PS_EARNINGS_SPCL
               WHERE ERNCD = $Erncd
               AND SPCL_EFFECT = 'A')
end-SELECT

   concat '''' with $SlctAccum
   concat ')' with $SlctAccum
   concat 'AND BAL.ERNCD IN (' with $SlctStmt4
   concat $SlctAccum with $SlctStmt4

end-procedure

begin-procedure Page-break

  if #printlines <> 0 and
     #printlines > 20
     new-page
     do Report-Headings
  end-if
end-procedure

begin-procedure Process-Employee

move ' ' to $Report_message
move ' ' to $Print-no-hours

move 0  to #Empl_Oth_hrs
move 0  to #Empl_Oth_earns

move ' ' to $SlctStmt2
move ' ' to $SlctStmt5
move ' ' to $SlctCateg
do Get-Category-Earns
do Get-Spcl-Accum-Info
do Find-Spcl-Accum-Balance

begin-SELECT
PE.EMPL_RCD
PE.EARNS_BEGIN_DT
PE.EARNS_END_DT

    move &PE.Empl_rcd       to #Emplrcd
    move &PE.Earns_begin_dt to $Earns_begin_dt
    move &PE.Earns_end_dt   to $Earns_end_dt


    if $Industry_sector = 'USFG' and $Industry = 'GOVT'
       do Find-Employee-Details-USF
    else
       do Find-Employee-Details
    end-if

    do Accumulate_Current_Earnings
    do Accumulate_Current_Reversal_Earns
    do SetWorkDayString($Earns_begin_dt, $Earns_end_dt, $Work_schedule, $WorkDayString)
    do FindPayPeriodWrkDays ($Earns_begin_dt, $Earns_end_dt, $Earns_begin_dt,
                                           $WorkDayString, $Pay_frequency, #WorkDays)

    let #Daily_amount_limit = #Workdays * #Daily_limit
    let #Employee_hours   = #Empl_Oth_hrs + #Empl_Rev_hrs + #Empl_hrs_ytd
    let #Employee_amount  = #Empl_Oth_earns  + #Empl_Rev_earns
    let #Employee_amount_ytd  = #Empl_Oth_earns  + #Empl_Rev_earns + #Empl_grs_ytd
    add #payline_hrs to #totalhrs


    evaluate $Empl_std_hrs_freq
      when = 'W'
        let #Calc_max_hrs = #Empl_std_hrs * #FTE * 2
      when = 'M'
        let #Calc_max_hrs = #Empl_std_hrs * #FTE  / 2
      when-other
        let #Calc_max_hrs = #Empl_std_hrs * #FTE
    end-evaluate

    if #Hrs_limit = 0
       move 'Y' to  $Print-no-hours
    end-if

    if #Empl_Oth_hrs > 0

      if #Employee_amount > #Daily_amount_limit
         move 'Y' to $Error_msg1
         if #Daily_amount_limit> #Ern_ytd_max
            and #Ern_ytd_max > 0

            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
         if #Employee_amount_ytd > #Ern_ytd_max
            and #Ern_ytd_max > 0

            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
      end-if

      if #Employee_hours > #Hrs_limit
         and #Hrs_limit > 0
         move 'Y' to $Error_msg2
         if #Daily_amount_limit> #Ern_ytd_max
            and #Ern_ytd_max > 0
            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
         if #Employee_amount_ytd > #Ern_ytd_max
            and #Ern_ytd_max > 0

            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
      end-if

      if #FTE <> 1
         move 'Y' to $Error_msg3
         if #Daily_amount_limit> #Ern_ytd_max
            and #Ern_ytd_max > 0
            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
         if #Employee_amount_ytd > #Ern_ytd_max
            and #Ern_ytd_max > 0

            move #Ern_ytd_max to #Daily_amount_limit
            move 'Y' to $Error_msg4
         end-if
      end-if

    end-if

    IF $Error_msg1 = 'Y' or $Error_msg2 = 'Y' or $Error_msg3 = 'Y'
       or $Error_msg4 = 'Y'

       if $Print-no-hours = 'Y'
         do Print-Report-no-hours
       else
         if #totalhrs = #Empl_Oth_hrs
           do Print-Report-line2
         else
           do Print-Report-line1
         end-if
       end-if
    end-if

FROM PS_PAY_EARNINGS PE
WHERE PE.COMPANY = $Company
  AND PE.PAYGROUP = $PayGroup
  AND PE.PAY_END_DT = $PayEndDate
  AND PE.OFF_CYCLE = $Off_cycle
  AND PE.PAGE_NUM  = #Pagenum
  AND PE.LINE_NUM  = #Linenum
  AND PE.ADDL_NBR  = #Addl_nbr
  AND PE.OK_TO_PAY = 'Y'
  AND PE.EMPLID = $Emplid
end-SELECT

end-procedure

begin-procedure Init-Emplid


move 'N' to $Error_msg1
move 'N' to $Error_msg2
move 'N' to $Error_msg3
move 'N' to $Error_msg4
let #totalhrs = 0

end-procedure


begin-procedure Print-Empl-Msg


   IF $Error_msg1 = 'Y' or $Error_msg2 = 'Y' or $Error_msg3 = 'Y'
      or $Error_msg4 = 'Y'

      Print $Pay032_Message      (+1,92)
      add 1 to #printlines
      move 'N' to $line

      if $Error_msg2= 'Y'
         print $Pay032_cat_hrs_msg     (,104)
         add 1 to #printlines
         move 'Y' to $line
      end-if

      if $Error_msg1= 'Y'
         if $line = 'Y'
            print $Pay032_daily_limit_msg      (+1,104)
            add 1 to #printlines
         else
            print $Pay032_daily_limit_msg      (,104)
            add 1 to #printlines
         end-if
         move 'Y' to $line
      end-if

      if $Error_msg3 = 'Y'
         if $line = 'Y'
            print $Pay032_parttime      (+1,104)
            add 1 to #printlines
         else
            print $Pay032_parttime      (,104)
            add 1 to #printlines
         end-if
         move 'Y' to $line
      end-if

      if $Error_msg4 = 'Y'
         if $line = 'Y'
            print $Pay032_max_ytd_msg    (+1,104)
            add 1 to #printlines
         else
            print $Pay032_max_ytd_msg    (,104)
            add 1 to #printlines
         end-if
      end-if



      print ' '    (+1,104)
      add 1 to #printlines
   end-if

end-procedure


begin-procedure Get-Category-Earns


begin-SELECT
CA1.PY_EARN_CATEGORY

    let $Earn_cat = rtrim(&CA1.Py_earn_category,' ')

FROM PS_PY_REDUCE_ERN CA1
WHERE CA1.ERNCD = $Erncd
end-SELECT

    let #Hrs_limit   = 0

begin-SELECT
PY_LIMIT_HRS

    let #Hrs_limit   = &PY_Limit_hrs

FROM PS_PY_EARN_CAT
WHERE PY_EARN_CATEGORY  = $Earn_cat
end-SELECT

    move '''' to $SlctCateg
    move ' '  to $SlctStmt2
    move ' '  to $SlctStmt5
    move ' '  to $SlctStmt3

begin-SELECT
CA.ERNCD

    let $Cat_Erncd = rtrim(&CA.Erncd,' ')
    if $SlctCateg <> ''''
        concat ''',''' with $SlctCateg
    end-if
    concat $Cat_Erncd with $SlctCateg

FROM PS_PY_REDUCE_ERN CA
WHERE CA.PY_EARN_CATEGORY = $Earn_cat
end-SELECT

   concat '''' with $SlctCateg
   concat ')' with $SlctCateg
   concat 'AND OE1.ERNCD IN (' with $SlctStmt2
   concat $SlctCateg with $SlctStmt2
   concat 'AND SP.ERNCD IN (' with $SlctStmt3
   concat $SlctCateg with $SlctStmt3
   concat 'AND OE3.ERNCD IN (' with $SlctStmt5
   concat $SlctCateg with $SlctStmt5

end-procedure

begin-procedure Accumulate_Current_Earnings

begin-SELECT
SUM(OE1.OTH_HRS)    &OE1.Oth_hrs

  move &OE1.Oth_hrs     to #Empl_Oth_hrs

FROM PS_PAY_OTH_EARNS OE1
WHERE OE1.COMPANY    = $Company
  AND OE1.PAYGROUP   = $PayGroup
  AND OE1.PAY_END_DT = $PayEndDate
  AND OE1.OFF_CYCLE  = $Off_cycle
  AND OE1.PAGE_NUM   = #Pagenum
  AND OE1.LINE_NUM   = #Linenum
   [$SlctStmt2]
end-SELECT



begin-SELECT
SUM(OE2.OTH_EARNS)  &OE2.Oth_earns

  move &OE2.Oth_earns   to #Empl_Oth_earns

FROM PS_PAY_OTH_EARNS OE2
WHERE OE2.COMPANY    = $Company
  AND OE2.PAYGROUP   = $PayGroup
  AND OE2.PAY_END_DT = $PayEndDate
  AND OE2.OFF_CYCLE  = $Off_cycle
  AND OE2.PAGE_NUM   = #Pagenum
  AND OE2.LINE_NUM   = #Linenum
  AND OE2.ERNCD      = $Erncd
end-SELECT

end-procedure

begin-procedure Accumulate_Current_Reversal_Earns


begin-SELECT
SUM(OE3.OTH_HRS)    &OE3.Oth_hrs

  move &OE3.Oth_hrs     to #Empl_Rev_hrs

FROM PS_PAY_CHECK PC, PS_PAY_OTH_EARNS OE3
WHERE PC.COMPANY    = $Company
  AND PC.PAYGROUP   = $PayGroup
  AND PC.PAY_END_DT = $PayEndDate
  AND PC.OFF_CYCLE  = $Off_cycle
  AND PC.PAGE_NUM   = #Pagenum
  AND PC.PAYCHECK_STATUS = 'V'
  AND PC.PAYCHECK_OPTION = 'R'
  AND PC.COMPANY = OE3.COMPANY
  AND PC.PAYGROUP = OE3.PAYGROUP
  AND PC.PAY_END_DT = OE3.PAY_END_DT
  AND PC.PAGE_NUM = OE3.PAGE_NUM
  AND PC.LINE_NUM = OE3.LINE_NUM
  AND PC.OFF_CYCLE = OE3.OFF_CYCLE
   [$SlctStmt5]
end-SELECT


begin-SELECT
SUM(OE4.OTH_EARNS)  &OE4.Oth_earns

  move &OE4.Oth_earns   to #Empl_Rev_earns

FROM PS_PAY_CHECK PC1, PS_PAY_OTH_EARNS OE4
WHERE PC1.COMPANY    = $Company
  AND PC1.PAYGROUP   = $PayGroup
  AND PC1.PAY_END_DT = $PayEndDate
  AND PC1.OFF_CYCLE  = $Off_cycle
  AND PC1.PAGE_NUM   = #Pagenum
  AND PC1.PAYCHECK_STATUS = 'V'
  AND PC1.PAYCHECK_OPTION = 'R'
  AND PC1.COMPANY = OE4.COMPANY
  AND PC1.PAYGROUP = OE4.PAYGROUP
  AND PC1.PAY_END_DT = OE4.PAY_END_DT
  AND PC1.PAGE_NUM = OE4.PAGE_NUM
  AND PC1.LINE_NUM = OE4.LINE_NUM
  AND PC1.OFF_CYCLE = OE4.OFF_CYCLE
  AND OE4.ERNCD      = $Erncd
end-SELECT

end-procedure

begin-procedure Find-Employee-Details

      move ' ' to $Empl_type
      move 0   to #Empl_std_hrs
      move 0   to #FTE

begin-SELECT
J.EMPL_TYPE
J.STD_HOURS
J.STD_HRS_FREQUENCY
J.FTE

     move &J.Empl_type to $Empl_type
     move &J.Std_hours to #Empl_std_hrs
     let $Empl_std_hrs_freq = rtrim(&J.Std_hrs_frequency,' ')
     move &J.FTE       to #FTE

FROM PS_JOB J
WHERE J.EMPLID   = $Emplid
  AND J.EMPL_RCD = #Emplrcd
  AND J.EFFDT    = (SELECT MAX(EFFDT)
                    FROM PS_JOB
                   WHERE EMPLID        = J.EMPLID
                     AND EMPL_RCD      = J.EMPL_RCD
                     AND EFFDT         <= $PayEndDate )
end-SELECT


end-procedure


begin-procedure Find-Employee-Details-USF

      move ' ' to $Empl_type
      move 0   to #Empl_std_hrs
      move 0   to #FTE

begin-SELECT
JF.EMPL_TYPE
JF.STD_HOURS
JF.STD_HRS_FREQUENCY
JF.FTE

     move &JF.Empl_type to $Empl_type
     move &JF.Std_hours to #Empl_std_hrs
     let $Empl_std_hrs_freq = rtrim(&JF.Std_hrs_frequency,' ')
     move &JF.FTE       to #FTE

FROM PS_GVT_JOB JF
WHERE JF.EMPLID   = $Emplid
  AND JF.EMPL_RCD = #Emplrcd
  AND JF.EFFDT    = (SELECT MAX(EFFDT)
                    FROM PS_GVT_JOB
                   WHERE EMPLID        = JF.EMPLID
                     AND EMPL_RCD      = JF.EMPL_RCD
                     AND EFFDT         <= $PayEndDate )
end-SELECT


end-procedure


begin-procedure Find-Spcl-Accum-Balance

     move 0 to #Empl_hrs_ytd
     move 0 to #Empl_grs_ytd
     let $BalanceID = 'CY'

begin-select
BAL_ID_FOR_CAL_YR

  let $BalanceID = &BAL_ID_FOR_CAL_YR

FROM PS_INSTALLATION
end-select

begin-SELECT
BALANCE_YEAR

     move &Balance_year to $Balance_year

FROM PS_PAY_CAL_BAL_ID
WHERE COMPANY = $Company
  AND PAYGROUP = $Paygroup
  AND PAY_END_DT = $PayEndDate
  AND BALANCE_ID = $BalanceID
end-SELECT



begin-SELECT
BAL.HRS_YTD
BAL.GRS_YTD

     add &BAL.Hrs_ytd to #Empl_hrs_ytd
     add &BAL.Grs_ytd to #Empl_grs_ytd

FROM PS_EARNINGS_BAL BAL
WHERE BAL.EMPLID = $Emplid
  AND BAL.COMPANY = $Company
  AND BAL.BALANCE_ID = $BalanceID
  AND BAL.BALANCE_YEAR = $Balance_year
  [$SlctStmt4]
  AND BAL.BALANCE_PERIOD = (SELECT MAX(BALANCE_PERIOD)
                            FROM  PS_EARNINGS_BAL
                            WHERE EMPLID         = BAL.EMPLID
                            AND COMPANY         = BAL.COMPANY
                            AND BALANCE_ID      = BAL.BALANCE_ID
                            AND BALANCE_YEAR    = BAL.BALANCE_YEAR
                            AND ERNCD           = BAL.ERNCD
                            AND BALANCE_PERIOD <= #Payperiod )
end-SELECT


end-procedure

begin-procedure FindPayPeriodWrkDays ($BeginDt, $EndDt, $ContractBeginDt, $WorkDayString, $Option, :#WorkDays)

  do Date-Difference($BeginDt, $EndDt, #TotalDays)
  do Date-Difference($ContractBeginDt, $BeginDt, #DateOffSet)

  let #TotalDays = #TotalDays + 1
  let #DateOffSet = #DateOffSet + 1
  let $TempWorkDayString = substr($WorkDayString, #DateOffSet, #TotalDays)

  do CountWorkDays($TempWorkDayString, $Option, #WorkDays)

end-procedure

begin-procedure CountWorkDays ($WorkDayString, $Option, :#WorkDays)

  let #i = 1
  let #WorkDays = 0
  let #len = length($WorkDayString)

  if $Option = 'P'
      while #i < (#len + 1)

          if substr($WorkDayString, #i, 1) = 'N'
          else
              let #WorkDays = #WorkDays + 1
          end-if
          add 1 to #i
      end-while
  else
      while #i < (#len + 1)
          if substr($WorkDayString, #i, 1) = 'Y'
              let #WorkDays = #WorkDays + 1
          end-if
          add 1 to #i
      end-while
  end-if

end-procedure

begin-procedure SetWorkDayString ($BeginDt, $EndDt, $WorkSched, :$WorkDayString)

  let $WorkDayString = ''
  do Date-Difference($BeginDt, $EndDt, #CalDays)
  let #CalDays = #CalDays + 1

  do Convert-to-DTU-Date($BeginDt, $DTU_Date)
  do DTU-DayofWeek#($DTU_Date, #DayofWeek)

  let $WorkDayString = substr($WorkSched, #DayofWeek, (8 - #DayofWeek))
  let #len = length($WorkDayString)

  if #len > #CalDays
      let $WorkDayString = substr($WorkDayString, 1, #CalDays)
  else
      let #NumofWeeks = floor((#CalDays - (8 - #DayofWeek)) / 7)
      let #i = 0
      while #i < #NumofWeeks
          let $WorkDayString = $WorkDayString || $WorkSched
          add 1 to #i
      end-while

      let #RemainDays = #CalDays - (8 - #DayofWeek) - (#NumofWeeks * 7)
      let $WorkDayString = $WorkDayString || substr($WorkSched, 1, #RemainDays)
  end-if

end-procedure

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'payinit.sqc'   !Report Initialization and Timing
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'datewrk.sqc'   !Routines for working with dates
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
#Include 'sqrtrans.sqc'  !Translate SQR strings to a given language
#Include 'getrplng.sqc'  !Gets the report language
