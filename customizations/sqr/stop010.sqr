!-----------------------------------------------------------------------
! Report Name: STOP010 - Release Receipts
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:53:49                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Program prints a release receipt.  The report
!                format depends on the specific release type.
!-----------------------------------------------------------------------
! Prompts:       Stock ID, Stock Plan ID, Emplid, from Date, Thru Date,
!                Reprint Indicator, Process Group, Grant Nbr, Exercise Nbr,
!                Release Nbr
! Options:       None
! Tables:        STOCK_TBL
!                PERSON_ADDRESS
!                PERSON_NAME
!                PERS_NID
!                JOB
!                TAX_LOCATION1
!                ST_GRANT_EXER
!                ST_EXER_RELEASE
!                ST_GRANT
!                ST_EXER_TAXES
!                ST_EXER_ISSUE
!                ST_OPTION_PLAN
!                RUN_CNTL_ST
!                ST_PRCS_GRP_DTL
! Sorts:         STOCK_ID
!                STOCK_PLAN
!                NAME
!-----------------------------------------------------------------------

#include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsp125.sqc'               ! Portrait 125 Columns

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-Where-Clause
  do Expand-Process-Group
  do Main-Process
  do Reset
  do Successful-EOJ

  let $CurrentTime = datenow()
  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID    = 'STOP010'
  let $ReportTitle = $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.
  let $AsOfDate = $AsOfToday

  if $prcs_process_instance = ''
    input $RC_Reprint_Prompt MAXLEN=1  'Reprint Prior Receipts Y/N?'                  Type=Char
    uppercase $RC_Reprint_Prompt
    !-------------------------------------------------!
    !Keep asking for input if value is not 'Y' or 'N' !
    !-------------------------------------------------!
    while $RC_Reprint_Prompt <> 'Y' and $RC_Reprint_Prompt <> 'N' 
       input $RC_Reprint_Prompt MAXLEN=1  'Reprint Prior Receipts Y/N?'    Type=Char
    end-while
    input $RC_Stock_ID       MAXLEN=10 'Enter Stock ID or press enter for all'        Type=Char
    input $RC_Stock_Plan     MAXLEN=10 'Enter Stock Plan ID or press enter for all'   Type=Char
    input $RC_RunType        MAXLEN=1  'Run by Process Group ''P'' or Employee ''E''' Type=Char
    uppercase $RC_RunType
    while $RC_RunType <> 'P' and $RC_RunType <> 'E' 
       input $RC_RunType     MAXLEN=1  'Run by Process Group ''P'' or Employee ''E''' Type=Char
       uppercase $RC_RunType
    end-while
    if $RC_RunType = 'E'
       input $RC_Emplid      MAXLEN=11 'Enter Emplid or press enter for all'          Type=Char
       input $RC_RelNbr      MAXLEN=8  'Enter Release Number or press enter to skip'  Type=Char
       input $RC_ExertNbr    MAXLEN=8  'Enter Exercise Number or press enter to skip; if you entered a Release number you must enter a grant number'    Type=Char
       input $RC_GrantNbr    MAXLEN=10 'Enter Grant Number or press enter to skip; if you entered a Release number you must enter a grant number'    Type=Char
    end-if
    if $RC_RunType = 'P'
       input $RC_PrcsGrp     MAXLEN=10 'Enter Procees Group or press enter for all'   Type=Char
    end-if
    uppercase $RC_Stock_ID
    uppercase $RC_Stock_Plan
    uppercase $RC_Emplid
    uppercase $RC_PrcsGrp
    uppercase $RC_GrantNbr
    do Ask-from-Thru-Date
    let $RC_FromDate = $FromDate
    let $RC_ThruDate = $ThruDate
  else
    do Get-SQR-Parms                   ! Get Run Control Values
    show 'from Date:    ' $RC_FromDate
    show 'Thru Date:    ' $RC_ThruDate
  end-if

  let $RC_Stock_ID   = rtrim($RC_Stock_ID,' ')
  let $RC_Stock_Plan = rtrim($RC_Stock_Plan,' ')
  let $RC_Emplid     = rtrim($RC_Emplid,' ')
  let $RC_Reprint    = rtrim($RC_Reprint_Prompt,' ')
  let $RC_RunType    = rtrim($RC_RunType,' ')
  let $RC_GrantNbr   = rtrim($RC_GrantNbr,' ')
  let $RC_FromDate   = rtrim($RC_FromDate,' ')
  let $RC_ThruDate   = rtrim($RC_ThruDate,' ')
  let $RC_PrcsGrp    = rtrim($RC_PrcsGrp,' ')

  show 'Reprint:      ' $RC_Reprint_Prompt
  show 'Stock ID:     ' $RC_Stock_ID

  if $RC_Stock_Plan <> ''
    show 'Stock Plan:   ' $RC_Stock_Plan
  end-if

  if $RC_PrcsGrp <> ''
    show 'Prcs Group:   ' $RC_PrcsGrp
  end-if

  if $RC_Emplid <> ''
    show 'Emplid:       ' $RC_Emplid
  end-if

  if $RC_GrantNbr <> ''
    show 'Grant Nbr:    ' $RC_GrantNbr
  end-if

  if #RC_ExerNbr <> 0
    show 'Exercise Nbr: ' #RC_ExerNbr
  end-if

  if #RC_RelNbr <> 0
    show 'Release Nbr: '  #RC_RelNbr
  end-if

  show ' '
  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ('STOP009')

  do Get_Field_Information ('STOCK', 'NID',                $NidLbl,         #DW)
  do Get_Field_Information ('STOCK', 'EMPLID',             $EmpIdLbl,       #DW)
  do Get_Field_Information ('STOCK', 'GRANT_NBR',          $GrantNbrLbl,    #DW)
  do Get_Field_Information ('STOCK', 'GRANT_DT',           $GrantDtLbl,     #DW)
  do Get_Field_Information ('STOCK', 'GRANT_PRICE',        $GrantPriceLbl,  #DW)
  do Get_Field_Information ('STOCK', 'ST_OPTION_TYPE',     $OptionTypeLbl,  #DW)
  do Get_Field_Information ('STOCK', 'STOCK_PLAN',         $StPlanLbl,      #DW)
  do Get_Field_Information ('STOCK', '83B_FILED',          $Filed83bLbl,    #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_NBR',        $RelNbrLbl,      #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_FMV',        $RelFMVLbl,      #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_DT',         $RelDtLbl,       #DW)
  do Get_Field_Information ('STOCK', 'EXERCISE_FMV',       $ExerFMVLbl,     #DW)
  do Get_Field_Information ('STOCK', 'ST_COST_SALE_PRICE', $SalePriceLbl,   #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_STATUS',     $RelStatusLbl,   #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_VALUE',      $RelValueLbl,    #DW)
  do Get_Field_Information ('STOCK', 'DESCRIPTION',        $DescrLbl,       #DW)
  do Get_Field_Information ('STOCK', 'SHARES_RELEASED',    $ShareRelLbl,    #DW)
  do Get_Field_Information ('STOCK', 'SHARES_TRADED',      $ShareTradeLbl,  #DW)
  do Get_Field_Information ('STOCK', 'SHARES_ISSUED',      $ShareIssueLbl,  #DW)
  do Get_Field_Information ('STOCK', 'ISSUANCE_TYPE',      $IssueTypeLbl,   #DW)
  do Get_Field_Information ('STOCK', 'DTC_ACCOUNT_NBR',    $DtcLbl,         #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_METHOD',     $TaxPMLbl,       #DW)
  do Get_Field_Information ('STOCK', 'SHARES_SOLD',        $ShareSoldLbl,   #DW)
  do Get_Field_Information ('STOCK', 'EMPL_RCD',           $EmplRcdLbl,       #DW)


  do Get_Field_Information ('STOP009', 'STOP010',            $ReportTitle,    #DW)
  do Get_Field_Information ('STOP009', 'PLEASE_RETAIN',      $ReportTitle2,   #DW)
  do Get_Field_Information ('STOP009', 'TAX_AMOUNT',         $TaxAmtLbl,      #DW)
  do Get_Field_Information ('STOP009', 'TOTAL_TAX_DUE',      $TotalTaxLbl,    #DW)
  do Get_Field_Information ('STOP009', 'DISTRIB_ISSUE',      $DistIssueLbl,   #DW)
  do Get_Field_Information ('STOP009', 'CALC_AMOUNT_DUE',    $CalcAmtDueLbl,  #DW)
  do Get_Field_Information ('STOP009', 'TRADE_VALUE',        $TradeValueLbl,  #DW)
  do Get_Field_Information ('STOP009', 'AMT_DUE_CO',         $DueCoLbl,       #DW)
  do Get_Field_Information ('STOP009', 'AMT_DUE_OPTIONEE',   $DueOptioneeLbl, #DW)
  do Get_Field_Information ('STOP009', 'SALE_PROCEEDS',      $SaleProcLbl,    #DW)
  do Get_Field_Information ('STOP009', 'SALE_VALUE',         $SaleValueLbl,   #DW)
  do Get_Field_Information ('STOP009', 'SEC_FEES',           $SECFeeLbl,      #DW)
  do Get_Field_Information ('STOP009', 'BROKERAGE_FEES',     $BrokerFeeLbl,   #DW)
  do Get_Field_Information ('STOP009', 'BROKERAGE_CMSN',     $BrokerCmsnLbl,  #DW)
  do Get_Field_Information ('STOP009', 'EST_SALE_PROCEEDS',  $EstSaleLbl,     #DW)
  do Get_Field_Information ('STOP009', 'ISSUE_INS_TITLE',    $IssueTitle,     #DW)
  do Get_Field_Information ('STOP009', 'CONTROL_NBR',        $CntlNbrLbl,     #DW)
  do Get_Field_Information ('STOP009', 'REG_NAME_ADDRESS',   $RegLbl,         #DW)
  do Get_Field_Information ('STOP009', 'OPTIONEE_INFO',      $OptioneeTitle,  #DW)
  do Get_Field_Information ('STOP009', 'DEPTID',             $DeptLbl,        #DW)
  do Get_Field_Information ('STOP009', 'LOCATION',           $LocnLbl,        #DW)
  do Get_Field_Information ('STOP009', 'RELEASE_INFO',       $ReleaseTitle,   #DW)
  do Get_Field_Information ('STOP009', 'SWAP_TRADE_FMV',     $SwapFMVLbl,     #DW)
  do Get_Field_Information ('STOP009', 'INCOME_CALC',        $IncCalcLbl,     #DW)
  do Get_Field_Information ('STOP009', 'GRANT_INFO',         $GrantTitle,     #DW)
  do Get_Field_Information ('STOP009', 'COST_OF_SHARES',     $ShareCostLbl,   #DW)
  do Get_Field_Information ('STOP009', 'TOTAL_ORD_INC',      $TotOrdIncLbl,   #DW)
  do Get_Field_Information ('STOP009', 'TOTAL_TAX_INC',      $TotTaxIncLbl,   #DW)
  do Get_Field_Information ('STOP009', 'TAX_CALC',           $TaxCalcTitle,   #DW)
  do Get_Field_Information ('STOP009', 'EMP_ACCT_NBR',       $EmpAcctLbl,     #DW)
  do Get_Field_Information ('STOP009', 'FEDERAL_EIN',        $FedEinLbl,      #DW)
  do Get_Field_Information ('STOP009', 'REL_RCPT_FOOT1',     $Footer1,        #DW)
  do Get_Field_Information ('STOP009', 'REL_RCPT_FOOT2',     $Footer2,        #DW)
  do Get_Field_Information ('STOP009', 'FEDERAL_DESCR',      $FedDescr,       #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Construct portion of where clause, to be used in the main select,
!          based on report parameters choosen.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  let $SQLQuote      = ''''
  let $WhereEmplid   = ''
  let $WhereGrantNbr = ''
  let $WhereExerNbr  = ''
  let $WhereRelNbr   = ''
  let $WherePrcsGrp  = ''

  if $RC_Stock_ID <> ''
    let $WhereStockID   = ' and F.STOCK_ID  = '     || $SQLQuote || $RC_Stock_ID   || $SQLQuote
  else
    let $WhereStockID   = ''
  end-if

  if $RC_Stock_Plan <> ''
    let $WhereStockPlan = ' and G.STOCK_PLAN  = '   || $SQLQuote || $RC_Stock_Plan || $SQLQuote
  else
    let $WhereStockPlan = ''
  end-if

  if $RC_FromDate <> ''
    let $WhereFromDate  = ' and R.RELEASE_DT  >= ' || $SQLQuote || $RC_FromDate   || $SQLQuote
  else
    let $WhereFromDate  = ''
  end-if

  if $RC_ThruDate <> ''
   let $WhereThruDate  = ' and R.RELEASE_DT  <= ' || $SQLQuote || $RC_ThruDate   || $SQLQuote
  else
   let $WhereThruDate  = ''
  end-if

  if $RC_RunType = 'E'
    if $RC_Emplid <> ''
      let $WhereEmplid   = ' and F.EMPLID = '       || $SQLQuote || $RC_Emplid     || $SQLQuote
    end-if
    if $RC_GrantNbr <> ''
      let $WhereGrantNbr = ' and G.GRANT_NBR = '    || $SQLQuote || $RC_GrantNbr   || $SQLQuote
    end-if
    if #RC_ExerNbr <> 0
      let $RC_ExerNbr = to_char(#RC_ExerNbr)
      let $WhereExerNbr  = ' and F.EXERCISE_NBR = ' ||$RC_ExerNbr
    end-if
    if #RC_RelNbr <> 0
      let $RC_RelNbr = to_char(#RC_RelNbr)
      let $WhereExerNbr  = ' and R.RELEASE_NBR = ' ||$RC_RelNbr
    end-if
  end-if

  if $RC_PrcsGrp <> ''
    let $WherePrcsGrp = ' and PG.PROCESS_GROUP = ' || $SQLQuote || $RC_PrcsGrp || $SQLQuote
  end-if

  if rtrim($RC_Reprint,' ') = 'N'
    let $WhereReprint = ' and R.RELEASE_RECEIPT_DT IS NULL'
  else
    let $WhereReprint = ' and R.RELEASE_RECEIPT_DT IS NOT NULL'
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main report logic - select the fields for the report
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

  let $Print = 'N'
  do Define-PrimJob-Clause('D',$AsOfToday, $PRIM_JOB_CLAUSE)     ! getprimj.sqc

Begin-Select

A.COMPANY
B.NAME
C.NATIONAL_ID
D.COMPANY
E.COUNTRY
F.EMPLID
F.STOCK_ID
F.ELECTION_83B
F.EXERCISE_NBR
F.RESTRICTD_EXERCISE
F.EXERCISE_FMV
R.RELEASE_NBR
R.RELEASE_DT
R.RELEASE_STATUS
R.RELEASE_METHOD
R.RELEASE_FMV
R.ST_COST_SALE_PRICE
R.ST_COST_SHARE_SOLD
R.SWAP_FMV
R.TRANSFER_CNTL_NBR
R.RELEASE_VALUE
R.EST_GROSS_PROCEEDS
R.TRADE_VALUE
R.ST_AMT_INCOME
R.ST_ORD_INCOME
R.SEC_FEES
R.BROKERAGE_FEES
R.BROKERAGE_CMSN
R.SHARES_RELEASED
R.SHARES_TRADED
G.GRANT_NBR
G.EMPL_RCD
G.GRANT_DT
G.STOCK_PLAN
G.GRANT_PRICE
G.ST_OPTION_TYPE
  
  let $Print            = 'Y'
  let $StockCompany     = rtrim(&a.company,' ')
  let $Name             = rtrim(&b.name, ' ')
  let $NationalId       = rtrim(&c.national_id, ' ')
  let $JobCompany       = rtrim(&d.company,' ')
  let $TaxCountry       = rtrim(&e.country,' ')
  let $Emplid           = rtrim(&f.emplid, ' ')
  let $StockId          = rtrim(&f.stock_id,' ')
  let #ExerciseNbr      = &f.exercise_nbr
  let #ExerciseFmv      = &f.exercise_fmv
  let $Election83b      = rtrim(&f.election_83b,' ')
  let $RestrictExer     = rtrim(&f.restrictd_exercise,' ')
  let #ReleaseNbr       = &r.release_nbr
  let $ReleaseDt        = rtrim(&r.release_dt, ' ')
  let $ReleaseStatus    = rtrim(&r.release_status, ' ')
  let $ReleaseMethod    = rtrim(&r.release_method,' ')
  let #ReleaseFmv       = &r.release_fmv
  let #CostSalePrice    = &r.st_cost_sale_price
  let #SharesSold       = &r.st_cost_share_sold
  let #SwapFmv          = &r.swap_fmv
  let #TransferCntlNbr  = &r.transfer_cntl_nbr
  let #ReleaseValue     = round(&r.release_value,2)
  let #EstGrossProceeds = round(&r.est_gross_proceeds,2)
  let #TradeValue       = round(&r.trade_value,2)
  let #AmtIncome        = round(&r.st_amt_income,2)
  let #OrdIncome        = round(&r.st_ord_income,2)
  let #SecFees          = round(&r.sec_fees,2)
  let #BrokerageFees    = round(&r.brokerage_fees,2)
  let #BrokerageCmsn    = round(&r.brokerage_cmsn,2)
  let #SharesReleased   = &r.shares_released
  let #SharesTraded     = &r.shares_traded
  let $GrantNbr         = rtrim(&g.grant_nbr, ' ')
  let #Emplrcd          = &g.empl_rcd
  let $GrantDt          = rtrim(&g.grant_dt, ' ')
  let $StockPlan        = rtrim(&g.stock_plan,' ')
  let #GrantPrice       = &g.grant_price
  let $OptionType       = rtrim(&g.st_option_type,' ')

  let $AddressType = 'MAIL'
  do Get-Empl-Address
  if $AddressFound = 'N'
    let $AddressType = 'HOME'
    do Get-Empl-Address
  end-if

  do Get-Other-Addr

  let $EAddress1        = rtrim(&ADDRESS1_OTHER, ' ')
  let $EAddress2        = rtrim(&ADDRESS2_OTHER, ' ')
  let $EAddress3        = rtrim(&ADDRESS3_OTHER, ' ')
  let $ECity            = rtrim(&CITY_OTHER, ' ')
  let $EState           = rtrim(&STATE_OTHER, ' ')
  let $EPostal          = rtrim(&POSTAL_OTHER, ' ')
  let $ECountry         = rtrim(&COUNTRY_OTHER, ' ')

  if $EAddress1 = ''
     let $EAddress1    = rtrim(&person_address.address1, ' ')
     let $EAddress2    = rtrim(&person_address.address2, ' ')
     let $EAddress3    = rtrim(&person_address.address3, ' ')
     let $ECity        = rtrim(&person_address.city, ' ')
     let $EState       = rtrim(&person_address.state, ' ')
     let $EPostal      = rtrim(&person_address.postal, ' ')
     let $ECountry     = rtrim(&person_address.country, ' ')
  end-if

  if $JobCompany = $StockCompany
    let $Company         = $JobCompany
    do Get-Company-Info
    let $CorporationName = $CDescr
    let $CompanyName     = $CDescr
  else
    let $Company = $JobCompany
    do Get-Company-Info
    let $CompanyName     = $CDescr
    let $Company = $StockCompany
    do Get-Company-Info
    let $CorporationName = $CDescr
  end-if

  do Get-Income-Method
  do Print-Report
  do Update-ReceiptDt
  new-page

from PS_STOCK_TBL        A,
     PS_PERSON_NAME      B,
     PS_PERS_NID         C,
     PS_JOB              D,
     PS_TAX_LOCATION1    E,
     PS_ST_GRANT_EXER    F,
     PS_ST_GRANT         G,
     PS_ST_EXER_RELEASE  R,
     PS_R_PRCS_GRP_DTL   PG
where A.STOCK_ID         = G.STOCK_ID
  and G.EMPLID           = F.EMPLID
  and G.STOCK_ID         = F.STOCK_ID
  and G.GRANT_NBR        = F.GRANT_NBR
  and F.EMPLID           = R.EMPLID
  and F.STOCK_ID         = R.STOCK_ID
  and F.GRANT_NBR        = R.GRANT_NBR
  and F.EXERCISE_NBR     = R.EXERCISE_NBR
  and D.EMPLID           = F.EMPLID
  and D.EFFDT            = (SELECT MAX(EFFDT)   from PS_JOB
                            where     EMPLID    = D.EMPLID
                              and     EMPL_RCD  = D.EMPL_RCD
                              and     EFFDT    <= $AsOfToday)
  and D.EMPL_RCD         = [$PRIM_JOB_CLAUSE]
  and D.EFFSEQ           = (SELECT MAX(EFFSEQ)  from PS_JOB
                            where     EMPLID    = D.EMPLID
                              and     EMPL_RCD  = D.EMPL_RCD
                              and     EFFDT     = D.EFFDT)
  and B.EMPLID           = F.EMPLID
  and C.EMPLID           = F.EMPLID
  and C.COUNTRY          = E.COUNTRY
  and C.NATIONAL_ID_TYPE = 'PR'
  and E.TAX_LOCATION_CD  = D.TAX_LOCATION_CD
  and R.RELEASE_STATUS   = 'A'
  and PG.COMPANY         = D.COMPANY
  and PG.PAYGROUP        = D.PAYGROUP
  and PG.REPORT_ID       = $ReportID  
  [$WhereFromDate]
  [$WhereThruDate]
  [$WhereStockID]
  [$WhereStockPlan]
  [$WhereEmplid]
  [$WhereReprint]
  [$WhereGrantNbr]
  [$WhereExerNbr]
  [$WhereRelNbr]
  [$WherePrcsGrp]
order by F.STOCK_ID,
         G.STOCK_PLAN,
         B.NAME

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Empl-Address
! Descr:   Retrieves the Employee's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Empl-Address

  let $AddressFound = 'N'

Begin-Select

PERSON_ADDRESS.ADDRESS1
PERSON_ADDRESS.ADDRESS2
PERSON_ADDRESS.ADDRESS3
PERSON_ADDRESS.CITY
PERSON_ADDRESS.STATE
PERSON_ADDRESS.POSTAL
PERSON_ADDRESS.COUNTRY

  let $AddressFound = 'Y'
  let $EAddress1    = rtrim(&person_address.address1, ' ')
  let $EAddress2    = rtrim(&person_address.address2, ' ')
  let $EAddress3    = rtrim(&person_address.address3, ' ')
  let $ECity        = rtrim(&person_address.city, ' ')
  let $EState       = rtrim(&person_address.state, ' ')
  let $EPostal      = rtrim(&person_address.postal, ' ')
  let $ECountry     = rtrim(&person_address.country, ' ')

from PS_PERSON_ADDRESS PERSON_ADDRESS
where PERSON_ADDRESS.EMPLID       = $Emplid
  and PERSON_ADDRESS.ADDRESS_TYPE = $AddressType

End-Select

End-Procedure


!-----------------------------------------------------------------------
! Section: Get-Income-Method
! Descr:   Retrieves Income Method rule
!-----------------------------------------------------------------------

Begin-Procedure Get-Income-Method

  let $NqIncMthd     = ''
  let $RsaIncMthd    = ''

Begin-Select

X.NQ_ORD_INC_MTHD
X.RSA_INC_MTHD

  let $NqIncMthd  = rtrim(&x.nq_ord_inc_mthd,' ')
  let $RsaIncMthd = rtrim(&x.rsa_inc_mthd,' ')

from PS_ST_OPTION_PLAN X
where X.STOCK_ID            = $StockId
      and X.STOCK_PLAN      = $StockPlan
      and X.STOCK_PLAN_TYPE = 'O'
      and X.EFFDT           = (SELECT MAX(EFFDT) from PS_ST_OPTION_PLAN
                                where STOCK_ID        = X.STOCK_ID
                                  and STOCK_PLAN      = X.STOCK_PLAN
                                  and STOCK_PLAN_TYPE = X.STOCK_PLAN_TYPE
                                  and EFFDT          <= $ReleaseDt)
End-Select

 if $OptionType = 'RSA'
  or $OptionType = 'NQ'
  or $OptionType = 'NSAR'
  evaluate $OptionType
    when = 'NQ'
    when = 'NSAR'
      evaluate $NqIncMthd
        when = 'FMV'
          let $IncRule = 'FMV'
          break
        when = 'LOW'
          if #ExerciseFmv <= #CostSalePrice
            let $IncRule = 'FMV'
          else
            let $IncRule = 'SP'
          end-if
          break
        when = 'SP'
          let $IncRule = 'SP'
          break
      end-evaluate
      break
    when = 'RSA'
      evaluate $RsaIncMthd
        when = 'FMV'
          let $IncRule = 'FMV'
          break
        when = 'LOW'
          if #ExerciseFmv <= #CostSalePrice
            let $IncRule = 'FMV'
          else
            let $IncRule = 'SP'
          end-if
          break
        when = 'SP'
          let $IncRule = 'SP'
          break
      end-evaluate
      break
    end-evaluate
  end-if

End-Procedure Get-Income-Method

!-----------------------------------------------------------------------
! Section: Print-Report
! Descr:   Prints and formats the Relaese Receipts
!-----------------------------------------------------------------------
Begin-Procedure Print-Report


  date-time () 'Day, Mon DD, YYYY  HH:MI PM' &PrintDate
  print &PrintDate                                         ( 1,000,   ) center bold
  print $ReportTitle                                       (+1,001,   ) center bold
  print $ReportTitle2                                      (+1,001,041)

  print $StockId                                           (+2,001,010)
  print $CorporationName                                   (+1,001,030)
  print $CAddress1                                         (+1,001,035)
  if $CAddress2 <> ''
    print $CAddress2                                       (+1,001,035)
  end-if
  if $CAddress3 <> ''
    print $CAddress3                                       (+1,001,035)
  end-if
  if $CAddress1 <> ''
    let $CityStZip = $CCity || ', ' || $CState || ' '
    let #Length = Length($CPostal)
    if $CCountry = 'USA'
      if #Length = 5
        let $Postal = edit($CPostal, 'XXXXX')
      else
        let $Postal = edit($CPostal, 'XXXXX-XXXX')
      end-if
    end-if
    let $CityStZip = $CityStZip || $Postal
    print $CityStZip                                       (+1,001,051)
  end-if
  let $CityStZip = ''
  let $Postal    = ''
  print $CCountry                                          (+1,001,003)
  print $FedEinLbl                                         (+1,001,011)
  print ':'                                                (  ,   ,001)
  print &j.federal_ein                                     (  , +1,010) edit XX-XXXXXXX

!--------------------------------------
! Optionee Info
!--------------------------------------
  let #LineCnt     = 0                  ! Used for positioning the section
  let #LineCnt2    = 0                  ! Will print the left column and then back up and print the right
  let #AdvanceLine = 0
  let #RevLine     = 0

  print $OptioneeTitle                                     (14,001,020) underline
  print $EmpIdLbl                                          (+1,001,006)
  print ':'                                                (  ,   ,001)
  print $Emplid                                            (  ,030,011)
  print $NidLbl                                            (+1,001,003)
  print ':'                                                (  ,   ,001)

  evaluate $TaxCountry
    when = 'USA'
      print $NationalId                                    (  ,030,011) edit XXX-XX-XXXX
      break
    when = 'CAN'
      print $NationalId                                    (  ,030,013) edit XXX-XXX-XXXXX
      break
    when-other
      print $NationalId                                    (  ,030,020)
      break
  end-evaluate

  do Rotate-Name
  print $Name                                              (-1,075,045)
  print $EAddress1                                         (+1,075,035)
  if $EAddress2 <> ''
    print $EAddress2                                       (+1,075,035)
  end-if
  if $EAddress3 <> ''
    print $EAddress3                                       (+1,075,035)
  end-if
  if  rtrim($EAddress1,' ') <> ''
    let $CityStZip = rtrim($ECity,' ') || ', ' || rtrim($EState,' ') || ' '
    let #Length = Length($EPostal)
    if $ECountry = 'USA'
      if #Length = 5
        let $EPostal = edit($EPostal, 'XXXXX')
      else
        let $EPostal = edit($EPostal, 'XXXXX-XXXX')
      end-if
    end-if
    let $CityStZip = $CityStZip || $EPostal
    print $CityStZip                                       (+1,075,050)
  end-if
  if $ECountry <> ''
    print $ECountry                                        (+1,075,003)
  end-if

  let $CityStZip = ''
  let $EPostal  = ''
  let $ECountry = ''

!--------------------------------------
! Grant Information
!--------------------------------------
  print $GrantTitle                                        (22,001,017) underline
  print $GrantNbrLbl                                       (+1,001,012)
  print ':'                                                (  ,   ,001)
  print $GrantNbr                                          (  ,030,010)

  print $EmplRcdLbl                                        (  ,045,009)
  print ':'                                                (  ,   ,001)
  print  #Emplrcd                                          (  , +1,002) edit 99
 
  print $OptionTypeLbl                                     (  ,068,011)
  print ':'                                                (  ,   ,001)
  print $OptionType                                        (  ,095,004)
  print $GrantDtLbl                                        (+1,001,010)
  print ':'                                                (  ,   ,001)
  do Format-DateTime ($GrantDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,030,010)
  print $StPlanLbl                                         (  ,068,013)
  print ':'                                                (  ,   ,001)
  print $StockPlan                                         (  ,095,010)
  print $GrantPriceLbl                                     (+1,001,011)
  print ':'                                                (  ,   ,001)
  print #GrantPrice                                        (  ,031,022) edit $99,999,999,999.999999
  let $FieldName  = 'PSYESNO'
  let $FieldValue = $Election83b
  do Read-Translate-Table
  let $YesNoLbl = $XlatLongName
  print $Filed83bLbl                                       (  ,068,012)
  print ':'                                                (  ,   ,001)
  print $YesNoLbl                                          (  ,095,030)

!--------------------------------------
! Release Information
!--------------------------------------
  print $ReleaseTitle                                      (+2,001,050) underline
  print $RelNbrLbl                                         (+1,001,014)
  print ':'                                                (  ,   ,001)
  print #ReleaseNbr                                        (  ,030,008) edit 99999999
  print $RelFMVLbl                                         (  ,068,011)
  print #ReleaseFmv                                        (  ,096,022) edit $99,999,999,999.999999
  print $RelDtLbl                                          (+1,001,012)
  print ':'                                                (  ,   ,001)
  do Format-DateTime ($ReleaseDt, $Date, {DEFDATE}, '', '')
  print $Date                                              (  ,030,010)
  print $ExerFMVLbl                                        (  ,068,012)
  print ':'                                                (  ,   ,001)
  print #ExerciseFmv                                       (  ,096,022) edit $99,999,999,999.999999
  let $FieldName  = 'RELEASE_STATUS'
  let $FieldValue = $ReleaseStatus
  do Read-Translate-Table
  let $Status = $XlatLongName
  print $RelStatusLbl                                      (+1,001,014)
  print ':'                                                (  ,   ,001)
  print $Status                                            (  ,030,030)

 !----------------------------------------------------------!
 ! Only print sale price if same day sale or sale to cover. !
 ! Else print swap fmv if swap or trade.                    !
 !----------------------------------------------------------!
  let $Sale = 'N'
  let $Swap = 'N'
  if $ReleaseMethod= 'STC' or $ReleaseMethod= 'SDS'
    let $Sale = 'Y'
    print $SalePriceLbl                                    (  ,068,010)
    print ':'                                              (  ,   ,001)
    print #CostSalePrice                                   (  ,096,022) edit $99,999,999,999.999999
  else
    if $ReleaseMethod= 'TRD'
      print $SwapFMVLbl                                    (  ,068,009)
      print ':'                                            (  ,   ,001)
      print #SwapFmv                                       (  ,096,022) edit $99,999,999,999.999999
      let $Swap = 'Y'
    end-if
  end-if
  let $FieldName  = 'RELEASE_METHOD'
  let $FieldValue = $ReleaseMethod
  do Read-Translate-Table
  let $ReleaseMethod_Desc = rtrim($XlatLongName,' ')
  print $TaxPMLbl                                          (+1,001,015)
  print ':'                                                (  ,   ,001)
  print $ReleaseMethod_Desc                                (  ,030,030)

 !----------------------------------------------------------!
 ! Only print shares sold if same day sale or sale to cover.!
 !----------------------------------------------------------!
  if $ReleaseMethod= 'STC' or $ReleaseMethod= 'SDS'
    print $ShareSoldLbl                                    (  ,068,011)
    print ':'                                              (  ,   ,001)
    print #SharesSold                                      (  ,096,022) edit $99,999,999,999.999999
  end-if

 !---------------------------------------------------------------------------
 ! if sale price was printed, check to see if trade value should be printed.
 ! if sale price was not printed, we already checked and printed on the line
 ! above.  For placement purposes on the report.
 !---------------------------------------------------------------------------
  if $Sale = 'Y'
    if $ReleaseMethod = 'TRD'
      print $SwapFMVLbl                                      (  ,068,009)
      print ':'                                              (  ,   ,001)
      print #SwapFmv                                         (  ,096,022) edit $99,999,999,999.999999
      let $Swap = 'Y'
    end-if
  end-if

!---------------------------------
! Income Calculation
!---------------------------------
 let #Line1       = 0                  ! Used for positioning the section
 let #Line2       = 0                  ! Will print the left column and then back up and print the right
 let #RevLine     = 0
 let #AdvanceLine = 0

  print $IncCalcLbl                                        (+2,001,040) underline
  if $IncRule = 'FMV'
    let $Rule = $RelFMVLbl
  end-if
  if $IncRule = 'SP'
    let $Rule = $SalePriceLbl
  end-if
  let $FootMarker = ' '
  if $OptionType = 'NQ' 
    or $OptionType = 'RSA' 
    or $OptionType = 'NSAR'
    if $ReleaseMethod= 'STC' 
      let $FootMarker = '*'
      let $FootNote = $Footer1|| ' ' || $Rule || ' ' ||$Footer2
    end-if
    if $ReleaseMethod= 'SDS'
      let $FootMarker = '*'
      let $FootNote = $Footer1|| ' ' || $Rule
    end-if
  end-if

  print $RelValueLbl                                       (+1,001,013)
  print ':'                                                (  ,   ,001)
  print #ReleaseValue                                      (  ,031,022) edit $99,999,999,999,999.99
  print $FootMarker                                        (  ,   ,001)
  add 1 to #Line1
  let #CostOfShares     = round((#SharesReleased * #GrantPrice),2)
  let #CostOfSharesSign = (#CostOfShares * -1)
  print $ShareCostLbl                                      (+1,001,014)
  print ':'                                                (  ,   ,001)
  print #CostOfSharesSign                                  (  ,030,024) edit $99,999,999,999,999.99pr
  print '_'                                                (+1,030,023) fill
  add 2 to #Line1

  ! print different label depending on option type
  evaluate $OptionType
    when = 'NQ'
    when = 'RSA'
    when = 'NSAR'
      print $TotOrdIncLbl                                  (+1,001,021)
      print ':'                                            (  ,   ,001)
      print #OrdIncome                                     (  ,030,024) edit $99,999,999,999,999.99pr
      break
    when = 'ISO'
    when = 'ISAR'
      print $TotTaxIncLbl                                  (+1,001,027)
      print ':'                                            (  ,   ,001)
      print #AmtIncome                                     (  ,030,024) edit $99,999,999,999,999.99pr
      break
  end-evaluate
  add 1 to #Line1

!--------------------------------
! Distribution of Stock Issuance
!--------------------------------
  print $DistIssueLbl                                      (+2,001,040) underline
  add 2 to #Line1
  print $ShareRelLbl                                       (+1,001,015)
  print ':'                                                (  ,   ,001)
  print #SharesReleased                                    (  ,031,022) edit 999,999,999,999,999.99
  print $ShareTradeLbl                                     (+1,001,013)
  print ':'                                                (  ,   ,001)
  print #SharesTraded                                      (  ,031,022) edit 999,999,999,999,999.99
  add 2 to #Line1
  print $ShareIssueLbl                                     (+1,001,013)
  print ':'                                                (  ,   ,001)
  do Get-Shares-Issued
  print #TotalSharesIssued                                 (  ,031,022) edit 999,999,999,999,999.99
  add 1 to #Line1
  let #RevLine = (#Line1 * -1)

!--------------------------------
! Tax Calculation
!--------------------------------
  print $TaxCalcTitle                                      (+#RevLine,068,035)  underline
  print $DescrLbl                                          (+1,068,015)
  print $TaxAmtLbl                                         (  ,108,010)
  add 1 to #Line2
  do Get-Taxes
  let #TotalTax = round(#TotalTax,2)
  print '_'                                                (+1,095,023) fill
  print $TotalTaxLbl                                       (+1,068,015)
  print ':'                                                (  ,   ,001)
  print #TotalTax                                          (  ,096,022) edit $99,999,999,999,999.99
  add 2 to #Line2
  if #Line2 >= #Line1
    let #AdvanceLine = 2
  else
    let #AdvanceLine = (#Line1 - #Line2 + 2)
  end-if

!-------------------------------
! Calculation of Amount Due
!-------------------------------
  print $CalcAmtDueLbl                                     (+#AdvanceLine,001,040) underline
  let #Line1       = 0
  let #Line2       = 0
  let #RevLine     = 0
  let #AdvanceLine = 0
  print $ShareCostLbl                                      (+1,001,014)
  print ':'                                                (  ,   ,001)
  print #CostOfShares                                      (  ,031,022) edit $99,999,999,999,999.99
  print $TotalTaxLbl                                       (+1,001,015)
  print ':'                                                (  ,   ,001)
  print #TotalTax                                          (  ,031,022) edit $99,999,999,999,999.99
  add 2 to #Line1


 !--------------------------------------------------!
 ! Only print trade value if tax pay method = trade !
 !--------------------------------------------------!
  if $ReleaseMethod = 'TRD'
    print $TradeValueLbl                                   (+1,001,011)
    print ':'                                              (  ,   ,001)
    let #TradeValueSign = (#TradeValue * -1)
    print #TradeValueSign                                  (  ,030,024) edit $99,999,999,999,999.99pr
    add 1 to #Line1
  end-if
  let #AmountDue = #TotalTax - #TradeValue
  print '_'                                                (+1,030,023) fill

 !-----------------------------------------------------------------------------------------!
 ! If amount due is negative change label to 'amount due optionee' and display as positive !
 ! otherwise print label 'amount due company'                                              !
 !-----------------------------------------------------------------------------------------!
  if #AmountDue < 0
    print $DueOptioneeLbl                                  (+1,001,019)
    print ':'                                              (  ,   ,001)
    let #AmountDue = (#AmountDue * -1)
    print #AmountDue                                       (  ,031,022) edit $99,999,999,999,999.99
  else
    print $DueCoLbl                                        (+1,001,018)
    print ':'                                              (  ,   ,001)
    print #AmountDue                                       (  ,031,022) edit $99,999,999,999,999.99
  end-if
  add 2 to #Line1
  let #RevLine = (#Line1 * -1)

 !--------------------------------------------------------!
 ! Only print sale info if same day sale or sale to cover !
 !--------------------------------------------------------!
  if $Sale = 'Y'
    print $SaleProcLbl                                     (+#RevLine,068,013) underline
    print $SaleValueLbl                                    (+1,068,010)
    print ':'                                              (  ,   ,001)
    print #EstGrossProceeds                                (  ,096,022) edit $99,999,999,999,999.99
    print $SECFeeLbl                                       (+1,068,008)
    print ':'                                              (  ,   ,001)
    print #SecFees                                         (  ,095,024) edit $99,999,999,999,999.99pr
    print $BrokerFeeLbl                                    (+1,068,014)
    print ':'                                              (  ,   ,001)
    print #BrokerageFees                                   (  ,095,024) edit $99,999,999,999,999.99pr
    print $BrokerCmsnLbl                                   (+1,068,020)
    print ':'                                              (  ,   ,001)
    print #BrokerageCmsn                                   (  ,095,024) edit $99,999,999,999,999.99pr
    print '_'                                              (+1,095,023) fill
    let #SaleProceed = #EstGrossProceeds - #SecFees - #BrokerageFees - #BrokerageCmsn
    print $EstSaleLbl                                      (+1,068,023)
    print ':'                                              (  ,   ,001)
    print #SaleProceed                                     (  ,095,024) edit $99,999,999,999,999.99pr
    add 6 to #Line2
    if #Line2 >= #Line1
       let #AdvanceLine = 3
    else
      let #AdvanceLine = (#Line1 - #Line2 + 3)
    end-if
  end-if

 !--------------------------
 ! Issuance Instructions
 !--------------------------
  if $Sale = 'Y'
    print $IssueTitle                                      (+#AdvanceLine,001,040) center underline
  else
    print $IssueTitle                                      (+3,001,040) center underline
  end-if
  print $CntlNbrLbl                                        (+1,001,014)
  print ':'                                                (  ,   ,001)
  print #TransferCntlNbr                                   (  ,030,007) edit 9999999
  print $StPlanLbl                                         (+1,001,013)
  print ':'                                                (  ,   ,001)
  print $StockPlan                                         (  ,030,010)
  do Get-Issuance-Info
  if $FootMarker = '*'
    print '*'                                              (+2,001,001)
    print $FootNote                                        (  ,   ,120)
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Company-Info
! Descr:   Retrieve the Company Name and Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Company-Info

Begin-Select

J.DESCR
J.ADDRESS1
J.ADDRESS2
J.ADDRESS3
J.ADDRESS4
J.CITY
J.STATE
J.POSTAL
J.COUNTRY
J.FEDERAL_EIN

  let $CDescr      = rtrim(&j.descr, ' ')
  let $CAddress1   = rtrim(&j.address1, ' ')
  let $CAddress2   = rtrim(&j.address2, ' ')
  let $CAddress3   = rtrim(&j.address3, ' ')
  let $CAddress4   = rtrim(&j.address4, ' ')
  let $CCity       = rtrim(&j.city, ' ')
  let $CState      = rtrim(&j.state, ' ')
  let $CPostal     = rtrim(&j.postal, ' ')
  let $CCountry    = rtrim(&j.country, ' ')

from  PS_COMPANY_TBL J
where J.COMPANY    = $Company
  and J.EFFDT      = (SELECT MAX(EFFDT) from PS_COMPANY_TBL JJ
                       where JJ.COMPANY = J.COMPANY
                         and JJ.EFFDT  <= $AsOfToday)
  and J.EFF_STATUS = 'A'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Taxes
! Descr:     Retrieve tax data for a given exercise.
!-----------------------------------------------------------------------
Begin-Procedure Get-Taxes

  let #TotalTax = 0

Begin-Select
T.TAX_CUR
T.STATE
T.LOCALITY
T.ST_STOCK_TAX_TYPE
T1.DESCRSHORT

  let $TaxState      = rtrim(&t.state,' ')
  let $TaxLocality   = rtrim(&t.locality,' ')
  let $TaxDescrShort = rtrim(&t1.descrshort,' ')
  let #TaxCur        = &t.tax_cur
  print $TaxDescrShort                                     (+1,068,010)
  if $TaxState <> '$U'
    print $TaxState                                        (  , +1,006)
    print $TaxLocality                                     (  ,  0,010)
  end-if
  print #TaxCur                                            (  ,100,018) edit $99,999,999,999.99
  add &t.tax_cur to #TotalTax
  add 1 to #Line2

from PS_ST_REL_TAXES    T,
     PS_ST_TAX_TYPE_TBL T1
where T.EMPLID             = $Emplid
  and T.STOCK_ID           = $StockId
  and T.GRANT_NBR          = $GrantNbr
  and T.EXERCISE_NBR       = #ExerciseNbr
  and T.RELEASE_NBR        = #ReleaseNbr
  and T.COUNTRY            = $TaxCountry
  and T1.COUNTRY           = T.COUNTRY
  and T1.ST_STOCK_TAX_TYPE = T.ST_STOCK_TAX_TYPE
order by T.STATE,
         T.ST_STOCK_TAX_TYPE,
         T.LOCALITY


End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Shares-Issued
! Descr:   Add all shares issued for a given release
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Issued

  let #TotalSharesIssue = 0

Begin-Select

HH.SHARES_ISSUED

  let #TotalSharesIssued = #TotalSharesIssued + &hh.shares_issued

from PS_ST_REL_ISSUE HH
where HH.EMPLID       = $Emplid
  and HH.STOCK_ID     = $StockId
  and HH.GRANT_NBR    = $GrantNbr
  and HH.EXERCISE_NBR = #ExerciseNbr
  and HH.RELEASE_NBR  = #ReleaseNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Issuance-Info
! Descr:   Retrieve Issuance Info and Print (Multiple Issuances Possible)
!-----------------------------------------------------------------------
Begin-Procedure Get-Issuance-Info

  let $RegName       = ''
  let $IssueAddress1 = ''
  let $IssueAddress2 = ''
  let $IssueAddress3 = ''
  let $IssueCity     = ''
  let $IssueState    = ''
  let $IssuePostal   = ''
  let $IssueCountry  = ''

Begin-Select

H.REGISTRATION_NAME
H.ADDRESS1
H.ADDRESS2
H.ADDRESS3
H.CITY
H.STATE
H.POSTAL
H.COUNTRY
H.ISSUANCE_TYPE
H.SHARES_ISSUED
H.ST_ACCOUNT_NBR
H.ST_BROKERAGE_ID
H.ST_BRANCH_ID

  let $FieldName    = 'ISSUANCE_TYPE'
  let $FieldValue   = &h.issuance_type
  do Read-Translate-Table
  let $IssuanceDesc = rtrim($XlatLongName,' ')
  let $IssueType    = rtrim(&h.issuance_type, ' ')
  let $AccountNbr   = rtrim(&h.st_account_nbr, ' ')
  let $BrokerageId  = rtrim(&h.st_brokerage_id, ' ')
  let $BranchId     = rtrim(&h.st_branch_id, ' ')
  let #SharesIssued = &h.shares_issued

  evaluate $IssueType
  when = 'B'
    do Get-Branch-Address
    let $RegName       = rtrim(&r1.descr, ' ')
    let $IssueAddress1 = rtrim(&r.address1, ' ')
    let $IssueAddress2 = rtrim(&r.address2, ' ')
    let $IssueAddress3 = rtrim(&r.address3, ' ')
    let $IssueCity     = rtrim(&r.city, ' ')
    let $IssueState    = rtrim(&r.state, ' ')
    let $IssuePostal   = rtrim(&r.postal, ' ')
    let $IssueCountry  = rtrim(&r.country, ' ')
    break
  when = 'C'
    let $RegName       = rtrim(&h.registration_name, ' ')
    let $IssueAddress1 = rtrim(&h.address1, ' ')
    let $IssueAddress2 = rtrim(&h.address2, ' ')
    let $IssueAddress3 = rtrim(&h.address3, ' ')
    let $IssueCity     = rtrim(&h.city, ' ')
    let $IssueState    = rtrim(&h.state, ' ')
    let $IssuePostal   = rtrim(&h.postal, ' ')
    let $IssueCountry  = rtrim(&h.country, ' ')
    break
  when = 'E'
    do Get-Escrow-Address
    let $RegName       = rtrim(&s.descr, ' ')
    let $IssueAddress1 = rtrim(&s.address1, ' ')
    let $IssueAddress2 = rtrim(&s.address2, ' ')
    let $IssueAddress3 = rtrim(&s.address3, ' ')
    let $IssueCity     = rtrim(&s.city, ' ')
    let $IssueState    = rtrim(&s.state, ' ')
    let $IssuePostal   = rtrim(&s.postal, ' ')
    let $IssueCountry  = rtrim(&s.country, ' ')
    break
  end-evaluate

  do Get-Broker-Info
  print $RegLbl                                            (+2,001,029)  underline
  print $RegName                                           (+1,001,050)
  print $IssueAddress1                                     (+1,001,035)
  if $IssueAddress2 <> ''
    print $IssueAddress2                                   (+1,001,035)
  end-if
  if $IssueAddress3 <> ''
    print $IssueAddress3                                   (+1,001,035)
  end-if

  if $IssueAddress1 <> ''
    let $CityStZip = $IssueCity || ', ' || $IssueState || ' '
    let #Length = Length($IssuePostal)
    if $IssueCountry = 'USA'
      if #Length = 5
        let $IssuePostal = edit($IssuePostal, 'XXXXX')
      else
        let $IssuePostal = edit($IssuePostal, 'XXXXX-XXXX')
      end-if
    end-if
    let $CityStZip = $CityStZip || $IssuePostal
    print $CityStZip                                       (+1,001,051)
  end-if
  if $IssueCountry <> '' 
    print $IssueCountry                                    (+1,001,003)
  end-if

  let $CityStZip    = ''
  let $IssuePostal  = ''
  let $IssueCountry = ''
  print $ShareIssueLbl                                     (+2,001,013)
  print ':'                                                (  ,   ,001)
  print #SharesIssued                                      (  ,031,22) edit 999,999,999,999,999.99
  print $IssueTypeLbl                                      (+1,001,013)
  print ':'                                                (  ,   ,001)
  print $IssuanceDesc                                      (  ,030,030)

 !----------------------------------------------------!
 ! if type is broker, print broker DTC account number !
 !----------------------------------------------------!
  if $IssueType = 'B'
    print $DtcLbl                                          (  , +5,004)
    print ':'                                              (  ,   ,001)
    print $DtcAccountNbr                                   (  , +2,010)
  end-if

  print $EmpAcctLbl                                        (+1,001,023)
  print ':'                                                (  ,   ,001)
  print $AccountNbr                                        (  ,030,017)

from PS_ST_REL_ISSUE H
where H.EMPLID       = $Emplid
  and H.STOCK_ID     = $StockId
  and H.GRANT_NBR    = $GrantNbr
  and H.EXERCISE_NBR = #ExerciseNbr
  and H.RELEASE_NBR  = #ReleaseNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Branch-Address
! Descr:   Retrieves the Branch's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Branch-Address

Begin-Select

R1.DESCR
R.ADDRESS1
R.ADDRESS2
R.ADDRESS3
R.CITY
R.STATE
R.POSTAL
R.COUNTRY

from PS_ST_BRKR_BRANCH R,
     PS_ST_BROKER_DTL  R1
where R.ST_BROKERAGE_ID  = $BrokerageId
  and R.ST_BRANCH_ID     = $BranchId
  and R.EFF_STATUS       = 'A'
  and R.EFFDT            = (SELECT MAX(EFFDT) from PS_ST_BRKR_BRANCH
                            where  ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
                              and  ST_BRANCH_ID    = R.ST_BRANCH_ID
                              and  EFFDT          <= $AsOfToday)
  and R1.ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
  and R1.EFF_STATUS      = 'A'
  and R1.EFFDT           = (SELECT MAX(EFFDT) from PS_ST_BROKER_DTL
                           where  ST_BROKERAGE_ID = R1.ST_BROKERAGE_ID
                             and  EFFDT          <= $AsOfToday)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Escrow-Address
! Descr:   Retrieves the Transfer Agent's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Escrow-Address

Begin-Select

S.DESCR
S.ADDRESS1
S.ADDRESS2
S.ADDRESS3
S.CITY
S.STATE
S.POSTAL
S.COUNTRY

from PS_ST_AGENT_DTL S,
     PS_STOCK_DTL    S1
where S.ST_AGENCY_ID = S1.ESCROW_AGENCY_ID
  and S.EFF_STATUS   = 'A'
  and S.EFFDT        = (SELECT MAX(EFFDT) from PS_ST_AGENT_DTL
                        where  ST_AGENCY_ID = S.ST_AGENCY_ID
                          and  EFFDT       <= $AsOfToday)
  and S1.STOCK_ID    = $StockId
  and S1.EFF_STATUS  = 'A'
  and S1.EFFDT       = (SELECT MAX(EFFDT) from PS_STOCK_DTL
                        where  STOCK_ID     = S1.STOCK_ID
                          and  EFFDT       <= $AsOfToday)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Broker-Info
! Descr:   Retrieves the Brokers DTC account number
!-----------------------------------------------------------------------
Begin-Procedure Get-Broker-Info

Begin-Select

K.DTC_ACCOUNT_NBR

  let $DtcAccountNbr = rtrim(&k.dtc_account_nbr, ' ')

from PS_ST_BROKER_TBL K
where K.ST_BROKERAGE_ID = $BrokerageId

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-ReceiptDt
! Descr:   Updates the exercise receipt date to the date the report is run
!-----------------------------------------------------------------------
Begin-Procedure Update-ReceiptDt

  let $Procedure = 'Update-ReceiptDt'
  let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error
update PS_ST_EXER_RELEASE
   set RELEASE_RECEIPT_DT = $AsOfDate
 where EMPLID       = $Emplid
   and STOCK_ID     = $StockId
   and GRANT_NBR    = $GrantNbr
   and EXERCISE_NBR = #ExerciseNbr
   and RELEASE_NBR  = #ReleaseNbr
End-Sql

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'curdttim.sqc'                !Procedures: Get-Current-DateTime
#include 'datetime.sqc'                !Procedures: Init-Datetime
#include 'eoj.sqc'                     !End of Report Format
#include 'number.sqc'                  !Procedures: Init-Number
#include 'prcsapi.sqc'                 !Process Scheduler API
#include 'prcsdef.sqc'                 !Update Process Open_Trans variable declaration
#include 'reset.sqc'                   !Reset printer procedure
#include 'strunctl.sqc'                !Stock Admin's Run Control Record
#include 'getrplng.sqc'                !Gets the report language
#include 'sqlerr.sqc'                  !SQL error processing
#include 'getprimj.sqc'                !Builds primary job dynamic where clause
#include 'stprcgrp.sqc'                !Creates temp table with all combos for a process group
#include 'rotname1.sqc'                !First Name, Last Name#include 'sqrtrans.sqc'
#include 'readxlat.sqc'
#include 'askftd.sqc'
#include 'datemath.sqc'
#include 'sqrtrans.sqc'
#include 'getothad.sqc'
