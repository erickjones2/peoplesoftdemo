!***********************************************************************
! GPBRFR01.- Financial Register.                                       *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!                                                                      *
!***********************************************************************
!                                                                      *
!          $Date:  2015/04/13:18:02:15                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!***********************************************************************

#include 'setenv.sqc'   !Set environment

#define Col05       5 
#define Col15      15
#define Col20      20
#define Col26      26
#define Col35      35
#define Col55      55
#define Col64      64
#define Col67      67
#define Col75      75
#define Col85      85
#define Col94      94
#define Col97      97
#define Col102    102
#define Col105    105
#define Col110    110
#define Col114    114
#define Col117    117

!**************************************
Begin-Setup
!**************************************
#include 'ptset01.sqc'
End-Setup

!**************************************
Begin-report
#debug show '** Begin-Report **'
!**************************************
  Do Init-Report
  Do Select-Parameters
  
  Let $SecurityClauseWithERN = ''
  Let $_TableAlias = 'J'
  Do Security-Param
  
  if $Population <> ''
     do Def-Arrays
     do Process-Main
  else
     show 'Run Control Missing '
  End-if
  If $Population = '4'
     Do Delete-Employees
  End-if
  do Stdapi-Term
  do Reset 
  date-time () hh:mi:ss &timeEnd
  display 'Report Ended: ' noline
  display &timeEnd  
End-report

!***************************************
Begin-Procedure Init-Report
#debug show '** Init-Report **'
!***************************************  
  move '1' to $ReportDateType
  move '1' to $ReportYear4
  move 'GPBRFR01' to $ReportId
  move 'Financial Register Report' to $ReportTitle
  move 'V.15b' to $ReportVersion  
  display $ReportID
  display $ReportTitle
  display $ReportVersion
  
  Alter-Locale MONEY-SIGN = 'R$'
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  
  do Init-Datetime
  do Init-Number
  do Stdapi-Init
  do Get-Current-Datetime    
  Let #StdFont     = 5                  !Times Roman proportional
  Let #StmtPntSize = 8                  !statement point-size
  Let #DescrSize   = 6                  !Pin Name Size Print
  do Report-Translation

End-Procedure Init-Report

!***************************
Begin-heading 11
!***************************
  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
  
  graphic (, 1, 125) box 5 4   
  
  print $TPeopleSoft       ( 1,)          center  
  print $TReportId         (+1,{Col05})
  print $ReportID          (  ,{Col15})
  Alter-Printer Point-size = 6 Font-Type = Proportional Font = #StdFont
  print $prcs_process_instance (2,+2)
  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont  
  print $TPage             (  ,{Col102})
  print #page-count        (  ,{Col110})  edit 88888888
  print $EstabidDescr      (+1,{Col05})
  print $TTitle01          ()             center
  print $TTime             (  ,{Col102})
  print $ReportTime        (  ,{Col110}) 
  print $EstAddress1       (+1,{Col05})
  print $TDate             (  ,{Col102})
  print $ReportDate        (  ,{Col110})
  print $EstAddress2       (+1,{Col05})
 
  graphic                  (+2, 1, 125)    box 3 1

  print $TCompany          (  ,{Col05})
  print $Company           (  ,{Col20})
  print $CompanyNm         (  ,{Col35}) 
 
  Do Format-DateTime($BeginDt, $BeginDate, {DEFDMY}, '', '')
  Do Format-DateTime($EndDt, $EndDate, {DEFDMY}, '', '')
 
  print $TEstabid          (+1,{Col05})
  print $Estabid           (  ,{Col20})
  print $EstabidDescr      (  ,{Col35})
  print 'CNPJ:'            (  ,90)
  print $CNPJ              (  ,100)
 
  print $TEmplid           (+1,{Col05})
  print $Emplid            ( 0,{Col20})    bold 
  print $Name              (  ,{Col35})    bold
  print $TemplRcd          (  ,90)
  print #emplRcd           (  ,99)   edit 99 bold

  Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont 
  print ' '                (+1)
     
  graphic (+1, 1, 125) box 2  
  print '--------'         (  ,{Col55})
  print $TEarnings         (  ,{Col64})
  print '--------'         (  ,{Col75})
  print '--------'         (  ,{Col85})
  print $TDeductions       (  ,{Col94})
  print '--------'         (  ,{Col105})
  print $TAccumulators     (  ,{Col114})
  print $TElement          (+1,{Col05})
  print $TDescription      (  ,{Col26})
  print $TUnit             (  ,{Col55})
  print $TAmount           (  ,74)
  print $TUnit             (  ,{Col85})
  print $TAmount           (  ,104)
  print $TAmount           (  ,{Col117})
  
  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont 

End-heading

!**************************************
Begin-Procedure Get-Company-Data-Bra
#debug show '** Get-Company-Data-Bra **'
#debug show '$Company ' $Company
#debug show '$Qrydate ' $Qrydate
!**************************************
Begin-Select
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4

  Let $CompanyNm   = Rtrim(&A.DESCR, ' ')

FROM PS_COMPANY_TBL A
WHERE A.COMPANY = $Company
AND A.EFF_STATUS = 'A'
AND A.EFFDT = (SELECT MAX(A2.EFFDT)
               FROM PS_COMPANY_TBL A2
               WHERE A2.COMPANY = A.COMPANY
               AND A2.EFF_STATUS = 'A'
               AND A2.EFFDT <= $Qrydate)
End-Select
End-Procedure Get-Company-Data-Bra

!**************************************
Begin-Procedure Get-Estabid-Rel-Lang
#debug show '** Get-Estabid-Rel-Lang **'
#debug show '$Estabid ' $Estabid
#debug show '$QryDate ' $QryDate
#debug show '$curr_language_cd ' $curr_language_cd
!**************************************
Begin-Select
E.DESCR
E.ADDRESS1
E.ADDRESS2
E.ADDRESS4
E.CITY
E.STATE
E.POSTAL
E.NUM1

  Do Select-Estab-Id
  Let $Num1          = Rtrim(&E.NUM1, ' ')
  Let $CompanyAdd1   = Rtrim(&E.ADDRESS1, ' ')
  Let $CompanyPostal = Rtrim(&E.POSTAL, ' ')
  Let $CompanyState  = Rtrim(&E.STATE, ' ')
  Let $CompanyAdd2   = Rtrim(&E.ADDRESS2, ' ')
  Let $CompanyAdd4   = Rtrim(&E.ADDRESS4, ' ')
  Let $CompanyCity   = Rtrim(&E.CITY, ' ')
  Let $EstAddress1   = $CompanyAdd1 || ' ' || $Num1 
  Let $EstAddress2   = $CompanyAdd2 || ', ' || $CompanyAdd4 
  Let $EstAddress2   = Rtrim($EstAddress2, ', ')
  Let $EstAddress2   = Ltrim($EstAddress2, ', ')
  Let $EstAddress2   = $EstAddress2 || ', ' || $CompanyState 
  Let $EstAddress2   = Rtrim($EstAddress2, ', ')
  Let $EstAddress2   = $EstAddress2 || ', ' || $CompanyCity || ' ' || $CompanyPostal
  
  Let $EstabidDescr  = Rtrim(&E.DESCR, ' ')
     
FROM PS_ESTAB_TBL E
WHERE E.ESTABID = $Estabid
AND E.EFF_STATUS = 'A'
AND E.EFFDT = (SELECT MAX(E2.EFFDT)
               FROM PS_ESTAB_TBL E2
               WHERE E2.ESTABID = E.ESTABID
               AND E2.EFF_STATUS = 'A'
               AND E2.EFFDT <= $QryDate)
End-Select

Begin-Select
EE.DESCR     

  Let $EstabidDescr = &EE.DESCR

FROM PS_ESTAB_TBL_LANG EE
WHERE EE.ESTABID = $Estabid
AND   EE.LANGUAGE_CD = $curr_language_cd
AND   EE.EFFDT = (SELECT MAX(EE2.EFFDT)
                  FROM PS_ESTAB_TBL_LANG EE2
                  WHERE EE2.ESTABID = EE.ESTABID
                  AND EE2.LANGUAGE_CD = EE.LANGUAGE_CD
                  AND EE2.EFFDT <= $QryDate)
End-Select
End-Procedure Get-Estabid-Rel-Lang

!**************************************
Begin-Procedure Select-Estab-Id
#debug show '** Select-Estab-Id **'
#debug show '$EstabId ' $EstabId
#debug show '$QryDate ' $QryDate
!**************************************
Let $CNPJ = ''

Begin-Select
A.ESTAB_ID_TYPE_BRA
A.ESTAB_ID_BRA

  Let $EstabIdType = rtrim(&A.ESTAB_ID_TYPE_BRA, ' ')
 
  Evaluate $EstabIdType
  when = 'CNPJ'
       Let $CNPJ = Rtrim(&A.ESTAB_ID_BRA, ' ' )
  when = 'CNAE'
       Let #CNAE = &A.ESTAB_ID_BRA  
       Let $CNAE = Edit(#CNAE, '0000000')
  End-Evaluate
  
FROM  PS_ESTAB_ID_BRA A
WHERE A.ESTABID = $EstabId
AND   A.COUNTRY = 'BRA'
AND   A.ESTAB_ID_TYPE_BRA IN ('CNPJ','CNAE')
AND   A.EFFDT   = (SELECT MAX(A2.EFFDT)
                   FROM PS_ESTAB_ID_BRA A2
                   WHERE A2.ESTABID = A.ESTABID
                   AND A2.COUNTY_CD_BRA = A.COUNTY_CD_BRA
                   AND A2.COUNTRY = 'BRA'
                   AND A2.EFFDT <= $QryDate)
End-Select
End-Procedure Select-Estab-Id

!**************************************
Begin-Procedure Process-Main
#debug show '** Process-Main **'
!**************************************
  
  Do Process-Employees
  
  if #Reglei = 0
     show  '>>> ' $NoDataText
  End-if
End-Procedure Process-Main

!**************************************
Begin-Procedure Process-Employees
#debug show '** Process-Employees **'
#debug show '   EstabId_Select_Clause1: ' $EstabId_Select_Clause1
#debug show '   EstabId_Select_Clause2: ' $EstabId_Select_Clause2
#debug show '   EE_Select_Clause1:      ' $EE_Select_Clause1
#debug show '   EE_Select_Clause2:      ' $EE_Select_Clause2
#debug show '   Cond Date:              ' $DateClause
#debug show '   $QryDate:               ' $QryDate
!**************************************
Begin-Select
J.COMPANY              
J.ESTABID               
J.DEPTID
J.EMPLID
J.EMPL_RCD
J.EMPL_STATUS
J.SETID_LOCATION
J.SETID_DEPT
J.LOCATION
J.DAILY_RT
NM.NAME_DISPLAY
J.GP_PAYGROUP

  Let $Company         = Rtrim(&J.COMPANY, ' ')
  Let $Paygroup        = &J.GP_PAYGROUP
  Let $Estabid         = &J.ESTABID
  Let $Emplid          = &J.EMPLID
  Let #EmplRcd         = &J.EMPL_RCD
  Let $Deptid          = &J.DEPTID
  Let $Empl_Status     = &J.EMPL_STATUS
  Let $Setid_Location  = &J.SETID_LOCATION
  Let $Setid_Dept      = &J.SETID_DEPT
  Let $Location        = &J.LOCATION
  Let $Name            = &NM.NAME_DISPLAY
  Let #Daily_Rt        = &J.DAILY_RT
    
  clear-array name = arr_erns

  Do Get-Company-Data-Bra 
  Do Get-Estabid-Rel-Lang
  Do Process-Detail
  
  if #total > 0
     Do Get-date-emplid
     Do Print-Format
  End-if
   
  Add 1 TO #reglei

FROM PS_JOB        J,
     PS_NAMES      NM
!     ,PS_FAST_SQR_SEC_VW SCRTY
WHERE NM.EMPLID    = J.EMPLID
AND J.EFFDT        = (SELECT MAX(JJ.EFFDT) 
                      FROM PS_JOB JJ
                      WHERE JJ.EMPLID   = J.EMPLID
                      AND   JJ.EMPL_RCD = J.EMPL_RCD
                      AND   JJ.ESTABID  = J.ESTABID
                      AND   JJ.EFFDT <= $QryDate)
AND J.EFFSEQ       = (SELECT MAX(JJJ.EFFSEQ) 
                      FROM PS_JOB JJJ
                      WHERE JJJ.EMPLID   = J.EMPLID
                      AND   JJJ.EMPL_RCD = J.EMPL_RCD
                      AND   JJJ.ESTABID  = J.ESTABID
                      AND   JJJ.EFFDT    = J.EFFDT) 
AND J.ESTABID      = ( SELECT DISTINCT RS.ESTABID FROM PS_GP_SEG_GUIDE_WA RS, PS_GP_PYE_PRC_STAT PR
                       WHERE RS.EMPLID = PR.EMPLID
                       AND   RS.EMPL_RCD = PR.EMPL_RCD
                       AND   RS.GP_PAYGROUP = PR.GP_PAYGROUP
                       AND   RS.CAL_RUN_ID = PR.CAL_RUN_ID
                       AND   RS.CAL_ID = PR.CAL_ID
                       AND   RS.ORIG_CAL_RUN_ID = PR.ORIG_CAL_RUN_ID
                       AND   PR.PRD_END_DT <= $EndDt
                       AND   PR.PRD_BGN_DT  >= $BeginDt  
                       AND   RS.EMPLID = J.EMPLID
                       AND   RS.GP_PAYGROUP = J.GP_PAYGROUP)         
AND NM.NAME_TYPE   = 'PRI'
AND NM.EFFDT       = (SELECT MAX(N.EFFDT) 
                      FROM PS_NAMES N
                      WHERE N.EMPLID = NM.EMPLID
                      AND   N.NAME_TYPE = NM.NAME_TYPE
                      AND   N.EFFDT <= J.EFFDT)
!AND J.EMPLID = SCRTY.EMPLID 
![$SecurityClause]   
[$SecurityClausewithERN]
[$EstabId_Select_Clause1]
[$EstabId_Select_Clause2]
[$EE_Select_Clause1]
[$EE_Select_Clause2]
[$DateClause]
ORDER BY J.COMPANY, J.ESTABID, J.DEPTID, J.EMPLID 
End-Select
End-Procedure Process-Employees

!**************************************
Begin-Procedure Process-Detail
#debug show '** Process-Detail **'
#debug show '$Emplid ' $Emplid
#debug show '#emplRcd ' #emplRcd
#debug show '$DatesClause ' $DatesClause
!**************************************
  Let #count   = 1
  Let #Total   = 0
  Let #store   = 1  
  
Begin-Select
P.PRD_END_DT            
P.PRD_BGN_DT
P.CAL_RUN_ID
P.CAL_ID
P.PYMT_DT
P.CALC_TYPE
S.EMPLID
S.EMPL_RCD
S.RSLT_SEG_NUM
P.RSLT_VER_NUM
P.GP_PAYGROUP

  Do convert-to-dtu-date(&P.PRD_BGN_DT, $PeriodBeginDt)
  Do convert-to-dtu-date(&P.PRD_END_DT, $PeriodEndDt)
  Do convert-to-dtu-date(&P.PYMT_DT,    $PaymentDt)
  Do convert-from-dtu-date($PeriodBeginDt, $PeriodBeginDt)
  Do convert-from-dtu-date($PeriodEndDt, $PeriodEndDt)
  Do convert-from-dtu-date($PaymentDt,    $PaymentDt)

  Let $CalRunID   = Rtrim(&P.CAL_RUN_ID, ' ')
  Let $CalID      = Rtrim(&P.CAL_ID, ' ')
  Let $Paygroup   = Rtrim(&P.GP_PAYGROUP, ' ')
  Let #RsltSegNum = &S.RSLT_SEG_NUM
  
  do Format-DateTime(&P.PRD_END_DT, $EndDt_YMD, {DEFYMD}, '', '')
    
  Let $Year  = Substr($EndDt_YMD,1,4)
  Let $Month = Substr($EndDt_YMD,6,2)
    
  if $EARN_IE = '10'
     DO Get-Erns-Include
  else
     DO Get-Erns-Exclude
  End-if
  
  if $DED_IE  = '10'
    DO Get-Ded-Include
  else
    DO Get-Ded-Exclude
  End-if
  
  Let #ac_pinnm = #earn_tot
  DO Get-Accum
  Let #ac_pinnm = #ded_tot
  DO Get-Accum
  Let #ac_pinnm = #net_pay
  DO Get-Accum
  
  DO Get-Accum-Base
  
FROM PS_GP_PYE_PRC_STAT     P,
     PS_GP_PYE_SEG_STAT     S
WHERE P.EMPLID          = $Emplid  
AND   P.EMPL_RCD        = #emplRcd
AND   P.GP_PAYGROUP     = $Paygroup
AND   S.EMPLID          = P.EMPLID
AND   S.CAL_RUN_ID      = P.CAL_RUN_ID
AND   S.EMPL_RCD        = P.EMPL_RCD
AND   S.CAL_ID          = P.CAL_ID
AND   S.ORIG_CAL_RUN_ID = P.ORIG_CAL_RUN_ID
AND   P.RSLT_VER_NUM    = (SELECT MAX(PP.RSLT_VER_NUM) 
                           FROM PS_GP_PYE_PRC_STAT PP
                           WHERE PP.EMPLID      = P.EMPLID
                           AND   PP.CAL_RUN_ID  = P.CAL_RUN_ID
                           AND   PP.EMPL_RCD    = P.EMPL_RCD
                           AND   PP.GP_PAYGROUP = P.GP_PAYGROUP
                           AND   PP.CAL_ID      = P.CAL_ID)
AND   S.RSLT_SEG_NUM    = (SELECT MAX(SS.RSLT_SEG_NUM) 
                           FROM PS_GP_PYE_SEG_STAT SS
                           WHERE SS.EMPLID      = S.EMPLID
                           AND   SS.CAL_RUN_ID  = S.CAL_RUN_ID
                           AND   SS.EMPL_RCD    = S.EMPL_RCD
                           AND   SS.GP_PAYGROUP = S.GP_PAYGROUP
                           AND   SS.CAL_ID      = S.CAL_ID
                           AND   SS.ORIG_CAL_RUN_ID = S.ORIG_CAL_RUN_ID)
AND S.CALC_ACTION       = 'C'
AND S.PYE_CALC_STAT IN ('50', '70')
AND P.RSLT_REV_NUM      = 1
AND P.PYE_PRC_IND       NOT IN ('C', 'S')
AND P.SEL_STAT          = 'A'
AND P.SEL_ACTION        = 'C'
AND P.CALC_TYPE         = 'P'
[$DatesClause]
ORDER BY P.PRD_BGN_DT, P.PRD_END_DT
End-Select
End-Procedure Process-Detail

!**************************************
Begin-Procedure Earns-Array
#debug show '** Earns-Array **'
!**************************************
  
   if  $Year > $Year_er
       Let #counte    = #Store   
   else
       if $Month > $Month_er 
          Let #counte   = #Store
       End-if
   End-if
   
   Let #Initial    = #counte

   if #amount_val <> 0

        while #counte <= #Total
          get $Year_er $Month_er #pin_er #amount_er #unit_er -
          from arr_erns(#counte) e_year e_month e_code e_amount e_unit
      
          if $Year = $Year_er and
             $Month = $Month_er and
             #pin_num = #pin_er
             
             ARRAY-ADD #amount_val #unit_val to arr_erns(#counte) e_amount e_unit
             Let #counte = #total
             Let $find = 'Y'
          End-if
          Add 1 to #counte
          
        End-while
     
       if $find = 'N'
          Add 1 TO #total
          put $Year $month 'E' #pin_num #unit_val #amount_val 
          into arr_erns(#total) e_year e_month e_type e_code e_unit e_amount  
          Let $Year_er  = $Year     
          Let $Month_er = $Month
       End-if
     End-if
     
End-Procedure Earns-Array

!**************************************
Begin-Procedure Deductions-Array
#debug show '** Deductions-Array **'
!**************************************
  
     if  $Year > $Year_er
         Let #counte    = #Store   
     else
         if $Month > $Month_er 
            Let #counte   = #Store
         End-if
     End-if
     
     Let #Initial    = #counte
  
     if #amount_val <> 0
          while #counte <= #Total
            get $Year_er $Month_er #pin_er #amount_er #unit_er -
            from arr_erns(#counte) e_year e_month e_code e_amount e_unit
   
            if $Year = $Year_er and
               $Month = $Month_er and
               #pin_num = #pin_er
 
               ARRAY-ADD #amount_val #unit_val to arr_erns(#counte) e_amount e_unit
               Let #counte = #total
               Let $find = 'Y'
            End-if
            Add 1 to #counte
            
          End-while
       
         if $find = 'N'
            Add 1 TO #total
            put $Year $month 'D' #pin_num #unit_val #amount_val 
            into arr_erns(#total) e_year e_month e_type e_code e_unit e_amount  
            Let $Year_er  = $Year     
            Let $Month_er = $Month
         End-if
       End-if

       Let #store = #total
       Let #counte = #initial      
     
End-Procedure Deductions-Array

!**************************************
Begin-Procedure Get-Erns-Include
#debug show '** Get-Erns-Include **'
#debug show ' CalId: '  $CalID
#debug show ' Rslt Seg:   '  #RsltSegNum
#debug show ' $FormatID ' $FormatID
#debug show ' $EffdtFormat ' $EffdtFormat
#debug show ' $Emplid ' $Emplid
#debug show ' #emplRcd ' #emplRcd
#debug show ' $CalRunID ' $CalRunID
#debug show ' $CalID ' $CalID
!*************************************
Begin-Select
AA.RSLT_SEG_NUM
AA.PIN_NUM
AA.CALC_RSLT_VAL
AA.UNIT_RSLT_VAL
AA.CALC_ADJ_VAL
AA.UNIT_ADJ_VAL
AA.PIN_NM
AA.SLICE_END_DT
AA.SLICE_BGN_DT

  Let #pin_num    = &AA.PIN_NUM    
  Let #amount_val = &AA.CALC_RSLT_VAL + &AA.CALC_ADJ_VAL
  Let #unit_val   = &AA.UNIT_RSLT_VAL + &AA.UNIT_ADJ_VAL 
  Let $find       = 'N'
  
  Do Earns-Array
      
  Let #store = #total
  Let #counte = #initial

FROM PS_GP_RSLT_ED_VW AA, 
     PS_GPBR_PAYSL_F_ER BB
WHERE BB.GPBR_FORMAT_ID = $FormatID
AND   BB.EFFDT          = $EffdtFormat
AND   BB.EFF_STATUS     = 'A'
AND   BB.PIN_ERN_NUM    = AA.PIN_NUM
AND   AA.PIN_TYPE       = 'ER'
AND   AA.EMPLID         = $Emplid
AND   AA.EMPL_RCD       = #emplRcd
AND   AA.CAL_RUN_ID     = $CalRunID
AND   AA.CAL_ID         = $CalID
AND   AA.RSLT_SEG_NUM   = #RsltSegNum
order by AA.PIN_NUM
End-Select
  Let $Year_er  = ''    
  Let $Month_er = ''
End-Procedure Get-Erns-Include

!**************************************
Begin-Procedure Get-Erns-Exclude
#debug show '** Get-Erns-Exclude **'
#debug show '$FormatId ' $FormatId
#debug show '$EffdtFormat ' $EffdtFormat
#debug show '$Emplid ' $Emplid
#debug show '#EmplRcd ' #EmplRcd
#debug show '$CalRunID ' $CalRunID
#debug show '$CalID ' $CalID
#debug show '#RsltSegNum ' #RsltSegNum
!**************************************
Let #cont_e = 0
Begin-Select
AAA.RSLT_SEG_NUM        &AAA.RSLT_SEG_NUM
AAA.PIN_NUM             &AAA.PIN_NUM
AAA.CALC_RSLT_VAL       &AAA.CALC_RSLT_VAL
AAA.UNIT_RSLT_VAL       &AAA.UNIT_RSLT_VAL
AAA.CALC_ADJ_VAL        &AAA.CALC_ADJ_VAL
AAA.UNIT_ADJ_VAL        &AAA.UNIT_ADJ_VAL
AAA.PIN_NM

  Let #pin_num    = &AAA.PIN_NUM    
  Let #amount_val = &AAA.CALC_RSLT_VAL + &AAA.CALC_ADJ_VAL
  Let #unit_val   = &AAA.UNIT_RSLT_VAL + &AAA.UNIT_ADJ_VAL
  Let $find       = 'N'
 
  Do Earns-Array      
  
  Let #store = #total
  Let #counte = #initial
      
FROM PS_GP_RSLT_ED_VW AAA
WHERE AAA.PIN_TYPE = 'ER'
AND NOT EXISTS  (SELECT 'X' FROM 
                 PS_GPBR_PAYSL_F_ER A
                 WHERE A.GPBR_FORMAT_ID = $FormatId
                 AND   A.EFFDT          = $EffdtFormat
                 AND   A.EFF_STATUS     = 'A'
                 AND   A.PIN_ERN_NUM    = AAA.PIN_NUM)                          
AND   AAA.EMPLID       = $Emplid
AND   AAA.EMPL_RCD     = #EmplRcd
AND   AAA.CAL_RUN_ID   = $CalRunID
AND   AAA.CAL_ID       = $CalID
AND   AAA.RSLT_SEG_NUM = #RsltSegNum
ORDER BY AAA.PIN_NM
End-Select

  Let $Year_er  = ''    
  Let $Month_er = ''
End-Procedure Get-Erns-Exclude

!**************************************
Begin-Procedure Get-Ded-Include
#debug show '** Get-Ded-Include **'
#debug show ' CalId: '  $CalID
#debug show ' Seg:   '  #RsltSegNum
#debug show ' $FormatId ' $FormatId
#debug show ' $EffdtFormat ' $EffdtFormat
#debug show ' $Emplid ' $Emplid
#debug show ' #emplRcd ' #emplRcd
#debug show ' $CalRunID ' $CalRunID
!**************************************
Begin-Select
CC.RSLT_SEG_NUM
CC.PIN_NUM
CC.CALC_RSLT_VAL
CC.UNIT_RSLT_VAL
CC.CALC_ADJ_VAL
CC.UNIT_ADJ_VAL
CC.PIN_NM
CC.SLICE_END_DT
CC.SLICE_BGN_DT

  Let #pin_num    = &CC.PIN_NUM    
  Let #amount_val = &CC.CALC_RSLT_VAL + &CC.CALC_ADJ_VAL
  Let #unit_val   = &CC.UNIT_RSLT_VAL + &CC.UNIT_ADJ_VAL
  Let $find       = 'N'

  Do Deductions-Array
            
FROM PS_GP_RSLT_ED_VW CC
   , PS_GPBR_PAYSL_F_DE DD
WHERE DD.GPBR_FORMAT_ID = $FormatId
AND   DD.EFFDT          = $EffdtFormat
AND   DD.EFF_STATUS     = 'A'
AND   DD.PIN_DED_NUM    = CC.PIN_NUM
AND   CC.PIN_TYPE       = 'DD'
AND   CC.EMPLID         = $Emplid
AND   CC.EMPL_RCD       = #emplRcd
AND   CC.CAL_RUN_ID     = $CalRunID
AND   CC.CAL_ID         = $CalID
AND   CC.RSLT_SEG_NUM   = #RsltSegNum
ORDER BY CC.PIN_NUM  
End-Select
  Let $Year_er  = ''    
  Let $Month_er = ''
End-Procedure Get-Ded-Include

!**************************************
Begin-Procedure Get-Ded-Exclude
#debug show '** Get-Ded-Exclude **'
#debug show '$FormatId ' $FormatId
#debug show '$EffdtFormat ' $EffdtFormat
#debug show '$Emplid ' $Emplid
#debug show '#EmplRcd ' #EmplRcd
#debug show '$CalRunID ' $CalRunID
#debug show '$CalID ' $CalID
#debug show '#RsltSegNum ' #RsltSegNum
!**************************************
Begin-Select
CCC.RSLT_SEG_NUM        &CCC.RSLT_SEG_NUM
CCC.PIN_NUM             &CCC.PIN_NUM
CCC.CALC_RSLT_VAL       &CCC.CALC_RSLT_VAL
CCC.UNIT_RSLT_VAL       &CCC.UNIT_RSLT_VAL
CCC.CALC_ADJ_VAL        &CCC.CALC_ADJ_VAL
CCC.UNIT_ADJ_VAL        &CCC.UNIT_ADJ_VAL
CCC.PIN_NM

  Let #pin_num    = &CCC.PIN_NUM    
  Let #amount_val = &CCC.CALC_RSLT_VAL + &CCC.CALC_ADJ_VAL 
  Let #unit_val   = &CCC.UNIT_RSLT_VAL + &CCC.UNIT_ADJ_VAL  
  Let $find       = 'N'

  Do Deductions-Array  
  
FROM PS_GP_RSLT_ED_VW CCC
WHERE CCC.PIN_TYPE = 'DD'
AND NOT EXISTS  (SELECT 'X' FROM 
                 PS_GPBR_PAYSL_F_DE A
                 WHERE A.GPBR_FORMAT_ID = $FormatId
                 AND   A.EFFDT          = $EffdtFormat
                 AND   A.EFF_STATUS     = 'A'
                 AND   A.PIN_DED_NUM    = CCC.PIN_NUM)
AND   CCC.EMPLID      = $Emplid
AND   CCC.EMPL_RCD    = #EmplRcd
AND   CCC.CAL_RUN_ID  = $CalRunID
AND   CCC.CAL_ID      = $CalID
AND   CCC.RSLT_SEG_NUM  = #RsltSegNum
order by CCC.PIN_NM
End-Select

  Let $Year_er  = ''    
  Let $Month_er = ''
End-Procedure Get-Ded-Exclude

!**************************************
Begin-Procedure Get-Accum-Base
#debug show '** Get-Accum-Base **'
#debug show '   $FormatID   : ' $FormatID
#debug show '   $EffdtFormat: ' $EffdtFormat
#debug show '   $Emplid     : ' $Emplid
#debug show '   $CalRunID   : ' $CalRunID
#debug show '   $CalID:       ' $CalID
#debug show '   #RsltSegNum:  ' #RsltSegNum
!**************************************
Begin-Select
F.SEQNUM                &F.SEQNUM
AC.PIN_NUM              &AC.PIN_NUM
AC.CALC_RSLT_VAL        &AC.CALC_RSLT_VAL

  Let #pin_num    = &AC.PIN_NUM
  Let #amount_val = &AC.CALC_RSLT_VAL
  Let #unit_val   = 0
  Let $find       = 'N'
  
  if  $Year > $Year_er
      Let #counte    = #Store   
  else
      if $Month > $Month_er 
         Let #counte   = #Store
      End-if
  End-if
  
  Do Accum-Array

FROM PS_GP_RSLT_ACUM_VW AC, PS_GPBR_PAYSL_F_AC F
WHERE F.GPBR_FORMAT_ID = $FormatID
AND   F.EFFDT          = $EffdtFormat
AND   F.EFF_STATUS     = 'A'
AND   F.PIN_ACCUM_NUM    = AC.PIN_NUM
AND   AC.EMPLID         = $Emplid
AND   AC.EMPL_RCD       = #EmplRcd
AND   AC.CAL_RUN_ID     = $CalRunID
AND   AC.CAL_ID         = $CalID
AND   AC.RSLT_SEG_NUM   = #RsltSegNum
order by F.SEQNUM
End-Select
  Let $Year_er  = ''    
  Let $Month_er = ''
End-Procedure Get-Accum-Base

!**************************************
Begin-Procedure Accum-Array
!**************************************

  Let #Initial    = #counte

  if #amount_val <> 0
       while #counte <= #Total
         get $Year_er $Month_er #pin_er #amount_er #unit_er -
         from arr_erns(#counte) e_year e_month e_code e_amount e_unit

         if $Year = $Year_er and
            $Month = $Month_er and
            #pin_num = #pin_er

            ARRAY-ADD #amount_val #unit_val to arr_erns(#counte) e_amount e_unit
            Let #counte = #total
            Let $find = 'Y'
         End-if
         Add 1 to #counte
         
       End-while
    
      if $find = 'N'
         Add 1 TO #total
         put $Year $month 'B' #pin_num #unit_val #amount_val 
         into arr_erns(#total) e_year e_month e_type e_code e_unit e_amount  
         Let $Year_er  = $Year     
         Let $Month_er = $Month
      End-if
    End-if
    
    Let #store = #total
    Let #counte = #initial
     
End-Procedure Accum-Array

!**************************************
Begin-Procedure  Get-Pin-Descr
#debug show '** Get-Pin-Descr **'
#debug show '#pin_nmp ' #pin_nmp
!**************************************
Let $pin_descr = ''
Let $pin_nm    = ''
Let $pin_code  = ''

Begin-Select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  MOVE &PD.PIN_NM TO $pin_nm
  MOVE &PD.DESCR  TO $pin_descr
  MOVE &PD.PIN_CODE TO $pin_code
  Let $pin_code = RTRIM($pin_code,' ')

  DO Get-Pin-Descr-Lang
  
from PS_GP_PIN PD
WHERE PD.PIN_NUM = #pin_nmp
End-Select
End-Procedure   Get-Pin-Descr

!***************************************
Begin-Procedure  Get-Pin-Descr-Lang
#debug show '** Get-Pin-Descr-Lang **'
#debug show '#pin_nmp ' #pin_nmp
#debug show '$Curr_language_Cd ' $Curr_language_Cd
!***************************************
Begin-Select
PDL.DESCR
  MOVE &PDL.DESCR TO $pin_descr
from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #pin_nmp
AND   PDL.LANGUAGE_CD = $Curr_language_Cd
End-Select
End-Procedure   Get-Pin-Descr-Lang

!************************************** 
Begin-Procedure Select-Parameters
#debug show '** Select-Parameters **'
!**************************************
Let $Quote                  = ''''
Let $EE_Select_Clause1      = ''
Let $EE_Select_Clause2      = '' 
Let $EstabId_Select_Clause1 = ''
Let $EstabId_Select_Clause2 = ''
Let $DatesClause            = ''
Let $BeginDt                = ''
Let $EndDt                  = ''
Let $QryDate                = ''

Begin-Select
RC.OPRID                    
RC.RUN_CNTL_ID              
RC.GPBR_FORMAT_ID            
RC.GPBR_LIST_OPTION
RC.GB_GROUP_ID      
RC.BEGIN_DT
RC.END_DT

  Let $FormatId   = Rtrim(&RC.GPBR_FORMAT_ID, ' ')
  Let $Population = Rtrim(&RC.GPBR_LIST_OPTION, ' ')
  Let $GroupId    = Rtrim(&RC.GB_GROUP_ID, ' ')
  
  Do convert-to-dtu-date(&RC.BEGIN_DT, $BeginDt)
  Do convert-to-dtu-date(&RC.END_DT,   $EndDt)
  Do convert-from-dtu-date($BeginDt, $BeginDt)
  Do convert-from-dtu-date($EndDt,   $EndDt)
  
  Let $QryDate = Rtrim(&RC.END_DT, ' ')
      
  If $QryDate = ''
    Let $QryDate = $AsOfToday
  End-If
      
  #debug show '$QryDate   :' $QryDate
  
  If $EndDT <> ''
     Let $DatesClause  = ' AND P.PRD_END_DT <= ' || '''' || $EndDt || ''''
     Let $DateClause   = ' AND J.EFFDT  <= ' || '''' || $EndDt || ''''
  End-if
  
  if $BeginDt   <> ''
     Let $DatesClause = $DatesClause || ' AND P.PRD_BGN_DT  >= ' || '''' || $BeginDt || ''''  
  End-if
  
  Do Get-Format
  
  Evaluate $Population
  when = '2'
    Let $EstabId_Select_Clause1 = ' AND J.ESTABID IN (SELECT B.ESTABID FROM PS_GPBR_RC_FIN_RE1 B '
    Let $EstabId_Select_Clause2 = ' WHERE B.OPRID = ' || '''' || $PRCS_OPRID || '''' 
    Let $EstabId_Select_Clause2 = $EstabId_Select_Clause2  || ' AND   B.RUN_CNTL_ID  = ' || '''' || $PRCS_RUN_CNTL_ID || '''' || ')'
  when = '3'
    Let $EE_Select_Clause1 = ' AND J.EMPLID IN (SELECT B.EMPLID FROM PS_GPBR_RC_FIN_RE2 B '
    Let $EE_Select_Clause2 = ' WHERE B.OPRID = ' || '''' || $PRCS_OPRID || '''' 
    Let $EE_Select_Clause2 = $EE_Select_Clause2  || ' AND   B.RUN_CNTL_ID  = ' || '''' || $PRCS_RUN_CNTL_ID || '''' || ')'
  when = '4'
    Let $EE_Select_Clause1 = ' AND J.EMPLID IN (SELECT B.EMPLID FROM PS_GPBR_RC_FIN_RE2 B '
    Let $EE_Select_Clause2 = ' WHERE B.OPRID = ' || '''' || $PRCS_OPRID || '''' 
    Let $EE_Select_Clause2 = $EE_Select_Clause2  || ' AND   B.RUN_CNTL_ID  = ' || '''' || $PRCS_RUN_CNTL_ID || '''' || ')'
    do Clear-Employees
    do Load-Employees
  End-evaluate

FROM  PS_GPBR_RC_FIN_REG RC
WHERE RC.OPRID        = $PRCS_OPRID
AND   RC.RUN_CNTL_ID  = $PRCS_RUN_CNTL_ID
End-Select
End-Procedure Select-Parameters

!**************************************
Begin-Procedure Clear-Employees
#debug show '** Clear-Employees **'
!**************************************
Begin-SQL
DELETE 
FROM PS_GPBR_RC_PAYRSL2
WHERE OPRID = $PRCS_OPRID
AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
End-SQL
End-Procedure Clear-Employees

!**************************************
Begin-Procedure CatchSQLException
#debug show '** CatchSQLException **'
!**************************************
    Show $CheckGBuild ' ' $GroupId
End-Procedure CatchSQLException

!**************************************
Begin-Procedure Load-Employees
#debug show '** Load-Employees **'
!**************************************
Begin-SQL on-error = CatchSQLException
INSERT INTO PS_GPBR_RC_FIN_RE2
(OPRID 
,RUN_CNTL_ID 
,EMPLID)
SELECT DISTINCT
 B.OPRID
,B.RUN_CNTL_ID 
,A.EMPLID 
FROM PS_GB_GRP_RES_TBL A 
    ,PS_GPBR_RC_FIN_REG B
WHERE A.GB_GROUP_ID = B.GB_GROUP_ID  
AND B.OPRID =  $PRCS_OPRID
AND B.RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
AND A.VERSIONGBQDM = (SELECT MAX(AA.VERSIONGBQDM) 
                      FROM PS_GB_GRP_RES_TBL AA
                      WHERE AA.GB_GROUP_ID = A.GB_GROUP_ID)
End-SQL
End-Procedure Load-Employees

!**************************************
Begin-Procedure Delete-Employees
#debug show '** Delete-Employees **'
!**************************************
Begin-SQL
DELETE FROM PS_GPBR_RC_FIN_RE2
WHERE OPRID =  $PRCS_OPRID
AND   RUN_CNTL_ID = $PRCS_RUN_CNTL_ID
End-SQL
End-Procedure Delete-Employees

!**************************************
Begin-Procedure Get-Format
#debug show '** Get-Format **'
#debug show '   FormatId: ' $FormatId
#debug show '   EndDt:    ' $EndDt
!**************************************
Let #earn_tot    = 0
Let #ded_tot     = 0
Let #net_pay     = 0
Begin-Select
FO.GPBR_PIN_PSLP1_NUM
FO.GPBR_PIN_PSLP2_NUM
FO.GPBR_PIN_PSLP3_NUM
FO.GPBR_EARN_IE
FO.GPBR_DED_IE
FO.EFFDT

  Let #earn_tot    = &FO.GPBR_PIN_PSLP1_NUM  
  Let #ded_tot     = &FO.GPBR_PIN_PSLP2_NUM  
  Let #net_pay     = &FO.GPBR_PIN_PSLP3_NUM  
  Let $EARN_IE     = Rtrim(&FO.GPBR_EARN_IE, ' ')
  Let $DED_IE      = Rtrim(&FO.GPBR_DED_IE, ' ')  
  
  Do convert-to-dtu-date(&FO.EFFDT, $EffdtFormat)
  Do convert-from-dtu-date($EffdtFormat, $EffdtFormat)
   
  Let #pin_nmp = #EARN_TOT
  do Get-Pin-Descr
  Let $pin_erntot = $pin_descr

  Let #pin_nmp = #DED_TOT
  do Get-Pin-Descr
  Let $pin_dedtot = $pin_descr

  Let #pin_nmp = #NET_PAY
  do Get-Pin-Descr
  Let $pin_netpay = $pin_descr

FROM PS_GPBR_PAYSL_FORM FO
WHERE FO.GPBR_FORMAT_ID = $FormatId
AND   FO.EFF_STATUS = 'A'
AND   FO.EFFDT = (SELECT MAX(FO1.EFFDT) FROM PS_GPBR_PAYSL_FORM FO1
                  WHERE FO1.GPBR_FORMAT_ID  =  FO.GPBR_FORMAT_ID
                  AND   FO1.EFF_STATUS      =  FO.EFF_STATUS)
End-Select
End-Procedure Get-Format

!**************************************
Begin-Procedure Print-Format
#debug show '** Print-Format **'
!**************************************
  Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont 

  Let #count     = 1
  Let $Year_ant  = ''
  Let $Month_ant = ''
  Let $Print_Total = 'N'
  #debug Show 'Print Employee :' $Emplid
  
  While #count <= #Total
    get $Year_e $month_e $type_e #pin_e #amount_e #unit_e -
    from arr_erns(#count) e_year e_month e_type e_code e_amount e_unit

           If $Year_ant <> $Year_e
              If $Year_ant <> ''
                 Let $Print_Total = 'Y'
                 #debug Show '---------- Print Year totals ---------- ['$Emplid ']  [' $Year_ant ']  [' $Year_e ']'
                 !Call procedure to print Annual results
                 Do Print_annual
                 Let $Print_Total = 'N'
              End-if
              print ' '      (+1)              
              graphic        (+1, 1,125)    box 1 1 12
              Print $Year_e  (  ,{Col05})   bold
              Let $Year_ant = $Year_e
          End-if 
          
          #debug Show 'Emplid [' $Emplid ']  [' $Year_e ']  [' $month_e ']  [' $type_e ']  [' #pin_e ']  [' #amount_e ']  [' #unit_e ']'
          
          !Call procedure to create Annual results
          Do Annual_Acum

          if $Month_ant <> $month_e
             Do Evalua-Month  
             Print $DescMonth (+2,{Col05}) bold
             graphic          (  ,{Col05},120) horz-line 1
             Let $Month_ant = $month_e
             Let #CountElement = 1
           End-if
          
          Let #pin_nmp = #pin_e
          do Get-Pin-Descr
          Let $pin_e = $pin_nm
          
          Evaluate $Type_e
          when = 'E'  
              Print $pin_e            (+1,{Col05},18)
              Print $pin_descr        (  ,{Col26},30) 
              Print #unit_e           (  ,55)      edit 'b999.99c'
              !Print #amount_e         (  ,{Col60})      edit '999,999,999.99'
              Print #amount_e         (  ,{Col67})      edit '$999,999,999.99c'
          when = 'D'
              Print $pin_e            (+1,{Col05},18)
              Print $pin_descr        (  ,{Col26},30)  
              Print #unit_e           (  ,85)      edit 'b999.99c'
              !Print #amount_e         (  ,90)      edit '999,999,999.99'
              Print #amount_e         (  ,{Col97})      edit '$999,999,999.99c'
           when = 'A' 
              if #CountElement = 1
                 graphic              (+1 ,50,60) horz-line 
                 Let #CountElement = 0
              End-if
              Print $pin_e            (+1,{Col05},18)
              Print $pin_descr        (,{Col26},30)  
              Print #amount_e         (  ,{Col110})      edit '$999,999,999.99c'
           when = 'B' 
              if #CountElement = 0
                 graphic              (+1,50,60) horz-line 
                 Let #CountElement = 1
              End-if
              Print $pin_e            (+1,{Col05},18)
              Print $pin_descr        (  ,{Col26},30)  
              Print #amount_e         (  ,{Col110})      edit '$999,999,999.99c'
           End-evaluate
     
     add 1 to #count
  End-while
  #debug Show '---------- Print Year totals ---------- ['$Emplid ']  [' $Year_ant ']  [' $Year_e ']'
  !Call procedure to print Annual results
  Do Print_annual
  new-page
  
End-Procedure Print-Format

!**************************************
Begin-Procedure Get-Accum
#debug show '** Get-Accum **'
#debug show '#ac_pinnm  ' #ac_pinnm
#debug show '$Emplid    ' $Emplid
#debug show '#EmplRcd   ' #EmplRcd
#debug show '$CalRunID  ' $CalRunID
#debug show '$CalID     ' $CalID
#debug show '#RsltSegNum' #RsltSegNum
!**************************************
if #ac_pinnm <> 0
Begin-Select
EEE.RSLT_SEG_NUM        &EEE.RSLT_SEG_NUM
EEE.CALC_RSLT_VAL       &EEE.CALC_RSLT_VAL

  Let #pin_num    = #ac_pinnm
  Let #amount_val = &EEE.CALC_RSLT_VAL
  Let #unit_val   = 0
  Let $find       = 'N'
  
  if  $Year > $Year_er
      Let #counte    = #Store   
  else
      if $Month > $Month_er 
         Let #counte   = #Store
      End-if
  End-if
  
  Do Accum-Array
  
FROM PS_GP_RSLT_ACUM_VW EEE
WHERE EEE.PIN_NUM      = #ac_pinnm
AND   EEE.EMPLID       = $Emplid
AND   EEE.EMPL_RCD     = #EmplRcd
AND   EEE.CAL_RUN_ID   = $CalRunID
AND   EEE.CAL_ID       = $CalID
AND   EEE.RSLT_SEG_NUM = #RsltSegNum
End-Select
End-if
End-Procedure Get-Accum

!**************************************
Begin-Procedure Get-Date-emplid
#debug show '** Get-Date-emplid **'
#debug show '$Emplid ' $Emplid
!**************************************
Begin-Select
EM.TERMINATION_DT
EM.SERVICE_DT
  Let $Termination_Dt    = &EM.TERMINATION_DT
  Let $Service_Dt        = &EM.SERVICE_DT
  do Format-DateTime($Service_Dt, $Service_Dt, {DEFDMY}, '', '')
  if $Termination_Dt <> ''
    do Format-DateTime($Termination_Dt, $Termination_Dt, {DEFDMY}, '', '')
  End-if
FROM PS_EMPLOYMENT EM
WHERE EM.EMPLID = $Emplid
End-Select
End-Procedure get-date-emplid

!**************************************
Begin-Procedure Def-Arrays
#debug show '** Def-Arrays **'
!**************************************
CREATE-ARRAY NAME = arr_erns SIZE = 10000
     Field = e_year:char
     Field = e_month:char
     Field = e_type:char
     FIELD = e_code:number
     FIELD = e_amount:number
     FIELD = e_unit:number

CREATE-ARRAY NAME = arr_acum SIZE = 10000
     Field = b_year:char
     Field = b_month:char
     Field = b_type:char
     FIELD = b_code:number
     FIELD = b_amount:number
     FIELD = b_unit:number

CREATE-ARRAY NAME = arr_annual SIZE = 10000
     Field=a_year:char=''
     Field=a_month:char=''
     Field=a_type:char=''
     Field=a_pin:number=0
     Field=a_amount:number=0
     Field=a_unit:number=0
     Field=a_Empty:char='Y'
     
End-Procedure Def-Arrays

!**************************************
Begin-Procedure Annual_Acum
#debug show '** Annual_Acum  **'
!**************************************
!check if Pin_Num exist in array
Let #Counter_a = 0
Let $Found = 'N'
Let #tmp_amount = 0

Get #Pin_a #tmp_amount $Empty from arr_annual(#Counter_a) a_pin a_amount a_Empty

While 1
    Get #Pin_a #tmp_amount $Empty from arr_annual(#Counter_a) a_pin a_amount a_Empty
    
    If #Pin_a = #pin_e
        !exist in array add the ammount
        Let #tmp_amount = #tmp_amount + #amount_e
        Put #tmp_amount into arr_annual(#Counter_a) a_amount
        Let $Found = 'Y'
    End-If
    If $Empty = 'Y'
        Break
    End-If    
    Let #Counter_a = #Counter_a + 1
End-While

If $Found = 'N'
    !Not found add values to bottom of array
    Put $type_e #pin_e #amount_e 'N' into arr_annual(#Counter_a) a_type a_pin a_amount a_Empty
End-If
End-Procedure Annual_Acum


!**************************************
Begin-Procedure Print_annual
#debug show '** Print_annual  **'
!**************************************
Print $AnnualLabel (+4,{Col05}) bold
graphic            (  ,{Col05},120) horz-line 1



!first 'E' and 'D' type
Let #Counter_a = 0
Let $Empty = 'N'
Let #CountA = 1
!Loop forever until break 
While 1 
    Get $w #x #y $Empty from arr_annual(#Counter_a) a_type a_pin a_amount a_Empty
    If $Empty = 'Y' ! If start empty rows in array exit of while loop
            Break
    End-If
    !Print Results
    #debug Show '[' $w ']  [' #x ']  [' #y ']  [' $Empty ']  [' #Counter_a ']'

    Let #pin_nmp = #x
    Do Get-Pin-Descr
    Let $pin_desc = $pin_nm
    
    Evaluate $w
    When = 'E'
        Print $pin_desc         (+1,{Col05},18)
        Print $pin_descr        (  ,{Col26},30) 
        Print #y                (  ,{Col67})      edit '$999,999,999.99c'
        break
    When = 'D'
        Print $pin_desc         (+1,{Col05},18)
        Print $pin_descr        (  ,{Col26},30) 
        Print #y                (  ,{Col97})      edit '$999,999,999.99c'
        break        
    When = 'A'
        !Do Nothing
        break                
    When = 'B'
        !Do Nothing
        Break
    End-Evaluate    
    Let #Counter_a = #Counter_a + 1 !Go to next row
End-While


!Now 'A' and 'B' type
Let #Counter_a = 0
Let $Empty = 'N'
Let #CountA = 1
!Loop forever until break first 'E' and 'D' type
While 1 
    Get $w #x #y $Empty from arr_annual(#Counter_a) a_type a_pin a_amount a_Empty
    If $Empty = 'Y' ! If start empty rows in array exit of while loop
            Break
    End-If
    !Print Results
    #debug Show '[' $w ']  [' #x ']  [' #y ']  [' $Empty ']  [' #Counter_a ']'

    Let #pin_nmp = #x
    Do Get-Pin-Descr
    Let $pin_desc = $pin_nm
    
    Evaluate $w
    When = 'E'
        !Do Nothing
    break
    When = 'D'
        !Do Nothing
        break        
    When = 'A'
        If #CountA = 1
            graphic              (+1 ,50,60) horz-line
            Let #CountA = 0
        End-If
        Print $pin_desc         (+1,{Col05},18)
        Print $pin_descr        (  ,{Col26},30) 
        Print #y                (  ,{Col110})     edit '$999,999,999.99c'
        break                
    When = 'B'
        If #CountA = 0
            graphic              (+1,50,60) horz-line 
            Let #CountA = 1
        End-If
        Print $pin_desc         (+1,{Col05},18)
        Print $pin_descr        (  ,{Col26},30) 
        Print #y                (  ,{Col110})     edit '$999,999,999.99c'
        Break
    End-Evaluate    
    Let #Counter_a = #Counter_a + 1 !Go to next row
End-While
CLEAR-ARRAY NAME=arr_annual
End-Procedure Print_annual

!**************************************
Begin-Procedure Evalua-Month
#debug show '** Evalua-Month  **'
!**************************************

  Evaluate $Month_e
  when = '01'
      Let $DescMonth = $TMonth01
  when = '02'
      Let $DescMonth = $TMonth02
  when = '03'
      Let $DescMonth = $TMonth03
  when = '04' 
      Let $DescMonth = $TMonth04
  when = '05'
      Let $DescMonth = $TMonth05
  when = '06'
      Let $DescMonth = $TMonth06
  when = '07'
      Let $DescMonth = $TMonth07
  when = '08'
      Let $DescMonth = $TMonth08
  when = '09' 
      Let $DescMonth = $TMonth09
  when = '10'
      Let $DescMonth = $TMonth10
  when = '11' 
      Let $DescMonth = $TMonth11
  when = '12'
      Let $DescMonth = $TMonth12
  End-Evaluate

End-Procedure Evalua-Month

!***************************************
Begin-Procedure Report-Translation
#debug show '** Report-Translation **'
!***************************************
  do Init_Report_Translation ($ReportID, $curr_language_cd)
  do Append_Report_Translation ('GPBRFR01')  
  
  do Get_Field_Information ('GPBRFR01', 'AMOUNT',         $TAmount,        #DW)
  do Get_Field_Information ('GPBRFR01', 'COMPANY',        $TCompany,       #DW)    
  do Get_Field_Information ('GPBRFR01', 'PAGE',           $TPage,          #DW)  
  do Get_Field_Information ('GPBRFR01', 'PEOPLESOFT',     $TPeopleSoft,    #DW)
  do Get_Field_Information ('GPBRFR01', 'DATE',           $TDate,          #DW)
  do Get_Field_Information ('GPBRFR01', 'TIME',           $TTime,          #DW)
  do Get_Field_Information ('GPBRFR01', 'ESTABID',        $TEstabid,       #DW)
  do Get_Field_Information ('GPBRFR01', 'REPORTID',       $TReportID,      #DW)   
  do Get_Field_Information ('GPBRFR01', 'TITLE01',        $TTitle01,       #DW)
  do Get_Field_Information ('GPBRFR01', 'MONTH01',        $TMonth01,       #DW)
  do Get_Field_Information ('GPBRFR01', 'MONTH02',        $TMonth02,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH03',        $TMonth03,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH04',        $TMonth04,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH05',        $TMonth05,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH06',        $TMonth06,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH07',        $TMonth07,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH08',        $TMonth08,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH09',        $TMonth09,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH10',        $TMonth10,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH11',        $TMonth11,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'MONTH12',        $TMonth12,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'ADDRESS',        $TAddress,       #DW)  
  do Get_Field_Information ('GPBRFR01', 'EMPLID',         $TEmplid,        #DW)
  do Get_Field_Information ('GPBRFR01', 'EARNINGS',       $TEarnings,      #DW)
  do Get_Field_Information ('GPBRFR01', 'UNIT',           $TUnit,          #DW)
  do Get_Field_Information ('GPBRFR01', 'DEDUCTIONS',     $TDeductions,    #DW)
  do Get_Field_Information ('GPBRFR01', 'ELEMENT',        $TElement,       #DW)
  do Get_Field_Information ('GPBRFR01', 'TOTAL03',        $AnnualLabel,    #DW)
  do Get_Field_Information ('GPBRFR01', 'NO_DATA',        $NoDataText,     #DW)
  do Get_Field_Information ('GPBRFR01', 'CHK_GBUILD',     $CheckGBuild,    #DW)
  do Get_Field_Information ('GPBRFR01', 'DESCRIPTION',    $TDescription,   #DW)
  do Get_Field_Information ('GPBRFR01', 'ACCUMULATORS',   $TAccumulators,  #DW)
  do Get_Field_Information ('GPBRFR01', 'EMPL_RCD',       $TemplRcd,       #DW)
  
End-Procedure Report-Translation

!***********************************************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'sqrtrans.sqc'
#Include 'useprntr.sqc'  !Indicate which printer to use for reports
#include 'hrsecty.sqc'   !Get SQR Security parameters