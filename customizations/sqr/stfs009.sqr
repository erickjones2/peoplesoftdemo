!-----------------------------------------------------------------------
! Report Name: STFS009.SQR - APB 25 Option Expense Report
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!-----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:52:14                                 
!       $Release:  HR92                                                
!      $Revision:  101                                                 
!
!-----------------------------------------------------------------------
! Program Descr: This report prints the valuation detail created during
!                the grant valuation process.
!-----------------------------------------------------------------------
! Options:       None
! Tables:        ST_STFS009_TAO
!                ST_GRANT
!                ST_GRNT_VST_DTL
!                STOCK_DTL
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup
!-----------------------------------------------------------------------

  #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Main-Process
  do Reset
  do Successful-EOJ

End-Program

!-----------------------------------------------------------------------
! Section: Heading Procedures
! Descr:   This sections contains all procedures for
!          printing the optional heading
!-----------------------------------------------------------------------
Begin-Heading 08

  #Include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,   ,001)
  print $StockId                                           (  , +3,010)
  do Format-DateTime ($RC_FromDate, $Date1, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $Date2, {DEFDATE}, '', '')
  let $FromThruDate = $FromLbl || ': ' || $Date1 || '  ' || $ThruLbl || ': ' || $Date2
  print $FromThruDate                                      (  ,   ,   ) center

  print $GroupIdLbl                                        (+1,001,008)
  print ':'                                                (  ,   ,001)
  print $GroupId                                           (  , +3,010)
  print $AccountDistribXlat                                (  ,   ,   ) center

  print $PriorLbl                                          (+2,123,006) bold
  print $FutureLbl                                         (  ,143,006) bold
  print $CurrentLbl                                        (  ,163,007) bold

  print $GrantNbrLbl                                       (+1,001,012)
  print $CompLbl                                           (  ,040,012)
  print $CancelDtLbl                                       (  ,075,011)
  print $TotalNetLbl                                       (  ,098,009)
  print $AmortizedLbl                                      (  ,119,009)
  print $UnamortizedLbl                                    (  ,138,011)
  print $PeriodLbl                                         (  ,164,006)

  print $GrantDtLbl                                        (+1,001,012)
  print $SharesLbl                                         (  ,025,006)
  print $ExpenseLbl                                        (  ,045,007)
  print $AdjustmentLbl                                     (  ,063,010)
  print $ReasonLbl                                         (  ,075,006)
  print $ExpenseLbl                                        (  ,100,007)
  print $ExpenseLbl                                        (  ,121,007)
  print $ExpenseLbl                                        (  ,142,007)
  print $ExpenseLbl                                        (  ,163,007)

  print '-'                                                (+1,001,177) fill bold

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles, parameters.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STFS009'

  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.
                           
  if $prcs_process_instance = ''

  else
    do Get-SQR-Parms
  end-if

  do Init-Variables

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation('STOCK', $Language_Cd)
  do Append_Report_Translation ('STFS007')
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK',  'STOCK_ID',      $StockIdLbl,    #DW)
  do Get_Field_Information ('STOCK',  'GRANT',         $GrantLbl,      #DW)
  do Get_Field_Information ('STOCK',  'GRANT_NBR',     $GrantNbrLbl,   #DW)
  do Get_Field_Information ('STOCK',  'GRANT_DT',      $GrantDtLbl,    #DW)
  do Get_Field_Information ('STOCK',  'SHARES',        $SharesLbl,     #DW)
  do Get_Field_Information ('STOCK',  'FROM',          $FromLbl,       #DW)
  do Get_Field_Information ('STOCK',  'THRU',          $ThruLbl,       #DW)
  do Get_Field_Information ('STOCK',  'TOTAL',         $TotalLbl,      #DW)
  do Get_Field_Information ('STFS007','EXPENSE',       $ExpenseLbl,    #DW)
  do Get_Field_Information ('STFS007','ADJUSTMENT',    $AdjustmentLbl, #DW)
  do Get_Field_Information ('STFS007','CANCEL_DT',     $CancelDtLbl,   #DW)
  do Get_Field_Information ('STFS007','REASON',        $ReasonLbl,     #DW)
  do Get_Field_Information ('STFS007','TOTAL_NET',     $TotalNetLbl,   #DW)
  do Get_Field_Information ('STFS007','AMORTIZED',     $AmortizedLbl,  #DW)
  do Get_Field_Information ('STFS007','UNAMORTIZED',   $UnamortizedLbl,#DW)
  do Get_Field_Information ('STFS007','CURRENT',       $CurrentLbl,    #DW)
  do Get_Field_Information ('STFS007','PRIOR',         $PriorLbl,      #DW)
  do Get_Field_Information ('STFS007','FUTURE',        $FutureLbl,     #DW)
  do Get_Field_Information ('STFS007','ACCOUNT_DIST',  $AccountDistLbl,#DW)
  do Get_Field_Information ('STFS007','GROUP_ID',      $GroupIdLbl,    #DW)
  do Get_Field_Information ('STFS009','COMPENSATION',  $CompLbl,       #DW)
  do Get_Field_Information ('STFS009','PERIOD',        $PeriodLbl,     #DW)
  do Get_Field_Information ('STFS009','REPORT_TITLE',  $ReportTitle,   #DW)

End-Procedure Report-Translation

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let $StockId            = rtrim($RC_STOCK_ID,' ')
  let $RC_FromDate        = rtrim($RC_FromDate,' ')
  let $RC_ThruDate        = rtrim($RC_ThruDate,' ')
  let $GroupId            = rtrim($RC_ST_GROUP_ID,' ')
  let $AccountDistrib     = rtrim($RC_ST_ACCOUNT_DISTRIB,' ')
  let $SuppressDetails    = rtrim($RC_ST_SUPPR_DTLS,' ')
  let #Count              = 0
  do Convert-To-DTU-Date($RC_FromDate,$FromDate)
  do Convert-To-DTU-Date($RC_ThruDate,$ThruDate)

  move $AccountDistrib to $FieldValue
  move 'ST_ACCOUNT_DISTRIB' to $Fieldname
  do Read-Translate-Table
  let $AccountDistribXlat = rtrim($Xlatlongname,' ')

End-Procedure

!-----------------------------------------------------------------------
! Section: Main-Process
! Descr:   Main process
!-----------------------------------------------------------------------
Begin-Procedure Main-Process

  if $AccountDistrib = 'S'
    do Process-Straight-Line
  else
    do Process-Ratable
  end-if

  do Print-Summary

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Straight-Line
! Descr:   Process-Straight-Line
!-----------------------------------------------------------------------
Begin-Procedure Process-Straight-Line

Begin-Select

A.EMPLID
A.GRANT_NBR
B.GRANT_DT
B.STOCK_PLAN
B.SHARES_GRANTED
B.GRANT_PRICE
B.ST_CANCEL_REASON
B.ST_CANCEL_DT
B.ST_OPTION_TYPE
C.VEST_DT

  let #Days            = 0
  let #CompPerShare    = 0
  let #CompValue       = 0
  let #ExpensePerDay   = 0
  let #Adjustment      = 0
  let #NetExpense      = 0
  let #CurrentDays     = 0
  let #PriorDays       = 0
  let #FutureDays      = 0

  let $EmplID          = rtrim(&a.emplid, ' ')
  let $GrantNbr        = rtrim(&a.grant_nbr, ' ')
  let $GrantDt         = rtrim(&b.grant_dt, ' ')
  let $StockPlan       = rtrim(&b.stock_plan, ' ')
  let #SharesGranted   = &b.shares_granted
  let #GrantPrice      = &b.grant_price
  let $CancelReason    = rtrim(&b.st_cancel_reason, ' ')
  let $CancelDt        = rtrim(&b.st_cancel_dt, ' ')
  let $OptionType      = rtrim(&b.st_option_type, ' ')
  let $VestDt          = rtrim(&c.vest_dt, ' ')
  do Convert-To-DTU-Date($CancelDt,$CancelDt)
  do Convert-To-DTU-Date($GrantDt ,$GrantDt )
  do Convert-To-DTU-Date($VestDt  ,$VestDt  )
  if $CancelDt > $ThruDate
    let $CancelDt      = ''
    let $CancelReason  = ''
  end-if

  do Get-Fmv-Rules
  do Convert-From-DTU-Date ($GrantDt, $Date)
  do Get_FMV_Prices ($FmvMethod,$StockId,$Date,$HolidayRule,$WeekendRule,#GrantFmv)

  if #GrantPrice < #GrantFmv
    let #Count         = #Count + 1
    do dtu-diff-days($GrantDt, $VestDt, #Days)
    let #Days          = #Days + 1
    let #CompPerShare  = #GrantFmv - #GrantPrice
    let #CompValue     = #SharesGranted * #CompPerShare
    let #ExpensePerDay = #CompValue / #Days

    if $CancelDt <> '' 
      and $CancelReason <> 'RPRC'
      do Select-Shares-Cancelled
      let #Adjustment = #CompPerShare * #SharesCancelled * -1
      do dtu-diff-days($GrantDt  , $CancelDt , #Days      )
      let $VestDt = $CancelDt
    end-if

    let #NetExpense = #CompValue + #Adjustment

    if $FromDate > $GrantDt
      and $FromDate <= $VestDt
      and $ThruDate >= $VestDt
      do dtu-diff-days($FromDate , $VestDt  , #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
    end-if

    if $FromDate > $GrantDt
      and $FromDate < $VestDt
      and $ThruDate > $GrantDt
      and $ThruDate < $VestDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($GrantDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $VestDt  , #FutureDays )
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $VestDt
      do dtu-diff-days($GrantDt , $VestDt   , #CurrentDays)
    end-if

    if $FromDate <= $GrantDt
      and $ThruDate >= $GrantDt
      and $ThruDate < $VestDt
      do dtu-diff-days($GrantDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $VestDt  , #FutureDays )
    end-if

    if $CancelDt <> ''
      and $CancelReason <> 'RPRC'
      let #CurrentDays = #CurrentDays
    else
      let #CurrentDays = #CurrentDays + 1
    end-if

    let #CurrentExpense = #CurrentDays * #ExpensePerDay
    let #PriorExpense   = #PriorDays   * #ExpensePerDay
    let #FutureExpense  = #FutureDays  * #ExpensePerDay
    if $CancelDt <> ''
      and $CancelReason <> 'RPRC'
        let #CurrentExpense = #NetExpense - #FutureExpense - #PriorExpense
    end-if
    do Print-Detail
  end-if

from  PS_ST_STFS009_TAO  A,
      PS_ST_GRANT        B,
      PS_ST_GRNT_VST_DTL C
where A.STOCK_ID    = $StockId
  and A.EMPLID      = B.EMPLID
  and A.STOCK_ID    = B.STOCK_ID
  and A.GRANT_NBR   = B.GRANT_NBR
  and A.EMPLID      = C.EMPLID
  and A.STOCK_ID    = C.STOCK_ID
  and A.GRANT_NBR   = C.GRANT_NBR
  and C.VEST_EFFDT  = (select max(CC.VEST_EFFDT)
                         from PS_ST_GRNT_VST_DTL CC
                        where CC.EMPLID       = C.EMPLID
                          and CC.STOCK_ID     = C.STOCK_ID
                          and CC.GRANT_NBR    = C.GRANT_NBR)
  and C.SEQ_NUM     = (select max(CCC.SEQ_NUM) 
                         from PS_ST_GRNT_VST_DTL CCC
                        where CCC.EMPLID      = C.EMPLID
                          and CCC.STOCK_ID    = C.STOCK_ID
                          and CCC.GRANT_NBR   = C.GRANT_NBR
                          and CCC.VEST_EFFDT  = C.VEST_EFFDT)
  and C.VEST_DT     = (select max(CCCC.VEST_DT)
                         from PS_ST_GRNT_VST_DTL CCCC
                        where CCCC.EMPLID     = C.EMPLID
                          and CCCC.STOCK_ID   = C.STOCK_ID
                          and CCCC.GRANT_NBR  = C.GRANT_NBR
                          and CCCC.VEST_EFFDT = C.VEST_EFFDT
                          and CCCC.SEQ_NUM    = C.SEQ_NUM)
order by A.GRANT_NBR

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Ratable
! Descr:   Process-Ratable
!-----------------------------------------------------------------------
Begin-Procedure Process-Ratable

Begin-Select

D.EMPLID
D.GRANT_NBR
E.GRANT_DT
E.STOCK_PLAN
E.SHARES_GRANTED
E.GRANT_PRICE
E.ST_CANCEL_REASON
E.ST_CANCEL_DT
E.ST_OPTION_TYPE

  let #TCompValue      = 0
  let #TAdjustment     = 0
  let #TNetExpense     = 0
  let #TCurrentExpense = 0
  let #TPriorExpense   = 0
  let #TFutureExpense  = 0
  let $BeginDt         = ''

  let $EmplID          = rtrim(&d.emplid, ' ')
  let $GrantNbr        = rtrim(&d.grant_nbr, ' ')
  let $GrantDt         = rtrim(&e.grant_dt, ' ')
  let $StockPlan       = rtrim(&e.stock_plan, ' ')
  let #SharesGranted   = &e.shares_granted
  let #GrantPrice      = &e.grant_price
  let $CancelReason    = rtrim(&e.st_cancel_reason, ' ')
  let $CancelDt        = rtrim(&e.st_cancel_dt, ' ')
  let $OptionType      = rtrim(&e.st_option_type, ' ')
  do Convert-To-DTU-Date($CancelDt,$CancelDt)
  do Convert-To-DTU-Date($GrantDt ,$GrantDt )
  if $CancelDt > $ThruDate
    let $CancelDt      = ''
    let $CancelReason  = ''
  end-if
  do Get-Fmv-Rules
  do Convert-From-DTU-Date ($GrantDt, $Date)
  do Get_FMV_Prices ($FmvMethod,$StockId,$Date,$HolidayRule,$WeekendRule,#GrantFmv)

  if #GrantPrice < #GrantFmv
    let #Count         = #Count + 1
    do Select-Ratable-Vesting
    let #CompValue      = #TCompValue
    let #Adjustment     = #TAdjustment
    let #NetExpense     = #TNetExpense
    let #CurrentExpense = #TCurrentExpense
    let #PriorExpense   = #TPriorExpense
    let #FutureExpense  = #TFutureExpense
    do Print-Detail
  end-if

from  PS_ST_STFS009_TAO  D,
      PS_ST_GRANT        E
where D.STOCK_ID    = $StockId
  and D.EMPLID      = E.EMPLID
  and D.STOCK_ID    = E.STOCK_ID
  and D.GRANT_NBR   = E.GRANT_NBR
order by D.GRANT_NBR

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Fmv-Rules
! Descr:   Retrieve the info to be passed to the FMV function
!-----------------------------------------------------------------------
Begin-Procedure Get-Fmv-Rules

  let $FmvMethod   = ''
  let $HolidayRule = ''
  let $WeekendRule = ''
  do Convert-From-DTU-Date ($GrantDt, $Date)

Begin-Select

X.GRANT_FMV_MTHD
X.FMV_HOLIDAY_RULE
X.FMV_WEEKEND_RULE

  let $FmvMethod   = rtrim(&x.grant_fmv_mthd, ' ')
  let $HolidayRule = rtrim(&x.fmv_holiday_rule, ' ')
  let $WeekendRule = rtrim(&x.fmv_weekend_rule, ' ')

from  PS_ST_OPTION_PLAN X
where X.STOCK_ID = $StockId
  AND X.STOCK_PLAN_TYPE = 'O'
  AND X.STOCK_PLAN      = $StockPlan
  and X.EFFDT           = (select MAX(XX.EFFDT) 
                             from PS_ST_OPTION_PLAN XX
                            where XX.STOCK_ID        = X.STOCK_ID
                              and XX.STOCK_PLAN_TYPE = X.STOCK_PLAN_TYPE
                              and XX.STOCK_PLAN      = X.STOCK_PLAN
                              and XX.EFFDT          <= $Date )
  
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Ratable-Vesting
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Ratable-Vesting

  let #SharesVested = 0
  let $VestDt       = ''

Begin-Select

Y.VEST_DT
Y.SHARES_VESTED

  let #Days            = 0
  let #CompPerShare    = 0
  let #CompValue       = 0
  let #ExpensePerDay   = 0
  let #Adjustment      = 0
  let #NetExpense      = 0
  let #CurrentDays     = 0
  let #PriorDays       = 0
  let #FutureDays      = 0

  let #SharesVested = &y.shares_vested
  let $VestDt       = rtrim(&y.vest_dt, ' ')
  do Convert-To-DTU-Date($VestDt,$VestDt)

  if $BeginDt = ''
    let $BeginDt   = $GrantDt
  else
    let $BeginDt   = $EndDt
    do dtu-add-days($BeginDt, 1, $BeginDt)
  end-if
  let $EndDt         = $VestDt
  do dtu-diff-days($BeginDt, $EndDt, #Days)
  let #Days          = #Days + 1

  let #CompPerShare  = #GrantFmv - #GrantPrice
  let #CompValue     = #SharesVested * #CompPerShare
  let #ExpensePerDay = #CompValue / #Days

  if $CancelDt <> ''
    and $CancelDt <= $EndDt
    and $CancelReason <> 'RPRC'
    let #Adjustment    = #CompPerShare * #SharesVested * -1
    let #ExpensePerDay = 0
  end-if

  let #NetExpense    = #CompValue + #Adjustment

  if $CancelDt = ''
    or $CancelDt > $EndDt

    if $FromDate > $EndDt
      do dtu-diff-days($BeginDt  , $EndDt   , #PriorDays  )
      let #PriorDays   = #PriorDays + 1
    end-if

    if $FromDate > $BeginDt
      and $FromDate <= $EndDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($FromDate , $EndDt   , #CurrentDays)
      do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate > $BeginDt
      and $FromDate < $EndDt
      and $ThruDate > $BeginDt
      and $ThruDate < $EndDt
      do dtu-diff-days($FromDate , $ThruDate, #CurrentDays)
      do dtu-diff-days($BeginDt  , $FromDate, #PriorDays  )
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

   if $FromDate <= $BeginDt
      and $ThruDate >= $EndDt
      do dtu-diff-days($BeginDt , $EndDt   , #CurrentDays)
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $FromDate <= $BeginDt
      and $ThruDate >= $BeginDt
      and $ThruDate < $EndDt
      do dtu-diff-days($BeginDt  , $ThruDate, #CurrentDays)
      do dtu-diff-days($ThruDate , $EndDt   , #FutureDays )
      let #CurrentDays = #CurrentDays + 1
    end-if

    if $ThruDate < $BeginDt
      do dtu-diff-days($BeginDt , $EndDt   , #FutureDays )
      let #FutureDays  = #FutureDays + 1
    end-if

  end-if

  let #CurrentExpense = #CurrentDays * #ExpensePerDay
  let #PriorExpense   = #PriorDays   * #ExpensePerDay
  let #FutureExpense  = #FutureDays  * #ExpensePerDay
  if $CancelDt <> ''
    and $CancelReason <> 'RPRC'
      let #CurrentExpense = #NetExpense - #FutureExpense - #PriorExpense
  end-if

  let #TCompValue      = #TCompValue      + #CompValue
  let #TAdjustment     = #TAdjustment     + #Adjustment
  let #TNetExpense     = #TNetExpense     + #NetExpense
  let #TCurrentExpense = #TCurrentExpense + #CurrentExpense
  let #TPriorExpense   = #TPriorExpense   + #PriorExpense
  let #TFutureExpense  = #TFutureExpense  + #FutureExpense

from  PS_ST_GRNT_VST_DTL Y
where Y.EMPLID     = $EmplID
  and Y.STOCK_ID   = $StockId
  and Y.GRANT_NBR  = $GrantNbr
  and Y.VEST_EFFDT = (select max(YY.VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL YY
                       where YY.EMPLID      = Y.EMPLID
                         and YY.STOCK_ID    = Y.STOCK_ID
                         and YY.GRANT_NBR   = Y.GRANT_NBR)
  and Y.SEQ_NUM    = (select max(YYY.SEQ_NUM) 
                        from PS_ST_GRNT_VST_DTL YYY
                       where YYY.EMPLID     = Y.EMPLID
                         and YYY.STOCK_ID   = Y.STOCK_ID
                         and YYY.GRANT_NBR  = Y.GRANT_NBR
                         and YYY.VEST_EFFDT = Y.VEST_EFFDT)
ORDER BY Y.VEST_DT ASC

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Shares-Cancelled
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Select-Shares-Cancelled

  let #SharesCancelled = 0
  do Convert-From-DTU-Date ($CancelDt, $Date)

Begin-Select

SUM(Z.SHARES_VESTED)     &z.shares_vested

  let #SharesCancelled = &z.shares_vested

from  PS_ST_GRNT_VST_DTL Z
where Z.EMPLID     = $Emplid
  and Z.STOCK_ID   = $StockId
  and Z.GRANT_NBR  = $GrantNbr
  and Z.VEST_EFFDT = (select max(ZZ.VEST_EFFDT) 
                        from PS_ST_GRNT_VST_DTL ZZ
                       where ZZ.EMPLID    = Z.EMPLID
                         and ZZ.STOCK_ID  = Z.STOCK_ID
                         and ZZ.GRANT_NBR = Z.GRANT_NBR)
  and Z.SEQ_NUM    = (select max(ZZZ.SEQ_NUM) 
                        from PS_ST_GRNT_VST_DTL ZZZ
                       where ZZZ.EMPLID     = Z.EMPLID
                         and ZZZ.STOCK_ID   = Z.STOCK_ID
                         and ZZZ.GRANT_NBR  = Z.GRANT_NBR
                         and ZZZ.VEST_EFFDT = Z.VEST_EFFDT)
  and Z.VEST_DT   >= $Date

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Detail
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Detail

  let #CompValue      = round(#CompValue,2)
  let #Adjustment     = round(#Adjustment,2)
  let #NetExpense     = round(#NetExpense,2)
  let #CurrentExpense = round(#CurrentExpense,2)
  let #PriorExpense   = round(#PriorExpense,2)
  let #FutureExpense  = round(#FutureExpense ,2)

  if $SuppressDetails = 'N'
    print $GrantNbr                                        (+1,001,010)
    print #SharesGranted                                   (  ,014,017) edit 99,999,999.999999
    print #CompValue                                       (  ,033,019) edit $$$9,999,999,999.99
    print #Adjustment                                      (  ,054,019) edit $$$9,999,999,999.99
    if $CancelDt <> ''
      do Convert-From-DTU-Date ($CancelDt, $Date)
      do Format-DateTime ($Date,$Date, {DEFDATE}, '', '')
    else
      let $Date = ''
    end-if
    print $Date                                            (  ,075,010)
    print #NetExpense                                      (  ,088,019) edit $$$9,999,999,999.99
    print #PriorExpense                                    (  ,109,019) edit $$$9,999,999,999.99
    print #FutureExpense                                   (  ,130,019) edit $$$9,999,999,999.99
    print #CurrentExpense                                  (  ,151,019) edit $$$9,999,999,999.99
    do Convert-From-DTU-Date ($GrantDt, $Date)
    do Format-DateTime ($Date, $Date, {DEFDATE}, '', '')
    print $Date                                            (+1,001,010)
    print $CancelReason                                    (  ,075,010)
  end-if

  let #TotalGranted        = #TotalGranted        + #SharesGranted
  let #TotalCompValue      = #TotalCompValue      + #CompValue
  let #TotalAdjustment     = #TotalAdjustment     + #Adjustment
  let #TotalNetExpense     = #TotalNetExpense     + #NetExpense
  let #TotalCurrentExpense = #TotalCurrentExpense + #CurrentExpense
  let #TotalPriorExpense   = #TotalPriorExpense   + #PriorExpense
  let #TotalFutureExpense  = #TotalFutureExpense  + #FutureExpense

End-Procedure

!-----------------------------------------------------------------------
! Section: Print-Summary
! Descr:
!-----------------------------------------------------------------------
Begin-Procedure Print-Summary

  print $TotalLbl                                        (+2,001,005) bold
  print ':'                                              (  ,   ,   ) bold
  print #TotalGranted                                    (  ,011,020) edit 9,999,999,999.999999 bold
  print #TotalCompValue                                  (  ,033,019) edit $$$9,999,999,999.99 bold
  print #TotalAdjustment                                 (  ,054,019) edit $$$9,999,999,999.99 bold
  print #TotalNetExpense                                 (  ,088,019) edit $$$9,999,999,999.99 bold
  print #TotalPriorExpense                               (  ,109,019) edit $$$9,999,999,999.99 bold
  print #TotalFutureExpense                              (  ,130,019) edit $$$9,999,999,999.99 bold
  print #TotalCurrentExpense                             (  ,151,019) edit $$$9,999,999,999.99 bold

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'stgetfmv.sqc'   ! Get Grant FMV
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'askftd.sqc'     ! From Thru Date input
#include 'getrplng.sqc'   ! Gets the report language
#include 'readxlat.sqc'   ! Gets the report language
