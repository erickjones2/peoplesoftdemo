!***********************************************************************
! GPDEAL01.SQC:  Fetching SQC for Report                               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:34:15                                 !
!       $Release:  HR92                                                !
!      $Revision:  104                                                 !
!                                                                      *
!***********************************************************************
! wdu05-89mp1 - added fieldlist for insert at Insert_GPDE_Bl


!rh 05b8 -- include new sqc -- tests for match in GP_RSLT_PIN for accu processing
#include 'gpdeut08.sqc'  !accumulator processing; test for user-keys

 

begin-procedure Get-Data
  do Delete_Rp_Al01
  if rtrim($Ctl_PayEntity,' ') <> '' and rtrim($Cal_Run_Id_Crit,' ') <> ''
  do Get-Earn-Ded-Rslt
  do Get-Accum-Rslt
  end-if

end-procedure  Get-Data

!**************************************************
begin-procedure Get-Earn-Ded-Rslt
  let #ER_count=0

begin-SELECT
SS.EMPLID       &SS.EMPLID
SS.CAL_RUN_ID   &SS.CAL_RUN_ID
SS.EMPL_RCD     &SS.EMPL_RCD
SS.GP_PAYGROUP  &SS.GP_PAYGROUP
SS.CAL_ID       &SS.CAL_ID
SS.RSLT_SEG_NUM &SS.RSLT_SEG_NUM
SS.INSTANCE     &SS.INSTANCE
SS.PIN_NUM      &SS.PIN_NUM
SS.SLICE_BGN_DT &SS.SLICE_BGN_DT
SS.SLICE_END_DT &SS.SLICE_END_DT
PS.PRD_END_DT   &PS.PRD_END_DT
PS.GPDE_AL_CPAY_ENDDT  &PS.GPDE_AL_CPAY_ENDDT
P.PIN_TYPE      &P.PIN_TYPE
P.PIN_NM        &P.PIN_NM
P.DESCR         &P.DESCR
P.PIN_CODE
SUM(SS.CALC_RSLT_VAL) &CAL_AMT
SUM(SS.BASE_RSLT_VAL) &BASE_AMT
SUM(SS.RATE_RSLT_VAL) &RATE_AMT
SUM(SS.UNIT_RSLT_VAL) &UNIT_AMT
SUM(SS.PCT_RSLT_VAL)  &PCT_AMT
PS.CURRENCY_CD
PS.CUR_RT_TYPE
PS.GPDE_ASOF_DT_EX_RT
  let $PrdEndDT          = &PS.PRD_END_DT
  let $Current_Curr      = &PS.CURRENCY_CD
  let $Current_RT_Type   = &PS.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PS.GPDE_ASOF_DT_EX_RT

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  let $Pin_Code = rtrim(ltrim(&P.PIN_CODE, ' '), ' ')

  evaluate $Pin_Code
  when = 'DE_ER_PAID_D DEU'
  when = 'DE_ER_UNPD_D DEU'
  when = 'DE_ER_VAC_PD DEU'
  when = 'DE_ER_VAC_UN DEU'
  when = 'DE_SI_0012A DEU'
  when = 'DE_SI_0012K DEU'
  when = 'DE_SI_0012P DEU'
  when = 'DE_SI_0012R DEU'
  when = 'DE_SI_0012RE DEU'
  when = 'DE_TX_0016 DEU'
     let #CAL_AMT         = &CAL_AMT
     let #BASE_AMT        = &BASE_AMT
     let #RATE_AMT        = &RATE_AMT
     let #UNIT_AMT        = &UNIT_AMT
     let #PCT_AMT         = &PCT_AMT
  goto weiter1
  break
  when-other
     break
  end-evaluate

  if $Current_Curr <> $ToCurrency and rtrim($Rpt_Cur, ' ') <> ''
     do ConvertCurrency(&CAL_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#CAL_AMT,'F')
     do ConvertCurrency(&BASE_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#BASE_AMT,'F')
     do ConvertCurrency(&RATE_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#RATE_AMT,'F')
     do ConvertCurrency(&UNIT_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#UNIT_AMT,'F')
     do ConvertCurrency(&PCT_AMT,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#PCT_AMT,'F')
  else
     let #CAL_AMT         = &CAL_AMT
     let #BASE_AMT        = &BASE_AMT
     let #RATE_AMT        = &RATE_AMT
     let #UNIT_AMT        = &UNIT_AMT
     let #PCT_AMT         = &PCT_AMT
  end-if

  weiter1:
     let $Curr_Pay_End_Dt_SQC = &PS.GPDE_AL_CPAY_ENDDT

     do Insert_GPDE_Bl(&SS.EMPLID,&SS.CAL_RUN_ID,&SS.EMPL_RCD,&SS.GP_PAYGROUP,&SS.CAL_ID,&SS.RSLT_SEG_NUM,
                       &SS.INSTANCE,&SS.PIN_NUM,&SS.SLICE_BGN_DT,&SS.SLICE_END_DT,&PS.PRD_END_DT,
                       &PS.GPDE_AL_CPAY_ENDDT,&P.PIN_TYPE,&P.PIN_NM,&P.DESCR,#CAL_AMT,#BASE_AMT,#RATE_AMT,
                       #UNIT_AMT,#PCT_AMT)


     let #ER_count = #ER_count + 1

FROM   PS_GPDE_RP_0001 PS ,PS_GP_RSLT_ERN_DED SS, PS_GPDE_BL_PRINT D , PS_GP_PIN P
WHERE  PS.EMPLID = SS.EMPLID
AND    PS.CAL_RUN_ID=SS.CAL_RUN_ID
AND    PS.EMPL_RCD = SS.EMPL_RCD
AND    PS.GP_PAYGROUP = SS.GP_PAYGROUP
AND    PS.CAL_ID = SS.CAL_ID
AND    PS.RSLT_SEG_NUM = SS.RSLT_SEG_NUM
AND    SS.PIN_NUM = P.PIN_NUM
AND    SS.PIN_NUM = D.PIN_NUM
AND    D.GPDE_RC_REPORTNAME= $Ctl_Print
AND    SS.CALC_RSLT_VAL <> 0
[$Emplid_Criteria_PS]
[$Cal_Run_Id_Crit_PS]
[$PayEntity_Crit_PS]
[$Paygroup_Crit_PS]
[$Dept_Crit_PS]
[$Location_Crit_PS]
group by SS.EMPLID,PS.CURRENCY_CD,SS.CAL_RUN_ID,SS.EMPL_RCD,SS.GP_PAYGROUP,SS.CAL_ID,SS.RSLT_SEG_NUM,SS.INSTANCE,
         SS.PIN_NUM,SS.SLICE_BGN_DT,SS.SLICE_END_DT,PS.PRD_END_DT,PS.GPDE_AL_CPAY_ENDDT,P.PIN_TYPE,
         P.PIN_NM,P.DESCR,PS.CUR_RT_TYPE,PS.GPDE_ASOF_DT_EX_RT,P.PIN_CODE

end-SELECT

end-procedure Get-Earn-Ded-Rslt

!**************************************************

!**************************************************
!rh 05b2 -- user-keys not taken into account for ytd accumulators
!           1. add user-keys and user_key_pins to select and grouplist
!           2. instead of direclty inserting into GPDE_RP_AL01 call a sub-routine (in GPDEUT08.SQC)
!              that test if a valid user key is stored in GP_RSLT_PIN
!              If so compare stored values, take into consideration only the currently stored
!              discard rows with non-matching user-keys
!              If at least one of the user-keys isn't stored sum all existing entries for this 
!              recordkey combination



begin-procedure Get-Accum-Rslt
  let #AC_count=0
  let $EMPLID_save = ' '
  let $CAL_RUN_ID_save = ' '
  let #EMPL_RCD_save = 0
  let $GP_PAYGROUP_save = ' '
  let $CAL_ID_save = ' '
  let #RSLT_SEG_NUM_save = 0
  let #PIN_NUM_save = 0
  let $SLICE_BGN_DT_save = ' '
  let $SLICE_END_DT_save = ' '

begin-SELECT

SSA.EMPLID       &SSA.EMPLID
SSA.CAL_RUN_ID   &SSA.CAL_RUN_ID
SSA.EMPL_RCD     &SSA.EMPL_RCD
SSA.GP_PAYGROUP  &SSA.GP_PAYGROUP
SSA.CAL_ID       &SSA.CAL_ID
SSA.RSLT_SEG_NUM &SSA.RSLT_SEG_NUM
SSA.PIN_NUM      &SSA.PIN_NUM
SSA.SLICE_BGN_DT &SSA.SLICE_BGN_DT
SSA.SLICE_END_DT &SSA.SLICE_END_DT
SSA.ACM_PRD_OPTN  &SSA.ACM_PRD_OPTN
PSA.PRD_END_DT   &PSA.PRD_END_DT
PSA.GPDE_AL_CPAY_ENDDT  &PSA.GPDE_AL_CPAY_ENDDT
PA.PIN_TYPE      &PA.PIN_TYPE
PA.PIN_NM        &PA.PIN_NM
PA.DESCR         &PA.DESCR
SUM(SSA.CALC_RSLT_VAL) &CAL_AMT_AC
PSA.CURRENCY_CD
PSA.CUR_RT_TYPE
PSA.GPDE_ASOF_DT_EX_RT
SSA.USER_KEY1    &SSA.USER_KEY1
ACM.PIN_USER_KEY1_NUM  &ACM.PIN_USER_KEY1_NUM
SSA.USER_KEY2 &SSA.USER_KEY2 
ACM.PIN_USER_KEY2_NUM    &ACM.PIN_USER_KEY2_NUM
SSA.USER_KEY3            &SSA.USER_KEY3
ACM.PIN_USER_KEY3_NUM &ACM.PIN_USER_KEY3_NUM
SSA.USER_KEY4 &SSA.USER_KEY4
ACM.PIN_USER_KEY4_NUM &ACM.PIN_USER_KEY4_NUM
SSA.USER_KEY5 &SSA.USER_KEY5
ACM.PIN_USER_KEY5_NUM &ACM.PIN_USER_KEY5_NUM
SSA.USER_KEY6 &SSA.USER_KEY6
ACM.PIN_USER_KEY6_NUM &ACM.PIN_USER_KEY6_NUM


  let $PrdEndDT          = &PSA.PRD_END_DT
  let $Current_Curr      = &PSA.CURRENCY_CD
  let $Current_RT_Type   = &PSA.CUR_RT_TYPE
  let $Current_DT_EX_RT  = &PSA.GPDE_ASOF_DT_EX_RT

  if rtrim($Current_RT_Type, ' ') = ''
    let $Current_RT_Type = $BaseRtType
  end-if

  if rtrim($Current_DT_EX_RT, ' ') = ''
    let $Current_DT_EX_RT = $PrdEndDT
  end-if

  if ($Current_Curr <> $ToCurrency) and (rtrim($Rpt_Cur, ' ') <> '')
     do ConvertCurrency(&CAL_AMT_AC,$Current_Curr,$ToCurrency,$Current_RT_Type,
                     $Current_DT_EX_RT,#CAL_AMT_AC,'F')
  else
     let #CAL_AMT_AC         = &CAL_AMT_AC
  end-if

 let $ORIG_CAL_RUN_ID = ' '
 let #count = 0
 

!rh 05b8 -- call subroutine to test for matching user-key combinations
 do Insert-ACM(&SSA.EMPLID,&SSA.CAL_RUN_ID,&SSA.EMPL_RCD,&SSA.GP_PAYGROUP,&SSA.CAL_ID,$ORIG_CAL_RUN_ID
          &SSA.RSLT_SEG_NUM,0,&SSA.PIN_NUM,&SSA.SLICE_BGN_DT,&SSA.SLICE_END_DT,
          &SSA.USER_KEY1,&ACM.PIN_USER_KEY1_NUM, &SSA.USER_KEY2,
          &ACM.PIN_USER_KEY2_NUM, &SSA.USER_KEY3, &ACM.PIN_USER_KEY3_NUM, 
          &SSA.USER_KEY4, &ACM.PIN_USER_KEY4_NUM,&SSA.USER_KEY5, &ACM.PIN_USER_KEY5_NUM,
          &SSA.USER_KEY6, &ACM.PIN_USER_KEY6_NUM, &SSA.ACM_PRD_OPTN, 'PS_GPDE_RP_AL01', #count)


 ! if variable user-key variable was stored but keys don't match Insert-ACM returns 99
 ! if keys match or variable wasn't stored Insert-ACM returns 0 if row is new, returns 1 if row exists
 ! and CAL_AMT must be added to existing row
 
   if #count <> 99
     let $temp1 = datetostr(&SSA.SLICE_BGN_DT, 'yyyy-mm-dd')
     let $temp2 = datetostr(&SSA.SLICE_END_DT, 'yyyy-mm-dd')
 
   
     if ($EMPLID_save = &SSA.EMPLID and
        $CAL_RUN_ID_save = &SSA.CAL_RUN_ID and
        #EMPL_RCD_save = &SSA.EMPL_RCD and
        $GP_PAYGROUP_save = &SSA.GP_PAYGROUP and
        $CAL_ID_save = &SSA.CAL_ID and
        #RSLT_SEG_NUM_save = &SSA.RSLT_SEG_NUM and 
        #PIN_NUM_save = &SSA.PIN_NUM and 
        $SLICE_BGN_DT_save = $temp1 and
        $SLICE_END_DT_save = $temp2) 

 
        do Update_GPDE_BL(&SSA.EMPLID,&SSA.CAL_RUN_ID,&SSA.EMPL_RCD,&SSA.GP_PAYGROUP,&SSA.CAL_ID,
               &SSA.RSLT_SEG_NUM,0,&SSA.PIN_NUM,&SSA.SLICE_BGN_DT,&SSA.SLICE_END_DT,#CAL_AMT_AC)
      else     

        do Insert_GPDE_Bl(&SSA.EMPLID,&SSA.CAL_RUN_ID,&SSA.EMPL_RCD,&SSA.GP_PAYGROUP,&SSA.CAL_ID,
               &SSA.RSLT_SEG_NUM,0,&SSA.PIN_NUM,&SSA.SLICE_BGN_DT,&SSA.SLICE_END_DT,&PSA.PRD_END_DT,
               &PSA.GPDE_AL_CPAY_ENDDT,&PA.PIN_TYPE,&PA.PIN_NM,&PA.DESCR,#CAL_AMT_AC,0,0,0,0)

           let #AC_count = #AC_count + 1
  
      end-if
   end-if   
  
  let $EMPLID_save = &SSA.EMPLID
  let $CAL_RUN_ID_save = &SSA.CAL_RUN_ID
  let #EMPL_RCD_save = &SSA.EMPL_RCD
  let $GP_PAYGROUP_save = &SSA.GP_PAYGROUP
  let $CAL_ID_save = &SSA.CAL_ID
  let #RSLT_SEG_NUM_save = &SSA.RSLT_SEG_NUM
  let #PIN_NUM_save = &SSA.PIN_NUM
  let $SLICE_BGN_DT_save = datetostr(&SSA.SLICE_BGN_DT, 'yyyy-mm-dd')
  let $SLICE_END_DT_save = datetostr(&SSA.SLICE_END_DT, 'yyyy-mm-dd')
       



FROM   PS_GPDE_RP_0001 PSA ,PS_GP_RSLT_ACUM SSA, PS_GPDE_BL_PRINT DA , PS_GP_PIN PA, PS_GP_ACCUMULATOR ACM
WHERE  PSA.EMPLID = SSA.EMPLID
AND    PSA.CAL_RUN_ID=SSA.CAL_RUN_ID
AND    PSA.EMPL_RCD = SSA.EMPL_RCD
AND    PSA.GP_PAYGROUP = SSA.GP_PAYGROUP
AND    PSA.CAL_ID = SSA.CAL_ID
AND    PSA.RSLT_SEG_NUM = SSA.RSLT_SEG_NUM
! wdu 04b4: added EMPL_RCD_ACUM condition
AND    PSA.EMPL_RCD = SSA.EMPL_RCD_ACUM
!
AND    SSA.PIN_NUM = PA.PIN_NUM
AND    SSA.PIN_NUM = DA.PIN_NUM
AND    SSA.PIN_NUM = ACM.PIN_NUM
AND    DA.GPDE_RC_REPORTNAME= $Ctl_Print
AND    SSA.CALC_RSLT_VAL <> 0
[$Emplid_Criteria_PSA]
[$Cal_Run_Id_Crit_PSA]
[$PayEntity_Crit_PSA]
[$Paygroup_Crit_PSA]
[$Dept_Crit_PSA]
[$Location_Crit_PSA]

group by SSA.EMPLID,PSA.CURRENCY_CD,SSA.CAL_RUN_ID,SSA.EMPL_RCD,SSA.GP_PAYGROUP,SSA.CAL_ID,SSA.RSLT_SEG_NUM,SSA.PIN_NUM,
         SSA.SLICE_BGN_DT,SSA.SLICE_END_DT, SSA.ACM_PRD_OPTN, PSA.PRD_END_DT,PSA.GPDE_AL_CPAY_ENDDT,PA.PIN_TYPE,
         PA.PIN_NM,PA.DESCR,PSA.CUR_RT_TYPE,PSA.GPDE_ASOF_DT_EX_RT,
         PSA.GPDE_ASOF_DT_EX_RT,SSA.USER_KEY1, ACM.PIN_USER_KEY1_NUM, SSA.USER_KEY2,
         ACM.PIN_USER_KEY2_NUM, SSA.USER_KEY3, ACM.PIN_USER_KEY3_NUM, SSA.USER_KEY4, 
         ACM.PIN_USER_KEY4_NUM, SSA.USER_KEY5, ACM.PIN_USER_KEY5_NUM, SSA.USER_KEY6, ACM.PIN_USER_KEY6_NUM
order by SSA.EMPLID,PSA.CURRENCY_CD,SSA.CAL_RUN_ID,SSA.EMPL_RCD,SSA.GP_PAYGROUP,SSA.CAL_ID,SSA.RSLT_SEG_NUM,SSA.PIN_NUM,
         SSA.SLICE_BGN_DT,SSA.SLICE_END_DT, SSA.ACM_PRD_OPTN, PSA.PRD_END_DT,PSA.GPDE_AL_CPAY_ENDDT,PA.PIN_TYPE,
         PA.PIN_NM,PA.DESCR,PSA.CUR_RT_TYPE,
         PSA.GPDE_ASOF_DT_EX_RT,SSA.USER_KEY1, ACM.PIN_USER_KEY1_NUM, SSA.USER_KEY2,
         ACM.PIN_USER_KEY2_NUM, SSA.USER_KEY3, ACM.PIN_USER_KEY3_NUM, SSA.USER_KEY4, 
         ACM.PIN_USER_KEY4_NUM, SSA.USER_KEY5, ACM.PIN_USER_KEY5_NUM, SSA.USER_KEY6, ACM.PIN_USER_KEY6_NUM
end-SELECT

end-procedure Get-Accum-Rslt

!**************************************************

begin-procedure Insert_GPDE_Bl($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,#RSLT_SEG_NUM,
                               #INSTANCE,#PIN_NUM,$SLICE_BGN_DT,$SLICE_END_DT,$PRD_END_DT,$GPDE_AL_CPAY_ENDDT,
                               $PIN_TYPE,$PIN_NM,$DESCR,#CAL_AMT,#BASE_AMT,#RATE_AMT,#UNIT_AMT,#PCT_AMT)

begin-sql

INSERT INTO PS_GPDE_RP_AL01 
(EMPLID
,CAL_RUN_ID
,EMPL_RCD
,GP_PAYGROUP
,CAL_ID
,RSLT_SEG_NUM
,INSTANCE
,PIN_NUM
,SLICE_BGN_DT
,SLICE_END_DT
,PRD_END_DT
,GPDE_AL_CPAY_ENDDT
,PIN_TYPE
,PIN_NM
,DESCR
,CALC_RSLT_VAL
,BASE_RSLT_VAL
,RATE_RSLT_VAL
,UNIT_RSLT_VAL
,PCT_RSLT_VAL
)
VALUES (
$EMPLID
,$CAL_RUN_ID
,#EMPL_RCD
,$GP_PAYGROUP
,$CAL_ID
,#RSLT_SEG_NUM
,#INSTANCE
,#PIN_NUM
,$SLICE_BGN_DT
,$SLICE_END_DT
,$PRD_END_DT
,$GPDE_AL_CPAY_ENDDT
,$PIN_TYPE
,$PIN_NM
,$DESCR
,#CAL_AMT
,#BASE_AMT
,#RATE_AMT
,#UNIT_AMT
,#PCT_AMT)
end-sql

end-procedure Insert_GPDE_Bl


!**************************************************
! rh 05b8  -- new routine to add up accum rows if user-key-pin wasn't stored. Required due to changed
!             grouping logic in Get-Acum-RSLT procedure



begin-procedure Update_GPDE_BL($EMPLID,$CAL_RUN_ID,#EMPL_RCD,$GP_PAYGROUP,$CAL_ID,#RSLT_SEG_NUM,
                               #INSTANCE,#PIN_NUM,$SLICE_BGN_DT,$SLICE_END_DT, #CAL_AMT)
                               
begin-sql

UPDATE PS_GPDE_RP_AL01 set CALC_RSLT_VAL = CALC_RSLT_VAL + #CAL_AMT
where
EMPLID = $EMPLID and
CAL_RUN_ID = $CAL_RUN_ID and
EMPL_RCD = #EMPL_RCD and
GP_PAYGROUP = $GP_PAYGROUP and
CAL_ID = $CAL_ID and
RSLT_SEG_NUM = #RSLT_SEG_NUM and
INSTANCE = #INSTANCE and
PIN_NUM = #PIN_NUM and
SLICE_BGN_DT = $SLICE_BGN_DT and
SLICE_END_DT = $SLICE_END_DT

end-sql


end-procedure Update_GPDE_BL                               



!**************************************************

begin-procedure Delete_Rp_Al01

Begin-Sql

  DELETE FROM PS_GPDE_RP_AL01

End-Sql

end-procedure Delete_Rp_Al01


!**************************************************
begin-procedure get-orig-hire-dt
  let $glob_p_orig_hire_dt = &PBD.HIRE_DT
BEGIN-SELECT
MZ.HIRE_DT
  let $glob_p_orig_hire_dt = &MZ.HIRE_DT
FROM PS_JOB MZ
WHERE MZ.EMPLID = &PBD.EMPLID
  AND MZ.EMPL_RCD = &PBD.EMPL_RCD
  AND MZ.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB
                   WHERE EMPLID = MZ.EMPLID
         and EMPL_RCD = MZ.EMPL_RCD
      AND EFFDT = MZ.EFFDT)
  AND MZ.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB
                  WHERE EMPLID = MZ.EMPLID
        AND EMPL_RCD = MZ.EMPL_RCD
     AND EFFDT <= $current-date)
END-SELECT
end-procedure !get-orig-hire-dt