!***********************************************************************
!  PAY061.SQR: Employee Budget Check Log Report                        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/17:15:37:55                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'  !Set environment
#include 'setup32.sqc' !Printer and page-size initialization

!************
begin-report
!************

  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report


!***************************
begin-procedure Init-Report
!***************************

  move 'PAY061' to $ReportID
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Stdapi-Init
  do Get-Run-Control

  move 'Employee Budget Check Log Report' to $ReportTitle
  display ' '
  display $ReportTitle
  display ' '
  do REPORT-TRANSLATION

end-procedure


!****************
begin-heading 9
!****************

  let $FromDate      =  &RC.HP_Run_Dt
  let $AsOfDate      =  &RC.HP_Thru_Dt_Run

#Include 'stdhtr02.sqc'

  let $FiscalYr_Title = $PAY061_HDG_FISCAL_YR || ' ' || $RC_FiscalYr
  print $FiscalYr_Title             (3,,)      center

  if $RC_HP_Tran_Type = 'E'
    print $PAY061_ENC_TRANS         (+1,,)     center
  else
    if $RC_HP_Tran_Type = 'A'
      print $PAY061_EXP_TRANS       (+1,,)     center
    end-if
  end-if

  print $PAY061_PAYGROUP            (4,1)
  print $PayGroup                   (,+2)
  print $PayGroupName               (,+1)

  print $PAY061_HDG_DEPTID          (+1,1)

  print $DeptID                     (,+2)
  print $DeptName                   (,+1)

  if $RC_HP_Tran_Type = 'E'
    print $PAY061_DOCUMENT_ID       (+1,65,31)
    print $PAY061_COMBO_CODE        (,105,25)
  else
    if $RC_HP_Tran_Type = 'A'
      print $PAY061_COMBO_CODE      (+1,105,25)
    end-if
  end-if

  print $PAY061_ACCOUNT             (,131,10)
  print $PAY061_RTBC                (,171,4)

  print $PAY061_EMPLOYEE_NAME       (+1,1,50)
  print $PAY061_EMPL_ID             (,52,11)

  if $RC_HP_Tran_Type = 'E'
    print $PAY061_ENCUM_HDR_STATUS  (,65,26)
  else
    if $RC_HP_Tran_Type = 'A'
      print $PAY061_DOCUMENT_ID     (,65,31)
    end-if
  end-if

  print $PAY061_DOC_LN#             (,98,7)
  print $PAY061_EXCPTN_TYPE         (,105,25)
  print $PAY061_MESSAGE             (,131,8)
  print $PAY061_SETID               (,142,5)
  print $PAY061_BUD_YR              (,149,6)
  print $PAY061_BUD_STAT            (,156,8)
  print $PAY061_RTBC_PERFORMED      (,165,5)
  print $PAY061_TRIGGER             (,171,10)

  print '-------------'             (+1,1)
  print '-------'                   (,52)
  if $RC_HP_Tran_Type = 'E'
    print '-------------'           (,65)
  else
    if $RC_HP_Tran_Type = 'A'
      print '-----------'           (,65)
    end-if
  end-if
  print '---'                       (,98)
  print '----------------'          (,105)
  print '-------'                   (,131)
  print '-----'                     (,142)
  print '------'                    (,149)
  print '--------'                  (,156)
  print '-----'                     (,165)
  print '-------'                   (,171)


end-HEADING

!*********************************
begin-procedure REPORT-TRANSLATION
!*********************************

  let $language_cd = $PRCS_LANGUAGE_CD
  do Init_Report_Translation($ReportID,$Language_Cd)

  do Get_Field_Information ('PAY061', 'PAYGROUP',      $PAY061_PAYGROUP,       #DW)

  do Get_Field_Information ('PAY061', 'HDG_FISCAL_YR', $PAY061_HDG_FISCAL_YR,  #DW)
  do Get_Field_Information ('PAY061', 'HDG_DEPTID'   , $PAY061_HDG_DEPTID,     #DW)

  do Get_Field_Information ('PAY061', 'EMPLOYEE_NAME', $PAY061_EMPLOYEE_NAME,  #DW)
  do Get_Field_Information ('PAY061', 'EMPL_ID',       $PAY061_EMPL_ID,        #DW)
  do Get_Field_Information ('PAY061', 'DOCUMENT_ID',   $PAY061_DOCUMENT_ID,    #DW)
  do Get_Field_Information ('PAY061', 'DOC_LN#',       $PAY061_DOC_LN#,        #DW)
  do Get_Field_Information ('PAY061', 'COMBO_CODE',    $PAY061_COMBO_CODE,     #DW)
  do Get_Field_Information ('PAY061', 'ACCOUNT',       $PAY061_ACCOUNT,        #DW)
  do Get_Field_Information ('PAY061', 'SETID',         $PAY061_SETID,          #DW)
  do Get_Field_Information ('PAY061', 'ID',            $PAY061_ID,             #DW)
  do Get_Field_Information ('PAY061', 'FISCAL',        $PAY061_FISCAL,         #DW)
  do Get_Field_Information ('PAY061', 'RTBC_PERFORMED',$PAY061_RTBC_PERFORMED, #DW)
  do Get_Field_Information ('PAY061', 'RTBC',          $PAY061_RTBC,           #DW)
  do Get_Field_Information ('PAY061', 'TRIGGER',       $PAY061_TRIGGER,        #DW)
  do Get_Field_Information ('PAY061', 'ENCUM_HDR_STATUS',$PAY061_ENCUM_HDR_STATUS, #DW)
  do Get_Field_Information ('PAY061', 'EXCPTN_TYPE'    ,$PAY061_EXCPTN_TYPE,   #DW)
  do Get_Field_Information ('PAY061', 'MESSAGE'        ,$PAY061_MESSAGE,       #DW)
  do Get_Field_Information ('PAY061', 'BUD_YR'         ,$PAY061_BUD_YR,        #DW)
  do Get_Field_Information ('PAY061', 'BUD_STAT'       ,$PAY061_BUD_STAT,      #DW)
  do Get_Field_Information ('PAY061', 'ENC_TRANS'      ,$PAY061_ENC_TRANS,     #DW)
  do Get_Field_Information ('PAY061', 'EXP_TRANS'      ,$PAY061_EXP_TRANS,     #DW)

end-procedure

!****************************
begin-procedure Process-Main
!****************************

begin-SELECT

EN.COMPANY              () on-break print=never  level=1  procedure=change-page
EN.PAYGROUP             () on-break print=never  level=2  procedure=change-page
EN.DEPTID               () on-break print=never  level=3  procedure=change-page
N.NAME_PSFORMAT
EE.EMPLID
EN.HP_KK_DOC_ID
EN.HP_KK_DOC_LINE_NBR
EN.ACCT_CD
EN.ACCOUNT
EN.SETID
EN.FISCAL_YEAR
EN.HP_BUDGET_YEAR
EE.HP_RTBC_PERFORMED
EE.HP_RTBC_TRIGGER
{DateTimeOut-Prefix}EE.HP_LSTUPD_ENC_TIME{DateTimeOut-Suffix}  &EE.HP_LSTUPD_ENC_TIME


  do Format-DateTime(&EE.HP_LSTUPD_ENC_TIME, $out, {DEFCMP}, '', '')
  let $Log_Date_CMP = $out

  if ($DateRange_Fnd = 'Y' and
       ($Log_Date_CMP   >=  $RC_RunDt_CMP  and
        $Log_Date_CMP   <=  $RC_ThruDt_CMP)) or
     $DateRange_Fnd = 'N'

    print &EN.HP_KK_Doc_ID            (+2,65,31)
    print &EN.HP_KK_Doc_Line_Nbr      (,98,3)
    print &EN.Acct_Cd                 (,105,25)
    print &EN.Account                 (,131,10)
    print &EN.SetID                   (,142,5)
    print &EN.HP_Budget_Year          (,149,4)
    print &EE.HP_RTBC_Performed       (,167,1)

    if &EE.EmplID <> $priorEmplID
      print &N.Name_PSformat          (,1,50)
      print &EE.Emplid                (,52,11)
      move &EE.EmplID  to $priorEmplID
    end-if

    let $Company  = rtrim(&EN.Company, ' ')
    let $PayGroup = rtrim(&EN.PayGroup, ' ')

    do Format-DateTime($Log_Date_CMP, $AsOfDate, {DEFCMP}, '', 'native')
    do Get-PayGroup-Data

    let $SetID    = rtrim(&EN.SetID,' ')
    let $DeptID   = rtrim(&EN.DeptID,' ')
    do Get-Department-Name-with-SetID

    do Get-DocID-Summary

    move 'HP_BUDGET_STATUS'           to $FieldName
    move $Budget_Status               to $FieldValue
    do Read-Translate-Table
    move $XlatShortName               to $Budget_Status
    print $Budget_Status              (,156,10)

    move 'HP_RTBC_TRIGGER'            to $FieldName
    let $RTBC_Trigger =  rtrim(&EE.HP_RTBC_Trigger, ' ')
    move $RTBC_Trigger                to $FieldValue
    do Read-Translate-Table
    move $XlatShortName               to $RTBC_Trigger
    print $RTBC_Trigger               (,171,10)

    if $RC_HP_Tran_Type = 'A'         !Actual Expense
      do Get-Expense-Line-Msg
    else
      if $RC_HP_Tran_Type = 'E'       !Encumbrance
        do Get-Budget-Chk-Hdr
      end-if
    end-if

    let $EE_Log_printed = 'Y'

  end-if

FROM PS_HP_BDCK_LOG_JOB EE,
     PS_ENCUMB_DIST     EN,
     PS_PERSON_NAME     N

[$WhereParam]
AND  EE.EMPLID    = EN.EMPLID
AND  EE.EMPL_RCD  = EN.EMPL_RCD
AND  EE.EMPLID    = N.EMPLID
ORDER BY EN.COMPANY, EN.PAYGROUP, EN.DEPTID, N.NAME_PSFORMAT

end-SELECT

end-procedure


!*********************************
begin-procedure Get-DocID-Summary
!*********************************

  let $Budget_Status = ' '

begin-SELECT
S.HP_BUDGET_STATUS

  let $Budget_Status = rtrim(&S.HP_Budget_Status, ' ')

FROM PS_HP_DOC_ID_SUMM S
WHERE S.HP_KK_DOC_ID       = &EN.HP_KK_Doc_ID
  AND S.HP_KK_DOC_LINE_NBR = &EN.HP_KK_Doc_Line_Nbr
  AND S.FISCAL_YEAR        = &EN.Fiscal_Year
  AND S.HP_BUDGET_YEAR     = &EN.HP_Budget_Year

end-SELECT

end-procedure Get-DocID-Summary


!***************************
begin-procedure change-page
!***************************

  if $EE_Log_printed = 'Y'
    new-page
    let $EE_Log_printed = 'N'
  end-if

end-procedure change-page


!**************************************
begin-procedure Get-Expense-Line-Msg
!**************************************

  let $Msg_Parm1   = ' '
  let $Msg_Parm2   = ' '
  let $Msg_Parm3   = ' '
  let $Msg_Parm4   = ' '
  let #Message_Nbr = 0

begin-SELECT
EL.RUN_DT
EL.SEQNUM
EL.HP_KK_DOC_LINE_NBR
EL.EXCPTN_TYPE
EL.MESSAGE_NBR
EL.MESSAGE_PARM1
EL.MESSAGE_PARM2
EL.MESSAGE_PARM3
EL.MESSAGE_PARM4



    move &EL.Excptn_Type to $Exception_Type
    do Get-Excptn-Type-Descr
    print $Excptn_Type_Descr     (+1,105,10)

    if &EL.MESSAGE_NBR > 0

      move &EL.Message_Nbr to #Message_Nbr
      do Get-Bud-Check-Msg

      if $Msg_Text <> ' '
        let $Msg_Parm1 = rtrim(&EL.Message_Parm1, ' ')
        let $Msg_Parm2 = rtrim(&EL.Message_Parm2, ' ')
        let $Msg_Parm3 = rtrim(&EL.Message_Parm3, ' ')
        let $Msg_Parm4 = rtrim(&EL.Message_Parm4, ' ')
        do Format-Msg-Text

        print $Msg_Text          (,131)  wrap 45 6
      end-if

    end-if


FROM PS_HP_EXP_RESP_LN  EL
WHERE EL.HP_KK_DOC_ID       =  &EN.HP_KK_Doc_ID
  AND EL.HP_FISCAL_YEAR     =  &EN.Fiscal_Year
  AND EL.HP_BUDGET_YEAR     =  &EN.HP_Budget_Year
  AND EL.HP_KK_DOC_LINE_NBR =  &EN.HP_KK_Doc_Line_Nbr
ORDER BY EL.EXCPTN_TYPE

end-SELECT

end-procedure Get-Expense-Line-Msg


!**************************************
begin-procedure Get-Budget-Chk-Hdr
!**************************************

  let $Bud_Hdr_Status  = ' '

begin-SELECT
H.HP_KK_DOC_ID
H.HP_FISCAL_YEAR
H.HP_BUDGET_YEAR
H.BUDGET_HDR_STATUS

    move 'BUDGET_HDR_STATUS'            to $FieldName
    let $Bud_Hdr_Status  =  rtrim(&H.Budget_Hdr_Status, ' ')
    move $Bud_Hdr_Status                to $FieldValue
    do Read-Translate-Table
    move $XlatShortName                 to $Bud_Hdr_Status
    print $Bud_Hdr_Status               (+1,65,10)

    do Get-Budget-Chk-Line-Msg

FROM PS_HP_BUD_RESP_HDR H
WHERE H.HP_KK_DOC_ID     =  &EN.HP_KK_Doc_ID
  AND H.HP_FISCAL_YEAR   =  &EN.Fiscal_Year
  AND H.HP_BUDGET_YEAR   =  &EN.HP_Budget_Year

end-SELECT

end-procedure Get-Budget-Chk-Hdr


!**************************************
begin-procedure Get-Budget-Chk-Line-Msg
!**************************************

  let $Msg_Parm1   = ' '
  let $Msg_Parm2   = ' '
  let $Msg_Parm3   = ' '
  let $Msg_Parm4   = ' '
  let #Message_Nbr = 0
  let #Excep_Cnt   = 0

begin-SELECT
L.HP_KK_DOC_LINE_NBR
L.EXCPTN_TYPE
L.MESSAGE_NBR
L.MESSAGE_PARM1
L.MESSAGE_PARM2
L.MESSAGE_PARM3
L.MESSAGE_PARM4


    move &L.Excptn_Type to $Exception_Type
    do Get-Excptn-Type-Descr

    if #Excep_Cnt > 0
      print $Excptn_Type_Descr    (+1,105,10)
    else
      print $Excptn_Type_Descr    (,105,10)
    end-if

    if &L.MESSAGE_NBR > 0

      move &L.Message_Nbr to #Message_Nbr
      do Get-Bud-Check-Msg

      if $Msg_Text <> ' '
        let $Msg_Parm1 = rtrim(&L.Message_Parm1, ' ')
        let $Msg_Parm2 = rtrim(&L.Message_Parm2, ' ')
        let $Msg_Parm3 = rtrim(&L.Message_Parm3, ' ')
        let $Msg_Parm4 = rtrim(&L.Message_Parm4, ' ')
        do Format-Msg-Text

        print $Msg_Text         (,131) wrap 45 6
      end-if

    end-if

    add 1 to #Excep_Cnt

FROM PS_HP_BUD_RESP_LN  L
WHERE L.HP_KK_DOC_ID       =  &H.HP_KK_Doc_ID
  AND L.HP_FISCAL_YEAR     =  &H.HP_Fiscal_Year
  AND L.HP_BUDGET_YEAR     =  &H.HP_Budget_Year
  AND L.HP_KK_DOC_LINE_NBR =  &EN.HP_KK_Doc_Line_Nbr
ORDER BY L.EXCPTN_TYPE

end-SELECT

end-procedure Get-Budget-Chk-Line-Msg


!************************************
begin-procedure Get-Excptn-Type-Descr
!************************************

  let $Excptn_Type_Descr = ' '

begin-SELECT
BE.DESCRSHORT

  let $Excptn_Type_Descr = rtrim(&BE.Descrshort, ' ')

FROM PS_HP_BUD_EXCP_TBL  BE
WHERE BE.EXCPTN_TYPE  =  $Exception_Type

end-SELECT

  if $Curr_Language_Cd <> $PSOptions_Language_Cd
     do Get-Excptn-Type-Descr-Lang
  end-if

end-procedure Get-Excptn-Type-Descr


!*****************************************
begin-procedure Get-Excptn-Type-Descr-Lang
!*****************************************

begin-SELECT
BL.DESCRSHORT

  let $Excptn_Type_Descr = rtrim(&BL.Descrshort, ' ')

FROM PS_HP_BUD_EXCP_LNG BL
WHERE BL.EXCPTN_TYPE  =  $Exception_Type
  AND BL.LANGUAGE_CD  =  $curr_Language_Cd

end-SELECT

end-procedure Get-Excptn-Type-Descr-Lang



!*********************************
begin-procedure Get-Bud-Check-Msg
!*********************************

  let $Msg_Text = ' '

begin-SELECT
M.MESSAGE_TEXT

  let $Msg_Text = rtrim(&M.Message_Text,' ')

FROM PS_HP_BUD_MSG_TBL M
WHERE M.MESSAGE_NBR = #Message_Nbr

end-SELECT

  if $Curr_Language_Cd <> $PSOptions_Language_Cd
     do Get-Bud-Check-Msg-Lang
  end-if

end-procedure Get-Bud-Check-Msg


!**************************************
begin-procedure Get-Bud-Check-Msg-Lang
!**************************************

begin-SELECT
LM.MESSAGE_TEXT

  let $Msg_Text = rtrim(&LM.Message_Text,' ')

FROM PS_HP_BUD_MSG_LNG LM
WHERE LM.MESSAGE_NBR = #Message_Nbr
  AND LM.LANGUAGE_CD = $curr_Language_Cd

end-SELECT

end-procedure Get-Bud-Check-Msg-Lang


!********************************
begin-procedure Format-Msg-Text
!********************************

  let $Msg_Text = replace($Msg_Text, '%1', $Msg_Parm1)
  let $Msg_Text = replace($Msg_Text, '%2', $Msg_Parm2)
  let $Msg_Text = replace($Msg_Text, '%3', $Msg_Parm3)
  let $Msg_Text = replace($Msg_Text, '%4', $Msg_Parm4)

  let $Msg_Text = ltrim(rtrim($Msg_Text, ' '), ' ')

end-procedure Format-Msg-Text


!******************************
begin-procedure Get-Run-Control
!******************************

  let $WhereParam = ''
  let $DateRange_Fnd = ' '

begin-SELECT
RC.HP_RUN_DT
RC.HP_THRU_DT_RUN
RC.HP_BUDGET_STATUS
RC.FISCAL_YEAR
RC.SETID
RC.DEPTID
RC.COMPANY
RC.PAYGROUP
RC.HP_TRAN_TYPE

  let $FromDate      =  &RC.HP_Run_Dt
  let $AsOfDate      =  &RC.HP_Thru_Dt_Run

  if rtrim(&RC.HP_Run_Dt, ' ') <> '' and
     rtrim(&RC.HP_Thru_Dt_Run, ' ') <> ''
    do Format-DateTime(&RC.HP_Run_Dt, $RC_RunDt_CMP, {DEFCMP}, '', '')
    do Format-DateTime(&RC.HP_Thru_Dt_Run, $RC_ThruDt_CMP, {DEFCMP}, '', '')
    let $DateRange_Fnd = 'Y'
  else
    let $DateRange_Fnd = 'N'
  end-if

  let $RC_BudStat   =  ltrim(rtrim(&RC.HP_Budget_Status,' '),' ')

  do Format-Number (&RC.Fiscal_Year, $RC_FiscalYr, '9999')

  let $RC_SetID     =  ltrim(rtrim(&RC.SetID,' '),' ')
  let $RC_DeptID    =  ltrim(rtrim(&RC.DeptID ,' '),' ')
  let $RC_Company   =  ltrim(rtrim(&RC.Company ,' '),' ')
  let $RC_PayGroup  =  ltrim(rtrim(&RC.Paygroup ,' '),' ')
  let $RC_HP_Tran_Type = ltrim(rtrim(&RC.HP_Tran_Type ,' '),' ')


  let $WhereParam = 'WHERE EN.FISCAL_YEAR = ' || $RC_FiscalYr

  if rtrim($RC_Company, ' ') <> ''
      let $WhereParam = $WhereParam || ' AND EN.COMPANY =  ' || '''' || $RC_Company || ''''
  end-if

  if rtrim($RC_PayGroup, ' ') <> ''
      let $WhereParam = $WhereParam || ' AND EN.PAYGROUP =  ' || '''' || $RC_PayGroup || ''''
  end-if

  if rtrim($RC_SetID, ' ') <> ''
      let $WhereParam = $WhereParam || ' AND EN.SETID =  ' || '''' || $RC_SetID  || ''''
  end-if

  if rtrim($RC_DeptID, ' ') <> ''
      let $WhereParam = $WhereParam || ' AND EN.DEPTID = ' || '''' || $RC_DeptID  || ''''
  end-if

  if rtrim($RC_BudStat, ' ') <> ''
      let $WhereParam = $WhereParam || ' AND EE.HP_BUDGET_STATUS = ' || '''' || $RC_BudStat || ''''
  end-if


FROM PS_RUN_CNTL_RTBC RC
WHERE RC.OPRID = $prcs_oprid
  AND RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-SELECT

end-procedure Get-Run-Control


begin-footing 4
  print ' '             (+0,1) center
end-footing

#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#include 'getdptnm.sqc'  !Get-Department-Name procedure
#Include 'stdapi.sqc'    !Update Process API
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'sqrtrans.sqc'  !Translate SQR strings to a given language
#Include 'readxlat.sqc'  !Read-Translate-Table procedure


