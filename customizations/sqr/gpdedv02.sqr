!***********************************************************************
!  GPDEDV02.SQR:  Triggergenerierung                                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:35:46                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!
! rh07-89b09 - modify main routine to allow process to run after either DEUEV Monthly run or 'One-Step-DEUEV'
! adj-9b04 - Modify to include messages for employees with missing National ID
!
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20060714-1005 wdu06-881b11==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20070306-1132 rh07-890b09==='
!#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20071001-1332 adj-9b04==='
!sgo11-9GPUpdate2011E-Bug12529797 : 30 05 2011 - Remove Audit Birthplace Unbekannt

#define gpdeversionstamp '===FUNCTIONAL UPDATE STAMP: 20110530 sgo11-2011-E==='

#include 'setenv.sqc'   ! setup sqr environment
#include 'setup31.sqc'

#define col1 10
#define col2 30
#define col3 40
#define col4 55
!*************************************************************************************
begin-report
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
end-report

!*************************************************************************************




begin-procedure Init-Report
  show {gpdeversionstamp}
  do Stdapi-Init
  
! wdu 04b4 remove after b5
!--  if $prcs_process_instance = ''
!--     do Ask-Input
!--  else
!--     do Get-Report-Parameters
!--  end-if

  ! wdu-04b4 changed for customer process: 
  ! begin runcontrol data
  ! If no oprid or runcontrol was passed on the commandline, then ask for it.
  ! After that, fetch functional data from the runcontrol.
  ! The input of functional values is no longer supported.
  if $prcs_process_instance = ''
          input $PRCS_OPRID 'OPRID '
          input $PRCS_RUN_CNTL_ID 'RUNCONTROL '
          do Get-Report-Parameters
          ! always override language settings
          let $LANGUAGE_CD = 'GER'
          let $CURR_LANGUAGE_CD = 'GER'
   else
          do Get-Report-Parameters
   end-if
  ! end runcontrol data  
  
  move 'GPDEDV02' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Get_BegDT_EndDt
  let $ReportTitle = 'Triggergenerierung' || ' ' || $HeadTit
  let $SubTitel = 'Neu erstellte Meldetatbestände'
  let #SubTitLength = length($SubTitel)
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure
!******************************************************************************************





begin-procedure Ask-Input
input $Ctl_Cal_Run_ID       'Calendat Group ID '
input $Ctl_Deuev_App        'DEUEV Application '
input $language_cd          'Language CD '

let $Ctl_Cal_Run_ID = ltrim(rtrim($Ctl_Cal_Run_ID, ' '), ' ')
let $Ctl_Deuev_App  = ltrim(rtrim($Ctl_Deuev_App, ' '), ' ')

end-procedure
!****************************************************************************************





begin-procedure Get_BegDT_EndDt
begin-select
DTL1.PRD_BGN_DT &Dtl_Begin_Dt
DTL1.PRD_END_DT &Dtl_End_Dt

      do ConvertToComponents(&Dtl_End_Dt,$yyDtl,$mmDtl,$ddDtl)
  evaluate $mmDtl
    when = '01'
      let $HD_Month_Name = 'Januar'
      break
    when = '02'
      let $HD_Month_Name = 'Februar'
      break
    when = '03'
      let $HD_Month_Name = 'März'
      break
    when = '04'
      let $HD_Month_Name = 'April'
      break
    when = '05'
      let $HD_Month_Name = 'Mai'
      break
    when = '06'
      let $HD_Month_Name = 'Juni'
      break
    when = '07'
      let $HD_Month_Name = 'Juli'
      break
    when = '08'
      let $HD_Month_Name = 'August'
      break
    when = '09'
      let $HD_Month_Name = 'September'
      break
    when = '10'
      let $HD_Month_Name = 'Oktober'
      break
    when = '11'
      let $HD_Month_Name = 'November'
      break
    when = '12'
      let $HD_Month_Name = 'Dezember'
      break
    when-other
      let $HD_Month_Name = 'XXXXXXX'
      break
  end-evaluate

  let $HeadTit = $HD_Month_Name || '  ' || $yyDtl
from PS_GP_CAL_RUN_DTL DTL1
where DTL1.CAL_RUN_ID = $Ctl_Cal_Run_ID
    and DTL1.CAL_SEQ_NUM = (select max(CAL_SEQ_NUM) from PS_GP_CAL_RUN_DTL DTL2
    where DTL2.CAL_RUN_ID = DTL1.CAL_RUN_ID)
end-select


end-procedure
!******************************************************************************************




begin-procedure Get-Report-Parameters
let $Ctl_Cal_Run_ID = ' '
let $Ctl_Deuev_App  = ' '
let $language_cd = $PRCS_LANGUAGE_CD
begin-select
RC02.CAL_RUN_ID
RC02.GPDE_DV_CRTAPP
  let $Ctl_Cal_Run_ID = rtrim(&RC02.CAL_RUN_ID, ' ')
  let $Ctl_Deuev_App  = rtrim(&RC02.GPDE_DV_CRTAPP, ' ')
from PS_GPDE_DV_RC02 RC02
where RC02.OPRID = $prcs_oprid
end-select

end-procedure

!******************************************************************************************




begin-procedure Get_Deuev_App_Descr
let $Deuev_App_Descr = ' '
evaluate $Ctl_Deuev_App
when = 'BEG'
  let $Deuev_App_Descr = 'Systemstart'
  break
when = 'CUR'
  let $Deuev_App_Descr = 'Währungsumstellung'
  break
when = 'DAY'
  let $Deuev_App_Descr = 'Tageslauf'
  break
when = 'END'
  let $Deuev_App_Descr = 'Systemende'
  break
when = 'MON'
  let $Deuev_App_Descr = 'Monatslauf'
  break
when = 'YEA'
  let $Deuev_App_Descr = 'Jahreslauf'
  break
when-other
  break
end-evaluate
end-procedure
!******************************************************************************************





begin-procedure Process-Main

do Get_Deuev_App_Descr
do Get_VersionNr
let $ProtokName = 'Protokoll erstellter Meldetatbestände durch die Applikation ' || $Deuev_App_Descr
let #ProtLength = length($ProtokName)

do PrintNewTriggers
do PrintDeletedTriggers
!rh07-89b09 - allow to run if called by GPDE_DV_MON or ONE-STEP-DEVUEV GPDE_DV_EVT
if $Ctl_Deuev_App = 'MON' or $Ctl_Deuev_App = 'ALL' or $Ctl_Deuev_App = 'EVT' 
    ! monthly run only, because of Eligibility
    do DeuevAuditMain
end-if

end-procedure





begin-procedure PrintNewTriggers
let $PageType='NEW'
let $Exists_Data = 'N'
begin-select
TR.EMPLID
TR.EMPL_RCD
TR.GPDE_DV_EVT_EFFDT
TR.GPDE_DV_EVT_TYPE

    let $Empl_ID      = rtrim(&TR.EMPLID, ' ')
 let #Empl_Rcd     = &TR.EMPL_RCD
 let $Eff_DT       = rtrim(&TR.GPDE_DV_EVT_EFFDT, ' ')
 let $Evt_Type     = rtrim(&TR.GPDE_DV_EVT_TYPE, ' ')

 do Get_Evt_Type_Desc
 do Print_Data
 let $Exists_Data = 'Y'
from PS_GPDE_DV_TRIGGER TR,PS_GPDE_DV_RUN_ID RID
where RID.CAL_RUN_ID = $Ctl_Cal_Run_ID and
      RID.EMPLID = TR.EMPLID and
          RID.EMPL_RCD = TR.EMPL_RCD and
      not exists (select 'X' from PS_GPDE_DV_TRG_BCK BCK0
      where BCK0.EMPLID = TR.EMPLID and
      BCK0.EMPL_RCD = TR.EMPL_RCD and
      BCK0.GPDE_DV_EVT_EFFDT = TR.GPDE_DV_EVT_EFFDT and
      BCK0.GPDE_DV_EVT_TYPE = TR.GPDE_DV_EVT_TYPE)
!wdu 04b4: added sort
order by TR.EMPLID,TR.EMPL_RCD,TR.GPDE_DV_EVT_EFFDT,TR.GPDE_DV_EVT_TYPE
end-select
end-procedure





begin-procedure PrintDeletedTriggers
if $Exists_Data = 'Y'
  new-page
end-if
let $Exists_Data = 'N'
let $PageType='DEL'
let $SubTitel = 'Gelöschte Meldetatbestände'
let #SubTitLength = length($SubTitel)
begin-select
BCK.EMPLID
BCK.EMPL_RCD
BCK.GPDE_DV_EVT_EFFDT
BCK.GPDE_DV_EVT_TYPE

    let $Empl_ID      = rtrim(&BCK.EMPLID, ' ')
 let #Empl_Rcd     =  &BCK.EMPL_RCD
 let $Eff_DT       = rtrim(&BCK.GPDE_DV_EVT_EFFDT, ' ')
 let $Evt_Type     = rtrim(&BCK.GPDE_DV_EVT_TYPE, ' ')
 do Get_Evt_Type_Desc
 do Print_Data
 let $Exists_Data = 'Y'
from PS_GPDE_DV_TRG_BCK BCK,PS_GPDE_DV_RUN_ID RID1
where RID1.CAL_RUN_ID = $Ctl_Cal_Run_ID and
      RID1.EMPLID = BCK.EMPLID and
          RID1.EMPL_RCD = BCK.EMPL_RCD  and
      not exists (select 'X' from PS_GPDE_DV_TRIGGER TR1
                  where TR1.EMPLID = BCK.EMPLID  and
                   TR1.EMPL_RCD = BCK.EMPL_RCD and
                   TR1.GPDE_DV_EVT_EFFDT = BCK.GPDE_DV_EVT_EFFDT and
                   TR1.GPDE_DV_EVT_TYPE = BCK.GPDE_DV_EVT_TYPE)
!wdu 04b4: added sort
order by BCK.EMPLID,BCK.EMPL_RCD,BCK.GPDE_DV_EVT_EFFDT,BCK.GPDE_DV_EVT_TYPE
end-select
end-procedure





! ---------------------- AUDIT SECTION -----------------------------------
! the audits in this section should help find issues as early as possible.
!
!
! ------------------------------------------------------------------------
begin-procedure DeuevAuditMain
    ! flush trigger data if any
    if $Exists_Data = 'Y'
      new-page
    end-if
    
    let $PageType='AUDIT'
    let $SubTitel = 'Audit-Liste'
    let #SubTitLength = length($SubTitel)


    ! -----------------------------------------------
    let $auditName='Prfg-1-1'
    let $AuditMsg='Der eingetragene Geburtsort ist unzulaessig: '
! sgo11-9GPUpdate2011E-Bug12529797 : 30 05 2011 - Remove Audit Birthplace Unbekannt
!begin-select DISTINCT   
!P2.EMPLID
!P2.BIRTHPLACE
!    let $Emplid=&P2.EMPLID
!    print $Emplid               (+1,{col1})
!    print $AuditName            (,{col3})    
!    print $AuditMsg             (,{col4})
!    print ' '                   (,)
!    print &P2.BIRTHPLACE        (,)
!FROM PS_PERSON P2
!WHERE EXISTS (SELECT 'X' FROM PS_GPDE_DV_ELIG_MO MO2 WHERE P2.EMPLID=MO2.EMPLID AND MO2.CAL_RUN_ID=$Ctl_Cal_Run_ID )
!AND P2.BIRTHPLACE IN ('unbekannt','Unbekannt','UNBEKANNT')
!end-select    



    ! -----------------------------------------------
    let $auditName='Prfg-2-1'
    let $AuditMsg='Kein Eintrag zur Versicherungsnummer.(PERS_NID)(kritisch)'

begin-select DISTINCT   
M1.EMPLID
    let $Emplid=&M1.EMPLID
    print $Emplid           (+1,{col1})
    print $AuditName            (,{col3})    
    print $AuditMsg        (,{col4})
FROM PS_GP_PYE_PRC_STAT M1
!adj- include messages for employees with missing National ID
WHERE EXISTS 
(SELECT 'X' FROM PS_PERS_NID N1 
WHERE N1.EMPLID=M1.EMPLID
AND N1.NATIONAL_ID = ' ')    
AND M1.CAL_RUN_ID=$Ctl_Cal_Run_ID
AND M1.CALC_TYPE='P'
end-select    



    ! -----------------------------------------------
    let $auditName='Prfg-2-2'
    let $AuditMsg='Kein Eintrag zur Nationalitaet.(NATIONALITY_GER)(kritisch)'
    ! -- ELIG_MO is a bad driver
begin-select DISTINCT   
MM1.EMPLID
    let $Emplid=&MM1.EMPLID
    print $Emplid           (+1,{col1})
    print $AuditName            (,{col3})    
    print $AuditMsg        (,{col4})
FROM PS_GP_PYE_PRC_STAT MM1
WHERE  MM1.CAL_RUN_ID=$Ctl_Cal_Run_ID
AND ( NOT EXISTS (SELECT 'X' FROM PS_NATIONALITY_GER NG1 WHERE NG1.EMPLID=MM1.EMPLID)    
      OR EXISTS (SELECT 'X' FROM PS_NATIONALITY_GER NG1 WHERE NG1.EMPLID=MM1.EMPLID AND NATION_CD = ' ')
     )
AND MM1.CALC_TYPE='P'
end-select    

end-procedure




!****************************************************************************************
begin-heading 14
    uppercase $ReportTitle
    uppercase $SubTitel
    #include 'stdhdgtr.sqc'
    
    print $ProtokName (+1,{col1})
    print '-' (+1,{col1},#ProtLength)  fill
    print 'Laufeinheit:' (+2,{col1})
    print $Ctl_Cal_Run_ID (,{col3})
    print $SubTitel (+2,{col1})
    print '=' (+1,{col1},#SubTitLength)  fill
    if ( $PageType='NEW' or $PageType='DEL')
        print 'Pers Nr'   (+2,{col1})
        print 'RCD'   (,{col2})
        print 'Datum'   (,{col3})
        print 'Meldetatbestand'   (,{col4})
        print '-----------' (+1,{col1})
        print '---' (,{col2})
        print '----------' (,{col3})
        print '-' (,{col4},40) fill
    else
        print 'Folgende Sachverhalte wurden festgestellt:'   (+2,{col1})    
    end-if
end-heading
!****************************************************************************************
begin-footing 2
print $VersionBez (+1,90)
end-footing
!**************************************************
begin-procedure Get_VersionNr
begin-select
VERS.GPDE_VERSION_NR
VERS.NAME
from PS_GPDE_VERSION VERS
end-select

let $VersionsNr = rtrim(&VERS.GPDE_VERSION_NR,' ')
let $Bezeichn   = rtrim(&VERS.NAME, ' ')
let $VersionBez = $Bezeichn || ' ' || $VersionsNr
end-procedure
!****************************************************************************************
begin-procedure Print_Data
 print $Empl_ID           (+1,{col1})
 DO Format-Number(#Empl_Rcd, $Empl_Rcd_1, '888')
 print $Empl_Rcd_1          (,{col2})
 do Format-DateTime($Eff_DT,$Eff_DT_1, {DEFDATE}, '', '')
 print $Eff_DT_1            (,{col3})
 print $Evt_Type_Desc     (,{col4})
end-procedure
!****************************************************************************************
begin-procedure Get_Evt_Type_Desc
let $Evt_Type_Desc = $Evt_Type
begin-select
EVTDFN.DESCR
  let $Evt_Type_Desc = $Evt_Type_Desc || ' - ' || rtrim(&EVTDFN.DESCR, ' ')
from PS_GPDE_DV_EVTDFN EVTDFN
where EVTDFN.GPDE_DV_EVT_TYPE = $Evt_Type
end-select
end-procedure
!****************************************************************************************
#include 'number.sqc'   ! routines for formatting numbers.
#include 'datetime.sqc' ! routines for formatting dates and times.
#include 'stdapi.sqc'   ! routines for process scheduler manipulation.
#include 'sqrtrans.sqc' ! routines for language translation.
#include 'readxlat.sqc' ! routines for xlat translation.
#include 'curdttim.sqc' ! get-current-datetime procedure
#include 'validdt.sqc'  ! validate date routine
#include 'datemath.sqc'  !function for date-calculation

