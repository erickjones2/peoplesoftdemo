!***********************************************************************
!  GPBRDE02:  Family Allowance                                         *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2015/08/07:15:08:58                                 *
!       $Release:  HR92                                                *
!      $Revision:  103                                                 *
!                                                                      *
!***********************************************************************

#define C01    1
#define C02    2

#define G1     1
#define G2     3

#define L05    5
#define L12   12
#define L28   28
#define L38   38
#define L40   40
#define L50   50
#define L53   53
#define L56   56
#define l68   68
#define l76   76
#define l84   84
#define l85   85
#define l96   96
#define l95   95
#define L105 105
#define L112 112
#define L120 120
#define L124 124
#define L125 125
#define L140 140
#define L150 150
#define L152 152
#define L155 155
#define L157 157
#define L164 164
#define L168 168
#define L170 170

#include 'setenv.sqc'   ! set enviroment

Begin-Setup
 #include 'setupdb.sqc'
 Declare-Printer   THIS_REPORT
       Type=HPLASERJET
       Font=2
       Point-Size=12
       Pitch=17
       Symbol-Set=0U     ! ASCII symbol set
 End-Declare

 Declare-Layout THIS_REPORT
      Orientation=Landscape
      Top-Margin= .3
      Left-Margin=.50
      Max-Lines=58
      Max-Columns=177
      Char-Width=4.3    ! 7.2
      Line-Height=9     ! 72/printer_point-size
 End-Declare

 Declare-Report THIS_REPORT
       Printer-Type=HPLASERJET
       LayOut=THIS_REPORT
 End-Declare

end-Setup

!**************************************
begin-heading 16
!**************************************
  Graphic (#r0  ,{C01} ,{L170}) box  3  {G2}

  Graphic (#r1b  ,{C01} ,{L170}) box 12 {G2}
  Graphic (#r1b  ,{C01} ,{L150}) box  3 {G1}
  Graphic (#r1b  ,{C01} ,{L170}) box  3 {G1}
  Graphic (#r1b  ,{C01} ,{L170}) box  6 {G1}
  Graphic (#r1b  ,{C01} ,{L170}) box  9 {G1}
  Graphic (#r2b  ,{C01} ,{l85})  box  9 {G1}
  Graphic (#r2b  ,{C01} ,{L40})  box  3 {G1}
  Graphic (#r2b  ,{C01} ,{L50})  box  3 {G1}
  Graphic (#r2b  ,{C01} ,{L120}) box  9 {G1}
  Graphic (#r2b  ,{C01} ,{L150}) box  9 {G1}
  Graphic (#r2b  ,{C01} ,{L170}) box  3 {G1}
  Graphic (#r2b  ,{C01} ,{L157}) box  3 {G1}
  Graphic (#r4b  ,{C01} ,{L40})  box  3 {G1}
  Graphic (#r4b  ,{C01} ,{L50})  box  3 {G1}
  Graphic (#r4b  ,{C01} ,{L157}) box  3 {G1}

  uppercase $EstabidDescr
  uppercase $EstabIDAddress1
  uppercase $CompanyAdd2
  uppercase $CompanyAdd4
  uppercase $CompanyCity
  uppercase $Name
  uppercase $Address1
  uppercase $Address2
  uppercase $Address4
  uppercase $City
  uppercase $Name

  Alter-Printer Point-size = #SizeGrd  Font-Type = Proportional Font = #FontStd
  Print 'Ficha de Salário Familia'     (#r0a , )  center Bold
  Alter-Printer Point-size = #SizeSml  Font-Type = Proportional Font = #FontStd
  Print 'Emplid:'                      (#r0  ,150)
  Print $Emplid                        (#r0  ,160)   Bold
  Print 'Relatorio:'                   (#r0a ,3)
  Print $ReportID                      (#r0a ,+3)
  Print 'Página:'                      (#r0a ,150)
  page-number                          (#r0a ,160)
  Print 'Data:'                        (#r1  ,150)

  #debug show '$AsOfToday ' $AsOfToday


  Let $Today = '           '
  Do Format-DateTime($AsOfToday, $Today,{DEFDMY}, '','')
  #debug show '2 $Today ' $Today

  Print $Today                         (#r1  ,160)

  Print 'Empregador'                   (#r1b ,  3)
  Print 'CNPJ'                         (#r1b ,153)

  Print 'Logradouro'                   (#r2b ,  3)
  Print 'Número'                       (#r2b , 43)
  Print 'Complemento'                  (#r2b , 53)
  Print 'Bairro'                       (#r2b , 88)
  Print 'Cidade'                       (#r2b ,123)
  Print 'UF'                           (#r2b ,153)
  Print 'CEP'                          (#r2b ,160)

  Print 'Empregado'                    (#r3b ,  3)
  Print 'CTPS n. série'                (#r3b , 88)
  Print 'Data de admissão'             (#r3b ,123)
  Print 'Data de desligamento'         (#r3b ,153)

  Print 'Logradouro'                   (#r4b ,  3)
  Print 'Número'                       (#r4b , 43)
  Print 'Complemento'                  (#r4b , 53)
  Print 'Bairro'                       (#r4b , 88)
  Print 'Cidade'                          (#r4b ,123)
  Print 'UF'                           (#r4b ,153)
  Print 'CEP'                          (#r4b ,160)

  Alter-Printer Point-size = #SizeSml  Font-Type = Proportional Font = #FontStd
  Print $EstabidDescr                     (#r2a ,  3)  Bold
  Print $CNPJ                          (#r2a ,153)  Bold

  Print $EstabIDAddress1                   (#r3a ,  3,33) Bold
  Print $Num1            (#r3a , 43)    Bold
  Print $CompanyAdd2     (#r3a , 53,28) Bold
  Print $CompanyAdd4     (#r3a , 88,35) Bold
  Print $CompanyCity     (#r3a ,123)    Bold
  Print $CompanyState    (#r3a ,153)    Bold
  Print $CompanyPostal   (#r3a ,160)    Bold

  Print $Name            (#r4a ,  3)    Bold

  Let $CTPSNbr = $CTPS || ' - ' || $CTPSSerie
  Let $CTPSNbr = Rtrim($CTPSNbr, '- ')
  Print $CTPSNbr         (#r4a , 88)    Bold

  Print $ServiceDt       (#r4a ,123)    Bold
  Print $TerminationDt   (#r4a ,153)    Bold
  Print $Address1        (#r5a ,  3,33) Bold
  Print $Num             (#r5a , 43)    Bold
  Print $Address2        (#r5a , 53,8)  Bold
  Print $Address4        (#r5a , 88,35) Bold
  Print $City            (#r5a ,123)    Bold
  Print $State           (#r5a ,153)    Bold
  Print $Postal          (#r5a ,160)    Bold

end-heading

!**************************************
begin-report
#debug show '** Report **'
!**************************************
  let #FontStd  =  1      !12arial 3curier
  let #SizeGrd  = 10
  let #SizeStd  = 8
  let #SizeSml  = 6
  do Init-Report
  do Process-Main
  do Stdapi-Term
  do Reset
end-report

!**************************************
begin-procedure Init-Report
#debug show '** Init Report **'
!**************************************
  move '2' to $ReportDateType   ! Set for date to format as DMY
  move '1' to $ReportYear4      ! Set for year to be formatted YYYY
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  move 'GPBRDE02' to $ReportID
  move 'Ficha de Salário Familia' to $ReportTitle
  move 'v.2015-D' to $ReportVersion
  display $ReportID
  display $ReportTitle
  display $ReportVersion
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display $AsOfToday
  display &timeBegan
end-procedure Init-Report

!**************************************
begin-procedure Process-Main
#debug show '** Process-Main **'
!**************************************
  Do Select-Parameters

  Let $SecurityClauseWithoutERN = ''
  Let $_TableAlias = 'A'
  Do Security-Param

  If $Condicion01 <> ''
     Do Define-Array-Dependents
     Do Define-Array-Salary
     Do Declare-Rows
     Do Select-Employee-Data
  else
     show 'Run Cntrl Missing'
  end-if

end-procedure Process-Main

!**************************************
begin-procedure Select-Parameters
#debug show '** Select-Parameters ***'
!**************************************
Let #PinFamlyNum  = 0
Let $Condicion1   = ''
Let $Condicion2   = ''

begin-select
RC.GP_PAYGROUP
RC.GB_GROUP_ID
RC.BEGIN_DT
RC.END_DT
RC.GPBR_LIST_OPTION
RC.GPBR_PIN_FAMLY_NUM

  Let #PinFamlyNum = &RC.GPBR_PIN_FAMLY_NUM
  Let $ListOption  = Rtrim(&RC.GPBR_LIST_OPTION, ' ')
  Let $Paygroup    = Rtrim(&RC.GP_PAYGROUP, ' ')
  Let $GroupID     = Rtrim(&RC.GB_GROUP_ID, ' ')
  Let $BeginDt     = Rtrim(&RC.BEGIN_DT, ' ')
  Let $EndDt       = Rtrim(&RC.END_DT, ' ')

  if $BeginDt <> ''
     Do convert-to-dtu-date(&RC.BEGIN_DT, $BeginDt)
     Do convert-from-dtu-date($BeginDt, $BeginDt)
     Let $Condicion01 = $Condicion01 || ' AND A.EFFDT >= ' || '''' || $BeginDt || ''''
  end-if
  if $EndDt   <> ''
     Do convert-to-dtu-date(&RC.END_DT, $EndDt)
     Do convert-from-dtu-date($EndDt, $EndDt)
     Let $Condicion01 = $Condicion01 || ' AND A.EFFDT <= ' || '''' || $EndDt   || ''''
  end-if

   Evaluate $ListOption
   when = '3'
        Let $Condicion01 = $Condicion01 || ' AND A.EMPLID IN ( SELECT EE.EMPLID FROM PS_GPBR_RC_DEP_EE EE'
        Let $Condicion02 = ' WHERE EE.OPRID = '   || '''' || $prcs_oprid || ''''
        Let $Condicion02 = $Condicion02 || ' AND EE.RUN_CNTL_ID  = ' || '''' ||  $prcs_run_cntl_id || '''' || ') '
   when = '4'
        Let $Condicion01 = $Condicion01 || ' AND A.EMPLID IN (SELECT GR.EMPLID FROM  PS_GB_GRP_RES_TBL GR '
        Let $Condicion01 = $Condicion01 || ' WHERE GR.GB_GROUP_ID = ' || '''' || $GroupID  || ''''
        Let $Condicion02 = ' AND GR.VERSIONGBQDM = (SELECT MAX(G.VERSIONGBQDM) FROM '
        LET $Condicion02 = $Condicion02 || ' PS_GB_GRP_RES_TBL G WHERE G.GB_GROUP_ID = GR.GB_GROUP_ID)) '
   when = '5'
        Let $Condicion01 = $Condicion01 || ' AND A.GP_PAYGROUP = ' || '''' || $Paygroup || ''''
   End-Evaluate

 FROM  PS_GPBR_RC_DEPEND RC
 WHERE RC.OPRID  = $prcs_oprid
 AND   RC.RUN_CNTL_ID = $prcs_run_cntl_id
 end-select
end-procedure Select-Parameters

!**************************************
begin-procedure Define-Array-Dependents
#debug show '** Define-Array-Dependents **'
!**************************************
    Create-array name=Dependents size=1000 -
    Field=Emplid:Char
    Field=Sequence:Char
    Field=DepntName:Char
    Field=DepntRel:Char
    Field=BirthDate:Char
    Field=BirthPlace:Char
    Field=DepBirthLoc:Char
    Field=DepCert:Char
    Field=DepRegistry:Char
    Field=DepPage:Char
    Field=DepRecDate:Char
    Field=DepTermDate:Char

end-procedure Define-Array-Dependents

!**************************************
begin-procedure Define-Array-Salary
#debug show '** Define-Array-Salary **'
!**************************************
    Create-array name=Salary size=1000 -
    Field=Emplid:Char
    Field=SalSequence:Char
    Field=SalEffdt:Char
    Field=SalAmount:Number

end-procedure Define-Array-Salary

!**************************************
begin-procedure Select-Establishment
#debug show '** Select-Establishment **'
#debug show '   $Estabid: ' $Estabid
!**************************************
Begin-Select
E.DESCR
E.ADDRESS1
E.ADDRESS2
E.ADDRESS4
E.CITY
E.STATE
E.POSTAL
E.NUM1

  Do Select-Estab-Id
  Let $EstabidDescr     = Ltrim(Rtrim(&E.DESCR, ' '), ' ')
  Let $Num1          = Ltrim(Rtrim(&E.NUM1, ' '), ' ')
  Let $EstabIDAddress1   = Ltrim(Rtrim(&E.ADDRESS1, ' '), ' ')
  Let $CompanyPostal = Ltrim(Rtrim(&E.POSTAL, ' '), ' ')
  Let $CompanyState  = Ltrim(Rtrim(&E.STATE, ' '), ' ')
  Let $CompanyAdd2   = Ltrim(Rtrim(&E.ADDRESS2, ' '), ' ')
  Let $CompanyAdd4   = Ltrim(Rtrim(&E.ADDRESS4, ' '), ' ')
  Let $CompanyCity   = Ltrim(Rtrim(&E.CITY, ' '), ' ')

FROM PS_ESTAB_TBL E
WHERE E.ESTABID = $Estabid
AND   E.EFFDT = (SELECT MAX(EFFDT)
                 FROM PS_ESTAB_TBL
                 WHERE ESTABID = E.ESTABID
                 AND   EFFDT <= $Effdt
                 AND   EFF_STATUS = 'A')
End-Select

#debug show '    $curr_languagecd: ' $curr_language_cd
BEGIN-Select
EE.DESCR

  Let $EstabidDescr   = Ltrim(Rtrim(&EE.DESCR, ' '), ' ')

FROM PS_ESTAB_TBL_LANG EE
WHERE EE.ESTABID = $Estabid
AND   EE.LANGUAGE_CD = $curr_language_cd
AND   EE.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_ESTAB_TBL_LANG
                  WHERE ESTABID = EE.ESTABID
                  AND   LANGUAGE_CD = EE.LANGUAGE_CD
                  AND   EFFDT <= $Effdt)
End-Select


!--- Get Option Name for Legal Reports
Begin-Select
LO.LEGAL_ENT_TYPE_BRA
LC.COMPANY

    Let $LegNameOpt = Rtrim(&LO.LEGAL_ENT_TYPE_BRA, ' ')
    Let $LegNameCia = Rtrim(&LC.COMPANY, ' ')

FROM PS_ESTAB_TBL_BRA LO,
PS_ESTAB_TBL LC
WHERE LO.ESTABID = $Estabid
AND   LO.EFFDT = (SELECT MAX(EFFDT)
                  FROM PS_ESTAB_TBL
                  WHERE ESTABID = LO.ESTABID
                  AND   EFFDT <= $Effdt
                  AND   EFF_STATUS = 'A')
AND LC.ESTABID = LO.ESTABID
AND LC.EFFDT = LC.EFFDT
End-Select

#debug Show '    $LegNameOpt : ' $LegNameOpt
#debug Show '    $LegNameCia : ' $LegNameCia


If $LegNameOpt = 'COM'
!-Get Company Description
Begin-Select
C.DESCR

    Let $LegNameDescr = Rtrim(&C.DESCR, ' ')

FROM PS_COMPANY_TBL C
WHERE C.COMPANY = $LegNameCia
AND   C.EFFDT = (SELECT MAX(CD.EFFDT)
               FROM PS_COMPANY_TBL CD
               WHERE CD.COMPANY = C.COMPANY
               AND   CD.EFFDT <= $Effdt
               AND   CD.EFF_STATUS = 'A')
End-Select
  #debug Show '    $LegNameDescr : ' $LegNameDescr
  Let $EstabidDescr   = $LegNameDescr
End-If

Do CleanString($EstabidDescr, $EstabidDescr)

End-Procedure Select-Establishment

!**************************************
begin-procedure Select-Estab-Id
#debug show '** Select-Estab-Id **'
!**************************************
Let $CNPJ = ''

Begin-Select
A.ESTAB_ID_TYPE_BRA
A.ESTAB_ID_BRA

  Let $EstabIdType = rtrim(&A.ESTAB_ID_TYPE_BRA, ' ')

  Evaluate $EstabIdType
  when = 'CNPJ'
       Let $CNPJ = Rtrim(&A.ESTAB_ID_BRA, ' ' )
  when = 'CNAE'
       Let #CNAE = &A.ESTAB_ID_BRA
       Let $CNAE = Edit(#CNAE, '00000')
  End-Evaluate

FROM  PS_ESTAB_ID_BRA A
     ,PS_ESTAB_TBL_BRA A2
WHERE A.ESTABID = $EstabId
AND   A.ESTABID = A2.ESTABID
AND   A.COUNTRY = 'BRA'
AND   A.COUNTY_CD_BRA  = A2.COUNTY_CD_BRA
AND   A.EFFDT = A2.EFFDT
End-Select

If $CNPJ = ''
Begin-Select
D.ESTAB_ID_BRA

    Let $CNPJ = Rtrim(&D.ESTAB_ID_BRA, ' ' )

FROM PS_ESTAB_ID_BRA D
WHERE D.ESTABID =
    (SELECT E.ESTAB_ASOC_BRA
    FROM PS_ESTAB_TBL_BRA E
    WHERE E.ESTABID = $EstabId
    AND E.EFFDT     =
        (SELECT MAX(E2.EFFDT)
        FROM PS_ESTAB_TBL_BRA E2
        WHERE E2.ESTABID = E.ESTABID
        AND E2.EFFDT    <= $Effdt
        )
    )
AND D.ESTAB_ID_TYPE_BRA = 'CNPJ'
AND D.EFFDT             =
    (SELECT MAX(E3.EFFDT)
    FROM PS_ESTAB_ID_BRA E3
    WHERE E3.ESTABID         = D.ESTABID
    AND E3.ESTAB_ID_TYPE_BRA = D.ESTAB_ID_TYPE_BRA
    AND E3.EFFDT            <= $Effdt
    )
End-Select


End-If
End-Procedure Select-Estab-Id


!**************************************
begin-procedure Select-Employee-Data
#debug show '** Select-Employee-Data **'
!**************************************
#debug Show '    Security Clause:  ' $SecurityClauseWithoutERN
#debug Show '    Select Condition: ' $Condicion01
#debug Show '                      ' $Condicion02

Do convert-to-dtu-date($AsOfToday, $CurrentDate)
Do Convert-From-DTU-Date ($CurrentDate, $CurrentDate)
#debug Show '$CurrentDate  :' $CurrentDate

Begin-Select
A.EMPLID
A.EMPL_RCD
A.EFFDT
A.COMPANY
A.GP_PAYGROUP
A.ACTION
A.ACTION_REASON
C.NAME_DISPLAY
F.SERVICE_DT
F.TERMINATION_DT
A.ESTABID
A.DEPTID

  Let #Sequence     = 0
  Let $Company      = Rtrim(&A.COMPANY, ' ')
  Let $Estabid      = Rtrim(&A.ESTABID, ' ')
  Let $Emplid       = Rtrim(&A.EMPLID, ' ')
  Let #Empl_Rcd     = &A.EMPL_RCD

  if $Estabid = ''
     show 'Estabid is blank'
  end-if
  Let $Paygroup     = &A.GP_PAYGROUP
  Let $Name         = Rtrim(&C.NAME_DISPLAY, ' ')
  Let $Action       = Rtrim(&A.ACTION, ' ')
  Let $ActionReason = Rtrim(&A.ACTION_REASON, ' ')
  Let $ServiceDt    = Rtrim(&F.SERVICE_DT, ' ')
  Let $Effdt        = &A.EFFDT
  Let $terminationDt = &F.TERMINATION_DT

  #debug show '    #Sequence        :'    #Sequence
  #debug show '    $Company         :'    $Company
  #debug show '    $Estabid         :'    $Estabid
  #debug show '    $Emplid          :'    $Emplid
  #debug show '    #Empl_Rcd        :'    #Empl_Rcd
  #debug show '    $Paygroup        :'    $Paygroup
  #debug show '    $Name            :'    $Name
  #debug show '    $Action          :'    $Action
  #debug show '    $ActionReason    :'    $ActionReason
  #debug show '    $ServiceDt       :'    $ServiceDt
  #debug show '    $Effdt           :'    $Effdt
  #debug show '    $terminationDt   :'    $terminationDt



  if $terminationDt <> ''
     Let $terminationDt = '           '
     Do Format-DateTime(&F.TERMINATION_DT,$terminationDt,{DEFDMY}, '','')
  end-if


  if $ServiceDt <> ''
       Let $ServiceDt = '           '
       Do Format-DateTime(&F.SERVICE_DT,$ServiceDt,{DEFDMY}, '','')
  end-if

  If $Action = 'TER'
     if $ActionReason = 'DEA'
        Let $FamAllowTerm = '30'
     else
        Let $FamAllowTerm = '70'
     End-If
     Do Search-Dependents01
  else
     Do Search-Dependents02
  End-if

  Do Select-Establishment
  Do Select-Address
  Do Select-Person-Data
  Do Select-National-Id
  Let $FoundInWA   = ''
  Do Select-Dependents
  Do Get-Current-DateTime
  If #CountD > 0
     Let #TotalEmpl    = #TotalEmpl + 1
     #debug show ' $Emplid          :'    $Emplid
     #debug show ' #Empl_Rcd        :'    #Empl_Rcd
     #debug show ' $FoundInWA       : ' $FoundInWA
     If $FoundInWA   = 'Y'
        #Debug Show 'Use Writable Array to Retrive Family Allowance Amount'

        Do GetWA_Amount

     Else
        #Debug Show 'Use Manual Calculation to Retrive Family Allowance Amount'
        #debug show ' $Emplid          :'    $Emplid
        #debug show ' #Empl_Rcd        :'    #Empl_Rcd
        #debug show ' #CountD          :'    #CountD

        !Get Monthly compensation
        Let #MonthlyCompRate = 0
        Do GetMonthlyPayRate
        #debug show ' #MonthlyCompRate :'    #MonthlyCompRate
        #debug show ' $Empl_EffDt      :'    $Empl_EffDt

        !Check in Bracket the amount for Family Allowance
        Do Get_Bracket_FamAllowance
        #debug show ' #FamAmount       :'    #FamAmount
        Let #TotFamAmount = #FamAmount * #CountD
        #debug show ' #TotFamAmount    :'    #TotFamAmount

        !Get Total amout of Family Allowance
        Let #CountS   = 1
        Let #TotalSal = 1
        Let $SalSequence = Edit(#CountS, '000')
        Do Format-DateTime($Empl_EffDt, $SalEffdt,{DEFDMY}, '','')
        Let #SalAmount = #TotFamAmount

        put $Emplid $SalSequence $SalEffdt #SalAmount
        into Salary(#CountS) Emplid SalSequence SalEffdt SalAmount

     End-If
     !Do Select-Family-Allowance
     Do Print-Dependents
     Do Print-Family-Allowance
  End-if

FROM PS_JOB A
    ,PS_JOB_JR B
    ,PS_PERSON_NAME C
    ,PS_EMPLOYMENT F
!    ,PS_FAST_SQR_SEC_VW SCRTY

WHERE A.EMPLID  = B.EMPLID
AND A.EMPLID    = C.EMPLID
AND A.EMPLID    = F.EMPLID
AND A.EFFDT     = (SELECT MAX(AA.EFFDT)
                  FROM PS_JOB AA
                  WHERE A.EMPLID = AA.EMPLID )
!                  AND   A.EMPL_RCD = AA.EMPL_RCD)
AND A.EFFDT     = B.EFFDT
AND A.EMPL_RCD  = B.EMPL_RCD
AND A.EMPL_RCD  = F.EMPL_RCD
AND A.EFFSEQ    = B.EFFSEQ
AND A.EFFSEQ  = (SELECT MAX(AA.EFFSEQ)
                 FROM PS_JOB AA
                  WHERE A.EMPLID = AA.EMPLID
                  AND   A.EMPL_RCD = AA.EMPL_RCD
                  AND   A.EFFDT  = AA.EFFDT)
AND A.JOB_INDICATOR = 'P'
AND A.EMPL_STATUS = 'A'
!AND A.EMPLID = SCRTY.EMPLID
!AND A.EMPL_RCD = SCRTY.EMPL_RCD
![$SecurityClause]
![$SecurityClauseWithoutERN]
[$Condicion01]
[$Condicion02]
ORDER BY A.COMPANY, A.ESTABID, A.DEPTID ,A.EMPLID
End-Select
End-Procedure Select-Employee-Data

!**************************************
begin-procedure GetMonthlyPayRate
#debug show '** GetMonthlyPayRate **'
#debug show ' $AsOfToday   :'    $AsOfToday
!**************************************

Begin-Select
ER.EFFDT
ER.COMP_RATECD
ER.COMPRATE
ER.COMP_FREQUENCY
ERJOB.STD_HOURS
ERJOB.STD_HRS_FREQUENCY

    Let $Empl_EffDt = Rtrim(&ER.EFFDT, ' ')
    Let $Empl_RateCode = Rtrim(&ER.COMP_RATECD, ' ')
    Let #Empl_CompRate = &ER.COMPRATE
    Let $Empl_RCFreq   = Rtrim(&ER.COMP_FREQUENCY, ' ')
    Let #STD_Hours     = &ERJOB.STD_HOURS
    Let $STD_Hrs_Freq  = Rtrim(&ERJOB.STD_HRS_FREQUENCY, ' ')

    #debug show ' $Empl_RateCode :'    $Empl_RateCode
    #debug show ' #Empl_CompRate :'    #Empl_CompRate
    #debug show ' $Empl_RCFreq   :'    $Empl_RCFreq
    #debug show ' #STD_Hours     :'    #STD_Hours
    #debug show ' $STD_Hrs_Freq  :'    $STD_Hrs_Freq

    Do ConvertFreq(#Empl_CompRate, $Empl_RCFreq, 'M', $AsOfToday, #MonthlyCompRate, #STD_Hours, $STD_Hrs_Freq)

FROM PS_COMPENSATION ER
, PS_JOB ERJOB
WHERE ER.EMPLID  = $Emplid
AND ER.EMPL_RCD  = #Empl_Rcd
AND ER.EFFDT = (SELECT MAX(ER2.EFFDT)
                FROM PS_COMPENSATION ER2
                WHERE ER2.EMPLID = ER.EMPLID
                AND ER2.EFFDT <= $AsOfToday)
AND ERJOB.EMPLID = ER.EMPLID
AND ERJOB.EMPL_RCD = ER.EMPL_RCD
AND ERJOB.EFFDT = ER.EFFDT
AND ERJOB.EFFSEQ = ER.EFFSEQ
End-Select
End-Procedure GetMonthlyPayRate

!**************************************************************************************
Begin-Procedure ConvertFreq(#Amount, $FreqOri, $FreqDes, $CvDate, :#Result, #STDH, $WP)
!**************************************************************************************
! Description of Parameters
! #Amount  - Input Amount
! $FreqOri - Frequency of Input Amount
! $FreqDes - Frequency Destination
! $DvDate  - Effective date for conversions
! #Result  - Amount converted
! #STDH    - Standar Hours only need it if use Target Frequency in Hours
! $WP      - Work Period only need it if use Target Frequency in Hours
#debugx show 'Procedure: ConvertFreq'
!**************************************************************************************
Let #FactOrig = 0
Let #FactDes  = 0
Let #Result   = 0

If $FreqOri = 'H'
    !Convert To WorkPeriod
    Let #Amount = #Amount * #STDH
    Let $FreqOri = $WP
End-If

If $FreqDes = 'H'
    !Replace $FreqDes to WorkPeriod
    Let $FreqDes = $WP
End-If

!Get Frequency Factors
Begin-Select
F.FREQUENCY_ID
F.FREQ_ANNUAL_FACTOR
    If Rtrim(&F.FREQUENCY_ID, ' ') = $FreqOri
        Let #FactOrig = &F.FREQ_ANNUAL_FACTOR
    End-If
    If Rtrim(&F.FREQUENCY_ID, ' ') = $FreqDes
        Let #FactDes = &F.FREQ_ANNUAL_FACTOR
    End-If
FROM PS_FREQUENCY_TBL F
WHERE F.FREQUENCY_ID IN ($FreqOri, $FreqDes)
AND F.EFF_STATUS = 'A'
AND F.EFFDT = (SELECT MAX(F2.EFFDT)
        FROM PS_FREQUENCY_TBL F2
        WHERE F2.FREQUENCY_ID = F.FREQUENCY_ID
        AND F2.EFF_STATUS = F.EFF_STATUS
        AND F2.EFFDT <= $CvDate)
End-Select
If $FreqOri <> $FreqDes
    If $FreqOri = 'A' and #FactOrig <> 0
        !De-Annualize
        Let #Result = #Amount / #FactOrig
    End-If
    If $FreqDes = 'A'
        !Annualize
        Let #Result = #Amount * #FactOrig
    End-If
    If $FreqOri <> 'A' And $FreqDes <> 'A' and #FactDes <> 0
        !First Annualize and Then De-Annualize
        Let #Result = (#Amount * #FactOrig) / #FactDes
    End-If
Else
  !Same Frequency
  Let #Result = #Amount
End-If
If $FreqDes = 'H'
    !Return to Hours
    Let #Result = #Result / #STDH
End-If
End-Procedure ConvertFreq


!**************************************
begin-procedure Select-Person-Data
#debug show '** Select-Person-Data **'
!**************************************
Begin-Select
G.CTPS_SERIES_BRA

  Let $CTPSSerie    = Rtrim(&G.CTPS_SERIES_BRA, ' ')

FROM PS_PERSON_BRA G
WHERE G.EMPLID = $Emplid
End-Select
End-Procedure Select-Person-Data

!**************************************
begin-procedure Select-Address
#debug show '** Select-Address **'
!**************************************
Let $Address1 = ''
Let $Address2 = ''
Let $Num      = ''

Begin-Select
B1.ADDRESS1
B1.ADDRESS2
B1.ADDRESS3
B1.ADDRESS4
B1.CITY
B1.NUM1
B1.STATE
B1.POSTAL

  Let $Address1 = Rtrim(&B1.ADDRESS1,' ')    !Street
  Let $Address2 = Rtrim(&B1.ADDRESS2,' ')    !Complement
  Let $Address4 = Rtrim(&B1.ADDRESS4,' ')    !Neihgborhood
  Let $City     = Rtrim(&B1.CITY,' ')        !City
  Let $Num      = Rtrim(&B1.NUM1,' ')        !Number
  Let $Postal   = Rtrim(&B1.POSTAL,' ')      !Postal
  Let $State    = Rtrim(&B1.STATE, ' ')      !State

FROM PS_ADDRESSES B1
WHERE B1.EMPLID  = $Emplid
AND   B1.EFFDT   = (SELECT MAX(BB.EFFDT)
                   FROM PS_ADDRESSES BB
                   WHERE B1.EMPLID = BB.EMPLID)
End-Select
End-Procedure Select-Address

!**************************************
begin-procedure Evaluate-Xlat
#debug show '* Evaluate-Xlat *'
!**************************************
Let $XlatDescr = ''

Begin-Select
XX.XLATLONGNAME

  Let $XlatDescr = Rtrim(&XX.XLATLONGNAME,' ')

FROM XLATTABLE_VW XX
WHERE XX.FIELDNAME  = $XlatField
AND   XX.FIELDVALUE = $XlatValue
End-Select

Begin-Select
XL.XLATLONGNAME

  Let $XlatDescr = Rtrim(&XL.XLATLONGNAME,' ')

FROM XLATTABLE_LNG XL
WHERE XL.FIELDNAME  = $XlatField
AND   XL.FIELDVALUE = $XlatValue
AND   XL.LANGUAGE_CD = $curr_language_cd
End-Select
End-Procedure Evaluate-Xlat

!**************************************
begin-procedure Search-Dependents01
#debug show '** Search-Dependents01 **'
#debug show '   $Effdt :       ' $Effdt
#debug show '   $FamAllowTerm: ' $FamAllowTerm
!**************************************
Begin-SELECT
S1A.EMPLID
S1A.DEPENDENT_BENEF
S1A.STUDENT_BRA
S1A.EDUCATION_LVL_BRA
S1A.EDUCATION_IND_BRA
S1A.VACCINE_CERT_BRA
S1A.DISABLED_BRA
S1A.FAM_TERM_DT_BRA


  Let $InsDependent                    = Rtrim(&S1A.DEPENDENT_BENEF, ' ')
  Let #InsStudent                      = &S1A.STUDENT_BRA
  Let $InsEducLvl                      = Rtrim(&S1A.EDUCATION_LVL_BRA, ' ')
  Let #InsEducInd                      = &S1A.EDUCATION_IND_BRA
  Let #InsVaccine                      = &S1A.VACCINE_CERT_BRA
  Let #InsDisabled                     = &S1A.DISABLED_BRA
  Let $InsTermDt                       = Rtrim(&S1A.FAM_TERM_DT_BRA, ' ')

  if $InsTermDt = ''
     Do convert-to-dtu-date($InsTermDt, $InsTermDt)
     Do Insert-Dependents01
  end-if

FROM PS_DEP_BEN_EFF_BRA S1A
WHERE S1A.EMPLID = $Emplid
AND S1A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_DEP_BEN_EFF_BRA B
             WHERE S1A.EMPLID = B.EMPLID
             AND   S1A.DEPENDENT_BENEF = B.DEPENDENT_BENEF)
AND S1A.EFFDT <= $Effdt
End-SELECT
End-Procedure Search-Dependents01

!**************************************
begin-procedure Insert-Dependents01
#debug show '** Insert-Dependents01 **'
#debug show '   $Effdt :       ' $Effdt
#debug show '   $FamAllowTerm: ' $FamAllowTerm
!**************************************

#Debug Show '$Emplid         :' $Emplid
#Debug Show '$InsDependent   :' $InsDependent
#Debug Show '$Effdt          :' $Effdt
#Debug Show '#InsStudent     :' #InsStudent
#Debug Show '$InsEducLvl     :' $InsEducLvl
#Debug Show '#InsEducInd     :' #InsEducInd
#Debug Show '#InsVaccine     :' #InsVaccine
#Debug Show '#InsDisabled    :' #InsDisabled
#Debug Show '$FamAllowTerm   :' $FamAllowTerm
#Debug Show '$Effdt          :' $Effdt

Begin-SQL
INSERT INTO PS_DEP_BEN_EFF_BRA
(EMPLID
,DEPENDENT_BENEF
,EFFDT
,STUDENT_BRA
,EDUCATION_LVL_BRA
,EDUCATION_IND_BRA
,VACCINE_CERT_BRA
,DISABLED_BRA
,FAM_ALLOW_TERM_BRA
,FAM_TERM_DT_BRA)
VALUES
($Emplid
,$InsDependent
,$Effdt
,#InsStudent
,$InsEducLvl
,#InsEducInd
,#InsVaccine
,#InsDisabled
,$FamAllowTerm
,$Effdt
)
End-SQL
End-Procedure Insert-Dependents01

!**************************************
begin-procedure Search-Dependents02
#debug show '** Search-Dependents02 **'
!**************************************
Begin-SELECT
A1.DEPENDENT_BENEF
WA.PAYMENT_DT
A1.STUDENT_BRA
A1.EDUCATION_LVL_BRA
A1.EDUCATION_IND_BRA
A1.VACCINE_CERT_BRA
A1.DISABLED_BRA
WA.FAM_ALLOW_TERM_BRA
WA.FAM_TERM_DT_BRA

  Let $InsDependent                    = Rtrim(&A1.DEPENDENT_BENEF, ' ')
  Let $InsPaymentDt                    = &WA.PAYMENT_DT
  Let #InsStudent                      = &A1.STUDENT_BRA
  Let $InsEducLvl                      = Rtrim(&A1.EDUCATION_LVL_BRA, ' ')
  Let #InsEducInd                      = &A1.EDUCATION_IND_BRA
  Let #InsVaccine                      = &A1.VACCINE_CERT_BRA
  Let #InsDisabled                     = &A1.DISABLED_BRA
  Let $InsTerm                         = &WA.FAM_ALLOW_TERM_BRA
  Let $InsTermDt                       = Rtrim(&WA.FAM_TERM_DT_BRA, ' ')

  #Debug show '       $InsDependent  :'   $InsDependent
  #Debug show '       $InsPaymentDt  :'   $InsPaymentDt
  #Debug show '       #InsStudent    :'   #InsStudent
  #Debug show '       $InsEducLvl    :'   $InsEducLvl
  #Debug show '       #InsEducInd    :'   #InsEducInd
  #Debug show '       #InsVaccine    :'   #InsVaccine
  #Debug show '       #InsDisabled   :'   #InsDisabled
  #Debug show '       $InsTerm       :'   $InsTerm
  #Debug show '       $InsTermDt     :'   $InsTermDt

  if $InsTermDt <> '' and
     $InsTerm   <> ''
     Do convert-to-dtu-date(&WA.FAM_TERM_DT_BRA, $InsTermDt)
     Do convert-to-dtu-date(&WA.PAYMENT_DT, $InsPaymentDt)
     Do convert-from-dtu-date($InsTermDt, $InsTermDt)
     Do convert-from-dtu-date($InsPaymentDt, $InsPaymentDt)
     Do Insert-Dependents02
  end-if

FROM PS_DEP_BEN_EFF_BRA A1
    ,PS_GPBR_DEPEND_WA WA
WHERE A1.EMPLID    = $Emplid
AND A1.EMPLID      = WA.EMPLID
AND A1.DEPENDENT_BENEF = WA.DEPENDENT_BENEF
AND A1.EFFDT       = (SELECT MAX(B.EFFDT) FROM PS_DEP_BEN_EFF_BRA B
                     WHERE A1.EMPLID = B.EMPLID
                     AND   A1.DEPENDENT_BENEF = B.DEPENDENT_BENEF)
AND WA.PAYMENT_DT = (SELECT MAX(W.PAYMENT_DT)
                     FROM PS_GPBR_DEPEND_WA W
                     WHERE W.EMPLID = WA.EMPLID
                     AND W.DEPENDENT_BENEF = WA.DEPENDENT_BENEF
                     AND W.GPBR_FAM_ALLOW_IND = 1)
AND A1.EFFDT <  WA.PAYMENT_DT
AND A1.FAM_TERM_DT_BRA IS NULL
AND WA.FAM_TERM_DT_BRA IS NOT NULL
AND WA.GPBR_FAM_ALLOW_IND  = 1
End-Select
End-Procedure Search-Dependents02

!**************************************
begin-procedure Insert-Dependents02
#debug show '** Insert-Dependents02 **'
!**************************************


#Debug Show '$Emplid         :'  $Emplid
#Debug Show '$InsDependent   :'  $InsDependent
#Debug Show '$InsPaymentDt   :'  $InsPaymentDt
#Debug Show '#InsStudent     :'  #InsStudent
#Debug Show '$InsEducLvl     :'  $InsEducLvl
#Debug Show '#InsEducInd     :'  #InsEducInd
#Debug Show '#InsVaccine     :'  #InsVaccine
#Debug Show '#InsDisabled    :'  #InsDisabled
#Debug Show '$InsTerm        :'  $InsTerm
#Debug Show '$InsTermDt      :'  $InsTermDt

Begin-SQL
INSERT INTO PS_DEP_BEN_EFF_BRA
(EMPLID
,DEPENDENT_BENEF
,EFFDT
,STUDENT_BRA
,EDUCATION_LVL_BRA
,EDUCATION_IND_BRA
,VACCINE_CERT_BRA
,DISABLED_BRA
,FAM_ALLOW_TERM_BRA
,FAM_TERM_DT_BRA)
VALUES
(
$Emplid
,$InsDependent
,$InsPaymentDt
,#InsStudent
,$InsEducLvl
,#InsEducInd
,#InsVaccine
,#InsDisabled
,$InsTerm
,$InsTermDt
)
End-SQL
End-Procedure Insert-Dependents02

!**************************************
begin-procedure Select-Dependents
#debug show '** Select-Dependents **'
#debug show '    Emplid: ' $Emplid
#debug show '    Effdt:  ' $Effdt
#debug show '    CurrentDate:  ' $CurrentDate
!**************************************
Let #CountD = 0
Let #TotalD = 0

Begin-Select
C1.NAME_DISPLAY
B.ADDRESS1
D.RELATIONSHIP
B.SAME_ADDRESS_EMPL
D.MAR_STATUS
D.MAR_STATUS_DT
D.DEP_BENEF_TYPE
A.BIRTHDATE
A.DEPENDENT_BENEF
A.BIRTHPLACE
E.STUDENT_BRA
E.DISABLED_BRA
E.VACCINE_CERT_BRA
X.XLATLONGNAME
E.FAM_TERM_DT_BRA

  Let $DepTermDate    = Rtrim(&E.FAM_TERM_DT_BRA, ' ')

  Let $ProcessInd     = 'Y'

  if $DepTermDate <> ''
     Do convert-to-dtu-date(&E.FAM_TERM_DT_BRA, $DepTermDate )
     Do convert-to-dtu-date($AsOfToday, $Today  )
     if $DepTermDate < $Today
        Let $ProcessInd = 'N'
     end-if
     Let $DepTermDate = '           '
     Do Format-DateTime(&E.FAM_TERM_DT_BRA, $DepTermDate,{DEFDMY}, '','')
  end-if

  If $ProcessInd = 'Y'

     Let $Relation       = Rtrim(&D.RELATIONSHIP, ' ')
     Let $DepntName      = Rtrim(&C1.NAME_DISPLAY, ' ')
     Let $DepntRel       = Rtrim(&X.XLATLONGNAME, ' ')
     Let $EducationInd   = Edit(&E.STUDENT_BRA, '0')
     Let $Disable        = Edit(&E.DISABLED_BRA, '0')
     Let $Vaccine_Cert   = Edit(&E.VACCINE_CERT_BRA, '0')
     Let $DependentBenef = Rtrim(&A.DEPENDENT_BENEF, ' ')
     Let $BirthDate      = &A.BIRTHDATE
     Let $BirthPlace     = Rtrim(&A.BIRTHPLACE, ' ')
     Let $DepTermDate    = Rtrim(&E.FAM_TERM_DT_BRA, ' ')

     #debug show '     $Relation        :'  $Relation
     #debug show '     $DepntName       :'  $DepntName
     #debug show '     $DepntRel        :'  $DepntRel
     #debug show '     $EducationInd    :'  $EducationInd
     #debug show '     $Disable         :'  $Disable
     #debug show '     $Vaccine_Cert    :'  $Vaccine_Cert
     #debug show '     $DependentBenef  :'  $DependentBenef
     #debug show '     $BirthDate       :'  $BirthDate
     #debug show '     $BirthPlace      :'  $BirthPlace
     #debug show '     $DepTermDate     :'  $DepTermDate

     if $DepTermDate <> ''
        Let $DepTermDate = '           '
        Do Format-DateTime(&E.FAM_TERM_DT_BRA, $DepTermDate,{DEFDMY}, '','')
     end-if

     Let $DependentOk    = 'N'
     Let #Age            = 0

     If $BirthDate <> ''
        Do convert-to-dtu-date(&A.BIRTHDATE, $BirthDate   )
        Do convert-to-dtu-date($AsOfToday, $Today  )
        Do dtu-diff-years($BirthDate,$Today ,#Age)
        #debug Show '           $BirthDate :' $BirthDate
        #debug Show '           $Today     :' $Today
        #debug Show '           #Age       :' #Age

        Let $BirthDate = '           '
        Do Format-DateTime(&A.BIRTHDATE, $BirthDate,{DEFDMY}, '','')
     end-if
     If $BirthDate <> ''
        Let $BirthDate = '           '
        Do Format-DateTime(&A.BIRTHDATE, $BirthDate,{DEFDMY}, '','')
     end-if

       Do Select-Dependents-WA
       Do Evaluate-Dependents2

     If $DependentOk      =  'Y'
        Let #Sequence     = #Sequence + 1
        Let #TotalD       = #TotalD   + 1
        Do Select-Dep-Data
        Do Create-Array-Dependents
     End-if
  End-if

 FROM PS_DEP_BEN A
  , PS_DEP_BEN_ADDR B
  , PS_DEP_BEN_NAME C1
  , PS_DEP_BEN_EFF D
  , PS_DEP_BEN_EFF_BRA E
  , XLATTABLE_VW X
 WHERE A.EMPLID = $Emplid
   AND B.EMPLID = A.EMPLID
   AND C1.EMPLID = A.EMPLID
   AND D.EMPLID = A.EMPLID
   AND B.DEPENDENT_BENEF = A.DEPENDENT_BENEF
   AND C1.DEPENDENT_BENEF = A.DEPENDENT_BENEF
   AND D.DEPENDENT_BENEF = A.DEPENDENT_BENEF
   AND B.EFFDT = (
                   SELECT MAX(B1.EFFDT)
                   FROM PS_DEP_BEN_ADDR B1
                   WHERE B1.EMPLID = B.EMPLID
                   AND B1.DEPENDENT_BENEF = B.DEPENDENT_BENEF
                   AND B1.EFFDT <= $CurrentDate)

   AND C1.EFFDT = ( SELECT MAX(C.EFFDT)
                   FROM PS_DEP_BEN_NAME C
                   WHERE C.EMPLID = C1.EMPLID
                   AND C.DEPENDENT_BENEF = C1.DEPENDENT_BENEF
                   AND C.EFFDT <= $CurrentDate)
  AND (D.EFFDT = (
 SELECT MAX(D1.EFFDT)
  FROM PS_DEP_BEN_EFF D1
 WHERE D1.EMPLID = D.EMPLID
   AND D1.DEPENDENT_BENEF = D.DEPENDENT_BENEF
   AND D1.EFFDT <= $CurrentDate))
   AND A.EMPLID = E.EMPLID
   AND A.DEPENDENT_BENEF = E.DEPENDENT_BENEF
AND E.EFFDT = (SELECT MAX(EE.EFFDT) FROM PS_DEP_BEN_EFF_BRA EE
               WHERE EE.EMPLID = E.EMPLID
               AND   EE.DEPENDENT_BENEF = E.DEPENDENT_BENEF)
AND X.FIELDVALUE = D.RELATIONSHIP
AND X.FIELDNAME  = 'RELATIONSHIP'
End-Select
If #TotalD = 0
   show 'Not found Dependents for this Employee: ' $Emplid
End-if
End-Procedure Select-Dependents

!**************************************
begin-procedure Select-Dep-Data
#debug show '** Select-Dep-Data **'
#debug show '$Emplid           :' $Emplid
#debug show '$DependentBenef   :' $DependentBenef
!**************************************

  Let $DepBirthLoc   = ''
  Let $DepCert       = ''
  Let $DepRegistry   = ''
  Let $DepPage       = ''
  Let $DepRecDate    = ''

Begin-Select
F.OFFICE_NAME
F.REGISTRY_NUM_BRA
F.BOOK_NUMBER_BRA
F.PAGE_NUMBER_BRA
F.DATE_RECEIVED

  Let $DepBirthLoc   = Rtrim(&F.OFFICE_NAME, ' ')
  Let $DepCert       = Rtrim(&F.BOOK_NUMBER_BRA, ' ')
  Let $DepRegistry   = Rtrim(&F.REGISTRY_NUM_BRA, ' ')
  Let $DepPage       = Rtrim(&F.PAGE_NUMBER_BRA, ' ')
  Let $DepRecDate    = Rtrim(&F.DATE_RECEIVED, ' ')

  If $DepRecDate <> ''
     Let $DepRecDate = '           '
     Do Format-DateTime(&F.DATE_RECEIVED, $DepRecDate,{DEFDMY}, '','')
  end-if

FROM PS_DEP_BENEF_BRA F
WHERE F.EMPLID = $Emplid
AND   F.DEPENDENT_BENEF = $dependentBenef
End-Select
End-Procedure Select-Dep-Data

!**************************************
begin-procedure Select-Dependents-WA
#DEBUG show '** Select-Dependents-WA **'
#debug show '   $DepntBenf   : ' $DependentBenef
!**************************************
if $DependentOk = 'N'
Begin-Select
'X'

  Let $DependentOk = 'Y'
  Let $FoundInWA   = 'Y'

FROM PS_GPBR_DEPEND_WA WA
WHERE WA.EMPLID = $Emplid
AND   WA.PAYMENT_DT = (SELECT MAX(W.PAYMENT_DT)
                     FROM PS_GPBR_DEPEND_WA W
                     WHERE W.EMPLID = WA.EMPLID)
AND WA.DEPENDENT_BENEF = $DependentBenef
AND WA.GPBR_FAM_ALLOW_IND = 1
End-Select
end-if
#debug show '   $DependentOk : ' $DependentOk
#debug show '   $FoundInWA   : ' $FoundInWA
End-Procedure Select-Dependents-WA

!**************************************
begin-procedure Evaluate-Dependents
#debug show '** Evaluate-Dependents **'
!**************************************
  If  $DependentOk  = 'N'
    Evaluate $Relation
      when = 'SP'
        Let $DependentOk = 'Y'
        break
      !when = 'S'  Son
      !when = 'D'  Daugther
      when = 'C'  !Child
      !when = 'XC'
      !when = 'XD'
      !when = 'XS'
      when = 'FC'   !Foster Child
      when = 'RC'   !Recognized Child
        If #Age < 21
           Let $DependentOk = 'Y'
        else
           If #Age < 24 and
              $EducationInd = '1'
              Let $DependentOk = 'Y'
           end-if
        end-if
      break
      when = 'FA'
      when = 'GF'
      when = 'GM'
      when = 'MO'
           Let $DependentOk = 'Y'
      break
    End-Evaluate
  End-if

End-Procedure Evaluate-Dependents

!**************************************
begin-procedure Evaluate-Dependents2
#debug show '** Evaluate-Dependents2 **'
#Debug Show '     $Relation     :' $Relation
#Debug Show '     #Age          :' #Age
#Debug Show '     $Vaccine_Cert :' $Vaccine_Cert
#Debug Show '     $EducationInd :' $EducationInd
#Debug Show '     $Disable      :' $Disable
!**************************************
  If  $DependentOk  = 'N'
    Evaluate $Relation
      when = 'C'    !Child
      when = 'FC'   !Foster Child
      when = 'RC'   !Recognized Child
          If #Age <= 6 And $Vaccine_Cert = '1'
            Let $DependentOk = 'Y'
          End-If

          If #Age >=7 And #Age <= 14 And $EducationInd = '1'
            Let $DependentOk = 'Y'
          End-If

          If $Disable = '1'
            Let $DependentOk = 'Y'
          End-If
      break
    End-Evaluate
  End-if
#Debug Show '     $DependentOk  ->' $DependentOk
End-Procedure Evaluate-Dependents2

!**************************************
begin-procedure Create-Array-Dependents
#debug show '** Create-Array-Dependent **'
!**************************************

  Let $Sequence = Edit(#Sequence, '00')
  Let #CountD   = #CountD + 1

  #debug show '#CountD       :' #CountD
  #debug show '$Emplid       :' $Emplid
  #debug show '$Sequence     :' $Sequence
  #debug show '$DepntName    :' $DepntName
  #debug show '$DepntRel     :' $DepntRel
  #debug show '$BirthDate    :' $BirthDate
  #debug show '$BirthPlace   :' $BirthPlace
  #debug show '$DepBirthLoc  :' $DepBirthLoc
  #debug show '$DepCert      :' $DepCert
  #debug show '$DepRegistry  :' $DepRegistry
  #debug show '$DepPage      :' $DepPage
  #debug show '$DepRecDate   :' $DepRecDate
  #debug show '$DepTermDate  :' $DepTermDate



  Put                     $Emplid $Sequence $DepntName $DepntRel $BirthDate $BirthPlace $DepBirthLoc -
                          $DepCert $DepRegistry $DepPage $DepRecDate $DepTermDate
  into Dependents(#CountD) Emplid  Sequence  DepntName  DepntRel  BirthDate  BirthPlace DepBirthLoc -
                           DepCert  DepRegistry  DepPage  DepRecDate DepTermDate

End-Procedure Create-Array-Dependents

!**************************************
begin-procedure Select-National-Id
#debug show '** Select-National-Id **'
!**************************************
Let $PIS  = ''
Let $CTPS = ''
Let $CRES = ''
Let $CPF  = ''

Begin-Select
A.NATIONAL_ID
A.NATIONAL_ID_TYPE

   Let $NationalId = Rtrim(&A.NATIONAL_ID_TYPE, ' ')

   Evaluate $NationalId
   when = 'PIS'
     Let $PIS       = Rtrim(&A.NATIONAL_ID,' ')
   when = 'CTPS'
     Let $CTPS      = Rtrim(&A.NATIONAL_ID,' ')
   when = 'C-RES'
     Let $CRES      = Rtrim(&A.NATIONAL_ID,' ')
   when = 'TIT-EL'
     Let $TITEL     = Rtrim(&A.NATIONAL_ID,' ')
   when = 'CPF'
     Let $CPF       = Rtrim(&A.NATIONAL_ID,' ')
   End-Evaluate

from PS_PERS_NID A
WHERE A.EMPLID = $Emplid
AND A.COUNTRY = 'BRA'
End-Select
End-Procedure Select-National-Id

!**************************************
begin-procedure GetWA_Amount
#debug show '** GetWA_Amount **'
!*************************************
Let #CountS   = 0
Let #TotalSal = 0
Let #PrevAmt  = 0

Begin-Select
NW.EMPLID
NW.PAYMENT_DT
SUM(NW.GPBR_FAM_AMT) &TotFamAmount

    Let #SalAmount = &TotFamAmount
    Let $SalEffdt  = Rtrim(&NW.PAYMENT_DT, ' ')

    If #SalAmount <> #PrevAmt
        Let #PrevAmt = #SalAmount
        If $SalEffdt <> ''
            Let $SalEffdt = '           '
            Do Format-DateTime(&NW.PAYMENT_DT, $SalEffdt,{DEFDMY}, '','')
            Add 1 to #CountS
            Add 1 to #TotalSal
            Let $SalSequence = Edit(#CountS, '000')
            put $Emplid $SalSequence $SalEffdt #SalAmount
            into Salary(#CountS) Emplid SalSequence SalEffdt SalAmount
        End-if
    End-If
    #Debug show '$Emplid      :' $Emplid
    #Debug show '$SalSequence :' $SalSequence
    #Debug show '$SalEffdt    :' $SalEffdt
    #Debug show '#SalAmount   :' #SalAmount

FROM PS_GPBR_DEPEND_WA NW
WHERE NW.EMPLID = $Emplid
AND NW.EMPL_RCD = #Empl_Rcd
AND NW.GPBR_FAM_ALLOW_IND = 1
GROUP BY NW.EMPLID, NW.PAYMENT_DT
End-Select

End-Procedure GetWA_Amount


!**************************************
begin-procedure Get_Bracket_FamAllowance
#debug show '** Get_Bracket_FamAllowance **'
show '#PinFamlyNum : ' #PinFamlyNum
!*************************************


Let #FamAmount = 0
Begin-Select
FA.DATA_KEY1_DEC
FA.DATA_VAL1_DEC
FA.EFFDT
FA.SEQ_NUM5

    #debug show '  &FA.DATA_KEY1_DEC : ' &FA.DATA_KEY1_DEC
    #debug show '  &FA.DATA_VAL1_DEC : ' &FA.DATA_VAL1_DEC
    #debug show '  &FA.EFFDT         : ' &FA.EFFDT
    #debug show '  &FA.SEQ_NUM5      : ' &FA.SEQ_NUM5

    Let #BracketKey = &FA.DATA_KEY1_DEC
    Let #BracketVal = &FA.DATA_VAL1_DEC
    If #MonthlyCompRate > #BracketKey
        Let #FamAmount = #BracketVal
    End-If

FROM PS_GP_BRACKET_DTL FA
WHERE FA.PIN_NUM = #PinFamlyNum
AND FA.EFFDT = (SELECT MAX(FA2.EFFDT)
                FROM PS_GP_BRACKET_DTL FA2
                WHERE FA2.PIN_NUM = FA.PIN_NUM
                AND EFFDT <= $CurrentDate)
ORDER BY FA.SEQ_NUM5
End-Select
End-Procedure Get_Bracket_FamAllowance


!**************************************
begin-procedure Select-Family-Allowance
#debug show '** Select-Family-Allowance **'
#debug show '#PinFamlyNum : ' #PinFamlyNum
!*************************************
Let #CountS   = 0
Let #TotalSal = 0
begin-select
AA.DECIMAL_VALUE
AA.EFFDT

  Let #SalAmount = &AA.DECIMAL_VALUE
  Let $SalEffdt  = Rtrim(&AA.EFFDT, ' ')

  If $SalEffdt <> ''
     Let $SalEffdt = '           '
     Do Format-DateTime(&AA.EFFDT, $SalEffdt,{DEFDMY}, '','')
 !    Do convert-from-dtu-date($SalEffdt, $SalEffdt)
  End-if

  if #SalAmount <> 0
     Add 1 to #CountS
     Add 1 to #TotalSal
     Let $SalSequence = Edit(#CountS, '000')

     put $Emplid $SalSequence $SalEffdt #SalAmount
     into Salary(#CountS) Emplid SalSequence SalEffdt SalAmount
  end-if

FROM PS_GP_VARIABLE AA
WHERE  AA.PIN_NUM     = #PinFamlyNum
ORDER BY AA.EFFDT
end-select
end-procedure Select-Family-Allowance

!**************************************
begin-procedure Declare-Rows
#debug show '** Declare-Rows **'
!**************************************
! Row 1
  Let #r0      = 1
  Let #r0a     = #r0 + 1

! Row 3
  Let #r1   = 3
  Let #r1a  = #r1 + 1
  Let #r1b  = #r1 + 2

! Row 6
  Let #r2   = #r1 + #r1
  Let #r2a  = #r2 + 1
  Let #r2b  = #r2 + 2

! Row 9
  Let #r3   = #r1 + #r2
  Let #r3a  = #r3 + 1
  Let #r3b  = #r3 + 2

! Row 12
  Let #r4   = #r3  + #r1
  Let #r4a  = #r4  + 1
  Let #r4b  = #r4  + 2

! Row 15
  Let #r5   = #r4  + #r1
  Let #r5a  = #r5  + 1
  Let #r5b  = #r5  + 2

! Row 18
  Let #r6   = #r5  + #r1
  Let #r6a  = #r6  + 1

! Row 21
  Let #r7   = #r6  + #r1
  Let #r7a  = #r7  + 1
  Let #r7b  = #r7  + 2

! Row 24
  Let #r8   = #r7  + #r1
  Let #r8a  = #r8  + 1
  Let #r8b  = #r8  + 2

! Row 27
  Let #r9   = #r8  + #r1
  Let #r9a  = #r9  + 1

! Row 30
  Let #r10   = #r9  + #r1

  Let #r11   = #r10  + #r1
  Let #r11a  = #r11 + 1
  Let #r11b  = #r11 + 2

  Let #r12   = #r10  + #r1 + #r1
  Let #r12a  = #r12 + 1
  Let #r12b  = #r12 + 2


end-procedure Declare-Rows

!**************************************
begin-procedure Print-Employee-Data
#debug show '** Print-Employee-Data **'
!**************************************

  Graphic (#r0a ,{C01} ,{L170}) box 20 {G2}
  Graphic (#r0a ,{C01} ,{L170}) box 4  {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 6  {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 8  {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 10 {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 12 {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 14 {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 16 {G1}
  Graphic (#r0a ,{C01} ,{L170}) box 18 {G1}
  Graphic (#r1  ,{C01} ,{L05})  box 19 {G1}
  Graphic (#r1  ,{C01} ,{L38})  box 19 {G1}
  Graphic (#r1  ,{C01} ,{L53})  box 19 {G1}
  Graphic (#r1  ,{C01} ,{l76})  box 19 {G1}
  Graphic (#r1  ,{C01} ,{l95})  box 19 {G1}
  Graphic (#r1  ,{C01} ,{L105}) box 19 {G1}
  Graphic (#r1  ,{C01} ,{L125}) box 19 {G1}
  Graphic (#r1  ,{C01} ,{L140}) box 19 {G1}
  Graphic (#r1  ,{C01} ,{L155}) box 19 {G1}
  Graphic (#r1  ,{C01} ,{L170}) box 19 {G1}
  Graphic (#r1  ,{C01} ,{L170}) box 1  {G1}

  Graphic (#r7b ,{C02} ,{L168}) box 8 {G2}
  Graphic (#r7b ,{C02} ,{L168}) box 1  {G1}
  Graphic (#r7b ,{C02} ,{L168}) box 2  {G1}
  Graphic (#r7b ,{C02} ,{L168}) box 4  {G1}
  Graphic (#r7b ,{C02} ,{L168}) box 6  {G1}
  Graphic (#r7b ,{C02} ,{L168}) box 8  {G1}
  Graphic (#r8  ,{C02} ,{L12} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L28} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L40} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L56} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{l68} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{l84} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{l96} ) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L112}) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L124}) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L140}) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L152}) box 9 {G1}
  Graphic (#r8  ,{C02} ,{L168}) box 9 {G1}

  Graphic (#R11b,65 ,{L50})  horz-line {G1}

  Alter-Printer Point-size = #SizeSml  Font-Type = Proportional Font = #FontStd
  Print 'Beneficiários'                (#r0a ,) center
  Print 'Ordem'                        (#r1  ,{C02})
  Print 'Nome do Filho'                (#r1  , 18)
  Print 'Data do Nascim.'           (#r1  , 41)
  Print 'Local Nascimento'             (#r1  , 60)
  Print 'Cartório'                     (#r1  , 84)
  Print 'N. Registro'                  (#r1  , 97)
  Print 'N. Folha'                     (#r1  ,113)
  Print 'Data da Entrega'              (#r1  ,128)
  Print 'Data de Baixa'                (#r1  ,144)
  Print 'Visto da Fiscal.'             (#r1  ,156)

  Print 'Valor da Cota do Salário Familia' (#r7b ,  0)  center
  Print 'Vigência'                     (#r8  ,  5)
  Print 'Valor Cota'                   (#r8  , 19)
  Print 'Vigência'                     (#r8  , 33)
  Print 'Valor Cota'                   (#r8  , 47)
  Print 'Vigência'                     (#r8  , 61)
  Print 'Valor Cota'                   (#r8  , 75)
  Print 'Vigência'                     (#r8  , 89)
  Print 'Valor Cota'                   (#r8  ,103)
  Print 'Vigência'                     (#r8  ,117)
  Print 'Valor Cota'                   (#r8  ,131)
  Print 'Vigência'                     (#r8  ,145)
  Print 'Valor Cota'                   (#r8  ,159)

  Print '_______/______/______'           (#R11b, 35)
  Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
  Print $Name                          (#R12, 70)

end-procedure Print-Employee-Data

!**************************************
begin-procedure Print-Dependents
#debug show '** Print-Dependents **'
!**************************************
  Do Print-Employee-Data

  Let #r1b  = #r1 + 2
  Let #Limit = 9
  Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
  Let #CountD = 1

  While #CountD <= #TotalD
    get $Emplid $Sequence $DepntName $DepntRel $BirthDate $BirthPlace $DepBirthLoc -
                          $DepCert $DepRegistry $DepPage $DepRecDate $DepTermDate
    from Dependents(#CountD)

    If #CountD > #Limit
       Let #r1b  = #r1 + 2
       New-Page
       Do Print-Employee-Data
       Let #Limit = #Limit + 9
       Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
    end-if

    Print $Sequence    (#r1b ,{C02} )
    if length($DepntName) > 36
        Let #r1b_1 = #r1b - 1
        Print $DepntName   (#r1b_1,  7,36) wrap 29 2
    else
        Print $DepntName   (#r1b ,  7,36)
    End-If
    Print $BirthDate   (#r1b , 40,10)
    Alter-Printer Point-size = #SizeSml  Font-Type = Proportional Font = #FontStd
    Print $BirthPlace  (#r1b , 55,22)
    Print $DepBirthLoc (#r1b , 78,22)
!    Print $DepCert     (#r1b , 78,12)
    Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
    Print $DepRegistry (#r1b , 97, 6)
    Print $DepPage     (#r1b ,107,12)
    Print $DepRecDate  (#r1b ,128,10)
    Print $DepTermDate (#r1b ,144,10)

    Let #r1b = #r1b + 2

    add 1 to #CountD
  End-while

  Let #r1b   = #r1 + 2

end-procedure Print-Dependents

!**************************************
begin-procedure Print-Family-Allowance
#debug show '** Print-Family-Allowance **'
!**************************************
  Let #r8b  = #r8 + 2
  Let #col  = 2
  Let #colb = 12
  Let #SalLimit = 4
  Let #MaxLimit = 42
  Let #CountS = 1
  Let #CountPrint = 1
  Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd

  While #CountS <= #TotalSal
    get $Emplid $SalSequence $SalEffdt #SalAmount
    from Salary(#CountS)

    If #CountPrint > #MaxLimit
       Let #SalLimit   = 4
       Let #MaxLimit   = 42
       Let #CountPrint = 1
       Let #r8b        = #r8 + 2
       Let #col        = 3
       Let #colb       = 14
       New-Page
       Do Print-Employee-Data

       Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
    else
       If #CountPrint > #SalLimit
           Let #r8b  = #r8   + 2
           Let #col  = #col  + 28
           Let #colb = #colb + 28
           Let #SalLimit   = #CountPrint + 4
           Alter-Printer Point-size = #SizeStd  Font-Type = Proportional Font = #FontStd
       end-if
    end-if

    Print $SalEffdt    (#r8b, #col)
    Print #SalAmount   (#r8b, #colb)  edit '999,999,999.99'

    Let #r8b = #r8b + 2

    add 1 to #CountS
    add 1 to #CountPrint
  End-while

  Let #r8a   = #r8 + 1
  New-Page

end-procedure Print-Family-Allowance

!***************************************************************************
Begin-Procedure CleanString($String_In, :$String_out)
#debugx #debug show 'PROCEDURE : CleanString'
!***************************************************************************
!Clean String for Internationa Characters, Double Spaces and Convert
!to Uppercase
!***************************************************************************
let $String_In  = ltrim(rtrim($String_In, ' '),' ')
let #I = 1
Let $String_Out = ''
let #Len = Length($String_In)
let $Test_Char1 = ''
let $Test_Char2 = ''
let $Test_Char3 = ''

While #I  <= #Len
   Let $Test_Char    = Substr($String_In,#I, 1)
   let $Test_Char3   = $Test_Char2
   let $Test_Char2   = $Test_Char1
   let $Test_Char1   = $Test_Char
   if $Test_Char3 = $Test_Char2 and $Test_Char2 = $Test_Char1
      let $Test_Char  = ''
   end-if
   !If $Test_Char <> '-'
   !   Let $String_Out = $String_Out || Upper($Test_Char)
   !End-if

   let $Found = 'N'
   !let $Test_Char = Substr($String_In, #I, 1)
   let #Test_Code = ascii(Upper($Test_Char))
   if (#Test_Code > 64 and #Test_Code < 91) or (#Test_Code > 47 and #Test_Code < 58)
      let $String_Out = $String_Out || Upper($Test_Char)
      let $Found = 'Y'
   end-if

   if ($Found = 'N')
      evaluate $Test_Char
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
        when = 'É'
        when = 'Ê'
        when = 'Ë'
        when = 'È'
          let $Test_Char = 'E'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
        when = 'ã'
        when = 'Á'
        when = 'Â'
        when = 'Ä'
        when = 'À'
        when = 'Å'
        when = 'Ã'
          let $Test_Char = 'A'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'ï'
        when = 'î'
        when = 'ì'
        when = 'í'
        when = 'Ï'
        when = 'Î'
        when = 'Ì'
        when = 'Í'
          let $Test_Char = 'I'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'Ö'
        when = 'ó'
        when = 'Ô'
        when = 'Ö'
        when = 'Ò'
        when = 'Ö'
        when = 'Ó'
          let $Test_Char = 'O'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
        when = 'Ü'
        when = 'Û'
        when = 'Ù'
        when = 'Ú'
          let $Test_Char = 'U'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'ñ'
        when = 'Ñ'
          let $Test_Char = 'N'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = 'Ç'
        when = 'ç'
          let $Test_Char = 'C'
          let $String_Out  = $String_Out || $Test_Char
          break
        when = ' '
        when = '-'
          let $String_Out  = $String_Out || $Test_Char
        when-other
          break
      end-evaluate
    end-if
    add 1 To #I
End-While
Let $String_Out = Upper($String_Out)
Let $String_Out = replace($String_Out, '  ', ' ')
End-procedure CleanString


!**************************************
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Update Process API
#Include 'datemath.sqc'
#Include 'useprntr.sqc'  !Indicate which printer to use for reports
#include 'hrsecty.sqc'   !Get SQR Security parameters
