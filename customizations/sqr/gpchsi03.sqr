!***********************************************************************
!  GPCHSI03.SQR:  Personal Statement - Personalstammblatt              *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  27807408                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

#define SQR_Strings_Array_Size 50

#define col1   10
#define col1_1 18
#define col2   34
#define col21  26
#define col3   69
#define col4   57
#define col41  61
#define col4_1 60
#define col4_2 77
#define col42  84
#define col4_3 98
#define col4_4 108
#define col4_5 115
#define col4_6 121
#define col5   76
#define col6   95
#define col7   102
#define col71  110
#define col72  120
#define col8   118
!***********************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Stdapi-Term
  do Get-Log
end-PROGRAM
!***********************************************************************
begin-procedure Init-Report

  do Stdapi-Init

  if $prcs_process_instance = ''
     do Ask-Report-Parameters                !in Gpchut03.sqc
  else
     do Get-Report-Parameters
  end-if

  do Security-Param

  move 'GPCHSI03' to $ReportID

  if $ApplyContextLanguage = 'Y'
     let $language_cd = ''
  end-if
  
  if $language_cd <> ''
     do Get-Language ($ReportID, $language_cd)
  end-if
  move $TITLE1 to $ReportTitle
  if $Report_Option = 'A'               ! Original Month
     let $gpchsi03_date = $ReportEndDate
     let $gpchsi03_date02 = ' AND PBD1.GPCH_AL_CPAY_ENDDT  = ''' || $ReportEndDate || ''''
     let $gpchsi03_cond = ' AND PBD.GPCH_AL_CPAY_ENDDT = PBD.PRD_END_DT '
     else
     if $Report_Option = 'B'            ! Most Recent Month
        let $gpchsi03_date = $ReportEndDate
        let $gpchsi03_date02 = ' AND PBD1.PRD_END_DT  = ''' || $ReportEndDate || ''''
        let $gpchsi03_cond = ' AND PBD.PRD_END_DT  = ''' || $ReportEndDate  || ''' '
        else
        if $Report_Option = 'C'         ! As Of Month
        let $gpchsi03_date = $Last_Date
        let $gpchsi03_date02 = ' AND PBD1.GPCH_AL_CPAY_ENDDT  = ''' || $Last_Date || ''''
        let $gpchsi03_cond = ' AND PBD.PRD_END_DT  = ''' || $ReportEndDate  || ''' '
        end-if
     end-if
  end-if

  do Get_Pin_Description

  move 'GPCH_IC_RUN_RETRO' to $FieldName
  move $Report_Option to $FieldValue
  move $language_cd to $curr_language_cd
  do Read-Translate-Table
  let $Report_Opt_Descr = rtrim(ltrim($XlatlongName,' '),' ')

end-procedure
!***********************************************************************
begin-procedure Get-Language($ReportID, $language_cd)

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')
  do Append_Report_Translation ('GPCHAL03')
  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Gpce_Append_Report_Translation ('GPCHAL03', $language_cd)
  do Report-Translation

end-procedure
!***********************************************************************
begin-procedure Get-Values

let $language_cd   = rtrim($PRCS_LANGUAGE_CD,' ')
let $ApplyContextLanguage = rtrim(&GPCH_RUN_CNTL.GPCH_CONTEXT_LANG,' ') 
let $Ctl_PayEntity = rtrim(&GPCH_RUN_CNTL.PAY_ENTITY,' ')
let $Report_Option = rtrim(&GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO,' ')
let $Last_Date     = rtrim(&GPCH_RUN_CNTL.GPCH_RC_TO_DT,' ')

end-procedure
!***********************************************************************
begin-procedure Report-Translation

  do Get_Field_Information ('GPCHSI03', 'TITLE1',            $TITLE1,           #CW)
  do Get_Field_Information ('GPCHSI03', 'PAYMENT_LBL',       $Payment_Lbl,      #CW)
  do Get_Field_Information ('GPCHSI03', 'BANK_LBL',          $Bank_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'POST_LBL',          $Post_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'PERSON_LBL',        $Person_Lbl,       #CW)
  do Get_Field_Information ('GPCHSI03', 'EMPL',              $Empl,             #CW)
  do Get_Field_Information ('GPCHSI03', 'BIRTH',             $Birth,            #CW)
  do Get_Field_Information ('GPCHSI03', 'PREFIX',            $Prefix,           #CW)
  do Get_Field_Information ('GPCHSI03', 'COVERED_NR',        $Covered_Nr,       #CW)
  do Get_Field_Information ('GPCHSI03', 'NNSS',              $NNSS_Nr,          #CW)
  do Get_Field_Information ('GPCHSI03', 'LAST_NAME',         $Last_Name,        #CW)
  do Get_Field_Information ('GPCHSI03', 'SEX_LBL',           $Sex_Lbl,          #CW)
  do Get_Field_Information ('GPCHSI03', 'NATION_LBL',        $Nation_Lbl,       #CW)
  do Get_Field_Information ('GPCHSI03', 'FIRST_NAME',        $First_Name,       #CW)
  do Get_Field_Information ('GPCHSI03', 'ADRESS',            $Adress,           #CW)
  do Get_Field_Information ('GPCHSI03', 'GRADE_LBL',         $Grade_Lbl,        #CW)
  do Get_Field_Information ('GPCHSI03', 'ZIVIL_LBL',         $Zivil_Lbl,        #CW)
  do Get_Field_Information ('GPCHSI03', 'HIRE_LBL',          $Hire_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'PTELEFON',          $PTelefon,         #CW)
  do Get_Field_Information ('GPCHSI03', 'BTELEFON',          $BTelefon,         #CW)
  do Get_Field_Information ('GPCHSI03', 'TERM_LBL',          $Term_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'INSUERED_LBL',      $Insuered_Lbl,     #CW)
  do Get_Field_Information ('GPCHSI03', 'AHV_LBL',           $AHV_Lbl,          #CW)
  do Get_Field_Information ('GPCHSI03', 'BVG_LBL',           $BVG_Lbl,          #CW)
  do Get_Field_Information ('GPCHSI03', 'ALV_LBL',           $ALV_Lbl,          #CW)
  do Get_Field_Information ('GPCHSI03', 'KK_MONAY_LBL',      $KK_Monay_Lbl,     #CW)
  do Get_Field_Information ('GPCHSI03', 'SUVA_LBL',          $Suva_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'QUELL_LBL',         $Quell_Lbl,        #CW)
  do Get_Field_Information ('GPCHSI03', 'CHILDREN_LBL',      $Children_Lbl,     #CW)
  do Get_Field_Information ('GPCHSI03', 'CHILD_LBL',         $Child_Lbl,        #CW)
  do Get_Field_Information ('GPCHSI03', 'NAME_LBL',          $Name_Lbl,         #CW)
  do Get_Field_Information ('GPCHSI03', 'BIRTH_LBL',         $Birth_Lbl,        #CW)
  do Get_Field_Information ('GPCHSI03', 'AUTHORIZED_LBL',    $Authorized_Lbl,   #CW)
  do Get_Field_Information ('GPCHSI03', 'PAY_ADRESS_LBL',    $Pay_Adress_Lbl,   #CW)
  do Get_Field_Information ('GPCHSI03', 'PAGE_NO_LBL',       $Page_No,          #CW)
  do Get_Field_Information ('GPCHSI03', 'RUN_DATE_LBL',      $Run_Date,         #CW)
  do Get_Field_Information ('GPCHSI03', 'RUN_TIME_LBL',      $Run_TimeT,        #CW)
  do Get_Field_Information ('GPCHSI03', 'REPORT_LBL',        $Report_IDT,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CITY',            $H_CITY,           #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CITI_STAT',       $H_CITI_STAT,      #CW)
  do Get_Field_Information ('GPCHSI03', 'H_LANG_CD',         $H_LANG_CD,        #CW)
  do Get_Field_Information ('GPCHSI03', 'H_VALID_UNTIL',     $H_VALID_UNTIL,    #CW)
  do Get_Field_Information ('GPCHSI03', 'H_PAYENT',          $H_PAYENT,         #CW)
  do Get_Field_Information ('GPCHSI03', 'H_BUS_UNIT',        $H_BUS_UNIT,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_COST_UNIT',       $H_COST_UNIT,      #CW)
  do Get_Field_Information ('GPCHSI03', 'H_DEPT',            $H_DEPT,           #CW)
  do Get_Field_Information ('GPCHSI03', 'H_LOCATION',        $H_LOCATION,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CANTON',          $H_CANTON,         #CW)
  do Get_Field_Information ('GPCHSI03', 'H_JOB_DATA',        $H_JOB_DATA,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CONTRACT',        $H_CONTRACT,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CONTRACT_DT',     $H_CONTRACT_DT,    #CW)
  do Get_Field_Information ('GPCHSI03', 'H_GRADE',           $H_GRADE,          #CW)
  do Get_Field_Information ('GPCHSI03', 'H_JOBCODE',         $H_JOBCODE,        #CW)
  do Get_Field_Information ('GPCHSI03', 'H_STD_HOURS',       $H_STD_HOURS,      #CW)
  do Get_Field_Information ('GPCHSI03', 'H_CANTON',          $H_CANTON,         #CW)
  do Get_Field_Information ('GPCHSI03', 'H_AMOUNT',          $H_AMOUNT,         #CW)
  do Get_Field_Information ('GPCHSI03', 'H_STAX_CANTN',      $H_STAX_CANTN,     #CW)
  do Get_Field_Information ('GPCHSI03', 'H_TX_VILLAGE_CD',   $H_TX_VILLAGE_CD,  #CW)
  do Get_Field_Information ('GPCHSI03', 'H_KTG_PROVCD',      $H_KTG_PROVCD,     #CW)
  do Get_Field_Information ('GPCHSI03', 'H_EXEMPT_TAX',      $H_EXEMPT_TAX,     #CW)
  do Get_Field_Information ('GPCHSI03', 'H_KANTON',          $H_KANTON,         #CW)
  do Get_Field_Information ('GPCHSI03', 'H_STUDENT',         $H_STUDENT,        #CW)
  do Get_Field_Information ('GPCHSI03', 'H_LEGAL_DT',        $H_LEGAL_DT,       #CW)
  do Get_Field_Information ('GPCHSI03', 'H_EDU_END_DT',      $H_EDU_END_DT,     #CW)
  do Get_Field_Information ('GPCHSI03', 'H_ELIG',            $H_ELIG,           #CW)
  do Get_Field_Information ('GPCHSI03', 'BIRTH_PLACE',       $HD_BIRTHPLACE,    #CW)
  do Get_Field_Information ('GPCHSI03', 'PLACE_ORIGIN',      $HD_PLACE_ORIGIN,  #CW)
  do Get_Field_Information ('GPCHSI03', 'MAIL_ADDRESS',      $HD_MAIL_ADDRESS,  #CW)
  do Get_Field_Information ('GPCHSI03', 'PERMIT_STATUS',     $HD_PERMIT_STATUS, #CW)
  do Get_Field_Information ('GPCHSI03', 'ORIG_HIRE_DT',      $HD_ORIG_HIRE_DT,  #CW)
  do Get_Field_Information ('GPCHSI03', 'VAC_ENT_PY',        $HD_VAC_ENT_PY,    #CW)
  do Get_Field_Information ('GPCHSI03', 'VAC_ENT_CY',        $HD_VAC_ENT_CY,    #CW)
  do Get_Field_Information ('GPCHSI03', 'VAC_VAC_TK',        $HD_VAC_VAC_TK,    #CW)
  do Get_Field_Information ('GPCHSI03', 'VAC_VAL_BL',        $HD_VAC_VAL_BL,    #CW)
  do Get_Field_Information ('GPCHSI03', 'CALC_TYPE',         $HD_CALC_TYPE,     #CW)
  do Get_Field_Information ('GPCHSI03', 'GRADE_SINCE',       $HD_GRADE_SINCE,   #CW)
  do Get_Field_Information ('GPCHSI03', 'STEP',              $HD_STEP,          #CW)
  do Get_Field_Information ('GPCHSI03', 'FAK_ELIG',          $HD_FAK_ELIG,      #CW)
  do Get_Field_Information ('GPCHSI03', 'FAK_CANTON',        $HD_FAK_CANTON,    #CW)
  do Get_Field_Information ('GPCHSI03', 'FAK_SOURCE_LBL',    $HD_FAK_SOURCE_LBL,#CW)
  do Get_Field_Information ('GPCHSI03', 'LG_BNK_SEQ',        $HD_BNK_SEQ,       #CW)
  do Get_Field_Information ('GPCHSI03', 'ACCNO',             $HD_ACCNO,         #CW)
  do Get_Field_Information ('GPCHSI03', 'PERCENT',           $HD_PERCENT,       #CW)
  do Get_Field_Information ('GPCHSI03', 'BANK_CD_NR',        $HD_BANK_CD_NR,    #CW)

  do Get_Field_Information ('GPCHGLOB', 'HEADER_DT',       $HEADER_DT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRGUPD',       $LG_PRGUPD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EMPPROC',      $LG_EMPPROC,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',     $LG_RUNCTLPA,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',        $LG_VALUE,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',       $LG_REPLOG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',      $LG_LOGITEM,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MR',           $HD_MR ,          #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MRS',          $HD_MRS,          #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FROM',         $HD_FROM,         #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FOR',          $HD_FOR,          #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',           $HD_PYENT,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_CURRENCY',     $HD_CURRENCY,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'AMOUNT',          $HD_AMOUNT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRINT_OPT',    $LG_PRINT_OPT,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'YEARLY_LIMITS',   $HD_YEARLY_LIMITS,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_YES',          $HD_YES         , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_NO',           $HD_NO,           #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MALE',         $HD_MALE,         #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FEMALE',       $HD_FEMALE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_UNKNOWN',      $HD_UNKNOWN,      #CW)

  do Get_Field_Information ('GPCHGLOB', 'LC_CAN_FRENCH',   $LC_CAN_FRENCH,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_DUTCH',        $LC_DUTCH,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_ENGLISH',      $LC_ENGLISH,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_SPANISH',      $LC_SPANISH,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_FRENCH',       $LC_FRENCH,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_GERMAN',       $LC_GERMAN,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_INTL_ENG',     $LC_INTL_ENG,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_ITALIAN',      $LC_ITALIAN,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_JAPANESE',     $LC_JAPANESE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LC_PORTUGUESE',   $LC_PORTUGUESE,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'COMMON_LAW',      $COMMON_LAW,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'DIVORCED',        $DIVORCED,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'SEPARATED',       $SEPARATED,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'HEADHOUSE',       $HEADHOUSE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'MARRIED',         $MARRIED,         #CW)
  do Get_Field_Information ('GPCHGLOB', 'SINGLE',          $SINGLE,          #CW)
  do Get_Field_Information ('GPCHGLOB', 'UNKNOWN',         $UNKNOWN,         #CW)
  do Get_Field_Information ('GPCHGLOB', 'WIDOWED',         $WIDOWED,         #CW)
  do Get_Field_Information     ('GPCHGLOB', 'RESLN', $RESLN_ID, #CW)
   do Get_Field_Information     ('GPCHGLOB', 'PROCS_INST', $PROCS_NO, #CW)


end-procedure
!***********************************************************************
begin-procedure Process-Main
#DEBUG SHOW ' -> Process-Main ' $gpchsi03_date02  ' , ' $gpchsi03_cond


 do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)
 do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                        $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
 let $Company_Dt = $gpchsi03_date
 do Get-PayEntity-Company

   if $Security_Type = 'N'
      let $Record_Security    = ''
      let $Security_Where     = ''
      let $SecurityClause     = ''
      let $Security_Effdt     = ''
   else
      let $Record_Security    =  ', PS_GPCH_RP_FAST_VW SCRTY'
      let $Security_Where     =  ' AND SCRTY.OPRID = ''' || $prcs_oprid || ''' AND PBD.EMPLID = SCRTY.EMPLID AND PBD.EMPL_RCD = SCRTY.EMPL_RCD'
      let $SecurityClause     =  $SecurityClause
      let $Security_Effdt     =  'AND SCRTY.EFFDT = (select max(SCRTY1.EFFDT) from PS_GPCH_RP_FAST_VW SCRTY1 
                                                            where SCRTY.EMPLID = SCRTY1.EMPLID 
                                                            and SCRTY.EMPL_RCD = SCRTY1.EMPL_RCD
                                                            and SCRTY1.OPRID = ''' || $prcs_oprid || ''' 
                                                            and SCRTY1.EFFDT <= PBD.GPCH_AL_CPAY_ENDDT )'
   end-if
   
    do Overide_Cu_Security


 if rtrim($Sort1 || $Sort2 || $Sort3, ' ') <> ''
       let $Sort_Order = 'ORDER BY '

       if rtrim ($Sort1, ' ') <> ''
           concat $Sort1 with $Sort_Order
       end-if

       if (rtrim ($Sort2, ' ') <> '' and rtrim($Sort1, ' ') <>'')
          concat ',' with $Sort_Order
          concat $Sort2 with $Sort_Order
       else
          concat $Sort2 with $Sort_Order
       end-if

       if (rtrim ($Sort3, ' ') <> '' and (rtrim($Sort1, ' ') <>'' or rtrim($Sort2, ' ') <>''))
           concat ',' with $Sort_Order
           concat $Sort3 with $Sort_Order
       else
           concat $Sort3 with $Sort_Order
       end-if
  end-if

 let $Old_JB_COMPANY = ''

begin-select on-error=give_warning
#ifdef ORACLE
/*+ INDEX(PBD PS_GPCH_RP_0001)*/
#endif
PBD.EMPLID                ()   on-break print=never procedure=New-Employee  level=1
PBD.EMPL_RCD              ()   on-break print=never procedure=New-Employee  level=2
PBD.CAL_RUN_ID            &PBD.CAL_RUN_ID1
PBD.GP_PAYGROUP
PBD.CAL_ID
PBD.RSLT_SEG_NUM
PBD.GPCH_TX_TRF_CD
PBD.PAY_ENTITY
PBD.BUSINESS_UNIT
PBD.COST_UNIT_CD
PBD.DEPTID
PBD.LOCATION
PBD.COMPANY
PBD.GPCH_TX_FAK_CANTON
PBD.BIRTHDATE
PBD.SEX
PBD.GPCH_TX_UV_STATUS
PBD.GPCH_SI_COV_UV
PBD.GPCH_SI_AHV_STATUS
PBD.GPCH_SI_ALV_STATUS
PBD.GPCH_TX_KTG_STATUS
PBD.GPCH_PK_STATUS
PBD.LANG_CD
PBD.CONTRACT_TYPE
PBD.CONTRACT_END_DT
PBD.GRADE
PBD.JOBCODE
PBD.FTE
PBD.STD_HOURS
PBD.GPCH_TX_CANTON
PBD.GPCH_TX_VILLAGE_CD
PBD.GPCH_SI_HPROV
PBD.GPCH_TX_EXEMPT_TAX
PBD.HIRE_DT
PBD.TERMINATION_DT
PBD.BIRTHPLACE
PBD.VISA_PERMIT_TYPE
PBD.EXPIRATN_DT
PBD.ORIG_HIRE_DT
PBD.COMP_FREQUENCY
PBD.GRADE_ENTRY_DT
PBD.GPCH_RP_CHAR01
PBD.STEP
PBD.GPCH_TX_FAK_SUBJC
PBD.GPCH_AL_CPAY_ENDDT
PBD.MAR_STATUS
! FMB
PBD.NATIONAL_ID
PBD.GPCH_AH_NNSS
PBD.COUNTRY
PBD.ORIGIN_CHE
PD.NAME    ! for the sort
PBD.GPCH_SI_YEAR

   let $EmplID           = &PBD.EMPLID


   let #Empl_RCD         = &PBD.EMPL_RCD
   let $LANG_CD          = rtrim(&PBD.LANG_CD,' ')
   let $JB_PAY_ENTITY    = &PBD.PAY_ENTITY
   let $JB_BUSINESS_UNIT = &PBD.BUSINESS_UNIT
   let $JB_COST_UNIT_CD  = &PBD.COST_UNIT_CD
   let $JB_DEPTID        = &PBD.DEPTID
   let $JB_LOCATION      = &PBD.LOCATION
   let $JB_COMPANY       = rtrim(&PBD.COMPANY,' ')
   let $JB_FAK_CANTON    = &PBD.GPCH_TX_FAK_CANTON
   let $JB_JOBCODE       = &PBD.JOBCODE
   let $Comp_Freq        = rtrim(&PBD.COMP_FREQUENCY,' ')
   let $Work_Canton      = rtrim(&PBD.GPCH_RP_CHAR01,' ')
   let #Step             = &PBD.STEP
   let $Fak_Elig         = rtrim(&PBD.GPCH_TX_FAK_SUBJC,' ')
   let $Fak_Canton       = rtrim(&PBD.GPCH_TX_FAK_CANTON,' ')
   let $Yearly_Limit     = rtrim(&PBD.GPCH_SI_YEAR,' ')
         
         if $Yearly_Limit = 'Y'
            let $Yearly_Limit = $HD_YES
         else
            let $Yearly_Limit = $HD_NO
         end-if

   if $Old_JB_COMPANY  <> $JB_COMPANY
   do Get-Company-Address-Array($JB_COMPANY,$ADDLINE1, $ADDLINE2, $ADDLINE3,$ADDLINE31,$ADDLINE4,$ADDLINE5,
                                $ADDLINE6,$COMPANY_DESCR,$COMPANY_DESCRSHORT,$CITY,$STATE,$POSTAL,$Busn_Phone,$Fax_Phone,$Otr_Phone)
   end-if
   do Format-Number(#Step,$Step1, '99')

   if $language_cd = ''
      do Get-Language ($ReportID, $lang_cd)
   end-if

   do Format-DateTime(&PBD.GPCH_AL_CPAY_ENDDT,  $Header_Date , {DEFDATE}, '', '')
   do Format-DateTime(&PBD.CONTRACT_END_DT,  $JB_CONT_END_DT , {DEFDATE}, '', '')
   do Format-DateTime(&PBD.EXPIRATN_DT,  $Expiratn_Dt , {DEFDATE}, '', '')
   do Format-DateTime(&PBD.ORIG_HIRE_DT, $Orig_Hire_Dt, {DEFDATE}, '', '')
   do Format-DateTime(&PBD.GRADE_ENTRY_DT, $GRADE_ENT_DT, {DEFDATE}, '', '')

   let $JB_CONT_TYPE     = rtrim(&PBD.CONTRACT_TYPE,' ')
   let $JB_GRADE         = rtrim(&PBD.GRADE,' ')
   let $JB_JOBCODE       = rtrim(&PBD.JOBCODE,' ')
   let #JB_FTE           = 100 * &PBD.FTE
   let #JB_STD_HOURS     = &PBD.STD_HOURS

   let $STAX_CANTN       = rtrim(&PBD.GPCH_TX_CANTON,' ')
   let $TX_VILLAGE_CD    = rtrim(&PBD.GPCH_TX_VILLAGE_CD,' ')
   let $KTG_PROVCD       = rtrim(&PBD.GPCH_SI_HPROV,' ')
   let $EXEMPT_TAX       = rtrim(&PBD.GPCH_TX_EXEMPT_TAX,' ')
   let $Calender_Run_ID  = &PBD.CAL_RUN_ID1
   let #data.empl_rcd    = &PBD.EMPL_RCD
   let $Pay_Group_ID     = &PBD.GP_PAYGROUP
   let $Calender_ID      = &PBD.CAL_ID
   let #Rslt_Seg_Nr      = &PBD.RSLT_SEG_NUM
   let $New_EmplID       = &PBD.EMPLID
   let $Sex              = rtrim(&PBD.SEX,' ')
   let $Grade            = &PBD.GRADE
   let $ZivStat1         = &PBD.MAR_STATUS
   let $Birth_DT         = &PBD.BIRTHDATE
   let $S_Code           = rtrim(ltrim(&PBD.GPCH_SI_COV_UV,' '),' ') || rtrim(ltrim(&PBD.GPCH_TX_UV_STATUS,' '),' ')
   let $AHV_Code         = rtrim(ltrim(&PBD.GPCH_SI_AHV_STATUS,' '),' ')
   let $ALV_Code         = rtrim(ltrim(&PBD.GPCH_SI_ALV_STATUS,' '),' ')
   let $BVG_Code         = rtrim(ltrim(&PBD.GPCH_PK_STATUS,' '),' ')
   let $KK_Traggeld      = rtrim(ltrim(&PBD.GPCH_TX_KTG_STATUS,' '),' ')
   let $Quell_Code       = rtrim(ltrim(&PBD.GPCH_TX_TRF_CD,' '),' ')
   let $Hire_DT          = &PBD.HIRE_DT
   let $Term_DT          = &PBD.TERMINATION_DT
   let $Birthplace       = rtrim(&PBD.BIRTHPLACE,' ')
   let $Visa_Permit      = rtrim(&PBD.VISA_PERMIT_TYPE,' ')

   
   do Get_Martial_Status($ZivStat1,$ZivStat)
       

   if $Sex = 'M' 
         let $SexLng = $HD_MALE
      else 
         if $Sex = 'F' 
            let $SexLng = $HD_FEMALE
         else 
              if $Sex = 'U' 
                 let $SexLng = $HD_UNKNOWN
              end-if
         end-if
      end-if      
      
      if $BVG_Code = 'Y'
            let $BVG_Code = $HD_YES
         else
            let $BVG_Code = $HD_NO
      end-if
      
      if $EXEMPT_TAX = 'Y'
               let $EXEMPT_TAX = $HD_YES
            else
               let $EXEMPT_TAX = $HD_NO
      end-if
      
      if $Fak_Elig = 'Y'
                  let $Fak_Elig = $HD_YES
               else
                  let $Fak_Elig = $HD_NO
      end-if

   !------------------------------------------------------------  Address
   do Get-Emp-Address($EmplID,$gpchsi03_date,'HOME',$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,
                      $ADDLINE4,$ADDLINE5,$ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX,
                      $NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$Phone,$Email,$CITY,$STATE,$POSTAL)
   do Get-Country
     let $FADDLINE2     = $ADDLINE2
     let $FADDLINE3     = $ADDLINE3
     let $FADDLINE31    = $ADDLINE31
     let $FADDLINE4     = $ADDLINE4
     let $FADDLINE5     = $ADDLINE5
   !------------------------------------------------------------  Mailing Address

   do Get-Emp-Address($EmplID,$gpchsi03_date,'MAIL',$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,
                      $ADDLINE4,$ADDLINE5,$ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX,
                      $NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$Phone,$Email,$CITY,$STATE,$POSTAL)
   do Get-Country

     let $SADDLINE2     = $ADDLINE2
     let $SADDLINE3     = $ADDLINE3
     let $SADDLINE31    = $ADDLINE31
     let $SADDLINE4     = $ADDLINE4
     let $SADDLINE5     = $ADDLINE5

   !------------------------------------------------------------------

   do Get-Description-Job
   do Get-Vacation-Data
   do Get-Compensation-Data  ! To Get Calc and Insurance data
 ! FMB take National Id from GPCH_RP_0001 instead of Pers_Nid
 !  do Get-National-ID

   let $Nat_ID = rtrim(ltrim(&PBD.NATIONAL_ID,' '),' ')
   let $NNSS_ID = rtrim(ltrim(&PBD.GPCH_AH_NNSS,' '),' ')

   if $Nat_ID <> ''

      let $Nat_ID= substr($Nat_ID,1,3)||'.'||
                       substr($Nat_ID,4,2)||'.'||
                       substr($Nat_ID,6,3)||'.'||
                       substr($Nat_ID,9,3)
   end-if


   if $NNSS_ID <> ''

      let $NNSS_ID= substr($NNSS_ID,1,3)||'.'||
                       substr($NNSS_ID,4,4)||'.'||
                       substr($NNSS_ID,8,4)||'.'||
                       substr($NNSS_ID,12,2)
   end-if

! FMB take Nationality from GPCH_RP_0001 instead of Passport
  let $Nation = rtrim(ltrim(&PBD.COUNTRY,' '),' ')

   if  $Nation = ''
       let $Nation = 'CHE'
   end-if
! FMB take Place of Origin from GPCH_RP_0001 instead of ORIGIN_CHE
   let $HC_PL_ORIGIN          = rtrim(&PBD.ORIGIN_CHE,' ')

! FMB End
   do Print-Gpchsi03-Report

   let $Old_JB_COMPANY  = $JB_COMPANY

FROM   PS_GPCH_RP_0001 PBD
      ,{Record_Person} PD
       [$Record_Security]
WHERE  PBD.EMPLID = PD.EMPLID
!FMB 20120530      AND PBD.EMPL_RCD = SCRTY.EMPL_RCD
       [$Security_Where]
       [$Security_Effdt]
#ifdef ORACLE

AND    PBD.GPCH_AL_CPAY_ENDDT = (SELECT /*+ INDEX(PBD1 PS_GPCH_RP_0001)*/ MAX(PBD1.GPCH_AL_CPAY_ENDDT)
#else
AND    PBD.GPCH_AL_CPAY_ENDDT = (SELECT MAX(PBD1.GPCH_AL_CPAY_ENDDT)
#endif       
                                 FROM PS_GPCH_RP_0001 PBD1
                                 WHERE PBD1.EMPLID   = PBD.EMPLID
                                 AND   PBD1.EMPL_RCD = PBD.EMPL_RCD
                                 [$gpchsi03_date02])
[$gpchsi03_cond]
#ifdef ORACLE
AND    PBD.RSLT_SEG_NUM = (SELECT /*+ INDEX(PBD11 PS_GPCH_RP_0001)*/ MAX(PBD11.RSLT_SEG_NUM)
#else
AND    PBD.RSLT_SEG_NUM = (SELECT MAX(PBD11.RSLT_SEG_NUM)
#endif
                                 FROM PS_GPCH_RP_0001 PBD11
                                 WHERE PBD11.EMPLID             = PBD.EMPLID
                                 AND   PBD11.EMPL_RCD           = PBD.EMPL_RCD
                                 AND   PBD11.GPCH_AL_CPAY_ENDDT = PBD.GPCH_AL_CPAY_ENDDT
                                 AND   PBD11.PRD_END_DT         = PBD.PRD_END_DT)
[$PayEntity_Crit]
[$Emplid_Criteria]
[$Company_Criteria]
[$SecurityClause]
[$Sort_Order]
end-select


#DEBUG SHOW ' <- Process-Main '
end-procedure Process-Main
!***********************************************************************
begin-procedure New-Employee
#DEBUG show '-> New-Employee'  $EmplID ' , ' #Empl_RCD
   new-page
#DEBUG show '<- New-Employee'
end-procedure New-Employee

!**************************************************
Begin-Procedure Get-Country
#Debug Show ' -> Get-Country '

if $COUNTRY = 'CHE'
   goto End_Country
end-if

   if rtrim($ADDLINE2,' ') = ''
      let $ADDLINE2 = $COUNTRY
      goto End_Country
   end-if

   if rtrim($ADDLINE3,' ') = ''
      let $ADDLINE3 = $COUNTRY
      goto End_Country
   end-if


   if rtrim($ADDLINE31,' ') = ''
      let $ADDLINE31 = $COUNTRY
      goto End_Country
   end-if


   if rtrim($ADDLINE4,' ') = ''
      let $ADDLINE4 = $COUNTRY
      goto End_Country
   end-if


   if rtrim($ADDLINE5,' ') = ''
      let $ADDLINE5 = $COUNTRY
      goto End_Country
   end-if

   End_Country:

#Debug Show ' <- Get-Country '
End-Procedure Get-Country
!***********************************************************************
Begin-Procedure Get-Compensation-Data
#Debug Show ' -> Get-Compensation-Data '

clear-array  name=Calc_Ins
create-array name=Calc_Ins size={SQR_Strings_Array_Size}
  field=PGRP:number
  field=PDESC:char
  field=PNAME:char
  field=PCALC:char
  field=PCURR:char
  field=PDATE:char

  let #infocnt = 0
  let #max_info = 0


Begin-Select on-error=give_warning
#ifdef ORACLE
/*+ INDEX(PBD PS_GPCH_RP_0001)*/
#endif
SS.EMPLID
SS.EMPL_RCD
SS.PIN_NUM
SS.CALC_RSLT_VAL
SS.SLICE_BGN_DT
D.GPCH_BL_PR_GROUP
C.DESCR
C.PIN_NM
PBD.CURRENCY_CD

       let #Pin_Num =  &SS.PIN_NUM
       do Get_Pin_Descr_si03


   let #Comp_Group     = &D.GPCH_BL_PR_GROUP
   let $Comp_Slice_Dt1 = &SS.SLICE_BGN_DT
   do Format-DateTime($Comp_Slice_Dt1, $Comp_Slice_Dt, {DEFDATE}, '', '')
   let $Comp_CurrCode  = &PBD.CURRENCY_CD
   let #Comp_Amount1   = &SS.CALC_RSLT_VAL
   do Format-Number(#Comp_Amount1,$Comp_Amount, '999,999,999.00')


    put #Comp_Group         INTO Calc_Ins(#infocnt) PGRP
    put $Pin_Descr          INTO Calc_Ins(#infocnt) PDESC
    put $Pin_Nm             INTO Calc_Ins(#infocnt) PNAME
    put $Comp_Amount        INTO Calc_Ins(#infocnt) PCALC
    put $Comp_CurrCode      INTO Calc_Ins(#infocnt) PCURR
    put $Comp_Slice_Dt      INTO Calc_Ins(#infocnt) PDATE

    let #infocnt = #infocnt + 1


FROM   PS_GPCH_RP_0001 PBD ,PS_GPCH_BL_PRINT D ,PS_GP_RSLT_ERN_DED SS ,PS_GP_PIN C
WHERE  PBD.EMPLID            = SS.EMPLID
AND    PBD.CAL_RUN_ID        = SS.CAL_RUN_ID
AND    PBD.EMPL_RCD          = SS.EMPL_RCD
AND    PBD.GP_PAYGROUP       = SS.GP_PAYGROUP
AND    PBD.CAL_ID            = SS.CAL_ID
AND    PBD.RSLT_SEG_NUM      = SS.RSLT_SEG_NUM
AND    D.PIN_NUM             = SS.PIN_NUM
AND    D.GPCH_RC_REPORTNAME  = $Ctl_Print
AND    D.EFF_STATUS          = 'A'
AND    D.PIN_NUM             = C.PIN_NUM
#ifdef ORACLE
AND    PBD.GPCH_AL_CPAY_ENDDT = (select /*+ INDEX(PBD1 PS_GPCH_RP_0001)*/ max(PBD1.GPCH_AL_CPAY_ENDDT)
#else
AND    PBD.GPCH_AL_CPAY_ENDDT = (select max(PBD1.GPCH_AL_CPAY_ENDDT)
#endif
                                 from PS_GPCH_RP_0001 PBD1
                                 where PBD1.EMPLID = PBD.EMPLID
                                 and PBD1.EMPL_RCD = PBD.EMPL_RCD
                                 [$gpchsi03_date02])
[$gpchsi03_cond]
#ifdef ORACLE
and    PBD.RSLT_SEG_NUM       = (select /*+ INDEX(PBD11 PS_GPCH_RP_0001)*/ max(PBD11.RSLT_SEG_NUM)
#else
and    PBD.RSLT_SEG_NUM       = (select max(PBD11.RSLT_SEG_NUM)
#endif
                                 from PS_GPCH_RP_0001 PBD11
                                 where PBD11.EMPLID = PBD.EMPLID and
                                 PBD11.EMPL_RCD = PBD.EMPL_RCD and
                                 PBD11.GPCH_AL_CPAY_ENDDT = PBD.GPCH_AL_CPAY_ENDDT and
                                 PBD11.PRD_END_DT = PBD.PRD_END_DT)
AND    PBD.EMPLID   = $EmplID
AND    PBD.EMPL_RCD = #Empl_RCD
End-Select

 let #max_info = #infocnt + 1

#Debug Show ' <- Get-Compensation-Data '
End-Procedure Get-Compensation-Data

!***********************************************************************
begin-procedure Get_Pin_Descr_si03
#DEBUG show '-> Get_Pin_Descr_si03  '

        Lookup Get_Base_Pin_Descr #Pin_Num $Return_Val
        if Not Isnull ($Return_Val)
          Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
          let $Pin_Descr           =  rtrim($Pin_Descr,' ')
          let $Pin_Nm              =  rtrim($Pin_Nm,' ')
        end-if

        if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
           Lookup Get_Trans_Pin_Descr #Pin_Num $Return_Val
           if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
              let $Pin_Descr           =  rtrim($Pin_Descr,' ')
              let $Pin_Nm              =  rtrim($Pin_Nm,' ')
           end-if
        end-if

        if ($BASE_LANG <> $language_cd) and ($language_cd = '')

           if $lang_cd = 'GER'
              Lookup Get_Trans_Pin_Descr_GER #Pin_Num $Return_Val
              if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
                 Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
                 let $Pin_Descr           =  rtrim($Pin_Descr,' ')
                 let $Pin_Nm              =  rtrim($Pin_Nm,' ')
              end-if
           end-if


           if $lang_cd = 'FRA'
              Lookup Get_Trans_Pin_Descr_FRA #Pin_Num $Return_Val
              if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
                 Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
                 let $Pin_Descr           =  rtrim($Pin_Descr,' ')
                 let $Pin_Nm              =  rtrim($Pin_Nm,' ')
              end-if
           end-if


           if $lang_cd = 'ITA'
              Lookup Get_Trans_Pin_Descr_ITA #Pin_Num $Return_Val
              if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
                 Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
                 let $Pin_Descr           =  rtrim($Pin_Descr,' ')
                 let $Pin_Nm              =  rtrim($Pin_Nm,' ')
              end-if
           end-if

           if $lang_cd = 'ENG'
              Lookup Get_Trans_Pin_Descr_ENG #Pin_Num $Return_Val
              if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
                 Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
                 let $Pin_Descr           =  rtrim($Pin_Descr,' ')
                 let $Pin_Nm              =  rtrim($Pin_Nm,' ')
              end-if
           end-if

           #Debug show 'No language ' $EmplId ' , ' $lang_cd ' , ' $Pin_Descr ' , ' $Pin_Nm

        end-if



#DEBUG show '<- Get_Pin_Descr_si03  '
end-procedure Get_Pin_Descr_si03

!*************************************************************************
Begin-Procedure Print_Comp_Insur_Data
#Debug Show ' -> Print_Comp_Insur_Data ' $emplid ' , ' #max_info ' , ' #Print_Option

let #i = 0
While #i < #max_info

    get #Comp_Group     from Calc_Ins(#i) PGRP
    get $Pin_Descr       from Calc_Ins(#i) PDESC
    get $Pin_Nm         from Calc_Ins(#i) PNAME
    get $Comp_Amount    from Calc_Ins(#i) PCALC
    get $Comp_CurrCode  from Calc_Ins(#i) PCURR
    get $Comp_Slice_Dt  from Calc_Ins(#i) PDATE

    #debug show #Comp_Group
 if #Comp_Group = #Print_Option

    if #Print_Option = 1
       #debug show 'One ,' $Pin_Nm ' , ' $Pin_Descr ' , ' $Comp_Amount ' , '  $Comp_CurrCode ' , '  $Comp_Slice_Dt
       print $Pin_Nm              (+1,{col1})
       print $Pin_Descr           (,{col2})
       print $Comp_Amount         (,{col3})
       print $Comp_CurrCode       (,{col42})
       print $Comp_Slice_Dt       (,{col4_3})
    else
       if #Print_Option = 2
       #debug show 'Two ,' $Pin_Nm ' , ' $Pin_Descr ' , ' $Comp_Amount ' , '  $Comp_CurrCode ' , '  $Comp_Slice_Dt
          print $Pin_Nm              (+1,{col3})
          print $Pin_Descr           (,+3)
          print $Comp_Amount         (,{col7})
       end-if
    end-if


 end-if

 Add 1 to #i

End-While

#Debug Show ' <- Print_Comp_Insur_Data '
End-Procedure Print_Comp_Insur_Data
!***********************************************************************
Begin-Procedure Get-Vacation-Data
#Debug Show ' -> Get-Vacation-Data ' $emplid ' , ' #max_info ' , ' #Print_Option

Begin-Select on-error=give_warning
!SAM.GPCH_RP_AMOUNT12   &Vac_Entitled
SAM.GPCH_RP_AMOUNT12   &Vac_Pyear
SAM.GPCH_RP_AMOUNT13   &Vac_Taken
SAM.GPCH_RP_AMOUNT14   &Vac_Balance
!SAM.GPCH_RP_AMOUNT11   &Vac_Pyear
SAM.GPCH_RP_AMOUNT11   &Vac_Entitled
SAM.GPCH_RP_AMOUNT16   &Holiday_Per
SAM.GPCH_RP_AMOUNT17   &Vacation_Per
FROM PS_GPCH_RP_0002 SAM
WHERE SAM.EMPLID     = $EmplId
AND SAM.CAL_RUN_ID   = $Calender_Run_ID
AND SAM.EMPL_RCD     = #Empl_Rcd
AND SAM.GP_PAYGROUP  = $Pay_Group_ID
AND SAM.CAL_ID       = $Calender_ID
AND SAM.RSLT_SEG_NUM = #Rslt_Seg_Nr
End-Select

        do Format-Number (&Vac_Pyear,     $DE_AB_VACENT_PYEAR, 'B999999999.99')
        do Format-Number (&Vac_Entitled,  $DE_AB_VACENT_ENT,   'B999999999.99')
        do Format-Number (&Vac_Taken,     $DE_AB_VACENT_TAKE,  'B999999999.99')
        do Format-Number (&Vac_Balance,   $DE_AB_VACENT_BAL,   'B999999999.99')
        do Format-Number (&Holiday_Per,   $DE_AB_HOLIDAY_PER,  'B99.9999')
        do Format-Number (&Vacation_Per,  $DE_AB_VACATION_PER, 'B99.9999')

        let $DE_AB_VACENT_PYEAR = ltrim($DE_AB_VACENT_PYEAR,' ')
        let $DE_AB_VACENT_ENT   = ltrim($DE_AB_VACENT_ENT,' ')
        let $DE_AB_VACENT_TAKE  = ltrim($DE_AB_VACENT_TAKE,' ')
        let $DE_AB_VACENT_BAL   = ltrim($DE_AB_VACENT_BAL,' ')
        let $DE_AB_HOLIDAY_PER  = ltrim($DE_AB_HOLIDAY_PER,' ')
        let $DE_AB_VACATION_PER = ltrim($DE_AB_VACATION_PER,' ')

#Debug Show ' <- Get-Vacation-Data '
End-Procedure Get-Vacation-Data
!***********************************************************************
Begin-procedure Get-Description-Job
#DEBUG show '->  Get-Description-Job '

Begin-Select on-error=give_warning
DESCR   &JB_BU_DES
FROM PS_BUS_UNIT_TBL_HR
WHERE BUSINESS_UNIT= $JB_BUSINESS_UNIT
End-Select

  let  $JB_BU_DESCR = rtrim(&JB_BU_DES,' ')
!--------------------------------

!Begin-Select
!DESCR   &JB_CU_DES
!FROM PS_COST_UNIT_TBL
!WHERE COST_UNIT_CD= $JB_COST_UNIT_CD
!End-Select

  let  $JB_CU_DESCR = rtrim($JB_COST_UNIT_CD,' ')
!--------------------------------

Begin-Select on-error=give_warning
AD.DESCR   &JB_DEPT_DES
FROM PS_DEPT_TBL AD
WHERE AD.DEPTID= $JB_DEPTID
AND   AD.EFFDT = (SELECT MAX(EFFDT) FROM PS_DEPT_TBL AC
                  WHERE AC.DEPTID=AD.DEPTID
                  AND   AC.EFFDT <=$ReportEndDate)
End-Select

  let  $JB_DEPT_DESCR = rtrim(&JB_DEPT_DES,' ')
!--------------------------------

Begin-Select on-error=give_warning
AL.DESCR   &JB_LOC_DES
FROM PS_LOCATION_TBL AL
WHERE AL.LOCATION= $JB_LOCATION
AND   AL.EFFDT = (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL ALS
                  WHERE ALS.LOCATION=AL.LOCATION
                  AND   ALS.EFFDT <=$ReportEndDate)
End-Select

  let  $JB_LOC_DESCR = rtrim(&JB_LOC_DES,' ')

!--------------------------------
Begin-Select on-error=give_warning
AJ.DESCR   &JB_JOBCODE_DES
FROM PS_JOBCODE_TBL AJ
WHERE AJ.JOBCODE = $JB_JOBCODE
AND   AJ.EFFDT   = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL AJS
                    WHERE AJS.JOBCODE=AJ.JOBCODE
                    AND   AJS.EFFDT <=$ReportEndDate)
End-Select

  let  $JB_JOBCODE_DESCR = rtrim(&JB_JOBCODE_DES,' ')

!--------------------------------
!FMB
!FMB Begin-Select
!FMB ORIGIN_CHE   &JB_ORIGIN_CHE
!FMB FROM PS_PLACE_ORIG_CHE CJ
!FMB WHERE CJ.EMPLID        = $EmplID
!FMB AND   CJ.MAIN_ORIG_CHE = 'Y'
!FMB End-Select

!FMB let $HC_PL_ORIGIN          = rtrim(&JB_ORIGIN_CHE,' ')

!--------------------------------
!FMB
!FMB Begin-Select
!FMB COUNTRY_PASSPORT   &JB_COUNTRY
!FMB FROM PS_CITIZEN_PSSPRT PP
!FMB WHERE PP.EMPLID        = $EmplID
!FMB End-Select
!FMB
!FMB    let $Nation = rtrim(&JB_COUNTRY,' ')
!FMB
!FMB    if  $Nation = ''
!FMB        let $Nation = 'CHE'
!FMB    end-if

!--------------------------------

Begin-Select on-error=give_warning
PH.PHONE  &PH_PHONE
FROM PS_PERSONAL_PHONE PH
WHERE PH.EMPLID  = $EmplID
AND   PH.PHONE_TYPE = 'BUSN'
End-Select

 let $Busn_Phone  = rtrim(&PH_PHONE,' ')
!--------------------------------

Begin-Select on-error=give_warning
PHP.PHONE  &PHP_PHONE
FROM PS_PERSONAL_PHONE PHP
WHERE PHP.EMPLID  = $EmplID
AND   PHP.PHONE_TYPE = 'HOME'
End-Select

 let $Priv_Phone  = rtrim(&PHP_PHONE,' ')

#DEBUG show '<-  Get-Description-Job '
End-procedure Get-Description-Job

!***********************************************************************
begin-procedure Get-National-ID
#DEBUG show '->  Get-National-ID '

   let $Nat_ID = ''

begin-select on-error=give_warning
NID.NATIONAL_ID

   let $Nat_ID = rtrim(ltrim(&NID.NATIONAL_ID,' '),' ')

   if $Nat_ID <> ''

      let $Nat_ID= substr($Nat_ID,1,3)||'.'||
                       substr($Nat_ID,4,2)||'.'||
                       substr($Nat_ID,6,3)||'.'||
                       substr($Nat_ID,9,3)
   end-if

from  PS_PERS_NID NID
where NID.EMPLID           = $EmplID
and   NID.NATIONAL_ID_TYPE = 'AHV'
and   NID.COUNTRY = 'CHE'
end-select

#DEBUG show '<-  Get-National-ID '
end-procedure Get-National-ID
!******************************************************************************************
begin-procedure Print-Gpchsi03-Report
#DEBUG show '-> Print-Gpchsi03-Report '

  do Get-Language-Descr

if $FADDLINE31 = 'CHE'
   let $FADDLINE31 = ' '
end-if

if $SADDLINE31 = 'CHE'
   let $SADDLINE31 = ' '
end-if

if $Sex = 'M'
    let $Anrede = $HD_MR
else
    let $Anrede = $HD_MRS
end-if

do Format-DateTime($Birth_DT, $Birth_DT1, {DEFDATE}, '', '')
do Format-DateTime($Hire_DT, $Hire_DT1, {DEFDATE}, '', '')
do Format-DateTime($Term_DT, $Term_DT1, {DEFDATE}, '', '')

do Format-Number(#Empl_RCD,$EmplRcd,'888')
let $EmplID_Rcd = rtrim($EmplID,' ') || '-' || $EmplRcd

print '_'                       (+1,{col1},{col8})      fill
print $Person_Lbl               (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill



if $language_cd = 'ITA'
  print $Empl                     (+1,{col1})
  print $EmplID_Rcd               (,{col2})
  print $Birth                    (,{col3})
  print $Birth_DT1                (,96)

  print $Prefix                   (+1,{col1})
  print $Anrede                   (,{col2})
  print $HD_BIRTHPLACE            (,{col3})
  print $Birthplace               (,96)

  print $First_Name               (+1,{col1})
  print $FirstName                (,{col2})
  print $HD_PLACE_ORIGIN          (,{col3})
  print $HC_PL_ORIGIN             (,96)

  print $Last_Name                (+1,{col1})
  print $LastName                 (,{col2})

  print $Zivil_Lbl                (,{col3})
!do Get-Translate-Val
!print $MarStat                  (,{col6})

  print $ZivStat                  (,96)

  print $Adress                   (+1,{col1})
  print $FADDLINE2                (,{col2})
  print $Sex_Lbl                  (,{col3})
  print $SexLng                   (,96)

  print $FADDLINE3                (+1,{col2})
  print $Nation_Lbl               (,{col3})
  print $Nation                   (,96)

  print $FADDLINE31                (+1,{col2})
  print $HD_PERMIT_STATUS         (,{col3})
  print $Visa_Permit              (,96)
 
  print $FADDLINE4                (+1,{col2})
  print $H_VALID_UNTIL            (,{col3})
  print $Expiratn_Dt              (,96)

  print $FADDLINE5                (+1,{col2})
  print $H_LANG_CD                (,{col3})
  print $Lang_cd_desc             (,96)

  print $HD_MAIL_ADDRESS          (+1,{col1})
  print $SADDLINE2                (,{col2})
  print $HD_ORIG_HIRE_DT          (,{col3})
  print $Orig_Hire_Dt             (,96)

  print $SADDLINE3                (+1,{col2})
  print $Hire_Lbl                 (,{col3})
  print $Hire_DT1                 (,96)

  print $SADDLINE31               (+1,{col2})
  print $Term_Lbl                 (,{col3})
  print $Term_DT1                 (,96)

  print $SADDLINE4               (+1,{col2})
  print $HD_VAC_ENT_PY            (,{col3})
  print $DE_AB_VACENT_PYEAR       (,96)

  print $SADDLINE5               (+1,{col2})
  print $HD_VAC_ENT_CY            (,{col3})
  print $DE_AB_VACENT_ENT         (,96)

!  print $NNSS_Nr                  (+1,{col1})
!  print $NNSS_ID                  (,{col2})
  print $HD_VAC_VAC_TK            (+1,{col3})
  print $DE_AB_VACENT_TAKE        (,96)

  print $Covered_Nr               (+1,{col1})
  if ($NNSS_ID <> '')
    print $NNSS_ID                   (,{col2})
  else
    print $Nat_ID                   (,{col2})
  end-if


  print $HD_VAC_VAL_BL            (,{col3})
  print $DE_AB_VACENT_BAL         (,96)  

  print $PTelefon                 (+1,{col1})
  print $Priv_Phone               (,{col2})

  print $BTelefon                 (+1,{col1})
  print $Busn_Phone               (,{col2})

 else
 
  print $Empl                     (+1,{col1})
  print $EmplID_Rcd               (,{col2})
  print $Birth                    (,{col3})
  print $Birth_DT1                (,{col6})

  print $Prefix                   (+1,{col1})
  print $Anrede                   (,{col2})
  print $HD_BIRTHPLACE            (,{col3})
  print $Birthplace               (,{col6})

  print $First_Name               (+1,{col1})
  print $FirstName                (,{col2})
  print $HD_PLACE_ORIGIN          (,{col3})
  print $HC_PL_ORIGIN             (,{col6})

  print $Last_Name                (+1,{col1})
  print $LastName                 (,{col2})

  print $Zivil_Lbl                (,{col3})
!do Get-Translate-Val
!print $MarStat                  (,{col6})

  print $ZivStat                  (,{col6})

  print $Adress                   (+1,{col1})
  print $FADDLINE2                (,{col2})
  print $Sex_Lbl                  (,{col3})
  print $SexLng                   (,{col6})

  print $FADDLINE3                (+1,{col2})
  print $Nation_Lbl               (,{col3})
  print $Nation                   (,{col6})

  print $FADDLINE31                (+1,{col2})
  print $HD_PERMIT_STATUS         (,{col3})
  print $Visa_Permit              (,{col6})
 
  print $FADDLINE4                (+1,{col2})
  print $H_VALID_UNTIL            (,{col3})
  print $Expiratn_Dt              (,{col6})

  print $FADDLINE5                (+1,{col2})
  print $H_LANG_CD                (,{col3})
  print $Lang_cd_desc             (,{col6})

  print $HD_MAIL_ADDRESS          (+1,{col1})
  print $SADDLINE2                (,{col2})
  print $HD_ORIG_HIRE_DT          (,{col3})
  print $Orig_Hire_Dt             (,{col6})

  print $SADDLINE3                (+1,{col2})
  print $Hire_Lbl                 (,{col3})
  print $Hire_DT1                 (,{col6})

  print $SADDLINE31               (+1,{col2})
  print $Term_Lbl                 (,{col3})
  print $Term_DT1                 (,{col6})

  print $SADDLINE4               (+1,{col2})
  print $HD_VAC_ENT_PY            (,{col3})
  print $DE_AB_VACENT_PYEAR       (,{col6})

  print $SADDLINE5               (+1,{col2})
  print $HD_VAC_ENT_CY            (,{col3})
  print $DE_AB_VACENT_ENT         (,{col6})

!  print $NNSS_Nr                  (+1,{col1})
!  print $NNSS_ID                  (,{col2})
  print $HD_VAC_VAC_TK            (+1,{col3})
  print $DE_AB_VACENT_TAKE        (,{col6})

  print $Covered_Nr               (+1,{col1})

 if ($NNSS_ID <> '')
    print $NNSS_ID                   (,{col2})
  else
    print $Nat_ID                   (,{col2})
  end-if

  print $HD_VAC_VAL_BL            (,{col3})
  print $DE_AB_VACENT_BAL         (,{col6})  

  print $PTelefon                 (+1,{col1})
  print $Priv_Phone               (,{col2})

  print $BTelefon                 (+1,{col1})
  print $Busn_Phone               (,{col2})

 end-if



print ' '                       (+1,{col7}

!-----------------------------------------------------------------
!JOB DATA

print '_'                       (+2,{col1},{col8})      fill
print $H_JOB_DATA               (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill

print $HD_PYENT                 (+1,{col1})
print $COMPANY_DESCR            (,{col2})
print $H_CONTRACT               (,{col3})
print $JB_CONT_TYPE             (,{col6})

print $H_BUS_UNIT               (+1,{col1})
print $JB_BU_DESCR              (,{col2})
print $H_CONTRACT_DT            (,{col3})
print $JB_CONT_END_DT           (,{col6})

print $H_COST_UNIT              (+1,{col1})
print $JB_CU_DESCR              (,{col2})
print $HD_CALC_TYPE             (,{col3})
print $Comp_Freq                (,{col6})

print $H_DEPT                   (+1,{col1})
print $JB_DEPT_DESCR            (,{col2})
print $H_JOBCODE                (,{col3})
print $JB_JOBCODE_DESCR         (,{col6})

print $H_LOCATION               (+1,{col1})
print $JB_LOC_DESCR             (,{col2})
print $H_GRADE                  (,{col3})
print $JB_GRADE                 (,{col6})

print $H_CANTON                 (+1,{col1})
print $Work_Canton              (,{col2})
print $HD_GRADE_SINCE           (,{col3})
print $GRADE_ENT_DT             (,{col6})

print $HD_STEP                  (+1,{col3})
print $Step1                    (,{col6})

do Format-Number(#JB_FTE,$JB_FTE, '999.00')
let $JB_FTE = $JB_FTE || ' %'
do Format-Number(#JB_STD_HOURS,$JB_STD_HOURS1, '999.00')

print $Grade_Lbl                (+1,{col3})
print $JB_FTE                   (,{col6})
print $H_STD_HOURS              (+1,{col3})
print $JB_STD_HOURS1            (,{col6})




!print $JB_FAK_CANTON            (,{col2})

!----------------------------------------------------------------------
!Insurance Data
print '_'                       (+2,{col1},{col8})      fill
print $Insuered_Lbl             (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill

print $AHV_Lbl                  (+1,{col1})
print $AHV_Code                 (,{col2})
print $BVG_Lbl                  (,{col3})
print $BVG_Code                 (,{col6})


print $ALV_Lbl                  (+1,{col1})
print $ALV_Code                 (,{col2})
print $KK_Monay_Lbl             (,{col3})
print $KK_Traggeld              (,{col6})


print $Suva_Lbl                 (+1,{col1})
print $S_Code                   (,{col2})
print $H_KTG_PROVCD             (,{col3})
print $KTG_PROVCD               (,{col6})

print $HD_YEARLY_LIMITS         (+1,{col1})
print $Yearly_Limit             (,{col2})

   let #Print_Option = 2
   do Print_Comp_Insur_Data

!----------------------------------------------------------------------
!Fak & Source Data
print '_'                       (+2,{col1},{col8})      fill
print $HD_FAK_SOURCE_LBL        (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill



print $HD_FAK_ELIG              (+1,{col1})

 if $language_cd = 'FRA'
    print $Fak_Elig                 (,37)
 else 
    print $Fak_Elig                 (,{col2})
 end-if


print $H_TX_VILLAGE_CD          (,{col3})
print $TX_VILLAGE_CD            (,{col6})

print $HD_FAK_CANTON            (+1,{col1})

 if $language_cd = 'FRA'
   print $Fak_Canton               (,37)
 else 
   print $Fak_Canton               (,{col2})
 end-if

print $Quell_Lbl                (,{col3})
print $Quell_Code               (,{col6})

print $H_STAX_CANTN             (+1,{col1})

 if $language_cd = 'FRA'
   print $STAX_CANTN               (,37)
 else
   print $STAX_CANTN               (,{col2})
 end-if


print $H_EXEMPT_TAX             (,{col3})
print $EXEMPT_TAX               (,{col6})

   do Print-Child-Allowance
   do Print-Bank-Stuff

print '_'                       (+2,{col1},{col8})      fill
print $Pay_Adress_Lbl           (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill

   let #Print_Option = 1
   do Print_Comp_Insur_Data

#DEBUG show '<- Print-Gpchsi03-Report '
end-procedure Print-Gpchsi03-Report
!**********************************************************************************************
begin-procedure Print-Child-Allowance
#DEBUG show '-> Print-Child-Allowance '

print '_'                       (+2,{col1},{col8})      fill
print $Children_Lbl             (+1,{col1}) bold
print '_'                       (+1,{col1},{col8})      fill

print $H_KANTON                 (+1,{col1})
print $Child_Lbl                (,{col1_1})

print $Name_Lbl                 (,{col21})
print $Birth_Lbl                (,{col41})
print $H_STUDENT                (,{col4_2})
!print $H_LEGAL_DT               (,{col4_2})

print $H_EDU_END_DT             (,{col4_3})
!print $H_ELIG                   (,{col4_4})

let #Counter = 0
begin-select on-error=give_warning
CA1.GPCH_TX_CANTON
CA2.NAME
CA2.STUDENT
CA2.BIRTHDATE
CA2.GPCH_CA_EDU_END_DT
CA2.GPCH_CA_LEGAL_END
CA2.GPCH_CA_CA_ELIG

  let $CA_KANTON       = rtrim(&CA1.GPCH_TX_CANTON,' ')
  let #Counter         = #Counter + 1
  let $Child_Name      = rtrim(&CA2.NAME,' ')
  let $CA_STUDENT      = rtrim(&CA2.STUDENT,' ')
  let $Child_Birth_DT  = &CA2.BIRTHDATE
  let $EDU_END_DT      = &CA2.GPCH_CA_EDU_END_DT
  let $LEGAL_END       = &CA2.GPCH_CA_LEGAL_END
  let $CA_ELIG         = rtrim(&CA2.GPCH_CA_CA_ELIG,' ')
  if $CA_STUDENT = 'Y'
          let $CA_STUDENT = $HD_YES
    else
          let $CA_STUDENT = $HD_NO
  end-if


  print $CA_KANTON              (+1,{col1})
  print #Counter                (,{col1_1})   edit 99
  print '.'                     ()
  print $Child_Name             (,{col21},24)


  do Format-DateTime($Child_Birth_DT, $Child_Birth_DT1, {DEFDATE}, '', '')
  do Format-DateTime($EDU_END_DT, $EDU_END_DT1, {DEFDATE}, '', '')
  do Format-DateTime($LEGAL_END, $LEGAL_END1, {DEFDATE}, '', '')
  print $Child_Birth_DT1         (,{col41})
  print $CA_STUDENT              (,{col4_2})
  !print $LEGAL_END1             (,{col4_2})
  print $EDU_END_DT1             (,{col4_3})
  !print $CA_ELIG                (,{col4_4})
  let #count1 = #count1 + 1
  !do Print_Temp_Data

FROM PS_GPCH_CA_DATA1 CA1 , PS_GPCH_CA_DAT_VW CA2
WHERE CA1.EMPLID   = CA2.EMPLID
AND   CA1.EMPL_RCD = CA2.EMPL_RCD
AND   CA1.EFFDT    = CA2.EFFDT
AND   CA1.EFFDT    = (SELECT MAX(EFFDT) FROM PS_GPCH_CA_DATA1 CAD
                      WHERE CAD.EMPLID   = CA1.EMPLID
                      AND   CAD.EMPL_RCD = CA1.EMPL_RCD
                      AND   CAD.EFFDT   <= $ReportEndDate)
AND   CA1.EMPLID   = $EmplID
ORDER BY  CA2.BIRTHDATE
end-select

#DEBUG show '<- Print-Child-Allowance '
end-procedure Print-Child-Allowance


!***********************************************************************
begin-procedure Print-Bank-Stuff
#DEBUG show '-> Print-Bank-Stuff '  $EmplId ' , ' #Empl_Rcd ' , ' $Cal_Run_Id_Crit ' , '  $Cal_Id_Crit ' , ' $Ctl_Payentity
print '_'                       (+2,{col1},{col8})      fill
print $Bank_Lbl                 (+1,{col1}) bold

print '_'                       (+1,{col1},{col8})      fill

print $HD_BNK_SEQ               (+1,{col1})
print $HD_BANK_CD_NR            (,27)
print $Bank_Lbl                 (,39)
print $HD_ACCNO                 (,67)
print $HD_AMOUNT                (,89)
print $HD_CURRENCY              (,{col4_3})
print $HD_PERCENT               (,{col4_4})
print $HD_AMOUNT                (,{col4_6})



 let #bnk_seq = 0

Begin-Select on-error=give_warning
A.BANK_NM
PS.GPCH_BK_TRNST_RCVR
PS.GPCH_BK_ACCT_RCVR
PS.GP_PMT_AMT
PS.DEBIT_DT
PS.CURRENCY_CD
C.PERCENT_RATE
C.DISTRIB_AMT

  let #bnk_seq = #bnk_seq + 1
  do Format-Number (#bnk_seq, $bnk_seq, '99')
  let $Tran_Bank_Nm  =  rtrim(&A.BANK_NM ,' ')
  let $Tran_Bank_cd  =  rtrim(&PS.GPCH_BK_TRNST_RCVR,' ')
  let $Tran_Bank_Ac  =  rtrim(&PS.GPCH_BK_ACCT_RCVR ,' ')
  let #Tran_Bank_Amt =  &PS.GP_PMT_AMT
  let $Tran_Curr_Cd  =  rtrim(&PS.CURRENCY_CD,' ')
  let #PERCENT_RATE  =  &C.PERCENT_RATE
  let #DISTRIB_AMT   =  &C.DISTRIB_AMT

  do Format-Number (#Tran_Bank_Amt, $Tran_Bank_Amt, '9,999,999.99mi')
  do Format-Number (#DISTRIB_AMT  , $DISTRIB_AMT, '9,999,999.99mi')
  do Format-Number (#PERCENT_RATE , $PERCENT_RATE, '999.99')

  print $bnk_seq        (+1,{col1})
  print $Tran_Bank_cd   (,27)
  print $Tran_Bank_Nm   (,39)
  print $Tran_Bank_Ac   (,67)
  print $Tran_Bank_Amt  (,{col42})
  print $Tran_Curr_Cd   (,{col4_3})
  print $PERCENT_RATE   (,{col4_4})
  print $DISTRIB_AMT    (,{col4_5})


FROM PS_GPCH_BK_XFER_EE PS , PS_BANK_EC_TBL A , PS_GP_NET_DIST_DTL C
WHERE PS.GPCH_BK_CNTRY_RCVR = A.COUNTRY_CD
AND   PS.GPCH_BK_TRNST_RCVR = A.BANK_CD
AND   PS.EMPLID             = C.EMPLID
AND   PS.EMPL_RCD           = C.EMPL_RCD
AND   PS.GPCH_BK_SEQ_NBR    = C.INSTANCE
and   C.EFFDT               = (SELECT MAX(ND1.EFFDT) FROM PS_GP_NET_DIST_DTL ND1
                               WHERE C.EMPLID   = ND1.EMPLID
                               AND   C.EMPL_RCD = ND1.EMPL_RCD
                               AND   C.RUN_TYPE = ND1.RUN_TYPE
                               AND   C.INSTANCE = ND1.INSTANCE
                               AND   ND1.EFFDT <= PS.SEG_END_DT )
AND   PS.EMPLID             = $EmplId
AND   PS.EMPL_RCD           = #Empl_Rcd
AND   PS.PAY_ENTITY         = $Ctl_Payentity
[$Cal_Run_Id_Crit_PS]
[$Cal_Id_Crit_PS]
End-Select



#DEBUG show '<- Print-Bank-Stuff '
end-procedure Print-Bank-Stuff

!****************************************************************
begin-procedure Get-Nationality
#DEBUG show '-> Get-Nationality '

begin-select distinct on-error=give_warning
XPCT.COUNTRY
   let $Nation = rtrim(ltrim(&XPCT.COUNTRY,' '),' ')

from  PS_CITIZENSHIP XPC,
      PS_COUNTRY_TBL XPCT
where XPC.EMPLID   = $EmplID
and   XPCT.COUNTRY = XPC.COUNTRY
end-select

#DEBUG show '<- Get-Nationality '
end-procedure Get-Nationality

!***********************************************************************
Begin-heading   6

#Include 'gpchut08.sqc'

do Format-DateTime($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Format, {DEFDATE}, '', '')
do Format-DateTime($gpchsi03_date, $gpchsi03_date1, {DEFDATE}, '', '')

do Get-ResolnId($sqr-program,$Reslnid) !SYED
   
    print $PROCS_NO (-1,10)
  print $prcs_process_instance (0, {ColM})    

   print $RESLN_ID (+1,10)
   If $Reslnid <> '******'

   print $Reslnid (0, {ColM}) 
   End-If

print $H_PAYENT            (+1,{col1})
print $Cpdescr             (,{col2})

print $HD_FROM             (+1,{col1})
print $Header_Date         (,{col2})

print $HD_FOR              (,{col4_1})
print $Ctl_Curr_Format     (,+3)

print $LG_PRINT_OPT        (,{col6})
print $Report_Opt_Descr    (,{col71})


End-heading
!***********************************************************************
Begin-procedure Get-Language-Descr

evaluate $LANG_CD
          when = 'CFR'
               let $Lang_cd_desc =  $LC_CAN_FRENCH
               break
          when = 'DUT'
               let $Lang_cd_desc =  $LC_DUTCH
               break
          when = 'ENG'
               let $Lang_cd_desc =  $LC_ENGLISH
               break
          when = 'ESP'
               let $Lang_cd_desc =  $LC_SPANISH
               break
          when = 'FRA'
               let $Lang_cd_desc =  $LC_FRENCH
               break
          when = 'GER'
               let $Lang_cd_desc =  $LC_GERMAN
               break
          when = 'INE'
               let $Lang_cd_desc =  $LC_INTL_ENG
               break
          when = 'ITA'
               let $Lang_cd_desc =  $LC_ITALIAN
               break
          when = 'JPN'
               let $Lang_cd_desc =  $LC_JAPANESE
               break
          when = 'POR'
               let $Lang_cd_desc =  $LC_PORTUGUESE
               break
          when-other
               break
 end-evaluate

End-procedure Get-Language-Descr

!****************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHSI03'
               do Get_Eng_GPCHSI03
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHSI03
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHSI03'
               do Get_Ger_GPCHSI03
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHSI03
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHSI03'
               do Get_Ita_GPCHSI03
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHSI03
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHSI03'
               do Get_Fra_GPCHSI03
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHSI03
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!***********************************************************************

#include 'gpchcu03.sqc'  !custom override security
#include 'gpchut01.sqc'  !Get Strings Values
#include 'gpchut02.sqc'  !Pin Trans Description
#include 'gpchut03.sqc'  !ask input parameters
#include 'gpchut04.sqc'  !get pay entity data
#include 'gpchut06.sqc'  !get run control parameter values
#include 'gpchut07.sqc'  !Log Output Selection
#include 'gpchsi3s.sqc'  !Get Strings Values for GPCHSI03
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB


#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'number.sqc'    !routines for formatting numbers.
#include 'datetime.sqc'  !routines for formatting dates and times.
#include 'stdapi.sqc'    !routines for process scheduler manipulation.
#include 'sqrtrans.sqc'  !routines for language translation.
#include 'readxlat.sqc'  !routines for xlattable translation.
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'   !validate date routine
