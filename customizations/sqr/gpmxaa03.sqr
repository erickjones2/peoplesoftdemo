!***********************************************************************
!  GPMXAA03:  Form 37                                                  *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2014/08/18:20:30:01                                 *
!       $Release:  HR92                                                *
!      $Revision:  103                                                 *
!                                                                      *
!***********************************************************************
!***********************************************************************
!  1. $S101 > SI EL PATRÓN REALIZO...                                  *
!  2. $S102 > TARIFA UTILIZADA                                         *
!  3. $S103 > ..trabajador sindicalizado..                             *
!  4. $S104 > Area geografica del salario minimo                       *
!  5. $S105 > Clave de la entidad federativa dónde presta sus servicios*
!  6.  S106 > Proporcion del subsidio: Vigente                         *
!  7.  S107 > 1991                                                     *
!  8. $S108 > Fraccion I                                               *
!  9. $S109 > Fraccion II                                              *
! 10. $S110 > Aplicada                                                 *
! 11. $S111 > Otros Patrones 1                                         *
! 12. $S112 > Otros Patrones 2                                         *
! 13. $S113 > Otros Patrones 3                                         *
!  A. #S2A  > TOTAL DE SUELDOS, SALARIOS Y                             *  
!  B. #S2B  > IMPUESTO LOCAL                                           *
!  C. #S2C  > INGRESOS EXENTOS                                         *
!  D. #S2D  > APORTACIONES VOLUNTARIAS DEDUCIBLES                      *
!  E. #S2E  > INGRESOS NO ACUMULABLES                                  *
!  F. #S2F  > INGRESOS ACUMULABLES                                     *
!  G. #S2G  > ISR CONFORME A LA TARIFA ANUAL                           *
!  H. #S2H  > SUBSIDIO ACREDITABLE                                     *
!  I. #S2I  > MONTO DEL SUBSIDIO NO ACREDITABLE                        *
!  J. #S2J  > SUBSIDIO PARA EL EMPLEO                                  *
!  K. #S2K  > MONTO DEL SUBSIDIO ACREDITABLE FRACCIÓN III              *
!  L. #S2L  > MONTO DEL SUBSIDIO ACREDITABLE FRACCIÓN IV               *
!  M. #S2M  > IMPUESTO SOBRE INGRESOS ACUMULABLES     ??               *
!  N. #S2N  > IMPUESTO SOBRE INGRESOS NO ACUMULABLES  ??               *
!  O. #S2O  > IMPUESTO SOBRE LA RENTA                                  *
!  P. #S2P  > IMPUESTO RETENIDO AL CONTRIBUYENTE                       *
!---------------------- PAGOS POR SEPARACION --------------------------*
!  Q. #S3Q  > MONTO TOTAL DE PAGO EN                                   *
!  R. #S3R  > INGRESOS TOTALES POR                                     *
!  S. #S3S  > MONTO DIARIO PERCIBIDO                                   *
!  T. #S3T  > CANTIDAD QUE SE HUBIERA                                  *
!  U. #S3U  > NUMERO DE DIAS                                           *
!  V. #S3V  > INGRESOS EXENTOS                                         *
!  W. #S3W  > INGRESOS GRAVABLES                       0               *
!  X. #S3X  > INGRESOS ACUMULABLES                                     *
!  Y. #S3Y  > INGRESOS NO ACUMULABLES                                  *
!  Z. #S3Z  > IMPUESTO RETENIDO                                        *
!  a. #S3a  > MONTO TOTAL PAGADO                                       *
!  b. #S3b  > NUMERO DE AÑOS DE SERVICIO DEL TRABAJADOR                *
!  c. #S3c  > INGRESOS EXENTOS                                         *
!  d. #S3d  > INGRESOS GRAVADOS                                        *
!  e. #S3e  > INGRESOS ACUMULABLES                                     *
!  f. #S3f  > IMPUESTO CORRESPONDIENTE AL ULTIMO SUELDO MENSUAL ORDINA *
!  g. #S3g  > INGRESOS NO ACUMULABLES                                  *
!  h. #S3h  > IMPUESTO RETENIDO                                        *
!--------------------- INGRESOS ASIMILADOS A SALARIOS -----------------*
!  i. #S4i  > INGRESOS ASIMILADOS                      0               *
!  j. #S4j  > IMPUESTO RETENIDO DURANTE EL EJERCICIO   0               *
!--------------------- INGRESOS EN ACCIONES ---------------------------*
!  k. #S4k  > VALOR DE MERCADO DE LAS ACCIONES                         *
!  l. #S4l  > PRECIO ESTABLECIDO AL OTORGARSE                          *
!  m. #S4m  > INGRESO ACUMULABLE                                       *
!  n. #S4n  > IMPUESTO RETENIDO                                        *
!--------------------- IMPUESTO SOBRE LA RENTA POR SUELDOS Y SALARIOS--*
!  Q1 #S6Q1  > SUMA DEL INGRESO GRAVADO                                *
!  R1 #S6P1  > SUMA DEL INGRESO EXCENTO                                *
!  S1 #S6R1  > SUMA DE INGRESOS POR SUELDOS Y SALARIOS                 *
!  T1 #S6S1  > MONTO DEL IMPUESTO LOCAL                                *
!  U1 #S6U1  > IMPUESTO RETENIDO DURANTE EL EJERCICIO                  *
!  V1 #S6V1  > IMPUESTO RETENIDO POR OTROS PATRONES                    *
!  W1 #S6W1  > SALDO A FAVOR .. QUE EL PATRON COMPENSARA               *
!  X1 #S6X1  > SALDO A FAVOR DEL EJERCICIO ANTERIOR                    *
!  Y1 #S6Y1  > SUMA DE LAS CANTIDADES POR CONCEPTO DE CREDITO          *
!  Z1 #S6Z1  > CREDITO AL SALARIO ENTREGADO EN EFECTIVO                *
!  a1 #S6a1  > MONTO TOTAL DE INGRESOS ... PREVISION SOCIAL            *
!  b1 #S6b1  > SUMA DE INGRESOS EXENTOS ...                            *
!***********************************************************************
#define c1       2
#define c1a      4
#define c1z     15
#define c1b     27
#define c1c     15
#define c2       6
#define c2a      8
#define c3      28
#define c36     36
#define c3a     38
#define c40     40
#define c4      50
#define c4a     48
#define c4b     55
#define c4c     57
#define c5      62
#define c5a     64
#define c6      65
#define c6a     93
#define c6a1    96
#define c6a2   104
#define c6b1   112
#define c6b2   115
#define c7     110
#define c7b    108
#define c80    80
#define c88    88

#define r0       9
#define r1      12
#define r2      16
#define r2a     31
#define r3      28

!--- 2009--- OTROS DATOS INFORMATIVOS
#define rInfo   53

!--- 2009--- IMPUESTO SOBRE LA RENTA
#define r4      67 !53 LPM

!--- 2009--- PAGOS POR SEPARACION
#define r5      112  !98 LPM

!--- 2009 --- Leyendas
#define r6      139 !125 LPM
#define r6a     130
#define r8     110

!--- 2009 ---
#define r9     159   !143 LPM
#define r10    161   !144 LPM

#define r7      9
#define r11     30
#define r11a    39
#define r12     54

!--- IMPUESTO SOBRE LA RENTA POR SUELDOS Y SALARIOS
#define r12a    66
#define r13     103
#define r13a   135
#define r14    137
#define r8a    120

#define l1      16
#define l1a     24
#define l1b     14
#define l1c     14
#define l2      35
#define l3      60
#define l39     39
#define 13a     80
#define l40     40
#define l4      95
#define l4a     83
#define l4b     22
#define l4c     47
#define l4d     70
#define l5     120
#define l5a    107
#define l5b    107

#define g1       3
#define g2      10
#define g3      25

#include 'setenv.sqc'

begin-setup
#include 'setupdb.sqc'  
!  Declare-Printer   THIS_REPORT
!    type          = HPLASERJET
!    symbol-set    = 19U
!    font          = 5
!    point-size    = 4
!  End-Declare

  Declare-Layout THIS_REPORT
    Orientation= portrait
    Top-Margin= .1
    Left-Margin=.2
    Bottom-Margin = .1
    Max-Columns =125
    Line-Height = 4.6
    Char-Width  = 4.8 
  End-Declare

  Declare-Report THIS_REPORT
    !Printer-Type=HPLASERJET
    LayOut=THIS_REPORT
  End-Declare
end-setup

begin-program
  do Declare-Print
  do Init-Report
  do Select-Parameters
  do PreLoadAcumMembers
  do Build-Query2
  do Select-Values
  do CleanPreLoadAcum
  do Stdapi-Term
  date-time () hh:mi:ss &timeEnded
  display 'Report Ended: ' noline
  display &timeEnded
  do Reset
end-program

begin-procedure Init-Report
  move 'GPMXAA03' to $ReportID
  move 'Constancia de Percepciones y Retenciones ' to $ReportTitle1
  move 'Para Efectos Del Impuesto Sobre la Renta'  to $ReportTitle2
  move 'Ver. 2014-PUM9.01' to $ReportVersion
  move '1' to $ReportDateType
  move '1' to $Reportyear4
  do Init-DateTime
  do Init-Number
  do Stdapi-Init
  do Get-Current-DateTime
  display $ReportID
  display $ReportTitle1 noline
  display $ReportTitle2
  display $ReportVersion
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
  display ' '
end-procedure Init-Report

!**************************************
begin-procedure Select-Parameters
#debug show '* Select-Parameters *'
!**************************************
begin-select
P.EMPLID
P.COMPANY
P.GPMX_BALANCE_YEAR
P.BUSINESS_UNIT
P.GP_PAYGROUP
P.EMPL_STATUS
P.DEPTID
P.LOCATION
P.GPMX_EE_IND
P.PROCESS_DT
P.REFERENCE_NUM
P.ACM_FROM_DT
P.ACM_THRU_DT
P.GPMX_SBEG_DT
P.GPMX_SEND_DT

  let $EmplidP      = rtrim(&P.EMPLID,' ')
  let $CompanyP     = rtrim(&P.COMPANY,' ')
  let #Bal_Year     = &P.GPMX_BALANCE_YEAR
  let $Bal_Year     = to_char(&P.GPMX_BALANCE_YEAR)
  let $Bus_UnitP    = rtrim(&P.BUSINESS_UNIT,' ')
  let $PayGroupP    = rtrim(&P.GP_PAYGROUP,' ')
  let $Empl_StatusP = rtrim(&P.EMPL_STATUS,' ')
  let $DeptIdP      = rtrim(&P.DEPTID,' ')
  let $LocationP    = rtrim(&P.LOCATION,' ')
  let $Ind          = rtrim(&P.GPMX_EE_IND,' ')
  Let $ProcessDt    = rtrim($P.PROCESS_DT, ' ')
  do Format-DateTime(&P.PROCESS_DT, $ProcessDt, {DEFDATE}, '', '')
  Let $Folio        = rtrim(&P.REFERENCE_NUM,' ')
  let $BegDtEmpTerm = &P.ACM_FROM_DT
  let $EndDtEmpTerm = &P.ACM_THRU_DT
  let $PymntPBgnDt  = &P.GPMX_SBEG_DT
  let $PymntPEndDt  = &P.GPMX_SEND_DT
    
  !Dinamic Query part filters employee termination date
  If Rtrim($BegDtEmpTerm, ' ') <> ''
     let $SelCondEmpTerm =  ' WHERE ' 
     let $SelCondEmpTerm =  $SelCondEmpTerm || 'FY.EFFDTT BETWEEN ' || '''' || $BegDtEmpTerm || '''' || ' AND '
     if Rtrim($EndDtEmpTerm, ' ') = ''
        let $SelCondEmpTerm =  $SelCondEmpTerm || '''' || $BegDtEmpTerm || ''''
     Else
        let $SelCondEmpTerm =  $SelCondEmpTerm || '''' || $EndDtEmpTerm || ''''
     End-If 
     let $SelCondEmpTerm =  $SelCondEmpTerm || ' AND FY.ACTION = ' || '''' || 'TER' || '''' || ' AND '
  End-If
  
  If Rtrim($ProcessDt, ' ') = '' Or Rtrim($Folio, ' ') = ''
    Let $Text01 = ''
    Let $Text02 = ''
    Let $Text03 = ''
  Else
    Let $Text01 = 'Se declara, bajo protesta  de  decir verdad, que los datos asentados en la presente constancia, '
    Let $Text01 = $Text01 || 'fueron manifestados en  la respectiva declaración informativa (múltiple) del ejercicio, '
    Let $Text01 = $Text01 || 'presentada  ante el SAT'
    Let $Text02 = 'con fecha ' || $ProcessDt || ' y a la que le correspondió el número de folio o de operación  '  
    Let $Text02 = $Text02 || $Folio  || ', así mismo, '
    Let $Text03 = 'se realizó el cálculo anual  en los términos que establece la ley del ISR.' 
  End-If
  
  If Rtrim($PymntPBgnDt, ' ') <> '' And Rtrim($PymntPEndDt, ' ') <> ''
     Let $BegDt = $PymntPBgnDt
     Let $EndDt = $PymntPEndDt     
  Else
     let $BegDtDTU = $Bal_Year || '-01-01'
     Do Convert-From-DTU-Date($BegDtDTU,$BegDt)
     let $EndDtDTU = $Bal_Year || '-12-31'
     Do Convert-From-DTU-Date($EndDtDTU,$EndDt)
  End-If
  
  let $MMBeg = '01'
  let $YYBeg = $Bal_Year
  let $MMEnd = '12'
  let $YYEnd = $Bal_Year
  
FROM PS_GPMX_RC_ANNLADJ P
WHERE P.OPRID = $prcs_oprid
AND   P.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
#debug show '$ProcessDt ' $ProcessDt
#debug show '$Folio ' $Folio
#debug show 'BGNDT ' $BegDt
#debug show 'ENDDT ' $EndDt
end-procedure Select-Parameters
                                        
!***********************************************************************
begin-procedure Select-Values
#debug show '* Select-Values *'
#debug show '  $Query2: ' $Query2
!***********************************************************************
Let $calRunID = '' 

Begin-Select Distinct
!FY.COMPANY 
FY.EMPLID
FY.EMPL_RCD
!FY.ACTION
!FY.EFFDT

  #debug Show '&FY.EMPLID: ' &FY.EMPLID
  !#debug show '&FY.ACTION: ' &FY.ACTION
  !#debug show '&FY.EFFDT : ' &FY.EFFDT   


  !let $Company = rtrim(&FY.COMPANY,' ')
  Let $Company = $CompanyP
  Let $Emplid = rtrim(&FY.EMPLID,' ')
  Let #Empl_rcd = &FY.EMPL_RCD

  do Initialize-Variables
  
  Let $CalBeginDt1 = $BegDt
  Let $CalEndDt1   = $EndDt
  
  Do Convert-To-DTU-Date($BegDt, $CalBeginDt)
  Do Convert-To-DTU-Date($EndDt, $CalEndDt)

  Let $HireDate  = ''  
  Let $EmplBegDt = ''
  Let $EmplBegDt = ''
  
  Let $EmplTermDt = ''
  Let $TempTerm  = ''
  Let $EmplLstPR = ''
  Let $EmplTerminated = ''
  
  Let #FirstMonth = 12
  Let #LastMonth  = 1
  
  Do GetSegments
  
  Let $calc_PTU = 'N'

    Let #EmployeeSegments = #vIDX
  
    Let #RowCounter = 1
    #debug Show  '     #EmployeeSegments       [' #EmployeeSegments ']'
      
    While #RowCounter <= #EmployeeSegments
        Let $Query3      = ValidSeg.Query3(#RowCounter)
        Let $EmplFstPR   = ValidSeg.IniS(#RowCounter)
        Let $EmplLstPR   = ValidSeg.EndS(#RowCounter)
    
        #ifdef debug
            Show '$Emplid          [' $Emplid ']'
            Show '$EmplJobDt       [' $EmplJobDt ']'
            Show '$Query3          [' $Query3 ']'
            Show '$EmplFstPR       [' $EmplFstPR ']'
            Show '$EmplLstPR       [' $EmplLstPR ']'
        #EndIf  
    
        Do Convert-To-Dtu-Date($EmplFstPR, $tmpDate)
        Do DTU-Parse-Date($tmpDate, #aa, #mm, #dd)
        
        If #mm < #FirstMonth
          Let #FirstMonth = #mm
        End-If
        
        #Debug show '      $EmplTerminated : ' $EmplTerminated
        #Debug show '      $TempTerm       : ' $TempTerm
        #Debug show '      $EmplLstPR      : ' $EmplLstPR        

        Do Convert-To-Dtu-Date ($TempTerm, $dateT)
        #Debug show '      $dateT : ' $dateT ' >  $tmpDate : ' $tmpDate
        
        If $EmplTerminated = 'Y' and ($dateT > $tmpDate)
            Do Convert-To-Dtu-Date($TempTerm, $tmpDate)
        Else
            Do Convert-To-Dtu-Date($EmplLstPR, $tmpDate)
        End-If

        Do DTU-Parse-Date($tmpDate, #aa, #mm, #dd)
        
        If #mm > #LastMonth
          Let #LastMonth = #mm
        End-If
        
        #Debug show '#FirstMonth :' #FirstMonth
        #Debug show '#LastMonth  :' #LastMonth
    
 
!  If Rtrim(&FY.ACTION,' ') = 'TER'
!        Let $EmplTermDt = &FY.EFFDT
!        Do Convert-To-DTU-Date($EmplTermDt, $EmplTermDtDTU)
!        Let $EmplLstPR = &FY.EFFDT
!        Let $EmplTerminated = 'Y'
        
!        Let $EmplBegDt = ''
!        Do Get-Date-Strt-Empl   
!  Else
!        Let $HireDate  = &FY.EFFDT
!        Do Convert-To-DTU-Date($HireDate, $HireDateDTU)
  
!        Let $EmplLstPR = $EndDt
!        Let $EmplBegDt = ''
!        Do Get-Date-Strt-Empl
        
!        Let $EmplTermDt = ''
!        Let $EmplLstPR = ''
!        Do Get-Date-Term-Empl
!  End-If
!  if $Process = 'Y'

!     Do Get-Company-Slides

     Do Build-Qry-Empl-RC
     Let $Find-Emplid = 'N'
     Do Find-Emplid-Job

     If $Find-Emplid = 'Y'

        If $Ind = 'Y'
           let $Find-Emplid = 'N'
           Do Find-Self-Pres
        end-if
     
        Do Select-Emplid-Data
 
        Do Get-Years-Of-Service     
        
        #Debug Show '      $EmplHasMovements :' $EmplHasMovements '  #RowCounter :' #RowCounter    
        If $EmplHasMovements = 'N' or #RowCounter = 1
            Do Employee-Has-Movements
        End-if
     
        If $EmplHasMovements = 'Y'
        
           If $calc_PTU = 'N'
               Do Get-PTU
           End-if

           move $EndDt to $AsOfDate
           Do Get-Company-Data-Mex
     
           Do Get-Tax-Last-MSalary
           Let #S3f = #Result
        
           Do Get-StockValues-OtherExpenses
           Do Annual-Adjust
           Do Get-Multiple-ErnsDed
           Do Get-Multiple-ErnsDed103
           Do Get-Multiple-Acum
        End-If
     End-If        
        
        Let #RowCounter = #RowCounter + 1        
    End-While        
        
   If $EmplHasMovements = 'Y' and #EmployeeSegments > 0
           Do Formatted-Values-And-Formulas
           Let $MMBeg = Edit (#FirstMonth,'00')
           Let $MMEnd = Edit (#LastMonth,'00')
           Do Print-Form
           Do Print-Form
   End-if
!   end-if
  
FROM PS_JOB FY
[$Query2]
end-select
#debug show '#SubAcred ' #SubAcred
end-procedure Select-Values

!******************************************************************************
Begin-Procedure Employee-Has-Movements
#debug show '* Employee-Has-Movements *'
#debug show '$Emplid: ' $Emplid
#debug show '#EmplRcd: '  #EmplRcd
#debug show '$EmplFstPR: ' $EmplFstPR
#debug show '$EmplLstPR: ' $EmplLstPR
!******************************************************************************
Let $EmplHasMovements = 'N'
Do Convert-To-DTU-Date($EmplFstPR, $EmplFPDTU)
Do dtu-month-begin($EmplFPDTU, $EmplFPDTU)
Do Convert-From-DTU-Date($EmplFPDTU, $EmplFrstPeriod)
#debug show '$EmplFrstPeriod: ' $EmplFrstPeriod
begin-select
FX.EMPLID 
        Let $EmplHasMovements = 'Y'
FROM PS_GP_RSLT_SEG_VW FX
WHERE FX.CALC_TYPE = 'P'
AND FX.PYE_CALC_STAT >=  '50'
AND FX.CALC_ACTION <> 'V'
AND FX.EMPLID = $Emplid
AND FX.EMPL_RCD = #EmplRcd
AND FX.PRD_BGN_DT >= $EmplFrstPeriod
AND FX.PRD_END_DT<= $EndDt
end-select
#debug show 'Employee has movements? ' $EmplHasMovements
End-Procedure Employee-Has-Movements

!******************************************************************************
Begin-Procedure Get-Company-Slides
! Query3 for period segment read
#debug show '* Get-Company-Slides *'
#debug show '$Emplid ' $Emplid
#debug show '$BegDt ' $BegDt
#debug show '$Company ' $Company
!******************************************************************************
Let $Query3 = ''
Let $SldBegDt = $BegDt
Let $SldEndDt = ''
Let #TryNum = 0
Let $EmpBeginDt = ''

Begin-Select
JA.EFFDT
JB.EFFDT &EFFDT_ANTERIOR
JA.COMPANY 
JB.COMPANY &COMPANY_ANTERIOR

  If Rtrim(&JA.COMPANY, ' ') = $Company
     Let $SldBegDt = &JA.EFFDT
  End-IF
  If Rtrim(&COMPANY_ANTERIOR, ' ') = $Company
     if $calRunID <> ''
        Let $SldEndDt = $EmplTermDt
     else
        Let $SldEndDt = &EFFDT_ANTERIOR
     end-if
  End-IF
  If $SldBegDt <> '' AND $SldEndDt <> ''
     If #TryNum = 0        
        Let $EmpBeginDt = $SldBegDt
        Let $Query3 = ' AND ('
     Else
        Let $Query3 = $Query3 || ' OR '    
     End-If
     Let $Query3 = $Query3 || ' (A.SEG_END_DT >= ' || '''' || $SldBegDt || ''''
     Let $Query3 = $Query3 || ' AND A.SEG_END_DT <= ' || '''' || $SldEndDt || '''' || ')'     

     Let $SldBegDt = '' 
     Let $SldEndDt = ''
     Let #TryNum = 1
  End-If

FROM PS_JOB JA
, PS_JOB JB 
WHERE JA.EMPLID = $Emplid
AND JA.EMPL_RCD = #EmplRcd
AND JA.EMPLID = JB.EMPLID
AND JA.EMPL_RCD = JB.EMPL_RCD
AND JA.EFFDT BETWEEN $BegDt AND $EndDt
AND JA.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB 
                WHERE JB.EMPLID = EMPLID
                AND JB.EMPL_RCD = EMPL_RCD
                AND EFFDT = JA.EFFDT)
AND JA.COMPANY <> JB.COMPANY 
AND JB.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOB 
                WHERE JB.EMPLID = EMPLID 
                AND JB.EMPL_RCD = EMPL_RCD
                AND JB.COMPANY = COMPANY
                AND EFFDT <= JA.EFFDT)
AND JB.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB 
                WHERE JB.EMPLID = EMPLID
                AND JB.EMPL_RCD = EMPL_RCD
                AND JB.COMPANY = COMPANY
                AND EFFDT = JB.EFFDT)
ORDER BY JB.EFFDT
End-Select
If $SldBegDt <> '' And $SldBegDt <> $BegDt
     If $Query3 = ''
        Let $Query3 = $Query3 || ' AND ( ' 
     Else
        Let $Query3 = $Query3 || ' OR '
     End-If 
     Let $Query3 = $Query3 || ' (A.SEG_END_DT >= ' || '''' || $SldBegDt || ''''
     Let $Query3 = $Query3 || ' AND A.SEG_END_DT <= ' || '''' || $EndDt || '''' || ')'

     if $EmpBeginDt = ''
        Let $EmpBeginDt = $SldBegDt
     End-If
End-If
If $Query3 <> ''
     Let $Query3 = $Query3 || ')'
End-If
If $Query3 = ''
   Let $Query3 = ' AND A.SEG_END_DT >= ' || '''' || $EmplBegDt || ''''
   Let $Query3 = $Query3 || ' AND A.SEG_END_DT <= ' || '''' || $EmplLstPR || '''' 

   Let $EmplFstPR = $EmplBegDt
Else     
   Let $EmplFstPR = $EmpBeginDt
End-if

Let $calRunID = ''

#debug show '$EmplFstPR ' $EmplFstPR
#debug show '$Query3 ' $Query3
End-Procedure Get-Company-Slides

!******************************************************************************
Begin-Procedure Get-PTU
#debug show '* Get-PTU *'
#debug show '$Company ' $Company
#debug show '$EndDt ' $EndDt
!******************************************************************************
Let $calc_PTU = 'Y'
Let $PTU-Payment-DtDTU = ''
Let $Cals_include = ''
Let $Cals_exclude = ''
Begin-select
AC.GPMX_ANNL_FLD &ANNLFLD
AC.GPMX_PIN_ANNL_NUM &PINNUMANNL
PIN.PIN_TYPE &PINTYPE

  Let $AnnlFld = Rtrim(&ANNLFLD, ' ')
  Let #PinNum = &PINNUMANNL
  Let $PinCode = ''

  #debug show '$AnnlFld ' $AnnlFld
  #debug show '#PinNum  ' #PinNum
  #debug show '&PINTYPE ' &PINTYPE

  If Rtrim(&PINTYPE,' ') = 'AC'
        !Do GetCalsByAcum  
        Let #SumAcum = 0  
        Do Get-Sum-Acum   
        Let #CalcRsltVal = #SumAcum
        Let $PTU-Payment-DtDTU = $PaymentDt
  Else
        Do GetCalsByERDD
        Let #Result = 0
        Do Get-PTU-Earning
        If Rtrim(&PINTYPE, ' ') = 'DD0'
          Let #Result = #Result * -1
        End-If        
        Let #CalcRsltVal = #Result
  End-If  
  
  Evaluate $AnnlFld
  when = '070'
    Let #S5ug = #S5ug + #CalcRsltVal
    Break
  when = '071'
    Let #S5ue = #S5ue + #CalcRsltVal
    Break
  End-Evaluate
  
FROM PS_GPMX_ANNL_DTL AC
, PS_GP_PIN PIN
WHERE AC.COMPANY = $Company
AND AC.GPMX_ANNL_FLD IN ('070','071')
AND AC.EFFDT = (SELECT MAX(BB.EFFDT)
             FROM PS_GPMX_ANNL_DTL BB
             WHERE BB.COMPANY = AC.COMPANY
             AND BB.EFFDT <= $EndDt)
AND PIN.PIN_NUM = AC.GPMX_PIN_ANNL_NUM
End-select
Do CleanQuery($Cals_include, $Cals_include)
Do CleanQuery($Cals_exclude, $Cals_exclude)

#debug show '    $Cals_include   [' $Cals_include ']'
#debug show '    $Cals_exclude   [' $Cals_exclude ']'

if $Cals_exclude <> ''
    Let $QueryExclude = 'AND (A.CAL_RUN_ID NOT IN ('|| $Cals_exclude ||'))'
End-If 

if $Cals_include <> ''
    Let $QueryInclude = 'OR (A.CAL_RUN_ID IN ('|| $Cals_include ||'))'
End-If  
#debug show '    $QueryInclude       [' $QueryInclude ']'
#debug show '    $QueryExclude       [' $QueryExclude ']'
!#debug show '$PTU-Payment-DtDTU: ' $PTU-Payment-DtDTU
End-Procedure Get-PTU

!******************************************************************************
Begin-Procedure Get-PTU-Earning
#debug show '* Get-PTU-Earning *'
#debug show '$Emplid '  $Emplid
#debug show '$Company ' $Company
#debug show '#PinNum '  #PinNum
#debug show '$BegDt ' $BegDt
#debug show '$EndDt ' $EndDt
!******************************************************************************
Begin-Select
C.SLICE_BGN_DT &PTUPAYMENTDT
SUM(C.CALC_RSLT_VAL + C.CALC_ADJ_VAL) &SUM-EARN
        Do Convert-To-DTU-Date(&PTUPAYMENTDT, $PTU-Payment-DtDTU)
        Let #Result = #Result + &SUM-EARN

FROM PS_GP_RSLT_PI_SOVR A
!, PS_GP_PIN B
, PS_GP_RSLT_ERN_DED C
, PS_GP_PIN D
WHERE A.EMPLID = $Emplid
AND A.SOVR_VAL_CHAR = $Company
AND A.INSTANCE = (SELECT MIN(A2.INSTANCE) 
                  FROM PS_GP_RSLT_PI_SOVR A2 
                  WHERE A.ORIG_CAL_RUN_ID = A2.ORIG_CAL_RUN_ID 
                  AND A2.RSLT_SEG_NUM = 1
                  AND A.PIN_NUM = A2.PIN_NUM
                  AND A2.EMPLID = A.EMPLID
                  AND A2.EMPL_RCD = A.EMPL_RCD
                  AND A2.GP_PAYGROUP = A.GP_PAYGROUP
                  AND A2.CAL_ID = A.CAL_ID
                  AND A2.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
                  AND A2.SOVR_VAL_CHAR = A.SOVR_VAL_CHAR)
AND A.CAL_RUN_ID = A.ORIG_CAL_RUN_ID
AND A.RSLT_SEG_NUM = 1
AND A.PIN_NUM = D.PIN_NUM 
!AND B.PIN_CODE = 'RU VR COMPAÑIA MEX'
AND C.PIN_NUM = #PinNum
AND D.PIN_CODE = 'PTU IMP DIAS MEX'
!AND B.PIN_NUM = A.PIN_SOVR_NUM
AND C.EMPLID = A.EMPLID
AND C.EMPL_RCD = A.EMPL_RCD
AND C.CAL_RUN_ID = A.CAL_RUN_ID 
AND C.GP_PAYGROUP = A.GP_PAYGROUP 
AND C.CAL_ID = A.CAL_ID 
AND C.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID 
AND C.RSLT_SEG_NUM = A.RSLT_SEG_NUM
!AND C.SLICE_BGN_DT >= $BegDt
!AND C.SLICE_BGN_DT <= $EndDt
AND C.SLICE_END_DT >= $BegDt !SG
AND C.SLICE_END_DT <= $EndDt !SG
GROUP BY C.SLICE_BGN_DT
End-Select
#debug show '#Result ' #Result
End-Procedure


!******************************************************************************
Begin-Procedure Get-Earns-Ded
#debug show '* Get-Earns-Ded *'
#debug show '  $Emplid       : ' $Emplid
#debug show '  #EmplRcd      : ' #EmplRcd
#debug show '  $BegDt        : ' $BegDt
#debug show '  $EndDt        : ' $EndDt
#debug show '  $PinCode      : ' $PinCode
#debug show '  $Query3       : ' $Query3
#debug show '  $EmplLstPR    : ' $EmplLstPR
#debug show '  $QueryExclude : ' $QueryExclude
#debug show '  $QueryInclude : ' $QueryInclude
!******************************************************************************
Let #Result = 0
Begin-Select
SUM(B.CALC_RSLT_VAL + B.CALC_ADJ_VAL) &B.RESULT

   Let #Result = &B.RESULT
   
FROM PS_GP_RSLT_SEG_VW A, 
PS_GP_RSLT_ERN_DED B 
WHERE A.EMPLID = $Emplid
AND A.EMPL_RCD = #EmplRcd
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(B.RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW B WHERE A.EMPLID = B.EMPLID AND A.EMPL_RCD = B.EMPL_RCD AND A.CAL_ID = B.CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
AND A.EMPLID = B.EMPLID 
AND A.EMPL_RCD = B.EMPL_RCD 
AND A.CAL_RUN_ID = B.CAL_RUN_ID 
AND A.GP_PAYGROUP = B.GP_PAYGROUP 
AND A.CAL_ID = B.CAL_ID 
AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID 
AND A.RSLT_SEG_NUM = B.RSLT_SEG_NUM
!AND B.SLICE_BGN_DT >= $EmplFstPR
!AND B.SLICE_BGN_DT <= $EmplLstPR
AND (
      (B.SLICE_END_DT >= $EmplFstPR AND B.SLICE_END_DT <= $EmplLstPR [$QueryExclude])
      [$QueryInclude]
    )
AND B.PIN_NUM IN (SELECT (PIN_MBR_NUM)
                      FROM PS_GPMX_ANNL_TMP
                      WHERE OPRID = $prcs_oprid
                      AND RUN_CNTL_ID = $prcs_run_cntl_id
                      AND PRCSINSTANCE = #prcs_process_instance
                      AND PIN_CODE = $PinCode
                      AND BGN_DT <= $EmplLstPR
                      AND END_DT >= $EmplLstPR)
End-Select
#debug show '#Result ' #Result
Let #PinNum = 0
Do Get-Acum-Adj
Let #Result = #Result + #ResultAdj
End-Procedure Get-Earns-Ded

!******************************************************************************
begin-procedure Get-Tax-Last-MSalary
#debug show '* Get-Tax-Last-MSalary *'
#debug show '$Emplid ' $Emplid
#debug show '$EmplFstPR ' $EmplFstPR
#debug show '$EmplLstPR ' $EmplLstPR
#debug show '$BegDt ' $BegDt
#debug show '$EndDt ' $EndDt
#debug show '$Query3 ' $Query3
!******************************************************************************
Let #Result = 0
begin-SELECT 
X.CALC_RSLT_VAL

   Let #Result = &X.CALC_RSLT_VAL 

FROM PS_GP_RSLT_PIN_VW X
, PS_GP_PIN Y
, PS_GP_RSLT_SEG_VW A
WHERE X.PIN_NUM = Y.PIN_NUM
AND X.EMPLID = $Emplid
AND X.EMPL_RCD = #EmplRcd
AND Y.PIN_CODE = 'FD FM TOT ISR SDO MEX'
!AND X.SLICE_BGN_DT >= $EmplFstPR
!AND X.SLICE_BGN_DT <= $EmplLstPR
and X.SLICE_END_DT >= $EmplFstPR !SG
and X.SLICE_END_DT <= $EmplLstPR !SG
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(B.RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW B WHERE A.EMPLID = B.EMPLID AND A.EMPL_RCD = B.EMPL_RCD AND A.CAL_ID = B.CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
[$Query3]
AND A.EMPLID = X.EMPLID 
AND A.EMPL_RCD = X.EMPL_RCD 
AND A.CAL_RUN_ID = X.CAL_RUN_ID 
AND A.GP_PAYGROUP = X.GP_PAYGROUP 
AND A.CAL_ID = X.CAL_ID 
AND A.ORIG_CAL_RUN_ID = X.ORIG_CAL_RUN_ID 
AND A.RSLT_SEG_NUM = X.RSLT_SEG_NUM
end-Select
#debug show '#Result ' #Result
end-procedure Get-Tax-Last-MSalary


!******************************************************************************
begin-procedure Find-Emplid-Job
#debug show '* Find-Emplid-Job *'
#debug show '$Query ' $Query
#debug show '$EndDt ' $EndDt
!******************************************************************************
begin-select
J.EMPL_RCD
J.COMPANY
J.BUSINESS_UNIT
J.GP_PAYGROUP
J.EMPL_STATUS
J.DEPTID
J.LOCATION
J.SETID_LOCATION
J.MONTHLY_RT
J.ACTION
J.ACTION_REASON
J.UNION_CD
S.NUMERIC_CD

  
  Let #EmplRcd = &J.EMPL_RCD
  Let $UnionCd   = Rtrim(&J.UNION_CD, ' ')  
  
  If $UnionCd <> ''
     Let $S103 = 'X'
  else
     Let $S103 = ' '
  End-if
  
  Let $S105 = Rtrim(&S.NUMERIC_CD, ' ')
  
  let $Find-Emplid = 'Y'
  let $Company     = rtrim(&J.COMPANY,' ')
  let $Bus_Unit    = rtrim(&J.BUSINESS_UNIT,' ')
  let $PayGroup    = rtrim(&J.GP_PAYGROUP,' ')
  let $Empl_Status = rtrim(&J.EMPL_STATUS,' ')
  let $DeptId      = rtrim(&J.DEPTID,' ')
  let $Location    = rtrim(&J.LOCATION,' ')
  let $SetId_Loc   = rtrim(&J.SETID_LOCATION,' ')
  let $EmpAction   = &J.ACTION
  let $EmpActnRsn  = &J.ACTION_REASON
  let #S3e         = &J.MONTHLY_RT
  
   do Minimum-Wage
   do Get-Other-Employer
   do Get-Other-Employer-Det
  
FROM PS_JOB J
, PS_LOCATION_TBL L
, PS_STATE_TBL S
WHERE J.EFFDT = (SELECT MAX(J1.EFFDT) FROM PS_JOB J1
               WHERE J1.EMPLID = J.EMPLID
               AND   J1.EMPL_RCD = J.EMPL_RCD
               AND   J1.COMPANY = J.COMPANY
               AND   J1.EFFDT <= $EndDt)
AND J.EFFSEQ = (SELECT MAX(J2.EFFSEQ) FROM PS_JOB J2
                WHERE J2.EMPLID = J.EMPLID
                AND   J2.EMPL_RCD = J.EMPL_RCD
                AND   J2.COMPANY = J.COMPANY
                AND   J2.EFFDT = J.EFFDT)
AND L.LOCATION = J.LOCATION
AND L.SETID = J.SETID_LOCATION
AND L.EFFDT = (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL WHERE LOCATION = J.LOCATION AND SETID = J.SETID_LOCATION)
AND S.COUNTRY = L.COUNTRY
AND S.STATE = L.STATE
[$Query]
end-select
#debug show '$Find-Emplid : ' $Find-Emplid
#debug show '$UnionCd : ' $UnionCd
#debug show 'EmplBegDt ' $EmplBegDt
#debug show 'EmplTermDt ' $EmplTermDt
end-procedure Find-Emplid-Job

!****************************************************************************
Begin-Procedure Get-Date-Strt-Empl
#debug show '* Get-Date-Strt-Empl *'
#debug show '    $Emplid    : '  $Emplid
#debug show '    #EmplRcd   : ' #EmplRcd
#debug show '    $Company   : ' $Company
#debug show '    $BegDt     : ' $BegDt
#debug show '    $EmplLstPR : ' $EmplLstPR
!****************************************************************************
Let $Process = 'Y'

Begin-SELECT 
MIN(EFFDT) &EMPLSTRTDT
  
  If Rtrim(&EMPLSTRTDT, ' ') = ''
    Let $EmplBegDt = $BegDt
  Else
    Let $EmplBegDt = &EMPLSTRTDT
  End-If

FROM PS_JOB
WHERE EMPLID = $Emplid
AND COMPANY = $Company
AND EFFDT >= $BegDt
AND EFFDT < $EmplLstPR
AND ACTION IN ('HIR','REH', 'XFR')
End-Select
#debug show '      $EmplBegDt : ' $EmplBegDt

Begin-Select
MIN(SLICE_END_DT) &EMPLSTRTDTED
        If Rtrim(&EMPLSTRTDTED, ' ') <> ''
           Let $EmplBegDt = &EMPLSTRTDTED
        End-If
FROM PS_GP_RSLT_ERN_DED
WHERE EMPLID = $Emplid
AND EMPL_RCD = #EmplRcd
AND SLICE_END_DT >= $EmplBegDt
AND SLICE_END_DT < $EmplLstPR
End-Select

#debug show '      *$EmplBegDt  :' $EmplBegDt
#debug show '      *$HireDate   :' $HireDate
#debug show '      *$EmplTermDt :' $EmplTermDt

if $HireDate  <> '' and  ($HireDateDTU < $BegDtDTU)
   Do valid-employee-dates
else 
   if $EmplTermDt <> '' and ($EmplTermDtDTU <= $BegDtDTU)
      Let $Process = 'N'
   end-if 
end-if

#debug show '$Process ' $Process

End-Procedure Get-Date-Strt-Empl

!****************************************************************************
Begin-Procedure valid-employee-dates
#debug show 'valid-employee-dates'
#debug show '$BegDt: ' $BegDt
!****************************************************************************
Let $EmplTermDt2 = ''
Let $EmplTermDtDTU = ''

Begin-SELECT 
MAX(J1.EFFDT)  &J1.EFFDT

  Let $EmplTermDt2 = Rtrim(&J1.EFFDT, ' ') 
  if $EmplTermDt2 <> ''
     Do Convert-To-DTU-Date($EmplTermDt2, $EmplTermDtDTU)
  end-if

FROM PS_JOB J1
WHERE J1.EMPLID = $Emplid
AND J1.COMPANY = $Company
AND J1.EFFDT <= $EmplBegDt 
AND J1.EFFDT > $HireDate 
AND J1.ACTION IN ('TER')
End-Select

if $EmplTermDtDTU <> '' 
   if $EmplTermDtDTU < $BegDtDTU
      Let $Process = 'N'
   end-if
end-if
#debug show '$EmplTermDt2: ' $EmplTermDt2
#debug show '$EmplTermDtDTU: ' $EmplTermDtDTU
#debug show '$Process: ' $Process
End-Procedure valid-employee-dates

!****************************************************************************
Begin-Procedure Get-Delta
#debug show 'Get-Delta'
#debug show '$BegDt: ' $BegDt
!****************************************************************************
Let $EmplTermDt2 = ''
Let $EmplTermDtDTU = ''
Let $calRunID = ''

Begin-SELECT DISTINCT
D1.CAL_RUN_ID

   Let $calRunID = &D1.CAL_RUN_ID
   #debug show 'D1.CAL_RUN_ID: ' &D1.CAL_RUN_ID
from PS_GP_RSLT_DELTA D1
WHERE D1.EMPLID = $Emplid
AND   D1.EMPL_RCD = #EmplRcd        
and   D1.CAL_ID in (select distinct D2.CAL_ID  
                   FROM PS_GP_RSLT_ERN_DED D2
                   WHERE D2.EMPLID   = D1.EMPLID
                   AND   D2.EMPL_RCD = D1.EMPL_RCD
                   AND   D2.SLICE_END_DT = (SELECT MAX(D3.SLICE_END_DT) 
                                            FROM PS_GP_RSLT_ERN_DED D3
                                            WHERE D3.EMPLID = D2.EMPLID
                                            AND D3.EMPL_RCD = D2.EMPL_RCD
                                            AND D3.SLICE_END_DT <= $EmplTermDt))
End-Select

if $calRunID <> ''

Begin-Select
MAX(a.SLICE_END_DT) &SLICE_END_DT
        If Rtrim(&SLICE_END_DT, ' ') <> ''
           Let $EmplTermDt = &SLICE_END_DT
        End-If
        #debug show '$EmplTermDt: ' $EmplTermDt
        
FROM PS_GP_RSLT_ERN_DED A, PS_GP_CAL_RUN_DTL F
WHERE a.emplid = $emplid
AND a.EMPL_RCD = #EmplRcd
AND a.CAL_RUN_ID = $calRunID
AND f.cal_run_id=a.CAL_RUN_ID   
AND f.calc_type='P'                             
End-Select

end-if

End-Procedure Get-Delta

!****************************************************************************
Begin-Procedure Get-Date-Term-Empl
#debug show '* Get-Date-Term-Empl *'
#debug show '  $Emplid    ' $Emplid
#debug show '  $Company   ' $Company
#debug show '  $EmplBegDt ' $EmplBegDt
#debug show '  $EndDt     ' $EndDt
!****************************************************************************
Let $EmplTerminated = 'N'
Let $origEmplTermDt = ' '
Begin-SELECT 
MAX(JBA.EFFDT) &EMPLTERMDT

  If Rtrim(&EMPLTERMDT, ' ') = ''
     Let $EmplTermDt = ''
  Else   
     Let $EmplTermDt = &EMPLTERMDT
     Let $origEmplTermDt = &EMPLTERMDT
     Let $EmplTerminated = 'Y'
  End-If
  

FROM PS_JOB JBA
WHERE JBA.EMPLID = $Emplid
AND JBA.COMPANY = $Company
AND JBA.EFFDT >= $EmplBegDt
AND JBA.EFFDT <= $EndDt
AND JBA.ACTION IN ('TER')
End-Select

Begin-SELECT 
MIN(EFFDT) &EMPLBEGDT

  If Rtrim(&EMPLBEGDT, ' ') = ''
     Let $EmplLstPR = $EndDt
  Else   
     Let $EmplLstPR = &EMPLBEGDT
     Do Convert-To-DTU-Date($EmplLstPR, $EmplLstPRDTU)     
     Do dtu-add-days($EmplLstPRDTU, -1 ,$EmplLstPRDTU)
     Let $EmplLstPR = strtodate($EmplLstPRDTU,'YYYY-MM-DD')
  End-If

FROM PS_JOB JBB
WHERE JBB.EMPLID = $Emplid
AND JBB.EFFDT >  $EmplBegDt
AND JBB.EFFDT <= $EndDt
AND JBB.ACTION IN ('HIR', 'REH', 'XFR')
End-Select

if $EmplTerminated = 'Y' and
   $EmplLstPRDTU < $EndDtDTU
   do Get-Delta
end-if 

If $EmplTerminated = 'Y'
  Let $SubQry = 'AND SLICE_END_DT <= ' || '''' || $EmplTermDt || ''''
  let $EmplLstPR=$EmplTermDt !SG
Else
  Let $SubQry = 'AND SLICE_END_DT <= ' || '''' || $EmplLstPR || ''''
End-If

Begin-Select
MAX(SLICE_END_DT) &EMPLFINDTED
        If Rtrim(&EMPLFINDTED, ' ') <> ''
           Let $EmplTermDt = &EMPLFINDTED           
        End-If
FROM PS_GP_RSLT_ERN_DED
WHERE EMPLID = $Emplid
AND EMPL_RCD = #EmplRcd
[$SubQry]
End-Select
#debug show '$EmplTermDt: ' $EmplTermDt
#debug show '$EmplLstPR: ' $EmplLstPR
#debug show '$EmplTerminated ' $EmplTerminated
End-Procedure Get-Date-Term-Empl

!****************************************************************************
begin-procedure Get-StockValues-OtherExpenses
#debug show '* Get-StockValues-OtherExpenses *'
!****************************************************************************
begin-select
GPMX_MAR_VAL_SHARE 
GPMX_OPT_PRICE     
GPMX_ISR_RET       
GPMX_TRAVEL_EXPENS
GPMX_AMT_CONTR
GPMX_CONTR_APPL
GPMX_EE_DED_CONTR
GPMX_ER_DED_CONTR

   Let #S4k = &GPMX_MAR_VAL_SHARE
   Let #S4l = &GPMX_OPT_PRICE 
   Let #S4n = &GPMX_ISR_RET
   Let #S5qe = &GPMX_TRAVEL_EXPENS
   
   Let #AdInfo1 = &GPMX_AMT_CONTR
   Let $AdInfo2 = &GPMX_CONTR_APPL
   Let #AdInfo3 = &GPMX_EE_DED_CONTR
   Let #AdInfo4 = &GPMX_ER_DED_CONTR
   
   
FROM PS_GPMX_FORM37_ADD 
WHERE EMPLID = $Emplid             
AND EMPL_RCD = #EmplRcd          
AND COMPANY = $Company         
AND GPMX_BALANCE_YEAR  = #Bal_Year
end-select
end-procedure Get-StockValues-OtherExpenses

!****************************************************************************
begin-procedure Minimum-Wage
#debug show '* Minimum-Wage *'
#debug show '$Location:  ' $Location
#debug show '$SetId_Loc: ' $SetId_Loc
!****************************************************************************
begin-select
L.SETID
L.LOCATION
L.ESTABID
LOC.WAGE_ZONE_MEX
LOC.IMS_ZONE_MEX
W.GPMX_MINIMUM_WAGE

   Let #MinimumWage = &W.GPMX_MINIMUM_WAGE  
   Let $Zone = rtrim(&LOC.WAGE_ZONE_MEX,' ')                   
   Let $IMSZone = rtrim(&LOC.IMS_ZONE_MEX,' ')
     
     Evaluate $Zone
     when = '10'
          Let $S104 ='A'
     break
     when = '20'
          Let $S104 ='B'
     break
     when = '30'
          Let $S104 ='C'
     break
     End-Evaluate

FROM PS_LOCATION_TBL L, PS_ESTAB_TBL LOC, PS_GPMX_MIN_WAGE W
WHERE L.LOCATION = $Location
AND   L.SETID    = $SetId_Loc
AND   L.EFFDT    = (SELECT MAX(L1.EFFDT) 
                 FROM  PS_LOCATION_TBL L1
                 WHERE L1.SETID = L.SETID
                 AND   L1.LOCATION = L.LOCATION
                 AND   L1.EFFDT <= $EndDt)
AND   LOC.ESTABID = L.ESTABID
AND   LOC.EFFDT = (SELECT MAX(LOC1.EFFDT) 
                 FROM  PS_ESTAB_TBL LOC1
                 WHERE LOC1.ESTABID = LOC.ESTABID
                 AND   LOC1.EFFDT <= $EndDt)
AND   W.WAGE_ZONE_MEX = LOC.WAGE_ZONE_MEX
AND   W.EFFDT = (SELECT MAX(W1.EFFDT)
                 FROM  PS_GPMX_MIN_WAGE W1
                 WHERE W1.WAGE_ZONE_MEX = W.WAGE_ZONE_MEX
                 AND   W1.EFFDT <= $EndDt)
end-select
end-procedure Minimum-Wage

!****************************************************************************
begin-procedure Find-Self-Pres
#debug show '* Find-Self-Pres *'
!****************************************************************************
begin-select
SP.EMPLID
   let $Find-Emplid = 'Y'

FROM PS_GPMX_EE_NOADJ_D SP
WHERE SP.GPMX_BALANCE_YEAR = #Bal_Year
AND   SP.EMPLID = $Emplid
AND   SP.EMPL_RCD = #EmplRcd
AND   SP.GPMX_ADJ_TYPE = '0010'
end-select
end-procedure Find-Self-Pres

!****************************************************************************
begin-procedure Select-Emplid-Data
#debug show '* Select-Emplid-Data *'
#debug show '$Emplid ' $Emplid
!****************************************************************************
begin-select
PA.EMPLID
PA.FIRST_NAME
PA.MIDDLE_NAME
PA.LAST_NAME
PA.SECOND_LAST_NAME

   let $Empl_Name = rtrim(&PA.FIRST_NAME,' ') || ' ' ||rtrim(&PA.MIDDLE_NAME,' ')
   let $Empl_LastName = rtrim(&PA.LAST_NAME,' ')
   let $Empl_SecondLastName = rtrim(&PA.SECOND_LAST_NAME,' ')

FROM PS_PERSON_NAME PA
WHERE PA.EMPLID = $Emplid
ORDER BY PA.EMPLID
end-select

begin-select
PB.NATIONAL_ID
   let $Empl_RFC  = rtrim(&PB.NATIONAL_ID,' ')

FROM PS_PERS_NID PB
WHERE PB.NATIONAL_ID_TYPE = 'RFC'
AND PB.COUNTRY = 'MEX'
AND PB.EMPLID = $Emplid
end-select

begin-select
PC.NATIONAL_ID
  let $Empl_CURP = rtrim(&PC.NATIONAL_ID,' ')

FROM PS_PERS_NID PC
WHERE PC.NATIONAL_ID_TYPE = 'CURP'
AND PC.COUNTRY = 'MEX'
AND PC.EMPLID = $Emplid
end-select
#debug show '$Empl_Name ' $Empl_Name
#debug show '$Empl_RFC ' $Empl_RFC
#debug show '$Empl_CURP ' $Empl_CURP
end-procedure Select-Emplid-Data

!****************************************************************************
Begin-Procedure Get-Years-Of-Service
#debug show '* Get-Years-Of-Service *'
#debug show '  $Emplid         ' $Emplid
#debug show '  #EmplRcd        ' #EmplRcd
#debug show '  $EmplTermDt     ' $EmplTermDt
#debug show '  $Service_Date   ' $Service_Date
#debug show '  $EndDtDTU       ' $EndDtDTU
#debug show '  $EmplTerminated ' $EmplTerminated
!****************************************************************************
!Last hire or rehire employee date before this termination
begin-select
E.TERMINATION_DT
E.SERVICE_DT

  let $Term_Date = &E.TERMINATION_DT
  let $Service_Date = &E.SERVICE_DT
  #debug show '    $Term_Date    : ' $Term_Date
  #debug show '    $Service_Date : ' $Service_Date
  
  do Convert-To-DTU-Date($Term_Date,$Term_DateDTU)
  do Convert-To-DTU-Date($Service_Date,$Service_DateDTU)

  if (rtrim($Term_Date,' ') <> '') and ($Term_DateDTU <= $EndDtDTU)
     let $MMEnd = Substr(rtrim($Term_DateDTU,'')6,2)
     let $YYEnd = Substr(rtrim($Term_DateDTU,'')1,4)     
     do dtu-diff-months($Service_DateDTU, $Term_DateDTU, #Months_Service)
  else
     do dtu-diff-months($Service_DateDTU, $EndDtDTU, #Months_Service)
  end-if
  
  Let #Years_Service = Trunc(#Months_Service / 12, 0)
  Let #Months_Service = Mod(#Months_Service,12)
  Let #Months_Service = #Months_Service / 6
  Let #Years_Service = #Years_Service + Trunc(#Months_Service,0)  
  Let #S3b = #Years_Service
  
FROM PS_EMPLOYMENT E
WHERE EMPLID = $Emplid
end-select


If $EmplTerminated = 'Y' and $Term_Date = ''
   #debug show '    $Service_DateDTU  ' $Service_DateDTU
   #debug show '    $Term_DateDTU     ' $Term_DateDTU
   
   Let $Term_Date = $origEmplTermDt
   do Convert-To-DTU-Date($Term_Date,$Term_DateDTU)  
   let $MMEnd = Substr(rtrim($Term_DateDTU,'')6,2) 
   
   if $Service_DateDTU <> '' and ($Service_DateDTU > $Term_DateDTU)
      let $Service_Date = $HireDate
      do Convert-To-DTU-Date($Service_Date,$Service_DateDTU)
   end-if
   
   do dtu-diff-months($Service_DateDTU, $Term_DateDTU, #Months_Service)
   Let #Years_Service = Trunc(#Months_Service / 12, 0)
   Let #Months_Service = Mod(#Months_Service,12)
   Let #Months_Service = #Months_Service / 6
   Let #Years_Service = #Years_Service + Trunc(#Months_Service,0)  
   Let #S3b = #Years_Service
   
   
   
Begin-Select
YS.LAST_HIRE_DT

    Let $YsBGNDate = Rtrim(&YS.LAST_HIRE_DT, ' ')
    Let $YsENDDate = $TempTerm
    
FROM PS_JOB YS
WHERE YS.EMPLID = $Emplid
AND YS.EMPL_RCD = #Empl_rcd
AND YS.EFFDT  = (SELECT MAX(YS2.EFFDT)
                 FROM PS_JOB YS2
                 WHERE YS2.EMPLID = YS.EMPLID
                 AND YS2.EMPL_RCD = YS.EMPL_RCD
                 AND YS2.EFFDT <= $TempTerm)
AND YS.EFFSEQ = (SELECT MAX(YS3.EFFSEQ)
                 FROM PS_JOB YS3
                 WHERE YS3.EMPLID = YS.EMPLID
                 AND YS3.EMPL_RCD = YS.EMPL_RCD
                 AND YS3.EFFDT = YS.EFFDT)
End-Select

#Debug show '      $YsBGNDate :' $YsBGNDate
#Debug show '      $YsENDDate :' $YsENDDate

Do Convert-To-DTU-Date($YsBGNDate,$YsBGNDate)
Do Convert-To-DTU-Date($YsENDDate,$YsENDDate)

    Do dtu-diff-months($YsBGNDate, $YsENDDate, #Months_Service)
    Let #Years_Service = Trunc(#Months_Service / 12, 0)
    Let #Months_Service = Mod(#Months_Service,12)
    Let #Months_Service = #Months_Service / 6
    Let #Years_Service = #Years_Service + Trunc(#Months_Service,0)  
    Let #S3b = #Years_Service
#Debug show '     #S3b :' #S3b    
end-if

#debug show '  $Service_Date  ' $Service_Date
#debug show '  $Term_Date     ' $Term_Date
#debug show '  #Years_Service ' #Years_Service
#debug show '  $MMEnd:        ' $MMEnd
End-Procedure Get-Years-Of-Service

!****************************************************************************
begin-procedure Annual-Adjust
#debug show '* Annual-Adjust *'
#debug show '$EMPLID ' $EMPLID
#debug show '#EmplRcd ' #EmplRcd
#debug show '$Company ' $Company
#debug show '#Bal_Year ' #Bal_Year
!****************************************************************************
Let $S101 = ''
Let $S102 = ''  
begin-SELECT
AA.GPMX_CALC_TYPE 
AA.GPMX_ADJ_TYPE 

  Let $CalType = Rtrim(&AA.GPMX_CALC_TYPE, ' ')
  Let $AdjType = Rtrim(&AA.GPMX_ADJ_TYPE, ' ')
  If ($CalType <> '' Or $AdjType <> '')      
          Evaluate $CalType
            when = '0010'
                 Let $S102 = 'A' 
            break
            when = '0020'
                 Let $S102 = 'B' 
            break
            when-other
                 Let $S102 = 'A' 
            break
          End-Evaluate

          If $AdjType = ''
                Let $S101 = 'X'
          End-if                   
  End-If
FROM PS_GPMX_ANL_ADJ_WA AA
WHERE AA.EMPLID = $EMPLID
AND AA.EMPL_RCD = #EmplRcd
AND   AA.COMPANY = $Company
AND   AA.GPMX_BALANCE_YEAR = #Bal_Year
end-SELECT
#debug show '$S101 ' $S101
#debug show '$S102 ' $S102
end-procedure Annual-Adjust 

!****************************************************************************
begin-procedure Get-Other-Employer
#debug show '* Get-Other-Employer *' 
#debug show $EmplFstPR ' ' $EmplLstPR
#debug show #Bal_Year
!****************************************************************************
Let #OthEmplCount  = 0
Let $OthEmployer01 = ''
Let $OthEmployer02 = ''
Let $OthEmployer03 = ''

Begin-SELECT
OTH.RFC_ER_ID_MEX

  Let $RFCEmployer  = rtrim(&OTH.RFC_ER_ID_MEX, ' ')
  Let $RFCEmployer = translate($RFCEmployer,'-','')
  
  If $RFCEmployer <> ''
   
     Let #OthEmplCount  = #OthEmplCount + 1

   
     Evaluate #OthEmplCount
     when = 1
          Let $S111 = $RFCEmployer
     break
     when = 2
          Let $S112 = $RFCEmployer
     break
     when = 3
          Let $S113 = $RFCEmployer
     break
     End-Evaluate
  End-if
   
FROM PS_GPMX_OTH_ER OTH
WHERE OTH.EMPLID = $Emplid 
AND OTH.EMPL_RCD = #EmplRcd
!AND OTH.START_DT >= $EmplFstPR
AND OTH.START_DT >= $BegDt
AND OTH.END_DT   <= $EmplLstPR
AND OTH.GPMX_BALANCE_YEAR = #Bal_Year
end-select
end-procedure Get-Other-Employer

!****************************************************************************
begin-procedure Get-Other-Employer-Det
#debug show '* Get-Other-Employer-Det *'
#debug show '  $Emplid:  ' $Emplid
#debug show '  #EmplRcd: ' #EmplRcd
#debug show '  $EmplFstPR:   ' $EmplFstPR
#debug show '  $EmplLstPR:   ' $EmplLstPR
!****************************************************************************

Begin-SELECT
RFC_ER_ID_MEX
GPMX_ERNDED_CD
SUM(AMOUNT)  &Amount 

  #debug show '&Amount:  '  &Amount   
  #debug SHOW '&GPMX_ERNDED_CD: ' &GPMX_ERNDED_CD
  If Rtrim(&RFC_ER_ID_MEX, ' ') <> Rtrim($Legal_RFC, ' ')
    Evaluate &GPMX_ERNDED_CD
    when = '0130'
    when = '0010'
         Let #S5O1g = #S5O1g  + &Amount
         break
    when = '0120'
    when = '0020'
    when = '0040'
    when = '0030'
    when = '0050'
         Let #S5O1e = #S5O1e  + &Amount
         break
    when = '0140'
    when = '0090'
         Let #S6V1 = #S6V1  + &Amount
         break
    when = '0150'
         Let #S6Y1 = #S6Y1  + &Amount
         break
    when = '0070'
         Let #S2H  = #S2H   + &Amount
         break
    when = '0080'
         Let #S2I  = #S2I   + &Amount
         break
    when = '0100'
         Let #S6Z1  = #S6Z1 + &Amount
         break
    when = '0170'
         Let #S2J   = #S2J  + &Amount
         break         
    End-Evaluate
  End-If
FROM PS_GPMX_OTH_ER_DET
WHERE EMPLID  = $Emplid 
AND EMPL_RCD = #EmplRcd
AND START_DT >= $BegDt
AND END_DT   <= $EmplLstPR
AND GPMX_BALANCE_YEAR = #Bal_Year
GROUP BY RFC_ER_ID_MEX, GPMX_ERNDED_CD
end-select
end-procedure Get-Other-Employer-Det

!****************************************************************************
begin-procedure Get-Multiple-ErnsDed
#debug show '* Get-Multiple-ErnsDed *'
#debug show '  $Emplid:  ' $Emplid
#debug show '  #EmplRcd: ' #EmplRcd
#debug show '  $EmplFstPR: ' $EmplFstPR
#debug show '  $EmplLstPR: ' $EmplLstPR
#debug show '  $EndDt    : ' $EndDt
#debug show '  $Company: ' $Company
!****************************************************************************
Let #CalcRsltVal   = 0

#debug show 'Calc Annl without/Acum'
Begin-SELECT
B.GPMX_ANNL_FLD
B.ENTRY_TYPE_ELEM
SUM(C.CALC_RSLT_VAL + C.CALC_ADJ_VAL) &CALC_RSLT_VAL

 #debug show 'ANNL FLD: ' &B.GPMX_ANNL_FLD ' ENTRY TYPE: ' &B.ENTRY_TYPE_ELEM ' RSLT: ' &CALC_RSLT_VAL

 if &B.ENTRY_TYPE_ELEM = 'ER0'
    Let #CalcRsltVal = #CalcRsltVal + &CALC_RSLT_VAL
 ELSE
    Let #CalcRsltVal = #CalcRsltVal - &CALC_RSLT_VAL
 END-IF
 
 Let $AnnlFld = Rtrim(&B.GPMX_ANNL_FLD, ' ')
  
 Do Get-Multiple-Values

FROM PS_GPMX_ANNL_DTL B
, PS_GP_RSLT_ERN_DED C
, PS_GP_RSLT_SEG_VW A
WHERE  C.EMPLID = $Emplid
AND C.EMPL_RCD = #EmplRcd
AND C.PIN_NUM = B.GPMX_PIN_ANNL_NUM 
!AND C.SLICE_BGN_DT >= $EmplFstPR
!AND C.SLICE_BGN_DT <= $EmplLstPR
and C.SLICE_end_DT >= $EmplFstPR   !SG
and C.SLICE_end_DT <= $EmplLstPR   !SG
AND B.ENTRY_TYPE_ELEM <> 'AC0'
AND B.COMPANY = $Company
AND B.EFFDT = (SELECT MAX(BB.EFFDT)
             FROM PS_GPMX_ANNL_DTL BB
             WHERE BB.COMPANY = B.COMPANY
             AND BB.EFFDT <= $EndDt)
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW WHERE A.EMPLID = EMPLID AND A.EMPL_RCD = EMPL_RCD AND A.CAL_ID = CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
[$Query3]
AND A.EMPLID = C.EMPLID 
AND A.EMPL_RCD = C.EMPL_RCD 
AND A.CAL_RUN_ID = C.CAL_RUN_ID 
AND A.GP_PAYGROUP = C.GP_PAYGROUP 
AND A.CAL_ID = C.CAL_ID 
AND A.ORIG_CAL_RUN_ID = C.ORIG_CAL_RUN_ID 
AND A.RSLT_SEG_NUM = C.RSLT_SEG_NUM
GROUP BY B.GPMX_ANNL_FLD, B.ENTRY_TYPE_ELEM 
end-select

#debug show 'Calc Annl with/Acum'

Begin-SELECT
B.GPMX_ANNL_FLD &GPMXANLFLD
B.ENTRY_TYPE_ELEM &GPMXTYPELM
B.GPMX_PIN_ANNL_NUM &GPMXPINANNL

 Let #CalcRsltVal = 0
 Let $AnnlFld = Rtrim(&GPMXANLFLD, ' ')  
 Let #PinNum = &GPMXPINANNL
 Do Get-Acum-Earns-Ded
 
 Let #CalcRsltVal = #Result 
 Do Get-Multiple-Values

FROM PS_GPMX_ANNL_DTL B
, PS_GP_RSLT_SEG_VW A
WHERE B.ENTRY_TYPE_ELEM = 'AC0'
AND A.EMPLID = $Emplid
AND A.EMPL_RCD = #EmplRcd
AND B.COMPANY = $Company
AND B.EFFDT = (SELECT MAX(BB.EFFDT)
             FROM PS_GPMX_ANNL_DTL BB
             WHERE BB.COMPANY = B.COMPANY
             AND BB.EFFDT <= $EndDt)
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW WHERE A.EMPLID = EMPLID AND A.EMPL_RCD = EMPL_RCD AND A.CAL_ID = CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
[$Query3]
GROUP BY B.GPMX_ANNL_FLD, B.ENTRY_TYPE_ELEM, B.GPMX_PIN_ANNL_NUM 
end-select

end-procedure Get-Multiple-ErnsDed


!**************************************
begin-procedure Get-Multiple-ErnsDed103
#debug show '* Get-Multiple-ErnsDed103 *'
#debug show '$Emplid ' $Emplid 
#debug show '#Emplrcd ' #Emplrcd 
#debug show '$EmplFstPR ' $EmplFstPR
#debug show '$EmplLstPR ' $EmplLstPR
#debug show '$EndDt ' $EndDt 
#debug show '$BegDt ' $BegDt 
#debug show '$Company ' $Company
#debug show '$Query3 ' $Query3
!**************************************

Begin-SELECT
BA.GPMX_ANNL_FLD_103
C.PIN_NUM
BA.ENTRY_TYPE_ELEM &PINTYPE103
C.CALC_RSLT_VAL + C.CALC_ADJ_VAL &CAL_RSLT_VAL

 Let $AnnlFld103 = Rtrim(&BA.GPMX_ANNL_FLD_103, ' ')
 Let #PinNum =  &C.PIN_NUM

 #debug show 'AnnlFld ' $AnnlFld103 '&CAL_RSLT_VAL: '  &CAL_RSLT_VAL ' PIN TYPE: ' &PINTYPE103
 If $AnnlFld103 = '01'
    If Rtrim(&PINTYPE103, ' ') = 'DD0'
        Let #s5P1g = #s5P1g - &CAL_RSLT_VAL
    Else
        Let #s5P1g = #s5P1g + &CAL_RSLT_VAL
    End-If
 end-if

 if $AnnlFld103 = '02'
    If Rtrim(&PINTYPE103, ' ') = 'DD0'
        Let #s5P1e = #s5P1e - &CAL_RSLT_VAL    
    Else
        Let #s5P1e = #s5P1e + &CAL_RSLT_VAL    
    End-If    
 end-if

FROM PS_GP_RSLT_ERN_DED C
, PS_GPMX_ANNL_103 BA
, PS_GP_RSLT_SEG_VW A
WHERE C.EMPLID = $Emplid
AND C.EMPL_RCD = #EmplRcd
AND C.PIN_NUM = BA.GPMX_PIN_103_NUM 
AND BA.EFFDT = (SELECT MAX(BB.EFFDT)
             FROM PS_GPMX_ANNL_103 BB
             WHERE BB.COMPANY = BA.COMPANY
             AND BB.EFFDT <= $EndDt)
AND BA.COMPANY = $Company
!AND C.SLICE_BGN_DT >= $EmplFstPR
!AND C.SLICE_BGN_DT <= $EmplLstPR
AND C.SLICE_END_DT >= $EmplFstPR
AND C.SLICE_END_DT <= $EmplLstPR
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW WHERE A.EMPLID = EMPLID AND A.EMPL_RCD = EMPL_RCD AND A.CAL_ID = CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
[$Query3]
AND A.EMPLID = C.EMPLID 
AND A.EMPL_RCD = C.EMPL_RCD 
AND A.CAL_RUN_ID = C.CAL_RUN_ID 
AND A.GP_PAYGROUP = C.GP_PAYGROUP 
AND A.CAL_ID = C.CAL_ID 
AND A.ORIG_CAL_RUN_ID = C.ORIG_CAL_RUN_ID 
AND A.RSLT_SEG_NUM = C.RSLT_SEG_NUM
end-select
end-procedure Get-Multiple-ErnsDed103

!**************************************
begin-procedure Get-Multiple-Acum
#debug show 'Get-Multiple-Acum'
!**************************************

If $S101 <> 'X'  !Annual Adjustment Present ?

  Let $PinCode = 'SUB NO ACRED_IMMNS MEX'
  Do Get-Earns-Ded
  Let #S2I = #S2I + Abs(#Result)
  
Else
  If $S102 = 'A'

          Let $PinCode  = 'SUB ART 178 MEX'
          Do Get-Earns-Ded
          Let #S2H = #S2H + ABS(#Result)

          Let $PinCode = 'SUB NO ACRE MEX'
          Do Get-Earns-Ded
          Let #S2I = #S2I + Abs(#Result)
  Else
        
          Let $PinCode  = 'SUB ISR 1991 MEX'
          Do Get-Earns-Ded
          Let #S2H = #S2H + ABS(#Result)

          Let $PinCode = 'SUB NO ACRE MEX'
          Do Get-Earns-Ded
          Let #S2I = #S2I + Abs(#Result)
  End-If
  
End-If

Let $PinCode = 'LIQUIDACION BRUTA MEX'
Do Get-Earns-Ded
Let #S3a = #S3a + #Result

Let $PinCode = 'ISR NETO 112 MEX'
Do Get-Earns-Ded
Let #S3h = #S3h + #Result

!Let $PinCode = 'CRED ART 115_IMMNS MEX'
!Do Get-Earns-Ded
!Let #S6Y1 = #S6Y1 + #Result

Let $PinCode = 'CRE SAL EFEC_IMMNS MEX'
Do Get-Earns-Ded
If #Result = 0
  Let $PinCode = 'EXCE CRE SAL_IMMNS MEX'
  Do Get-Earns-Ded
End-if
Let #S6Z1 = #S6Z1 + Abs(#Result)

Let #PinNum = 0
Let $PinCode = 'ISR NETO 113_IMMNS MEX'
Do Get-Earns-Ded
Let #S6U1 = #S6U1 + #Result

Let $PinCode = 'RISR NETO142_IMMNS MEX'
Do Get-Earns-Ded
Let #S6U1 = #S6U1 + #Result

Let $PinCode = 'RISR NETO148_IMMNS MEX'
Do Get-Earns-Ded
Let #S6U1 = #S6U1 + #Result

Let #S6U1 = Abs(#S6U1)
end-procedure Get-Multiple-Acum

!*********************************************************************************
Begin-Procedure Get-Acum-Earns-Ded
#debug show '* Get-Acum-Earns-Ded *'
#debug show '  #PinNum     : ' #PinNum
#debug show '  $Emplid     : ' $Emplid
#debug show '  $EmplBegDt  : ' $EmplBegDt
#debug show '  $EmplTermDt : ' $EmplTermDt
#debug show '  $EmplLstPR  : ' $EmplLstPR
!*********************************************************************************
Let #Result = 0
Let #PinNumAcum = #PinNum
Begin-Select
B.CALC_RSLT_VAL + B.CALC_ADJ_VAL &RESULT
D.PIN_TYPE &D.PIN_TYPE
B.PIN_NUM &B.PIN_NUM
D.PIN_CODE &D.PIN_CODE

   Let #PiNNumMbr = &B.PIN_NUM
   If Rtrim(&D.PIN_TYPE, ' ') = 'AC'
      Do Get-Acum-Sign      
      Let #Result = #Result + &RESULT * #SignNumber
      #debug show 'Acum Earns Ded #Result: ' #Result
      Let $PinCode = &D.PIN_CODE
      Let #PinNum = 0
      Do Get-Acum-Adj
      Let #Result = #Result + #ResultAdj
   Else
     If Rtrim(&D.PIN_TYPE, ' ') = 'DD'
        Let #Result = #Result + &RESULT * -1
     Else
        Let #Result = #Result + &RESULT
     End-If
   End-IF    
   
FROM PS_GP_RSLT_SEG_VW A
, PS_GP_RSLT_ERN_DED B 
, PS_GP_PIN D
WHERE A.EMPLID = $Emplid
AND A.EMPL_RCD = #EmplRcd
AND A.CALC_TYPE = 'P'
AND A.RSLT_VER_NUM = (SELECT MAX(B.RSLT_VER_NUM) FROM PS_GP_RSLT_SEG_VW B WHERE A.EMPLID = B.EMPLID AND A.EMPL_RCD = B.EMPL_RCD AND A.CAL_ID = B.CAL_ID )
AND A.RSLT_REV_NUM = 1
AND A.CALC_ACTION <> 'V' 
AND A.PYE_CALC_STAT >= '50'
[$Query3]
AND A.EMPLID = B.EMPLID 
AND A.EMPL_RCD = B.EMPL_RCD 
AND A.CAL_RUN_ID = B.CAL_RUN_ID 
AND A.GP_PAYGROUP = B.GP_PAYGROUP 
AND A.CAL_ID = B.CAL_ID 
AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID 
AND A.RSLT_SEG_NUM = B.RSLT_SEG_NUM
!AND B.SLICE_BGN_DT >= $EmplFstPR
!AND B.SLICE_BGN_DT <= $EmplLstPR
and B.SLICE_END_DT >= $EmplFstPR !SG
and B.SLICE_END_DT <= $EmplLstPR !SG
AND B.PIN_NUM IN (SELECT (PIN_MBR_NUM)
                      FROM PS_GPMX_ANNL_TMP
                      WHERE OPRID = $prcs_oprid
                      AND RUN_CNTL_ID = $prcs_run_cntl_id
                      AND PRCSINSTANCE = #prcs_process_instance
                      AND PIN_NUM = #PinNum
                      AND BGN_DT <= $EmplLstPR
                      AND END_DT >= $EmplLstPR)
AND D.PIN_NUM = B.PIN_NUM
End-Select
Let $PinCode = ''
Let #PinNum = #PinNumAcum
#debug show '#Result ' #Result
End-Procedure Get-Acum-Earns-Ded

!*********************************************************************************
Begin-Procedure Get-Acum-Adj
#debug show '* Get-Acum-Adj *'
#debug show '$PinCode ' $PinCode
#debug show '#PinNum ' #PinNum
#debug show '$Emplid ' $Emplid
#debug show '$BegDt ' $BegDt
#debug show '$EndDt ' $EndDt
#debug show '$Company ' $Company
#debug show '$EmplBegDt ' $EmplBegDt
#debug show '$Query3 ' $Query3
!*********************************************************************************
Let #ResultAdj = 0
Begin-SELECT 
SUM(C.USER_ADJ_AMT) &USRADJAMT

   Let #ResultAdj = &USRADJAMT   
FROM PS_GP_ACM_USER_ADJ C 
, PS_GP_RSLT_SEG_VW     A 
, PS_GP_PIN             B
WHERE (B.PIN_CODE = $PinCode
OR  B.PIN_NUM = #PinNum)
AND C.PIN_NUM = B.PIN_NUM 
AND C.EMPLID = $Emplid
AND C.EMPL_RCD = #EmplRcd
AND C.ACM_FROM_DT = $BegDt 
AND C.ACM_THRU_DT = $EndDt
AND C.USER_KEY1 = $Company
[$Query3]
AND C.CAL_ID = A.CAL_ID 
AND C.EMPLID = A.EMPLID
AND C.EMPL_RCD = A.EMPL_RCD
AND C.CAL_RUN_ID = A.CAL_RUN_ID
AND C.GP_PAYGROUP = A.GP_PAYGROUP
AND C.RSLT_SEG_NUM = A.RSLT_SEG_NUM
End-Select
#debug show '#ResultAdj ' #ResultAdj
End-Procedure Get-Acum-Adj

!*********************************************************************************
Begin-Procedure Get-Acum-Sign
#debug show '* Get-Acum-Sign *'
#debug show '$EndDt ' $EndDt
!*********************************************************************************
Begin-Select
C.ACM_SIGN &C.ACM_SIGN

   If Rtrim(&C.ACM_SIGN, ' ') = 'S'
     Let #SignNumber = -1
   Else
     Let #SignNumber = 1
   End-If
   
FROM PS_GP_ACM_MBR C
WHERE C.PIN_NUM = #PinNum
AND C.PIN_MBR_NUM = #PinNumMbr
AND C.BGN_DT = (SELECT MAX(BGN_DT) FROM PS_GP_ACM_MBR WHERE PIN_NUM = C.PIN_NUM AND PIN_MBR_NUM = C.PIN_MBR_NUM AND BGN_DT <= $EndDt)
End-Select
#debug show '#SignNumber ' #SignNumber
End-Procedure Get-Acum-Sign


!*********************************************************************************
Begin-Procedure Get-Sum-Acum
! Get accumulator sum month by month
#debug show 'Get-Sum-Acum'
#debug show '$EmplBegDt ' $EmplBegDt
#debug show '$EmplLstPR ' $EmplLstPR
#debug show '$EmplId ' $EmplId
#debug show '#PinNum ' #PinNum
#debug show '$PinCode ' $PinCode
#debug show '$BegDt     ' $BegDt
#debug show '$EndDt     ' $EndDt
!*********************************************************************************
Let #PinNumAcum = #PinNum
Let #SumAcum = 0
Begin-SELECT
A3.PYMT_DT &PTUPYMNTDT
SUM(P3.CALC_RSLT_VAL) &P3CALCRSLTVAL
   Do Convert-To-DTU-Date( &PTUPYMNTDT, $PaymentDt)
   Let #SumAcum = #SumAcum  + &P3CALCRSLTVAL
   
FROM PS_GP_PYE_PRC_STAT A3
, PS_GP_PYE_SEG_STAT B3
, PS_GP_RSLT_ACUM P3
!WHERE A3.PYMT_DT BETWEEN $EmplBegDt AND $EmplLstPR
WHERE B3.CAL_RUN_ID       =       A3.CAL_RUN_ID 
AND B3.EMPLID           =       A3.EMPLID 
AND B3.EMPL_RCD         =       A3.EMPL_RCD 
AND B3.GP_PAYGROUP      =       A3.GP_PAYGROUP 
AND B3.CAL_ID           =       A3.CAL_ID 
AND B3.ORIG_CAL_RUN_ID  =       A3.ORIG_CAL_RUN_ID 
AND B3.PYE_CALC_STAT    >=      '50' 
AND B3.CALC_ACTION      =       'C' 
AND P3.CAL_RUN_ID       =       A3.CAL_RUN_ID 
AND P3.EMPLID           =       A3.EMPLID 
AND P3.EMPL_RCD         =       A3.EMPL_RCD 
AND P3.GP_PAYGROUP      =       A3.GP_PAYGROUP 
AND P3.CAL_ID           =       A3.CAL_ID 
AND P3.ORIG_CAL_RUN_ID  =       A3.ORIG_CAL_RUN_ID 
AND P3.RSLT_SEG_NUM     =       B3.RSLT_SEG_NUM
AND P3.ACM_FROM_DT      >=      $BegDt
AND P3.ACM_THRU_DT      <=      $EndDt
AND P3.USER_KEY1        =       $Company
AND A3.RSLT_VER_NUM     =       1
AND A3.RSLT_REV_NUM     =       1
AND P3.EMPLID           =       $EmplId
AND P3.PIN_NUM = (SELECT C.PIN_NUM 
                   FROM PS_GP_PIN C, PS_GP_ACCUMULATOR C2 
                   WHERE (C.PIN_NUM = #PinNum
                   OR C.PIN_CODE = $PinCode)
                   AND C.PIN_NUM = C2.PIN_NUM 
                   AND C2.CORR_RTO_IND = 'N') 
AND A3.CAL_RUN_ID = (SELECT AAS.CAL_RUN_ID 
                     FROM PS_GP_CAL_RUN AAS 
                     WHERE AAS.RUN_FINALIZED_TS = (SELECT MAX(AATS.RUN_FINALIZED_TS) 
                                                   FROM PS_GP_CAL_RUN AATS
                                                   WHERE AATS.CAL_RUN_ID IN (SELECT AAA.CAL_RUN_ID 
                                                                             FROM PS_GP_RSLT_ACUM  AAA
                                                                             WHERE AAA.ACM_FROM_DT = P3.ACM_FROM_DT
                                                                             AND AAA.ACM_THRU_DT = P3.ACM_THRU_DT 
                                                                             AND AAA.EMPLID = P3.EMPLID
                                                                             AND AAA.PIN_NUM = P3.PIN_NUM)
                                                   )
                     )
AND (A3.CAL_ID = (SELECT AA3.CAL_ID 
                  FROM PS_GP_CAL_RUN_DTL AA3 
                  WHERE AA3.CAL_RUN_ID = P3.CAL_RUN_ID 
                  AND AA3.CAL_FINAL_TS = (SELECT MAX(CAL_FINAL_TS)
                                          FROM PS_GP_CAL_RUN_DTL
                                          WHERE CAL_RUN_ID = AA3.CAL_RUN_ID))
!Off-Cycle                                          
     OR (A3.CAL_ID = (SELECT DISTINCT OF2.CAL_ID
                      FROM PS_GP_PYE_CAL OF2
                      WHERE OF2.EMPLID = A3.EMPLID
                      AND OF2.CAL_RUN_ID = A3.CAL_RUN_ID
                      AND OF2.EMPL_RCD = A3.EMPL_RCD
                      AND OF2.GP_PAYGROUP = A3.GP_PAYGROUP
                      AND PRD_BGN_DT >= P3.ACM_FROM_DT
                      AND PRD_END_DT <= P3.ACM_THRU_DT)
         AND A3.CAL_RUN_ID = (SELECT OF1.CAL_RUN_ID
                              FROM PS_GP_CAL_RUN OF1
                              WHERE OF1.CAL_RUN_ID = A3.CAL_RUN_ID
                              AND OFF_CYCLE = 'Y')))
GROUP BY A3.PYMT_DT 
End-Select
Let $PinCode = ''
Let #PinNum = #PinNumAcum
Do Get-Acum-Adj
Let #SumAcum = #SumAcum + #ResultAdj
#debug show '#SumAcum ' #SumAcum
End-Procedure

!*********************************************************************************
begin-procedure Get-Multiple-Values
#debug show '* Get-Multiple-Values *'
#debug show '$AnnlFld: ' $AnnlFld 
#debug show '#CalcRsltVal ' #CalcRsltVal
!*********************************************************************************

 Evaluate $AnnlFld
 when = '058'
   Let #S5og = #S5og + #CalcRsltVal
   Break
 when = '059'
   Let #S5oe = #S5oe + #CalcRsltVal
   Break
 when = '060'
   Let #S5pg = #S5pg + #CalcRsltVal
   Break
 when = '061'
   Let #S5pe = #S5pe + #CalcRsltVal
   Break
 when = '062'
   Let #S5qg = #S5qg + #CalcRsltVal
   Break
 when = '063'
   Let #S5qe = #S5qe + #CalcRsltVal
   Break
 when = '064'
   Let #S5rg = #S5rg + #CalcRsltVal
   Break
 when = '065'
   Let #S5re = #S5re + #CalcRsltVal   
   Break
 when = '066'
   Let #S5sg = #S5sg + #CalcRsltVal
   Break
 when = '067'
   Let #S5se = #S5se + #CalcRsltVal
   Break
 when = '068'
   Let #S5tg = #S5tg + #CalcRsltVal
   Break
 when = '069'
   Let #S5te = #S5te + #CalcRsltVal
   Break
 !when = '066'
 !  Let #S5ug = #S5ug + #CalcRsltVal
 !  Break
 !when = '067'
 !  Let #S5ue = #S5ue + #CalcRsltVal
 !  Break
 when = '072'
   Let #S5vg = #S5vg + #CalcRsltVal
   Break
 when = '073'
   Let #S5ve = #S5ve + #CalcRsltVal 
   Break
 when = '074'
   Let #S5wg = #S5wg + #CalcRsltVal
   Break
 when = '075'
   Let #S5we = #S5we + #CalcRsltVal
   Break
 when = '076'
   Let #S5xg = #S5xg + #CalcRsltVal
   Break
 when = '077'
   Let #S5xe = #S5xe + #CalcRsltVal   
   Break
 when = '078'
   Let #S5yg = #S5yg + #CalcRsltVal
   Break
 when = '079'
   Let #S5ye = #S5ye + #CalcRsltVal
   Break
 when = '080'
   Let #S5zg = #S5zg + #CalcRsltVal
   Break
 when = '081'
   Let #S5ze = #S5ze + #CalcRsltVal 
   Break
 when = '082'
   Let #S5A1g = #S5A1g + #CalcRsltVal
   Break
 when = '083'
   Let #S5A1e = #S5A1e + #CalcRsltVal
   Break
 when = '084'
   Let #S5B1g = #S5B1g + #CalcRsltVal
   Break
 when = '085'
   Let #S5B1e = #S5B1e + #CalcRsltVal    
   Break
 when = '086'
    Let #S5C1g = #S5C1g + #CalcRsltVal
    Break
 when = '087'
    Let #S5C1e = #S5C1e + #CalcRsltVal
    Break
 when = '088'
    Let #S5D1g = #S5D1g + #CalcRsltVal
    Break
 when = '089'
    Let #S5D1e = #S5D1e + #CalcRsltVal 
    Break
 when = '090'
    Let #S5E1g = #S5E1g + #CalcRsltVal
    Break
 when = '091'
    Let #S5E1e = #S5E1e + #CalcRsltVal
    Break
 when = '092'
    Let #S5F1g = #S5F1g + #CalcRsltVal
    Break
 when = '093'
    Let #S5F1e = #S5F1e + #CalcRsltVal 
    Break
 when = '094'
    Let #S5G1g = #S5G1g + #CalcRsltVal
    Break
 when = '095'
    Let #S5G1e = #S5G1e + #CalcRsltVal
    Break
 when = '096'
    Let #S5H1g = #S5H1g + #CalcRsltVal
    Break
 when = '097'
    Let #S5H1e =#S5H1e + #CalcRsltVal 
    Break
 when = '098'
    Let #S5I1g = #S5I1g + #CalcRsltVal
    Break
 when = '099'
    Let #S5I1e = #S5I1e + #CalcRsltVal
    Break
 when = '100'
    Let #S5J1g = #S5J1g + #CalcRsltVal
    Break
 when = '101'
    Let #S5J1e =#S5J1e + #CalcRsltVal   
    Break
 when = '102'
    Let #S5K1g = #S5K1g + #CalcRsltVal
    Break
 when = '103'
    Let #S5K1e = #S5K1e + #CalcRsltVal
    Break
 when = '104'
    Let #S5L1g = #S5L1g + #CalcRsltVal
    Break
 when = '105'
    Let #S5L1e =#S5L1e + #CalcRsltVal   
    Break
 when = '106'
    Let #S5M1g = #S5M1g + #CalcRsltVal
    Break
 when = '107'
    Let #S5M1e = #S5M1e + #CalcRsltVal
    Break
 when = '108'
    Let #S5N1g = #S5N1g + #CalcRsltVal
    Break
 when = '109'
    Let #S5N1e = #S5N1e + #CalcRsltVal   
    Break
 when = '120'
    Let #S6Y1  = #S6Y1 + #CalcRsltVal   
    Break     
 when = '122'
    Let #S6a1  = Abs(#S6a1 + #CalcRsltVal)
    Break
 when = '123'
    Let #S6b1  = abs(#S6b1 + #CalcRsltVal)
    Break
 when = '126'
    Let #S6c1  = #S6c1 + #CalcRsltVal     
    Break 
 !when = '123'
 !   Let #S2N   = #S2N + #CalcRsltVal
 !   Break  
 when = '128'
    Let #S2G   = #S2G  + #CalcRsltVal
    Break
 when = '129'
    If $S101 <> 'X'
      Let #S2H   = #S2H  + Abs(#CalcRsltVal)
    End-If
    Break
 !when = '127'
 ! Let #S2I   = #S2I  + #CalcRsltVal
 ! Break
 when = '134'
   Let #S2J   = #S2J  + Abs(#CalcRsltVal)
    Break
 End-Evaluate
 
 Let #CalcRsltVal = 0
end-procedure Get-Multiple-Values

!*********************************************************************************
begin-procedure Initialize-Variables
#debug show '* Initialize-Variables *'
!*********************************************************************************
   ! Section 1 variables
   let $Empl_Name = ''
   let $Empl_LastName = ''
   let $Empl_SecondLastName = ''
   let $Empl_RFC  = ''
   let $Empl_CURP = ''

   ! New Section
   Let #AdInfo1 = 0
   Let $AdInfo2 = ''
   Let #AdInfo3 = 0
   Let #AdInfo4 = 0

   ! Section 2 variables
   Let $S101  = ''
   Let $S102  = ''
   Let $S103  = ''
   Let $S104  = '' 
   Let $S105  = ''
   Let #S106  = 0
   Let $S106a = ''
   Let $S106b = ''
   Let #S120  = 0
   Let $S107a = '' 
   Let $S107a = '' 
   Let $S108a = '' 
   Let $S108b = ''
   Let $S109a = ''
   Let $S109b = ''
   Let $S110a = '' 
   Let $S110b = ''
   Let $S111  = ''
   Let $S112  = ''
   Let $S113  = ''
   
   let #S2A  = 0
   let #S2B  = 0
   let #S2C  = 0
   let #S2E  = 0
   let #S2F  = 0
   let #S2G  = 0
   let #S2H  = 0
   let #S2I  = 0
   let #S2J  = 0
   let #S2K  = 0
   let #S2L  = 0
   let #S2M  = 0
   let #S2N  = 0
   let #S2O  = 0
   let #S2P  = 0

   ! Section 3 variables
   Let #S3Q  = 0
   let #S3R  = 0
   let #S3S  = 0
   let #S3T  = 0
   let #S3U  = 0
   let #S3V  = 0
   let #S3W  = 0
   let #S3X  = 0  
   let #S3Y  = 0  
   let #S3Z  = 0  
   let #S3a  = 0
   let #S3b  = 0
   let #S3c  = 0
   let #S3d  = 0
   let #S3e = 0
   let #S3f = 0
   let #S3g = 0
   let #S3h = 0
   
   ! Section 4 variables
   Let #S4i  = 0
   let #S4j  = 0
   let #S4k  = 0
   let #S4l  = 0
   let #S4m  = 0
   let #S4n  = 0   

 
   ! Section 6 variables  
   let #S5og = 0
   let #S5oe = 0
   let #S5pg = 0
   let #S5pe = 0
   let #S5qg = 0
   let #S5qe = 0
   let #S5rg = 0
   let #S5re = 0
   let #S5sg = 0
   let #S5se = 0
   let #S5tg = 0
   let #S5te = 0
   let #S5ug = 0
   let #S5ue = 0
   let #S5vg = 0
   let #S5ve = 0   
   let #S5wg = 0
   let #S5we = 0
   let #S5xg = 0
   let #S5xe = 0
   let #S5yg = 0
   let #S5ye = 0
   let #S5zg = 0
   let #S5ze = 0
   let #S5A1g = 0
   let #S5A1e = 0
   let #S5B1g = 0
   let #S5B1e = 0
   let #S5C1g = 0
   let #S5C1e = 0
   let #S5D1g = 0
   let #S5D1e = 0
   let #S5E1g = 0
   let #S5E1e = 0
   let #S5F1g = 0
   let #S5F1e = 0
   let #S5G1g = 0
   let #S5G1e = 0
   let #S5H1g = 0
   let #S5H1e = 0 
   let #S5I1g = 0
   let #S5I1e = 0
   let #S5J1g = 0
   let #S5J1e = 0
   let #S5K1g = 0
   let #S5K1e = 0
   let #S5L1g = 0
   let #S5L1e = 0
   let #S5M1g = 0
   let #S5M1e = 0
   let #S5N1g = 0
   let #S5N1e = 0
   let #S5O1g = 0
   let #S5O1e = 0
   let #S5P1g = 0
   let #S5P1e = 0

   ! Section 6 variables   
   let #S6Q1  = 0
   let #s6R1  = 0
   let #S6U1  = 0
   let #S6V1  = 0
   let #S6W1  = 0
   let #S6X1  = 0
   let #S6Y1  = 0
   let #S6Z1  = 0
   let #S6a1  = 0
   let #S6b1  = 0
   let #S6c1  = 0
      
   ! Section 7 variables
   let $CompanyName      = ''
   let $Company_RFC      = ''
   let $Company_CURP     = ''
   let $Company_Address1 = ''
   let $Company_Address2 = ''
   let $Address1         = ''
   let $Address2         = ''
   let $Address3         = ''
   let $Address4         = ''
   let $City             = ''
   let $State            = ''
   let $County           = ''
   let $Zip              = ''
   let $Legal_Name       = ''
   let $Legal_RFC        = ''
   let $Legal_CURP       = ''

   ! Other variables
   let $Term_Date    = ''
   let $Service_Date = ''

end-procedure Initialize-Variables


!*******************************************************
begin-procedure Formatted-Values-And-Formulas
#debug show '* Formatted-Values-And-Formulas *'
!*******************************************************   
   let #Zero = 0

     let $StringIn = to_char(#SubAcred)
     do Check-Points
     
  
  !---2009 ---
   !  let #S106  = to_char(#SubAcred)
   !  Let $S106a = $StringOut1
   !  Let $S106b = $StringOut2
   !  Let #S120  = #SubAcredApplied
   
     let #S5qe  = ABS(#S5qe)
     If $S102 = 'B' 
        let #S107  = to_char(#SubAcred)
        Let $S107a = $StringOut1
        Let $S107b = $StringOut2
        Let $S106a = ''
        Let $S106b = ''
     End-if 
   
   If #S5og < 1
     Let #S5og = 0
   End-IF
   let #S5og  = round(abs(#S5og),0) 
   let #S5oe  = round(abs(#S5oe),0) 
   Let #S5pg  = round(abs(#S5pg),0) 
   let #S5pe  = round(abs(#S5pe),0) 
   let #S5qg  = round(abs(#S5qg),0) 
   let #S5qe  = round(abs(#S5qe),0) 
   let #S5rg  = round(abs(#S5rg),0) 
   let #S5re  = round(abs(#S5re),0) 
   let #S5sg  = round(abs(#S5sg),0) 
   let #S5se  = round(abs(#S5se),0) 
   let #S5tg  = round(abs(#S5tg),0) 
   let #S5te  = round(abs(#S5te),0) 
   let #S5ug  = round(abs(#S5ug),0) 
   let #S5ue  = round(abs(#S5ue),0) 
   let #S5vg  = round(abs(#S5vg),0) 
   let #S5ve  = round(abs(#S5ve),0)   
   let #S5wg  = round(abs(#S5wg),0) 
   let #S5we  = round(abs(#S5we),0) 
   let #S5xg  = round(abs(#S5xg),0) 
   let #S5xe  = round(abs(#S5xe),0) 
   let #S5yg  = round(abs(#S5yg),0) 
   let #S5ye  = round(abs(#S5ye),0) 
   let #S5zg  = round(abs(#S5zg),0) 
   let #S5ze  = round(abs(#S5ze),0) 
   let #S5A1g  = round(abs(#S5A1g),0) 
   let #S5A1e  = round(abs(#S5A1e),0) 
   let #S5B1g  = round(abs(#S5B1g),0) 
   let #S5B1e  = round(abs(#S5B1e),0) 
   let #S5C1g  = round(abs(#S5C1g),0) 
   let #S5C1e  = round(abs(#S5C1e),0) 
   let #S5D1g  = round(abs(#S5D1g),0) 
   let #S5D1e  = round(abs(#S5D1e),0) 
   let #S5E1g  = round(abs(#S5E1g),0) 
   let #S5E1e  = round(abs(#S5E1e),0) 
   let #S5F1g  = round(abs(#S5F1g),0) 
   let #S5F1e  = round(abs(#S5F1e),0) 
   let #S5G1g  = round(abs(#S5G1g),0) 
   let #S5G1e  = round(abs(#S5G1e),0) 
   let #S5H1g  = round(abs(#S5H1g),0) 
   let #S5H1e  = round(abs(#S5H1e),0) 
   let #S5I1g  = round(abs(#S5I1g),0) 
   let #S5I1e  = round(abs(#S5I1e),0) 
   let #S5J1g  = round(abs(#S5J1g),0) 
   let #S5J1e  = round(abs(#S5J1e),0) 
   let #S5K1g  = round(abs(#S5K1g),0) 
   let #S5K1e  = round(abs(#S5K1e),0) 
   let #S5L1g  = round(abs(#S5L1g),0) 
   let #S5L1e  = round(abs(#S5L1e),0) 
   let #S5M1g  = round(abs(#S5M1g),0) 
   let #S5M1e  = round(abs(#S5M1e),0) 
   let #S5N1g  = round(abs(#S5N1g),0) 
   let #S5N1e  = round(abs(#S5N1e),0) 
   let #S5O1g = round(abs(#S5O1g),0)
   let #S5O1e = round(abs(#S5O1e),0)
   let #S5P1g = round(abs(#S5P1g),0)
   let #S5P1e = round(abs(#S5P1e),0)
   
   Let #S6Q1 = #S5og + #S5pg + #S5qg + #S5rg + #S5sg + #S5tg + #S5ug + #S5vg + #S5wg + #S5xg
   Let #S6Q1 = #S6Q1  + #S5yg + #S5zg + #S5A1g + #S5B1g + #S5C1g + #S5D1g + #S5E1g + #S5F1g + #S5G1g
   Let #S6Q1 = #S6Q1  + #S5H1g + #S5I1g + #S5J1g + #S5K1g + #S5L1g + #S5M1g + #S5N1g + #S5O1g + #S5P1g
    
   Let #S6R1 = #S5oe + #S5pe + #S5qe + #S5re + #S5se + #S5te + #S5ue + #S5ve + #S5we + #S5xe
   Let #S6R1 = #S6R1  + #S5ye + #S5ze + #S5A1e + #S5B1e + #S5C1e + #S5D1e + #S5E1e + #S5F1e + #S5G1e 
   Let #S6R1 = #S6R1  + #S5H1e + #S5I1e + #S5J1e + #S5K1e + #S5L1e + #S5M1e + #S5N1e + #S5O1e + #S5P1e 
   
   Let #S6S1 = #S6Q1 + #S6R1
   
   Let #S6T1 = 0

   If #Year = 2001
      let #S2K  = 1 - #S2I             
      let #S2L  = #S2K * 2             
   end-if
   
!  Section 3 variables
   let #S3N  = #Zero
   let #S3Q  = #Zero
   let #S3R  = #Zero
   let #S3S  = #Zero
   let #S3T  = #Zero
   let #S3U  = #Zero
   let #S3V  = #Zero
   let #S3W  = #Zero
   let #S3X  = #Zero                    
   let #S3Y  = #Zero
   let #S3Z  = #Zero
   
! Section 4 variables
   If #S3a < #S3e
     Let #S3e = #S3a
   End-If

   If #S3f < 0
      Let #S3f = 0
   End-If

  if #S3a <> 0
    let #S3a = round(abs(#S3a),2)
    let #S3b = round(abs(#S3b),2)
    let #S3c = #MinimumWage * 90 * #S3b
 
    If #S3c > #S3a
      Let #S3c = #S3a
    End-If

    let #S3d = #S3a - #S3c
    If #S3d < 1
      Let #S3d = 0
    End-If
    let #S3e = round(abs(#S3e),2)
    let #S3h = round(abs(#S3h),2)
    if #S3e  < #S3d
      let #S3g=#S3d-#S3e
      let #S3g=round(abs(#S3g),2)
    end-if         
  else
    let #S3a = 0
    let #S3b = 0
    let #S3c = 0
    let #S3d = 0
    let #S3e = 0
    let #S3f = 0
    let #S5d = 0
    let #S5c = 0
    let #S5e = 0
  end-if

  Let #S2A  = round(abs(#S2A),0)
  Let #S2C  = round(abs(#S2C),0)                 
  Let #S2E  = round(abs(#S2E),0)            
  Let #S2F  = round(abs(#S2F),0)           
  Let #S2G  = round(abs(#S2G),0)
  Let #S2H  = round(abs(#S2H),0)
  Let #S2I  = round(abs(#S2I),0)
  let #S2O  = round(abs(#S2O),0)
  Let #S2P  = round(abs(#S2P),0)

  Let #S3h = round(abs(#S3h),0)   
  Let #S3Z = round(abs(#S3Z),0)   
  Let #S4n = round(abs(#S4n),0)   
  Let #S4j = round(abs(#S4j),0)   
  
  Let #S5qe = round(abs(#S5qe),0)
  Let #S6U1 = round(abs(#S6U1),0)    
  Let #S6V1 = round(abs(#S6V1),0)    
  Let #S6W1 = round(abs(#S6W1),0)    
  Let #S6Y1 = round(abs(#S6Y1),0)
  
  If $S101 = 'X'
     Let #S2M  = abs(abs(#S2G) - ABS(#S2H))
  else
     Let #S2M  = 0
  end-if        
  
  Let #S2O  = abs(#S2M) + abs(#S2N)   
  Let #S2P  = #S3Z + #S3h + #S4j + #S4n + #S6U1 + #S6V1
  
  IF #S2P <= 0
     let #S6W1  = 0         
     let #S2P   = 0
  ELSE  
     If $S101 = 'X'
        Let #S6W1 = #S2P - #S2O
        If #S6W1 < 0
           Let #S6W1 = 0
        End-If
     End-if
  END-IF 

  If #S4k > #S4l
    Let #S4m  = #S4k - #S4l
  End-If

  Let #S3Q = round(abs(#S3Q),0)
  Let #S3R = round(abs(#S3R),0)
  Let #S3a = round(abs(#S3a),0)
  Let #S4i = round(abs(#S4i),0)
  Let #S4m = round(abs(#S4m),0)
  Let #S6S1 = round(abs(#S6S1),0)
  Let #S3V = round(abs(#S3V),0)
  Let #S3c = round(abs(#S3c),0)
  Let #S6R1 = round(abs(#S6R1),0)
  Let #S3Y = round(abs(#S3Y),0)
  Let #S3g = round(abs(#S3g),0)
  
  Let #S2A  = #S3Q + #S3R + #S3a + #S4i + #S4m + #S6S1
  Let #S2C  = #S3V + #S3c + #S6R1
  Let #S2D  = #AdInfo4
  Let #S2E  = #S3Y + #S3g
  Let #S2F  = abs(#S2A) - abs(#S2B) - abs(#S2C) - abs(#S2D) - abs(#S2E)
   
   ! Section 6 variables
  let $Company_Address1 = rtrim($Address1,' ') || '   ' || rtrim($Address2,' ') || '   ' || rtrim($Address3,' ')
  let $Company_Address2 = rtrim($Address4,' ') || '   ' || rtrim($City,' ')     || ',  ' || rtrim($State,' ') || '   C.P. ' || rtrim($Zip,' ')

  #debug show '$BegDt ' $BegDt
  #debug show '$EmplBegDt ' $EmplBegDt
  #debug show '$PymntPBgnDt ' $PymntPBgnDt
  #debug show '$EmplFstPR ' $EmplFstPR
  #debug show '$EndDt ' $EndDt
  #debug show '$EmplTermDt ' $EmplTermDt
  #debug show '$PymntPEndDt ' $PymntPEndDt
  #debug show '$PTU-Payment-DtDTU ' $PTU-Payment-DtDTU
  #debug show '$EmplLstPR ' $EmplLstPR
  
  Do Convert-To-Dtu-Date($BegDt, $BegDtDTU)
  Do Convert-To-Dtu-Date($EmplBegDt, $EmplBegDtDTU)
  Do Convert-To-Dtu-Date($MaxBgnDt, $MaxBgnDtDTU)
  Do Convert-To-Dtu-Date($PymntPBgnDt, $PymntPBgnDtDTU)
  Do Convert-To-Dtu-Date($EmplTermDt, $EmplTermDtDTU)
  Do Convert-To-Dtu-Date($origEmplTermDt, $origEmplTermDtDTU)
  Do Convert-To-Dtu-Date($PymntPEndDt, $PymntPEndDtDTU)
  
  If datediff(strtodate($BegDtDTU,'YYYY-MM-DD'), strtodate($EmplBegDtDTU,'YYYY-MM-DD'),'day') < 0
    Let $MaxBgnDt = $EmplBegDt
  Else
    Let $MaxBgnDt = $BegDt
  End-If
  If datediff(strtodate($MaxBgnDtDTU,'YYYY-MM-DD'), strtodate($PymntPBgnDtDTU,'YYYY-MM-DD'),'day') < 0
    Let $MaxBgnDt = $PymntPBgnDt
  End-If
  
  Do Convert-To-Dtu-Date($MaxBgnDt, $MaxBgnDtDTU)
  
  #debug show '$MaxBgnDt ' $MaxBgnDt

  Let $MinEndDt = $EndDt  
if $EmplTerminated = 'Y'   !SG  
  If Rtrim($PTU-Payment-DtDTU, ' ') <> '' And Rtrim($EmplTermDt, ' ') <> ''
          If datediff(strtodate($PTU-Payment-DtDTU,'YYYY-MM-DD'), strtodate($origEmplTermDtDTU,'YYYY-MM-DD'), 'day')  > 0
            Let $MinEndDt = strtodate($PTU-Payment-DtDTU,'YYYY-MM-DD')
          Else                           
            if $EmplTerminated = 'Y'
              Let $MinEndDt = $origEmplTermDt
            else
                Let $MinEndDt = $EmplTermDt             
            end-if            
          End-If  
  Else
      If Rtrim($PTU-Payment-DtDTU, ' ') <> '' 
         Let $MinEndDt = strtodate($PTU-Payment-DtDTU,'YYYY-MM-DD')
      Else
         If Rtrim($origEmplTermDt, ' ') <> ''
            If ($EmplTerminated = 'Y') And datediff(strtodate($MaxBgnDtDTU,'YYYY-MM-DD'), strtodate($origEmplTermDtDTU,'YYYY-MM-DD'),'day') < 0
               Let $MinEndDt = $origEmplTermDt
            else
               if ($origEmplTermDtDTU <> $EmplTermDtDTU) and $EmplTerminated = 'Y'
                  Let $MinEndDt = $origEmplTermDt
               end-if
            End-If
         End-If
      End-If
  End-IF
end-if  !SG  

  Do Convert-To-Dtu-Date($MinEndDt, $MinEndDtDTU)
  
  #debug show '$MinEndDt ' $MinEndDt
  #debug show '$PymntPEndDt ' $PymntPEndDt
  
  if rtrim($PymntPEndDt, ' ') <> '' and rtrim($EmplTermDt, ' ') <> ''  !SG
    If datediff(strtodate($MinEndDtDTU,'YYYY-MM-DD'), strtodate($PymntPEndDtDTU,'YYYY-MM-DD'), 'day') > 0
      Let $MinEndDt = $PymntPEndDt
    End-If
  End-If

  Do Convert-To-Dtu-Date($MinEndDt, $MinEndDtDTU)
  

  Do DTU-Parse-Date($MaxBgnDtDTU,#Ano,#Mes,#Dia) 
  !Let $MMBeg = Edit(#Mes, '00')
    

  Do DTU-Parse-Date($MinEndDtDTU,#Ano,#Mes,#Dia)
  !Let $MMEnd = Edit(#Mes, '00')
  
  #debug show '$MMEnd: ' $MMEnd
end-procedure Formatted-Values-And-Formulas

begin-procedure Check-Points

  Let $StringOut1  = ''
  Let $StringOut2  = ''

  Let #Len = Length($StringIn)
  Let #I  = 1

  while #I <= #Len
    Let $Test_Char = Substr($StringIn, #I, 1)
    
    if $Test_Char = '.'
       Let $StringOut1  = Rtrim(Substr($StringIn, 1, #I), '.')
       Let $StringOut2  = Ltrim(Substr($StringIn, #I, #Len), '.')
       Let #I = #Len
    end-if
     
    add 1 to #I
  end-while
  
end-procedure Check-Points

!**************************************
begin-procedure Print-Form
#debug show '*** Print-Form ***'
!**************************************

Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr
print 'CONSTANCIA DE SUELDOS, SALARIOS, CONCEPTOS'  ({c2a},37) Bold 
print 'ASIMILADOS Y CRÉDITO AL SALARIO ( INCLUYE INGRESOS POR ACCIONES )'   (+2,23) Bold
print '37'                                          ({c2},118) Bold
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
print $Emplid                                       (-2,1) Bold
print '/'                                           (,+1) Bold
print $DeptId                                       (,+1) Bold
print 'ANVERSO'                                     (,115)
  
let #Zero = 0
let #dx   = 2
let #widx = 6
let #widx2 = 8
let #dy   = 3
let #dy2  = #dy - 1
let #r1a  = {r0} + (#dy * 2)
let #r1   = {r0} + (#dy * 1) + #dy2
let #r2   = {r0} + (#dy * 2) + #dy2

let #c44 = {c36} + 8
let #c52 = #c44 + 8

let #c6a1d = {c36} + #dx
let #c6a2d = #c44 + #dx
let #c6b1d = #c52 + #dx
let #c6    = {c6a1} - 30


Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
graphic (#r1a,{c36},#widx) box 3 {g2}
graphic (,#c44,#widx) box 3 {g2}
graphic (,#c52,#widx2) box 3 {g2}

print 'MES INICIAL'                                 (#r1,{c36})
print 'MES FINAL'                                   (,#c44)
print 'EJERCICIO'                                   (,#c52)

Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
print 'PERIODO QUE AMPARA LA CONSTANCIA:'                            (#r2,{c1})
print 'ESTA CONSTANCIA DEBERÁ SER CONSERVADA POR EL TRABAJADOR.'     (,#c6)


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print $MMBeg                                       (0,#c6a1d) Bold
print $MMEnd                                       (0,#c6a2d) Bold
print $YYBeg                                       (0,#c6b1d) Bold

!************************************************************************************************
! 1 DATOS DEL TRABAJADOR
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r1a = {r2} + (#dy * 1)
let #r2a = {r2} + (#dy * 2) + 1

let #r1  = {r2} + (#dy * 1) + #dy2
let #r2  = {r2} + (#dy * 2) + #dy3
let #r3  = {r2} + (#dy * 3) + #dy3
let #r4  = {r2} + (#dy * 4) + #dy3

graphic (#r1a,1,{l5}) box 3 {g2} !titulo
graphic (#r2a,{l1a},36) box 3 {g1}
graphic (,84,37) box 3 {g1}

graphic (+6,1,{l39}) box 3 {g1}
graphic (,41,{l39}) box 3 {g1}
graphic (,81,{l40}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
Print '1'                                                        (#r1,{c1}) Bold
Print 'DATOS DEL TRABAJADOR O ASIMILADO A SALARIOS'              (#r1,38) BOLD

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'REGISTRO FEDERAL DE'                                      (#r2,{c1}) Bold
print 'CONTRIBUYENTES'                                           (+1,{c1})
print 'CLAVE ÚNICA DE'                                           (#r2,{c6}) Bold
print 'REGISTRO DE POBLACIÓN'                                    (+1,{c6})
print 'APELLIDO PATERNO'                                         (#r3,{c1}) Bold
print 'APELLIDO MATERNO'                                         (,41) Bold
print 'NOMBRE(S)'                                                (,81) Bold


!Clear Employee name from extended characters.

  Let $StringIn = $Empl_Name
  do Check-Characters
  move $String to $Empl_Name

  Let $StringIn = $Empl_LastName
  do Check-Characters
  move $String to $Empl_LastName

  Let $StringIn = $Empl_SecondLastName
  do Check-Characters
  move $String to $Empl_SecondLastName


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print $Empl_RFC                                                  (#r2,28) Bold
print $Empl_CURP                                                 (#r2,88) Bold
print $Empl_LastName                                             (#r4,{c1}) Bold
print $Empl_SecondLastName                                       (#r4,42) Bold
print $Empl_Name                                                 (#r4,82) Bold

!************************************************************************************************
! SECCION DE PREGUNTAS
!************************************************************************************************
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1  = {r3} + (#dy * 1) + #dy2
let #r1a = #r1 + 2
let #r1b = #r1 + 3
let #r1c = #r1 + 1
let #r1d = #r1 + 4
let #r3  = {r3} + (#dy * 3) + #dy2 
let #r4  = {r3} + (#dy * 4) + #dy3 
let #r4a = #r4 - 1
let #r4b = #r4 + 1
let #r4c = #r4 + 3
let #r5  = {r3} + (#dy * 5) + #dy2 + #dy2
let #r6  = #r5 + 3

let #d1  = #r1 + 3 
let #d1b = #d1 + 1 
let #d2  = #d1 + 7
let #d2b = #d2 + 1
let #d2c = #d2b + 4
let #d3  = #d2 + 4
let #d3b = #d3 + 1
let #d4  = #r6 + 3

Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr
print '.' (#r4c,23) Bold
print '.' (#r4c,59) Bold
print '.' (#r4c,83) Bold
print '.' (#r4c,99) Bold
print '.' (#r4c,115) Bold

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'MARQUE CON "X" EL RECUADRO QUE CORRESPONDA Y/O CONTESTE LO QUE SE SOLICITA:' (#r1,{c1}) Bold

print 'ÁREA GEOGRÁFICA' (#r1b,2)
print 'DEL SALARIO MÍNIMO ( 1 )' (+1,2) 

graphic (#d1,20,3) box 2 {g2}

print 'SI EL PATRÓN REALIZÓ' (#r1b,31)
print 'CÁLCULO ANUAL' (+1,31)
        
graphic (#d1,46,3) box 2 {g2}

print 'TARIFA UTILIZADA'                      (#r1d,60) Bold
print 'DEL EJERCICIO'                         (#r1b,80)
print 'QUE DECLARA'                           (+1,80)

graphic (#d1,90,3) box 2 {g2}

print '     1991'                             (#r1b,105) 
print '( Actualizada )'                         (+1,105) 

graphic (#d1,118,3) box 2 {g2}

print 'PROPORCIÓN DEL SUBSIDIO:' (#r3,{c1}) Bold

print 'CALCULADA CONFORME A LAS' (#r4b,{c1})
print 'DISPOSICIONES VIGENTES' (+1,{c1})
print 'EN EL EJERCICIO QUE DECLARA ( * )' (+1,{c1})

graphic (#d2,20,3) box 2 {g2}
graphic (#d2,24,5) box 2 {g2}

print 'CALCULADA CONFORME A' (#r4b,40)
print 'DISPOSICIONES VIGENTES' (+1,40)
print 'EN 1991 ( * )' (+1,40)

graphic (#d2,56,3) box 2 {g2}
graphic (#d2,60,5) box 2 {g2}

print 'FRACCIÓN I ( 2 )' (#r4b,80)

graphic (#d2,80,3) box 2 {g2}
graphic (#d2,84,5) box 2 {g2}

print 'FRACCIÓN II ( 2 )' (#r4b,96)

graphic (#d2,96,3) box 2 {g2}
graphic (#d2,100,5) box 2 {g2}

print 'APLICADA ( 3 )' (#r4b,112)

graphic (#d2,112,3) box 2 {g2}
graphic (#d2,116,5) box 2 {g2}

print 'MARQUE CON UNA "X" SI EL' (#r5,{c1})
print 'TRABAJADOR ES SINDICALIZADO' (+1,{c1}) 

graphic (#d3,21,3) box 2 {g2}

print 'SI ES ASIMILADO A SALARIOS, SEÑALE LA' (#r5,40)
print 'CLAVE CORRESPONDIENTE ( 4 )' (+1,40) 

graphic (#d3,70,5) box 2 {g2}

print 'CLAVE DE LA ENTIDAD FEDERATIVA' (#r5,90)
print 'DONDE PRESTÓ SUS SERVICIOS ( 5 )' (+1,90) 

graphic (#d3,116,5) box 2 {g2}

print 'RFC DEL(LOS) OTRO(S) PATRÓN(ES) ( 6 ):' (#r6,{c1}) Bold
!print 'PROPORCIÓN DEL SUBSIDIO ACREDITABLE:' (,40) Bold       
graphic (+2,1,39) box 3 {g1}
graphic (,41,39) box 3 {g1}
graphic (,81,40) box 3 {g1}

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print $S101                            (#d1b,47)  bold
Evaluate $S102
When = 'A'
   print 'X'                            (#d1b,91) bold
   Break
When = 'B' 
   print 'X'                            (#d1b,119) bold
   Break
End-Evaluate
print $S104                            (#d1b,21) bold
print $S106a                           (#d2b,21) bold
print $S106b                           (#d2b,25) bold
print $S107a                           (#d2b,57) bold
print $S107b                           (#d2b,61) bold
print $S108a                           (#d2b,81) bold
print $S108b                           (#d2b,85) bold
print $S109a                           (#d2b,97) bold
print $S109b                           (#d2b,101) bold
print $S110a                           (#d2b,113) bold
print $S110b                           (#d2b,117) bold
print $S103                            (#d2c,22) bold
print $S105                            (#d2c,117) bold
print $S111                            (#d4, 2) bold
print $S112                            (#d4,42) bold
print $S113                            (#d4,82) bold
!print #S120                            (#r6,70) edit 8,888,888.8888 bold         

!************************************************************************************************
! OTROS DATOS INFORMATIVOS
!************************************************************************************************
let #dy  = 3
let #dy2 = #dy - 2
let #dy3 = #dy - 2
let #r1a = {rInfo} + (#dy * 1)
!let #r2a = {r4} + (#dy * 2)
let #r1  = {rInfo} + (#dy * 1) + #dy2

let #dy  = 5
let #dy2 = #dy - 3
let #dy3 = #dy - 2
let #r2  = {rInfo} + (#dy * 1) + #dy3
let #r3  = {rInfo} + (#dy * 2) + #dy3
let #r2a = #r2 + 1
let #r3a = #r3 + 1

graphic (#r1a,1,{l5}) box 3 {g2} 

graphic (+5,36,{l1a}) box 3 {g1}
graphic (  ,96,{l1a}) box 3 {g1}
graphic (+5,54,    6) box 3 {g1}
graphic (  ,96,{l1a}) box 3 {g1}

!*** Header
Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
Print 'OTROS DATOS INFORMATIVOS'                                  (#r1) BOLD CENTER

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
!*** Column 1
print 'MONTO DE LAS APORTACIONES VOLUNTARIAS'                      (#r2,{c1})
print 'EFECTUADAS'                                                  (+1 ,{c1})

print 'INDIQUE SI EL PATRÓN APLICÓ EL MONTO DE LAS APORTACIONES'   (#r3,{c1})
print 'VOLUNTARIAS EN EL CÁLCULO DEL IMPUESTO'                     (+1 ,{c1})

!*** Column 2
print 'MONTO DE LAS APORTACIONES VOLUNTARIAS DEDUCIBLES'           (#r2,{c5})
print 'PARA TRABAJADORES QUE REALIZARÁN SU DECLARACIÓN'            (+1 ,{c5})

print 'MONTO DE LAS APORTACIONES VOLUNTARIAS'                      (#r3,{c5})
print 'DEDUCIBLES APLICADAS POR EL PATRÓN'                         (+1 ,{c5})


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print #AdInfo1                                                      (#r2a,{c4}) edit 9,999,999,999 Bold
if $AdInfo2 = 'Y'
    print 'X'                                                       (#r3a,{c4}) edit 9,999,999,999 Bold
End-If

print #AdInfo3                                                      (#r2a,{c7}) edit 9,999,999,999 Bold
print #AdInfo4                                                      (#r3a,{c7}) edit 9,999,999,999 Bold


!************************************************************************************************
! IMPUESTOS SOBRE LA RENTA
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 2
let #dy3 = #dy - 2
let #r1a = {r4} + (#dy * 1)
!let #r2a = {r4} + (#dy * 2)
let #r1  = {r4} + (#dy * 1) + #dy2

let #dy  = 5
let #dy2 = #dy - 3
let #dy3 = #dy - 2
let #r2  = {r4} + (#dy * 1) + #dy3
let #r3  = {r4} + (#dy * 2) + #dy3
let #r4  = {r4} + (#dy * 3) + #dy3
let #r5  = {r4} + (#dy * 4) + #dy3
let #r6  = {r4} + (#dy * 5) + #dy3
let #r7  = {r4} + (#dy * 6) + #dy3
let #r8  = {r4} + (#dy * 7) + #dy3
!--- 2009 ---
let #r9  = {r4} + (#dy * 8) + #dy3

let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1
let #r6a = #r6 + 1
let #r7a = #r7 + 1
let #r8a = #r8 + 1
let #r9a = #r9 + 1

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
Print '2'                                                        (#r1,{c1}) Bold
Print 'IMPUESTO SOBRE LA RENTA'                                  (#r1) BOLD CENTER

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

print 'A.'                                                       (#r2,{c1}) Bold
print 'TOTAL DE INGRESOS POR SUELDOS, SALARIOS'                  (   ,{c1a})
print 'Y CONCEPTOS ASIMILADOS (Campo Q, más el'                  ( +1,{c1a})
print 'campo R de esta página, más los campos a, más i, más'     ( +1,{c1a})
print 'm de la página 2, más el campo S1 de la página 3)'        ( +1,{c1a})

print 'B.'                                                       (#r3,{c1}) Bold
print 'IMPUESTO LOCAL A LOS INGRESOS POR'                        (   ,{c1a})
print 'SUELDOS, SALARIOS Y EN GENERAL POR LA'                    ( +1,{c1a})
print 'PRESTACIÓN DE UN SERVICIO PERSONAL'                       ( +1,{c1a})
print 'SUBORDINADO ( 7 )'                                        ( +1,{c1a})

print 'C.'                                                       (#r4,{c1}) Bold
print 'INGRESOS EXENTOS'                                         (   ,{c1a})
print '(Campo V de esta página, más el campo c de la'            ( +1,{c1a})
print 'página 2, más el campo R1 de la página 3)'                ( +1,{c1a})


!--- New field ----------------------------
print 'D.'                                                       (#r5,{c1}) Bold
print 'TOTAL DE LAS APORTACIONES'                                (   ,{c1a})
print 'VOLUNTARIAS DEDUCIBLES'                                   ( +1,{c1a})

print 'E.'                                                       (#r6,{c1}) Bold
print 'INGRESOS NO ACUMULABLES'                                  (   ,{c1a})
print '(Campo Y de esta página, más el campo g de la página 2)'  ( +1,{c1a})

print 'F.'                                                       (#r7,{c1}) Bold
print 'INGRESOS ACUMULABLES'                                     (   ,{c1a})
print '( A - B - C - D - E )'                                    ( +1,{c1a})

print 'G.'                                                       (#r8,{c1}) Bold
print 'ISR CONFORME A LA TARIFA ANUAL'                           (   ,{c1a})

print 'H.'                                                       (#r9,{c1}) Bold
print 'SUBSIDIO ACREDITABLE'                                     (   ,{c1a})
print '(2007 y anteriores)'                                      ( +1,{c1a})


!--- 2009 ---
print 'I.'                                                       (#r2,{c5}) Bold
print 'SUBSIDIO NO ACREDITABLE'                                  (   ,{c6})
print '(2007 y anteriores)'                                      ( +1,{c6})

print 'J.'                                                       (#r3,{c5}) Bold
print 'MONTO DEL SUBSIDIO PARA EL EMPLEO'                        (   ,{c6})
print 'QUE LE CORRESPONDIÓ AL TRABAJADOR'                        ( +1,{c6})
print 'DURANTE EL EJERCICIO'                                     ( +1,{c6}) 
print '(2008 y posteriores) ( 8 )'                               ( +1,{c6})

print 'K.'                                                       (#r4,{c5}) Bold
print 'MONTO DEL SUBSIDIO ACREDITABLE'                           (   ,{c6})
print 'FRACCIÓN III ( 2 )'                                       ( +1,{c6})

print 'L.'                                                       (#r5,{c5}) Bold
print 'MONTO DEL SUBSIDIO ACREDITABLE'                           (   ,{c6})
print 'FRACCIÓN IV ( 2 )'                                        ( +1,{c6})

print 'M.'                                                       (#r6,{c5}) Bold
print 'IMPUESTO SOBRE INGRESOS ACUMULABLES'                      (   ,{c6})

print 'N.'                                                       (#r7,{c5}) Bold
print 'IMPUESTO SOBRE INGRESOS NO ACUMULABLES'                   (   ,{c6})

print 'O.'                                                       (#r8,{c5}) Bold
print 'IMPUESTO SOBRE LA RENTA CAUSADO EN EL'                    (   ,{c6})
print 'EJERCICIO QUE DECLARA ( M + N )'                          ( +1,{c6})

print 'P.'                                                       (#r9,{c5}) Bold
print 'IMPUESTO RETENIDO AL CONTRIBUYENTE'                       (   ,{c6})
print '(Campo Z de esta página, más los campos h, más j,'        ( +1,{c6})
print 'más n de la página 2, más los campos U1, más V1 de'       ( +1,{c6})
print 'la página 3)'                                             ( +1,{c6})

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print #S2A                                                       (#r2a,{c4}) edit 9,999,999,999 Bold
print #S2B                                                       (#r3a,{c4}) edit 9,999,999,999 Bold
print #S2C                                                       (#r4a,{c4}) edit 9,999,999,999 Bold
print #S2D                                                       (#r5a,{c4}) edit 9,999,999,999 Bold
print #S2E                                                       (#r6a,{c4}) edit 9,999,999,999 Bold
print #S2F                                                       (#r7a,{c4}) edit 9,999,999,999 Bold
print #S2G                                                       (#r8a,{c4}) edit 9,999,999,999 Bold
print #S2H                                                       (#r9a,{c4}) edit 9,999,999,999 Bold


print #S2I                                                       (#r2a,{c7}) edit 9,999,999,999 Bold

!--- 2009
print #S2J                                                       (#r3a,{c7}) edit 9,999,999,999 Bold
print #S2K                                                       (#r4a,{c7}) edit 9,999,999,999 Bold
print #S2L                                                       (#r5a,{c7}) edit 9,999,999,999 Bold
print #S2M                                                       (#r6a,{c7}) edit 9,999,999,999 Bold

print #S2N                                                       (#r7a,{c7}) edit 9,999,999,999 Bold
print #S2O                                                       (#r8a,{c7}) edit 9,999,999,999 Bold
print #S2P                                                       (#r9a,{c7}) edit 9,999,999,999 Bold



!************************************************************************************************
! PAGOS POR SEPARACIÓN, JUBILACIONES, PENSIONES O HABERES DE RETIRO
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r5} + (#dy * 1) - 1
let #r1  = {r5} + (#dy * 1) 

let #dy  = 5
let #dy2 = #dy - 3
let #dy3 = #dy - 3
let #r2  = {r5} + (#dy * 1) + #dy3
let #r3  = {r5} + (#dy * 2) + #dy3
let #r4  = {r5} + (#dy * 3) + #dy3
let #r5  = {r5} + (#dy * 4) + #dy3
let #r6  = {r5} + (#dy * 5) + #dy3

let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1
let #r6a = #r6 + 1

Let #c1x = {c1} + 2
Let #c1ax = {c1a} + 2

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a})   box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a})   box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a})   box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a})   box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a})   box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '3'                                                        (#r1,{c1}) Bold
print 'PAGOS POR SEPARACIÓN'                                     (#r1) BOLD CENTER

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'J' (#r2,1) Bold
print 'U' (+1,1) Bold
print 'B' (+1,1) Bold
print 'I' (+1,1) Bold
print 'L' (+1,1) Bold
print 'A' (+1,1) Bold
print 'C' (+1,1) Bold
print 'I' (+1,1) Bold
print 'O' (+1,1) Bold
print 'N' (+1,1) Bold
print 'E' (+1,1) Bold
print 'S' (+1,1) Bold
print ',' (+1,1) Bold
print 'P' (+1,1) Bold
print 'E' (+1,1) Bold
print 'N' (+1,1) Bold
print 'S' (+1,1) Bold
print 'I' (+1,1) Bold
print 'O' (+1,1) Bold
print 'N' (+1,1) Bold
print 'E' (+1,1) Bold
print 'S' (+1,1) Bold

print 'O' (#r2,2) Bold
print ' ' (+1,2) Bold
print 'H' (+1,2) Bold
print 'A' (+1,2) Bold
print 'B' (+1,2) Bold
print 'E' (+1,2) Bold
print 'R' (+1,2) Bold
print 'E' (+1,2) Bold
print 'S' (+1,2) Bold
print ' ' (+1,2) Bold
print 'D' (+1,2) Bold
print 'E' (+1,2) Bold
print 'L' (+1,2) Bold
print ' ' (+1,2) Bold
print 'R' (+1,2) Bold
print 'E' (+1,2) Bold
print 'T' (+1,2) Bold
print 'I' (+1,2) Bold
print 'R' (+1,2) Bold
print 'O' (+1,2) Bold
print ' ' (+1,2) Bold
print ' ' (+1,2) Bold

print 'Q.'                                                       (#r2,#c1x) Bold
print 'MONTO TOTAL DEL PAGO EN UNA SOLA'                         (   ,#c1ax)
print 'EXHIBICIÓN (No deberá hacer anotación alguna'             ( +1,#c1ax)
print 'en R, S y T)'                                             ( +1,#c1ax)

print 'R.'                                                       (#r3,#c1x) Bold
print 'INGRESOS TOTALES POR PAGO EN'                             (   ,#c1ax)
print 'PARCIALIDADES (No hacer anotación alguna en Q)'           ( +1,#c1ax)

print 'S.'                                                       (#r4,#c1x) Bold
print 'MONTO DIARIO PERCIBIDO POR JUBILACIONES,'                 (   ,#c1ax)
print 'PENSIONES O HABERES DE RETIRO EN PARCIALIDADES'           ( +1,#c1ax)
print '( No hacer anotación alguna en Q )'                       ( +1,#c1ax)

print 'T.'                                                       (#r5,#c1x) Bold
print 'CANTIDAD QUE SE HUBIERA PERCIBIDO EN EL PERIODO '         (   ,#c1ax)
print 'DE NO HABER PAGO ÚNICO POR JUBILACIONES,PENSIONES '       ( +1,#c1ax)
print 'O HABERES DE RETIRO EN UNA SOLA EXHIBICIÓN '              ( +1,#c1ax)
print '( No hacer anotación alguna en Q )'                       ( +1,#c1ax)

print 'U.'                                                       (#r6,#c1x) Bold
print 'NÚMERO DE DÍAS ( 9 )'                                     (   ,#c1ax)



print 'V.'                                                       (#r2,{c5}) Bold
print 'INGRESOS EXENTOS'                                         (   ,{c6})

print 'W.'                                                       (#r3,{c5}) Bold
print 'INGRESOS GRAVABLES'                                       (   ,{c6})

print 'X.'                                                       (#r4,{c5}) Bold
print 'INGRESOS ACUMULABLES'                                     (   ,{c6})

print 'Y.'                                                       (#r5,{c5}) Bold
print 'INGRESOS NO ACUMULABLES'                                  (   ,{c6})

print 'Z.'                                                       (#r6,{c5}) Bold
print 'IMPUESTO RETENIDO'                                        (   ,{c6})


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed

print #S3Q                                                       (#r2a,{c4}) edit 9,999,999,999 Bold
print #S3R                                                       (#r3a,{c4}) edit 9,999,999,999 Bold
print #S3S                                                       (#r4a,{c4}) edit 9,999,999,999 Bold
print #S3T                                                       (#r5a,{c4}) edit 9,999,999,999 Bold
print #S3U                                                       (#r6a,{c4}) edit 9,999,999,999 Bold
print #S3V                                                       (#r2a,{c7}) edit 9,999,999,999 Bold
print #S3W                                                       (#r3a,{c7}) edit 9,999,999,999 Bold
print #S3X                                                       (#r4a,{c7}) edit 9,999,999,999 Bold
print #S3Y                                                       (#r5a,{c7}) edit 9,999,999,999 Bold
print #S3Z                                                       (#r6a,{c7}) edit 9,999,999,999 Bold

!************************************************************************************************
! OBSERVACIONES
!show '#sizestd: '  #sizestd 4

!************************************************************************************************
!  wrap 110 7 
Let $Note0  = '( * )  Es obligatorio requisitar estos campos.' 
Let $Note1  = '( 1 )  Anotará A,B o C, según corresponda al área geográfica que señala la Comisión Nacional de los Salarios Mínimos.'
Let $Note2  = '( 2 )  Únicamente para constancias de 2001, de conformidad con el Art. Segundo Transitorio, del Decreto por el que se reforma el Art.80-A de la LISR, publicado en el DOF el 29 de noviembre de 2001.'
Let $Note3  = '( 3 )  Deberá utilizar este campo, cuando el patrón haya realizado cálculo anual de ISR y al trabajador le corresponda una proporción distinta a la de los demás trabajadores.'
Let $Note4  = '( 4 )  A. Miembros de las sociedades cooperativas de producción, B. Integrantes de sociedades y asociaciones civiles, C. Miembros de consejos directivos, de vigilancia, consultivos o comisarios; D.Actividad '
Let $Note4a = '        empresarial (comisionistas), E. Honorarios asimilados a salarios, F. Ingresos en acciones o títulos valor, G. Otros.'
Let $Note5  = '( 5 )  01 Aguascalientes, 02 Baja California, 03 Baja California Sur, 04 Campeche, 05 Coahuila, 06 Colima, 07 Chiapas, 08 Chihuahua, 09 Distrito Federal, 10 Durango, 11 Guanajuato, 12 Guerrero, 13 Hidalgo,'
Let $Note5  = $Note5  || ' 14 Jalisco, 15 México,' 
Let $Note5b = '        16 Michoacán, 17 Morelos, 18 Nayarit, 19 Nuevo León, 20 Oaxaca,21 Puebla, 22 Querétaro, 23 Quintana Roo, 24 San Luis Potosí, 25 Sinaloa, 26 Sonora, 27 Tabasco, 28 Tamaulipas,  29 Tlaxcala,'
Let $Note5b = $Note5b || ' 30 Veracruz, 31 Yucatán, 32 Zacatecas.'
Let $Note6  = '( 6 )  En caso de que el trabajador haya tenido más de un patrón en el ejercicio, deberá señalar el(los) RFC del(los) otro(s) patrón(es).'
Let $Note7  = '( 7 )  Aplicable a partir del ejercicio 2005.'
Let $Note8  = '( 8 )  Se refiere al Subsidio para el Empleo que corresponda, determinado conforme a la tabla contenida en las disposiciones fiscales.'
Let $Note9  = '( 9 )  Tratándose de pagos en parcialidades, número de días del periodo. En caso de pago de jubilaciones,pensiones o haberes de retiro en una sola exhibición, número de días comprendidos entre la fecha '
Let $Note9a = '        en que se realizó el pago y el 31 de diciembre del año de que se trate.'


let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r6} + (#dy * 1)
let #r2a = {r6} + (#dy * 2)

let #r1  = {r6} + (#dy * 1)   ! + #dy2 - 1
let #r2  = {r6} + (#dy * 2)  -2 ! + #dy3
let #r3  = {r6} + (#dy * 3) + #dy3
let #r4  = {r6} + (#dy * 4) + #dy3
let #r5  = {r6} + (#dy * 5) + #dy3

graphic (#r1,1,{l5}) horz-line

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

Print $Note0                   (#r2,{c1})
Print $Note1                   ( +1,{c1})  
Print $Note2                   ( +1,{c1}) 
Print $Note3                   (  0,{c1})  
Print $Note4                   (  0,{c1}) 
Print $Note4a                  (  0,{c1}) 
Print $Note5                   (  0,{c1})
Print $Note5b                  (  0,{c1})   
Print $Note6                   (  0,{c1})   
Print $Note7                   (  0,{c1})   
Print $Note8                   ( +1,{c1})   
Print $Note9                   (  0,{c1})   
Print $Note9a                  (  0,{c1})   



! print '( 6 )  En caso de que el trabajador haya tenido más de un patrón en el ejercicio, deberá señalar el(los) RFC del(los) otro(s) patrón(es).'                                                                  (,{c1})
! print '( 7 )  Aplicable a partir del ejercicio 2005.'                                                                                                                                                              (,{c1})
! print '( 8 )  Se refiere al Subsidio para el Empleo que corresponda, determinado conforme a la tabla contenida en las disposiciones fiscales.'                                                                     (+1,{c1})
! print '( 9 )  Tratándose de pagos en parcialidades, número de días del periodo. En caso de pago de jubilaciones,pensiones o haberes de retiro en una sola exhibición, número de días comprendidos entre la fecha ' (0,{c1})
! print '         en que se realizó el pago y el 31 de diciembre del año de que se trate.'                                                                                                                           ( 0,{c1})

Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm


!************************************************************************************************
! LEYENDA DE DECLARACION DE DECIR VERDAD
!************************************************************************************************
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
If Rtrim($Text01, ' ') <> ''
  If $S101 = 'X'   
     Let $Text02B = 'SI (X) o NO ( ) '  
  Else
     Let $Text02B = 'SI ( ) o NO (X) '
  End-If
  Let $Text04 = $Text02 || $Text02B   || $Text03
  
  Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd    
  print $Text01 (+1,{c1a}) bold
  print $Text04 (,{c1a}) bold 
End-If
  
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
print 'SE EXPIDE POR DUPLICADO' ({r9},55) Bold 
print 'Original-Trabajador o Asimilado a Salarios    Duplicado-Retenedor' ({r10},45) 

NEW-PAGE

graphic (5,1,3) box 3
Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr
print '2'                                           ({c2},2)
print '37'                                          ({c2},118) Bold
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
print 'REVERSO'                                     (-2,115) Bold

!************************************************************************************************
! 3 PAGOS POR SEPARACIÓN (Continuación)
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r7} + (#dy * 1)
let #r2a = {r7} + (#dy * 2)
let #r1  = {r7} + (#dy * 1) + #dy2 - 1

let #dy  = 4
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r2  = {r7} + (#dy * 1) + #dy3
let #r3  = {r7} + (#dy * 2) + #dy3
let #r4  = {r7} + (#dy * 3) + #dy3
let #r5  = {r7} + (#dy * 4) + #dy3

let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1

Let #c1x = {c1} + 2
Let #c1ax = {c1a} + 2

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '3'                                                        (#r1,{c1}) Bold
print 'PAGOS POR SEPARACIÓN (Continuación)'                      (#r1,42) Bold

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'O' (#r2,1) Bold
print 'T' (+1,1) Bold
print 'R' (+1,1) Bold
print 'O' (+1,1) Bold
print 'S' (+1,1) Bold
print ' ' (+1,1) Bold
print 'P' (+1,1) Bold
print 'A' (+1,1) Bold
print 'G' (+1,1) Bold
print 'O' (+1,1) Bold
print 'S' (+1,1) Bold
print ' ' (+1,1) Bold
print 'P' (+1,1) Bold
print 'O' (+1,1) Bold
print 'R' (+1,1) Bold

print ' ' (#r2,2) Bold
print ' ' (+1,2) Bold
print 'S' (+1,2) Bold
print 'E' (+1,2) Bold
print 'P' (+1,2) Bold
print 'A' (+1,2) Bold
print 'R' (+1,2) Bold
print 'A' (+1,2) Bold
print 'C' (+1,2) Bold
print 'I' (+1,2) Bold
print 'Ó' (+1,2) Bold
print 'N' (+1,2) Bold

print 'a.'                                                       (#r2,#c1x) Bold
print 'MONTO TOTAL PAGADO'                                       (,#c1ax)
print 'b.'                                                       (#r3,#c1x) Bold
print 'NÚMERO DE AÑOS DE SERVICIO DEL'                           (,#c1ax)
print 'TRABAJADOR'                                               (+1,#c1ax)
print 'c.'                                                       (#r4,#c1x) Bold
print 'INGRESOS EXENTOS'                                         (,#c1ax)
print 'd.'                                                       (#r5,#c1x) Bold
print 'INGRESOS GRAVADOS'                                        (,#c1ax)

print 'e.'                                                       (#r2,{c5}) Bold
print 'INGRESOS ACUMULABLES'                                     (,{c6})
print '( Último sueldo mensual ordinario)  ( 2 )'                    (+1,{c6})
print 'f.'                                                       (#r3,{c5}) Bold
print 'IMPUESTO CORRESPONDIENTE AL ÚLTIMO'                       (,{c6})
print 'SUELDO MENSUAL ORDINARIO'                                 (+1,{c6})
print 'g.'                                                       (#r4,{c5}) Bold
print 'INGRESOS NO ACUMULABLES'                                  (0,{c6})
print 'h.'                                                       (#r5,{c5}) Bold
print 'IMPUESTO RETENIDO'                                        (0,{c6})

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print #S3a                                                       (#r2a,{c4}) edit 9,999,999,999 Bold
print #S3b                                                       (#r3a,{c4}) edit 9,999,999,999 Bold
print #S3c                                                       (#r4a,{c4}) edit 9,999,999,999 Bold
print #S3d                                                       (#r5a,{c4}) edit 9,999,999,999 Bold 
print #S3e                                                       (#r2a,{c7}) edit 9,999,999,999 Bold
print #S3f                                                       (#r3a,{c7}) edit 9,999,999,999 Bold
print #S3g                                                       (#r4a,{c7}) edit 9,999,999,999 Bold
print #S3h                                                       (#r5a,{c7}) edit 9,999,999,999 Bold

!************************************************************************************************
! 4 INGRESOS ASIMILADOS A SALARIOS (Sin incluir (3))
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r11} + (#dy * 1)
let #r1  = {r11} + (#dy * 1) + #dy2 - 1

let #dy  = 4
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r2  = {r11} + (#dy * 1) + #dy3

let #r2a = #r2 + 1

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
Print '4'                                                        (#r1,{c1}) Bold
Print 'INGRESOS ASIMILADOS A SALARIOS ( Sin incluir ( 3 ) )'     (#r1,37) Bold

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'i.'                                                       (#r2,{c1}) Bold
print 'INGRESOS ASIMILADOS A SALARIOS'                           (,{c1a})

print 'j.'                                                       (#r2,{c5}) Bold
print 'IMPUESTO RETENIDO DURANTE EL EJERCICIO'                   (,{c6})

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed

print #S4i                                                       (#r2a,50) edit 9,999,999,999 Bold
print #S4j                                                       (#r2a,110)edit 9,999,999,999 Bold

!************************************************************************************************
! 4. INGRESOS EN ACCIONES O TÍTULOS VALOR QUE REPRESENTAN BIENES (Por ejercer la opción otorgada por el empleador)
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r11a} + (#dy * 1)
!let #r2a = {r11a} + (#dy * 2)
let #r1  = {r11a} + (#dy * 1) + #dy2 - 1

let #dy  = 4
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r2  = {r11a} + (#dy * 1) + #dy3
let #r3  = {r11a} + (#dy * 2) + #dy3

let #r2a = #r2 + 1
let #r3a = #r3 + 1

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '4.1'                                                        (#r1,{c1}) Bold
print 'INGRESOS EN ACCIONES O TÍTULOS VALOR QUE REPRESENTAN BIENES ( Por ejercer la opción otorgada por el empleador )' (#r1,14) BOLD

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'k.'                                                       (#r2,{c1}) Bold
print 'VALOR DE MERCADO DE LAS ACCIONES O'                       (,{c1a})
print 'TÍTULOS VALOR AL EJERCER LA OPCIÓN ( 4 )'                   (+1,{c1a})

print 'm.'                                                       (#r2,{c5}) Bold
print 'INGRESO ACUMULABLE'                                       (,{c6})
print '( k - l siempre que k sea mayor )'                          (+1,{c6})

print 'l.'                                                       (#r3,{c1}) Bold
print 'PRECIO ESTABLECIDO AL OTORGARSE LA'                       (,{c1a})
print 'OPCIÓN DE INGRESOS EN ACCIONES O'                         (+1,{c1a})
print 'TÍTULOS VALOR'                                            (+1,{c1a})

print 'n.'                                                       (#r3,{c5}) Bold
print 'IMPUESTO RETENIDO'                                        (,{c6})

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed

print #S4k                                                         (#r2a,50) edit 9,999,999,999 Bold
print #S4m                                                         (#r2a,110)edit 9,999,999,999 Bold
print #S4l                                                         (#r3a,50) edit 9,999,999,999 Bold
print #S4n                                                         (#r3a,110)edit 9,999,999,999 Bold

!************************************************************************************************
! PAGOS DEL PATRÓN
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1b = {r12} + (#dy * 1) - 2
let #r1a = {r12} + (#dy * 1)
let #r2a = {r12} + (#dy * 2)
let #r1  = {r12} + (#dy * 1) - 1

let #dy  = 4
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r2  = {r12} + (#dy * 1) + #dy3
let #r3  = {r12} + (#dy * 2) + #dy3
let #r4  = {r12} + (#dy * 3) + #dy3
let #r5  = {r12} + (#dy * 4) + #dy3
let #r6  = {r12} + (#dy * 5) + #dy3 
let #r7  = {r12} + (#dy * 6) + #dy3  
let #r8  = {r12} + (#dy * 7) + #dy3
let #r9  = {r12} + (#dy * 8) + #dy3
let #r10  = {r12} + (#dy * 9) + #dy3
let #r11  = {r12} + (#dy * 10) + #dy3
let #r12  = {r12} + (#dy * 11) + #dy3
let #r13  = {r12} + (#dy * 12) + #dy3
let #r14  = {r12} + (#dy * 13) + #dy3
let #r15  = {r12} + (#dy * 14) + #dy3
let #r16  = {r12} + (#dy * 15) + #dy3
let #r17  = {r12} + (#dy * 16) + #dy3
let #r18  = {r12} + (#dy * 17) + #dy3
let #r19  = {r12} + (#dy * 18) + #dy3


let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1
let #r6a = #r6 + 1
let #r7a = #r7 + 1
let #r8a = #r8 + 1
let #r9a = #r9 + 1
let #r10a = #r10 + 1
let #r11a = #r11 + 1
let #r12a = #r12 + 1
let #r13a = #r13 + 1
let #r14a = #r14 + 1
let #r15a = #r15 + 1
let #r16a = #r16 + 1
let #r17a = #r17 + 1
let #r18a = #r18 + 1
let #r19a = #r19 + 1

graphic (#r1b,1,{l5}) box 3 {g2}
graphic (+6,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+4,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '5'                                                        (#r1,{c1}) Bold
print 'PAGOS DEL PATRÓN EFECTUADOS A SUS TRABAJADORES ( Incluyendo ( 3 ))' (#r1,30) BOLD
print 'GRAVADO'                                                  (+3, 44)   Bold
print 'EXENTO'                                                   (  ,105)    Bold

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'o.'                                                       (#r2,{c1}) Bold
print 'SUELDOS, SALARIOS, RAYAS Y JORNALES'                      (,{c1a})
print 'p.'                                                       (#r3,{c1}) Bold
print 'GRATIFICACIÓN ANUAL'                                      (,{c1a})
print 'q.'                                                       (#r4,{c1}) Bold
print 'VIÁTICOS Y GASTOS DE VIAJE'                               (,{c1a})
print 'r.'                                                       (#r5,{c1}) Bold
print 'TIEMPO EXTRAORDINARIO'                                    (,{c1a})
print 's.'                                                       (#r6,{c1}) Bold
print 'PRIMA VACACIONAL'                                         (,{c1a})
print 't.'                                                       (#r7,{c1}) Bold
print 'PRIMA DOMINICAL'                                          (,{c1a})
print 'u.'                                                       (#r8,{c1}) Bold
print 'PARTICIPACIÓN DE LOS TRABAJADORES EN LAS'                 (,{c1a})
print 'UTILIDADES ( PTU )'                                         (+1,{c1a})
print 'v.'                                                       (#r9,{c1}) Bold
print 'REEMBOLSO DE GASTOS MÉDICOS, DENTALES Y HOSPITALARIOS'    (,{c1a})
print 'w.'                                                       (#r10,{c1}) Bold
print 'FONDO DE AHORRO'                                          (,{c1a})
print 'x.'                                                       (#r11,{c1}) Bold
print 'CAJA DE AHORRO'                                           (,{c1a})
print 'y.'                                                       (#r12,{c1}) Bold
print 'VALES PARA DESPENSA'                                      (,{c1a})
print 'z.'                                                       (#r13,{c1}) Bold
print 'AYUDA PARA GASTOS DE FUNERAL'                             (,{c1a})
print 'A1.'                                                      (#r14,{c1}) Bold
print 'CONTRIBUCIONES A CARGO DEL TRABAJADOR PAGADAS'            (,{c1a})
print 'POR EL PATRÓN'                                            (+1,{c1a})
print 'B1.'                                                      (#r15,{c1}) Bold
print 'PREMIOS POR PUNTUALIDAD'                                  (,{c1a})
print 'C1.'                                                      (#r16,{c1}) Bold
print 'PRIMA DE SEGURO DE VIDA'                                  (,{c1a})
print 'D1.'                                                      (#r17,{c1}) Bold
print 'SEGURO DE GASTOS MÉDICOS MAYORES'                         (,{c1a})
print 'E1.'                                                      (#r18,{c1}) Bold
print 'VALES PARA RESTAURANTE'                                   (,{c1a})
print 'F1.'                                                      (#r19,{c1}) Bold
print 'VALES PARA GASOLINA'                                   (,{c1a})


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print #S5og                           (#r2a,{c4})  edit 9,999,999,999 Bold
print #S5oe                           (#r2a,{c7})  edit 9,999,999,999 Bold
print #S5pg                           (#r3a,{c4})  edit 9,999,999,999 Bold
print #S5pe                           (#r3a,{c7})  edit 9,999,999,999 Bold
print #S5qg                           (#r4a,{c4})  edit 9,999,999,999 Bold
print #S5qe                           (#r4a,{c7})  edit 9,999,999,999 Bold
print #S5rg                           (#r5a,{c4})  edit 9,999,999,999 Bold
print #S5re                           (#r5a,{c7})  edit 9,999,999,999 Bold
print #S5sg                           (#r6a,{c4})  edit 9,999,999,999 Bold
print #S5se                           (#r6a,{c7})  edit 9,999,999,999 Bold
print #S5tg                           (#r7a,{c4})  edit 9,999,999,999 Bold
print #S5te                           (#r7a,{c7})  edit 9,999,999,999 Bold
print #S5ug                           (#r8a,{c4})  edit 9,999,999,999 Bold
print #S5ue                           (#r8a,{c7})  edit 9,999,999,999 Bold
print #S5vg                           (#r9a,{c4})  edit 9,999,999,999 Bold
print #S5ve                           (#r9a,{c7})  edit 9,999,999,999 Bold
print #S5wg                           (#r10a,{c4}) edit 9,999,999,999 Bold
print #S5we                           (#r10a,{c7}) edit 9,999,999,999 Bold
print #S5xg                           (#r11a,{c4}) edit 9,999,999,999 Bold
print #S5xe                           (#r11a,{c7}) edit 9,999,999,999 Bold
print #S5yg                           (#r12a,{c4}) edit 9,999,999,999 Bold
print #S5ye                           (#r12a,{c7}) edit 9,999,999,999 Bold
print #S5zg                           (#r13a,{c4}) edit 9,999,999,999 Bold
print #S5ze                           (#r13a,{c7}) edit 9,999,999,999 Bold
print #S5A1g                          (#r14a,{c4}) edit 9,999,999,999 Bold
print #S5A1e                          (#r14a,{c7}) edit 9,999,999,999 Bold
print #S5B1g                          (#r15a,{c4}) edit 9,999,999,999 Bold
print #S5B1e                          (#r15a,{c7}) edit 9,999,999,999 Bold
print #S5C1g                          (#r16a,{c4}) edit 9,999,999,999 Bold
print #S5C1e                          (#r16a,{c7}) edit 9,999,999,999 Bold
print #S5D1g                          (#r17a,{c4}) edit 9,999,999,999 Bold
print #S5D1e                          (#r17a,{c7}) edit 9,999,999,999 Bold
print #S5E1g                          (#r18a,{c4}) edit 9,999,999,999 Bold
print #S5E1e                          (#r18a,{c7}) edit 9,999,999,999 Bold
!--- 2009 ---
print #S5F1g                          (#r19a,{c4}) edit 9,999,999,999 Bold
print #S5F1e                          (#r19a,{c7}) edit 9,999,999,999 Bold


!************************************************************************************************
! OBSERVACIONES PAGINA 2
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r6a} + (#dy * 1)
let #r2a = {r6a} + (#dy * 2)
let #r1  = {r6a} + (#dy * 1) + #dy2 - 1
let #r2  = {r6a} + (#dy * 2) + #dy3
let #r3  = {r6a} + (#dy * 3) + #dy3
let #r4  = {r6a} + (#dy * 4) + #dy3
let #r5  = {r6a} + (#dy * 5) + #dy3

graphic (#r1,1,{l5}) horz-line

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print '( 1 )  Incluyendo entre otros, prima de antigüedad e indemnizaciones.'                                                                                                                                    (#r2,{c1})
print '( 2 )  Si el pago por separación es menor al último sueldo mensual ordinario, deberá anotar el pago por separación.'                                                                                      (+1,{c1})
print '( 3 )  Funcionarios y trabajadores de la federación, de las Entidades Federativas y de los Municipios, así como miembros de las fuerzas armadas.'                                                         (+1,{c1})
print '( 4 )  Si la opción para adquirir acciones o títulos valor se otorgó antes del 1o de enero de 2005, se anotará el valor de mercado que tenían dichas acciones o títulos valor al 31 de diciembre de 2004.' (,{c1})

NEW-PAGE

graphic (5,1,3) box 3
Alter-Printer Point-size = #sizexgr Font-Type = Proportional Font = #fontxgr
print '3'                                           ({c2},2)
print '37'                                          ({c2},118) Bold
Alter-Printer Point-size = #sizesm Font-Type = Proportional Font = #fontsm
print 'ANVERSO'                                     (-2,115) Bold

!************************************************************************************************
! PAGOS DEL PATRÓN (Continuación)
!************************************************************************************************

let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1b = {r7} + (#dy * 1) - 2
let #r1a = {r7} + (#dy * 1)
let #r2a = {r7} + (#dy * 2)
let #r1  = {r7} + (#dy * 1) - 1

let #dy  = 5
let #dy2 = #dy - 3
let #dy3 = #dy - 3
let #r2  = {r7} + (#dy * 1) + #dy3
let #r3  = {r7} + (#dy * 2) + #dy3
let #r4  = {r7} + (#dy * 3) + #dy3
let #r5  = {r7} + (#dy * 4) + #dy3
let #r6  = {r7} + (#dy * 5) + #dy3 
let #r7  = {r7} + (#dy * 6) + #dy3  
let #r8  = {r7} + (#dy * 7) + #dy3
let #r9  = {r7} + (#dy * 8) + #dy3
let #r10  = {r7} + (#dy * 9) + #dy3
let #r11  = {r7} + (#dy * 10) + #dy3
let #r12  = {r7} + (#dy * 11) + #dy3

let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1
let #r6a = #r6 + 1
let #r7a = #r7 + 1
let #r8a = #r8 + 1
let #r9a = #r9 + 1
let #r10a = #r10 + 1
let #r11a = #r11 + 1
let #r12a = #r12 + 1

graphic (#r1b,1,{l5}) box 3 {g2}
graphic (+6,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '5'                                                        (#r1,{c1}) Bold
print 'PAGOS DEL PATRÓN EFECTUADOS A SUS TRABAJADORES (Incluyendo ( 1 ) ) ( Continuación )' (#r1,26) BOLD 
print 'GRAVADO'                                                  (+3, 44)   Bold
print 'EXENTO'                                                   (  ,105)    Bold


Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'G1.' (#r2,{c1}) Bold
print 'VALES PARA ROPA' (,{c1a})
print 'H1.' (#r3,{c1}) Bold
print 'AYUDA PARA RENTA' (,{c1a})
print 'I1.' (#r4,{c1}) Bold
print 'AYUDA PARA ARTÍCULOS ESCOLARES' (,{c1a})
print 'J1.' (#r5,{c1}) Bold
print 'DOTACIÓN O AYUDA PARA ANTEOJOS' (,{c1a})
print 'K1.' (#r6,{c1}) Bold
print 'AYUDA PARA TRANSPORTE' (,{c1a})
print 'L1.' (#r7,{c1}) Bold
print 'CUOTAS SINDICALES PAGADAS POR EL PATRÓN' (,{c1a})
print 'M1.' (#r8,{c1}) Bold
print 'SUBSIDIOS POR INCAPACIDAD' (,{c1a})
print 'N1.' (#r9,{c1}) Bold
print 'BECAS PARA TRABAJADORES Y/O SUS HIJOS' (,{c1a})
print 'O1.' (#r10,{c1}) Bold
print 'PAGOS EFECTUADOS POR OTROS EMPLEADORES ( 2 ) ( 3 )' (,{c1a})
print 'P1' (#r11,{c1}) Bold
print 'OTROS INGRESOS POR SALARIOS' (,{c1a})

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed

print #S5G1g                           (#r2a,{c4})  edit 9,999,999,999 Bold
print #S5G1e                           (#r2a,{c7})  edit 9,999,999,999 Bold
print #S5H1g                           (#r3a,{c4})  edit 9,999,999,999 Bold
print #S5H1e                           (#r3a,{c7})  edit 9,999,999,999 Bold
print #S5I1g                           (#r4a,{c4})  edit 9,999,999,999 Bold
print #S5I1e                           (#r4a,{c7})  edit 9,999,999,999 Bold
print #S5J1g                           (#r5a,{c4})  edit 9,999,999,999 Bold
print #S5J1e                           (#r5a,{c7})  edit 9,999,999,999 Bold
print #S5K1g                           (#r6a,{c4})  edit 9,999,999,999 Bold
print #S5K1e                           (#r6a,{c7})  edit 9,999,999,999 Bold
print #S5L1g                           (#r7a,{c4})  edit 9,999,999,999 Bold
print #S5L1e                           (#r7a,{c7})  edit 9,999,999,999 Bold
print #S5M1g                           (#r8a,{c4})  edit 9,999,999,999 Bold
print #S5M1e                           (#r8a,{c7})  edit 9,999,999,999 Bold
print #S5N1g                           (#r9a,{c4})  edit 9,999,999,999 Bold
print #S5N1e                           (#r9a,{c7})  edit 9,999,999,999 Bold
print #S5O1g                           (#r10a,{c4}) edit 9,999,999,999 Bold
print #S5O1e                           (#r10a,{c7}) edit 9,999,999,999 Bold
print #S5P1g                           (#r11a,{c4}) edit 9,999,999,999 Bold
print #S5P1e                           (#r11a,{c7}) edit 9,999,999,999 Bold

!************************************************************************************************
!6  IMPUESTO SOBRE LA RENTA POR SUELDOS Y SALARIOS
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r12a}   
let #r2a = {r12a} + (#dy * 2) - 1
let #r1  = {r12a} + (#dy * 1) - 2

let #dy  = 5
let #dy2 = #dy - 3
let #dy3 = #dy - 3
let #r2  = {r12a} + (#dy * 1) !+ #dy3
let #r3  = {r12a} + (#dy * 2) !+ #dy3
let #r4  = {r12a} + (#dy * 3) !+ #dy3
let #r5  = {r12a} + (#dy * 4) !+ #dy3 
let #r6  = {r12a} + (#dy * 5) !+ #dy3
let #r7  = {r12a} + (#dy * 6) !+ #dy3
let #r8  = {r12a} + (#dy * 7) !+ #dy3
 

let #r2a = #r2 + 1
let #r3a = #r3 + 1
let #r4a = #r4 + 1
let #r5a = #r5 + 1
let #r6a = #r6 + 1
let #r7a = #r7 + 1
let #r8a = #r8 + 1

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}
graphic (,96,{l1a}) box 3 {g1}
graphic (+5,36,{l1a}) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
print '6'                                                         (#r1,{c1}) Bold
print 'IMPUESTO SOBRE LA RENTA POR SUELDOS Y SALARIOS'            (#r1,37) BOLD

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print 'Q1.'                                                       (#r2,{c1}) Bold
print 'SUMA DEL INGRESO GRAVADO POR SUELDOS Y'                    (,{c1a})
print 'SALARIOS (Suma de los campos o de la página 2 al P1 de'    (+1,{c1a})
print 'la columna "gravado" de la página 3)'                      (+1,{c1a})
print 'R1.'                                                       (#r3,{c1}) Bold
print 'SUMA DEL INGRESO EXENTO POR SUELDOS Y'                     (,{c1a})
print 'SALARIOS (Suma de los campos o de la página 2 al P1 de'    (+1,{c1a})
print 'la columna "exento" de la página 3)'                       (+1,{c1a})
print 'S1.'                                                       (#r4,{c1}) Bold
print 'SUMA DE INGRESOS POR SUELDOS Y SALARIOS'                   (,{c1a})
print '( Q1 + R1 )'                                                 (+1,{c1a})
print 'T1.'                                                       (#r5,{c1}) Bold
print 'MONTO DEL IMPUESTO LOCAL A LOS INGRESOS'                   (-1,{c1a})
print 'POR SUELDOS, SALARIOS Y EN GENERAL POR LA'                 (+1,{c1a})
print 'PRESTACION DE UN SERVICIO PERSONAL'                        (+1,{c1a})
print 'SUBORDINADO RETENIDO ( 4 )'                                  (+1,{c1a})
print 'U1.'                                                       (#r6,{c1}) Bold
print 'IMPUESTO RETENIDO DURANTE EL EJERCICIO'                    (,{c1a})
print 'V1.'                                                       (#r7,{c1}) Bold
print 'IMPUESTO RETENIDO POR OTRO(S) PATRÓN(ES)'                  (,{c1a})
print 'DURANTE EL EJERCICIO ( 2 )'                                  (+1,{c1a})
print 'W1.'                                                       (#r8,{c1}) Bold
print 'SALDO A FAVOR DETERMINADO EN EL'                           (-1,{c1a})
print 'EJERCICIO QUE DECLARA, QUE EL PATRÓN'                       (+1,{c1a})
print 'COMPENSARÁ DURANTE EL SIGUIENTE'                           (+1,{c1a})
print 'EJERCICIO SOLICITARÁ SU DEVOLUCIÓN'                        (+1,{c1a})

print 'X1.'                                                       (#r2,{c5}) Bold
print 'SALDO A FAVOR DEL EJERCICIO ANTERIOR NO'                   (,{c6})
print 'COMPENSADO DURANTE EL EJERCICIO QUE'                       (+1,{c6})
print 'AMPARA LA CONSTANCIA'                                      (+1,{c6})
print 'Y1.'                                                       (#r3,{c5}) Bold
print 'SUMA DE LAS CANTIDADES QUE POR'                            (,{c6})
print 'CONCEPTO DE CRÉDITO AL SALARIO LE'                         (+1,{c6})
print 'CORRESPONDIÓ AL TRABAJADOR ( 5 )'                            (+1,{c6})
print 'Z1.'                                                       (#r4,{c5}) Bold
print 'CRÉDITO AL SALARIO ENTREGADO EN'                           (,{c6})
print 'EFECTIVO AL TRABAJADOR DURANTE EL'                         (+1,{c6})
print 'EJERCICIO ( 6 )'                                             (+1,{c6})
print 'a1.'                                                       (#r5,{c5}) Bold
print 'MONTO TOTAL DE INGRESOS OBTENIDOS POR'                     (,{c6})
print 'CONCEPTO DE PRESTACIONES DE PREVISIÓN'                     (+1,{c6})
print 'SOCIAL'                                                    (+1,{c6})
print 'b1.'                                                       (#r6,{c5}) Bold
print 'SUMA DE INGRESOS EXENTOS POR'                              (,{c6})
print 'CONCEPTO DE PRESTACIONES DE PREVISIÓN'                     (+1,{c6})
print 'SOCIAL'                                                    (+1,{c6})
print 'c1.'                                                       (#r7,{c5}) Bold
print 'MONTO DEL SUBSIDIO PARA EL EMPLEO'                         (,{c6})
print 'ENTREGADO EN EFECTIVO AL TRABAJADOR'                       (+1,{c6})
print 'DURANTE EL EJERCICIO QUE DECLARA'                          (+1,{c6})


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed

print #S6Q1                           (#r2a,{c4}) edit 9,999,999,999 Bold
print #S6R1                           (#r3a,{c4}) edit 9,999,999,999 Bold
print #S6S1                           (#r4a,{c4}) edit 9,999,999,999 Bold
print #S6T1                           (#r5a,{c4}) edit 9,999,999,999 Bold
print #S6U1                           (#r6a,{c4}) edit 9,999,999,999 Bold
print #S6V1                           (#r7a,{c4}) edit 9,999,999,999 Bold
print #S6W1                           (#r8a,{c4}) edit 9,999,999,999 Bold

print #S6X1                           (#r2a,{c7}) edit 9,999,999,999 Bold
print #S6Y1                           (#r3a,{c7}) edit 9,999,999,999 Bold
print #S6Z1                           (#r4a,{c7}) edit 9,999,999,999 Bold
print #S6a1                           (#r5a,{c7}) edit 9,999,999,999 Bold
print #S6b1                           (#r6a,{c7}) edit 9,999,999,999 Bold
print #S6c1                           (#r7a,{c7}) edit 9,999,999,999 Bold

!************************************************************************************************
! 7 DATOS DEL RETENEDOR
!************************************************************************************************

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
let #dy  = 3
let #dy2 = #dy - 1
let #dy3 = #dy - 2
let #r1a = {r13} + (#dy * 1) - 1
let #r2a = {r13} + (#dy * 2)
let #r2b = {l1a} + (#dy * 12)
let #r2c = {l1a} + (#dy * 17)
let #r1  = {r13} + (#dy * 1) + #dy2 - 2

let #dy  = 4
let #dy2 = #dy - 2
let #dy3 = #dy - 1
let #r2  = {r13} + (#dy * 1) + #dy3
let #r3  = {r13} + (#dy * 2) + #dy3
let #r4  = {r13} + (#dy * 3) + #dy3
let #r5  = {r13} + (#dy * 4) + #dy3
let #cr = {c1} + 9

graphic (#r1a,1,{l5}) box 3 {g2}
graphic (+4,25,36) box 3 {g1}
graphic ( ,85,36) box 3 {g1}
graphic (+4,25,96) box 3 {g1}
graphic (+4,25,36) box 3 {g1}
!graphic ( ,85,36) box 3 {g1}
graphic (+4,25,96) box 3 {g1}

Alter-Printer Point-size = #sizegr Font-Type = Proportional Font = #fontgr
Print '7'                                                        (#r1,{c1}) Bold
Print 'DATOS DEL RETENEDOR'                                      (#r1) BOLD CENTER

Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd

print 'DATOS DEL'                                                (#r4,{c1}) 
print 'REPRESENTANTE'                                            ( +1,{c1})  
print 'LEGAL'                                                    ( +1,{c1}) 

print 'REGISTRO FEDERAL DE'                                      (#r2,{c1}) 
print 'CONTRIBUYENTES'                                           ( +1,{c1})

print 'APELLIDO PATERNO,MATERNO Y NOMBRE(S),'                    (#r3,{c1}) 
print 'O DENOMINACIÓN O RAZÓN SOCIAL'                            ( +1,{c1}) 

print 'APELLIDO PATERNO,'                                        (#r5,#cr) 
print 'MATERNO Y NOMBRE(S)'                                      ( +1,#cr) 

!print '-REGISTRO FEDERAL DE'                                     (#r4,#cr) 
!print '-CONTRIBUYENTES'                                          ( +1,#cr)

print 'CLAVE ÚNICA DE REGISTRO'                                   (#r2,{c5}) 
print 'DE POBLACIÓN *'                                            ( +1,{c5})

print 'CLAVE ÚNICA DE REGISTRO'                                  (#r4,#cr) 
print 'DE POBLACIÓN'                                             (+1 ,#cr)

!--- Signatures Boxes
graphic (+6,1,39) box 11 {g2}
graphic (,41,39) box 11 {g2}
graphic (,81,40) box 11 {g2}


Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print $Company_RFC                                               (#r2,{c1b}) Bold
print $Company_CURP                                              (#r2,{c6a}) Bold
print $CompanyName                                               (#r3,{c1b}) Bold

Alter-Printer Point-size = #sizemed Font-Type = Proportional Font = #fontmed
print $Legal_Name                                                (#r5,{c1b}) Bold
!print $Legal_RFC                                                 (#r4,{c1b}) Bold
print $Legal_CURP                                                (#r4,{c1b}) Bold

!************************************************************************************************
! FIRMAS
!************************************************************************************************

print 'FIRMA DEL RETENEDOR O REPRESENTANTE LEGAL' ({r13a},2)
print 'SELLO DEL RETENEDOR (EN CASO DE TENERLO)' ({r13a},43)
print 'FIRMA DE RECIBIDO POR EL CONTRIBUYENTE' ({r13a},85)

!************************************************************************************************
! OBSERVACIONES2
!************************************************************************************************
Alter-Printer Point-size = #sizestd Font-Type = Proportional Font = #fontstd
print '( * ) Sólo personas físicas.' (+2,{c1})
print '( 4 ) Aplicable a partir de 2005.' (,{c5})
print '( 1 ) Funcionarios y trabajadores de la Federación, de las Entidades Federativas y de los Municipios,' (+1,{c1})
print '( 5 ) Se deberá anotar la suma del crédito al salario determinado conforme a la tabla de la LISR' (,{c5})
print '        así como miembros de las fuerzas armadas.' (,{c1})
print '        correspondiente.' (,{c5})
print '( 2 ) Sólo si el patrón que expide la constancia realizó cálculo anual.' (+1,{c1})
print '( 6 ) Suma de las diferencias que durante el ejercicio se entregaron en efectivo al trabajador conforme a las' (,{c5})
print '( 3 ) No deberá duplicar los conceptos exentos que se resten una sola vez por ejemplo: gratificación' (,{c1})
print '        disposiciones fiscales vigentes.' (,{c5})
print '        anual, prima vacacional, entre otros.' (+1,{c1})
print '( 7 ) Se refiere a la(s) diferencia(s) por subsidio para el empleo mensual entregada(s) en efectivo al trabajador.' ( ,{c5})


NEW-PAGE
end-procedure Print-Form

!*******************************************************************
begin-procedure Build-Qry-Empl-RC
#debug show '*** Build-Qry-Empl-RC ***'
!*******************************************************************
   let $Query = ' '
   if rtrim($Emplid,' ') <> ''
      let $Query = $Query || ' AND J.EMPLID = ' ||  '''' || $Emplid  || ''''
   end-if
   if rtrim($Company,' ') <> ''
      let $Query = $Query || ' AND J.COMPANY = ' ||  '''' || $Company  || ''''
   end-if
   if rtrim($Bus_UnitP,' ') <> ''
      let $Query = $Query || ' AND J.BUSINESS_UNIT = ' ||  '''' || $Bus_UnitP || ''''
   end-if
   if rtrim($PayGroupP,' ') <> ''
      let $Query = $Query || ' AND J.GP_PAYGROUP = ' || '''' || $PayGroupP || ''''
   end-if
   if rtrim($Empl_StatusP,' ') <> ''
      let $Query = $Query || ' AND J.EMPL_STATUS = ' ||  '''' || $Empl_StatusP || ''''
   end-if
   if rtrim($DeptIdP,' ') <> ''
      let $Query = $Query || ' AND J.DEPTID = ' ||  '''' || $DeptIdP || ''''
   end-if
   if rtrim($LocationP,' ') <> ''
      let $Query = $Query || ' AND J.LOCATION = ' ||  '''' || $LocationP || ''''
   end-if
#debug show 'Query ' $Query
end-procedure Build-Qry-Empl-RC

!*******************************************************************
begin-procedure Build-Query2
#debug show 'Build-Query2'
!*******************************************************************

let $Query2 = 'WHERE FY.COMPANY = ' ||  '''' || $CompanyP  || ''''

!Emplid:
   if rtrim($EmplidP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.EMPLID = ' ||  '''' || $EmplidP  || ''''
   end-if
   
!Business Unit:   
   if rtrim($Bus_UnitP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.BUSINESS_UNIT = ' ||  '''' || $Bus_UnitP  || ''''
   end-if

!Pay Group:
   if rtrim($PayGroupP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.GP_PAYGROUP = ' ||  '''' || $PayGroupP  || ''''
   end-if
!Employee Status:
   if rtrim($Empl_StatusP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.EMPL_STATUS = ' ||  '''' || $Empl_StatusP  || ''''
   end-if
!Department:
   if rtrim($DeptIdP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.DEPTID = ' ||  '''' || $DeptIdP  || ''''
   end-if

!Location Code: 
   if rtrim($LocationP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.LOCATION = ' ||  '''' || $LocationP  || ''''
   end-if
   
end-procedure Build-Query2

!*******************************************************************
begin-procedure Build-Query2OLD
#debug show 'Build-Query2'
!*******************************************************************
   let $Query2 = ''
   if rtrim($EmplidP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.EMPLID = ' ||  '''' || $EmplidP  || ''''
   end-if
   if rtrim($CompanyP,' ') <> ''
      let $Query2 = $Query2 || ' AND FY.COMPANY = ' ||  '''' || $CompanyP  || ''''
   end-if
  
   if Rtrim($BegDtEmpTerm, ' ') = ''
      let $Query2 = $Query2 || ' AND FY.ACTION IN (' || '''' || 'HIR' || '''' || ',' ||'''' || 'XFR' || '''' || ',' || '''' || 'REH' || '''' || ')'      
      let $Query2 = $Query2 || ' AND (FY.EFFDT >= (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = FY.EMPLID '
      let $Query2 = $Query2 || ' AND EMPL_RCD = FY.EMPL_RCD '
      !let $Query2 = $Query2 || ' AND COMPANY = FY.COMPANY '
      let $Query2 = $Query2 || ' AND EFFDT <= ' || '''' || $EndDt || ''''
      let $Query2 = $Query2 || ' AND ACTION IN (' || '''' || 'HIR' || '''' || ',' || '''' || 'XFR' || '''' || ',' ||'''' || 'REH' || '''' || '))'
      Let $Query2 = $Query2 || ' OR FY.EFFDT >= (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = FY.EMPLID '
      let $Query2 = $Query2 || ' AND EMPL_RCD = FY.EMPL_RCD '      
      !let $Query2 = $Query2 || ' AND COMPANY = FY.COMPANY '
      let $Query2 = $Query2 || ' AND EFFDT <= ' || '''' || $BegDt || ''''
      let $Query2 = $Query2 || ' AND ACTION IN (' || '''' || 'HIR' || '''' || ',' || '''' || 'XFR' || '''' || ',' ||'''' || 'REH' || '''' || ')))'      
   else
      let $Query2 = $Query2 || ' AND FY.ACTION = ' || '''' || 'TER' || ''''
      let $Query2 = $Query2 || ' AND FY.EFFDT >= (SELECT MAX(EFFDT) FROM PS_JOB WHERE EMPLID = FY.EMPLID '
      let $Query2 = $Query2 || ' AND EMPL_RCD = FY.EMPL_RCD '
      !let $Query2 = $Query2 || ' AND COMPANY = FY.COMPANY '
      let $Query2 = $Query2 || ' AND (' || ' EFFDT BETWEEN ' || '''' || $BegDtEmpTerm || '''' || ' AND '
      if Rtrim($EndDtEmpTerm, ' ') = ''
         let $Query2 =  $Query2 || '''' || $BegDtEmpTerm || ''''
      Else
         let $Query2 =  $Query2 || '''' || $EndDtEmpTerm || ''''
      End-If 
      let $Query2 = $Query2 || ' ) AND EFFDT <= ' || '''' || $EndDt || ''''      
      let $Query2 = $Query2 || ' AND ACTION = FY.ACTION) '
   end-if

   let $Query2 = $Query2 || ' AND FY.EFFSEQ = (SELECT MAX(EFFSEQ) FROM PS_JOB WHERE EMPLID = FY.EMPLID '
   let $Query2 = $Query2 || ' AND EMPL_RCD = FY.EMPL_RCD AND COMPANY = FY.COMPANY AND ACTION = FY.ACTION '
   let $Query2 = $Query2 || ' AND EFFDT = FY.EFFDT)'
   If Length($Query2) > 4
     Let $Query2 = 'WHERE ' || Substr($Query2, 5, Length($Query2) - 4)
   End-If
let $Query2 = $Query2 || ' ORDER BY FY.EFFDT ASC'   
#debug Show ' $Query2: '  $Query2
end-procedure Build-Query2

begin-procedure Declare-Print

  let #fontstd  = 4   !5
  let #sizestd  = 4.5 !4
  let #fontsm   = 5
  let #sizesm   = 6
  let #fontmed  = 4   !5
  let #sizemed  = 7
  let #fontgr   = 4   !5
  let #sizegr   = 8
  let #fontxgr  = 4   !5
  let #sizexgr  = 10

  Alter-Printer Point-size = #Sizestd Font-Type = Proportional Font = #FontStd

end-procedure Declare-Print

!***************************************************************************
Begin-Procedure GetSegments
#debug show 'Procedure: GetSegments'
#debug show '$Emplid         : ' $EmplId
#debug show '#Empl_rcd       : ' #Empl_rcd
#debug show '$CalBeginDt1    : ' $CalBeginDt1
#debug show '$CalEndDt1      : ' $CalEndDt1
#debug show '$Company        : ' $Company
!Dates in DTU format
#debug show '$CalBeginDt(DTU): ' $CalBeginDt
#debug show '$CalEndDt  (DTU): ' $CalEndDt
!***************************************************************************

Let $Key = $Company
!Create an array to store segments
Create-Array name=ArraySegments Size = 100
    Field = IniS:char=''
    Field = EndS:char=''
    Field = Key:char=''
    
Clear-Array name=ArraySegments
Let #idxSeg = 0


Begin-Select
GS.EMPLID
GS.EMPL_RCD
GS.EFFDT
GS.EFFSEQ
GS.ACTION
GS.COMPANY

    Let $Test_Date   = Rtrim(&GS.EFFDT, ' ')
    Let $Test_Action = Rtrim(&GS.ACTION, ' ')
    Let $Test_Key    = Rtrim(&GS.COMPANY, ' ')
    
    !Add -1 day
    Do Convert-To-Dtu-Date($Test_Date, $testTmp)
    Do dtu-add-days($testTmp, -1, $testTmp)
    Do convert-from-dtu-date($testTmp, $testTmp)
    #Debug show '    $Test_Date:' $Test_Date '    $Test_Action:' $Test_Action '    $Test_Key:' $Test_Key '   $testTmp:' $testTmp
    
    Evaluate $Test_Action
        When = 'HIR'
            !Only Start a segment
            Let #idxSeg = #idxSeg + 1
            Let ArraySegments.IniS(#idxSeg) = $Test_Date
            Let ArraySegments.Key(#idxSeg)  = $Test_Key
            Let $HireDate  = $Test_Date
            Do Convert-To-DTU-Date($HireDate, $HireDateDTU)
            
            Let $EmplBegDt  = $Test_Date
            Do Convert-To-Dtu-Date($EmplBegDt, $EmplBegDtDTU)

            Let #pre-idx = #idxSeg - 1
            #debug show '    #pre-idx ' #pre-idx
            If (#pre-idx > 0) 
                Let $d_Key  = ArraySegments.Key(#pre-idx)
                Let $d_IniS = ArraySegments.IniS(#pre-idx)
                Let $d_EndS = ArraySegments.EndS(#pre-idx)
                #debug show '      $d_Key  ' $d_Key
                #debug show '      $d_IniS ' $d_IniS
                #debug show '      $d_EndS ' $d_EndS
                If(ArraySegments.EndS(#pre-idx) = '')
                  If $NewDate <> '' and $HireDateDTU > $NewDate
                    Do convert-from-dtu-date ($NewDate, $NewDate)
                    Let ArraySegments.EndS(#pre-idx) = $NewDate
                  Else
                    Let ArraySegments.EndS(#pre-idx) = $testTmp
                  End-If
                End-if
            End-if
            Break
        When = 'XFR'
        When = 'DTA'
        When = 'ADL'
        When = 'TER'
            if $Test_Key <> $Key !Only take if the transfer is to another Company
                !End and Start a segment
                Let ArraySegments.EndS(#idxSeg) = $testTmp
                Let #idxSeg = #idxSeg + 1
                Let ArraySegments.IniS(#idxSeg) = $Test_Date
                Let ArraySegments.Key(#idxSeg) = $Test_Key
                Let $NewDate = ''
            Else
                Let $PrevKey = ArraySegments.Key(#idxSeg)
                #debug show '$PrevKey :' $PrevKey 
                If $PrevKey <> $Key
                    !End and Start a segment
                    Let ArraySegments.EndS(#idxSeg) = $testTmp
                    Let #idxSeg = #idxSeg + 1
                    Let ArraySegments.IniS(#idxSeg) = $Test_Date
                    Let ArraySegments.Key(#idxSeg) = $Test_Key
                End-if
                Do Convert-To-DTU-Date($testTmp,$EndYY)
                Do DTU-Parse-Date($EndYY, #aaaa, #mmmm, #dddd)
                Move #aaaa to $aaaa 0000
                Let $NewDate = $aaaa || '-12-31'
            End-If
            Do Convert-To-DTU-Date($Test_Date, $Test_DateDTU)
            #Debug show '$CalBeginDt: ' $CalBeginDt '    $CalEndDt: ' $CalEndDt '  $Test_DateDTU: ' $Test_DateDTU
            If $Test_Action = 'TER' and $Test_Key = $Key
                and ($CalBeginDt <= $Test_DateDTU and $Test_DateDTU <= $CalEndDt)
                #Debug show '      **Termination in period'
                Let $EmplTermDt = $Test_Date
                Do Convert-To-DTU-Date($EmplTermDt, $EmplTermDtDTU)
                Let $EmplLstPR = $Test_Date
                Let $EmplTerminated = 'Y'  
                Let $TempTerm = $EmplLstPR
            End-If
            Break
        !When = 'TER'
            !Only End a Segment
        !    Let ArraySegments.EndS(#idxSeg) = $testTmp
        !     Let $EmplTermDt = $Test_Date
        !     Do Convert-To-DTU-Date($EmplTermDt, $EmplTermDtDTU)
        !    Let $EmplLstPR = $Test_Date
        !    Let $EmplTerminated = 'Y'            
        !    Break
        When = 'REH'
            !Only Start a segment
            Let #idxSeg = #idxSeg + 1
            Let ArraySegments.IniS(#idxSeg) = $Test_Date
            Let ArraySegments.Key(#idxSeg) = $Test_Key
            Let $HireDate  = $Test_Date
            Do Convert-To-DTU-Date($HireDate, $HireDateDTU)
            Let $EmplBegDt  = $Test_Date
            Do Convert-To-Dtu-Date($EmplBegDt, $EmplBegDtDTU)
            
            Let #pre-idx = #idxSeg - 1
            #debug show '    #pre-idx ' #pre-idx
            If (#pre-idx > 0) 
                Let $d_Key  = ArraySegments.Key(#pre-idx)
                Let $d_IniS = ArraySegments.IniS(#pre-idx)
                Let $d_EndS = ArraySegments.EndS(#pre-idx)
                #debug show '    $d_Key  ' $d_Key
                #debug show '    $d_IniS ' $d_IniS
                #debug show '    $d_EndS ' $d_EndS
                If(ArraySegments.EndS(#pre-idx) = '')
                    If $NewDate <> '' and $HireDateDTU > $NewDate
                        Do convert-from-dtu-date ($NewDate, $NewDate)
                        Let ArraySegments.EndS(#pre-idx) = $NewDate
                    Else
                        Let ArraySegments.EndS(#pre-idx) = $testTmp
                    End-If
                End-if
            End-if
            Break
    End-Evaluate    


FROM PS_JOB GS
WHERE EMPLID = $EmplId
AND EMPL_RCD = #Empl_rcd
!AND GS.EFFSEQ = (SELECT MAX(EFFSEQ)
!                 FROM PS_JOB
!                 WHERE EMPLID = GS.EMPLID
!                 AND EMPL_RCD = GS.EMPL_RCD
!                 AND EFFDT = GS.EFFDT
!                 AND ACTION = GS.ACTION)
!AND GS.ACTION IN ('HIR', 'XFR', 'TER', 'REH')
ORDER BY GS.EFFDT ASC
End-Select

If $Test_Action = 'TER' and ArraySegments.EndS(#idxSeg) = ''
    !Close the last segment if last Action is 'TER' finish as null
    
    Do Convert-To-DTU-Date($testTmp,$EndYY)
    Do DTU-Parse-Date($EndYY, #aaaa, #mmmm, #dddd)
    Move #aaaa to $aaaa 0000
    Let $NewDate = $aaaa || '-12-31'
    
    #Debug show '      $newdate' $newdate
    
    Do convert-from-dtu-date ($NewDate, $NewDate)
    Let ArraySegments.EndS(#idxSeg) = $NewDate
End-If

#IfDef Debug
      Let #x = 1
      Show '    A.List all Segments'
      While #x <= #idxSeg
        Let $x1 = ArraySegments.IniS(#x)
        Let $x2 = ArraySegments.EndS(#x)
        Let $x3 = ArraySegments.Key(#x)
      
        Show '     |' $x1 '|' $x2 '|' $x3 
        Let #x= #x + 1
      End-While
#endif

!Create an array to store segments valid only in period between $CalBeginDt1 and $CalEndDt1
Create-Array name=ValidSeg Size = 100
    Field = IniS:char=''
    Field = EndS:char=''
    Field = Key:char=''
    Field = StrIndex:char='000000000000'
    Field = Query3:char=''

Clear-Array name=ValidSeg

Let #i = 1
Let #vIDX = 0
#debug show '#idxSeg   : ' #idxSeg

While #i <= #idxSeg

    Let $NTVini = ArraySegments.IniS(#i)
    Let $NTVend = ArraySegments.EndS(#i)
    Let $k      = ArraySegments.Key(#i)

    #Debug show '$k [' $k ']  $Key [' $Key ']' 
    If $k = $Key 
        Do Convert-To-DTU-Date($NTVini, $DTUini)
        Do Convert-To-DTU-Date($NTVend, $DTUend)
        #Debug show '#i:'#i '  $DTUini :' $DTUini '    $DTUend :' $DTUend
        Let #lasti = #i
        
        If $DTUini <= $CalEndDt and ($DTUend = '' or $DTUend >= $CalBeginDt)
            
            Let $Dt1 = ValidSeg.IniS(#vIDX) 
            Let $Dt2 = ValidSeg.EndS(#vIDX)
            If ($Dt1 <> '' and $Dt2 <> '') or #vIDX = 0
                Let #vIDX = #vIDX + 1
            End-If
            
            If $DTUini < $CalBeginDt
                Let ValidSeg.IniS(#vIDX) = $CalBeginDt1
            Else
                Let ValidSeg.IniS(#vIDX) = $NTVini
            End-if
            
            If $DTUend = '' 
                Let ValidSeg.EndS(#vIDX) = $CalEndDt1
                Let #i = #idxSeg
            Else
                If $DTUend >= $CalEndDt
                    Let ValidSeg.EndS(#vIDX) = $CalEndDt1
                Else
                    Let ValidSeg.EndS(#vIDX) = $NTVend
                End-If
            End-if
            
        End-if
    Else
        if #lasti > 0 and #vIDX > 0 
            if ValidSeg.IniS(#vIDX) <> '' and ValidSeg.EndS(#vIDX) = ''
                Let ValidSeg.EndS(#vIDX) = ValidSeg.EndS(#lasti)
            end-if
        end-if
    End-If     
    Let #i = #i + 1
End-While

#IfDef Debug
      Let #x = 1
      Show 'B.List Valid Segments'
      While #x <= #vIDX
        Let $x1 = ValidSeg.IniS(#x)
        Let $x2 = ValidSeg.EndS(#x)
        Let $x3 = ValidSeg.Key(#x)
        Let $x4 = ValidSeg.StrIndex(#x)
        Let $x5 = ValidSeg.Query3(#x)
        
        Show $x1 '|' $x2 '|' $x3 '|' $x4 '|' $x5
        Let #x= #x + 1
      End-While
      Show '------------------------'
      
      Show '    $HireDate   : ' $HireDate
      Show '    $EmplTermDt : ' $EmplTermDt
      Show '    $EmplLstPR  : ' $EmplLstPR
#endif
End-Procedure GetSegments

!***************************************************************************
Begin-Procedure GetCalsByAcum
#debug show 'Procedure: GetCalsByAcum'
#debug show '    $Emplid         : ' $EmplId
#debug show '    $BegDt          : ' $BegDt
#debug show '    $EndDt          : ' $EndDt
#debug show '    #PinNum         : ' #PinNum
!***************************************************************************

Begin-Select Distinct
P3.CAL_RUN_ID

    Let $Cals_include = $Cals_include || '''' || Rtrim(&P3.CAL_RUN_ID, ' ') || '''' || ', ' 
    
FROM PS_GP_PYE_PRC_STAT A3
, PS_GP_PYE_SEG_STAT B3
, PS_GP_RSLT_ACUM P3
WHERE B3.CAL_RUN_ID    = A3.CAL_RUN_ID
AND B3.EMPLID          = A3.EMPLID
AND B3.EMPL_RCD        = A3.EMPL_RCD
AND B3.GP_PAYGROUP     = A3.GP_PAYGROUP
AND B3.CAL_ID          = A3.CAL_ID
AND B3.ORIG_CAL_RUN_ID = A3.ORIG_CAL_RUN_ID
AND B3.PYE_CALC_STAT  >= '50'
AND B3.CALC_ACTION     = 'C'
AND P3.CAL_RUN_ID      = A3.CAL_RUN_ID
AND P3.EMPLID          = A3.EMPLID
AND P3.EMPL_RCD        = A3.EMPL_RCD
AND P3.GP_PAYGROUP     = A3.GP_PAYGROUP
AND P3.CAL_ID          = A3.CAL_ID
AND P3.ORIG_CAL_RUN_ID = A3.ORIG_CAL_RUN_ID
AND P3.RSLT_SEG_NUM    = B3.RSLT_SEG_NUM
AND P3.ACM_FROM_DT    >= $BegDt
AND P3.ACM_THRU_DT    <= $EndDt
AND P3.USER_KEY1       = $Company
AND P3.EMPLID          = $EmplId
AND A3.RSLT_VER_NUM    = 1
AND A3.RSLT_REV_NUM    = 1
AND P3.PIN_NUM         = (SELECT C.PIN_NUM
                          FROM PS_GP_PIN C,
                          PS_GP_ACCUMULATOR C2
                          WHERE C.PIN_NUM     = #PinNum
                          AND C.PIN_NUM       = C2.PIN_NUM
                          AND C2.CORR_RTO_IND = 'N')
AND A3.CAL_RUN_ID      = (SELECT AAS.CAL_RUN_ID
                          FROM PS_GP_CAL_RUN AAS
                          WHERE AAS.RUN_FINALIZED_TS = (SELECT MAX(AATS.RUN_FINALIZED_TS)
                                                        FROM PS_GP_CAL_RUN AATS
                                                        WHERE AATS.CAL_RUN_ID IN (SELECT AAA.CAL_RUN_ID
                                                                                  FROM PS_GP_RSLT_ACUM AAA
                                                                                  WHERE AAA.ACM_FROM_DT = P3.ACM_FROM_DT
                                                                                  AND AAA.ACM_THRU_DT     = P3.ACM_THRU_DT
                                                                                  AND AAA.EMPLID          = P3.EMPLID
                                                                                  AND AAA.PIN_NUM         = P3.PIN_NUM)
                                                         )
                          )
AND A3.CAL_ID = (SELECT AA3.CAL_ID
                  FROM PS_GP_CAL_RUN_DTL AA3
                  WHERE AA3.CAL_RUN_ID = P3.CAL_RUN_ID
                  AND AA3.CAL_FINAL_TS   = (SELECT MAX(CAL_FINAL_TS)
                                            FROM PS_GP_CAL_RUN_DTL
                                            WHERE CAL_RUN_ID = AA3.CAL_RUN_ID)
                  )
End-Select

#debug show '    $Cals_include   [' $Cals_include ']'
#debug show '    $Cals_exclude   [' $Cals_exclude ']'
End-Procedure GetCalsByAcum

!***************************************************************************
Begin-Procedure GetCalsByERDD
#debug show '** GetCalsByERDD **'
#debug show '    $Emplid         : ' $EmplId
#debug show '    $Company        : ' $Company
#debug show '    #PinNum         : ' #PinNum
#debug show '    $BegDt          : ' $BegDt
#debug show '    $EndDt          : ' $EndDt
!***************************************************************************
Begin-Select DISTINCT
C.CAL_RUN_ID

    Let $Cals_include = $Cals_include || '''' || Rtrim(&C.CAL_RUN_ID, ' ') || '''' || ', '

FROM PS_GP_RSLT_PI_SOVR A
, PS_GP_RSLT_ERN_DED C
, PS_GP_PIN D
WHERE A.EMPLID       = $Emplid
AND A.SOVR_VAL_CHAR  = $Company
AND A.SOVR_VAL_CHAR   <> ' '
AND A.SOVR_VAL_CHAR   IS NOT NULL
AND C.PIN_NUM        = #PinNum
AND C.SLICE_END_DT  >= $BegDt
AND C.SLICE_END_DT  <= $EndDt
AND A.INSTANCE = (SELECT MIN(A2.INSTANCE) 
                  FROM PS_GP_RSLT_PI_SOVR A2 
                  WHERE A.ORIG_CAL_RUN_ID = A2.ORIG_CAL_RUN_ID 
                  AND A2.RSLT_SEG_NUM = 1
                  AND A.PIN_NUM = A2.PIN_NUM
                  AND A2.EMPLID = A.EMPLID
                  AND A2.EMPL_RCD = A.EMPL_RCD
                  AND A2.GP_PAYGROUP = A.GP_PAYGROUP
                  AND A2.CAL_ID = A.CAL_ID
                  AND A2.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
                  AND A2.SOVR_VAL_CHAR = A.SOVR_VAL_CHAR)
AND A.CAL_RUN_ID = A.ORIG_CAL_RUN_ID
AND A.RSLT_SEG_NUM = 1
AND A.PIN_NUM = D.PIN_NUM 
AND C.EMPLID = A.EMPLID
AND C.EMPL_RCD = A.EMPL_RCD
AND C.CAL_RUN_ID = A.CAL_RUN_ID 
AND C.GP_PAYGROUP = A.GP_PAYGROUP 
AND C.CAL_ID = A.CAL_ID 
AND C.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID 
AND C.RSLT_SEG_NUM = A.RSLT_SEG_NUM
ORDER BY C.CAL_RUN_ID
End-Select

Begin-Select DISTINCT
C2.CAL_RUN_ID

    Let $Cals_exclude = $Cals_exclude || '''' || Rtrim(&C2.CAL_RUN_ID, ' ') || '''' || ', '

FROM PS_GP_RSLT_PI_SOVR A
, PS_GP_RSLT_ERN_DED C2
, PS_GP_PIN D
WHERE A.EMPLID       = $Emplid
AND A.SOVR_VAL_CHAR <> $Company
AND A.SOVR_VAL_CHAR   <> ' '
AND A.SOVR_VAL_CHAR   IS NOT NULL
AND C2.PIN_NUM        = #PinNum
AND C2.SLICE_END_DT  >= $BegDt
AND C2.SLICE_END_DT  <= $EndDt
AND A.INSTANCE = (SELECT MIN(A2.INSTANCE) 
                  FROM PS_GP_RSLT_PI_SOVR A2 
                  WHERE A.ORIG_CAL_RUN_ID = A2.ORIG_CAL_RUN_ID 
                  AND A2.RSLT_SEG_NUM = 1
                  AND A.PIN_NUM = A2.PIN_NUM
                  AND A2.EMPLID = A.EMPLID
                  AND A2.EMPL_RCD = A.EMPL_RCD
                  AND A2.GP_PAYGROUP = A.GP_PAYGROUP
                  AND A2.CAL_ID = A.CAL_ID
                  AND A2.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
                  AND A2.SOVR_VAL_CHAR = A.SOVR_VAL_CHAR)
AND A.CAL_RUN_ID = A.ORIG_CAL_RUN_ID
AND A.RSLT_SEG_NUM = 1
AND A.PIN_NUM = D.PIN_NUM 
AND C2.EMPLID = A.EMPLID
AND C2.EMPL_RCD = A.EMPL_RCD
AND C2.CAL_RUN_ID = A.CAL_RUN_ID 
AND C2.GP_PAYGROUP = A.GP_PAYGROUP 
AND C2.CAL_ID = A.CAL_ID 
AND C2.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID 
AND C2.RSLT_SEG_NUM = A.RSLT_SEG_NUM
ORDER BY C2.CAL_RUN_ID
End-Select

#debug show '    $Cals_include   [' $Cals_include ']'
#debug show '    $Cals_exclude   [' $Cals_exclude ']'
End-Procedure GetCalsByERDD

!***************************************************************************
Begin-Procedure CleanQuery ($strIn, :$strOut)
!***************************************************************************
    Let #QueryChars = length($strIn)
    if #QueryChars > 0
        Let $strOut = substr($strIn,1, #QueryChars - 2)
    Else
        Let $strOut = ''
    End-If
End-Procedure CleanQuery

!***************************************************************************
Begin-Procedure PreLoadAcumMembers
!***************************************************************************
#debug show '** PreLoadAcumMembers **'
#debug show '    $prcs_oprid            : ' $prcs_oprid
#debug show '    $prcs_run_cntl_id      : ' $prcs_run_cntl_id
#debug show '    #prcs_process_instance : ' #prcs_process_instance
#debug show '    $CompanyP              : ' $CompanyP
#debug show '    $BegDt                 : ' $BegDt
#debug show '    $EndDt                 : ' $EndDt
!***************************************************************************

Create-Array name=Pre_Codes Size=500
  Field = PNumb:number
  Field = PCode:Char

Let Pre_Codes.PCode(1)  = 'SUB NO ACRED_IMMNS MEX'
Let Pre_Codes.PCode(2)  = 'SUB ART 178 MEX'         !DD
Let Pre_Codes.PCode(3)  = 'SUB ISR 1991 MEX'        !DD
Let Pre_Codes.PCode(4)  = 'SUB NO ACRE MEX'         !DD
Let Pre_Codes.PCode(5)  = 'LIQUIDACION BRUTA MEX'
Let Pre_Codes.PCode(6)  = 'ISR NETO 112 MEX'        !DD
Let Pre_Codes.PCode(7)  = 'CRE SAL EFEC_IMMNS MEX'
Let Pre_Codes.PCode(8)  = 'EXCE CRE SAL_IMMNS MEX'
Let Pre_Codes.PCode(9)  = 'ISR NETO 113_IMMNS MEX'
Let Pre_Codes.PCode(10) = 'RISR NETO142_IMMNS MEX'
Let Pre_Codes.PCode(11) = 'RISR NETO148_IMMNS MEX'
Let #i = 11

Let #j = 1

While #j <= #i
    Let $TPcode = Pre_Codes.PCode(#j)
Begin-Select
PIN_NUM
PIN_TYPE

        Let Pre_Codes.PNumb(#j) = &PIN_NUM
        
        If Rtrim(&PIN_TYPE,' ') <> 'AC'
            Let #TPNumb        = &PIN_NUM
            Let $TPcode        = Pre_Codes.PCode(#j)
            Let #Tmp_PinMbrNum = &PIN_NUM
            Let $Tmp_BgnDt     = $BegDt
            Let $Tmp_EndDt     = $EndDt
            Let $Tmp_AcmSign   = 'A'
            #ifdef debug
                    Display '      '                                    noline
                    Display $prcs_oprid       ' XXXXXXXXXX '            noline
                    Display $prcs_run_cntl_id ' XXXXXXXXXX '            noline
                    Display #prcs_process_instance 'B99999B'            noline
                    Display #TPNumb           'B99999999B'              noline
                    Display $TPcode           ' XXXXXXXXXXXXXXXXXXXXX ' noline
                    Display #Tmp_PinMbrNum    'B99999999B'              noline
                    Display $Tmp_BgnDt        ' XXXXXXXXXXX '           noline
                    Display $Tmp_EndDt        ' XXXXXXXXXXX '           noline
                    Display $Tmp_AcmSign      ' X '
            #endif 
            Do InsertAcumMembers
        End-if

FROM PS_GP_PIN
WHERE PIN_CODE = $TPCode
End-Select
    Let #j = #j +1
End-While

!Get Acumulators from multiple information page
Begin-Select
DP.PIN_NUM
DP.PIN_CODE

    Let #i = #i + 1
    Let Pre_Codes.PNumb(#i) = &DP.PIN_NUM
    Let Pre_Codes.PCode(#i) = Rtrim(&DP.PIN_CODE, ' ')

FROM PS_GPMX_ANNL_DTL DT,
PS_GP_PIN DP
WHERE DT.COMPANY = $CompanyP
AND DT.EFFDT = (SELECT MAX(DT2.EFFDT)
                FROM PS_GPMX_ANNL_DTL DT2
                WHERE DT2.COMPANY = DT.COMPANY
                AND DT2.EFFDT <= $EndDt)
AND DT.ENTRY_TYPE_ELEM = 'DD0'
AND DP.PIN_NUM = DT.GPMX_PIN_ANNL_NUM
End-Select

#ifdef debug
    Let #j = 1
    While #j <= #i
        Let #xN = Pre_Codes.PNumb(#j)
        Let $xC = Pre_Codes.PCode(#j)
        Display #xN 'BBBB999999'              noline
        Display $xC '  XXXXXXXXXXXXXXXXXXXXX'
        Let #j = #j + 1
    End-While
#endif 

!Retrive Acumulator Members and save in TMP table
Let #j = 1
While #j <= #i
    Let #TPNumb = Pre_Codes.PNumb(#j)
    Let $TPcode = Pre_Codes.PCode(#j)
    
Begin-Select
PF.PIN_MBR_NUM
PF.BGN_DT
PF.END_DT
PF.ACM_SIGN

    Let #Tmp_PinMbrNum = &PF.PIN_MBR_NUM
    Let $Tmp_BgnDt     = Rtrim(&PF.BGN_DT, ' ')
    Let $Tmp_EndDt     = Rtrim(&PF.END_DT, ' ')
    If $Tmp_EndDt = ''
        Let $Tmp_EndDt = $EndDt
    End-If
    Let $Tmp_AcmSign   = Rtrim(&PF.ACM_SIGN, ' ')
    
    #ifdef debug
            Display '      '          ' XXXXXX '                noline
            Display $prcs_oprid       ' XXXXXXXXXX '            noline
            Display $prcs_run_cntl_id ' XXXXXXXXXX '            noline
            Display #prcs_process_instance 'B99999B'            noline
            Display #TPNumb           'B99999999B'              noline
            Display $TPcode           ' XXXXXXXXXXXXXXXXXXXXX ' noline
            Display #Tmp_PinMbrNum    'B99999999B'              noline
            Display $Tmp_BgnDt        ' XXXXXXXXXXX '           noline
            Display $Tmp_EndDt        ' XXXXXXXXXXX '           noline
            Display $Tmp_AcmSign      ' X '
    #endif 
    
    Do InsertAcumMembers

FROM PS_GP_ACM_MBR PF
WHERE PF.PIN_NUM IN (SELECT PIN_NUM PF2
                     FROM PS_GP_PIN PF2
                     WHERE PF2.PIN_CODE = $TPcode)
OR PF.PIN_NUM IN (SELECT PF3.PIN_MBR_NUM
                                  FROM PS_GP_ACM_MBR PF3
                                  WHERE PF3.PIN_NUM IN (SELECT PF4.PIN_NUM
                                                        FROM PS_GP_PIN PF4
                                                        WHERE PF4.PIN_CODE = $TPcode))
End-Select
    Let #j = #j + 1
End-While

End-Procedure PreLoadAcumMembers

!***************************************************************************
Begin-Procedure InsertAcumMembers
#debuga show '** InsertAcumMembers **'
!***************************************************************************
Begin-SQL
INSERT INTO PS_GPMX_ANNL_TMP
(OPRID, RUN_CNTL_ID, PRCSINSTANCE
,PIN_NUM
,PIN_CODE
,PIN_MBR_NUM
,BGN_DT
,END_DT
,ACM_SIGN)
VALUES
($prcs_oprid
,$prcs_run_cntl_id
,#prcs_process_instance
,#TPNumb
,$TPcode
,#Tmp_PinMbrNum
,$Tmp_BgnDt     
,$Tmp_EndDt
,$Tmp_AcmSign)
End-SQL
End-Procedure InsertAcumMembers

!***************************************************************************
Begin-Procedure CleanPreLoadAcum
#debug show '** CleanPreLoadAcum **'
!***************************************************************************

!*** Clear Temp Table
Begin-SQL
DELETE FROM PS_GPMX_ANNL_TMP
WHERE OPRID      = $Prcs_OprID
AND RUN_CNTL_ID  = $Prcs_Run_Cntl_ID
AND PRCSINSTANCE = #prcs_process_instance
End-SQL

End-Procedure CleanPreLoadAcum

!******************************************************
begin-procedure Check-Characters
#debug show 'Procedure: Check-Characters'
! Check for accented characters -> replace with nonaccent, and Ñ/ñ
! replace with &.  Then uppercase the string.
!******************************************************
  #debugx show '    $StringIn :' $StringIn

  Let #Len = Length($StringIn)
  Let #I  = 1

  Let $PreviousChar = ''
  while #I <= #Len
    Let $Found = 'N'
    Let $Test_Char = Substr($StringIn, #I, 1)

    #debugx show '      $Test_Char :' $Test_Char

    Let #Test_Code = ascii(Upper($Test_Char))
    if (#Test_Code > 64 and #Test_Code < 91)
      Let $StringOut = $StringOut || Upper($Test_Char)
      Let $Found = 'Y'
    end-if

    if ($Found = 'N')
      evaluate $Test_Char
        When = 'È'
        When = 'É'
        When = 'Ê'
        When = 'Ë'
        When = 'è'
        When = 'é'
        When = 'ê'
        When = 'ë'
          Let $Test_Char = 'E'
          Let $StringOut  = $StringOut || $Test_Char
          break
        When = 'À'
        When = 'Á'
        When = 'Â'
        When = 'Ã'
        When = 'Ä'
        When = 'Å'
        When = 'à'
        When = 'á'
        When = 'â'
        When = 'ã'
        When = 'ä'
        When = 'å'
          Let $Test_Char = 'A'
          Let $StringOut  = $StringOut || $Test_Char
          break
        When = 'Ì'
        When = 'Í'
        When = 'Î'
        When = 'Ï'
        When = 'ì'
        When = 'í'
        When = 'î'
        When = 'ï'
          Let $Test_Char = 'I'
          Let $StringOut  = $StringOut || $Test_Char
          break
        When = 'Ò'
        When = 'Ó'
        When = 'Ô'
        When = 'Õ'
        When = 'Ö'
        When = 'ò'
        When = 'ó'
        When = 'ô'
        When = 'õ'
        When = 'ö'
          Let $Test_Char = 'O'
          Let $StringOut  = $StringOut || $Test_Char
          break
        When = 'Ù'
        When = 'Ú'
        When = 'Û'
        When = 'ù'
        When = 'ú'
        When = 'û'
        When = 'ü'
          Let $Test_Char = 'U'
          Let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ñ'
        when = 'Ñ'
          Let $Test_Char = 'Ñ'
          Let $StringOut  = $StringOut || $Test_Char
          break
        when = 'Ç'
          Let $Test_Char = 'C'
          Let $StringOut  = $StringOut || $Test_Char
          break
        when = ' '
        when = '-'
          Let $Test_Char = ' '
          Let $StringOut  = $StringOut || $Test_Char
          break
        When = '@'
        When = '%'
        When = '#'
        When = '!!'
        When = '¡'
        When = '$'
        When = '&'
        When = '.'
        When = '¿'
        When = '?'
        When = ''''
        When = ' '
          !Special Characters Accepted
          !Avoid duplicates
          If $Test_Char <> $PreviousChar
            Let $StringOut  = $StringOut || $Test_Char
          End-If
          Let $PreviousChar = $Test_Char
          break
        When = '´'
            Let $Test_Char = ''''
            Let $StringOut  = $StringOut || $Test_Char
            break
        when-other
          break
      end-evaluate
    end-if
    add 1 to #I
    #debugx show '      $StringOut :' $StringOut
  end-while
  Let $String    = upper ($StringOut)
  Let $StringOut = ''
  !move '' to $String
  !move '' to $StringIn
end-procedure Check-Characters



#include 'getcomex.sqc'  !Get selected fields from Company Table and Mexico Fields
#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'prcsapi.sqc'   !Process API
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'  !Common date routines