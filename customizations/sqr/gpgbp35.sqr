!***********************************************************************
!  GPGBP35.SQR - EMPLOYER'S ANNUAL RETURN                              *
!                                                                      *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2016/02/25:05:33:27                                 !
!       $Release:  HR92                                                !
!           $Bug:  22823826                                            !
!                                                                      *
!***********************************************************************
! Date          Modification                                           *
! ----          ------------                                           *
! 01/2002                                                              *
! 07/2002   Init for non provided Variables and Subtotals calculation  *
! 07/2002   Add Shell accum for values not part of GP UK standard      *
!           delivered                                                  *
! 12/2002   Revision of driving Select to get the last calculated YTD  *
!           results (per Hire/Rehire date)                             *
! 11/2003   Design 2003/2004                                           *
!           Previous Design, see GPGBP35Y.SQR                          *
! 03/2004   Adjustment and Performance review                          *
! 07/2004   Made changes as required by the splitup of GPGB_EE_STDTLS  *
!           record into GPGB_EE_TAX, GPGB_EE_NI and GPGB_EE_TAX_NTS.   *
! 08/2005   Modified procedure SELECT-CAL to include Calendar Group    *
!           in where clause                                            *
! 08/2006    Modified the whole SQR for NI-Retro Changes               *
! 01/2012    ASPP Inclusion in Statutory payments                      *
! 09/2012   NI Overrides                                               *
!***********************************************************************


!*** Setting up the environment
!******************************************************************

#include 'setenv.sqc'   ! Set environment
#include 'setup31.sqc'  ! Printer and page-size initialization

!******************************************************************
!*** Constants definitions
!******************************************************************

!Define Column Location Variables
#define PageLength              133
#define PosNumPage              118

#define NIL   ''


#define PosTaxYear              55
#define Pos1                    1
#define PosDirector             16
#define Pos1A                   17
#define Pos2                    32
#define Pos2A                   70
#define Pos2ARefund             86
#define Pos3                    85
#define Pos4                    105
#define Pos4Refund              121


#define Pos1A_T         1
#define Pos1B_T         30
#define Pos1C_T         34
#define Pos2A_T         27
#define Pos2B_T         47
#define Pos2C_T         51
#define Pos2CRefund_T   67
#define Pos3A_T         51
#define Pos3B_T         63
#define Pos3C_T         67
#define Pos4A_T         65
#define Pos4B_T         95
#define Pos4C_T         99
#define Pos5A_T         86
#define Pos5B_T         107
#define Pos5C_T         111
#define Pos5CRefund_T   127


!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 10 !This number must be changed to match the number
                 !of lines in the header (including column headings)
        let $ReportDateTime =  $ReportDate || ' ' ||  $ReportTime   

        print $ReportTitle                  ()   bold center
        print 'Report ID:  '                (+1,1)
        print $ReportID                     (,{Pos1A})
        page-number                         ( ,{PosNumPage}) 'Page: '
        last-page                           () ' / '
        print 'Date:'                       (+1,1)
        print $ReportDateTime               (,{Pos1A})
        print 'Tax Year:'                   (,{PosTaxYear}) Bold
        print $PNL_TAX_YEAR                 (,+1)

  ! Variable selection 01
        if  #PNL_TAX_PERIOD <> 00
                print  ' Period:'           (,+1)   Bold
                print  #PNL_TAX_PERIOD      (,+1)   edit 99
        end-if
        if $PNL_FREQUENCY_ID >= ' '
                print  '  Frequency:'       (,+1)  Bold
                print  $PNL_FREQUENCY_ID    (,+1)
        end-if
  ! end Variable selection 01

        print 'Pay Entity:'                 (+1,{Pos1})
        print $PYENT_NAME                   (,{Pos1A})

  ! Variable selection 02
        evaluate ''
        when <> $PNL_EMPLID
                print 'Emplid  :'           (,{PosTaxYear})
                print $PNL_EMPLID           (,+1)
        break
        when <> $PNL_PAYGROUP
                print 'Paygroup:'           (+1,{Pos1})
                print $PNL_PAYGROUP         (,{Pos1A})
        break
        when <> $PNL_CAL_RUN_ID
                print 'Calendar Grp:'       (+1,{Pos1})
                print $PNL_CAL_RUN_ID       (,{Pos1A})
        break
        when <> $PNL_DEPTID
                print '   Deptid:'          (,{PosTaxYear})
                print $PNL_DEPTID           (,{Pos2A})
        break
        end-evaluate
  ! End Variable selection 02

        if $W_Header = 'Y'

                graphic                                    (+1,1,128) horz-line
                print 'Part 1'                             (+1,{Pos1}) bold
                print 'Summary of payments for the year'   (,{Pos1A})  bold
                graphic                                    (,1,128) horz-line

                print 'Employee Id'                        (+2,{Pos1})
                print 'Employee Name  '                    (,{Pos1A})
                print 'National Insurance  '               (,{Pos2A})
                print '  Income Tax'                       (,{Pos4})
                graphic                                    (+1,1,128) horz-line
        end-if

end-heading


!******************************************************************
!*** Footing section - Sub-Total
!******************************************************************

begin-footing 8 !This number must be changed to match the number
                !of lines in the bottom

    if $W_Footer = 'Y'

        graphic                             (+1,1,128) horz-line
        print 'Page Total              (1)' (+2,{Pos2})
        print #P35_NIC_BAL                  (,{Pos2A})   EDIT 9,999,999,999.99  BOLD
        print '          (4)'               (,{Pos3})
        print #P35_TAX_BAL                  (,{Pos4})    EDIT 9,999,999,999.99  BOLD

       !Save last page totals for boxes 1,2, 4 and 5
        let #P35_COL_1_TOT = #P35_NIC_BAL
        let #P35_COL_2_TOT = #P35_NIC_PREV
        let #P35_COL_4_TOT = #P35_TAX_BAL
        let #P35_COL_5_TOT = #P35_TAX_PREV

        ! Set values to Zero
        let #P35_NIC_BAL = 0
        let #P35_TAX_BAL = 0

        print 'Balance Brought Forward (2)' (+2,{Pos2})
        print #P35_NIC_PREV                 (,{Pos2A})   EDIT 9,999,999,999.99
        print '          (5)'               (,{Pos3})
        print #P35_TAX_PREV                 (,{Pos4})    EDIT 9,999,999,999.99

        print 'Current Balance     1+2 (3)' (+2,{Pos2})
        print #P35_NIC_TOT                  (,{Pos2A})   EDIT 9,999,999,999.99  BOLD
        print '      4+5 (6)'               (,{Pos3})
        print #P35_TAX_TOT                  (,{Pos4})    EDIT 9,999,999,999.99  BOLD

        ! Save for next time previous Balance
        let #P35_NIC_PREV = #P35_NIC_TOT
        let #P35_TAX_PREV = #P35_TAX_TOT

    end-if

end-Footing


!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report
       
        do INIT-REPORT
        do MAIN-REPORT
        do Append-Log ('WHERE_STATEMENT'  , $WHERE_STATEMENT)
        do Append-Log('----------------------------- ' , '------------------------------' )
        do Get-log
        

end-report


!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure INIT-REPORT

#Debug Show 'Procedure Name -> INIT-REPORT ' 
 
        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME

        if isnull($prcs_process_instance)
            #Debug  SHOW 'Running P35 SQR'
                do ASK-VALUES !SQR not run through process scheduler
        else
            #Debug    SHOW 'Running P35.SQR in the Process Scheduler'
                do GET-VALUES !SQR run through process scheduler
        end-if

        let $ReportID    = 'P35'
        let $ReportTitle = 'Employer' || '''' || 's Annual Return'
                
#Debug Show 'Procedure Name <- INIT-REPORT ' 
end-procedure INIT-REPORT

!*=================================================================
! Procedure    :INIT-VARIABLES
! Comment      :Initialisation of all varaibles used by the report
!*=================================================================
begin-procedure INIT-VARIABLES

        let #CountError     = 0
        let #counter        = 0
        let #TotConPay      = 0

        let $W_Header       = 'Y'
        let $W_Footer       = 'Y'
        let $W_Print        = 'N'
        let #W_EE_CNT       = 0
        let $REFUND         = ' '
        let $DIRECTOR       = ' '

end-procedure INIT-VARIABLES

!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : MAIN REPORT                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure MAIN-REPORT

#Debug Show 'Procedure Name -> MAIN-REPORT ' 


        do BUILD-WHERE-RUNCTL
        do GET-EDI-RSLT

        do UPDATE-PRCS-RUN-STATUS
        
#Debug Show 'Procedure Name <- MAIN-REPORT '  

end-procedure MAIN-REPORT


!*=================================================================
! Procedure:  GET-EDI-RSLT                                        !
! Descr:      Main Select [SELECT-EMPLOYEES]                      !
!                                                                 !
!*=================================================================
begin-procedure GET-EDI-RSLT

#Debug Show 'Procedure Name ->  GET-EDI-RSLT ' 

!-*-*-*-*-*-*

let $W_Pay_entity = ' '
let $W_Emplid     = ' '
let $W_HireDt     = ' '

!-*-*-*-*-*-*
let $sql-statement = 'GPGBP35.SQR,GET-EDI-RSLT,Select,PS_GPGB_EDI_RSLT'
begin-SELECT on-error=SQL-ERROR

DISTINCT(A.HIRE_DT)  &A.HIRE_DT          () on-break print=never level=3  after=PRINT-REPORT
A.EMPLID             &A.EMPLID           () on-break print=never level=2
A.EMPL_RCD                               () on-break print=never level=2
A.PAY_ENTITY         &A.PAY_ENTITY       () on-break print=never level=1  after=PRINT-TOTALS
A.GPGB_TAX_BGN_YR    &A.GPGB_TAX_BGN_YR
A.GP_PAYGROUP        &A.GP_PAYGROUP
A.CAL_RUN_ID         &A.CAL_RUN_ID,
A.CAL_ID             &A.CAL_ID

A.FIRST_NAME         &A.FIRST_NAME
A.MIDDLE_NAME        &A.MIDDLE_NAME    
A.LAST_NAME          &A.LAST_NAME
A.BIRTHDATE          &A.BIRTHDATE
A.SEX                &A.SEX
A.NAME_PREFIX        &A.NAME_PREFIX

!A.DESCR 
!A.TAX_CODE_UK 
!A.GPGB_TAX_BGN_YR 

A.TAX_BASIS_UK       &A.TAX_BASIS_UK
A.RSLT_SEG_NUM       &A.RSLT_SEG_NUM
A.USER_KEY1          &A.USER_KEY1 
A.USER_KEY2          &A.USER_KEY2

A.GPGB_EE_TAX        &A.GPGB_EE_TAX
A.GPGB_SMP           &A.GPGB_SMP
A.GPGB_SPPA          &A.GPGB_SPPA
A.GPGB_SPPB          &A.GPGB_SPPB 
A.GPGB_ASPPA         &A.GPGB_ASPPA
A.GPGB_ASPPB         &A.GPGB_ASPPB  
A.GPGB_SAP           &A.GPGB_SAP
A.GPGB_EE_SL         &A.GPGB_EE_SL
A.GPGB_EE_TC         &A.GPGB_EE_TC

        

        ! Fields for sub selects....
        let $MAIN_SEL_EMPLID          = RTRIM(&A.EMPLID,' ')
        let #MAIN_SEL_EMPL_RCD        = &A.EMPL_RCD
        let $MAIN_SEL_PAY_ENTITY      = RTRIM(&A.PAY_ENTITY,' ')
        let $MAIN_SEL_HIRE_DT         = DATETOSTR(&A.HIRE_DT, 'YYYY-MM-DD')
        let $MAIN_SEL_HIRE_DT2        = &A.HIRE_DT
        do CONVERT-TO-DTU-DATE($MAIN_SEL_HIRE_DT2, $MAIN_SEL_HIRE_DT_DTU)
        do CONVERT-FROM-DTU-DATE($MAIN_SEL_HIRE_DT_DTU, $MAIN_SEL_HIRE_DT_NATIVE)
        let #TAX_BGN_YR               = &A.GPGB_TAX_BGN_YR
        let $MAIN_SEL_PAYGROUP        = RTRIM(&A.GP_PAYGROUP,' ')
        let $MAIN_SEL_CAL_RUN_ID      = RTRIM(&A.CAL_RUN_ID,' ')
        let $MAIN_SEL_CAL_ID          = RTRIM(&A.CAL_ID,' ')
         
        let $PERS_DT_forename         = RTRIM(&A.FIRST_NAME , ' ')
        let $PERS_DT_middlename       = RTRIM(&A.MIDDLE_NAME, ' ')
        let $PERS_DT_surname          = &A.LAST_NAME
        let $PERS_DT_forenames        = $PERS_DT_FORENAME || ' ' || $PERS_DT_MIDDLENAME
        let $PERS_DT_fullname         = $PERS_DT_FORENAME || ' ' || $PERS_DT_SURNAME
        let $PERS_DT_birthdate        = DATETOSTR(&A.BIRTHDATE, 'DD/MM/YYYY')
        let $PERS_DT_sex              = &A.SEX
        let $PERS_DT_nameprefix       = &A.NAME_PREFIX
                   
       
            if $W_Pay_Entity <> $MAIN_SEL_PAY_ENTITY
                do GET-PAY-ENTITY($MAIN_SEL_PAY_ENTITY,$AsOfDate,$PYENT_Descr,$PYENT_Descr,$PYENT_DescrShort,
                               $PYENT_Addr1,$PYENT_Addr2,$PYENT_Addr3,$PYENT_Addr4,$PYENT_City,
                               $PYENT_County,$PYENT_PostCode,$PYENT_Country,$PYENT_NAME,#PYENT_TAXNUM,
                               $PYENT_TAX_DNAME,$PYENT_PAYE_REF,$PYENT_PERMIT_NUM)
                do GET-PAY-ENTITY-DTL($MAIN_SEL_PAY_ENTITY,#PNL_TAX_YEAR,#PYENT_SSP_REC,#PYENT_SMP_STD,
                                   #PYENT_SMP_SER,#P35_COL_7_TOT,#P35_COL_8_TOT,#P35_COL_20_TOT,
                                   #P35_COL_22_TOT,#P35_COL_25_TOT,#P35_COL_29_TOT,#P35_COL_295_INC)

                let $W_Pay_Entity     = $MAIN_SEL_PAY_ENTITY
            end-if

            if $W_Emplid <> $MAIN_SEL_EMPLID
                do CHECK-DIRECTOR
                let $W_Emplid         = $MAIN_SEL_EMPLID
                let $W_HireDt         = ' '
            else
            ! We want to print a page when Change of HIRE Date (pb with level break logic and select distinct)
                if $W_HireDt <> $MAIN_SEL_HIRE_DT
                     do PRINT-REPORT
                     let $W_HireDt = $MAIN_SEL_HIRE_DT
                end-if
            end-if
          

                let $USER_KEY1             = RTRIM(&A.USER_KEY1,' ')
                let $USER_KEY2             = RTRIM(&A.USER_KEY2,' ')
                let $NI                    = $USER_KEY2
                let #USER_KEY1             = &A.USER_KEY1
                let #USER_KEY2             = &A.USER_KEY2
                let #TAX_BASIS             = &A.TAX_BASIS_UK
                let #MAIN_SEL_RSLT_SEG_NUM = &A.RSLT_SEG_NUM
 
                let #GPGB_EE_TAX           = &A.GPGB_EE_TAX
                let #GPGB_SMP              = &A.GPGB_SMP 

                 IF #GPGB_SMP < 0
                  let #GPGB_SMP= 0
                 END-IF 

                let #GPGB_SPPA             = &A.GPGB_SPPA
                 IF #GPGB_SPPA < 0
                 let #GPGB_SPPA = 0
                 END-IF    
               
                let #GPGB_SPPB             = &A.GPGB_SPPB
                  IF #GPGB_SPPB < 0
                  let #GPGB_SPPB = 0
                  END-IF   
                  
                   let #GPGB_ASPPA             = &A.GPGB_ASPPA
                 IF #GPGB_ASPPA < 0
                 let #GPGB_ASPPA = 0
                 END-IF    
               
                let #GPGB_ASPPB             = &A.GPGB_ASPPB
                  IF #GPGB_ASPPB < 0
                  let #GPGB_ASPPB = 0
                  END-IF  

                let #GPGB_SAP              = &A.GPGB_SAP 

                IF #GPGB_SAP < 0
                   let #GPGB_SAP= 0
                 END-IF  

                let #GPGB_EE_SL            = &A.GPGB_EE_SL
                let #GPGB_EE_TC            = &A.GPGB_EE_TC
                 
                 IF #GPGB_EE_SL < 0
                 LET #GPGB_EE_SL = 0
                 END-IF             
                   
         

!                  if $W_NI <> $USER_KEY2
!                       let $W_NI = $USER_KEY2
                       do Get-EE-NI-CAT
!               end-if

!               if $W_NICat_Ind = 'Y' or RTRIM($NI,' ') <= ''
!               if RTRIM($NI,' ') <= ''
                        let $W_Print = 'Y'
                        do EVALUATE-EDI-RSLT
!              end-if
  
FROM PS_GPGB_EDI_RSLT A,PS_GPGB_EE_RSLT B

[$Where_statement]
 AND A.PRC_ORD_TS = ( 
 SELECT MAX(AA.PRC_ORD_TS ) 
  FROM PS_GPGB_EDI_RSLT AA 
 WHERE AA.EMPLID = A.EMPLID 
   AND AA.EMPL_RCD = A.EMPL_RCD 
   AND AA.HIRE_DT = A.HIRE_DT
   AND AA.PAY_ENTITY = A.PAY_ENTITY 
   AND AA.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR) 
AND A.RSLT_SEG_NUM = (
 SELECT MAX(AB.RSLT_SEG_NUM) 
  FROM PS_GPGB_EDI_RSLT AB 
 WHERE AB.EMPLID = A.EMPLID 
   AND AB.EMPL_RCD = A.EMPL_RCD 
   AND AB.HIRE_DT = A.HIRE_DT
   AND AB.PAY_ENTITY = A.PAY_ENTITY 
   AND AB.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR 
   AND AB.CAL_ID = A.CAL_ID 
   AND AB.PRC_ORD_TS = A.PRC_ORD_TS) 
AND B.EMPLID=A.EMPLID 
AND B.EMPL_RCD=A.EMPL_RCD 
AND B.CAL_RUN_ID=A.CAL_RUN_ID
AND B.GP_PAYGROUP=A.GP_PAYGROUP
AND B.CAL_ID=A.CAL_ID
AND B.ORIG_CAL_RUN_ID=A.ORIG_CAL_RUN_ID
AND B.RSLT_SEG_NUM=A.RSLT_SEG_NUM
ORDER BY A.EMPLID,A.EMPL_RCD,A.HIRE_DT
  
END-SELECT
#Debug Show 'Procedure Name <-  GET-EDI-RSLT '  
end-procedure  GET-EDI-RSLT

!*===================================================================
! Procedure     : EVALUATE-EDI-RSLT                                 !
! Descr         : Evaluate values selected from GPGB_EDI_RSLT table !
! ** NB **      : The values selected should be assigned to         !
!                 coresponding printing variables                   !
!*===================================================================
begin-procedure EVALUATE-EDI-RSLT

#Debug Show 'Procedure Name -> EVALUATE-EDI-RSLT ' 

 let #P35_TAX          = #GPGB_EE_TAX
 let #P35_SMP          = #GPGB_SMP
 let #P35_NIC_SMP      = #GPGB_SMP
 let #P35_SPPA         = #GPGB_SPPA 
 let #P35_NIC_SPPA     = #GPGB_SPPA 
 let #P35_SPPB         = #GPGB_SPPB
 let #P35_NIC_SPPB     = #GPGB_SPPB
 let #P35_ASPPA        = #GPGB_ASPPA 
 let #P35_NIC_ASPPA    = #GPGB_ASPPA 
 let #P35_ASPPB        = #GPGB_ASPPB
 let #P35_NIC_ASPPB    = #GPGB_ASPPB
 let #P35_SAP          = #GPGB_SAP
 let #P35_NIC_SAP      = #GPGB_SAP
 let #P35_SL           = #GPGB_EE_SL
 let #P35_TC           = #GPGB_EE_TC

#Debug Show 'Procedure Name <- EVALUATE-EDI-RSLT '  
 
end-procedure EVALUATE-EDI-RSLT

!*=================================================================
! Procedure:  START-NEW-PAGE                                      !
! Descr:      New page each time the Emplid/Pay Entity changes    !
!                                                                 !
!*=================================================================
begin-procedure START-NEW-PAGE

#Debug Show 'Procedure Name -> START-NEW-PAGE ' 

                NEW-PAGE
                
#Debug Show 'Procedure Name <- START-NEW-PAGE '

end-procedure START-NEW-PAGE

!*=================================================================
! Procedure: PRINT-REPORT                                         !
! Descr:     Prints Employee Data                                 !
!                                                                 !
!*=================================================================

begin-procedure PRINT-REPORT

   #Debug Show 'Procedure Name -> PRINT-REPORT '

   if $W_Print = 'Y'
        ! Calculate EE Totals
         let #P35_NIC       = #P35_NIC_EE  + #P35_NIC_ER
         let #P35_RBT       = #P35_RBT_EE  + #P35_RBT_ER

        ! Calculate NIC
         let #P35_NIC       = #P35_NIC - #P35_RBT


                if length($MAIN_SEL_EMPLID) < 11
                        print $MAIN_SEL_EMPLID                  (+1,{Pos1})
                        print ','                               (,)
                        print #MAIN_SEL_EMPL_RCD                (,)           EDIT 009
                else
                        print $MAIN_SEL_EMPLID                  (+1,{Pos1})
                        print #MAIN_SEL_EMPL_RCD                (,)           EDIT 009
                end-if

                if $DIRECTOR_IND = 'Y'
                    let $DIRECTOR = '*'
                else
                    let $DIRECTOR = ' '
                end-if

                print $DIRECTOR             (, {PosDirector})
                print $PERS_DT_fullname     (,{Pos1A})

                if #P35_NIC < 0
                   let #P35_NIC_PRINT = ABS(#P35_NIC)
                   let $REFUND = 'R'
                else
                   let #P35_NIC_PRINT = #P35_NIC
                   let $REFUND = ' '
                end-if

                print #P35_NIC_PRINT        (,{Pos2A}) EDIT 9,999,999,999.99
                print $REFUND               (,{Pos2ARefund})


                if #P35_TAX < 0
                   let #P35_TAX_PRINT = ABS(#P35_TAX)
                   let $REFUND = 'R'
                else
                   let #P35_TAX_PRINT = #P35_TAX
                   let $REFUND = ' '
                end-if


                print #P35_TAX_PRINT              (,{Pos4})  EDIT 9,999,999,999.99
                print $REFUND                   (,{Pos4Refund})

        ! Add SPP Birth and Adoption
         let #P35_SPP       = #P35_SPPA     + #P35_SPPB

                   IF #P35_SPP < 0
                   LET #P35_SPP = 0
                   END-IF     
                   
        let #P35_ASPP       = #P35_ASPPA     + #P35_ASPPB

                   IF #P35_ASPP < 0
                   LET #P35_ASPP = 0
                   END-IF  
                   
         let #P35_NIC_SPP   = #P35_NIC_SPPA + #P35_NIC_SPPB

         let #P35_NIC_ASPP   = #P35_NIC_ASPPA + #P35_NIC_ASPPB
         
        ADD 1 TO #W_EE_CNT

        ! Accumulate for Current Balance
         let #P35_NIC_BAL   = #P35_NIC_BAL + #P35_NIC
         let #P35_TAX_BAL   = #P35_TAX_BAL + #P35_TAX

        ! Accumulate for Total
         let #P35_NIC_TOT     = #P35_NIC_TOT     + #P35_NIC
         let #P35_TAX_TOT     = #P35_TAX_TOT     + #P35_TAX
         let #P35_SMP_TOT     = #P35_SMP_TOT     + #P35_SMP
         let #P35_NIC_SMP_TOT = #P35_NIC_SMP_TOT + #P35_NIC_SMP
         let #P35_SPP_TOT     = #P35_SPP_TOT     + #P35_SPP
         let #P35_NIC_SPP_TOT = #P35_NIC_SPP_TOT + #P35_NIC_SPP
         let #P35_ASPP_TOT     = #P35_ASPP_TOT     + #P35_ASPP
         let #P35_NIC_ASPP_TOT = #P35_NIC_ASPP_TOT + #P35_NIC_ASPP
         let #P35_SAP_TOT     = #P35_SAP_TOT     + #P35_SAP
         let #P35_NIC_SAP_TOT = #P35_NIC_SAP_TOT + #P35_NIC_SAP
         let #P35_RBT_TOT     = #P35_RBT_TOT     + #P35_RBT
         let #P35_SL_TOT      = #P35_SL_TOT      + #P35_SL
         let #P35_TC_TOT      = #P35_TC_TOT      + #P35_TC
         let #P35_COL_22_TOT  = #P35_COL_22_TOT  + #P35_COL_22
         let #P35_COL_13_TOT  = #P35_COL_13_TOT  + #P35_COL_13
         let #P35_COL_20_TOT  = #P35_COL_20_TOT  + #P35_COL_20
         let #P35_COL_7_TOT   = #P35_COL_7_TOT   + #P35_COL_7
         let #P35_COL_8_TOT   = #P35_COL_8_TOT   + #P35_COL_8
         let #P35_COL_25_TOT  = #P35_COL_25_TOT  + #P35_COL_25
         let #P35_COL_29_TOT  = #P35_COL_29_TOT  + #P35_COL_29

         ! Set values to Zero
         let #P35_NIC      = 0
         let #P35_NIC_EE   = 0
         let #P35_NIC_ER   = 0
         let #P35_TAX      = 0
         let #P35_SMP      = 0
         let #P35_NIC_SMP  = 0
         let #P35_SPP      = 0
         let #P35_SPPA     = 0
         let #P35_SPPB     = 0
         let #P35_NIC_SPP  = 0
         let #P35_NIC_SPPA = 0
         let #P35_NIC_SPPB = 0
         let #P35_ASPP      = 0
         let #P35_ASPPA     = 0
         let #P35_ASPPB     = 0
         let #P35_NIC_ASPP  = 0
         let #P35_NIC_ASPPA = 0
         let #P35_NIC_ASPPB = 0
         let #P35_SAP      = 0
         let #P35_NIC_SAP  = 0
         let #P35_RBT      = 0
         let #P35_RBT_EE   = 0
         let #P35_RBT_ER   = 0
         let #P35_SL       = 0
         let #P35_TC       = 0
         let #P35_COL_22   = 0
         let #P35_COL_13   = 0
         let #P35_COL_20   = 0
         let #P35_COL_7    = 0
         let #P35_COL_8    = 0
         let #P35_COL_25   = 0
         let #P35_COL_29   = 0
         let $DIRECTOR_IND = 'N'

         let $W_Print    = 'N'

   end-if
 
#Debug Show 'Procedure Name <- PRINT-REPORT '  

end-procedure PRINT-REPORT


!*=================================================================
! Procedure: PRINT TOTALS                                         !
! Descr:     Print Pay Entity Totals                              !
!                                                                 !
!*=================================================================
begin-procedure PRINT-TOTALS

#Debug Show 'Procedure Name -> PRINT-TOTALS-2004 ' 

        do START-NEW-PAGE

        let $W_Header = 'N'
        let $W_Footer = 'N'

        ! SSP Recovered - from Pay Entity detail - 12/2002
        let #P35_COL_13_TOT = #PYENT_SSP_REC

        ! SMP/SPP/SAP recovered
        let #P35_SMP_TOT      = round(#P35_SMP_TOT * #PYENT_SMP_STD, 2)
        let #P35_NIC_SMP_TOT  = round(#P35_NIC_SMP_TOT * #PYENT_SMP_SER, 2)

        let #P35_SPP_TOT      = round(#P35_SPP_TOT * #PYENT_SMP_STD, 2)
        let #P35_NIC_SPP_TOT  = round(#P35_NIC_SPP_TOT * #PYENT_SMP_SER, 2)
        
        let #P35_ASPP_TOT      = round(#P35_ASPP_TOT * #PYENT_SMP_STD, 2)
        let #P35_NIC_ASPP_TOT  = round(#P35_NIC_ASPP_TOT * #PYENT_SMP_SER, 2)

        let #P35_SAP_TOT      = round(#P35_SAP_TOT * #PYENT_SMP_STD, 2)
        let #P35_NIC_SAP_TOT  = round(#P35_NIC_SAP_TOT * #PYENT_SMP_SER, 2)
           
         
        evaluate #TAX_BGN_YR
         
               when <= 2004
                do PRINT-TOTALS-2004  ! Tax year 2004-05 and before
                break
                
                when = 2005
                do PRINT-TOTALS-2005  ! Tax Year 2005-06 
                break
                
                when >= 2006
                do PRINT-TOTALS-2006  ! Tax Year 2006 and after
                break

        end-evaluate
               
        ! Set values to Zero

         let #P35_NIC_TOT     = 0
         let #P35_TAX_TOT     = 0
         let #P35_SMP_TOT     = 0
         let #P35_NIC_SMP_TOT = 0
         let #P35_SPP_TOT     = 0
         let #P35_NIC_SPP_TOT = 0
         let #P35_ASPP_TOT     = 0
         let #P35_NIC_ASPP_TOT = 0
         let #P35_SAP_TOT     = 0
         let #P35_NIC_SAP_TOT = 0
         let #P35_RBT_TOT     = 0
         let #P35_SL_TOT      = 0
         let #P35_TC_TOT      = 0
         let #P35_COL_7_TOT   = 0
         let #P35_COL_8_TOT   = 0
         let #P35_COL_9_TOT   = 0
         let #P35_COL_10_TOT  = 0
         let #P35_COL_13_TOT  = 0
         let #P35_COL_20_TOT  = 0
         let #P35_COL_21_TOT  = 0
         let #P35_COL_22_TOT  = 0
         let #P35_COL_25_TOT  = 0
         let #P35_COL_26_TOT  = 0
         let #P35_COL_27_TOT  = 0
         let #P35_COL_28_TOT  = 0
         let #P35_COL_29_TOT  = 0
         let #P35_COL_295_INC = 0
         let #P35_COL_30_TOT  = 0

end-procedure PRINT-TOTALS

!*=================================================================
! Procedure: PRINT TOTALS-2004                                    !
! Descr:     Print Pay Entity Totals-Tax year 2004-05 and before  !
!                                                                 !
!*=================================================================
begin-procedure PRINT-TOTALS-2004

        ! Calculate Subtotals    
        let #P35_COL_9_TOT  = #P35_TAX_TOT   + #P35_COL_7_TOT + #P35_COL_8_TOT
        let #P35_COL_10_TOT = #P35_NIC_TOT   + #P35_COL_9_TOT
        let #P35_COL_12_TOT = #P35_COL_10_TOT + #P35_SL_TOT
      
        let #P35_COL_21_TOT = #P35_COL_13_TOT
                              + #P35_SMP_TOT
                              + #P35_NIC_SMP_TOT
                              + #P35_SPP_TOT
                              + #P35_NIC_SPP_TOT
                              + #P35_SAP_TOT
                              + #P35_NIC_SAP_TOT
                              + #P35_COL_20_TOT
                            

        let #P35_COL_23_TOT = #P35_COL_21_TOT - #P35_COL_22_TOT
        let #P35_COL_26_TOT = #P35_TC_TOT     - #P35_COL_25_TOT
        let #P35_COL_27_TOT = #P35_COL_23_TOT + #P35_COL_26_TOT
        let #P35_COL_28_TOT = #P35_COL_12_TOT - #P35_COL_27_TOT
        let #P35_COL_30_TOT = #P35_COL_28_TOT - #P35_COL_29_TOT
        
       
        print 'NICs '                                (,{Pos2C_T})    BOLD
        print 'Income Tax '                          (,{Pos5C_T})    BOLD

        print 'Total NICs shown '                    (+2,{Pos2A_T})  BOLD
        print '(1)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_1_TOT < 0
                   let #P35_COL_1_TOT_PRINT = ABS(#P35_COL_1_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_1_TOT_PRINT = #P35_COL_1_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_1_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2

        print 'Total Tax shown '                     (,{Pos5A_T})    BOLD
        print '(4)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_4_TOT < 0
                   let #P35_COL_4_TOT_PRINT = ABS(#P35_COL_4_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_4_TOT_PRINT = #P35_COL_4_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_4_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'above '                               (+1,{Pos2A_T})
        print 'above '                               (,{Pos5A_T})


        print 'Totals from P35(CS)'                  (+2,{Pos2A_T})  BOLD
        print '(2)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_2_TOT < 0
                   let #P35_COL_2_TOT_PRINT = ABS(#P35_COL_2_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_2_TOT_PRINT = #P35_COL_2_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_2_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print 'Totals from P35(CS)'                  (,{Pos5A_T})    BOLD
        print '(5)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_5_TOT < 0
                   let #P35_COL_5_TOT_PRINT = ABS(#P35_COL_5_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_5_TOT_PRINT = #P35_COL_5_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_5_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2


        print 'Total NICs 1 + 2'                     (+3,{Pos2A_T})  BOLD
        print '(3)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_NIC_TOT < 0
                   let #P35_NIC_TOT_PRINT = ABS(#P35_NIC_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_NIC_TOT_PRINT = #P35_NIC_TOT
                   let $REFUND = ' '
                end-if
        print #P35_NIC_TOT_PRINT                     (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print '4 + 5'                                (,{Pos5A_T})    BOLD
        print '(6)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_TAX_TOT < 0
                   let #P35_TAX_TOT_PRINT = ABS(#P35_TAX_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_TAX_TOT_PRINT = #P35_TAX_TOT
                   let $REFUND = ' '
                end-if
        print #P35_TAX_TOT_PRINT                     (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'Received from IR'                     (+3,{Pos5A_T})
        print '(7)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_7_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2
        print 'to refund tax'                        (+1,{Pos5A_T})

        print 'Deductions made from'                 (+2,{Pos5A_T})
        print '(8)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_8_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2
        print 'subcontractors'                       (+1,{Pos5A_T})

        print 'Total Tax '                           (+2,{Pos5A_T})  BOLD
        print '6+7+8 '                               (,+1)
        print '(9)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_9_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'Statutory payments recovered '        (+3,{Pos1B_T})  BOLD

        print 'Combined Amounts '                    (,{Pos4C_T})    BOLD


        print 'SSP '                                 (+2,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(13)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_13_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total NICs/Tax '                      (,{Pos4A_T})    BOLD
        print '3+9 '                                 (,+1)
        print '(10)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_10_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'SMP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(14)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SMP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total Student Loan'                   (,{Pos4A_T})
        print '(11)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_SL_TOT                            (,{Pos4C_T})    EDIT 9,999,999,999
        graphic                                      (,{Pos4C_T},16) Box 2
        print 'deductions'                           (+1,{Pos4A_T})

        print 'NIC compensation on SMP'              (+2,{Pos1A_T})
        print '(15)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SMP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print '10 + 11'                              (,{Pos4A_T})    BOLD
        print '(12)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_12_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2


        print 'SPP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(16)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SPP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'NIC compensation on SPP'              (+3,{Pos1A_T})
        print '(17)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SPP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'SAP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(18)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SAP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'NIC compensation on SAP'              (+3,{Pos1A_T})
        print '(19)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SAP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'NIC Holiday claimed'                  (+3,{Pos1A_T})
        print '(20)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_20_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Total of boxes 13 to 20'              (+3,{Pos1A_T})
        print '(21)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_21_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2
        
        print 'Received from IR to pay'              (+3,{Pos1A_T})
        print '(22)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_22_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2
        print 'SSP/SMP/SPP/SAP '                     (+1,{Pos1A_T})


        print '21 minus 22'                          (-1,{Pos3A_T})  BOLD
        print '(23)'                                 (,{Pos3B_T})    BOLD
        graphic                                      (,{Pos3B_T},4)  Box 2
        print #P35_COL_23_TOT                        (,{Pos3C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos3C_T},16) Box 2

        print 'Tax Credits paid'                     (+3,{Pos1A_T})
        print '(24)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_TC_TOT                            (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Tax Credit funding from IR'           (+3,{Pos1A_T})
        print '(25)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_25_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print '24 minus 25'                          (,{Pos3A_T})    BOLD
        print '(26)'                                 (,{Pos3B_T})    BOLD
        graphic                                      (,{Pos3B_T},4)  Box 2
        print #P35_COL_26_TOT                        (,{Pos3C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos3C_T},16) Box 2

        print '23 + 26'                              (+4,{Pos4A_T})  BOLD
        print '(27)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_27_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'Amount Payable for the year'          (+3,{Pos4A_T})  BOLD

        print '(28)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_28_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
        print '12 minus 27 '                         (+1,{Pos4A_T})

        print 'NICs/Tax paid already'                (+2,{Pos4A_T})
        print '(29)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_29_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2


        print 'NOW PAYABLE'                          (+3,{Pos4A_T})  BOLD
        print '28 minus 29 '                         (,+1)
        print '(30)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_30_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

#Debug Show 'Procedure Name <- PRINT-TOTALS-2004 ' 
 
end-procedure PRINT-TOTALS-2004
 
!*=================================================================
! Procedure: PRINT TOTALS-2005                                    !
! Descr:     Print Pay Entity Totals-Tax year 2005-06             !
!                                                                 !
!*=================================================================
begin-procedure PRINT-TOTALS-2005

#Debug Show 'Procedure Name -> PRINT-TOTALS-2005 ' 
    
        ! Calculate Subtotals       
        let #P35_COL_9_TOT  = #P35_TAX_TOT   + #P35_COL_7_TOT + #P35_COL_8_TOT
        let #P35_COL_10_TOT = #P35_NIC_TOT   + #P35_COL_9_TOT
        let #P35_COL_12_TOT = #P35_COL_10_TOT + #P35_SL_TOT
       
        let #P35_COL_21_TOT = #P35_COL_13_TOT
                              + #P35_SMP_TOT
                              + #P35_NIC_SMP_TOT
                              + #P35_SPP_TOT
                              + #P35_NIC_SPP_TOT
                              + #P35_SAP_TOT
                              + #P35_NIC_SAP_TOT
        let #P35_COL_23_TOT = #P35_COL_21_TOT - #P35_COL_22_TOT
        let #P35_COL_26_TOT = #P35_TC_TOT     - #P35_COL_25_TOT
        let #P35_COL_27_TOT = #P35_COL_23_TOT + #P35_COL_26_TOT
        let #P35_COL_28_TOT = #P35_COL_12_TOT - #P35_COL_27_TOT
        let #P35_COL_30_TOT = #P35_COL_28_TOT - #P35_COL_29_TOT - #P35_COL_295_INC
     
        print 'NICs '                                (,{Pos2C_T})    BOLD
        print 'Income Tax '                          (,{Pos5C_T})    BOLD



        print 'Total NICs shown '                    (+2,{Pos2A_T})  BOLD
        print '(1)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_1_TOT < 0
                   let #P35_COL_1_TOT_PRINT = ABS(#P35_COL_1_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_1_TOT_PRINT = #P35_COL_1_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_1_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2

        print 'Total Tax shown '                     (,{Pos5A_T})    BOLD
        print '(4)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_4_TOT < 0
                   let #P35_COL_4_TOT_PRINT = ABS(#P35_COL_4_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_4_TOT_PRINT = #P35_COL_4_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_4_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'above '                               (+1,{Pos2A_T})
        print 'above '                               (,{Pos5A_T})


        print 'Totals from P35(CS)'                  (+2,{Pos2A_T})  BOLD
        print '(2)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_2_TOT < 0
                   let #P35_COL_2_TOT_PRINT = ABS(#P35_COL_2_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_2_TOT_PRINT = #P35_COL_2_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_2_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print 'Totals from P35(CS)'                  (,{Pos5A_T})    BOLD
        print '(5)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_5_TOT < 0
                   let #P35_COL_5_TOT_PRINT = ABS(#P35_COL_5_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_5_TOT_PRINT = #P35_COL_5_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_5_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2


        print 'Total NICs 1 + 2'                     (+3,{Pos2A_T})  BOLD
        print '(3)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_NIC_TOT < 0
                   let #P35_NIC_TOT_PRINT = ABS(#P35_NIC_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_NIC_TOT_PRINT = #P35_NIC_TOT
                   let $REFUND = ' '
                end-if
        print #P35_NIC_TOT_PRINT                     (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print '4 + 5'                                (,{Pos5A_T})    BOLD
        print '(6)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_TAX_TOT < 0
                   let #P35_TAX_TOT_PRINT = ABS(#P35_TAX_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_TAX_TOT_PRINT = #P35_TAX_TOT
                   let $REFUND = ' '
                end-if
        print #P35_TAX_TOT_PRINT                     (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'Received from IR'                     (+3,{Pos5A_T})
        print '(7)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_7_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2
        print 'to refund tax'                        (+1,{Pos5A_T})

        print 'Deductions made from'                 (+2,{Pos5A_T})
        print '(8)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_8_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2
        print 'subcontractors'                       (+1,{Pos5A_T})

        print 'Total Tax '                           (+2,{Pos5A_T})  BOLD
        print '6+7+8 '                               (,+1)
        print '(9)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_9_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2


        print 'Statutory payments recovered '        (+3,{Pos1B_T})  BOLD

        print 'Combined Amounts '                    (,{Pos4C_T})    BOLD


        print 'SSP '                                 (+2,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(13)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_13_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total NICs/Tax '                      (,{Pos4A_T})    BOLD
        print '3+9 '                                 (,+1)
        print '(10)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_10_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'SMP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(14)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SMP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total Student Loan'                   (,{Pos4A_T})
        print '(11)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_SL_TOT                            (,{Pos4C_T})    EDIT 9,999,999,999
        graphic                                      (,{Pos4C_T},16) Box 2
        print 'deductions'                           (+1,{Pos4A_T})


        print 'NIC compensation on SMP'              (+2,{Pos1A_T})
        print '(15)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SMP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print '10 + 11'                              (,{Pos4A_T})    BOLD
        print '(12)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_12_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2


        print 'SPP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(16)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SPP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'NIC compensation on SPP'              (+3,{Pos1A_T})
        print '(17)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SPP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'SAP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(18)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SAP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'NIC compensation on SAP'              (+3,{Pos1A_T})
        print '(19)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SAP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2



        print 'Total of boxes 13 to 19'              (+3,{Pos1A_T})
        print '(20)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_21_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Received from IR to pay'              (+3,{Pos1A_T})
        print '(21)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_22_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2
        print 'SSP/SMP/SPP/SAP '                     (+1,{Pos1A_T})


        print '20 minus 21'                          (-1,{Pos3A_T})  BOLD
        print '(22)'                                 (,{Pos3B_T})    BOLD
        graphic                                      (,{Pos3B_T},4)  Box 2
        print #P35_COL_23_TOT                        (,{Pos3C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos3C_T},16) Box 2

        print 'Tax Credits paid'                     (+3,{Pos1A_T})
        print '(23)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_TC_TOT                            (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Tax Credit funding from IR'           (+3,{Pos1A_T})
        print '(24)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_25_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print '23 minus 24'                          (,{Pos3A_T})    BOLD
        print '(25)'                                 (,{Pos3B_T})    BOLD
        graphic                                      (,{Pos3B_T},4)  Box 2
        print #P35_COL_26_TOT                        (,{Pos3C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos3C_T},16) Box 2

        print '22 + 25'                              (+4,{Pos4A_T})  BOLD
        print '(26)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_27_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'Amount Payable for the year'          (+3,{Pos4A_T})  BOLD

        print '(27)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_28_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
        print '12 minus 26 '                         (+1,{Pos4A_T})

        print 'NICs/Tax paid already'                (+2,{Pos4A_T})
        print '(28)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_29_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
        
        print 'Incentive Payment Received'           (+2,{Pos4A_T})
        print '(29)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_295_INC                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'NOW PAYABLE'                          (+3,{Pos4A_T})  BOLD
        print '27 minus 28 and 29'                   (,+1)
        print '(30)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_30_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

#Debug Show 'Procedure Name <- PRINT-TOTALS-2005 '  
end-procedure PRINT-TOTALS-2005

!*=================================================================
! Procedure: PRINT TOTALS-2006                                    !
! Descr:     Print Pay Entity Totals-Tax year 2006-07             !
!                                                                 !
!*=================================================================
begin-procedure PRINT-TOTALS-2006
 
#Debug Show 'Procedure Name -> PRINT-TOTALS-2006 ' 
        ! Calculate Subtotals
        let #P35_COL_9_TOT  = #P35_TAX_TOT   + #P35_COL_7_TOT                       !Calculate Box 8
        let #P35_COL_10_TOT = #P35_NIC_TOT   + #P35_COL_9_TOT                       !Calculate Box 9
        let #P35_COL_12_TOT = #P35_COL_10_TOT + #P35_SL_TOT                         !Calculate Box 11
        
        let #P35_COL_21_TOT =  #P35_COL_13_TOT  
                             + #P35_SMP_TOT 
                             + #P35_NIC_SMP_TOT 
                             + #P35_SPP_TOT 
                             + #P35_NIC_SPP_TOT 
                             + #P35_SAP_TOT 
                             + #P35_NIC_SAP_TOT 
                             + #P35_ASPP_TOT
                             + #P35_NIC_ASPP_TOT                                    !Calculate Box 19
                            
        let #P35_COL_23_TOT =  #P35_COL_21_TOT - #P35_COL_22_TOT                    !Calculate Box 21
        let #P35_COL_26_TOT =  #P35_COL_12_TOT - #P35_COL_23_TOT                    !Calculate Box 22
        let #P35_COL_28_TOT =  #P35_COL_26_TOT + #P35_COL_8_TOT                     !Calculate Box 24 
        let #P35_COL_30_TOT =  #P35_COL_28_TOT - #P35_COL_29_TOT - #P35_COL_295_INC !Calculate Box 27 
           
     
        print 'NICs '                                (,{Pos2C_T})    BOLD
        print 'Income Tax '                          (,{Pos5C_T})    BOLD

        print 'Total NICs shown '                    (+2,{Pos2A_T})  BOLD
        print '(1)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_1_TOT < 0
                   let #P35_COL_1_TOT_PRINT = ABS(#P35_COL_1_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_1_TOT_PRINT = #P35_COL_1_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_1_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2

        print 'Total Tax shown '                     (,{Pos5A_T})    BOLD
        print '(4)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_4_TOT < 0
                   let #P35_COL_4_TOT_PRINT = ABS(#P35_COL_4_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_4_TOT_PRINT = #P35_COL_4_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_4_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'above '                               (+1,{Pos2A_T})
        print 'above '                               (,{Pos5A_T})


        print 'Totals from P35(CS)'                  (+2,{Pos2A_T})  BOLD
        print '(2)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_COL_2_TOT < 0
                   let #P35_COL_2_TOT_PRINT = ABS(#P35_COL_2_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_2_TOT_PRINT = #P35_COL_2_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_2_TOT_PRINT                   (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print 'Totals from P35(CS)'                  (,{Pos5A_T})    BOLD
        print '(5)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_COL_5_TOT < 0
                   let #P35_COL_5_TOT_PRINT = ABS(#P35_COL_5_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_COL_5_TOT_PRINT = #P35_COL_5_TOT
                   let $REFUND = ' '
                end-if
        print #P35_COL_5_TOT_PRINT                   (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2


        print 'Total NICs 1 + 2'                     (+3,{Pos2A_T})  BOLD
        print '(3)'                                  (,{Pos2B_T})    BOLD
        graphic                                      (,{Pos2B_T},4)  Box 2
                if #P35_NIC_TOT < 0
                   let #P35_NIC_TOT_PRINT = ABS(#P35_NIC_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_NIC_TOT_PRINT = #P35_NIC_TOT
                   let $REFUND = ' '
                end-if
        print #P35_NIC_TOT_PRINT                     (,{Pos2C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos2CRefund_T}
        graphic                                      (,{Pos2C_T},17) Box 2


        print '4 + 5'                                (,{Pos5A_T})    BOLD
        print '(6)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
                if #P35_TAX_TOT < 0
                   let #P35_TAX_TOT_PRINT = ABS(#P35_TAX_TOT)
                   let $REFUND = 'R'
                else
                   let #P35_TAX_TOT_PRINT = #P35_TAX_TOT
                   let $REFUND = ' '
                end-if
        print #P35_TAX_TOT_PRINT                     (,{Pos5C_T})    EDIT 9,999,999,999.99
        print $REFUND                                (,{Pos5CRefund_T}
        graphic                                      (,{Pos5C_T},17) Box 2

        print 'Received from HMRC '             (+3,{Pos5A_T})
        print '(7)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_7_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2
        print 'to refund tax'                        (+1,{Pos5A_T})

        print 'Total Tax '                           (+4,{Pos5A_T})  BOLD
        print  '6+7'                               (,+1)
        print '(8)'                                  (,{Pos5B_T})    BOLD
        graphic                                      (,{Pos5B_T},4)  Box 2
        print #P35_COL_9_TOT                         (,{Pos5C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos5C_T},17) Box 2


        print 'Statutory payments recovered '        (+3,{Pos1B_T})  BOLD

        print 'Combined Amounts '                    (,{Pos4C_T})    BOLD

        print 'SSP '                                 (+2,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(12)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_13_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total NICs/Tax '                      (,{Pos4A_T})    BOLD
        print '3+8 '                                 (,+1)
        print '(9)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_10_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print 'SMP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(13)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SMP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'Total Student Loan'                   (,{Pos4A_T})
        print '(10)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_SL_TOT                            (,{Pos4C_T})    EDIT 9,999,999,999
        graphic                                      (,{Pos4C_T},16) Box 2
        print 'deductions'                           (+1,{Pos4A_T})


        print 'NIC compensation on SMP'              (+2,{Pos1A_T})
        print '(14)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SMP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print  '9 + 10'                              (,{Pos4A_T})    BOLD
        print '(11)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_12_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2


        print 'SPP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(15)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SPP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'NIC compensation on SPP'              (+3,{Pos1A_T})
        print '(16)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SPP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'ASPP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(17)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_ASPP_TOT                          (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2


        print 'NIC compensation on SPP'              (+3,{Pos1A_T})
        print '(18)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_ASPP_TOT                      (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'SAP '                                 (+3,{Pos1A_T})
        print 'Recovered'                            (,+1)           BOLD
        print '(19)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_SAP_TOT                           (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'NIC compensation on SAP'              (+3,{Pos1A_T})
        print '(20)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_NIC_SAP_TOT                       (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Total of boxes 12 to 20'              (+3,{Pos1A_T})
        print '(21)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_21_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2

        print 'Received from HMRC to pay'            (+3,{Pos1A_T})
        print '(22)'                                 (,{Pos1B_T})    BOLD
        graphic                                      (,{Pos1B_T},4)  Box 2
        print #P35_COL_22_TOT                        (,{Pos1C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos1C_T},16) Box 2
        print 'SSP/SMP/SPP/ASPP/SAP '                (+1,{Pos1A_T})

        print '21 minus 22'                          (-1,{Pos4A_T})  BOLD
        print '(23)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_23_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        print '11 minus 23'                          (+3,{Pos4A_T})    BOLD
        print '(24)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_26_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
            
        print 'Deductions made from'                 (+8,{Pos4A_T})
        print '(25)'                                  (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_8_TOT                         (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},17) Box 2
        print 'subcontractors'                       (+1,{Pos4A_T})
                                              
        print 'Amount Payable for the year'          (+2,{Pos4A_T})  BOLD
        print '(26)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_28_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
        print  '24 + 25 '                            (+1,{Pos4A_T})

        print 'NICs/Tax paid already'                (+2,{Pos4A_T})
        print '(27)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_29_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2
        
        print 'Incentive Payment Received'           (+3,{Pos4A_T})
        print '(28)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_295_INC                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

        
        print 'NOW PAYABLE'                          (+3,{Pos4A_T})  BOLD
        print '26 minus 27 and 28'                   (,+1)
        print '(29)'                                 (,{Pos4B_T})    BOLD
        graphic                                      (,{Pos4B_T},4)  Box 2
        print #P35_COL_30_TOT                        (,{Pos4C_T})    EDIT 9,999,999,999.99
        graphic                                      (,{Pos4C_T},16) Box 2

#Debug Show 'Procedure Name <- PRINT-TOTALS-2006 ' 
      
end-procedure PRINT-TOTALS-2006

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************

!*=================================================================
! Procedure     :GET-VALUES
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure GET-VALUES

#Debug Show 'Procedure Name -> GET-VALUES ' 
  
let $sql-statement = 'GPGBP35.SQR,GET-VALUES,Select,PS_GPGB_RUNCTL_SQR'
begin-SELECT on-error=SQL-ERROR
RUNDB.CAL_RUN_ID
RUNDB.DEPTID
RUNDB.PAY_ENTITY
RUNDB.GP_PAYGROUP
RUNDB.EMPLID
RUNDB.FREQUENCY_ID
RUNDB.GPGB_TAX_PERIOD
RUNDB.GPGB_TAX_BGN_YR

        let $PNL_CAL_RUN_ID         = RTRIM(&RUNDB.CAL_RUN_ID,' ')
        let $PNL_DEPTID             = RTRIM(&RUNDB.DEPTID,' ')
        let $PNL_PAY_ENTITY         = RTRIM(&RUNDB.PAY_ENTITY,' ')
        let $PNL_PAYGROUP           = RTRIM(&RUNDB.GP_PAYGROUP,' ')
        let $PNL_EMPLID             = RTRIM(&RUNDB.EMPLID,' ')
        let #PNL_TAX_PERIOD         = &RUNDB.GPGB_TAX_PERIOD
        let $PNL_TAX_PERIOD         = EDIT(#PNL_TAX_PERIOD,'09')
        let $PNL_FREQUENCY_ID       = RTRIM(&RUNDB.FREQUENCY_ID,' ')
        let $PNL_TAX_YEAR           = RTRIM(EDIT(&RUNDB.GPGB_TAX_BGN_YR, '9999'),' ')
        let #PNL_TAX_YEAR           = &RUNDB.GPGB_TAX_BGN_YR

        FROM  PS_GPGB_RUNCTL_SQR RUNDB
        WHERE RUNDB.OPRID         = $Prcs_OprID
        AND RUNDB.RUN_CNTL_ID   = $Prcs_Run_Cntl_ID

end-SELECT
#Debug Show 'Procedure Name <- GET-VALUES '

end-procedure GET-VALUES

!*=================================================================
! Procedure:  BUILD-WHERE-RUNCTL                                  !
! Descr:      Build Where Statement from Run Control Parameters
!                                                                 !
!*=================================================================
begin-procedure BUILD-WHERE-RUNCTL

#Debug Show 'Procedure Name -> BUILD-WHERE-RUNCTL ' 

        let $Q                  = ''''

        let $WHERE_STATEMENT    = 'WHERE A.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR
        let $FREQ_WHERE         = ' AND A.FREQUENCY_ID = '''
                                  || $PNL_FREQUENCY_ID || $Q
        let $PERIOD_WHERE       = ' AND A.GPGB_TAX_PERIOD = '
                                  || $PNL_TAX_PERIOD
        let $CALENDER_WHERE     = ' AND A.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q
        let $CALENDER_WHERE_B   = ' AND B.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q
        let $DEPTID_WHERE       = ' AND B.DEPTID = '''
                                  || $PNL_DEPTID || $Q
        let $PAY_ENTITY_WHERE   = ' AND A.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q
        let $EMPLID_WHERE       = ' AND A.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        let $PAYGROUP_WHERE     = ' AND A.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q
        let $PAYGROUP_WHERE_B     = ' AND B.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q
        let $PAYGROUP_WHERE_X     = ' AND X.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q


        if  #PNL_TAX_PERIOD <> 00
                let $WHERE_STATEMENT= $WHERE_STATEMENT
                                      || $PERIOD_WHERE
        end-if

        evaluate ''
        when <> $PNL_FREQUENCY_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $FREQ_WHERE
        when <> $PNL_CAL_RUN_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $CALENDER_WHERE
                let $WHERE_CALENDAR_A = $CALENDER_WHERE
                let $WHERE_CALENDAR_B = $CALENDER_WHERE_B
        when <> $PNL_DEPTID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $DEPTID_WHERE
                break
        when <> $PNL_PAY_ENTITY
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAY_ENTITY_WHERE

        when <> $PNL_EMPLID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $EMPLID_WHERE
                break
        when <> $PNL_PAYGROUP
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAYGROUP_WHERE
                let $WHERE_PAYGROUP_A = $PAYGROUP_WHERE
                let $WHERE_PAYGROUP_B = $PAYGROUP_WHERE_B
                let $WHERE_PAYGROUP_X = $PAYGROUP_WHERE_X
                break
        end-evaluate

            
      
      
#Debug Show 'Procedure Name <- BUILD-WHERE-RUNCTL ' 

end-procedure BUILD-WHERE-RUNCTL


!*=================================================================
! Procedure   :ASK-VALUES
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure ASK-VALUES

#Debug Show 'Procedure Name -> ASK-VALUES ' 

        !input $PNL_CAL_RUN_ID 'Enter Calender Run ID'
        !input $PNL_PAY_ENTITY 'Enter Pay Entity'
        !input $PNL_DEPTID 'Enter Department ID'
        !input $PNL_PAYGROUP 'Enter Pay Group '
        !input $PNL_EMPLID 'Enter Employee ID '
        !input $PNL_TAX_PERIOD 'Enter Tax Period'
        !input $PNL_FREQUENCY_ID 'Enter Frequency ID'
        !input $PNL_TAX_YEAR 'Enter The Year the Tax Year Begins In'

#Debug Show 'Procedure Name <- ASK-VALUES ' 
end-procedure ASK-VALUES



!*=================================================================
! Procedure     : CHECK DIRECTOR                                  !
! Descr         : This procedure checks if employee is a director !
!                                                                 !
!*=================================================================

begin-procedure CHECK-DIRECTOR
#Debug Show 'Procedure Name -> CHECK-DIRECTOR ' 

let $sql-statement = 'GPGBP35.SQR,CHECK-DIRECTOR,Select,PS_GPGB_EE_NI'

begin-SELECT on-error=SQL-ERROR

DIR.GPGB_DIRECTOR_IND


        let $DIRECTOR_IND   = &DIR.GPGB_DIRECTOR_IND


        FROM PS_GPGB_EE_NI DIR
        WHERE DIR.EMPLID               = $MAIN_SEL_EMPLID
          AND DIR.EMPL_RCD             = #MAIN_SEL_EMPL_RCD
          AND DIR.EFFDT                = (SELECT MAX(DIR1.EFFDT)
                                          FROM PS_GPGB_EE_NI DIR1
                                         WHERE DIR.EMPLID   = DIR1.EMPLID
                                           AND DIR.EMPL_RCD = DIR1.EMPL_RCD)

end-SELECT

#Debug Show 'Procedure Name <- CHECK-DIRECTOR ' 
end-procedure CHECK-DIRECTOR


!*=================================================================
! Procedure     : GET-EE-NI-CAT
! Comment       : This procedure check NI CATEG per Empl_Rcd
!*=================================================================
begin-procedure GET-EE-NI-CAT

#Debug Show 'Procedure Name -> GET-EE-NI-CAT '

let $W_NICat_IND = 'N'

let $sql-statement = 'GPGBP35.SQC,GET-EE-NI-CAT,Select,PS_GPGB_EE_RSLT'

  DO CONVERT-TO-DTU-DATE($MAIN_SEL_HIRE_DT2, $MAIN_SEL_HIRE_DT2_DTU)
  DO CONVERT-FROM-DTU-DATE($MAIN_SEL_HIRE_DT2_DTU , $MAIN_SEL_HIRE_DT2_DTU_native)         

BEGIN-SELECT on-error=SQL-ERROR

A.GPGB_NI_CATEGORY   &A.GPGB_NI_CATEGORY    
A.GPGB_EE_NIC_VALUE  &A.GPGB_EE_NIC_VALUE
A.GPGB_EE_RBT_VALUE  &A.GPGB_EE_RBT_VALUE
A.GPGB_ER_NIC_VALUE  &A.GPGB_ER_NIC_VALUE
A.GPGB_ER_RBT_VALUE  &A.GPGB_ER_RBT_VALUE
A.GPGB_LEL_VALUE     &A.GPGB_LEL_VALUE
A.GPGB_LELET_VALUE   &A.GPGB_LELET_VALUE
A.GPGB_ETUEL_VALUE   &A.GPGB_ETUEL_VALUE
A.GPGB_ETUAP_VALUE   &A.GPGB_ETUAP_VALUE
A.GPGB_UAPUEL_VALUE  &A.GPGB_UAPUEL_VALUE


    let $W_NICat_IND = 'Y'
          
    let $GPGB_NI_CATEGORY  = RTRIM(&A.GPGB_NI_CATEGORY,' ')          
    let #GPGB_EE_NIC_VALUE = &A.GPGB_EE_NIC_VALUE
    let #GPGB_EE_RBT_VALUE = &A.GPGB_EE_RBT_VALUE
    let #GPGB_ER_NIC_VALUE = &A.GPGB_ER_NIC_VALUE
    let #GPGB_ER_RBT_VALUE = &A.GPGB_ER_RBT_VALUE
    let #GPGB_LEL_VALUE    = &A.GPGB_LEL_VALUE
    
    if #GPGB_LEL_VALUE <= 0 
    let $GPGB_NI_CATEGORY = 'X'
    end-if
      
     
    let #TOT_EE_ER_NIC = #GPGB_EE_NIC_VALUE + #GPGB_ER_NIC_VALUE - #GPGB_EE_RBT_VALUE - #GPGB_ER_RBT_VALUE 
    
    Evaluate $GPGB_NI_CATEGORY
    When = 'A'
    When = 'B'
    When = 'C'
    When = 'J'
    When = 'Q'
    When = 'R'
    When = 'T'
    When = 'W'
    if #TOT_EE_ER_NIC < 0 
    let #GPGB_EE_NIC_VALUE = 0
    let #GPGB_ER_NIC_VALUE = 0
    let #GPGB_EE_RBT_VALUE = 0
    let #GPGB_ER_RBT_VALUE = 0   
    end-if
    break
    When = 'X' 
    let #GPGB_EE_NIC_VALUE = 0
    let #GPGB_ER_NIC_VALUE = 0
    let #GPGB_EE_RBT_VALUE = 0
    let #GPGB_ER_RBT_VALUE = 0
    break
    End-Evaluate
    
    let #P35_NIC_EE = #P35_NIC_EE + #GPGB_EE_NIC_VALUE
    let #P35_NIC_ER = #P35_NIC_ER + #GPGB_ER_NIC_VALUE
    let #P35_RBT_EE = #P35_RBT_EE + #GPGB_EE_RBT_VALUE
    let #P35_RBT_ER = #P35_RBT_ER + #GPGB_ER_RBT_VALUE
  
  FROM PS_GPGB_EDI_RSLT A 
  
 WHERE A.EMPLID = $MAIN_SEL_EMPLID
   AND A.EMPL_RCD = #MAIN_SEL_EMPL_RCD 
   AND A.HIRE_DT = $MAIN_SEL_HIRE_DT2_DTU_native 
   AND A.GPGB_TAX_BGN_YR = #TAX_BGN_YR
   AND A.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND A.PRC_ORD_TS = ( 
 SELECT MAX(AA.PRC_ORD_TS) 
  FROM PS_GPGB_EDI_RSLT AA 
 WHERE AA.EMPLID = A.EMPLID 
   AND AA.EMPL_RCD = A.EMPL_RCD 
   AND AA.HIRE_DT = A.HIRE_DT 
AND AA.PAY_ENTITY = A.PAY_ENTITY 
   AND AA.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR 
   AND AA.GPGB_NI_CATEGORY = A.GPGB_NI_CATEGORY)
AND A.RSLT_SEG_NUM = (
 SELECT MAX(AB.RSLT_SEG_NUM) 
  FROM PS_GPGB_EDI_RSLT AB 
 WHERE AB.EMPLID = A.EMPLID 
   AND AB.EMPL_RCD = A.EMPL_RCD 
   AND AB.HIRE_DT = A.HIRE_DT 
   AND AB.PAY_ENTITY = A.PAY_ENTITY 
   AND AB.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR 
   AND AB.CAL_ID = A.CAL_ID 
   AND AB.PRC_ORD_TS = A.PRC_ORD_TS 
   AND AB.GPGB_NI_CATEGORY = A.GPGB_NI_CATEGORY)


end-SELECT

#Debug Show 'Procedure Name <- GET-EE-NI-CAT '

end-procedure GET-EE-NI-CAT

!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure Error-Sql

    #Debug Show 'Error-Sql->'

        add 1 to #CountError

        #Debug Show 'SQL Error -> ' $ProcedureName
        #Debug Show 'SQL Error -> ' $ErrorMessage
        #Debug Show 'SQL Error -> ' $SQL-ERROR

        stop

   #Debug Show 'Error-Sql<-'

end-procedure Error-Sql



!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'curdttim.sqc'  ! Get-Current-DateTime procedure
#include 'datetime.sqc'  ! Routines for date and time formatting
#include 'number.sqc'    ! Routines to format numbers
#include 'prcsapi.sqc'   ! Update Process Request API
#include 'prcsdef.sqc'   ! Update Process Request variable declaration
#include 'tranctrl.sqc'  ! Handle Commit/Rollback per platform
#include 'useprntr.sqc'  ! Init Printer
#include 'datemath.sqc'  ! Routines for date and time operations
#include 'readxlat.sqc'  ! Read Translate Table
#include 'gpgbut01.sqc'  ! Payentity Details
#include 'gpgbut02.sqc'  ! Log Details
!******************************* End Of Program *******************

