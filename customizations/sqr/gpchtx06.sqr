!****************************************************************************
!  GPCHTX06:  Statement of Pay Account                                      *
!****************************************************************************
!****************************************************************************
!                                                                           *
!                                                                           *
!                                                                           *
! This software and related documentation are provided under a              *
! license agreement containing restrictions on use and                      *
! disclosure and are protected by intellectual property                     *
! laws. Except as expressly permitted in your license agreement             *
! or allowed by law, you may not use, copy, reproduce,                      *
! translate, broadcast, modify, license, transmit, distribute,              *
! exhibit, perform, publish or display any part, in any form or             *
! by any means. Reverse engineering, disassembly, or                        *
! decompilation of this software, unless required by law for                *
! interoperability, is prohibited.                                          *
! The information contained herein is subject to change without             *
! notice and is not warranted to be error-free. If you find any             *
! errors, please report them to us in writing.                              *
!                                                                           *
!
! Copyright (C) 1988, 2018, Oracle and/or its affiliates.                   *
! All Rights Reserved.                                                      *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  27807408                                            !
!                                                                           *
!****************************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#define PAPER_SIZE   A4
#include 'setup32.sqc'


#define SQR_Strings_Array_Size 600
#define empbalnr_array_size 9000
#define empbalrt_array_size 9000

#define colh0         1
#define colh1        22   !jan
#define colh2        34   !feb
#define colh3        49
#define colh4        72
#define colh5        77
#define colh6        89
#define colh6_1      85
#define colh7       102
#define colh8       113
#define colh9       127
#define colh10      138
#define colh11      145
#define colh12      164   !Dec
#define colh13      174
#define colh14      182
#define colh15      188 


!***********************************************************         UBS

#define col0         1
#define col13       35
#define col1        47
#define col2        59
#define col3        71
#define col4        83
#define col5        95
#define col6       107
#define col7       119
#define col8       131
#define col9       143
#define col10      155
#define col11      167
#define col12      179

#define colm0         1
#define colm13       34   !Total
#define colm1        51   !Jan
#define colm2        62   !Feb
#define colm3        76
#define colm4        88
#define colm5       102
#define colm6       113
#define colm7       125
#define colm8       135
#define colm9       144
#define colm10      158
#define colm11      169
#define colm12      181   !Dec

#define colpm0         1
#define colpm13       32   !Total
#define colpm1        42   !Jan
#define colpm2        55   !Feb
#define colpm3        71
#define colpm4        84
#define colpm5        99
#define colpm6       111
#define colpm7       124
#define colpm8       135
#define colpm9       145
#define colpm10      160
#define colpm11      172
#define colpm12      185   !Dec

#define col0         1
#define col13       35
#define col1        47
#define col2        59
#define col3        71
#define col4        83
#define col5        95
#define col6       107
#define col7       119
#define col8       131
#define col9       143
#define col10      155
#define col11      167
#define col12      179

#define colp13       24
#define colp1        38
#define colp2        51
#define colp3        64
#define colp4        77
#define colp5        90
#define colp6       103
#define colp7       116
#define colp8       129
#define colp9       142
#define colp10      155
#define colp11      168
#define colp12      181

!****************************************************************************

begin-REPORT

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  let $Delete_tx61 = 'Y'
  do Delete-Records
  do Stdapi-Term
  do Get-Log

end-REPORT


!****************************************************************************
begin-heading 14
#include 'gpchut09.sqc'
  
  do Get-ResolnId($sqr-program,$Reslnid)
 
    print $PROCS_NO (-1,1)
  print $prcs_process_instance (0, {ColM})    

   print $RESLN_ID (+1,1)
   If $Reslnid <> '******'
      print $Reslnid (0, {ColM}) 
   End-If
   


 print $PRINTCLASS  (+1,#RptCol)
 print $Ctl_Print   (0,+1)
   
 if $PR_Year_Option = 'N'
    do Format-DateTime ($Ctl_Curr_Pay_End_Dt, $Ctl_Curr_Pay_End_Dt2, {DEFDATE},'','')
     
     do Format-DateTime ($Rpt_Start_Dt, $Rpt_Start_Dt2, {DEFDATE},'','') !SYD
    let $TITLE3 = $HD_MONTH || ' '||$Rpt_Start_Dt2||'-' || $Ctl_Curr_Pay_End_Dt2
    print $TITLE3      () center
 !else
    !print $TITLE2      () center
 end-if




!#DEBUG SHOW ' PAY ENTITY : '  $PyentDescr $PyentAddr $PyentCity $PyentState $PyentZip
if $Ctl_Comp_Report = 'Y'
        let $Departid = $Ctl_Deptid ! syed for 89b15
        do Departmentdescr 
        do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                        $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

        print $PYENT                 (+1,{colh0}) bold
        print $Pay_Entity            (0, +2)
       ! print $Company               (0,+4) Syed for 89b15
        print $HD_COMP_TOT           () center
        print $HD_SELECTION          (0, {colh2}) bold

        print $Cpdescr       (+1, {colh0})
        if #count_Emplid <> 0
           print $HD_EMPLID          (0,  {colh2})  bold
           print $Emplid-String      (0, +2)
        end-if

        print $Cpline2             (+1, {colh0})
        if $Ctl_PayGroup <> ''
           print $HD_PAYGROUP        (0,  {colh2})   bold
           print $Ctl_PayGroup       (0, +2)
        end-if
           print $HD_SECURITY        (0, {colh5})   bold
           print $Security_Type      (0, +2)

        print $Cpline3          (+1, {colh0})
        if $Ctl_Deptid <> ''
           print $HD_DEPT            (0,  {colh4})  bold
           print $Ctl_Deptid         (0, +2)
      !  else 
       !    print $HD_DEPT            (0,  {colh4})  bold
        !   print $Departid           (0, +4)  Syed for 89b15
           print $descrdept         (0,+8)
        end-if
        print $setid                 (0,34)

        if $Ctl_Location <> ''
           print $HD_LOCATION          (+1,  {colh2})  bold
           print $Ctl_Location         (0, +2)
        end-if

        print $Cpline31          (+1, {colh0})
        if #count_company <> 0
           print $PYENT                (+1,  {colh2})  bold
           print $Company-String       (0, +2)
        end-if

   print '_' (+1,1,192)fill  bold

   print $ELEM_DESCR    (+1, {colpm0}  )  bold
   print $JAN           ( 0, {colpm1}  )  bold
   print $FEB           ( 0, {colpm2}  )  bold
   print $MAR           ( 0, {colpm3}  )  bold
   print $APR           ( 0, {colpm4}  )  bold
   print $MAY           ( 0, {colpm5}  )  bold
   print $JUN           ( 0, {colpm6}  )  bold
   print $JUL           ( 0, {colpm7}  )  bold
   print $AUG           ( 0, {colpm8}  )  bold
   print $SEP           ( 0, {colpm9}  )  bold
   print $OCT           ( 0, {colpm10} )  bold
   print $NOV           ( 0, {colpm11} )  bold
   print $DEC           ( 0, {colpm12} )  bold
   print $TOTAL         ( 0, {colpm13} )  bold

   print '_' (+1,1,192)fill  bold

else
        !#DEBUG SHOW 'HIRE DT ' $Hiredt_HD  'TERM_DT ' $Termdt_HD
        let $EmplCode = rtrim($EmplId,' ')
        concat '-' with $EmplCode
        concat $Empl_Rcd with $EmplCode
        let $Full_Name = substr($Full_Name,1,37)

        print $PYENT                 (+2,{colh0}) bold
        print $Pay_Entity            (0, +2)
!FMB 20100922
        do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
        $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

        print $HD_EMPLID             (0, {colh2}) bold
        print $EmplCode              (0, +2)
        print $HD_LOCATION           (0, {colh4}) bold
        print $JB_LOC_DESCR          (0, {colh6_1})
        
        
        ! 0
        ! print $NNSS_LBL               (0, {colh9})  bold
        !  let $NNSS      = edit($NNSS,'XXX.XXXX.XXXX.XX')
        ! print $NNSS_P                 (0, {colh11}) ! EDIT XXX.XXXX.XXXX.XX
        
        
        ! 1
        print $HD_BIRTHDT            (0, {colh9}) bold
        print $Birthdt               (0, {colh11})

        print $HD_CURRENCY           (0, {colh12}) bold
        print $T_CURRENCY_CD         (0, {colh13})

        print $Cpdescr        (+1,{colh0})
       
        print $Full_Name              (0, {colh2})
        print $HD_JOBCODE             (0, {colh4})  bold
        print $JB_JOBCODE_DESCR       (0, {colh6_1})
        
        
        
        ! 2
       let $COVERED_NR_P = ''
       if rtrim($NNSS, ' ') <> ''
          let $COVERED_NR_P = substr($NNSS,1,3)||'.'||
          substr($NNSS,4,4)||'.'||
          substr($NNSS,8,4)||'.'||
          substr($NNSS,12,2)
       else
          if rtrim($AHVNum, ' ') <> ''
             let $COVERED_NR_P = substr($AHVNum,1,3)||'.'||
             substr($AHVNum,4,2)||'.'||
             substr($AHVNum,6,3)||'.'||
             substr($AHVNum,9,3)
          end-if
      end-if

        print $COVERED_NR            (0, {colh9})  bold
        print $COVERED_NR_P          (0, {colh11})
        
        print $HD_FTE                (0, {colh12}) bold
        print $FTE                   (0, {colh13})
        print $GPCH_RP_FTE_DT        (0, {colh14})
        

        print $Cpline2            (+1,{colh0})
        


        ! 3
        print $HD_SEX                (0, {colh9})   bold
        print $glob_sex_t            (0, {colh11})

        print $ADDLINE2              (0, {colh2})
        print $HD_HIREDT             (0, {colh4})   bold
        print $Hiredt_HD             (0, {colh6_1})


        print $HD_GRADE              (0, {colh12}) bold
        print $GRADE                 (0, {colh13})
        print $GRADE_ENT_DT          (0, {colh14})

        print $Cpline3            (+1, {colh0})
        print $ADDLINE3              (0,  {colh2})
        print $HD_TERMDT             (0, {colh4})   bold
        print $Termdt_HD             (0, {colh6_1})
        
        
        ! 4
        print $HD_NATION             (0, {colh9})   bold
        print $Nation                (0, {colh11})

        
        print $HD_YEARLY_LIMITS      (0, {colh12})  bold
        print $Yearly_Limit          (0, {colh15})
        print $HD_DEPT               (+1,  {colh4})  bold
        print $Departid              (0, +4)
        print $descrdept             (0,+1) !(0,+8)  syed for 89b15
        
        print $setid                 (0,34)      

        print $Cpline31            (+1, {colh0})
        print $ADDLINE31              (0,  {colh2})

        let $NNSS_P  = ''

!FMB always City and ZipCode as last line
        if $Cpline4 <> '' or $ADDLINE4 <> ''
         if $Cpline5 <> '' or $ADDLINE5 <> ''
           print $Cpline5          (+1, {colh0})
           print $ADDLINE5            (0,  {colh2})
         else
           print $Cpline4          (+1, {colh0})
           print $ADDLINE4            (0,  {colh2})
         end-if
        end-if

   print '_' (+1,1,188)fill bold

   print $ELEM_DESCR    (+1, {colm0}  )  bold
   print $JAN           ( 0, {colm1}  )  bold
   print $FEB           ( 0, {colm2}  )  bold
   print $MAR           ( 0, {colm3}  )  bold
   print $APR           ( 0, {colm4}  )  bold
   print $MAY           ( 0, {colm5}  )  bold
   print $JUN           ( 0, {colm6}  )  bold
   print $JUL           ( 0, {colm7}  )  bold
   print $AUG           ( 0, {colm8}  )  bold
   print $SEP           ( 0, {colm9}  )  bold
   print $OCT           ( 0, {colm10} )  bold
   print $NOV           ( 0, {colm11} )  bold
   print $DEC           ( 0, {colm12} )  bold
   print $TOTAL         ( 0, {colm13} )  bold

   print '_' (+1,1,188)fill  bold

end-if

end-heading
!****************************************************************************
begin-procedure Init-Report

  do Stdapi-Init
  do Security-Param

  if $prcs_process_instance = ''
    do Ask-Report-Parameters                !in Gpchut03.sqc
  else
    do Get-Report-Parameters                !in Gpchut06.sqc
    do Process-Get-Values
  end-if

  move 'GPCHTX06' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')
  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation


     if rtrim ($Sort1 || $Sort2 || $Sort3, ' ') <> ''

       let $Sort_Order = 'ORDER BY '

       if rtrim ($Sort1, ' ') <> ''
           concat $Sort1 with $Sort_Order
       end-if

       if (rtrim ($Sort2, ' ') <> '' and rtrim($Sort1, ' ') <>'')
          concat ',' with $Sort_Order
          concat $Sort2 with $Sort_Order
       else
          concat $Sort2 with $Sort_Order
       end-if

       if (rtrim ($Sort3, ' ') <> '' and (rtrim($Sort1, ' ') <>'' or rtrim($Sort2, ' ') <>''))
           concat ',' with $Sort_Order
           concat $Sort3 with $Sort_Order
       else
           concat $Sort3 with $Sort_Order
       end-if
     end-if

      if rtrim ($Sort_Order, ' ') <> ''
         concat ', PBD.HIRE_DT DESC ' with $Sort_Order
      else
         concat 'ORDER BY PBD.EMPLID ,PBD.EMPL_RCD, PBD.HIRE_DT DESC '  with $Sort_Order !syed for 89 b15
      end-if
     #Debug Show 'Sort Order : ' $Sort_Order
     !--------------------------------------------------------------------

  !SYED
  
  if $PR_Year_Option = 'Y'
  if $Detailed = 'J'
!FMB 20100921
!    if $Ctl_Comp_Report = 'Y'
     let $ReportTitle = $TITLE3 || ' ' || rtrim($Ctl_Year,' ') 
!    else
!     let $ReportTitle = $TITLE3 || ' ' || rtrim($Ctl_Year,' ') || ' Rekapitulation Total Firma falsch '
!    End-If
  else
     let $ReportTitle = $TITLE1 || ' ' || rtrim($Ctl_Year,' ')
  end-if
  End-If
  if $PR_Year_Option = 'N'
   if $Detailed = 'J'
       If rtrim($yy11,' ') <> rtrim($yy22,' ')
     let $ReportTitle = $TITLE3 || ' ' || rtrim($yy11,' ')||'-'||rtrim($yy22,' ')
      else
         let $ReportTitle = $TITLE3 || ' ' || rtrim($yy11,' ')
          End-If
  else
          If rtrim($yy11,' ') <> rtrim($yy22,' ')
     let $ReportTitle = $TITLE1 || ' ' || rtrim($yy11,' ')||'-'||rtrim($yy22,' ')
         else 
            let $ReportTitle = $TITLE1 || ' ' || rtrim($yy11,' ')
          End-if
  end-if
  End-If
  !#debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report
!****************************************************************************
Begin-Procedure Report-Translation
  do Get_Field_Information ('GPCHGLOB', 'EMPLID',        $HD_EMPLID, #CW)
  do Get_Field_Information ('GPCHGLOB', 'BIRTHDATE',     $HD_BIRTHDT,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HIRE_DT',       $HD_HIREDT, #CW)
  do Get_Field_Information ('GPCHGLOB', 'TERMINATION_DT',$HD_TERMDT, #CW)
  do Get_Field_Information ('GPCHGLOB', 'PRINTCLASS',    $PRINTCLASS, #CW)
  do Get_Field_Information ('GPCHGLOB', 'PYENT',         $PYENT     , #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_JOBCODE',    $HD_JOBCODE, #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_LOCATION',   $HD_LOCATION,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_NATION',     $HD_NATION  ,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SEX',        $HD_SEX     ,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_COMP_TOT',   $HD_COMP_TOT,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MONATSUM',   $HD_MONATSUM,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SELECTION',  $HD_SELECTION,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_PAYGROUP',   $HD_PAYGROUP,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_DEPT'    ,   $HD_DEPT,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SELECTION',  $HD_SELECTION,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FROM',       $HD_FROM,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_CURRENCY',   $HD_CURRENCY,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_MONTH',      $HD_MONTH,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FTE',        $HD_FTE,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_GRADE',      $HD_GRADE,#CW)
  do Get_Field_Information ('GPCHGLOB', 'YEARLY_LIMITS', $HD_YEARLY_LIMITS,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_YES',        $HD_YES, #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_NO',         $HD_NO, #CW)

  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',     $LG_PINNM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'GRADE_SINCE',       $HD_GRADE_SINCE,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'TO_STR',       $HD_TO_STR,   #CW)


  do Get_Field_Information ('GPCHTX06', 'NORMAL',        $Normal,#CW)
  do Get_Field_Information ('GPCHTX06', 'DETAIL',        $Detail,#CW)
  do Get_Field_Information ('GPCHTX06', 'LAYOUT',        $LAYOUT,#CW)
  do Get_Field_Information ('GPCHTX06', 'AHV_NUMBER',    $AHV_NUMBER,#CW)
  do Get_Field_Information ('GPCHTX06', 'COVERED_NR',    $COVERED_NR, #CW)
  do Get_Field_Information ('GPCHTX06', 'NNSS',          $NNSS_LBL,#CW)
  do Get_Field_Information ('GPCHTX06', 'TITLE1',        $TITLE1,    #CW)
  do Get_Field_Information ('GPCHTX06', 'TITLE2',        $TITLE2,    #CW)
  do Get_Field_Information ('GPCHTX06', 'TITLE3',        $TITLE3,    #CW)
  do Get_Field_Information ('GPCHTX06', 'TOTAL ',        $TOTAL,     #CW)
  do Get_Field_Information ('GPCHTX06', 'ELEM_DESCR',    $ELEM_DESCR,#CW)
  do Get_Field_Information ('GPCHTX06', 'JAN',           $JAN,       #CW)
  do Get_Field_Information ('GPCHTX06', 'FEB',           $FEB,       #CW)
  do Get_Field_Information ('GPCHTX06', 'MAR',           $MAR,       #CW)
  do Get_Field_Information ('GPCHTX06', 'APR',           $APR,       #CW)
  do Get_Field_Information ('GPCHTX06', 'MAY',           $MAY,       #CW)
  do Get_Field_Information ('GPCHTX06', 'JUN',           $JUN,       #CW)
  do Get_Field_Information ('GPCHTX06', 'JUL',           $JUL,       #CW)
  do Get_Field_Information ('GPCHTX06', 'AUG',           $AUG,       #CW)
  do Get_Field_Information ('GPCHTX06', 'SEP',           $SEP,       #CW)
  do Get_Field_Information ('GPCHTX06', 'OCT',           $OCT,       #CW)
  do Get_Field_Information ('GPCHTX06', 'NOV',           $NOV,       #CW)
  do Get_Field_Information ('GPCHTX06', 'DEC',           $DEC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRGUPD',       $LG_PRGUPD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EMPPROC',      $LG_EMPPROC,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_SECURITY',     $HD_SECURITY,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'RESLN', $RESLN_ID, #CW)
  do Get_Field_Information ('GPCHGLOB', 'PROCS_INST', $PROCS_NO, #CW)

end-Procedure Report-Translation
!****************************************************************************
begin-procedure Get-Values
 
   let $language_cd         = $PRCS_LANGUAGE_CD
   let $Detailed            = rtrim(&GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO,' ')
   let $PR_Pay_Entity       = rtrim(&GPCH_RUN_CNTL.PAY_ENTITY,' ')
   let $PR_Year_Option      = rtrim(&GPCH_RUN_CNTL.GPCH_RC_YEAR_OPT,' ') !Yearly or Monthly Report
   let $Ctl_Curr_Pay_End_Dt = rtrim(&GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT, ' ')
   let $Print_Option        = rtrim(&GPCH_RUN_CNTL.GPCH_RC_TX6_PRT,' ')

end-procedure Get-Values
!****************************************************************************
begin-procedure Process-Get-Values

   if  $PR_Year_Option = 'Y'                     ! If Yearly report is requested
       ! To get the begin date and end date of the Year for Yearly Report.
       let $CMP_Start_Dt = $Ctl_Year || '01' || '01' || '0000'
       let $CMP_End_Dt   = $Ctl_Year || '12' || '31' || '0000'
       do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
       do Format-DateTime($CMP_end_Dt , $out2, {DEFCMP},'','native')
       let $Rpt_Start_Dt        = rtrim($out, ' ')
       let $Rpt_End_Dt          = rtrim($out2, ' ')
       let $Ctl_Curr_Pay_End_Dt = $Rpt_End_Dt
       #Debug show 'Yearly Report Start date : ' $Rpt_Start_Dt ' , Report End Date :'  $Rpt_End_Dt
   else
       ! To get the Begin Date of the Year for Monthly Report
      ! SYED do Convert-to-DTU-DATE($Ctl_Curr_Pay_End_Dt,$DTU_end_dt)
       ! SYED do Dtu-year-Begin($DTU_end_dt,$DTU_monthbegin)
       !SYED do Convert-From-DTU-DATE($DTU_monthbegin,$Rpt_Start_Dt)  !Start Date of the Year
       !SYED let $Rpt_End_Dt   =  $Ctl_Curr_Pay_End_Dt           !Date for Monthly Report
       !SYED do Convert-to-DTU-DATE($Ctl_Curr_Pay_End_Dt,$DTU_end_dt)
       !SYED do Dtu-year-End($DTU_end_dt,$DTU_monthend)
       
    ! SYED do Convert-From-DTU-DATE($DTU_monthend,$Rpt_Rto_Dt) !Date for Delta Calculation Year End Date
      ! SYED #Debug show 'Monthly Report Start date : ' $Rpt_Start_Dt ' , Report End Date :'  $Rpt_End_Dt ' , Retro Date : ' $Rpt_Rto_Dt
              
      let $CMP_Start_Dt = $Start_Date
      let $CMP_End_Dt   = $Last_Date
      ! SYED do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
      ! SYED  do Format-DateTime($CMP_end_Dt , $out2, {DEFCMP},'','native')
       let $Rpt_Start_Dt        = rtrim($CMP_Start_Dt, ' ')
       let $Rpt_End_Dt          = rtrim($CMP_End_Dt, ' ')
       let $Ctl_Curr_Pay_End_Dt = $Rpt_End_Dt
      !SYED
         do ConvertToComponents($Rpt_Start_Dt ,$yy11,$mm11,$dd11)
         do ConvertToComponents($Rpt_End_Dt ,$yy22,$mm22,$dd22)
       #Debug show 'Yearly Report Start date : ' $Rpt_Start_Dt ' , Report End Date :'  $Rpt_End_Dt
        
   end-if
   let $Company_Crit_PS     = ' AND PS.COMPANY   = ''' || $Ctl_PayEntity || ''' '
     
   do Get-Data
   do Get_Pin_Description

   let $Company_Dt = $Ctl_Curr_Pay_End_Dt
   let $Ctl_Addr_Effdt = $Ctl_Curr_Pay_End_Dt
   do Get-PayEntity-Company

end-procedure Process-Get-Values

!*************************************************************************
begin-procedure Process-Main
#DEBUG show '-> Process-Main'
!#DEBUG SHOW  '$Ctl_Comp_Report : ' $Ctl_Comp_Report  ' PayEntity : ' $Ctl_PayEntity
   
   do Get-Percent-Print-Design
   do Get-Zero-Pins
   do Get-Max-Curr-Dt
   do Get-Pin-Info-array
   do Get-Business-Unit

   if $Ctl_Comp_Report = 'Y'
      let $Pay_Entity = $Ctl_PayEntity
      do Get-PayEntity-Balance-Normal
      do Get-PayEntity-Balance-Retro
      do Get-Pin-Info
   else
      let $Ctl_Comp_Report = 'N'
      do Get-Employee-Report

            if $Emplid_Criteria_PS = ' '
              new-page
              let $Ctl_Comp_Report = 'Y'
              do Get-PayEntity-Balance-Normal
              do Get-PayEntity-Balance-Retro
              do Get-Pin-Info
            end-if
   end-if

    let $reportend_time = datenow()

 Do Append-Log ('Report Begin & SQC Begin   '   , $begin_time)
 Do Append-Log ('SQC End & Processing Begin '   , $end_time )
 Do Append-Log ('Processing & Report End    '   , $reportend_time)
 Do Append-Log(' ',' ')
 Do Append-Log('----------------------------- ' , '------------------------------' )

#DEBUG show '<- Process-Main'
end-procedure Process-Main
!*************************************************************************
begin-procedure Get-Percent-Print-Design
#Debug Show '-> Get-Percent-Print-Design  '

create-array name=perdesign size=50
  field=PINNUM:number

  let #perdsgn = 0

Begin-Select on-error=give_warning
PC.PIN_MBR_NUM

    let #Pin_Mbr_Num = &PC.PIN_MBR_NUM
    put #Pin_Mbr_Num INTO perdesign(#perdsgn) PINNUM
    let #perdsgn = #perdsgn + 1

FROM PS_GP_ACM_MBR PC,PS_GP_PIN PCM
WHERE PCM.PIN_NUM = PC.PIN_NUM
AND   (PCM.PIN_NM  = 'CH_RP_2DEC' OR PCM.PIN_NM  = 'CH_RP_C2DEC')
End-Select

#Debug Show '-> Get-Percent-Print-Design '
end-procedure Get-Percent-Print-Design

!*************************************************************************
begin-procedure Get-Zero-Pins
#Debug Show '-> Get-Zero-Pins  '

create-array name=pinzero size=50
  field=PINNUM:number

  let #pzero = 0

Begin-Select on-error=give_warning
PZ.PIN_MBR_NUM

    let #Pin_Mbr_Num = &PZ.PIN_MBR_NUM
    put #Pin_Mbr_Num INTO pinzero(#pzero) PINNUM
    let #pzero = #pzero + 1

FROM PS_GP_ACM_MBR PZ,PS_GP_PIN PZM
WHERE PZM.PIN_NUM = PZ.PIN_NUM
AND  (PZM.PIN_NM  = 'CH_RP_ZERO' OR PZM.PIN_NM  = 'CH_RP_CZERO')
End-Select

#Debug Show '-> Get-Zero-Pins  '
end-procedure Get-Zero-Pins

!*************************************************************************
begin-procedure Get-Pin-Info-array
#debug show '-> Get-Pin-Info-array '


create-array name=pininfo size={SQR_Strings_Array_Size}
  field=PINNUM:number
  field=PERCENT:char
  field=PERCENTOTHER:char
  field=ZERO:char
  field=RATE:char
  field=SIGN:number
  field=PDESC:char
  field=PNAME:char

  let #infocnt = 0

Begin-Select  DISTINCT on-error=give_warning
B.PIN_NUM
B.GPCH_BL_PR_PERCENT    &B.GPCH_BL_PR_PERCENT
B.GPCH_BL_PR_RATE       &B.GPCH_BL_PR_RATE
B.GPCH_AL_SIGNVALUE     &B.GPCH_AL_SIGNVALUE
B.GPCH_BL_PR_GROUP
B.GPCH_BL_PR_ORDER

    let #Main_Pin           = &B.PIN_NUM
    let $GPCH_BL_PR_PERCENT = &B.GPCH_BL_PR_PERCENT
    let $GPCH_BL_PR_RATE    = &B.GPCH_BL_PR_RATE
    let #SIGNVALUE          = &B.GPCH_AL_SIGNVALUE

    let $GPCH_BL_PR_ZERO    = 'N'
    let #pi = 0
    While #pi < #pzero
        get #Pin_Mbr   from pinzero(#pi)PINNUM
        if  #Main_Pin = #Pin_Mbr
              let $GPCH_BL_PR_ZERO = 'Y'
        end-if
        Add 1 to #pi
    End-While

    let $GPCH_BL_PR_PERCENTOTHER    = 'N'
    let #si = 0
    While #si < #perdsgn
        get #Pin_Mbr_P   from perdesign(#si)PINNUM
        if  #Main_Pin = #Pin_Mbr_P
            let $GPCH_BL_PR_PERCENTOTHER    = 'Y'
            let $Print_Mask = 'B999999.99mi'
        end-if
        Add 1 to #si
    End-While

    Lookup Get_Base_Pin_Descr #Main_Pin $Return_Val
    if Not Isnull ($Return_Val)
          Unstring $Return_Val by ';' into $Pin_Nm $PinDescr
          let $PinDescr           =  rtrim($PinDescr,' ')
          let $Pin_Nm             =  rtrim($Pin_Nm,' ')
    end-if


    if $BASE_LANG <> $language_cd
          Lookup Get_Trans_Pin_Descr #Main_Pin $Return_Val
          if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              Unstring $Return_Val by ';' into $Pin_Nm $PinDescr
              let $PinDescr           =  rtrim($PinDescr,' ')
              let $Pin_Nm             =  rtrim($Pin_Nm,' ')
           end-if
    end-if


    put #Main_Pin                INTO pininfo(#infocnt) PINNUM
    put $GPCH_BL_PR_PERCENT      INTO pininfo(#infocnt) PERCENT
    put $GPCH_BL_PR_PERCENTOTHER INTO pininfo(#infocnt) PERCENTOTHER
    put $GPCH_BL_PR_ZERO         INTO pininfo(#infocnt) ZERO
    put $GPCH_BL_PR_RATE         INTO pininfo(#infocnt) RATE
    put #SIGNVALUE               INTO pininfo(#infocnt) SIGN
    put $PinDescr                INTO pininfo(#infocnt) PDESC
    put $Pin_Nm                  INTO pininfo(#infocnt) PNAME

    let #infocnt = #infocnt + 1


FROM  PS_GPCH_BL_PRINT B , PS_GPCHTX061_TMP A
WHERE A.PROCESS_INSTANCE   = #prcs_process_instance
AND   A.PIN_NUM            = B.PIN_NUM
AND   B.GPCH_RC_REPORTNAME = $Ctl_Print
AND   B.EFF_STATUS         = 'A'
ORDER BY B.GPCH_BL_PR_GROUP ,B.GPCH_BL_PR_ORDER
End-Select

let #max_info = #infocnt + 1

!#debug show #max_info

#debug show '<- Get-Pin-Info-array '
end-procedure Get-Pin-Info-array
!****************************************
begin-procedure Get-Emp-Balance-Normal
#DEBUG show '-> Get-Emp-Balance-Normal' $Emplid ' , ' #Empl_Rcd_Nbr  ' , ' $Hire_Term_Crit
let #Norcnt = 0
clear-array name=EmpBalNR
create-array name=EmpBalNR size={EmpBalNR_Array_Size}
  field=NRPINNUM:number
  field=NRINSTANCE:number
  field=NRPRDDT:char
  field=NRAMT:number

begin-SELECT on-error=give_warning
J.PIN_NUM           &NR_PINNUM
J.INSTANCE          &NR_INSTANCE
J.CALC_RSLT_VAL     &GPCH_BL_AMT = NUMBER
J.PRD_END_DT        &PRD_END_DT2

    let #Bal_Amount_NR = &GPCH_BL_AMT
    let $PRD_END_DT    = &PRD_END_DT2
    do ConvertToComponents(&PRD_END_DT2,$nr_yy,$nr_mm,$nr_dd)


    put &NR_PINNUM          INTO EmpBalNR(#Norcnt) NRPINNUM
    put &NR_INSTANCE        INTO EmpBalNR(#Norcnt) NRINSTANCE
    put $nr_mm              INTO EmpBalNR(#Norcnt) NRPRDDT
    put #Bal_Amount_NR      INTO EmpBalNR(#Norcnt) NRAMT


    let #Norcnt = #Norcnt + 1


FROM PS_GPCHTX061_TMP J
WHERE J.PROCESS_INSTANCE   = #prcs_process_instance
AND   J.EMPLID             = $Emplid
AND   J.EMPL_RCD           = #Empl_Rcd_Nbr
AND   J.PRD_END_DT         = J.GPCH_AL_CPAY_ENDDT
[$Hire_Term_Crit]
ORDER BY J.PIN_NUM,J.INSTANCE,J.PRD_END_DT
end-SELECT

let #max_nr = #Norcnt -1

!#debug show #max_nr


#DEBUG show '<- Get-Emp-Balance-Normal'
end-procedure Get-Emp-Balance-Normal
!***********************************************
begin-procedure Get-Emp-Balance-Retro
#DEBUG show '-> Get-Emp-Balance-Retro' $Emplid ' , ' #Empl_Rcd_Nbr  ' , ' $Hire_Term_Crit_Retro
let #Rtcnt = 0   ! to count the number of retro rows for a employee.
clear-array name=EmpBalRT
create-array name=EmpBalRT size={EmpBalRT_Array_Size}
  field=RTPINNUM:number
  field=RTINSTANCE:number
  field=RTCURDT:char
  field=RTAMT:number
  field=RTPRDDT:char
  field=RTCURYR:char



begin-SELECT on-error=give_warning
JR.PIN_NUM                &RT_PINNUM
JR.INSTANCE               &RT_INSTANCE
JR.GPCH_AL_CPAY_ENDDT     &JR.GPCH_AL_CPAY_ENDDT
JR.CALC_RSLT_VAL          &GPCH_BL_AMT3 = NUMBER
JR.PRD_END_DT             &PRD_END_DT3

    let #Bal_Amount_T3       = &GPCH_BL_AMT3
    let #RT_INSTANCE         = &RT_INSTANCE
    do ConvertToComponents(&JR.GPCH_AL_CPAY_ENDDT,$rt_cyy,$rt_cmm,$rt_cdd)
    do ConvertToComponents(&PRD_END_DT3,$rt_yy,$rt_mm,$rt_dd)

    put &RT_PINNUM          INTO EmpBalRT(#Rtcnt) RTPINNUM
    put #RT_INSTANCE        INTO EmpBalRT(#Rtcnt) RTINSTANCE
    put $rt_cmm             INTO EmpBalRT(#Rtcnt) RTCURDT
    put #Bal_Amount_T3      INTO EmpBalRT(#Rtcnt) RTAMT
    put $rt_mm              INTO EmpBalRT(#Rtcnt) RTPRDDT
    put $rt_cyy             INTO EmpBalRT(#Rtcnt) RTCURYR

   ! #debug show ' Putting -----> '  &RT_PINNUM ' , ' $rt_cmm ' , ' #Bal_Amount_T3 ' , ' $rt_mm

    let #Rtcnt = #Rtcnt + 1


FROM PS_GPCHTX061_TMP JR
WHERE JR.PROCESS_INSTANCE   = #prcs_process_instance
AND   JR.EMPLID             = $Emplid
AND   JR.EMPL_RCD           = #Empl_Rcd_Nbr
AND   JR.PRD_END_DT         <> JR.GPCH_AL_CPAY_ENDDT
[$Hire_Term_Crit_Retro]
ORDER BY JR.PIN_NUM,JR.GPCH_AL_CPAY_ENDDT,JR.INSTANCE,JR.PRD_END_DT
End-Select

let #max_rt = #Rtcnt -1

#DEBUG show '<- Get-Emp-Balance-Retro'
end-procedure Get-Emp-Balance-Retro
!***********************************************
begin-procedure Get-PayEntity-Balance-Normal
#DEBUG show '-> Get-PayEntity-Balance-Normal'
let #Norcnt = 0
clear-array name=P_EmpBalNR
create-array name=P_EmpBalNR size={EmpBalNR_Array_Size}
  field=NRPINNUM:number
  field=NRPRDDT:char
  field=NRAMT:number

begin-SELECT on-error=give_warning
JP.PIN_NUM               &P_NR_PINNUM
SUM(JP.CALC_RSLT_VAL)    &P_GPCH_BL_AMT = NUMBER
JP.PRD_END_DT            &P_PRD_END_DT2


    let #Bal_Amount_NR = &P_GPCH_BL_AMT
    let $PRD_END_DT    = &P_PRD_END_DT2
    do ConvertToComponents(&P_PRD_END_DT2,$nr_yy,$nr_mm,$nr_dd)


    put &P_NR_PINNUM        INTO P_EmpBalNR(#Norcnt) NRPINNUM
    put $nr_mm              INTO P_EmpBalNR(#Norcnt) NRPRDDT
    put #Bal_Amount_NR      INTO P_EmpBalNR(#Norcnt) NRAMT


    let #Norcnt = #Norcnt + 1


FROM PS_GPCHTX061_TMP JP
WHERE JP.PROCESS_INSTANCE   = #prcs_process_instance
AND   JP.PRD_END_DT         = JP.GPCH_AL_CPAY_ENDDT
GROUP BY JP.PIN_NUM,JP.PRD_END_DT
ORDER BY JP.PIN_NUM,JP.PRD_END_DT
end-SELECT

let #max_nr = #Norcnt -1

#DEBUG show '<- Get-PayEntity-Balance-Normal'
end-procedure Get-PayEntity-Balance-Normal
!***********************************************
begin-procedure Get-PayEntity-Balance-Retro
#DEBUG show '-> Get-PayEntity-Balance-Retro'
let #Rtcnt = 0   ! to count the number of retro rows for a employee.
clear-array name=P_EmpBalRT
create-array name=P_EmpBalRT size={EmpBalRT_Array_Size}
  field=RTPINNUM:number
  field=RTCURDT:char
  field=RTAMT:number
  field=RTPRDDT:char
  field=RTCURYR:char



begin-SELECT on-error=give_warning
JRP.PIN_NUM                &P_RT_PINNUM
JRP.GPCH_AL_CPAY_ENDDT     &P_JRP.GPCH_AL_CPAY_ENDDT
SUM(JRP.CALC_RSLT_VAL)     &P_GPCH_BL_AMT3 = NUMBER
JRP.PRD_END_DT             &P_PRD_END_DT3


    let #Bal_Amount_T3       = &P_GPCH_BL_AMT3

    do ConvertToComponents(&P_JRP.GPCH_AL_CPAY_ENDDT,$rt_cyy,$rt_cmm,$rt_cdd)
    do ConvertToComponents(&P_PRD_END_DT3,$rt_yy,$rt_mm,$rt_dd)


    put &P_RT_PINNUM        INTO P_EmpBalRT(#Rtcnt) RTPINNUM
    put $rt_cmm             INTO P_EmpBalRT(#Rtcnt) RTCURDT
    put #Bal_Amount_T3      INTO P_EmpBalRT(#Rtcnt) RTAMT
    put $rt_mm              INTO P_EmpBalRT(#Rtcnt) RTPRDDT
    put $rt_cyy             INTO P_EmpBalRT(#Rtcnt) RTCURYR

    !#debug show ' Putting -----> '  &RT_PINNUM ' , ' $rt_cmm ' , ' #Bal_Amount_T3 ' , ' $rt_mm

    let #Rtcnt = #Rtcnt + 1


FROM PS_GPCHTX061_TMP JRP
WHERE JRP.PROCESS_INSTANCE   = #prcs_process_instance
AND   JRP.PRD_END_DT         <> JRP.GPCH_AL_CPAY_ENDDT
GROUP BY JRP.PIN_NUM,JRP.GPCH_AL_CPAY_ENDDT,JRP.PRD_END_DT
ORDER BY JRP.PIN_NUM,JRP.GPCH_AL_CPAY_ENDDT,JRP.PRD_END_DT
End-Select

let #max_rt = #Rtcnt -1

!#debug show #max_rt


#DEBUG show '<- Get-PayEntity-Balance-Retro'
end-procedure Get-PayEntity-Balance-Retro
!***********************************************
begin-procedure Get-Employee-Report
#DEBUG show '-> Get-Employee-Report'  $Rpt_Start_Dt ' , ' $Rpt_End_Dt

 Do Append-Log ('Full Year Cal_Run_Id    '   , $Cal_Run_Id_Criteria)
 Do Append-Log(' ',' ')
 Do Append-Log('----------------------------- ' , '------------------------------' )

let $OLD_Emplid   = ' '
let #LG_Emp_count = 0
let $Old_Company  = ' '
let $Old_EmployeeBreak = ' '

let $Security_Where_Aux = replace($Security_Where,'SS.','PBD.')
let $Security_Effdt_Aux = replace($Security_Effdt,'PS.','PBD.')

begin-SELECT DISTINCT on-error=give_warning
#ifdef ORACLE
/*+ INDEX(PBD PS_GPCH_RP_0001)*/
#endif
PBD.EMPLID
PBD.EMPL_RCD
PBD.PAY_ENTITY
PBD.SEX
PBD.BIRTHDATE
PBD.HIRE_DT
PBD.CURRENCY_CD
R.FTE
R.GRADE
R.GRADE_ENTRY_DT
R.GPCH_RP_FTE_DT
PBD.NATIONAL_ID
PBD.GPCH_AH_NNSS
PBD.COUNTRY
PBD.COMPANY
PBD.GPCH_SI_YEAR
PBD.DEPTID
PBD.LOCATION
PBD.GP_PAYGROUP
PD.NAME
PBD.SETID_LOCATION

   let $EmployeeBreak = rtrim(&PBD.EMPLID,' ') || to_char(&PBD.EMPL_RCD) || &PBD.HIRE_DT

   print $EmployeeBreak () on-break level = 1 procedure=New-Employee Print=Never

  !------------------------------------------------------------------------
   let $Hiredt        = &PBD.HIRE_DT
   let $Hiredt_t      = &PBD.HIRE_DT
   let $Termdt        = $Rpt_End_Dt   ! To take care of normal case and First last chunck
   let $Emplid        = &PBD.EMPLID
   do Format-Number (&PBD.EMPL_RCD, $Empl_Rcd, '999')
   let $Empl_Rcd      = ltrim($Empl_Rcd,' ')
   let #Empl_Rcd_Nbr  = &PBD.EMPL_RCD
   let $T_CURRENCY_CD = &PBD.CURRENCY_CD
   let $Yearly_Limit  = rtrim(&PBD.GPCH_SI_YEAR,' ')
   let $Departid      = &PBD.DEPTID 
   let $Setid         = &PBD.SETID_LOCATION
   
   if $Yearly_Limit = 'Y'
      let $Yearly_Limit = $HD_YES
   else
      let $Yearly_Limit = $HD_NO
   end-if
       !#DEBUG SHOW '    BEFORE HIRE  : ' $Hiredt  '  TERM : ' $Termdt  ' EMPLID :' $EmplId 'Empl_Rec :' #Empl_Rcd_Nbr
   if  ($EmplId = $OLD_Emplid) AND ($Hiredt <> $OLD_Hiredt)   !To signify Hire and Rehire
        let $Termdt = $OLD_Hiredt
        do Get-Previous-Day
   end-if

   let $OLD_Emplid = $Emplid
   let $OLD_Hiredt = $Hiredt
   let #fte          = &R.FTE * 100
   
   do Format-Number(#fte,$FTE,'999.99')
   
   let $Grade        = rtrim(&R.GRADE,' ')
   let $FTE          = ltrim($FTE,' ')
   let $Nation       = rtrim(&PBD.COUNTRY,' ')
   let $AHVNum       = &PBD.NATIONAL_ID
!   let $NNSS         = &PBD.GPCH_AH_NNSS
   let $NNSS = rtrim(ltrim(&PBD.GPCH_AH_NNSS,' '),' ')
   let $glob_sex     = rtrim(&PBD.SEX,' ')
   
   do Format-DateTime(&PBD.BIRTHDATE, $Birthdt, {DEFDATE},'','')
   do Format-DateTime(&R.GRADE_ENTRY_DT, $GRADE_ENT_DT, {DEFDATE}, '', '')
   do Format-DateTime(&R.GPCH_RP_FTE_DT, $GPCH_RP_FTE_DT, {DEFDATE}, '', '')
   do Departmentdescr

   if  $Nation = ''
              let $Nation = 'CHE'
   end-if
   
 
   #debug show $EmplId ' , ' $Birthdt ' , ' $GRADE_ENT_DT ' , ' $GPCH_RP_FTE_DT ' , ' $Grade ' , ' $FTE ' , ' $Nation ' , ' $AHVNum  ' , ' $NNSS ' , ' #fte ' , ' $glob_sex
   
   let $Pay_Entity   = &PBD.PAY_ENTITY
   let $Company      = rtrim(&PBD.COMPANY,' ')
   
   if  $Ctl_PayEntity = ''
                  let $Ctl_PayEntity = $Pay_Entity
   end-if
   
   
   if $Old_Company <> $Company
       
             do Get-Company-Address-Array($Company,$Cpline1,$Cpline2,$Cpline3,$Cpline31,$Cpline4,$Cpline5,$Cpline6,
                                   $Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$Busn_Phone,$Fax_Phone,$Otr_Phone)
   end-if
   
       let $Old_Company = $Company



  !--------------------------------------------------------------------------

   if $EmployeeBreak <> $Old_EmployeeBreak
     
       let #LG_Emp_count = #LG_Emp_count + 1
       do Employee-Log
       !$EmployeeBreak #DEBUG SHOW '    AFTER HIRE  : ' $Hiredt  '  TERM : ' $Termdt  ' EMPLID :' $EmplId
       do Get-Hire-Term-date
       do Get-Emp-Balance-Normal
       do Get-Emp-Balance-Retro

       !------------------------------------------------------------------------

       do Format-DateTime (&PBD.HIRE_DT,$Hiredt_HD, {DEFDATE}, '', '')
       do Get-Termination-Date
       do Format-DateTime ($TERM_DT,$Termdt_HD, {DEFDATE}, '', '')
      

       do Get-Emp-Address($Emplid,$Ctl_Curr_Pay_End_Dt,'HOME',$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,
                           $ADDLINE4,$ADDLINE5,$ADDLINE6,$Full_Name,$FirstName,$LastName,
                           $NAME_PREFIX,$NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$Phone,
                           $Email,$CITY,$STATE,$POSTAL)

       

       do Get-Translate-Value
       do Get-Description-Job
       do Get-Pin-Info   ! Pin Data
       do init-sum
       do Init-Monthly-sum

   end-if

   let  $Old_EmployeeBreak = $EmployeeBreak

FROM  PS_GPCH_RP_0001 PBD,{Record_Person} PD,PS_GPCH_RP_0001 R [$Record_Security]
WHERE PBD.EMPLID = PD.EMPLID 
AND   PBD.SLICE_END_DT BETWEEN $Rpt_Start_Dt AND $Rpt_End_Dt
#ifdef ORACLE
AND   PBD.GPCH_AL_CPAY_ENDDT = (SELECT /*+ INDEX(PBD1 PS_GPCH_RP_0001)*/ MAX(PBD1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_0001 PBD1
#else
AND   PBD.GPCH_AL_CPAY_ENDDT = (SELECT MAX(PBD1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_0001 PBD1
#endif
                                WHERE PBD1.EMPLID       = PBD.EMPLID
                                AND   PBD1.EMPL_RCD     = PBD.EMPL_RCD
                                AND   PBD1.SLICE_END_DT = PBD.SLICE_END_DT)
and R.EMPLID = PBD.EMPLID
and R.EMPL_RCD = PBD.EMPL_RCD
and R.COMPANY = PBD.COMPANY
and R.SLICE_END_DT = (  select max(R1.SLICE_END_DT) 
                        from PS_GPCH_RP_0001 R1
                        where R.EMPLID = R1.EMPLID 
                        and R.EMPL_RCD = R1.EMPL_RCD
                        and R.COMPANY = R1.COMPANY and R1.SLICE_END_DT <= $Rpt_End_Dt
                        and   R1.GPCH_AL_CPAY_ENDDT = (select max(R2.GPCH_AL_CPAY_ENDDT) 
                                                        from PS_GPCH_RP_0001 R2
                                                        where R1.EMPLID = R2.EMPLID 
                                                        and R1.EMPL_RCD = R2.EMPL_RCD 
                                                        and R1.GP_PAYGROUP = R2.GP_PAYGROUP
                                                        and  R1.CAL_ID = R2.CAL_ID 
                                                        and R1.RSLT_SEG_NUM = R2.RSLT_SEG_NUM )) 

[$Security_Where_Aux]
[$SecurityClause]
[$Security_Effdt_Aux]

[$Emplid_Criteria]
[$PayEntity_Crit]
[$Cal_Run_Id_Criteria]
[$Company_Criteria]
[$Dept_Crit]  ! syed 89 b15
[$BusinessUnit_Crit]
[$Sort_Order]


end-SELECT
 
#DEBUG show '<- Get-Employee-Report'
end-procedure  Get-Employee-Report


!**********************************************
begin-procedure Departmentdescr

BEGIN-SELECT on-error=give_warning
A.DESCR  &descr_dept
  
 let $descrdept=rtrim(&descr_dept,'')

FROM PS_DEPT_TBL  A
WHERE A.DEPTID=$Departid
end-SELECT
end-procedure Departmentdescr

!***********************************************

begin-procedure Get-Translate-Value

  move 'SEX' to $FieldName

  move $glob_sex to $FieldValue

  do Read-Translate-Table
  let $glob_sex_t = rtrim(ltrim($XlatlongName,' '),' ')


end-procedure Get-Translate-Value

!****************************************************************************

begin-procedure Get-Previous-Day
#DEBUG show '-> Get-Previous-Day'
   do Convert-To-DTU-Date($Termdt,$Termdt)
   do dtu-subtract-days($Termdt, 1, $Termdt)
   do Convert-From-DTU-Date($Termdt,$Termdt)
#DEBUG show '<- Get-Previous-Day'
end-procedure Get-Previous-Day

!**********************************************
begin-procedure Get-Business-Unit
#DEBUG show '-> Get-Business-Unit'

BEGIN-SELECT DISTINCT on-error=give_warning
#ifdef ORACLE
/*+ INDEX(PS PS_GPCH_RP_0001)*/
#endif
PS.BUSINESS_UNIT &Temp_BusUnit

  let $TempBusUnit = rtrim(&Temp_BusUnit,' ')

   if $TempBusUnit <> ''
      let $temp-value = rtrim($TempBusUnit,' ')
      let $Business-Unit-String = $Business-Unit-String || '''' || $temp-value || '''' || ','
   end-if

FROM PS_GPCH_RP_0001 PS
WHERE PS.PAY_ENTITY = $PR_Pay_Entity
[$Emplid_Criteria_PS]
[$PayGroup_Crit_PS]
[$Location_Crit_PS]
[$Dept_Crit_PS]
[$Cal_Run_Id_Criteria_PS]
END-SELECT

   let $Business-Unit-String    = rtrim($Business-Unit-String,',')

   if  $Business-Unit-String = ''
       let $Setcntrl-Unit-Criteria  = ' '
   else
       let $Setcntrl-Unit-Criteria  = ' AND SI.SETCNTRLVALUE IN ( ' || $Business-Unit-String || ')'
   end-if

   do Get-JobCode-Setid
   do Get-Location-Setid
   do Load-JobCode-Location-Array

#DEBUG show '<- Get-Business-Unit' $Setcntrl-Unit-Criteria
End-Procedure  Get-Business-Unit
!**********************************************
begin-procedure Get-JobCode-Setid
#DEBUG show '-> Get-JobCode-Setid'

BEGIN-SELECT DISTINCT on-error=give_warning
SI.SETID &JobCodeSetid


   let $JobCodeSetid = rtrim(&JobCodeSetid,' ')

   if $JobCodeSetid <> ''
      let $temp-value = rtrim($JobCodeSetid,' ')
      let $JobCodeSetid-String = $JobCodeSetid-String || '''' || $temp-value || '''' || ','
   end-if

FROM PS_SET_CNTRL_GROUP SI
WHERE SI.REC_GROUP_ID = 'HR_02'
[$Setcntrl-Unit-Criteria]
END-SELECT

 let $JobCodeSetid-String    = rtrim($JobCodeSetid-String,',')
 if  $JobCodeSetid-String    = ''
     let $JobCode-Setid-String-Criteria  = ' '
 else
     let $JobCode-Setid-String-Criteria  = ' AND AJ.SETID IN ( ' || $JobCodeSetid-String || ')'
 end-if

#DEBUG show '<- Get-JobCode-Setid' $JobCode-Setid-String-Criteria
End-procedure Get-JobCode-Setid
!**********************************************
begin-procedure Get-Location-Setid
#DEBUG show '-> Get-Location-Setid'

BEGIN-SELECT DISTINCT on-error=give_warning
SI.SETID &LocationSetid


   let $LocationSetid = rtrim(&LocationSetid,' ')

   if $LocationSetid <> ''
      let $temp-value = rtrim($LocationSetid,' ')
      let $LocationSetid-String = $LocationSetid-String || '''' || $temp-value || '''' || ','
   end-if

FROM PS_SET_CNTRL_GROUP SI
WHERE SI.REC_GROUP_ID = 'HR_03'
[$Setcntrl-Unit-Criteria]
END-SELECT

 let $LocationSetid-String    = rtrim($LocationSetid-String,',')
 if  $LocationSetid-String    = ''
     let $Location-Setid-String-Criteria  = ' '
 else
     let $Location-Setid-String-Criteria  = ' AND AL.SETID IN ( ' || $LocationSetid-String || ')'
 end-if

#DEBUG show '<- Get-Location-Setid' $Location-Setid-String-Criteria
End-procedure Get-Location-Setid
!**********************************************
begin-procedure Load-JobCode-Location-Array
#DEBUG show '-> Load-JobCode-Location-Array '

 let $Where_JC  =  'SI.REC_GROUP_ID = ''HR_02'' '
                  || $Setcntrl-Unit-Criteria

 #Debug show $Where_JC

 Load-Lookup name = Find_JobCode_Setid
 Table        = 'PS_SET_CNTRL_GROUP SI'
 Key          = 'SI.SETCNTRLVALUE'
 Return_Value = 'SI.SETID'
 Where        = $Where_JC


!------------------------------------------------------------

let $Where_LC  =  'SI.REC_GROUP_ID = ''HR_03'' '
                  || $Setcntrl-Unit-Criteria

 #Debug show $Where_LC

 Load-Lookup name = Find_Location_Setid
 Table        = 'PS_SET_CNTRL_GROUP SI'
 Key          = 'SI.SETCNTRLVALUE'
 Return_Value = 'SI.SETID'
 Where        = $Where_LC


!------------------------------------------------------------

 let $Where_Loc =  'AL.COUNTRY= ''CHE'' AND '
               || ' AL.EFFDT = (SELECT MAX(EFFDT) FROM PS_LOCATION_TBL ALS'
               || ' WHERE ALS.LOCATION = AL.LOCATION AND '
               || '       ALS.SETID = AL.SETID AND ALS.EFFDT <= '
               ||'CAST(' ||''''||$Rpt_End_Dt||''''||' AS DATE))'
               || $Location-Setid-String-Criteria


 #Debug show $Where_Loc

 #ifdef MICROSOFT
 Load-Lookup name = LC_Name
 Table        = 'PS_LOCATION_TBL AL'
 Key          = 'AL.SETID + AL.LOCATION'
 Return_Value = 'AL.DESCR'
 Where        = $Where_Loc
 #else
 Load-Lookup name = LC_Name
 Table        = 'PS_LOCATION_TBL AL'
 Key          = 'AL.SETID || AL.LOCATION'
 Return_Value = 'AL.DESCR'
 Where        = $Where_Loc
 #end-if

!------------------------------------------------------------

let $Where_Jobcode =  ' AJ.EFFDT = (SELECT MAX(EFFDT) FROM PS_JOBCODE_TBL AJS'
                      || ' WHERE AJS.JOBCODE=AJ.JOBCODE  AND '
                      || '       AJS.SETID=AJ.SETID  AND AJS.EFFDT <= '
                      ||'CAST(' ||''''||$Rpt_End_Dt||''''||' AS DATE))'
                      || $JobCode-Setid-String-Criteria

 #Debug show $Where_JobCode

 #ifdef MICROSOFT
 Load-Lookup name = JC_Name
 Table            = 'PS_JOBCODE_TBL AJ'
 Key              = 'AJ.SETID + AJ.JOBCODE'
 Return_Value     = 'AJ.DESCR'
 Where            = $Where_JobCode
 #else
 Load-Lookup name = JC_Name
 Table            = 'PS_JOBCODE_TBL AJ'
 Key              = 'AJ.SETID || AJ.JOBCODE'
 Return_Value     = 'AJ.DESCR'
 Where            = $Where_JobCode
 #end-if


#DEBUG show '<- Load-JobCode-Location-Array'
End-procedure Load-JobCode-Location-Array

!**********************************************
begin-procedure Get-Termination-Date
#DEBUG show '-> Get-Termination-Date' $Emplid ' , '  $Hiredt_t
 let $JB_BUSINESS_UNIT = ' '
BEGIN-SELECT on-error=give_warning
#ifdef ORACLE
/*+ INDEX(PSA PS_GPCH_RP_0001)*/
#endif
PSA.PRD_END_DT
PSA.TERMINATION_DT  &TERM_DT
PSA.BUSINESS_UNIT
PSA.LOCATION
PSA.JOBCODE

  let $JB_BUSINESS_UNIT = &PSA.BUSINESS_UNIT
  let $JB_LOCATION      = &PSA.LOCATION
  let $JB_JOBCODE       = &PSA.JOBCODE
  let $TERM_DT          = &TERM_DT

  #ifdef ORACLE

  #else
     #ifdef DB2ALL

     #else
        let $JB_BUSINESS_UNIT =  $JB_BUSINESS_UNIT || '               '
     #end-if
  #end-if

  lookup Find_Location_Setid $JB_BUSINESS_UNIT $LC_Default_Setid
  lookup Find_JobCode_Setid $JB_BUSINESS_UNIT $JC_Default_Setid


  let $Key_Location  = $LC_Default_Setid || $JB_LOCATION
  let $Key_JobCode   = $JC_Default_Setid || $JB_JOBCODE

FROM PS_GPCH_RP_0001 PSA
WHERE PSA.EMPLID   = $Emplid
AND   PSA.EMPL_RCD = #Empl_Rcd_Nbr
AND   PSA.HIRE_DT  = $Hiredt_t
[$Cal_Run_Id_Criteria_PSA]
ORDER BY PSA.PRD_END_DT
END-SELECT

#DEBUG show '<- Get-Termination-Date'
end-procedure Get-Termination-Date


!**********************************************
begin-procedure Get-Max-Curr-Dt
#DEBUG show '-> Get-Max-Curr-Dt'

BEGIN-SELECT on-error=give_warning
MAX(GPCH_AL_CPAY_ENDDT)  &MAX_CURR_DT
 do Format-DateTime (&MAX_CURR_DT, $MAX_CURR_DT, {DEFDATE},'','')
FROM PS_GPCHTX061_TMP
WHERE PROCESS_INSTANCE   = #prcs_process_instance
END-SELECT
    do Format-DateTime ($Rpt_Start_Dt, $From_Rpt_Start_Dt, {DEFDATE},'','')
   let  $TITLE2 = $TITLE2 || $From_Rpt_Start_Dt || ' ' || $HD_TO_STR || ' ' || $MAX_CURR_DT

#DEBUG show '<- Get-Max-Curr-Dt'
end-procedure Get-Max-Curr-Dt
!**********************************************

begin-procedure Get-Hire-Term-date

#DEBUG show '-> Get-Hire-Term-date'

  do Format-DateTime($Hiredt,$cmp_Hiredt,{DEFCMP},'','')
  do Format-DateTime($Termdt,$cmp_Termdt,{DEFCMP},'','')
  do Format-DateTime($Rpt_Start_Dt,$Cmp_Start_Dt,{DEFCMP},'','')
  do Format-DateTime($Rpt_End_Dt,$Cmp_End_Dt,{DEFCMP},'','')

 ! #DEBUG SHOW $cmp_Hiredt ' , ' $cmp_Termdt ' , ' $Cmp_Start_Dt ' , ' $Cmp_End_Dt
  if $cmp_Hiredt  <  $Cmp_Start_Dt          ! normal case
     let $Hiredt = $Rpt_Start_Dt
  end-if

  if $cmp_Termdt  <  $Cmp_Start_Dt          ! normal case
     let $Termdt = $Rpt_End_Dt
  end-if

  if  ($cmp_Hiredt  <  $Cmp_Start_Dt)  AND  ($cmp_Termdt = $Cmp_End_Dt )    ! Normal Case
      let $Hire_Term_Crit        = ' '
      let $Hire_Term_Crit_Retro  = ' '
  else
      let $Hire_Term_Crit        = ' AND J.SLICE_END_DT BETWEEN  ''' || $Hiredt ||''' ' || ' AND  ''' || $Termdt ||''' '
      let $Hire_Term_Crit_Retro  = ' AND JR.SLICE_END_DT BETWEEN ''' || $Hiredt ||''' ' || ' AND  ''' || $Termdt ||''' '
  end-if

#DEBUG show '<- Get-Hire-Term-date '  $Hire_Term_Crit

end-procedure Get-Hire-Term-date
!**********************************************

Begin-procedure Get-Description-Job
#DEBUG show '-> Get-Description-Job'


  #debug show 'lookup ask ' $Key_Location ' , '  $Key_JobCode

  Lookup LC_Name $Key_Location $JB_LOC_DESCR
  let  $JB_LOCATION  = rtrim($JB_LOCATION,' ')
  let  $JB_LOC_DESCR = rtrim($JB_LOC_DESCR,' ')
  let  $JB_LOC_DESCR = $JB_LOCATION || ' ' || $JB_LOC_DESCR


!--------------------------------

  Lookup JC_Name $Key_JobCode $JB_JOBCODE_DESCR
  let  $JB_JOBCODE       = rtrim($JB_JOBCODE,' ')
  let  $JB_JOBCODE_DESCR = rtrim($JB_JOBCODE_DESCR,' ')
  let  $JB_JOBCODE_DESCR = $JB_JOBCODE || ' ' || $JB_JOBCODE_DESCR

!--------------------------------
!FMB Country and National_Id from GPCH_RP_0001
!Begin-Select on-error=give_warning
!COUNTRY_PASSPORT   &JB_COUNTRY
!FROM PS_CITIZEN_PSSPRT PP
!WHERE PP.EMPLID        = $Emplid
!End-Select
!
!   let $Nation = rtrim(&JB_COUNTRY,' ')
!
!   if  $Nation = ''
!       let $Nation = 'CHE'
!   end-if
!
!--------------------------------
!Begin-SELECT on-error=give_warning
!AH.NATIONAL_ID
!
!     let $AHVNum      = &AH.NATIONAL_ID
!
!
!FROM  PS_PERS_NID AH
!WHERE AH.EMPLID = $Emplid
!AND   AH.PRIMARY_NID='Y'
!
!End-SELECT


#DEBUG show '<- Get-Description-Job'
End-procedure Get-Description-Job
!***********************************************************************

begin-procedure New-Employee

#DEBUG show '-> New-Employee'
  new-page

#DEBUG show '<- New-Employee'

end-procedure New-Employee
!**********************************************

begin-procedure init-sum

let #jan = 0
let #feb = 0
let #mar = 0
let #apr = 0
let #may = 0
let #jun = 0
let #jul = 0
let #aug = 0
let #sep = 0
let #oct = 0
let #nov = 0
let #dec = 0
let #annual-sum   = 0

    let $b_flag1 = 'N'
    let $b_flag2 = 'N'
    let $b_flag3 = 'N'
    let $b_flag4 = 'N'
    let $b_flag5 = 'N'
    let $b_flag6 = 'N'
    let $b_flag7 = 'N'
    let $b_flag8 = 'N'
    let $b_flag9 = 'N'
    let $b_flag10 = 'N'
    let $b_flag11 = 'N'
    let $b_flag12 = 'N'



end-procedure init-sum
!**********************************************

begin-procedure Get-Pin-Info
#Debug Show '-> Get-Pin-Info '

let #i = 0
While #i < #max_info

    get #Main_Pin                from pininfo(#i) PINNUM
    get $GPCH_BL_PR_PERCENT      from pininfo(#i) PERCENT
    get $GPCH_BL_PR_PERCENTOTHER from pininfo(#i) PERCENTOTHER
    get $GPCH_BL_PR_ZERO         from pininfo(#i) ZERO
    get $GPCH_BL_PR_RATE         from pininfo(#i) RATE
    get #SIGNVALUE               from pininfo(#i) SIGN
    get $Pin_Descr               from pininfo(#i) PDESC
    get $Pin_Nm                  from pininfo(#i) PNAME

    !#debug show #i #Main_Pin  $GPCH_BL_PR_PERCENT   $GPCH_BL_PR_RATE  #SIGNVALUE $Pin_Nm ' , '$Pin_Descr
     

    evaluate $Print_Option

    when = 'A'   !Pin Name
           let $Pin_Description = $Pin_Nm
           let $Pin_Description = substr($Pin_Description,1,34)
           break
    when = 'B'  !Pin Descr
           let $Pin_Description = $Pin_Descr
           let $Pin_Description = substr($Pin_Description,1,34)
           break

    when = 'C'  !Both
           let $Pin_Description = $Pin_Nm || ' ' || $Pin_Descr
           let $Pin_Description = substr($Pin_Description,1,34)
           break
    when-other  !Both
           let $Pin_Description = $Pin_Nm || ' ' || $Pin_Descr
           let $Pin_Description = substr($Pin_Description,1,34)
           break
    end-evaluate


    if  #Main_Pin <> 0

          if  $Ctl_Comp_Report = 'Y'

                if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE ='Y')
                    goto nextpin
                end-if

                do Get-Balance-Info-PayEntity

          else
                do Get-Balance-Info
          end-if

    end-if



    nextpin:
    do Init-Sum
    do Init-Monthly-sum
    Add 1 to #i

End-While

#Debug Show '<- Get-Pin-Info '
end-procedure Get-Pin-Info
!****************************************
begin-procedure Get-Balance-Info
!#DEBUG show '-> Get-Balance-Info'

    let $Norm-Bal   = 'N'   ! To check if Current rows exists
    let $Retro_Bold = 'N'   ! To avoid printing retro heading in bold
    let $flag1='N'
    let $flag2='N'
    let $flag3='N'
    let $flag4='N'
    let $flag5='N'
    let $flag6='N'
    let $flag7='N'
    let $flag8='N'
    let $flag9='N'
    let $flag10='N'
    let $flag11='N'
    let $flag12='N'

    let $m_flag1 = 'N'
    let $m_flag2 = 'N'
    let $m_flag3 = 'N'
    let $m_flag4 = 'N'
    let $m_flag5 = 'N'
    let $m_flag6 = 'N'
    let $m_flag7 = 'N'
    let $m_flag8 = 'N'
    let $m_flag9 = 'N'
    let $m_flag10 = 'N'
    let $m_flag11 = 'N'
    let $m_flag12 = 'N'

    let $found_nr = 'N'
    let #start_nr = 0
    let #end_nr   = #max_nr

While (#start_nr <= #end_nr) and $found_nr = 'N'  ! W1 : Loop selecting All Pin_Num of a Emplid from Normal Array

    let #mid_nr = trunc((#start_nr + #end_nr)/2,0)
    let #NR_PINNUM     = EmpBalNR.NRPINNUM(#mid_nr)

    if #Main_Pin < #NR_PINNUM
       let #end_nr = #mid_nr - 1
    else
       if #Main_Pin > #NR_PINNUM
          let #start_nr = #mid_nr + 1
       else
          if  #NR_PINNUM = #Main_Pin      !Found the range to be processed.

                let #NR_INSTANCE_old  = 0

            While (#start_nr <= #end_nr)  !Final set to be processed

                let #NR_PINNUM     = EmpBalNR.NRPINNUM(#start_nr)

            if  #NR_PINNUM = #Main_Pin
                let $Norm-Bal      = 'Y'   ! Current row exist
                let #NR_INSTANCE   = EmpBalNR.NRINSTANCE(#start_nr)
                let $bal_mm        = EmpBalNR.NRPRDDT(#start_nr)
                let #Bal_Amount_T  = EmpBalNR.NRAMT(#start_nr)
                let #Bal_Amount_T  = #Bal_Amount_T * #SIGNVALUE
                if (#NR_INSTANCE <> #NR_INSTANCE_old)  and ($Norm-Bal = 'Y') and (#NR_INSTANCE_old  <> 0 )
                !   #DEBUG SHOW ' Normal Instance Difference ' #NR_PINNUM ' ,Inst: ' #NR_INSTANCE ' ,Old_Inst: ' #NR_INSTANCE_old ' ,CurrMth: ' $bal_mm  ' ,Amt : ' #Bal_Amount_T
                   do Set-Bold-Flag
                   do Print-Sum
                end-if
                
                                             

                let #NR_INSTANCE_old = #NR_INSTANCE


            evaluate $bal_mm

            when = '01'
               let $b_flag1     = 'Y'
               let $m_flag1     = 'Y'
               let #jan        = #Bal_Amount_T 
               let #jan-sum    = #jan-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '02'
               let $b_flag2     = 'Y'
               let $m_flag2     = 'Y'
               let #feb        = #Bal_Amount_T 
               let #feb-sum    = #feb-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '03'
               let $b_flag3     = 'Y'
               let $m_flag3     = 'Y'
               let #mar        = #Bal_Amount_T 
               let #mar-sum    = #mar-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '04'
               let $b_flag4     = 'Y'
               let $m_flag4     = 'Y'
               let #apr        = #Bal_Amount_T 
               let #apr-sum    = #apr-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '05'
               let $b_flag5     = 'Y'
               let $m_flag5     = 'Y'
               let #may        = #Bal_Amount_T 
               let #may-sum    = #may-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '06'
               let $b_flag6     = 'Y'
               let $m_flag6     = 'Y'
               let #jun        = #Bal_Amount_T 
               let #jun-sum    = #jun-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '07'
               let $b_flag7     = 'Y'
               let $m_flag7     = 'Y'
               let #jul        = #Bal_Amount_T 
               let #jul-sum    = #jul-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '08'
               let $b_flag8     = 'Y'
               let $m_flag8     = 'Y'
               let #aug        = #Bal_Amount_T 
               let #aug-sum    = #aug-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '09'
               let $b_flag9     = 'Y'
               let $m_flag9     = 'Y'
               let #sep        = #Bal_Amount_T 
               let #sep-sum    = #sep-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '10'
               let $b_flag10     = 'Y'
               let $m_flag10     = 'Y'
               let #oct        = #Bal_Amount_T 
               let #oct-sum    = #oct-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '11'
               let $b_flag11     = 'Y'
               let $m_flag11     = 'Y'
               let #nov        = #Bal_Amount_T 
               let #nov-sum    = #nov-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '12'
               let $b_flag12     = 'Y'
               let $m_flag12     = 'Y'
               let #dec        = #Bal_Amount_T 
               let #dec-sum    = #dec-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when-other

               break

        end-evaluate
        
           
        end-if

        let #start_nr = #start_nr + 1

        end-while
        let $found_nr = 'Y'

      End-if   ! End of check with a Main_Pin for a Emplid
    End-if
  End-if

End-While  ! W1 : End of One Pin_Num Processing of a Emplid

   if  $Norm-Bal = 'Y'             ! To Print only if Current Values Present
       do Set-Bold-Flag
       do Print-Sum
   end-if

   let $Pin_Description_Smry = $Pin_Description
   do Get-Balance-Retro-Info

!#DEBUG show '<- Get-Balance-Info'
end-procedure Get-Balance-Info
!***********************************************
begin-procedure Get-Balance-Retro-Info
!#DEBUG show '-> Get-Balance-Retro-Info '

let $Delta-Bal = 'N'       ! To print only if Retro is selected
let #start_rt  = 0         ! Initialising start counter
let #end_rt    = #max_rt   ! #max_rt is the total no of retro rows for a employee
let $found_rt  = 'N'


While (#start_rt <= #end_rt) and  $found_rt = 'N'    ! Loop selecting All Pin_Num of a Emplid from Retro Array

    let #mid_rt     = trunc((#start_rt + #end_rt)/2,0)
    let #RTPINNUM   = EmpBalRT.RTPINNUM(#mid_rt)

    if #Main_Pin < #RTPINNUM                ! if greater than current Pin
       let #end_rt = #mid_rt - 1
    else
       if #Main_Pin > #RTPINNUM             ! if lesser than current Pin
          let #start_rt = #mid_rt + 1
       else
          if  #RTPINNUM = #Main_Pin         ! Found Matching Pin Num
              let $rto_first = 'Y'          ! recognise first row of retro
              let #RT_INSTANCE_old = 0
              let $old_rto_mm      = ' '

                ! #debug show 'Display Retro1 :' $Emplid ' ' $rto_cmm ' ' $rto_mm ' ' #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec
              while (#start_rt <= #end_rt)  !Final set to be processed

              let #RTPINNUM     = EmpBalRT.RTPINNUM(#start_rt)

              if  #RTPINNUM = #Main_Pin
                  let $Delta-Bal = 'Y'      ! Delta rows exists
                  if $Norm-Bal   = 'N'      ! If no Current Values but Retro Values exist print heading.
                     Print $Pin_Description (+1,{col0}) bold
                     let $Norm-Bal = 'Y'
                  end-if

                  let $rto_cmm        = EmpBalRT.RTCURDT(#start_rt)
                  let #RTM_INSTANCE   = EmpBalRT.RTINSTANCE(#start_rt)
                  let #Bal_Amount_T3  = EmpBalRT.RTAMT(#start_rt)
                  let $rto_mm         = EmpBalRT.RTPRDDT(#start_rt)
                  let $rto_cyy        = EmpBalRT.RTCURYR(#start_rt)
                  let #Bal_Amount_T3  = #Bal_Amount_T3 * #SIGNVALUE

                  let $Instance_printed = 'N'   ! To avoid printing twice

                 !#debug show '-> Kuter '  #RTPINNUM  ' CM: ' $rto_cmm ' OM: ' $old_cmm ' RM ' $rto_mm ' A: ' #Bal_Amount_T3 ' I: ' #RTM_INSTANCE ' OI: ' #old_rt_inst ' F: ' $Delta-Bal
                 !#debug show '-> Kuter '  #RTM_INSTANCE  ' I old ' #RT_INSTANCE_old ' RM ' $rto_mm ' RM_old ' $old_rto_mm ' , ' $Delta-Bal ' , ' #Bal_Amount_T3
                  if $rto_first = 'N'
                  
                  if (#RTM_INSTANCE = #RT_INSTANCE_old) and ($old_rto_mm = $rto_mm) and ( $Delta-Bal = 'Y')  !    If instance is same and date is same
                      let $Instance_printed = 'Y'
                      do Print-Balance-Retro-Info
                  end-if
                  
                  if (#RTM_INSTANCE <> #RT_INSTANCE_old) and ( $Delta-Bal = 'Y')  !    If instance is diff
                ! #debug show 'Retro Instance : ' #RTPINNUM  ' ,Inst: ' #RTM_INSTANCE  ' ,Old_Inst: ' #RT_INSTANCE_old ' ,Amt: ' #Bal_Amount_T3  ' ,CurrMnt: ' $rto_cmm '  OM: ' $old_cmm
                ! #debug show 'Display Retro1 : ' $Emplid ' ' $rto_cmm ' ' $rto_mm ' ' #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec
                     let $Instance_printed = 'Y'
                     do Print-Balance-Retro-Info
                  end-if
                  end-if

                  let  #RT_INSTANCE_old = #RTM_INSTANCE
                  let  $old_rto_mm      = $rto_mm

                  if $rto_first = 'N'
                     if ($rto_cmm <> $old_cmm) and  ( $Delta-Bal = 'Y')   ! If more than one delta months
                     if $Instance_printed = 'N'
                ! #debug show 'Retro Month : ' #RTPINNUM  ' ,CurrMnt: ' $rto_cmm ' OM: ' $old_cmm ' ,Amt: ' #Bal_Amount_T3
                ! #debug show 'Display Retro2 :' $Emplid ' ' $rto_cmm ' ' $rto_mm ' ' $Pin_Description '  ' #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec

                         do Print-Balance-Retro-Info
                     end-if
                     end-if
                  end-if

                  let $rto_first = 'N'
                  let $old_cmm = $rto_cmm
                  let $old_cyy = $rto_cyy
                  let $found_rt = 'Y'
                  let $flag='N'

          evaluate $rto_mm


          when = '01'
             let $b_flag1     = 'Y'
             let #jan        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '02'
             let $b_flag2     = 'Y'
             let #feb        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '03'
             let $b_flag3     = 'Y'
             let #mar        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '04'
             let $b_flag4     = 'Y'
             let #apr        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '05'
             let $b_flag5     = 'Y'
             let #may        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '06'
             let $b_flag6     = 'Y'
             let #jun        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '07'
             let $b_flag7     = 'Y'
             let #jul        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '08'
             let $b_flag8     = 'Y'
             let #aug        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '09'
             let $b_flag9     = 'Y'
             let #sep        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '10'
             let $b_flag10     = 'Y'
             let #oct        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '11'
             let $b_flag11     = 'Y'
             let #nov        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '12'
             let $b_flag12     = 'Y'
             let #dec        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when-other
             break

      end-evaluate
 !----------------------------------------------------------------------------------------
      let $flag1='N'
      let $flag2='N'
      let $flag3='N'
      let $flag4='N'
      let $flag5='N'
      let $flag6='N'
      let $flag7='N'
      let $flag8='N'
      let $flag9='N'
      let $flag10='N'
      let $flag11='N'
      let $flag12='N'

      if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y' )
      !#DEBUG SHOW 'Rate :' $Pin_Description #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec
      GOTO SKIPRTOSUM2     ! To prevent the retro sum of RATE AND PERCENT
  end-if

  evaluate $rto_cmm

  when = '01'
     let $m_flag1     = 'Y'
     let $flag1    = 'Y'
     let #jan     = #annual-sum
     let #jan-sum = #jan-sum + #Bal_Amount_T3
     break
  when = '02'
     let $m_flag2     = 'Y'
     let $flag2    = 'Y'
     let #feb     = #annual-sum
     let #feb-sum = #feb-sum + #Bal_Amount_T3
     break
  when = '03'
     let $m_flag3     = 'Y'
     let $flag3    = 'Y'
     let #mar     = #annual-sum
     let #mar-sum = #mar-sum + #Bal_Amount_T3
     break
  when = '04'
     let $m_flag4     = 'Y'
     let $flag4    = 'Y'
     let #apr     = #annual-sum
     let #apr-sum = #apr-sum + #Bal_Amount_T3
     break
  when = '05'
     let $m_flag5     = 'Y'
     let $flag5    = 'Y'
     let #may     = #annual-sum
     let #may-sum = #may-sum + #Bal_Amount_T3
     break
  when = '06'
     let $m_flag6     = 'Y'
     let $flag6    = 'Y'
     let #jun     = #annual-sum
     let #jun-sum = #jun-sum + #Bal_Amount_T3
     break
  when = '07'
     let $m_flag7     = 'Y'
     let $flag7    = 'Y'
     let #jul     = #annual-sum
     let #jul-sum = #jul-sum + #Bal_Amount_T3
     break
  when = '08'
     let $m_flag8     = 'Y'
     let $flag8    = 'Y'
     let #aug     = #annual-sum
     let #aug-sum = #aug-sum + #Bal_Amount_T3
     break
  when = '09'
     let $m_flag9     = 'Y'
     let $flag9    = 'Y'
     let #sep     = #annual-sum
     let #sep-sum = #sep-sum + #Bal_Amount_T3
     break
  when = '10'
     let $m_flag10     = 'Y'
     let $flag10    = 'Y'
     let #oct     = #annual-sum
     let #oct-sum = #oct-sum + #Bal_Amount_T3
     break
  when = '11'
     let $m_flag11     = 'Y'
     let $flag11    = 'Y'
     let #nov     = #annual-sum
     let #nov-sum = #nov-sum + #Bal_Amount_T3
     break
  when = '12'
     let $m_flag12     = 'Y'
     let $flag12    = 'Y'
     let #dec     = #annual-sum
     let #dec-sum = #dec-sum + #Bal_Amount_T3
     break
  when-other

     break

  end-evaluate


   SKIPRTOSUM2:


  end-if

  let #start_rt = #start_rt + 1

  end-while

  let $found_rt = 'Y'

End-if   ! End of check with a Main_Pin for a Emplid
End-if
End-if


End-While  !End of One Pin_Num Processing of a Emplid

if $Detailed = 'J'             ! Detailed Report

      !    #debug show 'Display Retro1 :' $Emplid ' ' $rto_cmm ' ' $rto_mm ' ' #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec
   if $Delta-Bal = 'Y'         ! If there are Retro print Monthly Sum

      do Print-Balance-Retro-Info
      do Print-Monthly-Sum
      do Init-Monthly-sum
   end-if
else
     if  $Norm-Bal = 'Y' OR $Delta-Bal = 'Y'
         do Print-Monthly-Sum
     end-if
end-if

!#DEBUG show '<- Get-Balance-Retro-Info '
end-procedure Get-Balance-Retro-Info
!***********************************************
begin-procedure Print-Balance-Retro-Info
!#DEBUG show '-> Print-Balance-Retro-Info '

      let $Retro_Bold = 'Y'
      let $Pin_Description    = $HD_FROM || ' ' || $old_cmm || '/' || $rto_cyy
      do Print-sum


!#DEBUG show '<- Print-Balance-Retro-Info ' $Pin_Description
end-procedure Print-Balance-Retro-Info
!***********************************************
begin-procedure Print-Sum
!#DEBUG show '-> Print-Sum  ' #annual-sum ' ' #jan ' ' #feb ' ' #mar ' ' #apr ' ' #may ' ' #jun ' ' #jul ' '  #aug ' ' #sep ' ' #oct ' ' #nov ' ' #dec
!#DEBUG show '-> Print-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12
!#DEBUG show '-> Print-Sum  ' $Pin_Description $flag1 $flag2 $flag3 $flag4 $flag5 $flag6 $flag7 $flag8 $flag9 $flag10 $flag11 $flag12



  if $Detailed = 'J'

     if  $Retro_Bold = 'Y'
         print $Pin_Description  (+1,{col0})
     else
         print $Pin_Description  (+1,{col0})  bold
     end-if

     if $GPCH_BL_PR_PERCENT = 'Y'
        let $Print_Mask = 'B9999.9999mi'
        if $GPCH_BL_PR_PERCENTOTHER    = 'Y'
           let $Print_Mask = 'B999999.99mi'
        end-if
     else
        let $Print_Mask = 'B999999.99mi'              ! v2001.04
     end-if

     let $Print_Mask_Tmp = $Print_Mask

!#DEBUG show '-> Print-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12

    if $b_flag1 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#jan,$number,$Print_Mask)
    if $flag1 = 'Y'
       print $number      (0,{col1}) bold
    else
       print $number      (0,{col1})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag2 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#feb,$number,$Print_Mask)
    if $flag2 = 'Y'
       print $number    (0,{col2}) bold
    else
       print $number    (0,{col2})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag3 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#mar,$number,$Print_Mask)
    if $flag3 = 'Y'
       print $number    (0,{col3})  bold
    else
       print $number    (0,{col3})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag4 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#apr,$number,$Print_Mask)
    if $flag4 = 'Y'
       print $number    (0,{col4}) bold
    else
       print $number    (0,{col4})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag5 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#may,$number,$Print_Mask)
    if $flag5 = 'Y'
       print $number    (0,{col5})  bold
    else
       print $number    (0,{col5})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag6 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#jun,$number,$Print_Mask)
    if $flag6 = 'Y'
       print $number    (0,{col6})  bold
    else
       print $number    (0,{col6})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag7 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#jul,$number,$Print_Mask)
    if $flag7 = 'Y'
       print $number    (0,{col7}) bold
    else
       print $number    (0,{col7})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag8 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#aug,$number,$Print_Mask)
    if $flag8 = 'Y'
       print $number    (0,{col8}) bold
    else
       print $number    (0,{col8})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag9 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#sep,$number,$Print_Mask)
    if $flag9 = 'Y'
       print $number    (0,{col9}) bold
    else
       print $number    (0,{col9})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


   if $b_flag10 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#oct,$number,$Print_Mask)
    if $flag10 = 'Y'
       print $number    (0,{col10}) bold
    else
       print $number    (0,{col10})
    end-if
    let $Print_Mask = $Print_Mask_Tmp



    if $b_flag11 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#nov,$number,$Print_Mask)
    if $flag11 = 'Y'
       print $number    (0,{col11}) bold
    else
       print $number    (0,{col11})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag12 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
    do Format-Number(#dec,$number,$Print_Mask)
    if $flag12 = 'Y'
       print $number    (0,{col12})  bold
    else
       print $number    (0,{col12})
    end-if
    let $Print_Mask = $Print_Mask_Tmp




    if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y')
        GOTO SKIPSUM1
    end-if

    do Format-Number(#annual-sum,$number,$Print_Mask)
        print $number    (0,{col13})


    SKIPSUM1:

    do Init-Sum

 end-if

!#DEBUG show '<- Print-Sum  '
end-procedure Print-Sum
!***********************************************

begin-procedure Print-Monthly-Sum
!#DEBUG show '-> Print-Monthly-Sum' $Pin_Description

!#DEBUG show '01 : ' #jan-sum '02 : ' #feb-sum '03 : ' #mar-sum '04 : ' #apr-sum '05 : ' #may-sum '06 : ' #jun-sum
!#DEBUG show '07 : ' #jul-sum '08 : ' #aug-sum '09 : ' #sep-sum '10 : ' #oct-sum '11 : ' #nov-sum '12 : ' #dec-sum


!#DEBUG show '-> Print-Monthly-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12
!#DEBUG show '-> Print-Monthly-Sum  ' $Pin_Description $flag1 $flag2 $flag3 $flag4 $flag5 $flag6 $flag7 $flag8 $flag9 $flag10 $flag11 $flag12

   if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y')
        GOTO SKIPSUM2
   end-if

   let #Total_Sum =  #jan-sum + #feb-sum + #mar-sum + #apr-sum + #may-sum + #jun-sum +
                     #jul-sum + #aug-sum + #sep-sum + #oct-sum + #nov-sum + #dec-sum


   if $Detailed = 'J'
      print $TOTAL   (+1,{col0})
   else
      print $Pin_Description_Smry (+1,{col0}) bold
   end-if

   let $Print_Mask = 'B999999.99mi'              ! v2001.04

   let $Print_Mask_Tmp = $Print_Mask

   if $m_flag1 = 'Y'
       let $Print_Mask = '9999999.99mi'
   end-if
   do Format-Number(#jan-sum,$number,$Print_Mask)
   print $number           (0,{col1})     bold
   let $Print_Mask = $Print_Mask_Tmp


   if $m_flag2 = 'Y'
       let $Print_Mask = '9999999.99mi'
   end-if
   do Format-Number(#feb-sum,$number,$Print_Mask)
   print $number           (0,{col2})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag3 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#mar-sum,$number,$Print_Mask)
   print $number           (0,{col3})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag4 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#apr-sum,$number,$Print_Mask)
   print $number           (0,{col4})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag5 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#may-sum,$number,$Print_Mask)
   print $number           (0,{col5})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag6 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#jun-sum,$number,$Print_Mask)
   print $number           (0,{col6})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag7 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#jul-sum,$number,$Print_Mask)
   print $number           (0,{col7})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag8 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#aug-sum,$number,$Print_Mask)
   print $number           (0,{col8})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag9 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#sep-sum,$number,$Print_Mask)
   print $number           (0,{col9})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag10 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#oct-sum,$number,$Print_Mask)
   print $number           (0,{col10})    bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag11 = 'Y'
       let $Print_Mask = '9999999.99mi'
    end-if
   do Format-Number(#nov-sum,$number,$Print_Mask)
   print $number           (0,{col11})    bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag12 = 'Y'
       let $Print_Mask = '9999999.99mi'
   end-if
   do Format-Number(#dec-sum,$number,$Print_Mask)
   print $number           (0,{col12})    bold
   let $Print_Mask = $Print_Mask_Tmp

   do Format-Number(#Total_Sum,$number,$Print_Mask)
   print $number    (0,{col13})    bold
   let $Print_Mask = $Print_Mask_Tmp

   SKIPSUM2:

!#DEBUG show '<- Print-Monthly-Sum'
end-procedure Print-Monthly-Sum
!**********************************************
begin-procedure Print-Sum-Payentity
!#DEBUG show '-> Print-Sum  ' #annual-sum ' ' #jan ' ' #feb ' ' #mar ' ' #apr ' ' #may ' ' #jun ' ' #jul ' '  #aug ' ' #sep ' ' #oct ' ' #nov ' ' #dec
!#DEBUG show '-> Print-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12
!#DEBUG show '-> Print-Sum  ' $Pin_Description $flag1 $flag2 $flag3 $flag4 $flag5 $flag6 $flag7 $flag8 $flag9 $flag10 $flag11 $flag12

   let $Pin_Description = substr($Pin_Description,1,20)

  if $Detailed = 'J'

     if  $Retro_Bold = 'Y'
         print $Pin_Description  (+1,{col0})
     else
         print $Pin_Description  (+1,{col0})  bold
     end-if

     if $GPCH_BL_PR_PERCENT = 'Y'
        let $Print_Mask = 'B9999.9999mi'
        if $GPCH_BL_PR_PERCENTOTHER    = 'Y'
           let $Print_Mask = 'B999999.99mi'
        end-if
     else
        let $Print_Mask = 'B99999999.99mi'              ! v2001.04
     end-if

     let $Print_Mask_Tmp = $Print_Mask

!#DEBUG show '-> Print-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12

    if $b_flag1 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#jan,$number,$Print_Mask)
    if $flag1 = 'Y'
       print $number      (0,{colp1}) bold
    else
       print $number      (0,{colp1})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag2 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#feb,$number,$Print_Mask)
    if $flag2 = 'Y'
       print $number    (0,{colp2}) bold
    else
       print $number    (0,{colp2})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag3 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#mar,$number,$Print_Mask)
    if $flag3 = 'Y'
       print $number    (0,{colp3})  bold
    else
       print $number    (0,{colp3})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag4 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#apr,$number,$Print_Mask)
    if $flag4 = 'Y'
       print $number    (0,{colp4}) bold
    else
       print $number    (0,{colp4})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag5 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#may,$number,$Print_Mask)
    if $flag5 = 'Y'
       print $number    (0,{colp5})  bold
    else
       print $number    (0,{colp5})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag6 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#jun,$number,$Print_Mask)
    if $flag6 = 'Y'
       print $number    (0,{colp6})  bold
    else
       print $number    (0,{colp6})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag7 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#jul,$number,$Print_Mask)
    if $flag7 = 'Y'
       print $number    (0,{colp7}) bold
    else
       print $number    (0,{colp7})
    end-if
    let $Print_Mask = $Print_Mask_Tmp

    if $b_flag8 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#aug,$number,$Print_Mask)
    if $flag8 = 'Y'
       print $number    (0,{colp8}) bold
    else
       print $number    (0,{colp8})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag9 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#sep,$number,$Print_Mask)
    if $flag9 = 'Y'
       print $number    (0,{colp9}) bold
    else
       print $number    (0,{colp9})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


   if $b_flag10 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#oct,$number,$Print_Mask)
    if $flag10 = 'Y'
       print $number    (0,{colp10}) bold
    else
       print $number    (0,{colp10})
    end-if
    let $Print_Mask = $Print_Mask_Tmp



    if $b_flag11 = 'Y'  AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#nov,$number,$Print_Mask)
    if $flag11 = 'Y'
       print $number    (0,{colp11}) bold
    else
       print $number    (0,{colp11})
    end-if
    let $Print_Mask = $Print_Mask_Tmp


    if $b_flag12 = 'Y' AND $GPCH_BL_PR_PERCENT <> 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
    do Format-Number(#dec,$number,$Print_Mask)
    if $flag12 = 'Y'
       print $number    (0,{colp12})  bold
    else
       print $number    (0,{colp12})
    end-if
    let $Print_Mask = $Print_Mask_Tmp




    if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y')
        GOTO SKIPSUM1
    end-if

    let $Print_Mask = 'B999999999.99mi'
    do Format-Number(#annual-sum,$number,$Print_Mask)
        print $number    (0,{colp13})


    SKIPSUM1:

    do Init-Sum

 end-if

!#DEBUG show '<- Print-Sum  '
end-procedure Print-Sum-Payentity
!***********************************************
begin-procedure Print-Monthly-Sum-Payentity
!#DEBUG show '-> Print-Monthly-Sum' $Pin_Description

!#DEBUG show '01 : ' #jan-sum '02 : ' #feb-sum '03 : ' #mar-sum '04 : ' #apr-sum '05 : ' #may-sum '06 : ' #jun-sum
!#DEBUG show '07 : ' #jul-sum '08 : ' #aug-sum '09 : ' #sep-sum '10 : ' #oct-sum '11 : ' #nov-sum '12 : ' #dec-sum


!#DEBUG show '-> Print-Monthly-Sum  ' $Pin_Description $b_flag1 $b_flag2 $b_flag3 $b_flag4 $b_flag5 $b_flag6 $b_flag7 $b_flag8 $b_flag9 $b_flag10 $b_flag11 $b_flag12
!#DEBUG show '-> Print-Monthly-Sum  ' $Pin_Description $flag1 $flag2 $flag3 $flag4 $flag5 $flag6 $flag7 $flag8 $flag9 $flag10 $flag11 $flag12

   if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y')
        GOTO SKIPSUM2
   end-if

   let #Total_Sum =  #jan-sum + #feb-sum + #mar-sum + #apr-sum + #may-sum + #jun-sum +
                     #jul-sum + #aug-sum + #sep-sum + #oct-sum + #nov-sum + #dec-sum

   let $Pin_Description = substr($Pin_Description,1,20)
   if $Detailed = 'J'
      print $TOTAL   (+1,{col0})
   else
      print $Pin_Description_Smry (+1,{col0}) bold
   end-if

   let $Print_Mask = 'B99999999.99mi'              ! v2001.04

   let $Print_Mask_Tmp = $Print_Mask

   if $m_flag1 = 'Y'
       let $Print_Mask = '999999999.99mi'
   end-if
   do Format-Number(#jan-sum,$number,$Print_Mask)
   print $number           (0,{colp1})     bold
   let $Print_Mask = $Print_Mask_Tmp


   if $m_flag2 = 'Y'
       let $Print_Mask = '999999999.99mi'
   end-if
   do Format-Number(#feb-sum,$number,$Print_Mask)
   print $number           (0,{colp2})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag3 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#mar-sum,$number,$Print_Mask)
   print $number           (0,{colp3})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag4 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#apr-sum,$number,$Print_Mask)
   print $number           (0,{colp4})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag5 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#may-sum,$number,$Print_Mask)
   print $number           (0,{colp5})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag6 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#jun-sum,$number,$Print_Mask)
   print $number           (0,{colp6})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag7 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#jul-sum,$number,$Print_Mask)
   print $number           (0,{colp7})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag8 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#aug-sum,$number,$Print_Mask)
   print $number           (0,{colp8})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag9 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#sep-sum,$number,$Print_Mask)
   print $number           (0,{colp9})     bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag10 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#oct-sum,$number,$Print_Mask)
   print $number           (0,{colp10})    bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag11 = 'Y'
       let $Print_Mask = '999999999.99mi'
    end-if
   do Format-Number(#nov-sum,$number,$Print_Mask)
   print $number           (0,{colp11})    bold
   let $Print_Mask = $Print_Mask_Tmp

   if $m_flag12 = 'Y'
       let $Print_Mask = '999999999.99mi'
   end-if
   do Format-Number(#dec-sum,$number,$Print_Mask)
   print $number           (0,{colp12})    bold
   let $Print_Mask = $Print_Mask_Tmp

   let $Print_Mask = 'B999999999.99mi'
   do Format-Number(#Total_Sum,$number,$Print_Mask)
   print $number    (0,{colp13})    bold
   let $Print_Mask = $Print_Mask_Tmp

   SKIPSUM2:

!#DEBUG show '<- Print-Monthly-Sum'
end-procedure Print-Monthly-Sum-Payentity
!**********************************************

begin-procedure Init-Monthly-sum

let #Total_Sum = 0
let #jan-sum = 0
let #feb-sum = 0
let #mar-sum = 0
let #apr-sum = 0
let #may-sum = 0
let #jun-sum = 0
let #jul-sum = 0
let #aug-sum = 0
let #sep-sum = 0
let #oct-sum = 0
let #nov-sum = 0
let #dec-sum = 0
let $Pin_descr = ''
let $Pin_Nm = ''

end-procedure init-monthly-sum
!****************************************************************************************
!
!PAY ENTITY  REPORT
!****************************************************************************************
begin-procedure Get-Balance-Info-PayEntity
!#DEBUG show '-> Get-Balance-Info-PayEntity'

    let $Norm-Bal   = 'N'   ! To check if Current rows exists
    let $Retro_Bold = 'N'   ! To avoid printing retro heading in bold
    let $flag1='N'
    let $flag2='N'
    let $flag3='N'
    let $flag4='N'
    let $flag5='N'
    let $flag6='N'
    let $flag7='N'
    let $flag8='N'
    let $flag9='N'
    let $flag10='N'
    let $flag11='N'
    let $flag12='N'

    let $m_flag1 = 'N'
    let $m_flag2 = 'N'
    let $m_flag3 = 'N'
    let $m_flag4 = 'N'
    let $m_flag5 = 'N'
    let $m_flag6 = 'N'
    let $m_flag7 = 'N'
    let $m_flag8 = 'N'
    let $m_flag9 = 'N'
    let $m_flag10 = 'N'
    let $m_flag11 = 'N'
    let $m_flag12 = 'N'

    let $found_nr = 'N'
    let #start_nr = 0
    let #end_nr   = #max_nr

While (#start_nr <= #end_nr) and $found_nr = 'N'  ! W1 : Loop selecting All Pin_Num of a Emplid from Normal Array

    let #mid_nr = trunc((#start_nr + #end_nr)/2,0)
    let #NR_PINNUM     = P_EmpBalNR.NRPINNUM(#mid_nr)

    if #Main_Pin < #NR_PINNUM
       let #end_nr = #mid_nr - 1
    else
       if #Main_Pin > #NR_PINNUM
          let #start_nr = #mid_nr + 1
       else
          if  #NR_PINNUM = #Main_Pin      !Found the range to be processed.

          While (#start_nr <= #end_nr)  !Final set to be processed

                let #NR_PINNUM     = P_EmpBalNR.NRPINNUM(#start_nr)

            if  #NR_PINNUM = #Main_Pin
                let $Norm-Bal      = 'Y'   ! Current row exist
                let $bal_mm        = P_EmpBalNR.NRPRDDT(#start_nr)
                let #Bal_Amount_T  = P_EmpBalNR.NRAMT(#start_nr)
                let #Bal_Amount_T  = #Bal_Amount_T * #SIGNVALUE


            evaluate $bal_mm

            when = '01'
               let $b_flag1     = 'Y'
               let $m_flag1     = 'Y'
               let #jan        = #Bal_Amount_T
               let #jan-sum    = #jan-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '02'
               let $b_flag2     = 'Y'
               let $m_flag2     = 'Y'
               let #feb        = #Bal_Amount_T
               let #feb-sum    = #feb-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '03'
               let $b_flag3     = 'Y'
               let $m_flag3     = 'Y'
               let #mar        = #Bal_Amount_T
               let #mar-sum    = #mar-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '04'
               let $b_flag4     = 'Y'
               let $m_flag4     = 'Y'
               let #apr        = #Bal_Amount_T
               let #apr-sum    = #apr-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '05'
               let $b_flag5     = 'Y'
               let $m_flag5     = 'Y'
               let #may        = #Bal_Amount_T
               let #may-sum    = #may-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '06'
               let $b_flag6     = 'Y'
               let $m_flag6     = 'Y'
               let #jun        = #Bal_Amount_T
               let #jun-sum    = #jun-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '07'
               let $b_flag7     = 'Y'
               let $m_flag7     = 'Y'
               let #jul        = #Bal_Amount_T
               let #jul-sum    = #jul-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '08'
               let $b_flag8     = 'Y'
               let $m_flag8     = 'Y'
               let #aug        = #Bal_Amount_T
               let #aug-sum    = #aug-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '09'
               let $b_flag9     = 'Y'
               let $m_flag9     = 'Y'
               let #sep        = #Bal_Amount_T
               let #sep-sum    = #sep-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '10'
               let $b_flag10     = 'Y'
               let $m_flag10     = 'Y'
               let #oct        = #Bal_Amount_T
               let #oct-sum    = #oct-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '11'
               let $b_flag11     = 'Y'
               let $m_flag11     = 'Y'
               let #nov        = #Bal_Amount_T
               let #nov-sum    = #nov-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when = '12'
               let $b_flag12     = 'Y'
               let $m_flag12     = 'Y'
               let #dec        = #Bal_Amount_T
               let #dec-sum    = #dec-sum + #Bal_Amount_T
               let #annual-sum = #annual-sum + #Bal_Amount_T
               break

            when-other

               break

        end-evaluate
        end-if

        let #start_nr = #start_nr + 1

        end-while
        let $found_nr = 'Y'

      End-if   ! End of check with a Main_Pin for a Emplid
    End-if
  End-if

End-While  ! W1 : End of One Pin_Num Processing of a Emplid

   if  $Norm-Bal = 'Y'             ! To Print only if Current Values Present
       do Set-Bold-Flag
       do Print-Sum-Payentity
   end-if

   let $Pin_Description_Smry = $Pin_Description
   do Get-Balance-Retro-Info-PayEntity

!#DEBUG show '<- Get-Balance-Info-PayEntity'
end-procedure Get-Balance-Info-PayEntity
!***********************************************
begin-procedure Get-Balance-Retro-Info-PayEntity
!#DEBUG show '-> Get-Balance-Retro-Info-PayEntity '


let $Delta-Bal = 'N'       ! To print only if Retro is selected
let #start_rt  = 0         ! Initialising start counter
let #end_rt    = #max_rt   ! #max_rt is the total no of retro rows for a employee
let $found_rt  = 'N'


While (#start_rt <= #end_rt) and  $found_rt = 'N'    ! Loop selecting All Pin_Num of a Emplid from Retro Array

    let #mid_rt     = trunc((#start_rt + #end_rt)/2,0)
    let #RTPINNUM   = P_EmpBalRT.RTPINNUM(#mid_rt)


    if #Main_Pin < #RTPINNUM                ! if greater than current Pin
       let #end_rt = #mid_rt - 1
    else
       if #Main_Pin > #RTPINNUM             ! if lesser than current Pin
          let #start_rt = #mid_rt + 1
       else
          if  #RTPINNUM = #Main_Pin         ! Found Matching Pin Num
              let $rto_first = 'Y'          ! recognise first row of retro

              while (#start_rt <= #end_rt)  !Final set to be processed

              let #RTPINNUM     = P_EmpBalRT.RTPINNUM(#start_rt)


              if  #RTPINNUM = #Main_Pin

                  let $Delta-Bal = 'Y'      ! Delta rows exists
                  if $Norm-Bal = 'N'  !If no Current Values but Retro Values exist print heading.
                     Print $Pin_Description (+1,{col0}) bold
                     let $Norm-Bal = 'Y'
                  end-if

                  let $rto_cmm        = P_EmpBalRT.RTCURDT(#start_rt)
                  let #Bal_Amount_T3  = P_EmpBalRT.RTAMT(#start_rt)
                  let $rto_mm         = P_EmpBalRT.RTPRDDT(#start_rt)
                  let $rto_cyy        = P_EmpBalRT.RTCURYR(#start_rt)
                  let #Bal_Amount_T3  = #Bal_Amount_T3 * #SIGNVALUE



                  if $rto_first = 'N'
                     if ($rto_cmm <> $old_cmm) and  ( $Delta-Bal = 'Y')   ! If more than one delta months
                        do Print-Balance-Retro-Info-PayEntity
                     end-if
                  end-if

                  let $rto_first = 'N'
                  let $old_cmm = $rto_cmm
                  let $old_cyy = $rto_cyy
                  let $found_rt = 'Y'


          evaluate $rto_mm


          when = '01'
             let $b_flag1     = 'Y'
             let #jan        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '02'
             let $b_flag2     = 'Y'
             let #feb        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '03'
             let $b_flag3     = 'Y'
             let #mar        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '04'
             let $b_flag4     = 'Y'
             let #apr        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '05'
             let $b_flag5     = 'Y'
             let #may        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '06'
             let $b_flag6     = 'Y'
             let #jun        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '07'
             let $b_flag7     = 'Y'
             let #jul        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '08'
             let $b_flag8     = 'Y'
             let #aug        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '09'
             let $b_flag9     = 'Y'
             let #sep        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '10'
             let $b_flag10     = 'Y'
             let #oct        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '11'
             let $b_flag11     = 'Y'
             let #nov        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when = '12'
             let $b_flag12     = 'Y'
             let #dec        = #Bal_Amount_T3
             let #annual-sum = #annual-sum + #Bal_Amount_T3
             break

          when-other
             break

      end-evaluate
 !----------------------------------------------------------------------------------------
      let $flag1='N'
      let $flag2='N'
      let $flag3='N'
      let $flag4='N'
      let $flag5='N'
      let $flag6='N'
      let $flag7='N'
      let $flag8='N'
      let $flag9='N'
      let $flag10='N'
      let $flag11='N'
      let $flag12='N'


  if ($GPCH_BL_PR_PERCENT = 'Y' OR $GPCH_BL_PR_RATE='Y' OR $GPCH_BL_PR_ZERO = 'Y')
      !#DEBUG SHOW 'Rate :' $Pin_Description #jan #feb #mar #apr #may #jun #jul #aug #sep #oct #nov #dec
      GOTO SKIPRTOSUM2     ! To prevent the retro sum of RATE AND PERCENT
  end-if

  evaluate $rto_cmm

  when = '01'
     let $m_flag1     = 'Y'
     let $flag1    = 'Y'
     let #jan     = #annual-sum
     let #jan-sum = #jan-sum + #Bal_Amount_T3
     break
  when = '02'
     let $m_flag2     = 'Y'
     let $flag2    = 'Y'
     let #feb     = #annual-sum
     let #feb-sum = #feb-sum + #Bal_Amount_T3
     break
  when = '03'
     let $m_flag3     = 'Y'
     let $flag3    = 'Y'
     let #mar     = #annual-sum
     let #mar-sum = #mar-sum + #Bal_Amount_T3
     break
  when = '04'
     let $m_flag4     = 'Y'
     let $flag4    = 'Y'
     let #apr     = #annual-sum
     let #apr-sum = #apr-sum + #Bal_Amount_T3
     break
  when = '05'
     let $m_flag5     = 'Y'
     let $flag5    = 'Y'
     let #may     = #annual-sum
     let #may-sum = #may-sum + #Bal_Amount_T3
     break
  when = '06'
     let $m_flag6     = 'Y'
     let $flag6    = 'Y'
     let #jun     = #annual-sum
     let #jun-sum = #jun-sum + #Bal_Amount_T3
     break
  when = '07'
     let $m_flag7     = 'Y'
     let $flag7    = 'Y'
     let #jul     = #annual-sum
     let #jul-sum = #jul-sum + #Bal_Amount_T3
     break
  when = '08'
     let $m_flag8     = 'Y'
     let $flag8    = 'Y'
     let #aug     = #annual-sum
     let #aug-sum = #aug-sum + #Bal_Amount_T3
     break
  when = '09'
     let $m_flag9     = 'Y'
     let $flag9    = 'Y'
     let #sep     = #annual-sum
     let #sep-sum = #sep-sum + #Bal_Amount_T3
     break
  when = '10'
     let $m_flag10     = 'Y'
     let $flag10    = 'Y'
     let #oct     = #annual-sum
     let #oct-sum = #oct-sum + #Bal_Amount_T3
     break
  when = '11'
     let $m_flag11     = 'Y'
     let $flag11    = 'Y'
     let #nov     = #annual-sum
     let #nov-sum = #nov-sum + #Bal_Amount_T3
     break
  when = '12'
     let $m_flag12     = 'Y'
     let $flag12    = 'Y'
     let #dec     = #annual-sum
     let #dec-sum = #dec-sum + #Bal_Amount_T3
     break
  when-other

     break

  end-evaluate

  SKIPRTOSUM2:

  end-if

  let #start_rt = #start_rt + 1

  end-while

  let $found_rt = 'Y'

End-if   ! End of check with a Main_Pin for a Emplid
End-if
End-if

End-While  !End of One Pin_Num Processing of a Emplid

if $Detailed = 'J'
   if $Delta-Bal = 'Y'
      do Print-Balance-Retro-Info-PayEntity
      do Print-Monthly-Sum-Payentity
      do Init-Monthly-sum
   end-if
else
     if  $Norm-Bal = 'Y' OR $Delta-Bal = 'Y'
         do Print-Monthly-Sum-Payentity
     end-if
end-if

!#DEBUG show '<- Get-Balance-Retro-Info-PayEntity '
end-procedure Get-Balance-Retro-Info-PayEntity
!***********************************************
begin-procedure Set-Bold-Flag
#DEBUG show '-> Set-Bold-Flag'

let $flag1    = 'Y'
let $flag2    = 'Y'
let $flag3    = 'Y'
let $flag4    = 'Y'
let $flag5    = 'Y'
let $flag6    = 'Y'
let $flag7    = 'Y'
let $flag8    = 'Y'
let $flag9    = 'Y'
let $flag10   = 'Y'
let $flag11   = 'Y'
let $flag12   = 'Y'

#DEBUG show '<- Set-Bold-Flag'
end-procedure Set-Bold-Flag
!***********************************************
begin-procedure Print-Balance-Retro-Info-PayEntity
!#DEBUG show '-> Print-Balance-Retro-Info-PayEntity '

      let $Retro_Bold = 'Y'
      let $Pin_Description    = $HD_FROM || ' ' || $old_cmm || '/' || $old_cyy
      do Print-Sum-Payentity

!#DEBUG show '<- Print-Balance-Retro-Info-PayEntity '
end-procedure Print-Balance-Retro-Info-PayEntity
!***********************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
         when = 'GPCHTX06'
               do Get_Eng_GPCHTX06
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX06'
               do Get_Ger_GPCHTX06
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHTX06'
               do Get_Ita_GPCHTX06
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHTX06'
               do Get_Fra_GPCHTX06
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate
#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************
#include 'gpchut01.sqc'  !Get Strings Values
#include 'gpchut02.sqc'  !Get Pin Description
#include 'gpchut03.sqc'  !get ask report parameters
#include 'gpchut04.sqc'  !get pay entity data
#include 'gpchut06.sqc'  !get run control parameter values
#include 'gpchut07.sqc'  !Log Output Selection
#include 'gpchtx06.sqc'  !get run control parameter values
#include 'gpchtx6s.sqc'  !Get Strings Values for GPCHTX06
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB


#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datemath.sqc'  !function for date-calculation
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
