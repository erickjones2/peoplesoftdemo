!***********************************************************************
! GPJPSC01.sqr:  Monthly Standard Remuneration Calculation Report      *
!                (Revised)                                             *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  25376613                                            !
!                                                                      *
!***********************************************************************


#include 'setenv.sqc'   !Set environment
#define PAPER_SIZE   A4
#define PROGRAM_ID   GPJPSC01
#DEFINE JapaneseDates
#DEFINE PRINT_JAPANESE
begin-setup
#include 'gpjpscl.sqc'  !page layout and printer definition
end-setup


begin-report


        do Init-Processing

        do Calc-Date

        do Build-select

        do Process-Main

        do Update-Prcs-Run-Status

end-report


!***********************************************************************
!                                                                      *
! Init-Processing                                                      *
!                                                                      *
!                                                                      *
! Called By:    begin-report                                           *
!                                                                      *
! Calls:        Init-Datetime           - datetime.sqc                 *
!               Get-Current-Datetime    - prcsapi.sqc (curdttim.sqc)   *
!               Get-Run-Control-Parms   - prcsapi.sqc                  *
!               Get-Language-Codes      - prcslng.sqc                  *
!               Get-GPJPSC01-runctl                                    *
!               Init-Report                                            *
!                                                                      *
! Description:  Standard PeopleSoft initialization processing.         *
!                                                                      *
!***********************************************************************


begin-procedure Init-Processing
  

        do Init-Datetime

        do Get-Current-Datetime

        do Define-Prcs-Vars

        do Get-Run-Control-Parms

        do Get-Language-Codes

        do Get-GPJPSC01-runctl

        do Init-Report


end-procedure ! Init-Processing


!***********************************************************************
!                                                                      *
! Get-GPJPSC01-runctl                                                  *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Description:  Get data from GPJP_RC_SI01 runcontrol record.          *
!                                                                      *
!***********************************************************************

begin-procedure Get-GPJPSC01-runctl


begin-select

RC.DATE_YEAR_VAL
RC.MONTHCD
RC.GPJP_TAX_ESTAB
RC.GPJP_PAYEE_ID_TYPE

FROM  PS_GPJP_RC_SC01 RC
WHERE RC.OPRID          = $Prcs_OprID
AND   RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID

end-select

        let #Rc_year           = &RC.Date_year_val
        let $Rc_monthcd        = RTRIM(&RC.Monthcd,' ')
        move  $Rc_monthcd to #Rc_monthcd
        let $Rc_Gpjp_tax_estab = RTRIM(&RC.Gpjp_tax_estab, ' ')
        let $Rc_payee_id_type = RTRIM(&RC.Gpjp_payee_id_type, ' ')


end-procedure !Get-GPJPSC01-runctl

!***********************************************************************
!                                                                      *
! Calc-Date                                                            *
!                                                                      *
!                                                                      *
! Called By:    Begin-Report                                           *
!                                                                      *
! Description:  Calculate the first day of the month on the runcontrol *
!               record as well as the first day of the next month      *
!                                                                      *
!***********************************************************************
begin-procedure Calc-Date


    let #first_day = 01
    if #Rc_monthcd = 12
        let #next_month =  1
        let #next_year  = #Rc_year + 1
    else
        let #next_month =  #Rc_monthcd + 1
        let #next_year  =  #Rc_year
    end-if

    do dtu-format-date(#Rc_year, #Rc_monthcd, #first_day, $Date_first)
    do dtu-format-date(#next_year, #next_month, #first_day, $Date_next)

    do Convert-From-DTU-Date($Date_first,$Objectdate)
    do Convert-From-DTU-Date($Date_next,$Nextmonth)


end-procedure !Calc-Date

!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report


    do Init_Report_Translation ($ReportID, $curr_language_cd)

    do Append_Report_Translation ('GPJPSC01')

    do Get_Field_Information ('GPJPSC01','MARK_CIRCLE',$GPJPSC01_Mark_circle,#dummy_width)

    let $_TableAlias = 'F'
    do Security-Param                   ! SQR Security

    move '1' to $Year4
    move '-' to $DDelimiter

! Row defintions
#define Row_0         29    ! First row where data printing starts. Social Establishment Reference ID is printed
#define Row_1         188   ! Row to start printing the establishment address details (the box at the bottom of the page)

! Column definitons
! Data Columns
#define Col_0a        27    ! SCEstabRef1
#define Col_0b        38    ! SCEstabRef2
#define Col_1a        15    ! Gpjp_hlth_card_num or Gpjp_pens_code
#define Col_1b        27    ! Name
#define Col_1c        53    ! GPJPSC01_Mark_circle Print Era
#define Col_1d        57    ! Print_year_in_era
#define Col_1e        62    ! Print_month
#define Col_1f        66    ! Print_day
#define Col_1g        70    ! GPJPSC01_Mark_circle Type 1 or 5
#define Col_1h        71    ! GPJPSC01_Mark_circle Type 2 or 6
#define Col_1i        81    ! Gpjp_cur_hel_rmn
#define Col_1j        100   ! Gpjp_cur_pen_rmn
#define Col_1k        120   ! Calc_delta_val

! For two months before #Object_Month
#define Col_2a        11    ! Obj_mo_N2
#define Col_2b        14    ! Gpjp_base_days_n2
#define Col_2c        23    ! Gpjp_mth_cash_rmn2
#define Col_2d        42    ! Gpjp_mth_mat_rmn2
#define Col_2e        62    ! Gpjp_sum_mth_rmn2
#define Col_2f        81    ! Gpjp_tot_mth_rmn
#define Col_2g        96    ! Print_year_of_appl
#define Col_2h        106   ! Month_of_appl
#define Col_2i        120   ! Change_amt

! For the previous month of #Object_Month
#define Col_3a        11    ! Obj_mo_N1
#define Col_3b        14    ! Gpjp_base_days_n1
#define Col_3c        23    ! Gpjp_mth_cash_rmn1
#define Col_3d        42    ! Gpjp_mth_mat_rmn1
#define Col_3e        62    ! Gpjp_sum_mth_rmn1
#define Col_3f        81    ! Gpjp_avg_mth_rmn
#define Col_3g        100   ! Gpjp_adj_mth_rmn

!Change year (era) and month
#define Col_3h        123   ! Print_changed_year
#define Col_3i        129   ! Gpjp_changed_mth

! Remarks
#define Col_4a        120   ! Part-time
#define Col_4b        120   ! Gpjp_remark1
#define Col_4c        120   ! Gpjp_remark2

! For the #Object_Month
#define Col_5a        11    ! Object_Month
#define Col_5b        14    ! Gpjp_base_days_n
#define Col_5c        23    ! Gpjp_mth_cash_rmn
#define Col_5d        42    ! Gpjp_mth_mat_rmn
#define Col_5e        62    ! Gpjp_sum_mth_rmn
#define Col_5f        81    ! Gpjp_rev_hel_rmn
#define Col_5g        100   ! Gpjp_rev_pen_rmn

! For the Establishment Address
#define Col_6a        31    ! Postal1
#define Col_6b        40    ! Postal2
#define Col_6c        27    ! Address1, Address2, EstabName, EstabMngID, EstabPhone


end-procedure ! Init-Report


!***********************************************************************
!                                                                      *
! Build-select                                                         *
!                                                                      *
!                                                                      *
! Called By:    Begin-Report                                           *
!                                                                      *
! Description:  Build dynamic select statement for main procedure      *
!                                                                      *
!***********************************************************************

begin-procedure Build-select

     move '' to $SlctSC_Estblm

     if $Rc_Gpjp_tax_estab <> ''
        concat 'AND F.GPJP_TAX_ESTAB = ' with  $SlctSC_Estblm
        concat   '''' with $SlctSC_Estblm
        concat  $Rc_Gpjp_tax_estab with  $SlctSC_Estblm
        concat   ''' ' with $SlctSC_Estblm
     end-if



end-procedure !Build-select


!***********************************************************************
!                                                                      *
! Process-Main                                                         *
!                                                                      *
!                                                                      *
! Called By:    Begin-Report                                           *
!                                                                      *
! Description:  Main processing                                        *
!                                                                      *
!***********************************************************************
begin-procedure Process-Main

let $Estab_save = ' '
let #Empl_count = 0
let $No_records = 'Y'

begin-select DISTINCT
F.EMPLID
F.CAL_RUN_ID
F.GP_PAYGROUP
F.CAL_ID
F.RSLT_SEG_NUM
F.GPJP_TAX_ESTAB
F.GPJP_OBJECT_DATE
F.GPJP_HLTH_CARD_NUM
F.GPJP_PENS_CODE
F.GPJP_BASE_DAYS_N2
F.GPJP_MTH_CASH_RMN2
F.GPJP_MTH_MAT_RMN2
F.GPJP_SUM_MTH_RMN2
F.GPJP_BASE_DAYS_N1
F.GPJP_MTH_CASH_RMN1
F.GPJP_MTH_MAT_RMN1
F.GPJP_SUM_MTH_RMN1
F.GPJP_BASE_DAYS_N
F.GPJP_MTH_CASH_RMN
F.GPJP_MTH_MAT_RMN
F.GPJP_SUM_MTH_RMN
F.GPJP_TOT_MTH_RMN
F.GPJP_AVG_MTH_RMN
F.GPJP_ADJ_MTH_RMN
F.GPJP_CUR_HEL_RMN
F.GPJP_CUR_PEN_RMN
F.GPJP_REV_HEL_RMN
F.GPJP_REV_PEN_RMN
F.CALC_DELTA_VAL
F.CHANGE_AMT
F.GPJP_CHANGED_MTH
F.GPJP_PART_TIME
F.GPJP_REMARK1
F.GPJP_REMARK2

        let $EmplID     = &F.Emplid
        let $CalRunID   = &F.Cal_run_id
        let $PayGroup   = &F.Gp_paygroup
        let $CalID      = &F.Cal_id
        let #SegNum     = &F.Rslt_seg_num
        let $Estab      = &F.Gpjp_tax_estab
        let $ObjDt      = &F.Gpjp_object_date
        let $EstabType  = 'SC'
        let $No_records = 'N'

        if $Estab_save = ' '
           do Get-Estab-Name
        end-if

        if $Estab <> $Estab_save
           if $Estab_save <> ' '
              do TaxEstab-Address
           end-if
           do Get-Estab-Name
           do TaxEstab-Change
           let $Estab_save = $Estab
           let #Empl_count = 0
        end-if

        add 1 to #Empl_count

        do Get-Personal-Data

        if #Empl_count > 5
           do TaxEstab-Address
           do TaxEstab-Change
           let #Empl_count = 1
        end-if

        do Print-Employee-data


FROM PS_GP_CAL_RUN A,
      PS_GP_CAL_RUN_DTL B,
      PS_GP_CALENDAR C,
      PS_GP_RUN_TYPE E,
      PS_GPJP_MTHRMN_TBL F
WHERE A.CAL_RUN_ID = B.CAL_RUN_ID
AND B.GP_PAYGROUP = C.GP_PAYGROUP
AND B.CAL_ID = C.CAL_ID
AND A.RUN_FINALIZED_IND = 'Y'
AND C.RUN_TYPE = E.RUN_TYPE
AND E.CALC_TYPE = 'P'
AND C.PYMT_DT >= $Objectdate
AND C.PYMT_DT < $Nextmonth
AND A.CAL_RUN_ID = F.CAL_RUN_ID
AND B.GP_PAYGROUP = F.GP_PAYGROUP
AND B.CAL_ID = F.CAL_ID
AND F.GPJP_SUBJECT_IND = '10'
[$SlctSC_Estblm]
[$SecurityClauseWithoutERN]
ORDER BY F.GPJP_TAX_ESTAB, F.GPJP_HLTH_CARD_NUM, F.GPJP_PENS_CODE

end-select

      If $No_records <> 'Y'
         do TaxEstab-Address
      end-if

end-procedure ! Process-Main


!***********************************************************************
!                                                                      *
! TaxEstab-Change                                                      *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure is executed whenever a change is        *
!               detected in Tax Establishment number.                  *
!                                                                      *
!***********************************************************************
begin-procedure TaxEstab-Change

          if $Estab_save <> ' '
             new-page
          end-if

          position ({Row_0}, 1)

          Alter-Printer
          point-size=9

          do print-gpjpsc(0, {Col_0a}, 08, $SCEstabRef1, 'xbbx')
          do print-gpjpsc(0, {Col_0b}, 10, $SCEstabRef2, 'xbbxbbxbbx')

          Alter-Printer
          point-size=7.2

end-procedure !TaxEstab-Change


!***********************************************************************
!                                                                      *
! TaxEstab-Address                                                     *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure prints the Tax Establishment address    *
!                                                                      *
!***********************************************************************
begin-procedure TaxEstab-Address

          position  ({Row_1},1)

          let $Postal = ltrim($EstabPostal,' ')
          unstring $Postal by '-' into  $Postal1 $Postal2
          if $Postal2 = ''
            let $Postal2 = substr($Postal,4,4)
          end-if

          let $SC_address = $EstabState || $EstabCity || $EstabAddr1 ||
                            $EstabAddr2 || $EstabAddr3

          let #Addr_length = length($SC_address)

          If #Addr_length > 40
             let $SC_address1 = $EstabState || $EstabCity || $EstabAddr1
             let $SC_address2 = $EstabAddr2 || $EstabAddr3
          else
             let $SC_address1 = $SC_address
             let $SC_address2 = ' '
          end-if

          do print-gpjpsc(0, {Col_6a}, 3, $Postal1, '')
          do print-gpjpsc(0, {Col_6b}, 4, $Postal2, '')

          position (+4 ,0)
          do print-gpjpsc(0, {Col_6c}, 40, $SC_address1, '')
          position (+3 ,0)
          do print-gpjpsc(0, {Col_6c}, 40, $SC_address2, '')
          position (+4 ,0)
          do print-gpjpsc(0, {Col_6c}, 50, $EstabName, '')
          position (+7 ,0)
          do print-gpjpsc(0, {Col_6c}, 50, $EstabMngID, '')
          position (+8 ,0)
          do print-gpjpsc(0, {Col_6c}, 15, $EstabPhone, '')

end-procedure !TaxEstab-Address


!***********************************************************************
!                                                                      *
! Get-Personal-Data                                                    *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure gets the employee's name, sex and       *
!               birthdate from the PS_PERSONAL_DT_FST view.            *
!                                                                      *
!***********************************************************************
begin-procedure Get-Personal-Data

      let  $Name = ' '
      let  $Sex = ' '
      let  $Birthdate = ' '

begin-select

PERS.EMPLID
PERS.NAME_FORMAL
PERS.SEX
PERS.BIRTHDATE

      let $Name = &PERS.Name_Formal
      let $Sex  = &PERS.Sex
      let $Birthdate = &PERS.Birthdate

FROM  PS_PERSONAL_DT_FST PERS
WHERE PERS.EMPLID        = $Emplid

end-select



end-procedure !Get-Personal-Data

!***********************************************************************
!                                                                      *
! Print-Employee-data                                                  *
!                                                                      *
!                                                                      *
! Called By:    Process-Main                                           *
!                                                                      *
! Description:  This procedure prints each employee's data             *
!                                                                      *
!***********************************************************************
begin-procedure Print-Employee-data


         evaluate #Empl_count
            when = 1
               position  (+21,1)
               break
            when = 2
               position  (+6,1)
               break
            when = 3
               position  (+6,1)
               break
            when = 4
               position  (+6,1)
               break
            when = 5
               position  (+6,1)
               break
         end-evaluate

         do Get-Japanese-Dates

         if $Sex = 'F'
             if $PensFundFlg = 'Y'
                let $Type  = '6'
             else
                let $Type  = '2'
             end-if
         else
             if $PensFundFlg = 'Y'
                let $Type  = '5'
             else
                let $Type  = '1'
             end-if
         end-if

         let $Gpjp_hlth_card_num = &F.Gpjp_hlth_card_num
         let $Gpjp_pens_code = &F.Gpjp_pens_code
         let $Gpjp_cur_hel_rmn = trunc(&F.Gpjp_cur_hel_rmn / 1000,0)
         let $Gpjp_cur_pen_rmn = trunc(&F.Gpjp_cur_pen_rmn / 1000,0)
         if $Rc_payee_id_type = '1'
         do print-gpjpsc(0,{Col_1a},8, $Gpjp_hlth_card_num, '99999999')         !(1)  box in FRD
         else
         do print-gpjpsc(0,{Col_1a},8, $Gpjp_pens_code, '99999999')             !(1)  box in FRD
         end-if
         do print-gpjpsc(0,{Col_1b},24, $Name, '')                              !(2)

        if $Print_era = '1'
            Alter-Printer point-size=11
            position (-3,0)
            print $GPJPSC01_Mark_circle (0, {Col_1c}, 1)
            position (+3,0)
         else
           if $Print_era = '3'
                position (-2,0)
                Alter-Printer point-size=12.2
                print $GPJPSC01_Mark_circle (0,{Col_1c},1)
                position (+2,0)
           else
             if $Print_era = '5'
                Alter-Printer point-size=13
                print $GPJPSC01_Mark_circle (0, {Col_1c}, 1)
             else ! $Print_era = '7'
                Alter-Printer point-size=12
                position (+1,0)
                print $GPJPSC01_Mark_circle (0, {Col_1c}, 1)
                position (-1,0)
             end-if
           end-if
         end-if 
        
        Alter-Printer
        point-size=7.2
            
         do print-gpjpsc(0,{Col_1d},3, $Print_year_in_era, 'xbx')               !(3)
         do print-gpjpsc(0,{Col_1e},3, $Print_month, 'xbx')                     !(3)
         do print-gpjpsc(0,{Col_1f},3, $Print_day, 'xbx')                       !(3)

         
        Alter-Printer  point-size=18.5 
           
        if $Type = '1'
           position (-1, 0)
           do print-gpjpsc(0,{Col_1g},2,  $GPJPSC01_Mark_circle, '')            !(4)
           position (+1, 0)
         else
           if $Type = '2'
             position (-1, 0)
             do print-gpjpsc(0,{Col_1h},2,  $GPJPSC01_Mark_circle, '')          !(4)
             position (+1, 0)
           else
             if $Type = '5'
               position (+1,0)
               do print-gpjpsc(0,{Col_1g},2,  $GPJPSC01_Mark_circle, '')        !(4)
            position (-1,0)
             else ! $Type = '6'
               position (+1,0)
               do print-gpjpsc(0,{Col_1h},2,  $GPJPSC01_Mark_circle, '')        !(4)
                position (-1,0)
             end-if
           end-if
         end-if

         Alter-Printer
         point-size=7.2

         do print-gpjpsc(0,{Col_1i},11, $Gpjp_cur_hel_rmn, '999,999,009')       !(20)
         do print-gpjpsc(0,{Col_1j},11, $Gpjp_cur_pen_rmn, '999,999,009')       !(21)

      position (+4, 0)

         let $Calc_delta_val     = round(&F.Calc_delta_val,0)

         if &F.Calc_delta_val <> 0
         do print-gpjpsc(0,{Col_1k},11,$Calc_delta_val,    '999,999,999')      !(25)
         end-if

      position (+2, 0)
         let $Obj_mo_N2 = mod(#Object_Month + 9, 12) + 1  ! It's month two months before #Object_Month.
         let $Gpjp_base_days_n2 = &F.Gpjp_base_days_n2
         let $Gpjp_mth_cash_rmn2 = round(&F.Gpjp_mth_cash_rmn2,0)
         let $Gpjp_mth_mat_rmn2  = round(&F.Gpjp_mth_mat_rmn2,0)
         let $Gpjp_sum_mth_rmn2  = round(&F.Gpjp_sum_mth_rmn2,0)
         let $Gpjp_tot_mth_rmn   = round(&F.Gpjp_tot_mth_rmn,0)
         move #Month_of_appl to $Month_of_appl 09
         
         do print-gpjpsc(0,{Col_2a},2,$Obj_mo_N2,'B9')
         do print-gpjpsc(0,{Col_2b},3,$Gpjp_base_days_n2,'999')               !(5)
         do print-gpjpsc(0,{Col_2c},11,$Gpjp_mth_cash_rmn2,'999,999,999')     !(6)
         do print-gpjpsc(0,{Col_2d},11,$Gpjp_mth_mat_rmn2, '999,999,999')     !(7)
         do print-gpjpsc(0,{Col_2e},11,$Gpjp_sum_mth_rmn2, '999,999,999')     !(8)
         do print-gpjpsc(0,{Col_2f},11,$Gpjp_tot_mth_rmn,  '999,999,999')     !(17)

         Alter-Printer
         point-size=9

         do print-gpjpsc(0,{Col_2g},3,$Print_year_of_appl,'xbx')             !(22)
         do print-gpjpsc(0,{Col_2h},3, $Month_of_appl,     'xbx')            !(22)

         Alter-Printer
         point-size = 7.2

      position (+1, 0)

         let $Change_amt         = round(&F.Change_amt,0)

         if &F.Change_amt <> 0
         do print-gpjpsc(0,{Col_2i},11, $Change_amt,'999,999,999')          !(26)
         end-if

      position (+5, 0)

         let $Obj_mo_N1 = mod(#Object_Month + 10, 12) + 1 ! It's the previous month of #Object_Month.
         let $Gpjp_base_days_n1  = &F.Gpjp_base_days_n1
         let $Gpjp_mth_cash_rmn1 = round(&F.Gpjp_mth_cash_rmn1,0)
         let $Gpjp_mth_mat_rmn1  = round(&F.Gpjp_mth_mat_rmn1,0)
         let $Gpjp_sum_mth_rmn1  = round(&F.Gpjp_sum_mth_rmn1,0)
         let $Gpjp_avg_mth_rmn   = round(&F.Gpjp_avg_mth_rmn,0)
         let $Gpjp_adj_mth_rmn   = round(&F.Gpjp_adj_mth_rmn,0)
         let $Gpjp_changed_mth   = &F.Gpjp_changed_mth

         do print-gpjpsc(0,{Col_3a},2, $Obj_mo_N1, 'B9')
         do print-gpjpsc(0,{Col_3b},3, $Gpjp_base_days_n1, '999')            !(9)
         do print-gpjpsc(0,{Col_3c},11,$Gpjp_mth_cash_rmn1, '999,999,999')   !(10)
         do print-gpjpsc(0,{Col_3d},11,$Gpjp_mth_mat_rmn1,  '999,999,999')   !(11)
         do print-gpjpsc(0,{Col_3e},11,$Gpjp_sum_mth_rmn1,  '999,999,999')   !(12)
         do print-gpjpsc(0,{Col_3f},11,$Gpjp_avg_mth_rmn,   '999,999,999')   !(18)
         if &F.Gpjp_adj_mth_rmn <> 0
         do print-gpjpsc(0,{Col_3g},11,$Gpjp_adj_mth_rmn,   '999,999,999')   !(19)
         end-if
         if &F.Gpjp_changed_mth <> 0
         position (-1, 0)
         do print-gpjpsc(0,{Col_3h},2,$Print_changed_year,'B9')               !(27)
         do print-gpjpsc(0,{Col_3i},2,$Gpjp_changed_mth,  'B9')               !(27)
         position (+1, 0)
         end-if

      position (+2, 0)

         let $Gpjp_remark1 = &F.Gpjp_remark1
         let $Gpjp_remark2 = &F.Gpjp_remark2

         do Get-Remarks-Lang
         let $part_time  = &F.GPJP_PART_TIME
         let $part_time1 = ' '
         let $Rc_year1 = &RC.Date_year_val 
         Let #Rc_year1 = to_number ($Rc_year1)
         IF (#Rc_year1 >= 2017 and $part_time = 'L')     
           let $part_time1 = 'Part-Time'||'<'||'3/4' 
           do print-gpjpsc(0,{Col_4a},13,$part_time1,'')
         End-if
         
      position (+2, 0)
         do print-gpjpsc(0,{Col_4b},13,$Gpjp_remark1,'')
         
      position (+2, 0)

         let $Obj_mo_N = #Object_Month
         let $Gpjp_base_days_n  = &F.Gpjp_base_days_n
         let $Gpjp_mth_cash_rmn = round(&F.Gpjp_mth_cash_rmn,0)
         let $Gpjp_mth_mat_rmn  = round(&F.Gpjp_mth_mat_rmn,0)
         let $Gpjp_sum_mth_rmn  = round(&F.Gpjp_sum_mth_rmn,0)
         let $Gpjp_rev_hel_rmn  = trunc(&F.Gpjp_rev_hel_rmn / 1000 ,0)
         let $Gpjp_rev_pen_rmn  = trunc(&F.Gpjp_rev_pen_rmn / 1000 ,0)

         do print-gpjpsc(0,{Col_5a},2,$Obj_mo_N,'B9')
         do print-gpjpsc(0,{Col_5b},3,$Gpjp_base_days_n,'999')              !(13)
         do print-gpjpsc(0,{Col_5c},11,$Gpjp_mth_cash_rmn, '999,999,999')   !(14)
         do print-gpjpsc(0,{Col_5d},11,$Gpjp_mth_mat_rmn,  '999,999,999')   !(15)
         do print-gpjpsc(0,{Col_5e},11,$Gpjp_sum_mth_rmn,  '999,999,999')   !(16)
         do print-gpjpsc(0,{Col_5f},11,$Gpjp_rev_hel_rmn, '999,999,009')    !(23)
         do print-gpjpsc(0,{Col_5g},11,$Gpjp_rev_pen_rmn, '999,999,009')    !(24)
         do print-gpjpsc(0,{Col_4c},13,$Gpjp_remark2,  '')
        

end-procedure !Print-Employee-data


!***********************************************************************
!                                                                      *
! Get-Japanese-Dates                                                   *
!                                                                      *
!                                                                      *
! Called By:    Print-Employee-data                                    *
!                                                                      *
! Description:  This procedure converts the birthdate and year of      *
!               application into the appropriate Japanese format       *
!                                                                      *
!***********************************************************************
begin-procedure Get-Japanese-Dates

        let $Date_1912 = '19120729'
        let $Date_1926 = '19261224'
        let $Date_1989 = '19890107'

        if $Birthdate <> ''
           do Convert-To-DTU-Date ($Birthdate, $Birthdate_out)
           let $Birthdate_cmp = substr($Birthdate_out,1,4) || substr($Birthdate_out,6,2) || substr($Birthdate_out,9,2)
           do Get-DateComponents ($Birthdate_cmp,#Year,#Month,#Day)

           if $Birthdate_cmp <= $Date_1912
              let $Print_era = '1'
              let #Print_year = #Year - 1868
              move #Print_year to $Print_year_in_era 09
           else
              if $Birthdate_cmp <= $Date_1926
                 let $Print_era = '3'
                 let #Print_year = #Year - 1911
                 move #Print_year to $Print_year_in_era 09
              else
                 if $Birthdate_cmp <= $Date_1989
                    let $Print_era = '5'
                    let #Print_year = #Year - 1925
                    move #Print_year to $Print_year_in_era 09
                 else
                    let $Print_era = '7'
                    let #Print_year = #Year - 1988
                    move #Print_year to $Print_year_in_era 09
                 end-if
              end-if
           end-if
           move #Month to $Print_month 09
           move #Day to   $Print_day 09

         else
           let  $Print_era = ' '
           let  $Print_year_in_era = ' '
           let  $Print_month = ' '
           let  $Print_day = ' '
        end-if

        do Convert-To-DTU-Date (&F.Gpjp_object_date, $Object_date)
        let $Object_date_YMD = substr($Object_date,1,4) || substr($Object_date,6,2) || substr($Object_date,9,2)
        do Get-DateComponents ($Object_date_YMD,#Object_Year,#Object_Month,#Object_Day)

        if #Object_Month = 12
           let #Appl_Month = 1
           let #Appl_Year = #Object_Year + 1
        else
           let #Appl_Month = #Object_Month + 1
           let #Appl_Year = #Object_Year
        end-if

        Move #Appl_Year  to $Appl_YY 9999
        Move #Appl_Month to $Appl_MM 09
        Move #Object_Day to $Appl_DD 09

        let $Appl_Date_YMD = $Appl_YY || $Appl_MM || $Appl_DD

        If $Appl_Date_YMD <= $Date_1912
            let #Era_year = #Appl_Year - 1868
            move #Era_year to $Year_in_era 09
        else
           if $Appl_Date_YMD <= $Date_1926
               let #Era_year = #Appl_Year - 1911
               move #Era_year to $Year_in_era 09
           else
              if $Appl_Date_YMD <= $Date_1989
                  let #Era_year = #Appl_Year - 1925
                  move #Era_year to $Year_in_era 09
              else
                 let #Era_year = #Appl_Year - 1988
                 move #Era_year to $Year_in_era 09
              end-if
           end-if
        end-if

        let $Print_year_of_appl = $Year_in_era
        let #Month_of_appl = #Appl_Month


        let #Changed_Month = &F.Gpjp_changed_mth

        If #Changed_Month <> 0
           do Get-Japanese-Dates1
        end-if

end-procedure !Get-Japanese-Dates


!***********************************************************************
!                                                                      *
! Get-Japanese-Dates1                                                  *
!                                                                      *
!                                                                      *
! Called By:    Get-Japanese-Dates                                     *
!                                                                      *
! Description:  This procedure converts the year of change in salary   *
!               into the appropriate Japanese format                   *
!                                                                      *
!***********************************************************************
begin-procedure Get-Japanese-Dates1

        If #Object_Month = 1
           if (#Changed_Month = 12 or #Changed_Month = 11)
               let #Changed_Year = #Object_Year - 1
           else
               let #Changed_Year = #Object_Year
           end-if
        else
           if #Object_Month = 2
               if #Changed_Month = 12
                   let #Changed_Year = #Object_Year - 1
               else
                   let #Changed_Year = #Object_Year
               end-if
           else
               let #Changed_Year = #Object_Year
           end-if
        end-if

        Move #Changed_Year  to $Changed_YY 9999
        Move #Changed_Month to $Changed_MM 09
        Move #Object_Day    to $Changed_DD 09

        let $Changed_Date_YMD = $Changed_YY || $Changed_MM || $Changed_DD

        If $Changed_Date_YMD <= $Date_1912
            let #Era_year = #Changed_Year - 1868
            move #Era_year to $Year_in_era 09
        else
           if $Changed_Date_YMD <= $Date_1926
               let #Era_year = #Changed_Year - 1911
               move #Era_year to $Year_in_era 09
           else
              if $Changed_Date_YMD <= $Date_1989
                  let #Era_year = #Changed_Year - 1925
                  move #Era_year to $Year_in_era 09
              else
                 let #Era_year = #Changed_Year - 1988
                 move #Era_year to $Year_in_era 09
              end-if
           end-if
        end-if

        let $Print_changed_year = $Year_in_era

end-procedure !Get-Japanese-Dates1


!***********************************************************************
!                                                                      *
! print-gpjpsc                                                         *
!                                                                      *
!                                                                      *
! Called By:    any procedure                                          *
!                                                                      *
! Description:  This procedure calls PRINT of the SQR command twice    *
!               in order to print both sides.                          *
!                                                                      *
!***********************************************************************
begin-procedure print-gpjpsc(#line, #column, #length, $outstring, $editmask)

   if #line = 0
      let #line = #_current-line
   end-if

   if #column = 0
      let #column = #_current-column
   end-if

   if length(rtrim($editmask,' ')) <> 0
      let $outstring = edit($outstring,$editmask)
   end-if

   print $outstring (#line, #column, #length)

end-procedure !print-gpjpsc

!***********************************************************************
!                                                                      *
! Get-Remarks-Lang                                                     *
!                                                                      *
!                                                                      *
! Called By:    Print-Employee-data                                    *
!                                                                      *
! Description:  This procedure gets remarks from                       *
!               the related language table.                            *
!                                                                      *
!***********************************************************************
begin-procedure Get-Remarks-Lang

If $Curr_Language_Cd = $PSOptions_Language_Cd
    goto GetRemarksLngExit
End-if

begin-select

MRL.GPJP_REMARK1
MRL.GPJP_REMARK2

      let $Gpjp_remark1 = &MRL.Gpjp_remark1
      let $Gpjp_remark2 = &MRL.Gpjp_remark2

FROM  PS_GPJP_MTHRMN_LNG MRL
WHERE MRL.EMPLID           = $Emplid
  AND MRL.CAL_RUN_ID       = $CalRunID
  AND MRL.GP_PAYGROUP      = $PayGroup
  AND MRL.CAL_ID           = $CalID
  AND MRL.RSLT_SEG_NUM     = #SegNum
  AND MRL.GPJP_OBJECT_DATE = $ObjDt
  AND MRL.LANGUAGE_CD      = $Curr_Language_Cd

end-select

GetRemarksLngExit:

end-procedure !Get-Remarks-Lang

!***********************************************************************
!                                                                      *
!                                                                      *
! SQCS included in the report                                          *
!                                                                      *
!***********************************************************************
#include 'getestab.sqc'     ! Get Establishment Data from the GPJP_TAX_ESTAB
#include 'datemath.sqc'     ! Date conversion procedures
#include 'number.sqc'       !Routines to format numbers
#include 'datetime.sqc'     !Routines for date and time formatting
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcsapi.sqc'      ! Replaces stdapi.sqc
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'readxlat.sqc'     ! Procedure to read values from xlattable
#include 'reset1.sqc'       ! Reset printer procedure
#include 'hrsecty.sqc'      ! Get SQR Security parameters
