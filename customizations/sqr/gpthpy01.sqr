!***********************************************************************
!                                                                      *
!  GPTHPY01.SQR    GLOBAL PAYROLL Thailand PAYSLIP PRINT PROGRAM       *
!                                                                      *
!  Description:                                                        *
!                  This program will take the results from the main GP *
!                  result tables and based on a payslp template ID     *
!                  attached to a paygroup, extract, format and print   *
!                  the Results.                                        *
!                                                                      *
!                                                                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2016/06/02:22:55:18                                 !
!       $Release:  HR92                                                !
!           $Bug:  23238976                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment

Begin-Setup
    #include 'setupdb.sqc'
    page-size 85 130

    declare printer
        type          = HPLASERJET
        orientation   = portrait
        top-margin    = .27
        left-margin   = 0.10
        font          = 3
        point-size    = 8
End-Setup

!List of constants for program
#define $payee_list     '10'
#define box_shade        10
#define colA 2
#define colB 8
#define colC 16
#define colD 54
#define colE 32
#define colF 40
#define colG 72
#define colH 56
!#define colI 72
#define colI 84
#define colII 84
!#define colI2 87
#define colI2 99
#define colI3 89
#define colI3 101
#define colJ 72
#define colK 90
#define colL 88
#define colL2 94
#define colM 96
#define colN 108
#define colO 112
#define colP 114

!Earnings and deductions column settings
#define ColED3  22
#define ColED5  33
#define ColED6  41
#define ColED7  49
#define ColED8  59
#define ColED9  71
#define ColED10 81
#define ColED11 91
#define ColED12 101
#define ColED13 111
#define ColED14 121

!Accumulators and its heading col settings
#define ColAC1  36
#define ColAC2  51
#define ColAC3  66
#define ColAC4  81
#define ColAC5  96
#define ColAC6  111

begin-program
    !#define DEBUGA 'TEST'

    Do Init-DateTime
    Do Get-Current-DateTime
    Do Init-Report
    #IFDEF DEBUGA
    Show 'end Init-Preport'
    #ENDIF

    !ePay Implementation Changes begins here
    Do GP-ePay-Control ! if ePay installed have a control row inserted.
    !ePay Implementation Changes ends here
    #IFDEF DEBUGA
    Show 'end GP-ePay-Control'
    #ENDIF

    Do Delete-RunControl
    #IFDEF DEBUGA
    Show 'end Delete-RunControl'
    #ENDIF

    Do Stdapi-Term
end-program

begin-heading 17
    graphic (1,1,130) horz-line

    Print $Header1 (8, {colI})   Bold
    Print $Header3 (9, {colI})   Bold
    Print $Header4a (12, {colI})  Bold
    Print $Header5a (13,{colI})   Bold
    Print $Header6a (14,{colI})     Bold
    Print $Header6b  (15, {colI})   Bold
    Print $Header7a  (16,{colII})    Bold
    Print $Header8a  (17,{colI})    Bold

    if $Del_opt <> '20'
        Print $ADDLINE1 (12, 20)   Bold  !Replacing header 6
        Print $ADDLINE2 (13, 20)   Bold  !Replacing Header 7
        Print $ADDLINE3  (14, 20)  Bold  !Replacing header 8
        Print $ADDLINE31 (15, 20)  Bold  !Replacing header 9
        Print $ADDLINE4  (16, 20)  Bold  !REplacing Header 9A
        Print $ADDLINE5  (17, 20)  Bold  !REplacing Header 9A
    end-if

    if $Del_opt = '20' ! Department
        Print $EmployeeName (8, 10)   Bold  !Replacing header 6
    end-if
end-heading
!
begin-Footing 4
    graphic (0,1,130) horz-line
End-Footing
!
!**************************************************************************
!
! Procedure: Init-Report
!
! Description: Initialise header and run control variables.
!
!**************************************************************************
begin-procedure Init-Report
    Do Stdapi-Init
    Do Select-Parameters
    !ePay Implementation Changes begins here
    Do GP-ePay-Init ! Initialize ePay variables
    !ePay Implementation Changes ends here

    Let $Report_ID = 'GPTHPY01'
    Let $Report_Language='US'
    Do Init_Report_Translation ($Report_ID, $Report_Language)
    Do Get_Field_Information ($Report_ID, 'DEPARTMENT'     ,    $Dept_Lbl,           #DW)
    Do Get_Field_Information ($Report_ID, 'EMPLOYEE'       ,    $EE_Lbl,             #DW)
    Do Get_Field_Information ($Report_ID, 'JOB_DESCRIPTION',    $JobDescr_Lbl,       #DW)
    Do Get_Field_Information ($Report_ID, 'LOCATION'       ,    $Location_Lbl,       #DW)
    Do Get_Field_Information ($Report_ID, 'NAME'           ,    $Name_Lbl,           #DW)
    Do Get_Field_Information ($Report_ID, 'PAYMENT_DATE'   ,    $PayDate_Lbl,        #DW)
    Do Get_Field_Information ($Report_ID, 'PAY_ENTITY'     ,    $PayEntity_Lbl,      #DW)
    Do Get_Field_Information ($Report_ID, 'PAY_PERIOD'     ,    $PayPeriod_Lbl,      #DW)
    Do Get_Field_Information ($Report_ID, 'PAY_PERIOD_TO'  ,    $PayPrdTo_Lbl,       #DW)
    Do Get_Field_Information ($Report_ID, 'PAY_RATE'       ,    $PayRate_Lbl,        #DW)
    Do Get_Field_Information ($Report_ID, 'END_MESSAGE',        $End_Msg,            #DW)
    Do Get_Field_Information ($Report_ID, 'PAY_SUMMARY',        $PAY_SUMMARY,        #DW)
    Do Get_Field_Information ($Report_ID, 'PAYMENT_DETAILS',    $PAYMENT_DETAILS,    #DW)
    Do Get_Field_Information ($Report_ID, 'CURRENT_VALUES',     $CURRENT_VALUES,     #DW)
    Do Get_Field_Information ($Report_ID, 'PAYBACK',            $PAYBACK,            #DW)
    Do Get_Field_Information ($Report_ID, 'ADJUSTMENTS',        $ADJUSTMENTS,        #DW)
    Do Get_Field_Information ($Report_ID, 'YTD_VALUES',         $YTD_VALUES,         #DW)
    Do Get_Field_Information ($Report_ID, 'TOTAL',              $TOTAL,              #DW)
    Do Get_Field_Information ($Report_ID, 'MESSAGES',           $MESSAGES,           #DW)
    Do Get_Field_Information ($Report_ID, 'DESCRIPTION',        $DESCRIPTION,        #DW)
    Do Get_Field_Information ($Report_ID, 'BASE',               $BASE,               #DW)
    Do Get_Field_Information ($Report_ID, 'PERCENT',            $PERCENT,            #DW)
    Do Get_Field_Information ($Report_ID, 'RATE',               $RATE,               #DW)
    Do Get_Field_Information ($Report_ID, 'UNITS',              $UNITS,              #DW)
    Do Get_Field_Information ($Report_ID, 'AMOUNT',             $AMOUNT,             #DW)
    Do Get_Field_Information ($Report_ID, 'UNIT',               $UNIT,               #DW)
    Do Get_Field_Information ($Report_ID, 'LEAVE_BALANCES',     $LEAVE_BALANCES,     #DW)
    Do Get_Field_Information ($Report_ID, 'ENTITLEMENT',        $ENTITLEMENT,        #DW)
    Do Get_Field_Information ($Report_ID, 'ADJUSTMENT',         $ADJUSTMENT,         #DW)
    Do Get_Field_Information ($Report_ID, 'TAKEN',              $TAKEN,              #DW)
    Do Get_Field_Information ($Report_ID, 'END_BALANCE',        $END_BALANCE,        #DW)
    Do Get_Field_Information ($Report_ID, 'DISBURSMENT_DETAIL', $DISBURSMENT_DETAIL, #DW)
    Do Get_Field_Information ($Report_ID, 'BANK',               $BANK,               #DW)
    Do Get_Field_Information ($Report_ID, 'B_S_B',              $B_S_B,              #DW)
    Do Get_Field_Information ($Report_ID, 'ACCOUNT_POUND',      $ACCOUNT_POUND,      #DW)

    Do Define-Values
    Do Process-Main
    
    ! Mobile Payslip Feature Start
    Do Update_Stats
    ! Mobile Payslip Feature End
end-procedure
!**************************************************************************
!
! Procedure: Define-Values
!
! Description: Define general SQL Dynamic Query Variables.
!
!**************************************************************************
begin-procedure Define-Values
    Let $EmplList = 'N'
    Let $DeptList = 'N'
    Let $LocnList = 'N'
    Let $PyenList = 'N'
    Let $PyGPList = 'N'
    Let $No_List  = 'Y'

    !Sort order
    if $sort_key1 <> '00'
        evaluate $sort_key1
            when = '10'
                Let $Sort_Order1  = 'ORDER BY PER.PAY_ENTITY '
            when = '20'
                Let $Sort_Order1  = 'ORDER BY JOB.LOCATION '
            when = '30'
                Let $Sort_Order1  = 'ORDER BY JOB.DEPTID '
            when = '40'
                Let $Sort_Order1  = 'ORDER BY PERS.NAME '
            When = '50'
                Let $Sort_Order1  = 'ORDER BY PER.GP_PAYGROUP '
            when-other
                break
        end-evaluate
    end-if

    if $sort_key2 <> '00'
        evaluate $sort_key2
            when = '10'
                Let $Sort_Order2  = ', PER.PAY_ENTITY '
            when = '20'
                Let $Sort_Order2  = ', JOB.LOCATION '
            when = '30'
                Let $Sort_Order2  = ', JOB.DEPTID '
            when = '40'
                Let $Sort_Order2  = ', PERS.NAME '
            When = '50'
                Let $Sort_Order2  = ', PER.GP_PAYGROUP '
            when-other
                break
        end-evaluate
    end-if

    if $sort_key3 <> '00'
        evaluate $sort_key3
            when = '10'
                Let $Sort_Order3  = ', PER.PAY_ENTITY '
            when = '20'
                Let $Sort_Order3  = ', JOB.LOCATION '
            when = '30'
                Let $Sort_Order3  = ', JOB.DEPTID '
            when = '40'
                Let $Sort_Order3  = ', PERS.NAME '
            When = '50'
                Let $Sort_Order3  = ', PER.GP_PAYGROUP '
            when-other
                break
        end-evaluate
    end-if

    String $Sort_order1 $Sort_order2 $Sort_order3 by ' ' into $sort_order

    if $Sort_Key1 = '00'
        Let $Sort_order = 'ORDER BY PERS.NAME '
    end-if

    if ($Sort_Key1 = '20' or $Sort_Key1 = '30') or ($Sort_Key2 = '20' or $Sort_Key2 = '30') or ($Sort_Key3 = '20' or $Sort_Key3 = '30')
        #define colI 72
        #define colI2 87
        #define colI3 89
    end-if
end-procedure
!**************************************************************************
! Procedure: Process-Main
! Description: Main processing section
!**************************************************************************
begin-procedure Process-Main
    Do Get-GP-Paygroup
    Do Process-Empl-List
    Do Process-Dept-List
    Do Process-Locn-List
    Do Process-Pay-Entity-List
    Do Process-PayGroup-List

    Let #J = 1

    if $No_List = 'Y'
        While #J <= #I
            Get $GP_Pygrp FROM Gp_Paygroups(#J)
            if #j = 1
                Let $WhereTemp = ' AND (PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
            Else
                if rtrim($GP_Pygrp,' ') <> ''
                    Let $TempString = ' OR PER.GP_PAYGROUP = ' || '''' || $GP_Pygrp || ''''
                    Let $WhereTemp = $WhereTemp || $TempString
                end-if
            end-if
            Let #J = #J + 1
        End-While
        if rtrim($WhereTemp,' ') <> ''
            Let $WhereTemp = $WhereTemp || ')'
            Let $WhereClause = $WhereTemp
            Do Process-Payee
        end-if
    end-if
end-procedure
!
!**************************************************************************
! Procedure: Process-Payee
! Description: Payee processing section
!**************************************************************************
begin-procedure Process-Payee
    Let $First_Empl = 'Y'
    #IFDEF DEBUGA
    Show '$Cal_Run_ID =' $Cal_Run_ID
    #ENDIF

    BEGIN-SELECT on-error=SQL-Error
PER.EMPLID
PER.EMPL_RCD
PERS.FIRST_NAME
PERS.MIDDLE_NAME
PERS.LAST_NAME
JOB.SETID_DEPT
JOB.DEPTID
JOB.SETID_LOCATION
JOB.LOCATION
JOB.COMPANY
PER.GP_PAYGROUP
JOB.COMP_FREQUENCY
JOB.COMPRATE
PER.PAY_ENTITY
PER.PYMT_DT
PER.SEG_BGN_DT
PER.SEG_END_DT
PER.CAL_RUN_ID
PER.CAL_ID
PER.RSLT_SEG_NUM
JOB.SETID_JOBCODE
JOB.JOBCODE

            Let $Emplid         = &PER.EMPLID
            Let #Empl_Rcd       = &PER.EMPL_RCD
            Let $EmployeeName   = rtrim(&PERS.FIRST_NAME || ' ' || &PERS.MIDDLE_NAME, ' ') || ' ' || &PERS.LAST_NAME

            Let $Company        = &JOB.COMPANY
            Let $Comp_Freq      = &JOB.COMP_FREQUENCY
            Let #Comprate       = &JOB.COMPRATE
            Let $GP_Paygroup    = &PER.GP_PAYGROUP

            Let $Pay_Ent        = &PER.PAY_ENTITY
            Let $Pymt_Dt        = &PER.PYMT_DT
            Let $Pay_Pd_From_Dt = &PER.SEG_BGN_DT
            Let $Pay_Pd_To_Dt   = &PER.SEG_END_DT
            Let $Cal_ID         = &PER.CAL_ID
            Let #Rslt_Seg_num   = &PER.RSLT_SEG_NUM
            ! Mobile Payslip Feature Start
            Let #RSEGNM         = &PER.RSLT_SEG_NUM
            ! Mobile Payslip Feature End

            Let $SetIDDept      = &JOB.SETID_DEPT
            Let $Deptid         = &JOB.DEPTID
            Let $SetIDLocn      = &JOB.SETID_LOCATION
            Let $Location       = &JOB.LOCATION

            Let $SetIDJobCode   = &JOB.SETID_JOBCODE
            Let $JobCode        = &JOB.JOBCODE

            !ePay Implementation Changes begins here
            Let $SegBgnDt      = &PER.SEG_BGN_DT
            !ePay Implementation Changes ends here

            !Check that the payee is not in an excluded location or dept

            Let $locn_excl             = 'N'
            Let $dept_excl             = 'N'

            Do Get-JOB-JOBTitle-Details
            Do Get_Payslip_ID

            Do Check_Excl_Dept
            Do Check_Excl_Loctn

            Let $AdrType = 'HOME'
            Do Get_Address
            if $locn_excl = 'N' and $dept_excl = 'N'
                Do Get_Payslip_Labels

                if $Del_opt = '50'
                    Let $Name = $EmployeeName
                    Do adformat
                    Let $ADDLINE6 = ''
                    Do Compress-Address
                end-if

                Do Get-PayEntity
                Do Get_location
                Do Get-Department-Details
                Do Get_Frequency
                Do Print_Empl_Details
                ! Mobile Payslip Feature Start
                Let $strEmplRcd = to_char(#Empl_Rcd)
                Let $strEmplRcd = rtrim($strEmplRcd,' ')
                Let $strEmplRcd = ltrim($strEmplRcd,' ')
                Let $Epay_Payslip_Id = $strEmplRcd || ' ' || $Pay_Dt_To_Conv
                Do Get-NetAmountValue
                ! Mobile Payslip Feature End
                Do Print_Summ_Lbls
                Do Get_Payment_Summ
                Do Print_Heading
                Do Get_ED_Sections
                ! Mobile Payslip Feature Start
                Do GP-mpslp_hdr_row
                ! Fetch accumulator elements for mobile payslip
                Do Get-Acum-Results-Mobile
                ! Mobile Payslip Feature End
                Do Get_Leave
                Do Get_Disburs_Banked
                Do Get_Disburs_NonBanked
                Do Get_Messages
                Print $End_Msg (+2,10) BOLD Center
                !ePay Implementation Changes begins here
                Let #EndPageNumber = #page-count
                !ePay Implementation Changes ends here
                !ePay Implementation Changes begins here
                Do GP-ePay-Guide  ! if ePay installed write Guide data for each payslip
                !ePay Implementation Changes ends here

                NEW-PAGE
            end-if

            FROM PS_GPTH_SS_PSLP_VW PER
                , PS_JOB JOB
                , PS_PERSON_NAME PERS
                , PS_FAST_SQR_SEC_VW SQRSEC
            WHERE PER.CAL_RUN_ID  = $Cal_Run_ID
              AND PER.EMPLID      = JOB.EMPLID
              AND PER.EMPL_RCD    = JOB.EMPL_RCD
              AND PER.EMPLID      = PERS.EMPLID
              AND JOB.EFFDT       = (SELECT MAX(J1.EFFDT)
                                       FROM PS_JOB J1
                                      WHERE J1.EMPLID   = JOB.EMPLID
                                        AND J1.EMPL_RCD = JOB.EMPL_RCD
          !                              AND J1.GP_PAYGROUP = JOB.GP_PAYGROUP
                                        AND J1.EFFDT   <= PER.PYMT_DT)
              AND JOB.EFFSEQ      = (SELECT MAX(J2.EFFSEQ)
                                       FROM PS_JOB J2
                                      WHERE J2.EMPLID   = JOB.EMPLID
                                        AND J2.EMPL_RCD = JOB.EMPL_RCD
                                        AND J2.EFFDT    = JOB.EFFDT)
              AND PER.RSLT_SEG_NUM= (SELECT MAX(PER1.RSLT_SEG_NUM) FROM PS_GPTH_SS_PSLP_VW PER1
                                         WHERE PER1.CAL_RUN_ID  = PER.CAL_RUN_ID
                                           AND PER1.EMPLID      = PER.EMPLID
                                           AND PER1.EMPL_RCD    = JOB.EMPL_RCD
                                           AND PER1.GP_PAYGROUP = PER.GP_PAYGROUP
                                           AND PER1.CAL_ID      = PER.CAL_ID
                                           AND PER1.PYMT_DT     = PER.PYMT_DT
                                    )
              AND SQRSEC.EMPLID=JOB.EMPLID
              AND SQRSEC.EMPL_RCD=JOB.EMPL_RCD
              AND SQRSEC.APPT_TYPE in ('0','3')
              AND SQRSEC.OPRID=$Prcs_OprID
              [$whereClause]
              [$sort_order]
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get-Department-Details
! Description: Get Deptartment Details
!**************************************************************************
begin-procedure Get-Department-Details
    Let $Dept_Name = ''
    BEGIN-SELECT
DEPT.DESCR

            Let $Dept_Name = &DEPT.DESCR

        FROM PS_DEPT_TBL DEPT
        WHERE DEPT.SETID  = $SetIDDept
          AND DEPT.DEPTID = $Deptid
          AND DEPT.EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_DEPT_TBL DEPT1
                                WHERE DEPT1.SETID  = DEPT.SETID
                                  AND DEPT1.DEPTID = DEPT.DEPTID
                                  AND DEPT1.EFFDT <= $Pymt_Dt
                           )
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Payslip_Labels
!
! Description: Get the payslip labels on delivery option for the payees
!              based on the paygroup
!
!**************************************************************************
begin-procedure Get_Payslip_Labels
    BEGIN-SELECT on-error=SQL-Error
PSLP.GPTH_DEL_OPT
PSLP.GPTH_LBL_ACUM1
PSLP.GPTH_LBL_ACUM2
PSLP.GPTH_LBL_ACUM3
PSLP.GPTH_LBL_ACUM4
PSLP.GPTH_LBL_ACUM5
PSLP.GPTH_LBL_ACUM6

            !Check if an override for the delivery address exits
            Let $Del_Opt               = &PSLP.GPTH_DEL_OPT

            Do Check_Override_Add
            !if the deleivery option is secondary get the details

            if $Del_opt = '60' !then get the secondary address
                Let $Name = $EmployeeName
                Let $AdrType = 'MAIL'
                Do Get_Address
                if $Adr2Found = 'N'
                    Let $Name = $EmployeeName
                    Do adformat
                    Let $ADDLINE6 = ''
                    Do Compress-Address
                else
                    Let $AdrType = 'MAIL'
                    Do Get_Address
                    Do adformat
                    Let $ADDLINE6 = ''
                    Do Compress-Address
                end-if
            end-if

            Let $Acum_Lbl1      = &PSLP.GPTH_LBL_ACUM1
            Let $Acum_Lbl2      = &PSLP.GPTH_LBL_ACUM2
            Let $Acum_Lbl3      = &PSLP.GPTH_LBL_ACUM3
            Let $Acum_Lbl4      = &PSLP.GPTH_LBL_ACUM4
            Let $Acum_Lbl5      = &PSLP.GPTH_LBL_ACUM5
            Let $Acum_Lbl6      = &PSLP.GPTH_LBL_ACUM6

        FROM PS_GPTH_PSLP PSLP,
             PS_GPTH_PYGRP_PSLP SGPAU
        WHERE PSLP.EFFDT = (SELECT MAX(PSLP1.EFFDT)
                         FROM PS_GPTH_PSLP PSLP1
                         WHERE PSLP1.EFFDT <= PSLP.EFFDT)
            AND PSLP.GPTH_PAYSLIP_ID = SGPAU.GPTH_PAYSLIP_ID
            AND GP_PAYGROUP = $GP_Paygroup
    END-SELECT
end-procedure
!**************************************************************************
!
! Procedure:  Print_Summ_Lbls
!
! Description: Print the summary headings/labels
!**************************************************************************
Begin-Procedure Print_Summ_Lbls

    !ePay Implementation Changes begins here
    Let #BeginPageNumber = #page-count
    !ePay Implementation Changes ends here

    Print $PAY_SUMMARY (+8) Center Bold Underline

    Do Find-Start-Pos ($Acum_Lbl1, {colAC1},#ReturnCol)
    Print $Acum_Lbl1 (+2, #ReturnCol) Bold

    Do Find-Start-Pos ($Acum_Lbl2, {colAC2},#ReturnCol)
    Print $Acum_Lbl2 (0, #ReturnCol) Bold

    Do Find-Start-Pos ($Acum_Lbl3, {colAC3},#ReturnCol)
    Print $Acum_Lbl3 (0, #ReturnCol) Bold

    Do Find-Start-Pos ($Acum_Lbl4, {colAC4},#ReturnCol)
    Print $Acum_Lbl4 (0, #ReturnCol) Bold

    Do Find-Start-Pos ($Acum_Lbl5, {colAC5},#ReturnCol)
    Print $Acum_Lbl5 (0, #ReturnCol) Bold

    Do Find-Start-Pos ($Acum_Lbl6, {colAC6},#ReturnCol)
    Print $Acum_Lbl6 (0, #ReturnCol) Bold

End-Procedure
!
!**************************************************************************
! Procedure:  Find-Start-Pos
! Description: Control the positioning  print the headings
!**************************************************************************
Begin-procedure Find-Start-Pos($Acum_Lbl, #StartCol,:#ReturnCol)
    Let $Acum_lbl = rtrim($Acum_lbl,' ')
    Let #Len = length($Acum_lbl)
    Let #ReturnCol = (#StartCol +11) - #Len
    if #ReturnCol <= 0
        Let #ReturnCol = #StartCol
    end-if
End-procedure
!
!**************************************************************************
! Procedure:  Pad-String
! Description: Control the positioning  of the values
!**************************************************************************
Begin-procedure Pad-String($Label, $Value,:$ReturnVal)
    Let #MaxLblLen = 17
    Let #Vallen  = length($Label)

    if #Vallen < #MaxLbllen
        Let #DiffLen = #MaxLblLen - #Vallen
        Let $PadVar = Lpad('',#Difflen,' ')
    else
        Let $PadVar = ''
    end-if

    Let $ReturnVal = $Label || $PadVar || ': ' || $Value
End-procedure
!
!**************************************************************************
! Procedure:  Print_Empl_Details
! Description: Print the headings
!**************************************************************************
begin-procedure Print_Empl_Details

    Do Format-DateTime($Pay_Pd_From_Dt, $Pay_Dt_From_Conv, {DEFDATE}, '', '')
    Do Format-DateTime($Pay_Pd_To_Dt,   $Pay_Dt_To_Conv,   {DEFDATE}, '', '')
    Do Format-DateTime($Pymt_Dt,        $Pymt_Dt_Conv,     {DEFDATE}, '', '')

    Let $Header1  = rtrim($PayPeriod_Lbl,' ')
    Let $Header3  = rtrim($PayDate_Lbl,' ')
    Let $Header4a = rtrim($EE_Lbl,' ')
    Let $Header5a = rtrim($PayEntity_Lbl,' ')
    Let $Header6a = rtrim($Dept_Lbl,' ')
    Let $Header6b = rtrim($Location_Lbl,' ')
    Let $Header7a = rtrim($PayRate_Lbl,' ')
    Let $Header8a = rtrim($JobDescr_Lbl,' ')

    Let $PayDates = $Pay_DT_From_Conv || ' To ' || $Pay_Dt_To_Conv
    Do Pad-String ($Header1,$PayDates,$Header1)

    Do Pad-String ($Header3,$Pymt_Dt_Conv,$Header3)

    Do Pad-String ($Header4A,$Emplid,$Header4A)

    Do Pad-String ($Header5A,$PayEntityDescr,$Header5A)

    ! if $Sort_key1 = '30' or $Sort_key2 = '30' or $Sort_key3 = '30'
    !    Let $SortDeptid = rtrim($DeptID,' ')
    !    Let $Sort_Dept = '(' || $SortDeptID || ')' || $Dept_Name
    ! else
    Let $Sort_Dept = $Dept_Name
    ! end-if

    Do Pad-String ($Header6A,$Sort_Dept,$Header6A)


    ! if $Sort_key1 = '20' or $Sort_key2 = '20' or $Sort_key3 = '20'
    !    Let $SortLocation = rtrim($Location,' ')
    !    Let $Sort_Location = '(' || $SortLocation || ')' || $lctnDesc
    ! else
    Let $Sort_Location = $lctnDesc
    ! end-if

    Do Pad-String ($Header6b,$Sort_Location,$Header6b)

    ! Let #compensation = round(#Comprate,2)
    ! Let $Compensation = to_char(#Compensation)
    Let $Comprate = to_char(#comprate)
    Let $Comprate = edit($Comprate, '999,999.99')
    Let $Compensation = ltrim($comprate,' ')

    Let $Compensation = $Compensation || ' (' || rtrim($freq_descr,' ') || ')'

    Do Pad-String ($Header7a,$Compensation,$Header7a)

    Do Pad-String ($Header8a,$Jobtitle,$Header8a)
end-procedure
!**************************************************************************
! Procedure: Print_Heading
! Description:  Print the headings breakup accross page
!**************************************************************************
!
begin-procedure Print_Heading

    Print $PAYMENT_DETAILS (+2,) Center Bold Underline
    Print '|' (+2,{ColA}) Bold
    graphic (0,3,25) horz-line
    graphic (0,44,27) horz-line
    Print $CURRENT_VALUES (0,28) bold
    Print $PAYBACK  (0,71) Bold
    graphic (0,81,8) horz-line
    Print $ADJUSTMENTS (0,89) bold
    graphic (0,101,8) horz-line
    Print '|' (0,109)
    graphic (0,110,4) horz-line
    Print $YTD_VALUES (0,114) bold
    graphic (0,125,4) horz-line
    Print '|' (0,129)

end-procedure
!**************************************************************************
!
! Procedure: Get_ED_Sections
!
! Description:  Get the sections applicable based on the payslip id
!
!**************************************************************************
begin-procedure Get_ED_Sections

    Let $sql-statement = ' Get_Section'
    BEGIN-SELECT on-error=SQL-Error
SECT.DESCR
SECT.SEQ_NUM
SECT.EFFDT

            Let $Sect_Hdg           = rtrim(&SECT.DESCR, ' ')
            Let #Sect_Seq_Num       = &SECT.SEQ_NUM
            Let $SECT_Effdt         = &SECT.EFFDT

            Do Print_ED_Headings
            Do Get-Section-Elements

            if #total_curr_amt <> 0
                Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
                Let #ReturnCol = #ReturnCol - 3
                Print $TOTAL (+2, {ColA}) Bold
                Print #total_curr_amt (0, #ReturnCol) edit '9999999.99'
            end-if

            if #total_pybck_amt <> 0
                Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
                Let #ReturnCol = #ReturnCol - 4
                Print #total_pybck_amt (0, #ReturnCol) edit '99999999.99'
            end-if

            if #total_adj_amt <> 0
                Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
                Let #ReturnCol = #ReturnCol - 4
                Print #total_adj_amt (0, #ReturnCol) edit '99999999.99'
            end-if

            if #Acum_Rslt_Amt_TTL <> 0
                Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
                Let #ReturnCol = #ReturnCol - 4
                !Print #Acum_Rslt_Amt_TTL (0, #ReturnCol)  edit '99999999.99'
            end-if

            Let $New_Page_ED       = 'N'
            Let #total_curr_amt    = 0
            Let #total_adj_amt     = 0
            Let #total_pybck_amt   = 0
            Let #Acum_Rslt_Amt_TTL = 0

        FROM PS_GPTH_PSLP_SECT SECT
        WHERE SECT.GPTH_PAYSLIP_ID = $Payslip_ID
            AND SECT.EFFDT = (SELECT MAX(SECT1.EFFDT) FROM PS_GPTH_PSLP_SECT SECT1
                                    WHERE SECT1.GPTH_PAYSLIP_ID = SECT.GPTH_PAYSLIP_ID
                                        AND SECT1.EFFDT <= $Pymt_Dt)
        ORDER BY SECT.SEQ_NUM ASC
    END-SELECT
end-procedure
!
!**************************************************************************
! Procedure   : Get-Section-Elements
! Description : Get details of Earnings / Deductions for each section line
!               definition
!**************************************************************************
begin-procedure Get-Section-Elements
    Let #LastPinNum = 0
    BEGIN-SELECT
GSE.SEQ_NUM5
PIN.PIN_NUM
GSE.DESCR
PIN.DESCR
PIN.PIN_NM
GSE.GPTH_DESC_TYPE
GSE.GPTH_YTD_AC_AMT
GSE.GPTH_YTD_AC_UNITS
GSE.GPTH_BSE_COMP_YN
GSE.GPTH_PCT_COMP_YN
GSE.GPTH_RTE_COMP_YN
GSE.GPTH_UNT_COMP_YN
GSE.GPTH_YTD_AC_AMT_YN
GSE.GPTH_YTD_AC_UNT_YN

            Let #ED_PinNum       = &PIN.PIN_NUM
            Let $ED_Descr        = &GSE.DESCR
            Let $Pin_Descr       = &PIN.DESCR
            Let $Descr_Type      = &GSE.GPTH_DESC_TYPE
            Let $Pin_Nm          = &PIN.PIN_NM
            Let $Print_Base_YN   = &GSE.GPTH_BSE_COMP_YN
            Let $Print_Pct_YN    = &GSE.GPTH_PCT_COMP_YN
            Let $Print_Rte_YN    = &GSE.GPTH_RTE_COMP_YN
            Let $Print_Unt_YN    = &GSE.GPTH_UNT_COMP_YN

            Let #AcumAmtPin      = &GSE.GPTH_YTD_AC_AMT
            Let #AcumUnitPin     = &GSE.GPTH_YTD_AC_UNITS
            
            if #ED_PinNum <> #LastPinNum
                Let #Acum_Rslt_Seg_Num = #Rslt_Seg_Num

                Let $Descr_Temp = $PIN_Descr

                evaluate $Descr_Type
                    when = '10'
                        Let $Descr_Temp = $PIN_Descr
                    when = '20'
                        Let $Descr_Temp = $ED_Descr
                    when = '30'
                        Let $Descr_Temp = $Pin_Nm
                end-evaluate

                Let $Descr = substr($Descr_Temp,1 , 16)
                Do Get-Acum-Results
                Do Get_ErnDed_Results
            end-if

            if #AcumRsltFound
                if NOT #ErnDedRowFound
                    Do Print-Ern-Ded-Values
                end-if
            end-if

            Let #LastPinNum  = #ED_PinNum

        FROM PS_GPTH_PSLP_ED GSE, PS_GP_PIN PIN
        WHERE GSE.GPTH_PAYSLIP_ID = $Payslip_ID
            AND GSE.EFFDT = $SECT_Effdt
            AND GSE.SEQ_NUM = #Sect_Seq_Num
            AND GSE.PIN_NUM = PIN.PIN_NUM
        ORDER BY GSE.SEQ_NUM5
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure  : Print-Ern-Ded-Values
! Description: Print the values from the ern-ded or accumulator variables
!            : for the earning / deduction being processed
!**************************************************************************
Begin-Procedure Print-Ern-Ded-Values
    if #Current-line >  80
        NEW-PAGE
        Do Print_Heading
        Do Print_ED_Headings
    end-if

    Print $Descr   (+1, {ColA}) BOLD

    if $Print_Base_YN = 'Y'
        if #Base_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED3},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            Print #Base_Rslt_Val (0, #ReturnCol) edit '9999999.99'
        end-if
    end-if

    if $Print_Pct_YN = 'Y'
        if #Pct_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED5},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            Print #Pct_Rslt_Val  (0, #ReturnCol) edit '9999999.99'
        end-if
    end-if

    if $Print_Rte_YN = 'Y'
        if #Rate_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED6},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            Print #Rate_Rslt_Val (0, #ReturnCol) edit '9999999.99'
        end-if
    end-if

    if $Print_Unt_YN = 'Y'
        if #Unit_Rslt_Val <> 0
            Do Find-Start-Pos ($TenCharVar, {colED7},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            Print #Unit_Rslt_Val (0, #ReturnCol) edit '9999999.99'
        end-if
    end-if

    if #EDCalc_Rslt_Val <> 0
        Do Find-Start-Pos ($TenCharVar, {colED8},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        Print #EDCalc_Rslt_Val (0, #ReturnCol)   edit '9999999.99'
    end-if

    if #Rslt_Paybk > 0
        Do Find-Start-Pos ($TenCharVar, {colED9},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        Print #Rslt_Paybk    (0, #ReturnCol)   edit '9999999.99'
    end-if

    if #Calc_Adj_Val <> 0
        Do Find-Start-Pos ($TenCharVar, {colED10},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        Print #Calc_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
    end-if

    if #Base_Adj_Val <> 0
        Do Find-Start-Pos ($TenCharVar, {colED11},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        Print #Base_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
    end-if

    if #Unit_Adj_Val <> 0
        Do Find-Start-Pos ($TenCharVar, {colED12},#ReturnCol)
        Let #ReturnCol = #ReturnCol - 3
        Print #Unit_Adj_Val  (0, #ReturnCol)  edit '9999999.99'
    end-if

    if #PinCounter = 0
        if #Acum_Rslt_Hrs <> 0
            Do Find-Start-Pos ($TenCharVar, {colED13},#ReturnCol)
            Let #ReturnCol = #ReturnCol - 3
            Print #Acum_Rslt_Hrs (0, #ReturnCol)  edit '9999999.99'
        end-if
        if #Acum_Rslt_Amt <> 0
            if #LastPinNum <> &PIN.PIN_NUM
                Do Find-Start-Pos ($TenCharVar, {colED14},#ReturnCol)
                Let #ReturnCol = #ReturnCol - 3
                Print #Acum_Rslt_Amt (0, #ReturnCol)  edit '9999999.99'
                Let #Acum_Rslt_Amt_TTL = #Acum_Rslt_Amt + #Acum_Rslt_Amt_TTL
            end-if
        end-if
    end-if
End-Procedure
!
!**************************************************************************
!
! Procedure: Get_ErnDed_Results
!
! Description: Get and print the earnings and deduction details for the payee.
!
!**************************************************************************
begin-procedure Get_ErnDed_Results
    Let $TenCharVar       = '1234567890'
    Let #LastPinNum       = 0
    Let #ErnDedRowFound   = 0
    Let #PinCounter       = 0

    Let #EDCalc_Rslt_Val  = 0
    Let #Unit_Rslt_Val    = 0
    Let #Rate_Rslt_Val    = 0
    Let #Base_Rslt_Val    = 0
    Let #Pct_Rslt_Val     = 0
    Let #Rslt_Paybk       = 0
    Let #Calc_Adj_Val     = 0
    Let #Base_Adj_Val     = 0
    Let #Unit_Adj_Val     = 0

    BEGIN-SELECT on-error=SQL-Error
RSLT.CALC_RSLT_VAL
RSLT.UNIT_RSLT_VAL
RSLT.RATE_RSLT_VAL
RSLT.BASE_RSLT_VAL
RSLT.PCT_RSLT_VAL
RSLT.RSLT_PAYBK
RSLT.CALC_ADJ_VAL
RSLT.BASE_ADJ_VAL
RSLT.UNIT_ADJ_VAL
! Mobile Payslip Feature Start
RSLT.SLICE_BGN_DT
RSLT.SLICE_END_DT
RSLT.ED_ASSIGN_INSTANCE
RSLT.PI_INSTANCE
RSLT.RECIPIENT_ID
RSLT.RECIPIENT_TAG
RSLT.USER_FLD1
RSLT.USER_FLD2
RSLT.USER_FLD3
RSLT.USER_FLD4
RSLT.USER_FLD5
RSLT.USER_FLD6
PRC.ORIG_CAL_RUN_ID
PRC.PRD_BGN_DT
PRC.PRD_END_DT
PRC.RUN_TYPE
PRC.PIN_ELEM_GRP_NUM
! Mobile Payslip Feature End

            Let #ErnDedRowFound   = 1

            Let #EDCalc_Rslt_Val  = &RSLT.CALC_RSLT_VAL
            Let #Unit_Rslt_Val    = &RSLT.UNIT_RSLT_VAL
            Let #Rate_Rslt_Val    = &RSLT.RATE_RSLT_VAL
            Let #Base_Rslt_Val    = &RSLT.BASE_RSLT_VAL
            Let #Pct_Rslt_Val     = &RSLT.PCT_RSLT_VAL
            Let #Rslt_Paybk       = &RSLT.RSLT_PAYBK
            Let #Calc_Adj_Val     = &RSLT.CALC_ADJ_VAL
            Let #Base_Adj_Val     = &RSLT.BASE_ADJ_VAL
            Let #Unit_Adj_Val     = &RSLT.UNIT_ADJ_VAL

            Let #total_curr_amt   = #total_curr_amt  + #EDCalc_Rslt_Val
            Let #total_pybck_amt  = #total_pybck_amt + #Rslt_Paybk
            Let #total_adj_amt    = #total_adj_amt   + #Calc_Adj_Val

            ! Mobile Payslip Feature Start
            Let $Orig_Calid         = &PRC.ORIG_CAL_RUN_ID
            Let $Prd_Bgn_Dt         = &PRC.PRD_BGN_DT
            Let $Prd_End_Dt         = &PRC.PRD_END_DT
            Let $Run_Type           = &PRC.RUN_TYPE
            Let #Pin_Elem_Grp_Num   = &PRC.PIN_ELEM_GRP_NUM
            Let $Slice_Bgn_Dt       = &RSLT.SLICE_BGN_DT
            Let $Slice_End_Dt       = &RSLT.SLICE_END_DT
            Let #Ed_Assign_Instance = &RSLT.ED_ASSIGN_INSTANCE
            Let #Pi_Instance        = &RSLT.PI_INSTANCE
            Let $Recipient_Id       = &RSLT.RECIPIENT_ID
            Let #Recipient_Tag      = &RSLT.RECIPIENT_TAG
            Let $User_Fld1          = &RSLT.USER_FLD1
            Let $User_Fld2          = &RSLT.USER_FLD2
            Let $User_Fld3          = &RSLT.USER_FLD3
            Let $User_Fld4          = &RSLT.USER_FLD4
            Let $User_Fld5          = &RSLT.USER_FLD5
            Let $User_Fld6          = &RSLT.USER_FLD6
            
            Do GP-mpslp_ernded_row
            ! Mobile Payslip Feature End

            Do Print-Ern-Ded-Values

            Let #PinCounter = #PinCounter + 1 ! increment the counter after printing the values for the 1st time.

        FROM PS_GP_RSLT_ERN_DED RSLT,
             PS_GP_PYE_PRC_STAT PRC
        WHERE PRC.EMPLID           = $Emplid
          AND PRC.EMPL_RCD         = #Empl_Rcd
          AND RSLT.EMPLID          = PRC.EMPLID
          AND RSLT.EMPL_RCD        = PRC.EMPL_RCD
          AND RSLT.CAL_RUN_ID      = PRC.CAL_RUN_ID
          AND RSLT.ORIG_CAL_RUN_ID = PRC.ORIG_CAL_RUN_ID
          AND RSLT.GP_PAYGROUP     = PRC.GP_PAYGROUP
          AND RSLT.CAL_ID          = PRC.CAL_ID
          AND PRC.CAL_RUN_ID       = $Cal_Run_ID
          AND PRC.CAL_ID           = $Cal_ID
          AND PRC.GP_PAYGROUP      = $GP_Paygroup
          AND RSLT.RSLT_SEG_NUM    = #Rslt_Seg_num
          AND RSLT.PIN_NUM         = #ED_PinNum
    END-SELECT
end-procedure
!
!**************************************************************************
! Procedure   : Get-Acum-Results
! Description : Get Acum Values for Earn/ Deductions.
!**************************************************************************
Begin-Procedure Get-Acum-Results
    Let #AcumRsltFound = 0
    Let #Acum_Rslt_Hrs = 0
    Let #Acum_Rslt_Amt = 0

    BEGIN-SELECT
ACUM.PIN_NUM
ACUM.CALC_RSLT_VAL
ACUM.RSLT_SEG_NUM

            Let #AcumRsltFound = 1
            Let #Calc_Rslt_Val = &ACUM.CALC_RSLT_VAL

            if &GSE.GPTH_YTD_AC_UNT_YN = 'Y'
                if &ACUM.PIN_NUM = #AcumUnitPin
                    Let #Acum_Rslt_Hrs = #Calc_Rslt_Val
                end-if
            end-if

            !Get the accumulated value of the amount, if entered at setup
            if &GSE.GPTH_YTD_AC_AMT_YN = 'Y'
                if &ACUM.PIN_NUM = #AcumAmtPin
                    Let #Acum_Rslt_Amt = #Calc_Rslt_Val
                end-if
            end-if

        FROM PS_GP_RSLT_ACUM ACUM
        WHERE (ACUM.PIN_NUM = #AcumUnitPin or ACUM.PIN_NUM = #AcumAmtPin)
            AND ACUM.EMPLID         = $Emplid
            AND ACUM.EMPL_RCD       = #Empl_Rcd
            AND ACUM.CAL_RUN_ID     = $Cal_Run_ID
            AND ACUM.CAL_ID         = $Cal_ID
            AND ACUM.GP_PAYGROUP    = $GP_Paygroup
            AND ACUM.RSLT_SEG_NUM   = #Acum_Rslt_Seg_Num
    END-SELECT
End-Procedure
!**************************************************************************
! Procedure   : Get-Acum-Results-Mobile
! Description : Fetch accumulator elements for mobile payslip.
!**************************************************************************
Begin-Procedure Get-Acum-Results-Mobile

    BEGIN-SELECT
B.SEQ_NUM
B.DESCR
PIN.DESCR  &MP_Pin_Descr
C.ORIG_CAL_RUN_ID
C.PIN_NUM
C.EMPL_RCD_ACUM
C.ACM_FROM_DT
C.ACM_THRU_DT
C.SEQ_NUM8
C.SLICE_BGN_DT
C.SLICE_END_DT
C.USER_KEY1
C.USER_KEY2
C.USER_KEY3
C.USER_KEY4
C.USER_KEY5
C.USER_KEY6
C.COUNTRY
C.CALC_RSLT_VAL
C.CALC_VAL
PRC.RUN_TYPE  &MP_Run_Type

            Let #MP_Sect_Seq_Num           = &B.SEQ_NUM
            Let $MP_Sect_Hdg               = &B.DESCR
            Let $MP_Pin_Descr              = &MP_Pin_Descr
            Let $MP_Orig_Calid             = &C.ORIG_CAL_RUN_ID
            Let #ACUM_PinNum               = &C.PIN_NUM
            Let #MP_Empl_Rcd_Acum          = &C.EMPL_RCD_ACUM
            Let $MP_Acm_From_Dt            = &C.ACM_FROM_DT
            Let $MP_Acm_Thru_Dt            = &C.ACM_THRU_DT
            Let #MP_Seq_Num8               = &C.SEQ_NUM8
            Let $MP_Slice_Bgn_Dt           = &C.SLICE_BGN_DT
            Let $MP_Slice_End_Dt           = &C.SLICE_END_DT
            Let $MP_User_Key1              = &C.USER_KEY1
            Let $MP_User_Key2              = &C.USER_KEY2
            Let $MP_User_Key3              = &C.USER_KEY3
            Let $MP_User_Key4              = &C.USER_KEY4
            Let $MP_User_Key5              = &C.USER_KEY5
            Let $MP_User_Key6              = &C.USER_KEY6
            Let $MP_Acum_Country           = &C.COUNTRY
            Let #MP_Calc_Rslt_Val          = &C.CALC_RSLT_VAL
            Let #MP_Calc_Val               = &C.CALC_VAL
            Let $MP_Run_Type               = &MP_Run_Type

            Do GP-mpslp_acum_row

        FROM PS_GPTH_PYGRP_PSLP A,
            PS_GPTH_PSLP_ACUM B,
            PS_GP_RSLT_ACUM C,
            PS_GP_PIN PIN,
            PS_GP_PYE_PRC_STAT PRC
        WHERE B.GPTH_PAYSLIP_ID = A.GPTH_PAYSLIP_ID
            AND B.EFFDT >= A.EFFDT
            AND B.EFFDT = (
                            SELECT MAX(B1.EFFDT)
                            FROM PS_GPTH_PSLP_ACUM B1
                            WHERE
                                A.GPTH_PAYSLIP_ID = B1.GPTH_PAYSLIP_ID
                           )
            AND (
                   C.PIN_NUM = B.GPTH_PIN_AC1_NUM
                OR C.PIN_NUM = B.GPTH_PIN_AC2_NUM
                OR C.PIN_NUM = B.GPTH_PIN_AC3_NUM
                OR C.PIN_NUM = B.GPTH_PIN_AC4_NUM
                OR C.PIN_NUM = B.GPTH_PIN_AC5_NUM
                OR C.PIN_NUM = B.GPTH_PIN_AC6_NUM
                )
            AND PIN.PIN_NUM         = C.PIN_NUM
            AND PRC.EMPLID          = C.EMPLID
            AND PRC.CAL_RUN_ID      = C.CAL_RUN_ID
            AND PRC.EMPL_RCD        = C.EMPL_RCD
            AND PRC.GP_PAYGROUP     = C.GP_PAYGROUP
            AND PRC.CAL_ID          = C.CAL_ID
            AND PRC.ORIG_CAL_RUN_ID = C.ORIG_CAL_RUN_ID
            AND C.EMPLID            = $Emplid
            AND C.CAL_RUN_ID        = $Cal_Run_ID
            AND C.EMPL_RCD          = #Empl_Rcd
            AND B.GPTH_PAYSLIP_ID   = $Payslip_Id
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get_Leave
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get_Leave
    Let $First_Abs = 'Y'
    BEGIN-SELECT
ABTMPL.SEQ_NUM
ABTMPL.GPTH_ENTL_PIN_NUM
ABTMPL.PIN_NUM           &PIN1
ABTMPL.GPTH_DESC_TYPE
ABTMPL.DESCR
ABTMPL.GPTH_PIN_AC1_NUM  &PIN2
ABTMPL.GPTH_PIN_AC2_NUM  &PIN3
ABTMPL.GPTH_PIN_AC3_NUM  &PIN4

            Let #Pin1 = &PIN1  ! Entitlement
            Let #Pin2 = &PIN2  ! Balance
            Let #Pin3 = &PIN3  ! Adjustment
            Let #Pin4 = &PIN4  ! Take

            Let $AB_Descr   = &ABTMPL.DESCR
            Let $Descr_Type = &ABTMPL.GPTH_DESC_TYPE

            Do Get-Leave-Data

            if #Pin1Val <> 0 or #Pin2Val <> 0 or #Pin3Val <> 0 or #Pin4Val <> 0
                if #Current-line >  80
                    NEW-PAGE
                    Do Print_Heading
                end-if
                if $First_Abs = 'Y'
                    Do Print_Abs_headings
                    Let $First_Abs = 'N'
                end-if
                Print $Descr        (+1, {ColA})

                if #Pin1Val <> 0
                    Print #Pin1Val  (0, {ColD})  edit '9999.999999'
                end-if
                if #Pin2Val <> 0
                    Print #Pin2Val  (0, {ColN})  edit '9999.999999'
                end-if
                if #Pin3Val <> 0
                    Print #Pin3Val  (0, {ColG})  edit '9999.999999'
                end-if
                if #Pin4Val <> 0
                    Print #Pin4Val  (0, {ColL})  edit '9999.999999'
                end-if
            end-if

        FROM PS_GPTH_PSLP_ABS ABTMPL
        WHERE ABTMPL.GPTH_PAYSLIP_ID = $Payslip_Id
            AND ABTMPL.EFFDT  = (SELECT MAX(ABTMPL1.EFFDT) FROM PS_GPTH_PSLP_ABS ABTMPL1
                                WHERE ABTMPL1.GPTH_PAYSLIP_ID = ABTMPL.GPTH_PAYSLIP_ID
                                    AND ABTMPL1.EFFDT <= $Pymt_Dt)
        ORDER BY ABTMPL.SEQ_NUM
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-Leave-Data
! Description: Get and print the leave balances for the payee.
!**************************************************************************
begin-procedure Get-Leave-Data
    Let #Pin1Val = 0
    Let #Pin2Val = 0
    Let #Pin3Val = 0
    Let #Pin4Val = 0

    BEGIN-SELECT on-error=SQL-Error
D.PIN_NUM
D.PIN_NM
ABS.CALC_RSLT_VAL
D.DESCR

            Let $Pin_Descr = &D.DESCR
            Let $Pin_Nm    = &D.PIN_NM

            evaluate $Descr_Type
                when = '10'
                    Let $Descr = $Ab_Descr
                when = '20'
                    Let $Descr = $Pin_Descr
                when = '30'
                    Let $Descr = $Pin_Nm
            end-evaluate

            if &D.PIN_NUM = #PIN1
                Let #Pin1Val = #Pin1Val + &ABS.CALC_RSLT_VAL
            end-if
            if &D.PIN_NUM = #PIN2
                Let #Pin2Val = #Pin2Val + &ABS.CALC_RSLT_VAL
            end-if
            if &D.PIN_NUM = #PIN3
                Let #Pin3Val = #Pin3Val + &ABS.CALC_RSLT_VAL
            end-if
            if &D.PIN_NUM = #PIN4
                Let #Pin4Val = #Pin4Val + &ABS.CALC_RSLT_VAL
            end-if

        FROM PS_GP_PYE_PRC_STAT A,
             PS_GP_PYE_SEG_STAT B,
             PS_GP_PIN D,
             PS_GP_RSLT_ACUM ABS,
             PS_GP_RUN_TYPE DR,
             PS_GP_CAL_PRD H
          WHERE A.CAL_RUN_ID         = B.CAL_RUN_ID
            AND A.EMPLID             = B.EMPLID
            AND A.EMPL_RCD           = B.EMPL_RCD
            AND A.GP_PAYGROUP        = B.GP_PAYGROUP
            AND A.CAL_ID             = B.CAL_ID
            AND DR.RUN_TYPE          = A.RUN_TYPE
            AND DR.CALC_TYPE         = 'A'
            AND A.CAL_PRD_ID         = H.CAL_PRD_ID
            AND A.PRD_BGN_DT         = H.PRD_BGN_DT
            AND A.PRD_END_DT         = H.PRD_END_DT
            AND B.EMPLID             = ABS.EMPLID
            AND B.CAL_RUN_ID         = ABS.CAL_RUN_ID
            AND B.EMPL_RCD           = ABS.EMPL_RCD
            AND ABS.EMPL_RCD         = ABS.EMPL_RCD_ACUM
            AND B.CAL_ID             = ABS.CAL_ID
            AND B.GP_PAYGROUP        = ABS.GP_PAYGROUP
            AND ABS.PIN_NUM          = D.PIN_NUM
            AND B.RSLT_SEG_NUM       = #Rslt_Seg_num
            AND B.RSLT_SEG_NUM       = ABS.RSLT_SEG_NUM
            AND (ABS.PIN_NUM = #PIN1 or ABS.PIN_NUM = #PIN2 or ABS.PIN_NUM = #PIN3 or ABS.PIN_NUM = #PIN4)
            AND (ABS.ACM_THRU_DT IS NULL
            OR
               (
                   (ABS.ACM_THRU_DT IS NOT NULL) AND
                    ABS.ACM_THRU_DT = (SELECT MAX(ABS1.ACM_THRU_DT)
                                                FROM PS_GP_RSLT_ACUM ABS1
                                                WHERE ABS.EMPLID        = ABS1.EMPLID
                                                AND ABS.CAL_RUN_ID      = ABS1.CAL_RUN_ID
                                                AND ABS.EMPL_RCD        = ABS1.EMPL_RCD
                                                AND ABS.GP_PAYGROUP     = ABS1.GP_PAYGROUP
                                                AND ABS.CAL_ID          = ABS1.CAL_ID
                                                AND ABS.ORIG_CAL_RUN_ID = ABS1.ORIG_CAL_RUN_ID
                                                AND ABS.RSLT_SEG_NUM    = ABS1.RSLT_SEG_NUM
                                                AND ABS.PIN_NUM         = ABS1.PIN_NUM
                                                AND ABS.EMPL_RCD_ACUM   = ABS1.EMPL_RCD_ACUM
                                       )
                )
            AND ABS.ACM_THRU_DT >= ABS.SLICE_END_DT)
            AND A.EMPLID             = $Emplid
            AND A.EMPL_RCD           = #Empl_Rcd
            AND A.CAL_RUN_ID         = $Cal_Run_Id
            AND A.GP_PAYGROUP        = $GP_Paygroup
            AND A.PRC_ORD_TS = (SELECT MAX(A21.PRC_ORD_TS) FROM PS_GP_PYE_PRC_STAT A21
                                               WHERE A21.EMPLID     = A.EMPLID
                                                 AND A21.CAL_RUN_ID = A.CAL_RUN_ID
                                                 AND A21.EMPL_RCD   = A.EMPL_RCD
                                                 AND A21.CAL_ID     = A.CAL_ID
                               )
    END-SELECT
end-procedure

!**************************************************************************
!
! Procedure: Get_Disburs_Banked
!
! Description: Get and print the banking details for the payee.
!
!**************************************************************************
begin-procedure Get_Disburs_Banked

    Let $First_Disb = 'Y'

    BEGIN-SELECT on-error=SQL-Error
B.GP_PMT_AMT
D.BRANCH_EC_CD
D.ACCOUNT_EC_ID
E.BANK_NM

            if #Current-line >  80
                NEW-PAGE
                Do Print_Heading
            end-if

            if $First_Disb = 'Y'
                Do Print_Disb_headings
                Let $First_Disb = 'N'
            end-if

            Let $Bank_Name = &E.BANK_NM
            Let $BSB       = &D.BRANCH_EC_CD

            Print $Bank_Name (+2, {ColA})

            Print $BSB (0, {ColD})

            Let $Acct_Nbr = &D.ACCOUNT_EC_ID
            Print $Acct_Nbr (0, {ColG})

            Let #Paymnt_Amt = &B.GP_PMT_AMT
            Print #Paymnt_Amt (0, {ColN}) edit 999999999.99

        FROM PS_GP_CALENDAR A,
             PS_GP_PAYMENT B,
             PS_GP_NET_DIST_DTL C,
             PS_PYE_BANKACCT D,
             PS_BANK_EC_TBL E
        WHERE B.CAL_ID      = A.CAL_ID
          AND B.GP_PAYGROUP = A.GP_PAYGROUP
          AND A.RUN_TYPE    = C.RUN_TYPE
          AND B.EMPLID      = C.EMPLID
          AND C.EMPLID      = D.EMPLID
          AND B.EMPL_RCD    = C.EMPL_RCD
          AND B.INSTANCE    = C.INSTANCE
          AND C.ACCOUNT_ID  = D.ACCOUNT_ID
          AND D.BANK_CD     = E.BANK_CD
          AND D.COUNTRY_CD  = E.COUNTRY_CD
          AND B.PMT_TYPE    = '01'
          AND C.EFFDT =(SELECT MAX(C1.EFFDT) FROM PS_GP_NET_DIST_DTL C1 WHERE C1.EMPLID = C.EMPLID
                            AND C1.EMPL_RCD = C.EMPL_RCD
                            AND C1.RUN_TYPE = C.RUN_TYPE
                            AND C1.INSTANCE = C.INSTANCE)
          AND B.EMPLID        = $Emplid
          AND B.EMPL_RCD      = #Empl_Rcd
          AND B.CAL_RUN_ID    = $Cal_Run_ID
          AND B.GP_PAYGROUP   = $GP_Paygroup
          AND B.CAL_ID        = $Cal_ID
    END-SELECT
end-procedure
!**************************************************************************
!
! Procedure: Get_Disburs_Nonbanked
!
! Description: Get and print the non banking disburment details for the payee.
!
!**************************************************************************
begin-procedure Get_Disburs_Nonbanked

    BEGIN-SELECT on-error=SQL-Error
PMNT.PAYMENT_MTHD    &PMNT_Mthd
SUM(PMNT.GP_PMT_AMT) &NetPayAmt

            if #Current-line >  75
                NEW-PAGE
                Do Print_Heading
            end-if

            if $First_Disb = 'Y'
                Do Print_Disb_headings
                Let $First_Disb = 'N'
            end-if

            Let #Paymnt_Amt = &NetPayAmt
            if #Paymnt_Amt <> 0
                Let $FieldName  = 'PAYMENT_MTHD'
                Let $FieldValue = &PMNT_Mthd

                Let $curr_language_cd = 'ENG'

                Do Read-Translate-Table
                Print $XlatLongName (+2,{ColA})
                Print #Paymnt_Amt   (0, {ColN}) edit 999999999.99
            end-if

        FROM PS_GP_PAYMENT PMNT
        WHERE PMNT.EMPLID      = $Emplid
          AND PMNT.EMPL_RCD    = #Empl_Rcd
          AND PMNT.CAL_RUN_ID  = $Cal_Run_ID
          AND PMNT.CAL_ID      = $Cal_ID
          AND PMNT.GP_PAYGROUP = $GP_Paygroup
          AND PMNT.PAYMENT_MTHD <> 'T'
          AND PMNT.PMT_TYPE    = '01'
        GROUP BY PMNT.PAYMENT_MTHD
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Messages
!
! Description: Get and print the messages for the payee.
!
!**************************************************************************
begin-procedure Get_Messages

    Let $First_Msg = 'Y'
    Let #Msg_Nbr = 0

    BEGIN-SELECT on-error=SQL-Error
B.GPTH_MSG_NBR
A.GPTH_MESSAGE

            if #Current-line > 75
                NEW-PAGE
                Do Print_Heading
            end-if

            if $First_Msg = 'Y'
                Print $MESSAGES (+2) Bold CENTER
                Let #Mesg_StartLine = #Current-Line
                Let $First_Msg = 'N'
            end-if

            Let #Msg_Nbr = &B.GPTH_MSG_NBR
            Let $Message = &A.GPTH_MESSAGE

            if #Msg_nbr <> 0
                Print #Msg_Nbr (+1, {ColC}) EDIT '9999'
                Print $Message (0, 25) Wrap {colK} 3
            end-if

        FROM PS_GPTH_PSLP_MSG A,
             PS_GPTH_PSLP_RSLT B
        WHERE A.CAL_RUN_ID    = B.CAL_RUN_ID
          AND A.GPTH_MSG_NBR  = B.GPTH_MSG_NBR
          AND B.EMPLID        = $Emplid
          AND B.EMPL_RCD      = #Empl_Rcd
          AND B.CAL_RUN_ID    = $Cal_Run_ID
          AND B.GP_PAYGROUP   = $GP_Paygroup
          AND B.CAL_ID        = $Cal_ID
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Print_ED_Headings
!
! Description: Prints the section headings
!
!**************************************************************************
begin-procedure Print_ED_Headings
    Print $Sect_Hdg (+3,) Center Bold Underline

    Print $DESCRIPTION (+1, {ColA}) Bold

    Do Find-Start-Pos ('Base', {colED3},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $BASE (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Percent', {colED5},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $PERCENT (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Rate', {colED6},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $RATE (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Units', {colED7},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $UNITS (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Amount', {colED8},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $AMOUNT (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Amount', {colED9},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $AMOUNT (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Amount', {colED10},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $AMOUNT (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Base', {colED11},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $BASE (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Unit', {colED12},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $UNIT (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Units', {colED13},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $UNITS (0, #ReturnCol) Bold

    Do Find-Start-Pos ('Amount', {colED14},#ReturnCol)
    Let #ReturnCol = #ReturnCol - 3
    Print $AMOUNT (0, #ReturnCol) Bold
end-procedure
!
!**************************************************************************
!
! Procedure: Print_Abs_headings
!
! Description: Print the absence data headings
!**************************************************************************

begin-procedure Print_Abs_headings
    Print $LEAVE_BALANCES (+3, {ColG}) Center Bold Underline

    Print $DESCRIPTION (+1, {ColA})  Bold
    Print $ENTITLEMENT (0,  {ColD})  Bold
    Print $ADJUSTMENT  (0,  {ColG})  Bold
    Print $TAKEN       (0,  {ColL2}) Bold
    Print $END_BALANCE (0,  {ColN})  Bold
end-procedure
!
!**************************************************************************
!
! Procedure: Print_Disb_headings
!
! Description: Print the disbusment data headings
!**************************************************************************
begin-procedure Print_Disb_headings
    Print $DISBURSMENT_DETAIL (+3, {ColG}) Center Bold Underline

    Print $BANK           (+1, {ColA}) Bold
    Print $B_S_B          (0, {ColD})  Bold
    Print $ACCOUNT_POUND  (0, {ColG})  Bold
    Print $AMOUNT         (0, {ColN})  Bold
end-procedure
!
!**************************************************************************
! Procedure: Get_location
! Description: Get the location of the payee
!**************************************************************************
begin-procedure Get_location
    BEGIN-SELECT on-error=SQL-Error
A.DESCR
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.ADDRESS4
A.CITY
A.STATE
A.POSTAL
A.COUNTY
A.COUNTRY

            if $Del_Opt = '30'
                Let $Name     = $EmployeeName
                Let $address1 = &A.ADDRESS1
                Let $address2 = &A.ADDRESS2
                Let $address3 = &A.ADDRESS3
                Let $address4 = &A.ADDRESS4
                Let $City     = rtrim(&A.CITY, ' ')
                Let $State    = &A.STATE
                Let $County   = &A.COUNTY
                Let $Country  = &A.COUNTRY
                Let $Postal   = &A.POSTAL

                Do adformat
                Do Compress-Address
            end-if
            Let $LctnDesc = rtrim(&A.DESCR,' ')

        FROM PS_LOCATION_TBL A
        WHERE A.LOCATION = $Location
          AND A.SETID    = $SetIDLocn
          AND A.EFFDT    = (SELECT MAX(A1.EFFDT) FROM PS_LOCATION_TBL A1
                               WHERE A1.EFFDT <= $Pymt_Dt
                                 AND A1.SETID = A.SETID
                                 AND A1.LOCATION = A.LOCATION
                           )
    END-SELECT
end-procedure
!
!**************************************************************************
! Procedure: Get-PayEntity
! Description: Get the pay entity details
!**************************************************************************
begin-procedure Get-PayEntity
    Let $PayEntityDescr = ''
    BEGIN-SELECT on-error=SQL-Error
PYE.DESCR

            Let $PayEntityDescr = rtrim(&PYE.DESCR,' ')

        FROM PS_GP_PYENT PYE
        WHERE PYE.PAY_ENTITY = $Pay_Ent
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Frequency
!
! Description: Get the frequency of the payee
!**************************************************************************
begin-procedure Get_Frequency
    BEGIN-SELECT on-error=SQL-Error
FREQ.DESCRSHORT

        Let $freq_descr = &FREQ.DESCRSHORT

    FROM PS_FREQUENCY_TBL FREQ
    WHERE FREQUENCY_ID = $Comp_Freq
             AND EFFDT = (SELECT MAX(EFFDT)
                             FROM PS_FREQUENCY_TBL FREQ1
                             WHERE FREQ.FREQUENCY_ID = FREQ1.FREQUENCY_ID)
    END-SELECT
end-procedure
!
!**************************************************************************
! Procedure         : Check_Excl_Dept
! Description   : Check if the payee's department has been excluded
!**************************************************************************
begin-procedure Check_Excl_Dept
    BEGIN-SELECT on-error=SQL-Error
DEPT.SETID
DEPT.DEPTID

            Let $dept_excl = 'Y'

        FROM PS_GPTH_PSLP_DEPT DEPT
        WHERE DEPTID = $Deptid
          AND SETID  = $SetIDDept
          AND GPTH_PAYSLIP_ID = $Payslip_Id
          AND EFFDT = (SELECT MAX(DEPT1.EFFDT) FROM PS_GPTH_PSLP_DEPT DEPT1
                            WHERE DEPT1.DEPTID          = DEPT.DEPTID
                            AND DEPT1.SETID           = DEPT.SETID
                            AND DEPT1.GPTH_PAYSLIP_ID = $Payslip_ID
                      )
    END-SELECT
end-procedure
!**************************************************************************
! Procedure         : Check_Excl_Loctn
! Description   : Check if the payee's location has been excluded
!**************************************************************************
begin-procedure Check_Excl_Loctn
    BEGIN-SELECT on-error=SQL-Error
LOCN.SETID
LOCN.LOCATION

            Let $locn_excl = 'Y'

        FROM PS_GPTH_PSLP_LOCTN LOCN
        WHERE LOCATION = $Location
          AND SETID    = $SetIDLocn
          AND GPTH_PAYSLIP_ID = $Payslip_Id
          AND EFFDT = (SELECT MAX(LOCN1.EFFDT) FROM PS_GPTH_PSLP_LOCTN LOCN1
                        WHERE LOCN1.LOCATION     = LOCN.LOCATION
                        AND LOCN1.SETID        = LOCN.SETID
                        AND LOCN1.GPTH_PAYSLIP_ID = $Payslip_ID
                      )
    END-SELECT
end-procedure

!**************************************************************************
! Procedure     : Get_Address
! Description   : Get the payee's address
!**************************************************************************
begin-procedure Get_Address
    Let $Adr2Found = 'N'
    ! Initialize the Address Line variables, to avoid wrong information being printed
    Let $ADDLINE1 = ''
    Let $ADDLINE2 = ''
    Let $ADDLINE3 = ''
    Let $ADDLINE31 = ''
    Let $ADDLINE4 = ''
    Let $ADDLINE5 = ''
    Let $ADDLINE6 = ''

    Let $address1  = ''
    Let $address2  = ''
    Let $address3  = ''
    Let $address4  = ''
    Let $County    = ''
    Let $City      = ''
    Let $StateCode = ''
    Let $Country   = ''
    Let $Postal    = ''

    BEGIN-SELECT on-error=SQL-Error
ADR.ADDRESS1
ADR.ADDRESS2
ADR.ADDRESS3
ADR.ADDRESS4
ADR.CITY
ADR.STATE
ADR.POSTAL
ADR.COUNTY
ADR.COUNTRY

            Let $Adr2Found = 'Y'

            Let $Name     = $EmployeeName
            Let $address1 = &ADR.ADDRESS1
            Let $address2 = &ADR.ADDRESS2
            Let $address3 = &ADR.ADDRESS3
            Let $address4 = &ADR.ADDRESS4
            Let $County   = &ADR.COUNTY
            Let $City     = rtrim(&ADR.CITY, ' ')
            Let $State    = &ADR.STATE
            Let $Country  = &ADR.COUNTRY
            Let $Postal   = &ADR.POSTAL

            Do adformat
            Do Compress-Address

            FROM PS_ADDRESSES ADR
            WHERE ADR.EMPLID = $Emplid
              AND ADR.ADDRESS_TYPE = $AdrType
              AND ADR.EFFDT = (SELECT MAX(EFFDT) FROM PS_ADDRESSES ADR1
                                  WHERE ADR1.EMPLID = ADR.EMPLID
                                    AND ADR1.ADDRESS_TYPE = ADR.ADDRESS_TYPE)
    END-SELECT

    ! If Address Entry wasn't found, populate $ADDLINE1 with EmployeeName.

    if $Adr2Found = 'N'
        Let $ADDLINE1 = $EmployeeName
    end-if
end-procedure
!**************************************************************************
! Procedure         : Check_Override_Add
! Description   : Check the existance of an override
!**************************************************************************
begin-procedure Check_Override_Add
    BEGIN-SELECT on-error=SQL-Error
PAY.GPTH_DEL_OPT

            Let $Del_Opt = &PAY.GPTH_DEL_OPT

        FROM PS_GPTH_PAYEE_TBL PAY
        WHERE EMPLID = $Emplid
        AND EMPL_RCD = #Empl_Rcd
        AND PAY.EFFDT = (SELECT MAX(PAY1.EFFDT)
                        FROM PS_GPTH_PAYEE_TBL PAY1
                             WHERE PAY1.EMPLID = PAY.EMPLID
                               AND PAY1.EMPL_RCD = PAY.EMPL_RCD)
    END-SELECT
end-procedure
!
!**************************************************************************
! Procedure         : Get_Payslip_ID
! Description   : Get the payslip id based on the paygroup of payee
!**************************************************************************
begin-procedure Get_Payslip_ID
    BEGIN-SELECT on-error=SQL-Error
ID.GPTH_PAYSLIP_ID

            Let $Payslip_Id = &ID.GPTH_PAYSLIP_ID

        FROM PS_GPTH_PYGRP_PSLP ID
        WHERE GP_PAYGROUP = $GP_Paygroup
          AND ID.EFFDT = (SELECT MAX(ID1.EFFDT)
                            FROM PS_GPTH_PYGRP_PSLP ID1
                              WHERE ID.GP_PAYGROUP = ID1.GP_PAYGROUP)
    END-SELECT
end-procedure
!**************************************************************************
! Procedure         : Get_Accum_Values
! Description   : Get the accumulated values for the payee
!**************************************************************************
begin-procedure Get_Accum_Values
    BEGIN-SELECT on-error=SQL-Error
ACC.CALC_RSLT_VAL

            Let #Calc_Rslt_Val = &ACC.CALC_RSLT_VAL

        FROM PS_GP_RSLT_ACUM ACC
        WHERE ACC.EMPLID        = $Emplid
          AND ACC.EMPL_RCD      = #Empl_Rcd
          AND ACC.CAL_RUN_ID    = $Cal_Run_ID
          AND ACC.GP_PAYGROUP   = $GP_Paygroup
          AND ACC.CAL_ID        = $Cal_ID
          AND ACC.RSLT_SEG_NUM  = #Rslt_Seg_num
          AND ACC.PIN_NUM       = #Pin_Num
          AND ACC.EMPL_RCD_ACUM = ACC.EMPL_RCD
    END-SELECT
end-procedure
!
!**************************************************************************
!
! Procedure: Get_Payment_Summ
!
! Description: Get and print the pay summary details for the payee.
!
!**************************************************************************
begin-procedure Get_Payment_Summ
    BEGIN-SELECT on-error=SQL-Error
C.GPTH_PIN_AC1_NUM                &GPTH_PIN_AC1_NUM
C.GPTH_PIN_AC2_NUM                &GPTH_PIN_AC2_NUM
C.GPTH_PIN_AC3_NUM                &GPTH_PIN_AC3_NUM
C.GPTH_PIN_AC4_NUM                &GPTH_PIN_AC4_NUM
C.GPTH_PIN_AC5_NUM                &GPTH_PIN_AC5_NUM
C.GPTH_PIN_AC6_NUM                &GPTH_PIN_AC6_NUM
C.DESCR                           &C.DESCR
C.SEQ_NUM
        
            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC1_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val1 = #Calc_Rslt_Val

            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC2_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val2 = #Calc_Rslt_Val

            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC3_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val3 = #Calc_Rslt_Val

            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC4_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val4 = #Calc_Rslt_Val

            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC5_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val5 = #Calc_Rslt_Val

            Let #Calc_Rslt_Val = 0

            Let #Pin_Num = &GPTH_PIN_AC6_NUM
            Do Get_Accum_Values
            Let #Calc_Acum_Val6 = #Calc_Rslt_Val

            Let $Pay_Summ_Desc  = &C.DESCR

            if #Calc_Acum_Val1 <> 0 or
               #Calc_Acum_Val2 <> 0 or
               #Calc_Acum_Val3 <> 0 or
               #Calc_Acum_Val4 <> 0 or
               #Calc_Acum_Val5 <> 0 or
               #Calc_Acum_Val6 <> 0
            
                Print $Pay_Summ_Desc (+1, {colA}) Bold

                if #Calc_Acum_Val1 <> 0
                    Print #Calc_Acum_Val1 (0, {colAC1})  edit '99999999.99'
                end-if
                if #Calc_Acum_Val2 <> 0
                    Print #Calc_Acum_Val2 (0, {colAC2})  edit '99999999.99'
                end-if
                if #Calc_Acum_Val3 <> 0
                    Print #Calc_Acum_Val3 (0, {colAC3})  edit '99999999.99'
                end-if
                if #Calc_Acum_Val4 <> 0
                    Print #Calc_Acum_Val4 (0, {colAC4})  edit '99999999.99'
                end-if
                if #Calc_Acum_Val5 <> 0
                    Print #Calc_Acum_Val5 (0, {colAC5})  edit '99999999.99'
                end-if
                if #Calc_Acum_Val6 <> 0
                    Print #Calc_Acum_Val6 (0, {colAC6})  edit '99999999.99'
                end-if
            end-if

        FROM PS_GPTH_PSLP_ACUM C,
             PS_GPTH_PYGRP_PSLP D,
             PS_GP_PYE_SEG_STAT B,
             PS_GP_PYE_PRC_STAT A
        WHERE C.GPTH_PAYSLIP_ID = D.GPTH_PAYSLIP_ID
          AND D.GP_PAYGROUP     = B.GP_PAYGROUP
          AND D.GPTH_PAYSLIP_ID = $payslip_id
          AND B.CAL_RUN_ID      = A.CAL_RUN_ID
          AND A.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
          AND B.EMPLID          = A.EMPLID
          AND B.EMPL_RCD        = A.EMPL_RCD
          AND B.CAL_ID          = A.CAL_ID
          AND B.GP_PAYGROUP     = A.GP_PAYGROUP
          AND A.EMPLID          = $Emplid
          AND A.EMPL_RCD        = #Empl_Rcd
          AND A.CAL_RUN_ID      = $Cal_Run_ID
          AND A.CAL_ID          = $Cal_ID
          AND A.GP_PAYGROUP     = $GP_Paygroup
          AND B.RSLT_SEG_NUM    = #Rslt_Seg_num
          AND B.RSLT_REV_NUM = (SELECT MAX (SEG1.RSLT_REV_NUM)
                                     FROM PS_GP_PYE_SEG_STAT SEG1
                                      WHERE B.EMPLID       = SEG1.EMPLID
                                        AND B.CAL_RUN_ID   = SEG1.CAL_RUN_ID
                                        AND B.EMPL_RCD     = SEG1.EMPL_RCD
                                        AND B.GP_PAYGROUP  = SEG1.GP_PAYGROUP
                                        AND B.CAL_ID       = SEG1.CAL_ID
                                        AND B.RSLT_SEG_NUM = SEG1.RSLT_SEG_NUM)
          AND C.EFFDT = (SELECT MAX(C1.EFFDT) FROM PS_GPTH_PSLP_ACUM C1
                                  WHERE C1.GPTH_PAYSLIP_ID = C.GPTH_PAYSLIP_ID
                                    AND C1.EFFDT <=$Pymt_Dt)
        ORDER BY C.SEQ_NUM
    END-SELECT
!  graphic (+2,{colAC1}, {colAC6}) Horz-line
end-procedure
!
!**************************************************************************
!
! Procedure: Delete-RunControl
!
! Description: Delete run control when report comes to successful end.
!
!**************************************************************************
begin-procedure Delete-RunControl
    #ifdef debugy
        Show 'Inside procedure Delete-RunControl'
    #end-if
    begin-SQL
        DELETE FROM PS_GPTH_RNCTL_PSLP
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL

    begin-SQL
        DELETE FROM PS_GPTH_PSLP_DP_RC
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL

    begin-SQL
        DELETE FROM PS_GPTH_PSLP_LC_RC
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL

    begin-SQL
        DELETE FROM PS_GPTH_PSLP_PE_RC
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL
    
    begin-SQL
        DELETE FROM PS_GPTH_PSLP_PG_RC
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL
    
    begin-SQL
        DELETE FROM PS_GPTH_PSLP_PY_RC
            WHERE OPRID         = $PRCS_OPRID
                AND RUN_CNTL_ID = $PRCS_RUN_CNTL_ID;

                #ifdef ORACLE
                   COMMIT;
                #endif
    end-SQL
end-procedure
!
!**************************************************************************
! Procedure: Process-Empl-List
!            Process Employees selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Empl-List
    BEGIN-SELECT
APY1.EMPLID    &Emplid
APY1.EMPL_RCD  &EmplRcd
        
            if rtrim(&Emplid, ' ') <> ''
                Let $No_List = 'N'
                Let $WhereClause = ''
                Let $EmplRcd = edit(&EmplRcd,'999')
                Let $WhereClause = ' AND PER.EMPLID = ' || '''' || &Emplid || '''' || ' AND PER.EMPL_RCD = ' || $EmplRcd
                Show 'Processing Emplid : ' &Emplid

                Do Process-Payee
            end-if
            
          FROM PS_GPTH_PSLP_PY_RC APY1
          WHERE APY1.OPRID          = $Prcs_OprID
            AND APY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Dept-List
!            Process Departments selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Dept-List
    BEGIN-SELECT
BPY1.SETID   &Setid
BPY1.DEPTID  &Deptid
        
            if rtrim(&Deptid, ' ') <> ''
                Let $No_List = 'N'
                Let $WhereClause = ''
                Let $WhereClause = ' AND JOB.SETID_DEPT = ' || '''' || &Setid || '''' || ' AND JOB.DEPTID = ' || '''' || &Deptid || ''''
                Show 'Processing DEPTID : ' &Deptid
                Do Process-Payee
            end-if
            
        FROM PS_GPTH_PSLP_DP_RC BPY1
        WHERE BPY1.OPRID          = $Prcs_OprID
          AND BPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Locn-List
!            Process Locations selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Locn-List
    BEGIN-SELECT
CPY1.SETID    &SetId1
CPY1.LOCATION &Location
        
            if rtrim(&Location, ' ') <> ''
                Let $No_List = 'N'
                Let $WhereClause = ''
                Let $WhereClause = ' AND JOB.SETID_LOCATION = ' || '''' || &Setid1 || '''' || ' AND JOB.LOCATION = ' || '''' || &Location || ''''
                Show 'Processing Location : ' &Location
                Do Process-Payee
            end-if

        FROM PS_GPTH_PSLP_LC_RC CPY1
        WHERE CPY1.OPRID          = $Prcs_OprID
          AND CPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Pay Entity List
!            Process Pay Entity selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-Pay-Entity-List
    BEGIN-SELECT
DPY1.PAY_ENTITY &PayEntity

            display 'In Process-Pay-Entity-List SQL'

            Let $WhereClause = ''

            if rtrim(&PayEntity, ' ') <> ''
                Let $No_List = 'N'
                Let $WhereClause = ' AND PER.PAY_ENTITY = ' || '''' || &PayEntity || ''''
                Do Process-Payee
            end-if
        FROM PS_GPTH_PSLP_PE_RC DPY1
        WHERE DPY1.OPRID          = $Prcs_OprID
          AND DPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Process-Paygroup List
!            Process Paygroup selected on Run Control Record
!**************************************************************************
Begin-Procedure Process-PayGroup-List
    BEGIN-SELECT
EPY1.GP_PAYGROUP &PayGrp

            if rtrim(&PayGrp, ' ') <> ''
                Let $No_List = 'N'
                Let $WhereClause = ''
                Let $WhereClause = ' AND PER.GP_PAYGROUP = ' || '''' || &PayGrp || ''''
                Show 'Processing Paygroup : ' &PayGrp
                Do Process-Payee
            end-if

        FROM PS_GPTH_PSLP_PG_RC EPY1
        WHERE EPY1.OPRID          = $Prcs_OprID
          AND EPY1.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT
End-Procedure
!
!**************************************************************************
! Procedure: Get-GP-Paygroup
!            Get the GP Paygroup if none of the lists has been chosen.
!**************************************************************************
Begin-procedure Get-GP-Paygroup

    Create-Array Name=Gp_Paygroups Size=10
    Field=Gp_Paygroup:Char
    Let #I = 1

    BEGIN-SELECT
DTL.GP_PAYGROUP
DTL.CAL_ID

            Let $GP_Pygrp = ''
            Let $Payroll_CalID = ''

            Let $Payroll_CalID = &DTL.CAL_ID
            Let $GP_Pygrp   = &DTL.GP_PAYGROUP

            Put $GP_Pygrp INTO Gp_Paygroups(#I)
            Let #I = #I + 1

        FROM PS_GP_CAL_RUN_DTL DTL
        WHERE DTL.CAL_RUN_ID = $Cal_Run_ID
          AND CALC_TYPE = 'P'
    END-SELECT

    BEGIN-SELECT
DTLA.GP_PAYGROUP
' '

            Let $GP_Pygrp   = &DTLA.GP_PAYGROUP

            Put $GP_Pygrp INTO Gp_Paygroups(#I)
            Let #I = #I + 1

        FROM PS_GP_CAL_RUN_OFF DTLA
        WHERE DTLA.CAL_RUN_ID = $Cal_Run_ID
    END-SELECT
End-procedure
!
!**************************************************************************
! Procedure: Select-Parameters
!            Select-Parameters
!**************************************************************************
Begin-procedure Select-Parameters
    BEGIN-SELECT
RC.CAL_RUN_ID
RC.GPTH_SORT_KEY1
RC.GPTH_SORT_KEY2
RC.GPTH_SORT_KEY3
        FROM  PS_GPTH_RNCTL_PSLP RC
        WHERE RC.OPRID          = $Prcs_OprID
          AND RC.RUN_CNTL_ID    = $Prcs_Run_Cntl_ID
    END-SELECT

    Let $Cal_Run_ID       = RTRIM(&RC.CAL_RUN_ID, ' ')
    Let $sort_key1        = &RC.GPTH_SORT_KEY1
    Let $sort_key2        = &RC.GPTH_SORT_KEY2
    Let $sort_key3        = &RC.GPTH_SORT_KEY3
    
    ! Mobile Payslip Feature Start
    Do init-mpslp($Cal_Run_ID)
    Let $GPwhere_clause = ' '
    Do clean_mpslp_records ($Cal_Run_ID, $GPwhere_clause)
    ! Mobile Payslip Feature End
end-procedure
!
!**************************************************************************
! Procedure: Get-JOB-JOBTitle-Details
!            Get the JOB Code title
!**************************************************************************
Begin-procedure Get-JOB-JOBTitle-Details
    Let $JobTitle = ''
    
    BEGIN-SELECT
JDD3.DESCR

            Let $JobTitle = &JDD3.DESCR

        FROM PS_JOBCODE_TBL JDD3
        WHERE JDD3.SETID   = $SetIDJobCode
          AND JDD3.JOBCODE = $JobCode
          AND JDD3.EFFDT   = (SELECT MAX(JDD31.EFFDT) FROM PS_JOBCODE_TBL JDD31
                                 WHERE JDD3.SETID = JDD31.SETID
                                   AND JDD3.JOBCODE = JDD31.JOBCODE
                                   AND JDD31.EFFDT <= $PYMT_DT)
    END-SELECT
End-Procedure
!
!************************************************************************
!************************************************************************
! Routines and code below have been added to enable ePay Implementation *
!************************************************************************
!************************************************************************
!
begin-Procedure Get-NetAmountValue
    Let #NetPayAccumulatorValue = 0
    Let #GrossPayAccumulatorValue = 0
    
    BEGIN-SELECT !on-error=SQL-Error
SUM(ENP.PIN_NET_VAL) &NetPayVal
SUM(ENP.PIN_GROSS_VAL) &GrossPayVal

            Let #NetPayAccumulatorValue = &NetPayVal
            Let #GrossPayAccumulatorValue = &GrossPayVal

        FROM PS_GP_PYE_SEG_STAT ENP
        WHERE ENP.EMPLID         = $Emplid
          AND ENP.EMPL_RCD       = #Empl_Rcd
          AND ENP.CAL_RUN_ID     = $Cal_Run_ID
          AND ENP.CAL_ID         = $Cal_ID
          AND ENP.GP_PAYGROUP    = $GP_Paygroup
    END-SELECT
End-Procedure
!
!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Init                                             *
! Initialize variables that we'll use for ePay processing              *
!***********************************************************************
begin-procedure GP-ePay-Init

    Let $sql-statement = 'GPTHPY01.sqr, GP-ePay-Init '

    Do Check-ePay-installed ($ePay_Installed)

    if $ePay_Installed = 'Y'
        Move 'GPTHPY01' to $ReportID

        Let #eV4 = To_number($prcs_process_instance)

        !* have the Output Working Directory from the Process parameters table
        Do Get-Output-Wrk-Directory(#eV4, $PRCSOUTPUTDIR, $PRCSNAME)

        !* have the URL id from the Payslip option table
        Do Get-ePay-URLid ('THA', $eV18)

        !* Global ePay variable settings used in GP-ePay procedures in this SQR
        Let $eV1 = $prcs_oprid
        Let $eV2 = $prcs_run_cntl_id
        Let $eV3 = $ReportID          !used for proc name instaed of prcsname from output wrk dir

        ! Open the file for writing epay control data
        ! Let $GP_PSLP_CTLFILE   = $eV3 || '.txt'
        ! Let $FILELAYOUT = 'GP_SS_PSLP_TMP'
        ! Do Open-ePay-Guide-DataFile($PRCSOUTPUTDIR,$GP_PSLP_CTLFILE)

        ! when we do not pass a control file
        Let $GP_PSLP_CTLFILE = ' '
        Let $FILELAYOUT = ' '
    end-if
end-procedure !GP-ePay-Init

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Guide                                            *
! Insert one row per payslip into the temporary guide table for ePay   *
!***********************************************************************
begin-procedure GP-ePay-Guide

    Let $sql-statement = 'GPTHPY01.sqr,GP-ePay-Guide'

    if $ePay_Installed = 'Y'

        ! THA Payslip does not exclude by run type. We can ignore this procedure

        !Do Get-RUN-TYPE  ! not an ePay procedure

        ! Mobile Payslip Feature Start
        ! Move this method to previous step
        ! Let $strEmplRcd = to_char(#Empl_Rcd)
        ! Let $strEmplRcd  = rtrim($strEmplRcd,' ')
        ! Let $strEmplRcd  = ltrim($strEmplRcd,' ')
        ! Mobile Payslip Feature End

        Let $eV5  = rtrim($Emplid, ' ')
        Let $eV5  = ltrim($eV5, ' ')
        Let $eV6  = rtrim($Cal_Run_ID,' ')
        Let $eV6  = ltrim($eV6,' ')
        Let $eV7  = 'GPTHA'
        
        ! Mobile Payslip Feature Start
        ! Move this method to previous step
        ! Let $eV8  = $strEmplRcd || ' ' || $Pay_Dt_To_Conv      ! gp epay payslip id
        Let $eV8  = $Epay_Payslip_Id
        ! Mobile Payslip Feature End

        !Let $eV8  = rtrim($CAL_run_ID, ' ') || '_' || $eV5 || '_' || $strEmplRcd        ! gp epay payslip id
        Let $eV9  = $pymt_dt
        Let $eV10 = $Pay_Pd_To_Dt
        Let $eV11 = $SegBgnDt
        ! Perform routine to retrieve the NetPay amount based on Net pay pin number
        
        ! Mobile Payslip Feature Start
        ! Move this method to previous step
        ! Do Get-NetAmountValue
        ! Mobile Payslip Feature End
        
        Let #eV12 = #NetPayAccumulatorValue ! net pay

        Let $eV13 = $PayEntityDescr   ! THA will populate the Pay Entity Name in the Description column.

        !Let $eV14 = rtrim($RUN_TYPE, ' ')
        Let $eV14 = ' ' ! we are not populating the run type
        Let $eV15 = 'ORIG' ! payslip status ORIGINAL
        Let $eV16 = $eV5 || '_' || $eV6 || '_' ||$eV7 || '_' ||$eV8 || '.pdf'       !sysfilename of the payslip pdf
        Let $eV17 = $eV16                                                           !userfilename  - what the payee sees filename as
        Let #eV19 = #BeginPageNumber                                                !begin page number of payslip in output report
        Let #eV20 = #EndPageNumber                                                  !end page number of payslip in output report
        !Let $eV18 = ' ' ! we do not have file URL ID

        !Input:OPRID, RUN_CNTL_ID, PROCNAME, DATAINST, EMPLID, CAL_RUN_ID, SRCPRODUCT,
        !GP_PSLP_ID,PYMT_DT,PRD_END_DT,PRD_BGN_DT,#NET_PAY,Payslip DESCR,RUN_TYPE,
        !PSLP_STATUS,ATTACHSYSFILENAME, ATTACHUSERFILE,FILEURLID, BGNPGNBR,ENDPGNBR

        Do Insert-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

        !   Do Write-ePay-Guide-Data($eV1,$eV2,$eV3,#eV4,$eV5,$eV6,$eV7,$eV8,$eV9,$eV10,$eV11,#eV12,$eV13,$eV14,$eV15,$eV16,$eV17,$eV18,#eV19,#eV20)

    end-if
end-procedure ! GP-ePay-Guide

!***********************************************************************
! For ePay Purposes: Online Payslip                                    *
! Procedure : GP-ePay-Control                                          *
! Insert one row per report into the epay run control table            *
!***********************************************************************
begin-procedure GP-ePay-Control

    Let $sql-statement = 'GPTHPY01.sqr, GP-ePay-Control '

    if $ePay_Installed = 'Y'
        Let $rptid = lower($ReportID)
        Let $eCV7  = $rptid || '_' || $prcs_process_instance || '.PDF'
        Let $eCV8  = rtrim($PRCSOUTPUTDIR, ' ')

        ! Input:OPRID,RUN_CNTL_ID,PROCNAME,SPLIT_IND,ATCH_IND,CTLFILE,SOURCEFILE,
        ! SOURCELOC,WORKINGLOC,FILELAYOUT,DATAINST,FILEURLID,CLEANUP

        Do Insert-ePay-RunControl($eV1,$eV2,$eV3,'Y', 'Y', $GP_PSLP_CTLFILE, $eCV7,$eCV8,' ',$FILELAYOUT,#eV4,$eV18,'Y')
    end-if
end-procedure !GP-ePay-Control
! Mobile Payslip Feature Start
!***********************************************************************
! For Mobile Payslip Feature                                           *
! Procedure : GP-mpslp_hdr_row                                         *
! Description: Insert data to Mob Payslip Header                       *
!***********************************************************************
begin-procedure GP-mpslp_hdr_row

    Let MPSLP_HDR.EMPLID(0)              = $Emplid
    Let MPSLP_HDR.CAL_RUN_ID(0)          = $Cal_Run_ID
    Let MPSLP_HDR.EMPL_RCD(0)            = #Empl_Rcd
    Let MPSLP_HDR.GP_PAYGROUP(0)         = $GP_Paygroup
    Let MPSLP_HDR.CAL_ID(0)              = $Cal_ID
    Let MPSLP_HDR.ORIG_CAL_RUN_ID(0)     = $Orig_Calid             ! GP_PYE_PRC_STAT
    Let MPSLP_HDR.RSLT_SEG_NUM(0)        = #RSEGNM                 ! GPTH_SS_PSLP_VW
    Let MPSLP_HDR.GP_PSLP_SRCPRODUCT(0)  = 'GPTHA'
    Let MPSLP_HDR.GP_PSLP_ID(0)          = $Epay_Payslip_Id
    Let MPSLP_HDR.SEG_BGN_DT(0)          = $Pay_Pd_From_Dt         ! GPTH_SS_PSLP_VW
    Let MPSLP_HDR.SEG_END_DT(0)          = $Pay_Pd_To_Dt           ! GPTH_SS_PSLP_VW
    Let MPSLP_HDR.PRD_BGN_DT(0)          = $Prd_Bgn_Dt             ! GP_PYE_PRC_STAT
    Let MPSLP_HDR.PRD_END_DT(0)          = $Prd_End_Dt             ! GP_PYE_PRC_STAT
    Let MPSLP_HDR.PYMT_DT(0)             = $Pymt_Dt                ! GPTH_SS_PSLP_VW
    Let MPSLP_HDR.GP_MPSLP_GROSS(0)      = #GrossPayAccumulatorValue ! &GROSS
    Let MPSLP_HDR.CALC_DELTA_VAL(0)      = 0 ! TODO
    Let MPSLP_HDR.CALC_VAL(0)            = 0 ! TODO
    Let MPSLP_HDR.GP_MPSLP_NET(0)        = #NetPayAccumulatorValue ! &NET
    Let MPSLP_HDR.CALC_DELTA_VAL2(0)     = 0 ! TODO
    Let MPSLP_HDR.CALC_VAL2(0)           = 0 ! TODO
    Let MPSLP_HDR.GP_COMPANY(0)          = $Company                ! JOB
    Let MPSLP_HDR.RUN_TYPE(0)            = $Run_Type               ! GP_PYE_PRC_STAT
    
    Do insert_mpslp_hdr_row
end-procedure !GP-mpslp_hdr_row
!
!***********************************************************************
! For Mobile Payslip Feature                                           *
! Procedure : GP-mpslp_ernded_row                                      *
! Description: Insert Earns & deductions to Mob Payslip Header         *
!***********************************************************************
begin-procedure GP-mpslp_ernded_row

    Let MPSLP_ED.EMPLID(0)               = $Emplid
    Let MPSLP_ED.CAL_RUN_ID(0)           = $Cal_Run_ID
    Let MPSLP_ED.EMPL_RCD(0)             = #Empl_Rcd
    Let MPSLP_ED.GP_PAYGROUP(0)          = $GP_Paygroup
    Let MPSLP_ED.CAL_ID(0)               = $Cal_ID
    Let MPSLP_ED.ORIG_CAL_RUN_ID(0)      = $Orig_Calid         ! GP_PYE_PRC_STAT
    Let MPSLP_ED.RSLT_SEG_NUM(0)         = #RSEGNM             ! GPTH_SS_PSLP_VW
    Let MPSLP_ED.GP_PSLP_SRCPRODUCT(0)   = 'GPTHA'
    Let MPSLP_ED.GP_PSLP_ID(0)           = $Epay_Payslip_Id
    Let MPSLP_ED.INSTANCE(0)             = To_number($prcs_process_instance)
    Let MPSLP_ED.PIN_NUM(0)              = #ED_PinNum          ! GP_PIN
    Let MPSLP_ED.SLICE_BGN_DT(0)         = $Slice_Bgn_Dt       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.SLICE_END_DT(0)         = $Slice_End_Dt       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.PIN_ELEM_GRP_NUM(0)     = #Pin_Elem_Grp_Num   ! PS_GP_PYE_PRC_STAT
    Let MPSLP_ED.ED_ASSIGN_INSTANCE(0)   = #Ed_Assign_Instance ! GP_RSLT_ERN_DED
    Let MPSLP_ED.PI_INSTANCE(0)          = #Pi_Instance        ! GP_RSLT_ERN_DED
    Let MPSLP_ED.PRD_BGN_DT(0)           = $Prd_Bgn_Dt         ! GP_PYE_PRC_STAT
    Let MPSLP_ED.PRD_END_DT(0)           = $Prd_End_Dt         ! GP_PYE_PRC_STAT
    Let MPSLP_ED.SEG_BGN_DT(0)           = $Pay_Pd_From_Dt     ! GPTH_SS_PSLP_VW
    Let MPSLP_ED.SEG_END_DT(0)           = $Pay_Pd_To_Dt       ! GPTH_SS_PSLP_VW
    Let MPSLP_ED.PYMT_DT(0)              = $Pymt_Dt            ! GPTH_SS_PSLP_VW
    Let MPSLP_ED.RUN_TYPE(0)             = $Run_Type           ! GP_PYE_PRC_STAT
    Let MPSLP_ED.CALC_RSLT_VAL(0)        = #EDCalc_Rslt_Val    ! GP_RSLT_ERN_DED
    Let MPSLP_ED.CALC_ADJ_VAL(0)         = #Calc_Adj_Val       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.CALC_DELTA_VAL(0)       = 0                   ! TODO
    Let MPSLP_ED.BASE_RSLT_VAL(0)        = #Base_Rslt_Val      ! GP_RSLT_ERN_DED
    Let MPSLP_ED.BASE_ADJ_VAL(0)         = #Base_Adj_Val       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.RATE_RSLT_VAL(0)        = #Rate_Rslt_Val      ! GP_RSLT_ERN_DED
    Let MPSLP_ED.UNIT_RSLT_VAL(0)        = #Unit_Rslt_Val      ! GP_RSLT_ERN_DED
    Let MPSLP_ED.UNIT_ADJ_VAL(0)         = #Unit_Adj_Val       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.PCT_RSLT_VAL(0)         = #Pct_Rslt_Val       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.RECIPIENT_ID(0)         = $Recipient_Id       ! GP_RSLT_ERN_DED
    Let MPSLP_ED.RECIPIENT_TAG(0)        = #Recipient_Tag      ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD1(0)            = $User_Fld1          ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD2(0)            = $User_Fld2          ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD3(0)            = $User_Fld3          ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD4(0)            = $User_Fld4          ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD5(0)            = $User_Fld5          ! GP_RSLT_ERN_DED
    Let MPSLP_ED.USER_FLD6(0)            = $User_Fld6          ! GP_RSLT_ERN_DED
    ! These value will be used by mobile payslip for grouping
    Let MPSLP_ED.GP_MPSLP_SECTION(0)     = to_char(#Sect_Seq_Num * 10) ! GPTH_PSLP_SECT
    Let MPSLP_ED.GP_MPSLP_SPRNT_ORD(0)   = #Sect_Seq_Num       ! GPTH_PSLP_SECT
    Let MPSLP_ED.GP_MPSLP_SUBSECTN(0)    = $Sect_Hdg           ! GPTH_PSLP_SECT
    Let MPSLP_ED.GP_MPSLP_PRNT_ORD(0)    = #Sect_Seq_Num       ! GPTH_PSLP_SECT
    Let MPSLP_ED.GP_MPSLP_PIN_DESCR(0)   = $Pin_Descr          ! GP_PIN
    
    Do insert_mpslp_ernded_row
end-procedure !GP-mpslp_ernded_row
!
!***********************************************************************
! For Mobile Payslip Feature                                           *
! Procedure : GP-mpslp_acum_row                                        *
! Description: Insert Accumulator to Mob Payslip Header                *
!***********************************************************************
begin-procedure GP-mpslp_acum_row

    Let MPSLP_ACUM.EMPLID(0)               = $Emplid
    Let MPSLP_ACUM.CAL_RUN_ID(0)           = $Cal_Run_ID
    Let MPSLP_ACUM.EMPL_RCD(0)             = #Empl_Rcd
    Let MPSLP_ACUM.GP_PAYGROUP(0)          = $GP_Paygroup
    Let MPSLP_ACUM.CAL_ID(0)               = $Cal_ID
    Let MPSLP_ACUM.ORIG_CAL_RUN_ID(0)      = $MP_Orig_Calid      ! GP_RSLT_ACUM
    Let MPSLP_ACUM.GP_PSLP_SRCPRODUCT(0)   = 'GPTHA'
    Let MPSLP_ACUM.GP_PSLP_ID(0)           = $Epay_Payslip_Id
    Let MPSLP_ACUM.RSLT_SEG_NUM(0)         = #RSEGNM             ! GPTH_SS_PSLP_VW
    Let MPSLP_ACUM.PIN_NUM(0)              = #ACUM_PinNum        ! PS_GP_RSLT_ACUM
    Let MPSLP_ACUM.EMPL_RCD_ACUM(0)        = #MP_Empl_Rcd_Acum   ! GP_RSLT_ACUM
    Let MPSLP_ACUM.ACM_FROM_DT(0)          = $MP_Acm_From_Dt     ! GP_RSLT_ACUM
    Let MPSLP_ACUM.ACM_THRU_DT(0)          = $MP_Acm_Thru_Dt     ! GP_RSLT_ACUM
    Let MPSLP_ACUM.SEQ_NUM8(0)             = #MP_Seq_Num8        ! GP_RSLT_ACUM
    Let MPSLP_ACUM.PIN_ELEM_GRP_NUM(0)     = 0                   ! TODO: Some accumulator elements do not have group number
    Let MPSLP_ACUM.SLICE_BGN_DT(0)         = $MP_Slice_Bgn_Dt    ! GP_RSLT_ACUM
    Let MPSLP_ACUM.SLICE_END_DT(0)         = $MP_Slice_End_Dt    ! GP_RSLT_ACUM
    Let MPSLP_ACUM.SEG_BGN_DT(0)           = $Pay_Pd_From_Dt     ! GPTH_SS_PSLP_VW
    Let MPSLP_ACUM.SEG_END_DT(0)           = $Pay_Pd_To_Dt       ! GPTH_SS_PSLP_VW
    Let MPSLP_ACUM.PRD_BGN_DT(0)           = $Prd_Bgn_Dt         ! GP_PYE_PRC_STAT
    Let MPSLP_ACUM.PRD_END_DT(0)           = $Prd_End_Dt         ! GP_PYE_PRC_STAT
    Let MPSLP_ACUM.PYMT_DT(0)              = $Pymt_Dt            ! GPTH_SS_PSLP_VW
    Let MPSLP_ACUM.RUN_TYPE(0)             = $MP_Run_Type        ! GP_PYE_PRC_STAT
    Let MPSLP_ACUM.USER_KEY1(0)            = $MP_User_Key1       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.USER_KEY2(0)            = $MP_User_Key2       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.USER_KEY3(0)            = $MP_User_Key3       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.USER_KEY4(0)            = $MP_User_Key4       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.USER_KEY5(0)            = $MP_User_Key5       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.USER_KEY6(0)            = $MP_User_Key6       ! GP_RSLT_ACUM
    Let MPSLP_ACUM.COUNTRY(0)              = $MP_Acum_Country    ! GP_RSLT_ACUM
    Let MPSLP_ACUM.CALC_RSLT_VAL(0)        = #MP_Calc_Rslt_Val   ! GP_RSLT_ACUM
    Let MPSLP_ACUM.CALC_DELTA_VAL(0)       = 0                   ! TODO
    Let MPSLP_ACUM.CALC_VAL(0)             = #MP_Calc_Val        ! GP_RSLT_ACUM
    ! These value will be used by mobile payslip for grouping
    Let MPSLP_ACUM.GP_MPSLP_SECTION(0)     = to_char(#MP_Sect_Seq_Num * 10) ! PS_GPTH_PSLP_ACUM
    Let MPSLP_ACUM.GP_MPSLP_SPRNT_ORD(0)   = #MP_Sect_Seq_Num    ! PS_GPTH_PSLP_ACUM
    Let MPSLP_ACUM.GP_MPSLP_SUBSECTN(0)    = $MP_Sect_Hdg        ! PS_GPTH_PSLP_ACUM
    Let MPSLP_ACUM.GP_MPSLP_PRNT_ORD(0)    = #MP_Sect_Seq_Num    ! PS_GPTH_PSLP_ACUM
    Let MPSLP_ACUM.GP_MPSLP_PIN_DESCR(0)   = $MP_Pin_Descr       ! GP_PIN

    Do insert_mpslp_acum_row
end-procedure !GP-mpslp_acum_row
! Mobile Payslip Feature End
!
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for date arithmetic
#Include 'stdapi.sqc'    !Routines to Update Run Status
#Include 'number.sqc'    !Routines to format numbers
#Include 'adformat.sqc'  !Routines to format address
#Include 'readxlat.sqc'  !Routines for Translate Table
#Include 'sqrtrans.sqc'  !Routines for Strings Table
!ePay Implementation Changes begins here
#Include 'gpsspslp.sqc'     ! ePay SQC with ePay procedures
!ePay Implementation Changes ends here