!***********************************************************************
!  GPCHAL07:  Element Contribution List (Lohnartenstamm)               *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                !
!           $Bug:  30286464                                            !
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'

begin-setup
! Page layout for detailed report
declare-layout DETAILED
  paper-size={PAGE_PAPER_SIZE}
  orientation=PORTRAIT
  line-height={LINE_HEIGHT}              ! 72/printer_point-size
  char-width={CHAR_WIDTH}                ! points, to handle max cols
  left-margin=.05
  right-margin=.05
end-declare

declare-report DETAILED
   layout=DETAILED
   printer-type=HP
end-declare

! Page layout for summary report
declare-layout SUMMARY
  paper-size={PAGE_PAPER_SIZE}
  orientation=LANDSCAPE
  line-height={LINE_HEIGHT}              ! 72/printer_point-size
  char-width={CHAR_WIDTH}                ! points, to handle max cols
  left-margin=.05
  right-margin=.05
end-declare

declare-report SUMMARY
   layout=SUMMARY
   printer-type=HP
end-declare

end-setup


#define col1  10       !PIN_NM
#define col2  33       !DESCR
#define col3h 15       !GL P ENTITY & BU
#define col3  29       !GL
#define col4  71       !Accum1
#define col4h 47       !67
#define col99 141      !Membership / Category

#define col1c 60
#define col2c 72
#define col3c 84
#define col4c 96
#define col5c 108
#define col6c 120
#define col7c 132
#define col8c 144
!***********************************************************************

!***********************************************************************
! Column positions for Detailed Report

#define colP1 10
#define colP2 25
#define colP2a 35
#define colP3 50
#define colP4 95
! accu columns
#define colPAc1   60
#define colPAc2   70
#define colPAc3   80
#define colPAc4   90
#define colPAc1a   63
#define colPAc2a   73
#define colPAc3a   83
#define colPAc4a   93
! print class columns
#define colPPc2    40
#define colPPc3    48
#define colPPc4   58
#define colPPc5    67
#define colPPc6    76
#define colPPc7    85
#define colPPc8    94
#define colPPc9    103

! End - Column positions for Detailed Report
!***********************************************************************
!***********************************************************************
! jjj

#define usablespace   80

! jjj
!***********************************************************************

begin-setup

create-array name=Accum size=11
        field=arr1:number
        field=eltype:number

create-array name=Acc1 size=11
        field=ar1:char

create-array name=GlEffDate size=1
        field=GlEffDt1:char:300
        field=GlEffDt2:char:300
        field=GlEffDt3:char:300

end-setup

!***********************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do Delete_Rec_Al07
  do Stdapi-Term
  do Get-Log
end-PROGRAM

!***********************************************************************

begin-procedure Delete_Rec_Al07
#Debug Show '-> Delete_Rec_Al07  '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL071_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL072_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL073_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL074_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL078_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL079_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL075_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif


#Debug Show '<- Delete_Rec_Al07  '
end-procedure Delete_Rec_Al07
!***********************************************************************

begin-procedure Process-Main
do Get_Pin_Description

let $FlagTemp = 'N'
do Format-DateTime($Ctl_From_Dt,$From_DPrnt,{DEFDATE},'','')
do Format-DateTime($Ctl_To_Dt,$To_DPrnt,{DEFDATE},'','')

let #Counter = 0
let #nAccums = 0    !number of Accums
BEGIN-SELECT
COUNT(*)        &Counter
 let #Counter = &Counter
 let #nAccums = #Counter
FROM PS_GPCH_RC_AL07 G
WHERE
[$Crit1]
END-SELECT

let #nCatgs = 0     !number of pin-categorys
begin-select
count(*)    &nAccCatgs
  let #nCatgs = &nAccCatgs
from PS_GPCH_RC_AL071 RC71
where
  RC71.OPRID = $prcs_oprid AND 
  RC71.RUN_CNTL_ID = $prcs_run_cntl_id
end-select

if #nAccums + (#nCatgs * 2) > 10 and $detailed = 'N'
  show 'ERROR: Cannot generate summary report for more than 5 accumulator categories or 10 accumulators.'
  goto Exit1
end-if

if (#nAccums + #nCatgs = 0) or (rtrim($Rep_Name, ' ') = '')
  goto Exit1
end-if

let #Abstand   = {usablespace} / (#nAccums + #nCatgs * 2)
let #Abstand   = FLOOR(#Abstand)
let #Counter   = 0
let #Sequ_Num  = 0

  do GPCHUT00
!  goto Exit1


BEGIN-SELECT
E.PIN_NUM
E.GPCH_RP_DSH
E.GPCH_AL_SNR
D1.PIN_NM
D1.PIN_NUM

 let #Counter = #Counter + 1

 if #Counter > 10
    Let #Counter = 10
    exit-select
 end-if

 let #snr = &E.GPCH_AL_SNR

 let #Pin_Nummer  = &E.PIN_NUM
 let $DescrShort  = rtrim(ltrim(&E.GPCH_RP_DSH,' '),' ')
 let $P_NM  = ltrim(rtrim(&D1.PIN_NM,' '),' ')
  do Append-log ($ELEMENT,$P_NM)
 
 !FMB 20100722 
 If $P_NM = 'CH_BV_01_02'
    Let #BVG_V = &E.GPCH_AL_SNR
 End-If
 

 let $Pin_Nm  = substr($P_NM,1,-1+#Abstand)
 let $Pin_Nm    = ltrim(rtrim($Pin_Nm,' '),' ')
 
 put  #Pin_Nummer 1 into Accum(#snr) arr1 eltype

 if length($DescrShort) = 0
   put  $Pin_Nm into Acc1(#snr)
 else
   let  $DescrShort = substr($DescrShort,1,-1+#Abstand)
   put  $DescrShort into Acc1(#snr)
 end-if

from
PS_GPCH_RC_AL07 E ,PS_GP_PIN D1
where D1.PIN_NUM = E.PIN_NUM AND
D1.COUNTRY = 'CHE' AND
E.OPRID = $prcs_oprid AND 
E.RUN_CNTL_ID = $prcs_run_cntl_id 
order by E.GPCH_AL_SNR
END-SELECT



! Catg headings.
BEGIN-SELECT
CATAL71.PIN_CATEGORY
CATAL71.GPCH_RP_DSH
CATAL71.GPCH_AL_SNR
PINCATG.DESCR

  let #Counter = #Counter + 1
  if #Counter > 10
     Let #Counter = 10
     exit-select
  end-if

  let #snr = &CATAL71.GPCH_AL_SNR
  
   let $DescrShort  = rtrim(ltrim(&CATAL71.GPCH_RP_DSH,' '),' ')
   let $P_NM  = ltrim(rtrim(&PINCATG.DESCR,' '),' ')
   do Append-log ($ELEMENT,$P_NM)
  
   let $Pin_Nm  = substr($P_NM,1,-1+(#Abstand * 2))
   let $Pin_Nm    = ltrim(rtrim($Pin_Nm,' '),' ')
  
   put  #Pin_Nummer 2 into  Accum(#snr) arr1 eltype
  
   if length($DescrShort) = 0
     put  $Pin_Nm into Acc1(#snr)
   else
     let  $DescrShort = substr($DescrShort,1,-1+#Abstand)
     put  $DescrShort into Acc1(#snr)
   end-if
FROM
  PS_GPCH_RC_AL071 CATAL71, PS_GP_PIN_CATEGORY PINCATG
WHERE (
    CATAL71.OPRID = $prcs_oprid AND 
    CATAL71.RUN_CNTL_ID = $prcs_run_cntl_id 
  ) and (
    PINCATG.USED_BY = 'C' and
    PINCATG.COUNTRY = 'CHE' and
    PINCATG.PIN_CATEGORY = CATAL71.PIN_CATEGORY
  )
  
END-SELECT


     Do Append-Log(' ',' ')
     Do Append-Log('----------------------------- ' , '------------------------------' )

!-----------------------------------------------------------------------
Begin-Sql on-error=give_warning
delete from PS_GPCHAL071_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql


!-----------------------------------------------------------------------
Begin-Sql on-error=give_warning
delete from PS_GPCHAL072_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql


!FMB Populate PS_GPCHAL072_TMP from PS_GPCHAL078_TMP

#debug show 'Before insert <-- '


Begin-Sql on-error=give_warning
insert into PS_GPCHAL072_TMP (PROCESS_INSTANCE, GPCH_ED_PNR, GPCH_ED_SEA, GPCH_ED_SEQ, GPCH_ED_SIG, GPCH_ED_ORD, GPCH_ED_GRO, FROMDATE, TO_DATE)   
select T8.PROCESS_INSTANCE, T8.PIN_MBR_NUM, 1, AL.GPCH_AL_SNR,T8.SIGNVALUE, BL.GPCH_BL_PR_ORDER, BL.GPCH_BL_PR_GROUP, T8.BGN_DT, T8.END_DT
 from PS_GPCHAL078_TMP T8, PS_GPCH_BL_PRINT BL, PS_GPCH_RC_AL07 AL
  where T8.PROCESS_INSTANCE = #prcs_process_instance
   AND  BL.GPCH_RC_REPORTNAME = $Rep_Name
   AND  AL.OPRID = $prcs_oprid
   AND  AL.RUN_CNTL_ID = $prcs_run_cntl_id
   AND  BL.PIN_NUM = T8.PIN_MBR_NUM
   AND  AL.PIN_NUM = T8.PIN_NUM

End-Sql

#debug show 'After insert --> '
! Populate non-contributing elements into gpchal072 (for the summary report)
begin-select DISTINCT
B1.PIN_NUM
B1.GPCH_BL_PR_ORDER
B1.GPCH_BL_PR_GROUP

  let #P_N1 = &B1.PIN_NUM
  let #P_O1 = &B1.GPCH_BL_PR_ORDER
  let #P_G1 = &B1.GPCH_BL_PR_GROUP
  let #M    = 0
  let #N    = 0
  do Insert_Print(#P_N1,#M,#N,#P_O1,#P_G1)

from PS_GPCH_BL_PRINT B1, PS_GP_ERN_DED BB1
where B1.PIN_NUM = BB1.PIN_NUM AND
      B1.GPCH_RC_REPORTNAME = $Rep_Name AND
      BB1.EFF_STATUS <> 'I' AND
      BB1.EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_ERN_DED BB2
                   WHERE BB2.PIN_NUM =BB1.PIN_NUM AND
                         BB2.EFFDT <= $Ctl_To_Dt)  AND
      B1.PIN_NUM not in (select distinct C.GPCH_ED_PNR
                         FROM  PS_GPCHAL072_TMP C
                         WHERE C.PROCESS_INSTANCE = #prcs_process_instance )

end-select

if $PRT_SIGN = 'Y'
!-----------------------------------------------------------------------
Begin-Sql on-error=give_warning
delete from PS_GPCHAL072_TMP  where PROCESS_INSTANCE = #prcs_process_instance
                               AND GPCH_ED_PNR not in (select distinct B1T.PIN_NUM from PS_GPCH_BL_PRINT B1T, PS_GP_PIN B1PIN 
                                                       where B1T.GPCH_RC_REPORTNAME = $Rep_Name and B1PIN.PIN_NUM = B1T.PIN_NUM AND B1PIN.COUNTRY = 'CHE')
END-SQL
else
#debugshow '>else=' $Rep_Name
Begin-Sql on-error=give_warning
delete from PS_GPCHAL072_TMP  where PROCESS_INSTANCE = #prcs_process_instance
                               AND   GPCH_ED_PNR in (select distinct B11.PIN_NUM from PS_GPCH_BL_PRINT B11
                                                     where B11.GPCH_RC_REPORTNAME = $Rep_Name)
END-SQL
end-if
if rtrim($Ctl_PayEnt, ' ') = ''
  do SelectPayEnt
else
  let $PayEntAct = ''
  let $PayEntActCond = ' '
  do Get-Chart-Fields
  do PreparePrintData
end-if

Exit1:
end-procedure
!***********************************************************************
begin-procedure InsertRow
Begin-Sql on-error=give_warning
 insert into PS_GPCHAL071_TMP(PROCESS_INSTANCE,GPCH_AC_PNR,GPCH_AC_SEQ,CAL_RUN_ID,GPCH_AC_SIG)
 values (#prcs_process_instance,#AL7_2.GPCH_ED_PNR,0,$MAP2.PAY_ENTITY,0)
end-sql
end-procedure
!***********************************************************************
begin-procedure FindGlRow
begin-select distinct
MAP2.PAY_ENTITY
   let $MAP2.PAY_ENTITY = rtrim(&MAP2.PAY_ENTITY, ' ')
   do InsertRow
from PS_GP_GL_GROUP_DTL GRP2, PS_GP_GL_MAP_DTL MAP2
WHERE GRP2.PIN_NUM     = #AL7_2.GPCH_ED_PNR
AND GRP2.GROUPING_CODE = MAP2.GROUPING_CODE
AND GRP2.PAY_ENTITY    = MAP2.PAY_ENTITY
AND GRP2.BUSINESS_UNIT = MAP2.BUSINESS_UNIT
end-select
end-procedure
!***********************************************************************
begin-procedure SelectPayEnt
Begin-Sql on-error=give_warning
 delete from PS_GPCHAL071_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

begin-select distinct
AL7_2.GPCH_ED_PNR
  let #AL7_2.GPCH_ED_PNR = &AL7_2.GPCH_ED_PNR
  do FindGlRow
from PS_GPCHAL072_TMP AL7_2
WHERE AL7_2.PROCESS_INSTANCE = #prcs_process_instance
end-select
!----------------------------
let $ExstRow = 'N'
let $PayEntAct = ''
let $PayEntActCond = ' '
let $PayEntActCond1 = ' '
begin-select distinct
MAP1.CAL_RUN_ID
   let $PayEntAct = rtrim(&MAP1.CAL_RUN_ID, ' ')
   let $PayEntActCond = ' AND MAP.PAY_ENTITY = ' || '''' || $PayEntAct || ''''
   let $PayEntActCond1 = ' CF.PAY_ENTITY = ' || '''' || $PayEntAct || '''' || ' AND '
   do Get-Chart-Fields
   do PreparePrintData
from PS_GPCHAL071_TMP MAP1
WHERE MAP1.PROCESS_INSTANCE = #prcs_process_instance
end-select

end-procedure
!***********************************************************************
begin-procedure PreparePrintData

Begin-Sql on-error=give_warning
DELETE FROM PS_GPCHAL074_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
end-sql

#debug show 'PreparePrintData <--'

let #Page_Merk = 0
let #Sign_Temp = 0
let $Beg_Date_Cmp = ''
let $FrDte = ''
let $ToDte = ''
let #NewGroup = 0
!-----------------------------------------------------------------------
let $DatesCond   = ' where A3.FROMDATE >= ' || '''' || $Ctl_From_Dt ||'''' ||
                   ' or (A3.TO_DATE <= ' || '''' || $Ctl_To_Dt || '''' ||
                   '  or A3.TO_DATE is null ) '
let #CountDates = -1
!-----------------------------------------------------------------------
begin-select distinct
A3.FROMDATE
A3.TO_DATE

    !------------------------------------
    let $BagDat0 = &A3.FROMDATE
    let $ToDat0 = &A3.TO_DATE

    if (rtrim($ToDat0,' ') <> '')
      do GetDate_PlusDays($ToDat0,1,$BagDat0_tmp)
      do InsertDates1($BagDat0_tmp,'',$ExistR)
     if $ExistR = 'N'
      do InsertDates($BagDat0_tmp,'')
     end-if
    end-if

    if rtrim($BagDat0,' ') <> ''
      do InsertDates1($BagDat0,$ToDat0,$ExistR)
     if $ExistR = 'N'
       do InsertDates($BagDat0,$ToDat0)
     end-if
    end-if
    !-------------------------------------------

    let $B_D_O   = &A3.FROMDATE
    let $E_D_O   = &A3.TO_DATE
    let $B_D_O_1 = $B_D_O
    let $E_D_O_1 = $E_D_O
    let $FrDte = rtrim($B_D_O,' ')
    let $ToDte = rtrim($E_D_O,' ')
    do Format-DateTime($B_D_O,$B_D1,{DEFCMP},'','')
    do Format-DateTime($E_D_O,$E_D1,{DEFCMP},'','')
    do Format-DateTime($Ctl_From_Dt,$From_D1,{DEFCMP},'','')
    do Format-DateTime($Ctl_To_Dt,$To_D1,{DEFCMP},'','')

    if (($E_D1 < $From_D1) AND ($E_D1 <> ''))  or
       (($B_D1 > $To_D1) AND ($To_D1 <> ''))
       goto NoPrt
    end-if


    let $BD_Temp = $B_D_O_T
    let $ED_Temp = $E_D_O_T


    NoPrt:
from PS_GPCHAL072_TMP A3
WHERE A3.PROCESS_INSTANCE = #prcs_process_instance
order by A3.FROMDATE,A3.TO_DATE

end-select

do SelectDates1

#debug show 'PreparePrintData -->'
end-procedure
!***********************************************************************
begin-procedure InsertDates1($BagDat0,$ToDat0,:$ExistR)
#debug show 'InsertDates1 <--'
let $ExistR = 'N'
begin-select
AL74T.FROMDATE
AL74T.TO_DATE
    let $ExistR = 'Y'
from PS_GPCHAL074_TMP AL74T
where AL74T.FROMDATE       = $BagDat0
AND AL74T.PROCESS_INSTANCE = #_prcs_process_instance
  !and AL74T.TO_DATE = $ToDat0
end-select

#debug show 'InsertDates1 -->'
end-procedure
!***********************************************************************
begin-procedure InsertDates($BagDat0_tmp,$ToDat0_tmp)
#debug show 'InsertDates <--'
Begin-Sql on-error=give_warning
insert into PS_GPCHAL074_TMP(PROCESS_INSTANCE,FROMDATE,TO_DATE)
                     values(#_prcs_process_instance,$BagDat0_tmp,$ToDat0_tmp)
end-sql
#debug show 'InsertDates -->'
end-procedure
!***********************************************************************
begin-procedure Get_Pin_Nm
begin-select distinct
GPP.PIN_NM
GPP.PIN_CODE
   let $PinNM = &GPP.PIN_NM
from PS_GP_PIN GPP
where GPP.PIN_NUM = &AL07_2.GPCH_ED_PNR
end-select
end-procedure
!***********************************************************************
begin-procedure Insert_Pin_Descr
begin-select distinct
AL07_2.GPCH_ED_PNR
    do Get_Pin_Nm
    do Get-Description-List(&AL07_2.GPCH_ED_PNR,$language_cd,$ObjectDcr,$PinNM)
    do InsertDat
from PS_GPCHAL072_TMP AL07_2
WHERE AL07_2.PROCESS_INSTANCE = #prcs_process_instance
end-select
end-procedure
!***********************************************************************
begin-procedure InsertDat
Begin-Sql on-error=give_warning
   insert into PS_GPCHAL075_TMP(PROCESS_INSTANCE,GPCH_ED_PNR,PIN_CODE,PIN_NM,DESCR)
                       values (#prcs_process_instance,&AL07_2.GPCH_ED_PNR,&GPP.PIN_CODE,$PinNM,$ObjectDcr)
end-sql
end-procedure
!***********************************************************************
begin-procedure SelectDates1
let $WasPr = 'N'
let #CntDt = 0
if $FlagTemp = 'N'
  Begin-Sql on-error=give_warning
   delete from PS_GPCHAL075_TMP WHERE PROCESS_INSTANCE = #prcs_process_instance
END-SQL

do Insert_Pin_Descr
  let $FlagTemp = 'Y'
end-if

let $PrintedOne = 'N'
begin-select distinct
AL7_4.FROMDATE
AL7_4.TO_DATE
    let $FromDat = &AL7_4.FROMDATE
    let $ToDat = &AL7_4.TO_DATE

    let $WsPrintOne = 'N'

    PUT $FromDat into GlEffDate(0) GlEffDt1(#CntDt)
    PUT $ToDat into GlEffDate(0) GlEffDt2(#CntDt)
    PUT '1' into GlEffDate(0) GlEffDt3(#CntDt)
    let #CntDt = #CntDt + 1

    let $PrintedOne = 'Y'
from PS_GPCHAL074_TMP AL7_4
where AL7_4.PROCESS_INSTANCE = #prcs_process_instance
AND   AL7_4.FROMDATE        >= (select max(AL7_4T.FROMDATE) from PS_GPCHAL074_TMP AL7_4T
                                where AL7_4T.FROMDATE        <= $Ctl_From_Dt
                                AND   AL7_4T.PROCESS_INSTANCE = #prcs_process_instance )
AND   AL7_4.FROMDATE        <= (SELECT max(AL7_4S.FROMDATE) FROM  PS_GPCHAL074_TMP AL7_4S
                                WHERE AL7_4S.FROMDATE      <= $Ctl_To_Dt
                                AND AL7_4S.PROCESS_INSTANCE = #prcs_process_instance)
order by AL7_4.FROMDATE,AL7_4.TO_DATE
end-select
if $PrintedOne = 'N'

let $Fl1 = 'N'
begin-select
MIN(AL7A.FROMDATE) &FromDateMax
   let $CtlFrom = &FromDateMax
   let $Fl1 = 'Y'
from PS_GPCHAL074_TMP AL7A
where AL7A.PROCESS_INSTANCE = #prcs_process_instance
AND   AL7A.FROMDATE        <= $Ctl_To_Dt
AND   AL7A.FROMDATE        >= $Ctl_From_Dt
end-select
if $Fl1 = 'Y'
begin-select distinct
AL7_4A.FROMDATE
AL7_4A.TO_DATE
    let $FromDat = &AL7_4A.FROMDATE
    let $ToDat = &AL7_4A.TO_DATE

    PUT $FromDat into GlEffDate(0) GlEffDt1(#CntDt)
    PUT $ToDat into GlEffDate(0) GlEffDt2(#CntDt)
    PUT '1' into GlEffDate(0) GlEffDt3(#CntDt)
    let #CntDt = #CntDt + 1
    let $PrintedOne = 'Y'
from PS_GPCHAL074_TMP AL7_4A
where AL7_4A.PROCESS_INSTANCE = #prcs_process_instance
AND   AL7_4A.FROMDATE        >= (select max(AL7_4TA.FROMDATE) from PS_GPCHAL074_TMP AL7_4TA
                                 where AL7_4TA.FROMDATE      <= $CtlFrom
                                 AND AL7_4TA.PROCESS_INSTANCE = #prcs_process_instance )
and   AL7_4A.FROMDATE       <= (SELECT max(AL7_4SA.FROMDATE) FROM  PS_GPCHAL074_TMP AL7_4SA
                                WHERE AL7_4SA.FROMDATE        <= $Ctl_To_Dt
                                AND   AL7_4SA.PROCESS_INSTANCE = #prcs_process_instance)
order by AL7_4A.FROMDATE,AL7_4A.TO_DATE
end-select
end-if
end-if
if $PrintedOne = 'N'
     let $FromDat = $Ctl_From_Dt
     let $To_Dat =  $Ctl_To_Dt
     PUT $FromDat into GlEffDate(0) GlEffDt1(#CntDt)
     PUT $ToDat into GlEffDate(0) GlEffDt2(#CntDt)
     PUT '0' into GlEffDate(0) GlEffDt3(#CntDt)
     let #CntDt = #CntDt + 1
end-if
! FMB 20070223 do Get-Output-Directory('GPCHAL01',$Output_Directory,$prcs_no)
! FMB 20070223 let $reportdirsumm = $Output_Directory || 'GPCHAL01_SUM' || $prcs_no
! FMB 20070223 let $reportdirdet = $Output_Directory || 'GPCHAL01_DET' || $prcs_no


do Get-Output-Directory('GPCHAL07',$Output_Directory,$prcs_no)
  !-----------------------------------------------------------------------
      let $reportdirsumm = $Output_Directory || 'GPCHAL07_SUM' || $prcs_no

      #ifdef MVS
      let #pos  = instr($sqr-report,'GPCHAL07',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirsumm = $path || 'GPCHAL07(GPCHAL7S)'
      #end-if

      #ifdef OS390
      let #pos  = instr($sqr-report,'GPCHAL07',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirsumm = $path || 'GPCHAL07(GPCHAL7S)'
      #end-if

      let $reportdirdet = $Output_Directory || 'GPCHAL07_DET' || $prcs_no

      #ifdef MVS
      let #pos  = instr($sqr-report,'GPCHAL07',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirdet = $path || 'GPCHAL07(GPCHAL7D)'
      #end-if

      #ifdef OS390
      let #pos  = instr($sqr-report,'GPCHAL07',0)
      let #pos  = #pos - 1
      let $path = substr($sqr-report,1,#pos)
      let $reportdirdet = $path || 'GPCHAL07(GPCHAL7D)'
      #end-if


if $detailed = 'N'    ! Setup layout and call the print logic for summary report
  Use-Report SUMMARY 
  New-report $reportdirsumm
  #debug show 'Calling summary print logic'
  LET #CntTemp = 0
  while #CntTemp < #CntDt
     get $FromDat from GlEffDate(0) GlEffDt1(#CntTemp)
     get $ToDat from GlEffDate(0) GlEffDt2(#CntTemp)
     get $Merker from GlEffDate(0) GlEffDt3(#CntTemp)
     do PrintList($FromDat,$ToDat,$Ctl_From_Dt,$Ctl_To_Dt,$Merker, #BVG_V)
       let #NewGroup = #NewGroup + 1
       new-page
     LET #CntTemp = #CntTemp + 1
  end-while
else                    ! Setup layout and call the print logic for detailed report.
  Use-Report DETAILED
  New-report $reportdirdet
  #debug show 'Calling detailed print logic'
   
  ! remove elements that are not in print classaa

  Begin-Sql on-error=give_warning
     delete from PS_GPCHAL078_TMP  where 
              PROCESS_INSTANCE = #prcs_process_instance AND
              PIN_MBR_NUM not in (select distinct B1T2.PIN_NUM from PS_GPCH_BL_PRINT B1T2, PS_GP_PIN B1PIN2
                  where B1T2.GPCH_RC_REPORTNAME = $Rep_Name and B1PIN2.PIN_NUM = B1T2.PIN_NUM and B1PIN2.COUNTRY = 'CHE')
  End-Sql
  !******************************************************************************************
  ! Fill gaps in cotribution with contribution rows having sign-value '0' (gpchal078_tmp)

  
  ! #ifdef INFORMIX   ! populate a second table for subquery - for use in Informix / DB2 subquerys.
      Begin-Sql on-error=give_warning
        delete from PS_GPCHAL079_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
      End-Sql
      Begin-Sql on-error=give_warning
        INSERT INTO PS_GPCHAL079_TMP (PROCESS_INSTANCE,PIN_NUM,PIN_MBR_NUM,BGN_DT,END_DT,ENTRY_TYPE_ELEM,SIGNVALUE,ENTRY_TYPE_PCT,PCT_TO_ACM,PIN_PCT_NUM)
            SELECT PROCESS_INSTANCE,PIN_NUM,PIN_MBR_NUM,BGN_DT,END_DT,ENTRY_TYPE_ELEM,SIGNVALUE,ENTRY_TYPE_PCT,PCT_TO_ACM,PIN_PCT_NUM 
                FROM PS_GPCHAL078_TMP
                WHERE PROCESS_INSTANCE = #prcs_process_instance
      End-Sql
  ! #endif
  Begin-Sql on-error=give_warning
  INSERT INTO PS_GPCHAL078_TMP (PROCESS_INSTANCE,PIN_NUM,PIN_MBR_NUM,BGN_DT,ENTRY_TYPE_ELEM,SIGNVALUE,ENTRY_TYPE_PCT,PCT_TO_ACM,PIN_PCT_NUM)
      SELECT
          T78_1.PROCESS_INSTANCE, 
          T78_1.PIN_NUM, 
          T78_1.PIN_MBR_NUM, 
          #ifdef DB2ALL
              DATE(T78_1.END_DT) + (1) DAYS
          #endif
          #ifdef INFORMIX
              DATE(T78_1.END_DT) + (1) UNITS DAY
          #endif
          #ifdef MICROSOFT 
              DATEADD(DAY, 1, T78_1.END_DT)
          #endif
          #ifdef SYBASE
              DATEADD(DAY, 1, T78_1.END_DT)
          #endif
          #ifdef ORACLE
              T78_1.END_DT + 1
          #endif 
          ,
          T78_1.ENTRY_TYPE_ELEM,
          0, T78_1.ENTRY_TYPE_PCT, 0, 0 
      FROM 
      #ifdef INFORMIX
          PS_GPCHAL079_TMP T78_1 
      #else
          PS_GPCHAL078_TMP T78_1 
      #endif
      WHERE
          T78_1.END_DT IS NOT NULL AND
          T78_1.PROCESS_INSTANCE = #prcs_process_instance AND
          NOT EXISTS ( SELECT 'X' FROM 
                        #ifdef INFORMIX 
                              PS_GPCHAL079_TMP T78_2 
                        #else
                              PS_GPCHAL078_TMP T78_2 
                        #endif
                      WHERE
                          T78_2.PROCESS_INSTANCE = T78_1.PROCESS_INSTANCE AND
                          T78_2.PIN_NUM = T78_1.PIN_NUM AND
                          T78_2.PIN_MBR_NUM = T78_1.PIN_MBR_NUM AND
                          T78_2.BGN_DT = 
                            #ifdef DB2ALL
                                DATE(T78_1.END_DT) + (1) DAYS
                            #endif
                            #ifdef INFORMIX
                                DATE(T78_1.END_DT) + (1) UNITS DAY
                            #endif
                            #ifdef MICROSOFT 
                                DATEADD(DAY, 1, T78_1.END_DT)
                            #endif
                            #ifdef SYBASE 
                                DATEADD(DAY, 1, T78_1.END_DT)
                            #endif
                            #ifdef ORACLE
                                T78_1.END_DT + 1
                            #endif 
          )

  End-Sql
  #ifdef DB2ALL
  Begin-Sql on-error=give_warning
    UPDATE PS_GPCHAL078_TMP 
      SET END_DT = (
          SELECT
                    DATE( MIN(T785.BGN_DT)) - (1) DAYS
            FROM 
                      PS_GPCHAL079_TMP T785 
            WHERE
                  T785.PROCESS_INSTANCE = PS_GPCHAL078_TMP.PROCESS_INSTANCE AND
                  T785.PIN_NUM = PS_GPCHAL078_TMP.PIN_NUM AND
                  T785.PIN_MBR_NUM = PS_GPCHAL078_TMP.PIN_MBR_NUM AND
                  T785.BGN_DT > PS_GPCHAL078_TMP.BGN_DT 
          )
          WHERE (
                  PROCESS_INSTANCE = #prcs_process_instance AND
                  END_DT IS NULL AND
                  EXISTS( SELECT 'X' FROM 
                                    PS_GPCHAL079_TMP T784 
                          WHERE 
                              T784.PROCESS_INSTANCE = PS_GPCHAL078_TMP.PROCESS_INSTANCE AND
                              T784.PIN_NUM = PS_GPCHAL078_TMP.PIN_NUM AND
                              T784.PIN_MBR_NUM = PS_GPCHAL078_TMP.PIN_MBR_NUM AND
                              T784.BGN_DT > PS_GPCHAL078_TMP.BGN_DT 
                  )
          )
  End-Sql
  #else
  Begin-Sql on-error=give_warning
  !MIN(T785.BGN_DT) - 1 
  UPDATE PS_GPCHAL078_TMP 
      SET END_DT = (
          SELECT
                #ifdef DB2ALL
                    DATE( MIN(T785.BGN_DT)) - (1) DAYS
                #endif
                #ifdef INFORMIX
                    DATE( MIN(T785.BGN_DT)) - (1) UNITS DAY
                #endif
                #ifdef MICROSOFT 
                    DATEADD(DAY, -1,  MIN(T785.BGN_DT))
                #endif
                #ifdef SYBASE 
                    DATEADD(DAY, -1,  MIN(T785.BGN_DT))
                #endif
                #ifdef ORACLE
                    MIN(T785.BGN_DT) - 1
                #endif 
            FROM 
                #ifdef INFORMIX 
                      PS_GPCHAL079_TMP T785 
                #else
                      PS_GPCHAL078_TMP T785 
                #endif
            WHERE
                  T785.PROCESS_INSTANCE = PS_GPCHAL078_TMP.PROCESS_INSTANCE AND
                  T785.PIN_NUM = PS_GPCHAL078_TMP.PIN_NUM AND
                  T785.PIN_MBR_NUM = PS_GPCHAL078_TMP.PIN_MBR_NUM AND
                  T785.BGN_DT > PS_GPCHAL078_TMP.BGN_DT 
          )
          WHERE (
                  PS_GPCHAL078_TMP.PROCESS_INSTANCE = #prcs_process_instance AND
                  PS_GPCHAL078_TMP.END_DT IS NULL AND
                  EXISTS( SELECT 'X' FROM 
                              #ifdef INFORMIX 
                                    PS_GPCHAL079_TMP T784 
                              #else
                                    PS_GPCHAL078_TMP T784 
                              #endif
                          WHERE 
                              T784.PROCESS_INSTANCE = PS_GPCHAL078_TMP.PROCESS_INSTANCE AND
                              T784.PIN_NUM = PS_GPCHAL078_TMP.PIN_NUM AND
                              T784.PIN_MBR_NUM = PS_GPCHAL078_TMP.PIN_MBR_NUM AND
                              T784.BGN_DT > PS_GPCHAL078_TMP.BGN_DT 
                  )
          )

  End-Sql
  #endif
  ! Add in additional rows for broken periods ends
  !*********************************************************************************

  ! Populate non-contributing elements into gpchal078
begin-SELECT DISTINCT 
GPPIN1.PIN_NUM
                
  let #pin = &GPPIN1.PIN_NUM
  do Insert_gpchal078(#pin)

FROM PS_GP_PIN GPPIN1, PS_GPCH_BL_PRINT BL1
WHERE 
  GPPIN1.COUNTRY = 'CHE' AND
  GPPIN1.PIN_TYPE in ('ER', 'DD') AND
  GPPIN1.PIN_NUM = BL1.PIN_NUM AND
  BL1.GPCH_RC_REPORTNAME = $Rep_Name AND
  GPPIN1.PIN_NUM NOT in (
        SELECT distinct AL078CNT.PIN_MBR_NUM 
              FROM 
              #ifdef INFORMIX 
                  PS_GPCHAL079_TMP AL078CNT
              #else
                  PS_GPCHAL078_TMP AL078CNT
              #endif
        WHERE
            AL078CNT.PROCESS_INSTANCE = #prcs_process_instance
        )
end-select
  #debug show 'after 78 insert'
  
  
  if $PRT_SIGN = 'N'    ! jjj - For consistncy with summary
    Begin-Sql on-error=give_warning
       delete from PS_GPCHAL078_TMP where 
                PROCESS_INSTANCE = #prcs_process_instance AND
                PIN_MBR_NUM in (select distinct B1TE.PIN_NUM from PS_GPCH_BL_PRINT B1TE
                    where B1TE.GPCH_RC_REPORTNAME = $Rep_Name)
    End-Sql
  end-if

!********************************!**************************************************
! effective dated print loop for 'detailed' print logic
begin-select distinct 
CHAL078_TMP.PIN_MBR_NUM
CHAL078_TMP.BGN_DT

  let #PinNum = &CHAL078_TMP.PIN_MBR_NUM
  let $PinDtlEffdt = &CHAL078_TMP.BGN_DT
  if $PinDtlEffdt = ''
    let $PinDtlEffdt = $Ctl_From_Dt
  end-if
  #debug show ' processing :' #PinNum '|' $PinDtlEffdt
  do PrintPinDetails
  
from PS_GPCHAL078_TMP CHAL078_TMP
where CHAL078_TMP.PROCESS_INSTANCE = #prcs_process_instance
end-select
! effective dated print loop for 'detailed' print logic ends
!***********************************************!***********************************

end-if
end-procedure

!***********************************************************************

begin-procedure Insert_gpchal078(#inpin)
Begin-Sql on-error=give_warning
     insert into PS_GPCHAL078_TMP (PROCESS_INSTANCE, PIN_MBR_NUM, SIGNVALUE, PIN_PCT_NUM, PCT_TO_ACM, ENTRY_TYPE_PCT, ENTRY_TYPE_ELEM, BGN_DT, END_DT, PIN_NUM)
     values(#_prcs_process_instance, #inpin, 0, 0, 0, ' ', ' ', $Ctl_From_Dt_Nrml, NULL, 0)
end-sql
end-procedure

!***********************************************************************
begin-procedure Check_Sign($B_Data1,$E_Data1,:#Sign_Temp)
let #Sign_Temp   = 0
let $TodateStr   = ''
let $FromdateStr = ''

if $B_Data1 = ''
 let $FromdateStr = ' A4.FROMDATE is null '
else
 let $FromdateStr = ' A4.FROMDATE = ''' || $B_Data1 || ''' '
end-if

if $E_Data1 = ''
 let $TodateStr = ' AND A4.TO_DATE is null '
else
 let $TodateStr = ' AND A4.TO_DATE = ''' || $E_Data1 || ''' '
end-if

begin-select
A4.GPCH_ED_SIG
  let #ED_Sign = &A4.GPCH_ED_SIG
  if #ED_Sign <> 0
    let #Sign_Temp=1
  end-if
from PS_GPCHAL072_TMP A4
where
[$FromdateStr]
[$TodateStr]
AND A4.PROCESS_INSTANCE = #_prcs_process_instance
end-select
end-procedure

!***********************************************************************
begin-procedure Insert_Print(#P_N1,#M,#N,#P_O1,#P_G1)
let #_Seq_N_EDA = #_Seq_N_EDA + 1
Begin-Sql on-error=give_warning
     insert into PS_GPCHAL072_TMP (PROCESS_INSTANCE,GPCH_ED_PNR,GPCH_ED_SEA,GPCH_ED_SEQ,
                            GPCH_ED_SIG,GPCH_ED_ORD,GPCH_ED_GRO)
     values(#_prcs_process_instance,#P_N1,#_Seq_N_EDA,#M,#N,#P_O1,#P_G1)
end-sql

end-procedure

!***********************************************************************
begin-procedure Acc_Er_Dd(#i,:#NewSign,#bed1,:#Sequ_Num)
let #NewS = 0

begin-select
D.PIN_NUM
D.PIN_MBR_NUM
D.ACM_SIGN
D.ENTRY_TYPE_ELEM
D.BGN_DT
D.END_DT

   let $Beg_Date = &D.BGN_DT
   let $End_Date = &D.END_DT
   let $Sign     = ltrim(rtrim(&D.ACM_SIGN,' '),' ')

   if $Sign = 'S'
     let #NewS = -1 * #NewSign
   else
     if $Sign = 'A'
       let #NewS = #NewSign
     else
       let #NewS = 0
     end-if
   end-if

   let #K = &D.PIN_MBR_NUM
   let $t = ltrim(rtrim(&D.ENTRY_TYPE_ELEM,' '),' ')

   if $t='AC4'
      let #Sequ_Num = #Sequ_Num + 1

      do Insert_AC0(#K,#Sequ_Num,#NewS)
      do Insert_ED0(#K,#i,#NewS,$Beg_Date,$End_Date)
   else
      if (($t='DD0') or ($t='ER0') or ($t = 'AA0'))
         do Insert_ED0(#K,#i,#NewS,$Beg_Date,$End_Date)
      end-if
   end-if

from PS_GP_ACM_MBR D
where D.PIN_NUM = #bed1
end-select

end-procedure

!***********************************************************************
begin-procedure Insert_AC0(#K,#Sequ_Num,#NewSign)

Begin-Sql on-error=give_warning
insert into PS_GPCHAL071_TMP(PROCESS_INSTANCE,GPCH_AC_PNR,GPCH_AC_SEQ,CAL_RUN_ID,GPCH_AC_SIG)
       values (#_prcs_process_instance,#K,#Sequ_Num,'X',#NewSign)
end-sql

end-procedure

!***********************************************************************
begin-procedure Insert_ED0(#K,#i,#NewSign,$Be_Date,$En_Date)
let #Ord  = 0
let #gr   = 0
let #merk1 = 0

if ($_PRT_SIGN = 'Y')
begin-select
A1.GPCH_BL_PR_ORDER
A1.GPCH_BL_PR_GROUP

  let #Ord   = &A1.GPCH_BL_PR_ORDER
  let #gr    = &A1.GPCH_BL_PR_GROUP
  let #merk1  = 1

from PS_GPCH_BL_PRINT A1, PS_GP_ERN_DED AA1
where  (A1.PIN_NUM = AA1.PIN_NUM) AND
       (A1.PIN_NUM = #K) AND
       (A1.GPCH_RC_REPORTNAME = $_Rep_Name)  AND
       AA1.EFF_STATUS <> 'I' AND
       AA1.EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_ERN_DED AA2
                  WHERE AA2.PIN_NUM = AA1.PIN_NUM AND
                        AA2.EFFDT  <= $_Ctl_To_Dt)
end-select

if #merk1 = 0
 goto m
end-if

else
begin-select distinct
A2.GPCH_BL_PR_ORDER
A2.GPCH_BL_PR_GROUP

  let #Ord    = &A2.GPCH_BL_PR_ORDER
  let #gr     = &A2.GPCH_BL_PR_GROUP
  let #merk1  = 1

from PS_GPCH_BL_PRINT A2, PS_GP_ERN_DED AA2
where  (A2.PIN_NUM = AA2.PIN_NUM) AND
       (A2.PIN_NUM = #K) AND
       (A2.GPCH_RC_REPORTNAME <> $_Rep_Name) AND
       (AA2.EFF_STATUS <> 'I') AND
        AA2.EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_ERN_DED AB2
                  WHERE AB2.PIN_NUM =AA2.PIN_NUM AND
                        AB2.EFFDT <= $_Ctl_To_Dt)
end-select


if #merk1 = 0
 goto m
end-if

end-if

let #_Seq_N_EDA = #_Seq_N_EDA + 1

Begin-Sql on-error=give_warning
Insert into PS_GPCHAL072_TMP(PROCESS_INSTANCE,GPCH_ED_PNR,GPCH_ED_SEA,GPCH_ED_SEQ,GPCH_ED_SIG,GPCH_ED_ORD,
                              GPCH_ED_GRO,FROMDATE,TO_DATE)
            values (#_prcs_process_instance,#K,#_Seq_N_EDA,#i,#NewSign,#Ord,#gr,$Be_Date,$En_Date)
end-sql

m:
end-procedure
!***********************************************************************
begin-procedure get_period
let #OneAfter = #NewGroup + 1
let $date1Cmp = ''
let $date2Cmp = ''
let $date2 = ''
if  #NewGroup < #CntDt
    get $date1 from GlEffDate(0) GlEffDt1(#NewGroup)
    do Format-DateTime($date1,$date1Cmp,{DEFCMP},'','')
end-if

if  #OneAfter < #CntDt
    get $date2 from GlEffDate(0) GlEffDt1(#OneAfter)
    do Format-DateTime($date2,$date2Cmp,{DEFCMP},'','')
end-if

end-procedure
!***********************************************************************
begin-procedure PrintList($B_D_O_2,$E_D_O_2,$Ctl_From_Dt_2,$Ctl_To_Dt_2,$Merker, #BVG_V)
#debug show 'PrintList <--'
do get_period
do Format-DateTime($B_D_O_2,$B_D2,{DEFCMP},'','')
do Format-DateTime($E_D_O_2,$E_D2,{DEFCMP},'','')

do Format-DateTime($Ctl_From_Dt_2,$From_D2,{DEFCMP},'','')
do Format-DateTime($Ctl_To_Dt_2,$To_D2,{DEFCMP},'','')
let $_Beg_Date_Cmp = $B_D2
if $B_D2 <> ''
  do Format-DateTime($B_D_O_2, $B_D_O_21, {DEFDATE}, '', '')
  let $_out = $B_D_O_21
else
  let $_out = ''
end-if

let #Old  = 0
let #New  = 0
let #c    = -1
let #O_Gr = 0
let #N_Gr = 0
let #w_First = 0
begin-select
!FMB A.GPCH_ED_PNR       &A.GPCH_ED_PNR () ON-BREAK PRINT=NEVER procedure = Get-CAT-Accum
A.GPCH_ED_PNR       &A.GPCH_ED_PNR () ON-BREAK PRINT=NEVER procedure = Display-Accum-Catgs
A.GPCH_ED_SEQ
A.GPCH_ED_GRO
A.GPCH_ED_SIG
A.GPCH_ED_ORD
A.FROMDATE
A.TO_DATE
B.PIN_CODE
B.PIN_NM
B.DESCR
  let #P_N = &A.GPCH_ED_PNR
  let $_WasPr = 'Y'
  let $ObjectDescr = &B.DESCR
  let $Pn_NM = &B.PIN_NM
  !do Get-Description-List(#P_N,$_language_cd,$ObjectDescr,$Pn_NM)

  let $P_D    =  $ObjectDescr
  let #AC     = &A.GPCH_ED_SEQ
  let #N_Sign = &A.GPCH_ED_SIG
  let #New    = #P_N
  let #N_Gr   = &A.GPCH_ED_GRO
  let $BD     = &A.FROMDATE
  let $ED     = &A.TO_DATE

#debug show '$BD = ' $BD ' $B_D_O_2 = ' $B_D_O_2 ' $h = ' $h ' $Merker = ' $Merker

  if rtrim($BD, ' ') = rtrim($B_D_O_2, ' ')
     let $PrintBold = 'Y'
  else
     let $PrintBold = 'N'
  end-if
  let $P_C    = $Pn_NM
  if #O_Gr <> #N_Gr
    if #O_Gr <> 0
         print ' '   (+1,)
    end-if
  end-if

  let $h  = to_char(#N_Sign)

  if $h = '-1'
     let $NS = '-'
  else
     if $h = '1'
        let $NS = '+'
     else
        let $NS = ''
     end-if
  end-if

  do Format-DateTime($BD,$B_D_2,{DEFCMP},'','')
  do Format-DateTime($ED,$E_D_2,{DEFCMP},'','')

!FMB
  let $Merker = '1'

  if $Merker <> '0'
     if $_date2 <> ''
        let $dat = $_date2
     else
        let $dat = $Ctl_To_Dt_2
     end-if
     do Format-DateTime($dat,$date2_Cp,{DEFCMP},'','')
     if (($B_D_2 >= $date2_Cp) AND ($date2_Cp <> '')) or
        (($E_D_2 < $B_D2) AND ($E_D_2 <> ''))

         let $_WasPr = 'N'
         goto NoPrnt
#debug show 'Print FMB '

         let $NS = ''
     end-if
  else
     let $NS = ''
  end-if

#debug show '#AC = ' #AC


  let #c = 0
  let #i1 = 0
  while #i1 <= (#AC - 1)
    get #eltype from Accum(#i1) eltype
    let #c = #c + ((#_Abstand + 1) * #eltype)
    let #i1 = #i1 + 1
  end-while
  let #c = #c + {col4}

  let $P_D        = ltrim(rtrim($P_D,' '),' ')
  let #P_N        = &A.GPCH_ED_PNR
  Let #_CURR_P_N  = &A.GPCH_ED_PNR

  let #AC         = &A.GPCH_ED_SEQ
  let #N_Sign     = &A.GPCH_ED_SIG
  let #New        = #P_N
  let $h          = to_char(#N_Sign)
  let $P_C        = substr($Pn_NM,1,21)
  if  #c = 0
     if $PrintBold = 'Y'
        print $P_C    (+1,{col1})      bold
        print $P_D    (,{col2},37)     bold
     else
        print $P_C    (+1,{col1})
        print $P_D    (,{col2},37)
     end-if
        let #c = -1
   else
     if #New = #Old
            if $PrintBold = 'Y'
               print $NS    (,#c)    bold
   
               IF #AC  = #BVG_V
                 let #BVG_F = #c + 1
                 let $_BVG_PNR = &A.GPCH_ED_PNR
                 do BVG_Faktor($_BVG_Faktor,#BVG_V, $_BVG_PNR)
                 print $_BVG_Faktor    (,#BVG_F,7)
               End-If
            else
               print $NS    (,#c)
            end-if
      else
            if $PrintBold = 'Y'
               print $P_C   (+1,{col1})   bold
               print $P_D   (,{col2},37)  bold
               print $NS    (,#c)         bold
            else
               print $P_C   (+1,{col1})
               print $P_D   (,{col2},37)
               print $NS    (,#c)
            end-if
      end-if
  end-if

  let #Old  = #New
  let #O_Gr = #N_Gr
  NoPrnt:
from PS_GPCHAL072_TMP A,PS_GPCHAL075_TMP B
where  A.PROCESS_INSTANCE = B.PROCESS_INSTANCE
AND    B.GPCH_ED_PNR      = A.GPCH_ED_PNR
AND    A.PROCESS_INSTANCE = #_prcs_process_instance
group by A.GPCH_ED_GRO,A.GPCH_ED_ORD,A.GPCH_ED_PNR,
      A.GPCH_ED_SEQ,A.GPCH_ED_SIG,A.FROMDATE,
      A.TO_DATE,B.PIN_CODE,B.PIN_NM,B.DESCR
order by A.GPCH_ED_GRO,A.GPCH_ED_ORD,A.GPCH_ED_PNR

end-select

#debug show 'PrintList -->'

end-procedure
!*********************************************************************************

Begin-Procedure BVG_Faktor($_BVG_Faktor,#BVG_V, $_BVG_PNR)

  let #BVG_PNR = $_BVG_PNR
  
  show ' #BVG_PNR = ' #BVG_PNR

begin-SELECT DISTINCT 
ACM.PCT_TO_ACM
                
  let $PCT_TO_ACM = &ACM.PCT_TO_ACM

FROM PS_GP_ACM_MBR ACM, PS_GP_PIN P
WHERE 
  ACM.PIN_NUM = P.PIN_NUM AND
  P.PIN_NM = 'CH_BV_01_02' AND
  ACM.PIN_MBR_NUM =  #BVG_PNR AND
  ACM.BGN_DT = ( select max(ACM1.BGN_DT) from PS_GP_ACM_MBR ACM1
  where ACM.PIN_NUM = ACM1.PIN_NUM AND
        ACM.PIN_MBR_NUM = ACM1.PIN_MBR_NUM )

end-select

  let $_BVG_Faktor = '(' || substr($PCT_TO_ACM, 1,5) || ')'
  
  show ' FMB $PCT_TO_ACM = ' $PCT_TO_ACM ' $_BVG_Faktor = ' $_BVG_Faktor ' $_BVG_PNR = ' $_BVG_PNR
 
End-Procedure BVG_Faktor
!********************************!**************************************************

begin-procedure Init-Report

  do Stdapi-Init
  move 'GPCHAL07' to $ReportID

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
  end-if

  do Init_Report_Translation ($ReportID, $language_cd)
  do Append_Report_Translation ('GPCHGLOB')

  do Gpce_Init_Report_Translation ($ReportID, $language_cd)
  do Gpce_Append_Report_Translation ('GPCHGLOB', $language_cd)
  do Report-Translation

  let $ReportTitle = $TITLE1
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report

!***********************************************************************
Begin-Procedure Report-Translation

  do Get_Field_Information ('GPCHAL07', 'TITLE1',        $TITLE1,     #CW)
  do Get_Field_Information ('GPCHAL07', 'ELEMENT',       $ELEMENT,    #CW)
  do Get_Field_Information ('GPCHAL07', 'DESCR1',        $DESCR1,     #CW)
  do Get_Field_Information ('GPCHAL07', 'REPORT_IDT',    $Report_IDT, #CW)
  do Get_Field_Information ('GPCHAL07', 'PAGE_NO',       $Page_No,    #CW)
  do Get_Field_Information ('GPCHAL07', 'RUN_DATE',      $Run_Date,   #CW)
  do Get_Field_Information ('GPCHAL07', 'RUN_TIME',      $Run_TimeT,  #CW)
  do Get_Field_Information ('GPCHAL07', 'DATES',         $DateS,      #CW)
  do Get_Field_Information ('GPCHAL07', 'PRINT_CLASS',   $PRINT_CLASS,#CW)
  do Get_Field_Information ('GPCHGLOB', 'PRINTCLASS',    $PRINTCLASS, #CW)
  do Get_Field_Information ('GPCHAL07', 'GL_ACCOUNT_1',  $TXT_GL      ,#CW)
  do Get_Field_Information ('GPCHAL07', 'ACCUM_MBR',     $TXT_ACC_MBR ,#CW)
  do Get_Field_Information ('GPCHAL07', 'GL_PYENT',      $TXT_GL_PYENT,#CW)
  do Get_Field_Information ('GPCHAL07', 'GL_BU',         $TXT_GL_BU   ,#CW)
  do Get_Field_Information ('GPCHAL07', 'GL_SIGN',       $TXT_GL_SIGN ,#CW)
  do Get_Field_Information ('GPCHAL07', 'GL_ACCOUNT_2',  $TXT_GL_2    ,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FROMDT',       $HD_FROMDT ,#CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_TODATE',  $HD_TODATE    ,#CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',       $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRINT_OPT',   $LG_PRINT_OPT,   #CW)
  
  do Get_Field_Information ('GPCHAL07','FNL_DESCR',$FNL_DESCR,#CW)  
  do Get_Field_Information ('GPCHAL07','ELEMENT',$ELEMT,#CW)
  do Get_Field_Information ('GPCHAL07','NAME',$NAME,#CW)
  do Get_Field_Information ('GPCHAL07','ELEMT_TYPE',$ELEMT_TYPE,#CW)
  do Get_Field_Information ('GPCHAL07','EARNING',$EARNING,#CW)
  do Get_Field_Information ('GPCHAL07','DEDUCTION',$DEDUCTION,#CW)
  do Get_Field_Information ('GPCHAL07','OVRD_LEVL',$OVRD_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','CAL_LEVL',$CAL_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','PAY_ENT_LEVL',$PAY_ENT_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','PAY_GRP_LEVL',$PAY_GRP_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','PAYEE_LEVL',$PAYEE_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','POS_INP_LEVL',$POS_INP_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','VIA_ELEMTS',$VIA_ELEMTS,#CW)
  do Get_Field_Information ('GPCHAL07','SOVR_LEVL',$SOVR_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','VALID_FRM',$VALID_FRM,#CW)
  do Get_Field_Information ('GPCHAL07','STATUS',$STATUS,#CW)
  do Get_Field_Information ('GPCHAL07','ACTIVE',$ACTIVE,#CW)
  do Get_Field_Information ('GPCHAL07','INACTIVE',$INACTIVE,#CW)
  do Get_Field_Information ('GPCHAL07','CALC',$CALC,#CW)
  do Get_Field_Information ('GPCHAL07','CALC_RULE',$CALC_RULE,#CW)
  do Get_Field_Information ('GPCHAL07','COMPONENTS',$COMPONENTS,#CW)
  do Get_Field_Information ('GPCHAL07','VALUE',$VALUE,#CW)
  do Get_Field_Information ('GPCHAL07','ROUNDING',$ROUNDING,#CW)
  do Get_Field_Information ('GPCHAL07','BASE',$BASE,#CW)
  do Get_Field_Information ('GPCHAL07','PERCENT',$PERCENT,#CW)
  do Get_Field_Information ('GPCHAL07','UNIT',$UNIT,#CW)
  do Get_Field_Information ('GPCHAL07','RATE',$RATE,#CW)
  do Get_Field_Information ('GPCHAL07','FREQUENCY',$FREQUENCY,#CW)
  do Get_Field_Information ('GPCHAL07','BY_CAL',$BY_CAL,#CW)
  do Get_Field_Information ('GPCHAL07','GEN_CTRL',$GEN_CTRL,#CW)
  do Get_Field_Information ('GPCHAL07','PRORATION',$PRORATION,#CW)
  do Get_Field_Information ('GPCHAL07','NONE',$NONE,#CW)
  do Get_Field_Information ('GPCHAL07','DEF_PAYGRP_LEVL',$DEF_PAYGRP_LEVL,#CW)
  do Get_Field_Information ('GPCHAL07','BY_RULE',$BY_RULE,#CW)
  do Get_Field_Information ('GPCHAL07','PAYGRP_DEFINED',$PAYGRP_DEFINED,#CW)
  do Get_Field_Information ('GPCHAL07','ACCUMS',$ACCUMS,#CW)
  do Get_Field_Information ('GPCHAL07','YES',$YES,#CW)
  do Get_Field_Information ('GPCHAL07','NO',$NO,#CW)
  do Get_Field_Information ('GPCHAL07','TAX_STMT',$TAX_STMT,#CW)
  do Get_Field_Information ('GPCHAL07','PRINT_CLASSES',$PRINT_CLASSES,#CW)
  do Get_Field_Information ('GPCHAL07','GROUP',$GROUP,#CW)
  do Get_Field_Information ('GPCHAL07','SEQ',$SEQ,#CW)
  do Get_Field_Information ('GPCHAL07','RATE',$RATE,#CW)
  do Get_Field_Information ('GPCHAL07','BASE',$BASE,#CW)
  do Get_Field_Information ('GPCHAL07','UNIT',$UNIT,#CW)
  do Get_Field_Information ('GPCHAL07','PERCENT',$PERCENT,#CW)
  do Get_Field_Information ('GPCHAL07','AMOUNT',$AMOUNT,#CW)
  do Get_Field_Information ('GPCHAL07','SUM',$SUM,#CW)
  do Get_Field_Information ('GPCHAL07','GRP_CODE',$GRP_CODE,#CW)
  do Get_Field_Information ('GPCHAL07','PAY_ENTITY',$PAY_ENTITY,#CW)

end-Procedure Report-Translation

!***********************************************************************
begin-procedure Get-Values
  let $language_cd    = $PRCS_LANGUAGE_CD

  let $Ctl_To_Dt      = &GPCH_RUN_CNTL.GPCH_BK_GEN_DT
  let $Ctl_From_Dt    = &GPCH_RUN_CNTL.GPCH_RC_FROM_DT
  do Convert-To-DTU-Date($Ctl_From_Dt, $Ctl_From_Date_DTU)
  do Convert-From-DTU-Date($Ctl_From_Dt_DTU, $Ctl_From_Dt_Nrml)
  let $Rep_Name       = rtrim(ltrim(&GPCH_RUN_CNTL.GPCH_RC_REPORTNAME,' '),' ')
  let $PRT_SIGN       = &GPCH_RUN_CNTL.GPCH_RC_PRT_SIGN
  let $detailed       = &GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO
  let $Incl_GL        = &GPCH_RUN_CNTL.GPCH_RC_PRN_COMP
  
  let $Criteria       = ' AND E.OPRID = ''' || $prcs_oprid || ''' AND E.RUN_CNTL_ID = ''' ||
                          $prcs_run_cntl_id || ''''
  let $Crit1          = ' G.OPRID = ''' || $prcs_oprid || ''' AND G.RUN_CNTL_ID = ''' ||
                          $prcs_run_cntl_id || ''''
  let $Criteria2       = ' AND AR_E.OPRID = ''' || $prcs_oprid || ''' AND AR_E.RUN_CNTL_ID = ''' || 
                          $prcs_run_cntl_id || ''''

  !let $Pin_Category        = RTRIM(&GPCH_RUN_CNTL.PIN_CATEGORY,' ')
  !if $Pin_Category <> ''
  !   Let $Where_CAT_Accum  = 'AND   CAT2.PIN_CATEGORY  = ''' || $Pin_Category || ''''
  !end-if
  let $Ctl_PayEnt = rtrim(&GPCH_RUN_CNTL.PAY_ENTITY, ' ')
  if $Ctl_PayEnt <> ''
   let $PayEntCond = ' AND MAP.PAY_ENTITY = ' || '''' || $Ctl_PayEnt || ''''
   let $PayEntCond1 = ' CF.PAY_ENTITY = ' || '''' || $Ctl_PayEnt || '''' || 'AND'
  else
   let $PayEntCond = ' '
   let $PayEntCond1 = ' '
  end-if

  do Format-DateTime($Ctl_From_Dt,$From_DCmp,{DEFCMP},'','')
  do Format-DateTime($Ctl_To_Dt,$To_DCmp,{DEFCMP},'','')
end-procedure Get-Values

!***********************************************************************
begin-procedure Ask-Input
input $OPID            'Enter OPRID' type=char
input $RUN_CNT_ID      'Enter RUN_CNTL_ID' type=CHAR
input $Ctl_PayEnt      'Enter Pay Entity'  type=CHAR
input $Ctl_From_Dt     'Enter Begin Date as mm-dd-yyyy i.e. 01-31-1996' type=date
input $Ctl_To_Dt       'Enter End Date as mm-dd-yyyy i.e. 01-31-1997' type=date
input $Rep_Name        'Enter Report name' type=CHAR
input $Pin_Category    'Enter Pin Category' type=CHAR

let $Criteria   = 'AND E.OPRID = ''' || $OPID || ''' AND E.RUN_CNTL_ID = ''' || $RUN_CNT_ID ||
                  ''''
let $Crit1      = ' G.OPRID = ''' || $OPID || ''' AND G.RUN_CNTL_ID = ''' || $RUN_CNT_ID ||
                  ''''
let $prcs_oprid       = $OPID
let $prcs_run_cntl_id = $RUN_CNT_ID
let $Ctl_PayEnt = rtrim($Ctl_PayEnt, ' ')

if $Ctl_PayEnt <> ''
   let $PayEntCond = ' AND MAP.PAY_ENTITY = ' || '''' || $Ctl_PayEnt || ''''
   let $PayEntCond1 = ' CF.PAY_ENTITY = ' || '''' || $Ctl_PayEnt || '''' || 'AND'
else
   let $PayEntCond = ' '
   let $PayEntCond1 = ' '
end-if

end-procedure Ask-Input

!***********************************************************************
#Define ColM +1

begin-heading  4  FOR-REPORTS = (DETAILED)

! This is the headinf for portrait.
  do Append_Report_Translation ('GPCHGLOB')
  do Get_Field_Information ('GPCHGLOB', 'COMPANY_NM', $stdhdg_co_nm  , #dummy_width)

  do Get_Field_Information ('GPCHGLOB', 'REPORT_ID' , $stdhdg_rep_id , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'PAGE_NO'   , $stdhdg_page_no, #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_DATE'  , $stdhdg_run_dt , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'RUN_TIME'  , $stdhdg_run_tm , #dummy_width)
  do Get_Field_Information ('GPCHGLOB', 'END_REPORT', $stdhdg_end_rep, #dummy_width)

  print '            '    (1,1)
  print $stdhdg_co_nm     ()          center

  print $stdhdg_rep_id    (+1,10)
  print $ReportID         (0,{ColM})
 
  if $ReportID <> 'GPCHAL04' and $ReportID <> 'GPCHAL05'
     print $ReportTitle      ()          center
  end-if

  let #RptCol = 100           ! Hardcoded width for portrait.
  print $stdhdg_page_no   (0,#RptCol)
  print #page-count       (0,{ColM})      edit 88888888

  print $stdhdg_run_dt    (+1,#RptCol)
  print $ReportDate       (0,{ColM})

  print $stdhdg_run_tm    (+1,#RptCol)
  print $ReportTime       (0,{ColM})

position (-1,1)

end-heading 

begin-heading  10
#Include 'gpchut08.sqc'
position (-1,1)

  print $TXT_GL_PYENT (,{col1})
  if rtrim($Ctl_PayEnt, ' ') <> ''
    print $Ctl_PayEnt (,+2)
  else
    print $PayEntAct (,+2)
  end-if
  position (+1,1)
  print   $HD_FROMDT  (,{col1})
  print   $From_DPrnt (, +2)
  print   $PRINTCLASS    (+1,#RptCol)
  print   ' '    ()
  print   $Rep_Name   ()
  print   $HD_TODATE  (,{col1})
  print   $To_DPrnt (, +2)
  print   $DateS          (+1,#RptCol)
  print   ' '             ()
  print   $out            (,)
  print   '_'             (+1,10,160) fill
  print   $ELEMENT        (+1,{col1})
  print   $DESCR1         (,{col2},21)
  
  ! print   $Pin_Category   (,{col99})
  ! print   $TXT_ACC_MBR    (,+1)
  
  let #i1  = 1
  let $Ac1 = ''
  let #col = {col4}
  if #nAccums + #nCatgs > 10 
      let #Counter = 10
  else
      let #Counter = #nAccums + #nCatgs
  end-if
  while #i1 <= #Counter
   get $Ac1 from Acc1(#i1)
   
   get #eltype from Accum(#i1) eltype
  
   print $Ac1             (,#col)
  
   let #col = #col + ((#Abstand + 1) * #eltype)

   let #i1 = #i1 + 1
  end-while
  print   $TXT_GL         (+1,{col3})
  print   $TXT_GL_BU      (+1,{col3h},9)
  print   $TXT_GL_SIGN    (,{col3},5)
  print   $TXT_GL_2       (,+1,10)
  print   $DateS          (,{col4h})
  
  print $name1            (0, {col1c},11)
  print $name2            (0, {col2c},11)
  print $name3            (0, {col3c},11)
  print $name4            (0, {col4c},11)
  print $name5            (0, {col5c},11)
  print $name6            (0, {col6c},11)
  print $name7            (0, {col7c},11)
  print $name8            (0, {col8c},11)
  
  print     '_'           (+1,10,160) fill


end-heading
!******************************************************************************
begin-procedure Display-Accum-Catgs       ! jjj - display accumulator categories


let #colWidth = floor({usablespace} / (#nAccums + #nCatgs * 2))

BEGIN-SELECT
CATAL712.PIN_CATEGORY
CATAL712.GPCH_RP_DSH
CATAL712.GPCH_AL_SNR
PINCATG2.DESCR


    let #in_col_nbr = 0
    let #i1 = 1
    while #i1 < (&CATAL712.GPCH_AL_SNR)
     get $Ac1 from Acc1(#i1)
     
     get #eltype from Accum(#i1) eltype
     let #in_col_nbr = #in_col_nbr + ((#colWidth + 1)* #eltype)
     let #i1 = #i1 + 1
    end-while
    let #in_col_nbr = #in_col_nbr + {col4}
    ! let #in_col_nbr = {col4} + (#colWidth) * ( - 1)
    let $in_pin_catg = &CATAL712.PIN_CATEGORY
    do Find-Category-Member

FROM
  PS_GPCH_RC_AL071 CATAL712, PS_GP_PIN_CATEGORY PINCATG2
WHERE (
    CATAL712.OPRID = $prcs_oprid AND 
    CATAL712.RUN_CNTL_ID = $prcs_run_cntl_id 
  ) and (
    PINCATG2.USED_BY = 'C' and
    PINCATG2.COUNTRY = 'CHE' and
    PINCATG2.PIN_CATEGORY = CATAL712.PIN_CATEGORY
  )
END-SELECT
If $Incl_GL = 'Y' and $detailed = 'N'
  do Get-GL-Account 
end-if

END-PROCEDURE

!******************************************************************************
begin-procedure Find-Category-Member

#debug show 'Find-Category-Member #P_N = ' #P_N ' #CURR_P_N = ' #CURR_P_N
let #NwS = 0
let #w_First = 0
begin-select
F2.PIN_NUM
F2.PIN_MBR_NUM
F2.SIGNVALUE
F2.BGN_DT
F2.END_DT
F3.PIN_NM


#debug show 'Inside Find-Category-Member #P_N = ' #P_N ' &F2.BGN_DT = '  &F2.BGN_DT ' &F2.END_DT = '  &F2.END_DT ' #CURR_P_N = ' #CURR_P_N
!Start Print

     let #rows = 0
     If  substr(rtrim(&F3.PIN_NM,' '),1,5)  = 'CH_LW'

          Let $CAT_Name = substr(rtrim(&F3.PIN_NM,' '),7,4)
                let $CAT_Name = rtrim($CAT_Name, '_')
                let $CAT_Name = rtrim($CAT_Name, '-')
                let $CAT_Name = rtrim($CAT_Name, ' ')
                let $CAT_Name = rtrim($CAT_Name, '0')
      Else
          Let $CAT_Name = substr(rtrim(&F3.PIN_NM,' '),7,3)
                let $CAT_Name = rtrim($CAT_Name, '_')
                let $CAT_Name = rtrim($CAT_Name, '-')
                let $CAT_Name = rtrim($CAT_Name, ' ')
      End-IF
      let #NeSgn = &F2.SIGNVALUE

      #debug show '-> NESIGN ' #NeSgn 

                if #NeSgn = 1
                  let $NewSgn = '(+)'
                else
                   if #NeSgn = -1
                     let $NewSgn = '(-)'
                   else
                     let $NewSgn = '( )'
                   end-if
                end-if


        let #ActuRow = 8 + #current-column
        if #NeSgn <> 0 
            if #w_First = 0
                 print $CAT_Name   (0,#in_col_nbr)
                             print $NewSgn     (,)
                             let #w_First  = 1
            else
                 if $detailed = 'N' and #ActuRow > 172  ! maximun number of characters printed
                    let #rows = #rows + 1 
                    print $CAT_Name   (+1,#in_col_nbr)
                                    print $NewSgn     (,)
                 else
                    print '/'         (0,+1)
                    print $CAT_Name   (0,+1)
                                    print $NewSgn     (,)
                 end-if
            end-if
        end-if
!End Print
from PS_GPCHAL078_TMP F2, PS_GP_PIN F3
where F2.PIN_MBR_NUM = #CURR_P_N
and F3.PIN_NUM = F2.PIN_NUM
and F3.COUNTRY = 'CHE'
and F3.PIN_CATEGORY = $in_pin_catg
and F2.BGN_DT <= $Ctl_From_Dt
and ( F2.END_DT >= $Ctl_From_Dt or F2.END_DT is null )

end-select
end-procedure



!******************************************************************************
!***********************************************************************
begin-procedure Insert_AC1(#K,#Sequ_Num,#NewSgn)

Begin-Sql on-error=give_warning
insert into PS_GPCHAL073_TMP(PROCESS_INSTANCE,GPCH_AC_PNR,GPCH_AC_SEQ,CAL_RUN_ID,GPCH_AC_SIG)
       values (#_prcs_process_instance,#K,#Sequ_Num,'X',#NewSgn)
end-sql

end-procedure
!******************************************************************************
begin-procedure Print-Cat-Acum

        Let $CAT_Name = substr(rtrim($CAT2.PIN_NM,' '),7,3)
                let $CAT_Name = rtrim($CAT_Name, '_')
                let $CAT_Name = rtrim($CAT_Name, '-')
                let $CAT_Name = rtrim($CAT_Name, ' ')

                if #NeSgn = 1
                  let $NewSgn = '(+)'
                else
                   if #NeSgn = -1
                     let $NewSgn = '(-)'
                   else
                     let $NewSgn = '( )'

                   end-if
                end-if


        let #ActuRow = 8 + #current-column

        if #w_First = 0
             if $detailed = 'N'
               print $CAT_Name   (0,{col99})
             else
               print $CAT_Name   (0,{colP3})
             end-if
                         print $NewSgn     (,)
                         let #w_First  = 1
        else
             if #ActuRow > 172   ! maximun number of characters printed
                print $CAT_Name   (+1,{col99})
                                print $NewSgn     (,)
             else
                print '/'         (0,+1)
                print $CAT_Name   (0,+1)
                                print $NewSgn     (,)
             end-if
        end-if
end-procedure
!***********************************************************************
begin-procedure Get-GL-Account
let #AccCount = 0
let $Date_Cond = ' '
if $Ctl_To_Dt <> ''
   let $Date_Cond = ' AND MAP.EFFDT <= ' || '''' || $Ctl_To_Dt || ''''
end-if

if $date2 <> ''
   let $Date_Cond = ' AND MAP.EFFDT < ' || '''' || $date2 || ''''
end-if

let #Row_Cnt = 0

let $Pay_Ent = ''
let $BU = ''
let $Account = ''
let $Effdt = ''
let $Res_Sign = ''
let $P_CF1 = ''
let $P_CF2 = ''
let $P_CF3 = ''
let $P_CF4 = ''
let $P_CF5 = ''
let $P_CF6 = ''
let $P_CF7 = ''
let $P_CF8 = ''

let $Pay_Ent_Old = ''
let $BU_Old = ''
let $Account_Old = ''
let $Effdt_Old = ''
let $Res_Sign_Old = ''
let $P_CF1_Old = ''
let $P_CF2_Old = ''
let $P_CF3_Old = ''
let $P_CF4_Old = ''
let $P_CF5_Old = ''
let $P_CF6_Old = ''
let $P_CF7_Old = ''
let $P_CF8_Old = ''

let $Pay_Ent_Old1 = ''
let $BU_Old1 = ''
let $Account_Old1 = ''
let $Effdt_Old1 = ''
let $Res_Sign_Old1 = ''
let $P_CF1_Old1 = ''
let $P_CF2_Old1 = ''
let $P_CF3_Old1 = ''
let $P_CF4_Old1 = ''
let $P_CF5_Old1 = ''
let $P_CF6_Old1 = ''
let $P_CF7_Old1 = ''
let $P_CF8_Old1 = ''

Begin-SELECT distinct

GRP.PAY_ENTITY
GRP.BUSINESS_UNIT
GRP.PIN_NUM
MAP.ACCOUNT
MAP.REVERSE_SIGN
[$Chart_fld1]          &pa1=char
[$Chart_fld2]          &pa2=char
[$Chart_fld3]          &pa3=char
[$Chart_fld4]          &pa4=char
[$Chart_fld5]          &pa5=char
[$Chart_fld6]          &pa6=char
[$Chart_fld7]          &pa7=char
[$Chart_fld8]          &pa8=char
MAP.EFFDT

        Let $Pay_Ent = rtrim(&GRP.PAY_ENTITY,' ')
        Let $BU      = rtrim(&GRP.BUSINESS_UNIT,' ')
        Let $Account = rtrim(&MAP.ACCOUNT,' ')
        let $Effdt = rtrim(&MAP.EFFDT, ' ')
        let $Res_Sign = &MAP.REVERSE_SIGN
        let $P_CF1      =  rtrim(&pa1,' ')
        let $P_CF2      =  rtrim(&pa2,' ')
        let $P_CF3      =  rtrim(&pa3,' ')
        let $P_CF4      =  rtrim(&pa4,' ')
        let $P_CF5      =  rtrim(&pa5,' ')
        let $P_CF6      =  rtrim(&pa6,' ')
        let $P_CF7      =  rtrim(&pa7,' ')
        let $P_CF8      =  rtrim(&pa8,' ')
        do Format-DateTime($Effdt,$Effdt_Cmp,{DEFCMP},'','')
        do Format-DateTime($Effdt, $Effdt1, {DEFDATE}, '', '')
        do Format-DateTime($Effdt_Old, $Effdt_Old1, {DEFDATE}, '', '')

        !--------------------------------------------------------------------
        if $Pay_Ent_Old = $Pay_Ent AND
           $BU_Old      = $BU AND
           $Account_Old = $Account AND
           $Res_Sign_Old = $Res_Sign AND
           $P_CF1_Old      = $P_CF1 AND
           $P_CF2_Old      = $P_CF2 AND
           $P_CF3_Old      = $P_CF3 AND
           $P_CF4_Old      = $P_CF4 AND
           $P_CF5_Old      = $P_CF5 AND
           $P_CF6_Old      = $P_CF6 AND
           $P_CF7_Old      = $P_CF7 AND
           $P_CF8_Old      = $P_CF8

           do Format-DateTime($Effdt_Old, $Effdt_Old_Cmp, {DEFCMP}, '', '')
           do Format-DateTime($FromDat, $FromDat_Cmp, {DEFCMP}, '', '')
           do Format-DateTime($Ctl_From_Dt, $Ctl_From_Dt_Cmp, {DEFCMP}, '', '')

           if $Effdt_Cmp < $FromDat_Cmp AND rtrim($Effdt_Cmp,' ') <> '' AND $Effdt_Old_Cmp <= $Ctl_From_Dt_Cmp
             goto Ext
           end-if
        end-if
        !--------------------

        if &MAP.REVERSE_SIGN = 'Y'
           Let $Acnt_Sign ='(-)'
        else
           Let $Acnt_Sign ='(+)'
        end-if

        print $BU               (+1,{col3h},9)
        print $Acnt_Sign        (0,{col3},5)
        print $Account          (0,+1,10)

        if $P_CF1 <> ''
           print $P_CF1 (0,{col1c})
        end-if

        if $P_CF2 <> ''
           print $P_CF2 (0,{col2c})
        end-if

        if $P_CF3 <> ''
           print $P_CF3 (0,{col3c})
        end-if

        if $P_CF4 <> ''
           print $P_CF4 (0,{col4c})
        end-if

        if $P_CF5 <> ''
           print $P_CF5 (0,{col5c})
        end-if

        if $P_CF6 <> ''
           print $P_CF6 (0,{col6c})
        end-if

        if $P_CF7 <> ''
           print $P_CF7 (0,{col7c})
        end-if

        if $P_CF8 <> ''
           print $P_CF8 (0,{col8c})
        end-if

        print $Effdt1 (,{col4h})


    Ext:
    let $Pay_Ent_Old1  = $Pay_Ent_Old
    let $BU_Old1       = $BU_Old
    let $Account_Old1  = $Account_Old
    let $Res_Sign_Old1 = $Res_Sign_Old
    let $Effdt_Old1    = $Effdt_Old
    let $Pay_Ent_Old1 = $Pay_Ent_Old
    let $BU_Old1 = $BU_Old
    let $Account_Old1 = $Account_Old
    let $Effdt_Old1 = $Effdt_Old
    let $Res_Sign_Old1 = $Res_Sign_Old
    let $P_CF1_Old1 = $P_CF1_Old
    let $P_CF2_Old1 = $P_CF2_Old
    let $P_CF3_Old1 = $P_CF3_Old
    let $P_CF4_Old1 = $P_CF4_Old
    let $P_CF5_Old1 = $P_CF5_Old
    let $P_CF6_Old1 = $P_CF6_Old
    let $P_CF7_Old1 = $P_CF7_Old
    let $P_CF8_Old1 = $P_CF8_Old

    let $Pay_Ent_Old  = $Pay_Ent
    let $BU_Old       = $BU
    let $Account_Old  = $Account
    let $Res_Sign_Old = $Res_Sign
    let $Effdt_Old    = $Effdt
    let #Row_Cnt      = #Row_Cnt + 1
    let $Pay_Ent_Old = $Pay_Ent
    let $BU_Old = $BU
    let $Account_Old = $Account
    let $Effdt_Old = $Effdt
    let $Res_Sign_Old = $Res_Sign
    let $P_CF1_Old = $P_CF1
    let $P_CF2_Old = $P_CF2
    let $P_CF3_Old = $P_CF3
    let $P_CF4_Old = $P_CF4
    let $P_CF5_Old = $P_CF5
    let $P_CF6_Old = $P_CF6
    let $P_CF7_Old = $P_CF7
    let $P_CF8_Old = $P_CF8


from PS_GP_GL_GROUP_DTL GRP, PS_GP_GL_MAP_DTL MAP
WHERE GRP.PIN_NUM     = #CURR_P_N
AND GRP.GROUPING_CODE = MAP.GROUPING_CODE
AND GRP.PAY_ENTITY    = MAP.PAY_ENTITY
AND GRP.BUSINESS_UNIT = MAP.BUSINESS_UNIT
[$Date_Cond]
[$PayEntCond]
[$PayEntActCond]
ORDER BY GRP.PAY_ENTITY, GRP.BUSINESS_UNIT
[$OrderChart],MAP.REVERSE_SIGN,MAP.EFFDT DESC

End-SELECT
end-procedure
!************************************************************************************
begin-procedure Get-Chart-Fields
let $P_NUM = ''
let $Chart_fld1 = ''
let $Chart_fld2 = ''
let $Chart_fld3 = ''
let $Chart_fld4 = ''
let $Chart_fld5 = ''
let $Chart_fld6 = ''
let $Chart_fld7 = ''
let $Chart_fld8 = ''
let $OrderChart = ' '
Begin-Select distinct

CF.PIN_CHART1_NUM  &P_N1
CF.PIN_CHART2_NUM  &P_N2
CF.PIN_CHART3_NUM  &P_N3
CF.PIN_CHART4_NUM  &P_N4
CF.PIN_CHART5_NUM  &P_N5
CF.PIN_CHART6_NUM  &P_N6
CF.PIN_CHART7_NUM  &P_N7
CF.PIN_CHART8_NUM  &P_N8


   let $P_N1 = rtrim(to_char(&P_N1), ' ')
   let $P_N2 = rtrim(to_char(&P_N2), ' ')
   let $P_N3 = rtrim(to_char(&P_N3), ' ')
   let $P_N4 = rtrim(to_char(&P_N4), ' ')
   let $P_N5 = rtrim(to_char(&P_N5), ' ')
   let $P_N6 = rtrim(to_char(&P_N6), ' ')
   let $P_N7 = rtrim(to_char(&P_N7), ' ')
   let $P_N8 = rtrim(to_char(&P_N8), ' ')

   if &P_N1 <> 0
          let $P_NUM = $P_N1
          let #cnt = 1
          do Get-Chart-Head
   end-if

   if &P_N2 <> 0
          let $P_NUM = $P_N2
          let #cnt = 2
          do Get-Chart-Head
   end-if

   if &P_N3 <> 0
          let $P_NUM = $P_N3
          let #cnt = 3
          do Get-Chart-Head
   end-if

   if &P_N4 <> 0
          let $P_NUM = $P_N4
          let #cnt = 4
          do Get-Chart-Head
   end-if

   if &P_N5 <> 0
          let $P_NUM = $P_N5
          let #cnt = 5
          do Get-Chart-Head
   end-if

   if &P_N6 <> 0
          let $P_NUM = $P_N6
          let #cnt = 6
          do Get-Chart-Head
   end-if

   if &P_N7 <> 0
          let $P_NUM = $P_N7
          let #cnt = 7
          do Get-Chart-Head
   end-if

   if &P_N8 <> 0
          let $P_NUM = $P_N8
          let #cnt = 8
          do Get-Chart-Head
   end-if

   if &P_N1 <> 0
      let $Chart_fld1   = 'MAP.PIN_CHART1_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART1_VAL'
   end-if

   if &P_N2 <> 0
      let $Chart_fld2  = 'MAP.PIN_CHART2_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART2_VAL'
   end-if

   if &P_N3 <> 0
      let $Chart_fld3  = 'MAP.PIN_CHART3_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART3_VAL'
   end-if

   if &P_N4 <> 0
      let $Chart_fld4  = 'MAP.PIN_CHART4_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART4_VAL'
   end-if

   if &P_N5 <> 0
      let $Chart_fld5  = 'MAP.PIN_CHART5_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART5_VAL'
   end-if

   if &P_N6 <> 0
      let $Chart_fld6  = 'MAP.PIN_CHART6_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART6_VAL'
   end-if

   if &P_N7 <> 0
      let $Chart_fld7  = 'MAP.PIN_CHART7_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART7_VAL'
   end-if

   if &P_N8 <> 0
      let $Chart_fld8 = 'MAP.PIN_CHART8_VAL'
      let $OrderChart = $OrderChart || ',MAP.PIN_CHART8_VAL'
   end-if


FROM PS_GP_GL_CHARTFLD CF
WHERE
[$PayEntActCond1]
[$PayEntCond1]
CF.EFFDT          = (SELECT MAX(EFFDT) FROM PS_GP_GL_CHARTFLD CFA
                           WHERE  CFA.PAY_ENTITY     = CF.PAY_ENTITY
                                                   AND    CFA.BUSINESS_UNIT  = CF.BUSINESS_UNIT
                           AND    CFA.EFFDT         <= $AsOfToday )

End-Select
end-procedure
!***********************************************************************
begin-procedure Get-Chart-Head

  if rtrim($P_NUM,' ') <> ''
     let $Pin_crit = ' where CN.PIN_NUM = ' || $P_NUM
  else
     goto ex
  end-if

Begin-Select
CN.PIN_NM

  evaluate #cnt

  when = 1
       let $name1 = rtrim(&CN.PIN_NM,' ')
       break
  when = 2
       let $name2 = rtrim(&CN.PIN_NM,' ')
       break
  when = 3
       let $name3 = rtrim(&CN.PIN_NM,' ')
       break
  when = 4
       let $name4 = rtrim(&CN.PIN_NM,' ')
       break
  when = 5
       let $name5 = rtrim(&CN.PIN_NM,' ')
       break
  when = 6
       let $name6 = rtrim(&CN.PIN_NM,' ')
       break
  when = 7
       let $name7 = rtrim(&CN.PIN_NM,' ')
       break
  when = 8
       let $name8 = rtrim(&CN.PIN_NM,' ')
       break
  when-other

     break

  end-evaluate

FROM PS_GP_PIN_NM_VW CN
[$Pin_crit]
End-Select
ex:
end-procedure
!***********************************************************************
begin-procedure GetDate_PlusDays($Date1,#Days,:$Date2)
    do ConvertToComponents($Date1,$tmp_y,$tmp_m,$tmp_d)
    let $Stch = $tmp_y  || $tmp_m ||  $tmp_d || '0000'
    do Format-DateTime($Stch, $End_DT_1, {DEFCMP},'','native')

    let $date_in =  $tmp_y  || '-' || $tmp_m || '-' ||  $tmp_d
    do dtu-add-days($date_in, #Days, $End_DT_1)

    let $YY = substr($End_DT_1,1,4)
    let $MM = substr($End_DT_1,6,2)
    let $DD = substr($End_DT_1,9,2)
    let $Stch = $YY  || $MM ||  $DD || '0000'

    do Format-DateTime($Stch, $Date2, {DEFCMP},'','native')
end-procedure
!************************************************************************************
begin-procedure Get-Description-List(#Pin_Num,$Language_cd,:$Pin_Descr,:$Pin_Nm)


       let $Pin_Descr = ''
       let $Pin_Nm    = ''

        Lookup Get_Base_Pin_Descr #Pin_Num $Return_Val
        if Not Isnull ($Return_Val)
          Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
          let $Pin_Descr           =  rtrim($Pin_Descr,' ')
          let $Pin_Nm              =  rtrim($Pin_Nm,' ')
        end-if

        if ($BASE_LANG <> $language_cd) AND ($language_cd <> '')
           Lookup Get_Trans_Pin_Descr #Pin_Num $Return_Val
           if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
              Unstring $Return_Val by ';' into $Pin_Nm $Pin_Descr
              let $Pin_Descr           =  rtrim($Pin_Descr,' ')
              let $Pin_Nm              =  rtrim($Pin_Nm,' ')
           end-if
        end-if



end-procedure Get-Description-List

!*******************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL07'
               do Get_Eng_GPCHAL07
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHAL07
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL07'
               do Get_Ger_GPCHAL07
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHAL07
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHAL07'
               do Get_Ita_GPCHAL07
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHAL07
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL07'
               do Get_Fra_GPCHAL07
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHAL07
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!****************************************************************************

!****************************************************************************
! GPCHUT00  - This calls GPCHUT01 for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT00 
! Step 01 to Step 04

#debug show 'GPCHUT00 <-- '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL078_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'Do Accu from Run Control Page 2 --> '

BEGIN-SELECT
F.PIN_NUM
F.OPRID

 let #PIN  = &F.PIN_NUM

#debug show 'inside select #PIN = '  #PIN

  do GPCHUT01

from
PS_GPCH_RC_AL07 F  

 WHERE F.OPRID = $prcs_oprid AND 
  F.RUN_CNTL_ID = $prcs_run_cntl_id
 
END-SELECT  

#debug show 'Do Accu from Run Control Category --> '

BEGIN-SELECT
P1.PIN_NUM
F1.OPRID

 let #PIN  = &P1.PIN_NUM

#debug show 'inside select #PIN = '  #PIN

  do GPCHUT01

from
PS_GPCH_RC_AL071 F1, PS_GP_PIN P1
 where F1.RUN_CNTL_ID = $prcs_run_cntl_id
  AND F1.OPRID = $prcs_oprid
  AND F1.PIN_CATEGORY = P1.PIN_CATEGORY 
  AND P1.COUNTRY = 'CHE'
  AND P1.PIN_TYPE = 'AC'
  AND not exists ( select 'X' from PS_GPCHAL078_TMP T1
      where T1.PIN_NUM = P1.PIN_NUM ) 

 
END-SELECT  


#debug show 'Do Accu Hardcode Category LS --> '

BEGIN-SELECT
P2.PIN_NUM

 let #PIN  = &P2.PIN_NUM

#debug show 'inside select #PIN = '  #PIN

  do GPCHUT01

from
PS_GP_PIN P2
  where P2.PIN_CATEGORY = 'LS'
  AND P2.COUNTRY = 'CHE'
  AND P2.PIN_TYPE = 'AC' 
  AND not exists ( select 'X' from PS_GPCHAL078_TMP T1
  where T1.PIN_NUM = P2.PIN_NUM ) 

 
END-SELECT  

#debug show 'GPCHUT00 --> '

End-procedure GPCHUT00 


!****************************************************************************
! GPCHUT01  - This one is called for each Accumulator PIN, that got selected
! Accumulators from Run Control AND Category
!****************************************************************************
Begin-procedure GPCHUT01 
! Step 01 to Step 04

#debug show 'GPCHUT01 <-- '


Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql
#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif


!*****************************************************************************
! Step 05 - insert initial row for this accumulator

#debug show 'Step05 <-- '

 let #GPCH_LOOP = 1

#debug show 'inside select #PIN = '  #PIN 

Begin-Sql on-error=give_warning

INSERT INTO PS_GPCHAL076_TMP
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM ) 
Values (#prcs_process_instance,0,#PIN,#PIN, $Ctl_From_Dt_Nrml, NULL,' ', 1,' ',0,0)

End-Sql

!****************************************************************************
! Step 06 - Do while 

#debug show 'Step06 <-- '

 let #FMBCOUNT = 1
 let #FMBCNTRL = 0

 while #FMBCOUNT > 0 AND #FMBCNTRL < 100

#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP '#FMBCOUNT = ' #FMBCOUNT
! ==== 
 
! Call GPCHUT011
 
 !show 'Before GPCHUT11: ' $Rpt_To_Date
 do GPCHUT11
 let #FMBCNTRL = #FMBCNTRL + 1



! ==== 
 END-While

!****************************************************************************
! Step 06

#debug show 'Step07 <-- ' 
Begin-Sql

INSERT INTO PS_GPCHAL078_TMP 
(PROCESS_INSTANCE , PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM, SUM (SIGNVALUE), ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM
  FROM PS_GPCHAL077_TMP, PS_GP_PIN GPPIND3
 WHERE PROCESS_INSTANCE = #prcs_process_instance and GPPIND3.PIN_NUM = #PIN and GPPIND3.COUNTRY = 'CHE'
  GROUP BY PROCESS_INSTANCE, GPPIND3.PIN_NUM, PIN_MBR_NUM, BGN_DT, END_DT, ENTRY_TYPE_ELEM,ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM

End-Sql

#debug show 'delete after GPCHAL078_TMP #PIN = '  #PIN ' #GPCH_LOOP = ' #GPCH_LOOP

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL076_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

Begin-Sql on-error=give_warning
 delete from PS_GPCHAL077_TMP  WHERE PROCESS_INSTANCE = #prcs_process_instance
End-Sql

#debug show 'GPCHUT01 --> '

End-procedure GPCHUT01 


!****************************************************************************
! GPCHUT011
!****************************************************************************
! Step 01
!****************************************************************************
Begin-procedure GPCHUT11

#debug show 'GPCHUT11 <-- '
 DO Format-Number(#GPCH_LOOP, $GPCH_LOOP, '88')
!let $GPCH_LOOP = #GPCH_LOOP

!*******************************
let #Rpt_From_yyyy = edit($Start_Date, 'yyyy')
let #Rpt_To_yyyy = edit($Rpt_To_Date, 'yyyy')

move #Rpt_From_yyyy to $BgnYear 9999
move #Rpt_To_yyyy to $EndYear 9999

!Show 'Begin Year: ' $BgnYear
!Show 'End Year: ' $EndYear
#debug show 'GPCHAL07 - Entry Type ER0 and DD0--> $Start_Date: ' $Start_Date ' $Rpt_To_Date: ' $Rpt_To_Date

Begin-SQL

INSERT INTO PS_GPCHAL077_TMP 
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE , 
 !#ifdef DB2ALL
    [$GPCH_LOOP]
 !#else
  !  #GPCH_LOOP
 !#endif
 , GPPIND4.PIN_NUM, A.PIN_MBR_NUM, A.BGN_DT, A.END_DT, A.ENTRY_TYPE_ELEM, sum(CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE), 
  A.ENTRY_TYPE_PCT, A.PCT_TO_ACM, A.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A,
       PS_GPCHAL076_TMP B,
       PS_GP_PIN GPPIND4
 WHERE A.ENTRY_TYPE_ELEM IN ('ER0', 'DD0') 
   AND A.PIN_NUM = B.PIN_MBR_NUM
   AND GPPIND4.PIN_NUM = #PIN
   AND B.PROCESS_INSTANCE = #prcs_process_instance   
   AND (A.BGN_DT <= $Start_Date
   AND (A.END_DT >= $Start_Date OR A.END_DT IS NULL))
  Group by B.PROCESS_INSTANCE, GPPIND4.PIN_NUM, A.PIN_MBR_NUM, A.BGN_DT, A.END_DT, A.ENTRY_TYPE_ELEM, A.ENTRY_TYPE_PCT, A.PCT_TO_ACM, A.PIN_PCT_NUM

END-SQL


!****************************************************************************
! Step 02
 DO Format-Number(#GPCH_LOOP, $GPCH_LOOP, '88')
!let $GPCH_LOOP = #GPCH_LOOP
Begin-SQL

INSERT INTO PS_GPCHAL076_TMP 
(PROCESS_INSTANCE , GPCH_LOOP, PIN_NUM ,PIN_MBR_NUM, BGN_DT, END_DT,ENTRY_TYPE_ELEM, SIGNVALUE, ENTRY_TYPE_PCT, PCT_TO_ACM, PIN_PCT_NUM )
 SELECT B.PROCESS_INSTANCE  , 
  !#ifdef DB2ALL
    [$GPCH_LOOP]
 ! #else
 !  #GPCH_LOOP
  !#endif
 
 , GPPIND2.PIN_NUM, A.PIN_MBR_NUM, B.BGN_DT, B.END_DT, B.ENTRY_TYPE_ELEM,
 CASE WHEN A.ACM_SIGN = 'A' THEN 1 ELSE -1 END * B.SIGNVALUE , B.ENTRY_TYPE_PCT, B.PCT_TO_ACM, B.PIN_PCT_NUM
  FROM PS_GP_ACM_MBR A 
  , PS_GPCHAL076_TMP B ,
  PS_GP_PIN GPPIND2
 WHERE A.ENTRY_TYPE_ELEM = 'AC4' 
   AND GPPIND2.PIN_NUM = #PIN
   AND A.PIN_NUM = B.PIN_MBR_NUM 
   AND B.PROCESS_INSTANCE = #prcs_process_instance
   AND (A.BGN_DT <= $Start_Date
   AND (A.END_DT >= $Start_Date OR A.END_DT IS NULL))

END-SQL


!****************************************************************************
! Step 03
Begin-SQL

DELETE FROM PS_GPCHAL076_TMP  WHERE 
      PROCESS_INSTANCE = #prcs_process_instance AND 
      GPCH_LOOP < #GPCH_LOOP

END-SQL


!****************************************************************************
! Step 03

 let #FMBCOUNT = 0
 
BEGIN-SELECT  
COUNT(*)        &elcount
#debug show 'inside loop: #PIN = ' #PIN ' #GPCH_LOOP = ' #GPCH_LOOP
! ==== 
 let #FMBCOUNT = &elcount

FROM PS_GPCHAL076_TMP A1 

 WHERE A1.PROCESS_INSTANCE = #prcs_process_instance

! ==== 
END-SELECT 
 
 If #FMBCOUNT > 0
 
 let #GPCH_LOOP = #GPCH_LOOP + 1
 
 End-if
 

End-procedure GPCHUT11

!****************************************************************************


!***********************************************************************
! Functions for Detailed Print Logic
begin-procedure PrintPinDetails
#Debug show 'PrintPinDetails <- '

! need to take care of dates
! meaning 
! 1. max effdt < runctl from
! 2. for all 072 diff dates for the ed pin
!       if from-date rctl <> from-date accum
!               max effdt < from date, if same as before reuse created pin/ed data
!       max effdt < to date, if same as before reuse
! 3. if to-date runctl <> last to-date accum
!       max effdt < to date runctl, if same as before reuse created pin/ed data 
! need another indirection (function) here
 
#debug show ' #PinNum, $PinDtlEffdt before = ' #PinNum ' , ' $PinDtlEffdt


begin-select
PIN.PIN_NUM
PIN.PIN_NM
PIN.PIN_TYPE
PIN.OVRD_IND_CAL      
PIN.OVRD_IND_PYENT    
PIN.OVRD_IND_PG       
PIN.OVRD_IND_PYE      
PIN.OVRD_IND_PI       
PIN.OVRD_IND_ELEM     
PIN.OVRD_IND_SOVR
PIN.PIN_CATEGORY
PIN.DESCR
ED.EFFDT
ED.EFF_STATUS        
ED.FREQUENCY_OPTN    
ED.FREQUENCY_ID      
ED.CURRENCY_CD       
ED.CALC_RULE         
ED.ENTRY_TYPE_AMT    
ED.ENTRY_TYPE_RATE   
ED.ENTRY_TYPE_UNIT   
ED.ENTRY_TYPE_PCT    
ED.ENTRY_TYPE_BASE   
ED.ENTRY_TYPE_RCP    
ED.PIN_AMT_NUM       
ED.PIN_RATE_NUM      
ED.PIN_UNIT_NUM      
ED.PIN_PCT_NUM       
ED.PIN_BASE_NUM      
ED.PIN_RCP_NUM       
ED.GP_AMT            
ED.GP_RATE           
ED.GP_UNIT           
ED.GP_PCT            
ED.GP_BASE           
ED.PIN_GCTL_NUM      
ED.RND_OPTN_RATE     
ED.RND_OPTN_UNIT     
ED.RND_OPTN_PCT      
ED.RND_OPTN_BASE     
ED.RND_OPTN_RSLV     
ED.PIN_RND_RATE_NUM  
ED.PIN_RND_UNIT_NUM  
ED.PIN_RND_PCT_NUM   
ED.PIN_RND_BASE_NUM  
ED.PIN_RND_RSLV_NUM  
ED.PRORATION_OPTN    
ED.PIN_PRO_NUM       


#debug show ' #PinNum, $PinDtlEffdt inside = ' #PinNum ' , ' $PinDtlEffdt

        ! reset global variables
        let $Dtl_Pin_Nm = ' '
        let $Dtl_Pin_Descr = ' '
        let $Dtl_Pin_Comments = ' '
        let #Dtl_Rslt = 0
        
        ! get pin details        
        let #PinXNum = &PIN.PIN_NUM
        do getPinDetails(#PinXNum)       
        
         do separateBlocks
        ! Element name AND description
        print   'Element:'                                     (+1,{colP1},10)        
        print   'Name:'                                         (,{colP2},10)        
        print $Dtl_Pin_Nm                               (,{colP3},18)
        print   'Description ENG'                       (+1,{colP2})                
        print $Dtl_Pin_Descr                            (,{colP3},50)
        
        ! get AND print multilingual descrs
        do printMultiLangDescr(#PinXNum)
        
        ! functional description
        do separateBlocks
        print $FNL_DESCR                           (+1,{colP1})            
        print ' :'                                 (,+1)
        print $Dtl_Pin_Comments                     (,{colP2a}) wrap 90 50 on=<13>

        ! Element Type
        do separateBlocks        
        print $ELEMT_TYPE                                   (+1,{colP1}) 
        print ' :'                                 (,+1)

        if &PIN.PIN_TYPE = 'ER'
                print $EARNING                              (, +1) 
        end-if
        if &PIN.PIN_TYPE = 'DD'
                print $DEDUCTION                            (, +1) 
        end-if
        
        !Override levels        
        do separateBlocks 
        print $OVRD_LEVL                                     (+1,{colP1}) 
        if &PIN.OVRD_IND_CAL  <> 'N'
                print $CAL_LEVL                              (+1,{colP2}) 
        end-if
        if &PIN.OVRD_IND_PYENT    <> 'N'
                print $PAY_ENT_LEVL                          (+1,{colP2}) 
        end-if
        if &PIN.OVRD_IND_PG       <> 'N'
                print $PAY_GRP_LEVL                          (+1,{colP2}) 
        end-if 
        if &PIN.OVRD_IND_PYE      <> 'N'
                print $PAYEE_LEVL                            (+1,{colP2}) 
        end-if
        if &PIN.OVRD_IND_PI       <> 'N'
                print $POS_INP_LEVL                          (+1,{colP2}) 
        end-if
        if &PIN.OVRD_IND_ELEM   <> 'N'
                print $VIA_ELEMTS                            (+1,{colP2}) 
        end-if  
        if &PIN.OVRD_IND_SOVR<> 'N'
                print $SOVR_LEVL                             (+1,{colP2}) 
        end-if

        !effdt, effstatus
        do separateBlocks       
        print $VALID_FRM                                      (+1,{colP1}) 
        ! Valid From is the driver date, not neccessarily the gp_ern_ded effdt 
        do Format-DateTime($PinDtlEffdt,$EffdtDPrnt,{DEFDATE},'','')
        print $EffdtDPrnt                                       (,{colP2})
        print $STATUS                                              (+1,{colP1}) 
        if &ED.EFF_STATUS =  'A'
                print $ACTIVE                                       (,{colP2}) 
        else 
                print $INACTIVE                                    (,{colP2})         
        end-if
                
        ! Calculation
        do separateBlocks
        do printCalculationBlock       
        
        ! Accumulators
        do separateBlocks
        do printAccumulatorMembership
        
        ! TaxStatement
        
        do printAccumulatorCategoryMembership
        
        ! PrintClasses
        do separateBlocks
        do printPrintClassMembership
        
        ! Grouping Codes
        do separateBlocks
        do printGLGroupMembership

  ! fixed cost center?
  do separateBlocks
  
        new-page
FROM PS_GP_PIN PIN, PS_GP_ERN_DED ED
WHERE PIN.PIN_NUM = ED.PIN_NUM
AND PIN.PIN_NUM = #PinNum
AND PIN.COUNTRY = 'CHE'
AND ED.EFFDT = (SELECT MAX(EFFDT) FROM PS_GP_ERN_DED ED2  WHERE ED.PIN_NUM = ED2.PIN_NUM
AND ED2.EFFDT <=$PinDtlEffdt )
end-select

#Debug show 'PrintPinDetails -> '

end-procedure


!***********************************************************************
begin-procedure getPinDetails(#DtlPinNum)
        let $_Dtl_Pin_Nm = ' '
        let $_Dtl_Pin_Descr = ' '
        let $_Dtl_Pin_Comments = ' '
        let #_Dtl_Rslt = 0

begin-select
DTLP.PIN_NM
DTLP.DESCR
DTLP.COMMENTS
        let $_Dtl_Pin_Nm = rtrim(&DTLP.PIN_NM,' ')
        let $_Dtl_Pin_Descr = rtrim(&DTLP.DESCR,' ')
        let $_Dtl_Pin_Comments = &DTLP.COMMENTS
        let #_Dtl_Rslt = 0
from PS_GP_PIN DTLP where  PIN_NUM = #DtlPinNum and DTLP.COUNTRY = 'CHE'
end-select

display &DTLP.COMMENTS
        
end-procedure


!***********************************************************************
begin-procedure separateBlocks
        print     '_'           (+1,10,120) fill
end-procedure


!***********************************************************************
begin-procedure printMultiLangDescr(#PinXNum)

begin-select 
PINLNG.LANGUAGE_CD
PINLNG.DESCR
  let $lang_cd = 'Description ' || &PINLNG.LANGUAGE_CD
  print  $lang_cd                                                 (+1,{colP2})                
  print &PINLNG.DESCR                                                    (,{colP3},50)
FROM PS_GP_PIN_LANG PINLNG, PS_GPCH_RC_AL072 RCPINLANG
WHERE PIN_NUM = #PinXNum and
RCPINLANG.LANGUAGE_CD = PINLNG.LANGUAGE_CD and
RCPINLANG.OPRID = $_prcs_oprid AND 
RCPINLANG.RUN_CNTL_ID =  $_prcs_run_cntl_id AND
PINLNG.LANGUAGE_CD <> 'ENG'
ORDER BY PINLNG.LANGUAGE_CD
end-select
end-procedure

!***********************************************************************
begin-procedure printCalculationBlock
        print $CALC                                                          (+1,{colP1})  
        print $CALC_RULE                                                     (,{colP2})  
        let $FieldName = 'CALC_RULE'
        let $AsOfDate = &ED.EFFDT
        let $FieldValue = &ED.CALC_RULE 
        let $curr_language_cd = $language_cd
        do Read-Translate-Table
        print $XlatLongName                                                   (,{colP3}) 


        print $COMPONENTS                                                     (+2,{colP2}) 
        print $VALUE                                                          (,{colP3}) 
        print $ROUNDING                                                            (,{colP4}) 
        
        if &ED.CALC_RULE = 'AM' 
                ! Amount
                print '  - '                                                        (+1,{colP2}) 
                print $AMOUNT                                                       (,+1) 
                let $EntryType = &ED.ENTRY_TYPE_AMT
                let #EntryAmount = &ED.GP_AMT
                let #EntryNum = &ED.PIN_AMT_NUM
                let $RoundOption = &ED.RND_OPTN_RSLV
                let #RoundNum = &ED.PIN_RND_RSLV_NUM
                do printComponentDetails
        end-if
        if &ED.CALC_RULE = 'PB' 
                ! Base
                print '  - '                                                        (+1,{colP2}) 
                print $BASE                                                         (,+1) 
                let $EntryType = &ED.ENTRY_TYPE_BASE
                let #EntryAmount = &ED.GP_BASE
                let #EntryNum = &ED.PIN_BASE_NUM
                let $RoundOption = &ED.RND_OPTN_BASE
                let #RoundNum = &ED.PIN_RND_BASE_NUM                
                do printComponentDetails
        end-if
        if &ED.CALC_RULE = 'RP' or &ED.CALC_RULE = 'PB' 
                ! Percent
                print '  - '                                                        (+1,{colP2}) 
                print $PERCENT                                                      (,+1) 
                let $EntryType = &ED.ENTRY_TYPE_PCT
                let #EntryAmount = Round(&ED.GP_PCT,2)
                let #EntryNum = &ED.PIN_PCT_NUM
                let $RoundOption = &ED.RND_OPTN_PCT
                let #RoundNum = &ED.PIN_RND_PCT_NUM                
                do printComponentDetails
        end-if
        if &ED.CALC_RULE = 'RU' or &ED.CALC_RULE = 'RP'
                ! Unit
                print '  - '                                                        (+1,{colP2}) 
                print $UNIT                                                         (,+1) 
                let $EntryType = &ED.ENTRY_TYPE_UNIT
                let #EntryAmount = Round(&ED.GP_UNIT,2)
                let #EntryNum = &ED.PIN_UNIT_NUM
                let $RoundOption = &ED.RND_OPTN_UNIT
                let #RoundNum = &ED.PIN_RND_UNIT_NUM                
                do printComponentDetails
                ! Rate
                print '  - '                                                        (+1,{colP2}) 
                print $RATE                                                         (,+1)
                let $EntryType = &ED.ENTRY_TYPE_RATE
                let #EntryAmount = Round(&ED.GP_RATE,2)
                let #EntryNum = &ED.PIN_RATE_NUM
                let $RoundOption = &ED.RND_OPTN_RATE
                let #RoundNum = &ED.PIN_RND_RATE_NUM                
                do printComponentDetails
        end-if
        
        print $FREQUENCY                                (+2,{colP2})      
        if &ED.FREQUENCY_OPTN = 'CP'
                print 'by Calendar'                     (,{colP3})   
        else
                if &ED.FREQUENCY_OPTN = 'SP'

                end-if
        end-if
        
        ! Generation Control
        if &ED.PIN_GCTL_NUM > 0
                do getPinDetails(&ED.PIN_GCTL_NUM)
                print '  - '                            (+1,{colP2})   
                print $GEN_CTRL                         (,+1)
                print ' :'                              (,+1)
                print $Dtl_Pin_Descr                    (,{colP3})   
        end-if

        print $PRORATION                                (+1,{colP2})      
        if &ED.PRORATION_OPTN = 'NP'
                print $NONE                             (,{colP3})   
        else
                if &ED.PRORATION_OPTN = 'PG'
                        print $DEF_PAYGRP_LEVL (,{colP3})   
                else
                        if &ED.PRORATION_OPTN = 'SP'
                                do getPinDetails(&ED.PIN_PRO_NUM)
                                let $ConOutput = $BY_RULE || ': ' ||  $Dtl_Pin_Descr
                                print $ConOutput                (,{colP3})   
                        end-if
                end-if
        end-if
        
end-procedure
!***********************************************************************
begin-procedure printComponentDetails
        ! work with $EntryType (002,PI0, other - ignore 001)
        if $EntryType = '002'
                print #EntryAmount                                      (,{colP3})   
        else 
                if $EntryType = 'PI0'
                        print $PAYEE_LEVL                               (,{colP3})   
                else 
                        if $EntryType = '001'
                        ! alphanumeric - ignore
                        else
                                do getPinDetails(#EntryNum)
                                LET $ConOutput = substr($EntryType,1,2) || '.' || rtrim($Dtl_Pin_Nm,' ') || '  (' ||   $Dtl_Pin_Descr ||')'
                                print $ConOutput                     (,{colP3}, 45)   
                        end-if
                end-if
        end-if
        
        If $RoundOption = 'NR'
                print $NONE                                              (,{colP4})   
        else 
                if $RoundOption = 'PG'
                        print $PAYGRP_DEFINED                            (,{colP4})   
                else 
                        do getPinDetails(#RoundNum)
                        print $Dtl_Pin_Descr                             (,{colP4}, 18)   
                 end-if
        end-if
        
end-procedure
!***********************************************************************




!***********************************************************************
! jjj
! function to pickup accumulator contribs frm al078
begin-procedure pickAccumContrib
let #desnadded = 0
   #debug show ' Getdtsign called for : ' #gpinnum '|' $gpinname 

begin-select
DS_AL078.PIN_NUM
DS_AL078.PIN_MBR_NUM
DS_AL078.BGN_DT
DS_AL078.END_DT 
DS_AL078.SIGNVALUE

  let #size = #size + 1
  let #desnadded = #dtsnadded + 1
  let #snvalue = &DS_AL078.SIGNVALUE
  put #gpinnum $gpinname #snvalue ' ' &DS_AL078.BGN_DT &DS_AL078.END_DT into accumbr (#size) accupin accu isplus foundname startvalid endvalid
  #debug show '- added a row ' #size '|' #gpinnum '|' $gpinname 

from PS_GPCHAL078_TMP DS_AL078
where 
    DS_AL078.PROCESS_INSTANCE = #prcs_process_instance AND
    DS_AL078.PIN_NUM = #gpinnum AND
    DS_AL078.PIN_MBR_NUM = #PinNum AND
    (
      ($PinDtlEffdt >= DS_AL078.BGN_DT AND $PinDtlEffdt <= DS_AL078.END_DT) or
      ($PinDtlEffdt >= DS_AL078.BGN_DT AND DS_AL078.END_DT is null)
    )
    
end-select

if #desnadded = 0
  #debug show ' dtsign added a blank row : ' #gpinnum '|' $gpinname 
  let #size = #size + 1
  put #gpinnum $gpinname 0  ' ' '' '' into accumbr (#size) accupin accu isplus foundname startvalid endvalid
end-if

end-procedure

! fill accumulator print rows
begin-procedure getAccumRows

let #size = 0

! pick details for user-selected accumulators
begin-select
AR_D1.PIN_NM
AR_D1.DESCR
AR_D1.PIN_NUM
AR_E.GPCH_RP_DSH

  if (rtrim(ltrim(&AR_E.GPCH_RP_DSH,' '),' ') <> '')
      let $gpinname = &AR_E.GPCH_RP_DSH
  else
      let $gpinname = &AR_D1.DESCR
  end-if
  let #gpinnum = &AR_D1.PIN_NUM
  
  do pickAccumContrib

from
PS_GPCH_RC_AL07 AR_E ,PS_GP_PIN AR_D1
where 
    AR_D1.PIN_NUM = AR_E.PIN_NUM and
    AR_D1.PIN_NUM NOT IN (SELECT AR_D2.PIN_NUM FROM PS_GP_PIN AR_D2
                              WHERE AR_D2.PIN_NM in ('CH_AH_02', 'CH_UV_02', 'CH_BV_02', 'CH_TX_02', 'CH_00_80', 'CH_00_50', 'CH_00_52', 'CH_00_54', 'CH_NE_02'))
    AND AR_D1.COUNTRY = 'CHE'
[$Criteria2]
end-select

! pick details for hardcoded accumulators
begin-select distinct
PS_GP_PIN.PIN_NUM,
PS_GP_PIN.PIN_NM
PS_GP_PIN.DESCR

  let #gpinnum = &PS_GP_PIN.PIN_NUM
  let $gpinname = &PS_GP_PIN.DESCR
  do pickAccumContrib

FROM PS_GP_PIN
WHERE PS_GP_PIN.PIN_NM in ('CH_AH_02', 'CH_UV_02', 'CH_BV_02', 'CH_TX_02', 'CH_00_80', 'CH_00_50', 'CH_00_52', 'CH_00_54', 'CH_NE_02') AND
PS_GP_PIN.COUNTRY = 'CHE'
end-select


! jjj
!***********************************************************************

end-procedure

!***********************************************************************
begin-procedure printAccumulatorMembership
  create-array name=accumbr size=50
        field = accupin:integer     ! pin_num
            field = accu:char       ! 
            field = isplus:integer  ! Sign of the contribution
            field = foundname:char
            field = startvalid:char
            field = endvalid:char

        do getAccumRows

        print $ACCUMS    (+1,{colP1})
        ! print ' '  (-1,{colP1})
        let #i = 1
        while  #i <= #size
                get $Acname #Accnum  #theSign $secondaccu from accumbr(#i) accu accupin  isplus foundname
                if $Acname = ''
                        break
                end-if
                print $Acname  (+1,{colP2}, 18)
                graphic  (0,{colPAc1},2) box 1 3 
                graphic  (0,{colPAc2},2) box 1 3 
                graphic  (0,{colPAc3},2) box 1 3 
                graphic  (0,{colPAc4},2) box 1 3 
                print 'yes'     (0,{colPAc1a},3) 
                print 'no'              (0,{colPAc2a},2) 
                print '+'               (0,{colPAc3a},1) 
                print '-'               (0,{colPAc4a},1) 
                ! this was just for validation
                ! print $secondaccu (,{colP4})
                if #theSign = 0 
                        print 'X'       (0,{colPAc2},1)
                else
                        print 'X'       (0,{colPAc1},1)
                        if #theSign > 0
                                print 'X'       (0,{colPAc3},1)                         
                        else
                                print 'X'       (0,{colPAc4},1)                         
                        end-if
                end-if
                ! print #theSign (,{colP3})
                let #i = #i + 1
        end-while

end-procedure


!***********************************************************************

begin-procedure printAccumulatorCategoryMembership
  ! using the "element list" code with light modification to the print function

  ! print $TAX_STMT           (+1,{colP1},)   
  
  let #CURR_P_N = &PIN.PIN_NUM
  let $WasPr = 'Y'
  
BEGIN-SELECT
CATAL713.PIN_CATEGORY
CATAL713.GPCH_RP_DSH
CATAL713.GPCH_AL_SNR
PINCATG3.DESCR

  if rtrim(ltrim(&CATAL713.GPCH_RP_DSH,' '),' ') <> ''
      let $SectionHeading = rtrim(ltrim(&CATAL713.GPCH_RP_DSH,' '),' ')
  else
      let $SectionHeading = &PINCATG3.DESCR
  end-if

  do separateBlocks
  print $SectionHeading           (+1,{colP1},) 
  let #in_col_nbr =  {colP1} + max(length($SectionHeading), 13) + 2
  let $in_pin_catg = &CATAL713.PIN_CATEGORY
  do Find-Category-Member

FROM
  PS_GPCH_RC_AL071 CATAL713, PS_GP_PIN_CATEGORY PINCATG3
WHERE (
    CATAL713.OPRID = $prcs_oprid AND 
    CATAL713.RUN_CNTL_ID = $prcs_run_cntl_id 
  ) and (
    PINCATG3.USED_BY = 'C' and
    PINCATG3.COUNTRY = 'CHE' and
    PINCATG3.PIN_CATEGORY = CATAL713.PIN_CATEGORY
  )
END-SELECT

end-procedure

!***********************************************************************

begin-procedure printPrintClassMembership
! to be completed
        print $PRINT_CLASSES                   (+1,{colP1},)   
        print $NAME                            (+1,{colP2})
        print $GROUP                           (,{colPPc2})
        print $SEQ                             (,{colPPc3})
        print $RATE                            (,{colPPc4})
        print $BASE                            (,{colPPc5})
        print $UNIT                            (,{colPPc6})
        print $PERCENT                         (,{colPPc7})
        print $AMOUNT                          (,{colPPc8})
        print $SUM                             (,{colPPc9})
        
begin-select distinct
PCM_A.GPCH_RC_REPORTNAME
PCM_A.GPCH_BL_PR_GROUP
PCM_A.GPCH_BL_PR_ORDER
PCM_A.GPCH_BL_PR_RATE
PCM_A.GPCH_BL_PR_BASE
PCM_A.GPCH_BL_PR_UNITS
PCM_A.GPCH_BL_PR_PERCENT
PCM_A.GPCH_BL_PR_CALC
PCM_A.GPCH_BL_PR_SUM 

        print  &PCM_A.GPCH_RC_REPORTNAME        (+1,{colP2})
        print  &PCM_A.GPCH_BL_PR_ORDER          (,{colPPc2})
        print &PCM_A.GPCH_BL_PR_GROUP           (,{colPPc3})

        if &PCM_A.GPCH_BL_PR_RATE <> 'N'
                print 'x'       (,{colPPc4})
        end-if

        if &PCM_A.GPCH_BL_PR_BASE <> 'N'
                print 'x'       (,{colPPc5})
        end-if

        if &PCM_A.GPCH_BL_PR_UNITS <> 'N'
                print 'x'       (,{colPPc6})
        end-if

        if &PCM_A.GPCH_BL_PR_PERCENT <> 'N'
                print 'x'       (,{colPPc7})
        end-if

        if &PCM_A.GPCH_BL_PR_CALC<> 'N'
                print 'x'       (,{colPPc8})
        end-if

        if &PCM_A.GPCH_BL_PR_SUM <> 'N'
                print 'x'       (,{colPPc9})
        end-if


FROM PS_GPCH_BL_PRINT PCM_A, PS_GPCH_RC_AL073 PCM_C
WHERE PCM_A.PIN_NUM = &PIN.PIN_NUM
! AND  PCM_B.GPCH_RC_REPORTNAME = PCM_A.GPCH_RC_REPORTNAME
! AND PCM_A.RUN_CNTL_ID = 
AND PCM_C.RUN_CNTL_ID = $prcs_run_cntl_id  AND
PCM_C.GPCH_RC_REPORTNAME = PCM_A.GPCH_RC_REPORTNAME AND
PCM_C.OPRID = $prcs_oprid
end-select

end-procedure

!***********************************************************************

begin-procedure printGLGroupMembership
        print $GRP_CODE          (+1,{colP1})  
        print $PAY_ENTITY        (,{colP2})  
        print $CODE              (,{colP3})  

begin-select 
PGLGM.GROUPING_CODE
PGLGM.PAY_ENTITY

  print &PGLGM.PAY_ENTITY     (+1,{colP2})   
  print &PGLGM.GROUPING_CODE    (,{colP3})   

FROM PS_GP_GL_GROUP_DTL PGLGM
WHERE PGLGM.PIN_NUM = &PIN.PIN_NUM
AND PGLGM.PAY_ENTITY IN 
(SELECT PAY_ENTITY 
FROM PS_GPCH_RC_PYENT 
WHERE RUN_CNTL_ID =  $prcs_run_cntl_id)
end-select

end-procedure
! functions for Detailed Print Format - End 
!***********************************************************************

#include 'gpchut01.sqc'
#include 'gpchut02.sqc'  !Get Pin Name AND Description
#include 'gpchut06.sqc'  !get run control parameter value
#include 'gpchut07.sqc'  !Log Output Selection
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date AND time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'datemath.sqc'  !function for date-calculation
#include 'gpchal7s.sqc'  !Get Strings Values for GPCHAL07
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB
