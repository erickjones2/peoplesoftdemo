!***********************************************************************
! CNTPAY05.SQR:  Contract Discrepancy Report                           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  24460232                                            *
!                                                                      *
!***********************************************************************
! This program is specific to HRMS for Public Sector                   *
!***********************************************************************
#include 'setenv.sqc'   !Set environment
#Include 'setup32.sqc'  !printer and page-size initialization


!***********************************************************************
begin-Report

  do Init-Report
  do Mainline
  do Get-Current-Datetime
  display ' '
  display 'Report Ended: ' noline
  display $AsOfNow
  do Stdapi-Term

end-Report


!***********************************************************************
begin-procedure Init-Report

  move 'CNTPAY05' to $ReportID
  do Stdapi-Init

  do Get-Report-Language   ! Procedure that decides the report language
                           ! and then calls 'Report-Translation' procedure
                           ! that reads the language dep. text.

  move $CNTPAY05_ReportTitle to $ReportTitle

  do Init-DateTime
  do Init-Number
  do Get-Current-Datetime
  display $ReportTitle
  display ' '
  display 'Report Began: ' noline
  display $AsOfNow
  do Select-Parameters

end-procedure


!***********************************************************************
begin-procedure Report-Translation

  ! Read from CNTPAY05 program id
  do Init_Report_Translation ($ReportID, $Language_Cd)

  do Get_Field_Information ('CNTPAY05', 'ACTUAL',           $Cntpay05_Actual,      #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'CHECK_NO',         $Cntpay05_Check,       #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'CONFIRMED',        $Cntpay05_Confirmed,   #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'CONTRACT',         $Cntpay05_Contract,    #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'EARNED_NOT_PAID',  $Cntpay05_ENP,         #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'EMPLOYEE_ID',      $Cntpay05_Employee,    #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'END_OF_REPORT',    $Cntpay05_EndReport,   #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'ID_SEQ',           $Cntpay05_Seq,         #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'NAME',             $Cntpay05_Name,        #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'OFF_CYCLE_RUN',    $Cntpay05_OffCycle,    #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'ON_CYCLE_RUN',     $Cntpay05_OnCycle,     #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'PAID_LEAVE',       $Cntpay05_PaidLeave,   #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'PAID_NOT_EARNED',  $Cntpay05_PNE,         #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'PROJECTED',        $Cntpay05_Projected,   #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'RCD_NO',           $Cntpay05_Rcd,         #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'REGULAR_EARNS',    $Cntpay05_CRG,         #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'REPORT_TITLE',     $Cntpay05_ReportTitle, #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'SEPARATE',         $Cntpay05_Separate,    #dummy_width)
  do Get_Field_Information ('CNTPAY05', 'UNPAID_LEAVE',     $Cntpay05_UnpaidLeave, #dummy_width)

end-procedure


!***********************************************************************
begin-heading 8
#include 'stdhdg06.sqc'

  print $CycleDesc                     (4) center
  print $Cntpay05_Contract             (7,54)
  print $Cntpay05_Separate             (0,64)
  print $Cntpay05_Contract             (0,87)
  print $Cntpay05_Name                 (+1,1)
  print $Cntpay05_Employee             (0,32)
  print $Cntpay05_Rcd                  (0,45)
  print $Cntpay05_Seq                  (0,56)
  print $Cntpay05_Check                (0,64)
  print $Cntpay05_CRG                  (0,82)
  print $Cntpay05_PNE                  (0,97)
  print $Cntpay05_ENP                  (0,114)
  print $Cntpay05_PaidLeave            (0,136)
  print $Cntpay05_UnpaidLeave          (0,151)
  print $Cntpay05_Confirmed            (0,165)

end-heading


!***********************************************************************
begin-procedure Delete-Work-Record

  let $err-statement1 = 'CNTPAY05, Delete Error - Delete-Work-Record'
  let $err-statement2 = ' '

begin-SQL On-Error=SQL-Statement-Error
DELETE FROM PS_R_CNTPAY05
WHERE PROCESS_INSTANCE = #Prcs_Process_Instance
end-SQL

end-procedure


!***********************************************************************
begin-procedure Mainline

  let #Total_Rec_Written = 0

  if $RC_PAYINIT.Run_ID <> ''
     let $Cycle     = 'N'
     let $CycleDesc = $Cntpay05_OnCycle
     do Process-On-Cycle
  else
     let $Cycle     = 'Y'
     let $CycleDesc = $Cntpay05_OffCycle
     do Process-Off-Cycle
  end-if

  if #Total_Rec_Written > 0
     do Print-Details
     print $Cntpay05_EndReport         (+3,1) center
     do Delete-Work-Record
  end-if

end-procedure


!***********************************************************************
begin-procedure Process-On-Cycle

  let $err-statement1 = 'CNTPAY05, Select Error - Process-On-Cycle'
  let $err-statement2 = 'Bind Variable: Run ID ' || $RC_PAYINIT.Run_ID

begin-SELECT On-Error=SQL-Statement-Error
CAL.COMPANY
CAL.PAYGROUP
CAL.PAY_END_DT
CAL.PAY_CALC_RUN

  if &CAL.PAY_CALC_RUN <> 'Y'
     display ' '
     display '   Pay Calendar: ' noline
     display &CAL.COMPANY        noline
     display ', '                noline
     display &CAL.PAYGROUP       noline
     display ', '                noline
     display &CAL.PAY_END_DT     noline
     display ' not processed'
     display '   Payroll Calculation has not been run'
  else
     let $Company    = rtrim(&CAL.COMPANY, ' ')
     let $PayGroup   = rtrim(&CAL.PAYGROUP, ' ')
     let $PayEndDate = &CAL.PAY_END_DT
     do Check-Contract-Detail
     if $Found = 'Y'
        do Main-Processing
     end-if
  end-if

FROM  PS_PAY_CALENDAR CAL
WHERE CAL.RUN_ID = $RC_PAYINIT.Run_ID
ORDER BY CAL.COMPANY, CAL.PAYGROUP, CAL.PAY_END_DT
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Process-Off-Cycle

  move $RC_PAYINIT.Company    to $Company
  move $RC_PAYINIT.PayGroup   to $PayGroup
  move $RC_PAYINIT.Pay_End_Dt to $PayEndDate
  do Check-Contract-Detail
  if $Found = 'Y'
     do Main-Processing
  end-if

end-procedure


!***********************************************************************
begin-procedure Check-Contract-Detail

  let $err-statement1 = 'CNTPAY05, Select Error - Check-Contract-Detail'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup '
                        || $PayGroup || ', Pay End Date ' || $PayEndDate
  let $Found = 'N'

begin-SELECT LOOPS=1 On-Error=SQL-Statement-Error
CD.EMPLID

  let $Found = 'Y'

FROM  PS_HP_CONTPAY_DTL CD, PS_HP_CONTPAY_PARM PM
WHERE CD.PAY_END_DT = $PayEndDate
  AND CD.OFF_CYCLE  = $Cycle
  AND CD.HP_PAYMENT_STATUS IN ('C','P','S')
  AND CD.HP_CONTRACT_SEQ = (SELECT MAX(CD1.HP_CONTRACT_SEQ)
                            FROM  PS_HP_CONTPAY_DTL CD1
                            WHERE CD1.EMPLID          = CD.EMPLID
                              AND CD1.EMPL_RCD        = CD.EMPL_RCD
                              AND CD1.HP_CONTRACT_NUM = CD.HP_CONTRACT_NUM
                              AND CD1.PAY_END_DT      = CD.PAY_END_DT
                              AND CD1.OFF_CYCLE       = CD.OFF_CYCLE
                              AND CD1.SEPCHK          = CD.SEPCHK)
  AND PM.EMPLID          = CD.EMPLID
  AND PM.EMPL_RCD        = CD.EMPL_RCD
  AND PM.HP_CONTRACT_NUM = CD.HP_CONTRACT_NUM
  AND PM.HP_CONTRACT_SEQ = CD.HP_CONTRACT_SEQ
  AND PM.COMPANY         = $Company
  AND PM.PAYGROUP        = $PayGroup
end-SELECT

  if $Found = 'N'

begin-SELECT LOOPS=1 On-Error=SQL-Statement-Error
PD.EMPLID

  let $Found = 'Y'

FROM  PS_PAY_CNTRACT_DTL PD
WHERE PD.COMPANY    = $Company
  AND PD.PAYGROUP   = $PayGroup
  AND PD.PAY_END_DT = $PayEndDate
  AND PD.OFF_CYCLE  = $Cycle
end-SELECT

  end-if

  if $Found = 'N'
     display ' '
     display '   Pay Calendar: ' noline
     display $Company            noline
     display ', '                noline
     display $PayGroup           noline
     display ', '                noline
     display $PayEndDate         noline
     display ' not processed'
     display '   No Contract Details were found'
  end-if

end-procedure


!***********************************************************************
begin-procedure Main-Processing

  let $err-statement1 = 'CNTPAY05, Select Error - Main-Processing'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup '
                        || $PayGroup || ', Pay End Date ' || $PayEndDate
  let #Rec_Written = 0

begin-SELECT On-Error=SQL-Statement-Error
CP.EMPLID
CP.EMPL_RCD
CP.HP_CONTRACT_NUM
CP.HP_CONTRACT_SEQ

  let $EmplID       = rtrim(&CP.EMPLID, ' ')
  let #Empl_Rcd     = &CP.EMPL_RCD
  let #Contract_Num = &CP.HP_CONTRACT_NUM
  let #Contract_Seq = &CP.HP_CONTRACT_SEQ
  let $Empl_Rcd     = edit(#Empl_Rcd, '999')
  let $Contract_Num = edit(#Contract_Num, '0999999')
  let $Contract_Seq = edit(#Contract_Seq, '999')
  do Get-Projected-Earnings

FROM  PS_HP_CONTPAY_PARM CP
WHERE CP.COMPANY         = $Company
  AND CP.PAYGROUP        = $PayGroup
  AND CP.HP_CONTRACT_SEQ = (SELECT MAX(CP1.HP_CONTRACT_SEQ)
                            FROM  PS_HP_CONTPAY_DTL CP1
                            WHERE CP1.EMPLID          = CP.EMPLID
                              AND CP1.EMPL_RCD        = CP.EMPL_RCD
                              AND CP1.HP_CONTRACT_NUM = CP.HP_CONTRACT_NUM)
end-SELECT

  let #Project_CRG    = 0
  let #Project_PNE    = 0
  let #Project_ENP    = 0
  let $Payment_Status = ' '

begin-SELECT On-Error=SQL-Statement-Error
PCD.EMPLID
CL.EMPL_RCD
PCD.HP_CONTRACT_NUM
PCD.HP_CONTRACT_SEQ
PCD.SEPCHK
#ifdef DB2ALL
DECIMAL(SUM(PCD.HP_ACTUAL_CRG),15,2)    &PCD.HP_ACTUAL_CRG
DECIMAL(SUM(PCD.HP_ACTUAL_PNE),15,2)    &PCD.HP_ACTUAL_PNE
DECIMAL(SUM(PCD.HP_ACTUAL_ENP),15,2)    &PCD.HP_ACTUAL_ENP
DECIMAL(SUM(PCD.HP_PAID_LEAVE),15,2)    &PCD.HP_PAID_LEAVE
DECIMAL(SUM(PCD.HP_UNPAID_LEAVE),15,2)  &PCD.HP_UNPAID_LEAVE
#else
SUM(PCD.HP_ACTUAL_CRG)                  &PCD.HP_ACTUAL_CRG
SUM(PCD.HP_ACTUAL_PNE)                  &PCD.HP_ACTUAL_PNE
SUM(PCD.HP_ACTUAL_ENP)                  &PCD.HP_ACTUAL_ENP
SUM(PCD.HP_PAID_LEAVE)                  &PCD.HP_PAID_LEAVE
SUM(PCD.HP_UNPAID_LEAVE)                &PCD.HP_UNPAID_LEAVE
#end-if

  let $EmplID       = rtrim(&PCD.EMPLID, ' ')
  let #Empl_Rcd     = &CL.EMPL_RCD
  let #Contract_Num = &PCD.HP_CONTRACT_NUM
  let #Contract_Seq = &PCD.HP_CONTRACT_SEQ
  let #SepChk       = &PCD.SEPCHK
  let $Empl_Rcd     = edit(#Empl_Rcd, '999')
  let $Contract_Num = edit(#Contract_Num, '0999999')
  let $Contract_Seq = edit(#Contract_Seq, '999')
  let $SepChk       = edit(#SepChk, '9')
  if (&PCD.HP_ACTUAL_CRG + &PCD.HP_PAID_LEAVE + &PCD.HP_UNPAID_LEAVE <> 0)
        or &PCD.HP_ACTUAL_PNE <> 0
        or &PCD.HP_ACTUAL_ENP <> 0
     do Get-Actual-Earnings
     do Insert-Work-Record
  end-if

FROM  PS_PAY_CNTRACT_DTL PCD, PS_PAY_CHECK PCK, PS_HP_CNTRACT_LIST CL
WHERE PCD.COMPANY         = $Company
  AND PCD.PAY_END_DT      = $PayEndDate
  AND PCD.OFF_CYCLE       = $Cycle
  AND PCD.EMPLID          = CL.EMPLID
  AND PCD.HP_CONTRACT_NUM = CL.HP_CONTRACT_NUM
  AND PCD.COMPANY         = PCK.COMPANY
  AND PCD.PAYGROUP        = PCK.PAYGROUP
  AND PCD.PAY_END_DT      = PCK.PAY_END_DT
  AND PCD.OFF_CYCLE       = PCK.OFF_CYCLE
  AND PCD.PAGE_NUM        = PCK.PAGE_NUM
  AND PCD.LINE_NUM        = PCK.LINE_NUM
  AND PCD.SEPCHK          = PCK.SEPCHK
  AND PCD.EMPLID          = PCK.EMPLID
  AND PCK.PAYCHECK_STATUS IN ('A','C','F','R')
  AND PCD.EMPLID NOT IN (SELECT HCD.EMPLID
                         FROM  PS_HP_CONTPAY_DTL HCD
                         WHERE HCD.EMPLID          = PCD.EMPLID
                           AND HCD.EMPL_RCD        = CL.EMPL_RCD
                           AND HCD.HP_CONTRACT_NUM = PCD.HP_CONTRACT_NUM
                           AND HCD.HP_CONTRACT_SEQ = PCD.HP_CONTRACT_SEQ
                           AND HCD.PAY_END_DT      = PCD.PAY_END_DT
                           AND HCD.OFF_CYCLE       = PCD.OFF_CYCLE
                           AND HCD.SEPCHK          = PCD.SEPCHK
                           AND HCD.HP_PAYMENT_STATUS IN ('C','P','S'))
  AND EXISTS (SELECT 'X'
              FROM  PS_PAY_EARNINGS PCE
              WHERE PCE.COMPANY         = PCK.COMPANY
                AND PCE.PAYGROUP        = PCK.PAYGROUP
                AND PCE.PAY_END_DT      = PCK.PAY_END_DT
                AND PCE.OFF_CYCLE       = PCK.OFF_CYCLE
                AND PCE.PAGE_NUM        = PCK.PAGE_NUM
                AND PCE.LINE_NUM        = PCK.LINE_NUM
                AND PCE.SEPCHK          = PCK.SEPCHK
                AND PCE.EMPLID          = PCK.EMPLID
                AND (PCE.ORIG_PAYGROUP  = $PayGroup
                  OR (PCE.ORIG_PAYGROUP = ''  AND PCK.PAYGROUP = $PayGroup)
                  OR (PCE.ORIG_PAYGROUP = ' ' AND PCK.PAYGROUP = $PayGroup))
                AND PCE.PAY_LINE_STATUS IN ('C','F','V')
                AND PCE.HP_CONTRACT_NUM = PCD.HP_CONTRACT_NUM)
GROUP BY PCD.EMPLID, CL.EMPL_RCD, PCD.HP_CONTRACT_NUM, PCD.HP_CONTRACT_SEQ, PCD.SEPCHK
end-SELECT

  if #Rec_Written = 0
     display ' '
     display '   Pay Calendar: ' noline
     display $Company            noline
     display ', '                noline
     display $PayGroup           noline
     display ', '                noline
     display $PayEndDate         noline
     display ' processed'
     display '   No Discrepancy was found'
  else
     let #Total_Rec_Written = #Total_Rec_Written + #Rec_Written
  end-if

end-procedure


!***********************************************************************
begin-procedure Get-Projected-Earnings

  let $err-statement1 = 'CNTPAY05, Select Error - Get-Projected-Earnings'
  let $err-statement2 = 'Bind Variables: EmplID ' || $EmplID || ', Empl Rcd '
                        || $Empl_Rcd || ', Contract Num ' || $Contract_Num
                        || ', Contract Seq ' || $Contract_Seq
                        || ', Pay End Date ' || $PayEndDate

begin-SELECT On-Error=SQL-Statement-Error
CD.SEPCHK
CD.HP_PAYMENT_STATUS
CD.HP_PROJECT_CRG
CD.HP_PROJECT_PNE
CD.HP_PROJECT_ENP

  let #SepChk         = &CD.SEPCHK
  let $Payment_Status = &CD.HP_PAYMENT_STATUS
  let #Project_CRG    = &CD.HP_PROJECT_CRG
  let #Project_PNE    = &CD.HP_PROJECT_PNE
  let #Project_ENP    = &CD.HP_PROJECT_ENP
  let $SepChk         = edit(#SepChk, '9')
  do Get-Actual-Earnings
  if (#Project_CRG <> #Confirmed_Actual_CRG + #Confirmed_Paid_Leave + #Confirmed_Unpaid_Leave +
                      #Calculated_Actual_CRG + #Calculated_Paid_Leave + #Calculated_Unpaid_Leave)
        or (#Project_PNE <> #Confirmed_Actual_PNE + #Calculated_Actual_PNE)
        or (#Project_ENP <> #Confirmed_Actual_ENP + #Calculated_Actual_ENP)
     do Insert-Work-Record
  end-if

FROM  PS_HP_CONTPAY_DTL CD
WHERE CD.EMPLID          = $EmplID
  AND CD.EMPL_RCD        = #Empl_Rcd
  AND CD.HP_CONTRACT_NUM = #Contract_Num
  AND CD.HP_CONTRACT_SEQ = #Contract_Seq
  AND CD.PAY_END_DT      = $PayEndDate
  AND CD.OFF_CYCLE       = $Cycle
  AND CD.HP_PAYMENT_STATUS IN ('C','P','S')
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Get-Actual-Earnings

  let $err-statement1 = 'CNTPAY05, Select Error - Get-Actual-Earnings'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup '
                        || $PayGroup || ', Pay End Date ' || $PayEndDate
                        || ', SepChk ' || $SepChk || ', EmplID ' || $EmplID
                        || ', Contract Num ' || $Contract_Num
                        || ', Contract Seq ' || $Contract_Seq
  let $Confirmed               = 'N'
  let $Calculated              = 'N'
  let #Confirmed_Actual_CRG    = 0
  let #Confirmed_Actual_PNE    = 0
  let #Confirmed_Actual_ENP    = 0
  let #Confirmed_Paid_Leave    = 0
  let #Confirmed_Unpaid_Leave  = 0
  let #Calculated_Actual_CRG   = 0
  let #Calculated_Actual_PNE   = 0
  let #Calculated_Actual_ENP   = 0
  let #Calculated_Paid_Leave   = 0
  let #Calculated_Unpaid_Leave = 0

begin-SELECT On-Error=SQL-Statement-Error
PD.HP_ACTUAL_CRG
PD.HP_ACTUAL_PNE
PD.HP_ACTUAL_ENP
PD.HP_PAID_LEAVE
PD.HP_UNPAID_LEAVE

  let $Confirmed              = 'Y'
  let #Confirmed_Actual_CRG   = #Confirmed_Actual_CRG + &PD.HP_ACTUAL_CRG
  let #Confirmed_Actual_PNE   = #Confirmed_Actual_PNE + &PD.HP_ACTUAL_PNE
  let #Confirmed_Actual_ENP   = #Confirmed_Actual_ENP + &PD.HP_ACTUAL_ENP
  let #Confirmed_Paid_Leave   = #Confirmed_Paid_Leave + &PD.HP_PAID_LEAVE
  let #Confirmed_Unpaid_Leave = #Confirmed_Unpaid_Leave + &PD.HP_UNPAID_LEAVE

FROM  PS_PAY_CHECK PC, PS_PAY_CNTRACT_DTL PD
WHERE PC.COMPANY         = $Company
  AND PC.PAY_END_DT      = $PayEndDate
  AND PC.OFF_CYCLE       = $Cycle
  AND PC.SEPCHK          = #SepChk
  AND PC.EMPLID          = $EmplID
  AND PC.PAYCHECK_STATUS IN ('A','F','R')
  AND PC.COMPANY         = PD.COMPANY
  AND PC.PAYGROUP        = PD.PAYGROUP
  AND PC.PAY_END_DT      = PD.PAY_END_DT
  AND PC.OFF_CYCLE       = PD.OFF_CYCLE
  AND PC.PAGE_NUM        = PD.PAGE_NUM
  AND PC.LINE_NUM        = PD.LINE_NUM
  AND PC.SEPCHK          = PD.SEPCHK
  AND PC.EMPLID          = PD.EMPLID
  AND PD.HP_CONTRACT_NUM = #Contract_Num
  AND PD.HP_CONTRACT_SEQ = #Contract_Seq
  AND EXISTS (SELECT 'X'
              FROM  PS_PAY_EARNINGS PE
              WHERE PE.COMPANY         = PC.COMPANY
                AND PE.PAYGROUP        = PC.PAYGROUP
                AND PE.PAY_END_DT      = PC.PAY_END_DT
                AND PE.OFF_CYCLE       = PC.OFF_CYCLE
                AND PE.PAGE_NUM        = PC.PAGE_NUM
                AND PE.LINE_NUM        = PC.LINE_NUM
                AND PE.SEPCHK          = PC.SEPCHK
                AND PE.EMPLID          = PC.EMPLID
                AND (PE.ORIG_PAYGROUP  = $PayGroup
                  OR (PE.ORIG_PAYGROUP = ''  AND PC.PAYGROUP = $PayGroup)
                  OR (PE.ORIG_PAYGROUP = ' ' AND PC.PAYGROUP = $PayGroup))
                AND PE.PAY_LINE_STATUS IN ('C','F','V')
                AND PE.HP_CONTRACT_NUM = PD.HP_CONTRACT_NUM)
end-SELECT

begin-SELECT On-Error=SQL-Statement-Error
PD1.HP_ACTUAL_CRG
PD1.HP_ACTUAL_PNE
PD1.HP_ACTUAL_ENP
PD1.HP_PAID_LEAVE
PD1.HP_UNPAID_LEAVE

  let $Calculated              = 'Y'
  let #Calculated_Actual_CRG   = #Calculated_Actual_CRG + &PD1.HP_ACTUAL_CRG
  let #Calculated_Actual_PNE   = #Calculated_Actual_PNE + &PD1.HP_ACTUAL_PNE
  let #Calculated_Actual_ENP   = #Calculated_Actual_ENP + &PD1.HP_ACTUAL_ENP
  let #Calculated_Paid_Leave   = #Calculated_Paid_Leave + &PD1.HP_PAID_LEAVE
  let #Calculated_Unpaid_Leave = #Calculated_Unpaid_Leave + &PD1.HP_UNPAID_LEAVE

FROM  PS_PAY_CHECK PC1, PS_PAY_CNTRACT_DTL PD1
WHERE PC1.COMPANY         = $Company
  AND PC1.PAY_END_DT      = $PayEndDate
  AND PC1.OFF_CYCLE       = $Cycle
  AND PC1.SEPCHK          = #SepChk
  AND PC1.EMPLID          = $EmplID
  AND PC1.PAYCHECK_STATUS = 'C'
  AND PC1.COMPANY         = PD1.COMPANY
  AND PC1.PAYGROUP        = PD1.PAYGROUP
  AND PC1.PAY_END_DT      = PD1.PAY_END_DT
  AND PC1.OFF_CYCLE       = PD1.OFF_CYCLE
  AND PC1.PAGE_NUM        = PD1.PAGE_NUM
  AND PC1.LINE_NUM        = PD1.LINE_NUM
  AND PC1.SEPCHK          = PD1.SEPCHK
  AND PC1.EMPLID          = PD1.EMPLID
  AND PD1.HP_CONTRACT_NUM = #Contract_Num
  AND PD1.HP_CONTRACT_SEQ = #Contract_Seq
  AND EXISTS (SELECT 'X'
              FROM  PS_PAY_EARNINGS PE1
              WHERE PE1.COMPANY         = PC1.COMPANY
                AND PE1.PAYGROUP        = PC1.PAYGROUP
                AND PE1.PAY_END_DT      = PC1.PAY_END_DT
                AND PE1.OFF_CYCLE       = PC1.OFF_CYCLE
                AND PE1.PAGE_NUM        = PC1.PAGE_NUM
                AND PE1.LINE_NUM        = PC1.LINE_NUM
                AND PE1.SEPCHK          = PC1.SEPCHK
                AND PE1.EMPLID          = PC1.EMPLID
                AND (PE1.ORIG_PAYGROUP  = $PayGroup
                  OR (PE1.ORIG_PAYGROUP = ''  AND PC1.PAYGROUP = $PayGroup)
                  OR (PE1.ORIG_PAYGROUP = ' ' AND PC1.PAYGROUP = $PayGroup))
                AND PE1.PAY_LINE_STATUS IN ('C','F','V')
                AND PE1.HP_CONTRACT_NUM = PD1.HP_CONTRACT_NUM)
end-SELECT

end-procedure


!***********************************************************************
begin-procedure Insert-Work-Record

  let $err-statement1 = 'CNTPAY05, Insert Error - Insert-Error-Record'
  let $err-statement2 = 'Bind Variables: Company ' || $Company || ', Paygroup '
                        || $PayGroup || ', Pay End Date ' || $PayEndDate
                        || ', EmplID ' || $EmplID || ', Empl Rcd ' || $Empl_Rcd
                        || ', Contract Num ' || $Contract_Num
                        || ', Contract Seq ' || $Contract_Seq
                        || ', SepChk ' || $SepChk
  if $Confirmed = 'Y'

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_R_CNTPAY05 (
PROCESS_INSTANCE,
COMPANY,
PAYGROUP,
PAY_END_DT,
EMPLID,
EMPL_RCD,
HP_CONTRACT_NUM,
HP_CONTRACT_SEQ,
OFF_CYCLE,
SEPCHK,
PAYCHECK_STATUS,
HP_PAYMENT_STATUS,
HP_PROJECT_CRG,
HP_PROJECT_PNE,
HP_PROJECT_ENP,
HP_ACTUAL_CRG,
HP_ACTUAL_PNE,
HP_ACTUAL_ENP,
HP_PAID_LEAVE,
HP_UNPAID_LEAVE)
VALUES (
#Prcs_Process_Instance,
$Company,
$PayGroup,
$PayEndDate,
$EmplID,
#Empl_Rcd,
#Contract_Num,
#Contract_Seq,
$Cycle,
#SepChk,
'Y',
$Payment_Status,
#Project_CRG,
#Project_PNE,
#Project_ENP,
#Confirmed_Actual_CRG,
#Confirmed_Actual_PNE,
#Confirmed_Actual_ENP,
#Confirmed_Paid_Leave,
#Confirmed_Unpaid_Leave)
end-SQL

     let #Rec_Written = #Rec_Written + 1
  end-if

  if $Calculated = 'Y' or ($Confirmed = 'N' and $Calculated = 'N')

begin-SQL On-Error=SQL-Statement-Error
INSERT INTO PS_R_CNTPAY05 (
PROCESS_INSTANCE,
COMPANY,
PAYGROUP,
PAY_END_DT,
EMPLID,
EMPL_RCD,
HP_CONTRACT_NUM,
HP_CONTRACT_SEQ,
OFF_CYCLE,
SEPCHK,
PAYCHECK_STATUS,
HP_PAYMENT_STATUS,
HP_PROJECT_CRG,
HP_PROJECT_PNE,
HP_PROJECT_ENP,
HP_ACTUAL_CRG,
HP_ACTUAL_PNE,
HP_ACTUAL_ENP,
HP_PAID_LEAVE,
HP_UNPAID_LEAVE)
VALUES (
#Prcs_Process_Instance,
$Company,
$PayGroup,
$PayEndDate,
$EmplID,
#Empl_Rcd,
#Contract_Num,
#Contract_Seq,
$Cycle,
#SepChk,
'N',
$Payment_Status,
#Project_CRG,
#Project_PNE,
#Project_ENP,
#Calculated_Actual_CRG,
#Calculated_Actual_PNE,
#Calculated_Actual_ENP,
#Calculated_Paid_Leave,
#Calculated_Unpaid_Leave)
end-SQL

     let #Rec_Written = #Rec_Written + 1
  end-if

end-procedure


!***********************************************************************
begin-procedure Print-Details

  let $err-statement1 = 'CNTPAY05, Select Error - Print-Details'
  let $err-statement2 = ' '

  let $Prev_Company      = ' '
  let $Prev_PayGroup     = ' '
  let $Cmp_PrevEndDate   = '19000101'
  let $Prev_Name         = ' '
  let $Prev_EmplID       = ' '
  let #Prev_Contract_Num = 0
  let #Prev_SepChk       = 0
  let #Cur_Line          = 0

begin-SELECT On-Error=SQL-Statement-Error
RD.COMPANY
RD.PAY_END_DT
RD.PAYGROUP
RD.EMPLID
RD.EMPL_RCD
RD.HP_CONTRACT_NUM
RD.HP_CONTRACT_SEQ
RD.OFF_CYCLE
RD.SEPCHK
RD.PAYCHECK_STATUS
RD.HP_PROJECT_CRG
RD.HP_PROJECT_PNE
RD.HP_PROJECT_ENP
RD.HP_ACTUAL_CRG
RD.HP_ACTUAL_PNE
RD.HP_ACTUAL_ENP
RD.HP_PAID_LEAVE
RD.HP_UNPAID_LEAVE
PN.NAME

  if $Prev_Company = ' '
     let $Company    = &RD.COMPANY
     let $PayGroup   = &RD.PAYGROUP
     let $PayEndDate = &RD.PAY_END_DT
  end-if

  if &PN.NAME <> $Prev_Name
        or &RD.EMPLID <> $Prev_EmplID
        or &RD.HP_CONTRACT_NUM <> #Prev_Contract_Num
        or &RD.SEPCHK <> #Prev_SepChk
     let #Line = 3
  else
     let #Line = 1
  end-if

  let $RDEndDate = &RD.PAY_END_DT
  do Format-Datetime($RDEndDate, $Cmp_RDEndDate, {DEFCMP}, '', '')

  if &RD.COMPANY <> $Prev_Company
        or &RD.PAYGROUP <> $Prev_PayGroup
        or $Cmp_RDEndDate <> $Cmp_PrevEndDate
        or #Cur_Line + #Line > 40
     let $Prev_Company    = &RD.COMPANY
     let $Prev_PayGroup   = &RD.PAYGROUP
     let $Cmp_PrevEndDate = $Cmp_RDEndDate
     if #Prev_Contract_Num > 0
        new-page
        let $Company    = &RD.COMPANY
        let $PayGroup   = &RD.PAYGROUP
        let $PayEndDate = &RD.PAY_END_DT
        let #Cur_Line   = 0
     end-if
  end-if

  if #Cur_Line = 0
     print &PN.NAME                    (2,1,30)
     print &RD.EMPLID                  (0,32)
     print &RD.EMPL_RCD                (0,46)  edit 999
     print &RD.HP_CONTRACT_NUM         (0,51)  edit 0999999
     print '/'                         (0,58)
     print &RD.HP_CONTRACT_SEQ         (0,59)  edit 999
     print &RD.SEPCHK                  (0,65)  edit 9
  end-if

  let $Projected = 'Y'
  if &PN.NAME <> $Prev_Name or &RD.EMPLID <> $Prev_EmplID
     if #Cur_Line > 0
        print &PN.NAME                 (+2,1,30)
        print &RD.EMPLID               (0,32)
        print &RD.EMPL_RCD             (0,46)  edit 999
        print &RD.HP_CONTRACT_NUM      (0,51)  edit 0999999
        print '/'                      (0,58)
        print &RD.HP_CONTRACT_SEQ      (0,59)  edit 999
        print &RD.SEPCHK               (0,65)  edit 9
     end-if
  else
     if &RD.HP_CONTRACT_NUM <> #Prev_Contract_Num
        if #Cur_Line > 0
           print &RD.EMPL_RCD          (+2,46) edit 999
           print &RD.HP_CONTRACT_NUM   (0,51)  edit 0999999
           print '/'                   (0,58)
           print &RD.HP_CONTRACT_SEQ   (0,59)  edit 999
           print &RD.SEPCHK            (0,65)  edit 9
        end-if
     else
        if &RD.SEPCHK <> #Prev_SepChk
           if #Cur_Line > 0
              print &RD.SEPCHK         (+2,65) edit 9
           end-if
        else
           let $Projected = 'N'
           if #Cur_Line = 0
              let #Cur_Line = 1
              position (1,1)
           end-if
        end-if
     end-if
  end-if

  let $Prev_Name         = &PN.NAME
  let $Prev_EmplID       = &RD.EMPLID
  let #Prev_Contract_Num = &RD.HP_CONTRACT_NUM
  let #Prev_SepChk       = &RD.SEPCHK

  if $Projected = 'Y'
     print $Cntpay05_Projected         (0,69)
     print &RD.HP_PROJECT_CRG          (0,80)  edit 9999,999,999.99mi
     print &RD.HP_PROJECT_PNE          (0,97)  edit 9999,999,999.99mi
     print &RD.HP_PROJECT_ENP          (0,114) edit 9999,999,999.99mi
  end-if

  print $Cntpay05_Actual               (+1,69)
  print &RD.HP_ACTUAL_CRG              (0,80)  edit 9999,999,999.99mi
  print &RD.HP_ACTUAL_PNE              (0,97)  edit 9999,999,999.99mi
  print &RD.HP_ACTUAL_ENP              (0,114) edit 9999,999,999.99mi
  print &RD.HP_PAID_LEAVE              (0,131) edit 9999,999,999.99mi
  print &RD.HP_UNPAID_LEAVE            (0,148) edit 9999,999,999.99mi
  print &RD.PAYCHECK_STATUS            (0,169)
  let #Cur_Line = #Cur_Line + #Line

FROM  PS_R_CNTPAY05 RD, PS_PERSON_NAME PN
WHERE PROCESS_INSTANCE = #Prcs_Process_Instance
  AND RD.EMPLID        = PN.EMPLID
ORDER BY RD.COMPANY, RD.PAYGROUP, RD.PAY_END_DT, PN.NAME,
         RD.EMPLID, RD.EMPL_RCD, RD.HP_CONTRACT_NUM,
         RD.HP_CONTRACT_SEQ, RD.SEPCHK, RD.PAYCHECK_STATUS
end-SELECT

end-procedure


!***********************************************************************
begin-procedure SQL-Statement-Error

  if #SQL-Status <> 0
     display 'SQL-Statement-Error '
     display $err-statement1
     display $err-statement2
     display ' Error: ' noline
     display $SQL-error
     display ' SQL Status: ' noline
     display #SQL-Status
     do Rollback-Transaction
     do Commit-Transaction
     stop
  end-if

end-procedure


#Include 'getcodta.sqc'  !Get-Company-Data procedure
#Include 'getpgdta.sqc'  !Get-PayGroup-Data procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Date math routine
#Include 'number.sqc'    !Routines to format numbers
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#Include 'stdapi.sqc'    !Update Process API
#Include 'payrnctl.sqc'  !Get-Run-Control procedure
