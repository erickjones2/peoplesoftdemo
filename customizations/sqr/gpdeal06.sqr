!***********************************************************************
!  GPDEAL06:   Payroll statistics -Verdiensterhebung                   *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:34:54                                 !
!       $Release:  HR92                                                !
!      $Revision:  105                                                 !
!                                                                      *
!***********************************************************************

!
! DEU20070919-1811 8.9B11 - Jeevan John. Changed to show summed up amount 
!                            of multiple contribution group on a single row 
!                            of the output PDF.
!

#include 'setenv.sqc' !set environment
#define SThousand '.'                   
#define SDecimal  ','                   

#define col0         18
#define col0a         2
#define col1        35
#define col2        47
#define col3        60
#define col3a       83
#define col31a      65
#define col4        103
#define col4a       105
#define col41a      80
#define col5       125
#define col5a      135
#define col51a     130

#define col0_y        14
#define col0a_y       15
#define col1_y        19
#define col2_y        26
#define col2a_y       22
#define col3_y        33
#define col4_y        43
!#define col5_y        51
#define col5_y        50

!#define col6_y        59
#define col6_y        58
#define col7_y        68
!#define col7a_y       67
#define col7a_y       66
!#define col8_y        73
#define col8_y        70
!#define col9_y        79
#define col9_y        74
!#define col10_y       85
#define col10_y       80
#define col10_ya      95
!#define col11_y       101 
#define col11_y        99
!#define col11a_y      99
#define col11a_y       92
!#define col12_y       110
#define col12_y       107
!#define col12a_y      107
#define col12a_y       104
!#define col13_y       118
#define col13_y       114
!#define col13a_y      115
#define col13a_y      108
!#define col14_y       122
#define col14_y       115
!#define col15_y       125
#define col15_y       122
#define col16_y       135
#define col17_y       115
#define col18_y       123
#define col19_y       127 
#define col20_y       60
#define col20a_y       63
#define col21_y       80
#define col22_y       55
#define col23_y       75
!#define col24_y       133
#define col24_y       129
!#define col24a_y      130
#define col24a_y      122
!#define col25_y       141
#define col25_y       135
!#define col25a_y      137
#define col25a_y      129
!#define col26_y       148
#define col26_y       140
!#define col27_y       156
#define col27_y       147
!#define col27a_y      153
#define col27a_y      143
!#define col28_y       163
#define col28_y       154
!#define col28a_y      160
#define col28a_y      149
#define col28b_y      162
#define col29_y       172
#define col29a_y       174
!#define col30_y       91
#define col30_y       89

begin-Program
  show 'JJJ EEeez the new one.'
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do prepare-Report
  do Process-Main
  do Stdapi-Term
end-Program


#include 'setup32.sqc'

!**********************************************************************

Begin-Procedure prepare-Report
! wdu05b7: added indicator for the log to verify report version
! jlj pre9 -- changed report version, new version is 881-PRE9-1
! he - ICE 1475121000 - Changed output grouping to location-si_btnr
! rh06b11: ICE 1534858000 - display GPDE_AL_STAT_NBR instead of GPDE_SI_BTNR
! rh07 890b09 - moving forward from Single posting 
! PBHAGAT12 91C12 - Salary Statistics change - tax update 2012 

!show '===FUNCTIONAL UPDATE STAMP: 20070924-1040 8.90 gdeB11 ==='
!show '===FUNCTIONAL UPDATE STAMP: GP 9.1 update 2011-E ==='
 show '===FUNCTIONAL UPDATE STAMP: GP 9.1 update 2012-C ==='

!ChangedFor2004Bundle2: need to init the values to print for the header.
do Get-Values

if $Month_Year = 'Q'
  if $ReportEndDate <> ''
    do ConvertToComponents($ReportEndDate,$YY,$mm,$dd)
    do Get-Translate-Value
    let $ReportTitle   = 'Verdiensterhebung in Industrie und Handel für ' ||
                   'Quartal' || ' ' ||$QUARTER||'/'||substr($YY,3,2) 
 let $Ctl_Curr_PayE = $Ctl_Curr_Pay_End_Dt
    do InitialDt
  end-if

else
 
   if $Ctl_Year <> '0'
     let $ReportTitle        = 'Verdiensterhebung in Industrie und Handel für ' || ' ' || $Ctl_Year
     let $CMP_Start_Dt    = $Ctl_Year || '01' || '01' || '0000'
     let $CMP_End_Dt      = $Ctl_Year || '12' || '31' || '0000'
     do Format-DateTime($CMP_start_Dt, $out, {DEFCMP},'','native')
     do Format-DateTime($CMP_end_Dt, $out2, {DEFCMP},'','native')
     let $Ctl_Start_Dt    = rtrim($out, ' ')
     let $Ctl_End_Dt      = rtrim($out2, ' ')
     #debug show ' From : '   $Ctl_Start_Dt  ' To : '  $Ctl_End_Dt
     let $Ctl_Curr_PayE      = $Ctl_End_Dt
     do InitialDt
   end-if
end-if

End-Procedure prepare-Report

!****************************************************************************************
begin-procedure Process-Main
!****************************************************************************************

let $OLD_LOC  = ''
! he 03-01-06
let $OLD_LOC_SETID = ''

let $firstpage = 'Y'

create-array name=line size=26
    field=sex:char 
    field=group:char 
    field=num:number 
    field=type:char 
    field=col1:number 
    field=col2:number 
    field=col3:number
    field=col4:number
    field=col5:number

do CheckXMLTestRunOnly
do CheckTestEnvironment
do CheckRunStatus

if $Month_Year = 'Q'
BEGIN-SELECT
PBD.SETID
PBD.LOCATION                
PBD.SEX                     
PBD.GPDE_RC_EE_TYPE_ST
PBD.GPDE_PERF_GRP_TYPE 
PBD.GPDE_AL_NUM_OF_EMP 
PBD.GPDE_RP_A2_9290 
PBD.GPDE_STD_HOURS_SUM
PBD.GPDE_RP_WRKDHRS      
PBD.GPDE_RP_OVRTMHRS 
PBD.GPDE_RP_TXGRS_BON 

    !let #groupNum = substr(&PBD.PERFORM_GROUP_GER,2,1)
    let #groupNum = &PBD.GPDE_PERF_GRP_TYPE
    !let $groupType = substr(&PBD.PERFORM_GROUP_GER,1,1)
    let $workertype = &PBD.GPDE_RC_EE_TYPE_ST
  
    if $OLD_LOC  = '' 
       ! first row
       let $OLD_LOC = &PBD.LOCATION 
       ! he 03-01-06
       let $OLD_LOC_SETID = &PBD.SETID
       do New-Location
       do reset-Variables
    end-if

    if $OLD_LOC <> &PBD.LOCATION  or $OLD_LOC_SETID <> &PBD.SETID
       let $OLD_LOC = &PBD.LOCATION 
       ! he 03-01-06
       let $OLD_LOC_SETID = &PBD.SETID
        
       do print-Previous-Page
       do New-Location
    end-if

    
       do prepare-Report-Month
    
   
FROM PS_GPDE_AL06_SM_VW PBD  ! DEU20070919-1811 8.9B11
where PROCESS_INSTANCE = #OrigProcessInstance
order by SETID, LOCATION, GPDE_RC_EE_TYPE_ST, SEX DESC, GPDE_PERF_GRP_TYPE
End-Select

else


BEGIN-SELECT
PBD1.SETID     
PBD1.LOCATION 
PBD1.EMPLID 
PBD1.EMPL_RCD 
PBD1.GRADE 
PBD1.SAL_ADMIN_PLAN 
PBD1.SEX 
PBD1.PERFORM_GROUP_GER 
PBD1.GPDE_AL_NUM_OF_EMP 
PBD1.BIRTHDATE 
PBD1.HIRE_DT 
PBD1.GPDE_STD_HOURS_SUM
PBD1.GPDE_RP_WRKDHRS 
PBD1.GPDE_RP_OVRTMHRS 
PBD1.GPDE_DV_EMPL_CAT
PBD1.GPDE_AL_STAT_NBR 
PBD1.BA_CD 
PBD1.GPDE_SI_POS_IN_JOB 
PBD1.GPDE_SI_EDUCATION 
PBD1.GPDE_AL_CPAY_ENDDT 
PBD1.GPDE_RP_TOTGRSS 
PBD1.GPDE_RP_TXGRS_ANLZ 
PBD1.GPDE_SI_MNTH_GRS 
PBD1.GPDE_RP_RVDAYS_BON 
PBD1.GPDE_RP_TXGRS_BON 
PBD1.GPDE_RP_VACBAL 
PBD1.GPDE_AL_OVERTPAY
PBD1.GPDE_AL_SHIFT_PRE
PBD1.GPDE_RP_TTGRSS_YTD 
PBD1.CALC_RSLT_VAL

    
    let $sal_plan  =  &PBD1.SAL_ADMIN_PLAN
    let #peform = substr(&PBD1.PERFORM_GROUP_GER,2,1)
    do ConvertToComponents(&PBD1.BIRTHDATE,$YYYY,$mm,$dd)
    
    !do Format-Number(&PBD1.GPDE_RP_TOTGRSS,$PBD1.GPDE_RP_TOTGRSS,'999999999')
    !do Format-Number(&PBD1.GPDE_RP_TXGRS_ANLZ,$PBD1.GPDE_RP_TXGRS_ANLZ,'999999999')
    !do Format-Number(&PBD1.GPDE_SI_MNTH_GRS,$PBD1.GPDE_SI_MNTH_GRS,'999999999')
    !do Format-Number(&PBD1.GPDE_RP_TXGRS_BON,$PBD1.GPDE_RP_TXGRS_BON,'999999999')
    !do Format-Number(&PBD1.GPDE_AL_OVERTPAY, $PBD1.GPDE_AL_OVERTPAY,'999999999') 
    !do Format-Number(&PBD1.GPDE_AL_SHIFT_PRE, $PBD1.GPDE_AL_SHIFT_PRE,'999999999')  
    !do Format-Number(&PBD1.GPDE_RP_TTGRSS_YTD, $PBD1.GPDE_RP_TTGRSS_YTD,'999999999')  

    
    let #dummy = FLOOR(&PBD1.GPDE_RP_TOTGRSS)
    do Format-Number(#dummy,$PBD1.GPDE_RP_TOTGRSS,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_RP_TXGRS_ANLZ)
    do Format-Number(#dummy,$PBD1.GPDE_RP_TXGRS_ANLZ,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_SI_MNTH_GRS)
    do Format-Number(#dummy,$PBD1.GPDE_SI_MNTH_GRS,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_RP_TXGRS_BON)
    do Format-Number(#dummy,$PBD1.GPDE_RP_TXGRS_BON,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_AL_OVERTPAY)
    do Format-Number(#dummy, $PBD1.GPDE_AL_OVERTPAY,'999999999') 
    let #dummy = FLOOR(&PBD1.GPDE_AL_SHIFT_PRE)
    do Format-Number(#dummy, $PBD1.GPDE_AL_SHIFT_PRE,'999999999')  
    let #dummy = FLOOR(&PBD1.GPDE_RP_TTGRSS_YTD)
    do Format-Number(#dummy, $PBD1.GPDE_RP_TTGRSS_YTD,'999999999')  

     

    if $OLD_LOC  = '' 
       let $OLD_LOC = &PBD1.LOCATION 
       let $OLD_LOC_SETID = &PBD1.SETID
       do New-Location
       do Empl_count
       do TotEmpl_count  
       do print-Previous-Page
       do White-Collar     
    end-if

    if $OLD_LOC <> &PBD1.LOCATION  or $OLD_LOC_SETID <> &PBD1.SETID
       let $OLD_LOC = &PBD1.LOCATION 
       Let $OLD_LOC_SETID = &PBD1.SETID
        
       do New-Location
       do Empl_count
       do TotEmpl_count  
       do print-Previous-Page
       do White-Collar   
    end-if
    do findEmployeeType
    do PrintColumn
FROM PS_GPDE_AL06_SAL PBD1
where PROCESS_INSTANCE = #OrigProcessInstance
order by SETID, LOCATION, SEX DESC, PERFORM_GROUP_GER
End-Select
end-if


Display 'OrigProcessInstance'
display #OrigProcessInstance
if $OLD_LOC  <> '' AND $Month_Year ='Q'
   !rows were found
   do print-Previous-Page
   if &RunStatus = '40' and ($XMLTestRun = 'N' or $TestEnvironment = 'Y')
      do Update_CloseTicket
   end-if
end-if
do footing

End-Procedure Process-Main

!****************************************************************************************
Begin-Procedure prepare-Report-Month
!****************************************************************************************
let #Row = 0

IF &PBD.SEX = 'M' and &PBD.GPDE_RC_EE_TYPE_ST = '1'
  let #Row = #Row + #groupNum    
ELSE
! women
   if &PBD.GPDE_RC_EE_TYPE_ST = '1'
      add 5 to #Row
   let #Row = #Row + #groupNum
   END-IF
 
END-IF

IF &PBD.SEX = 'M' and &PBD.GPDE_RC_EE_TYPE_ST = '2'
      add 10 to #Row
let #Row = #Row + #groupNum 
ELSE
! women
   if &PBD.GPDE_RC_EE_TYPE_ST = '2'
      add 15 to #Row
    let #Row = #Row + #groupNum 
   END-IF

END-IF
LET #Row = #Row - 1

if &PBD.GPDE_RC_EE_TYPE_ST = '2' 

   let #numEmpl = &PBD.GPDE_AL_NUM_OF_EMP 
   let #numAmt = FLOOR(&PBD.GPDE_RP_A2_9290)
   IF &PBD.GPDE_RP_WRKDHRS <> 0 
   let #Hours = FLOOR(&PBD.GPDE_RP_WRKDHRS)
   ELSE
   let #Hours = FLOOR(&PBD.GPDE_STD_HOURS_SUM)    
   END-IF
   let #Overtime = FLOOR(&PBD.GPDE_RP_OVRTMHRS)
   let #Bonus = FLOOR(&PBD.GPDE_RP_TXGRS_BON)

      put #numEmpl #numAmt #Bonus #Hours into line(#Row) col1 col2 col3 col4 

      add #numEmpl to #TotalEmpl_B_2
      add #numAmt to #TotalAmt_B_2
      add #Hours to #TotalHours_2
      add #Overtime to #TotalOvertime_2 
      add #Bonus to #TotalBouns_2
end-if

if   &PBD.GPDE_RC_EE_TYPE_ST = '1'

   let #numEmpl = &PBD.GPDE_AL_NUM_OF_EMP 
   let #numAmt = FLOOR(&PBD.GPDE_RP_A2_9290)
   IF &PBD.GPDE_RP_WRKDHRS <> 0 
   let #Hours = FLOOR(&PBD.GPDE_RP_WRKDHRS)
   ELSE
   let #Hours = FLOOR(&PBD.GPDE_STD_HOURS_SUM)    
   END-IF 
   let #Overtime = FLOOR(&PBD.GPDE_RP_OVRTMHRS)
   let #Bonus = FLOOR(&PBD.GPDE_RP_TXGRS_BON)

      put #numEmpl #numAmt #Bonus #Hours into line(#Row) col1 col2 col3 col4 

      add #numEmpl to #TotalEmpl_B_1
      add #numAmt to #TotalAmt_B_1
      add #Hours to #TotalHours_1
      add #Overtime to #TotalOvertime_1 
      add #Bonus to #TotalBouns_1
end-if

IF &PBD.SEX = 'M' and &PBD.GPDE_RC_EE_TYPE_ST = '3'
     let  #Row = 20
  let #numEmpl_male = #numEmpl_male +&PBD.GPDE_AL_NUM_OF_EMP 
   let #numAmt_male = #numAmt_male + &PBD.GPDE_RP_A2_9290 
   
      put #numEmpl_male #numAmt_male into line(#Row) col1 col2  

      add &PBD.GPDE_AL_NUM_OF_EMP to #TotalEmpl_B_3
 
      LET #TotalAmt1 = EDIT (&PBD.GPDE_RP_A2_9290,'999999999')
      
      add #TotalAmt1 to #TotalAmt_B_3

ELSE
! women
   if &PBD.SEX = 'F' AND &PBD.GPDE_RC_EE_TYPE_ST = '3'
      let #Row = 21
   let #numEmpl_female = #numEmpl_female + &PBD.GPDE_AL_NUM_OF_EMP 
   let #numAmt_female = #numAmt_female + &PBD.GPDE_RP_A2_9290 
   
      put #numEmpl_female #numAmt_female into line(#Row) col1 col2  

      add &PBD.GPDE_AL_NUM_OF_EMP to #TotalEmpl_B_3

       LET #TotalAmt = EDIT (&PBD.GPDE_RP_A2_9290,'999999999')
           add #TotalAmt to #TotalAmt_B_3

   END-IF
END-IF


    
End-Procedure prepare-Report-Month

!****************************************************************************************
Begin-Procedure prepare-Report-Year
!****************************************************************************************

   ! --- Männliche Angestellte
  if (($workertype = 'W') and (&pbd.SEX = 'M'))
       let #MannlichAng = &PBD.GPDE_AL_NUM_OF_EMP 
       let #MannlichAngS = &PBD.GPDE_RP_A2_9290
    end-if

   ! --- Weiblich Angestellte

  if (($workertype = 'W') and (&pbd.SEX = 'F'))
       let #WeiblichAng = &PBD.GPDE_AL_NUM_OF_EMP 
       let #WeiblichAngS = &PBD.GPDE_RP_A2_9290
    end-if

   ! --- Männliche Arbeiter
  if (($workertype = 'B') and (&pbd.SEX = 'M'))
       let #MannlichArb = &PBD.GPDE_AL_NUM_OF_EMP
       let #MannlichArbS = &PBD.GPDE_RP_A2_9290
    end-if

   ! --- Weibliche Arbeiter
  if (($workertype = 'B') and (&pbd.SEX = 'F'))
       let #WeiblichArb = &PBD.GPDE_AL_NUM_OF_EMP
       let #WeiblichArbS = &PBD.GPDE_RP_A2_9290
    end-if

End-Procedure prepare-Report-Year

!****************************************************************************
begin-procedure print-Previous-Page
!****************************************************************************************

if $firstpage = 'Y'
   let $firstpage = 'N'
   do print-Location
else
   new-page
   do print-Location
end-if


if $Month_Year = 'Q'

   let #i = 0

      do Blue-Collar-Heading 
      
      while #i< 22
        
         if #i = 10 
            new-page
            do print-Location
            do Blue-Collar-Heading
               
         end-if
         if #i = 20 
         do Blue-Collar-Heading
         end-if 
         

         get $currGroup from line(#i) group 
         get $currType from line(#i) type
         get $currSex from line(#i) sex
         get #currNum from line(#i) num 
         get #currCol1 from line(#i) col1
         get #currCol2 from line(#i) col2  
         get #currCol3 from line(#i) col3 
         get #currCol4 from line(#i) col4 

         if #i=10 or #i=20 or #i=0
          do print-FTE-Heading
         end-if
        
         do Print-Line
         if #i = 9 or #i = 19 
            do print-Sums         
         end-if

         

         let #i = #i + 1
      end-while
      do print-Sums

else
   do PrintYearlyDetails
end-if

if $Month_Year = 'Q'
   ! clear values
   do reset-Variables
end-if
End-Procedure print-Previous-Page

!****************************************************************************
begin-procedure reset-Variables
!****************************************************************************

   clear-array name=line
   let #TotalEmpl_B = 0
   let #TotalAmt_B = 0
   let #TotalEmpl_W = 0
   let #TotalAmt_w = 0
   let #TotalHours = 0
   let #TotalOvertime = 0
   let #TotalEmpl_K = 0
   let #TotalAmt_K = 0
   let #TotalEmpl_T = 0
   let #TotalAmt_T = 0
   let #linesPrinted = 0
   let #numEmpl_male = 0
   let #numAmt_male  =0
   let #numEmpl_female =0
   let #numAmt_female =0
  
   let #TotalEmpl_B_1 =0
   let #TotalAmt_B_1 = 0
   let #TotalHours_1 =0
   let #TotalOvertime_1 =0 
   let #TotalBouns_1 =0

   let #TotalEmpl_B_2 =0
   let #TotalAmt_B_2 = 0
   let #TotalHours_2 =0
   let #TotalOvertime_2 =0 
   let #TotalBouns_2 =0 

   let #TotalEmpl_B_3 =0
   let #TotalAmt_B_3 = 0
   let #TotalHours_3 =0
   let #TotalOvertime_3 =0 
   let #TotalBouns_3 =0 
 

   put 'Männlich' '1' 1  'W' into line(0) sex group num type
   put            '2' 2  'W' into line(1) group num type
   put            '3' 3  'W' into line(2) group num type
   put            '4' 4  'W' into line(3) group num type
   put            '5' 5  'W' into line(4) group num type

   put 'Weiblich' '1' 1  'W' into line(5) sex group num type
   put            '2' 2  'W' into line(6) group num type
   put            '3' 3  'W' into line(7) group num type
   put            '4' 4  'W' into line(8) group num type
   put            '5' 5  'W' into line(9) group num type

   put 'Männlich' '1' 1  'B' into line(10)  sex group num type
   put            '2' 2  'B' into line(11) group num type
   put            '3' 3  'B' into line(12) group num type
   put            '4' 4  'B' into line(13) group num type
   put            '5' 5  'B' into line(14) group num type

   put 'Weiblich' '1' 1  'B' into line(15) sex group num type
   put            '2' 2  'B' into line(16) group num type
   put            '3' 3  'B' into line(17) group num type
   put            '4' 4  'B' into line(18) group num type
   put            '5' 5  'B' into line(19) group num type

   put 'Männlich' '1' 1  'c' into line(20)  sex group num type
   put 'Weiblich' '1' 1  'c' into line(21) sex group num type
 

end-procedure reset-Variables

!****************************************************************************************
begin-procedure New-Location
!****************************************************************************************

! Retreive Location Address
begin-SELECT

P.DESCR
P.ADDRESS1
P.POSTAL
P.CITY
   let $Location_Name = &P.DESCR
   let $Location_Address = &P.ADDRESS1
   let $Location_Postal_City = rtrim(&P.Postal,' ') || ' ' || &P.CITY

FROM PS_LOCATION_TBL P
WHERE P.LOCATION = $OLD_LOC
! he 04-01-06 and P.SETID = &PBD.SETID
and P.SETID = $OLD_LOC_SETID
AND   P.EFFDT = (
                 SELECT MAX(EFFDT)
                 FROM PS_LOCATION_TBL P1
                 WHERE P1.LOCATION = P.LOCATION
                 AND P1.EFFDT <= $AsOfToday)
end-SELECT


! Retrieve GPDE Pay Entity Location values
begin-SELECT

A.GPDE_SI_BTNR 
A.GPDE_AL_STAT_NBR
A.GPDE_AL_TARIFF
A.GPDE_AL_SECTOR

from PS_GPDE_AL_PE_LOC A
where A.SETID = $OLD_LOC_SETID
and A.LOCATION = $OLD_LOC
and A.PAY_ENTITY = $Ctl_PayEntity 
and A.EFFDT = 
     (select Max(B.EFFDT)
     from PS_GPDE_AL_PE_LOC B
     where  A.SETID = B.SETID
     and A.LOCATION = B.LOCATION
     and A.PAY_ENTITY = B.PAY_ENTITY
     and B.EFFDT <= $Ctl_Curr_PayE 
     )
end-SELECT

! Retrieve Run Control Grid values
begin-SELECT
L.GPDE_RC_COM_IMP
L.GPDE_RC_EE_TYPE2
L.GPDE_AL_06_SALARY 
L.DESCR50                                            
L.GPDE_AL_06_WAGE 
L.DESCR50_1                                          
L.GPDE_ER_HRS_WK
L.GPDE_ER_DD_PER_WK
L.GPDE_AL_SAL_PLAN_1
L.GPDE_AL_SAL_PLAN
L.GPDE_AL_SAL_PLAN_2
L.GPDE_AL_SAL_PLAN_3
L.GPDE_AL_SAL_PLAN_4
L.DESCR254
L.DESCR254A
L.DESCR254B
L.DESCR254C
L.DESCR254_1
L.GPDE_MIN_WAGE
L.GPDE_INTGNUM
L.GPDE_INTGNUMA
L.GPDE_INTGNUMB
L.GPDE_INTGNUMC
L.GPDE_INTGNUM_1

  LET $DESCR254 =  rtrim(ltrim(&L.DESCR254 , ' ' ) , ' ' )
  LET $DESCR254A =  rtrim(ltrim(&L.DESCR254A , ' ' ) , ' ' )
  LET $DESCR254B =  rtrim(ltrim(&L.DESCR254B , ' ' ) , ' ' )
  LET $DESCR254C =  rtrim(ltrim(&L.DESCR254C , ' ' ) , ' ' )
  LET $DESCR254_1 =  rtrim(ltrim(&L.DESCR254_1 , ' ' ) , ' ' )

  LET #INTGNUM = &L.GPDE_INTGNUM
! do Format-Number(#INTGNUM, $INTGNUM,'99999999999')
  LET #INTGNUMA = &L.GPDE_INTGNUMA
  LET #INTGNUMB = &L.GPDE_INTGNUMB
  LET #INTGNUMC = &L.GPDE_INTGNUMC
  LET #INTGNUM_1 = &L.GPDE_INTGNUM_1
 
 
from PS_GPDE_RC_LOCATN L
WHERE L.OPRID = $prcs_oprid
AND L.RUN_CNTL_ID = $prcs_run_cntl_id        
AND L.LOCATION = $OLD_LOC
! he 03-01-06 AND L.SETID = &PBD.SETID
and L.SETID = $OLD_LOC_SETID
end-SELECT

end-procedure New-Location

!****************************************************************************************
begin-heading 5
!****************************************************************************************

uppercase $ReportTitle
#include 'stdhdgtr.sqc'

print 'Firma:'           (+1, {col0})

print $PyentDescr             (, {col1})
print $PyentAddr           (+1, {col1})
print $AMOUNT_SPEC1       (,1)  center
let $ZipCity = $PyentZip || ' ' || $PyentCity
print $ZipCity             (+1, {col1})

end-heading

!****************************************************************************************
begin-procedure footing 
!****************************************************************************************
 #debug SHOW #Current-Line
if &RunStatus <> '40' OR ($XMLTestRun = 'Y' and $TestEnvironment <> 'Y') 
   let $PreliminPrint = '            ****  Entwurf  ****  Entwurf  ****  Entwurf  ****  Entwurf  ****  '
   print $PreliminPrint                      (+2, {col1})     

end-if

if $TestEnvironment = 'Y'
   print '              **** Test Environment only  ****  Test Environment only ****  '    (+2, {col1})     
end-if

end-procedure footing

!****************************************************************************************
begin-procedure print-Location
!****************************************************************************************

print 'Standort:'                  (+3, {col0})
print $Location_Name               (, {col1})
print $Location_Address            (+1, {col1})
print $Location_Postal_City        (+1, {col1})

print 'Betriebsnummer:'            (-2, {col3}) 
!print &A.GPDE_SI_BTNR             (, {col4})
print &A.GPDE_AL_STAT_NBR          (, {col4})

print 'Tarifregelung:'             (+1, {col3}) 
let $Tariff = rtrim(&A.GPDE_AL_TARIFF, ' ')
print $Tariff                      (, {col4})

print 'Wirtschaftszweig:'          (+1, {col3}) 
print &A.GPDE_AL_SECTOR            (, {col4})

if $Month_Year = 'Q'
graphic                                      (+1,15, 135) horz-line 8
else
graphic                                      (+1,3, 173)  horz-line 8
end-if

end-procedure print-Location
!****************************************************************************************
begin-procedure print-FTE-Heading
!****************************************************************************************

if $currType = 'W'
print 'Vollzeitbes' (+2,{col0}) 
print 'chaeftigte' (+1,{col0}) 
END-IF
if $currType = 'B'
print 'Teilzeitbes' (+2,{col0}) 
print 'chaeftigte' (+1,{col0}) 
END-IF
if $currType = 'c'
print 'Geringfuegig ' (+2,{col0}) 
print 'Beschaeftigte' (+1,{col0}) 
END-IF
let #Now-line = #Current-Line - 6
print ' ' (#Now-line,{col1})
let $add-cloumn = 'false'
end-procedure print-FTE-Heading

!****************************************************************************************
Begin-Procedure White-Collar
!****************************************************************************************

print 'Angaben für Monat Oktober 2010'   (+2, {col0a})
print 'Angaben für Jahr 2010'             (,{col26_y})
print 'PersonalNr'                         (+1,{col0a})
print 'lfd'                                (,{col0_y}) 
print 'Tarif'                              (,{col1_y})
        

print 'Nr.TV'                              (,{col2_y})      
print 'Leistungs'                          (,{col3_y})
print 'Geschl.'                            (,{col4_y})
print 'GebJahr'                            (,{col5_y})
print 'Datum-'                             (,{col6_y})
print 'SV '                               (,{col7a_y})
print 'SV '                               (,{col8_y})
print 'Vertg'                              (,{col9_y})
print 'Woche'                              (,{col10_y})
print 'Ueber'                              (,{col11_y})
print 'bezahlte'                           (,{col30_y})       

print 'Brutto'                             (,{col12_y})
print 'Ueber'                              (,{col13_y})
print 'Zuschl'                             (,{col15_y})
print 'Lst/'                               (,{col24_y})
print 'SV '                                (,{col25_y})

print 'SV-'                            (,{col26_y})
print 'Brutto'                             (,{col27_y})
print 'Sonderz'                            (,{col28_y})
print 'Entgeltum'                          (,{col28b_y})
print 'Urlaub'                             (,{col29_y})
 
print 'Gruppe'                            (+1,{col1_y})
!print 'TV'                                (,{col2_y})
print 'grupppe'                           (,{col3_y})
print 'Eintritt'                          (,{col6_y})
print ' A'                                 (,{col7a_y})
print ' B'                                 (,{col8_y})
print 'Stunden'                           (,{col30_y})
print 'Stunden'                           (,{col11_y})
print 'Sol'                               (,{col24_y})
print 'AN'                                (,{col25_y})
print 'Tage'                              (,{col26_y})
print  ' ges'                             (,{col12_y}) 
print 'Stunden'                           (,{col13_y})
print  ' ges.'                            (,{col27_y})
print 'wandlung'                          (,{col28b_y})

print ' '                                   (+1,{col3_y})

graphic                                      (+1,3, 173)  horz-line 8

End-Procedure White-Collar-Heading

!****************************************************************************************
Begin-Procedure Empl_count
!****************************************************************************************
begin-select
count(*)  &Maennlich
from PS_GPDE_AL06_SAL WHERE
SEX ='M' AND PROCESS_INSTANCE = #OrigProcessInstance 
AND LOCATION = &PBD1.LOCATION 
AND SETID = &PBD1.SETID
end-select

begin-select
count(*)  &Weiblich
from PS_GPDE_AL06_SAL WHERE
SEX ='F' AND PROCESS_INSTANCE = #OrigProcessInstance 
AND  LOCATION = &PBD1.LOCATION 
AND SETID = &PBD1.SETID
end-select


End-Procedure Empl_count

!****************************************************************************************
Begin-Procedure TOtEmpl_count
!****************************************************************************************
begin-select 
count(*)  &GPDE_AL_TOT_EMP
from PS_GPDE_AL06_SAL where PROCESS_INSTANCE = #OrigProcessInstance 
AND  LOCATION = &PBD1.LOCATION 
AND SETID = &PBD1.SETID
end-select


End-Procedure TOtEmpl_count


!****************************************************************************************
begin-procedure Blue-Collar-Heading
!****************************************************************************************

let #abs-line = #Current-Line
let #max-line = #abs-line

print 'Beschaefti-'                                     (+1,{col0}) 

print 'Geschlecht'                                       (,{col1}) 

print  'Leistungsruppe'                                  (,{col2}) 

print    'Zahl der'                                     (,{col31a})    

print    'Bruttoverdienstsumme der Arbeitnehmer'        (,{col41a})

print    'Bezahlte Arbeitsstunden'                      (,{col5})

print 'gungsart'                                        (+1,{col0}) 

print 'erfassten'                                       (,{col31a})

print 'darunter '                                       (,{col4a})
  
print 'der '                                            (,{col5a})          

                                                
print 'Arbeitnehmer'                                    (+1,{col31a}) 

print 'insgesamt'                                       (,{col3a}) 

print 'Sonderzahlungen'                                 (,{col4}) 

print 'Arbeitnehmer'                                    (,{col51a})

graphic                                      (+1,15, 135) horz-line 8

end-procedure Blue-Collar-Heading

!****************************************************************************************
begin-procedure Print-Line !Total
!****************************************************************************************

get $currType from line(#i) type
get $currGroup from line(#i) group 
get $currSex from line(#i) sex
get #currNum from line(#i) num 
get #currCol1 from line(#i) col1
get #currCol2 from line(#i) col2  
get #currCol3 from line(#i) col3 
get #currCol4 from line(#i) col4

if $add-cloumn = 'true'
print $currSex (+2,{col1})
else
print $currSex (,{col1})
let $add-cloumn = 'true'
end-if


if $currType = 'c'

   let #dummy = floor(#currCol1)  
   print #dummy                                    (, {col3}) edit 999999

   let #dummy = floor(#currCol2)
   do Format-Number(#dummy,$number,'999999999')

   print $number                                   (, {col3a})
  
else

  print $currGroup                                 (, {col2})
  let #dummy = floor(#currCol1)

  print #dummy                                     (, {col3}) edit 999999
  let #dummy = floor(#currCol2)

  ! let #currCol2 = trunc(#currCol2, 0)
   do Format-Number(#dummy,$number,'999999999')
   print $number                                  (, {col3a})

   let #dummy = floor(#currCol3)
   do Format-Number(#dummy,$number,'999999999')
   print $number                                  (, {col4})

   let #dummy = floor(#currCol4)
   do Format-Number(#dummy,$number,'999999999')
   print $number                                (, {col5}) 
end-if


end-Procedure Print-Line

!****************************************************************************************
Begin-Procedure print-Sums
!****************************************************************************************

graphic                                      (+1,15, 135) horz-line 8
print 'ZUSAMMEN'                                  (+2,{col0})
   

if $currType = 'W'
      let #dummy = floor(#TotalEmpl_B_1)
      print #dummy                           (,{col3}) edit 999999

    ! let #TotalHours = trunc(#TotalHours, 0)
      let #dummy = floor(#TotalHours_1)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col5})

      let #dummy = floor(#TotalBouns_1)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col4})
      
      
      let #dummy = floor(#TotalAmt_B_1)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col3a})

end-if
if $currType = 'B'
      let #dummy = #TotalEmpl_B_2
      print #dummy                            (,{col3}) edit 999999

    ! let #TotalHours = trunc(#TotalHours, 0)
      let #dummy = floor(#TotalHours_2)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col5})

      let #dummy = floor(#TotalBouns_2)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col4})
      
      let #dummy = floor(#TotalAmt_B_2)
      do Format-Number(#dummy,$number,'999999999')
      print $number                          (,{col3a}) 

end-if

if $currType = 'c'
       let #dummy = floor(#TotalEmpl_B_3)
       print #dummy                          (,{col3}) edit 999999

       let #dummy = #TotalAmt_B_3
       do Format-Number(#dummy,$number,'999999999')
       print $number                          (,{col3a}) 

end-if

      graphic                                      (+1,15, 135) horz-line 8
if $currType <> 'c'
      print 'Besondere Umstände für Lohnentwicklung:'           (+2, {col0})
      do convert-Circumstance(&L.GPDE_AL_06_SALARY,  &L.DESCR50, $Circ1) 
      print $Circ1                                             (, +1)
end-if
      print ' '                                            (, +1)

   

End-Procedure print-Sums

!****************************************************************************************
begin-procedure Get-Translate-Value
!****************************************************************************************

  move 'MONTHCD' to $FieldName

  move $mm to $FieldValue

  do Read-Translate-Table
  let $Month_Name = $XlatShortName
  #debug show 'Month Name = ' $Month_Name

end-procedure Get-Translate-Value

!****************************************************************************************
begin-procedure InitialDt
!****************************************************************************************

   do format-datetime($Ctl_Curr_PayE,$Ctl_Curr_Pay_End_Dt1,{DEFDATE},'','')
  do format-datetime($Ctl_Curr_PayE,$Ctl_Curr_Pay_End_Dt2,{DEFCMP},'','')
  let $Sticht = '2002'  || '01' ||  '01'
  do Format-DateTime($Sticht, $Sticht1, {DEFCMP},'','native')
  do Format-DateTime($Sticht1, $Stichtag, {DEFCMP},'','')

  if $Ctl_Curr_Pay_End_Dt2 >= $Stichtag
      let $AMOUNT_SPEC1 = 'Betragsangaben in EURO'
      let $ToCurrency = 'EUR'
     let $Eur = ' EUR '
  else
      let $AMOUNT_SPEC1 = 'Betragsangaben in DM'
      let $ToCurrency = 'DEM'
     let $Eur = ' DM '
        end-if
end-procedure



!****************************************************************************************
begin-procedure Initialize
!****************************************************************************************

  ! --- Weiblich Angestellte
  let #WeiblichAng  = 0
  let #WeiblichAngS = 0

  ! --- Weiblich Arbeiter
  let #WeiblichArb = 0
  let #WeiblichArbS = 0

  ! --- Männlich Angestellte
  let #MannlichAng = 0
  let #MannlichAngS = 0

  ! --- Männlich Arbeiter
  let #MannlichArb = 0
  let #MannlichArbS = 0

End-Procedure Initialize

!****************************************************************************************
begin-procedure PrintYearlyDetails
!****************************************************************************************

let $mask    = '999,999,999,999,999'

print 'A Angaben für das Unternehmen'                                  (+3,{col0a}) 
print 'Beherrschender Einfluss der oeffentlichen Hand:'                 (+2, {col0a})
print &L.GPDE_RC_COM_IMP                                                (, {col10_y}) 
print 'Anzahl Arbeitnehmer/-innen am 31.10.2010:'                       (+1, {col0a})
print &GPDE_AL_TOT_EMP     (, {col10_y}) 

print  'B Angaben für den Betrieb'                                      (+3,{col0a}) 
print 'Anzahl Voll-/Teilzeitbeschaeftigte im Oktober 2010'              (+1,{col0a}) 
print 'Maennlich' (, {col8_y}) 
print &Maennlich (, {col10_y})  

print 'Weiblich' (+1, {col8_y}) 
print &Weiblich (, {col10_y}) 

print 'C Verdienstregelung'                                               (+1,{col0a}) 
print 'Tarifregelung 1: '                                                 (+1, {col0a})
print 'Eingliederungsnummer:'                                             (, {col13_y})
!PRINT $DESCR254                                                           (, {col10_y})
PRINT $DESCR254                                                           (, {col8_y})
 
do Format-Number(#INTGNUM, $INTGNUM,'99999999999')
do Format-Number(#INTGNUMA, $INTGNUMA,'99999999999')
do Format-Number(#INTGNUMB, $INTGNUMB,'99999999999')
do Format-Number(#INTGNUMC, $INTGNUMC,'99999999999')
do Format-Number(#INTGNUM_1, $INTGNUM_1,'99999999999')

IF #INTGNUM <> 0                                                      
PRINT $INTGNUM                                                            (,{col26_y})
END-IF
IF $DESCR254A <> ''
print 'Tarifregelung 2:'                                                  (+1, {col0a})
print 'Eingliederungsnummer:'                                             (, {col13_y}) 
!PRINT $DESCR254A                                                          (,{col10_y})
PRINT $DESCR254A                                                          (,{col8_y})
END-IF
IF #INTGNUMA <> 0                                                         
PRINT $INTGNUMA                                                            (,{col26_y})
END-IF
IF $DESCR254B <> '' 
print 'Tarifregelung 3:'                                                  (+1, {col0a})
print 'Eingliederungsnummer:'                                             (, {col13_y}) 
!PRINT $DESCR254B                                                          (,{col10_y})
PRINT $DESCR254B                                                          (,{col8_y})
END-IF
IF #INTGNUMB <> 0                                                        
PRINT $INTGNUMB                                                            (,{col26_y})
END-IF
IF $DESCR254C <> '' 
print 'Tarifregelung 4:'                                                  (+1, {col0a})
print 'Eingliederungsnummer:'                                             (, {col13_y}) 
!PRINT $DESCR254C                                                          (, {col10_y})
PRINT $DESCR254C                                                          (, {col8_y})
END-IF
IF #INTGNUMC <> 0                                                          
PRINT $INTGNUMC                                                            (,{col26_y})
END-IF

IF $DESCR254_1 <> '' 
print 'Tarifregelung 5:'                                                  (+1, {col0a})
print 'Eingliederungsnummer:'                                             (, {col13_y}) 
!PRINT $DESCR254C                                                          (, {col10_y})
PRINT $DESCR254_1                                                          (, {col8_y})
END-IF
IF #INTGNUM_1 <> 0                                                          
PRINT $INTGNUM_1                                                            (,{col26_y})
END-IF


print  'Anzahl Wochentage für Berechnung Urlaubsanspruch:'              (+1, {col0a})
PRINT    &L.GPDE_ER_DD_PER_WK                                               (,{col10_y}) EDIT 99
print  'Betriebsuebliche Wochenarbeitszeit eines Vollzeitbeschaeftigten:'(+1, {col0a})
PRINT &L.GPDE_ER_HRS_WK                                               (,{col10_y}) EDIT 99
print  'Besondere Umstände für Lohnentwicklung:'                         (+1, {col0a})
Print  'Zugehörigkeit zu einer Mindestlohnbranche:'                     (+1, {col0a})
  
if &L.GPDE_MIN_WAGE = '1'
let $FieldValue = 'ja'
end-if
if &L.GPDE_MIN_WAGE = '2'
let $FieldValue = 'nein'
end-if
if &L.GPDE_MIN_WAGE = '3' 
let $FieldValue = 'nweiß nicht'
end-if
PRINT $FieldValue                                             (,{col8_y})
print  'Arbeitnehmerbogen'                                       (+1, {col0a})





do Initialize
End-Procedure PrintYearlyDetails


!****************************************************************************************
Begin-Procedure PrintColumn
!****************************************************************************************
IF  #Current-Line >=55
new-page
do White-Collar
END-IF

    let #dummy = FLOOR(&PBD1.GPDE_RP_TOTGRSS)
    do Format-Number(#dummy, $PBD1.GPDE_RP_TOTGRSS,'99999999')
    let #dummy = FLOOR(&PBD1.GPDE_RP_TXGRS_ANLZ)
    do Format-Number(#dummy, $PBD1.GPDE_RP_TXGRS_ANLZ,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_SI_MNTH_GRS)
    do Format-Number(#dummy, $PBD1.GPDE_SI_MNTH_GRS,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_RP_TXGRS_BON)
    do Format-Number(#dummy, $PBD1.GPDE_RP_TXGRS_BON,'999999999')
    let #dummy = FLOOR(&PBD1.GPDE_AL_OVERTPAY)
    do Format-Number(#dummy, $PBD1.GPDE_AL_OVERTPAY,'999999999') 
    let #dummy = FLOOR(&PBD1.GPDE_AL_SHIFT_PRE)
    do Format-Number(#dummy, $PBD1.GPDE_AL_SHIFT_PRE,'999999999')  
    let #dummy = FLOOR(&PBD1.GPDE_RP_TTGRSS_YTD)
    do Format-Number(#dummy, $PBD1.GPDE_RP_TTGRSS_YTD,'999999999')
    
    do ConvertToComponents(&PBD1.HIRE_DT,$YY,$mm,$dd)
    do findTarifregulation
     let $HIRE_DT=$mm || $YY
     let $POS_IN_JOB = &PBD1.GPDE_SI_POS_IN_JOB||&PBD1.GPDE_SI_EDUCATION 
    #debug SHOW '&PBD1.SAL_ADMIN_PLAN1='&PBD1.SAL_ADMIN_PLAN
print &PBD1.EMPLID                         (+1,{col0a}) 
print &PBD1.GPDE_AL_NUM_OF_EMP             (,{col0a_y}) 
print &PBD1.GRADE                          (,{col1_y})       

IF #groupNum <> 0
print #groupNum                            (,{col2_y}) edit 99 
 END-IF 
      
print #peform                              (,{col3_y})    EDIT 99


print &PBD1.SEX                            (,{col4_y})
print $YYYY                                (,{col5_y})
print $HIRE_DT                             (,{col6_y})
print &PBD1.BA_CD                          (,{col7a_y})
print $POS_IN_JOB                          (,{col8_y})
print $EmployeeType                        (,{col9_y})
print &PBD1.GPDE_STD_HOURS_SUM             (,{col10_y})        
print $PBD1.GPDE_AL_OVERTPAY               (,{col13a_y})       ! overtime  pay
print &PBD1.GPDE_RP_WRKDHRS                (,{col30_y})

print $PBD1.GPDE_RP_TOTGRSS                (,{col12a_y})

do Format-Number(&PBD1.GPDE_RP_OVRTMHRS, $othours, '999999999')
print $othours                             (,{col11a_y})       ! overtime hours

print $PBD1.GPDE_AL_SHIFT_PRE               (,{col14_y})
print $PBD1.GPDE_RP_TXGRS_ANLZ             (,{col24a_y})  
print $PBD1.GPDE_SI_MNTH_GRS               (,{col25a_y})
print &PBD1.GPDE_RP_RVDAYS_BON             (,{col26_y})
print $PBD1.GPDE_RP_TTGRSS_YTD             (,{col27a_y}) 
print $PBD1.GPDE_RP_TXGRS_BON              (,{col28a_y})
print &PBD1.CALC_RSLT_VAL                 (,{col28b_y})
print &PBD1.GPDE_RP_VACBAL                 (,{col29a_y})

!print &PBD1.GPDE_RP_TXGRS_ANLZ            (+2,{col0_y}) 
!print $PBD1.GPDE_SI_MNTH_GRS              (,{col25_y})
!print &PBD1.GPDE_RP_RVDAYS_BON            (,{col3_y})
!print $PBD1.GPDE_RP_TTGRSS_YTD            (,{col4_y}) 
!print $PBD1.GPDE_RP_TXGRS_BON             (,{col22_y})
!print  &PBD1.GPDE_RP_VACBAL               (+1,{col21_y})
print ''                                   (+1,{col3_y})

End-Procedure PrintColumn


!****************************************************************************************
Begin-Procedure findEmployeeType
!****************************************************************************************
  
   Evaluate &PBD1.GPDE_DV_EMPL_CAT
   When = '101'
      LET $EmployeeType ='1'
     Break
   When = '110'
      LET $EmployeeType ='2'
     Break
   When = '102'
     LET $EmployeeType ='3'
     Break
   When = '103'
      LET $EmployeeType ='4'
     Break
   When = '109'
      LET $EmployeeType ='5'
      Break
   When = '900'
      LET $EmployeeType ='6'
     Break
   When-Other
      LET $EmployeeType ='0'
   End-Evaluate
End-Procedure findEmployeeType

!****************************************************************************************
begin-procedure Init-Report
!****************************************************************************************

  do Stdapi-Init
  let $Location_Crit     = ''
  let $Location1_Crit     = ''

  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
  end-if

  move 'GPDEAL06' to $ReportID
  do Init_Report_Translation ($ReportID, $language_cd)
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

end-procedure Init-Report

!****************************************************************************************
begin-procedure Get-Values
!****************************************************************************************
!let $language_cd                 = $PRCS_LANGUAGE_CD
let $language_cd                  = 'GER'
let $Ctl_Curr_Pay_End_Dt          = &GPDE_RUN_CNTL.GPDE_AL_CPAY_ENDDT
let $Month_Year                   = &GPDE_RUN_CNTL.GPDE_RC_MONTH_YEAR
let $Ctl_CPay_Year                = &GPDE_RUN_CNTL.GPDE_RC_PAY_YEAR
do Get-PayEntity-Address
do get-Quartal 
end-procedure Get-Values

!****************************************************************************************
begin-procedure Ask-Input
!****************************************************************************************
GotoM:
input $MONTH_YEAR 'Quarterly Statistics OR Salary Structure Report (Q /  S )' type=char
evaluate $MONTH_YEAR
when =  'Q'
   input $Ctl_Curr_Pay_End_Dt  'Enter Pay End Date' type=date
   break
when = 'S'
   input #Ctl_Year 'Enter Calendar Run ID' type=number
   break
when-other
    goto GotoM
    break
end-evaluate
input $Ctl_PayEntity 'Pay Entity ' type=char
input $location 'Standort ' type=char
do Format-DateTime($current_date, $out, {DEFDMY},'','native')
let $ctl_curr_pay_start_dt      = rtrim($out, ' ')
let $Ctl_Company     = $company
let $Month_Year     = $MONTH_YEAR

end-procedure Ask-Input

!****************************************************************************
begin-procedure convert-Circumstance($valIn, $Other, :$valOut)
!****************************************************************************
evaluate $valIn
when =  '1'
   let $valOut = 'Kurzarbeit'
   break

when = '2'
   let $valOut = 'Streik'
   break

when = '3'
   let $valOut = 'Schlechtwettergeld'
   break

when = '4'
   let $valOut = $Other
   break

when-other
   let $valOut = ''

end-evaluate

end-procedure convert-Circumstance


!*******************************************************************
begin-procedure CheckXMLTestRunOnly
! Only close tax card if online Parameter 'XMLTestRunOnly' = 'N'

begin-SELECT
A.GPDE_AL_PROP_VAL       &ValueTestRun

from PS_GPDE_AL_VAL_PRS A
WHERE GPDE_AL_PROCESS_NM = 'eStatistics' AND GPDE_AL_PROP_NAME = 'XMLTestRunOnly'
end-select

  let $XMLTestRun = RTRIM(&ValueTestRun , ' ')
  if RTRIM(&ValueTestRun , ' ') = '' 
     let $XMLTestRun = 'N'
  end-if
 
END-procedure CheckXMLTestRunOnly

!*******************************************************************
begin-procedure CheckTestEnvironment
!*******************************************************************
! If customers/Testers would like to do end-to-end testing, including closing of the tax card,
! they must create a variable called 'TestEnvironment', and set the value = 'Y'


begin-SELECT
A.GPDE_AL_PROP_VAL &ValueTestEnvir

from PS_GPDE_AL_VAL_PRS A
WHERE GPDE_AL_PROCESS_NM = 'System Setting' AND GPDE_AL_PROP_NAME = 'TestEnvironment'
end-select

  let $TestEnvironment = RTRIM(&ValueTestEnvir , ' ')
  if RTRIM(&ValueTestEnvir , ' ') = '' 
     let $TestEnvironment = 'N'
  end-if
 
END-procedure CheckTestEnvironment

!*******************************************************************
begin-procedure  CheckRunStatus
!*******************************************************************
!  Tax tax can be closed only when &RunStatus = '40'

begin-SELECT
GPDE_XML_STATUS   &RunStatus

FROM PS_GPDE_TX_XMLRSLT
where GPDE_ELSTER_TKT = $ELSTER_Ticket
end-select

end-procedure  CheckRunStatus

!*******************************************************************
begin-procedure Update_CloseTicket
!*******************************************************************
begin-SQL
UPDATE PS_GPDE_TX_XMLRSLT

SET GPDE_RC_YR_CLOSE = 'Y'
WHERE GPDE_ELSTER_TKT= $ELSTER_Ticket
End-Sql

end-procedure Update_CloseTicket
!*******************************************************************
!*******************************************************************
begin-procedure get-Quartal
!*******************************************************************
begin-SELECT
RC.GPDE_RC_QUARTER

  LET $QUARTER =  &RC.GPDE_RC_QUARTER
  
from PS_GPDE_RC_PAYROLL RC
WHERE RC.OPRID = $prcs_oprid
AND RC.RUN_CNTL_ID = $prcs_run_cntl_id 
End-SELECT 
end-procedure get-Quartal
!*******************************************************************
!*******************************************************************
begin-procedure findTarifregulation
!*******************************************************************
  
begin-SELECT 
GA.SAL_ADMIN_PLAN       &X
RC.GPDE_AL_SAL_PLAN     &X1
RC.GPDE_AL_SAL_PLAN_1   &X2
RC.GPDE_AL_SAL_PLAN_2   &X3
RC.GPDE_AL_SAL_PLAN_3   &X4
RC.GPDE_AL_SAL_PLAN_4   &X5

 
 

from PS_SAL_GRADE_TBL GA ,PS_GPDE_RC_LOCATN RC 
WHERE GA.SETID= RC.SETID 
AND (RC.GPDE_AL_SAL_PLAN =GA.SAL_ADMIN_PLAN OR RC.GPDE_AL_SAL_PLAN_1 =GA.SAL_ADMIN_PLAN 
     or RC.GPDE_AL_SAL_PLAN_2 =GA.SAL_ADMIN_PLAN or RC.GPDE_AL_SAL_PLAN_3 =GA.SAL_ADMIN_PLAN 
    OR RC.GPDE_AL_SAL_PLAN_4 =GA.SAL_ADMIN_PLAN)
AND RC.OPRID=$prcs_oprid AND RC.RUN_CNTL_ID= $prcs_run_cntl_id  
AND GA.SAL_ADMIN_PLAN = &PBD1.SAL_ADMIN_PLAN 
AND GA.GRADE = &PBD1.GRADE
End-SELECT



Evaluate &X
      When = ''
      let  #groupNum = 0
      Break
   When = &X2
   When = &X1
      let  #groupNum = 1
      Break
   When = &X2
      let  #groupNum = 2
      Break
   When = &X3
      let  #groupNum = 3
      Break
   When = &X4
      let  #groupNum = 4
      Break
   When = &X5
      let  #groupNum = 5
      Break
   When-Other
      let  #groupNum = 0
   End-Evaluate

  
   
end-procedure findTarifregulation
!*******************************************************************


#include 'gpdeut06.sqc'  !get run control parameter values
#include 'gpdeut04.sqc'  !get pay entity information
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'datemath.sqc'
#include 'sqrtrans.sqc'