!***********************************************************************
! GPMXCF01.- CFDI Report.                                              *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2020, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                !
!           $Bug:  32070009                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'   !Set environment

Begin-Setup
#include 'ptset01.sqc'
End-Setup

begin-report
  do Init-Datetime
  do Init-Number
  do Stdapi-Init
  move '1' to $ReportDateType   ! Set for date to format as DMY
  move '1' to $ReportYear4      ! Set for year to be formatted YYYY
  do Init-Processing
  do Select-Parameters
  do Get-Period
  do Get-PR-Status
  do Def-Arrays
  do Process-Main
  do Stdapi-Term
  do Del-Temporal-Rec
  do Reset                        ! called from reset1.sqc
end-report


begin-procedure Init-Processing
   do Get-Current-Datetime
  do Init-Report
  do Get-Language-Codes
  display $ReportID
  display $ReportTitle
  date-time () hh:mi:ss &timeBegan
  display 'Report Began: ' noline
  display &timeBegan
end-procedure  Init-Processing


!***********************************************************************
!                                                                      *
! Init-Report                                                          *
!                                                                      *
!                                                                      *
! Called By:    Init-Processing                                        *
!                                                                      *
! Calls:        Init_Report_Translation    - sqrtrans.sqc              *
!               Append_Report_Translation  - sqrtrans.sqc              *
!               Get_Field_Information                                  *
!                                                                      *
! Description:  Initializes variables, defines values for variables    *
!               used in report header & throughout report.  Performs   *
!               Strings Table translation.  #Defines variables for     *
!               use throughout report in printing columns.             *
!                                                                      *
!***********************************************************************


begin-procedure Init-Report
  let #StdFont     = 5                  !Times Roman proportional
  let #StmtPntSize = 8                  !statement point-size
  let #DescrSize   = 6                  !Pin Name Size Print

  Alter-Printer Point-size = #DescrSize Font-Type = Proportional Font = #StdFont
    let $ReportID  = 'GPMXCF01'          ! Printed in header
    do Init_Report_Translation ($ReportID, $curr_language_cd)
    do Append_Report_Translation ('GPMXCF01')
    
    do Get_Field_Information ('GPMXCF01', 'REPORT_TITLE_LBL'  , $Report_Title,       #DW)
    do Get_Field_Information ('GPMXCF01', 'CAL_RUN_ID'        , $Cal_Group_ID,        #DW)
    do Get_Field_Information ('GPMXCF01', 'FREQUENCY'         , $Frequency_lbl,       #DW)
    do Get_Field_Information ('GPMXCF01', 'AMOUNT'            , $Amount,              #DW)
    do Get_Field_Information ('GPMXCF01', 'ELEMENT_DESCR'     , $Description,         #DW)
    do Get_Field_Information ('GPMXCF01', 'ELEMENT_NAME'      , $Element_Name,        #DW)
    do Get_Field_Information ('GPMXCF01', 'EMPLID_TOTAL'      , $Emplid_Tot,          #DW)
    do Get_Field_Information ('GPMXCF01', 'PAY_GRP'           , $Gp_paygroup_lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'PAY_PRD_BEG_DT'    , $Cal_Prd_Bg_lbl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'PAY_PRD_END_DT'    , $Cal_Prd_Ed_lbl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'COMPANY'           , $Company_lbl,         #DW)
    do Get_Field_Information ('GPMXCF01', 'PYMT_DT'           , $Cal_Prd_Py_lbl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'EMPLID'            , $Emplid_lbl,          #DW)
    do Get_Field_Information ('GPMXCF01', 'COMPANY_RFC'       , $Company_Rfc_lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'EMP_NM'            , $Emplid_Name_lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'PR_STAT_FINAL'     , $Calc_Stat_Final,     #DW)
    do Get_Field_Information ('GPMXCF01', 'PR_STAT_OPEN'      , $Calc_Stat_Open,      #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_CO_NM'      , $stdhdg_co_nm,        #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_REP_ID'     , $stdhdg_rep_id,       #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_PAGE_NO'    , $stdhdg_page_no,      #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_RUN_DT'     , $stdhdg_run_dt,       #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_RUN_TM'     , $stdhdg_run_tm,       #DW)
    do Get_Field_Information ('GPMXCF01', 'STDHDG_END_RPT'    , $stdhdg_end_rep,      #DW)
    do Get_Field_Information ('GPMXCF01', 'RESUME_COMPANY'    , $Resume_Company,      #DW)
    do Get_Field_Information ('GPMXCF01', 'RESUME_EMPLOYEE'   , $Processed_Empl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'GPMX_TAX_TREATMENT', $Tax_Treatment_Lbl,   #DW)
    do Get_Field_Information ('GPMXCF01', 'GPMX_LOCATION_DESC', $Place_inssuance_Lbl, #DW)
    do Get_Field_Information ('GPMXCF01', 'GPMX_CD_REGIME'    , $Regime_Code_Lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'EMPL_RCD'          , $Empl_Rcd_Lbl,        #DW)
    do Get_Field_Information ('GPMXCF01', 'EMPL_STATUS'       , $Empl_Status_Lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'EARNINGS_LBL'      , $Earnings_Lbl,        #DW)
    do Get_Field_Information ('GPMXCF01', 'DEDUCTIONS_LBL'    , $Deductions_Lbl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTAL_EARNINGS'    , $Total_Earning_Lbl,   #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTAL_DEDUCTIONS'  , $Total_Deduction_Lbl, #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTAL_TAXES'       , $Total_Taxes_Lbl,     #DW)
    do Get_Field_Information ('GPMXCF01', 'NET_PAY_LBL'       , $Net_Pay_Lbl,         #DW)
    do Get_Field_Information ('GPMXCF01', 'GPMX_LEGAL_CD_CFDI', $Legal_Code_Lbl,      #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTALS_LBL'        , $Total_CFDI_Emp_Lbl,  #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTAL_ACTIVE_EE'   , $Total_Act_Emp_Lbl,   #DW)
    do Get_Field_Information ('GPMXCF01', 'TOTAL_INACTIVE_EE' , $Total_Inact_Emp_Lbl, #DW)
    do Get_Field_Information ('GPMXCF01', 'GPMX_FORMAT_ID'    , $Format_ID_Lbl,       #DW)


!***********************************************************************
! Report variables.                                                    *
!***********************************************************************

    let $ReportTitle           = $Report_Title     ! Printed in header
    let $ReportDate            = $AsOfToday          ! Printed in header
  !  let $ReportTime            = $AsOfNow            ! Printed in header
  
    let $Report_Language       = $curr_language_cd   ! curr_language_cd resolved in prcslng.sqc
    let #Maxlines              = 79                  ! # rows on a page, used for page breaking
    let $Rpt_Hdr_FirstTimeThru  = 'True'
    Let $Details_Aux = 'N'     
    
end-procedure Init-Report

!***************************
Begin-heading 13
!***************************
    Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
    graphic (, 1, 125) box 4
    print '            '    (1,1)
    print $stdhdg_co_nm     ()          center
    print $stdhdg_rep_id    (+1,2)
    print $ReportID         (0,+2)
    print $ReportTitle      ()          center

    let #RptCol = {ColR} - 10

    print $stdhdg_page_no   (0,#RptCol)
    print #page-count       (0,+5)      edit 88888888
    print $Calc_Stat        (+1,)       center
    print $stdhdg_run_dt    (0,#RptCol)


    let $Rpt_Hdr_FirstTimeThru = 'False'

    print $ReportDate       (0,+5)
    print $stdhdg_run_tm    (+1,#RptCol)
    print $ReportTime       (0,+5)

    #define Col_Hc1    3
    #define Col_Hc2    27
    #define Col_Hc3    72
    #define Col_Hc4    94

    #define Col_Ec1    3
    #define Col_Ec2    15
    #define Col_Ec3    25
    #define Col_Ec4    64
    #define Col_Ec5    70
    #define Col_Ec6    87
    #define Col_Ec7    102
    #define Col_Ec8    115

    #define Col_Ed1    3
    #define Col_Ed2    8
    #define Col_Ed3    23
    #define Col_Ed4    40
    #define Col_Ed5    56
    #define Col_Ed6    61
    #define Col_Ed7    77
    #define Col_Ed8    97
    #define Col_Ed9    114
!    #define Col_Ed9    100

      do Get-Company-Data-Mex
      do Get-Format
      do Get-Paygroup-Rel-Lang

    graphic (+2, 1, 125) box 6

    print $Company_lbl                (,{Col_Hc1})
    print $Company                    (,{Col_Hc2})
    Let $CompanyName = Substr(RTrim($CompanyName, ' '), 1,40)
    print $CompanyName                (,+2)
    print $Cal_Prd_Bg_lbl             (,{Col_Hc3})
    print $Period_Begin_Date          (,{Col_Hc4})
    print $Company_Rfc_lbl            (+1,{Col_Hc1})
    print $Company_Rfc                (,{Col_Hc2})
    print $Cal_Prd_Ed_lbl             (,{Col_Hc3})
    print $Period_End_Date            (,{Col_Hc4})
    print $Gp_paygroup_lbl            (+1,{Col_Hc1})
    print $Paygroup                   (,{Col_Hc2})
    print $Paygroup_Descr             (,+3,22)
    print $Cal_Prd_Py_lbl             (,{Col_Hc3})
    print $Payment_Date               (,{Col_Hc4})
    print $Cal_Group_ID               (+1,{Col_Hc1})
    print $Cal_Run_ID                 (,{Col_Hc2})
    print $Frequency_lbl              (,{Col_Hc3})
    print $Frequency                  (,{Col_Hc4})
    Print $Tax_Treatment_Lbl          (+1,{Col_Hc1})
    Print $Tax_Treatment              (,{Col_Hc2})
    print $Place_inssuance_Lbl        (,{Col_Hc3})
    print $Place_inssuance            (,{Col_Hc4})
    Print $Format_ID_Lbl              (+1,{Col_Hc1})
    Print $GPMX_FORMAT                (,{Col_Hc2})
    print $Regime_Code_Lbl            (,{Col_Hc3})
    print $Regime_Code                (,{Col_Hc4})
  
  If $Details_Aux = 'N'
    graphic (+2, 1, 125) box 1
    print $Emplid_lbl                 (,{Col_Ec1})
    print $Empl_Rcd_lbl               (,{Col_Ec2})
    print $Emplid_Name_lbl            (,{Col_Ec3})
    print $Empl_Status_Lbl            (,{Col_Ec4})
    print $Total_Earning_Lbl          (,{Col_Ec5})
    print $Total_Deduction_Lbl        (,{Col_Ec6})
    print $Total_Taxes_Lbl            (,{Col_Ec7})
    print $Net_Pay_Lbl                (,{Col_Ec8})

  Else 

    graphic (+2, 1, 125) box 1
    print $Legal_Code_Lbl   (,{Col_Ed1})
    print $Element_Name     (,{Col_Ed2})
    print $Description      (,{Col_Ed3})
    print $Amount           (,{Col_Ed4})
    print $Legal_Code_Lbl   (,{Col_Ed5})
    print $Element_Name     (,{Col_Ed6})
    print $Description      (,{Col_Ed7})
    print $Amount           (,{Col_Ed8})
    print $Net_Pay_Lbl      (,{Col_Ed9})
 End-if 
end-heading

!***********************************************************************
! Select-Parameters                                                    *
! Calls:        Select-Paygroups                                       *
!               Select-Employees                                       *
! Description:  Selects level zero information off of run control.     *
!               Calls the appropriate sub-procedure, if necessary,     *
!***********************************************************************

begin-procedure Select-Parameters
#ifdef debug
    show 'IN PROCEDURE SELECT-PARAMETERS'
#end-if
    let $Quote           = ''''
    let $CAL_RUN_ID      = ''
    let $GPMX_FORMAT     = ''
    let $GPMX_SORTID     = ''
    let $GPMX_DETAIL     = ''
    move 'Ver.2020 PUM37.01'  to $ReportVersion 
    Show $ReportVersion 
    
     
begin-SELECT
RC.CAL_RUN_ID
RC.GPMX_FORMAT_ID
RC.GPMX_SORTID
RC.GB_GROUP_ID
RC.GPMX_DETAIL

  let $CAL_RUN_ID      =   &RC.CAL_RUN_ID
  let $GPMX_FORMAT     =   &RC.GPMX_FORMAT_ID
  let $GPMX_SORTID     =   &RC.GPMX_SORTID
  let $GPMX_DETAIL     =   &RC.GPMX_DETAIL
 
FROM PS_GPMX_RC_PAY001 RC
WHERE RC.OPRID = $prcs_oprid
AND  RC.RUN_CNTL_ID = $prcs_run_cntl_id
END-SELECT
  Let #Process_Ins = to_number($prcs_process_instance) -1
  show '***Parameters '
  show ' Gp Calendar: ' $CAL_RUN_ID 
  show ' Format Id  : ' $GPMX_FORMAT
  show ' Sort Id    : ' $GPMX_SORTID
  show ' Details?   : ' $GPMX_DETAIL
  show ' Instance   : ' #Process_Ins 
  
end-procedure ! Select-Parameters

!***********************************************************************
! Get-PR-Status                                                        *
! Called By:    begin-report                                           *
! Calls:        none                                                   *
! Description:  Retrieves calc status to print in report header.       *
!***********************************************************************

begin-procedure Get-PR-Status
BEGIN-SELECT
CALRUN.RUN_FINALIZED_IND    &CALRUN.RUN_FINALIZED_IND
  let $Finalized_Ind      = &CALRUN.RUN_FINALIZED_IND
  if $Finalized_Ind  = 'Y'
     let $Calc_Stat = $Calc_Stat_Final
  else
     let $Calc_Stat = $Calc_Stat_Open
  end-if

FROM PS_GP_CAL_RUN CALRUN
WHERE CALRUN.CAL_RUN_ID = $Cal_Run_ID
END-SELECT
end-procedure Get-PR-Status


!***********************************************************************
! Get-Paygroup-Rel-Lang                                                *
! Calls:        none                                                   *
! Description:  Retrieve paygroup related language entry.              *
!***********************************************************************

begin-procedure Get-Paygroup-Rel-Lang
BEGIN-SELECT
PYGRP.DESCR     &PYGRP.DESCR
    let $Paygroup_Descr = LTRIM(RTRIM(&PYGRP.DESCR, ' '), ' ')
FROM PS_GP_PYGRP PYGRP
WHERE GP_PAYGROUP = $Paygroup
END-SELECT

BEGIN-SELECT
PYGRPLANG.DESCR     &PYGRPLANG.DESCR
    let $Paygroup_Descr = LTRIM(RTRIM(&PYGRPLANG.DESCR, ' '), ' ')

FROM PS_GP_PYGRP_LANG PYGRPLANG
WHERE PYGRPLANG.GP_PAYGROUP = $Paygroup
AND   PYGRPLANG.LANGUAGE_CD = $curr_language_cd
END-SELECT

BEGIN-SELECT
TPR.GPMX_CD_REGIME 

        Let $Cd_Regime = LTRIM(RTRIM(&TPR.GPMX_CD_REGIME, ' '), ' ')
        DO Get-Xlat-Descr ('GPMX_CD_REGIME', $Cd_Regime, $End_Dt, $curr_language_cd, $Regime_Code)
        
FROM PS_GPMX_TAX_PARM TPR 
  WHERE  TPR.GP_PAYGROUP = $Paygroup
  AND TPR.BGN_DT = (SELECT MAX(TPR_ED.BGN_DT) FROM PS_GPMX_TAX_PARM TPR_ED 
                      WHERE TPR.GP_PAYGROUP = TPR_ED.GP_PAYGROUP
                        AND TPR_ED.BGN_DT    <= $End_Dt) 
END-SELECT                        
end-procedure  Get-Paygroup-Rel-Lang


!***********************************************************************
! Get-Frequency-Rel-Lang                                                *
! Calls:        none                                                   *
! Description:  Retrieve Frequency related language entry.              *
!***********************************************************************

begin-procedure Get-Frequency-Rel-Lang 
BEGIN-SELECT
FRQ.DESCR50    
    
    let $Frequency  = LTRIM(RTRIM(&FRQ.DESCR50, ' '), ' ')
    
FROM PS_FREQUENCY_TBL FRQ 
  WHERE  FRQ.EFFDT =  (SELECT MAX(FRQ_ED.EFFDT) FROM PS_FREQUENCY_TBL FRQ_ED 
                      WHERE FRQ.FREQUENCY_ID = FRQ_ED.FREQUENCY_ID 
                        AND FRQ_ED.EFFDT    <= $End_Dt) 
     AND FRQ.FREQUENCY_ID = $Frequency_id  
     AND FRQ.EFF_STATUS = 'A'
END-SELECT

BEGIN-SELECT
FRQLNG.DESCR50

    let $Frequency = LTRIM(RTRIM(&FRQLNG.DESCR50, ' '), ' ')

FROM PS_FREQ_TBL_LANG FRQLNG 
  WHERE FRQLNG.EFFDT =  (SELECT MAX(FRQLNG_ED.EFFDT) FROM PS_FREQ_TBL_LANG FRQLNG_ED 
                          WHERE FRQLNG.FREQUENCY_ID = FRQLNG_ED.FREQUENCY_ID 
                            AND FRQLNG.LANGUAGE_CD = FRQLNG_ED.LANGUAGE_CD 
                            AND FRQLNG_ED.EFFDT <= SYSDATE) 
     AND FRQLNG.FREQUENCY_ID = $Frequency_id   
     AND FRQLNG.LANGUAGE_CD = $curr_language_cd
END-SELECT
end-procedure  Get-Frequency-Rel-Lang  

!***********************************************************************
! Get-Period                                                           *
! Calls:        none                                                   *
! Description:  Retrieve calendar information.                         *
!***********************************************************************

begin-procedure Get-Period
#Debug Show 'Procedure : Get-Period'
! Add Functionality for Off Cycle Process

LET #ActivePage = 0
LET #FirstPage = 0
LET #LastPage = 0


Let $OffCycle  = ''
Let $Begin_Dt1 = ''
Let $End_Dt1   = ''
Let $Cal_ID    = ''
Let $gv_paygp  = ''
Let $Frequency_id  = ''

!Check if CAL_RUN_ID is Off Cycle
Begin-Select
OFF_CYCLE

    Let $OffCycle = Rtrim(&OFF_CYCLE, ' ')

FROM PS_GP_CAL_RUN
WHERE CAL_RUN_ID = $CAL_RUN_ID
End-Select

If $OffCycle = 'Y'
#Debug show '  Running Offcycle Payroll'
#Debug Show '  $CAL_RUN_ID  :' $CAL_RUN_ID
Begin-Select DISTINCT
OFFP.PRD_BGN_DT
OFFP.PRD_END_DT
OFFP.FREQUENCY_ID 
OFFD.CAL_PRD_ID
OFFD.GP_PAYGROUP
OFFCAL.CAL_ID

    MOVE &OFFP.PRD_BGN_DT   TO $Begin_Dt1
    MOVE &OFFP.PRD_END_DT   TO $End_Dt1
    MOVE &OFFP.FREQUENCY_ID TO $Frequency_id 
    MOVE &OFFD.CAL_PRD_ID   TO $Cal_PrdID
    MOVE &OFFCAL.CAL_ID     TO $Cal_ID
    MOVE &OFFD.GP_PAYGROUP  TO $gv_paygp
 
    do Convert-To-DTU-Date($Begin_Dt1,$Begin_Dt)
    do Convert-To-DTU-Date($End_Dt1,$End_Dt)

    do Convert-from-DTU-Date($Begin_Dt,$Begin_Dt)
    do Convert-from-DTU-Date($End_Dt,$End_Dt)
    
    do Format-DateTime($Begin_Dt1, $Period_Begin_Date, {DEFDMY}, '', '')
    do Format-DateTime($End_Dt1, $Period_End_Date, {DEFDMY}, '', '')
    
    #Debug Show '  $Begin_Dt  :' $Begin_Dt
    #Debug Show '  $End_Dt    :' $End_Dt
    #Debug Show '  $Cal_ID    :' $Cal_ID
    #Debug Show '  $gv_paygp  :' $gv_paygp

    do Get-Print-Seq
    do Get-Format
    do Get-Frequency-Rel-Lang 


FROM PS_GP_CAL_RUN_OFF OFFD,
PS_GP_CAL_PRD OFFP,
PS_GP_PYE_CAL OFFCAL,
PS_GP_RUN_TYPE OFFT
WHERE OFFD.CAL_RUN_ID = $CAL_RUN_ID
AND OFFP.CAL_PRD_ID = OFFD.CAL_PRD_ID
AND OFFCAL.GP_PAYGROUP = OFFD.GP_PAYGROUP
AND OFFCAL.CAL_PRD_ID = OFFD.CAL_PRD_ID
AND OFFCAL.OFF_CYCLE_ID = OFFD.CAL_RUN_ID
AND OFFT.RUN_TYPE       = OFFCAL.RUN_TYPE
AND OFFT.CALC_TYPE      = 'P'
End-Select

Else
#Debug show '  Running Normal Payroll'
!!Get Data from PS_GP_CAL_RUN_DTL

Begin-Select
PRD.PRD_BGN_DT
PRD.PRD_END_DT  
PRD.FREQUENCY_ID 
CAL.CAL_ID
CAL.GP_PAYGROUP

    MOVE &PRD.PRD_BGN_DT   TO $Begin_Dt1
    MOVE &PRD.PRD_END_DT   TO $End_Dt1
    MOVE &PRD.FREQUENCY_ID TO $Frequency_id 
    MOVE &CAL.CAL_ID       TO $Cal_ID
    MOVE &CAL.GP_PAYGROUP  TO $gv_paygp

    do Convert-To-DTU-Date($Begin_Dt1,$Begin_Dt)
    do Convert-To-DTU-Date($End_Dt1,$End_Dt)

    do Convert-from-DTU-Date($Begin_Dt,$Begin_Dt)
    do Convert-from-DTU-Date($End_Dt,$End_Dt)
    
    do Format-DateTime($Begin_Dt1, $Period_Begin_Date, {DEFDMY}, '', '')
    do Format-DateTime($End_Dt1, $Period_End_Date, {DEFDMY}, '', '')
    
    #Debug Show '  $Begin_Dt  :' $Begin_Dt
    #Debug Show '  $End_Dt    :' $End_Dt
    #Debug Show '  $Cal_ID    :' $Cal_ID
    #Debug Show '  $gv_paygp  :' $gv_paygp

    do Get-Print-Seq
    do Get-Format
    do Get-Frequency-Rel-Lang 

FROM PS_GP_CAL_RUN_DTL CAL, PS_GP_CAL_PRD PRD 
WHERE CAL.CAL_RUN_ID = $CAL_RUN_ID
 AND  CAL.CALC_TYPE  = 'P'   !Payroll Calc
 AND  CAL.CAL_PRD_ID = PRD.CAL_PRD_ID
End-Select

End-If

end-procedure Get-Period


!***********************************************************************
! Process-Main                                                         *
! Called By:    Process-Main                                           *
! Calls:        Format-DateTime                                        *
! Description:  Retrieves segment information to be printed in page    *
!               header.  Manages segment-level page breaking.  Manages *
!               which report sections to run based on run control.     *
!***********************************************************************

begin-procedure Process-Main
#debug show 'Process-Main'

#ifdef debugy
    show 'Inside procedure Process-Main'
#end-if

    

   let #regpro            = 0
   let #reglei            = 0
   let $Company           = ''
   let #Inactive_Employee = 0
   let #Active_Employee   = 0
   Let #Tot_Tax_Comp      = 0
   Let #Tot_Net_Comp      = 0
   Let #Tot_Ear_Comp      = 0
   Let #Tot_Ded_Comp      = 0

#debug show '    $Cal_Run_ID             : ' $Cal_Run_ID
#debug show '    $Paygroup_Select_Clause : ' $Paygroup_Select_Clause
#debug show '    $EE_Select_Clause       : ' $EE_Select_Clause
#debug show '    $Order_By_Clause        : ' $Order_By_Clause

BEGIN-SELECT
CCT.COMPANY                      () On-Break Print=Never Before = ot-page After=Get-Company-Data-Mex  Level=1
CET.GP_PAYGROUP                  () On-Break Print=Never Before = ot-page After=Get-Paygroup-Rel-Lang Level=2
CCT.CITY
CCT.STATE
CCT.GPMX_TAX_TREATMENT
CCT.RFC_ER_ID_MEX
CET.EMPLID
CET.EMPL_RCD
CET.NAME_DESCR
CET.PYMT_DT
CET.GPMX_TOTAL_TAXABLE
CET.PIN_NET_VAL
CET.GPMX_TOT_ERN_TAX
CET.GPMX_TOT_DED_TAX 
CET.TERMINATIONS

    do Format-DateTime(&CET.PYMT_DT, $Payment_Date, {DEFDMY}, '', '')


    let $Company            = LTRIM(RTRIM(&CCT.COMPANY     , ' '), ' ')
    let $Paygroup           = LTRIM(RTRIM(&CET.GP_PAYGROUP , ' '), ' ')
    let $Emplid             = LTRIM(RTRIM(&CET.EMPLID      , ' '), ' ')
    let #Empl_Rcd           = &CET.EMPL_RCD
    Let $Place_inssuance    = LTRIM(RTRIM(&CCT.CITY,' ' ), ' ') || ', ' || LTRIM(RTRIM(&CCT.STATE, ' '), ' ')
    Let $Tax_Treatment      = LTRIM(RTRIM(&CCT.GPMX_TAX_TREATMENT, ' '), ' ')
    Let $Regime_Code        = LTRIM(RTRIM(&CCT.GPMX_TAX_TREATMENT, ' '), ' ')
    let $Name               = LTRIM(RTRIM(&CET.NAME_DESCR, ' '), ' ')
    Let #Total_Taxable      = &CET.GPMX_TOTAL_TAXABLE
    Let #Net_Pay            = &CET.PIN_NET_VAL
    Let #Total_Earning      = &CET.GPMX_TOT_ERN_TAX
    Let #Total_Deduction    = &CET.GPMX_TOT_DED_TAX 
       
    If &CET.TERMINATIONS = 1
       let $Empl_Status     = 'I'
       Add 1 to #Inactive_Employee
    Else
       let $Empl_Status     = 'A'
       Add 1 to #Active_Employee
    End-if   
    
    Let $Details_Aux = 'N'
    
    !Total company
    Let #Tot_Tax_Comp       = #Tot_Tax_Comp + #Total_Taxable  
    Let #Tot_Net_Comp       = #Tot_Net_Comp + #Net_Pay        
    Let #Tot_Ear_Comp       = #Tot_Ear_Comp + #Total_Earning  
    Let #Tot_Ded_Comp       = #Tot_Ded_Comp + #Total_Deduction
#ifdef debug
    show '    SEGMENT EMPL INFO'
    show '      $Company     : ' $Company
    show '      $Paygroup    : ' $Paygroup
    show '      $Emplid      : ' $Emplid
    show '      #Empl_Rcd    : ' #Empl_Rec
    show '      $Empl_Status : ' $Empl_Status
#end-if
    

   if #regpro = 0
     do Get-Format
   end-if
   
   
    do Format-Payslip-DT
   
    ADD 1 TO #reglei


 FROM PS_GPMX_CF_COM_TMP CCT, PS_GPMX_CF_EMP_TMP CET 
  WHERE  CCT.PROCESS_INSTANCE = #Process_Ins 
     AND CCT.PROCESS_INSTANCE = CET.PROCESS_INSTANCE 
     AND CCT.COMPANY          = CET.COMPANY
     AND CET.PIN_NET_VAL <> 0
     AND CET.GPMX_ERROR_STATUS = 'N'
[$Order_By_Clause]
END-SELECT

  !print Resume last Company
  If $GPMX_DETAIL = 'Y'
    clear-array name = arr_erns
    let #cont_e = 0
    
    If $EARN_IE = '10'
      Do Get-Earnings_Det10
    Else
      Do Get-Earnings_Det20 
    End-if     
    
    clear-array name = arr_ded
    let #cont_d = 0
    
    If $DED_IE  = '10'
      Do Get-Deduction_Det10
    Else
      Do Get-Deduction_Det20
    End-if
    
    If #cont_e > #cont_d
     let #count_t = #cont_e
    Else
     let #count_t = #cont_d
    End-if
  End-if
     
  Do CompanyResume
   show 'Records Read      : ' #Reglei
   show 'Records Processed : ' #Regpro

   if #regpro = 0
      show  $noDataMsg
   end-if
end-procedure Process-Main

!**************************************
begin-procedure Format-Payslip-DT
#debug show '*** Format-Payslip-DT ***'
!**************************************
Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
  Add 1 to #EmployeeNumber
  let #print_item = 1
  Let $Details_Aux = 'N'

  print $Emplid           (+1,{Col_Ec1})
  print #Empl_Rcd         (,{Col_Ec2}) edit '999'
  print $Name             (,{Col_Ec3})
  print $Empl_Status      (,{Col_Ec4}) 
  print #Total_Earning    (,{Col_Ec5}) edit '999,999,999.99'
  print #Total_Deduction  (,{Col_Ec6}) edit '999,999,999.99'
  print #Total_Taxable    (,{Col_Ec7}) edit '999,999,999.99'
  print #Net_Pay          (,{Col_Ec8}) edit '999,999,999.99'
  
  
  

end-procedure Format-Payslip-DT

!**************************************
begin-procedure ot-page  !mtm
#debug show '** Ot-Page **'
!**************************************

  if $Company <> $CompanyAnt
     #Debug Show 'Company change: ' $Company ' <> ' $CompanyAnt
     Let $CompanyAnt = $Company
     Let $PaygroupAnt = $Paygroup
     Let $PeriodEndDtAnt = $Period_End_Date
     
     If $GPMX_DETAIL = 'Y'
       clear-array name = arr_erns
       let #cont_e = 0
       
       If $EARN_IE = '10'
         Do Get-Earnings_Det10
       Else
         Do Get-Earnings_Det20 
       End-if     
       
       clear-array name = arr_ded
       let #cont_d = 0
       
       If $DED_IE  = '10'
         Do Get-Deduction_Det10
       Else
         Do Get-Deduction_Det20
       End-if
       
       If #cont_e > #cont_d
        let #count_t = #cont_e
       Else
        let #count_t = #cont_d
       End-if
   
     End-if
     
     Do CompanyResume
     new-page
  end-if

  if $Paygroup <> $PaygroupAnt
     Let $PaygroupAnt = $Paygroup
     Let $PeriodEndDtAnt = $Period_End_Date
     
     If $GPMX_DETAIL = 'Y'
       clear-array name = arr_erns
       let #cont_e = 0
       
       If $EARN_IE = '10'
         Do Get-Earnings_Det10
       Else
         Do Get-Earnings_Det20 
       End-if     
       
       clear-array name = arr_ded
       let #cont_d = 0
       
       If $DED_IE  = '10'
         Do Get-Deduction_Det10
       Else
         Do Get-Deduction_Det20
       End-if
       
       If #cont_e > #cont_d
        let #count_t = #cont_e
       Else
        let #count_t = #cont_d
       End-if
   
     End-if
     
     Do CompanyResume
     new-page
  end-if

  
end-procedure ot-page

!**************************************
begin-procedure CompanyResume
#debug show '** CompanyResume **'
!**************************************
   Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
   
   if #EmployeeNumber >60
    new-page
   End-if 
   
    graphic (+2, 1, 127) box 4
    print $emplid_tot (+1,{Col_ed1})
    Print #Tot_Ear_Comp  (,{Col_ec5})  edit '$$$,$$$,$$9.99'
    Print #Tot_Ded_Comp  (,{Col_ec6})  edit '$$$,$$$,$$9.99'
    Print #Tot_Tax_Comp  (,{Col_ec7})  edit '$$$,$$$,$$9.99'
    Print #Tot_Net_Comp  (,{Col_ec8})  edit '$$$,$$$,$$9.99'
    graphic (+1,2,125) horz-line 5
    print $Total_CFDI_Emp_Lbl  (+1,{Col_ec1}) Bold
    Print $Total_Act_Emp_Lbl   (,{Col_Ed4})
    Print #Active_Employee     (,{Col_Ed5}) edit '888,888'
    Print $Total_Inact_Emp_Lbl (,{Col_Ed7})
    Print #Inactive_Employee   (,{Col_Ed8}) edit '888,888'
    

    Let #tot_ern = 0
    Let #tot_ded = 0
    Let #tot_net = 0
    let #print_item = 1
    let #lines_total = 1
    Let $Details_Aux = 'N'
    Let #Total_Ear_Det = 0
    Let #Total_Ded_Det = 0
    
    If $GPMX_DETAIL = 'Y'
      Let $Aux = 'Y'
    
      new-page
      print ' ' (+1,2)
      while #print_item <= #count_t
      
         if #lines_total > 60
          Let #lines_total = 0
          new-page
         End-if 
   
         if  #cont_e >= #print_item
            get #pin_numEr $pin_nmEr $Pin_descrEr  $Sat_CodeEr #amount_valEr from arr_erns(#print_item) e_code e_name e_descr e_Sat e_amount
            
            Let #Total_Ear_Det = #Total_Ear_Det + #amount_valEr
            Print $Sat_CodeEr         (,{Col_ed1},3)
            Print $pin_nmEr           (,{Col_ed2},12)
            Print $Pin_descrEr        (,{Col_ed3},20)  
            Print #amount_valEr       (,{Col_ed4})  edit '999,999,999.99'
         end-if
         
         if  #cont_d >= #print_item
            get #pin_numDd $pin_nmDd $Pin_descrDd  $Sat_CodeDd #amount_valDd from arr_ded (#print_item) d_code d_name d_descr d_Sat d_amount
            
            Let #Total_Ded_Det = #Total_Ded_Det + #amount_valDd
            Print $Sat_CodeDd         (,{Col_ed5},3)
            Print $pin_nmDd           (,{Col_ed6},12)
            Print $Pin_descrDd        (,{Col_ed7},20)  
            Print #amount_valDd       (,{Col_ed8})  edit '999,999,999.99'
         end-if
         
        print '' (+1,2)
        Add 1 to #ren
        Add 1 to #print_item
        Add 1 to #lines_total
     end-while
     
     if #lines_total > 60
      Let #lines_total = 0
      new-page
     End-if 
     
     Let #Tot_Net_Det = #Total_Ear_Det - #Total_Ded_Det
     graphic (+2, 1, 127) box 1
     print $emplid_tot (,{Col_ed1})
     Print #Total_Ear_Det  (,{Col_ed4})  edit '$$$,$$$,$$9.99'
     Print #Total_Ded_Det  (,{Col_ed8})  edit '$$$,$$$,$$9.99'
     Print #Tot_Net_Det    (,{Col_ed9})  edit '$$$,$$$,$$9.99'
    
    End-if  
   
    
    Clear-Array name = arr_erns
    Clear-Array name = arr_ded
    Let #EmployeeNumber = 0
    Let #Inactive_Employee = 0
    Let #Active_Employee   = 0
    Let #Tot_Tax_Comp      = 0
    Let #Tot_Net_Comp      = 0
    Let #Tot_Ear_Comp      = 0
    Let #Tot_Ded_Comp      = 0
    If $Aux = 'Y'
      Let $Details_Aux = 'Y'
    else  
      Let $Details_Aux       = 'N' 
    end-if
    Let #Total_Ear_Det     = 0
    Let #Total_Ded_Det     = 0
   
end-procedure CompanyResume

!************************************************************
begin-procedure Get-Earnings_Det10
!************************************************************
begin-select
AA1.PIN_NUM
AA1.PIN_NM
AA1.DESCR
AA1.GPMX_LEGAL_CD_CFDI
SUM( AA1.GPMX_RSLT_TAX + AA1.GPMX_RSLT_NO_TAX) &AA1.AMOUNT
AA1.DETAIL  
BB1.SEQNUM 

    Let #pin_num    = &AA1.PIN_NUM
    Let $pin_nm     = LTRIM(RTRIM(&AA1.PIN_NM, ' '), ' ')
    Let $Pin_descr  = LTRIM(RTRIM(&AA1.DESCR, ' '), ' ')
    Let $Sat_Code   = &AA1.GPMX_LEGAL_CD_CFDI
    Let #amount_val = &AA1.AMOUNT
    
    
    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num $pin_nm $Pin_descr  $Sat_Code #amount_val into arr_erns(#cont_e) e_code e_name e_descr e_Sat e_amount
    end-if


FROM PS_GPMX_CF_EMP_TMP CE1, PS_GPMX_CF_RSL_TMP AA1, PS_GPMX_PAYSL_F_ER BB1  
  WHERE  CE1.PROCESS_INSTANCE = #Process_Ins
     AND CE1.COMPANY = $Company
     AND CE1.GP_PAYGROUP = $Paygroup 
     AND CE1.GPMX_ERROR_STATUS = 'N'
     AND CE1.PROCESS_INSTANCE = AA1.PROCESS_INSTANCE 
     AND CE1.EMPLID = AA1.EMPLID 
     AND CE1.EMPL_RCD = AA1.EMPL_RCD 
     AND CE1.COMPANY = AA1.COMPANY 
     AND CE1.GP_PAYGROUP = AA1.GP_PAYGROUP
     AND AA1.PIN_TYPE = 'ER'
     AND BB1.EFFDT = $FO_EFF_DT
     AND BB1.GPMX_FORMAT_ID = $GPMX_FORMAT 
     AND BB1.EFF_STATUS = 'A' 
     AND BB1.PIN_ERN_NUM = AA1.PIN_NUM
     AND AA1.DETAIL = 'N'
     AND AA1.GPMX_SUM_FLAG = 'Y'
  GROUP BY  AA1.PIN_NUM,   AA1.PIN_NM,  AA1.DESCR,  AA1.GPMX_LEGAL_CD_CFDI,  AA1.DETAIL, BB1.SEQNUM 
  ORDER BY BB1.SEQNUM 
end-select
end-procedure Get-Earnings_Det10 

!************************************************************
begin-procedure Get-Earnings_Det20
!************************************************************
begin-select
AA2.PIN_NUM
AA2.PIN_NM
AA2.DESCR
AA2.GPMX_LEGAL_CD_CFDI
SUM( AA2.GPMX_RSLT_TAX + AA2.GPMX_RSLT_NO_TAX) &AA2.AMOUNT
AA2.DETAIL  


    Let #pin_num    = &AA2.PIN_NUM
    Let $pin_nm     = LTRIM(RTRIM(&AA2.PIN_NM, ' '), ' ')
    Let $Pin_descr  = LTRIM(RTRIM(&AA2.DESCR, ' '), ' ')
    Let $Sat_Code   = &AA2.GPMX_LEGAL_CD_CFDI
    Let #amount_val = &AA2.AMOUNT
    

    if #amount_val <> 0
      ADD 1 TO #cont_e
      put #pin_num $pin_nm $Pin_descr  $Sat_Code #amount_val into arr_erns(#cont_e) e_code e_name e_descr e_Sat e_amount
    end-if


FROM PS_GPMX_CF_EMP_TMP CE2, PS_GPMX_CF_RSL_TMP AA2
  WHERE  CE2.PROCESS_INSTANCE = #Process_Ins
     AND CE2.COMPANY = $Company
     AND CE2.GP_PAYGROUP = $Paygroup 
     AND CE2.GPMX_ERROR_STATUS = 'N'
     AND CE2.PROCESS_INSTANCE = AA2.PROCESS_INSTANCE 
     AND CE2.EMPLID = AA2.EMPLID 
     AND CE2.EMPL_RCD = AA2.EMPL_RCD 
     AND CE2.COMPANY = AA2.COMPANY 
     AND CE2.GP_PAYGROUP = AA2.GP_PAYGROUP 
     AND AA2.PIN_TYPE = 'ER'
     AND AA2.PIN_NUM NOT IN (SELECT BB2.PIN_ERN_NUM FROM PS_GPMX_PAYSL_F_ER BB2
                          where BB2.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   BB2.EFFDT          = $FO_EFF_DT
                          and   BB2.EFF_STATUS     = 'A'
                          and   AA2.PIN_NM = AA2.PIN_NM)
     AND AA2.DETAIL = 'N'
     AND AA2.GPMX_SUM_FLAG = 'Y'                     
  GROUP BY  AA2.PIN_NUM, AA2.PIN_NM,  AA2.DESCR,  AA2.GPMX_LEGAL_CD_CFDI, AA2.DETAIL
  ORDER BY  AA2.PIN_NM
end-select
end-procedure Get-Earnings_Det20 

!************************************************************
begin-procedure Get-Deduction_Det10
!************************************************************
begin-select
CC1.PIN_NUM
CC1.PIN_NM
CC1.DESCR
CC1.GPMX_LEGAL_CD_CFDI
SUM( CC1.GPMX_RSLT_TAX + CC1.GPMX_RSLT_NO_TAX) &CC1.AMOUNT
CC1.DETAIL
CC1.PIN_TYPE  
DD1.SEQNUM 

    Let #pin_num    = &CC1.PIN_NUM
    Let $pin_nm     = LTRIM(RTRIM(&CC1.PIN_NM, ' '), ' ')
    Let $Pin_descr  = LTRIM(RTRIM(&CC1.DESCR, ' '), ' ')
    Let $Sat_Code   = &CC1.GPMX_LEGAL_CD_CFDI
    Let #amount_val = &CC1.AMOUNT
    
    If &CC1.PIN_TYPE = 'ER'
      Let $pin_nm = '*'|| $pin_nm
      
      if #amount_val <> 0
       ADD 1 TO #cont_e
       put #pin_num $pin_nm $Pin_descr  $Sat_Code #amount_val into arr_erns(#cont_e) e_code e_name e_descr e_Sat e_amount
      End-if
       
    End-if
 
    if #amount_val <> 0 and &CC1.PIN_TYPE = 'DD'
      ADD 1 TO #cont_d
      put #pin_num $pin_nm $Pin_descr  $Sat_Code #amount_val into arr_ded(#cont_d) d_code d_name d_descr d_Sat d_amount
    end-if


FROM PS_GPMX_CF_EMP_TMP CE3, PS_GPMX_CF_RSL_TMP CC1, PS_GPMX_PAYSL_F_DE DD1  
  WHERE  CE3.PROCESS_INSTANCE = #Process_Ins
     AND CE3.COMPANY = $Company
     AND CE3.GP_PAYGROUP = $Paygroup 
     AND CE3.GPMX_ERROR_STATUS = 'N'
     AND CE3.PROCESS_INSTANCE = CC1.PROCESS_INSTANCE 
     AND CE3.EMPLID = CC1.EMPLID 
     AND CE3.EMPL_RCD = CC1.EMPL_RCD 
     AND CE3.COMPANY = CC1.COMPANY 
     AND CE3.GP_PAYGROUP = CC1.GP_PAYGROUP 
     AND CC1.PIN_TYPE IN ('ER', 'DD')
     AND DD1.EFFDT = $FO_EFF_DT 
     AND DD1.GPMX_FORMAT_ID = $GPMX_FORMAT 
     AND DD1.EFF_STATUS = 'A' 
     AND DD1.PIN_DED_NUM = CC1.PIN_NUM
     AND CC1.DETAIL = 'N'
     AND CC1.GPMX_SUM_FLAG = 'Y'
  GROUP BY  CC1.PIN_NUM,   CC1.PIN_NM,  CC1.DESCR,  CC1.GPMX_LEGAL_CD_CFDI,  CC1.DETAIL, CC1.PIN_TYPE, DD1.SEQNUM
  ORDER BY DD1.SEQNUM 
end-select
end-procedure Get-Deduction_Det10 

!************************************************************
begin-procedure Get-Deduction_Det20
!************************************************************
begin-select
CC2.PIN_NUM
CC2.PIN_NM
CC2.DESCR
CC2.GPMX_LEGAL_CD_CFDI
SUM( CC2.GPMX_RSLT_TAX + CC2.GPMX_RSLT_NO_TAX) &CC2.AMOUNT
CC2.DETAIL  


    Let #pin_num    = &CC2.PIN_NUM
    Let $pin_nm     = LTRIM(RTRIM(&CC2.PIN_NM, ' '), ' ')
    Let $Pin_descr  = LTRIM(RTRIM(&CC2.DESCR, ' '), ' ')
    Let $Sat_Code   = &CC2.GPMX_LEGAL_CD_CFDI
    Let #amount_val = &CC2.AMOUNT
    

    if #amount_val <> 0
      ADD 1 TO #cont_d
      put #pin_num $pin_nm $Pin_descr  $Sat_Code #amount_val into arr_ded(#cont_d) d_code d_name d_descr d_Sat d_amount
    end-if


FROM PS_GPMX_CF_EMP_TMP CE4, PS_GPMX_CF_RSL_TMP CC2
  WHERE  CE4.PROCESS_INSTANCE = #Process_Ins
     AND CE4.COMPANY = $Company
     AND CE4.GP_PAYGROUP = $Paygroup 
     AND CE4.GPMX_ERROR_STATUS = 'N'
     AND CE4.PROCESS_INSTANCE = CC2.PROCESS_INSTANCE 
     AND CE4.EMPLID = CC2.EMPLID 
     AND CE4.EMPL_RCD = CC2.EMPL_RCD 
     AND CE4.COMPANY = CC2.COMPANY 
     AND CE4.GP_PAYGROUP = CC2.GP_PAYGROUP 
     AND CC2.PIN_TYPE    = 'DD'
     AND CC2.PIN_NUM NOT IN (SELECT DD2.PIN_DED_NUM FROM PS_GPMX_PAYSL_F_DE DD2
                          where DD2.GPMX_FORMAT_ID = $GPMX_FORMAT
                          and   DD2.EFFDT       = $FO_EFF_DT
                          and   DD2.EFF_STATUS  = 'A'
                          and   CC2.PIN_NM      = CC2.PIN_NM)
     AND CC2.DETAIL = 'N'
     AND CC2.GPMX_SUM_FLAG = 'Y'                     
  GROUP BY  CC2.PIN_NUM, CC2.PIN_NM,  CC2.DESCR,  CC2.GPMX_LEGAL_CD_CFDI, CC2.DETAIL
  ORDER BY  CC2.PIN_NM
end-select
end-procedure Get-Deduction_Det20

!************************************************
begin-procedure  Get-Pin-Descr
!************************************************
  let $pin_descr = ''
  let $pin_nm = ''
  let $pin_code = ''
begin-select
PD.DESCR
PD.PIN_NM
PD.PIN_CODE

  MOVE &PD.PIN_NM TO $pin_nm
  MOVE &PD.DESCR  TO $pin_descr
  MOVE &PD.PIN_CODE TO $pin_code
  LET $pin_code = RTRIM($pin_code,' ')

  DO Get-Pin-Descr-Lang
from PS_GP_PIN PD
WHERE PD.PIN_NUM = #pin_nmp
end-select
end-procedure   Get-Pin-Descr

!**********************************************
begin-procedure  Get-Pin-Descr-Lang
!**********************************************
begin-select
PDL.DESCR
  MOVE &PDL.DESCR TO $pin_descr
from PS_GP_PIN_LANG PDL
WHERE PDL.PIN_NUM = #pin_nmp
and   PDL.LANGUAGE_CD = $Curr_language_Cd
end-select
end-procedure   Get-Pin-Descr-Lang



!****************************************************
begin-procedure Get-Format
 #debug show 'Get-Format'
!****************************************************
begin-select
FO.GPMX_PIN_PSLP1_NUM
FO.GPMX_PIN_PSLP2_NUM
FO.GPMX_PIN_PSLP3_NUM
FO.GPMX_EARN_IE
FO.GPMX_DED_IE
FO.EFFDT

   MOVE &FO.GPMX_PIN_PSLP1_NUM  TO  #earn_tot
   MOVE &FO.GPMX_PIN_PSLP2_NUM  TO  #ded_tot
   MOVE &FO.GPMX_EARN_IE        TO  $EARN_IE
   MOVE &FO.GPMX_DED_IE         TO  $DED_IE
   Let $FO_EFF_DT = Rtrim(&FO.EFFDT, ' ')

   if $FO_EFF_DT <> ''
      Do convert-to-dtu-date(&FO.EFFDT,$FO_EFF_DT)
      Do convert-from-dtu-date($FO_EFF_DT,$FO_EFF_DT)
   end-if

FROM PS_GPMX_PAYSL_FORM FO
WHERE FO.GPMX_FORMAT_ID = $GPMX_FORMAT
AND   FO.EFF_STATUS = 'A'
AND   FO.EFFDT = (SELECT MAX(FO1.EFFDT) FROM PS_GPMX_PAYSL_FORM FO1
                  where FO1.GPMX_FORMAT_ID  =  FO.GPMX_FORMAT_ID
                  and   FO1.EFF_STATUS      =  FO.EFF_STATUS
                  and   FO1.EFFDT           <= $End_Dt)
end-select
end-procedure Get-Format


!**************************************************
begin-procedure Def-Arrays
!**************************************************
CREATE-ARRAY NAME = arr_erns SIZE = 100
     FIELD = e_code:number
     FIELD = e_name:char
     FIELD = e_descr:char
     FIELD = e_Sat:char
     FIELD = e_amount:number
     

CREATE-ARRAY NAME = arr_ded SIZE = 100
     FIELD = d_code:number
     FIELD = d_name:char
     FIELD = d_descr:char
     FIELD = d_Sat:char
     FIELD = d_amount:number
     
end-procedure Def-Arrays

!************************************************************
begin-procedure Get-Print-Seq
#debug show '*Get-Print-Seq ***'
!************************************************************
let $Order_By_Clause = ''

Begin-Select
GPS.GPMX_SEQ01
GPS.GPMX_ASC_DESC01
GPS.GPMX_SEQ02
GPS.GPMX_ASC_DESC02
GPS.GPMX_SEQ03
GPS.GPMX_ASC_DESC03
GPS.GPMX_SEQ04
GPS.GPMX_ASC_DESC04
GPS.GPMX_SEQ05
GPS.GPMX_ASC_DESC05

      MOVE &GPS.GPMX_SEQ01        TO   $GPMX_SEQ01
      MOVE &GPS.GPMX_ASC_DESC01   TO   $GPMX_ASC_DESC01
      MOVE &GPS.GPMX_SEQ02        TO   $GPMX_SEQ02
      MOVE &GPS.GPMX_ASC_DESC02   TO   $GPMX_ASC_DESC02
      MOVE &GPS.GPMX_SEQ03        TO   $GPMX_SEQ03
      MOVE &GPS.GPMX_ASC_DESC03   TO   $GPMX_ASC_DESC03
      MOVE &GPS.GPMX_SEQ04        TO   $GPMX_SEQ04
      MOVE &GPS.GPMX_ASC_DESC04   TO   $GPMX_ASC_DESC04
      MOVE &GPS.GPMX_SEQ05        TO   $GPMX_SEQ05
      MOVE &GPS.GPMX_ASC_DESC05   TO   $GPMX_ASC_DESC05

      let #Cont1 = 0       !Nos servira para validar si necesita la coma

      DO Print-Order($GPMX_SEQ01,$GPMX_ASC_DESC01,$Order_By_Clause,#Cont1)
      DO Print-Order($GPMX_SEQ02,$GPMX_ASC_DESC02,$Order_By_Clause,#Cont1)
      DO Print-Order($GPMX_SEQ03,$GPMX_ASC_DESC03,$Order_By_Clause,#Cont1)
      DO Print-Order($GPMX_SEQ04,$GPMX_ASC_DESC04,$Order_By_Clause,#Cont1)
      DO Print-Order($GPMX_SEQ05,$GPMX_ASC_DESC05,$Order_By_Clause,#Cont1)

FROM PS_GPMX_SORTID GPS
WHERE GPS.GPMX_SORTID = $GPMX_SORTID
AND    GPS.EFF_STATUS = 'A'
AND    GPS.EFFDT      = (SELECT MAX(GPS1.EFFDT) FROM PS_GPMX_SORTID GPS1
                         WHERE GPS1.GPMX_SORTID = GPS.GPMX_SORTID
                         AND    GPS1.EFF_STATUS = GPS.EFF_STATUS
                         AND    GPS1.EFFDT     <= $End_Dt)
End-Select
end-procedure Get-Print-Seq

!************************************************************
begin-procedure Print-Order($Data,$OrderType,:$Order,:#Cont1)
#debug show '*Print-Order ***'
!************************************************************
  let $AscDesc = ''
  if rtrim($Data,' ') <> ''
     let $order = 'ORDER BY CCT.COMPANY, CET.GP_PAYGROUP '
     
     add 1 to #Cont1
     if $OrderType = 'Y'
        let $AscDesc = ' DESC'
     end-if
     Evaluate $Data
         when = '0080'
           
           if #Cont1 <> 0
            let $Order = $Order || ','
           End-if
            
           let $Order = $Order || 'CET.EMPLID'          || $AscDesc
           break
         when = '0090'
           if #Cont1 <> 0
            let $Order = $Order || ','
           End-if
           let $Order = $Order || 'CET.NAME_DESCR'      || $AscDesc
           break
     End-Evaluate
  End-If
end-procedure

!**********************************************************
begin-procedure Get-Xlat-Descr ($fieldName, $fieldValue, $DocDate, $language_cd, :$xlatDescr)
Let $xlatDescr = ''
begin-select
XL.XLATLONGNAME
   
   let $xlatDescr = Rtrim(&XL.XLATLONGNAME,' ')
   
FROM PSXLATITEM XL 
WHERE XL.FIELDNAME = $fieldName
AND XL.FIELDVALUE = $fieldValue
AND XL.EFF_STATUS = 'A'
AND XL.EFFDT <= (SELECT MAX(XL2.EFFDT) 
                 FROM PSXLATITEM XL2 WHERE
                 XL.FIELDNAME = XL2.FIELDNAME
                 AND XL.FIELDVALUE = XL2.FIELDVALUE
                 AND XL2.EFFDT <= $DocDate)
end-select


begin-select
XLL.XLATLONGNAME

   let $xlatDescr = Rtrim(&XLL.XLATLONGNAME,' ')
   
FROM PSXLATITEMLANG XLL 
WHERE XLL.FIELDNAME = $fieldName
AND XLL.FIELDVALUE = $fieldValue
AND XLL.EFFDT <= (SELECT MAX(XLL2.EFFDT) FROM PSXLATITEM XLL2 WHERE
XLL.FIELDNAME = XLL2.FIELDNAME
AND XLL.FIELDVALUE = XLL2.FIELDVALUE
AND XLL2.EFFDT <= $DocDate)
AND LANGUAGE_CD = $language_cd
end-select
end-procedure Get-Xlat-Descr

!**********************************************************
begin-procedure Del-Temporal-Rec
begin-sql
DELETE 
  FROM PS_GPMX_CF_COM_TMP 
 WHERE PROCESS_INSTANCE = #Process_Ins
end-sql
 
begin-sql 
DELETE 
  FROM PS_GPMX_CF_EMP_TMP 
 WHERE PROCESS_INSTANCE = #Process_Ins
end-sql

begin-sql
DELETE 
  FROM PS_GPMX_CF_RSL_TMP 
 WHERE PROCESS_INSTANCE = #Process_Ins
end-sql

begin-sql
DELETE 
  FROM PS_GPMX_CF_OPM_TMP 
 WHERE PROCESS_INSTANCE = #Process_Ins
end-sql
End-procedure Del-Temporal-Rec   

!***********************************************************************
#include 'datemath.sqc'     ! Date conversion procedures
#include 'sqrtrans.sqc'     ! Translate SQR strings to given language
#include 'prcslng.sqc'      ! Replaces getrplng.sqc
#include 'reset.sqc'        ! Reset printer procedure
#include 'stdapi.sqc'       ! Update Process API
#include 'getcomex.sqc'     ! Get selected fields from Company Table and Mexico Fields
#include 'number.sqc'       ! Routines to format numbers
#include 'datetime.sqc'     ! Routines for date and time formatting
