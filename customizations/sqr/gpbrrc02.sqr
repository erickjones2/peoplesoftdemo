!***********************************************************************
!  GPBRRC02:  GRRF - Guia de Recolhimento Rescisório do FGTS           *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  30420833                                            *
!                                                                      *
!***********************************************************************
#include 'setenv.sqc'   !Set environment

begin-setup

#include 'setupdb.sqc'

declare-printer   THIS_REPORT
       type=hplaserjet
       font=5            !15
       point-size=6      !12
       pitch=17          !12
       symbol-set=0U     ! ASCII symbol set
 end-declare

 declare-layout THIS_REPORT
      orientation=Portrait
      top-margin= .3
      left-margin=.30
      max-lines=82
      max-columns=145
      char-width= 4      ! 7.2
      line-height=9     ! 6   72/printer_point-size
 end-declare

 declare-report THIS_REPORT
       printer-type=hplaserjet
       layout=THIS_REPORT
 end-declare

end-setup

!**************************************
begin-heading 10
!**************************************
  alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
  print ' '                            (1 ,1)
  print 'PeopleSoft'                   (1)    bold center

  print $TReport                       (3 , 2)
  print $ReportId                      (  ,+2) bold
  page-number                          (,125)  'Página  '
  last-page                            ()  ' / ' ' '


  alter-printer point-size = 9  font-type = Proportional font = #FontStd
  print ' '                            (4 ,1)
  print 'Guia de Recolhimento Rescisório do FGTS (GRRF)' (4) bold center

  alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
  print ' '                            (5 ,1)
  print $TSummary                      (5) bold center

  print $TCompany                      (6 ,2)
  print $Company                       (  ,+2) bold
  print $CompanyName                   (  ,+2) bold
  print 'CNPJ/CEI:'                    (  ,105)
  print $Estab_CNPJ_CEI                (  ,+2) edit 'XX.XXX.XXX/XXXX-XX' bold
  print $TEstablishment                (+1, 2)
  print $EstabId_00                    (  ,+2) bold 
  print $Estab_Descr1_00               (  ,+2) bold 
  print $TDateTime                     (  ,105)
  print $ReportDate                    (  ,+2) bold
  print &timeBegan                     (  ,+2) bold
  graphic                              (8, 1,140)  horz-line 5
  print 'PIS/PASEP'                    (9,  2)
  print $TEmployee                     ( , 15)
  print $TMessage                      ( , 28) 
  graphic                              (10,1,140)  horz-line 5
end-heading

begin-program
  let #FontStd  = 3
  let #SizeStd  = 7
  do Init-Report
  do Create-Arr-Msgs
  do Select-Parameters
  let $SecurityClausewithERN = ''
  let $SecurityClauseWithoutERN = ''
  do Process-Report
end-program

!*****************************
begin-procedure Init-Report
#debug show '* Init-Report *'
!*****************************
    do Report-Translation
    do Init-DateTime
    do Init-Number
    do Stdapi-Init
    do Get-Current-DateTime
    move 'GPBRRC02' to $ReportID
    move 'Guia de Recolhimento Rescisório do FGTS (GRRF)' to $ReportTitle
    move 'Ver. PUM-22.01' to $ReportVersion
    display $ReportID
    display $ReportTitle
    display $ReportVersion
    date-time () hh:mi:ss &timeBegan
    display 'Report Began: ' noline
    display &timeBegan
end-procedure Init-Report

!*****************************
begin-procedure Select-Parameters
#debug show '* Select-Parameters *'
!*****************************
let $Quote = ''''
begin-select
RC.ASOFDATE
RC.COMPANY
RC.GPBR_LIST_OPTION
RC.ESTABID
RC.GB_GROUP_ID
RC.GPBR_CRED_BGN_DT
RC.GPBR_CRED_END_DT
RC.GPBR_PIN_VAR_NUM
RC.GPBR_COMP_REPT

   let $RC_ReportDate= &RC.ASOFDATE
   let $RC_Company   = &RC.COMPANY
   let $RC_lstOption = &RC.GPBR_LIST_OPTION
   let $RC_EstabID   = &RC.ESTABID
   let $RC_GroupId   = &RC.GB_GROUP_ID
   let $RC_BgnDate   = &RC.GPBR_CRED_BGN_DT
   let $RC_EndDate   = &RC.GPBR_CRED_END_DT
   let #RC_Alimony   = &RC.GPBR_PIN_VAR_NUM
   let $RC_CompRpt   = &RC.GPBR_COMP_REPT

   let $Tbl-Sel-Cond  = ''
   let $Empl-Sel-Cond = ' AND JOB.COMPANY = ' || $Quote || $RC_Company || $Quote

   evaluate $RC_lstOption
   when = '1'
   break
   when = '2'
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND JOB.ESTABID = ' || $Quote || $RC_EstabID || $Quote
   break
   when = '3'
      let $Tbl-Sel-Cond  = ', PS_GPBR_RC_GRRFE RCE'
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND JOB.EMPLID = RCE.EMPLID '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND JOB.EMPL_RCD = RCE.EMPL_RCD '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND RCE.OPRID = ' || $Quote || $prcs_oprid || $Quote
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND RCE.RUN_CNTL_ID = ' || $Quote || $prcs_run_cntl_id || $Quote
   break
   when = '4'
      let $Tbl-Sel-Cond  = ', PS_GB_GRP_RES_TBL GRP '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND JOB.EMPLID = GRP.EMPLID '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND JOB.EMPL_RCD = GRP.EMPL_RCD '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND GRP.VERSIONGBQDM = (SELECT MAX(GRP_A.VERSIONGBQDM) FROM PS_GB_GRP_RES_TBL GRP_A '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' WHERE GRP_A.GB_GROUP_ID = GRP.GB_GROUP_ID) '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND GRP.JOB_EFFDT = (SELECT MAX(GRP_B.JOB_EFFDT) FROM PS_GB_GRP_RES_TBL GRP_B '
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' WHERE GRP_B.GB_GROUP_ID = GRP.GB_GROUP_ID AND GRP_B.EMPLID = GRP.EMPLID AND GRP_B.EMPL_RCD = GRP.EMPL_RCD)'
      let $Empl-Sel-Cond = $Empl-Sel-Cond || ' AND GRP.GB_GROUP_ID = ' || $Quote || $RC_GroupId || $Quote
   break
   end-evaluate

   let $Company     = $RC_Company
   do Get-Company-Data-Bra
   let $EstabFilter = 'AND PET.HQUNIT  = ' || $Quote || 'Y' || $Quote
   do Get-Company-Estab

from  PS_GPBR_RC_GRRF RC
where RC.OPRID       = $prcs_oprid
  and RC.RUN_CNTL_ID = $prcs_run_cntl_id
end-select
end-procedure Select-Parameters

!*****************************
begin-procedure Process-Report
#debug show '* Process-Report *'
!*****************************

let $FileName = '{FILEPREFIX}' || 'GRRF.TXT' || '{FILESUFFIX}'
#debug show 'Filename: ' $FileName
open $FileName as 1 for-writing record=360:fixed status=#filestat

if #filestat ! Is equal to zero

   get $MessageText from arrMessages(1)
   alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
   print ' ' (+1)
   print $MessageText ( ,28) 
   stop quiet

else
   move ' '  to $Blank
   move '0'  to $Zero

   do Get-Estab-IDs
   do Get-Resp-Data

   do Write-Reg00
   do GetPinCode('GP_PIN', 'PIN_NUM', $pin_code)
   #debug show '$pin_code: ' $pin_code

   do Process-Employees
   do Write-Reg90
   
   close 1
   
   #ifdef UNIX
     do ConvertUnixToDOSWin($FileName)
   #endif
    
   do Stdapi-Term
   date-time () hh:mi:ss &timeEnded
   display 'Report Ended: ' noline
   display &timeEnded
end-if
end-procedure Process-Report

!******************************
begin-procedure Get-Estab-descr
#debug show 'Get-Estab-descr'
#debug show '$RC_EndDate ' $RC_EndDate
#debug show '$EstabId    ' $EstabId
!******************************

begin-select
EST.DESCR

     let $String_In = rtrim(&EST.DESCR,' ')
     do Check-Strings ( $String_In , $CompanyLegalName)


from PS_ESTAB_TBL EST
where EST.ESTABID = $EstabId
and EST.EFFDT = (select MAX(EFFDT)
                 from PS_ESTAB_TBL
                 where ESTABID = EST.ESTABID
                 and EFFDT <= $RC_EndDate)
end-select
end-procedure Get-Estab-descr

!******************************
begin-procedure Get-Company-Estab
#debug show '** Get-Company-Estab **'
#debug show '$CompanyName ' $CompanyName
#debug show '$Company:    ' $Company
#debug show '$EstabHQ:    ' $EstabHQ
#debug show '$EstabFilter ' $EstabFilter
#debug show '$RC_EndDate: ' $RC_EndDate
#debug show '$Registro  : ' $Registro
!******************************
let $EstabId        = ''
let $Estab_Code     = ''
let $Estab_Descr1   = ''
let $Estab_Addr1    = ''
let $Estab_Num1     = ''
let $Estab_Addr2    = ''
let $Estab_Addr3    = ''
let $Estab_Addr4    = ''
let $Estab_Postal   = ''
let $Estab_City     = ''
let $Estab_CityCd   = ''
let $Estab_State    = ''
let $Estab_Address  = ''
let $Estab_Company  = ''
let $Estab_Comp_Ins = ''
let $Estab_GRRF_Rep_Type = ''
let $Estab_GRRF_Rep_ID   = ''
let $Estab_GRRF_Respn_ID = ''
let $FPAS_CD_Bra    = ''
let $Name_CiaEst    = ''
let $Estab_CNPJ_CEI = ''
let $Estab_Id_Type  = ''
let $Simples_Option = ''
let $Comp_Inscr_Type= ''
let #CompanyEstab   = 0

begin-select distinct
PET.EFFDT
PET.ESTABID
PET.DESCR
PET.COMPANY

PEB.COMP_INS_TYPE_BRA
PEB.GRRF_REP_TYPE_BRA
PEB.GRRF_RESP_ID_BRA
PEB.GRRF_CONT_ID_BRA
PEB.FPAS_CD_BRA
PEB.LEGAL_ENT_TYPE_BRA
PEB.ESTAB_ASOC_BRA
PEB.EFFDT
PEB.COUNTY_CD_BRA

PCB.SIMPLES_OPTION_BRA

   let #CompanyEstab  = 1

   let $EstabId       = rtrim(&PET.ESTABID, ' ')
   let $Estab_Code    = rtrim(&PET.ESTABID,' ')
   let $Estab_Descr1  = rtrim(&PET.DESCR,' ')
   let $JobEffdt      = rtrim(&PET.EFFDT, ' ')
   
   do GetEstabAddress($EstabId, $JobEffdt,$Registro, $Estab_Addr1, $Estab_Num1, $Estab_Addr2, $Estab_Addr4, $Estab_Postal, $Estab_CityCd, $Estab_City, $Estab_State)

   let $Estab_Address = $Estab_Addr1 || ' ' || $Estab_Num1 || ' ' || $Estab_Addr2
   let $Estab_Company = rtrim(&PET.COMPANY,' ')

   let $Estab_Comp_Ins    = rtrim(&PEB.COMP_INS_TYPE_BRA,' ')
   let $GRRF_Repr_Type    = rtrim(&PEB.GRRF_REP_TYPE_BRA,' ')
   let $GRRF_Representant = rtrim(&PEB.GRRF_RESP_ID_BRA,' ')

   let $GRRF_Responsible  = rtrim(&PEB.GRRF_CONT_ID_BRA,' ')
   let $FPAS_CD_Bra       = &PEB.FPAS_CD_BRA
   let $Name_CiaEst       = rtrim(&PEB.LEGAL_ENT_TYPE_BRA, ' ')

   let $Simples_Option    = substr(rtrim(&PCB.SIMPLES_OPTION_BRA,' '),2,1)

   let $Comp_Inscr_Type   = substr($Estab_Comp_Ins, 1,1)

   if $Comp_Inscr_Type = '1'
     let $Estab_EID = $EstabId
   else
     let $Estab_EID = rtrim(&PEB.ESTAB_ASOC_BRA, ' ')
   end-if
   let $Estab_EID = 'AND PEI.ESTABID = ' || '''' || $Estab_EID || ''''
   let $Comp_Inscr_Type = '1'

   do Check-Strings   ( $Estab_Descr1 , $Estab_Descr1 )
   do Check-Strings   ( $Estab_Address, $Estab_Address)
   do Check-Strings   ( $Estab_Addr4  , $Estab_Addr4  )
   do Check-Strings   ( $Estab_City   , $Estab_City   )
   do Check-Strings   ( $Estab_State  , $Estab_State  )
   
   do Str-Delete-Chars( $Estab_Postal, '-' , $PostalEnd )
   let #Postal         = to_number(substr($PostalEnd,1,8))
   let $Estab_Postal = edit(#Postal, '00000000')

   evaluate $Comp_Inscr_Type
   when = '1'
     let $INSCR_TYPE='CNPJ'  
   break
   when = '2'
     let $INSCR_TYPE='CEI'  
   break
   when-other
      alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
      get $MessageText from arrMessages(2)
      print $MessageText (+1,28) 
      stop quiet
   end-evaluate
 #debug show '$INSCR_TYPE    ' $INSCR_TYPE
 #debug show '$Name_CiaEst : ' $Name_CiaEst

   if $Name_CiaEst  = 'COM'
     let $String_In = $CompanyName
     do Check-Strings ( $String_In , $CompanyLegalName)
   else
     let $CompanyLegalName = $Estab_Descr1
   end-if
   
   if $EstabId_00 = '' 
      let $EstabId_00 = $EstabId
      let $Estab_Descr1_00 = $Estab_Descr1
   end-if

from PS_ESTAB_TBL PET
, PS_ESTAB_TBL_BRA PEB LEFT JOIN PS_ESTAB_ID_BRA PEI ON PEI.ESTABID = PEB.ESTABID
                       and PEI.EFFDT = PEB.EFFDT
                       and PEI.COUNTRY = 'BRA'
                       and PEI.COUNTY_CD_BRA = PEB.COUNTY_CD_BRA
                       and PEI.ESTAB_ID_TYPE_BRA in ('CNPJ', 'CEI')
, PS_COMPANY_TBL_BRA PCB
where PET.COMPANY = $Company
  and PET.EFF_STATUS = 'A'
[$EstabFilter]
  and PET.EFFDT   = (select MAX(PET_A.EFFDT)
                     from PS_ESTAB_TBL PET_A
                     where PET_A.ESTABID = PET.ESTABID
                       and PET_A.EFFDT  <= $RC_EndDate)
  and PEB.ESTABID = PET.ESTABID
  and PEB.EFFDT   = PET.EFFDT
  and PCB.COMPANY = PET.COMPANY
  and PCB.EFFDT   = (select MAX(PCB_A.EFFDT)
                     from PS_COMPANY_TBL_BRA PCB_A
                     where PCB_A.COMPANY = PCB.COMPANY
                       and PCB_A.EFFDT  <= $RC_EndDate)
end-select

begin-select
PEI.ESTAB_ID_TYPE_BRA
PEI.ESTAB_ID_BRA

   let $Estab_CNPJ_CEI    = edit(rtrim(&PEI.ESTAB_ID_BRA, ' '), '00000000000000')
   let $Estab_Id_Type     = rtrim(&PEI.ESTAB_ID_TYPE_BRA, ' ')

from PS_ESTAB_ID_BRA PEI
where PEI.EFFDT           = &PEB.EFFDT
and PEI.COUNTY_CD_BRA     = &PEB.COUNTY_CD_BRA
[$Estab_EID]
and PEI.COUNTRY           = 'BRA'
and PEI.ESTAB_ID_TYPE_BRA = 'CNPJ'
end-select

if #CompanyEstab   = 0
      alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
      get $MessageText from arrMessages(3)
      print $MessageText (+1,28) 
else

begin-select
EPH.PHONE

   let $Reg10_Phone   = rtrim(&EPH.PHONE,' ')

   let #SizeFullPhone = length($Reg10_Phone)
   let $CleanPhone    = ''
   let #i             = 1

   while #i <= #SizeFullPhone
    let $Test = substr($Reg10_Phone,#i,1)
    if $Test >= '0' and $Test <= '9'
          let $CleanPhone = $CleanPhone || $Test
    end-if
    add 1 to #i
   end-while
  

   let $Reg10_Phone   = $CleanPhone   
   let $Reg10_Phone   = edit($Reg10_Phone, '000000000000')


from PS_ESTAB_PHONE EPH
where EPH.ESTABID = &PET.ESTABID
  and EPH.EFFDT   = &PET.EFFDT
  and EPH.PHONE_TYPE = 'BUSN'
end-select

end-if
end-procedure Get-Company-Estab

!******************************
begin-procedure Get-Estab-IDs
#debug show '** Get-Estab-IDs **'
#debug show '$EstabId    ' $EstabId
#debug show '$RC_EndDate ' $RC_EndDate
!******************************
let $Estab_CAGED = ''
let $Estab_CEI   = ''
let $Estab_CNPJ  = ''
let $Estab_CNAE  = ''
let $Estab_CAIXA = ''
begin-select
EI2.ESTAB_ID_TYPE_BRA
EI2.ESTAB_ID_BRA
EI2.EFFDT

  let $Estab_Id_Type = rtrim(&EI2.ESTAB_ID_TYPE_BRA,' ')
  let $Estab_Id_BRA  = rtrim(&EI2.ESTAB_ID_BRA,' ')
  let $Estab_Effdt   = &EI2.EFFDT

  evaluate $Estab_Id_Type
  when = 'CAGED'
     let $Estab_CAGED = $Estab_Id_BRA
  break
  when = 'CEI'
     let $Estab_CEI = $Estab_Id_BRA
  break
  when = 'CNPJ'
     let $Estab_CNPJ = $Estab_Id_BRA
  break
  when = 'CNAE'
     let $Estab_CNAE = $Estab_Id_BRA
  break
  when = 'CAIXA'
     let $Estab_CAIXA = $Estab_Id_BRA
  break
  end-evaluate

from PS_ESTAB_ID_BRA  EI2
where EI2.ESTABID = $EstabId
  and EI2.COUNTRY = 'BRA'
  and EI2.EFFDT = (select MAX(EI2_A.EFFDT)
                   from PS_ESTAB_ID_BRA EI2_A
                   where EI2_A.ESTABID          = EI2.ESTABID
                     and EI2_A.COUNTY_CD_BRA    = EI2.COUNTY_CD_BRA
                     and EI2_A.COUNTRY          = EI2.COUNTRY
                     and EI2_A.ESTAB_ID_TYPE_BRA= EI2.ESTAB_ID_TYPE_BRA
                     and EI2_A.EFFDT           <= $RC_EndDate)
end-select
end-procedure Get-Estab-IDs

!*****************************
begin-procedure Get-Resp-Data
#debug show '** Get-Resp-Data **'
#debug show '$GRRF_Repr_Type:   ' $GRRF_Repr_Type
#debug show '$GRRF_Representant:' $GRRF_Representant
#debug show '$GRRF_Responsible: ' $GRRF_Responsible
!*****************************

if ltrim(rtrim($GRRF_Representant, ' '), ' ') = ''
   get $MessageText from arrMessages(4)
   alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
   print $MessageText (+1,28) 
else
   if $GRRF_Repr_Type = '1' and ltrim(rtrim($GRRF_Responsible, ' '), ' ') = '' 

      alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
      get $MessageText from arrMessages(5)
      print $MessageText (+1,28) 
   end-if
end-if

let $Resp_Name = ' '
begin-select
N.NAME_DISPLAY

    let $Resp_Name   = rtrim(&N.NAME_DISPLAY, ' ')
    do Check-Strings ( $Resp_Name , $Resp_Name)

from PS_PERSON_NAME N
where (N.EMPLID = $GRRF_Representant or N.EMPLID = $GRRF_Responsible)
end-select

let $Resp_Email = ' '
begin-select
EM.EMAIL_ADDR

  let $Resp_Email = rtrim(&EM.EMAIL_ADDR,' ')

from PS_EMAIL_ADDRESSES EM
where (EM.EMPLID = $GRRF_Representant or EM.EMPLID = $GRRF_Responsible)
  and EM.E_ADDR_TYPE = 'BUSN'
end-select

let $Rep_Phone = ' '
begin-select
RP.PHONE

  let $Rep_Phone = rtrim(&RP.PHONE,' ')
  do Str-Delete-Chars( $Rep_Phone , '-\/. ' , $PhoneEnd)
  let #Phone         = to_number($PhoneEnd)

  if length($PhoneEnd) <= 8
      alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
      get $MessageText from arrMessages(6)
      print $MessageText (+1,28) 
      print $GRRF_Representant ( , +2)
  end-if

  let $Rep_Phone = edit(#Phone, '099999999999')

from PS_PERSONAL_PHONE RP
where (RP.EMPLID = $GRRF_Representant or RP.EMPLID = $GRRF_Responsible)
and RP.PHONE_TYPE = 'BUSN'
end-select
end-procedure Get-Resp-Data

!******************************
begin-procedure Process-Employees
#debug show '** Process-Employees **'
#debug show '$Tbl-Sel-Cond:  ' $Tbl-Sel-Cond
#debug show '$Empl-Sel-Cond: ' $Empl-Sel-Cond
#debug show '#Rec            ' #Rec
#debug show '$RC_BgnDate:    ' $RC_BgnDate
#debug show '$RC_EndDate:    ' $RC_EndDate
!******************************
let #EmployeesProc  = 0
let $EstabIdAnt     = ''
begin-select
JOB.ESTABID
JOB.EMPLID   &EMPLID
JOB.EMPL_RCD &EMPL_REC
JOB.ACTION   &ACTION
JOB.EFFDT    &EFFDT
JOB.TERMINATION_DT
JJR.CBO_CD_BRA
ETB.ESTABID
ETB.COMP_INS_TYPE_BRA
EID.ESTAB_ID_TYPE_BRA
EID.ESTAB_ID_BRA           
PID.NATIONAL_ID_TYPE
PID.NATIONAL_ID &PERSON_NID
JOB.ACTION_REASON
JOB.REG_TEMP

   let $EmplId             = rtrim(&EMPLID, ' ')
   let #EmplRcd            = &EMPL_REC
   let $JobAction          = &ACTION
   let $ActionReason       = &JOB.ACTION_REASON
   let $JobEffdt           = &EFFDT
   let $JobEffdt1          = &EFFDT
   let $TerminationDate    = &JOB.TERMINATION_DT
   let $National_PIS_PASEP = rtrim(&PERSON_NID, ' ')
   let $Emplid_CBO         = '00' || &JJR.CBO_CD_BRA
   let $Regular-Temporal   = &JOB.REG_TEMP
   
   let $EstabID = ltrim(rtrim(&ETB.ESTABID, ' '), ' ') 
   
   do Str-Delete-Chars($Emplid_CBO, '- ', $Emplid_CBO)

   do Convert-To-DTU-Date($JobEffdt, $JobEffdtDTU)
   do dtu-month-begin($JobEffdtDTU, $BeginDtDTU)
   do Convert-From-DTU-Date($BeginDtDTU, $BeginDt)

   do dtu-month-end($JobEffdtDTU, $EndDateDTU)
   do Convert-From-DTU-Date($EndDateDTU, $EndDate)

   alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
   
   if $National_PIS_PASEP <> ''

     do Get-Employee-NIDs
     #debug show '$National_PIS_PASEP ' $National_PIS_PASEP
     #debug show '$National_PIS       ' $National_PIS
     #debug show '$National_PASEP     ' $National_PASEP
     if ($National_PIS = $National_PIS_PASEP) or ($National_PASEP = $National_PIS_PASEP and length($National_PIS) = 0)
        if $EstabIdAnt <> ltrim(rtrim(&EID.ESTAB_ID_BRA, ' '), ' ') and ltrim(rtrim(&EID.ESTAB_ID_BRA, ' '), ' ') <> ''
          let $EstabIdAnt = ltrim(rtrim(&EID.ESTAB_ID_BRA, ' '), ' ')
          do Write-Reg10
        end-if
           
        let #EmployeesProc      = #EmployeesProc + 1
        print $National_PIS_PASEP (+1,2)
        print $Emplid             ( ,15)
       
        do Get-Employee-Data
        do Write-Reg40 
     end-if
   else
     
     let #EmployeesProc      = #EmployeesProc + 1
     print $National_PIS_PASEP (+1,2)
     print $Emplid             ( ,15)

     get $MessageText from arrMessages(7)
     print $MessageText        ( ,28) 
   end-if
   SHOW '$INSCR_TYPE ' $INSCR_TYPE
   

from PS_JOB JOB LEFT JOIN PS_PERS_NID PID ON PID.EMPLID = JOB.EMPLID
                and PID.COUNTRY = 'BRA'
                and NATIONAL_ID_TYPE in ('PIS','PASEP')
, PS_JOB_JR JJR
, PS_ESTAB_TBL_BRA ETB LEFT JOIN PS_ESTAB_ID_BRA EID ON EID.ESTABID = ETB.ESTABID
                       and EID.EFFDT = ETB.EFFDT
                       and EID.COUNTRY = 'BRA'
                       and EID.COUNTY_CD_BRA = ETB.COUNTY_CD_BRA
                       and EID.ESTAB_ID_TYPE_BRA = $INSCR_TYPE
[$Tbl-Sel-Cond]
where ETB.ESTABID = JOB.ESTABID
  and ETB.EFFDT  = (select MAX(ETB_A.EFFDT)
                    from PS_ESTAB_TBL_BRA ETB_A
                    where ETB_A.ESTABID = ETB.ESTABID
                      and ETB_A.EFFDT  <= $RC_EndDate)
  and JJR.EMPLID = JOB.EMPLID
  and JJR.EMPL_RCD = JOB.EMPL_RCD
  and JJR.EFFDT  = JOB.EFFDT
  and JJR.EFFSEQ = JOB.EFFSEQ
  and JOB.TERMINATION_DT BETWEEN $RC_BgnDate and $RC_EndDate
  and JOB.ACTION || JOB.ACTION_REASON in (select ACTION || ACTION_REASON  
                                            from PS_GPBR_TER_ACTRSN
                                             where GPBR_GRRF_CODE <>'N') 
[$Empl-Sel-Cond]
order by EID.ESTAB_ID_BRA, PID.NATIONAL_ID 
end-select

if #EmployeesProc  = 0
   get $MessageText from arrMessages(8)
   alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
   print $MessageText (+1,28) 
else
   get $MessageText from arrMessages(9)
   alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
   print $MessageText   (+1,28) 
   print #EmployeesProc ( ,+2) edit '0999999'
end-if

end-procedure Process-Employees

!*****************************
begin-procedure Get-Employee-Data
#debug show '*** Get-Employee-Data ***'
#debug show '$EmplId:       ' $EmplId
#debug show '#EmplRcd:      ' #EmplRcd
#debug show '$JobAction:    ' $JobAction
#debug show '$ActionReason: ' $ActionReason
#debug show '$JobEffdt:     ' $JobEffdt
!*****************************
let $GRRF_Empl_Category = '01'
let $Emplid_Birthdate   = ' '
let $Emplid_Sex         = ' '
let $CTPS_Series        = ' '
let $Emplid_Education   = '00'
let $Admission_Dt       = ' '
let $Emplid_FGTS_Dt     = ' '
let #EmplWeeklyHrs      = 0
let $Emplid_WrkHrs      = ' '
let $TermNotifDate      = ' '
let $ServiceTaker       = ' '
let #Days               = 0
let $PriorNotice        = '2'
let $STInscrType        = '0'
let $STInscription      = '00000000000000'
let $Emplid_Name        = ' '
let $TermCode           = ' '
let $TermType           = ' '
let $PrevMonthAmount    = '000000000000000'
let $CurrMonthAmount    = '000000000000000'
let $PrevNotifIndem     = '000000000000000'
let $PrevNotifAmount    = '000000000000000'
let $BankingBalance     = '000000000000000'
let $BankCode           = '000'
let $BankBranchCode     = '0000'
let $BankAccountId      = '0000000000000'
let #Alimony_Sovr       = 0
let #Alimony_Var        = 0
let $AlimonyPercentValue = '00000'
let $AlimonyIndicator   = ' '
let $ContractAlignmentDt = '        '
let $ContractValue      = rpad($Zero,15,'0')
let $PositionReposition = 'N'
Let $HOM_NEW_JOB        = 'N' 
Let $hom_notif_er       = 'N' 
Let $Work_Reduction2hr  = 'N'

! Get Employee Birthdate
begin-select
PER.BIRTHDATE

   let $Emplid_Birthdate   = rtrim(&PER.BIRTHDATE, ' ')

from PS_PERSON PER
where PER.EMPLID = $EmplId
end-select

! Get Employee Sex
begin-select
PDE.SEX

   let $Emplid_Sex         = rtrim(&PDE.SEX, ' ')
   evaluate $Emplid_Sex
   when = 'M'
      let $Emplid_Sex = '1'
   break
   when = 'F'
      let $Emplid_Sex = '2'
   break
   when-other
      let $Emplid_Sex = ' '
      print $EmplId      ( ,15)
      get $MessageText from arrMessages(10)
      alter-printer point-size = #Sizestd  font-type = Proportional font = #FontStd
      print $MessageText ( ,28) 
   end-evaluate

from PS_PERS_DATA_EFFDT PDE
where PDE.EMPLID = $EmplId
  and PDE.EFFDT  = (select MAX(PDE_A.EFFDT)
                    from PS_PERS_DATA_EFFDT PDE_A
                    where PDE_A.EMPLID = PDE.EMPLID
                      and PDE_A.EFFDT <= $RC_EndDate)
end-select

! Get Employee CTPS Serie
begin-select
PBR.CTPS_SERIES_BRA

   let $CTPS_Series = rtrim(&PBR.CTPS_SERIES_BRA, ' ')
   let $CTPS_Series = Edit($CTPS_Series, '00000')   

from PS_GPBR_PRS_NID_VW PBR
where PBR.EMPLID = $EmplId
  and PBR.COUNTRY = 'BRA'
  and (PBR.NATIONAL_ID_TYPE = 'CTPS'
    or PBR.NATIONAL_ID_TYPE = 'CPF')
end-select

! Get Employee Education Level
begin-select
PDB.EDUCATION_LVL_BRA

   let $Emplid_Education   = edit(&PDB.EDUCATION_LVL_BRA, '00')
   
   do GetGRRFCode ($RC_EndDate, $Emplid_Education, $Emplid_Education)
 
from PS_PERS_DATA_BRA PDB
where PDB.EMPLID = $EmplId
  and PDB.EFFDT  = (select MAX(PDB_A.EFFDT)
                    from PS_PERS_DATA_BRA PDB_A
                    where PDB_A.EMPLID = PDB.EMPLID
                      and PDB_A.EFFDT <= $RC_EndDate)
end-select

! Get Employee's Termination And Admission Dates
begin-select
EMP.TERMINATION_DT
EMP.LAST_DATE_WORKED
EMP.HIRE_DT
EMP.REHIRE_DT

  if $TerminationDate = ''
     let $TerminationDate = &EMP.LAST_DATE_WORKED
  end-if

  let $HireDate   = &EMP.HIRE_DT
  let $RehireDate = &EMP.REHIRE_DT

  if $RehireDate <> '' and $HireDate <> ''
    if datediff(&EMP.REHIRE_DT, &EMP.HIRE_DT, 'day') > 0
       let $Admission_Dt = $RehireDate
    else
       let $Admission_Dt = $HireDate
    end-if
  else
    let $Admission_Dt = $HireDate
  end-if
  do Date-To-BrazilianFmt($Admission_Dt, $Admission_Dt_Bra)

from PS_EMPLOYMENT EMP
where EMP.EMPLID   = $EmplId
  and EMP.EMPL_RCD = #EmplRcd
end-select



! Get Contract Number when employee is terminated before its contract end date.
#debug show '$TerminationDate ' $TerminationDate
#debug show '$EmplId ' $EmplId
let $ContractNumber = ''
let $ContractEndDt  = ''
begin-select
CDT.CONTRACT_NUM
CDT.CONTRACT_END_DT

   let $ContractNumber = rtrim(&CDT.CONTRACT_NUM, ' ')
   let $ContractEndDt  = rtrim(&CDT.CONTRACT_END_DT, ' ')

from PS_CONTRACT_DATA CDT
, PS_JOB JCD
where CDT.EMPLID          = JCD.EMPLID
and CDT.CONTRACT_BEGIN_DT = JCD.EFFDT

and CDT.CONTRACT_STATUS   = 'A'
and JCD.EMPLID            = $EmplId
and JCD.EMPL_RCD          = #EmplRcd 
and JCD.EFFSEQ            = (select MAX(EFFSEQ)
                              from PS_JOB
                             where EMPLID   = JCD.EMPLID
                               and EMPL_RCD = JCD.EMPL_RCD
                               and EFFDT    = JCD.EFFDT)
and JCD.ACTION in ('HIR','REH')
end-select
#debug show '$ContractNumber ' $ContractNumber

! Get Employee Termination Type
let $PsTermType = '  '
begin-select
GTA.GPBR_TERM_TYPE

  let $PSTermType     = rtrim(&GTA.GPBR_TERM_TYPE, ' ')
  let $ReportCode     = 'GPBRRC02TERMTYPE'
  do GetTerminationCode($PsTermType, $ReportCode, $curr_language_cd, $TermType, $TermDescr)
  
  let $ReportCode     = 'GPBRRC02TERMCODE'
  do GetTerminationCode($PsTermType, $ReportCode, $curr_language_cd, $TermCode, $TermDescr)
  
from PS_GPBR_TER_ACTRSN GTA
where GTA.ACTION        =$JobAction
  and GTA.ACTION_REASON =$ActionReason
  and GTA.GPBR_TERM_VERSION = (select D.SOVR_VAL_CHAR
                                 from PS_GP_PYE_SOVR D
                                where D.EMPLID = $Emplid
                                  and D.EMPL_RCD = #EmplRcd 
                                  and D.PIN_NUM  = (select DD.PIN_NUM
                                                      from PS_GP_PIN DD
                                                     where DD.PIN_CODE = $pin_code)
                                  and D.BGN_DT   = (select MAX(BGN_DT)
                                                      from PS_GP_PYE_SOVR
                                                     where EMPLID   = D.EMPLID
                                                       and EMPL_RCD = D.EMPL_RCD
                                                       and PIN_NUM  = D.PIN_NUM
                                                       and BGN_DT  <= $JobEffdt1))
end-select

! Get Employee FGTS Inscription Date, Weekly Hours, Termination Notification Date
begin-select
GPP.GPBR_FGTS_DT
GPP.GPBR_WEEKLY_HOURS
GPP.GPBR_TERM_NOTIF
GPP.GPBR_SERVICE_TAKER
GPP.GPBR_HOM_NEW_JOB
GPP.GPBR_HOM_NOTIF_ER
GPP.GPBR_NOTICE_COMPL
GPP.GPBR_WORK_REDUC

   let $Emplid_FGTS_Dt     = &GPP.GPBR_FGTS_DT
   let #EmplWeeklyHrs      = &GPP.GPBR_WEEKLY_HOURS
   let $Emplid_WrkHrs      = edit(#EmplWeeklyHrs, '00')
   let $TermNotifDate      = &GPP.GPBR_TERM_NOTIF
   let $ServiceTaker       = rtrim(&GPP.GPBR_SERVICE_TAKER, ' ')
   let $HOM_NEW_JOB        = &GPP.GPBR_HOM_NEW_JOB !Reduction 7Days
   let $hom_notif_er       = &GPP.GPBR_HOM_NOTIF_ER !Excused of Notification Period
   Let $Notice_Compliance  = rtrim(&GPP.GPBR_NOTICE_COMPL, ' ')
   Let $Work_Reduction2hr  = Rtrim(&GPP.GPBR_WORK_REDUC, ' ')
   
   if $TermNotifDate <> '' and $TerminationDate <> ''
     let #Days_Aft         = datediff(&GPP.GPBR_TERM_NOTIF, &EMP.TERMINATION_DT, 'day') 
     let #Days_Bef         = datediff(&EMP.TERMINATION_DT, &GPP.GPBR_TERM_NOTIF, 'day') 
   else
     let #Days             = 0 
     let #Days_Aft         = 0 
     let #Days_Bef         = 0 
   end-if
      
       If ($Work_Reduction2hr = 'Y' or $HOM_NEW_JOB = 'Y') and $Notice_Compliance <> '0'
         Let $PriorNotice = '3' 
       End-If
       
       If ($Work_Reduction2hr = 'Y' or $HOM_NEW_JOB = 'Y') and $Notice_Compliance = '0'
         Let $PriorNotice = '1' 
       End-If
       
       If $hom_notif_er = 'Y'
         Let $PriorNotice = '3' 
       End-If
       
                   
      !Exceptions to be treated as hardcoded:
      if $PsTermType = '25'
        let $PriorNotice = '3'
      end-if
      if $PsTermType = '10' or $PsTermType = '14' or $PsTermType = '24' 
        let $PriorNotice = '1'
      end-if
      
       !Prev Notofication Date Null/ Prev Notification Date = Term Date 
       if (&GPP.GPBR_TERM_NOTIF = '') or (&GPP.GPBR_TERM_NOTIF = &EMP.TERMINATION_DT )
           let $PriorNotice = '2'
       end-if
       
      if $HOM_NEW_JOB ='N' and $hom_notif_er='N' and $Work_Reduction2hr ='N' and $TermNotifDate <> ''
       let $PriorNotice = '2' 
      end-if 
     
from PS_GPBR_PAYEE_PARM GPP
where GPP.EMPLID    = $EmplId
  and GPP.EMPL_RCD  = #EmplRcd
  and GPP.BGN_DT    = (select MAX(GPP_A.BGN_DT)
                       from PS_GPBR_PAYEE_PARM GPP_A
                       where GPP_A.EMPLID  = GPP.EMPLID
                         and GPP_A.BGN_DT <= $RC_EndDate)
end-select
#debug show '$TermNotifDate   '  $TermNotifDate
#debug show '$TerminationDate ' $TerminationDate
#debug show '#Days            ' #Days
#debug show '$ContractNumber  ' $ContractNumber
#debug show '$ContractEndDt   ' $ContractEndDt
#debug show '$TerminationDate ' $TerminationDate
#debug show '$PriorNotice     ' $PriorNotice

! Get Employee Service Taker Information
begin-select
GST.GPBR_TAKE_INS_TYPE
GST.GPBR_TAKER_INSCR

   let $STInscrType   = rtrim(&GST.GPBR_TAKE_INS_TYPE, ' ')
   let $STInscription = edit(rtrim(&GST.GPBR_TAKER_INSCR, ' '), '00000000000000')

from PS_GPBR_SERV_TAKER GST
where GST.GPBR_SERVICE_TAKER = $ServiceTaker
  and GST.EFFDT = (select MAX(GST_A.EFFDT)
                   from PS_GPBR_SERV_TAKER GST_A
                   where GST_A.GPBR_SERVICE_TAKER = GST.GPBR_SERVICE_TAKER
                     and GST_A.EFFDT <= $RC_EndDate)
end-select

! Get Employee Name
begin-select
PPN.NAME_DISPLAY

   let $Emplid_Name        = rtrim(&PPN.NAME_DISPLAY, ' ')
   do Check-Strings ($Emplid_Name , $Emplid_Name)
   do Check-Strings ($Emplid_Name , $Emplid_Name)

from PS_PERSON_NAME PPN
where PPN.EMPLID = $EmplId
end-select

! Get Employee Previous Notification Amount, Banking Balance
if $RC_CompRpt = 'Y'
   do Calc-Comp-Data
else
   do CalculationData
end-if

do Str-Delete-Chars( $PrevMonthAmount, '.' , $PrevMonthAmount )
do Str-Delete-Chars( $CurrMonthAmount, '.' , $CurrMonthAmount )
do Str-Delete-Chars( $PrevNotifIndem , '.' , $PrevNotifIndem )
do Str-Delete-Chars( $BankingBalance , '.' , $BankingBalance )

#debug show '$PrevMonthAmount ' $PrevMonthAmount
#debug show '$CurrMonthAmount ' $CurrMonthAmount
#debug show '$PrevNotifIndem  ' $PrevNotifIndem
#debug show '$BankingBalance  ' $BankingBalance

! Get Employee's Bank Code, Branch, Account
begin-select
BET.ALT_BANK_CD
PBA.BRANCH_EC_CD
PBA.ACCOUNT_EC_ID

   let $BankCode       = rtrim(&BET.ALT_BANK_CD, ' ')
   let $BankBranchCode = rtrim(&PBA.BRANCH_EC_CD, ' ')
   let $BankAccountId  = rtrim(&PBA.ACCOUNT_EC_ID, ' ')

   do RightStr( $BankCode, 3, $BankCode)
   do LeftStr ( $BankBranchCode, 4, $BankBranchCode)
   do LeftStr ( $BankAccountId, 13, $BankAccountId)

   let $BankCode       = lpad($BankCode, 3, '0')
   let $BankBranchCode = lpad($BankBranchCode, 4, '0')
   do RightStr( $BankAccountId, 1, $VerifierDigit)
   if instr('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', $VerifierDigit, 1) > 0
      let #BAID_Size = length($BankAccountId) - 1
      do LeftStr ( $BankAccountId, #BAID_Size, $BankAccountId)
      let $BankAccountId = $BankAccountId || '0'
   end-if
   let $BankAccountId = lpad($BankAccountId, 13, '0')

from PS_PYE_BANKACCT PBA
, PS_BANK_EC_TBL BET
where PBA.EMPLID= $EmplId
and PBA.COUNTRY_CD = 'BRA'
and PBA.EFF_STATUS = 'A'
and BET.BANK_CD    = PBA.BANK_CD
and BET.COUNTRY_CD = PBA.COUNTRY_CD
end-select

! Get Employee Alimony Percentage
begin-select
GOS.SOVR_VAL_NUM

   let #Alimony_Sovr = &GOS.SOVR_VAL_NUM

from PS_GP_PYE_OVR_SOVR GOS
where GOS.EMPLID = $Emplid
  and GOS.EMPL_RCD = #EmplRcd
  and GOS.PIN_NUM  = #RC_Alimony
  and GOS.BGN_DT  <= (select MAX(GOS_A.BGN_DT)
                      from PS_GP_PYE_OVR_SOVR GOS_A
                      where GOS_A.EMPLID   = GOS.EMPLID
                        and GOS_A.EMPL_RCD = GOS.EMPL_RCD
                        and GOS_A.BGN_DT  <= $TerminationDate)
  and (GOS.END_DT >= (select MAX(GOS_B.END_DT)
                      from PS_GP_PYE_OVR_SOVR GOS_B
                      where GOS_B.EMPLID   = GOS.EMPLID
                        and GOS_B.EMPL_RCD = GOS.EMPL_RCD
                        and GOS_B.END_DT  >= $TerminationDate)
  or  GOS.END_DT IS NULL)
end-select

if #Alimony_Sovr = 0

! Get Employee Alimony Percentage
begin-select
GSO.SOVR_VAL_NUM

   let #Alimony_Sovr = &GSO.SOVR_VAL_NUM

from PS_GP_PYE_SOVR GSO
where GSO.EMPLID = $Emplid
  and GSO.EMPL_RCD = #EmplRcd
  and GSO.PIN_NUM  = #RC_Alimony
  and GSO.BGN_DT  <= (select MAX(GSO_A.BGN_DT)
                      from PS_GP_PYE_SOVR GSO_A
                      where GSO_A.EMPLID   = GSO.EMPLID
                        and GSO_A.EMPL_RCD = GSO.EMPL_RCD
                        and GSO_A.BGN_DT  <= $TerminationDate)
and (GSO.END_DT >= (select MAX(GSO_B.END_DT)
                    from PS_GP_PYE_SOVR GSO_B
                    where GSO_B.EMPLID   = GSO.EMPLID
                      and GSO_B.EMPL_RCD = GSO.EMPL_RCD
                      and GSO_B.END_DT  >= $TerminationDate)
or   GSO.END_DT IS NULL)
end-select

end-if

! Get Employee Alimony Percentage
begin-select
GVA.DECIMAL_VALUE

  let #Alimony_Var = &GVA.DECIMAL_VALUE

from PS_GP_VARIABLE GVA
where GVA.PIN_NUM = #RC_Alimony
  and GVA.EFFDT  <= (select MAX(GVA_A.EFFDT)
                     from PS_GP_VARIABLE GVA_A
                     where GVA_A.PIN_NUM = GVA.PIN_NUM
                       and GVA_A.EFFDT  <= $TerminationDate)
end-select



!****************** Get SEFIP Category

Let $GRRF_Empl_Category = ''
begin-SELECT 
SEF.SEFIP_CATEGORY_BRA
  Let $GRRF_Empl_Category = &SEF.SEFIP_CATEGORY_BRA
FROM PS_JOB_JR SEF 
WHERE SEF.EMPLID=$Emplid
and   SEF.EMPL_RCD=#Empl_Rcd  !Added to validate multiple jobs
AND   SEF.EFFDT  =(SELECT MAX(G.EFFDT) 
                  FROM PS_JOB_JR G 
                  WHERE SEF.EMPLID = G.EMPLID
                  AND SEF.EMPL_RCD = G.EMPL_RCD 
                  AND G.EFFDT <= SEF.EFFDT)
AND   SEF.EFFSEQ =(SELECT MAX(GSEF.EFFSEQ) 
                  FROM PS_JOB_JR GSEF 
                  WHERE SEF.EMPLID=GSEF.EMPLID 
                  and GSEF.EMPL_RCD=#Empl_Rcd  !Added to validate multiple jobs
                  AND GSEF.EFFDT=SEF.EFFDT )
end-select



if #Alimony_Sovr <> 0
  let #Alimony_Var = #Alimony_Sovr
end-if
let #Alimony_Var         = #Alimony_Var * 100
let $AlimonyPercentValue = edit(#Alimony_Var, '00000')
let $AlimonyValue        = rpad($Zero,15,'0')
if #Alimony_Var > 0
   let $AlimonyIndicator = 'P'
else
   let $AlimonyIndicator = 'N'
end-if

end-procedure Get-Employee-Data

!*****************************
begin-procedure Calc-Comp-Data
#debug show '** Calc-Comp-Data **'
#debug show '$EmplId  ' $EmplId
#debug show '#EmplRcd ' #EmplRcd
!*****************************
begin-select
COMPL.GPBR_PR_FGTS_BASE
COMPL.GPBR_TDY_FGTS_BASE
COMPL.GPBR_COMP_FGTS_BSE
COMPL.GPBR_PREV_NTF_AMT
COMPL.GPBR_BANKING_BLNCE
COMPL.GPBR_FGTS_PCT

   let $PrevMonthAmount   = edit(&COMPL.GPBR_PR_FGTS_BASE , '0000000000000.00')
   let $CurrMonthAmount   = edit(&COMPL.GPBR_TDY_FGTS_BASE, '0000000000000.00')
   let $PrevNotifIndem    = edit(&COMPL.GPBR_COMP_FGTS_BSE, '0000000000000.00')
   let $PrevNotifAmount   = edit(&COMPL.GPBR_PREV_NTF_AMT , '0000000000000.00')
   let #BankingBalance    = &COMPL.GPBR_BANKING_BLNCE - &COMPL.GPBR_FGTS_PCT - &COMPL.GPBR_PREV_NTF_AMT
   if #BankingBalance > 0.01
     let $BankingBalance    = edit(#BankingBalance, '0000000000000.00')
   end-if

from PS_GPBR_GRFC_WA COMPL
   , PS_GP_RSLT_DELTA DEL
   , PS_GP_PYE_SEG_STAT SST
where COMPL.EMPLID       = $EmplId
  and COMPL.EMPL_RCD     = #EmplRcd
  and COMPL.GP_PAYGROUP  = DEL.FWD2_PAYGROUP
  and COMPL.CAL_ID       = DEL.FWD2_CAL_ID
  and COMPL.CAL_RUN_ID   = DEL.FWD2_CAL_RUN_ID
  and COMPL.RSLT_SEG_NUM = DEL.RSLT_SEG_NUM
  and COMPL.EMPLID       = DEL.EMPLID
  and COMPL.EMPL_RCD     = DEL.EMPL_RCD
  and   DEL.FWD2_CAL_ID   <> ' '
  and   DEL.GP_PAYGROUP   = SST.GP_PAYGROUP
  and   DEL.CAL_ID        = SST.CAL_ID
  and   DEL.CAL_RUN_ID    = SST.CAL_RUN_ID
  and   DEL.EMPLID        = SST.EMPLID
  and   DEL.EMPL_RCD      = SST.EMPL_RCD
  and   SST.RSLT_SEG_NUM  =  (select MAX(RSLT_SEG_NUM)
                             from PS_GP_PYE_SEG_STAT
                             where EMPLID          = SST.EMPLID
                             and   EMPL_RCD        = SST.EMPL_RCD
                             and   GP_PAYGROUP     = SST.GP_PAYGROUP
                             and   CAL_ID          = SST.CAL_ID
                             and   CAL_RUN_ID      = SST.CAL_RUN_ID
                             and   ORIG_CAL_RUN_ID = SST.ORIG_CAL_RUN_ID)
  and   SST.RSLT_VER_NUM  = (select MAX(RSLT_VER_NUM)
                             from PS_GP_PYE_SEG_STAT
                             where EMPLID          = SST.EMPLID
                             and EMPL_RCD          = SST.EMPL_RCD
                             and RSLT_SEG_NUM      = SST.RSLT_SEG_NUM
                             and GP_PAYGROUP       = SST.GP_PAYGROUP
                             and CAL_ID            = SST.CAL_ID)
  and   SST.RSLT_REV_NUM  = (select MAX(RSLT_REV_NUM)
                             from PS_GP_PYE_SEG_STAT
                             where EMPLID          = SST.EMPLID
                             and EMPL_RCD          = SST.EMPL_RCD
                             and RSLT_SEG_NUM      = SST.RSLT_SEG_NUM
                             and RSLT_VER_NUM      = SST.RSLT_VER_NUM
                             and GP_PAYGROUP       = SST.GP_PAYGROUP
                             and CAL_ID            = SST.CAL_ID)
end-select
end-procedure Calc-Comp-Data

!*****************************
Begin-Procedure CalculationData
#debug show '** CalculationData **'
#debug show '    $Emplid          :' $Emplid
#debug show '    #EmplRcd         :' #EmplRcd
#debug show '    $TerminationDate :' $TerminationDate
!*****************************
Do Convert-To-DTU-Date($TerminationDate, $TermDt_DTU)
do dtu-month-end($TermDt_DTU, $TermEndMonthDt_DTU)
do Convert-From-DTU-Date($TermEndMonthDt_DTU,$TermEndMonthDt)
Begin-Select
REMUN.GPBR_PR_FGTS_BASE
REMUN.GPBR_TDY_FGTS_BASE
REMUN.GPBR_COMP_FGTS_BSE
REMUN.GPBR_PREV_NTF_AMT
REMUN.GPBR_BANKING_BLNCE
REMUN.GPBR_FGTS_PCT

   Let $PrevMonthAmount   = Edit(&REMUN.GPBR_PR_FGTS_BASE , '0000000000000.00')
   Let $CurrMonthAmount   = Edit(&REMUN.GPBR_TDY_FGTS_BASE, '0000000000000.00')
   Let $PrevNotifIndem    = Edit(&REMUN.GPBR_COMP_FGTS_BSE, '0000000000000.00')
   Let $PrevNotifAmount   = Edit(&REMUN.GPBR_PREV_NTF_AMT , '0000000000000.00')
   Let #BankingBalance    = &REMUN.GPBR_BANKING_BLNCE - &REMUN.GPBR_FGTS_PCT - &REMUN.GPBR_PREV_NTF_AMT
   If #BankingBalance > 0
     Let $BankingBalance    = Edit(#BankingBalance, '0000000000000.00')
   End-If

FROM PS_GPBR_GRFC_WA REMUN
   , PS_GP_PYE_SEG_STAT SEG
WHERE REMUN.EMPLID   = $Emplid
AND   REMUN.EMPL_RCD = #EmplRcd
!>AND   REMUN.EFFDT    = (SELECT MAX(R.EFFDT)
!>                        FROM PS_GPBR_GRFC_WA R
!>                        WHERE R.EMPLID   = REMUN.EMPLID
!>                        AND   R.EMPL_RCD = REMUN.EMPL_RCD
!>                        AND   R.EFFDT   <= $TermEndMonthDt)
AND   REMUN.CAL_RUN_ID = (select A.CAL_RUN_ID 
                          from PS_GP_RSLT_PIN A , PS_GP_PYE_PRC_STAT B  
                          where A.EMPLID=REMUN.EMPLID
                           and A.EMPL_RCD=REMUN.EMPL_RCD
                           and A.PIN_NUM=(select c.pin_num from ps_gp_pin c where c.pin_code='FP GC TERM EXECUTA BRA')
                           and A.CALC_RSLT_VAL=1
                           and A.SLICE_END_DT =(select MAX(R.SLICE_END_DT)
                                                 from PS_GP_RSLT_PIN R
                                                 where R.EMPLID   = REMUN.EMPLID
                                                   and   R.EMPL_RCD = REMUN.EMPL_RCD
                                                   and   R.PIN_NUM  = A.PIN_NUM
                                                   and   R.CALC_RSLT_VAL=A.CALC_RSLT_VAL
                                                   and   R.SLICE_END_DT   <= $RC_EndDate) 
                           and A.SLICE_BGN_DT>=$RC_BgnDate
                           and A.SLICE_END_DT<=$RC_EndDate
                           and B.EMPLID=A.EMPLID
                           and B.EMPL_RCD=A.EMPL_RCD
                           and A.CAL_RUN_ID=B.CAL_RUN_ID
                           AND B.CAL_RUN_ID=B.ORIG_CAL_RUN_ID
                           and B.RUN_TYPE='KR RESCISA')                            
AND   REMUN.GP_PAYGROUP = SEG.GP_PAYGROUP
AND   REMUN.CAL_ID      = SEG.CAL_ID
AND   REMUN.CAL_RUN_ID  = SEG.CAL_RUN_ID
AND   REMUN.RSLT_SEG_NUM= SEG.RSLT_SEG_NUM
AND   REMUN.EMPLID      = SEG.EMPLID
AND   REMUN.EMPL_RCD    = SEG.EMPL_RCD
AND   SEG.RSLT_SEG_NUM  = (SELECT MAX(RSLT_SEG_NUM)
                           FROM PS_GP_PYE_SEG_STAT
                           WHERE EMPLID          = SEG.EMPLID
                           AND   CAL_RUN_ID      = SEG.CAL_RUN_ID
                           AND   EMPL_RCD        = SEG.EMPL_RCD
                           AND   GP_PAYGROUP     = SEG.GP_PAYGROUP
                           AND   CAL_ID          = SEG.CAL_ID
                           AND   ORIG_CAL_RUN_ID = SEG.ORIG_CAL_RUN_ID)
AND   SEG.RSLT_VER_NUM  = (SELECT MAX(RSLT_VER_NUM)
                           FROM PS_GP_PYE_SEG_STAT
                           WHERE EMPLID          = SEG.EMPLID
                           AND EMPL_RCD          = SEG.EMPL_RCD
                           AND GP_PAYGROUP       = SEG.GP_PAYGROUP
                           AND CAL_ID            = SEG.CAL_ID)
AND   SEG.RSLT_REV_NUM  = (SELECT MAX(RSLT_REV_NUM)
                           FROM PS_GP_PYE_SEG_STAT
                           WHERE EMPLID          = SEG.EMPLID
                           AND EMPL_RCD          = SEG.EMPL_RCD
                           AND RSLT_VER_NUM      = SEG.RSLT_VER_NUM
                           AND CAL_RUN_ID        = SEG.ORIG_CAL_RUN_ID
                           AND GP_PAYGROUP       = SEG.GP_PAYGROUP
                           AND CAL_ID            = SEG.CAL_ID)
End-Select
End-Procedure CalculationData

!*****************************
begin-procedure Write-Reg00
#debug show '** Write-Reg00 **'
!*****************************
move '00' to $Reg00
let $ShipType   = '2'  !Tipo de Remessa: 2 (GRRF ), 4 (Comunicar movimentação), 5 (CSE-Extrato Rescisório), 6 (Emissão do TRCT), 7 (Simular cálculo GRRF)

do Date-To-BrazilianFmt($RC_ReportDate, $GRRF_Report_Data_Bra)
write 1 from $Reg00:2                 -
             $Blank:51                -
             $ShipType:1              -
             $Comp_Inscr_Type:1       -
             $Estab_CNPJ_CEI:14       -
             $CompanyLegalName:30     -
             $Resp_Name:20            -
             $Estab_Address:50        -
             $Estab_Addr4:20          -
             $Estab_Postal:8          -
             $Estab_City:20           -
             $Estab_State:2           -
             $Rep_Phone:12            -
             $Resp_Email:60           -
             $GRRF_Report_Data_Bra:8  -
             $Blank:60                -
             '*':1
end-procedure Write-Reg00

!*****************************
begin-procedure Write-Reg10
#debug show '** Write-Reg10 **'
#debug show '$EstabID ' $EstabID
!*****************************
let $EstabFilter = 'AND PET.ESTABID = ' || $Quote || $EstabID || $Quote
if #EmployeesProc  > 80 
   new-page
end-if

Let $Registro = '10'

do Get-Company-Estab
do Get-Estab-IDs
!do Get-Estab-descr

move '10' to $Reg10
let $Zeroes = rpad($Zero,50,'0')

let $Estab_CNAE = edit($Estab_CNAE, '0000000')

write 1 from $Reg10:2                 -
             $Comp_Inscr_Type:1       -
             $Estab_CNPJ_CEI:14       -
             $Zeroes:36               -
             $CompanyLegalName:40     -
             $Estab_Address:50        -
             $Estab_Addr4:20          -
             $Estab_Postal:8          -
             $Estab_City:20           -
             $Estab_State:2           -
             $Reg10_Phone:12          -
             $Estab_CNAE:7            -
             $Simples_Option:1        -
             $FPAS_CD_Bra:3           -
             $Blank:143               -
             '*':1
end-procedure Write-Reg10

!*****************************
begin-procedure Write-Reg40
#debug show '*** Write-Reg40 ***'
!*****************************
move '40' to $Reg40

do Date-To-BrazilianFmt($Emplid_Birthdate, $Emplid_Birthdate_Bra)
do Date-To-BrazilianFmt($TerminationDate, $Term_Date_Bra)
do Date-To-BrazilianFmt($TermNotifDate, $Term_Notif_Bra)
do Date-To-BrazilianFmt($Emplid_FGTS_Dt, $Emplid_FGTS_Dt_Bra)

if $TermType = 'I3'
   !Let $PriorNotice = '1' 
end-if

evaluate $PriorNotice
when = '1'
 break
when = '3'
   let $PrevNotifIndem     = '000000000000000' 
break
when = '2'
   let $Term_Notif_Bra     = '        '
break
end-evaluate

write 1 from $Reg40:2                 -
             $Comp_Inscr_Type:1       -
             $Estab_CNPJ_CEI:14       -
             $STInscrType:1           -
             $STInscription:14        -
             $National_PIS_PASEP:11   -
             $Admission_Dt_Bra:8      -
             $GRRF_Empl_Category:2    -
             $Emplid_Name:70          -
             $National_CTPS:7         -
             $CTPS_Series:5           -
             $Emplid_Sex:1            -
             $Emplid_Education:2      -
             $Emplid_Birthdate_Bra:8  -
             $Emplid_WrkHrs:2         -
             $Emplid_CBO:6            -
             $Emplid_FGTS_Dt_Bra:8    -
             $TermType:2              -
             $Term_Date_Bra:8         -
             $TermCode:3              -
             $PriorNotice:1           -
             $Term_Notif_Bra:8        -
             $PositionReposition:1    -
             $ContractAlignmentDt:8   -
             $ContractValue:15        -
             $PrevMonthAmount:15      -
             $CurrMonthAmount:15      -
             $PrevNotifIndem:15       -
             $AlimonyIndicator:1      -
             $AlimonyPercentValue:5   -
             $AlimonyValue:15         -
             $National_CPF:11         -
             $BankCode:3              -
             $BankBranchCode:4        -
             $BankAccountId:13        -
             $BankingBalance:15       -
             $Blank:39                -
             '*':1
end-procedure Write-Reg40
!*****************************
begin-procedure Get-Earnings-Value
#debug show '*** Get-Earnings-Value ***'
!*****************************
begin-select
GP3.PIN_NUM
SUM(GE3.CALC_RSLT_VAL + GE3.CALC_ADJ_VAL) &VALUEREGISTRY

   let #ValueRegistry = &VALUEREGISTRY

from PS_GPBR_PARM_GRRF3 GP3
   , PS_GP_RSLT_SEG_VW  GR3
   , PS_GP_RSLT_ERN_DED GE3
where GP3.COMPANY         = $Company
  and GP3.EFFDT           = (select MAX(GP3_A.EFFDT)
                             from PS_GPBR_PARM_GRRF1 GP3_A
                             where GP3_A.COMPANY = GP3.COMPANY
                               and GP3_A.EFFDT  <= $EndDate)
  and GR3.EMPLID          = $Emplid
  and GR3.EMPL_RCD        = #EmplRcd
  and GR3.CALC_TYPE       = 'P'
  and GR3.RSLT_VER_NUM    = (select MAX(GR3_A.RSLT_VER_NUM)
                             from PS_GP_RSLT_SEG_VW GR3_A
                             where GR3.EMPLID   = GR3_A.EMPLID
                               and GR3.EMPL_RCD = GR3_A.EMPL_RCD
                               and GR3.CAL_ID   = GR3_A.CAL_ID )
  and GR3.RSLT_REV_NUM    = 1
  and GR3.CALC_ACTION    <> 'V'
  and GR3.PYE_CALC_STAT  >= '50'
  and GR3.EMPLID          = GE3.EMPLID
  and GR3.EMPL_RCD        = GE3.EMPL_RCD
  and GR3.CAL_RUN_ID      = GE3.CAL_RUN_ID
  and GR3.GP_PAYGROUP     = GE3.GP_PAYGROUP
  and GR3.CAL_ID          = GE3.CAL_ID
  and GR3.ORIG_CAL_RUN_ID = GE3.ORIG_CAL_RUN_ID
  and GR3.RSLT_SEG_NUM    = GE3.RSLT_SEG_NUM
  and GE3.SLICE_BGN_DT   >= $Acc_Date
  and GE3.SLICE_BGN_DT   <= $EndDate
  and GE3.PIN_NUM         = GP3.PIN_NUM
group by GP3.PIN_NUM
end-select
end-procedure Get-Earnings-Value
!*****************************
begin-procedure Write-Reg90
#debug show '** Write-Reg90 **'
!*****************************
move '90' to $Reg90
move ' '  to $Blank
let $nines = '9'
let $Fill90 = rpad($nines,51,'9')

write 1 from $Reg90:2     -
             $Fill90:51   -
             $Blank:306   -
             '*':1
end-procedure Write-Reg90

!*****************************
begin-procedure Get-Employee-NIDs
!   C-RES   Militar Certificate
!   CPF     Person Registry / Digital CTPS
! * CTPS    Work Card
!   ESTRAN  IDENTIFICAÇÃO DE ESTRANGEIRO
! / PASEP   PASEP
! * PIS     PIS
! * CAIXA   CAIXA
!   RG      General Registry
!   TIT-EL  Voter Registratrion Card
#debug show '** Get-Employee-NIDs **'
#debug show '$Emplid ' $Emplid
!*****************************
move '' to $National_PIS
move '' to $National_PASEP
move '' to $National_CTPS
move '' to $National_CAIXA
move '' to $National_CPF
begin-select
NID.EMPLID
NID.NATIONAL_ID_TYPE
NID.NATIONAL_ID

  let $National_Id_Type = rtrim(&NID.NATIONAL_ID_TYPE,' ')
  let $National_Id = rtrim(&NID.NATIONAL_ID,' ')

  evaluate $National_Id_Type
  when = 'PIS'
     let $National_PIS   = $National_Id
  break
  when = 'PASEP'
     let $National_PASEP = $National_Id
  break
  when = 'CTPS'
     let $National_CTPS  = $National_Id
     let $National_CTPS  = edit($National_CTPS, '0000000')
  break
  when = 'CAIXA'
     let $National_CAIXA = $National_Id
  break
  when = 'CPF'
     let $National_CPF   = $National_Id
     if $National_CTPS = '' ! Digital CTPS
        let $National_CTPS = Substr($National_Id, 1, 7)
        let $National_CTPS = edit($National_CTPS, '0000000')
     end-if
  break
  end-evaluate

from PS_PERS_NID NID
where NID.EMPLID  = $Emplid
  and NID.COUNTRY = 'BRA'
  and NID.NATIONAL_ID_TYPE in ('CAIXA','CTPS','PIS','PASEP', 'CPF')
end-select
end-procedure Get-Employee-NIDs

!*****************************
!*** Change non ascii characters to its ascii equivalent.
begin-procedure Check-Strings( $StringIn , :$StringOut )
#debug show '** Check-Strings **'
!*****************************
let $StringIn  = ltrim(rtrim($StringIn, ' '),' ')
let #I = 1
let $StringOut = ''
let #Len = length($StringIn)
let $Test_Char1 = ''
let $Test_Char2 = ''
let $Test_Char3 = ''

while #I  <= #Len
   let $Test_Char    = substr($StringIn,#I, 1)
   let $Test_Char3   = $Test_Char2
   let $Test_Char2   = $Test_Char1
   let $Test_Char1   = $Test_Char
   if ($Test_Char3 = $Test_Char2 and $Test_Char2 = $Test_Char1) or ($Test_Char2 = $Test_Char1 and $Test_Char1 = ' ')
      let $Test_Char  = ''
   end-if
   let $Found = 'N'
   let #Test_Code = ascii(upper($Test_Char))
   if (#Test_Code > 64 and #Test_Code < 91) or (#Test_Code > 47 and #Test_Code < 58)
      let $StringOut = $StringOut || upper($Test_Char)
      let $Found = 'Y'
   end-if

   if ($Found = 'N')
      evaluate $Test_Char
        when = 'é'
        when = 'ê'
        when = 'ë'
        when = 'è'
        when = 'É'
        when = 'Ê'
        when = 'Ë'
        when = 'È'
          let $Test_Char = 'E'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'á'
        when = 'â'
        when = 'ä'
        when = 'à'
        when = 'å'
        when = 'ã'
        when = 'Á'
        when = 'Â'
        when = 'Ä'
        when = 'À'
        when = 'Å'
        when = 'Ã'
          let $Test_Char = 'A'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ï'
        when = 'î'
        when = 'ì'
        when = 'í'
        when = 'Ï'
        when = 'Î'
        when = 'Ì'
        when = 'Í'
          let $Test_Char = 'I'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ô'
        when = 'ö'
        when = 'ò'
        when = 'Ö'
        when = 'ó'
        when = 'Ô'
        when = 'Ö'
        when = 'Ò'
        when = 'Ö'
        when = 'Ó'
          let $Test_Char = 'O'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ü'
        when = 'û'
        when = 'ù'
        when = 'ú'
        when = 'Ü'
        when = 'Û'
        when = 'Ù'
        when = 'Ú'
          let $Test_Char = 'U'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'ñ'
        when = 'Ñ'
          let $Test_Char = 'N'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = 'Ç'
        when = 'ç'
          let $Test_Char = 'C'
          let $StringOut  = $StringOut || $Test_Char
          break
        when = ' '
        when = '-'
          let $Test_Char = ' '
          let $StringOut  = $StringOut || $Test_Char
        when-other
          break
      end-evaluate
    end-if
    add 1 to #I
end-while
let $StringIn  = ''
end-procedure Check-Strings

!*****************************
begin-procedure FILL_LEADING ( $StringIn, $FillChar , #FinalLen, :$SringOut )
#debug show '** FILL_LEADING **'
!*****************************
  let $FieldIni = ltrim(rtrim($StringIn,' '), ' ')
  let #FieldLen = length($FieldIni)
  let #SPACES = #FinalLen - #FieldLen

  let #CONT = 1
  let $SringOut = ''
  while #CONT <= #SPACES
      let $SringOut = $SringOut || $FillChar
      add 1 to #CONT
  end-while

  let $SringOut = $SringOut || $FieldIni
end-procedure FILL_LEADING

!*****************************
!*** Delete non-required chars ($sdc_Chars) from a string ($sdc_StringIn) ***
!*** and put the result in ouput ($sdc_StringOut) ***
begin-procedure Str-Delete-Chars( $sdc_StringIn , $sdc_Chars , :$sdc_StringOut)
#debug show '** Str-Delete-Chars **'
#debug show '$sdc_StringIn: ' $sdc_StringIn
!*****************************
let #sdc_Counter      = 1
let #sdc_Position     = 0
let #sdc_LengthField  = length($sdc_StringIn)
let $sdc_Char         = ' '
let $sdc_StringOut    = ''

  while #sdc_Counter  <= #sdc_LengthField
      let $sdc_Char = substr( $sdc_StringIn , #sdc_Counter , 1 )

      find $sdc_Char in $sdc_Chars 0 #sdc_Position
      if #sdc_Position = -1
         let $sdc_StringOut = $sdc_StringOut || $sdc_Char
      end-if

      let #sdc_Counter = #sdc_Counter + 1
  end-while
#debug show '$sdc_StringOut: ' $sdc_StringOut
end-procedure Str-Delete-Chars

!***************************************
begin-procedure RightStr($sdc_Stringin, #sdc_LengthIn, :$sdc_StringOut)
!***************************************
let #sdc_LengthField  = length($sdc_StringIn)

if #sdc_LengthField <= #sdc_LengthIn
   let $sdc_StringOut = $sdc_StringIn
else
   let $sdc_StringOut = substr($sdc_StringIn, #sdc_LengthField - #sdc_LengthIn + 1, #sdc_LengthIn)
end-if
end-procedure

!***************************************
begin-procedure LeftStr($sdc_Stringin, #sdc_LengthIn, :$sdc_StringOut)
!***************************************
let #sdc_LengthField  = length($sdc_StringIn)

if #sdc_LengthField <= #sdc_LengthIn
   let $sdc_StringOut = $sdc_StringIn
else
   let $sdc_StringOut = substr($sdc_StringIn, 1, #sdc_LengthIn)
end-if
end-procedure

!***************************************
begin-procedure Date-To-BrazilianFmt($parDateIn, :$parDateOut)
!Converts a $parDateIn date in native format to DDMMYYYY format
!***************************************

if length($parDateIn) > 0
  do Convert-To-DTU-Date($parDateIn, $parDateInDTU)
  let $parDateOut = substr($parDateInDTU,9,2) || substr($parDateInDTU,6,2) || substr($parDateInDTU,1,4)
else
  let $parDateOut = '        '
end-if

end-procedure

!***************************************
begin-procedure Report-Translation
!***************************************
  do Init_Report_Translation ($ReportID, $curr_language_cd)
  do Append_Report_Translation ('GPBRRC02')

  do Get_Field_Information ('GPBRRC02', 'REPORT',         $TReport,        #DW)
  do Get_Field_Information ('GPBRRC02', 'SUMMARY',        $TSummary,       #DW)
  do Get_Field_Information ('GPBRRC02', 'COMPANY',        $TCompany,       #DW)
  do Get_Field_Information ('GPBRRC02', 'ESTABLISHMENT',  $TEstablishment, #DW)
  do Get_Field_Information ('GPBRRC02', 'EMPLOYEE',       $TEmployee,      #DW)
  do Get_Field_Information ('GPBRRC02', 'MESSAGE',        $TMessage,       #DW)
  do Get_Field_Information ('GPBRRC02', 'DATETIME',       $TDateTime,      #DW)
end-procedure Report-Translation

!***************************************
begin-procedure Create-Arr-Msgs
!***************************************
!Msg Set = 17255
!1  33 Error opening output file. Program ending
!2  34 Company inscription type is not defined
!3  35 No data found for Company/Establishment
!4  36 Please remember to capture GRRF responsible
!5  37 Please remember to capture GRRF responsible when company is representant
!6  38 Please remember to capture Personal Phone DDD:
!7  39 Employee With No PIS Or PASEP National Id Defined.
!8  40 No Employees Were Found To Report
!9  41 Employees Processed:
!10 42 Employee with no gender defined:

let #msgIndex = 0
let #arrSize  = 11

create-array name=arrMessages size=11
   field=fldMsgTxt:char
let $Lang = 'AND MSL.LANGUAGE_CD = ' || '''' || $curr_language_cd || ''''
begin-select
MSB.MESSAGE_NBR   &MSGNBRBASE
MSB.MESSAGE_TEXT  &MSGTXTBASE
MSL.MESSAGE_TEXT  &MSGTXTLANG

   let #msgIndex = #msgIndex + 1
   if #msgIndex < #arrSize
     if rtrim(&MSGTXTLANG, ' ') <> ''
       put &MSGTXTLANG into arrMessages(#msgIndex)
     else
       let $MSGTXT = rtrim(&MSGTXTBASE,' ')
       put $MSGTXT into arrMessages(#msgIndex)
     end-if
   else
     display 'Array Size Exceeded For Messages.'
   end-if

 from PSMSGCATDEFN MSB LEFT JOIN PSMSGCATLANG MSL ON MSL.MESSAGE_SET_NBR = MSB.MESSAGE_SET_NBR
                       and MSL.MESSAGE_NBR = MSB.MESSAGE_NBR
                       [$Lang]
where MSB.MESSAGE_SET_NBR = 17255
  and MSB.MESSAGE_NBR    in (33,34,35,36,37,38,39,40,41,42)
order by MSB.MESSAGE_NBR
end-select

end-procedure Create-Arr-Msgs

!**************************************
begin-procedure GetEstabAddress($EstabID, $Effdt,$Registro, :$Address, :$Number, :$Complement, :$Neighborhood, :$ZipCode, :$Citycode, :$CityName, :$UFCode)
#debug show 'Procedure: GetEstabAddress'
#debug show '$EstabID ' $EstabID
#debug show '$Effdt   ' $Effdt
#debug show '$Registro  : ' $Registro
!**************************************

let $MyEstab = ''
let $MyCompany = ''

begin-select
EA.COMP_INS_TYPE_BRA
EA.ESTAB_ASOC_BRA
EA.LEGAL_ENT_TYPE_BRA

    let $InscrType = rtrim(&EA.COMP_INS_TYPE_BRA, ' ')
    let $EstabAsoc = rtrim(&EA.ESTAB_ASOC_BRA, ' ')
    let $LegEntType = rtrim(&EA.LEGAL_ENT_TYPE_BRA, ' ')

from PS_ESTAB_TBL_BRA EA
where EA.ESTABID = $EstabID
  and EA.EFFDT   = (select MAX(EA2.EFFDT)
                   from PS_ESTAB_TBL_BRA EA2
                   where EA2.ESTABID = EA.ESTABID
                     and EA2.EFFDT  <= $Effdt)
end-select

#debug show '  $EstabID     [' $EstabID ']'
#debug show '  $Effdt       [' $Effdt ']'
#debug show '  $InscrType   [' $InscrType ']'
#debug show '  $EstabAsoc   [' $EstabAsoc ']'
#debug show '  $LegEntType  [' $LegEntType ']'

! Take address from EST = Establishment or COM = Company
if $LegEntType = 'EST' or $Registro = '10'
!Take addres from establishment
!Inscription Type 10 = CNPJ, 20 = CEI
if $InscrType = '20'
    let $MyEstab = $EstabAsoc
else
    let $MyEstab = $EstabID
end-if

let $Address      = ''
let $Number       = ''
let $Complement   = ''
let $Neighborhood = ''
let $ZipCode      = ''
let $CityName     = ''
let $UFCode       = ''

begin-select
ES.ADDRESS1
ES.NUM1
ES.ADDRESS2
ES.ADDRESS3
ES.ADDRESS4
ES.POSTAL
BS.COUNTY_CD_BRA

    let $Address      = rtrim(&ES.ADDRESS1, ' ')
    let $Number       = rtrim(&ES.NUM1, ' ')
    let $Complement   = rtrim(&ES.ADDRESS2, ' ') || ' ' || rtrim(&ES.ADDRESS3, ' ')
    let $Neighborhood = rtrim(&ES.ADDRESS4, ' ')
    let $ZipCode      = rtrim(&ES.POSTAL, ' ')
    let #Code_city    = &BS.COUNTY_CD_BRA
    
   
    move &BS.COUNTY_CD_BRA to $Citycode '0000000'
        #debug show '  $MyEstab       [' $MyEstab ']'
        #debug show '  $Effdt         [' $Effdt ']'
        #debug show '  $Address       [' $Address ']'
        #debug show '  $Number        [' $Number ']'
        #debug show '  $Complement    [' $Complement ']'
        #debug show '  $Neighborhood  [' $Neighborhood ']'
        #debug show '  $ZipCode       [' $ZipCode ']'
        #debug show '  $CityName      [' $CityName ']'
        #debug show '  $UFCode        [' $UFCode ']'
        #debug show '  $Citycode      [' $Citycode '] - [' #Code_city ']'

from PS_ESTAB_TBL ES
,PS_ESTAB_TBL_BRA BS
where ES.ESTABID = $MyEstab
and ES.EFF_STATUS = 'A'
and ES.EFFDT = (select MAX(ES2.EFFDT)
                from PS_ESTAB_TBL ES2
                where ES2.ESTABID = ES.ESTABID
                and ES2.EFF_STATUS = ES.EFF_STATUS
                and ES2.EFFDT <= $Effdt)
and BS.ESTABID = ES.ESTABID
and BS.EFFDT = ES.EFFDT
end-select

begin-select
CT.CITY
CT.STATE

    let $CityName     = rtrim(&CT.CITY, ' ')
    let $UFCode       = rtrim(&CT.STATE, ' ')

    #debug show '  $CityName      [' $CityName ']'
    #debug show '  $UFCode        [' $UFCode ']'

from PS_CODE_CITY_BRA CT
where CT.CODE_CITY_BRA = #Code_city
end-select

else
!Take address from Company

begin-select
EC.COMPANY

    let $MyCompany     = rtrim(&EC.COMPANY, ' ')

from PS_ESTAB_TBL EC
where EC.ESTABID = $EstabID
and EC.EFFDT = (select MAX(EC2.EFFDT)
                from PS_ESTAB_TBL EC2
                where EC2.ESTABID = EC.ESTABID
                and EC2.EFFDT <= $Effdt)
end-select

begin-select
CA.ADDRESS1
CA.NUM1
CA.ADDRESS2
CA.ADDRESS3
CA.ADDRESS4
CA.POSTAL
CA.CITY
CA.STATE
    let $Address      = rtrim(&CA.ADDRESS1, ' ')
    let $Number       = rtrim(&CA.NUM1, ' ')
    let $Complement   = rtrim(&CA.ADDRESS2, ' ') || ' ' || rtrim(&CA.ADDRESS3, ' ')
    let $Neighborhood = rtrim(&CA.ADDRESS4, ' ')
    let $ZipCode      = rtrim(&CA.POSTAL, ' ')
    let $CityName     = rtrim(&CA.CITY, ' ')
    let $UFCode       = rtrim(&CA.STATE, ' ')
    
    
    #debug show '  $MyCompany       [' $MyCompany ']'
    #debug show '  $Effdt           [' $Effdt ']'
    #debug show '  $Address         [' $Address ']'
    #debug show '  $Number          [' $Number ']'
    #debug show '  $Complement      [' $Complement ']'
    #debug show '  $Neighborhood    [' $Neighborhood ']'
    #debug show '  $ZipCode         [' $ZipCode ']'
    #debug show '  $CityName        [' $CityName ']'
    #debug show '  $UFCode          [' $UFCode ']'

from PS_COMPANY_TBL CA
where CA.COMPANY = $MyCompany
and CA.EFF_STATUS = 'A'
and CA.EFFDT = (select MAX(CA2.EFFDT)
                from PS_COMPANY_TBL CA2
                where CA2.COMPANY = CA.COMPANY
                and CA2.EFF_STATUS = CA.EFF_STATUS
                and CA2.EFFDT <= $Effdt)
end-select

end-if

end-procedure GetEstabAddress

!**************************************
begin-procedure GetGRRFCode($Effdt, $Education_Lvl, :$GRRF_Education)
#debug show 'Procedure: GetGRRFCode'
#debug show '$Effdt         ' $Effdt
#debug show '$Education_Lvl ' $Education_Lvl
!**************************************

begin-select 
EDU.GPBR_GRRF_EDU_CD

   let $GRRF_Education   = edit(&EDU.GPBR_GRRF_EDU_CD, '00')
   
from PS_GPBR_EDUC_CD EDC, PS_GPBR_EDUC_CODE EDU
  where  EDC.EFFDT = (select MAX(EDC_ED.EFFDT) from PS_GPBR_EDUC_CD EDC_ED
                      where EDC_ED.EFFDT <= $Effdt)
     and EDC.EFF_STATUS = 'A'
     and EDU.EFFDT      = EDC.EFFDT
     and EDU.EDUCATION_LVL_BRA = $Education_Lvl 
end-select
     
end-procedure GetGRRFCode


#include 'reset.sqc'     !Reset printer procedure
#include 'curdttim.sqc'  !Get-Current-DateTime procedure
#include 'datetime.sqc'  !Routines for date and time formatting
#include 'number.sqc'    !Routines to format numbers
#include 'stdapi.sqc'    !Update Process API
#include 'datemath.sqc'
#include 'sqrtrans.sqc'
#include 'getcombr.sqc'  !Get selected fields from Company Table
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'gpbrmape.sqc'  !Get Pin Code
#include 'gpbrtc01.sqc'  !Get Mapped Termination Code
#include 'brfile01.sqc'  !File Utilities
