!***********************************************************************
!  GPCHEO1X.SQR:  EO Statement - Sondermeldekarte                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:03:25:43                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup32.sqc'


!********************************************************************************
begin-Program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  If $Run_Option = 'Y'
     do Process-Main
     do Get-Log
     do Update_Status($Ctl_Year,#ptot_domainid,$ptot_company,$providertype,$Run_Option,$SysDateTime,$Cancel_option)
  End-If
  do Stdapi-Term
  do Get-Log
end-Program
!********************************************************************************
!-----------------------------------------------------------------------------------!
! Define the the value of Test-Code field for Interface in the define-section below.!
! Make sure there is only one value defined at the same time.                       !
!-----------------------------------------------------------------------------------!
#define TEST ' '
!#define TEST 'TEST'
!*******************************************************************
begin-procedure Init-Report

  do Stdapi-Init

  do Get-Report-Parameters
  !sps for dashboard run - begin
  let $ptot_company = $Company_Name
  let $ptot_year = $Ctl_Year 
  let #ptot_year = $ptot_year
  let #Ctl_Year  = $Ctl_Year
  #debug show '$ptot_company ' $ptot_company ' $ptot_year ' $ptot_year
  
  let $providertype='E'
  let $Provider_crit = ' '
  do Get-PTotals-Data($Provider_crit,$providertype,#Domain_ID,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey) 
  do Check_Run_Report(#ptot_domainid,$Ctl_Year,$ptot_company,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)
  let $Ctl_PayEntity = $ptot_company
  
  !sps for dashboard run - end
  !-----------------------------------------------------------------------
  !#ifdef ORACLE
  !    let $Sort_Plat = 'TO_CHAR(PBD.BEGIN_DT,''YYYY''),'
  ! #else
  !    #ifdef SYBASE
  !    let $Sort_Plat = 'DATEPART(YEAR,PBD.BEGIN_DT),'
  !    #else
  !    let $Sort_Plat = 'YEAR(PBD.BEGIN_DT),'
  !    #end-if
  !#end-if

  !#DEBUG SHOW 'SPS $Run_Cntl_Sort => ' $Run_Cntl_Sort 
   !Evaluate $Run_Cntl_Sort
   ! when = 'A'
   ! let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PBD.NATIONAL_ID,PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
   ! break
   ! when = 'N'
   ! let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
   ! break
   ! when = 'E'
   ! let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PBD.EMPLID,PD.NAME,PBD.BEGIN_DT,PBD.EMPL_RCD'
   ! break
   ! when-other
   ! let $Run_Sort = 'ORDER BY ' || $Sort_Plat || 'PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
   ! break
   !End-Evaluate
   let $Run_Sort = 'ORDER BY  PD.NAME,PBD.EMPLID,PBD.BEGIN_DT,PBD.EMPL_RCD'
   #debug show $Run_Sort
  !-----------------------------------------------------------------------
  move 'GPCHEO01' to $ReportID

  let $ReportTitle = $TITLE1 || ' '
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle
  let #Date_Type= {DateType}

  if $Ctl_Curr_Pay_End_Dt <> ''
    do Get_Beg_Mnth($Ctl_Curr_Pay_End_Dt,$ReportBeginDate)
    do Get_End_Mnth($Ctl_Curr_Pay_End_Dt,$ReportEndDate)
  end-if

  if $ReportEndDate <> ''

      do ConvertToComponents($ReportEndDate  ,$yy11      ,$mm11   ,$dd11)
      do ConvertToComponents($ReportBeginDate,$yy10      ,$mm10   ,$dd10)
      do Format-DateTime    ($ReportBeginDate,$Ctl_B_Date,{DEFCMP},'','')
      do Format-DateTime    ($ReportEndDate  ,$Ctl_E_Date,{DEFCMP},'','')

      evaluate #Date_Type
        when = 1
             let $from_to_format = $dd10 || '{PTDateDelim}' ||
                 $mm10 || '{PTDateDelim}' || ' - ' || $dd11 ||
                 '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $yy11
        break
        when = 2
             let $from_to_format = $mm10 || '{PTDateDelim}'
                 || $dd10 || '{PTDateDelim}' || ' - ' || $yy11
                 || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $dd11
        break
        when-other
             let $from_to_format = $mm10 || '{PTDateDelim}'
                 || $dd10 || '{PTDateDelim}' || ' - ' || $mm11
                 || '{PTDateDelim}' || $dd11 || '{PTDateDelim}' || $yy11
        break
      end-evaluate

  end-if

end-procedure
!****************************************************************************************
Begin-procedure Ask-Input

   input $Ctl_Curr_Pay_End_Dt   'Current Pay End Date '  type=date
   input $Ctl_PayEntity         'Pay Entity'             type=char      maxlen=10
   input $language_cd           'Language'               type=char      maxlen=3

   let $crit.company  = ''
   let $Ctl_PayEntity = rtrim(ltrim($Ctl_PayEntity,' '),' ')
       uppercase $Ctl_PayEntity
   if $Ctl_PayEntity <> ''
      let $crit.company = ' AND PBD.PAY_ENTITY = ' || '''' || $Ctl_PayEntity || ''''
   end-if

End-procedure
!****************************************************************************************
begin-procedure Get-Values

   let $Ctl_PayEntity  = RTRIM(&GPCH_RUN_CNTL.PAY_ENTITY,' ')
   let $language_cd    = $PRCS_LANGUAGE_CD
   let $Run_Cntl_Sort  = RTRIM(&GPCH_RUN_CNTL.GPCH_RC_EO_SRT,' ')

end-procedure
!*************************************************************************
begin-procedure Process-Main
#Debug Show '-> Process-Main ' $Ctl_B_Date  ' , '  $Ctl_E_Date

   do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)

   if $Cal_Run_Id_M_String      <> ''
      let $Cal_Run_Id_Crit_TX02_1   = ' AND CRET.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
   else
      let $Cal_Run_Id_Crit_TX02_1   = ' '
   end-if

   do Get-Company-Address($Ctl_PayEntity,$ReportEndDate,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

   do Get_Fak_Tax_Data('NA',$Ctl_PayEntity,$ReportEndDate,
                        $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                        $Tax_Language,$Employer_StaxNr,#Staxb_PCTR,
                        #Employer_SI_Pct,$AHV_MBR_ID,$AusglKasse,
                        $SI_KTG_MBR_ID,#SI_AHV_ADM_PC,#SI_TOT_AHV_PC,
                        #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

   let $ItExistedData = 'N'
   let #Days_Diff_Sum = 0
   let #Amount5_Sum   = 0
   let $Corr          = ' '
   let $OutOfStmt     = 'Y'
   let $First_Print   = 'Y'
   Let $Empl_ID_Old = ' '
   Let #Empl_RCD_Old = 0
   do Init_EG_Person
   Let $BeneficiaryPerson = '<BeneficiaryPerson>'
   
Begin-select
RP001.BIRTHDATE
RP001.COUNTRY
PBD.EMPLID
PBD.CAL_RUN_ID
PBD.EMPL_RCD
PBD.GP_PAYGROUP
PBD.CAL_ID
PBD.RSLT_SEG_NUM
PBD.SLICE_END_DT
PBD.PAY_ENTITY
PBD.COMPANY
PBD.PRD_END_DT
PBD.GPCH_AL_CPAY_ENDDT
PBD.GPCH_RP_YEAR
PBD.SEQ_NO
PBD.GPCH_EO_MBR_ID
PBD.NATIONAL_ID
PBD.GPCH_AH_NNSS
PBD.ACCOUNT
PBD.CONTROL_NUMBER
PBD.GPCH_EO_CARD_TYPE
PBD.GPCH_EO_SERV_TYPE
PBD.BEGIN_DT
PBD.END_DT
PBD.DAYS_DIFF
PBD.TYPE_KK
PBD.GPCH_EO_AVERAGE_AM
PBD.SINGLE_CHECK
PBD.DEP_BENEF_CNT
PBD.GPCH_RP_AMOUNT1
PBD.GPCH_RP_AMOUNT2
PBD.GPCH_RP_AMOUNT3
PBD.GPCH_RP_AMOUNT4
PBD.GPCH_RP_AMOUNT5
PBD.GPCH_RP_AMOUNT6
PBD.SIGN_POS_IND
PBD.STATUS
PBD.GPCH_RP_CHAR01
PBD.GPCH_RP_CHAR02
PBD.GPCH_RP_CHAR03
PBD.GPCH_EO_REFNBR
  
  let #_Eo_Ref_Number         =  &PBD.GPCH_EO_REFNBR
  let $Empl_ID               =  rtrim(&PBD.EMPLID,' ')
  let $Cal_RunID             =  rtrim(&PBD.CAL_RUN_ID,' ')
  let #Empl_RCD              =  &PBD.EMPL_RCD
  let $GP_Pay_Gr             =  rtrim(&PBD.GP_PAYGROUP,' ')
  let $Cal_ID                =  rtrim(&PBD.CAL_ID,' ')
  let #Rslt_Seg_Nr           =  &PBD.RSLT_SEG_NUM
  let $Slice_End_DT          =  &PBD.SLICE_END_DT
  let $Pay_Entity            =  rtrim(&PBD.PAY_ENTITY,' ')
  let $Company               =  rtrim(&PBD.COMPANY,' ')
  let $PRD_E_DT              =  &PBD.PRD_END_DT
  let $Cpay_E_DT             =  &PBD.GPCH_AL_CPAY_ENDDT
  let $RP_Year               =  &PBD.GPCH_RP_YEAR
  let #Sequence              =  &PBD.SEQ_NO
  let $EO_Mbr_Id             =  rtrim(&PBD.GPCH_EO_MBR_ID,' ')
  let $National_Id           =  rtrim(&PBD.NATIONAL_ID,' ')
  let $NNSS_Id               =  rtrim(&PBD.GPCH_AH_NNSS,' ')
  
  
  let $Account               =  rtrim(&PBD.ACCOUNT,' ')
  let $Control_Nr            =  rtrim(&PBD.CONTROL_NUMBER,' ')
  let $EO_Card_Type          =  rtrim(&PBD.GPCH_EO_CARD_TYPE,' ')
  let $EO_Serv_Type          =  rtrim(&PBD.GPCH_EO_SERV_TYPE,' ')
  let $B_DT                  =  &PBD.BEGIN_DT
  let $E_DT                  =  &PBD.END_DT
  let #Days_Diff             =  &PBD.DAYS_DIFF
  let $Type_KK               =  rtrim(&PBD.TYPE_KK,' ')
  let #Average_AM            =  &PBD.GPCH_EO_AVERAGE_AM
  let $Single_Check          =  rtrim(&PBD.SINGLE_CHECK,' ')
  let #Benef_Cnt             =  &PBD.DEP_BENEF_CNT
  let #Amount1               =  &PBD.GPCH_RP_AMOUNT1
  let #Amount2               =  &PBD.GPCH_RP_AMOUNT2
  let #Amount3               =  &PBD.GPCH_RP_AMOUNT3
  let #Amount4               =  &PBD.GPCH_RP_AMOUNT4
  let #Amount5               =  &PBD.GPCH_RP_AMOUNT5
  let #Amount6               =  &PBD.GPCH_RP_AMOUNT6
  let $Sign_Pos_Ind          =  rtrim(&PBD.SIGN_POS_IND,' ')
  let $Stat                  =  rtrim(&PBD.STATUS,' ')
  let $CHAR02                =  rtrim(&PBD.GPCH_RP_CHAR02,' ')
  let $CHAR03                =  rtrim(&PBD.GPCH_RP_CHAR03,' ')
  let $birth_dt = &RP001.BIRTHDATE
  Let $Nationality = RTRIM(ltrim(&RP001.COUNTRY ,' '),' ')
  
  
  If ($Empl_ID_Old = ' ' or $Empl_ID_Old = $Empl_ID)
     !Do not create a EG_PERSON Row
  Else
     If $BeneficiaryPerson = '<BeneficiaryPerson>'
     !No data for employee
     Else
        Let $BeneficiaryPerson = $BeneficiaryPerson || $EmplID_XML || '</BeneficiaryPerson>'
        #debug show 'sps Employee EO XML => ' $BeneficiaryPerson
        do Insert_EO_EMPL_XML
        Let $BeneficiaryPerson = '<BeneficiaryPerson>'
     End-If
  End-If

  do Employee_Report_Flag !sps This function determines if the employee needs to be processed
  #debug show 'sps Process $Empl_ID ??? ' $Empl_ID ' $E_DT ' $E_DT ' $B_DT ' $B_DT ' #_Eo_Ref_Number ' #_Eo_Ref_Number 
  If $Process_flag = 'Y'
  
  show '$NNSS_Id -- > ' $NNSS_Id
 
  do Employee_process_flag
  
  #debug show 'In process main $Employee_process_flag ' $Employee_process_flag
  If $Employee_process_flag = 'Y' !sps this loop makes sure that employees with EG_PERSON.GPCH_IF_VER > 1 are not processed
      do Format-DateTime($birth_dt, $birth_dt_print, {DEFDATE}, '', '')
      do ConvertToComponents(&PBD.BEGIN_DT,$bdt_yy,$bdt_mm,$bdt_dd)
  
      !sps EO-XML Fucntions
      If $Empl_ID_Old <> $Empl_ID
      Do Get_EO_Employee_Xml_Generic
      !Un comment the following function call when child data needs to be enabled
      !Do Get_EO_Child_Xml_Generic
      End-If
      #debug show 'sps in main $BeneficiaryPerson => ' $BeneficiaryPerson

      do Get-Emp-Address($Empl_ID,$ReportEndDate,'HOME',$EMP_ADDLINE1,$EMP_ADDLINE2,$EMP_ADDLINE3,$EMP_$ADDLINE31,
                      $EMP_ADDLINE4,$EMP_ADDLINE5,$EMP_ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX,
                      $NAME_TITLE,$NAME_ROYAL_PREFIX,$NAME_ROYAL_SUFFIX,$EMP_Phone,$EMP_Email,$EMP_CITY,
                      $EMP_STATE,$EMP_POSTAL)

      let $Empl_Name             =  rtrim($Full_Name,' ')
      let $CHAR01                =  rtrim(&PBD.GPCH_RP_CHAR01,' ')
      let $Nat_ID = rtrim(ltrim(&PBD.NATIONAL_ID,' '),' ')
      if $Nat_ID <> ''
         let $Nat_ID= edit($Nat_ID,'XXX.XX.XXX.XXX')
      end-if
      let $Nat_ID_print = $Nat_ID
      let $NNSS_Id = rtrim(ltrim(&PBD.GPCH_AH_NNSS,' '),' ')
      
      if $NNSS_Id <> ''
         ! let $NNSS_Id= edit($NNSS_Id,'XXX.XXXX.XXXXX.XX')
         let $NNSS_Id= substr($NNSS_Id,1,3)||'.'||
                       substr($NNSS_Id,4,4)||'.'||
                       substr($NNSS_Id,8,4)||'.'||
                       substr($NNSS_Id,12,2)
         let $Nat_ID_print = $NNSS_Id
      end-if

      do Format-DateTime($Cpay_E_DT,$Cpay_E_Date1,{DEFCMP},'','')
      do Format-DateTime($PRD_E_DT ,$PRD_E_Date1 ,{DEFCMP},'','')

      ! uc  let $Birth_Date = &PBD.BIRTHDATE
      ! uc  do Format-DateTime($Birth_Date, $Birth_Date_print, {DEFDATE}, '', '')
      #debug show 'sps $PRD_E_Date1 ' $PRD_E_Date1 ' $Ctl_B_Date ' $Ctl_B_Date ' $Ctl_E_Date ' $Ctl_E_Date
      !if ($PRD_E_Date1 >= $Ctl_B_Date) and ($PRD_E_Date1 <= $Ctl_E_Date)
      !    let $First_Print    = 'N'
          do Print_Data
      !end-if
  
      let $Old_bdt_yy     = $bdt_yy
      let $ItExistedData  = 'Y'
      let $OutOfStmt      = 'N'
      Let $Empl_ID_Old = $Empl_ID
  End-If
  End-If
  
   
FROM PS_GPCH_RP_EO01 PBD, PS_GPCH_RP_0001 RP001,{Record_Names} PD
WHERE PBD.EMPLID              = PD.EMPLID
AND   PBD.PAY_ENTITY          = $Ctl_PayEntity 
AND PBD.EMPLID = RP001.EMPLID 
AND PBD.CAL_RUN_ID =  RP001.CAL_RUN_ID 
AND PBD.EMPL_RCD = RP001.EMPL_RCD 
AND PBD.GP_PAYGROUP = RP001.GP_PAYGROUP 
AND PBD.CAL_ID = RP001.CAL_ID 
AND PBD.RSLT_SEG_NUM = RP001.RSLT_SEG_NUM 
AND PBD.ORIG_CAL_RUN_ID = RP001.ORIG_CAL_RUN_ID
!FMB Begin change of Main select
AND
!FMB all recalcs
( PBD.GPCH_AL_CPAY_ENDDT = $ReportEndDate
!FMB or to be reversed in this run
or
( PBD.GPCH_AL_CPAY_ENDDT < $ReportEndDate

AND   PBD.GPCH_AL_CPAY_ENDDT  = (SELECT MAX(PBD1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_EO01 PBD1
                                  WHERE PBD1.EMPLID              = PBD.EMPLID
                                  AND   PBD1.EMPL_RCD            = PBD.EMPL_RCD
                                  AND   PBD1.CAL_ID              = PBD.CAL_ID
                                  AND   PBD1.PAY_ENTITY          = $Ctl_PayEntity
                                  AND   PBD1.GPCH_AL_CPAY_ENDDT <= $ReportEndDate )
AND   PBD.GPCH_AL_CPAY_ENDDT  = (SELECT MAX(RP1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_0001 RP1
                                  WHERE PBD.EMPLID              = RP1.EMPLID
                                  AND   PBD.CAL_ID              = RP1.CAL_ID
                                  AND   PBD.EMPL_RCD            = RP1.EMPL_RCD
                                  AND   PBD.GP_PAYGROUP         = RP1.GP_PAYGROUP
                                  AND   RP1.GPCH_AL_CPAY_ENDDT  < $ReportEndDate ) ) )
 
!FMB End change of Main select
{Record_Names_Sub}
[$Run_Sort]
End-select
  
   If $Empl_ID <> ' ' and $Process_flag = 'Y' !Insert EG_PERSON row for the very last employee
     Let $BeneficiaryPerson = $BeneficiaryPerson || $EmplID_XML || '</BeneficiaryPerson>'
     #debug show 'sps Employee EO XML => ' $BeneficiaryPerson
     do Insert_EO_EMPL_XML
     Let $BeneficiaryPerson = '<BeneficiaryPerson>'
  End-If

#Debug Show '<- Process-Main '
end-procedure

!********************************************************************************
!********************************************************************************
Begin-procedure Employee_Report_Flag
#debug show 'In Employee_Report_Flag #_Eo_Ref_Number ' #_Eo_Ref_Number ' $Empl_ID ' $Empl_ID ' #Empl_RCD ' #Empl_RCD 
#debug show ' $GP_Pay_Gr ' $GP_Pay_Gr ' $Ctl_PayEntity ' $Ctl_PayEntity ' $ReportEndDate ' $ReportEndDate ' $ReportBeginDate ' $ReportBeginDate
Let $Process_flag = 'Y'

!sps If the employee has a service (Identified by GPCH_EO_REFNBR) processed in previous month then it should not be reported.
Begin-Select
'X'

    Let $Process_flag = 'N'

from PS_GPCH_RP_EO01 RP_EO01
where (RP_EO01.EMPLID              = $Empl_ID
AND   RP_EO01.EMPL_RCD            = #Empl_RCD
AND   RP_EO01.GP_PAYGROUP         = $GP_Pay_Gr
AND   RP_EO01.PAY_ENTITY          = $Ctl_PayEntity   
AND   RP_EO01.GPCH_AL_CPAY_ENDDT < $ReportEndDate
!AND   RP_EO01.PRD_END_DT          < $ReportBeginDate
AND   RP_EO01.GPCH_EO_REFNBR = #_Eo_Ref_Number )
!OR   RP_EO01.GPCH_EO_REFNBR = 0
End-Select
#debug show 'out Employee_Report_Flag $Process_flag => ' $Process_flag
End-Procedure
!***********************************************************************
Begin-procedure Print_Data
#Debug Show '-> Print_Data #_Eo_Ref_Number ' #_Eo_Ref_Number 
#debug show 'sps print data $BeneficiaryPerson => ' $BeneficiaryPerson
   
   let #_Eo_Ref_Number = #_Eo_Ref_Number 
   let #Record_Cnt = #Record_Cnt + 1

   if $Empl_id <> $Old_Empl_id
      let #Employee_Cnt = #Employee_Cnt + 1
      let $Old_Empl_id = $Empl_id
   end-if

   let #Days_Diff_Sum = #Days_Diff_Sum + #Days_Diff
   let #Amount5_Sum   = #Amount5_Sum   + #Amount5

   if #Amount6 > 77400 or #Amount6 < -77400
      let $Amount6 = '      max'
   end-if

   let #Amount6_tmp_1 = #Amount6

   do Format-Number(#Empl_RCD,$EmplRcd,'888')
   let $EmplID_Rcd = $Empl_ID || '-' || $EmplRcd
  
   do Convert-To-Number($Account,$Print_Account,'0')
   let #temp2 = $Print_Account
   do Format-Number(#temp2,$Print_Account_1,'9999999')
       
   do Convert-To-Number($Control_Nr,$Print_ControlNr,'1')
   
   !************
   if $NNSS_Id <> ''
   let $NNSS_Id_temp='-'|| substr($NNSS_Id,4,13)
     else
    let $NNSS_Id_temp= $Nat_ID
   End-If
   
  !************

   do Write-to-File($CHAR01,$NNSS_Id_temp,$B_DT,$E_DT,$Cpay_E_DT,$EO_Serv_Type,#Days_Diff,
                                 #Benef_Cnt,#Average_AM,#Amount3,#Amount4,#Amount5,#anzrec,#Amount1,#Amount2,
                                 #Sequence,$Print_Account,$Print_ControlNr,$Type_KK,$Single_Check,
                                 $AusglKasse,$Sign_Pos_Ind,$CHAR02,$CHAR03, $BeneficiaryPerson)
   
   Let $Eo_Ref_Number = #_Eo_Ref_Number 
   Let $Eo_Ref_Number = rtrim($Eo_Ref_Number, '0')
   Let $Eo_Ref_Number = rtrim($Eo_Ref_Number, '.')
   #debug show 'sps $Eo_Ref_Number ' $Eo_Ref_Number
   Let $Ref_No = '<BenefRefNumber>' || $Eo_Ref_Number || '</BenefRefNumber>'

   Let $BeneficiaryPerson = $BeneficiaryPerson || $Ref_No || '</Benefit>' 

#Debug Show '<- Print_Data #_Eo_Ref_Number ' #_Eo_Ref_Number 
end-procedure
!********************************************************************************************
Begin-procedure Get_End_Mnth($Dte1,:$Dte2)
#Debug Show '-> Get_End_Mnth '


  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)

  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
          (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
  else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
  end-if

  let $MonthDays1 = to_char(#MonthDays1)
  let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
  do Format-DateTime($E_DT_tmp1,$Dte2, {DEFCMP},'','native')

#Debug Show '<- Get_End_Mnth $RptEndDt ' $Dte2
End-procedure

!********************************************************************************************
begin-procedure Get_Beg_Mnth($Dte1,:$Dte2)
#Debug Show '-> Get_Beg_Mnth '

  do ConvertToComponents($Dte1,$tmp1_yy,$tmp1_mm,$tpm1_dd)
  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1,$Dte2, {DEFCMP},'','native')

#Debug Show '<- Get_Beg_Mnth $RptBegDt ' $Dte2
end-procedure

! ---------------------------------------------------------------------
! Get-Pers-Job
! ---------------------------------------------------------------------

begin-procedure Get-Pers-Job
let     #Annual_Rt              =       0
begin-select
J1.EMPL_RCD
J1.ANNUAL_RT
J1.DEPTID
J1.LOCATION
J1.COMPANY
J1.PAYGROUP
   move &J1.EMPL_RCD to #empl_rcd
   let #Annual_Rt    =  &J1.ANNUAL_RT
   let $EE_Deptid    =  &J1.DEPTID
   let $EE_Location  =  &J1.LOCATION
   let $EE_Company   =  &J1.COMPANY
   let $EE_Paygroup  =  &J1.PAYGROUP
   do  Count-Changes

from PS_JOB J1
where J1.EMPLID = $Empl_ID and
J1.EMPL_RCD = #Empl_RCD and
J1.EFFDT = (SELECT MAX(J2.EFFDT) from PS_JOB J2
   where J2.EMPLID = J1.EMPLID and
   J2.EMPL_RCD = J1.EMPL_RCD and
   J2.EFFDT <= $From_Effdt) and
J1.EFFSEQ = (SELECT MAX(J3.EFFSEQ) from PS_JOB J3
   where J3.EMPLID = J1.EMPLID and
   J3.EMPL_RCD = J1.EMPL_RCD and
   J3.EFFDT = J1.EFFDT)
end-select
end-procedure Get-Pers-Job


!********************************************************************************
! ---------------------------------------------------------------------
! Count-Changes
! ---------------------------------------------------------------------

begin-procedure Count-Changes

let $Prev_Deptid         = $EE_Deptid
let     #Prev_Annual_Rt  = #Annual_Rt
begin-select

J4.DEPTID                        &J4.Deptid
J4.ANNUAL_RT             &J4.Annual_Rt
        let $New_Dept      =    &J4.Deptid
        let #New_Annual_Rt  =   &J4.Annual_Rt

        if $Prev_Deptid <> $New_Dept
                  let #Cost_Cnt = #Cost_Cnt + 1
                  let $Prev_Deptid = $New_Deptid
        end-if

        if #Prev_Annual_Rt <> #New_Annual_Rt
                  let #Salary_Cnt = #Salary_Cnt + 1
                  let #Prev_Annual_Rt = #New_Annual_Rt
        end-if

from PS_JOB J4
where J4.EMPLID = $Empl_ID and
J4.EMPL_RCD = #Empl_RCD and
J4.EFFDT BETWEEN $From_Effdt and $TO_Effdt

end-select

end-procedure Count-Changes


!************************************************************************************
begin-procedure ConvertTo5Rappen(:#Amnt)
!Runden auf 5 Rappen
   let #Amnt = round(#Amnt,2)
   let #Amnt = #Amnt * 20
   let #Amnt = round(#Amnt,0)
   let #Amnt = #Amnt / 20
end-procedure
!************************************************************************************
begin-procedure Write-to-File($Kartenart_File,$Nat_ID_lok,$B_DT_lok,$E_DT_lok,$Cpay_E_DT_lok,
                                $EO_Serv_Type_lok,#Days_Diff_lok,#Benef_Cnt_lok,#Average_AM_lok,#Amount3_lok,
                                #Amount4_lok,#Amount5_lok,:#anzrec_lok,#Amount1_lok,#Amount2_lok,
                                #Sequence_lok,$Account_lok,$Control_Nr_lok,$Type_KK_lok,
                                $Single_Check_lok,$AusglKasse_lok,$Sign_Pos_Ind_lok,$CHAR02,$CHAR03,:$BeneficiaryPerson)
#debug show 'Write-to-File #_Eo_Ref_Number ' #_Eo_Ref_Number 
  let #_Eo_Ref_Number = #_Eo_Ref_Number 
  let $Dienstart = $EO_Serv_Type_lok
  let $Str_tmp1 = rtrim(ltrim($Control_Nr_lok,' '),' ')
  let $Control_Nr_lok = lpad($Str_tmp1, 3, '0')          ! 33  kontroll-nummer

  let $_From_Effdt = $B_DT_lok
  let $_To_Effdt   = $E_DT_lok

  do Get-Pers-Job

  let $Recordart = '81' ! 1  recordart

  let $Ausgl = rtrim(ltrim($AusglKasse_lok,' '),' ')
  let $ausgleichskasse = lpad($Ausgl, 6, '0') ! 3  nr. of ausgleichskasse

  let $Account_lok = rtrim(ltrim($Account_lok,' '),' ')
  let $Account_lok = lpad($Account_lok, 7, '0')
  let $acc_number       = $Account_lok     ! 26  konto-nummer bzw. ref-nummer

  let $reserve          = ' '  !105  reserve

  let $betr_zul         = '0'    ! 69  betriebszulage
  do ConvertTo5Rappen(#Amount1_lok)
  do ConvertTo5Rappen(#Amount2_lok)
  do ConvertTo5Rappen(#Amount3_lok)
  do ConvertTo5Rappen(#Amount4_lok)
  do ConvertTo5Rappen(#Amount5_lok)
  do ConvertTo5Rappen(#Average_AM_lok)

  Let #betr_zul = $betr_zul
  do Format-Number(#betr_zul , $betr_zul, '99999999.00')
  let $betr_zul = ltrim(rtrim($betr_zul,' '),' ')
  
  do Format-Number(#Amount1_lok, $betreuungskosten, '99999999.00')
  let $betreuungskosten = ltrim(rtrim($betreuungskosten,' '),' ')
  ! 70  betreuungskosten in fr/rp
  do Format-Number(#Amount2_lok, $untr_zul, '000000')  ! 78  unterstuetzungszulage
  do Format-Number(#Amount3_lok, $f19, '99999999.00')  ! 84  tagesansatz
  let $f19 = ltrim(rtrim($f19,' '),' ')
  do Format-Number(#Amount4_lok, $f20, '99999999.00') ! 90  tagesansatz grundentschaed
  let $f20 = ltrim(rtrim($f20,' '),' ')
  do Format-Number(#Amount5_lok, $f21, '99999999.00')
  let $f21 = ltrim(rtrim($f21,' '),' ')
  do Format-Number(#Average_AM_lok, $f13, '99999999.00')     ! 60  Durchschn. Tageseinkommen
  let $f13 = ltrim(rtrim($f13,' '),' ')

  let $AHV_Number = TRANSLATE($Nat_ID_lok,'.','')           ! 15  ahv-nummer
  
 !syed let $NNSS_Number = TRANSLATE($NNSS_ID_lok,'.','')           ! 17  NNSS-nummer


  ! 96  eo-entschaedigung

  do Format-Number(#Days_Diff_lok, $Days_Diff, '000')         ! 56  anzahl diensttage
  do Format-Number(#Benef_Cnt_lok, $Dependent_Cnt, '00')  ! 68  anzahl kinder

  do ConvertToComponents($B_DT_lok,$Year,$Mon,$Day)
  let $Dienst_From      =       $Year   ||      $Mon    ||      $Day      ! 40  dienstperiode von

  do ConvertToComponents($E_DT_lok,$Year,$Mon,$Day)
  let $Dienst_To        =       $Year ||        $Mon    ||      $Day      ! 48  dienstperiode bis

  do ConvertToComponents($Cpay_E_DT_lok,$Year,$Mon,$Day)
  let $book_kperiod = $Year || $Mon   ! 9  buchungsperiode

  !let $erwerbsart       =       $Type_KK_lok       ! 59  erwerbsart
  let $erwerbsart       =  '0'
  if rtrim($erwerbsart,' ') = ''
     let $erwerbsart = '0'
  end-if

  let $Dnstart = rtrim(ltrim($Dienstart,' '),' ')
  let $Dienstart = lpad($Dnstart, 2, '0')        ! 38  dienstart
  !let $Kartenart_File = lpad($Kartenart_File,2,'0')
  let $Single_Check = '2'
  let $Guaratee = ' '
   
   #debug show 'sps before Get_Military_Data $BeneficiaryPerson ' $BeneficiaryPerson
   Do Get_Military_Data($Kartenart_File, $Dienstart, $Dienst_From, $Dienst_To, $Days_Diff, $acc_number
                                  $Control_Nr_lok, $f13, $Dependent_Cnt, $CHAR03, $betr_zul, $betreuungskosten,
                                  $f20, $f19, $f21, $BeneficiaryPerson)
   #debug show 'sps after Get_Military_Data $BeneficiaryPerson ' $BeneficiaryPerson
   #debug show 'sps <- Write-to-File #_Eo_Ref_Number ' #_Eo_Ref_Number 
end-procedure Write-to-File
!****************************************************************************************
begin-procedure Convert-To-Number($SourceStr,:$OutStr,$Type)
!$SourceStr:- is the Source string
!$OutStr:- is the Output string
!$Type:- If Type=0 then it is for Account field For Type=1 it is for ControlNbr
 let $TempStr1= $SourceStr
 let $TempStr2=''
 let $TempStr3=''
 let $OutStr = ''
 
 let #TempStr1Len = length($TempStr1)
 let #TempStr2Len =0
 
 let #StrCount=1
     
      While #StrCount <= #TempStr1Len

           let $TempStr2= substr($TempStr1,#StrCount,1)
             evaluate $TempStr2
               when ='0' 
               when ='1'
               when ='2'
               when ='3'
               when ='4'
               when ='5'
               when ='6'
               when ='7'
               when ='8'
               when ='9' 
                   let $TempStr3 = $TempStr3 ||$TempStr2
               
               when-other
                   show ' '            
              end-evaluate  
            
             Add 1 to #StrCount

       End-While
        let $OutStr = $TempStr3
       let #TempStr2Len = length($TempStr3)
       If $Type='0' and #TempStr2Len >7
                   let $OutStr= substr($TempStr3,1,7)
                
       else 
          If $Type='1' and #TempStr2Len > 3
                let $OutStr= '000'
          end-if
       end-if       
           
   
end-procedure
!****************************************************************************

Begin-Procedure Get_Military_Data($Kartenart_File, $Dienstart, $Dienst_From, $Dienst_To, $Days_Diff, $acc_number
                                  $Control_Nr_lok, $f13, $Dependent_Cnt, $CHAR03, $betr_zul, $betreuungskosten,
                                  $f20, $f19, $f21, :$BeneficiaryPerson)
#Debug show ' In Get_Military_Data $BeneficiaryPerson => ' $BeneficiaryPerson
#debug show ' In Get_Military_Data #_Eo_Ref_Number ' #_Eo_Ref_Number 

Let $BeneficiaryPerson = $BeneficiaryPerson || '<Benefit>'

Let $Sub_Msg_Type = '<SubMessageType>' || $Kartenart_File || '</SubMessageType>'
Let $Service_Type = '<ServiceType>' || $Dienstart || '</ServiceType>'
     
!do ConvertToComponents($Dienst_From , $yy_Ctl , $mm_Ctl , $dd_Ctl)
let $Start_Date = SUBSTR($Dienst_From, 1,4) || '-' || SUBSTR($Dienst_From, 5,2) || '-' || SUBSTR($Dienst_From, 7,2)
!do ConvertToComponents($Dienst_To , $yy_Ctl , $mm_Ctl , $dd_Ctl)
let $End_Date = SUBSTR($Dienst_To, 1,4) || '-' || SUBSTR($Dienst_To, 5,2) || '-' || SUBSTR($Dienst_To, 7,2)

#debug show 'sps $Dienst_From ' $Dienst_From ' $Dienst_To ' $Dienst_To
Let $Start_Of_Period = '<StartOfPeriod>' || $Start_Date || '</StartOfPeriod>'
Let $End_Of_Period = '<EndOfPeriod>' || $End_Date || '</EndOfPeriod>'
Let $Number_Of_Days = '<NumberOfDays>' || $Days_Diff || '</NumberOfDays>'
Let $Reference_Number = '<ReferenceNumber>' || $acc_number || '</ReferenceNumber>'
Let $Control_Number = '<ControlNumber>' || $Control_Nr_lok || '</ControlNumber>'
Let $Average_Daily_Income = '<AverageDailyIncome>' || $f13 || '</AverageDailyIncome>'
Let $Number_Of_Children = '<NumberOfChildren>' || $Dependent_Cnt || '</NumberOfChildren>'
Let $Insurant_Marital_Status = '<InsurantMaritalStatus>' || $CHAR03 || '</InsurantMaritalStatus>'
Let $Allowance_Farm = '<AllowanceFarm>' || '0' || '</AllowanceFarm>'
Let $Allowance_Care_Expenses = '<AllowanceCareExpenses>' || $betreuungskosten || '</AllowanceCareExpenses>'
Let $Daily_Amount_Without_Children = '<DailyAmountWithoutChildren>' || $f20 || '</DailyAmountWithoutChildren>'
Let $Basic_Daily_Amount = '<BasicDailyAmount>' || $f19 || '</BasicDailyAmount>'
Let $Total_APG = '<TotalAPG>' || $f21 || '</TotalAPG>'
Let $PaymentMethod = '<PaymentMethod>' || '2' || '</PaymentMethod>'
!Let $Eo_Ref_Number = #_Eo_Ref_Number 
!#debug show 'sps $Eo_Ref_Number ' $Eo_Ref_Number
!Let $Ref_No = '<BenefRefNumber>' || $Eo_Ref_Number || '</BenefRefNumber>'

!sps PaymentMethod - Need to do

Let $BeneficiaryPerson = $BeneficiaryPerson || $Sub_Msg_Type || $Service_Type || $Start_Of_Period || $End_Of_Period || $Number_Of_Days || $Reference_Number
Let $BeneficiaryPerson = $BeneficiaryPerson || $Control_Number || $Average_Daily_Income || $Number_Of_Children || $Insurant_Marital_Status || $Allowance_Farm
Let $BeneficiaryPerson = $BeneficiaryPerson || $Allowance_Care_Expenses || $Daily_Amount_Without_Children || $Basic_Daily_Amount || $Total_APG || $PaymentMethod
!Let $BeneficiaryPerson = $BeneficiaryPerson || $Ref_No || '</Benefit>' 

#Debug show ' Out Get_Military_Data $BeneficiaryPerson =>' $BeneficiaryPerson
End-Procedure

!**********************************************************************************
Begin-Procedure Employee_process_flag
#debug show 'In Employee_process_flag #ptot_domainid ' #ptot_domainid ' $ptot_year ' $ptot_year ' $ptot_company ' $ptot_company ' $ptot_provtype ' $ptot_provtype ' $ptot_providercd ' $ptot_providercd
#debug show 'In Employee_process_flag $Empl_ID ' $Empl_ID ' #Empl_RCD ' #Empl_RCD ' $ReportBeginDate ' $ReportBeginDate ' $ReportEndDate ' $ReportEndDate

Let $Employee_process_flag = 'Y'
Begin-select
IF_VER.GPCH_IF_VER
 
   Let $Employee_process_flag = 'N'

From PS_GPCH_EG_PERSON IF_VER
Where IF_VER.GPCH_EG_DOMAINID = #ptot_domainid And
      IF_VER.GPCH_RC_PAY_YEAR = #ptot_year And
      IF_VER.COMPANY = $ptot_company And
      IF_VER.GPCH_SI_PROV_TYPE = $ptot_provtype And
      IF_VER.GPCH_SI_PROV_CD = $ptot_providercd And
      IF_VER.EMPLID = $Empl_ID And
      IF_VER.EMPL_RCD = #Empl_RCD And
      IF_VER.BEGIN_DT = $ReportBeginDate And
      IF_VER.END_DT = $ReportEndDate And
      IF_VER.GPCH_IF_VER <> 1
End-Select

#debug show 'Out Employee_process_flag $Employee_process_flag => ' $Employee_process_flag
End-Procedure

!**********************************************************************************
begin-procedure Init_EG_Person
#debug show 'Init_EG_Person #ptot_domainid = ' #ptot_domainid ' $ptot_year = ' $ptot_year ' $ptot_company = ' $ptot_company ' $ReportBeginDate = ' $ReportBeginDate ' $ReportEndDate = ' $ReportEndDate

let #ptot_year = $ptot_year

   Begin-Sql on-error=give_warning 
    DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company AND GPCH_SI_PROV_TYPE='E'
    and BEGIN_DT= $ReportBeginDate and END_DT= $ReportEndDate and GPCH_IF_VER = 1
  End-SQL

end-procedure

!******************************************************************************************
Begin-Procedure Insert_EO_EMPL_XML
#debug show 'Insert_EO_EMPL_XML #ptot_domainid ' #ptot_domainid ' $ptot_year ' $ptot_year ' $ptot_company ' $ptot_company ' $ptot_provtype ' $ptot_provtype ' $ptot_providercd ' $ptot_providercd
#debug show '$Empl_ID ' $Empl_ID_Old ' #Empl_RCD ' #Empl_RCD_Old ' $ReportBeginDate ' $ReportBeginDate ' $ReportEndDate ' $ReportEndDate

let #ptot_year = $ptot_year
   Begin-Sql on-error=give_warning
    Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
    values (#ptot_domainid,#ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$Empl_ID_Old,#Empl_RCD_Old,$ReportBeginDate,$ReportEndDate,1,$BeneficiaryPerson) 
   End-SQL

End-Procedure

!**********************************************************************************
!#include 'gpchut01.sqc'
#include 'gpchut04.sqc'    ! get company informations
#include 'gpchut06.sqc'    ! get run control parameter values
#include 'gpchut07.sqc'    ! get Log
#include 'gpchut11.sqc'    !get Tax and Fak Values
#include 'number.sqc'      ! routines for formatting numbers.
#include 'datetime.sqc'    ! routines for formatting dates and times.
#include 'stdapi.sqc'      ! routines for process scheduler manipulation.
!#include 'sqrtrans.sqc'    ! routines for language translation.
#include 'readxlat.sqc'    ! routines for xlattable translation.
#include 'curdttim.sqc'    ! get-current-datetime procedure
#include 'validdt.sqc'     ! validate date routine
#include 'datemath.sqc'    ! function for date-calculation
!#include 'gpchglbs.sqc'    ! Get Strings Values for GPCHGLOB
!#include 'gpcheo1s.sqc'    ! Get Strings Values for GPCHEO01
!#include 'gpchtx2s.sqc'    ! Get Strings Values for GPCHTX02
!#include 'gpchsi8s.sqc'    ! Get Strings Values for GPCHSI08
!#include 'gpchbk2s.sqc'    ! Get Strings Values for GPCHBK02
!#include 'gpchal4s.sqc'    ! Get Strings Values for GPCHAL04