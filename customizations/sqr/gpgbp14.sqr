!***********************************************************************
!  GPGBP14.SQR - END OF YEAR SUMMARY     P14                           *
!                END OF YEAR CERTIFICATE P60                           *
! This report print the P14 or the P60, depending user's choice        *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------*
!                                                                      !
!       $Release:  HR92                                                !
!           $Bug:  23051849                                            !
!                                                                      !
!----------------------------------------------------------------------*
! Date          Modification                                           *
! ----          ------------                                           *
! 09/2006       -  Modified the whole SQR for NI-Retro Changes         *
! 06/2010       -  If the 1st char is 'S' in SCON then truncate it     *
! 10/2011       -  Problem in NI Amount. P14EDI File. Category X issue *
! 01/2012       -  ASPP Inclusion in Statutory payments                *
!***********************************************************************




!***********************************************************************  
!*** Setting up the environment                                        *
!***********************************************************************

#include 'setenv.sqc'   ! Set environment

begin-setup

#DEFINE PAPER_SIZE_SAV {PAPER_SIZE}
#DEFINE PAPER_SIZE A4
#include 'setupdb.sqc'


 #Define ColR 157  !Column # referenced by Standard Headings

 declare-printer HP-P14
  type=HP
  point-size=7.2
  pitch=18
 end-declare

 declare-layout P14-LANDSCAPE
  paper-size=(11.69,8.27)
  orientation=LANDSCAPE
  line-height=9
  char-width=4.32
  bottom-margin=.05
  left-margin=.05
  right-margin=.05
 end-declare

 declare-report P14
  layout=P14-LANDSCAPE
  printer-type=HP
 end-declare

end-setup

!***********************************************************************   
!*** Constants definitions                                             *
!***********************************************************************

!Define Column Location Variables


#define PosRepID                180

#define PosNIC                   4
#define PosStart                 8
#define PosName                 28
#define PosDate                 26
#define PosDOB                  58
#define PosMName                65
#define PosOfficeName           71
#define PosSex                  86
#define PosAddress              105
#define PosPostal               116
#define PosPay                  92
#define PosWidowLife            98
#define PosTax                  124
#define PosRefund               144
#define PosOfficeNo             143
#define PosOfficeRef            154
#define PosScheme               166
#define PosLoan                 171
#define PosTaxYear              167
#define PosWk53                 180
#define PosTaxCD                142
#define PosWM1                  150
#define Pos1DR                  123
#define Pos1A                   21
#define Pos1B                   47
#define Pos1C                   69
#define Pos1D                   101
#define Pos1E                   135
#define Pos1F                   37
#define Pos1G                   71
#define Pos1H                   103
#define Pos1I                   135
#define Pos9                    168
! FOR 2009
#define Pos1AA                  6
#define Pos1BB                  25
#define Pos1CC                  48
#define Pos1DD                  66
#define Pos1EE                  91
#define Pos1EER                115
#define Pos1FF                 128
#define PosScheme1             165
#define PosVAL1HYN             50
#define PosVAL1KYN             80
#define PosVAL1IYN             110
#define PosVAL1JYN             171
#define PosSex09               88
#define PosAddress09           109
#define PosPay09               70
#define PosTax09               110
#define PosWk5309              152
#define PosTaxCD09             130
#define PosWM109               150
#define PosDate09              167
#define PosWidowLife09         90
#define PosRefund09            144
#define PosPostal09            120
#define PosDOB09               60


!***********************************************************************
!*** Setup Section - Defines two  date variables                       *
!***********************************************************************

BEGIN-SETUP
DECLARE-VARIABLE
  date $LEAVE_DT
  date $W_HIRE_DT_DTU_NATIVE
  date $MAIN_SEL_HIRE_DT2
  ! date $TAX_YEAR_FROM_NATIVE
END-DECLARE
END-SETUP

!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report

        !----------------------------------------------------------
        !***    Call the main procedures
        !----------------------------------------------------------
        do INIT-REPORT
        do MAIN-REPORT
        move #CountError to $CountError 99999
        do Append-Log ('WHERE_STATEMENT'  , $WHERE_STATEMENT)
        do Append-Log ('CountError '  , $CountError)
        do Append-Log('----------------------------- ' , '------------------------------' )
        do Get-log
        

end-report

!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :Init Report
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================
begin-procedure Init-report


        #Debug Show 'Init-report -> ' 

        do INIT-DATETIME
        do INIT-NUMBER
        do INIT-VARIABLES
        do DEFINE-PRCS-VARS
        do GET-RUN-CONTROL-PARMS
        do GET-CURRENT-DATETIME
        
        if isnull($prcs_process_instance)
                #Debug SHOW 'Running P14-P60 SQR'
                do ASK-VALUES !SQR not run through process scheduler
        else
                #Debug SHOW 'Running P14.SQR in the Process Scheduler'
                do GET-VALUES !SQR run through process scheduler
        end-if

        If $P60_IND = 'N'
                let $ReportID    = 'P14'
                let $ReportTitle = 'End of Year Summary '
        else
                let $ReportID    = 'P60'
                let $ReportTitle = 'End of Year Certificate '
        end-if      
#Debug Show 'Init-report <- ' 

end-procedure Init-report


!*=================================================================
! Procedure    :Init-Variables
! Comment      :Initializations of all variables used by the report
!*=================================================================
begin-procedure Init-variables

       
        #Debug Show 'Init-variables -> ' 

        let #TRUE               = 1
        let #FALSE              = 0
        let #CountError         = 0
        let #counter            = 0
        let #TotConPay          = 0
        let $W_PRINT_EE         = 'N'
        let $W_PRINT_DET        = 'N'
        let #VAL1AY             = 0
        let #VAL1BY             = 0
        let #VAL1CY             = 0
        let #VAL_NI_ERS_YTD     = 0
        let #VAL_NI_EES_YTD     = 0
        let #VAL_NI_ERSRBT_YTD  = 0
        let #VAL_NI_EESRBT_YTD  = 0
        let #VAL1DY             = 0
        let #VAL1EY             = 0
        let $SCON               = ' '
        let #VAL_SPPA_YTD       = 0
        let #VAL_SPPB_YTD       = 0
        let #VAL_ASPPA_YTD      = 0
        let #VAL_ASPPB_YTD      = 0
        let #VAL_SHPPA_YTD      = 0
        let #VAL_SHPPB_YTD      = 0
        let #VAL1FY             = 0
        let #VAL1GY             = 0
        let #VAL1HY             = 0
        let #VAL1KY             = 0
        let #VAL1IY             = 0
        let #VAL1JY             = 0
        let #VAL3               = 0
        let #VAL7Y              = 0
        let #VALFOR             = 0
        let #VAL9Y              = 0
        let $VR_WK53            = ' '
        let $REFUND_Y           = ' '
        let #P45_PAY_TD         = 0
        let #P45_TAX_TD         = 0
        let #VALP45_PAY         = 0
        let #VALP45_TAX         = 0
        let $TAXCODE            = ' '
        let #W_Count_NI         = 0
        let #VAL_WIDOW          = 0
        let #VAL_LIFE           = 0
        let #val_taxable_eyu    = 0
        let #val_smp_eyu        = 0
        let #val_sap_eyu        = 0
        let #val_tax_eyu        = 0
        let #val_sl_eyu         = 0
        let #val_ord_spp_eyu    = 0
        let #val_add_spp_eyu    = 0
        let #val_at_lel_eyu     = 0
        let #val_lel_pt_eyu     = 0
        let #val_pt_uap_eyu     = 0
        let #val_uap_uel_eyu    = 0
        let #val_pt_uel_eyu    = 0
        let #val_ni_eyu         = 0
        let $COUNTY_DESCR       = ' '
#Debug Show 'Init-variables <- '   
end-procedure Init-variables


!*=================================================================
! Procedure   :Ask-Values
! Comment     :This procedure prompts the user for those variable
!              values that will be used throughout the report.
!              ASK-VALUES is called when the user is not using
!              the process scheduler. This procedure calls whatever
!              procedures are needed. (eg. do ASK-FROM-THRU-DATE).
!*=================================================================
begin-procedure Ask-values

        
         #Debug Show 'Ask-values -> ' 
        !*---------------------------------------------------------
        !***    Enter the Calender Run ID
        !*---------------------------------------------------------
        !input $PNL_CAL_RUN_ID 'Enter Calender Run ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Entity
        !*---------------------------------------------------------
        !input $PNL_PAY_ENTITY 'Enter Pay Entity'

        !*---------------------------------------------------------
        !***    Enter the Deptid
        !*---------------------------------------------------------
        !input $PNL_DEPTID 'Enter Department ID'

        !*---------------------------------------------------------
        !***    Enter the Pay Group
        !*---------------------------------------------------------
        !input $PNL_PAYGROUP 'Enter Pay Group '

        !*---------------------------------------------------------
        !***    Enter the Employee ID
        !*---------------------------------------------------------
        !input $PNL_EMPLID 'Enter Employee ID '

        !*---------------------------------------------------------
        !***    Enter the Tax Period
        !*---------------------------------------------------------
        !input $PNL_TAX_PERIOD 'Enter Tax Period'

        !*---------------------------------------------------------
        !***    Enter the Frequency ID
        !*---------------------------------------------------------
        !input $PNL_FREQUENCY_ID 'Enter Frequency ID'

        !*---------------------------------------------------------
        !***    Enter the Tax Year
        !*---------------------------------------------------------
        !input $PNL_TAX_YEAR 'Enter The Year the Tax Year Begins In'

#Debug Show 'Ask-values <- '   
end-procedure Ask-values

!*=================================================================
! Procedure     :Get-Values
! Comment       :This procedure gets the variable name (beginning
!                with a $) that will be used throughout the report
!                using the run control parameters called in
!                GET-RUN-CONTROL-PARMS.
!*=================================================================
begin-procedure Get-values
#Debug Show 'Get-values -> ' 

let $sql-statement = 'GPGBP14.SQR,GET-VALUES,Select,PS_GPGB_RUNCTL_SQR'

begin-SELECT on-error=SQL-ERROR   
C.CAL_RUN_ID
C.DEPTID
C.PAY_ENTITY
C.GP_PAYGROUP
C.EMPLID
C.FREQUENCY_ID
C.GPGB_TAX_PERIOD
C.GPGB_TAX_BGN_YR
C.GPGB_P60_IND
C.GPGB_EDI_RTI_IND

        let $PNL_CAL_RUN_ID         = RTRIM(&C.CAL_RUN_ID,' ')
        let $PNL_DEPTID             = RTRIM(&C.DEPTID,' ')
        let $PNL_PAY_ENTITY         = RTRIM(&C.PAY_ENTITY,' ')
        let $PNL_PAYGROUP           = RTRIM(&C.GP_PAYGROUP,' ')
        let $PNL_EMPLID             = RTRIM(&C.EMPLID,' ')
        let $PNL_TAX_PERIOD         = EDIT(#PNL_TAX_PERIOD,'09')
        let #PNL_TAX_PERIOD         = &C.GPGB_TAX_PERIOD
        let $PNL_FREQUENCY_ID       = RTRIM(&C.FREQUENCY_ID,' ')
        let $PNL_TAX_YEAR           = RTRIM(EDIT(&C.GPGB_TAX_BGN_YR, '9999'),' ')
        let #PNL_TAX_YEAR           = &C.GPGB_TAX_BGN_YR
        let $P60_IND                = RTRIM(&C.GPGB_P60_IND,' ')
        let $EDI_RTI_IND             = RTRIM(&C.GPGB_EDI_RTI_IND,' ')
        
        ! Format Tax Year from / Thru for comparison     
        let #NEXT_TAX_YEAR      = #PNL_TAX_YEAR +1
        let #W_MM               = 04
        let #W_DD               = 06
        DO DTU-Format-Date(#PNL_TAX_YEAR,#W_MM,#W_DD,$TAX_YEAR_FROM)
        let #W_DD               = 05
        DO DTU-Format-Date(#NEXT_TAX_YEAR,#W_MM,#W_DD,$TAX_YEAR_THRU)
        DO CONVERT-FROM-DTU-DATE($TAX_YEAR_FROM, $TAX_YEAR_FROM_NATIVE)
        DO CONVERT-FROM-DTU-DATE($TAX_YEAR_THRU, $TAX_YEAR_THRU_NATIVE)

FROM  PS_GPGB_RUNCTL_SQR C
WHERE C.OPRID         = $Prcs_OprID
AND C.RUN_CNTL_ID     = $Prcs_Run_Cntl_ID

end-SELECT
#Debug Show 'Get-values <- ' 
end-procedure Get-values


!******************************************************************
!           S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : Main Report                                     !
! Descr         : This procedure is the main procedure of the     !
!                 report and calls other procedures               !
!                                                                 !
!*=================================================================

begin-procedure Main-report
#Debug Show 'Main-report -> ' 
       
        do Load_Country_Description
         
        do BUILD-WHERE-RUNCTL
        
        do P14-SELECT-EMPLOYEES

        do UPDATE-PRCS-RUN-STATUS
         
        #DEFINE PAPER_SIZE {PAPER_SIZE_SAV}
               
#Debug Show 'Main-report <- '
end-procedure Main-report


!*=================================================================
! Procedure:  P14-Select-Employees                                !
! Descr:      Main Select                                         !
!                                                                 !
!*=================================================================

begin-procedure P14-Select-employees
#Debug Show 'P14-Select-employees -> ' 

   let $W_Pay_entity = ' '
   let $W_Emplid     = ' '
   let $W_HireDt     = ' '
   let $W_NI         = ' '
   let $PREV_MAIN_SEL_EMPLID = ' '
   let $sql-statement = 'GPGBP14.SQR,P14-Select-employees,Select,PS_GPGB_RTI_RSLT' 
   
  
begin-SELECT on-error=SQL-ERROR

DISTINCT A.HIRE_DT   &A.HIRE_DT           
A.EMPLID             &A.EMPLID            
A.EMPL_RCD           &A.EMPL_RCD          
A.PAY_ENTITY         &A.PAY_ENTITY        
A.GPGB_TAX_BGN_YR    &A.GPGB_TAX_BGN_YR
A.EMPL_STATUS        &A.EMPL_STATUS
A.PRC_ORD_TS         &A.PRC_ORD_TS       
 
   let $EmployeeBreak = rtrim(&A.EMPLID,' ') || to_char(&A.EMPL_RCD) || &A.HIRE_DT 
   let $EmployeeBreak1 = rtrim(&A.EMPLID,' ') || to_char(&A.EMPL_RCD) 
   
   let $MAIN_SEL_EMPLID        = RTRIM(&A.EMPLID,' ')
   let #MAIN_SEL_EMPL_RCD      = &A.EMPL_RCD
   let $MAIN_SEL_PAY_ENTITY    = RTRIM(&A.PAY_ENTITY,' ')
   let  $MAIN_HIRE_DATE        =  &A.HIRE_DT
   let $W_HIRE_DT               = DATETOSTR(&A.HIRE_DT, 'YYYY-MM-DD')
   let $Hire_Dt_Sp             = DATETOSTR(&A.HIRE_DT, 'DD MM YYYY')
   let #TAX_BGN_YR             = &A.GPGB_TAX_BGN_YR
   let $EMPL_STATUS            = LTRIM(RTRIM(&A.EMPL_STATUS , ' '),' ') 
   let $MAIN_SEL_EMPLID1       =  $MAIN_SEL_EMPLID  || to_char(&A.EMPL_RCD) || &A.HIRE_DT 

     if $W_Pay_Entity <> $MAIN_SEL_PAY_ENTITY
         do GET-PAY-ENTITY($MAIN_SEL_PAY_ENTITY,$AsOfDate,$PYENT_Descr,$PYENT_Descr,$PYENT_DescrShort,
                        $PYENT_Addr1,$PYENT_Addr2,$PYENT_Addr3,$PYENT_Addr4,$PYENT_City,
                        $PYENT_County,$PYENT_PostCode,$PYENT_Country,$PYENT_NAME,#PYENT_TAXNUM,
                        $PYENT_TAX_DNAME,$PYENT_PAYE_REF,$PYENT_PERMIT_NUM)
         
         let $W_Pay_Entity = $MAIN_SEL_PAY_ENTITY
     end-if

     DO CONVERT-TO-DTU-DATE($MAIN_HIRE_DATE, $MAIN_HIRE_DATE_DTU)
     DO CONVERT-FROM-DTU-DATE($MAIN_HIRE_DATE_DTU , $MAIN_HIRE_DATE_DTU_native)   

   IF $P60_IND = 'Y'  
          IF  $MAIN_SEL_EMPLID1  <> $PREV_MAIN_SEL_EMPLID      
                         DO   GET-MAX-LEAVE-DATE           
                    let $W_TERM_DT   =  LTRIM(RTRIM($W_TERM_DT , ' '),' ')
     
               IF    $W_TERM_DT = ' ' or $W_TERM_DT  <= $TAX_YEAR_THRU or isnull($W_TERM_DT)                                
                              DO GET-MAX-HIRE-DATE  
                                 IF  ($EMPL_STATUS ='R' OR $EMPL_STATUS ='D')
                                        let $EMPL_STATUS = 'T' ! Retired and terminated employees not shown in p60
                                 END-IF                             
                           IF    ($W_HIRE_DT = $Max_Hire_Date AND $EMPL_STATUS <> 'T' ) 
                                     print $EmployeeBreak1 () on-break level = 1 procedure=Start-New-page Print=Never
                                     DO Get-Employee-details
                                     Do EMPL-REF-NBR                                     
                                     DO Print-Employee-Personal-details                                                    
                                     DO Get-NI-category
                                     DO Print-summary   
                           END-IF 
               End-IF   
       
          END-IF 
        ELSE
            ! P14 code      
             IF  ($MAIN_SEL_EMPLID1  <>   $PREV_MAIN_SEL_EMPLID ) 
             print $EmployeeBreak () on-break level = 1 procedure=Start-New-page Print=Never 
             DO Get-Employee-details  
             Do EMPL-REF-NBR    
             DO Print-Employee-Personal-details
             DO Get-NI-category
             DO Print-summary    
             END-IF
       End-If
       
      let $PREV_MAIN_SEL_EMPLID =  $MAIN_SEL_EMPLID  || to_char(&A.EMPL_RCD) || &A.HIRE_DT
      DO RESET-TOTALS   
              
FROM [PS_GPGB_RTI_RSLT A:$RECORD_SELECT] A, PS_GPGB_EE_RSLT B
[$Where_statement]
[$RUN_FINALIZED_A]
AND A.PRC_ORD_TS = ( 
 SELECT MAX(AA.PRC_ORD_TS) 
  FROM [PS_GPGB_RTI_RSLT AA:$RECORD_SELECT] AA 
 WHERE AA.EMPLID = A.EMPLID 
   AND AA.EMPL_RCD = A.EMPL_RCD 
   AND AA.HIRE_DT = A.HIRE_DT 
   AND AA.PAY_ENTITY = A.PAY_ENTITY 
   AND AA.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR ) 
   AND A.RSLT_SEG_NUM = ( 
 SELECT MAX(AB.RSLT_SEG_NUM) 
  FROM [PS_GPGB_RTI_RSLT AB:$RECORD_SELECT] AB 
 WHERE AB.EMPLID = A.EMPLID 
   AND AB.EMPL_RCD = A.EMPL_RCD 
   AND AB.HIRE_DT = A.HIRE_DT 
   AND AB.PAY_ENTITY = A.PAY_ENTITY 
   AND AB.GPGB_TAX_BGN_YR = A.GPGB_TAX_BGN_YR 
   AND AB.CAL_ID = A.CAL_ID 
   AND AB.PRC_ORD_TS = A.PRC_ORD_TS 
   AND AB.CAL_RUN_ID = A.CAL_RUN_ID
  AND AB.ORIG_CAL_RUN_ID = A.ORIG_CAL_RUN_ID
  AND AB.GP_PAYGROUP = A.GP_PAYGROUP)
   AND B.EMPLID=A.EMPLID 
   AND B.EMPL_RCD=A.EMPL_RCD 
   AND B.CAL_RUN_ID=A.CAL_RUN_ID
   AND B.GP_PAYGROUP=A.GP_PAYGROUP
   AND B.CAL_ID=A.CAL_ID
   AND B.ORIG_CAL_RUN_ID=A.ORIG_CAL_RUN_ID
   AND B.ORIG_CAL_RUN_ID=B.CAL_RUN_ID
   AND B.RSLT_SEG_NUM=A.RSLT_SEG_NUM
ORDER BY A.EMPLID,
         A.EMPL_RCD,
         A.HIRE_DT

END-SELECT

#Debug Show 'P14-Select-employees <- ' 
end-procedure P14-Select-employees


!*=================================================================
! Procedure:  Get-Employee-details                                !
! Descr:      Get-Employee-details                                !
!                                                                 !
!*=================================================================
begin-procedure Get-Employee-details
#Debug Show 'Get-Employee-details -> ' 
begin-SELECT on-error=SQL-ERROR
B.HIRE_DT            &B.HIRE_DT      
B.EMPLID             &B.EMPLID            
B.EMPL_RCD           &B.EMPL_RCD          
B.PAY_ENTITY         &B.PAY_ENTITY        
B.GPGB_TAX_BGN_YR    &B.GPGB_TAX_BGN_YR
B.CAL_RUN_ID         &B.CAL_RUN_ID 
B.GP_PAYGROUP        &B.GP_PAYGROUP 
B.CAL_ID             &B.CAL_ID
B.ORIG_CAL_RUN_ID    &B.ORIG_CAL_RUN_ID
B.RSLT_SEG_NUM       &B.RSLT_SEG_NUM      
B.TAX_CODE_UK        &B.TAX_CODE_UK
B.TAX_BASIS_UK       &B.TAX_BASIS_UK
B.NATIONAL_ID        &B.NATIONAL_ID
B.LEAVE_DT           &B.LEAVE_DT
B.FREQUENCY_ID       &B.FREQUENCY_ID 
B.GPGB_P45_PAY_TD    &B.GPGB_P45_PAY_TD
B.GPGB_P45_TAX_TD    &B.GPGB_P45_TAX_TD
B.GPGB_WK53_IND      &B.GPGB_WK53_IND
! B.GPGB_SCON          &B.GPGB_SCON
B.GPGB_SV_TAX_IND    &B.GPGB_SV_TAX_IND
B.LAST_NAME          &B.LAST_NAME
B.FIRST_NAME         &B.FIRST_NAME
B.MIDDLE_NAME        &B.MIDDLE_NAME
B.NAME_PREFIX        &B.NAME_PREFIX
B.BIRTHDATE          &B.BIRTHDATE
B.DT_OF_DEATH        &B.DT_OF_DEATH
B.SEX                &B.SEX
B.COUNTRY            &B.COUNTRY
B.ADDRESS1           &B.ADDRESS1
B.ADDRESS2           &B.ADDRESS2
B.ADDRESS3           &B.ADDRESS3
B.ADDRESS4           &B.ADDRESS4
B.CITY               &B.CITY
B.STATE              &B.STATE
B.POSTAL             &B.POSTAL
B.GPGB_SMP           &B.GPGB_SMP
B.GPGB_SSP           &B.GPGB_SSP
B.GPGB_SPPA          &B.GPGB_SPPA
B.GPGB_SPPB          &B.GPGB_SPPB
B.GPGB_ASPPA         &B.GPGB_ASPPA
B.GPGB_ASPPB         &B.GPGB_ASPPB
B.GPGB_SHPPA         &B.GPGB_SHPPA
B.GPGB_SHPPB         &B.GPGB_SHPPB
B.GPGB_SAP           &B.GPGB_SAP
B.GPGB_EE_GROSS      &B.GPGB_EE_GROSS
B.GPGB_FORGN_TAX     &B.GPGB_FORGN_TAX
B.GPGB_WIDOW         &B.GPGB_WIDOW 
B.GPGB_LIFE          &B.GPGB_LIFE
B.GPGB_EE_TAX        &B.GPGB_EE_TAX
B.GPGB_EE_SL         &B.GPGB_EE_SL
B.GPGB_EE_TC         &B.GPGB_EE_TC
B.EMPL_STATUS        &B.EMPL_STATUS       
 
   let $MAIN_SEL_CAL_RUN_ID    = RTRIM(&B.CAL_RUN_ID,' ')
   let $MAIN_SEL_CAL_ID        = RTRIM(&B.CAL_ID,' ')
   let $MAIN_SEL_PAYGROUP      = RTRIM(&B.GP_PAYGROUP,' ')
   let #MAIN_SEL_RSLT_SEG_NUM  = &B.RSLT_SEG_NUM
   let #TAX_BASIS              = &B.TAX_BASIS_UK
   let $TAXCODE                = &B.TAX_CODE_UK
   let $NI_NUMBER              = &B.NATIONAL_ID
   IF ISBLANK($NI_NUMBER)
    do GET-CURRENT-NI-NUMBER
    Let $NI_NUMBER = &PN.NATIONAL_ID
   END-IF
   let $W_TERM_DT              = DATETOSTR(&B.LEAVE_DT, 'YYYY-MM-DD') 
   let $TERM_DT_SP             = &B.LEAVE_DT 
   let $FREQUENCY_ID           = RTRIM(&B.FREQUENCY_ID,' ')
   let #P45_PAY_TD             = &B.GPGB_P45_PAY_TD
   let #P45_TAX_TD             = &B.GPGB_P45_TAX_TD
   let $EE_ADDRESS1            = RTRIM(&B.ADDRESS1, ' ')
   let $EE_ADDRESS2            = RTRIM(&B.ADDRESS2, ' ')
   let $EE_ADDRESS3            = RTRIM(&B.ADDRESS3, ' ')
   let $EE_CITY                = RTRIM(&B.CITY, ' ')
   let $EE_POSTAL              = RTRIM(&B.POSTAL, ' ')
   let $EE_COUNTY              = RTRIM(&B.STATE, ' ')
   let $EE_COUNTRY             = RTRIM(&B.COUNTRY, ' ')
   let $PERS_DT_forename       = RTRIM(&B.FIRST_NAME , ' ')
   let $PERS_DT_middlename     = RTRIM(&B.MIDDLE_NAME, ' ')
   let $PERS_DT_surname        = RTRIM(&B.LAST_NAME, ' ')
   let $PERS_DT_forenames      = $PERS_DT_FORENAME || ' ' || $PERS_DT_MIDDLENAME
   let $PERS_DT_fullname       = $PERS_DT_FORENAME || ' ' || $PERS_DT_SURNAME
   let $PERS_DT_birthdate      = DATETOSTR(&B.BIRTHDATE, 'DD MM YYYY')
   let $PERS_DT_sex            = RTRIM(&B.SEX,' ')
   let $PERS_DT_nameprefix     = RTRIM(&B.NAME_PREFIX,' ')
   let #VAL1FY                 = &B.GPGB_SSP
  
     IF #VAL1FY < 0 
      let #VAL1FY = 0
     END-IF  
      
    let #VAL1GY                 = &B.GPGB_SMP

     if #VAL1GY < 0 
       let #VAL1GY =0
      end-if

     let #VAL_SPPA_YTD           = &B.GPGB_SPPA
   
      IF #VAL_SPPA_YTD < 0 
      let  #VAL_SPPA_YTD = 0
      END-IF  

      let #VAL_SPPB_YTD           = &B.GPGB_SPPB
    
      IF #VAL_SPPB_YTD < 0 
      let  #VAL_SPPB_YTD = 0
       END-IF  
       
            let #VAL_ASPPA_YTD           = &B.GPGB_ASPPA
   
      IF #VAL_ASPPA_YTD < 0 
      let  #VAL_ASPPA_YTD = 0
      END-IF  

      let #VAL_ASPPB_YTD           = &B.GPGB_ASPPB
    
     IF #VAL_ASPPB_YTD < 0 
      let  #VAL_ASPPB_YTD = 0
      END-IF  
  
     let #VAL_SHPPA_YTD           = &B.GPGB_SHPPA
   
      IF #VAL_SHPPA_YTD < 0 
      let  #VAL_SHPPA_YTD = 0
      END-IF  

      let #VAL_SHPPB_YTD           = &B.GPGB_SHPPB
    
      IF #VAL_SHPPB_YTD < 0 
      let  #VAL_SHPPB_YTD = 0
       END-IF 
  
    let #VAL1IY                 = &B.GPGB_SAP

    if #VAL1IY < 0 
         let #VAL1IY =0
        end-if

   let #VAL1JY                 = &B.GPGB_EE_SL
    IF #VAL1JY < 0
     let #VAL1JY = 0
     END-IF                 
   let #VAL3                   = &B.GPGB_EE_GROSS 
   IF #VAL3 < 0
    LET #VAL3 = 0
    END-IF                    
   let #VAL7Y                  = &B.GPGB_EE_TAX
   let #VALFOR                 = &B.GPGB_FORGN_TAX
   let #VAL9Y                  = &B.GPGB_EE_TC
   let #P45_PAY_TD             = &B.GPGB_P45_PAY_TD
   let #P45_TAX_TD             = &B.GPGB_P45_TAX_TD
   let #VAL_LIFE               = &B.GPGB_LIFE
   let #VAL_WIDOW              = &B.GPGB_WIDOW
   let $VR_WK53                = RTRIM(&B.GPGB_WK53_IND,' ')
   
       if $VR_WK53='53' or $VR_WK53='54' or $VR_WK53='56'
       else
       let $VR_WK53=' '
       end-if
   ! let $SCON                   = RTRIM(&B.GPGB_SCON,' ')

     if #VAL1JY < 0
     let #VAL1JY = 0
     end-if
     
     do GET-COUNTY-DESCR($EE_COUNTY,$EE_COUNTRY,$COUNTY_DESCR)  
 
FROM [PS_GPGB_RTI_RSLT B:$RECORD_SELECT] B
WHERE B.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
   AND B.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY
   AND B.EMPLID = $MAIN_SEL_EMPLID
   AND B.EMPL_RCD = #MAIN_SEL_EMPL_RCD
   [$RUN_FINALIZED_B]
   AND B.HIRE_DT = $MAIN_HIRE_DATE_DTU_native
   AND B.ORIG_CAL_RUN_ID = B.CAL_RUN_ID
   [$where_CALENDER_WHERE_B]
   AND B.PRC_ORD_TS = (SELECT MAX(BB.PRC_ORD_TS)
                       FROM [PS_GPGB_RTI_RSLT BB:$RECORD_SELECT] BB
                                  WHERE BB.EMPLID = B.EMPLID 
                                 AND BB.EMPL_RCD = B.EMPL_RCD 
                                 AND BB.HIRE_DT = B.HIRE_DT  
                                 AND BB.PAY_ENTITY = B.PAY_ENTITY 
                                 AND BB.GPGB_TAX_BGN_YR = B.GPGB_TAX_BGN_YR)
   AND B.RSLT_SEG_NUM = (SELECT MAX(BBB.RSLT_SEG_NUM) FROM  [PS_GPGB_RTI_RSLT BBB:$RECORD_SELECT] BBB 
                                 WHERE BBB.EMPLID = $MAIN_SEL_EMPLID
                                 AND BBB.EMPL_RCD = #MAIN_SEL_EMPL_RCD
                                 AND BBB.PRC_ORD_TS = B.PRC_ORD_TS 
                                 AND BBB.HIRE_DT    = B.HIRE_DT
                                 AND BBB.PAY_ENTITY = B.PAY_ENTITY 
                                 AND BBB.GPGB_TAX_BGN_YR = B.GPGB_TAX_BGN_YR 
                                 AND BBB.CAL_ID = B.CAL_ID
                                 AND BBB.CAL_RUN_ID = B.CAL_RUN_ID
                                 AND BBB.ORIG_CAL_RUN_ID = B.ORIG_CAL_RUN_ID
                                 AND BBB.GP_PAYGROUP = B.GP_PAYGROUP
                                 )                              
END-SELECT

if $P60_IND = 'Y' AND $EDI_RTI_IND = 'R'
BEGIN-SELECT on-error=SQL-ERROR

SUM(A.GPGB_TAXABLE_PAY)   &A.GPGB_TAXABLE_PAY
SUM(A.GPGB_SMP_EYU)       &A.GPGB_SMP_EYU
SUM(A.GPGB_SAP_EYU)       &A.GPGB_SAP_EYU
SUM(A.GPGB_EE_TAX_EYU)    &A.GPGB_EE_TAX_EYU
SUM(A.GPGB_EE_SL_EYU)     &A.GPGB_EE_SL_EYU
SUM(A.GPGB_ORD_SPP)       &A.GPGB_ORD_SPP
SUM(A.GPGB_ADD_SPP)       &A.GPGB_ADD_SPP
SUM(A.GPGB_SHPP_EYU)      &A.GPGB_SHPP_EYU
    let #val_taxable_eyu = &A.GPGB_TAXABLE_PAY
    let #val_smp_eyu = &A.GPGB_SMP_EYU
    let #val_sap_eyu = &A.GPGB_SAP_EYU
    let #val_tax_eyu = &A.GPGB_EE_TAX_EYU
    let #val_sl_eyu  = &A.GPGB_EE_SL_EYU
    let #val_ord_spp_eyu = &A.GPGB_ORD_SPP
    let #val_add_spp_eyu = &A.GPGB_ADD_SPP + &A.GPGB_SHPP_EYU    
    
FROM PS_GPGB_RTI_ADJ A 
 WHERE A.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
   AND A.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND A.EMPLID = $MAIN_SEL_EMPLID
   AND A.EMPL_RCD = #MAIN_SEL_EMPL_RCD  
   AND A.HIRE_DT = $MAIN_HIRE_DATE_DTU_native 
   GROUP BY A.EMPLID
END-SELECT
end-if
#Debug Show 'Get-Employee-details <- ' 
end-procedure  Get-Employee-details

!*=================================================================
! Procedure: GET-CURRENT-NI-NUMBER                                !
! Descr:     Get Current NI Number                                !
!                                                                 !
!*=================================================================

begin-procedure GET-CURRENT-NI-NUMBER
#debug show ' Procedure Name -> GET-CURRENT-NI-NUMBER'

BEGIN-SELECT
PN.NATIONAL_ID  &PN.NATIONAL_ID
FROM PS_PERS_NID PN
WHERE PN.EMPLID = $MAIN_SEL_EMPLID 
AND PN.NATIONAL_ID_TYPE = 'PR_9' 
AND PN.COUNTRY = 'GBR' 

END-SELECT

#debug show ' Procedure Name <- GET-CURRENT-NI-NUMBER'
end-procedure GET-CURRENT-NI-NUMBER

!*=================================================================
! Procedure: EMPL-REF-NBR                                         !
! Descr:     Get Employement Reference Number                     !
!                                                                 !
!*=================================================================

begin-procedure EMPL-REF-NBR
#debug show ' Procedure Name -> EMPL-REF-NBR'

BEGIN-SELECT
GPGB_RTI_EMPMT_NBR         &empl_ref_nbr

FROM PS_GPGB_RTI_EMPMAP EMAP 
WHERE EMAP.EMPLID = $MAIN_SEL_EMPLID
   AND EMAP.EMPL_RCD = #MAIN_SEL_EMPL_RCD  
   AND EMAP.EFFDT = (SELECT Max(EFFDT) FROM PS_GPGB_RTI_EMPMAP E_EMAP 
                     WHERE E_EMAP.EMPLID = EMAP.EMPLID
                     AND E_EMAP.EMPL_RCD = EMAP.EMPL_RCD
                     AND E_EMAP.EFFDT <= &A.PRC_ORD_TS)
   AND EMAP.EFFSEQ = (SELECT Max(EFFSEQ) FROM PS_GPGB_RTI_EMPMAP ES_EMAP 
                     WHERE ES_EMAP.EMPLID = EMAP.EMPLID
                     AND ES_EMAP.EMPL_RCD = EMAP.EMPL_RCD
                     AND ES_EMAP.EFFDT = EMAP.EFFDT)
                  
END-SELECT

#debug show ' Procedure Name <- EMPL-REF-NBR'
end-procedure EMPL-REF-NBR


!*=================================================================
! Procedure:  GET-MAX-HIRE-DATE                                   !
! Descr:      Get Max Hire date                                   !
!*=================================================================
begin-procedure GET-MAX-HIRE-DATE 
#Debug Show 'GET-MAX-HIRE-DATE-> '
begin-SELECT on-error=SQL-ERROR   
MAX(E.HIRE_DT) &E.HIRE_DT

        let $Max_Hire_Date = DATETOSTR(&E.HIRE_DT, 'YYYY-MM-DD')

#ifdef debug_y
   SHOW 'Max Hire Date > ' $Max_Hire_Date
#end-if

FROM [PS_GPGB_RTI_RSLT E:$RECORD_SELECT] E
WHERE E.EMPLID          = $MAIN_SEL_EMPLID
  AND E.EMPL_RCD        = #MAIN_SEL_EMPL_RCD
  AND E.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR

END-SELECT
#Debug Show 'GET-MAX-HIRE-DATE <- ' 
end-procedure GET-MAX-HIRE-DATE

!*=================================================================
! Procedure:  GET-MAX-LEAVE-DATE                                   !
! Descr:      Get Max LEAVE date                                   !
!*=================================================================
begin-procedure GET-MAX-LEAVE-DATE 
#Debug Show 'GET-MAX-LEAVE-DATE -> '
begin-SELECT on-error=SQL-ERROR   
MAX(E.LEAVE_DT) &E.LEAVE_DT

        let $W_TERM_DT = DATETOSTR(&E.LEAVE_DT, 'YYYY-MM-DD')
               
#ifdef debug_y
   SHOW 'Max Leave Date > ' $W_TERM_DT 
#end-if

FROM [PS_GPGB_RTI_RSLT E:$RECORD_SELECT] E

WHERE E.EMPLID          = $MAIN_SEL_EMPLID
  AND E.EMPL_RCD        = #MAIN_SEL_EMPL_RCD
  AND E.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR

END-SELECT
#Debug Show 'GET-MAX-LEAVE-DATE<- ' 
end-procedure GET-MAX-LEAVE-DATE


!*=================================================================
! Procedure:  GET-COUNTY-DESCR                    !
! Descr    :  Fetches the county description   ! 
!*=================================================================
begin-procedure GET-COUNTY-DESCR($EE_COUNTY,$EE_COUNTRY,:$COUNTY_DESCR)
#Debug Show 'GET-COUNTY-DESCR-> '
BEGIN-SELECT on-error=SQL-ERROR 
A.DESCR       &A.DESCR

      LET $COUNTY_DESCR = &A.DESCR

FROM PS_STATE_TBL A 
WHERE A.COUNTRY = $EE_COUNTRY
  AND A.STATE = $EE_COUNTY
  
END-SELECT

#Debug Show 'GET-COUNTY-DESCR <- '
end-procedure GET-COUNTY-DESCR     
   


!*=================================================================
! Procedure:  Print-Employee-Personal-details                     !
! Descr    :  Prints the Pay Entity & Employee Personal Details   ! 
!*=================================================================
begin-procedure Print-Employee-Personal-details
#Debug Show 'Print-Employee-Personal-details-> '
        let $Return_Val= ' '
        print $ReportID                         (,{PosRepID})       BOLD
        print $PYENT_NAME                       (+1,{PosStart})
        
        if #PNL_TAX_YEAR >= 2013 AND $P60_IND = 'Y' 
        print 'Pay As You Earn'                 (,{PosOfficeName})
        else
        print $PYENT_TAX_DNAME                  (,{PosOfficeName})
        end-if
        
        let $PYENT_TAXNUM = to_char(#PYENT_TAXNUM)
        let #PYENT_TAXNUM_LEN = length(rtrim($PYENT_TAXNUM,''))
        if #PYENT_TAXNUM_LEN < 3
        let $Leading_Zeros = substr('000',1, (3 - #PYENT_TAXNUM_LEN))
        let $PYENT_TAXNUM = $Leading_Zeros || $PYENT_TAXNUM
        end-if
 
        print $PYENT_TAXNUM                     (,{PosOfficeNo})    EDIT 999
        print $PYENT_PAYE_REF                   (,{PosOfficeRef})
        print $PYENT_Addr1                      (+1,{PosStart})
        print $PYENT_Addr2                      (+1,{PosStart})
        print #NEXT_TAX_YEAR                    (,{PosTaxYear})     EDIT 9999
        print $PYENT_Addr3                      (+1,{PosStart})
        print $PYENT_City                       (+1,{PosStart})
        print $PYENT_PostCode                   (+1,{PosStart})

        If $PYENT_Country <> 'GBR'
           
              Lookup Base_Country_Descr $PYENT_Country $Return_Val
       if Not Isnull ($Return_Val)
          let $PYENT_Country_DESCR = rtrim($Return_Val,' ')
              end-if
            print $PYENT_Country_DESCR               (+1,{PosStart})
        else
            print ' '                                (+1,{PosStart})
        end-if


      if (#PNL_TAX_YEAR >= 2009)

           
           print $EE_ADDRESS1                      (+5,{PosAddress09})

           Let $temp_nid = rtrim(substr($NI_NUMBER,1,2), '')

           if $temp_nid <> 'TN'
              print $NI_NUMBER                        (,{PosName})
           end-if


           if $P60_IND = 'N'
              print $PERS_DT_birthdate                (,{PosDOB09})
           end-if

           print $PERS_DT_SEX                      (,{PosSex09})
           print $EE_ADDRESS2                      (+1,{PosAddress09})

           print $EE_ADDRESS3                      (+1,{PosAddress09})
           print $PERS_DT_surname                  (,{PosName})

           print $EE_CITY                          (+1,{PosAddress09})
           
           let $COUNTY_DESCR = $COUNTY_DESCR || '  ' || $EE_POSTAL
           
           print $COUNTY_DESCR                       (+1,{PosAddress09})
           !print $EE_POSTAL                        (,{PosPostal09})

           If $EE_COUNTRY <> 'GBR' AND $EE_COUNTRY <> ' ' AND  $EE_COUNTRY <> ''
             
              Lookup Base_Country_Descr $EE_COUNTRY $Return_Val
              if Not Isnull ($Return_Val)
                 let $EE_COUNTRY_Descr = rtrim($Return_Val,' ')
              end-if
              print $EE_COUNTRY_Descr                  (+1,{PosAddress09})
           else
              print ' '                                (+1,{PosAddress09})
           end-if

        else
           print $EE_ADDRESS1                      (+5,{PosAddress})

           Let $temp_nid = rtrim(substr($NI_NUMBER,1,2), '')

           if $temp_nid <> 'TN'
              print $NI_NUMBER                        (,{PosName})
           end-if


           if $P60_IND = 'N'
              print $PERS_DT_birthdate                (,{PosDOB})
           end-if

           print $PERS_DT_SEX                      (,{PosSex})
           print $EE_ADDRESS2                      (+1,{PosAddress})

           print $EE_ADDRESS3                      (+1,{PosAddress})
           print $PERS_DT_surname                  (,{PosName})

           print $EE_CITY                          (+1,{PosAddress})

           print $EE_COUNTY                        (+1,{PosAddress})
           print $EE_POSTAL                        (,{PosPostal})

           If $EE_COUNTRY <> 'GBR' AND $EE_COUNTRY <> ' ' AND  $EE_COUNTRY <> ''
              Lookup Base_Country_Descr $EE_COUNTRY $Return_Val
              if Not Isnull ($Return_Val)
                 let $EE_COUNTRY_Descr = rtrim($Return_Val,' ')
              end-if
              print $EE_COUNTRY_Descr                  (+1,{PosAddress})
           else
              print ' '                                (+1,{PosAddress})
           end-if
        end-if

        print $PERS_DT_Forenames                (,{PosName})

        if length(RTRIM($MAIN_SEL_EMPLID,' ')) <= 11
           print $MAIN_SEL_EMPLID                  (+3,{PosName})
           print ','                               (,+12)
           print #MAIN_SEL_EMPL_RCD                (,+1)         EDIT 009
        else
           print $MAIN_SEL_EMPLID                  (+3,{PosName})
           print #MAIN_SEL_EMPL_RCD                (,+1)         EDIT 009
        end-if
        
        If not isnull(&empl_ref_nbr)
            Let #empl_ref_nbr = &empl_ref_nbr
            print ','                               (,+12)
            print #empl_ref_nbr                     (,+1)        EDIT 009
        end-if
        
#Debug Show 'Print-Employee-Personal-details <- '
end-procedure Print-Employee-Personal-details



!*=================================================================
! Procedure:  Get-NI-category                                     !
! Descr:      when NI category changes                            !
!                                                                 !
!*=================================================================
begin-procedure Get-NI-category
#Debug Show 'Get-NI-category-> '
let #ni_counter = 0
begin-SELECT on-error=SQL-ERROR
NI.GPGB_NI_CATEGORY      &A.GPGB_NI_CATEGORY
NI.GPGB_LEL_VALUE        &A.GPGB_LEL_VALUE
NI.GPGB_LELET_VALUE      &A.GPGB_LELET_VALUE
NI.GPGB_ETUEL_VALUE      &A.GPGB_ETUEL_VALUE
NI.GPGB_ER_NIC_VALUE     &A.GPGB_ER_NIC_VALUE
NI.GPGB_ER_RBT_VALUE     &A.GPGB_ER_RBT_VALUE
NI.GPGB_EE_NIC_VALUE     &A.GPGB_EE_NIC_VALUE
NI.GPGB_EE_RBT_VALUE     &A.GPGB_EE_RBT_VALUE
NI.GPGB_SCON             &A.GPGB_SCON
NI.GPGB_ETUAP_VALUE      &A.GPGB_ETUAP_VALUE 
NI.GPGB_UAPUEL_VALUE     &A.GPGB_UAPUEL_VALUE 

   let $NI                     = RTRIM(&A.GPGB_NI_CATEGORY,' ')
   let #VAL1AY                 = &A.GPGB_LEL_VALUE
   let #VAL1BY                 = &A.GPGB_LELET_VALUE
   if( #PNL_TAX_YEAR >= 2009 and #PNL_TAX_YEAR <= 2015) 
  
      let #VAL1CY                 = &A.GPGB_ETUAP_VALUE 
      let #VAL1DY                 = &A.GPGB_UAPUEL_VALUE 
   else
      let #VAL1CY                 = &A.GPGB_ETUEL_VALUE
   end-if
   let #VAL_NI_ERS_YTD         = &A.GPGB_ER_NIC_VALUE
   let #VAL_NI_EES_YTD         = &A.GPGB_EE_NIC_VALUE
   let #VAL_NI_ERSRBT_YTD      = &A.GPGB_ER_RBT_VALUE
   let #VAL_NI_EESRBT_YTD      = &A.GPGB_EE_RBT_VALUE
   let $SCON      = RTRIM(&A.GPGB_SCON,' ')   
   If $P60_IND = 'Y' AND $EDI_RTI_IND = 'R'
   DO Get-NI-EYU-adjustments
   End-If
   DO print-REPORT
 
   let #ni_counter = #ni_counter + 1
FROM [PS_GPGB_RTI_RSLT NI:$RECORD_SELECT] NI 
WHERE NI.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
   AND NI.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND NI.EMPLID = $MAIN_SEL_EMPLID
   AND NI.EMPL_RCD = #MAIN_SEL_EMPL_RCD
   [$RUN_FINALIZED_NI]  
   AND NI.ORIG_CAL_RUN_ID = NI.CAL_RUN_ID   
   AND NI.HIRE_DT = $MAIN_HIRE_DATE_DTU_native
             [$where_CALENDER_WHERE_NI]
   AND NI.PRC_ORD_TS = (SELECT MAX(AA.PRC_ORD_TS) 
                             FROM [PS_GPGB_RTI_RSLT AA:$RECORD_SELECT] AA 
                             WHERE AA.EMPLID = NI.EMPLID 
                              AND AA.EMPL_RCD = NI.EMPL_RCD 
                              AND AA.HIRE_DT = NI.HIRE_DT 
                              AND AA.PAY_ENTITY = NI.PAY_ENTITY 
                             AND AA.GPGB_TAX_BGN_YR = NI.GPGB_TAX_BGN_YR 
                              AND AA.GPGB_NI_CATEGORY = NI.GPGB_NI_CATEGORY)
  AND NI.RSLT_SEG_NUM = (SELECT MAX(AAA.RSLT_SEG_NUM) FROM  [PS_GPGB_RTI_RSLT AAA:$RECORD_SELECT] AAA
                            WHERE AAA.EMPLID = $MAIN_SEL_EMPLID
                              AND AAA.EMPL_RCD = #MAIN_SEL_EMPL_RCD
                              AND AAA.PRC_ORD_TS = NI.PRC_ORD_TS 
                              AND AAA.HIRE_DT = NI.HIRE_DT 
                              AND AAA.PAY_ENTITY = NI.PAY_ENTITY 
                              AND AAA.GPGB_TAX_BGN_YR = NI.GPGB_TAX_BGN_YR 
                              AND AAA.CAL_ID = NI.CAL_ID  
                              AND AAA.GPGB_NI_CATEGORY = NI.GPGB_NI_CATEGORY )
AND NI.GPGB_NI_CATEGORY IN (SELECT DISTINCT M.USER_KEY2
FROM  PS_GP_RSLT_ACUM M
WHERE M.CALC_VAL <> 0
AND M.EMPLID = $MAIN_SEL_EMPLID
AND M.EMPL_RCD = #MAIN_SEL_EMPL_RCD
AND M.ORIG_CAL_RUN_ID = M.CAL_RUN_ID
AND M.ACM_FROM_DT >= $TAX_YEAR_FROM_NATIVE
AND M.ACM_THRU_DT <= $TAX_YEAR_THRU_NATIVE
AND M.USER_KEY1 = NI.USER_KEY1
AND M.PIN_NUM = (SELECT PIN_NUM
FROM  PS_GP_PIN
WHERE PIN_CODE = 'GBR AC NIBL YTD GBR')
AND M.CAL_RUN_ID = (SELECT DISTINCT R.CAL_RUN_ID
FROM  PS_GPGB_RTI_RSLT R
WHERE R.EMPLID = $MAIN_SEL_EMPLID
AND R.EMPL_RCD = #MAIN_SEL_EMPL_RCD
AND R.GPGB_TAX_BGN_YR = NI.GPGB_TAX_BGN_YR
AND R.PAY_ENTITY = NI.PAY_ENTITY
AND R.HIRE_DT = NI.HIRE_DT
AND R.RUN_FINALIZED_IND = 'Y'
AND R.ORIG_CAL_RUN_ID = R.CAL_RUN_ID
AND R.PRC_ORD_TS = (SELECT MAX(RR.PRC_ORD_TS)
FROM  PS_GPGB_RTI_RSLT RR
WHERE RR.EMPLID = R.EMPLID
AND RR.EMPL_RCD = R.EMPL_RCD
AND RR.GPGB_TAX_BGN_YR = R.GPGB_TAX_BGN_YR
AND RR.PAY_ENTITY = R.PAY_ENTITY
AND RR.HIRE_DT = R.HIRE_DT
AND RR.RUN_FINALIZED_IND = 'Y'
AND RR.ORIG_CAL_RUN_ID = RR.CAL_RUN_ID)))

END-SELECT

If $P60_IND = 'Y' AND $EDI_RTI_IND = 'R'
    DO Get-Employee-NI-Adjustment
End-If
#Debug Show 'Get-NI-category <- ' 
end-procedure Get-NI-category 

begin-procedure Get-Employee-NI-Adjustment
lET #NI_ADJ_COUNTER = 0
Begin-Select DISTINCT
EMPNI.GPGB_NI_CATEGORY
 lET #NI_ADJ_COUNTER = #NI_ADJ_COUNTER + 1
 Let $NI = &EMPNI.GPGB_NI_CATEGORY
 IF #NI_ADJ_COUNTER < 5 - #ni_counter
   DO  Get-NI-EYU-adjustments  
   DO print-REPORT
 END-IF
 
FROM PS_GPGB_RTI_ADJ_NI EMPNI  
WHERE EMPNI.EMPLID = $MAIN_SEL_EMPLID
   AND EMPNI.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND EMPNI.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
   AND EMPNI.EMPL_RCD = #MAIN_SEL_EMPL_RCD  
   AND EMPNI.USER_KEY1 = $MAIN_HIRE_DATE_DTU
   AND NOT EXISTS (SELECT 'X' FROM PS_GPGB_RTI_RSLT R_NI
                                 WHERE  R_NI.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
                                 AND R_NI.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
                                 AND R_NI.EMPLID = $MAIN_SEL_EMPLID
                                 AND R_NI.EMPL_RCD = #MAIN_SEL_EMPL_RCD
                                 AND R_NI.RUN_FINALIZED_IND ='Y'
                                 AND R_NI.ORIG_CAL_RUN_ID = R_NI.CAL_RUN_ID   
                                 AND R_NI.HIRE_DT = $MAIN_HIRE_DATE_DTU_native
                                 AND R_NI.GPGB_NI_CATEGORY = EMPNI.GPGB_NI_CATEGORY
                                [$where_CALENDER_WHERE_NI_R]
                               AND R_NI.PRC_ORD_TS = (SELECT MAX(AA1.PRC_ORD_TS) 
                                                     FROM PS_GPGB_RTI_RSLT AA1 
                                                     WHERE AA1.EMPLID = R_NI.EMPLID 
                                                     AND AA1.EMPL_RCD = R_NI.EMPL_RCD 
                                                     AND AA1.HIRE_DT = R_NI.HIRE_DT 
                                                     AND AA1.PAY_ENTITY = R_NI.PAY_ENTITY 
                                                     AND AA1.GPGB_TAX_BGN_YR = R_NI.GPGB_TAX_BGN_YR 
                                                     AND AA1.GPGB_NI_CATEGORY = R_NI.GPGB_NI_CATEGORY)
                               AND R_NI.RSLT_SEG_NUM =(SELECT MAX(AAA1.RSLT_SEG_NUM) 
                                                     FROM  PS_GPGB_RTI_RSLT AAA1
                                                     WHERE AAA1.EMPLID = $MAIN_SEL_EMPLID
                                                     AND AAA1.EMPL_RCD = #MAIN_SEL_EMPL_RCD
                                                     AND AAA1.PRC_ORD_TS = R_NI.PRC_ORD_TS 
                                                     AND AAA1.HIRE_DT = R_NI.HIRE_DT 
                                                     AND AAA1.PAY_ENTITY = R_NI.PAY_ENTITY 
                                                     AND AAA1.GPGB_TAX_BGN_YR = R_NI.GPGB_TAX_BGN_YR 
                                                     AND AAA1.CAL_ID = R_NI.CAL_ID  
                                                     AND AAA1.GPGB_NI_CATEGORY = R_NI.GPGB_NI_CATEGORY))
   

End-Select
End-Procedure

begin-procedure Get-NI-EYU-adjustments

     let #val_at_lel_eyu = 0
     let #val_lel_pt_eyu = 0
     let #val_pt_uap_eyu = 0
     let #val_uap_uel_eyu = 0
     let #val_ni_eyu = 0
     let #val_pt_uel_eyu = 0
BEGIN-SELECT on-error=SQL-ERROR
 
SUM(C.GPGB_AT_LEL_EYU)       &C.GPGB_AT_LEL_EYU
SUM(C.GPGB_LEL_TO_PT_EYU)    &C.GPGB_LEL_TO_PT_EYU
SUM(C.GPGB_PT_TO_UAP_EYU)    &C.GPGB_PT_TO_UAP_EYU
SUM(C.GPGB_UAP_TO_UEL_EY)    &C.GPGB_UAP_TO_UEL_EY
SUM(C.GPGB_EE_NI_CNT_EYU)    &C.GPGB_EE_NI_CNT_EYU
SUM(C.GPGB_PT_TO_UEL_EYU)    &C.GPGB_PT_TO_UEL_EYU
 
     let #val_at_lel_eyu = &C.GPGB_AT_LEL_EYU
     let #val_lel_pt_eyu = &C.GPGB_LEL_TO_PT_EYU
     let #val_pt_uap_eyu = &C.GPGB_PT_TO_UAP_EYU
     let #val_uap_uel_eyu = &C.GPGB_UAP_TO_UEL_EY
     let #val_ni_eyu = &C.GPGB_EE_NI_CNT_EYU
     let #val_pt_uel_eyu = &C.GPGB_PT_TO_UEL_EYU

FROM PS_GPGB_RTI_ADJ_NI C  
WHERE C.EMPLID = $MAIN_SEL_EMPLID
   AND C.PAY_ENTITY = $MAIN_SEL_PAY_ENTITY 
   AND C.GPGB_TAX_BGN_YR = #PNL_TAX_YEAR
   AND C.EMPL_RCD = #MAIN_SEL_EMPL_RCD  
   AND C.USER_KEY1 = $MAIN_HIRE_DATE_DTU
   AND C.GPGB_NI_CATEGORY = $NI 
   GROUP BY C.EMPLID
END-SELECT

end-procedure Get-NI-EYU-adjustments
 
!*=================================================================
! Procedure:  Start-New-page                                      !
! Descr:      New page each time the Emplid changes               !
!                                                                 !
!*=================================================================
begin-procedure Start-new-page
#Debug Show 'Start-new-page -> ' 
             NEW-PAGE
#Debug Show 'Start-new-page <- ' 
end-procedure Start-new-page


!*=================================================================
! Procedure:  Start-New-Entity                                    !
! Descr:      New page each time the Pay Entity changes           !
!                                                                 !
!*=================================================================
begin-procedure Start-new-entity
#Debug Show 'Start-new-entity -> ' 

#Debug Show 'Start-new-entity <- ' 
end-procedure Start-new-entity

!*=================================================================
! Procedure: Print-Report                                         !
! Descr:     Prints NI Category infromation                       !
!                                                                 !
!*=================================================================

begin-procedure Print-report
#Debug Show 'Print-report -> ' 

        ! Col 1d of P11-1 = Total (NI Ees + NI Ers) - (NI Ees Rbt + Ni Ers Rbt)
       if (#PNL_TAX_YEAR >= 2009) 

        let #VAL1EY = (#VAL_NI_ERS_YTD + #VAL_NI_EES_YTD) - (#VAL_NI_ERSRBT_YTD + #VAL_NI_EESRBT_YTD)
       
        if  #VAL1EY < 0
                let #VAL1EY  =  ABS(#VAL1EY)
                let $1E_R    = 'R'
        else
                let $1E_R    = ' '
        end-if
        
       let #VAL1FFY = (#VAL_NI_EES_YTD - #VAL_NI_EESRBT_YTD)
       
       if $P60_IND = 'Y' AND $EDI_RTI_IND = 'R'
         let #VAL1FFY = #VAL1FFY + #val_ni_eyu
       end-if
       
        if  #VAL1FFY < 0
                let #VAL1FFY  =  0
        end-if
  
        
        
        if  #VAL1FY < 0
                let #VAL1FY  =  0
        end-if
     
        
        else
        ! BEFORE 2009
        let #VAL1DY = (#VAL_NI_ERS_YTD + #VAL_NI_EES_YTD) - (#VAL_NI_ERSRBT_YTD + #VAL_NI_EESRBT_YTD)

        if  #VAL1DY < 0
                let #VAL1DY  =  ABS(#VAL1DY)
                let $1D_R    = 'R'
        else
                let $1D_R    = ' '
        end-if

        ! Col 1e of P11-1 = Total (NI Ees - NI Ees Rbt)
        let #VAL1EY = (#VAL_NI_EES_YTD - #VAL_NI_EESRBT_YTD)

        if  #VAL1EY < 0
                let #VAL1EY  =  0
        end-if
        end-if 
        ! END OF 2009-10 

             let $NI = RTRIM($NI,' ')


            if RTRIM($NI,' ') <> ''   

               


                !-------------------------------
                ! print results per NI codes
                !-------------------------------

                       if ( #PNL_TAX_YEAR >= 2009) 
                              if #W_Count_NI = 0
                               print ' '                   (+8,{PosNIC})    
                               end-if
                       
                          ! Postioning for 1rst line
                           let  #W_Count_NI = #W_Count_NI + 1

!if #VAL1AY+#VAL1BY+#VAL1CY+#VAL1DY+#VAL1EY = 0
                           !let $NI='X' 
                           !end-if
                            
                          if $P60_IND = 'Y' AND $EDI_RTI_IND = 'R' AND #PNL_TAX_YEAR <= 2015
                            let #VAL1AY = #VAL1AY + #val_at_lel_eyu
                            let #VAL1BY = #VAL1BY + #val_lel_pt_eyu
                            let #VAL1CY = #VAL1CY + #val_pt_uap_eyu
                            let #VAL1DY = #VAL1DY + #val_uap_uel_eyu
                          
                          end-if

                         if $P60_IND = 'Y' AND $EDI_RTI_IND = 'R' AND #PNL_TAX_YEAR >= 2016
                            let #VAL1AY = #VAL1AY + #val_at_lel_eyu
                            let #VAL1BY = #VAL1BY + #val_lel_pt_eyu
                            let #VAL1CY = #VAL1CY + #val_pt_uel_eyu
                          end-if

                           print $NI                   (+3,{PosNIC})
                             let   #VAL1AY = trunc(#VAL1AY,0)
                          
                             if #VAL1AY >= 0
                              print #VAL1AY           (,{Pos1AA}) edit 99,999,999
                           end-if

                             let   #VAL1BY = trunc(#VAL1BY,0)
                          
                             if #VAL1BY >= 0
                             print #VAL1BY           (,{Pos1BB}) edit 99,999,999
                           end-if

                          let   #VAL1CY = trunc(#VAL1CY,0)
                          
                          if #VAL1CY >= 0
                              print #VAL1CY           (,{Pos1CC}) edit 99,999,999
                           end-if
                          
                          if #VAL1DY >= 0
                             if( #PNL_TAX_YEAR >= 2009 and #PNL_TAX_YEAR <= 2015)
                              print #VAL1DY          (,{Pos1DD})   edit 99,999,999
                             end-if 
                          end-if
                          
                             iF $P60_IND = 'N'
                           if #VAL1EY <> 0
                           !When NI category is X, do not print NI contribution
                              if RTRIM($NI,' ') = 'X'
                                 let  #VAL1EY = 0.0
                              end-if  

                                print #VAL1EY           (,{Pos1EE})   edit 999,999,999.99
                                     
                                print $1D_R             (,{Pos1EER})  
                             end-if
                             end-if    ! Employee and Employers contribution is not shown in p60                                             
                             
                         if #VAL1FFY <> 0
                             print #VAL1FFY           (,{Pos1FF}) edit 999,999,999.99 
                                                
                         end-if
                             
                         evaluate $NI
                         when = 'F'
                         when = 'G'
                         when = 'S'
!If the 1st char is 'S' in SCON then truncate it 
                             let $SCON_1 = substr($SCON,1,1)
                             if $SCON_1 = 'S'
                               let $SCON = substr($SCON,2,9)
                             end-if
                             print $SCON             (,{PosScheme1})
                         Break
                         end-evaluate
                          
                                                   
                          else  
                          ! Postioning for 1rst line
                         if #W_Count_NI = 0
                         print ' '                   (+8,{PosNIC})    
                         end-if

                         let  #W_Count_NI = #W_Count_NI + 1

                         print $NI                   (+3,{PosNIC})

                         let   #VAL1AY = trunc(#VAL1AY,0)
                         if #VAL1AY > 0
                             print #VAL1AY           (,{Pos1A}) edit 99,999,999
                         end-if

                         let   #VAL1BY = trunc(#VAL1BY,0)
                         if #VAL1BY > 0
                             print #VAL1BY           (,{Pos1B}) edit 99,999,999
                         end-if

                         let   #VAL1CY = trunc(#VAL1CY,0)
                         if #VAL1CY > 0
                             print #VAL1CY           (,{Pos1C}) edit 99,999,999
                         end-if

! iF #VAL1AY > 0 AND #VAL1BY > 0 AND  #VAL1CY = 0 AND #VALP45_TAX = 0
!   let  $TAXCODE = ''
!   let  #TAX_BASIS = ''
! end-if

                         iF $P60_IND = 'N'
                            if #VAL1DY <> 0
                                print #VAL1DY           (,{Pos1D})   edit 999,999,999.99
                                print $1D_R             (,{Pos1DR})  edit 999,999,999
                            end-if
                         end-if

                         if #VAL1EY <> 0
                         !When NI category is X, do not print NI contribution
                              if RTRIM($NI,' ') = 'X'
                                 let  #VAL1EY = 0.0
                              end-if

                             print #VAL1EY           (,{Pos1E}) edit 999,999,999.99
                         end-if

                         evaluate $NI
                         when = 'F'
                         when = 'G'
                         when = 'S'
!If the 1st char is 'S' in SCON then truncate it                          
                             let $SCON_1 = substr($SCON,1,1)
                             if $SCON_1 = 'S'
                               let $SCON = substr($SCON,2,9)
                             end-if
                             print $SCON             (,{PosScheme1})
                         Break
                         end-evaluate

                end-if     ! 2009-10 end-if 
            end-if
          
   let #VAL1AY = 0
   let #VAL1BY = 0
   let #VAL1CY = 0
   let #VAL1DY = 0
   let #VAL1EY = 0

   let #VAL_NI_ERS_YTD = 0
   let #VAL_NI_EES_YTD = 0
   let #VAL_NI_ERSRBT_YTD = 0
   let #VAL_NI_EESRBT_YTD = 0

#Debug Show 'Print-report <- '
end-procedure Print-report


!*=================================================================
! Procedure: Print-summary                                        !
! Descr:     prints Employee infromation                          !
!                                                                 !
!*=================================================================

begin-procedure Print-summary
#Debug Show 'Print-summary  -> '

   !-------------------------------
   ! print totals per EE
   !-------------------------------

        

        ! Col 1h = Total (SPPA + SPPB)
        let #VAL1HY = (#VAL_SPPA_YTD + #VAL_SPPB_YTD)
        let #VAL1KY = (#VAL_ASPPA_YTD + #VAL_ASPPB_YTD + #VAL_SHPPA_YTD+ #VAL_SHPPB_YTD)
          
         if $P60_IND = 'Y' AND $EDI_RTI_IND = 'R'
          let #VAL3 = (#VAL3 + #val_taxable_eyu)
          !let #VAL1FY = (#VAL1FY + #val_ssp_eyu)
          let #VAL1GY = (#VAL1GY + #val_smp_eyu)
          let #VAL1IY = (#VAL1IY + #val_sap_eyu)
          let #VAL1JY = (#VAL1JY + #val_sl_eyu) 
          let #VAL7Y  = (#VAL7Y  + #val_tax_eyu)
          let #VAL1HY = (#VAL_SPPA_YTD + #VAL_SPPB_YTD+ #val_ord_spp_eyu)
          let #VAL1KY = (#VAL_ASPPA_YTD + #VAL_ASPPB_YTD + #VAL_SHPPA_YTD + #VAL_SHPPB_YTD + #val_add_spp_eyu)        
        end-if

           IF #VAL1HY < 0
            let #VAL1HY = 0
            END-IF

             IF #VAL1KY < 0
            let #VAL1KY = 0
            END-IF
            
            IF #VAL1GY < 0
            let #VAL1GY= 0
            END-IF
            
            IF #VAL1IY < 0
            let #VAL1IY= 0
            END-IF    

           IF #VAL1JY < 0
            let #VAL1JY= 0
            END-IF            
            
        
         if ( #PNL_TAX_YEAR >= 2009)

         if $P60_IND = 'N'
                       print #VAL1FY                 (46,{PosNIC})    EDIT 99,999,999.99   ! SSP
        else
                       print ' '                     (46,{PosNIC})     ! positioning at the correct line in the page
        end-if

        print #VAL1GY           (,{Pos1BB})     EDIT 99,999,999.99    ! SMP
        print #VAL1HY           (,{PosVAL1HYN}) EDIT 99,999,999.99    ! SPP
        print #VAL1KY           (,{PosVAL1KYN}) EDIT 99,999,999.99    ! ASPP
        print #VAL1IY           (,{PosVAL1IYN}) EDIT 99,999,999.99    ! SAP
        print #VAL1JY           (,{PosVAL1JYN}) EDIT 9,999,999,999    ! SL



        else


        if $P60_IND = 'N'
                       print #VAL1FY                 (44,{Pos1F})    EDIT 99,999,999.99   ! SSP
        else
                       print ' '                     (44,{Pos1F})   ! positioning at the correct line in the page
        end-if

        print #VAL1GY           (,{Pos1G})      EDIT 99,999,999.99! SMP
        print #VAL1HY           (,{Pos1H})      EDIT 99,999,999.99  ! SPP
        print #VAL1IY           (,{Pos1I})      EDIT 99,999,999.99  ! SAP

        print #VAL1JY           (+3,{PosLoan})  EDIT 9,999,999,999  ! SL

        end-if
                
        let #VALP45_TAX = #VAL7Y + #P45_TAX_TD
        let #VALP45_PAY = #VAL3  + #P45_PAY_TD

        if #VALFOR <> 0
             let #VAL7Y = #VAL7Y - #VALFOR
             let #VALP45_TAX = #VALP45_TAX - #VALFOR
        end-if


        if   #VAL7Y < 0
             let  #VAL7Y     =  ABS(#VAL7Y)
             let  $REFUND_Y  = 'R'
        else
             let  $REFUND_Y  = ' '
        end-if

        if #PNL_TAX_YEAR >= 2009
           print #P45_PAY_TD       (+5,{PosPay09})     EDIT 9,999,999,999.99
           print #P45_TAX_TD       (,{PosTax09})     EDIT 9,999,999,999.99

           if $P60_IND = 'N'
              if $W_HIRE_DT >= $TAX_YEAR_FROM AND $W_HIRE_DT <= $TAX_YEAR_THRU
                        print $Hire_Dt_Sp       (,{PosDate09})
              end-if
           end-if

           print #VAL3             (+2,{PosPay09})     EDIT 9,999,999,999.99
           print #VAL7Y            (,{PosTax09})     EDIT 9,999,999,999.99
           print $REFUND_Y         (,{PosRefund09})  EDIT 99,999,999

           if $P60_IND = 'N'
                if $W_TERM_DT <> ' ' AND $W_TERM_DT >= $TAX_YEAR_FROM AND $W_TERM_DT < $TAX_YEAR_THRU   ! 10/2002
                       print $TERM_DT_SP       (,{PosDate09}) edit 'dd mm yyyy'
                end-if
           end-if

           print #VALP45_PAY       (+2,{PosPay09})   EDIT 9,999,999,999.99
           print #VALP45_TAX       (,{PosTax09})     EDIT 9,999,999,999.99

            !let #VAL_WO_LIFE = #VAL_WIDOW + #VAL_LIFE
            !print #VAL_WO_LIFE      (+2,{PosWidowLife09}) EDIT 99,999,999.99
             print $TAXCODE          (+2,{PosTaxCD09})


           ! W1 or M1 when non cumulative tax basis
           if #TAX_BASIS = 1
                let $W_FREQUENCY_ID = RTRIM($FREQUENCY_ID, ' ')
                evaluate $W_FREQUENCY_ID
                when = 'M'
                      let $W_W1M1 = 'M1'
                when-Other
                      let $W_W1M1 = 'W1'
                end-evaluate
                print $W_W1M1           (,{PosWM109})
           end-if

           print $VR_WK53                  (,{PosWk5309})    EDIT 99

        else
           print ' '               (+2,{PosDate})

           if $P60_IND = 'N'
              if $W_HIRE_DT >= $TAX_YEAR_FROM AND $W_HIRE_DT <= $TAX_YEAR_THRU
                        print $Hire_Dt_Sp       (,{PosDate})
              end-if
           end-if

           print #P45_PAY_TD       (,{PosPay})     EDIT 9,999,999,999.99
           print #P45_TAX_TD       (,{PosTax})     EDIT 9,999,999,999.99

           print ' '               (+3,{PosDate})





           if $P60_IND = 'N'
                if $W_TERM_DT <> ' ' AND $W_TERM_DT >= $TAX_YEAR_FROM AND $W_TERM_DT < $TAX_YEAR_THRU   ! 10/2002
                       print $TERM_DT_SP       (,{PosDate}) edit 'dd mm yyyy'
                end-if
           end-if

           print #VAL3             (,{PosPay})     EDIT 9,999,999,999.99
           print #VAL7Y            (,{PosTax})     EDIT 9,999,999,999.99
           print $REFUND_Y         (,{PosRefund})  EDIT 99,999,999

           if #TAX_BGN_YR < 2006
              print #VAL9Y            (,{Pos9})       EDIT 99,999,999.99
           end-if

           print #VALP45_PAY       (+3,{PosPay})   EDIT 9,999,999,999.99
           print #VALP45_TAX       (,{PosTax})     EDIT 9,999,999,999.99

           !let #VAL_WO_LIFE = #VAL_WIDOW + #VAL_LIFE
           !print #VAL_WO_LIFE      (+3,{PosWidowLife}) EDIT 99,999,999.99
           print $TAXCODE           (+3,{PosTaxCD})


           ! W1 or M1 when non cumulative tax basis
           if #TAX_BASIS = 1
                let $W_FREQUENCY_ID = RTRIM($FREQUENCY_ID, ' ')
                evaluate $W_FREQUENCY_ID
                when = 'M'
                      let $W_W1M1 = 'M1'
                when-Other
                      let $W_W1M1 = 'W1'
                end-evaluate
                print $W_W1M1           (,{PosWM1})
           end-if
           print $VR_WK53                  (,{PosWk53})    EDIT 99
        end-if


#Debug Show 'Print-summary  <- '
end-procedure Print-summary

!*=================================================================
! Procedure: Reset Totals                                        !
! Descr:     Resets Calculated Values                             !
!                                                                 !
!*=================================================================
begin-procedure Reset-totals
#Debug Show 'Reset-totals -> ' 

        let $NI = ' '
        let #VAL1AY = 0
        let #VAL1BY = 0
        let #VAL1CY = 0
        let #VAL_NI_ERS_YTD    = 0
        let #VAL_NI_EES_YTD    = 0        
        let #VAL_NI_ERSRBT_YTD = 0
        let #VAL_NI_EESRBT_YTD = 0
        let #VAL1DY = 0
        let #VAL1EY = 0
        let $SCON   = ' '
        let #VAL1FY = 0
        let #VAL1GY = 0
        let #VAL_SPPA_YTD = 0
        let #VAL_SPPB_YTD = 0
        let #VAL1HY = 0
        let #VAL1KY = 0
        let #VAL1IY = 0
        let #VAL1JY = 0
        let #VAL3   = 0
        let #VAL7Y  = 0
        let #VAL9Y  = 0
        let #VALP45_PAY   = 0
        let #VALP45_TAX   = 0
        let #VAL_WIDOW  = 0
        let #VAL_LIFE   = 0
        let #VAL_FOR   = 0
        let $VR_WK53   = ' '
        let $REFUND_Y  = ' '
        let $W_W1M1    = ' '
        let #P45_PAY_TD = 0
        let #P45_TAX_TD = 0
        let #VALP45_PAY = 0
        let #VALP45_TAX = 0
        let #W_Count_NI = 0
        let #val_taxable_eyu = 0
        let #val_smp_eyu = 0
        let #val_sap_eyu = 0
        let #val_tax_eyu = 0
        let #val_sl_eyu  = 0
        let #val_ord_spp_eyu = 0
        let #val_add_spp_eyu = 0
        let #val_at_lel_eyu = 0
        let #val_lel_pt_eyu = 0
        let #val_pt_uap_eyu = 0
        let #val_pt_uel_eyu = 0
        let #val_uap_uel_eyu = 0
        let #val_ni_eyu = 0
        let $COUNTY_DESCR = ' '
#Debug Show 'Reset-totals <- ' 
end-procedure Reset-totals

!******************************************************************
!                  G E N E R A L   F U N C T I O N S
!******************************************************************


!*=================================================================
! Procedure:  Build-Where-Runctl                                  !
! Descr:      Build Where Statement from Run Control Parameters
!                                                                 !
!*=================================================================
begin-procedure Build-where-runctl 
#Debug Show 'Build-where-runctl -> ' 

        let $Q                  = ''''
        
        evaluate $EDI_RTI_IND
        when = 'R'
        let $RECORD_SELECT      = 'PS_GPGB_RTI_RSLT'    
        let $RUN_FINALIZED_A    = 'AND A.RUN_FINALIZED_IND =' ||''''||'Y'||''''
        let $RUN_FINALIZED_B    = 'AND B.RUN_FINALIZED_IND =' ||''''||'Y'||''''
        let $RUN_FINALIZED_NI   = 'AND NI.RUN_FINALIZED_IND ='||''''||'Y'||''''
        Break
        when = 'E'
        let $RECORD_SELECT      = 'PS_GPGB_EDI_RSLT'
        Break
        end-evaluate
        
        
        let $WHERE_STATEMENT    = 'WHERE A.GPGB_TAX_BGN_YR = '
                                  || $PNL_TAX_YEAR

        let $FREQ_WHERE         = ' AND A.FREQUENCY_ID = '''
                                  || $PNL_FREQUENCY_ID || $Q
        let $PERIOD_WHERE       = ' AND A.GPGB_TAX_PERIOD = '
                                  || $PNL_TAX_PERIOD
        let $CALENDER_WHERE     = ' AND A.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q

       let $CALENDER_WHERE_B     = ' AND B.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q

       
        let $CALENDER_WHERE_NI = ' AND NI.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q

        let $CALENDER_WHERE_NI_R = ' AND R_NI.CAL_RUN_ID = '''
                                  || $PNL_CAL_RUN_ID || $Q


        let $DEPTID_WHERE       = ' AND B.DEPTID = '''
                                  || $PNL_DEPTID || $Q
        let $PAY_ENTITY_WHERE   = ' AND A.PAY_ENTITY = '''
                                  || $PNL_PAY_ENTITY || $Q
        let $EMPLID_WHERE       = ' AND A.EMPLID = '''
                                  || $PNL_EMPLID || $Q
        let $PAYGROUP_WHERE     = ' AND A.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q
        let $PAYGROUP_WHERE_B     = ' AND B.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q
        let $PAYGROUP_WHERE_X     = ' AND X.GP_PAYGROUP = '''
                                  || $PNL_PAYGROUP || $Q


        if  #PNL_TAX_PERIOD <> 00
                let $WHERE_STATEMENT= $WHERE_STATEMENT
                                      || $PERIOD_WHERE
        end-if

        evaluate ''
        when <> $PNL_FREQUENCY_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $FREQ_WHERE

        when <> $PNL_CAL_RUN_ID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $CALENDER_WHERE
               let $where_CALENDER_WHERE_B =$CALENDER_WHERE_B
               let $where_CALENDER_WHERE_NI= $CALENDER_WHERE_NI
               let $where_CALENDER_WHERE_NI_R= $CALENDER_WHERE_NI_R
     

        when <> $PNL_DEPTID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $DEPTID_WHERE
                BREAK

        when <> $PNL_PAY_ENTITY
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAY_ENTITY_WHERE

        when <> $PNL_EMPLID
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $EMPLID_WHERE
                BREAK

        when <> $PNL_PAYGROUP
                let $WHERE_STATEMENT = $WHERE_STATEMENT
                                       || $PAYGROUP_WHERE
                let $WHERE_PAYGROUP_A = $PAYGROUP_WHERE
                let $WHERE_PAYGROUP_B = $PAYGROUP_WHERE_B
                let $WHERE_PAYGROUP_X = $PAYGROUP_WHERE_X
                BREAK


        end-evaluate

#Debug Show 'Build-where-runctl <- ' 
end-procedure Build-where-runctl
!******************************************************************
!***    ERROR - SQL error procedure
!******************************************************************
begin-procedure Error-Sql
#Debug Show 'Error-Sql->'

        add 1 to #CountError

        #Debug Show 'SQL Error -> ' $ProcedureName
        #Debug Show 'SQL Error -> ' $ErrorMessage
        #Debug Show 'SQL Error -> ' $SQL-ERROR

        stop

#Debug Show 'Error-Sql<-'
end-procedure Error-Sql


!******************************************************************
!***    Common SQC Modules Copied In For Program Usage
!******************************************************************
#include 'reset.sqc'    ! Reset printer procedure
#include 'curdttim.sqc' ! Get-Current-DateTime procedure
#include 'datetime.sqc' ! Routines for date and time formatting
#include 'datemath.sqc' !
#include 'number.sqc'   ! Routines to format numbers
#include 'prcsapi.sqc'  ! Update Process Request API
#include 'prcsdef.sqc'  ! Update Process Request variable declaration
#include 'readxlat.sqc' ! Read Translate Table
#include 'gpgbut01.sqc' ! Pay entity details
#include 'gpgbut02.sqc' ! Log file
!******************************* End Of Program *******************
