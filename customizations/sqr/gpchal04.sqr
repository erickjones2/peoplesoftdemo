!***********************************************************************
! GPCHAL04.SQR  : FAK -Familienausgleichkasse-                        *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2016, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!          $Date:  2016/02/07:23:38:15                                 !
!       $Release:  HR92                                                !
!           $Bug:  22026450                                            !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'

begin-setup

create-array name=ArrFK02 size=1
field = arr1:char
field = arr2:char
field = arr3:number
field = arr4:char
field = arr5:char
field = arr6:number
field = arr7:char
field = arr8:char
field = arr9:char
field = arr10:char
field = arr11:char
field = arr12:char
field = arr13:char
field = arr14:char
field = arr15:char
field = arr16:char
field = arr17:number
field = arr18:number
field = arr19:char
field = arr20:number
field = arr21:number
field = arr22:number
field = arr23:number
field = arr24:number
field = arr25:number
field = arr26:number
field = arr27:number
field = arr28:number
field = arr29:number
field = arr30:number
field = arr31:number

create-array name = ChildData size = 2
field = Feld1:char:20
field = Feld2:char:20
field = Feld3:number:20
field = Feld4:char:20
field = Feld5:char:20
field = Feld6:number:20
field = Feld7:char:20
field = Feld8:char:20
field = Feld9:char:20
field = Feld10:char:20
field = Feld11:char:20
field = Feld12:char:20
field = Feld13:char:20
field = Feld14:char:20
field = Feld15:char:20
field = Feld16:char:20
field = Feld17:char:20
field = Feld18:char:20
field = Feld19:number:20
field = Feld20:number:20
field = Feld21:number:20
field = Feld22:number:20
field = Feld23:number:20
field = Feld24:number:20

create-array name = RekapData size = 50
field = Rekap1:char
field = Rekap2:char
field = Rekap3:number
field = Rekap4:number
field = Rekap5:number
field = Rekap6:number
field = Rekap7:number
field = Rekap8:number
field = Rekap9:number
field = Rekap10:number

create-array name = ChldDatCmp size = 2
field = FieldCh:char:20
end-setup
#define col1  10
#define col2  13        !Child Name/First name 5
#define col3  56        !Child Birth date 22
#define col4  37        !Duration of contribution 35
#define col5  63
#define col5a  58        !Activity rate 60
#define col6  73        !AHV-Obligatory sum of salaries 999,999,999.00 69
#define col7  95        !HOUS/FAM 84
#define col8  105       !Outpayment 90
#define col9  87        !Birth 94
#define col10 101       !Children benefits 103
#define col12 115       !Education benefits 112
#define col13 109       !Correction
#define col61 70

#define col1R 10
#define col2R 26        !Beitrag FAK
#define col3R 34        !Fak-zulagen
#define col3_R 28
#define col4R 47        !Haus
#define col5R 61        !Geb
#define col6R 74        !Ausz
#define col7R 88        !korr
#define col8R 100       !korr
#define col9R 113       !ahv
#define col9R_1 110     !ahv

#define Col1P3 10
#define Col2P3 40
#define Col3P3 55
#define Col4P3 70
#define Col5P3 85
#define Col6P3 110
!*************************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
     
      If $GPCH_EG_YEP_FLG = 'Y'
    
   If $Run_Option = 'Y' and $Rpt_Type ='M'
    
  do Process-Main
  do Stdapi-Term
  do Get-Log
  Do Update_Status($Ctl_Year,#ptot_domainid,$ptot_company,$providertype,$Run_Option,$SysDateTime,$Cancel_option)
   Else
        
   If $Cancel_Option = 'Y'
     do Cancle_YEA($ptot_requestid,$Ctl_Year,$ptot_company,$providertype,#ptot_domainid)
     Do Update_Status($Ctl_Year,#ptot_domainid,$ptot_company,$providertype,$Run_Option,'',$Cancel_option) 
    End-If
    
    do Stdapi-Term
    do Get-Log
   End-If
  Else
         
   do Process-Main
  do Stdapi-Term
  do Get-Log
 End-IF
end-PROGRAM
!*************************************************************************************
begin-procedure Init-Report
  do Stdapi-Init
  let $Sort_Order = ''
  let $Sort_OrderR = ''
  let $Sort1 = ''
  let $merk = ''
  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
     do Get-Base-Language
  end-if
  
        
  if $GPCH_EG_YEP_FLG = 'Y' !sqh
 
    let $providertype='5'
    let $Provider_crit = ' '
    do Get-PTotals-Data($Provider_crit,$providertype,#Domainid,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey) 
    do Check_Run_Report(#ptot_domainid,$Ctl_Year,$ptot_company,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)
    let $Ctl_PayEntity = $ptot_company
    let $Run_Retro_Check = '5'
    
  end-if 

  move 'GPCHAL04' to $ReportID

  if $ApplyContextLanguage = 'Y'
     let $language_cd = ''
  end-if
  
  if $language_cd <> ''
     do Get-Language ($ReportID, $language_cd)
  else
     let $Blank_lang = 'Y'
  end-if
   
  if $Run_Retro_Check <> '5'
     let $ReportTitle = $TITLE_STR  || ' ' || $REVISION_STR
  else
     let $ReportTitle = $TITLE_STR
  end-if
  
  let $TITLE1 = $TITLE_STR
  let #Date_Type= {DateType}
  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle

  if $Ctl_Curr_Pay_End_Dt <> ''
    do Get_Beg_Mnth ( $Ctl_Curr_Pay_End_Dt , $ReportBegD )
    do Get_End_Mnth ( $Ctl_Curr_Pay_End_Dt , $ReportEndD )
  end-if

  let $Canton_Criteria_Elm = '' !sqh
  if $GPCH_EG_YEP_FLG = 'Y'
      do Get-provider-canton
  End-If

  if $ReportEndD <> ''
      do ConvertToComponents ( $ReportEndD , $yy11 , $mm11 , $dd11 )
      do ConvertToComponents ( $ReportBegD , $yy10 , $mm10 , $dd10 )

   do Format-DateTime ( $ReportBegD , $Ctl_B_Date , {DEFCMP} , '' , '' )
      do Format-DateTime ( $ReportEndD , $Ctl_E_Date , {DEFCMP} , '' , '' )

   evaluate #Date_Type
   when = 1
  let $from_to_format = $dd10 || '{PTDateDelim}'
    || $mm10 || '{PTDateDelim}' || ' - ' || $dd11
    || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $yy11
     break
   when = 2
  let $from_to_format = $mm10 || '{PTDateDelim}'
    || $dd10 || '{PTDateDelim}' || ' - ' || $yy11
    || '{PTDateDelim}' || $mm11 || '{PTDateDelim}' || $dd11
     break
   when-other
     let $from_to_format = $mm10 || '{PTDateDelim}'
    || $dd10 || '{PTDateDelim}' || ' - ' || $mm11
    || '{PTDateDelim}' || $dd11 || '{PTDateDelim}' || $yy11
     break
   end-evaluate

  end-if
!FMB changed PN.National_Id to RP01.National_Id
    let $Sort1  = 'PBD.STATE, RP01.NATIONAL_ID, RP01.GPCH_AH_NNSS, RP01.BIRTHDATE, PBD.EMPLID,PBD.EMPL_RCD, ' ||
               'PBD.GPCH_AL_CPAY_ENDDT DESC, PBD.PRD_END_DT DESC'

    let $Sort_Order = 'ORDER BY '
    concat $Sort1 with $Sort_Order

    let $Sort_OrderR = 'ORDER BY '
    concat $Sort1R with $Sort_OrderR

  let #count_Emplid = 0
  let $Emplid_Criteria1 = ''
  let $Emplid_Criteria1_PS = ''
  let $Emplid_Criteria1_tmp = ''
  let $Emplid_Criteria1_tmp1 = ''

  do Get-Emplid-Count

  if #count_Emplid <> 0
     let $Emplid_Criteria1      = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_PS    = ' AND PS.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_tmp  = ' AND PSA.EMPLID IN ( ' || $Emplid-String || ')'
  else
     let $Emplid_Criteria1      = ' '
         let $Emplid_Criteria1_PS    = ' '
         let $Emplid_Criteria1_tmp  = ' '
  end-if


end-procedure
!****************************************************************************
Begin-Procedure Get-provider-canton
#debug show '-> Get-provider-canton'
  
 let #count_canton_Elm= 0

Begin-Select
 
FAK_STXML.GPCH_TX_CANTON

  let $Canton_Elm = rtrim(&FAK_STXML.GPCH_TX_CANTON,' ')
  
    if $Canton_Elm <> ''
       let $Canton_String_Elm = $Canton_String_Elm || '''' || $Canton_Elm || '''' || ','
       let #count_canton_Elm     = #count_canton_Elm + 1 
    End-If

 FROM PS_GPCH_TX_FAK_STX FAK_STXML 

where FAK_STXML.COMPANY= $ptot_company
AND FAK_STXML.GPCH_SI_PROV_CD = $ptot_providercd
AND   FAK_STXML.EFFDT = (SELECT max(FAK_STXML1.EFFDT) from PS_GPCH_TX_FAK_STX FAK_STXML1
                                 WHERE FAK_STXML1.EFFDT         <= $ReportEndD
                                  AND     FAK_STXML1.COMPANY = $ptot_company
                                AND FAK_STXML1.GPCH_SI_PROV_CD = $ptot_providercd)
 ! AND FAK_STXML.GPCH_TX_CANTON in ('ZH','BE','BS','AG','LU','SZ','GR','SG','TG')

End-Select

 let $Canton_String_Elm = rtrim($Canton_String_Elm,',')
 
 If #count_canton_Elm <> 0
     let $Canton_Criteria_Elm   = 'AND CANT.STATE IN ( ' || $Canton_String_Elm || ')'
   else 
    let $State_Dummy ='XX'
    let $Canton_Criteria_Elm   =  ' AND CANT.STATE = ''' || $State_Dummy || ''' '
                     
  
 End-If
 

#debug show '<- Get-provider-canton'
end-procedure
!****************************************************************************
Begin-Procedure Get-Language($ReportID, $language_cd)

  do Init_Report_Translation ( $ReportID , $language_cd )
  do Append_Report_Translation ('GPCHGLOB')
  do Gpce_Init_Report_Translation ( $ReportID , $language_cd )
  do Gpce_Append_Report_Translation ('GPCHGLOB' , $language_cd )
  do Report-Translation
  
end-procedure
!************************************************
begin-procedure Get-Base-Language

begin-select
LANGUAGE_CD
  move &Language_Cd to $Base_Language
FROM PSOPTIONS

end-select
end-procedure
!************************************************
begin-procedure Report-Translation

  do Get_Field_Information ( 'GPCHAL04' , 'ACTIVITY_RATE_STR' ,     $ACTIVITY_RATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AHV_NR_STR' ,                   $AHV_NR_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'NNSS_NR_STR' ,                  $NNSS_NR_STR , #CW )
    do Get_Field_Information ( 'GPCHAL04' , 'BIRTH' ,                  $BIRTH_LBL , #CW )

  do Get_Field_Information ( 'GPCHAL04' , 'AHV_OBLIGATORY_STR' ,   $AHV_OBLIGATORY_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AHV_OBL_SUM_STR' ,         $AHV_OBL_SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AMOUNT_STR' ,                   $AMOUNT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'AND_MORE_STR' ,               $AND_MORE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_BENEFS_STR' ,       $BIRTH_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_BENEF_STR' ,         $BIRTH_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_DATE_STR' ,           $BIRTH_DATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BIRTH_STR' ,                     $BIRTH_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BUDG_FAM_STR' ,               $BUDG_FAM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD1_STR' ,                   $CHILD1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEF1_STR' ,       $CHILD_BENEF1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEFS_STR' ,       $CHILD_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CHILD_BENEF_STR' ,         $CHILD_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CONTRIBUTION_STR' ,       $CONTRIBUTION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION1_STR' ,         $CORRECTION1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION2_STR' ,         $CORRECTION2_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CORRECTION_STR' ,           $CORRECTION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDUCATION_BEN_STR' ,     $EDUCATION_BEN_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDU_BENEFS_STR' ,           $EDU_BENEFS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EDU_BENEF_STR' ,             $EDU_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'ELIGIBLE_BENEF_STR' ,   $ELIGIBLE_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT1_STR' ,         $EMPL_COUNT1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT2_STR' ,         $EMPL_COUNT2_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT3_STR' ,         $EMPL_COUNT3_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT4_STR' ,         $EMPL_COUNT4_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'EMPL_COUNT5_STR' ,         $EMPL_COUNT5_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'ENTRY_EXIT_STR' ,           $ENTRY_EXIT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CANTON_STR' ,           $FAK_CANTON_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CONTRIB_STR' ,         $FAK_CONTRIB_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_CONTRIB1_STR' ,       $FAK_CONTRIB1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_DEBIT_BALA_STR' ,   $FAK_DEBIT_BALA_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FROM_STR' ,                       $FROM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FULL_TIME_STR' ,             $FULL_TIME_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HANDL_CHARGE_STR' ,       $HANDL_CHARGE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOURLY_RATE_STR' ,         $HOURLY_RATE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOUSE_BENEF_STR' ,         $HOUSE_BENEF_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'INVALIDE_CHILD_STR' ,   $INVALIDE_CHILD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'NAME1_STR' ,                     $NAME1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'OUTPAYMENT_STR' ,           $OUTPAYMENT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PAGE_SUM_STR' ,               $PAGE_SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PART_TIME_STR' ,             $PART_TIME_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PERCENT_WEEK_STR' ,       $PERCENT_WEEK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RUDIMENT_CHILD_STR' ,   $RUDIMENT_CHILD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_SALARY_STR' ,           $SUM_SALARY_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_TOT_STR' ,                 $SUM_TOT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TITLE1_STR' ,                   $TITLE1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TOTAL_COUNT_STR' ,         $TOTAL_COUNT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TOTAL_FAK_STR' ,             $TOTAL_FAK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RECAPITULATION_STR' ,   $RECAPITULATION_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CANTON_STR' ,                   $CANTON_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'CONTRIBUTION1_STR' ,     $CONTRIBUTION1_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'SUM_STR' ,                         $SUM_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'BENEFITS_STR' ,               $BENEFITS_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'HOUSEHOLD_STR' ,             $HOUSEHOLD_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'TITLE_STR' ,                     $TITLE_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'FAK_STR' ,                         $FAK_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'RUDIMENT_STR' ,               $RUDIMENT_STR , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'REVISION_STR' ,               $REVISION_STR , #CW )

  do Get_Field_Information ('GPCHGLOB', 'TOTAL' ,          $TOTAL_STR ,      #CW )
  do Get_Field_Information ('GPCHGLOB', 'LG_BDTTIME',      $LG_BDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBNAME',       $LG_DBNAME,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_DBTYPE',       $LG_DBTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_EDTTIME',      $LG_EDTTIME,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERID',       $LG_OPERID,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OPERSYS',      $LG_OPERSYS,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTFOR',   $LG_OUTDESTFOR,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_OUTDESTTYPE',  $LG_OUTDESTTYPE,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCINSTNUM',   $LG_PRCINSTNUM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCNM',        $LG_PRCNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PRCTYPE',      $LG_PRCTYPE,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLNG',       $LG_REPLNG,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPNM',        $LG_REPNM,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLID',     $LG_RUNCTLID,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNLOC',       $LG_RUNLOC,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNSTAT',      $LG_RUNSTAT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_TOTDURA',      $LG_TOTDURA,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_CURRDT',       $LG_CURRDT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_SRTORD',       $LG_SRTORD,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PAYENT',       $LG_PAYENT,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PSTYPE',       $LG_PSTYPE,       #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_FORYR',        $LG_FORYR,        #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_RUNCTLPA',  $LG_RUNCTLPA,  #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_VALUE',     $LG_VALUE,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_REPLOG',    $LG_REPLOG,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_LOGITEM',   $LG_LOGITEM,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_PINNM',     $LG_PINNM,     #CW)
  do Get_Field_Information ('GPCHGLOB', 'LG_COUNTRY',   $LG_COUNTRY,   #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_DEPT',      $HD_DEPT,      #CW)
  do Get_Field_Information ('GPCHGLOB', 'EMPLID',    $HD_EMPLID,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'HD_FOR',    $HD_FOR,    #CW)
  do Get_Field_Information ('GPCHGLOB', 'CANTON_PAGE',    $HD_CANTON_PAGE,    #CW)
  
  let $AHV_OBLIGATORY_T_STR = $AHV_OBLIGATORY_STR
  let $SUM_SALARY_T_STR = $SUM_SALARY_STR

  if $Run_Retro_Check = '5'
    let $AHV_OBLIGATORY_STR = ''
  end-if

  if $language_cd = 'GER'
     do Strings_Pads ( $AHV_OBLIGATORY_STR , $AHV_OBLIGATORY_STR , 18 )
  end-if

  do Strings_Pads ( $BUDG_FAM_STR , $BUDG_FAM_STR , 14 )
  do Strings_Pads ( $CORRECTION_STR , $CORRECTION_STR , 12 )
  do Strings_Pads ( $SUM_SALARY_STR , $SUM_SALARY_STR , 19 )
  do Strings_Pads ( $TOTAL_FAK_STR , $TOTAL_FAK_STR , 13 )
  do Strings_Pads ( $BIRTH_STR , $BIRTH_STR , 13 )
  do Strings_Pads ( $BENEFITS_STR , $BENEFITS_R_STR , 13 )

  do Strings_Pads ( $CHILD_BENEF_STR , $CHILD_BENEF_STR , 13 )
  do Strings_Pads ( $CHILD_BENEF_STR , $CHILD_BENEF_STR , 13 )
  do Strings_Pads ( $EDUCATION_BEN_STR , $EDUCATION_BEN_STR , 13 )

  do Strings_Pads ( $SUM_SALARY_STR , $SUM_SALARY_R_STR , 19 )
  do Strings_Pads ( $FAK_CONTRIB_STR , $FAK_CONTRIB_R_STR , 14 )
  do Strings_Pads ( $HOUSEHOLD_STR , $HOUSEHOLD_R_STR , 13 )
  do Strings_Pads ( $FAK_STR , $FAK_R_STR , 13 )

  let $AHV_OBLIGATORY_T_STR1 = substr($AHV_OBLIGATORY_T_STR,1,16)
  let $AHV_OBLIGATORY_T_STR2 = substr($AHV_OBLIGATORY_T_STR,17,16)

  do Strings_Pads ( $AHV_OBLIGATORY_T_STR1 , $AHV_OBLIGATORY_T_STR1 , 16 )
  do Strings_Pads ( $AHV_OBLIGATORY_T_STR2 , $AHV_OBLIGATORY_T_STR2 , 16 )

  do Strings_Pads ( $SUM_SALARY_T_STR , $SUM_SALARY_T_STR , 13 )

  let $FAK_CONTRIB1_STR = rtrim ( $FAK_CONTRIB_STR , ' ' )
end-procedure

!***********************************************************************
begin-procedure Strings_Pads ( $Str1 , :$Str2 , #Len1 )
   let $Str1 = rtrim(ltrim($Str1 , ' ' ) , ' ' )
   let $Str01 = rtrim(substr($Str1 , 1 , #Len1) ,' ' )
   let $Str2 = lpad($Str01 , #Len1 , ' ' )
end-procedure

!************************************************************************
begin-heading 10
  #include 'gpchut08.sqc'
  position (-1,1)
  
  if $Run_Retro_Check <> '5'
     let $ReportTitle = $TITLE_STR  || ' ' || $REVISION_STR
  else
     let $ReportTitle = $TITLE_STR
  end-if
  
  let $empl_str = $TITLE1_STR || ' ' || $Employer_Fak_Nbr
  let $fr_str = $FROM_STR || ' ' || $from_to_format
  
  print $ReportTitle (-1,)     center
    
  if ($Ctl_Canton <> '') or ($Merk_Header <> 'TypeThree')
     print $empl_str (+1,)     center
  end-if
  print $fr_str   (+1,)  center
  if ($Merk_Header <> 'TypeThree')
     let #PageCounter = #PageCounter + 1
     print $HD_CANTON_PAGE (5,#RptCol)
     print #PageCounter     (,{ColM}) edit 88888888
     position (-1,1)
  end-if
evaluate $Merk_Header
  when = 'TypeOne'
  print $Cpdescr  (+1,{col1})
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
     print $FAK_CANTON_STR       (+1,{col1})
     print ' '                   (,)
     print $Canton_NameR         (,)
     print $NAME1_STR            (+2,{col1})   bold
     position (+1,1)
     print $ENTRY_EXIT_STR       (,{col4})  bold
     position (-1,1)
     print $ACTIVITY_RATE_STR    (,52,16)  bold
     print $AHV_OBLIGATORY_STR   (,{col6})    bold
     print $BUDG_FAM_STR         (,{col7})    bold
     print $CORRECTION_STR       (,{col13})    bold
     print $AHV_NR_STR           (+1,{col1})   bold
   
     print $SUM_SALARY_STR       (,{col6})    bold
     print $BIRTH_LBL          (+1,25)         bold
     print $CHILD1_STR           (+1,{col2})
     
     print $BIRTH_STR            (,{col9})
     print $CHILD_BENEF_STR      (,{col10})
     print $EDUCATION_BEN_STR    (,{col12})
     print $BIRTH_DATE_STR       (,{col3})
     print '_'                   (+1,10,119)    fill bold
  else
     print $FAK_CANTON_STR       (+1,{col1})
     print ' '                   (,)
     print $Canton_NameR         (,)
     print $NAME1_STR            (+2,{col1})  bold
     position (+1,1)
     print $ENTRY_EXIT_STR       (,{col4})  bold
     position (-1,1)
     print $ACTIVITY_RATE_STR    (,52,10) bold
     print $AHV_OBLIGATORY_STR   (,{col6})    bold
     print $AHV_NR_STR           (+1,{col1})  bold

     print $SUM_SALARY_STR       (,{col61})   bold
     print $CHILD1_STR           (+1,{col2})
     print $NNSS_NR_STR          (,25)         bold
     print $BIRTH_DATE_STR       (,{col3})
     print '_'                   (+1,10,119)    fill bold
  end-if
 when = 'TypeTwo'
  print $Cpdescr  (+1,{col1})
  print $FAK_CANTON_STR       (+1,{col1})
  print ' '                   (,)
  print $Canton_NameR        (,)
 when = 'TypeThree'
  if ($Ctl_Canton <> '')
    let #PageCounter = #PageCounter + 1
     print $HD_CANTON_PAGE (5,#RptCol)
         print #PageCounter     (,{ColM}) edit 88888888
     position (-1,1)
   end-if
   print $Cpdescr  (+1,{col1R})
           
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
       !  print $FAK_STR              (+2,{col1R})
       !  print ' '                   (,)
         print $RECAPITULATION_STR    (+2,{col1R})
         print $CANTON_STR            (+3,{col1R})  bold
         print $RUDIMENT_STR          (,18) bold
         print $SUM_SALARY_R_STR      (,{col3_R})   bold
         print $HOUSEHOLD_R_STR       (,{col4R})    bold
         print $BIRTH_STR             (,{col5R})    bold
         print $CHILD_BENEF_STR       (,{col6R})    bold
         print $EDUCATION_BEN_STR     (,{col7R})    bold
         print $CORRECTION_STR        (,{col8R})    bold
         print $AHV_OBLIGATORY_T_STR1 (,{col9R})    bold
         print $AHV_OBLIGATORY_T_STR2 (+1,{col9R})    bold
      
    else
         print $FAK_STR              (+2,{col1R})
         print ' '                   (,)
         print $RECAPITULATION_STR   (,)
         print $CANTON_STR           (+2,{col1R})     bold
         
         
         
        if $language_cd = 'FRA'
                        let $AHV_OBLIGATORY_T_STR = 'Salaires soumis AVS'
                        print $AHV_OBLIGATORY_T_STR   (,{col9R_1}  )    bold
        else
                       print $AHV_OBLIGATORY_T_STR1   (,{col9R}    )    bold
       end-if
        print $AHV_OBLIGATORY_T_STR2 (+1,{col9R})    bold
    end-if
     print '_'                    (+1,10,119)    fill bold
    
end-evaluate

end-heading
!*****************************************************************
begin-footing 9
if $Finish_Canton = 'Y'

  DO Format-Number(#Sum_AHV_Page , $Sum_AHV_Page_1, '9,999,999,999.00')
  DO Format-Number(#Sum_House_Page , $Sum_House_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Geb_Page , $Sum_Geb_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Child_Page , $Sum_Child_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Edu_Page , $Sum_Edu_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_Corr_Page , $Sum_Corr_Page_1, '99,999,999.00')
  DO Format-Number(#Sum_FAK_Page , $Sum_FAK_Page_1, '9,999,999,999.00')
  DO Format-Number(#Sum_AHV_Can , $Sum_AHV_Can_1, '9,999,999,999.00')
  DO Format-Number(#Sum_House_Can , $Sum_House_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Geb_Can , $Sum_Geb_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Child_Can , $Sum_Child_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Edu_Can , $Sum_Edu_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_Corr_Can , $Sum_Corr_Can_1, '99,999,999.00')
  DO Format-Number(#Sum_FAK_Can , $Sum_FAK_Can_1, '9,999,999,999.00')

  if $Ctl_Canton <> 'GE'  and $Genf_Can <> 'Y'

   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
      print $Sum_AHV_Page_1       (,{col6})   bold
   end-if
   print $Sum_House_Page_1     (,{col7})   bold
   print $Sum_Corr_Page_1      (,{col13})  bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})
   print $Sum_FAK_Page_1       (,{col6})   bold

   print $SUM_TOT_STR         (+2,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Can_1        (,{col6})   bold
   end-if
   print $Sum_House_Can_1      (,{col7})   bold
   print $Sum_Corr_Can_1       (,{col13})  bold

   print $Sum_Geb_Can_1        (+1,{col9})
   print $Sum_Child_Can_1      (,{col10})
   print $Sum_Edu_Can_1        (,{col12})
   print $Sum_FAK_Can_1        (,{col6}) bold

  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})   bold
   end-if

   print $SUM_TOT_STR        (+2,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Can_1        (,{col6})   bold
   end-if

  end-if

end-if

   DO Format-Number(#Sum_House_Page , $Sum_House_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Geb_Page , $Sum_Geb_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Child_Page , $Sum_Child_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Edu_Page , $Sum_Edu_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_Corr_Page , $Sum_Corr_Page_1, '99,999,999.00')
   DO Format-Number(#Sum_FAK_Page , $Sum_FAK_Page_1, '9,999,999,999.00')
   DO Format-Number(#Sum_AHV_Page , $Sum_AHV_Page_1, '9,999,999,999.00')

if $Finish_Canton = 'N'
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})  bold
   end-if
   print $Sum_House_Page_1     (,{col7})     bold
   print $Sum_Corr_Page_1      (,{col13})    bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})

   print $Sum_FAK_Page_1       (,{col6}) bold
  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6}) bold
   end-if

  end-if
end-if

if $Finish_Canton = 'T'
  if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6})  bold
   end-if
   print $Sum_House_Page_1     (,{col7})     bold
   print $Sum_Corr_Page_1      (,{col13})    bold
   print $Sum_Geb_Page_1       (+1,{col9})
   print $Sum_Child_Page_1     (,{col10})
   print $Sum_Edu_Page_1       (,{col12})

   print $Sum_FAK_Page_1       (,{col6})  bold
  else
   print '_'                 (+1,10,119)    fill
   print $PAGE_SUM_STR       (+1,{col1})
   if $Run_Retro_Check <> '5'
     print $Sum_AHV_Page_1       (,{col6}) bold
   end-if

  end-if
end-if

let #Sum_AHV_Page    = 0
let #Sum_FAK_Page    = 0
let #Sum_House_Page  = 0
let #Sum_Geb_Page    = 0
let #Sum_Child_Page  = 0
let #Sum_Edu_Page    = 0
let #Sum_Corr_Page   = 0
let #Count_EMPLID = 0
end-footing

!******************************************************************************************
begin-procedure Ask-Input
  let $Emplid-String            = ''
  let $temp-value               = ''
  let #count_Emplid             = 0
  let $Emplid_Criteria1         = ''
  let $Emplid_Criteria1_PS      = ''
  let $Emplid_Criteria1_tmp     = ''
  let $Emplid_Criteria1_tmp1    = ''

  input $Ctl_Curr_Pay_End_Dt    'Current Pay End Date ' type=date
  input $Ctl_PayEntity  'Pay Entity '        type=char      maxlen=10
more:
  input $Ask_Emplid     'EMPLID, you can select mmore again Yes(Y) No(N)'
  if $Ask_Emplid = 'Y'
         input $Ctl_Emplid  'EMPLID '
         if $Ctl_Emplid <> ''
         let $temp-value                = rtrim($Ctl_Emplid,' ')
         let $Emplid-String     = $Emplid-String || '''' || $temp-value || '''' || ','
         let #count_Emplid              = #count_Emplid + 1
         end-if
         goto more
  end-if

  if #count_Emplid <> 0
         let $Emplid-String             = rtrim($Emplid-String,',')
         let $Emplid_Criteria1          = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_PS       = ' AND PS.EMPLID IN ( ' || $Emplid-String || ')'
         let $Emplid_Criteria1_tmp      = ' AND PBD.EMPLID IN ( ' || $Emplid-String || ')'
  end-if

  input $Ctl_Dept_ID 'Department '
  input $Ctl_Canton 'Canton '
  
end-procedure Ask-Input
!***********************************************************************************
begin-procedure Get-Values
    let $language_cd                       = RTRIM($PRCS_LANGUAGE_CD,' ')
    let $ApplyContextLanguage              = RTRIM(&GPCH_RUN_CNTL.GPCH_CONTEXT_LANG,' ')
        let $Ctl_Department_Crit           = ''
        let $Ctl_Department_Crit_PS        = ''
        let $Ctl_Department_Crit_tmp       = ''
        let $Ctl_Department_Crit_tmp1      = ''
        let $Ctl_Country_Crit              = ''
        let $Ctl_Canton_Crit               = ''
        let $Ctl_Canton_Crit_P             = ''
        let $Ctl_Canton_Crit1              = ''
        let $Genf_Crit                   = ''
        let $Ctl_Dept_ID                   = $Ctl_Deptid
        let $Ctl_Canton                    = RTRIM(&GPCH_RUN_CNTL.GPCH_TX_CANTON,' ')
        let $Run_Retro_Check               = rtrim(&GPCH_RUN_CNTL.GPCH_IC_RUN_RETRO,' ')

        if $Ctl_Canton <> ''
           let $Ctl_Canton_Crit            = ' AND PBD.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit_P          = ' AND PS.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit1           = ' AND CANT.STATE  = ''' || $Ctl_Canton || ''' '
 
     let $Ctl_Canton_Crit_Ret        = ' AND AL04_12.STATE  = ''' || $Ctl_Canton || ''' '
        else
           let $Ctl_Canton_Crit            = ' '
           let $Ctl_Canton_Crit_P          = ' '
           let $Ctl_Canton_Crit1           = ' '
     let $Ctl_Canton_Crit_Ret        = ' '

    end-if

          let $Genf_Crit     = ' '
          let $Genf_Crit_Ret = ' '
          let $Genf_Crit1 = ' '

        if $Ctl_Dept_ID <> ''
           let $Ctl_Department_Crit          = ' AND PBD.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
           let $Ctl_Department_Crit_PS   = ' AND PS.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
           let $Ctl_Department_Crit_tmp  = ' AND PBD.DEPTID  = ''' || $Ctl_Dept_ID || ''' '
        else
           let $Ctl_Department_Crit          = ' '
           let $Ctl_Department_Crit_PS   = ' '
           let $Ctl_Department_Crit_tmp  = ' '
        end-if
           Let $GPCH_EG_YEP_FLG = RTRIM(&GPCH_RUN_CNTL.GPCH_EG_YEP_FLG,' ') !sqh
           let $Ctl_Year        = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
           let #Domainid = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID
           let $providertype='5'
                   
                
end-procedure
!******************************************************************************
begin-procedure Process-Main
do Get_Canton_Description
if $Cal_Run_Id_M_String      <> ''
   let $Cal_Run_Id_Crit_TX02_1   = ' AND AL04_1.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
else
   let $Cal_Run_Id_Crit_TX02_1   = ' '
end-if

if $Cal_Run_Id_M_String      <> ''
   let $Cal_Run_Id_Crit_MRK   = ' AND MRK.CAL_RUN_ID IN ( ' || $Cal_Run_Id_M_String || ')'
else
   let $Cal_Run_Id_Crit_MRK   = ' '
end-if

let #Counter_Child = 0
let #Geb1    = 0
let #Geb2    = 0
let #Geb     = 0

let #House1  = 0
let #Birth1  = 0
let #Child_G1  = 0
let #Edu_G1  = 0
let #Child_L1  = 0
let #Edu_L1  = 0
let #Child_H1  = 0
let #Edu_H1     = 0
let #Corr1   = 0

let #House2  = 0
let #Birth2  = 0
let #Child_G2   = 0
let #Edu_G2  = 0
let #Child_L2   = 0
let #Edu_L2  = 0
let #Child_H2   = 0
let #Edu_H2     = 0
let #Corr2   = 0
  #debug show 'em ' $Ctl_Addr_Effdt

  let $Ctl_Company         = $Ctl_PayEntity
  let $Ctl_Curr_Pay_End_Dt = $ReportEndD
  let $Company_Criteria_PY = ' CD.COMPANY  = ' ||''''|| $Ctl_Company ||''''
  do Get-Company-Address($Ctl_PayEntity,$Ctl_Curr_Pay_End_Dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                         $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)
  do Load_Company_Description

let $Empl_ID               =  ''
let $Cal_RunID             =  ''
let #Empl_RCD              =  0
let $GP_Pay_Gr             =  ''
let $Cal_ID                =  ''
let #Rslt_Seg_Nr           =  0
let $Slice_End_DT          =  ''
let $Pay_Entity            =  ''
let $Company               =  ''
let $PRD_E_DT              =  ''
let $Cpay_E_DT             =  ''
let $RP_Year               =  ''
let $Dpt_ID                =  ''
let $Canton                =  ''
let $Hire_DT               =  ''
let $Term_DT               =  ''
let #FTE                   =  0
let #STD_Hours             =  0
let $Comp_Freq             =  ''
let #FAK_PCT               =  0
let #Staxb_PCT             =  0
let #Amount1               =  0
let #Amount2               =  0
let #Amount3               =  0
let #Amount4               =  0
let #Amount5               =  0
let #Amount6               =  0
let #Amount7               =  0
let #Amount8               =  0
let #Amount9               =  0
let #Amount10              =  0

let $Canton_Name           =  ''
let $N_Id                  =  ''
let $NNSS_Id               =  ''

let $Empl_Name             =  ''
let $Canton_Old            =  ''
     

do Canton_Report

end-procedure

!********************************************************************************************
begin-procedure Get_End_Mnth ( $Dte1, :$Dte2 )
  do ConvertToComponents($Dte1 , $tmp1_yy , $tmp1_mm , $tmp1_dd)
  let  #tmp1_mm  = to_number($tmp1_mm)
  let  #tmp1_yy  = to_number($tmp1_yy)

  if #tmp1_mm = 2
     move 28 to #MonthDays1
     if (((mod(#tmp1_yy,4) = 0) and (mod(#tmp1_yy,100) != 0)) or
        (mod(#tmp1_yy,400) = 0))
         add 1 to #MonthDays1
     end-if
   else
     if #tmp1_mm = 4 or #tmp1_mm = 6 or #tmp1_mm = 9 or #tmp1_mm = 11
         move 30 to #MonthDays1
     else
         move 31 to #MonthDays1
     end-if
   end-if

   let $MonthDays1 = to_char(#MonthDays1)
   let $E_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || $MonthDays1 || '0000'
   do Format-DateTime($E_DT_tmp1 , $Dte2, {DEFCMP}, '', 'native')

end-procedure
!********************************************************************************************
begin-procedure Get_Beg_Mnth ( $Dte1 , :$Dte2 )
  do ConvertToComponents($Dte1 , $tmp1_yy , $tmp1_mm , $tpm1_dd)

  let $B_DT_tmp1 = $tmp1_yy  || $tmp1_mm  || '01' || '0000'
  do Format-DateTime($B_DT_tmp1 , $Dte2, {DEFCMP}, '', 'native')
end-procedure
!********************************************************************************************
begin-procedure Canton_Report
let $Exist_Data          = 'N'
let #merk_found          = 0
let #Counter_tmp         = 0
let #Counter_tmp1        = 0

let #count_child_tmp  = 0
let $Merk_Retro       = 'N'
let $Merk_Header      = 'TypeOne'
let $Finish_Canton    = 'N'
let #Count_EMPLID = 0

let #AHV_PFL_Page        = 0
let #AHV_PFL_Total    = 0

let #TOT_FAK_Page     = 0
let #TOT_FAK_Total    = 0

let #HAUS_FAM_Page    = 0
let #HAUS_FAM_Total   = 0

let #GEB_Page         = 0
let #GEB_Total        = 0

let #KZUL_Page        = 0
let #KZUL_Total       = 0

let #AUSBZ_Page       = 0
let #AUSBZ_Total      = 0

let #KORR_Page        = 0
let #KORR_Total       = 0
let #PageCounter = 0
let #CantonCount = 0
let $Genf_Can = ''

do InitRekapData
do Select_Vald_Canton

end-procedure

!*************************************************************************************
begin-procedure Select_Vald_Canton

begin-select distinct
#ifdef ORACLE
/*+ INDEX(CANT PSAGPCH_RP_FK02)*/
#endif
CANT.STATE
   let $Canton_id  = &CANT.STATE
   let $Actual_Can = rtrim(&CANT.STATE, ' ')
   if $Actual_Can = ''
     let $Actual_Can = ' '
   end-if

  if $Actual_Can = 'GE'
     let $Genf_Can = 'Y'
  end-if
  ! Initialize all needed variables
  let #ChildAllowance1_Total = 0
  let #ChildAllowance2_Total = 0
  let #ChildAllowance3_Total = 0
  let #ChildAllowance4_Total = 0
  let #ChildAllowance5_Total = 0

  let #ChildAllowance1_FT = 0
  let #ChildAllowance2_FT = 0
  let #ChildAllowance3_FT = 0
  let #ChildAllowance4_FT = 0
  let #ChildAllowance5_FT = 0

  let #ChildAllowance1_PT = 0
  let #ChildAllowance2_PT = 0
  let #ChildAllowance3_PT = 0
  let #ChildAllowance4_PT = 0
  let #ChildAllowance5_PT = 0

  let #ChildAllowance1_H = 0
  let #ChildAllowance2_H = 0
  let #ChildAllowance3_H = 0
  let #ChildAllowance4_H = 0
  let #ChildAllowance5_H = 0

  let #EduAllowance1_Total = 0
  let #EduAllowance2_Total = 0
  let #EduAllowance3_Total = 0
  let #EduAllowance4_Total = 0
  let #EduAllowance5_Total = 0

  let #EduAllowance1_FT = 0
  let #EduAllowance2_FT = 0
  let #EduAllowance3_FT = 0
  let #EduAllowance4_FT = 0
  let #EduAllowance5_FT = 0

  let #EduAllowance1_PT = 0
  let #EduAllowance2_PT = 0
  let #EduAllowance3_PT = 0
  let #EduAllowance4_PT = 0
  let #EduAllowance5_PT = 0

  let #EduAllowance1_H = 0
  let #EduAllowance2_H = 0
  let #EduAllowance3_H = 0
  let #EduAllowance4_H = 0
  let #EduAllowance5_H = 0

  let #TotalEmpl = 0
  let #TotalBenefEmpl = 0

  let #BirthAllowance_Counter = 0
  let #BirthAllowance_Total = 0


    
   do Canton_Report1
   if $Exst_Dat = 'Y'
     do new_canton
     do Print-Canton-Summary($Actual_Can,#ChildAllowance1_Total,#ChildAllowance2_Total,
              #ChildAllowance3_Total,#ChildAllowance4_Total,#ChildAllowance5_Total,
              #ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,#ChildAllowance4_FT,
              #ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,#ChildAllowance3_PT,
              #ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,#ChildAllowance2_H,
              #ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,#EduAllowance1_Total,
              #EduAllowance2_Total,#EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
              #EduAllowance1_FT,#EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,
              #EduAllowance5_FT,#EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,
              #EduAllowance4_PT,#EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,
              #EduAllowance3_H,#EduAllowance4_H,#EduAllowance5_H,#TotalEmpl,#TotalBenefEmpl,
              #BirthAllowance_Counter,#BirthAllowance_Total)

     if ($Ctl_Canton = '')
        let #PageCounter = 0
     end-if
   end-if
   let $Genf_Can = 'N'

 
from PS_GPCH_RP_FK02 CANT
where CANT.PAY_ENTITY = $Ctl_PayEntity
AND CANT.SEG_BGN_DT >= $ReportBegD
AND CANT.SEG_BGN_DT <= $ReportEndD
[$Ctl_Canton_Crit1]
[$Canton_Criteria_Elm] !sqh
[$Genf_Crit1]
order by CANT.STATE
end-select
if $Exist_Data = 'Y'
   if $Blank_lang = 'Y'
        do Get-Language($ReportID, $Base_Language)
   end-if
   
  do Total_Rekap
end-if

  If $GPCH_EG_YEP_FLG = 'Y'
  do Insert-Ptotals
   End-If

end-procedure


!********************************************************************************************
Begin-Procedure Insert-Ptotals


  do Format-Number(#Total_Pymt ,$Sum_payment_xml,'9999999999.99')
   
  let   $Sum_payment_xml= rtrim(ltrim($Sum_payment_xml,' '),' ')
 
     
 let $xml_ptotals= '<PaymentSum>'||$Sum_payment_xml||'</PaymentSum>'
 

Begin-Sql on-error=give_warning

DELETE FROM PS_GPCH_EG_PTOTALS WHERE GPCH_SI_PROV_TYPE = '5' AND GPCH_SI_PROV_CD=$ptot_providercd  AND GPCH_RC_PAY_YEAR = $ptot_year AND COMPANY = $ptot_company  
AND GPCH_EG_REQUEST_ID=$ptot_requestid AND GPCH_EG_DOMAINID = #ptot_domainid

End-SQL


Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PTOTALS (COMPANY,GPCH_RC_PAY_YEAR,GPCH_EG_DOMAINID,GPCH_EG_REQUEST_ID,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,GPCH_EG_USERKEY,GPCH_EG_CMP_XML) 
 values ($ptot_company,$ptot_year,#ptot_domainid,$ptot_requestid,'5',$ptot_providercd,'X',$xml_ptotals)

End-SQL


End-Procedure
!************************************************************************************************
begin-procedure Canton_Report1
   let $Exst_Dat = 'N'
   let $Exst_Dat_Print = 'N'
   

   do Get_Fak_Tax_Data($Actual_Can,$Ctl_PayEntity,$ReportEndD,
                       $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                       $Tax_Language,$Employer_Tax_Nbr,#Employer_Tax_Pct,
                       #Employer_SI_Pct,$SI_AHV_MBR_ID,$SI_AHV_PROVCD,
                       $SI_KTG_MBR_ID,#SI_AHV_ADM_PC,#SI_TOT_AHV_PC,
                       #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

   do Get_Canton_Name
   do Get_Company_Name

   if $language_cd = ''
      do Get-Language($ReportID, $Fak_Language)
   end-if

   let #FAK_PCT               =  #Employer_SI_Pct 
   let #Staxb_PCT             =  #Employer_Fak_Pct
   let $Empl_ID_Old = ' '

begin-select
#ifdef ORACLE
/*+ INDEX(PBD PSAGPCH_RP_FK02)*/
#endif
PBD.EMPLID
PBD.CAL_RUN_ID
PBD.EMPL_RCD
PBD.GP_PAYGROUP
PBD.CAL_ID
PBD.RSLT_SEG_NUM
PBD.SLICE_END_DT
PBD.PAY_ENTITY
PBD.COMPANY
PBD.PRD_END_DT
PBD.GPCH_AL_CPAY_ENDDT
PBD.GPCH_RP_YEAR
PBD.DEPTID
PBD.STATE
PBD.HIRE_DT
PBD.TERMINATION_DT
PBD.FTE
PBD.STD_HOURS
PBD.COMP_FREQUENCY
PBD.GPCH_RP_AMOUNT1
PBD.GPCH_RP_AMOUNT2
PBD.GPCH_RP_AMOUNT3
PBD.GPCH_SI_FAK_PCT
PBD.GPCH_RP_AMOUNT4
PBD.GPCH_TX_STAXB_PCT
PBD.GPCH_RP_AMOUNT5
PBD.GPCH_RP_AMOUNT6
PBD.GPCH_RP_AMOUNT7
PBD.GPCH_RP_AMOUNT8
PBD.GPCH_RP_AMOUNT9
PBD.GPCH_RP_AMOUNT10
RP01.BIRTHDATE
!FMB substituted join to Pers_Nid by GPCH_RP_0001
RP01.NATIONAL_ID
RP01.GPCH_AH_NNSS
RP01.SEX !sqh

  let $Empl_ID               =  rtrim(&PBD.EMPLID,' ')
  let $Emplid_Xml            =  $Empl_ID
  let $Cal_RunID             =  rtrim(&PBD.CAL_RUN_ID,' ')
  let #Empl_RCD              =  &PBD.EMPL_RCD
  let $GP_Pay_Gr             =  rtrim(&PBD.GP_PAYGROUP,' ')
  let $Cal_ID                =  rtrim(&PBD.CAL_ID,' ')
  let #Rslt_Seg_Nr           =  &PBD.RSLT_SEG_NUM
  let $Slice_End_DT          =  rtrim(&PBD.SLICE_END_DT,' ')
  let $Pay_Entity            =  rtrim(&PBD.PAY_ENTITY,' ')
  let $Company               =  rtrim(&PBD.COMPANY,' ')
  let $PRD_E_DT              =  rtrim(&PBD.PRD_END_DT,' ')
  let $Cpay_E_DT             =  rtrim(&PBD.GPCH_AL_CPAY_ENDDT,' ')
  let $RP_Year               =  rtrim(&PBD.GPCH_RP_YEAR,' ')
  let $Dpt_ID                =  rtrim(&PBD.DEPTID,' ')
  let $Canton                =  rtrim(&PBD.STATE,' ')
  let $Hire_DT               =  rtrim(&PBD.HIRE_DT ,' ')
  let $Term_DT               =  rtrim(&PBD.TERMINATION_DT ,' ')
  let #FTE                   =  &PBD.FTE
  let #STD_Hours             =  &PBD.STD_HOURS
  let $Comp_Freq             =  rtrim(&PBD.COMP_FREQUENCY,' ')
  let #Amount1               =  &PBD.GPCH_RP_AMOUNT1
  let #Amount2               =  &PBD.GPCH_RP_AMOUNT2
  let #Amount3               =  &PBD.GPCH_RP_AMOUNT3
  let #FAK_PCT               =  #Employer_SI_Pct
  let #Amount4               =  &PBD.GPCH_RP_AMOUNT4
  let #Staxb_PCT             =  #Employer_Fak_Pct
  let #Amount5               =  &PBD.GPCH_RP_AMOUNT5
  let #Amount6               =  &PBD.GPCH_RP_AMOUNT6
  let #Amount7               =  &PBD.GPCH_RP_AMOUNT7
  let #Amount8               =  &PBD.GPCH_RP_AMOUNT8
  let #Amount9               =  &PBD.GPCH_RP_AMOUNT9
  let #Amount10              =  &PBD.GPCH_RP_AMOUNT10
  let $Sex                   =  rtrim(&RP01.SEX,' ')
   
    let $final_xml = '' !sqh
  let $N_Id                  =  rtrim(ltrim(&RP01.NATIONAL_ID,' '),' ')
  if $N_Id <> ''
    let $N_Id = edit($N_Id,'XXX.XX.XXX.XXX')
  end-if

  let $NNSS_Id               =  rtrim(ltrim(&RP01.GPCH_AH_NNSS,' '),' ')
  if $NNSS_Id <> ''
      let $NNSS_Id= substr($NNSS_Id,1,3)||'.'||
                       substr($NNSS_Id,4,4)||'.'||
                       substr($NNSS_Id,8,4)||'.'||
                       substr($NNSS_Id,12,2)
  end-if


  do Get-Emp-Address($Empl_ID,$ReportEndD,'HOME',$ADDLINE1,$ADDLINE2,$ADDLINE3,$ADDLINE31,$ADDLINE4,$ADDLINE5,
                     $ADDLINE6,$Full_Name,$FirstName,$LastName,$NAME_PREFIX, $NAME_TITLE,$NAME_ROYAL_PREFIX,
                     $NAME_ROYAL_SUFFIX,$Phone,$Email,$CITY,$STATE,$POSTAL)

  let $Empl_Name             =  rtrim($Full_Name,' ')
  let $Birth_DT              =  rtrim(&RP01.BIRTHDATE, ' ')

  let #Count_EMPLID = #Count_EMPLID + 1
  let $Empl_IDR               = $Empl_ID
  let $Cal_RunIDR             = $Cal_RunID
  let #Empl_RCDR              = #Empl_RCD
  let $GP_Pay_GrR             = $GP_Pay_Gr

  let $Cal_IDR                = $Cal_ID
  let #Rslt_Seg_NrR           = #Rslt_Seg_Nr
  let $Slice_End_DTR          = $Slice_End_DT
  let $Pay_EntityR            = $Pay_Entity
  let $CompanyR               = $Company
  let $PRD_E_DTR              = $PRD_E_DT
  let $Cpay_E_DTR             = $Cpay_E_DT
  let $RP_YearR               = $RP_Year
  let $Dpt_IDR                = $Dpt_ID
  let $CantonR                = $Canton
  let $Hire_DTR               = $Hire_DT
  let $Term_DTR               = $Term_DT
  let #FTER                   = #FTE
  let #STD_HoursR             = #STD_Hours
  let $Comp_FreqR             = $Comp_Freq
  let #Amount1R               = #Amount1
  let #Amount2R               = #Amount2
  let #Amount3R               = #Amount3
  let #FAK_PCTR               = #FAK_PCT
  let #Amount4R               = #Amount4
  let #Staxb_PCTR             = #Staxb_PCT
  let #Amount5R               = #Amount5
  let #Amount6R               = #Amount6
  let #Amount7R               = #Amount7
  let #Amount8R               = #Amount8
  let #Amount9R               = #Amount9
  let #Amount10R              = #Amount10

  let $N_IdR                  = $N_Id
  let $NNSS_IdR               = $NNSS_Id

  let $Empl_NameR             = $Empl_Name
  let $Birth_DTR              = $Birth_DT

  let #FTER1            = #FTER * 100
  let $FTER1            = to_char(#FTER1)
  let $STD_HoursR       = to_char(#STD_HoursR)
  let $ActRate_week     = $FTER1 || '%/' || $STD_HoursR
  let $Empl_ID_PCD      = rtrim($Empl_IDR,' ')
  let $Cal_RunID_PCD    = rtrim($Cal_RunIDR,' ')
  let #Empl_RCD_PCD     = #Empl_RCDR
  let $GP_Pay_Gr_PCD    = rtrim($GP_Pay_GrR,' ')
  let $Cal_ID_PCD     = rtrim($Cal_IDR,' ')
  let #Rslt_Seg_Nr_PCD    = #Rslt_Seg_NrR
  let $Slice_End_DT_PCD    = rtrim($Slice_End_DTR,' ')
  let $Canton_PCD     = rtrim($CantonR,' ')

  do Format-DateTime($PRD_E_DTR , $PRD_E_Date1, {DEFCMP}, '', '')

  if $ActionR = 'HIR'
    let $String_Before_E = 'E: '
  end-if

  if $ActionR = 'TWE'
    let $String_Before_E = 'TW: '
  end-if

  if $ActionR = 'TER'
    let $String_Before_T = 'A: '
  end-if

  !------------------------------------------------------------------------
  let $StillHired0 = 'Y'
  do Get_Beg_Mnth($PRD_E_DTR, $BgDt0 )
  do Get_End_Mnth($PRD_E_DTR, $EdDt0 )

  do Format-DateTime($BgDt0 , $BgDtCmp0, {DEFCMP}, '', '')
  do Format-DateTime($EdDt0 , $EdDtCmp0, {DEFCMP}, '', '')
  do Format-DateTime($Term_DTR , $TermDtCmp0, {DEFCMP}, '', '')

  if ($TermDtCmp0 < $BgDtCmp0) and  ($TermDtCmp0 <> '')
     let $StillHired0 = 'N'
  end-if
  !------------------------------------------------------------------------

   if (($PRD_E_Date1 >= $Ctl_B_Date) and ($PRD_E_Date1 <= $Ctl_E_Date))
      and ( ($StillHired0 = 'Y'and
          (#Amount1R <> 0 or #Amount2R <> 0 or
          #Amount5R <> 0 )) or ($StillHired0 = 'N' and
          (#Amount1R <> 0 or #Amount2R <> 0 or
          #Amount5R <> 0 )))
          
       let $Only_Wage_Change = 'N'
       do Print_Actual_Data
       do Print_Child_Data
       let $Exst_Dat = 'Y'
   end-if

   !if ($Empl_ID_Old <> $Empl_IDR ) or (#Empl_RCD_Old  <> #Empl_RCD )
      do check_Retro1
   !end-if
       
         If $GPCH_EG_YEP_FLG = 'Y'
       do Insert_FAKMTHLY_EMPL_XML !sqh
         End-If

   let $Empl_ID_Old      = $Empl_IDR
   let #Empl_RCD_Old     = #Empl_RCD
   let $Canton_Old       = $CantonR

   let $Empl_ID_Old      = $Empl_ID
   let $Canton_Old       = $Canton
   let $Exist_Data       = 'Y'
   let #count_child_tmp  = 0
!FMB substituted join to  PERS_NID by GPCH_RP_0001
FROM PS_GPCH_RP_FK02 PBD,PS_GPCH_RP_0001 RP01
WHERE  PBD.EMPLID              = RP01.EMPLID
AND    PBD.EMPL_RCD            = RP01.EMPL_RCD
AND    PBD.CAL_RUN_ID          = RP01.CAL_RUN_ID
AND    PBD.CAL_ID              = RP01.CAL_ID
AND    PBD.GP_PAYGROUP         = RP01.GP_PAYGROUP
AND    PBD.RSLT_SEG_NUM        = RP01.RSLT_SEG_NUM
AND    PBD.SLICE_END_DT        = RP01.SLICE_END_DT
AND    PBD.STATE               = $Actual_Can
AND    PBD.PAY_ENTITY          = $Ctl_PayEntity
AND    PBD.GPCH_AL_CPAY_ENDDT <= $ReportEndD
#ifdef ORACLE
AND    RP01.GPCH_AL_CPAY_ENDDT  = (select /*+ INDEX(PBD1 PS_GPCH_RP_0001)*/ max(PBD1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 PBD1
#else
AND    RP01.GPCH_AL_CPAY_ENDDT  = (select max(PBD1.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 PBD1
#endif
                                  where PBD1.PAY_ENTITY = $Ctl_PayEntity
!                                 AND   PBD1.STATE = $Actual_Can
                                  AND   PBD1.GPCH_TX_FAK_CANTON = $Actual_Can
                                  AND   PBD1.EMPLID = PBD.EMPLID
                                  AND   PBD1.EMPL_RCD = PBD.EMPL_RCD
                                  AND   PBD1.GPCH_AL_CPAY_ENDDT <= $ReportEndD)
#ifdef ORACLE
AND    RP01.PRD_END_DT          = (select /*+ INDEX(PBD2 PS_GPCH_RP_0001)*/ max(PBD2.PRD_END_DT) from PS_GPCH_RP_0001 PBD2
#else
AND    RP01.PRD_END_DT          = (select max(PBD2.PRD_END_DT) from PS_GPCH_RP_0001 PBD2
#endif
                                  where PBD2.PAY_ENTITY = $Ctl_PayEntity
!                                 AND   PBD2.STATE = $Actual_Can
                                  AND   PBD2.GPCH_TX_FAK_CANTON = $Actual_Can
                                  AND   PBD2.EMPLID = PBD.EMPLID
                                  AND   PBD2.EMPL_RCD = PBD.EMPL_RCD
                                  AND   PBD2.GPCH_AL_CPAY_ENDDT = PBD.GPCH_AL_CPAY_ENDDT)



[$Emplid_Criteria1]
[$Ctl_Department_Crit]
[$Sort_Order]
end-select

end-procedure
!******************************************************************************************
Begin-Procedure Insert_FAKMTHLY_EMPL_XML

 ! Selecting in case there has been a canton change in retro and same person will have data for two cantons

 let $Final_xml_temp = ''
Begin-Select
GPCH_EG_PRSN_XML

 let $Final_xml_temp = rtrim(ltrim(&GPCH_EG_PRSN_XML,' '),' ')
 

From PS_GPCH_EG_PERSON
 WHERE  GPCH_EG_DOMAINID= #ptot_domainid
 AND GPCH_RC_PAY_YEAR = $ptot_year
 AND COMPANY = $ptot_company
 AND  EMPLID = $Empl_ID 
 AND EMPL_RCD = #E_RCD
 AND GPCH_SI_PROV_TYPE='5'
 AND BEGIN_DT= $ReportBegD 
 AND END_DT= $ReportEndD
End-Select

  let $Final_Xml = $Final_xml_temp || $Final_Xml

Begin-Sql on-error=give_warning

 
 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_RC_PAY_YEAR = $ptot_year AND COMPANY = $ptot_company AND  EMPLID = $Empl_ID AND EMPL_RCD = #E_RCD AND GPCH_SI_PROV_TYPE='5'
 and BEGIN_DT= $ReportBegD and END_DT= $ReportEndD
End-SQL




Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,$ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$Empl_ID,#E_RCD,$ReportBegD,$ReportEndD,1,$Final_Xml)

 
End-SQL


End-Procedure
!*********************************************************************************************
begin-procedure CheckForZeroRows
#debug show '-> CheckForZeroRows'
let $ZeroRowsChild = 'Y'

begin-select distinct
#ifdef ORACLE
/*+ INDEX(ZRCH PS_GPCH_RP_FK01)*/
#endif
ZRCH.GPCH_RP_AMOUNT1
ZRCH.GPCH_RP_AMOUNT2
ZRCH.GPCH_RP_AMOUNT3
ZRCH.GPCH_RP_AMOUNT4
ZRCH.GPCH_RP_AMOUNT5

  let #Amount1_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT1
  let #Amount2_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT2
  let #Amount3_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT3
  let #Amount4_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT4
  let #Amount5_ZRCH          =  &ZRCH.GPCH_RP_AMOUNT5

  if #Amount1_ZRCH <> 0 or #Amount2_ZRCH <> 0 or #Amount3_ZRCH <> 0 or
     #Amount4_ZRCH <> 0 or #Amount5_ZRCH <> 0
         let $ZeroRowsChild = 'N'
         exit-select
  end-if
from PS_GPCH_RP_FK01 ZRCH
where (ZRCH.EMPLID        = $Empl_IDR)          AND
      (ZRCH.CAL_RUN_ID    = $Cal_RunIDR)        AND
      (ZRCH.EMPL_RCD      = #Empl_RCDR)         AND
      (ZRCH.GP_PAYGROUP   = $GP_Pay_GrR)        AND
      (ZRCH.CAL_ID        = $Cal_IDR)           AND
      (ZRCH.RSLT_SEG_NUM  = #Rslt_Seg_NrR)      AND
      (ZRCH.SLICE_END_DT  = $Slice_End_DTR)

end-select
#debug show '<- CheckForZeroRows'
end-procedure
!******************************************************************************************
Begin-procedure Print_Actual_Data
   let $Merk_Retro = 'N'
   

     do Check_Exist_Children
    let #mm = 3 + #count_child_tmp + #current-line
    if #mm > 72
       new-page
    end-if
          do Print_Data1
        let #Sum_FAK_Can   = #Sum_FAK_Can   + #Amount1R
        let #Sum_AHV_Can   = #Sum_AHV_Can   + #Amount2R
  let #Sum_House_Can = #Sum_House_Can + #Amount5R
  let #Sum_Corr_Can  = #Sum_Corr_Can  + #Amount6R

        let #Geb1     = #Geb1  +  #Amount3R
        let #Geb2     = #Geb2  +  #Amount4R
  let #House1 = #House1 +  #Amount5R
  let #House2 = #House2 +  #Amount10R

        let #Birth2 = #Birth2 +  #Amount9R

        if (#FTER >= 1) and  ($Comp_FreqR <> 'H')
           let #Child_G2 = #Child_G2 +  #Amount7R
           let #Edu_G2   = #Edu_G2 +  #Amount8R
        end-if
        if (#FTER < 1) and  ($Comp_FreqR <> 'H')
           let #Child_L2 = #Child_L2 +  #Amount7R
           let #Edu_L2   = #Edu_L2 +  #Amount8R
        end-if

        if ($Comp_FreqR = 'H')
          let #Child_H2 = #Child_H2 +  #Amount7R
          let #Edu_H2   = #Edu_H2   +  #Amount8R
        end-if

end-procedure
!*******************************************************************************************
Begin-procedure Print_Retro_Data
#debug show 'Print_Retro_Data -> ' $Only_Wage_Change
  
let $Merk_Retro = 'Y'

do Check_Exist_Children
let #mm = 3 + #count_child_tmp + #current-line
if #mm > 72
      new-page
end-if

if $Only_Wage_Change = 'N'
     do Print_Retro2
end-if
        let #Sum_FAK_Can   = #Sum_FAK_Can   + #Amount1R
        let #Sum_AHV_Can   = #Sum_AHV_Can   + #Amount2R
        let #Sum_House_Can = #Sum_House_Can + #Amount5R
        let #Sum_Corr_Can  = #Sum_Corr_Can  + #Amount6R

        let #Geb1     = #Geb1  +  #Amount3R
        let #Geb2     = #Geb2  +  #Amount4R
        let #House1 = #House1 +  #Amount5R
        let #House2 = #House2 +  #Amount10R

          let #Birth2 = #Birth2 +  #Amount9R

          if (#FTER >= 1) and  ($Comp_FreqR <> 'H')
                 let #Child_G2 = #Child_G2 +  #Amount7R
                 let #Edu_G2   = #Edu_G2 +  #Amount8R
          end-if

          if (#FTER < 1) and  ($Comp_FreqR <> 'H')
                 let #Child_L2 = #Child_L2 +  #Amount7R
                 let #Edu_L2   = #Edu_L2 +  #Amount8R
          end-if

          if ($Comp_FreqR = 'H')
            let #Child_H2 = #Child_H2 +  #Amount7R
            let #Edu_H2   = #Edu_H2   +  #Amount8R
          end-if
          
#debug show 'Print_Retro_Data <- '          
end-procedure
!*******************************************************************************************
begin-procedure Total_Rekap
let $Merk_Header      = 'TypeThree'
let $Finish_Canton      = 'O'
let #Sum_Amount1_Total     = 0
let #Sum_Amount2_Total     = 0
let #Sum_Amount3_Total     = 0
let #Sum_Amount4_Total     = 0
let #Sum_Amount5_Total     = 0
let #Sum_Amount6_Total     = 0
let #Sum_Amount7_Total     = 0
let #CountRekData = 0

  print ' '                    (+1,10,119)    fill bold

while #CountRekData < #CantonCount
   get $StateRek      from RekapData(#CountRekData) Rekap1
   get $DescrRek      from RekapData(#CountRekData) Rekap2
   get #PctRek        from RekapData(#CountRekData) Rekap3
   get #Amnt1Rek      from RekapData(#CountRekData) Rekap4
   get #Amnt2Rek      from RekapData(#CountRekData) Rekap5
   get #Amnt3Rek      from RekapData(#CountRekData) Rekap6
   get #Amnt4Rek      from RekapData(#CountRekData) Rekap7
   get #Amnt5Rek      from RekapData(#CountRekData) Rekap8
   get #Amnt6Rek      from RekapData(#CountRekData) Rekap9
   get #Amnt7Rek      from RekapData(#CountRekData) Rekap10

   DO Format-Number(#PctRek , $PctRek_1,'888.000')
   DO Format-Number(#Amnt1Rek , $Amnt1Rek_1 ,'99,999,999.00')
   DO Format-Number(#Amnt2Rek , $Amnt2Rek_1 ,'999,999,999.00')
   DO Format-Number(#Amnt3Rek , $Amnt3Rek_1 ,'99,999,999.00')
   DO Format-Number(#Amnt4Rek , $Amnt4Rek_1 ,'99,999,999.00')
   DO Format-Number(#Amnt5Rek , $Amnt5Rek_1 ,'99,999,999.00')
   DO Format-Number(#Amnt6Rek , $Amnt6Rek_1 ,'99,999,999.00')
   DO Format-Number(#Amnt7Rek , $Amnt7Rek_1 ,'9,999,999,999.00')


   if ($Ctl_Canton <> '')
        print ' '                    (+1,10,119)    fill bold
    End-If

   
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
          print $DescrRek         (+1,{col1R},15)
          print $PctRek_1           (,{col2R})
          print $Amnt1Rek_1       (,{col3R})
          print $Amnt2Rek_1       (,{col4R})
          print $Amnt3Rek_1       (,{col5R})
          print $Amnt4Rek_1       (,{col6R})
          print $Amnt5Rek_1       (,{col7R})
          print $Amnt6Rek_1       (,{col8R})
          print $Amnt7Rek_1       (,{col9R})
   else

          print $DescrRek         (+1,{col1R},15)
          print $Amnt7Rek_1       (,{col9R})
   end-if
   let #Sum_Amount1_Total = #Sum_Amount1_Total + #Amnt1Rek
   let #Sum_Amount2_Total = #Sum_Amount2_Total + #Amnt2Rek
   let #Sum_Amount3_Total = #Sum_Amount3_Total + #Amnt3Rek
   let #Sum_Amount4_Total = #Sum_Amount4_Total + #Amnt4Rek
   let #Sum_Amount5_Total = #Sum_Amount5_Total + #Amnt5Rek
   let #Sum_Amount6_Total = #Sum_Amount6_Total + #Amnt6Rek
   let #Sum_Amount7_Total = #Sum_Amount7_Total + #Amnt7Rek

   let #CountRekData = #CountRekData + 1
end-while

DO Format-Number(#Sum_Amount1_Total , $Sum_Amount1_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount2_Total , $Sum_Amount2_Total_1, '999,999,999.00')
DO Format-Number(#Sum_Amount3_Total , $Sum_Amount3_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount4_Total , $Sum_Amount4_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount5_Total , $Sum_Amount5_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount6_Total , $Sum_Amount6_Total_1, '99,999,999.00')
DO Format-Number(#Sum_Amount7_Total , $Sum_Amount7_Total_1, '9,999,999,999.00')

if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
  print '_'                     (+1,10,119)  fill
  print $SUM_TOT_STR            (+1,{col1R})
  print $Sum_Amount1_Total_1    (,{col3R})
  print $Sum_Amount2_Total_1    (,{col4R})
  print $Sum_Amount3_Total_1    (,{col5R})
  print $Sum_Amount4_Total_1    (,{col6R})
  print $Sum_Amount5_Total_1    (,{col7R})
  print $Sum_Amount6_Total_1    (,{col8R})
  print $Sum_Amount7_Total_1    (,{col9R})
else
  print '_'                     (+1,10,119)   fill
  print $SUM_TOT_STR            (+1,{col1R})
  print $Sum_Amount7_Total_1    (,{col9R})
end-if
end-procedure
!*********************************************************************************************
begin-procedure Print_Data1
 
add 1 to #TotalEmpl

if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
else
   do Format-DateTime($Hire_DTR, $Hire_DTR1, {DEFDATE}, '', '')
   do Format-DateTime($Term_DTR, $Term_DTR1, {DEFDATE}, '', '')
   print  $Empl_NameR            (+2,{col1})       bold
   position (+1,1)
   print  $Hire_DTR1             (,{col4})            bold
   print  ' /'                   (,)                                                                                bold
   print  $Term_DTR1             (,)                  bold
   position (-1,1)
   print  $ActRate_week          (,{col5a})            bold
end-if

let #Sum_AHV_Page   = #Sum_AHV_Page + #Amount2R
let #Sum_House_Page = #Sum_House_Page + #Amount5R
let #Sum_Corr_Page  = #Sum_Corr_Page  + #Amount6R

if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
else
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
      DO Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
      DO Format-Number(#Amount5R , $Amount5R_1, '99,999,999.00')
      DO Format-Number(#Amount6R , $Amount6R_1, '99,999,999.00')

      print $Amount5R_1             (,{col7})      bold
      print $Amount6R_1             (,{col13})      bold

          if $Run_Retro_Check <> '5'
              print $Amount2R_1             (,{col6})            bold
          end-if
   else
          if $Run_Retro_Check <> '5'
             do Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
             print $Amount2R_1             (,{col6})            bold
          end-if
   end-if

   if $NNSS_IdR <> ''
      print $NNSS_IdR            (+1,{col1})  bold
   else
     print $N_IdR       (+1,{col1})          bold
   end-if
  !if $NNSS_IdR <> ''
  !  do Format-Number(#Empl_RCD,$EmplRcd,'888')
  !  let $EmplID_Rcd = rtrim($NNSS_IdR,' ') !|| '-' || $EmplRcd
  !
 !else
 !   do Format-DateTime($Birth_DTR, $Birth_DTR1, {DEFDATE}, '', '')
 !   do Format-Number(#Empl_RCD,$EmplRcd,'888')
 !   let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
 !   print $EmplID_Rcd       (+1,25)          bold
  !end-if
  do Format-DateTime($Birth_DTR, $Birth_DTR1, {DEFDATE}, '', '')
  print $Birth_DTR1            (+1,25) bold


end-if

let #Sum_FAK_Page = #Sum_FAK_Page + #Amount1R

if $Run_Retro_Check = '5' and #count_child_tmp = 0  and #Amount1R = 0
else
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
      DO Format-Number(#Amount1R , $Amount1R_1, '9,999,999,999.00')
      print $Amount1R_1             (,{col6})           bold
   end-if
end-if
  
 if $Run_Retro_Check = '5' and #count_child_tmp = 0  
 
else
 If $GPCH_EG_YEP_FLG = 'Y'
   let $N_IdR_xml=$N_IdR
   let $NNSS_IdR_xml=$NNSS_IdR
    let $LastName_xml=$LastName
    let $FirstName_xml =$FirstName
   do Get_Employee_Xml
 End-If
 End-If

end-procedure

!*********************************************************************************************
begin-procedure Get_Employee_Xml
#debug show '-> Get_Employee_Xml'
   
 do Get_EmployeeXml_Address

 If $NNSS_IdR_xml <> ''
  let $SV_AS_xml= '<SV-AS-Number>'||$NNSS_IdR_xml ||'</SV-AS-Number>'
   else 
  let $SV_AS_xml = '<AHV-AVS-Number>'||$N_IdR_xml ||'</AHV-AVS-Number>'
  End-If
  
  If $NNSS_IdR_xml = '' and $N_IdR_xml = ''
  
     Do Get_Employee_NID 
     
     If $NID_xml = ''
     
        let $SV_AS_xml= '<SV-AS-Number>'||'000.EMPL:' || $Empl_ID ||'</SV-AS-Number>'
     Else
     
        let $SV_AS_xml= '<SV-AS-Number>'|| $NID_xml ||'</SV-AS-Number>'
        !let $SV_AS_xml= '<SV-AS-Number>'||'000.0000.0000.00' ||'</SV-AS-Number>'
     End-If
     
  End-If 
  
  
 let $Emp_IdNo_xml= '<tnsb:SV-AS-AHV-AVS-Number>'||$SV_AS_xml|| '</tnsb:SV-AS-AHV-AVS-Number>'
  If $Sex = 'U' 
    let $Sex = 'M'
  End-If

 let $Emp_Name_xml ='<tnsb:LastName>'||$LastName_xml ||'</tnsb:LastName>' ||'<tnsb:FirstName>'||$FirstName_xml||'</tnsb:FirstName>'||'<tnsb:Sex>'||$Sex||'</tnsb:Sex>'
 let $Residency_xml ='<tnsb:Residence>'||$nation_Xml||'</tnsb:Residence>'
 let $Empl_Xml = '<tnsb:BeneficiaryPerson>'||$Emp_IdNo_xml||$Emp_Name_xml||$Residency_xml
  let $Final_Xml = $Final_Xml || $Empl_Xml
 let $BenPerson_endtag = 'N'
 

#debug show '<- Get_Employee_Xml'
end-procedure
!*******************************************************************************************

begin-procedure Get_Employee_NID

Let $NID_xml = ''

Begin-Select
NID1.NATIONAL_ID

       Let $NID_xml = LTRIM(RTRIM(&NID1.NATIONAL_ID,' '),' ')
       
from PS_PERS_NID NID1
where NID1.EMPLID = $Empl_ID
AND NID1.COUNTRY = 'CHE'
AND NID1.NATIONAL_ID_TYPE = 'NNSS'
End-Select

if $NID_xml <> ''
   let $NID_xml = substr($NID_xml,1,3)||'-'||
                  substr($NID_xml,4,4)||'-'||
                  substr($NID_xml,8,4)||'-'||
                  substr($NID_xml,12,2)
end-if

#debug show '<-Get_Employee_NID'
end-procedure           
begin-procedure Get_EmployeeXml_Address
#debug show '-> Get_EmployeeXml_Address'
  
Begin-Select 
XML1.COUNTRY
XML1.STATE
 
  
   Let $Country_xml        = LTRIM(RTRIM(&XML1.COUNTRY,' '),' ')
   Let $State_xml        = LTRIM(RTRIM(&XML1.STATE,' '),' ')

   If $Country_xml <>'CHE'
     let $Country_xml= substr($Country_xml,1,2)
   let $nation_Xml= '<Nation>' || $Country_xml || '</Nation>' 
   let $nation_child_temp = $nation_Xml
     else 
      let $nation_Xml ='<Canton>' || $State_xml ||'</Canton>'
       let $nation_child_temp = $nation_Xml
   End-If
      

from PS_ADDRESSES XML1
where XML1.EMPLID = $Empl_ID
AND XML1.ADDRESS_TYPE = 'HOME'
AND XML1.EFFDT = (Select MAX(XML2.EFFDT) from PS_ADDRESSES XML2
                                  WHERE XML2.EMPLID = $Empl_ID
                                    AND XML2.ADDRESS_TYPE = 'HOME'
                                    AND XML2.EFFDT <= $ReportEndD )
End-Select
#debug show '<- Get_EmployeeXml_Address'
end-procedure
!*********************************************************************************************
begin-procedure GetCountry2Char
#debug show '-> GetCountry2Char'

Begin-Select
C2C.COUNTRY_2CHAR

   Let $Country_2CHAR = LTRIM(RTRIM(&C2C.COUNTRY_2CHAR,' '),' ')

from PS_COUNTRY_TBL C2C
where C2C.COUNTRY = $Read_Country

End-Select
#debug show '<- GetCountry2Char'
end-procedure
!*********************************************************************************************

begin-procedure Print_Retro2
#debug show 'Print_Retro2 -> ' $Run_Retro_Check ' , ' #count_child_tmp ' , ' #Amount1R
 
  

if $Run_Retro_Check = '5' and #count_child_tmp = 0 and #Amount1R = 0
else
   if $Empl_ID_Old <> $Empl_IDR
      position (+1,1)
   end-if
   print $FROM_STR              (+1,{col1})
   print ' '                     (,)

   do ConvertToComponents($PRD_E_DTR , $yy_DTR , $mm_DTR , $dd_DTR)
   evaluate #Date_Type
   when = 2
      let $PRD_E_DTR1 = $yy_DTR || '{PTDateDelim}' || $mm_DTR
      break
   when-other
      let $PRD_E_DTR1    = $mm_DTR || '{PTDateDelim}' || $yy_DTR
      break
   end-evaluate

   do Format-DateTime($Hire_DTR, $Hire_DTR1, {DEFDATE}, '', '')
   do Format-DateTime($Term_DTR, $Term_DTR1, {DEFDATE}, '', '')
!
   let #FTER1            = #FTER * 100
   let $FTER1            = to_char(#FTER1)
   let $STD_HoursR       = to_char(#STD_HoursR)
   let $ActRate_week     = $FTER1 || '%/' || $STD_HoursR
!
   print $PRD_E_DTR1             (,)
   print  $Empl_NameR            (+1,{col1})
   position (+1,1)
   print  $Hire_DTR1             (,{col4})
   print  ' /'                   (,)
   print  $Term_DTR1             (,)
   position (-1,1)
   print  $ActRate_week          (,{col5a})

      
end-if

   let #Sum_AHV_Page   = #Sum_AHV_Page   + #Amount2R
   let #Sum_House_Page = #Sum_House_Page + #Amount5R
   let #Sum_Corr_Page  = #Sum_Corr_Page  + #Amount6R

if $Run_Retro_Check = '5' and #count_child_tmp = 0 and #Amount1R = 0
else
   if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
      DO Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
      DO Format-Number(#Amount5R , $Amount5R_1, '99,999,999.00')
      DO Format-Number(#Amount6R , $Amount6R_1, '99,999,999.00')

      print $Amount5R_1             (,{col7})
      print $Amount6R_1             (,{col13})

      if $Run_Retro_Check <> '5'
         print $Amount2R_1             (,{col6})
      end-if

   else

     if $Run_Retro_Check <> '5'
        DO Format-Number(#Amount2R , $Amount2R_1, '9,999,999,999.00')
        print $Amount2R_1             (,{col6})            bold
     end-if

   end-if


   if $NNSS_IdR <> ''
      print $NNSS_IdR            (+1,{col1})  bold
   else
     print $N_IdR       (+1,{col1})          bold
   end-if

!   if $NNSS_IdR <> ''
!      do Format-Number(#Empl_RCD,$EmplRcd,'888')
!      let $EmplID_Rcd = rtrim($NNSS_IdR,' ') !|| '-' || $EmplRcd
!      print $EmplID_Rcd            (+1,23)
!   else
!      do Format-DateTime($Birth_DTR, $Birth_DTR1, {DEFDATE}, '', '')
!      do Format-Number(#Empl_RCD,$EmplRcd,'888')
!      let $EmplID_Rcd = $Birth_DTR1 || '-' || $EmplRcd
!      print $EmplID_Rcd       (+1,25)
!   end-if

  do Format-DateTime($Birth_DTR, $Birth_DTR1, {DEFDATE}, '', '')
  print $Birth_DTR1            (+1,23)

end-if

   let #Sum_FAK_Page = #Sum_FAK_Page + #Amount1R

if $Run_Retro_Check = '5' and #count_child_tmp = 0 and #Amount1R = 0
else
    if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'
       DO Format-Number(#Amount1R , $Amount1R_1, '9,999,999,999.00')
       print $Amount1R_1             (,{col6})
    end-if
end-if

  
 ! End-If
  if $Run_Retro_Check = '5' and #count_child_tmp = 0 
  
else
  If $GPCH_EG_YEP_FLG = 'Y'

     let $N_IdR_xml=$N_IdR
     let $NNSS_IdR_xml=$NNSS_IdR
     let $LastName_xml=$LastName
     let $FirstName_xml =$FirstName
     do Get_Employee_Xml
  End-If
End-If

#debug show 'Print_Retro2 <- '
end-procedure
!*****************************************************************************************
begin-procedure Print_Child_Data
#debug show 'Print_Child_Data -> '


let #count_child_tmp = 0

let $EmplHasBenef = 'N'

begin-select
#ifdef ORACLE
/*+ INDEX(AL04_4R PS_GPCH_RP_FK01)*/
#endif
AL04_4R.EMPLID
AL04_4R.CAL_RUN_ID
AL04_4R.EMPL_RCD
AL04_4R.GP_PAYGROUP
AL04_4R.CAL_ID
AL04_4R.RSLT_SEG_NUM
AL04_4R.SLICE_END_DT
AL04_4R.PAY_ENTITY
AL04_4R.COMPANY
AL04_4R.PRD_END_DT
AL04_4R.GPCH_AL_CPAY_ENDDT
AL04_4R.GPCH_RP_YEAR
AL04_4R.DEPENDENT_BENEF
AL04_4R.BIRTHDATE
AL04_4R.GPCH_CA_EDU_END_DT
BEN1.NAME
AL04_4R.STUDENT
AL04_4R.DISABLED
AL04_4R.SEQ_NO
AL04_4R.GPCH_RP_AMOUNT1
AL04_4R.GPCH_RP_AMOUNT2
AL04_4R.GPCH_RP_AMOUNT3
AL04_4R.GPCH_RP_AMOUNT4
AL04_4R.GPCH_RP_AMOUNT5

  let #count_child_tmp      =  #count_child_tmp + 1
  let $count_child_tmp    =  to_char(#count_child_tmp)
  let $count_child_tmp    =  $count_child_tmp || '. '
  let $Empl_ID_AL04_4R          =  rtrim(&AL04_4R.EMPLID,' ')
  let $Cal_RunID_AL04_4R        =  rtrim(&AL04_4R.CAL_RUN_ID,' ')
  let #Empl_RCD_AL04_4R         =  &AL04_4R.EMPL_RCD
  let $GP_Pay_Gr_AL04_4R        =  rtrim(&AL04_4R.GP_PAYGROUP,' ')
  let $Cal_ID_AL04_4R           =  rtrim(&AL04_4R.CAL_ID,' ')
  let #Rslt_Seg_Nr_AL04_4R      =  &AL04_4R.RSLT_SEG_NUM
  let $Slice_End_DT_AL04_4R     =  rtrim(&AL04_4R.SLICE_END_DT,' ')
  let $Pay_Entity_AL04_4R       =  rtrim(&AL04_4R.PAY_ENTITY,' ')
  let $Company_AL04_4R          =  rtrim(&AL04_4R.COMPANY,' ')
  let $PRD_E_DT_AL04_4R         =  rtrim(&AL04_4R.PRD_END_DT,' ')
  let $Cpay_E_DT_AL04_4R        =  rtrim(&AL04_4R.GPCH_AL_CPAY_ENDDT,' ')
  let $RP_Year_AL04_4R          =  rtrim(&AL04_4R.GPCH_RP_YEAR,' ')
  let $Dependent_AL04_4R        =  rtrim(&AL04_4R.DEPENDENT_BENEF,' ')
  let $Birth_DT_AL04_4R         =  rtrim(&AL04_4R.BIRTHDATE,' ')
  let $Edu_End_DT_AL04_4R       =  rtrim(&AL04_4R.GPCH_CA_EDU_END_DT,' ')
  let $Name_AL04_4R             =  rtrim(&BEN1.NAME,' ')
  let $Student_AL04_4R          =  rtrim(&AL04_4R.STUDENT,' ')
  let $Disabled_AL04_4R         =  rtrim(&AL04_4R.DISABLED,' ')
  let #Sequence_AL04_4R         =  &AL04_4R.SEQ_NO
  let #Amount1_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT1
  let #Amount2_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT2
  let #Amount3_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT3
  let #Amount4_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT4
  let #Amount5_AL04_4R          =  &AL04_4R.GPCH_RP_AMOUNT5
  let $count_child_tmp    =  $count_child_tmp || $Name_AL04_4R

  if #Amount2_AL04_4R > 0
     or #Amount3_AL04_4R > 0
         or #Amount4_AL04_4R > 0

    let $EmplHasBenef = 'Y'
  end-if
     !**************for xml sqh*****************
   let $Slice_End_DT_FK01PCR = ''
   let  $Disabled_xml = $Disabled_AL04_4R
   let $Dependent_xml = $Dependent_AL04_4R !sqh
   let $Birthdt_xml = $Birth_DT_AL04_4R
   !let $Emplid_Xml= $Empl_IDR
    do ConvertToComponents($Slice_End_DT_AL04_4R,$yy_xml2,$mm_xml2,$dd_xml2)
           
           let $fromdt_xml = $yy_xml2 || '-' ||$mm_xml2||'-'||'01'
           let $todt_xml = $yy_xml2 || '-' ||$mm_xml2||'-'||$dd_xml2
     !*********************************************************************
   do Print_Data_Children

from PS_GPCH_RP_FK01 AL04_4R, PS_DEP_BEN_NAME BEN1
where (AL04_4R.EMPLID        = $Empl_IDR)          AND
      (AL04_4R.CAL_RUN_ID    = $Cal_RunIDR)        AND
      (AL04_4R.EMPL_RCD      = #Empl_RCDR)         AND
      (AL04_4R.GP_PAYGROUP   = $GP_Pay_GrR)        AND
      (AL04_4R.CAL_ID        = $Cal_IDR)           AND
      (AL04_4R.RSLT_SEG_NUM  = #Rslt_Seg_NrR)      AND
      (AL04_4R.SLICE_END_DT  = $Slice_End_DTR)     AND
      BEN1.EMPLID = AL04_4R.EMPLID AND
      BEN1.DEPENDENT_BENEF = AL04_4R.DEPENDENT_BENEF AND
      BEN1.EFFDT = (SELECT MAX(BEN1_T.EFFDT)
                    FROM PS_DEP_BEN_NAME BEN1_T
                    WHERE BEN1_T.EMPLID = BEN1.EMPLID AND 
                    BEN1_T.DEPENDENT_BENEF = BEN1.DEPENDENT_BENEF AND
                    BEN1_T.EFFDT <= $Slice_End_DTR)
order by AL04_4R.DEPENDENT_BENEF
end-select
     if $Final_Xml <> '' and $BenPerson_endtag = 'N'
     let $BenPerson_endtag = 'Y'
     !If $Final_Xml <> ''
   let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
    End-If
  if $EmplHasBenef = 'Y'
    add 1 to #TotalBenefEmpl
  end-if

#debug show 'Print_Child_Data <- '
end-procedure
!*************************************************************************************
begin-procedure Print_Data_Children
 #debug show 'Print_Data_Children -> ' 

  
  let $Amount_Zero_check = ''

   if (#Amount2_AL04_4R = 0
    and #Amount3_AL04_4R = 0
    and #Amount4_AL04_4R = 0) and $Only_Wage_Change = 'N'

    let $Amount_Zero_check = 'Y'
  
   else 
   let $Amount_Zero_check = 'N'
    
  end-if  

if $Only_Wage_Change = 'N'  and $Amount_Zero_check = 'N'

   do Format-DateTime($Birth_DT_AL04_4R, $Birth_DT_AL04_4R1, {DEFDATE}, '', '')
   do Format-Number(#Amount2_AL04_4R , $Amount2_AL04_4R_1, '99,999,999.00')
   do Format-Number(#Amount3_AL04_4R , $Amount3_AL04_4R_1, '99,999,999.00')
   do Format-Number(#Amount4_AL04_4R , $Amount4_AL04_4R_1, '99,999,999.00')

   print $count_child_tmp        (+1,{col2},42)
   print $Birth_DT_AL04_4R1      (,{col3},30)
  
   
   if $Canton_PCD <> 'GE' and $Genf_Can <> 'Y'

      print $Amount2_AL04_4R_1      (,{col9})
      print $Amount3_AL04_4R_1      (,{col10})
      print $Amount4_AL04_4R_1      (,{col12})
    

   end-if

  do Add-ChildData-To-Statistic(#FTER,$Comp_FreqR,#Amount2_AL04_4R,#Amount3_AL04_4R,#Amount4_AL04_4R,
                   #count_child_tmp,#ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,
                   #ChildAllowance4_FT,#ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,
                   #ChildAllowance3_PT,#ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,
                   #ChildAllowance2_H,#ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,
                   #ChildAllowance1_Total,#ChildAllowance2_Total,#ChildAllowance3_Total,
                   #ChildAllowance4_Total,#ChildAllowance5_Total,#EduAllowance1_FT,
                   #EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,#EduAllowance5_FT,
                   #EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,#EduAllowance4_PT,
                   #EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,#EduAllowance3_H,
                   #EduAllowance4_H,#EduAllowance5_H,#EduAllowance1_Total,#EduAllowance2_Total,
                   #EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
                   #BirthAllowance_Counter,#BirthAllowance_Total)

  let #Birth1 = #Birth1 +  #Amount2_AL04_4R

          if (#FTER >= 1) and  ($Comp_FreqR <> 'H')
                 let #Child_G1 = #Child_G1 +  #Amount3_AL04_4R
                 let #Edu_G1   = #Edu_G1 +  #Amount4_AL04_4R
          end-if
          
          if (#FTER < 1) and  ($Comp_FreqR <> 'H')
                 let #Child_L1 = #Child_L1 +  #Amount3_AL04_4R
                 let #Edu_L1   = #Edu_L1 +  #Amount4_AL04_4R
          end-if

          if ($Comp_FreqR = 'H')
            let #Child_H1 = #Child_H1 +  #Amount3_AL04_4R
            let #Edu_H1   = #Edu_H1   +  #Amount4_AL04_4R
          end-if
          
  let #Sum_Geb_Page    = #Sum_Geb_Page    + #Amount2_AL04_4R
  let #Sum_Child_Page  = #Sum_Child_Page  + #Amount3_AL04_4R
  let #Sum_Edu_Page    = #Sum_Edu_Page    + #Amount4_AL04_4R
  let #Sum_Geb_Can     = #Sum_Geb_Can     + #Amount2_AL04_4R
  let #Sum_Child_Can   = #Sum_Child_Can   + #Amount3_AL04_4R
  let #Sum_Edu_Can     = #Sum_Edu_Can     + #Amount4_AL04_4R
      
     !****************sqh for child xml*******************
       If $GPCH_EG_YEP_FLG = 'Y'
    do Format-Number(#Amount2_AL04_4R , $Amount2_AL04_4R_1, '99999999.00')
   do Format-Number(#Amount3_AL04_4R , $Amount3_AL04_4R_1, '99999999.00')
   do Format-Number(#Amount4_AL04_4R , $Amount4_AL04_4R_1, '99999999.00')

   
    let $Amount2_AL04_4R_1 = ltrim(rtrim($Amount2_AL04_4R_1,' '),' ')
 let $Amount3_AL04_4R_1 = ltrim(rtrim($Amount3_AL04_4R_1,' '),' ')
 let $Amount4_AL04_4R_1 = ltrim(rtrim($Amount4_AL04_4R_1,' '),' ')
       
    let $Amount_xml = ''
    let $Suppl_xml = ''
    let $Suppl_xml_twice = ''
    let $Amount_xml_twice = ''

 
      If $Slice_End_DT_AL04_4R <> ''
           !do ConvertToComponents($Slice_End_DT_FK01PCR,$yy_xml1,$mm_xml1,$dd_xml1)
           #debug show ' $$Slice_End_DT_FK01PCR = ' $Slice_End_DT_FK01PCR ' $Slice_End_DT_AL04_4R = ' $Slice_End_DT_AL04_4R
           do ConvertTOComponents($Slice_End_DT_AL04_4R,$yy_xml1,$mm_xml1,$dd_xml1)
           
           let $fromdt_xml = $yy_xml1 || '-' ||$mm_xml1||'-'||'01'
           let $todt_xml = $yy_xml1 || '-' ||$mm_xml1||'-'||$dd_xml1
       
      End-If

     If $Birthdt_xml <> ''
           do ConvertToComponents( $Birthdt_xml,$yy_xml2,$mm_xml2,$dd_xml2)
           let $Birthdt1_xml = $yy_xml2 || '-' ||$mm_xml2||'-'||$dd_xml2
     End-If

    ! find  ','  in   $count_child_tmp  0  #comma_loc
        let #pos1     = instr($count_child_tmp,',',0)
         let #pos2     = instr($count_child_tmp,'.',0)
       
    let #pos1 = #pos1 - 2
  ! **** Kij change order of get fname lname ****!
      let $lname_xml=substr($count_child_tmp,3,#pos1 - 1)
           let #pos1 =#pos1 + 3
      let $fname_xml= substr($count_child_tmp,#pos1,length($count_child_tmp))

    ! find ',' in $Name_AL04_4R 0 #comma_loc
    let #pos1 = instr($Name_AL04_4R,',',0) 
    let $lname_xml = substr($Name_AL04_4R,1,#pos1 - 1)    
    let $fname_xml= substr($Name_AL04_4R,#pos1+1,length($Name_AL04_4R))

    If $Amount4_AL04_4R_1 <> '0.00'
    
      let $Suppl_xml          = 'sfEducation'
      let $Suppl_xml_twice    = 'sfEducation'
      let $Amount_xml         = $Amount4_AL04_4R_1
      let $Amount_xml_twice   = $Amount4_AL04_4R_1 ! Incase employee has more than one non zero amount
      let  #Total_Pymt        = #Total_Pymt + #Amount4_AL04_4R
      do Get_Child_Xml
    End-If
       If $Amount3_AL04_4R_1 <> '0.00'
    
      let $Suppl_xml        = 'sfChild'
      let $Suppl_xml_twice  = 'sfChild'
      let $Amount_xml       = $Amount3_AL04_4R_1
      let $Amount_xml_twice = $Amount3_AL04_4R_1 ! Incase employee has more than one amount
      let  #Total_Pymt      = #Total_Pymt + #Amount3_AL04_4R
      do Get_Child_Xml
        End-If
     If $Amount2_AL04_4R_1  <> '0.00'
     
      let $Suppl_xml   = 'sfBirth'
      let $Amount_xml  = $Amount2_AL04_4R_1  
      let  #Total_Pymt = #Total_Pymt + #Amount2_AL04_4R
      do Get_Child_Xml
     End-If

     !do Get_Child_Xml
            
             !If ($Amount2_AL04_4R_1  <> '0.00' and $Amount4_AL04_4R_1 <> '0.00')
             !                    or ($Amount2_AL04_4R_1  <> '0.00' and $Amount3_AL04_4R_1 <> '0.00')
        ! to create two tags for same child with non zero values for two amounts
      
        !let $Suppl_xml   = $Suppl_xml_twice
        !let $Amount_xml  = $Amount_xml_twice
        !do Get_Child_Xml
        !     End-If
     End-If
     !*********************************************
  end-if
  #debug show 'Print_Data_Children <- ' 
end-procedure
!*************************************************************************************
begin-procedure Get_Child_Xml
#debug show '-> Get_Child_Xml' !sqh
   
     let $fname_xml = ltrim(rtrim($fname_xml,' '),' ')
     let $lname_xml = ltrim(rtrim($lname_xml,' '),' ')
     
     
     do Get_Dependent-Info
    If $Disabled_xml ='N'
        let $Disabled_xml1 ='0'
        else
         let $Disabled_xml1 ='1'
     End-If
  
          If $child_nnss_id <> ''
  let $SV_AS_childxml= '<SV-AS-Number>'||$child_nnss_id ||'</SV-AS-Number>'
   else 
  let $SV_AS_childxml = '<AHV-AVS-Number>'||$child_ahv_id ||'</AHV-AVS-Number>'
  End-If

  
  If $child_nnss_id ='' and $child_ahv_id = ''
    let $SV_AS_childxml= '<SV-AS-Number>'||'000.0000.0000.00' ||'</SV-AS-Number>'
  End-If
  
   If $Child_sex = 'U' 
     let $Child_sex = 'M'
   End-If

  let $child_idno_xml ='<tnsb:SV-AS-AHV-AVS-Number>'||$SV_AS_childxml ||'</tnsb:SV-AS-AHV-AVS-Number>'
  let $child_name_xml ='<tnsb:LastName>'||$lname_xml ||'</tnsb:LastName>' ||'<tnsb:FirstName>'||$fname_xml||'</tnsb:FirstName>'||'<tnsb:DateOfBirth>'||$Birthdt1_xml||'</tnsb:DateOfBirth>'||'<tnsb:Sex>'||$Child_sex||'</tnsb:Sex>'
  let $child_Res_xml ='<tnsb:Residence>'||$nation_child_xml||'</tnsb:Residence>' 
        If $death_dt1_xml <> ''
  let $child_death_xml = '<tnsb:DateOfDeath>' ||$death_dt1_xml||'</tnsb:DateOfDeath>'
        End-If 
  let $child_unempl_xml= '<tnsb:Unemployable>'||$Disabled_xml1|| '</tnsb:Unemployable>'

  let $child_suppl_xml ='<tnsb:KindOfSupplementary>'||$Suppl_xml||'</tnsb:KindOfSupplementary>'
  let $child_period_xml='<tnsb:PeriodFrom>'||$fromdt_xml||'</tnsb:PeriodFrom>'||'<tnsb:PeriodTo>'||$todt_xml||'</tnsb:PeriodTo>' 
  let $child_amount_xml='<tnsb:Amount>'||$Amount_xml||'</tnsb:Amount>'|| '<tnsb:BenefitCanton>'||$CantonR||'</tnsb:BenefitCanton>' 

  let $child_payment_xml= '<tnsb:Payment>'||$child_suppl_xml || $child_period_xml ||$child_amount_xml||'</tnsb:Payment>'

  let $child_final_xml= '<tnsb:Child>'||$child_idno_xml || $child_name_xml || $child_Res_xml||$child_death_xml||$child_unempl_xml||$child_payment_xml||'</tnsb:Child>'
  
  let $Final_Xml= $Final_Xml || $child_final_xml
       ! show '$$$Final_Xml in child--' $Final_Xml

#debug show '<- Get_Child_Xml'
end-procedure


!*****************************************************************************************
 begin-procedure Get_Dependent-Info
 #debug show '-> Get_Dependent-Info' !sqh
 let $child_ahv_id  = ''
 let $child_nnss_id = ''
 
Begin-Select

NID.NATIONAL_ID
NID.NATIONAL_ID_TYPE

  let $Child_natn_Id =  rtrim(&NID.NATIONAL_ID,' ')
  let $Child_id_type =  rtrim(&NID.NATIONAL_ID_TYPE,' ')
  
  If $Child_id_type = 'AHV'
      let $child_ahv_id =$Child_natn_Id
  End-If
   If $Child_id_type = 'NNSS'
      let $child_nnss_id =$Child_natn_Id
  End-If
  

from PS_DEP_BENEF_NID NID
 where EMPLID= $Emplid_Xml
      AND DEPENDENT_BENEF= $Dependent_xml

End-Select

Begin-Select 
ADR.SAME_ADDRESS_EMPL
ADR.COUNTRY
BEN.DT_OF_DEATH
BEN.BIRTHDATE
NM.FIRST_NAME
NM.LAST_NAME

  let $Same_Addr=rtrim(&ADR.SAME_ADDRESS_EMPL,' ')
  let $Cntry   = rtrim(&ADR.COUNTRY,' ')
  let $death_dt_xml = rtrim(&BEN.DT_OF_DEATH,' ')
  
  let $Birthdt_xml = &BEN.BIRTHDATE
  do ConvertToComponents( $Birthdt_xml,$yy_xml2,$mm_xml2,$dd_xml2)
  let $Birthdt_xml = $yy_xml2 || '-' || $mm_xml2 || '-' || $dd_xml2
 
  let $fname_xml = ltrim(rtrim(&NM.FIRST_NAME,' '),' ')
  let $lname_xml = ltrim(rtrim(&NM.LAST_NAME,' '),' ')
  

  If $death_dt_xml <> ''
           do ConvertToComponents( $death_dt_xml,$yy_xml3,$mm_xml3,$dd_xml3)
           let $death_dt1_xml = $yy_xml3 || '-' ||$mm_xml3||'-'||$dd_xml3
     End-If
 
  If $Same_Addr = 'Y'
  let $nation_child_xml= $nation_child_temp
   else 
    let $Read_Country = $Cntry
    do GetCountry2Char
    let $cntry = $Country_2CHAR

    let $nation_child_xml = '<Nation>' || $Cntry || '</Nation>' 
    End-If
   
      
  
From PS_DEP_BEN_ADDR ADR ,PS_DEP_BEN BEN,PS_DEP_BEN_NAME NM
where  ADR.EMPLID= $Emplid_Xml
      AND ADR.DEPENDENT_BENEF= $Dependent_xml
      AND ADR.EMPLID =BEN.EMPLID
      AND  ADR.DEPENDENT_BENEF= BEN.DEPENDENT_BENEF
      AND ADR.EFFDT = (SELECT MAX(ADR1.EFFDT)
                         FROM   PS_DEP_BEN_ADDR ADR1
                         WHERE  ADR1.EMPLID= $Emplid_Xml
                         AND ADR1.DEPENDENT_BENEF= $Dependent_xml
                          AND ADR1.EFFDT <= $ReportEndD)
      AND NM.EMPLID = $Emplid_Xml
      AND NM.DEPENDENT_BENEF = $Dependent_xml
      AND NM.EMPLID = BEN.EMPLID
      AND NM.DEPENDENT_BENEF = BEN.DEPENDENT_BENEF
      AND NM.EFFDT = (SELECT MAX(NM1.EFFDT)
                      FROM PS_DEP_BEN_NAME NM1
                      WHERE NM1.EMPLID = $Emplid_Xml
                      AND NM1.DEPENDENT_BENEF = $Dependent_xml
                      AND NM1.EFFDT <= $ReportEndD)
End-Select


  

Begin-Select 
BEN_EFF.SEX

  let $Child_sex=rtrim(&BEN_EFF.SEX ,' ')
  
  
From PS_DEP_BEN_EFF BEN_EFF
where BEN_EFF.EMPLID= $Emplid_Xml
      AND BEN_EFF.DEPENDENT_BENEF= $Dependent_xml
     
     AND BEN_EFF.EFFDT = (SELECT MAX(BEN_EFF1.EFFDT)
                         FROM   PS_DEP_BEN_EFF BEN_EFF1
                         WHERE  BEN_EFF1.EMPLID= $Emplid_Xml
                         AND BEN_EFF1.DEPENDENT_BENEF= $Dependent_xml
                          AND BEN_EFF1.EFFDT <= $ReportEndD)
End-Select


#debug show '<- Get_Dependent-Info'
end-procedure
!*******************************************************************************************
begin-procedure Check_Exist_Children
let #count_child_tmp = 0
  
begin-select
#ifdef ORACLE
/*+ INDEX(AL04_4R_C PS_GPCH_RP_FK01)*/
#endif
AL04_4R_C.EMPLID
  let #count_child_tmp      = #count_child_tmp + 1
 
from PS_GPCH_RP_FK01 AL04_4R_C
where (AL04_4R_C.EMPLID        = $Empl_IDR)          AND
      (AL04_4R_C.CAL_RUN_ID    = $Cal_RunIDR)        AND
      (AL04_4R_C.EMPL_RCD      = #Empl_RCDR)         AND
      (AL04_4R_C.GP_PAYGROUP   = $GP_Pay_GrR)        AND
      (AL04_4R_C.CAL_ID        = $Cal_IDR)           AND
      (AL04_4R_C.RSLT_SEG_NUM  = #Rslt_Seg_NrR)      AND
      (AL04_4R_C.SLICE_END_DT  = $Slice_End_DTR)
end-select

end-procedure
!*************************************************************************************
begin-procedure Get_Canton_Name
#DEBUG show '-> Get_Canton_Name  ' $Canton_id ' , ' $BASE_LANG ' , ' $language_cd  ' , ' $Fak_Language

      let $Key_Canton = $Canton_id || $Fak_Language

      Lookup Get_Base_Canton_Descr $Canton_id $Return_Val
      if Not Isnull ($Return_Val)
         let $Canton_NameR = rtrim($Return_Val,' ')
      end-if


      if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
         Lookup Get_Trans_Canton_Descr $Canton_id $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
             let $Canton_NameR = rtrim($Return_Val,' ')
         end-if
      end-if

      if ($BASE_LANG <> $language_cd) and ($language_cd = '')
         Lookup Get_Trans_Canton_Descr_ALL $Key_Canton $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Canton_NameR = rtrim($Return_Val,' ')
         end-if
      end-if


#DEBUG show '<- Get_Canton_Name  ' $Canton_NameR
end-procedure Get_Canton_Name
!*************************************************************************************
begin-procedure Get_Company_Name
#DEBUG show '-> Get_Company_Name   ' $Ctl_Company ' , ' $BASE_LANG ' , ' $language_cd  ' , ' $Fak_Language

      let $Key_Company  = $Ctl_Company || $Fak_Language

      Lookup Base_Company_Descr $Ctl_Company $Return_Val
      if Not Isnull ($Return_Val)
         let $Cpdescr = rtrim($Return_Val,' ')
      end-if


      if ($BASE_LANG <> $language_cd) and ($language_cd <> '')
         Lookup Trans_Company_Descr $Ctl_Company $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Cpdescr = rtrim($Return_Val,' ')
         end-if
      end-if

      if ($BASE_LANG <> $language_cd) and ($language_cd = '')
         Lookup Trans_Company_Descr_ALL $Key_Company $Return_Val
         if Not Isnull ($Return_Val)  ! Only if value returned else base language is printed.
            let $Cpdescr = rtrim($Return_Val,' ')
         end-if
      end-if


#DEBUG show '<- Get_Company_Name   ' $Canton_NameR
end-procedure Get_Company_Name
!*************************************************************************************

begin-procedure TO_5Rapen(:#AmntInOut)
   let #AmntInOut = round(#AmntInOut, 2)
   let #AmntInOut = #AmntInOut * 20
   let #AmntInOut = round(#AmntInOut, 0)
   let #AmntInOut = #AmntInOut / 20
end-procedure
!*************************************************************************************
begin-procedure Print_Rekap1

let #Geb1 = (#FAK_PCTR   * #Sum_AHV_Can) / 100
let #Geb2 = (#Staxb_PCTR * #Sum_AHV_Can) / 100

do TO_5Rapen(#Geb1)
do TO_5Rapen(#Geb2)

DO Format-Number(#Sum_AHV_Can , $Sum_AHV_Can_1, '9,999,999,999.00')
DO Format-Number(#Geb1 , $Geb1_1, '9,999,999,999.00')
DO Format-Number(#Geb2 , $Geb2_1, '9,999,999,999.00')
DO Format-Number(#FAK_PCTR , $FAK_PCTR_1, '8,888.000')
DO Format-Number(#Staxb_PCTR , $Staxb_PCTR_1, '8,888.000')

print $AHV_OBL_SUM_STR   (+1,{col1})
print $Sum_AHV_Can_1       (,{col8})
print $FAK_CONTRIB1_STR   (+1,{col1})
print '('                (,)
print $FAK_PCTR_1        (,)
print ')'                (,)
print $Geb1_1              (,{col5})
print $HANDL_CHARGE_STR  (+2,{col1})
print ' '                (,)
print $Staxb_PCTR_1      (,)
print $Geb2_1            (,{col5})

if $Ctl_Canton <> 'GE' and $Genf_Can <> 'Y'

  DO Format-Number(#Child_G1 , $Child_G1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_G1 , $Edu_G1_1, '9,999,999,999.00')
  DO Format-Number(#Child_L1 , $Child_L1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_L1 , $Edu_L1_1, '9,999,999,999.00')
  DO Format-Number(#Child_H1 , $Child_H1_1, '9,999,999,999.00')
  DO Format-Number(#Edu_H1 , $Edu_H1_1, '9,999,999,999.00')
  DO Format-Number(#Child_G2 , $Child_G2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_G2 , $Edu_G2_1, '9,999,999,999.00')
  DO Format-Number(#Child_L2 , $Child_L2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_L2 , $Edu_L2_1, '9,999,999,999.00')
  DO Format-Number(#Child_H2 , $Child_H2_1, '9,999,999,999.00')
  DO Format-Number(#Edu_H2 , $Edu_H2_1, '9,999,999,999.00')
  DO Format-Number(#Birth1 , $Birth1_1, '9,999,999,999.00')
  DO Format-Number(#Birth2 , $Birth2_1, '9,999,999,999.00')
  DO Format-Number(#Corr1 , $Corr1_1, '9,999,999,999.00')
  DO Format-Number(#Corr2 , $Corr2_1, '9,999,999,999.00')
  DO Format-Number(#House1 , $House1_1, '9,999,999,999.00')
  DO Format-Number(#House2 , $House2_1, '9,999,999,999.00')

  if $language_cd = 'GER'
  let $percent1  = '(100%, VZ)'
  let $percent2  = '(100%<,TZ)'
  end-if

  if $language_cd = 'ITA'
  let $percent1  = '(100%, Tempo pieno)'
  let $percent2  = '(100%<, Tempo parziale)'
  end-if

  if $language_cd = 'FRA'
  let $percent1  = '(100%, Plein temps)'
  let $percent2  = '(100%, Temps partiel)'
  end-if


  print $CHILD_BENEFS_STR  (+2,{col1})
  print $percent1          (,)
  print $Child_G1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print $percent1          (,)

  print $Edu_G1_1            (,{col8})
  print $CHILD_BENEFS_STR  (+1,{col1})
  print $percent2          (,)
  print $Child_L1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print $percent2          (,)
  print $Edu_L1_1            (,{col8})
  print $CHILD_BENEFS_STR  (+1,{col1})
  print '('                (,)
  print $HOURLY_RATE_STR   (,)
  print ')'                (,)
  print $Child_H1_1          (,{col8})
  print $EDU_BENEFS_STR    (+1,{col1})
  print '('                (,)
  print $HOURLY_RATE_STR   (,)
  print ')'                (,)
  print $Edu_H1_1            (,{col8})
  print $BIRTH_BENEFS_STR  (+2,{col1})
  print $Birth1_1            (,{col8})
  print $HOUSE_BENEF_STR   (+2,{col1})
  print $House1_1            (,{col8})
  print $CORRECTION1_STR   (+1,{col1})
  print ' '                (,)
  print $HOUSE_BENEF_STR   (,)
  print $House2_1            (,{col8})

  let #Geb         = #Geb1 + #Geb2
  !let #Gesamtsumme =  #House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +#Edu_L1 +
  !                    #Child_H1 + #Edu_H1 + #House2 + #Birth2 + #Child_G2 +
  !                    #Edu_G2 + #Child_L2 + #Edu_L2 + #Child_H2 + #Edu_H2
  let #Gesamtsumme =  #House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +#Edu_L1 +
                      #Child_H1 + #Edu_H1 + #House2

  let #Diff        =  #Geb1 - #Geb2 - (#House1 + #Birth1 + #Child_G1 + #Edu_G1 + #Child_L1 +
                      #Edu_L1 +  #Child_H1 + #Edu_H1 +  #House2 + #Birth2 + #Child_G2 +
                      #Edu_G2 + #Child_L2 + #Edu_L2 + #Child_H2 + #Edu_H2 )


  let #Diff1 = #Gesamtsumme - #Geb

  print '_' (+2,10,119) fill
  print $TOTAL_STR    (+1,{col1})
  let #temp_8 = -2 + {col8}

  DO Format-Number(#Gesamtsumme , $Gesamtsumme_1, '999,999,999,999.00')
  DO Format-Number(#Geb , $Geb_1, '9,999,999,999.00')
  DO Format-Number(#Diff1 , $Diff1_1, '9,999,999,999.00')

  print $Gesamtsumme_1  ( , #temp_8)
  print $Geb_1          (,{col5})
  print $FAK_DEBIT_BALA_STR  (+2,{col1})
  print $Diff1_1               (,{col5})

    print $CORRECTION1_STR   (+2,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print $percent1          (,)
    print $Child_G2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print $percent1          (,)
    print $Edu_G2_1            (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print $percent2          (,)
    print $Child_L2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print $percent2          (,)
    print $Edu_L2_1            (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $CHILD_BENEFS_STR  (,)
    print '('                (,)
    print $HOURLY_RATE_STR   (,)
    print ')'                (,)
    print $Child_H2_1          (,{col8})
    print $CORRECTION1_STR   (+1,{col1})
    print ' '                (,)
    print $EDU_BENEFS_STR    (,)
    print '('                (,)
    print $HOURLY_RATE_STR   (,)
    print ')'                (,)
    print $Edu_H2_1            (,{col8})
    print $CORRECTION1_STR   (+2,{col1})
    print ' '                (,)
    print $BIRTH_BENEFS_STR  (,)
    print $Birth2_1            (,{col8})


else
  let #Geb = #Geb1 + #Geb2
  let #Diff =   #Geb1 - #Geb2

  DO Format-Number(#Geb , $Geb_1, '9,999,999,999.00')
  DO Format-Number(#Diff , $Diff_1, '9,999,999,999.00')

  print '_' (+2,10,119) fill
  print $TOTAL_STR    (+1,{col1})
  let #temp_8 = -2 + {col8}
  print $Geb_1      (,{col5})
  print $FAK_DEBIT_BALA_STR  (+2,{col1})
  print $Diff_1     (,{col5})
end-if

let #Geb1      = 0
let #Geb2      = 0
let #Geb       = 0
let #House1    = 0
let #Birth1    = 0
let #Child_G1    = 0
let #Edu_G1    =0
let #Child_L1    = 0
let #Edu_L1    = 0
let #Child_H1    = 0
let #Edu_H1      = 0
let #Corr1     = 0
let #House2    = 0
let #Birth2    = 0
let #Child_G2    = 0
let #Edu_G2    = 0
let #Child_L2    = 0
let #Edu_L2    = 0
let #Child_H2    = 0
let #Edu_H2      = 0
let #Corr2     = 0

end-procedure

!*****************************************************************************************
begin-procedure new_canton
  let #Count_Cant = #Count_Cant + 1
  let $Finish_Canton = 'Y'
  new-page
  let $Merk_Header = 'TypeTwo'
  let $Finish_Canton = 'O'

  do Print_Rekap1
  do Insert_Total_Data

  let #Total_Cant_Amount4     = 0
  let #Total_Cant_Amount5    = 0
  let #Total_Cant_Tax_Amount  = 0
  new-page
  let #Sum_FAK_Can         = 0
  let #Sum_House_Can       = 0
  let #Sum_Geb_Can         = 0
  let #Sum_Child_Can       = 0
  let #Sum_Edu_Can         = 0
  let #Sum_Corr_Can        = 0
  let #Sum_AHV_Can         = 0
  let $Merk_Header      = 'TypeOne'
  let $Finish_Canton     = 'T'
  let #Count_EMPLID = 0
end-procedure

!*******************************************************************************************
begin-procedure Insert_Total_Data

put $CantonR          into RekapData(#CantonCount) Rekap1
put $Canton_NameR    into RekapData(#CantonCount) Rekap2
put #FAK_PCTR     into RekapData(#CantonCount) Rekap3
put #Sum_FAK_Can    into RekapData(#CantonCount) Rekap4
put #Sum_House_Can    into RekapData(#CantonCount) Rekap5
put #Sum_Geb_Can    into RekapData(#CantonCount) Rekap6
put #Sum_Child_Can    into RekapData(#CantonCount) Rekap7
put #Sum_Edu_Can    into RekapData(#CantonCount) Rekap8
put #Sum_Corr_Can    into RekapData(#CantonCount) Rekap9
put #Sum_AHV_Can    into RekapData(#CantonCount) Rekap10

let #CantonCount = #CantonCount + 1
end-procedure

!**********************************************************************************************
begin-procedure check_Retro1
#DEBUG SHOW 'check_Retro1 -> '  $Ctl_PayEntity ' , ' $Empl_ID ' , ' $Cal_Run_Id_M_String  ' , ' $ReportEndD ' , ' $ReportBegD
  
let $Cal_Run_Id_M_String11 = ltrim(rtrim($Cal_Run_Id_M_String,''''),'''')
#DEBUG SHOW $Cal_Run_Id_M_String11
begin-select distinct
#ifdef ORACLE
/*+ INDEX(PBDS PS_GPCH_RP_FK02)*/
#endif
PBDS.SEG_BGN_DT
PBDS.SLICE_END_DT

  let $PRD_B_DT_tmp_out = &PBDS.SEG_BGN_DT
  let $PRD_E_DT_tmp_out = &PBDS.SLICE_END_DT
  #debug show 'In ' $PRD_B_DT_tmp_out ' , ' $PRD_E_DT_tmp_out
    do check_Retro_Periode
    
FROM PS_GPCH_RP_FK02 PBDS
WHERE PBDS.CAL_ID in (SELECT F1.CAL_ID from PS_GPCH_RP_FK02 F1 
                      where F1.EMPLID     = $Empl_ID
                      AND   F1.CAL_RUN_ID = $Cal_Run_Id_M_String11 )
AND  (PBDS.GPCH_AL_CPAY_ENDDT = $ReportEndD
OR    PBDS.GPCH_AL_CPAY_ENDDT = (SELECT MAX(INSD1.GPCH_AL_CPAY_ENDDT) FROM PS_GPCH_RP_FK02 INSD1
                                WHERE INSD1.EMPLID     = PBDS.EMPLID
                                AND   INSD1.EMPL_RCD   = PBDS.EMPL_RCD
                                AND   INSD1.GPCH_AL_CPAY_ENDDT < $ReportEndD) )
AND   PBDS.PRD_END_DT         < $ReportBegD                                
AND   PBDS.PAY_ENTITY         = $Ctl_PayEntity
AND   PBDS.EMPLID             = $Empl_ID
AND   PBDS.EMPL_RCD           = #Empl_RCD   
ORDER BY  PBDS.SLICE_END_DT desc , PBDS.SEG_BGN_DT
end-select

#DEBUG SHOW 'check_Retro1 <- '
end-procedure check_Retro1
!********************************************************************************************
!Check Retro
begin-procedure Prepare_Child_Retro

 
let #m2 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(FK01PCR PS_GPCH_RP_FK01)*/
#endif
FK01PCR.EMPLID
FK01PCR.CAL_RUN_ID
FK01PCR.EMPL_RCD
FK01PCR.GP_PAYGROUP
FK01PCR.CAL_ID
FK01PCR.RSLT_SEG_NUM
FK01PCR.SLICE_END_DT
FK01PCR.PAY_ENTITY
FK01PCR.COMPANY
FK01PCR.PRD_END_DT
FK01PCR.GPCH_AL_CPAY_ENDDT
FK01PCR.GPCH_RP_YEAR
FK01PCR.DEPENDENT_BENEF
FK01PCR.BIRTHDATE
FK01PCR.GPCH_CA_EDU_END_DT
BEN2.NAME
FK01PCR.STUDENT
FK01PCR.DISABLED
FK01PCR.SEQ_NO
FK01PCR.GPCH_RP_AMOUNT1
FK01PCR.GPCH_RP_AMOUNT2
FK01PCR.GPCH_RP_AMOUNT3
FK01PCR.GPCH_RP_AMOUNT4
FK01PCR.GPCH_RP_AMOUNT5

  let $Empl_ID_FK01PCR               =  rtrim(&FK01PCR.EMPLID,' ')
  let $Cal_RunID_FK01PCR             =  rtrim(&FK01PCR.CAL_RUN_ID,' ')
  let #Empl_RCD_FK01PCR              =  &FK01PCR.EMPL_RCD
  let $GP_Pay_Gr_FK01PCR             =  rtrim(&FK01PCR.GP_PAYGROUP,' ')
  let $Cal_ID_FK01PCR                =  rtrim(&FK01PCR.CAL_ID,' ')
  let #Rslt_Seg_Nr_FK01PCR           =  &FK01PCR.RSLT_SEG_NUM
  let $Slice_End_DT_FK01PCR          =  rtrim(&FK01PCR.SLICE_END_DT,' ')
  let $Pay_Entity_FK01PCR            =  rtrim(&FK01PCR.PAY_ENTITY,' ')
  let $Company_FK01PCR               =  rtrim(&FK01PCR.COMPANY,' ')
  let $PRD_E_DT_FK01PCR              =  rtrim(&FK01PCR.PRD_END_DT,' ')
  let $Cpay_E_DT_FK01PCR             =  rtrim(&FK01PCR.GPCH_AL_CPAY_ENDDT,' ')
  let $RP_Year_FK01PCR               =  rtrim(&FK01PCR.GPCH_RP_YEAR,' ')
  let $Dependent_FK01PCR             =  rtrim(&FK01PCR.DEPENDENT_BENEF,' ')
  let $Birth_DT_FK01PCR              =  rtrim(&FK01PCR.BIRTHDATE,' ')
  let $Edu_End_DT_FK01PCR            =  rtrim(&FK01PCR.GPCH_CA_EDU_END_DT,' ')
  let $Name_FK01PCR                  =  rtrim(&BEN2.NAME,' ')
  let $Student_FK01PCR               =  rtrim(&FK01PCR.STUDENT,' ')
  let $Disabled_FK01PCR              =  rtrim(&FK01PCR.DISABLED,' ')
  let #Sequence_FK01PCR              =  &FK01PCR.SEQ_NO
  let #Amount1_FK01PCR               =  &FK01PCR.GPCH_RP_AMOUNT1
  let #Amount2_FK01PCR               =  &FK01PCR.GPCH_RP_AMOUNT2
  let #Amount3_FK01PCR               =  &FK01PCR.GPCH_RP_AMOUNT3
  let #Amount4_FK01PCR               =  &FK01PCR.GPCH_RP_AMOUNT4
  let #Amount5_FK01PCR               =  &FK01PCR.GPCH_RP_AMOUNT5

  if #m2 < #count_ch_tmp1
      put $Empl_ID_FK01PCR     into ChildData(0) Feld1(#m2)
   put $Cal_RunID_FK01PCR    into ChildData(0) Feld2(#m2)
   put #Empl_RCD_FK01PCR    into ChildData(0) Feld3(#m2)
   put $GP_Pay_Gr_FK01PCR    into ChildData(0) Feld4(#m2)
   put $Cal_ID_FK01PCR     into ChildData(0) Feld5(#m2)
   put #Rslt_Seg_Nr_FK01PCR    into ChildData(0) Feld6(#m2)
   put $Slice_End_DT_FK01PCR   into ChildData(0) Feld7(#m2)
   put $Pay_Entity_FK01PCR    into ChildData(0) Feld8(#m2)
   put $Company_FK01PCR     into ChildData(0) Feld9(#m2)
   put $PRD_E_DT_FK01PCR    into ChildData(0) Feld10(#m2)
   put $Cpay_E_DT_FK01PCR    into ChildData(0) Feld11(#m2)
   put $RP_Year_FK01PCR     into ChildData(0) Feld12(#m2)
   put $Dependent_FK01PCR    into ChildData(0) Feld13(#m2)
   put $Birth_DT_FK01PCR    into ChildData(0) Feld14(#m2)
   put $Edu_End_DT_FK01PCR    into ChildData(0) Feld15(#m2)
   put $Name_FK01PCR     into ChildData(0) Feld16(#m2)
   put $Student_FK01PCR     into ChildData(0) Feld17(#m2)
   put $Disabled_FK01PCR    into ChildData(0) Feld18(#m2)
   put #Sequence_FK01PCR    into ChildData(0) Feld19(#m2)
   put #Amount1_FK01PCR     into ChildData(0) Feld20(#m2)
   put #Amount2_FK01PCR     into ChildData(0) Feld21(#m2)
   put #Amount3_FK01PCR     into ChildData(0) Feld22(#m2)
   put #Amount4_FK01PCR     into ChildData(0) Feld23(#m2)
   put #Amount5_FK01PCR     into ChildData(0) Feld24(#m2)
   end-if
  let #m2 = #m2 + 1
from PS_GPCH_RP_FK01 FK01PCR, PS_DEP_BEN_NAME BEN2
WHERE FK01PCR.EMPLID                 =   $Empl_ID_CRP         and
      FK01PCR.CAL_RUN_ID             =   $Cal_RunID_CRP       and
      FK01PCR.EMPL_RCD               =   #Empl_RCD_CRP        and
      FK01PCR.GP_PAYGROUP            =   $GP_Pay_Gr_CRP       and
      FK01PCR.CAL_ID                 =   $Cal_ID_CRP          and
      FK01PCR.RSLT_SEG_NUM           =   #Rslt_Seg_Nr_CRP     and
      FK01PCR.SLICE_END_DT           =   $Slice_End_DT_CRP    and
      FK01PCR.PRD_END_DT             =   $PRD_E_DT_CRP        and
      FK01PCR.GPCH_AL_CPAY_ENDDT     =   $Cpay_E_DT_CRP AND
      BEN2.EMPLID = FK01PCR.EMPLID AND
      BEN2.DEPENDENT_BENEF = FK01PCR.DEPENDENT_BENEF AND
      BEN2.EFFDT = (SELECT MAX(BEN2_T.EFFDT)
                    FROM PS_DEP_BEN_NAME BEN2_T
                    WHERE BEN2_T.EMPLID = BEN2.EMPLID AND 
                    BEN2_T.DEPENDENT_BENEF = BEN2.DEPENDENT_BENEF AND
                    BEN2_T.EFFDT <= $Slice_End_DT_CRP)
end-select

end-procedure

!**************************************************************************************
begin-procedure Prepare_Child_Retro1

 
let #n2 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(FK01PCR2 PS_GPCH_RP_FK01)*/
#endif
FK01PCR2.EMPLID
FK01PCR2.CAL_RUN_ID
FK01PCR2.EMPL_RCD
FK01PCR2.GP_PAYGROUP
FK01PCR2.CAL_ID
FK01PCR2.RSLT_SEG_NUM
FK01PCR2.SLICE_END_DT
FK01PCR2.PAY_ENTITY
FK01PCR2.COMPANY
FK01PCR2.PRD_END_DT
FK01PCR2.GPCH_AL_CPAY_ENDDT
FK01PCR2.GPCH_RP_YEAR
FK01PCR2.DEPENDENT_BENEF
FK01PCR2.BIRTHDATE
FK01PCR2.GPCH_CA_EDU_END_DT
BEN3.NAME
FK01PCR2.STUDENT
FK01PCR2.DISABLED
FK01PCR2.SEQ_NO
FK01PCR2.GPCH_RP_AMOUNT1
FK01PCR2.GPCH_RP_AMOUNT2
FK01PCR2.GPCH_RP_AMOUNT3
FK01PCR2.GPCH_RP_AMOUNT4
FK01PCR2.GPCH_RP_AMOUNT5

  let $Empl_ID_FK01PCR2               =  rtrim(&FK01PCR2.EMPLID,' ')
  let $Cal_RunID_FK01PCR2             =  rtrim(&FK01PCR2.CAL_RUN_ID,' ')
  let #Empl_RCD_FK01PCR2              =  &FK01PCR2.EMPL_RCD
  let $GP_Pay_Gr_FK01PCR2             =  rtrim(&FK01PCR2.GP_PAYGROUP,' ')
  let $Cal_ID_FK01PCR2                =  rtrim(&FK01PCR2.CAL_ID,' ')
  let #Rslt_Seg_Nr_FK01PCR2           =  &FK01PCR2.RSLT_SEG_NUM
  let $Slice_End_DT_FK01PCR2          =  rtrim(&FK01PCR2.SLICE_END_DT,' ')
  let $Pay_Entity_FK01PCR2            =  rtrim(&FK01PCR2.PAY_ENTITY,' ')
  let $Company_FK01PCR2               =  rtrim(&FK01PCR2.COMPANY,' ')
  let $PRD_E_DT_FK01PCR2              =  rtrim(&FK01PCR2.PRD_END_DT,' ')
  let $Cpay_E_DT_FK01PCR2             =  rtrim(&FK01PCR2.GPCH_AL_CPAY_ENDDT,' ')
  let $RP_Year_FK01PCR2               =  rtrim(&FK01PCR2.GPCH_RP_YEAR,' ')
  let $Dependent_FK01PCR2             =  rtrim(&FK01PCR2.DEPENDENT_BENEF,' ')
  let $Birth_DT_FK01PCR2              =  rtrim(&FK01PCR2.BIRTHDATE,' ')
  let $Edu_End_DT_FK01PCR2            =  rtrim(&FK01PCR2.GPCH_CA_EDU_END_DT,' ')
  let $Name_FK01PCR2                  =  rtrim(&BEN3.NAME,' ')
  let $Student_FK01PCR2               =  rtrim(&FK01PCR2.STUDENT,' ')
  let $Disabled_FK01PCR2              =  rtrim(&FK01PCR2.DISABLED,' ')
  let #Sequence_FK01PCR2              =  &FK01PCR2.SEQ_NO
  let #Amount1_FK01PCR2               =  &FK01PCR2.GPCH_RP_AMOUNT1
  let #Amount2_FK01PCR2               =  &FK01PCR2.GPCH_RP_AMOUNT2
  let #Amount3_FK01PCR2               =  &FK01PCR2.GPCH_RP_AMOUNT3
  let #Amount4_FK01PCR2               =  &FK01PCR2.GPCH_RP_AMOUNT4
  let #Amount5_FK01PCR2               =  &FK01PCR2.GPCH_RP_AMOUNT5

  if #n2 < #count_ch_tmp1
      put $Empl_ID_FK01PCR2     into ChildData(1) Feld1(#n2)
   put $Cal_RunID_FK01PCR2      into ChildData(1) Feld2(#n2)
   put #Empl_RCD_FK01PCR2      into ChildData(1) Feld3(#n2)
   put $GP_Pay_Gr_FK01PCR2      into ChildData(1) Feld4(#n2)
   put $Cal_ID_FK01PCR2       into ChildData(1) Feld5(#n2)
   put #Rslt_Seg_Nr_FK01PCR2    into ChildData(1) Feld6(#n2)
   put $Slice_End_DT_FK01PCR2     into ChildData(1) Feld7(#n2)
   put $Pay_Entity_FK01PCR2      into ChildData(1) Feld8(#n2)
   put $Company_FK01PCR2     into ChildData(1) Feld9(#n2)
   put $PRD_E_DT_FK01PCR2      into ChildData(1) Feld10(#n2)
   put $Cpay_E_DT_FK01PCR2      into ChildData(1) Feld11(#n2)
   put $RP_Year_FK01PCR2     into ChildData(1) Feld12(#n2)
   put $Dependent_FK01PCR2      into ChildData(1) Feld13(#n2)
   put $Birth_DT_FK01PCR2      into ChildData(1) Feld14(#n2)
   put $Edu_End_DT_FK01PCR2      into ChildData(1) Feld15(#n2)
   put $Name_FK01PCR2       into ChildData(1) Feld16(#n2)
   put $Student_FK01PCR2     into ChildData(1) Feld17(#n2)
   put $Disabled_FK01PCR2      into ChildData(1) Feld18(#n2)
   put #Sequence_FK01PCR2      into ChildData(1) Feld19(#n2)
   put #Amount1_FK01PCR2     into ChildData(1) Feld20(#n2)
   put #Amount2_FK01PCR2     into ChildData(1) Feld21(#n2)
   put #Amount3_FK01PCR2     into ChildData(1) Feld22(#n2)
   put #Amount4_FK01PCR2     into ChildData(1) Feld23(#n2)
   put #Amount5_FK01PCR2     into ChildData(1) Feld24(#n2)
   end-if
  let #n2 = #n2 + 1

from PS_GPCH_RP_FK01 FK01PCR2, PS_DEP_BEN_NAME BEN3
WHERE FK01PCR2.EMPLID              = $Empl_ID_CRP_Old      and
      FK01PCR2.CAL_RUN_ID          = $Cal_RunID_CRP_Old    and
      FK01PCR2.EMPL_RCD            = #Empl_RCD_CRP_Old     and
      FK01PCR2.GP_PAYGROUP         = $GP_Pay_Gr_CRP_Old    and
      FK01PCR2.CAL_ID              = $Cal_ID_CRP_Old       and
      FK01PCR2.RSLT_SEG_NUM        = #Rslt_Seg_Nr_CRP_Old  and
      FK01PCR2.SLICE_END_DT        = $Slice_End_DT_CRP_Old and
      FK01PCR2.PRD_END_DT          = $PRD_E_DT_CRP_Old     and
      FK01PCR2.GPCH_AL_CPAY_ENDDT  = $Cpay_E_DT_CRP_Old AND
      BEN3.EMPLID = FK01PCR2.EMPLID AND
      BEN3.DEPENDENT_BENEF = FK01PCR2.DEPENDENT_BENEF AND
      BEN3.EFFDT = (SELECT MAX(BEN3_T.EFFDT)
                    FROM PS_DEP_BEN_NAME BEN3_T
                    WHERE BEN3_T.EMPLID = BEN3.EMPLID AND 
                    BEN3_T.DEPENDENT_BENEF = BEN3.DEPENDENT_BENEF AND
                    BEN3_T.EFFDT <= $Slice_End_DT_CRP_Old)
end-select

end-procedure

!**************************************************************************************
begin-procedure Check_Exist_Actual_Row
#Debug Show 'Check_Exist_Actual_Row -> ' $Empl_ID_CRP ' , ' #Count_Data ' , ' $Actual_Can ' , ' $ReportBegD ' , ' $ReportEndD ' , ' $PRD_B_DT_tmp_out ' , ' $PRD_E_DT_tmp_out ' , ' $Cal_Run_Id_Crit_MRK

let $merk_fnd = 'N'
begin-select distinct
#ifdef ORACLE
/*+ INDEX(MRK PS_GPCH_RP_FK02)*/
#endif
MRK.EMPLID
  let $merk_fnd = 'Y'
from PS_GPCH_RP_FK02 MRK
where MRK.PAY_ENTITY = $Ctl_PayEntity 
and   MRK.EMPLID     = $Empl_ID_CRP     
and   MRK.EMPL_RCD   = #Empl_RCD_CRP     
and   MRK.STATE      <> $Actual_Can      
and   MRK.GPCH_AL_CPAY_ENDDT between  $ReportBegD and $ReportEndD 
and   MRK.SEG_BGN_DT = $PRD_B_DT_tmp_out and MRK.SLICE_END_DT = $PRD_E_DT_tmp_out
[$Cal_Run_Id_Crit_MRK]
end-select

#Debug Show 'Check_Exist_Actual_Row <- ' $merk_fnd
end-procedure
!**************************************************************************************
begin-procedure CheckForTermination($dat1,$dat2,:$StillHired,:$Flg)
let $Flg = 'N'
let $StillHired = 'Y'
do Get_Beg_Mnth($dat1, $BgDt )
do Get_End_Mnth($dat1, $EdDt )

do Format-DateTime($BgDt , $BgDtCmp, {DEFCMP}, '', '')
do Format-DateTime($EdDt , $EdDtCmp, {DEFCMP}, '', '')
do Format-DateTime($dat2 , $TermDtCmp, {DEFCMP}, '', '')

if ($TermDtCmp >= $BgDtCmp) and ($TermDtCmp <= $EdDtCmp) and ($TermDtCmp <> '')
  let $Flg = 'Y'
end-if

if ($TermDtCmp < $BgDtCmp) and  ($TermDtCmp <> '') and
   ($BgDtCmp <> '')
   let $StillHired = 'N'
end-if
end-procedure
!**************************************************************************************
begin-procedure check_Retro_Periode
 

let #merke_exist               =  0
let $Empl_ID_CRP               =  ''
let $Cal_RunID_CRP             =  ''
let #Empl_RCD_CRP              =  0
let $GP_Pay_Gr_CRP             =  ''
let $Cal_ID_CRP                =  ''
let #Rslt_Seg_Nr_CRP           =  0
let $Slice_End_DT_CRP          =  ''
let $Pay_Entity_CRP            =  ''
let $Company_CRP               =  ''
let $PRD_E_DT_CRP              =  ''
let $Cpay_E_DT_CRP             =  ''
let $RP_Year_CRP               =  ''
let $Dpt_ID_CRP                =  ''
let $Canton_CRP                =  ''
let $Hire_DT_CRP               =  ''
let $Term_DT_CRP               =  ''
let #FTE_CRP                   =  0
let #STD_Hours_CRP             =  0
let $Comp_Freq_CRP             =  ''
let #Amount1_CRP               =  0
let #Amount2_CRP               =  0
let #Amount3_CRP               =  0
let #FAK_PCT_CRP               =  0
let #Amount4_CRP               =  0
let #Staxb_PCT_CRP             =  0
let #Amount5_CRP               =  0
let #Amount6_CRP               =  0
let #Amount7_CRP               =  0
let #Amount8_CRP               =  0
let #Amount9_CRP               =  0
let #Amount10_CRP              =  0

let $Empl_ID_CRP_Old           =  ''
let $Cal_RunID_CRP_Old         =  ''
let #Empl_RCD_CRP_Old          =  0
let $GP_Pay_Gr_CRP_Old         =  ''
let $Cal_ID_CRP_Old            =  ''
let #Rslt_Seg_Nr_CRP_Old       =  0
let $Slice_End_DT_CRP_Old      =  ''
let $Pay_Entity_CRP_Old        =  ''
let $Company_CRP_Old           =  ''
let $PRD_E_DT_CRP_Old          =  ''
let $Cpay_E_DT_CRP_Old         =  ''
let $RP_Year_CRP_Old           =  ''
let $Dpt_ID_CRP_Old            =  ''
let $Canton_CRP_Old            =  ''
let $Hire_DT_CRP_Old           =  ''
let $Term_DT_CRP_Old           =  ''
let #FTE_CRP_Old               =  0
let #STD_Hours_CRP_Old         =  0
let $Comp_Freq_CRP_Old         =  ''
let #Amount1_CRP_Old           =  0
let #Amount2_CRP_Old           =  0
let #Amount3_CRP_Old           =  0
let #FAK_PCT_CRP_Old           =  0
let #Amount4_CRP_Old           =  0
let #Staxb_PCT_CRP_Old         =  0
let #Amount5_CRP_Old           =  0
let #Amount6_CRP_Old           =  0
let #Amount7_CRP_Old           =  0
let #Amount8_CRP_Old           =  0
let #Amount9_CRP_Old           =  0
let #Amount10_CRP_Old          =  0

let $Pay_Entity_FK01SA_Old     =  ''
let $Company_FK01SA_Old        =  ''
let $RP_Year_FK01SA_Old        =  ''
let $Dependent_FK01SA_Old      =  ''
let $Birth_DT_FK01SA_Old       =  ''
let $Edu_End_DT_FK01SA_Old     =  ''
let $Name_FK01SA_Old           =  ''
let $Student_FK01SA_Old        =  ''
let $Disabled_FK01SA_Old       =  ''
let #Sequence_FK01SA_Old       =  0
let #Amount1_FK01SA_Old        =  0
let #Amount2_FK01SA_Old        =  0
let #Amount3_FK01SA_Old        =  0
let #Amount4_FK01SA_Old        =  0
let #Amount5_FK01SA_Old        =  0

let #Count_Data                =  0

do Init_Arrays

begin-select
#ifdef ORACLE
/*+ INDEX(AL04_12 PS_GPCH_RP_FK02)*/
#endif
AL04_12.EMPLID
AL04_12.CAL_RUN_ID
AL04_12.EMPL_RCD
AL04_12.GP_PAYGROUP
AL04_12.CAL_ID
AL04_12.RSLT_SEG_NUM
AL04_12.SLICE_END_DT
AL04_12.PAY_ENTITY
AL04_12.COMPANY
AL04_12.PRD_END_DT
AL04_12.GPCH_AL_CPAY_ENDDT
AL04_12.GPCH_RP_YEAR
AL04_12.DEPTID
AL04_12.STATE
AL04_12.HIRE_DT
AL04_12.TERMINATION_DT
AL04_12.FTE
AL04_12.STD_HOURS
AL04_12.COMP_FREQUENCY
AL04_12.GPCH_RP_AMOUNT1
AL04_12.GPCH_RP_AMOUNT2
AL04_12.GPCH_RP_AMOUNT3
AL04_12.GPCH_SI_FAK_PCT
AL04_12.GPCH_RP_AMOUNT4
AL04_12.GPCH_TX_STAXB_PCT
AL04_12.GPCH_RP_AMOUNT5
AL04_12.GPCH_RP_AMOUNT6
AL04_12.GPCH_RP_AMOUNT7
AL04_12.GPCH_RP_AMOUNT8
AL04_12.GPCH_RP_AMOUNT9
AL04_12.GPCH_RP_AMOUNT10

  let $Empl_ID_CRP               =  rtrim(&AL04_12.EMPLID,' ')
  let $Cal_RunID_CRP             =  rtrim(&AL04_12.CAL_RUN_ID,' ')
  let #Empl_RCD_CRP              =  &AL04_12.EMPL_RCD
  let $GP_Pay_Gr_CRP             =  rtrim(&AL04_12.GP_PAYGROUP,' ')
  let $Cal_ID_CRP                =  rtrim(&AL04_12.CAL_ID,' ')
  let #Rslt_Seg_Nr_CRP           =  &AL04_12.RSLT_SEG_NUM
  let $Slice_End_DT_CRP          =  rtrim(&AL04_12.SLICE_END_DT,' ')
  let $Pay_Entity_CRP            =  rtrim(&AL04_12.PAY_ENTITY,' ')
  let $Company_CRP               =  rtrim(&AL04_12.COMPANY,' ')
  let $PRD_E_DT_CRP              =  rtrim(&AL04_12.PRD_END_DT,' ')
  let $Cpay_E_DT_CRP             =  rtrim(&AL04_12.GPCH_AL_CPAY_ENDDT,' ')
  let $RP_Year_CRP               =  rtrim(&AL04_12.GPCH_RP_YEAR,' ')
  let $Dpt_ID_CRP                =  rtrim(&AL04_12.DEPTID,' ')
  let $Canton_CRP                =  rtrim(&AL04_12.STATE,' ')
  let $Hire_DT_CRP               =  rtrim(&AL04_12.HIRE_DT,' ')
  let $Term_DT_CRP               =  rtrim(&AL04_12.TERMINATION_DT,' ')
  let #FTE_CRP                   =  &AL04_12.FTE
  let #STD_Hours_CRP             =  &AL04_12.STD_HOURS
  let $Comp_Freq_CRP             =  rtrim(&AL04_12.COMP_FREQUENCY,' ')
  let #Amount1_CRP               =  &AL04_12.GPCH_RP_AMOUNT1
  let #Amount2_CRP               =  &AL04_12.GPCH_RP_AMOUNT2
  let #Amount3_CRP               =  &AL04_12.GPCH_RP_AMOUNT3
  let #FAK_PCT_CRP               =  #FAK_PCT !&AL04_12.GPCH_SI_FAK_PCT
  let #Amount4_CRP               =  &AL04_12.GPCH_RP_AMOUNT4
  let #Staxb_PCT_CRP             =  #Staxb_PCT !&AL04_12.GPCH_TX_STAXB_PCT
  let #Amount5_CRP               =  &AL04_12.GPCH_RP_AMOUNT5
  let #Amount6_CRP               =  &AL04_12.GPCH_RP_AMOUNT6
  let #Amount7_CRP               =  &AL04_12.GPCH_RP_AMOUNT7
  let #Amount8_CRP               =  &AL04_12.GPCH_RP_AMOUNT8
  let #Amount9_CRP               =  &AL04_12.GPCH_RP_AMOUNT9
  let #Amount10_CRP              =  &AL04_12.GPCH_RP_AMOUNT10

  put $Empl_ID_CRP_Old            into ArrFK02(0) arr1
  put $Cal_RunID_CRP_Old          into ArrFK02(0) arr2
  put #Empl_RCD_CRP_Old           into ArrFK02(0) arr3
  put $GP_Pay_Gr_CRP_Old          into ArrFK02(0) arr4
  put $Cal_ID_CRP_Old             into ArrFK02(0) arr5
  put #Rslt_Seg_Nr_CRP_Old        into ArrFK02(0) arr6
  put $Slice_End_DT_CRP_Old       into ArrFK02(0) arr7
  put $Pay_Entity_CRP_Old         into ArrFK02(0) arr8
  put $Company_CRP_Old            into ArrFK02(0) arr9
  put $PRD_E_DT_CRP_Old           into ArrFK02(0) arr10
  put $Cpay_E_DT_CRP_Old          into ArrFK02(0) arr11
  put $RP_Year_CRP_Old            into ArrFK02(0) arr12
  put $Dpt_ID_CRP_Old             into ArrFK02(0) arr13
  put $Canton_CRP_Old             into ArrFK02(0) arr14
  put $Hire_DT_CRP_Old            into ArrFK02(0) arr15
  put $Term_DT_CRP_Old            into ArrFK02(0) arr16
  put #FTE_CRP_Old                into ArrFK02(0) arr17
  put #STD_Hours_CRP_Old          into ArrFK02(0) arr18
  put $Comp_Freq_CRP_Old          into ArrFK02(0) arr19
  put #Amount1_CRP_Old            into ArrFK02(0) arr20
  put #Amount2_CRP_Old            into ArrFK02(0) arr21
  put #Amount3_CRP_Old            into ArrFK02(0) arr22
  put #FAK_PCT_CRP_Old            into ArrFK02(0) arr23
  put #Amount4_CRP_Old            into ArrFK02(0) arr24
  put #Staxb_PCT_CRP_Old          into ArrFK02(0) arr25
  put #Amount5_CRP_Old            into ArrFK02(0) arr26
  put #Amount6_CRP_Old            into ArrFK02(0) arr27
  put #Amount7_CRP_Old            into ArrFK02(0) arr28
  put #Amount8_CRP_Old            into ArrFK02(0) arr29
  put #Amount9_CRP_Old            into ArrFK02(0) arr30
  put #Amount10_CRP_Old           into ArrFK02(0) arr31


  let $Empl_ID_CRP_Old           =  $Empl_ID_CRP
  let $Cal_RunID_CRP_Old         =  $Cal_RunID_CRP
  let #Empl_RCD_CRP_Old          =  #Empl_RCD_CRP
  let $GP_Pay_Gr_CRP_Old         =  $GP_Pay_Gr_CRP
  let $Cal_ID_CRP_Old            =  $Cal_ID_CRP
  let #Rslt_Seg_Nr_CRP_Old       =  #Rslt_Seg_Nr_CRP
  let $Slice_End_DT_CRP_Old      =  $Slice_End_DT_CRP
  let $Pay_Entity_CRP_Old        =  $Pay_Entity_CRP
  let $Company_CRP_Old           =  $Company_CRP
  let $PRD_E_DT_CRP_Old          =  $PRD_E_DT_CRP
  let $Cpay_E_DT_CRP_Old         =  $Cpay_E_DT_CRP
  let $RP_Year_CRP_Old           =  $RP_Year_CRP
  let $Dpt_ID_CRP_Old            =  $Dpt_ID_CRP
  let $Canton_CRP_Old            =  $Canton_CRP
  let $Hire_DT_CRP_Old           =  $Hire_DT_CRP
  let $Term_DT_CRP_Old           =  $Term_DT_CRP
  let #FTE_CRP_Old               =  #FTE_CRP
  let #STD_Hours_CRP_Old         =  #STD_Hours_CRP
  let $Comp_Freq_CRP_Old         =  $Comp_Freq_CRP
  let #Amount1_CRP_Old           =  #Amount1_CRP
  let #Amount2_CRP_Old           =  #Amount2_CRP
  let #Amount3_CRP_Old           =  #Amount3_CRP
  let #FAK_PCT_CRP_Old           =  #FAK_PCT_CRP
  let #Amount4_CRP_Old           =  #Amount4_CRP
  let #Staxb_PCT_CRP_Old         =  #Staxb_PCT_CRP
  let #Amount5_CRP_Old           =  #Amount5_CRP
  let #Amount6_CRP_Old           =  #Amount6_CRP
  let #Amount7_CRP_Old           =  #Amount7_CRP
  let #Amount8_CRP_Old           =  #Amount8_CRP
  let #Amount9_CRP_Old           =  #Amount9_CRP
  let #Amount10_CRP_Old          =  #Amount10_CRP

  let $Canton_CRP_Old            =  $Canton_CRP
  let #merke_exist      =  1
  let #Count_Data      =  #Count_Data + 1
 
  
  #debug show 'check_Retro_Periode ' $Empl_ID ' , ' $PRD_B_DT_tmp_out ' , ' $PRD_E_DT_tmp_out ' , ' $ReportEndD 
  
from PS_GPCH_RP_FK02 AL04_12
where AL04_12.PAY_ENTITY = $Ctl_PayEntity 
AND   AL04_12.EMPLID     = $Empl_ID 
AND   AL04_12.EMPL_RCD   = #Empl_RCD 
AND   AL04_12.GPCH_AL_CPAY_ENDDT <= $ReportEndD 
AND   AL04_12.SEG_BGN_DT = $PRD_B_DT_tmp_out and AL04_12.SLICE_END_DT = $PRD_E_DT_tmp_out
order by AL04_12.GPCH_AL_CPAY_ENDDT

end-select

if $Cpay_E_DT_CRP <> ''
   do Format-DateTime($Cpay_E_DT_CRP,$Cpay_E_Date_CRP,{DEFCMP},'','')
end-if

let $Merk_Change_C = 'N'
let $Only_Wage_Change = 'N'

if #Count_Data > 1
   get $Canton_CRP_O  from ArrFK02(0) arr14
   if $Canton_CRP_O <> $Canton_CRP
      let $Merk_Change_C = 'Y'
   end-if
end-if

do Check_Exist_Actual_Row

evaluate #Count_Data
when = 0
 break
when = 1

 let #Counter_tmp1     = #Counter_tmp1 + 1
 let $Empl_IDR         = $Empl_ID_CRP
 let $Cal_RunIDR       = $Cal_RunID_CRP
 let #Empl_RCDR        = #Empl_RCD_CRP
 let $GP_Pay_GrR       = $GP_Pay_Gr_CRP
 let $Cal_IDR          = $Cal_ID_CRP
 let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP
 let $Slice_End_DTR    = $Slice_End_DT_CRP
 let $Pay_EntityR      = $Pay_Entity_CRP
 let $CompanyR         = $Company_CRP
 let $PRD_E_DTR        = $PRD_E_DT_CRP
 let $Cpay_E_DTR       = $Cpay_E_DT_CRP
 let $RP_YearR         = $RP_Year_CRP
 let $Dpt_IDR          = $Dpt_ID_CRP
 let $CantonR          = $Canton_CRP
 let $Hire_DTR         = $Hire_DT_CRP
 let $Term_DTR         = $Term_DT_CRP
 let #FTER             = #FTE_CRP
 let #STD_HoursR       = #STD_Hours_CRP
 let $Comp_FreqR       = $Comp_Freq_CRP
 let #Amount1R         = #Amount1_CRP
 let #Amount2R         = #Amount2_CRP
 let #Amount3R         = #Amount3_CRP
 let #Amount4R         = #Amount4_CRP
 let #Amount5R         = #Amount5_CRP
 let #Amount6R         = #Amount6_CRP
 let #Amount7R         = #Amount7_CRP
 let #Amount8R         = #Amount8_CRP
 let #Amount9R         = #Amount9_CRP
 let #Amount10R        = #Amount10_CRP

 do CheckForZeroRows
 #debug show $Cal_RunID_CRP ' , ' $Cal_Run_Id_M_String11
 if ($merk_fnd = 'Y') or ($Cal_RunID_CRP <> $Cal_Run_Id_M_String11)
    let #Amount1R         = -1 * #Amount1_CRP
    let #Amount2R         = -1 * #Amount2_CRP
    let #Amount3R         = -1 * #Amount3_CRP
    let #Amount4R         = -1 * #Amount4_CRP
    let #Amount5R         = -1 * #Amount5_CRP
    let #Amount6R         = -1 * #Amount6_CRP
    let #Amount7R         = -1 * #Amount7_CRP
    let #Amount8R         = -1 * #Amount8_CRP
    let #Amount9R         = -1 * #Amount9_CRP
    let #Amount10R        = -1 * #Amount10_CRP

    if $Canton_CRP = $Actual_Can
       if (#Amount2_CRP <> 0) or (#Amount5_CRP <> 0) or
           ($ZeroRowsChild = 'N')
           do Print_Retro_Data
           if ($Cal_RunID_CRP <> $Cal_Run_Id_M_String11)
              do Insert_Data1($Empl_ID_CRP, $Cal_RunID_CRP, #Empl_RCD_CRP,$GP_Pay_Gr_CRP, $Cal_ID_CRP,
                              #Rslt_Seg_Nr_CRP,$Slice_End_DT_CRP, $PRD_E_DT_CRP,$Cpay_E_DT_CRP, #counterno)
                        If $Final_Xml <> '' and #counterno = 1.000000 and $BenPerson_endtag = 'N'
                           let $BenPerson_endtag = 'Y'
                      let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
 
                         End-If

           else
              do Print_Child_Data
           end-if   
              
           let $Exst_Dat = 'Y'
       else
           do Get_Beg_Mnth($PRD_E_DTR, $BgDt )
           do Get_End_Mnth($PRD_E_DTR, $EdDt )
           do Format-DateTime($BgDt , $BgDtCmp, {DEFCMP}, '', '')
           do Format-DateTime($EdDt , $EdDtCmp, {DEFCMP}, '', '')
           do Format-DateTime($Term_DTR , $TermDtCmp, {DEFCMP}, '', '')

                if ($TermDtCmp >= $BgDtCmp) and ($TermDtCmp <= $EdDtCmp) and ($TermDtCmp <> '')
                    do Print_Retro_Data
                    if ($Cal_RunID_CRP <> $Cal_Run_Id_M_String11)
                              do Insert_Data1($Empl_ID_CRP, $Cal_RunID_CRP, #Empl_RCD_CRP,$GP_Pay_Gr_CRP, $Cal_ID_CRP,
                              #Rslt_Seg_Nr_CRP,$Slice_End_DT_CRP, $PRD_E_DT_CRP,$Cpay_E_DT_CRP, #counterno)  
                        If $Final_Xml <> '' and #counterno = 1.000000  and $BenPerson_endtag = 'N'
                           let $BenPerson_endtag = 'Y'
                    let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
                        End-If

        
                    else
                       
                        do Print_Child_Data

                    end-if   
                    
                    let $Exst_Dat = 'Y'
                end-if
       end-if
    end-if
 else
    if $Canton_CRP = $Actual_Can
       if (#Amount2_CRP <> 0) or (#Amount5_CRP <> 0) or
           ($ZeroRowsChild = 'N')
            show '9.c in call from retro Print_Retro_Data'
           do Print_Retro_Data
            
           do Print_Child_Data
           let $Exst_Dat = 'Y'
       else
           do Get_Beg_Mnth($PRD_E_DTR, $BgDt )
           do Get_End_Mnth($PRD_E_DTR, $EdDt )
           do Format-DateTime($BgDt , $BgDtCmp, {DEFCMP}, '', '')
           do Format-DateTime($EdDt , $EdDtCmp, {DEFCMP}, '', '')
           do Format-DateTime($Term_DTR , $TermDtCmp, {DEFCMP}, '', '')

                 if ($TermDtCmp >= $BgDtCmp) and ($TermDtCmp <= $EdDtCmp) and ($TermDtCmp <> '')
                 
                    do Print_Retro_Data
                   
                    do Print_Child_Data
                    let $Exst_Dat = 'Y'
                 end-if
       end-if
    end-if
 end-if
 let #count_child_tmp  = 0
 break
when-other
  get $Empl_ID_CRP_Old            from ArrFK02(0) arr1
  get $Cal_RunID_CRP_Old          from ArrFK02(0) arr2
  get #Empl_RCD_CRP_Old           from ArrFK02(0) arr3
  get $GP_Pay_Gr_CRP_Old          from ArrFK02(0) arr4
  get $Cal_ID_CRP_Old             from ArrFK02(0) arr5
  get #Rslt_Seg_Nr_CRP_Old        from ArrFK02(0) arr6
  get $Slice_End_DT_CRP_Old       from ArrFK02(0) arr7
  get $Pay_Entity_CRP_Old         from ArrFK02(0) arr8
  get $Company_CRP_Old            from ArrFK02(0) arr9
  get $PRD_E_DT_CRP_Old           from ArrFK02(0) arr10
  get $Cpay_E_DT_CRP_Old          from ArrFK02(0) arr11
  get $RP_Year_CRP_Old            from ArrFK02(0) arr12
  get $Dpt_ID_CRP_Old             from ArrFK02(0) arr13
  get $Canton_CRP_Old             from ArrFK02(0) arr14
  get $Hire_DT_CRP_Old            from ArrFK02(0) arr15
  get $Term_DT_CRP_Old            from ArrFK02(0) arr16
  get #FTE_CRP_Old                from ArrFK02(0) arr17
  get #STD_Hours_CRP_Old          from ArrFK02(0) arr18
  get $Comp_Freq_CRP_Old          from ArrFK02(0) arr19
  get #Amount1_CRP_Old            from ArrFK02(0) arr20
  get #Amount2_CRP_Old            from ArrFK02(0) arr21
  get #Amount3_CRP_Old            from ArrFK02(0) arr22
  get #FAK_PCT_CRP_Old            from ArrFK02(0) arr23
  get #Amount4_CRP_Old            from ArrFK02(0) arr24
  get #Staxb_PCT_CRP_Old          from ArrFK02(0) arr25
  get #Amount5_CRP_Old            from ArrFK02(0) arr26
  get #Amount6_CRP_Old            from ArrFK02(0) arr27
  get #Amount7_CRP_Old            from ArrFK02(0) arr28
  get #Amount8_CRP_Old            from ArrFK02(0) arr29
  get #Amount9_CRP_Old            from ArrFK02(0) arr30
  get #Amount10_CRP_Old           from ArrFK02(0) arr31

  do Check_Count_Children

  if #count_ch_tmp1 > 20
     let #count_ch_tmp1 = 20
  end-if

  do Init_Arrays_Child
  do Prepare_Child_Retro
  do Prepare_Child_Retro1
  do CheckForTermination($PRD_E_DT_CRP,$Term_DT_CRP,$StillHired1,$Flg1)
  do CheckForTermination($PRD_E_DT_CRP_Old,$Term_DT_CRP_Old,$StillHired2,$Flg2)

  do CheckExistDiff

  if ($MerkCh <> 'Y') and
     ($Hire_DT_CRP_Old  = $Hire_DT_CRP)  and
     (#Amount2_CRP - #Amount2_CRP_Old = 0) and
     (#Amount5_CRP - #Amount5_CRP_Old = 0) and
     ($ExistDiffChild = 'N') and
     ($Merk_Change_C <> 'Y') !and
    ! ($Flg1 = 'N') and
    ! ($Flg2 = 'N')

     goto Weiter

  end-if

   
  if ($MerkCh <> 'Y') and
     (#Amount2_CRP - #Amount2_CRP_Old <> 0) and
     (#Amount5_CRP - #Amount5_CRP_Old = 0) and
     ($ExistDiffChild = 'N') and
     ($Merk_Change_C <> 'Y') and
     ($Hire_DT_CRP_Old  = $Hire_DT_CRP) and
     ($Run_Retro_Check = '5')

            let $Only_Wage_Change = 'Y'
  else
            let $Only_Wage_Change = 'N'
  end-if



  if ($MerkCh <> 'Y') and
     (#Amount2_CRP - #Amount2_CRP_Old = 0) and
     (#Amount5_CRP - #Amount5_CRP_Old = 0) and
     ($ExistDiffChild = 'N') and
     ($Merk_Change_C <> 'Y') and
     (($Flg1 = 'Y') or ($Flg2 = 'Y')) and
     (($Hire_DT_CRP_Old  <> $Hire_DT_CRP) )
            let $Only_Term = 'Y'
  else
            let $Only_Term = 'N'
  end-if
  
  #DEBUG show 'Termin ' $Only_Term ' , ' $Hire_DT_CRP_Old  ' , '  $Hire_DT_CRP ' , ' $Term_DT_CRP_Old ' , ' $Term_DT_CRP
  #DEBUG show $Flg1 ' , '   $Flg2 ' , '  $Merk_Change_C ' , ' $ExistDiffChild ' , ' $MerkCh 
  #DEBUG show #Amount2_CRP ' , ' #Amount2_CRP_Old ' , ' #Amount5_CRP ' , ' #Amount5_CRP_Old ' , ' #Amount6_CRP ' , ' #Amount6_CRP_Old 

  if ($MerkCh = 'Y') OR ($Merk_Change_C = 'Y')

        let $Empl_IDR         = $Empl_ID_CRP
        let $Cal_RunIDR       = $Cal_RunID_CRP
        let #Empl_RCDR        = #Empl_RCD_CRP
        let $GP_Pay_GrR       = $GP_Pay_Gr_CRP
        let $Cal_IDR          = $Cal_ID_CRP
        let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP
        let $Slice_End_DTR    = $Slice_End_DT_CRP
        let $Pay_EntityR      = $Pay_Entity_CRP
        let $CompanyR         = $Company_CRP
        let $PRD_E_DTR        = $PRD_E_DT_CRP
        let $Cpay_E_DTR       = $Cpay_E_DT_CRP
        let $RP_YearR         = $RP_Year_CRP
        let $Dpt_IDR          = $Dpt_ID_CRP
        let $CantonR          = $Canton_CRP
        let $Hire_DTR         = $Hire_DT_CRP
        let $Term_DTR         = $Term_DT_CRP
        let #FTER             = #FTE_CRP
        let #STD_HoursR       = #STD_Hours_CRP
        let $Comp_FreqR       = $Comp_Freq_CRP
        let #Amount1R         = #Amount1_CRP
        let #Amount2R         = #Amount2_CRP
        let #Amount3R         = #Amount3_CRP
        let #Amount4R         = #Amount4_CRP
        let #Amount5R         = #Amount5_CRP
        let #Amount6R         = #Amount6_CRP
        let #Amount7R         = #Amount7_CRP
        let #Amount8R         = #Amount8_CRP
        let #Amount9R         = #Amount9_CRP
        let #Amount10R        = #Amount10_CRP

        let #Amount1_CRPm  =  -1 * #Amount1_CRP_Old
        let #Amount2_CRPm  =  -1 * #Amount2_CRP_Old
        let #Amount3_CRPm  =  -1 * #Amount3_CRP_Old
        let #Amount4_CRPm  =  -1 * #Amount4_CRP_Old
        let #Amount5_CRPm  =  -1 * #Amount5_CRP_Old
        let #Amount6_CRPm  =  -1 * #Amount6_CRP_Old
        let #Amount7_CRPm  =  -1 * #Amount7_CRP_Old
        let #Amount8_CRPm  =  -1 * #Amount8_CRP_Old
        let #Amount9_CRPm  =  -1 * #Amount9_CRP_Old
        let #Amount10_CRPm =  -1 * #Amount10_CRP_Old


       if $CantonR = $Actual_Can
          
          DO Print_Retro_Data
          let $Exst_Dat = 'Y'
          do Insert_Data2($Empl_ID_CRP, $Cal_RunID_CRP, #Empl_RCD_CRP, $GP_Pay_Gr_CRP,
          $Cal_ID_CRP, #Rslt_Seg_Nr_CRP, $Slice_End_DT_CRP, $PRD_E_DT_CRP, $Cpay_E_DT_CRP , #counterno)

         
       If $Final_Xml <> '' and #counterno = 1.000000  and $BenPerson_endtag = 'N'
          let $BenPerson_endtag = 'Y'
        let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
       End-If

       end-if

       let #Counter_tmp1 = #Counter_tmp1 + 1

       let $Empl_IDR         = $Empl_ID_CRP_Old
       let $Cal_RunIDR       = $Cal_RunID_CRP_Old
       let #Empl_RCDR        = #Empl_RCD_CRP_Old
       let $GP_Pay_GrR       = $GP_Pay_Gr_CRP_Old
       let $Cal_IDR          = $Cal_ID_CRP_Old
       let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP_Old
       let $Slice_End_DTR    = $Slice_End_DT_CRP_Old
       let $Pay_EntityR      = $Pay_Entity_CRP_Old
       let $CompanyR         = $Company_CRP_Old
       let $PRD_E_DTR        = $PRD_E_DT_CRP_Old
       let $Cpay_E_DTR       = $Cpay_E_DT_CRP_Old
       let $RP_YearR         = $RP_Year_CRP_Old
       let $Dpt_IDR          = $Dpt_ID_CRP_Old
       let $CantonR          = $Canton_CRP_Old
       let $Hire_DTR         = $Hire_DT_CRP_Old
       let $Term_DTR         = $Term_DT_CRP_Old
       let #FTER             = #FTE_CRP_Old
       let #STD_HoursR       = #STD_Hours_CRP_Old
       let $Comp_FreqR       = $Comp_Freq_CRP_Old
       let #Amount1R         = #Amount1_CRPm
       let #Amount2R         = #Amount2_CRPm
       let #Amount3R         = #Amount3_CRPm
       let #Amount4R         = #Amount4_CRPm
       let #Amount5R         = #Amount5_CRPm
       let #Amount6R         = #Amount6_CRPm
       let #Amount7R         = #Amount7_CRPm
       let #Amount8R         = #Amount8_CRPm
       let #Amount9R         = #Amount9_CRPm
       let #Amount10R        = #Amount10_CRPm

       if $CantonR = $Actual_Can
      
          DO Print_Retro_Data
          let $Exst_Dat = 'Y'
          do Insert_Data1($Empl_ID_CRP_Old, $Cal_RunID_CRP_Old, #Empl_RCD_CRP_Old,
                          $GP_Pay_Gr_CRP_Old, $Cal_ID_CRP_Old, #Rslt_Seg_Nr_CRP_Old,
                          $Slice_End_DT_CRP_Old, $PRD_E_DT_CRP_Old,$Cpay_E_DT_CRP_Old,#counterno)
            
            If $Final_Xml <> '' and #counterno = 1.000000  and $BenPerson_endtag = 'N'
            let $BenPerson_endtag = 'Y'
        let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
            End-If

       end-if
  else
       if $Only_Term = 'Y'
        let $Empl_IDR         = $Empl_ID_CRP
        let $Cal_RunIDR       = $Cal_RunID_CRP
        let #Empl_RCDR        = #Empl_RCD_CRP
        let $GP_Pay_GrR       = $GP_Pay_Gr_CRP
        let $Cal_IDR          = $Cal_ID_CRP
        let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP
        let $Slice_End_DTR    = $Slice_End_DT_CRP
        let $Pay_EntityR      = $Pay_Entity_CRP
        let $CompanyR         = $Company_CRP
        let $PRD_E_DTR        = $PRD_E_DT_CRP
        let $Cpay_E_DTR       = $Cpay_E_DT_CRP
        let $RP_YearR         = $RP_Year_CRP
        let $Dpt_IDR          = $Dpt_ID_CRP
        let $CantonR          = $Canton_CRP
        let $Hire_DTR         = $Hire_DT_CRP
        let $Term_DTR         = $Term_DT_CRP
        let #FTER             = #FTE_CRP
        let #STD_HoursR       = #STD_Hours_CRP
        let $Comp_FreqR       = $Comp_Freq_CRP
        let #Amount1R         = #Amount1_CRP
        let #Amount2R         = #Amount2_CRP
        let #Amount3R         = #Amount3_CRP
        let #Amount4R         = #Amount4_CRP
        let #Amount5R         = #Amount5_CRP
        let #Amount6R         = #Amount6_CRP
        let #Amount7R         = #Amount7_CRP
        let #Amount8R         = #Amount8_CRP
        let #Amount9R         = #Amount9_CRP
        let #Amount10R        = #Amount10_CRP

        let #Amount1_CRPm  =  -1 * #Amount1_CRP_Old
        let #Amount2_CRPm  =  -1 * #Amount2_CRP_Old
        let #Amount3_CRPm  =  -1 * #Amount3_CRP_Old
        let #Amount4_CRPm  =  -1 * #Amount4_CRP_Old
        let #Amount5_CRPm  =  -1 * #Amount5_CRP_Old
        let #Amount6_CRPm  =  -1 * #Amount6_CRP_Old
        let #Amount7_CRPm  =  -1 * #Amount7_CRP_Old
        let #Amount8_CRPm  =  -1 * #Amount8_CRP_Old
        let #Amount9_CRPm  =  -1 * #Amount9_CRP_Old
        let #Amount10_CRPm =  -1 * #Amount10_CRP_Old


       if $CantonR = $Actual_Can
    
          DO Print_Retro_Data
          let $Exst_Dat = 'Y'
          do Insert_Data2($Empl_ID_CRP, $Cal_RunID_CRP, #Empl_RCD_CRP, $GP_Pay_Gr_CRP,
          $Cal_ID_CRP, #Rslt_Seg_Nr_CRP, $Slice_End_DT_CRP, $PRD_E_DT_CRP, $Cpay_E_DT_CRP, #counterno)
        
            If $Final_Xml <> '' and #counterno = 1.000000  and $BenPerson_endtag = 'N'
            let $BenPerson_endtag = 'Y'
        let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
            End-If

       end-if

       let #Counter_tmp1 = #Counter_tmp1 + 1

       let $Empl_IDR         = $Empl_ID_CRP_Old
       let $Cal_RunIDR       = $Cal_RunID_CRP_Old
       let #Empl_RCDR        = #Empl_RCD_CRP_Old
       let $GP_Pay_GrR       = $GP_Pay_Gr_CRP_Old
       let $Cal_IDR          = $Cal_ID_CRP_Old
       let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP_Old
       let $Slice_End_DTR    = $Slice_End_DT_CRP_Old
       let $Pay_EntityR      = $Pay_Entity_CRP_Old
       let $CompanyR         = $Company_CRP_Old
       let $PRD_E_DTR        = $PRD_E_DT_CRP_Old
       let $Cpay_E_DTR       = $Cpay_E_DT_CRP_Old
       let $RP_YearR         = $RP_Year_CRP_Old
       let $Dpt_IDR          = $Dpt_ID_CRP_Old
       let $CantonR        = $Canton_CRP_Old
       let $Hire_DTR         = $Hire_DT_CRP_Old
       let $Term_DTR         = $Term_DT_CRP_Old
       let #FTER             = #FTE_CRP_Old
       let #STD_HoursR       = #STD_Hours_CRP_Old
       let $Comp_FreqR       = $Comp_Freq_CRP_Old
       let #Amount1R         = #Amount1_CRPm
       let #Amount2R         = #Amount2_CRPm
       let #Amount3R         = #Amount3_CRPm
       let #Amount4R         = #Amount4_CRPm
       let #Amount5R         = #Amount5_CRPm
       let #Amount6R         = #Amount6_CRPm
       let #Amount7R         = #Amount7_CRPm
       let #Amount8R         = #Amount8_CRPm
       let #Amount9R         = #Amount9_CRPm
       let #Amount10R        = #Amount10_CRPm

       if $CantonR = $Actual_Can
          
          DO Print_Retro_Data
          let $Exst_Dat = 'Y'
          do Insert_Data1($Empl_ID_CRP_Old, $Cal_RunID_CRP_Old, #Empl_RCD_CRP_Old,
             $GP_Pay_Gr_CRP_Old, $Cal_ID_CRP_Old, #Rslt_Seg_Nr_CRP_Old,
             $Slice_End_DT_CRP_Old, $PRD_E_DT_CRP_Old,
             $Cpay_E_DT_CRP_Old, #counterno)
      
            If $Final_Xml <> '' and #counterno = 1.000000  and $BenPerson_endtag = 'N'
            let $BenPerson_endtag = 'Y'
         let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
            End-If

       end-if
        else

         if #count_ch_tmp1 > 20
            let #count_ch_tmp1 = 20
         end-if

         do Init_Arrays_Child
         do Prepare_Child_Retro
         do Prepare_Child_Retro1

         let #Amount1_CRP_N  = #Amount1_CRP
         let #Amount2_CRP_N  = #Amount2_CRP
         let #Amount3_CRP_N  = #Amount3_CRP
         let #Amount4_CRP_N  = #Amount4_CRP
         let #Amount5_CRP_N  = #Amount5_CRP
         let #Amount6_CRP_N  = #Amount6_CRP
         let #Amount7_CRP_N  = #Amount7_CRP
         let #Amount8_CRP_N  = #Amount8_CRP
         let #Amount9_CRP_N  = #Amount9_CRP
         let #Amount10_CRP_N = #Amount10_CRP
         let #Amount1_CRP  = #Amount1_CRP_N  - #Amount1_CRP_Old
         let #Amount2_CRP  = #Amount2_CRP_N  - #Amount2_CRP_Old
         let #Amount3_CRP  = #Amount3_CRP_N  - #Amount3_CRP_Old
         let #Amount4_CRP  = #Amount4_CRP_N  - #Amount4_CRP_Old
         let #Amount5_CRP  = #Amount5_CRP_N  - #Amount5_CRP_Old
         let #Amount6_CRP  = #Amount6_CRP_N  - #Amount6_CRP_Old
         let #Amount7_CRP  = #Amount7_CRP_N  - #Amount7_CRP_Old
         let #Amount8_CRP  = #Amount8_CRP_N  - #Amount8_CRP_Old
         let #Amount9_CRP  = #Amount9_CRP_N  - #Amount9_CRP_Old
         let #Amount10_CRP = #Amount10_CRP_N - #Amount10_CRP_Old

         if (#Amount2_CRP <> 0) or
              (#Amount5_CRP <> 0) 
          let $ExistDiffEmpl = 'Y'
       else
          let $ExistDiffEmpl = 'N'
       end-if

       do Format-DateTime($B_DT_CRP , $B_Date,{DEFCMP}, '', '')
       do Format-DateTime($E_DT_CRP , $E_Date,{DEFCMP}, '', '')

       let $Empl_IDR         = $Empl_ID_CRP
       let $Cal_RunIDR       = $Cal_RunID_CRP
       let #Empl_RCDR        = #Empl_RCD_CRP
       let $GP_Pay_GrR       = $GP_Pay_Gr_CRP
       let $Cal_IDR          = $Cal_ID_CRP
       let #Rslt_Seg_NrR     = #Rslt_Seg_Nr_CRP
       let $Slice_End_DTR    = $Slice_End_DT_CRP
       let $Pay_EntityR      = $Pay_Entity_CRP
       let $CompanyR         = $Company_CRP
       let $PRD_E_DTR        = $PRD_E_DT_CRP
       let $Cpay_E_DTR       = $Cpay_E_DT_CRP
       let $RP_YearR         = $RP_Year_CRP
       let $Dpt_IDR          = $Dpt_ID_CRP
       let $CantonR          = $Canton_CRP
       let $Hire_DTR         = $Hire_DT_CRP
       let $Term_DTR         = $Term_DT_CRP
       let #FTER             = #FTE_CRP
       let #STD_HoursR       = #STD_Hours_CRP
       let $Comp_FreqR       = $Comp_Freq_CRP
       let #Amount1R         = #Amount1_CRP
       let #Amount2R         = #Amount2_CRP
       let #Amount3R         = #Amount3_CRP
       let #Amount4R         = #Amount4_CRP
       let #Amount5R         = #Amount5_CRP
       let #Amount6R         = #Amount6_CRP
       let #Amount7R         = #Amount7_CRP
       let #Amount8R         = #Amount8_CRP
       let #Amount9R         = #Amount9_CRP
       let #Amount10R        = #Amount10_CRP

       do CheckExistDiff

           if $CantonR = $Actual_Can
               if ($ExistDiffChild = 'Y') or ($ExistDiffEmpl = 'Y') OR
                  ($Flg1 = 'Y') OR ($Flg2 = 'Y')
                  do Print_Retro_Data
                  let $Exst_Dat = 'Y'
                  do Insert_Data3
               end-if
            end-if
           end-if
  end-if

Weiter:
break
end-evaluate
end-procedure
!**************************************************************************************
begin-procedure Insert_Data1 ( $Empl_ID_ID1 , $Cal_RunID_ID1 , #Empl_RCD_ID1 , $GP_Pay_Gr_ID1 , $Cal_ID_ID1 , 
                               #Rslt_Seg_Nr_ID1 , $Slice_End_DT_ID1 , $PRD_E_DT_ID1 , $Cpay_E_DT_ID1, :#temp_counter )
       
#debug show   $Empl_ID_ID1 ' , ' $Cal_RunID_ID1 ' , ' #Empl_RCD_ID1 ' , ' $GP_Pay_Gr_ID1 ' , ' $Cal_ID_ID1 
#debug show   #Rslt_Seg_Nr_ID1 ' , ' $Slice_End_DT_ID1 ' , ' $PRD_E_DT_ID1 ' , ' $Cpay_E_DT_ID1   
  
 
let #_count_child_tmp = 0
  let #temp_counter = 0
begin-select
#ifdef ORACLE
/*+ INDEX(FK01PID1 PS_GPCH_RP_FK01)*/
#endif
FK01PID1.EMPLID
FK01PID1.CAL_RUN_ID
FK01PID1.EMPL_RCD
FK01PID1.GP_PAYGROUP
FK01PID1.CAL_ID
FK01PID1.RSLT_SEG_NUM
FK01PID1.SLICE_END_DT
FK01PID1.PAY_ENTITY
FK01PID1.COMPANY
FK01PID1.PRD_END_DT
FK01PID1.GPCH_AL_CPAY_ENDDT
FK01PID1.GPCH_RP_YEAR
FK01PID1.DEPENDENT_BENEF
FK01PID1.BIRTHDATE
FK01PID1.GPCH_CA_EDU_END_DT
FK01PID1.NAME
FK01PID1.STUDENT
FK01PID1.DISABLED
FK01PID1.SEQ_NO
FK01PID1.GPCH_RP_AMOUNT1
FK01PID1.GPCH_RP_AMOUNT2
FK01PID1.GPCH_RP_AMOUNT3
FK01PID1.GPCH_RP_AMOUNT4
FK01PID1.GPCH_RP_AMOUNT5

  let #_count_child_tmp      =  #_count_child_tmp + 1
  let $_count_child_tmp    =  to_char(#_count_child_tmp)
  let $_count_child_tmp    =  $_count_child_tmp || '. '
  let $_Empl_ID_AL04_4R          =  rtrim(&FK01PID1.EMPLID,' ')
  let $_Cal_RunID_AL04_4R        =  rtrim(&FK01PID1.CAL_RUN_ID,' ')
  let #_Empl_RCD_AL04_4R         =  &FK01PID1.EMPL_RCD
  let $_GP_Pay_Gr_AL04_4R        =  rtrim(&FK01PID1.GP_PAYGROUP,' ')
  let $_Cal_ID_AL04_4R           =  rtrim(&FK01PID1.CAL_ID,' ')
  let #_Rslt_Seg_Nr_AL04_4R      =  &FK01PID1.RSLT_SEG_NUM
  let $_Slice_End_DT_AL04_4R     =  rtrim(&FK01PID1.SLICE_END_DT,' ')
  let $_Pay_Entity_AL04_4R       =  rtrim(&FK01PID1.PAY_ENTITY,' ')
  let $_Company_AL04_4R          =  rtrim(&FK01PID1.COMPANY,' ')
  let $_PRD_E_DT_AL04_4R         =  rtrim(&FK01PID1.PRD_END_DT,' ')
  let $_Cpay_E_DT_AL04_4R        =  rtrim(&FK01PID1.GPCH_AL_CPAY_ENDDT,' ')
  let $_RP_Year_AL04_4R          =  rtrim(&FK01PID1.GPCH_RP_YEAR,' ')
  let $_Dependent_AL04_4R        =  rtrim(&FK01PID1.DEPENDENT_BENEF,' ')
  let $_Birth_DT_AL04_4R         =  rtrim(&FK01PID1.BIRTHDATE,' ')
  let $_Edu_End_DT_AL04_4R       =  rtrim(&FK01PID1.GPCH_CA_EDU_END_DT,' ')
  let $_Name_AL04_4R             =  rtrim(&FK01PID1.NAME,' ')
  let $_Student_AL04_4R          =  rtrim(&FK01PID1.STUDENT,' ')
  let $_Disabled_AL04_4R         =  rtrim(&FK01PID1.DISABLED,' ')
  let #_Sequence_AL04_4R         =  &FK01PID1.SEQ_NO
  let #_Amount1_AL04_4R          =  -1 * &FK01PID1.GPCH_RP_AMOUNT1
  let #_Amount2_AL04_4R          =  -1 * &FK01PID1.GPCH_RP_AMOUNT2
  let #_Amount3_AL04_4R          =  -1 * &FK01PID1.GPCH_RP_AMOUNT3
  let #_Amount4_AL04_4R          =  -1 * &FK01PID1.GPCH_RP_AMOUNT4
  let #_Amount5_AL04_4R          =  -1 * &FK01PID1.GPCH_RP_AMOUNT5
  let $_count_child_tmp    =  $_count_child_tmp || $_Name_AL04_4R
  let $_Dependent_xml             = $_Dependent_AL04_4R !sqh
  let $_Disabled_xml              = $_Disabled_AL04_4R 
  let $_Birthdt_xml               = $_Birth_DT_AL04_4R 
  !let $Dependent_xml             = $_Dependent_AL04_4R !sqh
  !let $Disabled_xml              = $_Disabled_AL04_4R 
  !let $Birthdt_xml               = $_Birth_DT_AL04_4R 
  do Print_Data_Children
     let #temp_counter = 1
    
from PS_GPCH_RP_FK01 FK01PID1
WHERE FK01PID1.EMPLID               = $Empl_ID_ID1       and
      FK01PID1.CAL_RUN_ID           = $Cal_RunID_ID1     and
      FK01PID1.EMPL_RCD             = #Empl_RCD_ID1      and
      FK01PID1.GP_PAYGROUP          = $GP_Pay_Gr_ID1     and
      FK01PID1.CAL_ID               = $Cal_ID_ID1        and
      FK01PID1.RSLT_SEG_NUM         = #Rslt_Seg_Nr_ID1   and
      FK01PID1.SLICE_END_DT         = $Slice_End_DT_ID1  and
      FK01PID1.PRD_END_DT           = $PRD_E_DT_ID1      and
      FK01PID1.GPCH_AL_CPAY_ENDDT   = $Cpay_E_DT_ID1     
order by FK01PID1.DEPENDENT_BENEF
end-select
   
end-procedure

!****************************************************************************************
begin-procedure Insert_Data2 ( $Empl_ID_ID2 , $Cal_RunID_ID2 , #Empl_RCD_ID2 ,
                            $GP_Pay_Gr_ID2 , $Cal_ID_ID2 , #Rslt_Seg_Nr_ID2 ,
       $Slice_End_DT_ID2 , $PRD_E_DT_ID2 , $Cpay_E_DT_ID2 ,:#temp_counter )
let #_count_child_tmp = 0
 let #temp_counter = 0


begin-select
#ifdef ORACLE
/*+ INDEX(FK01PID2 PS_GPCH_RP_FK01)*/
#endif
FK01PID2.EMPLID
FK01PID2.CAL_RUN_ID
FK01PID2.EMPL_RCD
FK01PID2.GP_PAYGROUP
FK01PID2.CAL_ID
FK01PID2.RSLT_SEG_NUM
FK01PID2.SLICE_END_DT
FK01PID2.PAY_ENTITY
FK01PID2.COMPANY
FK01PID2.PRD_END_DT
FK01PID2.GPCH_AL_CPAY_ENDDT
FK01PID2.GPCH_RP_YEAR
FK01PID2.DEPENDENT_BENEF
FK01PID2.BIRTHDATE
FK01PID2.GPCH_CA_EDU_END_DT
FK01PID2.NAME
FK01PID2.STUDENT
FK01PID2.DISABLED
FK01PID2.SEQ_NO
FK01PID2.GPCH_RP_AMOUNT1
FK01PID2.GPCH_RP_AMOUNT2
FK01PID2.GPCH_RP_AMOUNT3
FK01PID2.GPCH_RP_AMOUNT4
FK01PID2.GPCH_RP_AMOUNT5

  let #_count_child_tmp      =  #_count_child_tmp + 1
  let $_count_child_tmp    =  to_char(#_count_child_tmp)
  let $_count_child_tmp    =  $_count_child_tmp || '. '
  let $_Empl_ID_AL04_4R          =  rtrim(&FK01PID2.EMPLID,' ')
  let $_Cal_RunID_AL04_4R        =  rtrim(&FK01PID2.CAL_RUN_ID,' ')
  let #_Empl_RCD_AL04_4R         =  &FK01PID2.EMPL_RCD
  let $_GP_Pay_Gr_AL04_4R        =  rtrim(&FK01PID2.GP_PAYGROUP,' ')
  let $_Cal_ID_AL04_4R           =  rtrim(&FK01PID2.CAL_ID,' ')
  let #_Rslt_Seg_Nr_AL04_4R      =  &FK01PID2.RSLT_SEG_NUM
  let $_Slice_End_DT_AL04_4R     =  rtrim(&FK01PID2.SLICE_END_DT,' ')
  let $_Pay_Entity_AL04_4R       =  rtrim(&FK01PID2.PAY_ENTITY,' ')
  let $_Company_AL04_4R          =  rtrim(&FK01PID2.COMPANY,' ')
  let $_PRD_E_DT_AL04_4R         =  rtrim(&FK01PID2.PRD_END_DT,' ')
  let $_Cpay_E_DT_AL04_4R        =  rtrim(&FK01PID2.GPCH_AL_CPAY_ENDDT,' ')
  let $_RP_Year_AL04_4R          =  rtrim(&FK01PID2.GPCH_RP_YEAR,' ')
  let $_Dependent_AL04_4R        =  rtrim(&FK01PID2.DEPENDENT_BENEF,' ')
  let $_Birth_DT_AL04_4R         =  rtrim(&FK01PID2.BIRTHDATE,' ')
  let $_Edu_End_DT_AL04_4R       =  rtrim(&FK01PID2.GPCH_CA_EDU_END_DT,' ')
  let $_Name_AL04_4R             =  rtrim(&FK01PID2.NAME,' ')
  let $_Student_AL04_4R          =  rtrim(&FK01PID2.STUDENT,' ')
  let $_Disabled_AL04_4R         =  rtrim(&FK01PID2.DISABLED,' ')
  let #_Sequence_AL04_4R         =  &FK01PID2.SEQ_NO
  let #_Amount1_AL04_4R          =  &FK01PID2.GPCH_RP_AMOUNT1
  let #_Amount2_AL04_4R          =  &FK01PID2.GPCH_RP_AMOUNT2
  let #_Amount3_AL04_4R          =  &FK01PID2.GPCH_RP_AMOUNT3
  let #_Amount4_AL04_4R          =  &FK01PID2.GPCH_RP_AMOUNT4
  let #_Amount5_AL04_4R          =  &FK01PID2.GPCH_RP_AMOUNT5
  let $_count_child_tmp          =  $_count_child_tmp || $_Name_AL04_4R
  let $_Dependent_xml             = $_Dependent_AL04_4R !sqh
  let $_Disabled_xml              = $_Disabled_AL04_4R 
  let $_Birthdt_xml               = $_Birth_DT_AL04_4R 
  !let $Dependent_xml             = $_Dependent_AL04_4R !sqh
  !let $Disabled_xml              = $_Disabled_AL04_4R 
  !let $Birthdt_xml               = $_Birth_DT_AL04_4R 
  do Print_Data_Children
   let #temp_counter = 1
 ! show 'inside loop $Dependent_xml' $Dependent_xml
from PS_GPCH_RP_FK01 FK01PID2
WHERE FK01PID2.EMPLID               =   $Empl_ID_ID2       and
      FK01PID2.CAL_RUN_ID           =   $Cal_RunID_ID2     and
      FK01PID2.EMPL_RCD             =   #Empl_RCD_ID2      and
      FK01PID2.GP_PAYGROUP          =   $GP_Pay_Gr_ID2     and
      FK01PID2.CAL_ID               =   $Cal_ID_ID2        and
      FK01PID2.RSLT_SEG_NUM         =   #Rslt_Seg_Nr_ID2   and
      FK01PID2.SLICE_END_DT         =   $Slice_End_DT_ID2  and
      FK01PID2.PRD_END_DT           =   $PRD_E_DT_ID2      and
      FK01PID2.GPCH_AL_CPAY_ENDDT   =   $Cpay_E_DT_ID2
order by FK01PID2.DEPENDENT_BENEF
end-select

  

end-procedure

!*********************************************************************************************
begin-procedure CheckExistDiff
let #count_child_tmp = 0
let $ExistDiffChild = 'N'
while #count_child_tmp < #count_ch_tmp1
  get #Amount1_4R0       from ChildData(0) Feld20(#count_child_tmp)
  get #Amount2_4R0       from ChildData(0) Feld21(#count_child_tmp)
  get #Amount3_4R0       from ChildData(0) Feld22(#count_child_tmp)
  get #Amount4_4R0       from ChildData(0) Feld23(#count_child_tmp)
  get #Amount5_4R0       from ChildData(0) Feld24(#count_child_tmp)

  get #Amount1_4R1       from ChildData(1) Feld20(#count_child_tmp)
  get #Amount2_4R1       from ChildData(1) Feld21(#count_child_tmp)
  get #Amount3_4R1       from ChildData(1) Feld22(#count_child_tmp)
  get #Amount4_4R1       from ChildData(1) Feld23(#count_child_tmp)
  get #Amount5_4R1       from ChildData(1) Feld24(#count_child_tmp)

  let #Amount1_4R = #Amount1_4R0 - #Amount1_4R1
  let #Amount2_4R = #Amount2_4R0 - #Amount2_4R1
  let #Amount3_4R = #Amount3_4R0 - #Amount3_4R1
  let #Amount4_4R = #Amount4_4R0 - #Amount4_4R1
  let #Amount5_4R = #Amount5_4R0 - #Amount5_4R1

  let #count_child_tmp         =  #count_child_tmp + 1
  if (#Amount2_4R <> 0) or (#Amount3_4R <> 0) or
     (#Amount4_4R <> 0) or (#Amount5_4R <> 0)
  let $ExistDiffChild = 'Y'
  end-if
end-while
end-procedure
!*********************************************************************************************
begin-procedure Insert_Data3
let #count_child_tmp = 0

while #count_child_tmp < #count_ch_tmp1

  get $Empl_ID_AL04_4R        from ChildData(0) Feld1(#count_child_tmp)
  get $Cal_RunID_AL04_4R      from ChildData(0) Feld2(#count_child_tmp)
  get #Empl_RCD_AL04_4R       from ChildData(0) Feld3(#count_child_tmp)
  get $GP_Pay_Gr_AL04_4R      from ChildData(0) Feld4(#count_child_tmp)
  get $Cal_ID_AL04_4R         from ChildData(0) Feld5(#count_child_tmp)
  get #Rslt_Seg_Nr_AL04_4R    from ChildData(0) Feld6(#count_child_tmp)
  get $Slice_End_DT_AL04_4R   from ChildData(0) Feld7(#count_child_tmp)
  get $Pay_Entity_AL04_4R     from ChildData(0) Feld8(#count_child_tmp)
  get $Company_AL04_4R        from ChildData(0) Feld9(#count_child_tmp)
  get $PRD_E_DT_AL04_4R       from ChildData(0) Feld10(#count_child_tmp)
  get $Cpay_E_DT_AL04_4R      from ChildData(0) Feld11(#count_child_tmp)
  get $RP_Year_AL04_4R        from ChildData(0) Feld12(#count_child_tmp)
  get $Dependent_AL04_4R      from ChildData(0) Feld13(#count_child_tmp)
  get $Birth_DT_AL04_4R       from ChildData(0) Feld14(#count_child_tmp)
  get $Edu_End_DT_AL04_4R     from ChildData(0) Feld15(#count_child_tmp)
  get $Name_AL04_4R           from ChildData(0) Feld16(#count_child_tmp)
  get $Student_AL04_4R        from ChildData(0) Feld17(#count_child_tmp)
  get $Disabled_AL04_4R       from ChildData(0) Feld18(#count_child_tmp)
  get #Sequence_AL04_4R       from ChildData(0) Feld19(#count_child_tmp)
  get #Amount1_AL04_4R0       from ChildData(0) Feld20(#count_child_tmp)
  get #Amount2_AL04_4R0       from ChildData(0) Feld21(#count_child_tmp)
  get #Amount3_AL04_4R0       from ChildData(0) Feld22(#count_child_tmp)
  get #Amount4_AL04_4R0       from ChildData(0) Feld23(#count_child_tmp)
  get #Amount5_AL04_4R0       from ChildData(0) Feld24(#count_child_tmp)

  get #Amount1_AL04_4R1       from ChildData(1) Feld20(#count_child_tmp)
  get #Amount2_AL04_4R1       from ChildData(1) Feld21(#count_child_tmp)
  get #Amount3_AL04_4R1       from ChildData(1) Feld22(#count_child_tmp)
  get #Amount4_AL04_4R1       from ChildData(1) Feld23(#count_child_tmp)
  get #Amount5_AL04_4R1       from ChildData(1) Feld24(#count_child_tmp)

  let #Amount1_AL04_4R = #Amount1_AL04_4R0 - #Amount1_AL04_4R1
  let #Amount2_AL04_4R = #Amount2_AL04_4R0 - #Amount2_AL04_4R1
  let #Amount3_AL04_4R = #Amount3_AL04_4R0 - #Amount3_AL04_4R1
  let #Amount4_AL04_4R = #Amount4_AL04_4R0 - #Amount4_AL04_4R1
  let #Amount5_AL04_4R = #Amount5_AL04_4R0 - #Amount5_AL04_4R1

  let #count_child_tmp         =  #count_child_tmp + 1
  let $count_child_tmp       =  to_char(#count_child_tmp)
  let $count_child_tmp       =  $count_child_tmp || '. '
  let $count_child_tmp       =  $count_child_tmp || $Name_AL04_4R

  let  $Dependent_xml = $Dependent_AL04_4R  !sqh
  let  $Disabled_xml  = $Disabled_AL04_4R
  let $Birthdt_xml = $Birth_DT_AL04_4R
  do Print_Data_Children
 end-while
    If $Final_Xml <> ''  and $BenPerson_endtag = 'N'
       let $BenPerson_endtag = 'Y'
      let $Final_Xml = $Final_Xml ||'</tnsb:BeneficiaryPerson>' !sqh
    End-If
end-procedure

!*************************************************************************************
begin-procedure Check_Count_Children

let $MerkCh = 'N'
let #count_ch_tmp1 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(FK01_CH1 PS_GPCH_RP_FK01)*/
#endif
FK01_CH1.EMPLID
  let #count_ch_tmp1      = #count_ch_tmp1 + 1
from PS_GPCH_RP_FK01 FK01_CH1
where (FK01_CH1.EMPLID        = $Empl_ID_CRP)          AND
      (FK01_CH1.CAL_RUN_ID    = $Cal_RunID_CRP)        AND
      (FK01_CH1.EMPL_RCD      = #Empl_RCD_CRP)         AND
      (FK01_CH1.GP_PAYGROUP   = $GP_Pay_Gr_CRP)        AND
      (FK01_CH1.CAL_ID        = $Cal_ID_CRP)           AND
      (FK01_CH1.RSLT_SEG_NUM  = #Rslt_Seg_Nr_CRP)      AND
      (FK01_CH1.SLICE_END_DT  = $Slice_End_DT_CRP)
end-select
!---------------------------------------------------------
let #count_ch_tmp2 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(FK01_CH2 PS_GPCH_RP_FK01)*/
#endif
FK01_CH2.EMPLID
  let #count_ch_tmp2      = #count_ch_tmp2 + 1
from PS_GPCH_RP_FK01 FK01_CH2
where (FK01_CH2.EMPLID        = $Empl_ID_CRP_Old)          AND
      (FK01_CH2.CAL_RUN_ID    = $Cal_RunID_CRP_Old)        AND
      (FK01_CH2.EMPL_RCD      = #Empl_RCD_CRP_Old)         AND
      (FK01_CH2.GP_PAYGROUP   = $GP_Pay_Gr_CRP_Old)        AND
      (FK01_CH2.CAL_ID        = $Cal_ID_CRP_Old)           AND
      (FK01_CH2.RSLT_SEG_NUM  = #Rslt_Seg_Nr_CRP_Old)      AND
      (FK01_CH2.SLICE_END_DT  = $Slice_End_DT_CRP_Old)
end-select
!---------------------------------------------------------
if (#count_ch_tmp1 = 0 and #count_ch_tmp2 = 0)
 goto NoCh
end-if

if #count_ch_tmp1 <> #count_ch_tmp2
  let $MerkCh = 'Y'
  goto NoCh
end-if


do InitChldCmp
let #ch1 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(CH1 PS_GPCH_RP_FK01)*/
#endif
ch1.NAME
  if #ch1 < #count_ch_tmp1
      put &ch1.NAME into ChldDatCmp(0) FieldCh(#ch1)
  end-if
  let #ch1 = #ch1 + 1
from PS_GPCH_RP_FK01 ch1
where (ch1.EMPLID        = $Empl_ID_CRP)          AND
      (ch1.CAL_RUN_ID    = $Cal_RunID_CRP)        AND
      (ch1.EMPL_RCD      = #Empl_RCD_CRP)         AND
      (ch1.GP_PAYGROUP   = $GP_Pay_Gr_CRP)        AND
      (ch1.CAL_ID        = $Cal_ID_CRP)           AND
      (ch1.RSLT_SEG_NUM  = #Rslt_Seg_Nr_CRP)      AND
      (ch1.SLICE_END_DT  = $Slice_End_DT_CRP)
end-select
!------------------------------------------------------
let #ch2 = 0
begin-select
#ifdef ORACLE
/*+ INDEX(CH2 PS_GPCH_RP_FK01)*/
#endif
ch2.NAME
  if #ch2 < #count_ch_tmp1
      put &ch2.NAME into ChldDatCmp(1) FieldCh(#ch2)
  end-if
  let #ch2 = #ch2 + 1
from PS_GPCH_RP_FK01 ch2
where (ch2.EMPLID        = $Empl_ID_CRP_Old)          AND
      (ch2.CAL_RUN_ID    = $Cal_RunID_CRP_Old)        AND
      (ch2.EMPL_RCD      = #Empl_RCD_CRP_Old)         AND
      (ch2.GP_PAYGROUP   = $GP_Pay_Gr_CRP_Old)        AND
      (ch2.CAL_ID        = $Cal_ID_CRP_Old)           AND
      (ch2.RSLT_SEG_NUM  = #Rslt_Seg_Nr_CRP_Old)      AND
      (ch2.SLICE_END_DT  = $Slice_End_DT_CRP_Old)
end-select
!----------------------------------------------------

let #count_ch = 0

while #count_ch < #count_ch_tmp1
  get $Name_ch0  from ChldDatCmp(0) FieldCh(#count_ch)
  get $Name_ch1  from ChldDatCmp(1) FieldCh(#count_ch)

  let #count_ch         =  #count_ch + 1
  if ($Name_ch0 <> $Name_ch1)
  ! let $MerkCh = 'Y'   ! remove printing of retro due to child name change.
   BREAK
  end-if
end-while

NoCh:
end-procedure
!*************************************************************************************
begin-procedure Init_Arrays
put ''            into ArrFK02(0) arr1
put ''            into ArrFK02(0) arr2
put 0             into ArrFK02(0) arr3
put ''            into ArrFK02(0) arr4
put ''            into ArrFK02(0) arr5
put 0             into ArrFK02(0) arr6
put ''            into ArrFK02(0) arr7
put ''            into ArrFK02(0) arr8
put ''            into ArrFK02(0) arr9
put ''            into ArrFK02(0) arr10
put ''            into ArrFK02(0) arr11
put ''            into ArrFK02(0) arr12
put ''            into ArrFK02(0) arr13
put ''            into ArrFK02(0) arr14
put ''            into ArrFK02(0) arr15
put ''            into ArrFK02(0) arr16
put 0             into ArrFK02(0) arr17
put 0             into ArrFK02(0) arr18
put ''            into ArrFK02(0) arr19
put 0             into ArrFK02(0) arr20
put 0             into ArrFK02(0) arr21
put 0             into ArrFK02(0) arr22
put 0             into ArrFK02(0) arr23
put 0             into ArrFK02(0) arr24
put 0             into ArrFK02(0) arr25
put 0             into ArrFK02(0) arr26
put 0             into ArrFK02(0) arr27
put 0             into ArrFK02(0) arr28
put 0             into ArrFK02(0) arr29
put 0             into ArrFK02(0) arr30
put 0             into ArrFK02(0) arr31
end-procedure

begin-procedure Init_Arrays_Child
let #k1 = 0
let #k2 = 0
while #k1 < 2
  while #k2 < #count_ch_tmp1
   put '' into ChildData(#k1) Feld1(#k2)
   put '' into ChildData(#k1) Feld2(#k2)
   put 0  into ChildData(#k1) Feld3(#k2)
   put '' into ChildData(#k1) Feld4(#k2)
   put '' into ChildData(#k1) Feld5(#k2)
   put 0  into ChildData(#k1) Feld6(#k2)
   put '' into ChildData(#k1) Feld7(#k2)
   put '' into ChildData(#k1) Feld8(#k2)
   put '' into ChildData(#k1) Feld9(#k2)
   put '' into ChildData(#k1) Feld10(#k2)
   put '' into ChildData(#k1) Feld11(#k2)
   put '' into ChildData(#k1) Feld12(#k2)
   put '' into ChildData(#k1) Feld13(#k2)
   put '' into ChildData(#k1) Feld14(#k2)
   put '' into ChildData(#k1) Feld15(#k2)
   put '' into ChildData(#k1) Feld16(#k2)
   put '' into ChildData(#k1) Feld17(#k2)
   put '' into ChildData(#k1) Feld18(#k2)
   put 0  into ChildData(#k1) Feld19(#k2)
   put 0  into ChildData(#k1) Feld20(#k2)
   put 0  into ChildData(#k1) Feld21(#k2)
   put 0  into ChildData(#k1) Feld22(#k2)
   put 0  into ChildData(#k1) Feld23(#k2)
   put 0  into ChildData(#k1) Feld24(#k2)
   let #k2 = #k2 + 1
   end-while
   let #k1 = #k1 + 1
end-while
end-procedure
!**********************************************************************************************
begin-procedure InitChldCmp
let #k1 = 0
let #k2 = 0
while #k1 < 2
  while #k2 < 20
     put '' into ChildData(#k1) Feld1(#k2)
     let #k2 = #k2 + 1
  end-while
  let #k1 = #k1 + 1
end-while

end-procedure
!**********************************************************************************************
begin-procedure InitRekapData
while #b1 < 50
put ''            into RekapData(#b1) Rekap1
put ''            into RekapData(#b1) Rekap2
put 0             into RekapData(#b1) Rekap3
put 0             into RekapData(#b1) Rekap4
put 0             into RekapData(#b1) Rekap5
put 0             into RekapData(#b1) Rekap6
put 0             into RekapData(#b1) Rekap7
put 0             into RekapData(#b1) Rekap8
put 0             into RekapData(#b1) Rekap9
put 0             into RekapData(#b1) Rekap10
let #b1 = #b1 + 1
end-while
end-procedure
!***********************************************************************************************

begin-procedure Print-Canton-Summary($Actual_Can,#ChildAllowance1_Total,#ChildAllowance2_Total,
                #ChildAllowance3_Total,#ChildAllowance4_Total,#ChildAllowance5_Total,
                #ChildAllowance1_FT,#ChildAllowance2_FT,#ChildAllowance3_FT,#ChildAllowance4_FT,
                #ChildAllowance5_FT,#ChildAllowance1_PT,#ChildAllowance2_PT,#ChildAllowance3_PT,
                #ChildAllowance4_PT,#ChildAllowance5_PT,#ChildAllowance1_H,#ChildAllowance2_H,
                #ChildAllowance3_H,#ChildAllowance4_H,#ChildAllowance5_H,#EduAllowance1_Total,
                #EduAllowance2_Total,#EduAllowance3_Total,#EduAllowance4_Total,#EduAllowance5_Total,
                #EduAllowance1_FT,#EduAllowance2_FT,#EduAllowance3_FT,#EduAllowance4_FT,
                #EduAllowance5_FT,#EduAllowance1_PT,#EduAllowance2_PT,#EduAllowance3_PT,
                #EduAllowance4_PT,#EduAllowance5_PT,#EduAllowance1_H,#EduAllowance2_H,
                #EduAllowance3_H,#EduAllowance4_H,#EduAllowance5_H,#TotalEmpl,
                #TotalBenefEmpl,#BirthAllowance_Counter,#BirthAllowance_Total)

  ! Define column constants for summary page
  #define Col1 10
  #define Col2 40
  #define Col3 55
  #define Col4 70
  #define Col5 85
  #define Col6 110

  ! Initialize all needed variables
  let #TotalChildAllowance1 = 0
  let #TotalChildAllowance2 = 0
  let #TotalChildAllowance3 = 0
  let #TotalChildAllowance4 = 0
  let #TotelChildAllowance5 = 0

  let #TotalEduAllowance1 = 0
  let #TotalEduAllowance2 = 0
  let #TotalEduAllowance3 = 0
  let #TotalEduAllowance4 = 0
  let #TotalEduAllowance5 = 0

  let #ChildAllowanceAll_FT = 0
  let #ChildAllowanceAll_PT = 0
  let #ChildAllowanceAll_H = 0
  let #ChildAllowanceAll_Total = 0

  let #EduAllowanceAll_FT = 0
  let #EduAllowanceAll_PT = 0
  let #EduAllowanceAll_H = 0
  let #EduAllowanceAll_Total = 0

  let $ChildAllowance1_Rate = ''
  let $ChildAllowance2_Rate = ''
  let $ChildAllowance3_Rate = ''
  let $ChildAllowance4_Rate = ''
  let $ChildAllowance5_Rate = ''

  let $EduAllowance1_Rate = ''
  let $EduAllowance2_Rate = ''
  let $EduAllowance3_Rate = ''
  let $EduAllowance4_Rate = ''
  let $EduAllowance5_Rate = ''

  let #BirthAllowance_Rate = ''

  ! Calculate all totals
  let #TotalChildAllowance1 = #ChildAllowance1_FT + #ChildAllowance1_PT + #ChildAllowance1_H
  let #TotalChildAllowance2 = #ChildAllowance2_FT + #ChildAllowance2_PT + #ChildAllowance2_H
  let #TotalChildAllowance3 = #ChildAllowance3_FT + #ChildAllowance3_PT + #ChildAllowance3_H
  let #TotalChildAllowance4 = #ChildAllowance4_FT + #ChildAllowance4_PT + #ChildAllowance4_H
  let #TotalChildAllowance5 = #ChildAllowance5_FT + #ChildAllowance5_PT + #ChildAllowance5_H

  let #TotalEduAllowance1 = #EduAllowance1_FT + #EduAllowance1_PT + #EduAllowance1_H
  let #TotalEduAllowance2 = #EduAllowance2_FT + #EduAllowance2_PT + #EduAllowance2_H
  let #TotalEduAllowance3 = #EduAllowance3_FT + #EduAllowance3_PT + #EduAllowance3_H
  let #TotalEduAllowance4 = #EduAllowance4_FT + #EduAllowance4_PT + #EduAllowance4_H
  let #TotalEduAllowance5 = #EduAllowance5_FT + #EduAllowance5_PT + #EduAllowance5_H

  let #ChildAllowanceAll_FT = #ChildAllowance1_FT + #ChildAllowance2_FT
                                                        + #ChildAllowance3_FT + #ChildAllowance4_FT
                                                        + #ChildAllowance5_FT

  let #ChildAllowanceAll_PT = #ChildAllowance1_PT + #ChildAllowance2_PT
                                                        + #ChildAllowance3_PT + #ChildAllowance4_PT
                                                        + #ChildAllowance5_PT

  let #ChildAllowanceAll_H  = #ChildAllowance1_H + #ChildAllowance2_H
                                                        + #ChildAllowance3_H + #ChildAllowance4_H
                                                        + #ChildAllowance5_H

  let #EduAllowanceAll_FT   = #EduAllowance1_FT + #EduAllowance2_FT
                                                        + #EduAllowance3_FT + #EduAllowance4_FT
                                                        + #EduAllowance5_FT

  let #EduAllowanceAll_PT   = #EduAllowance1_PT + #EduAllowance2_PT
                                                        + #EduAllowance3_PT + #EduAllowance4_PT
                                                        + #EduAllowance5_PT

  let #EduAllowanceAll_H    = #EduAllowance1_H + #EduAllowance2_H
                                                        + #EduAllowance3_H + #EduAllowance4_H
                                                        + #EduAllowance5_H

  let #ChildAllowanceAll_Total = #ChildAllowance1_Total + #ChildAllowance2_Total
                               + #ChildAllowance3_Total + #ChildAllowance4_Total
                                                           + #ChildAllowance5_Total

  let #EduAllowanceAll_Total   = #EduAllowance1_Total + #EduAllowance2_Total
                                                           + #EduAllowance3_Total + #EduAllowance4_Total
                                                           + #EduAllowance5_Total

  ! Get the allowance amounts for this canton
  do Get-Allowance-Amounts ('CA1',
                                                        $Actual_Can,
                                                        1,
                                                        $ChildAllowance1_Rate,
                                                        $ChildAllowance2_Rate,
                                                        $ChildAllowance3_Rate,
                                                        $ChildAllowance4_Rate,
                                                        $ChildAllowance5_Rate,
                                                        $EduAllowance1_Rate,
                                                        $EduAllowance2_Rate,
                                                        $EduAllowance3_Rate,
                                                        $EduAllowance4_Rate,
                                                        $EduAllowance5_Rate,
                                                        $BirthAllowance_Rate)

  ! Get the needed report strings from the strings table
  do Get_Field_Information ( 'GPCHAL04' , 'FULL_TIME' , $FULL_TIME , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'PART_TIME' , $PART_TIME , #CW )
  do Get_Field_Information ( 'GPCHAL04' , 'REMARK_STR' ,$REMARK_STR , #CW )

  ! Format all output numbers
  do Format-Number(#ChildAllowance1_FT, $ChildAllowance1_FT, '99999990')
  do Format-Number(#ChildAllowance1_PT, $ChildAllowance1_PT, '99999990')
  do Format-Number(#ChildAllowance1_H, $ChildAllowance1_H, '99999999990')
  do Format-Number(#ChildAllowance1_Total, $ChildAllowance1_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance2_FT, $ChildAllowance2_FT, '99999990')
  do Format-Number(#ChildAllowance2_PT, $ChildAllowance2_PT, '99999990')
  do Format-Number(#ChildAllowance2_H, $ChildAllowance2_H, '99999999990')
  do Format-Number(#ChildAllowance2_Total, $ChildAllowance2_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance3_FT, $ChildAllowance3_FT, '99999990')
  do Format-Number(#ChildAllowance3_PT, $ChildAllowance3_PT, '99999990')
  do Format-Number(#ChildAllowance3_H, $ChildAllowance3_H, '99999999990')
  do Format-Number(#ChildAllowance3_Total, $ChildAllowance3_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance4_FT, $ChildAllowance4_FT, '99999990')
  do Format-Number(#ChildAllowance4_PT, $ChildAllowance4_PT, '99999990')
  do Format-Number(#ChildAllowance4_H, $ChildAllowance4_H, '99999999990')
  do Format-Number(#ChildAllowance4_Total, $ChildAllowance4_Total, '999,999,999.00')
  do Format-Number(#ChildAllowance5_FT, $ChildAllowance5_FT, '99999990')
  do Format-Number(#ChildAllowance5_PT, $ChildAllowance5_PT, '99999990')
  do Format-Number(#ChildAllowance5_H, $ChildAllowance5_H, '99999999990')
  do Format-Number(#ChildAllowance5_Total, $ChildAllowance5_Total, '999,999,999.00')
  do Format-Number(#ChildAllowanceAll_FT, $ChildAllowanceAll_FT,  '99999990')
  do Format-Number(#ChildAllowanceAll_PT, $ChildAllowanceAll_PT,  '99999990')
  do Format-Number(#ChildAllowanceAll_H, $ChildAllowanceAll_H,  '99999999990')
  do Format-Number(#ChildAllowanceAll_Total, $ChildAllowanceAll_Total,  '999,999,999.00')

  do Format-Number(#EduAllowance1_FT, $EduAllowance1_FT, '99999990')
  do Format-Number(#EduAllowance1_PT, $EduAllowance1_PT, '99999990')
  do Format-Number(#EduAllowance1_H, $EduAllowance1_H, '99999999990')
  do Format-Number(#EduAllowance1_Total, $EduAllowance1_Total, '999,999,999.00')
  do Format-Number(#EduAllowance2_FT, $EduAllowance2_FT, '99999990')
  do Format-Number(#EduAllowance2_PT, $EduAllowance2_PT, '99999990')
  do Format-Number(#EduAllowance2_H, $EduAllowance2_H, '99999999990')
  do Format-Number(#EduAllowance2_Total, $EduAllowance2_Total, '999,999,999.00')
  do Format-Number(#EduAllowance3_FT, $EduAllowance3_FT, '99999990')
  do Format-Number(#EduAllowance3_PT, $EduAllowance3_PT, '99999990')
  do Format-Number(#EduAllowance3_H, $EduAllowance3_H, '99999999990')
  do Format-Number(#EduAllowance3_Total, $EduAllowance3_Total, '999,999,999.00')
  do Format-Number(#EduAllowance4_FT, $EduAllowance4_FT, '99999990')
  do Format-Number(#EduAllowance4_PT, $EduAllowance4_PT, '99999990')
  do Format-Number(#EduAllowance4_H, $EduAllowance4_H, '99999999990')
  do Format-Number(#EduAllowance4_Total, $EduAllowance4_Total, '999,999,999.00')
  do Format-Number(#EduAllowance5_FT, $EduAllowance5_FT, '99999990')
  do Format-Number(#EduAllowance5_PT, $EduAllowance5_PT, '99999990')
  do Format-Number(#EduAllowance5_H, $EduAllowance5_H, '99999999990')
  do Format-Number(#EduAllowance5_Total, $EduAllowance5_Total, '999,999,999.00')
  do Format-Number(#EduAllowanceAll_FT, $EduAllowanceAll_FT,  '99999990')
  do Format-Number(#EduAllowanceAll_PT, $EduAllowanceAll_PT,  '99999990')
  do Format-Number(#EduAllowanceAll_H, $EduAllowanceAll_H,  '99999999990')
  do Format-Number(#EduAllowanceAll_Total, $EduAllowanceAll_Total,  '999,999,999.00')

  do Format-Number(#TotalEmpl, $TotalEmpl, '999990')
  do Format-Number(#TotalBenefEmpl, $TotalBenefEmpl, '999990')
  do Format-Number(#TotalChildAllowance1, $TotalChildAllowance1, '999990')
  do Format-Number(#TotalChildAllowance2, $TotalChildAllowance2, '999990')
  do Format-Number(#TotalChildAllowance3, $TotalChildAllowance3, '999990')
  do Format-Number(#TotalChildAllowance4, $TotalChildAllowance4, '999990')
  do Format-Number(#TotalChildAllowance5, $TotalChildAllowance5, '999990')
  do Format-Number(#TotalEduAllowance1, $TotalEduAllowance1, '999990')
  do Format-Number(#TotalEduAllowance2, $TotalEduAllowance2, '999990')
  do Format-Number(#TotalEduAllowance3, $TotalEduAllowance3, '999990')
  do Format-Number(#TotalEduAllowance4, $TotalEduAllowance4, '999990')
  do Format-Number(#TotalEduAllowance5, $TotalEduAllowance5, '999990')

  do Format-Number(#BirthAllowance_Counter, $BirthAllowance_Counter,  '99999990')
  do Format-Number(#BirthAllowance_Total, $BirthAllowance_Total,  '999,999,999.00')

  let $AMOUNT_STR = lpad($_AMOUNT_STR, 14, ' ')

  let $TotalEduAllowance1 = ltrim($TotalEduAllowance1, ' ')
  let $TotalEduAllowance2 = ltrim($TotalEduAllowance2, ' ')
  let $TotalEduAllowance3 = ltrim($TotalEduAllowance3, ' ')
  let $TotalEduAllowance4 = ltrim($TotalEduAllowance4, ' ')
  let $TotalEduAllowance5 = ltrim($TotalEduAllowance5, ' ')
  let $TotalChildAllowance1 = ltrim($TotalChildAllowance1, ' ')
  let $TotalChildAllowance2 = ltrim($TotalChildAllowance2, ' ')
  let $TotalChildAllowance3 = ltrim($TotalChildAllowance3, ' ')
  let $TotalChildAllowance4 = ltrim($TotalChildAllowance4, ' ')
  let $TotalChildAllowance5 = ltrim($TotalChildAllowance5, ' ')


  ! Print out the summary
  let $_Merk_Header     = 'TypeTwo'
  let $_Finish_Canton = 'O'

  ! Column headings
  print $_CHILD_BENEFS_STR                      (,{Col1}) bold
  print $FULL_TIME                                              (,{Col2}) bold
  print $PART_TIME                                              (,{Col3}) bold
  print $_HOURLY_RATE_STR                               (,{Col4}) bold
  if $Actual_Can <> 'GE'
    print $_RUDIMENT_CHILD_STR                  (,{Col5}) bold
    print $AMOUNT_STR                                   (,{Col6}) bold
  end-if

  ! Data
  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance1_FT                             (,{Col2})
  print $ChildAllowance1_PT                             (,{Col3})
  print $ChildAllowance1_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance1_Rate                 (,{Col5})
    print $ChildAllowance1_Total                (,{Col6})
  end-if

  print '2. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance2_FT                             (,{Col2})
  print $ChildAllowance2_PT                             (,{Col3})
  print $ChildAllowance2_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance2_Rate                 (,{Col5})
    print $ChildAllowance2_Total                (,{Col6})
  end-if

  print '3. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance3_FT                             (,{Col2})
  print $ChildAllowance3_PT                             (,{Col3})
  print $ChildAllowance3_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance3_Rate                 (,{Col5})
    print $ChildAllowance3_Total                (,{Col6})
  end-if

  print '4. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $ChildAllowance4_FT                             (,{Col2})
  print $ChildAllowance4_PT                             (,{Col3})
  print $ChildAllowance4_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance4_Rate                 (,{Col5})
    print $ChildAllowance4_Total                (,{Col6})
  end-if

  print '5. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $_AND_MORE_STR                                  (,+1)
  print $ChildAllowance5_FT                     (,{Col2})
  print $ChildAllowance5_PT                             (,{Col3})
  print $ChildAllowance5_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowance5_Rate                 (,{Col5})
    print $ChildAllowance5_Total                (,{Col6})
  end-if

  print $_TOTAL_COUNT_STR                       (+2,{Col1}, 30)
  print $ChildAllowanceAll_FT                   (,{Col2})
  print $ChildAllowanceAll_PT                   (,{Col3})
  print $ChildAllowanceAll_H                    (,{Col4})
  if $Actual_Can <> 'GE'
    print $ChildAllowanceAll_Total              (,{Col6})
  end-if

  print '_'                                                             (+1,{Col1},119) fill

  print $_EDU_BENEFS_STR                                (+2,{Col1}) bold

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance1_FT                               (,{Col2})
  print $EduAllowance1_PT                               (,{Col3})
  print $EduAllowance1_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance1_Rate                   (,{Col5})
    print $EduAllowance1_Total                  (,{Col6})
  end-if

  print '2. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance2_FT                               (,{Col2})
  print $EduAllowance2_PT                               (,{Col3})
  print $EduAllowance2_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance2_Rate                   (,{Col5})
    print $EduAllowance2_Total                  (,{Col6})
  end-if

  print '3. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance3_FT                               (,{Col2})
  print $EduAllowance3_PT                               (,{Col3})
  print $EduAllowance3_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance3_Rate                   (,{Col5})
    print $EduAllowance3_Total                  (,{Col6})
  end-if

  print '4. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $EduAllowance4_FT                               (,{Col2})
  print $EduAllowance4_PT                               (,{Col3})
  print $EduAllowance4_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance4_Rate                   (,{Col5})
    print $EduAllowance4_Total                  (,{Col6})
  end-if

  print '5. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print $_AND_MORE_STR                                  (,+1)
  print $EduAllowance5_FT                               (,{Col2})
  print $EduAllowance5_PT                               (,{Col3})
  print $EduAllowance5_H                                (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowance5_Rate                   (,{Col5})
    print $EduAllowance5_Total                  (,{Col6})
  end-if

  print $_TOTAL_COUNT_STR                       (+2,{Col1})
  print $EduAllowanceAll_FT                             (,{Col2})
  print $EduAllowanceAll_PT                             (,{Col3})
  print $EduAllowanceAll_H                              (,{Col4})
  if $Actual_Can <> 'GE'
    print $EduAllowanceAll_Total                (,{Col6})
  end-if

! The following commented source displays the total amounts for invalid
! children. As long as it is not used, it's commented out

!  print '_'                                                            (+1,{Col1},119) fill

!  print $_INVALIDE_CHILD_STR                   (+2,{Col1})
!  print $_TOTAL_COUNT_STR                      (+2,{Col1})

  print '_'                                                             (+1,{Col1},119) fill

  print $_BIRTH_BENEFS_STR                              (+2,{Col1}) bold
  print $BirthAllowance_Counter                 (,{Col2})
  if $Actual_Can <> 'GE'
    print $BirthAllowance_Rate                  (,{Col5})
    print $BirthAllowance_Total                 (,{Col6})
  end-if

  print '_'                                                             (+1,{Col1},119) fill

  print $_EMPL_COUNT1_STR                               (+2,{Col1})
  print ':'                                                             (,)
  print $TotalEmpl                                              (,+1)

  print $_EMPL_COUNT2_STR                               (+1,{Col1})
  print ':'                                                             (,)
  print $TotalBenefEmpl                                 (,+1)

  print $_CHILD_BENEFS_STR                              (+2,{Col1})
  print $_ELIGIBLE_BENEF_ST                             (,+1)

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance1                   (,+1)
  print '2. '                                                   (,{Col2})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance2                   (,+1)
  print '3. '                                                   (,{Col3})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance3                   (,+1)
  print '4. '                                                   (,{Col4})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance4                   (,+1)
  print '5. '                                                   (,{Col5})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalChildAllowance5                   (,+1)

  print $_EDU_BENEFS_STR                                (+2,{Col1})
  print $_ELIGIBLE_BENEF_ST                             (,+1)

  print '1. '                                                   (+1,{Col1})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance1                             (,+1)
  print '2. '                                                   (,{Col2})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance2                             (,+1)
  print '3. '                                                   (,{Col3})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance3                             (,+1)
  print '4. '                                                   (,{Col4})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance4                             (,+1)
  print '5. '                                                   (,{Col5})
  print $_CHILD1_STR                                    (,)
  print ':'                                                             (,)
  print $TotalEduAllowance5                             (,+1)

  print $REMARK_STR                                             (+3,{Col1})

  new-page

  let $_Merk_Header      = 'TypeOne'
  let $_Finish_Canton    = 'T'

end-procedure

begin-procedure Add-ChildData-To-Statistic (#FTE,$CompFrequency,#GPCH_RP_AMOUNT2,#GPCH_RP_AMOUNT3,
                #GPCH_RP_AMOUNT4,#ChildNum,:#ChildAllowance1_FT,:#ChildAllowance2_FT,:#ChildAllowance3_FT,
                :#ChildAllowance4_FT,:#ChildAllowance5_FT,:#ChildAllowance1_PT,:#ChildAllowance2_PT,
                :#ChildAllowance3_PT,:#ChildAllowance4_PT,:#ChildAllowance5_PT,:#ChildAllowance1_H,
                :#ChildAllowance2_H,:#ChildAllowance3_H,:#ChildAllowance4_H,:#ChildAllowance5_H,
                :#ChildAllowance1_Total,:#ChildAllowance2_Total,:#ChildAllowance3_Total,
                :#ChildAllowance4_Total,:#ChildAllowance5_Total,:#EduAllowance1_FT,:#EduAllowance2_FT,
                :#EduAllowance3_FT,:#EduAllowance4_FT,:#EduAllowance5_FT,:#EduAllowance1_PT,
                :#EduAllowance2_PT,:#EduAllowance3_PT,:#EduAllowance4_PT,:#EduAllowance5_PT,
                :#EduAllowance1_H,:#EduAllowance2_H,:#EduAllowance3_H,:#EduAllowance4_H,
                :#EduAllowance5_H,:#EduAllowance1_Total,:#EduAllowance2_Total,:#EduAllowance3_Total,
                :#EduAllowance4_Total,:#EduAllowance5_Total,:#BirthAllowance_Counter,
                                :#BirthAllowance_Total)

  if #GPCH_RP_AMOUNT2 <> 0
    add #GPCH_RP_AMOUNT2 to #BirthAllowance_Total
        if #GPCH_RP_AMOUNT2 > 0
          Add  1 to #BirthAllowance_Counter
    else
          add -1 to #BirthAllowance_Counter
        end-if
  end-if

  if (#FTE >= 1) and ($CompFrequency <> 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT3 <> 0

          evaluate #ChildNum
        when = 1
                   add #AddValue to #ChildAllowance1_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
              break
            when = 2
                  add #AddValue to #ChildAllowance2_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
              break
            when = 3
                  add #AddValue to #ChildAllowance3_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
              break
             when = 4
                  add #AddValue to #ChildAllowance4_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
              break
            when >= 5
                  add #AddValue to #ChildAllowance5_FT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                  break
      end-evaluate
        end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT4 <> 0

          evaluate #ChildNum
        when = 1
                          add #AddValue to #EduAllowance1_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
              break
            when = 2
                  add #AddValue to #EduAllowance2_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
              break
            when = 3
                  add #AddValue to #EduAllowance3_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
              break
             when = 4
                  add #AddValue to #EduAllowance4_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
              break
            when >= 5
                  add #AddValue to #EduAllowance5_FT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                  break
      end-evaluate
        end-if
  end-if

  if (#FTE < 1) and ($CompFrequency <> 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT3 <> 0

          evaluate #ChildNum
        when = 1
          add #AddValue to #ChildAllowance1_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
              break
            when = 2
                  add #AddValue to #ChildAllowance2_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
              break
            when = 3
                  add #AddValue to #ChildAllowance3_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
              break
            when = 4
                  add #AddValue to #ChildAllowance4_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
              break
            when >= 5
                  add #AddValue to #ChildAllowance5_PT
                  add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                  break
      end-evaluate
        end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

    if #GPCH_RP_AMOUNT4 <> 0

          evaluate #ChildNum
        when = 1
          add #AddValue to #EduAllowance1_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
              break
            when = 2
                  add #AddValue to #EduAllowance2_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
              break
            when = 3
                  add #AddValue to #EduAllowance3_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
              break
            when = 4
                  add #AddValue to #EduAllowance4_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
              break
            when >= 5
                  add #AddValue to #EduAllowance5_PT
                  add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                  break
      end-evaluate
        end-if
  end-if

  if ($CompFrequency = 'H')

        if #GPCH_RP_AMOUNT3 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

      if #GPCH_RP_AMOUNT3 <> 0

            evaluate #ChildNum
          when = 1
            add #AddValue to #ChildAllowance1_H
                        add #GPCH_RP_AMOUNT3 to #ChildAllowance1_Total
                break
              when = 2
                    add #AddValue to #ChildAllowance2_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance2_Total
                break
              when = 3
                    add #AddValue to #ChildAllowance3_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance3_Total
                break
              when = 4
                    add #AddValue to #ChildAllowance4_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance4_Total
                break
              when >= 5
                    add #AddValue to #ChildAllowance5_H
                    add #GPCH_RP_AMOUNT3 to #ChildAllowance5_Total
                    break
        end-evaluate
          end-if


        if #GPCH_RP_AMOUNT4 > 0
          let #AddValue = 1
        else
          let #AddValue = -1
        end-if

      if #GPCH_RP_AMOUNT4 <> 0

            evaluate #ChildNum
          when = 1
            add #AddValue to #EduAllowance1_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance1_Total
                break
              when = 2
                    add #AddValue to #EduAllowance2_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance2_Total
                break
              when = 3
                    add #AddValue to #EduAllowance3_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance3_Total
                break
                when = 4
                    add #AddValue to #EduAllowance4_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance4_Total
                break
              when >= 5
                    add #AddValue to #EduAllowance5_H
                    add #GPCH_RP_AMOUNT4 to #EduAllowance5_Total
                    break
        end-evaluate
          end-if
  end-if

end-procedure

begin-procedure Get-Allowance-Amounts ($Ca_Rates_Id,$Canton,#GPCH_CA_CHILD_MIN,:$ChildAllowance1_Rate,
                :$ChildAllowance2_Rate,:$ChildAllowance3_Rate,:$ChildAllowance4_Rate,
                :$ChildAllowance5_Rate,:$EduAllowance1_Rate,:$EduAllowance2_Rate,
                :$EduAllowance3_Rate,:$EduAllowance4_Rate,:$EduAllowance5_Rate,:$BirthAllowance_Rate)

  ! Get the child and education allowance rate
begin-select
A.SEQNUM
A.GPCH_CA_AMOUNT
A.GPCH_CA_AMOUNT2
A.GPCH_EDU_AMOUNT

  evaluate &A.SEQNUM
    when = 1
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance1_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance1_Rate = $ChildAllowance1_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance1_Rate, '99,990.00')
          break
        when = 2
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance2_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance2_Rate = $ChildAllowance2_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance2_Rate, '99,990.00')
          break
        when = 3
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance3_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance3_Rate = $ChildAllowance3_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance3_Rate, '99,990.00')
          break
        when = 4
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance4_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance4_Rate = $ChildAllowance4_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance4_Rate, '99,990.00')
          break
        when = 5
          do Format-Number(&A.GPCH_CA_AMOUNT, $ChildAllowance5_Rate, '99,990.00')
          if &A.GPCH_CA_AMOUNT2 <> 0
            do Format-Number(&A.GPCH_CA_AMOUNT2, $Temp, '99,990.00')
                let $ChildAllowance5_Rate = $ChildAllowance5_Rate || ' / ' || $Temp
          end-if
          do Format-Number(&A.GPCH_EDU_AMOUNT, $EduAllowance5_Rate, '99,990.00')
          break
  end-evaluate

FROM   PS_GPCH_CA_STAT_S2 A
WHERE  A.GPCH_CA_RATES_ID  = $Ca_Rates_Id
           AND A.GPCH_TX_CANTON = $Canton
           AND A.GPCH_CA_CHILD_MIN = #GPCH_CA_CHILD_MIN
           AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                         FROM   PS_GPCH_CA_STAT_S2 A1
                         WHERE  A1.GPCH_CA_RATES_ID  = $Ca_Rates_Id
                         AND A1.GPCH_TX_CANTON = $Canton
                         AND A1.GPCH_CA_CHILD_MIN = #GPCH_CA_CHILD_MIN)
ORDER BY A.SEQNUM
  end-select

  if $ChildAllowance2_Rate = ''
    let $ChildAllowance2_Rate = $ChildAllowance1_Rate
  end-if
  if $ChildAllowance3_Rate = ''
    let $ChildAllowance3_Rate = $ChildAllowance2_Rate
  end-if
  if $ChildAllowance4_Rate = ''
    let $ChildAllowance4_Rate = $ChildAllowance3_Rate
  end-if
  if $ChildAllowance5_Rate = ''
    let $ChildAllowance5_Rate = $ChildAllowance4_Rate
  end-if

  if $EduAllowance2_Rate = ''
    let $EduAllowance2_Rate = $EduAllowance1_Rate
  end-if
  if $EduAllowance3_Rate = ''
    let $EduAllowance3_Rate = $EduAllowance2_Rate
  end-if
  if $EduAllowance4_Rate = ''
    let $EduAllowance4_Rate = $EduAllowance3_Rate
  end-if
  if $EduAllowance5_Rate = ''
    let $EduAllowance5_Rate = $EduAllowance4_Rate
  end-if

  ! Get the birth allowance rate
  begin-select
A.GPCH_CA_BIRTH_AMT

  do Format-Number(&A.GPCH_CA_BIRTH_AMT, $BirthAllowance_Rate, '99,990.00')

FROM  PS_GPCH_CA_STAT_S1 A
WHERE A.GPCH_CA_RATES_ID  = $Ca_Rates_Id
          AND A.GPCH_TX_CANTON = $Canton
          AND A.EFFDT = (SELECT MAX(A1.EFFDT)
                        FROM PS_GPCH_CA_STAT_S1 A1
                        WHERE   A1.GPCH_CA_RATES_ID  = $Ca_Rates_Id
                        AND A1.GPCH_TX_CANTON = $Canton
                        AND A1.EFF_STATUS = 'A')
  end-select

end-procedure

!*******************************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Eng_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Eng_GPCHGLOB
               break
          when = 'ALL'
               do Get_Eng_GPCHAL04
               do Get_Eng_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings
!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Ger_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Ger_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ger_GPCHAL04
               do Get_Ger_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings
!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

 evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Ita_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Ita_GPCHGLOB
               break
          when = 'ALL'
               do Get_Ita_GPCHAL04
               do Get_Ita_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

evaluate $ReportID
          when = 'GPCHAL04'
               do Get_Fra_GPCHAL04
               break
          when = 'GPCHGLOB'
               do Get_Fra_GPCHGLOB
               break
          when = 'ALL'
               do Get_Fra_GPCHAL04
               do Get_Fra_GPCHGLOB
               break
          when-other
               break
 end-evaluate

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!***********************************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut02.sqc'
#include 'gpchut04.sqc'  !get company informations
#include 'gpchut06.sqc'  !get run control parameter values
#include 'gpchut07.sqc'  !Log Output Selection
#include 'gpchut11.sqc'  !get Tax and Fak Values
#include 'curdttim.sqc'  !get-current-datetime procedure
#include 'readxlat.sqc'  !read-translate-table procedure
#include 'datetime.sqc'  !routines for date and time formatting
#include 'validdt.sqc'   !validate date routine
#include 'number.sqc'    !routines to format numbers
#include 'stdapi.sqc'    !routines to update run status
#include 'datemath.sqc'  !function for date-calculation
#include 'sqrtrans.sqc'  !sqr strings table procedures
#include 'gpchal4s.sqc'  !Get Strings Values for GPCHAL04
#include 'gpchglbs.sqc'  !Get Strings Values for GPCHGLOB