
!***********************************************************************
!  GPGBEFT:  Electronic Funds Transfer                                 *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2017, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  25821858                                            *
!----------------------------------------------------------------------*
! Program Desc: This program creates 3 ASCII files that conform        *
!               to the BACS standard for electronic payments orders    *
!               as well as totals in an ouput file and a net pay recon *
!               file.                                                  *
!***********************************************************************
! Date          Modification                                           *
! ----          ------------                                           *
! 09/2006       -  Modified for Corrective Retro                       *
! 04/2015       -  Included Employee level reporting                   *
!                  along with SHPL Changes                             *
!***********************************************************************

!******************************************************************
!*** Setting up the environment
!******************************************************************
!#define debugx
!#define debugy
#include 'setenv.sqc'   ! Set environment
#include 'setup32.sqc'  ! Printer and page-size initialization

begin-setup
   declare-Variable
      integer #GPGB_PMT_AMT 
      decimal #STL_VAL #TC_VAL #SMP_VAL #SAP_VAL #SPP_VAL #RBT_VAL #ASPP_VAL #SHPP_VAL #APPR_VAL #APPR_OFF #APPR_NET 
      decimal #STL_VAL_EMP #TC_VAL_EMP #SMP_VAL_EMP #SAP_VAL_EMP #SPP_VAL_EMP #RBT_VAL_EMP #ASPP_VAL_EMP #SHPP_VAL_EMP #APPR_VAL_EMP #APPR_OFF_EMP
   end-declare
end-setup


!******************************************************************
!*** Heading section - Title
!******************************************************************

begin-heading 7

end-heading

!******************************************************************
!***    Begin Report Section
!******************************************************************
begin-report

   SHOW 'Electronic Funds Transfer '
  
   !----------------------------------------------------------
   !***    ! SHOW timedate of the beginning
   !----------------------------------------------------------
   let $Time_Begin = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
   show 'Time Program Began = ' $Time_Begin

   !----------------------------------------------------------
   !***    Call the main procedures
   !----------------------------------------------------------
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Term
   do Init-Report
   do Process-Main
   do Stdapi-Term
   
   !----------------------------------------------------------
   !***    SHOW information
   !----------------------------------------------------------

   move #CountError to $CountError 99999
   SHOW 'CountError  ==> ' noline
   SHOW $CountError
   SHOW ' '

   !----------------------------------------------------------
   !***    SHOW timedate of the end
   !----------------------------------------------------------
   let $Time_Ended = edit(datenow(), 'DD/MM/YYYY HH24:MI:SS')
   show 'Time Program Ended = ' $Time_Ended

end-report

!******************************************************************
! I N I T I A L I Z E   A N D / O R   G E T    V A R I A B L E S
!******************************************************************


!*=================================================================
! Procedure     :INIT-REPORT
! Comment       :This procedure performs the application
!                initializations formats variables for use, and
!                calls the procedures to get input parameters.
!*=================================================================

begin-procedure INIT-REPORT

   let $ProcedureName      = 'INIT-REPORT'
   !SHOW 'PROCEDURE->' $ProcedureName

   do INIT-DATETIME
   do INIT-NUMBER
   do DEFINE-PRCS-VARS
   do GET-RUN-CONTROL-PARMS
   do GET-CURRENT-DATETIME

   let $ReportID    = 'GPGBEFT'
   let $ReportTitle = 'Electronic Funds Transfer - BACS'
   SHOW  ' '
   show $ReportID  ' '      $ReportTitle
   SHOW ' '
   show 'Operator ID: ' $Prcs_OprID  
   SHOW ' '
   SHOW 'Run Control ID:'  $Prcs_Run_Cntl_ID
   SHOW ' '

end-procedure INIT-REPORT


!******************************************************************
!      S T A R T   O F   T H E   R E P O R T
!******************************************************************

!*=================================================================
! Procedure     : PROCESS MAIN
! Descr    : This procedure is the main procedure of the
!            report and calls other procedures
!
!*=================================================================

begin-procedure Process-Main

   let $ProcedureName      = 'PROCESS-MAIN'
   !SHOW 'PROCEDURE->' $ProcedureName

   DO UPDATE-PRCS-RUN-STATUS

   let #NO_OF_ROWS_READ   = 0
   let #Rows_Written      = 0
   let #EMP_ROWS          = 0
   let #OTH_ROWS          = 0
   let #PAYE_ROWS         = 0
   let #EMP_TOTAL         = 0
   let #OTH_TOTAL         = 0
   let #EMP_AMT           = 0
   let #OTH_AMT           = 0
   let #PAYE_AMT          = 0
   let #PRE_TCSL_PAYE_AMT = 0
   let #NI_AMT            = 0
   
   do open1
   do Open2
   do GET-TC
   do GET-SMP
   do GET-SAP
   do GET-APPR-LEVY
   do GET-SPP
   do GET-RBT
   do GET-ASPP
   do GET-SHPP
   do SELECT-PAYMENT
   
   do UPDATE-GPGB-PAYMENT

   CLOSE 1
   SHOW 'FILE ' $BACS_FILE_PAYE ' CLOSED'
   CLOSE 2
   SHOW 'FILE ' $BACS_FILE_OTH ' CLOSED'
   CLOSE 3
   SHOW 'FILE ' $BACS_FILE_EMP ' CLOSED'
   CLOSE 4
   SHOW 'FILE ' $BACS_FILE_RECON ' CLOSED'

   DO UPDATE-PRCS-RUN-STATUS

end-procedure Process-Main


!*==================================================================
! Procedure     : OPEN1
! Descr         : NAMING THE OUTPUT FILES/GET VALUES
!
!*==================================================================

begin-procedure Open1

   let $ProcedureName      = 'OPEN1'
   !SHOW 'PROCEDURE->' $ProcedureName '- NAMING THE OUTPUT FILES/GET VALUES'

begin-select
CAL_RUN_ID
PAY_ENTITY
GPGB_FILE_NAME

   let $CAL_RUN_ID     = rtrim(&CAL_RUN_ID, ' ')
   let $PAY_ENTITY     = rtrim(&PAY_ENTITY, ' ')
   let $GPGB_FILE_NAME = rtrim(&GPGB_FILE_NAME, ' ')

   FROM  PS_GPGB_EFT_RNCTL
   WHERE OPRID = $prcs_oprid
   AND   RUN_CNTL_ID = $prcs_run_cntl_id

end-select

end-procedure Open1


!*==================================================================
! Procedure     : OPEN2
! Descr         : OPEN THE OUTPUT FILES
!
!*==================================================================

begin-procedure Open2

   let $ProcedureName      = 'OPEN2'
   let $Time_stamp = edit(datenow(),'_DD-MON-YYYY_HH24MISS')
   !SHOW 'PROCEDURE->' $ProcedureName '- OPEN THE OUTPUT FILES'

   let $BACS_FILE_PAYE  = $GPGB_FILE_NAME || $Time_stamp || '_PAYE.DAT'
   let $BACS_FILE_OTH   = $GPGB_FILE_NAME || $Time_stamp || '_OTH.DAT'
   let $BACS_FILE_EMP   = $GPGB_FILE_NAME || $Time_stamp || '_EMP.DAT'
   let $BACS_FILE_RECON = $GPGB_FILE_NAME || $Time_stamp || '_RECON.DAT'

   OPEN $BACS_FILE_PAYE AS 1
   FOR-WRITING
   RECORD = 100:FIXED
   SHOW 'FILE ' $BACS_FILE_PAYE ' OPENED'

   OPEN $BACS_FILE_OTH AS 2
   FOR-WRITING
   RECORD = 130:FIXED
   SHOW 'FILE ' $BACS_FILE_OTH ' OPENED'

   OPEN $BACS_FILE_EMP AS 3
   FOR-WRITING
   RECORD = 100:FIXED
   SHOW 'FILE ' $BACS_FILE_EMP ' OPENED'

   OPEN $BACS_FILE_RECON AS 4
   FOR-WRITING
   RECORD = 111:FIXED
   SHOW 'FILE ' $BACS_FILE_RECON ' OPENED'

end-procedure Open2


!*==================================================================
! Procedure     : GET-TC
! Descr         : Get value of Tax credits
!
!*==================================================================

begin-procedure GET-TC

   let $ProcedureName      = 'GET-TC'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #TC_VAL=0

begin-select

sum(CALC_RSLT_VAL) &TC_VAL 
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'TC ER TXCRD1') 
and CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

let #TC_VAL=&TC_VAL*100
!SHOW '#TC_VAL  > ' #TC_VAL
end-procedure GET-TC

!*==================================================================
! Procedure     : GET-TC-EMP
! Descr         : Get value of Tax credits per Employee
!
!*==================================================================

begin-procedure GET-TC-EMP

   let $ProcedureName      = 'GET-TC-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #TC_VAL_EMP=0
let #TC1_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &TC_VAL_EMP 

   let #TC1_VAL_EMP=&TC_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'TC ER TXCRD1') 
and CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #TC_VAL_EMP=#TC1_VAL_EMP*100
!SHOW '#TC_VAL_EMP  > ' #TC_VAL_EMP
end-procedure GET-TC-EMP

!*==================================================================
! Procedure     : GET-SMP
! Descr         : Get value of SMP Rebate
!
!*==================================================================

begin-procedure GET-SMP

   let $ProcedureName      = 'GET-SMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SMP_VAL=0

begin-select

sum(CALC_RSLT_VAL) &SMP1_VAL 
sum(CALC_ADJ_VAL) &SMP1_ADJ_VAL 
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SMP ER PAY1') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

begin-select

sum(CALC_RSLT_VAL) &SMP2_VAL 
sum(CALC_ADJ_VAL) &SMP2_ADJ_VAL 
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SMP ER PAY2') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select


let #SMP_VAL=(&SMP1_VAL+&SMP1_ADJ_VAL+&SMP2_VAL+&SMP2_ADJ_VAL)*100*0.92

!SHOW '#SMP_VAL  > ' #SMP_VAL
end-procedure GET-SMP

!*==================================================================
! Procedure     : GET-SMP-EMP
! Descr         : Get value of SMP Rebate per Employee
!
!*==================================================================

begin-procedure GET-SMP-EMP

   let $ProcedureName      = 'GET-SMP-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SMP_VAL_EMP=0
let #SMP1_VAL_EMP=0 
let #SMP1_ADJ_VAL_EMP=0
let #SMP2_VAL_EMP=0
let #SMP2_ADJ_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &SMP1_VAL_EMP 
sum(CALC_ADJ_VAL) &SMP1_ADJ_VAL_EMP 
   
   let #SMP1_VAL_EMP = &SMP1_VAL_EMP
   let #SMP1_ADJ_VAL_EMP = &SMP1_ADJ_VAL_EMP
   
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SMP ER PAY1') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(CALC_RSLT_VAL) &SMP2_VAL_EMP 
sum(CALC_ADJ_VAL) &SMP2_ADJ_VAL_EMP 

   let #SMP2_VAL_EMP = &SMP2_VAL_EMP
   let #SMP2_ADJ_VAL_EMP = &SMP2_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SMP ER PAY2') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select


let #SMP_VAL_EMP=(#SMP1_VAL_EMP+#SMP1_ADJ_VAL_EMP+#SMP2_VAL_EMP+#SMP2_ADJ_VAL_EMP)*100*0.92

!SHOW '#SMP_VAL_EMP  > ' #SMP_VAL_EMP
end-procedure GET-SMP-EMP


!*==================================================================
! Procedure     : GET-SAP
! Descr         : Get value of SAP Rebate
!
!*==================================================================

begin-procedure GET-SAP

   let $ProcedureName      = 'GET-SAP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SAP_VAL=0

begin-select

sum(CALC_RSLT_VAL) &SAP_VAL 
sum(CALC_ADJ_VAL) &SAP1_ADJ_VAL 
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SAP ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

let #SAP_VAL=(&SAP_VAL+&SAP1_ADJ_VAL)*100*0.92

!SHOW '#SAP_VAL  > ' #SAP_VAL
end-procedure GET-SAP

!*==================================================================
! Procedure     : GET-SAP-EMP
! Descr         : Get value of SAP Rebate per Employee
!
!*==================================================================

begin-procedure GET-SAP-EMP

   let $ProcedureName      = 'GET-SAP-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SAP_VAL_EMP=0
let #SAP1_VAL_EMP=0
let #SAP1_ADJ_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &SAP1_VAL_EMP 
sum(CALC_ADJ_VAL) &SAP1_ADJ_VAL_EMP 

   let #SAP1_VAL_EMP = &SAP1_VAL_EMP
   let #SAP1_ADJ_VAL_EMP = &SAP1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SAP ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #SAP_VAL_EMP=(#SAP1_VAL_EMP+#SAP1_ADJ_VAL_EMP)*100*0.92

!SHOW '#SAP_VAL_EMP  > ' #SAP_VAL_EMP
end-procedure GET-SAP-EMP
!*==================================================================
! Procedure     : GET-APPR-LEVY
! Descr         : Get value of Apprenticeship Levy per payentity
!
!*==================================================================

begin-procedure GET-APPR-LEVY

   let $ProcedureName      = 'GET-APPR-LEVY'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #APPR_VAL=0
let #APPR_OFF=0

begin-select

sum(CALC_RSLT_VAL) &APPR_VAL 


   let #APPR_VAL = &APPR_VAL

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ER DD APRLVY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

begin-select

sum(CALC_RSLT_VAL) &APPR_OFF 


   let #APPR_OFF = &APPR_OFF

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ER DD LVYALL') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

end-procedure GET-APPR-LEVY
!*==================================================================
! Procedure     : GET-APPR-LEVY-EMP
! Descr         : Get value of Apprenticeship Levy per Employee
!
!*==================================================================

begin-procedure GET-APPR-LEVY-EMP

   let $ProcedureName      = 'GET-APPR-LEVY-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #APPR_VAL_EMP=0
let #APPR_OFF_EMP=0

begin-select

sum(CALC_RSLT_VAL) &APPR_VAL_EMP 


   let #APPR_VAL_EMP = &APPR_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ER DD APRLVY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(CALC_RSLT_VAL) &APPR_OFF_EMP 


   let #APPR_OFF_EMP = &APPR_OFF_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ER DD LVYALL') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

end-procedure GET-APPR-LEVY-EMP
!*==================================================================
! Procedure     : GET-SPP
! Descr         : Get value of SPP Rebate
!
!*==================================================================

begin-procedure GET-SPP

   let $ProcedureName      = 'GET-SPP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SPP_VAL=0

begin-select

sum(CALC_RSLT_VAL) &SPPA_VAL 
sum(CALC_ADJ_VAL) &SPPA1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SPPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

begin-select

sum(CALC_RSLT_VAL) &SPPB_VAL 
sum(CALC_ADJ_VAL) &SPPB1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SPPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

 let #SPP_VAL=(&SPPA_VAL+&SPPA1_ADJ_VAL+&SPPB_VAL+&SPPB1_ADJ_VAL)*100*0.92
!SHOW '#SPP_VAL  > ' #SPP_VAL
end-procedure GET-SPP

!*==================================================================
! Procedure     : GET-SPP-EMP
! Descr         : Get value of SPP Rebate per Employee
!
!*==================================================================

begin-procedure GET-SPP-EMP

   let $ProcedureName      = 'GET-SPP-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SPP_VAL_EMP=0
let #SPPA_VAL_EMP=0
let #SPPA1_ADJ_VAL_EMP=0
let #SPPB_VAL_EMP=0
let #SPPB1_ADJ_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &SPPA_VAL_EMP 
sum(CALC_ADJ_VAL) &SPPA1_ADJ_VAL_EMP

   let #SPPA_VAL_EMP=&SPPA_VAL_EMP
   let #SPPA1_ADJ_VAL_EMP=&SPPA1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SPPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(CALC_RSLT_VAL) &SPPB_VAL_EMP 
sum(CALC_ADJ_VAL) &SPPB1_ADJ_VAL_EMP

   let #SPPB_VAL_EMP=&SPPB_VAL_EMP
   let #SPPB1_ADJ_VAL_EMP=&SPPB1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SPPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #SPP_VAL_EMP=(#SPPA_VAL_EMP+#SPPA1_ADJ_VAL_EMP+#SPPB_VAL_EMP+#SPPB1_ADJ_VAL_EMP)*100*0.92
!SHOW '#SPP_VAL_EMP  > ' #SPP_VAL_EMP
end-procedure GET-SPP-EMP


!*==================================================================
! Procedure     : GET-RBT
! Descr         : Get value of NI Rebates and student loans
!
!*==================================================================

begin-procedure GET-RBT

   let $ProcedureName      = 'GET-RBT'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #RBT_VAL=0
let #STL_VAL=0

begin-select

sum(GPGB_PMT_AMT) &RBT_VAL 
from PS_GPGB_PAYMENT 
where RECIPIENT_ID = 'NI_RE' 
and CAL_RUN_ID = $CAL_RUN_ID
and PAY_ENTITY = $PAY_ENTITY

end-select

begin-select

sum(GPGB_PMT_AMT) &STL_VAL 
from PS_GPGB_PAYMENT 
where RECIPIENT_ID = 'STL' 
and CAL_RUN_ID = $CAL_RUN_ID
and PAY_ENTITY = $PAY_ENTITY

end-select

let #STL_VAL=&STL_VAL
let #RBT_VAL=&RBT_VAL
!SHOW '#STL_VAL  > ' #STL_VAL
!SHOW '#RBT_VAL  > ' #RBT_VAL
end-procedure GET-RBT

!*=======================================================================
! Procedure     : GET-RBT-EMP
! Descr         : Get value of NI Rebates and student loans per Employee
!
!*=======================================================================

begin-procedure GET-RBT-EMP

   let $ProcedureName      = 'GET-RBT-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #RBT_VAL_EMP=0
let #STL_VAL_EMP=0
let #RBT1_VAL_EMP=0
let #STL1_VAL_EMP=0

begin-select

sum(GPGB_PMT_AMT) &RBT_VAL_EMP 

   let #RBT1_VAL_EMP=&RBT_VAL_EMP

from PS_GPGB_PAYMENT 
where RECIPIENT_ID = 'NI_RE' 
and CAL_RUN_ID = $CAL_RUN_ID
and PAY_ENTITY = $PAY_ENTITY
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(GPGB_PMT_AMT) &STL_VAL_EMP 

   let #STL1_VAL_EMP=&STL_VAL_EMP

from PS_GPGB_PAYMENT 
where RECIPIENT_ID = 'STL' 
and CAL_RUN_ID = $CAL_RUN_ID
and PAY_ENTITY = $PAY_ENTITY
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #STL_VAL_EMP=#STL1_VAL_EMP
let #RBT_VAL_EMP=#RBT1_VAL_EMP
!SHOW '#STL_VAL_EMP  > ' #STL_VAL_EMP
!SHOW '#RBT_VAL_EMP  > ' #RBT_VAL_EMP
end-procedure GET-RBT-EMP


!*==================================================================
! Procedure     : GET-ASPP
! Descr         : Get value of ASPP Rebate
!
!*==================================================================

begin-procedure GET-ASPP

   let $ProcedureName      = 'GET-ASPP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #ASPP_VAL=0

begin-select

sum(CALC_RSLT_VAL) &ASPPA_VAL 
sum(CALC_ADJ_VAL) &ASPPA1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ASPPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

begin-select

sum(CALC_RSLT_VAL) &ASPPB_VAL 
sum(CALC_ADJ_VAL) &ASPPB1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ASPPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

 let #ASPP_VAL=(&ASPPA_VAL+&ASPPA1_ADJ_VAL+&ASPPB_VAL+&ASPPB1_ADJ_VAL)*100*0.92
!SHOW '#ASPP_VAL  > ' #ASPP_VAL
end-procedure GET-ASPP

!*==================================================================
! Procedure     : GET-ASPP-EMP
! Descr         : Get value of ASPP Rebate per Employee
!
!*==================================================================

begin-procedure GET-ASPP-EMP

   let $ProcedureName      = 'GET-ASPP-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #ASPP_VAL_EMP=0
let #ASPPA_VAL_EMP=0
let #ASPPA1_ADJ_VAL_EMP=0
let #ASPPB_VAL_EMP=0
let #ASPPB1_ADJ_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &ASPPA_VAL_EMP 
sum(CALC_ADJ_VAL) &ASPPA1_ADJ_VAL_EMP

   let #ASPPA_VAL_EMP=&ASPPA_VAL_EMP
   let #ASPPA1_ADJ_VAL_EMP=&ASPPA1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ASPPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(CALC_RSLT_VAL) &ASPPB_VAL_EMP 
sum(CALC_ADJ_VAL) &ASPPB1_ADJ_VAL_EMP

   let #ASPPB_VAL_EMP=&ASPPB_VAL_EMP
   let #ASPPB1_ADJ_VAL_EMP=&ASPPB1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'ASPPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #ASPP_VAL_EMP=(#ASPPA_VAL_EMP+#ASPPA1_ADJ_VAL_EMP+#ASPPB_VAL_EMP+#ASPPB1_ADJ_VAL_EMP)*100*0.92
!SHOW '#ASPP_VAL_EMP  > ' #ASPP_VAL_EMP
end-procedure GET-ASPP-EMP

!*==================================================================
!*==================================================================
! Procedure     : GET-SHPP
! Descr         : Get value of SHPP Rebate
!
!*==================================================================

begin-procedure GET-SHPP

   let $ProcedureName      = 'GET-SHPP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SHPP_VAL=0

begin-select

sum(CALC_RSLT_VAL) &SHPPA_VAL 
sum(CALC_ADJ_VAL) &SHPPA1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SHPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

begin-select

sum(CALC_RSLT_VAL) &SHPPB_VAL 
sum(CALC_ADJ_VAL) &SHPPB1_ADJ_VAL
from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SHPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)

end-select

 let #SHPP_VAL=(&SHPPA_VAL+&SHPPA1_ADJ_VAL+&SHPPB_VAL+&SHPPB1_ADJ_VAL)*100*0.92
!SHOW '#SHPP_VAL  > ' #SHPP_VAL
end-procedure GET-SHPP

!*==================================================================
! Procedure     : GET-SHPP-EMP
! Descr         : Get value of SHPP Rebate per Employee
!
!*==================================================================

begin-procedure GET-SHPP-EMP

   let $ProcedureName      = 'GET-SHPP-EMP'
   !SHOW 'PROCEDURE-> '$ProcedureName 

let #SHPP_VAL_EMP=0
let #SHPPA_VAL_EMP=0
let #SHPA1_ADJ_VAL_EMP=0
let #SHPPB_VAL_EMP=0
let #SHPPB1_ADJ_VAL_EMP=0

begin-select

sum(CALC_RSLT_VAL) &SHPPA_VAL_EMP 
sum(CALC_ADJ_VAL) &SHPPA1_ADJ_VAL_EMP

   let #SHPPA_VAL_EMP=&SHPPA_VAL_EMP
   let #SHPPA1_ADJ_VAL_EMP=&SHPPA1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SHPA ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID =$CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

begin-select

sum(CALC_RSLT_VAL) &SHPPB_VAL_EMP 
sum(CALC_ADJ_VAL) &SHPPB1_ADJ_VAL_EMP

   let #SHPPB_VAL_EMP=&SHPPB_VAL_EMP
   let #SHPPB1_ADJ_VAL_EMP=&SHPPB1_ADJ_VAL_EMP

from PS_GP_RSLT_ERN_DED 
where PIN_NUM=(select PIN_NUM from PS_GP_PIN WHERE PIN_NM = 'SHPB ER PAY') 
and CAL_RUN_ID = $CAL_RUN_ID AND ORIG_CAL_RUN_ID = $CAL_RUN_ID
AND EXISTS (SELECT 1 FROM PS_GP_PYGRP PY WHERE PY.GP_PAYGROUP = PS_GP_RSLT_ERN_DED.GP_PAYGROUP AND PY.PAY_ENTITY = $PAY_ENTITY)
and EMPLID = $Prev_emplid
and EMPL_RCD = #Prev_emplrcd

end-select

let #SHPP_VAL_EMP=(#SHPPA_VAL_EMP+#SHPPA1_ADJ_VAL_EMP+#SHPPB_VAL_EMP+#SHPPB1_ADJ_VAL_EMP)*100*0.92
!SHOW '#SHP_VAL_EMP  > ' #SHPP_VAL_EMP
end-procedure GET-SHPP-EMP



!*==================================================================
! Procedure     : GET-SUB_REF
! Descr         : Get sub-reference code assigned to the CAL_RUN_ID
!
!*==================================================================

begin-procedure GET-SUB_REF

let $ProcedureName      = 'GET-SUB_REF'
!SHOW 'PROCEDURE-> '$ProcedureName 

begin-select

GPGB_SUB_REF_CD &sub_ref_code 
from PS_GPGB_CAL_SUBREF
where EMPLID = $Prev_emplid
and CAL_RUN_ID = $CAL_RUN_ID
and GPGB_DEST_ACCT_NBR = $PREV_DEST_ACCT_NBR
and GPGB_ORIG_ACCT_NBR = $PREV_ORIG_ACCT_NBR

end-select

let $fill = &sub_ref_code 

!SHOW '$sub_ref_code  > ' &sub_ref_code 
!SHOW '$fill  > ' $fill

end-procedure GET-SUB_REF

!====================================================================
!*==================================================================
! Procedure     : SELECT-PAYMENT
! Descr         : 
!
!*==================================================================

begin-procedure SELECT-PAYMENT

   let $ProcedureName      = 'SELECT-PAYMENT'
   !SHOW 'PROCEDURE->' $ProcedureName
              
   let $Prev_Dest_Acctname = ' '
   let $Prev_Dest_SortCode = ' '
   let $Prev_Dest_Acct_Nbr = ' '
   let $Prev_Desc=' ' 
   let $gotemp = ' '   
   let $FinalPayment = ' '
    
Begin-select

!AB.LAST_NAME
!AB.FIRST_NAME
!   let $INIT1=upper(&AB.FIRST_NAME)
!   let $INIT1=substr($INIT1,1,1)
!AB.MIDDLE_NAME
!   let $INIT2=upper(&AB.MIDDLE_NAME)
!   let $INIT2=substr($INIT2,1,1)

A.EMPLID                 
A.EMPL_RCD 
A.PMT_STATUS

!Destination
A.GPGB_DEST_SORTCODE
A.GPGB_DEST_ACCT_NBR
A.GPGB_DEST_ACCTNAME
A.ROLL_NUMBER
A.ROLL_NAME

!Originator
A.GPGB_ORIG_SORTCODE
A.GPGB_ORIG_ACCT_NBR
A.GPGB_ORIG_ACCTNAME

!Instance
A.INSTANCE
   let #INSTANCE = &A.INSTANCE

!Amount
A.GPGB_PMT_AMT

!Payment Type
A.PMT_TYPE
   let $PMT_TYPE = &A.PMT_TYPE   
A.RECIPIENT_ID
   let $RECIPIENT_ID = rtrim(&A.RECIPIENT_ID,' ')
A.DESCR 
   let $DESCR=&A.DESCR

!RECORD DESTINATION ................................
   let $GPGB_DEST_SORTCODE = rtrim(&A.GPGB_DEST_SORTCODE,' ')
   let $GPGB_DEST_ACCT_NBR = rtrim(&A.GPGB_DEST_ACCT_NBR,' ')
   let $GPGB_DEST_ACCTNAME = rtrim(&A.GPGB_DEST_ACCTNAME,' ')
   let $ROLL_NUMBER = rtrim(&A.ROLL_NUMBER,' ')
   if $PMT_TYPE = '01'
      if isblank ($ROLL_NUMBER)  
         let $GPGB_DEST_ACCTNAME = rtrim(&A.GPGB_DEST_ACCTNAME,' ')
      else
         let $GPGB_DEST_ACCTNAME = rtrim(&A.ROLL_NAME,' ')
      end-if
   end-if
!RECORD ORIGINATOR..................................
   let $GPGB_ORIG_SORTCODE = rtrim(&A.GPGB_ORIG_SORTCODE,' ')
   let $GPGB_ORIG_ACCT_NBR = rtrim(&A.GPGB_ORIG_ACCT_NBR,' ')
   let $GPGB_ORIG_ACCTNAME = rtrim(&A.GPGB_ORIG_ACCTNAME,' ')

!RECORD AMOUNT......................................
   let #GPGB_PMT_AMT       = &A.GPGB_PMT_AMT

   if &A.GPGB_PMT_AMT <= 0
   
      let $EMPLID = RTRIM(&A.EMPLID,' ')
      let $EMPL_RCD = &A.EMPL_RCD
      let $RECIPIENT_ID = RTRIM(&A.RECIPIENT_ID,' ') 
            
      let $AMOUNT = &A.GPGB_PMT_AMT/100

      if $RECIPIENT_ID <> ''
         Evaluate $RECIPIENT_ID
            When='PAYE'
            When='NI'
            When='NI_RE'
               !Allow for Tax and NI rebates and negative NI rebates
               let $gotemp = 'Y'
               DO SORT-PAYMENTS
               break
            When-Other 
               show ' '
               show 'Amount not included in BACS file for Recipient: ' $RECIPIENT_ID
               show 'Amount: '$AMOUNT edit 999,999.99
               show ' '
               break
         End-Evaluate
      else
        ! Moved Log File entry for Negative to Procedure WRITE-PAYMENT-EMP for Corrective Retro Processing 09/06
         if $EMPLID <> ''
            let $gotemp ='Y'
            DO SORT-PAYMENTS
         end-if
      end-if  

   else 

      let $gotemp = 'Y'

      DO SORT-PAYMENTS

   end-if

FROM    PS_GPGB_PAYMENT A, PS_PERS_DATA_EFFDT B
!, PS_PERSON_NAME AB
WHERE   A.CAL_RUN_ID  = $CAL_RUN_ID
   AND A.PAY_ENTITY   = $PAY_ENTITY
   AND A.PAYMENT_MTHD = 'T'
!   AND A.GPGB_PMT_AMT > 0
   AND A.EMPLID = B.EMPLID
!   AND B.EMPLID = AB.EMPLID 
   AND B.EFFDT = (
   SELECT MAX(C.EFFDT)
   FROM PS_PERS_DATA_EFFDT C
   WHERE B.EMPLID = C.EMPLID
   AND C.EFFDT <= $AsOfToday)
ORDER BY A.PMT_TYPE, A.GPGB_DEST_ACCTNAME, A.GPGB_DEST_SORTCODE, A.GPGB_DEST_ACCT_NBR, A.RECIPIENT_ID

end-select
   
!Handle final payment
   if $gotemp = 'Y'
      let $FinalPayment = 'Y'
!      let #NO_OF_ROWS_READ = #NO_OF_ROWS_READ - 1 
      DO SORT-PAYMENTS
   END-IF    

end-procedure SELECT-PAYMENT


!*==================================================================
! Procedure     : SORT-PAYMENTS
! Descr         : 
!
!*==================================================================

begin-procedure SORT-PAYMENTS

   let $ProcedureName      = 'SORT-PAYMENTS'
   !SHOW 'PROCEDURE->' $ProcedureName ' Start' 
   !SHOW 'Processing EMPLID->' &A.EMPLID ' Payment Status - ' &A.PMT_STATUS ' ' &A.PMT_TYPE ' ' &A.RECIPIENT_ID 
   
   
If $Prev_Dest_Acctname = $GPGB_DEST_ACCTNAME and $Prev_emplid = &A.EMPLID 
   If $Prev_Dest_Sortcode = $GPGB_DEST_SORTCODE 
      And $Prev_Dest_Acct_Nbr = $GPGB_Dest_Acct_Nbr
      And $PREV_RECIPIENT_ID = $RECIPIENT_ID
!     And ($PMT_TYPE = '02' OR $PMT_TYPE = '03') <<< Commented out for Corrective Retro Processing 09/06
      If $FinalPayment = 'Y'
         do GET-TC-EMP
         do GET-SMP-EMP
         do GET-SAP-EMP
         do GET-SPP-EMP
         do GET-RBT-EMP
         do GET-ASPP-EMP
         do GET-SHPP-EMP
         do GET-APPR-LEVY-EMP
         DO WRITE-PAYMENT
      Else
         let #TOT_PMT_AMT = #TOT_PMT_AMT + #GPGB_PMT_AMT
      End-If

   Else
       do GET-TC-EMP
       do GET-SMP-EMP
       do GET-SAP-EMP
       do GET-SPP-EMP
       do GET-RBT-EMP
       do GET-ASPP-EMP
       do GET-SHPP-EMP
       do GET-APPR-LEVY-EMP
      Do WRITE-PAYMENT
      let $Prev_emplid        = &A.EMPLID
      let #Prev_emplrcd       = &A.EMPL_RCD
      let $Prev_Dest_Acctname = $GPGB_DEST_ACCTNAME
      let $Prev_Dest_Sortcode = $GPGB_DEST_SORTCODE
      let $Prev_Dest_Acct_Nbr = $GPGB_Dest_Acct_Nbr
      let $Prev_Orig_sortcode = $GPGB_ORIG_SORTCODE
      let $Prev_Orig_Acct_NBR = $GPGB_ORIG_ACCT_NBR
      let #PREV_PMT_AMT       = #GPGB_PMT_AMT
      let $Prev_Orig_Acctname = $GPGB_ORIG_ACCTNAME
      let $Prev_Roll_Number   = $ROLL_NUMBER
      let #Prev_Instance      = #INSTANCE
      let #TOT_PMT_AMT        = #PREV_PMT_AMT 
      let $PREV_RECIPIENT_ID  = $RECIPIENT_ID
      let $Prev_Pmt_Type      = $PMT_TYPE
      let $Prev_Desc          = $DESCR
   End-If

Else
   if #NO_OF_ROWS_READ > 0
      do GET-TC-EMP
      do GET-SMP-EMP
      do GET-SAP-EMP
      do GET-SPP-EMP
      do GET-RBT-EMP
      do GET-ASPP-EMP
      do GET-SHPP-EMP
      do GET-APPR-LEVY-EMP
      Do WRITE-PAYMENT   
   End-If

   let $Prev_emplid        = &A.EMPLID
   let #Prev_emplrcd       = &A.EMPL_RCD
   let $Prev_Dest_Acctname = $GPGB_DEST_ACCTNAME
   let $Prev_Dest_Sortcode = $GPGB_DEST_SORTCODE
   let $Prev_Dest_Acct_Nbr = $GPGB_Dest_Acct_Nbr
   let $Prev_Orig_sortcode = $GPGB_ORIG_SORTCODE
   let $Prev_Orig_Acct_NBR = $GPGB_ORIG_ACCT_NBR
   let #prev_pmt_amt       = #GPGB_PMT_AMT
   let $Prev_Orig_Acctname = $GPGB_ORIG_ACCTNAME
   let $Prev_Roll_Number   = $ROLL_NUMBER
   let #Prev_Instance      = #INSTANCE
   let #TOT_PMT_AMT        = #PREV_PMT_AMT 
   let $PREV_RECIPIENT_ID  = $RECIPIENT_ID
   let $Prev_Pmt_Type      = $PMT_TYPE
   let $Prev_Desc          = $DESCR
End-If

Evaluate $PREV_RECIPIENT_ID

   When='PAYE'
   When='NI'
      add 1 to #PAYE_ROWS_READ
      break
   When-Other 
      If $Prev_Pmt_Type = '02' OR $Prev_Pmt_Type = '03'
         If $FinalPayment <> 'Y'
            add 1 to #OTH_ROWS_READ
         End-If
      Else
         If $FinalPayment <> 'Y'
            add 1 to #EMP_ROWS_READ
         End-If
      End-if
      Break
End-Evaluate

If $FinalPayment <> 'Y'
   Add 1 to #NO_OF_ROWS_READ
End-If

!SHOW '#PAYE_ROWS_READ  > ' #PAYE_ROWS_READ
!SHOW '#OTH_ROWS_READ   > ' #OTH_ROWS_READ
!SHOW '#EMP_ROWS_READ   > ' #EMP_ROWS_READ
!SHOW '#NO_OF_ROWS_READ > ' #NO_OF_ROWS_READ
   

end-procedure SORT-PAYMENTS


!*==================================================================
! Procedure     : WRITE-PAYMENT
! Descr         : 
!
!*==================================================================

begin-procedure WRITE-PAYMENT

  do GET-SUB_REF

Evaluate $PREV_RECIPIENT_ID 
   When='PAYE'
   When='NI'
      DO WRITE-PAYMENT-PAYE
      Break
   When='NI_RE'
   When='STL'
!     Don't do anything
      Break
   When-other
      IF $Prev_Pmt_Type = '02' OR $Prev_Pmt_Type = '03'
         DO WRITE-PAYMENT-OTH
      ELSE
         DO WRITE-PAYMENT-EMP
      END-IF
      Break
End-Evaluate

END-PROCEDURE WRITE-PAYMENT


!*==================================================================
! Procedure     : WRITE-PAYMENT-PAYE
! Descr         : 
! 
!*==================================================================

begin-procedure WRITE-PAYMENT-PAYE

   let $ProcedureName      = 'WRITE-PAYMENT-PAYE'
   !SHOW 'PROCEDURE->' $ProcedureName
   

   if $PREV_RECIPIENT_ID = 'PAYE'
      let #PRE_TCSL_PAYE_AMT = #PRE_TCSL_PAYE_AMT + #TOT_PMT_AMT
      let #TOT_PMT_AMT       = (#TOT_PMT_AMT-#TC_VAL_EMP+#STL_VAL_EMP)
      !let #PAYE_AMT          = #PAYE_AMT+#TOT_PMT_AMT
      Add 1 to #PAYE_ROWS
   end-if

   if $PREV_RECIPIENT_ID = 'NI'
      let #PRE_RBTSMP_NI_AMT = #PRE_RBTSMP_NI_AMT + #TOT_PMT_AMT
      let #TOT_PMT_AMT       = (#TOT_PMT_AMT-#RBT_VAL_EMP-#SMP_VAL_EMP-#SAP_VAL_EMP-#SPP_VAL_EMP-#ASPP_VAL_EMP-#SHPP_VAL_EMP)
      !let #NI_AMT            = #NI_AMT+#TOT_PMT_AMT
      Add 1 to #NI_ROWS      
   end-if

   let $PMT_AMT = TO_CHAR(#TOT_PMT_AMT)
   move '00000000009' to $mask
   move $PMT_AMT to $PMT_AMT :$mask

   let $CODE_0  = '0'
   let $CODE_99 = '99'
   !let $fill    = ' '

   write 1 from
   $PREV_DEST_SORTCODE:6    !- Destination Sort Code
   $PREV_DEST_ACCT_NBR:8    !- Destination Account Number
   $CODE_0:1                !- Destination Account Type = 0
   $CODE_99:2               !- Transaction Code = 99
   $PREV_ORIG_SORTCODE:6    !- Originating Sort Code
   $PREV_ORIG_ACCT_NBR:8    !- Originating Account Number
   $fill:4                  !- Filler - Free Format
   $PMT_AMT                 !- Amount in Pence
   $PREV_ORIG_ACCTNAME:18   !- Originating Account Name
   $PREV_ROLL_NUMBER:18     !- User's Reference
   $PREV_DEST_ACCTNAME:18   !- Destination Account Name

   Add 1 to #Rows_Written

   let #TOT_PMT_AMT = 0

end-procedure WRITE-PAYMENT-PAYE


!*==================================================================
! Procedure     : WRITE-PAYMENT-OTH
! Descr         : 
! 
!*==================================================================

begin-procedure WRITE-PAYMENT-OTH

   let $ProcedureName      = 'WRITE-PAYMENT-OTH'
   !SHOW 'PROCEDURE->' $ProcedureName

   let $PMT_AMT = TO_CHAR(#TOT_PMT_AMT)
   move '00000000009'  to $mask
   move $PMT_AMT to $PMT_AMT :$mask

   let $CODE_0   = '0'
   let $CODE_99  = '99'
   !let $fill     = ' '

   write 2 from
   $PREV_DEST_SORTCODE:6     !- Destination Sort Code
   $PREV_DEST_ACCT_NBR:8     !- Destination Account Number
   $CODE_0:1                 !- Destination Account Type = 0
   $CODE_99:2                !- Transaction Code = 99
   $PREV_ORIG_SORTCODE:6     !- Originating Sort Code
   $PREV_ORIG_ACCT_NBR:8     !- Originating Account Number
   $fill:4                   !- Filler - Free Format
   $PMT_AMT                  !- Amount in Pence
   $PREV_ORIG_ACCTNAME:18    !- Originating Account Name
   $Prev_Desc:30             !- Court Order Reference Number
   $PREV_ROLL_NUMBER:18      !- User's Reference
   $PREV_DEST_ACCTNAME:18    !- Destination Account Name

   Add 1 to #Rows_Written
   Add 1 to #OTH_ROWS
   let #OTH_AMT     = #TOT_PMT_AMT/100
   let #OTH_TOTAL   = #OTH_TOTAL+#OTH_AMT
   let #TOT_PMT_AMT = 0

end-procedure WRITE-PAYMENT-OTH


!*==================================================================
! Procedure     : WRITE-PAYMENT-EMP
! Descr         : 
! 
!*==================================================================

begin-procedure WRITE-PAYMENT-EMP

   let $ProcedureName = 'WRITE-PAYMENT-EMP'
   !SHOW 'PROCEDURE->' $ProcedureName

if #TOT_PMT_AMT > 0  

   let $PMT_AMT = TO_CHAR(#TOT_PMT_AMT)
   move '00000000009'  to $mask
   move $PMT_AMT to $PMT_AMT :$mask

   let $CODE_0   = '0'
   let $CODE_99  = '99'
   !let $fill     = ' '

   write 3 from
   $PREV_DEST_SORTCODE:6     !- Destination Sort Code
   $PREV_DEST_ACCT_NBR:8     !- Destination Account Number
   $CODE_0:1                 !- Destination Account Type = 0
   $CODE_99:2                !- Transaction Code = 99
   $PREV_ORIG_SORTCODE:6     !- Originating Sort Code
   $PREV_ORIG_ACCT_NBR:8     !- Originating Account Number
   $fill:4                   !- Filler - Free Format
   $PMT_AMT                  !- Amount in Pence
   $PREV_ORIG_ACCTNAME:18    !- Originating Account Name
   $PREV_ROLL_NUMBER:18      !- User's Reference
   $PREV_DEST_ACCTNAME:18    !- Destination Account Name

   write 4 from
   $Prev_emplid:11           !- EMPLID for reconcilliation
   $PREV_DEST_SORTCODE:6     !- Destination Sort Code
   $PREV_DEST_ACCT_NBR:8     !- Destination Account Number
   $CODE_0:1                 !- Destination Account Type = 0
   $CODE_99:2                !- Transaction Code = 99
   $PREV_ORIG_SORTCODE:6     !- Originating Sort Code
   $PREV_ORIG_ACCT_NBR:8     !- Originating Account Number
   $fill:4                   !- Filler - Free Format
   $PMT_AMT                  !- Amount in Pence
   $PREV_ORIG_ACCTNAME:18    !- Originating Account Name
   $PREV_ROLL_NUMBER:18      !- User's Reference
   $PREV_DEST_ACCTNAME:18    !- Destination Account Name

   Add 1 to #Rows_Written
   Add 1 to #EMP_ROWS
   let #EMP_AMT     = #TOT_PMT_AMT/100
   let #EMP_TOTAL   = #EMP_TOTAL+#EMP_AMT
   let #TOT_PMT_AMT = 0

else
!  Added new criteria to handle negative values for Corrective Retro processing
   let $EMPL_RCD = &A.EMPL_RCD            
   let $NEG_AMT = TO_CHAR(#TOT_PMT_AMT/100)
   
   show ' '
   show 'Amount not included in BACS file for Employee: ' $Prev_emplid
   show 'Employee Record: ' $EMPL_RCD edit 999
   show 'Amount: '$NEG_AMT edit 999,999.99
   show ' '

end-if

end-procedure WRITE-PAYMENT-EMP


!*==================================================================
! Procedure     : UPDATE-GPGB-PAYMENT
! Descr         : 
! 
!*==================================================================

begin-procedure UPDATE-GPGB-PAYMENT

   let $ProcedureName      = 'UPDATE-GPGB-PAYMENT'
   !SHOW 'PROCEDURE->' $ProcedureName

   let #APPR_NET          = #APPR_VAL + #APPR_OFF
   let #PAYE_AMT = (#PRE_TCSL_PAYE_AMT - #TC_VAL + #STL_VAL)
   let #NI_AMT   = (#PRE_RBTSMP_NI_AMT - #RBT_VAL - #SMP_VAL - #SAP_VAL - #SPP_VAL - #ASPP_VAL -#SHPP_VAL )
   let #PRE_TCSL_PAYE_AMT = #PRE_TCSL_PAYE_AMT/100
   let #STL_VAL           = #STL_VAL/100
   let #TC_VAL            = #TC_VAL/100 
   let #PAYE_AMT          = #PAYE_AMT/100
   let #PAYE_AMT          = #PAYE_AMT + #APPR_NET
   let #NI_AMT            = #NI_AMT/100
   let #PRE_RBTSMP_NI_AMT = #PRE_RBTSMP_NI_AMT/100
   let #RBT_VAL           = #RBT_VAL/100
   let #SMP_VAL           = #SMP_VAL/100
   let #SAP_VAL           = #SAP_VAL/100
   let #SPP_VAL           = #SPP_VAL/100
   let #ASPP_VAL          = #ASPP_VAL/100
   let #SHPP_VAL          = #SHPP_VAL/100
   
   SHOW ' '
   SHOW ' '
   SHOW 'TOTALS'
   SHOW '------ '
   SHOW 'Employee (Net Pay) rows read           ->'#EMP_ROWS_READ  edit 99999
   SHOW 'Tax and National Insurance rows read   ->'#PAYE_ROWS_READ edit 99999
   SHOW 'Other Third Party Payment rows read    ->'#OTH_ROWS_READ  edit 99999
   SHOW ' '
   SHOW 'Employee (Net Pay) rows written        ->'#EMP_ROWS  edit 99999
   SHOW 'Tax rows written                       ->'#PAYE_ROWS edit 99999
   SHOW 'National Insurance rows written        ->'#NI_ROWS   edit 99999
   SHOW 'Other Third Party Payment rows written ->'#OTH_ROWS  edit 99999
   SHOW ' '
   SHOW 'Total Tax before additions/deductions  ->'#PRE_TCSL_PAYE_AMT edit 999,999,999.99
   SHOW 'Value of student loans collected (+)   ->'#STL_VAL           edit 999,999,999.99
   SHOW 'Apprenticeship Levy Due (+)            ->'#APPR_VAL          edit 999,999,999.99
   SHOW 'Apprenticeship Levy Allowance offset(-)->'#APPR_OFF          edit 999,999,999.99
   SHOW 'Value of tax credits (-)               ->'#TC_VAL            edit 999,999,999.99
   SHOW 'Total Tax                              ->'#PAYE_AMT          edit 999,999,999.99
   SHOW ' '
   SHOW 'Total NI before rebates                ->'#PRE_RBTSMP_NI_AMT edit 999,999,999.99
   SHOW 'NI rebates (-)                         ->'#RBT_VAL           edit 999,999,999.99
   SHOW 'SMP @92%   (-)                         ->'#SMP_VAL           edit 999,999,999.99
   SHOW 'SAP @92%   (-)                         ->'#SAP_VAL           edit 999,999,999.99
   SHOW 'SPP @92%   (-)                         ->'#SPP_VAL           edit 999,999,999.99
   SHOW 'ASPP @92%  (-)                         ->'#ASPP_VAL          edit 999,999,999.99
   SHOW 'SHPP @92%  (-)                         ->'#SHPP_VAL          edit 999,999,999.99
   SHOW 'Total NI after rebates                 ->'#NI_AMT            edit 999,999,999.99
   SHOW ' '
   SHOW ' '
   SHOW 'Total Net pay                          ->'#EMP_TOTAL edit 999,999,999.99 
   SHOW 'Total Other Payments                   ->'#OTH_TOTAL edit 999,999,999.99
   SHOW ' '

begin-SQL

UPDATE PS_GPGB_PAYMENT
   SET PMT_STATUS = 'T'

where  CAL_RUN_ID   = $CAL_RUN_ID
   AND PAY_ENTITY   = $PAY_ENTITY
   AND PAYMENT_MTHD = 'T'
   AND PMT_STATUS   = 'F'
   AND GPGB_PMT_AMT > 0

end-SQL

end-procedure UPDATE-GPGB-PAYMENT


!***********************************************************************
!End of the SQR statements
!***********************************************************************

#include 'stdapi.sqc'    !Update Process Request API
#include 'prcsapi.sqc'   !Update Process Request API
#include 'prcsdef.sqc'   !Update Process Request variable declaration
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#Include 'readxlat.sqc'  !Read Translates Table

!***********************************************************************

