!***********************************************************************
! GPJPIH01 :Employee Municipality Audit                                *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2013/01/18:03:46:54                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!                                                                      *
!***********************************************************************
! This report is used to determine if employees have any of the        *
! following inappropriate postal values.                               *
!   a. Blank postal code in Personal Data                              *
!   b. Personal Data postal code is not in POSTAL_TBL_JPN.             *
!   c. POSTAL_TBL_JPN has blank MUNICIPAL_CD_JPN for employee's        *
!      POSTAL code.                                                    *
!   d. POSTAL_TBL_JPN.MUNICIPAL_CD_JPN is not in 'TAX COLLECTOR        *
!      TABLE/MUNICIPALITY' for the municipal code listed.              *
!***********************************************************************
Begin-setup
#define  REPORTID  'GPJPIH01'
#include 'setenv.sqc'      !Set environment
#include 'ptset02.sqc'     !Init printer and page sizeLandscape
end-setup

begin-Report
    do Init-DateTime
    do Init-Number
    do Get-Current-DateTime
    do Define-Prcs-Vars
    do Init-Report
    do Process-Main
    do Reset
    do Successful-EOJ
end-Report
!
!***********************************************************************
begin-heading 12

  #Include 'stdhdgtr.sqc'

  print '*'                  (+1,  2, 15)  FILL
  print $select_condit_lbl   ( 0, 18, 20)
  print '*'                  ( 0, 39,141) FILL

  print $tax_estab_lbl       (+1,  2, 12)
  print $gpjp_tax_estab      ( 0, 14, 15)
  print $year_code_lbl       ( 0, 36, 11)
  print $year_code           ( 0, 48,  4)

  print '*'                  (+1,  2,178) FILL

  print $company_id_lbl      (+2,  2, 12)
  print $Company             ( 0, 15,  3)
  print $CompanyName         ( 0, 21, 30)

  print $employee_rcd_lbl    (+2, 15,  8)
  print $department_id1_lbl  ( 0, 77, 10)
  print $municipal_code1_lbl ( 0,103,  9)

  print $employee_id_lbl     (+1,  2, 11)
  print $employee_rcd2_lbl   ( 0, 15,  8)
  print $employee_name_lbl   ( 0, 25, 13)
  print $department_id2_lbl  ( 0, 77, 10)
  print $postal_code_lbl     ( 0, 89, 11)
  print $municipal_code2_lbl ( 0,103,  8)
  print $error_message_lbl   ( 0,114, 16)

  print '-'                  (+1,  2,178) FILL

end-heading
!*************************************************************************!
! Init-Report
!*************************************************************************!
begin-procedure Init-Report

!***********************************************************************
! Translations procedures & Strings Table retrievals.                  *
!***********************************************************************

  move {REPORTID} to $ReportID
  let #Error_Total = 0
  do Get-Run-Control-Parms
  do Get-Run-Cntl-Acq

  do Init_Report_Translation ('GPJPIH01', $curr_language_cd)
  do Append_Report_Translation ('GPJPIH01')

  do Get_Field_Information ('GPJPIH01' ,'GPJPIH01_TITLE'    ,$GPJPIH01_Title          ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'SELECT_CONDITIONS' ,$select_condit_lbl       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'TAX_ESTAB'         ,$tax_estab_lbl           ,#DW)
  do Get_Field_Information ('GPJPIH01', 'YEAR_CODE'         ,$year_code_lbl           ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'COPANY_ID'         ,$company_id_lbl          ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'EMPLOYEE_ID'       ,$employee_id_lbl         ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'EMPLOYEE_RCD'      ,$employee_rcd_lbl        ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'EMPLOYEE_RCD2'     ,$employee_rcd2_lbl       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'EMPLOYEE_NAME'     ,$employee_name_lbl       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'DEPARTMENT_ID1'    ,$department_id1_lbl      ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'DEPARTMENT_ID2'    ,$department_id2_lbl      ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'POSTAL_CODE'       ,$postal_code_lbl         ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'MUNICIPAL_CODE1'   ,$municipal_code1_lbl     ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'MUNICIPAL_CODE2'   ,$municipal_code2_lbl     ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'ERROR_MESSAGE'     ,$error_message_lbl       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'UNREG_POSTAL_LEGL' ,$unreg_postal_legl_err   ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'UNREG_POSTAL_HOME' ,$unreg_postal_home_err   ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'NO_EXIST_POSTAL_LE',$no_exist_postal_legl_err,#DW)
  do Get_Field_Information ('GPJPIH01' ,'NO_EXIST_POSTAL_HO',$no_exist_postal_home_err,#DW)
  do Get_Field_Information ('GPJPIH01' ,'UNREG_MUNICIPAL'   ,$unreg_municipal_err     ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'NO_EXIST_MUNICIPAL',$no_exist_municipal_err  ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'NO_JOB_RECORD'     ,$no_Job_record_err       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'TOTAL_ERROR_COUNT' ,$total_error_count       ,#DW)
  do Get_Field_Information ('GPJPIH01' ,'NO_EXIST_SAL_PAYER' ,$no_exist_sal_payer_err       ,#DW)

  move $GPJPIH01_Title to $ReportTitle

end-procedure Init-Report
!*************************************************************************!
! Process-Main
!*************************************************************************!
begin-procedure Process-Main

  let $Empl_ID  = ''
  let $skip_flg = ''

begin-SELECT

A.EMPLID,
J.PAY_SYSTEM_FLG,
J.EMPL_RCD,
J.COMPANY,
J.DEPTID

  let $Empl_ID = rtrim(&A.EMPLID,' ')
  let #Empl_rcd = &J.EMPL_RCD
  let $Company  = rtrim(&J.COMPANY,' ')
  if $Company <> ''
    do Get-Company-Data
  end-if
  let $Deptid   = rtrim(&J.DEPTID,' ')

  if &J.PAY_SYSTEM_FLG <> 'GP'
    do Name-Get
    move $no_Job_record_err to $Error_Message
    do Err_Print
    let $skip_flg = '1'
  end-if

  if $skip_flg = ''
    do Name-Get
    do Sub-Query1
  else
    let $skip_flg = ''
  end-if

FROM
PS_GPJP_IT_PYE_TAX A,
PS_JOB J

WHERE
A.GPJP_TAX_ESTAB = $gpjp_tax_estab
AND A.EMPLID = J.EMPLID
AND A.EFFDT = (SELECT MAX(B.EFFDT)
               FROM PS_GPJP_IT_PYE_TAX B
               WHERE A.EMPLID = B.EMPLID
               AND A.EMPL_RCD = B.EMPL_RCD)
AND J.HR_STATUS = 'A'
AND J.EMPL_RCD = A.EMPL_RCD
AND J.EFFDT = (
        SELECT MAX(EFFDT)
        FROM PS_JOB
        WHERE EMPLID = J.EMPLID
        AND EMPL_RCD = J.EMPL_RCD
        AND EFFDT <= $check_date)
AND J.EFFSEQ = (SELECT MAX(EFFSEQ)
        FROM PS_JOB
        WHERE EMPLID = J.EMPLID
        AND EMPL_RCD = J.EMPL_RCD
        AND EFFDT = J.EFFDT)

end-SELECT

  let $Error_Total = to_char(#Error_Total)
  print $total_error_count (+2, 29, 28)
  print $Error_Total       ( 0, 58, 11) edit 999,999,999

end-procedure Process-Main

!*************************************************************************!
! Sub-Query1 : The check of a Postal Code No.1
!*************************************************************************!
begin-procedure Sub-Query1
  let $Postal       = 'X'
  let $Address_type = ''

begin-SELECT
QB1.POSTAL
  let $Postal    = rtrim(&QB1.POSTAL,' ')

FROM
PS_ADDRESSES QB1

WHERE
QB1.EMPLID = $Empl_ID
AND QB1.EFFDT  = ( SELECT MAX(QC1.EFFDT)
                   FROM PS_ADDRESSES QC1
                   WHERE QB1.EMPLID = QC1.EMPLID
                     AND QB1.ADDRESS_TYPE = QC1.ADDRESS_TYPE
                     AND QC1.EFFDT <= $check_date )
AND QB1.ADDRESS_TYPE = 'LEGL'

end-SELECT

  if $Postal = ' '
    move $unreg_postal_legl_err to $Error_Message
    do Err_Print
  else
    if $Postal <> 'X'
      let $Postal    = ''
      let $Address_type = 'LEGL'
      do Sub-Query2
    else
      do Sub-Query1-1
    end-if
  end-if

end-procedure Sub-Query1
!*************************************************************************!
! Sub-Query1-1 : The check of a Postal Code No.2
!*************************************************************************!
begin-procedure Sub-Query1-1

  let $Postal       = ''
  let $Error        = 'N'

begin-SELECT
QB.POSTAL

  let $Error    = 'Y'
  let $Postal    = rtrim(&QB.POSTAL,' ')

FROM
PS_ADDRESSES QB

WHERE
QB.EMPLID = $Empl_ID
AND QB.EFFDT  = (SELECT MAX(QC.EFFDT)
                 FROM PS_ADDRESSES QC
                 WHERE QB.EMPLID = QC.EMPLID
                   AND QB.ADDRESS_TYPE = QC.ADDRESS_TYPE
                   AND QC.EFFDT <= $check_date )
AND QB.ADDRESS_TYPE = 'HOME'
AND QB.POSTAL = ' '

end-SELECT

  if $Error = 'Y'
    move $unreg_postal_home_err to $Error_Message
    do Err_Print
  else
    let $Address_type = 'HOME'
    do Sub-Query2
  end-if

end-procedure Sub-Query1-1
!*************************************************************************!
! Sub-Query2 : Check of whether a Postal Code exists in a Postal Code Table
!*************************************************************************!
begin-procedure Sub-Query2

let $Postal = ''

begin-SELECT
QB2.POSTAL

  let $Postal    = rtrim(&QB2.POSTAL,' ')

FROM
PS_ADDRESSES QB2

WHERE
QB2.EMPLID = $Empl_ID
AND QB2.ADDRESS_TYPE = $Address_type
AND QB2.EFFDT = ( SELECT MAX(QE2.EFFDT)
                  FROM PS_ADDRESSES QE2
                  WHERE QB2.EMPLID = QE2.EMPLID
                    AND QB2.ADDRESS_TYPE = QE2.ADDRESS_TYPE
                    AND QE2.EFFDT <= $check_date )
AND QB2.POSTAL NOT IN ( SELECT QC2.POSTAL
                        FROM PS_POSTAL_TBL_JPN QC2
                        WHERE QB2.POSTAL = QC2.POSTAL )
end-SELECT

  if $Postal <> ''
    if $Address_type = 'LEGL'
      move  $no_exist_postal_legl_err to $Error_Message
    else
      move  $no_exist_postal_home_err to $Error_Message
    end-if
    do Err_Print
  else
    do Sub-Query3
  end-if

end-procedure Sub-Query2
!*************************************************************************!
! Sub-Query3 : The check of a Municipality Code
!*************************************************************************!
begin-procedure Sub-Query3
begin-SELECT
QB3.POSTAL

  let $Postal    = rtrim(&QB3.POSTAL,' ')

FROM
PS_ADDRESSES QB3

WHERE
QB3.EMPLID = $Empl_ID
AND QB3.ADDRESS_TYPE = $Address_type
AND QB3.EFFDT = ( SELECT MAX(A.EFFDT)
                  FROM PS_ADDRESSES A
                  WHERE QB3.EMPLID = A.EMPLID
                    AND QB3.ADDRESS_TYPE = A.ADDRESS_TYPE
                    AND A.EFFDT <= $check_date )
AND EXISTS (SELECT 'X' FROM PS_POSTAL_TBL_JPN P
                   WHERE QB3.POSTAL = P.POSTAL AND
                         P.MUNICIPAL_CD_JPN = ' ' )
end-SELECT

  if $Postal <> ''
    !This check is disabled and is performed by a Query instead
    !move $unreg_municipal_err to $Error_Message
    !do Err_Print
    do Sub-Query5
  else
    do Sub-Query5
  end-if

end-procedure Sub-Query3






!*************************************************************************!
! Sub-Query4 : Check of whether a Tax Establishment exists in a
!              Municipality Code Table
!*************************************************************************!
begin-procedure Sub-Query4

Let $Postal = ''

begin-SELECT

QB4.POSTAL,
QC4.MUNICIPAL_CD_JPN

  let $Postal       = rtrim(&QB4.POSTAL,' ')
  let $Municipality = rtrim(&QC4.MUNICIPAL_CD_JPN,' ')

FROM
PS_ADDRESSES QB4,
PS_POSTAL_TBL_JPN QC4

WHERE
QB4.EMPLID = $Empl_ID
AND QB4.ADDRESS_TYPE = $Address_type
AND QB4.POSTAL = QC4.POSTAL
AND QC4.MUNICIPAL_CD_JPN <> ' '
AND QB4.EFFDT = ( SELECT MAX(A.EFFDT)
                  FROM PS_ADDRESSES A
                  WHERE QB4.EMPLID = A.EMPLID
                    AND QB4.ADDRESS_TYPE = A.ADDRESS_TYPE
                    AND A.EFFDT <= $check_date )
AND QC4.MUNICIPAL_CD_JPN NOT IN ( SELECT QD4.MUNICIPAL_CD_JPN
                                  FROM PS_GPJP_IH_MUNIC2 QD4
                                  WHERE QC4.MUNICIPAL_CD_JPN = QD4.MUNICIPAL_CD_JPN
                                    AND QD4.GPJP_TAX_ESTAB = $gpjp_tax_estab)
end-SELECT

  if $Postal <> ''
    move $no_exist_sal_payer_err to $Error_Message
    do Err_Print   
  end-if

end-procedure Sub-Query4

!*************************************************************************!
! Sub-Query5 : Check of whether a Municipality Code exists in a
!              Municipality Code Table
!*************************************************************************!
begin-procedure Sub-Query5

Let $Postal = ''

begin-SELECT

QB5.POSTAL,
QC5.MUNICIPAL_CD_JPN

  let $Postal       = rtrim(&QB5.POSTAL,' ')
  let $Municipality = rtrim(&QC5.MUNICIPAL_CD_JPN,' ')

FROM
PS_ADDRESSES QB5,
PS_POSTAL_TBL_JPN QC5

WHERE
QB5.EMPLID = $Empl_ID
AND QB5.ADDRESS_TYPE = $Address_type
AND QB5.POSTAL = QC5.POSTAL
AND QC5.MUNICIPAL_CD_JPN <> ' '
AND QB5.EFFDT = ( SELECT MAX(A.EFFDT)
                  FROM PS_ADDRESSES A
                  WHERE QB5.EMPLID = A.EMPLID
                    AND QB5.ADDRESS_TYPE = A.ADDRESS_TYPE
                    AND A.EFFDT <= $check_date )
AND QC5.MUNICIPAL_CD_JPN NOT IN ( SELECT QD5.MUNICIPAL_CD_JPN
                                  FROM PS_GPJP_IH_MUNIC2 QD5
                                  WHERE QC5.MUNICIPAL_CD_JPN = QD5.MUNICIPAL_CD_JPN)
end-SELECT

  if $Postal <> ''
    move $no_exist_municipal_err to $Error_Message
    do Err_Print
  else
    do Sub-Query4
  end-if

end-procedure Sub-Query5

!*************************************************************************!
! Err_Print : Print Error Massage
!*************************************************************************!

begin-procedure Err_Print

  let $Empl_rcd = to_char(#Empl_rcd)

  print $Empl_ID       (+1,  2, 11)
  print $Empl_rcd      ( 0, 17,  3) edit 999
  print $Empl_Name     ( 0, 25, 50)
  print $Deptid        ( 0, 77, 10)
  print $Postal        ( 0, 89, 12)
  print $Municipality  ( 0,104,  6)
  print $Error_Message ( 0,114, 67)

  let $Empl_rcd      = ''
  let $Empl_Name     = ''
  let $Postal        = ''
  let $Municipality  = ''
  let $Error_Message = ''

  Add 1 to #Error_Total

end-procedure Err_Print
!*************************************************************************!
! Get-Run-Cntl-Acq
!*************************************************************************!
begin-procedure Get-Run-Cntl-Acq
begin-SELECT

  let $year_code =''

RN.GPJP_TAX_ESTAB,
RN.YEAR_CODE

  let $gpjp_tax_estab = rtrim(&RN.GPJP_TAX_ESTAB,' ')
  let $year_code      = rtrim(&RN.YEAR_CODE,' ')

FROM
PS_GPJP_RC_IH_AUD RN

WHERE
RN.OPRID       = $prcs_oprid  AND
RN.RUN_CNTL_ID = $prcs_run_cntl_id

end-SELECT

  let $check_date_in = $year_code||'-01-01'


  do Convert-From-DTU-Date($check_date_in, $check_date)

end-procedure Get-Run-Cntl-Acq
!*************************************************************************!
! Name-Get :
!*************************************************************************!
begin-procedure Name-Get
begin-SELECT

NA1.NAME

  let $Empl_Name = rtrim(&NA1.NAME,' ')

FROM
PS_NAMES NA1

WHERE
NA1.EMPLID = $Empl_ID
AND NA1.EFFDT  = ( SELECT MAX(NA2.EFFDT)
                   FROM PS_NAMES NA2
                   WHERE NA1.EMPLID = NA2.EMPLID
                     AND NA1.NAME_TYPE = NA2.NAME_TYPE)
end-SELECT
end-procedure Name-Get
!*************************************************************************!
! SQC Files for called procedures
!*************************************************************************!
#include 'prcsdef.sqc'       !Update Process Request variable declare
#include 'prcsapi.sqc'       !Update Process Request API
#include 'eoj.sqc'           !End of Job procedure
#include 'readxlat.sqc'      !Read Translate Table
#include 'reset.sqc'         !End of Program
#include 'curdttim.sqc'      !Get-Current-DateTime procedure
#include 'datetime.sqc'      !Routines for date and time formatting
#include 'datemath.sqc'      ! Date conversion procedures
#include 'number.sqc'        !Routines to format numbers
#include 'getcodta.sqc'      !Get-Company-Name procedure
#include 'sqrtrans.sqc'      !Translate SQR strings to given language
