!*************************************************************!
!          $Date:  2013/01/17:15:23:07                        !
!       $Release:  HR92                                       !
!      $Revision:  101                                        !
!*************************************************************!
! ************************************************************* !
!                                                               !
!                                                               !
! This software and related documentation are provided under a  !
! license agreement containing restrictions on use and          !
! disclosure and are protected by intellectual property         !
! laws. Except as expressly permitted in your license agreement !
! or allowed by law, you may not use, copy, reproduce,          !
! translate, broadcast, modify, license, transmit, distribute,  !
! exhibit, perform, publish or display any part, in any form or !
! by any means. Reverse engineering, disassembly, or            !
! decompilation of this software, unless required by law for    !
! interoperability, is prohibited.                              !
! The information contained herein is subject to change without !
! notice and is not warranted to be error-free. If you find any !
! errors, please report them to us in writing.                  !
!                                                               !
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.       !
! All Rights Reserved.                                          !
! ************************************************************* !
!****************************************************************************
! SetWorkDayString                                                          *
!****************************************************************************
begin-procedure SetWorkDayString ($BeginDt, $EndDt, $WorkSched, :$WorkDayString)

  let $WorkDayString = ''
  do Date-Difference($BeginDt, $EndDt, #CalDays)
  let #CalDays = #CalDays + 1

  do Convert-to-DTU-Date($BeginDt, $DTU_Date)
  do DTU-DayofWeek#($DTU_Date, #DayofWeek)

  let $WorkDayString = substr($WorkSched, #DayofWeek, (8 - #DayofWeek))
  let #len = length($WorkDayString)

  if #len > #CalDays
      let $WorkDayString = substr($WorkDayString, 1, #CalDays)
  else
      let #NumofWeeks = floor((#CalDays - (8 - #DayofWeek)) / 7)
      let #i = 0
      while #i < #NumofWeeks
          let $WorkDayString = $WorkDayString || $WorkSched
          add 1 to #i
      end-while

      let #RemainDays = #CalDays - (8 - #DayofWeek) - (#NumofWeeks * 7)
      let $WorkDayString = $WorkDayString || substr($WorkSched, 1, #RemainDays)
  end-if

end-procedure

!****************************************************************************
! AppendWorkDayString                                                       *
!****************************************************************************
begin-procedure AppendWorkDayString ($BeginDt, $EndDt, $WorkSched, $AppendSeq, :$WorkDayString)

  do SetWorkDayString($BeginDt, $EndDt, $WorkSched, $TmpWorkDayString)

  if $AppendSeq = 'B'
      let $WorkDayString = $TmpWorkDayString || $WorkDayString
  else
      let $WorkDayString = $WorkDayString || $TmpWorkDayString
  end-if

end-procedure

!****************************************************************************
! CountWorkDays                                                             *
!****************************************************************************
begin-procedure CountWorkDays ($WorkDayString, $Option, :#WorkDays)

  let #i = 1
  let #WorkDays = 0
  let #len = length($WorkDayString)

  if $Option = 'P'
      while #i < (#len + 1)

          if substr($WorkDayString, #i, 1) = 'N'
          else
              let #WorkDays = #WorkDays + 1
          end-if
          add 1 to #i
      end-while
  else
      while #i < (#len + 1)
          if substr($WorkDayString, #i, 1) = 'Y'
              let #WorkDays = #WorkDays + 1
          end-if
          add 1 to #i
      end-while
  end-if

end-procedure

!****************************************************************************
! SetBreakCode                                                              *
!****************************************************************************
begin-procedure SetBreakCode (#DateOffSet, $ReplChar, :$WorkDayString)

  let #len = length($WorkDayString)
  if #DateOffSet > 0
      if substr($WorkDayString, #DateOffSet, 1) = 'Y'
          if #DateOffSet = 1
              let $WorkDayString = $ReplChar || substr($WorkDayString, (#DateOffSet + 1), (#len - 1))
          else
              let $WorkDayString = substr($WorkDayString, 1, (#DateOffSet - 1)) || $ReplChar ||
                                   substr($WorkDayString, (#DateOffSet + 1), (#len - #DateOffSet))
          end-if
      end-if
  end-if

end-procedure

!****************************************************************************
! GetHolSched                                                               *
!****************************************************************************
begin-procedure GetHolSched ($BeginDt, $EndDt, $HolSched, :$WorkDayString)
begin-select
HOL.HOLIDAY

  let $HolDate = &HOL.HOLIDAY
  do Date-Difference($BeginDt, $HolDate, #DateOffSet)
  let #DateOffSet = #DateOffSet + 1
  do SetBreakCode (#DateOffSet, 'H', $WorkDayString)

FROM PS_HOLIDAY_DATE HOL
WHERE HOL.HOLIDAY_SCHEDULE = $HolSched
AND HOL.HOLIDAY BETWEEN $BeginDt AND $EndDt
end-select
end-procedure

!****************************************************************************
! GetSchBreak                                                               *
!****************************************************************************
begin-procedure GetSchBreak ($BeginDt, $EndDt, $SchSched, :$WorkDayString)

  do Format-DateTime($BeginDt, $CMP_BeginDt, {DEFCMP},'','')
  do Format-DateTime($EndDt, $CMP_EndDt, {DEFCMP},'','')

begin-select
SCH.HP_START_DT
SCH.HP_END_DT

  let $StartSchBrk = &SCH.HP_START_DT
  let $EndSchBrk   = &SCH.HP_END_DT

  do Format-DateTime($StartSchBrk, $CMP_StartSchBrk, {DEFCMP},'','')
  do Format-DateTime($EndSchBrk, $CMP_EndSchBrk, {DEFCMP},'','')

  if $CMP_StartSchBrk < $CMP_BeginDt
      let $StartSchBrk = $BeginDt
  end-if

  if $CMP_EndSchBrk > $CMP_EndDt
      let $EndSchBrk = $EndDt
  end-if

  do Date-Difference($StartSchBrk, $EndSchBrk, #TotalBrkDays)
  do Date-Difference($BeginDt, $StartSchBrk, #DateOffSet)

  let #DateOffSet = #DateOffSet + 1
  let #i = 0
  while #i < (#TotalBrkDays + 1)
      do SetBreakCode (#DateOffSet, 'S', $WorkDayString)
      add 1 to #DateOffSet
      add 1 to #i
  end-while

FROM PS_HP_SCHOOL_DATES SCH
WHERE SCH.HP_SCHOOL_SCHEDULE = $SchSched
AND (((SCH.HP_START_DT >= $BeginDt AND SCH.HP_START_DT <= $EndDt)
OR (SCH.HP_END_DT >= $BeginDt AND SCH.HP_END_DT <= $EndDt))
OR (SCH.HP_START_DT <= $BeginDt AND SCH.HP_END_DT >= $EndDt))
end-select
end-procedure

!****************************************************************************
! FindPayPeriodWrkDays                                                      *
!****************************************************************************
begin-procedure FindPayPeriodWrkDays ($BeginDt, $EndDt, $ContractBeginDt, $WorkDayString, $Option, :#WorkDays)

  do Date-Difference($BeginDt, $EndDt, #TotalDays)
  do Date-Difference($ContractBeginDt, $BeginDt, #DateOffSet)

  let #TotalDays = #TotalDays + 1
  let #DateOffSet = #DateOffSet + 1
  let $TempWorkDayString = substr($WorkDayString, #DateOffSet, #TotalDays)

  do CountWorkDays($TempWorkDayString, $Option, #WorkDays)

end-procedure

!****************************************************************************
! Determine-PPRatio                                                         *
!****************************************************************************
begin-procedure Determine-PPRatio ($BeginDt, $EndDt, $PrdBeginDt, $PrdEndDt, $PaymentBeginDt,
                                   $WorkDayString, :#PPRatio)

  do Format-DateTime($BeginDt, $CMP_BeginDt, {DEFCMP},'','')
  do Format-DateTime($EndDt, $CMP_EndDt, {DEFCMP},'','')
  do Format-DateTime($PrdBeginDt, $CMP_PrdBeginDt, {DEFCMP},'','')
  do Format-DateTime($PrdEndDt, $CMP_PrdEndDt, {DEFCMP},'','')

  if ($CMP_BeginDt <= $CMP_PrdBeginDt) and ($CMP_EndDt >= $CMP_PrdEndDt)

      let #PPRatio = 1
  else
      if (($CMP_PrdEndDt < $CMP_BeginDt) or ($CMP_PrdBeginDt > $CMP_EndDt))

          let #PPRatio = 0
      else
          do FindPayPeriodWrkDays($PrdBeginDt, $PrdEndDt, $PaymentBeginDt, $WorkDayString, 'P', #PrdPaidDays)

          if $CMP_PrdBeginDt < $CMP_BeginDt
              let $TmpBeginDt = $BeginDt
          else
              let $TmpBeginDt = $PrdBeginDt
          end-if

          if $CMP_PrdEndDt > $CMP_EndDt
              let $TmpEndDt = $EndDt
          else
              let $TmpEndDt = $PrdEndDt
          end-if

          do FindPayPeriodWrkDays($TmpBeginDt, $TmpEndDt, $PaymentBeginDt, $WorkDayString, 'P', #CntPrdPaidDays)

          let #PPRatio = round(#CntPrdPaidDays / #PrdPaidDays, 6)
      end-if
  end-if

end-procedure

!****************************************************************************
! Determine-ContractDates                                                   *
!****************************************************************************
begin-procedure Determine-ContractDates

  do Format-DateTime($ContractBeginDt, $CMP_ContractBeginDt, {DEFCMP},'','')
  do Format-DateTime($ContractEndDt, $CMP_ContractEndDt, {DEFCMP},'','')
  do Format-DateTime($PaymentBeginDt, $CMP_PaymentBeginDt, {DEFCMP},'','')
  do Format-DateTime($PaymentEndDt, $CMP_PaymentEndDt, {DEFCMP},'','')

  if $CMP_ContractBeginDt = $CMP_PaymentBeginDt
      let $BeforeContract = 'N'
  else
      let $BeforeContract = 'Y'
      let $BefCont_BeginDt = $PaymentBeginDt

      do Convert-to-DTU-Date($ContractBeginDt, $Temp_Dt)
      do DTU-Subtract-Days($Temp_Dt, 1, $Temp_Dt2)
      do Convert-from-DTU-Date($Temp_Dt2, $BefCont_EndDt)
  end-if

  let $DurContract = 'Y'

  if $CMP_ContractEndDt = $CMP_PaymentEndDt
      let $AfterContract = 'N'
  else
      let $AfterContract = 'Y'
      let $AftCont_EndDt = $PaymentEndDt

      do Convert-to-DTU-Date($ContractEndDt, $Temp_Dt)
      do DTU-Add-Days($Temp_Dt, 1, $Temp_Dt2)
      do Convert-from-DTU-Date($Temp_Dt2, $AftCont_BeginDt)
  end-if

  if rtrim($ContractStart, ' ') <> ''
      do Format-DateTime($ContractStart, $CMP_ContractStart, {DEFCMP},'','')
      if $CMP_ContractStart > $CMP_ContractBeginDt
          let $LateStart = 'Y'
      end-if
  else
      let $ContractStart = $ContractBeginDt
  end-if

  if rtrim($ContractTermDt, ' ') <> ''
      do Format-DateTime($ContractTermDt, $CMP_ContractTermDt, {DEFCMP},'','')
      if $CMP_ContractTermDt < $CMP_ContractEndDt
          let $EarlyTerminate = 'Y'
      end-if
  else
      let $ContractTermDt = $ContractEndDt
  end-if

end-procedure

!****************************************************************************
! CalculateWrkDays                                                          *
!****************************************************************************
begin-procedure CalculateWrkDays ($BeginDt, $EndDt, $PrdBeginDt, $PrdEndDt, $PaymentBeginDt,
                                  $WorkDayString, $ProcOptn, :#ActualWorkDays)

  let #ActualWorkDays = 0

  do Format-DateTime($BeginDt, $CMP_BeginDt, {DEFCMP},'','')
  do Format-DateTime($EndDt, $CMP_EndDt, {DEFCMP},'','')
  do Format-DateTime($PrdBeginDt, $CMP_PrdBeginDt, {DEFCMP},'','')
  do Format-DateTime($PrdEndDt, $CMP_PrdEndDt, {DEFCMP},'','')

  if ($CMP_PrdBeginDt > $CMP_EndDt) or ($CMP_PrdEndDt < $CMP_BeginDt)
  else
      if $CMP_PrdBeginDt < $CMP_BeginDt
          let $TmpBeginDt = $BeginDt
      else
          let $TmpBeginDt = $PrdBeginDt
      end-if

      if $CMP_PrdEndDt > $CMP_EndDt
          let $TmpEndDt = $EndDt
      else
          let $TmpEndDt = $PrdEndDt
      end-if

      do FindPayPeriodWrkDays($TmpBeginDt, $TmpEndDt, $PaymentBeginDt, $WorkDayString, $ProcOptn, #ActualWorkDays)
  end-if

end-procedure

!****************************************************************************
! FindRemainContPrd                                                         *
!****************************************************************************
begin-procedure FindRemainContPrd

  let #RemainContPrd = 0

  let $RtChgBeginDt = $FindJobEffdt
  if $FindOptn = 'C' or $FindOptn = 'E'
      let $RtChgEndDt   = $FindJobContEndDt
  else
      let $RtChgEndDt   = $FindJobPymtEndDt
  end-if

  let #wrk_idx = 0
  while #wrk_idx < #WrkCnt

      get $PrdBeginDt $PrdEndDt from WrkArray (#wrk_idx) WrkPayBegDt WrkPayEndDt

      if $FindOptn = 'C' or $FindOptn = 'P'
          do Determine-PPRatio($RtChgBeginDt, $RtChgEndDt, $PrdBeginDt, $PrdEndDt, $WrkDayStr_BeginDt,
                               $WorkDayString, #RemRatio)

          let #RemainContPrd = #RemainContPrd + #RemRatio
      else
          do CalculateWrkDays($RtChgBeginDt, $RtChgEndDt, $PrdBeginDt, $PrdEndDt, $WrkDayStr_BeginDt,
                              $WorkDayString, 'W', #RemWrkDays)

          let #RemainContPrd = #RemainContPrd + #RemWrkDays
      end-if

      add 1 to #wrk_idx
  end-while

end-procedure
