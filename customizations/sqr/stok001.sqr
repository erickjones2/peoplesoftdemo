!-----------------------------------------------------------------------
! Report Name: STOK001 - Stock Activity Details
!-----------------------------------------------------------------------
!
!
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!
!          $Date:  2013/01/18:02:52:50                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!
!-----------------------------------------------------------------------
! Program Descr: Reports all stock activity details by employee
!-----------------------------------------------------------------------
! Prompts:      Stock_ID, Process_Group, Emplid, Insider Type, from Date,
!               Thru Date, Options and/or ESPP checkboxes.
! Tables:       ST_GRANT
!               ST_GRANT_EXER
!               ST_EXER_RELEASE
!               ST_EXER_DISPOSN
!               ST_REL_DISPOSN
!               ST_STOK001_TBL
!               ST_GRNT_REPURCH
!               ST_ESPP_PURCH
!               PERSONAL_DATA
!               PERSON_ADDROTH
!               PERSON_NAME
!               ST_ESPP_DIPOSN
! Sorts:        Process Group, Name
!-----------------------------------------------------------------------

  #include 'setenv.sqc'

!-----------------------------------------------------------------------
Begin-Setup

  #include 'ptpsl177.sqc'               ! Landscape 177 Columns

End-Setup

!-----------------------------------------------------------------------
! Procedure: Begin-Program
! Descr:     Main Report procedure.
!-----------------------------------------------------------------------
Begin-Program

  do Init-Report
  do Build-where-Clause
  do Expand-Process-Group
  do Select-Vesting-Info
  do Get-Shares-Exercised
  do Process-Shares-Exercised

  evaluate $RC_RunType
  when = 'E'
  when = 'N'
    do Get-Employees
    break
  when = 'I'
    do Get-Insiders
    break
  when = 'P'
    do Get-Process-Groups
    break
  end-evaluate

  do Delete-Temp
  do Reset
  do Successful-EOJ

  show 'Process ended at:   ' $SysDateTime      !standard output info to sqr.log

End-Program

!-----------------------------------------------------------------------
! Procedure: Begin-Heading
! Descr:     Prints at the beginning of each page
!-----------------------------------------------------------------------
Begin-Heading 11

  #include 'stdhdg01.sqc'

  let #Advance = 0

  print $StockIdLbl                                        (-1,001,008)
  print ':'                                                (  ,000,001)
  print $StockID                                           (  , +3,010)
  print $FromLbl                                           (  ,073,004)
  print ':'                                                (  ,000,001)
  print $FromDate                                          (  , +1,010)
  print $ThruLbl                                           (  , +2,004)
  print ':'                                                (  ,000,001)
  print $ThruDate                                          (  , +1,010)

  if $NewEmp = 'Y'
    do Get-Personal-Data
    do Get-Insider-Info
    print $Name                                            (+3,001,040)
    print $EAddress1                                       (+1,001,035)
    add 1 to #Advance
    if $EAddress2 <> ''
       print $EAddress2                                    (+1,001,035)
       add 1 to #Advance
    end-if
    if $EAddress3 <> ''
       print $EAddress3                                    (+1,001,035)
       add 1 to #Advance
    end-if
    let $CityStZip = $ECity || ', ' || $EState || ' '
    let #Length = Length($EPostal)
    if $ECountry = 'USA'
       if #Length = 5
          let $EPostal = edit($EPostal, 'XXXXX')
       else
          let $EPostal = edit($EPostal, 'XXXXX-XXXX')
       end-if
    end-if
    let $CityStZip = $CityStZip || $EPostal
    print $CityStZip                                       (+1,001,051)
    let $CityStZip = ''
    print $ECountry                                        (+1,001,003)
    add 2 to #Advance
    let #Advance = (#Advance * -1)
    print $EmpidLbl                                        (+#Advance,050,006)
    print ':'                                              (  ,000,001)
    print $Emplid                                          (  , +1,011)
    print $TaxLocnLbl                                      (  ,087,012)
    print ':'                                              (  ,000,001)
    print $TaxCode                                         (  , +1,010)
    print $CompanyLbl                                      (  ,123,007)
    print ':'                                              (  ,000,001)
    print $Company                                         (  , +1,003)
    print $NidLbl                                          (+1,050,003)
    print ':'                                              (  ,000,001)
    evaluate $TaxCountry
      when = 'USA'
        print $NID                                         (  ,+1,11)  edit XXX-XX-XXXX
        break
      when = 'CAN'
        print $NID                                         (  ,+1,13)  edit XXX-XXX-XXXXX
        break
      when-other
        print $NID                                         (  ,+1,20)
        break
    end-evaluate

    print $PrcsGrpLbl                                      (  ,087,007)
    print ':'                                              (  ,000,001)
    print $PrcsGrp                                         (  , +1,010)
    print $PaygroupLbl                                     (  ,123,008)
    print ':'                                              (  ,000,001)
    print $Paygroup                                        (  , +1,003)
    print ':'                                              (  ,000,001)
    print $InsiderLbl                                      (+1,123,007)
    print ':'                                              (  ,000,001)
    print $Insider                                         (  , +1,020)
end-if
  let $NewEmp = 'N'

End-Heading

!-----------------------------------------------------------------------
! Procedure: Init-Report
! Descr:     Report initialization procedure.  Set titles , variables.
!            This is called from the Begin-Program procedure.
!-----------------------------------------------------------------------
Begin-Procedure Init-Report

  let $ReportID    = 'STOK001'
  let $PlanType    = 'O'
  let $cur = $basecurr
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' procedure
                            ! that reads the language dep. text.
  let $AsOfDate = $AsOfToday

 !to right align number headings
  let $GrantFmvLbl   = lpad($GrantFmvLbl,  11,' ')
  let $PurchPriceLbl = lpad($PurchPriceLbl,22,' ')
  let $PurchFmvLbl   = lpad($PurchFmvLbl,  22,' ')
  let $ShrPurchLbl   = lpad($ShrPurchLbl,  22,' ')
  let $ShrDispLbl    = lpad($ShrDispLbl,   22,' ')
  let $GrantPrcLbl   = lpad($GrantPrcLbl,  11,' ')
  let $ShrExerLbl    = lpad($ShrExerLbl,   22,' ')
  let $ShrGrantLbl   = lpad($ShrGrantLbl,  22,' ')
  let $GrantLbl      = rpad($GrantLbl,     10,' ')
  let $NbrLbl        = rpad($NbrLbl,       10,' ')
  let $Nbr11Lbl      = lpad($NbrLbl,       11,' ')
  let $ShrCnclLbl    = lpad($ShrCnclLbl,   22,' ')
  let $ShrExprLbl    = lpad($ShrExprLbl,   22,' ')
  let $ShrRelLbl     = lpad($ShrRelLbl,    22,' ')
  let $ShrRepLbl     = lpad($ShrRepLbl,    22,' ')
  let $ExerFmvLbl    = lpad($ExerFmvLbl,   12,' ')
  let $RelFmvLbl     = lpad($RelFmvLbl,    11,' ')
  let $OrdIncLbl     = lpad($OrdIncLbl,    19,' ')
  let $TaxIncLbl     = lpad($TaxIncLbl,    21,' ')
  let $DispPrcLbl    = lpad($DispPrcLbl,   11,' ')
  let $DispValLbl    = lpad($DispValLbl,   19,' ')
  let $RepPrcLbl     = lpad($RepPrcLbl,    11,' ')
  let $RepValLbl     = lpad($RepValLbl,    19,' ')
  let $TotLbl        = lpad($TotalLbl,     22,' ')
  let $NewLbl        = lpad($NewLbl,       22,' ')
  let $CarryFwdLbl   = lpad($CarryFwdLbl,  22,' ')
  let $ContribLbl    = lpad($ContribLbl,   22,' ')
  let $PurchValLbl   = lpad($PurchValLbl,  22,' ')
  let $RefundLbl     = lpad($RefundLbl,    22,' ')
  let $PrevLbl       = lpad($PrevLbl,      22,' ')
  let $SharesLbl     = lpad($SharesLbl,    22,' ')
  let $CostBasis1Lbl = lpad($CostBasis1Lbl,10,' ')
  let $TypeLbl       = rpad($TypeLbl,      10,'_')
  let $TypeLbl       = rpad($TypeLbl,      10,'_')
  let $DateLbl       = rpad($DateLbl,      10,'_')
  let $Date11Lbl     = rpad($DateLbl,      11,'_')
  let $Date12Lbl     = rpad($DateLbl,      12,'_')
  let $MthdLbl       = rpad($MthdLbl,      10,'_')
  let $TaxesLbl      = rpad($TaxesLbl,     10,'_')
  let $ReasonLbl     = rpad($ReasonLbl,    10,'_')
  let $PurchPerLbl   = rpad($PurchPerLbl,  21,'_')
  let $SplitDtLbl    = rpad($SplitLbl,     10,'_')
  let $PayableLbl    = rpad($PayableLbl,   12,'_')
  let $RatioLbl      = rpad($RatioLbl,     11,'_')
  let $VestSchdLbl   = lpad($VestSchdLbl,  32,' ')
  let $VestSchdLbl   = rpad($VestSchdLbl,  49,'_')
  let $VestDtLbl     = rpad($VestDtLbl,    10,'_')


  lowercase $CntdLbl
  let $Continue = '(' || $CntdLbl || ')'

  if $prcs_process_instance = ''

  else
    let #Instance = to_number($prcs_process_instance)
    do Get-SQR-Parms                   ! Get Run Control Values
  end-if

  let $StockID       = rtrim($RC_Stock_ID,' ')
  let $RC_Stock_Plan = rtrim($RC_Stock_Plan,' ')
  let $RC_Emplid     = rtrim($RC_Emplid,' ')
  let $RC_RunType    = rtrim($RC_RunType,' ')
  let $RC_FromDate   = rtrim($RC_FromDate,' ')
  let $RC_ThruDate   = rtrim($RC_ThruDate,' ')
  let $RC_PrcsGrp    = rtrim($RC_PrcsGrp,' ')
  let $RC_Insider    = rtrim($RC_Insider,' ')
  let $RC_Options    = rtrim($RC_Options,' ')
  let $RC_ESPP       = rtrim($RC_ESPP,' ')

  do Format-DateTime ($RC_FromDate, $FromDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruDate, {DEFDATE}, '', '')
  do Format-DateTime ($RC_ThruDate, $ThruCmp,  {DEFCMP}, '', '')
  let $CurrentTime = datenow()
  show 'Process started at: ' $SysDateTime      !standard output info to sqr.log

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Report-Translation
! Descr:     This procedure is used to read language-dependent text from
!            the database.
!-----------------------------------------------------------------------
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK',$language_cd)
  do Append_Report_Translation ($ReportId)

  do Get_Field_Information ('STOCK', 'STOCK_ID',           $StockIdLbl,    #DW)
  do Get_Field_Information ('STOCK', 'EMPLID',             $EmpidLbl,      #DW)
  do Get_Field_Information ('STOCK', 'STOCK_PLAN_DESC',    $PlanLbl,       #DW)
  do Get_Field_Information ('STOCK', 'PER_ORG',            $PerOrgLbl,     #DW)
  do Get_Field_Information ('STOCK', 'NID',                $NidLbl,        #DW)
  do Get_Field_Information ('STOCK', 'PROCESS_GRP',        $PrcsGrpLbl,    #DW)
  do Get_Field_Information ('STOCK', 'COMPANY',            $CompanyLbl,    #DW)
  do Get_Field_Information ('STOCK', 'TOTAL',              $TotalLbl,      #DW)
  do Get_Field_Information ('STOCK', 'GRANT',              $GrantLbl,      #DW)
  do Get_Field_Information ('STOCK', 'DATE',               $DateLbl,       #DW)
  do Get_Field_Information ('STOCK', 'NUMBER',             $NbrLbl,        #DW)
  do Get_Field_Information ('STOCK', 'SHARES',             $SharesLbl,     #DW)
  do Get_Field_Information ('STOCK', 'EXPIRATN_DT',        $ExprDtLbl,     #DW)
  do Get_Field_Information ('STOCK', 'EXERCISE',           $ExerLbl,       #DW)
  do Get_Field_Information ('STOCK', 'SHARES_EXERCISED',   $ShrExerLbl,    #DW)
  do Get_Field_Information ('STOCK', 'SHARES_EXPIRED',     $ShrExprLbl,    #DW)
  do Get_Field_Information ('STOCK', 'SHARE',              $ShareLbl,      #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION',        $DispLbl,       #DW)
  do Get_Field_Information ('STOCK', 'CANCELLATION',       $CanclLbl,      #DW)
  do Get_Field_Information ('STOCK', 'CANCEL',             $CancelLbl,     #DW)
  do Get_Field_Information ('STOCK', 'EXPIRATION',         $ExprLbl,       #DW)
  do Get_Field_Information ('STOCK', 'RELEASE',            $RelLbl,        #DW)
  do Get_Field_Information ('STOCK', 'SHARES_RELEASED',    $ShrRelLbl,     #DW)
  do Get_Field_Information ('STOCK', 'SHARES_GRANTED',     $ShrGrantLbl,   #DW)
  do Get_Field_Information ('STOCK', 'SHARES_REPURCHASED', $ShrRepLbl,     #DW)
  do Get_Field_Information ('STOCK', 'SHARES_CANCELLED',   $ShrCnclLbl,    #DW)
  do Get_Field_Information ('STOCK', 'SHARES_PURCHASED',   $ShrPurchLbl,   #DW)
  do Get_Field_Information ('STOCK', 'SHARES_DISPOSED',    $ShrDispLbl,    #DW)
  do Get_Field_Information ('STOCK', 'REPURCHASE',         $RepLbl,        #DW)
  do Get_Field_Information ('STOCK', 'PURCHASE_PERIOD',    $PurchPerLbl,   #DW)
  do Get_Field_Information ('STOCK', 'EXERCISE_FMV',       $ExerFmvLbl,    #DW)
  do Get_Field_Information ('STOCK', 'GRANT_FMV',          $GrantFmvLbl,   #DW)
  do Get_Field_Information ('STOCK', 'RELEASE_FMV',        $RelFmvLbl,     #DW)
  do Get_Field_Information ('STOCK', 'ST_ORD_INCOME',      $OrdIncLbl,     #DW)
  do Get_Field_Information ('STOCK', 'TAX_PREF_INC',       $TaxIncLbl,     #DW)
  do Get_Field_Information ('STOCK', 'PURCHASE',           $PurchLbl,      #DW)
  do Get_Field_Information ('STOCK', 'PURCHASE_PRICE',     $PurchPriceLbl, #DW)
  do Get_Field_Information ('STOCK', 'PURCHASE_FMV',       $PurchFmvLbl,   #DW)
  do Get_Field_Information ('STOCK', 'OFFERING_ID',        $OffIDLbl,      #DW)
  do Get_Field_Information ('STOCK', 'FROM',               $FromLbl,       #DW)
  do Get_Field_Information ('STOCK', 'THRU',               $ThruLbl,       #DW)
  do Get_Field_Information ('STOCK', 'GRANT_DT',           $GrantDtLbl,    #DW)
  do Get_Field_Information ('STOCK', 'REPURCHASE_PRICE',   $RepPrcLbl,     #DW)
  do Get_Field_Information ('STOCK', 'GRANT_PRICE',        $GrantPrcLbl,   #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION_VALUE',  $DispValLbl,    #DW)
  do Get_Field_Information ('STOCK', 'DISPOSITION_PRICE',  $DispPrcLbl,    #DW)
  do Get_Field_Information ('STOCK', 'PURCHASE_VALUE',     $PurchValLbl,   #DW)
  do Get_Field_Information ('STOCK', 'REPURCHASE_VALUE',   $RepValLbl,     #DW)
  do Get_Field_Information ('STOCK', 'PAYGROUP',           $PaygroupLbl,   #DW)
  do Get_Field_Information ('STOCK', 'INSIDER',            $InsiderLbl,    #DW)
  do Get_Field_Information ('STOCK', 'COST_BASIS1',        $CostBasis1Lbl, #DW)

  do Get_Field_Information ('STOK001', 'STOK001',          $ReportTitle,   #DW)
  do Get_Field_Information ('STOK001', 'TAX_LOCATION',     $TaxLocnLbl,    #DW)
  do Get_Field_Information ('STOK001', 'COMPANY_INSIDER',  $InsiderC,      #DW)
  do Get_Field_Information ('STOK001', 'PURCHASE_PERIOD',  $PurchPerLbl,   #DW)
  do Get_Field_Information ('STOK001', 'OPT_GRANT',        $OptGrantLbl,   #DW)
  do Get_Field_Information ('STOK001', 'STOCK',            $StockLbl,      #DW)
  do Get_Field_Information ('STOK001', 'OPTION',           $OptLbl,        #DW)
  do Get_Field_Information ('STOK001', 'TYPE',             $TypeLbl,       #DW)
  do Get_Field_Information ('STOK001', 'VEST_SCHEDULE',    $VestSchdLbl,   #DW)
  do Get_Field_Information ('STOK001', 'VEST_DT',          $VestDtLbl,     #DW)
  do Get_Field_Information ('STOK001', 'OPT_EXER',         $OptExerLbl,    #DW)
  do Get_Field_Information ('STOK001', 'PAYMENT',          $PymtLbl,       #DW)
  do Get_Field_Information ('STOK001', 'METHOD',           $MthdLbl,       #DW)
  do Get_Field_Information ('STOK001', 'OPT_DISP',         $OptDispLbl,    #DW)
  do Get_Field_Information ('STOK001', 'OPT_CANCEL',       $OptCnclLbl,    #DW)
  do Get_Field_Information ('STOK001', 'REASON',           $ReasonLbl,     #DW)
  do Get_Field_Information ('STOK001', 'OPT_EXPR',         $OptExprLbl,    #DW)
  do Get_Field_Information ('STOK001', 'OPT_REL',          $OptRelLbl,     #DW)
  do Get_Field_Information ('STOK001', 'OPT_GRANT',        $OptGrantLbl,   #DW)
  do Get_Field_Information ('STOK001', 'TAX',              $TaxLbl,        #DW)
  do Get_Field_Information ('STOK001', 'OPT_REPURCH',      $OptRepLbl,     #DW)
  do Get_Field_Information ('STOK001', 'ESPP_CONTRIB',     $EsppContrLbl,  #DW)
  do Get_Field_Information ('STOK001', 'ESPP_PURCH',       $EsppPurchLbl,  #DW)
  do Get_Field_Information ('STOK001', 'PREVIOUS',         $PrevLbl,       #DW)
  do Get_Field_Information ('STOK001', 'CARRYFWD',         $CarryFwdLbl,   #DW)
  do Get_Field_Information ('STOK001', 'CONTRIBUTIONS',    $ContribLbl,    #DW)
  do Get_Field_Information ('STOK001', 'NEW',              $NewLbl,        #DW)
  do Get_Field_Information ('STOK001', 'REFUND',           $RefundLbl,     #DW)
  do Get_Field_Information ('STOK001', 'ESPP_DISP',        $EsppDispLbl,   #DW)
  do Get_Field_Information ('STOK001', 'SPLIT_HISTORY',    $SplitHistLbl,  #DW)
  do Get_Field_Information ('STOK001', 'SPLIT_DT',         $SplitDtLbl,    #DW)
  do Get_Field_Information ('STOK001', 'RATIO',            $RatioLbl,      #DW)
  do Get_Field_Information ('STOK001', 'FOR',              $ForLbl,        #DW)
  do Get_Field_Information ('STOK001', 'PAYABLE_DT',       $PayableLbl,    #DW)
  do Get_Field_Information ('STOK001', 'REPORTING_PERSON', $InsiderR,      #DW)
  do Get_Field_Information ('STOK001', 'OFFICER',          $InsiderO,      #DW)
  do Get_Field_Information ('STOK001', 'DIRECTOR',         $InsiderD,      #DW)
  do Get_Field_Information ('STOK001', 'COMPANY_INSIDER',  $InsiderC,      #DW)
  do Get_Field_Information ('STOK001', 'ST_BEN_OWNER',     $InsiderB,      #DW)
  do Get_Field_Information ('STOK001', 'PROXY_REPORT',     $InsiderP,      #DW)
  do Get_Field_Information ('STOK001', 'CONTINUED',        $CntdLbl,       #DW)
  do Get_Field_Information ('STOK001', 'TAXES',            $TaxesLbl,      #DW)
  do Get_Field_Information ('STOK001', 'TRADE',            $TradeLbl,      #DW)
  do Get_Field_Information ('STOK001', 'RELEASE',          $ReleaseLbl,    #DW)
  do Get_Field_Information ('STOK001', 'DISPOSITION_TYPE', $DispTypeLbl,   #DW)

End-Procedure

!-----------------------------------------------------------------------
! Section: Build-Where-Clause
! Descr:   Constructs portion of where clauses, used in retrieving the data.
!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause

  let $SQLQuote      = ''''
  let $WhereInsider  = ''

  if $RC_RunType = 'P'
    if $RC_PrcsGrp <> ''
      let $WherePrcsGrp    = ' and B.PROCESS_GROUP  = ' || $SQLQuote || $RC_PrcsGrp || $SQLQuote
    else
      let $WherePrcsGrp    = ''
    end-if
  end-if

  if $RC_RunType = 'E'
    if $RC_Emplid <> ''
      let $WhereEmplid     = ' and AAA.EMPLID = ' || $SQLQuote || $RC_Emplid || $SQLQuote
    else
      let $WhereEmplid     = ''
    end-if
  end-if

  if $RC_RunType = 'I'
    evaluate $RC_Insider
      when = 'R'
        let $WhereInsider = ' and BB.REPORTING_PERSON = ''Y'''
        break
      when = 'O'
        let $WhereInsider = ' and BB.ST_OFFICER = ''Y'''
        break
      when = 'D'
        let $WhereInsider = ' and BB.ST_DIRECTOR = ''Y'''
        break
      when = 'I'
        let $WhereInsider = ' and BB.COMPANY_INSIDER = ''Y'''
        break
      when = 'B'
        let $WhereInsider = ' and BB.ST_BEN_OWNER = ''Y'''
        break
      when = 'P'
        let $WhereInsider = ' and BB.PROXY_REPORT = ''Y'''
        break
      when-other
        let $WhereInsider = ''
        break
    end-evaluate
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Select-Vesting-Info
! Descr:   selects values to insert into ST_STOK001_TBL.
!-----------------------------------------------------------------------
Begin-Procedure Select-Vesting-Info

Begin-Select

XA.EMPLID
XA.STOCK_ID
XA.STOCK_PLAN
XA.GRANT_NBR
XB.VEST_DT
XA.GRANT_PRICE
XB.SHARES_VESTED
XB.EXPIRATN_DT
XB.TERM_EXPIRATN_DT
XA.ST_CANCEL_REASON
XA.ST_CANCEL_DT

  let $MSCancelDt  = rtrim(&xa.st_cancel_dt,' ')
  let $MSTermExpDt = rtrim(&xb.term_expiratn_dt,' ')
  do Insert-Vesting-Info

from PS_ST_GRANT        XA,
     PS_ST_GRNT_VST_DTL XB
where XA.GRANT_STATUS = 'A'
  and XA.EMPLID     = XB.EMPLID
  and XA.STOCK_ID   = XB.STOCK_ID
  and XA.GRANT_NBR  = XB.GRANT_NBR
  and XB.VEST_EFFDT = (select MAX(VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID       = XB.EMPLID
                          and STOCK_ID    = XB.STOCK_ID
                          and GRANT_NBR   = XB.GRANT_NBR
                          and VEST_EFFDT <= $AsOfToday)
  and XB.SEQ_NUM    = (select MAX(SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID     = XB.EMPLID
                         and STOCK_ID   = XB.STOCK_ID
                         and GRANT_NBR  = XB.GRANT_NBR
                         and VEST_EFFDT = XB.VEST_EFFDT )
  and XA.STOCK_ID   = $StockID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Insert-Vesting-Info
! Descr:   Inserts vesting info into a temp table as the first step in creating
!          the vesting schedule.  CurrentTime and Instance are used to
!          eliminate the chance of data being accessed by two different runs
!          of the report at the same time.
!-----------------------------------------------------------------------
Begin-Procedure Insert-Vesting-Info

 let $Procedure = 'Insert-Vesting-Temp'
 let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error
INSERT into PS_ST_STOK001_TBL

(DATETIME_STAMP
,PROCESSINSTANCE
,EMPLID
,STOCK_ID
,STOCK_PLAN
,GRANT_NBR
,VEST_DT
,GRANT_PRICE
,SHARES_VESTED
,SHARES_EXERCISED
,EXPIRATN_DT
,TERM_EXPIRATN_DT
,ST_CANCEL_REASON
,ST_CANCEL_DT)

VALUES
($CurrentTime
,#Instance
,&xa.emplid
,&xa.stock_id
,&xa.stock_plan
,&xa.grant_nbr
,&xb.vest_dt
,&xa.grant_price
,&xb.shares_vested
,0
,&xb.expiratn_dt,

! Workaround for TPRD T-MLEAN-Q54CT
#ifdef MICROSOFT
   $MSTermExpDt
  ,&xa.st_cancel_reason
  ,$MSCancelDt)
#else
   &xb.term_expiratn_dt
  ,&xa.st_cancel_reason
  ,&xa.st_cancel_dt)
#endif

End-Sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Shares-Exercised
! Descr:   Sums all exercises for a particular emplid, stock_id, grant_nbr
!          and vest_dt. Report lumps the sum in a particular vesting date and
!          then trickles the excess down to the next higher vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Exercised

Begin-Select
XC.EMPLID
XC.STOCK_ID
XC.GRANT_NBR
XD.VEST_DT
SUM(XC.SHARES_EXERCISED) &SumExer

  Do Update-Shares-ExercisedA

from PS_ST_GRANT_EXER   XC,
     PS_ST_STOK001_TBL  XD
where XC.EMPLID          = XD.EMPLID
  and XC.GRANT_NBR       = XD.GRANT_NBR
  and XC.STOCK_ID        = XD.STOCK_ID
  and XC.EXERCISE_STATUS = 'A'
  and XC.STOCK_ID        = $StockID
  and XD.DATETIME_STAMP  = $CurrentTime
  and XD.PROCESSINSTANCE = #Instance
  and XD.VEST_DT         = (select MIN(VEST_DT)
                            from  PS_ST_STOK001_TBL
                            where EMPLID              = XC.EMPLID
                              and GRANT_NBR           = XC.GRANT_NBR
                              and STOCK_ID            = XC.STOCK_ID
                              and STOCK_PLAN          = XC.STOCK_PLAN
                              and DATETIME_STAMP      = $CurrentTime
                              and PROCESSINSTANCE     = #Instance
                              and XC.EXERCISE_DT      < EXPIRATN_DT
                              and (XC.EXERCISE_DT     < TERM_EXPIRATN_DT
                               OR TERM_EXPIRATN_DT   IS NULL))
GROUP BY XC.EMPLID,
         XC.STOCK_ID,
         XC.GRANT_NBR,
         XD.VEST_DT
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedA
! Descr:   Updates the temp table with the sum of shares_exercised for a given
!          emplid, stock_id, grant_nbr, and vest_dt.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedA

 let $Procedure = 'Update-Shares-ExercisedA'
 let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error
UPDATE PS_ST_STOK001_TBL
  SET SHARES_EXERCISED = &SumExer

where EMPLID          = &xc.emplid
  and STOCK_ID        = &xc.stock_id
  and GRANT_NBR       = &xc.grant_nbr
  and VEST_DT         = &xd.vest_dt
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
End-Sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Process-Shares-Exercised
! Descr:   For each emplid and grant_nbr put info into array and call
!          Update-Shares-ExercisedB.
!-----------------------------------------------------------------------
Begin-Procedure Process-Shares-Exercised

  create-array name=Exer                -
                  size=50               -
                  field=VestDt:char     -
                  field=Vest:number     -
                  field=Exer:number
  let #x = 0

Begin-Select
XE.EMPLID       () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldEmp
XE.STOCK_ID
XE.STOCK_PLAN
XE.GRANT_NBR    () on-break print=never level=1 procedure=Update-Shares-ExercisedB  save=$OldGrant
XE.VEST_DT
XE.SHARES_VESTED
XE.SHARES_EXERCISED

  put &xe.vest_dt &xe.shares_vested &xe.shares_exercised into EXER(#x) VestDt Vest Exer
  add 1 to #x

from PS_ST_STOK001_TBL XE
where XE.STOCK_ID        = $StockID
  and XE.DATETIME_STAMP  = $CurrentTime
  and XE.PROCESSINSTANCE = #Instance
order by 1,4,5
End-Select

 do Update-Shares-ExercisedB    !to process last on-break

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedB
! Descr:   For each row in the array, check if shares exercised are greater
!          than shares vested for a particular vest date. If so, trickle down
!          the excess to the next vesting date.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedB

  let #TotalRow  = 0
  let #Remainder = 0

  while #totalRow <= #x   !to run thru all elements


    get $VestDtArray #ShrVestArray #ShrExerArray  -
         from EXER(#totalRow) VestDt Vest Exer

    let #ShareToExer = #ShrExerArray + #Remainder

    if #ShareToExer > #ShrVestArray
       let #UpdateExer  = #ShrVestArray
       let #Remainder   = #ShareToExer  - #ShrVestArray
       do Update-Shares-ExercisedC
    else
       if #Remainder > #ShrExerArray
          let #UpdateExer = #Remainder
          do Update-Shares-ExercisedC
          let #Remainder = 0
       end-if
    end-if

    add 1 to #totalRow

  end-while

  clear-array  name=EXER

  let #x = 0

End-Procedure

!-----------------------------------------------------------------------
! Section: Update-Shares-ExercisedC
! Descr:   Updates the temp table.
!-----------------------------------------------------------------------
Begin-Procedure Update-Shares-ExercisedC

 let $Procedure     = 'Update-Shares-ExercisedC'
 let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error
UPDATE PS_ST_STOK001_TBL
  SET SHARES_EXERCISED = #UpdateExer

where EMPLID          = $OldEmp
  and STOCK_ID        = $StockID
  and GRANT_NBR       = $OldGrant
  and VEST_DT         = $VestDtArray
  and DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
End-Sql

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Process-Groups
! Descr:   Retrieves employees and checks for any stock activity.
!-----------------------------------------------------------------------
Begin-Procedure Get-Process-Groups

  do Define-PrimJob-Clause('A',$AsOfToday, $PRIM_JOB_CLAUSE)     ! getprimj.sqc

Begin-Select

A.EMPLID
A.TAX_LOCATION_CD
A.COMPANY
A.PAYGROUP
B.PROCESS_GROUP

  let #LastPageCount = #page-count
  let $Vest          = 'N'
  let $Print         = 'N'
  let $NewEmp        = 'Y'
  let $Emplid        = rtrim(&a.emplid,' ')
  let $TaxCode       = rtrim(&a.tax_location_cd,' ')
  let $Company       = rtrim(&a.company,' ')
  let $Paygroup      = rtrim(&a.paygroup,' ')
  let $PrcsGrp       = rtrim(&b.process_group,' ')

 !------------------------------------------------------------
 !Specified at run time to retrieve options and/or ESPP info
 !------------------------------------------------------------
  if $RC_Options = 'Y'
    do Get-Grants
    do Get-Exercises
    do Get-Dispositions
    do Get-Cancellations
    do Get-Expirations
    do Get-Releases
    do Get-Repurchases
  end-if

  if $RC_ESPP = 'Y'
    do Get-ESPP-Contributions
    do Get-ESPP-Purchases
    do Get-ESPP-Dispositions
  end-if

 !-----------------------------------------------------
 ! Only print split info if other details were printed
 !-----------------------------------------------------
  if $Print = 'Y'
    do Get-Stock-Splits
    new-page            !separate page for each employee
  end-if

from PS_JOB            A,
     PS_R_PRCS_GRP_DTL B
where A.EFFDT     = (select MAX(EFFDT)
                       from PS_JOB
                      where EMPLID    = A.EMPLID
                        and EMPL_RCD  = A.EMPL_RCD
                        and EFFDT    <= $AsOfToday)
  and A.EMPL_RCD  = [$PRIM_JOB_CLAUSE]
  and A.EFFSEQ    = (select MAX(EFFSEQ)
                       from PS_JOB
                      where EMPLID    = A.EMPLID
                        and EMPL_RCD  = A.EMPL_RCD
                        and EFFDT     = A.EFFDT)
  and B.COMPANY   = A.COMPANY
  and B.PAYGROUP  = A.PAYGROUP
  and B.REPORT_ID = $ReportID
  [$WherePrcsGrp]
order by A.EMPLID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Insiders
! Descr:   Retrieves insiders only and checks for any stock activity.
!-----------------------------------------------------------------------
Begin-Procedure Get-Insiders

  do Define-PrimJob-Clause('AA',$AsOfToday, $PRIM_JOB_CLAUSE)     ! getprimj.sqc

Begin-Select

AA.EMPLID
AA.TAX_LOCATION_CD
AA.COMPANY
AA.PAYGROUP

  let #LastPageCount = #page-count
  let $Vest          = 'N'
  let $Print         = 'N'
  let $NewEmp        = 'Y'
  let $Emplid        = rtrim(&aa.emplid,' ')
  let $TaxCode       = rtrim(&aa.tax_location_cd,' ')
  let $Company       = rtrim(&aa.company,' ')
  let $Paygroup      = rtrim(&aa.paygroup,' ')
  let $PrcsGrp       = ''

 !------------------------------------------------------------
 !Specified at run time to retrieve options and/or ESPP info
 !------------------------------------------------------------
  if $RC_Options = 'Y'
    do Get-Grants
    do Get-Exercises
    do Get-Dispositions
    do Get-Cancellations
    do Get-Expirations
    do Get-Releases
    do Get-Repurchases
  end-if

  if $RC_ESPP = 'Y'
    do Get-ESPP-Contributions
    do Get-ESPP-Purchases
    do Get-ESPP-Dispositions
  end-if

 !-----------------------------------------------------
 ! Only print split info if other details were printed
 !-----------------------------------------------------
  if $Print = 'Y'
    do Get-Stock-Splits
    new-page
  end-if

from PS_JOB            AA,
     PS_ST_INSIDER_TBL BB
where AA.EFFDT    = (select MAX(EFFDT)
                       from PS_JOB
                      where EMPLID    = AA.EMPLID
                        and EMPL_RCD  = AA.EMPL_RCD
                        and EFFDT    <= $AsOfToday)
  and AA.EMPL_RCD = [$PRIM_JOB_CLAUSE]
  and AA.EFFSEQ   = (select MAX(EFFSEQ)
                        from PS_JOB
                       where EMPLID    = AA.EMPLID
                         and EMPL_RCD  = AA.EMPL_RCD
                         and EFFDT     = AA.EFFDT)
  and BB.EMPLID   = AA.EMPLID
  and BB.STOCK_ID = $StockID
  and BB.EFFDT    = (select MAX(EFFDT)
                       from PS_ST_INSIDER_TBL
                      where EMPLID    = BB.EMPLID
                        and STOCK_ID  = BB.STOCK_ID
                        and EFFDT    <= $AsOfToday)
  [$WhereInsider]
order by AA.EMPLID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Employees
! Descr:   Retrieves employees and checks for any stock activity.
!-----------------------------------------------------------------------
Begin-Procedure Get-Employees

  do Define-PrimJob-Clause('AAA',$AsOfToday, $PRIM_JOB_CLAUSE)     ! getprimj.sqc

Begin-Select

AAA.EMPLID
AAA.TAX_LOCATION_CD
AAA.COMPANY
AAA.PAYGROUP

  let #LastPageCount = #page-count
  let $Vest          = 'N'
  let $Print         = 'N'
  let $NewEmp        = 'Y'
  let $Emplid        = rtrim(&aaa.emplid, ' ')
  let $TaxCode       = rtrim(&aaa.tax_location_cd, ' ')
  let $Company       = rtrim(&aaa.company, ' ')
  let $Paygroup      = rtrim(&aaa.paygroup, ' ')
  let $PrcsGrp       = ''

 !------------------------------------------------------------
 !Specified at run time to retrieve options and/or ESPP info
 !------------------------------------------------------------
  if $RC_Options = 'Y'
    do Get-Grants
    do Get-Exercises
    do Get-Dispositions
    do Get-Cancellations
    do Get-Expirations
    do Get-Releases
    do Get-Repurchases
  end-if

  if $RC_ESPP = 'Y'
    do Get-ESPP-Contributions
    do Get-ESPP-Purchases
    do Get-ESPP-Dispositions
  end-if

 !-----------------------------------------------------
 ! Only print split info if other details were printed
 !-----------------------------------------------------
  if $Print = 'Y'
    do Get-Stock-Splits
    new-page            !separate page for each employee
  end-if

from PS_JOB AAA
where AAA.EFFDT     = (select MAX(EFFDT)
                         from PS_JOB
                        where EMPLID   = AAA.EMPLID
                          and EMPL_RCD = AAA.EMPL_RCD
                          and EFFDT   <= $AsOfDate)
  and AAA.EMPL_RCD  = [$PRIM_JOB_CLAUSE]
  and AAA.EFFSEQ    = (select MAX(EFFSEQ)
                         from PS_JOB
                        where EMPLID   = AAA.EMPLID
                          and EMPL_RCD = AAA.EMPL_RCD
                          and EFFDT    = AAA.EFFDT)
  [$WhereEmplid]
order by AAA.EMPLID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Grants
! Descr:   Retrieves any grant information for an employee and date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-Grants

  let $Header   = 'N'
  let #TotGrant = 0
  let #TotVest  = 0
  let #Row      = 0
  let #VestRow  = 0

Begin-Select

C.GRANT_DT
C.GRANT_NBR
C.SHARES_GRANTED
C.GRANT_PRICE
C.STOCK_PLAN
C.ST_OPTION_TYPE

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &c.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    print $OptGrantLbl                                     (+2,001,019) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $VestSchdLbl                                     (  ,108,049) underline
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    print $GrantDtLbl                                      (  ,024,010) underline
    print $GrantPrcLbl                                     (  ,036,011) underline
    print $ShrGrantLbl                                     (  ,049,022) underline
    print $GrantFmvLbl                                     (  ,073,011) underline
    print $PerOrgLbl                                       (  ,086,010) underline
    print $PlanLbl                                         (  ,096,010) underline
    print $VestDtLbl                                       (  ,108,010) underline
    print $SharesLbl                                       (  ,120,022) underline
    print $ExprDtLbl                                       (  ,144,015) underline
  end-if

  do Get-Grant-Fmv-Rules
  do Get_FMV_Prices ($GrantFmvMethod,$StockId,&c.grant_dt,$FmvHolidayRule,$FmvWeekendRule,#GrantFmv)

  if $Vest = 'Y'
    print ' '                                              (+1,   ,   )
  end-if
  let $GrantNbr = rtrim(&c.grant_nbr,' ')
  let $GrantNbr = lpad($GrantNbr,10,' ')

  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  do Format-DateTime (&c.grant_dt, $GrantDt, {DEFDATE}, '', '')
  print $GrantDt                                           (  ,024,010)
  print &c.grant_price                                     (  ,036,011) edit $999.999999
  print &c.shares_granted                                  (  ,049,022) edit 999,999,999,999.999999
  print #GrantFmv                                          (  ,073,011) edit $999.999999
  do Get-Empl-Rcd
  print &c.stock_plan                                      (  ,096,010)
  add &c.shares_granted to #TotGrant
  do Get-Vesting-Detail
  let $Header    = 'Y'
  add 1 to #Row

from PS_ST_GRANT C
where C.GRANT_STATUS  = 'A'
  and C.EMPLID        = $Emplid
  and C.GRANT_DT     >= $RC_FromDate
  and C.GRANT_DT     <= $RC_ThruDate
  and C.STOCK_ID      = $StockId
order by C.GRANT_DT,
         C.GRANT_NBR
End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1 or #VestRow > 1
    print '_'                                              (+1,049,022) fill
    print '_'                                              (  ,110,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotGrant                                        (  ,049,022) edit 999,999,999,999.999999
    print #TotVest                                         (  ,120,022) edit 999,999,999,999.999999
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Grant-Fmv-Rules
!-----------------------------------------------------------------------
Begin-Procedure Get-Grant-Fmv-Rules

  let $GrantFmvMethod = ''
  let $FmvHolidayRule = ''
  let $FmvWeekendRule = ''

Begin-Select

ST_OPTION_PLAN.GRANT_FMV_MTHD
ST_OPTION_PLAN.FMV_HOLIDAY_RULE
ST_OPTION_PLAN.FMV_WEEKEND_RULE

  let $GrantFmvMethod = rtrim(&st_option_plan.grant_fmv_mthd,' ')
  let $FmvHolidayRule = rtrim(&st_option_plan.fmv_holiday_rule,' ')
  let $FmvWeekendRule = rtrim(&st_option_plan.fmv_weekend_rule,' ')

 from PS_ST_OPTION_PLAN ST_OPTION_PLAN
where ST_OPTION_PLAN.STOCK_ID        = $StockId
  and ST_OPTION_PLAN.STOCK_PLAN      = &c.stock_plan
  and ST_OPTION_PLAN.STOCK_PLAN_TYPE = 'O'
  and ST_OPTION_PLAN.EFFDT           = (select MAX(EFFDT)
                                          from PS_ST_OPTION_PLAN
                                         where STOCK_ID        = ST_OPTION_PLAN.STOCK_ID
                                           and STOCK_PLAN      = ST_OPTION_PLAN.STOCK_PLAN
                                           and STOCK_PLAN_TYPE = ST_OPTION_PLAN.STOCK_PLAN_TYPE
                                           and EFFDT          <= &c.grant_dt)

End-Select

End-Procedure


!-----------------------------------------------------------------------------------------
! Section: Get-Empl-Rcd
! Descr:   Retrieves the Empl_rcd for the Emplid, Stock id & Grant number
!-----------------------------------------------------------------------------------------
Begin-Procedure Get-Empl-Rcd

Begin-Select
ST.EMPL_RCD
      let #Emplrcd = &st.empl_rcd

     do Get-Per-Org

from PS_ST_GRANT ST
where ST.EMPLID     = $Emplid
  and ST.STOCK_ID   = $StockID
  and ST.GRANT_NBR  = &c.grant_nbr

End-Select
End-Procedure



!-----------------------------------------------------------------------------------------
! Section: Get-Per-Org
! Descr:   Retrieves the Person Organisation relationship for that grant.
!-----------------------------------------------------------------------------------------
Begin-Procedure Get-Per-Org

Begin-Select
PR.PER_ORG

   print &pr.per_org                                   (  ,086,008)
from PS_PER_ORG_ASGN PR
where PR.EMPLID     = $Emplid
  and PR.EMPL_RCD   = #Emplrcd

End-Select
End-Procedure



!-----------------------------------------------------------------------
! Section: Get-Vesting-Detail
! Descr:   Retrieves all vesting info for a particular grant number.
!-----------------------------------------------------------------------
Begin-Procedure Get-Vesting-Detail

  let $Vest    = 'N'

Begin-Select

D.VEST_DT
D.SHARES_VESTED
D.EXPIRATN_DT
D.GRANT_NBR
D.EMPLID
D.TERM_EXPIRATN_DT

  if $Vest = 'N'
    print ' '                                              (-1,   ,   )
  end-if
  do Format-DateTime (&d.vest_dt, $out, {DEFDATE}, '', '')
  print $out                                               (+1,108,010)
  print &d.shares_vested                                   (  ,120,022) edit 999,999,999,999.999999
  

  do Format-DateTime (&d.term_expiratn_dt, $out, {DEFDATE}, '', '')
  if $out <> ' '
     print $out                                               (  ,144,010)
  else
     do Format-DateTime (&d.expiratn_dt, $out, {DEFDATE}, '', '')
     print $out                                               (  ,144,010)
  end-if

  add &d.shares_vested to #TotVest
  let $Vest     = 'Y'
  add 1 to #VestRow

from PS_ST_GRNT_VST_DTL D
where D.EMPLID     = $Emplid
  and D.STOCK_ID   = $StockID
  and D.GRANT_NBR  = &c.grant_nbr
  and D.VEST_EFFDT = (select MAX(VEST_EFFDT)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID      = D.EMPLID
                         and STOCK_ID    = D.STOCK_ID
                         and GRANT_NBR   = D.GRANT_NBR
                         and VEST_EFFDT <= $AsOfToday)
  and D.SEQ_NUM    = (select MAX(SEQ_NUM)
                        from PS_ST_GRNT_VST_DTL
                       where EMPLID      = D.EMPLID
                         and STOCK_ID    = D.STOCK_ID
                         and GRANT_NBR   = D.GRANT_NBR
                         and VEST_EFFDT  = D.VEST_EFFDT)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Exercises
! Descr:   Retrieves any exercises for an employee and date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-Exercises

  let $Header        = 'N'
  let #Row           = 0
  let #TotExer       = 0
  let #TotOrd        = 0
  let #TotAMT        = 0
  let #LastPageCount = #page-count

Begin-Select

E.EXERCISE_DT
E.SHARES_EXERCISED
E.EXERCISE_FMV
E.ST_ORD_INCOME
E.ST_AMT_INCOME
E.EXERCISE_METHOD
E.EXERCISE_COST
E.TRADE_FOR_TAXES
E.GRANT_NBR
E.SWAP_VALUE
E.EXERCISE_NBR
F.GRANT_PRICE
F.ST_OPTION_TYPE

  let $FieldName  = 'EXERCISE_METHOD'
  let $FieldValue = &e.exercise_method
  do Read-Translate-Table
  let $ShrMthd = $XlatShortName
  let $ExerciseMethod   = rtrim(&e.exercise_method,' ')

  let $FieldName  = 'PSYESNO'
  let $FieldValue = &e.trade_for_taxes
  do Read-Translate-Table
  let $TaxMthd = $XlatShortName

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &f.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName
  let $Option-Type = rtrim(&f.st_option_type, ' ')

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $OptExerLbl                                      (+2,001,022) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $GrantPrcLbl                                     (  ,024,011)
    print $ExerLbl                                         (  ,037,010)
    print $ExerLbl                                         (  ,087,010)
    print $TradeLbl                                        (  ,099,010)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    if $ExerciseMethod = 'SWAP'
        print $CostBasis1Lbl                                (  ,024,010) underline
    else
        print ' '                                          (  ,024,011) fill underline
     end-if
    print $DateLbl                                         (  ,037,010) underline
    print $ShrExerLbl                                      (  ,049,022) underline
    print $ExerFmvLbl                                      (  ,073,012) underline
    print $MthdLbl                                         (  ,087,010) underline
    print $TaxesLbl                                        (  ,099,010) underline
    print $OrdIncLbl                                       (  ,111,019) underline
    print $TaxIncLbl                                       (  ,132,021) underline
  end-if

  let #OrdIncome = round(&e.st_ord_income,2)
  let #AmtIncome = round(&e.st_amt_income,2)
  let $GrantNbr  = rtrim(&e.grant_nbr,' ')
  let $GrantNbr  = lpad($GrantNbr,10,' ')
  do Format-DateTime (&e.exercise_dt, $out, {DEFDATE}, '', '')
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  print &f.grant_price                                     (  ,024,011) edit $999.999999
  print $out                                               (  ,037,010)
  print &e.shares_exercised                                (  ,049,022) edit 999,999,999,999.999999
  print &e.exercise_fmv                                    (  ,074,011) edit $999.999999
  print $ShrMthd                                           (  ,087,010)
  print $TaxMthd                                           (  ,099,010)
  print #OrdIncome                                         (  ,111,019) edit $999,999,999,999.99
  print #AmtIncome                                         (  ,132,019) edit $999,999,999,999.99
  add &e.shares_exercised to #TotExer
  add #OrdIncome          to #TotOrd
  add #AmtIncome          to #TotAmt
  let $Header   = 'Y'
  add 1 to #Row

  if $ExerciseMethod = 'SWAP'
     let #CostBasis = 0
     let #ExerciseNbr      = &e.exercise_nbr
     let #ExerciseCost     = round(&e.exercise_cost,2)
     let #SwapValue        = round(&e.swap_value,2)
     let #ExerciseFmv      = &e.exercise_fmv
     do Get-Shares-Issued
     do Get-Taxes
     if $Option-Type = 'ISO' or $Option-Type = 'ISAR'
         let #CostBasis = (#ExerciseCost - #SwapValue) / #TotalSharesIssued
         let #CostBasis = round(#CostBasis,6)
         print #CostBasis                                  (+1,024,011) edit $999.999999
         add 1 to #Row
     else
        if $Option-Type = 'NQ' or $Option-Type = 'NSAR'
            let #CostBasis = #ExerciseFMV
            let #CostBasis = round(#CostBasis,6)
            print #CostBasis                               (+1,024,011) edit $999.999999
            add 1 to #Row
        end-if
     end-if
  end-if

from PS_ST_GRANT_EXER E,
     PS_ST_GRANT      F
where E.EMPLID           = $Emplid
  and E.STOCK_ID         = $StockID
  and E.EXERCISE_DT     >= $RC_FromDate
  and E.EXERCISE_DT     <= $RC_ThruDate
  and E.EMPLID           = F.EMPLID
  and E.STOCK_ID         = F.STOCK_ID
  and E.GRANT_NBR        = F.GRANT_NBR
  and E.EXERCISE_STATUS  = 'A'
order by E.EXERCISE_DT,
         E.SHARES_EXERCISED

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,049,022) fill
    print '_'                                              (  ,111,019) fill
    print '_'                                              (  ,132,019) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotExer                                         (  ,049,022) edit 999,999,999,999.999999
    print #TotOrd                                          (  ,111,019) edit $999,999,999,999.99
    print #TotAMT                                          (  ,132,019) edit $999,999,999,999.99
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Dispositions
! Descr:   Retrieves any option dispositions for an employee and date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-Dispositions

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotDisp       = 0
  let #TotVal        = 0
  let #TotOrd        = 0

Begin-Select

G.DISPOSITION_DT
G.SHARES_DISPOSED
G.DISPOSITION_PRICE
G.ST_ORD_INCOME
G.GRANT_NBR
G.EXERCISE_NBR
H.GRANT_PRICE
H.ST_OPTION_TYPE

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &h.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName
  let $Option-Type = rtrim(&h.st_option_type, ' ')

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $OptDispLbl                                      (+2,001,025) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $GrantPrcLbl                                     (  ,024,011)
    print $DispLbl                                         (  ,037,011)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    if $ExerciseMethod = 'SWAP'
        print $CostBasis1Lbl                               (  ,024,010) underline
    else
        print ' '                                          (  ,024,011) fill underline
    end-if
    print $Date11Lbl                                       (  ,037,010) underline
    print $ShrDispLbl                                      (  ,050,022) underline
    print $DispPrcLbl                                      (  ,075,017) underline
    print $DispValLbl                                      (  ,094,019) underline
    print $OrdIncLbl                                       (  ,115,019) underline
    let #LastPageCount = #page-count
  end-if

  let #DispValue = round((&g.shares_disposed * &g.disposition_price),2)
  let #OrdIncome = round(&g.st_ord_income,2)
  let $GrantNbr  = rtrim(&g.grant_nbr,' ')
  let $GrantNbr  = lpad($GrantNbr,10,' ')
  let #SharesDisposed = &g.shares_disposed

  do Format-DateTime (&g.disposition_dt, $out, {DEFDATE}, '', '')
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  print &h.grant_price                                     (  ,024,011) edit $999.999999
  print $out                                               (  ,037,010)
  print &g.shares_disposed                                 (  ,050,022) edit 999,999,999,999.999999
  print &g.disposition_price                               (  ,081,011) edit $999.999999
  print #DispValue                                         (  ,094,019) edit $$99,999,999,999.99

  do Get-Exer

  if $ExerciseMethod = 'SWAP'
     let #CostBasis = 0
     let #ExerciseNbr      = &e1.exercise_nbr
     let #ExerciseCost     = round(&e1.exercise_cost,2)
     let #SwapValue        = round(&e1.swap_value,2)
     let #ExerciseFmv      = &e1.exercise_fmv
     do Get-Shares-Issued
     do Get-Taxes
     if $Option-Type = 'ISO' or $Option-Type = 'ISAR'
         let #CostBasis = (#ExerciseCost - #SwapValue) / #TotalSharesIssued
     else
        if $Option-Type = 'NQ' or $Option-Type = 'NSAR'
            let #CostBasis = #ExerciseFMV
        end-if
     end-if
  end-if

  if $ExerciseMethod = 'SWAP'
     let #OrdIncome = (#ExerciseFmv - #CostBasis) * #SharesDisposed
     let #OrdIncome = round(#OrdIncome,2)
  end-if

  print #OrdIncome                                         (  ,115,019) edit $$99,999,999,999.99
  add 1 to #Row

  if $ExerciseMethod = 'SWAP'
     if $Option-Type = 'ISO' or $Option-Type = 'ISAR' or $Option-Type = 'NQ' or $Option-Type = 'NSAR'
         print #CostBasis                                  (+1,024,011) edit $999.999999
         add 1 to #Row
     end-if
  end-if

  add &g.shares_disposed to #TotDisp
  add #DispValue         to #TotVal
  add #OrdIncome         to #TotOrd
  let $Header   = 'Y'
  add 1 to #Row

 from PS_ST_EXER_DISPOSN  G,
      PS_ST_GRANT         H
 where G.EMPLID              = $Emplid
   and G.STOCK_ID            = $StockID
   and G.DISPOSITION_DT     >= $RC_FromDate
   and G.DISPOSITION_DT     <= $RC_ThruDate
   and G.DISPOSITION_STATUS  = 'C'
   and G.EMPLID              = H.EMPLID
   and G.STOCK_ID            = H.STOCK_ID
   and G.GRANT_NBR           = H.GRANT_NBR

 UNION
 select
  I.DISPOSITION_DT
 ,I.SHARES_DISPOSED
 ,I.DISPOSITION_PRICE
 ,I.ST_ORD_INCOME
 ,I.GRANT_NBR
 ,I.EXERCISE_NBR
 ,H.GRANT_PRICE
 ,H.ST_OPTION_TYPE
 from PS_ST_REL_DISPOSN   I,
      PS_ST_GRANT         H
 where I.EMPLID              = $Emplid
   and I.STOCK_ID            = $StockID
   and I.DISPOSITION_DT     >= $RC_FromDate
   and I.DISPOSITION_DT     <= $RC_ThruDate
   and I.EMPLID              = H.EMPLID
   and I.STOCK_ID            = H.STOCK_ID
   and I.GRANT_NBR           = H.GRANT_NBR
   and I.DISPOSITION_STATUS  = 'C'
   order by 1,2
End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,050,022) fill
    print '_'                                              (  ,094,019) fill
    print '_'                                              (  ,115,019) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotDisp                                         (  ,050,022) edit 999,999,999,999.999999
    print #TotVal                                          (  ,094,019) edit $$99,999,999,999.99
    print #TotOrd                                          (  ,115,019) edit $$99,999,999,999.99
  end-if

End-Procedure

Begin-Procedure Get-Exer

Begin-Select

E1.EXERCISE_METHOD
E1.EXERCISE_FMV
E1.EXERCISE_COST
E1.SWAP_VALUE
E1.EXERCISE_NBR
E1.ST_ORD_INCOME

  let $ExerciseMethod   = rtrim(&e1.exercise_method,' ')


from PS_ST_GRANT_EXER    E1,
     PS_ST_EXER_DISPOSN  I1

where E1.EMPLID           = $Emplid
  and E1.STOCK_ID         = $StockID
  and E1.EXERCISE_DT     >= $RC_FromDate
  and E1.EXERCISE_DT     <= $RC_ThruDate
  and E1.EXERCISE_STATUS  = 'A'
  and E1.EXERCISE_NBR     = &G.EXERCISE_NBR
  and E1.EMPLID           = I1.EMPLID
  and E1.STOCK_ID         = I1.STOCK_ID
  and E1.GRANT_NBR        = I1.GRANT_NBR
  and E1.EXERCISE_NBR     = I1.EXERCISE_NBR
  and I1.DISPOSITION_STATUS = 'C'

End-Select

End-Procedure


!-----------------------------------------------------------------------
! Section: Get-Shares-Issued
! Descr:   Add all shares issued for a given exercise number
!-----------------------------------------------------------------------
Begin-Procedure Get-Shares-Issued

  let #TotalSharesIssued = 0

Begin-Select

HH.SHARES_ISSUED

  let #TotalSharesIssued = #TotalSharesIssued + &hh.shares_issued

from PS_ST_EXER_ISSUE HH
where HH.EMPLID          = $Emplid
  and HH.STOCK_ID        = $StockID
  and HH.GRANT_NBR       = $GrantNbr
  and HH.EXERCISE_NBR    = #ExerciseNbr

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Get-Taxes
! Descr:     Retrieve tax data for a given exercise.
!-----------------------------------------------------------------------
Begin-Procedure Get-Taxes

  let #TotalTax = 0

Begin-Select
T.TAX_CUR
T.STATE
T.LOCALITY
T.ST_STOCK_TAX_TYPE

  let $TaxState      = rtrim(&t.state,' ')
  let $TaxLocality   = rtrim(&t.locality,' ')
  let #TaxCur        = &t.tax_cur
  add &t.tax_cur to #TotalTax

from PS_ST_EXER_TAXES    T,
     PS_ST_TAX_TYPE_TBL  T1
where T.EMPLID             = $Emplid
  and T.STOCK_ID           = $StockID
  and T.GRANT_NBR          = $GrantNbr
  and T.EXERCISE_NBR       = #ExerciseNbr
  and T.COUNTRY            = $TaxCountry
  and T1.COUNTRY           = T.COUNTRY
  and T1.ST_STOCK_TAX_TYPE = T.ST_STOCK_TAX_TYPE
order by T.STATE,
         T.ST_STOCK_TAX_TYPE,
         T.LOCALITY

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Cancellations
! Descr:   Retrieves any cancelled shares for an employee, given a date range.
!          Union is used to retrieve b/c there is differnt criteria for cancel
!          due to reprice or not reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Cancellations

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #SharesCancel  = 0
  let #Row           = 0
  let #TotCncl       = 0
  let $WhereCancelDt = ' and (J.ST_CANCEL_DT <= ' || $SQLQuote || $RC_ThruDate || $SQLQuote ||
                       ' and  J.ST_CANCEL_DT >= ' || $SQLQuote || $RC_FromDate || $SQLQuote || ')'

Begin-Select

SUM(J.SHARES_VESTED)    &vest
SUM(J.SHARES_EXERCISED) &exer
J.GRANT_NBR
J.ST_CANCEL_DT
J.ST_CANCEL_REASON
K.ST_OPTION_TYPE

  let $FieldName  = 'ST_CANCEL_REASON'
  let $FieldValue = &j.st_cancel_reason
  do Read-Translate-Table
  let $Reason = $XlatShortName

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &k.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName

  let #SharesCancel = (&vest - &exer)

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=5
    print $OptCnclLbl                                      (+2,001,026) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $CanclLbl                                        (  ,020,012)
    print $CancelLbl                                       (  ,034,010)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    print $Date12Lbl                                       (  ,020,012) underline
    print $ReasonLbl                                       (  ,034,010) underline
    print $ShrCnclLbl                                      (  ,056,022) underline
  end-if

  let #SharesCancel = round(#SharesCancel,6)
  let $GrantNbr     = rtrim(&j.grant_nbr,' ')
  let $GrantNbr     = lpad($GrantNbr,10,' ')
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  do Format-DateTime (&j.st_cancel_dt, $out, {DEFDATE}, '', '')
  print $out                                               (  ,020,012)
  print $Reason                                            (  ,034,010)
  print #SharesCancel                                      (  ,056,022) edit 999,999,999,999.999999
  add #SharesCancel to #TotCncl
  let $Header   = 'Y'
  add 1 to #Row

from PS_ST_STOK001_TBL  J,
     PS_ST_GRANT        K
where J.DATETIME_STAMP     = $CurrentTime
  and J.PROCESSINSTANCE    = #Instance
  and J.STOCK_ID           = $StockID
  and J.EMPLID             = $Emplid
  and J.ST_CANCEL_REASON   = 'TER'
  and J.ST_CANCEL_DT      <= J.VEST_DT
  and J.EMPLID             = K.EMPLID
  and J.STOCK_ID           = K.STOCK_ID
  and J.GRANT_NBR          = K.GRANT_NBR
  and J.SHARES_VESTED      > J.SHARES_EXERCISED
  [$WhereCancelDt]
group by J.GRANT_NBR,J.ST_CANCEL_DT,J.ST_CANCEL_REASON,K.ST_OPTION_TYPE

 UNION
 select
  SUM(J.SHARES_VESTED)
 ,SUM(J.SHARES_EXERCISED)
 ,J.GRANT_NBR
 ,J.ST_CANCEL_DT
 ,J.ST_CANCEL_REASON
 ,K.ST_OPTION_TYPE

from PS_ST_STOK001_TBL  J,
     PS_ST_GRANT        K
where J.DATETIME_STAMP     = $CurrentTime
  and J.PROCESSINSTANCE    = #Instance
  and J.STOCK_ID           = $StockID
  and J.EMPLID             = $Emplid
  and (J.ST_CANCEL_REASON  = 'RPRC'
   or J.ST_CANCEL_REASON   = 'RESC')
  and J.ST_CANCEL_DT       < J.EXPIRATN_DT
  and (J.ST_CANCEL_DT      < J.TERM_EXPIRATN_DT
   OR J.TERM_EXPIRATN_DT  IS NULL)
  and J.EMPLID             = K.EMPLID
  and J.STOCK_ID           = K.STOCK_ID
  and J.GRANT_NBR          = K.GRANT_NBR
  and J.SHARES_VESTED      > J.SHARES_EXERCISED
  [$WhereCancelDt]
group by J.GRANT_NBR,J.ST_CANCEL_DT,J.ST_CANCEL_REASON,K.ST_OPTION_TYPE
order by 4,3

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,014,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotCncl                                         (  ,056,022) edit 999,999,999,999.999999
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Expirations
! Descr:   Retrieves any expired shares for an employee, given a date range.
!          Union is used to retrieve b/c there is differnt criteria for cancel
!          due to reprice or not reprice.
!-----------------------------------------------------------------------
Begin-Procedure Get-Expirations

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #SharesExpired = 0
  let #Row           = 0
  let #TotExpr       = 0
  let $WhereExpireDt = ' and ((L.EXPIRATN_DT >= '    || $SQLQuote || $RC_FromDate   || $SQLQuote ||
                       ' and L.EXPIRATN_DT <= '     || $SQLQuote || $RC_ThruDate   || $SQLQuote ||
                       ') OR (L.TERM_EXPIRATN_DT >= '|| $SQLQuote || $RC_FromDate   || $SQLQuote ||
                       ' and L.TERM_EXPIRATN_DT <= '|| $SQLQuote || $RC_ThruDate   || $SQLQuote ||'))'

Begin-Select

SUM(L.SHARES_VESTED)    &vest1
SUM(L.SHARES_EXERCISED) &exer1
L.GRANT_NBR
L.EXPIRATN_DT
L.TERM_EXPIRATN_DT
M.ST_OPTION_TYPE

  let $FieldName     = 'ST_OPTION_TYPE'
  let $FieldValue    = &m.st_option_type
  do Read-Translate-Table
  let $OptionType    = $XlatShortName
  let #SharesExpired = (&vest1 - &exer1)

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $OptExprLbl                                      (+2,001,024) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $ExprLbl                                         (  ,024,010)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    print $DateLbl                                         (  ,024,010) underline
    print $ShrExprLbl                                      (  ,036,022) underline
  end-if
  do Convert-To-DTU-Date(&l.expiratn_dt,$ExpireDt)
  do Convert-To-DTU-Date(&l.term_expiratn_dt,$TermExpireDt)
  if $TermExpireDt <> ''
    if $TermExpireDt < $ExpireDt
      let $ExpireDt = $TermExpireDt
    end-if
  end-if
  let #SharesExpired = round(#SharesExpired,6)
  let $GrantNbr      = rtrim(&l.grant_nbr,' ')
  let $GrantNbr      = lpad($GrantNbr,10,' ')
  do Format-DateTime (&l.expiratn_dt, $ExpireDt, {DEFDATE}, '', '')
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  print $ExpireDt                                          (  ,024,010)
  print #SharesExpired                                     (  ,036,022) edit 999,999,999,999.999999
  add #SharesExpired to #TotExpr
  let $Header   = 'Y'
  add 1 to #Row

 from PS_ST_STOK001_TBL  L,
      PS_ST_GRANT        M
 where L.DATETIME_STAMP     = $CurrentTime
   and L.PROCESSINSTANCE    = #Instance
   and L.STOCK_ID           = $StockID
   and (L.ST_CANCEL_REASON  = 'TER'
    or L.ST_CANCEL_REASON   = ' ')
   and (L.ST_CANCEL_DT      > L.VEST_DT
    OR L.ST_CANCEL_DT      IS NULL)
   and L.EXPIRATN_DT       >= L.VEST_DT
   and (L.TERM_EXPIRATN_DT >= L.VEST_DT
    or L.TERM_EXPIRATN_DT  IS NULL)
   and L.EMPLID             = $Emplid
   and ((L.EXPIRATN_DT     >= $RC_FromDate
   and L.EXPIRATN_DT       <= $RC_ThruDate)
    or (L.TERM_EXPIRATN_DT >= $RC_FromDate
   and L.TERM_EXPIRATN_DT  <= $RC_ThruDate))
   and L.SHARES_VESTED      > L.SHARES_EXERCISED
   and L.EMPLID             = M.EMPLID
   and L.STOCK_ID           = M.STOCK_ID
   and L.GRANT_NBR          = M.GRANT_NBR
   GROUP BY L.GRANT_NBR,L.EXPIRATN_DT,L.TERM_EXPIRATN_DT,M.ST_OPTION_TYPE

 UNION
 select
  SUM(L.SHARES_VESTED)
 ,SUM(L.SHARES_EXERCISED)
 ,L.GRANT_NBR
 ,L.EXPIRATN_DT
 ,L.TERM_EXPIRATN_DT
 ,M.ST_OPTION_TYPE
 from PS_ST_STOK001_TBL  L,
      PS_ST_GRANT        M
 where L.DATETIME_STAMP     = $CurrentTime
   and L.PROCESSINSTANCE    = #Instance
   and L.STOCK_ID           = $StockID
   and (L.ST_CANCEL_REASON  = 'RPRC'
    or L.ST_CANCEL_REASON   = 'RESC')
   and (L.ST_CANCEL_DT     >= L.EXPIRATN_DT
    or L.ST_CANCEL_DT      >= L.TERM_EXPIRATN_DT)
   and L.EMPLID             = $Emplid
   [$WhereExpireDt]
   and L.SHARES_VESTED      > L.SHARES_EXERCISED
   and L.EMPLID             = M.EMPLID
   and L.STOCK_ID           = M.STOCK_ID
   and L.GRANT_NBR          = M.GRANT_NBR
 GROUP BY L.GRANT_NBR,L.EXPIRATN_DT,L.TERM_EXPIRATN_DT,M.ST_OPTION_TYPE
 order by 4,3
End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
 if #Row > 1
    print '_'                                              (+1,036,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotExpr                                         (  ,036,022) edit 999,999,999,999.999999
 end-if

End-Procedure Get-Expirations

!-----------------------------------------------------------------------
! Section: Get-Release
! Descr:   Retrieves any releases for an employee, given a date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-Releases

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotRel        = 0
  let #TotOrd        = 0
  let #TotAmt        = 0

Begin-Select

N.RELEASE_DT
N.SHARES_RELEASED
N.RELEASE_FMV
N.ST_ORD_INCOME
N.ST_AMT_INCOME
N.RELEASE_METHOD
N.GRANT_NBR
N.EXERCISE_NBR
O.GRANT_PRICE
O.ST_OPTION_TYPE

  let $FieldName  = 'RELEASE_METHOD'
  let $FieldValue = &n.release_method
  do Read-Translate-Table
  let $TaxMthd = $XlatShortName

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &o.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $OptRelLbl                                       (+2,001,021) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $RelLbl                                          (  ,037,010)
    print $ReleaseLbl                                      (  ,049,010)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    print $GrantPrcLbl                                     (  ,024,011) underline
    print $DateLbl                                         (  ,037,010) underline
    print $MthdLbl                                         (  ,049,010) underline
    print $ShrRelLbl                                       (  ,061,022) underline
    print $RelFmvLbl                                       (  ,085,011) underline
    print $OrdIncLbl                                       (  ,098,019) underline
    print $TaxIncLbl                                       (  ,119,021) underline
  end-if

  if $Header = 'Y'
    print ' '                                              (+1,   ,   )
  end-if

  let $GrantNbr = rtrim(&n.grant_nbr,' ')
  let $GrantNbr = lpad($GrantNbr,10,' ')
  let #OrdIncome = round(&n.st_ord_income,2)
  let #AmtIncome = round(&n.st_amt_income,2)
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  print &o.grant_price                                     (  ,024,011) edit $999.999999
  do Format-DateTime (&n.release_dt, $out, {DEFDATE}, '', '')
  print $out                                               (  ,037,010)
  print $TaxMthd                                           (  ,049,010)
  print &n.shares_released                                 (  ,061,022) edit 999,999,999,999.999999
  print &n.release_fmv                                     (  ,085,011) edit $999.999999
  print #OrdIncome                                         (  ,098,019) edit $$99,999,999,999.99
  print #AmtIncome                                         (  ,119,019) edit $$99,999,999,999.99
  add &n.shares_released to #TotRel
  add #OrdIncome         to #TotOrd
  add #AmtIncome         to #TotAmt
  let $Header  = 'Y'
  add 1 to #Row

from PS_ST_EXER_RELEASE  N,
     PS_ST_GRANT         O,
     PS_ST_GRANT_EXER    P
where N.EMPLID          = $Emplid
  and N.STOCK_ID        = $StockID
  and N.RELEASE_DT     >= $RC_FromDate
  and N.RELEASE_DT     <= $RC_ThruDate
  and N.RELEASE_STATUS  = 'A'
  and N.EMPLID          = O.EMPLID
  and N.STOCK_ID        = O.STOCK_ID
  and N.GRANT_NBR       = O.GRANT_NBR
  and N.EMPLID          = P.EMPLID
  and N.STOCK_ID        = P.STOCK_ID
  and N.GRANT_NBR       = P.GRANT_NBR
  and N.EXERCISE_NBR    = P.EXERCISE_NBR
order by N.RELEASE_DT,
         N.SHARES_RELEASED

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,061,022) fill
    print '_'                                              (  ,098,019) fill
    print '_'                                              (  ,119,019) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotRel                                          (  ,061,022) edit 999,999,999,999.999999
    print #TotOrd                                          (  ,098,019) edit $$99,999,999,999.99
    print #TotAMT                                          (  ,119,019) edit $$99,999,999,999.99
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Repurchases
! Descr:   Retrieves any repurchases for an employee, given a date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-Repurchases

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotRepurch    = 0
  let #TotVal        = 0

Begin-Select

Q.REPURCHASE_DT
Q.SHARES_REPURCHASED
Q.REPURCHASE_PRICE
Q.REPURCHASE_VALUE
R.STOCK_PLAN
R.ST_OPTION_TYPE
R.GRANT_NBR

  let $FieldName  = 'ST_OPTION_TYPE'
  let $FieldValue = &r.st_option_type
  do Read-Translate-Table
  let $OptionType = $XlatShortName

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $OptRepLbl                                       (+2,001,024) bold
    print ':'                                              (  ,   ,001) bold
    print $GrantLbl                                        (+1,001,010)
    print $OptLbl                                          (  ,012,010)
    print $RepLbl                                          (  ,036,010)
    print $NbrLbl                                          (+1,001,010) underline
    print $TypeLbl                                         (  ,012,010) underline
    print $PlanLbl                                         (  ,024,010) underline
    print $DateLbl                                         (  ,036,010) underline
    print $ShrRepLbl                                       (  ,048,022) underline
    print $RepPrcLbl                                       (  ,084,016) underline
    print $RepValLbl                                       (  ,102,019) underline
  end-if

  let $GrantNbr = rtrim(&r.grant_nbr,' ')
  let $GrantNbr = lpad($GrantNbr,10,' ')
  print $GrantNbr                                          (+1,001,010)
  print $OptionType                                        (  ,012,010)
  print &r.stock_plan                                      (  ,024,010)
  do Format-DateTime (&q.repurchase_dt, $out, {DEFDATE}, '', '')
  print $out                                               (  ,036,010)
  print &q.shares_repurchased                              (  ,048,022) edit 999,999,999,999.999999
  print &q.repurchase_price                                (  ,089,011) edit $999.999999
  let #RepValue = round(&q.repurchase_value,2)
  print #RepValue                                          (  ,102,019) edit $$99,999,999,999.99
  add &q.shares_repurchased to #TotRepurch
  add #RepValue             to #TotVal
  let $Header  = 'Y'
  add 1 to #Row

from PS_ST_GRNT_REPURCH  Q,
     PS_ST_GRANT         R
where Q.EMPLID             = $Emplid
  and Q.STOCK_ID           = $StockID
  and Q.REPURCHASE_DT     >= $RC_FromDate
  and Q.REPURCHASE_DT     <= $RC_ThruDate
  and Q.REPURCHASE_STATUS  = 'A'
  and Q.EMPLID             = R.EMPLID
  and Q.STOCK_ID           = R.STOCK_ID
  and Q.GRANT_NBR          = R.GRANT_NBR
order by Q.REPURCHASE_DT,
         Q.SHARES_REPURCHASED

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,012,022) fill
    print '_'                                              (  ,048,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotRepurch                                      (  ,048,022) edit 999,999,999,999.999999
    print #TotVal                                          (  ,102,019) edit $$99,999,999,999.99
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-ESPP-Contributions
! Descr:   Retrieves ESPP contributions for an employee, given a date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-ESPP-Contributions

  let $Header        = 'N'
  let $ESPP          = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotPrevCF     = 0
  let #TotNewContr   = 0
  let #TotContr      = 0
  let #TotVal        = 0
  let #TotNewCF      = 0
  let #TotRefund     = 0

Begin-Select

S.OFFERING_ID
S1.PERIOD_BEGIN_DT
S.PERIOD_END_DT
S.ESPP_CARRY_FWD_AMT
S.ESPP_STOCK_CONTRIB
S.ESPP_PURCHASE_AMT
S.ESPP_RESIDUAL_AMT
S.ESPP_RESIDUAL_TYPE

  if $Print = 'Y' and $ESPP = 'N'
    new-page
  end-if
  let $ESPP  = 'Y'

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $ESPPContrLbl                                    (+2,001,028) bold
    print ':'                                              (  ,   ,001) bold
    print $PrevLbl                                         (+1,035,022)
    print $NewLbl                                          (  , +1,022)
    print $TotLbl                                          (  , +1,022)
    print $NewLbl                                          (  ,+24,022)
    print $OffIdLbl                                        (+1,001,011) underline
    print $PurchPerLbl                                     (  , +1,021) underline
    print $CarryFwdLbl                                     (  , +1,022) underline
    print $ContribLbl                                      (  , +1,022) underline
    print $ContribLbl                                      (  , +1,022) underline
    print $PurchValLbl                                     (  , +1,022) underline
    print $CarryFwdLbl                                     (  , +1,022) underline
    print $RefundLbl                                       (  , +1,022) underline
  end-if

  print &s.offering_id                                     (+1,001,010)
  do Format-DateTime (&s1.period_begin_dt, $beginout, {DEFDATE}, '', '')
  do Format-DateTime (&s.period_end_dt, $endout, {DEFDATE}, '', '')
  let $out        = $beginout||'-'||$endout
  let #NewContrib = (&s.espp_stock_contrib - &s.espp_carry_fwd_amt)
  print $out                                               (  , +2,021)
  print &s.espp_carry_fwd_amt                              (  , +1,022) edit 999,999,999,999.999999
  print #NewContrib                                        (  , +1,022) edit 999,999,999,999.999999
  print &s.espp_stock_contrib                              (  , +1,022) edit 999,999,999,999.999999
  print &s.espp_purchase_amt                               (  , +1,022) edit 999,999,999,999.999999
  if &s.espp_residual_type = 'C'
    print &s.espp_residual_amt                             (  , +1,022) edit 999,999,999,999.999999
    print 0                                                (  ,+15,008) edit 9.999999
    add &s.espp_residual_amt to #TotNewCF
  else
    print 0                                                (  ,+15,008) edit 9.999999
    print &s.espp_residual_amt                             (  , +1,022) edit 999,999,999,999.999999
    add &s.espp_residual_amt to #TotRefund
  end-if

  add &s.espp_carry_fwd_amt to #TotPrevCF
  add #NewContrib           to #TotNewContr
  add &s.espp_stock_contrib to #TotContr
  add &s.espp_purchase_amt  to #TotVal
  let $Header        = 'Y'
  add 1 to #Row

from PS_ST_ESPP_PURCH  S,
     PS_ST_PURCHASE_PD S1
where S.EMPLID           = $Emplid
  and S.STOCK_ID         = $StockID
  and S.PERIOD_END_DT   >= $RC_FromDate
  and S.PERIOD_END_DT   <= $RC_ThruDate
  and S.CONFIRMED        = 'Y'
  and S.STOCK_ID         = S1.STOCK_ID
  and S.STOCK_PLAN_TYPE  = S1.STOCK_PLAN_TYPE
  and S.STOCK_PLAN       = S1.STOCK_PLAN
  and S.OFFERING_ID      = S1.OFFERING_ID
  and S.PERIOD_END_DT    = S1.PERIOD_END_DT
order by S.OFFERING_ID,
         S1.PERIOD_BEGIN_DT,
         S.PERIOD_END_DT

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,035,022) fill
    print '_'                                              (  ,+01,022) fill
    print '_'                                              (  ,+01,022) fill
    print '_'                                              (  ,+01,022) fill
    print '_'                                              (  ,+01,022) fill
    print '_'                                              (  ,+01,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotPrevCF                                       (  ,035,022) edit 999,999,999,999.999999
    print #TotNewContr                                     (  ,+01,022) edit 999,999,999,999.999999
    print #TotContr                                        (  ,+01,022) edit 999,999,999,999.999999
    print #TotVal                                          (  ,+01,022) edit 999,999,999,999.999999
    print #TotNewCF                                        (  ,+01,022) edit 999,999,999,999.999999
    print #TotRefund                                       (  ,+01,022) edit 999,999,999,999.999999
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-ESPP-Purchases
! Descr:   Retrieves ESPP purchase for an employee, given a date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-ESPP-Purchases

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotPurch      = 0

Begin-Select

T1.PERIOD_BEGIN_DT
T.PERIOD_END_DT
T.OFFERING_ID
T.STOCK_PLAN
T.GRANT_DT
T.GRANT_FMV
T.PURCHASE_FMV
T.PURCHASE_PRICE
T.SHARES_PURCHASED

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $ESPPPurchLbl                                    (+2,001,015) bold
    print ':'                                              (  ,   ,001) bold
    print $PurchLbl                                        (+1,001,010)
    print $DateLbl                                         (+1,001,010) underline
    print $PurchPerLbl                                     (  , +1,021) underline
    print $OffIdLbl                                        (  , +1,011) underline
    print $PlanLbl                                         (  , +1,010) underline
    print $GrantDtLbl                                      (  , +1,010) underline
    print $GrantFmvLbl                                     (  , +1,022) underline
    print $PurchFmvLbl                                     (  , +1,022) underline
    print $PurchPriceLbl                                   (  , +1,022) underline
    print $ShrPurchLbl                                     (  , +1,022) underline
  end-if

  do Format-DateTime (&t.period_end_dt, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  do Format-DateTime (&t1.period_begin_dt, $beginout, {DEFDATE}, '', '')
  do Format-DateTime (&t.period_end_dt, $endout, {DEFDATE}, '', '')
  let $out = $beginout||'-'||$endout
  print $out                                               (  , +1,021)
  print &t.offering_id                                     (  , +1,011)
  print &t.stock_plan                                      (  , +1,010)
  do Format-DateTime (&t.grant_dt, $out, {DEFDATE}, '', '')
  print $out                                               (  , +1,010)
  print &t.grant_fmv                                       (  , +1,022) edit 999,999,999,999.999999
  print &t.purchase_fmv                                    (  , +1,022) edit 999,999,999,999.999999
  print &t.purchase_price                                  (  , +1,022) edit 999,999,999,999.999999
  print &t.shares_purchased                                (  , +1,022) edit 999,999,999,999.999999
  add &t.shares_purchased to #TotPurch
  let $Header      = 'Y'
  add 1 to #Row

from PS_ST_ESPP_PURCH  T,
     PS_ST_PURCHASE_PD T1
where T.EMPLID           = $Emplid
  and T.STOCK_ID         = $StockID
  and T.PERIOD_END_DT   >= $RC_FromDate
  and T.PERIOD_END_DT   <= $RC_ThruDate
  and T.CONFIRMED        = 'Y'
  and T.STOCK_ID         = T1.STOCK_ID
  and T.STOCK_PLAN_TYPE  = T1.STOCK_PLAN_TYPE
  and T.STOCK_PLAN       = T1.STOCK_PLAN
  and T.OFFERING_ID      = T1.OFFERING_ID
  and T.PERIOD_END_DT    = T1.PERIOD_END_DT
order by T1.PERIOD_BEGIN_DT

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
 if #Row > 1
    print '_'                                              (+1,137,022) fill
    print $TotalLbl                                        (+1,001,010)
    print #TotPurch                                        (  ,134,025) edit 99,999,999,999,999.999999
 end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-ESPP-Dispositions
! Descr:   Retrieves ESPP dispositions for an employee, given a date range.
!-----------------------------------------------------------------------
Begin-Procedure Get-ESPP-Dispositions

  let $Header        = 'N'
  let #LastPageCount = #page-count
  let #Row           = 0
  let #TotDisp       = 0
  let #TotVal        = 0
  let #TotOrd        = 0

Begin-Select

U1.PERIOD_END_DT
U.DISPOSITION_DT
U.DISPOSITION_NBR
U.SHARES_DISPOSED
U.DISPOSITION_TYPE
U.DISPOSITION_PRICE
U.ST_ORD_INCOME
U1.PURCHASE_PRICE
U1.PURCHASE_FMV

  let $DispType   = ''
  let $FieldName  = 'DISPOSITION_TYPE'
  let $FieldValue = &u.disposition_type
  do Read-Translate-Table
  let $DispType   = $XlatShortName

  if $Print = 'Y'
    and $ESPP = 'N'
    new-page
  end-if
  let $ESPP  = 'Y'

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    let $Print = 'Y'
    next-listing need=4
    print $ESPPDispLbl                                     (+2,001,027) bold
    print ':'                                              (  ,   ,001) bold
    print $PurchLbl                                        (+1,001,010)
    print $DispLbl                                         (  , +1,011)
    print $DateLbl                                         (+1,001,010) underline
    print $Date11Lbl                                       (  ,012,011) underline
    print $ShrDispLbl                                      (  ,024,022) underline
    print $DispPrcLbl                                      (  ,048,022) underline
    print $DispValLbl                                      (  ,072,019) underline
    print $OrdIncLbl                                       (  ,093,019) underline
    print $DispTypeLbl                                     (  ,114,016) underline
    print $PurchPriceLbl                                   (  ,132,022) underline
    print $PurchFmvLbl                                     (  ,156,022) underline
  end-if

  do Format-DateTime (&u1.period_end_dt, $out, {DEFDATE}, '', '')
  print $out                                               (+1,001,010)
  do Format-DateTime (&u.disposition_dt, $out, {DEFDATE}, '', '')
  print $out                                               (  ,012,010)
  print &u.shares_disposed                                 (  ,024,022) edit 999,999,999,999.999999
  print &u.disposition_price                               (  ,048,022) edit 999,999,999,999.999999
  let #DispValue = round((&u.shares_disposed * &u.disposition_price),2)
  print #DispValue                                         (  ,072,019) edit 9999,999,999,999.99
  let #OrdIncome = round(&u.st_ord_income,2)
  print #OrdIncome                                         (  ,093,019) edit 9999,999,999,999.99
  print $DispType                                          (  ,114,016)
  print &u1.purchase_price                                 (  ,132,022) edit 999,999,999,999.999999
  print &u1.purchase_fmv                                   (  ,156,022) edit 999,999,999,999.999999
  add &u.shares_disposed to #TotDisp
  add #DispValue to #TotVal
  add #OrdIncome to #TotOrd
  let $Header       = 'Y'
  add 1 to #Row

from PS_ST_ESPP_DISPOSN U,
     PS_ST_ESPP_PURCH   U1
where U.EMPLID              = $Emplid
  and U.STOCK_ID            = $StockID
  and U.DISPOSITION_DT     >= $RC_FromDate
  and U.DISPOSITION_DT     <= $RC_ThruDate
  and U.DISPOSITION_STATUS  = 'C'
  and U.EMPLID              = U1.EMPLID
  and U.STOCK_ID            = U1.STOCK_ID
  and U.STOCK_PLAN_TYPE     = U1.STOCK_PLAN_TYPE
  and U.STOCK_PLAN          = U1.STOCK_PLAN
  and U.OFFERING_ID         = U1.OFFERING_ID
  and U.PERIOD_END_DT       = U1.PERIOD_END_DT
  and U.PROCESS_GROUP       = U1.PROCESS_GROUP
order by U1.PERIOD_END_DT,
         U.DISPOSITION_DT

End-Select

 !--------------------------------------------------
 ! Prints totals if there is more than 1 detail row
 !--------------------------------------------------
  if #Row > 1
    print '_'                                              (+1,024,022) fill
    print '_'                                              (  ,072,019) fill
    print '_'                                              (  ,093,019) fill
    print $TotalLbl                                        (+1,001,10)
    print #TotDisp                                         (  ,024,022) edit 999,999,999,999.999999
    print #TotVal                                          (  ,072,019) edit 9999,999,999,999.99
    print #TotOrd                                          (  ,093,019) edit 9999,999,999,999.99
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Stock-Splits
! Descr:   Retrieves stock split info for a given stock.
!-----------------------------------------------------------------------
Begin-Procedure Get-Stock-Splits

  let $Header        = 'N'
  let #LastPageCount = #page-count

Begin-Select

V.RECORD_DT
V.PAYABLE_DT
V.ST_SPLIT_SHARE_NEW
V.ST_SPLIT_SHARE_OLD

 !--------------------------------------------------------------------
 ! Only print the column heading info at the beginning of the section
 !--------------------------------------------------------------------
  if $Header = 'N'
    next-listing need=4
    print $SplitHistLbl                         (+2,001,019) bold
    print ':'                                   (  ,   ,001) bold
    print $SplitDtLbl                           (+1,001,010) underline
    print $PayableLbl                           (  , +1,012) underline
    print $RatioLbl                             (  , +1,011) underline
  end-if

  do Format-DateTime (&v.record_dt, $out, {DEFDATE}, '', '')
  print $out                                     (+1,001,010)
  do Format-DateTime (&v.payable_dt, $out, {DEFDATE}, '', '')
  print $out                                     (  , +1,010)
  let $NewRatio = edit(&v.st_split_share_new,'999')
  let $OldRatio = edit(&v.st_split_share_old,'999')
  let $Ratio = ltrim($NewRatio,' ') ||' '|| $ForLbl ||' '||ltrim($OldRatio,' ')
  print $Ratio                                   (  , +3,011)

  let $Header    = 'Y'

from PS_ST_SPLIT_TBL V
where V.STOCK_ID    = $StockID
  and V.RECORD_DT  >= $RC_FromDate
  and V.RECORD_DT  <= $RC_ThruDate
order by V.RECORD_DT

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Personal-Data
! Descr:   Retrieves personal data for an employee - used in the heading
!          section.
!-----------------------------------------------------------------------
Begin-Procedure Get-Personal-Data

  let $Name       = ''
  let $PerStatus  = ''
  let $PerType    = ''
  let $NID        = ''
  let $TaxCountry = ''

Begin-Select

ZC.NAME
ZD.NATIONAL_ID
ZE.COUNTRY

  let $Name       = rtrim(&zc.name,' ')
  let $NID        = rtrim(&zd.national_id,' ')
  let $TaxCountry = rtrim(&ze.country,' ')

  do Rotate-Name

  let $AddressType = 'MAIL'
  do Get-Empl-Address
  if $AddressFound = 'N'
    let $AddressType = 'HOME'
    do Get-Empl-Address
  end-if

from PS_PERSON          ZA,
     PS_PERS_DATA_EFFDT ZB,
     PS_PERSON_NAME     ZC,
     PS_PERS_NID        ZD,
     PS_TAX_LOCATION1   ZE
where ZA.EMPLID           = $Emplid
  and ZA.EMPLID           = ZB.EMPLID
  and ZB.EFFDT            = (select max(EFFDT)
                               from PS_PERS_DATA_EFFDT
                              where EMPLID = ZB.EMPLID
                                and EFFDT <= $AsOfToday)
  and ZA.EMPLID           = ZC.EMPLID
  and ZA.EMPLID           = ZD.EMPLID
  and ZD.PRIMARY_NID      = 'Y'
  and ZE.TAX_LOCATION_CD  = $TaxCode

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Empl-Address
! Descr:   Retrieves the Employee's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Empl-Address

  let $AddressFound = 'N'

Begin-Select

PERSON_ADDRESS.ADDRESS1
PERSON_ADDRESS.ADDRESS2
PERSON_ADDRESS.ADDRESS3
PERSON_ADDRESS.CITY
PERSON_ADDRESS.STATE
PERSON_ADDRESS.POSTAL
PERSON_ADDRESS.COUNTRY

  let $AddressFound = 'Y'
  let $EAddress1    = rtrim(&person_address.address1, ' ')
  let $EAddress2    = rtrim(&person_address.address2, ' ')
  let $EAddress3    = rtrim(&person_address.address3, ' ')
  let $ECity        = rtrim(&person_address.city, ' ')
  let $EState       = rtrim(&person_address.state, ' ')
  let $EPostal      = rtrim(&person_address.postal, ' ')
  let $ECountry     = rtrim(&person_address.country, ' ')

from PS_PERSON_ADDRESS PERSON_ADDRESS
where PERSON_ADDRESS.EMPLID       = $Emplid
  and PERSON_ADDRESS.ADDRESS_TYPE = $AddressType

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Insider-Info
! Descr:   Retrieves insider info for an employee, if any. Used in the heading.
!-----------------------------------------------------------------------
Begin-Procedure Get-Insider-Info

  let $Prev    = 'N'
  let $Insider = ''

Begin-Select

W.REPORTING_PERSON
W.ST_OFFICER
W.ST_DIRECTOR
W.COMPANY_INSIDER
W.ST_BEN_OWNER
W.PROXY_REPORT

  let $ReportingPerson = rtrim(&w.reporting_person, ' ')
  let $Officer         = rtrim(&w.st_officer, ' ')
  let $Director        = rtrim(&w.st_director, ' ')
  let $CompanyInsider  = rtrim(&w.company_insider, ' ')
  let $BenOwner        = rtrim(&w.st_ben_owner, ' ')
  let $ProxyReport     = rtrim(&w.proxy_report, ' ')

  if $ReportingPerson = 'Y'
    let $Insider = $InsiderR
    let $Prev = 'Y'
  end-if

  if $Officer = 'Y'
    if $Prev = 'Y'
      let $Insider = $Insider ||', '||$InsiderO
    else
      let $Insider = $InsiderO
    end-if
    let $Prev = 'Y'
  end-if

  if $Director = 'Y'
    if $Prev = 'Y'
      let $Insider = $Insider ||', '||$InsiderD
    else
      let $Insider = $InsiderD
    end-if
    let $Prev = 'Y'
  end-if

  if $CompanyInsider = 'Y'
    if $Prev = 'Y'
      let $Insider = $Insider ||', '||$InsiderC
    else
      let $Insider = $InsiderC
    end-if
    let $Prev = 'Y'
  end-if

  if $BenOwner = 'Y'
    if $Prev = 'Y'
      let $Insider = $Insider ||', '||$InsiderB
    else
      let $Insider = $InsiderB
    end-if
    let $Prev = 'Y'
  end-if

  if $ProxyReport = 'Y'
    if $Prev = 'Y'
      let $Insider = $Insider ||', '||$InsiderP
    else
      let $Insider = $InsiderP
    end-if
    let $Prev = 'Y'
  end-if

from PS_ST_INSIDER_TBL W
where W.EMPLID   = $Emplid
  and W.STOCK_ID = $StockID
  and W.EFFDT    = (select MAX(EFFDT) from PS_ST_INSIDER_TBL
                     where EMPLID    = W.EMPLID
                       and STOCK_ID  = W.STOCK_ID
                       and EFFDT    <= $AsOfToday)
End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Delete-Temp
! Descr:   Delete all the info that we inserted into the temp table.
!-----------------------------------------------------------------------
Begin-Procedure Delete-Temp

 let $Procedure = 'Delete-Temp'
 let $SQL-Statement = 'Procedure: ' || $Procedure

Begin-Sql                           on-error = SQL-Error
delete from PS_ST_STOK001_TBL
where DATETIME_STAMP  = $CurrentTime
  and PROCESSINSTANCE = #Instance
End-Sql

End-Procedure

!-----------------------------------------------------------------------
! SQC Includes
!-----------------------------------------------------------------------
#include 'curdttim.sqc'                !Procedures: Get-Current-DateTime
#include 'eoj.sqc'                     !End of Report Format
#include 'number.sqc'                  !Procedures: Init-Number
#include 'datetime.sqc'                !Procedures: Init-Datetime
#include 'prcsapi.sqc'                 !Process Scheduler API
#include 'prcsdef.sqc'                 !Update Process Open_Trans variable declaration
#include 'reset.sqc'                   !Reset printer procedure
#include 'strunctl.sqc'                !Stock Admin's Run Control Record
#include 'askftd.sqc'                  !Prompts for date range
#include 'getrplng.sqc'                !Gets the report language
#include 'sqlerr.sqc'                  !SQL error processing
#include 'sqrtrans.sqc'
#include 'datemath.sqc'
#include 'getprimj.sqc'                !Get primary job
#include 'stprcgrp.sqc'                !Creates temp table with all combos for process groups
#include 'readxlat.sqc'
#include 'rotname1.sqc'                !First Name, Last Name
#include 'stgetfmv.sqc'                !Get Grant FMV
