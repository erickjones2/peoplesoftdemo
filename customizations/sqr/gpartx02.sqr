!***********************************************************************
!  GPARTX02:  Income Tax Report                                        *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!       $Release:  HR92                                                *
!           $Bug:  29483013                                            *
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'

Begin-Setup
declare-layout TAX_LIQ
    paper-size=(LETTER)
    orientation=PORTRAIT
    line-height=11              ! 72/printer_point-size
    char-width=4.32                ! points, to handle max cols
    left-margin=.05
    right-margin=.05
    bottom-margin=.05
!   top-margin=.22
end-declare

declare-layout TAX_LIQ_SUM
    paper-size=(LETTER)
    orientation=LANDSCAPE
    line-height=12              ! 72/printer_point-size
    char-width=4.32                ! points, to handle max cols
    left-margin=.05
    right-margin=.05
    bottom-margin=.05
    top-margin=.22
end-declare

declare-report TAX_LIQ
    layout=TAX_LIQ
    printer-type=HP
end-declare
declare-report TAX_LIQ_SUM
    layout=TAX_LIQ_SUM
    printer-type=HP
end-declare
End-Setup

begin-program
   do InitProcessing
   do init-report
   do Stdapi-Term
end-program


begin-procedure InitProcessing
    move 'GPARTX02'         To $ReportID
    move 'Income Taxes Reports for Argentina'          To $ReportTitle
    move 'Ver. PUM31.01'  to $ReportVersion 
    show $ReportID
    show $ReportTitle
    Show $ReportVersion 
    do Init-dateTime                  !In datetime.sqc
    do Init-Number                    !In number.sqc
    do Stdapi-Init
    do Get-Current-DateTime           !In prcsapi.sqc (curdttim.sqc)
    date-time () hh:mi:ss &timeBegan
    display 'Report Began: ' noline
    display &timeBegan
end-procedure InitProcessing

!**********************************
! Procedure - Init-Report
!**********************************
begin-procedure Init-Report

  #define ColT1    10
  #define ColT2    32
  #define ColT3    56
  #define Col1    12
  #define Col2    110
  #define BoxU    105
  #define Box1    8
  #define Box2    29
  #define BoxF    126
  
  #define Co2T1     5
  #define Co2T2    23
  #define Co2T3    36
  #define Co2T4    55
  #define Co2T5    71
  #define Co2T6    87
  #define Co2T7    103
  #define Co2T8    119
  #define Co2T9    135
  #define Co2T10   152
  #define Co2T11   167

  #define Co2H1     5
  #define Co2H2    30
  #define Co2H3    70
  #define Co2H4    88
  #define Co2H5    117
  #define Co2H6    132
  let #pos  = instr($sqr-program,'gpartx02',0)
  let #pos  = #pos - 1
  let $path = substr($sqr-program,1,#pos)
  let $FileDir = $path || 'afip1.jpg'
  LET #StdFont        = 5                  !Times Roman proportional
  LET #StmtPntSize    = 10                  !statement point-size
  LET #StmtPntSizedtl = 9                   !statement point-size
  LET #DescrSize      = 7                  !Pin Name Size Print
  LET #Ren1 = 2
  LET #Ren2 = #Ren1 + 4
  LET #RenH = 8
    do Get-Parameters
    DO Report-Translation
    #debug show 'Language: ' $Curr_language_Cd
    let $LangW = $Curr_language_Cd
    do Generate_Report
    date-time () hh:mi:ss &timeEnded
    display 'Report Ended: ' noline
    display &timeEnded
    #Debug display 'came to initreport '
end-procedure Init-Report


!**********************************
! Procedure - Generate_Report
!**********************************
begin-procedure Generate_Report
  do Def-Arrays
  IF $Gpar_List_Option = '3'
    DO Load-EmpxEmp
  ELSE
    do Load-Emp
  END-IF
  IF #Count_emp > 0
    do Load-Par
  ELSE
    SHOW 'No Information with the Selected Parameters'
  END-IF
  IF $Flag1 = 'Y'
    SHOW 'Tax Liquidation Report'
    Do Tax_Liq_Rep
  END-IF
  IF $Flag2 = 'Y'
    SHOW 'Tax Liquidation Summary Report'
    Do Tax_Liq_Sum_Rep
  END-IF
  
  IF $Flag3 = 'Y'
     Let #EndDt_Yr = 0
     Let #EndDt_Mt = 0
     Let #EndDt_Dy = 0
     
     Do Get-DateComponents ($PrdEndDt,#EndDt_Yr,#EndDt_Mt,#EndDt_Dy) 
     Let $Period_File = to_char(#EndDt_Yr) || '0000'
     Let $Cuit2 = replace($Cuit, '-','')
     Let $File_Seq = edit($File_Seq,'0000')
     Let $Rectif_Seq = edit($Rectif_Seq,'00')
     Let $Hdr1357 = 'N'


     let $FileName = '{FILEPREFIX}' || 'F1357.'||$Cuit2|| '.' || $Period_File || '.' || $File_Seq ||'.txt' || '{FILESUFFIX}'
     !show 'Filename: ' $FileName
     
     open $FileName as 1 for-writing record=390:fixed status=#filestat
     
     if #filestat < 0
       show 'Error opening output file. Program ending'
       stop quiet
     else
      SHOW 'F-1357 Report'
      Do F-1357  
     end-if
  End-if
  
  do Clear-Arrays
end-procedure  Generate_Report


!**********************************
! Procedure - Tax_Liq_Rep
!**********************************
begin-procedure Tax_Liq_Rep

  USE-REPORT TAX_LIQ
  New-Report '{FILEPREFIX}Tax_Liq_Rep.PDF{FILESUFFIX}'
  let #print_item = 0

  while #print_item <= #Count_emp
    Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
    ADD 1 TO #print_item
    get $Emplid #Empl_Rcd $Name $CUIL FROM arr_emp (#print_item)   e_emplid e_empl_rcd e_name e_cuil
    if $Emplid <> ''
      print 'LIQUIDACIÓN DE IMPUESTO A LAS GANANCIAS - 4ta. CATEGORÍA RELACIÓN DE DEPENDENCIA'  (1,{ColT1}) BOLD
      print $Gpartx02_Date          (#Ren1,{ColT1}) 
      print $Print_Date             (  ,{ColT2}) edit 'Month dd, YYYY'
      print $Gpartx02_Employee      (+1,{ColT1})
      print $CUIL                   (  ,{ColT2})
      print $Name                   (  ,{ColT3})
      print $Gpartx02_Employer      (+1,{ColT1})
      print $Cuit                   (  ,{ColT2})
      print $DescrCia               (  ,{ColT3})
      print $Gpartx02_Fiscal_Year   (+1,{ColT1})
      print $End_dt                 (  ,{ColT2}) edit 'YYYY'
      Print-Image (2,110) 
        type = jpeg-file
        image-size = (12,3)
        source = $FileDir
      let #print_det = 0
      Let #Rows_det  = 0
      
      print ' '              (#Ren2,{Col1})
      LET #Amt_Totalize =0
      while #print_det <= #Count_par
        ADD 1 TO #print_det
        ADD 1 TO #Rows_det
        Alter-Printer Point-size = #StmtPntSizedtl Font-Type = Proportional Font = #StdFont
        GET $TitleP $TotalizeP $PrintAsHdrP #Pin_Num $String_IdP $PinTypeP #AmountP #OrderSection FROM arr_par (#print_det) p_title p_Totalize p_printAsHdr p_pin_num p_string_id p_pin_type p_amount p_order
        
        IF #Pin_Num > 0
          DO Rslt_Acum
          if $TitleP <> $Old_TitleP
             if #print_det > 1
                if $Old_Totalize = 'Y'
                  graphic (+1, {Box1}, {BoxU}) box  1 8 8
                  graphic (  , {BoxU}, {Box2}) box  1 8 8
                  if #Old_OrderSection = 30 
                    let $TitlePTotal = $Gpartx02_Total
                  else
                    let $TitlePTotal = $Gpartx02_Total ||' '||$Old_TitleP
                  end-if
                  print $TitlePTotal   (  ,{Col1}) BOLD
                  print #Amt_Totalize   (  ,{Col2})  edit '$,$$$,$$$,$$$.99' 
                  evaluate #Old_OrderSection 
                     when = 10
                       Let #TotEarnings = #Amt_Totalize
                       Break
                     when = 20
                       Let #TotDeductions = #Amt_Totalize
                       Break
                     when = 30
                       Let #TotDedArt23 = #Amt_Totalize
                       Break
                     when-other
                  end-evaluate
                  LET #Amt_Totalize = 0
                end-if
             end-if
             graphic (+1, {Box1}, {BoxF}) box  1 8 8
             if #Old_OrderSection = 30
                let #TaxableIncome = #TotEarnings - #TotDeductions - #TotDedArt23
                If #TaxableIncome < 0
                  Let #TaxableIncome = 0
                End-if
                print #TaxableIncome   (  ,{Col2})  edit '$,$$$,$$$,$$$.99' 
                
             end-if
                
             print $TitleP   (  ,{Col1}) BOLD 
          end-if
          LET #Amt_Totalize = #Amt_Totalize + #Amount
          do Get_Field_Information ($ReportID, $String_IdP       , $GpartxLbl       , #dummy_width)
          #debug show $String_IdP    ' . ' $GpartxLbl
          ! For strings that require a longer string (100+ chars) get an additional string
          Let $SecondStr = ' '
          evaluate $String_IdP
             when = 'CAPITAL_CONT'
               do Get_Field_Information ($ReportID, 'CAPITAL_CNTRB_AMT' , $SecondStr , #dummy_width)
               let $GpartxLbl = $GpartxLbl ||' '|| $SecondStr
               break
             when = 'DEDUCTIONS_LBL'
               do Get_Field_Information ($ReportID, 'DEDUCTIONS_PB' , $SecondStr , #dummy_width)
               let $GpartxLbl = $GpartxLbl ||' '|| $SecondStr
               break
             when = 'TOT_DONATED_UNITS'
               do Get_Field_Information ($ReportID, 'TOT_REPD_AMT' , $SecondStr , #dummy_width)
               let $GpartxLbl = $GpartxLbl ||' '|| $SecondStr
               break
          end-evaluate
          let $GpartxLbl = rtrim($GpartxLbl, ' ')
          let #dummy_width = length($GpartxLbl)
          let #Reglei = round((#dummy_width / 100), 1)
          if #Reglei >= 1
            let #Boxlong = 2
          else
             let #Boxlong = 1
          end-if
          
          if #Rows_det > 55
             Let #Rows_det = 0
             new-page
          end-if
          
          graphic (+1 , {Box1}, 97) box  #Boxlong 5
          graphic (  , {BoxU}, {Box2}) box  #Boxlong 5
          If $String_IdP = 'TAX_GROSS_LBL'
             let $NewLbl = Upper($GpartxLbl)
             print $NewLbl   (   ,{Col1}) BOLD
          else
             print $GpartxLbl   (   ,{Col1}) WRAP 100 3
          end-if
          If $String_IdP = 'ANNUAL_PCT' OR $String_IdP = 'PERCENT_RATE' OR $String_IdP = 'GPAR_NBR_CHILDREN'

            print #Amount   (      ,{Col2})  edit '9,999,999,999.99' 
            
            if $String_IdP <> 'GPAR_NBR_CHILDREN'
              print '%'  (,+1)
            end-if
            
          Else 
            evaluate $String_IdP
               when = 'TAX_GROSS_LBL'
                 let #CalculatedTax = #Amount
                 break
               when = 'TAX_ADJ_WHOLDINGS'
                 let #WithholdedTax = #Amount
                 break
               when = 'PAYMENT_RECEIVED'
                 let #PaymentsReceived = #Amount
                 break
            end-evaluate  
            print #Amount   (      ,{Col2})  edit '$,$$$,$$$,$$$.99' 
          End-If
          #debugt  show 'Amount ' #Amount
          LET $Old_TitleP = $TitleP
          Let $Old_Totalize = $TotalizeP
          Let #Old_OrderSection = #OrderSection
        END-IF

      end-while
      graphic (+1, {Box1}, {BoxU}) box  1 8 8
      graphic (  , {BoxU}, {Box2}) box  1 8 8
      print $Gpartx02_BalanceLC   (  ,{Col1}) BOLD 
      let #BalanceAmt = #CalculatedTax - #WithholdedTax - #PaymentsReceived
      If #BalanceAmt < 0
        Let #BalanceAmt = 0
      End-if
      print #BalanceAmt  (      ,{Col2})  edit '$,$$$,$$$,$$$.99' 
      
      Alter-Printer Point-size = #StmtPntSize Font-Type = Proportional Font = #StdFont
      print $Gpartx02_Reason          (+2  ,{ColT1})
      print $Place                    (+1,{ColT1})
      print $Print_Date               (  ,{ColT3}) edit 'Month dd, YYYY'
      print $Gpartx02_Signature       (+1,{ColT1})
      graphic (+3,{ColT1},50) horz-line 10
      print $RespName                 (+1,{ColT1})
      print $Gpartx02_EmplidLbl       (+1,{ColT1})
      print $Emplid                   (,{ColT2})
      do IncreasedDed($EmplId, $End_dt, $IsIncreased )
      #debugt Show 'Patagonian Special Deduction: ' $IsIncreased
      If $IsIncreased = 'Y'
        print $Gpartx02_SpecialTxt    (+1,{ColT1})
      End-If
      new-page
    end-if
  end-while
end-procedure  Tax_Liq_Rep

!**********************************
! Procedure - Tax_Liq_Sum_Rep
!**********************************
begin-procedure Tax_Liq_Sum_Rep

USE-REPORT TAX_LIQ_SUM
New-Report '{FILEPREFIX}Tax_Liq_Sum_Rep.PDF{FILESUFFIX}'
  Alter-Printer Point-size = 14 Font-Type = Proportional Font = #StdFont
  print $Gpartx02_Title2                   (#Ren1,{Co2H1}) CENTER BOLD
  Alter-Printer Point-size = 10 Font-Type = Proportional Font = #StdFont
  print $Gpartx02_Cmpny                    (+1 ,{Co2H1}) BOLD
  print $CompanyReg                        (   ,{Co2H2})
  print $Gpartx02_Cuit                     (+1 ,{Co2H1}) BOLD
  print $Cuit                              (   ,{Co2H2})
  print $Gpartx02_Fiscal_Year              (+1 ,{Co2H1}) BOLD
  print $End_dt                            (   ,{Co2H2}) edit 'YYYY'
  print $Gpartx02_Date_From                (   ,{Co2H3}) BOLD
  print $Date_From                         (   ,{Co2H4}) edit 'Month dd, YYYY'
  print $Gpartx02_Date_To                  (   ,{Co2H5}) BOLD
  print $Date_To                           (   ,{Co2H6}) edit 'Month dd, YYYY'
  print $Gpartx02_Cal_Run_ID               (+1 ,{Co2H1}) BOLD
  print $Cal_Run_Id                        (   ,{Co2H2})
  print $Gpartx02_Cal_Id                   (+1 ,{Co2H1}) BOLD
  print $Cal_Id                            (   ,{Co2H2})
  let #print_item = 0
  Print-Image (2,160) 
    type = jpeg-file
    image-size = (12,3)
    source = $FileDir
  Alter-Printer Point-size = 8 Font-Type = Proportional Font = #StdFont
  graphic (   ,{Co2T1},173) horz-line 10
  print $Gpartx02_Name                   (#RenH ,{Co2T1})  BOLD 
  print $Gpartx02_Cuil                   (#RenH   ,{Co2T2})  BOLD
  print $Gpartx02_TotEar                   (#RenH   ,{Co2T3}) BOLD WRAP 14 5
  print $Gpartx02_TotDed                   (#RenH   ,{Co2T4}) BOLD WRAP 11 5
  print $Gpartx02_TotDed23                   (#RenH   ,{Co2T5}) BOLD WRAP 10 5
  print $Gpartx02_SubTotal                   (#RenH   ,{Co2T6}) BOLD WRAP 10 5
  print $Gpartx02_TaxCalc                   (#RenH   ,{Co2T7}) BOLD WRAP 10 5
  print $Gpartx02_WithTax                   (#RenH   ,{Co2T8}) BOLD WRAP 10 5
  print $Gpartx02_Tot_Tax                   (#RenH   ,{Co2T9}) BOLD WRAP 12 5
  print $Gpartx02_Prepay                   (#RenH   ,{Co2T10}) BOLD WRAP 12 5
  print $Gpartx02_Balance                   (#RenH   ,{Co2T11}) BOLD WRAP 12 5
  graphic ( +2  ,{Co2T1},173) horz-line 10
  while #print_item <= #Count_emp
    get $Emplid #Empl_Rcd $Name $CUIL FROM arr_emp (#print_item)   e_emplid e_empl_rcd e_name e_cuil
    if $Emplid <> ''
      print $Name                   (+1 ,{Co2T1}) WRAP 20 5
      print $CUIL                   (   ,{Co2T2})
      let #print_det     = 0
      let #Amt_Totalize  = 0
      while #print_det <= #Count_par
        ADD 1 TO #print_det
        GET $TitleP $TotalizeP $PrintAsHdrP #Pin_Num $String_IdP $PinTypeP #AmountP FROM arr_par (#print_det) p_title p_Totalize p_printAsHdr p_pin_num p_string_id p_pin_type p_amount
        DO Rslt_Acum
        if $PrintAsHdrP <> $Old_PrintAsHdrP
           if #print_det > 0
          ! show '$Old_PrintAsHdrP: ' $Old_PrintAsHdrP
                EVALUATE $Old_PrintAsHdrP
                  WHEN = 'EARNINGS'
                  WHEN = 'REMUNERACIONES'
                    print #Amt_Totalize                   (   ,{Co2T3}) edit '$$$,$$$,$$$.99'
                    let #Total_Ear = #Amt_Totalize
                  WHEN = 'DEDUCTIONS'
                  WHEN = 'DEDUCCIONES'
                    print #Amt_Totalize                   (   ,{Co2T4}) edit '$$$,$$$,$$$.99'
                    let #Total_DD = #Amt_Totalize
                  WHEN = 'DEDUCTIONS ART.23'
                  WHEN = 'DEDUCCIONES ART. 23'
                    print #Amt_Totalize                   (   ,{Co2T5}) edit '$$$,$$$,$$$.99'
                    let #Total_DD23 = #Amt_Totalize
                  WHEN = 'DETERMINED TAX' !Tax Calculate
                  WHEN = 'IMPUESTO DETERMINADO'
                    print #Amt_Totalize                   (   ,{Co2T7}) edit '$$$,$$$,$$$.99'
                    let #Total_DtTax = #Amt_Totalize
                  WHEN = 'WITHHELD TAX'
                  WHEN = 'IMPUESTO RETENIDO'
                    print #Amt_Totalize                   (   ,{Co2T8}) edit '$$$,$$$,$$$.99'
                    let #Total_WhTax = #Amt_Totalize
                  WHEN = 'PREPAYMENTS'
                  WHEN = 'PAGOS A CUENTA'
                    print #Amt_Totalize                   (   ,{Co2T10}) edit '$$$,$$$,$$$.99' 
                    let #Total_PrePay = #Amt_Totalize
                END-EVALUATE
                LET #Amt_Totalize = 0
           end-if
        end-if
        LET #Amt_Totalize = #Amt_Totalize + #Amount
        LET $Old_PrintAsHdrP = $PrintAsHdrP
      end-while
      Let #Amt_Subtotal = #Total_Ear - #Total_DD - #Total_DD23
      Let #Amt_Balance = #Total_DtTax - #Total_WhTax - #Total_PrePay
      print #Amt_Subtotal                   (   ,{Co2T6}) edit '$$$,$$$,$$$.99' 
      print #Amt_Subtotal                   (   ,{Co2T9}) edit '$$$,$$$,$$$.99' 
      print #Amt_Balance                    (   ,{Co2T11}) edit '$$$,$$$,$$$.99' 
      let #print_det = 0
    end-if
    LET #TotMXER = #TotMXER + #Total_Ear
    LET #TotMXDD = #TotMXDD + #Total_DD
    LET #TotMXDD23 = #TotMXDD23 + #Total_DD23
    LET #TotMXSUB = #TotMXSUB + #Amt_Subtotal
    LET #TotMXTAXTOT = #TotMXTAXTOT + #Amt_Subtotal
    LET #TotMXTXCALC = #TotMXTXCALC + #Total_DtTax
    LET #TotMXTXWHT = #TotMXTXWHT + #Total_WhTax
    LET #TotMXPRE = #TotMXPRE + #Total_PrePay
    LET #TotMXBAL = #TotMXBAL + #Total_Balance
    ADD 1 TO #print_item
  end-while
  graphic (  ,{Co2T1},173) horz-line 10
  print $Gpartx02_Total       (+1,{Co2T2}) BOLD
  print #TotMXER                   (   ,{Co2T3}) edit '$$$,$$$,$$$.99' 
  print #TotMXDD                   (   ,{Co2T4}) edit '$$$,$$$,$$$.99'
  print #TotMXDD23                 (   ,{Co2T5}) edit '$$$,$$$,$$$.99'
  print #TotMXSUB                  (   ,{Co2T6}) edit '$$$,$$$,$$$.99'
  print #TotMXTXCALC               (   ,{Co2T7}) edit '$$$,$$$,$$$.99'
  print #TotMXTXWHT                (   ,{Co2T8}) edit '$$$,$$$,$$$.99'
  print #TotMXTAXTOT               (   ,{Co2T9}) edit '$$$,$$$,$$$.99'
  print #TotMXPRE                  (   ,{Co2T10}) edit '$$$,$$$,$$$.99'
  print #TotMXBAL                  (   ,{Co2T11}) edit '$$$,$$$,$$$.99'
end-procedure  Tax_Liq_Sum_Rep

!**********************************
! Procedure - F-1357
!**********************************
begin-procedure F-1357

  let #print_item = 0
  Let $Travel_Dist = '0'
  Let #DtFrm_Yr = 0
  Let #DtFrm_Mt = 0
  Let #DtFrm_Dy = 0
  Let #DtTo_Yr  = 0 
  Let #DtTo_Mt  = 0
  Let #DtTo_Dy  = 0
  Let $Tp_Register = '01'
  
  Let $out_from = edit($Date_From, 'YYYYMMDD')
  Let $out_to = edit($Date_to, 'YYYYMMDD')
  
  If $Report_Type = '1' !Annual
    
    If #EndDt_Yr < 2018
      Let #EndDt_Yr = 2018
    End-if
    
    Let $Period_Hdr = to_char(#EndDt_Yr) || '00'
    
  Else
    Let $Period_Hdr = to_char(#EndDt_Yr) || edit(#EndDt_Mt,'00')
        
    If to_number($Period_Hdr) < 201904
      Let $Period_Hdr = '201904'
    End-if 
  End-if    
  
  Write 1 From $Tp_Register:2 -
               $Cuit2:11      -
               $Period_Hdr:6  -
               $Rectif_Seq:2  -
               '0103':4       -
               '215':3        -
               '1357':4       -
               $Report_Type:1 -
               '00100'
       
  While #print_item <= #Count_emp
    ADD 1 TO #print_item
    
    get $Emplid #Empl_Rcd $Name $CUIL FROM arr_emp (#print_item)   e_emplid e_empl_rcd e_name e_cuil
    
    If $Emplid <> ''
      do IncreasedDed($EmplId, $End_dt, $IsIncreased )
      
      Let #print_det = 0
      Let #Rows_det  = 0
      Let $Line_Aux = ''
      Let #Amt_Totalize =0
      Let $Benefit = '1'
       
      If $IsIncreased = 'Y' 
        Let $Benefit = '2'
      End-if
       
      Let $Tp_Register = '02'
      Write 1 From $Tp_Register:2 -
                   $CUIL:11       -
                   $out_from:8    -
                   $out_to:8      -
                   $wkMonths:2    -
                   $Benefit:1     -
                   $Travel_Dist:1
                   
                   
      while #print_det <= #Count_par
        ADD 1 TO #print_det
        ADD 1 TO #Rows_det
        Let $Amount = ''
        Let $Amt_Totalize = '0'
        
        GET $TitleP $TotalizeP $PrintAsHdrP #Pin_Num $String_IdP $PinTypeP #AmountP #OrderSection FROM arr_par (#print_det) p_title p_Totalize p_printAsHdr p_pin_num p_string_id p_pin_type p_amount p_order
        
        !show ' Pin ' #Pin_Num ' string ' $String_IdP ' - ' $TitleP ' - ' $TotalizeP ' - ' #Old_OrderSection
        IF #Pin_Num > 0
          DO Rslt_Acum
          
          If $TitleP <> $Old_TitleP
             If #print_det > 1
                If $Old_Totalize = 'Y'
                 
                  If #Old_OrderSection = 30 
                    let $TitlePTotal = $Gpartx02_Total
                    Let $Amt_Totalize = Edit((#Amt_Totalize * 100), '099999999999999')
                    
                    let #TaxableIncome = #TotEarnings - #TotDeductions - #TotDedArt23
                    
                    If #TaxableIncome < 0
                      Let #TaxableIncome = 0
                    End-if
                      
                    Let $TaxableIncome = Edit((#TaxableIncome * 100), '099999999999999')
                    Let $Line_Aux =  $Line_Aux || $Amt_Totalize || $TaxableIncome
                  Else
                    let $TitlePTotal = $Gpartx02_Total ||' '||$Old_TitleP
                    Let $Amt_Totalize = Edit((#Amt_Totalize * 100), '09999999999999999')
                    Let $Line_Aux =  $Line_Aux || $Amt_Totalize
                  End-if
                     
                  evaluate #Old_OrderSection 
                     when = 10
                       Let #TotEarnings = #Amt_Totalize
                       Let $Tp_Register = '03' 
                       Break
                     when = 20
                       Let #TotDeductions = #Amt_Totalize
                       Let $Tp_Register = '04'
                       Break
                     when = 30
                       Let #TotDedArt23 = #Amt_Totalize
                       Let $Tp_Register = '05'
                       Break
                     when-other
                       Break
                  end-evaluate
                  
                  Write 1 From $Tp_Register:2 -
                               $CUIL:11       -
                               $Line_Aux
                    
                  LET #Amt_Totalize = 0
                  Let $Line_Aux = ''
                end-if
             end-if
            
          End-if
          
          If $String_IdP =  'PAYMENT_RECEIVED' and $Report_Type = '3' 
            Let #Amount = 0
          End-if
            
          LET #Amt_Totalize = #Amt_Totalize + #Amount
                    
          If $String_IdP = 'ANNUAL_PCT' OR $String_IdP = 'PERCENT_RATE' OR $String_IdP = 'GPAR_NBR_CHILDREN'
            If $String_IdP = 'GPAR_NBR_CHILDREN'
              If #Amount = 0 
                Let $Amount = rpad(rtrim($Amount,' '),2,'0')
              Else
                Let $Amount = Edit(#Amount,'09')
              End-if
              
            Else
              
              If #Amount = 0 
                Let $Amount = rpad(rtrim($Amount,' '),1,'0')
              Else
                Let $Amount = Edit(#Amount,'9')
              End-if
              
            End-if
            
          Else 
            evaluate $String_IdP
               when = 'TAX_GROSS_LBL'
                 Let #CalculatedTax = #Amount
                 break
               when = 'TAX_ADJ_WHOLDINGS'
                 Let #WithholdedTax = #Amount
                 break
               when = 'PAYMENT_RECEIVED'
                 Let #PaymentsReceived = #Amount
                 break
            end-evaluate
            
            If #Amount = 0 
              Let $Amount = rpad(rtrim($Amount,' '),15,'0')
            Else
              Let $Amount = Edit((#Amount * 100),'099999999999999')
            End-If 
          End-If
          
          Let $Line_Aux =  $Line_Aux || $Amount
          
          #debugt  show 'pin: ' #Pin_Num ' Amount: ' #Amount
          LET $Old_TitleP = $TitleP
          Let $Old_Totalize = $TotalizeP
          Let #Old_OrderSection = #OrderSection
        END-IF

      End-While
      
      let #BalanceAmt = #CalculatedTax - #WithholdedTax - #PaymentsReceived
      Let $Tp_Register = '06'
      
      If #BalanceAmt <= 0 
        Let $Amount = rpad(rtrim($Amount,' '),15,'0')
      Else
        Let #BalanceAmt = #BalanceAmt * 100 
        Let $Amount = Edit(#BalanceAmt,'099999999999999')
      End-If
      
      Let $Line_Aux =  $Line_Aux || $Amount
      
      Write 1 From $Tp_Register:2 -
                    $CUIL:11      -
                    $Line_Aux 
    End-If
  End-While
  
  Close 1
  
end-procedure  F-1357
!**********************************
! Procedure - Get-Parameters
!**********************************
begin-procedure Get-Parameters
Begin-Select
RC.COMPANY
RC.DATE_FROM
RC.DATE_TO
RC.GPAR_LIST_OPTION
RC.CAL_RUN_ID
RC.CAL_ID
RC.PRINT_DATE
RC.GP_ELN_APP_CNTRY
RC.LANGUAGE_CD
RC.GP_ELN_APP
RC.FLAG1
RC.FLAG2
RC.RP_NAME
RC.FLAG3
RC.GPAR_FILE_SEQ
RC.GPAR_REPORT_TYPE
RC.GPAR_RECTIF_SEQ

   LET $Company             = LTRIM(RTRIM(&RC.COMPANY           , ' '), ' ')
   LET $Date_From           = LTRIM(RTRIM(&RC.DATE_FROM         , ' '), ' ')
   LET $Date_To             = LTRIM(RTRIM(&RC.DATE_TO           , ' '), ' ')
   LET $Gpar_List_Option    = LTRIM(RTRIM(&RC.GPAR_LIST_OPTION  , ' '), ' ')
   LET $Cal_Run_Id          = LTRIM(RTRIM(&RC.CAL_RUN_ID        , ' '), ' ')
   LET $Cal_Id              = LTRIM(RTRIM(&RC.CAL_ID            , ' '), ' ')
   LET $Language_Cd         = LTRIM(RTRIM(&RC.LANGUAGE_CD       , ' '), ' ')
   LET $Curr_Language_Cd    = LTRIM(RTRIM(&RC.LANGUAGE_CD       , ' '), ' ')
   LET $Gp_Eln_App_Cntry    = LTRIM(RTRIM(&RC.GP_ELN_APP_CNTRY  , ' '), ' ')
   LET $Print_Date          = LTRIM(RTRIM(&RC.PRINT_DATE        , ' '), ' ')
   LET $Gp_Eln_App          = LTRIM(RTRIM(&RC.GP_ELN_APP        , ' '), ' ')
   LET $Flag1               = LTRIM(RTRIM(&RC.FLAG1             , ' '), ' ')
   LET $Flag2               = LTRIM(RTRIM(&RC.FLAG2             , ' '), ' ')
   LET $RespName            = LTRIM(RTRIM(&RC.RP_NAME           , ' '), ' ')
   LET $Flag3               = LTRIM(RTRIM(&RC.FLAG3             , ' '), ' ') 
   LET $File_Seq            = &RC.GPAR_FILE_SEQ
   LET $Report_Type         = LTRIM(RTRIM(&RC.GPAR_REPORT_TYPE  , ' '), ' ') 
   LET $Rectif_Seq          = &RC.GPAR_RECTIF_SEQ

   Let #wkMonths = round(datediff(&RC.DATE_TO, &RC.DATE_FROM,'month'),0)
   
   If #wkMonths = 0
     Let #wkMonths = 1
   End-if
   
   If #wkMonths > 12
     Let #wkMonths = 12
   End-if
   
   Let $wkMonths = edit(#wkMonths, '00')
   
 FROM PS_GPAR_RC_TAX RC
WHERE RC.OPRID        = $prcs_oprid
  AND RC.RUN_CNTL_ID  = $prcs_run_cntl_id
End-Select
let $FieldName = 'GPAR_LIST_OPTION'
let $FieldValue = $Gpar_List_Option
do Read-Translate-Table
SHOW ' ' 
SHOW 'Company                : ' $Company         
SHOW 'Date From              : ' $Date_From       
SHOW 'Date To                : ' $Date_To         
SHOW 'Option                 : ' $XlatLongName
SHOW 'Cal Run Id             : ' $Cal_Run_Id      
SHOW 'Cal Id                 : ' $Cal_Id          
SHOW 'Print Date             : ' $Print_Date      
SHOW 'Country                : ' $Gp_Eln_App_Cntry
SHOW 'Application            : ' $Gp_Eln_App      
SHOW 'Tax Liquidation        : ' $Flag1           
SHOW 'Tax Liquidation Summary: ' $Flag2           
SHOW 'Language               : ' $Language_Cd 
SHOW 'Responsible Name       : ' $RespName 
SHOW 'F-1357 Report          : ' $Flag3
SHOW ' ' 

end-procedure  Get-Parameters



begin-procedure Report-Translation

   do Init_Report_Translation($ReportID,$Curr_language_Cd)
   do Append_Report_Translation($ReportID)

   do Get_Field_Information ($ReportID, 'DATE'       , $Gpartx02_Date       , #dummy_width)
   do Get_Field_Information ($ReportID, 'EMPLOYEE'   , $Gpartx02_Employee   , #dummy_width)
   do Get_Field_Information ($ReportID, 'EMPLOYER'   , $Gpartx02_Employer   , #dummy_width)
   do Get_Field_Information ($ReportID, 'FISCAL_YEAR', $Gpartx02_Fiscal_Year, #dummy_width)
   do Get_Field_Information ($ReportID, 'TOTALS_LBL', $Gpartx02_Total, #dummy_width)
   do Get_Field_Information ($ReportID, 'REASON_REQUIRED', $Gpartx02_Reason, #dummy_width)
   do Get_Field_Information ($ReportID, 'SIGNATURE_INDCTR', $Gpartx02_Signature, #dummy_width)
   !Labels for Report 2
   do Get_Field_Information ($ReportID, 'TITLE2'       , $Gpartx02_Title2       , #dummy_width)
   do Get_Field_Information ($ReportID, 'COMPANY_LBL'   , $Gpartx02_Cmpny   , #dummy_width)
   !do Get_Field_Information ($ReportID, 'PERSON_ID'   , $Gpartx02_Cuil   , #dummy_width)
   Let $Gpartx02_Cuil = 'CUIL:'
   do Get_Field_Information ($ReportID, 'COMPANYID', $Gpartx02_Cuit, #dummy_width)
   do Get_Field_Information ($ReportID, 'DATE_FROM', $Gpartx02_Date_From, #dummy_width)
   do Get_Field_Information ($ReportID, 'DATE_TO', $Gpartx02_Date_To, #dummy_width)
   do Get_Field_Information ($ReportID, 'CAL_RUN_ID', $Gpartx02_Cal_Run_ID, #dummy_width)
   do Get_Field_Information ($ReportID, 'CALENDAR_ID', $Gpartx02_Cal_Id, #dummy_width)
   do Get_Field_Information ($ReportID, 'NAME_LBL', $Gpartx02_Name, #dummy_width)
   
   do Get_Field_Information ($ReportID, 'TOTAL_EARNINGS', $Gpartx02_TotEar, #dummy_width)
   do Get_Field_Information ($ReportID, 'TOTAL_DEDUCTIONS', $Gpartx02_TotDed, #dummy_width)
   do Get_Field_Information ($ReportID, 'TOTAL_DED_CNT', $Gpartx02_TotDed23, #dummy_width)
   do Get_Field_Information ($ReportID, 'SUB_TOTAL_BY_1', $Gpartx02_SubTotal, #dummy_width)
   do Get_Field_Information ($ReportID, 'TAX_PAID', $Gpartx02_Tot_Tax, #dummy_width)
   do Get_Field_Information ($ReportID, 'TAXABLE_GROSS', $Gpartx02_TaxCalc, #dummy_width)
   do Get_Field_Information ($ReportID, 'TAX_ADJ_WHOLDINGS', $Gpartx02_WithTax, #dummy_width) 
   LET $Gpartx02_WithTax = UPPER($Gpartx02_WithTax)
   do Get_Field_Information ($ReportID, 'PAYMENT_RECEIVED', $Gpartx02_Prepay, #dummy_width)
   LET $Gpartx02_Prepay = UPPER($Gpartx02_Prepay)
   do Get_Field_Information ($ReportID, 'BALANCE_AMT', $Gpartx02_Balance, #dummy_width)
   LET $Gpartx02_BalanceLC = $Gpartx02_Balance
   LET $Gpartx02_Balance = UPPER($Gpartx02_Balance)
   do Get_Field_Information ($ReportID, 'EMPLOYEE_ID', $Gpartx02_EmplidLbl, #dummy_width)
   do Get_Field_Information ($ReportID, 'SPECIAL_PROCESSING', $Gpartx02_SpecialTxt, #dummy_width)
   ! Sets the Months Values for Spanish
   if $Curr_language_Cd = 'ESP'
     alter-locale
       months-full = ('Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre')
     Let $Gpartx02_TotEar = 'TOTAL REMUNERACIONES'
     Let $Gpartx02_TaxCalc = 'IMPUESTO CALCULADO'
   end-if
   
end-procedure Report-Translation

begin-procedure Def-Arrays
CREATE-ARRAY NAME = arr_emp SIZE = 9999
     FIELD = e_emplid:char
     FIELD = e_empl_rcd:number
     FIELD = e_name:char
     FIELD = e_cuil:char
     
CREATE-ARRAY NAME = arr_hdr SIZE = 99
     FIELD = h_title:char


CREATE-ARRAY NAME = arr_par SIZE = 999
     FIELD = p_title:char
     FIELD = p_Totalize:char
     FIELD = p_printAsHdr:char
     FIELD = p_pin_num:number
     FIELD = p_string_id:char
     FIELD = p_pin_type:char
     FIELD = p_amount:number
     FIELD = p_order:number
end-procedure Def-Arrays

begin-procedure Clear-Arrays
clear-array name = arr_emp
clear-array name = arr_par
end-procedure Clear-Arrays

!**********************************
! Procedure - Cuit
!**********************************
Begin-Procedure Cuit($AsOfToday, $Company, :$Cuit )
Let $Cuit = ''
Begin-Select 
A.CUIT_ARG
A.DGI_ARG
A.ACTIVITY_ARG

  Let $Cuit     = &A.CUIT_ARG
  Let $CompDgi  = &A.DGI_ARG
  Let $CompActv = &A.ACTIVITY_ARG
  
FROM PS_COMPANY_TBL_ARG A
WHERE A.EFFDT = (SELECT MAX(AA.EFFDT) FROM PS_COMPANY_TBL_ARG AA 
WHERE AA.COMPANY = A.COMPANY AND AA.EFFDT <= $AsOfToday)
AND A.COMPANY = $Company
End-Select
End-Procedure Cuit

!**********************************
! Procedure - IncreasedDed
!**********************************
Begin-Procedure IncreasedDed($EmployeeId, $AsOf, :$Increased )
Let $Increased=''
Let $SPState = ''
Let $Date1 = StrToDate('01/01/2007','DD/MM/YYYY')
Begin-Select
Z.STATE
  Let $SPState = &Z.STATE
FROM PS_ADDRESSES Z
WHERE Z.EMPLID = $EmployeeID AND Z.ADDRESS_TYPE = 'HOME' 
  AND Z.EFFDT = (SELECT MAX(Z1.EFFDT) FROM PS_ADDRESSES Z1 WHERE Z.EMPLID = Z1.EMPLID AND Z.ADDRESS_TYPE = Z1.ADDRESS_TYPE AND Z1.EFFDT <= $AsOf)
  AND Z.STATE IN (SELECT X.DATA_KEY1 FROM PS_GP_BRACKET_DTL X, PS_GP_PIN Y 
                  WHERE X.PIN_NUM = Y.PIN_NUM AND Y.PIN_NM = 'GAN BR REGIONES' AND X.EFFDT = $Date1)
End-Select
If $SPState = '' 
   Let $Increased = 'N'
Else 
   Let $Increased = 'Y'   
End-If
End-Procedure IncreasedDed


!**********************************
! Procedure - Calendar
!**********************************
Begin-Procedure Calendar($Cal_Run_Id, $Cal_Id, :$Prd_Bgn_Dt , :$Prd_End_Dt, :$PrdBngDt, :$PrdEndDt)
LET $Prd_Bgn_Dt = ''
LET $Prd_End_Dt = ''
LET $PrdEndDt = ''
LET $PrdBngDt = ''
Begin-Select 
A.RUN_TYPE                &CAL.RUN_TYPE    
A.CALC_TYPE               &CAL.CALC_TYPE   
A.CAL_PRD_ID              &CAL.CAL_PRD_ID  
A.PRD_BGN_DT              &CAL.PRD_BGN_DT  
A.PRD_END_DT              &CAL.PRD_END_DT  
A.PYMT_DT                 &CAL.PYMT_DT     
A.FREQUENCY_ID            &CAL.FREQUENCY_ID

   LET $Run_Type      = LTRIM(RTRIM(&CAL.RUN_TYPE     , ' '), ' ')
   LET $Calc_Type     = LTRIM(RTRIM(&CAL.CALC_TYPE    , ' '), ' ')
   LET $Cal_Prd_Id    = LTRIM(RTRIM(&CAL.CAL_PRD_ID   , ' '), ' ')
   LET $Prd_Bgn_Dt    = LTRIM(RTRIM(&CAL.PRD_BGN_DT   , ' '), ' ')
   LET $Prd_End_Dt    = LTRIM(RTRIM(&CAL.PRD_END_DT   , ' '), ' ')
   LET $Pymt_Dt       = LTRIM(RTRIM(&CAL.PYMT_DT      , ' '), ' ')
   LET $Frequency_Id  = LTRIM(RTRIM(&CAL.FREQUENCY_ID , ' '), ' ')
   
   do Format-DateTime(&CAL.PRD_BGN_DT, $PrdBngDt, {DEFCMP}, '', '')
   do Format-DateTime(&CAL.PRD_END_DT, $PrdEndDt, {DEFCMP}, '', '')
   
    
 FROM PS_GP_CAL_RUN_DTL A 
WHERE  A.CAL_RUN_ID = $Cal_Run_Id
  AND A.CAL_ID      = $Cal_Id
End-Select
End-Procedure Calendar


!**********************************
! Procedure - Load-Emp
!**********************************
Begin-Procedure Load-Emp
DO Calendar($Cal_Run_Id, $Cal_Id, $Bgn_Dt , $End_Dt, $PrdBngDt, $PrdEndDt)
DO Cuit($End_Dt, $Company, $Cuit )
DO Descr_Cia($Company,$End_Dt,$Language_Cd,$DescrCia,$Descrshort,$C_Country,$C_Address1,$C_Address2,$C_Address3,$C_Address4,$C_City,$C_Num1,$C_Num2,$C_County,$C_State,$C_postal)
Let  $Place = $C_Address1 ||', '|| $C_City
LET #Count_emp = 0
LET $CompanyReg = $Company ||' '|| $DescrCia
Begin-Select 
A.EMPLID                  &EMP_EMPLID  
A.EMPL_RCD                &EMP_EMPL_RCD
C.NAME                    &EMP_NAME    

  ADD 1 TO #Count_emp
  LET $Emplid   = RTRIM(LTRIM(&EMP_EMPLID  ,' '),' ')
  LET #Empl_Rcd = &EMP_EMPL_RCD
  LET $Name     = RTRIM(LTRIM(&EMP_NAME    ,' '),' ')
  DO GetNid($Emplid, 'ARG', 'CUIL', $CUIL)
  PUT $Emplid #Empl_Rcd $Name $CUIL INTO arr_emp (#Count_emp)   e_emplid e_empl_rcd e_name e_cuil

  
 FROM PS_JOB A, 
      PS_GP_PYE_SEG_STAT B, 
      PS_NAMES C, 
      PS_GP_PYE_PRC_STAT D 
WHERE A.EFFDT           = (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED 
                            WHERE A.EMPLID    = A_ED.EMPLID 
                              AND A.EMPL_RCD  = A_ED.EMPL_RCD 
                              AND A_ED.EFFDT <= B.SEG_END_DT) 
  AND A.EFFSEQ          = (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES 
                            WHERE A.EMPLID    = A_ES.EMPLID 
                              AND A.EMPL_RCD  = A_ES.EMPL_RCD 
                              AND A.EFFDT     = A_ES.EFFDT) 
  AND A.EMPLID          = B.EMPLID 
  AND A.EMPL_RCD        = B.EMPL_RCD 
  AND B.GP_PAYGROUP     = A.GP_PAYGROUP 
  AND B.ORIG_CAL_RUN_ID = B.CAL_RUN_ID 
  AND A.EMPLID          = C.EMPLID 
  AND C.EFFDT           = (SELECT MAX(C_ED.EFFDT) FROM PS_NAMES C_ED 
                            WHERE C.EMPLID    = C_ED.EMPLID 
                              AND C.NAME_TYPE = C_ED.NAME_TYPE 
                              AND C_ED.EFFDT <= B.SEG_END_DT) 
  AND A.EMPL_STATUS     = 'A' 
  AND B.CAL_RUN_ID      = $Cal_Run_Id
  AND B.CAL_ID          = $Cal_Id
  AND A.COMPANY         = $Company 
  AND B.SEG_END_DT     <= $Date_To
  AND B.SEG_BGN_DT     >= $Date_From
  AND B.PYE_CALC_STAT  >= '50' 
  AND B.CALC_ACTION IN ('C','R','W') 
  AND B.EMPLID          = D.EMPLID 
  AND B.CAL_RUN_ID      = D.CAL_RUN_ID 
  AND B.EMPL_RCD        = D.EMPL_RCD 
  AND B.GP_PAYGROUP     = D.GP_PAYGROUP 
  AND B.CAL_ID          = D.CAL_ID 
  AND B.ORIG_CAL_RUN_ID = D.ORIG_CAL_RUN_ID 
  AND D.CALC_TYPE       = 'P' 
End-Select
End-Procedure Load-Emp


!**********************************
! Procedure - Load-Emp
!**********************************
Begin-Procedure Load-EmpxEmp
DO Calendar($Cal_Run_Id, $Cal_Id, $Bgn_Dt , $End_Dt, $PrdBngDt, $PrdEndDt)
DO Cuit($End_Dt, $Company, $Cuit )
DO Descr_Cia($Company,$End_Dt,$Language_Cd,$DescrCia,$Descrshort,$C_Country,$C_Address1,$C_Address2,$C_Address3,$C_Address4,$C_City,$C_Num1,$C_Num2,$C_County,$C_State,$C_postal)
Let  $Place = $C_Address1 ||', '|| $C_City
LET #Count_emp = 0
LET $CompanyReg = $Company ||' '|| $DescrCia
Begin-Select 
A.EMPLID                  &XEMP_EMPLID  
A.EMPL_RCD                &XEMP_EMPL_RCD
C.NAME                    &XEMP_NAME    

  ADD 1 TO #Count_emp
  LET $Emplid   = RTRIM(LTRIM(&XEMP_EMPLID  ,' '),' ')
  LET #Empl_Rcd = &XEMP_EMPL_RCD
  LET $Name     = RTRIM(LTRIM(&XEMP_NAME    ,' '),' ')
  DO GetNid($Emplid, 'ARG', 'CUIL', $CUIL)
  PUT $Emplid #Empl_Rcd $Name $CUIL INTO arr_emp (#Count_emp)   e_emplid e_empl_rcd e_name e_cuil


 FROM PS_JOB A, 
      PS_GP_PYE_SEG_STAT B, 
      PS_NAMES C, 
      PS_GP_PYE_PRC_STAT D,
      PS_GPAR_RC_TAX_EMP X
WHERE A.EFFDT           = (SELECT MAX(A_ED.EFFDT) FROM PS_JOB A_ED 
                            WHERE A.EMPLID    = A_ED.EMPLID 
                              AND A.EMPL_RCD  = A_ED.EMPL_RCD 
                              AND A_ED.EFFDT <= B.SEG_END_DT) 
  AND A.EFFSEQ          = (SELECT MAX(A_ES.EFFSEQ) FROM PS_JOB A_ES 
                            WHERE A.EMPLID    = A_ES.EMPLID 
                              AND A.EMPL_RCD  = A_ES.EMPL_RCD 
                              AND A.EFFDT     = A_ES.EFFDT) 
  AND A.EMPLID          = B.EMPLID 
  AND A.EMPL_RCD        = B.EMPL_RCD 
  AND B.GP_PAYGROUP     = A.GP_PAYGROUP 
  AND B.ORIG_CAL_RUN_ID = B.CAL_RUN_ID 
  AND A.EMPLID          = C.EMPLID 
  AND C.EFFDT           = (SELECT MAX(C_ED.EFFDT) FROM PS_NAMES C_ED 
                            WHERE C.EMPLID    = C_ED.EMPLID 
                              AND C.NAME_TYPE = C_ED.NAME_TYPE 
                              AND C_ED.EFFDT <= B.SEG_END_DT) 
  AND A.EMPL_STATUS     = 'A' 
  AND B.CAL_RUN_ID      = $Cal_Run_Id
  AND B.CAL_ID          = $Cal_Id
  AND A.COMPANY         = $Company 
  AND B.SEG_END_DT     <= $Date_To
  AND B.SEG_BGN_DT     >= $Date_From
  AND B.PYE_CALC_STAT  >= '50' 
  AND B.CALC_ACTION IN ('C','R','W') 
  AND B.EMPLID          = D.EMPLID 
  AND B.EMPLID          = X.EMPLID
  AND A.EMPL_RCD        = X.EMPL_RCD 
  AND B.CAL_RUN_ID      = D.CAL_RUN_ID 
  AND B.EMPL_RCD        = D.EMPL_RCD 
  AND B.GP_PAYGROUP     = D.GP_PAYGROUP 
  AND B.CAL_ID          = D.CAL_ID 
  AND B.ORIG_CAL_RUN_ID = D.ORIG_CAL_RUN_ID 
  AND X.OPRID           = $prcs_oprid 
  AND X.RUN_CNTL_ID    = $prcs_run_cntl_id
  AND D.CALC_TYPE       = 'P' 
End-Select

End-Procedure Load-EmpxEmp

!**********************************
! Procedure - GetNid
!**********************************
Begin-Procedure GetNid($Emplid, $Country, $IdType, :$NatID)
Let $NatID = ' '
Begin-Select
NID.NATIONAL_ID         &NID.NATIONAL_ID

  LET $NatID = LTRIM(RTRIM(&NID.NATIONAL_ID ,' ') ,' ')

  FROM PS_PERS_NID NID 
 WHERE NID.EMPLID           = $Emplid
   AND NID.NATIONAL_ID_TYPE = $IdType
   AND NID.COUNTRY          = $Country
End-Select
End-Procedure GetNid

 
!**********************************
! Procedure - Load-Par
!**********************************
Begin-Procedure Load-Par

LET #Count_par = 0
Begin-Select 
A.GP_ELN_ATTR5                          &OrderSection
C.GP_ORDER                              &Order_Pin
A.PIN_ELEM_GRP_NUM                      &PinGrp
A.GP_ELN_ATTR1                          &Title
A.GP_ELN_ATTR2                          &Totalize
B.PIN_NUM                               &PinNum
B.GP_ELN_ATTR1                          &PrintAsHeader
B.GP_ELN_ATTR10                         &String_Id
C.ENTRY_TYPE_ID                         &PinType


  LET $Title       = LTRIM(RTRIM(&Title        , ' '),' ')
  LET $Totalize    = LTRIM(RTRIM(&Totalize     , ' '),' ')
  LET #Pin_Num     = &PinNum
  LET $String_Id   = LTRIM(RTRIM(&String_Id    , ' '),' ')
  LET $PinType     = LTRIM(RTRIM(&PinType      , ' '),' ')
  LET $PrintAsHdr  = LTRIM(RTRIM(&PrintAsHeader, ' '),' ')
  Let #OrdSect     = &OrderSection
  !SHOW '$PrintAsHdr: ' $PrintAsHdr  ', $Title: ' $Title ', String_Id: ' $String_Id ', Amount: ' #Amount
  ADD 1 TO #Count_par
  if $Curr_language_Cd = 'ESP'
     evaluate #OrdSect
       when = 10
          let $Title = 'REMUNERACIONES'
          break
       when = 20
          let $Title = 'DEDUCCIONES'
          break
       when = 30
          let $Title = 'DEDUCCIONES ART. 23'
          break
       when = 40
          let $Title = 'REMUNERACION SUJETA A IMPUESTO'
          break
     end-evaluate
  end-if
  if $PrintAsHdr = 'Y'
     do Get_Field_Information ($ReportID, $String_Id, $TitleHdr, #dummy_width)
    let $TitleHdr = UPPER($TitleHdr)
  else
    let $TitleHdr = $Title
  end-if
  if $TitleHdr <> $OldTitleHdr
  end-if
  !SHOW '$Title: ' $Title  ', $Totalize ' $Totalize ', $TitleHdr: ' $TitleHdr ', String_Id: ' $String_Id ', Pin_Num: ' #Pin_Num ', $PinType ' $PinType ', #Amount ' #Amount ' $End_Dt ' $End_Dt
  PUT $Title $Totalize $TitleHdr #Pin_Num $String_Id $PinType #Amount #OrdSect INTO arr_par (#Count_par) p_title p_Totalize p_printAsHdr p_pin_num p_string_id p_pin_type p_amount p_order
  let $OldTitleHdr = $TitleHdr

 FROM PS_GP_ELN_SET_LST  A, 
      PS_GP_ELN_PIN_ATTR B, 
      PS_GP_ELEM_GRP_MBR C 
WHERE A.EFFDT             = (SELECT MAX(A_ED.EFFDT) FROM PS_GP_ELN_SET_LST A_ED 
                              WHERE A.COUNTRY = A_ED.COUNTRY 
                                AND A.GP_ELN_SET = A_ED.GP_ELN_SET 
                                AND A_ED.EFFDT <= $End_Dt) 
  AND A.COUNTRY           = $Gp_Eln_App_Cntry
  AND A.GP_ELN_SET        = $Gp_Eln_App 
  AND A.COUNTRY           = B.COUNTRY 
  AND A.GP_ELN_SET        = B.GP_ELN_SET 
  AND A.PIN_ELEM_GRP_NUM  = B.PIN_ELEM_GRP_NUM 
  AND B.EFFDT             = (SELECT MAX(B_ED.EFFDT) FROM PS_GP_ELN_PIN_ATTR B_ED 
                             WHERE B.COUNTRY = B_ED.COUNTRY 
                               AND B.GP_ELN_SET = B_ED.GP_ELN_SET 
                               AND B_ED.EFFDT <= $End_Dt) 
  AND B.GP_ELN_ATTR7      = 'Y' 
  AND C.EFFDT             = (SELECT MAX(C_ED.EFFDT) FROM PS_GP_ELEM_GRP_MBR C_ED 
                             WHERE C.PIN_NUM = C_ED.PIN_NUM 
                              AND C_ED.EFFDT <= $End_Dt) 
  AND C.PIN_NUM           = A.PIN_ELEM_GRP_NUM 
  AND C.PIN_ELEM_NUM      = B.PIN_NUM
ORDER BY 1, 2 
End-Select
End-Procedure Load-Par


!**********************************
! Procedure - Rslt_Acum
!**********************************
Begin-Procedure Rslt_Acum
let  #Amount = 0
Begin-Select 
A.CALC_RSLT_VAL                          &AmtAcm
   let  #Amount = &AmtAcm

 FROM PS_GP_RSLT_ACUM A
WHERE A.EMPLID          = $Emplid
  AND A.CAL_RUN_ID      = $Cal_Run_Id
  AND A.EMPL_RCD        = #Empl_Rcd
  AND A.CAL_ID          = $Cal_Id
  AND A.ORIG_CAL_RUN_ID = A.CAL_RUN_ID 
  AND A.PIN_NUM         = #Pin_Num 
End-Select
End-Procedure Rslt_Acum

!***************************************************************!
! Function: Descr_Cia .
! Description: Get the Company Description in Base and Report Language
!***************************************************************!
BEGIN-PROCEDURE Descr_Cia($Cia,$EFFDT,$Lang,:$Descr,:$Descrshort,:$C_Country,:$C_Address1,:$C_Address2,:$C_Address3,:$C_Address4,:$C_City,:$C_Num1,:$C_Num2,:$C_County,:$C_State,:$C_postal)
move '' to $Descr
move '' to $Descrshort
move '' to $C_Country
move '' to $C_Address1
move '' to $C_Address2
move '' to $C_Address3
move '' to $C_Address4
move '' to $C_City
move '' to $C_Num1
move '' to $C_Num2
move '' to $C_County
move '' to $C_State
move '' to $C_postal
move '' to $Descr
move '' to $Descrshort

BEGIN-SELECT
ACM1.DESCR
ACM1.DESCRSHORT
ACM1.COUNTRY
ACM1.ADDRESS1
ACM1.ADDRESS2
ACM1.ADDRESS3
ACM1.ADDRESS4
ACM1.CITY
ACM1.NUM1
ACM1.NUM2
ACM1.COUNTY
ACM1.STATE
ACM1.POSTAL

    move &ACM1.COUNTRY  to $C_Country
    move &ACM1.ADDRESS1 to $C_Address1
    move &ACM1.ADDRESS2 to $C_Address2
    move &ACM1.ADDRESS3 to $C_Address3
    move &ACM1.ADDRESS4 to $C_Address4
    move &ACM1.CITY     to $C_City
    move &ACM1.NUM1     to $C_Num1
    move &ACM1.NUM2     to $C_Num2
    move &ACM1.COUNTY   to $C_County
    move &ACM1.STATE    to $C_State
    move &ACM1.POSTAL   to $C_postal

FROM PS_COMPANY_TBL ACM1
WHERE ACM1.EFFDT = (SELECT MAX(ACM1_ED.EFFDT) FROM PS_COMPANY_TBL ACM1_ED
                 WHERE ACM1.COMPANY = ACM1_ED.COMPANY
                 AND ACM1_ED.EFFDT <= $EFFDT)                   
AND ACM1.COMPANY = $Cia 
AND ACM1.EFF_STATUS = 'A'
END-SELECT

if $Lang = 'ENG' 
   move &ACM1.DESCR      to $Descr
   move &ACM1.DESCRSHORT to $Descrshort
else
BEGIN-SELECT 
ACM2.DESCR 
ACM2.DESCRSHORT 

   move &ACM2.DESCR      to $Descr
   move &ACM2.DESCRSHORT to $Descrshort
   
FROM PS_COMPNY_TBL_LANG ACM2
WHERE ACM2.EFFDT = (SELECT MAX(ACM2_ED.EFFDT) FROM PS_COMPNY_TBL_LANG ACM2_ED
                    WHERE ACM2.COMPANY = ACM2_ED.COMPANY
                    AND ACM2.LANGUAGE_CD = ACM2_ED.LANGUAGE_CD
                    AND ACM2_ED.EFFDT <= $EFFDT)
AND ACM2.COMPANY     = $Cia 
AND ACM2.LANGUAGE_CD = $Lang          
END-SELECT
end-if

if $Descr = '' 
   move &ACM1.DESCR      to $Descr
   move &ACM1.DESCRSHORT to $Descrshort
end-if 

END-PROCEDURE 

!***********************************************************************
#include 'datetime.sqc'
#include 'number.sqc'
#include 'readmsgc.sqc'  !Read the Message Catalog Table
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'prcsapi.sqc'   !Process API
#include 'stdapi.sqc'    !Update Process API
#Include 'sqrtrans.sqc'  !Translate SQR strings to given language
#Include 'getrplng.sqc'  !Get the report language
#include 'datemath.sqc'  !Routines for date
#include 'prcslng.sqc'   !Process Language
#include 'hrsecty.sqc'   !Get SQR Security parameters
#include 'gparnwds.sqc'  !Get Payment in words Eng & Spanish
!**********************************************************************
