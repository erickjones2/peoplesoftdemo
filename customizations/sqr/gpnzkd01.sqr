!*************************************************************************
!  GPNZKD01:  FormKED                                                    *
!*************************************************************************
!*************************************************************************
!                                                                        *
!                                                                        *
!                                                                        * 
! This software and related documentation are provided under a           *
! license agreement containing restrictions on use and                   *
! disclosure and are protected by intellectual property                  *
! laws. Except as expressly permitted in your license agreement          *
! or allowed by law, you may not use, copy, reproduce,                   *
! translate, broadcast, modify, license, transmit, distribute,           *
! exhibit, perform, publish or display any part, in any form or          *
! by any means. Reverse engineering, disassembly, or                     *
! decompilation of this software, unless required by law for             *
! interoperability, is prohibited.                                       *
! The information contained herein is subject to change without          *
! notice and is not warranted to be error-free. If you find any          *
! errors, please report them to us in writing.                           *
!                                                                        *
!                                                                        *
! Copyright (C) 1988, 2015, Oracle and/or its affiliates.                *
! All Rights Reserved.                                                   *
!*************************************************************************
!          $Date:  2015/09/22:11:12:02                                   *
!       $Release:  HR92                                                  *
!           $Bug:  21782092                                              *
!***********************************************************************
!                                                                      *
!  This SQR generates the KiwiSaver Employment Detail ir-File          *
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
!***********************************************************************

#Include 'setenv.sqc'  !Set environment

!************************************************************************
!  Define Variables                                                     *
!************************************************************************
#define BLANK                       ' '
#define NULL                        ''
#define TRUE                        1
#define FALSE                       0
#define KED_IR_FILE                '00'

#define REPORT_ID                   'GPNZKD01'

Begin-Setup
#include 'setupdb.sqc'
   declare-layout FORM_KED
      PAPER-SIZE    = (a4)
      orientation   = portrait
      top-margin    = 0.30
      left-margin   = 0.2
      right-margin   = 0.2
      Line-Height   = 11.3
   end-declare

   declare-report FORM_KED_RPT
      layout = FORM_KED
   end-declare
End-Setup


!***********************************************************************
begin-program
   do Init-Report
   do Process-Main
   do Stdapi-Term
end-program

!***********************************************************************
! Procedure:    Init_Val                                               *
!                                                                      *
! Description: Prints the Header of the report                         *
!                                                                      *
!***********************************************************************
begin-procedure   Init_Val
   !let #Heading_Font      = 4
   !let #HeadingPntSize    = 11
   !let #StdPntSize        = 9
   !let #dataPntSize       = 7
   !let #CurrentRow        = 10

   let #LineNum           = 1
   let $REC_TYPE_ER       = 'KSH'
   let $ER_IRD_NUM        = ' '
   let $ER_CONT_NAME      = ' '
   let $ER_PHONE_NUM      = ' '
   Let $ER_CELL_NUM       = ' '
   let $ER_IR_VER_NUM     = '0001'

end-procedure

begin-procedure   Init_Val1


   let $REC_TYPE_EE       = 'KSD'
   let $EE_NAME           = ' '
   let $EE_IRD_NUM        = ' '
   let $EE_KIWI_ELIG      = ' '
   let $EE_NAME_PREFIX    = ' '
   let $EE_FIRST_NAME     = ' '
   let $EE_LAST_NAME      = ' '
   let $EE_ADDRESS1       = ' '
   let $EE_ADDRESS2       = ' '
   let $EE_BUSN_PHONE     = ' '
   let $EE_CELL_NUM       = ' '
   let $EE_EMAIL_ADDR     = ' '



   let $EE_OPTOUT_FLAG     = ' '
   let $EE_EMPLOY_START_DT = ' '
   let $EE_BANK_ACC_NUM    = ' '
   let $ACC_HOLDER_NAME    = ' '
   let $EE_OPTOUT_DATE     = ' '


end-procedure




!***********************************************************************
!  Procedure: Init Report                                              *
!                                                                      *
!***********************************************************************
begin-procedure Init-Report

   !move 'GPNZKD01' to $ReportID
   do Init-DateTime
   do Init-Number
   do Get-Current-DateTime
   do Stdapi-Init

   if $proc__instance = ''
   else
      let #proc_instance=To_number($proc__instance)
   end-if

   do Get_Run_Cntrl_Dtls
   do Init_Val
   do Init_Val1



end-procedure !Init-Report


!***************************************************************************************
!  Procedure: Get_Run_Cntrl_Dtls                                                       *
!  Purpose  : This procedure gets the run control values from the run control record   *
!                                                                                      *
!***************************************************************************************
Begin-Procedure Get_Run_Cntrl_Dtls


Begin-Select
RNCT.PAY_ENTITY
RNCT.GPNZ_YEARCD
RNCT.GPNZ_MONTHCD

   let $Run_Pay_Entity = rtrim(&RNCT.PAY_ENTITY, ' ')
   let $Run_Year = rtrim(&RNCT.GPNZ_YEARCD, ' ')
   let $Run_Month = rtrim(&RNCT.GPNZ_MONTHCD, ' ')


FROM PS_GPNZ_IR348F_RC RNCT
WHERE  RNCT.OPRID    = $prcs_oprid
AND RNCT.RUN_CNTL_ID = $prcs_run_cntl_id
End-Select

do Get-Period-end

End-Procedure    ! Get_Run_Cntrl_Dtls

!**************************************************************************
! Procedure:   Process-Main                                               *
! Description: The main process                                           *
!                                                                         *
!**************************************************************************
begin-procedure Process-Main

   Do Open-File

   Do Process-ER-Dtls
   Do Write-Employer-Dtls
   Do Process-Employee
   close 1


End-Procedure

!********************************************************************
! Get-Period-end
! Procedure to get Period End date
! called by: Select-Parameters
!********************************************************************
begin-procedure Get-Period-end

let #period_year =0
let $period_start_DD='01'
EVALUATE $Run_month
  WHEN = '02'
    move $Run_year to #period_year
    let #period_year_rem = #period_year % 4
    if #period_year % 4 = 0
      let $period_end_DD='29'
    else
      let $period_end_DD='28'
    end-if
    break
  WHEN = '01'
  WHEN = '03'
  WHEN = '05'
  WHEN = '07'
  WHEN = '08'
  WHEN = '10'
  WHEN = '12'
    LET $period_end_DD='31'
    break
  WHEN-OTHER
    let $period_end_DD='30'
    break
END-EVALUATE

LET $period_end_dt_str= $Run_Year||'-'||$run_month||'-'||$period_end_DD
LET $period_start_dt_str= $Run_Year||'-'||$run_month||'-'||$period_start_DD


let $period_end_dt=strtodate($period_end_dt_str,'YYYY-MM-DD')
let $period_start_dt=strtodate($period_start_dt_str,'YYYY-MM-DD')

 if $sqr-database = 'DB2'
        let $period_end_dt=substr($period_end_dt,1,10)
        let $period_start_dt=substr($period_start_dt,1,10)
 end-if


end-procedure !Get-Period-end

!**************************************************************************
! Procedure: Open-File                                                    *
!                                                                         *
! Description: Opening the output files for writing                       *                                                  *
!                                                                         *
!**************************************************************************
begin-procedure Open-File



 !  MOVE 'KED.csv' to $Filename1
 !  open $Filename1 as 1 for-writing record=9999:vary
 !
 !  status = #filestat
 !  show $Filename1
 !  if #filestat != 0
 !     show 'Cannot open file ' $Filename1
 !  end-if

 #ifdef UNIX
    let $slash = '/'
  #else
    let $slash = '\'
  #endif

  if $slash <> ''   !If Slash has a value then...
    let #start = 1
    let #location = 0
    while #location <> -1
       let #start = #location + 1
       Find $slash In $SQR-Report #start #location
    end-while
    let $path     = substr($SQR-Report,          1, #start)
    let $filename = substr($SQR-Report, #start + 1, length($SQR-Report)-#start)
  end-if
  let $Filename1  = $Run_Pay_entity||$Run_year||$Run_month||'KED.CSV'
  let $Filename1  = $path || $Filename1
  open $Filename1  as 1   for-writing record=999
   status = #filestat
   if #filestat != 0
      display $Filename1 noline
      display ' not found '
    else
      display 'Processing ' noline
   end-if

End-Procedure !OPEN-FILE

!**************************************************************************
! Procedure: Employer Details                                             *
!                                                                         *
! Description: Get the Employer Details                                   *
!                                                                         *
!**************************************************************************
begin-procedure Process-ER-Dtls

begin-select
PYENT.GPNZ_IRD_NUMBER
PERS.NAME
PYENT.GPNZ_CONTACT_PHONE


    MOVE &PYENT.GPNZ_IRD_NUMBER    to $ER_IRD_NUM
    MOVE &PERS.NAME                to $ER_CONT_NAME
    MOVE &PYENT.GPNZ_CONTACT_PHONE to $ER_PHONE_NUM

    !Do Write-Employer-Dtls

FROM PS_GPNZ_PYENT_DTL PYENT,PS_PERSON_NAME PERS
WHERE PYENT.PAY_ENTITY = $Run_Pay_Entity
   AND PYENT.GPNZ_CONTACT_ID = PERS.EMPLID
   AND PYENT.EFFDT = (SELECT MAX(PYENT1.EFFDT) FROM PS_GPNZ_PYENT_DTL PYENT1
                     WHERE PYENT.EFFDT = PYENT1.EFFDT
                     AND PYENT1.EFFDT <= $period_end_dt)
end-select

End-Procedure !Process-ER-Dtls

!**************************************************************************
! Procedure: Employee IRD Details                                         *
!                                                                         *
! Description: Get the Employee IRD Details                               *
!                                                                         *
!**************************************************************************
begin-procedure Get-EE-IRD-DTL

begin-select
EEIRD.GPNZ_IRD_NUMBER
PERS1.NAME
PERS1.NAME_PREFIX
PERS1.FIRST_NAME
PERS1.LAST_NAME

    MOVE &EEIRD.GPNZ_IRD_NUMBER    to $EE_IRD_NUM
    MOVE &PERS1.NAME               to $EE_NAME
    MOVE &PERS1.NAME_PREFIX        to $EE_NAME_PREFIX
    MOVE &PERS1.FIRST_NAME         to $EE_FIRST_NAME
    MOVE &PERS1.LAST_NAME          to $EE_LAST_NAME

FROM PS_GPNZ_EE_IRD_NUM EEIRD,PS_PERSON_NAME PERS1
WHERE EEIRD.EMPLID = $Emplid
   AND EEIRD.EMPLID = PERS1.EMPLID
   AND EEIRD.EFFDT = (SELECT MAX(EEIRD1.EFFDT) FROM PS_GPNZ_EE_IRD_NUM EEIRD1
                     WHERE EEIRD.EFFDT = EEIRD1.EFFDT
                     AND EEIRD1.EFFDT <= $period_end_dt)
end-select

End-Procedure !Get-EE-IRD-DTL

!***********************************************************************
! Procedure: Get-EmployeeAddress-Details                               *
!***********************************************************************
begin-Procedure Get-EmployeeAddress-Details
BEGIN-SELECT
EADDR.ADDRESS1
EADDR.ADDRESS2
EADDR.CITY
EADDR.STATE
EADDR.POSTAL
EADDR.COUNTRY
ECNT.DESCR

     MOVE &EADDR.ADDRESS1           to $EE_ADDRESS1
     Let #add1len = length($EE_ADDRESS1)
      if #add1len > 30
        let $EE_ADDRESS1 =  ltrim(rtrim(substr($EE_ADDRESS1,1,30),' '),' ')
      end-if
     MOVE &EADDR.ADDRESS2           to $EE_ADDRESS2
     Let #add2len = length($EE_ADDRESS2)
      if #add2len > 30
        let $EE_ADDRESS2 =  ltrim(rtrim(substr($EE_ADDRESS2,1,30),' '),' ')
      end-if

    Let $EE_CITY    = &EADDR.CITY
    Let $EE_STATE   = &EADDR.STATE
    Let $EE_POSTAL  = &EADDR.POSTAL
    Let $EE_COUNTRY = &EADDR.COUNTRY
    Let $EE_DESCR   = &ECNT.DESCR

  FROM PS_ADDRESSES EADDR
     , PS_COUNTRY_TBL ECNT
   WHERE EADDR.EMPLID = $Emplid
     AND (EADDR.ADDRESS_TYPE = 'MAIL'
          OR (EADDR.ADDRESS_TYPE = 'HOME'
              AND EADDR.EMPLID NOT IN (SELECT EADDR1.EMPLID FROM PS_ADDRESSES EADDR1
                                          WHERE EADDR1.EMPLID = EADDR.EMPLID
                                            AND EADDR1.ADDRESS_TYPE = 'MAIL'
                                      )
             )
         )
     AND EADDR.EFFDT = (SELECT MAX(EADDR2.EFFDT) FROM PS_ADDRESSES EADDR2
                           WHERE EADDR2.EFFDT <= $period_end_dt
                             AND EADDR2.EMPLID = EADDR.EMPLID
                             AND EADDR2.ADDRESS_TYPE = EADDR.ADDRESS_TYPE
                             AND EADDR2.EFF_STATUS = 'A')
     AND ECNT.COUNTRY = EADDR.COUNTRY
END-SELECT
End-Procedure

!**************************************************************************
! Procedure: Employee Phone Details                                       *
!                                                                         *
! Description: Get the Employee Phone Details                             *
!                                                                         *
!**************************************************************************
begin-procedure Get-EE-PHONE-DTL

begin-select
PHONE.PHONE_TYPE
PHONE.PHONE

    Let $ph_type    = rtrim(&PHONE.PHONE_TYPE, ' ')
    if $ph_type = 'BUSN'
       MOVE &PHONE.PHONE     to  $EE_BUSN_PHONE

     Else
     if $ph_type = 'CELL'
       MOVE &PHONE.PHONE     to  $EE_CELL_NUM
       end-if
     end-if


FROM PS_PERSONAL_PHONE PHONE
WHERE PHONE.EMPLID = $Emplid

end-select

End-Procedure !Get-EE-PHONE-DTL

!**************************************************************************
! Procedure: Employee Email Details                                       *
!                                                                         *
! Description: Get the Employee Email Details                             *
!                                                                         *
!**************************************************************************
begin-procedure Get-EE-EMAIL-DTL

begin-select
EMAIL.E_ADDR_TYPE
EMAIL.EMAIL_ADDR

     Let $Email_type = rtrim(&EMAIL.E_ADDR_TYPE, ' ')
     if $Email_type = 'BUSN'
       MOVE &EMAIL.EMAIL_ADDR     to  $EE_EMAIL_ADDR
       end-if

FROM PS_EMAIL_ADDRESSES EMAIL
WHERE EMAIL.EMPLID = $Emplid

end-select

End-Procedure !Get-EE-EMAIL-DTL

!**************************************************************************
! Procedure: Employee KIWISAVER Details                                   *
!                                                                         *
! Description: Get the Employee KIWISAVER Details                         *
!                                                                         *
!**************************************************************************
begin-procedure Get-EE-KIWI-DTL

begin-select
KIWI.EMPLID
KIWI.EFFDT
!KIWI.GPNZ_KIW_OPTN

  ! let $kiwi_option = RTRIM(LTRIM(&KIWI.GPNZ_KIW_OPTN, ' '), ' ')

   if $kiwi_option = 'N'
       move 'NE' TO $EE_KIWI_ELIG
       move 'N' TO $EE_OPTOUT_FLAG
    end-if

   if $kiwi_option = 'I'
       move 'EE' TO $EE_KIWI_ELIG
       move 'N' TO $EE_OPTOUT_FLAG
    end-if

    if $kiwi_option = 'O'
       move 'Y' TO $EE_OPTOUT_FLAG
       !move &KIWI.EFFDT to $EE_OPTOUT_DATE ! datetostr(&KIWI.EFFDT,'YYYYMMDD')
       let $EE_OPTOUT_DATE = datetostr(&KIWI.EFFDT,'YYYYMMDD')
       DO Get-EE-BK-ACC-DTL
   end-if

FROM PS_GPNZ_EE_KIW_DTL KIWI
WHERE KIWI.EMPLID = $Emplid
      AND KIWI.EFFDT = (SELECT MAX(KIWI1.EFFDT) FROM PS_GPNZ_EE_KIW_DTL KIWI1
                     WHERE KIWI.EMPLID = KIWI1.EMPLID
                     AND KIWI1.EFFDT <= $period_end_dt)
end-select
End-Procedure !Get-EE-KIWI-DTL

!**************************************************************************
! Procedure: Employee bank Account Details                                *
!                                                                         *
! Description: Get the Employee bank Account Details                      *
!                                                                         *
!**************************************************************************
begin-procedure Get-EE-BK-ACC-DTL

begin-select DISTINCT
ACC.EMPLID
ACC.ACCOUNT_ID
ACC.BANK_CD
ACC.BRANCH_EC_CD
ACC.ACCOUNT_EC_ID
ACC.ACCOUNT_NAME
EEJOB.EFFDT
EEJOB.ACTION

     Let $EE_EMPLOY_START_DT = datetostr(&EEJOB.EFFDT,'YYYYMMDD')

     LET $Bank_Num = ltrim(rtrim(&ACC.BANK_CD,' '),' ')
     LET $Branch_Num = ltrim(rtrim(&ACC.BRANCH_EC_CD,' '),' ')
     Let $Account_Num = ltrim(rtrim(&ACC.ACCOUNT_EC_ID,' '),' ')
     Let $Bank_Acc_Dtls = $Bank_Num || $Branch_Num || ' ' || $Account_Num

     MOVE $Bank_Acc_Dtls                    to $EE_BANK_ACC_NUM
     MOVE &ACC.ACCOUNT_NAME                     to $ACC_HOLDER_NAME


FROM PS_JOB EEJOB, PS_PYE_BANKACCT ACC
WHERE EEJOB.EMPLID = $Emplid
   AND EEJOB.EMPLID = ACC.EMPLID
   AND EEJOB.ACTION IN ('HIR','REH')
   AND EEJOB.JOB_INDICATOR = 'P'
   AND ACC.ACCOUNT_ID = (SELECT ACC1.ACCOUNT_ID FROM PS_GP_NET_DIST_DTL ACC1
                        Where ACC.EMPLID = ACC1.EMPLID
                        AND EEJOB.EMPL_RCD = ACC1.EMPL_RCD
                        AND ACC.ACCOUNT_ID = ACC1.ACCOUNT_ID
                        AND PRIMARY_ACCT_IND = 'Y' )
   AND EEJOB.EFFDT = (SELECT MAX(EEJOB1.EFFDT) FROM PS_JOB EEJOB1
                     WHERE EEJOB.EMPLID = EEJOB1.EMPLID
                     AND EEJOB.EMPL_RCD = EEJOB1.EMPL_RCD
                     AND EEJOB1.ACTION IN ('HIR','REH')
                     AND EEJOB1.EFFDT <= $period_end_dt)
end-select

End-Procedure !Get-EE-BK-ACC-DTL

!**************************************************************************
! Procedure: Write Employer Details                                       *

!**************************************************************************

begin-procedure Write-Employer-Dtls

let $REPORT_TEXT = ltrim(rtrim($REC_TYPE_ER,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($ER_IRD_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($ER_CONT_NAME,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($ER_PHONE_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($ER_CELL_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($ER_IR_VER_NUM,' '),' ')
 Show $REPORT_TEXT
   WRITE 1 FROM $REPORT_TEXT

end-procedure !Write-Employer-Dtls

!**************************************************************************
! Procedure: Write Employee Details                                       *

!**************************************************************************

begin-procedure Write-Employee-Dtls

let $REPORT_TEXT = ltrim(rtrim($REC_TYPE_EE,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_NAME,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_IRD_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_KIWI_ELIG,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_NAME_PREFIX,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim(replace($EE_FIRST_NAME,',',' '),' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim(replace($EE_LAST_NAME,',',' '),' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim(replace($EE_ADDRESS1,',',' '),' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim(replace($EE_ADDRESS2,',',' '),' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','

!******************************************************************
!Bug 18185782 - GPNZKD01.SQR FAILS WITH CHARACTERS - \ / ( ) +    *
!******************************************************************
Let $alphanumeric = ''
String 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUWXYZ1234567890- ' by '' into $alphanumeric
let #lengthphone = length($EE_BUSN_PHONE) + 1
let #counter = 1
let $temp = ''
let $final= ''

While (#counter <  #lengthphone)
 Let $temp = substr($EE_BUSN_PHONE, #counter,1)
  If(instr($alphanumeric,$temp,1) = 0)
    Let $temp = ''
  End-If
Let $final = $final || $temp
Let #counter = #counter + 1
End-While
Let $EE_BUSN_PHONE = $final
let #lengthphone = length($EE_BUSN_PHONE)
   If(#lengthphone > 12)
     Let $EE_BUSN_PHONE = substr($EE_BUSN_PHONE,1,12)                             !***As per legislation, the Bussiness phone number should be at max 12 digits
   End-If
!******************** Bug fix over here***************************
 
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_BUSN_PHONE,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','

!******************************************************************
!Bug 18185782 - GPNZKD01.SQR FAILS WITH CHARACTERS - \ / ( ) +    *
!******************************************************************

let #lengthphone = length($EE_CELL_NUM) + 1
let #counter = 1
let $temp = ''
let $final= ''

While (#counter <  #lengthphone)
 Let $temp = substr($EE_CELL_NUM, #counter,1)
 If(instr($alphanumeric,$temp,1) = 0)
    Let $temp = ''
 End-If
Let $final = $final || $temp                                                     !***As per legislation, the Bussiness phone number should be at max 15 digits
Let #counter = #counter + 1
End-While
Let $EE_CELL_NUM = $final
let #lengthphone = length($EE_CELL_NUM)
   If(#lengthphone > 15)
     Let $EE_CELL_NUM = substr($EE_CELL_NUM,1,15)                             
   End-If

!******************** Bug fix over here***************************

let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_CELL_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_EMAIL_ADDR,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_OPTOUT_FLAG,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_EMPLOY_START_DT,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_BANK_ACC_NUM,' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim(replace($ACC_HOLDER_NAME,',',' '),' '),' ')
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ','
let $REPORT_TEXT = ltrim(rtrim ($REPORT_TEXT,' '),' ') || ltrim(rtrim($EE_OPTOUT_DATE,' '),' ')
!SHOW $REPORT_TEXT
   WRITE 1 FROM $REPORT_TEXT

end-procedure !Write-Employee-Dtls

!********************************************************************
! Procedure :   Get-Employee to be processed.                       *
!********************************************************************
Begin-Procedure Process-Employee

!********For Option 'N'******************!
Begin-Select
KIWISAVER.EMPLID
KIWISAVER.EMPL_RCD
KIWISAVER.GPNZ_KIW_OPTN
KIWISAVER.EFFDT
   move &KIWISAVER.EMPLID to $Emplid
   let $kiwi_option = RTRIM(LTRIM(&KIWISAVER.GPNZ_KIW_OPTN, ' '), ' ')
   Do Get-EE-IRD-DTL
   Do Get-EmployeeAddress-Details
   Do Get-EE-PHONE-DTL
   Do Get-EE-EMAIL-DTL
   Do Get-EE-KIWI-DTL
   Do Write-Employee-Dtls
   do Init_Val1
from PS_JOB JOB1,PS_GPNZ_EE_KIW_DTL KIWISAVER,PS_GP_PYGRP PGRP
where  JOB1.EMPLID = KIWISAVER.EMPLID
AND JOB1.EMPL_RCD = KIWISAVER.EMPL_RCD
AND JOB1.GP_PAYGROUP = PGRP.GP_PAYGROUP
AND JOB1.EFFDT = (SELECT MAX(JOB2.EFFDT) FROM PS_JOB JOB2 WHERE JOB2.EMPLID = JOB1.EMPLID AND JOB2.EMPL_RCD = JOB1.EMPL_RCD AND JOB2.EFFDT<= $period_end_dt)
AND JOB1.EFFSEQ = (SELECT MAX(JOB3.EFFSEQ) FROM PS_JOB JOB3 WHERE JOB3.EMPLID = JOB1.EMPLID AND JOB3.EMPL_RCD = JOB1.EMPL_RCD AND JOB3.EFFDT = JOB1.EFFDT AND JOB3.EFFDT<= $period_end_dt )
AND PGRP.PAY_ENTITY = $Run_Pay_Entity
AND KIWISAVER.GPNZ_KIW_OPTN = 'N'
AND KIWISAVER.EFFDT between $period_start_dt  and $period_end_dt

UNION

!****************************************!
!********For Option 'O'******************!
SELECT KIWISAVER.EMPLID,
KIWISAVER.EMPL_RCD,
KIWISAVER.GPNZ_KIW_OPTN,
KIWISAVER.EFFDT
from PS_JOB JOB1,PS_GPNZ_EE_KIW_DTL KIWISAVER,PS_GP_PYGRP PGRP
where  JOB1.EMPLID = KIWISAVER.EMPLID
AND JOB1.EMPL_RCD = KIWISAVER.EMPL_RCD
AND JOB1.GP_PAYGROUP = PGRP.GP_PAYGROUP
AND JOB1.EFFDT = (SELECT MAX(JOB2.EFFDT) FROM PS_JOB JOB2 WHERE JOB2.EMPLID = JOB1.EMPLID AND JOB2.EMPL_RCD = JOB1.EMPL_RCD  AND JOB2.EFFDT<= $period_end_dt)
AND JOB1.EFFSEQ = (SELECT MAX(JOB3.EFFSEQ) FROM PS_JOB JOB3 WHERE JOB3.EMPLID = JOB1.EMPLID AND JOB3.EMPL_RCD = JOB1.EMPL_RCD AND JOB3.EFFDT = JOB1.EFFDT AND JOB3.EFFDT<= $period_end_dt )
AND PGRP.PAY_ENTITY = $Run_Pay_Entity
AND KIWISAVER.GPNZ_KIW_OPTN = 'O'
AND KIWISAVER.EFFDT between $period_start_dt  and $period_end_dt


UNION

!*****************************************************!
!****************For Option 'I'***********************!
!***Only rows of 'I' which have previous row of 'O'***!
!***should be shown on the report*********************!

SELECT KIWISAVER.EMPLID,
KIWISAVER.EMPL_RCD,
KIWISAVER.GPNZ_KIW_OPTN,
KIWISAVER.EFFDT

from PS_JOB JOB1,PS_GPNZ_EE_KIW_DTL KIWISAVER,PS_GP_PYGRP PGRP, PS_GPNZ_EE_KIW_DTL KIWI5
where  JOB1.EMPLID = KIWISAVER.EMPLID
AND JOB1.EMPL_RCD = KIWISAVER.EMPL_RCD
AND JOB1.GP_PAYGROUP = PGRP.GP_PAYGROUP
AND JOB1.EFFDT = (SELECT MAX(JOB2.EFFDT) FROM PS_JOB JOB2 WHERE JOB2.EMPLID = JOB1.EMPLID AND JOB2.EMPL_RCD = JOB1.EMPL_RCD AND JOB2.EFFDT <= $period_end_dt)
AND JOB1.EFFSEQ = (SELECT MAX(JOB3.EFFSEQ) FROM PS_JOB JOB3 WHERE JOB3.EMPLID = JOB1.EMPLID AND JOB3.EMPL_RCD = JOB1.EMPL_RCD AND JOB3.EFFDT = JOB1.EFFDT AND JOB3.EFFDT <= $period_end_dt )
AND PGRP.PAY_ENTITY = $Run_Pay_Entity
AND KIWISAVER.GPNZ_KIW_OPTN = 'I'
AND KIWI5.EMPLID = KIWISAVER.EMPLID
AND KIWI5.EMPL_RCD = KIWISAVER.EMPL_RCD
AND KIWI5.GPNZ_KIW_OPTN = 'O'
AND KIWI5.EFFDT = (SELECT  MAX(KIWI6.EFFDT) from PS_GPNZ_EE_KIW_DTL KIWI6 where  KIWI6.EMPLID = KIWI5.EMPLID and KIWI6.EMPL_RCD = KIWI5.EMPL_RCD and KIWI6.EFFDT < KIWISAVER.EFFDT )
AND KIWISAVER.EFFDT between $period_start_dt  and $period_end_dt
order by 1,2,4
End-Select

!***************************************************************!
End-Procedure !Process-Employee

#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'datemath.sqc'  !Routines for Date Arithmetic
#Include 'number.sqc'    !Routines to format numbers
#Include 'stdapi.sqc'    !Routines to Update Run Status
#include 'address.sqc'   !global address formating
#include 'readxlat.sqc'  ! Get shortname or longname from xlattable
#Include 'useprntr.sqc'
#Include 'sqrtrans.sqc'
