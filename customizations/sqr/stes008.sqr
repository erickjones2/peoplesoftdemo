!***********************************************************************
!  STES008: Transfer Agent Instructions                                *
!***********************************************************************
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2013, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!----------------------------------------------------------------------
!                                                                      
!          $Date:  2013/01/18:02:50:26                                 !
!       $Release:  HR92                                                !
!      $Revision:  101                                                 !
!                                                                      *
!***********************************************************************
!----------------------------------------------------------------------
! Program Descr: Prints Transfer Agent Instructions  for a given Stock ID
!      
!----------------------------------------------------------------------
! Prompts:       Stock ID, Reprint , Control #
! Tables:        RUN_CNTL_ST, 
!                PS_STOCK_DTL, 
!                PS_ST_AGENT_DTL,
!                PS_ST_ESPP_PURCH,
!                PS_ST_PERSON_NAME, 
!                PS_PERS_NID, 
!                PS_ST_BROKER_TBL,
!                PS_STOCK_LEGEND,
!                ST_INSIDER_TBL
! Sorts:         Name
!----------------------------------------------------------------------
#include 'setenv.sqc'

!--------------------------------------------------------------------
Begin-Setup
!--------------------------------------------------------------------

 #include 'ptpsl177.sqc'

End-Setup

!-----------------------------------------------------------------------
Begin-Report
!-----------------------------------------------------------------------

  do Init-Report
  if $TransferAgentID <> ''
    do Process-Main
  else
    show 'Transfer Agent not found. Please check Stock Details to ensure a Transfer Agent is setup.'
  end-if
  do Reset
  do Successful-EOJ

End-Report

!----------------------------------------------------------------------!
! Procedure: Report-Translation                                        !
! Desc:      This procedure gets the report language and headers       !
!----------------------------------------------------------------------!
Begin-Procedure Report-Translation

  do Init_Report_Translation ('STOCK', $language_cd)
  do Append_Report_Translation ($ReportID)

  do Get_Field_Information ('STOCK'  ,'NID',             $NidLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'EMPLID',          $EmplidLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'SHARES',          $SharesLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'NAME',            $NameLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'NUMBER',          $NumberLbl,        #DW)
  do Get_Field_Information ('STOCK'  ,'DATE',            $DateLbl,          #DW)
  do Get_Field_Information ('STOCK'  ,'TOTAL',           $TotalLbl,         #DW)
  do Get_Field_Information ('STOCK'  ,'STOCK_PLAN',      $StockPlanLbl,     #DW)
  do Get_Field_Information ('STOCK'  ,'STOCK_ID',        $StockidLbl,       #DW)
  do Get_Field_Information ('STOCK'  ,'DTC_ACCOUNT_NBR', $DtcLbl,           #DW)
  do Get_Field_Information ('STOCK'  ,'ISSUANCE_TYPE',   $IssuanceLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'AUTH_SIGNATURE',  $AuthSignLbl,      #DW)
  do Get_Field_Information ('STOCK'  ,'INSIDER',         $InsiderLbl,       #DW)

  do Get_Field_Information ('STES008','STES008',         $Reporttitle,      #DW)
  do Get_Field_Information ('STES008','DWAC_SUMMARY',    $DwacSummaryLbl,   #DW)
  do Get_Field_Information ('STES008','SUMMARY_BY_PLAN', $SummaryByPlanLbl, #DW)
  do Get_Field_Information ('STES008','LEGEND_ID_KEY',   $LegendIdKeyLbl,   #DW)
  do Get_Field_Information ('STES008','CUSIP_NUMBER',    $CusipNumberLbl,   #DW)
  do Get_Field_Information ('STES008','CONTROL_NO',      $ControlNoLbl,     #DW)
  do Get_Field_Information ('STES008','REPRINT',         $ReprintLbl,       #DW)
  do Get_Field_Information ('STES008','BROKER',          $BrokerLbl,        #DW)
  do Get_Field_Information ('STES008','TRANSACTION',     $TransactionLbl,   #DW)
  do Get_Field_Information ('STES008','REGISTRATION',    $RegistrationLbl,  #DW)
  do Get_Field_Information ('STES008','LEGEND_ID',       $LegendLbl,        #DW)
  do Get_Field_Information ('STES008','CERTIFICATE',     $CertificateLbl,   #DW)
  do Get_Field_Information ('STES008','CERT_BROKER',     $CertBrokerLbl,    #DW)
  do Get_Field_Information ('STES008','ACCOUNT_NUMBER',  $AcctNbrLbl,       #DW)
  do Get_Field_Information ('STES008','BROKER_BRANCH',   $BrokerBrchLbl,    #DW)
  do Get_Field_Information ('STES008','CONTROL_NUMBER',  $ControlNbrLbl,    #DW)
  do Get_Field_Information ('STES008','NAME_ADDRESS',    $NameAddrLbl,      #DW)
  do Get_Field_Information ('STES008','PURCHASED',       $PurchasedLbl,     #DW)
  do Get_Field_Information ('STES008','PURCHASE_DT',     $PurchaseDtLbl,    #DW)

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Init-Report
!-----------------------------------------------------------------------

  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Define-Prcs-Vars
  do Get-Run-Control-Parms
  let $ReportId = 'STES008'
  do Get-Report-Language    ! Procedure that decides the report language
                            ! and then calls 'Report-Translation' Procedure
                            ! that reads the language dep. text.

  if $prcs_process_instance = ''
    do Get-Stock-Values
  else
    do Get-SQR-Parms
  end-if

  do Init-Variables
  do Create-Array
  do Build-Where-Clause

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Get-Stock-Values
!-----------------------------------------------------------------------
  INPUT $RC_STOCK_ID        MAXLEN=10  'Enter Stock ID'  TYPE=CHAR
  INPUT $RC_EMPLID          MAXLEN=10  'Enter Empl ID'  TYPE=CHAR
  INPUT $RC_REPRINT_PROMPT  MAXLEN=1   'Reprint Yes/No?'  TYPE=CHAR

  if $RC_REPRINT_PROMPT = 'Y'
    INPUT #RC_CONTROL_NUMBER MAXLEN=7  'Enter Control Number'  TYPE=INTEGER
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Procedure: Init-Variables
! Descr:     Initializes all report variables
!-----------------------------------------------------------------------
Begin-Procedure Init-Variables

  let #MaxControlNbr = #RC_TRANSFER_CNTL_NBR
  let $Comments      = rtrim($RC_COMMENTS,' ')
  let #PlanCount     = 1
  let #BrokerCount   = 1
  let #LegendCount   = 1

Begin-Select

W.CUSIP_NBR
X.TRANSFER_AGENCY_ID
Y.DESCR
Z.ADDRESS1
Z.ADDRESS2
Z.CITY
Z.STATE
Z.POSTAL
Z.COUNTRY

  let $Cusip_Nbr         = rtrim(&w.cusip_nbr,' ')
  let $TransferAgentID   = rtrim(&x.transfer_agency_id,' ')
  let $TransferDescr     = rtrim(&y.descr,' ')
  let $TAddress1         = rtrim(&z.address1,' ')
  let $TAddress2         = rtrim(&z.address2,' ') 
  let $TCountry          = rtrim(&z.country,' ') 
  let $TCity-Zip         = rtrim(&z.city,' ') ||', '|| rtrim(&z.state,' ') ||'-'|| rtrim(&z.postal,' ')

from PS_STOCK_TBL      W,
     PS_STOCK_DTL      X,
     PS_ST_AGENT_DTL   Y,
     PS_ST_AGENT_CNTCT Z 
where W.STOCK_ID           = $Rc_Stock_ID
  and W.STOCK_ID           = X.STOCK_ID
  and X.EFFDT              = (select MAX(XX.EFFDT) 
                              from PS_STOCK_DTL XX
                              where XX.STOCK_ID = X.STOCK_ID
                                and XX.EFFDT   <= $AsOfToday )
  and X.STOCK_ID           = Z.STOCK_ID
  and X.TRANSFER_AGENCY_ID = Z.ST_AGENCY_ID
  and X.TRANSFER_AGENCY_ID = Y.ST_AGENCY_ID
  and Y.EFFDT              = (select MAX(YY.EFFDT) 
                              from PS_ST_AGENT_DTL YY
                              where YY.ST_AGENCY_ID = Y.ST_AGENCY_ID
                               and YY.EFFDT       <= $AsOfToday )
  and (Z.ST_CONTACT_TYPE   = 'Y'
   or Z.ST_CONTACT_TYPE    = 'T')
  and Z.EFFDT              = (select MAX(ZZ.EFFDT) 
                              from PS_ST_AGENT_CNTCT ZZ
                              where ZZ.STOCK_ID     = Z.STOCK_ID
                                and ZZ.ST_AGENCY_ID = Z.ST_AGENCY_ID)

End-Select

  if $RC_REPRINT_PROMPT = 'N'
    do  Get-Last-Control-Number
  end-if

End-Procedure

!-----------------------------------------------------------------------
Begin-Heading 15
!-----------------------------------------------------------------------

  #include 'stdhdg01.sqc'

  print $StockIdLbl                                        (-1,001,   )
  print ':'                                                (  ,   ,001)
  print $Rc_Stock_ID                                       (  ,016,010)

  print $CusipNumberLbl                                    (+1,001,012)
  print ':'                                                (  ,   ,001)
  print $Cusip_Nbr                                         (  ,016,009)
  do Format-Amt(#MaxControlNbr,$out,'9999999',$Cur,$Curout)
  let $out = ltrim($out,' ')
  let $ControlNbr = $ControlNoLbl || ': ' || $out
  print $ControlNbr                                        (  ,083,   ) bold

  print $ReprintLbl                                        (+1,001,007)
  print ':'                                                (  ,   ,001)
  print $Rc_Reprint_Prompt                                 (  ,016,001)

  print $IssuanceLbl                                       (+1,001,013)
  print ':'                                                (  ,   ,001)
  print $IssuanceTypeLbl                                   (  ,016,011)

  print $TransferDescr                                     (  ,083,   )
  print $TAddress1                                         (+1,083,   )

  if $TAddress2 <> ''
    print $TAddress2                                       (+1,083,   )
  end-if

  print $TCity-Zip                                         (+1,083,   )
  print $TCountry                                          (+1,083,   )

  print  $NameLbl                                          (+2,016,025)
  print  $BrokerBrchLbl                                    (  ,076,030)
  print  $NidLbl                                           (+1,016,025)
  print  $RegistrationLbl                                  (  ,043,035)
  print  $AcctNbrLbl                                       (  ,076,030)

  print  $PurchaseDtLbl                                    (+1,001,013)
  print  $EmplidLbl                                        (  ,016,012)
  print  $InsiderLbl                                       (  ,029,007)
  print  $NameAddrLbl                                      (  ,043,035)
  print  $LegendLbl                                        (  ,076,030)
  print  $StockPlanLbl                                     (  ,108,011)
  print  $PurchasedLbl                                     (  ,127,016)
  print '-'                                                (+1,001,170) fill

End-Heading

!-----------------------------------------------------------------------
Begin-Procedure Initialize-Variables
!-----------------------------------------------------------------------
  let $Name              = ' '
  let $NationalId        = ''
  let $Emplid            = ''
  let $StockPlan         = ''
  let $PeriodEndDt       = ''
  let $IssueAcctNbr      = ''
  let #SharesPurchased   = 0
  let $LegendId          = ''
  let $RegistrationName  = ''
  let $IssueAddress1     = ''
  let $IssueAddress2     = ''
  let $IssueAddress3     = ''
  let $IssueCity         = ''
  let $IssueState        = ''
  let $IssuePostal       = ''
  let $IssueCountry      = ''

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Build-Where-Clause
!-----------------------------------------------------------------------
  let $SQLQuote                      = ''''
  let $WhereUpdateEmplid             = ''
  let $WhereEmplidB                  = ''
  let $WhereEmplidC                  = ''
  let $WhereTransferControlNoB       = ''
  let $WhereTransferControlNoC       = ''
  let $WhereTransferIssueDateB       = ''
  let $WhereTransferIssueDateC       = ''
  let $WhereUpdateTransferControlNo  = ''
  let $WhereUpdateTransferIssueDate  = ''

  if ltrim($RC_EMPLID, ' ') <> ''
    let $WhereUpdateEmplid = ' and EMPLID     = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
    let $WhereEmplidB      = ' and AA.EMPLID = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
    let $WhereEmplidC      = ' and A.EMPLID  = ' || $SQLQuote || $RC_EMPLID || $SQLQuote
  end-if

  if $RC_REPRINT_PROMPT = 'Y'
    let $MAX_CNTL_NO_CHAR             = to_char(#MaxControlNbr)
    let $WhereTransferControlNoB      = 'and AA.TRANSFER_CNTL_NBR  = ' || $MAX_CNTL_NO_CHAR
    let $WhereTransferControlNoC      = 'and A.TRANSFER_CNTL_NBR = ' || $MAX_CNTL_NO_CHAR
    let $WhereUpdateTransferControlNo = 'and TRANSFER_CNTL_NBR     = ' || $MAX_CNTL_NO_CHAR
  else
    let $WhereTransferIssueDateB      = 'and AA.TRANSFER_ISSUE_DT is null'
    let $WhereTransferIssueDateC      = 'and A.TRANSFER_ISSUE_DT  is null'
    let $WhereUpdateTransferIssueDate = 'and TRANSFER_ISSUE_DT     is null'
  end-if

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Get-Last-Control-Number
!-----------------------------------------------------------------------

Begin-Select

V.LAST_CONTROL_NBR

  let #MaxControlNbr = &v.last_control_nbr + 1

from PS_STOCK_AGENT V
where V.STOCK_ID     = $Rc_Stock_ID
  and V.ST_AGENCY_ID = $TransferAgentID

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Create-Array
! Descr:   Creates array used for computing
!-----------------------------------------------------------------------
Begin-Procedure Create-Array

  create-array name  = StockPlan           -
               size  = 100                 -
               field = StockPlan:char      -
               field = SharesPurchased:number

  create-array name  = BrokerBranch        -
               size  = 100                 -
               field = BrokerID:char       -
               field = BranchID:char       -
               field = BranchName:char     -
               field = SharesPurchased:number

  create-array name  = Legend              -
               size  = 100                 -
               field = LegendID:char       -
               field = LegendDescr:char

End-Procedure

!----------------------------------------------------------------------!
! Procedure:  Process-Main                                             !
! Descr:      This is where all required data is selected              !
!----------------------------------------------------------------------!
Begin-Procedure Process-Main

  let $RowsFound = 'N'
  do Select-Certificate-Issuance
  do Initialize-Variables
  do Select-Broker-Issuance

  if $RowsFound = 'Y'
    do Print-Totals
    if $RC_REPRINT_PROMPT = 'Y'
      do Update-Transfer-Issue-Date
    else  
      do Update-Control-No
    end-if
    do Update-Last-Control-No
  end-if

End-Procedure

!----------------------------------------------------------------------!
Begin-Procedure Select-Certificate-Issuance
!----------------------------------------------------------------------!

  let $IssuanceTypeLbl = $CertificateLbl
  let $BrokerID        = ''
  let $BranchID        = ''
  let $RowFound        = 'N'
  let $IssueType       = 'C'
  let $Insider         = ' '

Begin-Select

A.EMPLID
A.STOCK_PLAN
A.PERIOD_END_DT
A.ST_ACCOUNT_NBR
A.SHARES_PURCHASED
A.LEGEND_ID
A.REGISTRATION_NAME
A.ADDRESS1
A.ADDRESS2
A.ADDRESS3
A.CITY
A.STATE
A.POSTAL
A.COUNTRY

  let $Emplid              = rtrim(&a.emplid,' ')
  let $StockPlan           = rtrim(&a.stock_plan,' ')
  let $PeriodEndDt         = rtrim(&a.period_end_dt,' ')
  let $IssueAcctNbr        = rtrim(&a.st_account_nbr,' ')
  let #SharesPurchased     = &a.shares_purchased
  let $LegendId            = rtrim(&a.legend_id,' ')
  let $Name                = rtrim(&a.registration_name,' ')
  do Rotate-Name
  let $RegistrationName    = $Name

  let $IssueAddress1       = rtrim(&a.address1,' ')
  let $IssueAddress2       = rtrim(&a.address2,' ')
  let $IssueAddress3       = rtrim(&a.address3,' ')
  let $IssueCity           = rtrim(&a.city,' ')
  let $IssueState          = rtrim(&a.state,' ')
  let $IssuePostal         = rtrim(&a.postal,' ')
  let $IssueCountry        = rtrim(&a.country,' ')

  if $IssueCity <> ''
    let $IssueCityZip  = $IssueCity
  else
    let $IssueCityZip  = ''
  end-if
  if $IssueCityZip  <> ''
    if $IssueState <> ''
      let $IssueCityZip  = $IssueCityZip ||', '|| $IssueState ||'-'|| $IssuePostal
    end-if
  else
    if $IssueState <> ''
      let $IssueCityZip  = $IssueState ||'-'|| $IssuePostal
    end-if
  end-if
  let #TotalSharePurch = #TotalSharePurch + #SharesPurchased
  let #SubSharePurch   = #SubSharePurch   + #SharesPurchased
  do Get-Name
  do Get-National-Id
  do Get-Legend
  do Get-Insider-Status
  do Print-Details
  do Populate-Arrays
  let $RowFound = 'Y'

from PS_ST_ESPP_PURCH A
where A.STOCK_ID      = $RC_STOCK_ID
  and A.ISSUANCE_TYPE = 'C'
  and A.CONFIRMED     = 'Y'
[$WhereTransferIssueDateC]
[$WhereTransferControlNoC]
[$WhereEmplidC]
order by A.PERIOD_END_DT,
         A.EMPLID

End-Select

  if $RowFound = 'Y'
    let $RowsFound = 'Y'
    do Print-Sub-Totals
  end-if

End-Procedure

!----------------------------------------------------------------------!
Begin-Procedure Select-Broker-Issuance
!----------------------------------------------------------------------!

  let $IssuanceTypeLbl = $BrokerLbl
  let $RowFound        = 'N'
  let $IssueType       = 'B'
  let $Insider         = ' '

Begin-Select

AA.ST_BROKERAGE_ID
AA.ST_BRANCH_ID
AA.EMPLID
AA.STOCK_PLAN
AA.PERIOD_END_DT
AA.ST_ACCOUNT_NBR
AA.SHARES_PURCHASED
AA.LEGEND_ID
AA.REGISTRATION_NAME

  let $BrokerID         = rtrim(&aa.st_brokerage_id,' ')
  let $BranchID         = rtrim(&aa.st_branch_id,' ')
  let $Emplid           = rtrim(&aa.emplid,' ')
  let $StockPlan        = rtrim(&aa.stock_plan,' ')
  let $PeriodEndDt      = rtrim(&aa.period_end_dt,' ')
  let $IssueAcctNbr     = rtrim(&aa.st_account_nbr,' ')
  let #SharesPurchased  = &aa.shares_purchased
  let $LegendId         = rtrim(&aa.legend_id,' ')
  let $RegistrationName = rtrim(&aa.registration_name,' ')
  let #TotalSharePurch  = #TotalSharePurch + #SharesPurchased
  let #SubSharePurch    = #SubSharePurch   + #SharesPurchased
  do Get-Name
  do Get-National-Id
  do Get-Branch-Address
  do Get-Legend
  do Get-Insider-Status
  do Print-Details
  do Populate-Arrays
  let $RowFound = 'Y'

from PS_ST_ESPP_PURCH AA
where AA.STOCK_ID        = $RC_STOCK_ID
  and AA.ISSUANCE_TYPE   = 'B'
  and AA.CONFIRMED       = 'Y'
[$WhereTransferIssueDateB]
[$WhereTransferControlNoB]
[$WhereEmplidB]
order by AA.ST_BROKERAGE_ID,
         AA.ST_BRANCH_ID,
         AA.PERIOD_END_DT,
         AA.EMPLID

End-Select

  if $RowFound = 'Y'
    let $RowsFound = 'Y'
    do Print-Sub-Totals
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Name
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Name

Begin-Select

ST_PERSON_NAME.NAME

  let $Name = rtrim(&ST_PERSON_NAME.name,' ')

from PS_ST_PERSON_NAME ST_PERSON_NAME
where ST_PERSON_NAME.EMPLID = $Emplid

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-National-Id
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-National-Id

  let $NationalId = ''

Begin-Select

PERS_NID.NATIONAL_ID

  let $NationalId = rtrim(&pers_nid.national_id, ' ')

 from PS_PERS_NID PERS_NID
where PERS_NID.EMPLID      = $Emplid
  and PERS_NID.PRIMARY_NID = 'Y'

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Branch-Address
! Descr:   Retrieves the Branch's Address
!-----------------------------------------------------------------------
Begin-Procedure Get-Branch-Address

  let $BrokerName    = ''
  let $BranchName    = ''
  let $IssueAddress1 = ''
  let $IssueAddress2 = ''
  let $IssueAddress3 = ''
  let $IssueCity     = ''
  let $IssueState    = ''
  let $IssuePostal   = ''
  let $IssueCountry  = ''

Begin-Select

R1.DESCR
R.DESCR
R.ADDRESS1
R.ADDRESS2
R.ADDRESS3
R.CITY
R.STATE
R.POSTAL
R.COUNTRY

  let $BrokerName    = rtrim(&r1.descr,' ')
  let $BranchName    = rtrim(&r.descr,' ')
  let $IssueAddress1 = rtrim(&r.address1,' ')
  let $IssueAddress2 = rtrim(&r.address2,' ')
  let $IssueAddress3 = rtrim(&r.address3,' ')
  let $IssueCity     = rtrim(&r.city,' ')
  let $IssueState    = rtrim(&r.state,' ')
  let $IssuePostal   = rtrim(&r.postal,' ')
  let $IssueCountry  = rtrim(&r.country,' ')

from PS_ST_BRKR_BRANCH R,
     PS_ST_BROKER_DTL  R1
where R.ST_BROKERAGE_ID  = $BrokerID
  and R.ST_BRANCH_ID     = $BranchID
  and R.EFF_STATUS       = 'A'
  and R.EFFDT            = (SELECT MAX(EFFDT)
                            from PS_ST_BRKR_BRANCH
                            where ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
                              and ST_BRANCH_ID    = R.ST_BRANCH_ID
                              and EFFDT          <= $AsOfToday)
  and R1.ST_BROKERAGE_ID = R.ST_BROKERAGE_ID
  and R1.EFF_STATUS      = 'A'
  and R1.EFFDT           = (SELECT MAX(EFFDT)
                            from PS_ST_BROKER_DTL
                            where ST_BROKERAGE_ID = R1.ST_BROKERAGE_ID
                              and EFFDT          <= $AsOfToday)

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Legend
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Get-Legend

Begin-Select

STOCK_LEGEND.COMMENTS

  let $LegendDescr  = rtrim(&stock_legend.comments,' ')
  do Populate-Legend-Array

from PS_STOCK_LEGEND STOCK_LEGEND
where STOCK_LEGEND.STOCK_ID  = $RC_STOCK_ID
  and STOCK_LEGEND.LEGEND_ID = $LegendId

End-Select

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Arrays
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Populate-Arrays

  if #PlanCount = 1
    put $StockPlan #SharesPurchased into StockPlan(1) StockPlan SharesPurchased
    add 1 to #PlanCount
  else
    let #Row = 1
    let $Flag = 'N'
    while #Row < #PlanCount
      get $ArrayPlan from StockPlan(#Row) StockPlan
      if $StockPlan = $ArrayPlan
        array-add #SharesPurchased to StockPlan(#Row) SharesPurchased
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $StockPlan #SharesPurchased into StockPlan(#PlanCount) StockPlan SharesPurchased
      add 1 to #PlanCount
    end-if
  end-if

  if $BrokerID <> '' and $BranchID <> ''
    if #BrokerCount = 1
      put $BrokerID $BranchID $BranchName #SharesPurchased into BrokerBranch(1) BrokerID BranchID BranchName SharesPurchased
      add 1 to #BrokerCount
    else
      let #Row = 1
      let $Flag = 'N'
      while #Row < #BrokerCount
        get $ArrayBrokerID $ArrayBranchID from BrokerBranch(#Row) BrokerID BranchID
        if $ArrayBrokerID = $BrokerID and $ArrayBranchID = $BranchID
          array-add #SharesPurchased to BrokerBranch(#Row) SharesPurchased
          let $Flag = 'Y'
          break
        end-if
        add 1 to #Row
      end-while
      if $Flag <> 'Y'
        put $BrokerID $BranchID $BranchName #SharesPurchased into BrokerBranch(#BrokerCount) BrokerID BranchID BranchName SharesPurchased
        add 1 to #BrokerCount
      end-if
    end-if
  end-if

End-Procedure

!-----------------------------------------------------------------------
! Section: Populate-Legend-Array
! Descr:   
!-----------------------------------------------------------------------
Begin-Procedure Populate-Legend-Array

  if #LegendCount = 1
    put $LegendId $LegendDescr into Legend(1) LegendID LegendDescr
    add 1 to #LegendCount
  else
    let #Row  = 1
    let $Flag = 'N'
    while #Row < #LegendCount
      get $ArrayLegendID from Legend(#Row) LegendID
      if $LegendId = $ArrayLegendID
        let $Flag = 'Y'
        break
      end-if
      add 1 to #Row
    end-while
    if $Flag <> 'Y'
      put $LegendId $LegendDescr into Legend(#LegendCount) LegendID LegendDescr
      add 1 to #LegendCount
    end-if
  end-if

End-Procedure

!----------------------------------------------------------------------
Begin-Procedure Get-Insider-Status
!----------------------------------------------------------------------

  let $TypeOfficer = ' '
  let $TypeRepPerson = ' '
  let $TypeDirector = ' '
  let $TypeCompInsider = ' '
  let $TypeBenOwner = ' '
  let $InsiderType = ' '

Begin-Select

P.ST_OFFICER
P.ST_DIRECTOR
P.COMPANY_INSIDER
P.REPORTING_PERSON
P.ST_BEN_OWNER


  if &p.st_officer = 'Y'
    let $TypeOfficer = 'O'
    let $OfficerType = $TypeOfficer || ','
    concat $OfficerType with $InsiderType
  end-if


  if &p.st_director = 'Y'
    let $TypeDirector = 'D'
    let $DirectorType = $TypeDirector || ','
    concat $DirectorType with $InsiderType
  end-if


  if &p.company_insider = 'Y'
    let $TypeCompInsider = 'I'
    let $CompInsiderType = $TypeCompInsider || ','
    concat $CompInsiderType with $InsiderType
  end-if


  if &p.reporting_person = 'Y'
    let $TypeRepPerson = 'R'
    let $RepPersonType = $TypeRepPerson || ','
    concat $RepPersonType with $InsiderType
  end-if


  if &p.st_ben_owner = 'Y'
    let $TypeBenOwner = 'B'
    concat $TypeBenOwner with $InsiderType
  end-if
   
from  PS_ST_INSIDER_TBL P
where P.EMPLID   = $Emplid
  and P.STOCK_ID = $RC_STOCK_ID 
  and P.EFFDT    = (select Max(EFFDT)
                     from PS_ST_INSIDER_TBL
                    where EMPLID    = P.EMPLID
                      and STOCK_ID  = P.STOCK_ID)
End-Select

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Details
!-----------------------------------------------------------------------

  do Format-DateTime($PeriodEndDt, $DateOut, {DEFDATE}, '', '')
  print $DateOut                                           (+1,001,013)
  print $Name                                              (  ,016,025)
  print $StockPlan                                         (  ,108,011)
  print #SharesPurchased                                   (  ,121,022) edit 999,999,999,999.999999
  print $BranchName                                        (  ,076,030)

  if $IssueType = 'B'
    print $BrokerName                                      (  ,043,035)
    print $NationalID                                      (+1,016,025)
    print $RegistrationName                                (  ,043,035)
    print $IssueAcctNbr                                    (  ,076,030)
    print $Emplid                                          (+1,016,012)
    print $InsiderType                                     (  ,029,011)
    if $IssueAddress1 <> ''
      print $IssueAddress1                                 (  ,043,035)
      print ''                                             (+1,   ,   )
     end-if
  end-if

  if $IssueType = 'C'
    print $RegistrationName                                (  ,043,035)
    print $NationalID                                      (+1,016,025)
    print $IssueAddress1                                   (  ,043,035)
    print $IssueAcctNbr                                    (  ,076,030)
    print $Emplid                                          (+1,016,012)
    print $InsiderType                                     (  ,029,011)
  end-if

  if $IssueAddress2 <> ''
    print $IssueAddress2                                   (  ,043,035)
    print ''                                               (+1,   ,   )
  end-if
  if $IssueCityZip <> ''
    print $IssueCityZip                                    (  ,043,035)
  end-if

  print ''                                                 (+2,   ,   )

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Update-Transfer-Issue-Date
!-----------------------------------------------------------------------
Begin-Sql

UPDATE PS_ST_ESPP_PURCH
  SET TRANSFER_ISSUE_DT = $AsOfToday
where STOCK_ID          = $RC_STOCK_ID
  and CONFIRMED         = 'Y'
[$WhereUpdateEmplid]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]

End-Sql

End-Procedure 

!-----------------------------------------------------------------------
Begin-Procedure Update-Control-No
!-----------------------------------------------------------------------
Begin-Sql

UPDATE PS_ST_ESPP_PURCH
  SET TRANSFER_CNTL_NBR = #MaxControlNbr,
  TRANSFER_ISSUE_DT     = $AsOfToday
where STOCK_ID          = $Rc_Stock_ID
  and CONFIRMED         = 'Y'
[$WhereUpdateEmplid]
[$WhereUpdateTransferControlNo]
[$WhereUpdateTransferIssueDate]
 
End-Sql

End-Procedure

!--------------------------------------------------------------------
Begin-Procedure Update-Last-Control-No
!--------------------------------------------------------------------
Begin-SQL

UPDATE PS_STOCK_AGENT
  SET LAST_CONTROL_NBR = #MaxControlNbr
where STOCK_ID     = $Rc_Stock_ID
  and ST_AGENCY_ID = $TransferAgentID

End-Sql

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Totals
!-----------------------------------------------------------------------

  print '-'                                                (+1,001,170) fill
  let $SubTotalLbl = $TotalLbl || ' ' || $CertBrokerLbl || ':'
  print $SubTotalLbl                                       (+1,076,030)
  print #TotalSharePurch                                   (  ,121,022) edit 999,999,999,999.999999
  print '-'                                                (+1,001,170) fill

  do Print-Footer

 End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Sub-Totals
!-----------------------------------------------------------------------

  print '-'                                                (+1,001,170) fill
  let $SubTotalLbl = $TotalLbl || ' ' || $IssuanceTypeLbl || ':'
  print $SubTotalLbl                                       (+1,076,020)
  print #SubSharePurch                                     (  ,121,022) edit 999,999,999,999.999999
  print '-'                                                (+1,001,170) fill
  let #SubSharePurch = 0
  new-page

End-Procedure

!-----------------------------------------------------------------------
Begin-Procedure Print-Footer
!-----------------------------------------------------------------------

  if #LegendCount > 1
    print $LegendIdKeyLbl                                  (+2,001,013) underline
    let #Row = 1
    while #Row < #LegendCount
      get $LegendID $LegendDescr from Legend(#Row) LegendID LegendDescr
      print $LegendID                                      (+1,001,010)
      print $LegendDescr                                   (  ,020,   )
      add 1 to #Row
    end-while
  end-if

  if #PlanCount > 1
    print $SummaryByPlanLbl                                (+2,076,015) underline
    let #Row = 1
    while #Row < #PlanCount
      get $StockPlan #SharesPurchased from StockPlan(#Row) StockPlan SharesPurchased
      print $StockPlan                                     (+1,076,010)
      print #SharesPurchased                               (  ,121,022) edit 999,999,999,999.999999
      add 1 to #Row
    end-while
  end-if

  if #BrokerCount > 1
    print $DwacSummaryLbl                                  (+2,076,032) underline
    print $DtcLbl                                          (  ,108,004) underline
    let #Row = 1
    while #Row < #BrokerCount
      get $BrokerID $BranchName #SharesPurchased from BrokerBranch(#Row) BrokerID BranchName SharesPurchased
      do Get-Broker-Dtc
      print $BranchName                                    (+1,076,030)
      print $DtcAccountNbr                                 (  ,108,010)
      print #SharesPurchased                               (  ,121,022) edit 999,999,999,999.999999
      add 1 to #Row
    end-while
  end-if

  print $Comments               (+3,005) Wrap 105 4
  print '_'                     (+3,005,040) fill
  print $AuthSignLbl            (+1,005,020)
  print $DateLbl                (  ,042,004)

End-Procedure

!-----------------------------------------------------------------------
! Section: Get-Broker-Dtc
! Descr:   Retrieves the Broker's DTC Number
!-----------------------------------------------------------------------
Begin-Procedure Get-Broker-Dtc

  let $DtcAccountNbr = ''

Begin-Select

ST_BROKER_TBL.DTC_ACCOUNT_NBR

  let $DtcAccountNbr = rtrim(&st_broker_tbl.dtc_account_nbr,' ')

from PS_ST_BROKER_TBL ST_BROKER_TBL
where ST_BROKER_TBL.ST_BROKERAGE_ID = $BrokerID

End-Select

End-Procedure

!-----------------------------------------------------------------------
!  SQC Include Files
!-----------------------------------------------------------------------
#include 'strunctl.sqc'   ! Stock Admin's Run Control Record
#include 'prcsapi.sqc'
#include 'prcsdef.sqc'    ! Update Process Open_Trans variable declaration
#include 'eoj.sqc'        ! End of Report Format
#include 'sqrtrans.sqc'   ! Access Strings Table
#include 'reset.sqc'      ! Reset printer procedure
#include 'curdttim.sqc'   ! Get-Current-DateTime procedure
#include 'datemath.sqc'
#include 'datetime.sqc'   ! Routines for date and time formatting
                          ! Procedures: Init-Datetime
                          ! Procedures: Format-DateTime
                          ! Procedures: Diff-Date
                          ! Procedures: many others.
#include 'number.sqc'     ! Procedures: Init-Number
#include 'getrplng.sqc'   ! Get the report language
#include 'rotname1.sqc'   ! First Name, Last Name
