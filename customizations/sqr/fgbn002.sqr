
!***********************************************************************
! FGBN002:  Health Benefits FEHB Clearinghouse Report & Interface file *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!                                                                      *
! Copyright (C) 1988, 2014, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!***********************************************************************
!                                                                      *
!          $Date:  2014/02/09:02:30:41                                 !
!       $Release:  HR92                                                !
!      $Revision:  102                                                 !
!                                                                      *
!***********************************************************************
!  Modifications:                                                      *
!***********************************************************************

#include 'setenv.sqc' !Set environment
#define col_total               1
#define col_heading             13
#define col_heading_center      54
#define col_benefit             12
#define col_empl                16
#define col_Ben_plan            26
#define col_Ben_plan_desc       34
#define col_Ben_totl            36
#define col_bar                 70
#define col_amt                 70

Begin-Setup
  #Include 'ptpsp125.sqc'
End-Setup

begin-program
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  do Process-Main
  do StdAPI-Term
  close 90
end-program

!********************************************
begin-heading 6
!********************************************

  print 'PeopleSoft'                              (1)          center
  print 'Report ID:  '                            (2,1)
  print $ReportID                                 (2,{col_heading})
  print $ReportTitle                              (2,{col_heading_center})
  let #RptCol = {ColR} - 2
  page-number                                     (2,#RptCol)  'Page No.  '
  print 'Run Date '                               (3,#RptCol)
  print $ReportDate                               ()
  print 'Run Time '                               (4,#RptCol)
  print $ReportTime                               ()

  print 'Pay End Dt:'                             (3,1)
  print  $pay_period_end_dt_rpt                   (,{col_heading})

  print $rpt_qtr                                  (3,{col_heading_center})

  print 'Agency:'                                 (5,1)
  print $GVT_DESCR                                (,{col_heading})
  print '_'                                       (6,1,124)    Fill

end-heading


!********************************************
begin-procedure Init-Report
!********************************************

  move 'FGBN002' to $ReportID

  move 'FEHB Clearinghouse Report' to $ReportTitle
  display $ReportTitle
  display ' '

  do StdAPI-Init

  if $prcs_process_instance = ''
    do Ask-Values
  else
    do Get-Values
  end-if

  Do GET-GVT-AGENCY-ID

  open '{FILEPREFIX}FGBN002.DAT{FILESUFFIX}' as 90 for-writing record = 240

  let $H_RECONCILIATION_YEAR = SUBSTR($RUN_ASOFDATE,1,4)
  let $REPORT_MTH            = SUBSTR($RUN_ASOFDATE,5,2)

   EVALUATE $REPORT_MTH
        WHEN < '04'
           let $H_RECONCILIATION_QTR = '1'
           BREAK
        WHEN < '07'
           let $H_RECONCILIATION_QTR = '2'
           BREAK
        WHEN < '10'
           let $H_RECONCILIATION_QTR = '3'
           BREAK
        WHEN-OTHER
           let $H_RECONCILIATION_QTR = '4'
   END-EVALUATE

  do Format-DateTime($ASOFDATE, $out, {DEFDATE}, '', '')
  let $pay_period_end_dt_rpt = $out

  move 'GVT_CLER_TYPE'      to $FieldName     
  move $GVT_CLER_TYPE       to $FieldValue
  do Read-Translate-Table
  move $XlatShortName       to $PROC_TYPE_DESCR

  move 'GVT_CLER_PAY_CYCLE' to $FieldName
  move $GVT_CLER_PAY_CYCLE  to $FieldValue
  do Read-Translate-Table
  move $XlatLongName        to $PAY_CYCLE_DESCR

  let $rpt_qtr = 'For ' || $PAY_CYCLE_DESCR || ' Pay Cycle'

  let #RptCol = 108

end-procedure

!********************************************
begin-procedure Ask-Values
!********************************************

    input $Agency     'Enter Agency > ' type = char
    input $asofdate   'Enter As of Date (YYYYMMDD)> '
    input $Healthplan 'Enter Health Plan > '
    input $checkall   'Run for all Health Plans? (Y or N)'
    input $GVT_CLER_TYPE 'Enter Processing Type(I=Init, A=Add, R=Replace):'
    input $GVT_CLER_PAY_CYCLE 'Enter Pay Cycle(B=Bi-weekly, M=Monthly, O=Other):'

end-procedure

!********************************************
begin-procedure Get-Values
!********************************************
   do select-parameters

   do Format-DateTime(&RUN_CNTL_FG.ASOFDATE, $RUN_ASOFDATE, {DEFCMP}, '', '')

    MOVE &RUN_CNTL_FG.COMPANY TO $AGENCY
    MOVE &RUN_CNTL_FG.BENEFIT_PLAN TO $BENEFIT_PLAN
    MOVE &RUN_CNTL_FG.ALL_BENEFIT_PLAN TO $ALL_BENEFIT_PLAN
    MOVE &RUN_CNTL_FG.GVT_CLER_TYPE TO $GVT_CLER_TYPE
    MOVE &RUN_CNTL_FG.GVT_CLER_PAY_CYCLE TO $GVT_CLER_PAY_CYCLE
    MOVE &RUN_CNTL_FG.ASOFDATE TO $ASOFDATE

    Let $BENEFIT_PLAN = RTRIM($BENEFIT_PLAN,' ')

  IF $ALL_BENEFIT_PLAN = 'Y'
      move '' to $WHERE_CLAUSE
   ELSE
       LET $WHERE_CLAUSE = $WHERE_CLAUSE || ' AND '
       LET $WHERE_CLAUSE = $WHERE_CLAUSE || ' A.BENEFIT_PLAN = ''' || $BENEFIT_PLAN || ''''
   End-if

   EVALUATE $GVT_CLER_PAY_CYCLE
     WHEN = 'B'
     WHEN = 'M'
       LET $SEL_PAY_CYCLE = ' AND A1.PAY_FREQUENCY = ''' || $GVT_CLER_PAY_CYCLE || ''''
       BREAK
     WHEN-OTHER
       LET $SEL_PAY_CYCLE = ' AND A1.PAY_FREQUENCY NOT IN (''' || 'B' || ''',''' || 'M' || ''')'
   END-EVALUATE

end-procedure

begin-procedure Convert-Date($Date_In, :$Date_Back)

  let $Work_Century = substr($Date_in, 1, 2)
  let $Work_Year    = substr($Date_In, 3, 2)
  let $Work_Month   = substr($Date_in, 5, 2)
  let $Work_Day     = substr($Date_in, 7, 2)

  let #Wrk_Century = $Work_Century
  let #Wrk_Year    = $Work_Year
  let #Wrk_Month   = $Work_Month
  let #Wrk_Day     = $Work_Day

  let $Date_Back   =  $Work_Month || $Work_Day || $Work_Year

end-procedure

!********************************************
begin-procedure Process-Main
!********************************************
LET $WRITE_HDR_SW          = 'N'
LET #BEN_PLAN_CNT          = 0
LET #TOTAL_CNT             = 0
LET #TOTAL_DED_CUR         = 0
LET #EMPL_DED_CUR_A        = 0
LET #EMPL_DED_CUR_N        = 0
LET #BEN_PLAN_DED_CUR_A    = 0
LET #BEN_PLAN_DED_CUR_N    = 0
LET $SPACE_FIELD           = ' '

begin-SELECT
A.BENEFIT_PLAN     () ON-BREAK LEVEL=1 PRINT=NEVER AFTER=BENEFIT-CHANGE
D.EMPLID           () ON-BREAK LEVEL=1 PRINT=NEVER AFTER=EMPLID-CHANGE
D.EMPL_RCD
B.SSN
C.LAST_NAME_SRCH
C.FIRST_NAME_SRCH
D.GVT_POI
A.DED_CLASS

SUM(A.DED_CUR)       &A.DED_CUR
SUM(A.DED_CUR_PAYBK) &A.DED_CUR_PAYBK
SUM(A.DED_NOT_TAKEN) &A.DED_NOT_TAKEN


  MOVE &A.BENEFIT_PLAN    TO $REC_BENEFIT_PLAN
  MOVE &D.EMPLID          TO $EMPLID
  MOVE &D.EMPL_RCD        TO #EMPL_RCD
  MOVE &C.LAST_NAME_SRCH  TO $LASTNAME
  MOVE &C.FIRST_NAME_SRCH TO $FIRSTNAME
  LET #DED_CUR1 = (&A.DED_CUR + &A.DED_NOT_TAKEN - &A.DED_CUR_PAYBK)
  MOVE &D.GVT_POI         TO $GVT_POI
  MOVE &A.DED_CLASS       TO $DED_CLASS
  MOVE &B.SSN             TO $SSN

  do GET-AGENCY-SUBAGENCY

  IF $DED_CLASS = 'A' or
     $DED_CLASS = 'B'
     LET #EMPL_DED_CUR_A = #EMPL_DED_CUR_A + #DED_CUR1
  ELSE
     LET #EMPL_DED_CUR_N = #EMPL_DED_CUR_N + #DED_CUR1
  END-IF

FROM PS_PAY_DEDUCTION A,
     PS_PAYGROUP_TBL A1,
     PS_PAY_CHECK B,
     PS_GVT_PERS_DATA C,
     PS_GVT_JOB D

WHERE A.COMPANY    = $AGENCY
  AND A.PAY_END_DT = $ASOFDATE
  AND A.OFF_CYCLE  = 'N'
  AND A.PLAN_TYPE  IN ('10','1W')
[$WHERE_CLAUSE]

AND A1.COMPANY     = A.COMPANY
AND A1.PAYGROUP    = A.PAYGROUP
AND A1.EFFDT = (SELECT MAX(A2.EFFDT)
                FROM  PS_PAYGROUP_TBL A2
                WHERE A2.COMPANY  = A1.COMPANY
                  AND A2.PAYGROUP = A1.PAYGROUP
                  AND A2.EFFDT   <= $ASOFDATE)
AND A1.EFF_STATUS = 'A'
[$SEL_PAY_CYCLE]

AND B.COMPANY         = A.COMPANY
AND B.PAYGROUP        = A.PAYGROUP
AND B.PAY_END_DT      = A.PAY_END_DT
AND B.OFF_CYCLE       = A.OFF_CYCLE
AND B.PAGE_NUM        = A.PAGE_NUM
AND B.LINE_NUM        = A.LINE_NUM
AND B.SEPCHK          = A.SEPCHK
AND B.PAYCHECK_STATUS = 'F'
AND C.EMPLID          = B.EMPLID
AND C.EMPL_RCD        = B.EMPL_RCD
AND C.EFFDT =
     (SELECT MAX(C_ED.EFFDT) FROM PS_GVT_PERS_DATA C_ED
       WHERE C.EMPLID    = C_ED.EMPLID
         AND C.EMPL_RCD  = C_ED.EMPL_RCD
         AND C_ED.EFFDT <= $ASOFDATE)
AND C.EFFSEQ =
     (SELECT MAX(C_ES.EFFSEQ) FROM PS_GVT_PERS_DATA C_ES
       WHERE C.EMPLID    = C_ES.EMPLID
         AND C.EMPL_RCD  = C_ES.EMPL_RCD
         AND C.EFFDT     = C_ES.EFFDT)

AND D.EMPLID   = C.EMPLID
AND D.EMPL_RCD = C.EMPL_RCD
AND D.EFFDT =
     (SELECT MAX(D_ED.EFFDT) FROM PS_GVT_JOB D_ED
       WHERE D.EMPLID    = D_ED.EMPLID
         AND D.EMPL_RCD = D_ED.EMPL_RCD
         AND D_ED.EFFDT <= C.EFFDT)
AND D.EFFSEQ =
     (SELECT MAX(D_ES.EFFSEQ) FROM PS_GVT_JOB D_ES
       WHERE D.EMPLID    = D_ES.EMPLID
         AND D.EMPL_RCD = D_ES.EMPL_RCD
         AND D.EFFDT     = D_ES.EFFDT)

GROUP BY A.BENEFIT_PLAN,D.EMPLID,D.EMPL_RCD,C.LAST_NAME_SRCH,C.FIRST_NAME_SRCH,D.GVT_POI, A.DED_CLASS, B.SSN
ORDER BY A.BENEFIT_PLAN,D.EMPLID
end-SELECT

  IF $WRITE_HDR_SW          = 'Y'
     DO WRITE-TRAILER

     print 'Agency Total FEHB Remitted:'      (+4,{col_total})
     print #total_ded_cur                     (,{col_amt})   EDIT '$$$,$$$,$$9.99'

     print 'Agency Total Employee Count:'     (+2,{col_total})
     print #total_cnt                         (,{col_amt})   EDIT '99,999,999,999'
  ELSE
     SHOW ' '
     SHOW '***NO DATA FOUND FOR THESE PARAMETERS***'
     SHOW ' '
     SHOW 'Agency:            ' $AGENCY
     SHOW 'As Of Date:        ' $ASOFDATE
     SHOW 'Benefit Plan:      ' $BENEFIT_PLAN
     SHOW 'All Benefit Plans: ' $ALL_BENEFIT_PLAN
     SHOW 'Processing Type:   ' $PROC_TYPE_DESCR
     SHOW 'Pay Cycle:         ' $PAY_CYCLE_DESCR
  END-IF

END-PROCEDURE

!********************************************
begin-procedure GET-AGENCY-SUBAGENCY
!********************************************

begin-SELECT

AGID.COMPANY
AGID.GVT_SUB_AGENCY

  let $AGENCY-ID = rtrim(&AGID.COMPANY,' ') || rtrim(&AGID.GVT_SUB_AGENCY,' ')

FROM PS_GVT_POI_TBL AGID

WHERE AGID.GVT_POI = $GVT_POI
AND   AGID.EFFDT = (SELECT MAX(AGID1.EFFDT)
                    FROM PS_GVT_POI_TBL AGID1
                    WHERE AGID1.GVT_POI = AGID.GVT_POI
                    AND   AGID1.EFFDT  <= $ASOFDATE)
end-SELECT

end-procedure  !GET-AGENCY-SUBAGENCY


!********************************************
begin-procedure GET-HEALTH-BENEFIT
!********************************************
  LET $EMPLOYEE_COVERED_SW = 'N'
BEGIN-SELECT
H.COVERAGE_BEGIN_DT
H.COVERAGE_ELECT
H.COVERAGE_END_DT
H.COVRG_CD


  MOVE &H.COVERAGE_BEGIN_DT TO $COVERAGE_BEGIN_DT
  MOVE &H.COVERAGE_ELECT    TO $COVERAGE_ELECT
  MOVE &H.COVERAGE_END_DT   TO $COVERAGE_END_DT
  MOVE &H.COVRG_CD          TO $COVERAGE_CODE


  IF $COVERAGE_ELECT = 'E'
     IF RTRIM($COVERAGE_END_DT,' ') = ''
         LET $EMPLOYEE_COVERED_SW = 'Y'
     ELSE
         do Format-DateTime($COVERAGE_END_DT, $OUT, {DEFCMP}, '', '')
         IF $OUT > $ASOFDATE
             LET $EMPLOYEE_COVERED_SW = 'Y'
         END-IF
      END-IF
  END-IF

FROM PS_HEALTH_BENEFIT H
WHERE H.EMPLID    = $EMPLID
AND   H.EMPL_RCD = #EMPL_RCD
AND   H.PLAN_TYPE IN ('10','1W')
AND   H.EFFDT = (SELECT MAX(H1.EFFDT)
                   FROM PS_HEALTH_BENEFIT H1
                  WHERE H.EMPLID         = H1.EMPLID
                    AND H.EMPL_RCD      = H1.EMPL_RCD
                    AND H.COBRA_EVENT_ID = H1.COBRA_EVENT_ID
                    AND H.PLAN_TYPE      = H1.PLAN_TYPE
                    AND H.BENEFIT_NBR    = H1.BENEFIT_NBR
                    AND H1.EFFDT        <= $ASOFDATE)
END-SELECT

END-PROCEDURE

!********************************************
begin-procedure GET-GVT-AGENCY-ID
!********************************************

BEGIN-SELECT
GAS.GVT_AGY_LOC_CODE
COM.DESCR

   MOVE &GAS.GVT_AGY_LOC_CODE  TO $GVT_AGY_ID
   let  $GVT_AGY_ID            = Upper($GVT_AGY_ID)
   MOVE &COM.DESCR             TO $GVT_DESCR

FROM PS_GVT_INTRFC_INFO GAS,
     PS_COMPANY_TBL COM
WHERE GAS.COMPANY = $AGENCY
  AND GAS.COMPANY = COM.COMPANY
  AND GAS.EFFDT   = COM.EFFDT
AND   GAS.EFFDT = (SELECT MAX(GAS1.EFFDT)
                          FROM PS_GVT_INTRFC_INFO GAS1
                          WHERE GAS.COMPANY = GAS1.COMPANY
                          AND   GAS1.EFFDT <= $ASOFDATE)
END-SELECT
END-PROCEDURE

!********************************************
begin-procedure GET-BENEFIT_PLAN_DESC
!********************************************
   LET $BENEFIT_PLAN_DESCR = $REC_BENEFIT_PLAN

BEGIN-SELECT

BEN.DESCR

   MOVE &BEN.DESCR TO $BENEFIT_PLAN_DESCR

FROM PS_BENEF_PLAN_TBL BEN
WHERE BEN.PLAN_TYPE IN ('10','1W')
AND   BEN.BENEFIT_PLAN = $REC_BENEFIT_PLAN
AND   BEN.EFFDT = (SELECT MAX(BEN1.EFFDT)
                          FROM PS_BENEF_PLAN_TBL BEN1
                          WHERE BEN.PLAN_TYPE    = BEN1.PLAN_TYPE
                          AND   BEN.BENEFIT_PLAN = BEN1.BENEFIT_PLAN
                          AND   BEN1.EFFDT <= $ASOFDATE)
END-SELECT
END-PROCEDURE

!********************************************
begin-procedure EMPLID-CHANGE
!********************************************
  DO GET-HEALTH-BENEFIT

  IF $EMPLOYEE_COVERED_SW = 'Y'

      LET #EMPL_DED_CUR = #EMPL_DED_CUR_A + #EMPL_DED_CUR_N
      Do WRITE-DETAIL

      LET #BEN_PLAN_CNT       = #BEN_PLAN_CNT       + 1
      LET #BEN_PLAN_DED_CUR_A = #BEN_PLAN_DED_CUR_A + #EMPL_DED_CUR_A
      LET #BEN_PLAN_DED_CUR_N = #BEN_PLAN_DED_CUR_N + #EMPL_DED_CUR_N

      LET #EMPL_DED_CUR_A   = 0
      LET #EMPL_DED_CUR_N   = 0
  END-IF

END-PROCEDURE

!********************************************
begin-procedure BENEFIT-CHANGE
!********************************************

  DO GET-BENEFIT_PLAN_DESC
  DO PRINT-BENEFIT-PLAN

  LET #TOTAL_CNT     = #TOTAL_CNT     + #BEN_PLAN_CNT
  LET #TOTAL_DED_CUR = #TOTAL_DED_CUR + #BEN_PLAN_DED_CUR_A + #BEN_PLAN_DED_CUR_N

  LET #BEN_PLAN_CNT       = 0
  LET #BEN_PLAN_DED_CUR_A = 0
  LET #BEN_PLAN_DED_CUR_N = 0

END-PROCEDURE

!********************************************
begin-procedure PRINT-BENEFIT-PLAN
!********************************************

   print 'Benefit Plan:'                     (+3,{col_benefit})
   print $REC_BENEFIT_PLAN                   (,{col_ben_plan})
   print $BENEFIT_PLAN_DESCR                 (,{col_ben_plan_desc})

   print 'Employee FEHB Withholdings:'       (+2,{col_empl})
   print #ben_plan_ded_cur_a                 (,{col_amt})     EDIT '$$$,$$$,$$9.99'

   print 'Employer FEHB Contributions:'      (+2,{col_empl})
   print #ben_plan_ded_cur_n                 (,{col_amt})     EDIT '$$$,$$$,$$9.99'

   print '_'                                 (+1,{col_bar},14)   Fill


   let #ben_plan_ded_cur = #ben_plan_ded_cur_a + #ben_plan_ded_cur_n

   print 'Benefit Plan Total FEHB Remitted:' (+2,{col_ben_totl})
   print #ben_plan_ded_cur                   (,{col_amt})     EDIT '$$$,$$$,$$9.99'

   print 'Benefit Plan Number of Employees:' (+2,{col_ben_totl})
   print #ben_plan_cnt                       (,{col_amt})     EDIT '99,999,999,999'



END-PROCEDURE

!********************************************
begin-procedure WRITE-HDR-RECORD
!********************************************

   LET $H_RECORD_TYPE = 'HEAD'

   do Format-DateTime($ASOFTODAY, $OUT, {DEFCMP}, '', '')
   let $H_ASOFTODAY   = $OUT
   let $H_ASOFDATE    = $RUN_ASOFDATE

   do Format-DateTime($CHECK_DT, $CHECK_DATE, {DEFCMP}, '', '')
   let $CHECK_DATE      = SUBSTR($CHECK_DATE 3,6)
   let $CONTACT_PHONE_T = SUBSTR($CONTACT_PHONE 1,3) ||  SUBSTR($CONTACT_PHONE 5,3) || SUBSTR($CONTACT_PHONE 9,4)

WRITE 90 FROM $H_RECORD_TYPE:4
              $GVT_AGY_ID:8
              $H_ASOFTODAY:8
              $H_ASOFDATE:8
              $H_RECONCILIATION_YEAR:4
              $H_RECONCILIATION_QTR:1
              $GVT_CLER_TYPE:1
              $GVT_CLER_PAY_CYCLE:1
              $SPACE_FIELD:205

END-PROCEDURE

!********************************************
begin-procedure WRITE-DETAIL
!********************************************
  IF $WRITE_HDR_SW  = 'N'
    LET $WRITE_HDR_SW          = 'Y'
     SHOW ' '
     SHOW 'Agency:            ' $AGENCY
     SHOW 'As Of Date:        ' $ASOFDATE
     SHOW 'Benefit Plan:      ' $BENEFIT_PLAN
     SHOW 'All Benefit Plans: ' $ALL_BENEFIT_PLAN
     SHOW 'Processing Type:   ' $PROC_TYPE_DESCR
     SHOW 'Pay Cycle:         ' $PAY_CYCLE_DESCR
    DO WRITE-HDR-RECORD
  END-IF

  LET #EMPL_DED_CUR = #EMPL_DED_CUR   * 100
  LET $D_DED_CUR    = EDIT(#EMPL_DED_CUR,'099999')

   IF #EMPL_DED_CUR < 0
      let $DEB_CRED_IND = 'C'
      let #EMPL_DED_CUR = #EMPL_DED_CUR * -1
  ELSE
      let $DEB_CRED_IND = ''
  END-IF

  do Format-DateTime($COVERAGE_BEGIN_DT, $OUT, {DEFCMP}, '', '')
  LET $D_COVERAGE_BEGIN_DT  = $OUT

  LET $D_EE_ANNUITANT = 'R'

WRITE 90 FROM $GVT_AGY_ID:8
              $SSN:9
              $SPACE_FIELD:3
              $REC_BENEFIT_PLAN:2
              $COVERAGE_CODE:1
              $D_DED_CUR:6
              $LastName:50
              $FirstName:12
              $SPACE_FIELD:12
              $AGENCY-ID:4
              $GVT_POI:4
              $D_COVERAGE_BEGIN_DT:8
              $SPACE_FIELD:48
              $D_EE_ANNUITANT:1
              $SPACE_FIELD:59
              $DEB_CRED_IND:1
              $SPACE_FIELD:12


END-PROCEDURE

begin-procedure WRITE-TRAILER
!********************************************
  LET $T_RECORD_TYPE = 'FOOT'

  LET $TOTAL_CNT       = EDIT(#TOTAL_CNT,'0999999999')

  LET #T_TOTAL_DED_CUR = #TOTAL_DED_CUR * 100
  LET $TOTAL_DED_CUR   = EDIT(#T_TOTAL_DED_CUR,'099999999999')

WRITE 90 FROM $T_RECORD_TYPE:4
              $GVT_AGY_ID:8
              $TOTAL_CNT:10
              $TOTAL_DED_CUR:12
              $SPACE_FIELD:206

END-PROCEDURE

!****************************************************************
#Include 'fgrunctl.sqc'  !Get run control parameter values
#Include 'reset.sqc'     !Reset printer procedure
#Include 'curdttim.sqc'  !Get-Current-DateTime procedure
#Include 'datetime.sqc'  !Routines for date and time formatting
#Include 'number.sqc'    !Routines to format numbers
#include 'datemath.sqc'
#Include 'stdapi.sqc'    !Update Process API
#Include 'getcodta.sqc'  !Get-COMPANY-Data procedure
#Include 'readxlat.sqc'  !Read-Translate-Table procedure
#include 'rotname3.sqc'  !
