!***********************************************************************
! GPCHSI08.SQR  :AHV YEAR (AHV-Lohnbescheinigung)                      *
!***********************************************************************
!                                                                      *
!                                                                      *
!                                                                      *
! This software and related documentation are provided under a         *
! license agreement containing restrictions on use and                 *
! disclosure and are protected by intellectual property                *
! laws. Except as expressly permitted in your license agreement        *
! or allowed by law, you may not use, copy, reproduce,                 *
! translate, broadcast, modify, license, transmit, distribute,         *
! exhibit, perform, publish or display any part, in any form or        *
! by any means. Reverse engineering, disassembly, or                   *
! decompilation of this software, unless required by law for           *
! interoperability, is prohibited.                                     *
! The information contained herein is subject to change without        *
! notice and is not warranted to be error-free. If you find any        *
! errors, please report them to us in writing.                         *
!                                                                      *
!
! Copyright (C) 1988, 2019, Oracle and/or its affiliates.              *
! All Rights Reserved.                                                 *
!----------------------------------------------------------------------
!
!       $Release:  HR92                                                  !
!           $Bug:  29286054                                              !
!                                                                      *
!***********************************************************************

#include 'setenv.sqc'    ! set Default environment
#include 'gpchut10.sqc'  ! setenv override for Swiss Default.
#include 'gpchut12.sqc'  ! Substitution Variables Defined.
#include 'setup31.sqc'


begin-setup

end-setup

!***********************************************************************************************
begin-PROGRAM
  do Init-DateTime
  do Init-Number
  do Get-Current-DateTime
  do Init-Report
  
show ' $GPCH_EG_YEP_FLG = ' $GPCH_EG_YEP_FLG ' $Run_Option = ' $Run_Option ' $Rpt_Type = ' $Rpt_Type
show ' $ptot_domaind = ' $ptot_domaind ' #ptot_domaind = ' #ptot_domaind 
   
   If $Run_Option = 'Y'
     do Init_Statustbl
    do Get-Output-Directory('GPCHSI08',$Output_Directory,$prcs_no)
    do Process-Main
    do Stdapi-Term
    do Get-Log
    Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,$SysDateTime,$Cancel_option)
   else
 
      If $Cancel_Option = 'Y'
          do Cancle_YEA($ptot_requestid,$Ctl_Year,$comp,$providertype,#ptot_domainid)
          Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option)
      End-If
      ! ST Do Update_Status($Ctl_Year,$GPCH_EG_TRNS_SEQ,$Comp,$Type,$Run_Option,'')
      !Do Update_Status($Ctl_Year,#ptot_domainid,$Comp,$providertype,$Run_Option,'',$Cancel_option)
      do Stdapi-Term
      do Get-Log
   End-if

end-PROGRAM

!**********************************************************************************************
begin-procedure Init-Report
#debug show 'In Init-Report'
  let $Finish_Report = 'N'
  let $Error_List    = 'N'
  let $Error_Value   = 'N'
  let $company    = ''
  let $Ct_Year       = ''
  let $providertype ='7'   !SYED
  ! ST Let $Type = 'AHV Yearly'
  do Stdapi-Init
  if $prcs_process_instance = ''
     do ask-input
  else
     do Get-Report-Parameters
   
 if $GPCH_EG_YEP_FLG = 'Y'
     let $Provider_crit=' '
    do Get-PTotals-Data($Provider_crit,$providertype,#Domainid,$ptot_company,$ptot_year,#ptot_domainid,$ptot_providercd,$ptot_provtype,$ptot_requestid,$ptot_userkey) 
    do Check_Run_Report(#ptot_domainid,$Ctl_Year,$comp,$providertype,$Run_Option,$Cancel_option,$Rpt_Type)
   
 
       
    Let $LST_Interface = '1'
  
   end-if 
  end-if

  move 'GPCHSI08' to $ReportID
  do Init_Report_Translation($ReportID, $language_cd)
  do Append_Report_Translation('GPCHGLOB')
  do Append_Report_Translation('GPCHSI09')
  do Append_Report_Translation('GPCHAL01')

  do Gpce_Init_Report_Translation($ReportID, $language_cd)
  do Gpce_Append_Report_Translation('GPCHGLOB', $language_cd)
  do Gpce_Append_Report_Translation('GPCHSI09', $language_cd)
  do Gpce_Append_Report_Translation('GPCHAL01', $language_cd)

  do Report-Translation
  let $ReportTitle = $TITLE1 || ' '
  let $RepTit1     = ''
  let $RepTit1     = $ReportTitle || $Ct_Year
  let $RepTitList  = $ReportTitle || $Ct_Year
  let $ReportTitle = $RepTit1

  #debug show ' Report ID : ' $ReportID  ' ReportTitle : '  $ReportTitle
  if rtrim($Ct_Year,' ') <> ''
     let $CMP_Start_Dt = $Ct_Year || '01' || '01'
     let $CMP_End_Dt   = $Ct_Year || '12' || '31'

     do Format-DateTime($CMP_start_Dt, $ctl_start_dt, {DEFCMP}, '', 'native')
     do Format-DateTime($CMP_end_Dt, $ctl_end_dt, {DEFCMP}, '', 'native')
     do Format-DateTime($ctl_start_dt, $start_dt, {DEFCMP}, '', '')
     do Format-DateTime($ctl_end_dt, $end_dt, {DEFCMP}, '', '')
  end-if

  display ' From : '             noline
  display $ctl_start_dt          noline
  display ' To : '               noline
  display $ctl_end_dt


  move 0 to #Vol_Number
  move 0 to #RecordCount

  let $FileExtension = '.' || $OUTDESTFORM

  if $Ctl_Canton <> ''
           let $Ctl_Canton_Crit1          = ' AND SI08.STATE   = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit2          = ' AND SI081.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit3          = ' AND SI08E.STATE  = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit4          = ' AND SI081E.STATE = ''' || $Ctl_Canton || ''' '
           let $Ctl_Canton_Crit5          = ' AND R.GPCH_TX_CANTON = ''' || $Ctl_Canton || ''' '
   else
           let $Ctl_Canton_Crit1          = ' '
           let $Ctl_Canton_Crit2          = ' '
           let $Ctl_Canton_Crit3          = ' '
           let $Ctl_Canton_Crit4         = ' '
           let $Ctl_Canton_Crit5          = ' '
    end-if
#debug show 'Out Init-Report'
end-procedure

!********************************************************************************************
begin-procedure Get_Canton_Name
let $Canton_NameR = ''

begin-select on-error=give_warning
STATENM.DESCR
  let $Canton_NameR = rtrim(&STATENM.DESCR,' ')
from PS_STATE_NAMES_TBL STATENM

where  STATENM.STATE = $Ctl_Canton and
       STATENM.COUNTRY = 'CHE'
end-select

end-procedure

!********************************************************************************************
begin-procedure Employee_Data_XML
#debug show 'Employee_Data_XML in'


 If ( ( &A.EMPLID <> $EMA_EMPLID or ( &A.EMPLID = $EMA_EMPLID and &A.EMPL_RCD <> #EMA_EMPL_RCD ) ) And $EMA_EMPLID <> ' ' )
    
    Let $AHV-AVS-Salaries_Tag = '<AHV-AVS-Salaries>' || $AHV-AVS-Salary_Tag || '</AHV-AVS-Salaries>'
    Do Insert_Employee_Data_XML
    Let $AHV-AVS-Salary_Tag = ''
    
 End-If
 
 Let $EMA_EMPLID   = &A.EMPLID
 Let #EMA_EMPL_RCD = &A.EMPL_RCD

 let $AHV-AVS-Income_Tag  = '<AHV-AVS-Income>0.00</AHV-AVS-Income>'
 let $ALV-AC-Income_tag   = '<ALV-AC-Income>0.00</ALV-AC-Income>'
   
 If $MutationE = 'Entry'
   let $AHV-AVS-Income_Tag  = '<AHV-AVS-Income>1.00</AHV-AVS-Income>'
   
   Let $DeclarationCategoryE = '<DeclarationCategory>' || '<Entry><ValidAsOf>' || $ValidAsOfE || '</ValidAsOf></Entry>' || '</DeclarationCategory>'
   Let $AccountingTime_Tag   = '<AccountingTime>'      || '<from>'             || $ValidAsOfE || '</from>'              || '<until>' || $ValidAsOfE || '</until>' || '</AccountingTime>' 
  
 ! Manage control flag for Entry
 Begin-Sql on-error=give_warning
   Update PS_GP_PYE_SOVR set END_DT = $Ctl_Curr_Pay_End_Dt, SOVR_VAL_CHAR = 'SYSTEM', SOVR_VAL_DT = $current-date
   where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_HIR' ) and BGN_DT = &A.SEG_BGN_DT
   and exists ( select 'X' from PS_GP_PYE_SOVR where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_HIR' ) and BGN_DT = &A.SEG_BGN_DT)
 End-SQL
 
 Begin-Sql on-error=give_warning
   insert into PS_GP_PYE_SOVR select &A.EMPLID,&A.EMPL_RCD,P.PIN_NUM, &A.SEG_BGN_DT,$Ctl_Curr_Pay_End_Dt, 'SYSTEM', 0, $current-date, ' ', 'VR0'
   from PS_GP_PIN P 
   where P.PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_HIR' )
   and not exists ( select 'X' from PS_GP_PYE_SOVR where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM = P.PIN_NUM and BGN_DT = &A.SEG_BGN_DT )
 End-SQL
 
 End-IF
 
 
 If $MutationW = 'Withdrawal'
   let $ALV-AC-Income_tag   = '<ALV-AC-Income>1.00</ALV-AC-Income>'
   Let $DeclarationCategoryW = '<DeclarationCategory>' ||'<Withdrawal><ValidAsOf>' || $ValidAsOfW || '</ValidAsOf></Withdrawal>' || '</DeclarationCategory>'
   Let $AccountingTime_Tag   = '<AccountingTime>'      || '<from>'                 || $From_Date  || '</from>'                   || '<until>' || $To_Date || '</until>' || '</AccountingTime>' 

! Manage control flag for Termination
! In case SYSTIMESTAMP is not good for MSS, we'll take $current-date or same for MSS

Begin-Sql on-error=give_warning
Update PS_GP_PYE_SOVR set END_DT = $Ctl_Curr_Pay_End_Dt, SOVR_VAL_CHAR = 'SYSTEM', SOVR_VAL_DT = $current-date
 where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_TER' ) and BGN_DT = &A.SEG_END_DT
  and exists ( select 'X' from PS_GP_PYE_SOVR where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_TER' ) and BGN_DT = &A.SEG_END_DT)
End-SQL

Begin-Sql on-error=give_warning
insert into PS_GP_PYE_SOVR select &A.EMPLID,&A.EMPL_RCD,P.PIN_NUM, &A.SEG_END_DT, $Ctl_Curr_Pay_End_Dt, 'SYSTEM', 0, $current-date, ' ', 'VR0'
 from PS_GP_PIN P 
 where P.PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_TER' )
  and not exists ( select 'X' from PS_GP_PYE_SOVR where EMPLID = &A.EMPLID and EMPL_RCD = &A.EMPL_RCD and PIN_NUM = P.PIN_NUM and BGN_DT = &A.SEG_END_DT )
End-SQL


 End-If 
        
 Let $AHV-AVS-Salary_Tag = $AHV-AVS-Salary_Tag || '<AHV-AVS-Salary institutionIDRef='||'"'||$ptot_providercd||'">'
 || $DeclarationCategoryW || $DeclarationCategoryE 
 || $AccountingTime_Tag   || $AHV-AVS-Income_Tag || $ALV-AC-Income_tag || '</AHV-AVS-Salary>'


 Let $MutationE            = ' '
 Let $MutationW            = ' '
 Let $DeclarationCategoryE = ' '
 Let $DeclarationCategoryW = ' '
 Let $ValidAsOfE           = ' '
 Let $ValidAsOfW           = ' '  

 ! Very last row
 If #Process-count = #EMA-count
!    Let $EMA_EMPLID   = &A.EMPLID
!    Let #EMA_EMPL_RCD = &A.EMPL_RCD
    Let $AHV-AVS-Salaries_Tag = '<AHV-AVS-Salaries>' || $AHV-AVS-Salary_Tag || '</AHV-AVS-Salaries>'
    Do Insert_Employee_Data_XML
    Let $AHV-AVS-Salary_Tag = ''

 End-If
 
#debug show 'Employee_Data_XML out'     
end-procedure

!**********************************************************************************************
Begin-Procedure Insert_Employee_Data_XML
#debug show 'Insert_Employee_Data_XML in'
 
 !FMB 20090103
 let #ptot_year = $ptot_year 

Begin-Sql on-error=give_warning

 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_SI_PROV_CD=$ptot_providercd 
 AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company AND  EMPLID = $EMA_EMPLID AND EMPL_RCD = #EMA_EMPL_RCD 
 AND GPCH_SI_PROV_TYPE=$providertype AND END_DT = $Ctl_Curr_Pay_End_Dt

End-SQL

#debug Show ' $EMA_EMPLID = ' $EMA_EMPLID '$AHV-AVS-Income_Tag = ' $AHV-AVS-Income_Tag ' $ALV-AC-Income_tag = ' $ALV-AC-Income_tag   
  

Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PERSON (GPCH_EG_DOMAINID,GPCH_RC_PAY_YEAR,COMPANY,GPCH_SI_PROV_TYPE,
 GPCH_SI_PROV_CD,EMPLID,EMPL_RCD,BEGIN_DT,END_DT,GPCH_IF_VER,GPCH_EG_PRSN_XML) 
 values (#ptot_domainid,#ptot_year,$ptot_company,$ptot_provtype,$ptot_providercd,$EMA_EMPLID,#EMA_EMPL_RCD,
 $PAY_BGN_DT,$Ctl_Curr_Pay_End_Dt,1,$AHV-AVS-Salaries_Tag)

End-SQL

#debug show 'Insert_Employee_Data_XML out'
End-procedure

!**********************************************************************************************
begin-procedure Process-Main
#debug show ' Process-Main In '
do Get_Canton_Name
do Get_Type_Options($Name_Type,$Addr_Type,$Phone_Type,$Email_Type,$BirthName_Type,$Security_Type)

   do Get-Company-Address($comp,$ctl_end_dt,$language_cd,$Cpline1,$Cpline2,$Cpline3,$Cpline31,
                          $Cpline4,$Cpline5,$Cpline6,$Cpdescr,$Cpdescrshrt,$Cpcity,$Cpstate,$Cppostal,$CpBusn_Phone,$CpFax_Phone,$CpOtr_Phone)

   do Get_Fak_Tax_Data('NA',$Ctl_Com,$ctl_end_dt,
                       $Fak_Language,$Employer_Fak_Nbr,#Employer_Fak_Pct,
                       $Tax_Language,$Employer_StaxNr,#Staxb_PCTR,
                       #Employer_SI_Pct,$AHV_MBR_ID,$SI_AHV_PROVCD,
                       $KK,#COM_AHV_ADM_COST,#SI_TOT_AHV_PC,
                       #SI_TOT_ALV1PC,#SI_TOT_ALV2PC)

 let $SPRV_TYPE = '7'
 let $SPRV_CD   = '#AHV'
 let $SPRV_CANTON = ' '
 let $SPRV_ALL = ' '

 do Get-MBR-ID

 let $AHV_MBR_ID = $MBR_ID

!--------------------------------!
Let #Count = 0

Begin-Sql on-error=give_warning

  DELETE FROM PS_GPCHSI8X1_TMP 

End-Sql


Begin-Sql on-error=give_warning

  DELETE FROM PS_GP_PYE_SOVR WHERE PIN_NUM in ( select PIN_NUM from PS_GP_PIN where PIN_NM in('CH_AH_EMA_HIR','CH_AH_EMA_TER' )) 
  and END_DT = $Ctl_Curr_Pay_End_Dt and SOVR_VAL_CHAR = 'SYSTEM'

End-Sql

Begin-Sql on-error=give_warning

 DELETE FROM PS_GPCH_EG_PERSON WHERE  GPCH_EG_DOMAINID= #ptot_domainid AND GPCH_SI_PROV_CD=$ptot_providercd 
 AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company AND END_DT = $Ctl_Curr_Pay_End_Dt

End-SQL


#ifdef ORACLE
Begin-Sql on-error=give_warning
commit
End-Sql
#endif


#debug show ' after delete GPCHSI8X1_TMP'

! FMB 20120530
#debug show ' FMB $ctl_start_dt = ' $ctl_start_dt ' $ctl_end_dt = ' $ctl_end_dt ' $Ctl_Curr_Pay_End_Dt = ' $Ctl_Curr_Pay_End_Dt ' #Domainid  = ' #Domainid ' $comp = ' $comp

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHSI8X1_TMP(PROCESS_INSTANCE,EMPLID,EMPL_RCD,SEG_BGN_DT,SEG_END_DT,ACTION,HIRE_DT, TERMINATION_DT)
#ifdef ORACLE
SELECT /*+ INDEX(R PS_GPCH_RP_0001)*/
#else
SELECT
#endif

[$prcs_process_instance],R.EMPLID,R.EMPL_RCD,R.SEG_BGN_DT,R.SEG_END_DT,'TER',R.HIRE_DT,R.TERMINATION_DT
FROM PS_GPCH_RP_0001 R
  WHERE R.PAY_ENTITY         = $comp
!FMB 20140812
    AND R.PRD_END_DT         > $ctl_start_dt
    AND R.PRD_END_DT         <= $Ctl_Curr_Pay_End_Dt 
!    AND R.PRD_END_DT         = $Ctl_Curr_Pay_End_Dt 
    AND R.TERMINATION_DT     = R.SEG_END_DT
    AND R.GPCH_SI_AHV_STATUS <> '0'
    AND R.GPCH_AH_NNSS       <> ' '
    and R.GPCH_AL_CPAY_ENDDT = (select max(R2.GPCH_AL_CPAY_ENDDT) from PS_GPCH_RP_0001 R2
     where R.EMPLID          = R2.EMPLID 
       and R.EMPL_RCD        = R2.EMPL_RCD 
       and R.GP_PAYGROUP     = R2.GP_PAYGROUP
       and R.CAL_ID          = R2.CAL_ID
       and R.RSLT_SEG_NUM    = R2.RSLT_SEG_NUM )
    AND not exists 
     ( select 'X' from PS_JOB J 
                    where J.EMPLID   = R.EMPLID 
                      AND J.EMPL_RCD = R.EMPL_RCD
                      AND J.ACTION   in ('HIR','REH')
                      AND J.COMPANY  = R.COMPANY
! MSS platform dependent ?
#ifdef ORACLE
                      AND J.EFFDT    = R.SEG_END_DT + 1 )
#else
                      AND J.EFFDT    = DATEADD(dd,1,R.SEG_END_DT) )
#endif
  and not exists ( select 'X' from PS_GP_PYE_SOVR SO
   where SO.EMPLID      = R.EMPLID
     and SO.EMPL_RCD    = R.EMPL_RCD
     and SO.PIN_NUM     in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_TER' )
     and SO.BGN_DT      = R.TERMINATION_DT
     and SO.END_DT      is not NULL )

end-sql

 Let #EMA-count = #sql-count

 show ' FMB after create GPCHSI8X1_TMP for terminations #sql-count = ' #sql-count ' #EMA-count = ' #EMA-count

Begin-Sql on-error=give_warning
INSERT INTO PS_GPCHSI8X1_TMP(PROCESS_INSTANCE,EMPLID,EMPL_RCD,SEG_BGN_DT,SEG_END_DT,ACTION,HIRE_DT, TERMINATION_DT)
#ifdef ORACLE
SELECT /*+ INDEX(R PS_GPCH_RP_0001)*/
#else
SELECT
#endif

[$prcs_process_instance],B.EMPLID,B.EMPL_RCD,B.EFFDT,B.EFFDT,'HIR',B.EFFDT,''
From PS_JOB B, PS_PERS_NID PN
where B.EMPLID            = PN.EMPLID
  AND PN.COUNTRY          = 'CHE'
  AND PN.NATIONAL_ID_TYPE = 'NNSS'
!FMB 20171129  AND PN.NATIONAL_ID_TYPE = 'NNSS'
!FMB 20171129  AND PN.NATIONAL_ID      <> ' '
  AND B.ACTION            in ('HIR','REH')
  AND B.COMPANY           = $comp
  AND B.EFFDT             between   $ctl_start_dt and $ctl_end_dt
  AND B.EFFSEQ  = ( select max(B1.EFFSEQ) from PS_JOB B1 where B.EMPLID = B1.EMPLID and B.EMPL_RCD = B1.EMPL_RCD and B.EFFDT = B1.EFFDT )
  AND not exists ( select 'X' from PS_GP_PYE_SOVR SO
   where SO.EMPLID      = B.EMPLID
     and SO.EMPL_RCD    = B.EMPL_RCD
     and SO.PIN_NUM     in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_HIR' )
     and SO.BGN_DT      = B.EFFDT
     and SO.END_DT      is not NULL )
  AND not exists ( select 'X' from PS_GPCH_SI_DATA SO
   where SO.EMPLID             = B.EMPLID
     and SO.EMPL_RCD           = B.EMPL_RCD
     and SO.EFFDT              >= B.EFFDT 
     and SO.GPCH_SI_AHV_STATUS = '0' )
    AND not exists 
     ( select 'X' from PS_JOB J1 
                    where J1.EMPLID   = B.EMPLID 
                      AND J1.EMPL_RCD = B.EMPL_RCD
                      AND J1.ACTION   in ('TER')
                      AND J1.COMPANY  = B.COMPANY
                      AND J1.EFFDT    = B.EFFDT )
  and not exists ( select 'X' from PS_GP_PYE_SOVR SO
   where SO.EMPLID      = B.EMPLID
     and SO.EMPL_RCD    = B.EMPL_RCD
     and SO.PIN_NUM     in ( select PIN_NUM from PS_GP_PIN where PIN_NM = 'CH_AH_EMA_TER' )
     and SO.BGN_DT      = B.EFFDT
     and SO.END_DT      is not NULL )
                    
end-sql

 Let #EMA-count = #EMA-count + #sql-count

 show ' FMB after create GPCHSI8X1_TMP for hire #sql-count = ' #sql-count ' #EMA-count = ' #EMA-count 

 Let $EMA_EMPLID = ' '

begin-select on-error=give_warning

A.EMPLID
A.EMPL_RCD
A.SEG_BGN_DT
A.SEG_END_DT
A.ACTION
A.HIRE_DT
A.TERMINATION_DT

#debug show ' &A.EMPLID = ' &A.EMPLID ' &A.ACTION = ' &A.ACTION  ' &A.HIRE_DT = ' &A.HIRE_DT  ' &A.TERMINATION_DT = ' &A.TERMINATION_DT ' &A.SEG_BGN_DT = ' &A.SEG_BGN_DT ' &A.SEG_END_DT = ' &A.SEG_END_DT

 let $MutationE    = ' '
 let $MutationW    = ' '
 let #Process-count = #Process-count + 1
    
 If &A.ACTION         = 'HIR' 
  
  let $MutationE  = 'Entry'
  do ConvertToComponents(&A.SEG_BGN_DT, $yy, $mm, $dd)
  let $ValidAsOfE = $yy || '-' || $mm || '-' || $dd
  
#debug show ' &A.EMPLID = ' &A.EMPLID ' $ValidAsOfE = ' $ValidAsOfE  
 End-If

 If &A.ACTION         = 'TER'
   let $MutationW     = 'Withdrawal'
   do ConvertToComponents(&A.TERMINATION_DT, $yy, $mm, $dd)
   let $ValidAsOfW = $yy || '-' || $mm || '-' || $dd
!Take most recent Hire as From    
   do ConvertToComponents(&A.HIRE_DT, $yy, $mm, $dd)
   IF $yy < $ptot_year
     let $From_Date = $ptot_year || '-01-01' 
   ELSE
     let $From_Date = $yy || '-' || $mm || '-' || $dd
   End-If
   
   let $To_Date   = $ValidAsOfW
#debug show ' &A.EMPLID = ' &A.EMPLID ' $ValidAsOfW = ' $ValidAsOfW  
 End-If
 
 Do Employee_Data_XML
 
From PS_GPCHSI8X1_TMP A
where A.PROCESS_INSTANCE = #prcs_process_instance
order by A.EMPLID, A.SEG_BGN_DT

end-select

Do Create-Company-total

#debug show 'Process-Main out'

end-procedure 

!******************************************************************
begin-procedure initialVars
 let #Amount_4_Old  = 0
 let #Amount_5_Old  = 0
 let #Amount_6_Old  = 0
 let #Amount_7_Old  = 0
 let #Amount_8_Old  = 0
 let #Amount_9_Old  = 0
 let #Amount_10_Old = 0
 let #Amount_11_Old = 0
 let #Amount_12_Old = 0
 let $B_Date        = $B_Date_Actual
 let $E_Date        = $E_Date_Actual
end-procedure

!**********************************************************************************************
Begin-Procedure Report-Translation
#debug show ' Report-Translation in / out '
end-Procedure Report-Translation

!**********************************************************************************************
begin-procedure Get-Values
  let $language_cd        = $PRCS_LANGUAGE_CD
  let $comp               = &GPCH_RUN_CNTL.PAY_ENTITY
  let $Ct_Year            = RTRIM(to_char(&GPCH_RUN_CNTL.GPCH_RC_PAY_YEAR), ' ')
  let #Serial_NBR         = &GPCH_RUN_CNTL.GPCH_RC_SERIALNR
  let $Adjusting_DT       = rtrim(&GPCH_RUN_CNTL.GPCH_RC_ADJUST_DT,' ')
  let $LST_Interface      = rtrim(&GPCH_RUN_CNTL.GPCH_RC_LST_OPTION,' ')
  let #Cntl_AHV_Amount    = &GPCH_RUN_CNTL.GPCH_RC_AHV_AMNT
  let #Cntl_ALV1_Amount   = &GPCH_RUN_CNTL.GPCH_RC_ALV1_AMNT
  let #Cntl_ALV2_Amount   = &GPCH_RUN_CNTL.GPCH_RC_ALV2_AMNT
  let $Ctl_Canton         = RTRIM(&GPCH_RUN_CNTL.GPCH_TX_CANTON,' ')
  let $GPCH_EG_YEP_FLG    = RTRIM(&GPCH_RUN_CNTL.GPCH_EG_YEP_FLG,' ')
  let #Domainid           = &GPCH_RUN_CNTL.GPCH_EG_DOMAINID
!FMB 20120530
  let $Ctl_Curr_Pay_End_Dt = RTRIM(&GPCH_RUN_CNTL.GPCH_AL_CPAY_ENDDT, ' ')  
  
  Let $PAY_BGN_DT = $Ct_Year || '0101'
  do Format-DateTime($PAY_BGN_DT, $PAY_BGN_DT, {DEFCMP},'','native')
 
   If $GPCH_EG_YEP_FLG = 'Y'
    
     Let $comp = &GPCH_RUN_CNTL.COMPANY
     ! SYED Let #GPCH_EG_TRNS_SEQ = &GPCH_RUN_CNTL.GPCH_EG_TRNS_SEQ
     ! SYED  do Format-Number(#GPCH_EG_TRNS_SEQ,$GPCH_EG_TRNS_SEQ,'99')
   End-If

  if $comp <> ''
    let $Ctl_Com = rtrim($comp, ' ')
    uppercase $Ctl_Com
  end-if
!FMB 20120530
#debug show 'FMB before AHV EA $Ctl_Curr_Pay_End_Dt = ' $Ctl_Curr_Pay_End_Dt
 If $Rpt_Type <> 'Y'
  let $Ctl_Curr_Pay_End_Dt = $Ctl_End_Dt
 End-If
#debug show 'FMB After AHV EA $Ctl_Curr_Pay_End_Dt = ' $Ctl_Curr_Pay_End_Dt
end-procedure

!**********************************************************************************************
begin-procedure Ask-Input
input $comp  'PAY EENTITY '           type=char        maxlen=3
input $Ct_Year 'YEAR EXEMPLE: 1996 ' type=number      maxlen=4
if $comp <> ''
    let $Ctl_Com = rtrim($comp, ' ')
    uppercase $Ctl_Com
        let $comp=$Ctl_Com
end-if
input $Ctl_Diskette_Type    'DISK TYPE '
input #Serial_NBR   'SERIAL NUMBER '  type=number
input $Adjusting_DT  'ADJUSTING DATE ' type=date
input $LST_Interface    'PRINT TYPE 0->LIST, 1->INTERFACE, 2->LIST & INTERFACE ' type=char
input #Cntl_AHV_Amount  'AHV - CONTRIBUTION '      type=number
input #Cntl_ALV1_Amount 'ALV1 - CONTRIBUTION '       type=number
input #Cntl_ALV2_Amount 'ALV1 - CONTRIBUTION '       type=number
input $Ctl_Canton  'Canton' type=char
end-procedure

!**********************************************************************************************
begin-procedure Get-Translate-Value

  move 'MONTHCD' to $FieldName
  move $mm to $FieldValue

  do Read-Translate-Table
  let $Month_Name = $XlatShortName

end-procedure Get-Translate-Value

!**********************************************************************************************
begin-procedure Strings_Pads($Str1, :$Str2, #Len1)
   let $Str1 = rtrim(ltrim($Str1, ' '), ' ')
   let $Str1 = rtrim(substr($Str1, 1, #Len1), ' ')
   let $Str2 = lpad($Str1, #Len1, ' ')
end-procedure

!**********************************************************************************
Begin-procedure Get_English_Strings($ReportID)
#Debug show 'Get_English_Strings -> '  $ReportID

#Debug show 'Get_English_Strings <- ' #_str_cnt
End-procedure Get_English_Strings

!****************************************************************************
Begin-procedure Get_German_Strings($ReportID)
#Debug show 'Get_German_Strings -> '  $ReportID

#Debug show 'Get_German_Strings <- ' #_str_cnt
End-procedure Get_German_Strings

!****************************************************************************
Begin-procedure Get_Italian_Strings($ReportID)
#Debug show 'Get_Italian_Strings -> '  $ReportID

#Debug show 'Get_Italian_Strings <- ' #_str_cnt
End-procedure Get_Italian_Strings
!****************************************************************************
Begin-procedure Get_French_Strings($ReportID)
#Debug show 'Get_French_Strings -> '  $ReportID

#Debug show 'Get_French_Strings <- ' #_str_cnt
End-procedure Get_French_Strings
!***********************************************************************
begin-procedure Get-MBR-ID
#DEBUG show '<- Get-MBR-ID  '

 
 Let $MBR_ID = ' '

Begin-Select on-error=give_warning
MBR.GPCH_SI_UV_MBR_ID     &MBR_ID

 Let $MBR_ID =  &MBR_ID

FROM PS_GPCH_SI_ACC_INS MBR
WHERE MBR.COMPANY = $Ctl_Com
AND   MBR.EFFDT = (SELECT MAX(MBR2.EFFDT) FROM PS_GPCH_SI_ACC_INS MBR2
                                     WHERE MBR2.EFFDT <= $ctl_end_dt)
AND   MBR.GPCH_SI_PROV_TYPE = $SPRV_TYPE
AND  (
       ( MBR.GPCH_SI_PROV_TYPE = '5' AND 
       ( MBR.GPCH_TX_CANTON = $SPRV_CANTON or MBR.GPCH_ALL_CANTONFLG = $SPRV_ALL ) )
    OR ( MBR.GPCH_SI_PROV_TYPE <> '5' AND  MBR.GPCH_TX_UV_PROV_CD = $SPRV_CD ) )
End-select



#DEBUG show '<- Get-MBR-ID  '
end-procedure Get-MBR-ID

!*********************************************************************************************
begin-procedure Create-Company-total

!FMB20070817 new temps for XML Totals

!#debug show ' FMB free amounts $E_ID = ' $E_ID '#AHV_Free_xml = ' #AHV_Free_xml ' #ALV_Free_xml = ' #ALV_Free_xml

! FMB 20120530
 If $Rpt_Type <> 'Y'
   let #AHV_Lohn_xml_Tot  = 0.00
   let #AHV_Free_xml_Tot  = 0.00
   let #ALV_Lohn_xml_Tot  = 0.00
   let #ALVZ_Lohn_xml_Tot = 0.00
   let #ALV_Free_xml_Tot  = 0.00
 End-If

    DO Format-Number(#AHV_Lohn_xml_Tot, $AHV_Lohn_xml_Tot, '888888888888.00')
    DO Format-Number(#AHV_Free_xml_Tot, $AHV_Free_xml_Tot, '888888888888.00')
    DO Format-Number(#ALV_Lohn_xml_Tot, $ALV_Lohn_xml_Tot, '888888888888.00')
    DO Format-Number(#ALVZ_Lohn_xml_Tot, $ALVZ_Lohn_xml_Tot, '888888888888.00')
    DO Format-Number(#ALV_Free_xml_Tot, $ALV_Free_xml_Tot, '888888888888.00')

    DO Format-Number(#ptot_domainid, $ptot_domainid, '888')   
   
   lET $AHV-AVS-Incomes = '<Total-AHV-AVS-Incomes>' || $AHV_Lohn_xml_Tot || '</Total-AHV-AVS-Incomes>'
   lET $AHV-AVS-Open = '<Total-AHV-AVS-Open>' || $AHV_Free_xml_Tot || '</Total-AHV-AVS-Open>'
   let $ALV-AC-Incomes = '<Total-ALV-AC-Incomes>' || $ALV_Lohn_xml_Tot || '</Total-ALV-AC-Incomes>'
   let $ALVZ-ACS-Incomes = '<Total-ALVZ-ACS-Incomes>' || $ALVZ_Lohn_xml_Tot ||'</Total-ALVZ-ACS-Incomes>'
   let $ALV-AC-Open = '<Total-ALV-AC-Open>' || $ALV_Free_xml_Tot || '</Total-ALV-AC-Open>'

   let $AHV-AVS-Totals = '<AHV-AVS-Totals institutionIDRef='||'"'||$ptot_providercd||'" >'|| $AHV-AVS-Incomes || $AHV-AVS-Open || $ALV-AC-Incomes 
   || $ALVZ-ACS-Incomes  || $ALV-AC-Open || '</AHV-AVS-Totals>'


!FMB 20090103
 #debug show ' $ptot_year = ' $ptot_year
let #ptot_year = $ptot_year 
 

 Begin-Sql on-error=give_warning

DELETE FROM PS_GPCH_EG_PTOTALS WHERE GPCH_SI_PROV_TYPE = '7' AND GPCH_SI_PROV_CD=$ptot_providercd  AND GPCH_RC_PAY_YEAR = #ptot_year AND COMPANY = $ptot_company  
AND GPCH_EG_REQUEST_ID=$ptot_requestid AND GPCH_EG_DOMAINID = #ptot_domainid

End-SQL


!FMB 20090103 #ptot_year and #ptot_domainid

Begin-Sql on-error=give_warning

 Insert into PS_GPCH_EG_PTOTALS (COMPANY,GPCH_RC_PAY_YEAR,GPCH_EG_DOMAINID,GPCH_EG_REQUEST_ID,GPCH_SI_PROV_TYPE,GPCH_SI_PROV_CD,GPCH_EG_USERKEY,GPCH_EG_CMP_XML) 
 values ($ptot_company,#ptot_year,#ptot_domainid,$ptot_requestid,'7',$ptot_providercd,'X',$AHV-AVS-Totals)

End-SQL


end-procedure
!**********************************************************************************************

!****************************************************************************
#include 'gpchut01.sqc'
#include 'gpchut04.sqc'  ! get company informations
#include 'gpchut06.sqc'  ! get run control parameter values
#include 'gpchut07.sqc'  ! get Log
#include 'gpchut11.sqc'  ! get Tax and Fak Values
#include 'curdttim.sqc'  ! get-current-datetime procedure
#include 'readxlat.sqc'  ! read-translate-table procedure
#include 'datetime.sqc'  ! routines for date and time formatting
#include 'validdt.sqc'   ! validate date routine
#include 'number.sqc'    ! routines to format numbers
#include 'stdapi.sqc'    ! routines to update run status
#include 'sqrtrans.sqc'  ! sqr strings table procedures
#include 'datemath.sqc'  ! function for date-calculation
#include 'gpchsi8s.sqc'  ! Get Strings Values for GPCHSI08
#include 'gpchglbs.sqc'  ! Get Strings Values for GPCHGLOB
#include 'gpchsi9s.sqc'  ! Get Strings Values for GPCHSI09
#include 'gpchal1s.sqc'  ! Get Strings Values for GPCHAL01
